{
    "items": [
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You're saying you want a \"serverless\" solution. But that means you have no ability to put any  of \"your\" code in the loop. (NOTE: Once you give your code to a client, it's \"their\" code now.)  Locking down CORS is not going to help: People can easily write a non-web-based tool (or a web-based proxy) that adds the correct CORS header to abuse your system.</p>\n\n<p>The big problem is that you can't differentiate between the different users. You can't allow one user to list/access his files, but prevent others from doing so.  If you detect abuse, there is nothing you can do about it except change the key. (Which the attacker can presumably just get again.)</p>\n\n<p>Your best bet is to create an \"IAM user\" with a key for your javascript client. Only give it write access to just one bucket. (but ideally, do not enable the ListBucket operation, that will make it more attractive to attackers.)</p>\n\n<p>If you had a server (even a simple micro instance at $20/month), you could sign the keys on your server while monitoring/preventing abuse in realtime.  Without a server, the best you can do is periodically monitor for abuse after-the-fact.  Here's what I would do:</p>\n\n<p>1) periodically rotate the keys for that IAM user: Every night, generate a new key for that IAM user, and replace the oldest key. Since there are 2 keys, each key will be valid for 2 days.</p>\n\n<p>2) enable S3 logging, and download the logs every hour. Set alerts on \"too many uploads\" and \"too many downloads\". You will want to check both total file size and number of files uploaded. And you will want to monitor both the global totals, and also the per-IP address totals (with a lower threshold).</p>\n\n<p>These checks can be done \"serverless\" because you can run them on your desktop. (i.e. S3 does all the work, these processes just there to alert you to abuse of your S3 bucket so you don't get a <em>giant</em> AWS bill at the end of the month.)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think what you want is Browser-Based Uploads Using POST.</p>\n\n<p>Basically, you do need server-side code, but all it does is generate signed policies. Once the client-side code has the signed policy, it can upload using POST directly to S3 without the data going through your server.</p>\n\n<p>Here's the official doc links: </p>\n\n<p>Diagram: <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html\">http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingHTTPPOST.html</a></p>\n\n<p>Example code: <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/HTTPPOSTExamples.html\">http://docs.aws.amazon.com/AmazonS3/latest/dev/HTTPPOSTExamples.html</a></p>\n\n<p>The signed policy would go in your html in a form like this:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    ...\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n    ...\n  &lt;/head&gt;\n  &lt;body&gt;\n  ...\n  &lt;form action=\"http://johnsmith.s3.amazonaws.com/\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    Key to upload: &lt;input type=\"input\" name=\"key\" value=\"user/eric/\" /&gt;&lt;br /&gt;\n    &lt;input type=\"hidden\" name=\"acl\" value=\"public-read\" /&gt;\n    &lt;input type=\"hidden\" name=\"success_action_redirect\" value=\"http://johnsmith.s3.amazonaws.com/successful_upload.html\" /&gt;\n    Content-Type: &lt;input type=\"input\" name=\"Content-Type\" value=\"image/jpeg\" /&gt;&lt;br /&gt;\n    &lt;input type=\"hidden\" name=\"x-amz-meta-uuid\" value=\"14365123651274\" /&gt;\n    Tags for File: &lt;input type=\"input\" name=\"x-amz-meta-tag\" value=\"\" /&gt;&lt;br /&gt;\n    &lt;input type=\"hidden\" name=\"AWSAccessKeyId\" value=\"AKIAIOSFODNN7EXAMPLE\" /&gt;\n    &lt;input type=\"hidden\" name=\"Policy\" value=\"POLICY\" /&gt;\n    &lt;input type=\"hidden\" name=\"Signature\" value=\"SIGNATURE\" /&gt;\n    File: &lt;input type=\"file\" name=\"file\" /&gt; &lt;br /&gt;\n    &lt;!-- The elements after this will be ignored --&gt;\n    &lt;input type=\"submit\" name=\"submit\" value=\"Upload to Amazon S3\" /&gt;\n  &lt;/form&gt;\n  ...\n&lt;/html&gt;\n</code></pre>\n\n<p>Notice the FORM action is sending the file <strong>directly to S3</strong> - not via your server.</p>\n\n<p>Every time one of your users wants to upload a file, you would create the <code>POLICY</code> and <code>SIGNATURE</code> on your server. You return the page to the user's browser. The user can then upload a file directly to S3 without going through your server.</p>\n\n<p>When you sign the policy, you typically make the policy expire after a few minutes. This forces your users to talk to your server before uploading. This lets you monitor and limit uploads if you desire.</p>\n\n<p>The only data going to or from your server is the signed URLs. Your secret keys stay secret on the server.</p>\n",
                    "is_accepted": true,
                    "score": 68
                },
                {
                    "body": "<p>If you don't have any server side code, you security depends on the security of the access to your JavaScript code on the client side (ie everybody who has the code could upload something).</p>\n\n<p>So I would recommend, to simply create a special S3 bucket which is public writeable (but not readable), so you don't need any signed components on the client side.</p>\n\n<p>The bucket name (a GUID eg) will be your only defense against malicious uploads (but a potential attacker could not use your bucket to transfer data, because it is write only to him)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>To create a signature, I must use my secret key. But all things\n  happens on a client side, so, the secret key can be easily revealed\n  from page source (even if I obfuscate/encrypt my sources).</p>\n</blockquote>\n\n<p>This is where you have misunderstood. The very reason digital signatures are used is so that you can verify something as correct without revealing your secret key. In this case the digital signature is used to prevent the user from modifying the policy you set for the form post.</p>\n\n<p>Digital signatures such as the one here are used for security all around the web. If someone (NSA?) really were able to break them, they would have much bigger targets than your S3 bucket :)</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I'm implementing a direct file upload from client machine to Amazon S3 via REST API using only JavaScript, without any server-side code. All works fine but one thing is worrying me...</p>\n\n<p>When I send a request to Amazon S3 REST API, I need to sign the request and put a signature into <code>Authentication</code> header. To create a signature, I must use my secret key. But all things happens on a client side, so, the secret key can be easily revealed from page source (even if I obfuscate/encrypt my sources).</p>\n\n<p>How can I handle this? And is it a problem at all? Maybe I can limit specific private key usage only to REST API calls from a specific CORS Origin and to only PUT and POST methods or  maybe link key to only S3 and specific bucket? May be there are another authentication methods?</p>\n\n<p>\"Serverless\" solution is ideal, but I can consider involving some serverside processing, excluding uploading a file to my server and then send in to S3.</p>\n",
            "last_activity_date": 1409002362,
            "question_id": 17585881,
            "score": 26,
            "tags": [
                "javascript",
                "authentication",
                "amazon-web-services",
                "amazon-s3",
                "amazon"
            ],
            "title": "Amazon S3 direct file upload from client browser - private key disclosure"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You don't need jQuery for that. Use regular javascript</p>\n\n<pre><code>var arr = new Array();\n// or var arr = [];\narr.push('value1');\narr.push('value2');\n</code></pre>\n\n<p>Note: In javascript, you can also use Objects as Arrays, but still have access to the Array prototypes. This makes the object behave like an array:</p>\n\n<pre><code>var obj = new Object();\nArray.prototype.push.call(obj, 'value');\n</code></pre>\n\n<p>will create an object that looks like:</p>\n\n<pre><code>{\n    0: 'value',\n    length: 1\n}\n</code></pre>\n\n<p>You can access the vaules just like a normal array f.ex <code>obj[0]</code>.</p>\n",
                    "is_accepted": true,
                    "score": 243
                },
                {
                    "body": "<p>You can use the <code>.push()</code> method (which is standard JavaScript)</p>\n\n<p>e.g.</p>\n\n<pre><code>var primates = new Array();\nprimates.push('monkey');\nprimates.push('chimp');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This has nothing to do with jQuery, just JavaScript in general.</p>\n\n<p>To create an array in JavaScript:</p>\n\n<pre><code>var a = [];\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>var a = ['value1', 'value2', 'value3'];\n</code></pre>\n\n<p>To append values on the end of existing array:</p>\n\n<pre><code>a.push('value4');\n</code></pre>\n\n<p>To create a new array, you should really use <code>[]</code> instead of <code>new Array()</code> for the following reasons:</p>\n\n<ul>\n<li><code>new Array(1, 2)</code> is equivalent to <code>[1, 2]</code>, but <code>new Array(1)</code> is <em>not</em> equivalent to <code>[1]</code>. Rather the latter is closer to <code>[undefined]</code>, since a single integer argument to the <code>Array</code> constructor indicates the desired array length.</li>\n<li><code>Array</code>, just like any other built-in JavaScript class, is not a keyword. Therefore, someone could easily define <code>Array</code> in your code to do something other than construct an array.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<pre><code>array = [\"value1\", \"value2\", \"value3\"]\n</code></pre>\n\n<p>it's not so much jquery as javascript</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>jQuery is an abstraction of JavaScript. Think of jQuery as a sub-set of JavaScript, aimed at working with the DOM. That being said; there are functions for adding item(s) to a collection. I would use basic JavaScript in your case though:</p>\n\n<pre><code>var array;\n\narray[0] = \"value1\";\narray[1] = \"value2\";\narray[2] = \"value3\";\n</code></pre>\n\n<p>... Or:</p>\n\n<pre><code>var array = [\"value1\", \"value2\", \"value3\"];\n</code></pre>\n\n<p>... Or:</p>\n\n<pre><code>var array = [];\n\narray.push(\"value1\");\narray.push(\"value2\");\narray.push(\"value3\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Array is a JavaScript native object, why don't you just try to use the API of it? Knowing API on its own will save you time when you will switch to pure JavaScript or another framework. </p>\n\n<p>There are number of different possibilities, so, use the one which mostly targets your needs.</p>\n\n<p>Creating array with values:</p>\n\n<pre><code>var array = [\"value1\", \"value2\", \"value3\"];\n</code></pre>\n\n<p>Adding values to the end</p>\n\n<pre><code>var array = [];\narray.push(\"value1\");\narray.push(\"value2\");\narray.push(\"value3\");\n</code></pre>\n\n<p>Adding values to the begin:</p>\n\n<pre><code>var array = [];\narray.unshift(\"value1\");\narray.unshift(\"value2\");\narray.unshift(\"value3\");\n</code></pre>\n\n<p>Adding values at some index:</p>\n\n<pre><code>var array = [];\narray[index] = \"value1\";\n</code></pre>\n\n<p>or by using splice</p>\n\n<pre><code>array.splice(index, 0, \"value1\", \"value2\", \"value3\");\n</code></pre>\n\n<p>Choose one you need.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>There are several ways:</p>\n\n<p><strong>Instantiating the array:</strong></p>\n\n<pre><code>var arr;\n\narr = new Array(); // empty array\n\n// ---\n\narr = [];          // empty array\n\n// ---\n\narr = new Array(3);\nalert(arr.length);  // 3\nalert(arr[0]); // undefined\n\n// ---\n\narr = [3];\nalert(arr.length);  // 1\nalert(arr[0]); // 3\n</code></pre>\n\n<p><strong>Pushing to the array:</strong></p>\n\n<pre><code>arr = [3];     // arr == [3]\narr[1] = 4;    // arr == [3, 4]\narr[2] = 5;    // arr == [3, 4, 5]\narr[4] = 7;    // arr == [3, 4, 5, undefined, 7]\n\n// ---\n\narr = [3];\narr.push(4);        // arr == [3, 4]\narr.push(5);        // arr == [3, 4, 5]\narr.push(6, 7, 8);  // arr == [3, 4, 5, 6, 7, 8]\n</code></pre>\n\n<p>Using <code>.push()</code> is the better way to add to an array, since you don't need to know how many items are already there, and you can add many items in one function call.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Indeed, you must initialize your array then right after that use array.push() command line.</p>\n\n<pre><code>var array = new Array();\narray.push(\"first value\");\narray.push(\"second value\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In PHP, I'd do something like:</p>\n\n<pre><code>$array = array();\n$array[] = \"value1\";\n$array[] = \"value2\";\n$array[] = \"value3\";\n</code></pre>\n\n<p>How would I do the same thing in JavaScript?</p>\n",
            "last_activity_date": 1424967682,
            "question_id": 1996747,
            "score": 137,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Add new value to an existing array in JavaScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>There is a property of the built-in <a href=\"https://developer.mozilla.org/en/DOM/window.location\"><code>window.location</code></a> object that will provide that for the current window.</p>\n\n<pre><code>// If URL is http://www.somedomain.com/account/search?filter=a#top\n\nwindow.location.pathname // /account/search\n\n// For reference:\n\nwindow.location.host     // www.somedomain.com (includes port if there is one)\nwindow.location.hostname // www.somedomain.com\nwindow.location.hash     // #top\nwindow.location.href     // http://www.somedomain.com/account/search?filter=a#top\nwindow.location.port     // (empty string)\nwindow.location.protocol // http:\nwindow.location.search   // ?filter=a  \n</code></pre>\n\n<p><br/></p>\n\n<hr>\n\n<h2>Update, use the same properties for any URL:</h2>\n\n<p>It turns out that this schema is being standardized as an interface called <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLUtils\"><strong>URLUtils</strong></a>, and guess what?  Both the existing <code>window.location</code> object <strong>and anchor elements</strong> implement the interface.</p>\n\n<p><strong>So you can use the same properties above for <em>any</em> URL</strong> &mdash; just create an anchor with the URL and access the properties:</p>\n\n<pre><code>var el = document.createElement('a');\nel.href = \"http://www.somedomain.com/account/search?filter=a#top\";\n\nel.host        // www.somedomain.com (includes port if there is one[1])\nel.hostname    // www.somedomain.com\nel.hash        // #top\nel.href        // http://www.somedomain.com/account/search?filter=a#top\nel.pathname    // /account/search\nel.port        // (port if there is one[1])\nel.protocol    // http:\nel.search      // ?filter=a\n</code></pre>\n\n<p><strong>[1]:</strong> Browser support for the properties that include port is not consistent, See: <a href=\"http://jessepollak.me/chrome-was-wrong-ie-was-right\">http://jessepollak.me/chrome-was-wrong-ie-was-right</a></p>\n\n<p><strong>This works in the latest versions of Chrome and Firefox</strong>. I do not have versions of Internet Explorer to test, so please test yourself with the JSFiddle example.</p>\n\n<h2><a href=\"http://jsfiddle.net/nchaves/vMrjs/2/\">JSFiddle example</a></h2>\n\n<p>There's also a coming <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL.URL\"><code>URL</code></a> object that will offer this support for URLs themselves, without the anchor element.  Looks like no stable browsers support it at this time, but it is said to be coming in Firefox 26.  <a href=\"http://jsfiddle.net/nchaves/nZqUr/1/\">When you think you might have support for it, try it out here</a>.</p>\n",
                    "is_accepted": true,
                    "score": 163
                },
                {
                    "body": "<pre><code>window.location.href.split('/');\n</code></pre>\n\n<p>Will give you an array containing all your url parts, qhich you can access like a normal array.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>If this is the <strong>current</strong> url use <strong>window.location.pathname</strong> otherwise use this regular expression:</p>\n\n<pre><code>var reg = /.+?\\:\\/\\/.+?(\\/.+?)(?:#|\\?|$)/;\nvar pathname = reg.exec( 'http://www.somedomain.com/account/search?filter=a#top' )[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                }
            ],
            "body": "<p>What is the correct way to pull out just the path from a URL using JavaScript?</p>\n\n<p>Example:<br>\nI have URL<br>\n<a href=\"http://www.somedomain.com/account/search?filter=a#top\">http://www.somedomain.com/account/search?filter=a#top</a><br>\nbut I would just like to get this portion<br>\n<em>/account/search</em></p>\n\n<p>I am using jQuery if there is anything there that can be leveraged.</p>\n",
            "last_activity_date": 1381441768,
            "question_id": 6944744,
            "score": 54,
            "tags": [
                "javascript",
                "jquery",
                "url"
            ],
            "title": "JavaScript - Get Portion of URL Path"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>If each pixel is assumed to be of the same area then the following article about converting distances to longitude/latitude co-ordinates may be of some help to you:</p>\n\n<p><a href=\"http://www.johndcook.com/blog/2009/04/27/converting-miles-to-degrees-longitude-or-latitude/\" rel=\"nofollow\">http://www.johndcook.com/blog/2009/04/27/converting-miles-to-degrees-longitude-or-latitude/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You need formulas to convert latitude and longitude to rectangular coordinates. There are a great number to choose from and each will distort the map in a different way. Wolfram MathWorld has a good collection:</p>\n\n<p><a href=\"http://mathworld.wolfram.com/MapProjection.html\" rel=\"nofollow\">http://mathworld.wolfram.com/MapProjection.html</a></p>\n\n<p>Follow the \"See Also\" links.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You may have a look at <a href=\"http://code.google.com/p/gheat/source/browse/trunk/__/lib/python/gmerc.py\">code that used on gheat</a>, it's ported from js to python.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The translation you are addressing has to do with <a href=\"http://en.wikipedia.org/wiki/Map_projection\" rel=\"nofollow\">Map Projection</a>, which is how the spherical surface of our world is translated into a 2 dimensional rendering.  There are multiple ways (projections) to render the world on a 2-D surface.</p>\n\n<p>If your maps are using just a specific projection (<a href=\"http://en.wikipedia.org/wiki/Mercator_projection\" rel=\"nofollow\">Mercator</a> being popular), you should be able to find the equations, some sample code, and/or some library (e.g. one Mercator solution - <a href=\"http://stackoverflow.com/questions/1019997/in-javascript-convert-lat-longs-to-x-y-co-ordinates\">http://stackoverflow.com/questions/1019997/in-javascript-convert-lat-longs-to-x-y-co-ordinates</a>.  If that doesn't do it, I'm sure you can find other samples -  <a href=\"http://stackoverflow.com/search?q=mercator\">http://stackoverflow.com/search?q=mercator</a>.  If your images aren't map(s) using a Mercator projection, you'll need to determine what projection it does use to find the right translation equations.</p>\n\n<p>If you are trying to support multiple map projections (you want to support many different maps that use different projections), then you definitely want to use a library like <a href=\"http://trac.osgeo.org/proj/\" rel=\"nofollow\">PROJ.4</a>, but again I'm not sure what you'll find for Javascript or PHP.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The key to all of this is understanding <a href=\"http://en.wikipedia.org/wiki/Map_projection\">map projections</a>.  As others have pointed out, the cause of the distortion is the fact that the spherical (or more accurately ellipsoidal) earth is projected onto a plane.  </p>\n\n<p>In order to achieve your goal, you first must know two things about your data:</p>\n\n<ol>\n<li>The projection your maps are in.  If they are purely derived from <a href=\"http://maps.google.com\">Google Maps</a>, then chances are they are using a <a href=\"http://docs.openlayers.org/library/spherical_mercator.html\">spherical Mercator projection</a>.  </li>\n<li>The geographic coordinate system your latitude/longitude coordinates are using.  This can vary, because there are different ways of locating lat/longs on the globe.  The most common GCS, used in most web-mapping applications and for GPS's, is <a href=\"http://en.wikipedia.org/wiki/World_Geodetic_System\">WGS84</a>.</li>\n</ol>\n\n<p>I'm assuming your data is in these coordinate systems.</p>\n\n<p>The spherical Mercator projection defines a coordinate pair in meters, for the surface of the earth.  This means, for every lat/long coordinate there is a matching meter/meter coordinate.  This enables you to do the conversion using the following procedure:</p>\n\n<ol>\n<li>Find the WGS84 lat/long of the corners of the image.</li>\n<li>Convert the WGS lat/longs to the spherical Mercator projection.  There conversion tools out there, my favorite is to use the cs2cs tool that is part of the <a href=\"http://proj.maptools.org\">PROJ4 project</a>.  </li>\n<li>You can safely do a simple linear transform to convert between points on the image, and points on the earth in the spherical Mercator projection, and back again.</li>\n</ol>\n\n<p>In order to go from a WGS84 point to a pixel on the image, the procedure is now: </p>\n\n<ol>\n<li>Project lat/lon to spherical Mercator.  This can be done using the <a href=\"http://proj4js.org/\">proj4js library.</a></li>\n<li>Transform spherical Mercator coordinate into image pixel coordinate using the linear relationship discovered above.</li>\n</ol>\n\n<p>You can use the proj4js library like this:</p>\n\n<pre><code>// include the library\n&lt;script src=\"lib/proj4js-combined.js\"&gt;&lt;/script&gt;  //adjust the path for your server\n                                                 //or else use the compressed version\n// creating source and destination Proj4js objects\n// once initialized, these may be re-used as often as needed\nvar source = new Proj4js.Proj('EPSG:4326');    //source coordinates will be in Longitude/Latitude, WGS84\nvar dest = new Proj4js.Proj('EPSG:3785');     //destination coordinates in meters, global spherical mercators projection, see http://spatialreference.org/ref/epsg/3785/\n\n\n// transforming point coordinates\nvar p = new Proj4js.Point(-76.0,45.0);   //any object will do as long as it has 'x' and 'y' properties\nProj4js.transform(source, dest, p);      //do the transformation.  x and y are modified in place\n\n//p.x and p.y are now EPSG:3785 in meters\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>So you want to take latitude/longitude coordinates and find out the pixel coordinates on your image of that location?</p>\n\n<p>The main GMap2 class provides transformation to/from a pixel on the displayed map and a lat/long coordinate:</p>\n\n<pre><code>Gmap2.fromLatLngToContainerPixel(latlng)\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>var gmap2 = new GMap2(document.getElementById(\"map_canvas\"));\nvar geocoder = new GClientGeocoder();\n\ngeocoder.getLatLng( \"1600 Pennsylvania Avenue NW Washington, D.C. 20500\",\n    function( latlng ) {\n        var pixel_coords = gmap2.fromLatLngToContainerPixel(latlng);\n\n        window.alert( \"The White House is at pixel coordinates (\" + \n            pixel_coodrs.x + \", \" + pixel_coords.y + \") on the \" +\n            \"map image shown on this page.\" );\n    }\n);\n</code></pre>\n\n<p>So assuming that your map image is a screen grab of the Google Map display, then this will give you the correct pixel coordinate on that image of a lat/long coordinate.</p>\n\n<p>Things are trickier if you're grabbing tile images and stitching them together yourself since the area of the complete tile set will lie outside the area of the displayed map.</p>\n\n<p>In this case, you'll need to use the left and top values of the top-left image tile as an offset from the coordinates that fromLatLngToContainerPixel(latlng:GLatLng) gives you, subtracting the left coordinate from the x coordinate and top from the y coordinate. So if the top-left image is positioned at (-50, -122) (left, top), and fromLatLngToContainerPixel() tells you a lat/long is at pixel coordinate (150, 320), then on the image stitched together from tiles, the true position of the coordinate is at (150 - (-50), 320 - (-122)) which is (200, 442).</p>\n\n<p>It's also possible that a similar GMap2 coordinate translation function:</p>\n\n<pre><code>GMap2.fromLatLngToDivPixel(latlng:GLatLng)\n</code></pre>\n\n<p>will give you the correct lat/long to pixel translation for the stitched-tiles case - I've not tested this, nor is it 100% clear from the API docs.</p>\n\n<p>See here for more:\n<a href=\"http://code.google.com/apis/maps/documentation/reference.html#GMap2.Methods.Coordinate-Transformations\">http://code.google.com/apis/maps/documentation/reference.html#GMap2.Methods.Coordinate-Transformations</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You will have to implement the Google Maps API projection in your language. I have the C# source code for this: </p>\n\n<pre><code>public class GoogleMapsAPIProjection\n{\n    private readonly double PixelTileSize = 256d;\n    private readonly double DegreesToRadiansRatio = 180d / Math.PI;\n    private readonly double RadiansToDegreesRatio = Math.PI / 180d;\n    private readonly PointF PixelGlobeCenter;\n    private readonly double XPixelsToDegreesRatio;\n    private readonly double YPixelsToRadiansRatio;\n\n    public GoogleMapsAPIProjection(double zoomLevel)\n    {\n        var pixelGlobeSize = this.PixelTileSize * Math.Pow(2d, zoomLevel);\n        this.XPixelsToDegreesRatio = pixelGlobeSize / 360d;\n        this.YPixelsToRadiansRatio = pixelGlobeSize / (2d * Math.PI);\n        var halfPixelGlobeSize = Convert.ToSingle(pixelGlobeSize / 2d);\n        this.PixelGlobeCenter = new PointF(\n            halfPixelGlobeSize, halfPixelGlobeSize);\n    }\n\n    public PointF FromCoordinatesToPixel(PointF coordinates)\n    {\n        var x = Math.Round(this.PixelGlobeCenter.X\n            + (coordinates.X * this.XPixelsToDegreesRatio));\n        var f = Math.Min(\n            Math.Max(\n                 Math.Sin(coordinates.Y * RadiansToDegreesRatio),\n                -0.9999d),\n            0.9999d);\n        var y = Math.Round(this.PixelGlobeCenter.Y + .5d * \n            Math.Log((1d + f) / (1d - f)) * -this.YPixelsToRadiansRatio);\n        return new PointF(Convert.ToSingle(x), Convert.ToSingle(y));\n    }\n\n    public PointF FromPixelToCoordinates(PointF pixel)\n    {\n        var longitude = (pixel.X - this.PixelGlobeCenter.X) /\n            this.XPixelsToDegreesRatio;\n        var latitude = (2 * Math.Atan(Math.Exp(\n            (pixel.Y - this.PixelGlobeCenter.Y) / -this.YPixelsToRadiansRatio))\n            - Math.PI / 2) * DegreesToRadiansRatio;\n        return new PointF(\n            Convert.ToSingle(latitude),\n            Convert.ToSingle(longitude));\n    }\n}\n</code></pre>\n\n<p>Source:</p>\n\n<p><a href=\"http://code.google.com/p/geographical-dot-net/source/browse/trunk/GeographicalDotNet/GeographicalDotNet/Projection/GoogleMapsAPIProjection.cs\">http://code.google.com/p/geographical-dot-net/source/browse/trunk/GeographicalDotNet/GeographicalDotNet/Projection/GoogleMapsAPIProjection.cs</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>my approach works without a library and with cropped maps. Means it works with just parts from a Mercator image. Maybe it helps somebody: <a href=\"http://stackoverflow.com/a/10401734/730823\">http://stackoverflow.com/a/10401734/730823</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Struggled with this - Have both openstreet map and google street map and wanted to project an external graphic image</p>\n\n<pre><code>var map = new OpenLayers.Map({\n            div:\"map-id\",\n            allOverlays: true\n    });\n    var osm = new OpenLayers.Layer.OSM(\"OpenStreeMao\");\n    var gmap = new OpenLayers.Layer.Google(\"Google Streets\", {visibility: false});\n\n    map.addLayers([osm,gmap]);\n\n    var vectorLayer = new OpenLayers.Layer.Vector(\"IconLayer\");\n\n\n    var lonlatObject = new OpenLayers.LonLat(24.938622,60.170421).transform(\n            new OpenLayers.Projection(\"EPSG:4326\"), map.getProjectionObject()\n    );\n    console.log(lonlatObject);\n\n    var point = new OpenLayers.Geometry.Point(lonlatObject.lon, lonlatObject.lat);\n    console.log(point);\n\n    var point2 = new OpenLayers.Geometry.Point(lonlatObject.x, lonlatObject.y);\n    console.log(point2);\n\n    var feature = new OpenLayers.Feature.Vector(point, null, {\n        externalGraphic:  \"http://cdn1.iconfinder.com/data/icons/SUPERVISTA/networking/png/72/antenna.png\",\n        graphicWidth: 72,\n        graphicHeight: 72,\n        fillOpacity: 1\n    });\n\n\n    vectorLayer.addFeatures(feature);\n\n    map.addLayer(vectorLayer);\n\n\n    map.setCenter(\n            new OpenLayers.LonLat(24.938622,60.170421).transform(\n            new OpenLayers.Projection(\"EPSG:4326\"), map.getProjectionObject()\n            ),\n            12);\n\n     map.addControl(new OpenLayers.Control.LayerSwitcher());\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/alexcpn/N9dLN/8/\" rel=\"nofollow\">http://jsfiddle.net/alexcpn/N9dLN/8/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One of the important things to take into account is the \"zoom\" level of your projection (for Google Maps in particular).</p>\n\n<p>As Google explains it: </p>\n\n<blockquote>\n  <p>At zoom level 1, the map consists of 4 256x256 pixels tiles, resulting\n  in a pixel space from 512x512. At zoom level 19, each x and y pixel on\n  the map can be referenced using a value between 0 and 256 * 2^19</p>\n</blockquote>\n\n<p>( See <a href=\"https://developers.google.com/maps/documentation/javascript/maptypes?hl=en#MapCoordinates\" rel=\"nofollow\">https://developers.google.com/maps/documentation/javascript/maptypes?hl=en#MapCoordinates</a>)</p>\n\n<p>To factor in the \"zoom\" value, I recommend the simple and effective <strong>deltaLonPerDeltaX</strong> and <strong>deltaLatPerDeltaY</strong> functions below. While x-pixels and longitudes are strictly proportional, this is not the case for y-pixels and latitudes, for which the formula requires the initial latitude.</p>\n\n<pre><code>// Adapted from : http://blog.cppse.nl/x-y-to-lat-lon-for-google-maps\n\n\nwindow.geo = {\n\n    glOffset: Math.pow(2,28), //268435456,\n    glRadius:  Math.pow(2,28) / Math.PI,\n    a: Math.pow(2,28),\n    b: 85445659.4471,\n    c: 0.017453292519943,\n    d: 0.0000006705522537,\n    e: Math.E, //2.7182818284590452353602875,\n    p: Math.PI / 180,\n\n    lonToX: function(lon) {\n        return Math.round(this.glOffset + this.glRadius * lon * this.p);\n    },\n\n    XtoLon: function(x) {\n        return -180 + this.d * x;\n    },\n\n    latToY: function(lat) {\n        return Math.round(this.glOffset - this.glRadius *\n                          Math.log((1 + Math.sin(lat * this.p)) /\n                          (1 - Math.sin(lat * this.p))) / 2);\n    },\n\n    YtoLat: function(y) {\n        return Math.asin(Math.pow(this.e,(2*this.a/this.b - 2*y/this.b)) /\n                                 (Math.pow(this.e, (2*this.a/this.b - 2*y/this.b))+1) -\n                                 1/(Math.pow(this.e, (2*this.a/this.b - 2*y/this.b))+1)\n                        ) / this.c;\n    },\n\n    deltaLonPerDeltaX: function(deltaX, zoom) {\n        // 2^(7+zoom) pixels &lt;---&gt; 180 degrees\n        return deltaX * 180 / Math.pow(2, 7+zoom);\n    },\n\n    deltaLatPerDeltaY: function(deltaY, zoom, startLat) {\n        // more complex because of the curvature, we calculte it by difference\n        var startY = this.latToY(startLat),\n            endY = startY + deltaY * Math.pow(2, 28-7-zoom),\n            endLat = this.YtoLat(endY);\n\n        return ( endLat - startLat ); // = deltaLat\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a city \"map\" (for example - Moscow). She in accuracy repeats the contours the given city in google maps (that is it is copied from google maps and it is a little processed, but the sense remained the same).</p>\n\n<p><img src=\"http://img227.imageshack.us/img227/5169/map1.gif\" alt=\"alt text\"></p>\n\n<p>Also I have object co-ordinates in a city (in geographic coordinates).</p>\n\n<p><strong>Problem:</strong> how to convert geographic coordinates to the co-ordinates of my picture (that is in pixels on OX and OY on a picture). That is I receive geographic coordinates and it is necessary for me to draw this point on my picture.</p>\n\n<p>The most desired variant of the answer - is based on javascript, but it is possible and on php.</p>\n\n<hr>\n\n<p>I know that on small scales (for example on city scales) it to make simply enough (it is necessary to learn what geographic coordinates has one of picture corners, then to learn \"price\" of one pixel in geographic coordinates on a picture on axes OX and OY separately).</p>\n\n<p>But on the big scales (country scale) \"price\" of one pixel will be not a constant, and will vary strongly enough and the method described above cannot be applied.</p>\n\n<p>How to solve a problem on country scales?</p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>I do not use API Google Maps, I have only: geographic coordinates of the object (they are from google maps), I still have at my site a simple picture *. gif, in which I must draw a point corresponding geographic coordinates.</p>\n",
            "last_activity_date": 1407445778,
            "question_id": 2651099,
            "score": 45,
            "tags": [
                "javascript",
                "google-maps",
                "geolocation",
                "coordinates",
                "proj4js"
            ],
            "title": "Convert long/lat to pixel x/y on a given picture"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><strong>EDIT</strong> (2012-01-30): I pushed a more complete example in a <a href=\"https://bitbucket.org/cprecourt/ember-requirejs-example\">repo</a> on bitbucket.</p>\n\n<p>I have successfully used RequireJS to load Ember.js as well as the datetime addon (<a href=\"https://github.com/emberjs-addons/sproutcore-datetime\">github</a>). The Ember namespace itself stays global, but all of my application's data, including my instance of Ember.Application, is kept within modules through RequireJS. I'm also loading the handlebars templates using the 'text!' plugin.</p>\n\n<p>I haven't had any issue yet, but this is not a complete application, more of a proof of concept. Here's how I made it work. I can load my application directly with Safari without the need of a server. You would still need a server to load it with Chrome, which doesn't let JavaScript load files from the filesystem.</p>\n\n<p><strong>1)</strong> Because Ember.js uses BPM/Spade, I couldn't use a clone of the repo. Instead I'm wrapping the compiled version within a module:</p>\n\n<p><em>lib/ember.js</em>:</p>\n\n<pre><code>define(['jquery',\n        'plugins/order!lib/ember-0.9.3.js',\n        'plugins/order!lib/ember-datetime.js'],\n         function() {\n             return Ember;\n});\n</code></pre>\n\n<p>Note that this in itself doesn't hide Ember from the global scope. But I'm setting things up so that if, in the future, I'm able to do hide it, every other module which depends on this module will still work as-is.</p>\n\n<p><strong>2)</strong> Modules can refer to Ember like so:</p>\n\n<p><em>app/core.js</em>:</p>\n\n<pre><code>define(['lib/ember'], function(Em) {\n    MyApp = Em.Application.create({\n        VERSION: \"0.0.1\"\n    });\n    return MyApp;\n});\n</code></pre>\n\n<p>Here, \"Em\" could have been named something else; it doesn't refer directly to the global variable, but comes from the module defined in <em>lib/ember.js</em>.</p>\n\n<p><strong>3)</strong> To be accessible by Ember, handlebars have to be registered:</p>\n\n<p><em>app/templates/my-template.handlebars</em>:</p>\n\n<pre><code>MyApp v{{MyApp.VERSION}}.\n</code></pre>\n\n<p><em>app/views/my-view.js</em>:</p>\n\n<pre><code>define(['lib/ember',\n        'plugins/text!app/templates/my-template.handlebars'],\n        function(Em, myTemplateSource) {\n\n            Em.TEMPLATES[\"my-template\"] = Em.Handlebars.compile(myTemplateSource);\n\n            var myView = Em.View.create({\n                templateName: \"my-template\";\n            });\n\n            return myView;\n});\n</code></pre>\n\n<p><strong>4)</strong> I'm using <em>require-jquery.js</em> (jQuery and RequireJS bundled together).</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>There is a better way to include a handlebar file which can have multiple template blocks. Which can get compiled and available in one include.</p>\n\n<p>for eg: You have the following Handlebars template file:</p>\n\n<p>../templates/sample.handlebars</p>\n\n<pre><code>&lt;div&gt;&lt;!-- just a filler html tag. Wont show up in your page --&gt;\n    &lt;script type=\"text/x-handlebars\" data-template-name=\"template1\"&gt;\n        Some Html or Template Content ...\n    &lt;/script&gt;\n    &lt;script type=\"text/x-handlebars\" data-template-name=\"template2\"&gt;\n        Some Html or Template Content ...\n    &lt;/script&gt;\n    &lt;script type=\"text/x-handlebars\" data-template-name=\"template3\"&gt;\n        Some Html or Template Content ...\n    &lt;/script&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>../views/sampleView.js</p>\n\n<pre><code>define([\n    'jquery',\n    'lib/ember',\n    'plugins/text!../templates/sample.handlebars'],\n    function($, Em, myTemplateSource) {\n\n        // Bootstrap method accepts a context element under which all handlebars\n        // template blocks are defined. The filler &lt;div&gt; in this case.\n        // Compiles and assigns to the EM.TEMPLATES hash correctly. \n        Em.Handlebars.bootstrap($(myTemplateSource));\n\n        var myView = Em.View.create({\n            templateName: \"template1\";\n        });\n\n        return myView;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I've just uploaded to github a starter-kit for EmberJS+RequireJS, You could check it <a href=\"https://github.com/fernandogmar/Emberjs-RequireJS\" rel=\"nofollow\">https://github.com/fernandogmar/Emberjs-RequireJS</a></p>\n\n<p>Any good suggestions will be highly appreciated. Have Fun!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Mimosa has a few good example projects using Ember and Require.js.  Here's one to checkout: <a href=\"https://github.com/dbashford/mimosa-ember-emblem-templates\" rel=\"nofollow\">https://github.com/dbashford/mimosa-ember-emblem-templates</a>. The instructions to get it going it are in the README.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Ember CLI supports ES6 module syntax which transpiles to AMD. Seems like the community is getting behind Ember CLI as the preferred way to use Ember.</p>\n\n<p><a href=\"http://www.ember-cli.com\" rel=\"nofollow\">http://www.ember-cli.com</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Has anyone had much success with RequireJS and Ember.js? Seeing as Ember likes to have its structure assigned to a global object I'm finding that it can really butt heads with Requirejs. Would something like LAB.js work better for Ember?</p>\n",
            "last_activity_date": 1409791740,
            "question_id": 8776151,
            "score": 31,
            "tags": [
                "javascript",
                "ember.js",
                "requirejs"
            ],
            "title": "Ember.js and RequireJS"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>If scripts can be deferred, they can also be moved to the bottom of the page (as pointed out by @Christian in the comments)</p>\n\n<p>This would be a better choice in terms of performance, as it will not block the rest of the page from loading. You can place your scripts before the <code>&lt;/body&gt;</code> tag.</p>\n\n<p>This attribute is poorly supported by major browsers, this in itself should be a hint to stop using it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>defer</code> is supported only by internet explorer. you don't need to rely on it. there are other ways to get the same effect, like placing your scripts at the end of the page just before the <code>&lt;/body&gt;</code> tag, as others have pointed out.</p>\n\n<blockquote>\n  <p>The purpose of defer is to tell the\n  externally linked script to wait until\n  the page finishes loading until it\n  runs. The same thing can be\n  accomplished via good unobtrusive\n  JavaScript methods, which usually\n  include code that prevents scripts\n  from executing until the DOM is\n  finished loading.</p>\n  \n  <p>The advantage of defer occurs in\n  connection with Internet Explorer,\n  since that browser is the only one\n  that supports the defer attribute. So,\n  if you need a quick script to run only\n  in IE, and you don\u2019t mind if the\n  entire page loads before it starts to\n  execute, then simply add defer=\"defer\"\n  in your  tag and that will\n  quickly take care of that problem.\n  Fixing a transparent PNG issue in IE6\n  is one possible practical use for\n  defer.</p>\n  \n  <p>The defer attribute must\n  be used when hiding a script from\n  other browsers with a conditional\n  comment that targets an IE-only script\n  \u2014 otherwise the script will run\n  normally in other browsers.)</p>\n</blockquote>\n\n<p>Reference: <a href=\"http://www.impressivewebs.com/10-javascript-quick-tips-and-best-practices/\" rel=\"nofollow\">http://www.impressivewebs.com/10-javascript-quick-tips-and-best-practices/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h2>What do <code>defer</code> and <code>async</code> mean?</h2>\n\n<p>By default, a <strong><code>&lt;script src=...&gt;&lt;/script&gt;</code> tag is evil!</strong> The browser must halt parsing the HTML until the script is downloaded and executed (since the script might call <code>document.write(...)</code> or define global variables that later scripts depend on). This means that any images and stylesheets that are after the script tag don't start downloading until after the script has finished downloading and executing. External scripts typically make the Web load much more slowly, which is why NoScript has become so popular.</p>\n\n<p>Microsoft introduced <code>defer</code> to solve the problem. If you use <code>&lt;script defer src=...&gt;&lt;/script&gt;</code>, you <strong>promise not to call <code>document.write(...)</code></strong>. A <code>defer</code> external script will start downloading immediately but won't execute until after the page is rendered. After the page has rendered, all <code>defer</code> scripts are executed in the same order that they were declared. Not all browsers implement <code>defer</code> yet.</p>\n\n<p>HTML5 introduced the <code>async</code> attribute which may execute any time--possibly before the page has finished parsing or even before other <code>defer</code>/<code>async</code> scripts that are still downloading. But it's harder to use multiple <code>async</code> scripts because their execution order is not guaranteed. Like <code>defer</code>, not all browsers implement <code>async</code> yet.</p>\n\n<p>After all <code>defer</code> and <code>async</code> scripts have executed, the <code>DOMContentLoaded</code> and <code>load</code> events fire.</p>\n\n<h2>A brief history of <code>defer</code> and <code>async</code></h2>\n\n<ul>\n<li>1997 IE 4 introduces <code>defer</code>.</li>\n<li>1998 <a href=\"http://www.w3.org/TR/REC-html40/interact/scripts.html#adef-defer\">HTML 4 spec mentions <code>defer</code></a>, but unfortunately it doesn't say exactly when <code>defer</code> scripts execute (All in order? Before <code>onload</code>?). Thus, no other browsers implement <code>defer</code> because no one wants to reverse-engineer IE's behavior or break scripts that might depend on IE's peculiarities. (See the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=28293\">Mozilla feature request</a>, for example).</li>\n<li>2006 HTML5 draft finally describes the details needed to implement <code>defer</code>:  <code>defer</code> scripts should all be executed in order after the rest of the page is parsed, and before <code>onload</code>. It also introduces <code>async</code> to specify scripts that can execute whenever they are downloaded without having to wait for each other. Unfortunately, HTML5 contradicts IE by not allowing inline <code>defer</code> scripts. This <strong>breaks the invariant</strong> that all <code>defer</code> scripts are executed in order (if some <code>defer</code> scripts have <code>src</code> and some have inline content).</li>\n<li>2009 Gecko 1.9.1 (Firefox 3.5) <a href=\"https://developer.mozilla.org/En/HTML/Element/Script\">supports <code>defer</code></a>.</li>\n<li>2010-01 Gecko 1.9.2 (Firefox 3.6) <a href=\"https://developer.mozilla.org/En/HTML/Element/Script\">supports <code>async</code></a>.</li>\n<li>2010-09 <a href=\"http://webkit.org/blog/1395/running-scripts-in-webkit/1.\"><code>defer</code> and <code>async</code> are checked into Webkit</a>. You should see it in Chrome and Safari very soon (it's already in the Chrome dev channel but it's a bit buggy).</li>\n<li>We're still waiting for Opera to implement <code>defer</code> and <code>async</code> and for IE to implement <code>async</code>.</li>\n</ul>\n\n<h2>So what should a web developer use?</h2>\n\n<p>There's no single rule to follow at this time. You have to choose the solution that best balances simplicity, page render latency, and script execution latency for the set of browsers that access your website.</p>\n\n<ul>\n<li>The simplest way to have the page render before the scripts execute, as others have pointed out, is to put your scripts at the bottom of the page. But if the scripts are essential, or the webpage contains lots of HTML, then you should put your scripts higher up on the page.</li>\n<li>If your script is standalone and your customers use IE or new versions of Firefox, use <code>&lt;script async defer src=...&gt;&lt;/script&gt;</code>: This allows rendering to continue in parallel to script downloading for IE and the newest HTML5 browsers but causes pre-HTML5 browsers (including all versions of Opera) to block.</li>\n<li>If one external script depends on another, mark them both <code>defer</code> (but not <code>async</code>) and they will be executed in the order that they were declared. Again, this allows rendering to continue in parallel to script downloading in IE and HTML5-aware Gecko/Webkit, but older browsers and Opera will suffer. It's a good idea to use <code>defer</code> even if the scripts are at the bottom of the page so that they download in parallel with each other.</li>\n<li>Never use <code>defer</code> for inline scripts because the HTML5 draft has taken away the execution order guarantee.</li>\n<li>If your audience includes many Opera or old Firefox/Safari users, the following snippet will execute the script after parsing the document on most pre-HTML5 browsers (IE, Webkit, need to test old Firefox), while the newest HTML5-aware browsers start downloading immediately but won't block to execute the script because of the <code>async</code> attribute. In other words, most older browsers treat it like a script at the bottom of the page, and newest browsers recognize the <code>async</code>. But Opera users get the worst of both worlds, because Opera begins execution immediately and doesn't understand <code>async</code>. This is the <a href=\"http://code.google.com/apis/analytics/docs/tracking/asyncTracking.html\">pattern recommended by Google Analytics</a> for the urchin on many webpages.</li>\n</ul>\n\n<p>snippet:</p>\n\n<pre><code>&lt;script&gt;\n(function() {\n  var script = document.createElement('script');\n  script.src = '...';\n  script.async = true;\n  var s = document.getElementsByTagName('script')[0];\n  s.parentNode.insertBefore(script, s);\n})();\n&lt;/script&gt;\n</code></pre>\n\n<ul>\n<li>If another script depends on the first script to load, then you can use the same pattern as above, but listen to the onload event of the first script element before executing the second script. See the <a href=\"http://gist.github.com/603980\">LABjs example for how to wait for another script to load</a>.</li>\n<li>If you have multiple scripts with complicated dependencies, use <a href=\"http://labjs.com/\">LAB.js</a> or the <a href=\"http://yuilibrary.com/yui/docs/yui/yui-loader-ext.html\">YUI Loader</a> to make them download in parallel and execute in some valid order.</li>\n<li>If you're using a popular library such as jQuery, consider using <a href=\"http://code.google.com/apis/libraries/devguide.html\">Google's copy</a> rather than your own to increase the likelihood that the browser has already cached it.</li>\n</ul>\n\n<p><strong>Update</strong>: If you have scripts split into modules and want to improve performance, I recommend the \"Coupling Asynchronous Scripts\" chapter of <em>Even Faster Web Sites</em> by Steve Souder. It contains tips/tricks for not only controlling execution order but also to delay parsing of scripts to improve performance.</p>\n",
                    "is_accepted": true,
                    "score": 93
                }
            ],
            "body": "<p>Chrome for me has always been a reference on web standards, unfortunately the <a href=\"http://www.w3.org/TR/REC-html40/interact/scripts.html#adef-defer\">defer</a> isn't supported and IE supports it since version 5.5. Why ?</p>\n\n<p><strong>js.js</strong></p>\n\n<pre><code>document.getElementById (\"hi\").innerHTML = \"Hi :)\";\n</code></pre>\n\n<p><strong>HTML</strong>   </p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset = \"utf-8\"&gt;\n        &lt;script defer=\"defer\" src=\"js.js\"&gt;&lt;/script&gt;\n        &lt;title&gt;Hi&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"hi\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1370392393,
            "question_id": 3952009,
            "score": 26,
            "tags": [
                "javascript",
                "google-chrome",
                "attributes"
            ],
            "title": "Defer Attribute (Chrome)"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>A quick search in google provided this:</p>\n\n<pre><code> function mysqlTimeStampToDate(timestamp) {\n    //function parses mysql datetime string and returns javascript Date object\n    //input has to be in this format: 2007-06-05 15:26:02\n    var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9]) (?:([0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$/;\n    var parts=timestamp.replace(regex,\"$1 $2 $3 $4 $5 $6\").split(' ');\n    return new Date(parts[0],parts[1]-1,parts[2],parts[3],parts[4],parts[5]);\n  }\n</code></pre>\n\n<p>Source:<a href=\"http://snippets.dzone.com/posts/show/4132\" rel=\"nofollow\">http://snippets.dzone.com/posts/show/4132</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>are you in php?</p>\n\n<pre><code>var dateString = &lt;? echo \"'2000-09-10 00:00:00';\"; ?&gt;\nvar myDate = new Date(dateString);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Some of the answers given here are either overcomplicated or just will not work (at least, not in all browsers).  If you take a step back, you can see that the MySQL timestamp has each component of time in the same order as the arguments required by the <code>Date()</code> constructor.</p>\n\n<p>All that's needed is a very simple split on the string:</p>\n\n<pre><code>// Split timestamp into [ Y, M, D, h, m, s ]\nvar t = \"2010-06-09 13:12:01\".split(/[- :]/);\n\n// Apply each element to the Date function\nvar d = new Date(t[0], t[1]-1, t[2], t[3], t[4], t[5]);\n\nalert(d);\n// -&gt; Wed Jun 09 2010 13:12:01 GMT+0100 (GMT Daylight Time)\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 227
                },
                {
                    "body": "<p>Why not do this:</p>\n\n<pre><code>var d = new Date.parseDate( \"2000-09-10 00:00:00\", 'Y-m-d H:i:s' );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>To add to the excellent <a href=\"http://stackoverflow.com/questions/3075577/convert-mysql-datetime-stamp-into-javascripts-date-format/3075893#3075893\">Andy E answer</a> a function of common usage could be:</p>\n\n<pre><code>Date.createFromMysql = function(mysql_string)\n{ \n   if(typeof mysql_string === 'string')\n   {\n      var t = mysql_string.split(/[- :]/);\n\n      //when t[3], t[4] and t[5] are missing they defaults to zero\n      return new Date(t[0], t[1] - 1, t[2], t[3] || 0, t[4] || 0, t[5] || 0);          \n   }\n\n   return null;   \n}\n</code></pre>\n\n<p>In this way given a MySQL date/time in the form <code>\"YYYY-MM-DD HH:MM:SS\"</code> or even the short form (only date) <code>\"YYYY-MM-DD\"</code> you can do:</p>\n\n<pre><code>var d1 = Date.createFromMysql(\"2011-02-20\");\nvar d2 = Date.createFromMysql(\"2011-02-20 17:16:00\");\nalert(\"d1 year = \" + d1.getFullYear());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>Recent versions of JavaScript will read an ISO8601 formatted date, so all you have to do is change the space to a 'T', doing something like one of the following:</p>\n\n<pre><code>#MySQL\nselect date_format(my_date_column,'%Y-%m-%dT%T') from my_table;\n\n#PHP\n$php_date_str = substr($mysql_date_str,0,10).'T'.substr($mysql_date_str,11,8);\n\n//JavaScript\njs_date_str = mysql_date_str.substr(0,10)+'T'+mysql_date_str.substr(11,8);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I have a very tricky and easy solution for this kind of problem if you know how to use ajax.</p>\n\n<p>Solution:</p>\n\n<p>make a file ajax_time.php file and write the below code in the file (or as you need write in php, such as- timezone, format etc. inside php script).\nsample php code: echo  date(\"Y-m-d H:i:s\"); </p>\n\n<p>Now make ajax inside javascript like :</p>\n\n<pre><code>$.ajax({\n         url:  \"ajax_time.php\",             \n     success: function(time){\n        var desired_formatted_time = time;  \n     }\n});     \n</code></pre>\n\n<p>Now when you run the script you will get your desired time in variable <strong>desired_formatted_time</strong>       </p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I think I may have found a simpler way, that nobody mentioned.</p>\n\n<p>A MySQL DATETIME column can be converted to a unix timestamp through:</p>\n\n<pre><code>SELECT unix_timestamp(my_datetime_column) as stamp ...\n</code></pre>\n\n<p>We can make a new JavaScript Date object by using the constructor that requires milliseconds since the epoch. The unix_timestamp function returns seconds since the epoch, so we need to multiply by 1000:</p>\n\n<pre><code>SELECT unix_timestamp(my_datetime_column) * 1000 as stamp ...\n</code></pre>\n\n<p>The resulting value can be used directly to instantiate a correct Javascript Date object:</p>\n\n<pre><code>var myDate = new Date(&lt;?=$row['stamp']?&gt;);\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>var a=dateString.split(\" \");\nvar b=a[0].split(\"-\");\nvar c=a[1].split(\":\");\nvar date = new Date(b[0],(b[1]-1),b[2],b[0],c[1],c[2]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>To add even further to Marco's solution.  I prototyped directly to the String object.</p>\n\n<pre><code>String.prototype.mysqlToDate = String.prototype.mysqlToDate || function() {\n    var t = this.split(/[- :]/);\n    return new Date(t[0], t[1]-1, t[2], t[3]||0, t[4]||0, t[5]||0);\n};\n</code></pre>\n\n<p>This way you can go directly to:</p>\n\n<pre><code>var mySqlTimestamp = \"2011-02-20 17:16:00\";\nvar pickupDate = mySqlTimestamp.mysqlToDate();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Does anyone know how I can take a mysql datetime stamp, such as YYYY-MM-DD HH:MM:SS and either parse it or convert it to work in JavaScript's Date() function, such as.. Date('YYYY, MM, DD, HH, MM, SS);</p>\n\n<p>Thank you!</p>\n",
            "last_activity_date": 1414958636,
            "question_id": 3075577,
            "score": 76,
            "tags": [
                "php",
                "javascript",
                "jquery",
                "mysql"
            ],
            "title": "Convert MySql DateTime stamp into JavaScript&#39;s Date format"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The <code>{{variable}}</code> is substituted directly into the HTML.  Do a view source; it isn't a \"variable\" or anything like it.  It's just text.</p>\n\n<p>Having said that, you can put this kind of substitution into your javascript</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt; \n   var a = \"{{someDjangoVariable}}\"\n&lt;/script&gt;\n</code></pre>\n\n<p>gives you \"dynamic\" javascript.</p>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>For a dictionary, you're best of encoding to JSON first. You can use simplejson.dumps() or if you want to convert from a data model in App Engine, you could use encode() from the GQLEncoder library. </p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>A solution that worked for me is using the hidden input field in the template</p>\n\n<pre><code>&lt;input type=\"hidden\" id=\"myVar\" name=\"variable\" value=\"{{ variable }}\"&gt;\n</code></pre>\n\n<p>Then getting the value in javascript this way,</p>\n\n<pre><code>var myVar = document.getElementById(\"myVar\").value;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>When the variable is returned by Django it turns all quotes into <code>&amp;quot;</code>. Using <code>{{someDjangoVariable|safe}}</code> causes a Javascript error. </p>\n\n<p>To fix this use Javascript <code>.replace</code>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt; \n    var json = \"{{someDjangoVariable}}\".replace(/&amp;quot;/g,\"\\\"\")\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think the most flexible and handy way of doing this is to define a template filter for variables you want to use in JS code. This allows you to ensure, that your data is properly escaped and you can use it with complex data structures, such as <code>dict</code> and <code>list</code>. That's why I write this answer despite there is an accepted answer with a lot of upvotes.</p>\n\n<p>Here is an example of template filter:</p>\n\n<pre><code>// myapp/templatetags/js.py\n\nfrom django.utils.safestring import mark_safe\nfrom django.template import Library\n\nimport json\n\n\nregister = Library()\n\n\n@register.filter(is_safe=True)\ndef js(obj):\n    return mark_safe(json.dumps(obj))\n</code></pre>\n\n<p>This template filters converts variable to JSON string. You can use it like so:</p>\n\n<pre><code>// myapp/templates/example.html\n\n{% load js %}\n\n&lt;script type=\"text/javascript\"&gt;\n    var someVar = {{ some_var | js }};\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>When I render a page using the Django template renderer, I can pass in a dictionary variable containing various values to manipulate them in the page using <code>{{ myVar }}</code>.</p>\n\n<p>Is there a way to access the same variable in Javascript (perhaps using the DOM, I don't know how Django makes the variables accessible)? I want to be able to lookup details using an AJAX lookup based on the values contained in the variables passed in.</p>\n\n<p>Many thanks,</p>\n\n<p>Alistair. </p>\n",
            "last_activity_date": 1409184844,
            "question_id": 298772,
            "score": 52,
            "tags": [
                "javascript",
                "python",
                "django",
                "google-app-engine",
                "django-templates"
            ],
            "title": "Django Template Variables and Javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You don't need an API key, all you have to do is plop the standard mailchimp generated form into your code ( customize the look as needed ) and in the forms \"action\" attribute change <code>post?u=</code> to <code>post-json?u=</code> and then at the end of the forms action append <code>&amp;c=?</code> to get around any cross domain issue. Also it's important to note that when you submit the form you must use GET rather than POST.</p>\n\n<p>Your form tag will look something like this by default:</p>\n\n<pre><code>&lt;form action=\"http://xxxxx.us#.list-manage1.com/subscribe/post?u=xxxxx&amp;id=xxxx\" method=\"post\" ... &gt;\n</code></pre>\n\n<p>change it to look something like this</p>\n\n<pre><code>&lt;form action=\"http://xxxxx.us#.list-manage1.com/subscribe/post-json?u=xxxxx&amp;id=xxxx&amp;c=?\" method=\"get\" ... &gt;\n</code></pre>\n\n<p>Mail Chimp will return a json object containing 2 values: 'result' - this will indicate if the request was successful or not ( I've only ever seen 2 values, \"error\" and \"success\" ) and 'msg' - a message describing the result. </p>\n\n<p>I submit my forms with this bit of jQuery:</p>\n\n<pre><code>$(document).ready( function () {\n    // I only have one form on the page but you can be more specific if need be.\n    var $form = $('form');\n\n    if ( $form.length &gt; 0 ) {\n        $('form input[type=\"submit\"]').bind('click', function ( event ) {\n            if ( event ) event.preventDefault();\n            // validate_input() is a validation function I wrote, you'll have to substitute this with your own.\n            if ( validate_input($form) ) { register($form); }\n        });\n    }\n});\n\nfunction register($form) {\n    $.ajax({\n        type: $form.attr('method'),\n        url: $form.attr('action'),\n        data: $form.serialize(),\n        cache       : false,\n        dataType    : 'json',\n        contentType: \"application/json; charset=utf-8\",\n        error       : function(err) { alert(\"Could not connect to the registration server. Please try again later.\"); },\n        success     : function(data) {\n            if (data.result != \"success\") {\n                // Something went wrong, do something to notify the user. maybe alert(data.msg);\n            } else {\n                // It worked, carry on...\n            }\n        }\n    });\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 72
                },
                {
                    "body": "<p>You should use the server-side code in order to secure your MailChimp account.</p>\n\n<p>The following is an updated version of <a href=\"http://stackoverflow.com/a/5059391/594235\">this answer which uses PHP</a>:</p>\n\n<p>The PHP files are \"secured\" on the server where the user never sees them yet the jQuery can still access &amp; use.</p>\n\n<p>1)  Download the PHP 5 jQuery example here...</p>\n\n<p><a href=\"http://apidocs.mailchimp.com/downloads/mcapi-simple-subscribe-jquery.zip\" rel=\"nofollow\">http://apidocs.mailchimp.com/downloads/mcapi-simple-subscribe-jquery.zip</a></p>\n\n<p>If you only have PHP 4, simply download version 1.2 of the MCAPI and replace the corresponding <code>MCAPI.class.php</code> file above.</p>\n\n<p><a href=\"http://apidocs.mailchimp.com/downloads/mailchimp-api-class-1-2.zip\" rel=\"nofollow\">http://apidocs.mailchimp.com/downloads/mailchimp-api-class-1-2.zip</a></p>\n\n<p>2)  Follow the directions in the Readme file by adding your API key and List ID to the <code>store-address.php</code> file at the proper locations.</p>\n\n<p>3)  You may also want to gather your users' name and/or other information.  You have to add an array to the <code>store-address.php</code> file using the corresponding Merge Variables.</p>\n\n<p>Here is what my <code>store-address.php</code> file looks like where I also gather the first name, last name, and email type:</p>\n\n<pre><code>&lt;?php\n\nfunction storeAddress(){\n\n    require_once('MCAPI.class.php');  // same directory as store-address.php\n\n    // grab an API Key from http://admin.mailchimp.com/account/api/\n    $api = new MCAPI('123456789-us2');\n\n    $merge_vars = Array( \n        'EMAIL' =&gt; $_GET['email'],\n        'FNAME' =&gt; $_GET['fname'], \n        'LNAME' =&gt; $_GET['lname']\n    );\n\n    // grab your List's Unique Id by going to http://admin.mailchimp.com/lists/\n    // Click the \"settings\" link for the list - the Unique Id is at the bottom of that page. \n    $list_id = \"123456a\";\n\n    if($api-&gt;listSubscribe($list_id, $_GET['email'], $merge_vars , $_GET['emailtype']) === true) {\n        // It worked!   \n        return 'Success!&amp;nbsp; Check your inbox or spam folder for a message containing a confirmation link.';\n    }else{\n        // An error ocurred, return error message   \n        return '&lt;b&gt;Error:&lt;/b&gt;&amp;nbsp; ' . $api-&gt;errorMessage;\n    }\n\n}\n\n// If being called via ajax, autorun the function\nif($_GET['ajax']){ echo storeAddress(); }\n?&gt;\n</code></pre>\n\n<p>4)  Create your HTML/CSS/jQuery form.  It is not required to be on a PHP page.</p>\n\n<p>Here is something like what my <code>index.html</code> file looks like:</p>\n\n<pre><code>&lt;form id=\"signup\" action=\"index.html\" method=\"get\"&gt;\n    &lt;input type=\"hidden\" name=\"ajax\" value=\"true\" /&gt;\n    First Name: &lt;input type=\"text\" name=\"fname\" id=\"fname\" /&gt;\n    Last Name: &lt;input type=\"text\" name=\"lname\" id=\"lname\" /&gt;\n    email Address (required): &lt;input type=\"email\" name=\"email\" id=\"email\" /&gt;\n    HTML: &lt;input type=\"radio\" name=\"emailtype\" value=\"html\" checked=\"checked\" /&gt;\n    Text: &lt;input type=\"radio\" name=\"emailtype\" value=\"text\" /&gt;\n    &lt;input type=\"submit\" id=\"SendButton\" name=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n&lt;div id=\"message\"&gt;&lt;/div&gt;\n\n&lt;script src=\"jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt; \n$(document).ready(function() {\n    $('#signup').submit(function() {\n        $(\"#message\").html(\"&lt;span class='error'&gt;Adding your email address...&lt;/span&gt;\");\n        $.ajax({\n            url: 'inc/store-address.php', // proper url to your \"store-address.php\" file\n            data: $('#signup').serialize(),\n            success: function(msg) {\n                $('#message').html(msg);\n            }\n        });\n        return false;\n    });\n});\n&lt;/script&gt;\n</code></pre>\n\n<p><b>Required pieces...</b></p>\n\n<ul>\n<li><p><b>index.html</b> constructed as above or similar.  With jQuery, the appearance and options are endless.</p></li>\n<li><p><b>store-address.php</b> file downloaded as part of PHP examples on Mailchimp site and modified with your <b>API KEY</b> and <b>LIST ID</b>.  You need to add your other optional fields to the array.</p></li>\n<li><p><b>MCAPI.class.php</b> file downloaded from Mailchimp site (version 1.3 for PHP 5 or version 1.2 for PHP 4).  Place it in the same directory as your <b>store-address.php</b> or you must update the url path within <b>store-address.php</b> so it can find it.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Based on gbinflames' answer, I kept the POST and URL, so that the form would continue to work for those with JS off. </p>\n\n<pre><code>&lt;form class=\"myform\" action=\"http://XXXXXXXXXlist-manage2.com/subscribe/post\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"u\" value=\"XXXXXXXXXXXXXXXX\"&gt;\n  &lt;input type=\"hidden\" name=\"id\" value=\"XXXXXXXXX\"&gt;\n  &lt;input class=\"input\" type=\"text\" value=\"\" name=\"MERGE1\" placeholder=\"First Name\" required&gt;\n  &lt;input type=\"submit\" value=\"Send\" name=\"submit\" id=\"mc-embedded-subscribe\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Then, using jQuery's .submit() changed the type, and URL to handle JSON repsonses.</p>\n\n<pre><code>$('.myform').submit(function(e) {\n  var $this = $(this);\n  $.ajax({\n      type: \"GET\", // GET &amp; url for json slightly different\n      url: \"http://XXXXXXXX.list-manage2.com/subscribe/post-json?c=?\",\n      data: $this.serialize(),\n      dataType    : 'json',\n      contentType: \"application/json; charset=utf-8\",\n      error       : function(err) { alert(\"Could not connect to the registration server.\"); },\n      success     : function(data) {\n          if (data.result != \"success\") {\n              // Something went wrong, parse data.msg string and display message\n          } else {\n              // It worked, so hide form and display thank-you message.\n          }\n      }\n  });\n  return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Based on gbinflames' answer, this is what worked for me:</p>\n\n<p>Generate a simple mailchimp list sign up form , copy the action URL and method (post) to your custom form. Also rename your form field names to all capital ( name='EMAIL' as in original mailchimp code, EMAIL,FNAME,LNAME,... ), then use this:</p>\n\n<pre><code>      $form=$('#your-subscribe-form'); // use any lookup method at your convenience\n\n      $.ajax({\n      type: $form.attr('method'),\n      url: $form.attr('action').replace('/post?', '/post-json?').concat('&amp;c=?'),\n      data: $form.serialize(),\n      timeout: 5000, // Set timeout value, 5 seconds\n      cache       : false,\n      dataType    : 'jsonp',\n      contentType: \"application/json; charset=utf-8\",\n      error       : function(err) { // put user friendly connection error message  },\n      success     : function(data) {\n          if (data.result != \"success\") {\n              // mailchimp returned error, check data.msg\n          } else {\n              // It worked, carry on...\n          }\n      }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use <a href=\"https://github.com/scdoshi/jquery-ajaxchimp\" rel=\"nofollow\">jquery.ajaxchimp</a> plugin to achieve that. It's dead easy!</p>\n\n<pre><code>&lt;form method=\"post\" action=\"YOUR_SUBSCRIBE_URL_HERE\"&gt;\n  &lt;input type=\"text\" name=\"EMAIL\" placeholder=\"e-mail address\" /&gt;\n  &lt;input type=\"submit\" name=\"subscribe\" value=\"subscribe!\" /&gt;        \n  &lt;p class=\"result\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>$(function() {\n  $('form').ajaxChimp({\n    callback: function(response) {\n      $('form .result').text(response.msg);\n    }\n  });\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Is there any way to integrate mailchimp simple (one email input) with AJAX, so there is no page refresh and no redirection to default mailchimp page.</p>\n\n<p>This solution doesn't work <a href=\"http://stackoverflow.com/questions/5188418/jquery-ajax-post-not-working-with-mailchimp\">jQuery Ajax POST not working with MailChimp</a></p>\n\n<p>Thanks </p>\n",
            "last_activity_date": 1423143967,
            "question_id": 8425701,
            "score": 25,
            "tags": [
                "javascript",
                "ajax",
                "forms",
                "newsletter",
                "mailchimp"
            ],
            "title": "AJAX Mailchimp signup form integration"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>it's still <strong>best</strong> to protect your secure data with un-predictable URLs.</p>\n</blockquote>\n\n<p>Emphasis mine. What nonsense! It's <strong><em>best</em></strong> to protect your secure data with some proper authentication and possibly some encryption on top of that. JSON exchanges can still use existing authentication techniques (eg sessions through cookies) and SSL.</p>\n\n<p>Relying on somebody not guessing a URL (what they're effectively talking about) will only be a reasonable technique (and even then, only just) when you're using JSON to export data to an anonymous third party (eg a web service). One example is Google's various web service API where anonymous users access Google-data through other websites. They use domain-referrer and API keys to make sure the man-in-the-middle website is allowed to provide Gooogle data.</p>\n\n<p>If you're just using JSON to send private data to and from a direct, known user agent, use some real authentication and encryption. If you're trying to provide a webservice, then it really depends on how <em>\"secure\"</em> this data is going to be. If it's just public data and you don't mind who can read it, I don't see the point in making a hashy URL.</p>\n\n<p><hr /></p>\n\n<p>Edit: to demonstrate what they mean, consider this. Imagine your bank provided a JSON API for getting statements. If I could just type <code>http://yourbank.com/json-api/your-name/statement</code>, you probably wouldn't be best pleased.</p>\n\n<p>They could generate a unique string for your account that was required in any JSON request though, eg: <code>http://yourbank.com/json-api/your-name/big-long-key-unique-to-you/statement</code></p>\n\n<p>I would have far less chance of being able to guess that. But would you really want that being the only buffer between your genuinely secure data and potential identity thieves? No.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The main security hole from the blog (CSRF), is not JSON specific. It's just as big a hole using XML instead. Indeed, it's just as bad with no asynchronous calls at all; regular links are just as vulnerable.</p>\n\n<p>When people talk about unique URLs, they generally DON'T mean <a href=\"http://yourbank.com/json-api/your-name/big-long-key-unique-to-you/statement\">http://yourbank.com/json-api/your-name/big-long-key-unique-to-you/statement</a>. Instead, it's more common to make something else about the request unique; namely a value in the FORM post, or a URL parameter.</p>\n\n<p>Usually this involves a random token inserted into the FORM on the server side, and then checked when a request is made.</p>\n\n<p>The array/object thing is news to me:</p>\n\n<blockquote>\n  <p>Script-Tags: The attacker can embed a\n  script tag pointing at a remote server\n  and the browser will effectively\n  eval() the reply for you, however it\n  throws away the response and since\n  JSON is all response, you're safe.</p>\n</blockquote>\n\n<p>In that case, your site doesn't need to use JSON at all to be vulnerable. But yeah, if an attacker can insert random HTML into your site, you're toast.</p>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>There are a number of security attacks against JSON, especially XSRF.</p>\n\n<p>The vulnerability occurs when a web service uses cookies for authentication, and responds with a JSON array containing sensitive data in response to a GET request.</p>\n\n<p>If an attacker can trick a user who is logged into a service, naive-webapp.com, into visiting their site (or any site that embeds an IFRAME they control, e.g. via embedded ads) then they can insert a <code>&lt;script&gt;</code> tag with a SRC to the naive-webapp.com, and potentially steal the user's data.\nThis depends on a javascript quirk with the JavaScript <code>Array</code> constructor like this:</p>\n\n<pre><code> &lt;script&gt;\n   // Overload the Array constructor so we can intercept data\n   var stolenArrays = [];\n   var RealArray = Array;\n   Array = function () {\n     var arr = RealArray.apply(arguments);\n     stolenArrays.push(arr);\n     return arr;\n   }\n &lt;/script&gt;\n &lt;!-- even though the attacker can't access the cookies,\n   - he can cause the browser to send them to naive-webapp.com --&gt;\n &lt;script src=\"//naive-webapp.com/...\"&gt;&lt;/script&gt;\n &lt;script&gt;\n   // now stolenArrays contains any data from the parsed JSON\n &lt;/script&gt;\n</code></pre>\n\n<p>EcmaScript 5 has fixed the confusing behavior that caused <code>[]</code> to look up <code>Array</code> on the global object and many modern browsers are no longer susceptible to this attack.</p>\n\n<p>Incidentally, Oil is wrong about unpredictable URLs.  Cryptographically secure random identifiers in URLs are a fine way to protect resources.  Identity based security is not a panacea as Oil suggests.\nSee <a href=\"http://waterken.sourceforge.net/\">http://waterken.sourceforge.net/</a> for an example of a secure distributed application scheme based on cryptographically secure identifiers in URLs that does not require a concept of identity.</p>\n\n<p>EDIT:</p>\n\n<p>When considering JSON vs XML, you should be aware of XML specific attack vectors as well.</p>\n\n<p><a href=\"http://projects.webappsec.org/w/page/13247003/XML%20External%20Entities\">XXE</a>, XML External entities attacks, use crafted XML to access file system and network resources through the firewall.</p>\n\n<blockquote>\n<pre><code>&lt;!DOCTYPE root \n[\n&lt;!ENTITY foo SYSTEM \"file:///c:/winnt/win.ini\"&gt;\n]&gt;\n...\n&lt;in&gt;&amp;foo;&lt;/in&gt;\n</code></pre>\n  \n  <p>The Application embeds the input (parameter \"in\", which contains the win.ini file) to the web service response.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 42
                }
            ],
            "body": "<p>While researching the issue of <a href=\"http://www.subbu.org/blog/2006/08/json-vs-xml\">JSON vs XML</a>, I came across <a href=\"http://stackoverflow.com/questions/325085/when-to-prefer-json-over-xml\">this question</a>.  Now one of the reasons to prefer JSON was listed as the ease of conversion in Javascript, namely with the <code>eval()</code>.  Now this immediately struck me as potentially problematic from a security perspective.</p>\n\n<p>So I started doing some research into the security aspects of JSON and across this blog post about how <a href=\"http://directwebremoting.org/blog/joe/2007/03/05/json_is_not_as_safe_as_people_think_it_is.html\">JSON is not as safe as people think it is</a>.  This part stuck out:</p>\n\n<blockquote>\n  <p><strong>Update:</strong> If you are doing JSON 100%\n  properly, then you will only have\n  objects at the top level. Arrays,\n  Strings, Numbers, etc will all be\n  wrapped. A JSON object will then fail\n  to eval() because the JavaScript\n  interpreter will think it's looking at\n  a block rather than an object. This\n  goes a long way to protecting against\n  these attacks, however it's still best\n  to protect your secure data with\n  un-predictable URLs.</p>\n</blockquote>\n\n<p>Ok, so that's a good rule to start with: JSON objects at the top level should always be objects and never arrays, numbers or strings.  Sounds like a good rule to me.</p>\n\n<p>Is there anything else to do or avoid when it comes to JSON and AJAX related security?</p>\n\n<p>The last part of the above quote mentions unpredictable URLs.  Does anyone have more information on this, especially how you do it in PHP?  I'm far more experienced in Java than PHP and in Java it's easy (in that you can map a whole range of URLs to a single servlet) whereas all the PHP I've done have mapped a single URL to the PHP script.</p>\n\n<p>Also, how exactly do you use unpredictable URLs to increase security?</p>\n",
            "last_activity_date": 1314897424,
            "question_id": 395592,
            "score": 52,
            "tags": [
                "javascript",
                "ajax",
                "security",
                "json"
            ],
            "title": "JSON security best practices?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Any webpage that <em>requires</em> javascript in order to get the content out of it will likely be met with accessibility-related challenges. The accessibility of JavaScript frameworks is definitely an issue of contention, though really, any web application suffers drawbacks when content is provided dynamically, regardless of the framework used.</p>\n\n<p>There's no silver bullet to ensure your site will be accessible, and I certainly can't account for every JavaScript framework. Here's a few thoughts about how you can prevent your site from being totally inaccessible when using JavaScript:</p>\n\n<ul>\n<li><p>Follow the guidelines from <a href=\"http://www.w3.org/TR/2004/WD-WCAG20-SCRIPT-TECHS-20041119/\">WCAG 2.0 on client-side scripting</a>, and <a href=\"http://www.w3.org/WAI/WCAG20/quickref/\">WCAG 2.0</a> in general.</p></li>\n<li><p>Avoid frameworks that require you generate the page's UI, controls and/or content entirely through javascript such as <a href=\"http://ukijs.org/\">Uki.js</a>, or ones that use their own proprietary markup, like <a href=\"http://joapp.com/\">Jo</a>. The closer you can stick with static(-ish), semantic HTML content, the better off you'll be. </p></li>\n<li><p>Consider using <a href=\"http://www.w3.org/TR/wai-aria/roles\">ARIA roles</a> such as <a href=\"http://www.w3.org/TR/wai-aria/roles#application\"><code>role=\"application\"</code></a> and the <a href=\"http://www.w3.org/TR/wai-aria/states_and_properties#aria-live\"><code>aria-live</code></a> attribute to indicate the areas of your page which are dynamic. More and more aria roles are being supported by assistive devices as time goes by, so using these aria attributes makes sense when you can add them to your app appropriately.</p>\n\n<p>In terms of JS libraries, check their source and see if they output any aria roles. They might not be perfectly accessible, but it would demonstrate they're considering assistive devices. </p></li>\n<li><p>Wherever possible, treat JavaScript as an enhancement rather than a necessity. Try to provide alternative methods or workflows to accessing the important information that don't require dynamic page updates.</p></li>\n<li><p>Test and validate your app with your users! Do some user testing sessions with people who use assistive devices or have other difficulties using web software. Nothing will help you prove your site is accessible more than watching real people use it.</p></li>\n</ul>\n\n<p>The last point is the most important, though many try to escape it. Regardless of the technology, the fact remains that you're developing an application that people will use. No machine or theory will ever be able to perfectly validate your application as being usable, but you're not building it for machines anyway. Right? :) </p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I use a js-framework (spine.js in my case) in my latest site. Still I make sure that non-js browsers (certainly not over zealous: think SEO) can navigate my site and digest the contents. </p>\n\n<p>As an example I'm going with a search-page with products being shown. Products can be paged, filtered, sorted. Of course this is an example of the generalized idea. </p>\n\n<p>PREREQ: use a template-engine that can both render server-side and client-side. (I use  Mustache) . This makes sure you can render models without js- through server-side templating, and render models with js through client-side templating. </p>\n\n<ol>\n<li><p>Initially: render the products using server-side mustache-template. Also include a 'bootstrapJSON'-object which contains the same products in JSON-format.</p></li>\n<li><p>Initially: all links (product-detail page, paging, sorting, filtering) are real server-side urls (no hashbang urls) </p></li>\n<li><p>The end-result is a page which can be navigated 100% with paging, sorting, filtering without the use of JS. </p></li>\n<li><p>all paging,sorting, filtering urls result in a request to the server, which in turn results in a new set of products being rendered. Nothing special here. </p></li>\n<li><p>JS-enabled - on domload: </p>\n\n<ul>\n<li>fetch the bootstrapJSON and make product-models from it (use your js-framework features to do this) . </li>\n<li>Afterwards rerender the products using the same mustache-template but now doing it client-side. (Again using your js-framework). </li>\n<li>Visually nothing should change (after all server-side and client-side rendering was done on same models, with same template), but at least now there's a binding between the client-side model and the view. </li>\n<li>transform urls to hashbang-urls. (e.g: /products/#sort-price-asc ) and use your js-framework features to wire the events. </li>\n</ul></li>\n<li><p>now every (filtering, paging, sorting ) url should result in a client-side state-change, which would probably result in your js-framework doing an ajax-request to the server to return new products (in JSON-format) . Rerendering this again on the client should result in your updated view. </p></li>\n<li><p>The logic part of the code to handle the ajax-request in 6. on the server-side is 100% identical to the code used in 4. Differentiate between an ajax-call and an ordinary request and spit out the products in JSON or html (using mustache server-side) respectively.  </p></li>\n</ol>\n\n<p><strong>EDIT: UPDTATE JAN 2013</strong>\nSince this question/answer is getting some reasonable traction I thought I'd share some closely-related aha-moments of the last year: </p>\n\n<ul>\n<li><p>Spitting out JSON and rendering it client-side with your client-side mvc of choice (steps 6. and 7. above) can be pretty costly cpu-wise. This, of course, is especially apparent on mobile-devices. </p></li>\n<li><p>I've done some testing to return html-snippets on ajax (using server-side mustache-template rendering) instead of doing the same on the client-side as suggested in my answer above. Depending on your client-device it can be up to 10 times faster (1000ms -> 100ms) , of course your mileage may vary. (practically no code changes needed, since step 7. could already do both)</p></li>\n<li><p>Of course, when no JSON is returned there's no way for a client-side MVC to build models, manage events, etc. So why keep a clientside MVC at all? To be honest, with even very complex searchpages in hindsight I don't have much use for client-side mvc's at all. The only real benefit to me is that they help to clearly separate out logic on the client, but you should already be doing that on your own imho. Consequently, stripping out client-side MVC is on the todo.</p></li>\n<li><p>Oh yeah, I traded in Mustache with <a href=\"http://twitter.github.com/hogan.js/\">Hogan</a> (same syntax, a bit more functionality, but most of all extremely performant!) Was able to do so because I switched the backend from java to Node.js (which rocks imho)</p></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>Since I'm a visually-impaired user and web developer, I'll chime in here.</p>\n\n<p>These frameworks, in my experience, haven't been a problem provided the appropriate steps are taken with regard to accessibility. </p>\n\n<p>Many screen readers understand JavaScript, and we as developers can improve the experience using things like HTML5's aria-live attribute to alert screen readers that things are changing, and we can use the role attribute to provide additional hints to the screenreaders.</p>\n\n<p>However, the basic principle of web development with JavaScript is that we should develop the underlying site first, without JavaScript, and then use that solid, working, and tested foundation to provide better features. The use of JS should not be required to purchase a product, receive services, or get information. And some users disable JavaScript because it interferes with the way their screenreaders work. </p>\n\n<p>Doing a complete Backbone.js or Knockout site from the ground up without regard for accessibility will result in something akin to \"new Twitter\" which fails extremely hard with many screenreaders.  But Twitter has a solid foundation and so we can use other means to access the platform. Grafting Backbone onto an existing site that has a well-crafted API is quite doable, and an awful lot of fun, too.</p>\n\n<p>So basically, these frameworks themselves are no more of an accessibility issue than jQUery itself - the developer needs to craft a user experience that works for everyone. </p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Chris Blouch (AOL) and Hans Hillen (TPG) had a good presentation on this regarding jQuery, including the work they do in reviewing for accessibility. <a href=\"http://www.slideshare.net/aegisproject/making-rich-internet-applications-accessible-through-jquery-3792630\" rel=\"nofollow\">Making Rich Internet Applications Accessible Through JQuery</a> That and another related presentation on Accessibility of HTML5 and Rich Internet Applications (<a href=\"http://www.paciellogroup.com/training/CSUN2012/\" rel=\"nofollow\">http://www.paciellogroup.com/training/CSUN2012/</a>) should be of interest to you. </p>\n\n<p>My money is on choosing the most accessible framework: jQuery provides a great deal of graceful degradation or progressive enhancement fallback as well as an overall pretty good focus on accessibility. Also, indirectly I help test and review several systems that leverage jQuery (Drupal public and Intranet websites) such that defects found for accessibility are found and routed back to the project for fixes.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I've been investigating a few of the JavaScript frameworks such as Backbone.js and Batman.js for a while and whilst I really like them, I have one niggling thing that I keep coming back to. That issue is accessibility.</p>\n\n<p>As a web developer I've always tried to make my websites and applications with accessibility in mind, especially using the idea of progressive enhancement.</p>\n\n<p>Clearly out of the box these new JS frameworks don't gracefully degrade, so I was wondering what are other developers thoughts on this issue and what are you doing about it.  After all the accessibility of a website / app isn't really an optional thing as it's part of the law in many countries.</p>\n\n<p>Maybe I'm just being overly zealous on this subject, and not appreciating how far things have come in terms of accessibility.</p>\n",
            "last_activity_date": 1400775430,
            "question_id": 7370056,
            "score": 49,
            "tags": [
                "javascript",
                "accessibility",
                "backbone.js",
                "javascript-framework",
                "sproutcore"
            ],
            "title": "Accessibility and all these JavaScript frameworks"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You would make that a module-level variable. For example,</p>\n\n<pre><code>// In foo.js\ndefine(function () {\n    var theFoo = {};\n\n    return {\n        getTheFoo: function () { return theFoo; }\n    };\n});\n\n// In bar.js\ndefine([\"./foo\"], function (foo) {\n    var theFoo = foo.getTheFoo(); // save in convenience variable\n\n    return {\n        setBarOnFoo: function () { theFoo.bar = \"hello\"; }\n    };\n}\n\n// In baz.js\ndefine([\"./foo\"], function (foo) {\n    // Or use directly.\n    return {\n        setBazOnFoo: function () { foo.getTheFoo().baz = \"goodbye\"; }\n    };\n}\n\n// In any other file\ndefine([\"./foo\", \"./bar\", \"./baz\"], function (foo, bar, baz) {\n    bar.setBarOnFoo();\n    baz.setBazOnFoo();\n\n    assert(foo.getTheFoo().bar === \"hello\");\n    assert(foo.getTheFoo().baz === \"goodbye\");\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 50
                },
                {
                    "body": "<p>Just provide an API for your singleton as you would.</p>\n\n<p>And make sure its lazily loaded. The easiest way is to use an abstraction library like underscore that supplies cross browser helpers. Other options are ES5 Object.defineProperty or custom getter/setters.</p>\n\n<p>In this case <code>_.once</code> ensures that constructor's result is cached after the first call, it basically lazy loads it.</p>\n\n<pre><code>define(function() {\n    var constructor = _.once(function() { \n        ...\n    });\n\n    return {\n        doStuffWithSingleton: function() {\n            constructor().doStuff();\n        }\n    };\n\n});\n</code></pre>\n\n<p><a href=\"http://documentcloud.github.com/underscore/#once\"><code>_.once</code></a> from underscore.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Combining Raynos's concerns about encapsulation with the OP's clarification that he wants to expose a couple of methods on a messaging service, this is I think the right way to go about it:</p>\n\n<pre><code>// In messagingServiceSingleton.js\ndefine(function () {\n    var messagingService = new MessagingService();\n\n    return {\n        notify: messagingService.listen.bind(messagingService),\n        listen: messagingService.notify.bind(messagingService)\n    };\n});\n\n// In bar.js\ndefine([\"./messagingServiceSingleton\"], function (messagingServiceSingleton) {\n    messagingServiceSingleton.listen(/* whatever */);\n}\n\n// In baz.js\ndefine([\"./messagingServiceSingleton\"], function (messagingServiceSingleton) {\n    messagingServiceSingleton.notify(/* whatever */);\n}\n</code></pre>\n\n<p><code>Function.prototype.bind</code> will not be present in all browsers, so you would need to include a polyfill like <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\">the one Mozilla provides</a>.</p>\n\n<p>An alternate (and in my opinion probably better) approach would be to make the messaging service object itself a module. This would look something like</p>\n\n<pre><code>// In messagingService.js\ndefine(function () {\n    var listenerMap = {};\n\n    function listen(/* params */) {\n        // Modify listenerMap as appropriate according to params.\n    }\n    function notify(/* params */) {\n        // Use listenerMap as appropriate according to params.\n    }\n\n    return {\n        notify: notify\n        listen: listen\n    };\n});\n</code></pre>\n\n<p>Since you expose the same <code>notify</code> and <code>listen</code> methods to everyone who uses your module, and those always refer to the same <a href=\"http://javascript.crockford.com/private.html\">private</a> <code>listenerMap</code> variable, this should do what you want. It also obviates the need for <code>Function.prototype.bind</code>, and gets rid of the rather-unnecessary distinction between the messaging service itself and the module which enforces singleton usage of it.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here's a version where the module itself is the shared variable instead of a variable within that module.</p>\n\n<pre><code>define('foo', [], {bar: \"this text will be overwritten\"});\n\ndefine('bar', [\"foo\"], function (foo) {\n    return {\n        setBarOnFoo: function () { foo.bar = \"hello\"; }\n    };\n});\n\ndefine('baz', [\"foo\"], function (foo) {\n    return {\n        setBazOnFoo: function () { foo.baz = \"goodbye\"; }\n    };\n});\n\nrequire([\"foo\", \"bar\", \"baz\"], function (foo, bar, baz) {\n    bar.setBarOnFoo();\n    baz.setBazOnFoo();\n\n    $('#results').append(foo.bar + ' ' + foo.baz);\n});\u200b\u200b\u200b\n\n// reads: hello goodbye\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Let's say I am writing code at the main page level and 2 dependencies require the same instance of an object and also state that as a dependency. What is the appropriate way to go about this?</p>\n\n<p>Basically what I want to do is say, \"If this dependency isn't loaded... then load it. Otherwise, use the same instance that was already loaded and just pass that one.\"</p>\n",
            "last_activity_date": 1365585569,
            "question_id": 5608685,
            "score": 46,
            "tags": [
                "javascript",
                "singleton",
                "requirejs"
            ],
            "title": "Using RequireJS, how do I pass in global objects or singletons around?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The <a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\">AMD proposal</a> allows you to just return a value for the exported object. But note that is a feature of the AMD proposal, it is just an API proposal, and will make it harder to translate the module back to a regular CommonJS module. I think that is OK, but useful info to know.</p>\n\n<p>So you can do the following:</p>\n\n<p>I prefer modules that export a constructor function to start with an upper-case name, so the non-optimized version of this module would also be in Employee.js</p>\n\n<pre><code>define(\"Employee\", function () {\n    //You can name this function here,\n    //which can help in debuggers but\n    //has no impact on the module name.\n    return function Employee(first, last) {\n        this.first = first; \n        this.last = last;\n    };\n});\n</code></pre>\n\n<p>Now in another module, you can use the Employee module like so:</p>\n\n<pre><code>define(\"main\", [\"Employee\"], function (Employee) {\n    var john = new Employee(\"John\", \"Smith\");\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 63
                },
                {
                    "body": "<p>As an addition to jrburke's answer, note that you don't have to return the constructor function directly. For most useful classes you'll also want to add methods via the prototype, which you can do like this:</p>\n\n<pre><code>define('Employee', function() {\n    // Start with the constructor\n    function Employee(firstName, lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    // Now add methods\n    Employee.prototype.fullName = function() {\n        return this.firstName + ' ' + this.lastName;\n    };\n\n    // etc.\n\n    // And now return the constructor function\n    return Employee;\n});\n</code></pre>\n\n<p>In fact this is exactly the pattern shown in <a href=\"http://requirejs.org/docs/why.html#9\">this example at requirejs.org</a>.</p>\n",
                    "is_accepted": false,
                    "score": 67
                }
            ],
            "body": "<p>I have a number of JavaScript \"classes\" each implemented in its own JavaScript file. For development those files are loaded individually, and for production they are concatenated, but in both cases I have to manually define a loading order, making sure that B comes after A if B uses A. I am planning to use <a href=\"http://requirejs.org/\">RequireJS</a> as an implementation of <a href=\"http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\">CommonJS Modules/AsynchronousDefinition</a> to solve this problem for me automatically.</p>\n\n<p>Is there a better way to do this than to define modules that each export one class? If not, how to you name what the module exports? A module \"employee\" exporting a class \"Employee\", as in the example below, doesn't feel <a href=\"http://en.wikipedia.org/wiki/DRY\">DRY</a> enough to me.</p>\n\n<pre><code>define(\"employee\", [\"exports\"], function(exports) {\n    exports.Employee = function(first, last) {\n        this.first = first;\n        this.last = last;\n    };\n});\n\ndefine(\"main\", [\"employee\"], function (employee) {\n    var john = new employee.Employee(\"John\", \"Smith\");\n});\n</code></pre>\n",
            "last_activity_date": 1400597838,
            "question_id": 4869530,
            "score": 39,
            "tags": [
                "javascript",
                "commonjs",
                "requirejs"
            ],
            "title": "RequireJS: How to define modules that contain a single &quot;class&quot;?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>This is the pattern Tim Branyen uses in his <a href=\"https://github.com/tbranyen/backbone-boilerplate\">boilerplate</a>:</p>\n\n<pre><code>initializeRouter: function () {\n  Backbone.history.start({ pushState: true });\n  $(document).on('click', 'a:not([data-bypass])', function (evt) {\n\n    var href = $(this).attr('href');\n    var protocol = this.protocol + '//';\n\n    if (href.slice(protocol.length) !== protocol) {\n      evt.preventDefault();\n      app.router.navigate(href, true);\n    }\n  });\n}\n</code></pre>\n\n<p>Using that, rather than individually doing preventDefault on links, you let the router handle them by default and make exceptions by having a <code>data-bypass</code> attribute. In my experience it works well as a pattern. I don't know of any great examples around, but trying it out yourself should not be too hard. Backbone's beauty lies in its simplicity ;)</p>\n",
                    "is_accepted": true,
                    "score": 56
                },
                {
                    "body": "<pre><code> $(document.body).on('click', 'a', function(e){\n   e.preventDefault();\n   Backbone.history.navigate(e.currentTarget.pathname, {trigger: true});\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>If I enable pushState in the backbone router, do I need to use return false on all links or does backbone handle this automatically? Is there any samples out there, both the html part and the script part. </p>\n",
            "last_activity_date": 1393544826,
            "question_id": 9328513,
            "score": 32,
            "tags": [
                "javascript",
                "backbone.js"
            ],
            "title": "Backbone.js and pushState"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>It is documented in <a href=\"http://api.jquery.com/jQuery.browser/\">jQuery API Documentation</a>. Check for Internet Explorer with <code>$.browser.msie</code> and then check its version with <code>$.browser.version</code>.</p>\n\n<p><strong>UPDATE:</strong> <a href=\"http://jquery.com/upgrade-guide/1.9/#jquery-browser-removed\">$.browser removed in jQuery 1.9</a></p>\n\n<blockquote>\n  <p>The jQuery.browser() method has been deprecated since jQuery 1.3 and is removed in 1.9. <strong>If needed, it is available as part of the jQuery Migrate plugin. We recommend using feature detection with a library such as Modernizr.</strong></p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 73
                },
                {
                    "body": "<p>Don't forget that you can also use HTML to detect IE8.</p>\n\n<pre><code>&lt;!--[if IE 8]&gt;\n&lt;script type=\"text/javascript\"&gt;\n    ie = 8;\n&lt;/script&gt;\n&lt;![endif]--&gt;\n</code></pre>\n\n<p>Having that before all your scripts will let you just check the \"ie\" variable or whatever.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>You should also look at <a href=\"http://api.jquery.com/jQuery.support/\" rel=\"nofollow\">jQuery.support</a>. Feature detection is a lot more reliable than browser detection for coding your functionality (unless you are just trying to log browser versions).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><strong>document.documentMode</strong> is undefined if the browser is not IE8,</p>\n\n<p>it returns 8 for standards mode and 7 for 'compatable to IE7'</p>\n\n<p>If it is running as IE7 there are a lot of css and dom features that won't be supported.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This should work for all IE8 minor versions</p>\n\n<pre><code>if ($.browser.msie  &amp;&amp; parseInt($.browser.version, 10) === 8) {\n  alert('IE8'); \n} else {\n  alert('Non IE8');\n}\n</code></pre>\n\n<p>-- update</p>\n\n<p>Please note that <a href=\"http://api.jquery.com/jQuery.browser/\">$.browser</a> is <a href=\"http://jquery.com/upgrade-guide/1.9/#jquery-browser-removed\">removed from jQuery 1.9</a></p>\n",
                    "is_accepted": false,
                    "score": 88
                },
                {
                    "body": "<p>You can easily detect which type and version of the browser, using this jquery</p>\n\n<pre><code>$(document).ready(function()\n{\n if ( $.browser.msie ){\n    if($.browser.version == '6.0')\n    {   $('html').addClass('ie6');\n    }\n    else if($.browser.version == '7.0')\n    {   $('html').addClass('ie7');\n    }\n    else if($.browser.version == '8.0')\n    {   $('html').addClass('ie8');\n    }\n    else if($.browser.version == '9.0')\n    {   $('html').addClass('ie9');\n    }\n }\n else if ( $.browser.webkit )\n { $('html').addClass('webkit');\n }\n else if ( $.browser.mozilla )\n { $('html').addClass('mozilla');\n }\n else if ( $.browser.opera )\n { $('html').addClass('opera');\n }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think the best way would be this:</p>\n\n<p>From HTML5 boilerplate:</p>\n\n<pre><code>&lt;!--[if lt IE 7]&gt; &lt;html lang=\"en-us\" class=\"no-js ie6 oldie\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 7]&gt;    &lt;html lang=\"en-us\" class=\"no-js ie7 oldie\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 8]&gt;    &lt;html lang=\"en-us\" class=\"no-js ie8 oldie\"&gt; &lt;![endif]--&gt;\n&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html lang=\"en-us\" class=\"no-js\"&gt; &lt;!--&lt;![endif]--&gt;\n</code></pre>\n\n<p>in JS:</p>\n\n<pre><code>if( $(\"html\").hasClass(\"ie8\") ) { /* do your things */ };\n</code></pre>\n\n<p>especially since <a href=\"http://api.jquery.com/jQuery.browser/\"><code>$.browser</code></a> has been removed from jQuery 1.9+.</p>\n",
                    "is_accepted": false,
                    "score": 153
                },
                {
                    "body": "<p><a href=\"http://jquery.thewikies.com/browser/jquery.browser.min.js\" rel=\"nofollow\">Here</a> is the Jquery browser detect plugin to identify browser/os detection.</p>\n\n<p>You can use this for styling purpose after including the plugin.</p>\n\n<pre><code>$(\"html\").addClass($.os.name);\n$(\"body\").addClass($.browser.className);\n$(\"body\").addClass($.browser.name);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use $.browser to detect the browser name. possible values are :</p>\n\n<ul>\n<li>webkit (as of jQuery 1.4)</li>\n<li>safari (deprecated)</li>\n<li>opera</li>\n<li>msie</li>\n<li>mozilla</li>\n</ul>\n\n<p>or get a boolean flag: $.browser.msie will be true if the browser is MSIE.</p>\n\n<p>as for the version number, if you are only interested in the major release number - you can use parseInt($.browser.version, 10). no need to parse the $.browser.version string yourself.</p>\n\n<p>Anyway, The $.support property is available for detection of support for particular features rather than relying on $.browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you fiddle with browser versions it lead to no good very often. You dont' want to implement it by yourself. But you can <a href=\"http://modernizr.com/\" rel=\"nofollow\">Modernizr</a> made by Paul Irish and other smart folks. It will detect what the browser actually <em>can</em> do and put apropriate classes in <code>&lt;html&gt;</code> element. However with <a href=\"http://modernizr.com/\" rel=\"nofollow\">Modernizr</a>, you can test IE version like this:</p>\n\n<pre><code>$('html.lt-ie9').each() {\n    // this will execute if browser is IE 8 or less\n}\n</code></pre>\n\n<p>Similary, you can use <code>.lt-ie8</code>, and <code>.lt-ie7</code>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Note:</p>\n\n<p>1) $.browser appears to be dropped in jQuery 1.9+ (as noted by Mandeep Jain). It is <a href=\"http://api.jquery.com/jQuery.browser/\">recommended</a> to use <a href=\"http://api.jquery.com/jQuery.support/\">.support</a> instead.</p>\n\n<p>2) <a href=\"http://api.jquery.com/jQuery.browser/\">$.browser.version</a> can return \"7\" in IE >7 when the browser is in \"compatibility\" mode.</p>\n\n<p>3) As of IE 10, <a href=\"http://msdn.microsoft.com/en-us/library/ie/hh801214%28v=vs.85%29.aspx\">conditional comments</a> will no longer work.</p>\n\n<p>4) jQuery 2.0+ will drop <a href=\"http://blog.jquery.com/2012/06/28/jquery-core-version-1-9-and-beyond/\">support for IE 6/7/8</a></p>\n\n<p>5) document.documentMode appears to be defined <strong>only</strong> in Internet Explorer 8+ browsers. The value returned will tell you in what \"compatibility\" mode Internet Explorer is running. Still not a good solution though.</p>\n\n<p>I tried numerous .support() options, but it appears that when an IE browser (9+) is in compatibility mode, it will simply behave like IE 7 ... :(</p>\n\n<p>So far I only found this to work (kind-a):</p>\n\n<p>(if documentMode is not defined and htmlSerialize and opacity are not supported, then you're very likely looking at IE &lt;8 ...)</p>\n\n<pre><code>if(!document.documentMode &amp;&amp; !$.support.htmlSerialize &amp;&amp; !$.support.opacity) \n{\n    // IE 6/7 code\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Assuming...</p>\n\n<ul>\n<li>...that it's the crunky <strong>rendering engine</strong> of old versions of IE you're interested in detecting, to make a style look right in old IE (otherwise, use feature detection)</li>\n<li>...that you <strong>can't just add conditional comments to the HTML</strong> - e.g. for JS plugins that can be applied to any page (otherwise, just do the trick of conditional classes on <code>&lt;body&gt;</code> or <code>&lt;html&gt;</code>)</li>\n</ul>\n\n<p>...then this is probably the best trick (based on <a href=\"http://stackoverflow.com/a/10965203/568458\">this non-jQuery, slightly less flexible variant</a>). It creates then tests for then removes an appropriate conditional comment. </p>\n\n<p><em>(Conditional comments are ignored in IE10+ 'standards mode' - but that should be fine since IE10+ 'standards mode' doesn't have a crazy rendering engine!)</em></p>\n\n<p>Drop in this function:</p>\n\n<pre><code>function isIE( version, comparison ){\n    var $div = $('&lt;div style=\"display:none;\"/&gt;').appendTo($('body'));\n    $div.html('&lt;!--[if '+(comparison||'')+' IE '+(version||'')+']&gt;&lt;a&gt;&amp;nbsp;&lt;/a&gt;&lt;![endif]--&gt;');\n    var ieTest = $div.find('a').length;\n    $div.remove();\n    return ieTest;\n}\n</code></pre>\n\n<p>Then use it like this:</p>\n\n<pre><code>if(isIE()){ /* runs in all versions of IE after 4 before standards-mode 10 */ }\n\nif(isIE(8)){ /* runs in IE8 */ }\n\nif(isIE(9)){ /* runs in IE9 */ }\n\nif(isIE(8,'lte')){ /* runs in IE8 or below */ }\n\nif(isIE(6,'lte')){ /* if you need this, I pity you... */ }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I need to detect not only the browser type but version as well using jQuery.\nMostly I need to find out if it is IE 8 or not.</p>\n\n<p>I am not sure if I am doing it correctly.</p>\n\n<p>If I do :</p>\n\n<pre><code>if (jQuery.browser.version &gt;= 8.0) {\ndosomething}\n</code></pre>\n\n<p>I am not sure it will work for version 8.123.45.6 or will it?</p>\n\n<p><strong>Edit: Note that JQuery 2+ has dropped support for IE8 and below, and therefore can no longer be used to detect IE8.  If using a current version of JQuery, it is necessary to use a Non-JQuery solution.</strong></p>\n",
            "last_activity_date": 1415807893,
            "question_id": 2202305,
            "score": 91,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How do I detect IE 8 with jQuery?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Your second approach is the approach I have used. Try adding the following to your Clock model:</p>\n\n<pre><code>url : function() {\n  var base = 'clocks';\n  if (this.isNew()) return base;\n  return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + this.id;\n},\n</code></pre>\n\n<p>This approach assumes that you have implemented controllers with the hashbang in your URL like so, <a href=\"http://www.mydomain.com/#clocks/123\">http://www.mydomain.com/#clocks/123</a> , but it should work even if you haven't yet.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>I personally recommend, following the <a href=\"http://documentcloud.github.com/backbone/#Model-url\">Model#url method documentation</a></p>\n\n<pre><code>model = new Model(id: 1)\nview = new View(model: model) \ncollection = new Collection([model])\nmodel.fetch()\n</code></pre>\n\n<p>in your collection remember to add the collection url:</p>\n\n<pre><code>url: \"/models\"\n</code></pre>\n\n<p>and in your View's initialize function do:</p>\n\n<pre><code>this.model.bind(\"change\", this.render)\n</code></pre>\n\n<p>this way backbone will do an ajax request using this url:</p>\n\n<pre><code>\"/models/1\"\n</code></pre>\n\n<p>your model will be updated and the view rendered, without modifying Collection#url or Model#urlRoot</p>\n\n<p>note:\nsorry this example came out in coffee script, but you can easily translate it to js adding var statements</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Try specifying <a href=\"http://documentcloud.github.com/backbone/#Model-urlRoot\">urlRoot</a> in the model:</p>\n\n<p>From the docs:</p>\n\n<pre><code>var Book = Backbone.Model.extend({urlRoot : '/books'});\nvar solaris = new Book({id: \"1083-lem-solaris\"});\nsolaris.fetch();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 115
                },
                {
                    "body": "<pre><code>var Person = Backbone.Model.extend({urlRoot : '/person/details'});\nvar myName = new Person({id: \"12345\"});\nmyName.fetch();\n</code></pre>\n\n<p>As a result you make a Ajax request on the </p>\n\n<pre><code>URL http://[domainName]/person/details/id \n</code></pre>\n\n<p>and you have the JSON response back.</p>\n\n<p>Enjoiiii !!! </p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>...and do this if you don't want the trailing slash on the model urlRoot:</p>\n\n<pre><code>    url : function() {                        \n        return this.urlRoot + this.id;\n    },\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You probably should be accessing the object trough a collection and keeping it in the collection all the time. This is how to do it:</p>\n\n<pre><code>var AllClocks = Backbone.Collection.extend({\n  model: Clock,\n  url: '/clocks/'\n});\n\nvar allClocks = new AllClocks();\nmy_clock = allClocks.add({id: 123});\nmy_clock.fetch()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a <code>Clock</code> model in Backbone:</p>\n\n<pre><code>var Clock = Backbone.Model.extend({});\n</code></pre>\n\n<p>I'm trying to get an instance of that that has the latest information from <code>/clocks/123</code>. Some things I've tried:</p>\n\n<h3>a \"class\"-level method</h3>\n\n<pre><code>Clock.fetch(123)\n// TypeError: Object function (){ ... } has no method 'fetch'\n</code></pre>\n\n<h3>creating an instance and then calling <code>fetch</code> on it:</h3>\n\n<pre><code>c = new Clock({id: 123})\nc.fetch()\n// Error: A 'url' property or function must be specified\n</code></pre>\n\n<h3>a collection</h3>\n\n<p>I tried creating an <code>AllClocks</code> collection resource (even though I have no use for such a thing on the page):</p>\n\n<pre><code>var AllClocks = Backbone.Collection.extend({\n  model: Clock,\n  url: '/clocks/'\n});\nvar allClocks = new AllClocks();\nallClocks.fetch(123);\n// returns everything from /clocks/\n</code></pre>\n\n<p>How do I just get <strong>one</strong> API-backed Clock?</p>\n",
            "last_activity_date": 1404323002,
            "question_id": 5097107,
            "score": 78,
            "tags": [
                "javascript",
                "model-view-controller",
                "rest",
                "backbone.js"
            ],
            "title": "How do I fetch a single model in Backbone?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I have a solution to log, using javascript, to the apps debug console.\nIt's a bit crude, but it works.</p>\n\n<p>First, we define the console.log() function in javascript, which opens and immediately removes an iframe with a ios-log: url.</p>\n\n<pre><code>// Debug\nconsole = new Object();\nconsole.log = function(log) {\n  var iframe = document.createElement(\"IFRAME\");\n  iframe.setAttribute(\"src\", \"ios-log:#iOS#\" + log);\n  document.documentElement.appendChild(iframe);\n  iframe.parentNode.removeChild(iframe);\n  iframe = null;    \n};\nconsole.debug = console.log;\nconsole.info = console.log;\nconsole.warn = console.log;\nconsole.error = console.log;\n</code></pre>\n\n<p>Now we have to catch this URL in the UIWebViewDelegate in the iOS app using the shouldStartLoadWithRequest function.</p>\n\n<pre><code>- (BOOL)webView:(UIWebView *)webView2 \nshouldStartLoadWithRequest:(NSURLRequest *)request \n navigationType:(UIWebViewNavigationType)navigationType {\n\n    NSString *requestString = [[[request URL] absoluteString] stringByReplacingPercentEscapesUsingEncoding: NSUTF8StringEncoding];\n    //NSLog(requestString);\n\n    if ([requestString hasPrefix:@\"ios-log:\"]) {\n        NSString* logString = [[requestString componentsSeparatedByString:@\":#iOS#\"] objectAtIndex:1];\n                               NSLog(@\"UIWebView console: %@\", logString);\n        return NO;\n    }\n\n    return YES;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<p>NativeBridge is very helpful for communicating from a UIWebView to Objective-C.  You can use it to pass console logs and call Objective-C functions.</p>\n\n<p><a href=\"https://github.com/ochameau/NativeBridge\" rel=\"nofollow\">https://github.com/ochameau/NativeBridge</a></p>\n\n<pre><code>console = new Object();\nconsole.log = function(log) {\n    NativeBridge.call(\"logToConsole\", [log]);\n};\nconsole.debug = console.log;\nconsole.info = console.log;\nconsole.warn = console.log;\nconsole.error = console.log;\n\nwindow.onerror = function(error, url, line) {\n    console.log('ERROR: '+error+' URL:'+url+' L:'+line);\n};\n</code></pre>\n\n<p>The advantage of this technique is that things like newlines in log messages are preserved.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>After consulting with an esteemed colleague today he alerted me to the Safari Developer Toolkit, and how this can be connected to UIWebViews in the iOS Simulator for console output (and debugging!!!).</p>\n\n<p>Steps:</p>\n\n<ol>\n<li>Install Safari</li>\n<li>Open Safari Preferences -> \"Advanced\" tab -> enable checkbox \"Show Develop menu in menu bar\"</li>\n<li>Start app with UIWebView in iOS Simulator</li>\n<li>Safari -> Develop -> i(Pad/Pod) Simulator -> <code>[the name of your UIWebView file]</code></li>\n<li>Rejoice!</li>\n</ol>\n\n<p>You can now drop complex (in my case, <em>flot</em>) Javascript and other stuff into UIWebViews and debug at will.</p>\n\n<p>EDIT: As pointed out by @Joshua J McKinnon this strategy also works when debugging UIWebViews on a device.  Simply enable Web Inspector on your device settings: Settings->Safari->Advanced->Web Inspector (cheers @Jeremy Wiebe)</p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>Starting from iOS7, you can use native Javascript bridge. Something as simple as following</p>\n\n<pre><code>    JSContext *ctx = [webview valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n    ctx[@\"console\"][@\"log\"] = ^(JSValue * msg) {\n        NSLog(@\"JavaScript %@ log message: %@\", [JSContext currentContext], msg);\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>When writing a iPhone / iPad app with a UIWebView, the console isn't visible.\n<a href=\"http://stackoverflow.com/questions/193119/how-can-my-iphone-objective-c-code-get-notified-of-javascript-errors-in-a-uiwebvi\">this excellent answer</a> shows how to trap errors, but I would like to use the console.log() as well.</p>\n",
            "last_activity_date": 1424029981,
            "question_id": 6508313,
            "score": 38,
            "tags": [
                "javascript",
                "ios",
                "uiwebview"
            ],
            "title": "Javascript console.log() in an iOS UIWebView"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>This is a good way to copy a file in one line of code using streams:</p>\n\n<pre><code>var fs = require('fs');\n\nfs.createReadStream('test.log').pipe(fs.createWriteStream('newLog.log'));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>Same mechanism, but this adds error handling:</p>\n\n<pre><code>function copyFile(source, target, cb) {\n  var cbCalled = false;\n\n  var rd = fs.createReadStream(source);\n  rd.on(\"error\", function(err) {\n    done(err);\n  });\n  var wr = fs.createWriteStream(target);\n  wr.on(\"error\", function(err) {\n    done(err);\n  });\n  wr.on(\"close\", function(ex) {\n    done();\n  });\n  rd.pipe(wr);\n\n  function done(err) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 125
                },
                {
                    "body": "<p>Well, usually it is good to avoid asynchronous file operations. Here is the short (i.e. no error handling) sync example:</p>\n\n<pre><code>var fs = require('fs');\nfs.writeFileSync(targetFile, fs.readFileSync(sourceFile));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Mike Schilling's solution with error handling with a short-cut for the error event handler.</p>\n\n<pre><code>function copyFile(source, target, cb) {\n  var cbCalled = false;\n\n  var rd = fs.createReadStream(source);\n  rd.on(\"error\", done);\n\n  var wr = fs.createWriteStream(target);\n  wr.on(\"error\", done);\n  wr.on(\"close\", function(ex) {\n    done();\n  });\n  rd.pipe(wr);\n\n  function done(err) {\n    if (!cbCalled) {\n      cb(err);\n      cbCalled = true;\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I was not able to get the <code>createReadStream/createWriteStream</code> method working for some reason, but using <code>fs-extra</code> npm module it worked right away. I am not sure of the performance difference though.</p>\n\n<p><a href=\"https://www.npmjs.org/package/fs-extra\">fs-extra</a></p>\n\n<p><code>npm install --save fs-extra</code></p>\n\n<pre><code>var fs = require('fs-extra');\n\nfs.copySync(path.resolve(__dirname,'./init/xxx.json'), 'xxx.json');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>Project that i am working at (node.js) implies a lot of operations with file system (copying/reading/writing etc). I'd like to know, what methods are the fastest, and i'd be happy for some advices.</p>\n\n<p>Thanks in advance!</p>\n",
            "last_activity_date": 1408547845,
            "question_id": 11293857,
            "score": 93,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "Fastest way to copy file in node.js"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can lookup an objects keys + values by invoking either Javascripts native <code>for in</code> loop:</p>\n\n<pre><code>var obj = {\n    foo:    'bar',\n    base:   'ball'\n};\n\nfor(var key in obj) {\n    alert('key: ' + key + '\\n' + 'value: ' + obj[key]);\n}\n</code></pre>\n\n<p>or use jQuerys <code>.each()</code> method:</p>\n\n<pre><code>$.each(obj, function(key, element) {\n    alert('key: ' + key + '\\n' + 'value: ' + element);\n});\n</code></pre>\n\n<p>There are <strong>only</strong> objects in ECMA-/Javascript. Arrays, Functions, everything is an object. To know the <code>base classname</code> you may invoke the <code>Object.prototype.toString</code> method on an object, like</p>\n\n<pre><code>alert(Object.prototype.toString.call([]));\n</code></pre>\n\n<p>will output <code>[object Array]</code>.</p>\n\n<p>There are several other classnames like <code>[object Object]</code>, <code>[object Function]</code>, <code>[object Date]</code>, <code>[object String]</code>, <code>[object Number]</code>, <code>[object Array]</code>, <code>[object Regex]</code></p>\n",
                    "is_accepted": true,
                    "score": 77
                },
                {
                    "body": "<h3>To get listing of object properties/values:</h3>\n\n<ol>\n<li><p>In Firefox - Firebug:</p>\n\n<pre><code>console.dir(&lt;object&gt;);\n</code></pre></li>\n<li><p>Standard JS to get object keys borrowed from <a href=\"http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object\">Slashnick</a>:</p>\n\n<pre><code>   var fGetKeys = function(obj){\n      var keys = [];\n      for(var key in obj){\n         keys.push(key);\n      }\n      return keys;\n   }\n\n\n// Example to call it:\n\n\n   var arrKeys = fGetKeys(document);\n\n\n   for (var i=0, n=arrKeys.length; i&lt;n; i++){\n      console.log(i+1 + \" - \" + arrKeys[i] + document[arrKeys[i]] + \"\\n\");\n   }\n</code></pre></li>\n</ol>\n\n<hr>\n\n<h3>Edits:</h3>\n\n<ol>\n<li><code>&lt;object&gt;</code> in the above is to be replaced with the variable reference to the object.</li>\n<li><code>console.log()</code> is to be used in the console, if you're unsure what that is, you can replace it with an <code>alert()</code></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Get <a href=\"http://getfirebug.com/\" rel=\"nofollow\">FireBug</a> for Mozilla Firefox.</p>\n\n<p>use <code>console.log(obj);</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p><strong>i) what is the difference between these two objects</strong></p>\n</blockquote>\n\n<p>The simple answer is that <code>[object]</code> indicates a host object that has no internal class.  A host object is an object that is not part of the ECMAScript implementation you're working with, but is provided by the host as an extension.  The DOM is a common example of host objects, although in most newer implementations DOM objects inherit from the native Object and have internal class names (such as <em>HTMLElement</em>, <em>Window</em>, etc).  IE's proprietary ActiveXObject is another example of a host object.</p>\n\n<p><code>[object]</code> is most commonly seen when alerting DOM objects in Internet Explorer 7 and lower, since they are host objects that have no internal class name.<br>\n<br>  </p>\n\n<blockquote>\n  <p><strong>ii) what type of Object is this</strong></p>\n</blockquote>\n\n<p>You can get the \"type\" (internal class) of object using <code>Object.prototype.toString</code>.  The specification requires that it always returns a string in the format <code>[object [[Class]]]</code>, where <code>[[Class]]</code> is the internal class name such as <em>Object</em>, <em>Array</em>, <em>Date</em>, <em>RegExp</em>, etc.  You can apply this method to any object (including host objects), using</p>\n\n<pre><code>Object.prototype.toString.apply(obj);\n</code></pre>\n\n<p>Many <code>isArray</code> implementations use this technique to discover whether an object is actually an array (although <a href=\"http://stackoverflow.com/questions/1058427/how-to-detect-if-a-variable-is-an-array/4029057#4029057\">it's not as robust in IE as it is in other browsers</a>).</p>\n\n<p><br></p>\n\n<blockquote>\n  <p><strong>iii) what all properties does this object contains and values of each property</strong></p>\n</blockquote>\n\n<p>In ECMAScript 3, you can iterate over enumerable properties using a <code>for...in</code> loop.  Note that most built-in properties are non-enumerable.  The same is true of some host objects.  In ECMAScript 5, you can get an array containing the names of all non-inherited properties using <code>Object.getOwnPropertyNames(obj)</code>.  This array will contain non-enumerable and enumerable property names.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I hope this doesn't count as spam. I humbly ended up writing a function after endless debug sessions: <a href=\"http://github.com/halilim/Javascript-Simple-Object-Inspect\" rel=\"nofollow\">http://github.com/halilim/Javascript-Simple-Object-Inspect</a></p>\n\n<pre><code>function simpleObjInspect(oObj, key, tabLvl)\n{\n    key = key || \"\";\n    tabLvl = tabLvl || 1;\n    var tabs = \"\";\n    for(var i = 1; i &lt; tabLvl; i++){\n        tabs += \"\\t\";\n    }\n    var keyTypeStr = \" (\" + typeof key + \")\";\n    if (tabLvl == 1) {\n        keyTypeStr = \"(self)\";\n    }\n    var s = tabs + key + keyTypeStr + \" : \";\n    if (typeof oObj == \"object\" &amp;&amp; oObj !== null) {\n        s += typeof oObj + \"\\n\";\n        for (var k in oObj) {\n            if (oObj.hasOwnProperty(k)) {\n                s += simpleObjInspect(oObj[k], k, tabLvl + 1);\n            }\n        }\n    } else {\n        s += \"\" + oObj + \" (\" + typeof oObj + \") \\n\";\n    }\n    return s;\n}\n</code></pre>\n\n<p><strong>Usage</strong></p>\n\n<pre><code>alert(simpleObjInspect(anyObject));\n</code></pre>\n\n<p>or</p>\n\n<pre><code>console.log(simpleObjInspect(anyObject));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"https://github.com/bestiejs/spotlight.js/\" rel=\"nofollow\">Spotlight.js</a> is a great library for iterating over the window object and other host objects looking for certain things.</p>\n\n<pre><code>// find all \"length\" properties\nspotlight.byName('length');\n\n// or find all \"map\" properties on jQuery\nspotlight.byName('map', { 'object': jQuery, 'path': '$' });\n\n// or all properties with `RegExp` values\nspotlight.byKind('RegExp');\n\n// or all properties containing \"oo\" in their name\nspotlight.custom(function(value, key) { return key.indexOf('oo') &gt; -1; });\n</code></pre>\n\n<p>You'll like it for this. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Scanning object for first intance of a determinated prop:</p>\n\n<pre><code>var obj = {a:'Saludos',\n            b:{b_1:{b_1_1:'Como estas?',b_1_2:'Un gusto conocerte'}},\n           d:'Hasta luego'\n            }\nfunction scan (element,list){\n    var res;\n    if (typeof(list) != 'undefined'){\n        if (typeof(list) == 'object'){\n            for(key in list){\n               if (typeof(res) == 'undefined'){\n                res = (key == element)?list[key]:scan(element,list[key]);\n               }\n            });\n        }\n    }\n    return res;\n}\nconsole.log(scan('a',obj));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In JavaScript / jQuery, if I <code>alert</code> some object, I get either <code>[object]</code> or  <code>[object Object]</code></p>\n\n<p>Is there any way to know:</p>\n\n<ol>\n<li><p>what is the difference between these two objects</p></li>\n<li><p>what type of Object is this</p></li>\n<li><p>what all properties does this object contains and values of each property</p></li>\n</ol>\n\n<p>?</p>\n",
            "last_activity_date": 1372166882,
            "question_id": 4079274,
            "score": 64,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How to get an object&#39;s properties in JavaScript / jQuery?"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>My advice would be to take a look at the <a href=\"http://developer.android.com/guide/webapps/best-practices.html\" rel=\"nofollow\">best practices for android web development</a>. To be more specific, you may need to include more in your meta tag to prevent the zooming from occurring. For Example:</p>\n\n<pre><code>&lt;!-- set the screen width to the device width --&gt;\n&lt;!-- set the viewport to be non-zoomable --&gt;\n&lt;!-- fix the initial zoom to be 1:1 --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Check this this may work </p>\n\n<pre><code>$(\"input[type=text], textarea\").mouseover(zoomDisable).mousedown(zoomEnable);\nfunction zoomDisable(){\n  $('head meta[name=viewport]').remove();\n  $('head').prepend('&lt;meta name=\"viewport\" content=\"user-scalable=0\" /&gt;');\n}\nfunction zoomEnable(){\n  $('head meta[name=viewport]').remove();\n  $('head').prepend('&lt;meta name=\"viewport\" content=\"user-scalable=1\" /&gt;');\n}\n</code></pre>\n\n<p>also try this </p>\n\n<pre><code>input[type='text'],input[type='number'],textarea {font-size:16px;}\nbody{ -webkit-text-size-adjust:none;}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Incase anyone was wondering you can actually get around this whole input box zooming (certainly on an iTouch as it's all I have to test on) by making the input readonly.</p>\n\n<pre><code>$(\"#your-input\").focus(function(event){\nevent.preventDefault();\n$(this).prop({ readOnly: true });\n/*\nDo your magic\n\n*/\n$(this).prop({readOnly:false});\n});\n</code></pre>\n\n<hr>\n\n<p>I was really surprised to find nobody had yet tried this!</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<h2>Not possible!</h2>\n\n<p>I've got some bad news for you all. It's now been 6 months and no one has correctly answered the question.</p>\n\n<p>Also I've finished working on that project and employer.</p>\n\n<p>I'm afraid to say it, but exactly what I asked for is impossible. Sorry peoples. But I'm going to leave the question alive so people can see the other options.</p>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>Perhaps you could avoid zoom, by resetting the zoom scale to 1.0? On my Android (HTC Wildfire S), I'm able to reset zoom to 1.0 like so:</p>\n\n<pre><code>$('meta[name=viewport]').attr('content',\n         'initial-scale=1.0, maximum-scale=0.05');\n</code></pre>\n\n<p>but this moves the viewport to 0, 0 (the upper left corner of the page). So I <code>$().scrollLeft(...)</code> and <code>.scrollTop(...)</code> back to the <code>form</code> again.</p>\n\n<p>(<code>initial-scale=1.0, maximum-scale=0.05</code> is my initial value of the <code>viewport</code> meta.)</p>\n\n<p>(The reason I do this is not to prevent Android from zooming, but rather to reset the zoom to a known scale, because of other Android bugs that otherwise corrupt <code>screen.width</code> and other related values.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this one, it works on my device:</p>\n\n<pre><code>&lt;meta content=\"minimum-scale=1.0, width=device-width, maximum-scale=1.0, user-scalable=no\" name=\"viewport\" /&gt; \n</code></pre>\n\n<p>However, when I double click over the input box, the keyboard slides up and makes the page lessen in height.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following worked for me (Android Galaxy S2):</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, height=device-height,  initial-scale=1.0, user-scalable=no;user-scalable=0;\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This works where <code>#inputbox</code> is the id of the input form element.</p>\n\n<p>I'm using this to stop a search box from auto zooming in IOS it's a mod of the earlier post above since the mouseover event would only work the first time but fails to trigger subsequent times. Enjoy this it was a real hair puller...</p>\n\n<pre><code>$(\"#inputbox\").live('touchstart', function(e){\n    $('head meta[name=viewport]').remove();\n    $('head').prepend('&lt;meta name=\"viewport\" content=\"user-scalable=0\" /&gt;');\n    }\n);\n\n$(\"#inputbox\").mousedown(zoomEnable);\n\nfunction zoomEnable(){\n  $('head meta[name=viewport]').remove();\n  $('head').prepend('&lt;meta name=\"viewport\" content=\"user-scalable=1\" /&gt;');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've been looking at this problem as it's something that's been irritating me with my HTML5 Android app. I can offer half an answer. That's to say, how to stop the page scaling when a text field is focussed. </p>\n\n<p>Requires Jquery Mobile:</p>\n\n<pre><code>$('#textfield').textinput({preventFocusZoom:true});\n</code></pre>\n\n<p>does exactly that.</p>\n\n<p>But, as I said, this only solves half of the problem. The other half is allowing the user to zoom the page again afterwards. The documentation I've found seems to suggest that </p>\n\n<pre><code>    $('#textfield').textinput({preventFocusZoom:false});\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$('#textfield').textinput('option','preventFocusZoom',false);\n</code></pre>\n\n<p>should un-set it, but I haven't managed to get either option to work. Not a problem if you're going to be taking the user to another page afterwards, but of limited use if, like me, you're just going to load content via AJAX.</p>\n\n<p>EDIT: Although aimed at IOS, </p>\n\n<pre><code>$.mobile.zoom.disable();\n</code></pre>\n\n<p>Also stops the zooming. In a more suitably generic way. But unfortunately</p>\n\n<pre><code>$.mobile.zoom.enable();\n</code></pre>\n\n<p>Fails to restore the functionality just like the former code.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>By accident I discovered that this:</p>\n\n<pre><code> input {\n     line-height:40px;\n }   \n</code></pre>\n\n<p>will prevent zoom on input on my Galaxy Nexus with Chrome for Android version 18\nalthough that might be specific to my case:</p>\n\n<pre><code>&lt;meta name='viewport' data='width=800'&gt;\n</code></pre>\n\n<p>so for future reference, if you come here via google, this may be one of other solutions.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Yes, it's possible</strong></p>\n\n<pre><code>input[type='text'],input[type='number'],textarea {font-size:16px;}\n</code></pre>\n\n<p>Tested in Android 4.2 browser and Android Chrome.</p>\n\n<p><a href=\"http://stackoverflow.com/a/6394497/4264\">http://stackoverflow.com/a/6394497/4264</a></p>\n\n<p>The only case I found that it kept zooming was in Chrome with Settings -> Accesibility -> Text scaling higher than 100%.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same problem (only in Android chrome browser). I solved the issue like this.</p>\n\n<ol>\n<li><p>Detected the userAgent, and bind the onFocus and onBlur events of the text fields to change the viewport meta content as follows</p>\n\n<pre><code>if ((navigator.userAgent.match(/Android/i)) &amp;&amp; (navigator.userAgent.toLowerCase().indexOf('chrome') &gt; -1)) {\nisAndroidChrome = true;    \n}\nvar viewportmeta = document.querySelector('meta[name=\"viewport\"]');\n</code></pre></li>\n<li><p>onFocus of the text field, I set the following viewport meta content <code>viewportmeta.content = 'width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1';</code></p></li>\n<li><p>onBlur of the text field, I am resetting the viewport meta content to <code>viewportmeta.content = 'width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.4';</code>  you can set the maximum-scale if you wish, or if you want it to be user-scalable, don't set maximum-scale</p></li>\n</ol>\n\n<p>When you change the trigger the <code>onFocus</code> event of the input, if the <code>maximum-scale</code> is <code>1</code>, it doesn't zoom in.\nThis worked for me like a charm. Hope it works for you too. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm not sure if this is the best way but this works for me on android and iphone.</p>\n\n<pre><code>input:focus { font-size: 16px!important}\n</code></pre>\n\n<p>You can use media queries to target mobile devices only.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>Working Model</strong></p>\n\n<p>We have this working on Android. Here is the key: the <em>font-size</em> on the <em>input</em> must be the proper size. If you're page is 320px wide then you need 16px font size. If you're size is 640px then you need 32px font size.</p>\n\n<p>In addition you need the following</p>\n\n<p><strong>320 wide version</strong></p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=320, initial-scale=1, maximum-scale=1, minimum-scale=1\" /&gt;\n</code></pre>\n\n<p><strong>640 wide version</strong></p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=640, initial-scale=.5, maximum-scale=.5, minimum-scale=.5\" /&gt;\n</code></pre>\n\n<p>NOTE: THIS DOES NOT CONTAIN THE USER SCALABLE ATTRIBUTE. THAT WILL BREAK IT.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>font-size: 18px;\n</code></pre>\n\n<p>This fixed it for my Nexus 7 (2011) running Android 4.3. </p>\n\n<p>This problem only exists for me on the Nexus 7, the following devices all appear happy with font-size: 16px:</p>\n\n<ul>\n<li>HTC Desire Android 2.3.7</li>\n<li>Nexus 4 Android 4.3</li>\n</ul>\n\n<p>Hope this helps someone!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As @soshmo said, <code>user-scalable</code> isn't an attribute that WebKit likes and so its inclusion causes WebKit to discard the whole viewport tag. I also found this to be the case with setting <code>maximum-scale</code> to anything other than 1, and that didn't stop the zooming. </p>\n\n<p>Resetting the <code>viewport</code> on every <code>focus</code> and <code>blur</code> event worked for me: </p>\n\n<pre><code>var htmlWidth = parseInt($('html').outerWidth());\nvar screenDPI = parseInt(window.devicePixelRatio);\nvar screenWidth = parseInt(screen.width);\nvar screenHeight = parseInt(screen.height);    \nvar scaleVal = (((screenWidth * screenDPI) / htmlWidth)/screenDPI);\n$('input[type=\"text\"], input[type=\"password\"], input[type=\"email\"]').each(function() {\n\n    //unchained for clarity\n\n    $(this).focus(function() { \n        $('meta[name=\"viewport\"]').attr('content', \"initial-scale=' + scaleVal + ', maximum-scale=1, minimum-scale=' + (scaleVal) + ', width=device-width, height=device-height\");\n        // Do something to manage scrolling the view (resetting the viewport also resets the scroll)\n        $('html, body').scrollTop(($(this).offset().top - (screenHeight/3)));\n    });\n\n    $(this).blur(function() { \n        $('meta[name=\"viewport\"]').attr('content', \"initial-scale=' + scaleVal + ', maximum-scale=1, minimum-scale=' + (scaleVal) + ', width=device-width, height=device-height\");\n    });\n});\n</code></pre>\n\n<p>If you find that setting/resetting the <code>viewport</code> it's worth checking that WebKit accepts the content attributes that you're using. It took me a while to realise that using things like <code>user-scalable</code> caused the <code>viewport</code> to be discarded, so even though the JavaScript was working, the changes were not affected. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Setting the viewport user-scalable property on touchstart did it for me, no need to remove then re-add simply change it on touchstart then enable again on blur. Means the user can't zoom whilst focused on the field but a small price to pay I think.</p>\n\n<pre><code>var zoomEnable;\n\nzoomEnable = function() {\n  $(\"head meta[name=viewport]\").prop(\"content\", \"width=device-width, initial-scale=1.0, user-scalable=yes\");\n};\n\n$(\"input[type='text']\").on(\"touchstart\", function(e) {\n  $(\"head meta[name=viewport]\").prop(\"content\", \"width=device-width, initial-scale=1.0, user-scalable=no\");\n});\n\n$(\"input[type='text']\").blur(zoomEnable);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This works great for me.</p>\n\n<pre><code>input[type='text'],input[type='number'],textarea {font-size:16px; !important}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>SOLUTION FOUND!!!!!!!!!!!!!!!</p>\n\n<p>At least for people that works with Phonegap/Cordova</p>\n\n<p>I'm using a Galaxy Tab pc1010 with Android Froyo (2.2)\nI'm using Cordova 2.4.0</p>\n\n<p>Add these beautiful lines to your HTML head element:</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"user-scale=no\"/&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width\"/&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, maximum-scale=0.9\"/&gt;\n</code></pre>\n\n<p>Type them separately and use maximum scale of 0.9. I was having this problem when selecting an input field that my layout disadjusted just a little bit from the top and from the left, tried to repair it using javascript element style modification but it was awful. Thank God I found this configuration in an old mobile site project created using some tutorials with this trick.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<h1>Scale Issues Cause Zoom on Input Focus</h1>\n\n<p>There is a great difficulty in sizing the content for different screen resolutions and sizes, which ultimately is the cause of this zoom issue.</p>\n\n<p>Most mobile browsers have a trigger on input focus (that you can't over-ride without difficulty):</p>\n\n<pre><code>if (zoom-level &lt; 1)\n   zoom to 1.5\n   center focused input relative to screen\n</code></pre>\n\n<p>*yes, that was way over-simplified.</p>\n\n<h2>Myth of meta-tag scale fixes.</h2>\n\n<p><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"&gt;</code>\nAll such viewport settings <em>will not</em> prevent the input-focus zoom if you are zoomed-out.\nThese will also not over-ride any other html, body, or element sizing that would push the window to width wider than the screen.</p>\n\n<h1>Primary Cause</h1>\n\n<p>Using a window or body size larger than the device screen dimensions.</p>\n\n<p>Consider the standard screen-size of most of the Galaxy line of Android smartphones: 360 x 650.\nIf you're document body, or window, is defined to be larger than that (let's say 1024 wide to make it obvious), a few things may happen:</p>\n\n<ol>\n<li>The browser may auto-zoom out, to fit the width to the screen.\n<ol start=\"2\">\n<li>The user may do the above.</li>\n<li>You may have done the above.</li>\n</ol></li>\n<li>The browser will restore the zoom-level on subsequent visits to the page.</li>\n<li>You're now viewing the content at ~0.35x zoom.</li>\n</ol>\n\n<h3>Initial State 1x</h3>\n\n<p>When loaded, the page won't fit. Some browsers may zoom-out to fit the window, but the user most certainly will. Additionally, if you zoomed-out on this page once, the browser will store the zoom-level.</p>\n\n<h3>Zoom Out to Fit 0.35x</h3>\n\n<p>Once zoomed out, the width will fit nicely, and a page with more vertical area will fill out the screen quite nicely... but...</p>\n\n<p>Notice that the browser is now in a state where text and input (sized for normal 1x zoom) would be way too small to read, thus triggers a usability behavior of zooming on the input fields when they get focus.</p>\n\n<h3>Zoom on Input-Focus 1.5x</h3>\n\n<p>Typical behavior in the above case, is to zoom to 1.5x, to ensure input visibility. The result (if you've styled everything to look better when zoomed-out, or for the larger screen) is less than desirable.</p>\n\n<h1>Solution 1</h1>\n\n<p>Use a combination of css media rules, device-detection, or whatever best suits your situation.\nSet the window and body to a size that fills the screen-space, without exceeding it.</p>\n\n<ul>\n<li>This is why so many people have success with forcing input text-size to 16px;\n<ul>\n<li>once you do that, its clear that you're WAY zoomed out.</li>\n<li>it also has the added benefit of tricking the browser into allowing slightly zoomed out windows to not trigger the focus-zoom.</li>\n</ul></li>\n</ul>\n\n<h1>Solution 2</h1>\n\n<p>Use the meta viewport, but then be careful with css widths.</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"/&gt;\n</code></pre>\n\n<ul>\n<li>When using this method, you must do one of the following:\n<ul>\n<li>Only use percentages for widths.</li>\n<li>Define an em width, and only use em and % for widths.</li>\n<li>see Solution 1 for using px widths.</li>\n</ul></li>\n</ul>\n\n<h1>Solution 3</h1>\n\n<p>jQuery.mobile <code>$.mobile.zoom.disable();</code></p>\n\n<p>Just make sure you start developing with it from the start, and not from the middle.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For Nexus 7 I was getting this issue when my media query was -</p>\n\n<p><code>@media screen and (max-device-width: 600px) and (orientation : portrait)</code></p>\n\n<p>So I used below media query to resolve the issue - </p>\n\n<p><code>@media screen and (max-device-width: 600px) and (max-aspect-ratio: 13/9)</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>add this meta tag to your html file and it will solve the issue.</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, user-scalable=no\" /&gt;\n</code></pre>\n\n<p>adding this line solved issue for me in HTC desire 816 and SAMSUNG GALAXY S5.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Just a side note:</p>\n\n<p>The solution with the <code>meta name=\"viewport\"</code> works perfectly. However, both native and Chrome browsers in Android have an accessibility setting named <em>\"Override website's request to control zoom\".</em> If this setting is set, nothing in HTML, CSS, or JavaScript can disable zooming.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Ran into this issue today and may have a chromium update coming down the pipe soon that could resolve it. Per the <a href=\"https://code.google.com/p/chromium/issues/detail?id=181560\" rel=\"nofollow\">chromium</a> issue pointed to by @Jo, </p>\n\n<blockquote>\n  <p><em>no.28 jdd...@chromium.org  As of <a href=\"https://codereview.chromium.org/196133011/\" rel=\"nofollow\">https://codereview.chromium.org/196133011/</a>, autozooming is disabled on sites that have a mobile-optimized viewport (e.g., \"width=device-width\" or fixed page scale viewport annotation).</em> </p>\n  \n  <p><em>There may still be auto-scrolling when focusing editable elements on such sites, to maintain the element's visibility, but zooming will be disabled. This will go live in M41 (still a good number of weeks from hitting beta channel).</em> </p>\n  \n  <p><em>We don't have any plans to otherwise prevent autozooming for legacy desktop sites.</em></p>\n</blockquote>\n\n<p>As of this time, Chrome is v.40; v.41 is in BETA. Will be checking in to see if focus continues to be lost on the Android Chrome browser.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Here's the dilema, I have a webpage (only for android devices) and in that page I have an input box (a text box specifically) and when it gets focus the browser zooms in. I don't want it to zoom in - sounds easy, right?</p>\n\n<p>Here's where it gets fun: I have to be able to zoom in general so don't say </p>\n\n<pre><code>&lt;meta name='viewport' content='user-scalable=0'&gt;\n</code></pre>\n\n<p>That won't work for me.</p>\n\n<p>Also, the input box doesn't receive click events. It appears when another button is clicked a gets focus programmatically.</p>\n\n<p>Here's what I've tried and they've failed so far:</p>\n\n<pre><code>jQuery('head meta[name=viewport]').remove();\njQuery('head').prepend('&lt;meta name=\"viewport\" content=\"width=720px;intial-scale=1.0;maximum-scale=1.0;user-scalable=no\" /&gt;');\njQuery(\"#locationLock input\").focus();\njQuery('head meta[name=viewport]').remove();\njQuery('head').prepend('&lt;meta name=\"viewport\" content=\"width=720px;intial-scale=1.0;maximum-scale=1.0;user-scalable=yes\" /&gt;');\n</code></pre>\n\n<p>This also failed:</p>\n\n<pre><code>&lt;input type='text' onfocus=\"return false\"&gt;\n</code></pre>\n\n<p>And this:</p>\n\n<pre><code>jQuery(\"#locationLock input\").focus(function(e){e.preventDefault();});\n</code></pre>\n\n<p>Any ideas? The answerer wins 10 internets (edit: And now 50 repution).</p>\n",
            "last_activity_date": 1422652384,
            "question_id": 7073396,
            "score": 48,
            "tags": [
                "javascript",
                "jquery",
                "android",
                "html"
            ],
            "title": "Disable zoom on input focus in Android webpage"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You're looking for:</p>\n\n<pre><code>.is(':visible')\n</code></pre>\n\n<p>Although you should probably change your selector to use jQuery considering you're using it in other places anyway:</p>\n\n<pre><code>if($('#testElement').is(':visible')) {\n    // Code\n}\n</code></pre>\n\n<p>It is important to note that if any one of a target element's parent elements are hidden, then <code>.is(':visible')</code> on the child will return <code>false</code> (which makes sense).</p>\n\n<hr>\n\n<p>Expanding even further, there is a built in jQuery function called <a href=\"http://api.jquery.com/fadeToggle/\"><code>$.fadeToggle()</code></a>:</p>\n\n<pre><code>function toggleTestElement() {\n    $('#testElement').fadeToggle('fast');\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 339
                },
                {
                    "body": "<pre><code>if($('#testElement').is(':visible')){\n    //what you want to do when is visible\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>There's no need, just use <code>fadeToggle()</code> on the element:</p>\n\n<pre><code>$('#testElement').fadeToggle('fast');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/minitech/cJWAr/\">Here's a demo.</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>Using <code>.fadeIn()</code> and <code>.fadeOut()</code>, I have been hiding/showing an element on my page, but with two buttons, one for hide and one for show. I now want to have one button to toggle both. Therefore, my question is how do I detect if the element is visible or not?</p>\n\n<p>My HTML as it is:</p>\n\n<pre><code>&lt;a onclick=\"showTestElement()\"&gt;Show&lt;/a&gt;\n&lt;a onclick=\"hideTestElement()\"&gt;Hide&lt;/a&gt;\n</code></pre>\n\n<p>My JS as it is:</p>\n\n<pre><code>&lt;script&gt;\n    function showTestElement(){\n        $('#testElement').fadeIn('fast');\n    }\n\n    function hideTestElement(){\n        $('#testElement').fadeOut('fast');\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>My HTML as I would like to have it:</p>\n\n<pre><code>&lt;a onclick=\"toggleTestElement()\"&gt;Show/Hide&lt;/a&gt;\n</code></pre>\n\n<p>My JS as  I would like to have it, although pure jQuery would be nice:</p>\n\n<pre><code>&lt;script&gt;\n    function toggleTestElement(){\n        if (document.getElementById('testElement').***IS_VISIBLE***) {\n            $('#testElement').fadeOut('fast');\n        }\n        else{\n            $('#testElement').fadeIn('fast');\n        }\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>Any help gratefully received..</p>\n",
            "last_activity_date": 1420851278,
            "question_id": 8774089,
            "score": 158,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Detect if an element is visible"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Check out the <a href=\"http://www.w3schools.com/jsref/jsref_substring.asp\" rel=\"nofollow\">substring function</a>.</p>\n\n<p>To get the last character:</p>\n\n<pre><code>id.substring(id.length - 1, id.length);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You'll want to use the Javascript string method <code>.substr()</code> combined with the <code>.length</code> property.</p>\n\n<pre><code>var id = \"ctl03_Tabs1\";\nvar lastFive = id.substr(id.length - 5); // =&gt; \"Tabs1\"\nvar lastChar = id.substr(id.length - 1); // =&gt; \"1\"\n</code></pre>\n\n<p>This gets the characters starting at id.length - 5 and, since the second argument for .substr() is omitted, continues to the end of the string.</p>\n\n<p>If you're simply looking to find the characters after the underscore, you could use this:</p>\n\n<pre><code>var tabId = id.split(\"_\").pop(); // =&gt; \"Tabs1\"\n</code></pre>\n\n<p>This splits the string into an array on the underscore and then \"pops\" the last element off the array (which is the string you want).</p>\n",
                    "is_accepted": true,
                    "score": 275
                },
                {
                    "body": "<p>Getting the last character is easy, as you can treat strings as an array:</p>\n\n<pre><code>var lastChar = id[id.length-1];\n</code></pre>\n\n<p>To get a section of a string, you can use the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/substr\">substr</a> function or the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/substring\">substring</a> function:</p>\n\n<pre><code>id.substr(id.length-1); //get the last character\nid.substr(2); //get the characters from the 3rd character on\nid.substr(2, 1); //get the 3rd character\nid.susbstr(2, 2); //get the 3rd and 4th characters\n</code></pre>\n\n<p>The difference between <code>substr</code> and <code>substring</code> is how the second (optional) parameter is treated. In <code>substr</code>, it's the amount of characters from the index (the first parameter). In <code>substring</code>, it's the index of where the character slicing should end.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Following script shows the result for get last 5 characters and last 1 character in a string  using JavaScript:</p>\n\n<pre><code>var testword='ctl03_Tabs1';\nvar last5=testword.substr(-5); //Get 5 characters\nvar last1=testword.substr(-1); //Get 1 character\n</code></pre>\n\n<p>Output :</p>\n\n<blockquote>\n  <p>Tabs1 // Got 5 characters</p>\n  \n  <p>1 // Got 1 character</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Dont use <code>.substr()</code>. Use the <code>.slice()</code> method instead, its cross browser compatible (see IE).</p>\n\n<pre><code>var id = \"ctl03_Tabs1\";\nid.slice(-5); //Outputs: Tabs1\nid.slice(-1); //Outputs: 1\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/6918943/substr-with-negative-value-not-working-in-ie\">substr() with negative value not working in IE</a></p>\n",
                    "is_accepted": false,
                    "score": 163
                },
                {
                    "body": "<p>There is no need to use <code>substr</code> method to get a single char of a string!</p>\n\n<p>taking the example of Jamon Holmgren we can change substr method and simply specify the array position:</p>\n\n<pre><code>var id = \"ctl03_Tabs1\";\nvar lastChar = id[id.length - 1]; // =&gt; \"1\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This one will remove the comma if it is the last character in the string..</p>\n\n<pre><code>var str = $(\"#ControlId\").val();\n\nif(str.substring(str.length-1)==',') {\n\n  var stringWithoutLastComma = str.substring(0,str.length-1);    \n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have </p>\n\n<pre><code>var id=\"ctl03_Tabs1\";\n</code></pre>\n\n<p>Using JavaScript, how might I get the last five characters or last character?</p>\n",
            "last_activity_date": 1396531110,
            "question_id": 5873810,
            "score": 145,
            "tags": [
                "javascript"
            ],
            "title": "How can I get last characters of a string using JavaScript"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You'll have to use localstorage or cookies to manage that.  Here's a quick and dirty solution that can be vastly improved, but may give you a starting point:</p>\n\n<pre><code>$(function() { \n  //for bootstrap 3 use 'shown.bs.tab' instead of 'shown' in the next line\n  $('a[data-toggle=\"tab\"]').on('shown', function (e) {\n    //save the latest tab; use cookies if you like 'em better:\n    localStorage.setItem('lastTab', $(e.target).attr('id'));\n  });\n\n  //go to the latest tab, if it exists:\n  var lastTab = localStorage.getItem('lastTab');\n  if (lastTab) {\n      $('#'+lastTab).tab('show');\n  }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 50
                },
                {
                    "body": "<p>Got this to work using cookies and also removing the 'active' class from any other tabs and tab panes... and adding the 'active' class to the current tab and tab pane.</p>\n\n<p>I'm sure there's a better way to do this, but this appears to work in this case.</p>\n\n<p>Requires the jQuery cookie plugin.</p>\n\n<pre><code>$(function() { \n  $('a[data-toggle=\"tab\"]').on('shown', function(e){\n    //save the latest tab using a cookie:\n    $.cookie('last_tab', $(e.target).attr('href'));\n  });\n\n  //activate latest tab, if it exists:\n  var lastTab = $.cookie('last_tab');\n  if (lastTab) {\n      $('ul.nav-tabs').children().removeClass('active');\n      $('a[href='+ lastTab +']').parents('li:first').addClass('active');\n      $('div.tab-content').children().removeClass('active');\n      $(lastTab).addClass('active');\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>To prevent the page flashing on the first tab and then the tab that was saved by the cookie (this occurs when you determine the class \"active\" by default in the first TAB)</p>\n\n<p>Remove the class \"active\" of tabs and panes like: </p>\n\n<pre><code>&lt;ul class=\"nav nav-tabs\"&gt;\n&lt;div id=\"p1\" class=\"tab-pane\"&gt;\n</code></pre>\n\n<p>Put the script below to set first tab like default (Requires the jQuery cookie plugin)</p>\n\n<pre><code>    $(function() { \n        $('a[data-toggle=\"tab\"]').on('shown', function(e){\n            //save the latest tab using a cookie:\n            $.cookie('last_tab', $(e.target).attr('href'));\n        });\n        //activate latest tab, if it exists:\n        var lastTab = $.cookie('last_tab');\n        if (lastTab) {\n            $('a[href=' + lastTab + ']').tab('show');\n        }\n        else\n        {\n            // Set the first tab if cookie do not exist\n            $('a[data-toggle=\"tab\"]:first').tab('show');\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>All other answers are correct. This answer will take into account the fact that one might have multiple <code>ul.nav.nav-pills</code> or <code>ul.nav.nav-tabs</code> on the same page. In this case, the previous answers will fail.</p>\n\n<p>Still using <code>localStorage</code> but with a stringified <code>JSON</code> as the value. Here is the code:</p>\n\n<pre><code>$(function() {\n  var json, tabsState;\n  $('a[data-toggle=\"pill\"], a[data-toggle=\"tab\"]').on('shown', function(e) {\n    var href, json, parentId, tabsState;\n\n    tabsState = localStorage.getItem(\"tabs-state\");\n    json = JSON.parse(tabsState || \"{}\");\n    parentId = $(e.target).parents(\"ul.nav.nav-pills, ul.nav.nav-tabs\").attr(\"id\");\n    href = $(e.target).attr('href');\n    json[parentId] = href;\n\n    return localStorage.setItem(\"tabs-state\", JSON.stringify(json));\n  });\n\n  tabsState = localStorage.getItem(\"tabs-state\");\n  json = JSON.parse(tabsState || \"{}\");\n\n  $.each(json, function(containerId, href) {\n    return $(\"#\" + containerId + \" a[href=\" + href + \"]\").tab('show');\n  });\n\n  $(\"ul.nav.nav-pills, ul.nav.nav-tabs\").each(function() {\n    var $this = $(this);\n    if (!json[$this.attr(\"id\")]) {\n      return $this.find(\"a[data-toggle=tab]:first, a[data-toggle=pill]:first\").tab(\"show\");\n    }\n  });\n});\n</code></pre>\n\n<p>This bit can be used on the entire app over all pages and will work for both tabs and pills.\nAlso, <strong>make sure the tabs or pills are not active by default</strong>, otherwise you will see a flicker effect at page load.</p>\n\n<p><strong>Important</strong>: Make sure the parent <code>ul</code> has an id. Thanks Alain</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Best Optiion use this technique :)</p>\n\n<pre><code>$(function() { \n  //for bootstrap 3 use 'shown.bs.tab' instead of 'shown' in the next line\n  $('a[data-toggle=\"tab\"]').on('click', function (e) {\n    //save the latest tab; use cookies if you like 'em better:\n    localStorage.setItem('lastTab', $(e.target).attr('href'));\n  });\n\n  //go to the latest tab, if it exists:\n  var lastTab = localStorage.getItem('lastTab');\n\n  if (lastTab) {\n      $('a[href=\"'+lastTab+'\"]').click();\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Want fading effect? Updated version of @Oktav's code:</p>\n\n<ol>\n<li>For Bootstrap 3</li>\n<li>Sets up the classes on the li and tab's div to enable fading to work properly. Note that all of the content divs need <code>class=\"tab-pane fade\"</code></li>\n</ol>\n\n<p>Code:\n    </p>\n\n<pre><code>// See http://stackoverflow.com/a/16984739/64904\n// Updated by Larry to setup for fading\n$(function() {\n  var json, tabsState;\n  $('a[data-toggle=\"pill\"], a[data-toggle=\"tab\"]').on('shown.bs.tab', function(e) {\n    var href, json, parentId, tabsState;\n    tabsState = localStorage.getItem(\"tabs-state\");\n    json = JSON.parse(tabsState || \"{}\");\n    parentId = $(e.target).parents(\"ul.nav.nav-pills, ul.nav.nav-tabs\").attr(\"id\");\n    href = $(e.target).attr('href');\n    json[parentId] = href;\n    return localStorage.setItem(\"tabs-state\", JSON.stringify(json));\n  });\n  tabsState = localStorage.getItem(\"tabs-state\");\n  json = JSON.parse(tabsState || \"{}\");\n  $.each(json, function(containerId, href) {\n    var a_el = $(\"#\" + containerId + \" a[href=\" + href + \"]\");\n    $(a_el).parent().addClass(\"active\");\n    $(href).addClass(\"active in\");\n    return $(a_el).tab('show');\n  });\n  $(\"ul.nav.nav-pills, ul.nav.nav-tabs\").each(function() {\n    var $this = $(this);\n    if (!json[$this.attr(\"id\")]) {\n      var a_el = $this.find(\"a[data-toggle=tab]:first, a[data-toggle=pill]:first\"),\n          href = $(a_el).attr('href');\n      $(a_el).parent().addClass(\"active\");\n      $(href).addClass(\"active in\");\n      return $(a_el).tab(\"show\");\n    }\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I prefer storing the selected tab in the hashvalue of the window. This also enables sending links to colleagues, who than see \"the same\" page. The trick is to change the hash of the location when another tab is selected. If you already use # in your page, possibly the hash tag has to be split. In my app, I use \":\" as hash value separator.</p>\n\n<pre><code>&lt;ul class=\"nav nav-tabs\" id=\"myTab\"&gt;\n    &lt;li class=\"active\"&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#profile\"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#messages\"&gt;Messages&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#settings\"&gt;Settings&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div class=\"tab-content\"&gt;\n    &lt;div class=\"tab-pane active\" id=\"home\"&gt;home&lt;/div&gt;\n    &lt;div class=\"tab-pane\" id=\"profile\"&gt;profile&lt;/div&gt;\n    &lt;div class=\"tab-pane\" id=\"messages\"&gt;messages&lt;/div&gt;\n    &lt;div class=\"tab-pane\" id=\"settings\"&gt;settings&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    $('#myTab a').click(function (e) {\n        e.preventDefault()\n        $(this).tab('show')\n    });\n\n    // store the currently selected tab in the hash value\n    $(\"ul.nav-tabs &gt; li &gt; a\").on(\"shown.bs.tab\", function (e) {\n        var id = $(e.target).attr(\"href\").substr(1);\n        window.location.hash = id;\n    });\n\n    // on load of the page: switch to the currently selected tab\n    var hash = window.location.hash;\n    $('#myTab a[href=\"' + hash + '\"]').tab('show');\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I suggest the following changes</p>\n\n<ol>\n<li><p>Use a plugin like <a href=\"http://amplifyjs.com/api/store/\" rel=\"nofollow\">amplify.store</a> which provides a\ncrossbrowser/ crossplatform localstorage API with builtin fallbacks.</p></li>\n<li><p>Target the tab that needs to be saved like <code>$('#div a[data-toggle=\"tab\"]')</code> so as to extend this functionality to multiple tab containers that exist on the same page.</p></li>\n<li><p>Use a unique identifier <code>(url ??)</code> to save and restore last used tabs across multiple pages.</p></li>\n</ol>\n\n<hr>\n\n<pre><code>$(function() { \n  $('#div a[data-toggle=\"tab\"]').on('shown', function (e) {\n    amplify.store(window.location.hostname+'last_used_tab', $(this).attr('href'));\n  });\n\n  var lastTab = amplify.store(window.location.hostname+'last_used_tab');\n  if (lastTab) {\n    $(\"#div a[href=\"+ lastTab +\"]\").tab('show');\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had tabs in multiple pages and localStorage keeps lastTab from previous pages as well, so for next page, since it had previous page's lastTab in storage, it didn't find any matching tab here, so nothing was being displayed. I modified it this way.</p>\n\n<pre><code>$(document).ready(function(){\n    //console.log($('a[data-toggle=\"tab\"]:first').tab('show'))\n    $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function () {\n        //save the latest tab; use cookies if you like 'em better:\n        localStorage.setItem('lastTab', $(this).attr('href'));\n    });\n\n    //go to the latest tab, if it exists:\n    var lastTab = localStorage.getItem('lastTab');\n    if ($('a[href=' + lastTab + ']').length &gt; 0) {\n        $('a[href=' + lastTab + ']').tab('show');\n    }\n    else\n    {\n        // Set the first tab if cookie do not exist\n        $('a[data-toggle=\"tab\"]:first').tab('show');\n    }\n})\n</code></pre>\n\n<p><strong>edit:</strong> I've noticed that I'll have to have different <code>lastTab</code> variable names for different pages, otherwise, they'll always overwrite each other. e.g. <code>lastTab_klanten</code>, <code>lastTab_bestellingen</code> etc. for two different pages <code>klanten</code> and <code>bestellingen</code> both having data displayed in tabs.</p>\n\n<pre><code>$(document).ready(function(){\n    //console.log($('a[data-toggle=\"tab\"]:first').tab('show'))\n    $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function () {\n        //save the latest tab; use cookies if you like 'em better:\n        localStorage.setItem('lastTab_klanten', $(this).attr('href'));\n    });\n\n    //go to the latest tab, if it exists:\n    var lastTab_klanten = localStorage.getItem('lastTab_klanten');\n    if (lastTab_klanten) {\n        $('a[href=' + lastTab_klanten + ']').tab('show');\n    }\n    else\n    {\n        // Set the first tab if cookie do not exist\n        $('a[data-toggle=\"tab\"]:first').tab('show');\n    }\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I made it works with similar solution as @dgabriel, in this case, the links <code>&lt;a&gt;</code> don't need <code>id</code>, it identify the current tab based on the position.</p>\n\n<pre><code>$(function() { \n  $('a[data-toggle=\"tab\"]').on('shown', function (e) {\n    var indexTab = $('a[data-toggle=\"tab\"]').index($(this)); // this: current tab anchor\n    localStorage.setItem('lastVisitedTabIndex', indexTab);\n  });\n\n  //go to the latest tab, if it exists:\n  var lastIndexTab  = localStorage.getItem('lastVisitedTabIndex');\n  if (lastIndexTab) {\n      $('a[data-toggle=\"tab\"]:eq(' + lastIndexTab + ')').tab('show');\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm currently using tabs with Twitter Bootstrap and want to select the same tab after a user has posted data and the page reloads.</p>\n\n<p>How is this done?</p>\n\n<p>My current call to inti the tabs looks like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n$(document).ready(function() {\n\n    $('#profileTabs a:first').tab('show');\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>My tabs:</p>\n\n<pre><code>&lt;ul id=\"profileTabs\" class=\"nav nav-tabs\"&gt;\n    &lt;li class=\"active\"&gt;&lt;a href=\"#profile\" data-toggle=\"tab\"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#about\" data-toggle=\"tab\"&gt;About Me&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#match\" data-toggle=\"tab\"&gt;My Match&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n",
            "last_activity_date": 1421074015,
            "question_id": 10523433,
            "score": 44,
            "tags": [
                "javascript",
                "jquery",
                "twitter-bootstrap"
            ],
            "title": "How do I keep the current tab active with twitter bootstrap after a page reload?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>While there are other ways to do this ASP.net does allow you to use multiple form tags so long as they are not all rendered - so if you use a multi view to only display the relevant content you can use multiple forms.</p>\n\n<p>It tends to clean up validation and submit handling quite a bit. </p>\n\n<p><hr /></p>\n\n<p>Alternatively jquery does allow :visible to be added to your selector, so you could potentially only run the selector on visible elements and sidestep the issue that way depending on how they are hidden. </p>\n\n<blockquote>\n  <p>How :visible is calculated was changed in jQuery 1.3.2. Element assumed as visible if it and its parents consumes space in document. CSS visibility isn't taken into account. The release notes outline the changes in more detail.</p>\n</blockquote>\n\n<p><hr /></p>\n\n<p>Here is a better / simpler solution from another post on stack overflow-</p>\n\n<p>Apparently the validation plug-in allows you to specify :visible in your rules. Here is the post-</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1316602/advanced-jquery-validation-avoiding-validations-on-certain-conditions/1316818#1316818\">http://stackoverflow.com/questions/1316602/advanced-jquery-validation-avoiding-validations-on-certain-conditions/1316818#1316818</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The \"required\" declarations inside of the validate.rules hash do not have to be statically declared as \"true\". You can actually supply an anonymous function instead which can check for the visibility of something and return true or false depending on the answer.</p>\n\n<pre><code>$('form').validate({\nrules: {\n  rightform_input1: { \n    required: function(){\n              return $('#leftform').css(\"visibility\") !== \"hidden\"\n              } },\n  rightform_input2: {\n    required: function(){\n              return $('#leftform').css(\"visibility\") !== \"hidden\"\n              } }\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>Obsolete notice:</strong><br>\nThis answer refers to an extremely old version of the <a href=\"http://jqueryvalidation.org/\" rel=\"nofollow\">jQuery.validate()</a> plugin (version 1.5) and is now obsolete as the plugin provides an official API for solving this problem. See the <a href=\"http://jqueryvalidation.org/rules\" rel=\"nofollow\"><code>.rules()</code> documentation</a> for the current approach to solving this. I'm leaving  this answer as-is to help anyone who must maintain a legacy site that is unable to upgrade to the latest versions of jQuery and jQuery.validate().</p>\n\n<hr>\n\n<p>This uses a feature of the validator that is not well documented in the API (and by this I mean it isn't documented at all), however since it is a fundamental part of how the validator works, it is not likely to be removed even if it is undocumented.</p>\n\n<p>Once you've initialized the jQuery validator, you can get access to the validator object again by calling the <code>validate()</code> method on the form object you applied the validator to. This validator object has a <code>settings</code> property, which stores the default settings, combined with the settings you applied to it in initialization. </p>\n\n<p>Assuming I initialize the validator like this:</p>\n\n<pre><code>$('form').validate({\n    rules: {\n        leftform_input1: { required: true },\n        leftform_input2: { required: true }\n    },\n    messages: {\n        leftform_input1: \"Field is required\",\n        leftform_input2: \"Field is required\"\n    }\n});\n</code></pre>\n\n<p>I can then get those exact settings out of the validator by doing the following:</p>\n\n<pre><code>var settings = $('form').validate().settings;\n</code></pre>\n\n<p>I can then easily work with this settings object to add or remove validators for the form.</p>\n\n<p>This is how you would remove validation rules:</p>\n\n<pre><code>var settings = $('form').validate().settings;\ndelete settings.rules.rightform_input1;\ndelete settings.messages.rightform_input1;\n</code></pre>\n\n<p>And this is how you would add validation rules:</p>\n\n<pre><code>var settings = $('form').validate().settings;\nsettings.rules.leftform_input1 = {required: true};\nsettings.messages.leftform_input1 = \"Field is required\";\n</code></pre>\n\n<hr>\n\n<p>Here is a working solution for the scenario in my question. I use jQuery's <code>extend()</code> method to overwrite the <code>rules</code> and <code>messages</code> properties of the <code>validate</code> object, which is how I toggle between the two panels.</p>\n\n<pre><code>$('#toggleSwitch').click(function() {\n    var settings = $('form').validate().settings;\n    var leftForm = $('#leftform');\n    var rightForm = $('#rightform');\n\n    if (leftForm.css(\"visibility\") !== \"hidden\") {\n        leftForm.css(\"visibility\", \"hidden\");\n        rightForm.css(\"visibility\", \"visible\");\n        $.extend(settings, {\n            rules: {\n                rightform_input1: { required: true },\n                rightform_input2: { required: true }\n            },\n            messages: {\n                rightform_input1: \"Field is required\",\n                rightform_input2: \"Field is required\"\n            }\n        });\n    } else {\n        rightForm.css(\"visibility\", \"hidden\");\n        leftForm.css(\"visibility\", \"visible\");\n        $.extend(settings, {\n            rules: {\n                leftform_input1: { required: true },\n                leftform_input2: { required: true }\n            },\n            messages: {\n                leftform_input1: \"Field is required\",\n                leftform_input2: \"Field is required\"\n            }\n        });\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<pre><code>$('#form_id').validate();//empty rules\n//add rules/message to form element\n$('#form_id #inputId').rules(\"add\", {\n    required        : true,                             \n    messages        : {\n        required    : 'Add your required message'\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wrote small function for editting rules (only required).</p>\n\n<pre><code>        $.editRules = function($array, $type) {\n            var settings = $('#signupForm').validate().settings;\n            $.each($array, function($k, $v) {\n                settings.rules[$v] = {required: ($type == 'add' ? true : false)};\n            });\n        };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you want to call validate again with new settings (rules,messages ... etc.)\ncall</p>\n\n<pre><code>$('#formid').removeData('validator')\n</code></pre>\n\n<p>This will remove validation for the form then initialize it again with the new settings</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p><strong>Note:</strong><br>\nThis question refers to a very old version of <a href=\"http://jqueryvalidation.org/\" rel=\"nofollow\">jQuery.validate()</a> (version 1.5). This plugin now provides a built-in solution for doing this: the <a href=\"http://jqueryvalidation.org/rules\" rel=\"nofollow\"><code>.rules()</code> method</a> that should be used instead. I'm leaving this question and answer in its original form for historical purposes for anyone who needs to maintain a legacy site that is unable to upgrade to the latest versions of jQuery and jQuery.validate().</p>\n\n<hr>\n\n<p>I have a form that toggles what input elements are visible. I want to validate <strong>only</strong> the visible elements on the form. </p>\n\n<p>I'm having a hard time getting this to function correctly. I want to disable validators for non-visible elements and I can't seem to figure out the best way to do this. Any insight to what may be wrong with my code, or my approach would be appreciated.</p>\n\n<p>When visibility is toggled, I've tried a few things:</p>\n\n<ul>\n<li>Calling <code>$(\"form\").rules(\"remove\")</code> to clear all existing validation rules. This throws an \"undefined\" JavaScript exception.</li>\n<li>Calling <code>$(\"form\").validation(...options...)</code> for the visible elements, hoping this would overwrite the rules. This only allows the first group that is validated to work. The second panel can not be validated.</li>\n<li>Unbinding the submit handler before calling the new <code>validation()</code> method. This didn't do what I would have thought. It removes all validation (seemingly) permanently and the form submits without validation.</li>\n<li>Clearing out the validation object with <code>$.removeData($('form'), 'validator')</code> before trying to call the validator again. This also doesn't work.</li>\n<li>This is in an ASP.NET site, so using multiple <code>&lt;form /&gt;</code> tags is out of the question since that would break the page.</li>\n</ul>\n\n<p>I'm sort of stumped on how I can make this work. You can see a complete working demo of what I have at <a href=\"http://jsbin.com/ucibe3\" rel=\"nofollow\"><code>http://jsbin.com/ucibe3</code></a>, or edit it at <a href=\"http://jsbin.com/ucibe3/edit\" rel=\"nofollow\"><code>http://jsbin.com/ucibe3/edit</code></a>. I've tried to strip it down to <em>just</em> the code that causes the bug.</p>\n\n<p>Here are the key pieces of my code (use above links for complete working page)</p>\n\n<p>HTML:  </p>\n\n<pre><code>&lt;td id=\"leftform\"&gt;\n    Left Form&lt;br /&gt;\n    Input 1: &lt;input type=\"text\" name=\"leftform_input1\" /&gt;&lt;br /&gt;\n    Input 2: &lt;input type=\"text\" name=\"leftform_input2\" /&gt;&lt;br /&gt;\n    &lt;input type=\"submit\" name=\"leftform_submit\" value=\"Submit Left\" /&gt;\n&lt;/td&gt;\n&lt;td id=\"rightform\" style=\"visibility:hidden\"&gt;\n    Right Form&lt;br /&gt;\n    Input 1: &lt;input type=\"text\" name=\"rightform_input1\" /&gt;&lt;br /&gt;\n    Input 2: &lt;input type=\"text\" name=\"rightform_input2\" /&gt;&lt;br /&gt;\n    &lt;input type=\"submit\" name=\"rightform_submit\" value=\"Submit Right\" /&gt;\n&lt;/td&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>$('#toggleSwitch').click(function() {\n    if ($('#leftform').css(\"visibility\") !== \"hidden\") {\n        $('#leftform').css(\"visibility\", \"hidden\");\n        $('#rightform').css(\"visibility\", \"visible\");\n        $('form').validate({\n            rules: {\n                rightform_input1: { required: true },\n                rightform_input2: { required: true }\n            },\n            messages: {\n                rightform_input1: \"Field is required\",\n                rightform_input2: \"Field is required\"\n            }\n        });\n    } else {\n        $('#rightform').css(\"visibility\", \"hidden\");\n        $('#leftform').css(\"visibility\", \"visible\");\n        $('form').validate({\n            rules: {\n                leftform_input1: { required: true },\n                leftform_input2: { required: true }\n            },\n            messages: {\n                leftform_input1: \"Field is required\",\n                leftform_input2: \"Field is required\"\n            }\n        });\n    }\n});\n</code></pre>\n",
            "last_activity_date": 1416256253,
            "question_id": 1510165,
            "score": 31,
            "tags": [
                "javascript",
                "jquery",
                "validation"
            ],
            "title": "How can I add, remove, or swap jQuery validation rules from a page?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Even for all of the most modern  browers there is no cross-browser way to achieve this. You would have to route all of your css style changes through a function which could trigger event listeners. This would be the cleanest method.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Edit 4:</strong> Live Demo</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function() {\r\n  $('#toggleColor').on('click', function() {\r\n    $(this).toggleClass('darkblue');\r\n  }).attrchange({\r\n    trackValues: true,\r\n    callback: function(event) {\r\n      $(this).html(\"&lt;ul&gt;&lt;li&gt;&lt;span&gt;Attribute Name: &lt;/span&gt;\" + event.attributeName + \"&lt;/li&gt;&lt;li&gt;&lt;span&gt;Old Value: &lt;/span&gt;\" + event.oldValue + \"&lt;/li&gt;&lt;li&gt;&lt;span&gt;New Value: &lt;/span&gt;\" + event.newValue + \"&lt;/li&gt;&lt;/ul&gt;\");\r\n    }\r\n  });\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  font-size: 12px;\r\n}\r\n#toggleColor {\r\n  height: 70px;\r\n  width: 300px;\r\n  padding: 5px;\r\n  border: 1px solid #c2c2c2;\r\n  background-color: #DBEAF9;\r\n}\r\n#toggleColor span {\r\n  font-weight: bold;\r\n}\r\n#toggleColor.darkblue {\r\n  background-color: #1A9ADA;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;script src=\"http://meetselva.github.io/attrchange/javascripts/attrchange.js\"&gt;&lt;/script&gt;\r\n&lt;p&gt;Click below div to toggle class darkblue.&lt;/p&gt;\r\n&lt;div id=\"toggleColor\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Edit 3:</strong> I have put all this together as a plugin that can be downloaded from git <a href=\"https://github.com/meetselva/attrchange\" rel=\"nofollow\"><strong>attrchange</strong></a> and here is the <a href=\"http://meetselva.github.com/attrchange/\" rel=\"nofollow\"><strong>demo page</strong></a>. </p>\n\n<p><strong>Edit 2:</strong></p>\n\n<ol>\n<li>Fix for propertName in IE7 &amp; IE8</li>\n</ol>\n\n<p><strong>Edit 1:</strong> </p>\n\n<ol>\n<li>Handle multiple elements </li>\n<li>Ordered the conditions as MutationObserver, DOMAttrModified and onpropertychange for better implementation.</li>\n<li>Added modified Attribute Name to the callback.</li>\n</ol>\n\n<p>Thanks to @benvie for his feedback.</p>\n\n<p><strong>DEMO:</strong> <a href=\"http://jsfiddle.net/zFVyv/10/\" rel=\"nofollow\">http://jsfiddle.net/zFVyv/10/</a> (Tested in FF 12, Chrome 19 and IE 7.)</p>\n\n<pre><code>$(function() {\n    (function($) {\n        var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n\n        function isDOMAttrModifiedSupported() {\n            var p = document.createElement('p');\n            var flag = false;\n\n            if (p.addEventListener) p.addEventListener('DOMAttrModified', function() {\n                flag = true\n            }, false);\n            else if (p.attachEvent) p.attachEvent('onDOMAttrModified', function() {\n                flag = true\n            });\n            else return false;\n\n            p.setAttribute('id', 'target');\n\n            return flag;\n        }\n\n        $.fn.attrchange = function(callback) {\n            if (MutationObserver) {\n                var options = {\n                    subtree: false,\n                    attributes: true\n                };\n\n                var observer = new MutationObserver(function(mutations) {\n                    mutations.forEach(function(e) {\n                        callback.call(e.target, e.attributeName);\n                    });\n                });\n\n                return this.each(function() {\n                    observer.observe(this, options);\n                });\n\n            } else if (isDOMAttrModifiedSupported()) {\n                return this.on('DOMAttrModified', function(e) {\n                    callback.call(this, e.attrName);\n                });\n            } else if ('onpropertychange' in document.body) {\n                return this.on('propertychange', function(e) {\n                    callback.call(this, window.event.propertyName);\n                });\n            }\n        }\n    })(jQuery);\n\n    $('.test').attrchange(function(attrName) {\n        alert('Attribute: ' + attrName + ' modified ');\n    }).css('height', 100);\n\n});\n</code></pre>\n\n<p><strong>Ref:</strong> </p>\n\n<ol>\n<li><a href=\"http://stackoverflow.com/a/4562426/297641\">Detect if DOMAttrModified supported</a></li>\n<li><a href=\"http://stackoverflow.com/a/10466236/297641\">DOMAttrModified for chrome</a></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/DOM_Mutation_Observers\" rel=\"nofollow\">Mutation Observer</a></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/Mutation_events\" rel=\"nofollow\">Why should we avoid using Mutation events?</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ie/ms536956%28v=vs.85%29.aspx\" rel=\"nofollow\">onPropertyChange IE</a></li>\n</ol>\n\n<blockquote>\n  <p>Mutation Observers is the proposed replacement for mutation events in DOM4. They are expected to be included in Firefox 14 and Chrome 18</p>\n</blockquote>\n\n<p><strong>Browser Support:</strong></p>\n\n<p><code>onpropertychange</code> - is supported in IE (tested in IE 7)</p>\n\n<p><code>DOMAttrModified</code>  - is supported in IE 9, FF and Opera</p>\n\n<p><code>MutationObservers</code>   - is very new and it worked fine in <a href=\"http://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" rel=\"nofollow\">Chrome 18</a>. Not sure how far it is supported and yet to be tested in Safari. </p>\n\n<p>Thanks <a href=\"http://stackoverflow.com/questions/10868104/can-you-have-a-javascript-hook-trigger-after-a-dom-elements-style-object-change/11004907#comment14381951_11004907\">@benvie</a> on adding info about WebkitMutationObserver</p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p><strong>EDIT2:</strong></p>\n\n<p>If you still want to use <code>mutation observer</code>, use this library: <a href=\"http://code.google.com/p/mutation-summary/\" rel=\"nofollow\">mutation-summary</a>\n<hr />\n<strong>EDIT:</strong></p>\n\n<p>As I said in my answer below and thanks to Vega for his comment, using things such as <code>object.watch</code> or <code>mutation observers</code> are not recommended for using in large apps. this is actual quote from <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/watch\" rel=\"nofollow\">MDN</a>:</p>\n\n<blockquote>\n  <p>Generally you should avoid using <code>watch()</code> and <code>unwatch()</code> when\n  possible. These two methods are implemented only in Gecko, and they're\n  intended primarily for debugging use. In addition, <strong>using watchpoints</strong>\n  has a serious negative impact on performance, which is especially true\n  when used on <strong>global objects</strong>, such as window. You can usually use\n  <strong><em>setters</em></strong> and <strong><em>getters</em></strong> or <strong><em>proxies</em></strong> instead. See Compatibility for details.</p>\n  \n  <h2>Warning</h2>\n</blockquote>\n\n<p>So if cross-browser compatibility is in your check list, Again, I highly suggest overriding <code>setter</code>s and <code>getter</code>s of <code>style</code> object.\n<hr />\nuse <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/watch\" rel=\"nofollow\"><code>object.watch</code></a> and have these in mind for a cross-browser solution:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">Javascript Object.Watch for all browsers?</a></li>\n<li><a href=\"https://gist.github.com/384583\" rel=\"nofollow\">object.watch polyfill</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1269633/watch-for-object-properties-changes-in-javascript\">Watch for object properties changes in JavaScript</a></li>\n</ul>\n\n<p>You may override <code>getter</code> and <code>setter</code> methods of element's <code>style</code> object too.</p>\n\n<p>There is a jQuery plugin available for this, <a href=\"http://darcyclarke.me/dev/watch/\" rel=\"nofollow\">jQuery watch</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In an answer to a <a href=\"http://stackoverflow.com/q/2157963/1081234\">similar question</a>, it was suggested that if you know that style-setting interactions would be performed via a standard interface (i.e. <em>always</em> using jQuery etc.) it was suggested that custom events be fired whenever the library method is called.</p>\n\n<p>This would allow for a broader support matrix but would leave any property change ignored if performed without using the library method. It also appears that such an approach is not applicable to <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Working_with_Objects#Defining_getters_and_setters\" rel=\"nofollow\">native setters</a> as they cannot always be relied on.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have found this little plugin that does exactly that and it can be changed to add any mutation you wish... Even scrollHeight change listener.</p>\n\n<p>The plugin: <a href=\"http://www.jqui.net/jquery-projects/jquery-mutate-official/\" rel=\"nofollow\">http://www.jqui.net/jquery-projects/jquery-mutate-official/</a></p>\n\n<p>here is the demo:\n<a href=\"http://www.jqui.net/demo/mutate/\" rel=\"nofollow\">http://www.jqui.net/demo/mutate/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use <a href=\"http://meetselva.github.io/attrchange/\" rel=\"nofollow\">attrchange jQuery plugin</a>. The main function of the plugin is to bind a listener function on attribute change of HTML elements.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>An element has a javascript <code>style</code> object which contains the different names and values of css styles. I'd like to trigger a function every time this object changes <strong>without use of polling</strong>. Is there any way to do this in a way that is cross-browser compatible and would work reliably with third party code (because let's say you're providing a drop-in script)? Binding a javascript event like <code>DOMAttrModified</code> or <code>DOMSubtreeModified</code> won't suffice because they don't work in Chrome.</p>\n",
            "last_activity_date": 1413160567,
            "question_id": 10868104,
            "score": 25,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "javascript-events"
            ],
            "title": "Can you have a javascript hook trigger after a DOM element&#39;s style object changes?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The ngRoute module is no longer part of the core <code>angular.js</code> file. If you are continuing to use $routeProvider then you will now need to include <code>angular-route.js</code> in your HTML:</p>\n\n<pre><code>&lt;script src=\"angular.js\"&gt;\n&lt;script src=\"angular-route.js\"&gt;\n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/ngRoute\">API Reference</a></p>\n\n<p>You also have to add <code>ngRoute</code> as a dependency for your application:</p>\n\n<pre><code>var app = angular.module('MyApp', ['ngRoute', ...]);\n</code></pre>\n\n<p>If instead you are planning on using <a href=\"https://github.com/angular-ui/ui-router\"><code>angular-ui-router</code></a> or the like then just remove the <code>$routeProvider</code>  dependency from your module <code>.config()</code> and substitute it with the relevant provider of choice (e.g. <code>$stateProvider</code>). You would then use the <code>ui.router</code> dependency:</p>\n\n<pre><code>var app = angular.module('MyApp', ['ui.router', ...]);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 296
                },
                {
                    "body": "<p>Option 1:\nEither include this in your JS file: <code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0rc1/angular-route.min.js\"&gt;&lt;/script&gt;</code></p>\n\n<p>Option 2:\nor just use the URL to download '<a href=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0rc1/angular-route.min.js\">angular-route.min.js</a>' to your local.</p>\n\n<p>and then (whatever option you choose) add this 'ngRoute' as dependency.</p>\n\n<p>explained:\n<code>var app = angular.module('myapp', ['ngRoute']);</code></p>\n\n<p>Cheers!!!</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>In my case it was because the file was minified with wrong scope. Use Array!</p>\n\n<pre><code>app.controller('StoreController', ['$http', function($http) {\n    ...\n}]);\n</code></pre>\n\n<p>Coffee syntax:</p>\n\n<pre><code>app.controller 'StoreController', Array '$http', ($http) -&gt;\n  ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I received this error upon upgrading from AngularJS <strong>1.0.7</strong> to <strong>1.2.0rc1</strong>. </p>\n",
            "last_activity_date": 1403960689,
            "question_id": 18481863,
            "score": 148,
            "tags": [
                "javascript",
                "angularjs",
                "routes"
            ],
            "title": "Failed to instantiate module [$injector:unpr] Unknown provider: $routeProvider"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You can use the <a href=\"http://www.devguru.com/Technologies/Ecmascript/Quickref/arguments.html\" rel=\"nofollow\">arguments object property</a> inside the function.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Er - that would imply that you are invoking your function with arguments which aren't in the proper order... which I would not recommend.</p>\n\n<p>I would recommend instead feeding an object to your function like so:</p>\n\n<pre><code>function getData( props ) {\n    props = props || {};\n    props.params = props.params || {};\n    props.id = props.id || 1;\n    props.callback = props.callback || function(){};\n    alert( props.callback )\n};\n\ngetData( {\n    id: 3,\n    callback: function(){ alert('hi'); }\n} );\n</code></pre>\n\n<p>Benefits: </p>\n\n<ul>\n<li>you don't have to account for argument order</li>\n<li>you don't have to do type checking</li>\n<li>it's easier to define default values because no type checking is necessary</li>\n<li>less headaches. imagine if you added a fourth argument, you'd have to update your type checking every single time, and what if the fourth or consecutive are also functions?</li>\n</ul>\n\n<p>Drawbacks: </p>\n\n<ul>\n<li>time to refactor code</li>\n</ul>\n\n<p>If you have no choice, you could use a function to detect whether an object is indeed a function ( see last example ).</p>\n\n<p>Note: This is the proper way to detect a function:</p>\n\n<pre><code>function isFunction(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Function]\";\n}\n\nisFunction( function(){} )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>So use the typeof operator to determine if the second parameter is an Array or function.</p>\n\n<p>This can give some suggestions:\n<a href=\"http://www.planetpdf.com/developer/article.asp?ContentID=testing%5Ffor%5Fobject%5Ftypes%5Fin%5Fja\" rel=\"nofollow\">http://www.planetpdf.com/developer/article.asp?ContentID=testing_for_object_types_in_ja</a></p>\n\n<p>I am not certain if this is work or homework, so I don't want to give you the answer at the moment, but the typeof will help you determine it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You should check type of received parameters. Maybe you should use <code>arguments</code> array since second parameter can sometimes be 'parameters' and sometimes 'callback' and naming it parameters might be misleading.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think you want to use typeof() here:</p>\n\n<pre><code>function f(id, parameters, callback) {\n  console.log(typeof(parameters)+\" \"+typeof(callback));\n}\n\nf(\"hi\", {\"a\":\"boo\"}, f); //prints \"object function\"\nf(\"hi\", f, {\"a\":\"boo\"}); //prints \"function object\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Are you saying you can have calls like these:\ngetData(id, parameters);\ngetData(id, callback)?</p>\n\n<p>In this case you can't obviously rely on position and you have to rely on analysing the type:\ngetType() and then if necessary getTypeName()</p>\n\n<p>Check if the parameter in question is an array or a function.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can know how many <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Functions_and_function_scope/arguments\">arguments</a> were passed to your function and you can check if your second argument is a function or not:</p>\n\n<pre><code>function getData (id, parameters, callback) {\n  if (arguments.length == 2) { // if only two arguments were supplied\n    if (Object.prototype.toString.call(parameters) == \"[object Function]\") {\n      callback = parameters; \n    }\n  }\n  //...\n}\n</code></pre>\n\n<p>You can also use the arguments object in this way:</p>\n\n<pre><code>function getData (/*id, parameters, callback*/) {\n  var id = arguments[0], parameters, callback;\n\n  if (arguments.length == 2) { // only two arguments supplied\n    if (Object.prototype.toString.call(arguments[1]) == \"[object Function]\") {\n      callback = arguments[1]; // if is a function, set as 'callback'\n    } else {\n      parameters = arguments[1]; // if not a function, set as 'parameters'\n    }\n  } else if (arguments.length == 3) { // three arguments supplied\n      parameters = arguments[1];\n      callback = arguments[2];\n  }\n  //...\n}\n</code></pre>\n\n<p>If you are interested, give a look to this <a href=\"http://ejohn.org/blog/javascript-method-overloading/\">article</a> by John Resig, about a technique to simulate method overloading on JavaScript.</p>\n",
                    "is_accepted": true,
                    "score": 132
                },
                {
                    "body": "<p>Can you override the function?  Will this not work:</p>\n\n<pre><code>function doSomething(id){}\nfunction doSomething(id,parameters){}\nfunction doSomething(id,parameters,callback){}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>If your problem is only with function overloading (you need to check if 'parameters' parameter is 'parameters' and not 'callback'), i would recommend you don't bother about argument type and<br />\nuse <a href=\"http://msmvps.com/blogs/luisabreu/archive/2009/09/25/simplifying-the-api-of-your-js-methods.aspx\" rel=\"nofollow\"><strong>this</strong> approach</a>. The idea is simple - use literal objects to combine your parameters:  </p>\n\n<pre><code>function getData(id, opt){\n    var data = voodooMagic(id, opt.parameters);\n    if (opt.callback!=undefined)\n      opt.callback.call(data);\n    return data;         \n}\n\ngetData(5, {parameters: \"1,2,3\", callback: \n    function(){for (i=0;i&lt;=1;i--)alert(\"FAIL!\");}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this is a pretty old question, but I dealt with this recently. Let me know what you think of this solution.</p>\n\n<p>I created a utility that lets me strongly type arguments and let them be optional. You basically wrap your function in a proxy. If you skip an argument, it's <em>undefined</em>. It may get quirky if you have multiple <em>optional</em> arguments with the same type right next to each other. (There are options to pass functions instead of types to do custom argument checks, as well as specifying default values for each parameter.)</p>\n\n<p>This is what the implementation looks like:</p>\n\n<pre><code>function displayOverlay(/*message, timeout, callback*/) {\n  return arrangeArgs(arguments, String, Number, Function, \n    function(message, timeout, callback) {\n      /* ... your code ... */\n    });\n};\n</code></pre>\n\n<p>For clarity, here is what is going on:</p>\n\n<pre><code>function displayOverlay(/*message, timeout, callback*/) {\n  //arrangeArgs is the proxy\n  return arrangeArgs(\n           //first pass in the original arguments\n           arguments, \n           //then pass in the type for each argument\n           String,  Number,  Function, \n           //lastly, pass in your function and the proxy will do the rest!\n           function(message, timeout, callback) {\n\n             //debug output of each argument to verify it's working\n             console.log(\"message\", message, \"timeout\", timeout, \"callback\", callback);\n\n             /* ... your code ... */\n\n           }\n         );\n};\n</code></pre>\n\n<p>You can view the arrangeArgs proxy code in my GitHub repository here:</p>\n\n<p><a href=\"https://github.com/joelvh/Sysmo.js/blob/master/sysmo.js\" rel=\"nofollow\">https://github.com/joelvh/Sysmo.js/blob/master/sysmo.js</a></p>\n\n<p>Here is the utility function with some comments copied from the repository:</p>\n\n<pre><code>/*\n ****** Overview ******\n * \n * Strongly type a function's arguments to allow for any arguments to be optional.\n * \n * Other resources:\n * http://ejohn.org/blog/javascript-method-overloading/\n * \n ****** Example implementation ******\n * \n * //all args are optional... will display overlay with default settings\n * var displayOverlay = function() {\n *   return Sysmo.optionalArgs(arguments, \n *            String, [Number, false, 0], Function, \n *            function(message, timeout, callback) {\n *              var overlay = new Overlay(message);\n *              overlay.timeout = timeout;\n *              overlay.display({onDisplayed: callback});\n *            });\n * }\n * \n ****** Example function call ******\n * \n * //the window.alert() function is the callback, message and timeout are not defined.\n * displayOverlay(alert);\n * \n * //displays the overlay after 500 miliseconds, then alerts... message is not defined.\n * displayOverlay(500, alert);\n * \n ****** Setup ******\n * \n * arguments = the original arguments to the function defined in your javascript API.\n * config = describe the argument type\n *  - Class - specify the type (e.g. String, Number, Function, Array) \n *  - [Class/function, boolean, default] - pass an array where the first value is a class or a function...\n *                                         The \"boolean\" indicates if the first value should be treated as a function.\n *                                         The \"default\" is an optional default value to use instead of undefined.\n * \n */\narrangeArgs: function (/* arguments, config1 [, config2] , callback */) {\n  //config format: [String, false, ''], [Number, false, 0], [Function, false, function(){}]\n  //config doesn't need a default value.\n  //config can also be classes instead of an array if not required and no default value.\n\n  var configs = Sysmo.makeArray(arguments),\n      values = Sysmo.makeArray(configs.shift()),\n      callback = configs.pop(),\n      args = [],\n      done = function() {\n        //add the proper number of arguments before adding remaining values\n        if (!args.length) {\n          args = Array(configs.length);\n        }\n        //fire callback with args and remaining values concatenated\n        return callback.apply(null, args.concat(values));\n      };\n\n  //if there are not values to process, just fire callback\n  if (!values.length) {\n    return done();\n  }\n\n  //loop through configs to create more easily readable objects\n  for (var i = 0; i &lt; configs.length; i++) {\n\n    var config = configs[i];\n\n    //make sure there's a value\n    if (values.length) {\n\n      //type or validator function\n      var fn = config[0] || config,\n          //if config[1] is true, use fn as validator, \n          //otherwise create a validator from a closure to preserve fn for later use\n          validate = (config[1]) ? fn : function(value) {\n            return value.constructor === fn;\n          };\n\n      //see if arg value matches config\n      if (validate(values[0])) {\n        args.push(values.shift());\n        continue;\n      }\n    }\n\n    //add a default value if there is no value in the original args\n    //or if the type didn't match\n    args.push(config[2]);\n  }\n\n  return done();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I recommend you to use <a href=\"https://github.com/zvictor/ArgueJs\" rel=\"nofollow\">ArgueJS</a>.</p>\n\n<p>You can just type your function this way:</p>\n\n<pre><code>function getData(){\n  arguments = __({id: String, parameters: [Object], callback: [Function]})\n\n  // and now access your arguments by arguments.id,\n  //          arguments.parameters and arguments.callback\n}\n</code></pre>\n\n<p>I considered by your examples that you want your <code>id</code> parameter to be a string, right?\nNow, <code>getData</code> is requiring a <code>String id</code> and is accepting the optionals <code>Object parameters</code> and <code>Function callback</code>. All the use cases you posted will work as expected.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have a static javascript function that can take 1, 2 or 3 parameters:</p>\n\n<pre><code>function getData(id, parameters, callback) //parameters (associative array) and callback (function) are optional\n</code></pre>\n\n<p>I know I can always test if a given parameter is undefined, but how would I know if what was passed was the parameter or the callback?</p>\n\n<p>What's the best way of doing this?</p>\n\n<p><hr /></p>\n\n<p>Examples of what could be passed in:</p>\n\n<p>1:</p>\n\n<pre><code>getData('offers');\n</code></pre>\n\n<p>2:</p>\n\n<pre><code>var array = new Array();\narray['type']='lalal';\ngetData('offers',array);\n</code></pre>\n\n<p>3:</p>\n\n<pre><code>var foo = function (){...}\ngetData('offers',foo);\n</code></pre>\n\n<p>4:</p>\n\n<pre><code>getData('offers',array,foo);\n</code></pre>\n",
            "last_activity_date": 1365779873,
            "question_id": 1529077,
            "score": 102,
            "tags": [
                "javascript"
            ],
            "title": "Handling optional parameters in javascript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Pretty easy, go to the 'scripts' tab. And select the source file you want and double-click any line to edit it.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can use the built-in JavaScript debugger in Chrome Developer Tools under the \"Scripts\" tab, but changes you apply to the code are expressed only at the time when execution pass through them. That means changes to the code that is not running after the page loads will not have an effect. Unlike e.g. changes to the code residing in the <em>mouseover</em> handlers, which you can test on the fly.</p>\n\n<p><a href=\"http://www.google.com/intl/cs-CZ/events/io/2010/sessions/chrome-developer-tools.html\">There is a video from Google I/O 2010 event</a> introducing other capabilities of Chrome Developer Tools.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p><a href=\"http://www.codeproject.com/Articles/273129/Beginner-Guide-to-Page-and-Script-Debugging-with-C\">This</a> is an awesome tutorial for the Chrome debugger. It shows the very simple steps for making in-debugger changes to your scripts.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I came across this today, when I was playing around with someone else's website.</p>\n\n<p>I realized I could <strong>attach a break-point in the debugger to some line of code before</strong> what I wanted to dynamically edit. And since <strong>break-points stay even after a reload of the page</strong>, I was able to edit the changes I wanted while paused at break-point and then continued to let the page load.</p>\n\n<p>So as a quick work around, and if it works with your situation:</p>\n\n<ol>\n<li><em>Add</em> break-point at an earlier point in the script</li>\n<li><em>Reload</em> page</li>\n<li><em>Edit</em> your changes into the code</li>\n<li><em>Unpause</em> the debugger</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<p>here's a gentle introduction to the js debugger in chrome that i wrote. Maybe it will help others looking for info on this: <a href=\"http://meeech.amihod.com/getting-started-with-javascript-debugging-in-chrome/\" rel=\"nofollow\">http://meeech.amihod.com/getting-started-with-javascript-debugging-in-chrome/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is what you are looking for:</p>\n\n<p>1.- Navigate to the Source tab and open the javascript file</p>\n\n<p>2.- Edit the file, right-click it and a menu will appear: click <strong>Save</strong> and save it locally.</p>\n\n<p>In order to view the diff or revert your changes, right-click and select the option <strong>Local Modifications</strong>... from the menu. You will see your changes diff with respect to the original file if you expand the timestamp shown.</p>\n\n<p>More detailed info here: <a href=\"http://www.sitepoint.com/edit-source-files-in-chrome/\" rel=\"nofollow\">http://www.sitepoint.com/edit-source-files-in-chrome/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>How do I \"dynamically\" edit JavaScript code in the Chrome debugger? It's not for me, so I don't have access to the source file. I want to edit code and see what effects they have on the page, in this case stopping an animation from queuing up a bunch of times.</p>\n",
            "last_activity_date": 1397075175,
            "question_id": 5067532,
            "score": 84,
            "tags": [
                "javascript",
                "google-chrome",
                "debugging"
            ],
            "title": "Editing in the Chrome debugger"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You should iterate over the keys and get the values using square brackets.</p>\n\n<p>See: <a href=\"http://stackoverflow.com/questions/85992/how-do-i-enumerate-the-properties-of-a-javascript-object\">How do I enumerate the properties of a javascript object?</a></p>\n\n<p><strong>EDIT:</strong> Obviously, this makes the question a duplicate.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You have to first <a href=\"http://www.prototypejs.org/api/hash\">convert your object literal to a Prototype Hash</a>:</p>\n\n<pre><code>// Store your object literal\nvar obj = {foo: 1, bar: 2, barobj: {75: true, 76: false, 85: true}}\n\n// Iterate like so.  The $H() construct creates a prototype-extended Hash.\n$H(obj).each(function(pair){\n  alert(pair.key);\n  alert(pair.value);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>There's no need for Prototype here: JavaScript has <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Statements/for...in\"><code>for..in</code></a> loops. If you're not sure that no one messed with <code>Object.prototype</code>, check <code>hasOwnProperty()</code> as well, ie</p>\n\n<pre><code>for(var prop in obj) {\n    if(obj.hasOwnProperty(prop))\n        doSomethingWith(obj[prop]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 493
                }
            ],
            "body": "<p>Is there a way to iterate over every property of an object using the Prototype JavaScript framework?</p>\n\n<p>Here's the situation: I am getting an AJAX response in JSON that looks something like this:</p>\n\n<pre><code>{foo: 1, bar: 2, barobj: {75: true, 76: false, 85: true}}\n</code></pre>\n\n<p>If I evaluate that json response in to a variable <code>response</code>, I want to be able to iterate over each property in the <code>response.barobj</code> object to see which indexes are true and which are false.</p>\n\n<p>Prototype has both <code>Object.keys()</code> and <code>Object.values()</code> but oddly seems to not have a simple <code>Object.each()</code> function! I could take the results of Object.keys() and Object.values() and cross-reference the other as I iterate through one, but that is such a hack that I am sure there is a proper way to do it!</p>\n",
            "last_activity_date": 1325086068,
            "question_id": 587881,
            "score": 71,
            "tags": [
                "javascript",
                "prototypejs"
            ],
            "title": "Iterating over every property of an object in javascript using Prototype?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>What I observed : on inactive tabs in <strong>Chrome</strong>, all your <code>setTimeout</code> (must be the same for <code>setInterval</code>) waiting less than <em>1000ms</em> are rounded to <em>1000ms</em>. I think longer timeouts are not modified.</p>\n\n<p>Seems to be the behavior since <strong>Chrome 11</strong> and <strong>Firefox 5.0</strong> : <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.setTimeout#Inactive_tabs\">https://developer.mozilla.org/en-US/docs/DOM/window.setTimeout#Inactive_tabs</a></p>\n\n<p>Furthermore, I don't think it behaves this way when the whole window is inactive (but it seems quite easy to investigate).</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<h2>Test One</h2>\n\n<p>I have written a test specifically for this purpose:<br>\n<a href=\"http://laucheukhim.github.io/frame-rate-distribution/\">Frame Rate Distribution: setInterval vs requestAnimationFrame</a></p>\n\n<p><sup>Note: This test is quite CPU intensive. <code>requestAnimationFrame</code> is not supported by IE 9- and Opera 12-.</sup></p>\n\n<p>The test logs the actual time it takes for a <code>setInterval</code> and <code>requestAnimationFrame</code> to run in different browsers, and gives you the results in the form of a distribution. You can change the number of milliseconds for <code>setInterval</code> to see how it runs under different settings. <code>setTimeout</code> works similarly to a <code>setInterval</code> with respect to delays. <code>requestAnimationFrame</code> generally defaults to the 60fps depending on the browser. To see what happens when you switch to a different tab or have an inactive window, simply open the page, switch to a different tab and wait for a while. It will continue to log the actual time it takes for these functions in an inactive tab.</p>\n\n<h2>Test Two</h2>\n\n<p>Another way to test it is to log the timestamp repeatedly with <code>setInterval</code> and <code>requestAnimationFrame</code> and view it in a detached console. You can see how frequently it is updated (or if it is ever updated) when you make the tab or window inactive.</p>\n\n<ul>\n<li><a href=\"http://jsfiddle.net/laucheukhim/Aev79/\">Test for <code>setInterval</code></a></li>\n<li><a href=\"http://jsfiddle.net/laucheukhim/WfdnM/1/\">Test for <code>requestAnimationFrame</code></a></li>\n</ul>\n\n<h2>Results</h2>\n\n<p><strong>Internet Explorer</strong><br>\nIE does not limit the delay in <code>setInterval</code> when the tab is inactive, but it pauses <code>requestAnimationFrame</code> in inactive tabs. It does not matter whether the window is out of focus or not.</p>\n\n<p><strong>Chrome</strong><br>\nChrome limits the minimum interval of <code>setInterval</code> to around 1000ms when the tab is inactive. If the interval is higher than 1000ms, it will run at the specified interval. It does not matter if the window is out of focus, the interval is limited only when you switch to a different tab. <code>requestAnimationFrame</code> is paused when the tab is inactive.</p>\n\n<pre><code>// Provides control over the minimum timer interval for background tabs.\nconst double kBackgroundTabTimerInterval = 1.0;\n</code></pre>\n\n<p><sup><a href=\"https://codereview.chromium.org/6546021/patch/1001/2001\">https://codereview.chromium.org/6546021/patch/1001/2001</a></sup></p>\n\n<p><strong>Firefox</strong><br>\nSimilar to Chrome, Firefox limits the minimum interval of <code>setInterval</code> to around 1000ms when the tab (not the window) is inactive. However, <code>requestAnimationFrame</code> runs exponentially slower when the tab is inactive, with each frame taking 1s, 2s, 4s, 8s and so on.</p>\n\n<pre><code>// The default shortest interval/timeout we permit\n#define DEFAULT_MIN_TIMEOUT_VALUE 4 // 4ms\n#define DEFAULT_MIN_BACKGROUND_TIMEOUT_VALUE 1000 // 1000ms\n</code></pre>\n\n<p><sup><a href=\"https://hg.mozilla.org/releases/mozilla-release/file/0bf1cadfb004/dom/base/nsGlobalWindow.cpp#l296\">https://hg.mozilla.org/releases/mozilla-release/file/0bf1cadfb004/dom/base/nsGlobalWindow.cpp#l296</a></sup></p>\n\n<p><strong>Safari</strong><br>\nJust like Chrome, Safari caps <code>setInterval</code> at 1000ms when the tab is inactive. <code>requestAnimationFrame</code> is paused as well.</p>\n\n<p><strong>Opera</strong><br>\nSince the adoption of the Webkit engine, Opera exhibits the same behavior as Chrome. <code>setInterval</code> is capped at 1000ms and <code>requestAnimationFrame</code> is paused when the tab is inactive.</p>\n\n<h2>Summary</h2>\n\n<p>Repeating intervals for inactive tabs:</p>\n\n<pre>\n           <b>setInterval</b>     <b>requestAnimationFrame</b>\n<b>IE</b>\n9-         not affected    not supported\n10+        not affected    paused\n\n<b>Chrome</b>\n9-         not affected    not supported\n10         not affected    paused\n11+        >=1000ms        paused\n\n<b>Firefox</b>\n3-         not affected    not supported\n4          not affected    1s\n5+         >=1000ms        2<sup>n</sup>s (n = number of frames since inactivity)\n\n<b>Safari</b>\n5-         not affected    not supported\n6          not affected    paused\n7+         >=1000ms        paused\n\n<b>Opera</b>\n12-        not affected    not supported\n15+        >=1000ms        paused\n</pre>\n",
                    "is_accepted": true,
                    "score": 47
                }
            ],
            "body": "<p>Background: I'm doing some user interface tests that need to detect if people are paying attention or not. But, this question is <strong>not</strong> about <a href=\"http://stackoverflow.com/a/1060034/586086\">the page visibility API</a>.</p>\n\n<p>Specifically, I would like to know how my Javascript code will be affected if the current tab is not active, or the browser window is not active, in different browsers. I've dug up the following so far:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/7977170/586086\">ios 5 pauses javascript when tab is not active</a></li>\n<li><a href=\"http://pivotallabs.com/chrome-and-firefox-throttle-settimeout-setinterval-in-inactive-tabs/\"><code>setInterval</code> and <code>setTimeout</code> delay is reduced when tabs are not active</a> - seems like this just started appearing recently and can mess up Jasmine unit tests, around other things.</li>\n<li><code>requestAnimationFrame</code> is slowed when tab is not active (reasonable, can't think of why this would affect anyone too much)</li>\n</ul>\n\n<p>I have the following questions:</p>\n\n<ul>\n<li>Other than mobile browsers, do desktop browsers ever pause JS execution when a tab is not active? When and which browsers?</li>\n<li>Which browsers reduce the <code>setInterval</code> repeat? Is it just reduced to a limit or by a percentage? For example, if I have a 10ms repeat versus a 5000ms repeat, how will each be affected?</li>\n<li>Do these changes happen if the <em>window</em> is out of focus, as opposed to just the tab? (I imagine it would be harder to detect, as it requires the OS API.) </li>\n<li>Are there any other effects that would not be observed in an active tab? Could they mess things up that would otherwise execute correctly (i.e. the aforementioned Jasmine tests)?</li>\n</ul>\n",
            "last_activity_date": 1416990644,
            "question_id": 15871942,
            "score": 63,
            "tags": [
                "javascript",
                "browser"
            ],
            "title": "How do browsers pause/change Javascript when tab or window is not active?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Have a look at  <a href=\"https://addons.mozilla.org/en-US/firefox/addon/2490/\" rel=\"nofollow\">https://addons.mozilla.org/en-US/firefox/addon/2490/</a>  I have not tried it but it seem to have some good features.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check this -> <a href=\"http://ejohn.org/blog/deep-tracing-of-internet-explorer/\" rel=\"nofollow\">http://ejohn.org/blog/deep-tracing-of-internet-explorer/</a>\nIt works only on IE though</p>\n\n<p>Edit: Link to the product -> <a href=\"http://ajax.dynatrace.com/ajax/en/\" rel=\"nofollow\">http://ajax.dynatrace.com/ajax/en/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I seem to run into this issue often and never really have a great answer other than selecting smart breakpoints in your javascript. Sometimes there is a tool for your specific situation that can help find the problem, other times for me it is a long process to find the leak.</p>\n\n<p>Look at the <a href=\"http://stackoverflow.com/questions/11969062/tool-to-track-down-javascript-memory-leak?lq=1\">Allocation profiler</a> in Chrome DevTools which gives you a UI for your allocations then allowing you to walk back to their retainers.</p>\n\n<p>Here is a <a href=\"https://wiki.mozilla.org/Performance:Leak_Tools\" rel=\"nofollow\">good list of leak tools for Mozilla</a>. In addition, there are some <a href=\"http://people.mozilla.com/~dbaron/leak-screencasts/\" rel=\"nofollow\">screencasts   of how to use the tools</a>. In particular, you may be interested in the section on \"Post-processing of stack traces\" as it mentions being able to get better symbols, and file name/line number information from a stack trace.</p>\n\n<p>If you are ok using Internet Explorer on Windows, here is a <a href=\"http://blogs.msdn.com/b/gpde/archive/2009/08/03/javascript-memory-leak-detector-v2.aspx\" rel=\"nofollow\">JavaScript Memory Leak Detector</a> which may prove useful as well.</p>\n\n<p>Finally, I found this nice tool on github called <a href=\"https://github.com/Doist/JavaScript-memory-leak-checker\" rel=\"nofollow\">MemoryLeakChecker</a> after reading a <a href=\"http://amix.dk/blog/post/19564\" rel=\"nofollow\">post here</a>, which looks for large data structures and tries to help you pinpoint where you are leaking memory.</p>\n\n<p>Hope this helps and let me know which one (if any) end up helping you. Sorry for the lack of actual hyperlinks, because I have under 10 reputation right now I can't put them all in the post.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Google released <a href=\"https://code.google.com/p/leak-finder-for-javascript/\">leak-finder-for-javascript</a> that helps you to find leaks after running the code in <a href=\"https://www.google.com/chrome/\">Chrome</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I have a memory leak issue in a rather complex JavaScript project and am hoping that there are tools that could help me pin-point the cause of the problem.</p>\n\n<p>I have tried the Google Chrome developer tool Profile tab, where I can take snapshots of the HEAP and diff it with previous snapshots (check <a href=\"http://www.youtube.com/GoogleDevelopers#p/c/B9EC47A6AAE4540F/1/OxW1dCjOstE\">http://www.youtube.com/GoogleDevelopers#p/c/B9EC47A6AAE4540F/1/OxW1dCjOstE</a> for a jumpstart on that feature).</p>\n\n<p>I can see the memory drain with this tool but from there I can't find a way to detect where the references to my objects are kept (probably in closures).</p>\n\n<p>My question is: What tools do you use for JavaScript memory leak debugging? Is there a tool that could let me see the references and a bit of source code of where they are held?</p>\n",
            "last_activity_date": 1422340025,
            "question_id": 3573252,
            "score": 35,
            "tags": [
                "javascript",
                "memory-leaks"
            ],
            "title": "Tools for debugging memory leaks in JavaScript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Maybe you could check that the click event didn't occur on an <code>a</code> element:</p>\n\n<pre><code>$('#CalendarBody .DateBox').click(function(e) {\n  // if the event target is an &lt;a&gt; don't process:\n  if ($(e.target).is('a')) return;\n\n  AddApointment(this);\n});\n</code></pre>\n\n<p>Might Work?</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I use</p>\n\n<pre><code>e.stopPropagation(); // to prevent event from bubbling up\ne.preventDefault(); // then cancel the event (if it's cancelable)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The short answer is simply, <em>you can't</em>. </p>\n\n<h3>The problem</h3>\n\n<p>Normally, you can stop an event from \"bubbling up\" to event handlers on outer elements because the handlers for inner elements are called <em>first</em>. However, jQuery's \"live events\" work by attaching a proxy handler for the desired event to the document element, and then calling the appropriate user-defined handler(s) <em>after the event bubbles up the document</em>. </p>\n\n<p><img src=\"http://shog9.com/so%5F1967537%5Fbubbling.png\" alt=\"Bubbling illustration\"></p>\n\n<p>This generally makes \"live\" binding a rather efficient means of binding events, but it has two big side-effects: first, any event handler attached to an inner element can prevent \"live\" events from firing for itself or any of its children; second, <strong>a \"live\" event handler cannot prevent any event handlers attached directly to children of the document from firing</strong>. You can stop further processing, but you can't do anything about processing that has already occurred... And by the time your live event fires, the handler attached directly to the child <em>has already been called</em>.</p>\n\n<h3>Solution</h3>\n\n<p>Your best option here (so far as I can tell from what you've posted) is to use live binding for both click handlers. Once that's done, you should be able to <code>return false</code> from the <em>.MoreAppointments</em> handler to prevent the <em>.DateBox</em> handler from being called. </p>\n\n<h3>Example:</h3>\n\n<pre><code>$('.MoreAppointments').live('click', function(e) \n{\n  alert(\"Hi\");\n  return false; // prevent additional live handlers from firing\n});\n\n// use live binding to allow the above handler to preempt\n$('#CalendarBody .DateBox').live('click', function(e)\n{\n   AddApointment(this);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 51
                },
                {
                    "body": "<p>I've used such kind if code and it worked for me:</p>\n\n<pre><code>$('#some-link').live('click', function(e) {\n    alert(\"Link clicked 1\");\n    e.stopImmediatePropagation();\n});\n\n$('#some-link').live('click', function(e) {\n    alert(\"Link clicked 2\");    \n});\n</code></pre>\n\n<p>so, it seems to me, that now JQuery support stopImmediatePropagation with live events</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I'm using this:</p>\n\n<pre><code>if(event.target != this)return; // stop event bubbling for \"live\" event\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've used this in certain situations. Note: not always applicable, so assess for your needs as always:</p>\n\n<p>html:</p>\n\n<pre><code>&lt;a href=\"#\" className=\"my-class-name\"&gt;Click me&lt;/a&gt;\n</code></pre>\n\n<p>js (in your live event handler):</p>\n\n<pre><code>if(e.target.className == 'my-class-name') {\n    e.preventDefault();\n    // do something you want to do...\n}\n</code></pre>\n\n<p>This way, my live event only 'runs' when a particular element type/classname attr is clicked.</p>\n\n<p>The <code>e.preventDefault()</code> here is to stop the link I'm clicking moving the scroll-position to the top of the page.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>Simply use **\"on\"** function to bind click event of child as well as parent element.\n\nExample :  $(\"#content-container\").on(\"click\",\"a.childElement\",function(e){\n                   alert(\"child clicked\");\n                   e.stopPropagation() ; \n                }); \n\n                $(\"#content-container\").on(\"click\",\"div.parentElement\",function(e){\n                  alert(\"parent clicked\");\n                }); \n( where content-container is the outer div containing both parent as well as child elements. )\n\n        Here only \"child clicked\" alert will occur.\n\n    Thanks.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am trying to stop some events but stopPropagation does not work with \"live\" so I am not sure what to do. I found this on their site.</p>\n\n<blockquote>\n  <p>Live events do not bubble in the\n  traditional manner and cannot be\n  stopped using stopPropagation or\n  stopImmediatePropagation. For example,\n  take the case of two click events -\n  one bound to \"li\" and another \"li a\".\n  Should a click occur on the inner\n  anchor BOTH events will be triggered.\n  This is because when a\n  $(\"li\").bind(\"click\", fn); is bound\n  you're actually saying \"Whenever a\n  click event occurs on an LI element -\n  or inside an LI element - trigger this\n  click event.\" To stop further\n  processing for a live event, fn must\n  return false</p>\n</blockquote>\n\n<p>It says that fn must return false so what I tried to do </p>\n\n<pre><code> $('.MoreAppointments').live('click', function(e) {\n   alert(\"Hi\");\n   return false;\n });\n</code></pre>\n\n<p>but that did not work so I am not sure how to make it return false.</p>\n\n<p><strong>Update</strong></p>\n\n<p>Here is some more information.</p>\n\n<p>I have a table cell and I bind a click event to it.</p>\n\n<pre><code> $('#CalendarBody .DateBox').click(function(e)\n    {\n        AddApointment(this);\n    });\n</code></pre>\n\n<p>So the AddApointment just makes some ui dialog box.</p>\n\n<p>Now the live code(MoreAppointments) sits in this table cell and is basically an anchor tag.  So when I click on the anchor tag it first goes to the  above code(addApointment - so runs that event first) runs that but does not launch my dialog box instead it goes straight to the (MoreAppointment) event and runs that code. Once that code has run it launches the dialog box from \"addApointment\".</p>\n\n<p><strong>Update 2</strong></p>\n\n<p>Here is some of the html. I did not copy the whole table since it is kinda big and all the cells repeat itself with the same data. If needed I will post it.</p>\n\n<pre><code> &lt;td id=\"c_12012009\" class=\"DateBox\"&gt;\n        &lt;div class=\"DateLabel\"&gt;\n            1&lt;/div&gt;\n        &lt;div class=\"appointmentContainer\"&gt;\n            &lt;a class=\"appointments\"&gt;Fkafkafk fakfka kf414&lt;br /&gt;\n            &lt;/a&gt;&lt;a class=\"appointments\"&gt;Fkafkafk fakfka kf414&lt;br /&gt;\n            &lt;/a&gt;&lt;a class=\"appointments\"&gt;Fkafkafk fakfka kf414&lt;br /&gt;\n            &lt;/a&gt;&lt;a class=\"appointments\"&gt;Fkafkafk fakfka kf414&lt;br /&gt;\n            &lt;/a&gt;&lt;a class=\"appointments\"&gt;Fkafkafk fakfka kf414&lt;br /&gt;\n            &lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"appointmentOverflowContainer\"&gt;\n            &lt;div&gt;\n                &lt;a class=\"MoreAppointments\"&gt;+1 More&lt;/a&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/td&gt;\n</code></pre>\n",
            "last_activity_date": 1408603543,
            "question_id": 1967537,
            "score": 30,
            "tags": [
                "javascript",
                "jquery",
                "dom",
                "event-delegation"
            ],
            "title": "How to stop event bubbling with jquery live?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>try this...</p>\n\n<pre><code>$('.testimonial').each(function(){\n    //if statement here \n    // use $(this) to reference the current div in the loop\n    //you can try something like...\n\n\n    if(condition){\n\n    }\n\n\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Use each: '<code>i</code>' is the postion in the array, <code>obj</code> is the DOM object that you are iterating (can be accessed with the jQuery wrapper <code>$(this)</code> as well).</p>\n\n<pre><code>$('.testimonial').each(function(i, obj) {\n    //test\n});\n</code></pre>\n\n<p>Check the <a href=\"http://api.jquery.com/each/\">api reference</a> for more information.</p>\n",
                    "is_accepted": true,
                    "score": 258
                },
                {
                    "body": "<pre><code>$('.testimonal').each(function(i,v){\n  if (condition) {\n    doSomething();\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>you can do it this way</p>\n\n<pre><code>$('.testimonial').each(function(index, obj){\n    //you can use this to access the current item\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>divs  = $('.testimonial')\nfor(ind in divs){\n  div = divs[ind];\n  //do whatever you want\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I may be missing part of the question, but I believe you can simply do this:</p>\n\n<pre><code>$('.testimonial').each(function() {\n    if(...Condition...) {\n        ...Do Stuff...\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can do this concisely using <a href=\"http://api.jquery.com/filter/\"><code>.filter</code></a>. The following example will hide all .testimonial divs containing the word \"something\": </p>\n\n<pre><code>$(\".testimonial\").filter(function() {\n    return $(this).text().toLowerCase().indexOf(\"something\") !== -1;\n}).hide();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><a href=\"http://api.jquery.com/eq/\">jQuery's .eq()</a> can help you traverse through elements with an indexed approach.</p>\n\n<pre><code>var testimonialElements = $(\".testimonial\");\nfor(var i=0; i&lt;testimonialElements.length; i++){\n    var element = testimonialElements.eq(i);\n    //do something with element\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It's pretty simple to do this without jQuery these days.</p>\n\n<h2>Without jQuery:</h2>\n\n<p>Just select the elements and use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow\"><code>.forEach()</code> method</a> to iterate over them:</p>\n\n<pre><code>var testimonials = document.querySelectorAll('.testimonial');\nArray.prototype.forEach.call(testimonials, function(elements, index) {\n    // conditional here.. access elements\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a load of divs with the class <code>testimonial</code> and I want to use jquery to loop through them to check for each div if a specific condition is true. If it is true, it should perform an action.</p>\n\n<p>Does anyone know how I would do this?</p>\n",
            "last_activity_date": 1422062244,
            "question_id": 4735342,
            "score": 131,
            "tags": [
                "javascript",
                "jquery",
                "jquery-selectors"
            ],
            "title": "jQuery to loop through elements with the same class"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>if you know the button element selector :</p>\n\n<pre><code>$('#dialogBox').dialog('open');\n$('#okButton').focus();\n</code></pre>\n\n<p>Should do the trick for you. This will focus the ok button, and enter will 'click' it, as you would expect. This is the same technique used in native UI dialogs.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't know about simpler, but ordinarily you would track which button has the current focus.  If the focus is changed to a different control, then the \"button focus\" would remain on the button that had focus last.  Ordinarily, the \"button focus\" would start on your default button.  Tabbing to a different button would change the \"button focus\".  You'd have to decide if navigating to a different form element would reset the \"button focus\" to the default button again.  You'll also probably need some visual indicator other than the browser default to indicate the focused button as it loses the real focus in the window.</p>\n\n<p>Once you have the button focus logic down and implemented, then I would probably add a key handler to the dialog itself and have it invoke the action associated with the currently \"focused\" button.</p>\n\n<p><strong>EDIT</strong>: I'm making the assumption that you want to be able hit enter anytime you are filling out form elements and have the \"current\" button action take precedence. If you only want this behavior when the button is actually focused, my answer is too complicated.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I don't know if there's an option in the <strong><em>jQuery UI widget</em></strong>, but you could simply bind the <code>keypress</code> event to the div that contains your dialog...</p>\n\n<pre><code>$('#DialogTag').keypress(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER) {\n          //Close dialog and/or submit here...\n    }\n});\n</code></pre>\n\n<p>This'll run no matter what element has the focus in your dialog, which may or may not be a good thing depending on what you want.</p>\n\n<p>If you want to make this the default functionality, you can add this piece of code:</p>\n\n<pre><code>// jqueryui defaults\n$.extend($.ui.dialog.prototype.options, { \n    create: function() {\n        var $this = $(this);\n\n        // focus first button and bind enter to it\n        $this.parent().find('.ui-dialog-buttonpane button:first').focus();\n        $this.keypress(function(e) {\n            if( e.keyCode == $.ui.keyCode.ENTER ) {\n                $this.parent().find('.ui-dialog-buttonpane button:first').click();\n                return false;\n            }\n        });\n    } \n});\n</code></pre>\n\n<p>Here's a more detailed view of what it would look like:</p>\n\n<pre><code>$( \"#dialog-form\" ).dialog({\n  buttons: { \u2026 },\n  open: function() {\n    $(\"#dialog-form\").keypress(function(e) {\n      if (e.keyCode == $.ui.keyCode.ENTER) {\n        $(this).parent().find(\"button:eq(0)\").trigger(\"click\");\n      }\n    });\n  };\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 118
                },
                {
                    "body": "<p>A crude but effective way to make this work more generically:</p>\n\n<pre><code>$.fn.dlg = function(options) {\n    return this.each(function() {\n             $(this).dialog(options);\n             $(this).keyup(function(e){\n                  if (e.keyCode == 13) {                \n                       $('.ui-dialog').find('button:first').trigger('click');\n                  }\n             });\n    });\n}\n</code></pre>\n\n<p>Then when you create a new dialog you can do this:</p>\n\n<pre><code>$('#a-dialog').mydlg({...options...})\n</code></pre>\n\n<p>And use it like a normal jquery dialog  thereafter:</p>\n\n<pre><code>$('#a-dialog').dialog('close')\n</code></pre>\n\n<p>There are ways to improve that to make it work in more special cases.  With the above code it will automatically pick the first button in the dialog as the button to trigger when enter is hit.  Also it assumes that there is only one active dialog at any given time which may not be the case.  But you get the idea.</p>\n\n<p>Note: As mentioned above, the button that is pressed on enter is dependent on your setup.  So, in some cases you would want to use the :first selector in .find method and in others you may want to use the :last selector.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>$('#dialogBox').dialog('open');\n$('.ui-dialog-buttonpane &gt; button:last').focus();\n</code></pre>\n\n<p>It works beautifully with the latest version of JQuery UI (1.8.1).\nYou may also use :first instead of :last depending on which button you want to set as the default.</p>\n\n<p>This solution, compared to the selected one above, has the advantage of showing which button is the default one for the user. The user can also TAB between buttons and pressing ENTER will click the button currently under focus.</p>\n\n<p>Cheers.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>done and done </p>\n\n<pre><code>  $('#login input').keyup(function(e) {\nif (e.keyCode == 13) {\n  $('#login form').submit();\n}\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I did such way... ;) Hope it will helpful for somebody..</p>\n\n<pre><code>$(window).keypress(function(e) {\n    if ((e.which &amp;&amp; e.which == 13) || (e.keyCode &amp;&amp; e.keyCode == 13)) {\n        $(\".ui-dialog:visible\").find('.ui-dialog-buttonpane').find('button:first').click();\n        return false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>   $(\"#LogOn\").dialog({\n       modal: true,\n       autoOpen: false,\n       title: 'Please Log On',\n       width: 370,\n       height: 260,\n       buttons: { \"Log On\": function () { alert('Hello world'); } },\n       open: function() { $(this).parents('.ui-dialog-buttonpane button:eq(0)').focus();}\n   });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This should work to trigger the click of the button's click handler. this example assumes you have already set up the form in the dialog to use the jquery.validate plugin. but could be easily adapted.    </p>\n\n<pre><code>open: function(e,ui) {\n    $(this).keyup(function(e) {\n        if (e.keyCode == 13) {\n           $('.ui-dialog-buttonpane button:last').trigger('click');\n        }\n    });\n},\nbuttons: {\n    \"Submit Form\" : function() {\n            var isValid = $('#yourFormsID').valid();\n            // if valid do ajax call\n            if(isValid){\n               //do  your ajax call here. with serialize form or something...\n\n            }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found a quite simple solution for this problem:</p>\n\n<pre><code>var d = $('&lt;div title=\"My dialog form\"&gt;&lt;input /&gt;&lt;/div&gt;').dialog(\n    buttons: [{\n        text: \"Ok\",\n        click: function(){\n            // do something\n            alert('it works');\n        },\n        className: 'dialog_default_button'\n    }]\n});\n\n$(d).find('input').keypress(function(e){\n    if ((e.which &amp;&amp; e.which == 13) || (e.keyCode &amp;&amp; e.keyCode == 13)) {\n        e.preventDefault();\n        $('.dialog_default_button').click();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Rather than listening for key codes like in this answer (which I couldn't get to work) you can bind to the submit event of the form within the dialog and then do this:</p>\n\n<pre><code>$(\"#my_form\").parents('.ui-dialog').first().find('.ui-button').first().click();\n</code></pre>\n\n<p>So, the whole thing would look like this</p>\n\n<pre><code>$(\"#my_form\").dialog({\n  open: function(){\n    //Clear out any old bindings\n    $(\"#my_form\").unbind('submit');\n    $(\"#my_form\").submit(function(){\n      //simulate click on create button\n      $(\"#my_form\").parents('.ui-dialog').first().find('.ui-button').first().click();\n      return false;\n    });\n  },\n  buttons: {\n    'Create': function() {\n      //Do something\n    },\n    'Cancel': function() {\n      $(this).dialog('close');\n    }\n  }\n});\n</code></pre>\n\n<p>Note that different browsers handle the enter key differently, and some do not always do a submit on enter.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>$('#DialogID').dialog(\"option\", \"buttons\")[\"TheButton\"].apply()\n</code></pre>\n\n<p>This worked great for me..</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Posted a solution to my blog.</p>\n\n<p><a href=\"http://www.robertmullaney.com/2011/08/26/submit-ajax-form-jquery-ui-dialog-enter-key/\" rel=\"nofollow\">http://www.robertmullaney.com/2011/08/26/submit-ajax-form-jquery-ui-dialog-enter-key/</a></p>\n\n<p>Similar to other answers, but worked better for my dialog that required an ajax handler. Should be easy to follow if you're not brand new to Query.</p>\n\n<p>Side note: I think Google loves me, post was cached right after I published it ;D</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I realise there are a lot of answers already, but I reckon naturally that my solution is the neatest, and possibly the shortest. It has the advantage that it works on any dialogs created any time in the future.</p>\n\n<pre><code>$(\".ui-dialog\").live(\"keyup\", function(e) {\n    if (e.keyCode === 13) {\n        $('.ok-button', $(this) ).first().click();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is what I did:</p>\n\n<pre><code>myForm.dialog({\n  \"ok\": function(){\n    ...blah...\n  }\n  Cancel: function(){\n    ...blah...\n  }\n}).keyup(function(e){\n  if( e.keyCode == 13 ){\n   $(this).parent().find('button:nth-child(1)').trigger(\"click\");\n  }\n});\n</code></pre>\n\n<p>In this case, myForm is a jQuery object containing the form's html (note, there aren't any \"form\" tags in there... if you put those in the whole screen will refresh when you press \"enter\"). </p>\n\n<p>Whenever the user presses \"enter\" from within the form it will be the equivalent of clicking the \"ok\" button.</p>\n\n<p>This also avoids the issue of having the form open with the \"ok\" button already highlighted. While that would be good for forms with no fields, if you need the user to fill in stuff, then you probably want the first field to be highlighted.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Ben Clayton's is the neatest and shortest and it can be placed at the top of your index page before any jquery dialogs have been initialized. However, i'd like to point out that \".live\" has been deprecated. The preferred action is now \".on\". If you want \".on\" to function like \".live\", you'll have to use delegated events to attach the event handler. Also, a few other things...</p>\n\n<ol>\n<li><p>I prefer to use the ui.keycode.ENTER method to test for the enter\nkey since you don't have to remember the actual key code.</p></li>\n<li><p>Using \"$('.ui-dialog-buttonpane button:first', $(this))\" for the\nclick selector makes the whole method generic.</p></li>\n<li><p>You want to add \"return false;\" to prevent default and stop\npropagation.</p></li>\n</ol>\n\n<p>In this case...</p>\n\n<pre><code>$('body').on('keypress', '.ui-dialog', function(event) { \n    if (event.keyCode === $.ui.keyCode.ENTER) { \n        $('.ui-dialog-buttonpane button:first', $(this)).click();\n        return false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>None of these solutions seemed to work for me in IE9. I ended up with this..</p>\n\n<pre><code>$('#my-dialog').dialog({\n    ...\n    open: function () {\n        $(this).parent()\n               .find(\"button:eq(0)\")\n               .focus()\n               .keyup(function (e) {\n                   if (e.keyCode == $.ui.keyCode.ENTER) {\n                       $(this).trigger(\"click\");\n                   };\n               });\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have summed up the answers above &amp; added important stuff</p>\n\n<pre><code>$(document).delegate('.ui-dialog', 'keyup', function(e) {\n        var tagName = e.target.tagName.toLowerCase();\n\n        tagName = (tagName === 'input' &amp;&amp; e.target.type === 'button') ? 'button' : tagName;\n\n        if (e.which === $.ui.keyCode.ENTER &amp;&amp; tagName !== 'textarea' &amp;&amp; tagName !== 'select' &amp;&amp; tagName !== 'button') {\n            $(this).find('.ui-dialog-buttonset button').eq(0).trigger('click');\n\n            return false;\n        }\n    });\n</code></pre>\n\n<p><strong>Advantages:</strong></p>\n\n<ol>\n<li>Disallow enter key on non compatible elements like <code>textarea</code> , <code>select</code> , <code>button</code> or inputs with type button , imagine user clicking enter on <code>textarea</code> and get the form submitted instead of getting new line!</li>\n<li>The binding is done once , avoid using the dialog 'open' callback to bind enter key to avoid binding the same function again and again each time the dialog is 'open'ed</li>\n<li>Avoid changing existing code as some answers above suggest</li>\n<li>Use 'delegate' instead of the deprecated 'live' &amp; avoid using the new 'on' method to allow working with older versions of jquery</li>\n<li>Because we use delegate , that mean the code above can be written even before initializing dialog. you can also put it in head tag even without $(document).ready</li>\n<li>Also delegate will bind only one handler to <code>document</code> and will not bind handler to each dialog as in some code above , for more efficiency</li>\n<li>Works even with dynamically generated dialogs like <code>$('&lt;div&gt;&lt;input type=\"text\"/&gt;&lt;/div&gt;').dialog({buttons: .});</code></li>\n<li>Worked with ie  7/8/9!</li>\n<li>Avoid using the slow selector <code>:first</code></li>\n<li>Avoid using hacks like in answers here <a href=\"http://stackoverflow.com/questions/477691/\">Submitting a form by pressing enter without a submit button</a> to make a hidden submit button</li>\n</ol>\n\n<p><strong>Disadvantage:</strong></p>\n\n<ol>\n<li>Run the first button as the default one , you can choose another button with eq() or call a function inside the if statement</li>\n<li>All of dialogs will have same behavior you can filter it by making your selector more specific ie '#dialog' instead of '.ui-dialog'</li>\n</ol>\n\n<p>i know the question is old but i have had the same need so i shared the solution i used</p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>I found this solution, it work's on IE8, Chrome 23.0 and Firefox 16.0</p>\n\n<p>It's based on Robert Schmidt comment.</p>\n\n<pre><code>$(\"#id_dialog\").dialog({\n    buttons: [{\n        text: \"Accept\",\n        click: function() {\n            // My function\n        },\n        id: 'dialog_accept_button'\n    }]\n}).keyup(function(e) {\n    if (e.keyCode == $.ui.keyCode.ENTER)\n        $('#dialog_accept_button').click();\n});\n</code></pre>\n\n<p>I hope it help anyone.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Sometimes we forget the fundamental of what the browser already supports:</p>\n\n<pre><code>&lt;input type=\"submit\" style=\"visibility:hidden\" /&gt;\n</code></pre>\n\n<p>This will cause the <kbd>ENTER</kbd> key to submit the form.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It works fine Thank You!!!</p>\n\n<p><code>open: function () {\n            debugger;\n            $(\"#dialogDiv\").keypress(function (e) {\n                if (e.keyCode == 13) {\n                    $(this).parent().find(\"#btnLoginSubmit\").trigger(\"click\");\n                }\n            });\n        },</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Below body is used because dialog DIV added on body,so body now listen the keyboard event. It tested on IE8,9,10, Mojila, Chrome. </p>\n\n<pre><code>open: function() {\n$('body').keypress(function (e) { \n     if (e.keyCode == 13) {   \n     $(this).parent().find(\".ui-dialog-buttonpane button:eq(0)\").trigger(\"click\");\n     return false; \n     }\n  }); \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Because I don't have enough reputation to post comments.</p>\n\n<pre><code>$(document).delegate('.ui-dialog', 'keyup', function(e) {\n  var tagName = e.target.tagName.toLowerCase();\n\n  tagName = (tagName === 'input' &amp;&amp; e.target.type === 'button') ? 'button' : tagName;\n\n  if (e.which === $.ui.keyCode.ENTER &amp;&amp; tagName !== 'textarea' &amp;&amp; tagName !== 'select' &amp;&amp; tagName !== 'button') {\n      $(this).find('.ui-dialog-buttonset button').eq(0).trigger('click');\n    return false;\n  } else if (e.which === $.ui.keyCode.ESCAPE) {\n      $(this).close();\n  }\n});\n</code></pre>\n\n<p>Modified answer by Basemm #35 too add in Escape to close the dialog.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a jQuery UI dialog box with a form. I would like  to simulate a click on one of the dialog's buttons so you don't have to use the mouse or tab over to it. In other words, I want it to act like a regular GUI dialog box where  simulates hitting the \"OK\" button.</p>\n\n<p>I assume this might be a simple option with the dialog, but I can't find it in the <a href=\"http://jqueryui.com/demos/dialog/\">jQuery UI documentation</a>. I could bind each form input with keyup() but didn't know if there was a simpler/cleaner way. Thanks.</p>\n",
            "last_activity_date": 1410390789,
            "question_id": 868889,
            "score": 100,
            "tags": [
                "javascript",
                "jquery",
                "jquery-ui"
            ],
            "title": "Submit jQuery UI dialog on &lt;Enter&gt;"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can iterate over the object to get the keys or values:</p>\n\n<pre><code>function numKeys(obj)\n{\n    var count = 0;\n    for(var prop in obj)\n    {\n        count++;\n    }\n    return count;\n}</code></pre>\n\n<p>It looks like a \"spelling mistake\" but just want to point out that your example is invalid syntax, should be<pre><code>var object = {\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"};\n</code></pre></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>There's no easy answer, because <code>Object</code> &mdash; which every object in JavaScript derives from &mdash; includes many attributes automatically, and the exact set of attributes you get depends on the particular interpreter and what code has executed before yours. So, you somehow have to separate the ones you defined from those you got \"for free.\"</p>\n\n<p>Here's one way:</p>\n\n<pre><code>var foo = {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"};\nObject.prototype.foobie = 'bletch'; // add property to foo that won't be counted\n\nvar count = 0;\nfor (var k in foo) {\n    if (foo.hasOwnProperty(k)) {\n       ++count;\n    }\n}\nalert(\"Found \" + count + \" properties specific to foo\");\n</code></pre>\n\n<p>The second line shows how other code can add properties to all <code>Object</code> derivatives. If you remove the <code>hasOwnProperty()</code> check inside the loop, the property count will go up to at least 4. On a page with other JavaScript besides this code, it could be higher than 4, if that other code also modifies the <code>Object</code> prototype.</p>\n",
                    "is_accepted": true,
                    "score": 71
                },
                {
                    "body": "<p>This function makes use of Mozilla's <code>__count__</code> property if it is available as it is faster than iterating over every property.</p>\n\n<pre><code>function countProperties(obj) {\n  var count = \"__count__\",\n  hasOwnProp = Object.prototype.hasOwnProperty;\n\n  if (typeof obj[count] === \"number\" &amp;&amp; !hasOwnProp.call(obj, count)) {\n    return obj[count];\n  }\n  count = 0;\n  for (var prop in obj) {\n    if (hasOwnProp.call(obj, prop)) {\n      count++;\n    }\n  }\n  return count;\n};\n\ncountProperties({\n  \"1\": 2,\n  \"3\": 4,\n  \"5\": 6\n}) === 3;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><strong>EDIT: this will case errors with jquery to happen, plus some other inconveniences. YOU SHOULD NOT USE IT</strong>: (perhaps if one could add a privaate method instead of a public property function, this would be OK, but don't have the time now). Community wikied</p>\n\n<p>do not use:</p>\n\n<p>Even though javascript's object by default doesn't have the count function, classes are easily extendable, and one can add it oneself:</p>\n\n<pre><code>Object.prototype.count = function () {\n    var count = 0;\n    for(var prop in this) {\n        if(this.hasOwnProperty(prop))\n            count = count + 1;\n    }\n    return count;\n}\n</code></pre>\n\n<p>So that after that one can execute</p>\n\n<pre><code>var object = {'key1': 'val1', 'key2':'val2', 'key3':'val3'};\nconsole.log(object.count()); // 3\n</code></pre>\n\n<p>As a conclusion, if you want count functionality in objects, you need to copy the code from code block 1, and paste it early in execution time ( before you call the count ).</p>\n\n<p>Let me know if that works for you!</p>\n\n<p>Regards,\nPedro</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Although it wouldn't be a \"true object\", you could always do something like this:</p>\n\n<pre><code>var foo = [\n  {Key1: \"key1\"},\n  {Key2: \"key2\"},\n  {Key3: \"key3\"}\n];\n\nalert(foo.length); // === 3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For those which will read this question/answers, here is a JavaScript implementation of Dictionary collection very similar as functionality as .NET one: <a href=\"http://dotnetcaffe.blogspot.com/\" rel=\"nofollow\">JavaScript Dictionary</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use <a href=\"http://documentcloud.github.com/underscore/\">underscore</a> library, very useful: <code>_.keys(obj).length</code>.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<pre><code> var miobj = [\n  {\"padreid\":\"0\", \"sw\":\"0\", \"dtip\":\"UNO\", \"datos\":[]},\n  {\"padreid\":\"1\", \"sw\":\"0\", \"dtip\":\"DOS\", \"datos\":[]}\n ];\n alert(miobj.length) //=== 2\n</code></pre>\n\n<p><strong>but</strong> </p>\n\n<pre><code> alert(miobj[0].length) //=== undefined\n</code></pre>\n\n<p><strong>this function is very good</strong></p>\n\n<pre><code>Object.prototype.count = function () {\n    var count = 0;\n    for(var prop in this) {\n        if(this.hasOwnProperty(prop))\n            count = count + 1;\n    }\n    return count;\n}\n\nalert(miobj.count()) // === 2\nalert(miobj[0].count()) // === 4\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can do that by using this simple code:</p>\n\n<pre><code>Object.keys(myObject).length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 181
                }
            ],
            "body": "<p>Suppose I have the following object in JavaScript:</p>\n\n<pre><code>var object = {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}; \n</code></pre>\n\n<p>How do I find out how many values exist in the object?</p>\n",
            "last_activity_date": 1362225261,
            "question_id": 1345939,
            "score": 69,
            "tags": [
                "javascript",
                "object"
            ],
            "title": "How do I count a JavaScript object&#39;s attributes?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>This will make the second function wait 2 seconds (2000 milliseconds) before executing:</p>\n\n<pre><code>$('.icon').hover(function() {\n    clearTimeout($(this).data('timeout'));\n    $('li.icon &gt; ul').slideDown('fast');\n}, function() {\n    var t = setTimeout(function() {\n        $('li.icon &gt; ul').slideUp('fast');\n    }, 2000);\n    $(this).data('timeout', t);\n});\n</code></pre>\n\n<p>It also clears the timeout when the user hovers back in to avoid crazy behavior.</p>\n\n<p>This is not a very elegant way of doing this, however. You should probably check out the <a href=\"http://cherne.net/brian/resources/jquery.hoverIntent.html\">hoverIntent</a> plugin, which is designed to solve this particular problem.</p>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>The general idea is to use <code>setTimeout</code>, like so:</p>\n\n<pre><code>$('.icon').hover(function() {\n           $('li.icon &gt; ul').slideDown('fast');\n    }, function() { \n           setTimeout(function() {\n                $('li.icon &gt; ul').slideUp('fast');\n           }, 2000);\n    });\n</code></pre>\n\n<p>But this may do counterintuitive things if the user mouses out and then mouses in again quickly\u2014this doesn't account for clearing the timeout when the user hovers over it again. That would require additional state.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>personally I like the \"hoverIntent\" plugin:</p>\n\n<p><a href=\"http://cherne.net/brian/resources/jquery.hoverIntent.html\">http://cherne.net/brian/resources/jquery.hoverIntent.html</a></p>\n\n<p>from the page: hoverIntent is a plug-in that attempts to determine the user's intent... like a crystal ball, only with mouse movement! It works like (and was derived from) jQuery's built-in hover. However, instead of immediately calling the onMouseOver function, it waits until the user's mouse slows down enough before making the call.</p>\n\n<p>Why? To delay or prevent the accidental firing of animations or ajax calls. Simple timeouts work for small areas, but if your target area is large it may execute regardless of intent.</p>\n\n<pre><code>var config = {    \n sensitivity: 3, // number = sensitivity threshold (must be 1 or higher)    \n interval: 200, // number = milliseconds for onMouseOver polling interval    \n over: makeTall, // function = onMouseOver callback (REQUIRED)    \n timeout: 500, // number = milliseconds delay before onMouseOut    \n out: makeShort // function = onMouseOut callback (REQUIRED)\n};\n$(\"#demo3 li\").hoverIntent( config )\n</code></pre>\n\n<p><strong>Configuration Options</strong></p>\n\n<p><strong>sensitivity:</strong>\nIf the mouse travels fewer than this number of pixels between polling intervals, then the \"over\" function will be called. With the minimum sensitivity threshold of 1, the mouse must not move between polling intervals. With higher sensitivity thresholds you are more likely to receive a false positive. Default sensitivity: 7</p>\n\n<p><strong>interval:</strong>\nThe number of milliseconds hoverIntent waits between reading/comparing mouse coordinates. When the user's mouse first enters the element its coordinates are recorded. The soonest the \"over\" function can be called is after a single polling interval. Setting the polling interval higher will increase the delay before the first possible \"over\" call, but also increases the time to the next point of comparison. Default interval: 100</p>\n\n<p><strong>over:</strong>\nRequired. The function you'd like to call onMouseOver. Your function receives the same \"this\" and \"event\" objects as it would from jQuery's hover method.</p>\n\n<p><strong>timeout:</strong>\nA simple delay, in milliseconds, before the \"out\" function is called. If the user mouses back over the element before the timeout has expired the \"out\" function will not be called (nor will the \"over\" function be called). This is primarily to protect against sloppy/human mousing trajectories that temporarily (and unintentionally) take the user off of the target element... giving them time to return. Default timeout: 0</p>\n\n<p><strong>out:</strong>\nRequired. The function you'd like to call onMouseOut. Your function receives the same \"this\" and \"event\" objects as it would from jQuery's hover method. Note, hoverIntent will only call the \"out\" function if the \"over\" function has been called on that same run.</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<pre><code>$('.icon').on(\"mouseenter mouseleave\",\"li.icon &gt; ul\",function(e){\n   var $this = $(this);\n   if (e.type === 'mouseenter') {\n       clearTimeout( $this.data('timeout') );\n       $this.slideDown('fast');\n   }else{ // is mouseleave:\n       $this.data( 'timeout', setTimeout(function(){\n           $this.slideUp('fast');\n       },2000) );  \n   }\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following will stop the sliding from triggering by 2 seconds:</p>\n\n<pre><code>$('.icon').hover(function() {\n  $('li.icon &gt; ul').delay(2000).slideDown('fast');\n}, function() { \n  $('li.icon &gt; ul').slideUp('fast');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think this is code your need:</p>\n\n<pre><code>    jQuery( document ).ready( function($) {  \n    var navTimers = [];  \n    $('.icon').hover(function() { \n            var id = jQuery.data( this );  \n            var $this = $( this );  \n            navTimers[id] = setTimeout( function() {  \n                $this.children( 'ul' ).slideDown('fast');  \n                navTimers[id] = \"\";  \n            }, 300 );  \n        },  \n        function () {  \n            var id = jQuery.data( this );  \n            if ( navTimers[id] != \"\" ) {  \n                clearTimeout( navTimers[id] );  \n            } else {  \n                $( this ).children( \"ul\" ).slideUp('fast'); \n            }  \n        }  \n    );  \n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>or you could simply use \n    transition:all 2s ease-in-out. \nmake sure that you add -webkit, -moz and -o for different browsers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a drop down menu. Now when it's slided down to multiple levels, I'd like it to add wait time for like 2 secs, before it disappears, so the user can get back in, when he breaks the <code>.hover()</code> by mistake.</p>\n\n<p>Is it possible?</p>\n\n<p>my code for the slide:</p>\n\n<pre><code>$('.icon').hover(function() {\n        $('li.icon &gt; ul').slideDown('fast');\n    }, function() { \n        $('li.icon &gt; ul').slideUp('fast');\n    });\n</code></pre>\n",
            "last_activity_date": 1402333502,
            "question_id": 1089246,
            "score": 39,
            "tags": [
                "javascript",
                "jquery",
                "time",
                "hover",
                "settimeout"
            ],
            "title": "How to tell .hover() to wait?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I agree with @AndreM96 that the best approach is to display only a limited amount of rows, faster and better UX, this could be done with a pagination or with an infinite scroll.</p>\n\n<p>Infinite scroll with Angular is really simple with <a href=\"http://docs-angularjs-org-dev.appspot.com/api/ng.filter%3alimitTo\">limitTo</a> filter. You just have to set the initial limit and when the user asks for more data (I am using a button for simplicity) you increment the limit. </p>\n\n<pre><code>&lt;table&gt;\n    &lt;tr ng-repeat=\"d in data | limitTo:totalDisplayed\"&gt;&lt;td&gt;{{d}}&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;button class=\"btn\" ng-click=\"loadMore()\"&gt;Load more&lt;/button&gt;\n\n//the controller\n$scope.totalDisplayed = 20;\n\n$scope.loadMore = function () {\n  $scope.totalDisplayed += 20;  \n};\n\n$scope.data = data;\n</code></pre>\n\n<p>Here is a <a href=\"http://jsbin.com/oricad/1/edit\">JsBin</a>.</p>\n\n<p>This approach could be a problem for phones because usually they lag when scrolling a lot of data, so in this case I think a pagination fits better.</p>\n\n<p>To do it you will need the limitTo filter and also a custom filter to define the starting point of the data being displayed.</p>\n\n<p>Here is a <a href=\"http://jsbin.com/ilugum/2/edit\">JSBin</a> with a pagination.</p>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p>If all your rows have equal height, you should definitely take a look at the virtualizing ng-repeat: <a href=\"http://kamilkp.github.io/angular-vs-repeat/\" rel=\"nofollow\">http://kamilkp.github.io/angular-vs-repeat/</a></p>\n\n<p>This <a href=\"http://kamilkp.github.io/angular-vs-repeat/\" rel=\"nofollow\">demo</a> looks very promising (and it supports inertial scrolling)</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have a huge dataset of several thousand rows with around 10 fields each, about 2MBs of data. I need to display it in the browser. Most straightforward approach (fetch data, put it into <code>$scope</code>, let <code>ng-repeat=\"\"</code> do its job) works fine, but it freezes the browser for about half of a minute when it starts inserting nodes into DOM. How should I approach this problem?</p>\n\n<p>One option is to append rows to <code>$scope</code> incrementally and wait for <code>ngRepeat</code> to finish inserting one chunk into DOM before moving to the next one. But AFAIK ngRepeat does not report back when it finishes \"repeating\", so it's going to be ugly.</p>\n\n<p>Other option is to split data on the server into pages and fetch them in multiple requests, but that's even uglier.</p>\n\n<p>I looked through Angular documentation in search of something like <code>ng-repeat=\"data in dataset\" ng-repeat-steps=\"500\"</code>, but found nothing. I am fairly new to Angular ways, so it is possible that I am missing the point completely. What are the best practices at this?</p>\n",
            "last_activity_date": 1424957139,
            "question_id": 17348058,
            "score": 32,
            "tags": [
                "javascript",
                "angularjs",
                "angularjs-ng-repeat"
            ],
            "title": "How to improve performance of ngRepeat over a huge dataset (angular.js)?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I thnk the answers for these questions are to long for stackoverflow.</p>\n\n<p>I'd recommend storing the votes in a Database.</p>\n\n<p>You don't mention a server-side programming language.</p>\n\n<p>please give us some more information</p>\n\n<p><a href=\"http://www.ajaxprojects.com/ajax/tutorialdetails.php?itemid=109\" rel=\"nofollow\">This</a> might help you get started</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You create the buttons, which can be links or images or whatever. Now hook a JavaScript function up to each button's click event. On clicking, the function fires and</p>\n\n<ul>\n<li>Sends a request to the server code that says, more or less, +1 or -1.</li>\n<li>Server code takes over. This will vary wildly depending on what framework you use (or don't) and a bunch of other things.</li>\n<li>Code connects to the database and runs a query to +1 or -1 the score. How this happens will vary wildly depending on your database design, but it'll be something like <code>UPDATE posts SET score=score+1 WHERE score_id={{insert id here}};</code>.</li>\n<li>Depending on what the database says, the server returns a success code or a failure code  as the AJAX request response.</li>\n<li>Response gets sent to AJAX, asynchronously.</li>\n<li>The JS response function updates the score if it's a success code, displays an error if it's a failure.</li>\n</ul>\n\n<p>You <em>can</em> store the code in a variable, but this is complicated and depends on how well you know the semantics of your code's runtime environment. It eventually needs to be pushed to persistent storage anyway, so using the database 100% is a good initial solution. When the time for optimizing performance comes, there are enough software in the world to cache database queries to make you feel woozy so it's not that big a deal.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is a dirty/untested theoretical implementation using jQuery/Django.</p>\n\n<p>We're going to assume the voting up and down is for questions/answers like on this site, but that can obviously be adjusted to your real life use case.</p>\n\n<h3>The template</h3>\n\n<pre><code>&lt;div id=\"answer_595\" class=\"answer\"&gt;\n  &lt;img src=\"vote_up.png\" class=\"vote up\"&gt;\n  &lt;div class=\"score\"&gt;0&lt;/div&gt;\n  &lt;img src=\"vote_down.png\" class=\"vote down\"&gt;\n  Blah blah blah this is my answer.\n&lt;/div&gt;\n\n&lt;div id=\"answer_596\" class=\"answer\"&gt;\n  &lt;img src=\"vote_up.png\" class=\"vote up\"&gt;\n  &lt;div class=\"score\"&gt;0&lt;/div&gt;\n  &lt;img src=\"vote_down.png\" class=\"vote down\"&gt;\n  Blah blah blah this is my other answer.\n&lt;/div&gt;\n</code></pre>\n\n<h3>Javascript</h3>\n\n<pre><code>$(function() {\n    $('div.answer img.vote').click(function() {\n        var id = $(this).parents('div.answer').attr('id').split('_')[1];\n        var vote_type = $(this).hasClass('up') ? 'up' : 'down';\n        if($(this).hasClass('selected')) {\n            $.post('/vote/', {id: id, type: vote_type}, function(json) {\n                if(json.success == 'success') {\n                    $('#answer_' + id)\n                     .find('img.' + vote_type);\n                     .attr('src', 'vote_' + vote_type + '_selected.png')\n                     .addClass('selected');\n                    $('div.score', '#answer_' + id).html(json.score);\n                }\n            });\n        } else {\n            $.post('/remove_vote/', {id: id, type: vote_type}, function(json) {\n                if(json.success == 'success') {\n                    $('#answer_' + id)\n                     .find('img.' + vote_type);\n                     .attr('src', 'vote_' + vote_type + '.png')\n                     .removeClass('selected');\n                    $('div.score', '#answer_' + id).html(json.score);\n                }\n            });                \n        }\n    });\n});\n</code></pre>\n\n<h3>Django views</h3>\n\n<pre><code>def vote(request):\n    if request.method == 'POST':\n        try:\n            answer = Answer.objects.get(pk=request.POST['id'])\n        except Answer.DoesNotExist:\n            return HttpResponse(\"{'success': 'false'}\")\n\n        try:\n            vote = Vote.objects.get(answer=answer, user=request.user)\n        except Vote.DoesNotExist:\n            pass\n        else:\n            return HttpResponse(\"{'success': 'false'}\")\n\n        if request.POST['type'] == 'up':\n            answer.score = answer.score + 1\n        else:\n            answer.score = answer.score - 1\n\n        answer.save()\n\n        Vote.objects.create(answer=answer,\n                            user=request.user,\n                            type=request.POST['type'])\n\n        return HttpResponse(\"{'success':'true', 'score':\" + answer.score + \"}\")\n    else:\n        raise Http404('What are you doing here?')\n\ndef remove_vote(request):\n    if request.method == 'POST':\n        try:\n            answer = Answer.objects.get(pk=request.POST['id'])\n        except Answer.DoesNotExist:\n            return HttpResponse(\"{'success': 'false'}\")\n\n        try:\n            vote = Vote.objects.get(answer=answer, user=request.user)\n        except Vote.DoesNotExist:\n            return HttpResponse(\"{'success': 'false'}\")\n        else:\n            vote.delete()\n\n        if request.POST['type'] == 'up':\n            answer.score = answer.score - 1\n        else:\n            answer.score = answer.score + 1\n\n        answer.save()\n\n        return HttpResponse(\"{'success':'true', 'score':\" + answer.score + \"}\")\n    else:\n        raise Http404('What are you doing here?')\n</code></pre>\n\n<p>Yikes. When I started answering this question I didn't mean to write this much but I got carried away a little bit. You're still missing an initial request to get all the votes when the page is first loaded and such, but I'll leave that as an exercise to the reader. Anyhow, if you <em>are</em> in fact using Django and are interested in a more tested/real implemention of the Stackoverflow voting, I suggest you check out the <a href=\"http://cnprog.googlecode.com/svn/trunk/\">source code</a> for cnprog.com, a Chinese clone of Stackoverflow written in Python/Django. They released their code and it is pretty decent.</p>\n",
                    "is_accepted": true,
                    "score": 55
                },
                {
                    "body": "<p>A couple of points no one has mentioned:</p>\n\n<ul>\n<li>You don't want to use GET when changing the state of your database. Otherwise I could put an image on my site with <code>src=\"http://stackoverflow.com/question_555/vote/up/answer_3/\"</code>.</li>\n<li>You also need <a href=\"http://docs.djangoproject.com/en/dev/ref/contrib/csrf/\">csrf (Cross Site Request Forgery) protection</a></li>\n<li>You must record <strong>who makes each vote</strong> to avoid people voting more than once for a particular question. Whether this is by IP address or userid.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p><strong>Problems</strong></p>\n\n<ol>\n<li>how to make an Ajax buttons (upward and downward arrows) such that the number can increase or decrease</li>\n<li>how to save the action af an user to an variable NumberOfVotesOfQuestionID</li>\n</ol>\n\n<p>I am not sure whether I should use database or not for the variable. However, I know that there is an easier way too to save the number of votes.</p>\n\n<p><strong>How can you solve those problems?</strong></p>\n\n<p>[edit]</p>\n\n<p>The server-side programming language is Python.</p>\n",
            "last_activity_date": 1255792454,
            "question_id": 719194,
            "score": 28,
            "tags": [
                "javascript",
                "python",
                "html",
                "ajax"
            ],
            "title": "How can you make a vote-up-down button like in Stackoverflow?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Since Javascript hitch-hikes to your computer with webpages from just about <em>anywhere</em>, it would be dangerous to give it the ability to write to your disk.</p>\n\n<p>It's not allowed. Are you thinking that the Chrome extension will require user interaction? Otherwise it might fall into the same category.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There's no way that I know of to silently save files to the user's drive, which is what it seems like you're hoping to do.  I think you can ASK for files to be saved one at a time (prompting the user each time) using something like:</p>\n\n<pre><code>function saveAsMe (filename)\n{\ndocument.execCommand('SaveAs',null,filename)\n}\n</code></pre>\n\n<p>If you wanted to only prompt the user once, you could grab all the images silently, zip them up in a bundle, then have the user download that.  This might mean doing XmlHttpRequest on all the files, zipping them in Javascript, UPLOADING them to a staging area, and then asking the user if they would like to download the zip file.  Sounds absurd, I know.</p>\n\n<p>There are local storage options in the browser, but they are only for the developer's use, within the sandbox, as far as I know.  (e.g. Gmail offline caching.)  See recent announcements from Google like <a href=\"http://blog.chromium.org/2010/01/more-resources-for-developers.html\">this one</a>.  </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use <a href=\"http://www.html5rocks.com/en/tutorials/file/filesystem/\">HTML5 FileSystem features</a> to write to disk using the <a href=\"http://updates.html5rocks.com/2011/08/Downloading-resources-in-HTML5-a-download\">Download</a> API. That is the only way to download files to disk and it is limited.</p>\n\n<p>You could take a look at NPAPI plugin. Another way to do what you need is simply send a request to an external website via XHR POST and then another GET request to retrieve the file back which will appear as a save file dialog.</p>\n\n<p>For example, for my browser extension <a href=\"https://github.com/mohamedmansour/my-hangouts-extension/\">My Hangouts</a> I created a utility to download a photo from HTML5 Canvas directly to disk. You can take a look at the code here <a href=\"https://github.com/mohamedmansour/my-hangouts-extension/blob/master/js/modules/capture_moments/capture_gallery_downloader.js\">capture_gallery_downloader.js</a> the code that does that is:</p>\n\n<pre><code>var url = window.webkitURL || window.URL || window.mozURL || window.msURL;\nvar a = document.createElement('a');\na.download = 'MyHangouts-MomentCapture.jpg';\na.href = url.createObjectURL(dataURIToBlob(data.active, 'jpg'));\na.textContent = 'Click here to download!';\na.dataset.downloadurl = ['jpg', a.download, a.href].join(':');\n</code></pre>\n\n<p>If you would like the implementation of converting a URI to a Blob in HTML5 here is how I did it:</p>\n\n<pre><code>/**\n * Converts the Data Image URI to a Blob.\n *\n * @param {string} dataURI base64 data image URI.\n * @param {string} mimetype the image mimetype.\n */\nvar dataURIToBlob = function(dataURI, mimetype) {\n  var BASE64_MARKER = ';base64,';\n  var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\n  var base64 = dataURI.substring(base64Index);\n  var raw = window.atob(base64);\n  var rawLength = raw.length;\n  var uInt8Array = new Uint8Array(rawLength);\n\n  for (var i = 0; i &lt; rawLength; ++i) {\n    uInt8Array[i] = raw.charCodeAt(i);\n  }\n\n  var bb = new this.BlobBuilder();\n  bb.append(uInt8Array.buffer);\n  return bb.getBlob(mimetype);\n};\n</code></pre>\n\n<p>Then after the user clicks on the download button, it will use the \"download\" HTML5 File API to download the blob URI into a file.</p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>Consider using  the <a href=\"http://www.html5rocks.com/en/tutorials/file/filesystem/\" rel=\"nofollow\">HTML5 FileSystem features</a> that make writing to files possible using Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://chrome.google.com/webstore/detail/bhkplggmgfmnekjcipahhjjlejhafoad/\" rel=\"nofollow\">Google Webstore</a>\n<br/>\n<a href=\"https://github.com/DrJKL/dragToSaveImages\" rel=\"nofollow\">Github</a></p>\n\n<p>I made an extension that does something like this, if anyone here is still interested.\nIt uses an XMLHTTPRequest to grab the object, which in this case is presumed to be an image, then makes an ObjectURL to it, a link to that ObjectUrl, and clicks on the imaginary link.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I had long been wishing to make a chrome extension for myself to batch download images. Yet every time I got frustrated because the only seemingly applicable option is NPAPI, which both chrome and firefox seem to have not desire in supporting any longer. </p>\n\n<p>I suggest those who still wanted to implement 'save-file-on-disk' functionality to have a look at this <a href=\"http://stackoverflow.com/questions/19802032/how-can-a-chrome-extension-save-many-files-to-a-user-specified-directory\">Stackoverflow post</a>, the comment below this post help me a lot.</p>\n\n<p>Now since chrome 31+, the <code>chrome.downloads</code> API became stable. We can use it to programmatically download file. If the user didn't set the <code>ask me before every download</code> advance option in chrome setting, we can save file without prompting user to confirm!</p>\n\n<p>Here is what I use (at extension's background page):</p>\n\n<pre><code>    // remember to add \"permissions\": [\"downloads\"] to manifest.json\n    // this snippet is inside a onMessage() listener function\n    var imgurl = \"https://www.google.com.hk/images/srpr/logo11w.png\";\n    chrome.downloads.download({url:imgurl},function(downloadId){\n        console.log(\"download begin, the downId is:\" + downloadId);\n    });\n</code></pre>\n\n<p>Though it's a pity that chrome still doesn't provide an <code>Event</code> when the download completes.<code>chrome.downloads.download</code>'s callback function is called when the download <code>begin</code> successfully (not on completed)</p>\n\n<p>The Official documentation about <code>chrome.downloads</code>is <a href=\"https://developer.chrome.com/extensions/downloads\" rel=\"nofollow\">here</a>.</p>\n\n<p>It's not my original idea about the solution, but I posted here hoping that it may be of some use to someone.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm currently creating an extension for google chrome which can save all images or links to images on the harddrive.</p>\n\n<p>The problem is I don't know how to save file on disk with JS or with Google Chrome Extension API.</p>\n\n<p>Have you got an idea ?</p>\n",
            "last_activity_date": 1403877568,
            "question_id": 2153979,
            "score": 27,
            "tags": [
                "javascript",
                "google-chrome",
                "google-chrome-extension"
            ],
            "title": "Chrome extension: How to save a file on disk"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>One way to provide headers and footers that appear invariant is via CSS - here is an example of a fixed footer (notice the \"position: fixed;\"):</p>\n\n<pre><code>#Footer  { \n  font-size:xx-small; \n  text-align:left; \n  width:100%; \n  bottom:0px; \n  position:fixed; \n  left:0px; \n  background-color: #CCCCCC; \n  border-top: 1px solid #999999; \n  padding:4px; \n  padding-right:20px; \n  color:#666666; \n}\n</code></pre>\n\n<p>You'll want to make sure that you add some Margin-Bottom to your page divs (those that fill the main portion of the page) to leave room for the fixed footer (same with a header using Margin-Top).</p>\n\n<p>This does <em>not</em> actually stay on the page but, because the positioning is so tight and invariant, it will appear as if it does unless your page loads take too long.  I don't know if this is what FaceBook does but it will give you much the same effect.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Well, the way to accomplish such a thing would be through AJAX, but as far as I can see, facebook in fact doesn't do this...  I just checked, and it refreshes the header like most sites...</p>\n\n<p>Edit:  When I first answered this, I was looking at Facebook with Google Chrome (2.0), which for whatever reason, doesn't actually do it this way-->when I click on My Profile from the homepage, it gives me this in the address bar: <a href=\"http://www.facebook.com/profile.php?id=1304250071&amp;ref=profile\" rel=\"nofollow\">http://www.facebook.com/profile.php?id=1304250071&amp;ref=profile</a></p>\n\n<p>and therefore refreshes the whole page... Strange</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Refer to Mark Brittingham's answer for how to style it, although I don't think that is what you are asking here.  I will give you the technical details on how it works (and why it is fairly brilliant).</p>\n\n<p>Take a look at the status bar when you hover over the Profile link in the header...</p>\n\n<blockquote>\n  <p><a href=\"http://www.facebook.com/profile.php?id=514287820&amp;ref=profile\">http://www.facebook.com/profile.php?id=514287820&amp;ref=profile</a></p>\n</blockquote>\n\n<p>That is where that &lt;a&gt; tag is pointed to.  Now look at the address bar when you click it...</p>\n\n<blockquote>\n  <p><a href=\"http://www.facebook.com/home.php#/profile.php?id=514287820&amp;ref=profile\">http://www.facebook.com/home.php#/profile.php?id=514287820&amp;ref=profile</a></p>\n</blockquote>\n\n<p>Notice the \"#\" <a href=\"http://en.wikipedia.org/wiki/Number%5Fsign#Other%5Fuses\">fragment identifier/hash</a>?  This basically proves that you haven't left the page and the previous request was made with AJAX.  They are intercepting the click events on these links, and overriding the default functionality with something of their own.</p>\n\n<p>To make this happen with Javascript, all you have to do is assign a click event handler to those links like so...</p>\n\n<pre><code>var header = document.getElementById('header');\nvar headerLinks = header.getElementsByTagName('a');\n\nfor(var i = 0, l = headerLinks.length; i &lt; l; i++) {\n  headerLinks[i].onclick = function() {\n    var href = this.href;\n\n    //Load the AJAX page (this is a whole other topic)\n    loadPage(href);  \n\n    //Update the address bar to make it look like you were redirected\n    location.hash = '#' + href;\n\n    //Unfocus the link to make it look like you were redirected\n    this.blur();\n\n    //Prevent the natural HTTP redirect\n    return false;\n  }\n}\n</code></pre>\n\n<p>One fabulous benefit to this approach is that it allows the back button to be functional (with a little added trickery), which has traditionally been a painful side effect of chronic AJAX usage.  I'm not 100% sure of what this trickery is, but I bet it's somehow able to detect when the browser modifies the fragment identifier (possibly by checking it every ~500 milliseconds).</p>\n\n<p>As a side note, changing the hash to a value that can't be found within the DOM (via element ID) will scroll the page all the way to the top.  To see what I'm talking about: you scroll down about 10 pixels from the top of Facebook, exposing half of the top menu. Click on one of the items, it will jump it back up to the top of the page as soon as the fragment identifier gets updated (without <em>any</em> window repaint/redraw delay).</p>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>With CSS absolute/fixed positioning, the div tags containing the headers and footers can be anywhere in the HTML.  Like at the top!</p>\n\n<p>On most current browsers there is a render delay, one quarter second for Firefox I believe, so that the page will not display partially rendered content in quick flashes and waste a lot of time drawing as network data comes in.</p>\n\n<p>So what can happen is that the new page quickly returns HTML containing the styles and header and footer.  This content can be rendered immediately by the browser, so when it displays the next page, it appears as if those didn't change.</p>\n\n<p>If the page is generating dynamic content, a good trick is to put all the static information at the top, output that and flush the data buffer.  Then do the dynamic database queries and such.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To augment <a href=\"http://stackoverflow.com/users/54420/josh-stodola\">Josh Stodola's</a> answer: In my understanding the <a href=\"http://developer.yahoo.com/yui/history/\" rel=\"nofollow\">YUI Bookmark Manager</a> does exactly this job.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>When browsing through Facebook pages the header and fixed footer section remain visible between page loads AND the URL in the address bar changes accordingly. At least, that's the illusion I get. </p>\n\n<p>How does Facebook achieve that technically speaking?</p>\n",
            "last_activity_date": 1247859461,
            "question_id": 668431,
            "score": 15,
            "tags": [
                "javascript",
                "html",
                "ajax",
                "facebook",
                "navigation"
            ],
            "title": "How does Facebook keep the header and footer fixed while loading a different page?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p><a href=\"http://swfupload.org/\" rel=\"nofollow\">SWFUpload</a> is probably the leading \"competitor\" to that.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Yahoo's <a href=\"http://yuilibrary.com/yui/docs/uploader/uploader-dd.html\" rel=\"nofollow\">YUI Uploader</a> is your friend.</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>Alternatives to SWFUpload:</p>\n\n<ul>\n<li><a href=\"http://developer.yahoo.com/yui/uploader/\" rel=\"nofollow\">YUI Uploader</a></li>\n<li><a href=\"http://www.pixeline.be/experiments/jqUploader/\" rel=\"nofollow\">jqUploader</a> (jQuery plugin)</li>\n<li><a href=\"http://weblogs.asp.net/jstengel/archive/2008/04/25/flash-file-upload-server-control.aspx\" rel=\"nofollow\">Flash/AJAX File Upload w/ Progress Server Control</a> (ASP .NET based)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I've used <a href=\"http://digitarald.de/project/fancyupload/\" rel=\"nofollow\">FancyUpload</a> plenty of times and it's absolutely fantastic. The only problem (but this is true for most flash uploaders, I guess) is session handling - if you're using sessions you're going to have to pass along the session ID to the flash file and back again.</p>\n\n<p><a href=\"http://digitarald.de/\" rel=\"nofollow\">digitarald</a> (the author) has a new version of FancyUpload in beta now that works with Flash 10 (something a lot of the other uploaders don't). According to him it should be very simple to upgrade from FancyUpload2 to the new version, once it's released.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://www.uploadify.com/\" rel=\"nofollow\">Uploadify</a> is a jQuery / Flash hybrid (if you don't feel like adding in YUI just to handle uploads).  </p>\n\n<p><a href=\"http://www.uploadify.com/demo/\" rel=\"nofollow\">Demo</a></p>\n\n<p><a href=\"http://www.uploadify.com/documentation/\" rel=\"nofollow\">How to implement</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><a href=\"http://bitbucket.org/kmike/gearsuploader/\" rel=\"nofollow\">Google Gears solution with client-side image resizing</a> (mine, sorry for advertisment)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Agile Uploader now supports multiple files as of version 2.0. \n<a href=\"http://www.shift8creative.com/projects/agile-uploader/index.html\" rel=\"nofollow\">http://www.shift8creative.com/projects/agile-uploader/index.html</a></p>\n\n<p>Here's a direct link to a demo:\n<a href=\"http://www.shift8creative.com/agile-uploader/examples/all_files.php\" rel=\"nofollow\">http://www.shift8creative.com/agile-uploader/examples/all_files.php</a></p>\n\n<p>It allows all types of files and can actually resize images before upload to help save on bandwidth costs and server processing power. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://www.plupload.com/\" rel=\"nofollow\">Plupload</a> seems to be interesting...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It looks like a new entry into this field is 'jQuery file upload':</p>\n\n<p><a href=\"https://github.com/blueimp/jQuery-File-Upload/wiki\" rel=\"nofollow\">Wiki / documentation</a></p>\n\n<p><a href=\"http://blueimp.github.com/jQuery-File-Upload/\" rel=\"nofollow\">Demo page</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://www.dropzonejs.com/\" rel=\"nofollow\">Dropzone</a> worked for me for simple drag-and-drop functionality that degrades gracefully. Very easy to set up.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Specifically, I'm looking for a client-side, JavaScript and / or Flash based multiple file uploader.  The closest thing I've found is <a href=\"http://digitarald.de/project/fancyupload/\">FancyUpload</a>.  Anyone have experience with it?  If not, what else is out there?</p>\n",
            "last_activity_date": 1386934766,
            "question_id": 207298,
            "score": 14,
            "tags": [
                "javascript",
                "ajax",
                "flash",
                "file-upload",
                "multifile-uploader"
            ],
            "title": "What is the best multiple file JavaScript / Flash file uploader?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>arrow keys are only triggered by <code>onkeydown</code>, not <code>onkeypress</code></p>\n\n<p>keycodes are:</p>\n\n<ul>\n<li>left = 37</li>\n<li>up  = 38</li>\n<li>right = 39</li>\n<li>down = 40</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 178
                },
                {
                    "body": "<p>I've been able to trap them with jQuery:</p>\n\n<pre><code>$(document).keypress(function (eventObject) {\n    alert(eventObject.keyCode);\n});\n</code></pre>\n\n<p>An example: <a href=\"http://jsfiddle.net/AjKjU/\" rel=\"nofollow\">http://jsfiddle.net/AjKjU/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use <code>keydown</code>, not <code>keypress</code> for non-printable keys such as arrow keys:</p>\n\n<pre><code>function checkKey(e) {\n    e = e || window.event;\n    alert(e.keyCode);\n}\n\ndocument.onkeydown = checkKey;\n</code></pre>\n\n<p>The best JavaScript key event reference I've found (beating the pants off quirksmode, for example) is here: <a href=\"http://unixpapa.com/js/key.html\">http://unixpapa.com/js/key.html</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>function checkArrowKeys(e){\n    var arrs= ['left', 'up', 'right', 'down'], \n    key= window.event? event.keyCode: e.keyCode;\n    if(key &amp;&amp; key&gt;36 &amp;&amp; key&lt;41) alert(arrs[key-37]);\n}\ndocument.onkeydown= checkArrowKeys;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>On key up and down call function. There are different codes for each key.</p>\n\n<pre><code>document.onkeydown = checkKey;\n\nfunction checkKey(e) {\n\n    e = e || window.event;\n\n    if (e.keyCode == '38') {\n        // up arrow\n    }\n    else if (e.keyCode == '40') {\n        // down arrow\n    }\n    else if (e.keyCode == '37') {\n       // left arrow\n    }\n    else if (e.keyCode == '39') {\n       // right arrow\n    }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>I was also looking for this answer until I came across this post.</p>\n\n<p>I've found another solution to know the keycode of the different keys, courtesy to my problem.  I just wanted to share my solution.</p>\n\n<p>Just use keyup/keydown event to write the value in the console/alert the same using <code>event.keyCode</code>. like-</p>\n\n<pre><code>console.log(event.keyCode) \n\n// or\n\nalert(event.keyCode)\n</code></pre>\n\n<p>- rupam</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Re answers that you need <code>keydown</code> not <code>keypress</code>. </p>\n\n<p>Assuming you want to move something continuously while the key is pressed, I find that <code>keydown</code> works for all browsers except Opera. For Opera, <code>keydown</code> only triggers on 1st press. To accommodate Opera use:</p>\n\n<pre><code>document.onkeydown = checkKey;\ndocument.onkeypress = checkKey;\nfunction checkKey(e)\n{ etc etc\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Possibly the tersest formulation:</p>\n\n<pre><code>document.onkeydown = function(e) {\n    switch (e.keyCode) {\n        case 37:\n            alert('left');\n            break;\n        case 38:\n            alert('up');\n            break;\n        case 39:\n            alert('right');\n            break;\n        case 40:\n            alert('down');\n            break;\n    }\n};\n</code></pre>\n\n<p>Demo (thanks to user Angus Grant): <a href=\"http://jsfiddle.net/angusgrant/E3tE6/\">http://jsfiddle.net/angusgrant/E3tE6/</a></p>\n\n<p>This should work cross-browser.  Leave a comment if there is a browser where it does not work.</p>\n\n<p>There are other ways to get the key code (e.which, e.charCode, and window.event instead of e), but they should not be necessary.  You can try most of them out at <a href=\"http://www.asquare.net/javascript/tests/KeyCode.html\">http://www.asquare.net/javascript/tests/KeyCode.html</a>. \nNote that event.keycode does not work with onkeypress in Firefox, but it does work with onkeydown.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>That is the working code for chrome and firefox </p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js\"&gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\n    function leftArrowPressed() {\n      alert(\"leftArrowPressed\" );\n      window.location = prevUrl  \n    }\n\n    function rightArrowPressed() {\n      alert(\"rightArrowPressed\" );\n      window.location = nextUrl  \n    }\n    function topArrowPressed() {\n      alert(\"topArrowPressed\" );\n      window.location = prevUrl  \n    }\n\n    function downArrowPressed() {\n      alert(\"downArrowPressed\" );\n      window.location = nextUrl  \n    }\n\n        document.onkeydown = function(evt) {\n                        var nextPage = $(\"#next_page_link\")\n                        var prevPage = $(\"#previous_page_link\")\n                        nextUrl = nextPage.attr(\"href\")\n                        prevUrl = prevPage.attr(\"href\")\n        evt = evt || window.event;\n        switch (evt.keyCode) {\n                case 37:\n                leftArrowPressed(nextUrl);\n                break;\n\n                case 38:\n                topArrowPressed(nextUrl);\n                break;\n\n                 case 39:\n                rightArrowPressed(prevUrl);\n                break;\n\n                case 40:\n                downArrowPressed(prevUrl);\n                break;\n\n        }\n    };\n\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;\n&lt;a id=\"previous_page_link\" href=\"http://www.latest-tutorial.com\"&gt;Latest Tutorials&lt;/a&gt; \n&lt;a id=\"next_page_link\" href=\"http://www.zeeshanakhter.com\"&gt;Zeeshan Akhter&lt;/a&gt;\n &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>That's shorter.</p>\n\n<p><code>function IsArrows (e) {\n   return (e.keyCode &gt;= 37 &amp;&amp; e.keyCode &lt;= 40); \n}</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's an example implementation:</p>\n\n<pre><code>var targetElement = $0 || document.body;\n\nfunction getArrowKeyDirection (keyCode) {\n  return {\n    37: 'left',\n    39: 'right',\n    38: 'up',\n    40: 'down'\n  }[keyCode];\n}\n\nfunction isArrowKey (keyCode) {\n  return !!getArrowKeyDirection(keyCode);\n}\n\ntargetElement.addEventListener('keydown', function (event) {\n  var direction,\n      keyCode = event.keyCode;\n\n  if (isArrowKey(keyCode)) {\n    direction = getArrowKeyDirection(keyCode);\n\n    console.log(direction);\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do I detect when one of the arrow keys are pressed? I used this to find out:</p>\n\n<pre><code>function checkKey(e) {\n    var event = window.event ? window.event : e;\n    if (true) {\n        alert(event.keyCode)\n    }\n}\n</code></pre>\n\n<p>Though it worked for every other key, it didn't for arrow keys (maybe because the browser is naturally supposed to scroll on these entries).</p>\n",
            "last_activity_date": 1423440311,
            "question_id": 5597060,
            "score": 88,
            "tags": [
                "javascript",
                "keyboard-events"
            ],
            "title": "Detecting arrow key presses in JavaScript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p><a href=\"http://geekswithblogs.net/svanvliet/archive/2005/03/24/textarea-cursor-position-with-javascript.aspx\" rel=\"nofollow\">This</a> blog post seems to address your question, but unfortunately the author admits he has only tested it in IE 6.</p>\n\n<blockquote>\n  <p>The DOM in IE does not provide information regarding relative position in terms of characters; however, it does provide bounding and offset values for browser-rendered controls.  Thus, I used these values to determine the relative bounds of a character. Then, using the JavaScript TextRange, I created a mechanism for working with such measures to calculate the Line and Column position for fixed-width fonts within a given TextArea.</p>\n  \n  <p>First, the relative bounds for the TextArea must be calculated based upon the size of the fixed-width font used.  To do this, the original value of the TextArea must be stored in a local JavaScript variable and clear the value.  Then, a TextRange is created to determine the Top and Left bounds of the TextArea.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Version 2 of My Hacky Experiment</strong></p>\n\n<p><em>This new version works with any font, which can be adjusted on demand, and any textarea size.</em></p>\n\n<p>After noticing that some of you are still trying to get this to work, I decided to try a new approach.  My results are FAR better this time around - at least on google chrome on linux.  I no longer have a windows PC available to me, so I can only test on chrome / firefox on Ubuntu.  My results work 100% consistently on Chrome, and let's say somewhere around 70 - 80% on Firefox, but I don't imagine it would be incredibly difficult to find the inconsistencies.</p>\n\n<p>This new version relies on a Canvas object.  In my <a href=\"http://enobrev.info/cursor2/\">example</a>, I actually show that very canvas - just so you can see it in action, but it could very easily be done with a hidden canvas object.</p>\n\n<p>This is most certainly a hack, and I apologize ahead of time for my rather thrown together code.  At the very least, in google chrome, it works consistently, no matter what font I set it to, or size of textarea.  I used <a href=\"http://stackoverflow.com/users/17174/sam-saffron\">Sam Saffron</a>'s example to show cursor coordinates (a gray-background div).  I also added a \"Randomize\" link, so you can see it work in different font / texarea sizes and styles, and watch the cursor position update on the fly.  I recommend looking at <a href=\"http://enobrev.info/cursor2/\">the full page demo</a> so you can better see the companion canvas play along.</p>\n\n<p><em>I'll summarize how it works</em>...</p>\n\n<p>The underlying idea is that we're trying to redraw the textarea on a canvas, as closely as possible.  Since the browser uses the same font engine for both and texarea, we can use canvas's font measurement functionality to figure out where things are.  From there, we can use the canvas methods available to us to figure out our coordinates.</p>\n\n<p>First and foremost, we adjust our canvas to match the dimensions of the textarea.  This is entirely for visual purposes since the canvas size doesn't really make a difference in our outcome.  Since Canvas doesn't actually provide a means of word wrap, I had to conjure (steal / borrow / munge together) a means of breaking up lines to as-best-as-possible match the textarea.  This is where you'll likely find you need to do the most cross-browser tweaking.</p>\n\n<p>After word wrap, everything else is basic math.  We split the lines into an array to mimic the word wrap, and now we want to loop through those lines and go all the way down until the point where our current selection ends.  In order to do that, we're just counting characters and once we surpass <code>selection.end</code>, we know we have gone down far enough.  Multiply the line count up until that point with the line-height and you have a <code>y</code> coordinate.  </p>\n\n<p>The <code>x</code> coordinate is very similar, except we're using <code>context.measureText</code>.  As long as we're printing out the right number of characters, that will give us the width of the line that's being drawn to Canvas, which happens to end after the last character written out, which is the character before the currentl <code>selection.end</code> position.</p>\n\n<p>When trying to debug this for other browsers, the thing to look for is where the lines don't break properly.  You'll see in some places that the last word on a line in canvas may have wrapped over on the textarea or vice-versa.  This has to do with how the browser handles word wraps.  As long as you get the wrapping in the canvas to match the textarea, your cursor should be correct.</p>\n\n<p>I'll paste the source below.  You should be able to copy and paste it, but if you do, I ask that you download your own copy of jquery-fieldselection instead of hitting the one on my server.  </p>\n\n<p>I've also upped <a href=\"http://enobrev.info/cursor2/\">a new demo</a> as well as <a href=\"http://jsfiddle.net/9QAtz/\">a fiddle</a>.</p>\n\n<p>Good luck!</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en-US\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;Tooltip 2&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"http://enobrev.info/cursor/js/jquery-fieldselection.js\"&gt;&lt;/script&gt;\n        &lt;style type=\"text/css\"&gt;\n            form {\n                float: left;\n                margin: 20px;\n            }\n\n            #textariffic {\n                height: 400px;\n                width: 300px;\n                font-size: 12px;\n                font-family: 'Arial';\n                line-height: 12px;\n            }\n\n            #tip {\n                width:5px;\n                height:30px;\n                background-color: #777;\n                position: absolute;\n                z-index:10000\n            }\n\n            #mock-text {\n                float: left;\n                margin: 20px;\n                border: 1px inset #ccc;\n            }\n\n            /* way the hell off screen */\n            .scrollbar-measure {\n                width: 100px;\n                height: 100px;\n                overflow: scroll;\n                position: absolute;\n                top: -9999px;\n            }\n\n            #randomize {\n                float: left;\n                display: block;\n            }\n        &lt;/style&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            var oCanvas;\n            var oTextArea;\n            var $oTextArea;\n            var iScrollWidth;\n\n            $(function() {\n                iScrollWidth = scrollMeasure();\n                oCanvas      = document.getElementById('mock-text');\n                oTextArea    = document.getElementById('textariffic');\n                $oTextArea   = $(oTextArea);\n\n                $oTextArea\n                        .keyup(update)\n                        .mouseup(update)\n                        .scroll(update);\n\n                $('#randomize').bind('click', randomize);\n\n                update();\n            });\n\n            function randomize() {\n                var aFonts      = ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Impact', 'Times New Roman', 'Verdana', 'Webdings'];\n                var iFont       = Math.floor(Math.random() * aFonts.length);\n                var iWidth      = Math.floor(Math.random() * 500) + 300;\n                var iHeight     = Math.floor(Math.random() * 500) + 300;\n                var iFontSize   = Math.floor(Math.random() * 18)  + 10;\n                var iLineHeight = Math.floor(Math.random() * 18)  + 10;\n\n                var oCSS = {\n                    'font-family':  aFonts[iFont],\n                    width:          iWidth + 'px',\n                    height:         iHeight + 'px',\n                    'font-size':    iFontSize + 'px',\n                    'line-height':  iLineHeight + 'px'\n                };\n\n                console.log(oCSS);\n\n                $oTextArea.css(oCSS);\n\n                update();\n                return false;\n            }\n\n            function showTip(x, y) {\n                $('#tip').css({\n                      left: x + 'px',\n                      top: y + 'px'\n                  });\n            }\n\n            // http://stackoverflow.com/a/11124580/14651\n            // http://stackoverflow.com/a/3960916/14651\n\n            function wordWrap(oContext, text, maxWidth) {\n                var aSplit = text.split(' ');\n                var aLines = [];\n                var sLine  = \"\";\n\n                // Split words by newlines\n                var aWords = [];\n                for (var i in aSplit) {\n                    var aWord = aSplit[i].split('\\n');\n                    if (aWord.length &gt; 1) {\n                        for (var j in aWord) {\n                            aWords.push(aWord[j]);\n                            aWords.push(\"\\n\");\n                        }\n\n                        aWords.pop();\n                    } else {\n                        aWords.push(aSplit[i]);\n                    }\n                }\n\n                while (aWords.length &gt; 0) {\n                    var sWord = aWords[0];\n                    if (sWord == \"\\n\") {\n                        aLines.push(sLine);\n                        aWords.shift();\n                        sLine = \"\";\n                    } else {\n                        // Break up work longer than max width\n                        var iItemWidth = oContext.measureText(sWord).width;\n                        if (iItemWidth &gt; maxWidth) {\n                            var sContinuous = '';\n                            var iWidth = 0;\n                            while (iWidth &lt;= maxWidth) {\n                                var sNextLetter = sWord.substring(0, 1);\n                                var iNextWidth  = oContext.measureText(sContinuous + sNextLetter).width;\n                                if (iNextWidth &lt;= maxWidth) {\n                                    sContinuous += sNextLetter;\n                                    sWord = sWord.substring(1);\n                                }\n                                iWidth = iNextWidth;\n                            }\n                            aWords.unshift(sContinuous);\n                        }\n\n                        // Extra space after word for mozilla and ie\n                        var sWithSpace = (jQuery.browser.mozilla || jQuery.browser.msie) ? ' ' : '';\n                        var iNewLineWidth = oContext.measureText(sLine + sWord + sWithSpace).width;\n                        if (iNewLineWidth &lt;= maxWidth) {  // word fits on current line to add it and carry on\n                            sLine += aWords.shift() + \" \";\n                        } else {\n                            aLines.push(sLine);\n                            sLine = \"\";\n                        }\n\n                        if (aWords.length === 0) {\n                            aLines.push(sLine);\n                        }\n                    }\n                }\n                return aLines;\n            }\n\n            // http://davidwalsh.name/detect-scrollbar-width\n            function scrollMeasure() {\n                // Create the measurement node\n                var scrollDiv = document.createElement(\"div\");\n                scrollDiv.className = \"scrollbar-measure\";\n                document.body.appendChild(scrollDiv);\n\n                // Get the scrollbar width\n                var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n                // Delete the DIV\n                document.body.removeChild(scrollDiv);\n\n                return scrollbarWidth;\n            }\n\n            function update() {\n                var oPosition  = $oTextArea.position();\n                var sContent   = $oTextArea.val();\n                var oSelection = $oTextArea.getSelection();\n\n                oCanvas.width  = $oTextArea.width();\n                oCanvas.height = $oTextArea.height();\n\n                var oContext    = oCanvas.getContext(\"2d\");\n                var sFontSize   = $oTextArea.css('font-size');\n                var sLineHeight = $oTextArea.css('line-height');\n                var fontSize    = parseFloat(sFontSize.replace(/[^0-9.]/g, ''));\n                var lineHeight  = parseFloat(sLineHeight.replace(/[^0-9.]/g, ''));\n                var sFont       = [$oTextArea.css('font-weight'), sFontSize + '/' + sLineHeight, $oTextArea.css('font-family')].join(' ');\n\n                var iSubtractScrollWidth = oTextArea.clientHeight &lt; oTextArea.scrollHeight ? iScrollWidth : 0;\n\n                oContext.save();\n                oContext.clearRect(0, 0, oCanvas.width, oCanvas.height);\n                oContext.font = sFont;\n                var aLines = wordWrap(oContext, sContent, oCanvas.width - iSubtractScrollWidth);\n\n                var x = 0;\n                var y = 0;\n                var iGoal = oSelection.end;\n                aLines.forEach(function(sLine, i) {\n                    if (iGoal &gt; 0) {\n                        oContext.fillText(sLine.substring(0, iGoal), 0, (i + 1) * lineHeight);\n\n                        x = oContext.measureText(sLine.substring(0, iGoal + 1)).width;\n                        y = i * lineHeight - oTextArea.scrollTop;\n\n                        var iLineLength = sLine.length;\n                        if (iLineLength == 0) {\n                            iLineLength = 1;\n                        }\n\n                        iGoal -= iLineLength;\n                    } else {\n                        // after\n                    }\n                });\n                oContext.restore();\n\n                showTip(oPosition.left + x, oPosition.top + y);\n            }\n\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;a href=\"#\" id=\"randomize\"&gt;Randomize&lt;/a&gt;\n\n        &lt;form id=\"tipper\"&gt;\n            &lt;textarea id=\"textariffic\"&gt;Aliquam urna. Nullam augue dolor, tincidunt condimentum, malesuada quis, ultrices at, arcu. Aliquam nunc pede, convallis auctor, sodales eget, aliquam eget, ligula. Proin nisi lacus, scelerisque nec, aliquam vel, dictum mattis, eros. Curabitur et neque. Fusce sollicitudin. Quisque at risus. Suspendisse potenti. Mauris nisi. Sed sed enim nec dui viverra congue. Phasellus velit sapien, porttitor vitae, blandit volutpat, interdum vel, enim. Cras sagittis bibendum neque. Proin eu est. Fusce arcu. Aliquam elit nisi, malesuada eget, dignissim sed, ultricies vel, purus. Maecenas accumsan diam id nisi.\n\nPhasellus et nunc. Vivamus sem felis, dignissim non, lacinia id, accumsan quis, ligula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed scelerisque nulla sit amet mi. Nulla consequat, elit vitae tempus vulputate, sem libero rhoncus leo, vulputate viverra nulla purus nec turpis. Nam turpis sem, tincidunt non, congue lobortis, fermentum a, ipsum. Nulla facilisi. Aenean facilisis. Maecenas a quam eu nibh lacinia ultricies. Morbi malesuada orci quis tellus.\n\nSed eu leo. Donec in turpis. Donec non neque nec ante tincidunt posuere. Pellentesque blandit. Ut vehicula vestibulum risus. Maecenas commodo placerat est. Integer massa nunc, luctus at, accumsan non, pulvinar sed, odio. Pellentesque eget libero iaculis dui iaculis vehicula. Curabitur quis nulla vel felis ullamcorper varius. Sed suscipit pulvinar lectus.&lt;/textarea&gt;\n\n        &lt;/form&gt;\n\n        &lt;div id=\"tip\"&gt;&lt;/div&gt;\n\n        &lt;canvas id=\"mock-text\"&gt;&lt;/canvas&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>Bug</strong></p>\n\n<p><em>There's one bug I do recall.  If you put the cursor before the first letter on a line, it shows the \"position\" as the last letter on the previous line.  This has to do with how selection.end work.  I don't think it should be too difficult to look for that case and fix it accordingly.</em></p>\n\n<hr>\n\n<p><strong>Version 1</strong></p>\n\n<p><em>Leaving this here so you can see the progress without having to dig through the edit history.</em></p>\n\n<p>It's not perfect and it's most Definitely a hack, but I got it to work pretty well on WinXP IE, FF, Safari, Chrome and Opera.</p>\n\n<p>As far as I can tell there's no way to directly find out the x/y of a cursor on any browser.  The <a href=\"http://weblogs.asp.net/skillet/archive/2005/03/24/395838.aspx\">IE method</a>, <a href=\"http://stackoverflow.com/questions/128342/display-div-at-cursor-position-in-textarea#128461\">mentioned</a> by <a href=\"http://stackoverflow.com/users/21632/adam-bellaire\">Adam Bellaire</a> is interesting, but unfortunately not cross-browser.  I figured the next best thing would be to use the characters as a grid.</p>\n\n<p>Unfortunately there's no font metric information built into any of the browsers, which means a monospace font is the only font type that's going to have a consistent measurement.  Also, there's no reliable means of figuring out a font-width from the font-height.  At first I'd tried using a percentage of the height, which worked great.  Then I changed the font-size and everything went to hell.  </p>\n\n<p>I tried one method to figure out character width, which was to create a temporary textarea and keep adding characters until the scrollHeight (or scrollWidth) changed.  It seems plausable, but about halfway down that road, I realized I could just use the cols attribute on the textarea and figured there are enough hacks in this ordeal to add another one.  This means you can't set the width of the textarea via css.  You HAVE to use the cols for this to work.</p>\n\n<p>The next problem I ran into is that, even when you set the font via css, the browsers report the font differently.  When you don't set a font, mozilla uses <code>monospace</code> by default, IE uses <code>Courier New</code>, Opera <code>\"Courier New\"</code> (with quotes), Safari, <code>'Lucida Grand'</code> (with single quotes).  When you do set the font to <code>monospace</code>, mozilla and ie take what you give them, Safari comes out as <code>-webkit-monospace</code> and Opera stays with <code>\"Courier New\"</code>.</p>\n\n<p>So now we initialize some vars.  Make sure to set your line height in the css as well.  Firefox reports the correct line height, but IE was reporting \"normal\" and I didn't bother with the other browsers.  I just set the line height in my css and that resolved the difference.  I haven't tested with using ems instead of pixels.  Char height is just font size.  Should probably pre-set that in your css as well.</p>\n\n<p>Also, one more pre-setting before we start placing characters - which really had me scratching my head.  For ie and mozilla, texarea chars are &lt; cols, everything else is &lt;= chars.  So Chrome can fit 50 chars across, but mozilla and ie would break the last word off the line.</p>\n\n<p>Now we're going to create an array of first-character positions for every line.  We loop through every char in the textarea.  If it's a newline, we add a new position to our line array.  If it's a space, we try to figure out if the current \"word\" will fit on the line we're on or if it's going to get pushed to the next line.   Punctuation counts as a part of the \"word\".  I haven't tested with tabs, but there's a line there for adding 4 chars for a tab char.</p>\n\n<p>Once we have an array of line positions, we loop through and try to find which line the cursor is on.  We're using hte \"End\" of the selection as our cursor.</p>\n\n<p>x = (cursor position - first character position of cursor line) * character width</p>\n\n<p>y = ((cursor line + 1) * line height) - scroll position</p>\n\n<p>I'm using <a href=\"http://docs.jquery.com/Downloading_jQuery\">jquery 1.2.6</a>, <a href=\"http://laboratorium.0xab.cd/jquery/fieldselection/0.1.0/test.html\">jquery-fieldselection</a>, and <a href=\"http://plugins.jquery.com/project/dimensions\">jquery-dimensions</a></p>\n\n<p>The Demo: <a href=\"http://enobrev.info/cursor/\">http://enobrev.info/cursor/</a></p>\n\n<p>And the code:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n        &lt;title&gt;Tooltip&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"js/jquery-1.2.6.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"js/jquery-fieldselection.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"js/jquery.dimensions.js\"&gt;&lt;/script&gt;\n        &lt;style type=\"text/css\"&gt;\n            form {\n                margin: 20px auto;\n                width: 500px;\n            }\n\n            #textariffic {\n                height: 400px;\n                font-size: 12px;\n                font-family: monospace;\n                line-height: 15px;\n            }\n\n            #tip {\n                position: absolute;\n                z-index: 2;\n                padding: 20px;\n                border: 1px solid #000;\n                background-color: #FFF;\n            }\n        &lt;/style&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            $(function() {\n                $('textarea')\n                    .keyup(update)\n                    .mouseup(update)\n                    .scroll(update);\n            });\n\n            function showTip(x, y) {                \n                y = y + $('#tip').height();\n\n                $('#tip').css({\n                    left: x + 'px',\n                    top: y + 'px'\n                });\n            }\n\n            function update() {\n                var oPosition = $(this).position();\n                var sContent = $(this).val();\n\n                var bGTE = jQuery.browser.mozilla || jQuery.browser.msie;\n\n                if ($(this).css('font-family') == 'monospace'           // mozilla\n                ||  $(this).css('font-family') == '-webkit-monospace'   // Safari\n                ||  $(this).css('font-family') == '\"Courier New\"') {    // Opera\n                    var lineHeight   = $(this).css('line-height').replace(/[^0-9]/g, '');\n                        lineHeight   = parseFloat(lineHeight);\n                    var charsPerLine = this.cols;\n                    var charWidth    = parseFloat($(this).innerWidth() / charsPerLine);\n\n\n                    var iChar = 0;\n                    var iLines = 1;\n                    var sWord = '';\n\n                    var oSelection = $(this).getSelection();\n                    var aLetters = sContent.split(\"\");\n                    var aLines = [];\n\n                    for (var w in aLetters) {\n                        if (aLetters[w] == \"\\n\") {\n                            iChar = 0;\n                            aLines.push(w);\n                            sWord = '';\n                        } else if (aLetters[w] == \" \") {    \n                            var wordLength = parseInt(sWord.length);\n\n\n                            if ((bGTE &amp;&amp; iChar + wordLength &gt;= charsPerLine)\n                            || (!bGTE &amp;&amp; iChar + wordLength &gt; charsPerLine)) {\n                                iChar = wordLength + 1;\n                                aLines.push(w - wordLength);\n                            } else {                \n                                iChar += wordLength + 1; // 1 more char for the space\n                            }\n\n                            sWord = '';\n                        } else if (aLetters[w] == \"\\t\") {\n                            iChar += 4;\n                        } else {\n                            sWord += aLetters[w];     \n                        }\n                    }\n\n                    var iLine = 1;\n                    for(var i in aLines) {\n                        if (oSelection.end &lt; aLines[i]) {\n                            iLine = parseInt(i) - 1;\n                            break;\n                        }\n                    }\n\n                    if (iLine &gt; -1) {\n                        var x = parseInt(oSelection.end - aLines[iLine]) * charWidth;\n                    } else {\n                        var x = parseInt(oSelection.end) * charWidth;\n                    }\n                    var y = (iLine + 1) * lineHeight - this.scrollTop; // below line\n\n                    showTip(oPosition.left + x, oPosition.top + y);\n                }\n            }\n\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form id=\"tipper\"&gt;\n            &lt;textarea id=\"textariffic\" cols=\"50\"&gt;\nAliquam urna. Nullam augue dolor, tincidunt condimentum, malesuada quis, ultrices at, arcu. Aliquam nunc pede, convallis auctor, sodales eget, aliquam eget, ligula. Proin nisi lacus, scelerisque nec, aliquam vel, dictum mattis, eros. Curabitur et neque. Fusce sollicitudin. Quisque at risus. Suspendisse potenti. Mauris nisi. Sed sed enim nec dui viverra congue. Phasellus velit sapien, porttitor vitae, blandit volutpat, interdum vel, enim. Cras sagittis bibendum neque. Proin eu est. Fusce arcu. Aliquam elit nisi, malesuada eget, dignissim sed, ultricies vel, purus. Maecenas accumsan diam id nisi.\n\nPhasellus et nunc. Vivamus sem felis, dignissim non, lacinia id, accumsan quis, ligula. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed scelerisque nulla sit amet mi. Nulla consequat, elit vitae tempus vulputate, sem libero rhoncus leo, vulputate viverra nulla purus nec turpis. Nam turpis sem, tincidunt non, congue lobortis, fermentum a, ipsum. Nulla facilisi. Aenean facilisis. Maecenas a quam eu nibh lacinia ultricies. Morbi malesuada orci quis tellus.\n\nSed eu leo. Donec in turpis. Donec non neque nec ante tincidunt posuere. Pellentesque blandit. Ut vehicula vestibulum risus. Maecenas commodo placerat est. Integer massa nunc, luctus at, accumsan non, pulvinar sed, odio. Pellentesque eget libero iaculis dui iaculis vehicula. Curabitur quis nulla vel felis ullamcorper varius. Sed suscipit pulvinar lectus. \n            &lt;/textarea&gt;\n\n        &lt;/form&gt;\n\n        &lt;p id=\"tip\"&gt;Here I Am!!&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>I posted a topic related to this problem on a Russian JavaScript site.</p>\n\n<p>If you don't understand Russian try translated by Google version: <a href=\"http://translate.google.ru/translate?js=y&amp;prev=_t&amp;hl=ru&amp;ie=UTF-8&amp;layout=1&amp;eotf=1&amp;u=http://javascript.ru/forum/events/7771-poluchit-koordinaty-kursora-v-tekstovom-pole-v-pikselyakh.html&amp;sl=ru&amp;tl=en\" rel=\"nofollow\">http://translate.google.ru/translate?js=y&amp;prev=_t&amp;hl=ru&amp;ie=UTF-8&amp;layout=1&amp;eotf=1&amp;u=http://javascript.ru/forum/events/7771-poluchit-koordinaty-kursora-v-tekstovom-pole-v-pikselyakh.html&amp;sl=ru&amp;tl=en</a></p>\n\n<p>Thre is some markup issues in the code examples in translated version so you can <a href=\"http://javascript.ru/forum/events/7771-poluchit-koordinaty-kursora-v-tekstovom-pole-v-pikselyakh.html&amp;sl=ru&amp;tl=en\" rel=\"nofollow\">read the code in the original Russian post</a>.</p>\n\n<p>The idea is simple. There is no easy, universal and cross-browser method to get cursor position in pixels. Frankly speaking there is, but only for Internet Explorer. </p>\n\n<p>In other browsers if you do really need to calculate it you have to ...</p>\n\n<ul>\n<li>create an invisible DIV</li>\n<li>copy all styles and content of the text box into that DIV</li>\n<li>then insert HTML element at exactly the same position in text where the caret is in the text box </li>\n<li>get coordinates of that HTML element</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This <a href=\"http://kirblog.idetalk.com/2010/03/calculating-cursor-position-in-textarea.html\" rel=\"nofollow\">blog</a> appears to be close too answering the question. I haven't tried it my self, but author says its tested with FF3, Chrome, IE, Opera, Safari.  Code is on <a href=\"https://github.com/kir/js_cursor_position\" rel=\"nofollow\">GitHub</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't know a solution for <code>textarea</code> but it sure works for a <code>div</code> with <strong><code>contenteditable</code></strong>.</p>\n\n<p>You can use the <code>Range</code> API. Like so: (yes, you really only need just these 3 lines of code)</p>\n\n<pre><code>// get active selection\nvar selection = window.getSelection();\n// get the range (you might want to check selection.rangeCount\n// to see if it's popuplated)\nvar range = selection.getRangeAt(0);\n\n// will give you top, left, width, height\nconsole.log(range.getBoundingClientRect());\n</code></pre>\n\n<p>I'm not sure about browser compatibility but I've found it works in the latest Chrome, Firefox and even IE7 (I think I tested 7, otherwise it was 9).</p>\n\n<p>You can even do 'crazy' things like this: if you're typing <code>\"#hash\"</code> and the cursor is at the last <code>h</code>, you can look in the current range for the <code>#</code> character, move the range back by <code>n</code> characters and get the <em>bounding-rect</em> of that range, this will make the popup-div seem to 'stick' to the word.</p>\n\n<p>One minor drawback is that <code>contenteditable</code> can be a bit buggy sometimes. The cursor likes to go to impossible places and you now have to deal with HTML input. But I'm sure browser vendors will address these problems are more sites starting using them.</p>\n\n<p>Another tip I can give is: look at the <a href=\"http://code.google.com/p/rangy/\" rel=\"nofollow\"><code>rangy</code></a> library. It attempts to be a fully featured cross-compatible range library. You don't <em>need</em> it, but if you're dealing with old browsers it might be worth you while.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>I won't explain the problems related to this stuff again because they are well explained in other posts. Just will point a possible solution, it has some bug but it's a starting point.</strong> </p>\n\n<p>Fortunately there is a scrip on Github to calculate the caret position relative to it's container, but it requires jQuery. <strong>GitHub page here:  <a href=\"https://github.com/beviz/jquery-caret-position-getter\" rel=\"nofollow\">jquery-caret-position-getter,</a></strong> Thanxs to Bevis.Zhao.</p>\n\n<p>Based on it I have implemented the next code: <strong>check it in action <a href=\"http://jsfiddle.net/mjerez/kBY75/\" rel=\"nofollow\">here in jsFiddle.net</a></strong></p>\n\n<pre><code>&lt;html&gt;&lt;head&gt;\n    &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"&gt;\n    &lt;title&gt;- jsFiddle demo by mjerez&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.8.2.js\"&gt;&lt;/script&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://jsfiddle.net/css/normalize.css\"&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://jsfiddle.net/css/result-light.css\"&gt;   \n    &lt;script type=\"text/javascript\" src=\"https://raw.github.com/beviz/jquery-caret-position-getter/master/jquery.caretposition.js\"&gt;&lt;/script&gt;     \n    &lt;style type=\"text/css\"&gt;\n        body{position:relative;font:normal 100% Verdana, Geneva, sans-serif;padding:10px;}\n        .aux{background:#ccc;opacity: 0.5;width:50%;padding:5px;border:solid 1px #aaa;}\n        .hidden{display:none}\n        .show{display:block; position:absolute; top:0px; left:0px;}\n    &lt;/style&gt;\n    &lt;script type=\"text/javascript\"&gt;//&lt;![CDATA[ \n    $(document).keypress(function(e) {\n        if ($(e.target).is('input, textarea')) {\n            var key = String.fromCharCode(e.which);\n            var ctrl = e.ctrlKey;\n            if (ctrl) {\n                var display = $(\"#autocomplete\");\n                var editArea = $('#editArea');            \n                var pos = editArea.getCaretPosition();\n                var offset = editArea.offset();\n                // now you can use left, top(they are relative position)\n                display.css({\n                    left: offset.left + pos.left,\n                    top:  offset.top + pos.top,\n                    color : \"#449\"\n                })\n                display.toggleClass(\"show\");\n                return false;\n            }\n        }\n\n    });\n    window.onload = (function() {\n        $(\"#editArea\").blur(function() {\n            if ($(\"#autocomplete\").hasClass(\"show\")) $(\"#autocomplete\").toggleClass(\"show\");\n        })\n    });\n    //]]&gt;  \n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;p&gt;Click ctrl+space to while you write to diplay the autocmplete pannel.&lt;/p&gt;\n    &lt;/br&gt;\n    &lt;textarea id=\"editArea\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;\n    &lt;/br&gt;\n    &lt;/br&gt;\n    &lt;/br&gt;\n    &lt;div id=\"autocomplete\" class=\"aux hidden \"&gt;\n        &lt;ol&gt;\n            &lt;li&gt;Option a&lt;/li&gt;\n            &lt;li&gt;Option b&lt;/li&gt;\n            &lt;li&gt;Option c&lt;/li&gt;\n            &lt;li&gt;Option d&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>fixed it here:  <a href=\"http://jsfiddle.net/eMwKd/4/\" rel=\"nofollow\">http://jsfiddle.net/eMwKd/4/</a></p>\n\n<p>only downside is that the already provided function <code>getCaret()</code> resolves to the wrong position on key down. therefor the red cursor seems to be behind the real cursor unless you release the key.</p>\n\n<p>I will have another look into it.</p>\n\n<p>update: hm, word-wrapping is not accurate if lines too long..</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>maybe this will please you , it will tell the position of selection and the positition of the cursor so try to check the timer to get automatic position or uncheck to get position by clicking on Get Selection button</p>\n\n<pre><code>   &lt;form&gt;\n &lt;p&gt;\n &lt;input type=\"button\" onclick=\"evalOnce();\" value=\"Get Selection\"&gt;\ntimer:\n&lt;input id=\"eval_switch\" type=\"checkbox\" onclick=\"evalSwitchClicked(this)\"&gt;\n&lt;input id=\"eval_time\" type=\"text\" value=\"200\" size=\"6\"&gt;\nms\n&lt;/p&gt;\n&lt;textarea id=\"code\" cols=\"50\" rows=\"20\"&gt;01234567890123456789012345678901234567890123456789 01234567890123456789012345678901234567890123456789 01234567890123456789012345678901234567890123456789 01234567890123456789012345678901234567890123456789 01234567890123456789012345678901234567890123456789 Sample text area. Please select above text. &lt;/textarea&gt;\n&lt;textarea id=\"out\" cols=\"50\" rows=\"20\"&gt;&lt;/textarea&gt;\n&lt;/form&gt;\n&lt;div id=\"test\"&gt;&lt;/div&gt;\n&lt;script&gt;\n\nfunction Selection(textareaElement) {\nthis.element = textareaElement;\n}\nSelection.prototype.create = function() {\nif (document.selection != null &amp;&amp; this.element.selectionStart == null) {\nreturn this._ieGetSelection();\n} else {\nreturn this._mozillaGetSelection();\n}\n}\nSelection.prototype._mozillaGetSelection = function() {\nreturn {\nstart: this.element.selectionStart,\nend: this.element.selectionEnd\n };\n }\nSelection.prototype._ieGetSelection = function() {\nthis.element.focus();\nvar range = document.selection.createRange();\nvar bookmark = range.getBookmark();\nvar contents = this.element.value;\nvar originalContents = contents;\nvar marker = this._createSelectionMarker();\nwhile(contents.indexOf(marker) != -1) {\nmarker = this._createSelectionMarker();\n }\nvar parent = range.parentElement();\nif (parent == null || parent.type != \"textarea\") {\nreturn { start: 0, end: 0 };\n}\nrange.text = marker + range.text + marker;\ncontents = this.element.value;\nvar result = {};\nresult.start = contents.indexOf(marker);\ncontents = contents.replace(marker, \"\");\nresult.end = contents.indexOf(marker);\nthis.element.value = originalContents;\nrange.moveToBookmark(bookmark);\nrange.select();\nreturn result;\n}\nSelection.prototype._createSelectionMarker = function() {\nreturn \"##SELECTION_MARKER_\" + Math.random() + \"##\";\n}\n\nvar timer;\nvar buffer = \"\";\nfunction evalSwitchClicked(e) {\nif (e.checked) {\nevalStart();\n} else {\nevalStop();\n}\n}\nfunction evalStart() {\nvar o = document.getElementById(\"eval_time\");\ntimer = setTimeout(timerHandler, o.value);\n}\nfunction evalStop() {\nclearTimeout(timer);\n}\nfunction timerHandler() {\nclearTimeout(timer);\nvar sw = document.getElementById(\"eval_switch\");\nif (sw.checked) {\nevalOnce();\nevalStart();\n}\n}\nfunction evalOnce() {\ntry {\nvar selection = new Selection(document.getElementById(\"code\"));\nvar s = selection.create();\nvar result = s.start + \":\" + s.end;\nbuffer += result;\nflush();\n } catch (ex) {\nbuffer = ex;\nflush();\n}\n}\nfunction getCode() {\n// var s.create()\n// return document.getElementById(\"code\").value;\n}\nfunction clear() {\nvar out = document.getElementById(\"out\");\nout.value = \"\";\n}\nfunction print(str) {\nbuffer += str + \"\\n\";\n}\nfunction flush() {\nvar out = document.getElementById(\"out\");\nout.value = buffer;\nbuffer = \"\";\n } \n&lt;/script&gt;\n</code></pre>\n\n<p>look the demo here : <a href=\"http://jsbin.com/obekot/2/edit\" rel=\"nofollow\">jsbin.com</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is description of one hack for caret offset:\n<a href=\"http://stackoverflow.com/questions/3510009/textarea-caret-coordinates-jquery\">TextArea Caret Coordinates jQuery</a></p>\n\n<p>Also it will be better to use div element with <code>contenteditable</code> attribute if you can use html5 features.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>How about appending a span element to the cloning div and setting the fake cursor based on this span's offsets? I have updated your fiddle <a href=\"http://jsfiddle.net/2Rzfb/2/\" rel=\"nofollow\">here</a>. Also here's the JS bit only</p>\n\n<pre><code>// http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea\nvar map = [];\nvar pan = '&lt;span&gt;|&lt;/span&gt;'\n\n//found @ http://davidwalsh.name/detect-scrollbar-width\n\nfunction getScrollbarWidth() {\n    var scrollDiv = document.createElement(\"div\");\n    scrollDiv.className = \"scrollbar-measure\";\n    document.body.appendChild(scrollDiv);\n\n    // Get the scrollbar width\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n    // Delete the DIV \n    document.body.removeChild(scrollDiv);\n\n    return scrollbarWidth;\n}\n\nfunction getCaret(el) {\n    if (el.selectionStart) {\n        return el.selectionStart;\n    } else if (document.selection) {\n        el.focus();\n\n        var r = document.selection.createRange();\n        if (r == null) {\n            return 0;\n        }\n\n        var re = el.createTextRange(),\n            rc = re.duplicate();\n        re.moveToBookmark(r.getBookmark());\n        rc.setEndPoint('EndToStart', re);\n\n        return rc.text.length;\n    }\n    return 0;\n}\n\n\n$(function() {\n    var span = $('#pos span');\n    var textarea = $('textarea');\n\n    var note = $('#note');\n\n    css = getComputedStyle(document.getElementById('textarea'));\n    try {\n        for (i in css) note.css(css[i]) &amp;&amp; (css[i] != 'width' &amp;&amp; css[i] != 'height') &amp;&amp; note.css(css[i], css.getPropertyValue(css[i]));\n    } catch (e) {}\n\n    note.css('max-width', '300px');\n    document.getElementById('note').style.visibility = 'hidden';\n    var height = note.height();\n    var fakeCursor, hidePrompt;\n\n    textarea.on('keyup click', function(e) {\n        if (document.getElementById('textarea').scrollHeight &gt; 100) {\n            note.css('max-width', 300 - getScrollbarWidth());\n        }\n\n        var pos = getCaret(textarea[0]);\n\n        note.text(textarea.val().substring(0, pos));\n        $(pan).appendTo(note);\n        span.text(pos);\n\n        if (hidePrompt) {\n            hidePrompt.remove();\n        }\n        if (fakeCursor) {\n            fakeCursor.remove();\n        }\n\n        fakeCursor = $(\"&lt;div style='width:5px;height:30px;background-color: #777;position: absolute;z-index:10000'&gt;&amp;nbsp;&lt;/div&gt;\");\n\n        fakeCursor.css('opacity', 0.5);\n        fakeCursor.css('left', $('#note span').offset().left + 'px');\n        fakeCursor.css('top', textarea.offset().top + note.height() - (30 + textarea.scrollTop()) + 'px');\n\n        hidePrompt = fakeCursor.clone();\n        hidePrompt.css({\n            'width': '2px',\n            'background-color': 'white',\n            'z-index': '1000',\n            'opacity': '1'\n        });\n\n        hidePrompt.appendTo(textarea.parent());\n        fakeCursor.appendTo(textarea.parent());\n\n\n\n        return true;\n    });\n});\n</code></pre>\n\n<p>\u200b\n<strong>UPDATE</strong>: I can see that there's an error if the first line contains no hard line-breaks but if it does it seems to work well.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Note that this question is a duplicate of a one asked a month earlier, and I've answered it <strong><a href=\"http://stackoverflow.com/a/22446703/1269037\">here</a></strong>. I'll only maintain the answer at that link, since this question should have been closed as duplicate years ago.</p>\n\n<h3><em>Copy of the answer</em></h3>\n\n<p>I've looked for a textarea caret coordinates plugin for <a href=\"https://github.com/mizzao/meteor-autocomplete\" rel=\"nofollow\">meteor-autocomplete</a>, so I've evaluated all the 8 plugins on GitHub. The winner is, by far, <a href=\"https://github.com/component/textarea-caret-position\" rel=\"nofollow\">textarea-caret-position</a> from <strong>Component</strong>.</p>\n\n<h2>Features</h2>\n\n<ul>\n<li>pixel precision</li>\n<li>no dependencies whatsoever</li>\n<li>browser compatibility: Chrome, Safari, Firefox (despite <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=753662\" rel=\"nofollow\">two</a> <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=984275\" rel=\"nofollow\">bugs</a> it has), IE9+; may work but not tested in Opera, IE8 or older</li>\n<li>supports any font family and size, as well as text-transforms</li>\n<li>the text area can have arbitrary padding or borders</li>\n<li>not confused by horizontal or vertical scrollbars in the textarea</li>\n<li>supports hard returns, tabs (except on IE) and consecutive spaces in the text</li>\n<li>correct position on lines longer than the columns in the text area</li>\n<li>no <a href=\"https://github.com/component/textarea-caret-position/blob/06d2197f85f96405b43724e56dc56f220c0092a5/test/position_off_after_wrapping_with_whitespace_before_EOL.gif\" rel=\"nofollow\">\"ghost\" position in the empty space</a> at the end of a line when wrapping long words</li>\n</ul>\n\n<h3>Here's a demo - <a href=\"http://jsfiddle.net/dandv/aFPA7/\" rel=\"nofollow\">http://jsfiddle.net/dandv/aFPA7/</a></h3>\n\n<p><img src=\"http://i.stack.imgur.com/LJiUS.png\" alt=\"enter image description here\"></p>\n\n<h2>How it works</h2>\n\n<p>A mirror <code>&lt;div&gt;</code> is created off-screen and styled exactly like the <code>&lt;textarea&gt;</code>. Then, the text of the textarea up to the caret is copied into the div and a <code>&lt;span&gt;</code> is inserted right after it. Then, the text content of the span is set to the remainder of the text in the textarea, in order to faithfully reproduce the wrapping in the faux div.</p>\n\n<p>This is the only method guaranteed to handle all the edge cases pertaining to wrapping long lines. It's also used by GitHub to determine the position of its <strong>@</strong> user dropdown.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>For a project of mine I would love to provide auto completion for a specific textarea.  Similar to how intellisense/omnicomplete works.  For that however I have to find out the absolute cursor position so that I know where the DIV should appear.</p>\n\n<p>Turns out: that's (nearly I hope) impossible to achieve.  Does anyone has some neat ideas how to solve that problem?</p>\n",
            "last_activity_date": 1395060626,
            "question_id": 128342,
            "score": 56,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "Display DIV at Cursor Position in Textarea"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>There is absolutely nothing wrong with the code you've written. Both <code>some_function</code> and <code>someVar</code> should be accessible, in case they were available in the context where anonymous   </p>\n\n<pre><code>function() { some_function(someVar); } \n</code></pre>\n\n<p>was created. </p>\n\n<p>Check if the alert gives you the value you've been looking for, be sure it will be accessible in the scope of anonymous function (unless you have more code that operates on the same <code>someVar</code> variable next to the call to <code>addEventListener</code>)</p>\n\n<pre><code>var someVar; \nsomeVar = some_other_function();\nalert(someVar);\nsomeObj.addEventListener(\"click\", function(){\n    some_function(someVar);\n}, false);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 45
                },
                {
                    "body": "<p><code>someVar</code> value should be accessible only in <code>some_function()</code> context, not from listener's.\nIf you like to have it within listener, you must do something like:</p>\n\n<pre><code>someObj.addEventListener(\"click\",\n                         function(){\n                             var newVar = someVar;\n                             some_function(someVar);\n                         },\n                         false);\n</code></pre>\n\n<p>and use <code>newVar</code> instead.</p>\n\n<p>The other way is to return <code>someVar</code> value from <code>some_function()</code> for using it further in listener (as a new local var):</p>\n\n<pre><code>var someVar = some_function(someVar);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You can add and remove eventlisteners with arguments by declaring a function as a variable.</p>\n\n<p><code>myaudio.addEventListener('ended',funcName=function(){newSrc(myaudio)},false);</code></p>\n\n<p><code>newSrc</code> is the method with myaudio as parameter\n<code>funcName</code> is the function name variable</p>\n\n<p>You can remove the listener with \n <code>myaudio.removeEventListener('ended',func,false);</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Also try these (IE8 + Chrome. I dont know for FF):</p>\n\n<pre><code>function addEvent(obj, type, fn) {\n    eval('obj.on'+type+'=fn');\n}\n\nfunction removeEvent(obj, type) {\n    eval('obj.on'+type+'=null');\n}\n\n// Use :\n\nfunction someFunction (someArg) {alert(someArg);}\n\nvar object=document.getElementById('somObject_id') ;\nvar someArg=\"Hi there !\";\nvar func=function(){someFunction (someArg)};\n\n// mouseover is inactive\naddEvent (object, 'mouseover', func);\n// mouseover is now active\naddEvent (object, 'mouseover');\n// mouseover is inactive\n</code></pre>\n\n<p>Hope there is no typos :-)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Use </p>\n\n<pre><code>   el.addEventListener('click',\n    function(){\n        // this will give you the id value \n        alert(this.id);    \n    },\nfalse);\n</code></pre>\n\n<p>And if you want to pass any custom value into this anonymous function then the easiest way to do it is </p>\n\n<pre><code> // this will dynamically create property a property\n // you can create anything like el.&lt;your  variable&gt;\n el.myvalue = \"hello world\";\n el.addEventListener('click',\n    function(){\n        //this will show you the myvalue \n        alert(el.myvalue);\n        // this will give you the id value \n        alert(this.id);    \n    },\nfalse);\n</code></pre>\n\n<p>Works perfectly in my project. Hope this will help</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Why not just get the arguments from the target attribute of the event?</p>\n\n<p>Example:</p>\n\n<pre><code>var someInput = document.querySelector('input');\nsomeInput.addEventListener('click', myFunc, false);\nsomeInput.myParam = 'This is my parameter';\nfunction myFunc(evt)\n{\n  window.alert( evt.target.myParam );\n}\n</code></pre>\n\n<p>JavaScript is a prototype-oriented language, remember!</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>This question is old but I thought I'd offer an alternative using ES5's .bind() - for posterity. :)</p>\n\n<pre><code>function some_func(otherFunc, ev) {\n    // magic happens\n}\nsomeObj.addEventListener(\"click\", some_func.bind(null, some_other_func), false);\n</code></pre>\n\n<p>Just be aware that you need to set up your listener function with the first param as the argument you're passing into bind (your other function) and the second param is now the event (instead of the first, as it would have been).</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>someObj.addEventListener(\"click\",\n                         function(){ some_function(someVar); }.bind(this)\n                        );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You may just bind all necessary arguments with 'bind':</p>\n\n<pre><code>root.addEventListener('click', myPrettyHandler.bind(null, event, arg1, ... ));\n</code></pre>\n\n<p>In this way you'll always get the event, arg1, and other stuff passed to myPrettyHandler.</p>\n\n<p><a href=\"http://passy.svbtle.com/partial-application-in-javascript-using-bind\" rel=\"nofollow\">http://passy.svbtle.com/partial-application-in-javascript-using-bind</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Other alternative, perhaps not as elegant as the use of bind, but it is valid for events in a loop </p>\n\n<pre><code>for (var key in catalog){\n    document.getElementById(key).my_id = key\n    document.getElementById(key).addEventListener('click', function(e) {\n        editorContent.loadCatalogEntry(e.srcElement.my_id)\n    }, false);\n}\n</code></pre>\n\n<p>It has been tested for google chrome extensions and maybe e.srcElement must be replaced by e.source in other browsers</p>\n\n<p>I found this solution using the <a href=\"http://stackoverflow.com/questions/256754/how-to-pass-arguments-to-addeventlistener-listener-function#comment7616286_256763\">comment</a> posted by <a href=\"http://stackoverflow.com/users/279755/imatoria\">Imatoria</a> but I cannot mark it as useful because I do not have enough reputation :D</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following answer is correct but the below code is not working in IE8 if suppose you compressed the js file using yuicompressor. (In fact,still  most of the US peoples using IE8)</p>\n\n<pre><code>var someVar; \nsomeVar = some_other_function();\nalert(someVar);\nsomeObj.addEventListener(\"click\",\n                         function(){\n                          some_function(someVar);\n                         },\n                         false);\n</code></pre>\n\n<p>So, we can fix the above issue as follows and it works fine in all browsers</p>\n\n<pre><code>var someVar, eventListnerFunc;\nsomeVar = some_other_function();\neventListnerFunc = some_function(someVar);\nsomeObj.addEventListener(\"click\", eventListnerFunc, false);\n</code></pre>\n\n<p>Hope, it would be useful for some one who is compressing the js file in production environment.</p>\n\n<p>Good Luck!!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am sick of it, I just do eval().</p>\n\n<pre><code>eval(\"addEvent(obj, 'click', function(e){month(e,\"+ym+\");});\");\n</code></pre>\n\n<p>Using bind() works great, BUT \"event\" variable is not available in Firefox and will throw error.</p>\n\n<pre><code>addEventListener('click', myPrettyHandler.bind(null, event, arg1, ... ));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>There is a special variable inside all functions: <em>arguments</em>. You can pass your parameters as anonymous parameters and access them (by order) through the <em>arguments</em> variable.</p>\n\n<p>Example:</p>\n\n<pre><code>var someVar = some_other_function();\nsomeObj.addEventListener(\"click\", function(someVar){\n    some_function(arguments[0]);\n}, false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's yet another way (This one works inside for loops):</p>\n\n<pre><code>var someVar = some_other_function();\nsomeObj.addEventListener(\"click\", \n\nfunction(theVar){\n    return function(){some_function(theVar)};\n}(someVar),\n\nfalse);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The situation is somewhat like-</p>\n\n<pre><code>var someVar = some_other_function();\nsomeObj.addEventListener(\"click\", function(){\n    some_function(someVar);\n}, false);\n</code></pre>\n\n<p>The problem is that the value of <code>someVar</code> is not visible inside the listener function of the <code>addEventListener</code>, where it is probably being treated as a new variable.</p>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1424448387,
            "question_id": 256754,
            "score": 52,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "How to pass arguments to addEventListener listener function?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>You may want to check out <a href=\"http://www.mozilla.org/rhino/\" rel=\"nofollow\">Rhino</a>.</p>\n\n<p>The Rhino Shell provides a way to run JavaScript scripts in batch mode:</p>\n\n<pre><code>java org.mozilla.javascript.tools.shell.Main my_javascript_code.js [args]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Well there is <a href=\"http://www.latenightsw.com/freeware/JavaScriptOSA/index.html\" rel=\"nofollow\">JavaScript as OSA</a>, an extension that provides JavaScript as an alternative to appleScript. I've been using that about 10 years ago, don't know if it's still working with current OS versions</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found this <a href=\"http://stackoverflow.com/questions/41207/javascript-interactive-shell-with-completion\">related question</a> on the topic, but if you want direct links, here they are:</p>\n\n<ul>\n<li>You can install Rhino as others have pointed out. <a href=\"http://www.mikechambers.com/blog/2003/12/06/shell-scripting-on-os-x-with-ecma-javascript/\">This post</a> shows an easy way to get it up and running and how to alias a command to invoke it easily</li>\n<li>If you're on a Mac, you can use JavaScriptCore, which invokes WebKit's JavaScript engine. <a href=\"http://www.phpied.com/javascript-shell-scripting/\">Here's a post</a> on it</li>\n<li>You can use Chome/Google's V8 interpreter as well. <a href=\"http://kourge.net/node/123\">Here are instructions</a></li>\n<li>The JavaScript as OSA is interesting because it lets you (AFAIK) interact with scriptable OS X apps as though you were in AppleScript (without the terrible syntax)</li>\n</ul>\n\n<p>I'm surprised node.js doesn't come with a shell, but I guess it's really more like an epoll/selector-based callback/event-oriented webserver, so perhaps it doesn't need the full JS feature set, but I'm not too familiar with its inner workings.</p>\n\n<p>Since you seem interested in node.js and since it's based on V8, it might be best to follow those instructions on getting a V8 environment set up so you can have a consistent basis for your JavaScript programming (I should hope JSC and V8 are mostly the same, but I'm not sure).</p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>FWIW, node.js comes with a shell, try typing in:</p>\n\n<pre><code>node-repl\n</code></pre>\n\n<p>once you've installed node.js to see it in action. It's pretty standard to install rlwrap to get it to work nicely.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know this is old but you should also try <a href=\"http://zombie.labnotes.org/\" rel=\"nofollow\">Zombie.js</a>. A headless browser which is insanely fast and ideal for testing !</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know you asked about Linux and Mac;  I am going to provide the answer for Windows, in case other people who are interested in Windows find your question . </p>\n\n<p><em><strong>Windows includes a Javascript engine that can be used from the command line.</em></strong>  </p>\n\n<p>All versions of Windows, since Windows 98, have included something called \"<a href=\"http://en.wikipedia.org/wiki/Windows_Script_Host\" rel=\"nofollow\">The Windows Script Host</a>\". It's a windows-standard way to support script \"engines\".  Since the first release, WSH supports JScript, Microsoft's version of Javascript. Among other things, this means that, from a windows command line, you can just invoke the name of any *.js file, and it will run in the JScript engine. (via either wscript.exe or cscript.exe)</p>\n\n<blockquote>\n  <p>You can see this question:  <a href=\"http://stackoverflow.com/questions/7167690/what-is-the-progid-or-clsid-for-ie9s-javascript-engine-code-named-chakra/7168837#7168837\">What is the ProgId or CLSID for IE9&#39;s Javascript engine (code-named &quot;Chakra&quot;)</a> to learn how to invoke the higher-performance IE9 Javascript engine from cscript.exe. </p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<h1>Main Answer</h1>\n\n<p>Yes, to answer your question, it is possible to use JavaScript as a \"regular\" scripting language from the command line, without a browser. Since others have not mentioned it yet, I see that it is worth mentioning:</p>\n\n<p>On Debian-based systems (and this includes Ubuntu, Linux Mint, and aptosid/sidux, at least), besides the options of installing Rhino and others already mentioned, you have have other options:</p>\n\n<ul>\n<li><p>Install the <a href=\"https://packages.debian.org/sid/libmozjs-24-bin\" rel=\"nofollow\"><code>libmozjs-24-bin</code></a> package, which will provide you with Mozilla's Spidermonkey engine on the command line as a simple <code>js24</code>, which can be used also as an interactive interpreter. (The <code>24</code> in the name means that it corresponds to version 24 of Firefox).</p></li>\n<li><p>Install the <a href=\"http://packages.debian.org/sid/libv8-dev\" rel=\"nofollow\"><code>libv8-dev</code></a> package, which will provide you Google's V8 engine. It has, as one of its examples, the file <code>/usr/share/doc/libv8-dev/examples/shell.cc.gz</code> which you can uncompress and compile very simply (e.g., <code>g++ -Os shell.cc -o shell -lv8</code>).</p></li>\n<li><p>Install the package <a href=\"http://packages.debian.org/sid/nodejs\" rel=\"nofollow\"><code>nodejs</code></a> and it will be available both as the executable <code>nodejs</code> and as an <a href=\"http://www.debian.org/doc/debian-policy/ap-pkg-alternatives.html\" rel=\"nofollow\">alternative</a> (in the Debian-sense) to provide the <code>js</code> executable. JIT compilation is provided as a courtesy of V8.</p></li>\n<li><p>Install the package <a href=\"http://packages.debian.org/sid/libjavascriptcoregtk-3.0-bin\" rel=\"nofollow\"><code>libjavascriptcoregtk-3.0-bin</code></a> and use WebKit's JavaScriptCore interpreter (<code>jsc</code>) as a regular interpreter from the command-line. And this is without needing to have access to a Mac. On many platforms (e.g., x86 and x86_64), this interpreter will come with a JIT compiler.</p></li>\n</ul>\n\n<p>So, with almost no compilation you will have three of the heavy-weight JavaScript engines at your disposal.</p>\n\n<h1>Addendum</h1>\n\n<p>Once you have things installed, you can simply create files with the <code>#!/usr/bin/js</code> shebang line and things will just work:</p>\n\n<pre><code>$ cat foo.js \n#!/usr/bin/js\n\nconsole.log(\"Hello, world!\");\n$ ls -lAF /usr/bin/js /etc/alternatives/js /usr/bin/nodejs\nlrwxrwxrwx 1 root root      15 Jul 16 04:26 /etc/alternatives/js -&gt; /usr/bin/nodejs*\nlrwxrwxrwx 1 root root      20 Jul 16 04:26 /usr/bin/js -&gt; /etc/alternatives/js*\n-rwxr-xr-x 1 root root 1422004 Apr 28 20:31 /usr/bin/nodejs*\n$ chmod a+x foo.js \n$ ./foo.js \nHello, world!\n$ js ./foo.js\nHello, world!\n$\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I have installed Node.js on an iMac and </p>\n\n<pre><code>node somefile.js\n</code></pre>\n\n<p>in bash will work.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Since nobody mentioned it: Since Java 1.6 The Java JDK  also comes bundled with a JavaScript commandline and REPL.</p>\n\n<p>It is based on Rhino: <a href=\"https://developer.mozilla.org/en/docs/Rhino\" rel=\"nofollow\">https://developer.mozilla.org/en/docs/Rhino</a></p>\n\n<p>In Java 1.6 and 1.7 the command is called <code>jrunscript</code> (<code>jrunscript.exe</code> on Windows) and can be found in the bin folder of the JDK.</p>\n\n<p>Starting from Java 1.8 there is bundled a new JavaScript implementation (Nashorn: <a href=\"https://blogs.oracle.com/nashorn/\" rel=\"nofollow\">https://blogs.oracle.com/nashorn/</a>)</p>\n\n<p>So in Java 1.8 the command is called <code>jjs</code> (<code>jjs.exe</code> on Windows)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>I use Ubuntu 12.10 and js from commandline</strong></p>\n\n<p>It is available with my installation of java:</p>\n\n<pre><code>el@apollo:~/foo$ java -version\njava version \"1.6.0_27\"\nel@apollo:~/foo$ which js\n/usr/bin/js\n</code></pre>\n\n<p>Some examples:</p>\n\n<pre><code>el@apollo:~/foo$ js\n&gt; 5\n5\n\n&gt; console.log(\"hello\");\nhello\nundefined\n\n&gt; var f = function(){ console.log(\"derp\"); };\nundefined\n&gt; f();\nderp\n\n&gt; var mybool = new Boolean();\nundefined\n&gt; mybool\n{}\n&gt; mybool == true\nfalse\n&gt; mybool == false\ntrue\n\n&gt; var myobj = {};\nundefined\n&gt; myobj.skipper = \"on my mark, engage!\"\n'on my mark, engage!'\n&gt; myobj.skipper.split(\" \");\n[ 'on',\n  'my',\n  'mark,',\n  'engage!' ]\n</code></pre>\n\n<p>The sky is the limit, then keep right on going.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>PhantomJS allows you to do this as well</p>\n\n<p><a href=\"http://phantomjs.org/\" rel=\"nofollow\">http://phantomjs.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found this really nifty open source ECMAScript compliant JS Engine completely written in C called <a href=\"http://duktape.org/\" rel=\"nofollow\">duktape</a></p>\n\n<blockquote>\n  <p>Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.</p>\n</blockquote>\n\n<p>Good luck!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://jsdb.org\" rel=\"nofollow\">JSDB</a>, available for Linux, Windows, and Mac should fit the bill pretty well.  It uses Mozilla's Spidermonkey Javascript engine and seems to be less of a hassle to install compared to node.js (at least last time I tried node.js a couple of years ago).</p>\n\n<p>I found JSDB from this interesting list of Javascript shells: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Shells\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Shells</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am looking into Javascript programming without a browser. I want to run scripts from the Linux or Mac OS X command line, much like we run any other scripting language (ruby, php, perl, python...)</p>\n\n<pre><code>$ javascript my_javascript_code.js\n</code></pre>\n\n<p>I looked into spider monkey (Mozilla) and v8 (Google), but both of these appear to be embedded.  </p>\n\n<p>Is anyone using Javascript as a scripting language to be executed from the command line?</p>\n\n<p>If anyone is curious why I am looking into this, I've been poking around <a href=\"http://www.nodejs.org\">node.js</a>.  The performance of node.js makes me wonder if javascript may be a viable scripting language for processing large data.</p>\n",
            "last_activity_date": 1425324149,
            "question_id": 2941411,
            "score": 49,
            "tags": [
                "javascript",
                "unix",
                "command-line",
                "scripting",
                "v8"
            ],
            "title": "Executing Javascript without a browser?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I think you might be looking for an \"anchor\" given the example you have.</p>\n\n<pre><code>&lt;a href=\"#jump\"&gt;This link will jump to the anchor named jump&lt;/a&gt;\n&lt;a name=\"jump\"&gt;This is where the link will jump to&lt;/a&gt;\n</code></pre>\n\n<p>The focus jQuery method does something different from what you're trying to achieve.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Check <a href=\"http://plugins.jquery.com/project/ScrollTo\">jQuery.ScrollTo</a>, I think that's the behavior that you want, check the <a href=\"http://demos.flesler.com/jquery/scrollTo/\">demo</a>.</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>For my problem this code worked, I had to navigate to an anchor tag on page load :</p>\n\n<pre><code>$(window).scrollTop($('a#captchaAnchor').position().top);\n</code></pre>\n\n<p>For that matter you can use this on any element, not just an anchor tag.</p>\n",
                    "is_accepted": false,
                    "score": 87
                },
                {
                    "body": "<p>Like @user293153 I only just discovered this question and it didn't seem to be answered correctly.</p>\n\n<p>His answer was best. But you can also animate to the element as well.</p>\n\n<pre><code>$('html, body').animate({ scrollTop: $(\"#some_element\").offset().top }, 500);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>You can extend jQuery functionalities like this:</p>\n\n<pre><code>jQuery.fn.extend({\nscrollToMe: function () {\n    var x = jQuery(this).offset().top - 100;\n    jQuery('html,body').animate({scrollTop: x}, 500);\n}});\n</code></pre>\n\n<p>and then:</p>\n\n<pre><code>$('...').scrollToMe();\n</code></pre>\n\n<p>easy ;-)</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>For the focus() function to work on the  element the div needs to have a tabindex attribute. This is probably not done by default on this type of element as it is not an input field. You can add a tabindex for example at -1 to prevent users who use tab to focus on it. If you use a positive tabindex users will be able to use tab to focus on the div element.</p>\n\n<p>Here an example: <a href=\"http://jsfiddle.net/klodder/gFPQL/\" rel=\"nofollow\">http://jsfiddle.net/klodder/gFPQL/</a></p>\n\n<p>However tabindex is not supported in Safari.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Check out <a href=\"https://github.com/litera/jquery-scrollintoview\" rel=\"nofollow\">jquery-scrollintoview</a>.</strong></p>\n\n<p>ScrollTo is fine, but oftentimes you just want to make sure a UI element is visible, not necessarily at the top. ScrollTo doesn't help you with this. From scrollintoview's README:</p>\n\n<blockquote>\n  <h3>How does this plugin solve the user experience issue</h3>\n  \n  <p>This plugin scrolls a particular element into view similar to browser\n  built-in functionality (DOM's scrollIntoView() function), but works\n  differently (and arguably more user friendly):</p>\n  \n  <ul>\n  <li>it only scrolls to element when element is actually out of view; if element is in view (anywhere in visible document area), no scrolling\n  will be performed;</li>\n  <li>it scrolls using animation effects; when scrolling is performed users know exactly they're not redirected anywhere, but actually see\n  that they're simply moved somewhere else within the same page (as well\n  as in which direction they moved);</li>\n  <li>there's always the smallest amount of scrolling being applied; when element is above the visible document area it will be scrolled to the\n  top of visible area; when element is below the visible are it will be\n  scrolled to the bottom of visible area; this is the most consistent\n  way of scrolling - when scrolling would always be to top it sometimes\n  couldn't scroll an element to top when it was close to the bottom of\n  scrollable container (thus scrolling would be unpredictable);</li>\n  <li>when element's size exceeds the size of visible document area its top-left corner is the one that will be scrolled to;</li>\n  </ul>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I have done the following code in JavaScript to put focus on the particular element (branch1 is a  element),</p>\n\n<pre><code>document.location.href=\"#branch1\";\n</code></pre>\n\n<p>But as I am also using jQuery in my web app, so I want to do the above code in jQuery. I have tried but don't know why its not working,</p>\n\n<pre><code>$(\"#branch1\").focus();\n</code></pre>\n\n<p>The above jquery (focus()) code is not working for div, whereas If i am trying the same code with textbox, then its working,</p>\n\n<p>Please tell me, how can I put focus on a div elemnt using jQuery?</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1391155906,
            "question_id": 500336,
            "score": 46,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "focus"
            ],
            "title": "How to scroll to an element in jQuery?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>To add that using Jquery:</p>\n\n<pre><code>$('#commentForm').submit(function(){ //listen for submit event\n    $.each(params, function(i,param){\n        $('&lt;input /&gt;').attr('type', 'hidden')\n            .attr('name', param.name)\n            .attr('value', param.value)\n            .appendTo('#commentForm');\n    });\n\n    return true;\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 67
                },
                {
                    "body": "<p>Previous answer can be <strong>shortened</strong> and made more <em>readable</em>.</p>\n\n<pre><code>$('#commentForm').submit(function () {\n    $(this).append($.map(params, function (param) {\n        return   $('&lt;input&gt;', {\n            type: 'hidden',\n            name: param.name,\n            value: param.value\n        })\n    }))\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I've this simple form:</p>\n\n<pre><code>&lt;form id=\"commentForm\" method=\"POST\" action=\"api/comment\"&gt;\n    &lt;input type=\"text\" name=\"name\" title=\"Your name\"/&gt;\n    &lt;textarea  cols=\"40\" rows=\"10\" name=\"comment\" title=\"Enter a comment\"&gt;\n    &lt;/textarea&gt;\n    &lt;input type=\"submit\" value=\"Post\"/&gt;\n    &lt;input type=\"reset\" value=\"Reset\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I need to add two POST parameters before send to the server:</p>\n\n<pre><code>var params = [\n               {\n                 name: \"url\",\n                 value: window.location.pathname\n               },\n               {\n                  name: \"time\",\n                  value: new Date().getTime()\n               }\n             ];\n</code></pre>\n\n<p>without modifying the form, please.</p>\n",
            "last_activity_date": 1413442917,
            "question_id": 993834,
            "score": 39,
            "tags": [
                "javascript",
                "jquery",
                "forms"
            ],
            "title": "Adding POST parameters before submit"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<h1><code>window.outerHeight</code></h1>\n\n<p>It's the height of the window on screen, it includes the page and all the visible browser's bars (location, status, bookmarks, window title, borders, \u2026).</p>\n\n<p>This <strong>not</strong> the same as jQuery's <code>$(window).outerHeight()</code>.</p>\n\n<h1><code>window.innerHeight</code> or <code>$(window).height()</code></h1>\n\n<p>It's the height of the viewport that shows the website, just the content, no browser's bars.</p>\n\n<h1><code>document.body.clientHeight</code> or <code>$(document).height()</code></h1>\n\n<p>It's the height of your document shown in the viewport. If it is higher than <code>$(window).height()</code> you get the scrollbars to scroll the document.</p>\n\n<h1><code>screen.availHeight</code></h1>\n\n<p>It's the height the browser's window can have if it is maximized, including the browser's bars. So when the window is maximized, <code>screen.availHeight === window.outerHeight</code></p>\n\n<h1><code>screen.height</code></h1>\n\n<p>It simply matches the screen's resolution. So on a 1920\u00d71080 screen, <code>screen.height</code> will be <code>1080</code>.</p>\n\n<p><code>screen.availHeight</code> is equal to [<code>screen.height</code> + the operating system's bars], like the taskbar on Windows, the dock and menu on OS X, or whatever is fixed on top or bottom of your screen if you're using Linux.</p>\n",
                    "is_accepted": true,
                    "score": 90
                }
            ],
            "body": "<p>I am executing the following Javascript on my browser (Firefox).</p>\n\n<ol>\n<li><p>console.debug(\"Screen height = \"+ <strong>screen.availHeight</strong>); //outputs <strong>770</strong></p></li>\n<li><p>console.debug(\"Window Height =\"+ <strong>$(window).height()</strong>);  //outputs <strong>210</strong> (I am using jQuery as well)</p></li>\n</ol>\n\n<p>What is the difference between the two? Is 770 in pixels and 210 in mm?</p>\n\n<p>Similarly, when I write <code>$(document).height()</code> and <code>$(window).height()</code>, there is a difference. What is the reason?</p>\n",
            "last_activity_date": 1418290899,
            "question_id": 3044230,
            "score": 33,
            "tags": [
                "javascript",
                "jquery",
                "window",
                "document"
            ],
            "title": "Difference between screen.availHeight and window.height()"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>From the firebug site\n<a href=\"http://getfirebug.com/logging/\" rel=\"nofollow\">http://getfirebug.com/logging/</a></p>\n\n<blockquote>\n  <p>Calling console.dir(object) will log an interactive listing of an object's properties, like > a miniature version of the DOM tab.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use console.dir() to output a browse-able object you can click through instead of the .toString() version, like this:</p>\n\n<pre><code>console.dir(obj/this/anything)\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/4482950/how-to-show-full-object-in-chrome-console\">How to show full object in Chrome console?</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think Firebug does it differently than Chrome's dev tools. It looks like Firebug gives you a stringified version of the object while <code>console.dir</code> gives you an expandable object. Both give you the expandable object in Chrome, and I think that's where the confusion might come from. Or it's just a bug in Chrome.</p>\n\n<p>In Chrome, both do the same thing. Expanding on your test, I have noticed that Chrome gets the current value of the object when you expand it.</p>\n\n<pre><code>&gt; o = { foo: 1 }\n&gt; console.log(o)\nExpand now, o.foo = 1\n&gt; o.foo = 2\no.foo is still displayed as 1 from previous lines\n\n&gt; o = { foo: 1 }\n&gt; console.log(o)\n&gt; o.foo = 2\nExpand now, o.foo = 2\n</code></pre>\n\n<p>You can use the following to get a stringified version of an object if that's what you want to see. This will show you what the object is at the time this line is called, not when you expand it.</p>\n\n<pre><code>console.log(JSON.stringify(o));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In Firefox, these function behave quite differently: <code>log</code> only prints out a <code>toString</code> representation, whereas <code>dir</code> prints out a navigable tree.</p>\n\n<p>In Chrome, <code>log</code> already prints out a tree -- <em>most of the time</em>. However, Chrome's <code>log</code> still stringifies certain classes of objects, even if they have properties. Perhaps the clearest example of a difference is a regular expression:</p>\n\n<pre><code>&gt; console.log(/foo/);\n/foo/\n\n&gt; console.dir(/foo/);\n* /foo/\n    global: false\n    ignoreCase: false\n    lastIndex: 0\n    ...\n</code></pre>\n\n<p>You can also see a clear difference with arrays (e.g., <code>console.dir([1,2,3])</code>) which are <code>log</code>ged differently from normal objects:</p>\n\n<pre><code>&gt; console.log([1,2,3])\n[1, 2, 3]\n\n&gt; console.dir([1,2,3])\n* Array[3]\n    0: 1\n    1: 2\n    2: 3\n    length: 3\n    * __proto__: Array[0]\n        concat: function concat() { [native code] }\n        constructor: function Array() { [native code] }\n        entries: function entries() { [native code] }\n        ...\n</code></pre>\n\n<p>DOM objects also exhibit differing behavior, <a href=\"http://stackoverflow.com/a/19269945/710446\">as noted on another answer</a>.</p>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>Following Felix Klings advice I tried it out in my chrome browser.</p>\n\n<p><strong>console.dir([1,2])</strong> gives the following output:</p>\n\n<p><strong>Array[2]</strong></p>\n\n<p><strong>0: 1</strong></p>\n\n<p><strong>1: 2</strong></p>\n\n<p><strong>length: 2</strong></p>\n\n<p><strong>_<em>proto</em>_: Array[0]</strong></p>\n\n<p>While <strong>console.log([1,2])</strong> gives the following output:</p>\n\n<p><strong>[1, 2]</strong></p>\n\n<p>So I believe console.dir() should be used to get more information like prototype etc in arrays and objects.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another useful difference in Chrome exists when sending DOM elements to the console.</p>\n\n<p><img src=\"http://i.imgur.com/DozDcYR.png\"></p>\n\n<p>Notice:</p>\n\n<ul>\n<li><code>console.log</code> prints the element in an HTML-like tree</li>\n<li><code>console.dir</code> prints the element in a JSON-like tree</li>\n</ul>\n\n<p>Specifically, <code>console.log</code> gives special treatment to DOM elements, whereas <code>console.dir</code> does not. This is often useful when trying to see the full representation of the DOM JS object.</p>\n\n<p>There's more information in the <a href=\"https://developers.google.com/chrome-developer-tools/docs/console-api#consoledirobject\">Chrome Console API reference</a> about this and other functions.</p>\n",
                    "is_accepted": false,
                    "score": 35
                }
            ],
            "body": "<p>In Chrome the <code>console</code> object defines two methods that seem to do the same thing:</p>\n\n<pre><code>console.log(...)\nconsole.dir(...)\n</code></pre>\n\n<p>I read somewhere online that <code>dir</code> takes a copy of the object before logging it, whereas <code>log</code> just passes the reference to the console, meaning that by the time you go to inspect the object you logged, it may have changed.  However some preliminary testing suggests that there's no difference and that they both suffer from potentially showing objects in different states than when they were logged.</p>\n\n<p>Try this in the Chrome console (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>J</kbd>) to see what I mean:</p>\n\n<pre><code>&gt; o = { foo: 1 }\n&gt; console.log(o)\n&gt; o.foo = 2\n</code></pre>\n\n<p>Now, expand the <code>[Object]</code> beneath the log statement and notice that it shows <code>foo</code> with a value of 2.  The same is true if you repeat the experiment using <code>dir</code> instead of <code>log</code>.</p>\n\n<p>My question is, why do these two seemingly identical functions exist on <code>console</code>?</p>\n",
            "last_activity_date": 1416498247,
            "question_id": 11954152,
            "score": 92,
            "tags": [
                "javascript",
                "google-chrome",
                "console"
            ],
            "title": "What&#39;s the difference between console.dir and console.log?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<h2>Basic Usage</h2>\n\n<p>First, let's see what each function does:</p>\n\n<p><em>regexObject</em>.<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\">test</a></strong>( <em>String</em> )</p>\n\n<blockquote>\n  <p>Executes the search for a match between a regular expression and a specified string. Returns <em>true</em> or <em>false</em>.</p>\n</blockquote>\n\n<p><em>string</em>.<strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\">match</a></strong>( <em>RegExp</em> )</p>\n\n<blockquote>\n  <p>Used to retrieve the matches when matching a string against a regular expression. Returns an array with the matches or <code>null</code> if there are none.</p>\n</blockquote>\n\n<p>Since <code>null</code> evaluates to <code>false</code>,</p>\n\n<pre><code>if ( string.match(regex) ) {\n  // There was a match.\n} else {\n  // No match.\n} \n</code></pre>\n\n<hr>\n\n<h2>Performance</h2>\n\n<p>Is there any difference regarding performance? </p>\n\n<p><strong>Yes</strong>. I found this short note in the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/match\">MDN site</a>:</p>\n\n<blockquote>\n  <p>If you need to know if a string matches a regular expression regexp, use regexp.test(string).</p>\n</blockquote>\n\n<p>Is the difference significant? </p>\n\n<p>The answer once more is <strong>YES</strong>! This <a href=\"http://jsperf.com/test-vs-match-regex\">jsPerf</a> I put together shows the difference is  <strong>~30% - ~60%</strong> depending on the browser:</p>\n\n<p><img src=\"http://i.stack.imgur.com/CHYn6.jpg\" alt=\"test vs match | Performance Test\"></p>\n\n<h2>Conclusion</h2>\n\n<p>Use <code>.test</code> if you want a faster boolean check. Use <code>.match</code> to retrieve all matches when using the <code>g</code> global flag. </p>\n\n<p><sub> Amazed by not finding even a single blog or a Stack Overflow answer entry to my question when searched for <em>\"regex test vs match javascript\"</em>, made me use the <a href=\"http://blog.stackoverflow.com/2011/07/its-ok-to-ask-and-answer-your-own-questions/\">share your knowledge, Q&amp;A-style</a> feature. Hope you'll like it. </sub></p>\n",
                    "is_accepted": true,
                    "score": 133
                },
                {
                    "body": "<p>Don't forget to take into consideration the global flag in your regexp :</p>\n\n<pre><code>var reg = /abc/g;\n!!'abcdefghi'.match(reg); // =&gt; true\n!!'abcdefghi'.match(reg); // =&gt; true\nreg.test('abcdefghi');    // =&gt; true\nreg.test('abcdefghi');    // =&gt; false &lt;=\n</code></pre>\n\n<p>This is because Regexp keeps track of the lastIndex when a new match is found.</p>\n",
                    "is_accepted": false,
                    "score": 13
                }
            ],
            "body": "<p>Many times I'm using the string <code>match</code> function to know if a string matches a regular expression.</p>\n\n\n\n<pre class=\"lang-html prettyprint-override\"><code>if(str.match(/{regex}/))\n</code></pre>\n\n<p>Is there any difference between this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>if (/{regex}/.test(str))\n</code></pre>\n\n<p>They seem to give the same result?</p>\n",
            "last_activity_date": 1416397697,
            "question_id": 10940137,
            "score": 77,
            "tags": [
                "javascript",
                "regex",
                "performance"
            ],
            "title": "regex.test V.S. string.match to know if a string matches a regular expression"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>In Firebug, you should be able to see that script after the page is loaded and the script is injected. When you do, you can set a breakpoint in the appropriate place, and it'll be preserved when you refresh the page.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try adding a \"debugger;\" statement in the javascript you're adding dynamically. This should cause it to halt at that line regardless of breakpoint settings.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I think you might need to give the eval'd code a \"name\" like this:</p>\n\n<p><a href=\"http://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/\">http://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/</a></p>\n\n<p>If you do, I think it's likely the <code>debugger</code> approach from \"update 2\" should work then.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Dynamicly loaded Javascript still has to be parsed by the browser this is where WebKit, or FireBug debugger is sat so it's subject to the debugger no matter what, i think this is the same for the developer tools in IE8,</p>\n\n<p>So your code is subject is to the debugger so where your getting a problem will not be in that file or text if it does not error</p>\n\n<p>The other thing is <code>script.text = \"alert('Test!');\";</code> is not valid so it wont work in all browsers what you want is <code>script.innerHTML = \"alert('Test!');\";</code> </p>\n\n<p>even though its innerHTML it means code inside the HTML Tags not the HTML inside just the most use people use it for this so it gets explained wrong</p>\n\n<p><strong>EDITED FOR UPDATE TWO</strong></p>\n\n<p>And on Second update using Chrome i did this</p>\n\n<p>go to about:blank\nOpen the console up and past in </p>\n\n<pre><code>var script = document.createElement('script')\nscript.setAttribute(\"type\",\"text/javascript\")\nscript.innerHTML = \"alert('Test!');debugger;\";\n\ndocument.getElementsByTagName('head')[0].appendChild(script);\n</code></pre>\n\n<p>then it will break and open the script tab with about:blank shown (nothing to see)</p>\n\n<p>Then on the right hand side show the call stack list, then click on the second (anonymous function) and it will show you.</p>\n\n<p>So on your file you will have a (anonymous function) that is the code your running and you will see the break point in there. so you know your in the right one.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using <em>Google Chrome</em> (or <em>Safari</em>) Developers Tool, you can run JavaScript line by line.<br>\n<br>\nDeveloper Tool <code>&gt;</code> Scripts <code>&gt;</code> Choose which script you want to debug <code>&gt;</code> pause sign on the right side\nOr set breakpoints by click the <em>line number</em></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using Chrome(12.0.742.112) with the code you provided plus a debugger statement like this</p>\n\n<pre><code>    script.text =   \"debugger;var someVariable = 0;\\n\" +\n    \"someVariable = window.outerWidth;\\n\" +\n    \"alert(someVariable);\";\n</code></pre>\n\n<p><img src=\"http://i.imgur.com/PYILl.png\" alt=\"chrome_debugger\"></p>\n\n<p>works for me.</p>\n\n<blockquote>\n  <p>I need to modify some JavaScript (limiting scope of all jQuery selector to current partial >view div) before execute it.</p>\n</blockquote>\n\n<p>May its more tangible if you bind the selector change to an event on your partial view instead of creating script elements in the html body ( doesnt feel right ).</p>\n\n<p>You could do something like this</p>\n\n<pre><code>   (function(j)(\n      var limiting_selector = '';\n      j(\".partial_views\").bind('focusin over',function(e){\n         limiting_selector = j(this).attr('someattr') // or j(this).data('limiting-selector')\n      }).bind('focusout out',function(e){\n         limiting_selector = '';\n      });\n      // And then go on with\n      // j(limiting_selector+' .someclass')\n   ))(jQuery)\n</code></pre>\n\n<p>This code would always add a limiting selector to all jQuery select operations done while the mouse is in a certain element given the HTML isnt to messed up.</p>\n\n<p>(Still seems hackerish, may be someone has a better solution)</p>\n\n<p>cheers</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm using google chrome for that purpose.</p>\n\n<p>In chrome at scripts tab you can enable 'pause on all exceptions'</p>\n\n<p><img src=\"http://i.stack.imgur.com/owTZI.png\" alt=\"enter image description here\"></p>\n\n<p>And then put somewhere in your code line <code>try{throw ''} catch(e){}</code>. Chrome will stop execution when it reaches this line.</p>\n\n<p>EDIT: modified image so it would be clearer what I'm talking about.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>It would also be possible to use chrome for the same. Chrome has a feature where you can specify a parser attribute and make the piece of dynamic JS appear as a file which can then be browsed to and break points set. </p>\n\n<p>the attribute that needs to be set is </p>\n\n<pre><code>//# sourceURL=dynamicScript.js\n</code></pre>\n\n<p>where dynamicScript.js is the name of the file that should show up in the script file browser. </p>\n\n<p>More information <a href=\"https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints-dynamic-javascript\">here</a> </p>\n\n<p>Paul Irish also talks about it briefly in his excellent talk on <a href=\"http://paulirish.com/2012/talk-tooling-the-webapp-development-stack/\">Tooling &amp; The Webapp Development Stack</a></p>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<p><strong>UPDATE</strong>: the syntax for sourceUrl has been changed (@ is replaced by #) to avoid <a href=\"http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-issues\">errors</a> on unsupported browsers (read: IE). <a href=\"http://updates.html5rocks.com/2013/06/sourceMappingURL-and-sourceURL-syntax-changed\">Details</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>One option I like to use it adding a console.log('') statement in my code. Once this statement appears in the console a line number is associated with it. You can click that number to go to the location in the source and set a breakpoint. The drawback to this approach is that breakpoints are not preserved across page reloads and you have to run through the code before you can add a debugger.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>From <a href=\"http://stackoverflow.com/questions/1680030/how-to-solve-duplicate-objects-in-dynamic-loading-page-by-using-jquery\">my recent question</a>, I already created some JavaScript function for dynamic loading partial view. So, I can't debug any dynamic loading JavaScript. Because all of loaded JavaScript will be evaluated by \"eval\" function.</p>\n\n<p>However, I found some way to create new JavaScript by using the following script to dynamically create script into header of current document. All loaded scripts will be displayed in HTML DOM (that you can use any debugger to find it).</p>\n\n<pre><code>var script = document.createElement('script')\nscript.setAttribute(\"type\",\"text/javascript\")\nscript.text = \"alert('Test!');\";\n\ndocument.getElementsByTagName('head')[0].appendChild(script);\n</code></pre>\n\n<p>By the way, most debugger (IE8 Developer Toolbar, Firebug and Google Chrome) can\u2019t set breakpoint in any dynamic script. Because debuggable script must be loaded at the first time after page is loaded. </p>\n\n<p>Do you have idea for debugging in dynamic script content or file?</p>\n\n<p><strong>Update 1 - Add sourcecode for testing</strong> </p>\n\n<p>You can use the following xhtml file for trying to debug someVariable value.</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;    \n    &lt;title&gt;Dynamic Loading Script Testing&lt;/title&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    function page_load()\n    {\t\t\n        var script = document.createElement('script')\n        script.setAttribute(\"id\", \"dynamicLoadingScript\");\n        script.setAttribute(\"type\",\"text/javascript\");\n        script.text =   \"var someVariable = 0;\\n\" +\n                        \"someVariable = window.outerWidth;\\n\" +\n                        \"alert(someVariable);\";\n\n        document.getElementsByTagName('head')[0].appendChild(script);\n    }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"page_load();\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>From answer, I just test it in FireBug. The result should be displayed like below images.</p>\n\n<p><img src=\"http://d7cgnq.bay.livefilestore.com/y1pJGV27qEARXzZhsMMhPD5z0OxAtnkQK8eKeEXMAxuHjsuWeAq1aGl7sTISRNqVv3lw8ghyxE%5FGorlwSJDvTql0m0ugSGXPaY-/undebugable-firebug-html.PNG\" alt=\"alt text\"></p>\n\n<p><em>Please look at \"dynamicLoadingScript\" script that is added after page load.</em></p>\n\n<p><img src=\"http://d7cgnq.bay.livefilestore.com/y1pz%5FRwqjgeVqe2mAlUZha0PalpPdP0X5AiwJcQhYahERlnbPDdZpb-%5Fd1e96Q-14raSDMJOBsdcV9jsi4B5yCUDqm41Wc3h0yk/undebugable-firebug-script.PNG\" alt=\"alt text\"></p>\n\n<p><em>But it does not found in script tab of FireBug</em></p>\n\n<p><strong>Update 2 - Create Debug Breakpoint in dynamic loading script</strong></p>\n\n<p><img src=\"http://d7cgnq.bay.livefilestore.com/y1peKdIMOztXss-pc8PlJEmaGov%5F0ShYnLsuDdK5OLETbCG0UpkX6Te29w0YW2pNKaD%5F0ANAiizh2GdGPAAp%5F1q0JWAETo4Qoiw/Debugger-VS2010.png\" alt=\"alt text\"></p>\n\n<p><img src=\"http://d7cgnq.bay.livefilestore.com/y1pUeHaHoTXj0WBl74fnTrXwdr%5Fy7s7h8jNKfslSONgshzZBpUddGHNBWA9cXRabo3HAl3QazeozrCABo7pNVQc1Acl-UXXbHFE/Debugger-GoogleChrome.png\" alt=\"alt text\"></p>\n\n<p>Both of the above images show inserting \"debugger;\" statement in some line of script can fire breakpoint in dynamic loading script. However, both debuggers do not show any code at breakpoint. Therefore, it is useless for doing this.</p>\n\n<p><strong>Thanks,</strong></p>\n",
            "last_activity_date": 1418843921,
            "question_id": 1705952,
            "score": 57,
            "tags": [
                "javascript",
                "ajax"
            ],
            "title": "Is possible to debug dynamic loading JavaScript by some debugger like WebKit, FireBug or IE8 Developer Tool?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>$(document).ready(function() {\n    // Check if body height is higher than window height :)\n    if ($(\"body\").height() &gt; $(window).height()) {\n        alert(\"Vertical Scrollbar! D:\");\n    }\n\n    // Check if body width is higher than window width :)\n    if ($(\"body\").width() &gt; $(window).width()) {\n        alert(\"Horizontal Scrollbar! D:&lt;\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>try this:</p>\n\n<pre><code>var hasVScroll = document.body.scrollHeight &gt; document.body.clientHeight;\n</code></pre>\n\n<p>This will only tell you if the vertical scrollHeight is bigger than the height of the viewable content, however.  The <code>hasVScroll</code> variable will contain true or false.</p>\n\n<p>If you need to do a more thorough check, add the following to the code above:</p>\n\n<pre><code>// Get the computed style of the body element\nvar cStyle = document.body.currentStyle||window.getComputedStyle(document.body, \"\");\n\n// Check the overflow and overflowY properties for \"auto\" and \"visible\" values\nhasVScroll = cStyle.overflow == \"visible\" \n             || cStyle.overflowY == \"visible\"\n             || (hasVScroll &amp;&amp; cStyle.overflow == \"auto\")\n             || (hasVScroll &amp;&amp; cStyle.overflowY == \"auto\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>I tried the previous answer and doesn't seem to be working the $(\"body\").height() is always 0.</p>\n\n<p>I have corrected the solution as follows:</p>\n\n<pre><code>// Check if body height is higher than window height :) \nif ($(document).height() &gt; $(window).height()) { \n    alert(\"Vertical Scrollbar! D:\"); \n} \n\n// Check if body width is higher than window width :) \nif ($(document).width() &gt; $(window).width()) { \n    alert(\"Horizontal Scrollbar! D:&lt;\"); \n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>This one did works for me:</p>\n\n<pre><code>function hasVerticalScroll(node){\n    if(node == undefined){\n        if(window.innerHeight){\n            return document.body.offsetHeight&gt; innerHeight;\n        }\n        else {\n            return  document.documentElement.scrollHeight &gt; \n                document.documentElement.offsetHeight ||\n                document.body.scrollHeight&gt;document.body.offsetHeight;\n        }\n    }\n    else {\n        return node.scrollHeight&gt; node.offsetHeight;\n    }\n}\n</code></pre>\n\n<p>For the body, just use <code>hasVerticalScroll()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I found vanila solution</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var hasScrollbar = function() {\r\n  // The Modern solution\r\n  if (typeof window.innerWidth === 'number')\r\n    return window.innerWidth &gt; document.documentElement.clientWidth\r\n\r\n  // rootElem for quirksmode\r\n  var rootElem = document.documentElement || document.body\r\n\r\n  // Check overflow style property on body for fauxscrollbars\r\n  var overflowStyle\r\n\r\n  if (typeof rootElem.currentStyle !== 'undefined')\r\n    overflowStyle = rootElem.currentStyle.overflow\r\n\r\n  overflowStyle = overflowStyle || window.getComputedStyle(rootElem, '').overflow\r\n\r\n    // Also need to check the Y axis overflow\r\n  var overflowYStyle\r\n\r\n  if (typeof rootElem.currentStyle !== 'undefined')\r\n    overflowYStyle = rootElem.currentStyle.overflowY\r\n\r\n  overflowYStyle = overflowYStyle || window.getComputedStyle(rootElem, '').overflowY\r\n\r\n  var contentOverflows = rootElem.scrollHeight &gt; rootElem.clientHeight\r\n  var overflowShown    = /^(visible|auto)$/.test(overflowStyle) || /^(visible|auto)$/.test(overflowYStyle)\r\n  var alwaysShowScroll = overflowStyle === 'scroll' || overflowYStyle === 'scroll'\r\n\r\n  return (contentOverflows &amp;&amp; overflowShown) || (alwaysShowScroll)\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Let's bring this question back from the dead ;) There is a reason Google doesn't give you a simple solution. Special cases and browser quirks affect the calculation, and it is not as trivial as it seems to be.</p>\n\n<p>Unfortunately, there are problems with the solutions outlined here so far. I don't mean to disparage them at all - they are great starting points and touch on all the key properties needed for a more robust approach. But I wouldn't recommend copying and pasting the code from any of the other answers because</p>\n\n<ul>\n<li>they don't capture the effect of positioned content in a way that is reliable cross-browser. The answers which are based on body size miss this entirely (the body is not the offset parent of such content unless it is positioned itself). And those answers checking <code>$( document ).width()</code> and <code>.height()</code> fall prey to <a href=\"https://github.com/hashchange/jquery.documentsize#what-does-it-do-that-jquery-doesnt\" rel=\"nofollow\">jQuery's buggy detection of document size</a>.</li>\n<li>Relying on <code>window.innerWidth</code>, if the browser supports it, makes your code fail to detect scroll bars in mobile browsers, where the width of the scroll bar is generally 0. They are just shown temporarily as an overlay and don't take up space in the document. Zooming on mobile also becomes a problem that way (long story).</li>\n<li>The detection can be thrown off when people explicitly set the overflow of both the <code>html</code> and <code>body</code> element to non-default values (what happens then is a little involved - see <a href=\"http://stackoverflow.com/questions/12434416/overflowhidden-on-body-is-broken-in-ios6/28673415#28673415\">this description</a>). </li>\n<li>In most answers, body padding, borders or margins are not detected and distort the results.</li>\n</ul>\n\n<p>I have spent more time than I would have imagined on a finding a solution that \"just works\" (cough). The algorithm I have come up with is now part of a plugin, <a href=\"https://github.com/hashchange/jquery.isinview\" rel=\"nofollow\">jQuery.isInView</a>, which exposes <a href=\"https://github.com/hashchange/jquery.isinview#hasscrollbar-axis-\" rel=\"nofollow\">a <code>.hasScrollbar</code> method</a>. Have a look <a href=\"https://github.com/hashchange/jquery.isinview/blob/6887aa7affd07877ee6d2c04d48d393c8092632d/src/jquery.isinview.js#L573-646\" rel=\"nofollow\">at the source</a> if you wish. </p>\n\n<p>In a scenario where you are in full control of the page and don't have to deal with unknown CSS, using a plugin may be overkill - after all, you know which edge cases apply, and which don't. However, if you need reliable results in an unknown environment, then I don't think the solutions outlined here will be enough. You are better off using a well-tested plugin - mine or anybody elses.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I just want some simple JQ/JS to check if the current page/window (not a particular element) has a vertical scrollbar.</p>\n\n<p>Googling gives me stuff that seems overly complex for just this basic feature.</p>\n\n<p>How can this be done?</p>\n",
            "last_activity_date": 1424789948,
            "question_id": 2146874,
            "score": 53,
            "tags": [
                "javascript",
                "jquery",
                "scroll"
            ],
            "title": "Detect if a page has a vertical scrollbar?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In old school JavaScript, you could do this:</p>\n\n<pre><code>document.body.innerHTML = '&lt;p id=\"foo\"&gt;Some HTML&lt;/p&gt;' + document.body.innerHTML;\n</code></pre>\n\n<p>In response to your comment:</p>\n\n<blockquote>\n  <p>[...] I was interested in declaring the source of a new element's attributes and events, not the <code>innerHTML</code> of an element.</p>\n</blockquote>\n\n<p>You need to inject the new HTML into the DOM, though; that's why <code>innerHTML</code> is used in the old school JavaScript example. The <code>innerHTML</code> of the <code>BODY</code> element is prepended with the new HTML. We're not really touching the existing HTML inside the <code>BODY</code>.</p>\n\n<p>I'll rewrite the abovementioned example to clarify this:</p>\n\n<pre><code>var newElement = '&lt;p id=\"foo\"&gt;This is some dynamically added HTML. Yay!&lt;/p&gt;';\nvar bodyElement = document.body;\nbodyElement.innerHTML = newElement + bodyElement.innerHTML;\n// note that += cannot be used here; this would result in 'NaN'\n</code></pre>\n\n<p>Using a JavaScript framework would make this code much less verbose and improve readability. For example, jQuery allows you to do the following:</p>\n\n<pre><code>$('body').prepend('&lt;p id=\"foo\"&gt;Some HTML&lt;/p&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Instead of directly messing with <strong><code>innerHTML</code></strong> it might be better to create a fragment and then insert that:</p>\n\n<pre><code>function create(htmlStr) {\n    var frag = document.createDocumentFragment(),\n        temp = document.createElement('div');\n    temp.innerHTML = htmlStr;\n    while (temp.firstChild) {\n        frag.appendChild(temp.firstChild);\n    }\n    return frag;\n}\n\nvar fragment = create('&lt;div&gt;Hello!&lt;/div&gt;&lt;p&gt;...&lt;/p&gt;');\n// You can use native DOM methods to insert the fragment:\ndocument.body.insertBefore(fragment, document.body.childNodes[0]);\n</code></pre>\n\n<p>Benefits:</p>\n\n<ol>\n<li>You can use native DOM methods for insertion such as insertBefore, appendChild etc.</li>\n<li>You have access to the actual DOM nodes before they're inserted; you can access the fragment's childNodes object.</li>\n<li>Using document fragments is very quick; faster than creating elements outside of the DOM and in certain situations faster than innerHTML.</li>\n</ol>\n\n<p><hr /></p>\n\n<p>Even though <strong><code>innerHTML</code></strong> is used within the function, it's all happening outside of the DOM so it's much faster than you'd think...</p>\n",
                    "is_accepted": true,
                    "score": 69
                },
                {
                    "body": "<p>To my knowledge, which, to be fair, is fairly new and limited, the only potential issue with this technique is the fact that you are prevented from dynamically creating some table elements.</p>\n\n<p>I use a form to templating by adding \"template\" elements to a hidden DIV and then using cloneNode(true) to create a clone and appending it as required. Bear in ind that you do need to ensure you re-assign id's as required to prevent duplication.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You want this</p>\n\n<pre><code>document.body.insertAdjacentHTML( 'afterbegin', '&lt;div id=\"myID\"&gt;...&lt;/div&gt;' );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you want to insert HTML code inside existing page's tag use <a href=\"http://jnerator.com\" rel=\"nofollow\">Jnerator</a>. This tool was created specially for this goal.</p>\n\n<p>Instead of writing next code</p>\n\n<pre><code>    var htmlCode = '&lt;ul class=\\'menu-countries\\'&gt;&lt;li\n        class=\\'item\\'&gt;&lt;img src=\\'au.png\\'&gt;&lt;/img&gt;&lt;span&gt;Australia &lt;/span&gt;&lt;/li&gt;&lt;li\n        class=\\'item\\'&gt;&lt;img src=\\'br.png\\'&gt; &lt;/img&gt;&lt;span&gt;Brazil&lt;/span&gt;&lt;/li&gt;&lt;li\n        class=\\'item\\'&gt; &lt;img src=\\'ca.png\\'&gt;&lt;/img&gt;&lt;span&gt;Canada&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;';\n    var element = document.getElementById('myTag');\n    element.innerHTML = htmlCode;\n</code></pre>\n\n<p>You can write more understandable structure</p>\n\n<pre><code>    var jtag = $j.ul({\n        class: 'menu-countries',\n        child: [\n            $j.li({ class: 'item', child: [\n                $j.img({ src: 'au.png' }),\n                $j.span({ child: 'Australia' })\n            ]}),\n            $j.li({ class: 'item', child: [\n                $j.img({ src: 'br.png' }),\n                $j.span({ child: 'Brazil' })\n            ]}),\n            $j.li({ class: 'item', child: [\n                $j.img({ src: 'ca.png' }),\n                $j.span({ child: 'Canada' })\n            ]})\n        ]\n    });\n    var htmlCode = jtag.html();\n    var element = document.getElementById('myTag');\n    element.innerHTML = htmlCode;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Instead of tediously search for workarounds for each type of attribute and event when using the following syntax:</p>\n\n<pre><code>   elem = document.createElement(\"div\");\n   elem.id = 'myID';\n   elem.innerHTML = ' my Text '\n   document.body.insertBefore(elem,document.body.childNodes[0]);\n</code></pre>\n\n<p>Is there a way where I can just declare the entire HTML element as a string? like:</p>\n\n<pre><code>  elem = document.createElement(\"&lt;div id='myID'&gt; my Text &lt;/div&gt;\");\n  document.body.insertBefore(elem,document.body.childNodes[0]);\n</code></pre>\n",
            "last_activity_date": 1396022307,
            "question_id": 814564,
            "score": 47,
            "tags": [
                "javascript",
                "html",
                "dynamic-websites"
            ],
            "title": "Inserting HTML elements with JavaScript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The alerts are part of the web application. View the source code and look at the javascript.</p>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>By the browser.  It's the <code>onbeforeunload</code> handler that returns the customized text of the dialog, which is only the middle of the three paragraphs - the other two paragraphs as well as the text of the buttons cannot be customized or otherwise changed.</p>\n\n<pre><code>window.onbeforeunload = function(){ return 'Testing...' }\n</code></pre>\n\n<p>Will yield a dialog that says </p>\n\n<pre><code>Are you sure you want to navigate away from this page?\n\nTesting...\n\nPress OK to continue, or Cancel to stay on the current page.\n</code></pre>\n\n<p>You can nullify this by setting the handler to null</p>\n\n<pre><code>window.onbeforeunload = null;\n</code></pre>\n\n<p>Which StackOverflow itself does in a few places ;)</p>\n",
                    "is_accepted": true,
                    "score": 59
                }
            ],
            "body": "<p>When I try to close my Google docs tab with unsaved changes, this is what I get in my browser (FF 3.5). </p>\n\n<blockquote>\n  <p>Are you sure you want to navigate away\n  from this page?</p>\n  \n  <p>You have unsaved changes in this\n  document. Click Cancel now, then\n  'Save' to save them. Click OK now to\n  discard them.</p>\n  \n  <p>Press OK to continue, or Cancel to\n  stay on the current page.</p>\n</blockquote>\n\n<p>My question is whether such alerts are part of the web app (gdocs for eg.) or are they given out by the browser? If latter, how is this done? </p>\n",
            "last_activity_date": 1250876254,
            "question_id": 1289234,
            "score": 38,
            "tags": [
                "javascript",
                "browser",
                "google-docs",
                "alerts"
            ],
            "title": "Alerts when navigating away from a web page"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Javascript is single-threaded and can't access the filesystem, so I don't think you have to worry about those.  I'm not sure if there's a way to set a timeout to guard against infinite loops, but you could always spawn a (Java) thread that executes the script, and then kill the thread after so much time.</p>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p>To guard against infinite loops, you'd need to put it in a separate process so that it could be killed.</p>\n\n<p>To guard against creating threads, you'd need to extend SecurityManager (the default implementation allows untrusted code to access non-root thread groups).</p>\n\n<p>Java security does allow you to prevent access to the file system.</p>\n\n<p>For database restrictions, you might be able to use the standard SQL user security, but that is quite weak. Otherwise, you need to provide an API that enforces your restrictions.</p>\n\n<p>Edit: I should point out that the version of Rhino provided with JDK6 has had security work done on it, but doesn't include the compiler.</p>\n",
                    "is_accepted": true,
                    "score": 6
                },
                {
                    "body": "<p>To guard against infinite loops, you can observe the instruction count as the script runs (this works only with interpreted scripts, not with compiled ones).</p>\n\n<p>There is this <a href=\"http://www-archive.mozilla.org/rhino/apidocs/org/mozilla/javascript/ContextFactory.html\" rel=\"nofollow\">example in the Rhino JavaDocs</a> to prevent a script from running for more than ten seconds:</p>\n\n<pre><code> protected void observeInstructionCount(Context cx, int instructionCount)\n {\n     MyContext mcx = (MyContext)cx;\n     long currentTime = System.currentTimeMillis();\n     if (currentTime - mcx.startTime &gt; 10*1000) {\n         // More then 10 seconds from Context creation time:\n         // it is time to stop the script.\n         // Throw Error instance to ensure that script will never\n         // get control back through catch or finally.\n         throw new Error();\n     }\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>To block Java class and method access have a look at...</p>\n\n<p><a href=\"http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/\">http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I just ran across this blog post that seems to be useful for sandboxing more or less anything (not just Rhino):</p>\n\n<p><a href=\"http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html\" rel=\"nofollow\">http://calumleslie.blogspot.com/2008/06/simple-jvm-sandboxing.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Part of our java application needs to run javascript that is written by non-developers.  These non-developers are using javascript for data formatting. (Simple logic and string concatenation mostly).</p>\n\n<p>My question is how can I setup the execution of these scripts to make sure scripting errors don't have a major negative impact on the rest of the application.</p>\n\n<ul>\n<li>Need to guard against infinite loops</li>\n<li>Guard against spawning new threads.  </li>\n<li>Limit access to services and environment\n<ul>\n<li>File system (Example: If a disgruntled script writer decided to delete files)</li>\n<li>Database (Same thing delete database records)</li>\n</ul></li>\n</ul>\n\n<p>Basically I need to setup the javascript scope to only include exactly what they need and no more.</p>\n",
            "last_activity_date": 1417814105,
            "question_id": 93911,
            "score": 28,
            "tags": [
                "java",
                "javascript",
                "sandbox",
                "rhino"
            ],
            "title": "How can you run Javascript using Rhino for Java in a sandbox?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>It is suboptimal. Have you considered passing your data as JSON using django's built in serializer for that?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can include <code>&lt;script&gt;</code> tags inside your .html templates, and then build your data structures however is convenient for you.  The template language isn't only for HTML, it can also do Javascript object literals.</p>\n\n<p>And Paul is right: it might be best to use a json module to create a JSON string, then insert that string into the template.  That will handle the quoting issues best, and deal with deep structures with ease.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I recommend against putting much JavaScript in your Django templates - it tends to be hard to write and debug, particularly as your project expands. Instead, try writing all of your JavaScript in a separate script file which your template loads and simply including just a JSON data object in the template. This allows you to do things like run your entire JavaScript app through something like <a href=\"http://www.jslint.com\" rel=\"nofollow\">JSLint</a>, minify it, etc. and you can test it with a static HTML file without any dependencies on your Django app. Using a library like simplejson also saves you the time spent writing tedious serialization code.</p>\n\n<p>If you aren't assuming that you're building an AJAX app this might simply be done like this:</p>\n\n<p>In the view:</p>\n\n<pre><code>from django.utils import simplejson\n\n\ndef view(request, \u2026):\n    js_data = simplejson.dumps(my_dict)\n    \u2026\n    render_template_to_response(\"my_template.html\", {\"my_data\": js_data, \u2026})\n</code></pre>\n\n<p>In the template:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    data_from_django = {{ my_data }};\n    widget.init(data_from_django);\n&lt;/script&gt;\n</code></pre>\n\n<p>Note that the type of data matters: if <code>my_data</code> is a simple number or a string from a controlled source which doesn't contain HTML, such as a formatted date, no special handling is required. If it's possible to have untrusted data provided by a user you will need to sanitize it using something like the <a href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#escape\" rel=\"nofollow\">escape</a> or <a href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#escapejs\" rel=\"nofollow\">escapejs</a> filters and ensure that your JavaScript handles the data safely to avoid <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" rel=\"nofollow\">cross-site scripting</a> attacks. </p>\n\n<p>As far as dates go, you might also want to think about how you pass dates around. I've almost always found it easiest to pass them as Unix timestamps:</p>\n\n<p>In Django:</p>\n\n<pre><code>time_t = time.mktime(my_date.timetuple())\n</code></pre>\n\n<p>In JavaScript, assuming you've done something like <code>time_t = {{ time_t }}</code> with the results of the snippet above:</p>\n\n<pre><code>my_date = new Date();\nmy_date.setTime(time_t*1000);\n</code></pre>\n\n<p>Finally, pay attention to UTC - you'll want to have the Python and Django date functions exchange data in UTC to avoid embarrassing shifts from the user's local time.</p>\n\n<p>EDIT : Note that the setTime in javascript is in millisecond whereas the output of time.mktime is seconds. That's why we need to multiply by 1000</p>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<p>See the related response to <a href=\"http://stackoverflow.com/questions/683462/best-way-to-integrate-python-and-javascript/683928#683928\">this question</a>. One option is to use <a href=\"http://jsonpickle.googlecode.com/svn/docs/index.html\" rel=\"nofollow\">jsonpickle</a> to serialize between Python objects and JSON/Javascript objects.  It wraps simplejson and handles things that are typically not accepted by simplejson.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Putting Java Script embedded into Django template is <strong>rather</strong> always bad idea. </p>\n\n<p><strong>Rather</strong>, because there are some exceptions from this rule.</p>\n\n<p>Everything depends on the your Java Script code site and functionality.</p>\n\n<p>It is better to have seperately static files, like JS, but the problem is that every seperate file needs another connect/GET/request/response mechanism. Sometimes for small one, two liners code os JS to put this into template, bun then use django templatetags mechanism - you can use is in other templates ;)</p>\n\n<p>About objects - the same. If your site has AJAX construction/web2.0 like favour - you can achieve very good effect putting some count/math operation onto client side. If objects are small - embedded into template, if large - response them in another connection to avoid hangind page for user.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For anyone who might be having a problems with this, be sure you are rendering your json object under safe mode in the template. You can manually set this like this</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    data_from_django = {{ my_data|safe }};\n    widget.init(data_from_django);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                }
            ],
            "body": "<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>\n\n<p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>\n\n<p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>\n\n<p>I'm not (yet) using a JavaScript library like jQuery.</p>\n",
            "last_activity_date": 1402326734,
            "question_id": 1445989,
            "score": 23,
            "tags": [
                "javascript",
                "python",
                "django"
            ],
            "title": "Passing Python Data to JavaScript via Django"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Given the advances Javascript is making (especially with nodejs that allows server side programming with js), there is more and more complex code in JS. Here are a couple of instances where I have used bitwise operators: </p>\n\n<ul>\n<li><p>IP address operations: </p>\n\n<pre><code>//computes the broadcast address based on the mask and a host address\nbroadcast = (ip &amp; mask) | (mask ^ 0xFFFFFFFF)\n\n\n//converts a number to an ip adress \nsprintf(ip, \"%i.%i.%i.%i\", ((ip_int &gt;&gt; 24) &amp; 0x000000FF),\n                         ((ip_int &gt;&gt; 16) &amp; 0x000000FF),\n                         ((ip_int &gt;&gt;  8) &amp; 0x000000FF),\n                         ( ip_int        &amp; 0x000000FF));\n</code></pre></li>\n</ul>\n\n<p>Note: this is C code, but JS is almost identical </p>\n\n<ul>\n<li>CRC algorithms uses them a lot</li>\n</ul>\n\n<p>Check out the <a href=\"http://en.wikipedia.org/wiki/Computation_of_CRC\" rel=\"nofollow\">wikipedia entry</a> on this</p>\n\n<ul>\n<li>Screen resolution operations</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can use them for flipping a boolean value:</p>\n\n<pre><code>var foo = 1;\nvar bar = 0;\nalert(foo ^= 1);\nalert(bar ^= 1);\n</code></pre>\n\n<p>This is a bit silly though and for the most part bitwise operators do not have many applications in Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><strong><a href=\"http://en.wikipedia.org/wiki/Mask%5F%28computing%29\" rel=\"nofollow\">Bitmasks</a></strong>.</p>\n\n<p>Used extensively, for example, in JS events.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Example: </p>\n\n<p>Parses hexadecimal value to get RGB color values.</p>\n\n<pre><code>var hex = 'ffaadd';\nvar rgb = parseInt(hex, 16); \n\nvar red   = (rgb &gt;&gt; 16) &amp; 0xFF;\nvar green = (rgb &gt;&gt; 8) &amp; 0xFF;  \nvar blue  = rgb &amp; 0xFF;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>I've used it once for a <a href=\"http://candyscript.com/projects/minikit/samples/permissions.html\" rel=\"nofollow\">permissions widget</a>. File permissions in unix are a bitmask, so to parse it, you need to use bit operations.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In JavaScript, you can use a double bitwise negation (<code>~~n</code>) as a replacement for <code>Math.floor(n)</code> (if <code>n</code> is a positive number) or <code>parseInt(n, 10)</code> (even if <code>n</code> is negative). <code>n|n</code> and <code>n&amp;n</code> always yield the same results as <code>~~n</code>.</p>\n\n<pre><code>var n = Math.PI;\nn; // 3.141592653589793\nMath.floor(n); // 3\nparseInt(n, 10); // 3\n~~n; // 3\nn|n; // 3\nn&amp;n; // 3\n\n// ~~n works as a replacement for parseInt() with negative numbers\u2026\n~~(-n); // -3\n(-n)|(-n); // -3\n(-n)&amp;(-n); // -3\nparseInt(-n, 10); // -3\n// \u2026although it doesn\u2019t replace Math.floor() for negative numbers\nMath.floor(-n); // -4\n</code></pre>\n\n<p>A single bitwise negation (<code>~</code>) calculates <code>-(parseInt(n, 10) + 1)</code>, so two bitwise negations will return <code>-(-(parseInt(n, 10) + 1) + 1)</code>.</p>\n\n<p>It should be noted that of these three alternatives, <strong><a href=\"http://ernestdelgado.com/archive/benchmark-on-the-floor/\"><code>n|n</code> appears to be the fastest</a></strong>.</p>\n\n<p><strong>Update:</strong> More accurate benchmarks here: <strong><a href=\"http://jsperf.com/rounding-numbers-down\">http://jsperf.com/rounding-numbers-down</a></strong></p>\n\n<p>(As posted on <a href=\"http://stackoverflow.com/questions/1995113/strangest-language-feature/2019171#2019171\">Strangest language feature</a>)</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Few other examples of how to use bitwise not and double bitwise not:</p>\n\n<p><strong>Floor operation</strong></p>\n\n<pre><code>~~2.5     //2\n~~2.1     //2\n~~(-2.5) //-2\n</code></pre>\n\n<p><strong>Check whether indexOf returned -1 or not</strong></p>\n\n<pre><code>var foo = 'abc';\n!~foo.indexOf('bar'); //true\n</code></pre>\n\n<p><s>You may find more examples and explanation in this article about <a href=\"http://podlipensky.com/post/2012/06/04/Bitwise-NOT-in-Javascript.aspx\" rel=\"nofollow\">bitwise operations in javascript</a>.</s></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I <em>heavily</em> use bitwise operators for numerical convertions in production scripts, because sometimes they're much faster than their <code>Math</code> or <code>parseInt</code> equivalents.</p>\n\n<p>The price I have to pay is <strong>code readability</strong>. So I usualy use <code>Math</code> in development and bitwise in production.</p>\n\n<p><a href=\"http://jsperf.com/math-floor-vs-math-round-vs-parseint/18\" rel=\"nofollow\">You can find some performance tricks on jsperf.com</a>.</p>\n\n<p>As you can see, browsers don't optimize <code>Math.ceil</code> and <code>parseInt</code> for years, so I predict bitwise will be faster and shorter way to do things <a href=\"http://stackoverflow.com/questions/2526682/why-is-javascripts-math-floor-the-slowest-way-to-calculate-floor-in-javascript\">in furure as well</a>. </p>\n\n<p><a href=\"http://stackoverflow.com/questions/4024429/what-does-a-single-vertical-bar-mean-in-javascript\">Some further reading on SO...</a></p>\n\n<hr>\n\n<p>Bonus: <strong>cheat sheet</strong> for  <code>| 0</code> : an easy and fast way to convert anything to integer:</p>\n\n<p>(sorry for russian comments, google translate can help you)</p>\n\n<pre><code>( 3|0 ) === 3;             // \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\n( 3.3|0 ) === 3;           // \u0443 \u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c\n( 3.8|0 ) === 3;           // \u043d\u0435 \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442 \u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c\n( -3.3|0 ) === -3;         // \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u0443 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n( -3.8|0 ) === -3;         // \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 Math.floor(-3.3) == Math.floor(-3.8) == -4\n( \"3\"|0 ) === 3;           // \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u043a \u0446\u0435\u043b\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c\n( \"3.8\"|0 ) === 3;         // \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u043f\u044f\u0442\u044c \u0436\u0435 \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c\n( \"-3.8\"|0 ) === -3;       // \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u0443 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n( NaN|0 ) === 0;           // NaN \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u043d\u0443\u043b\u044e\n( Infinity|0 ) === 0;      // \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043a \u043d\u0443\u043b\u044e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0438 \u0441 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c\u044e,\n( -Infinity|0 ) === 0;     // \u0438 \u0441 \u043c\u0438\u043d\u0443\u0441 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0441\u0442\u044c\u044e,\n( null|0 ) === 0;          // \u0438 \u0441 null,\n( (void 0)|0 ) === 0;      // \u0438 \u0441 undefined,\n( []|0 ) === 0;            // \u0438 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c,\n( [3]|0 ) === 3;           // \u043d\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043e\u0434\u043d\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0447\u0438\u0441\u043b\u0443,\n( [-3.8]|0 ) === -3;       // \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0441 \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438,\n( [\" -3.8 \"]|0 ) === -3;   // \u0438 \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0441 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a,\n( [-3.8, 22]|0 ) === 0     // \u043d\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0432\u043d\u043e\u0432\u044c \u0437\u0430\u043d\u0443\u043b\u044f\u0435\u0442\u0441\u044f\n( {}|0 ) === 0;                // \u043a \u043d\u0443\u043b\u044e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0443\u0441\u0442\u043e\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\n( {'2':'3'}|0 ) === 0;         // \u0438\u043b\u0438 \u043d\u0435 \u043f\u0443\u0441\u0442\u043e\u0439\n( (function(){})|0 ) === 0;    // \u043a \u043d\u0443\u043b\u044e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0443\u0441\u0442\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f\n( (function(){ return 3;})|0 ) === 0;\n</code></pre>\n\n<p>and some magic for me: </p>\n\n<pre><code>3 | '0px' === 3;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I just found this question trying to confirm if the bitwise <code>AND</code> operator also was <code>&amp;</code> in Javascript.</p>\n\n<p>Since you asked for an example:</p>\n\n<pre><code>if ($('input[id=\"user[privileges]\"]').length &gt; 0) {\n    $('#privileges button').each(function () {\n        if (parseInt($('input[id=\"user[privileges]\"]').val()) &amp; parseInt($(this).attr('value'))) {\n            $(this).button('toggle');\n        }\n    });\n}\n</code></pre>\n\n<p>It populates the state of buttons with jQuery given a bitmask value of a hidden field:</p>\n\n<ul>\n<li><code>none</code> = <code>0</code></li>\n<li><code>user</code> = <code>1</code></li>\n<li><code>administrator</code> = <code>2</code></li>\n<li><code>user</code> + <code>administrator</code> = <code>3</code></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>They seem to be very useful when you work with hex values and bits. Since 4 bits can represent 0 to F.</p>\n\n<p>1111 = F\n1111 1111 = FF.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A <em>real life</em> example?  :</p>\n\n<h2><code>^</code> (Bitwise XOR) as a <code>I/O</code> toggler</h2>\n\n<p><a href=\"http://jsbin.com/bisosixa/1/edit?js,console,output\" rel=\"nofollow\">jsBin example</a></p>\n\n<p>Used like <code>value ^= 1</code> will change on every call the <code>value</code> to <code>0, 1, 0, 1 ...</code><br>\nIf we pass that <code>value</code> as a <em>Statement</em> into a <em>Conditional operator</em> <code>(?:)</code> like</p>\n\n<pre><code>statement ? (if true) : (if false)\n</code></pre>\n\n<p>and checking for the boolean representation of <code>0=false, 1=true</code> we can toggle text, classes, styles.... whatever is needed like i.e: a button text:</p>\n\n<pre><code>value ? \"Close dropdown\" : \"Open dropdown\";\n</code></pre>\n\n<p>For a <strong>single element</strong>, a Toggle function could look like:</p>\n\n<pre><code>// USING GLOBAL VARIABLE\nvar tog = 0;\nvar btn = document.getElementById('myButton');\nfunction toggler(){   \n  tog ^= 1;\n  this.innerHTML = tog ? \"hide\" : \"show\";\n}\nbtn.addEventListener('click', toggler, false);\n</code></pre>\n\n<p>For <strong>multiple elements</strong> we can store the <code>tog</code> variable state directly into the <code>this</code> - <code>ElementHTML</code> <strong>Object</strong> like:</p>\n\n<pre><code>// WITHOUT GLOBAL VARIABLE\nvar btns = document.getElementsByClassName('myButton');\nfunction toggler(){   \n  var tog = this.tog ^= 1; // get/set tog value out of this.tog object\n  this.innerHTML = tog ? \"hide\" : \"show\";\n}\nfor(var i=0; i&lt;btns .length; i++){\n   btns[i].addEventListener('click', toggler, false);\n}\n</code></pre>\n\n<p><sub>Or, if you don't like the <code>this</code> idea, go for the standard <code>dataset</code> attribute property ;) </sub></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>to tell if a number is odd:</p>\n\n<pre><code>function isOdd(number) {\n    return !!(number &amp; 1);\n}\n\nisOdd(1); // true, 1 is odd\nisOdd(2); // false, 2 is not odd\nisOdd(357); // true, 357 is odd\n</code></pre>\n\n<p>faster than modulus - use where performance <em>really</em> counts!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've read <strong><a href=\"http://stackoverflow.com/questions/276706/what-are-bitwise-operators\">this</a></strong> (<a href=\"http://stackoverflow.com/questions/276706/what-are-bitwise-operators\">http://stackoverflow.com/quest...</a>), so I know <strong>what</strong> bitwise operators are but I'm still not clear on how one might use them... Can anyone offer any real-world examples of where a bitwise operator would be useful in JavaScript?</p>\n\n<p>Thanks.</p>\n\n<h2>Edit:</h2>\n\n<p>Just digging into the <strong><a href=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.js\">jQuery source</a></strong> I've found a couple of places where bitwise operators are used, for example: (only the &amp; operator)</p>\n\n<pre><code>// Line 2756:\nevent.which = (event.button &amp; 1 ? 1 : ( event.button &amp; 2 ? 3 : ( event.button &amp; 4 ? 2 : 0 ) ));\n\n// Line 2101\nvar ret = a.compareDocumentPosition(b) &amp; 4 ? -1 : a === b ? 0 : 1;\n</code></pre>\n",
            "last_activity_date": 1403897989,
            "question_id": 654057,
            "score": 22,
            "tags": [
                "javascript"
            ],
            "title": "Where would I use a bitwise operator in JavaScript?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>This?</p>\n\n<pre><code>str = str.replace(/\\s/g, '');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Rkb57/\">Demo.</a></p>\n\n<hr>\n\n<p><strong>Update:</strong> Based on <a href=\"http://stackoverflow.com/questions/5964373/is-there-a-difference-between-s-g-and-s-g\">this question</a>, this:</p>\n\n<pre><code>str = str.replace(/\\s+/g, '');\n</code></pre>\n\n<p>is a better solution. It produces the same result, but it does it faster.</p>\n\n<p><strong>The Regex</strong></p>\n\n<p><code>\\s</code> is the regex for \"whitespace\", and <code>g</code> is the \"global\" flag, meaning match ALL <code>\\s</code> (whitespaces). </p>\n\n<p>A great explanation for <code>+</code> can be found <a href=\"http://stackoverflow.com/questions/5964373/is-there-a-difference-between-s-g-and-s-g\">here</a>.</p>\n\n<p>As a side note, you could replace the content between the single quotes to anything you want, so you can replace whitespace with any other string.</p>\n",
                    "is_accepted": true,
                    "score": 231
                },
                {
                    "body": "<pre><code>var a = \"/var/www/site/Brand new document.docx\";\nalert(a.split(' ').join(''));\nalert(a.replace( /\\s/g, \"\")); \n</code></pre>\n\n<p>Two ways of doing this!</p>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>How to remove spaces in a string? For instance:</p>\n\n<p>Input  : <code>'/var/www/site/Brand new document.docx'</code><br>\nOutput : <code>'/var/www/site/Brandnewdocument.docx'</code></p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1415024447,
            "question_id": 5963182,
            "score": 100,
            "tags": [
                "javascript",
                "jquery",
                "text"
            ],
            "title": "How to remove spaces from a string using JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>parseInt() will force it to be type integer, or will be NaN (not a number) if it cannot perform the conversion.       </p>\n\n<pre><code>var currentValue = parseInt($(\"#replies\").text(),10);\n</code></pre>\n\n<p>The second paramter (radix) makes sure it is parsed as a decimal number.</p>\n",
                    "is_accepted": true,
                    "score": 139
                },
                {
                    "body": "<p>The integer is being converted into a string rather than vice-versa. You want:</p>\n\n<pre><code>var newValue = parseInt(currentValue) + 1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>to increment by one you can do something like </p>\n\n<pre><code>  var newValue = currentValue ++;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In regards to the octal misinterpretation of .js - I just used this...</p>\n\n<pre><code>parseInt(parseFloat(nv))\n</code></pre>\n\n<p>and after testing with leading zeros, came back everytime with the correct representation.</p>\n\n<p>hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>[your code should be like dis</p>\n\n<pre><code>&lt;span id=\"replies\"&gt;8&lt;/span&gt;\nvar currentValue = $(\"#replies\").text();\nvar newValue = parseInt(parseFloat(currentValue)) + 1;\n$(\"replies\").text(newValue);\n</code></pre>\n\n<p><a href=\"http://rajeevcse04.blogspot.com\" rel=\"nofollow\">Hacks N Tricks</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Parse int is the tool you should use here, but like any tool it should be used correctly. When using parseInt you should always use the radix parameter to ensure the correct base is used</p>\n\n<pre><code>var currentValue = parseInt($(\"#replies\").text(),10);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<pre><code>var month = new Date().getMonth();\nvar newmon = month + 1;\n$('#month').html((newmon &lt; 10 ? '0' : '') + newmon );\n</code></pre>\n\n<p>I simply fixed your month issue, getMonth array start from 0 to 11.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>parseInt didn't work for me in IE. So I simply used + on the variable you want as an integer.</p>\n\n<pre><code>var currentValue = $(\"#replies\").text();\nvar newValue = +currentValue + 1;\n$(\"replies\").text(newValue);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Simply, add a plus sign before the text value</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var newValue = +currentValue + 1;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can multiply the variable by 1 to force JavaScript to convert the variable to a number for you and then add it to your other value.  This works because multiplication isn't overloaded as addition is.   Some may say that this is less clear than parseInt, but it is a way to do it and it hasn't been mentioned yet.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a simple html block like:</p>\n\n<pre><code>&lt;span id=\"replies\"&gt;8&lt;/span&gt;\n</code></pre>\n\n<p>Using jquery I'm trying to add a 1 to the value (8).</p>\n\n<pre><code>var currentValue = $(\"#replies\").text();\nvar newValue = currentValue + 1;\n$(\"replies\").text(newValue);\n</code></pre>\n\n<p>What's happening is it is appearing like:</p>\n\n<p>81</p>\n\n<p>then</p>\n\n<p>811</p>\n\n<p>not 9, which would be the correct answer.  What am I doing wrong?</p>\n",
            "last_activity_date": 1421957679,
            "question_id": 460172,
            "score": 59,
            "tags": [
                "javascript",
                "jquery",
                "casting"
            ],
            "title": "How do I add an integer value with javascript (jquery) to a value that&#39;s returning a string?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>You usually use <code>var $this = $(this);</code> to avoid creating a new jQuery object more often than necessary. In case of the code below you only create one object instead of two/four. It is completely unrelated to chainability.</p>\n\n<p>You could also call it <code>that</code>, <code>$thi$</code> or anything else (don't use the latter one though, it's ugly :p) as <code>$</code> is just a simple character in JavaScript, exactly like a-z are.</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p><code>$this</code> is a variable named <code>$this</code> containing a reference to <code>$(this)</code>. A bit pointless IMO.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><code>$this</code> is simply a local variable, named that way to remind you of <code>$(this)</code>.  It saves the work of creating the jQuery version of <code>this</code>, and you can use it a number of times.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>It's quite simple: <code>$this = $(this)</code>. It's just a shorthand used in the scope of the inner function. The dollar sign is just a character in this case, it doesn't refer to jQuery at all. It might just as well have been named <code>_this</code> or <code>xthis</code>, the <code>$</code> is just a reminder of what the variable contains.</p>\n\n<p>It may seem pointless, but it eliminates three redundant method invocations (the <code>$()</code> function isn't free) so it is most likely used there for performance reasons.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><code>$this</code> is just a local copy of <code>this</code> wrapped in jQuery.</p>\n\n<p>In the long term, keeping a local copy rather than wrapping <code>this</code> each time it is needed is much more efficient.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>It just fills <code>$this</code> variable with <code>$(this)</code>, so you do not have to lookup for <code>$(this)</code> element every call. It has better performance</p>\n\n<pre><code>var $this = $(this);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>you may have overlooked this line:</p>\n\n<pre><code>var $this = $(this);\n</code></pre>\n\n<p>Here, <code>$this</code> is just a variable that holds the value of <code>$(this)</code>. You can use it interchangeably with <code>$(this)</code> with the benefit that you aren't doing the same lookup over and over.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p><code>this</code> in javascript (usually) represents a reference to the object that invoked the current function.  This concept is somewhat fuzzied a bit by jQuery's attempts to make the use of <code>this</code> more user friendly within their <a href=\"http://api.jquery.com/each/\"><strong><code>.each()</code></strong></a> looping stucture.</p>\n\n<p><em><strong>outside</em></strong> the <code>.each()</code>, <code>this</code> represents the jQuery object that <code>.lockDimensions</code> is invoked by.</p>\n\n<p><em><strong>inside</em></strong> the <code>.each()</code> it represents the current iterated DOM object.</p>\n\n<p>Generally the purpose of storing <code>$(this)</code> in a local variable is to prevent you from calling the jQuery function <code>$()</code> <strong>multiple times</strong>, caching a <em>jQueryized</em> <code>this</code> should help efficiency if you have to use it multiple times.</p>\n\n<p><code>$</code> is simply a valid variable name character and is used as the first character of a variable name <em>usually</em> to queue the programmer that it is a jQuery object already (and has the associated methods/properties available).</p>\n\n<p>This question is actually unrelated to chain-ability, but to maintain chain-ability you should return <code>this</code> so that other function calls can be added, and maintain the meaning of <code>this</code> in those calls as well.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p><code>$this = $(this)</code> is a way to cache the jQuery object. It is expensive to run the jQuery function each time, so storing the output allows you to re-use the selector over and over again without calling jQuery function again.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><code>$this</code> is just an ordinary variable. The <code>$</code> character is a valid character in variable names, so <code>$this</code> acts the same as any other non-reserved variable name. It's functionally identical to calling a variable <code>JellyBean</code>.</p>\n",
                    "is_accepted": true,
                    "score": 93
                },
                {
                    "body": "<p>Inside <code>$.fn.lockDimensions</code>, <code>this</code> is the jQuery object that had <code>lockDimensions</code> called on it.</p>\n\n<p>Inside the <code>.each</code>, <code>this</code> now references the DOMElement in the current iteration of the loop.  <code>$(this)</code> wraps the DOMElement in a jQuery object, and <code>var $this = $(this);</code> is just saving <code>$(this)</code> in a variable called <code>$this</code>, so the jQuery constructor doesn't need to be called multiple times (if you were to use <code>$(this)</code> instead).</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><code>$</code> sign is usually used  before variable names in JavaScript to differentiate between general value and jQuery object. So here <code>$this</code> just gets the value of <code>$(this)</code> which returns jQuery object of <code>this</code>. <code>$</code> is just a part of valid variable name. </p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You have wandered into the realm of javascript scope and closure.</p>\n\n<p>For the short answer:</p>\n\n<pre><code>this.bar()\n</code></pre>\n\n<p>is executed under the scope of foo, (as this refers to foo)</p>\n\n<pre><code>var barf = this.bar;\nbarf();\n</code></pre>\n\n<p>is executed under the global scope.</p>\n\n<p>this.bar basically means:</p>\n\n<p>execute the function pointed by this.bar, under the scope of this (foo). When you copied this.bar to barf, and run barf. Javascript understood as, run the function pointed by barf, and since there is no this, it just runs in global scope.</p>\n\n<p>To correct this, you can change</p>\n\n<pre><code>barf();\n</code></pre>\n\n<p>to something like this:</p>\n\n<pre><code>barf.apply(this);\n</code></pre>\n\n<p>This tells Javascript to bind the scope of this to barf before executing it.</p>\n\n<p>For jquery events, you will need to use an anonymous function, or extend the bind function in prototype to support scoping.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>I want to jump in here, even though I do not have expert jQuery skills.</p>\n\n<p>Countless times I see lines of code or concepts similar to:</p>\n\n<pre><code>var $this = $(this);\n</code></pre>\n\n<p>So I do a rewrite of it similar to:</p>\n\n<pre><code>var $jims_this = $(this);\n</code></pre>\n\n<p>And test it. Also I do this to clear up any confusion I might have.</p>\n\n<p>Here is another example of similar poorly explained code:</p>\n\n<pre><code> &lt;style&gt;\n    a.a { font-weight: bold; }\n &lt;/style&gt;\n</code></pre>\n\n<p>Next, add the addClass call to your script:</p>\n\n<pre><code>  $(\"a\").addClass(\"a\");\n</code></pre>\n\n<p>This does work but it is confusing. It could have been written as:</p>\n\n<pre><code>&lt;style&gt;\na.my_bold_class { font-weight: bold; }\n&lt;/style&gt;\n\n $(\"a\").addClass(\"my_bold_class\");\n</code></pre>\n\n<p>Jim</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code> $this = $(this)\n</code></pre>\n\n<p>...which means that you are assigning the current object to a variable named $this. It is not a keyword. It is just a variable name.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I've seen some discussions on SO regarding <code>$(this)</code> vs <code>$this</code> in jQuery, and they make sense to me. (See <a href=\"http://stackoverflow.com/questions/1051782/jquery-this-vs-this\">discussion here</a> for an example.)</p>\n\n<p>But what about the snippet below, from the jQuery website plugin tutorial showing how chainability works?</p>\n\n<pre><code>(function ($) {\n\n    $.fn.lockDimensions = function (type) {\n\n        return this.each(function () {\n\n            var $this = $(this);\n\n            if (!type || type == 'width') {\n                $this.width($this.width());\n            }\n\n            if (!type || type == 'height') {\n                $this.height($this.height());\n            }\n\n        });\n\n    };\n})(jQuery);\n</code></pre>\n\n<p>What does <code>$this</code> represent above?  Just when I think I have it figured out ...</p>\n",
            "last_activity_date": 1411633702,
            "question_id": 7389944,
            "score": 57,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "$this vs $(this) in jQuery"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>For one thing, you can use prototype to extend objects that are built into the JavaScript language (like String). I prefer the second example for custom objects.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<blockquote>\n  <p><i> So, on to my problem: Why the hell would you want to do this? Why would you not just put the play function in Guitar to begin with? Why declare an instance and then start adding methods later? </i></p>\n</blockquote>\n\n<p>Javascript is not a 'classical' inheritance language.  It uses prototypal inheritance.  Its just the way it is.  That being the case, the proper way to create an method on a 'class' is to put the method on the prototype.  Note that I put 'class' in quotes, since strictly speaking JS has no notion of 'class'.  In JS, you work on objects, which are defined as functions.</p>\n\n<p>You can declare the method in the function that defines Guitar, however, when you do that, every new guitar gets its <em>own</em> copy of the play method.  Putting it on the prototype is more efficient in the runtime environment when you start creating Guitars.  Every instance shares the same play method, but the context/scope is set when invoked so it acts a proper instance method you are used to in your classical inheritance language.</p>\n\n<p>Note the difference.  In the 'why not this way' example you posted, every time you create a new Guitar, you need to create a new play method that is the same as every other play method.  If play is on the prototype, however, all Guitars borrow from the same prototype, so they all share the same code for play.  Its the difference between <em>x</em> number of guitars, each with identical play code (so you have <em>x</em> copies of play) vs <em>x</em> number of guitars sharing the same play code (1 copy of play no matter how many Guitars).  The trade off is of course that at runtime play needs to be associated with the object on which it is called for scoping, but javascript has methods that allow you to do that very efficiently and easily (namely the <code>call</code> and <code>apply</code> methods)</p>\n\n<p>Many javascript frameworks define their own utilities for creating 'classes'.  Typically they allow you to write code like the example you said you would like to see.  Behind the scenes, they are putting the functions on the prototype for you.</p>\n\n<hr>\n\n<p>EDIT -- in answer to your updated question, why can't one do</p>\n\n<pre><code>function Guitar() {\n    this.prototype.play = function()....\n}\n</code></pre>\n\n<p>it has to do with how javascript creates objects with the 'new' keyword.  See the second answer <a href=\"http://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript\">here</a> -- basically when you create an instance, javascript creates the object and <em>then</em> assigns the prototype properties.  So this.prototype.play doesn't really make sense; in fact, if you try it you get an error.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Javascript is <strong>prototypal based</strong>. When in Rome, do as Romans do so when in JS, use prototypal inheritance.</p>\n\n<p>It's more efficient because the method becomes inherited on each object. If it wasn't a prototypal method then <em>every</em> instance of that object would each have its own <code>play</code> method. Why go the inefficient route and non-traditional to JS route when we can go the efficient and natural to JS route?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The first method you give is faster, and it really begins to make sense when you write it in another order:</p>\n\n<pre><code>//Guitar function constructor\nfunction Guitar(color, strings) {\n  this.color = color;\n  this.strings = strings;\n}\n\nGuitar.prototype.play = function (chord) {\n  alert('Playing chord: ' + chord);\n};\n\nvar myGuitar = new Guitar('Black', ['D', 'A', 'D', 'F', 'A', 'E']);\n</code></pre>\n\n<p>It is faster because Javascript does not need to execute the constructor to create the variables, it can just use the predefined variables of the prototype.</p>\n\n<p>For a proof, <a href=\"http://stackoverflow.com/questions/3493252/javascript-prototype-operator-performance-saves-memory-but-is-it-faster/3493725#3493725\"><strong>see this speed test</strong></a> on a question that is much like this one.</p>\n\n<hr>\n\n<p>And maybe this alternative version makes even more sense to you:</p>\n\n<pre><code>function Guitar(){\n  // constructor\n}\n\nGuitar.prototype = {\n  play: function(a){\n    alert(a);\n  },\n\n  stop: function(){\n    alert('stop it');\n  }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You already have a lot of good answers that is why I'm not going through all of your points.</p>\n\n<blockquote>\n  <p>Why declare an instance and then start adding methods later? </p>\n</blockquote>\n\n<p>That is not correct. The prototype object exists independently of every instance. It is a <strong>property of the function object</strong> (the constructor function).<br>\nWhen you create a new instance it \"inherits\" all the properties from the prototype (in fact, it has a reference to it). </p>\n\n<p>Actually it makes sense if you think about objects and references: It is better (memory-wise) to <em>share one reference</em> to an object than each instance having its own copy of an object (the object in this case would be the function <code>play</code>).</p>\n\n<p>As to why it is prototype based: You could also ask why different language paradigms exist (functional, oo, declarative). There is no <em>only one</em> correct way to do something.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It is based on the Prototype creational design pattern. This Wikipedia link has a nice discussion.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Prototype_pattern\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Prototype_pattern</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you don't use the prototype, every time you call the constructor of Guitar, you will create a new function.  If you are creating a lot of Guitar objects, you will notice a difference in performance.</p>\n\n<p>Another reason to use prototypes is to emulate classical inheritance.</p>\n\n<pre><code>var Instrument = {\n    play: function (chord) {\n      alert('Playing chord: ' + chord);\n    }\n};\n\nvar Guitar = (function() {\n    var constructor = function(color, strings) {\n        this.color = color;\n        this.strings = strings;\n    };\n    constructor.prototype = Instrument;\n    return constructor;\n}());\n\nvar myGuitar = new Guitar('Black', ['D', 'A', 'D', 'F', 'A', 'E']);\nmyGuitar.play('D5');\n</code></pre>\n\n<p>In this example, Guitar extends Instrument, and therefore has a 'play' function.  You can also override the Instrument's 'play' function in Guitar if you like.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>JavaScript is a prototypical language, a rather rare breed. This is not arbitrary at all, it's a requirement of a language that is live evaluated and capable of \"eval\", dynamic modifications, and REPL.</p>\n\n<p><strong>Prototypical inheritence can be understood as compared to Object Oriented Programming based on runtime \"live\" class definitions instead of static predefined ones.</strong></p>\n\n<p>Edit: another explanation stolen from from the following link is also useful. In an Object Oriented Language (Class -> Object/Instance) all the possible properties of any given X are enumerated in Class X, and an instance fills in its own specific values for each of them. In prototypical inheritance you only describe the <strong>differences</strong> between existing reference to live X and similar but different live Y, and there is no <em>Master Copy</em>.</p>\n\n<p><a href=\"http://web.media.mit.edu/~lieber/Lieberary/OOP/Delegation/Delegation.html\" rel=\"nofollow\">http://web.media.mit.edu/~lieber/Lieberary/OOP/Delegation/Delegation.html</a></p>\n\n<p>First off you need to understand the context. JavaScript is an interpreted language that is executed and can be modified in a live environment. The program's internal structure itself can be modified at runtime. This places different constraints and advantages from any compiled language, or even CLR linked language such as .Net stuff.</p>\n\n<p>The concept of \"eval\"/REPL requires dynamic variable typing. You can't effectively live-edit an environment where you have to have predefined monolithic Class based inheritances structures. It's pointless, you might as well just precompile to assembly or bytecode.</p>\n\n<p>Instead of that we have prototypical inheritance where you link the properties of an INSTANCE of an object. The concept is if you're in an all-live environment, classes (static, predefined constructs) are unnecessarily limiting. Classes are built on constraints that don't exist in JavaScript.</p>\n\n<p>With this strategy JavaScript basically banks on everything being \"live\" Nothing is off-limits, there's no \"defined and done\" classes you can never touch. There's no \"One True Scotsmen\" among variables that is holier than your code because everything obeys the same rules as the code you decide to write today.</p>\n\n<p>The consequences of this are pronounced, and also very much human based. It pushes language implementers to use a light, efficient touch in providing native objects. If they do a poor job them the mob will simply usurp the platform and rebuild their own (read the source of MooTools, it literally redefines/reimplements everything, starting from Function and Object) . This is how compatibility is brought to platforms like old Internet Explorer versions. It promotes libraries that are shallow and narrow, densely functional. Deep inheritance results in the most used parts being (easily) cherry picked out and becoming the ultimate go-to library. Wide libraries result in fracturing as people pick and choose which pieces they need, because taking a bite out is easy, instead of impossible as in most other environments.</p>\n\n<p>The concept of micro libraries is uniquely flourishing in JavaScript and it absolutely can be traced back to the fundamentals of the language. It encourages efficiency and brevity in terms of human consumption in ways no other language (that I know of) promote.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As a note before beginning -- I am using ECMAScript here instead of JavaScript as ActionScript 1 and 2 exhibit <em>exactly</em> the same behavior at runtime.</p>\n\n<p>Those of us who work in a more \"traditional\" object oriented world (read Java/C#/PHP) find the idea of extending a class at runtime almost entirely foreign. I mean, seriously, this is supposed to be my OBJECT. My OBJECT will go forth and DO THINGS which have been SET FORTH. Child classes <em>EXTEND</em> other <em>CLASSES</em>. It has a very structured, solid, set in stone feeling to it. And, for the most part, this works and it works reasonably well. (And this is one of the reasons Gosling has argued, and I think most of us would agree fairly effectively, that it is so well suited to massive systems)</p>\n\n<p>ECMAScript, on the other hand, follows a much more primative concept of OOP. In ECMAScript, class inheritance is entirely, believe it or not, a gigantic decorator pattern. But this isn't just the decorator pattern you might say is present in C++ and Python (and you can easily say that those are decorators). ECMAScript lets you assign a class prototype to an instance. </p>\n\n<p>Imagine this happening in Java:</p>\n\n<pre><code>class Foo {\n    Foo(){}\n}\n\nclass Bar extends new Foo() {\n    // AAAHHHG!!!! THE INSANITY!\n}\n</code></pre>\n\n<p>But, that is exactly what is available in ECMAScript (I believe Io also allows for something like this, but don't quote me).</p>\n\n<p>The reason I said that this is primitive is that this type of design philosophy is very much linked up with the way that McCarthy used Lambda Calculus to implement Lisp. It has more to do with the idea of <code>closures</code> than, say, Java OOP does.</p>\n\n<p>So, back in the day, Alonzo Church wrote <code>The Calculi Lambda Conversion</code>, the seminal work in Lambda Calculus. In it he proposes two ways of looking at multi-argument functions. First, they can be considered to be functions which accept singletons, tuples, triples, etc. Basically f(x,y,z) would be understood as f which accepts the parameter (x,y,z). (By the way, it is my humble opinion that this is a primary impetus for the structure of Python\u2019s argument lists, but that is conjecture).</p>\n\n<p>The other (and for our purposes (and, to be honest, Church\u2019s purposes) more important) definition was picked up by McCarthy. f(x,y,z) should be translated instead to f(x g(y h(z))). Resolution of the outermost method could come from a series of states which were generated by the internal function calls. That stored, internal state is the very basis of the closure, which, in turn, is one of the bases for modern OOP. Closures allow for passing enclosed, executable states between different points.</p>\n\n<p>A diversion courtesy of the book Land Of Lisp:</p>\n\n<pre class=\"lang-lisp prettyprint-override\"><code>; Can you tell what this does? It it is just like your favorite \n; DB\u2019s sequence!\n; (getx) returns the current value of X. (increment) adds 1 to x \n; The beauty? Once the let parens close, x only exists in the \n; scope of the two functions! passable enclosed executable state!\n; It is amazingly exciting!\n(let (x 0)\n  ; apologies if I messed up the syntax\n  (defun increment ()(setf x (+ 1 x)))\n  (defun getx ()(x)))\n</code></pre>\n\n<p>Now, what does this have to do with ECMAScript vs. Java? Well, when an object is created in ECMAScript it can follow that pattern almost exactly:</p>\n\n<pre><code> function getSequence()\n{\n     var x = 0;\n     function getx(){ return x }\n     function increment(){ x++ }\n     // once again, passable, enclosed, executable state\n     return { getX: getX, increment:increment}\n}\n</code></pre>\n\n<p>And here is where the prototype starts coming in. Inheritance in ECMAScript means, \u201cstart with object A and add to it.\u201d It does not copy it. It takes this magical state and ECMAScript appends it. And that is the very source and summit of why it <em>must</em> allow for <code>MyClass.prototype.foo = 1</code>.</p>\n\n<p>As to why you would append methods \u201cafter the fact\u201d. For the most part it boils down to style preferences really. Everything which happens inside of the original definition is doing no more than the same type of decoration which happens outside. </p>\n\n<p>For the most part it is stylistically beneficial to put all of your definitions in the same place, but sometimes that is not possible. jQuery extensions, for example, work based on the idea of appending the jQuery object prototype directly. The Prototype library actually has a specialized way of expanding class definitions which it uses consistently.</p>\n\n<p>If I remember Prototype.js correctly, it is something like this:</p>\n\n<pre><code> var Sequence = function(){}\n\n // Object.extend takes all keys &amp; values from the right object and\n // adds them to the one on the left.\n Object.extend( Sequence.prototype, (function()\n {\n     var x = 0;\n     function getx(){ return x }\n     function increment(){ x++ }\n     return { getX: getX, increment:increment}\n  })());\n</code></pre>\n\n<p>As to use of the prototype keyword inside of the original definition, well, that won\u2019t work in most cases because \u201cthis\u201d refers to an instance of the object being defined (at the time when the instance is constructed). Unless the instance also had a \u201cprototype\u201d property, this.prototype would necessarily be undefined!</p>\n\n<p>Since all of the <code>this</code>\u2019s inside of the original definition will be instances of that object, modifying <code>this</code> would be sufficient. But, (and I smile as I say this because it goes right along with prototype) each <code>this</code> has a <code>constructor</code> property.</p>\n\n<pre><code> // set the id of all instances of this \u201cclass\u201d. Event those already \n // instantiated...\n this.constructor.prototype.id = 2\n console.log( this.id );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>That may strike you as a grammatically incorrect and possibly insane question, but here's what I mean: When trying to understand the concept of <code>prototype</code> in JavaScript, I came upon examples that were slightly more or less complicated versions of the following:</p>\n\n<pre><code>//Guitar function constructor\nfunction Guitar(color, strings) {\n    this.color = color;\n    this.strings = strings;\n}\n//Create a new instance of a Guitar\nvar myGuitar = new Guitar('Black', ['D', 'A', 'D', 'F', 'A', 'E']);\n//Adding a new method to Guitar via prototype\nGuitar.prototype.play = function (chord) {\n    alert('Playing chord: ' + chord);\n};\n//Now make use of this new method in a pre-declared instance\nmyGuitar.play('D5');\n</code></pre>\n\n<p>So, on to my problem: Why the hell would you want to do this? Why would you not just put the <code>play</code> function in <code>Guitar</code> to begin with? Why declare an instance and then start adding methods later? The only reason I can see is if you wanted <code>myGuitar</code> to not have access to <code>play</code> when it is originally created, but I can come up with no example that elucidates a reason as to why you would want something like this.</p>\n\n<p>It seems like it would make more sense to do this:</p>\n\n<pre><code>function Guitar(color, string) {\n    this.color = color;\n    this.strings = strings;\n    this.play = function (chord) {\n        alert('Playing chord: ' + chord);\n    };\n}\nvar myGuitar = new Guitar('White', ['E', 'A', 'D', 'G', 'B', 'E']);\nmyGuitar.play('E7#9');\n</code></pre>\n\n<p>The real problem here is that the second example makes sense to me while the first example does not, whereas in reality, the first example is probably better for some reason(s). Unfortunately, every tutorial I have ever found just goes through the steps of using <code>prototype</code> but not why the <code>prototype</code> paradigm exists at all to begin with.</p>\n\n<p>It seems that <code>prototype</code> allows you to do things that you would not otherwise be able to do, but I can come up with no good reasons as to why you would want to do them.</p>\n\n<p><strong>Edit:</strong> Some responses:</p>\n\n<ul>\n<li>When I said \"Why declare an instance and then start adding methods later?\" I was more critiquing all of the examples I see that play out in the order of my first example. When this order is changed, as in Harmen's response below, it does make slightly more sense visually. However, this doesn't change the fact that, in the same vein as my first example, you can create an empty object function constructor, declare 100 instances of this object, and then only afterwards define what the original object actually <em>is</em> by giving it methods and properties via <code>prototype</code>. Perhaps this is generally done this way to hint at the Copy vs. Reference idea outlined below.</li>\n<li>Based on several responses, here is my new understanding: If you add all of your properties and methods to the object function constructor, then create 100 instances of that object, you get 100 copies of all of the properties and methods. Instead, if you add all of your properties and methods to the <code>prototype</code> of the object function constructor, then create 100 instances of that object, you get 100 <em>references</em> to the single (1) copy of the object's properties and methods. This is obviously faster and more efficient and is why <code>prototype</code> is used (aside from altering things like <code>String</code> and <code>Image</code>, as mentioned below). So, why not do this:</li>\n</ul>\n\n<p>(Bulleted lists break any code right after them, apparently, so I have to add a line of separate text here)</p>\n\n<pre><code>function Guitar(color, strings) {\n    this.prototype.color = color;\n    this.prototype.strings = strings;\n    this.prototype.play = function (chord) {\n        alert('Playing chord: ' + chord);\n    };\n}\nvar myGuitar = new Guitar('Blue', ['D', 'A', 'D', 'G', 'B', 'E']);\nmyGuitar.play('Dm7');\n</code></pre>\n",
            "last_activity_date": 1313734397,
            "question_id": 4650513,
            "score": 34,
            "tags": [
                "javascript"
            ],
            "title": "Why is JavaScript prototyping?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I'm asp.Net developer... Please take in mind that .net developers are used to build web pages using .net controls, not javascript controls.</p>\n\n<p>The difference is: an asp.net control is a server-side control, you manage it without writing javascript your self, but programming in C#/VB.net. The asp.net control automatically generates the client-side javascript control when the website runs.</p>\n\n<p>It approach is more \"modern\" and really powerful.</p>\n\n<p>So if you are a .net developer I suggest you to use this approach. If you are a javascript developer and you are building only the client-side interface of your application, probably you need a webService that provides the server-side data in XML format that you can call and read over HTTP. But, to \"search\", provide \"pagination\" and \"sorting\" via AJAX you need to develop server-side...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Maybe this could help? <a href=\"http://www.codeproject.com/KB/aspnet/ASPNET_DataTable_to_JSON.aspx\" rel=\"nofollow\">http://www.codeproject.com/KB/aspnet/ASPNET_DataTable_to_JSON.aspx</a> </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The example pages you listed actually sort, paginate, filter on initialization.  Basically, you pass those data via query string.</p>\n\n<p>Something like:</p>\n\n<pre><code>sAjaxSource\": \"../examples_support/server_processing.ashx?SortBy=FirstName&amp;FilterBy=StackOverFlow\"\n</code></pre>\n\n<p>Having said that, if you want to override some behavior or want to extend dataTable's functionaly, you have a few options: <a href=\"http://www.datatables.net/examples/plug-ins/plugin_api.html\" rel=\"nofollow\">Extending dataTable functionality</a> <a href=\"http://www.datatables.net/examples/plug-ins/paging_plugin.html\" rel=\"nofollow\">Customizing Scrolling</a></p>\n\n<p>You can follow the above examples and customize them for Filtering, Sorting, and Pagination</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://naspinski.net/post/REAL-AJAX-with-AspNet-(not-AspNet-AJAX).aspx\" rel=\"nofollow\">http://naspinski.net/post/REAL-AJAX-with-AspNet-(not-AspNet-AJAX).aspx</a></p>\n\n<p>This guy has made ajax work with asp.net and datatables.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I wrote a simple example that should illustrate the idea.</p>\n\n<p>Start by writing a generic handler for handling data on the server side (<code>Data.ashx</code> but this could be a web page, web service, anything server side script capable of returning JSON formated data):</p>\n\n<pre><code>public class Data : IHttpHandler\n{\n    public void ProcessRequest(HttpContext context)\n    {\n        // Those parameters are sent by the plugin\n        var iDisplayLength = int.Parse(context.Request[\"iDisplayLength\"]);\n        var iDisplayStart = int.Parse(context.Request[\"iDisplayStart\"]);\n        var iSortCol = int.Parse(context.Request[\"iSortCol_0\"]);\n        var iSortDir = context.Request[\"sSortDir_0\"];\n\n        // Fetch the data from a repository (in my case in-memory)\n        var persons = Person.GetPersons();\n\n        // Define an order function based on the iSortCol parameter\n        Func&lt;Person, object&gt; order = p =&gt; \n        {\n            if (iSortCol == 0) \n            { \n                return p.Id; \n            }\n            return p.Name;\n        };\n\n        // Define the order direction based on the iSortDir parameter\n        if (\"desc\" == iSortDir)\n        {\n            persons = persons.OrderByDescending(order);\n        }\n        else\n        {\n            persons = persons.OrderBy(order);\n        }\n\n        // prepare an anonymous object for JSON serialization\n        var result = new\n        {\n            iTotalRecords = persons.Count(),\n            iTotalDisplayRecords = persons.Count(),\n            aaData = persons\n                .Select(p =&gt; new[] { p.Id.ToString(), p.Name })\n                .Skip(iDisplayStart)\n                .Take(iDisplayLength)\n        };\n\n        var serializer = new JavaScriptSerializer();\n        var json = serializer.Serialize(result);\n        context.Response.ContentType = \"application/json\";\n        context.Response.Write(json);\n    }\n\n    public bool IsReusable\n    {\n        get\n        {\n            return false;\n        }\n    }\n}\n\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public static IEnumerable&lt;Person&gt; GetPersons()\n    {\n        for (int i = 0; i &lt; 57; i++)\n        {\n            yield return new Person\n            {\n                Id = i,\n                Name = \"name \" + i\n            };\n        }\n    }\n}\n</code></pre>\n\n<p>And then a WebForm:</p>\n\n<pre><code>&lt;%@ Page Title=\"Home Page\" Language=\"C#\" %&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;\n&lt;head id=\"Head1\" runat=\"server\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/styles/demo_table.css\" /&gt; \n    &lt;script type=\"text/javascript\" src=\"/scripts/jquery-1.4.1.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"/scripts/jquery.dataTables.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            $('#example').dataTable({\n                'bProcessing': true,\n                'bServerSide': true,\n                'sAjaxSource': '/data.ashx'\n            });\n        });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"Form1\" runat=\"server\"&gt;\n        &lt;table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"display\" id=\"example\"&gt; \n            &lt;thead&gt; \n            &lt;tr&gt; \n                &lt;th&gt;ID&lt;/th&gt; \n                &lt;th&gt;Name&lt;/th&gt; \n            &lt;/tr&gt; \n            &lt;/thead&gt; \n            &lt;tbody&gt; \n            &lt;tr&gt; \n                &lt;td colspan=\"5\" class=\"dataTables_empty\"&gt;Loading data from server&lt;/td&gt; \n            &lt;/tr&gt; \n            &lt;/tbody&gt; \n        &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The example is oversimplified but I hope it will illustrate the basics on how to get stared.</p>\n",
                    "is_accepted": true,
                    "score": 40
                }
            ],
            "body": "<p><strong>Problem:</strong></p>\n\n<ul><li>jQuery DataTables server-side processing using ASP.NET WebForms.</li></ul>\n\n<p><strong>Solution:</strong></p>\n\n<ul><li>Darin Dimitrov answered the question using an example which pages and sorts, but doesn't do any searching. Here's my **basic** modification of his work to make searching work on his example:</li></ul>\n\n<pre><code>public class Data : IHttpHandler\n{\n    public void ProcessRequest(HttpContext context)\n    {\n        // Paging parameters:\n        var iDisplayLength = int.Parse(context.Request[\"iDisplayLength\"]);\n        var iDisplayStart = int.Parse(context.Request[\"iDisplayStart\"]);\n\n        // Sorting parameters\n        var iSortCol = int.Parse(context.Request[\"iSortCol_0\"]);\n        var iSortDir = context.Request[\"sSortDir_0\"];\n\n        // Search parameters\n        var sSearch = context.Request[\"sSearch\"];\n\n        // Fetch the data from a repository (in my case in-memory)\n        var persons = Person.GetPersons();\n\n        // Define an order function based on the iSortCol parameter\n        Func&lt;Person, object&gt; order = person =&gt; iSortCol == 0 ? (object) person.Id : person.Name;\n\n        // Define the order direction based on the iSortDir parameter\n        persons = \"desc\" == iSortDir ? persons.OrderByDescending(order) : persons.OrderBy(order);\n\n        // prepare an anonymous object for JSON serialization\n        var result = new\n                         {\n                             iTotalRecords = persons.Count(),\n                             iTotalDisplayRecords = persons.Count(),\n                             aaData = persons\n                                 .Where(p =&gt; p.Name.Contains(sSearch))  // Search: Avoid Contains() in production\n                                 .Where(p =&gt; p.Id.ToString().Contains(sSearch))\n                                 .Select(p =&gt; new[] {p.Id.ToString(), p.Name})\n                                 .Skip(iDisplayStart)   // Paging\n                                 .Take(iDisplayLength)\n                         };\n\n        var serializer = new JavaScriptSerializer();\n        var json = serializer.Serialize(result);\n        context.Response.ContentType = \"application/json\";\n        context.Response.Write(json);\n    }\n\n    public bool IsReusable { get { return false; } }\n}\n\npublic class Person\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public static IEnumerable&lt;Person&gt; GetPersons()\n    {\n        for (int i = 0; i &lt; 57; i++)\n        {\n            yield return new Person { Id = i, Name = \"name \" + i };\n        }\n    }\n}\n</code></pre>\n",
            "last_activity_date": 1283220831,
            "question_id": 3531438,
            "score": 26,
            "tags": [
                "javascript",
                "asp.net",
                "jquery",
                "ajax",
                "datatables"
            ],
            "title": "jQuery DataTables server-side processing using ASP.NET WebForms"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Construct and fill out a hidden <code>method=POST action=\"http://example.com/vote\"</code> form and submit it, rather than using <code>window.location</code> at all.</p>\n",
                    "is_accepted": true,
                    "score": 66
                },
                {
                    "body": "<p>per @Kevin-Reid's answer, here's an alternative to the \"I ended up doing the following\" example that avoids needing to name and then lookup the form object again by constructing the form specifically (using jQuery)..</p>\n\n<pre><code>var url = 'http://example.com/vote/' + Username;\nvar form = $('&lt;form action=\"' + url + '\" method=\"post\"&gt;' +\n  '&lt;input type=\"text\" name=\"api_url\" value=\"' + Return_URL + '\" /&gt;' +\n  '&lt;/form&gt;');\n$('body').append(form);\nform.submit();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 88
                },
                {
                    "body": "<p>Just to share with you all, I found this plugin that makes what you want:</p>\n\n<p><a href=\"http://www.avramovic.info/razno/jquery/redirect/\" rel=\"nofollow\">http://www.avramovic.info/razno/jquery/redirect/</a></p>\n\n<p>It uses the same approch: create a form and submit...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Nested forms? <br/>\nThe DTD for html-X explicitly states that the form element can contain any element except another form. There isn't valid subset of the html DTD that supports this.( I can't find one )</p>\n\n<p><a href=\"http://www.w3.org/TR/xhtml1/dtds.html\" rel=\"nofollow\">http://www.w3.org/TR/xhtml1/dtds.html</a> <br/>\n<a href=\"http://anderwald.info/internet/nesting-form-tags-in-xhtml/\" rel=\"nofollow\">http://anderwald.info/internet/nesting-form-tags-in-xhtml/</a></p>\n\n<p>So the browser is probably ignoring the second form element and not reading the method, action.. etc for your nested form.</p>\n\n<p>Just curious, but I can't think of a reason to use nested forms...?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>just check out this link, you need to append the form to the body</p>\n\n<p><a href=\"http://stackoverflow.com/a/12464290/1312690\">http://stackoverflow.com/a/12464290/1312690</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <code>target</code> attribute to send form with redirect from iframe.\nYour form open tag would be something like this:</p>\n\n<pre><code>method=\"post\" action=\"http://some.url.com/form_action\" target=\"_top\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a simple small function that can be applied anywhere the longest you're using jQuery.</p>\n\n<pre><code>var redirect = 'http://www.website.com/page?id=23231';\n$.redirectPost(redirect, {x: 'example', y: 'abc'});\n\n// jquery extend function\n$.extend(\n{\n    redirectPost: function(location, args)\n    {\n        var form = '';\n        $.each( args, function( key, value ) {\n            value = value.split('\"').join('\\\"')\n            form += '&lt;input type=\"hidden\" name=\"'+key+'\" value=\"'+value+'\"&gt;';\n        });\n        $('&lt;form action=\"' + location + '\" method=\"POST\"&gt;' + form + '&lt;/form&gt;').appendTo($(document.body)).submit();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Generic function to post any JavaScript object to the given URL.</p>\n\n<pre><code>function postAndRedirect(url, postData)\n{\n    var postFormStr = \"&lt;form method='POST' action='\" + url + \"'&gt;\\n\";\n\n    for (var key in postData)\n    {\n        if (postData.hasOwnProperty(key))\n        {\n            postFormStr += \"&lt;input type='hidden' name='\" + key + \"' value='\" + postData[key] + \"'&gt;&lt;/input&gt;\";\n        }\n    }\n\n    postFormStr += \"&lt;/form&gt;\";\n\n    var formElement = $(postFormStr);\n\n    $('body').append(formElement);\n    $(formElement).submit();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a method, which does not use jQuery.\nI used it to create a bookmarklet, which checks the current page on w3-html-validator.</p>\n\n<pre><code>var f = document.createElement('form');\nf.action='http://validator.w3.org/check';\nf.method='POST';\nf.target='_blank';\n\nvar i=document.createElement('input');\ni.type='hidden';\ni.name='fragment';\ni.value='&lt;!DOCTYPE html&gt;'+document.documentElement.outerHTML;\nf.appendChild(i);\n\ndocument.body.appendChild(f);\nf.submit();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is quite handy to use:</p>\n\n<pre><code>var myRedirect = function(redirectUrl, arg, value) {\n  var form = $('&lt;form action=\"' + redirectUrl + '\" method=\"post\"&gt;' +\n  '&lt;input type=\"hidden\" name=\"'+ arg +'\" value=\"' + value + '\"&gt;&lt;/input&gt;' + '&lt;/form&gt;');\n  $('body').append(form);\n  $(form).submit();\n};\n</code></pre>\n\n<p>then use it like: </p>\n\n<pre><code>myRedirect(\"/yourRedirectingUrl\", \"arg\", \"argValue\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var myRedirect = function(redirectUrl) {\nvar form = $('&lt;form action=\"' + redirectUrl + '\" method=\"post\"&gt;' +\n'&lt;input type=\"hidden\" name=\"parameter1\" value=\"sample\" /&gt;' +\n'&lt;input type=\"hidden\" name=\"parameter2\" value=\"Sample data 2\" /&gt;' +\n'&lt;/form&gt;');\n$('body').append(form);\n$(form).submit();\n};\n</code></pre>\n\n<p>Found code at <a href=\"http://www.prowebguru.com/2013/10/send-post-data-while-redirecting-with-jquery/\" rel=\"nofollow\">http://www.prowebguru.com/2013/10/send-post-data-while-redirecting-with-jquery/</a></p>\n\n<p>Going to try this and other suggestions for my work.</p>\n\n<p>Is there any other way to do the same ?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using jQuery, there is a <a href=\"https://github.com/mgalante/jquery.redirect/blob/master/jquery.redirect.js\" rel=\"nofollow\">redirect plugin</a> who works with POST or GET, it just create the form with hidden inputs for you, this is how it works:</p>\n\n<pre><code>$().redirect('demo.php', {'arg1': 'value1', 'arg2': 'value2'});\n</code></pre>\n\n<p><strong>Note:</strong> You can pass the method (GET or POST) as an optional third parametter, POST is the default</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Basically what I want to do is send <code>POST</code> data when I change the <code>window.location</code>, as if a user had submitted a form and it went to a new page. I need to do it this way because I need to pass along a hidden URL, and I can't simply place it in the url as a <code>GET</code> for cosmetic reasons.</p>\n\n<p>This is what I have at the moment, but it doesn't send any POST data.</p>\n\n<pre><code>if(user has not voted) {\n\n    window.location = 'http://example.com/vote/' + Username;\n\n}\n</code></pre>\n\n<p>I know that you can send <code>POST</code> data with <code>jQuery.post()</code>, but I need it to be sent with the new <code>window.location</code>. </p>\n\n<p>So to recap, I need to send <code>api_url</code> value via <code>POST</code> to <code>http://example.com/vote/</code>, while sending the user to the same page at the same time.</p>\n\n<hr>\n\n<p><strong>For future refrence, I ended up doing the following</strong>:</p>\n\n<pre><code>if(user has not voted) {\n\n    $('#inset_form').html('&lt;form action=\"http://example.com/vote/' + Username + '\" name=\"vote\" method=\"post\" style=\"display:none;\"&gt;&lt;input type=\"text\" name=\"api_url\" value=\"' + Return_URL + '\" /&gt;&lt;/form&gt;');\n\n    document.forms['vote'].submit();\n\n}\n</code></pre>\n",
            "last_activity_date": 1424990233,
            "question_id": 8389646,
            "score": 69,
            "tags": [
                "javascript",
                "jquery",
                "post"
            ],
            "title": "Send POST data on redirect with Javascript/jQuery?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p><strong>Javascript</strong></p>\n\n<pre><code>var ie = (function(){\n\n    var undef,\n        v = 3,\n        div = document.createElement('div'),\n        all = div.getElementsByTagName('i');\n\n    while (\n        div.innerHTML = '&lt;!--[if gt IE ' + (++v) + ']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;',\n        all[0]\n    );\n\n    return v &gt; 4 ? v : undef;\n\n}());\n</code></pre>\n\n<p>You can then do:</p>\n\n<pre><code>ie &lt; 9\n</code></pre>\n\n<p>By James Panolsey from here: <a href=\"http://james.padolsey.com/javascript/detect-ie-in-js-using-conditional-comments\">http://james.padolsey.com/javascript/detect-ie-in-js-using-conditional-comments</a></p>\n",
                    "is_accepted": true,
                    "score": 91
                },
                {
                    "body": "<p>You could do it in a quick and dirty fashion with a regular expression and <code>.match()</code>:</p>\n\n<pre><code>if (navigator.userAgent.match(/MSIE\\s(?!9.0)/)) {\n    // ie less than version 9\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Does it need to be done in JavaScript?</p>\n\n<p>If not then you can use the IE-specific conditional comment syntax:</p>\n\n<pre><code>&lt;!--[if lt IE 9]&gt;&lt;h1&gt;Using IE 8 or lower&lt;/h1&gt;&lt;![endif]--&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using conditional comments, you can create a script block that will only get executed in IE less than 9.</p>\n\n<pre><code>&lt;!--[if lt IE 9 ]&gt;\n&lt;script&gt;\nvar is_ie_lt9 = true;\n&lt;/script&gt;\n&lt;![endif]--&gt; \n</code></pre>\n\n<p>Of course, you could precede this block with a universal block that declares <code>var is_ie_lt9=false</code>, which this would override for IE less than 9. (In that case, you'd want to remove the <code>var</code> declaration, as it would be repetitive).</p>\n\n<p><strong>EDIT</strong>: Here's a version that doesn't rely on in-line script blocks (can be run from an external file), but doesn't use user agent sniffing:</p>\n\n<p>Via <a href=\"https://gist.github.com/542301\">@cowboy</a>:</p>\n\n<pre><code>with(document.createElement(\"b\")){id=4;while(innerHTML=\"&lt;!--[if gt IE \"+ ++id+\"]&gt;1&lt;![endif]--&gt;\",innerHTML&gt;0);var ie=id&gt;5?+id:0}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>bah to conditional comments!  Conditional code all the way!!!  (silly IE)</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n/*@cc_on\n   var IE_LT_9 = (@_jscript_version &lt; 9);\n@*/\n&lt;/script&gt;\n</code></pre>\n\n<p>Seriously though, just throwing this out there in case it suits you better... they're the same thing, this can just be in a .js file instead of inline HTML</p>\n\n<p>Note: it is entirely coincidental that the jscript_version check is \"9\" here.  Setting it to 8, 7, etc will NOT check \"is IE8\", you'd need to lookup the jscript versions for those browsers.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I've decided to go with object detection instead.</p>\n\n<p>After reading this:\n<a href=\"http://www.quirksmode.org/js/support.html\">http://www.quirksmode.org/js/support.html</a>\nand this:\n<a href=\"http://diveintohtml5.ep.io/detect.html#canvas\">http://diveintohtml5.ep.io/detect.html#canvas</a></p>\n\n<p>I'd use something like</p>\n\n<pre><code>if(!!document.createElement('canvas').getContext) alert('what is needed, supported');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If I were you I would use <a href=\"http://en.wikipedia.org/wiki/Conditional_comment#Conditional_Comment_in_JScript\" rel=\"nofollow\">conditional compilation</a> or feature detection.<br>\nHere's another alternative:</p>\n\n<pre><code>&lt;!--[if lt IE 9]&gt;&lt;!--&gt;\n&lt;script&gt;\n    var LTEIE8 = true;\n&lt;/script&gt;\n&lt;!--&lt;![endif]--&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>for what it's worth: </p>\n\n<pre><code>    if(  document.addEventListener  ){\n        alert(\"you got IE9 or greater\");\n    }\n</code></pre>\n\n<p>This successfully targets IE 9+ because the <code>addEventListener</code> method was supported very early on for every major browser but IE. (Chrome, Firefox, Opera, and Safari) <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener\">MDN Reference</a>. It is supported currently in IE9 and we can expect it to continue to be supported here on out.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>This link contains relevant information on detecting versions of Internet Explorer: </p>\n\n<p><a href=\"http://tanalin.com/en/articles/ie-version-js/\" rel=\"nofollow\">http://tanalin.com/en/articles/ie-version-js/</a></p>\n\n<p>Example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if (document.all &amp;&amp; !document.addEventListener) {\n    alert('IE8 or older.');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I liked Mike Lewis' answer but the code did not pass jslint and I could not understand the funky while loop. My use case is to put up a browser not supported message if less than or equal to IE8.</p>\n\n<p>Here is a jslint free version based on Mike Lewis':</p>\n\n<pre><code>/*jslint browser: true */\n/*global jQuery */\n(function () {\n    \"use strict\";\n    var browserNotSupported = (function () {\n        var div = document.createElement('DIV');\n        // http://msdn.microsoft.com/en-us/library/ms537512(v=vs.85).aspx\n        div.innerHTML = '&lt;!--[if lte IE 8]&gt;&lt;I&gt;&lt;/I&gt;&lt;![endif]--&gt;';\n        return div.getElementsByTagName('I').length &gt; 0;\n    }());\n    if (browserNotSupported) {\n        jQuery(\"html\").addClass(\"browserNotSupported\").data(\"browserNotSupported\", browserNotSupported);\n    }\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Below is an improvement over James Padolsey's solution:</p>\n\n<p>1) It doesn't pollute memory (James' snippet creates 7 unremoved document fragments when detecting IE11, for example).<br />\n2) It's faster since it checks for a documentMode value before generating markup. <br />\n3) It's far more legible, especially to beginning JavaScript programmers.</p>\n\n<p>Gist link: <a href=\"https://gist.github.com/julianshapiro/9098609\">https://gist.github.com/julianshapiro/9098609</a></p>\n\n<pre><code>/*\n - Behavior: For IE8+, we detect the documentMode value provided by Microsoft.\n - Behavior: For &lt;IE8, we inject conditional comments until we detect a match.\n - Results: In IE, the version is returned. In other browsers, false is returned.\n - Tip: To check for a range of IE versions, use if (!IE || IE &lt; MAX_VERSION)...\n*/\n\nvar IE = (function() { \n    if (document.documentMode) {\n        return document.documentMode;\n    } else {\n        for (var i = 7; i &gt; 0; i--) {\n            var div = document.createElement(\"div\");\n\n            div.innerHTML = \"&lt;!--[if IE \" + i + \"]&gt;&lt;span&gt;&lt;/span&gt;&lt;![endif]--&gt;\";\n\n            if (div.getElementsByTagName(\"span\").length) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>What would be your fastest, shortest (best) way to detect browser which is IE and version less than 9 in JavaScript, without using jQuery or any add-on libraries?</p>\n",
            "last_activity_date": 1425972153,
            "question_id": 5574842,
            "score": 62,
            "tags": [
                "javascript",
                "internet-explorer",
                "browser",
                "browser-detection"
            ],
            "title": "Best way to check for IE less than 9 in JavaScript without library"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>\"hello _there_\".replace(/_(.*?)_/, function(a, b){\n    return '&lt;div&gt;' + b + '&lt;/div&gt;';\n})\n</code></pre>\n\n<p>Oh, or you could also:</p>\n\n<pre><code>\"hello _there_\".replace(/_(.*?)_/, \"&lt;div&gt;$1&lt;/div&gt;\")\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 100
                },
                {
                    "body": "<p>You can use <code>replace</code> instead of <code>gsub</code>.</p>\n\n<pre><code>\"hello _there_\".replace(/_(.*?)_/g, \"&lt;div&gt;\\$1&lt;/div&gt;\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I have a string, such as <code>hello _there_</code>. I'd like to replace the two underscores with <code>&lt;div&gt;</code> and <code>&lt;/div&gt;</code> respectively, using <strong>javascript</strong>. The output would (therefore) look like <code>hello &lt;div&gt;there&lt;/div&gt;</code>. The string might contain multiple pairs of underscores.</p>\n\n<p>What I am looking for is a way to <strong>either</strong> run a function on each match, the way ruby does it:</p>\n\n<pre><code>\"hello _there_\".gsub(/_.*?_/) { |m| \"&lt;div&gt;\" + m[1..-2] + \"&lt;/div&gt;\" }\n</code></pre>\n\n<p><strong>Or</strong> be able to reference a matched group, again the way it can be done in ruby:</p>\n\n<pre><code>\"hello _there_\".gsub(/_(.*?)_/, \"&lt;div&gt;\\\\1&lt;/div&gt;\")\n</code></pre>\n\n<p>Any ideas or suggestions?</p>\n",
            "last_activity_date": 1249494746,
            "question_id": 1234712,
            "score": 52,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "Javascript replace with reference to matched group?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Use a span and a javascript onclick instead. Some browsers \"jump\" if you have a link and \"#\" href.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try this when you dont want user to redirect on click </p>\n\n<pre><code>&lt;a href=\"javascript: void(0)\"&gt;I am a useless link&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>You can simply give it an empty hash:</p>\n\n<pre><code>anchor.href = \"#\";\n</code></pre>\n\n<p>or if that's not good enough of a \"disable\", use an event handler:</p>\n\n<pre><code>anchor.href = \"javascript:void(0)\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Install this plugin for jquery and use it </p>\n\n<p><a href=\"http://plugins.jquery.com/project/jqueryenabledisable\" rel=\"nofollow\">http://plugins.jquery.com/project/jqueryenabledisable</a></p>\n\n<p>It allows you to disable/enable pretty much any field in the page.</p>\n\n<p>If you want to open a page on some condition write a java script function and call it from href. If the condition satisfied you open page otherwise just do nothing.</p>\n\n<p>code looks like this:</p>\n\n<pre><code>&lt;a href=\"javascript: openPage()\" &gt;Click here&lt;/a&gt;\n\nand function:\nfunction openPage()\n{\nif(some conditon)\nopener.document.location = \"http://www.google.com\";\n}\n}\n</code></pre>\n\n<p>You can also put the link in a div and set the display property of the Style attribute to none. this will hide the div.\nFor eg.,</p>\n\n<pre><code>&lt;div id=\"divid\" style=\"display:none\"&gt;\n&lt;a href=\"Hiding Link\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>This will hide the link. Use a button or an image to make this div visible now by calling this function in onclick as:</p>\n\n<pre><code>&lt;a href=\"Visible Link\" onclick=\"showDiv()\"&gt;\n\nand write the js code as:\n\nfunction showDiv(){\ndocument.getElememtById(\"divid\").style.display=\"block\";\n}\n</code></pre>\n\n<p>You can also put an id tag to the html  tag, so it would be </p>\n\n<pre><code>&lt;a id=\"myATag\" href=\"whatever\"&gt;&lt;/a&gt;\n</code></pre>\n\n<p>And get this id on your javascript by using</p>\n\n<pre><code>document.getElementById(\"myATag\").value=\"#\"; \n</code></pre>\n\n<p>One of this must work for sure haha</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Thank you All...</p>\n\n<p>My issue solved by below code: </p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\"&gt; &gt;&gt;&gt; &lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The easiest way to disable a link is simply not to show it.  Run this function whenever you want to test if your condition is met to hide the Previous button (replace <code>if (true)</code> with your condition):</p>\n\n<pre><code>var testHideNav = function() {\n    var aTags = document.getElementsByTagName('a'),\n        atl = aTags.length,\n        i;\n\n    for (i = 0; i &lt; atl; i++) {\n        if (aTags[i].innerText == \"Previous\") {\n            if (true) { // your condition to disable previous\n                aTags[i].style.visibility = \"hidden\";\n            } else {\n                aTags[i].style.visibility = \"visible\";\n            }\n        } else if (aTags[i].innerText == \"Next\") {\n            if (false) { // your condition to disable next\n                aTags[i].style.visibility = \"hidden\";\n            } else {\n                aTags[i].style.visibility = \"visible\";\n            }\n        }\n    }\n};\n</code></pre>\n\n<p>Then run <code>testHideNav()</code> whenever you need to make the check if your condition has changed.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is possible, too:</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"myfunction()\"&gt;\n</code></pre>\n\n<p>Link doesn't go anywhere by your function will be executed.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>So the above solutions make the link not work, but don't make it visible (AFAICT) that the link is no longer valid. I've got a situation where I've got a series of pages and want to disable (and make it obvious that it's disabled) the link that points to the current page.</p>\n\n<p>So:</p>\n\n<pre><code>window.onload = function() {\n    var topics = document.getElementsByClassName(\"topics\");\n    for (var i = topics.length-1; i &gt; -1; i-- ) {\n        for (var j = topics[i].childNodes.length-1; j &gt; -1; j--) {\n             if (topics[i].childNodes[j].nodeType == 1) {\n                if (topics[i].childNodes[j].firstChild.attributes[0].nodeValue == this.n_root3) {\n                    topics[i].childNodes[j].innerHTML = topics[i].childNodes[j].firstChild.innerHTML;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This walks through the list of links, finds the one that points to the current page (the n_root3 might be a local thing, but I imagine <code>document</code> must have something similar), and replaces the link with the link text contents.</p>\n\n<p>HTH</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>anchor.href = null;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>you can deactivate all links in a page with this style class:</p>\n\n<pre><code>a {\n    pointer-events:none;\n}\n</code></pre>\n\n<p>now of course the trick is deactivate the links only when you need to, this is how to do it:</p>\n\n<p>use an empty A class, like this:</p>\n\n<pre><code>a {}\n</code></pre>\n\n<p>then when you want to deactivate the links, do this:</p>\n\n<pre><code>    GetStyleClass('a').pointerEvents = \"none\"\n\n    function GetStyleClass(className)\n    {\n       for (var i=0; i&lt; document.styleSheets.length; i++) {\n          var styleSheet = document.styleSheets[i]\n\n          var rules = styleSheet.cssRules || styleSheet.rules\n\n          for (var j=0; j&lt;rules.length; j++) {\n             var rule = rules[j]\n\n             if (rule.selectorText === className) {\n                return(rule.style)\n             }\n          }\n       }\n\n       return 0\n    }\n</code></pre>\n\n<p>NOTE: CSS rule names are transformed to lower case in some browsers, and this code is case sensitive, so better use lower case class names for this</p>\n\n<p>to reactivate links:</p>\n\n<pre><code>GetStyleClass('a').pointerEvents = \"\"\n</code></pre>\n\n<p>check this page <a href=\"http://caniuse.com/pointer-events\">http://caniuse.com/pointer-events</a> for information about browser compatibility</p>\n\n<p>i think this is the best way to do it, but sadly IE, like always, will not allow it :)\ni'm posting this anyway, because i think this contains information that can be useful, and because some projects use a know browser, like when you are using web views on mobile devices.</p>\n\n<p>if you just want to deactivate ONE link (i only realize THAT was the question), i would use a function that manualy sets the url of the current page, or not, based on that condition.\n(like the solution you accepted)</p>\n\n<p>this question was a LOT easier than i thought :)</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Below code for disabled links:</p>\n\n<pre><code>&lt;a href=\"javascript: void(0)\"&gt;test disabled link&lt;/a&gt; \n</code></pre>\n\n<p>another very simple solution is:</p>\n\n<pre><code>&lt;a href=\"#\"&gt;test disabled link&lt;/a&gt;\n</code></pre>\n\n<p>First solution is efficient.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Another method to disable link</p>\n\n<pre><code>element.removeAttribute('href');\n</code></pre>\n\n<p>anchor tag without href would react as disabled/plain text</p>\n\n<pre><code>&lt;a&gt; w/o href &lt;/a&gt;\n</code></pre>\n\n<p>instead of <code>&lt;a href=\"#\"&gt; with href &lt;/a&gt;</code></p>\n\n<p>see <a href=\"http://jsfiddle.net/yXHB3/\" rel=\"nofollow\">jsFiddel</a></p>\n\n<p>hope this is heplful.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this using jQuery:</p>\n\n<pre><code>$(function () {\n    $('a.something').on(\"click\", function (e) {\n        e.preventDefault();\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had a similar need, but my motivation was to prevent the link from being double-clicked.  I accomplished it using jQuery:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"#myLink\").on('click', doSubmit);\n});\n\nvar doSubmit = function() {\n    $(\"#myLink\").off('click');\n    // do things here\n};\n</code></pre>\n\n<p>The HTML looks like this:</p>\n\n<pre><code>&lt;a href='javascript: void(0);' id=\"myLink\"&gt;click here&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Instead of void you can also use:</p>\n\n<pre><code>&lt;a href=\"javascript:;\"&gt;this link is disabled&lt;/a&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>(function ($) {\n    $( window ).load(function() {\n        $('.navbar a').unbind('click');\n        $('.navbar a').click(function () {\n            //DO SOMETHING\n            return false;\n        });\n    });\n})(jQuery);\n</code></pre>\n\n<p>I find this way easier to implement. And it has the advantage that you js. Is not inside your html but in a different file. I think that without the unbind. Both events are still active. Not sure. But in a way you only need this one event</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>MDN recommends <code>element.removeAttribute(attrName);</code> over setting the attribute to null (or some other value) when you want to disable it. In this case it would be <code>element.removeAttribute(\"href\");</code></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a tag <code>&lt;a href=\"#\"&gt; Previous &lt;/a&gt; 1 2 3 4 &lt;a href=\"#\"&gt; Next &lt;/a&gt;</code> and in some conditions I want this tag to be completely disabled.</p>\n\n<p><em>Code from comments (this is how the link is generated)</em></p>\n\n<pre><code>if (n_index != n_pages) \n    a = a+'&lt;li&gt;&lt;a href=\"#\" onclick=\"javascript:paginateAjaxPage('+(n_index+1) +','+stype+');\"&gt;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=\"#\" onclick=\"javascript:paginateAjaxPage('+n_pages+','+stype+');\" &gt;&gt;&gt;&lt;/a&gt;&lt;/li&gt;'; \nelse \n    a = a+'&lt;li&gt;&lt;a style=\"cursor: pointer;\" onclick=\"return false;\"&gt;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a style=\"cursor: pointer;\" onclick=\"return false\" &gt;&gt;&gt;&lt;/a&gt;&lt;/li&gt;'; \na = a+'&lt;/ul&gt;&lt;/div&gt;';\n</code></pre>\n",
            "last_activity_date": 1425260084,
            "question_id": 5376444,
            "score": 50,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "How do I disable a href link in JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You can do this a few ways. One, simply add this meta tag to your <code>head</code>:</p>\n\n<pre><code>&lt;meta http-equiv=\"Cache-control\" content=\"no-cache\"&gt;\n</code></pre>\n\n<p>If you want to makes sure stuff that was already cached get's erased also the <code>expires</code> meta tag should work to delete it by setting it to <code>-1</code> like so:</p>\n\n<pre><code>&lt;meta http-equiv=\"Expires\" content=\"-1\"&gt;\n</code></pre>\n\n<p><a href=\"http://www.metatags.org/meta_http_equiv_cache_control\">http://www.metatags.org/meta_http_equiv_cache_control</a></p>\n\n<p>Also, IE should give you the latest content for the main page. If you are having issues with external documents, like CSS and JS add a dummy param at the end of your URLs with the current time in milliseconds so that its never the same. This way IE, and other browsers, will ALWAYS serve you the latest version. Here is an example:</p>\n\n<pre><code>&lt;script src=\"mysite.com/js/myscript.js?12345\"&gt;\n</code></pre>\n\n<p>--UPDATE--</p>\n\n<p>After reading the comments I realize you wanted to programmatically erase the cache and not every time. What you could do is have a function in JS like:</p>\n\n<pre><code>eraseCache(){\n  window.location = window.location.href+'?eraseCache=true';\n}\n</code></pre>\n\n<p>Then, in PHP let's say, you do something like this:</p>\n\n<pre><code>&lt;head&gt;\n&lt;?php\n  $cache = '';\n  if(isset($_GET['eraseCache'])){\n    echo '&lt;meta http-equiv=\"Cache-control\" content=\"no-cache\"&gt;';\n    echo '&lt;meta http-equiv=\"Expires\" content=\"-1\"&gt;';\n    $cache = '?'.time();\n  }\n?&gt;\n&lt;!-- ... other head HTML --&gt;\n&lt;script src=\"mysite.com/js/script.js&lt;?= $cache ?&gt;\"\n&lt;/head&gt;\n</code></pre>\n\n<p>This isn't tested, but should work. Basically, your JS function, if invoked, will reload the page, but add a GET param to the end of the URL. Your site would then have some backend code that looks for this param. If it exists it adds the meta tags and a cache var that contains a timestamp and appends it to the scripts and CSS that you are having caching issues with.</p>\n\n<p>--UPDATE 2--</p>\n\n<p>The meta tag indeed wont erase the cache ON LOAD. So, technically youd need to run the eraseCache function in JS, once the page loads, youd need to load it AGAIN for the changes to take place. You should be able to fix this with your server side language. You could run the same eraseCache JS command, but instead of adding the meta tags run this at the top of your page instead:</p>\n\n<pre><code>&lt;?php\n  header(\"Cache-Control: no-cache, must-revalidate\");\n  header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\n?&gt;\n&lt;!-- Here you'd start your page... --&gt;\n</code></pre>\n\n<p>\n   </p>\n\n   \n\n<p>This way works because it erases the cache before the page loads and before anything is run.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p><code>reload()</code> is supposed to accept an argument which tells it to do a hard reload, ie, ignoring the cache:</p>\n\n<pre><code>location.reload(true);\n</code></pre>\n\n<p>I can't vouch for its reliability, you may want to investigate this further.</p>\n",
                    "is_accepted": true,
                    "score": 67
                },
                {
                    "body": "<p>I wrote this javascript script and included it in the header (before anything loads). It seems to work. If the page was loaded more than one hour ago or the situation is undefined it will reload everything from server.\nThe time of one hour = 3600000 milliseconds can be changed in the following line:\nif(alter > 3600000)</p>\n\n<p>With regards, \nBirke</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\nfunction zeit()\n{\n    if(document.cookie)\n    {\n        a = document.cookie;\n        cookiewert = \"\";\n        while(a.length &gt; 0)\n        {\n            cookiename = a.substring(0,a.indexOf('='));\n            if(cookiename == \"zeitstempel\")\n            {\n                cookiewert = a.substring(a.indexOf('=')+1,a.indexOf(';'));\n                break;\n            }\n            a = a.substring(a.indexOf(cookiewert)+cookiewert.length+1,a.length);\n        }\n        if(cookiewert.length &gt; 0)\n        {\n            alter = new Date().getTime() - cookiewert;\n\n            if(alter &gt; 3600000)\n            {   \n                document.cookie = \"zeitstempel=\" + new Date().getTime() + \";\";\n                location.reload(true);\n            }\n            else\n            {\n                return;\n            }\n        }\n        else\n        {\n            document.cookie = \"zeitstempel=\" + new Date().getTime() + \";\";\n            location.reload(true);\n        }\n    }\n    else\n    {\n        document.cookie = \"zeitstempel=\" + new Date().getTime() + \";\";\n        location.reload(true);\n    }\n}\nzeit();\n//]]&gt;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In my case reload() doesn't work because the asp.net controls behavior, i.e., the viewstate. So, to solve this issue I've used this approach, despite seems a work around.</p>\n\n<pre><code>self.clear = function () {\n    //location.reload(true); Doesn't work to IE neither Firefox;\n    window.location.href = window.location.href;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I want to reload a page using javascript but want clearing cache too, so on page refresh the page has every latest from server.\nOther browser except IE are not getting latest content.</p>\n\n<p>Any solution for IE9?</p>\n",
            "last_activity_date": 1408017167,
            "question_id": 5721704,
            "score": 47,
            "tags": [
                "javascript",
                "internet-explorer"
            ],
            "title": "window.location.reload with clear cache"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You could bind to the <code>window.onpopstate</code> event?</p>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM%3awindow.onpopstate\" rel=\"nofollow\">https://developer.mozilla.org/en/DOM%3awindow.onpopstate</a></p>\n\n<p>From the docs:</p>\n\n<blockquote>\n  <p>An event handler for the popstate\n  event on the window.</p>\n  \n  <p>A popstate event is dispatched to the\n  window every time the active history\n  entry changes. If the history entry\n  being activated was created by a call\n  to history.pushState() or was affected\n  by a call to history.replaceState(),\n  the popstate event's state property\n  contains a copy of the history entry's\n  state object.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<blockquote>\n  <p><strong>5.5.9.1 Event definitions</strong></p>\n  \n  <p>The <strong>popstate</strong> event is fired in certain cases when navigating to a session history entry.</p>\n</blockquote>\n\n<p>According to this, there is no reason for popstate to be fired when you use <code>pushState</code>. But an event such as <code>pushstate</code> would come in handy. Because <code>history</code> is a host object, you should be careful with it, but Firefox seems to be nice in this case. This code works just fine:</p>\n\n<pre><code>(function(history){\n    var pushState = history.pushState;\n    history.pushState = function(state) {\n        if (typeof history.onpushstate == \"function\") {\n            history.onpushstate({state: state});\n        }\n        // ... whatever else you want to do\n        // maybe call onhashchange e.handler\n        return pushState.apply(history, arguments);\n    }\n})(window.history);\n</code></pre>\n\n<p>Your jsfiddle <em><a href=\"http://jsfiddle.net/UZHTW/1/\">becomes</a></em>:</p>\n\n<pre><code>window.onpopstate = history.onpushstate = function(e) { ... }\n</code></pre>\n\n<p><em>Note: of course you can add <code>onpushstate</code> simply to the global object, and you can even make it handle more events via <code>add/removeListener</code></em></p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>I used to use this:</p>\n\n<pre><code>var _wr = function(type) {\n    var orig = history[type];\n    return function() {\n        var rv = orig.apply(this, arguments);\n        var e = new Event(type);\n        e.arguments = arguments;\n        window.dispatchEvent(e);\n        return rv;\n    };\n};\nhistory.pushState = _wr('pushState'), history.replaceState = _wr('replaceState');\n\nwindow.addEventListener('replaceState', function(e) {\n    console.warn('THEY DID IT AGAIN!');\n});\n</code></pre>\n\n<p>It's almost the same as <a href=\"http://stackoverflow.com/questions/4570093/how-to-get-notified-about-changes-of-the-history-via-history-pushstate/25673946#answer-4585031\">galambalazs</a> did.</p>\n\n<p>It's usually overkill though. And it might not work in all browsers. (I only care about my version of my browser.)</p>\n\n<p>(And it leaves a var <code>_wr</code>, so you might want to wrap it or something. I didn't care about that.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>So now that HTML5 introduces <a href=\"http://www.w3.org/TR/html5/history.html#the-history-interface\"><code>history.pushState</code></a> to change the browsers history, websites start using this in combination with Ajax instead of changing the fragment identifier of the URL.</p>\n\n<p>Sadly that means that those calls cannot be detect anymore by <code>onhashchange</code>.</p>\n\n<p><strong>My question is:</strong> Is there a reliable way (hack? ;)) to detect when a website uses <code>history.pushState</code>? The specification does not state anything about events that are raised (at least I couldn't find anything).<br>\nI tried to create a facade and replaced <code>window.history</code> with my own JavaScript object, but it didn't have any effect at all.</p>\n\n<p><strong>Further explanation:</strong> I'm developing a Firefox add-on that needs to detect these changes and act accordingly.<br>\nI know there was a similar question a few days ago that asked whether listening to some <a href=\"https://developer.mozilla.org/en/DOM_Events\">DOM events</a> would be efficient but I would rather not rely on that because these events can be generated for a lot of different reasons.</p>\n\n<p><strong>Update:</strong></p>\n\n<p><a href=\"http://jsfiddle.net/fkling/vV9vd/\">Here is a jsfiddle</a> (use Firefox 4 or Chrome 8) that shows that <code>onpopstate</code> is not triggered when <code>pushState</code> is called (or am I doing something wrong? Feel free to improve it!).</p>\n\n<p><strong>Update 2:</strong></p>\n\n<p>Another (side) problem is that <code>window.location</code> is not updated when using <code>pushState</code> (but I read about this already here on SO I think).</p>\n",
            "last_activity_date": 1409860458,
            "question_id": 4570093,
            "score": 40,
            "tags": [
                "javascript",
                "firefox-addon",
                "history",
                "pushstate"
            ],
            "title": "How to get notified about changes of the history via history.pushState?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>This should solve it:</p>\n\n<p><strong>View:</strong></p>\n\n<pre><code>&lt;div ng-controller='Ctrl'&gt;\n   &lt;form name='form'&gt;\n      &lt;input data-ng-model='user.password' type=\"password\" name='password' placeholder='password' required&gt;\n      &lt;div ng-show=\"form.password.$error.required\"&gt;\n        Field required&lt;/div&gt;\n      &lt;input ng-model='user.password_verify' type=\"password\" name='confirm_password' placeholder='confirm password' required data-password-verify=\"user.password\"&gt;\n      &lt;div ng-show=\"form.confirm_password.$error.required\"&gt;\n        Field required!&lt;/div&gt;\n      &lt;div ng-show=\"form.confirm_password.$error.passwordVerify\"&gt;\n        Fields are not equal!&lt;/div&gt;\n   &lt;/form\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>Directive</strong></p>\n\n<pre><code>var app = angular.module('myApp', []);\n\napp.directive(\"passwordVerify\", function() {\n   return {\n      require: \"ngModel\",\n      scope: {\n        passwordVerify: '='\n      },\n      link: function(scope, element, attrs, ctrl) {\n        scope.$watch(function() {\n            var combined;\n\n            if (scope.passwordVerify || ctrl.$viewValue) {\n               combined = scope.passwordVerify + '_' + ctrl.$viewValue; \n            }                    \n            return combined;\n        }, function(value) {\n            if (value) {\n                ctrl.$parsers.unshift(function(viewValue) {\n                    var origin = scope.passwordVerify;\n                    if (origin !== viewValue) {\n                        ctrl.$setValidity(\"passwordVerify\", false);\n                        return undefined;\n                    } else {\n                        ctrl.$setValidity(\"passwordVerify\", true);\n                        return viewValue;\n                    }\n                });\n            }\n        });\n     }\n   };\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>I have done it without directive. </p>\n\n<pre><code>&lt;input type=\"password\" ng-model=\"user.password\" name=\"uPassword\" required placeholder='Password' ng-minlength=\"3\" ng-maxlength=\"15\" title=\"3 to 15 characters\" /&gt;\n    &lt;span class=\"error\" ng-show=\"form.uPassword.$dirty &amp;&amp; form.uPassword.$error.minlength\"&gt;Too short&lt;/span&gt;\n    &lt;span ng-show=\"form.uPassword.$dirty &amp;&amp; form.uPassword.$error.required\"&gt;Password required.&lt;/span&gt;&lt;br /&gt;\n\n    &lt;input type=\"password\" ng-model=\"user.confirmpassword\" name=\"ucPassword\" required placeholder='Confirm Password' ng-minlength=\"3\" ng-maxlength=\"15\" title=\"3 to 15 characters\" /&gt;\n    &lt;span class=\"error\" ng-show=\"form.ucPassword.$dirty &amp;&amp; form.ucPassword.$error.minlength\"&gt;Too short&lt;/span&gt;\n    &lt;span ng-show=\"form.ucPassword.$dirty &amp;&amp; form.ucPassword.$error.required\"&gt;Retype password.&lt;/span&gt;\n    &lt;div ng-show=\"(form.uPassword.$dirty &amp;&amp; form.ucPassword.$dirty) &amp;&amp; (user.password != user.confirmpassword)\"&gt;\n        &lt;span&gt;Password mismatched&lt;/span&gt;\n    &lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I've used this directive with success before:</p>\n\n<pre><code> .directive('sameAs', function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n      ctrl.$parsers.unshift(function(viewValue) {\n        if (viewValue === scope[attrs.sameAs]) {\n          ctrl.$setValidity('sameAs', true);\n          return viewValue;\n        } else {\n          ctrl.$setValidity('sameAs', false);\n          return undefined;\n        }\n      });\n    }\n  };\n});\n</code></pre>\n\n<h2>Usage</h2>\n\n<pre><code>     &lt;input ... name=\"password\" /&gt;\n    &lt;input type=\"password\" placeholder=\"Confirm Password\" \nname=\"password2\" ng-model=\"password2\" ng-minlength=\"9\" same-as='password' required&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I use the following directive because I want to re-validate both input field regardless of whether value 1 or value 2 was changed:</p>\n\n<p><strong>directive:</strong></p>\n\n<pre><code>'use strict';\n\nangular.module('myApp').directive('equals', function() {\n  return {\n    restrict: 'A', // only activate on element attribute\n    require: '?ngModel', // get a hold of NgModelController\n    link: function(scope, elem, attrs, ngModel) {\n      if(!ngModel) return; // do nothing if no ng-model\n\n      // watch own value and re-validate on change\n      scope.$watch(attrs.ngModel, function() {\n        validate();\n      });\n\n      // observe the other value and re-validate on change\n      attrs.$observe('equals', function (val) {\n        validate();\n      });\n\n      var validate = function() {\n        // values\n        var val1 = ngModel.$viewValue;\n        var val2 = attrs.equals;\n\n        // set validity\n        ngModel.$setValidity('equals', ! val1 || ! val2 || val1 === val2);\n      };\n    }\n  }\n});\n</code></pre>\n\n<p><strong><em>usage</em></strong></p>\n\n<pre><code>&lt;input type=\"password\" ng-model=\"value1\" equals=\"{{value2}}\" required&gt;\n&lt;input type=\"password\" ng-model=\"value2\" equals=\"{{value1}}\" required&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<p>I was dealing with the same issue and found a good <a href=\"http://piotrbuda.eu/2013/02/angularjs-directive-for-password-matching.html\">blog post</a> about it written by Piotr Buda. It's a good read and it explains the process very well. The code is as follows:</p>\n\n<pre><code>directives.directive(\"repeatPassword\", function() {\n    return {\n        require: \"ngModel\",\n        link: function(scope, elem, attrs, ctrl) {\n            var otherInput = elem.inheritedData(\"$formController\")[attrs.repeatPassword];\n\n            ctrl.$parsers.push(function(value) {\n                if(value === otherInput.$viewValue) {\n                    ctrl.$setValidity(\"repeat\", true);\n                    return value;\n                }\n                ctrl.$setValidity(\"repeat\", false);\n            });\n\n            otherInput.$parsers.push(function(value) {\n                ctrl.$setValidity(\"repeat\", value === ctrl.$viewValue);\n                return value;\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>So you could do something like:</p>\n\n<pre><code>&lt;input type=\"password\" name=\"repeatPassword\" id=\"repeatPassword\" placeholder=\"repeat password\" ng-model=\"user.repeatPassword\" repeat-password=\"password\" required&gt;\n</code></pre>\n\n<p>Credit goes to the author</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Creating a separate directive for this is not needed. There is already a <a href=\"http://angular-ui.github.io/ui-utils/\">build in Angular UI password validation tool</a>. With this you could do: </p>\n\n<pre><code>&lt;input name=\"password\" required ng-model=\"password\"&gt;\n&lt;input name=\"confirm_password\"\n       ui-validate=\" '$value==password' \"\n       ui-validate-watch=\" 'password' \"&gt;\n\n Passwords match? {{!!form.confirm_password.$error.validator}}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>In order to achieve validation when both inputs change, I use the following code (which was a combination of all others other answers):</p>\n\n<pre><code>angular.module('app.directives')\n.directive('passwordVerify', [function () {\n    return {\n        require: '?ngModel',\n        restrict: 'A',\n        scope: {\n            origin: '=passwordVerify'\n        },\n        link: function (scope, element, attrs, ctrl) {\n            if(!ctrl) {\n                return;\n            }\n\n            function validate(value) {\n                ctrl.$setValidity('passwordMatch', scope.origin === value);\n                return value;\n            }\n\n            ctrl.$parsers.unshift(validate);\n\n            scope.$watch('origin', function(value) {\n                validate(ctrl.$viewValue);\n            });\n        }\n    };\n}]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yet another take on this is to match the model of one input to another input\u2019s value.</p>\n\n<pre><code>app.directive('nxEqual', function() {\n    return {\n        require: 'ngModel',\n        link: function (scope, elem, attrs, model) {\n            if (!attrs.nxEqual) {\n                console.error('nxEqual expects a model as an argument!');\n                return;\n            }\n            scope.$watch(attrs.nxEqual, function (value) {\n                model.$setValidity('nxEqual', value === model.$viewValue);\n            });\n            model.$parsers.push(function (value) {\n                var isValid = value === scope.$eval(attrs.nxEqual);\n                model.$setValidity('nxEqual', isValid);\n                return isValid ? value : undefined;\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>So, if the password box\u2019s model is <code>login.password</code> then you set the following attribute on the verification box: <code>nx-equal=\"login.password\"</code>, and test for <code>formName.elemName.$error.nxEqual</code>. Like so:</p>\n\n<pre><code>&lt;form name=\"form\"&gt;\n    &lt;input type=\"password\" ng-model=\"login.password\"&gt;\n    &lt;input type=\"password\" ng-model=\"login.verify\" nx-equal=\"login.password\" name=\"verify\"&gt;\n    &lt;span ng-show=\"form.verify.$error.nxEqual\"&gt;Must be equal!&lt;/span&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>Extended version:</strong></p>\n\n<p>For a new project of mine I had to modify the above directive so that it would only display the <code>nxEqual</code> error when, and only when, the verification input had a value. Otherwise the <code>nxEqual</code> error should be muted. Here\u2019s the extended version:</p>\n\n<pre><code>app.directive('nxEqualEx', function() {\n    return {\n        require: 'ngModel',\n        link: function (scope, elem, attrs, model) {\n            if (!attrs.nxEqualEx) {\n                console.error('nxEqualEx expects a model as an argument!');\n                return;\n            }\n            scope.$watch(attrs.nxEqualEx, function (value) {\n                // Only compare values if the second ctrl has a value.\n                if (model.$viewValue !== undefined &amp;&amp; model.$viewValue !== '') {\n                    model.$setValidity('nxEqualEx', value === model.$viewValue);\n                }\n            });\n            model.$parsers.push(function (value) {\n                // Mute the nxEqual error if the second ctrl is empty.\n                if (value === undefined || value === '') {\n                    model.$setValidity('nxEqualEx', true);\n                    return value;\n                }\n                var isValid = value === scope.$eval(attrs.nxEqualEx);\n                model.$setValidity('nxEqualEx', isValid);\n                return isValid ? value : undefined;\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>And you would use it like so:</p>\n\n<pre><code>&lt;form name=\"form\"&gt;\n    &lt;input type=\"password\" ng-model=\"login.password\"&gt;\n    &lt;input type=\"password\" ng-model=\"login.verify\" nx-equal-ex=\"login.password\" name=\"verify\"&gt;\n    &lt;span ng-show=\"form.verify.$error.nxEqualEx\"&gt;Must be equal!&lt;/span&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Try it: <a href=\"http://jsfiddle.net/gUSZS/\">http://jsfiddle.net/gUSZS/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Is this not good enough:</p>\n\n<pre><code>&lt;input type=\"password\" ng-model=\"passwd1\" /&gt;\n&lt;input type=\"password\" ng-model=\"passwd2\" /&gt;\n&lt;label ng-show=\"passwd1 != passwd2\"&gt;Passwords do not match...&lt;/label&gt;\n&lt;button ng-disabled=\"passwd1 != passwd2\"&gt;Save&lt;/button&gt;\n</code></pre>\n\n<p>Simple, and works just fine for me.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>First, I would like to thank Fredric for posting this excellent example. There is one tiny issue that I came across by coincidence. on the Fiddle you posted <a href=\"http://jsfiddle.net/gUSZS/\" rel=\"nofollow\">http://jsfiddle.net/gUSZS/</a></p>\n\n<p>If you type in a password, and then type in the same password in the verify input element everything works fine, but try to add a space to the second box and angular will automatically trim that space. This means that the directive doesnt \"see\" the extra space. Now the passwords are different, but the form is still valid.</p>\n\n<p>to fix this we need to add</p>\n\n<pre><code>ng-trim=\"false\"\n</code></pre>\n\n<p>to the input elements. This doesnt work in angular 1.0.3 so if you want to try it in this fiddle you need to add 1.1.1 to the Fiddle (<a href=\"http://ajax.googleapis.com/ajax/libs/angularjs/1.1.1/angular.js\" rel=\"nofollow\">http://ajax.googleapis.com/ajax/libs/angularjs/1.1.1/angular.js</a>)</p>\n\n<p>But again, thanx Frederic, I will use your solution in my app!</p>\n\n<p>Anton\nP.S. I wanted to comment on Frederic's post, but Im new to this forum and dont seem to have enough credit. So it would be very much appreciated if some of you can up vote my comment if you like it :-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>No need for an extra directive, here's my take on this:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"form-group\" data-ng-class=\"{ 'has-error': submitted &amp;&amp; !form.new_passwd.$valid }\"&gt;\n    &lt;input type=\"password\" name=\"new_passwd\" class=\"form-control\" data-ng-model=\"data.new_passwd\" placeholder=\"New Password\" required data-ng-pattern=\"passwdRegex\"&gt;\n    &lt;small class=\"help-block\" data-ng-show=\"submitted &amp;&amp; form.new_passwd.$error.required\"&gt;New password is required!&lt;/small&gt;\n    &lt;small class=\"help-block\" data-ng-show=\"submitted &amp;&amp; !form.new_passwd.$error.required &amp;&amp; form.new_passwd.$error.pattern\"&gt;New password is not strong enough!&lt;/small&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\" data-ng-class=\"{ 'has-error': submitted &amp;&amp; !form.new_passwd_conf.$valid }\"&gt;\n    &lt;input type=\"password\" name=\"new_passwd_conf\" class=\"form-control\" data-ng-model=\"data.new_passwd_conf\" placeholder=\"Confirm New Password\" required data-ng-pattern=\"passwdConfRegex\"&gt;\n    &lt;small class=\"help-block\" data-ng-show=\"submitted &amp;&amp; form.new_passwd_conf.$error.required\"&gt;New password confirmation is required!&lt;/small&gt;\n    &lt;small class=\"help-block\" data-ng-show=\"submitted &amp;&amp; !form.new_passwd_conf.$error.required &amp;&amp; form.new_passwd_conf.$error.pattern\"&gt;New password confirmation does not match!&lt;/small&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>$scope.passwdRegex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,}$/;\n$scope.$watch('data.new_passwd', function() {\n    $scope.passwdConfRegex = new RegExp(Regex.escape($scope.data.new_passwd));\n});\n</code></pre>\n\n<p>where Regex.escape() can be found <a href=\"http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\">here</a>.</p>\n\n<p>Works like a charm!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As of angular 1.3.0-beta12, invalid inputs don't write to ngModel, so you can't watch AND THEN validate as you can see here: <a href=\"http://plnkr.co/edit/W6AFHF308nyKVMQ9vomw?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/W6AFHF308nyKVMQ9vomw?p=preview</a>. A new validators pipeline was introduced and you can attach to this to achieve the same thing.</p>\n\n<p>Actually, on that note I've created a bower component for common extra validators: <a href=\"https://github.com/intellix/angular-validators\" rel=\"nofollow\">https://github.com/intellix/angular-validators</a> which includes this.</p>\n\n<pre><code>angular.module('validators').directive('equals', function() {\n    return {\n        restrict: 'A',\n        require: '?ngModel',\n        link: function(scope, elem, attrs, ngModel)\n        {\n            if (!ngModel) return;\n\n            attrs.$observe('equals', function() {\n                ngModel.$validate();\n            });\n\n            ngModel.$validators.equals = function(value) {\n                return value === attrs.equals;\n            };\n        }\n    };\n});\n\nangular.module('validators').directive('notEquals', function() {\n    return {\n        restrict: 'A',\n        require: '?ngModel',\n        link: function(scope, elem, attrs, ngModel)\n        {\n            if (!ngModel) return;\n\n            attrs.$observe('notEquals', function() {\n                ngModel.$validate();\n            });\n\n            ngModel.$validators.notEquals = function(value) {\n                return value === attrs.notEquals;\n            };\n        }\n    };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://github.com/wongatech/angular-confirm-field\">https://github.com/wongatech/angular-confirm-field</a> is a good project for this.</p>\n\n<p>Example here <a href=\"http://wongatech.github.io/angular-confirm-field/\">http://wongatech.github.io/angular-confirm-field/</a></p>\n\n<p>The code below shows 2 input fields with the implemented functionality </p>\n\n<pre><code>&lt;input ng-confirm-field ng-model=\"emailconfirm\" confirm-against=\"email\" name=\"my-email-confirm\"/&gt;\n&lt;input ng-model=\"email\" name=\"my-email\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>To add to the large number of already existing solutions, this works well for me.</p>\n\n<p>(<strong>Jan Laussmann</strong> answer stopped working with the latest AngularJS beta releases).</p>\n\n<p><strong>directive:</strong></p>\n\n<pre><code>angular.module('myApp').directive('matchValidator', [function() {\n        return {\n            require: 'ngModel',\n            link: function(scope, elm, attr, ctrl) {\n                var pwdWidget = elm.inheritedData('$formController')[attr.matchValidator];\n\n                ctrl.$parsers.push(function(value) {\n                    if (value === pwdWidget.$viewValue) {\n                        ctrl.$setValidity('match', true); \n                        return value;\n                    }                       \n\n                    if (value &amp;&amp; pwdWidget.$viewValue) {\n                        ctrl.$setValidity('match', false);\n                    }\n\n                });\n\n                pwdWidget.$parsers.push(function(value) {\n                    if (value &amp;&amp; ctrl.$viewValue) {\n                        ctrl.$setValidity('match', value === ctrl.$viewValue);\n                    }\n                    return value;\n                });\n            }\n        };\n    }])\n</code></pre>\n\n<p><strong>usage</strong></p>\n\n<pre><code>&lt;input type=\"email\" ng-model=\"value1\" name=\"email\" required&gt;\n&lt;input type=\"email\" ng-model=\"value2\" name=\"emailConfirm\" match-validator=\"email\" required&gt;\n</code></pre>\n\n<p><strong>display error</strong></p>\n\n<pre><code>&lt;div ng-if=\"[[yourFormName]].emailConfirm.$error\"&gt;\n    &lt;div ng-if=\"[[yourFormName]].emailConfirm.$error.match\"&gt;\n        Email addresses don't match.\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following is my take on the problem. This directive would compare against a form value instead of the scope.</p>\n\n<pre><code>'use strict';\n(function () {\n    angular.module('....').directive('equals', function ($timeout) {\n        return {\n            restrict: 'A',\n            require: ['^form', 'ngModel'],\n            scope: false,\n            link: function ($scope, elem, attrs, controllers) {\n                var validationKey = 'equals';\n                var form = controllers[0];\n                var ngModel = controllers[1];\n\n                if (!ngModel) {\n                    return;\n                }\n\n                //run after view has rendered\n                $timeout(function(){\n                    $scope.$watch(attrs.ngModel, validate);\n\n                    $scope.$watch(form[attrs.equals], validate);\n                }, 0);\n\n                var validate = function () {\n                    var value1 = ngModel.$viewValue;\n                    var value2 = form[attrs.equals].$viewValue;\n                    var validity = !value1 || !value2 || value1 === value2;\n                    ngModel.$setValidity(validationKey, validity);\n                    form[attrs.equals].$setValidity(validationKey,validity);\n                };\n            }\n        };\n    });\n})();\n</code></pre>\n\n<p>in the HTML one now refers to the actual form instead of the scoped value:</p>\n\n<pre><code>&lt;form name=\"myForm\"&gt;\n  &lt;input type=\"text\" name=\"value1\" equals=\"value2\"&gt;\n  &lt;input type=\"text\" name=\"value2\" equals=\"value1\"&gt;\n  &lt;div ng-show=\"myForm.$invalid\"&gt;The form is invalid!&lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm writing a password verify directive :</p>\n\n<pre><code> Directives.directive(\"passwordVerify\",function(){\n    return {\n        require:\"ngModel\",\n        link: function(scope,element,attrs,ctrl){\n            ctrl.$parsers.unshift(function(viewValue){\n                var origin = scope.$eval(attrs[\"passwordVerify\"]);\n                if(origin!==viewValue){\n                    ctrl.$setValidity(\"passwordVerify\",false);\n                    return undefined;\n                }else{\n                    ctrl.$setValidity(\"passwordVerify\",true);\n                    return viewValue;\n                }\n            });\n\n        }\n    };\n});\n</code></pre>\n\n<p>html :</p>\n\n<pre><code>&lt;input data-ng-model='user.password' type=\"password\" name='password' placeholder='password' required&gt;\n&lt;input data-ng-model='user.password_verify' type=\"password\" name='confirm_password' placeholder='confirm password' required data-password-verify=\"user.password\"&gt;\n</code></pre>\n\n<p>Given 2 password fields in a form, if both password values are equal then the field affected  by the directive is valid.\nThe issue is that it works one way (i.e. when I type a password in the password-verify field). However, when the original password field is updated, the password-verify doesn't become valid. </p>\n\n<p>Any idea how I could have a \"two way binding verify?\"</p>\n",
            "last_activity_date": 1424344422,
            "question_id": 14012239,
            "score": 34,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "password-check directive in angularjs"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>I dont know much about the diff utility in linux or linux in general, but this might be what you are looking for <a href=\"https://github.com/cemerick/jsdifflib\" rel=\"nofollow\">jsdifflib</a>. You can find a live example there and see if it works for you.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"https://github.com/cemerick/jsdifflib\" rel=\"nofollow\">jsdifflib</a> looks promising - try the demo linked from that page.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://github.com/cemerick/jsdifflib\">jsdifflib</a> inline mode comparison, try tweaking the context size to display just the desired window of change you want. There's a demo <a href=\"http://cemerick.github.com/jsdifflib/demo.html\">here</a></p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>I completely rebuilt the jsdifflib utility for speed.  Since my version does not require DOM access it at least 4.5 times faster, and it is also extended to highlight character differences in each line.</p>\n\n<p><a href=\"http://prettydiff.com/diffview.js\">http://prettydiff.com/diffview.js</a></p>\n\n<p>You can test this out with the online tool directly at <a href=\"http://prettydiff.com/\">http://prettydiff.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>There's also <a href=\"http://code.google.com/p/google-diff-match-patch/\">google-diff-match-patch</a> from Google</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Check out <a href=\"http://codemirror.net/demo/merge.html\" rel=\"nofollow\">CodeMirror</a>. Nuff said.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Checkout my minimal implementation: <a href=\"https://github.com/Slava/diff.js\" rel=\"nofollow\">https://github.com/Slava/diff.js</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<ul>\n<li><a href=\"http://mergely.com\" rel=\"nofollow\">Mergely</a> is totally worth checking out. CodeMirror-based, client-side only.</li>\n<li>Then there's the <a href=\"http://codemirror.net/demo/merge.html\" rel=\"nofollow\">CodeMirror demo</a> which requires server-side diff computation.</li>\n<li><a href=\"https://github.com/cemerick/jsdifflib\" rel=\"nofollow\">jsdifflib</a> and <a href=\"http://prettydiff.com/\" rel=\"nofollow\">prettydiff</a> as mentioned in other answers.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check out the the <a href=\"https://en.wikipedia.org/wiki/User:Cacycle/diff\" rel=\"nofollow\" title=\"wikEd diff\">wikEd diff</a> JavaScript library. There is also an <a href=\"http://cacycle.altervista.org/wikEd-diff-tool.html\" rel=\"nofollow\" title=\"online tool\">online tool</a>.</p>\n\n<p>wikEd diff features inline text comparisons with block move highlighting and character/word-based resolution. It is optimized for Wikipedia source text, but works great for any type of text or code. The library code is fully customizable, has Unicode support, is extensively commented, and is in the public domain.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>old question i know, but if your doing node work or want something that is compatible with requirejs/commonjs module</p>\n\n<p>I've really liked <a href=\"https://www.npmjs.com/package/diff\" rel=\"nofollow\">https://www.npmjs.com/package/diff</a></p>\n\n<pre><code>console.log(diff.createPatch('some file name.txt', expected, actual));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm looking for a <em>diff</em> equivalent written in JavaScript that only returns/prints relevant lines. I don't want both full text displayed next to each other with the differences highlighted, but just want the actual differences (plus some buffer lines to know where the difference is), similar to the output from the linux diff utility.</p>\n\n<p>Does anybody know a javascript function that does this? All differences should be recognized (even changed whitespace). Thanks.</p>\n",
            "last_activity_date": 1423833920,
            "question_id": 3053587,
            "score": 33,
            "tags": [
                "javascript",
                "diff"
            ],
            "title": "JavaScript based diff utility"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>If I understand things correctly it goes something like this:</p>\n\n<p>On the first line you'll see that the Own time is \"only 0.006ms\". That means that even though time spent in that function was 783.506ms most of it was spent inside functions called from that function. </p>\n\n<p>When I use Firebug to optimize code I try to reduce the \"own time\" of functions that are called the most. (obviously checking also for any unnecessary function calls to remove altogether)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Each column has a description of what it means if you set your mouse to hover over it in Firebug.  I'll assume you can read up on how each column works on your own then.  However, you have definitely come across some odd behavior which needs to be explained.</p>\n\n<p>The <em>own time</em> is the amount of time the function spent executing code inside of itself.  If the function calls no other functions, then <em>own time</em> should be the same as <em>time</em>.  However, if there are nested function calls, then <em>time</em> also counts the time spent executing them.  Therefore, <em>time</em> will almost always be larger than <em>own time</em>, and will in most cases add up to more than the total time reported by the profiler.</p>\n\n<p>However, no <strong>single</strong> function's <em>time</em> should be larger than the total time the profiler logged for JavaScript calls.  This problem is definitely a bug, and I can see why you have trouble trusting Firebug when it gives you such a paradoxical output.  I believe I've tracked down the reason this bug occurs: AJAX.</p>\n\n<p>It appears that AJAX calls are causing columns that count nested function calls to report incorrect information.  They end up counting both the time of JavaScript execution <strong>and</strong> the request to the server.</p>\n\n<p>You can reproduce this profiler bug by doing the following:</p>\n\n<ol>\n<li>Go to any site that uses AJAX.  (I used\n<a href=\"http://juicystudio.com/experiments/ajax/index.php\">http://juicystudio.com/experiments/ajax/index.php</a>)</li>\n<li>Enable Console/Script debugging.</li>\n<li>Turn on the profiler.</li>\n<li>Make an AJAX call.  (Multiple ones may illuminate the issue more.)</li>\n<li>Stop the profiler, examine the output.</li>\n</ol>\n\n<p>In this example, with regards to <em>time</em> vs. <em>own time</em>, the <em>own time</em> of each function adds up to the profiler's total time but the <em>time</em> column incorporates the amount of time the AJAX call took to talk to the server.  This means that the <em>time</em> column is incorrect if you're looking for just the speed of JavaScript execution.</p>\n\n<p>It gets worst: since <em>time</em>, <em>average time</em>, <em>min</em> and <em>max</em> all count nested function calls, they're all incorrect if you're using AJAX.  On top of that, any function that eventually uses AJAX (in a nested function call) will also report their time incorrectly.  This means that a whole lot of functions may be reporting incorrect information!  So don't trust any of those columns for now until Firebug fixes the issue.  (It's possible they intended the behavior to be this way, though it is confusing at best to leave it this way.)</p>\n\n<p>If you're not using AJAX, then another issue is at play; let us know if you are or not.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>From <a href=\"http://michaelsync.net/2007/09/10/firebug-tutorial-logging-profiling-and-commandline-part-ii\" rel=\"nofollow\">Firebug Tutorial - Logging, Profiling and CommandLine (Part II)</a>:\n(the examples there are good)</p>\n\n<blockquote>\n  <p>Columns and Description of Profiler</p>\n  \n  <p><strong>Function column</strong> : It show the name of each function.<br>\n  <strong>Call column</strong> : It shows the count of how many a particular function has been invoked. <br>\n  <strong>Percent column</strong> : It shows the time consuming of each function in percentage.<br>\n  <strong>Time column</strong> : It shows the duration of execution from start point of a function to the end point of a function. <br>\n  <strong>Avg column</strong> : It shows the average execution time of a particular function. If you are calling a function one time only, you won\u2019t see the differences. If you are calling more than one time, you will see the differences.<br>\n        The formula for that column is<br>\n        Avg = Own Ttime / Call;<br>\n  <strong>Min column and Max column</strong>: It shows the minimum execution time of a particular function. <br>\n  <strong>File column</strong>: the file name of file where the function located.<br></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>From what I understand this is how it works... total profiler time is the sum of the 'Own Time' column. However, you may notice that some <strong>single</strong> Time values may be greater than the total profiler time. Those overtimes were spent outside of JavaScript, eg. in a plugin call. If your JS function makes a plugin call for eg., and waits for the plugin function to return to JS, then those waiting times will NOT be reported by the total profiler time, but will be included in the Time column.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've been trying to use Firebug's profiler to better understand the source of some JavaScript performance issues we are seeing, but I'm a little confused by the output.</p>\n\n<p>When I profile some code the profiler reports <strong>Profile (464.323 ms, 26,412 calls)</strong>. I suspect that the 464.323 ms is the sum of the execution time for those 26,412 calls.</p>\n\n<p>However, when I drill down into the detailed results I see individual results with an <em>average</em> execution time greater than 464.323 ms, e.g. the result with the highest average time reports the following details:</p>\n\n<pre><code>Calls: **1**\nPercent: **0%**\nOwn Time: **0.006 ms**\nTime: **783.506 ms**\nAvg: **783.506 ms**\nMin: **783.506 ms**\nMax: **783.506 ms**\n</code></pre>\n\n<p>Another result reports:</p>\n\n<pre><code>Calls: **4**\nPercent: **0.01%**\nOwn Time: **0.032 ms**\nTime: **785.279 ms**\nAvg: **196.32 ms**\nMin: **0.012 ms**\nMax: **783.741 ms**\n</code></pre>\n\n<p>Between these two results the sum of the Time results is a lot more than 464.323.</p>\n\n<p>So, what do these various numbers mean? Which ones should I trust?</p>\n",
            "last_activity_date": 1360226787,
            "question_id": 267618,
            "score": 33,
            "tags": [
                "javascript",
                "profiling",
                "firebug",
                "profiler"
            ],
            "title": "Understanding Firebug profiler output"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<blockquote>\n  <h3>Summary</h3>\n  \n  <ul>\n  <li><code>blob:</code> for Chrome 8+, Firefox 6+, Safari 6.0+, Opera 15+</li>\n  <li><code>data:application/javascript</code> for Opera 10.60 - 12</li>\n  <li><code>eval</code> otherwise (IE 10+)</li>\n  </ul>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/window.URL.createObjectURL\"><code>URL.createObjectURL(&lt;Blob blob&gt;)</code></a> can be used to create a Web worker from a string. The blob can be created using the <a href=\"https://developer.mozilla.org/en/DOM/BlobBuilder\"><code>BlobBuilder</code></a> API <sup>deprecated</sup> or the <a href=\"https://developer.mozilla.org/en/DOM/Blob#Blob_constructor_example_usage\"><code>Blob</code> constructor</a>.</p>\n\n<p>Demo: <a href=\"http://jsfiddle.net/uqcFM/49/\">http://jsfiddle.net/uqcFM/49/</a></p>\n\n<pre><code>// URL.createObjectURL\nwindow.URL = window.URL || window.webkitURL;\n\n// \"Server response\", used in all examples\nvar response = \"self.onmessage=function(e){postMessage('Worker: '+e.data);}\";\n\nvar blob;\ntry {\n    blob = new Blob([response], {type: 'application/javascript'});\n} catch (e) { // Backwards-compatibility\n    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n    blob = new BlobBuilder();\n    blob.append(response);\n    blob = blob.getBlob();\n}\nvar worker = new Worker(URL.createObjectURL(blob));\n\n// Test, used in all examples:\nworker.onmessage = function(e) {\n    alert('Response: ' + e.data);\n};\nworker.postMessage('Test');\n</code></pre>\n\n<h2>Compatibility</h2>\n\n<p>Web workers are supported in the following browsers <sup><a href=\"https://developer.mozilla.org/En/Using_web_workers#Browser_compatibility\">source</a></sup>:</p>\n\n<ul>\n<li>Chrome 3</li>\n<li>Firefox 3.5</li>\n<li>IE 10</li>\n<li>Opera 10.60</li>\n<li>Safari 4</li>\n</ul>\n\n<p>This method's support is based on the support of the <code>Blob</code> API and the <code>URL.createObjectUrl</code> method. <a href=\"https://developer.mozilla.org/en/DOM/BlobBuilder#Browser_compatibility\"><code>Blob</code> compatibility</a>:</p>\n\n<ul>\n<li>Chrome 8+ (<code>WebKitBlobBuilder</code>), 20+ (<code>Blob</code> constructor)</li>\n<li>Firefox 6+ (<code>MozBlobBuilder</code>), 13+ (<code>Blob</code> constructor)</li>\n<li>Safari 6+ (<code>Blob</code> constructor)</li>\n</ul>\n\n<p>IE10 supports <code>MSBlobBuilder</code> and <code>URL.createObjectURL</code>. However, trying to create a Web Worker from a <code>blob:</code>-URL throws a SecurityError.</p>\n\n<p>Opera 12 does not support <code>URL</code> API. Some users may have a fake version of the <code>URL</code> object, thanks to <a href=\"http://my.opera.com/community/forums/topic.dml?id=1589432&amp;t=1367917090&amp;page=1#comment13564572\">this hack in <code>browser.js</code></a>.</p>\n\n<h2>Fallback 1: data-URI</h2>\n\n<p>Opera supports data-URIs as an argument to the <code>Worker</code> constructor. Note: Do not forget to <a href=\"http://stackoverflow.com/a/9239272/938089?convert-html-to-datatext-html-link-using-javascript\">escape special characters</a> (Such as <code>#</code> and <code>%</code>).</p>\n\n<pre><code>// response as defined in the first example\nvar worker = new Worker('data:application/javascript,' +\n                        encodeURIComponent(response) );\n// ... Test as defined in the first example\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/uqcFM/37/\">http://jsfiddle.net/uqcFM/37/</a></p>\n\n<h2>Fallback 2: Eval</h2>\n\n<p><code>eval</code> can be used as a fallback for Safari (&lt;6) and IE 10.</p>\n\n<pre><code>// Worker-helper.js\nself.onmessage = function(e) {\n    self.onmessage = null; // Clean-up\n    eval(e.data);\n};\n// Usage:\nvar worker = new Worker('Worker-helper.js');\n// `response` as defined in the first example\nworker.postMessage(response);\n// .. Test as defined in the first example\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 66
                },
                {
                    "body": "<p>Nice answer - I've been working on a similar problem today when trying to create Web Workers with fallback capabilities when they're not available (i.e. run worker script in main thread). As this thread is pertains to the topic, I thought I'd provide my solution here:</p>\n\n<p>\n\n    </p>\n\n<pre><code>    &lt;script type=\"javascript/worker\"&gt;\n        //WORKER FUNCTIONS\n        self.onmessage = function(event) {\n            postMessage('Hello, ' + event.data.name + '!');\n        }\n    &lt;/script&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n\n        function inlineWorker(parts, params, callback) {\n\n            var URL = (window.URL || window.webkitURL);\n\n            if (!URL &amp;&amp; window.Worker) {\n\n                var worker = new window.Worker(URL.createObjectURL(new Blob([parts], { \"type\" : \"text/javascript\" })));\n\n                worker.onmessage = function(event) {\n                  callback(event.data);\n                };\n\n                worker.postMessage(params);\n\n            } else {\n\n                var postMessage = function(result) {\n                  callback(result);\n                };\n\n                var self = {}; //'self' in scope of inlineWorker. \n                eval(parts); //Converts self.onmessage function string to function on self via nearest scope (previous line) - please email chrisgwgreen.site@gmail.com if this could be tidier.\n                self.onmessage({ \n                    data: params \n                });\n            }\n        }\n\n        inlineWorker(\n            document.querySelector('[type=\"javascript/worker\"]').textContent, \n            {\n                name: 'Chaps!!'\n            },\n            function(result) {\n                document.body.innerHTML = result;\n            }\n        );\n\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've made an approach with most of your ideas and adding some of mine. The only thing my code needs on worker is to use 'this' to refer 'self' scope. I'm pretty sure that this is very improvable:</p>\n\n<pre><code>// Sample code\nvar code = function() {\n    this.onmessage = function(e) {\n        this.postMessage('Worker: '+e.data);\n        this.postMessage('Worker2: '+e.data);\n    };\n};\n\n// New thread worker code\nFakeWorkerCode = function(code, worker) {\n    code.call(this);\n    this.worker = worker;\n}\nFakeWorkerCode.prototype.postMessage = function(e) {\n    this.worker.onmessage({data: e});\n}\n// Main thread worker side\nFakeWorker = function(code) {\n    this.code = new FakeWorkerCode(code, this);\n}\nFakeWorker.prototype.postMessage = function(e) {\n    this.code.onmessage({data: e});\n}\n\n// Utilities for generating workers\nUtils = {\n    stringifyFunction: function(func) {\n        // Stringify the code\n        return '(' + func + ').call(self);';\n    },\n    generateWorker: function(code) {\n        // URL.createObjectURL\n        windowURL = window.URL || window.webkitURL;   \n        var blob, worker;\n        var stringified = Utils.stringifyFunction(code);\n        try {\n            blob = new Blob([stringified], {type: 'application/javascript'});\n        } catch (e) { // Backwards-compatibility\n            window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n            blob = new BlobBuilder();\n            blob.append(stringified);\n            blob = blob.getBlob();\n        }\n\n        if (\"Worker\" in window) {\n            worker = new Worker(windowURL.createObjectURL(blob));\n        } else {\n            worker = new FakeWorker(code);\n        }\n        return worker;\n    }\n};\n\n// Generate worker\nvar worker = Utils.generateWorker(code);\n// Test, used in all examples:\nworker.onmessage = function(e) {\n    alert('Response: ' + e.data);\n};\nfunction runWorker() {\n    worker.postMessage('working fine');\n}\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/8N6aR/\" rel=\"nofollow\">http://jsfiddle.net/8N6aR/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>How can I use create a Web worker from a string (which is supplied via a POST request)?</p>\n\n<p>One way I can think of, but I'm not sure how to implement it, is by creating a data-URI from the server response, and passing that to the Worker constructor, but I've heard that some browsers don't allow this, because of the same origin policy.</p>\n\n<p><a href=\"https://developer.mozilla.org/En/Using_web_workers\">MDN states the uncertainty about the origin policy around data URI's</a>:</p>\n\n<blockquote>\n  <p>Note: The URI passed as parameter of the Worker constructor must obey the same-origin  policy. There is currently disagreement among browsers vendors on whether data URIs are of the same-origin or not; Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0) and later do allow data URIs as a valid script for workers. Other browsers may disagree.</p>\n</blockquote>\n\n<p>Here's also a post <a href=\"http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2011-March/030878.html\">discussing it on the whatwg</a>.</p>\n",
            "last_activity_date": 1392136815,
            "question_id": 10343913,
            "score": 32,
            "tags": [
                "javascript",
                "web-worker",
                "data-uri"
            ],
            "title": "How to create a Web Worker from a string"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>First of all, make sure you have PHP 5.4 installed on your machine. You didn't tag <a href=\"/questions/tagged/php-5.4\" class=\"post-tag\" title=\"show questions tagged 'php-5.4'\" rel=\"tag\">php-5.4</a> so I don't know. Check by calling <code>echo phpversion();</code> (or <code>php -v</code> from the command line).</p>\n\n<p>Anyway, assuming you have the correct version, you must be able to set the correct values in the <code>php.ini</code> file. Since you say you can't do that, it's not worth me launching into an explanation on how to do it.</p>\n\n<p>As a fallback solution, use a Flash object uploader.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>This is my code its working fine Try it :</strong></p>\n\n<p><strong>Demo URL</strong></p>\n\n<p><a href=\"http://codesolution.in/dev/jQuery/file_upload_with_progressbar/\" rel=\"nofollow\">http://codesolution.in/dev/jQuery/file_upload_with_progressbar/</a></p>\n\n<p><strong>Try this below code:-</strong></p>\n\n<p><strong>this is my html code</strong></p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;head&gt;\n&lt;title&gt;File Upload Progress Demo #1&lt;/title&gt;\n&lt;style&gt;\nbody { padding: 30px }\nform { display: block; margin: 20px auto; background: #eee; border-radius: 10px; padding: 15px }\n\n.progress { position:relative; width:400px; border: 1px solid #ddd; padding: 1px; border-radius: 3px; }\n.bar { background-color: #B4F5B4; width:0%; height:20px; border-radius: 3px; }\n.percent { position:absolute; display:inline-block; top:3px; left:48%; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;File Upload Progress Demo #1&lt;/h1&gt;\n    &lt;code&gt;&amp;lt;input type=\"file\" name=\"myfile\"&gt;&lt;/code&gt;\n        &lt;form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n        &lt;input type=\"file\" name=\"uploadedfile\"&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"Upload File to Server\"&gt;\n    &lt;/form&gt;\n\n    &lt;div class=\"progress\"&gt;\n        &lt;div class=\"bar\"&gt;&lt;/div &gt;\n        &lt;div class=\"percent\"&gt;0%&lt;/div &gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"status\"&gt;&lt;/div&gt;\n\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js\"&gt;&lt;/script&gt;\n&lt;script src=\"http://malsup.github.com/jquery.form.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n(function() {\n\nvar bar = $('.bar');\nvar percent = $('.percent');\nvar status = $('#status');\n\n$('form').ajaxForm({\n    beforeSend: function() {\n        status.empty();\n        var percentVal = '0%';\n        bar.width(percentVal)\n        percent.html(percentVal);\n    },\n    uploadProgress: function(event, position, total, percentComplete) {\n        var percentVal = percentComplete + '%';\n        bar.width(percentVal)\n        percent.html(percentVal);\n    },\n    complete: function(xhr) {\n     bar.width(\"100%\");\n    percent.html(\"100%\");\n        status.html(xhr.responseText);\n    }\n}); \n\n})();       \n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>My upload.php file code</strong></p>\n\n<pre><code>&lt;?php\n$target_path = \"uploads/\";\n\n$target_path = $target_path . basename( $_FILES['uploadedfile']['name']); \n\nif(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target_path)) {\n    echo \"The file \".  basename( $_FILES['uploadedfile']['name']). \n    \" has been uploaded\";\n} else{\n    echo \"There was an error uploading the file, please try again!\";\n}\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h2>Introduction</h2>\n\n<p>The PHP Doc is very detailed it says </p>\n\n<blockquote>\n  <p>The upload progress will be available in the $_SESSION superglobal when an upload is in progress, and when POSTing a variable of the same name as the session.upload_progress.name INI setting is set to. When PHP detects such POST requests, it will populate an array in the $_SESSION, where the index is a concatenated value of the session.upload_progress.prefix and session.upload_progress.name INI options. The key is typically retrieved by reading these INI settings, i.e.</p>\n</blockquote>\n\n<p>All the information you require is all ready in the PHP session naming</p>\n\n<ul>\n<li>start_time</li>\n<li>content_length</li>\n<li>bytes_processed</li>\n<li>File Information ( Supports Multiple )</li>\n</ul>\n\n<p>All you need is to extract this information and display it in your HTML form.</p>\n\n<h2>Basic Example </h2>\n\n<h3>a.html</h3>\n\n<pre><code>&lt;link href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css\"\nrel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var intval = null;\n    var percentage = 0 ;\n    function startMonitor() {\n        $.getJSON('b.php',\n        function (data) {\n            if (data) {\n                percentage = Math.round((data.bytes_processed / data.content_length) * 100);\n                $(\"#progressbar\").progressbar({value: percentage});\n                $('#progress-txt').html('Uploading ' + percentage + '%');\n\n            }\n            if(!data || percentage == 100){\n                $('#progress-txt').html('Complete');\n                stopInterval();\n            }\n        });\n    }\n\n    function startInterval() {\n        if (intval == null) {\n            intval = window.setInterval(function () {startMonitor()}, 200)\n        } else {\n            stopInterval()\n        }\n    }\n\n    function stopInterval() {\n        if (intval != null) {\n            window.clearInterval(intval)\n            intval = null;\n            $(\"#progressbar\").hide();\n            $('#progress-txt').html('Complete');\n        }\n    }\n\n    startInterval();\n&lt;/script&gt;\n</code></pre>\n\n<h3>b.php</h3>\n\n<pre><code>session_start();\nheader('Content-type: application/json');\necho json_encode($_SESSION[\"upload_progress_upload\"]);\n</code></pre>\n\n<h2> Example with PHP Session Upload Progress </h2>\n\n<p>Here is a better optimized version from <a href=\"https://github.com/blueimp/jQuery-File-Upload/wiki/PHP-Session-Upload-Progress\">PHP Session Upload Progress</a></p>\n\n<h3>JavaScript</h3>\n\n<pre><code>$('#fileupload').bind('fileuploadsend', function (e, data) {\n    // This feature is only useful for browsers which rely on the iframe transport:\n    if (data.dataType.substr(0, 6) === 'iframe') {\n        // Set PHP's session.upload_progress.name value:\n        var progressObj = {\n            name: 'PHP_SESSION_UPLOAD_PROGRESS',\n            value: (new Date()).getTime()  // pseudo unique ID\n        };\n        data.formData.push(progressObj);\n        // Start the progress polling:\n        data.context.data('interval', setInterval(function () {\n            $.get('progress.php', $.param([progressObj]), function (result) {\n                // Trigger a fileupload progress event,\n                // using the result as progress data:\n                e = document.createEvent('Event');\n                e.initEvent('progress', false, true);\n                $.extend(e, result);\n                $('#fileupload').data('fileupload')._onProgress(e, data);\n            }, 'json');\n        }, 1000)); // poll every second\n    }\n}).bind('fileuploadalways', function (e, data) {\n    clearInterval(data.context.data('interval'));\n});\n</code></pre>\n\n<h3>progress.php</h3> \n\n<pre><code>$s = $_SESSION['upload_progress_'.intval($_GET['PHP_SESSION_UPLOAD_PROGRESS'])];\n$progress = array(\n        'lengthComputable' =&gt; true,\n        'loaded' =&gt; $s['bytes_processed'],\n        'total' =&gt; $s['content_length']\n);\necho json_encode($progress);\n</code></pre>\n\n<h2> Other Examples </h2>\n\n<ul>\n<li><a href=\"http://phpmaster.com/tracking-upload-progress-with-php-and-javascript/\">Tracking Upload Progress with PHP and JavaScript</a></li>\n<li><a href=\"https://github.com/chemicaloliver/PHP-5.4-Upload-Progress-Example\">PHP-5.4-Upload-Progress-Example</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>While it may be good fun to write the code for a progress bar, why not choose an existing implementation. Andrew Valums wrote an excellent one and you can find it here: </p>\n\n<p><a href=\"http://fineuploader.com/\" rel=\"nofollow\">http://fineuploader.com/</a></p>\n\n<p>I use it in all my projects and it works like a charm.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>May I suggest you <a href=\"http://proger.i-forge.net/FileDrop_%E2%80%93_cross-browser_JavaScript_Drag_-amp_Drop_file_upload/7CC\" rel=\"nofollow\">FileDrop</a>.</p>\n\n<p>I used it to make a progess bar, and it's pretty easy.</p>\n\n<p>The only downside I met, is some problems working with large amounts of data, because it dosen't seem to clear up old files -- can be fixed manually.</p>\n\n<p>Not written as JQuery, but it's pretty nice anyway, and the author answers questions pretty fast.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<pre><code>&lt;form enctype=\"multipart/form-data\" action=\"upload.php\" method=\"POST\"&gt;\n&lt;input name=\"uploaded\" type=\"file\" /&gt;\n&lt;input type=\"submit\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n\n&lt;?php\nif(isset($_REQUEST['submit'])){\n   $target = \"data/\".basename( $_FILES['uploaded']['name']) ;\n   move_uploaded_file($_FILES['uploaded']['tmp_name'], $target);\n}\n?&gt;\n</code></pre>\n\n<p>I know Javascipt, AJAX and JQuery etc very well and i believe upload progress bar can be created using PHP, AJAX and Javascript etc.<br>\n <strong>I am surprised how to get the size of upload (Mean in each second i want to know, how much file is uploaded and how much is remaining, i think it should be possible using AJAX etc) file during upload is in process.</strong></p>\n\n<p>here is link to PHP manual but i didn't understand that<br>\n<a href=\"http://php.net/manual/en/session.upload-progress.php\">http://php.net/manual/en/session.upload-progress.php</a>  </p>\n\n<p>Any other method to show upload progress bar using PHP and AJAX but without use of any external extension of PHP. I don't have access to php.ini</p>\n",
            "last_activity_date": 1352149353,
            "question_id": 9878161,
            "score": 17,
            "tags": [
                "php",
                "javascript",
                "ajax",
                "upload",
                "progress-bar"
            ],
            "title": "PHP Ajax Upload Progress Bar"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<pre><code>str.charAt(str.length - 1)\n</code></pre>\n\n<p>Some browsers allow (as a non-standard extension) you to shorten this to:</p>\n\n<pre><code>str[str.length - 1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You can get the last char like this :</p>\n\n<pre><code>var lastChar=yourString.charAt(yourString.length-1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Use <a href=\"http://www.w3schools.com/jsref/jsref_charAt.asp\"><code>charAt</code></a>:</p>\n\n<blockquote>\n  <p>The charAt() method returns the character at the specified index in a string.</p>\n</blockquote>\n\n<p>You can use this method in conjunction with the <a href=\"http://www.w3schools.com/jsref/jsref_length_string.asp\"><code>length</code></a> property of a string to get the last character in that string.<br />\nFor example:</p>\n\n<pre><code>var myString = \"linto.yahoo.com.\";\nvar stringLength = myString.length; // this will be 16\nvar lastChar = myString.charAt(stringLength - 1); // this will be the string \".\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Use the JavaScript <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/global_objects/string/charat\" rel=\"nofollow\">charAt</a> function to get a character at a given 0-indexed position. Use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/length\" rel=\"nofollow\">length</a> to find out how long the String is. You want the last character so that's length - 1. \nExample:</p>\n\n<pre><code>var word = \"linto.yahoo.com.\";\nvar last = word.charAt(word.length - 1);\nalert('The last character is:' + last);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An elegant and short alternative, is the <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_15.5.4.13\"><code>String.prototype.slice</code></a> method.</p>\n\n<p>Just by:</p>\n\n<pre><code>str.slice(-1);\n</code></pre>\n\n<p>A negative start index slices the string from <code>length+index</code>, to <code>length</code>, being index <code>-1</code>, the last character is extracted:</p>\n\n<pre><code>\"abc\".slice(-1); // \"c\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 279
                }
            ],
            "body": "<p>How to get the last character of the string:</p>\n\n<pre><code>\"linto.yahoo.com.\"\n</code></pre>\n\n<p>The last character of this string is <code>\".\"</code></p>\n\n<p>How can I find this?</p>\n",
            "last_activity_date": 1391212961,
            "question_id": 3884632,
            "score": 131,
            "tags": [
                "javascript"
            ],
            "title": "how to get the last character of a string?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/985272/jquery-selecting-text-in-an-element-akin-to-highlighting-with-your-mouse\">JQuery: Selecting Text in an Element (akin to highlighting with your mouse)</a></p>\n\n<p>:)</p>\n\n<p>Using the accepted answer on that post, you can call the function like this:</p>\n\n<pre><code>$(function() {\n  $('#textareaId').click(function() {\n    SelectText('#textareaId');\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I ended up using this:</p>\n\n<pre><code>$('.selectAll').toggle(function() {\n  $(this).select();\n}, function() {\n  $(this).unselect();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>To stop the user from getting annoyed when the whole text gets selected every time they try to move the caret using their mouse, you should do this using the <code>focus</code> event, not the <code>click</code> event. The following will do the job and works around a problem in Chrome that prevents the simplest version (i.e. just calling the textarea's <code>select()</code> method in a <code>focus</code> event handler) from working.</p>\n\n<p>jsFiddle: <a href=\"http://jsfiddle.net/NM62A/\">http://jsfiddle.net/NM62A/</a></p>\n\n<p>Code:</p>\n\n<pre><code>&lt;textarea id=\"foo\"&gt;Some text&lt;/textarea&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    var textBox = document.getElementById(\"foo\");\n    textBox.onfocus = function() {\n        textBox.select();\n\n        // Work around Chrome's little problem\n        textBox.onmouseup = function() {\n            // Prevent further mouseup intervention\n            textBox.onmouseup = null;\n            return false;\n        };\n    };\n&lt;/script&gt;\n</code></pre>\n\n<p>jQuery version:</p>\n\n<pre><code>$(\"#foo\").focus(function() {\n    var $this = $(this);\n    $this.select();\n\n    // Work around Chrome's little problem\n    $this.mouseup(function() {\n        // Prevent further mouseup intervention\n        $this.unbind(\"mouseup\");\n        return false;\n    });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 122
                },
                {
                    "body": "<p>Better way, with solution to tab and chrome problem and new jquery way</p>\n\n<pre><code>$(\"#element\").on(\"focus keyup\", function(e){\n\n        var keycode = e.keyCode ? e.keyCode : e.which ? e.which : e.charCode;\n        if(keycode === 9 || !keycode){\n            // Hacemos select\n            var $this = $(this);\n            $this.select();\n\n            // Para Chrome's que da problema\n            $this.on(\"mouseup\", function() {\n                // Unbindeamos el mouseup\n                $this.off(\"mouseup\");\n                return false;\n            });\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Slightly shorter jQuery version:</p>\n\n<pre><code>$('your-element').focus(function(e) {\n  e.target.select();\n  jQuery(e.target).one('mouseup', function(e) {\n    e.preventDefault();\n  });\n});\n</code></pre>\n\n<p>It handles the Chrome corner case correctly. See <a href=\"http://jsfiddle.net/Ztyx/XMkwm/\" rel=\"nofollow\">http://jsfiddle.net/Ztyx/XMkwm/</a> for an example.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>$('textarea').focus(function() {\n    this.select();\n}).mouseup(function() {\n    return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I make it so when you click inside a textarea, its entire content gets selected?</p>\n\n<p>And eventually when you click again, to deselect it.</p>\n",
            "last_activity_date": 1387910927,
            "question_id": 5797539,
            "score": 77,
            "tags": [
                "javascript",
                "jquery",
                "forms",
                "textarea",
                "selection"
            ],
            "title": "jQuery - select all text from a textarea"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>To elaborate on what @Raynos said, the function you have defined is an asynchronous callback. It doesn't execute right away, rather it executes when the file loading has completed. When you call readFile, control is returned immediately and the next line of code is executed. So when you call console.log, your callback has not yet been invoked, and this content has not yet been set. Welcome to asynchronous programming.</p>\n\n<p>Example approaches </p>\n\n<pre><code>var content;\n// First I want to read the file\nfs.readFile('./Index.html', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    content = data;\n\n    // Invoke the next step here however you like\n    console.log(content);   // Put all of the code here (not the best solution)\n    processFile();          // Or put the next step in a function and invoke it\n});\n\nfunction processFile() {\n    console.log(content);\n}\n</code></pre>\n\n<p>Or better yet, as Raynos example shows, wrap your call in a function and pass in your own callbacks. (Apparently this is better practice) I think getting into the habit of wrapping your async calls in function that takes a callback will save you a lot of trouble and messy code.</p>\n\n<pre><code>function doSomething (callback) {\n    // any async callback invokes callback with response\n}\n\ndoSomething (function doSomethingAfter(err, result) {\n    // process the async result\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 71
                },
                {
                    "body": "<pre><code>function readContent(callback) {\n    fs.readFile(\"./Index.html\", function (err, content) {\n        if (err) return callback(err)\n        callback(null, content)\n    })\n}\n\nreadContent(function (err, content) {\n    console.log(content)\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>There is actually a Synchronous function for this:</p>\n\n<p><a href=\"http://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_encoding\">http://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_encoding</a></p>\n\n<h1><em>Asynchronous</em></h1>\n\n<p><code>fs.readFile(filename, [encoding], [callback])</code></p>\n\n<p><em>Asynchronously reads the entire contents of a file.  Example:</em></p>\n\n<pre><code>fs.readFile('/etc/passwd', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>\n\n<p><em>The callback is passed two arguments (err, data), where data is the contents of the file.</em></p>\n\n<p><em>If no encoding is specified, then the raw buffer is returned.</em></p>\n\n<hr>\n\n<h1>SYNCHRONOUS</h1>\n\n<p><code>fs.readFileSync(filename, [encoding])</code></p>\n\n<p><em>Synchronous version of fs.readFile. Returns the contents of the filename.</em></p>\n\n<p><em>If encoding is specified then this function returns a string. Otherwise it returns a buffer.</em></p>\n\n<pre><code>var text = fs.readFileSync('test.md','utf8')\nconsole.log (text)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>As said, <code>fs.readFile</code> is an asynchronous action. that means that when you tell node to read a file, you need to consider that it will take some time and in the meantime, node continues to run the following code. in your case it's: <code>console.log(content);</code>.</p>\n\n<p>It's like sending some part of node for a long trip (like reading a big file).</p>\n\n<p>take a look at my comments:</p>\n\n<pre><code>var content;\n\n// node, go fetch this file. when you come back, please run this \"read\" callback function\nfs.readFile('./Index.html', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    content = data;\n});\n\n// in the meantime, please continue and run this console.log\nconsole.log(content);\n</code></pre>\n\n<p>that's why <code>content</code> is still empty when you log it. node has not yet retrieved the file's content.</p>\n\n<p>This could be resolved by moving <code>console.log(content)</code> inside the callback function, right after <code>content = data;</code>. this way you will see the log when node is done reading the file and after <code>content</code> gets a value.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<pre><code>var content;\nfs.readFile('./Index.html', function read(err, data) {\n    if (err) {\n        throw err;\n    }\n    content = data;\n});\nconsole.log(content);\n</code></pre>\n\n<p>Logs <code>undefined</code>, why?</p>\n",
            "last_activity_date": 1417079486,
            "question_id": 10058814,
            "score": 51,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "Get data from fs.readFile"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I believe if you just put in a dummy hash it won't scroll as there is no match to scroll to.</p>\n\n<pre><code>&lt;a href=\"#A4J2S9F7\"&gt;No jumping&lt;/a&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;a href=\"#_\"&gt;No jumping&lt;/a&gt;\n</code></pre>\n\n<p><code>\"#\"</code> by itself is equivelent to <code>\"_top\"</code> thus causes a scroll to the top of the page</p>\n",
                    "is_accepted": true,
                    "score": 70
                },
                {
                    "body": "<p>I'm not sure if this produces the desired outcome, give it a shot:</p>\n\n<pre><code>$('&lt;a href=\"#\"&gt;').text('unlink').click(function(e) {\n    e.preventDefault();\n    var st = parseInt($(window).scrollTop())\n    window.location.hash = '';\n    $('html,body').css( { scrollTop: st });  \n});\n</code></pre>\n\n<p>Basically save the scroll offset and restore it after assigning the empty hash.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>window.location's hash property is stupid in a couple of ways.  This is one of them; the other is that is has different get and set values:</p>\n\n<pre><code>window.location.hash = \"hello\";  // url now reads *.com#hello\nalert(window.location.hash);   // shows \"#hello\", which is NOT what I set.\nwindow.location.hash = window.location.hash; // url now reads *.com##hello\n</code></pre>\n\n<p>Note that setting the hash property to '' removes the hash mark too; that's what redirects the page.  To set the value of the hash part of the url to '', leaving the hash mark and therefore not refreshing, write this:</p>\n\n<pre><code>window.location.href = window.location.href.replace(/#.*$/, '#');\n</code></pre>\n\n<p>There is no way to completely remove the hash mark once set without refreshing the page.</p>\n\n<p>UPDATE 2012:</p>\n\n<p>As Blazemonger and thinkdj have pointed out, technology has improved. Some browsers do allow you to clear that hashtag, but some do not. To support both, try something like:</p>\n\n<pre><code>if ( window.history &amp;&amp; window.history.pushState ) { \n    window.history.pushState('', '', window.location.pathname) \n} else { \n    window.location.href = window.location.href.replace(/#.*$/, '#'); \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Have you tried <code>return false;</code> in the event handler? jQuery does something special when you do that, similar to, but AFAIK more impactful, than <code>e.preventDefault</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Setting window.location.hash to empty or non-existing anchor name, will always force the page to jump to top. The only way to prevent this is to grab the scroll position of the window and set it to that position again after the hash change.</p>\n\n<p>This will also force a repaint of the page (cant avoid it), though since it's executed in a single js process, it won't jump up/down (theoretically).</p>\n\n<pre><code>$('&lt;a href=\"#123\"&gt;').text('link').click(function(e) {\n    e.preventDefault();\n    window.location.hash = this.hash;\n}).appendTo('body');\n\n$('&lt;a href=\"#\"&gt;').text('unlink').click(function(e) {\n    e.preventDefault();\n    var pos = $(window).scrollTop(); // get scroll position\n    window.location.hash = '';\n    $(window).scrollTop(pos); // set scroll position back\n}).appendTo('body');\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use the following on a few sites, NO PAGE JUMPS!</p>\n\n<p>Nice clean address bar for HTML5 friendly browsers, and just a # for older browsers.</p>\n\n<pre><code>$('#logo a').click(function(e){\n    window.location.hash = ''; // for older browsers, leaves a # behind\n    history.pushState('', document.title, window.location.pathname); // nice and clean\n    e.preventDefault(); // no page reload\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>This is an old post but I wanted to share my solution\nAll the links in my project that being handled by JS are having href=\"#_js\" attribute (or whatever name you want to use for that purposes only), and on page initialization I do:</p>\n\n<pre><code>$('body').on('click.a[href=\"#_js\"]', function() {\n    return false;\n});\n</code></pre>\n\n<p>That'll do the trick</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Is it possible to remove the hash from <code>window.location</code> without causing the page to jump-scroll to the top? I need to be able to modify the hash without causing any jumps.</p>\n\n<p>I have this:</p>\n\n<pre><code>$('&lt;a href=\"#123\"&gt;').text('link').click(function(e) {\n  e.preventDefault();\n  window.location.hash = this.hash;\n}).appendTo('body');\n\n$('&lt;a href=\"#\"&gt;').text('unlink').click(function(e) {\n  e.preventDefault();\n  window.location.hash = '';\n}).appendTo('body');\n</code></pre>\n\n<p>See live example here: <a href=\"http://jsbin.com/asobi\">http://jsbin.com/asobi</a></p>\n\n<p>When the user clicks '<strong>link</strong>' the hash tag is modified without any page jumps, so that's working fine.</p>\n\n<p>But when the user clicks '<strong>unlink</strong>' the has tag is removed and the page scroll-jumps to the top. I need to remove the hash without this side-effect.</p>\n",
            "last_activity_date": 1357701820,
            "question_id": 2295845,
            "score": 46,
            "tags": [
                "javascript",
                "jquery",
                "fragment-identifier"
            ],
            "title": "How can I remove the location hash without causing the page to scroll?  "
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>This is how you might solve the specific case:-</p>\n\n<pre><code>function writeLn(s)\n{\n\t//your code to write a line to stdout\n\tWScript.Echo(s)\n}\n\nvar a =  [ 2008, 10, 8, 00, 16, 34, 254 ]\n\nvar d = NewDate.apply(null, a)\n\nfunction NewDate(year, month, date, hour, minute, second, millisecond)\n{\n\treturn new Date(year, month, date, hour, minute, second, millisecond);\n}\n\nwriteLn(d)\n</code></pre>\n\n<p>However you are looking for a more general solution.  The recommended code for creating a constructor method is to have it <code>return this</code>.</p>\n\n<p>Hence:-</p>\n\n<pre><code>function Target(x , y) { this.x = x, this.y = y; return this; }\n</code></pre>\n\n<p>could be constructed :-</p>\n\n<pre><code>var x = Target.apply({}, [1, 2]);\n</code></pre>\n\n<p>However not all implementations work this way not least because the prototype chain would be wrong:-</p>\n\n<pre><code>var n = {};\nTarget.prototype = n;\nvar x = Target.apply({}, [1, 2]);\nvar b = n.isPrototypeOf(x); // returns false\nvar y = new Target(3, 4);\nb = n.isPrototypeOf(y); // returns true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Edited</p>\n\n<p>Sorry, I was sure I made it that way years ago, right now I'll stick to:</p>\n\n<p>var d = new Date(comps[0],comps[1],comps[2],comps[3],comps[4],comps[5],comps[6]);</p>\n\n<p>Edit:</p>\n\n<p>But do remember that a javascript Date-object uses indexes for months, so the above array means</p>\n\n<p>November 8 2008 00:16:34:254</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<pre><code>var comps = [ 2008, 10, 8, 00, 16, 34, 254 ];\nvar d = eval(\"new Date(\" + comps.join(\",\") + \");\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I've done more investigation of my own and came up with the conclusion that <strong>this is an impossible feat</strong>, due to how the Date class is implemented.</p>\n\n<p>I've inspected the <a href=\"http://www.mozilla.org/js/spidermonkey/\">SpiderMonkey</a> source code to see how Date was implemented. I think it all boils down to the following few lines:</p>\n\n<pre><code>static JSBool\nDate(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)\n{\n    jsdouble *date;\n    JSString *str;\n    jsdouble d;\n\n    /* Date called as function. */\n    if (!(cx-&gt;fp-&gt;flags &amp; JSFRAME_CONSTRUCTING)) {\n        int64 us, ms, us2ms;\n        jsdouble msec_time;\n\n        /* NSPR 2.0 docs say 'We do not support PRMJ_NowMS and PRMJ_NowS',\n         * so compute ms from PRMJ_Now.\n         */\n        us = PRMJ_Now();\n        JSLL_UI2L(us2ms, PRMJ_USEC_PER_MSEC);\n        JSLL_DIV(ms, us, us2ms);\n        JSLL_L2D(msec_time, ms);\n\n        return date_format(cx, msec_time, FORMATSPEC_FULL, rval);\n    }\n\n    /* Date called as constructor. */\n    // ... (from here on it checks the arg count to decide how to create the date)\n</code></pre>\n\n<p>When Date is used as a function (either as <code>Date()</code> or <code>Date.prototype.constructor()</code>, which are exactly the same thing), it defaults to returning the current time as a string in the locale format. This is regardless of any arguments that are passed in:</p>\n\n<pre><code>alert(Date()); // Returns \"Thu Oct 09 2008 23:15:54 ...\"\nalert(typeof Date()); // Returns \"string\"\n\nalert(Date(42)); // Same thing, \"Thu Oct 09 2008 23:15:54 ...\"\nalert(Date(2008, 10, 10)); // Ditto\nalert(Date(null)); // Just doesn't care\n</code></pre>\n\n<p>I don't think there's anything that can be done at the JS level to circumvent this. And this is probably the end of my pursuit in this topic.</p>\n\n<p>I've also noticed something interesting:</p>\n\n<pre><code>    /* Set the value of the Date.prototype date to NaN */\n    proto_date = date_constructor(cx, proto);\n    if (!proto_date)\n        return NULL;\n    *proto_date = *cx-&gt;runtime-&gt;jsNaN;\n</code></pre>\n\n<p><code>Date.prototype</code> is a Date instance with the internal value of <code>NaN</code> and therefore,</p>\n\n<pre><code>alert(Date.prototype); // Always returns \"Invalid Date\"\n                       // on Firefox, Opera, Safari, Chrome\n                       // but not Internet Explorer\n</code></pre>\n\n<p>IE doesn't disappoint us. It does things a bit differently and probably sets the internal value to <code>-1</code> so that Date.prototype always returns a date slightly before epoch.</p>\n\n<p><hr /></p>\n\n<h2>Update</h2>\n\n<p>I've finally dug into ECMA-262 itself and it turns out, what I'm trying to achieve (with the Date object) is -- by definition -- not possible:</p>\n\n<blockquote>\n  <p><strong>15.9.2 The Date Constructor Called as a Function</strong></p>\n  \n  <p>When Date is called as a\n  function rather than as a constructor,\n  it returns a string representing the\n  current time (UTC).</p>\n  \n  <p><strong>NOTE</strong> The function\n  call <code>Date(\u2026)</code> is not equivalent to the\n  object creation expression <code>new Date(\u2026)</code>\n  with the same arguments.</p>\n  \n  <p><strong>15.9.2.1 Date ( [ year [, month [, date [, hours [, minutes [, seconds [,\n  ms ] ] ] ] ] ] ] )</strong></p>\n  \n  <p>All of the\n  arguments are optional; any arguments\n  supplied are accepted but are\n  completely ignored. A string is\n  created and returned as if by the\n  expression <code>(new Date()).toString()</code>.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 58
                },
                {
                    "body": "<p>It's less than elegant, but here's a solution:</p>\n\n<pre><code>function GeneratedConstructor (methodName, argumentCount) {\n    var params = []\n\n    for (var i = 0; i &lt; argumentCount; i++) {\n        params.push(\"arguments[\" + i + \"]\")\n    }\n\n    var code = \"return new \" + methodName + \"(\" + params.join(\",\") +  \")\"\n\n    var ctor = new Function(code)\n\n    this.createObject = function (params) {\n        return ctor.apply(this, params)\n    }\n}\n</code></pre>\n\n<p>The way this works should be pretty obvious.  It creates a function through code generation.  This example has a fixed number of parameters for each constructor you create, but that's useful anyway.  Most of the time you have atleast a maximum number of arguments in mind.  This also is better than some of the other examples here because it allows you to generate the code once and then re-use it.  The code that's generated takes advantage of the variable-argument feature of javascript, this way you can avoid having to name each parameter (or spell them out in a list and pass the arguments in to the function you generate).  Here's a working example:</p>\n\n<pre><code>var dateConstructor = new GeneratedConstructor(\"Date\", 3)\ndateConstructor.createObject( [ 1982, 03, 23 ] )\n</code></pre>\n\n<p>This will return the following:</p>\n\n<blockquote>\n  <p>Fri Apr 23 1982 00:00:00 GMT-0800 (PST)</p>\n</blockquote>\n\n<p>It is indeed still...a bit ugly.  But it atleast conveniently hides the mess and doesn't assume that compiled code itself can get garbage collected (since that may depend on the implementation and is a likely area for bugs).</p>\n\n<p>Cheers,\n   Scott S. McCoy</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I'd hardly call this elegant, but in my testing (FF3, Saf4, IE8) it works:</p>\n\n<p><code>var arr = [ 2009, 6, 22, 10, 30, 9 ];</code></p>\n\n<p>Instead of this:</p>\n\n<p><code>var d = new Date( arr[0], arr[1], arr[2], arr[3], arr[4], arr[5] );</code></p>\n\n<p>Try this:</p>\n\n<p><code>var d = new Date( Date.UTC.apply( window, arr ) + ( (new Date()).getTimezoneOffset() * 60000 ) );</code></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You can do it with flagrant, <strong>flagrant</strong> abuse of eval:</p>\n\n<pre><code>var newwrapper = function (constr, args) {\n  var argHolder = {\"c\": constr};\n  for (var i=0; i &lt; args.length; i++) {\n    argHolder[\"$\" + i] = args[i];\n  }\n\n  var newStr = \"new (argHolder['c'])(\";\n  for (var i=0; i &lt; args.length; i++) {\n    newStr += \"argHolder['$\" + i + \"']\";\n    if (i != args.length - 1) newStr += \", \";\n  }\n  newStr += \");\";\n\n  return eval(newStr);\n}\n</code></pre>\n\n<p>sample usage:</p>\n\n<pre><code>function Point(x,y) {\n    this.x = x;\n    this.y = y;\n}\nvar p = __new(Point, [10, 20]);\nalert(p.x); //10\nalert(p instanceof Point); //true\n</code></pre>\n\n<p>enjoy =). </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know it's been a long time, but I have the real answer to this question. This is far from impossible. See <a href=\"https://gist.github.com/747650\" rel=\"nofollow\">https://gist.github.com/747650</a> for a generic solution.</p>\n\n<pre><code>var F = function(){};\nF.prototype = Date.prototype;\nvar d = new F();\nDate.apply(d, comps);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here is another solution:</p>\n\n<pre><code>function createInstance(Constructor, args){\n    var TempConstructor = function(){};\n    TempConstructor.prototype = Constructor.prototype;\n    var instance = new TempConstructor;\n    var ret = Constructor.apply(instance, args);\n    return ret instanceof Object ? ret : instance;\n}\n\nconsole.log( createInstance(Date, [2008, 10, 8, 00, 16, 34, 254]) )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This is how you do it:</p>\n\n<pre><code>function applyToConstructor(constructor, argArray) {\n    var args = [null].concat(argArray);\n    var factoryFunction = constructor.bind.apply(constructor, args);\n    return new factoryFunction();\n}\n\nvar d = applyToConstructor(Date, [2008, 10, 8, 00, 16, 34, 254]);\n</code></pre>\n\n<p>It will work with any constructor, not just built-ins or constructors that can double as functions (like Date).</p>\n\n<p>However it does require the Ecmascript 5 .bind function.  Shims will probably not work correctly.</p>\n\n<p>By the way, one of the other answers suggests returning <code>this</code> out of a constructor.  That can make it very difficult to extend the object using classical inheritance, so I would consider it an antipattern.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Let me start with a specific example of what I'm trying to do.</p>\n\n<p>I have an array of year, month, day, hour, minute, second and millisecond components in the form <code>[ 2008, 10, 8, 00, 16, 34, 254 ]</code>. I'd like to instantiate a Date object using the following standard constructor:</p>\n\n<pre><code>new Date(year, month, date [, hour, minute, second, millisecond ])\n</code></pre>\n\n<p>How can I pass my array to this constructor to get a new Date instance? <em>[ <strong>Update</strong>: My question actually extends beyond this specific example. I'd like a general solution for built-in JavaScript classes like Date, Array, RegExp, etc. whose constructors are beyond my reach. ]</em></p>\n\n<p>I'm trying to do something like the following:</p>\n\n<pre><code>var comps = [ 2008, 10, 8, 00, 16, 34, 254 ];\nvar d = Date.prototype.constructor.apply(this, comps);\n</code></pre>\n\n<p>I probably need a \"<code>new</code>\" in there somewhere. The above just returns the current time as if I had called \"<code>(new Date()).toString()</code>\". I also acknowledge that I may be completely in the wrong direction with the above :)</p>\n\n<p><strong><em>Note</strong>: No <code>eval()</code> and no accessing the array items one by one, please. I'm pretty sure I should be able to use the array as is.</em></p>\n\n<p><hr /></p>\n\n<h2>Update: Further Experiments</h2>\n\n<p>Since no one has been able to come up with a working answer yet, I've done more playing around. Here's a new discovery.</p>\n\n<p>I can do this with my own class:</p>\n\n<pre><code>function Foo(a, b) {\n    this.a = a;\n    this.b = b;\n\n    this.toString = function () {\n    \treturn this.a + this.b;\n    };\n}\n\nvar foo = new Foo(1, 2);\nFoo.prototype.constructor.apply(foo, [4, 8]);\ndocument.write(foo); // Returns 12 -- yay!\n</code></pre>\n\n<p>But it doesn't work with the intrinsic Date class:</p>\n\n<pre><code>var d = new Date();\nDate.prototype.constructor.call(d, 1000);\ndocument.write(d); // Still returns current time :(\n</code></pre>\n\n<p>Neither does it work with Number:</p>\n\n<pre><code>var n = new Number(42);\nNumber.prototype.constructor.call(n, 666);\ndocument.write(n); // Returns 42\n</code></pre>\n\n<p>Maybe this just isn't possible with intrinsic objects? I'm testing with Firefox BTW.</p>\n",
            "last_activity_date": 1393345706,
            "question_id": 181348,
            "score": 45,
            "tags": [
                "javascript",
                "reflection"
            ],
            "title": "Instantiating a JavaScript object by calling prototype.constructor.apply"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I use <a href=\"http://dean.edwards.name/packer/\" rel=\"nofollow\">Packer</a> by Dean Edwards for javascript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://developer.yahoo.com/yui/compressor/\">YUI Compressor</a> does both JavaScript and CSS.  I'm not sure if you can send it a batch of files.</p>\n\n<p>You <em>can</em> batch process at <a href=\"http://yui.2clics.net/\">YUI Compressor Online (yui.2clics.net)</a>, though that version only accepts JavaScript.  Another <a href=\"http://www.refresh-sf.com/yui/\">Online YUI Compressor (refresh-sf.com)</a> accepts CSS, too, but doesn't batch.</p>\n\n<p>In terms of comparing the various minifiers, see <a href=\"http://docs.jquery.com/Frequently_Asked_Questions#How_do_I_compress_my_code.3F\">jQuery : Frequently Asked Questions (FAQ) : How do I compress my code?</a> Also, check out <a href=\"http://ajaxmin.codeplex.com\">Microsoft Ajax Minifier</a>.</p>\n\n<p>jQuery has switched from the YUI Compressor to <a href=\"https://developers.google.com/closure/compiler/\">Google's Closure Compiler</a> for the minified version that they distribute.</p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p><a href=\"http://developer.yahoo.com/yui/compressor/\">YUI Compressor</a> is pretty cool. You can run it as part of a build process from the command line</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I like this one from Yahoo: <a href=\"http://developer.yahoo.com/yui/compressor/\" rel=\"nofollow\">http://developer.yahoo.com/yui/compressor/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Take a look at <a href=\"http://compressorrater.thruhere.net/\" rel=\"nofollow\">The JavaScript CompressorRater</a>.  It does live comparisons of various minifiers (with and without gzip compression) for any JavaScript you supply it.</p>\n\n<p>It also (mostly) works with CSS, though not all minifiers support it and not even all of those that do (e.g. YUI) show up correctly in the comparison table.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Basically what you are looking is to speed up your site by reducing the size of the response.</p>\n\n<p>The other thing apart from minified js and css files is you can do a http compress. \nPlease go through <a href=\"http://stackoverflow.com/questions/47827/html-compression-and-seo\">this</a> and <a href=\"http://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/\" rel=\"nofollow\">this</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you don't mind using Perl as part of your build process, <a href=\"http://search.cpan.org/~herrera/JavaScript-Minifier-0.01/lib/JavaScript/Minifier.pm\" rel=\"nofollow\">JavaScript::</a> and <a href=\"http://search.cpan.org/~pmichaux/CSS-Minifier-0.01/lib/CSS/Minifier.pm\" rel=\"nofollow\">CSS::Minifier</a> work pretty well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can try the <a href=\"http://www.boryi.com/html/free-tools.html\" rel=\"nofollow\">free tools</a> from Boryi</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There's also <a href=\"http://yuicompressor.codeplex.com/\" rel=\"nofollow\">a .NET port of YUI Compressor</a> which allows you to:-</p>\n\n<ul>\n<li>intergrate the minification/file combining into Visual Studio post-build events </li>\n<li>intergrate into a TFS Build (including CI) </li>\n<li>if you wish to just use the dll's in your own code (eg. on the fly minification).</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Microsoft released their <a href=\"http://aspnet.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=34488\" rel=\"nofollow\">Microsoft Ajax Minifier</a> on codeplex today. Includes an MS build task and everthing inside VS 2005/2008</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Or try this:\n<a href=\"http://www.codeproject.com/KB/aspnet/CombineAndMinify.aspx\" rel=\"nofollow\">http://www.codeproject.com/KB/aspnet/CombineAndMinify.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>YUI compressor is great.</p>\n\n<p>Another tool (and my weapon of choice due to its PHP-ness)  is the PHP5-based Minify project hosted on Google code. If you're on a PHP platform consider it. Rather than running your stuff through a service after the fact, you install and configure this on your webserver once and then code and comment as much as you want and minify will rebuild (reminify) your CSS and/or Javascript on the fly. Yeah. I've used it, works great!!</p>\n\n<p><a href=\"http://code.google.com/p/minify/\" rel=\"nofollow\">http://code.google.com/p/minify/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm looking for some applications or websites that minimize css and js files.  Ideally, they could batch them all or if not, one at a time.</p>\n",
            "last_activity_date": 1405896725,
            "question_id": 702907,
            "score": 38,
            "tags": [
                "javascript",
                "css",
                "optimization",
                "jscompress"
            ],
            "title": "What are some good css and js minimizers for production code?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Javascript can have inheritance, check out the URL below:</p>\n\n<p><a href=\"http://www.webreference.com/js/column79/\" rel=\"nofollow\">http://www.webreference.com/js/column79/</a></p>\n\n<p>Andrew</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function Animal(type) {\n    if (type == \"cat\") {\n        this.__proto__ = Cat.prototype;\n    } else if (type == \"dog\") {\n        this.__proto__ = Dog.prototype;\n    } else if (type == \"fish\") {\n        this.__proto__ = Fish.prototype;\n    }\n}\nAnimal.prototype.say = function() {\n    alert(\"This animal can't speak!\");\n}\n\nfunction Cat() {\n    // init cat\n}\nCat.prototype = new Animal();\nCat.prototype.say = function() {\n    alert(\"Meow!\");\n}\n\nfunction Dog() {\n    // init dog\n}\nDog.prototype = new Animal();\nDog.prototype.say = function() {\n    alert(\"Bark!\");\n}\n\nfunction Fish() {\n    // init fish\n}\nFish.prototype = new Animal();\n\nvar newAnimal = new Animal(\"dog\");\nnewAnimal.say();\n</code></pre>\n\n<p>This isn't guaranteed to work as <code>__proto__</code> isn't a standard variable, but it works at least in Firefox and Safari.</p>\n\n<p>If you don't understand how it works, read about the prototype chain.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<blockquote>\n  <p>Is it possible to simulate abstract base class in JavaScript?</p>\n</blockquote>\n\n<p>Certainly. There are about a thousand ways to implement class/instance systems in JavaScript. Here is one:</p>\n\n<pre><code>// Classes magic. Define a new class with var C= Object.subclass(isabstract),\n// add class members to C.prototype,\n// provide optional C.prototype._init() method to initialise from constructor args,\n// call base class methods using Base.prototype.call(this, ...).\n//\nFunction.prototype.subclass= function(isabstract) {\n    if (isabstract) {\n        var c= new Function(\n            'if (arguments[0]!==Function.prototype.subclass.FLAG) throw(\\'Abstract class may not be constructed\\'); '\n        );\n    } else {\n        var c= new Function(\n            'if (!(this instanceof arguments.callee)) throw(\\'Constructor called without \"new\"\\'); '+\n            'if (arguments[0]!==Function.prototype.subclass.FLAG &amp;&amp; this._init) this._init.apply(this, arguments); '\n        );\n    }\n    if (this!==Object)\n        c.prototype= new this(Function.prototype.subclass.FLAG);\n    return c;\n}\nFunction.prototype.subclass.FLAG= new Object();\n</code></pre>\n\n<blockquote>\n  <p>var cat = new Animal('cat');</p>\n</blockquote>\n\n<p>That's not really an abstract base class of course. Do you mean something like:</p>\n\n<pre><code>var Animal= Object.subclass(true); // is abstract\nAnimal.prototype.say= function() {\n    window.alert(this._noise);\n};\n\n// concrete classes\nvar Cat= Animal.subclass();\nCat.prototype._noise= 'meow';\nvar Dog= Animal.subclass();\nDog.prototype._noise= 'bark';\n\n// usage\nvar mycat= new Cat();\nmycat.say(); // meow!\nvar mygiraffe= new Animal(); // error!\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Do you mean something like this:</p>\n\n<pre><code>function Animal() {\n  //Initialization for all Animals\n}\n\n//Function and properties shared by all instances of Animal\nAnimal.prototype.init=function(name){\n  this.name=name;\n}\nAnimal.prototype.say=function(){\n    alert(this.name + \" who is a \" + this.type + \" says \" + this.whattosay);\n}\nAnimal.prototype.type=\"unknown\";\n\nfunction Cat(name) {\n    this.init(name);\n\n    //Make a cat somewhat unique\n    var s=\"\";\n    for (var i=Math.ceil(Math.random()*7); i&gt;=0; --i) s+=\"e\";\n    this.whattosay=\"Me\" + s +\"ow\";\n}\n//Function and properties shared by all instances of Cat    \nCat.prototype=new Animal();\nCat.prototype.type=\"cat\";\nCat.prototype.whattosay=\"meow\";\n\n\nfunction Dog() {\n    //Call init with same arguments as Dog was called with\n    this.init.apply(this,arguments);\n}\n\nDog.prototype=new Animal();\nDog.prototype.type=\"Dog\";\nDog.prototype.whattosay=\"bark\";\n//Override say.\nDog.prototype.say = function() {\n        this.openMouth();\n        //Call the original with the exact same arguments\n        Animal.prototype.say.apply(this,arguments);\n        //or with other arguments\n        //Animal.prototype.say.call(this,\"some\",\"other\",\"arguments\");\n        this.closeMouth();\n}\n\nDog.prototype.openMouth=function() {\n   //Code\n}\nDog.prototype.closeMouth=function() {\n   //Code\n}\n\nvar dog = new Dog(\"Fido\");\nvar cat1 = new Cat(\"Dash\");\nvar cat2 = new Cat(\"Dot\");\n\n\ndog.say(); // Fido the Dog says bark\ncat1.say(); //Dash the Cat says M[e]+ow\ncat2.say(); //Dot the Cat says M[e]+ow\n\n\nalert(cat instanceof Cat) // True\nalert(cat instanceof Dog) // False\nalert(cat instanceof Animal) // True\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>You might want to check out Dean Edwards' Base Class: <a href=\"http://dean.edwards.name/weblog/2006/03/base/\">http://dean.edwards.name/weblog/2006/03/base/</a></p>\n\n<p>Alternatively, there is this example / article by Douglas Crockford on classical inheritance in JavaScript: <a href=\"http://www.crockford.com/javascript/inheritance.html\">http://www.crockford.com/javascript/inheritance.html</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Another thing you might want to enforce is making sure your abstract class is not instantiated. You can do that by defining a function that acts as FLAG ones set as the Abstract class constructor. This will then try to construct the FLAG which will call its constructor containing exception to be thrown. Example below:</p>\n\n<pre><code>(function(){\n\nvar FLAG_ABSTRACT = function(__class){\n\n    throw \"Error: Trying to instantiate an abstract class:\"+__class\n}\n\nvar Class = function (){\n\n    Class.prototype.constructor = new FLAG_ABSTRACT(\"Class\");       \n}\n\n    //will throw exception\nvar  foo = new Class();\n</code></pre>\n\n<p>})()</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can create abstract classes by using object prototypes, a simple example can be as follows : </p>\n\n<pre><code>var SampleInterface = {\n   addItem() : function(item){}  \n}\n</code></pre>\n\n<p>You can change above method or not, it is up to you when you implement it. For a detailed observation, you may want to visit <a href=\"http://www.yusufaytas.com/achieving-abstraction-in-javascript/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>Animal = function () { throw \"abstract class!\" }\nAnimal.prototype.name = \"This animal\";\nAnimal.prototype.sound = \"...\";\nAnimal.prototype.say = function() {\n    console.log( this.name + \" says: \" + this.sound );\n}\n\nCat = function () {\n    this.name = \"Cat\";\n    this.sound = \"meow\";\n}\n\nDog = function() {\n    this.name = \"Dog\";\n    this.sound  = \"woof\";\n}\n\nCat.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n\nnew Cat().say();    //Cat says: meow\nnew Dog().say();    //Dog says: woof \nnew Animal().say(); //Uncaught abstract class! \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>One simple way to create an abstract class is this:</p>\n\n<pre><code>/**\n @constructor\n @abstract\n */\nvar Animal = function() {\n    if (this.constructor === Animal) {\n      throw new Error(\"Can't instantiate abstract class!\");\n    }\n    // Animal initialization...\n};\n\n/**\n @abstract\n */\nAnimal.prototype.say = function() {\n    throw new Error(\"Abstract method!\");\n}\n</code></pre>\n\n<p>The <code>Animal</code> \"class\" and the <code>say</code> method are abstract.</p>\n\n<p>Creating an instance would throw an error: </p>\n\n<pre><code>new Animal(); // throws\n</code></pre>\n\n<p>This is how you \"inherit\" from it:</p>\n\n<pre><code>var Cat = function() {\n    Animal.apply(this, arguments);\n    // Cat initialization...\n};\nCat.prototype = Object.create(Animal.prototype);\nCat.prototype.constructor = Cat;\n\nCat.prototype.say = function() {\n    console.log('meow');\n}\n</code></pre>\n\n<p><code>Dog</code> looks just like it.</p>\n\n<p>And this is how your scenario plays out:</p>\n\n<pre><code>var cat = new Cat();\nvar dog = new Dog();\n\ncat.say();\ndog.say();\n</code></pre>\n\n<p>Fiddle <a href=\"http://jsfiddle.net/JSeSt/\">here</a> (look at the console output).</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I think All Those answers specially first two (by  <a href=\"http://stackoverflow.com/questions/597769/how-do-i-create-an-abstract-base-class-in-javascript#597984\">some</a> and <a href=\"http://stackoverflow.com/questions/597769/how-do-i-create-an-abstract-base-class-in-javascript#21220964\">jord\u00e3o</a>) answer the question clearly with conventional prototype base JS concept.<br>\nNow as you want the animal class constructor to behave  according to the passed parameter to the construction, I think this is very much similar to basic behavior of  <code>Creational Patterns</code> for example <a href=\"http://www.oodesign.com/factory-pattern.html\" rel=\"nofollow\">Factory Pattern</a>. </p>\n\n<p>Here i made a little approach to make it work that way.</p>\n\n<pre><code>var Animal = function(type) {\n    this.type=type;\n    if(type=='dog')\n    {\n        return new Dog();\n    }\n    else if(type==\"cat\")\n    {\n        return new Cat();\n    }\n};\n\n\n\nAnimal.prototype.whoAreYou=function()\n{\n    console.log(\"I am a \"+this.type);\n}\n\nAnimal.prototype.say = function(){\n    console.log(\"Not implemented\");\n};\n\n\n\n\nvar Cat =function () {\n    Animal.call(this);\n    this.type=\"cat\";\n};\n\nCat.prototype=Object.create(Animal.prototype);\nCat.prototype.constructor = Cat;\n\nCat.prototype.say=function()\n{\n    console.log(\"meow\");\n}\n\n\n\nvar Dog =function () {\n    Animal.call(this);\n    this.type=\"dog\";\n};\n\nDog.prototype=Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n\nDog.prototype.say=function()\n{\n    console.log(\"bark\");\n}\n\n\nvar animal=new Animal();\n\n\nvar dog = new Animal('dog');\nvar cat=new Animal('cat');\n\nanimal.whoAreYou(); //I am a undefined\nanimal.say(); //Not implemented\n\n\ndog.whoAreYou(); //I am a dog\ndog.say(); //bark\n\ncat.whoAreYou(); //I am a cat\ncat.say(); //meow\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to simulate abstract base class in JavaScript? What is the most elegant way to do it?</p>\n\n<p>Say, I want to do something like: -</p>\n\n<pre><code>var cat = new Animal('cat');\nvar dog = new Animal('dog');\n\ncat.say();\ndog.say();\n</code></pre>\n\n<p>It should output: 'bark', 'meow'</p>\n",
            "last_activity_date": 1422770955,
            "question_id": 597769,
            "score": 35,
            "tags": [
                "javascript",
                "oop",
                "abstract"
            ],
            "title": "How do I create an abstract base class in JavaScript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<pre><code>var pad = function(num, totalChars) {\n    var pad = '0';\n    num = num + '';\n    while (num.length &lt; totalChars) {\n        num = pad + num;\n    }\n    return num;\n};\n\n// Ratio is between 0 and 1\nvar changeColor = function(color, ratio, darker) {\n    // Trim trailing/leading whitespace\n    color = color.replace(/^\\s*|\\s*$/, '');\n\n    // Expand three-digit hex\n    color = color.replace(\n        /^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i,\n        '#$1$1$2$2$3$3'\n    );\n\n    // Calculate ratio\n    var difference = Math.round(ratio * 256) * (darker ? -1 : 1),\n        // Determine if input is RGB(A)\n        rgb = color.match(new RegExp('^rgba?\\\\(\\\\s*' +\n            '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' +\n            '\\\\s*,\\\\s*' +\n            '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' +\n            '\\\\s*,\\\\s*' +\n            '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])' +\n            '(?:\\\\s*,\\\\s*' +\n            '(0|1|0?\\\\.\\\\d+))?' +\n            '\\\\s*\\\\)$'\n        , 'i')),\n        alpha = !!rgb &amp;&amp; rgb[4] != null ? rgb[4] : null,\n\n        // Convert hex to decimal\n        decimal = !!rgb? [rgb[1], rgb[2], rgb[3]] : color.replace(\n            /^#?([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])/i,\n            function() {\n                return parseInt(arguments[1], 16) + ',' +\n                    parseInt(arguments[2], 16) + ',' +\n                    parseInt(arguments[3], 16);\n            }\n        ).split(/,/),\n        returnValue;\n\n    // Return RGB(A)\n    return !!rgb ?\n        'rgb' + (alpha !== null ? 'a' : '') + '(' +\n            Math[darker ? 'max' : 'min'](\n                parseInt(decimal[0], 10) + difference, darker ? 0 : 255\n            ) + ', ' +\n            Math[darker ? 'max' : 'min'](\n                parseInt(decimal[1], 10) + difference, darker ? 0 : 255\n            ) + ', ' +\n            Math[darker ? 'max' : 'min'](\n                parseInt(decimal[2], 10) + difference, darker ? 0 : 255\n            ) +\n            (alpha !== null ? ', ' + alpha : '') +\n            ')' :\n        // Return hex\n        [\n            '#',\n            pad(Math[darker ? 'max' : 'min'](\n                parseInt(decimal[0], 10) + difference, darker ? 0 : 255\n            ).toString(16), 2),\n            pad(Math[darker ? 'max' : 'min'](\n                parseInt(decimal[1], 10) + difference, darker ? 0 : 255\n            ).toString(16), 2),\n            pad(Math[darker ? 'max' : 'min'](\n                parseInt(decimal[2], 10) + difference, darker ? 0 : 255\n            ).toString(16), 2)\n        ].join('');\n};\nvar lighterColor = function(color, ratio) {\n    return changeColor(color, ratio, false);\n};\nvar darkerColor = function(color, ratio) {\n    return changeColor(color, ratio, true);\n};\n\n// Use\nvar darker = darkerColor('rgba(80, 75, 52, .5)', .2);\nvar lighter = lighterColor('rgba(80, 75, 52, .5)', .2);\n</code></pre>\n\n<p>Now handles RGB(A) input, as well as hex (3 digit or 6).</p>\n",
                    "is_accepted": true,
                    "score": 51
                },
                {
                    "body": "<p>You basically just need to add (for lighter) or subtract (for darker) equal amounts from each of R, G, B components.</p>\n\n<p>Take a look at <a href=\"http://blog.lotusnotes.be/domino/archive/2007-08-04-javascript-color-functions.html\" rel=\"nofollow\">Domino 2.0</a> which is a small javascript library that does just that.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could make a partially-transparent white or black PNG and overlay (underlay?) it on hover:</p>\n\n<pre><code>div.button {\n  background-color: #404040;\n}\nbody&gt;div.button:hover {\n  background-image: url('blackpixel.png');\n}\n</code></pre>\n\n<p>No JS required.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This is just a modification of <a href=\"http://stackoverflow.com/questions/1507931/generate-lighter-darker-color-in-css-using-javascript/1507987#1507987\">eyelidlessness</a>' answer, since I saw the same function twice</p>\n\n<pre><code>var pad = function(num, totalChars) {\n    var pad = '0';\n    num = num + '';\n    while (num.length &lt; totalChars) {\n        num = pad + num;\n    }\n    return num;\n};\n\n// Ratio is between 0 and 1\nvar changeColor = function(color, ratio, darker) {\n    var difference = Math.round(ratio * 255) * (darker ? -1 : 1),\n        minmax     = darker ? Math.max : Math.min,\n        decimal    = color.replace(\n            /^#?([a-z0-9][a-z0-9])([a-z0-9][a-z0-9])([a-z0-9][a-z0-9])/i,\n            function() {\n                return parseInt(arguments[1], 16) + ',' +\n                    parseInt(arguments[2], 16) + ',' +\n                    parseInt(arguments[3], 16);\n            }\n        ).split(/,/);\n    return [\n        '#',\n        pad(minmax(parseInt(decimal[0], 10) + difference, 0).toString(16), 2),\n        pad(minmax(parseInt(decimal[1], 10) + difference, 0).toString(16), 2),\n        pad(minmax(parseInt(decimal[2], 10) + difference, 0).toString(16), 2)\n    ].join('');\n};\nvar lighterColor = function(color, ratio) {\n    return changeColor(color, ratio, false);\n};\nvar darkerColor = function(color, ratio) {\n    return changeColor(color, ratio, true);\n};\n\n// Use\nvar darker = darkerColor('#404040', .2);\nvar lighter = lighterColor('#404040', .2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>perhaps <a href=\"http://code.google.com/p/flot/source/browse/trunk/jquery.colorhelpers.js\" rel=\"nofollow\">jquery.colorhelpers.js</a> functions for scale and add would help?\nI'm trying to find better examples than are found in-line for the flot source code, however.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Probably you missed <a href=\"http://www.safalra.com/web-design/javascript/colour-handling-and-processing/\" rel=\"nofollow\">http://www.safalra.com/web-design/javascript/colour-handling-and-processing/</a> . It supports HSV and HSL colors and convert between them and between RGB values.</p>\n\n<p>HSV and HSL are much more \"human friendly\" representations of colors, so using them making a lighter color, a darker one, a more or less intense one, or finding the color with the best contrast is extremely simple.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function ColorLuminance(hex, lum) {\n// validate hex string\nhex = String(hex).replace(/[^0-9a-f]/gi, '');\nif (hex.length &lt; 6) {\n    hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n}\nlum = lum || 0;\n// convert to decimal and change luminosity\nvar rgb = \"#\", c, i;\nfor (i = 0; i &lt; 3; i++) {\n    c = parseInt(hex.substr(i*2,2), 16);\n    c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n    rgb += (\"00\"+c).substr(c.length);\n}\nreturn rgb;\n</code></pre>\n\n<p>}</p>\n\n<p><a href=\"http://www.sitepoint.com/javascript-generate-lighter-darker-color/\" rel=\"nofollow\">Found here: http://www.sitepoint.com/javascript-generate-lighter-darker-color/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found a way just using CSS, similar to Wander Nauta's solution, but without using an image.  If you can change the html, simply put a div behind the area you want to change with the original color set as the background.  Then, you can set the area you're concerned about with a semi-transparent white or black background, and you'll lighten or darken your element.</p>\n\n<p>I'm guessing it has its limitations, but it works great for me.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>this is an old question.. but here is my way of doing it using replace and split. </p>\n\n<pre><code>var CO='' ;\n\n$('#HoverMe').hover(function(){  \nCO=$(this).css('backgroundColor' );\n\nvar CC= $(this).css('backgroundColor').replace('rgb(','').replace(')','').split(',');\n\nvar Change=0.2;\n\nvar CR=Math.floor((CC[0]*Change)+parseInt(CC[0]));\n\nvar CG=Math.floor((CC[1]*Change)+parseInt(CC[1]));\n\nvar CB=Math.floor((CC[2]*Change)+parseInt(CC[2]));\n\n$(this).css('background','rgb('+CR+','+CG+','+CB+')');},\n\nfunction(){\n    $(this).css('background',CO);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you mean server side JS then you can use <a href=\"http://learnboost.github.io/stylus/docs/functions.html\" rel=\"nofollow\">Stylus</a> which is a CSS preprocessor with built-in functions for making colors lighter/darker etc.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just had the same problem and I solved it as follows, maybe useful for someone. For this solution you need two elements the outer one defines your color, the inner one is used for the hightlighting. In my case I have something like this:</p>\n\n<pre><code>&lt;div class=\"button\"&gt;&lt;a href=\"#\"&gt;Hi Color&lt;/a&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Then you define in CSS:</p>\n\n<pre><code>.button {\n   display: inline-block;\n   background-color: blue;\n}\n\n.button a {\n   display: inline-block;\n}\n\n.button a:hover {\n   background-color: rgba(255,255,255,0.5);\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/869wg/2/\" rel=\"nofollow\">Fiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>let say I have #404040 color code. How to generate a new color code which is either lighter or darker by 20% (or given x%)? I need this for generate a hover color in a dynamic site (which color is changing using theme). Therefore it is not possible to use another class or :hover with predefined class.</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1398108050,
            "question_id": 1507931,
            "score": 28,
            "tags": [
                "javascript",
                "html",
                "css",
                "colors"
            ],
            "title": "Generate lighter/darker color in css using javascript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>When you write:</p>\n\n<blockquote>\n  <p><em>\u2026and using normal javascript tried to click it\u2026</em></p>\n</blockquote>\n\n<p>what do you mean?</p>\n\n<p>If you mean that you wrote code like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>mySVGElement.click();\n</code></pre>\n\n<p>then that is your problem. Not all DOM elements have a <code>click()</code> method like a <code>&lt;button&gt;</code> or <code>&lt;input\u2026&gt;</code> may. Instead, you need to <a href=\"https://developer.mozilla.org/samples/domref/dispatchEvent.html\" rel=\"nofollow\">simulate and fire your own click event</a>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function simulateClick(elementToClick){\n  var evt = document.createEvent(\"MouseEvents\");\n  evt.initMouseEvent(\"click\", true, true, window,\n    0, 0, 0, 0, 0, false, false, false, false, 0, null);\n  var canceled = !elementToClick.dispatchEvent(evt);\n  return canceled; //Indicate if `preventDefault` was called during handling\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>More generally, if the user interacts with element <em>A</em>, how do you select (and then modify) related elements <em>B</em>? There are many ways of achieving this, but here are three common approaches.</p>\n\n<h2>Option 1. For one-to-one mappings, select by id.</h2>\n\n<p>If each element in <em>A</em> has exactly one corresponding element in <em>B</em>, you can select the related element B by id, such as <code>d3.select(\"#foo\")</code> to select a <code>&lt;div id=\"foo\"&gt;</code>.</p>\n\n<p>This approach requires setting an id for each element in <em>B</em> using <a href=\"https://github.com/mbostock/d3/wiki/Selections#wiki-attr\">selection.attr</a>. This is easiest if your data has an intrinsic unique identifier, such as <code>d.name</code> or <code>d.id</code>:</p>\n\n<pre><code>b.attr(\"id\", function(d) { return d.id; });\n</code></pre>\n\n<p>Next, to enable clicking on elements <em>A</em> to change the fill color of the corresponding element in <em>B</em>, use <a href=\"https://github.com/mbostock/d3/wiki/Selections#wiki-on\">selection.on</a> to register a click listener, and then select by id:</p>\n\n<pre><code>a.on(\"click\", function(d) {\n  d3.select(\"#\" + d.id).style(\"fill\", \"red\");\n});\n</code></pre>\n\n<p>Identifiers must be both <em>unique and <a href=\"http://www.w3.org/TR/html4/types.html#type-id\">valid</a></em>. For example, the id must start with a letter and not a number, and can't contain spaces. If your data doesn't already have a unique identifier, you could generate one from the index, such as</p>\n\n<pre><code>b.attr(\"id\", function(d, i) { return \"b-\" + i; });\n</code></pre>\n\n<p>And later, assuming the elements <em>A</em> are in the same order,</p>\n\n<pre><code>a.on(\"click\", function(d, i) {\n  d3.select(\"#b-\" + i).style(\"fill\", \"red\");\n});\n</code></pre>\n\n<p>You could also <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\">iterate over your data array</a> to generate a unique identifier.</p>\n\n<h2>Option 2. For one-to-many mappings, select by class.</h2>\n\n<p>To select elements of class \"foo\", such as a <code>&lt;div class=\"foo\"&gt;</code>, say <code>d3.selectAll(\".foo\")</code>. Use this approach if any element in <em>A</em> corresponds to multiple elements in <em>B</em>. For example, if you had a force-directed graph showing the relationships between students, you might color the nodes based on each student's year, and then use a legend to toggle the visibility of each year.</p>\n\n<p>As with the previous approach, you can use <a href=\"https://github.com/mbostock/d3/wiki/Selections#wiki-attr\">selection.attr</a> to set the \"class\" attribute. In this case, the class attribute is not unique, so it might come from a <code>d.type</code> property in the data:</p>\n\n<pre><code>b.attr(\"class\", function(d) { return d.type; })\n</code></pre>\n\n<p>If you have multiple legends for different categorical attributes of data, you could also be more specific and prefix the class name. To continue the student year example:</p>\n\n<pre><code>b.attr(\"class\", function(d) { return \"year-\" + d.year; })\n</code></pre>\n\n<p>Setting the class attribute will replace any previously-set classes, so if you want to apply multiple classes to the elements, you need to join them together with a space when setting the \"class\" attribute.</p>\n\n<p>Next, to enable clicking on elements <em>A</em> to change the fill color of the corresponding elements in <em>B</em>, use selection.on to register a click listener, and then select by class:</p>\n\n<pre><code>a.on(\"click\", function(d) {\n  d3.selectAll(\".\" + d.type).style(\"fill\", \"red\");\n});\n</code></pre>\n\n<p>Note that we're using <a href=\"https://github.com/mbostock/d3/wiki/Selections#wiki-d3_selectAll\">selectAll</a> here rather than <a href=\"https://github.com/mbostock/d3/wiki/Selections#wiki-d3_select\">select</a>; that's because we want to select all corresponding elements, rather than just the first one. Again, you'll need to make sure that the class attribute is <a href=\"http://stackoverflow.com/questions/448981/what-characters-are-valid-in-css-class-names\">valid</a>.</p>\n\n<h2>Option 3. For everything else, select and filter by data.</h2>\n\n<p>The previous two approaches generate ids and classes so that the browser can index the elements in <em>B</em> for efficient selection. For a small number of elements, or when more general selection methods are needed, you can omit specifying \"id\" or \"class\" attributes and simply select manually by <a href=\"https://github.com/mbostock/d3/wiki/Selections#wiki-filter\">selection.filter</a>.</p>\n\n<p>Let's call the datum associated with each element in <em>A</em> <code>da</code>, and the datum associated with each element in <em>B</em> <code>db</code>. Now all we have to do is define an expression that returns true when <code>da</code> matches <code>db</code>. For example, if we wanted to filter by type:</p>\n\n<pre><code>a.on(\"click\", function(da) {\n  b.filter(function(db) { return da.type == db.type; }).style(\"fill\", \"red\");\n});\n</code></pre>\n\n<p>The first two options are preferred, but occasionally manual filtering is useful, such as when you have a range slider and want to filter based on a quantitative variable.</p>\n",
                    "is_accepted": true,
                    "score": 59
                }
            ],
            "body": "<p>I have created a force directed graph using D3 and displayed the id of the nodes in a normal div. I need to highlight the node whose id has been clicked in the div.\nI have searched the id of the node and using normal javascript tried to click it but it does not work.</p>\n",
            "last_activity_date": 1391278277,
            "question_id": 11206015,
            "score": 15,
            "tags": [
                "javascript",
                "d3.js",
                "force-layout"
            ],
            "title": "clicking a node in d3 from a button outside the svg"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>If you have a picture of the whole earth, the projection does always matter. But maybe I just don't understand your question. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A basic conversion function in js would be:</p>\n\n<pre><code>MAP_WIDTH = 1000;\nMAP_HEIGHT = 446;\n\nfunction convert(lat, lon){\n    var y = ((-1 * lat) + 90) * (MAP_HEIGHT / 180);\n    var x = (lon + 180) * (MAP_WIDTH / 360);\n    return {x:x,y:y};\n}\n</code></pre>\n\n<p>This will return the number of pixels from upper left.\nThis function assumes the following:</p>\n\n<ol>\n<li>That your image is properly aligned\nwith the upper left corner (0,0)\naligning with 90* North by 180*\nWest.</li>\n<li>That your coords are signed with N being -, S being +, W being - and E being +</li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 3
                },
                {
                    "body": "<p>The projection you use is going to change everything, but this will work assuming a Mercator projection:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script language=\"Javascript\"&gt;\nvar dot_size = 3;\nvar longitude_shift = 55;   // number of pixels your map's prime meridian is off-center.\nvar x_pos = 54;\nvar y_pos = 19;\nvar map_width = 430;\nvar map_height = 332;\nvar half_dot = Math.floor(dot_size / 2);\nfunction draw_point(x, y) {\n    dot = '&lt;div style=\"position:absolute;width:' + dot_size + 'px;height:' + dot_size + 'px;top:' + y + 'px;left:' + x + 'px;background:#00ff00\"&gt;&lt;/div&gt;';\n    document.body.innerHTML += dot;\n}\nfunction plot_point(lat, lng) {\n    // Mercator projection\n\n    // longitude: just scale and shift\n    x = (map_width * (180 + lng) / 360) % map_width + longitude_shift;\n\n    // latitude: using the Mercator projection\n    lat = lat * Math.PI / 180;  // convert from degrees to radians\n    y = Math.log(Math.tan((lat/2) + (Math.PI/4)));  // do the Mercator projection (w/ equator of 2pi units)\n    y = (map_height / 2) - (map_width * y / (2 * Math.PI)) + y_pos;   // fit it to our map\n\n    x -= x_pos;\n    y -= y_pos;\n\n    draw_point(x - half_dot, y - half_dot);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"plot_point(40.756, -73.986)\"&gt;\n    &lt;!-- image found at http://www.math.ubc.ca/~israel/m103/mercator.png --&gt;\n    &lt;img src=\"mercator.png\" style=\"position:absolute;top:0px;left:0px\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>There's a good Javascript library, <a href=\"http://proj4js.org/\" rel=\"nofollow\">PROJ4JS</a>, that allows you to do transformations between different projections.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I've written a function which works for Mercator maps. Especially if your image doesn't cover the whole world, means it also works with cropped maps: <a href=\"http://stackoverflow.com/a/10401734/730823\">http://stackoverflow.com/a/10401734/730823</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have the Lat/Long value of New York City, NY; 40.7560540,-73.9869510 and a flat image of the earth, 1000px \u00d7 446px.</p>\n\n<p>I would like to be able to convert, using Javascript, the Lat/Long to an X,Y coordinate where the point would reflect the location.</p>\n\n<p>So the X,Y coordinate form the Top-Left corner of the image would be; 289, 111</p>\n\n<p>Things to note:</p>\n\n<ol>\n<li>don't worry about issues of what projection to use, make your own\nassumption or go with what you know\nmight work </li>\n<li>X,Y can be form any corner of the image</li>\n<li>Bonus points for\nthe same solution in PHP (but I\nreally need the JS)</li>\n</ol>\n",
            "last_activity_date": 1335937545,
            "question_id": 1019997,
            "score": 12,
            "tags": [
                "php",
                "javascript",
                "maps",
                "coordinates",
                "proj4js"
            ],
            "title": "Convert Lat/Longs to X/Y Co-ordinates"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>It doesn't move something automatically, but you should check out the <a href=\"http://www.phatfusion.net/googleDrive/\" rel=\"nofollow\">Google Drive</a> experiment by phatfusion. Looking at the code might help you out.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Look at exapmles of <a href=\"http://code.google.com/intl/sk-SK/apis/maps/documentation/examples/index.html\" rel=\"nofollow\">Google Maps code</a>. There are more cool examples that could help you.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Unfortunately, there is no automatic-marker-movement function in the official GMaps collection.</p>\n\n<p>However, if you have a GRoute, that would mean you have a set of points. To loop through the route steps, you could use something like this:</p>\n\n<pre><code>for (var c = 0; c &lt; yourroute.getNumSteps(); c++) { \n    yourmarker.setLatLng(yourroute.getStep(c).getLatLng());\n}\n</code></pre>\n\n<p>Of course, you'll probably want to do this asynchronously using the timers:</p>\n\n<pre><code>function moveToStep(yourmarker,yourroute,c) {\n    if {yourroute.getNumSteps() &gt; c) {\n        yourmarker.setLatLng(yourroute.getStep(c).getLatLng());\n        window.setTimeout(function(){\n            moveToStep(yourmarker,yourroute,c+1);\n        },500);\n    }\n}\n\nmoveToStep(marker,route,0);\n</code></pre>\n\n<p>For even smoother movement, you could interpolate the points from those you already have.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>A pretty cool example is here:</p>\n\n<p><a href=\"http://www.kmcgraphics.com/google/\">http://www.kmcgraphics.com/google/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Hope this will help you here is a button and when you click on them marker move from source to destination route.\nsetRoutes method is use for set the route of marker.</p>\n\n<pre><code>function setRoutes(){   \n\n    var directionsDisplay = new Array();\n\n    for (var i=0; i&lt; startLoc.length; i++){\n\n    var rendererOptions = {\n        map: map,\n        suppressMarkers : true,\n        preserveViewport: true\n    }\n    directionsService = new google.maps.DirectionsService();\n\n    var travelMode = google.maps.DirectionsTravelMode.DRIVING;  \n\n    var request = {\n        origin: startLoc[i],\n        destination: endLoc[i],\n        travelMode: travelMode\n    };  \n\n        directionsService.route(request,makeRouteCallback(i,directionsDisplay[i]));\n\n    } \n</code></pre>\n\n<p>Make route after setting them.</p>\n\n<pre><code>function makeRouteCallback(routeNum,disp){\n        if (polyline[routeNum] &amp;&amp; (polyline[routeNum].getMap() != null)) {\n         startAnimation(routeNum);\n         return;\n        }\n        return function(response, status){\n\n          if (status == google.maps.DirectionsStatus.OK){\n\n            var bounds = new google.maps.LatLngBounds();\n            var route = response.routes[0];\n            startLocation[routeNum] = new Object();\n            endLocation[routeNum] = new Object();\n\n\n            polyline[routeNum] = new google.maps.Polyline({\n            path: [],\n            strokeColor: '#FFFF00',\n            strokeWeight: 3\n            });\n\n            poly2[routeNum] = new google.maps.Polyline({\n            path: [],\n            strokeColor: '#FFFF00',\n            strokeWeight: 3\n            });     \n\n\n            // For each route, display summary information.\n            var path = response.routes[0].overview_path;\n            var legs = response.routes[0].legs;\n\n\n            disp = new google.maps.DirectionsRenderer(rendererOptions);     \n            disp.setMap(map);\n            disp.setDirections(response);\n\n\n            //Markers               \n            for (i=0;i&lt;legs.length;i++) {\n              if (i == 0) { \n                startLocation[routeNum].latlng = legs[i].start_location;\n                startLocation[routeNum].address = legs[i].start_address;\n                // marker = google.maps.Marker({map:map,position: startLocation.latlng});\n                marker[routeNum] = createMarker(legs[i].start_location,\"start\",legs[i].start_address,\"green\");\n              }\n              endLocation[routeNum].latlng = legs[i].end_location;\n              endLocation[routeNum].address = legs[i].end_address;\n              var steps = legs[i].steps;\n\n              for (j=0;j&lt;steps.length;j++) {\n                var nextSegment = steps[j].path;                \n                var nextSegment = steps[j].path;\n\n                for (k=0;k&lt;nextSegment.length;k++) {\n                    polyline[routeNum].getPath().push(nextSegment[k]);\n                    //bounds.extend(nextSegment[k]);\n                }\n\n              }\n            }\n\n         }       \n\n         polyline[routeNum].setMap(map);\n         //map.fitBounds(bounds);\n         startAnimation(routeNum);  \n\n    } // else alert(\"Directions request failed: \"+status);\n\n  }\n\n}\n</code></pre>\n\n<p>At last we call start animation function</p>\n\n<pre><code>function startAnimation(index) {\n        if (timerHandle[index]) clearTimeout(timerHandle[index]);\n        eol[index]=polyline[index].Distance();\n        map.setCenter(polyline[index].getPath().getAt(0));\n\n        poly2[index] = new google.maps.Polyline({path: [polyline[index].getPath().getAt(0)], strokeColor:\"#FFFF00\", strokeWeight:3});\n\n        timerHandle[index] = setTimeout(\"animate(\"+index+\",50)\",2000);  // Allow time for the initial map display\n}\n</code></pre>\n\n<p>You can be found full code on <strong><a href=\"http://geekonjava.blogspot.com/2014/10/how-to-make-animated-moving-marker-on.html\" rel=\"nofollow\">GeekOnJava</a></strong> blog and copy that code and run them and output on <strong><a href=\"https://www.youtube.com/watch?v=zbr-F9wVqgU\" rel=\"nofollow\">youtube</a></strong>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have written a small application for a handheld device using JavaScript and Google Maps API's, now II need to move my marker icon anywhere on the map along a route using a timer function. I have a man icon and I need to move it automatically on the map. How can I do this?</p>\n",
            "last_activity_date": 1413204566,
            "question_id": 665193,
            "score": 11,
            "tags": [
                "javascript",
                "google-maps",
                "animation",
                "handheld"
            ],
            "title": "How to animate a custom Google Maps marker along a route?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>This is a warning that will go away once Express updates to use Connect 3.0 - as a temporary fix, follow the instructions at the top of <a href=\"https://github.com/senchalabs/connect/wiki/Connect-3.0\">https://github.com/senchalabs/connect/wiki/Connect-3.0</a>.  Specifically, find this line in your app:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.use(express.bodyParser());\n</code></pre>\n\n<p>And replace it with the following (this is what <code>bodyParser</code> will be in 3.0):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.use(express.json());\napp.use(express.urlencoded());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 165
                },
                {
                    "body": "<p>i'm responsible for this deprecation notice. did you read the wiki? <a href=\"https://github.com/senchalabs/connect/wiki/Connect-3.0\">https://github.com/senchalabs/connect/wiki/Connect-3.0</a></p>\n\n<p>step 1: use each parser directly instead of <code>app.use(express.bodyParser());</code></p>\n\n<pre><code>app.use(express.json());\napp.use(express.urlencoded());\n</code></pre>\n\n<p>step 2: use a different multipart parser, for e.g: connect-multiparty can be used</p>\n\n<pre><code>app.use(require('connect-multiparty')())\n</code></pre>\n\n<p>work on connect 3 and express 4 hasn't begun yet because node 0.12 is taking a while to be released. there's nothing to update, yet.</p>\n",
                    "is_accepted": false,
                    "score": 55
                },
                {
                    "body": "<p>since express is just a wrapper to connect, i suggest using connect directly.</p>\n\n<p>so instead of:\n<code>app.use(express.bodyParser());</code></p>\n\n<p>use:</p>\n\n<pre><code>connect = require('connect');\napp.use(connect.json());\napp.use(connect.urlencoded());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm a node.js developer who creates web apps using express.js.\nBy now, my problem is:</p>\n\n<p>Whenever I create an app on my computer, npm install its stuff and run it (with node app.js and nodemon) I get this message in the console:</p>\n\n<pre><code>connect.multipart() will be removed in connect 3.0\nvisit https://github.com/senchalabs/connect/wiki/Connect-3.0 for alternatives\nconnect.limit() will be removed in connect 3.0\nExpress server listening on port 3000\n</code></pre>\n\n<p>The app works, that's fine. But when I clone an app created in other computer I don't get that message, so I'm supposing I have something outdated in my computer.</p>\n\n<p>I went to the site mentioned in the message and confirmed my speculations. That is a deprecation warning. However, I've updated node and npm and globally express but I still getting the note. </p>\n\n<p>My problem is, therefore: I don't know what do I need to update in order to get rid of the deprecation notes because they're freaking me out. </p>\n\n<p>I hope someone can help me. \nThanks a lot. </p>\n",
            "last_activity_date": 1394779385,
            "question_id": 19581146,
            "score": 71,
            "tags": [
                "javascript",
                "node.js",
                "express",
                "connect",
                "node.js-connect"
            ],
            "title": "How to get rid of Connect 3.0 deprecation alert?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p><strong>Always</strong> use the <strong><a href=\"http://api.jquery.com/prop/\"><code>prop()</code></a></strong> method to enable or disable elements when using jQuery (see below for why).</p>\n\n<p>In your case, it would be:</p>\n\n<pre><code>$(\"#edit\").click(function(event){\n   event.preventDefault();\n   $('.inputDisabled').prop(\"disabled\", false); // Element(s) are now enabled.\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/xPEK4/\">jsFiddle example here.</a></p>\n\n<hr>\n\n<blockquote>\n  <p>Why use <code>prop()</code> when you could use <code>attr()</code>/<code>removeAttr()</code> to do this?</p>\n</blockquote>\n\n<p>Basically, <code>prop()</code> should be used when getting or setting <em>properties</em> (such as <code>autoplay</code>, <code>checked</code>, <code>disabled</code> and <code>required</code> amongst others). </p>\n\n<p>By using <code>removeAttr()</code>, you are completely removing the <code>disabled</code> attribute itself - while <code>prop()</code> is merely setting the property's underlying boolean value to false. </p>\n\n<p>While what you want to do <em>can</em> be done using <code>attr()</code>/<code>removeAttr()</code>, it doesn't mean it <em>should</em> be done (and can cause strange/problematic behaviour, as in this case).</p>\n\n<p>The following extracts (taken from the <a href=\"http://api.jquery.com/prop/\">jQuery documentation for prop()</a>) explain these points in greater detail:</p>\n\n<blockquote>\n  <p>\"The difference between attributes and properties can be important in\n  specific situations. Before jQuery 1.6, the <code>.attr()</code> method sometimes\n  took property values into account when retrieving some attributes,\n  which could cause inconsistent behavior. As of jQuery 1.6, the <code>.prop()</code>\n  method provides a way to explicitly retrieve property values, while\n  <code>.attr()</code> retrieves attributes.\"</p>\n  \n  <p>\"Properties generally affect the dynamic state of a DOM element without\n  changing the serialized HTML attribute. Examples include the <code>value</code>\n  property of input elements, the <code>disabled</code> property of inputs and\n  buttons, or the <code>checked</code> property of a checkbox. The <code>.prop()</code> method\n  should be used to set <code>disabled</code> and <code>checked</code> instead of the <code>.attr()</code>\n  method. The <code>.val()</code> method should be used for getting and setting\n  <code>value</code>.\"</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<p>Use like this,</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;input type=\"text\" disabled=\"disabled\" class=\"inputDisabled\" value=\"\"&gt;\n\n&lt;div id=\"edit\"&gt;edit&lt;/div&gt;\n</code></pre>\n\n<p><strong>JS:</strong></p>\n\n<pre><code> $('#edit').click(function(){ // click to\n            $('.inputDisabled').attr('disabled',false); // removing disabled in this class\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>&lt;input type=\"text\" disabled=\"disabled\" class=\"inputDisabled\" value=\"\"&gt;\n\u200b&lt;button id=\"edit\"&gt;Edit&lt;/button&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\n$(\"#edit\").click(function(event){\n    event.preventDefault();\n    $('.inputDisabled').removeAttr(\"disabled\")\n});\u200b\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/ZwHfY/\">http://jsfiddle.net/ZwHfY/</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I think you are trying to <strong>toggle</strong> the disabled state, in witch case you should use this (from <a href=\"http://stackoverflow.com/questions/11903293/toggle-disabled-attribute-in-jquery\">this question</a>):</p>\n\n<pre><code>$(\".inputDisabled\").prop('disabled', function (_, val) { return ! val; });\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/ZwHfY/1/\" rel=\"nofollow\">Here is a working fiddle.</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Thought this you can easily setup  </p>\n\n<pre><code>$(function(){\n$(\"input[name^=radio_share]\").click\n(\n    function()\n    {\n        if($(this).attr(\"id\")==\"radio_share_dependent\")\n        {\n            $(\".share_dependent_block input, .share_dependent_block select\").prop(\"disabled\",false);   \n        }\n        else\n        {\n            $(\".share_dependent_block input, .share_dependent_block select\").prop(\"disabled\",true);   \n        }\n    }\n );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>to remove disabled attribute use,</p>\n\n<pre><code> $(\"#elementID\").removeAttr('disabled');\n</code></pre>\n\n<p>and to add disabled attribute use,</p>\n\n<pre><code>$(\"#elementID\").prop(\"disabled\", true);\n</code></pre>\n\n<p>Enjoy :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have to disable inputs at first and then on click of a link to enable them.</p>\n\n<p>This is what I have tried so far, but it doesn't work:</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;input type=\"text\" disabled=\"disabled\" class=\"inputDisabled\" value=\"\"&gt;\n</code></pre>\n\n<p><strong>jQuery:</strong></p>\n\n<pre><code>$(\"#edit\").click(function(event){\n   event.preventDefault();\n   $('.inputDisabled').removeAttr(\"disabled\")\n});\n</code></pre>\n\n<p>This shows me <code>true</code> and then <code>false</code> but nothing changes for the inputs:</p>\n\n<pre><code>$(\"#edit\").click(function(event){\n   alert('');\n   event.preventDefault();\n   alert($('.inputDisabled').attr('disabled'));\n   $('.inputDisabled').removeAttr(\"disabled\");\n   alert($('.inputDisabled').attr('disabled'));\n});\n</code></pre>\n",
            "last_activity_date": 1421850915,
            "question_id": 13626517,
            "score": 62,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Remove disabled attribute using JQuery?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>If you're not doing the else, why not do:</p>\n\n<pre><code>if (x==2) doSomething();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Using <code>null</code> is fine for one of the branches of a ternary expression. And a ternary expression  is fine as a statement in Javascript.</p>\n\n<p>As a matter of style, though, if you have in mind invoking a procedure, it's clearer to write this using if..else:</p>\n\n<pre><code>if (x==2) doSomething;\nelse doSomethingElse\n</code></pre>\n\n<p>or, in your case,</p>\n\n<pre><code>if (x==2) doSomething;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Technically, putting null or 0, or just some random <strong>value</strong> there works (since you are not using the return value). However, why are you using this construct instead of the <code>if</code> construct? It is less obvious what you are trying to do when you write code this way, as you may confuse people with the no-op (null in your case).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>What you have is a fairly unusual use of the <a href=\"http://en.wikipedia.org/wiki/Ternary_operation\">ternary operator</a>. Usually it is used as an expression, not a statement, inside of some other operation, e.g.:</p>\n\n<pre><code>var y = (x == 2 ? \"yes\" : \"no\");\n</code></pre>\n\n<p>So, for readability (because what you are doing is unusual), and because it avoids the \"else\" that you don't want, I would suggest:</p>\n\n<pre><code>if (x==2) doSomething();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 272
                },
                {
                    "body": "<p>This is also an option:</p>\n\n<pre><code>x == 2 &amp;&amp; dosomething();\n</code></pre>\n\n<p><code>dosomething()</code> will only be called if <code>x == 2</code>. This is called <a href=\"http://www.openjs.com/articles/syntax/short_circuit_operators.php\">Short-circuiting</a>.</p>\n\n<p>It is not commonly used in cases like this and you really shouldn't write code like this. I encourage this approach instead:</p>\n\n<pre><code>if(x == 2) { dosomething(); }\n</code></pre>\n\n<p>You should write readable code at all times; if you are worried about file size, just create a minified version of it with help of one of the thousands of JS compressors. (I recommend Google's <a href=\"http://closure-compiler.appspot.com/home\">Closure Compiler</a>)</p>\n",
                    "is_accepted": true,
                    "score": 68
                }
            ],
            "body": "<p>Can I write the 'if else' shorthand without the else? </p>\n\n<p>eg:</p>\n\n<pre><code>var x=1;\n\nx==2? dosomething:doNothingButContinueCode;   \n</code></pre>\n\n<p>I've noticed putting 'null' for the else works but I have no idea why or if that's a good idea. </p>\n\n<p>EDIT: Some of you seem bemused why I'd bother trying this. Rest assured it's purely out of curiosity. I like messing around with js.  </p>\n",
            "last_activity_date": 1419965619,
            "question_id": 11069278,
            "score": 57,
            "tags": [
                "javascript",
                "shorthand"
            ],
            "title": "Javascript if else shorthand"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You're more or less correct except that what you're referring to as a \"hash\" is actually just shorthand syntax for an Object.</p>\n\n<p>In the first example, <em>a</em> and <em>b</em> both refer to the same object.  In the second example, you change <em>a</em> to refer to something else.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Hashes or arrays are considered \"objects\" in Javascript, hence the reference behavior.</p>\n\n<p><em>Edit: Kevin beat me to it.</em></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You are setting a to point to a new string object, while b keeps pointing to the old string object.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In the first case you change some property of the object contained in the variable, in the second case you assign a new value to the variable. That are fundamentally different things. The variables <code>a</code> and <code>b</code> are not somehow magically linked by the first assignment, they just contain the same object. That's also the case in the second example, until you assign a new value to the <code>b</code> variable.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In the first example, you are setting a property of an existing object.  In the second example, you are assigning a brand new object.</p>\n\n<pre><code>a = b = {};\n</code></pre>\n\n<p><code>a</code> and <code>b</code> are now pointers to the same object.  So when you do:</p>\n\n<pre><code>a.foo = 'bar';\n</code></pre>\n\n<p>It sets <code>b.foo</code> as well since <code>a</code> and <code>b</code> point to the same object.</p>\n\n<p><em>However!</em></p>\n\n<p>If you do this instead:</p>\n\n<pre><code>a = 'bar';\n</code></pre>\n\n<p>you are saying that <code>a</code> points to a different object now.  This has no effect on what <code>a</code> pointed to before.</p>\n\n<p>In javascript, assigning a variable and assigning a property are 2 different operations.  It's best to think of variables as pointers to objects, and when you assign directly to a variable, you are not modifying any objects, merely repointing your variable to a different object.</p>\n\n<p>But assigning a property, like <code>a.foo</code>, will modify the object that <code>a</code> points to.  This, of course, also modifies all other references that point to this object simply because they all point to the same object.</p>\n",
                    "is_accepted": true,
                    "score": 53
                },
                {
                    "body": "<p>The difference is between simple types and objects.</p>\n\n<p>Anything that's an object (like an array or a function) is passed by reference.</p>\n\n<p>Anything that's a simple type (like a string or a number) is copied.</p>\n\n<p>I always have a copyArray function handy so I can be sure I'm not creating a bunch of aliases to the same array.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your question has already been satisfyingly answered by Squeegy - it has nothing to do with objects vs. primitives, but with reassignment of variables vs. setting properties in the same referenced object.</p>\n\n<p>There seems to be a lot of confusion about JavaScript types in the answers and comments, so here's a small introduction to JavaScript's type system:</p>\n\n<p>In JavaScript, there are two fundamentally different kinds of values: primitives and objects (and there is no thing like a 'hash').</p>\n\n<p>Strings, numbers and booleans as well as <code>null</code> and <code>undefined</code> are primitives, objects are everything which can have properties. Even arrays and functions are regular objects and therefore can hold arbitrary properties. They just differ in the internal [[Class]] property (functions additionally have a property called [[Call]] and [[Construct]], but hey, that's details).</p>\n\n<p>The reason that primitive values may behave like objects is because of autoboxing, but the primitives themselves can't hold any properties.</p>\n\n<p>Here is an example:</p>\n\n<pre><code>var a = 'quux';\na.foo = 'bar';\ndocument.writeln(a.foo);\n</code></pre>\n\n<p>This will output <code>undefined</code>: <code>a</code> holds a primitive value, which gets promoted to an object when assigning the property <code>foo</code>. But this new object is immediately discarded, so the value of <code>foo</code> is lost.</p>\n\n<p>Think of it like this:</p>\n\n<pre><code>var a = 'quux';\nnew String(a).foo = 'bar'; // we never save this new object anywhere!\ndocument.writeln(new String(a).foo); // a completly new object gets created\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>So I was playing around the other day just to see exactly how mass assignment works in JavaScript.</p>\n\n<p>First I tried this example in the console:</p>\n\n<pre><code>a = b = {};\na.foo = 'bar';\nalert(b.foo);\n</code></pre>\n\n<p>The result was \"bar\" being displayed in an alert. That is fair enough, <code>a</code> and <code>b</code> are really just aliases to the same object. Then I thought, how could I make this example simpler.</p>\n\n<pre><code>a = b = 'foo';\na = 'bar';\nalert(b);\n</code></pre>\n\n<p>That is pretty much the same thing, isn't it? Well this time, it returns <code>foo</code> not <code>bar</code> as I would expect from the behaviour of the first example.</p>\n\n<p>Why does this happen?</p>\n\n<p><strong>N.B.</strong> This example could be simplified even more with the following code:</p>\n\n<pre><code>a = {};\nb = a;\na.foo = 'bar';\nalert(b.foo);\n\na = 'foo';\nb = a;\na = 'bar';\nalert(b);\n</code></pre>\n\n<p>(I suspect that JavaScript treats primitives such as strings and integers differently to hashes. Hashes return a pointer while \"core\" primitives return a copy of themselves)</p>\n",
            "last_activity_date": 1327629310,
            "question_id": 509579,
            "score": 44,
            "tags": [
                "javascript"
            ],
            "title": "How does variable assignment work in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can get the device screen width via the screen.width property.<br/>\nSometimes it's also useful to use window.innerWidth (not typically found on mobile devices) instead of screen width when dealing with desktop browsers where the window size is often less than the device screen size.</p>\n\n<p>Typically, when dealing with mobile devices AND desktop browsers I use the following:</p>\n\n<pre><code> var width = (window.innerWidth &gt; 0) ? window.innerWidth : screen.width;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 94
                },
                {
                    "body": "<p>One issue with Bryan Rieger's useful answer is that on high-density displays, Apple devices report screen.width in dips, while Android devices report it in physical pixels. (See <a href=\"http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html\">http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html</a> .) I suggest using <code>if (window.matchMedia('(max-device-width: 960px)').matches) {}</code> on browsers supporting matchMedia.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I just had this idea, so maybe it's shortsighted, but it seems to work well and might be the most consistent between your CSS and JS.</p>\n\n<p>In your CSS you set the max-width value for html based on the @media screen value:</p>\n\n<pre><code>@media screen and (max-width: 480px) and (orientation: portrait){\n\n    html { \n        max-width: 480px;\n    }\n\n    ... more styles for max-width 480px screens go here\n\n}\n</code></pre>\n\n<p>Then, using JS (probably via a framework like JQuery), you would just check the max-width value of the html tag:</p>\n\n<pre><code>maxwidth = $('html').css('max-width');\n</code></pre>\n\n<p>Now you can use this value to make conditional changes:</p>\n\n<pre><code>If (maxwidth == '480px') { do something }\n</code></pre>\n\n<p>If putting the max-width value on the html tag seems scary, then maybe you can put on a different tag, one that is only used for this purpose. For my purpose the html tag works fine and doesn't affect my markup.</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p><strong>Is there a way to get the users device width, as opposed to viewport width, using javascript?</strong> </p>\n\n<p>CSS media queries offer this, as I can say</p>\n\n<pre><code>@media screen and (max-width:640px) {\n    /* ... */\n}\n</code></pre>\n\n<p>and </p>\n\n<pre><code>@media screen and (max-device-width:960px) {\n    /* ... */\n}\n</code></pre>\n\n<p>This is useful if I'm targeting smartphones in landscape orientation. For example, on iOS a declaration of  <code>max-width:640px</code> will target both landscape and portrait modes, even on an iPhone 4. This is not the case for Android, as far as I can tell, so using device-width in this instance successfully targets both orientations, without targeting desktop devices.</p>\n\n<p><strong>However</strong>, if I'm invoking a javascript binding based on device width, I appear to be limited to testing the viewport width, which means an extra test as in the following,</p>\n\n<pre><code>if ($(window).width() &lt;= 960 &amp;&amp; $(window).height &lt;= 640) { /* ... */ }\n</code></pre>\n\n<p>This doesn't seem elegant to me, given the hint that device width is available to css.</p>\n",
            "last_activity_date": 1361207803,
            "question_id": 6850164,
            "score": 42,
            "tags": [
                "javascript",
                "css",
                "media-queries"
            ],
            "title": "Get the device width in javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>The accepted answer was fundamentally flawed, it has since been deleted. The correct answer is:</p>\n\n<pre><code>function scrolled(e) {\n  if (myDiv.offsetHeight + myDiv.scrollTop &gt;= myDiv.scrollHeight) {\n    scrolledToBottom(e);\n  }\n}\n</code></pre>\n\n<p>Tested this in Firefox, Chrome and Opera. It works.</p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>I could not get either of the above answers to work so here is a third option that works for me! (This is used with jQuery)</p>\n\n<pre><code>if (($(window).innerHeight() + $(window).scrollTop()) &gt;= $(\"body\").height()) {\n    //do stuff\n}\n</code></pre>\n\n<p>Hope this helps anyone!</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This worked for me: </p>\n\n<pre><code>$(window).scroll(function() {\n  buffer = 40 // # of pixels from bottom of scroll to fire your function. Can be 0\n  if ($(\".myDiv\").prop('scrollHeight') - $(\".myDiv\").scrollTop() &lt;= $(\".myDiv\").height() + buffer )   {\n    doThing();\n  }\n});\n</code></pre>\n\n<p>Must use jQuery 1.6 or higher</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found an alternative that works.</p>\n\n<p>None of these answers worked for me (currently testing in FireFox 22.0), and after a lot of research I found, what seems to be, a much cleaner and straight forward solution.</p>\n\n<p>Implemented solution:</p>\n\n<pre><code>function IsScrollbarAtBottom() {\n    var documentHeight = $(document).height();\n    var scrollDifference = $(window).height() + $(window).scrollTop();\n    return (documentHeight == scrollDifference);\n}\n</code></pre>\n\n<p>Resource: <a href=\"http://jquery.10927.n7.nabble.com/How-can-we-find-out-scrollbar-position-has-reached-at-the-bottom-in-js-td145336.html\" rel=\"nofollow\">http://jquery.10927.n7.nabble.com/How-can-we-find-out-scrollbar-position-has-reached-at-the-bottom-in-js-td145336.html</a></p>\n\n<p>Regards</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>OK Here is a Good And Proper Solution</p>\n\n<p>You have a Div call with an ID \"myDiv\"</p>\n\n<p>so the function goes.</p>\n\n<pre><code>function GetScrollerEndPoint()\n{\n   var scrollHeight = $(\"#myDiv\").prop('scrollHeight');\n   var divHeight = $(\"#myDiv\").height();\n   var scrollerEndPoint = scrollHeight - divHeight;\n\n   var divScrollerTop =  $(\"#myDiv\").scrollTop();\n   if(divScrollerTop === scrollerEndPoint)\n   {\n       //Your Code \n       //The Div scroller has reached the bottom\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Take a look at this example: <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollHeight\" rel=\"nofollow\">MDN Element.scrollHeight</a></strong></p>\n\n<p>I recommend that check out this example: <strong><a href=\"http://stackoverflow.com/a/24815216/2247494\">stackoverflow.com/a/24815216...</a></strong> which implements a cross-browser handling for the scroll action.</p>\n\n<p>You may use the following snippet:</p>\n\n<pre><code>//attaches the \"scroll\" event\n$(window).scroll(function (e) {\n    var target = e.currentTarget,\n        scrollTop = target.scrollTop || window.pageYOffset,\n        scrollHeight = target.scrollHeight || document.body.scrollHeight;\n    if (scrollHeight - scrollTop === $(target).innerHeight()) {\n      console.log(\"\u25ba End of scroll\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>//Since innerHeight doesn't work in some old IE versions, client heightHeight can be used:</p>\n\n<pre><code>$(window).scroll(function (e){\n    var body = document.body;    \n    //alert (body.clientHeight);\n    var scrollTop = this.pageYOffset || body.scrollTop;\n    if (body.scrollHeight - scrollTop === parseFloat(body.clientHeight)) {\n        loadMoreNews();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I created a event based solution based on Bjorn Tipling's answer:</p>\n\n<pre><code>(function(doc){\n    'use strict';\n\n    window.onscroll = function (event) {\n        if (isEndOfElement(doc.body)){\n            sendNewEvent('end-of-page-reached');\n        }\n    };\n\n    function isEndOfElement(element){\n        //visible height + pixel scrolled = total height \n        return element.offsetHeight + element.scrollTop &gt;= element.scrollHeight;\n    }\n\n    function sendNewEvent(eventName){\n        var event = doc.createEvent('Event');\n        event.initEvent(eventName, true, true);\n        doc.dispatchEvent(event);\n    }\n}(document));\n</code></pre>\n\n<p>And you use the event like this:</p>\n\n<pre><code>document.addEventListener('end-of-page-reached', function(){\n    console.log('you reached the end of the page');\n});\n</code></pre>\n\n<p>BTW: you need to add this CSS for javascript to know how long the page is     </p>\n\n<pre><code>html, body: {\n    height:100%\n}\n</code></pre>\n\n<p>Demo: <a href=\"http://plnkr.co/edit/CCokKfB16iWIMddtWjPC?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/CCokKfB16iWIMddtWjPC?p=preview</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have div layer with <em>overflow</em> set to <em>scroll</em>. </p>\n\n<p>When scrolled to the bottom of the div, return function</p>\n\n<p><br/>\n<img src=\"http://i1131.photobucket.com/albums/m541/protein-1/scroll.jpg\"/></p>\n",
            "last_activity_date": 1422273818,
            "question_id": 3962558,
            "score": 36,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "scrollbar",
                "scroll"
            ],
            "title": "javascript: detect scroll end"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Your solution works. It is quite popular in fact. </p>\n\n<p>Even Stack Overflow uses a similar method:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"http://sstatic.net/so/all.css?v=6184\"&gt; \n</code></pre>\n\n<p>Where <code>v=6184</code> is probably the SVN revision number.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The main problem with doing it this way is mainly that you will need to remember to update your version number in your code every time you make any change to your css or js files.</p>\n\n<p>A possibly better way to do it is to set a guaranteed unique parameter with each of your css or js files, like so:</p>\n\n<pre><code>&lt;script src=\"scripts/myjavascript.js?_=&lt;%=DateTime.Now.Ticks%&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;link href=\"styles/mystyle.css?_=&lt;%=DateTime.Now.Ticks%&gt;\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>This forces the files to be requested from the server every single time, which also means that your site will not be as performant upon page load, since those files will never be cached, and will use unneeded bandwidth each time.</p>\n\n<p>Essentially, if you can remember to update the version number every time a change is made, you can get away with how you're doing it.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Interestingly, this very site has issues with the approach you describe in connection with some proxy setups, even though it should be fail-safe. </p>\n\n<p>Check this <a href=\"http://meta.stackexchange.com/questions/37835/it-might-be-good-to-indicate-when-a-users-cache-needs-to-be-flushed/37838#37838\"><strong>Meta Stack Overflow</strong></a> discussion. </p>\n\n<p>So in light of that, it might make sense not to use a GET parameter to update, but the actual file name:</p>\n\n<pre><code>href=\"/css/scriptname/versionNumber.css\"\n</code></pre>\n\n<p>even though this is more work to do, as you'll have to actually create the file, or build a URL rewrite for it.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I solved this by tacking a last modified timestamp as a query parameter to the scripts.  </p>\n\n<p>I did this with an extension method, and using it in my CSHTML files.  <strong>Note:</strong> this implementation caches the timestamp for 1 minute so we don't thrash the disk quiet so much.</p>\n\n<p>Here is the extension method:</p>\n\n<pre><code> public static class JavascriptExtension {\n    public static MvcHtmlString IncludeVersionedJs(this HtmlHelper helper, string filename) {\n        string version = GetVersion(helper, filename);\n        return MvcHtmlString.Create(\"&lt;script type='text/javascript' src='\" + filename + version + \"'&gt;&lt;/script&gt;\");\n    }\n\n    private static string GetVersion(this HtmlHelper helper, string filename)\n    {\n        var context = helper.ViewContext.RequestContext.HttpContext;\n\n        if (context.Cache[filename] == null) {\n            var physicalPath = context.Server.MapPath(filename);\n            var version = \"?v=\" +\n              new System.IO.FileInfo(physicalPath).LastWriteTime\n                .ToString(\"yyyyMMddhhmmss\");\n            context.Cache.Add(physicalPath, version, null,\n              DateTime.Now.AddMinutes(1), TimeSpan.Zero,\n              CacheItemPriority.Normal, null);\n            context.Cache[filename] = version;\n            return version;\n        }\n        else {\n            return context.Cache[filename] as string;\n        }\n    }\n</code></pre>\n\n<p>And then in the CSHTML page:</p>\n\n<pre><code> @Html.IncludeVersionedJs(\"/MyJavascriptFile.js\")\n</code></pre>\n\n<p>In the rendered HTML, this appears as:</p>\n\n<pre><code> &lt;script type='text/javascript' src='/MyJavascriptFile.ks?20111129120000'&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>For ASP.NET pages I am using the following</p>\n\n<p><strong>BEFORE</strong></p>\n\n<pre><code>&lt;script src=\"/Scripts/pages/common.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><strong>AFTER (force reload)</strong></p>\n\n<pre><code> &lt;script src=\"/Scripts/pages/common.js?ver&lt;%=DateTime.Now.Ticks.ToString()%&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Adding the DateTime.Now.Ticks works very well.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>There is a simpler answer to this than the answer given by the op in the question (the approach is the same):</p>\n\n<p>Define the key in the web.config:</p>\n\n<pre><code>&lt;add key=\"VersionNumber\" value=\"06032014\"/&gt;\n</code></pre>\n\n<p>Make the call to appsettings directly from the aspx page:</p>\n\n<pre><code>&lt;link href=\"styles/navigation.css?v=&lt;%=ConfigurationManager.AppSettings(\"VersionNumber\")%&gt;\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>ASP.NET MVC will handle this for you if you use bundles for your JS/CSS. It will automatically append a version number in the form of a GUID to your bundles and only update this GUID when the bundle is updated.</p>\n\n<p>This also helps if you have a ton of JS/CSS files as it can greatly improve content load times!</p>\n\n<p><a href=\"http://www.asp.net/mvc/overview/performance/bundling-and-minification\" rel=\"nofollow\">See Here</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Some browsers cache js and css files, failing to refresh them unless you force them to.  What's the easiest way.</p>\n\n<p>I just implemented this solution that seems to work. </p>\n\n<p>Declare a version variable on your page</p>\n\n<pre><code>  public string version { get; set; }\n</code></pre>\n\n<p>Get the version number from web.config key</p>\n\n<pre><code> version = ConfigurationManager.AppSettings[\"versionNumber\"];\n</code></pre>\n\n<p>In your aspx page make the calls to javascript and stylesheets like so</p>\n\n<pre><code>&lt;script src=\"scripts/myjavascript.js?v=&lt;%=version %&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;link href=\"styles/mystyle.css?v=&lt;%=version %&gt;\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>So if you set the version = 1.1 from 1.0 in your web.config your browser will download the latest files which will hopefully save you and your users some frustration.</p>\n\n<p>Is there another solution that works better, or will this cause any unforeseen issues for a website?</p>\n",
            "last_activity_date": 1424971238,
            "question_id": 2185872,
            "score": 34,
            "tags": [
                "c#",
                ".net",
                "asp.net",
                "javascript"
            ],
            "title": "force browsers to get latest js and css files in asp.net application"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You want:</p>\n\n<pre><code>document.cookie = cookieName +\"=\" + cookieValue + \";domain=.example.com;path=/;expires=\" + myDate;\n</code></pre>\n\n<p>As per the <a href=\"http://www.ietf.org/rfc/rfc2109.txt\">RFC 2109</a>, to have a cookie available to all subdomains, you must put a <code>.</code> in front of your domain.</p>\n\n<p>Setting the path=/ will have the cookie be available within the entire specified domain(aka <code>.example.com</code>). </p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Just set the <code>domain</code> and <code>path</code> attributes on your cookie, like:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar cookieName = 'HelloWorld';\nvar cookieValue = 'HelloWorld';\nvar myDate = new Date();\nmyDate.setMonth(myDate.getMonth() + 12);\ndocument.cookie = cookieName +\"=\" + cookieValue + \";expires=\" + myDate \n                  + \";domain=.example.com;path=/\";\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 69
                }
            ],
            "body": "<p>Below is a javascript cookie that is written on the user's computer for 12 months. We have the cookie on our main domain such as example.com/index.html and should the user visit a sub domain of ours like TEST.example.com/index.html, we need to continue to identify the activity of the user across our TEST sub domains. As soon as they leave www.example.com and visit test.example.com, they are no longer flagged as \"HelloWorld\".</p>\n\n<p>Would anyone be able to help with my code to allow the cookie to be read across sub domains?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar cookieName = 'HelloWorld';\nvar cookieValue = 'HelloWorld';\nvar myDate = new Date();\nmyDate.setMonth(myDate.getMonth() + 12);\ndocument.cookie = cookieName +\"=\" + cookieValue + \";expires=\" + myDate;\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1386056820,
            "question_id": 5671451,
            "score": 29,
            "tags": [
                "javascript",
                "cookies",
                "dns"
            ],
            "title": "Creating a javascript cookie on a domain and reading it across sub domains"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>JavaScript interprets an empty string as a 0, which then fails the isNAN test. You can use parseInt on the string first which won't convert the empty string to 0. The result should then fail isNAN.</p>\n",
                    "is_accepted": true,
                    "score": 80
                },
                {
                    "body": "<p>Try using:</p>\n\n<pre><code>alert(isNaN(parseInt(\"   \")));\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>alert(isNaN(parseFloat(\"    \")));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I think it's because of Javascript's typing: <code>' '</code> is converted to zero, whereas <code>'x'</code> isn't:</p>\n\n<pre><code>alert(' ' * 1); // 0\nalert('x' * 1); // NaN\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>isNaN will always return false for a string of nothing but spaces.  I would suggest doing string trimming before evaluation.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm not sure <em>why</em>, but to get around the problem you could always trim whitespace before checking.  You probably want to do that anyway.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To understand it better, please open <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">Ecma-Script spec pdf</a> on page 43 \"ToNumber Applied to the String Type\"</p>\n\n<p>if a string has a numerical syntax, which can contain any number of white-space characters, it can be converted to Number type. Empty string evaluates to 0. Also the string 'Infinity' should give</p>\n\n<pre><code>isNaN('Infinity'); // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You may find this surprising or maybe not, but here is some test code to show you the wackyness of the JavaScript engine.</p>\n\n<pre><code>document.write(isNaN(\"\")) // false\ndocument.write(isNaN(\" \"))  // false\ndocument.write(isNaN(0))  // false\ndocument.write(isNaN(null)) // false\ndocument.write(isNaN(false))  // false\ndocument.write(\"\" == false)  // true\ndocument.write(\"\" == 0)  // true\ndocument.write(\" \" == 0)  // true\ndocument.write(\" \" == false)  // true\ndocument.write(0 == false) // true\ndocument.write(\" \" == \"\") // false\n</code></pre>\n\n<p>so this means that</p>\n\n<pre><code>\" \" == 0 == false\n</code></pre>\n\n<p>and </p>\n\n<pre><code>\"\" == 0 == false\n</code></pre>\n\n<p>but </p>\n\n<pre><code>\"\" != \" \"\n</code></pre>\n\n<p>Have fun :)</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>If you would like to implement an accurate isNumber function, here is one way to do it from <em>Javascript: The Good Parts</em> by Douglas Crockford [page 105]</p>\n\n<pre><code>var isNumber = function isNumber(value) {\n   return typeof value === 'number' &amp;&amp; \n   isFinite(value);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I suggest you to use the following function if you really want a proper check if it is an integer:</p>\n\n<pre><code>function isInteger(s)\n{\n   return Math.ceil(s) == Math.floor(s);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This function seemed to work in my tests</p>\n\n<pre><code>function isNumber(s) {\n    if (s === \"\" || s === null) {\n        return false;\n    } else {\n        var number = parseInt(s);\n        if (number == 'NaN') {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>What about </p>\n\n<pre><code>function isNumberRegex(value) {        \n    var pattern = /^[-+]?\\d*\\.?\\d*$/i;\n    var match = value.match(pattern);\n    return value.length &gt; 0 &amp;&amp; match != null;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The function <code>isNaN(\"\")</code> performs a <strong>String to Number <em>type coercion</em></strong></p>\n\n<p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.3\" rel=\"nofollow\">ECMAScript 3-5 defines the following return values for the typeof operator:</a></p>\n\n<ul>\n<li>undefined</li>\n<li>object (null, objects, arrays)</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>function</li>\n</ul>\n\n<p>Better to wrap our test in a function body:</p>\n\n<pre><code>function isNumber (s) {\n    return typeof s == 'number'? true\n           : typeof s == 'string'? (s.trim() === ''? false : !isNaN(s))\n           : (typeof s).match(/object|function/)? false\n           : !isNaN(s)\n}\n</code></pre>\n\n<p>This function is not intented to test variable <em>type</em>, instead it tests the <em>coerced value</em>. For instance, booleans and strings are coerced to numbers, so perhaps you may want to call this function as <code>isNumberCoerced()</code></p>\n\n<p>if there's no need to test for <em>types</em> other than <em>string</em> and <em>number</em>, then the following snippet might be used as part of some condition:</p>\n\n<pre><code>if (!isNaN(s) &amp;&amp; s.toString().trim()!='') // 's' can be boolean, number or string\n    alert(\"s is a number\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Actually JavaScript doesn't recognize space <code>\" \"</code> you should use the non breaking space  <code>&amp;nbsp;</code> instead.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a quick question (I hope!).  In JS, why does <code>isNaN(\"   \")</code> evaluate to false, but <code>isNaN(\"  x\")</code> evaluate to true?</p>\n\n<p>I'm performing numerical operations on a text input field, and am checking if the field is null, \"\", or NaN.  When someone types a handful of spaces into the field, my validation fails on all three, and I'm confused as to why it gets past the isNAN check.</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1401281632,
            "question_id": 825402,
            "score": 76,
            "tags": [
                "javascript",
                "nan",
                "mean"
            ],
            "title": "Why does isNaN(&quot; &quot;) equal false"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<pre><code>var intRegex = /^\\d+$/;\nif(intRegex.test(someNumber)) {\n   alert('I am an int');\n   ...\n}\n</code></pre>\n\n<p>That will absolutely, positively fail if the user enters anything other than an nonnegative integer.</p>\n",
                    "is_accepted": false,
                    "score": 127
                },
                {
                    "body": "<p>use isNaN(n)</p>\n\n<p>i.e.</p>\n\n<pre><code>if(isNaN(intValue))</code></pre>\n\n<p>in place of </p>\n\n<pre><code>if (intValue == Number.NaN)</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>For real int checking, use this:</p>\n\n<pre><code>function isInt(value) { \n    return !isNaN(parseInt(value,10)) &amp;&amp; (parseFloat(value,10) == parseInt(value,10)); \n}\n</code></pre>\n\n<p>The problem with many int checks is that they return 'false' for 1.0, which is a valid integer. This method checks to make sure that the value of float and int parsing are equal, so for #.00 it will return true.</p>\n\n<p>UPDATE:</p>\n\n<p>Two issues have been discussed in the comments I'll add to the answer for future readers:</p>\n\n<ul>\n<li>First, when parsing string values that use a comma to indicate the decimal place, this method doesn't work. (Not surprising, how could it? Given \"1,001\" for example in the US it's an integer while in Germany it isn't.)</li>\n<li>Second, the behavior of parseFloat and parseInt has changed in certain browsers since this answer was written and vary by browser. ParseInt is more aggressive and will discard letters appearing in a string. This is great for getting a number but not so good for validation.</li>\n</ul>\n\n<p>My recommendation and practice to use a library like <a href=\"https://github.com/jquery/globalize\">Globalize.js</a> to parse numeric values for/from the UI rather than the browser implementation and to use the native calls only for known \"programmatically\" provided values, such as a string parsed from an XML document.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p><strong>UPDATE</strong></p>\n\n<p>I have fixed the code that had an error and added a var called <strong>key</strong> to store the key pressed code using <strong>keyCode</strong> and <strong>which</strong>, that depend of the browser.</p>\n\n<pre><code>var key = e.which || e.keyCode;\n</code></pre>\n\n<p>Thanks Donald.McLean :)</p>\n\n<hr>\n\n<p>If you want to check if you are writing numbers while typing (and avoid writing other characters into your input field), you can use this simple function and you can define the elements allowed (this include whatever you want to filter). In this way you can choose not only integers but for example a certain group of characters. The example is based in jQuery to attach it to an input field.</p>\n\n<pre><code>$('#myInputField').keypress(function(e)\n{\n    var key = e.which || e.keyCode;\n\n    if (!(key &gt;= 48 &amp;&amp; key &lt;= 57) &amp;&amp; // Interval of values (0-9)\n         (key !== 8) &amp;&amp;              // Backspace\n         (key !== 9) &amp;&amp;              // Horizontal tab\n         (key !== 37) &amp;&amp;             // Percentage\n         (key !== 39) &amp;&amp;             // Single quotes (')\n         (key !== 46))               // Dot\n    {\n        e.preventDefault();\n        return false;\n    }\n});\n</code></pre>\n\n<p>If you use other key than the defined, it won't appear into the field. And because Angular.js is getting strong these days. this is the directive you can create to do this in any field in your web app:</p>\n\n<pre><code>myApp.directive('integer', function()\n{\n    return function (scope, element, attrs)\n    {\n        element.bind('keydown', function(e)\n        {\n            var key = e.which || e.keyCode;\n\n            if (!(key &gt;= 48 &amp;&amp; key &lt;= 57) &amp;&amp; // Interval (0-9)\n                 (key !== 8) &amp;&amp;              // Backspace\n                 (key !== 9) &amp;&amp;              // Horizontal tab\n                 (key !== 37) &amp;&amp;             // Percentage\n                 (key !== 39) &amp;&amp;             // Single quotes (')\n                 (key !== 46))               // Dot\n            {\n                e.preventDefault();\n                return false;\n            }\n        });\n    }\n});\n</code></pre>\n\n<p>But what happens if you want to use <code>ng-repeat</code> and you need to apply this directive only in a certain number of fields. Well, you can transform the upper directive into one prepared to admit a <strong>true</strong> or <strong>false</strong> value in order to be able to decide which field will be affected by it.</p>\n\n<pre><code>myApp.directive('rsInteger', function() {\n    return {\n        restrict: 'A',\n        link: function (scope, element, attrs) {\n            if (attrs.rsInteger === 'true') {\n                element.bind('keydown', function(e)\n                {\n                    var key = e.which || e.keyCode;\n\n                    if (!(key &gt;= 48 &amp;&amp; key &lt;= 57) &amp;&amp; // Interval (0-9)\n                         (key !== 8) &amp;&amp;              // Backspace\n                         (key !== 9) &amp;&amp;              // Horizontal tab\n                         (key !== 37) &amp;&amp;             // Percentage\n                         (key !== 39) &amp;&amp;             // Single quotes (')\n                         (key !== 46))               // Dot\n                    {\n                        e.preventDefault();\n                        return false;\n                    }\n                });\n            }\n        }\n    }\n});\n</code></pre>\n\n<p>To use this new directive you just need to do it in a input type text like this, for example:</p>\n\n<pre><code>&lt;input type=\"text\" rs-integer=\"true\"&gt;\n</code></pre>\n\n<p>Hope it helps you.</p>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>I did this to check for number and integer value</p>\n\n<pre><code>if(isNaN(field_value * 1) || (field_value % 1) != 0 ) not integer;\nelse integer;\n</code></pre>\n\n<p><em><strong>Modular Divison</em></strong></p>\n\n<p><em>Example</em> <br>\n 1. 25.5 % 1 != 0 <strong>and ,</strong> <br>\n 2. 25 % 1 == 0</p>\n\n<p>And \n    if(field_value * 1) NaN if string eg: 25,34 or abcd etc ...\n    else integer or number</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If your number is in the 32bit integer range, you could go with something like:</p>\n\n<pre><code>function isInt(x) { return \"\"+(x|0)==\"\"+x; }\n</code></pre>\n\n<p>The bitwise or operator forces conversion to signed 32bit int.\nThe string conversion on both sides ensures that true/false want be matched.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<blockquote>\n  <p>function isInt(x) {return Math.floor(x) === x;}</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You may use <code>isInteger()</code> method of <code>Number</code> object</p>\n\n<pre><code>if ( (new Number(x)).isInteger() ) {\n  // handle integer\n}\n</code></pre>\n\n<p>This method works properly if <code>x</code> is <code>undefined</code> or <code>null</code>. But it has <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Browser_compatibility\" rel=\"nofollow\">poor browser support</a> for now</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found the NaN responses lacking because they don't pick up on trailing characters (so \"123abc\" is considered a valid number) so I tried converting the string to an integer and back to a string, and ensuring it matched the original after conversion:</p>\n\n<pre><code>if (\"\" + parseInt(stringVal, 10) == stringVal) { alert(\"is valid number\"); }\n</code></pre>\n\n<p>This worked for me, up until the numbers were so large they started appearing as scientific notation during the conversion.</p>\n\n<p>...so of course this means you could enter a number in scientific notation, but checking minimum and maximum values as well would prevent that if you so desire.</p>\n\n<p>It will of course fail if you use separators (like \"1,000\" or \"1.000\" depending on your locale) - digits only allowed here.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>If (enteredAge &lt; \"1\" || enteredAge &gt; \"130\") ......\n</code></pre>\n\n<p>Simple and it works....until they develop immortality</p>\n",
                    "is_accepted": false,
                    "score": -3
                }
            ],
            "body": "<p>I have a text field that allows a user to enter their age. I am trying to do some client-side validation on this field with JavaScript. I have server-side validation already in place. However, I cannot seem to verify that the user enters an actual integer. I am currently trying the following code:</p>\n\n<pre><code>    function IsValidAge(value) {\n        if (value.length == 0) {\n            return false;\n        }\n\n        var intValue = parseInt(value);\n        if (intValue == Number.NaN) {\n            return false;\n        }\n\n        if (intValue &lt;= 0)\n        {\n            return false;\n        }\n        return true;\n    }\n</code></pre>\n\n<p>The odd thing is, I have entered individual characters into the textbox like \"b\" and this method returns true. How do I ensure that the user is only entering an integer?</p>\n\n<p>Thank you</p>\n",
            "last_activity_date": 1408716574,
            "question_id": 1019515,
            "score": 74,
            "tags": [
                "javascript"
            ],
            "title": "JavaScript - Test for an integer"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>ngClick directive (as well as all other event directives) creates <code>$event</code> variable which is available on same scope. This variable is a reference to JS <code>event</code> object and can be used to call <code>stopPropagation()</code>:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table&gt;\n  &lt;tr ng-repeat=\"user in users\" ng-click=\"showUser(user)\"&gt;\n    &lt;td&gt;{{user.firstname}}&lt;/td&gt;\n    &lt;td&gt;{{user.lastname}}&lt;/td&gt;\n    &lt;td&gt;\n      &lt;button class=\"btn\" ng-click=\"deleteUser(user.id, $index); $event.stopPropagation();\"&gt;\n        Delete\n      &lt;/button&gt;\n    &lt;/td&gt;              \n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p><kbd><a href=\"http://plnkr.co/edit/tTgu6LJkoVVahMMtHokt?p=preview\">PLUNKER</a></kbd></p>\n",
                    "is_accepted": true,
                    "score": 146
                },
                {
                    "body": "<p>An addition to Stewie's answer. In case when your callback decides whether the propagation should be stopped or not, I found it useful to pass the <code>$event</code> object to the callback:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-click=\"parentHandler($event)\"&gt;\n  &lt;div ng-click=\"childHandler($event)\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And then in the callback itself, you can decide whether the propagation of  the event should be stopped:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$scope.childHandler = function ($event) {\n  if (wanna-stop-it()) {\n    $event.stopPropagation();\n  }\n  ...\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I have a click Event on a table row and in this row there is also a delete Button with a click Event. When i click the delete button the click Event on the row is also fired. Here is my code.</p>\n\n<pre><code>    &lt;tbody&gt;\n      &lt;tr ng-repeat=\"user in users\" class=\"repeat-animation\" ng-click=\"showUser(user, $index)\"&gt;\n        &lt;td&gt;{{user.firstname}}&lt;/td&gt;\n        &lt;td&gt;{{user.lastname}}&lt;/td&gt;\n        &lt;td&gt;{{user.email}}&lt;/td&gt;\n        &lt;td&gt;&lt;button class=\"btn red btn-sm\" ng-click=\"deleteUser(user.id, $index)\"&gt;Delete&lt;/button&gt;&lt;/td&gt;              \n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n</code></pre>\n\n<p>How can I prevent that the showUser Event is fired when i click the delete Button in the table cell?</p>\n",
            "last_activity_date": 1420570762,
            "question_id": 20300866,
            "score": 70,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "AngularJS ng-click stopPropagation"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p><strong>The short answer:</strong></p>\n\n<p>Use the <code>click</code> event, which won't fire until after the value has been updated, and fires when you want it to:</p>\n\n<pre><code>&lt;label&gt;&lt;input type='checkbox' onclick='handleClick(this);'&gt;Checkbox&lt;/label&gt;\n\nfunction handleClick(cb) {\n  display(\"Clicked, new value = \" + cb.checked);\n}\n</code></pre>\n\n<p><a href=\"http://jsbin.com/ijoqep/3\">Live example</a> | <a href=\"http://jsbin.com/ijoqep/3/edit\">Source</a></p>\n\n<p><strong>The longer answer:</strong></p>\n\n<p>The <code>change</code> event handler isn't called until the <code>checked</code> state has been updated (<a href=\"http://jsbin.com/ijoqep/1\">live example</a> | <a href=\"http://jsbin.com/ijoqep/1/edit\">source</a>), but because (as Tim B\u00fcthe points out in the comments) IE doesn't fire the <code>change</code> event until the checkbox loses focus, you don't get the notification proactively. Worse, with IE if you click a <em>label</em> for the checkbox (rather than the checkbox itself) to update it, you can get the impression that you're getting the old value (try it with IE here by clicking the label: <a href=\"http://jsbin.com/ijoqep/2\">live example</a> | <a href=\"http://jsbin.com/ijoqep/2/edit\">source</a>). This is because if the checkbox has focus, clicking the label takes the focus away from it, firing the <code>change</code> event with the old value, and then the <code>click</code> happens setting the new value and setting focus back on the checkbox. Very confusing.</p>\n\n<p>But you can avoid all of that unpleasantness if you use <code>click</code> instead.</p>\n\n<p>I've used DOM0 handlers (<code>onxyz</code> attributes) because that's what you asked about, but for the record, I would generally recommend hooking up handlers in code (DOM2's <code>addEventListener</code>, or <code>attachEvent</code> in older versions of IE) rather than using <code>onxyz</code> attributes. That lets you attach multiple handlers to the same element and lets you avoid making all of your handlers global functions.</p>\n\n<hr>\n\n<p>An earlier version of this answer used this code for <code>handleClick</code>:</p>\n\n<pre><code>function handleClick(cb) {\n  setTimeout(function() {\n    display(\"Clicked, new value = \" + cb.checked);\n  }, 0);\n}\n</code></pre>\n\n<p>The goal seemed to be to allow the click to complete before looking at the value. As far as I'm aware, there's no reason to do that, and I have no idea why I did. The value is changed before the <code>click</code> handler is called. In fact, the spec is <a href=\"http://www.w3.org/TR/html5/forms.html#checkbox-state-%28type=checkbox%29\">quite clear about that</a>. The version without <code>setTimeout</code> works perfectly well in every browser I've tried (even IE6). I can only assume I was thinking about some <em>other</em> platform where the change isn't done until after the event. In any case, no reason to do that with HTML checkboxes.</p>\n",
                    "is_accepted": true,
                    "score": 133
                }
            ],
            "body": "<pre><code>&lt;input type=\"checkbox\" onclick=\"function ()\" onchange=\"function ()\" /&gt;\n</code></pre>\n\n<p>onclick and onchange is called prior to the checkbox value (ie:state) changing and in turn meaning the the checkbox.value property is always on.</p>\n\n<p>How do you determine the unchecked event/state given this behaviour?</p>\n",
            "last_activity_date": 1393917810,
            "question_id": 4471401,
            "score": 57,
            "tags": [
                "javascript",
                "html",
                "events",
                "dom",
                "checkbox"
            ],
            "title": "Getting value of HTML Checkbox from onclick/onchange events"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>console.log(element.toString()) might be your friend here...</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's one technique that I've found helpful:</p>\n\n<ul>\n<li>Open the Developer Tool Bar (hit F12)</li>\n<li>Go to the \"Script\" tab</li>\n<li>Click the \"Start Debugging\" button</li>\n<li>Next, type \"debugger\" into the console and hit enter.  This should trigger a break point.</li>\n<li>Go to the \"Watch\" sub-tab</li>\n<li>Click the row that says, \"Click to add...\" and enter a variable you'd like to examine.  Note that the variable must be globally available.</li>\n<li>At this point you should be able to examine your variable with tree-like UI</li>\n<li>Once you're done debugging click Continue button (or hit F5)</li>\n</ul>\n\n<p>Here's a screen shot that highlights some of the UI elements I mentioned:\n<img src=\"http://www.the-xavi.com/static/so-ie8-dev-tool.png\" alt=\"IE8 Developer Toolbar\"></p>\n",
                    "is_accepted": true,
                    "score": 79
                },
                {
                    "body": "<p>A bit off topic (as it won't work for DOM elements) but I've found it handy to use the <a href=\"http://msdn.microsoft.com/en-us/library/cc836459%28VS.85%29.aspx\">JSON.stringify(object</a>) to get a JSON string for the object which is pretty readable.</p>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>One suggestion is to use <a href=\"http://getfirebug.com/firebuglite#Stable\" rel=\"nofollow\">Firebug-Lite</a>:\nIt wraps console obj and you can see the result in IE like in most of the firebug console.\nHope this help.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're dealing with nasty code and console.log is not available, try this in the console:</p>\n\n<pre><code>out = []; for (i in your_object) { out.push(i) } out.join(\"\\n\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>@Chris commented @Andy's answer with the simple solution: Use <code>console.dir(myObj)</code> to get all the details printed out in the console in IE. Thanks Chris!</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I know this is a REALLY old question, but I was looking for an answer to this just now.  If it's not an absolute requirement to use the IE console (which isn't very good, IMO), then you might consider using Firebug Lite (<a href=\"http://getfirebug.com/firebuglite\" rel=\"nofollow\">http://getfirebug.com/firebuglite</a>).  It's not a perfect solution, and you may not want to push that script out to your production environment, and it's not as full featured as Firebug, but it's pretty good in a pinch when you have to much around with a low-end browser like IE.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A bit chunky but it works for DOM objects:</p>\n\n<pre><code> console.log( testNode.outerHTML.replace(testNode.innerHTML,\"\") ); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have an object I need to examine in IE8.\nI tried the developer tools and <code>console.log</code>, their Firebug equivalent.\nHowever, when I output the object to the log:</p>\n\n<pre><code>console.log(\"Element: \", element);\nconsole.log(element);\n</code></pre>\n\n<p>I only get the string</p>\n\n<pre><code>LOG: Element: [object Object]\n</code></pre>\n\n<p>instead of a clickable, examinable dump.</p>\n\n<p>Is it possible to dump an object to the Log and examine its members, like in Firebug?</p>\n\n<p>I can't use a homemade dump() function because the element I want to examine is so huge the browser will crash on me. </p>\n",
            "last_activity_date": 1408123283,
            "question_id": 1956384,
            "score": 55,
            "tags": [
                "javascript",
                "internet-explorer-8",
                "console",
                "firebug",
                "ie-developer-tools"
            ],
            "title": "How do I dump JavaScript vars in IE8?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Yes there is a difference, CSS is much faster. It may be difficult to see until you get many running at the same time or the more they do. CSS animations are limited though. In most cases they really only work off the <code>:hover</code> event. With JavaScript you can perform animations at any event: <code>click</code>, <code>mouseover</code>, <code>mousemove</code>, <code>mouseout</code>, <code>keyup</code>, <code>keydown</code>, etc.</p>\n\n<p>In my opinion jQuery is by far the best for JavaScript animations. See <a href=\"http://jqueryui.com/demos/\">jQuery Demos</a></p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>To add to Uphelix's (correct) answer: JavaScript is an interpreted language and the JS engine of the browser has to parse and execute every instruction during run-time (I know there exist JS compilers, like V8 (used in Chrome), but the principle remains the same).</p>\n\n<p>On the other hand, browsers can implement CSS transitions natively, e.g. in C/C++ or something. This code will be compiled to machine language.</p>\n\n<p>If CSS transitions are hardware accelerated or not, depends on the techniques the browser uses, the platform the browser runs on, etc.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You will notice the difference on mobile browsers (iPhone, Android, etc.).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>CSS animations have the advantage of being proceed by the browser. Fast computations and optimizations are available. In my opinion web animations performance should be looked trough a \"holistic\" point of view. After all an animation, in terms of FPS, can not be faster then the browser refresh.</p>\n\n<p>The real performance level is given by the overall UI performance. A JS and a CSS animation can look similar. However CSS animations win since they do not block the UI thread.</p>\n\n<p>Stoyan Stefanov wrote and demo how CSS animations are put out of the UI thread:\n<a href=\"http://www.phpied.com/css-animations-off-the-ui-thread/\" rel=\"nofollow\">http://www.phpied.com/css-animations-off-the-ui-thread/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm wondering is there any difference in performance of using CSS Transitions vs. any of the various JavaScript animation libraries? (<code>script.aculo.us</code>, <code>scripty2</code>, <code>jsAnim</code>, <code>MooTools</code>, <code>$fx</code>, etc).</p>\n\n<p>I've tried various tests in <em>Safari</em> and <em>Chrome</em> but I don't actually see any difference. I thought that CSS Transitions were supposed to be hardware accelerated.</p>\n\n<hr>\n\n<p><strong>Update</strong>:</p>\n\n<p>I've tried using Scriptaculous' <code>Effect.Fade</code> on 5 different DIVs (each containing a canvas with some lines). Doing the exact same thing using CSS transitions, I see absolutely no difference in performance. Both were very smooth with one DIV/Canvas, but both are very slow when I do more than 2 at a time.</p>\n\n<p>I've tried this in <em>Safari 4, 5 (OSX)</em>, <em>Google Chrome 5</em> and <em>FireFox 3.7pre</em>. Same results across the board.</p>\n\n<p>In answer to UpHelix's response, you're not simply limited to <code>hover</code>, etc. You can trigger a transition by changing any <code>transitionable</code> style. For instance, set the opacity of an element in JavaScript (after, you've specified the <code>transitionPropery</code> and <code>transitionDuration</code> for that element).</p>\n",
            "last_activity_date": 1371049539,
            "question_id": 2999749,
            "score": 54,
            "tags": [
                "javascript",
                "css",
                "css3",
                "animation"
            ],
            "title": "Performance of CSS Transitions vs. JS animation packages"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You've got a couple of issues here.</p>\n\n<p>Firstly, you're defining your code within an <a href=\"http://www.ejball.com/EdAtWork/2005/03/28/JavaScriptAnonymousFunctions.aspx\" rel=\"nofollow\">anonymous function</a>. This construct:</p>\n\n<pre><code>(function() {\n  ...\n)();\n</code></pre>\n\n<p>does two things. It defines an anonymous function and calls it. There are scope reasons to do this but I'm not sure it's what you actually want.</p>\n\n<p>You're passing in a code block to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout\" rel=\"nofollow\"><code>setTimeout()</code></a>. The problem is that <code>update()</code> is not within scope when executed like that. It however if you pass in a function pointer instead so this works:</p>\n\n<pre><code>(function() {\n  $(document).ready(function() {update();});\n\n  function update() { \n    $(\"#board\").append(\".\");\n    setTimeout(update, 1000);     }\n  }\n)();\n</code></pre>\n\n<p>because the function pointer <code>update</code> is within scope of that block.</p>\n\n<p>But like I said, there is no need for the anonymous function so you can rewrite it like this:</p>\n\n<pre><code>$(document).ready(function() {update();});\n\nfunction update() { \n  $(\"#board\").append(\".\");\n  setTimeout(update, 1000);     }\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(document).ready(function() {update();});\n\nfunction update() { \n  $(\"#board\").append(\".\");\n  setTimeout('update()', 1000);     }\n}\n</code></pre>\n\n<p>and both of these work. The second works because the <code>update()</code> within the code block is within scope now.</p>\n\n<p>I also prefer the <code>$(function() { ... }</code> shortened block form and rather than calling <code>setTimeout()</code> within <code>update()</code> you can just use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval\" rel=\"nofollow\"><code>setInterval()</code></a> instead:</p>\n\n<pre><code>$(function() {\n  setInterval(update, 1000);\n});\n\nfunction update() {\n  $(\"#board\").append(\".\");\n}\n</code></pre>\n\n<p>Hope that clears that up.</p>\n",
                    "is_accepted": true,
                    "score": 104
                },
                {
                    "body": "<pre><code>setInterval(function() {\n    $('#board').append('.');\n}, 1000);\n</code></pre>\n\n<p>You can use clearInterval if you wanted to stop it at one point.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>SetTimeout is used to make your set of code to execute after a specified time period so for your requirements its better to use setInterval because that will call your function every time at a specified time interval.</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I'm still new to JQuery,  on the way to getting my ajax example to work i got stalled with setTimeout.  I have broken it down to to where it should add \".\" to the div every second.</p>\n\n<p>The relevant code is in two files.</p>\n\n<p><strong>index.html</strong></p>\n\n<pre><code>&lt;html&gt;&lt;head&gt;\n&lt;script type='text/javascript' src='jquery.js'&gt;&lt;/script&gt;\n&lt;script type='text/javascript' src='myCode.js'&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='board'&gt;Text&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>and <strong>myCode.js</strong></p>\n\n<pre><code>(function(){\n   $(document).ready(function() {update();});\n\n   function update() { \n      $(\"#board\").append(\".\");\n      setTimeout('update()', 1000);     }\n })();\n</code></pre>\n\n<p>the myCode.js file works alright and \"update()\" runs the first time through but never again.\nYour help is appreciated, I'm banging my head on the wall about this...</p>\n",
            "last_activity_date": 1394011224,
            "question_id": 1495903,
            "score": 46,
            "tags": [
                "javascript",
                "jquery",
                "settimeout"
            ],
            "title": "JQuery, setTimeout not working"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>.replace(/\\s+/, \"\") \n</code></pre>\n\n<p>should work (Regex that removes all spaces)</p>\n\n<p>or you can try this</p>\n\n<pre><code>.replace(/\\s/g, \"\") \n</code></pre>\n\n<p>(globally replace spaces)</p>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>You have to tell replace() to repeat the regex:</p>\n\n<pre><code>.replace(/ /g,'')\n</code></pre>\n\n<p>The <strong>g</strong> character means to repeat the search through the entire string.  Read about this, and other RegEx modifiers available in JavaScript <a href=\"http://www.w3schools.com/jsref/jsref_obj_regexp.asp\">here</a>.</p>\n",
                    "is_accepted": true,
                    "score": 147
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3794919/replace-all-spaces-in-a-string-with\">Replace all spaces in a string with &#39;+&#39;</a>  </p>\n</blockquote>\n\n\n\n<pre><code>$(\"#topNav\" + $(\"#breadCrumb2nd\").text().replace(\" \", \"\")).addClass(\"current\");\n</code></pre>\n\n<p>This is a snippet from my code. I want to add a class to an ID after getting another ID's text property. The problem with this, is the ID holding the text I need, contains gaps between the letters. </p>\n\n<p>I would like the white spaces removed. I have tried <code>TRIM()</code>and <code>REPLACE()</code> but this only partially works. The <code>REPLACE()</code> only removes the 1st space.</p>\n\n<p>Thanks a bunch in advance, I know I am missing something small.</p>\n",
            "last_activity_date": 1407756477,
            "question_id": 6623231,
            "score": 44,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Remove ALL white spaces from text"
        }
    ]
}
