{
    "items": [
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Try comparing element.scrollHeight / element.scrollWidth to element.offsetHeight / element.offsetWidth</p>\n\n<p><a href=\"http://developer.mozilla.org/en/DOM/element.offsetWidth\" rel=\"nofollow\">http://developer.mozilla.org/en/DOM/element.offsetWidth</a><br />\n<a href=\"http://developer.mozilla.org/en/DOM/element.offsetHeight\" rel=\"nofollow\">http://developer.mozilla.org/en/DOM/element.offsetHeight</a><br />\n<a href=\"http://developer.mozilla.org/en/DOM/element.scrollWidth\" rel=\"nofollow\">http://developer.mozilla.org/en/DOM/element.scrollWidth</a><br />\n<a href=\"http://developer.mozilla.org/en/DOM/element.scrollHeight\" rel=\"nofollow\">http://developer.mozilla.org/en/DOM/element.scrollHeight</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>document.getElementById(\"divID\").style.overflow\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -16
                },
                {
                    "body": "<p>Normally, you can compare the <code>client[Height|Width]</code> with <code>scroll[Height|Width]</code> in order to detect this... but they'll be the same when overflow is visible. So a detection routine must account for this:</p>\n\n<pre><code>// Determines if the passed element is overflowing its bounds,\n// either vertically or horizontally.\n// Will temporarily modify the \"overflow\" style to detect this\n// if necessary.\nfunction checkOverflow(el)\n{\n   var curOverflow = el.style.overflow;\n   if ( !curOverflow || curOverflow === \"visible\" )\n      el.style.overflow = \"hidden\";\n\n   var isOverflowing = el.clientWidth &lt; el.scrollWidth \n      || el.clientHeight &lt; el.scrollHeight;\n\n   el.style.overflow = curOverflow;\n\n   return isOverflowing;\n}\n</code></pre>\n\n<p>Tested in FF3, IE6, Chrome 0.2.149.30.</p>\n",
                    "is_accepted": true,
                    "score": 86
                }
            ],
            "body": "<p>I am interested to know if there is any way I can check using JavaScript if a HTML element has overflow in it's content (but with the overflow property set to visible - so no scrollbars on the element). Can I check irrespective of scrollbars for overflow content (in a div tag for instance)?</p>\n",
            "last_activity_date": 1370209829,
            "question_id": 143815,
            "score": 46,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "How to determine using JavaScript if HTML element has overflowing content"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Simple answer is yes it is possible, but not in a consistent way.</p>\n\n<p>There is the [element].setSelectionRange API that is available on Firefox and Chrome.  If you set the start and end of the range to the same point it simple moves the cursor (as do other browser equivalents I believe).</p>\n\n<p><a href=\"https://developer.mozilla.org/en/XUL/Method/setSelectionRange\" rel=\"nofollow\">https://developer.mozilla.org/en/XUL/Method/setSelectionRange</a></p>\n\n<pre><code>var myDiv = document.getElementById(\"editable\");\nmyDiv.setSelectionRange(5, 5);\n</code></pre>\n\n<p>The problem with this kind of low level manipulation is that there is no one API supported cross browser so you'll need to wrap all your functionality inside helpers that detect the browser you're on and use the appropriate API for that browser.</p>\n\n<p>Generally it's a headache reverse engineering the different implementations of content editable across all browsers.  Hopefully as we move to HTML 5 the situation will become much more consistent across browser.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>In most browsers, you need the <a href=\"https://developer.mozilla.org/en/DOM/range\"><code>Range</code></a> and <a href=\"https://developer.mozilla.org/en/DOM/selection\"><code>Selection</code></a> objects. You specify each of the selection boundaries as a node and an offset within that node. For example, to set the caret to the fifth character of the second line of text, you'd do the following:</p>\n\n<pre><code>var el = document.getElementById(\"editable\");\nvar range = document.createRange();\nvar sel = window.getSelection();\nrange.setStart(el.childNodes[2], 5);\nrange.collapse(true);\nsel.removeAllRanges();\nsel.addRange(range);\n</code></pre>\n\n<p>IE &lt; 9 works completely differently. If you need to support these browsers, you'll need different code.</p>\n\n<p>jsFiddle example: <a href=\"http://jsfiddle.net/timdown/vXnCM/\">http://jsfiddle.net/timdown/vXnCM/</a></p>\n",
                    "is_accepted": true,
                    "score": 51
                }
            ],
            "body": "<p>I have this simple HTML as an example:</p>\n\n<pre><code>&lt;div id=\"editable\" contenteditable=\"true\"&gt;\n  text text text&lt;br&gt;\n  text text text&lt;br&gt;\n  text text text&lt;br&gt;\n&lt;/div&gt;\n&lt;button id=\"button\"&gt;focus&lt;/button&gt;\n</code></pre>\n\n<p>I want simple thing - when I click the button, I want to place caret(cursor) into specific place in the editable div. From searching over the web, I have this JS attached to button click, but it doesn't work (FF, Chrome):</p>\n\n<pre><code>var range = document.createRange();\nvar myDiv = document.getElementById(\"editable\");\nrange.setStart(myDiv, 5);\nrange.setEnd(myDiv, 5);\n</code></pre>\n\n<p>Is it possible to set manually caret position like this ?</p>\n",
            "last_activity_date": 1397856168,
            "question_id": 6249095,
            "score": 42,
            "tags": [
                "javascript",
                "jquery",
                "contenteditable",
                "caret",
                "cursor-position"
            ],
            "title": "How to set caret(cursor) position in contenteditable element (div)?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>If you put it at the bottom, it loads last, hence speeding up the speed that the user can see the page. It does need to be before the final <code>&lt;/html&gt;</code> though otherwise it won't be part of the DOM.</p>\n\n<p>If the code is needed instantly though, then put it in the head.</p>\n\n<p>It's best to put things like blog widgets at the bottom so that if they don't load, it doesn't affect the usability of the page.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>No it should not be after the <code>&lt;/html&gt;</code> as that would be invalid. The best place to put scripts is right before the <code>&lt;/body&gt;</code></p>\n\n<p>This is basically because most browsers stop rendering the page while they eval the script that you provide. So its OK to put non-blocking code anywhere in the page (I'm mainly thinking of things that attach functions to the <code>onLoad</code> event, since event binding is so fast as to effectively be free). A big killer here is at the beginning of the page putting in some ad server script, which can prevent any of the page loading before the ads have totally downloaded, making your page load times balloon </p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are two possibilities for truly unobtrusive scripts:</p>\n\n<ul>\n<li>including an external script file via a script tag in the head section</li>\n<li>including an external script file via a script tag at the bottom of the body (before <code>&lt;/body&gt;&lt;/html&gt;</code>)</li>\n</ul>\n\n<p>The second one can be faster as the original Yahoo research showed some browsers try to load script files when they hit the script tag and therefore don't load the rest of the page until they have finished. However, if your script has a 'ready' portion which must execute as soon as the DOM is ready you may need to have it in the head. Another issue is layout - if your script is going to change the page layout you want it loaded as early as possible so your page does not spend a long time redrawing itself in front of your users.</p>\n\n<p>If the external script site is on another domain (like external widgets) it may be worth putting it at the bottom to avoid it delaying loading of the page. </p>\n\n<p>And for any performance issues <em>do your own benchmarks</em> - what may be true at one time when a study is done might change with your own local setup or changes in browsers.</p>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<p>If you want to tinker with the position of your scripts, YSlow is a great tool for giving you a flavour if it's going to improve or hurt performance.  Putting javascript in certain document positions can really kill page load times.</p>\n\n<p><a href=\"http://developer.yahoo.com/yslow/\">http://developer.yahoo.com/yslow/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It's never so cut and dry - Yahoo recommends putting the scripts just before the closing <code>&lt;/body&gt;</code> tag, which will create the illusion that the page loads faster on an empty cache (since the scripts won't block downloading the rest of the document). \nHowever, if you have some code you want to run on page load, it will only start executing after the entire page has loaded. If you put the scripts in the <code>&lt;head&gt;</code> tag, they would start executing before - so on a primed cache the page would actually appear to load faster.</p>\n\n<p>Also, the privilege of putting scripts at the bottom of the page is not always available. If you need to include inline scripts in your views that depend on a library or some other JavaScript code being loaded before, you must load those dependencies in the <code>&lt;head&gt;</code> tag.</p>\n\n<p>All in all Yahoo's recommendations are interesting but not always applicable and should be considered on a case-by-case basis.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>As others have said, place it before the closing <em>body</em> <em>html</em> tags.</p>\n\n<p>The other day we had numerous calls from clients complaining their sites were extremely slow. We visited them locally and found they took 20-30 seconds to load a single page. Thinking it was the servers performing badly, we logged on - but both web and sql servers were ~0% activity.</p>\n\n<p>After a few minutes, we realised an external site was down, which we were linking to for Javascript tracking tags. This meant browsers were hitting the <em>script</em> tag in the <em>head</em> section of the site and waiting to download the script file.</p>\n\n<p>So, for 3rd party/external scripts at least, I'd recommend putting them as the last thing on the page. Then if they were unavailable, the browser would at least load the page up until that point - and the user would be oblivious to it.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>To summarize, based on the suggestions above:</p>\n\n<ol>\n<li>For external scripts (Google analytics, 3rd party marketing trackers, etc.) place them before the <code>&lt;/body&gt;</code> tag.</li>\n<li>For scripts that affect page layout, place in head.</li>\n<li>For scripts that rely on 'dom ready' (like jquery), consider placing before <code>&lt;/body&gt;</code> unless you have an edge-case reason to place scripts in head.</li>\n<li>If there are inline scripts with dependencies, place the required scripts in head.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I've recently read the Yahoo manifesto <a href=\"http://developer.yahoo.com/performance/rules.html#postload\">Best Practices for Speeding Up Your Web Site</a>. They recommend to put the JavaScript inclusion at the bottom of the HTML code when we can.</p>\n\n<p>But where exactly and when?</p>\n\n<p>Should we put it before closing <code>&lt;/html&gt;</code> or after ? And above all, when should we still put it in the <code>&lt;head&gt;</code> section?</p>\n",
            "last_activity_date": 1422383967,
            "question_id": 143486,
            "score": 64,
            "tags": [
                "javascript",
                "performance",
                "optimization",
                "coding-style"
            ],
            "title": "Unobtrusive JavaScript: &lt;script&gt; at the top or the bottom of the HTML code?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Push adds it to the end, while array[n] has to go through the array to find the right spot. Probably depends on browser and its way to handle arrays.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p><code>push()</code> is a special case of the more general [[Put]] and therefore can be further optimized:</p>\n\n<p>When calling [[Put]] on an array object, the argument has to be converted to an unsigned integer first because all property names - including array indices - are strings. Then it has to be compared to the length property of the array in order to determine whether or not the length has to be increased. When pushing, no such conversion or comparison has to take place: Just use the current length as array index and increase it.</p>\n\n<p>Of course there are other things which will affect the runtime, eg calling <code>push()</code> should be slower than calling [[Put]] via <code>[]</code> because the prototype chain has to be checked for the former.</p>\n\n<p><hr /></p>\n\n<p>As olliej pointed out: actual ECMAScript implementations will optimize the conversion away, ie for numeric property names, no conversion from string to uint is done but just a simple type check. The basic assumption should still hold, though its impact will be less than I originally assumed.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>All sorts of factors come into play, most JS implementations use a flat array that converts to sparse storage if it becomes necessary later on.</p>\n\n<p>Basically the decision to become sparse is a heuristic based on what elements are being set, and how much space would be wasted in order to remain flat.</p>\n\n<p>In your case you are setting the last element first, which means the JS engine will see an array that needs to have a length of <code>n</code> but only a single element.  If <code>n</code> is large enough this will immediately make the array a sparse array -- in most engines this means that all subsequent insertions will take the slow sparse array case.</p>\n\n<p>You should add an additional test in which you fill the array from index 0 to index n-1 -- it should be much, much faster.</p>\n\n<p>In response to @Christoph and out of a desire to procrastinate, here's a description of how arrays are (generally) implemented in JS -- specifics vary from JS engine to JS engine but the general principle is the same.</p>\n\n<p>All JS <code>Object</code>s (so not strings, numbers, true, false, <code>undefined</code>, or <code>null</code>) inherit from a base object type -- the exact implementation varies, it could be C++ inheritance, or manually in C (there are benefits to doing it in either way) -- the base Object type defines the default property access methods, eg.</p>\n\n<pre><code>interface Object {\n    put(propertyName, value)\n    get(propertyName)\nprivate:\n    map properties; // a map (tree, hash table, whatever) from propertyName to value\n}\n</code></pre>\n\n<p>This Object type handles all the standard property access logic, the prototype chain, etc.\nThen the Array implementation becomes</p>\n\n<pre><code>interface Array : Object {\n    override put(propertyName, value)\n    override get(propertyName)\nprivate:\n    map sparseStorage; // a map between integer indices and values\n    value[] flatStorage; // basically a native array of values with a 1:1\n                         // correspondance between JS index and storage index\n    value length; // The `length` of the js array\n}\n</code></pre>\n\n<p>Now when you create an Array in JS the engine creates something akin to the above data structure.  When you insert an object into the Array instance the Array's put method checks to see if the property name is an integer (or can be converted into an integer, e.g. \"121\", \"2341\", etc.) between 0 and 2^32-1 (or possibly 2^31-1, i forget exactly).  If it is not, then the put method is forwarded to the base Object implementation, and the standard [[Put]] logic is done.  Otherwise the value is placed into the Array's own storage, if the data is sufficiently compact then the engine will use the flat array storage, in which case insertion (and retrieval) is just a standard array indexing operation, otherwise the engine will convert the array to sparse storage, and put/get use a map to get from propertyName to value location.</p>\n\n<p>I'm honestly not sure if any JS engine currently converts from sparse to flat storage after that conversion occurs.</p>\n\n<p>Anyhoo, that's a fairly high level overview of what happens and leaves out a number of the more icky details, but that's the general implementation pattern.  The specifics of how the additional storage, and how put/get are dispatched differs from engine to engine -- but this is the clearest i can really describe the design/implementation.</p>\n\n<p>A minor addition point, while the ES spec refers to <code>propertyName</code> as a string JS engines tend to specialise on integer lookups as well, so <code>someObject[someInteger]</code> will not convert the integer to a string if you're looking at an object that has integer properties eg. Array, String, and DOM types (<code>NodeList</code>s, etc).</p>\n",
                    "is_accepted": true,
                    "score": 56
                },
                {
                    "body": "<p>These are the result I get with <strong>your test</strong> </p>\n\n<p>on Safari:</p>\n\n<ul>\n<li>Array.push(n) 1,000,000 values: 0.124\nsec </li>\n<li>Array[n .. 0] = value\n(descending) 1,000,000 values: 3.697\nsec </li>\n<li>Array[0 .. n] = value (ascending)\n1,000,000 values: 0.073 sec</li>\n</ul>\n\n<p>on FireFox:</p>\n\n<ul>\n<li>Array.push(n) 1,000,000 values: 0.075 sec</li>\n<li>Array[n .. 0] = value (descending) 1,000,000 values: 1.193 sec</li>\n<li>Array[0 .. n] = value (ascending) 1,000,000 values: 0.055 sec</li>\n</ul>\n\n<p>on IE7:</p>\n\n<ul>\n<li>Array.push(n) 1,000,000 values: 2.828 sec</li>\n<li>Array[n .. 0] = value (descending) 1,000,000 values: 1.141 sec</li>\n<li>Array[0 .. n] = value (ascending) 1,000,000 values: 7.984 sec</li>\n</ul>\n\n<p>According to <strong>your test</strong> the <em>push</em> method seems to be better on IE7 (huge difference), and since on the other browsers the difference is small, it seems to be the <em>push</em> method really the best way to add element to an array.</p>\n\n<p>But I created another <a href=\"http://vanylla.it/test-array-push-vs-length.html\">simple test script</a> to check what method is fast to append values to an array, the results really surprised me, <strong>using Array.length seems to be much faster compared to using Array.push</strong>, so I really don't know what to say or think anymore, I'm clueless.</p>\n\n<p><em>BTW: on my IE7 your script stops and browsers asks me if I want to let it go on (you know the typical IE message that says: \"Stop runnign this script? ...\")\nI would recoomend to reduce a little the loops.</em></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is a good testbed, which confirms that direct assignment is significantly faster than push: <a href=\"http://jsperf.com/array-direct-assignment-vs-push\" rel=\"nofollow\">http://jsperf.com/array-direct-assignment-vs-push</a>.</p>\n\n<p>Edit: there seems to be some problem in showing cumulative results data, but hopefully it gets fixed soon.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>As a side result of testing some code I wrote a small function to compare the speed of using the array.push method vs direct addressing (array[n] = value). To my surprise the push method often showed to be faster especially in Firefox and sometimes in Chrome. Just out of curiosity: anyone has an explanation for it?\nYou can find the test @<a href=\"http://www.nicon.nl/testhtml/elwrap%5F.html\">this page</a> (click 'Array methods comparison')</p>\n",
            "last_activity_date": 1389860484,
            "question_id": 614126,
            "score": 47,
            "tags": [
                "javascript",
                "arrays",
                "performance",
                "firefox",
                "browser"
            ],
            "title": "Why is array.push sometimes faster than array[n] = value?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>the <code>window.top</code> property should be able to give what you need.</p>\n\n<p>E.g. </p>\n\n<pre><code>alert(top.location.href)\n</code></pre>\n\n<p>See \n<a href=\"http://cross-browser.com/talk/inter-frame_comm.html\" rel=\"nofollow\">http://cross-browser.com/talk/inter-frame_comm.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With different domains, it is not possible to call methods or access the iframe's content document directly.</p>\n\n<p>You have to use <a href=\"https://developer.mozilla.org/en/DOM/window.postMessage\">cross-document messaging</a>.</p>\n\n<p>For example in the top window:</p>\n\n<pre><code> myIframe.contentWindow.postMessage('hello', '*');\n</code></pre>\n\n<p>and in the iframe:</p>\n\n<pre><code>window.onmessage = function(e){\n    if (e.data == 'hello') {\n        alert('It works!');\n    }\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 70
                },
                {
                    "body": "<p>This library supports HTML5 postMessage and legacy browsers with resize+hash <a href=\"https://github.com/ternarylabs/porthole\" rel=\"nofollow\">https://github.com/ternarylabs/porthole</a></p>\n\n<p>Edit: Now in 2014, IE6/7 usage is quite low, IE8 and above all support <code>postMessage</code> so I now suggest to just use that.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>The website in the iframe <strong>isn't located in the same domain</strong>, but both are mine, and I would like to communicate between the <code>iframe</code> and the parent site. Is it possible?</p>\n",
            "last_activity_date": 1408408699,
            "question_id": 9153445,
            "score": 43,
            "tags": [
                "javascript",
                "html",
                "ajax",
                "iframe"
            ],
            "title": "How to communicate between iframe and the parent site?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>No, it doesn't have one. For this reason most popular libraries come with one in their utility packages. Check out jQuery's <em><a href=\"http://api.jquery.com/jQuery.inArray/\">inArray</a></em> and Prototype's <em><a href=\"http://www.prototypejs.org/api/array/indexof\">Array.indexOf</a></em> for examples. </p>\n\n<p>jQuery's implementation of it is as simple as you might expect:</p>\n\n<pre><code>function inArray(needle, haystack) {\n    var length = haystack.length;\n    for(var i = 0; i &lt; length; i++) {\n        if(haystack[i] == needle) return true;\n    }\n    return false;\n}\n</code></pre>\n\n<p>If you are dealing with a sane amount of array elements the above will do the trick nicely.</p>\n\n<p><strong>EDIT</strong>: Whoops. I didn't even notice you wanted to see if an array was inside another. According to the PHP documentation this is the expected behavior of PHP's <a href=\"http://www.php.net/in_array\"><code>in_array</code></a>:</p>\n\n<pre><code>$a = array(array('p', 'h'), array('p', 'r'), 'o');\n\nif (in_array(array('p', 'h'), $a)) {\n    echo \"'ph' was found\\n\";\n}\n\nif (in_array(array('f', 'i'), $a)) {\n    echo \"'fi' was found\\n\";\n}\n\nif (in_array('o', $a)) {\n    echo \"'o' was found\\n\";\n}\n\n// Output:\n//  'ph' was found\n//  'o' was found\n</code></pre>\n\n<p>The code posted by Chris and Alex does not follow this behavior. Alex's is the official version of Prototype's indexOf, and Chris's is more like PHP's <a href=\"http://www.php.net/array_intersect\"><code>array_intersect</code></a>. This does what you want:</p>\n\n<pre><code>function arrayCompare(a1, a2) {\n    if (a1.length != a2.length) return false;\n    var length = a2.length;\n    for (var i = 0; i &lt; length; i++) {\n        if (a1[i] !== a2[i]) return false;\n    }\n    return true;\n}\n\nfunction inArray(needle, haystack) {\n    var length = haystack.length;\n    for(var i = 0; i &lt; length; i++) {\n        if(typeof haystack[i] == 'object') {\n            if(arrayCompare(haystack[i], needle)) return true;\n        } else {\n            if(haystack[i] == needle) return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>And this my test of the above on it:</p>\n\n<pre><code>var a = [['p','h'],['p','r'],'o'];\nif(inArray(['p','h'], a)) {\n    alert('ph was found');\n}\nif(inArray(['f','i'], a)) {\n    alert('fi was found');\n}\nif(inArray('o', a)) {\n    alert('o was found');\n}  \n// Results:\n//   alerts 'ph' was found\n//   alerts 'o' was found\n</code></pre>\n\n<p>Note that I intentionally did not extend the Array prototype as it is generally a bad idea to do so.</p>\n",
                    "is_accepted": true,
                    "score": 167
                },
                {
                    "body": "<p>There is not a native function for this.</p>\n\n<p><a href=\"http://kevin.vanzonneveld.net/techblog/article/javascript%5Fequivalent%5Ffor%5Fphps%5Fin%5Farray/\" rel=\"nofollow\">The code here is good.</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you only want to check if a single value is in an array, then Paolo's code will do the job. If you want to check which values are common to both arrays, then you'll want something like this (using Paolo's inArray function):</p>\n\n<pre><code>function arrayIntersect(a, b) {\n    var intersection = [];\n\n    for(var i = 0; i &lt; a.length; i++) {\n        if(inArray(b, a[i]))\n            intersection.push(a[i]);\n    }\n\n    return intersection;\n}\n</code></pre>\n\n<p>This wil return an array of values that are in both <code>a</code> and <code>b</code>. (Mathematically, this is an <a href=\"http://en.wikipedia.org/wiki/Intersection_(set_theory)\" rel=\"nofollow\">intersection</a> of the two arrays.)</p>\n\n<p><b>EDIT:</b> See <a href=\"http://stackoverflow.com/questions/784012/javascript-equivalent-of-phps-inarray/784015#784015\">Paolo's Edited Code</a> for the solution to your problem. :)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf\"><code>Array.indexOf</code></a> was introduced in JavaScript 1.6, but it is not supported in older browsers. Thankfully the chaps over at Mozilla have done <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf#Compatibility\">all the hard work</a> for you, and provided you with this for compatibility:</p>\n\n<pre><code>if (!Array.prototype.indexOf)\n{\n  Array.prototype.indexOf = function(elt /*, from*/)\n  {\n    var len = this.length &gt;&gt;&gt; 0;\n\n    var from = Number(arguments[1]) || 0;\n    from = (from &lt; 0)\n         ? Math.ceil(from)\n         : Math.floor(from);\n    if (from &lt; 0)\n      from += len;\n\n    for (; from &lt; len; from++)\n    {\n      if (from in this &amp;&amp;\n          this[from] === elt)\n        return from;\n    }\n    return -1;\n  };\n}\n</code></pre>\n\n<p>There are even some handy usage snippets for your scripting pleasure.</p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>If the indexes are not in sequence, or if the indexes are not consecutive, the code in the other solutions listed here will break.  A solution that would work somewhat better might be:</p>\n\n<pre><code>function in_array(needle, haystack) {\n    for(var i in haystack) {\n        if(haystack[i] == needle) return true;\n    }\n    return false;\n}\n</code></pre>\n\n<p>And, as a bonus, here's the equivalent to PHP's array_search (for finding the key of the element in the array:</p>\n\n<pre><code>function array_search(needle, haystack) {\n    for(var i in haystack) {\n        if(haystack[i] == needle) return i;\n    }\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>With <a href=\"http://en.wikipedia.org/wiki/Dojo_Toolkit\" rel=\"nofollow\">Dojo Toolkit</a>, you would use <code>dojo.indexOf()</code>. See <em><a href=\"http://dojotoolkit.org/reference-guide/dojo/indexOf.html\" rel=\"nofollow\">dojo.indexOf</a></em> for the documentation, and <em><a href=\"http://dojotoolkit.org/documentation/tutorials/1.6/arrays/\" rel=\"nofollow\">Arrays Made Easy</a></em> by Bryan Forbes for some examples.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function in_array(what, where) {\n    var a=false;\n    for (var i=0; i&lt;where.length; i++) {\n        if(what == where[i]) {\n            a=true;\n            break;\n        }\n    }\n    return a;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you need all the <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"nofollow\">PHP</a> available parameters, use this:</p>\n\n<pre><code>function in_array(needle, haystack, argStrict) {\n    var key = '', strict = !!argStrict;\n    if (strict) {\n        for (key in haystack) {\n            if (haystack[key] === needle) {\n                return true;\n            }\n        }\n    }\n    else {\n        for (key in haystack) {\n            if (haystack[key] == needle) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is a project called <a href=\"http://phpjs.org/\">PHPJS</a>. It implements PHP functions in JavaScript and there is the <a href=\"http://phpjs.org/functions/in_array:432\">in_array()</a> function. You can use it exactly as you use in PHP, including the third argument that checks the data types.</p>\n\n<p>Two examples of use:</p>\n\n<pre><code>in_array('van', myArray);\n\nin_array(1, otherArray, true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>var a = [1,2,3,4,5,6,7,8,9];\n\nvar isSixInArray = a.filter(function(item){return item==6}).length ? true : false;\n\nvar isSixInArray = a.indexOf(6)&gt;=0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found a great jQuery solution <a href=\"http://stackoverflow.com/questions/9204283/how-to-check-whether-multiple-values-exist-within-an-javascript-array/9204307#9204307\">here</a> on SO.</p>\n\n<pre><code>var success = $.grep(array_a, function(v,i) {\n    return $.inArray(v, array_b) !== -1;\n}).length === array_a.length;\n</code></pre>\n\n<p>I wish someone would post an example of how to do this in underscore.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function in_array(needle, haystack)\n{\n    return !haystack.indexOf(needle);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>jQuery solution is available, check the ducumentation here:\n<a href=\"http://api.jquery.com/jquery.inarray/\" rel=\"nofollow\">http://api.jquery.com/jquery.inarray/</a></p>\n\n<pre><code>$.inArray( 10, [ 8, 9, 10, 11 ] );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An equivalent of <code>in_array</code> with <code>underscore</code> is <a href=\"http://underscorejs.org/#indexOf\" rel=\"nofollow\">_.indexOf</a>   </p>\n\n<p>Examples:</p>\n\n<p><code>_.indexOf([3, 5, 8], 8);   // returns 2, the index of 8\n_.indexOf([3, 5, 8], 10);   // returns -1, not found</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are going to use it in a class, and if you prefer it to be functional (and work in all browsers):</p>\n\n<pre><code>inArray: function(needle, haystack)\n{\n    var result = false;\n\n    for (var i in haystack) {\n        if (haystack[i] === needle) {\n            result = true;\n            break;\n        }\n    }\n\n    return result;\n}\n</code></pre>\n\n<p>Hope it helps someone :-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a way in JavaScript to compare values from one array and see if it is in another array? </p>\n\n<p>Similar to PHP's <a href=\"http://www.php.net/in_array\"><code>in_array</code></a> function?</p>\n",
            "last_activity_date": 1421188255,
            "question_id": 784012,
            "score": 110,
            "tags": [
                "php",
                "javascript",
                "phpjs"
            ],
            "title": "JavaScript equivalent of PHP&#39;s in_array()"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>This is not possible in Node.js, both <code>child_process.spawn</code> and <code>child_process.exec</code> were built from the ground up to be async.</p>\n\n<p>For details see: <a href=\"https://github.com/ry/node/blob/master/lib/child_process.js\">https://github.com/ry/node/blob/master/lib/child_process.js</a></p>\n\n<p>If you really want to have this blocking, then put everything that needs to happen afterwards in a callback, or build your own queue to handle this in a blocking fashion, I suppose you could use <a href=\"https://github.com/caolan/async/\">Async.js</a> for this task.</p>\n\n<p>Or, in case you have way too much time to spend, hack around in Node.js it self.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>See <a href=\"https://github.com/mgutz/execSync\">execSync</a> library.</p>\n\n<p>It's fairly easy to do with <a href=\"https://github.com/rbranson/node-ffi\">node-ffi</a>. I wouldn't recommend for server processes, but for general development utilities it gets things done. Install the library.</p>\n\n<pre><code>npm install node-ffi\n</code></pre>\n\n<p>Example script:</p>\n\n<pre><code>var FFI = require(\"node-ffi\");\nvar libc = new FFI.Library(null, {\n  \"system\": [\"int32\", [\"string\"]]\n});\n\nvar run = libc.system;\nrun(\"echo $USER\");\n</code></pre>\n\n<p>[EDIT Jun 2012: How to get STDOUT]</p>\n\n<pre><code>var lib = ffi.Library(null, {\n    // FILE* popen(char* cmd, char* mode);\n    popen: ['pointer', ['string', 'string']],\n\n    // void pclose(FILE* fp);\n    pclose: ['void', [ 'pointer']],\n\n    // char* fgets(char* buff, int buff, in)\n    fgets: ['string', ['string', 'int','pointer']]\n});\n\nfunction execSync(cmd) {\n  var\n    buffer = new Buffer(1024),\n    result = \"\",\n    fp = lib.popen(cmd, 'r');\n\n  if (!fp) throw new Error('execSync error: '+cmd);\n\n  while(lib.fgets(buffer, 1024, fp)) {\n    result += buffer.readCString();\n  };\n  lib.pclose(fp);\n\n  return result;\n}\n\nconsole.log(execSync('echo $HOME'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>I get used to implement <code>\"synchronous\"</code> stuff at the end of the callback function. Not very nice, but it works. If you need to implement a sequence of command line executions you need to wrap <code>exec</code> into some named function and recursively call it.\nThis pattern seem to be usable for me:</p>\n\n<pre><code>SeqOfExec(someParam);\n\nfunction SeqOfExec(somepParam) {\n    // some stuff\n    // .....\n    // .....\n\n    var execStr = \"yourExecString\";\n    child_proc.exec(execStr, function (error, stdout, stderr) {\n        if (error != null) {\n            if (stdout) {\n                throw Error(\"Smth goes wrong\" + error);\n            } else {\n                // consider that empty stdout causes\n                // creation of error object\n            }\n        }\n        // some stuff\n        // .....\n        // .....\n\n        // you also need some flag which will signal that you \n        // need to end loop\n        if (someFlag ) {\n            // your synch stuff after all execs\n            // here\n            // .....\n        } else {\n            SeqOfExec(someAnotherParam);\n        }\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>you can do synchronous shell operations in nodejs like so:</p>\n\n<pre><code>var execSync = function(cmd) {\n\n    var exec  = require('child_process').exec;\n    var fs = require('fs');\n\n    //for linux use ; instead of &amp;&amp;\n    //execute your command followed by a simple echo \n    //to file to indicate process is finished\n    exec(cmd + \" &gt; c:\\\\stdout.txt &amp;&amp; echo done &gt; c:\\\\sync.txt\");\n\n    while (true) {\n        //consider a timeout option to prevent infinite loop\n        //NOTE: this will max out your cpu too!\n        try {\n            var status = fs.readFileSync('c:\\\\sync.txt', 'utf8');\n\n            if (status.trim() == \"done\") {\n                var res = fs.readFileSync(\"c:\\\\stdout.txt\", 'utf8');\n                fs.unlinkSync(\"c:\\\\stdout.txt\"); //cleanup temp files\n                fs.unlinkSync(\"c:\\\\sync.txt\");\n                return res;\n            }\n        } catch(e) { } //readFileSync will fail until file exists\n    }\n\n};\n\n//won't return anything, but will take 10 seconds to run\nconsole.log(execSync(\"sleep 10\")); \n\n//assuming there are a lot of files and subdirectories, \n//this too may take a while, use your own applicable file path\nconsole.log(execSync(\"dir /s c:\\\\usr\\\\docs\\\\\"));\n</code></pre>\n\n<p>EDIT - this example is meant for windows environments, adjust for your own linux needs if necessary</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's an excellent module for flow control in node.js called <a href=\"https://github.com/scriby/asyncblock\">asyncblock</a>. If wrapping the code in a function is OK for your case, the following sample may be considered:</p>\n\n<pre><code>var asyncblock = require('asyncblock');\nvar exec = require('child_process').exec;\n\nasyncblock(function (flow) {\n    exec('node -v', flow.add());\n    result = flow.wait();\n    console.log(result);    // There'll be trailing \\n in the output\n\n    // Some other jobs\n    console.log('More results like if it were sync...');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You can achieve this using fibers. For example, using my <a href=\"https://github.com/olegp/common-node\">Common Node library</a>, the code would look like this:</p>\n\n<pre><code>result = require('subprocess').command('node -v');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This is the easiest way I found:</p>\n\n<blockquote>\n  <p><strong>exec-Sync</strong>: \n  <a href=\"https://github.com/jeremyfa/node-exec-sync\">https://github.com/jeremyfa/node-exec-sync</a>\n  <br />  (Not to be confused with execSync.)\n  <br />\n  Execute shell command synchronously. Use this for migration scripts, cli programs, but not for regular server code.</p>\n  \n  <p>Example:</p>\n</blockquote>\n\n<pre><code>var execSync = require('exec-sync');   \nvar user = execSync('echo $USER');\nconsole.log(user);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I had a similar problem and I ended up writing a node extension for this. You can check out the git repository. It's open source and free and all that good stuff !</p>\n\n<p><a href=\"https://github.com/aponxi/npm-execxi\" rel=\"nofollow\">https://github.com/aponxi/npm-execxi</a></p>\n\n<blockquote>\n  <p>ExecXI is a node extension written in C++ to execute shell commands\n  one by one, outputting the command's output to the console in\n  real-time. Optional chained, and unchained ways are present; meaning\n  that you can choose to stop the script after a command fails\n  (chained), or you can continue as if nothing has happened !</p>\n</blockquote>\n\n<p>Usage instructions are in the <a href=\"https://github.com/aponxi/npm-execxi/blob/master/README.md\" rel=\"nofollow\">ReadMe file</a>. Feel free to make pull requests or submit issues!</p>\n\n<p><strong>EDIT:</strong> <strike>However it doesn't return the stdout yet... Just outputs them in real-time.</strike> <strong>It does now.</strong> Well, I just released it today. Maybe we can build on it. </p>\n\n<p>Anyway, I thought it was worth to mention it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I actually had a situation where I needed to run multiple commands one after another from a package.json preinstall script in a way that would work on both Windows and Linux/OSX, so I couldn't rely on a non-core module.</p>\n\n<p>So this is what I came up with:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>#cmds.coffee\nchildproc = require 'child_process'\n\nexports.exec = (cmds) -&gt;\n  next = -&gt;\n    if cmds.length &gt; 0\n      cmd = cmds.shift()\n      console.log \"Running command: #{cmd}\"\n      childproc.exec cmd, (err, stdout, stderr) -&gt;\n        if err? then console.log err\n        if stdout? then console.log stdout\n        if stderr? then console.log stderr\n        next()\n    else\n      console.log \"Done executing commands.\"\n\n  console.log \"Running the follows commands:\"\n  console.log cmds\n  next()\n</code></pre>\n\n<p>You can use it like this:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>require('./cmds').exec ['grunt coffee', 'nodeunit test/tls-config.js']\n</code></pre>\n\n<p>EDIT: as pointed out, this doesn't actually return the output or allow you to use the result of the commands in a Node program.  One other idea for that is to use LiveScript backcalls.  <a href=\"http://livescript.net/\" rel=\"nofollow\">http://livescript.net/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just to add that even though there are few usecases where you should use them, <code>spawnSync</code> / <code>execFileSync</code> / <code>execSync</code> were added to node.js in these commits: <a href=\"https://github.com/joyent/node/compare/d58c206862dc...e8df2676748e\">https://github.com/joyent/node/compare/d58c206862dc...e8df2676748e</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Use <a href=\"https://github.com/arturadib/shelljs\">ShellJS</a> module.</p>\n\n<p><a href=\"https://github.com/arturadib/shelljs#execcommand--options--callback\">exec</a> function without providing callback.</p>\n\n<p>Example:</p>\n\n<pre><code>var version = exec('node -v').output;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>NodeJS 0.12 and IO.js 1.10 now support <code>execSync</code>:</p>\n\n<blockquote>\n  <p>child_process.execSync(command[, options])#</p>\n</blockquote>\n\n<p>You can now directly do this:</p>\n\n<pre><code>code = execSync('node -v');\n</code></pre>\n\n<p>and it'll do what you expect. (Defaults to pipe the io results to the parent process). Note that you can also <code>spawnSync</code> now.</p>\n",
                    "is_accepted": true,
                    "score": 5
                }
            ],
            "body": "<p>I need in <strong>node.js</strong> function</p>\n\n<pre><code>result = execSync('node -v');\n</code></pre>\n\n<p>that will <strong>synchronously</strong> execute the given command line and return all stdout'ed by that command text.</p>\n\n<blockquote>\n  <p>ps. Sync is wrong. I know. Just for personal use.</p>\n</blockquote>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Now we have mgutz's solution which gives us exit code, but not stdout! Still waiting for a more precise answer.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p><strong>mgutz</strong> updated his answer and the solution is here :)<br>\nAlso, as <strong>dgo.a</strong> mentioned, there is stand-alone module <a href=\"https://github.com/jeremyfa/node-exec-sync\" rel=\"nofollow\">exec-sync</a></p>\n\n<p><strong>UPDATE 2014-07-30</strong></p>\n\n<p>Unix shell emulation library arrived. Consider this is the best choice for now.</p>\n\n<hr>\n\n<p><strong>UPDATE 2015-02-10</strong></p>\n\n<p><strong>AT LAST!</strong> NodeJS 0.12 supports <code>execSync</code> natively.<br>\nSee official <a href=\"http://nodejs.org/docs/v0.12.0/api/child_process.html#child_process_child_process_execsync_command_options\" rel=\"nofollow\">docs</a></p>\n",
            "last_activity_date": 1423537053,
            "question_id": 4443597,
            "score": 72,
            "tags": [
                "javascript",
                "command",
                "node.js",
                "exec",
                "sync"
            ],
            "title": "node.js execute system command synchronously"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>window.onload = initAll();</p>\n</blockquote>\n\n<p>This <strong>executes</strong> initAll() <strong>straight away</strong> and assigns the <strong>function's return value</strong> to <code>window.onload</code>. This is usually <strong>not</strong> what you want. initAll() would have to return a function for this to make sense.</p>\n\n<blockquote>\n  <p>window.onload = initAll;</p>\n</blockquote>\n\n<p>this assigns the <strong>actual function</strong> to <code>window.onload</code> - this is possible because in JavaScript, as @Felix says, functions are first class objects - without executing it. <code>initAll</code> will be executed by the load event.</p>\n",
                    "is_accepted": true,
                    "score": 81
                },
                {
                    "body": "<p><code>initAll</code> is a reference to a function value and the brackets operator appended to the function name RUNS this function object.</p>\n\n<p>So if you do something like</p>\n\n<pre><code>a = initAll\n</code></pre>\n\n<p>then <code>a</code> will become the same as <code>initAll</code> - for example you can do <code>a()</code> - but with</p>\n\n<pre><code>a = initAll()\n</code></pre>\n\n<p>the variable <code>a</code> will get the return value of the executed <code>initAll</code> function</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Functions in javascript are first-class citizens, and as such, can be assigned to other variables or passed around as arguments.</p>\n\n<p>So, when you do</p>\n\n<pre><code>window.onload = initAll;\n</code></pre>\n\n<p>You are setting the <code>onload</code> property of the <code>window</code> object to reference the <code>initAll</code> function itself.</p>\n\n<p>When you do</p>\n\n<pre><code>window.onload = initAll();\n</code></pre>\n\n<p>You are setting the <code>onload</code> property to hold the <em>return value</em> of initAll, since it will execute in place on that line.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>What Pekka says is correct, but I want to elaborate a little with an example that will help explain to someone who doesn't fully understand function pointers or delegates.</p>\n\n<p>I won't use window.onload because that's a bit contrived to demonstrate.  I'll use a simple multiply function to demo instead:</p>\n\n<pre><code>function Multiply(operator, operand) {\n    return operator * operand;\n}\n</code></pre>\n\n<p>This could equally be written:</p>\n\n<pre><code>Multiply = function(operator, operand) {\n    return operator * operand;\n}\n</code></pre>\n\n<p>While in the first example, the implication may not be obvious, the second example shows more clearly that we're assigning a function which has 2 parameters to a variable called Multiply, and this concept of functions as assignments is common throughout javascript.  This is a small demonstration of the fact that functions are <em>\"first class citizens\"</em>, that is, they can be passed around exactly as if we were passing around values.</p>\n\n<p>So now to the difference of assignment:</p>\n\n<pre><code>var operator = 3;\nvar operand = 4;\nvar ret = Multiply(operator, operand);\n</code></pre>\n\n<p>At the point of defining the ret variable, Multiply is executed and the return value is assigned - ret becomes equal to 12.</p>\n\n<p>Lets try that again a different way:</p>\n\n<pre><code>var operator = 3;\nvar operand = 4;\nvar ret = Multiply;\n</code></pre>\n\n<p>Now, at the point of defining ret, ret becomes your Multiply function as opposed to being the result obtained from your Multiply function.  Calls to ret() will cause your Multiply function to be executed, and you can call it exactly as if you'd called Multiply(operator, operand):</p>\n\n<pre><code>var out = ret(3, 4);\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>var out = Multiply(3, 4);\n</code></pre>\n\n<p>You have effectively said that you are going to use ret as a delegate for Multiply().  When calling ret, we're really referring to the Multiply function.</p>\n\n<p>Back to your window.onload.  Think of this as:</p>\n\n<pre><code>window.onload = function() {\n    //Doing what all good window.onload functions should do...\n}\n\ninitAll = function() {\n    return 12;\n}\n</code></pre>\n\n<p>So as you can see, window.onload is a function just like any other function, there's nothing special about it.  You can assign it a value, assign it a function, null it out if you wish - the point is that there's nothing any more special about window.onload than there is about your own function.  The only slightly different thing is that it gets called by the window when it's loaded. [Disclaimer: I've never actually nulled out window functions, so I'm not sure if this will cause negative repercussions.  One would hope they check to see if a function is assigned before calling it i.e. if (window.onload) window.onload();].</p>\n\n<p>Now calling initAll() what we're saying is:</p>\n\n<pre><code>window.onload = initAll();\n</code></pre>\n\n<p>which might as well say:</p>\n\n<pre><code>window.onload = 12;\n</code></pre>\n\n<p>But when we say initAll without the parentheses, what we're really saying is: I want to replace whatever my window.onload function is, with a new function - i.e. I want to replace it with my initAll function, so that any calls to window.onload runs my initAll code:</p>\n\n<p>So:</p>\n\n<pre><code>window.onload = function() {\n    //Doing what all good window.onload functions should do...\n}\n</code></pre>\n\n<p>is replaced with:</p>\n\n<pre><code>window.onload = function() {\n    return 12;\n}\n</code></pre>\n\n<p>So any call to window.onload will execute your initAll function instead of whatever window.onload was originally.  You have replaced the original function with your new function.</p>\n\n<p>In fact, you <em>could</em> equally write:</p>\n\n<pre><code>window.onload = function() {\n    //Write all your init code right in here instead of having a separate \n    //initAll function.\n}\n</code></pre>\n\n<p>Another example that may demonstrate better is this:</p>\n\n<pre><code>var d = new Date();\nvar currentTime = d.getTime();\n</code></pre>\n\n<p>Whatever the time was at the time <em>d</em> is defined ends up assigned to currentTime.  Great, but that's only useful if we want to find out what time the function containing that code was called - i.e. at page load time.  What if we want the current time any time that currentTime is called?</p>\n\n<pre><code>var currentTime = function() {\n    var d = new Date();\n    return d.getTime();\n}\n\nvar a = currentTime(); //The current time at the point a is defined...\nvar b = currentTime;   //b is a functional reference to currentTime...\nvar c = b(); //The current time when variable c is defined\nvar d = c; //The current time when variable c was defined\n</code></pre>\n\n<p>Notice how we call b() in our c and d assignments exactly as we could call currentTime()?</p>\n",
                    "is_accepted": false,
                    "score": 64
                }
            ],
            "body": "<p>I noticed a different when calling a function with empty parentheses, or without any parentheses at all.\nI am not passing any arguments to the function so I wondered what would be the difference between:</p>\n\n<pre><code>window.onload = initAll();\n</code></pre>\n\n<p>and</p>\n\n<pre><code>window.onload = initAll;\n</code></pre>\n\n<p>Please explain the principle behind it.\nThanx in advance.</p>\n",
            "last_activity_date": 1386624598,
            "question_id": 3246928,
            "score": 44,
            "tags": [
                "javascript"
            ],
            "title": "In JavaScript, does it make a difference if I call a function with parentheses?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Do it <a href=\"http://stackoverflow.com/questions/5240785/split-abc/5240797#5240797\">like this</a>, but don't trim, and split on <code>.</code> instead of <code>}{</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>to my knowledge obj.a is the same as obj['a']. So you can split the string 'a.b' to 'a', 'b'... and then use obj['a']['b'] </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var obj = { a: { b: '1', c: '2' } }; \nvar s = \"a.b\";\nvar val = eval(\"obj.\"+s);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>It's not clear what your question is. Given your object, <code>obj.a.b</code> would give you \"2\" just as it is. If you wanted to manipulate the string to use brackets, you could do this:</p>\n\n<pre><code>var s = 'a.b';\ns = 'obj[\"' + s.replace(/\\./g, '\"][\"') + '\"]';\nalert(s); // displays obj[\"a\"][\"b\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var find = function(root, path) {\n  var segments = path.split('.'),\n      cursor = root,\n      target;\n\n  for (var i = 0; i &lt; segments.length; ++i) {\n   target = cursor[segments[i]];\n   if (typeof target == \"undefined\") return void 0;\n   cursor = target;\n  }\n\n  return cursor;\n};\n\nvar obj = { a: { b: '1', c: '2' } }\nfind(obj, \"a.b\"); // 1\n\nvar set = function (root, path, value) {\n   var segments = path.split('.'),\n       cursor = root,\n       target;\n\n   for (var i = 0; i &lt; segments.length - 1; ++i) {\n      cursor = cursor[segments[i]] || { };\n   }\n\n   cursor[segments[segments.length - 1]] = value;\n};\n\nset(obj, \"a.k\", function () { console.log(\"hello world\"); });\n\nfind(obj, \"a.k\")(); // hello world\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var a = { b: { c: 9 } };\n\nfunction value(layer, path, value) {\n    var i = 0,\n        path = path.split('.');\n\n    for (; i &lt; path.length; i++)\n        if (value != null &amp;&amp; i + 1 === path.length)\n            layer[path[i]] = value;\n        layer = layer[path[i]];\n\n    return layer;\n};\n\nvalue(a, 'b.c'); // 9\n\nvalue(a, 'b.c', 4);\n\nvalue(a, 'b.c'); // 4\n</code></pre>\n\n<p>This is a lot of code when compared to the much simpler <code>eval</code> way of doing it, but like Simon Willison says, <a href=\"http://24ways.org/2005/dont-be-eval\" rel=\"nofollow\">you should never use eval</a>.</p>\n\n<p>Also, <a href=\"http://jsfiddle.net/tylermwashburn/aNnc6/\" rel=\"nofollow\">JSFiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>A little more involved example with recursion.</p>\n\n<pre><code>function recompose(obj,string){\n    var parts = string.split('.');\n    var newObj = obj[parts[0]];\n    if(parts[1]){\n        parts.splice(0,1);\n        var newString = parts.join('.');\n        return recompose(newObj,newString);\n    }\n    return newObj;\n}\n\n\nvar obj = { a: { b: '1', c: '2', d:{a:{b:'blah'}}}};\n\nalert(recompose(obj,'a.d.a.b')); //blah\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's an elegant one-liner that's 10x shorter than the other solutions:</p>\n\n<pre><code>function index(obj,i) {return obj[i]}\n'a.b.etc'.split('.').reduce(index, obj)\n</code></pre>\n\n<p>(Not that I think eval is a bad thing, but this method doesn't use eval. The above will find <code>obj.a.b.etc</code> given <code>obj</code> and the string <code>\"a.b.etc\"</code>. You could modify this method to use eval... but then you might as well just use eval for the whole thing.)</p>\n\n<p>In response to those who still are afraid of using <code>reduce</code> despite it being in the ECMA-262 standard (5th edition), here is a two-line recursive implementation:</p>\n\n<pre><code>function multiIndex(obj,is) {  // obj,['1','2','3'] -&gt; ((obj['1'])['2'])['3']\n    return is.length ? multiIndex(obj[is[0]],is.slice(1)) : obj\n}\nfunction pathIndex(obj,is) {   // obj,'1.2.3' -&gt; multiIndex(obj,['1','2','3'])\n    return multiIndex(obj,is.split('.'))\n}\npathIndex('a.b.etc')\n</code></pre>\n\n<p><strong>edit</strong>:</p>\n\n<p>To answer an interesting question in the comments:</p>\n\n<blockquote>\n  <p>how would you turn this into a setter as well? Not only returning the values by path, but also setting them if a new value is sent into the function? \u2013 Swader Jun 28 at 21:42</p>\n</blockquote>\n\n<p>(sidenote: sadly can't return an object with a Setter, as that would violate the calling convention; commenter seems to instead be referring to a general setter-style function with side-effects like <code>index(obj,\"a.b.etc\", value)</code> doing <code>obj.a.b.etc = value</code>.)</p>\n\n<p>The <code>reduce</code> style is not really suitable to that, but we can modify the recursive implementation:</p>\n\n<pre><code>function index(obj,is, value) {\n    if (typeof is == 'string')\n        return index(obj,is.split('.'), value);\n    else if (is.length==1 &amp;&amp; value!==undefined)\n        return obj[is[0]] = value;\n    else if (is.length==0)\n        return obj;\n    else\n        return index(obj[is[0]],is.slice(1), value);\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt; obj = {a:{b:{etc:5}}}\n\n&gt; index(obj,'a.b.etc')\n5\n&gt; index(obj,['a','b','etc'])   #works with both strings and lists\n5\n\n&gt; index(obj,'a.b.etc', 123)    #setter-mode - third argument (possibly poor form)\n123\n\n&gt; index(obj,'a.b.etc')\n123\n</code></pre>\n\n<p>...though personally I'd recommend making a separate function <code>setIndex(...)</code>. I would like to end on a side-note that the original poser of the question could (should?) be working with arrays of indices (which they can get from <code>.split</code>), rather than strings; though there's usually nothing wrong with a convenience function.</p>\n",
                    "is_accepted": true,
                    "score": 72
                },
                {
                    "body": "<p>Other proposals are a little cryptic, so I thought I'd contribute:</p>\n\n<pre><code>Object.prop = function(obj, prop, val){\n    var props = prop.split('.')\n      , final = props.pop(), p \n    while(p = props.shift()){\n        if (typeof obj[p] === 'undefined')\n            return undefined;\n        obj = obj[p]\n    }\n    return val ? (obj[final] = val) : obj[final]\n}\n\nvar obj = { a: { b: '1', c: '2' } }\n\n// get\nconsole.log(Object.prop(obj, 'a.c')) // -&gt; 2\n// set\nObject.prop(obj, 'a.c', function(){})\nconsole.log(obj) // -&gt; { a: { b: '1', c: [Function] } }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have extended the elegant answer by ninjagecko so that the function handles both dotted and/or array style references, and so that  an empty string causes the parent object to be returned.</p>\n\n<p>Here you go:</p>\n\n<pre><code>string_to_ref = function (object, reference) {\n    function arr_deref(o, ref, i) { return !ref ? o : (o[ref.slice(0, i ? -1 : ref.length)]) }\n    function dot_deref(o, ref) { return ref.split('[').reduce(arr_deref, o); }\n    return !reference ? object : reference.split('.').reduce(dot_deref, object);\n};\n</code></pre>\n\n<p>See my working jsFiddle example here: <a href=\"http://jsfiddle.net/sc0ttyd/q7zyd/\" rel=\"nofollow\">http://jsfiddle.net/sc0ttyd/q7zyd/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Given a JS Object: <code>var obj = { a: { b: '1', c: '2' } }</code> and a string <code>a.b</code> how can I convert the string to dot notation so I can go: <code>var val = obj.a.b</code>;</p>\n\n<p>If the string was just 'a' I can use <code>obj[a]</code> but this is more complex. I imagine there is some straightforward method but it escapes at present.</p>\n",
            "last_activity_date": 1419596463,
            "question_id": 6393943,
            "score": 20,
            "tags": [
                "javascript",
                "object",
                "dot-notation"
            ],
            "title": "Convert Javascript string in dot notation into an object reference"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>try this:</p>\n\n<pre><code>var div = document.getElementById('divID');\n\ndiv.innerHTML = div.innerHTML + 'Extra stuff';\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 131
                },
                {
                    "body": "<p>Using appendChild:</p>\n\n<pre><code>var theDiv = document.getElementById(\"&lt;ID_OF_THE_DIV&gt;\");\nvar content = document.createTextNode(\"&lt;YOUR_CONTENT&gt;\");\ntheDiv.appendChild(content);\n</code></pre>\n\n<p>Using innerHTML:<br>\nThis approach will remove all the listeners to the existing elements as mentioned by @BiAiB. So use caution if you are planning to use this version.</p>\n\n<pre><code>var theDiv = document.getElementById(\"&lt;ID_OF_THE_DIV&gt;\");\ntheDiv.innerHTML += \"&lt;YOUR_CONTENT&gt;\"; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 113
                },
                {
                    "body": "<p>If you are using jQuery you can use $('#mydiv').append('html content') and it will keep the existing content.</p>\n\n<p><a href=\"http://api.jquery.com/append/\">http://api.jquery.com/append/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Beware of <code>innerHTML</code>, you sort of <em>lose</em> something when you use it:</p>\n\n<pre><code>theDiv.innerHTML += 'content',     \n</code></pre>\n\n<p>Is equivalent to:</p>\n\n<pre><code>theDiv.innerHTML = theDiv.innerHTML + 'content'\n</code></pre>\n\n<p>Which will destroy all nodes inside your <code>div</code> and recreate new ones. <strong>All references and listeners to elements inside it will be lost</strong>.</p>\n\n<p>If you need to keep them (when you have attached a click handler, for example), you have to append the new contents with the DOM functions(appendChild,insertAfter,insertBefore):</p>\n\n<pre><code>var newNode = document.createElement('div');      \nnewNode.innerHTML = data;\ntheDiv.appendChild( newNode )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Even this will work:</p>\n\n<pre><code>var div = document.getElementById('divID');\n\ndiv.innerHTML += 'Text to append';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm using ajax to append data to DIV element, where I fill the DIV from JavaScript, how can I append new data to the DIV without losing the previous data found in DIV?</p>\n",
            "last_activity_date": 1426072103,
            "question_id": 5677799,
            "score": 81,
            "tags": [
                "javascript"
            ],
            "title": "How to append data to div using javascript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>This is a simple way that is inefficient but it's quite reasonable when you don't need anything too complex or you don't have many objects.</p>\n\n<p>Otherwise there are many different algorithms but most of them are quite complex to implement.</p>\n\n<p>For example you can use a <em>divide et impera</em> approach in which you cluster objects hierarchically according to their distance and you give to every cluster a bounding box that contains all the items of the cluster.Then you can check which clusters collide and avoid checking pairs of object that belong to clusters that are not colliding/overlapped.</p>\n\n<p>Otherwise you can figure out a generic space partitioning algorithm to split up in a similar way the objects to avoid useless checks. These kind of algorithms split the collision detection in two phases: a <em>coarse</em> one in which you see what objects maybe colliding and a <em>fine</em> one in which you effectively check single objects.\nFor example you can use a <strong>QuadTree</strong> <a href=\"http://it.wikipedia.org/wiki/Quadtree\" rel=\"nofollow\">wikipedia</a> to workout an easy solution..</p>\n\n<p>Take a look to wikipedia <a href=\"http://en.wikipedia.org/wiki/Collision_detection\" rel=\"nofollow\">page</a>, it can give you some hints.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The first thing to have is the actual function that will detect whether you have a collision between the ball and the object.  </p>\n\n<p>For the sake of performance it will be great to implement some rude collision detecting technique, e.g. <a href=\"http://en.wikipedia.org/wiki/Minimum_bounding_rectangle\">bounding rectangles</a> and a more accurate one if needed in case you have collision detected.<br>\nSo you'll end up with a little bit quicker but exactly the same loop.</p>\n\n<p>Another option that can help increasing performance is to do some preprocessing with the objects you have. For example you can break the whole area into cells like a generic table and store the appropriate object that are contained within the particular cells. Therefore to detect the collision you are detecting the cells occupied by the ball, get the objects from those cells and use your collision-detecting function.  </p>\n\n<p>To speed it up even more you can implement <a href=\"http://en.wikipedia.org/wiki/Kd-tree\">2d-tree</a>, <a href=\"http://en.wikipedia.org/wiki/Quadtree\">quadtree</a> or <a href=\"http://en.wikipedia.org/wiki/R-tree\">R-tree</a>.</p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<pre><code>//Off the cuff, Prototype style. \n//Note, this is not optimal; there should be some basic partitioning and caching going on. \n(function () { \n    var elements = []; \n    Element.register = function (element) { \n        for (var i=0; i&lt;elements.length; i++) { \n            if (elements[i]==element) break; \n        } \n        elements.push(element); \n        if (arguments.length&gt;1)  \n            for (var i=0; i&lt;arguments.length; i++)  \n                Element.register(arguments[i]); \n    }; \n    Element.collide = function () { \n        for (var outer=0; outer &lt; elements.length; outer++) { \n            var e1 = Object.extend( \n                $(elements[outer]).positionedOffset(), \n                $(elements[outer]).getDimensions() \n            ); \n            for (var inner=outer; inner&lt;elements.length; innter++) { \n                var e2 = Object.extend( \n                    $(elements[inner]).positionedOffset(), \n                    $(elements[inner]).getDimensions() \n                ); \n                if (     \n                    (e1.left+e1.width)&gt;=e2.left &amp;&amp; e1.left&lt;=(e2.left+e2.width) &amp;&amp; \n                    (e1.top+e1.height)&gt;=e2.top &amp;&amp; e1.top&lt;=(e2.top+e2.height) \n                ) { \n                    $(elements[inner]).fire(':collision', {element: $(elements[outer])}); \n                    $(elements[outer]).fire(':collision', {element: $(elements[inner])}); \n                } \n            } \n        } \n    }; \n})(); \n\n//Usage: \nElement.register(myElementA); \nElement.register(myElementB); \n$(myElementA).observe(':collision', function (ev) { \n    console.log('Damn, '+ev.memo.element+', that hurt!'); \n}); \n//detect collisions every 100ms \nsetInterval(Element.collide, 100);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is a lightweight solution I've come across - </p>\n\n<pre><code>function E() { // check collision\n            S = X - x;\n            D = Y - y;\n            F = w + W;\n            return (S * S + D * D &lt;= F * F)\n        }\n</code></pre>\n\n<p>The big and small variables are of 2 objects, (x coord, y coord, and w width)</p>\n\n<p>From <a href=\"http://js1k.com/2011-dysentery/demo/917\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can try <a href=\"https://sourceforge.net/projects/jquerycollision/\">jquery-collision</a>. Full disclosure: I just wrote this and released it. Didn't find a solution so I wrote it myself.</p>\n\n<p>It allows you to do:</p>\n\n<pre><code>var hit_list = $(\"#ball\").collision(\"#someobject0\");\n</code></pre>\n\n<p>which will return all the \"#someobject0\"'s that overlap with \"#ball\".</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Here's a very simple bounding rectangle routine. It expects both <code>a</code> and <code>b</code> to be objects with <code>x</code>, <code>y</code>, <code>width</code> and <code>height</code> properties:</p>\n\n<pre><code>function isCollide(a, b) {\n    return !(\n        ((a.y + a.height) &lt; (b.y)) ||\n        (a.y &gt; (b.y + b.height)) ||\n        ((a.x + a.width) &lt; b.x) ||\n        (a.x &gt; (b.x + b.width))\n    );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I have one functionality in my project.Find this here <a href=\"http://jsbin.com/imofat/660\" rel=\"nofollow\">http://jsbin.com/imofat/660</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><strong>hittest.js;</strong> detect two transparent png image (pixel) collision. \n<a href=\"http://bugraozden.com/open-source/javascript/png.hittest.js/english\" rel=\"nofollow\">Demo and download link</a></p>\n\n<p>HTML Code;</p>\n\n<pre><code>&lt;img id=\"png-object-1\" src=\"images/object1.png\" /&gt;\n&lt;img id=\"png-object-2\" src=\"images/object2.png\" /&gt;\n</code></pre>\n\n<p>Init function;</p>\n\n<pre><code>var pngObject1Element = document.getElementById( \"png-object-1\" );\nvar pngObject2Element = document.getElementById( \"png-object-2\" );\n\nvar object1HitTest = new HitTest( pngObject1Element );\n</code></pre>\n\n<p>Basic usage;</p>\n\n<pre><code>if( object1HitTest.toObject( pngObject2Element ) ) {\n    //Collision detected\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>\"bcm's\" answer, which has 0 votes at this time, is actually a great, under-appreciated answer. It uses good old Pythagoras to detect when objects are closer than their combined bounding circles. Simple collision detection often uses rectangular collision detection, which is fine if your sprites tend to be, well, rectangular. If they are circular (or otherwise less than rectangular), such as a ball, an asteroid, or any other shape where the extreme corners are usually transparent, you may find this efficient routine to be the most accurate.</p>\n\n<p>But for clarity, here is a more fully realized version of the code:</p>\n\n<pre><code>function doCollide(x1, y1, w1, x2, y2, w2) {\n    var xd = x1 - x2;\n    var yd = y1 - y2;\n    var wt = w2 + w1;\n    return (xd * xd + yd * yd &lt;= wt * wt);\n} \n</code></pre>\n\n<p>Where the parameters to pass in are the x,y and width values of two different sprite objects</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>could someone please help me to understand how collision detection works in JS? I can't use jQuery or gameQuery - already using prototype - so, I'm looking for something very simple. Not asking for complete solution, just point me to the right direction.</p>\n\n<p>Let's say there's: </p>\n\n<pre><code>&lt;div id=\"ball\"&gt;&lt;/div&gt;\nand \n&lt;div id=\"someobject0\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Now the ball is moving (any direction). \"Someobject\"(0-X) is already pre-defined and there's 20-60 of them randomly positioned like this:</p>\n\n<pre><code>#someobject {position: absolute; top: RNDpx; left: RNDpx;} \n</code></pre>\n\n<p>I can create an array with \"someobject(X)\" positions and test collision while the \"ball\" is moving... Something like:</p>\n\n<pre><code>for(var c=0; c&lt;objposArray.length; c++){\n........ and code to check ball's current position vs all objects one by one....\n}\n</code></pre>\n\n<p>But I guess this would be a \"noob\" solution and it looks pretty slow.\nIs there anything better?</p>\n",
            "last_activity_date": 1389421961,
            "question_id": 2440377,
            "score": 24,
            "tags": [
                "javascript",
                "collision-detection"
            ],
            "title": "Javascript: Collision detection"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p><a href=\"http://developer.yahoo.com/yui/compressor/\" rel=\"nofollow\">YUI minifier</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you are using PHP you might also want to take a look at <a href=\"http://code.google.com/p/minify/\">minify</a> which can minify and combine JavaScript files. The integration is pretty easy and can be done by defined groups of files or an easy query string. Minified files are also cached to reduce the server load and you can add expire headers through minify.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are several you can use/try:</p>\n\n<ul>\n<li><a href=\"http://developer.yahoo.com/yui/compressor/\">YUI compressor</a></li>\n<li><a href=\"http://www.crockford.com/javascript/jsmin.html\">jsmin</a></li>\n<li><a href=\"http://www.asp.net/ajaxLibrary/AjaxMinDocumentation.ashx\">Microsoft Ajax minifier</a> (has hypercrunching)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Sometimes i use this: <a href=\"http://closure-compiler.appspot.com/home\" rel=\"nofollow\">http://closure-compiler.appspot.com/home</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've used YUI Compressor for several projects and it's always worked perfectly: <a href=\"http://developer.yahoo.com/yui/compressor/\">http://developer.yahoo.com/yui/compressor/</a>.</p>\n\n<p><strong>[UPDATE 25 April 2013: @Angelo.hannes points out in the comments that YUI Compressor is now deprecated. I recommend UglifyJS instead.]</strong></p>\n\n<p>Google Closure Compiler generally achieves smaller files than YUI Compressor, particularly if you use the advanced mode, which looks worryingly meddlesome to me but has worked well on the one project I've used it on: <a href=\"http://code.google.com/closure/compiler/\">http://code.google.com/closure/compiler/</a></p>\n\n<p><strong>Update 28 June 2012</strong></p>\n\n<p>Another compressor that has become popular since this answer was written is <a href=\"https://github.com/mishoo/UglifyJS/\">UglifyJS</a>. Several big projects now use it, as do my recent projects, and I've been very impressed with it since switching.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Uglify JS: <a href=\"http://github.com/mishoo/UglifyJS\">http://github.com/mishoo/UglifyJS</a></p>\n\n<p>It is now being used by the jQuery project.</p>\n",
                    "is_accepted": true,
                    "score": 78
                },
                {
                    "body": "<p><a href=\"http://www.jscompressor.com\" rel=\"nofollow\">jscompressor.com</a> is pretty good.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Pretty Diff - <a href=\"http://prettydiff.com/?m=minify\">http://prettydiff.com/?m=minify</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>JavaScript Minifier also gives a good API you can use programatically:</p>\n\n<ul>\n<li><a href=\"http://javascript-minifier.com/\" rel=\"nofollow\">http://javascript-minifier.com/</a></li>\n</ul>\n\n<p>e.g.</p>\n\n<p><code>\ncurl -X POST -s --data-urlencode 'input=$(function() { alert(\"Hello, World!\"); });' http://javascript-minifier.com/raw\n</code></p>\n\n<p>Or by uploading a file and redirecting to a new file:</p>\n\n<p><code>\ncurl -X POST -s --data-urlencode 'input@ready.js' http://javascript-minifier.com/raw &gt; ready.min.js\n</code></p>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What JavaScript minifier do you recommend?</p>\n",
            "last_activity_date": 1383330481,
            "question_id": 3520285,
            "score": 84,
            "tags": [
                "javascript",
                "minify"
            ],
            "title": "Is there a good JavaScript minifier?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You should always use the direct <code>.attribute</code> form (but see the quirksmode link below) if you want programmatic access in JavaScript. It should handle the different types of attributes (think \"onload\") correctly.</p>\n\n<p>Use <code>getAttribute</code>/<code>setAttribute</code> when you wish to deal with the DOM as it is (e.g. literal text only). Different browsers confuse the two. See <a href=\"http://www.quirksmode.org/dom/w3c_core.html#attributes\">Quirks modes: attribute (in)compatibility</a>.</p>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p>From <a href=\"http://www.amazon.co.uk/JavaScript-Definitive-Guide-Guides/dp/0596805527\">Javascript: The Definitive Guide</a>, it clarifies things. It notes that <a href=\"https://developer.mozilla.org/en/docs/Web/API/HTMLElement\">HTMLElement</a> objects of a HTML doc define JS properties that correspond to all standard HTML attributes.</p>\n\n<p>So you only need to use <code>setAttribute</code> for non-standard attributes.</p>\n\n<p>Example:</p>\n\n<pre><code>node.className = 'test'; // works\nnode.frameborder = '0'; // doesn't work - non standard attribute\nnode.setAttribute('frameborder', '0'); // works\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>This looks like one case where it is better to use setAttribute:</p>\n\n<p><a href=\"https://dev.opera.com/articles/efficient-javascript/?page=3#reflow\" rel=\"nofollow\">Dev.Opera \u2014 Efficient JavaScript</a></p>\n\n<pre><code>var posElem = document.getElementById('animation');\nvar newStyle = 'background: ' + newBack + ';' +\n'color: ' + newColor + ';' +\n    'border: ' + newBorder + ';';\nif(typeof(posElem.style.cssText) != 'undefined') {\n    posElem.style.cssText = newStyle;\n} else {\n    posElem.setAttribute('style', newStyle);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>One case I found where <code>setAttribute</code> is necessary is when changing ARIA attributes, since there are no corresponding properties. For example</p>\n\n<pre><code>x.setAttribute('aria-label', 'Test');\nx.getAttribute('aria-label');\n</code></pre>\n\n<p>There's no <code>x.arialabel</code> or anything like that, so you have to use setAttribute.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a best-practice indication about using setAttribute instead of the dot (.) attribute notation?</p>\n\n<p>e.g.<br/>\n<code>myObj.setAttribute(\"class\",\"nameOfClass\");</code>\n<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;and&nbsp;-<br/>\n<code>myObj.className=\"nameOfClass\";</code></p>\n\n<p>OR</p>\n\n<p><code>myObj.setAttribute(\"id\",\"someID\");</code>\n<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;and&nbsp;-<br/>\n<code>myObj.id=\"someID\";</code></p>\n\n<p><br/>etc</p>\n\n<p>Thank you.</p>\n",
            "last_activity_date": 1420419278,
            "question_id": 3919291,
            "score": 57,
            "tags": [
                "javascript",
                "attributes",
                "setattribute"
            ],
            "title": "When to use setAttribute vs .attribute= in JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>NaN != Nan because they are not necessary the SAME non-number. Thus it makes a lot of sense...\nAlso why floats have both +0.00 and -0.00 that are not the same. Rounding may do that they are actually not zero.</p>\n\n<p>As for typeof, that depends on the language. And most languages will say that NaN is a float, double or number depending on how they classify it... I know of no languages that will say this is an unknown type or null.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Well, <code>NaN</code> is still a numeric <em>type</em>, despite the fact it actually stands for Not-A-Number :-)</p>\n\n<p><code>NaN</code> just means the specific value cannot be represented within the limitations of the numeric type (although that could be said for all numbers that have to be rounded to fit, but <code>NaN</code> is a special case).</p>\n\n<p>A specific <code>NaN</code> is not considered equal to another <code>NaN</code> because they may be different values. However, <code>NaN</code> is still a number type, just like 2718 or 31415.</p>\n\n<hr>\n\n<p>As to your updated question to explain in layman's terms:</p>\n\n<blockquote>\n  <p>A comparison with a NaN always returns an unordered result even when comparing with itself. The comparison predicates are either signalling or non-signalling, the signalling versions signal an invalid exception for such comparisons. The equality and inequality predicates are non-signalling so x = x returning false can be used to test if x is a quiet NaN.</p>\n</blockquote>\n\n<p>All this means is (broken down into parts):</p>\n\n<blockquote>\n  <p>A comparison with a NaN always returns an unordered result even when comparing with itself.</p>\n</blockquote>\n\n<p>Basically, a <code>NaN</code> is not equal to any other number, including another <code>NaN</code>, and even including <em>itself</em>.</p>\n\n<blockquote>\n  <p>The comparison predicates are either signalling or non-signalling, the signalling versions signal an invalid exception for such comparisons.</p>\n</blockquote>\n\n<p>Attempting to do comparison (less than, greater than, and so on) operations between a <code>NaN</code> and another number can either result in an exception being thrown (signalling) or just getting another <code>NaN</code> as the result (non-signalling or quiet).</p>\n\n<blockquote>\n  <p>The equality and inequality predicates are non-signalling so x = x returning false can be used to test if x is a quiet NaN.</p>\n</blockquote>\n\n<p>Tests for equality (equal to, not equal to) are never signalling so using them will not cause an exception. If you have a regular number <code>x</code>, then <code>x == x</code> will always be true. If <code>x</code> is a <code>NaN</code>, then <code>x == x</code> will always be false. It's giving you a way to detect <code>NaN</code> easily (quietly).</p>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>This is simply because <code>NaN</code> is a property of the Number object in JS, It has nothing to do with it being a number.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It means Not a Number. It is not a peculiarity of javascript but common computer science principle.</p>\n\n<p>From <a href=\"http://en.wikipedia.org/wiki/NaN\">http://en.wikipedia.org/wiki/NaN</a>:</p>\n\n<blockquote>\n  <p>There are three kinds of operation\n  which return NaN:</p>\n  \n  <p>Operations with a NaN as at least one operand </p>\n  \n  <p>Indeterminate forms </p>\n  \n  <ul>\n  <li>The divisions 0/0, \u221e/\u221e, \u221e/\u2212\u221e, \u2212\u221e/\u221e, and \u2212\u221e/\u2212\u221e </li>\n  <li>The multiplications 0\u00d7\u221e and 0\u00d7\u2212\u221e </li>\n  <li>The power 1^\u221e </li>\n  <li>The additions \u221e + (\u2212\u221e), (\u2212\u221e) + \u221e and equivalent subtractions. </li>\n  </ul>\n  \n  <p>Real operations with complex results: </p>\n  \n  <ul>\n  <li>The square root of a negative number </li>\n  <li>The logarithm of a negative number </li>\n  <li>The tangent of an odd multiple of 90 degrees (or \u03c0/2 radians) </li>\n  <li>The inverse sine or cosine of a number which is less than \u22121 or\n  greater than +1.</li>\n  </ul>\n</blockquote>\n\n<p>All these values may not be the same. A simple test for a NaN is to test <code>value == value</code> is false.</p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>NaN is a valid floating point value (http://en.wikipedia.org/wiki/NaN)</p>\n\n<p>and NaN === NaN is false because they're not necessarily the same non-number</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The best way to think of NAN is that its not a <strong>known</strong> number. Thats why NAN != NAN because each NAN value represents some unique unknown number. NANs are necessary because floating point numbers have a limited range of values. In some cases rounding occurs where the lower bits are lost which leads to what appears to be nonsense like 1.0/11*11 != 1.0. Really large values which are greater are NANs with infinity being a perfect example.</p>\n\n<p>Given we only have ten fingers any attempt to show values greater than 10 are impossible, which means such values must be NANs because we have lost the true value of this greater than 10 value. The same is true of floating point values, where the value exceeds the limits of what can be held in a float.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Javascript uses NaN to represent anything it encounters that can't be represented any other way by its specifications. It does not mean it is not a number. It's just the easiest way to describe the encounter. NaN means that it or an object that refers to it could not be represented in any other way by javascript. For all practical purposes, it is 'unknown'. Being 'unknown' it cannot tell you what it is nor even if it is itself. It is not even the object it is assigned to. It can only tell you what it is not, and not-ness or nothingness can only be described mathematically in a programming language. Since mathematics is about numbers, javascript represents nothingness as NaN. That doesn't mean it's not a number. It means we can't read it any other way that makes sense. That's why it can't even equal itself. Because it doesn't.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is quite an old entry, nonetheless, take a look at this, it explains it quite thoroughly: <a href=\"http://kiro.me/blog/typeof_nan.html\" rel=\"nofollow\">http://kiro.me/blog/typeof_nan.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Well, even funnier is:</p>\n\n<pre><code>a = NaN\na == a // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "\n\n<p><code>typeof NaN</code> returns <code>'number'</code> because:</p>\n\n<ul>\n<li><p>ECMAScript spec says the Number type includes NaN:</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.20\" rel=\"nofollow\"><strong>4.3.20 Number type</strong></a></p>\n  \n  <p>set of all possible Number values including the special \u201cNot-a-Number\u201d\n  (NaN) values, positive infinity, and negative infinity</p>\n</blockquote></li>\n<li><p>So <code>typeof</code> returns accordingly:</p>\n\n<blockquote>\n  <p><strong><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.3\" rel=\"nofollow\">11.4.3 The typeof Operator</strong></a></p>\n  \n  <p>The production <em>UnaryExpression</em> : <code>typeof</code> <em>UnaryExpression</em> is\n  evaluated as follows:</p>\n  \n  <ol>\n  <li>Let <em>val</em> be the result of evaluating <em>UnaryExpression</em>.</li>\n  <li>If <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8\" rel=\"nofollow\">Type</a>(<em>val</em>) is <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.7\" rel=\"nofollow\">Reference</a>, then\n  <ol>\n  <li>If <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.7\" rel=\"nofollow\">IsUnresolvableReference</a>(<em>val</em>) is <strong>true</strong>, return <code>\"undefined\"</code>.</li>\n  <li>Let <em>val</em> be <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.7.1\" rel=\"nofollow\">GetValue</a>(<em>val</em>).</li>\n  </ol></li>\n  <li>Return a String determined by <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8\" rel=\"nofollow\">Type</a>(<em>val</em>) according to Table 20.<br>\n  &#8203;  </li>\n  </ol>\n  \n  <p></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>                Table 20 \u2014 typeof Operator Results\n==================================================================\n|        Type of val         |              Result               |\n==================================================================\n| Undefined                  | \"undefined\"                       |\n|----------------------------------------------------------------|\n| Null                       | \"object\"                          |\n|----------------------------------------------------------------|\n| Boolean                    | \"boolean\"                         |\n|----------------------------------------------------------------|\n| Number                     | \"number\"                          |\n|----------------------------------------------------------------|\n| String                     | \"string\"                          |\n|----------------------------------------------------------------|\n| Object (native and does    | \"object\"                          |\n| not implement [[Call]])    |                                   |\n|----------------------------------------------------------------|\n| Object (native or host and | \"function\"                        |\n| does implement [[Call]])   |                                   |\n|----------------------------------------------------------------|\n| Object (host and does not  | Implementation-defined except may |\n| implement [[Call]])        | not be \"undefined\", \"boolean\",    |\n|                            | \"number\", or \"string\".            |\n------------------------------------------------------------------\n</code></pre>\n</blockquote></li>\n</ul>\n\n<p>This behavior is in accordance with <a href=\"https://en.wikipedia.org/wiki/IEEE_floating_point\" rel=\"nofollow\">IEEE Standard for Floating-Point Arithmetic (IEEE 754)</a>:</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.19\" rel=\"nofollow\"><strong>4.3.19 Number value</strong></a></p>\n  \n  <p>primitive value corresponding to a double-precision 64-bit binary\n  format IEEE 754 value</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.23\" rel=\"nofollow\"><strong>4.3.23 NaN</strong></a></p>\n  \n  <p>number value that is a IEEE 754 \u201cNot-a-Number\u201d value</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.5\" rel=\"nofollow\"><strong>8.5 The Number Type</strong></a></p>\n  \n  <p>The Number type has exactly 18437736874454810627 (that is, 2<sup>53</sup>\u22122<sup>64</sup>+3)\n  values, representing the double-precision 64-bit format IEEE 754\n  values as specified in the IEEE Standard for Binary Floating-Point\n  Arithmetic, except that the 9007199254740990 (that is, 2<sup>53</sup>\u22122) distinct\n  \u201cNot-a-Number\u201d values of the IEEE Standard are represented in\n  ECMAScript as a single special <em>NaN</em> value. (Note that the <em>NaN</em> value\n  is produced by the program expression <code>NaN</code>.)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Just out of curiosity. </p>\n\n<p>It doesn't seem very logical that <code>typeof NaN</code> is number. Just like <code>NaN === NaN</code> or <code>NaN == NaN</code> returning false, by the way. Is this one of the peculiarities of javascript, or would there be a reason for this?</p>\n\n<p>Edit: thanks for your answers. It's not an easy thing to get ones head around though. Reading answers and the wiki I understood more, but still, a sentence like </p>\n\n<blockquote>\n  <p>A comparison with a NaN always returns an unordered result even when comparing with itself. The comparison predicates are either signaling or non-signaling, the signaling versions signal an invalid exception for such comparisons. The equality and inequality predicates are non-signaling so x = x returning false can be used to test if x is a quiet NaN. </p>\n</blockquote>\n\n<p>just keeps my head spinning. If someone can translate this in human (as opposed to, say, mathematician) readable language, I would be gratefull.</p>\n",
            "last_activity_date": 1420923572,
            "question_id": 2801601,
            "score": 49,
            "tags": [
                "javascript"
            ],
            "title": "Why does typeof NaN return &#39;number&#39;?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Which element is the <code>offsetParent</code> of another is not well-specified and may vary across browsers. It is not guaranteed to the be the scrollable parent you are looking for.</p>\n\n<p>The body itself also shouldn't be the page's main scrollable element. It only is in Quirks Mode, which in general you would want to avoid.</p>\n\n<p>The <code>offsetTop</code>\u200b/\u200b<code>offsetLeft</code>\u200b/\u200b<code>offsetParent</code> measurements aren't terribly useful by themselves, they're only really reliable when you use them in a loop to get the total page-relative co-ordinates (as <code>position()</code> in jQuery does). You should know which is the element you want to scroll and find out the difference in page co-ordinates between that and the descendant <code>target</code> to find out how much to scroll it by.</p>\n\n<p>Or if it's always the page itself you're talking about scrolling, just use a <code>location.href= '#'+target.id</code> navigation instead.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is a bug in Chrome (not in Safari at the time we checked) that gives unexpected results in Javascript's various width and height measurements when opening tabs in the background (<a href=\"http://code.google.com/p/chromium/issues/detail?id=13240\" rel=\"nofollow\">bug details here</a>) - we logged the bug in June and it's remained unresolved since.</p>\n\n<p>It's possible you've encountered the bug in what you're attempting to do.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Yeah, there appears to be a bug in Chrome when it comes to modifying the <code>body</code>, trying to make it into an offsetParent. As a work-around, I suggest you simply add another div to wrap the <code>#content</code> div, and make <em>that</em> scroll:</p>\n\n<pre><code>html, body { height: 100%; padding: 0; } \nhtml { width: 100%; background-color: #222; overflow: hidden; margin: 0; } \nbody \n{ \n   width: 40em; margin: 0px auto; /* narrow center column layout */\n   background-color: white; \n   position: relative; /* allow positioning children relative to this element */\n} \n#scrollContainer /* wraps #content, scrolls */\n{ \n  overflow: auto; /* scroll! */\n  position:absolute; /* make offsetParent */\n  top: 0; height: 100%; width: 100%; /* fill parent */\n} \n#header \n{ \n  position: absolute; \n  top: 0px; height: 50px; width: 38.5em; \n  background-color: white; \n  z-index: 1; /* sit above #content in final layout */\n} \n#content { padding: 5px 14px 50px 5px;  } \n</code></pre>\n\n<p>Tested in FF 3.5.5, Chrome 3.0.195.33, IE8  </p>\n\n<p>Live demonstration:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function() {\r\n        $('#header').find('button').click(function(ev) {\r\n          var button = $(this), target = $('div.' + button.attr('class'));\r\n          var scroll = target.offsetParent().scrollTop(); \r\n          target.offsetParent().scrollTop(target.offset().top + scroll - 50);\r\n        });\r\n      });</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>html, body { height: 100%; padding: 0; }\r\n      html { width: 100%; background-color: #222; overflow: hidden; margin: 0; }\r\n      body { width: 40em; margin: 0px auto; background-color: white; position: relative; }\r\n      #scrollContainer { overflow: auto; position:absolute; top: 0; height: 100%; width: 100%; }\r\n      #header { position: absolute; top: 0px; height: 50px; width: 38.5em; background-color: white; z-index: 1; }\r\n      #content { padding: 5px 14px 50px 5px;  }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n    &lt;div id='header'&gt; \r\n      Header Box\r\n      &lt;button class='A'&gt;A&lt;/button&gt; \r\n      &lt;button class='B'&gt;B&lt;/button&gt; \r\n      &lt;button class='C'&gt;C&lt;/button&gt; \r\n    &lt;/div&gt; \r\n    &lt;div id='scrollContainer'&gt;\r\n    &lt;div id='content'&gt; \r\n      &lt;div style='height: 50px'&gt; &lt;/div&gt; \r\n      &lt;div class='A'&gt; \r\n        &lt;h1&gt;A&lt;/h1&gt; \r\n        &lt;p&gt;My name is Boffer Bings. I was born of honest parents in one of the humbler walks of life, my father being a manufacturer of dog-oil and my mother having a small studio in the shadow of the village church, where she disposed of unwelcome babes. In my boyhood I was trained to habits of industry; I not only assisted my father in procuring dogs for his vats, but was frequently employed by my mother to carry away the debris of her work in the studio. In performance of this duty I sometimes had need of all my natural intelligence for all the law officers of the vicinity were opposed to my mother's business. They were not elected on an opposition ticket, and the matter had never been made a political issue; it just happened so. My father's business of making dog-oil was, naturally, less unpopular, though the owners of missing dogs sometimes regarded him with suspicion, which was reflected, to some extent, upon me. My father had, as silent partners, all the physicians of the town, who seldom wrote a prescription which did not contain what they were pleased to designate as _Ol. can._ It is really the most valuable medicine ever discovered. But most persons are unwilling to make personal sacrifices for the afflicted, and it was evident that many of the fattest dogs in town had been forbidden to play with me--a fact which pained my young sensibilities, and at one time came near driving me to become a pirate.\r\n      &lt;/div&gt; \r\n      &lt;div class='B'&gt; \r\n        &lt;h1&gt;B&lt;/h1&gt; \r\n        &lt;p&gt; \r\n        Looking back upon those days, I cannot but regret, at times, that by indirectly bringing my beloved parents to their death I was the author of misfortunes profoundly affecting my future.\r\n        &lt;p&gt; \r\n        One evening while passing my father's oil factory with the body of a foundling from my mother's studio I saw a constable who seemed to be closely watching my movements. Young as I was, I had learned that a constable's acts, of whatever apparent character, are prompted by the most reprehensible motives, and I avoided him by dodging into the oilery by a side door which happened to stand ajar. I locked it at once and was alone with my dead. My father had retired for the night. The only light in the place came from the furnace, which glowed a deep, rich crimson under one of the vats, casting ruddy reflections on the walls. Within the cauldron the oil still rolled in indolent ebullition, occasionally pushing to the surface a piece of dog. Seating myself to wait for the constable to go away, I held the naked body of the foundling in my lap and tenderly stroked its short, silken hair. Ah, how beautiful it was! Even at that early age I was passionately fond of children, and as I looked upon this cherub I could almost find it in my heart to wish that the small, red wound upon its breast--the work of my dear mother--had not been mortal.\r\n      &lt;/div&gt; \r\n      &lt;div class='C'&gt; \r\n        &lt;h1&gt;C&lt;/h1&gt; \r\n        &lt;p&gt;It had been my custom to throw the babes into the river which nature had thoughtfully provided for the purpose, but that night I did not dare to leave the oilery for fear of the constable. \"After all,\" I said to myself, \"it cannot greatly matter if I put it into this cauldron. My father will never know the bones from those of a puppy, and the few deaths which may result from administering another kind of oil for the incomparable _ol. can._ are not important in a population which increases so rapidly.\" In short, I took the first step in crime and brought myself untold sorrow by casting the babe into the cauldron.\r\n      &lt;/div&gt; \r\n      &lt;div style='height: 75em;'&gt; &lt;/div&gt; \r\n    &lt;/div&gt; \r\n    &lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>I was having this problem in safari and chrome (Mac) and discovered that .scrollTop would work on <code>$(\"body\")</code> but not <code>$(\"html, body\")</code>, FF and IE however works the other way round. A simple browser detect fixes the issue:</p>\n\n<pre><code>if($.browser.safari) bodyelem = $(\"body\")\nelse bodyelem = $(\"html,body\")\n\nbodyelem.scrollTop(100)\n</code></pre>\n\n<p>The jquery browser value for chrome is safari so you only need to do a detect on that</p>\n\n<p>Hope this helps someone</p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>The browser support status is this:</p>\n\n<p>IE8, Firefox, Opera: <code>$(\"html\")</code></p>\n\n<p>Chrome, Safari: <code>$(\"body\")</code></p>\n\n<p>So this works:</p>\n\n<pre><code>bodyelem = $.browser.safari ? $(\"body\") : $(\"html\") ;\nbodyelem.animate( {scrollTop: 0}, 500 );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Works for Safari, Firefox, and IE7 (haven't tried IE8).  Simple test:</p>\n\n<p><code>&lt;button onclick='$(\"body,html\").scrollTop(0);'&gt;  Top &lt;/button&gt;</code></p>\n\n<p><code>&lt;button onclick='$(\"body,html\").scrollTop(100);'&gt; Middle &lt;/button&gt;</code></p>\n\n<p><code>&lt;button onclick='$(\"body,html\").scrollTop(250);'&gt; Bottom &lt;/button&gt;</code></p>\n\n<p>Most examples use either one or both, but in reverse order (i.e., \"html,body\").</p>\n\n<p>Cheers.</p>\n\n<p>(And semantic purists out there, don't bust my chops -- I've been looking for this for weeks, this is a <em>simple</em> example, that validates XHTML strict.  Feel free to create 27 layers of abstraction and event binding bloat for your OCD peace of mind.  Just please give due credit, since the folks in the jQuery forums, SO, and the G couldn't cough up the goods. Peace out.)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code> $(\"body,html,document\").scrollTop($(\"#map_canvas\").position().top);\n</code></pre>\n\n<p>This works for Chrome 7 ,IE6,IE7,IE8,IE9,FF 3.6 ,Safari 5</p>\n\n<p><strong>2012 UPATE</strong><br>\nthis is still good but i had to use it again.. sometimes position doesnt work  so this is alternative</p>\n\n<pre><code>$(\"body,html,document\").scrollTop($(\"#map_canvas\").offset().top);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>It's not really a bug, just a difference in implantation by the browser vendors. </p>\n\n<p>As a rule avoid browser sniffing. There is a nifty jQuery fix which is hinted at in the answers.</p>\n\n<p>This is what works for me. $('html:not(:animated),body:not(:animated)').scrollTop()</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This appears to be working in FF and WebKit; IE not tested so far.</p>\n\n<pre><code>$(document).scrollTop();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>setTimeout(function() { \n   $(\"body,html,document\").scrollTop( $('body').height() ); \n}, 100);\n</code></pre>\n\n<p>This probably should work even if time is 10ms.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For the scroll : <strong>'html' or 'body' for setter</strong> (depend on browser)... <strong>'window' for getter</strong>...</p>\n\n<p>A jsFiddle for testing is here : <a href=\"http://jsfiddle.net/molokoloco/uCrLa/\">http://jsfiddle.net/molokoloco/uCrLa/</a></p>\n\n<pre><code>var $window = $(window), // Set in cache, intensive use !\n    $document = $(document),\n    $body = $('body'),\n    scrollElement = 'html, body',\n    $scrollElement = $();\n\nvar isAnimated = false;\n\n// Find scrollElement\n// Inspired by http://www.zachstronaut.com/posts/2009/01/18/jquery-smooth-scroll-bugs.html\n$(scrollElement).each(function(i) {\n    // 'html, body' for setter... window for getter... \n    var initScrollTop = parseInt($(this).scrollTop(), 10);\n    $(this).scrollTop(initScrollTop + 1);\n    if ($window.scrollTop() == initScrollTop + 1) {\n        scrollElement = this.nodeName.toLowerCase(); // html OR body\n        return false; // Break\n    }\n});\n$scrollElement = $(scrollElement);\n\n// UTILITIES...\nvar getHash = function() {\n        return window.location.hash || '';\n    },\n    setHash = function(hash) {\n        if (hash &amp;&amp; getHash() != hash) window.location.hash = hash;\n    },\n    getWinWidth = function() {\n        return $window.width();\n    },\n    // iphone ? ((window.innerWidth &amp;&amp; window.innerWidth &gt; 0) ? window.innerWidth : $window.width());\n    getWinHeight = function() {\n        return $window.height();\n    },\n    // iphone ? ((window.innerHeight &amp;&amp; window.innerHeight &gt; 0) ? window.innerHeight : $window.height());\n    getPageWidth = function() {\n        return $document.width();\n    },\n    getPageHeight = function() {\n        return $document.height();\n    },\n    getScrollTop = function() {\n        return parseInt($scrollElement.scrollTop() || $window.scrollTop(), 10);\n    },\n    setScrollTop = function(y) {\n        $scrollElement.stop(true, false).scrollTop(y);\n    },\n    myScrollTo = function(y, newAnchror) { // Call page scrolling to a value (like native window.scrollBy(x, y)) // Can be flooded\n        isAnimated = true; // kill waypoint AUTO hash\n        var duration = 360 + (Math.abs(y - getScrollTop()) * 0.42); // Duration depend on distance...\n        if (duration &gt; 2222) duration = 0; // Instant go !! ^^\n        $scrollElement.stop(true, false).animate({\n            scrollTop: y\n        }, {\n            duration: duration,\n            complete: function() { // Listenner of scroll finish...\n                if (newAnchror) setHash(newAnchror); // If new anchor\n                isAnimated = false;\n            }\n        });\n    },\n    goToScreen = function(dir) { // Scroll viewport page by paginette // 1, -1 or factor\n        var winH = parseInt((getWinHeight() * 0.75) * dir); // 75% de la hauteur visible comme unite\n        myScrollTo(getScrollTop() + winH);\n    };\n\n\nmyScrollTo((getPageHeight() / 2), 'iamAMiddleAnchor');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>As you'll probably find out, the above solutions fail across browsers/OSs.</p>\n\n<p>See <a href=\"http://stackoverflow.com/questions/9041406/jquery-scrolltop-inconsistent-across-browsers\">jQuery scrollTop inconsistent across browsers</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is not a big choice of elements that might get auto-assigned with a scrollTop value as we scroll a webpage.</p>\n\n<p>So I wrote this little function to iterate through the probable elements and return the one we seek.</p>\n\n<pre><code>var grab=function (){\n    var el=$();\n        $('body#my_body, html, document').each(function(){\n            if ($(this).scrollTop()&gt;0) {\n                el= ($(this));\n                return false;\n            }\n        })\n    return el;\n}\n//alert(grab().scrollTop());\n</code></pre>\n\n<p>In Google chrome it would get us the body, in IE - HTML. </p>\n\n<p>(Note, we don't need to set <code>overflow:auto</code> explicitly on our html or body that way.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was facing this problem, I created this link at the bottom and implemented the jQuery scrollTop code and it worked perfectly in Firefox, IE, Opera but didn't work in Chrome and Safari. I'm learning jQuery so I don't know if this solution is technically perfect but this worked for me. I just implemented 2 ScrollTop codes the first one uses $('html') which works for Firefox, etc. The second one uses $('html body') this works for Chrome and Safari.</p>\n\n<pre><code>$('a#top').click(function() {\n\n    $('html').animate({scrollTop: 0}, 'slow');\n    return false;\n\n    $('html body').animate({scrollTop: 0}, 'slow');\n    return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>how about</p>\n\n<pre><code>var top = $('html').scrollTop() || $('body').scrollTop();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It worked for me, just leave it to the jQuery.</p>\n\n<pre><code>$(\"html,body\").animate({ scrollTop: 0 }, 1);\n</code></pre>\n\n<p>Basically you should know the browser and write the code considering browser differences. Since jQuery is cross-browser it should handle the first step. And finally you fake the js-engine of the browser by animating the scrolling in 1 millisecond.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Indeed, seems like animation is required to make it work in Safari. I ended up with:</p>\n\n<pre><code>if($.browser.safari) \n    bodyelem = $(\"body\");\nelse \n    bodyelem = $(\"html,body\");\n\nbodyelem.animate({scrollTop:0},{queue:false, duration:100, easing:\"linear\", complete:callbackFunc});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am not sure if this is the case:</p>\n\n<p>I was using Google's CDN for jQuery i.e.</p>\n\n\n\n<p>Putting <code>\"https:\"</code> before <code>//ajax.google.......</code>\nworked, it seems Safari recognized it as a local path (checked it by - Inspect Element)</p>\n\n<p>Sorry, only tested in Safari 7.0.3 :(</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've got a simple setup to allow a \"help\"-style window to be loaded and scrolled to a particular point on the page. More or less the code looks like this:</p>\n\n<pre><code>var target = /* code */;\ntarget.offsetParent().scrollTop(target.offset().top - fudgeValue);\n</code></pre>\n\n<p>The target of the scroll and the fudge value are determined by a couple of hints dropped on the page, and I'm having no problems with that part of this mechanism anywhere.  In Firefox and IE8, the above code works exactly like I want: the scrolled box (in this case, the page body) correctly scrolls the contained stuff to the right point in the window when it's told to do so.</p>\n\n<p>In Chrome and Safari, however, the call to scrollTop() apparently does nothing at all. All the numbers are OK, and the target refers to the right thing (and the offsetParent() is indeed the body element), but nothing at all happens.  As far as I can tell from googling around, this is supposed to work.  Is there something funny about the renderer under Safari and Chrome?</p>\n\n<p>This is jQuery 1.3.2 if that matters.</p>\n\n<p>Test page: <a href=\"http://gutfullofbeer.net/scrolltop.html\">http://gutfullofbeer.net/scrolltop.html</a></p>\n",
            "last_activity_date": 1423761949,
            "question_id": 1830080,
            "score": 31,
            "tags": [
                "javascript",
                "jquery",
                "safari"
            ],
            "title": "jQuery scrollTop() doesn&#39;t seem to work in Safari or Chrome (Windows)"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>There's always the HTML5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download\"><code>download</code></a> attribute :</p>\n\n<pre><code>var A = [['n','sqrt(n)']];\n\nfor(var j=1; j&lt;10; ++j){ \n    A.push([j, Math.sqrt(j)]);\n}\n\nvar csvRows = [];\n\nfor(var i=0, l=A.length; i&lt;l; ++i){\n    csvRows.push(A[i].join(','));\n}\n\nvar csvString = csvRows.join(\"%0A\");\nvar a         = document.createElement('a');\na.href        = 'data:attachment/csv,' + csvString;\na.target      = '_blank';\na.download    = 'myFile.csv';\n\ndocument.body.appendChild(a);\na.click();\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/nkm2b/222/\"><strong>FIDDLE</strong></a></p>\n\n<p>Tested in Chrome and Firefox, works fine in the newest versions.<br>\nWorks in Opera as well, but does not set the filename.<br>\nDoes not seem to work in IE9 (big suprise).</p>\n\n<p>An overview over what browsers support the download attribute can be found <a href=\"http://caniuse.com/download\"><strong>Here</strong></a><br>\nFor non-supporting browsers, one has to set the appropriate headers on the serverside.</p>\n",
                    "is_accepted": true,
                    "score": 49
                },
                {
                    "body": "<p>See adeneo's comment, but don't forget encodeURIComponent!</p>\n\n<pre><code>a.href     = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csvString);\n</code></pre>\n\n<p>Also, I needed to do \"\\r\\n\" not just \"\\n\" for the row delimiter.</p>\n\n<pre><code>var csvString = csvRows.join(\"\\r\\n\");\n</code></pre>\n\n<p>Revised fiddle: <a href=\"http://jsfiddle.net/7Q3c6/\" rel=\"nofollow\">http://jsfiddle.net/7Q3c6/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This works for Firefox and chrome... For IE the below can be used.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if (window.navigator.msSaveOrOpenBlob) {\r\n  var blob = new Blob([decodeURIComponent(encodeURI(result.data))], {\r\n    type: \"text/csv;charset=utf-8;\"\r\n  });\r\n  navigator.msSaveBlob(blob, 'FileName.csv');\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Once I packed JS code doing that to a tiny library:</p>\n\n<p><a href=\"https://github.com/AlexLibs/client-side-csv-generator\" rel=\"nofollow\">https://github.com/AlexLibs/client-side-csv-generator</a></p>\n\n<p>The Code, Documentation and Demo/Playground are provided on Github.</p>\n\n<p>Enjoy :)</p>\n\n<p>Pull requests welcome.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If we were on a nodeJS server, we could write a header, set a mime type, and send it:</p>\n\n<pre><code>res.header(\"Content-Disposition\", \"attachment;filename=\"+name+\".csv\"); \nres.type(\"text/csv\");\nres.send(200, csvString);\n</code></pre>\n\n<p>and because of the headers, the browser will create a download for the named csv file.</p>\n\n<p>When useful data is generated in a browser, one solution to getting it in a CSV file is to use ajax, upload it to the server, (perhaps optionally save it there) and get the server to send it back with these headers to become a csv download back at the browser.</p>\n\n<p>However, I would like a 100% browser solution that does not involve ping-pong with the server.</p>\n\n<p>So it occurred to me that one could open a new window and try to set the header with a META tag equivalent.  </p>\n\n<p>But this doesn't work for me in recent Chrome.  </p>\n\n<p>I do get a new window, and it contains the csvString, but does not act as a download.</p>\n\n<p>I guess I expected to get either a download in a bottom tab or a blank new window with a download in a bottom tab.  </p>\n\n<p>I'm wondering if the meta tags are correct or if other tags are also needed.</p>\n\n<p>Is there a way to make this work without punting it to the server?</p>\n\n<p><a href=\"http://jsfiddle.net/7SDXv/8/\">JsFiddle for Creating a CSV in the Browser (not working - outputs window but no download)</a></p>\n\n<pre><code>var A = [['n','sqrt(n)']];  // initialize array of rows with header row as 1st item\nfor(var j=1;j&lt;10;++j){ A.push([j, Math.sqrt(j)]) }\nvar csvRows = [];\nfor(var i=0,l=A.length; i&lt;l; ++i){\n    csvRows.push(A[i].join(','));   // unquoted CSV row\n}\nvar csvString = csvRows.join(\"\\n\");\nconsole.log(csvString);\nvar csvWin = window.open(\"\",\"\",\"\");\ncsvWin.document.write('&lt;meta name=\"content-type\" content=\"text/csv\"&gt;');\ncsvWin.document.write('&lt;meta name=\"content-disposition\" content=\"attachment;  filename=data.csv\"&gt;  ');\ncsvWin.document.write(csvString);\n</code></pre>\n",
            "last_activity_date": 1420331968,
            "question_id": 17836273,
            "score": 25,
            "tags": [
                "javascript",
                "export-to-csv"
            ],
            "title": "Export javascript data to CSV file without server interaction"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Not sure about jQuery. With plain JavaScript you could do:</p>\n\n<pre><code>var new_element = document.createElement('h1'),\n    old_attributes = element.attributes,\n    new_attributes = new_element.attributes;\n\n// copy attributes\nfor(var i = 0, len = old_attributes.length; i &lt; len; i++) {\n    new_attributes.setNamedItem(old_attributes.item(i).cloneNode());\n}\n\n// copy child nodes\ndo {\n    new_element.appendChild(element.firstChild);\n} \nwhile(element.firstChild);\n\n// replace element\nelement.parentNode.replaceChild(new_element, element);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/5NHvw/1/\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n\n<p>Not sure how cross-browser compatible this is though.</p>\n\n<p>A variation could be:</p>\n\n<pre><code>for(var i = 0, len = old_attributes.length; i &lt; len; i++) {\n    new_element.setAttribute(old_attributes[i].name, old_attributes[i].value);\n}\n</code></pre>\n\n<p>For more information see <a href=\"https://developer.mozilla.org/En/DOM/Node.attributes\" rel=\"nofollow\"><code>Node.attributes</code> <em><sup>[MDN]</sup></em></a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's one way you could do it with jQuery:</p>\n\n<pre><code>var attrs = { };\n\n$.each($(\"b\")[0].attributes, function(idx, attr) {\n    attrs[attr.nodeName] = attr.nodeValue;\n});\n\n\n$(\"b\").replaceWith(function () {\n    return $(\"&lt;h1 /&gt;\", attrs).append($(this).contents());\n});\n</code></pre>\n\n<p><strong>Example:</strong> <a href=\"http://jsfiddle.net/yapHk/\">http://jsfiddle.net/yapHk/</a></p>\n\n<p><strong>Update</strong>, here's a plugin:</p>\n\n<pre><code>(function($) {\n    $.fn.changeElementType = function(newType) {\n        var attrs = {};\n\n        $.each(this[0].attributes, function(idx, attr) {\n            attrs[attr.nodeName] = attr.nodeValue;\n        });\n\n        this.replaceWith(function() {\n            return $(\"&lt;\" + newType + \"/&gt;\", attrs).append($(this).contents());\n        });\n    };\n})(jQuery);\n</code></pre>\n\n<p><strong>Example:</strong> <a href=\"http://jsfiddle.net/mmNNJ/\">http://jsfiddle.net/mmNNJ/</a></p>\n",
                    "is_accepted": true,
                    "score": 60
                },
                {
                    "body": "<p>Only way I can think of is to copy everything over manually: <a href=\"http://jsfiddle.net/kasdega/2X63R/\" rel=\"nofollow\">example jsfiddle</a></p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;b class=\"xyzxterms\" style=\"cursor: default; \"&gt;bryant keil bio&lt;/b&gt;\n</code></pre>\n\n<p><strong>Jquery/Javascript</strong></p>\n\n<pre><code>$(document).ready(function() {\n    var me = $(\"b\");\n    var newMe = $(\"&lt;h1&gt;\");\n    for(var i=0; i&lt;me[0].attributes.length; i++) {\n        var myAttr = me[0].attributes[i].nodeName;\n        var myAttrVal = me[0].attributes[i].nodeValue;\n        newMe.attr(myAttr, myAttrVal);\n    }\n    newMe.html(me.html());\n    me.replaceWith(newMe);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@Andrew Whitaker: I propose this change:</p>\n\n<pre><code>$.fn.changeElementType = function(newType) {\n    var attrs = {};\n\n    $.each(this[0].attributes, function(idx, attr) {\n        attrs[attr.nodeName] = attr.nodeValue;\n    });\n\n    var newelement = $(\"&lt;\" + newType + \"/&gt;\", attrs).append($(this).contents());\n    this.replaceWith(newelement);\n    return newelement;\n};\n</code></pre>\n\n<p>Then you can do things like: <code>$('&lt;div&gt;blah&lt;/div&gt;').changeElementType('pre').addClass('myclass');</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@jakov and @Andrew Whitaker</p>\n\n<p>Here is a further improvement so it can handle multiple elements at once.</p>\n\n<pre><code>$.fn.changeElementType = function(newType) {\n    var newElements = [];\n\n    $(this).each(function() {\n        var attrs = {};\n\n        $.each(this.attributes, function(idx, attr) {\n            attrs[attr.nodeName] = attr.nodeValue;\n        });\n\n        var newElement = $(\"&lt;\" + newType + \"/&gt;\", attrs).append($(this).contents());\n\n        $(this).replaceWith(newElement);\n\n        newElements.push(newElement);\n    });\n\n    return $(newElements);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I like the idea of @AndrewWhitaker and others, to use a jQuery plugin -- to add the <code>changeElementType()</code> method. But a plugin is like a blackbox, no mater about the code, if it is litle and works fine... So, performance is required, and is most important than code.</p>\n\n<p>\"Pure javascript\" have <strong>better performance</strong> than jQuery: I think that @FelixKling's code have better performance than @AndrewWhitaker's and others.</p>\n\n<hr>\n\n<p><a href=\"http://jsfiddle.net/SN2hd/\" rel=\"nofollow\">Here a \"pure Javavascript\" (and \"pure DOM\") code, encapsulated into a jQuery plugin</a>: </p>\n\n<pre class=\"lang-js prettyprint-override\"><code> (function($) {  // @FelixKling's code\n    $.fn.changeElementType = function(newType) {\n      for (var k=0;k&lt;this.length; k++) {\n       var e = this[k];\n       var new_element = document.createElement(newType),\n        old_attributes = e.attributes,\n        new_attributes = new_element.attributes,\n        child = e.firstChild;\n       for(var i = 0, len = old_attributes.length; i &lt; len; i++) {\n        new_attributes.setNamedItem(old_attributes.item(i).cloneNode());\n       }\n       do {\n        new_element.appendChild(e.firstChild);\n       }\n       while(e.firstChild);\n       e.parentNode.replaceChild(new_element, e);\n      }\n      return this; // for chain... $(this)?  not working with multiple \n    }\n })(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have the the following code </p>\n\n<pre><code>&lt;b class=\"xyzxterms\" style=\"cursor: default; \"&gt;bryant keil bio&lt;/b&gt;\n</code></pre>\n\n<p>How would I replace the <code>b</code> tag to a <code>h1</code> tag but keep all other attributes and information?</p>\n",
            "last_activity_date": 1396375305,
            "question_id": 8584098,
            "score": 44,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "how to change an element type using jquery"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can't make the user's mouse do anything. But you have full control over what happens when an event triggers.</p>\n\n<p>What you can do is do a click on body load. W3Schools has an example <a href=\"http://www.w3schools.com/htmldom/met%5Fbutton%5Fclick.asp\" rel=\"nofollow\">here.</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simply like that : </p>\n\n<pre><code>&lt;a id=\"myLink\" onclick=\"alert('link click');\"&gt;LINK 1&lt;/a&gt;\n&lt;a id=\"myLink2\" onclick=\"document.getElementById('myLink').click()\"&gt;Click link 1&lt;/a&gt;\n</code></pre>\n\n<p>or at page load : </p>\n\n<pre><code>&lt;body onload=\"document.getElementById('myLink').click()\"&gt;\n...\n&lt;a id=\"myLink\" onclick=\"alert('link click');\"&gt;LINK 1&lt;/a&gt;\n...\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Instead of clicking, can you forward to the URL that the click would go to using Javascript?  </p>\n\n<p>Maybe you could put something in the body onLoad  to go where you want.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you only want to change the current page address, you can do that by simply doing this in Javascript :</p>\n\n<pre><code>location.href = \"http://www.example.com/test\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>You could just redirect them to another page. Actually making it literally click a link and travel to it seems unnessacary, but I don't know the whole story.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This function works in at least Firefox, and Internet Explorer. It runs any event handlers attached to the link and loads the linked page if the event handlers don't cancel the default action.</p>\n\n<pre><code>function clickLink(link) {\n    var cancelled = false;\n\n    if (document.createEvent) {\n        var event = document.createEvent(\"MouseEvents\");\n        event.initMouseEvent(\"click\", true, true, window,\n            0, 0, 0, 0, 0,\n            false, false, false, false,\n            0, null);\n        cancelled = !link.dispatchEvent(event);\n    }\n    else if (link.fireEvent) {\n        cancelled = !link.fireEvent(\"onclick\");\n    }\n\n    if (!cancelled) {\n        window.location = link.href;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<pre><code>document.getElementById('yourLinkID').click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 58
                }
            ],
            "body": "<p>Hello is there any way to programmatically click on a link on my page using javascript?</p>\n",
            "last_activity_date": 1425459945,
            "question_id": 902713,
            "score": 62,
            "tags": [
                "javascript",
                "hyperlink",
                "click",
                "anchor"
            ],
            "title": "How do I programmatically click a link with javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><strong><code>&gt;&gt;&gt;</code> is the <em>unsigned</em> right shift operator</strong> (<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\">see p. 76 of the JavaScript 1.5 specification</a>), as opposed to the <code>&gt;&gt;</code>, the <em>signed</em> right shift operator. </p>\n\n<p><code>&gt;&gt;&gt;</code> changes the results of shifting negative numbers because it <strong>does not preserve the sign bit when shifting</strong>.  The consequences of this is can be understood by example, from an interpretter:</p>\n\n<pre><code>$ 1 &gt;&gt; 0\n1\n$ 0 &gt;&gt; 0\n0\n$ -1 &gt;&gt; 0\n-1\n$ 1 &gt;&gt;&gt; 0\n1\n$ 0 &gt;&gt;&gt; 0\n0\n$ -1 &gt;&gt;&gt; 0\n4294967295\n$(-1 &gt;&gt;&gt; 0).toString(16)\n\"ffffffff\"\n$ \"cabbage\" &gt;&gt;&gt; 0\n0\n</code></pre>\n\n<p>So what is probably intended to be done here is to get the length, or 0 if the length is undefined or not an integer, as per the <code>\"cabbage\"</code> example above.  I think in this case it is safe to assume that <code>this.length</code> will never be <code>&lt; 0</code>.  Nevertheless, I would argue that <strong>this example is a nasty hack</strong>, for two reasons:</p>\n\n<ol>\n<li><p>The behavior of <code>&lt;&lt;&lt;</code> when using negative numbers, a side-effect probably not intended (or likely to occur) in the example above.  </p></li>\n<li><p><strong>The intention of the code is not obvious</strong>, as the existence of this question verifies.</p></li>\n</ol>\n\n<p>Best practice is probably to use something more readable unless performance is absolutely critical:</p>\n\n<pre><code>isNaN(parseInt(foo)) ? 0 : parseInt(foo)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><strong>Two reasons:</strong></p>\n\n<ol>\n<li><p>The result of >>> is an \"integral\"</p></li>\n<li><p>undefined >>> 0 = 0 (since JS will try and coerce the LFS to numeric context, this will work for \"foo\" >>> 0, etc. as well)</p></li>\n</ol>\n\n<p>Remember that numbers in JS have an internal-representation of double.\nIt's just a \"quick\" way of basic input sanity for length.</p>\n\n<p><em>However</em>, -1 >>> 0 (oops, likely not a desired length!)</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The unsigned right shift operator is used in the all the <em>array extra's</em> method implementations of Mozilla, to ensure that the <code>length</code> property is a <em>unsigned 32-bit integer</em>.</p>\n\n<p>The <code>length</code> property of array objects is <a href=\"http://bclary.com/2004/11/07/#a-15.4\">described</a> in the specification as:</p>\n\n<blockquote>\n  <p>Every Array object has a length property whose value is always a nonnegative integer less than 2<sup>32</sup>.</p>\n</blockquote>\n\n<p>This operator is the shortest way to achieve it, internally array methods use the <a href=\"http://bclary.com/2004/11/07/#a-9.6\"><code>ToUint32</code></a> operation, but that method is not accessible and exist on the specification for implementation purposes.</p>\n\n<p>The Mozilla <em>array extras</em> implementations try to be <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript 5</a> compliant, look at the description of the <code>Array.prototype.indexOf</code> method (&sect; 15.4.4.14):</p>\n\n<pre>\n1. Let O be the result of calling ToObject passing the this value \n   as the argument.\n2. Let lenValue be the result of calling the [[Get]] internal method of O with \n   the argument \"length\".\n3. Let len be <strong>ToUint32(lenValue)</strong>.\n....\n</pre>\n\n<p>As you can see, they just want to reproduce the behavior of the <code>ToUint32</code> method to comply with the ES5 spec on an ES3 implementation, and as I said before, the <a href=\"http://bclary.com/2004/11/07/#a-11.7.3\">unsigned right shift operator</a> is the easiest way.</p>\n",
                    "is_accepted": true,
                    "score": 39
                }
            ],
            "body": "<p>I just came across <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/IndexOf\">this piece</a> in the Mozilla Javascript documentation:</p>\n\n<pre><code>var len = this.length &gt;&gt;&gt; 0;  \n</code></pre>\n\n<p>I don't quite understand why this is being done. What good does zero-fill right shifting <code>this.length</code> by <code>0</code> do? As far as I understand, it does exactly nothing. Is it to safely establish a default value for <code>len</code>, even if <code>this.length</code> is not an integer? Can this ever feasibly be the case? If so, what's the difference between <code>&gt;&gt; 0</code> and <code>&gt;&gt;&gt; 0</code>?</p>\n",
            "last_activity_date": 1277094887,
            "question_id": 3081987,
            "score": 50,
            "tags": [
                "javascript",
                "bitwise-operators"
            ],
            "title": "What good does zero-fill bit-shifting by 0 do? (a &gt;&gt;&gt; 0)"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>If you're looking for a more reliable regex, check out RegexLib. Here's the page you'd probably be interested in:</p>\n\n<p><a href=\"http://regexlib.com/Search.aspx?k=url\" rel=\"nofollow\">http://regexlib.com/Search.aspx?k=url</a></p>\n\n<p>As for the error messages showing while the person is still typing, change the event from <code>keydown</code> to <code>blur</code> and then it will only check once the person moves to the next element.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It's not practical to parse URLs using regex. A full implementation of the RFC1738 rules would result in an enormously long regex (assuming it's even possible). Certainly your current expression fails many valid URLs, and passes invalid ones.</p>\n\n<p>Instead:</p>\n\n<p>a. use a proper URL parser that actually follows the real rules. (I don't know of one for JavaScript; it would probably be overkill. You could do it on the server side though). Or,</p>\n\n<p>b. just trim away any leading or trailing spaces, then check it has one of your preferred schemes on the front (typically \u2018http://\u2019 or \u2018https://\u2019), and leave it at that. Or,</p>\n\n<p>c. attempt to use the URL and see what lies at the end, for example by sending it am HTTP HEAD request from the server-side. If you get a 404 or connection error, it's probably wrong.</p>\n\n<blockquote>\n  <p>it return true even if url is something like \"http://wwww\".</p>\n</blockquote>\n\n<p>Well, that is indeed a perfectly valid URL.</p>\n\n<p>If you want to check whether a hostname such as \u2018wwww\u2019 actually exists, you have no choice but to look it up in the DNS. Again, this would be server-side code.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<pre><code> function validateURL(textval) {\n      var urlregex = new RegExp(\n            \"^(http|https|ftp)\\://([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&amp;amp;%\\$\\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\\:[0-9]+)*(/($|[a-zA-Z0-9\\.\\,\\?\\'\\\\\\+&amp;amp;%\\$#\\=~_\\-]+))*$\");\n      return urlregex.test(textval);\n    }\n</code></pre>\n\n<p>this can return true for urls like <a href=\"http://stackoverflow.com/questions/1303872/url-validation-using-javascript\">http://stackoverflow.com/questions/1303872/url-validation-using-javascript</a> or <a href=\"http://regexlib.com/DisplayPatterns.aspx?cattabindex=1&amp;categoryId=2\">http://regexlib.com/DisplayPatterns.aspx?cattabindex=1&amp;categoryId=2</a></p>\n\n<p>thank you</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Someone mentioned the Jquery Validation plugin, seems overkill if you just want to validate the url, here is the line of regex from the plugin:</p>\n\n<pre><code>return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\n</code></pre>\n\n<p>Here is where they got it from: <a href=\"http://projects.scottsplayground.com/iri/\">http://projects.scottsplayground.com/iri/</a></p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>This is what worked for me:</p>\n\n<pre><code>function validateURL(value) {\n    return /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&amp;'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\n    }\n</code></pre>\n\n<p>from there is is just a matter of calling the function to get a true or false back:</p>\n\n<pre><code>validateURL(urltovalidate);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Demo : <a href=\"http://jsbin.com/uzimeb/1/edit\" rel=\"nofollow\">http://jsbin.com/uzimeb/1/edit</a></p>\n\n<pre><code>function checkURL(value) {\n    var urlregex = new RegExp(\"^(http|https|ftp)\\://([a-zA-Z0-9\\.\\-]+(\\:[a-zA-Z0-9\\.&amp;amp;%\\$\\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\\-]+\\.)*[a-zA-Z0-9\\-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\\:[0-9]+)*(/($|[a-zA-Z0-9\\.\\,\\?\\'\\\\\\+&amp;amp;%\\$#\\=~_\\-]+))*$\");\n    if (urlregex.test(value)) {\n        return (true);\n    }\n    return (false);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>best regex I found from <a href=\"http://angularjs.org/\" rel=\"nofollow\">http://angularjs.org/</a></p>\n\n<p><code>var urlregex = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?$/;</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I written also a URL validation function base on rfc1738 and rfc3986 to check http and https urls. I try to hold this modular, so it can be better maintained and adapted to own requirements.</p>\n\n<p>The RegExp in one line is show at end of this post.</p>\n\n<p>The RegExp accept HTTP and HTTPS URLs with some international domain or IPv4 number. IPv6 is not supported yet. </p>\n\n<pre><code>window.isValidURL = (function() {// wrapped in self calling function to prevent global pollution\n\n     //URL pattern based on rfc1738 and rfc3986\n    var rg_pctEncoded = \"%[0-9a-fA-F]{2}\";\n    var rg_protocol = \"(http|https):\\\\/\\\\/\";\n\n    var rg_userinfo = \"([a-zA-Z0-9$\\\\-_.+!*'(),;:&amp;=]|\" + rg_pctEncoded + \")+\" + \"@\";\n\n    var rg_decOctet = \"(25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9]|[1-9][0-9]|[0-9])\"; // 0-255\n    var rg_ipv4address = \"(\" + rg_decOctet + \"(\\\\.\" + rg_decOctet + \"){3}\" + \")\";\n    var rg_hostname = \"([a-zA-Z0-9\\\\-\\\\u00C0-\\\\u017F]+\\\\.)+([a-zA-Z]{2,})\";\n    var rg_port = \"[0-9]+\";\n\n    var rg_hostport = \"(\" + rg_ipv4address + \"|localhost|\" + rg_hostname + \")(:\" + rg_port + \")?\";\n\n    // chars sets\n    // safe           = \"$\" | \"-\" | \"_\" | \".\" | \"+\"\n    // extra          = \"!\" | \"*\" | \"'\" | \"(\" | \")\" | \",\"\n    // hsegment       = *[ alpha | digit | safe | extra | \";\" | \":\" | \"@\" | \"&amp;\" | \"=\" | escape ]\n    var rg_pchar = \"a-zA-Z0-9$\\\\-_.+!*'(),;:@&amp;=\";\n    var rg_segment = \"([\" + rg_pchar + \"]|\" + rg_pctEncoded + \")*\";\n\n    var rg_path = rg_segment + \"(\\\\/\" + rg_segment + \")*\";\n    var rg_query = \"\\\\?\" + \"([\" + rg_pchar + \"/?]|\" + rg_pctEncoded + \")*\";\n    var rg_fragment = \"\\\\#\" + \"([\" + rg_pchar + \"/?]|\" + rg_pctEncoded + \")*\";\n\n    var rgHttpUrl = new RegExp( \n        \"^\"\n        + rg_protocol\n        + \"(\" + rg_userinfo + \")?\"\n        + rg_hostport\n        + \"(\\\\/\"\n        + \"(\" + rg_path + \")?\"\n        + \"(\" + rg_query + \")?\"\n        + \"(\" + rg_fragment + \")?\"\n        + \")?\"\n        + \"$\"\n    );\n\n    // export public function\n    return function (url) {\n        if (rgHttpUrl.test(url)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n})();\n</code></pre>\n\n<p>RegExp in one line:</p>\n\n<pre><code>var rg = /^(http|https):\\/\\/(([a-zA-Z0-9$\\-_.+!*'(),;:&amp;=]|%[0-9a-fA-F]{2})+@)?(((25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9]|[1-9][0-9]|[0-9])(\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9][0-9]|[1-9][0-9]|[0-9])){3})|localhost|([a-zA-Z0-9\\-\\u00C0-\\u017F]+\\.)+([a-zA-Z]{2,}))(:[0-9]+)?(\\/(([a-zA-Z0-9$\\-_.+!*'(),;:@&amp;=]|%[0-9a-fA-F]{2})*(\\/([a-zA-Z0-9$\\-_.+!*'(),;:@&amp;=]|%[0-9a-fA-F]{2})*)*)?(\\?([a-zA-Z0-9$\\-_.+!*'(),;:@&amp;=\\/?]|%[0-9a-fA-F]{2})*)?(\\#([a-zA-Z0-9$\\-_.+!*'(),;:@&amp;=\\/?]|%[0-9a-fA-F]{2})*)?)?$/;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>var RegExp = (/^HTTP|HTTP|http(s)?:\\/\\/(www\\.)?[A-Za-z0-9]+([\\-\\.]{1}[A-Za-z0-9]+)*\\.[A-Za-z]{2,40}(:[0-9]{1,40})?(\\/.*)?$/);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try edit your <code>isValidURL</code> function as follows:</p>\n\n<pre><code>function isValidURL(url) {\n    var encodedURL = encodeURIComponent(url);\n    var isValid = false;\n\n    $.ajax({\n      url: \"http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20html%20where%20url%3D%22\" + encodedURL + \"%22&amp;format=json\",\n      type: \"get\",\n      async: false,\n      dataType: \"json\",\n      success: function(data) {\n        isValid = data.query.results != null;\n      },\n      error: function(){\n        isValid = false;\n      }\n    });\n\n    return isValid;\n}\n</code></pre>\n\n<p>This should do the trick.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's a regular expression which might fit the bill (it's very long):</p>\n\n<pre><code>/^(?:\\u0066\\u0069\\u006C\\u0065\\u003A\\u002F{2}(?:\\u002F{2}(?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*\\u0040)?(?:\\u005B(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){6}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){5}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){4}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A)?[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){3}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,2}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,3}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,4}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,5}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,6}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2})\\u005D|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])|(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039](?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D]+)?[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039])?|(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039](?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D]+)?[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039])?\\u002E)+[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039](?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D]+)?[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039])?))(?:\\u003A(?:\\u0030-\\u0035\\u0030-\\u0039{0,4}|\\u0036\\u0030-\\u0034\\u0030-\\u0039{3}|\\u0036\\u0035\\u0030-\\u0034\\u0030-\\u0039{2}|\\u0036\\u0035\\u0035\\u0030-\\u0032\\u0030-\\u0039|\\u0036\\u0035\\u0035\\u0033\\u0030-\\u0035))?(?:\\u002F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)*|\\u002F(?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])+(?:\\u002F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)*)?|(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])+(?:\\u002F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)*)|[\\u0041-\\u005A\\u0061-\\u007A][\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002B\\u002D\\u002E]*\\u003A(?:\\u002F{2}(?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*\\u0040)?(?:\\u005B(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){6}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){5}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){4}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A)?[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){3}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,2}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,3}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,4}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035]))|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,5}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}|(?:(?:[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4}\\u003A){0,6}[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066]{1,4})?\\u003A{2})\\u005D|(?:(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])\\u002E){3}(?:[\\u0030-\\u0039]|[\\u0031-\\u0039][\\u0030-\\u0039]|\\u0031[\\u0030-\\u0039]{2}|\\u0032[\\u0030-\\u0034][\\u0030-\\u0039]|\\u0032\\u0035[\\u0030-\\u0035])|(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039](?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D]+)?[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039])?|(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039](?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D]+)?[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039])?\\u002E)+[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039](?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D]+)?[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039])?))(?:\\u003A(?:\\u0030-\\u0035\\u0030-\\u0039{0,4}|\\u0036\\u0030-\\u0034\\u0030-\\u0039{3}|\\u0036\\u0035\\u0030-\\u0034\\u0030-\\u0039{2}|\\u0036\\u0035\\u0035\\u0030-\\u0032\\u0030-\\u0039|\\u0036\\u0035\\u0035\\u0033\\u0030-\\u0035))?(?:\\u002F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)*|\\u002F(?:(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])+(?:\\u002F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)*)?|(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])+(?:\\u002F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)*)(?:\\u003F(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040\\u002F\\u003F]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)?(?:\\u0023(?:[\\u0041-\\u005A\\u0061-\\u007A\\u0030-\\u0039\\u002D\\u002E\\u005F\\u007E\\u0021\\u0024\\u0026\\u0027\\u0028\\u0029\\u002A\\u002B\\u002C\\u003B\\u003D\\u003A\\u0040\\u002F\\u003F]|\\u0025[\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066][\\u0030-\\u0039\\u0041-\\u0046\\u0061-\\u0066])*)?)$/\n</code></pre>\n\n<p>There are some caveats to its usage, namely it does not validate URIs which contain additional information after the user name (e.g. \"username:password\").  Also, only IPv6 addresses can be contained within the IP literal syntax and the \"IPvFuture\" syntax is currently ignored and will not validate against this regular expression.  Port numbers are also constrained to be between 0 and 65,535. Also, only the file scheme can use triple slashes (e.g. \"file:///etc/sysconfig\") and can ignore both the query and fragment parts of a URI.  Finally, it is geared towards regular URIs and not IRIs, hence the extensive focus on the ASCII character set.</p>\n\n<p>This regular expression could be expanded upon, but it's already complex and long enough as it is.  I also cannot guarantee it's going to be \"100% accurate\" or \"bug free\", but it should correctly validate URIs for all schemes.</p>\n\n<p>You will need to do additional verification for any scheme-specific requirements or do URI normalization as this regular expression will validate a very broad range of URIs.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In a similar situation I got away with this:</p>\n\n<pre><code>someUtils.validateURL = function(url) {\n    var parser = document.createElement('a');\n    try {\n        parser.href = url;\n        return !!parser.hostname;\n    } catch (e) {\n        return false;\n    }\n};\n</code></pre>\n\n<p>i.e. why invent the wheel if browsers can do it for you? But, of course, this will only work in the browser. </p>\n\n<p>there are various parts of parsed URL exactly how browser would interpret it:</p>\n\n<pre><code>parser.protocol; // =&gt; \"http:\"\nparser.hostname; // =&gt; \"example.com\"\nparser.port;     // =&gt; \"8080\"\nparser.pathname; // =&gt; \"/path/\"\nparser.search;   // =&gt; \"?search=test\"\nparser.hash;     // =&gt; \"#hash\"\nparser.host;     // =&gt; \"example.com:3000\"\n</code></pre>\n\n<p>Using these you can improve your validating function depending on the requirements. The only drawback is that it will accept relative URLs and use current page server's host and port. But you can use it for your advantage, by re-assembling the URL from parts and always passing it in full to your AJAX service.</p>\n\n<p>What <code>validateURL</code> won't accept is invalid URL, e.g. <code>http:\\:8883</code> will return false, but <code>:1234</code> is valid and is interpreted as <code>http://pagehost.example.com/:1234</code> i.e. as a relative path. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know it's quite an old question but since it does not have any accepted answer, I suggest you to use the URI.js framework: <a href=\"https://github.com/medialize/URI.js\" rel=\"nofollow\">https://github.com/medialize/URI.js</a></p>\n\n<p>You can use it to check for malformed URI using a try/catch block:</p>\n\n<pre><code>function isValidURL(url)\n{\n    try {\n        (new URI(url));\n        return true;\n    }\n    catch (e) {\n        // Malformed URI\n        return false;\n    }\n}\n</code></pre>\n\n<p>Of course it will consider something like \"%@\" as a well formed relative URI... So I suggest you read the URI.js <a href=\"http://medialize.github.io/URI.js/docs.html\" rel=\"nofollow\">API</a> to perform more checks, for example if you want to make sure that the user entered a well formed absolute URL you may do like this:</p>\n\n<pre><code>function isValidURL(url)\n{\n    try {\n        var uri = new URI(url);\n        // URI has a scheme and a host\n        return (!!uri.scheme() &amp;&amp; !!uri.host());\n    }\n    catch (e) {\n        // Malformed URI\n        return false;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to validate a URL and display message. Below is my code:</p>\n\n<pre><code>$(\"#pageUrl\").keydown(function(){\n        $(\".status\").show();\n        var url = $(\"#pageUrl\").val();\n\n        if(isValidURL(url)){\n\n        $.ajax({\n            type: \"POST\",\n            url: \"demo.php\",\n            data: \"pageUrl=\"+ url,\n            success: function(msg){\n                if(msg == 1 ){\n                    $(\".status\").html('&lt;img src=\"images/success.gif\"/&gt;&lt;span&gt;&lt;strong&gt;SiteID:&lt;/strong&gt;12345678901234456&lt;/span&gt;');\n                }else{\n                    $(\".status\").html('&lt;img src=\"images/failure.gif\"/&gt;');\n                }\n            }\n            });\n\n            }else{\n\n                    $(\".status\").html('&lt;img src=\"images/failure.gif\"/&gt;');\n            }\n\n    });\n\n\nfunction isValidURL(url){\n    var RegExp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?/;\n\n    if(RegExp.test(url)){\n        return true;\n    }else{\n        return false;\n    }\n} \n</code></pre>\n\n<p>My problem is now it will show an error message even when entering a proper URL until it matches regular expression, and it return true even if the URL is something like <code>\"http://wwww\"</code>.</p>\n\n<p>I appreciate your suggestions.</p>\n",
            "last_activity_date": 1424926520,
            "question_id": 1303872,
            "score": 38,
            "tags": [
                "javascript",
                "jquery",
                "validation",
                "url"
            ],
            "title": "Trying to Validate URL Using JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Like this:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"mytext\"&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nvar elem = document.getElementById(\"mytext\");\nelem.value = \"My default value\";\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 144
                },
                {
                    "body": "<p>if your form contains an input field like </p>\n\n<pre><code>&lt;input type='text' id='id1' /&gt;\n</code></pre>\n\n<p>then you can write the code in javascript as given below to set its value as</p>\n\n<pre><code>document.getElementById('id1').value='text to be displayed' ; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Try out these. </p>\n\n<pre><code>document.getElementById(\"current\").value = 12\n\n// or\n\nvar current = document.getElementById(\"current\");\ncurrent.value = 12\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>It's simple; An example is:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"example\"&gt; // Setup text field \n&lt;script type=\"text/javascript\"&gt; \nvar elem = document.getElementById(\"example\"); // Get text field\nelem.value = \"My default value\"; // Change field\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I use 'setAttribute' function: </p>\n\n<pre><code>&lt;input type=\"text\" id=\"example\"&gt; // Setup text field \n&lt;script type=\"text/javascript\"&gt; \n  document.getElementById(\"example\").setAttribute('value','My default value');\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The simple answer is not in Javascript the simplest way to get the placeholder is through the place holder attribute</p>\n\n<pre><code>&lt;input type=\"text\" name=\"text_box_1\" placeholder=\"My Default Value\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>how would you set the default value of a form input text field using JavaScript?</p>\n",
            "last_activity_date": 1410811003,
            "question_id": 7609130,
            "score": 58,
            "tags": [
                "javascript",
                "forms",
                "input"
            ],
            "title": "Set the value of a input field with javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>This can be caused by having Chrome set to <strong>Continue where you left off</strong>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/VMMIv.png\" alt=\"enter image description here\"></p>\n\n<h3>Further reading</h3>\n\n<ul>\n<li><a href=\"https://productforums.google.com/d/topic/chrome/9l-gKYIUg50/discussion\" rel=\"nofollow\">Bug report: Chrome is not deleting temporary cookies \u2013 i.e. not logging me out automatically when I close all browser Windows</a></li>\n<li><a href=\"https://groups.google.com/a/chromium.org/group/chromium-bugs/browse_thread/thread/723b775b080e2777/55dff3ba54b188d7?lnk=raot&amp;pli=1\" rel=\"nofollow\">Issue 128513 in chromium: Session Cookies not cleared when Chrome processes closed</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>I just had this issue. \nI noticed that even after I closed my browser i had many chrome processes running.  Turns out theses were each from my chrome extension.  </p>\n\n<p>Under advanced settings I unchecked <code>'Continue running background apps when Google Chrome is closed'</code> and my session cookies started working as they should.</p>\n\n<p>Still a pain the the rear for all of us developers that have been coding expecting that session cookies would get cleared when the user is done browsing</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I just had the same problem with a cookie which was set to expire on \"Browsing session end\".</p>\n\n<p>Unfortunately it did not so I played a bit with the settings of the browser.</p>\n\n<p>Turned out that the feature that remembers the opened tabs when the browser is closed was the root of the problem. (The feature is named \"On startup\" - \"Continue where I left off\". At least on the current version of Chrome).</p>\n\n<p>This also happens with Opera and Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Have you tried to Remove hangouts extension in Google Chrome? because it forces chrome to keep running even you close all the windows.</p>\n\n<p>I was also facing the problem but it resolved now.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This maybe because Chrome is still running in background after you close the browser. Try to disable this feature by doing following:</p>\n\n<ol>\n<li>Open chrome://settings/</li>\n<li>Click \"Show advanced settings ...\"</li>\n<li>Navigate down to System section and disable \"Continue running background apps when Google Chrome is closed\". \nThis will force Chrome to close completely and then it will delete session cookies.</li>\n</ol>\n\n<p>However, I think Chrome should check and delete previous session cookies at it starting instead of closing. </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>A simple alternative is to use the new <a href=\"http://dev.w3.org/html5/webstorage/#the-sessionstorage-attribute\" rel=\"nofollow\">sessionStorage</a> object. The downside here is that sessionStorage will not persist between tabs. But it does expire when the browser window shuts down.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Google chrome has a problem if you set and unset cookie improper way. This is php code. Thought this will give you idea.</p>\n\n<p><strong>Set cookie</strong></p>\n\n<pre><code>setcookie('userLoggedIn', 1, 0, PATH);\n</code></pre>\n\n<p><strong>Wrong way and will not work (notice PATH is missing)</strong></p>\n\n<pre><code>setcookie('userLoggedIn', 0, time()-3600);\n</code></pre>\n\n<p><strong>Correct way fixes issue on google chrome</strong></p>\n\n<pre><code>setcookie('userLoggedIn', 0, time()-3600, PATH);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had to both, unchecked, under advanced settings of Chrome :</p>\n\n<ul>\n<li>'Continue running background apps when Google Chrome is closed'</li>\n<li>\"Continue where I left off\", \"On startup\"</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to set session cookie in javascript like this:</p>\n\n<pre><code>document.cookie = 'name=alex; path=/'\n</code></pre>\n\n<p>But Chrome doesn't delete it even if I quit browser and launch it again. </p>\n\n<p>I checked in Firefox and Opera and both work as intended - they delete session cookie on browser exit.</p>\n\n<p>Is Chrome just ignoring expiration rules?</p>\n\n<p>UPDATE:\nThis is driving my crazy. I checked in multiple OSes and found out that session cookie gets removed on Chrome in Windows XP and Ubuntu, but NOT in Mac OSX Lion. </p>\n",
            "last_activity_date": 1425484355,
            "question_id": 10617954,
            "score": 53,
            "tags": [
                "javascript",
                "session",
                "google-chrome",
                "cookies"
            ],
            "title": "Chrome doesn&#39;t delete session cookies"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The simple-and-direct approach is to create and add a new <code>style</code> node to the document.</p>\n\n<pre><code>var css = document.createElement(\"style\");\ncss.type = \"text/css\";\ncss.innerHTML = \"strong { color: red }\";\ndocument.body.appendChild(css);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>You can also do this using DOM Level 2 CSS interfaces:</p>\n\n<pre><code>sheet.insertRule('strong { color: red; }', sheet.cssRules.length);\n</code></pre>\n\n<p>...on all but (naturally) IE, which uses its own marginally-different wording:</p>\n\n<pre><code>sheet.addRule('strong', 'color: red;', -1);\n</code></pre>\n\n<p>There is a theoretical advantage in this compared to the createElement-set-innerHTML method, in that you don't have to worry about putting special HTML characters in the innerHTML, but in practice style elements are CDATA in legacy HTML, and \u2018&lt;\u2019 and \u2018&amp;\u2019 are rarely used in stylesheets anyway.</p>\n\n<p>You do need a stylesheet in place before you can started appending to it like this. That can be any existing active stylesheet: external, embedded or empty, it doesn't matter. If there isn't one, the only standard way to create it at the moment is with createElement.</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>YUI just recently <a href=\"http://developer.yahoo.com/yui/stylesheet/\" rel=\"nofollow\">added a utility</a> specifically for this.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can add classes or style attributes on an element by element basis. </p>\n\n<p>For example:</p>\n\n<pre><code>&lt;a name=\"myelement\" onclick=\"this.style.color='#FF0';\"&gt;text&lt;/a&gt;\n</code></pre>\n\n<p>Where you could do this.style.background, this.style.font-size, etc. You can also apply a style using this same method ala </p>\n\n<pre><code>this.className='classname';\n</code></pre>\n\n<p>If you want to do this in a javascript function, you can use getElementByID rather than 'this'.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The solution by Ben Blank wouldn't work in IE8 for me.</p>\n\n<p>However this did work in IE8</p>\n\n<pre><code>function addCss(cssCode) {\nvar styleElement = document.createElement(\"style\");\n  styleElement.type = \"text/css\";\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = cssCode;\n  } else {\n    styleElement.appendChild(document.createTextNode(cssCode));\n  }\n  document.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n}\n</code></pre>\n\n<p>See <a href=\"http://www.tomhoppe.com/index.php/2008/03/dynamically-adding-css-through-javascript/\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Here's a slightly updated version of <a href=\"http://stackoverflow.com/a/6211716/152809\">Chris Herring's solution</a>, taking into account that you can use <code>innerHTML</code> as well instead of a creating a new text node:</p>\n\n<pre><code>function insertCss( code ) {\n    var style = document.createElement('style');\n    style.type = 'text/css';\n\n    if (style.styleSheet) {\n        // IE\n        style.styleSheet.cssText = code;\n    } else {\n        // Other browsers\n        style.innerHTML = code;\n    }\n\n    document.getElementsByTagName(\"head\")[0].appendChild( style );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's my general-purpose function which parametrizes the CSS selector and rules, and optionally takes in a css filename (case-sensitive) if you wish to add to a particular sheet instead (otherwise, if you don't provide a CSS filename, it will create a new style element and append it to the existing head. It will make at most one new style element and re-use it on future function calls). Works with FF, Chrome, and IE9+ (maybe earlier too, untested). </p>\n\n<pre><code>function addCssRules(selector, rules, /*Optional*/ sheetName) {\n    // We want the last sheet so that rules are not overridden.\n    var styleSheet = document.styleSheets[document.styleSheets.length - 1];\n    if (sheetName) {\n        for (var i in document.styleSheets) {\n            if (document.styleSheets[i].href &amp;&amp; document.styleSheets[i].href.indexOf(sheetName) &gt; -1) {\n                styleSheet = document.styleSheets[i];\n                break;\n            }\n        }\n    }\n    if (typeof styleSheet === 'undefined' || styleSheet === null) {\n        var styleElement = document.createElement(\"style\");\n        styleElement.type = \"text/css\";\n        document.head.appendChild(styleElement);\n        styleSheet = styleElement.sheet;\n    }\n\n    if (styleSheet) {\n        if (styleSheet.insertRule)\n            styleSheet.insertRule(selector + ' {' + rules + '}', styleSheet.cssRules.length);\n        else if (styleSheet.addRule)\n            styleSheet.addRule(selector, rules);\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you add CSS rules (eg <code>strong { color: red }</code>) by use of Javascript?</p>\n",
            "last_activity_date": 1416257211,
            "question_id": 707565,
            "score": 48,
            "tags": [
                "javascript",
                "css"
            ],
            "title": "How do you add CSS with Javascript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>try this:</p>\n\n<pre><code>function validate(){\n  var remember = document.getElementById('remember');\n  if (remember.checked){\n    alert(\"checked\") ;\n  }else{\n    alert(\"You didn't check it! Let me check it for you.\")\n  }\n}\n</code></pre>\n\n<p>Your script doesn't know what \"remember\" is. you need to get the element first using getElementById()</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>use like this</p>\n\n<pre><code>&lt;script type=text/javascript&gt;\nfunction validate(){\nif (document.getElementById('remember').checked){\n          alert(\"checked\") ;\n}else{\nalert(\"You didn't check it! Let me check it for you.\")\n}\n}\n&lt;/script&gt;\n\n&lt;input id=\"remember\" name=\"remember\" type=\"checkbox\" onclick=\"validate()\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><code>remember</code> is undefined \u2026 and the <code>checked</code> property is a boolean not a number.</p>\n\n<pre><code>function validate(){\n    var remember = document.getElementById('remember');\n    if (remember.checked){\n        alert(\"checked\") ;\n    }else{\n        alert(\"You didn't check it! Let me check it for you.\")\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>checked</code> is <code>boolean</code> property so you can directly use it in <code>IF</code> condition:-</p>\n\n<pre><code> &lt;script type=\"text/javascript\"&gt;\n    function validate() {\n        if (document.getElementById('remember').checked) {\n            alert(\"checked\");\n        } else {\n            alert(\"You didn't check it! Let me check it for you.\");\n        }\n    }\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 89
                },
                {
                    "body": "<p>If you are using this form for mobile app then you may use the required attribute html5. \nyou dont want to use any java script validation for this. It should work</p>\n\n<pre><code>&lt;input id=\"remember\" name=\"remember\" type=\"checkbox\" required=\"required\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>    if (document.getElementById('remember').checked) {\n        alert(\"checked\");\n    }\n    else {\n        alert(\"You didn't check it! Let me check it for you.\");\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You have two IDs as \"remember\", IDs need to be unique to each item. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Try This</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nwindow.onload = function () {\n    var input = document.querySelector('input[type=checkbox]');\n\n    function check() {\n        if (input.checked) {\n            alert(\"checked\");\n        } else {\n            alert(\"You didn't check it.\");\n        }\n    }\n    input.onchange = check;\n    check();\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This should allow you to check if element with <code>id='remember'</code> is <code>'checked'</code></p>\n\n<pre><code>if (document.getElementById('remember').is(':checked')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am buildin a mobile web app with jquery mobile and\nI want to check if a checkbox is checked. Here is my code.</p>\n\n<pre><code>&lt;script type=text/javascript&gt;\nfunction validate(){\nif (remember.checked == 1){\n          alert(\"checked\") ;\n}else{\nalert(\"You didn't check it! Let me check it for you.\")\n}\n}\n&lt;/script&gt;\n\n&lt;input id=\"remember\" name=\"remember\" type=\"checkbox\" onclick=\"validate()\" /&gt;\n</code></pre>\n\n<p>But for some reason or another it doesn't execute it.</p>\n\n<p>Please help !</p>\n\n<p>----EDIT-----\nThis is what I have for the moment.</p>\n\n<pre><code>&lt;DIV data-role=\"content\" data-theme=\"g\"&gt;\n    &lt;DIV class=ui-grid-g-login&gt;\n        &lt;FORM method=post action=[$=PROBE(266)/] data-theme=\"C\"&gt;\n            &lt;P&gt;~DATA_ERROR~&lt;/P&gt;\n            &lt;div id=\"mail\" data-role=\"fieldcontain\"&gt;\n                &lt;label for=\"mail\"&gt;Email:*&lt;/label&gt;       \n                &lt;input id=\"mail\" name=\"mail\" type=\"email\" /&gt;\n            &lt;/div&gt;\n            &lt;div id=\"pass\" data-role=\"fieldcontain\"&gt;\n                &lt;label for=\"pass\"&gt;Paswoord:*&lt;/label&gt;        \n                &lt;input id=\"pass\" name=\"pass\" type=\"password\" /&gt;\n            &lt;/div&gt;\n            &lt;div id=\"remember\" data-role=\"fieldcontain\"&gt;\n                &lt;label for=\"remember\"&gt;Onthoud mij&lt;/label&gt;       \n                &lt;input id=\"remember\" name=\"remember\" type=\"checkbox\" onclick=\"validate()\" /&gt;\n            &lt;/div&gt;\n            &lt;P&gt;&lt;INPUT class=btn name=submit value=Login type=submit  onclick=\"validate()\"&gt;&lt;/P&gt;  \n        &lt;/FORM&gt;\n    &lt;/DIV&gt;\n&lt;/DIV&gt;&lt;!-- /content --&gt;\n\n&lt;script type=text/javascript&gt;\nfunction validate(){\n    var remember = document.getElementById('remember');\n    if (remember.checked){\n        alert(\"checked\") ;\n    }else{\n        alert(\"You didn't check it! Let me check it for you.\")\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>----EDIT--</p>\n\n<p>Solved it, the problem was that the fieldcontain was also named 'remember'</p>\n",
            "last_activity_date": 1423676698,
            "question_id": 9887360,
            "score": 43,
            "tags": [
                "javascript",
                "jquery-mobile",
                "checkbox"
            ],
            "title": "check if checkbox is checked javascript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>jQuery Mobile does not pull the whole page into the dom, it grabs the <strong>first</strong> <code>data-role=\"page\"</code> element and its descendants and pulls that into the current dom.</p>\n\n<p>So any scripts in the <code>&lt;head&gt;</code> of the document will not be included.</p>\n\n<p>I generally put all the functional JavaScript for my site on the index page and then when external pages are loaded into the dom they can benefit from the already loaded scripts.</p>\n\n<p>Also, you can place JavaScript code inside the <code>data-role=\"page\"</code> element and it will be included when jQuery Mobile does its AJAX load of the page.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>A good system for this is to put all of your JS into an include file and include it on each page of the site. It will be ignored if pages are brought into the DOM by AJAX, but if someone refreshes somewhere in your site, the JS will be available.</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>I too am looking for this solution the \"correct way\" for loading external pages. However, I will concur, that your hack does indeed work. I'll take the hack for now:</p>\n\n<pre><code>    $(document).ready(function(){\n    $(\"#page1\").bind('ended', function(){\n        $.mobile.changePage($(document.location.href=\"external.html\"), 'fade');\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>So building off of what Jasper so wisely noted above, I came up with a working solution.</p>\n\n<p>Basically I Load up all of my JS and CSS files into the index page to start.  Now when you load, this method will be triggered for the <code>pageshow</code></p>\n\n<pre><code>$(\"div[id*='page1']\").live('pageshow', function(event, ui) { \n    setTimeout(function() { window.scrollTo(0, 1) }, 100);\n    doStuffWhenPageintializes();\n});\n</code></pre>\n\n<p>Once I call the <code>$.mobile.changePage( \"someOtherPage.html\", { transition: \"slide\"} );</code>, the <code>pagehide</code> method will get fired for the page1 object.  This is where you can trigger the method to initialize the page you are transitioning to.  </p>\n\n<pre><code>$(\"div[id*='page1']\").live('pagehide', function(event, ui) { \n    setTimeout(function() { window.scrollTo(0, 1) }, 100);\n    loadStuffForNewPage();\n});\n</code></pre>\n\n<p>Now you can remove the <code>document.location.href=\"external.html\"</code> line and simply use the native JQM call.  Hope this helps some people.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It seems that there is no \"right\" way provided by JQM to load external html files. Thanks a bunch to Jasper for the solution.</p>\n\n<p>JQM suggests an AJAX reload if we want to switch to external pages, like:</p>\n\n<pre><code>&lt;a href=\"foo.html\" rel=\"external\"&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;a href=\"foo.html\" data-ajax=\"false\"&gt;\n</code></pre>\n\n<p>I tried both but they didn't work - I\"m programming for native apps, so maybe it may work for web apps?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I solved this by putting script in the head section of last loaded page that helped and worked for me. JQM is not getting the head section of recently loaded page in the DOM so not bringing the JS content of the recent page. By putting all the script in an External JS file or by putting it in the head section of very first page might do the trick for you.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Kindly repeat the head section with all the scripts in each html page, since change page will cause reload of pages and will re create head section...</p>\n\n<p>a simple change page like this would then work:</p>\n\n<pre><code>$.mobile.changePage('abc.html', {\n    transition: 'slide'\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>So I am having a hard time getting <code>$.mobile.changePage</code> to function properly.  I call it like this:  </p>\n\n<pre><code>$.mobile.changePage( \"DataformsM-AddRecord.html\", { transition: \"slide\"} );\n</code></pre>\n\n<p>But for some reason, when the HTML page is loaded, none of the external .js (the files that I wrote to actually do something) are included.  I am following the significant loading conventions of </p>\n\n<pre><code>-Jquery\n-(CUSTOM JS)\n-Jquery Mobile\n</code></pre>\n\n<p>Does anyone know why this is not getting loaded properly?  Also, the pageshow function is not getting fired either, which is strange.  It looks like this:</p>\n\n<pre><code>$(\"div[data-role*='page']\").live('pageshow', function(event, ui) { \n\n    loadFormFields();\n\n});\n</code></pre>\n\n<p>Now the page is rendered, but none of the functional things happen.  If I hack it and do something like this:  </p>\n\n<pre><code>document.location.href=\"DataformsM-AddRecord.html\";\n</code></pre>\n\n<p>It will function properly...</p>\n\n<p>Any help would be greatly appreciated.  :)  Thanks</p>\n",
            "last_activity_date": 1367227939,
            "question_id": 7449402,
            "score": 19,
            "tags": [
                "javascript",
                "jquery",
                "html5",
                "mobile",
                "jquery-mobile"
            ],
            "title": "Jquery Mobile - $.mobile.changepage not loading external .JS files"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>you need to escape the string you are writing out into <code>DoEdit</code> to scrub out the double-quote characters, they are causing the <code>onclick</code> HTML attribute to close prematurely.</p>\n\n<p>Using the Javascript escape character, <code>\\</code>, isn't sufficient in the HTML context, you need to replace the double-quote with the proper XML entity representation, <code>&amp;quot;</code></p>\n",
                    "is_accepted": true,
                    "score": 100
                },
                {
                    "body": "<p>I have done a sample one using jQuery</p>\n\n<pre><code>var descr = 'test\"inside\"outside';\n$(function(){\n   $(\"#div1\").append('&lt;a href=\"#\" onclick=\"DoEdit(descr);\"&gt;Click Me&lt;/a&gt;');       \n});\n\nfunction DoEdit(desc)\n{\n    alert ( desc );\n}\n</code></pre>\n\n<p>and this works in IE and FF.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The problem is that html doesn't recognize the escape character. You could work around that by using the single quotes for the html attribute and the double quotes for the onclick.</p>\n\n<pre><code>&lt;a href=\"#\" onclick='DoEdit(\"Preliminary Assessment \\\"Mini\\\"\"); return false;'&gt;edit&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;a href=\"#\" onclick=\"DoEdit('Preliminary Assessment &amp;quot;Mini&amp;quot;'); return false;\"&gt;edit&lt;/a&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Should do the trick.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>What about escaping whitespace as well.  It sounds to me like firefox is assuming three arguments instead of one.  <code>&amp;nbsp;</code> is the non-breaking space character.  Even if it's not the whole problem, it may still be a good idea.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Folks there is already unescape function is JS which does the unescaping for \\\"</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\nvar str=\"this is \\\"good\\\"\";\n\ndocument.write(unescape(str))\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If you're assembling the html in java, you can use this nice utility class from Apache commons-lang to do all the escaping correctly:</p>\n\n<blockquote>\n  <p>org.apache.commons.lang.StringEscapeUtils<br/> Escapes and unescapes\n  Strings for Java, Java Script, HTML, XML, and SQL.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>&amp;quot;</code> would work in this particular case, as suggested before me, because of the HTML context.</p>\n\n<p>However, if you want your javascript to be independently escaped for any context, you could opt for the native javascript encoding:<br />\n<code>'</code> becomes <code>\\x27</code><br />\n<code>\"</code> becomes <code>\\x22</code></p>\n\n<p>So your onclick would become:<br/><code>DoEdit('Preliminary Assessment \\x22Mini\\x22');</code></p>\n\n<p>This would work for example also when passing a javascript string as a parameter to another javascript method (<code>alert()</code> is an easy test method for this).</p>\n\n<p>Referring you to duplicate question <a href=\"http://stackoverflow.com/questions/97578/how-do-i-escape-a-string-inside-javascript-inside-an-onclick-handler\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 27
                }
            ],
            "body": "<p>This is so stupid, but I can NOT figure this one out.  I'm outputting values from a database (it isn't really open to public entry, but it is open to entry by a user at the company -- meaning, I'm not worried about XSS.)</p>\n\n<p>I'm trying to output a tag like this:</p>\n\n<pre><code>&lt;a href=\"\" onclick=\"DoEdit('DESCRIPTION');\"&gt;Click Me&lt;/a&gt;\n</code></pre>\n\n<p>DESCRIPTION is actually a value from the DB that is something like this:</p>\n\n<p>Prelim Assess \"Mini\" Report</p>\n\n<p>I've tried replacing \" with \\\", but no matter what I try, Firefox keeps chopping off my javascript call  after the space after the word Assess, and it is causing all sorts of issues.</p>\n\n<p>I must bemissing the obvious answer, but for the life of me I can't figure it out.</p>\n\n<p>Anyone care to point out my idiocy?</p>\n\n<p>Here is the entire html page (it will be a .Net page eventually, but in order to solve this I took out everything else but the problem code)</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;a href=\"#\" onclick=\"DoEdit('Preliminary Assessment \\\"Mini\\\"'); return false;\"&gt;edit&lt;/a&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1371114908,
            "question_id": 2004168,
            "score": 91,
            "tags": [
                "javascript",
                "quotes",
                "escaping"
            ],
            "title": "Javascript escape quotes"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><code>Access-Control-Allow-Headers</code> does not allow <code>*</code> as accepted value, see the Mozilla Documentation <a href=\"https://developer.mozilla.org/En/HTTP_access_control#Access-Control-Allow-Headers\">here</a>.</p>\n\n<p>Instead of the asterisk, you should send the accepted headers (first <code>X-Requested-With</code> as the error says).</p>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>Handling CORS requests properly is a tad more involved.  Here is a function that will respond more fully (and properly).</p>\n\n<pre><code>/**\n *  An example CORS-compliant method.  It will allow any GET, POST, or OPTIONS requests from any\n *  origin.\n *\n *  In a production environment, you probably want to be more restrictive, but this gives you\n *  the general idea of what is involved.  For the nitty-gritty low-down, read:\n *\n *  - https://developer.mozilla.org/en/HTTP_access_control\n *  - http://www.w3.org/TR/cors/\n *\n */\nfunction cors() {\n\n    // Allow from any origin\n    if (isset($_SERVER['HTTP_ORIGIN'])) {\n        header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n        header('Access-Control-Allow-Credentials: true');\n        header('Access-Control-Max-Age: 86400');    // cache for 1 day\n    }\n\n    // Access-Control headers are received during OPTIONS requests\n    if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {\n\n        if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']))\n            header(\"Access-Control-Allow-Methods: GET, POST, OPTIONS\");         \n\n        if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']))\n            header(\"Access-Control-Allow-Headers: {$_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']}\");\n\n        exit(0);\n    }\n\n    echo \"You have CORS!\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>I got the same error, and fixed it with the following PHP in my back-end script:</p>\n\n<blockquote>\n  <p>header('Access-Control-Allow-Origin: *');</p>\n  \n  <p>header('Access-Control-Allow-Methods: GET, POST');</p>\n  \n  <p>header(\"Access-Control-Allow-Headers: X-Requested-With\");</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have a simple PHP script that I am attempting a cross-domain CORS request:</p>\n\n<pre><code>&lt;?php\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Access-Control-Allow-Headers: *\");\n...\n</code></pre>\n\n<p>Yet I still get the error:</p>\n\n<blockquote>\n  <p>Request header field <code>X-Requested-With</code> is not allowed by <code>Access-Control-Allow-Headers</code></p>\n</blockquote>\n\n<p>Anything I'm missing?</p>\n",
            "last_activity_date": 1409821583,
            "question_id": 8719276,
            "score": 27,
            "tags": [
                "php",
                "javascript",
                "xmlhttprequest",
                "cors"
            ],
            "title": "CORS with php headers"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>So very very close...</p>\n\n<p>You just needed to override the 'which' property.  Here's some sample code:</p>\n\n<pre><code>Podium = {};\nPodium.keydown = function(k) {\n    var oEvent = document.createEvent('KeyboardEvent');\n\n    // Chromium Hack\n    Object.defineProperty(oEvent, 'keyCode', {\n                get : function() {\n                    return this.keyCodeVal;\n                }\n    });     \n    Object.defineProperty(oEvent, 'which', {\n                get : function() {\n                    return this.keyCodeVal;\n                }\n    });     \n\n    if (oEvent.initKeyboardEvent) {\n        oEvent.initKeyboardEvent(\"keydown\", true, true, document.defaultView, false, false, false, false, k, k);\n    } else {\n        oEvent.initKeyEvent(\"keydown\", true, true, document.defaultView, false, false, false, false, k, 0);\n    }\n\n    oEvent.keyCodeVal = k;\n\n    if (oEvent.keyCode !== k) {\n        alert(\"keyCode mismatch \" + oEvent.keyCode + \"(\" + oEvent.which + \")\");\n    }\n\n    document.dispatchEvent(oEvent);\n}\n</code></pre>\n\n<p>Sample usage:</p>\n\n<pre><code>Podium.keydown(65);\n</code></pre>\n\n<p>Note: this code is not designed to work in IE, Safari, or other browsers.  Well, maybe with Firefox.  YMMV.</p>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p><strong>EDITED</strong>: Orwellophile's solution does work. Check out this demo to see it in action + a generic event alternative :  <a href=\"http://jsbin.com/awenaq/4\">http://jsbin.com/awenaq/4</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Orwellophile's solution does work.</p>\n\n<ul>\n<li>First: 'keyCode', 'charCode' and 'which' is readonly in Safari and IE9+ (at least).</li>\n<li>Second: initKeyboardEvent is kind of messy. All browsers implement it in a different way. Even in webkit's there are several different implementation of initKeyboardEvent. And there is no \"good\"\nway to initKeyboardEvent in Opera.</li>\n<li>Third: initKeyboardEvent is deprecated. You need to use initKeyEvent or KeyboardEvent constructor.</li>\n</ul>\n\n<p>Here I wrote a <a href=\"https://gist.github.com/4654819\">cross-browser initKeyboardEvent function</a> (gist):</p>\n\n<p>Example:</p>\n\n<pre><code>var a = window.crossBrowser_initKeyboardEvent(\"keypress\", {\"key\": 1, \"char\": \"!\", shiftKey: true})\nalert(a.type + \" | \" + a.key + \" | \" + a.char + \" | \" + a.shiftKey)\n</code></pre>\n\n<p>And here is my <a href=\"https://github.com/termi/DOM-Keyboard-Event-Level-3-polyfill\">DOM Keyboard Event Level 3 polyfill</a> with cross-browser KeyboardEvent constructor.</p>\n\n<p>Example:</p>\n\n<pre><code>var a = new KeyboardEvent(\"keypress\", {\"key\": 1, \"char\": \"!\", shiftKey: true})\nalert(a.type + \" | \" + a.key + \" | \" + a.char + \" | \" + a.shiftKey)\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/termi/yjc5F/\">Example 2</a></p>\n\n<p><a href=\"http://h123.ru/-/tests/KeyboardEvent/\">Example 3</a></p>\n\n<p>Important Note 1: charCode, keyCode and which properties is deprecated. So neither my crossBrowser_initKeyboardEvent no KeyboardEvent constructor is absolutely guaranteed right values of that properties in some browsers. You can using properties \"key\" and \"char\" instead or edit my <a href=\"https://gist.github.com/4654819\">gist</a> to force using initEvent in browsers with read-only charCode, keyCode and which properties.</p>\n\n<p>Important Note 2: keypress event is deprecated and for now unsupported in my <a href=\"https://github.com/termi/DOM-Keyboard-Event-Level-3-polyfill\">Keyboard Event Level 3 polyfill</a>. That's mean that key and char properties in keypress event can have random values. I am working to fix that problem to backward compatibility.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>In order to get @Orwellophile's script to work on Google Chrome 26.0.1410.65 (on Mac OS X 10.7.5, if that matters), I had to change one line: his script appears to have the paramaters of <code>initKeyboardEvent</code> in different order than the <a href=\"https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent#initKeyboardEvent%28%29\" rel=\"nofollow\">MDN documentation for initKeyboardEvent</a>.</p>\n\n<p>The changed line looks like this:</p>\n\n<pre><code>oEvent.initKeyboardEvent(\"keydown\", true, true, document.defaultView, k, k, \"\", \"\", false, \"\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>All the solutions above are working, but I've found one case they won't.</p>\n\n<p>If Dart is being used, Dart code that uses KeyboardEvents won't work on a general Event.</p>\n\n<p>You'll get something like get$keyCode is undefined.</p>\n\n<p>after banging my head for hours on this, I've found the following trick:</p>\n\n<pre><code>function __triggerKeyboardEvent(el, keyCode)\n{\n   var eventObj = document.createEventObject ?\n       document.createEventObject() : document.createEvent(\"Events\");\n\n   var tempKeyboardObj = document.createEvent(\"KeyboardEvents\");\n\n   if(eventObj.initEvent){\n      eventObj.initEvent(\"keydown\", true, true);\n   }\n   eventObj.___dart_dispatch_record_ZxYxX_0_ = tempKeyboardObj.___dart_dispatch_record_ZxYxX_0_\n   eventObj.keyCode = keyCode;\n   eventObj.which = keyCode;\n\n   el.dispatchEvent ? el.dispatchEvent(eventObj) : el.fireEvent(\"onkeydown\", eventObj);\n\n} \n</code></pre>\n\n<p>Fooling Dart interceptor to thing our Event is actually a KeyboardEvent, did the trick.</p>\n\n<p>Leaving it here, for the poor guy that is trying to test Dart app on a webkit based browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to simulate keydown events on a given textarea element in an html page. Since I am using chrome, I called <code>initKeyboardEvent</code> on my variable and I passed the keyCode I want to type into the textarea. Here is what I tried:</p>\n\n<pre><code>var keyEvent = document.createEvent('KeyboardEvent');\nkeyEvent.initKeyboardEvent('keydown', true, false, null, 0, false, 0, false, 77, 0);\ninputNode.dispatchEvent(keyEvent);\n</code></pre>\n\n<p>In this code I'm typing the letter <code>m</code> however the textarea is only getting the keyCode <code>13</code> which is the <code>Enter</code> key. So, I tried an override code I saw online that sets the value to keyCodeVal, but with no success</p>\n\n<pre><code>var keyEvent = document.createEvent('KeyboardEvent');\nObject.defineProperty(keyEvent, 'keyCode', { \n                         get : function() {\n                                 return this.keyCodeVal;\n                         }\n                        });\nkeyEvent.initKeyboardEvent('keydown', true, false, null, 0, false, 0, false, 77, 0);\nkeyEvent.keyCodeVal = 77;\ninputNode.dispatchEvent(keyEvent);\n</code></pre>\n\n<p>Does anyone have an idea how to set the keyCode value?</p>\n",
            "last_activity_date": 1416940576,
            "question_id": 10455626,
            "score": 15,
            "tags": [
                "javascript",
                "google-chrome",
                "javascript-events"
            ],
            "title": "Keydown Simulation in Chrome fires normally but not the correct key"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>To do that fully you would need to emulate an entire browser model - never going to happen.</p>\n\n<p>Since you state \"my page\", the usual trick here is to do something like:</p>\n\n<pre><code>&lt;a id=\"foo\" href=\"crawlableRoute\"&gt;text&lt;/a&gt;\n</code></pre>\n\n<p>and (later) attach javascript to the <code>click</code> that <strong>returns false</strong>, suppressing the original link. Your crawler navigates via <code>crawlableRoute</code>. For example (using jQuery):</p>\n\n<pre><code>$(function() {\n    $('#foo').click(function() {\n         // do stuff;\n         return false; // suppress navigation\n    });\n});\n</code></pre>\n\n<p>This way you don't <strong>need</strong> to handle the js.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>To answer the question title \"How to parse and execute JS in C#\", here is piece of code that wraps the <a href=\"http://msdn.microsoft.com/en-us/library/xawadt95%28VS.85%29.aspx\">Windows Script Engines</a>. It supports 32-bit and 64-bit environments.</p>\n\n<p>In your specific case, it means depending on the .JS code, you may have to emulate/implement some HTML DOM element such as 'document', 'window', etc. (using the 'named items' feature, with the MyItem class. that's exactly what Internet Explorer does).</p>\n\n<p>Here are some sample of what you can do with it:</p>\n\n<p>1) Direct expressions evaluation:</p>\n\n<pre><code>Console.WriteLine(ScriptEngine.Eval(\"jscript\", \"1+2/3\"));\n</code></pre>\n\n<p>will display 1.66666666666667</p>\n\n<p>2) Function call, with optional arguments:</p>\n\n<pre><code>using (ScriptEngine engine = new ScriptEngine(\"jscript\"))\n{\n  ParsedScript parsed = engine.Parse(\"function MyFunc(x){return 1+2+x}\");\n  Console.WriteLine(parsed.CallMethod(\"MyFunc\", 3));\n}\n</code></pre>\n\n<p>Will display 6</p>\n\n<p>3) Function call with named items, and optional arguments:</p>\n\n<pre><code>using (ScriptEngine engine = new ScriptEngine(\"jscript\"))\n{\n    ParsedScript parsed = engine.Parse(\"function MyFunc(x){return 1+2+x+My.Num}\");\n    MyItem item = new MyItem();\n    item.Num = 4;\n    engine.SetNamedItem(\"My\", item);\n    Console.WriteLine(parsed.CallMethod(\"MyFunc\", 3));\n}\n\n[ComVisible(true)] // Script engines are COM components.\npublic class MyItem\n{\n    public int Num { get; set; }\n}\n</code></pre>\n\n<p>Will display 10.</p>\n\n<p><strong>Edit</strong>: I have added the possibility to use a CLSID instead of a script language name, so we can re-use the new and fast IE9+ \"<a href=\"http://en.wikipedia.org/wiki/Chakra_%28JScript_engine%29\">chakra</a>\" javascript engine, like this:</p>\n\n<pre><code>using (ScriptEngine engine = new ScriptEngine(\"{16d51579-a30b-4c8b-a276-0ff4dc41e755}\"))\n{\n    // continue with chakra now\n}\n</code></pre>\n\n<p>Here is the full source:</p>\n\n<pre><code>/// &lt;summary&gt;\n/// Represents a Windows Script Engine such as JScript, VBScript, etc.\n/// &lt;/summary&gt;\npublic sealed class ScriptEngine : IDisposable\n{\n    /// &lt;summary&gt;\n    /// The name of the function used for simple evaluation.\n    /// &lt;/summary&gt;\n    public const string MethodName = \"EvalMethod\";\n\n    /// &lt;summary&gt;\n    /// The default scripting language name.\n    /// &lt;/summary&gt;\n    public const string DefaultLanguage = JavaScriptLanguage;\n\n    /// &lt;summary&gt;\n    /// The JavaScript or jscript scripting language name.\n    /// &lt;/summary&gt;\n    public const string JavaScriptLanguage = \"javascript\";\n\n    /// &lt;summary&gt;\n    /// The javascript or jscript scripting language name.\n    /// &lt;/summary&gt;\n    public const string VBScriptLanguage = \"vbscript\";\n\n    /// &lt;summary&gt;\n    /// The chakra javascript engine CLSID. The value is {16d51579-a30b-4c8b-a276-0ff4dc41e755}.\n    /// &lt;/summary&gt;\n    public const string ChakraClsid = \"{16d51579-a30b-4c8b-a276-0ff4dc41e755}\";\n\n    private IActiveScript _engine;\n    private IActiveScriptParse32 _parse32;\n    private IActiveScriptParse64 _parse64;\n    internal ScriptSite Site;\n    private Version _version;\n    private string _name;\n\n    [Guid(\"BB1A2AE1-A4F9-11cf-8F20-00805F2CD064\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    private interface IActiveScript\n    {\n        [PreserveSig]\n        int SetScriptSite(IActiveScriptSite pass);\n        [PreserveSig]\n        int GetScriptSite(Guid riid, out IntPtr site);\n        [PreserveSig]\n        int SetScriptState(ScriptState state);\n        [PreserveSig]\n        int GetScriptState(out ScriptState scriptState);\n        [PreserveSig]\n        int Close();\n        [PreserveSig]\n        int AddNamedItem(string name, ScriptItem flags);\n        [PreserveSig]\n        int AddTypeLib(Guid typeLib, uint major, uint minor, uint flags);\n        [PreserveSig]\n        int GetScriptDispatch(string itemName, out IntPtr dispatch);\n        [PreserveSig]\n        int GetCurrentScriptThreadID(out uint thread);\n        [PreserveSig]\n        int GetScriptThreadID(uint win32ThreadId, out uint thread);\n        [PreserveSig]\n        int GetScriptThreadState(uint thread, out ScriptThreadState state);\n        [PreserveSig]\n        int InterruptScriptThread(uint thread, out System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo, uint flags);\n        [PreserveSig]\n        int Clone(out IActiveScript script);\n    }\n\n    [Guid(\"4954E0D0-FBC7-11D1-8410-006008C3FBFC\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    private interface IActiveScriptProperty\n    {\n        [PreserveSig]\n        int GetProperty(int dwProperty, IntPtr pvarIndex, out object pvarValue);\n        [PreserveSig]\n        int SetProperty(int dwProperty, IntPtr pvarIndex, ref object pvarValue);\n    }\n\n    [Guid(\"DB01A1E3-A42B-11cf-8F20-00805F2CD064\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    private interface IActiveScriptSite\n    {\n        [PreserveSig]\n        int GetLCID(out int lcid);\n        [PreserveSig]\n        int GetItemInfo(string name, ScriptInfo returnMask, out IntPtr item, IntPtr typeInfo);\n        [PreserveSig]\n        int GetDocVersionString(out string version);\n        [PreserveSig]\n        int OnScriptTerminate(object result, System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo);\n        [PreserveSig]\n        int OnStateChange(ScriptState scriptState);\n        [PreserveSig]\n        int OnScriptError(IActiveScriptError scriptError);\n        [PreserveSig]\n        int OnEnterScript();\n        [PreserveSig]\n        int OnLeaveScript();\n    }\n\n    [Guid(\"EAE1BA61-A4ED-11cf-8F20-00805F2CD064\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    private interface IActiveScriptError\n    {\n        [PreserveSig]\n        int GetExceptionInfo(out System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo);\n        [PreserveSig]\n        int GetSourcePosition(out uint sourceContext, out int lineNumber, out int characterPosition);\n        [PreserveSig]\n        int GetSourceLineText(out string sourceLine);\n    }\n\n    [Guid(\"BB1A2AE2-A4F9-11cf-8F20-00805F2CD064\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    private interface IActiveScriptParse32\n    {\n        [PreserveSig]\n        int InitNew();\n        [PreserveSig]\n        int AddScriptlet(string defaultName, string code, string itemName, string subItemName, string eventName, string delimiter, IntPtr sourceContextCookie, uint startingLineNumber, ScriptText flags, out string name, out System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo);\n        [PreserveSig]\n        int ParseScriptText(string code, string itemName, IntPtr context, string delimiter, int sourceContextCookie, uint startingLineNumber, ScriptText flags, out object result, out System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo);\n    }\n\n    [Guid(\"C7EF7658-E1EE-480E-97EA-D52CB4D76D17\"), InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]\n    private interface IActiveScriptParse64\n    {\n        [PreserveSig]\n        int InitNew();\n        [PreserveSig]\n        int AddScriptlet(string defaultName, string code, string itemName, string subItemName, string eventName, string delimiter, IntPtr sourceContextCookie, uint startingLineNumber, ScriptText flags, out string name, out System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo);\n        [PreserveSig]\n        int ParseScriptText(string code, string itemName, IntPtr context, string delimiter, long sourceContextCookie, uint startingLineNumber, ScriptText flags, out object result, out System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo);\n    }\n\n    [Flags]\n    private enum ScriptText\n    {\n        None = 0,\n        //DelayExecution = 1,\n        //IsVisible = 2,\n        IsExpression = 32,\n        IsPersistent = 64,\n        //HostManageSource = 128\n    }\n\n    [Flags]\n    private enum ScriptInfo\n    {\n        //None = 0,\n        //IUnknown = 1,\n        ITypeInfo = 2\n    }\n\n    [Flags]\n    private enum ScriptItem\n    {\n        //None = 0,\n        IsVisible = 2,\n        IsSource = 4,\n        //GlobalMembers = 8,\n        //IsPersistent = 64,\n        //CodeOnly = 512,\n        //NoCode = 1024\n    }\n\n    private enum ScriptThreadState\n    {\n        //NotInScript = 0,\n        //Running = 1\n    }\n\n    private enum ScriptState\n    {\n        Uninitialized = 0,\n        Started = 1,\n        Connected = 2,\n        Disconnected = 3,\n        Closed = 4,\n        Initialized = 5\n    }\n\n    private const int TYPE_E_ELEMENTNOTFOUND = unchecked((int)(0x8002802B));\n    private const int E_NOTIMPL = -2147467263;\n\n    /// &lt;summary&gt;\n    /// Determines if a script engine with the input name exists.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"language\"&gt;The language.&lt;/param&gt;\n    /// &lt;returns&gt;true if the engine exists; false otherwise.&lt;/returns&gt;\n    public static Version GetVersion(string language)\n    {\n        if (language == null)\n            throw new ArgumentNullException(\"language\");\n\n        Type engine;\n        Guid clsid;\n        if (Guid.TryParse(language, out clsid))\n        {\n            engine = Type.GetTypeFromCLSID(clsid, false);\n        }\n        else\n        {\n            engine = Type.GetTypeFromProgID(language, false);\n        }\n        if (engine == null)\n            return null;\n\n        IActiveScript scriptEngine = Activator.CreateInstance(engine) as IActiveScript;\n        if (scriptEngine == null)\n            return null;\n\n        IActiveScriptProperty scriptProperty = scriptEngine as IActiveScriptProperty;\n        if (scriptProperty == null)\n            return new Version(1, 0, 0, 0);\n\n        int major = GetProperty(scriptProperty, SCRIPTPROP_MAJORVERSION, 0);\n        int minor = GetProperty(scriptProperty, SCRIPTPROP_MINORVERSION, 0);\n        int revision = GetProperty(scriptProperty, SCRIPTPROP_BUILDNUMBER, 0);\n        Version version = new Version(major, minor, Environment.OSVersion.Version.Build, revision);\n        Marshal.ReleaseComObject(scriptProperty);\n        Marshal.ReleaseComObject(scriptEngine);\n        return version;\n    }\n\n    private static T GetProperty&lt;T&gt;(IActiveScriptProperty prop, int index, T defaultValue)\n    {\n        object value;\n        if (prop.GetProperty(index, IntPtr.Zero, out value) != 0)\n            return defaultValue;\n\n        try\n        {\n            return (T)Convert.ChangeType(value, typeof(T));\n        }\n        catch\n        {\n            return defaultValue;\n        }\n    }\n\n    /// &lt;summary&gt; \n    /// Initializes a new instance of the &lt;see cref=\"ScriptEngine\"/&gt; class. \n    /// &lt;/summary&gt; \n    /// &lt;param name=\"language\"&gt;The scripting language. Standard Windows Script engines names are 'jscript' or 'vbscript'.&lt;/param&gt; \n    public ScriptEngine(string language)\n    {\n        if (language == null)\n            throw new ArgumentNullException(\"language\");\n\n        Type engine;\n        Guid clsid;\n        if (Guid.TryParse(language, out clsid))\n        {\n            engine = Type.GetTypeFromCLSID(clsid, true);\n        }\n        else\n        {\n            engine = Type.GetTypeFromProgID(language, true);\n        }\n        _engine = Activator.CreateInstance(engine) as IActiveScript;\n        if (_engine == null)\n            throw new ArgumentException(language + \" is not an Windows Script Engine\", \"language\");\n\n        Site = new ScriptSite();\n        _engine.SetScriptSite(Site);\n\n        // support 32-bit &amp; 64-bit process \n        if (IntPtr.Size == 4)\n        {\n            _parse32 = (IActiveScriptParse32)_engine;\n            _parse32.InitNew();\n        }\n        else\n        {\n            _parse64 = (IActiveScriptParse64)_engine;\n            _parse64.InitNew();\n        }\n    }\n\n    private const int SCRIPTPROP_NAME = 0x00000000;\n    private const int SCRIPTPROP_MAJORVERSION = 0x00000001;\n    private const int SCRIPTPROP_MINORVERSION = 0x00000002;\n    private const int SCRIPTPROP_BUILDNUMBER = 0x00000003;\n\n    /// &lt;summary&gt;\n    /// Gets the engine version.\n    /// &lt;/summary&gt;\n    /// &lt;value&gt;\n    /// The version.\n    /// &lt;/value&gt;\n    public Version Version\n    {\n        get\n        {\n            if (_version == null)\n            {\n                int major = GetProperty(SCRIPTPROP_MAJORVERSION, 0);\n                int minor = GetProperty(SCRIPTPROP_MINORVERSION, 0);\n                int revision = GetProperty(SCRIPTPROP_BUILDNUMBER, 0);\n                _version = new Version(major, minor, Environment.OSVersion.Version.Build, revision);\n            }\n            return _version;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Gets the engine name.\n    /// &lt;/summary&gt;\n    /// &lt;value&gt;\n    /// The name.\n    /// &lt;/value&gt;\n    public string Name\n    {\n        get\n        {\n            if (_name == null)\n            {\n                _name = GetProperty(SCRIPTPROP_NAME, string.Empty);\n            }\n            return _name;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Gets a script engine property.\n    /// &lt;/summary&gt;\n    /// &lt;typeparam name=\"T\"&gt;The expected property type.&lt;/typeparam&gt;\n    /// &lt;param name=\"index\"&gt;The property index.&lt;/param&gt;\n    /// &lt;param name=\"defaultValue\"&gt;The default value if not found.&lt;/param&gt;\n    /// &lt;returns&gt;The value of the property or the default value.&lt;/returns&gt;\n    public T GetProperty&lt;T&gt;(int index, T defaultValue)\n    {\n        object value;\n        if (!TryGetProperty(index, out value))\n            return defaultValue;\n\n        try\n        {\n            return (T)Convert.ChangeType(value, typeof(T));\n        }\n        catch\n        {\n            return defaultValue;\n        }\n    }\n\n    /// &lt;summary&gt;\n    /// Gets a script engine property.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;The property index.&lt;/param&gt;\n    /// &lt;param name=\"value\"&gt;The value.&lt;/param&gt;\n    /// &lt;returns&gt;true if the property was successfully got; false otherwise.&lt;/returns&gt;\n    public bool TryGetProperty(int index, out object value)\n    {\n        value = null;\n        IActiveScriptProperty property = _engine as IActiveScriptProperty;\n        if (property == null)\n            return false;\n\n        return property.GetProperty(index, IntPtr.Zero, out value) == 0;\n    }\n\n    /// &lt;summary&gt;\n    /// Sets a script engine property.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"index\"&gt;The property index.&lt;/param&gt;\n    /// &lt;param name=\"value\"&gt;The value.&lt;/param&gt;\n    /// &lt;returns&gt;true if the property was successfully set; false otherwise.&lt;/returns&gt;\n    public bool SetProperty(int index, object value)\n    {\n        IActiveScriptProperty property = _engine as IActiveScriptProperty;\n        if (property == null)\n            return false;\n\n        return property.SetProperty(index, IntPtr.Zero, ref value) == 0;\n    }\n\n    /// &lt;summary&gt; \n    /// Adds the name of a root-level item to the scripting engine's name space. \n    /// &lt;/summary&gt; \n    /// &lt;param name=\"name\"&gt;The name. May not be null.&lt;/param&gt; \n    /// &lt;param name=\"value\"&gt;The value. It must be a ComVisible object.&lt;/param&gt; \n    public void SetNamedItem(string name, object value)\n    {\n        if (name == null)\n            throw new ArgumentNullException(\"name\");\n\n        _engine.AddNamedItem(name, ScriptItem.IsVisible | ScriptItem.IsSource);\n        Site.NamedItems[name] = value;\n    }\n\n    internal class ScriptSite : IActiveScriptSite\n    {\n        internal ScriptException LastException;\n        internal Dictionary&lt;string, object&gt; NamedItems = new Dictionary&lt;string, object&gt;();\n\n        int IActiveScriptSite.GetLCID(out int lcid)\n        {\n            lcid = Thread.CurrentThread.CurrentCulture.LCID;\n            return 0;\n        }\n\n        int IActiveScriptSite.GetItemInfo(string name, ScriptInfo returnMask, out IntPtr item, IntPtr typeInfo)\n        {\n            item = IntPtr.Zero;\n            if ((returnMask &amp; ScriptInfo.ITypeInfo) == ScriptInfo.ITypeInfo)\n                return E_NOTIMPL;\n\n            object value;\n            if (!NamedItems.TryGetValue(name, out value))\n                return TYPE_E_ELEMENTNOTFOUND;\n\n            item = Marshal.GetIUnknownForObject(value);\n            return 0;\n        }\n\n        int IActiveScriptSite.GetDocVersionString(out string version)\n        {\n            version = null;\n            return 0;\n        }\n\n        int IActiveScriptSite.OnScriptTerminate(object result, System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo)\n        {\n            return 0;\n        }\n\n        int IActiveScriptSite.OnStateChange(ScriptState scriptState)\n        {\n            return 0;\n        }\n\n        int IActiveScriptSite.OnScriptError(IActiveScriptError scriptError)\n        {\n            string sourceLine = null;\n            try\n            {\n                scriptError.GetSourceLineText(out sourceLine);\n            }\n            catch\n            {\n                // happens sometimes... \n            }\n            uint sourceContext;\n            int lineNumber;\n            int characterPosition;\n            scriptError.GetSourcePosition(out sourceContext, out lineNumber, out characterPosition);\n            lineNumber++;\n            characterPosition++;\n            System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo;\n            scriptError.GetExceptionInfo(out exceptionInfo);\n\n            string message;\n            if (!string.IsNullOrEmpty(sourceLine))\n            {\n                message = \"Script exception: {1}. Error number {0} (0x{0:X8}): {2} at line {3}, column {4}. Source line: '{5}'.\";\n            }\n            else\n            {\n                message = \"Script exception: {1}. Error number {0} (0x{0:X8}): {2} at line {3}, column {4}.\";\n            }\n            LastException = new ScriptException(string.Format(message, exceptionInfo.scode, exceptionInfo.bstrSource, exceptionInfo.bstrDescription, lineNumber, characterPosition, sourceLine));\n            LastException.Column = characterPosition;\n            LastException.Description = exceptionInfo.bstrDescription;\n            LastException.Line = lineNumber;\n            LastException.Number = exceptionInfo.scode;\n            LastException.Text = sourceLine;\n            return 0;\n        }\n\n        int IActiveScriptSite.OnEnterScript()\n        {\n            LastException = null;\n            return 0;\n        }\n\n        int IActiveScriptSite.OnLeaveScript()\n        {\n            return 0;\n        }\n    }\n\n    /// &lt;summary&gt; \n    /// Evaluates an expression using the specified language. \n    /// &lt;/summary&gt; \n    /// &lt;param name=\"language\"&gt;The language.&lt;/param&gt; \n    /// &lt;param name=\"expression\"&gt;The expression. May not be null.&lt;/param&gt; \n    /// &lt;returns&gt;The result of the evaluation.&lt;/returns&gt; \n    public static object Eval(string language, string expression)\n    {\n        return Eval(language, expression, null);\n    }\n\n    /// &lt;summary&gt; \n    /// Evaluates an expression using the specified language, with an optional array of named items. \n    /// &lt;/summary&gt; \n    /// &lt;param name=\"language\"&gt;The language.&lt;/param&gt; \n    /// &lt;param name=\"expression\"&gt;The expression. May not be null.&lt;/param&gt; \n    /// &lt;param name=\"namedItems\"&gt;The named items array.&lt;/param&gt; \n    /// &lt;returns&gt;The result of the evaluation.&lt;/returns&gt; \n    public static object Eval(string language, string expression, params KeyValuePair&lt;string, object&gt;[] namedItems)\n    {\n        if (language == null)\n            throw new ArgumentNullException(\"language\");\n\n        if (expression == null)\n            throw new ArgumentNullException(\"expression\");\n\n        using (ScriptEngine engine = new ScriptEngine(language))\n        {\n            if (namedItems != null)\n            {\n                foreach (KeyValuePair&lt;string, object&gt; kvp in namedItems)\n                {\n                    engine.SetNamedItem(kvp.Key, kvp.Value);\n                }\n            }\n            return engine.Eval(expression);\n        }\n    }\n\n    /// &lt;summary&gt; \n    /// Evaluates an expression. \n    /// &lt;/summary&gt; \n    /// &lt;param name=\"expression\"&gt;The expression. May not be null.&lt;/param&gt; \n    /// &lt;returns&gt;The result of the evaluation.&lt;/returns&gt; \n    public object Eval(string expression)\n    {\n        if (expression == null)\n            throw new ArgumentNullException(\"expression\");\n\n        return Parse(expression, true);\n    }\n\n    /// &lt;summary&gt; \n    /// Parses the specified text and returns an object that can be used for evaluation. \n    /// &lt;/summary&gt; \n    /// &lt;param name=\"text\"&gt;The text to parse.&lt;/param&gt; \n    /// &lt;returns&gt;An instance of the ParsedScript class.&lt;/returns&gt; \n    public ParsedScript Parse(string text)\n    {\n        if (text == null)\n            throw new ArgumentNullException(\"text\");\n\n        return (ParsedScript)Parse(text, false);\n    }\n\n    private object Parse(string text, bool expression)\n    {\n        const string varName = \"x___\";\n        object result;\n\n        _engine.SetScriptState(ScriptState.Connected);\n\n        ScriptText flags = ScriptText.None;\n        if (expression)\n        {\n            flags |= ScriptText.IsExpression;\n        }\n\n        try\n        {\n            // immediate expression computation seems to work only for 64-bit \n            // so hack something for 32-bit... \n            System.Runtime.InteropServices.ComTypes.EXCEPINFO exceptionInfo;\n            if (_parse32 != null)\n            {\n                if (expression)\n                {\n                    // should work for jscript &amp; vbscript at least... \n                    text = varName + \"=\" + text;\n                }\n                _parse32.ParseScriptText(text, null, IntPtr.Zero, null, 0, 0, flags, out result, out exceptionInfo);\n            }\n            else\n            {\n                _parse64.ParseScriptText(text, null, IntPtr.Zero, null, 0, 0, flags, out result, out exceptionInfo);\n            }\n        }\n        catch\n        {\n            if (Site.LastException != null)\n                throw Site.LastException;\n\n            throw;\n        }\n\n        IntPtr dispatch;\n        if (expression)\n        {\n            // continue  our 32-bit hack... \n            if (_parse32 != null)\n            {\n                _engine.GetScriptDispatch(null, out dispatch);\n                object dp = Marshal.GetObjectForIUnknown(dispatch);\n                try\n                {\n                    return dp.GetType().InvokeMember(varName, BindingFlags.GetProperty, null, dp, null);\n                }\n                catch\n                {\n                    if (Site.LastException != null)\n                        throw Site.LastException;\n\n                    throw;\n                }\n            }\n            return result;\n        }\n\n        _engine.GetScriptDispatch(null, out dispatch);\n        ParsedScript parsed = new ParsedScript(this, dispatch);\n        return parsed;\n    }\n\n    /// &lt;summary&gt;\n    /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n    /// &lt;/summary&gt;\n    public void Dispose()\n    {\n        if (_parse32 != null)\n        {\n            Marshal.ReleaseComObject(_parse32);\n            _parse32 = null;\n        }\n\n        if (_parse64 != null)\n        {\n            Marshal.ReleaseComObject(_parse64);\n            _parse64 = null;\n        }\n\n        if (_engine != null)\n        {\n            Marshal.ReleaseComObject(_engine);\n            _engine = null;\n        }\n    }\n}\n\npublic sealed class ParsedScript : IDisposable\n{\n    private object _dispatch;\n    private readonly ScriptEngine _engine;\n\n    internal ParsedScript(ScriptEngine engine, IntPtr dispatch)\n    {\n        _engine = engine;\n        _dispatch = Marshal.GetObjectForIUnknown(dispatch);\n    }\n\n    public object CallMethod(string methodName, params object[] arguments)\n    {\n        if (_dispatch == null)\n            throw new InvalidOperationException();\n\n        if (methodName == null)\n            throw new ArgumentNullException(\"methodName\");\n\n        try\n        {\n            return _dispatch.GetType().InvokeMember(methodName, BindingFlags.InvokeMethod, null, _dispatch, arguments);\n        }\n        catch\n        {\n            if (_engine.Site.LastException != null)\n                throw _engine.Site.LastException;\n\n            throw;\n        }\n    }\n\n    void IDisposable.Dispose()\n    {\n        if (_dispatch != null)\n        {\n            Marshal.ReleaseComObject(_dispatch);\n            _dispatch = null;\n        }\n    }\n}\n\n[Serializable]\npublic class ScriptException : Exception\n{\n    public ScriptException()\n        : base(\"Script Exception\")\n    {\n    }\n\n    public ScriptException(string message)\n        : base(message)\n    {\n    }\n\n    public ScriptException(Exception innerException)\n        : base(null, innerException)\n    {\n    }\n\n    public ScriptException(string message, Exception innerException)\n        : base(message, innerException)\n    {\n    }\n\n    protected ScriptException(SerializationInfo info, StreamingContext context)\n        : base(info, context)\n    {\n    }\n\n    public string Description { get; internal set; }\n    public int Line { get; internal set; }\n    public int Column { get; internal set; }\n    public int Number { get; internal set; }\n    public string Text { get; internal set; }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 33
                },
                {
                    "body": "<p>Maybe not the answer you were looking for, but this question was posted 3 years ago.  Alternative options are available today.</p>\n\n<blockquote>\n  <p>See Also:\n  <a href=\"http://stackoverflow.com/questions/172753/embedding-javascript-engine-into-net\">Embedding JavaScript engine into .NET</a></p>\n</blockquote>\n\n<p>These days you can make use of the \"JavaScript Engine Switcher\" NuGet packages for your project.  Choose which one is best for your environment.</p>\n\n<p>For example, v8 will requires ensuring certain binaries are installed on your\nserver, while the Jint NuGet package wraps everything for you (aka it \"just works\"). </p>\n\n<blockquote>\n  <p>Jint has been moved to GitHub and is available here:  <a href=\"https://github.com/sebastienros/jint\" rel=\"nofollow\">https://github.com/sebastienros/jint</a></p>\n</blockquote>\n\n<p>To perform the kind of functionality targeted by your question, you may need to enable access to .NET assemblies in your scripting engine and use those for AJAX calls.  Other configuration options may provide even more functionality.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>i have simple crawler which crawl and search page. but now i have problem how to execute and parse js link from that page. Does anyone have any idea how to parse and execute js page?</p>\n\n<p>example:</p>\n\n<ul>\n<li>some_url is simple to parse with webhtmltoolktit</li>\n<li>JAVASCRIPT:runmeat(1,7,0,2,7,9) is js link which redirect then to some_url2 page and this page i need to crawl then. but problem is how to execute this javascript in C# to get that some_url2 link?</li>\n</ul>\n",
            "last_activity_date": 1405954692,
            "question_id": 4744105,
            "score": 7,
            "tags": [
                "c#",
                "javascript",
                "scriptengine"
            ],
            "title": "parse and execute JS by C#"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Use <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference%3aGlobal_Objects%3aFunction%3aapply\">apply</a>:</p>\n\n<pre><code>var arr = ['a','b','c'];\n\nvar func = function() {\n  alert(arguments.length);\n\n  for(var i = 0; i &lt; arguments.length; i++) {\n    alert(arguments[i]);\n  }\n\n};\n\nfunc.apply(null, arr);\n</code></pre>\n\n<p>Notice that <code>null</code> is used as the first argument of apply, that will set the <code>this</code> keyword to the Global object (window) inside <code>func</code>.</p>\n\n<p>Also note that the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\"><code>arguments</code></a> object is not really an Array, you can convert it by :</p>\n\n<pre><code>var argsArray = Array.prototype.slice.call(arguments);\n</code></pre>\n\n<p>And maybe is useful to you, that you can know how many arguments a function expects:</p>\n\n<pre><code>var test = function (one, two, three) {}; \ntest.length == 3;\n</code></pre>\n\n<p>But anyway you can pass an arbitrary number of arguments...</p>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p>You can actually pass as many values as you want to any javascript function.  The explicitly named parameters will get the first few values, but ALL parameters will be stored in the arguments array.</p>\n\n<p>To pass the arguments array in \"unpacked\" form, you can use apply, like so (c.f. <a href=\"http://www.hunlock.com/blogs/Functional_Javascript\">Functional Javascript</a>):</p>\n\n<pre><code>var otherFunc = function() {\n   alert(arguments.length); // Outputs: 10\n}\n\nvar myFunc = function() {\n  alert(arguments.length); // Outputs: 10\n  otherFunc.apply(this, arguments);\n}\nmyFunc(1,2,3,4,5,6,7,8,9,10);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>The <code>apply</code> function takes two arguments; the object <code>this</code> will be binded to, and the arguments, represented with an array.</p>\n\n<pre><code>some_func = function (a, b) { return b }\nsome_func.apply(obj, [\"arguments\", \"are\", \"here\"])\n// \"are\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It's called <code>splat</code> operator. You can do it JavaScript using <code>apply</code>:</p>\n\n<pre><code>var arr = ['a','b','c','d'];\nvar func = function() {\n    // debug \n    console.log(arguments.length);\n}\nfunc('a','b','c','d'); // prints 4 which is what I want, then 'a','b','c','d'\nfunc(arr); // prints 1, then 'Array'\nfunc.apply(null, arr);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For those who were redirected here from <a href=\"http://stackoverflow.com/questions/7301062/passing-variable-number-of-arguments-from-one-function-to-another\">Passing variable number of arguments from one function to another</a> (which should <strong>not</strong> be marked as a duplicate of this question):</p>\n\n<p>If you're trying to pass a variable number of arguments from one function to another, since JavaScript 1.8.5 you can simply call <code>apply()</code> on the second function and pass in the <code>arguments</code> parameter:</p>\n\n<pre><code>var caller = function()\n{\n    callee.apply( null, arguments );\n}\n\nvar callee = function()\n{\n    alert( arguments.length );\n}\n\ncaller( \"Hello\", \"World!\", 88 ); // Shows \"3\".\n</code></pre>\n\n<p><strong>Note:</strong> The first argument is the <code>this</code> parameter to use. Passing <code>null</code> will call the function from the global context, i.e. as a global function instead of the method of some object.</p>\n\n<p>According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">this document</a>, the ECMAScript 5 specification redefined the <code>apply()</code> method to take any \"generic array-like object\", instead of strictly an Array. Thus, you can directly pass the <code>arguments</code> list into the second function.</p>\n\n<p>Tested in Chrome 28.0, Safari 6.0.5, and IE 10. Try it out with <a href=\"http://jsfiddle.net/V7U2j/1/\" rel=\"nofollow\">this JSFiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/rest_parameters\" rel=\"nofollow\">splat</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Spread_operator\" rel=\"nofollow\">spread</a> operators are part of ES6, the planned next version of Javascript. So far only Firefox supports them. This code works in FF16+:</p>\n\n<pre><code>var arr = ['quick', 'brown', 'lazy'];\n\nvar sprintf = function(str, ...args)\n{\n    for (arg of args) {\n        str = str.replace(/%s/, arg);\n    }\n    return str;\n}\n\nsprintf.apply(null, ['The %s %s fox jumps over the %s dog.', ...arg]);\nsprintf('The %s %s fox jumps over the %s dog.', 'slow', 'red', 'sleeping');\n</code></pre>\n\n<p>Note the awkard syntax for spread. The usual syntax of <code>sprintf('The %s %s fox jumps over the %s dog.', ...arg);</code> is <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=762363\" rel=\"nofollow\">not yet supported</a>. You can find <a href=\"http://kangax.github.io/es5-compat-table/es6/#\" rel=\"nofollow\">an ES6 compatibility table here</a>.</p>\n\n<p>Not also the use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow\"><code>for...of</code></a>, another ES6 addition. Using <code>for...in</code> for arrays is <a href=\"http://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea\">a bad idea</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>(function(window) {\n    var proxied = window.alert;\n    window.alert = function() {\n        return proxied.apply(window, [].slice.call(arguments));\n    };\n}(this));\n\nalert(13, 37);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is a sample program for calculating sum of integers for variable arguments and array on integers. Hope this helps.</p>\n\n<pre><code>var CalculateSum = function(){\n    calculateSumService.apply( null, arguments );\n}\n\nvar calculateSumService = function(){\n    var sum = 0;\n\n    if( arguments.length === 1){\n        var args = arguments[0];\n\n        for(var i = 0;i&lt;args.length; i++){\n           sum += args[i]; \n        }\n    }else{\n        for(var i = 0;i&lt;arguments.length; i++){\n           sum += arguments[i]; \n        }        \n    }\n\n     alert(sum);\n\n}\n\n\n//Sample method call\n\n// CalculateSum(10,20,30);         \n\n// CalculateSum([10,20,30,40,50]);\n\n// CalculateSum(10,20);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to send a variable number of arguments to a JavaScript function, from an array? </p>\n\n<pre><code>var arr = ['a','b','c']\n\nvar func = function()\n{\n    // debug \n    alert(arguments.length);\n    //\n    for(arg in arguments)\n        alert(arg);\n}\n\nfunc('a','b','c','d'); // prints 4 which is what I want, then 'a','b','c','d'\nfunc(arr); // prints 1, then 'Array'\n</code></pre>\n\n<p>I've recently written a lot of Python and it's a wonderful pattern to be able to accept varargs and send them. e.g.</p>\n\n<pre><code>def func(*args):\n   print len(args)\n   for i in args:\n       print i\n\nfunc('a','b','c','d'); // prints 4 which is what I want, then 'a','b','c','d'\nfunc(*arr) // prints 4 which is what I want, then 'a','b','c','d'\n</code></pre>\n\n<p>Is it possible in JavaScript to send an array to be treated <strong>as</strong> the arguments array? </p>\n",
            "last_activity_date": 1423414098,
            "question_id": 1959040,
            "score": 70,
            "tags": [
                "javascript",
                "varargs"
            ],
            "title": "Is it possible to send a variable number of arguments to a JavaScript function?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Inspired by <a href=\"http://meta.stackexchange.com/q/2706/173320\">this</a> question on meta, I'll answer my question.</p>\n\n<p>In the jQuery <a href=\"http://stackoverflow.com/tags/jquery/info\">tag info</a> this warning appears: </p>\n\n<blockquote>\n  <p>The jQuery function $() is expensive. Calling it repeatedly is extremely inefficient.</p>\n</blockquote>\n\n<p>Well... that is true only for strings selectors, which get parsed with regex to find out what are they:</p>\n\n<pre><code>quickExpr = /^(?:[^#&lt;]*(&lt;[\\w\\W]+&gt;)[^&gt;]*$|#([\\w\\-]*)$)/\n</code></pre>\n\n<p>Then if the string is a selector(other than <code>id</code>) jQuery traverse the DOM to find a match with it's expensive <code>find</code> function:</p>\n\n<pre><code>} else if ( !context || context.jquery ) {\n    return ( context || rootjQuery ).find( selector );\n}\n</code></pre>\n\n<p><strong>So yes it's expensive, but that is only true for selectors!</strong><br>\n If we pass a <code>DOMElement</code> the only action jQuery does is saving the DOMElement parameter as the context of the new just created jQuery object and setting the length of the context to 1:</p>\n\n<pre><code>// Handle $(DOMElement)\nif ( selector.nodeType ) {\n    this.context = this[0] = selector; // Selector here is a DOMElement\n    this.length = 1;\n    return this;\n}\n</code></pre>\n\n<p>I did <a href=\"http://jsperf.com/this-cost\" rel=\"nofollow\">some tests with jsPerf</a>, and I found that indeed caching the jQuery object has only a little effect:</p>\n\n<p><img src=\"http://i.stack.imgur.com/jbqar.jpg\" alt=\"enter image description here\"></p>\n\n<p>In Chrome it's only 7% slower. (In IE it's a little bit more significant- 12%)</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>To answer your second question, look at the <a href=\"https://github.com/jquery/jquery/blob/master/src/core.js#L86\">source</a>:</p>\n\n<pre><code>// Handle $(DOMElement)\nif ( selector.nodeType ) {\n    this.context = this[0] = selector;\n    this.length = 1;\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>With regard to the performance difference, if you're looking for a direct comparison between the two, it's helpful to remove any extra code that could skew the result, like DOM selection and other methods that aren't directly related.</p>\n\n<p><a href=\"http://jsperf.com/this-cost/2\">http://jsperf.com/this-cost/2</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/0Hnwi.png\" alt=\"enter image description here\"></p>\n\n<p>In a more real world setting, the relative difference is minor as your test showed</p>\n\n<p>Another thing to keep in mind is that every time you create a jQuery object, memory needs to be allocated for it, which adds to the work that the garbage collector needs to do.</p>\n\n<p>So I think the reason people suggest caching is from somewhat of a principled standpoint. Extra work is being done that, while it usually won't have a noticeable impact, does ultimately require some overhead that can easily be avoided.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>One thing that all of the runtime performance tests here miss is another major consideration:</p>\n\n<p><strong>Network bandwidth.</strong></p>\n\n<p>Caching <code>$(this)</code> into a local variable will generally decrease the size of your script, especially when minified (because <code>this</code> cannot be reduced from four characters).</p>\n\n<p>Consider:</p>\n\n<pre><code>function hello(text) {\n    $(this).attr();\n    $(this).css();\n    $(this).data();\n    $(this).click();\n    $(this).mouseover();\n    $(this).mouseleave();\n    $(this).html(text);\n}\nhello('Hello world');\n</code></pre>\n\n<p>Closure compiler's minified output is</p>\n\n<pre><code>function hello(a){$(this).attr();$(this).css();$(this).data();$(this).click();$(this).mouseover();$(this).mouseleave();$(this).html(a)}hello(\"Hello world\");\n</code></pre>\n\n<p>This saves 39 bytes (20%).  Now consider:</p>\n\n<pre><code>function hello(name) {\n    var $this = $(this);\n    $this.attr();\n    $this.css();\n    $this.data();\n    $this.click();\n    $this.mouseover();\n    $this.mouseleave();\n    $this.html(name);\n}\nhello('Hello world');\n</code></pre>\n\n<p>The minified output is</p>\n\n<pre><code>function hello(b){var a=$(this);a.attr();a.css();a.data();a.click();a.mouseover();a.mouseleave();a.html(b)}hello(\"Hello world\");\n</code></pre>\n\n<p>This saves 74 bytes (37%), nearly doubling our byte savings.  Obviously, real world savings in large scripts will be lower, but you still stand to gain significant reductions in the size of your script by caching.</p>\n\n<p>Really, there's only an upside to caching <code>$(this)</code>.  You get miniscule but measurable runtime performance gains.  More importantly, you can reduce the number of bytes that travel over the wire, and <strong>that directly translates to more dollars</strong> because <a href=\"http://blog.kissmetrics.com/loading-time/\" rel=\"nofollow\">faster page loads equal more sales</a>.</p>\n\n<p>When you look at it that way, you could actually say there's a quantifiable <em>dollar cost</em> to repeating <code>$(this)</code> and not caching it.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>People here often suggest to cache the <code>jQuery</code> object created from a <code>DOM</code> element, like with this code:</p>\n\n<pre><code>$('#container input').each(function() {\n    $(this).addClass('fooClass');\n    $(this).attr('data-bar', \"bar\");\n    $(this).css('background-color', 'red');\n});\n</code></pre>\n\n<ul>\n<li>Does caching the jQuery object really improve the performance of our code?  </li>\n<li><strong>What happens \"behind the scenes\" when you pass a DOM element to the jQuery constructor?</strong></li>\n</ul>\n",
            "last_activity_date": 1343487839,
            "question_id": 10433014,
            "score": 51,
            "tags": [
                "javascript",
                "jquery",
                "performance"
            ],
            "title": "What is the cost of &#39;$(this)&#39;?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I haven't tested this in other browsers, but it seems to work in Webkit. I'll let you try IE. :o)</p>\n\n<p><strong>Try it out:</strong> <a href=\"http://jsfiddle.net/ScKbk/\">http://jsfiddle.net/ScKbk/</a></p>\n\n<p>After you click to start the interval, change the focus of the browser window to see the result change. Again, tested only in Webkit.</p>\n\n<pre><code>var window_focus;\n\n$(window).focus(function() {\n    window_focus = true;\n}).blur(function() {\n    window_focus = false;\n});\n\n$(document).one('click', function() {\n    setInterval(function() {\n        $('body').append('has focus? ' + window_focus + '&lt;br&gt;');\n    }, 1000);\n});\u200b\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<p>use the hasFocus method of the document.\nYou can find detailed description and an example here:\n<a href=\"http://help.dottoro.com/ljmnivgu.php\">hasFocus method</a></p>\n\n<p><strong>EDIT:</strong> Added fiddle\n<a href=\"http://jsfiddle.net/Msjyv/3/\">http://jsfiddle.net/Msjyv/3/</a></p>\n\n<p><em>HTML</em></p>\n\n<pre><code>Currently &lt;b id=\"status\"&gt;without&lt;/b&gt; focus...\n</code></pre>\n\n<p><em>JS</em></p>\n\n<pre><code>function check()\n{\n    if(document.hasFocus() == lastFocusStatus) return;\n\n    lastFocusStatus = !lastFocusStatus;\n    statusEl.innerText = lastFocusStatus ? 'with' : 'without';\n}\n\nwindow.statusEl = document.getElementById('status');\nwindow.lastFocusStatus = document.hasFocus();\n\ncheck();\nsetInterval(check, 200);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 94
                },
                {
                    "body": "<p>HTML:</p>\n\n<pre><code>&lt;button id=\"clear\"&gt;clear log&lt;/button&gt;\n&lt;div id=\"event\"&gt;&lt;/div&gt;\u200b\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>$(function(){\n\n    $hasFocus = false;\n\n    $('#clear').bind('click', function() { $('#event').empty(); });\n\n    $(window)\n        .bind('focus', function(ev){\n            $hasFocus = true;\n            $('#event').append('&lt;div&gt;'+(new Date()).getTime()+' focus&lt;/div&gt;');\n        })\n        .bind('blur', function(ev){\n            $hasFocus = false;\n            $('#event').append('&lt;div&gt;'+(new Date()).getTime()+' blur&lt;/div&gt;');\n        })\n        .trigger('focus');\n\n    setInterval(function() {\n        $('#event').append('&lt;div&gt;'+(new Date()).getTime()+' has focus '+($hasFocus ? 'yes' : 'no')+'&lt;/div&gt;');\n    }, 1000);\n});\u200b\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/QkzvP/\" rel=\"nofollow\">test</a></p>\n\n<p>UPDATE:</p>\n\n<p>I'll fix it, but IE does not work very well</p>\n\n<p><a href=\"http://jsfiddle.net/QkzvP/1/\" rel=\"nofollow\">test update</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you test if the browser has focus?</p>\n",
            "last_activity_date": 1410952580,
            "question_id": 3479734,
            "score": 48,
            "tags": [
                "javascript",
                "jquery",
                "events"
            ],
            "title": "JavaScript / jQuery: Test if window has focus"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>There are 2 problems here. One is the nested content problem, or search matches that span an element boundary. The other is HTML-escaped characters.</p>\n\n<p>One way to handle the HTML-escaped characters is, if you are using jQuery for example, to use the <code>.text()</code> method, and run the search on that. The text that comes back from that already has the escaped characters \"translated\" into their real character.</p>\n\n<p>Another way to handle those special characters would be to replace the actual character (in the search string) with the escaped version. Since there are a wide variety of possibilities there, however, that could be a lengthy search depending on the implementation.</p>\n\n<p>The same sort of \"text\" method can be used to find content matches that span entity boundaries. It gets trickier because the \"Text\" doesn't have any notion of where the actual parts of the content come from, but it gives you a smaller domain to search over if you drill in. Once you are close, you can switch to a more \"series of characters\" sort of search rather than a word-based search.</p>\n\n<p>I don't know of any libraries that do this however.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <a href=\"https://developer.mozilla.org/en/DOM/window.find\" rel=\"nofollow\"><code>window.find()</code></a> in non-IE browsers and <code>TextRange</code>'s <a href=\"http://msdn.microsoft.com/en-us/library/ms536422%28v=vs.85%29.aspx\" rel=\"nofollow\"><code>findText()</code></a> method in IE. Here's an example:</p>\n\n<p><a href=\"http://jsfiddle.net/xeSQb/6/\" rel=\"nofollow\">http://jsfiddle.net/xeSQb/6/</a></p>\n\n<p>Unfortunately Opera prior to the switch to the Blink rendering engine in version 15 doesn't support either <code>window.find</code> or <code>TextRange</code>. If this is a concern for you, a rather heavyweight alternative is to use a combination of the <a href=\"https://code.google.com/p/rangy/wiki/TextRangeModule\" rel=\"nofollow\">TextRange</a> and <a href=\"https://code.google.com/p/rangy/wiki/CSSClassApplierModule\" rel=\"nofollow\">CSS class applier</a> modules of my <a href=\"http://code.google.com/p/rangy\" rel=\"nofollow\">Rangy</a> library, as in the following demo: <a href=\"http://rangy.googlecode.com/svn/trunk/demos/textrange.html\" rel=\"nofollow\">http://rangy.googlecode.com/svn/trunk/demos/textrange.html</a></p>\n\n<p>Code:</p>\n\n<pre><code>function doSearch(text) {\n    if (window.find &amp;&amp; window.getSelection) {\n        document.designMode = \"on\";\n        var sel = window.getSelection();\n        sel.collapse(document.body, 0);\n\n        while (window.find(text)) {\n            document.execCommand(\"HiliteColor\", false, \"yellow\");\n            sel.collapseToEnd();\n        }\n        document.designMode = \"off\";\n    } else if (document.body.createTextRange) {\n        var textRange = document.body.createTextRange();\n        while (textRange.findText(text)) {\n            textRange.execCommand(\"BackColor\", false, \"yellow\");\n            textRange.collapse(false);\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>Just press F3 and use the <p> and </p> command to tell others on your site. For example:You have the knowledge of the F3 search button so to put text on the screen to tell others you would type..&lt;\"p\">&lt;\"h4\">If your having trouble finding something press F3 to highlight the text&lt;\"/p\">&lt;\"h3\">\nonly without the quotes</p>\n\n<p>Posted by, Hacker17</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I've recently seen a lot of libraries for searching and highlighting terms within an HTML page. However, every library I saw has the same problem, they can't find text partly encased in an html tag and/or they'd fail at finding special characters which are &amp;-expressed.</p>\n\n<hr/>\n\n<p>Example a:</p>\n\n<pre><code>&lt;span&gt; This is a test. This is a &lt;b&gt;test&lt;/b&gt; too&lt;/span&gt;\n</code></pre>\n\n<p>Searching for \"a test\" would find the first instance but not the second.</p>\n\n<hr/>\n\n<p>Example b:</p>\n\n<pre><code>&lt;span&gt; Pencils in spanish are called l&amp;aacute;pices&lt;/span&gt;\n</code></pre>\n\n<p>Searching for \"l\u00e1pices\" or \"lapices\" would fail to produce a result.</p>\n\n<hr/>\n\n<p>Is there a JS library that does this or at least a way to circumvent these obstacles?</p>\n\n<p>Thanks in Advance!</p>\n\n<p>Bruno</p>\n",
            "last_activity_date": 1424139760,
            "question_id": 5886858,
            "score": 9,
            "tags": [
                "javascript",
                "html",
                "tags",
                "full-text-search",
                "highlighting"
            ],
            "title": "Full text search in HTML ignoring tags / &amp;"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I discovered today that we can now debug Javascript With the developer tool bar plugins integreted in IE 8.</p>\n\n<ul>\n<li>Open developer tools bar</li>\n<li>Click script</li>\n<li>Click start debugging</li>\n</ul>\n\n<p>You can use watch, breakpoint, see call stack etc ... </p>\n\n<p>You can also use <code>debugger;</code> in your javascript the set a break point.</p>\n\n<p>I hope this post will help developers who try to debug JavaScript with IE8.</p>\n",
                    "is_accepted": true,
                    "score": 71
                },
                {
                    "body": "<p>You can get more information about IE8 Developer Toolbar debugging at <a href=\"http://msdn.microsoft.com/en-us/library/dd565628.aspx#dbugjscript\">Debugging JScript</a> or <a href=\"http://msdn.microsoft.com/en-us/library/dd565625.aspx\">Debugging Script with the Developer Tools</a>.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This won't help you step through code or break on errors, but it's a useful way to get the same debug console for your project on all browsers. </p>\n\n<pre><code>myLog = function() {\n    if (!myLog._div) { myLog.createDiv(); }\n\n    var logEntry = document.createElement('span');\n    for (var i=0; i &lt; arguments.length; i++) {\n    \tlogEntry.innerHTML += myLog.toJson(arguments[i]) + '&lt;br /&gt;';\n    }\n    logEntry.innerHTML += '&lt;br /&gt;';\n\n    myLog._div.appendChild(logEntry);\n}\nmyLog.createDiv = function() {\n    myLog._div = document.body.appendChild(document.createElement('div'));\n    var props = {\n    \tposition:'absolute', top:'10px', right:'10px', background:'#333', border:'5px solid #333', \n    \tcolor: 'white', width: '400px', height: '300px', overflow: 'auto', fontFamily: 'courier new',\n    \tfontSize: '11px', whiteSpace: 'nowrap'\n    }\n    for (var key in props) { myLog._div.style[key] = props[key]; }\n}\nmyLog.toJSON = function(obj) {\n    if (typeof window.uneval == 'function') { return uneval(obj); }\n    if (typeof obj == 'object') {\n    \tif (!obj) { return 'null'; }\n    \tvar list = [];\n    \tif (obj instanceof Array) {\n    \t\tfor (var i=0;i &lt; obj.length;i++) { list.push(this.toJson(obj[i])); }\n    \t\treturn '[' + list.join(',') + ']';\n    \t} else {\n    \t\tfor (var prop in obj) { list.push('\"' + prop + '\":' + this.toJson(obj[prop])); }\n    \t\treturn '{' + list.join(',') + '}';\n    \t}\n    } else if (typeof obj == 'string') {\n    \treturn '\"' + obj.replace(/([\"'])/g, '\\\\$1') + '\"';\n    } else {\n    \treturn new String(obj);\n    }\n}\n\nmyLog('log statement');\nmyLog('logging an object', { name: 'Marcus', likes: 'js' });\n</code></pre>\n\n<p>This is put together pretty hastily and is a bit sloppy, but it's useful nonetheless and can be improved easily!</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I was hoping to add this as a comment to Marcus Westin's reply, but I can't find a link - maybe I need more reputation?</p>\n\n<hr>\n\n<p>Anyway, thanks, I found this code snippet useful for quick debugging in IE. I have made some quick tweaks to fix a problem that stopped it working for me, also to scroll down automatically and use fixed positioning so it will appear in the viewport. Here's my version in case anyone finds it useful:</p>\n\n<pre><code>myLog = function() {\n\n    var _div = null;\n\n    this.toJson = function(obj) {\n\n        if (typeof window.uneval == 'function') { return uneval(obj); }\n        if (typeof obj == 'object') {\n            if (!obj) { return 'null'; }\n            var list = [];\n            if (obj instanceof Array) {\n                    for (var i=0;i &lt; obj.length;i++) { list.push(this.toJson(obj[i])); }\n                    return '[' + list.join(',') + ']';\n            } else {\n                    for (var prop in obj) { list.push('\"' + prop + '\":' + this.toJson(obj[prop])); }\n                    return '{' + list.join(',') + '}';\n            }\n        } else if (typeof obj == 'string') {\n            return '\"' + obj.replace(/([\"'])/g, '\\\\$1') + '\"';\n        } else {\n            return new String(obj);\n        }\n\n    };\n\n    this.createDiv = function() {\n\n        myLog._div = document.body.appendChild(document.createElement('div'));\n\n        var props = {\n            position:'fixed', top:'10px', right:'10px', background:'#333', border:'5px solid #333', \n            color: 'white', width: '400px', height: '300px', overflow: 'auto', fontFamily: 'courier new',\n            fontSize: '11px', whiteSpace: 'nowrap'\n        }\n\n        for (var key in props) { myLog._div.style[key] = props[key]; }\n\n    };\n\n\n    if (!myLog._div) { this.createDiv(); }\n\n    var logEntry = document.createElement('span');\n\n    for (var i=0; i &lt; arguments.length; i++) {\n        logEntry.innerHTML += this.toJson(arguments[i]) + '&lt;br /&gt;';\n    }\n\n    logEntry.innerHTML += '&lt;br /&gt;';\n\n    myLog._div.appendChild(logEntry);\n\n    // Scroll automatically to the bottom\n    myLog._div.scrollTop = myLog._div.scrollHeight;\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Maybe this will help fellow developers. Other than IE9's built in debugger, <a href=\"http://www.javascript-debugger.com\" rel=\"nofollow\">Splinetech javascript debugger</a> is worth looking into. It's not well known, but it's the only debugger I use for IE javascript debugging. </p>\n\n<p>Note: I am not the developer of it. And it is not free. I believe it's $90. I can only tell for myself that it's been worth every penny for me. </p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>How can we debug JavaScript with IE 8 ?</p>\n\n<p>The JavaScript debbuging with Visual Studio doesn't work after an update to IE 8.</p>\n",
            "last_activity_date": 1347216931,
            "question_id": 1306232,
            "score": 60,
            "tags": [
                "javascript",
                "internet-explorer-8",
                "ie-developer-tools"
            ],
            "title": "How to debug Javascript with IE 8"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Not really, unless you're targeting 20-year-old browsers.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>It is better to just avoid JavaScript in the body all together. It makes things easier to update, avoids the needs for comments and forces you to plan for non-JavaScript enabled users as well as users with JavaScript enabled.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>HTML comments, ie. <code>&lt;!-- --&gt;</code>, are no longer needed. They were intended to allow browsers that didn't understand the <code>&lt;script&gt;</code> tag to degrade gracefully. These browsers, eg. Netscape 1.x are no longer found in the wild. So there is really no point in putting HTML comments in your script tags anymore.</p>\n\n<p>If you want your HTML to validate as XHTML or XML, you probably want to use a commented out CDATA tag.</p>\n\n<pre><code>\n&lt;script type=&quot;text/javascript&quot;&gt;\n//&lt;![CDATA[\ndocument.write(&quot;Hello World!&quot;);\n//]]&gt;\n&lt;/script&gt;</code></pre>\n\n<p>The reason for this is so your <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>\"</code> and <code>'</code> that are part of your javascript code won't have to be encoded as <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code> and <code>&amp;apos;</code> respectively.</p>\n",
                    "is_accepted": true,
                    "score": 72
                }
            ],
            "body": "<p>Is it still relevant to use HTML comment tag  around JavaScript code?</p>\n\n<p>I mean</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            //&lt;!--\n            document.write(\"Hello World!\");\n            //--&gt;\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1409697074,
            "question_id": 1507939,
            "score": 50,
            "tags": [
                "javascript",
                "browser"
            ],
            "title": "Using HTML comment tag &lt;!-- --&gt; still relevant around JavaScript code?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In a script tag I would use text/javascript.   This appears in the HTML 4.0 specification, anyway.</p>\n\n<p><a href=\"http://www.w3.org/TR/REC-html40/interact/scripts.html\" rel=\"nofollow\">http://www.w3.org/TR/REC-html40/interact/scripts.html</a></p>\n\n<p>[EDIT] Funny how the <a href=\"http://ftp://ftp.rfc-editor.org/in-notes/rfc4329.txt\" rel=\"nofollow\">RFC</a> that standardized on application/javascript is 2 years old, but text/javascript is still more common.  Is this yet another case of custom triumphing over standards?  It also appears in <a href=\"http://www.w3.org/html/wg/html5/#scripting-1\" rel=\"nofollow\">HTML5</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>text/javascript</p>\n\n<p>I believe IE doesn't accept application/x-javascript</p>\n\n<p><a href=\"http://www.w3.org/TR/WD-html40-970708/interact/scripts.html#h-9.2.1.2\" rel=\"nofollow\">Specifying the scripting language </a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is a common mistake.  The MIME type for javascript wasn't standardized for years.  It's now <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\" rel=\"nofollow\">officially</a>: \"<strong>application/javascript</strong>\".</p>\n\n<p>The real kicker here is that most browsers won't use that attribute anyway, at least not in the case of the script tag.  They actually peek inside the packet and determine the type for themselves.</p>\n\n<p>So the bottom line is that the type=\"text/javascript\" doesn't do anything as far as the javascript is concerned, but it's part of the spec for both <strong>HTML 4</strong> and <strong>XHTML 1.0</strong>.</p>\n",
                    "is_accepted": true,
                    "score": 98
                },
                {
                    "body": "<p>Far out this is the first page I've found on the topic with any sense about it.</p>\n\n<p>My collective research suggests:</p>\n\n<ol>\n<li><code>text/javascript</code> as Keparo stated must be used in html4 and xhtml1 if you want it to validate but doesnt do anything.</li>\n<li><code>application/javascript</code> is expected to be the new official mime type if everyone agrees and when everything catches up.</li>\n<li><code>application/x-javascript</code> (x meaning unofficial) is the current server side mime reference for javascript.</li>\n<li>everyone expects that as per usual microsoft will decide to do something completely different to further confuse and stuff up the matter.</li>\n</ol>\n\n<p>Summary: for now, if you want your html/xhtml to work in MSIE and validate with W3C then declare <code>type=\"text/javascript\"</code>. and if you want your web server to that you know mean javascript then use <code>application/x-javascript</code>.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>The official RFC that defines the Javascript MIME Type is <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\" rel=\"nofollow\">RFC4329</a>.</p>\n\n<pre>     \n7.  JavaScript Media Types\n\n7.1.  text/javascript (obsolete)\n\n   Type name:               text\n   Subtype name:            javascript\n   Required parameters:     none\n   Optional parameters:     charset, see section 4.1.\n   Encoding considerations:\n      The same as the considerations in section 3.1 of [RFC3023].\n\n   Security considerations: See section 5.\n   Interoperability considerations:\n      None, except as noted in other sections of this document.\n\n   Published specification: [JS15]\n   Applications which use this media type:\n      Script interpreters as discussed in this document.\n\n   Additional information:\n\n      Magic number(s):             n/a\n      File extension(s):           .js\n      Macintosh File Type Code(s): TEXT\n\n   Person & email address to contact for further information:\n      See Author's Address section.\n\n   Intended usage:          OBSOLETE\n   Restrictions on usage:   n/a\n   Author:                  See Author's Address section.\n   Change controller:       The IESG.\n\n7.2.  application/javascript\n\n   Type name:               application\n   Subtype name:            javascript\n   Required parameters:     none\n   Optional parameters:     charset, see section 4.1.\n   Encoding considerations:\n      The same as the considerations in section 3.2 of [RFC3023].\n\n   Security considerations: See section 5.\n   Interoperability considerations:\n      None, except as noted in other sections of this document.\n\n   Published specification: [JS15]\n   Applications which use this media type:\n      Script interpreters as discussed in this document.\n\n   Additional information:\n\n      Magic number(s):             n/a\n      File extension(s):           .js\n      Macintosh File Type Code(s): TEXT\n\n   Person & email address to contact for further information:\n      See Author's Address section.\n\n   Intended usage:          COMMON\n   Restrictions on usage:   n/a\n   Author:                  See Author's Address section.\n   Change controller:       The IESG.\n</pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>What is the <a href=\"http://en.wikipedia.org/wiki/MIME\">MIME</a> type of javascript? </p>\n\n<p>More specifically, what is the right thing to put in the \"type\" attribute of a script tag? <code>application/x-javascript</code> and <code>text/javascript</code> seem to be the main contenders.</p>\n",
            "last_activity_date": 1417465371,
            "question_id": 189850,
            "score": 79,
            "tags": [
                "javascript",
                "mime-types"
            ],
            "title": "What is the Javascript MIME Type? What belongs in the type attribute of a script tag?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Using jquery?  I've used this before:  <a href=\"http://projects.allmarkedup.com/jquery_url_parser/\" rel=\"nofollow\">http://projects.allmarkedup.com/jquery_url_parser/</a>  and it worked pretty well.  </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's some <strong><a href=\"http://www.zrinity.com/developers/code%5Fsamples/code.cfm/CodeID/59/JavaScript/Get%5FQuery%5FString%5Fvariables%5Fin%5FJavaScript\">sample code</a></strong> for that.</p>\n\n<pre><code>&lt;script&gt;\nvar param1var = getQueryVariable(\"param1\");\n\nfunction getQueryVariable(variable) {\n  var query = window.location.search.substring(1);\n  var vars = query.split(\"&amp;\");\n  for (var i=0;i&lt;vars.length;i++) {\n    var pair = vars[i].split(\"=\");\n    if (pair[0] == variable) {\n      return pair[1];\n    }\n  } \n  alert('Query Variable ' + variable + ' not found');\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>This looked ok:</p>\n\n<pre><code>function gup( name ){\n   name = name.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n   var regexS = \"[\\\\?&amp;]\"+name+\"=([^&amp;#]*)\";\n   var regex = new RegExp( regexS );\n   var results = regex.exec( window.location.href );\n   if( results == null )\n      return \"\";\n   else\n      return results[1];\n}\n</code></pre>\n\n<p>From <a href=\"http://www.netlobo.com/url%5Fquery%5Fstring%5Fjavascript.html\" rel=\"nofollow\">http://www.netlobo.com/url_query_string_javascript.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From my programming archive:</p>\n\n<pre><code>function querystring(key) {\n   var re=new RegExp('(?:\\\\?|&amp;)'+key+'=(.*?)(?=&amp;|$)','gi');\n   var r=[], m;\n   while ((m=re.exec(document.location.search)) != null) r[r.length]=m[1];\n   return r;\n}\n</code></pre>\n\n<p>If the value doesn't exist, an empty array is returned.<br />\nIf the value exists, an array is return that has one item, the value.<br />\nIf several values with the name exists, an array containing each value is returned.</p>\n\n<p>Examples:</p>\n\n<pre><code>var param1var = querystring(\"param1\")[0];\n\ndocument.write(querystring(\"name\"));\n\nif (querystring('id')=='42') alert('We apoligize for the inconvenience.');\n\nif (querystring('button').length&gt;0) alert(querystring('info'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can get the \"search\" part of the location object - and then parse it out.</p>\n\n<pre><code>var matches = /param1=([^&amp;#=]*)/.exec(window.location.search);\nvar param1 = matches[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's how you could do it in Coffee Script (just if anyone is interested).</p>\n\n<pre><code>decodeURIComponent( v.split( \"=\" )[1] ) if decodeURIComponent( v.split( \"=\" )[0] ) == name for v in window.location.search.substring( 1 ).split( \"&amp;\" )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a version that JSLint likes:</p>\n\n<pre><code>/*jslint browser: true */\nvar GET = {};\n(function (input) {\n    'use strict';\n    if (input.length &gt; 1) {\n        var param = input.slice(1).replace(/\\+/g, ' ').split('&amp;'),\n            plength = param.length,\n            tmp,\n            p;\n\n        for (p = 0; p &lt; plength; p += 1) {\n            tmp = param[p].split('=');\n            GET[decodeURIComponent(tmp[0])] = decodeURIComponent(tmp[1]);\n        }\n    }\n}(window.location.search));\n\nwindow.alert(JSON.stringify(GET));\n</code></pre>\n\n<p>Or if you need support for several values for one key like eg. ?key=value1&amp;key=value2 you can use this:</p>\n\n<pre><code>/*jslint browser: true */\nvar GET = {};\n(function (input) {\n    'use strict';\n    if (input.length &gt; 1) {\n        var params = input.slice(1).replace(/\\+/g, ' ').split('&amp;'),\n            plength = params.length,\n            tmp,\n            key,\n            val,\n            obj,\n            p;\n\n        for (p = 0; p &lt; plength; p += 1) {\n            tmp = params[p].split('=');\n            key = decodeURIComponent(tmp[0]);\n            val = decodeURIComponent(tmp[1]);\n            if (GET.hasOwnProperty(key)) {\n                obj = GET[key];\n                if (obj.constructor === Array) {\n                    obj.push(val);\n                } else {\n                    GET[key] = [obj, val];\n                }\n            } else {\n                GET[key] = val;\n            }\n        }\n    }\n}(window.location.search));\n\nwindow.alert(JSON.stringify(GET));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I made this variation of gnarf's solution, so the call and the result is similar to PHP:</p>\n\n<pre><code>function S_GET(id){\n    var a = new RegExp(id+\"=([^&amp;#=]*)\");\n    return decodeURIComponent(a.exec(window.location.search)[1]);\n}\n</code></pre>\n\n<p>But as being called in a function slows the process, its better to use as global:</p>\n\n<p><code>window['</code><i>var_name</i><code>'] = decodeURIComponent( /</code><i>var_in_get</i><code>=([^&amp;#=]*)/.exec(window.location.search)[1] );</code></p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>As I'm still learning JS, I created a better answer in a more JS behaviour:</p>\n\n<pre><code>Url = {\n    get get(){\n        var vars= {};\n        if(window.location.search.length!==0)\n            window.location.search.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value){\n                key=decodeURIComponent(key);\n                if(typeof vars[key]===\"undefined\") {vars[key]= decodeURIComponent(value);}\n                else {vars[key]= [].concat(vars[key], decodeURIComponent(value));}\n            });\n        return vars;\n    }\n};\n</code></pre>\n\n<p>This allows to be called just using <code>Url.get</code>.</p>\n\n<p><em>Example</em>\nThe url <code>?param1=param1Value&amp;param2=param2Value</code>\ncan be called like:</p>\n\n<pre><code>Url.get.param1 //\"param1Value\"\nUrl.get.param2 //\"param2Value\"\n</code></pre>\n\n<p>here is a snipet:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// URL GET params\r\nurl = \"?a=2&amp;a=3&amp;b=2&amp;a=4\";\r\n\r\nUrl = {\r\n    get get(){\r\n        var vars= {};\r\n        if(url.length!==0)\r\n            url.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value){\r\n                key=decodeURIComponent(key);\r\n                if(typeof vars[key]===\"undefined\") {vars[key]= decodeURIComponent(value);}\r\n                else {vars[key]= [].concat(vars[key], decodeURIComponent(value));}\r\n            });\r\n        return vars;\r\n    }\r\n};\r\n\r\ndocument.querySelector('log').innerHTML = JSON.stringify(Url.get);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;log&gt;&lt;/log&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use this function</p>\n\n<pre><code>function getParmFromUrl(url, parm) {\n    var re = new RegExp(\".*[?&amp;]\" + parm + \"=([^&amp;]+)(&amp;|$)\");\n    var match = url.match(re);\n    return(match ? match[1] : \"\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you're already running a php page then </p>\n\n<p>php bit:</p>\n\n<pre><code>    $json   =   json_encode($_REQUEST, JSON_FORCE_OBJECT);\n    print \"&lt;script&gt;var getVars = $json;&lt;/script&gt;\";\n</code></pre>\n\n<p>js bit:</p>\n\n<pre><code>    var param1var = getVars.param1var;\n</code></pre>\n\n<p>But for Html pages Jose Basilio's solution looks good to me.</p>\n\n<p>Good luck!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You don't need to do anything special, actually. You can mix JavaScript and PHP together to get variables from PHP straight into JavaScript.</p>\n\n<pre><code>var param1val = &lt;?php echo $_GET['param1'] ?&gt;;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>If I am on a page such as </p>\n\n<p><a href=\"http://somesite.com/somepage.php?param1=asdf\">http://somesite.com/somepage.php?param1=asdf</a></p>\n\n<p>In the JavaScript of that page, I would like to set a variable to the value of the parameter in the GET part of the URL.</p>\n\n<p>So in JavaScript:</p>\n\n<pre><code>&lt;script&gt;\n   param1var = ...   // ... would be replaced with the code to get asdf from URI\n&lt;/script&gt;\n</code></pre>\n\n<p>What would \"...\" be?</p>\n",
            "last_activity_date": 1422477017,
            "question_id": 827368,
            "score": 17,
            "tags": [
                "javascript",
                "url",
                "get"
            ],
            "title": "Using the GET parameter of a URL in JavaScript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>There are two ways of doing that in <strong>Chrome</strong>, :</p>\n\n<hr>\n\n<p>According to <a href=\"http://code.google.com/chrome/extensions/extension.html\" rel=\"nofollow\">http://code.google.com/chrome/extensions/extension.html</a>:</p>\n\n<pre><code>var port = chrome.extension.connect(string extensionId, object connectInfo)\n</code></pre>\n\n<p>You can simply add your extensionId as string and the second parameter is the object you want to pass to the extension. <strong>Check the link for more info!</strong></p>\n\n<p>In the second approach you cannot necessarily pass any parameters but you can use the information in the first link to do so: <em>(This is to make sure that the extension is installed)</em>\n<a href=\"https://developers.google.com/chrome/web-store/docs/inline_installation\" rel=\"nofollow\">https://developers.google.com/chrome/web-store/docs/inline_installation</a></p>\n\n<p>All you have to do is to add this link to your header:</p>\n\n<pre><code>&lt;link rel=\"chrome-webstore-item\"\n    href=\"https://chrome.google.com/webstore/detail/apdfllckaahabafndbhieahigkjlhalf\"&gt;\n</code></pre>\n\n<p>And use this code:</p>\n\n<pre><code>if (chrome.app.isInstalled) {\n  //if installed\n}\n</code></pre>\n\n<hr>\n\n<p>There is also another approach which is by adding a short snippet in every webpage using the extension which I don't think would be a really good idea!</p>\n\n<p>Also check this link out:\n<a href=\"http://ha.ckers.org/blog/20060823/detecting-firefox-extentions/\" rel=\"nofollow\">http://ha.ckers.org/blog/20060823/detecting-firefox-extentions/</a></p>\n\n<p>For <strong>Firefox</strong> and <strong>Safari</strong> you can use the above method to detect unique resources of your extension but for passing parameters and objects you need to build a customized JS and put it in every webpage as I mentioned above otherwise it doesn't seen to be a native way of doing this!\nGood luck!</p>\n\n<p>Inform me of results.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What you want to do is fairly difficult. This is long and complex answer. I'll answer from a Chrome-centric perspective, although the principles described here (webpage script injections, long-running background scripts, message passing) are applicable to virtually all browser extension frameworks.</p>\n\n<p>From a high level, what you want to do is inject a <a href=\"http://developer.chrome.com/extensions/content_scripts.html\">content script</a> into every web page, which adds an API, accessible to the web page.  When the site calls the API, the API triggers the content script to do something, like sending messages to the background page and/or send a result back to the content script, via asynchronous callback.</p>\n\n<p>The main difficulty here is that content scripts which are \"injected\" into a web page cannot directly alter the JavaScript <a href=\"http://developer.chrome.com/extensions/content_scripts.html#execution-environment\">execution environment</a> of a page.  They share the DOM, so <strong>events</strong> and <strong>changes to DOM structure</strong> are shared between the content script and the web page, but functions and variables are not shared. Examples:</p>\n\n<ul>\n<li><p><strong>DOM manipulation:</strong> If a content script adds a <code>&lt;div&gt;</code> element to a page, that will work as expected.  Both content script and page will see the new <code>&lt;div&gt;</code>.</p></li>\n<li><p><strong>Events:</strong> If a content script sets up an event listener, e.g., for clicks on an element, the listener will successfully fire when the event occurs.  If the page sets up a listener for custom events fired from the content script, they will be successfully received when the content script fires those events.</p></li>\n<li><p><strong>Functions:</strong> If the content script defines a new global function <code>foo()</code> (as you might try when setting up a new API).  The page <strong>cannot</strong> see or execute <code>foo</code>, because <code>foo</code> exists only in the content script's execution environment, not in the page's environment.</p></li>\n</ul>\n\n<p>So, how can you set up a proper API?  The answer comes in many steps:</p>\n\n<ol>\n<li><p>At a low-level, make your API <a href=\"http://developer.chrome.com/extensions/content_scripts.html#host-page-communication\">event-based</a>.  The web page fires custom DOM events with <code>dispatchEvent</code>, and the content scripts listens for them with <code>addEventListener</code>, taking action when they are received.  Here's a simple event-based storage API which a web page can use to have the extension to store data for it:</p>\n\n<p><strong>content_script.js</strong> (in your extension):</p>\n\n<pre><code>// an object used to store things passed in from the API\ninternalStorage = {};\n\n// listen for myStoreEvent fired from the page with key/value pair data\ndocument.addEventListener('myStoreEvent', function(event) {\n    var dataFromPage = event.detail;\n    internalStorage[dataFromPage.key] = dataFromPage.value\n});\n</code></pre>\n\n<p><strong>Non-extension web page, using your event-based API:</strong></p>\n\n<pre><code>function sendDataToExtension(key, value) {\n    var dataObj = {\"key\":key, \"value\":value};\n    var storeEvent = new CustomEvent('myStoreEvent', {\"detail\":dataObj});\n    document.dispatchEvent(storeEvent);\n}\nsendDataToExtension(\"hello\", \"world\");\n</code></pre>\n\n<p>As you can see, the ordinary web page is firing events that the content script can see and react to, because they share the DOM. The events have data attached, added in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\"><code>CustomEvent</code> constructor</a>.  My example here is pitifully simple -- you can obviously do much more in your content script once it has the data from the page (most likely <a href=\"http://developer.chrome.com/extensions/messaging.html\">pass it</a> to the <a href=\"http://developer.chrome.com/extensions/background_pages.html\">background page</a> for further processing).</p></li>\n<li><p>However, this is only half the battle.  In my example above, the ordinary web page had to create <code>sendDataToExtension</code> itself.  Creating and firing custom events is quite verbose (my code takes up 3 lines and is relatively brief). You don't want to force a site to write arcane event-firing code just to use your API.  The solution is a bit of a nasty hack: append a <code>&lt;script&gt;</code> tag to your shared DOM which adds the event-firing code to the main page's execution environment.</p>\n\n<p>Inside <strong>content_script.js:</strong></p>\n\n<pre><code>// inject a script from the extension's files\n// into the execution environment of the main page\nvar s = document.createElement('script');\ns.src = chrome.extension.getURL(\"myapi.js\");\ndocument.documentElement.appendChild(s);\n</code></pre>\n\n<p>Any functions that are defined in <code>myapi.js</code> will become accessible to the main page.  (If you are using <code>\"manifest_version\":2</code>, you'll need to include <code>myapi.js</code> in your manifest's list of <a href=\"http://developer.chrome.com/extensions/manifest.html#web_accessible_resources\"><code>web_accessible_resources</code></a>).</p>\n\n<p><strong>myapi.js:</strong></p>\n\n<pre><code>function sendDataToExtension(key, value) {\n    var dataObj = {\"key\":key, \"value\":value};\n    var storeEvent = new CustomEvent('myStoreEvent', {\"detail\":dataObj});\n    document.dispatchEvent(storeEvent);\n}\n</code></pre>\n\n<p>Now the <strong>plain web page</strong> can simply do:</p>\n\n<pre><code>sendDataToExtension(\"hello\", \"world\");\n</code></pre></li>\n<li><p>There is <em>one further wrinkle</em> to our API process: the <code>myapi.js</code> script will not be available exactly at load time.  Instead, it will be loaded some time after page-load time.  Therefore, the plain web page needs to know when it can safely call your API.  You can solve this by having <code>myapi.js</code> fire an \"API ready\" event, which your page listens for.</p>\n\n<p><strong>myapi.js:</strong></p>\n\n<pre><code>function sendDataToExtension(key, value) {\n    // as above\n}\n\n// since this script is running, myapi.js has loaded, so let the page know\nvar customAPILoaded = new CustomEvent('customAPILoaded');\ndocument.dispatchEvent(customAPILoaded);\n</code></pre>\n\n<p><strong>Plain web page</strong> using API:</p>\n\n<pre><code>document.addEventListener('customAPILoaded', function() {\n    sendDataToExtension(\"hello\", \"world\");\n    // all API interaction goes in here, now that the API is loaded...\n});\n</code></pre></li>\n<li><p>In order to send results <em>back</em> to the page, you need to provide an asynchronous callback function.  There is no way to synchronously return a result from your API, because event firing/listening is inherently asynchronous (i.e., your site-side API function terminates before the content script ever gets the event with the API request).</p>\n\n<p><strong>myapi.js:</strong></p>\n\n<pre><code>function getDataFromExtension(key, callback) {\n    var reqId = Math.random().toString(); // unique ID for this request\n    var dataObj = {\"key\":key, \"reqId\":reqId};\n    var fetchEvent = new CustomEvent('myFetchEvent', {\"detail\":dataObj});\n    document.dispatchEvent(fetchEvent);\n\n    // get ready for a reply from the content script\n    document.addEventListener('fetchResponse', function respListener(event) {\n        var data = event.detail;\n\n        // check if this response is for this request\n        if(data.reqId == reqId) {\n            callback(data.value);\n            document.removeEventListener('fetchResponse', respListener);\n        }\n    }\n}\n</code></pre>\n\n<p><strong>content_script.js</strong> (in your extension):</p>\n\n<pre><code>// listen for myFetchEvent fired from the page with key\n// then fire a fetchResponse event with the reply\ndocument.addEventListener('myStoreEvent', function(event) {\n    var dataFromPage = event.detail;\n    var responseData = {\"value\":internalStorage[dataFromPage.key], \"reqId\":data.reqId};\n    var fetchResponse = new CustomEvent('fetchResponse', {\"detail\":responseData});\n    document.dispatchEvent(fetchResponse);\n});\n</code></pre>\n\n<p><strong>ordinary web page:</strong></p>\n\n<pre><code>document.addEventListener('customAPILoaded', function() {\n    getDataFromExtension(\"hello\", function(val) {\n        alert(\"extension says \" + val);\n    });\n});\n</code></pre>\n\n<p>The <code>reqId</code> is necessary in case you have multiple requests out at once, so that they don't read the wrong responses.</p></li>\n</ol>\n\n<p>And I think that's everything!  So, not for the faint of heart, and possibly not worth it, when you consider that other extensions can also bind listeners to your events to eavesdrop on how a page is using your API.  I only know all this because I made made a proof-of-concept cryptography API for a school project (and subsequently learned the major security pitfalls associated with it).</p>\n\n<p><strong>In sum:</strong> A content script can listen for custom events from an ordinary web page, and the script can also inject a script file with functions that makes it easier for web pages to fire those events. The content script can pass messages to a background page, which then stores, transforms, or transmits data from the message.</p>\n",
                    "is_accepted": true,
                    "score": 33
                }
            ],
            "body": "<p>I am a newbie to the browser extension development and I understand the concept of browser extensions altering the page and injecting codes into it.</p>\n\n<p>Is there a way this direction can be turned around? I write an extension that provides a set of APIs, and web sites that want to use my extension can detect its presence and if it is present, the website can call my API methods like <code>var extension = Extenion(foo, bar)</code>. Is this possible in Chrome, Firefox and Safari?</p>\n\n<p>Example:</p>\n\n<ol>\n<li><p>Google created a new extension called BeautifierExtension. It has a set of APIs as JS objects.</p></li>\n<li><p>User goes to reddit.com. Reddit.com detects BeautifierExtension and invoke the API by calling <code>beautifer = Beautifier();</code></p></li>\n</ol>\n\n<p>See #2 - normally it's the extension that detects the matching sites and alter the pages. What I am interested to know is whether #2 is possible.</p>\n",
            "last_activity_date": 1401722459,
            "question_id": 10526995,
            "score": 9,
            "tags": [
                "javascript",
                "google-chrome",
                "google-chrome-extension",
                "firefox-addon",
                "safari-extension"
            ],
            "title": "Can a site invoke a browser extension?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Unless you're trying to upload the file using ajax, just <strong>submit the form</strong> to <code>/upload/image</code>.</p>\n\n<pre><code>&lt;form enctype=\"multipart/form-data\" action=\"/upload/image\" method=\"post\"&gt;\n    &lt;input id=\"image-file\" type=\"file\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>If you do want to upload the image in the background (e.g. without submitting the whole form) you'll need to use Flash since JavaScript alone can't do this.</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1276916/asynchronous-file-upload-ajax-file-upload-using-jsp-and-javascript\">Asynchronous file upload (AJAX file upload) using jsp and javascript</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2320069/jquery-ajax-file-upload\">jQuery Ajax File Upload</a></li>\n<li><a href=\"http://stackoverflow.com/questions/502375/ajax-using-file-upload\">Ajax using file upload</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>If you are in fact seeking a pure javascript way to upload an image, then the following tutorial from 2009 will tell you exactly how to do that:</p>\n\n<p><a href=\"http://igstan.ro/posts/2009-01-11-ajax-file-upload-with-pure-javascript.html\">http://igstan.ro/posts/2009-01-11-ajax-file-upload-with-pure-javascript.html</a></p>\n\n<p>I ran into this when I wanted to add basic-authentication to a form submission, without enabling cookies.  E.g. when you have username/password fields with your filename, file, etc fields.</p>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>Let's say I have this element on the page:</p>\n\n<pre><code>&lt;input id=\"image-file\" type=\"file\" /&gt;\n</code></pre>\n\n<p>This will create a button that allows the users of the web page to select a file via an OS \"File open...\" dialog in the browser.</p>\n\n<p>Let's say the user clicks said button, selects a file in the dialog, then clicks the \"Ok\" button to close the dialog.</p>\n\n<p>The selected file name is now stored in:</p>\n\n<pre><code>document.getElementById(\"image-file\").value\n</code></pre>\n\n<p>Now, let's say that the server handles multi-part POSTs at the URL \"/upload/image\".</p>\n\n<p>How do I send the file to \"/upload/image\"?</p>\n\n<p>Also, how do I listen for notification that the file is finished uploading?</p>\n",
            "last_activity_date": 1396798289,
            "question_id": 5587973,
            "score": 34,
            "tags": [
                "javascript",
                "file-upload"
            ],
            "title": "JavaScript: Upload file"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>it seems the community thinks this to be trivial and or easy to find a reference implementation, upon brief inspection i couldn't or maybe it's just that i like re-inventing the wheel or solving classroom-like programming problems either way its your lucky day:</p>\n\n<pre><code>function cartProd(paramArray) {\n\n  function addTo(curr, args) {\n\n    var i, copy, \n        rest = args.slice(1),\n        last = !rest.length,\n        result = [];\n\n    for (i = 0; i &lt; args[0].length; i++) {\n\n      copy = curr.slice();\n      copy.push(args[0][i]);\n\n      if (last) {\n        result.push(copy);\n\n      } else {\n        result = result.concat(addTo(copy, rest));\n      }\n    }\n\n    return result;\n  }\n\n\n  return addTo([], Array.prototype.slice.call(arguments));\n}\n\n\n&gt;&gt; console.log(cartProd([1,2], [10,20], [100,200,300]));\n&gt;&gt; [\n     [1, 10, 100], [1, 10, 200], [1, 10, 300], [1, 20, 100], \n     [1, 20, 200], [1, 20, 300], [2, 10, 100], [2, 10, 200], \n     [2, 10, 300], [2, 20, 100], [2, 20, 200], [2, 20, 300]\n   ]\n</code></pre>\n\n<p>full reference implementation that's relatively efficient... :-D </p>\n\n<p>on efficiency: you could gain some by taking the if out of the loop and having 2 separate loops since it is technically constant and you'd be helping with branch prediction and all that mess, but that point is kind of moot in javascript</p>\n\n<p>anywho, enjoy -ck</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Here is a functional solution to the problem (without any <strong>mutable variable</strong>!) using <code>reduce</code> and <code>flatten</code>, provided by <code>underscore.js</code>:</p>\n\n<pre><code>function cartesianProductOf() {\n    return _.reduce(arguments, function(a, b) {\n        return _.flatten(_.map(a, function(x) {\n            return _.map(b, function(y) {\n                return x.concat([y]);\n            });\n        }), true);\n    }, [ [] ]);\n};\n\ncartesianProductOf([1, 2], [3, 4], ['a', 'b']); // [[1,3,\"a\"],[1,3,\"b\"],[1,4,\"a\"],[1,4,\"b\"],[2,3,\"a\"],[2,3,\"b\"],[2,4,\"a\"],[2,4,\"b\"]] \n</code></pre>\n\n<p>Remark: This solution was inspired by <a href=\"http://gotochriswest.com/blog/2011/05/02/cartesian-product-of-multiple-arrays/\">http://gotochriswest.com/blog/2011/05/02/cartesian-product-of-multiple-arrays/</a></p>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>A coffeescript version with lodash:</p>\n\n<pre><code>_ = require(\"lodash\")\ncartesianProduct = -&gt;\n    return _.reduceRight(arguments, (a,b) -&gt;\n        _.flatten(_.map(a,(x) -&gt; _.map b, (y) -&gt; x.concat(y)), true)\n    , [ [] ])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How would you implement the cartesian product of multiple arrays in javascript?</p>\n\n<p>As an example,</p>\n\n<pre><code>cartesian([1,2],[10,20],[100,200,300]) //should be\n// [[1,10,100],[1,10,200],[1,100,300],[2,10,100],[2,10,200]...]\n</code></pre>\n",
            "last_activity_date": 1423180025,
            "question_id": 12303989,
            "score": 19,
            "tags": [
                "javascript",
                "functional-programming",
                "underscore.js"
            ],
            "title": "cartesian product of multiple arrays in javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>For the HTML bellow</p>\n\n<pre><code>&lt;input type=\"file\" id=\"myFile\" /&gt;\n</code></pre>\n\n<p>try the following:</p>\n\n<pre><code>//binds to onchange event of your input field\n$('#myFile').bind('change', function() {\n\n  //this.files[0].size gets the size of your file.\n  alert(this.files[0].size);\n\n});\n</code></pre>\n\n<p>See following thread:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1601455/check-file-input-size-with-jquery\">Check file input size with jQuery</a></p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>You can use PHP filesize function. During upload using ajax, please check the filesize first by making a request an ajax request to php script that checks the filesize and return the value.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you need to do an ajax HEAD request to get the filesize. with jquery it's something like this</p>\n\n<pre><code>  var req = $.ajax({\n    type: \"HEAD\",\n    url: yoururl,\n    success: function () {\n      alert(\"Size is \" + request.getResponseHeader(\"Content-Length\"));\n    }\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can by using HTML5 File API: <a href=\"http://www.html5rocks.com/en/tutorials/file/dndfiles/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/file/dndfiles/</a></p>\n\n<p>However you should always have a fallback for PHP (or any other backend language you use) for older browsers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction AlertFilesize(){\n    if(window.ActiveXObject){\n        var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n        var filepath = document.getElementById('fileInput').value;\n        var thefile = fso.getFile(filepath);\n        var sizeinbytes = thefile.size;\n    }else{\n        var sizeinbytes = document.getElementById('fileInput').files[0].size;\n    }\n\n    var fSExt = new Array('Bytes', 'KB', 'MB', 'GB');\n    fSize = sizeinbytes; i=0;while(fSize&gt;900){fSize/=1024;i++;}\n\n    alert((Math.round(fSize*100)/100)+' '+fSExt[i]);\n}\n&lt;/script&gt;\n\n&lt;input id=\"fileInput\" type=\"file\" onchange=\"AlertFilesize();\" /&gt;\n</code></pre>\n\n<p>Work on IE and FF</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I had same problem and see that this post or many similar questions have not had a suitable result. Hope this can help other people.</p>\n\n<p>After take time finding around I finally found the answer. This is my code to get file attach with jQuery:</p>\n\n<pre><code>var attach_id = \"id_of_attachment_file\";\nvar size = $('#'+attach_id)[0].files[0].size;\nalert(size);\n</code></pre>\n\n<p>This is the example of get the size, if you want do other stuffs, just change the code to satisfy your needs.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Best solution working on all browsers ;)</p>\n\n<pre><code>function GetFileSize(fileid) {\n try {\n var fileSize = 0;\n //for IE\n if ($.browser.msie) {\n //before making an object of ActiveXObject, \n //please make sure ActiveX is enabled in your IE browser\n var objFSO = new ActiveXObject(\"Scripting.FileSystemObject\"); var filePath = $(\"#\" + fileid)[0].value;\n var objFile = objFSO.getFile(filePath);\n var fileSize = objFile.size; //size in kb\n fileSize = fileSize / 1048576; //size in mb \n }\n //for FF, Safari, Opeara and Others\n else {\n fileSize = $(\"#\" + fileid)[0].files[0].size //size in kb\n fileSize = fileSize / 1048576; //size in mb \n }\n alert(\"Uploaded File Size is\" + fileSize + \"MB\");\n }\n catch (e) {\n alert(\"Error is :\" + e);\n }\n}\n</code></pre>\n\n<p>from <a href=\"http://www.dotnet-tricks.com/Tutorial/jquery/HHLN180712-Get-file-size-before-upload-using-jquery.html\" rel=\"nofollow\">http://www.dotnet-tricks.com/Tutorial/jquery/HHLN180712-Get-file-size-before-upload-using-jquery.html</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>ucefkh's solution worked best, but because $.browser was deprecated in jQuery 1.91, had to change to use navigator.userAgent:</p>\n\n<pre><code>function IsFileSizeOk(fileid) {\ntry {\n    var fileSize = 0;\n    //for IE\n    if (navigator.userAgent.match(/msie/i)) {\n        //before making an object of ActiveXObject, \n        //please make sure ActiveX is enabled in your IE browser\n        var objFSO = new ActiveXObject(\"Scripting.FileSystemObject\"); var filePath = $(\"#\" + fileid)[0].value;\n        var objFile = objFSO.getFile(filePath);\n        var fileSize = objFile.size; //size in kb\n        fileSize = fileSize / 1048576; //size in mb \n    }\n        //for FF, Safari, Opeara and Others\n    else {\n        fileSize = $(\"#\" + fileid)[0].files[0].size //size in kb\n        fileSize = fileSize / 1048576; //size in mb \n    }\n    return (fileSize &lt; 2.0);\n}\ncatch (e) {\n    alert(\"Error is :\" + e);\n}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any way to find out the file size before uploading the file using AJAX / PHP in change event of input file?</p>\n",
            "last_activity_date": 1403535508,
            "question_id": 7497404,
            "score": 17,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "file-upload",
                "filesize"
            ],
            "title": "Get file size before uploading"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Yes, definitely use <code>$this</code>.</p>\n\n<p>A new jQuery object must be constructed each time you use <code>$(this)</code>, while <code>$this</code> keeps the same object for reuse.</p>\n\n<hr>\n\n<p>A <a href=\"http://jsperf.com/jquery-this-vs-this\">performance test</a> shows that <code>$(this)</code> is <em>significantly</em> slower than <code>$this</code>. However, as both are performing millions of operations a second, it is unlikely either will have any real impact, but it is better practice to reuse jQuery objects anyway. Where <em>real</em> performance impacts arise is when a selector, rather than a DOM object, is repeatedly passed to the jQuery constructor - e.g. <code>$('p')</code>.</p>\n\n<hr>\n\n<p>As for the use of <code>var</code>, again <strong>always</strong> use <code>var</code> to declare new variables. By doing so, the variable will only be accessible in the <em>function</em> it is declared in, and will not conflict with other functions.</p>\n\n<hr>\n\n<p>Even better, jQuery is designed to be used with chaining, so take advantage of this where possible. Instead of declaring a variable and calling functions on it multiple times:</p>\n\n<pre><code>var $this = $(this);\n$this.addClass('aClass');\n$this.text('Hello');\n</code></pre>\n\n<p>...chain the functions together to make the use of an additional variable unecessary:</p>\n\n<pre><code>$(this).addClass('aClass').text('Hello');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>Yes, if you are making a reference to $(this) multiple times you should store it in a variable. $this is just a convention to let others know that $this represents a jquery object.</p>\n\n<p>This is even more important if your jquery object was created with a complex selector.</p>\n\n<p>Also, in your pseudocode example you can generally make use of chaining on $(this). </p>\n\n<p>Example:</p>\n\n<pre><code>$(this).addClass(\"someclass\").css({\"color\": \"red\"});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Go to a page with jQuery and run this in your console. I know it's awful but you can see that $this wins out every time.</p>\n\n<pre><code>var time = new Date().getTime();\n$('div').each(function() {\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n  $(this).addClass('hello');\n  $(this).removeClass('hello');\n});\nvar now = new Date().getTime();\nconsole.log(now- time);\n\nvar var_time = new Date().getTime();\n$('div').each(function() {\n  var $this = $(this);\n  $this.addClass('hello');\n  $this.removeClass('hello');\n  $this.addClass('hello');\n  $this.removeClass('hello');\n  $this.addClass('hello');\n  $this.removeClass('hello');\n  $this.addClass('hello');\n  $this.removeClass('hello');\n  $this.addClass('hello');\n  $this.removeClass('hello');\n  $this.addClass('hello');\n  $this.removeClass('hello');\n  $this.addClass('hello');\n  $this.removeClass('hello');\n});\nvar var_now = new Date().getTime();\nconsole.log(var_now - var_time);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>@Box9 is totally on point.  I can't tell you how many times I have to refactor jQuery b/c people don't use caching.</p>\n\n<p>I would also add that combined with caching that people need to learn to do this:</p>\n\n<pre><code>var $element = $(\"#elementId\"),\n    elementLength = $element.length,\n    elementText = $element.text(),\n    someString = \"someValue\",\n    someInt = 0,\n    someObj = null;\n</code></pre>\n\n<p>instead of this:</p>\n\n<pre><code>var $element = $(\"#elementId\");\nvar elementLength = $element.length;\nvar elementText = $element.text();\nvar someString = \"someValue\";\nvar someInt = 0;\nvar someObj = null;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Assume I have the following example:</p>\n\n<p><strong>Example One</strong></p>\n\n<pre><code>$('.my_Selector_Selected_More_Than_One_Element').each(function() {\n    $(this).stuff();\n    $(this).moreStuff();\n    $(this).otherStuff();\n    $(this).herStuff();\n    $(this).myStuff();\n    $(this).theirStuff();\n    $(this).children().each(function(){\n        howMuchStuff();\n    });\n    $(this).tooMuchStuff();\n    // Plus just some regular stuff\n    $(this).css('display','none');\n    $(this).css('font-weight','bold');\n    $(this).has('.hisBabiesStuff').css('color','light blue');\n    $(this).has('.herBabiesStuff').css('color','pink');\n}\n</code></pre>\n\n<p>Now, it could be:</p>\n\n<p><strong>Example Two</strong></p>\n\n<pre><code>$('.my_Selector_Selected_More_Than_One_Element').each(function() {\n    $this = $(this);\n    $this.stuff();\n    $this.moreStuff();\n    $this.otherStuff();\n    $this.herStuff();\n    $this.myStuff();\n    $this.theirStuff();\n    $this.children().each(function(){\n        howMuchStuff();\n    });\n    $this.tooMuchStuff();\n    // Plus just some regular stuff\n    $this.css('display','none');\n    $this.css('font-weight','bold');\n    $this.has('.hisBabiesStuff').css('color','light blue');\n    $this.has('.herBabiesStuff').css('color','pink');\n}\n</code></pre>\n\n<p>The point isn't the actual code, but the use of <code>$(this)</code> when it is used more than once/twice/three times or more.</p>\n\n<p>Am I better off performance-wise using <strong>example two</strong> than <strong>example one</strong> (maybe with an explanation why or why not)?</p>\n\n<p><strong>EDIT/NOTE</strong></p>\n\n<p>I suspect that two is better one; what I was a little fearful of was peppering my code with <code>$this</code> and than inadvertently introducing a potentially difficult-to-diagnosis bug when I inevitably  forget to add the <code>$this</code> to an event handler. So should I use <code>var $this = $(this)</code>, or <code>$this = $(this)</code> for this?</p>\n\n<p>Thanks!</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>As Scott points out below, this is considered caching in jQuery.</p>\n\n<p><a href=\"http://jquery-howto.blogspot.com/2008/12/caching-in-jquery.html\">http://jquery-howto.blogspot.com/2008/12/caching-in-jquery.html</a></p>\n\n<p>Jared</p>\n",
            "last_activity_date": 1303273904,
            "question_id": 5724400,
            "score": 17,
            "tags": [
                "javascript",
                "jquery",
                "caching",
                "this"
            ],
            "title": "Does using $this instead of $(this) provide a performance enhancement?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>JavaScript is parsing the group of 3 numbers as an octal number when there's a leading zero digit. When the group of three digits is all zeros, the result is the same whether the base is octal or decimal.</p>\n\n<p>But when you give JavaScript '009' (or '008'), that's an invalid octal number, so you get zero back.</p>\n\n<p>If you had gone through the whole set of numbers from 190,000,001 to 190,000,010 you'd hav seen JavaScript skip '...,008' and '...,009' but emit 'eight' for '...,010'. That's the 'Eureka!' moment.</p>\n\n<p>Change: </p>\n\n<pre><code>for (j = 0; j &lt; finlOutPut.length; j++) {\n    finlOutPut[j] = triConvert(parseInt(finlOutPut[j]));\n}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>for (j = 0; j &lt; finlOutPut.length; j++) {\n    finlOutPut[j] = triConvert(parseInt(finlOutPut[j],10));\n}\n</code></pre>\n\n<p>Code also kept on adding commas after every non-zero group, so I played with it and found the right spot to add the comma.</p>\n\n<p>Old:</p>\n\n<pre><code>for (b = finlOutPut.length - 1; b &gt;= 0; b--) {\n    if (finlOutPut[b] != \"dontAddBigSufix\") {\n        finlOutPut[b] = finlOutPut[b] + bigNumArry[bigScalCntr] + ' , ';\n        bigScalCntr++;\n    }\n    else {\n        //replace the string at finlOP[b] from \"dontAddBigSufix\" to empty String.\n        finlOutPut[b] = ' ';\n        bigScalCntr++; //advance the counter  \n    }\n}\n\n    //convert The output Arry to , more printable string \n    for(n = 0; n&lt;finlOutPut.length; n++){\n        output +=finlOutPut[n];\n    }\n</code></pre>\n\n<p>New:</p>\n\n<pre><code>for (b = finlOutPut.length - 1; b &gt;= 0; b--) {\n    if (finlOutPut[b] != \"dontAddBigSufix\") {\n        finlOutPut[b] = finlOutPut[b] + bigNumArry[bigScalCntr]; // &lt;&lt;&lt;\n        bigScalCntr++;\n    }\n    else {\n        //replace the string at finlOP[b] from \"dontAddBigSufix\" to empty String.\n        finlOutPut[b] = ' ';\n        bigScalCntr++; //advance the counter  \n    }\n}\n\n    //convert The output Arry to , more printable string \n    var nonzero = false; // &lt;&lt;&lt;\n    for(n = 0; n&lt;finlOutPut.length; n++){\n        if (finlOutPut[n] != ' ') { // &lt;&lt;&lt;\n            if (nonzero) output += ' , '; // &lt;&lt;&lt;\n            nonzero = true; // &lt;&lt;&lt;\n        } // &lt;&lt;&lt;\n        output +=finlOutPut[n];\n    }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>Your problem is already solved but I am posting another way of doing it just for reference.</p>\n\n<p>The code was written to be tested on node.js, but the functions should work fine when called within the browser. Also, this only handles the range [0,1000000], but can be easily adapted for bigger ranges.</p>\n\n<pre><code>#! /usr/bin/env node\n\nvar sys=require('sys');\n\n// actual  conversion code starts here\n\nvar ones=['','one','two','three','four','five','six','seven','eight','nine'];\nvar tens=['','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety'];\nvar teens=['ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen'];\n\n\nfunction convert_millions(num){\n    if (num&gt;=1000000){\n        return convert_millions(Math.floor(num/1000000))+\" million \"+convert_thousands(num%1000000);\n    }\n    else {\n        return convert_thousands(num);\n    }\n}\n\nfunction convert_thousands(num){\n    if (num&gt;=1000){\n        return convert_hundreds(Math.floor(num/1000))+\" thousand \"+convert_hundreds(num%1000);\n    }\n    else{\n        return convert_hundreds(num);\n    }\n}\n\nfunction convert_hundreds(num){\n    if (num&gt;99){\n        return ones[Math.floor(num/100)]+\" hundred \"+convert_tens(num%100);\n    }\n    else{\n        return convert_tens(num);\n    }\n}\n\nfunction convert_tens(num){\n    if (num&lt;10) return ones[num];\n    else if (num&gt;=10 &amp;&amp; num&lt;20) return teens[num-10];\n    else{\n        return tens[Math.floor(num/10)]+\" \"+ones[num%10];\n    }\n}\n\nfunction convert(num){\n    if (num==0) return \"zero\";\n    else return convert_millions(num);\n}\n\n//end of conversion code\n\n//testing code begins here\n\nfunction main(){\n    var cases=[0,1,2,7,10,11,12,13,15,19,20,21,25,29,30,35,50,55,69,70,99,100,101,119,510,900,1000,5001,5019,5555,10000,11000,100000,199001,1000000,1111111,190000009];\n    for (var i=0;i&lt;cases.length;i++ ){\n        sys.puts(cases[i]+\": \"+convert(cases[i]));\n    }\n}\n\nmain();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/&gt;\n&lt;script type=\"text/javascript\"&gt;\nvar th = ['', ' thousand', ' million', ' billion', ' trillion', ' quadrillion', ' quintillion'];\nvar dg = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\nvar tn = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];\nvar tw = ['twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\n\nfunction update(){\n    var numString =   document.getElementById('number').value;\n    if (numString == '0') {\n        document.getElementById('container').innerHTML = 'Zero';\n        return;\n    }\n    if (numString == 0) {\n        document.getElementById('container').innerHTML = 'messeg tell to enter numbers';\n        return;\n    }\n\n    var output = toWords(numString);\n    //print the output\n    document.getElementById('container').innerHTML = output;\n}\n\nfunction toWords(s) {\n    s = s.toString();\n    s = s.replace(/[\\, ]/g, '');\n    if (s != parseFloat(s)) return 'not a number';\n    var x = s.indexOf('.');\n    if (x == -1) x = s.length;\n    if (x &gt; 15) return 'too big';\n    var n = s.split('');\n    var str = '';\n    var sk = 0;\n    for (var i = 0; i &lt; x; i++) {\n        if ((x - i) % 3 == 2) {\n            if (n[i] == '1') {\n                str += tn[Number(n[i + 1])] + ' ';\n                i++;\n                sk = 1;\n            } else if (n[i] != 0) {\n                str += tw[n[i] - 2] + ' ';\n                sk = 1;\n            }\n        } else if (n[i] != 0) {\n            str += dg[n[i]] + ' ';\n            if ((x - i) % 3 == 0) str += 'hundred ';\n            sk = 1;\n        }\n        if ((x - i) % 3 == 1) {\n            if (sk) str += th[(x - i - 1) / 3] + ' ';\n            sk = 0;\n        }\n    }\n    if (x != s.length) {\n        var y = s.length;\n        str += 'point ';\n        for (var i = x + 1; i &lt; y; i++) str += dg[n[i]] + ' ';\n    }\n    return str.replace(/\\s+/g, ' ');\n}\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=\"text\"\n    id=\"number\"\n    size=\"70\"\n    onkeyup=\"update();\"\n    /*this code prevent non numeric letters*/ \n    onkeydown=\"return (event.ctrlKey || event.altKey \n                    || (47&lt;event.keyCode &amp;&amp; event.keyCode&lt;58 &amp;&amp; event.shiftKey==false) \n                    || (95&lt;event.keyCode &amp;&amp; event.keyCode&lt;106)\n                    || (event.keyCode==8) || (event.keyCode==9) \n                    || (event.keyCode&gt;34 &amp;&amp; event.keyCode&lt;40) \n                    || (event.keyCode==46) )\"/&gt;\n                    &lt;br/&gt;\n&lt;div id=\"container\"&gt;Here The Numbers Printed&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here, I wrote an alternative solution:</p>\n\n<p>1) The object containing the string constants:</p>\n\n<pre><code>var NUMBER2TEXT = {\n    ones: ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'],\n    tens: ['', '', 'twenty', 'thirty', 'fourty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'],\n    sep: ['', ' thousand ', ' million ', ' billion ', ' trillion ', ' quadrillion ', ' quintillion ', ' sextillion ']\n};\n</code></pre>\n\n<p>2) The actual code:</p>\n\n<pre><code>(function( ones, tens, sep ) {\n\n    var input = document.getElementById( 'input' ),\n        output = document.getElementById( 'output' );\n\n    input.onkeyup = function() {\n        var val = this.value,\n            arr = [],\n            str = '',\n            i = 0;\n\n        if ( val.length === 0 ) {\n            output.textContent = 'Please type a number into the text-box.';\n            return;  \n        }\n\n        val = parseInt( val, 10 );\n        if ( isNaN( val ) ) {\n            output.textContent = 'Invalid input.';\n            return;   \n        }\n\n        while ( val ) {\n            arr.push( val % 1000 );\n            val = parseInt( val / 1000, 10 );   \n        }\n\n        while ( arr.length ) {\n            str = (function( a ) {\n                var x = Math.floor( a / 100 ),\n                    y = Math.floor( a / 10 ) % 10,\n                    z = a % 10;\n\n                return ( x &gt; 0 ? ones[x] + ' hundred ' : '' ) +\n                       ( y &gt;= 2 ? tens[y] + ' ' + ones[z] : ones[10*y + z] );\n            })( arr.shift() ) + sep[i++] + str;\n        }\n\n        output.textContent = str;\n    };\n\n})( NUMBER2TEXT.ones, NUMBER2TEXT.tens, NUMBER2TEXT.sep );\n</code></pre>\n\n<p><strong>Live demo:</strong> <a href=\"http://jsfiddle.net/j5kdG/\" rel=\"nofollow\">http://jsfiddle.net/j5kdG/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a solution that will handle any integer value that fit's in a string. I've defined number scales up to \"decillion\", so this solution should be accurate up to 999 decillion. After which you get things like \"one thousand decillion\" and so on.</p>\n\n<p>JavaScript numbers start to fail around \"999999999999999\" so the convert function works with strings of numbers only. </p>\n\n<p>Examples:</p>\n\n<pre><code>convert(\"365\");\n//=&gt; \"three hundred sixty-five\"\n\nconvert(\"10000000000000000000000000000230001010109\");\n//=&gt; \"ten thousand decillion two hundred thirty billion one million ten thousand one hundred nine\"\n</code></pre>\n\n<p>Code:</p>\n\n<pre><code>var lt20 = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",\"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\" ],\n    tens = [\"\", \"ten\", \"twenty\", \"thirty\", \"fourty\", \"fifty\", \"sixty\", \"seventy\", \"eightty\", \"ninety\" ],\n    scales = [\"\", \"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\", \"decillion\" ],\n    max = scales.length * 3;\n\nfunction convert(val) {\n    var len;\n\n    // special cases\n    if (val[0] === \"-\") { return \"negative \" + convert(val.slice(1)); }\n    if (val === \"0\") { return \"zero\"; }\n\n    val = trim_zeros(val);\n    len = val.length;\n\n    // general cases\n    if (len &lt; max) { return convert_lt_max(val); }\n    if (len &gt;= max) { return convert_max(val); }\n}\n\nfunction convert_max(val) {\n    return split_rl(val, max)\n        .map(function (val, i, arr) {\n            if (i &lt; arr.length - 1) {\n                return convert_lt_max(val) + \" \" + scales.slice(-1);\n            }\n            return convert_lt_max(val);\n        })\n        .join(\" \");\n}       \n\nfunction convert_lt_max(val) {\n    var l = val.length;\n    if (l &lt; 4) {\n        return convert_lt1000(val).trim();\n    } else {\n        return split_rl(val, 3)\n            .map(convert_lt1000)\n            .reverse()\n            .map(with_scale)\n            .reverse()\n            .join(\" \")\n            .trim();\n    }\n}\n\nfunction convert_lt1000(val) {\n    var rem, l;\n\n    val = trim_zeros(val);\n    l = val.length;\n\n    if (l === 0) { return \"\"; }\n    if (l &lt; 3) { return convert_lt100(val); }\n    if (l === 3) { //less than 1000\n        rem = val.slice(1);\n        if (rem) {\n            return lt20[val[0]] + \" hundred \" + convert_lt1000(rem);\n        } else {\n            return lt20[val[0]] + \" hundred\";\n        }\n    }\n}\n\nfunction convert_lt100(val) {\n    if (is_lt20(val)) { // less than 20\n        return lt20[val];\n    } else if (val[1] === \"0\") {\n        return tens[val[0]];\n    } else {\n        return tens[val[0]] + \"-\" +  lt20[val[1]];\n    }\n}\n\n\nfunction split_rl(str, n) {\n    // takes a string 'str' and an integer 'n'. Splits 'str' into\n    // groups of 'n' chars and returns the result as an array. Works\n    // from right to left.\n    if (str) {\n        return Array.prototype.concat\n            .apply(split_rl(str.slice(0, (-n)), n), [str.slice(-n)]);\n    } else {\n        return [];\n    }\n}\n\nfunction with_scale(str, i) {\n    var scale;\n    if (str &amp;&amp; i &gt; (-1)) {\n        scale = scales[i];\n        if (scale !== undefined) {\n            return str.trim() + \" \" + scale;\n        } else {\n            return convert(str.trim());\n        }\n    } else {\n        return \"\";\n    }\n}\n\nfunction trim_zeros(val) {\n    return val.replace(/^0*/, \"\");\n}\n\nfunction is_lt20(val) {\n    return parseInt(val, 10) &lt; 20;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've modified the posting from \u0160ime Vidas - <a href=\"http://jsfiddle.net/j5kdG/\" rel=\"nofollow\">http://jsfiddle.net/j5kdG/</a>\nTo include dollars, cents, commas and \"and\" in the appropriate places. \nThere's an optional ending if it requires \"zero cents\" or no mention of cents if 0.</p>\n\n<p>This function structure did my head in a bit but I learned heaps. Thanks Sime.</p>\n\n<p>Someone might find a better way of processing this.</p>\n\n<p>Code:</p>\n\n<pre><code>var str='';\nvar str2='';\nvar str3 =[];\n\nfunction convertNum(inp,end){\n    str2='';\n    str3 = [];\n    var NUMBER2TEXT = {\n    ones: ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'],\n    tens: ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'],\n    sep: ['', ' thousand', ' million', ' billion', ' trillion', ' quadrillion', ' quintillion', ' sextillion']\n};\n(function( ones, tens, sep ) {\n   var vals = inp.split(\".\"),val,pos,postsep=' ';\n   for (p in vals){\n      val = vals[p], arr = [], str = '', i = 0;\n      if ( val.length === 0 ) {return 'No value';}\n      val = parseInt( (p==1 &amp;&amp; val.length===1 )?val*10:val, 10 );\n      if ( isNaN( val ) || p&gt;=2) {return 'Invalid value'; }\n      while ( val ) {\n        arr.push( val % 1000 );\n        val = parseInt( val / 1000, 10 );   \n      }\n      pos = arr.length;\n      function trimx (strx) {\n                return strx.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n            }\n        function seps(sepi,i){\n                var s = str3.length\n                if (str3[s-1][0]){\n                    if (str3[s-2][1] === str3[s-1][0]){\n                        str = str.replace(str3[s-2][1],'')\n                    }\n                }\n                var temp = str.split(sep[i-2]);\n                if (temp.length &gt; 1){\n                    if (trimx(temp[0]) ==='' &amp;&amp; temp[1].length &gt; 1 ){\n                        str = temp[1];\n                        } \n                    }\n                return sepi + str ;\n        }\n      while ( arr.length  ) {\n        str = (function( a ) {\n            var x = Math.floor( a / 100 ),\n                y = Math.floor( a / 10 ) % 10,\n                z = a % 10;\n                postsep = (arr.length != 0)?', ' : ' ' ;\n                if ((x+y+z) === 0){\n                    postsep = ' '\n                }else{ \n                    if (arr.length == pos-1 &amp;&amp; x===0 &amp;&amp; pos &gt; 1 ){\n                        postsep = ' and ' \n                    } \n                }\n               str3.push([trimx(str)+\"\",trimx(sep[i])+\"\"]);\n                return  (postsep)+( x &gt; 0 ? ones[x] + ' hundred ' + (( x == 0 &amp;&amp; y &gt;= 0 || z &gt;0 )?' and ':' ') : ' ' ) +                  \n                   ( y &gt;= 2 ? tens[y] + ((z===0)?' ':'-') + ones[z] : ones[10*y + z] ); \n        })( arr.shift() ) +seps( sep[i++] ,i ) ;             \n      }\n      if (p==0){ str2 += str + ' dollars'}\n      if (p==1 &amp;&amp; !end){str2 += (str!='')?' and '+ str + ' cents':'' } \n      if (p==1 &amp;&amp; end ){str2 += ' and ' + ((str==='')?'zero':str) + ' cents '} \n   }\n})( NUMBER2TEXT.ones , NUMBER2TEXT.tens , NUMBER2TEXT.sep );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would like to point out that the original logic fails for values between x11-x19, where x >= 1.  For example, 118 returns \"one hundred eight\".  This is because these numbers are processed by the following code in triConvert():</p>\n\n<pre><code>//100 and more\nif (numString.length == 3) {\n    output = ones[parseInt(numString.charAt(0))] + hundred;\n    output += tens[parseInt(numString.charAt(1))];\n    output += ones[parseInt(numString.charAt(2))];\n    return output;\n}\n</code></pre>\n\n<p>here, the character representing the tens digit is used to index the <code>tens[]</code> array, which has an empty string at index [1], so 118 become 108 in effect.</p>\n\n<p>It might be better to deal with the hundreds (if any first), then run the ones and tens through the same logic.  Instead of:</p>\n\n<pre><code>//the case of 10, 11, 12 ,13, .... 19 \nif (num &lt; 20) {\n    output = ones[num];\n    return output;\n}\n\n//100 and more\nif (numString.length == 3) {\n    output = ones[parseInt(numString.charAt(0))] + hundred;\n    output += tens[parseInt(numString.charAt(1))];\n    output += ones[parseInt(numString.charAt(2))];\n    return output;\n}\n\noutput += tens[parseInt(numString.charAt(0))];\noutput += ones[parseInt(numString.charAt(1))];\n\nreturn output;\n</code></pre>\n\n<p>I would suggest:</p>\n\n<pre><code>// 100 and more\nif ( numString.length == 3 ) \n {\n   output  = hundreds[ parseInt( numString.charAt(0) ) ] + hundred ;\n   num = num % 100 ;\n   numString = num.toString() ;\n }\n\nif ( num &lt; 20 )  \n {\n   output += ones[num] ;\n }\nelse \n { // 20-99 \n   output += tens[ parseInt( numString.charAt(0) ) ] ;\n   output += '-' + ones[ parseInt( numString.charAt(1) ) ] ;  \n }\n\n return output;\n</code></pre>\n\n<p>It seems to me that the suggested code is both shorter and clearer, but I might be biased ;-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this,convert number to words </p>\n\n<pre><code>function convert(number) {\n\n    if (number &lt; 0) {\n\n        console.log(\"Number Must be greater than zero = \" + number);\n        return \"\";\n    }\n    if (number &gt; 100000000000000000000) {\n        console.log(\"Number is out of range = \" + number);\n        return \"\";\n    }\n    if (!is_numeric(number)) {\n        console.log(\"Not a number = \" + number);\n        return \"\";\n    }\n\n    var quintillion = Math.floor(number / 1000000000000000000); /* quintillion */\n    number -= quintillion * 1000000000000000000;\n    var quar = Math.floor(number / 1000000000000000); /* quadrillion */\n    number -= quar * 1000000000000000;\n    var trin = Math.floor(number / 1000000000000); /* trillion */\n    number -= trin * 1000000000000;\n    var Gn = Math.floor(number / 1000000000); /* billion */\n    number -= Gn * 1000000000;\n    var million = Math.floor(number / 1000000); /* million */\n    number -= million * 1000000;\n    var Hn = Math.floor(number / 1000); /* thousand */\n    number -= Hn * 1000;\n    var Dn = Math.floor(number / 100); /* Tens (deca) */\n    number = number % 100; /* Ones */\n    var tn = Math.floor(number / 10);\n    var one = Math.floor(number % 10);\n    var res = \"\";\n\n    if (quintillion &gt; 0) {\n        res += (convert_number(quintillion) + \" quintillion\");\n    }\n    if (quar &gt; 0) {\n        res += (convert_number(quar) + \" quadrillion\");\n    }\n    if (trin &gt; 0) {\n        res += (convert_number(trin) + \" trillion\");\n    }\n    if (Gn &gt; 0) {\n        res += (convert_number(Gn) + \" billion\");\n    }\n    if (million &gt; 0) {\n        res += (((res == \"\") ? \"\" : \" \") + convert_number(million) + \" million\");\n    }\n    if (Hn &gt; 0) {\n        res += (((res == \"\") ? \"\" : \" \") + convert_number(Hn) + \" Thousand\");\n    }\n\n    if (Dn) {\n        res += (((res == \"\") ? \"\" : \" \") + convert_number(Dn) + \" hundred\");\n    }\n\n\n    var ones = Array(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eightteen\", \"Nineteen\");\n    var tens = Array(\"\", \"\", \"Twenty\", \"Thirty\", \"Fourty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eigthy\", \"Ninety\");\n\n    if (tn &gt; 0 || one &gt; 0) {\n        if (!(res == \"\")) {\n            res += \" and \";\n        }\n        if (tn &lt; 2) {\n            res += ones[tn * 10 + one];\n        } else {\n\n            res += tens[tn];\n            if (one &gt; 0) {\n                res += (\"-\" + ones[one]);\n            }\n        }\n    }\n\n    if (res == \"\") {\n        console.log(\"Empty = \" + number);\n        res = \"\";\n    }\n    return res;\n}\nfunction is_numeric(mixed_var) {\n    return (typeof mixed_var === 'number' || typeof mixed_var === 'string') &amp;&amp; mixed_var !== '' &amp;&amp; !isNaN(mixed_var);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>I know this problem had solved 3 years ago. I am posting this <strong>SPECIALLY FOR INDIAN DEVELOPERS</strong></p>\n</blockquote>\n\n<p>After spending some time in googling and playing with others code i made a quick fix and reusable function works well for numbers upto 99,99,99,999. use : <code>number2text(1234.56);</code> will return <code>ONE THOUSAND TWO HUNDRED AND THIRTY-FOUR RUPEE AND FIFTY-SIX PAISE ONLY</code> . enjoy !</p>\n\n<pre><code>function number2text(value) {\n    var fraction = Math.round(frac(value)*100);\n    var f_text  = \"\";\n\n    if(fraction &gt; 0) {\n        f_text = \"AND \"+convert_number(fraction)+\" PAISE\";\n    }\n\n    return convert_number(value)+\" RUPEE \"+f_text+\" ONLY\";\n}\n\nfunction frac(f) {\n    return f % 1;\n}\n\nfunction convert_number(number)\n{\n    if ((number &lt; 0) || (number &gt; 999999999)) \n    { \n        return \"NUMBER OUT OF RANGE!\";\n    }\n    var Gn = Math.floor(number / 10000000);  /* Crore */ \n    number -= Gn * 10000000; \n    var kn = Math.floor(number / 100000);     /* lakhs */ \n    number -= kn * 100000; \n    var Hn = Math.floor(number / 1000);      /* thousand */ \n    number -= Hn * 1000; \n    var Dn = Math.floor(number / 100);       /* Tens (deca) */ \n    number = number % 100;               /* Ones */ \n    var tn= Math.floor(number / 10); \n    var one=Math.floor(number % 10); \n    var res = \"\"; \n\n    if (Gn&gt;0) \n    { \n        res += (convert_number(Gn) + \" CRORE\"); \n    } \n    if (kn&gt;0) \n    { \n            res += (((res==\"\") ? \"\" : \" \") + \n            convert_number(kn) + \" LAKH\"); \n    } \n    if (Hn&gt;0) \n    { \n        res += (((res==\"\") ? \"\" : \" \") +\n            convert_number(Hn) + \" THOUSAND\"); \n    } \n\n    if (Dn) \n    { \n        res += (((res==\"\") ? \"\" : \" \") + \n            convert_number(Dn) + \" HUNDRED\"); \n    } \n\n\n    var ones = Array(\"\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\",\"SEVEN\", \"EIGHT\", \"NINE\", \"TEN\", \"ELEVEN\", \"TWELVE\", \"THIRTEEN\",\"FOURTEEN\", \"FIFTEEN\", \"SIXTEEN\", \"SEVENTEEN\", \"EIGHTEEN\",\"NINETEEN\"); \nvar tens = Array(\"\", \"\", \"TWENTY\", \"THIRTY\", \"FOURTY\", \"FIFTY\", \"SIXTY\",\"SEVENTY\", \"EIGHTY\", \"NINETY\"); \n\n    if (tn&gt;0 || one&gt;0) \n    { \n        if (!(res==\"\")) \n        { \n            res += \" AND \"; \n        } \n        if (tn &lt; 2) \n        { \n            res += ones[tn * 10 + one]; \n        } \n        else \n        { \n\n            res += tens[tn];\n            if (one&gt;0) \n            { \n                res += (\"-\" + ones[one]); \n            } \n        } \n    }\n\n    if (res==\"\")\n    { \n        res = \"zero\"; \n    } \n    return res;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There are JS library for <strong>en_US</strong> and <strong>cs_CZ</strong>.<br>\nYou can use it standalone or as Node module.</p>\n\n<ul>\n<li><a href=\"https://github.com/Kibo/numbers2words\" rel=\"nofollow\">Numbers2Words</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>i'm trying to convert numbers to english words.<br>\nEg : <b>1234</b> become: <b>one thousand two hundred thirty four</b>.</p>\n\n<p>My Tactic goes like this:\n\n<li>Separate the digits to three and put them on Array - <code>finlOutPut</code>\n- start from right to left.</li>\n<li>Convert each group (each cell on the <code>finlOutPut</code> arry) of three digit - to word (this what the <code>triConvert</code> function dose)\n<br>If all the three digits are zero convert them to <code>\"dontAddBigSufix\"</code>\n</li>\n<li>\nFrom Right to left - add <i>thousand, million billion.....</i><br>\nIf the <code>finlOutPut</code> cell equal to <code>\"dontAddBigSufix\"</code>(because it was zeros) don't add the <i>thousand, million billion...</i> and set the cell to \" \"(Nothing) \n</li>\n</p>\n\n<p>it's seem to work pretty well...<br>\nbut my problem is with numbers like 19000000<b>9</b> <br>It's convert to: <i>one hundred ninety million</i>\n<br>\nSomehow it's \"forget\" the last numbers when there is a few zeros.\n<b><br>What i did wrong?\n<br>Where is the bug?\n<br>Why it not work perfect?</b>\n<br>Thanks</p>\n\n<pre>\n&#60;html&#62;\n&#60;head&#62;\n&#60;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/&#62;\n\n&#60;script type=\"text/javascript\"&#62;\nfunction update(){\n    var bigNumArry = new Array('', ' thousand', ' million', ' billion', ' trillion', ' quadrillion', ' quintillion');\n\n    var output = '';\n    var numString =   document.getElementById('number').value;\n    var finlOutPut = new Array();\n\n    if (numString == '0') {\n        document.getElementById('container').innerHTML = 'Zero';\n        return;\n    }\n\n    if (numString == 0) {\n        document.getElementById('container').innerHTML = 'messeg tell to enter numbers';\n        return;\n    }\n\n    var i = numString.length;\n    i = i - 1;\n\n    //cut the number to grups of three digits and add them to the Arry\n    while (numString.length &#62; 3) {\n        var triDig = new Array(3);\n        triDig[2] = numString.charAt(numString.length - 1);\n        triDig[1] = numString.charAt(numString.length - 2);\n        triDig[0] = numString.charAt(numString.length - 3);\n\n        var varToAdd = triDig[0] + triDig[1] + triDig[2];\n        finlOutPut.push(varToAdd);\n        i--;\n        numString = numString.substring(0, numString.length - 3);\n    }\n    finlOutPut.push(numString);\n    finlOutPut.reverse();\n\n    //conver each grup of three digits to english word\n    //if all digits are zero the triConvert\n    //function return the string \"dontAddBigSufix\"\n    for (j = 0; j &#60; finlOutPut.length; j++) {\n        finlOutPut[j] = triConvert(parseInt(finlOutPut[j]));\n    }\n\n    var bigScalCntr = 0; //this int mark the million billion trillion... Arry\n\n    for (b = finlOutPut.length - 1; b &#62;= 0; b--) {\n        if (finlOutPut[b] != \"dontAddBigSufix\") {\n            finlOutPut[b] = finlOutPut[b] + bigNumArry[bigScalCntr] + ' , ';\n            bigScalCntr++;\n        }\n        else {\n            //replace the string at finlOP[b] from \"dontAddBigSufix\" to empty String.\n            finlOutPut[b] = ' ';\n            bigScalCntr++; //advance the counter  \n        }\n    }\n\n        //convert The output Arry to , more printable string \n        for(n = 0; n&#60;finlOutPut.length; n++){\n            output +=finlOutPut[n];\n        }\n\n    document.getElementById('container').innerHTML = output;//print the output\n}\n\n//simple function to convert from numbers to words from 1 to 999\nfunction triConvert(num){\n    var ones = new Array('', ' one', ' two', ' three', ' four', ' five', ' six', ' seven', ' eight', ' nine', ' ten', ' eleven', ' twelve', ' thirteen', ' fourteen', ' fifteen', ' sixteen', ' seventeen', ' eighteen', ' nineteen');\n    var tens = new Array('', '', ' twenty', ' thirty', ' forty', ' fifty', ' sixty', ' seventy', ' eighty', ' ninety');\n    var hundred = ' hundred';\n    var output = '';\n    var numString = num.toString();\n\n    if (num == 0) {\n        return 'dontAddBigSufix';\n    }\n    //the case of 10, 11, 12 ,13, .... 19 \n    if (num &#60; 20) {\n        output = ones[num];\n        return output;\n    }\n\n    //100 and more\n    if (numString.length == 3) {\n        output = ones[parseInt(numString.charAt(0))] + hundred;\n        output += tens[parseInt(numString.charAt(1))];\n        output += ones[parseInt(numString.charAt(2))];\n        return output;\n    }\n\n    output += tens[parseInt(numString.charAt(0))];\n    output += ones[parseInt(numString.charAt(1))];\n\n    return output;\n}   \n&#60;/script&#62;\n\n&#60;/head&#62;\n&#60;body&#62;\n\n&#60;input type=\"text\"\n    id=\"number\"\n    size=\"70\"\n    onkeyup=\"update();\"\n    /*this code prevent non numeric letters*/ \n    onkeydown=\"return (event.ctrlKey || event.altKey \n                    || (47&#60;event.keyCode && event.keyCode&#60;58 && event.shiftKey==false) \n                    || (95&#60;event.keyCode && event.keyCode&#60;106)\n                    || (event.keyCode==8) || (event.keyCode==9) \n                    || (event.keyCode&#62;34 && event.keyCode&#60;40) \n                    || (event.keyCode==46) )\"/&#62;\n                    &#60;br/&#62;\n&#60;div id=\"container\"&#62;Here The Numbers Printed&#60;/div&#62;\n&#60;/body&#62;\n&#60;/html&#62;\n</pre>\n",
            "last_activity_date": 1398063593,
            "question_id": 5529934,
            "score": 11,
            "tags": [
                "javascript",
                "numbers"
            ],
            "title": "JavaScript numbers to Words"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><code>load</code> is called when all assets are done loading, including images. <code>ready</code> is fired when the DOM is ready for interaction.</p>\n\n<p>From the MDC, <em><a href=\"https://developer.mozilla.org/en/DOM/window.onload\">window.onload</a></em>:</p>\n\n<blockquote>\n  <p>The load event fires at the end of the\n  document loading process. At this\n  point, all of the objects in the\n  document are in the DOM, and all the\n  images and sub-frames have finished\n  loading.</p>\n</blockquote>\n\n<p>From the jQuery API documentation, <em><a href=\"http://api.jquery.com/ready/\">.ready( handler )</a></em>:</p>\n\n<blockquote>\n  <p>While JavaScript provides the load\n  event for executing code when a page\n  is rendered, this event does not get\n  triggered until all assets such as\n  images have been completely received.\n  In most cases, the script can be run\n  as soon as the DOM hierarchy has been\n  fully constructed. The handler passed\n  to .ready() is guaranteed to be\n  executed after the DOM is ready, so\n  this is usually the best place to\n  attach all other event handlers and\n  run other jQuery code. When using\n  scripts that rely on the value of CSS\n  style properties, it's important to\n  reference external stylesheets or\n  embed style elements before\n  referencing the scripts.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p><code>$(document).ready()</code> means that the DOM of your page is ready to be manipulated.</p>\n\n<p><code>window.load()</code> is triggered when the whole page (incl. components like CSS and image files) has been completely loaded.</p>\n\n<p>What are you trying to achieve?</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<pre><code>$(document).ready(function(){\n//code here\n});\n</code></pre>\n\n<p>The code above is used almost every time when we work with <code>jQuery</code>. </p>\n\n<p>This code is used when we want to initialize our <code>jQuery</code> codes after the DOM is ready.</p>\n\n<pre><code>$(window).load()\n</code></pre>\n\n<p>Sometimes you want to manipulate pictures. For example you want to vertically and horizontally align a picture and you need to get the width and height of the picture in order to do that. With <code>$(document).ready()</code> you won\u2019t be able to do that if the visitor doesn\u2019t have the image already loaded, in which case you need to initialize the <code>jquery</code> alignment function when the image finishes loading. That\u2019s where we use <code>$(window).load()</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><code>$(document).ready</code> is <code>jQuery</code> event that is fired when DOM is loaded, so it\u2019s fired when the document structure is ready.</p>\n\n<p><code>$(window).load</code> event is fired after whole content (including css, images etc..) is loaded.</p>\n\n<p>This is major difference.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>$(document).ready()</code> is wrap DOM in <code>&lt;body&gt;...&lt;/body&gt;</code></p>\n\n<p><code>$(window).load()</code> is papa of document wrap all DOM in <code>&lt;html&gt;...&lt;/html&gt;</code></p>\n\n<p>Let's use in your case to save render processing.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have been having a problem lately with my JavaScript CODE and taking a portion of my code out of my <code>$(document).ready()</code> and putting it within <code>$(window).load()</code> fixed the problem. </p>\n\n<p>Now I understand that <code>window.load</code> is fired just after <code>document.ready</code>, but why is it not ready after <code>document.ready</code>, that is after <code>window.load()</code>?</p>\n",
            "last_activity_date": 1421379922,
            "question_id": 5182016,
            "score": 32,
            "tags": [
                "javascript",
                "jquery",
                "document-ready"
            ],
            "title": "What is the difference between $(window).load and $(document).ready?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>If you load a script block within your div via Ajax like this:</p>\n\n<pre><code>&lt;div id=\"content\"&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    function myFunction() {\n      //do something\n    }\n    myFunction();\n    &lt;/script&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>... it simply updates the DOM of your page, myFunction() does not necessarily get called. </p>\n\n<p>You can use an Ajax callback method such as the one in jQuery's <a href=\"http://api.jquery.com/jQuery.ajax/\">ajax() </a> method to define what to execute when the request finishes. </p>\n\n<p>What you are doing is different from loading a page with JavaScript included in it from the get-go (which does get executed).</p>\n\n<p>An example of how to used the success callback and error callback after fetching some content:</p>\n\n<pre><code>  $.ajax({\n    type: 'GET',\n    url: 'response.php',\n    timeout: 2000,\n    success: function(data) {\n      $(\"#content\").html(data);\n      myFunction();\n    },\n    error: function (XMLHttpRequest, textStatus, errorThrown) {\n      alert(\"error retrieving content\");\n    }\n</code></pre>\n\n<p>Another quick and dirty way is to use <a href=\"http://www.w3schools.com/jsref/jsref_eval.asp\">eval()</a> to execute any script code that you've inserted as DOM text if you don't want to use jQuery or other library.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>JavaScript inserted as DOM text will not execute. However, you can use the <a href=\"http://ajaxpatterns.org/On-Demand_Javascript#Changing_the_src_property\">dynamic script pattern</a> to accomplish your goal. The basic idea is to move the script that you want to execute into an external file and create a script tag when you get your Ajax response. You then set the <code>src</code> attribute of your script tag and voila, it loads and executes the external script.</p>\n\n<p>This other StackOverflow post may also be helpful to you: <a href=\"http://stackoverflow.com/questions/1197575/can-scripts-be-inserted-with-innerhtml\">Can scripts be inserted with innerHTML?</a>.</p>\n",
                    "is_accepted": true,
                    "score": 20
                },
                {
                    "body": "<p>This 'just works' for me using jQuery, provided you don't try to append a subset the XHR-returned HTML to the document. (See <a href=\"http://bugs.jquery.com/ticket/6516\" rel=\"nofollow\">this bug report</a> showing the problem with jQuery.)</p>\n\n<p>Here is an example showing it working:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt; \n&lt;html lang=\"en\"&gt; \n&lt;head&gt; \n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; \n    &lt;title&gt;test_1.4&lt;/title&gt; \n    &lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"jquery.1.4.2.js\"&gt;&lt;/script&gt; \n    &lt;script type=\"text/javascript\" charset=\"utf-8\"&gt; \n        var snippet = \"&lt;div&gt;&lt;span id='a'&gt;JS did not run&lt;\\/span&gt;&lt;script type='text/javascript'&gt;\" +\n        \"$('#a').html('Hooray! JS ran!');\" +\n        \"&lt;\\/script&gt;&lt;\\/div&gt;\";\n        $(function(){\n            $('#replaceable').replaceWith($(snippet));\n        });\n    &lt;/script&gt; \n&lt;/head&gt; \n&lt;body&gt; \n    &lt;div id=\"replaceable\"&gt;I'm going away.&lt;/div&gt; \n&lt;/body&gt; \n&lt;/html&gt;\n</code></pre>\n\n<p>Here is the equivalent of the above: <a href=\"http://jsfiddle.net/2CTLH/\" rel=\"nofollow\">http://jsfiddle.net/2CTLH/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I used this code, it is working fine</p>\n\n<pre><code>var arr = MyDiv.getElementsByTagName('script')\nfor (var n = 0; n &lt; arr.length; n++)\n    eval(arr[n].innerHTML)//run script inside div\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I had a similiar post here, <a href=\"http://stackoverflow.com/questions/21594646/addeventlistener-load-on-ajax-load-without-jquery\">addEventListener load on ajax load WITHOUT jquery</a></p>\n\n<p>How I solved it was to insert calls to functions within my stateChange function. The page I had setup was 3 buttons that would load 3 different pages into the contentArea. Because I had to know which button was being pressed to load page 1, 2 or 3, I could easily use if/else statements to determine which page is being loaded and then which function to run. What I was trying to do was register different button listeners that would only work when the specific page was loaded because of element IDs..</p>\n\n<p>so...</p>\n\n<p>if (page1 is being loaded, pageload = 1)\n   run function registerListeners1</p>\n\n<p>then the same for page 2 or 3.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is the script that will evaluates all script tags in the text.</p>\n\n<pre><code>function evalJSFromHtml(html) {\n  var newElement = document.createElement('div');\n  newElement.innerHTML = html;\n\n  var scripts = newElement.getElementsByTagName(\"script\");\n  for (var i = 0; i &lt; scripts.length; ++i) {\n    var script = scripts[i];\n    eval(script.innerHTML);\n  }\n}\n</code></pre>\n\n<p>Just call this function after you receive your HTML from server. Be warned: using <code>eval</code> can be dangerous.</p>\n\n<p>Demo:\n<a href=\"http://plnkr.co/edit/LA7OPkRfAtgOhwcAnLrl?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/LA7OPkRfAtgOhwcAnLrl?p=preview</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are injecting something that needs the script tag, you may get an <strong>uncaught syntax error and say illegal token</strong>. To avoid this, be sure to escape the forward slashes in your closing script tag(s). ie;</p>\n\n<pre><code>var output += '&lt;\\/script&gt;';\n</code></pre>\n\n<p>Same goes for any closing tags, such as a form tag.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>There's a div called \"Content\":</p>\n\n<pre><code>&lt;div id=\"content\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>It should be filled with data from a PHP file, by AJAX, including a <code>&lt;script&gt;</code> tag. However, the script inside this tag is not being executed.</p>\n\n<pre><code>&lt;div id=\"content\"&gt;&lt;!-- After AJAX loads the stuff that goes here --&gt;\n   &lt;script type=\"text/javascript\"&gt;\n     //code\n   &lt;/script&gt;\n   &lt;!-- More stuff that DOES work here --&gt;\n&lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1424364844,
            "question_id": 4619668,
            "score": 29,
            "tags": [
                "javascript",
                "html",
                "ajax"
            ],
            "title": "Executing &lt;script&gt; inside &lt;div&gt; retrieved by AJAX"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>include jquery.form.js and use the code </p>\n\n<pre><code>    $('#submit_button').on('submit', function(e)            \n      {\n        e.preventDefault();\n        $(\"#FormID\").ajaxForm({ \n               target: '#DivID',\n               beforeSubmit:function(){ /* code here before form submit */ },\n               success: function(response) { /* code after form submit */}\n       }); // end of ajaxForm method\n   });    // end of 'on' method\n</code></pre>\n\n<p>i think it help you :) </p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>first in your ajax call include success &amp; error function and then check if it gives you error or what?</p>\n\n<p>your code should be like this </p>\n\n<pre><code>$(document).ready(function (e) {\n    $('#imageUploadForm').on('submit',(function(e) {\n        e.preventDefault();\n        var formData = new FormData(this);\n\n        $.ajax({\n            type:'POST',\n            url: $(this).attr('action'),\n            data:formData,\n            cache:false,\n            contentType: false,\n            processData: false,\n            success:function(data){\n                console.log(\"success\");\n                console.log(data);\n            },\n            error: function(data){\n                console.log(\"error\");\n                console.log(data);\n            }\n        });\n    }));\n\n    $(\"#ImageBrowse\").on(\"change\", function() {\n        $(\"#imageUploadForm\").submit();\n    });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>You can use jquery.form.js plugin to upload image via ajax to the server.</p>\n\n<p><a href=\"http://malsup.com/jquery/form/\" rel=\"nofollow\">http://malsup.com/jquery/form/</a></p>\n\n<p>Here is the sample jQuery ajax image upload script</p>\n\n<pre><code>(function() {\n$('form').ajaxForm({\n    beforeSubmit: function() {  \n        //do validation here\n\n\n    },\n\n    beforeSend:function(){\n       $('#loader').show();\n       $('#image_upload').hide();\n    },\n    success: function(msg) {\n\n        ///on success do some here\n    }\n}); })();  \n</code></pre>\n\n<p>If you have any doubt, please refer following ajax image upload tutorial here</p>\n\n<p><a href=\"http://www.smarttutorials.net/ajax-image-upload-using-jquery-php-mysql/\" rel=\"nofollow\">http://www.smarttutorials.net/ajax-image-upload-using-jquery-php-mysql/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Q.1 I would to convert this form to ajax but it seems like my ajax code lacks something. \nOn submit doesn't do anything at all.</p>\n\n<p>Q2. i also want the function to fire on change when the file has been selected not to wait for a submit.</p>\n\n<p>here there JS.</p>\n\n<pre><code>$('#imageUploadForm').on('submit',(function(e) {\n    e.preventDefault()\n    $.ajax({\n        type:'POST',\n        url: $(this).attr('action'),\n        data:$(this).serialize(),\n        cache:false\n    });\n}));\n</code></pre>\n\n<p>and the HTMl with php.</p>\n\n<pre><code>&lt;form name=\"photo\" id=\"imageUploadForm\" enctype=\"multipart/form-data\" action=\"&lt;?php echo $_SERVER[\"PHP_SELF\"];?&gt;\" method=\"post\"&gt;\n    &lt;input type=\"file\" style=\"widows:0; height:0\" id=\"ImageBrowse\" hidden=\"hidden\" name=\"image\" size=\"30\"/&gt;\n    &lt;input type=\"submit\" name=\"upload\" value=\"Upload\" /&gt;\n    &lt;img width=\"100\" style=\"border:#000; z-index:1;position: relative; border-width:2px; float:left\" height=\"100px\" src=\"&lt;?php echo $upload_path.$large_image_name.$_SESSION['user_file_ext'];?&gt;\" id=\"thumbnail\"/&gt;\n&lt;/form&gt;\n</code></pre>\n",
            "last_activity_date": 1413044278,
            "question_id": 19447435,
            "score": 17,
            "tags": [
                "javascript",
                "php",
                "jquery",
                "html",
                "ajax"
            ],
            "title": "Ajax Upload image"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>If you dont want to use ajax than</p>\n\n<pre><code>Code behind \n\nvoid myBtn_Click(Object sender,EventArgs e)\n{\n   //SetName(name); your code\n}\n\n\n.aspx file\n\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n    function btnAccept_onclick() {        \n        var name;            \n        name = document.getElementById('txtName').value;\n        document.getElementById('callserver').click();\n        // Call Server side method SetName() by passing this parameter 'name'\n&lt;/script&gt;\n\n\n&lt;div style=\"dispaly:none;\"&gt;\n  &lt;input type=\"button\" id=\"callserver\" value=\"Accept\" click=\"myBtn_Click\" runat=\"server\" /&gt;\n&lt;/div&gt;\n&lt;input type=\"button\" id=\"btnAccept\" value=\"Accept\" onclick=\"return btnAccept_onclick()\" /&gt;\n</code></pre>\n\n<p>or use page method</p>\n\n<pre><code>.cs file\n[ScriptMethod, WebMethod]\n\n   public static string docall()\n   {\n      return \"Hello\";\n   }\n\n.aspx file\n\n&lt;script type=\"text/javascript\"&gt;\n      function btnAccept_onclic() {\n          PageMethods.docall(onSuccess, onFailure);\n      }\n\n  function onSuccess(result) {\n          alert(result);\n      }\n\n\n      function onFailure(error) {\n          alert(error);\n      } \n\n&lt;/script&gt;\n</code></pre>\n\n<p>check this : <a href=\"http://blogs.microsoft.co.il/blogs/gilf/archive/2008/10/04/asp-net-ajax-pagemethods.aspx\" rel=\"nofollow\">http://blogs.microsoft.co.il/blogs/gilf/archive/2008/10/04/asp-net-ajax-pagemethods.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>yes, you can make web method like..</p>\n\n<pre><code>[WebMethod]\npublic static String SetName(string name)\n{\n    return \"Your String\"\n}\n</code></pre>\n\n<p>and then call in javascript like..</p>\n\n<p><code>PageMethods.SetName(parameterValueIfAny, onSuccessMethod,onFailMethod);</code></p>\n\n<p>this also required </p>\n\n<p><code>&lt;asp:ScriptManager ID=\"ScriptMgr\" runat=\"server\" EnablePageMethods=\"true\"&gt;\n                &lt;/asp:ScriptManager&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Ajax is the way to go. The easiest (and probably the best) approach is <a href=\"http://api.jquery.com/jQuery.ajax/\" rel=\"nofollow\">jQuery ajax()</a></p>\n\n<p>You'll end up writing something like this:</p>\n\n<pre><code>$.ajax({\n  url: \"test.html\",\n  context: document.body,\n  success: function(){\n    // do something when done\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>// include jquery.js\n//javascript function\nvar a1=\"aaa\";\nvar b1=\"bbb\";\n                         **pagename/methodname**     *parameters*\nCallServerFunction(\"Default.aspx/FunPubGetTasks\", \"{a:'\" + a1+ \"',b:'\" + b1+ \"'}\",\n            function(result)\n            {\n\n            }\n);\nfunction CallServerFunction(StrPriUrl,ObjPriData,CallBackFunction)\n {\n\n    $.ajax({\n        type: \"post\",\n        url: StrPriUrl,\n        contentType: \"application/json; charset=utf-8\",\n        data: ObjPriData,\n        dataType: \"json\",\n        success: function(result) \n        {\n            if(CallBackFunction!=null &amp;&amp; typeof CallBackFunction !='undefined')\n            {\n                CallBackFunction(result);\n            }\n\n        },\n        error: function(result) \n        {\n            alert('error occured');\n            alert(result.responseText);\n            window.location.href=\"FrmError.aspx?Exception=\"+result.responseText;\n        },\n        async: true\n    });\n }\n\n//page name is Default.aspx &amp; FunPubGetTasks method\n///your code behind function\n     [System.Web.Services.WebMethod()]\n        public static object FunPubGetTasks(string a, string b)\n        {\n            //return Ienumerable or array   \n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try creating a new service and calling it.  The processing can be done there, and returned back.</p>\n\n<p><a href=\"http://code.msdn.microsoft.com/windowsazure/WCF-Azure-AJAX-Calculator-4cf3099e\" rel=\"nofollow\">http://code.msdn.microsoft.com/windowsazure/WCF-Azure-AJAX-Calculator-4cf3099e</a></p>\n\n<pre><code>function makeCall(operation){\n    var n1 = document.getElementById(\"num1\").value;\n    var n2 = document.getElementById(\"num2\").value;\nif(n1 &amp;&amp; n2){\n\n        // Instantiate a service proxy\n        var proxy = new Service();\n\n        // Call correct operation on vf cproxy       \n        switch(operation){\n\n            case \"gridOne\":\n                proxy.Calculate(AjaxService.Operation.getWeather, n1, n2,\n onSuccess, onFail, null);\n\n****HTML CODE****\n&lt;p&gt;Major City: &lt;input type=\"text\" id=\"num1\" onclick=\"return num1_onclick()\"\n/&gt;&lt;/p&gt;\n&lt;p&gt;Country: &lt;input type=\"text\" id=\"num2\" onclick=\"return num2_onclick()\"\n/&gt;&lt;/p&gt; \n&lt;input id=\"btnDivide\" type=\"button\" onclick=\"return makeCall('gridOne');\" \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had to register my buttonid as a postbacktrigger...</p>\n\n<pre><code>RegisterPostbackTrigger(idOfButton)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In my projects, we usually call server side method like this:</p>\n\n<p>in JavaScript:</p>\n\n<pre><code>document.getElementById(\"UploadButton\").click();\n</code></pre>\n\n<p>Server side control:</p>\n\n<pre><code>&lt;asp:Button runat=\"server\" ID=\"UploadButton\" Text=\"\" style=\"display:none;\" OnClick=\"UploadButton_Click\" /&gt;\n</code></pre>\n\n<p>C#:</p>\n\n<pre><code>protected void Upload_Click(object sender, EventArgs e)\n{\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I am having an javascript function for a HTML button click event in aspx page. And a server Method in its code behind page. Now i want to call the server method from the javascript function with some parameters only when the HTML button is clicked by the user. Please don't change this scenario and also don't use any asp.net contols in the aspx page while replying. Because only HTML controls are allowed. Can anyone help me on this ?. Thanks in advance. Eagerly waiting for answers.</p>\n\n<p>Here is the code,</p>\n\n<p>Code in markup:</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n    function btnAccept_onclick() {        \n        var name;            \n        name = document.getElementById('txtName').value;\n\n        // Call Server side method SetName() by passing this parameter 'name'\n&lt;/script&gt;\n\n&lt;input type=\"button\" id=\"btnAccept\" value=\"Accept\" onclick=\"return btnAccept_onclick()\" /&gt;\n</code></pre>\n\n<p>Code-behind:</p>\n\n<pre><code>public void SetName(string name)\n{\n    // Code for some functionality    \n}\n</code></pre>\n",
            "last_activity_date": 1387877912,
            "question_id": 5828803,
            "score": 15,
            "tags": [
                "c#",
                "javascript",
                ".net",
                "asp.net"
            ],
            "title": "How to call code behind server method from a client side javascript function?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<pre><code> &lt;input type=\"button\" name=myButton value=\"disable\" disabled=\"disabled\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>If you have the button object, called b: <code>b.disabled=false;</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It's still an attribute. Setting it to:</p>\n\n<pre><code>&lt;input type=\"button\" name=myButton value=\"disable\" disabled=\"disabled\"&gt;\n</code></pre>\n\n<p>... is valid.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is an attribute, but a boolean one (so it doesn't need a name, just a value -- I know, it's weird).  You can set the property equivalent in Javascript:</p>\n\n<pre><code>document.getElementsByName(\"myButton\")[0].disabled = true;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<blockquote>\n  <p>Since this setting is not an attribute</p>\n</blockquote>\n\n<p>It is an attribute.</p>\n\n<p>Some attributes are defined as boolean, which means you can specify their value and leave everything else out. i.e. Instead of disabled=\"<b>disabled</b>\", you include only the bold part. In HTML 4, you <em>should</em> include only the bold part as the full version is marked as <a href=\"http://www.w3.org/TR/html4/appendix/notes.html#h-B.3.3\">a feature with limited support</a> (although that is less true now then when the spec was written).</p>\n\n<p>The <a href=\"http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html#ID-50886781\">DOM property</a> is also called <code>disabled</code> and is a boolean that takes <code>true</code> or <code>false</code>.</p>\n\n<pre><code>foo.disabled = true;\n</code></pre>\n\n<p>In theory you can also <code>foo.setAttribute('disabled', 'disabled');</code>, but I wouldn't trust this with Internet Explorer (which is notoriously buggy when it comes to setAttribute).</p>\n",
                    "is_accepted": true,
                    "score": 113
                },
                {
                    "body": "<p>Try the following:</p>\n\n<pre><code>document.getElementById(\"id\").setAttribute(\"disabled\", \"disabled\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Use document.getElementById(id).disabled = \"disabled\";</p>\n\n<p>To enable it, use document.getElementById(id).disabled = \"\";</p>\n\n<p>If you want to support older browsers, you'll need to wrap the getElementById with a call which \"ORs\" it with document.all, but that's only if you really need it.</p>\n\n<p>(This code was validated in IE8 and FF.)</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>to disable</p>\n\n<pre><code>document.getElementById(\"btnPlaceOrder\").disabled = true; \n</code></pre>\n\n<p>to enable</p>\n\n<pre><code>document.getElementById(\"btnPlaceOrder\").disabled = false; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>I think the best way could be</p>\n\n<p>$(\"#ctl00_ContentPlaceHolder1_btnPlaceOrder\").attr('disabled', true);</p>\n\n<p>It works fine cross-browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've read that you can disable (make physically unclickable) a html button simply but appending 'disable' to its tag, but not as an attribute, as follows:</p>\n\n<pre><code>&lt;input type=\"button\" name=myButton value=\"disable\" disabled&gt;\n</code></pre>\n\n<p>Since this setting is not an attribute, how can I add this in dynamically via JavaScript to disable a button that was previously enabled?</p>\n",
            "last_activity_date": 1409887196,
            "question_id": 3014649,
            "score": 64,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "How to disable html button using JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I found some information here <a href=\"http://www.tedpavlic.com/post_detect_refresh_with_javascript.php\" rel=\"nofollow\">Javascript Detecting Page Refresh</a> . I don't know if this is the optimal way of doing this, but it does work. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Are you trying to refresh your page automatically? One simple thing you can do is using JavaScript. </p>\n\n<p>This code should work. </p>\n\n<pre><code>&lt;!DOCTYPE html&gt; \n&lt;html lang='en'&gt; \n&lt;head&gt; \n&lt;meta charset='utf-8' /&gt; \n&lt;title&gt;Refresh Page&lt;/title&gt;\n&lt;script type=\"text/javascript\"&gt;\n\nfunction timedRefresh(timeoutPeriod) {\n    setTimeout(\"location.reload(true);\",timeoutPeriod);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;!--// n-000 in miliseconds, where n is integer \\\\--&gt;     \n&lt;body onload=\"timedRefresh(7000);\"&gt;\n    &lt;h1&gt;Refresh Page&lt;/h1&gt;\n    &lt;p id=\"shortdesc\"&gt;This site refreshes automatically.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>Store a cookie the first time someone visits the page. On refresh check if your cookie exists and if it does, alert.</p>\n\n<pre><code>function checkFirstVisit() {\n  if(document.cookie.indexOf('mycookie')==-1) {\n    // cookie doesn't exist, create it now\n    document.cookie = 'mycookie=1';\n  }\n  else {\n    // not first visit, so alert\n    alert('You refreshed!');\n  }\n}\n</code></pre>\n\n<p>and in your body tag:</p>\n\n<pre><code>&lt;body onload=\"checkFirstVisit()\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I know this question is old but whatever, maybe someone will find it useful.</p>\n\n<p>First step is to check <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Storage#sessionStorage\"><code>sessionStorage</code></a> for some pre-defined value and if it exists alert user:</p>\n\n<pre><code>if (sessionStorage.getItem(\"is_reloaded\")) alert('Reloaded!');\n</code></pre>\n\n<p>Second step is to set <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/DOM/Storage#sessionStorage\"><code>sessionStorage</code></a> to some value (for example <code>true</code>):</p>\n\n<pre><code>sessionStorage.setItem(\"is_reloaded\", true);\n</code></pre>\n\n<p>Session values kept until page is closed so it will work only if page reloaded in a new tab with the site. You can also keep reload count the same way.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I want to check when someone tries to refresh a page.</p>\n\n<p>For example, When I open a page nothing happens but when i refresh the page returns an alert</p>\n",
            "last_activity_date": 1374747746,
            "question_id": 5004978,
            "score": 22,
            "tags": [
                "javascript",
                "refresh"
            ],
            "title": "Check if page reloaded or refresh in js"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Search for the path of your Chrome executable and then, on your cmd, try :</p>\n\n<pre><code>&gt; \"C:\\PathTo\\Chrome.exe\" --allow-file-access-from-files\n</code></pre>\n\n<p><a href=\"http://www.chrome-allow-file-access-from-file.com/\">Source</a></p>\n\n<p><strong>EDIT :</strong>\nAs I see on your question, don't forget that Windows is a little bit similar to Unix, so when you type \"chrome ...\", cmd will search for Chrome in the PATH, but in general the Chrome folder isn't on the PATH. Also, you don't specify an extension for your executable... So if you move to Chrome's folder, this command will probably work too :</p>\n\n<pre><code>&gt; .\\chrome.exe --allow-file-access-from-files\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>As of this writing, in OS X, it will usually look like this</p>\n\n<pre><code>\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --allow-file-access-from-files\n</code></pre>\n\n<p>If you are a freak like me, and put your apps in <code>~/Applications</code>, then it will be </p>\n\n<pre><code>\"/Users/yougohere/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --allow-file-access-from-files\n</code></pre>\n\n<p>If neither of those are working, then type <code>chrome://version</code> in your Chrome address bar, and it will tell you what \"command line\" invocation you should be using. Just add <code>--allow-file-access-from-files</code> to that.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I have the same situation with <a href=\"http://stackoverflow.com/questions/16487803/why-does-this-filesystem-api-requestquota-call-fail\">HERE</a></p>\n\n<p>And to solve this problem I have to launch html file using Chrome at \"--allow-file-access-from-files\" mode.\nI tried next steps many times, but it doesn't work.</p>\n\n<ol>\n<li>start cmd under windows 7</li>\n<li>direct to chrome.exe folder</li>\n<li>do this <code>chrome --allow-file-access-from-files file:///C:/test%20-%203.html</code>  </li>\n</ol>\n",
            "last_activity_date": 1410962144,
            "question_id": 18586921,
            "score": 21,
            "tags": [
                "javascript",
                "html",
                "google-chrome"
            ],
            "title": "How to launch html using Chrome at &quot;--allow-file-access-from-files&quot; mode?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Chrome Extensions don't allow you to have inline JavaScript (<a href=\"http://developer.chrome.com/extensions/contentSecurityPolicy.html#JSExecution\">documentation</a>). You are going to have to do something similar to this.</p>\n\n<p>Assign an ID to the link (<code>&lt;a onClick=hellYeah(\"xxx\")&gt;</code> becomes <code>&lt;a id=\"link\"&gt;</code>), and use <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\"><code>addEventListener</code></a> to bind the event. Put the following in your <code>popup.js</code> file:</p>\n\n<pre><code>document.addEventListener('DOMContentLoaded', function() {\n    var link = document.getElementById('link');\n    // onClick's logic below:\n    link.addEventListener('click', function() {\n        hellYeah('xxx');\n    });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<h2>Reason</h2>\n\n<p>This does not work, because Chrome <a href=\"https://developer.chrome.com/extensions/contentSecurityPolicy#JSExecution\" rel=\"nofollow\">forbids any kind of inline code</a> in extensions via Content Security Policy.</p>\n\n<blockquote>\n  <p>Inline JavaScript will not be executed. This restriction bans both inline <code>&lt;script&gt;</code> blocks <strong>and</strong> inline event handlers (e.g. <code>&lt;button onclick=\"...\"&gt;</code>).</p>\n</blockquote>\n\n<h2>How to detect</h2>\n\n<p>If this is indeed the problem, Chrome would produce the following error in the console:</p>\n\n<blockquote>\n  <p>Refused to execute inline script because it violates the following Content Security Policy directive: \"script-src 'self' chrome-extension-resource:\". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution.</p>\n</blockquote>\n\n<p>To access a popup's JavaScript console (which is useful for debug in general), right-click your extension's button and select \"Inspect popup\" from the context menu.</p>\n\n<p>More information on debugging a popup is available <a href=\"https://developer.chrome.com/extensions/tut_debugging\" rel=\"nofollow\">here</a>.</p>\n\n<h2>How to fix</h2>\n\n<p>One needs to remove all inline JavaScript. There is <a href=\"https://developer.chrome.com/extensions/contentSecurityPolicy#JSExecution\" rel=\"nofollow\">a guide in Chrome documentation</a>.</p>\n\n<p>Suppose the original looks like:</p>\n\n<pre><code>&lt;a onclick=\"handler()\"&gt;Click this&lt;/a&gt; &lt;!-- Bad --&gt;\n</code></pre>\n\n<p>One needs to remove the <code>onclick</code> attribute and give the element a unique id:</p>\n\n<pre><code>&lt;a id=\"click-this\"&gt;Click this&lt;/a&gt; &lt;!-- Fixed --&gt;\n</code></pre>\n\n<p>And then attach the listener from a script (which must be in a <code>.js</code> file, suppose <code>popup.js</code>):</p>\n\n<pre><code>// Pure JS:\ndocument.addEventListener('DOMContentLoaded', function() {\n  document.getElementById(\"click-this\").addEventListener.(\"click\", handler);\n});\n\n// The handler also must go in a .js file\nfunction handler() {\n  /* ... */\n}\n</code></pre>\n\n<p>Note the wrapping in a <code>DOMContentLoaded</code> event. This ensures that the element exists at the time of execution. Now add the script tag, for instance in the <code>&lt;head&gt;</code> of the document:</p>\n\n<pre><code>&lt;script src=\"popup.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Alternative if you're using jQuery:</p>\n\n<pre><code>// jQuery\n$(document).ready(function() {\n  $(\"#click-this\").click(handler);\n});\n</code></pre>\n\n<h2>Relaxing the policy</h2>\n\n<p>Q: The error mentions ways to allow inline code. I don't want to / can't change my code, how do I enable inline scripts?</p>\n\n<p>A: Despite what the error says, you <a href=\"https://developer.chrome.com/extensions/contentSecurityPolicy#relaxing-inline-script\" rel=\"nofollow\"><strong>cannot</strong> enable inline script</a>: </p>\n\n<blockquote>\n  <p>There is no mechanism for relaxing the restriction against executing inline JavaScript. In particular, setting a script policy that includes <code>'unsafe-inline'</code> will have no effect.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>This seems to be the easiest thing to do, but it's just not working. In a normal browser the .html and .js files works perfectly, but in the Chrome extension the <code>onClick</code> function is not performing what it's supposed to do.</p>\n\n<p>.js file:</p>\n\n<pre><code>function hellYeah(text) {\n  document.getElementById(\"text-holder\").innerHTML = text;\n}\n</code></pre>\n\n<p>.html file:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;\n      Getting Started Extension's Popup\n    &lt;/title&gt;\n    &lt;script src=\"popup.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"text-holder\"&gt;\n      ha\n    &lt;/div&gt;\n    &lt;br /&gt;\n    &lt;a onClick=hellYeah(\"xxx\")&gt;\n      hyhy\n    &lt;/a&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>So basically once the user clicks \"hyhy\", \"ha\" should change into \"xxx\". And again - it works perfectly in the browser but does not work in the extension. Do you know why? Just in case I'm attaching the manifest.json below as well.</p>\n\n<p>Thanks in advance!</p>\n\n<p>manifest.json:</p>\n\n<pre><code>{\n  \"name\": \"My First Extension\",\n  \"version\": \"1.0\",\n  \"manifest_version\": 2,\n  \"description\": \"The first extension that I made.\",\n  \"browser_action\": {\n    \"default_icon\": \"icon.png\",\n    \"default_popup\": \"popup.html\"\n  },\n  \"permissions\": [\n    \"http://api.flickr.com/\"\n  ]\n}\n</code></pre>\n",
            "last_activity_date": 1410169617,
            "question_id": 13591983,
            "score": 9,
            "tags": [
                "javascript",
                "google-chrome-extension",
                "onclick"
            ],
            "title": "onClick within Chrome Extension not working"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>If you <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents\">scroll down a bit</a>, you see:</p>\n\n<blockquote>\n  <p>Warning! The <code>MutationEvent</code> interface was introduced in DOM Level 2\n  Events, but has not yet been completely and interoperably implemented\n  across user agents. In addition, there have been critiques that the\n  interface, as designed, introduces a performance and implementation\n  challenge. A new specification is under development with the aim of\n  addressing the use cases that mutation events solves, but in more\n  performant manner. Thus, this specification describes mutation events\n  for reference and completeness of legacy behavior, but deprecates the\n  use of both the <code>MutationEvent</code> interface and the <code>MutationNameEvent</code>\n  interface.</p>\n</blockquote>\n\n<p>Unfortunately there is no replacement, despite promises of one being under development!! This is widely bemoaned in the web dev community, as in almost all cases deprecation is reserved for things that have better alternatives, but this is one prominent counterexample.</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>I think the replacement will be mutation observers: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver</a></p>\n\n<pre><code>var whatToObserve = {childList: true, attributes: true, subtree: true, attributeOldValue: true, attributeFilter: ['class', 'style']};\nvar mutationObserver = new MutationObserver(function(mutationRecords) {\n  $.each(mutationRecords, function(index, mutationRecord) {\n    if (mutationRecord.type === 'childList') {\n      if (mutationRecord.addedNodes.length &gt; 0) {\n        //DOM node added, do something\n      }\n      else if (mutationRecord.removedNodes.length &gt; 0) {\n        //DOM node removed, do something\n      }\n    }\n    else if (mutationRecord.type === 'attributes') {\n      if (mutationRecord.attributeName === 'class') {\n        //class changed, do something\n      }\n    }\n  });\n});\nmutationObserver.observe(document.body, whatToObserve);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><a href=\"https://developer.chrome.com/devtools/docs/javascript-debugging#breakpoints-mutation-events\" rel=\"nofollow\">Chrome Developer Tools provides Breakpoints on DOM Mutation Events</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Why is the DOMSubtreeModified event <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#event-type-DOMSubtreeModified\">deprecated</a> and what are we supposed to use instead?</p>\n",
            "last_activity_date": 1416092924,
            "question_id": 6659662,
            "score": 27,
            "tags": [
                "javascript",
                "dom",
                "javascript-events",
                "deprecated",
                "dom3"
            ],
            "title": "Why is the DOMSubtreeModified event deprecated in DOM level 3?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Use <code>setTimeout(drawAll, 20)</code> instead. That only executes the function once.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><strong>clearInterval</strong> is one option:</p>\n\n<pre><code>var interval = setInterval(doStuff, 2000); // 2000 ms = start after 2sec \nfunction doStuff() {\n  alert('this is a 2 second warning');\n  clearInterval(interval);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>setInterval</code> sets up a <em>recurring</em> timer. It returns a handle that you can pass into <code>clearInterval</code> to stop it from firing:</p>\n\n<pre><code>var handle = setInterval(drawAll, 20);\n\n// When you want to cancel it:\nclearInterval(handle);\nhandle = 0;\n</code></pre>\n\n<p>The handle will be a number that isn't equal to <code>0</code>; therefore, <code>0</code> makes a handy flag value for \"no timer set\".</p>\n\n<p>To schedule a function to <em>only</em> fire once, use <code>setTimeout</code> instead. It won't keep firing. (It also returns a handle you can use to cancel it via <code>clearTimeout</code> before it fires that one time if appropriate.)</p>\n\n<pre><code>setTimeout(drawAll, 20);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 52
                }
            ],
            "body": "<pre><code>function doKeyDown(event) {\n    switch (event.keyCode) {\n    case 32:\n        /* Space bar was pressed */\n        if (x == 4) {\n            setInterval(drawAll, 20);\n        }\n        else {\n            setInterval(drawAll, 20);\n            x += dx;\n        }\n        break;\n    }\n}\n</code></pre>\n\n<p>Hi all,</p>\n\n<p>I want to call <strong><code>drawAll()</code> once</strong> not creating a <strong>loop</strong> that call <code>drawAll</code> again and again, should I use recursive method for that or should I use <strong><code>clearInterval</code></strong>? </p>\n\n<p>Also please tell me to use <code>clearInterval</code>? Thanks :) </p>\n",
            "last_activity_date": 1408798642,
            "question_id": 5978519,
            "score": 23,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "setInterval and how to use clearInterval"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>When you extend an object, you change its behaviour.</p>\n\n<p>Changing the behaviour of an object that will only be used by your own code is fine. But when you change the behaviour of something that is also used by other code there is a risk you will break that other code.</p>\n\n<p>When it comes adding methods to the object and array classes in javascript, the risk of breaking something is very high, due to how javascript works. Long years of experience have taught me that this kind of stuff causes all kinds of terrible bugs in javascript.</p>\n\n<p>If you need custom behaviour, it is far better to define your own class (perhaps a subclass) instead of changing a native one. That way you will not break anything at all.</p>\n\n<p>The ability to change how a class works without subclassing it is an important feature of any good programming language, but it is one that must be used rarely and with caution.</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>In my opinion, it's a bad practice. The major reason is integration. Quoting should.js docs:</p>\n\n<blockquote>\n  <p>OMG IT EXTENDS OBJECT???!?!@ Yes, yes it does, with a single getter\n  should, and no it won't break your code</p>\n</blockquote>\n\n<p>Well, how can the author know? What if my mocking framework does the same? What if my promises lib does the same?</p>\n\n<p>If you're doing it in your own project then it's fine. But for a library, then it's a bad design. Underscore.js is an example of the thing done the right way:</p>\n\n<pre><code>var arr = [];\n_(arr).flatten()\n// or: _.flatten(arr)\n// NOT: arr.flatten()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's no measureable drawback, like a performance hit. At least nobody mentioned any. So this is a question of personal preference and experiences.</p>\n\n<p><strong>The main pro argument:</strong> It looks better and is more intuitive, syntax sugar. It is a type/instance specific function, so it should be specifically bound to that type/instance.</p>\n\n<p><strong>The main contra argument:</strong> Code can interfere. If lib A adds a function, it could overwrite lib B's. This can break code very easily.</p>\n\n<p>Both have a point. When you rely on two libraries, that directly change your types, you will most likely end up with broken code, because the syntax is probably not the same. I totally agree on that. Macro-libraries must not manipulate the native types. Otherwise you as a developer won't ever now what is really going on behind the scenes.</p>\n\n<p>And that is the reason I dislike libs like jQuery, underscore, etc. Don't get me wrong; they are absolutely well programmed and they work like a charm, but they are <em>big</em>. You use only 10% of them, and understand about 1%.</p>\n\n<p>That's why I prefer an <a href=\"https://github.com/component\">atomistic approach</a>, where you only require, what you really need. This way, you always know, what happens. The micro-libraries only do, what you want them to do, so they won't interfere. In the context of having the end user knowing, which features are added, extending native types can be considered safe.</p>\n\n<p><strong>TL;DR</strong> When in doubt, don't extend native types. Only extend a native type, if you're 100% sure, that the end user will know about and want that behaviour. In <em>no</em> case manipulate a native type's existing functions, as it would break the existing interface.</p>\n\n<p>If you decide to extend the type, use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty(obj, prop, desc)</code></a>, if you can't (<a href=\"http://kangax.github.com/es5-compat-table/\">f*ck ie</a>), use the type's <code>prototype</code>.</p>\n\n<hr>\n\n<p>I originaly came up with this question, because I wanted <code>Error</code>s to be sendable via JSON. So I needed a way to stringify them. <code>error.stringify()</code> felt way better than <code>errorlib.stringify(error)</code>, as the second construct suggests, I'm operating on <code>errorlib</code> and not on <code>error</code> itself.</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>Every JS opinion leader says that extending the native objects is a bad practice. But why? Do we get a perfomance hit? Do they fear that somebody does it \"the wrong way\", and adds enumerable types to <code>Object</code>, practically destroying all loops on any object?</p>\n\n<p>Take <a href=\"https://github.com/visionmedia\">TJ Holowaychuk</a>'s <a href=\"https://github.com/visionmedia/should.js\">should.js</a> for example. He <a href=\"https://github.com/visionmedia/should.js#omg-it-extends-object\">adds a simple getter</a> to <code>Object</code> and everything works fine (<a href=\"https://github.com/visionmedia/should.js/blob/master/lib/should.js#L66-78\">source</a>).</p>\n\n<pre><code>Object.defineProperty(Object.prototype, 'should', {\n  set: function(){},\n  get: function(){\n    return new Assertion(Object(this).valueOf());\n  },\n  configurable: true\n});\n</code></pre>\n\n<p>This really makes sense. For instance one could extend <code>Array</code>.</p>\n\n<pre><code>Array.defineProperty(Array.prototype, \"remove\", {\n  set: function(){},\n  get: function(){\n    return removeArrayElement.bind(this);\n  }\n});\nvar arr = [0, 1, 2, 3, 4];\narr.remove(3);\n</code></pre>\n\n<p>Are there any arguments against extending native types?</p>\n",
            "last_activity_date": 1356496655,
            "question_id": 14034180,
            "score": 17,
            "tags": [
                "javascript",
                "prototype",
                "prototypal-inheritance"
            ],
            "title": "Why is extending native objects a bad practice?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Try the jquery-fieldselection plugin.</p>\n\n<p>You can download it from <a href=\"http://github.com/localhost/jquery-fieldselection/tree/master\">here</a>. There is an example too.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>getSelection()</p>\n\n<p>This varies a bit by browser, see here for a function that alleges to work in most:\n<a href=\"http://snipplr.com/view/775/getselection/\">http://snipplr.com/view/775/getselection/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Handling selection is different for different browsers:</p>\n\n<pre><code>var userSelection;\nif (window.getSelection) {\n    userSelection = window.getSelection();\n}\nelse if (document.selection) { // Opera\n    userSelection = document.selection.createRange();\n}\n</code></pre>\n\n<p>That gives you a range object. Each range represents a single selection (using control/command key it's possible to make multiple active selections).</p>\n\n<p>The type of range object you have now depends on what browser. For IE it's a Text Range object; for others its a Selection object. To convert a Selection object into a text range, you can call getRangeAt; for Safari, you need to build that:</p>\n\n<pre><code>var range;\nif (userSelection.getRangeAt)\n    range = userSelection.getRangeAt(0);\nelse { // Safari\n    range = document.createRange();\n    range.setStart(userSelection .anchorNode, userSelection.anchorOffset);\n    range.setEnd(userSelection.focusNode, userSelection.focusOffset);\n}\n</code></pre>\n\n<p>The range object provides you with the starting and ending dom elements and text offset of the selection.</p>\n\n<p>More information about range objects can be found at <a href=\"http://www.quirksmode.org/dom/range%5Fintro.html\">quirksmode.org here</a></p>\n\n<p>If you are using jQuery, you may want to look at the <a href=\"http://batiste.dosimple.ch/blog/posts/2007-09-11-1/rich-text-editor-jquery.html\">light weight jQuery RTE Plugin</a> by Batiste Bieler. It may do enough for your needs or at least give you something to start with.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>For obtaining the selected content in a <code>&lt;textarea&gt;</code> with Firefox: </p>\n\n<pre><code>function getSel() // javascript\n{\n    // obtain the object reference for the &lt;textarea&gt;\n    var txtarea = document.getElementById(\"mytextarea\");\n    // obtain the index of the first selected character\n    var start = txtarea.selectionStart;\n    // obtain the index of the last selected character\n    var finish = txtarea.selectionEnd;\n    // obtain the selected text\n    var sel = txtarea.value.substring(start, finish);\n    // do something with the selected content\n}\n</code></pre>\n\n<p>Reference:<br>\n- \u2022 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\" rel=\"nofollow\">textarea</a><br>\n- \u2022 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document?redirectlocale=en-US&amp;redirectslug=DOM%2Fdocument#Introduction\" rel=\"nofollow\">document</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>A small function that will get the selected string/text of a textarea or input element :</p>\n\n<pre><code>function getInputSelection(elem){\n if(typeof elem != \"undefined\"){\n  s=elem[0].selectionStart;\n  e=elem[0].selectionEnd;\n  return elem.val().substring(s, e);\n }else{\n  return '';\n }\n}\n</code></pre>\n\n<p>Note that the above code needs <strong>jQuery</strong> for working. An example of getting the selected string of a input element with id <strong>abc123</strong></p>\n\n<pre><code>getInputSelection($(\"#abc123\"));\n</code></pre>\n\n<p>The above function will return the selected string. If there is no string that is selected by the user, it will return <code>null</code>.</p>\n\n<h2>More Examples</h2>\n\n<pre><code>getInputSelection($(\"body\").find(\"input[name=user]\"));\n</code></pre>\n\n<p>On elements selected with class name, selected string of the first element of the array of elements is returned and not the selected string of all the elements. After all, selection in a page will always be <strong>1</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function getSel() {\nvar input = $(\"#text\");\nreturn input.html().toString().substring(getSelection().baseOffset,getSelection().extendOffset);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I'm trying to make my own <strong>WYSIWYG</strong> editor. Is there any way, how to get the text which has user selected in textarea? </p>\n\n<p>For example, if user selects some word and then clicks button, how do I find out which text was selected? </p>\n\n<p>I'm using <strong>jQuery</strong>.</p>\n",
            "last_activity_date": 1398012508,
            "question_id": 717224,
            "score": 13,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How to get selected text in textarea?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>In Chrome (WebKit, so Safari also), <code>console.log</code> calls with object arguments log an object reference. Once the object tab is clicked and opened, the internals remain constant (presumably a cache of sorts) and are no longer related to the object initially referred to (so if at a later stage the object changes, this will not be reflected). However until that point the object remains \"uncached\". So when you log an object multiple times then open each logged object, they all point to the same object in memory, whose value is the most current updated one.</p>\n\n<p>It's a well known \"issue\", although the behaviour is a result of a design decision (see comments on the first link), and so isn't considered a bug by the dev team.</p>\n\n<p>Easy workarounds are any means to get a non-object value of the object, so any serialisation method (e.g. <code>console.log(JSON.stringify(foo));</code>).</p>\n\n<p><a href=\"https://bugs.webkit.org/show_bug.cgi?id=35801\">https://bugs.webkit.org/show_bug.cgi?id=35801</a><br>\n<a href=\"http://code.google.com/p/chromium/issues/detail?id=44720\">http://code.google.com/p/chromium/issues/detail?id=44720</a><br>\n<a href=\"http://code.google.com/p/chromium/issues/detail?id=50316\">http://code.google.com/p/chromium/issues/detail?id=50316</a></p>\n",
                    "is_accepted": true,
                    "score": 12
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/4057440/is-chromes-javascript-console-lazy-about-evaluating-arrays\">Is Chrome&#39;s JavaScript console lazy about evaluating arrays?</a>  </p>\n</blockquote>\n\n\n\n<p>Consider this javascript:</p>\n\n<pre><code>var foo = {bar : 1111};\nconsole.log(foo);\nconsole.log(foo.bar);\n\nfoo.bar = 2222;\nconsole.log(foo);\nconsole.log(foo.bar);\n</code></pre>\n\n<p>In Firefox's firebug, this shows what I would have expected:</p>\n\n<pre><code>Object { bar=1111}\n1111\n\nObject { bar=2222}\n2222\n</code></pre>\n\n<p>However, in Safari and Chrome's console it shows:</p>\n\n<pre><code>Object { bar=2222}\n1111\n\nObject { bar=2222}\n2222\n</code></pre>\n\n<p>In other words, the object is showing the wrong attributes in the console when print-dumped, but the correct value if a specific attribute is printed.</p>\n\n<p>Is this a quirk of the browsers? Or a fundamental aspect of object oriented javascript that I am missing?</p>\n",
            "last_activity_date": 1350918968,
            "question_id": 8249136,
            "score": 9,
            "tags": [
                "javascript"
            ],
            "title": "Why does javascript object show different values in console in Chrome, Firefox, Safari?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Currently CSS does not support this feature.</p>\n\n<p>You can build your own or use a plug-in that emulates this behaviour using DIVs/CSS. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "You may not be able to do this using pure CSS. But, a little javascript can do it nicely.\n\n<p>A crude way to do it - </p>\n\n<pre><code>var sel = document.getElementById('select_id');\nsel.addEventListener('click', function(el){\n    var options = this.children;\n    for(var i=0; i &lt; this.childElementCount; i++){\n        options[i].style.color = 'white';\n    }\n    var selected = this.children[this.selectedIndex];\n        selected.style.color = 'red';\n    }, false);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>You cannot rely on CSS for form elements. The results vary wildly across all the browsers. I don't think Safari lets you customize <em>any</em> form elements at all.</p>\n\n<p>Your best bet is to use a plugin like <a href=\"http://plugins.jquery.com/project/jqtransform\" rel=\"nofollow\">jqTransform</a> (uses jQuery).</p>\n\n<p>EDIT: that page doesn't seem to be working at the moment. There is also <a href=\"http://customformelements.net/\" rel=\"nofollow\">Custom Form Elements</a> which supports MooTools and may support jQuery in the future.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In principle, you can style it using option[selected] as selector, but that doesn't work in many browsers.  Also, that only allows you to style the selected option, not the option that has hover focus.</p>\n\n<p>Tested to work in Chrome 9 and Firefox 3.6, doesn't work in Internet Explorer 8.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;select name=protect_email size=1 style=\"background: #009966; color: #FFF;\" onChange=\"this.style.backgroundColor=this.options[this.selectedIndex].style.backgroundColor\"&gt;    \n&lt;option value=0 style=\"background: #009966; color: #FFF;\" selected&gt;Protect my email&lt;/option&gt;;  \n&lt;option value=1 style=\"background: #FF0000; color: #FFF;\"&gt;Show email on advert&lt;/option&gt;;\n&lt;/select&gt;; \n</code></pre>\n\n<p><a href=\"http://pro.org.uk/classified/Directory?act=book&amp;category=120\">http://pro.org.uk/classified/Directory?act=book&amp;category=120</a></p>\n\n<p>Tested it in FF,Opera,Konqueror  worked fine...</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This syntax will work in XHTML and does not work in IE6, but this is a non-javascript way:</p>\n\n<pre><code>option[selected] { background: #f00; }\n</code></pre>\n\n<p>If you want to do this on-the-fly, then you would have to go with javascript, the way others have suggested....</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In CSS:</p>\n\n<p>SELECT OPTION:checked { background-color: red; }</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Is there a style for a select option's \"selected\" color? For example:</p>\n\n<pre><code>&lt;HTML&gt;\n&lt;BODY&gt;\n&lt;FORM NAME=\"form1\"&gt;\n&lt;SELECT NAME=\"mySelect\" SIZE=\"7\" style=\"background-color:red;\"&gt;\n&lt;OPTION&gt;Test 1\n&lt;OPTION&gt;Test 2\n&lt;OPTION&gt;Test 3\n&lt;OPTION&gt;Test 4\n&lt;OPTION&gt;Test 5\n&lt;OPTION&gt;Test 6\n&lt;OPTION&gt;Test 7\n&lt;/SELECT&gt;\n&lt;/FORM&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre>\n\n<p>When I select an option it turns blue, I want to override this and\nmake it a different color. In the style I expected something like\n\"selected-color\", but it doesn't exist.</p>\n",
            "last_activity_date": 1424690505,
            "question_id": 2402146,
            "score": 14,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "HTML &lt;select&gt; selected option background-color CSS style"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The behaviour is correct. \n<code>[]</code> is tranlated to <code>new Array()</code> in runtime, but only one such array is ever created.</p>\n\n<p>In other words, <code>Obj.prototype = {...}</code> is executed just like any other assigment.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The prototype of an object is just an object. The prototype is shared between all objects that \"inherit\" from it. No copy of the prototype is made if you create a new instance of a \"class\" (classes don't exist anyway in JS). </p>\n\n<p>It only makes a difference on how you use the these inherited properties:</p>\n\n<pre><code>function Foo() {}\n\nFoo.prototype = {\n    array: [],\n    func: function() {}\n}\n\na = new Foo();\nb = new Foo();\n\na.array.push('bar');\nconsole.log(b.array); // prints [\"bar\"]\n\nb.func.bar = 'baz';\nconsole.log(a.func.bar); // prints baz\n</code></pre>\n\n<p>In all these cases you are always working with the same object.</p>\n\n<p>But if you <em>assign</em> a value to a property of the object, the property will be set on the object itself, not its prototype, and hence is not shared:</p>\n\n<pre><code>console.log(a.hasOwnProperty('array')); // prints false\na.array = ['foo'];\nconsole.log(a.hasOwnProperty('array')); // prints true\nconsole.log(b.array); //prints [\"bar\"]\n</code></pre>\n\n<hr>\n\n<p>If you want to have the array private, you have to declare it in the constructor:</p>\n\n<pre><code>function Foo() {\n    this.array = [];\n}\n</code></pre>\n\n<p>because here, <code>this</code> refers to the <code>new</code> object that is generated when you call <code>new Foo()</code>.</p>\n\n<p>The rule of thumb is: <strong>Instance</strong>-specific data should be assigned to the <em>instance</em> inside the <em>constructor</em>, <strong>shared</strong> data (like methods) should be assigned to the <em>prototype</em>.</p>\n\n<hr>\n\n<p>You might want to read <a href=\"https://developer.mozilla.org/en/JavaScript/Guide/Details_of_the_Object_Model\"><strong><em>Details of the object model</em></strong></a> which describes differences between class-based vs. prototype-based languages and how objects actually work.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>You can access the prototype of an object via <code>obj.__proto__</code> (might not work in all browsers, but works in Chrome), and <code>a.__proto__ === b.__proto__</code> gives you <code>true</code>. It is the same object.</p>\n",
                    "is_accepted": true,
                    "score": 18
                }
            ],
            "body": "<p>Has anyone noticed this behavior before? This really threw me off... I would have expected prototyped arrays to be private to each class instance rather than shared between all class instances.</p>\n\n<p>Can someone verify that this is the correct behavior and perhaps explain this behavior in more detail?</p>\n\n<p>Notice the commented code and how it affects the behavior of the script.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\nfunction print_r( title, object ) {\n\n    var output = '';\n    for( var key in object ) {\n\n        output += key + \": \" + object[ key ] + \"\\n\";\n\n    }\n\n    output = title + \"\\n\\n\" + output;\n\n    alert( output );\n\n}\n\nfunction Sandwich() {\n\n    // Uncomment this to fix the problem\n    //this.ingredients = [];\n\n}\n\nSandwich.prototype = {\n\n    \"ingredients\" : [],\n    \"addIngredients\" : function( ingArray ) {\n\n        for( var key in ingArray ) {\n\n            this.addIngredient( ingArray[ key ] );\n\n        }\n\n    },\n    \"addIngredient\" : function( thing ) {\n\n        this.ingredients.push( thing );\n\n    }\n\n}\n\nvar cheeseburger = new Sandwich();\ncheeseburger.addIngredients( [ \"burger\", \"cheese\" ] );\n\nvar blt = new Sandwich();\nblt.addIngredients( [ \"bacon\", \"lettuce\", \"tomato\" ] );\n\nvar spicy_chicken_sandwich = new Sandwich();\nspicy_chicken_sandwich.addIngredients( [ \"spicy chicken pattie\", \"lettuce\", \"tomato\", \"honey dijon mayo\", \"love\" ] );\n\nvar onLoad = function() {\n\n    print_r( \"Cheeseburger contains:\", cheeseburger.ingredients );\n\n};\n\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body onload=\"onLoad();\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Many thanks.</p>\n",
            "last_activity_date": 1402731231,
            "question_id": 4425318,
            "score": 3,
            "tags": [
                "javascript",
                "arrays",
                "oop",
                "class",
                "prototype"
            ],
            "title": "Javascript object members that are prototyped as arrays become shared by all class instances"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I presume that it is catastrophically back tracking. </p>\n\n<p>I think that part of the issue may well be that the dot and \\s are not mutually exclusive.</p>\n\n<p>If I change your expression to </p>\n\n<pre><code>&lt;tag:main&gt;((?:.|[\\r\\n])*)&lt;/tag:main&gt;\n</code></pre>\n\n<p>and run it in the Regex Buddy debugger it fails a lot quicker in the event that the test string is not a match.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This catastrophically backtracks on long sequences of spaces that occur after the last closing <code>&lt;/tag:main&gt;</code> tag.  Consider the case where the subject string ends with 100 spaces.   First it matches them all with the <code>.</code> on the left of the alternation.  That fails because there's no closing tag, so it tries matching the last character with the <code>\\s</code> instead.  That fails too, so it tries matching the second-to-last space as a <code>\\s</code> and the last space as a <code>.</code>.  That fails (still no closing tag) so it tries the last space as a <code>\\s</code>.  When that fails it matches the third-to-last space as a <code>\\s</code> and tries all 4 ways to match the last two spaces.  When that fails it tries the fourth-to-last space as a <code>\\s</code> and all 8 ways on the last 3 spaces.  Then 16, 32 etc. The universe ends before it gets to the 100th-to-last space.</p>\n\n<p>Different VMs have different reactions to regexp matches that take forever because of catastrophic backtracking.  Some will simply report 'no match'.  In V8 it's like writing any other infinite or near-infinite loop.</p>\n\n<p>Using non-greedy <code>*</code> will do what you want (you want to stop at the first <code>&lt;/tag:main&gt;</code>, not the last), but will still do catastrophic backtracking for long strings of spaces where the closing sequence is missing.</p>\n\n<p>Making sure the same characters in the inner bracket can't match both sides of the alternation will reduce the problem from an exponential one to one that is linear in the length of the string.  Use a character class instead of an alternation or put <code>\\n</code> on the right hand side of the alternation bar.  <code>\\n</code> is disjoint with <code>.</code> so if you hit a long sequence of spaces the regexp engine doesn't try all left-right-left etc. combinations before terminating.</p>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>Instead of <code>(?:.|\\s)*</code>, you can use <code>[^]*</code> to match any character including various forms of newline.</p>\n\n<p>There's no alternation, so no risk of catastrophic backtracking.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Im using this regex to get the contents of a tag in a file.</p>\n\n<pre><code>var regex = new RegExp(\"&lt;tag:main&gt;((?:.|\\\\s)*)&lt;/tag:main&gt;\");\n</code></pre>\n\n<p>This causes the v8 engine to hang indefinitely.</p>\n\n<p>Now, if I use <code>new RegExp(\"&lt;tag:main&gt;([\\s\\S]*)&lt;/tag:main&gt;\")</code>, all is good.</p>\n\n<p>Anyone have an idea why the first one takes too long?</p>\n",
            "last_activity_date": 1423323959,
            "question_id": 2407870,
            "score": 6,
            "tags": [
                "javascript",
                "regex",
                "v8"
            ],
            "title": "Javascript regex hangs (using v8)"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Preloading and loading are the same thing. You can insert the image (either create a new one or change the \"src\" attribute of an existing one) but hide the element using <code>$(\"element\").hide()</code> or something similar. Before you do this, attach a load event handler like so:</p>\n\n<pre><code>var images = [\"src1\", \"src2\", \"src3\", \"src4\"];\nvar len = images.length;\n\nfor(i=0; i&lt;len; i++){\n    $(\"parent element\").html('&lt;img id=\"new-img\" style=\"display:none;\" src=\"'+images[i]+'\"/&gt;');\n    $(\"new-img\").load(function(){\n        //Your image is now \"preloaded\"\n\n        //Now you can show the image, or do other stuff\n        $(this).show();\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a function that will preload images from an array and call your callback when the last one has finished:</p>\n\n<pre><code>function preloadImages(srcs, imgs, callback) {\n    var img;\n    var remaining = srcs.length;\n    for (var i = 0; i &lt; srcs.length; i++) {\n        img = new Image();\n        img.onload = function() {\n            --remaining;\n            if (remaining &lt;= 0) {\n                callback();\n            }\n        };\n        img.src = srcs[i];\n        imgs.push(img);\n    }\n}\n\n// then to call it, you would use this\nvar imageSrcs = [\"src1\", \"src2\", \"src3\", \"src4\"];\nvar images = [];\n\npreloadImages(imageSrcs, images, myFunction);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>\nFor a more robust solution, consider this <code>PRELOADER</code> function with a couple of callbacks (<a href=\"http://jsfiddle.net/wkmrY/\" rel=\"nofollow\">jsFiddle</a>).</p>\n\n<h2>Keeping it simple:</h2>\n\n<p>In this example, I'm passing callbacks and an image hash inside an <code>Object</code> literal <code>PRELOADER_OBJECT</code>, then overriding the callbacks inside <code>PRELOADER</code>:</p>\n\n<pre><code>// preloder object stores image hash\n// and event handler callbacks\nvar PRELOADER_OBJECT = {\n\n    imgArray:\"http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg http://torwars.com/wp-content/uploads/2012/02/chewbacca-w-han-solo-anh.jpg\".split(\" \"),\n\n    progressCallback : function( percent )\n    {\n        $( '#preloader_progress' ).html( 'preload progress complete : ' + percent + '%' );\n        console.log( 'preload progress complete : ', percent );\n    },\n\n    completeCallback : function( scope )\n    {\n        // hide preload indicator, do something when finished\n        console.log( 'preload complete!' );\n        $( '#preloader_modal' ).delay( 1000 ).animate( { opacity : 0 }, function( )\n        {\n            $( '.preload_class' ).each( function( index )\n            {\n                $( this ).delay( index * 100 ).animate( { opacity : 0 } );\n            } );\n        } );\n    }\n\n/*Localize params and create PRELOADER object. \nNeeds to loadImages( ); iterate through hash and \ncall onPreloadProgress( ) and onPreloadComplete( )\neach time until finished. If you're still within\nbounds of the image hash, call progressCallback( )\nrecursively. When finished, fire onCompleteCallback( )*/\n\nvar PRELOADER = function( object )\n{\n    // preloader modal overlay\n    this.modal = undefined;\n\n    // progress indicator container\n    this.progressIndicator = undefined;\n\n    // image preload progress\n    this.progress = undefined;\n\n    // progress callback\n    this.progressCallback = undefined;\n\n    // complete callback\n    this.completeCallback = undefined;\n\n    // hash to store key : value pairs for image paths\n    this.imgArray = undefined; \n\n    // store images in preloadArray\n    this.preloadArray = [];\n\n    // initialize and localize our data\n    this.initialize = function( )\n    {\n        // create preload indicator and overlay modal\n        this.createPreloaderModal( );\n\n        // image hash\n        this.imgArray = object.imgArray;\n\n        // progress callback event handler\n        this.progressCallback = object.progressCallback;\n\n        // complete callback event\n        this.completeCallback = object.completeCallback;\n\n        // load images\n        this.loadImages( );\n    };\n\n    this.progressCallback = function( ) {}; // function to override\n\n    this.completeCallback = function( ) {}; // function to override\n\n    // load images into DOM and fire callbacks\n    this.loadImages = function( )\n    {\n        var that = this;\n\n        // iterate through hash and place images into DOM\n        $.each( PRELOADER_OBJECT.imgArray, function( index, object )\n        {\n            this.image = $( \"&lt;img/&gt;\", { \"src\" : object, \"class\": \"preload_class\" } ).appendTo( 'body' );\n\n            // mark progress and call progressCallback( ) event handler\n            that.progress = Math.ceil( ( index / PRELOADER_OBJECT.imgArray.length ) * 100 );\n            that.progressCallback( this.progress );\n\n            that.preloadArray.push( this.image );\n        } );\n\n        // check for array bounds and call completeCallback( )\n        if ( PRELOADER_OBJECT.imgArray.length )\n        {\n            this.progressCallback( 100 );\n            this.completeCallback( this );\n        }\n    };\n\n    // create modal to display preload data\n    this.createPreloaderModal = function( )\n    {\n        this.modal = $( '&lt;div/&gt;', { 'id' : 'preloader_modal' } ).appendTo( 'body' );\n        this.progressIndicator = $( '&lt;h1/&gt;', { 'id' : 'preloader_progress' } ).appendTo( this.modal );\n    };\n};\n\n// trigger event chain when DOM loads\n$( document ).ready( function( )\n{    \n    // instantiate PRELOADER instance and pass\n    // our JSON data model as a parameter\n    var preloader = new PRELOADER( PRELOADER_OBJECT );\n\n    // initialize preloader\n    preloader.initialize( );\n} );\n</code></pre>\n\n<p>};\u200b</p>\n\n<p>With a site load large enough to require an image preloader, the modal text display could be easily modified to support a data-driven jQuery animation.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am trying to find an image preloader script.</p>\n\n<p>While i found a few, none of them supports an event that is triggered when preloading is finished. </p>\n\n<p>Does anyone know of any script or jQuery plugin that will do this?</p>\n\n<p>Hope this question is appropriate for stackoverflow - if not, feel free to remove it in an instant. </p>\n",
            "last_activity_date": 1350445388,
            "question_id": 8264528,
            "score": 4,
            "tags": [
                "javascript",
                "jquery",
                "image",
                "preloader",
                "preloading"
            ],
            "title": "Image preloader javascript that supports events"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It is a self anonymous invoking function. The function is defined and executed immediately. The parenthesis  that wrap the function ensure that it is treated as a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Functions_and_function_scope#The_function_expression_%28function_operator%29\" rel=\"nofollow\">function expression</a> instead of a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Functions_and_function_scope#The_function_declaration_%28function_statement%29\" rel=\"nofollow\">function declaration</a>. The final pair of parenthesis invoke the function and pass the arguments.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Its a bit vague don't you think? Maybe its some library minimized code from a framework but you can't really expect anyone to just look at this and tell you what it does.</p>\n\n<p>Please be a bit more specific?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In javascript you can have <code>anonymous</code> and <code>self invoking</code> functions. </p>\n\n<pre><code>function add(a, b)\n{\n   return a + b;\n}\n</code></pre>\n\n<p>is same as</p>\n\n<pre><code>var add = function (a, b) {\n             return a + b;\n          }\n</code></pre>\n\n<p>and you call these as</p>\n\n<pre><code>add(10, 20)\n</code></pre>\n\n<p>You can define the function and call it immediately as</p>\n\n<pre><code>(\n   function(a, b)\n   {\n      return a + b;\n   }\n)(10, 20);\n</code></pre>\n\n<p>The</p>\n\n<pre><code>   (\n       function(a, b)\n       {\n          return a + b;\n       }\n    )\n</code></pre>\n\n<p>part defines a function, and the <code>(10, 20)</code> immediately after it calls the function just defined, with 10 and 20 as arguments to it.</p>\n\n<p>Since the function does not have a name, it cannot be used later in the code.</p>\n\n<p>The code in your question is probably <em>minified</em>, and creates a function in a similar way and calls it immediately.</p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>A self-executing anonymous function would be a pretty accurate description.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The function inside the parenthesis is an anonymous function. I cannot say why this is done the way it is done, but the programmer defines and anonymous function, and calls it immediately. You could probably do the same thing by simply substituting its arguments with the values passed in, and removing the function definition.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>function() {}</code> is a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special_Operators/function_Operator\" rel=\"nofollow\">definition of an anonymous function</a> and <code>(function() {})()</code> is a call of that anonymous function.</p>\n\n<p>This works since functions can be passed like data. So <code>window.alert</code> is the known <code>alert</code> function itself and <code>window.alert()</code> will call that function.</p>\n\n<p>This technique is often used to keep the current variable scope clean as the function has its own variable scope.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>It is a self invoking function, it is executed right away. \nSelf invoking functions are effective for avoiding creation of global variables, jQuery uses this very effectively.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var funct = function(x,y) { }\nfunct(1,2)\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>(function(x,y){ })(1,2);\n</code></pre>\n\n<p>it defines a self invoking anonymous function. It gets executed and then thrown away. It is a way of tidying your code (although this is a bad example) and having private variables in only that scope. It also won't get stored within the closure.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I saw this function </p>\n\n<pre><code>(function (x, y, data, lbl, dot) {\n            var timer, i = 0;\n            rect.hover(function () {\n                clearTimeout(leave_timer);\n                var side = \"right\";\n                if (x + frame.getBBox().width &gt; width) {\n                    side = \"left\";\n                }\n                var ppp = this.popup(x, y, label, side, 1);\n                //var ppp = r.popup(x, y, label, side, 1);\n                frame.show().stop().animate({path: ppp.path}, 200 * is_label_visible);\n                label[0].attr({text: data + \" hit\" + (data == 1 ? \"\" : \"s\")}).show().stop().animateWith(frame, {translation: [ppp.dx, ppp.dy]}, 200 * is_label_visible);\n                dot.attr(\"r\", 6);\n                is_label_visible = true;\n            }, function () {\n                dot.attr(\"r\", 4);\n                leave_timer = setTimeout(function () {\n                    frame.hide();\n                    label[0].hide();\n                    is_label_visible = false;\n                }, 1);\n            });\n        })(x, y, data[i], labels[i], dot);\n</code></pre>\n\n<p>What is this? A function? Why place a function definition in ()?</p>\n",
            "last_activity_date": 1398625763,
            "question_id": 3921922,
            "score": 3,
            "tags": [
                "javascript"
            ],
            "title": "What does (function (x,y)){...})(a,b); mean in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Hopefully I'm not over-simplifying, but what about something as simple as using an object?</p>\n\n<pre><code>var test = {\n    getValue : function(localName){\n    \treturn this[localName];\n    },\n    setValue : function(localName, value){\n    \treturn this[localName] = value;\n    }\n};\n\n&gt;&gt;&gt; test.a = 123\n&gt;&gt;&gt; test.getValue('a')\n123\n&gt;&gt;&gt; test.a\n123\n\n&gt;&gt;&gt; test.setValue('b', 999)\n999\n&gt;&gt;&gt; test.b\n999\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>To answer your question, no, there is no way to do dynamic variable lookup in a local scope without using <code>eval()</code>.</p>\n\n<p>The best alternative is to make your \"scope\" just a regular object [literal] (ie, <code>\"{}\"</code>), and stick your data in there.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>No, like <a href=\"http://stackoverflow.com/users/45433/crescentfresh\">crescentfresh</a> said. Below you find an example of how to implement without eval, but with an internal private object.</p>\n\n<pre><code>var test = function () {\n  var prv={ };\n  function prop(name, def) {\n    prv[name] = def;\n    return function(value) {\n      // if (!value) is true for 'undefined', 'null', '0', NaN, '' (empty string) and false.\n      // I assume you wanted undefined. If you also want null add: || value===null\n      // Another way is to check arguments.length to get how many parameters was\n      // given to this function when it was called.\n      if (typeof value === \"undefined\"){\n        //check if hasOwnProperty so you don't unexpected results from\n        //the objects prototype.\n        return Object.prototype.hasOwnProperty.call(prv,name) ? prv[name] : undefined;\n      }\n      prv[name]=value;\n      return this;\n    }\n  };\n\n  return pub = {\n    a:prop('a', 1),\n    b:prop('b', 2),\n    c:prop('c', 3),\n    d:function(){\n      //to show that they are accessible via two methods\n      //This is a case where 'with' could be used since it only reads from the object.\n      return [prv.a,prv.b,prv.c];\n    }\n  };\n}();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 4
                }
            ],
            "body": "<p>If you want to use global functions and variable dynamically you can use:</p>\n\n<pre><code>window[functionName](window[varName]);\n</code></pre>\n\n<p>Is it possible to do the same thing for variables in the local scope?</p>\n\n<p>This code works correctly but currently uses eval and I'm trying to think of how else to do it.</p>\n\n<pre><code>var test = function(){\n    //this = window\n    var a, b, c; //private variables\n\n    var prop = function(name, def){\n    \t//this = window\n    \teval(name+ ' = ' + (def.toSource() || undefined) + ';');\t\n\n    \treturn function(value){\n    \t\t//this = test object\n    \t\tif ( !value) {\n    \t\t\treturn eval('(' + name + ')');\n    \t\t}\n    \t\teval(name + ' = value;')\n    \t\treturn this;\n    \t};\n\n    };\n\n    return {\n    \ta:prop('a', 1),\n    \tb:prop('b', 2),\n    \tc:prop('c', 3),\n    \td:function(){\n    \t\t//to show that they are accessible via to methods\n    \t\treturn [a,b,c];\n    \t}\n    };\n}();\n\n&gt;&gt;&gt;test\nObject\n&gt;&gt;&gt;test.prop\nundefined\n&gt;&gt;&gt;test.a\nfunction()\n&gt;&gt;&gt;test.a()\n1 //returns the default\n&gt;&gt;&gt;test.a(123)\nObject //returns the object\n&gt;&gt;&gt;test.a()\n123 //returns the changed private variable\n&gt;&gt;&gt;test.d()\n[123,2,3]\n</code></pre>\n",
            "last_activity_date": 1397664943,
            "question_id": 598878,
            "score": 12,
            "tags": [
                "javascript",
                "scope"
            ],
            "title": "How can I access local scope dynamically in javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Looks like an array to me, or am I missing something? </p>\n\n<pre><code>var counters = [0,0,0];\n\nfunction process(index) {\n   ++counters[index]; \n      /* or ++counters[index]+index, not sure what you want to do */\n   if (counters[index] === 13) { \n      /* do stuff */ \n   }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>The <code>eval()</code> javascript function will allow you to accomplish this.  However it's generally frowned upon.  Your question didn't explicitly exclude arrays.  Arrays would definitely be more appropriate for the pattern you've described.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>function process(index) {\n    // do some processing\n    var counter;\n    eval('counter = ++counter_'+index);\n    if (counter == 13)\n    {\n        // do other stuff\n    }\n}\n</code></pre>\n\n<p>Make sure that index really is an integer, otherwise mayhem could ensue.</p>\n\n<p><strong>Edit</strong>: Others have pointed out that you should use an array if you can. But if you are stuck with the named global variables then the above approach will work.</p>\n\n<p><strong>Edit</strong>: bobince points out that you can use the window object to access globals by name, and so deserves any credit for the following:</p>\n\n<pre><code>function process(index) {\n    // do some processing\n    var counter = ++window['counter_' + index];\n    if (counter == 13)\n    {\n        // do other stuff\n    }\n}\n</code></pre>\n\n<p>Other answers have said \"don't use <code>eval()</code>\", but not why. Here's an explanation from <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FFunctions/eval\">MDC</a>:</p>\n\n<blockquote>\n  <p><strong>Don't use eval!</strong></p>\n  \n  <p>eval() is a dangerous function, which\n  executes the code it's passed with the\n  privileges of the caller. If you run\n  eval() with a string that could be\n  affected by a malicious party, you may\n  end up running malicious code on the\n  user's machine with the permissions of\n  your webpage / extension.</p>\n  \n  <p>There are safe alternatives to eval()\n  for common use-cases.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I have a set of global counter variables in Javascript:</p>\n\n<pre><code>var counter_0 = 0;\nvar counter_1 = 0;\nvar counter_2 = 0;\n</code></pre>\n\n<p>etc</p>\n\n<p>I then have a Javascript function that accepts an 'index' number that maps to those global counters. Inside this function, I need to read and write to those global counters using the 'index' value passed to the function.</p>\n\n<p>Example of how I'd like it to work, but of course doesn't work at all:</p>\n\n<pre><code>function process(index) {\n    // do some processing\n\n    // if 'index' == 0, then this would be incrementing the counter_0 global variable\n    ++counter_+index; \n\n    if (counter_+index == 13)\n    {\n        // do other stuff\n    }\n}\n</code></pre>\n\n<p>I hope what I'm trying to accomplish is clear. If not I'll try to clarify. Thanks.</p>\n\n<p>EDIT Clarification:</p>\n\n<p>I'm not trying to increment the name of the counter, but rather the value the counter contains.</p>\n",
            "last_activity_date": 1362778601,
            "question_id": 592862,
            "score": 3,
            "tags": [
                "javascript",
                "variables"
            ],
            "title": "Javascript &quot;Variable Variables&quot;: how to assign variable based on another variable?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You need to look at <a href=\"http://phantomjs.org/\" rel=\"nofollow\">PhantomJS</a>.</p>\n\n<p>From their site:</p>\n\n<blockquote>\n  <p>PhantomJS is a headless WebKit with JavaScript API. It has fast and\n  native support for various web standards: DOM handling, CSS selector,\n  JSON, Canvas, and SVG.</p>\n</blockquote>\n\n<p>Using the API you can script the \"browser\" to interact with that page and scrape the data you need. You can then do whatever you need with it; including passing it to a PHP script if necessary.</p>\n\n<hr>\n\n<p>That being said, if at all possible try not to \"scrape\" the data. If there is an ajax call the page is making, maybe there is an API you can use instead? If not, maybe you can convince them to make one. That would of course be much easier and more maintainable than screen scraping.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>My question is: How to scrape data from this website <a href=\"http://vtis.vn/index.aspx\" rel=\"nofollow\">http://vtis.vn/index.aspx</a> But the data is not shown until you click on for example \"Danh s\u00e1ch ch\u1eadm\". I have tried very hard and carefully, when you click on \"Danh s\u00e1ch ch\u1eadm\" this is onclick event which triggers some javascript functions one of the js functions is to get the data from the server and insert it to a tag/place holder and at this point you can use something like firefox to examine the data and yes, the data is display to users/viewers on the webpage. So again, how can we scrap this data programmatically?</p>\n\n<p>i wrote a scrapping function but ofcourse it does not get the data i want because the data is not available until i click on the button \"Danh s\u00e1ch ch\u1eadm\"</p>\n\n<pre><code>                &lt;?php\n                      $Page = file_get_contents('http://vtis.vn/index.aspx');\n                $dom_document = new DOMDocument();\n                  $dom_document-&gt;loadHTML($Page);\n                              $dom_xpath_admin = new DOMXpath($dom_document_admin);\n                   $elements = $dom_xpath-&gt;query(\"*//td[@class='IconMenuColumn']\");\n                              //\n                          foreach ($elements as $element) {\n                            $nodes = $element-&gt;childNodes;\n                            foreach ($nodes as $node) {\n                                         echo (mb_convert_encoding($node-&gt;c14n(), 'iso-8859-1', mb_detect_encoding($content, 'UTF-8', true)));\n                               }\n                          }\n                         }\n</code></pre>\n\n<p>Thank you kindly, StackOverflow is a great place.\nD.</p>\n",
            "last_activity_date": 1349721688,
            "question_id": 12630891,
            "score": 0,
            "tags": [
                "php",
                "javascript",
                "dynamic",
                "html-parser"
            ],
            "title": "Scrape data generated by javascript on server-side from webpages.aspx"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Yes it makes sense to use <code>angular.js</code> along with <code>require.js</code> wherein you can use <code>require.js</code> for modularizing components.<br></p>\n\n<p>I can point you to a <a href=\"https://github.com/tnajdek/angular-requirejs-seed\">seed project</a> which uses <code>both angular.js and require.js</code>. Hope that helps! </p>\n",
                    "is_accepted": false,
                    "score": 187
                },
                {
                    "body": "<p>This I believe is a subjective question, so I will provide my subjective opinion. </p>\n\n<p>Angular has a modularization mechanism built in. When you create your app, the first thing you would do is </p>\n\n<pre><code>var app = angular.module(\"myApp\");\n</code></pre>\n\n<p>and then</p>\n\n<pre><code>app.directive(...);\n\napp.controller(...);\n\napp.service(...);\n</code></pre>\n\n<p>If you have a look at the angular-seed which is neat starter app for angular, they have separated out the directives, services, controllers etc into different modules and then loaded those modules as dependancies on your main app.</p>\n\n<p>Something like :</p>\n\n<pre><code>var app = angular.module(\"myApp\",[\"Directives\",\"Controllers\",\"Services\"];\n</code></pre>\n\n<p>Angular also lazy loads these modules ( into memory) not their script files. </p>\n\n<p>In terms of lazy loading script files, to be frank unless you are writing something extremely large it would be an overkill because angular by its very nature reduces the amount of code you write. A typical app written in most other frameworks could expect a reduction in around 30-50% in LOC if written in angular. </p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>As @ganaraj mentioned AngularJS has dependency injection at its core. When building toy seed applications with and without RequireJS, I personally found RequireJS was probably overkill for most use cases.</p>\n\n<p>That doesn't mean RequireJS is not useful for it's script loading capabilities and keeping your codebase clean during development. Combining the r.js optimizer (<a href=\"https://github.com/jrburke/r.js\">https://github.com/jrburke/r.js</a>) with almond (<a href=\"https://github.com/jrburke/almond\">https://github.com/jrburke/almond</a>) can create a very slim script loading story. However since its dependency management features are not as important with angular at the core of your application, you can also evaluate other client side (HeadJS, LABjs, ...) or even server side (MVC4 Bundler, ...) script loading solutions for your particular application.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Yes, it makes sense. </p>\n\n<p>\"<strong>Angular modules don't try to solve the problem of script load ordering or lazy script fetching. These goals are orthogonal and both module systems can live side by side and fulfil their goals</strong>\". <em>source: <a href=\"http://docs.angularjs.org/tutorial/step_07\">Angular JS official website</a></em>.</p>\n",
                    "is_accepted": false,
                    "score": 107
                },
                {
                    "body": "<p>Yes it makes sense to use requireJS with Angular, I spent several days to test several technical solutions.</p>\n\n<p>I made an Angular Seed with RequireJS on Server Side. Very simple one.\nI use SHIM notation for no AMD module and not AMD because I think it's very difficult to deal with two different Dependency injection system. </p>\n\n<p>I use grunt and r.js to concatenate js files on server depends on the SHIM configuration (dependency) file. So I refer only one js file in my app.</p>\n\n<p>For more information go on my github Angular Seed :\n<a href=\"https://github.com/matohawk/angular-seed-requirejs\">https://github.com/matohawk/angular-seed-requirejs</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>It makes sense to use requirejs with angularjs if you plan on lazy loading controllers and directives etc, while also combining multiple lazy dependencies into single script files for much faster lazy loading. RequireJS has an <a href=\"http://requirejs.org/docs/optimization.html\">optimisation tool</a> that makes the combining easy. See <a href=\"http://ify.io/using-requirejs-with-optimisation-for-lazy-loading-angularjs-artefacts/\">http://ify.io/using-requirejs-with-optimisation-for-lazy-loading-angularjs-artefacts/</a>   </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To restate what I think the OP's question really is:</p>\n\n<blockquote>\n  <p>If I'm building an application principally in Angular, and (implicitly) doing so in the era of Grunt/Gulp/Broccoli, and I maybe have a couple additional library dependencies, does Require add clear, specific value beyond what I get by using Angular without Require? </p>\n</blockquote>\n\n<p>Or, put another way: </p>\n\n<blockquote>\n  <p>\"Does vanilla Angular need Require to manage its components effectively?\"* </p>\n</blockquote>\n\n<p>And I believe the basic answer to that is: \"not unless you've got something else going on.\" </p>\n\n<p>If you have a huge application with 40 outside dependencies, or you can't control your CI environment, or your boss adores Require, or you adore Require, or Angular is only one piece of a larger application, etc., etc., then YMMV. If you are wayyy into componentization, and want to load components into an Angular app as fully stand-alone items with own dependencies, then OK. (Although I think that's <em>usually</em> a better idea in principle than in practice.)</p>\n\n<p>But otherwise, Angular controllers, directives and services <em>are</em> lazy-loaded by Angular's built-in module system, instantiated only when needed, and segregated from both global scope and internally to Angular. Using AMD on top of that is overhead without value, at least for the basic loading of Angular components.</p>\n\n<p>Further, there's <a href=\"http://briantford.com/blog/huuuuuge-angular-apps.html\" rel=\"nofollow\">this</a>, from Brian Ford, author of the Angular Batarang and a member of the Angular core team:</p>\n\n<blockquote>\n  <p>I don't recommend using RequireJS with AngularJS. Although it's certainly possible, I haven't seen any instance where RequireJS was beneficial in practice.</p>\n</blockquote>\n\n<p>Note that lazy-loading and lazy-downloading are different. Angular's lazy-loading doesn't mean you're pulling them direct from the server. In a Yeoman-style application with javascript automation, you're concatenating and minifying the whole shebang together into a single file. They're present, but not executed until needed. The speed and bandwidth improvements you get from doing this vastly, vastly outweigh any alleged improvements from lazy-downloading a 20-line controller. In fact, the wasted network latency and transmission overhead for that controller is going to be an order of magnitude greater than the size of the controller itself.</p>\n\n<p>Some people logically say: <em>\"OK. That's fine for distribution. But what about during development on my local dev boxen? How can I get all my dozens/hundreds of script files loaded without needing to attach them all to index.html manually? That's my real reason for using Require.\"</em> </p>\n\n<p>Have a look at the sub-generators in Yeoman's generator-angular, or at the automation patterns embodied in <a href=\"https://github.com/Swiip/generator-gulp-angular\" rel=\"nofollow\">generator-gulp-angular</a>. These provide you a clean, scalable way to either: automatically attach the files at the time that components are scaffolded, or to simply grab them all automatically if they are present in certain folders/match certain glob-patterns. You never again need to think about your own script-loading once you've got the latter option, let alone tinker with finicky AMD specifications. </p>\n\n<p>Bottom-line: go with the grain whenever possible, and let Angular and your automation tools worry about script-loading and the lazy-instantiation of Angular components. If you want to mess around with Require for the non-Angular dependencies, go ahead. If you're developing Angular apps but can't use Javascript automation tools for some reason, OK. But otherwise: ask yourself if you're doing it out of pure habit ('<a href=\"http://c2.com/cgi/wiki?CargoCultProgramming\" rel=\"nofollow\">cargo-culting</a>', perhaps), or because you can actually prove the value to that specific project.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>I think that it depends on your project complexity since angular is pretty much modularized. \nYour controllers can be mapped and you can just import those JavaScript classes in your index.html page. </p>\n\n<p>But in case your project get bigger. Or you anticipates such scenario, you should integrate angular with requirejs. In <a href=\"http://angularcorner.blogspot.co.il/\" rel=\"nofollow\">this</a> article you can see a demo app for such integration. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would avoid using Require.js. Apps I've seen that do this wind up a mess of multiple types of module pattern architecture.  AMD, Revealing, different flavors of IIFE, etc.  There are other ways to load on demand like the <a href=\"https://github.com/AndyGrom/loadOnDemand\" rel=\"nofollow\">loadOnDemand Angular mod</a>.  Adding other stuff just fills your code full of cruft and creates a <a href=\"http://java.dzone.com/articles/whats-your-signal-noise-ratio\" rel=\"nofollow\">low signal to noise ratio</a> and makes your code hard to read. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Yes, it does, specially for very large SPA.</p>\n\n<p>In some scenario, RequireJS is a must.  For example, I develop PhoneGap applications using AngularJS that also uses Google Map API.  Without AMD loader like RequireJS, the app would simply crash upon launch when offline as it cannot source the Google Map API scripts.  An AMD loader gives me a chance to display an error message to the user.</p>\n\n<p>However, integration between AngularJS and RequireJS is a bit tricky.  I created angularAMD to make this a less painful process:</p>\n\n<p><a href=\"http://marcoslin.github.io/angularAMD/\">http://marcoslin.github.io/angularAMD/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Using RequireJS with AngularJS makes sense but only if you understand how each of them works regarding <strong>dependency injection</strong>, as although both of them injects dependencies, they inject very different things.</p>\n\n<p>AngularJS has its own dependency system that let you inject AngularJS modules to a newly created module in order to reuse implementations. Let's say you created a \"first\" module that implements an AngularJS filter \"greet\":</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular\n  .module('first', [])\n  .filter('greet', function() {\n    return function(name) {\n      return 'Hello, ' + name + '!';\n    }\n  });\n</code></pre>\n\n<p>And now let's say you want to use the \"greet\" filter in another module called \"second\" that implements a \"goodbye\" filter. You may do that injecting the \"first\" module to the \"second\" module:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular\n  .module('second', ['first'])\n  .filter('goodbye', function() {\n    return function(name) {\n      return 'Good bye, ' + name + '!';\n    }\n  });\n</code></pre>\n\n<p>The thing is that in order to make this work correctly without RequireJS, you have to make sure that the \"first\" AngularJS module is loaded on the page before you create the \"second\" AngularJS module. Quoting documentation:</p>\n\n<blockquote>\n  <p>Depending on a module implies that required module needs to be loaded\n  before the requiring module is loaded.</p>\n</blockquote>\n\n<p>In that sense, here is where RequireJS can help you as RequireJS provides a clean way to inject scripts to the page helping you organize script dependencies between each other.</p>\n\n<p>Going back to the \"first\" and \"second\" AngularJS modules, here is how you can do it using RequireJS separating the modules on different files to leverage script dependencies loading:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// firstModule.js file\ndefine(['angular'], function(angular) {\n  angular\n    .module('first', [])\n    .filter('greet', function() {\n      return function(name) {\n        return 'Hello, ' + name + '!';\n      }\n    });\n});\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>// secondModule.js file\ndefine(['angular', 'firstModule'], function(angular) {\n  angular\n    .module('second', ['first'])\n    .filter('goodbye', function() {\n      return function(name) {\n        return 'Good bye, ' + name + '!';\n      }\n    });\n});\n</code></pre>\n\n<p>You can see that we are depending on \"firstModule\" file to be injected before the content of the RequireJS callback can be executed which needs \"first\" AngularJS module to be loaded to create \"second\" AngularJS module.</p>\n\n<p>Side note: Injecting \"angular\" on the \"firstModule\" and \"secondModule\" files as dependency is required in order to use AngularJS inside the RequireJS callback function and it have to be configured on RequireJS config to map \"angular\" to the library code. You may have AngularJS loaded to the page in a traditional manner too (script tag) although defeats RequireJS benefits. </p>\n\n<p>More details on having RequireJS support from AngularJS core from 2.0 version on my blog post.</p>\n\n<p><strong>Based on my blog post <em>\"Making sense of RequireJS with AngularJS\"</em>, here is the <a href=\"http://leog.me/log/making-sense-of-requirejs-with-angularjs/\">link</a>.</strong></p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Short answer is, it make sense. Recently this was discussed in ng-conf 2014. Here is the talk on this topic:</p>\n\n<p><a href=\"http://www.youtube.com/watch?v=4yulGISBF8w\">http://www.youtube.com/watch?v=4yulGISBF8w</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Here is the approach I use: <a href=\"http://thaiat.github.io/blog/2014/02/26/angularjs-and-requirejs-for-very-large-applications/\" rel=\"nofollow\">http://thaiat.github.io/blog/2014/02/26/angularjs-and-requirejs-for-very-large-applications/</a></p>\n\n<p>The page shows a possible implementation of AngularJS + RequireJS, where the code is split by features and then component type.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Answer from briantford</p>\n\n<p>AngularJS has it's own module system an typically doesn't need something like RJS.</p>\n\n<p>Reference: <a href=\"https://github.com/yeoman/generator-angular/issues/40\" rel=\"nofollow\">https://github.com/yeoman/generator-angular/issues/40</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm a newbie to Angular.js and trying to understand how it's different from Backbone.js... We used to manage our packages dependencies with Require.js while using Backbone. Does it make sense to do the same with Angular.js?</p>\n",
            "last_activity_date": 1426065497,
            "question_id": 12529083,
            "score": 307,
            "tags": [
                "javascript",
                "requirejs",
                "angularjs"
            ],
            "title": "Does it make sense to use Require.js with Angular.js?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>You can tell Django to output <code>{{</code> and <code>}}</code>, as well as other reserved template strings by using the <a href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#templatetag\" rel=\"nofollow\"><code>{% templatetag %}</code></a> tag.</p>\n\n<p>For instance, using <code>{% templatetag openvariable %}</code> would output <code>{{</code>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>So I got some great help in the Angular IRC channel today.  It turns out you can change Angular's template tags very easily.  The necessary snippets below should be included after your angular include (the given example appears on their <a href=\"https://groups.google.com/forum/?hl=en&amp;pli=1#!searchin/angular/markup/angular/48wXpKVYwII/kOTkDhok4bcJ\">mailing lists</a> and would use <code>(())</code> as the new template tags, substitute for your own):</p>\n\n<pre><code>angular.markup('(())', function(text, textNode, parentElement){\n  if (parentElement[0].nodeName.toLowerCase() == 'script') return;\n  text = text.replace(/\\(\\(/g,'{{').replace(/\\)\\)/g, '}}');\n  textNode.text(text);\n  return angular.markup('{{}}').call(this, text, textNode, parentElement);\n});\n\nangular.attrMarkup('(())', function(value, name, element){\n    value = value.replace(/\\(\\(/g,'{{').replace(/\\)\\)/, '}}');\n    element[0].setAttribute(name, value);\n    return angular.attrMarkup('{{}}').call(this, value, name, element);\n});\n</code></pre>\n\n<p>Also, I was pointed to an upcoming enhancement that will expose <code>startSymbol</code> and <code>endSymbol</code> properties that can be set to whatever tags you desire.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>I vote against using double parentheses (()) as template tag. It may work well as long as no function call is involved but when tried the following</p>\n\n<pre><code>ng:disabled=(($invalidWidgets.visible()))\n</code></pre>\n\n<p>with Firefox (10.0.2) on Mac I got a terribly long error instead of the intended logic. &lt;[]> went well for me, at least up until now.</p>\n\n<p><strong>Edit 2012-03-29:</strong>\nPlease note that $invalidWidgets is deprecated. However I'd still use another wrapper than double braces. For any angular version higher than 0.10.7 (I guess) you could change the wrapper a lot easier in your app / module definition:</p>\n\n<pre><code>angular.module('YourAppName', [], function ($interpolateProvider) {\n    $interpolateProvider.startSymbol('&lt;[');\n    $interpolateProvider.endSymbol(']&gt;');\n}); \n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/ng.%24interpolateProvider\" rel=\"nofollow\">API docs</a>.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>you can maybe try <a href=\"https://gist.github.com/1313862\">verbatim</a> Django template tag \nand use it like this :</p>\n\n<pre><code>{%load verbatim%}\n\n&lt;p&gt;{%verbatim%}\n&lt;p&gt;this where your angular tags \"{{}}\" resides\n&lt;p&gt;{%endverbatim%}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>For Angular 1.0 you should use the $interpolateProvider apis to configure the interpolation symbols: <a href=\"http://docs.angularjs.org/api/ng.%24interpolateProvider\">http://docs.angularjs.org/api/ng.$interpolateProvider</a>.</p>\n\n<p>Something like this should do the trick:</p>\n\n<pre><code>myModule.config(function($interpolateProvider) {\n  $interpolateProvider.startSymbol('{[{');\n  $interpolateProvider.endSymbol('}]}');\n});\n</code></pre>\n\n<p>Keep in mind two things:</p>\n\n<ul>\n<li>mixing server-side and client-side templates is rarely a good idea and should be used with caution. The main issues are: maintainability  (hard to read) and security (double interpolation could expose a new security vector - e.g. while escaping of serverside and clientside templating by themselves might be secure, their combination might not be).</li>\n<li>if you start using third-party directives (components) that use <code>{{ }}</code> in their templates then your configuration will break them. (<a href=\"https://github.com/angular/angular.js/pull/1256\">fix pending</a>)</li>\n</ul>\n\n<p>While there is nothing we can do about the first issue, except for warning people, we do need to address the second issue.</p>\n",
                    "is_accepted": true,
                    "score": 220
                },
                {
                    "body": "<p>We created a <em>very</em> simple filter in Django 'ng' that makes it easy to mix the two:</p>\n\n<p>foo.html:</p>\n\n<pre><code>...\n&lt;div&gt;\n  {{ django_context_var }}\n  {{ 'angularScopeVar' | ng }}\n  {{ 'angularScopeFunction()' | ng }}\n&lt;/div&gt;\n...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I found the code below helpful. I found the code here: <a href=\"http://djangosnippets.org/snippets/2787/\">http://djangosnippets.org/snippets/2787/</a></p>\n\n<pre><code>\"\"\"\nfilename: angularjs.py\n\nUsage:\n    {% ng Some.angular.scope.content %}\n\ne.g.\n    {% load angularjs %}\n    &lt;div ng-init=\"yourName = 'foobar'\"&gt;\n        &lt;p&gt;{% ng yourName %}&lt;/p&gt;\n    &lt;/div&gt;\n\"\"\"\n\nfrom django import template\n\nregister = template.Library()\n\nclass AngularJS(template.Node):\n    def __init__(self, bits):\n        self.ng = bits\n\n    def render(self, ctx):\n        return \"{{%s}}\" % \" \".join(self.ng[1:])\n\ndef do_angular(parser, token):\n    bits = token.split_contents()\n    return AngularJS(bits)\n\nregister.tag('ng', do_angular)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>If you use django 1.5 and newer use:</p>\n\n<pre><code>  {% verbatim %}\n    {{if dying}}Still alive.{{/if}}\n  {% endverbatim %}\n</code></pre>\n\n<p>If you are stuck with django 1.2 on appengine extend the django syntax with the verbatim template command like this ...</p>\n\n<pre><code>from django import template\n\nregister = template.Library()\n\nclass VerbatimNode(template.Node):\n\n    def __init__(self, text):\n        self.text = text\n\n    def render(self, context):\n        return self.text\n\n@register.tag\ndef verbatim(parser, token):\n    text = []\n    while 1:\n        token = parser.tokens.pop(0)\n        if token.contents == 'endverbatim':\n            break\n        if token.token_type == template.TOKEN_VAR:\n            text.append('{{')\n        elif token.token_type == template.TOKEN_BLOCK:\n            text.append('{%')\n        text.append(token.contents)\n        if token.token_type == template.TOKEN_VAR:\n            text.append('}}')\n        elif token.token_type == template.TOKEN_BLOCK:\n            text.append('%}')\n    return VerbatimNode(''.join(text))\n</code></pre>\n\n<p>In your file use:</p>\n\n<pre><code>from google.appengine.ext.webapp import template\ntemplate.register_template_library('utilities.verbatim_template_tag')\n</code></pre>\n\n<p>Source:\n<a href=\"http://bamboobig.blogspot.co.at/2011/09/notebook-using-jquery-templates-in.html\">http://bamboobig.blogspot.co.at/2011/09/notebook-using-jquery-templates-in.html</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If you did separate sections of page properly then you can easily use angularjs tags in \"raw\" tag scope.</p>\n\n<p>In jinja2</p>\n\n<pre><code>{% raw %}\n    // here you can write angularjs template tags.\n{% endraw %}\n</code></pre>\n\n<p>In Django template (above 1.5)</p>\n\n<pre><code>{% verbatim %}    \n    // here you can write angularjs template tags.\n{% endverbatim %}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I would stick with a solution that uses both django tags {{}} as well angularjs {{}} with a either a verbatim section or templatetag. </p>\n\n<p>That is simply because you can change the way angularjs works (as mentioned) via the $interpolateProvider.startSymbol $interpolateProvider.endSymbol but if you start to use other angularjs components like the ui-bootstrap you will find that some of the templates are ALREADY built with standard angularjs tags {{ }}. </p>\n\n<p>For example look at <a href=\"https://github.com/angular-ui/bootstrap/blob/master/template/dialog/message.html\" rel=\"nofollow\">https://github.com/angular-ui/bootstrap/blob/master/template/dialog/message.html</a>. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could always use ng-bind instead of {{ }} \n<a href=\"http://docs.angularjs.org/api/ng/directive/ngBind\">http://docs.angularjs.org/api/ng/directive/ngBind</a></p>\n\n<pre><code>&lt;span ng-bind=\"name\"&gt;&lt;/span&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>For AngularJS v1.3.3 you should define your own template tags like this</p>\n\n<p><strong>AngularJS module</strong></p>\n\n<pre><code>angular.module('myapp', []).config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{$');\n    $interpolateProvider.endSymbol('$}');\n});\n</code></pre>\n\n<p><strong>Webpage</strong></p>\n\n<pre><code>&lt;a&gt;{$ variable $}&lt;/a&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to use AngularJS with Django however they both use <code>{{ }}</code> as their template tags.  Is there an easy way to change one of the two to use some other custom templating tag?</p>\n",
            "last_activity_date": 1419786512,
            "question_id": 8302928,
            "score": 177,
            "tags": [
                "javascript",
                "django",
                "django-templates",
                "angularjs"
            ],
            "title": "AngularJS with Django - Conflicting template tags"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p><code>27</code> is the code for the escape key. :)</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Try with the <a href=\"http://docs.jquery.com/Events/keyup\">keyup event</a>:</p>\n\n<pre><code>$(document).keyup(function(e) {\n  if (e.keyCode == 13) $('.save').click();     // enter\n  if (e.keyCode == 27) $('.cancel').click();   // esc\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 546
                },
                {
                    "body": "<p>To get the hex code for all the characters: <a href=\"http://asciitable.com/\">http://asciitable.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Rather than hardcode the keycode values in your function, consider using named constants to better convey your meaning:</p>\n\n<pre><code>var KEYCODE_ENTER = 13;\nvar KEYCODE_ESC = 27;\n\n$(document).keyup(function(e) {\n  if (e.keyCode == KEYCODE_ENTER) $('.save').click();\n  if (e.keyCode == KEYCODE_ESC) $('.cancel').click();\n});\n</code></pre>\n\n<p>Some browsers (like FireFox, unsure of others) define a global <code>KeyEvent</code> object that exposes these types of constants for you. <a href=\"http://stackoverflow.com/questions/1465374/javascript-event-keycode-constants\">This SO question</a> shows a nice way of defining that object in other browsers as well.</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Your code works just fine. It's most likely the window thats not focused. I use a similar function to close iframe boxes etc.</p>\n\n<pre><code>$(document).ready(function(){\n\n    // Set focus\n    setTimeout('window.focus()',1000);\n\n});\n\n$(document).keypress(function(e) {\n\n    // Enable esc\n    if (e.keyCode == 27) {\n      parent.document.getElementById('iframediv').style.display='none';\n      parent.document.getElementById('iframe').src='/views/view.empty.black.html';\n    }\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I'm was trying to do the same thing and it was bugging the crap out of me.  In firefox, it appears that if you try to do some things when the escape key is pressed, it continues processing the escape key which then cancels whatever you were trying to do.  Alert works fine.  But in my case, I wanted to go back in the history which did not work.  Finally figured out that I had to force the propagation of the event to stop as shown below...</p>\n\n<pre><code>if (keyCode == 27)\n{\n    history.back();\n\n    if (window.event)\n    {\n        // IE works fine anyways so this isn't really needed\n        e.cancelBubble = true;\n        e.returnValue = false;\n    }\n    else if (e.stopPropagation)\n    {\n        // In firefox, this is what keeps the escape key from canceling the history.back()\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    return (false);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Try the <a href=\"https://github.com/frosten/jescape\" rel=\"nofollow\">jEscape</a> plugin (<a href=\"https://drive.google.com/file/d/0B9rwXXmf8QutUWM5a3J4SHQ2TFk/edit?usp=sharing\" rel=\"nofollow\">download from google drive</a>)</p>\n\n<pre><code>$(document).escape(function() { \n   alert('ESC button pressed'); \n});\n</code></pre>\n\n<p>or get keycode for cross browser</p>\n\n<pre><code>var code = (e.keyCode ? e.keyCode : e.which);\nif (code === 27) alert('ESC');\nif (code === 13) alert('ENTER');\n</code></pre>\n\n<p>maybe you can use switch </p>\n\n<pre><code>var code = (e.keyCode ? e.keyCode : e.which);\nswitch (code) {\n    case 27:\n       alert('ESC');\n       break;\n     case 13:\n       alert('ENTER');\n       break;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I have always used keyup and e.which to catch escape key.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To find the keycode for any key, use this simple function:</p>\n\n<pre><code>document.onkeydown = function(evt) {\n    console.log(evt.keyCode);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>i had similar problem in my jQuery code. i was not able to catch ESCAPE key since I was using keypress to bind it and event.which to catch it. Now, after using keyup to bind it and event.keyCode to catch ESCAPE, it works fine</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To explain where other answers haven't; the problem is your use of <code>keypress</code>.</p>\n\n<p>Perhaps the event is just mis-named but <code>keypress</code> is defined to fire when <code>when an actual</code><strong><code>character</code></strong><code>is being inserted</code>. I.e. text.<br/>\nWhereas what you want is <code>keydown</code>/<code>keyup</code>, which fires whenever (before or after, respectively) <code>the user depresses a</code><strong><code>key</code></strong>. I.e. those things on the keyboard.</p>\n\n<p>The difference appears here because <code>esc</code> is a <a href=\"http://en.wikipedia.org/wiki/Control_character\" rel=\"nofollow\">control character</a> (literally 'non-printing character') and so doesn't write any text, thus not even firing <code>keypress</code>.<br/>\n<code>enter</code> is weird, because even though you are using it as a control character (i.e. to control the UI), it is still inserting a new-line character, which will fire <code>keypress</code>.</p>\n\n<p>Source: <a href=\"http://www.quirksmode.org/dom/events/keys.html\" rel=\"nofollow\">quirksmode</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Your best bet is </p>\n\n<pre><code>$(document).keyup(function(e) { \n    if (e.which === 13) $('.save').click();   // enter \n    if (e.which === 27) $('.cancel').click(); // esc   \n\n    /* OPTIONAL: Only if you want other elements to ignore event */\n    e.preventDefault();\n    e.stopPropagation();\n});\n</code></pre>\n\n<p><strong>Summary</strong></p>\n\n<ul>\n<li><code>which</code> is more preferable than <code>keyCode</code> because it is normalized</li>\n<li><code>keyup</code> is more preferable than <code>keydown</code> because keydown may occur multiple times if user keeps it pressed.</li>\n<li>Do not use <code>keypress</code> unless you want to capture actual characters.</li>\n</ul>\n\n<p>Interestingly Bootstrap uses keydown and keyCode in its dropdown component (as of 3.0.2)! I think it's probably poor choice there.</p>\n\n<p><strong>Related snippet from JQuery doc</strong></p>\n\n<blockquote>\n  <p>While browsers use differing\n  properties to store this information, jQuery normalizes the .which\n  property so you can reliably use it to retrieve the key code. This\n  code corresponds to a key on the keyboard, including codes for special\n  keys such as arrows. For catching actual text entry, .keypress() may\n  be a better choice.</p>\n</blockquote>\n\n<p>Other item of interest: <a href=\"http://dmauro.github.io/Keypress/\" rel=\"nofollow\">JavaScript Keypress Library</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I know this question is asking about jquery, but for those people using jqueryui, there are constants for many of the keycodes:</p>\n\n<pre><code>$.ui.keyCode.ESCAPE\n</code></pre>\n\n<p><a href=\"http://api.jqueryui.com/jQuery.ui.keyCode/\" rel=\"nofollow\">http://api.jqueryui.com/jQuery.ui.keyCode/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>(Answer extracted from my <a href=\"http://stackoverflow.com/questions/1160008/which-keycode-for-escape-key-with-jquery/28502629#comment2864759_1160109\">previous comment</a>)</p>\n\n<p>You need to use <code>keyup</code> rather than <code>keypress</code>.  e.g.:</p>\n\n<pre><code>$(document).keyup(function(e) {\n  if (e.which == 13) $('.save').click();     // enter\n  if (e.which == 27) $('.cancel').click();   // esc\n});\n</code></pre>\n\n<p><code>keypress</code> doesn't seem to be handled consistently between browsers (try out the demo at <a href=\"http://api.jquery.com/keypress\" rel=\"nofollow\">http://api.jquery.com/keypress</a> in IE vs Chrome vs Firefox. Sometimes <code>keypress</code> doesn't register, and the values for both 'which' and 'keyCode' vary) whereas <code>keyup</code> is consistent.</p>\n\n<p>Since there was some discussion of <code>e.which</code> vs <code>e.keyCode</code>:  Note that <code>e.which</code> is the jquery-normalized value and is the one recommended for use:</p>\n\n<blockquote>\n  <p>The event.which property normalizes event.keyCode and event.charCode. It is recommended to watch event.which for keyboard key input.</p>\n</blockquote>\n\n<p>(from <a href=\"http://api.jquery.com/event.which/\" rel=\"nofollow\">http://api.jquery.com/event.which/</a>)</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have two functions.  When enter is pressed the functions runs correctly but when escape is pressed it doesn't. What's the correct number for the escape key?  </p>\n\n<pre><code>$(document).keypress(function(e) { \n    if (e.which == 13) $('.save').click();   // enter (works as expected)\n    if (e.which == 27) $('.cancel').click(); // esc   (does not work)\n});\n</code></pre>\n",
            "last_activity_date": 1424450782,
            "question_id": 1160008,
            "score": 306,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Which keycode for escape key with jQuery"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>As far as I know a common solution is to add a ?&lt;version&gt; to the script src link.</p>\n\n<p>For instance:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"myfile.js?1500\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><hr></p>\n\n<blockquote>\n  <p>I assume at this point that there isn't a better way than find-replace to increment these \"version numbers\" in all of the script tags?</p>\n</blockquote>\n\n<p>You might have a version control system do that for you? Most version control systems have a way to automatically inject the revision number on check-in for instance.</p>\n\n<p>It would look something like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"myfile.js?$$REVISION$$\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><hr></p>\n\n<p>Of course, there are always better solutions like <a href=\"http://blog.greenfelt.net/2009/09/01/caching-javascript-safely/\">this one</a>.</p>\n",
                    "is_accepted": true,
                    "score": 156
                },
                {
                    "body": "<p>My colleague just found a reference to that method right after I posted (in reference to css) at <a href=\"http://www.stefanhayden.com/blog/2006/04/03/css-caching-hack/\" rel=\"nofollow\">http://www.stefanhayden.com/blog/2006/04/03/css-caching-hack/</a>.  Good to see that others are using it and it seems to work.  I assume at this point that there isn't a better way than find-replace to increment these \"version numbers\" in all of the script tags?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>One solution is to append a query string with a timestamp in it to the URL when fetching the resource. This takes advantage of the fact that a browser will not cache resources fetched from URLs with query strings in them.</p>\n\n<p>You probably don't want the browser not to cache these resources at all though; it's more likely that you want them cached, but you want the browser to fetch a new version of the file when it is made available.</p>\n\n<p>The most common solution seems to be to embed a timestamp or revision number in the file name itself. This is a little more work, because your code needs to be modified to request the correct files, but it means that, e.g. version 7 of your <code>snazzy_javascript_file.js</code> (i.e. <code>snazzy_javascript_file_7.js</code>) is cached on the browser until you release version 8, and then your code changes to fetch <code>snazzy_javascript_file_8.js</code> instead.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simplest solution?  Don't let the browser cache at all.  Append the current time (in ms) as a query.</p>\n\n<p>(You are still in beta, so you could make a reasonable case for not optimizing for performance.  But YMMV here.)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're generating the page that links to the JS files a simple solution is appending the file's last modification timestamp to the generated links. </p>\n\n<p>This is very similar to Huppie's answer, but works in version control systems without keyword substitution. It's also better than append the current time, since that would prevent caching even when the file didn't change at all.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Appending the current time to the URL is indeed a common solution. However, you can also manage this at the web server level, if you want to. The server can be configured to send different HTTP headers for javascript files. </p>\n\n<p>For example, to force the file to be cached for no longer than 1 day, you would send:</p>\n\n<pre><code>Cache-Control: max-age=86400, must-revalidate\n</code></pre>\n\n<p>For beta, if you want to force the user to always get the latest, you would use:</p>\n\n<pre><code>Cache-Control: no-cache, must-revalidate\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Not all browsers cache files with '?' in it. What I did to make sure it was cached as much as possible, I included the version in the filename. </p>\n\n<p>So instead of stuff.js?123, I did stuff_123.js </p>\n\n<p>I used mod_redirect(I think) in apache to to have stuff_*.js to go stuff.js</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The advantage of using a <code>file.js?V=1</code> over a <code>fileV1.js</code> is that you do not need to store multiple versions of the JavaScript files on the server.</p>\n\n<p>The trouble I see with <code>file.js?V=1</code> is that you may have dependant code in another JavaScript file that breaks when using the new version of the library utilities.</p>\n\n<p>For the sake of backwards compatibility, I think it is much better to use <code>jQuery.1.3.js</code> for your new pages and let existing pages use <code>jQuery.1.1.js</code>, until you are ready to upgrade the older pages, if necessary.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use a version <code>GET</code> variable to prevent browser caching.</p>\n\n<p>Appending <code>?v=AUTO_INCREMENT_VERSION</code> to the end of your url prevents browser caching - avoiding any and all cached scripts.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Google Page-Speed: Don't include a query string in the URL for static resources.\nMost proxies, most notably Squid up through version 3.0, do not cache resources with a \"?\" in their URL even if a Cache-control: public header is present in the response. To enable proxy caching for these resources, remove query strings from references to static resources, and instead encode the parameters into the file names themselves. </p>\n\n<p>In this case, you can include the version into URL ex: <a href=\"http://abc.com/\">http://abc.com/</a><strong>v1.2</strong>/script.js and use apache mod_rewrite to redirect the link to <a href=\"http://abc.com/script.js\">http://abc.com/script.js</a>. When you change the version, client browser will update the new file.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Athough it is framework specific, Django 1.4 has <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#django.contrib.staticfiles.storage.CachedStaticFilesStorage\" rel=\"nofollow\" title=\"this functionality\">this functionailty</a> which works in a similar fashion to the link to the 'greenfelt' site in the <a href=\"http://stackoverflow.com/a/32427/110226\">above answer</a> </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>in php:</p>\n\n<p><code>function latest_version($file_name){\n    echo $file_name.\"?\".filemtime($_SERVER['DOCUMENT_ROOT'] .$file_name);\n}</code></p>\n\n<p>in html:</p>\n\n<pre><code>&lt; script type=\"text/javascript\" src=\"&lt; ?php latest_version('/a-o/javascript/almanacka.js'); ? &gt;\"&gt;&lt; /script&gt;\n</code></pre>\n\n<p><code>enter code here</code>how it works:\nIn html, write the filepath and name as you wold do, but in the function only.\nPhp gets the filetime of the file and returns the filepath+name+\"?\"+time of latest change </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For ASP.NET I suppose next solution with advanced options (debug/release mode, versions):</p>\n\n<p>Js or Css files included by such way:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;\" /&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Css/exampleCss&lt;%=Global.CssPostfix%&gt;\" /&gt;\n</code></pre>\n\n<p>Global.JsPostfix and Global.CssPostfix is calculated by the following way in Global.asax:</p>\n\n<pre><code>protected void Application_Start(object sender, EventArgs e)\n{\n    ...\n    string jsVersion = ConfigurationManager.AppSettings[\"JsVersion\"];\n    bool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[\"UpdateJsEveryAppStart\"]);\n    int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\n    JsPostfix = \"\";\n#if !DEBUG\n    JsPostfix += \".min\";\n#endif      \n    JsPostfix += \".js?\" + jsVersion + \"_\" + buildNumber;\n    if (updateEveryAppStart)\n    {\n        Random rand = new Random();\n        JsPosfix += \"_\" + rand.Next();\n    }\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For ASP.NET pages I am using the following</p>\n\n<p><strong>BEFORE</strong></p>\n\n<pre><code>&lt;script src=\"/Scripts/pages/common.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><strong>AFTER (force reload)</strong></p>\n\n<pre><code>&lt;script src=\"/Scripts/pages/common.js?ver&lt;%=DateTime.Now.Ticks.ToString()%&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Adding the DateTime.Now.Ticks works very well.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This answer is only 6 years late, but I don't see this answer in many places... HTML5 has introduced <a href=\"http://www.w3schools.com/html/html5_app_cache.asp\">Application Cache</a> which is used to solve this problem. I was finding that new server code I was writing was crashing old javascript stored in people's browsers, so I wanted to find a way to expire their javascript. Use a manifest file that looks like this:</p>\n\n<pre><code>CACHE MANIFEST\n# Aug 14, 2014\n/mycode.js\n\nNETWORK:\n*\n</code></pre>\n\n<p>and generate this file with a new time stamp every time you want users to update their cache. As a side note, if you add this, the browser will <em>not</em> reload (even when a user refreshes the page) until the manifest tells it to.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>We are currently working in a private beta and so are still in the process of making fairly rapid changes, although obviously as usage is starting to ramp up, we will be slowing down this process.  That being said, one issue we are running into is that after we push out an update with new JavaScript files, the client browsers still use the cached version of the file and they do not see the update.  Obviously, on a support call, we can simply inform them to do a <kbd>ctrl</kbd><kbd>F5</kbd> refresh to ensure that they get the up-to-date files from the server, but it would be preferable to handle this before that time.</p>\n\n<p>Our current thought is to simply attach a version number onto the name of the JavaScript files and then when changes are made, increment the version on the script and update all references.  This definitely gets the job done, but updating the references on each release could get cumbersome.</p>\n\n<p>As I'm sure we're not the first ones to deal with this, I figured I would throw it out to the community.  How are you ensuring clients update their cache when you update your code?  If you're using the method described above, are you using a process that simplifies the change?</p>\n",
            "last_activity_date": 1409665717,
            "question_id": 32414,
            "score": 168,
            "tags": [
                "javascript",
                "caching",
                "versioning"
            ],
            "title": "How can I force clients to refresh JavaScript files?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>I haven't attempted this myself, so its just an idea... but have you tried using media queries with CSS to see when the height of the window changes and then change the design for that?  I would imagine that Safari mobile isn't recognizing the keyboard as part of the window so that would hopefully work.</p>\n\n<p>Example:</p>\n\n<pre><code>@media all and (height: 200px){\n    #content {height: 100px; overflow: hidden;}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If there is an on-screen keyboard, focusing a text field that is near the bottom of the viewport will cause Safari to scroll the text field into view.  There might be some way to exploit this phenomenon to detect the presence of the keyboard (having a tiny text field at the bottom of the page which gains focus momentarily, or something like that).</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Well, you can detect when your input boxes have the focus, and you know the height of the keyboard.  There is also CSS available to get the orientation of the screen, so I think you can hack it.</p>\n\n<p>You would want to handle the case of a physical keyboard somehow, though. </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I did some searching, and I couldn't find anything concrete for a \"on keyboard shown\" or \"on keyboard dismissed\".  See <a href=\"http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW5\" rel=\"nofollow\">the official list of supported events</a>. Also see <a href=\"http://developer.apple.com/safari/library/technotes/tn2010/tn2262.html\" rel=\"nofollow\">Technical Note TN2262</a> for iPad.  As you probably already know, there is a body event <code>onorientationchange</code> you can wire up to detect landscape/portrait.</p>\n\n<p>Similarly, but a wild guess... have you tried detecting resize?  Viewport changes may trigger that event indirectly from the keyboard being shown / hidden.</p>\n\n<pre><code>window.addEventListener('resize', function() { alert(window.innerHeight); });\n</code></pre>\n\n<p>Which would simply alert the new height on any resize event....</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found a solution which works, although it is a bit ugly. It also won't work in every situation, but it works for me. Since I'm adapting the size of the user interface to the iPad's window size, the user is normally unable to scroll. In other words, if I set the window's scrollTop, it will remain at 0.</p>\n\n<p>If, on the other hand, the keyboard is shown, scrolling suddenly works. So I can set scrollTop, immediately test its value, and then reset it. Here's how that might look in code, using jQuery:</p>\n\n<pre><code>$(document).ready(function(){\n    $('input').bind('focus',function() {\n        $(window).scrollTop(10);\n        var keyboard_shown = $(window).scrollTop() &gt; 0;\n        $(window).scrollTop(0);\n\n        $('#test').append(keyboard_shown?'keyboard ':'nokeyboard ');\n    });\n});\n</code></pre>\n\n<p>Normally, you would expect this to not be visible to the user. Unfortunately, at least when running in the Simulator, the iPad visibly (though quickly) scrolls up and down again. Still, it works, at least in some specific situations.</p>\n\n<p>I've tested this on an iPad, and it seems to work fine.</p>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<p>maybe a slightly better solution is to bind (with jQuery in my case) the \"blur\" event on the various input fields.</p>\n\n<p>This because when the keyboard disappear all form fields are blurred.\nSo for my situation this snipped solved the problem.</p>\n\n<pre><code>$('input, textarea').bind('blur', function(e) {\n\n       // Keyboard disappeared\n       window.scrollTo(0, 1);\n\n});\n</code></pre>\n\n<p>hope it helps.\nMichele</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Edit: answer presumes onscreen keyboard, not external keyboard. Leaving it because info may be useful to others that only care about onscreen keyboards. Use <a href=\"http://jsbin.com/AbimiQup/4\" rel=\"nofollow\">http://jsbin.com/AbimiQup/4</a> to view page params.</p>\n\n<p>We test to see if the <code>document.activeElement</code> is an element which shows the keyboard (input type=text, textarea, etc). Tested works on iOS5, Chrome Mobile (Beta May 2012) and Android (ICS) and Opera (doesnt work because Opera keeps focus on element after keyboard closed).</p>\n\n<p>I think it fails under some circumstances (iOS give focus to input, go to home screen, then come back to page?) but it works well enough for what we do.</p>\n\n<p>The following code fudges things for our purposes (although not generally correct).</p>\n\n<pre><code>function getViewport() {    // Note viewport sizing broken in Android 2.x see http://stackoverflow.com/questions/6601881/problem-with-meta-viewport-and-android\n    var viewport = {\n            left: window.pageXOffset || documentElement.scrollLeft || 0,    // http://www.quirksmode.org/mobile/tableViewport.html\n            top: window.pageYOffset || documentElement.scrollTop || 0,\n            width: window.innerWidth || documentElement.clientWidth,\n            height: window.innerHeight || documentElement.clientHeight\n    };\n    if (isTouchDevice &amp;&amp; isInput(getActiveElement())) {     // iOS *lies* about viewport size when keyboard is visible. See http://stackoverflow.com/questions/2593139/ipad-web-app-detect-virtual-keyboard-using-javascript-in-safari Input focus/blur can indicate, also scrollTop: \n        return {\n            left: viewport.left,\n            top: viewport.top,\n            width: viewport.width,\n            height: viewport.height * (viewport.height &gt; viewport.width ? 0.66 : 0.45)  // Fudge factor to allow for keyboard on iPad\n        };\n    }\n    return viewport;\n}\n\n\nfunction isInput(el) {\n    var tagName = el &amp;&amp; el.tagName &amp;&amp; el.tagName.toLowerCase();\n    return (tagName == 'input' &amp;&amp; el.type != 'button' &amp;&amp; el.type != 'radio' &amp;&amp; el.type != 'checkbox') || (tagName == 'textarea');\n};\n\nfunction getActiveElement() {\n    try {\n        return document.activeElement;  // can get exeption in IE8\n    } catch(e) {\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Only tested on Android 4.1.1:</p>\n\n<p>blur event is not a reliable event to test keyboard up and down because the user as the option to explicitly hide the keyboard which does not trigger a blur event on the field that caused the keyboard to show.</p>\n\n<p>resize event however works like a charm if the keyboard comes up or down for any reason.</p>\n\n<p>coffee: </p>\n\n<pre><code>$(window).bind \"resize\", (event) -&gt;  alert \"resize\"\n</code></pre>\n\n<p>fires on anytime the keyboard is shown or hidden for any reason.</p>\n\n<p>Note however on in the case of an android browser (rather than app) there is a retractable url bar which does not fire resize when it is retracted yet does change the available window size.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This solution remembers the scroll position </p>\n\n<pre><code>    var currentscroll = 0;\n\n    $('input').bind('focus',function() {\n        currentscroll = $(window).scrollTop();\n    });\n\n    $('input').bind('blur',function() {\n        if(currentscroll != $(window).scrollTop()){\n\n        $(window).scrollTop(currentscroll);\n\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>During the focus event you can scroll past the document height and magically the window.innerHeight is reduced by the height of the virtual keyboard. Note that the size of the virtual keyboard is different for landscape vs. portrait orientations so you'll need to redetect it when it changes. I would advise against remembering these values as the user could connect/disconnect a bluetooth keyboard at any time.</p>\n\n<pre><code>var element = document.getElementById(\"element\"); // the input field\nvar focused = false;\n\nvar virtualKeyboardHeight = function () {\n    var sx = document.body.scrollLeft, sy = document.body.scrollTop;\n    var naturalHeight = window.innerHeight;\n    window.scrollTo(sx, document.body.scrollHeight);\n    var keyboardHeight = naturalHeight - window.innerHeight;\n    window.scrollTo(sx, sy);\n    return keyboardHeight;\n};\n\nelement.onfocus = function () {\n    focused = true;\n    setTimeout(function() { \n        element.value = \"keyboardHeight = \" + virtualKeyboardHeight() \n    }, 1); // to allow for orientation scrolling\n};\n\nwindow.onresize = function () {\n    if (focused) {\n        element.value = \"keyboardHeight = \" + virtualKeyboardHeight();\n    }\n};\n\nelement.onblur = function () {\n    focused = false;\n};\n</code></pre>\n\n<p>Note that when the user is using a bluetooth keyboard, the keyboardHeight is 44 which is the height of the [previous][next] toolbar.</p>\n\n<p>There is a tiny bit of flicker when you do this detection, but it doesn't seem possible to avoid it.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can use the <em>focusout</em> event to detect keyboard dismissal. It's like blur, but bubbles. It will fire when the keyboard closes (but also in other cases, of course). In Safari and Chrome the event can only be registered with addEventListener, not with legacy methods. Here is an example I used to restore a Phonegap app after keyboard dismissal. </p>\n\n<pre><code> document.addEventListener('focusout', function(e) {window.scrollTo(0, 0)});\n</code></pre>\n\n<p>Without this snippet, the app container stayed in the up-scrolled position until page refresh.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>4 years too late, but I'll chime in because I've been wrestling with this recently.</p>\n\n<p>The problem is that, even in 2014, devices handle screen resize events, as well as scroll events, inconsistently while the soft keyboard is open.</p>\n\n<p>I've found that, even if you're using a bluetooth keyboard, iOS in particular triggers some strange layout bugs; so instead of detecting a soft keyboard, I've just had to target devices that are very narrow and have touchscreens.</p>\n\n<p>I use media queries (or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.matchMedia\" rel=\"nofollow\">window.matchMedia</a>) for width detection and <a href=\"http://modernizr.com/download/#-touch-shiv-cssclasses-teststyles-prefixes-load\" rel=\"nofollow\">Modernizr</a> for touch event detection.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this one:</p>\n\n<pre><code>var lastfoucsin;\n\n$('.txtclassname').click(function(e)\n{\n  lastfoucsin=$(this);\n\n//the virtual keyboard appears automatically\n\n//Do your stuff;\n\n});\n\n\n//to check ipad virtual keyboard appearance. \n//First check last focus class and close the virtual keyboard.In second click it closes the wrapper &amp; lable\n\n$(\".wrapperclass\").click(function(e)\n{\n\nif(lastfoucsin.hasClass('txtclassname'))\n{\n\nlastfoucsin=$(this);//to avoid error\n\nreturn;\n\n}\n\n//Do your stuff \n$(this).css('display','none');\n});`enter code here`\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Instead of detecting the keyboard, try to detect the size of the window</p>\n\n<p>If the height of the window was reduced, and the width is still the same, it means that the keyboard is on.\nElse the keyboard is off, you can also add to that, test if any input field is on focus or not.</p>\n\n<p>Try this code for example.</p>\n\n<pre><code>var last_h = $(window).height(); //  store the intial height.\nvar last_w = $(window).width(); //  store the intial width.\nvar keyboard_is_on = false;\n$(window).resize(function () {\n    if ($(\"input\").is(\":focus\")) {\n        keyboard_is_on =\n               ((last_w == $(window).width()) &amp;&amp; (last_h &gt; $(window).height()));\n    }   \n});     \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm writing a web app for the iPad (<strong>not a regular App Store app</strong> - it's written using HTML, CSS and JavaScript). Since the keyboard fills up a huge part of the screen, it would make sense to change the app's layout to fit the remaining space when the keyboard is shown. However, I have found no way to detect when or whether the keyboard is shown.</p>\n\n<p>My first idea was to assume that the keyboard is visible when a text field has focus. However, when an external keyboard is attached to an iPad, the virtual keyboard does not show up when a text field receives focus.</p>\n\n<p>In my experiments, the keyboard also did not affect the height or scrollheight of any of the DOM elements, and I have found no proprietary events or properties which indicate whether the keyboard is visible.</p>\n",
            "last_activity_date": 1410360089,
            "question_id": 2593139,
            "score": 82,
            "tags": [
                "javascript",
                "iphone",
                "ipad",
                "safari",
                "web-applications"
            ],
            "title": "iPad Web App: Detect Virtual Keyboard Using JavaScript in Safari?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>try it like this:</p>\n\n<pre><code>function popupwindow(url, title, w, h) {\n  var left = (screen.width/2)-(w/2);\n  var top = (screen.height/2)-(h/2);\n  return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width='+w+', height='+h+', top='+top+', left='+left);\n} \n</code></pre>\n",
                    "is_accepted": true,
                    "score": 218
                },
                {
                    "body": "<p>Source: <a href=\"http://www.nigraphic.com/blog/java-script/how-open-new-window-popup-center-screen\">http://www.nigraphic.com/blog/java-script/how-open-new-window-popup-center-screen</a></p>\n\n<pre><code>function PopupCenter(pageURL, title,w,h) {\n  var left = (screen.width/2)-(w/2);\n  var top = (screen.height/2)-(h/2);\n  var targetWin = window.open (pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width='+w+', height='+h+', top='+top+', left='+left);\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>It works very well in Firefox.<br>\nJust change the top variable to any other name and try again</p>\n\n<pre><code>        var w = 200;\n        var h = 200;\n        var left = Number((screen.width/2)-(w/2));\n        var tops = Number((screen.height/2)-(h/2));\n\nwindow.open(\"templates/sales/index.php?go=new_sale\", '', 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width='+w+', height='+h+', top='+tops+', left='+left);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>My recommendation is to use top location 33% or 25% from remaining space, <br>and not 50% as other examples posted here, <br>\nmainly because of the <strong>window header</strong>,<br>\nwhich look better and more comfort to the user, <br><br></p>\n\n<p><b>complete code:</b>\n    \n    \n    \n        </p>\n\n<pre><code>    &lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n        function OpenPopupCenter(pageURL, title, w, h) {\n            var left = (screen.width - w) / 2;\n            var top = (screen.height - h) / 4;  // for 25% - devide by 4  |  for 33% - devide by 3\n            var targetWin = window.open(pageURL, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);\n        } \n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button onclick=\"OpenPopupCenter('http://www.google.com', 'TEST!?', 800, 600);\"&gt;click on me&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><br><br>\ncheck out this line:<br>\n<strong>var top = (screen.height - h) / 4;  // for 25% - devide by 4  |  for 33% - devide by 3</strong></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>SINGLE/DUAL MONITOR FUNCTION</strong> (credit to <a href=\"http://www.xtf.dk\">http://www.xtf.dk</a> - thank you!)</p>\n\n<p><em>UPDATE: It will also work on windows that aren't maxed out to the screen's width and height now thanks to @Frost!</em></p>\n\n<p>If you're on dual monitor, the window will center horizontally, but not vertically... use this function to account for that.</p>\n\n<pre><code>function PopupCenter(url, title, w, h) {\n    // Fixes dual-screen position                         Most browsers      Firefox\n    var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;\n    var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;\n\n    width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;\n    height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;\n\n    var left = ((width / 2) - (w / 2)) + dualScreenLeft;\n    var top = ((height / 2) - (h / 2)) + dualScreenTop;\n    var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);\n\n    // Puts focus on the newWindow\n    if (window.focus) {\n        newWindow.focus();\n    }\n}\n</code></pre>\n\n<p>Usage Example:</p>\n\n<pre><code>PopupCenter('http://www.xtf.dk','xtf','900','500');  \n</code></pre>\n\n<p><strong>CREDIT GOES TO: <a href=\"http://www.xtf.dk/2011/08/center-new-popup-window-even-on.html\">http://www.xtf.dk/2011/08/center-new-popup-window-even-on.html</a></strong> (I wanted to just link out to this page but just in case this website goes down the code is here on SO, cheers!)</p>\n",
                    "is_accepted": false,
                    "score": 94
                }
            ],
            "body": "<p>How can we center a popup window opened via javascript <code>window.open</code> function on the center of screen variable to the currently selected screen resolution ?</p>\n",
            "last_activity_date": 1392060603,
            "question_id": 4068373,
            "score": 110,
            "tags": [
                "javascript"
            ],
            "title": "Center a popup window on screen?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>This is no longer possible. GitHub has explicitly disabled JavaScript hotlinking, and newer versions of browsers respect that setting.</p>\n\n<p><a href=\"https://github.com/blog/1482-\">https://github.com/blog/1482-</a></p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>There <em>is</em> a good workaround for this, now, by using <a href=\"http://rawgit.com\">rawgit.com</a>.</p>\n\n<p><strong>Steps:</strong></p>\n\n<ol>\n<li>Find your link on GitHub, and click to the \"Raw\" version of the file.</li>\n<li>Copy the URL, and link to it.</li>\n<li>Change <code>raw.github.com</code> to <code>rawgit.com</code> (non-production) or <code>cdn.rawgit.com</code> (production)</li>\n</ol>\n\n<p><strong>Example:</strong> <code>http://raw.github.com/user/repo/branch/file.js</code></p>\n\n<p>For non-production environments, such as jsFiddle, replace <code>raw.github.com</code> with <code>rawgit.com</code>:</p>\n\n<pre><code>http://rawgit.com/user/repo/branch/file.js\n</code></pre>\n\n<p>For production environments, replace <code>raw.github.com</code> with <code>cdn.rawgit.com</code>:</p>\n\n<pre><code>http://cdn.rawgit.com/user/repo/tag/file.js\n</code></pre>\n\n<p>Also note that for production environments, consider targeting a specific <code>tag</code> - not the <code>branch</code>, to ensure you're getting the specific version of the file that you expect, rather than the <code>head</code> version, which will change over time.</p>\n\n<hr>\n\n<p><strong>Why is this needed?</strong> </p>\n\n<p>GitHub started using <code>X-Content-Type-Options: nosniff</code>, which instructs more modern browsers to enforce strict MIME type checking. It then returns the raw files in a MIME type returned by the server - preventing the browser from using the file as-intended (if the browser honors the setting).</p>\n\n<p>For background on this topic, please refer to <a href=\"https://code.google.com/p/chromium/issues/detail?id=180007\">this discussion thread</a>.</p>\n",
                    "is_accepted": true,
                    "score": 267
                },
                {
                    "body": "<p><code>rawgithub.com</code> redirects to <code>rawgit.com</code> So the above example would now be</p>\n\n<p><code>http://rawgit.com/user/package/master/link.min.js</code></p>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>When I try to change the linked reference of a local JavaScript file to a GitHub raw version my test file stops working. The error is: </p>\n\n<blockquote>\n  <p>Refused to execute script from ... because its MIME type (<code>text/plain</code>) is not executable, and strict MIME type checking is enabled. </p>\n</blockquote>\n\n<p>Is there a way to disable this behavior or is there a service that allows linking to GitHub raw files?</p>\n\n<p>Working code:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"bootstrap-wysiwyg.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Non-working code:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"https://raw.github.com/mindmup/bootstrap-wysiwyg/master/bootstrap-wysiwyg.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1414166464,
            "question_id": 17341122,
            "score": 132,
            "tags": [
                "javascript",
                "github"
            ],
            "title": "Link and execute external JavaScript file hosted on GitHub"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>You don't have to <code>open</code> the file, but instead, you have to create a <code>ReadStream</code>.</p>\n\n<p><a href=\"http://nodejs.org/docs/v0.4.8/api/all.html#fs.createReadStream\"><code>fs.createReadStream</code></a></p>\n\n<p>Then pass that stream to <code>Lazy</code></p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>With the <a href=\"https://npmjs.org/package/carrier\" rel=\"nofollow\">carrier module</a>:</p>\n\n<pre><code>var carrier = require('carrier');\n\nprocess.stdin.resume();\ncarrier.carry(process.stdin, function(line) {\n    console.log('got one line: ' + line);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I ended up with a massive, massive memory leak using Lazy to read line by line when trying to then process those lines and write them to another stream due to the way drain/pause/resume in node works (see: <a href=\"http://elegantcode.com/2011/04/06/taking-baby-steps-with-node-js-pumping-data-between-streams/\">http://elegantcode.com/2011/04/06/taking-baby-steps-with-node-js-pumping-data-between-streams/</a> (i love this guy btw)). I haven't looked closely enough at Lazy to understand exactly why, but I couldn't pause my read stream to allow for a drain without Lazy exiting.</p>\n\n<p>I wrote the code to process massive csv files into xml docs, you can see the code here: <a href=\"https://github.com/j03m/node-csv2xml\">https://github.com/j03m/node-csv2xml</a></p>\n\n<p>If you run the previous revisions with Lazy line it leaks. The latest revision doesn't leak at all and you can probably use it as the basis for a reader/processor. Though I have some custom stuff in there. </p>\n\n<p>Edit: I guess I should also note that my code with Lazy worked fine until I found myself writing large enough xml fragments that drain/pause/resume because a necessity. For smaller chunks it was fine.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>function createLineReader(fileName){\n    var EM = require(\"events\").EventEmitter\n    var ev = new EM()\n    var stream = require(\"fs\").createReadStream(fileName)\n    var remainder = null;\n    stream.on(\"data\",function(data){\n        if(remainder != null){//append newly received data chunk\n            var tmp = new Buffer(remainder.length+data.length)\n            remainder.copy(tmp)\n            data.copy(tmp,remainder.length)\n            data = tmp;\n        }\n        var start = 0;\n        for(var i=0; i&lt;data.length; i++){\n            if(data[i] == 10){ //\\n new line\n                var line = data.slice(start,i)\n                ev.emit(\"line\", line)\n                start = i+1;\n            }\n        }\n        if(start&lt;data.length){\n            remainder = data.slice(start);\n        }else{\n            remainder = null;\n        }\n    })\n\n    stream.on(\"end\",function(){\n        if(null!=remainder) ev.emit(\"line\",remainder)\n    })\n\n    return ev\n}\n\n\n//---------main---------------\nfileName = process.argv[2]\n\nlineReader = createLineReader(fileName)\nlineReader.on(\"line\",function(line){\n    console.log(line.toString())\n    //console.log(\"++++++++++++++++++++\")\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Edit:</p>\n\n<p>Use a <a href=\"http://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/\" rel=\"nofollow\">transform stream</a>.</p>\n\n<hr>\n\n<p>With a <a href=\"https://github.com/Gagle/Node-BufferedReader\" rel=\"nofollow\">BufferedReader</a> you can read lines.</p>\n\n<pre><code>new BufferedReader (\"lorem ipsum\", { encoding: \"utf8\" })\n    .on (\"error\", function (error){\n        console.log (\"error: \" + error);\n    })\n    .on (\"line\", function (line){\n        console.log (\"line: \" + line);\n    })\n    .on (\"end\", function (){\n        console.log (\"EOF\");\n    })\n    .read ();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>there is a very nice module for reading a file line by line, it's called line-reader</p>\n\n<p><a href=\"https://github.com/nickewing/line-reader\">https://github.com/nickewing/line-reader</a></p>\n\n<p>with it you simply just write:</p>\n\n<pre><code>var lineReader = require('line-reader');\n\nlineReader.eachLine('file.txt', function(line, last) {\n  console.log(line);\n  // do whatever you want with line...\n  if(last){\n    // or check if it's the last one\n  }\n});\n</code></pre>\n\n<p>you can even iterate the file with a \"java-style\" interface, if you need more control:</p>\n\n<pre><code>lineReader.open('file.txt', function(reader) {\n  if (reader.hasNextLine()) {\n    reader.nextLine(function(line) {\n      console.log(line);\n    });\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>You can always roll your own line reader. I have'nt benchmarked this snippet yet, but it correctly splits the incoming stream of chunks into lines without the trailing '\\n'</p>\n\n<pre><code>var last = \"\";\n\nprocess.stdin.on('data', function(chunk) {\n    var lines, i;\n\n    lines = (last+chunk).split(\"\\n\");\n    for(i = 0; i &lt; lines.length - 1; i++) {\n        console.log(\"line: \" + lines[i]);\n    }\n    last = lines[i];\n});\n\nprocess.stdin.on('end', function() {\n    console.log(\"line: \" + last);\n});\n\nprocess.stdin.resume();\n</code></pre>\n\n<p>I did come up with this when working on a quick log parsing script that needed to accumulate data during the log parsing and I felt that it would nice to try doing this using js and node instead of using perl or bash.</p>\n\n<p>Anyway, I do feel that small nodejs scripts should be self contained and not rely on third party modules so after reading all the answers to this question, each using various modules to handle line parsing, a 13 SLOC native nodejs solution might be of interest .</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I wanted to tackle this same problem, basically what in Perl would be:</p>\n\n<pre><code>while (&lt;&gt;) {\n    process_line($_);\n}\n</code></pre>\n\n<p>My use case was just a standalone script, not a server, so synchronous was fine. These were my criteria:</p>\n\n<ul>\n<li>The minimal synchronous code that could reuse in many projects.</li>\n<li>No limits on file size or number of lines.</li>\n<li>No limits on length of lines.</li>\n<li>Able to handle full Unicode in UTF-8, including characters beyond the BMP.</li>\n<li>Able to handle *nix and Windows line endings (old-style Mac not needed for me).</li>\n<li>Line endings character(s) to be included in lines.</li>\n<li>Able to handle last line with or without end-of-line characters.</li>\n<li>Not use any external libraries not included in the node.js distribution.</li>\n</ul>\n\n<p>This is a project for me to get a feel for low-level scripting type code in node.js and decide how viable it is as a replacement for other scripting languages like Perl.</p>\n\n<p>After a surprising amount of effort and a couple of false starts this is the code I came up with. It's pretty fast but less trivial than I would've expected: <a href=\"https://gist.github.com/4461158\" rel=\"nofollow\">(fork it on GitHub)</a></p>\n\n<pre><code>var fs            = require('fs'),\n    StringDecoder = require('string_decoder').StringDecoder,\n    util          = require('util');\n\nfunction lineByLine(fd) {\n  var blob = '';\n  var blobStart = 0;\n  var blobEnd = 0;\n\n  var decoder = new StringDecoder('utf8');\n\n  var CHUNK_SIZE = 16384;\n  var chunk = new Buffer(CHUNK_SIZE);\n\n  var eolPos = -1;\n  var lastChunk = false;\n\n  var moreLines = true;\n  var readMore = true;\n\n  // each line\n  while (moreLines) {\n\n    readMore = true;\n    // append more chunks from the file onto the end of our blob of text until we have an EOL or EOF\n    while (readMore) {\n\n      // do we have a whole line? (with LF)\n      eolPos = blob.indexOf('\\n', blobStart);\n\n      if (eolPos !== -1) {\n        blobEnd = eolPos;\n        readMore = false;\n\n      // do we have the last line? (no LF)\n      } else if (lastChunk) {\n        blobEnd = blob.length;\n        readMore = false;\n\n      // otherwise read more\n      } else {\n        var bytesRead = fs.readSync(fd, chunk, 0, CHUNK_SIZE, null);\n\n        lastChunk = bytesRead !== CHUNK_SIZE;\n\n        blob += decoder.write(chunk.slice(0, bytesRead));\n      }\n    }\n\n    if (blobStart &lt; blob.length) {\n      processLine(blob.substring(blobStart, blobEnd + 1));\n\n      blobStart = blobEnd + 1;\n\n      if (blobStart &gt;= CHUNK_SIZE) {\n        // blobStart is in characters, CHUNK_SIZE is in octets\n        var freeable = blobStart / CHUNK_SIZE;\n\n        // keep blob from growing indefinitely, not as deterministic as I'd like\n        blob = blob.substring(CHUNK_SIZE);\n        blobStart -= CHUNK_SIZE;\n        blobEnd -= CHUNK_SIZE;\n      }\n    } else {\n      moreLines = false;\n    }\n  }\n}\n</code></pre>\n\n<p>It could probably be cleaned up further, it was the result of trial and error.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>i use this:</p>\n\n<pre><code>function emitLines(stream, re){\n    re = re &amp;&amp; /\\n/;\n    var buffer = '';\n\n    stream.on('data', stream_data);\n    stream.on('end', stream_end);\n\n    function stream_data(data){\n        buffer += data;\n        flush();\n    }//stream_data\n\n    function stream_end(){\n        if(buffer) stream.emmit('line', buffer);\n    }//stream_end\n\n\n    function flush(){\n        var re = /\\n/;\n        var match;\n        while(match = re.exec(buffer)){\n            var index = match.index + match[0].length;\n            stream.emit('line', buffer.substring(0, index));\n            buffer = buffer.substring(index);\n            re.lastIndex = 0;\n        }\n    }//flush\n\n}//emitLines\n</code></pre>\n\n<p>use this function on a stream and listen to the line events that is will emit.</p>\n\n<p>gr-</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For such a simple operation there shouldn't be any dependency on third-party modules. Go easy.</p>\n\n<pre><code>var fs = require('fs'),\n    readline = require('readline');\n\nvar rd = readline.createInterface({\n    input: fs.createReadStream('/path/to/file'),\n    output: process.stdout,\n    terminal: false\n});\n\nrd.on('line', function(line) {\n    console.log(line);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<pre><code>require('fs').readFileSync('file.txt').toString().split(/\\r?\\n/).forEach(function(line){\n  console.log(line);\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Old topic, but this works:</p>\n\n<pre><code>var rl = readline.createInterface({\n      input : fs.createReadStream('/path/file.txt'),\n      output: process.stdout,\n      terminal: false\n})\nrl.on('line',function(line){\n     console.log(line) //or parse line\n})\n</code></pre>\n\n<p>Simple. No need for an external module.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I was frustrated by the lack of a comprehensive solution for this, so I put together my own attempt (<a href=\"https://github.com/panta82/line-chomper\" rel=\"nofollow\">git</a> / <a href=\"https://www.npmjs.org/package/line-chomper\" rel=\"nofollow\">npm</a>). Copy-pasted list of features:</p>\n\n<ul>\n<li>Interactive line processing (callback-based, no loading the entire file into RAM)</li>\n<li>Optionally, return all lines in an array (detailed or raw mode)</li>\n<li>Interactively interrupt streaming, or perform map/filter like processing</li>\n<li>Detect any newline convention (PC/Mac/Linux)</li>\n<li>Correct eof / last line treatment</li>\n<li>Correct handling of multi-byte UTF-8 characters</li>\n<li>Retrieve byte offset and byte length information on per-line basis</li>\n<li>Random access, using line-based or byte-based offsets</li>\n<li>Automatically map line-offset information, to speed up random access</li>\n<li>Zero dependencies</li>\n<li>Tests</li>\n</ul>\n\n<p>NIH? You decide :-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have a little module which does this well and is used by quite a few other projects <a href=\"https://www.npmjs.com/package/readline\" rel=\"nofollow\">npm readline</a> Note thay in node v10 there is a native readline module so I republished my module as linebyline <a href=\"https://www.npmjs.com/package/linebyline\" rel=\"nofollow\">https://www.npmjs.com/package/linebyline</a></p>\n\n<p>if you dont want to use the module the function is very simple:</p>\n\n<pre><code>var fs = require('fs'),\nEventEmitter = require('events').EventEmitter,\nutil = require('util'),\nnewlines = [\n  13, // \\r\n  10  // \\n\n];\nvar readLine = module.exports = function(file, opts) {\nif (!(this instanceof readLine)) return new readLine(file);\n\nEventEmitter.call(this);\nopts = opts || {};\nvar self = this,\n  line = [],\n  lineCount = 0,\n  emit = function(line, count) {\n    self.emit('line', new Buffer(line).toString(), count);\n  };\n  this.input = fs.createReadStream(file);\n  this.input.on('open', function(fd) {\n    self.emit('open', fd);\n  })\n  .on('data', function(data) {\n   for (var i = 0; i &lt; data.length; i++) {\n    if (0 &lt;= newlines.indexOf(data[i])) { // Newline char was found.\n      lineCount++;\n      if (line.length) emit(line, lineCount);\n      line = []; // Empty buffer.\n     } else {\n      line.push(data[i]); // Buffer new line data.\n     }\n   }\n }).on('error', function(err) {\n   self.emit('error', err);\n }).on('end', function() {\n  // Emit last line if anything left over since EOF won't trigger it.\n  if (line.length){\n     lineCount++;\n     emit(line, lineCount);\n  }\n  self.emit('end');\n }).on('close', function() {\n   self.emit('close');\n });\n};\nutil.inherits(readLine, EventEmitter);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p><strong>Edit 2014</strong>:  it seems the original answer is deprecated (read comments) apparently a transform stream <a href=\"http://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/\">http://strongloop.com/strongblog/practical-examples-of-the-new-node-js-streams-api/</a> is the new hotness.</p>\n\n<hr>\n\n<p>I am trying to read a large file one line at a time. I found a question on Quora that dealt with the subject but I'm missing some connections to make the whole thing fit together.\n(link to the Quora answer: <a href=\"http://www.quora.com/What-is-the-best-way-to-read-a-file-line-by-line-in-node-js\">http://www.quora.com/What-is-the-best-way-to-read-a-file-line-by-line-in-node-js</a>)</p>\n\n<pre><code> var Lazy=require(\"lazy\");\n new Lazy(process.stdin)\n     .lines\n     .forEach(\n          function(line) { \n              console.log(line.toString()); \n          }\n );\n process.stdin.resume();\n</code></pre>\n\n<p>The bit that I'd like to figure out is how I might read one line at a time from a file instead of STDIN as in this sample.</p>\n\n<p>I tried: </p>\n\n<pre><code> fs.open('./VeryBigFile.csv', 'r', '0666', Process);\n\n function Process(err, fd) {\n    if (err) throw err;\n    // DO lazy read \n }\n</code></pre>\n\n<p>but it's not working.  I know that in a pinch I could fall back to using something like PHP, but I would like to figure this out.  </p>\n\n<p>I don't think the other answer would work as the file is much larger than the server I'm running it on has memory for. </p>\n\n<p><strong>EDIT</strong>\nThe tested solution as provided by Raynos below is:</p>\n\n<pre><code>var     lazy    = require(\"lazy\"),\n        fs  = require(\"fs\");\n\n new lazy(fs.createReadStream('./MyVeryBigFile.csv'))\n     .lines\n     .forEach(function(line){\n         console.log(line.toString());\n     }\n );\n</code></pre>\n",
            "last_activity_date": 1421489629,
            "question_id": 6156501,
            "score": 126,
            "tags": [
                "javascript",
                "node.js",
                "file-io",
                "lazy-evaluation"
            ],
            "title": "Read a file one line at a time in node.js?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>HTML 4 does not make it explicit. The current HTML5 working draft <a href=\"http://www.w3.org/TR/html5/forms.html#implicit-submission\" rel=\"nofollow\">specifies that the first submit button must be the default</a>:</p>\n\n<blockquote>\n  <p>A <code><a href=\"http://www.w3.org/TR/html5/the-form-element.html#the-form-element\" rel=\"nofollow\">form</a></code> element's default button is the\n    first <a href=\"http://www.w3.org/TR/html5/forms.html#concept-submit-button\" rel=\"nofollow\" title=\"concept-submit-button\">submit button</a> in\n    <a href=\"http://www.w3.org/TR/html5/infrastructure.html#tree-order\" rel=\"nofollow\">tree order</a> whose <a href=\"http://www.w3.org/TR/html5/association-of-controls-and-forms.html#form-owner\" rel=\"nofollow\">form owner</a> is that\n    <code><a href=\"http://www.w3.org/TR/html5/the-form-element.html#the-form-element\" rel=\"nofollow\">form</a></code> element.</p>\n  \n  <p>If the user agent supports letting the user submit a form\n    implicitly (for example, on some platforms hitting the \"enter\" key\n    while a text field is focused implicitly submits the form), then\n    doing so for a form whose <a href=\"http://www.w3.org/TR/html5/constraints.html#default-button\" rel=\"nofollow\">default button</a> has a defined\n    <a href=\"http://www.w3.org/TR/html5/content-models.html#activation-behavior\" rel=\"nofollow\">activation behavior</a> must cause the user agent to\n    <a href=\"http://www.w3.org/TR/html5/content-models.html#run-synthetic-click-activation-steps\" rel=\"nofollow\">run synthetic click activation steps</a> on that\n    <a href=\"http://www.w3.org/TR/html5/constraints.html#default-button\" rel=\"nofollow\">default button</a>.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>If you submit the form via Javascript (i.e. <code>formElement.submit()</code> or anything equivalent), then <em>none</em> of the submit buttons are considered successful and none of their values are included in the submitted data.  (Note that if you submit the form by using <code>submitElement.click()</code> then the submit that you had a reference to is considered active; this doesn't really fall under the remit of your question since here the submit button is unambiguous but I thought I'd include it for people who read the first part and wonder how to make a submit button successful via JS form submission.  Of course, the form's onsubmit handlers will still fire this way whereas they wouldn't via <code>form.submit()</code> so that's another kettle of fish...)</p>\n\n<p>If the form is submitted by hitting Enter while in a non-textarea field, then it's actually down to the user agent to decide what it wants here.  The <a href=\"http://www.w3.org/TR/html401/interact/forms.html#submit-button\">specs</a> don't say anything about submitting a form using the enter key while in a text entry field (if you tab to a button and activate it using space or whatever, then there's no problem as that specific submit button is unambiguously used).  All it says is that a form must be submitted when a submit button is activated, it's not even a requirement that hitting enter in e.g. a text input will submit the form.</p>\n\n<p>I believe that Internet Explorer chooses the submit button that appears first in the source; I have a feeling that Firefox and Opera choose the button with the lowest tabindex, falling back to the first defined if nothing else is defined.  There's also some complications regarding whether the submits have a non-default value attribute IIRC.</p>\n\n<p>The point to take away is that there is no defined standard for what happens here and it's entirely at the whim of the browser - so as far as possible in whatever you're doing, try to avoid relying on any particular behaviour.  If you really must know, you can probably find out the behaviour of the various browser versions but when I investigated this a while back there were some quite convoluted conditions (which of course are subject to change with new browser versions) and I'd advise you to avoid it if possible!</p>\n",
                    "is_accepted": true,
                    "score": 76
                },
                {
                    "body": "<p>From your comments:</p>\n\n<blockquote>\n  <p>A consequence is that, if you have\n  multiple forms submitting to the same\n  script, you can't rely on submit\n  buttons to distinguish them.</p>\n</blockquote>\n\n<p>I drop an <code>&lt;input type=\"hidden\" value=\"form_name\" /&gt;</code> into each form.</p>\n\n<p>If submitting with javascript: add submit events to forms, not click events to their buttons.  Saavy users don't touch their mouse very often.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had a form with 11 submit buttons on it, and it would always use the first submit button when the user pressed enter. I read elsewhere that it is not a good idea (bad practice) to have more than one submit button on a form, and the best way to do this is have the button you want as default, as the only submit button on the form. The other buttons should be made into \"TYPE=BUTTON\" and an onClick event added that calls your own submit routine in Javascript. Something like this :-</p>\n\n<pre><code>&lt;SCRIPT Language=\"JavaScript\"&gt;\nfunction validform()\n{\n  // do whatever you need to validate the form, and return true or false accordingly\n}\n\nfunction mjsubmit()\n{\n  if (validform()) { document.form1.submit(); return true;}\n  return false;\n}\n&lt;/SCRIPT&gt;\n&lt;INPUT TYPE=BUTTON NAME=\"button1\" VALUE=\"button1\" onClick=\"document.form1.submitvalue='button1'; return mjsubmit();\"&gt;\n&lt;INPUT TYPE=BUTTON NAME=\"button2\" VALUE=\"button2\" onClick=\"document.form1.submitvalue='button2'; return mjsubmit();\"&gt;\n&lt;INPUT TYPE=SUBMIT NAME=\"button3\" VALUE=\"button3\" onClick=\"document.form1.submitvalue='button3'; return validform();\"&gt;\n&lt;INPUT TYPE=BUTTON NAME=\"button4\" VALUE=\"button4\" onClick=\"document.form1.submitvalue='button4'; return mjsubmit();\"&gt;\n</code></pre>\n\n<p>Here, button3 is the default, and although you are programmatically submitting the form with the other buttons, the mjsubmit routine validates them. HTH.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think this post would help if someone wants to do it with jQuery:</p>\n\n<p><a href=\"http://greatwebguy.com/programming/dom/default-html-button-submit-on-enter-with-jquery/\" rel=\"nofollow\">http://greatwebguy.com/programming/dom/default-html-button-submit-on-enter-with-jquery/</a></p>\n\n<p>The basic solution is:</p>\n\n<pre><code>$(function() {\n    $(\"form input\").keypress(function (e) {\n    if ((e.which &amp;&amp; e.which == 13) || (e.keyCode &amp;&amp; e.keyCode == 13)) {\n        $('input[type=submit].default').click();\n        return false;\n    } else {\n        return true;\n    }\n    });\n});\n</code></pre>\n\n<p>and another I liked was:</p>\n\n<pre><code>jQuery(document).ready(function() {\n$(\"form input, form select\").live('keypress', function (e) {\nif ($(this).parents('form').find('button[type=submit].default, input[type=submit].default').length &lt;= 0)\nreturn true;\n\nif ((e.which &amp;&amp; e.which == 13) || (e.keyCode &amp;&amp; e.keyCode == 13)) {\n$(this).parents('form').find('button[type=submit].default, input[type=submit].default').click();\nreturn false;\n} else {\nreturn true;\n}\n});\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>my recipe:</p>\n\n<pre><code>&lt;form&gt;\n&lt;input type=hidden name=action value=login&gt;&lt;!-- the magic! --&gt;\n\n&lt;input type=text name=email&gt;\n&lt;input type=text name=password&gt;\n\n&lt;input type=submit name=action value=login&gt;\n&lt;input type=submit name=action value=\"forgot password\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>It will send the default hidden field if none of the buttons are 'clicked'.</p>\n\n<p>if they are clicked, they have preference and it's value is passed.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Andrezj's pretty much got it nailed... but here's an easy cross-browser solution.</p>\n\n<p>Take a form like this: </p>\n\n<pre><code>&lt;form&gt;\n    &lt;input/&gt;\n    &lt;button type=\"submit\" value=\"some non-default action\"/&gt;\n    &lt;button type=\"submit\" value=\"another non-default action\"/&gt;\n    &lt;button type=\"submit\" value=\"yet another non-default action\"/&gt;\n\n    &lt;button type=\"submit\" value=\"default action\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>and refactor to this: </p>\n\n<pre><code>&lt;form&gt;\n    &lt;input/&gt;\n\n    &lt;button style=\"overflow: visible !important; height: 0 !important; width: 0 !important; margin: 0 !important; border: 0 !important; padding: 0 !important; display: block !important;\" type=\"submit\" value=\"default action\"/&gt;\n\n    &lt;button type=\"submit\" value=\"some non-default action\"/&gt;\n    &lt;button type=\"submit\" value=\"another non-default action\"/&gt;\n    &lt;button type=\"submit\" value=\"yet another non-default action\"/&gt;\n    &lt;button type=\"submit\" value=\"still another non-default action\"/&gt;\n\n    &lt;button type=\"submit\" value=\"default action\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Since the W3C spec indicates multiple submit buttons are valid, but omits guidance as to how the user-agent should handle them, the browser manufacturers are left to implement as they see fit. I've found they'll either submit the first submit button in the form, or submit the next submit button after the form field that currently has focus.</p>\n\n<p>Unfortunately, simply adding a style of <strong>display: none;</strong> won't work because the W3C spec indicates any hidden element should be excluded from user interactions. So hide it in plain sight instead!</p>\n\n<p>Above is an example of the solution I ended up putting into production. Hitting the enter key triggers the default form submission is behavior as expected, even when other non-default values are present and precede the default submit button in the DOM. Bonus for mouse/keyboard interaction with explicit user inputs while avoiding javascript handlers.</p>\n\n<p>Note: tabbing through the form will not display focus for any visual element yet will still cause the invisible button to be selected. To avoid this issue, simply set tabindex attributes accordingly and omit a tabindex attribute on the invisible submit button.  While it may seem out of place to promote these styles to !important, they <em>should</em> prevent any framework or existing button styles from interfering with this fix. Also, those inline styles are definitely poor form, but we're proving concepts here... not writing production code.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Another solution I've used is to just have one button in the form, and fake the other buttons.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>&lt;form&gt;\n  &lt;label for=\"amount\"&gt;Amount of items&lt;/label&gt;\n  &lt;input id=\"amount\" type=\"text\" name=\"amount\" /&gt;\n  &lt;span id=\"checkStock\" class=\"buttonish\"&gt;Check stock&lt;/span&gt;\n  &lt;button type=\"submit\" name=\"action\" value=\"order\"&gt;Place order&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I then style the span elements to look like a button. A JS listener observes the span and performs the desired operation once clicked.</p>\n\n<p>Not necessarily right for all situations, but at least it's pretty easy to do.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From the <a href=\"http://www.w3.org/TR/html401/interact/forms.html#successful-controls\" rel=\"nofollow\">HTML 4 spec</a>:</p>\n\n<blockquote>\n  <p>If a form contains more than one submit button, only the activated\n  submit button is successful.</p>\n</blockquote>\n\n<p>This means that given more than 1 submit button and none activated (clicked), none should be successful.</p>\n\n<p>And I'd argue this makes sense:\nImagine a huge form with multiple submit-buttons. At the top, there is a \"delete this record\"-button, then lots of inputs follow and at the bottom there is an \"update this record\"-button. A user hitting enter while in a field at the bottom of the form would never suspect that he implicitly hits the \"delete this record\" from the top.</p>\n\n<p>Therefore I think it is not a good idea to use the first or any other button it the user does not define (click) one.\nNevertheless, browsers are doing it of course.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>EDIT:</strong> Sorry, when writing this answer I was thinking about submit buttons in the general sense. The answer below is not about multiple <code>type=\"submit\"</code> buttons, as it leaves only one <code>type=\"submit\"</code> and change the other to <code>type=\"button\"</code>. I leave the answer here as reference in case helps someone that can change the <code>type</code> in their form:</p>\n\n<p>To determine what button is pressed when hitting enter, you can mark it up with <code>type=\"submit\"</code>, and the other buttons mark them with <code>type=\"button\"</code>. For example:</p>\n\n<pre><code>&lt;input type=\"button\" value=\"Cancel\" /&gt;\n&lt;input type=\"submit\" value=\"Submit\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>When you have multiple submit buttons in a single form and a user presses the ENTER key to submit the form from a text field, this code overrides default functionality, by calling the submit event on the form from the key press event.  Here is that code:</p>\n\n<pre><code>$('form input').keypress(function(e){\n\n    if ((e.which &amp;&amp; e.which == 13) || (e.keyCode &amp;&amp; e.keyCode == 13)){ $(e.target).closest('form').submit(); return false; }\n    else return true;\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Strange that the first button <em>Enter</em> goes always to the first button regardless is visible or not, e.g. using jquery <code>show/hide()</code>. Adding attribute <code>.attr('disabled', 'disabled')</code> prevent receiving Enter submit button completely. It's problem for example when adjusting <em>Insert/Edit+Delete</em> button visibility in record dialogs. I found less hackish and simple placing <em>Edit</em> in front of <em>Insert</em></p>\n\n<pre><code>&lt;button type=\"submit\" name=\"action\" value=\"update\"&gt;Update&lt;/button&gt;\n&lt;button type=\"submit\" name=\"action\" value=\"insert\"&gt;Insert&lt;/button&gt;\n&lt;button type=\"submit\" name=\"action\" value=\"delete\"&gt;Delete&lt;/button&gt;\n</code></pre>\n\n<p>and use javascript code:</p>\n\n<pre><code>$(\"#formId button[type='submit'][name='action'][value!='insert']\").hide().attr('disabled', 'disabled');\n$(\"#formId button[type='submit'][name='action'][value='insert']\").show().removeAttr('disabled');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If a form is submitted but not by any specific button, such as</p>\n\n<ul>\n<li>by pressing Enter</li>\n<li>using HTMLFormElement.submit() in JS</li>\n</ul>\n\n<p>how is a browser supposed to determine which of multiple submit buttons, if any, to use as the one pressed?</p>\n\n<p>This is significant on two levels:</p>\n\n<ul>\n<li>calling an onclick event handler attached to a submit button</li>\n<li>the data sent back to the webserver</li>\n</ul>\n\n<p>My experiments so far have shown that:</p>\n\n<ul>\n<li>when pressing Enter, Firefox, Opera and Safari use the first submit button in the form</li>\n<li>when pressing Enter, IE uses either the first submit button or none at all depending on conditions I haven't been able to figure out</li>\n<li>all these browsers use none at all for a JS submit</li>\n</ul>\n\n<p>but what does the standard say?</p>\n\n<p>If it would help, here's my test code (the PHP is relevant only to my method of testing, not to my question itself)</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n                      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n&lt;title&gt;Test&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;h1&gt;Get&lt;/h1&gt;\n&lt;dl&gt;\n&lt;?php foreach ($_GET as $k =&gt; $v) echo \"&lt;dt&gt;$k&lt;/dt&gt;&lt;dd&gt;$v&lt;/dd&gt;\"; ?&gt;\n&lt;/dl&gt;\n\n&lt;h1&gt;Post&lt;/h1&gt;\n&lt;dl&gt;\n&lt;?php foreach ($_POST as $k =&gt; $v) echo \"&lt;dt&gt;$k&lt;/dt&gt;&lt;dd&gt;$v&lt;/dd&gt;\"; ?&gt;\n&lt;/dl&gt;\n\n&lt;form name=\"theForm\" method=\"&lt;?php echo isset($_GET['method']) ? $_GET['method'] : 'get'; ?&gt;\" action=\"&lt;?php echo $_SERVER['SCRIPT_NAME']; ?&gt;\"&gt;\n    &lt;input type=\"text\" name=\"method\" /&gt;\n    &lt;input type=\"submit\" name=\"action\" value=\"Button 1\" onclick=\"alert('Button 1'); return true\" /&gt;\n    &lt;input type=\"text\" name=\"stuff\" /&gt;\n    &lt;input type=\"submit\" name=\"action\" value=\"Button 2\" onclick=\"alert('Button 2'); return true\" /&gt;\n    &lt;input type=\"button\" value=\"submit\" onclick=\"document.theForm.submit();\" /&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1423159524,
            "question_id": 925334,
            "score": 137,
            "tags": [
                "javascript",
                "html",
                "cross-browser",
                "standards"
            ],
            "title": "How is the default submit button on an HTML form determined?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The second is the way to go. Only one of those events will fire in every browser, so you can set all of them and it'll work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use code like this (with jQuery)</p>\n\n<pre><code>var vP = \"\";\nvar transitionEnd = \"transitionend\";\nif ($.browser.webkit) {\n    vP = \"-webkit-\";\n    transitionEnd = \"webkitTransitionEnd\";\n} else if ($.browser.msie) {\n    vP = \"-ms-\";\n} else if ($.browser.mozilla) {\n    vP = \"-moz-\";\n} else if ($.browser.opera) {\n    vP = \"-o-\";\n    transitionEnd = \"otransitionend\"; //oTransitionEnd for very old Opera\n}\n</code></pre>\n\n<p>That lets me use JS to add things by specifying vP concatentated with the property, and if it didn't hit a browser it just uses the standard. The events lets me easily bind like so:</p>\n\n<pre><code>object.bind(transitionEnd,function(){\n    callback();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As per Matijs comment, the easiest way to detect transition events is with a library, jquery in this case:</p>\n\n<pre><code>$(\"div\").bind(\"webkitTransitionEnd oTransitionEnd otransitionend transitionend msTransitionEnd\", function(){\n  //code\n});\n</code></pre>\n\n<p>In library-less javascript it gets a bit verbose:</p>\n\n<pre><code>element.addEventListener('webkitTransitionEnd', callfunction, false);\nelement.addEventListener('oTransitionEnd', callfunction, false);\nelement.addEventListener('transitionend', callfunction, false);\nelement.addEventListener('msTransitionEnd', callfunction, false);\n\nfunction callfunction() {\n   //do whatever\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>There's a technique used in Modernizr, improved:</p>\n\n<pre><code>function transitionEndEventName () {\n    var i,\n        undefined,\n        el = document.createElement('div'),\n        transitions = {\n            'transition':'transitionend',\n            'OTransition':'otransitionend',  // oTransitionEnd in very old Opera\n            'MozTransition':'transitionend',\n            'WebkitTransition':'webkitTransitionEnd'\n        };\n\n    for (i in transitions) {\n        if (transitions.hasOwnProperty(i) &amp;&amp; el.style[i] !== undefined) {\n            return transitions[i];\n        }\n    }\n\n    //TODO: throw 'TransitionEnd event is not supported in this browser'; \n}\n</code></pre>\n\n<p>Then you can just call this function whenever you need the transition end event:</p>\n\n<pre><code>var transitionEnd = transitionEndEventName();\nelement.addEventListener(transitionEnd, theFunctionToInvoke, false);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 125
                },
                {
                    "body": "<p><strong>Update</strong></p>\n\n<p>The following is a cleaner way of doing it, and doesn't require modernizr</p>\n\n<pre><code>$(\".myClass\").one('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd', \nfunction() {\n //do something\n});\n</code></pre>\n\n<hr>\n\n<p>Alternatively</p>\n\n<pre><code>var transEndEventNames = {\n        'WebkitTransition': 'webkitTransitionEnd',\n        'MozTransition': 'transitionend',\n        'OTransition': 'oTransitionEnd otransitionend',\n        'msTransition': 'MSTransitionEnd',\n        'transition': 'transitionend'\n    }, transitionEnd = transEndEventNames[Modernizr.prefixed('transition')];\n</code></pre>\n\n<p>This is based on the code suggested by Modernizr, but with the extra event for newer versions of Opera.</p>\n\n<p><a href=\"http://modernizr.com/docs/#prefixed\" rel=\"nofollow\">http://modernizr.com/docs/#prefixed</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you use jQuery and Bootstrap <code>$.support.transition.end</code> will return the right event for the current browser.</p>\n\n<p>It is <a href=\"https://github.com/twbs/bootstrap/blob/7f0b487477bc63bef488dff14a0c28ea2106286b/js/bootstrap-transition.js#L53\" rel=\"nofollow\">defined in Bootstrap</a> and used in <a href=\"https://github.com/twbs/bootstrap/blob/7f0b487477bc63bef488dff14a0c28ea2106286b/js/bootstrap-modal.js#L76\" rel=\"nofollow\">its animation callbacks</a>, though the jQuery docs say not to rely on these properties:</p>\n\n<blockquote>\n  <p>Although some of these properties are documented below, they are not subject to a long deprecation/removal cycle and may be removed once internal jQuery code no longer needs them.</p>\n  \n  <p><a href=\"http://api.jquery.com/jQuery.support/\" rel=\"nofollow\">http://api.jquery.com/jQuery.support/</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>google closure makes sure you don't have to do this.  If you have an element:</p>\n\n<pre><code>goog.events.listen(element, goog.events.EventType.TRANSITIONEND, function(event) {\n  // ... your code here\n});\n</code></pre>\n\n<p>looking at the source of goog.events.eventtype.js, TRANSITIONEND is calculated by looking at the useragent:</p>\n\n<pre><code>// CSS transition events. Based on the browser support described at:\n  // https://developer.mozilla.org/en/css/css_transitions#Browser_compatibility\n  TRANSITIONEND: goog.userAgent.WEBKIT ? 'webkitTransitionEnd' :\n      (goog.userAgent.OPERA ? 'oTransitionEnd' : 'transitionend'),\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Webkit's transition end event is called webkitTransitionEnd, Firefox is transitionEnd, opera is oTransitionEnd. What is a good way of tackling all of them in pure JS? Should I do browser sniffing? or implement each one separately? Some other way that hasn't occured to me?</p>\n\n<p>ie:</p>\n\n<pre><code>//doing browser sniffing\nvar transitionend = (isSafari) ? \"webkitTransitionEnd\" : (isFirefox) ? \"transitionEnd\" : (isOpera) ? \"oTransitionEnd\";\n\nelement.addEventListener(transitionend, function(){\n  //do whatever\n},false);\n</code></pre>\n\n<p>or </p>\n\n<pre><code>//asigning an event listener per browser\nelement.addEventListener(webkitTransitionEnd, function(){callfunction()},false);\nelement.addEventListener(oTransitionEnd, function(){callfunction()},false);\nelement.addEventListener(transitionEnd, function(){callfunction()},false);\n\nfunction callfunction() {\n   //do whatever\n}\n</code></pre>\n",
            "last_activity_date": 1425481744,
            "question_id": 5023514,
            "score": 67,
            "tags": [
                "javascript",
                "css",
                "javascript-events",
                "css3",
                "css-transitions"
            ],
            "title": "How do I normalize CSS3 Transition functions across browsers?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Why use the canvas to resize images? Modern browsers all use bicubic interpolation \u2014 the same process used by Photoshop (if you're doing it right) \u2014 and they do it faster than the canvas process. Just specify the image size you want (use only one dimension, height or width, to resize proportionally).</p>\n\n<p>This is supported by most browsers, including later versions of IE. Earlier versions <a href=\"http://css-tricks.com/ie-fix-bicubic-scaling-for-images/\">may require browser-specific CSS</a>.</p>\n\n<p>A simple function (using jQuery) to resize an image would be like this:</p>\n\n<pre><code>function resizeImage(img, percentage) {\n    var coeff = percentage/100,\n        width = $(img).width(),\n        height = $(img).height();\n\n    return {\"width\": width*coeff, \"height\": height*coeff}           \n}\n</code></pre>\n\n<p><strong>EDIT</strong> Changed <code>image</code> to <code>img</code> to match function args. ^)^</p>\n\n<p>Then just use the returned value to resize the image in one or both dimensions.</p>\n\n<p>Obviously there are different refinements you could make, but this gets the job done.</p>\n\n<p><strong>ADDENDUM</strong></p>\n\n<p>Paste the following code into the console of this page and watch what happens to the gravatars:</p>\n\n<pre><code>function resizeImage(img, percentage) {\n    var coeff = percentage/100,\n        width = $(img).width(),\n        height = $(img).height();\n\n    return {\"width\": width*coeff, \"height\": height*coeff}           \n}\n\n$('.user-gravatar32 img').each(function(){\n  var newDimensions = resizeImage( this, 150);\n  this.style.width = newDimensions.width + \"px\";\n  this.style.height = newDimensions.height + \"px\";\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Since your problem is to downscale your image, there is no point in talking about interpolation -which is about creating pixel-. The issue here is downsampling.<br>\nTo downsample an image, we need to turn each square of p * p pixels in the original image into a single pixel in the destination image.<br>\nFor performances reasons Browsers do a very simple downsampling : to build the smaller image, they will just pick ONE pixel in the source and use its value for the destination. which 'forgots' some details and adds noise.<br>\nYet there's an exception to that : since the 2X image downsampling is very simple to compute (average 4 pixels to make one) and is used for retina/HiDPI pixels, this case is handled properly -the Browser does make use of 4 pixels to make one-.<br>\nBUT... if you use several time a 2X downsampling, you'll face the issue that the successive rounding errors will add too much noise.<br>\nWhat's worse, you won't always resize by a power of two, and resizing to the nearest power + a last resizing is very noisy.</p>\n\n<p>What you seek is a pixel-perfect downsampling, that is : a re-sampling of the image that will take all input pixels into account -whatever the scale-.<br>\nTo do that we must compute, for each input pixel, its contribution to one, two, or four destination pixels depending wether the scaled projection of the input pixels is right inside a destination pixels, overlaps an X border, an Y border, or both.<br>\n( A scheme would be nice here, but i don't have one. )  </p>\n\n<p>Here's an example of canvas scale vs my pixel perfect scale on a 1/3 scale of a zombat.\nNotice that the picture might get scaled in your Browser, and is .jpegized by S.O..<br>\nYet we see that there's much less noise especially in the grass behind the wombat, and the branches on its right. The noise in the fur makes it more contrasted, but it looks like he's got white hairs -unlike source picture-.<br>\nRight image is less catchy but definitively nicer.</p>\n\n<p><img src=\"http://i.stack.imgur.com/jwqOI.jpg\" alt=\"enter image description here\"></p>\n\n<p>Here's the code to do the pixel perfect downscaling :</p>\n\n<p>fiddle result : \n<a href=\"http://jsfiddle.net/gamealchemist/r6aVp/embedded/result/\" rel=\"nofollow\">http://jsfiddle.net/gamealchemist/r6aVp/embedded/result/</a><br>\nfiddle itself : <a href=\"http://jsfiddle.net/gamealchemist/r6aVp/\" rel=\"nofollow\">http://jsfiddle.net/gamealchemist/r6aVp/</a></p>\n\n<pre><code>// --------------------------------\n\n// scales the image by (float) scale &lt; 1\n// returns a canvas containing the scaled image.\nfunction downScaleImage(img, scale) {\n    var imgCV = document.createElement('canvas');\n    imgCV.width = img.width;\n    imgCV.height = img.height;\n    var imgCtx = imgCV.getContext('2d');\n    imgCtx.drawImage(img, 0, 0);\n    return downScaleCanvas(imgCV, scale);\n}\n\n// scales the canvas by (float) scale &lt; 1\n// returns a new canvas containing the scaled image.\nfunction downScaleCanvas(cv, scale) {\n    if (!(scale &lt; 1) || !(scale &gt; 0)) throw ('scale must be a positive number &lt;1 ');\n    var sqScale = scale * scale; // square scale = area of source pixel within target\n    var sw = cv.width; // source image width\n    var sh = cv.height; // source image height\n    var tw = Math.floor(sw * scale); // target image width\n    var th = Math.floor(sh * scale); // target image height\n    var sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array\n    var tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array\n    var tX = 0, tY = 0; // rounded tx, ty\n    var w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y\n    // weight is weight of current source point within target.\n    // next weight is weight of current source point within next target's point.\n    var crossX = false; // does scaled px cross its current px right border ?\n    var crossY = false; // does scaled px cross its current px bottom border ?\n    var sBuffer = cv.getContext('2d').\n    getImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba\n    var tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb\n    var sR = 0, sG = 0,  sB = 0; // source's current point r,g,b\n    /* untested !\n    var sA = 0;  //source alpha  */    \n\n    for (sy = 0; sy &lt; sh; sy++) {\n        ty = sy * scale; // y src position within target\n        tY = 0 | ty;     // rounded : target pixel's y\n        yIndex = 3 * tY * tw;  // line index within target array\n        crossY = (tY != (0 | ty + scale)); \n        if (crossY) { // if pixel is crossing botton target pixel\n            wy = (tY + 1 - ty); // weight of point within target pixel\n            nwy = (ty + scale - tY - 1); // ... within y+1 target pixel\n        }\n        for (sx = 0; sx &lt; sw; sx++, sIndex += 4) {\n            tx = sx * scale; // x src position within target\n            tX = 0 | \u00a0tx;    // rounded : target pixel's x\n            tIndex = yIndex + tX * 3; // target pixel index within target array\n            crossX = (tX != (0 | tx + scale));\n            if (crossX) { // if pixel is crossing target pixel's right\n                wx = (tX + 1 - tx); // weight of point within target pixel\n                nwx = (tx + scale - tX - 1); // ... within x+1 target pixel\n            }\n            sR = sBuffer[sIndex    ];   // retrieving r,g,b for curr src px.\n            sG = sBuffer[sIndex + 1];\n            sB = sBuffer[sIndex + 2];\n\n            /* !! untested : handling alpha !!\n               sA = sBuffer[sIndex + 3];\n               if (!sA) continue;\n               if (sA != 0xFF) {\n                   sR = (sR * sA) &gt;&gt; 8;  // or use /256 instead ??\n                   sG = (sG * sA) &gt;&gt; 8;\n                   sB = (sB * sA) &gt;&gt; 8;\n               }\n            */\n            if (!crossX &amp;&amp; !crossY) { // pixel does not cross\n                // just add components weighted by squared scale.\n                tBuffer[tIndex    ] += sR * sqScale;\n                tBuffer[tIndex + 1] += sG * sqScale;\n                tBuffer[tIndex + 2] += sB * sqScale;\n            } else if (crossX &amp;&amp; !crossY) { // cross on X only\n                w = wx * scale;\n                // add weighted component for current px\n                tBuffer[tIndex    ] += sR * w;\n                tBuffer[tIndex + 1] += sG * w;\n                tBuffer[tIndex + 2] += sB * w;\n                // add weighted component for next (tX+1) px                \n                nw = nwx * scale\n                tBuffer[tIndex + 3] += sR * nw;\n                tBuffer[tIndex + 4] += sG * nw;\n                tBuffer[tIndex + 5] += sB * nw;\n            } else if (crossY &amp;&amp; !crossX) { // cross on Y only\n                w = wy * scale;\n                // add weighted component for current px\n                tBuffer[tIndex    ] += sR * w;\n                tBuffer[tIndex + 1] += sG * w;\n                tBuffer[tIndex + 2] += sB * w;\n                // add weighted component for next (tY+1) px                \n                nw = nwy * scale\n                tBuffer[tIndex + 3 * tw    ] += sR * nw;\n                tBuffer[tIndex + 3 * tw + 1] += sG * nw;\n                tBuffer[tIndex + 3 * tw + 2] += sB * nw;\n            } else { // crosses both x and y : four target points involved\n                // add weighted component for current px\n                w = wx * wy;\n                tBuffer[tIndex    ] += sR * w;\n                tBuffer[tIndex + 1] += sG * w;\n                tBuffer[tIndex + 2] += sB * w;\n                // for tX + 1; tY px\n                nw = nwx * wy;\n                tBuffer[tIndex + 3] += sR * nw;\n                tBuffer[tIndex + 4] += sG * nw;\n                tBuffer[tIndex + 5] += sB * nw;\n                // for tX ; tY + 1 px\n                nw = wx * nwy;\n                tBuffer[tIndex + 3 * tw    ] += sR * nw;\n                tBuffer[tIndex + 3 * tw + 1] += sG * nw;\n                tBuffer[tIndex + 3 * tw + 2] += sB * nw;\n                // for tX + 1 ; tY +1 px\n                nw = nwx * nwy;\n                tBuffer[tIndex + 3 * tw + 3] += sR * nw;\n                tBuffer[tIndex + 3 * tw + 4] += sG * nw;\n                tBuffer[tIndex + 3 * tw + 5] += sB * nw;\n            }\n        } // end for sx \n    } // end for sy\n\n    // create result canvas\n    var resCV = document.createElement('canvas');\n    resCV.width = tw;\n    resCV.height = th;\n    var resCtx = resCV.getContext('2d');\n    var imgRes = resCtx.getImageData(0, 0, tw, th);\n    var tByteBuffer = imgRes.data;\n    // convert float32 array into a UInt8Clamped Array\n    var pxIndex = 0; //  \n    for (sIndex = 0, tIndex = 0; pxIndex &lt; tw * th; sIndex += 3, tIndex += 4, pxIndex++) {\n        tByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);\n        tByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);\n        tByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);\n        tByteBuffer[tIndex + 3] = 255;\n    }\n    // writing result to canvas.\n    resCtx.putImageData(imgRes, 0, 0);\n    return resCV;\n}\n</code></pre>\n\n<p>It is <em>quite</em> memory greedy, since a float buffer is required to store the intermediate values of the destination image (-> if we count the result canvas, we use 6 times the source image's memory in this algorithm).<br>\nIt is also quite expensive, since each source pixel is used whatever the destination size, and we have to pay for the getImageData / putImageDate, quite slow also.<br>\nBut there's no way to be faster than process each source value in this case, and situation is not that bad : For my 740 * 556 image of a wombat, processing takes between 30 and 40 ms.</p>\n",
                    "is_accepted": true,
                    "score": 64
                },
                {
                    "body": "<p>Fast canvas resample with really good quality: <a href=\"http://jsfiddle.net/9g9Nv/96/\" rel=\"nofollow\">http://jsfiddle.net/9g9Nv/96/</a></p>\n\n<pre><code>function resample_hermite(canvas, W, H, W2, H2){\n    var time1 = Date.now();\n    W2 = Math.round(W2);\n    H2 = Math.round(H2);\n    var img = canvas.getContext(\"2d\").getImageData(0, 0, W, H);\n    var img2 = canvas.getContext(\"2d\").getImageData(0, 0, W2, H2);\n    var data = img.data;\n    var data2 = img2.data;\n    var ratio_w = W / W2;\n    var ratio_h = H / H2;\n    var ratio_w_half = Math.ceil(ratio_w/2);\n    var ratio_h_half = Math.ceil(ratio_h/2);\n\n    for(var j = 0; j &lt; H2; j++){\n        for(var i = 0; i &lt; W2; i++){\n            var x2 = (i + j*W2) * 4;\n            var weight = 0;\n            var weights = 0;\n            var weights_alpha = 0;\n            var gx_r = gx_g = gx_b = gx_a = 0;\n            var center_y = (j + 0.5) * ratio_h;\n            for(var yy = Math.floor(j * ratio_h); yy &lt; (j + 1) * ratio_h; yy++){\n                var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;\n                var center_x = (i + 0.5) * ratio_w;\n                var w0 = dy*dy //pre-calc part of w\n                for(var xx = Math.floor(i * ratio_w); xx &lt; (i + 1) * ratio_w; xx++){\n                    var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;\n                    var w = Math.sqrt(w0 + dx*dx);\n                    if(w &gt;= -1 &amp;&amp; w &lt;= 1){\n                        //hermite filter\n                        weight = 2 * w*w*w - 3*w*w + 1;\n                        if(weight &gt; 0){\n                            dx = 4*(xx + yy*W);\n                            //alpha\n                            gx_a += weight * data[dx + 3];\n                            weights_alpha += weight;\n                            //colors\n                            if(data[dx + 3] &lt; 255)\n                                weight = weight * data[dx + 3] / 250;\n                            gx_r += weight * data[dx];\n                            gx_g += weight * data[dx + 1];\n                            gx_b += weight * data[dx + 2];\n                            weights += weight;\n                            }\n                        }\n                    }       \n                }\n            data2[x2]     = gx_r / weights;\n            data2[x2 + 1] = gx_g / weights;\n            data2[x2 + 2] = gx_b / weights;\n            data2[x2 + 3] = gx_a / weights_alpha;\n            }\n        }\n    console.log(\"hermite = \"+(Math.round(Date.now() - time1)/1000)+\" s\");\n    canvas.getContext(\"2d\").clearRect(0, 0, Math.max(W, W2), Math.max(H, H2));\n    canvas.width = W2;\n    canvas.height = H2;\n    canvas.getContext(\"2d\").putImageData(img2, 0, 0);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<h1>Suggestion 1 - extend the process pipe-line</h1>\n\n<p>You can use step-down as I describe in the links you refer to but you appear to use them in a wrong way.</p>\n\n<p>Step down is not needed to scale images to ratios above 1:2 (typically, but not limited to). It is where you need to do a <em>drastic</em> down-scaling you need to split it up in two (and rarely, more) steps depending on content of the image (in particular where high-frequencies such as thin lines occur).</p>\n\n<p>Every time you down-sample an image you will loose details and information. You cannot expect the resulting image to be as clear as the original.</p>\n\n<p>If you are then scaling down the images in many steps you will loose a lot of information in total and the result will be poor as you already noticed.</p>\n\n<p>Try with just one extra step, or at tops two.</p>\n\n<h2>Convolutions</h2>\n\n<p>In case of Photoshop notice that it applies a convolution after the image has been re-sampled, such as sharpen. It's not just bi-cubic interpolation that takes place so in order to fully emulate Photoshop we need to also add the steps Photoshop is doing (with the default setup).</p>\n\n<p>For this example I will use my original answer that you refer to in your post, but I have added a sharpen convolution to it to improve quality as a post process (see demo at bottom).</p>\n\n<p>Here is code for adding sharpen filter (it's based on a generic convolution filter - I put the weight matrix for sharpen inside it as well as a mix factor to adjust the pronunciation of the effect):</p>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>sharpen(context, width, height, mixFactor);\n</code></pre>\n\n<p>The <code>mixFactor</code> is a value between [0.0, 1.0] and allow you do downplay the sharpen effect - rule-of-thumb: the less size the less of the effect is needed.</p>\n\n<p><strong>Function</strong> (based on <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">this snippet</a>):</p>\n\n<pre><code>function sharpen(ctx, w, h, mix) {\n\n    var weights =  [0, -1, 0,  -1, 5, -1,  0, -1, 0],\n        katet = Math.round(Math.sqrt(weights.length)),\n        half = (katet * 0.5) |0,\n        dstData = ctx.createImageData(w, h),\n        dstBuff = dstData.data,\n        srcBuff = ctx.getImageData(0, 0, w, h).data,\n        y = h;\n\n    while(y--) {\n\n        x = w;\n\n        while(x--) {\n\n            var sy = y,\n                sx = x,\n                dstOff = (y * w + x) * 4,\n                r = 0, g = 0, b = 0, a = 0;\n\n            for (var cy = 0; cy &lt; katet; cy++) {\n                for (var cx = 0; cx &lt; katet; cx++) {\n\n                    var scy = sy + cy - half;\n                    var scx = sx + cx - half;\n\n                    if (scy &gt;= 0 &amp;&amp; scy &lt; h &amp;&amp; scx &gt;= 0 &amp;&amp; scx &lt; w) {\n\n                        var srcOff = (scy * w + scx) * 4;\n                        var wt = weights[cy * katet + cx];\n\n                        r += srcBuff[srcOff] * wt;\n                        g += srcBuff[srcOff + 1] * wt;\n                        b += srcBuff[srcOff + 2] * wt;\n                        a += srcBuff[srcOff + 3] * wt;\n                    }\n                }\n            }\n\n            dstBuff[dstOff] = r * mix + srcBuff[dstOff] * (1 - mix);\n            dstBuff[dstOff + 1] = g * mix + srcBuff[dstOff + 1] * (1 - mix);\n            dstBuff[dstOff + 2] = b * mix + srcBuff[dstOff + 2] * (1 - mix)\n            dstBuff[dstOff + 3] = srcBuff[dstOff + 3];\n        }\n    }\n\n    ctx.putImageData(dstData, 0, 0);\n}\n</code></pre>\n\n<p>The result of using this combination will be:</p>\n\n<p><strong><a href=\"http://jsfiddle.net/AbdiasSoftware/ddJZB/\">ONLINE DEMO HERE</a></strong></p>\n\n<p><img src=\"http://i.stack.imgur.com/4VbjP.png\" alt=\"Result downsample and sharpen convolution\"></p>\n\n<p>Depending on how much of the sharpening you want to add to the blend you can get result from default \"blurry\" to very sharp:</p>\n\n<p><img src=\"http://i.stack.imgur.com/qfbYV.png\" alt=\"Variations of sharpen\"></p>\n\n<h1>Suggestion 2 - low level algorithm implementation</h1>\n\n<p>If you want to get the best result quality-wise you'll need to go low-level and consider to implement for example this brand new algorithm to do this.</p>\n\n<p>See <a href=\"http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=5782987&amp;url=http://ieeexplore.ieee.org/iel5/83/6045652/05782987.pdf?arnumber=5782987\">Interpolation-Dependent Image Downsampling</a> (2011) from IEEE.<br>\n<a href=\"http://www.researchgate.net/publication/228850739_Low_bit-rate_image_coding_via_interpolation_oriented_adaptive_down-sampling/file/3deec51a6be53543c0.pdf\">Here is a link to the paper in full (PDF)</a>.</p>\n\n<p>There are no implementations of this algorithm in JavaScript AFAIK of at this time so you're in for a hand-full if you want to throw yourself at this task.</p>\n\n<p>The essence is (excerpts from the paper):</p>\n\n<p><strong>Abstract</strong></p>\n\n<blockquote>\n  <p>An interpolation oriented adaptive down-sampling algorithm is proposed\n  for low bit-rate image coding in this paper.  Given an image, the\n  proposed algorithm is able to obtain a low resolution image, from\n  which a high quality image with  the same resolution as the input\n  image can be interpolated. Different from the traditional\n  down-sampling algorithms,  which are independent from the\n  interpolation process, the proposed down-sampling algorithm hinges the\n  down-sampling  to the interpolation process. Consequently, the\n  proposed down-sampling algorithm is able to maintain the original \n  information of the input image to the largest extent. The down-sampled\n  image is then fed into JPEG. A total variation (TV) based post\n  processing is then applied to the decompressed low resolution image.\n  Ultimately, the processed image is  interpolated to maintain the\n  original resolution of the input image. <strong>Experimental results verify\n  that utilizing the downsampled image by the proposed algorithm, an\n  interpolated image with much higher quality can be achieved. Besides,\n  the  proposed algorithm is able to achieve superior performance than\n  JPEG for low bit rate image coding.</strong></p>\n</blockquote>\n\n<p><img src=\"http://i.stack.imgur.com/XvAC8.jpg\" alt=\"Snapshot from paper\"></p>\n\n<p>(see provided link for all details, formulas etc.)</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>After trying the solution provided in the following Fiddler (related to the Pixel perfect scaling algorithm):  <a href=\"http://jsfiddle.net/gamealchemist/kpQyE/3/\" rel=\"nofollow\">http://jsfiddle.net/gamealchemist/kpQyE/3/</a></p>\n\n<p>I see an error which produces a darker line at the end of the image and is related to the user of Math.ceil. It should be Match.floor in the following lines:</p>\n\n<p><code>var tw = Math.floor(sw * scale); // target image width</code></p>\n\n<p><code>var th = Math.floor(sh * scale); // target image height</code></p>\n\n<p>I've tried commenting directly in the appropriate answer, but I could not as I do not have enough reputation, so I thought of adding an asnwer to help other people.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found a solution that doesn't need to access directly the pixel data and loop through it to perform the downsampling. Depending on the size of the image this can be very resource intensive, and it would be better to use the browser's internal algorithms.</p>\n\n<p>The <strong>drawImage()</strong> function is using a linear-interpolation, nearest-neighbor resampling method. That <strong>works well when you are not resizing down more than half the original size</strong>.</p>\n\n<p>If you loop to only resize max one half at a time, the results would be quite good, and much faster than accessing pixel data.</p>\n\n<p>This function downsample to half at a time until reaching the desired size:</p>\n\n<pre><code>  function resize_image( src, dst, type, quality ) {\n     var tmp = new Image(),\n         canvas, context, cW, cH;\n\n     type = type || 'image/jpeg';\n     quality = quality || 0.92;\n\n     cW = src.naturalWidth;\n     cH = src.naturalHeight;\n\n     tmp.src = src.src;\n     tmp.onload = function() {\n\n        canvas = document.createElement( 'canvas' );\n\n        cW /= 2;\n        cH /= 2;\n\n        if ( cW &lt; src.width ) cW = src.width;\n        if ( cH &lt; src.height ) cH = src.height;\n\n        canvas.width = cW;\n        canvas.height = cH;\n        context = canvas.getContext( '2d' );\n        context.drawImage( tmp, 0, 0, cW, cH );\n\n        dst.src = canvas.toDataURL( type, quality );\n\n        if ( cW &lt;= src.width || cH &lt;= src.height )\n           return;\n\n        tmp.src = dst.src;\n     }\n\n  }\n  // The images sent as parameters can be in the DOM or be image objects\n  resize_image( $( '#original' )[0], $( '#smaller' )[0] );\n</code></pre>\n\n<p>Credits to <a href=\"http://www.benknowscode.com/2014/01/resizing-images-in-browser-using-canvas.html\" rel=\"nofollow\">this post</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a reusable Angular service for high quality image / canvas resizing: <a href=\"https://gist.github.com/fisch0920/37bac5e741eaec60e983\" rel=\"nofollow\">https://gist.github.com/fisch0920/37bac5e741eaec60e983</a></p>\n\n<p>The service supports lanczos convolution and step-wise downscaling.  The convolution approach is higher quality at the cost of being slower, whereas the step-wise downscaling approach produces reasonably antialiased results and is significantly faster.</p>\n\n<p>Example usage:</p>\n\n<pre><code>angular.module('demo').controller('ExampleCtrl', function (imageService) {\n  // EXAMPLE USAGE\n  // NOTE: it's bad practice to access the DOM inside a controller, \n  // but this is just to show the example usage.\n\n  // resize by lanczos-sinc filter\n  imageService.resize($('#myimg')[0], 256, 256)\n    .then(function (resizedImage) {\n      // do something with resized image\n    })\n\n  // resize by stepping down image size in increments of 2x\n  imageService.resizeStep($('#myimg')[0], 256, 256)\n    .then(function (resizedImage) {\n      // do something with resized image\n    })\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is the improved Hermite resize filter that utilises 1 worker so that the window doesn't freeze.</p>\n\n<p><a href=\"https://github.com/calvintwr/Hermite-resize\" rel=\"nofollow\">https://github.com/calvintwr/Hermite-resize</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you wish to use canvas only, the best result will be with multiple downsteps. But that's not good enougth yet. For better quality you need pure js implementation. We just released <a href=\"https://github.com/nodeca/pica\" rel=\"nofollow\">pica</a> - high speed downscaler with variable quality/speed. In short, it resizes 1280*1024px in ~0.1s, and 5000*3000px image in 1s, with highest quality (lanczos filter with 3 lobes). Pica has <a href=\"http://nodeca.github.io/pica/demo/\" rel=\"nofollow\">demo</a>, where you can play with your images, quality levels, and even try it on mobile devices.</p>\n\n<p>Pica does not have unsharp mask yet, but that will be added very soon. That's much more easy than implement high speed convolution filter for resize.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I use html5 canvas elements to resize images im my browser. It turns out that the quality is very low. I found this: <a href=\"http://stackoverflow.com/questions/7615009/disable-interpolation-when-scaling-a-canvas\">Disable Interpolation when Scaling a &lt;canvas&gt;</a> but it does not help to increase the quality.</p>\n\n<p>Below is my css and js code as well as the image scalled with Photoshop and scaled in the canvas API. </p>\n\n<p><strong>What do I have to do to get optimal quality when scaling an image in the browser?</strong></p>\n\n<p>Note: I want to scale down a large image to a small one, modify color in a canvas and send the result from the canvas to the server.</p>\n\n<p>CSS: </p>\n\n<pre><code>canvas, img {\n    image-rendering: optimizeQuality;\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -webkit-optimize-contrast;\n    image-rendering: optimize-contrast;\n    -ms-interpolation-mode: nearest-neighbor;\n}\n</code></pre>\n\n<p>JS: </p>\n\n<pre><code>var $img = $('&lt;img&gt;');\nvar $originalCanvas = $('&lt;canvas&gt;');\n$img.load(function() {\n\n\n   var originalContext = $originalCanvas[0].getContext('2d');   \n   originalContext.imageSmoothingEnabled = false;\n   originalContext.webkitImageSmoothingEnabled = false;\n   originalContext.mozImageSmoothingEnabled = false;\n   originalContext.drawImage(this, 0, 0, 379, 500);\n});\n</code></pre>\n\n<p>The image resized with photoshop:</p>\n\n<p><img src=\"http://i.stack.imgur.com/Vt7KT.jpg\" alt=\"enter image description here\"></p>\n\n<p>The image resized on canvas:</p>\n\n<p><img src=\"http://i.stack.imgur.com/HJhLY.jpg\" alt=\"enter image description here\"></p>\n\n<p>Edit: </p>\n\n<p>I tried to make downscaling in more than one steps as proposed in:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/2303690/resizing-an-image-in-an-html5-canvas\">Resizing an image in an HTML5 canvas</a> and\n<a href=\"http://stackoverflow.com/questions/17861447/html5-canvas-drawimage-how-to-apply-antialiasing\">Html5 canvas drawImage: how to apply antialiasing</a></p>\n\n<p>This is the function I have used: </p>\n\n<pre><code>function resizeCanvasImage(img, canvas, maxWidth, maxHeight) {\n    var imgWidth = img.width, \n        imgHeight = img.height;\n\n    var ratio = 1, ratio1 = 1, ratio2 = 1;\n    ratio1 = maxWidth / imgWidth;\n    ratio2 = maxHeight / imgHeight;\n\n    // Use the smallest ratio that the image best fit into the maxWidth x maxHeight box.\n    if (ratio1 &lt; ratio2) {\n        ratio = ratio1;\n    }\n    else {\n        ratio = ratio2;\n    }\n\n    var canvasContext = canvas.getContext(\"2d\");\n    var canvasCopy = document.createElement(\"canvas\");\n    var copyContext = canvasCopy.getContext(\"2d\");\n    var canvasCopy2 = document.createElement(\"canvas\");\n    var copyContext2 = canvasCopy2.getContext(\"2d\");\n    canvasCopy.width = imgWidth;\n    canvasCopy.height = imgHeight;  \n    copyContext.drawImage(img, 0, 0);\n\n    // init\n    canvasCopy2.width = imgWidth;\n    canvasCopy2.height = imgHeight;        \n    copyContext2.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvasCopy2.width, canvasCopy2.height);\n\n\n    var rounds = 2;\n    var roundRatio = ratio * rounds;\n    for (var i = 1; i &lt;= rounds; i++) {\n        console.log(\"Step: \"+i);\n\n        // tmp\n        canvasCopy.width = imgWidth * roundRatio / i;\n        canvasCopy.height = imgHeight * roundRatio / i;\n\n        copyContext.drawImage(canvasCopy2, 0, 0, canvasCopy2.width, canvasCopy2.height, 0, 0, canvasCopy.width, canvasCopy.height);\n\n        // copy back\n        canvasCopy2.width = imgWidth * roundRatio / i;\n        canvasCopy2.height = imgHeight * roundRatio / i;\n        copyContext2.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvasCopy2.width, canvasCopy2.height);\n\n    } // end for\n\n\n    // copy back to canvas\n    canvas.width = imgWidth * roundRatio / rounds;\n    canvas.height = imgHeight * roundRatio / rounds;\n    canvasContext.drawImage(canvasCopy2, 0, 0, canvasCopy2.width, canvasCopy2.height, 0, 0, canvas.width, canvas.height);\n\n\n}\n</code></pre>\n\n<p>Here is the result if I use a 2 step down sizing: </p>\n\n<p><img src=\"http://i.stack.imgur.com/eH3Oe.png\" alt=\"enter image description here\"></p>\n\n<p>Here is the result if I use a 3 step down sizing: </p>\n\n<p><img src=\"http://i.stack.imgur.com/Y1qXz.png\" alt=\"enter image description here\"></p>\n\n<p>Here is the result if I use a 4 step down sizing: </p>\n\n<p><img src=\"http://i.stack.imgur.com/OW5bw.png\" alt=\"enter image description here\"></p>\n\n<p>Here is the result if I use a 20 step down sizing: </p>\n\n<p><img src=\"http://i.stack.imgur.com/XTN9v.png\" alt=\"enter image description here\"></p>\n\n<p>Note: It turns out that from 1 step to 2 steps there is a large improvement in image quality but the more steps you add to the process the more fuzzy the image becomes.</p>\n\n<p><strong>Is there a way to solve the problem that the image gets more fuzzy the more steps you add?</strong>  </p>\n\n<p>Edit 2013-10-04: I tried the algorithm of GameAlchemist. Here is the result compared to Photoshop.</p>\n\n<p>PhotoShop Image: </p>\n\n<p><img src=\"http://i.stack.imgur.com/VaO8s.jpg\" alt=\"PhotoShop Image\">  </p>\n\n<p>GameAlchemist's Algorithm:</p>\n\n<p><img src=\"http://i.stack.imgur.com/YOsTL.jpg\" alt=\"GameAlchemist's Algorithm\"></p>\n",
            "last_activity_date": 1424411304,
            "question_id": 18922880,
            "score": 52,
            "tags": [
                "javascript",
                "css",
                "html5",
                "canvas",
                "html5-canvas"
            ],
            "title": "HTML5 Canvas Resize (Downscale) Image High Quality?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Almost ... you need to escape the <code>.</code> because it has the meaning of \"an arbitrary character\" in a regular expression.</p>\n\n<pre><code>mystring.replace(/\\./g,' ')\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 415
                },
                {
                    "body": "<p>One more solution which is easy to understand :)</p>\n\n<pre><code>var newstring = mystring.split('.').join(' ');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 240
                },
                {
                    "body": "<pre><code>/**\n * ReplaceAll by Fagner Brack (MIT Licensed)\n * Replaces all occurrences of a substring in a string\n */\nString.prototype.replaceAll = function( token, newToken, ignoreCase ) {\n    var _token;\n    var str = this + \"\";\n    var i = -1;\n\n    if ( typeof token === \"string\" ) {\n\n        if ( ignoreCase ) {\n\n            _token = token.toLowerCase();\n\n            while( (\n                i = str.toLowerCase().indexOf(\n                    token, i &gt;= 0 ? i + newToken.length : 0\n                ) ) !== -1\n            ) {\n                str = str.substring( 0, i ) +\n                    newToken +\n                    str.substring( i + token.length );\n            }\n\n        } else {\n            return this.split( token ).join( newToken );\n        }\n\n    }\nreturn str;\n};\n\nalert('okay.this.is.a.string'.replaceAll('.', ' '));\n</code></pre>\n\n<p>Faster than using regex...</p>\n\n<p>EDIT:\nMaybe at the time I did this code I did not used jsperf. But in the end such discussion is totally pointless, the performance difference is not worth the legibility of the code in the real world, so my answer is still valid, even if the performance differs from the regex approach.</p>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<pre><code>str.replace(new RegExp(\".\",\"gm\"),\" \")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>I add double backslash to the dot to make it work. Cheer.</p>\n\n<pre><code>var st = \"okay.this.is.a.string\";\nvar Re = new RegExp(\"\\\\.\",\"g\");\nst = st.replace(Re,\" \");\nalert(st);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>String.prototype.replaceAll = function(character,replaceChar){\n    var word = this.valueOf();\n\n    while(word.indexOf(character) != -1)\n        word = word.replace(character,replaceChar);\n\n    return word;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's another implementation of replaceAll. Hope it helps someone.</p>\n\n<pre><code>    String.prototype.replaceAll = function (stringToFind, stringToReplace) {\n        if (stringToFind === stringToReplace) return this;\n        var temp = this;\n        var index = temp.indexOf(stringToFind);\n        while (index != -1) {\n            temp = temp.replace(stringToFind, stringToReplace);\n            index = temp.indexOf(stringToFind);\n        }\n        return temp;\n    };\n</code></pre>\n\n<p>Then you can use it:</p>\n\n<p>var myText = \"My Name is George\";<br>\nvar newText = myText.replaceAll(\"George\", \"Michael\");</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is more concise/readable and should perform better than the one posted by Fagner Brack (toLowerCase not performed in loop):</p>\n\n<pre><code>String.prototype.replaceAll = function(search, replace, ignoreCase) {\n  if (ignoreCase) {\n    var result = [];\n    var _string = this.toLowerCase();\n    var _search = search.toLowerCase();\n    var start = 0, match, length = _search.length;\n    while ((match = _string.indexOf(_search, start)) &gt;= 0) {\n      result.push(this.slice(start, match));\n      start = match + length;\n    }\n    result.push(this.slice(start));\n  } else {\n    result = this.split(search);\n  }\n  return result.join(replace);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>alert('Bananas And Bran'.replaceAll('An', '(an)'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var mystring = 'okay.this.is.a.string';\nvar myNewString = escapeHtml(mystring);\n\nfunction escapeHtml(text) {\nif('' !== text) {\n    return text.replace(/&amp;amp;/g, \"&amp;\")\n               .replace(/&amp;lt;/g, \"&lt;\")\n               .replace(/&amp;gt;/g, \"&gt;\")\n               .replace(/\\./g,' ')\n               .replace(/&amp;quot;/g, '\"')\n               .replace(/&amp;#39/g, \"'\");\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>For this simple scenario, i would also recommend to use the methods that comes build-in in javascript.</p>\n\n<p>You could try this :</p>\n\n<pre><code>\"okay.this.is.a.string\".split(\".\").join(\"\")\n</code></pre>\n\n<p>Greetings</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Example: I want to replace all double Quote (\") into single Quote (') Then the code will be like this</p>\n\n<pre><code>var str= \"\\\"Hello\\\"\"\nvar regex = new RegExp('\"', 'g');\nstr = str.replace(regex, '\\'');\nconsole.log(str); // 'Hello'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can replace all occurrence of any string/character using RegExp javasscript object.</p>\n\n<p>Here is the code,</p>\n\n<pre><code>var mystring = 'okay.this.is.a.string';\n\nvar patt = new RegExp(\"\\\\.\");\n\nwhile(patt.test(mystring)){\n\n  mystring  = mystring .replace(\".\",\"\");\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to replace all the occurances of a dot(<code>.</code>) in a JavaScript string</p>\n\n<p>For example, I have:</p>\n\n<pre><code>var mystring = 'okay.this.is.a.string';\n</code></pre>\n\n<p>I want to get: <code>okay this is a string</code>.</p>\n\n<p>So far I tried:</p>\n\n<pre><code>mystring.replace(/./g,' ')\n</code></pre>\n\n<p>but this ends up with all the string replaced to spaces.</p>\n\n<p>Any idea how to resolve this?</p>\n",
            "last_activity_date": 1422865929,
            "question_id": 2390789,
            "score": 226,
            "tags": [
                "javascript",
                "string",
                "replace"
            ],
            "title": "How to replace all dots in a string using JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>var result = Math.round(original*100)/100;\n</code></pre>\n\n<p><a href=\"http://www.javascriptkit.com/javatutors/round.shtml\">The specifics</a>, in case the code isn't self-explanatory.</p>\n\n<p>edit: ...or just use <code><a href=\"http://www.pageresource.com/jscript/j%5Fa%5F03.htm\">toFixed</a></code>, as proposed by <a href=\"http://stackoverflow.com/questions/661562/comma-format-in-javascript/661579#661579\">Tim B\u00fcthe</a>. Forgot that one, thanks (and an upvote) for reminder :)</p>\n",
                    "is_accepted": true,
                    "score": 100
                },
                {
                    "body": "<pre><code>var x = 0.3445434\nx = Math.round (x*100) / 100 // this will make nice rounding\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are functions to round numbers. For example:</p>\n\n<pre><code>var x = 5.0364342423;\nprint(x.toFixed(2));\n</code></pre>\n\n<p>will print 5.04.</p>\n\n<p><strong>EDIT:</strong>\n<a href=\"http://jsfiddle.net/TM7DQ/\">Fiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 405
                },
                {
                    "body": "<p>Be careful when using <code>toFixed()</code>:</p>\n\n<p>First, rounding the number is done using the binary representation of the number, which might lead to unexpected behaviour. For example</p>\n\n<pre><code>(0.595).toFixed(2) === '0.59'\n</code></pre>\n\n<p>instead of <code>'0.6'</code>.</p>\n\n<p>Second, there's an IE bug with <code>toFixed()</code>. In IE (at least up to version 7, didn't check IE8), the following holds true:</p>\n\n<pre><code>(0.9).toFixed(0) === '0'\n</code></pre>\n\n<p>It might be a good idea to follow kkyy's suggestion or to use a custom <code>toFixed()</code> function, eg</p>\n\n<pre><code>function toFixed(value, precision) {\n    var power = Math.pow(10, precision || 0);\n    return String(Math.round(value * power) / power);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 119
                },
                {
                    "body": "<p>Maybe you'll also want decimal separator? Here is a function I just made:</p>\n\n<pre><code>function formatFloat(num,casasDec,sepDecimal,sepMilhar) {\n    if (num &lt; 0)\n    {\n        num = -num;\n        sinal = -1;\n    } else\n        sinal = 1;\n    var resposta = \"\";\n    var part = \"\";\n    if (num != Math.floor(num)) // decimal values present\n    {\n        part = Math.round((num-Math.floor(num))*Math.pow(10,casasDec)).toString(); // transforms decimal part into integer (rounded)\n        while (part.length &lt; casasDec)\n            part = '0'+part;\n        if (casasDec &gt; 0)\n        {\n            resposta = sepDecimal+part;\n            num = Math.floor(num);\n        } else\n            num = Math.round(num);\n    } // end of decimal part\n    while (num &gt; 0) // integer part\n    {\n        part = (num - Math.floor(num/1000)*1000).toString(); // part = three less significant digits\n        num = Math.floor(num/1000);\n        if (num &gt; 0)\n            while (part.length &lt; 3) // 123.023.123  if sepMilhar = '.'\n                part = '0'+part; // 023\n        resposta = part+resposta;\n        if (num &gt; 0)\n            resposta = sepMilhar+resposta;\n    }\n    if (sinal &lt; 0)\n        resposta = '-'+resposta;\n    return resposta;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is a problem with all those solutions floating around using multipliers. Both kkyy and Christoph's solutions are wrong unfortunately.</p>\n\n<p>Please test your code for number <strong>551.175</strong> with 2 decimal places - it will round to <strong>551.17</strong> while it should be <strong>551.18</strong> ! But if you test for ex. 451.175 it will be ok - 451.18. So it's difficult to spot this error at a first glance.</p>\n\n<p>The problem is with multiplying: try 551.175 * 100 = 55117.49999999999 (ups!)</p>\n\n<p>So my idea is to treat it with toFixed() before using Math.round();</p>\n\n<pre><code>function roundFix(number, precision)\n{\n    var multi = Math.pow(10, precision);\n    return Math.round( (number * multi).toFixed(precision + 1) ) / multi;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>In JavaScript, when converting from a float to a string, how can I get just 2 digits after the decimal point? For example, 0.34 instead of 0.3445434.</p>\n",
            "last_activity_date": 1391616991,
            "question_id": 661562,
            "score": 189,
            "tags": [
                "javascript"
            ],
            "title": "How to format a float in javascript?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>You can trap the keydown on a form in javascript and prevent the even bubbling, I think.  ENTER on a webpage basically just submits the form that the currently selected control is placed in.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The ENTER key merely activates the form's default submit button, which will be the first </p>\n\n<pre><code>&lt;input type=\"submit\" /&gt;\n</code></pre>\n\n<p>the browser finds within the form.</p>\n\n<p>Therefore don't have a submit button, but something like</p>\n\n<pre><code>&lt;input type=\"button\" value=\"Submit\" onclick=\"submitform()\" /&gt;\n</code></pre>\n\n<p><hr /></p>\n\n<p><strong>EDIT</strong>: In response to discussion in comments:</p>\n\n<p>This doesn't work if you have only one text field - but it may be that is the desired behaviour in that case.</p>\n\n<p>The other issue is that this relies on Javascript to submit the form. This may be a problem from an accessibility point of view. This can be solved by writing the <code>&lt;input type='button'/&gt;</code> with javascript, and then put an <code>&lt;input type='submit' /&gt;</code> within a <code>&lt;noscript&gt;</code> tag. The drawback of this approach is that for javascript-disabled browsers you will then have form submissions on ENTER. It is up to the OP to decide what is the desired behaviour in this case.</p>\n\n<p>I know of no way of doing this without invoking javascript at all.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You will have to call this function whic will just cancel the default submit behaviour of the form. You can attach it to any input field or event.</p>\n\n<pre><code>function doNothing() {  \nvar keyCode = event.keyCode ? event.keyCode : event.which ? event.which : event.charCode;\n    if( keyCode == 13 ) {\n\n\n\tif(!e) var e = window.event;\n\n\te.cancelBubble = true;\n\te.returnValue = false;\n\n\tif (e.stopPropagation) {\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\t}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>[<strong><em>revision</em></strong> 2012, no inline handler, preserve textarea enter handling]</p>\n\n<pre><code>function checkEnter(e){\n e = e || event;\n var txtArea = /textarea/i.test((e.target || e.srcElement).tagName);\n return txtArea || (e.keyCode || e.which || e.charCode || 0) !== 13;\n}\n</code></pre>\n\n<p>Now you can define a keypress handler on the form:<br>\n<strike>&lt;form [...] onkeypress=\"return checkEnter(event)\"&gt;</strike></p>\n\n<pre><code>document.querySelector('form').onkeypress = checkEnter;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>Simply return false from the onsubmit handler</p>\n\n<pre><code>&lt;form onsubmit=\"return false;\"&gt;\n</code></pre>\n\n<p>or if you want a handler in the middle</p>\n\n<pre><code>&lt;script&gt;\nvar submitHandler = function() {\n  // do stuff\n  return false;\n}\n&lt;/script&gt;\n&lt;form onsubmit=\"return submitHandler()\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Here is a jQuery handler that can be used to stop enter submits, and also stop backspace key -> back.  The (keyCode: selectorString) pairs in the \"keyStop\" object are used to match nodes that shouldn't fire their default action.</p>\n\n<p>Remember that the web should be an accessable place, and this is breaking keyboard users expectations. That said, in my case the web application I am working on doesn't like the back button anyway, so disabling its' key shortcut is OK.  The \"should enter -> submit\" discussion is important, but not related to the actual question asked.</p>\n\n<p>Here is the code, up to you to think about accessability and why you would actually want to do this!</p>\n\n<pre><code>$(function(){\n var keyStop = {\n   8: \":not(input:text, textarea, input:file, input:password)\", // stop backspace = back\n   13: \"input:text, input:password\", // stop enter = submit \n\n   end: null\n };\n $(document).bind(\"keydown\", function(event){\n  var selector = keyStop[event.which];\n\n  if(selector !== undefined &amp;&amp; $(event.target).is(selector)) {\n      event.preventDefault(); //stop event\n  }\n  return true;\n });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<pre><code>stopSubmitOnEnter (e) {\n  var eve = e || window.event;\n  var keycode = eve.keyCode || eve.which || eve.charCode;\n\n  if (keycode == 13) {\n    eve.cancelBubble = true;\n    eve.returnValue = false;\n\n    if (eve.stopPropagation) {   \n      eve.stopPropagation();\n      eve.preventDefault();\n    }\n\n    return false;\n  }\n}\n</code></pre>\n\n<p>Then on your form:</p>\n\n<pre><code>&lt;form id=\"foo\" onkeypress=\"stopSubmitOnEnter(e);\"&gt;\n</code></pre>\n\n<p>Though, it would be better if you didn't use obtrusive JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In my case, this jQuery JavaScript solved the problem</p>\n\n<pre><code>jQuery(function() {\n            jQuery(\"form.myform\").submit(function(event) {\n               event.preventDefault();\n               return false;\n            });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>How about:</p>\n\n<pre><code>&lt;asp:Button ID=\"button\" UseSubmitBehavior=\"false\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This link provides a solution that has worked for me in Chrome, FF, and IE9 plus the emulator for IE7 and 8 that comes with IE9's developer tool (F12).</p>\n\n<p><a href=\"http://webcheatsheet.com/javascript/disable_enter_key.php\" rel=\"nofollow\">http://webcheatsheet.com/javascript/disable_enter_key.php</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>//Turn off submit on \"Enter\" key\n\n$(\"form\").bind(\"keypress\", function (e) {\n    if (e.keyCode == 13) {\n        $(\"#btnSearch\").attr('value');\n        //add more buttons here\n        return false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Preventing \"ENTER\" to submit form may inconvenience some of your users. So it would be better if you follow the procedure below:</p>\n\n<p>Write the 'onSubmit' event in your form tag:</p>\n\n<pre><code>&lt;form name=\"formname\" id=\"formId\" onSubmit=\"return testSubmit()\" ...&gt;\n ....\n ....\n ....\n&lt;/form&gt;\n</code></pre>\n\n<p>write Javascript function as follows:</p>\n\n<pre><code>function testSubmit(){\n  if(jQuery(\"#formId\").valid())\n      {\n        return true;\n      }\n       return false;\n\n     } \n\n     (OR)\n</code></pre>\n\n<p>What ever the reason, if you want to prevent the form submission on pressing Enter key, you can write the following function in javascript:</p>\n\n<pre><code>    $(document).ready(function() {\n          $(window).keydown(function(event){\n          if(event.keyCode == 13) {\n               event.preventDefault();\n               return false;\n              }\n           });\n         });\n</code></pre>\n\n<p>thanks.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another approach is to append the submit input button to the form only when it is supposed to be submited and replace it by a simple div during the form filling</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Simply add this attribute to your FORM tag:</p>\n\n<pre><code>onsubmit=\"return gbCanSubmit;\"\n</code></pre>\n\n<p>Then, in your SCRIPT tag, add this:</p>\n\n<pre><code>var gbCanSubmit = false;\n</code></pre>\n\n<p>Then, when you make a button or for any other reason (like in a function) you finally permit a submit, simply flip the global boolean and do a .submit() call, similar to this example:</p>\n\n<pre><code>function submitClick(){\n\n  // error handler code goes here and return false if bad data\n\n  // okay, proceed...\n  gbCanSubmit = true;\n  $('#myform').submit(); // jQuery example\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Add this tag to your form - <code>onsubmit=\"return false;\"</code>\nThen you can only submit your form with some JavaScript function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I've spent some time making this cross browser for IE8,9,10, Opera 9+, Firefox 23, Safari (PC) and Safari(MAC)</p>\n\n<p><strong>JSFiddle Example:</strong> <a href=\"http://jsfiddle.net/greatbigmassive/ZyeHe/\" rel=\"nofollow\">http://jsfiddle.net/greatbigmassive/ZyeHe/</a></p>\n\n<p>Base code - Call this function via \"onkeypress\" attached to your form and pass \"window.event\" into it.</p>\n\n<pre><code>function stopEnterSubmitting(e) {\n    if (e.keyCode == 13) {\n        var src = e.srcElement || e.target;\n        if (src.tagName.toLowerCase() != \"textarea\") {\n            if (e.preventDefault) {\n                e.preventDefault();\n            } else {\n                e.returnValue = false;\n            }\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>All the answers I found on this subject, here or in other posts has one drawback and that is it prevents the actual change trigger on the form element as well. So if you run these solutions onchange event is not triggered as well. To overcome this problem I modified these codes and developed the following code for myself. I hope this becomes useful for others.\nI gave a class to my form \"prevent_auto_submit\" and added the following JavaScript:</p>\n\n<pre><code>$(document).ready(function() \n{\n    $('form.prevent_auto_submit input,form.prevent_auto_submit select').keypress(function(event) \n    { \n        if (event.keyCode == 13)\n        {\n            event.preventDefault();\n            $(this).trigger(\"change\");\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Exclude event submit all elements:</p>\n\n<pre>var form = $('#myform').submit(function(s){ return (s.timeStamp > 0);});</pre>\n\n<p>Generate click event for submit form:</p>\n\n<pre>form.submit();</pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>put into javascript external file </p>\n\n<pre><code>   (function ($) {\n $(window).keydown(function (event) {  \n\n    if (event.keyCode == 13) {\n\n        return false;\n    }\n});\n\n })(jQuery);\n</code></pre>\n\n<p>or somewhere inside body tag</p>\n\n<pre><code>&lt;script&gt;\n\n\n$(document).ready(function() {\n    $(window).keydown(function(event) {\n        alert(1);\n\n        if(event.keyCode == 13) {\n\n            return false;\n        }\n    });\n});\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Sometimes its enough to just return false from the handler.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the same problem (forms with tons of text fields and unskilled users).</p>\n\n<p>I solved it in this way:</p>\n\n<pre><code>function chkSubmit() {\n    if (window.confirm('Do you want to store the data?')) {\n        return true;\n    } else {\n        // some code to focus on a specific field\n        return false;\n    }\n}\n</code></pre>\n\n<p>using this in the HTML code:</p>\n\n<pre><code>&lt;form\n    action=\"go.php\" \n    method=\"post\"\n    accept-charset=\"utf-8\"  \n    enctype=\"multipart/form-data\"\n    onsubmit=\"return chkSubmit()\"\n&gt;\n</code></pre>\n\n<p>In this way the <code>ENTER</code> key works as planned, but a confirmation (a second <code>ENTER</code> tap, usually) is required.</p>\n\n<p>I leave to the readers the quest for a script sending the user in the field where he pressed <code>ENTER</code> if he decide to stay on the form.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you prevent an <kbd>ENTER</kbd> key press from submitting a form in a web-based application? I need a detailed answer.</p>\n",
            "last_activity_date": 1425812550,
            "question_id": 585396,
            "score": 103,
            "tags": [
                "javascript",
                "events"
            ],
            "title": "How to prevent ENTER keypress to submit a web form?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You could use the <code>keydown</code>, <code>keyup</code> and <code>keypress</code> events as well.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>So, you want the <code>onchange</code> event to fire on keydown, blur, <em>and</em> paste? That's magic.</p>\n\n<p>If you want to track changes as they type, use <code>\"onkeydown\"</code>. If you need to trap paste operations with the mouse, use <code>\"onpaste\"</code> (<a href=\"http://msdn.microsoft.com/en-us/library/ms536955%28VS.85,loband%29.aspx\">IE</a>, <a href=\"https://developer.mozilla.org/En/DOM/Element.onpaste\">FF3</a>) and <code>\"oninput\"</code> (<a href=\"http://help.dottoro.com/ljhxklln.php\">FF, Opera, Chrome, Safari</a><sup>1</sup>).</p>\n\n<p><sup>1</sup><sub>Broken for <code>&lt;textarea&gt;</code> on Safari. Use <a href=\"http://help.dottoro.com/ljhiwalm.php\"><code>textInput</code></a> instead</sub></p>\n",
                    "is_accepted": true,
                    "score": 106
                },
                {
                    "body": "<p>I had a similar requirement (twitter style text field). Used <code>onkeyup</code> and <code>onchange</code>. <code>onchange</code> actually takes care of mouse paste operations during lost focus from the field.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>onkeyup</strong> happens after you type for example I press \"t\" when I lift the finger the action happens but on <strong>keydown</strong> the action happens before I digit the character \"t\"</p>\n\n<p>Hope this is helpfull for someone. </p>\n\n<p>So onkeyup is better for when you whant to send what you just typed NOW.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you use ONLY Internet Explorer, you can use this:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"myID\" onpropertychange=\"TextChange(this)\" /&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    function TextChange(tBox) {\n        if(event.propertyName=='value') {\n            //your code here\n        }\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>there is a quite near solution (do not fix all Paste ways) but most of them:</p>\n\n<p>It works for inputs as well as for textareas:</p>\n\n<pre><code>&lt;input type=\"text\" ... &gt;\n&lt;textarea ... &gt;...&lt;/textarea&gt;\n</code></pre>\n\n<p>Do like this:</p>\n\n<pre><code>&lt;input type=\"text\" ... onkeyup=\"JavaScript: ControlChanges()\" onmouseup=\"JavaScript: ControlChanges()\" &gt;\n&lt;textarea ... onkeyup=\"JavaScript: ControlChanges()\" onmouseup=\"JavaScript: ControlChanges()\" &gt;...&lt;/textarea&gt;\n</code></pre>\n\n<p>As i said, not all ways to Paste fire an event on all browsers... worst some do not fire any event at all, but Timers are horrible to be used for such.</p>\n\n<p>But most of Paste ways are done with keyboard and/or mouse, so normally an onkeyup or onmouseup are fired after a paste, also onkeyup is fired when typing on keyboard.</p>\n\n<p>Ensure yor check code does not take much time... otherwise user get a poor impresion.</p>\n\n<p>Yes, the trick is to fire on key and on mouse... but beware both can be fired, so take in mind such!!!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Javascript is unpredictable and funny here.</p>\n\n<ul>\n<li><code>onchange</code> occurs only when you blur the textbox</li>\n<li><code>onkeyup</code> &amp; <code>onkeypress</code> doesn't always occur on text change</li>\n<li><code>onkeydown</code> occurs on text change (but cannot track cut &amp; paste with mouse click)</li>\n<li><code>onpaste</code> &amp; <code>oncut</code> occurs with keypress and even with the mouse right click.</li>\n</ul>\n\n<p>So, to track the change in textbox, we need <code>onkeydown</code>, <code>oncut</code> and <code>onpaste</code>. In the callback of these event, if you check the value of the textbox then you don't get the updated value as the value is changed after the callback. So a solution for this is to set a timeout function with a timeout of 50 mili-seconds (or may be less)  to track the change.</p>\n\n<p>This is a dirty hack but this is the only way, as I researched.</p>\n\n<p>Here is an example.\n<a href=\"http://jsfiddle.net/2BfGC/12/\">http://jsfiddle.net/2BfGC/12/</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Please, judge next approach using JQuery:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"inputId\" /&gt;\n</code></pre>\n\n<p>Javascript(JQuery):</p>\n\n<pre><code>$(\"#inputId\").keyup(function(){\n        $(\"#inputId\").blur();\n        $(\"#inputId\").focus();\n});\n\n$(\"#inputId\").change(function(){\n        //do whatever you need to do on actual change of the value of the input field\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>These days listen for <code>oninput</code>.</strong> It feels like <code>onchange</code> without the need to lose focus on the element.</p>\n\n<p>It\u2019s supported by everyone, except IE8 and below. For IE add <code>onpropertychange</code>. I use it like this:</p>\n\n<pre><code>&lt;script&gt;\n    onload = function () {\n       var e = document.getElementById('myInput');\n\u00a0\u00a0\u00a0    e.oninput = myHandler;\n       e.onpropertychange = e.oninput; // for IE8\n       // e.onchange = e.oninput; // FF needs this in &lt;select&gt;&lt;option&gt;...\n       // other things for onload()\n    };\n&lt;/script&gt;\n&lt;input type=text id=myInput&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>\"input\" worked for me. </p>\n\n<pre><code>var searchBar  = document.getElementById(\"searchBar\");\nsearchBar.addEventListener(\"input\", PredictSearch, false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Below code works fine for me with Jquery 1.8.3</p>\n\n<p>HTML : <code>&lt;input type=\"text\" id=\"myId\" /&gt;</code></p>\n\n<p>Javascript/JQuery:\n <code>$(\"#myId\").on('change keydown paste input', function(){\n          doSomething();\n     });</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In my experience, input type=\"text\" onchange event usually occurs only after you leave (blur) the control.</p>\n\n<p>Is there a way to force browser to trigger onchange every time textfield content changes? If not, what is the most elegant way to track this \u201cmanually\u201d?</p>\n\n<p>Using onkey* events is not reliable, since you can right-click the field and choose Paste, and this will change the field without any keyboard input.</p>\n\n<p>Is setTimeout the only way?.. Ugly :-)</p>\n",
            "last_activity_date": 1424795173,
            "question_id": 574941,
            "score": 112,
            "tags": [
                "javascript",
                "html",
                "html-form"
            ],
            "title": "Best way to track onchange as-you-type in input type=&quot;text&quot;?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Store the names in a array and look up by the index of the month.</p>\n\n<pre><code>var month=new Array(12);\nmonth[0]=\"January\";\nmonth[1]=\"February\";\nmonth[2]=\"March\";\nmonth[3]=\"April\";\nmonth[4]=\"May\";\nmonth[5]=\"June\";\nmonth[6]=\"July\";\nmonth[7]=\"August\";\nmonth[8]=\"September\";\nmonth[9]=\"October\";\nmonth[10]=\"November\";\nmonth[11]=\"December\";\n\ndocument.write(\"The current month is \" + month[d.getMonth()]);\n</code></pre>\n\n<p><a href=\"http://www.w3schools.com/jsref/jsref%5FgetMonth.asp\" rel=\"nofollow\">JavaScript getMonth() Method</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Shorter version:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nvar d = new Date();\r\ndocument.write(\"The current month is \" + monthNames[d.getMonth()]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 324
                },
                {
                    "body": "<p>If you don't mind extending the Date prototype (and there are some good reasons to not want to do this), you can actually come up with a very easy method:</p>\n\n<pre><code>Date.prototype.monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\",\n    \"October\", \"November\", \"December\"\n];\n\nDate.prototype.getMonthName = function() {\n    return this.monthNames[this.getMonth()];\n};\nDate.prototype.getShortMonthName = function () {\n    return this.getMonthName().substr(0, 3);\n};\n\n// usage:\nvar d = new Date();\nalert(d.getMonthName());      // \"October\"\nalert(d.getShortMonthName()); // \"Oct\"\n</code></pre>\n\n<p>These functions will then apply to <em>all</em> javascript Date objects.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>Here's another one, with support for localization :)</p>\n\n<pre><code>Date.prototype.getMonthName = function(lang) {\n    lang = lang &amp;&amp; (lang in Date.locale) ? lang : 'en';\n    return Date.locale[lang].month_names[this.getMonth()];\n};\n\nDate.prototype.getMonthNameShort = function(lang) {\n    lang = lang &amp;&amp; (lang in Date.locale) ? lang : 'en';\n    return Date.locale[lang].month_names_short[this.getMonth()];\n};\n\nDate.locale = {\n    en: {\n       month_names: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n       month_names_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    }\n};\n</code></pre>\n\n<p>you can then easily add support for other languages:</p>\n\n<pre><code>Date.locale.fr = {month_names: [...]};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<p>You might use <a href=\"http://www.datejs.com\">datejs</a> to do that. Check the <a href=\"http://code.google.com/p/datejs/wiki/FormatSpecifiers\">FormatSpecifiers</a>, MMMM gives you the month's name:</p>\n\n<pre><code>var objDate = new Date(\"10/11/2009\");\ndocument.write(objDate.toString(\"MMMM\"));\n</code></pre>\n\n<p>And datejs got that localized for more than 150 locales! <a href=\"http://code.google.com/p/datejs/source/browse/trunk/#trunk/build\">See here</a></p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>There's a really useful date bolt-on here:\n<a href=\"http://code.google.com/p/jqueryjs/source/browse/trunk/plugins/methods/date.js?r=6305\" rel=\"nofollow\">http://code.google.com/p/jqueryjs/source/browse/trunk/plugins/methods/date.js?r=6305</a>\nThis extends the built-in Date class with methods such as getMonthName() etc..</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>Date.prototype.getMonthName = function() {\n          var monthNames = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \n                        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n          return monthNames[this.getMonth()];\n     }\n\nIt can be used as\n      var month_Name = new Date().getMonthName();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I have a partial solution that I came up with. It uses a regular expression to extract the month and day name. But as I look through the Region and Language options (Windows) I realize that different cultures have different format order...  maybe a better regular expression pattern could be useful.</p>\n\n<pre><code>function testDateInfo() {\n        var months = new Array();\n        var days = new Array();\n        var workingDate = new Date();\n        workingDate.setHours(0, 0, 0, 0);\n        workingDate.setDate(1);\n        var RE = new RegExp(\"([a-z]+)\",\"ig\");\n        //-- get day names 0-6\n        for (var i = 0; i &lt; 7; i++) {\n\n            var day = workingDate.getDay();\n            //-- will eventually be in order\n            if (days[day] == undefined)\n                days[day] = workingDate.toLocaleDateString().match(RE)[0];\n            workingDate.setDate(workingDate.getDate() + 1);\n        }\n        //--get month names 0-11\n        for (var i = 0; i &lt; 12; i++) {\n            workingDate.setMonth(i);\n            months.push(workingDate.toLocaleDateString().match(RE)[1]);\n        }\n        alert(days.join(\",\") + \" \\n\\r \" + months.join(\",\"));\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just extending on the many other excellent answers - if you are using jQuery - you could just do something like</p>\n\n<pre><code>$.fn.getMonthName = function(date) {\n\n    var monthNames = [\n    \"January\", \"February\", \"March\",\n    \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\",\n    \"October\", \"November\", \"December\"\n    ];\n\n    return monthNames[date.getMonth()];\n\n};\n</code></pre>\n\n<p>where <code>date</code> is equal to the <code>var d = new Date(somevalue)</code>. The primary advantage of this is per @nickf said about avoiding the global namespace.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I heartily recommend the <a href=\"http://momentjs.com/docs/#/displaying/format/\"><code>format</code></a> function from, the <a href=\"http://momentjs.com\"><strong>moment.js</strong></a> library, which you can use like this:</p>\n\n<pre><code>moment().format(\"MMM\");  // \"April\" - current date\nmoment(new Date(2012, 01, 04)).format(\"MMM\");  // \"Feb\" - from a local date\nmoment.utc(new Date(2012, 00, 04).format(\"MMM\"); // \"Jan\" - from a UTC date\n</code></pre>\n\n<p>In addition to a lengthy list of other features, it has strong <a href=\"http://momentjs.com/docs/#/i18n/\">support for internationalization</a>.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>If you're using jQuery, you're probably also using jQuery UI, which means you can use <a href=\"http://api.jqueryui.com/datepicker/\" rel=\"nofollow\">$.datepicker.formatDate()</a>.</p>\n\n<pre><code>$.datepicker.setDefaults( $.datepicker.regional[ \"nl\" ] );   // dutch\n$.datepicker.formatDate( \"dd MM yy\", objDate );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use one of several available Date formatters. Since this falls within the JavaScript specification, it will be available in both browser and server-side modes.</p>\n\n<pre><code>objDate.toString().split(\" \")[1]; // gives short name, unsure about locale \nobjDate.toLocaleDateString.split(\" \")[0]; // gives long name\n</code></pre>\n\n<p>e.g.</p>\n\n<pre><code>js&gt; objDate = new Date(new Date() - 9876543210)\nMon Feb 04 2013 12:37:09 GMT-0800 (PST)\njs&gt; objDate.toString().split(\" \")[1]\nFeb\njs&gt; objDate.toLocaleString().split(\" \")[0]\nFebruary\n</code></pre>\n\n<p>There are more at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It is now possible to do this with the ECMAScript Internationalization API:</p>\n\n<pre><code>var objDate = new Date(\"10/11/2009\"),\n    locale = \"en-us\",\n    month = objDate.toLocaleString(locale, { month: \"long\" });\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/dstorey/Xgerq/\">http://jsfiddle.net/dstorey/Xgerq/</a></p>\n\n<p>\"long\" uses the full name of the month, \"short\" for the short name, and \"narrow\" for a more minimal version, such as the first letter in alphabetical languages.</p>\n\n<p>You can change the locale to any that you please, and it will use the right name for that language/country. </p>\n\n<p>With <code>toLocaleString</code> you have to pass in the locale and options each time. If you are going do use the same locale info and formatting options on multiple different dates, you can use <code>Intl.DateTimeFormat</code> instead:</p>\n\n<pre><code>var formatter = new Intl.DateTimeFormat(\"fr\", { month: \"short\" }),\nmonth1 = formatter.format(new Date()),\nmonth2 = formatter.format(new Date(2003-05-12));\n\n// sept. and d\u00e9c.\nconsole.log(month1 + \" and \" + month2);\n</code></pre>\n\n<p>The main issue with this API is it is very new. It is only available in Blink browsers (Chrome and Opera), IE11, and Firefox 29+.</p>\n\n<p>For more information see my blog post on the <a href=\"http://generatedcontent.org/post/59403168016/esintlapi\">Internationalization API</a>.</p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>To get a array of month name :</p>\n\n<pre><code>Date.monthNames = function( ) {\nvar arrMonth = [],\n    dateRef = new Date(),\n    year = dateRef.getFullYear();\n\ndateRef.setMonth(0);\nwhile (year == dateRef.getFullYear()) {\n    /* push le mois en lettre et passe au mois suivant */\n    arrMonth.push( (dateRef.toLocaleString().split(' '))[2] );\n    dateRef.setMonth( dateRef.getMonth() + 1);\n}\n\nreturn arrMonth;\n}\n\nalert(Date.monthNames().toString());\n\n// -&gt; janvier,f\u00e9vrier,mars,avril,mai,juin,juillet,ao\u00fbt,septembre,octobre,novembre,d\u00e9cembre\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/polinux/qb346/\" rel=\"nofollow\">http://jsfiddle.net/polinux/qb346/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a way that does not depend on a hard-coded array and supports multiple locales.</p>\n\n<p><strong>If you need a whole array:</strong></p>\n\n<pre><code>var monthsLocalizedArray = function(locale) {\n    var result = [];\n    for(var i = 0; i &lt; 12; i++) {\n        result.push(new Date(2010,i).toLocaleString(locale,{month:\"long\"}));\n    }\n    return result;\n};\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>console.log(monthsLocalizedArray('en')); // -&gt; [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nconsole.log(monthsLocalizedArray('bg')); // -&gt; [\"\u044f\u043d\u0443\u0430\u0440\u0438\", \"\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438\", \"\u043c\u0430\u0440\u0442\", \"\u0430\u043f\u0440\u0438\u043b\", \"\u043c\u0430\u0439\", \"\u044e\u043d\u0438\", \"\u044e\u043b\u0438\", \"\u0430\u0432\u0433\u0443\u0441\u0442\", \"\u0441\u0435\u043f\u0442\u0435\u043c\u0432\u0440\u0438\", \"\u043e\u043a\u0442\u043e\u043c\u0432\u0440\u0438\", \"\u043d\u043e\u0435\u043c\u0432\u0440\u0438\", \"\u0434\u0435\u043a\u0435\u043c\u0432\u0440\u0438\"]\n</code></pre>\n\n<p><strong>If you need only a selected month (faster):</strong></p>\n\n<pre><code>var monthLocalizedString = function(month, locale) {\n    return new Date(2010,month).toLocaleString(locale,{month:\"long\"});\n};\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>console.log(monthLocalizedString(1, 'en')); // -&gt; February\nconsole.log(monthLocalizedString(1, 'bg')); // -&gt; \u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438\nconsole.log(monthLocalizedString(1, 'de')); // -&gt; Februar\n</code></pre>\n\n<p>Tested and works fine on Chrome and IE 11. On mozilla some modifications are needed, because it returns the whole date.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Unfortunately the best way to extract the month name is from the UTCString representation:</p>\n\n<pre><code>Date.prototype.monthName = function() {\n    return this.toUTCString().split(' ')[2]\n};\n\nd = new Date();\n//=&gt; Thu Mar 06 2014 23:05:21 GMT+0000 (GMT)\n\nd.monthName();\n//=&gt; 'Mar'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you don't want to use an external library, or store an array of month names, or if the ECMAScript Internationalization API is not good enough because of browser compatibility you can always do it the old-fashioned way by extracting the info from the date output:</p>\n\n<pre><code>var now = new Date();\nvar monthAbbrvName = now.toDateString().substring(4, 7);\n</code></pre>\n\n<p>This would give you the abbreviated month name, e.g. Oct. I believe the date will come in all sorts of formats depending on the initialization and your locale so take a look at what <code>toDateString()</code> returns and recalculate your <code>substring()</code> values based on that.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My Best Solution is as follow:</p>\n\n<pre><code>       var dateValue = Date();\n       var month = dateValue.substring(4,7);\n       var date = dateValue.substring(8,10);\n       var year = dateValue.substring(20,24);\n       var finaldateString = date+\"-\"+month+\"-\"+year;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>How can I generate the name of the month (e.g: Oct/October) from this date object in JavaScript?</p>\n\n<pre><code>var objDate = new Date(\"10/11/2009\");\n</code></pre>\n",
            "last_activity_date": 1425479861,
            "question_id": 1643320,
            "score": 158,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "Get month name from Date"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Try storing the state in a attribute on the element itself, such as <code>superDirectiveStatus=\"true\"</code></p>\n\n<p>For example:</p>\n\n<pre><code>angular.module('app')\n  .directive('superDirective', function ($compile, $injector) {\n    return {\n      restrict: 'A',\n      replace: true,\n      link: function compile(scope, element, attrs) {\n        if (element.attr('datepicker')) { // check\n          return;\n        }\n        var status = element.attr('superDirectiveStatus');\n        if( status !== \"true\" ){\n             element.attr('datepicker', 'someValue');\n             element.attr('datepicker-language', 'en');\n             // some more\n             element.attr('superDirectiveStatus','true');\n             $compile(element)(scope);\n\n        }\n\n      }\n    };\n  });\n</code></pre>\n\n<p>I hope this helps you. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In cases where you have multiple directives on a single DOM element and where the\norder in which they\u2019re applied matters, you can use the <code>priority</code> property to order their\napplication. Higher numbers run first. The default priority is 0 if you don\u2019t specify one.</p>\n\n<p><strong>EDIT</strong>: after the discussion, here's the complete working solution. The key was to <strong>remove the attribute</strong>: <code>element.removeAttr(\"common-things\");</code>, and also <code>element.removeAttr(\"data-common-things\");</code> (in case users specify <code>data-common-things</code> in the html)</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('app')\n  .directive('commonThings', function ($compile) {\n    return {\n      restrict: 'A',\n      replace: false, \n      terminal: true, //this setting is important, see explanation below\n      priority: 1000, //this setting is important, see explanation below\n      compile: function compile(element, attrs) {\n        element.attr('tooltip', '{{dt()}}');\n        element.attr('tooltip-placement', 'bottom');\n        element.removeAttr(\"common-things\"); //remove the attribute to avoid indefinite loop\n        element.removeAttr(\"data-common-things\"); //also remove the same attribute with data- prefix in case users specify data-common-things in the html\n\n        return {\n          pre: function preLink(scope, iElement, iAttrs, controller) {  },\n          post: function postLink(scope, iElement, iAttrs, controller) {  \n            $compile(iElement)(scope);\n          }\n        };\n      }\n    };\n  });\n</code></pre>\n\n<p>Working plunker is available at: <a href=\"http://plnkr.co/edit/Q13bUt?p=preview\">http://plnkr.co/edit/Q13bUt?p=preview</a></p>\n\n<p>Or:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('app')\n  .directive('commonThings', function ($compile) {\n    return {\n      restrict: 'A',\n      replace: false,\n      terminal: true,\n      priority: 1000,\n      link: function link(scope,element, attrs) {\n        element.attr('tooltip', '{{dt()}}');\n        element.attr('tooltip-placement', 'bottom');\n        element.removeAttr(\"common-things\"); //remove the attribute to avoid indefinite loop\n        element.removeAttr(\"data-common-things\"); //also remove the same attribute with data- prefix in case users specify data-common-things in the html\n\n        $compile(element)(scope);\n      }\n    };\n  });\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/Tw1Pbt?p=preview\">DEMO</a></p>\n\n<p><strong>Explanation why we have to set <code>terminal: true</code> and <code>priority: 1000</code> (a high number):</strong></p>\n\n<p>When the DOM is ready, angular walks the DOM to identify all registered directives and compile the directives one by one based on <code>priority</code> <strong>if these directives are on the same element</strong>. We set our custom directive's priority to a high number to ensure that it will be compiled <strong>first</strong> and with <code>terminal: true</code>, the other directives will be <strong>skipped</strong> after this directive is compiled. </p>\n\n<p>When our custom directive is compiled, it will modify the element by adding directives and removing itself and use $compile service to <strong>compile all the directives (including those that were skipped)</strong>.</p>\n\n<p>If we don't set <code>terminal:true</code> and <code>priority: 1000</code>, there is a chance that some directives are compiled <strong>before</strong> our custom directive. And when our custom directive uses $compile to compile the element => compile again the already compiled directives. This will cause unpredictable behavior especially if the directives compiled before our custom directive have already transformed the DOM.</p>\n\n<p>For more information about priority and terminal, check out <a href=\"http://stackoverflow.com/questions/15266840/how-to-understand-the-terminal-of-directive\">How to understand the `terminal` of directive?</a></p>\n\n<p>An example of a directive that also modifies the template is <code>ng-repeat</code> (priority = 1000), when <code>ng-repeat</code> is compiled, <code>ng-repeat</code> <em>make copies of the template element before other directives get applied</em>. </p>\n\n<p>Thanks to @Izhaki's comment, here is the reference to <code>ngRepeat</code> source code: <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js\">https://github.com/angular/angular.js/blob/master/src/ng/directive/ngRepeat.js</a></p>\n",
                    "is_accepted": true,
                    "score": 116
                },
                {
                    "body": "<p>You can actually handle all of this with just a simple template tag. See <a href=\"http://jsfiddle.net/m4ve9/\" rel=\"nofollow\">http://jsfiddle.net/m4ve9/</a> for an example. Note that I actually didn't need a compile or link property on the super-directive definition.</p>\n\n<p>During the compilation process, Angular pulls in the template values before compiling, so you can attach any further directives there and Angular will take care of it for you.</p>\n\n<p>If this is a super directive that needs to preserve the original internal content, you can use <code>transclude : true</code> and replace the inside with <code>&lt;ng-transclude&gt;&lt;/ng-transclude&gt;</code></p>\n\n<p>Hope that helps, let me know if anything is unclear</p>\n\n<p>Alex</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's a solution that moves the directives that need to be added dynamically, into the view and also adds some optional (basic) conditional-logic. This keeps the directive clean with no hard-coded logic.</p>\n\n<p>The directive takes an array of objects, each object contains the name of the directive to be added and the value to pass to it (if any).</p>\n\n<p>I was struggling to think of a use-case for a directive like this until I thought that it might be useful to add some conditional logic that only adds a directive based on some condition (though the answer below is still contrived). I added an optional <code>if</code> property that should contain a bool value, expression or function (e.g. defined in your controller) that determines if the directive should be added or not.</p>\n\n<p>I'm also using <code>attrs.$attr.dynamicDirectives</code> to get the exact attribute declaration used to add the directive (e.g. <code>data-dynamic-directive</code>, <code>dynamic-directive</code>) without hard-coding string values to check for. </p>\n\n<p><a href=\"http://plnkr.co/edit/f28p1z?p=preview\" rel=\"nofollow\"><kbd>Plunker Demo</kbd></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>angular.module('plunker', ['ui.bootstrap'])\r\n    .controller('DatepickerDemoCtrl', ['$scope',\r\n        function($scope) {\r\n            $scope.dt = function() {\r\n                return new Date();\r\n            };\r\n            $scope.selects = [1, 2, 3, 4];\r\n            $scope.el = 2;\r\n\r\n            // For use with our dynamic-directive\r\n            $scope.selectIsRequired = true;\r\n            $scope.addTooltip = function() {\r\n                return true;\r\n            };\r\n        }\r\n    ])\r\n    .directive('dynamicDirectives', ['$compile',\r\n        function($compile) {\r\n            \r\n             var addDirectiveToElement = function(scope, element, dir) {\r\n                var propName;\r\n                if (dir.if) {\r\n                    propName = Object.keys(dir)[1];\r\n                    var addDirective = scope.$eval(dir.if);\r\n                    if (addDirective) {\r\n                        element.attr(propName, dir[propName]);\r\n                    }\r\n                } else { // No condition, just add directive\r\n                    propName = Object.keys(dir)[0];\r\n                    element.attr(propName, dir[propName]);\r\n                }\r\n            };\r\n            \r\n            var linker = function(scope, element, attrs) {\r\n                var directives = scope.$eval(attrs.dynamicDirectives);\r\n        \r\n                if (!directives || !angular.isArray(directives)) {\r\n                    return $compile(element)(scope);\r\n                }\r\n               \r\n                // Add all directives in the array\r\n                angular.forEach(directives, function(dir){\r\n                    addDirectiveToElement(scope, element, dir);\r\n                });\r\n                \r\n                // Remove attribute used to add this directive\r\n                element.removeAttr(attrs.$attr.dynamicDirectives);\r\n                // Compile element to run other directives\r\n                $compile(element)(scope);\r\n            };\r\n        \r\n            return {\r\n                priority: 1000, // Run before other directives,\r\n                terminal: true, // Stop other directives running\r\n                link: linker\r\n            };\r\n        }\r\n    ]);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\r\n&lt;html ng-app=\"plunker\"&gt;\r\n\r\n&lt;head&gt;\r\n    &lt;script src=\"//code.angularjs.org/1.2.20/angular.js\"&gt;&lt;/script&gt;\r\n    &lt;script src=\"//angular-ui.github.io/bootstrap/ui-bootstrap-tpls-0.6.0.js\"&gt;&lt;/script&gt;\r\n    &lt;script src=\"example.js\"&gt;&lt;/script&gt;\r\n    &lt;link href=\"//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css\" rel=\"stylesheet\"&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n\r\n    &lt;div data-ng-controller=\"DatepickerDemoCtrl\"&gt;\r\n\r\n        &lt;select data-ng-options=\"s for s in selects\" data-ng-model=\"el\" \r\n            data-dynamic-directives=\"[\r\n                { 'if' : 'selectIsRequired', 'ng-required' : '{{selectIsRequired}}' },\r\n                { 'tooltip-placement' : 'bottom' },\r\n                { 'if' : 'addTooltip()', 'tooltip' : '{{ dt() }}' }\r\n            ]\"&gt;\r\n            &lt;option value=\"\"&gt;&lt;/option&gt;\r\n        &lt;/select&gt;\r\n\r\n    &lt;/div&gt;\r\n&lt;/body&gt;\r\n\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I wanted to add my solution since the accepted one didn't quite work for me.</p>\n\n<p>I needed to add a directive but also keep mine on the element.</p>\n\n<p>In this example I am adding a simple ng-style directive to the element. To prevent infinite compile loops and allowing me to keep my directive I added a check to see if what I added was present before recompiling the element.</p>\n\n<pre><code>angular.module('some.directive', [])\n.directive('someDirective', ['$compile',function($compile){\n    return {\n        priority: 1001,\n        controller: ['$scope', '$element', '$attrs', '$transclude' ,function($scope, $element, $attrs, $transclude) {\n\n            // controller code here\n\n        }],\n        compile: function(element, attributes){\n            var compile = false;\n\n            //check to see if the target directive was already added\n            if(!element.attr('ng-style')){\n                //add the target directive\n                element.attr('ng-style', \"{'width':'200px'}\");\n                compile = true;\n            }\n            return {\n                pre: function preLink(scope, iElement, iAttrs, controller) {  },\n                post: function postLink(scope, iElement, iAttrs, controller) {\n                    if(compile){\n                        $compile(iElement)(scope);\n                    }\n                }\n            };\n        }\n    };\n}]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to build a directive that takes care of <strong>adding more directives</strong> to the element it is declared on.\nFor example, I want to build a directive that takes care of adding <code>datepicker</code>, <code>datepicker-language</code> and <code>ng-required=\"true\"</code>.</p>\n\n<p>If I try to add those attributes and then use <code>$compile</code> I obviously generate an infinite loop, so I am checking if I have already added the needed attributes:</p>\n\n<pre><code>angular.module('app')\n  .directive('superDirective', function ($compile, $injector) {\n    return {\n      restrict: 'A',\n      replace: true,\n      link: function compile(scope, element, attrs) {\n        if (element.attr('datepicker')) { // check\n          return;\n        }\n        element.attr('datepicker', 'someValue');\n        element.attr('datepicker-language', 'en');\n        // some more\n        $compile(element)(scope);\n      }\n    };\n  });\n</code></pre>\n\n<p>Of course, if I don't <code>$compile</code> the element, the attributes will be set but the directive won't be bootstrapped.</p>\n\n<p>Is this approach correct or am I doing it wrong? Is there a better way to achieve the same behavior?</p>\n\n<p><strong>UDPATE</strong>: given the fact that <code>$compile</code> is the only way to achieve this, is there a way to skip the first compilation pass (the element may contain several children)? Maybe by setting <code>terminal:true</code>?</p>\n\n<p><strong>UPDATE 2</strong>: I have tried putting the directive into a <code>select</code> element and, as expected, the compilation runs twice, which means there is twice the number of expected <code>option</code>s.</p>\n",
            "last_activity_date": 1423083309,
            "question_id": 19224028,
            "score": 72,
            "tags": [
                "javascript",
                "angularjs",
                "model-view-controller",
                "mvvm",
                "angularjs-directive"
            ],
            "title": "Add directives from directive in AngularJS"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Something like this maybe?</p>\n\n<pre><code>$(\"input:radio[name=theme]\").click(function() { \n ...\n});\n</code></pre>\n\n<p>When you click on any radio button, I believe it will end up selected, so this is going to be called for the selected radio button.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This should do it, all of this is in the <a href=\"http://docs.jquery.com/Selectors/attributeEquals#attributevalue\">documentation</a>, which has a very similar example to this:</p>\n\n<pre><code>$(\"input:radio[name=theme]\").click(function() {\n    var value = $(this).val();\n});\n</code></pre>\n\n<p>I should also note you have multiple identical IDs in that snippet. This is invalid HTML. Use classes to group set of elements, not IDs, as they should be unique.</p>\n",
                    "is_accepted": true,
                    "score": 237
                },
                {
                    "body": "<p>To determine which radio button is checked, try this:</p>\n\n<pre><code>$('input:radio[name=theme]').click(function() {\n  var val = $('input:radio[name=theme]:checked').val();\n});\n</code></pre>\n\n<p>The event will be caught for all of the radio buttons in the group and the value of the selected button will be placed in val.</p>\n\n<p><em>Update: After posting I decided that Paolo's answer above is better, since it uses one less DOM traversal. I am letting this answer stand since it shows how to get the selected element in a way that is cross-browser compatible.</em></p>\n",
                    "is_accepted": false,
                    "score": 126
                },
                {
                    "body": "<pre><code>$('input:radio[name=theme]').bind(\n  'click',\n  function(){\n    $(this).val();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you'd like to know the value of the default selected radio button before a click event, try this:</p>\n\n<pre>alert($(\"input:radio:checked\").val());</pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>can also use a CSS class to define the range of radio buttons and then use the following to determine the value</p>\n\n<pre><code>$('.radio_check:checked').val()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;input type=\"radio\" name=\"ans3\" value=\"help\"&gt; \n&lt;input type=\"radio\" name=\"ans3\" value=\"help1\"&gt;\n&lt;input type=\"radio\" name=\"ans3\" value=\"help2\"&gt;\n\n&lt;input type=\"radio\" name=\"ans2\" value=\"test\"&gt; \n&lt;input type=\"radio\" name=\"ans2\" value=\"test1\"&gt;\n&lt;input type=\"radio\" name=\"ans2\" value=\"test2\"&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n  var ans3 = jq(\"input[name='ans3']:checked\").val()\n  var ans2 = jq(\"input[name='ans2']:checked\").val()\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This works great for me. For example you have two radio buttons with the same \"name\", and you just wanted to get the value of the checked one. You may try this one.</p>\n\n<pre><code>$valueOfTheCheckedRadio = $('[name=radioName]:checked').val();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I found this question as I was researching an error after I upgraded from 1.7.2 of jQuery to 1.8.2. I'm adding my answer because there has been a change in jQuery 1.8 and higher that changes how this question is answered now.</p>\n\n<p><a href=\"http://blog.jquery.com/2012/08/09/jquery-1-8-released/\">With jQuery 1.8 they have deprecated</a> the pseudo-selectors like :radio, :checkbox, :text.</p>\n\n<p>To do the above now just replace the <code>:radio</code> with <code>[type=radio]</code>.</p>\n\n<p>So your answer now becomes for all versions of jQuery 1.8 and above:</p>\n\n<pre><code>$(\"input[type=radio][name=theme]\").click(function() { \n    var value = $(this).val(); \n}); \n</code></pre>\n\n<p>You can read about the <a href=\"http://blog.jquery.com/2012/08/09/jquery-1-8-released/\">change on the 1.8 readme</a> and <a href=\"http://bugs.jquery.com/ticket/9400\">the ticket specific for this change</a> as well as a understand why on the <a href=\"http://api.jquery.com/radio-selector/\">:radio selector page</a> under the Additional Information section.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This worked for me..</p>\n\n<p><em>HTML:</em></p>\n\n<pre><code>&lt;input type=\"radio\" class=\"radioClass\" name=\"radioName\" value=\"1\" /&gt;Test&lt;br/&gt;\n&lt;input type=\"radio\" class=\"radioClass\" name=\"radioName\" value=\"2\" /&gt;Practice&lt;br/&gt;\n&lt;input type=\"radio\" class=\"radioClass\" name=\"radioName\" value=\"3\" /&gt;Both&lt;br/&gt;\n</code></pre>\n\n<p><em>Jquery:</em></p>\n\n<pre>\n\n    $(\".radioClass\").each(function() {\n        if($(this).is(':checked'))\n        alert($(this).val());\n    });\n\n</pre>\n\n<p>Hope it helps..</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following code is used to get the selected radio button value by name </p>\n\n<pre><code>jQuery(\"input:radio[name=theme]:checked\").val();\n</code></pre>\n\n<p>Thanks\nAdnan</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>$('input:radio[name=theme]:checked').val();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 105
                },
                {
                    "body": "<p>If you want a true/false value, use this:</p>\n\n<pre><code>  $(\"input:radio[name=theme]\").is(\":checked\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>another way</p>\n\n<pre><code>$('input:radio[name=theme]').filter(\":checked\").val()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>For anyone who doesn't want to include a library to do something really simple:</p>\n\n<pre><code>document.querySelector('[name=\"theme\"]:checked').value;\n</code></pre>\n\n<h2><a href=\"http://jsfiddle.net/fyLL1dhu/\" rel=\"nofollow\">jsfiddle</a></h2>\n\n<p>For a performance overview of the current answers <a href=\"http://jsperf.com/getting-radio-value\" rel=\"nofollow\"><strong>check here</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I you have more than one group of radio buttons on the same page you can also try this to get the value of radio button:</p>\n\n<pre><code>$(\"input:radio[type=radio]\").click(function() {\nvar value = $(this).val();\nalert(value);\n</code></pre>\n\n<p>});</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use filter function if you have more than one radio group on the page, as below</p>\n\n<pre><code>$('input[type=radio]').change(function(){\n    var value = $(this).filter(':checked' ).val();\n    alert(value);\n});\n</code></pre>\n\n<p>Here is fiddle url</p>\n\n<p><a href=\"http://jsfiddle.net/h6ye7/67/\" rel=\"nofollow\">http://jsfiddle.net/h6ye7/67/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have 3 radio buttons in my web page, like below:</p>\n\n<pre><code>&lt;label for=\"theme-grey\"&gt;&lt;input type=\"radio\" id=\"theme-grey\" name=\"theme\" value=\"grey\" /&gt;Grey&lt;/label&gt;\n&lt;label for=\"theme-pink\"&gt;&lt;input type=\"radio\" id=\"theme-pink\" name=\"theme\" value=\"pink\" /&gt;Pink&lt;/label&gt;\n&lt;label for=\"theme-green\"&gt;&lt;input type=\"radio\" id=\"theme-green\" name=\"theme\" value=\"green\" /&gt;Green&lt;/label&gt;\n</code></pre>\n\n<p>In jQuery, I want to get the value of the selected radio button when any of these three are clicked. In jQuery we have id (#) and class (.) selectors, but what if I want to find a radio button by its name, as below?</p>\n\n<pre><code>$(\"&lt;radiobutton name attribute&gt;\").click(function(){});\n</code></pre>\n\n<p>Please tell me how to solve this problem.</p>\n",
            "last_activity_date": 1426029457,
            "question_id": 986120,
            "score": 231,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "radio-button"
            ],
            "title": "How to get the value of a selected radio button using its name?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.</p>\n\n<p>The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A <em>and</em> Promise B complete).</p>\n\n<p>By removing them from the core node.js, it created possibility of building up modules with different implementations of promises that can sit on top of the core.  Some of these are <a href=\"https://github.com/kriszyp/node-promise\">node-promise</a> and <a href=\"https://github.com/coolaj86/futures\">futures</a>.</p>\n",
                    "is_accepted": true,
                    "score": 60
                },
                {
                    "body": "<p>Since this question still has many views (like mine) I wanted to point out that:</p>\n\n<ol>\n<li><em>node-promise</em> looks rather dead to me (last commit was about 1 year ago) and contains nearly no tests.</li>\n<li>The <em>futures</em> module looks very bloated to me and is badly documented (and I think that the naming conventions are just bad)</li>\n<li>The best way to go seems to be the <a href=\"https://github.com/kriskowal/q\" rel=\"nofollow\">q framework</a>, which is both active and well-documented.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>It seems to me  <a href=\"http://api.jquery.com/deferred.promise/\" rel=\"nofollow\">jQuery's Promise</a> is the best way to go right now.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Mike Taulty <a href=\"http://mtaulty.com/CommunityServer/blogs/mike_taultys_blog/archive/2012/04/11/winjs-promises-1.aspx\" rel=\"nofollow\">has a series of videos</a>, each of them less than ten minutes long, describing how the WinJS Promise library works.</p>\n\n<p>These videos are quite informative, and Mike manages to show the power of the Promise API with a few well-chosen code examples.</p>\n\n<pre><code>var twitterUrl = \"http://search.twitter.com/search.json?q=windows\";\nvar promise = WinJS.xhr({ url: twitterUrl });\n\n promise = promise.then(\n     function (xhr) {\n     },\n     function (xhr) {\n         // handle error\n     });\n</code></pre>\n\n<p>The treatment of how exceptions are dealt with is particularly good.</p>\n\n<p>In spite of the WinJs references, this is a general interest video series, because the Promise API is broadly similar across its many implementations.</p>\n\n<p><a href=\"https://github.com/tildeio/rsvp.js?utm_source=javascriptweekly\" rel=\"nofollow\">RSVP</a> is a lightweight Promise implementation that passes the Promise/A+ test suite. I quite like the API, because it is similar in style to the WinJS interface.</p>\n\n<p><strong>Update Apr-2014</strong></p>\n\n<p>Incidentally, the WinJS library <a href=\"https://github.com/winjs/winjs\" rel=\"nofollow\">is now open source</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Another advantage of promises is that error handling and exception throwing and catching is much better than trying to handle that with callbacks.</p>\n\n<p>The <a href=\"https://github.com/petkaantonov/bluebird\" rel=\"nofollow\">bluebird</a> library implements promises and gives you great long stack traces, is very fast, and warns about uncaught errors. It is the best promise library available.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A promise is a \"thing\" which represents the \"eventual\" results of an operation so to speak. The point to note here is that, it abstracts away the details of <em>when</em> something happens and allows you to focus on what should happen <em>after</em> that something happens. This will result in clean, maintainable code where instead of having a callback inside a callback inside a callback, your code will look somewhat like:</p>\n\n<pre><code> var request = new Promise(function(resolve, reject) {\n   //do an ajax call here. or a database request or whatever.\n   //depending on its results, either call resolve(value) or reject(error)\n   //where value is the thing which the operation's successful execution returns and\n   //error is the thing which the operation's failure returns.\n });\n\n request.then(function successHandler(result) {\n   //do something with the result\n }, function failureHandler(error) {\n  //handle\n });\n</code></pre>\n\n<p>The promises' spec states that a promise's </p>\n\n<pre><code>then\n</code></pre>\n\n<p>method should return a new promise that is fulfilled when the given successHandler or the failureHandler callback is finished. This means that you can chain together promises when you have a set of asynchronous tasks that need to be performed and be assured that the sequencing of operations is guaranteed just as if you had used callbacks. So instead of passing a callback inside a callback inside a callback, the code with chained promises looks like:</p>\n\n<pre><code>var doStuff = firstAsyncFunction(url) {\n                return new Promise(function(resolve, reject) {\n                       $.ajax({\n                        url: url,\n                        success: function(data) {\n                            resolve(data);\n                        },\n                        error: function(err) {\n                             reject(err); \n                        } \n                  });\n               };\ndoStuff\n  .then(secondAsyncFunction) //returns a promise\n  .then(thirdAsyncFunction); //returns a promise\n</code></pre>\n\n<p>To know more about promises and why they are super cool, checkout Domenic's blog : <a href=\"http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/\" rel=\"nofollow\">http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I've been also looking into promises in node.js recently. To date the <a href=\"https://github.com/cujojs/when\" rel=\"nofollow\">when.js</a> seems to be the way to go due to its speed and resource use, but the documentation on <a href=\"https://github.com/kriskowal/q/wiki/API-Reference\" rel=\"nofollow\">q.js</a> gave me a lot better understanding. So use when.js but the q.js docs to understand the subject.</p>\n\n<p>From the <a href=\"https://github.com/kriskowal/q\" rel=\"nofollow\">q.js</a> readme on github:</p>\n\n<blockquote>\n  <p>If a function cannot return a value or throw an exception without\n  blocking, it can return a promise instead. A promise is an object that\n  represents the return value or the thrown exception that the function\n  may eventually provide. A promise can also be used as a proxy for a\n  remote object to overcome latency.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>From what I have understood there are three ways of calling asynchronous code:</p>\n\n<ol>\n<li>Events: eg. <code>request.on(\"event\"), callback);</code></li>\n<li>Callbacks: eg. <code>fs.open(path, flags, mode, callback);</code></li>\n<li>Promises</li>\n</ol>\n\n<p>I found a promise library <a href=\"https://github.com/kriszyp/node-promise\" rel=\"nofollow\">https://github.com/kriszyp/node-promise</a> but I don't get it.</p>\n\n<p>Could someone explain what promises are all about and why I should use it?</p>\n\n<p>Also, why was it removed from Node.js?</p>\n",
            "last_activity_date": 1425967323,
            "question_id": 4296505,
            "score": 88,
            "tags": [
                "javascript",
                "node.js",
                "promise"
            ],
            "title": "Understanding promises in node.js"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You are sending \"params\" in js:\n<code>request.send(params);</code></p>\n\n<p>but \"data\" in jquery\". Is data defined?:\n  <code>data:data,</code></p>\n\n<p>Also, you have an error in the URL: </p>\n\n<pre><code>$.ajax( {url:url,\n         type:\"POST\",\n         dataType:\"json\",\n         data:data, \n         success:function(data, textStatus, jqXHR) {alert(\"success\");},\n         error: function(jqXHR, textStatus, errorThrown) {alert(\"failure\");}\n});\n</code></pre>\n\n<p>You are mixing the syntax with the one for $.post</p>\n\n<hr>\n\n<p><strong>Update</strong>: I was googling around based on monsur answer, and I found that you need to add <code>Access-Control-Allow-Headers: Content-Type</code> (below is the full paragraph)</p>\n\n<p><a href=\"http://metajack.im/2010/01/19/crossdomain-ajax-for-xmpp-http-binding-made-easy/\" rel=\"nofollow\">http://metajack.im/2010/01/19/crossdomain-ajax-for-xmpp-http-binding-made-easy/</a></p>\n\n<blockquote>\n  <p>How CORS Works</p>\n  \n  <p>CORS works very similarly to Flash's\n  crossdomain.xml file. Basically, the\n  browser will send a cross-domain\n  request to a service, setting the HTTP\n  header Origin to the requesting\n  server. The service includes a few\n  headers like\n  Access-Control-Allow-Origin to\n  indicate whether such a request is\n  allowed.</p>\n  \n  <p>For the BOSH connection managers, it\n  is enough to specify that all origins\n  are allowed, by setting the value of\n  Access-Control-Allow-Origin to *. The\n  Content-Type header must also be\n  white-listed in the\n  Access-Control-Allow-Headers header.</p>\n  \n  <p>Finally, for certain types of\n  requests, including BOSH connection\n  manager requests, the permissions\n  check will be pre-flighted. The\n  browser will do an OPTIONS request and\n  expect to get back some HTTP headers\n  that indicate which origins are\n  allowed, which methods are allowed,\n  and how long this authorization will\n  last. For example, here is what the\n  Punjab and ejabberd patches I did\n  return for OPTIONS:</p>\n\n<pre><code>Access-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, OPTIONS\nAccess-Control-Allow-Headers: Content-Type \nAccess-Control-Max-Age: 86400\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Another possibility is that setting <code>dataType: json</code> causes JQuery to send the <code>Content-Type: application/json</code> header.  This is considered a non-standard header by CORS, and requires a CORS preflight request.  So a few things to try:</p>\n\n<p>1) Try configuring your server to send the proper preflight responses.  This will be in the form of additional headers like <code>Access-Control-Allow-Methods</code> and <code>Access-Control-Allow-Headers</code>.</p>\n\n<p>2) Drop the <code>dataType: json</code> setting.  JQuery should request <code>Content-Type: application/x-www-form-urlencoded</code> by default, but just to be sure, you can replace <code>dataType: json</code> with <code>contentType: 'application/x-www-form-urlencoded'</code></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>UPDATE: As TimK pointed out, this isn't needed with jquery 1.5.2 any more. But if you want to add custom headers or allow the use of credentials (username, password, or cookies, etc), read on.</p>\n\n<hr>\n\n<p>I think I found the answer! (4 hours and a lot of cursing later)</p>\n\n<pre><code>//This does not work!!\nAccess-Control-Allow-Headers: *\n</code></pre>\n\n<p>You need to manually specify all the headers you will accept (at least that was the case for me in FF 4.0 &amp; Chrome 10.0.648.204).</p>\n\n<p>jQuery's $.ajax method sends the \"x-requested-with\" header for all cross domain requests (i think its only cross domain).</p>\n\n<p>So the missing header needed to respond to the OPTIONS request is:</p>\n\n<pre><code>//no longer needed as of jquery 1.5.2\nAccess-Control-Allow-Headers: x-requested-with\n</code></pre>\n\n<p>If you are passing any non \"simple\" headers, you will need to include them in your list (i send one more):</p>\n\n<pre><code>//only need part of this for my custom header\nAccess-Control-Allow-Headers: x-requested-with, x-requested-by\n</code></pre>\n\n<p>So to put it all together, here is my PHP:</p>\n\n<pre><code>// * wont work in FF w/ Allow-Credentials\n//if you dont need Allow-Credentials, * seems to work\nheader('Access-Control-Allow-Origin: http://www.example.com');\n//if you need cookies or login etc\nheader('Access-Control-Allow-Credentials: true');\nif ($this-&gt;getRequestMethod() == 'OPTIONS')\n{\n  header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');\n  header('Access-Control-Max-Age: 604800');\n  //if you need special headers\n  header('Access-Control-Allow-Headers: x-requested-with');\n  exit(0);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>Content type should be Content-Type: application/javascript</p>\n\n<p>If you try <a href=\"http://terrasus.com/detail.jsp?articleID=396\" rel=\"nofollow\">http://terrasus.com/detail.jsp?articleID=396</a> article step by step it will work fine.</p>\n\n<p>if you produce jsonp response you should get the callback value and set it to your response dynamically. This article has a detail explanation.</p>\n",
                    "is_accepted": false,
                    "score": -3
                }
            ],
            "body": "<p>I'm trying to make a Cross Origin post request, and I got it working in plain Javascript like this:</p>\n\n<pre><code>var request = new XMLHttpRequest();\nvar params = \"action=something\";\nrequest.open('POST', url, true);\nrequest.onreadystatechange = function() {if (request.readyState==4) alert(\"It worked!\");};\nrequest.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nrequest.setRequestHeader(\"Content-length\", params.length);\nrequest.setRequestHeader(\"Connection\", \"close\");\nrequest.send(params);\n</code></pre>\n\n<p>But I would like to use jQuery, but I can't get it to work.  This is what I'm trying:</p>\n\n<pre><code>$.ajax(url, {\n    type:\"POST\",\n    dataType:\"json\",\n    data:{action:\"something\"}, \n    success:function(data, textStatus, jqXHR) {alert(\"success\");},\n    error: function(jqXHR, textStatus, errorThrown) {alert(\"failure\");}\n});\n</code></pre>\n\n<p>This results in Failure.  If anyone knows why jQuery doesn't work, please let us all know.  Thanks.</p>\n\n<p>(I'm using jQuery 1.5.1, and Firefox 4.0, and my server is responding with a proper Access-Control-Allow-Origin header)</p>\n",
            "last_activity_date": 1402569934,
            "question_id": 5584923,
            "score": 32,
            "tags": [
                "javascript",
                "jquery",
                "xmlhttprequest",
                "cors"
            ],
            "title": "A CORS POST request works from plain javascript, but why not with jQuery?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It's a proposed syntax for EcmaScript.next.</p>\n\n<p>Dave Herman of Mozilla gave a talk about <a href=\"http://www.youtube.com/watch?v=hs6tF-RDX4U\">EcmaScript.next</a>.  At <a href=\"http://youtu.be/hs6tF-RDX4U?t=30m15s\">30:15</a> he talks about generators.  Earlier, he explains how Mozilla is experimentally implementing proposed language changes to help steer the committee.  Dave works closely with Brendan Eich, Mozilla's CTO (I think), and the original JavaScript designer.</p>\n\n<p>You can find more detail on the EcmaScript working group wiki: <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:generators\">http://wiki.ecmascript.org/doku.php?id=harmony:generators</a></p>\n\n<p>The working group (TC-39) has general agreement that EcmaScript.next should have some kind of generator iterator proposal, but this is not final.  You shouldn't rely on this showing up without changes in the next version of the language, and even if it doesn't change, it probably won't show up widely in other browsers for a while.</p>\n\n<blockquote>\n  <h3>Overview</h3>\n  \n  <p>First-class coroutines, represented as objects encapsulating suspended execution contexts (i.e., function activations). Prior art: Python, Icon, Lua, Scheme, Smalltalk.</p>\n  \n  <h3>Examples</h3>\n  \n  <p>The \u201cinfinite\u201d sequence of Fibonacci numbers (notwithstanding behavior around 2<sup>53</sup>):</p>\n\n<pre><code>function* fibonacci() {\n    let [prev, curr] = [0, 1];\n    for (;;) {\n        [prev, curr] = [curr, prev + curr];\n        yield curr;\n    }\n}\n</code></pre>\n  \n  <p>Generators can be iterated over in loops:</p>\n\n<pre><code>for (n of fibonacci()) {\n    // truncate the sequence at 1000\n    if (n &gt; 1000)\n        break;\n    print(n);\n}\n</code></pre>\n  \n  <p>Generators are iterators:</p>\n\n<pre><code>let seq = fibonacci();\nprint(seq.next()); // 1\nprint(seq.next()); // 2\nprint(seq.next()); // 3\nprint(seq.next()); // 5\nprint(seq.next()); // 8\n</code></pre>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 79
                },
                {
                    "body": "<p>The <code>function*</code> type looks like it acts as a generator function for processes that can be iterated. \nC# has a feature like this using \"yield return\" <a href=\"http://stackoverflow.com/questions/410026/c-sharp-proper-use-of-yield-return\">see 1</a> and <a href=\"http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx\">see 2</a></p>\n\n<p>Essentially this returns each value one by one to whatever is iterating this function, which is why their use case shows it in a foreach style loop.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's a <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3agenerators\">generator function</a> - and it said so in the page you cite, in the comment you replaced with \"this is the interesting line\"...</p>\n\n<p>Basically it's a way to specify sequences programmatically so that they can be passed around and elements accessed by index without having to compute the entire sequence (possibly infinite in size) beforehand.</p>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>In <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...of\">this</a> page I found a new JavaScript function type:</p>\n\n<pre><code>// NOTE: \"function*\" is not supported yet in Firefox.\n// Remove the asterisk in order for this code to work in Firefox 13 \n\nfunction* fibonacci() { // !!! this is the interesting line !!!\n    let [prev, curr] = [0, 1];\n    for (;;) {\n        [prev, curr] = [curr, prev + curr];\n        yield curr;\n    }\n}\n</code></pre>\n\n<p>I already know <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7\">what <code>yield</code>, <code>let</code> and <code>[?,?]=[?,?]</code> do</a>, but have no idea what the <code>function*</code> is meant to be. What is it?</p>\n\n<p>P.S. don't bother trying Google, it's <a href=\"http://groups.google.com/a/googleproductforums.com/forum/#!searchin/websearch/Asterisk%2420/websearch/UtOLastuiQs/pgNSQTboCzAJ\">impossible</a> to search for expressions with asterisks (<a href=\"http://www.googleguide.com/wildcard_operator.html\">they're used as placeholders</a>).</p>\n",
            "last_activity_date": 1398405633,
            "question_id": 9620586,
            "score": 81,
            "tags": [
                "javascript",
                "function",
                "ecmascript-6"
            ],
            "title": "What is &quot;function*&quot; in JavaScript?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>With a function like this:</p>\n\n<pre><code>function toObject(arr) {\n  var rv = {};\n  for (var i = 0; i &lt; arr.length; ++i)\n    rv[i] = arr[i];\n  return rv;\n}\n</code></pre>\n\n<p>Your array already is more-or-less just an object, but arrays do have some \"interesting\" and special behavior with respect to integer-named properties. The above will give you a plain object.</p>\n\n<p><em>edit</em> oh also you might want to account for \"holes\" in the array:</p>\n\n<pre><code>function toObject(arr) {\n  var rv = {};\n  for (var i = 0; i &lt; arr.length; ++i)\n    if (arr[i] !== undefined) rv[i] = arr[i];\n  return rv;\n}\n</code></pre>\n\n<p>In modern JavaScript runtimes, you can use the <code>.reduce()</code> method:</p>\n\n<pre><code>var obj = arr.reduce(function(o, v, i) {\n  o[i] = v;\n  return o;\n}, {});\n</code></pre>\n\n<p>That one also avoids \"holes\" in the array, because that's how <code>.reduce()</code> works.</p>\n",
                    "is_accepted": true,
                    "score": 76
                },
                {
                    "body": "<p>A quick and dirty one:</p>\n\n<pre><code>var obj = {},\n    arr = ['a','b','c'],\n    l = arr.length -1; \n\nwhile(l &gt;= 0 &amp;&amp; (obj[l--] = arr.pop())){};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You could use a function like this:</p>\n\n<pre><code>var toObject = function(array) {\n    var o = {};\n    for (var property in array) {\n        if (String(property &gt;&gt;&gt; 0) == property &amp;&amp; property &gt;&gt;&gt; 0 != 0xffffffff) {\n            o[i] = array[i];\n        }\n    }\n    return o;\n};\n</code></pre>\n\n<p>This one should handle sparse arrays more efficiently.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're using jquery:</p>\n\n<pre><code>$.extend({}, ['a', 'b', 'c']);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>I have faced this issue multiple times and decided to write a function that is as generic as possible. Have a look and feel free to modify anything</p>\n\n<pre><code>function typeOf(obj) {\n    if ( typeof(obj) == 'object' ) {\n        if (obj.length)\n            return 'array';\n        else\n            return 'object';\n    } else\n    return typeof(obj);\n}\n\nfunction objToArray(obj, ignoreKeys) {\n    var arr = [];\n    if (typeOf(obj) == 'object') {\n        for (var key in obj) {\n            if (typeOf(obj[key]) == 'object') {\n                if (ignoreKeys)\n                    arr.push(objToArray(obj[key],ignoreKeys));\n                else\n                    arr.push([key,objToArray(obj[key])]);\n            }\n            else\n                arr.push(obj[key]);\n        }\n    }else if (typeOf(obj) == 'array') {\n        for (var key=0;key&lt;obj.length;key++) {\n            if (typeOf(obj[key]) == 'object')\n                arr.push(objToArray(obj[key]));\n            else\n                arr.push(obj[key]);\n        }\n    }\n    return arr;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'd probably write it this way (since only very rarely do I not have the underscorejs library at hand):</p>\n\n<pre><code>var _ = require('underscore');\n\nvar a = [ 'a', 'b', 'c' ];\nvar obj = _.extend({}, a);\nconsole.log(obj);\n// prints { '0': 'a', '1': 'b', '2': 'c' }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>A more OO approach:  </p>\n\n<pre><code>Array.prototype.toObject = function() {\n var Obj={};\n\n for(var i in this) {\n  if(typeof this[i] != \"function\") {\n   //Logic here\n   Obj[i]=this[i];\n  }\n }\n\n return Obj;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Quick and dirty #2:</p>\n\n<pre><code>var i = 0\n  , s = {}\n  , a = ['A', 'B', 'C'];\n\nwhile( a[i] ) { s[i] = a[i++] };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a solution in coffeescript</p>\n\n<pre><code>arrayToObj = (arr) -&gt;\n  obj = {}\n  for v,i in arr\n    obj[i] = v if v?\n  obj\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This allows you to generate from an array an object with keys you define in the order you want them. </p>\n\n<pre><code>Array.prototype.toObject = function(keys){\n    var obj = {};\n    var tmp = this; // we want the original array intact.\n    if(keys.length == this.length){\n        var c = this.length-1;\n        while( c&gt;=0 ){\n            obj[ keys[ c ] ] = tmp[c];\n            c--;\n        }\n    }\n    return obj;\n};\n\nresult = [\"cheese\",\"paint\",14,8].toObject([0,\"onion\",4,99]);\n</code></pre>\n\n<p><code>console.log(\"&gt;&gt;&gt; :\" + result.onion);</code> will output \"paint\", the function has to have arrays of equal length or you get an empty object.</p>\n\n<p>Here is an updated method</p>\n\n<pre><code>Array.prototype.toObject = function(keys){\n    var obj = {};\n    if( keys.length == this.length)\n        while( keys.length )\n            obj[ keys.pop() ] = this[ keys.length ];\n    return obj;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could use an accumulator aka <code>reduce</code>.</p>\n\n<pre><code>['a','b','c'].reduce(function(obj, k) {\n  obj[k] = k;\n  return obj;\n}, {}) //watch out the last argument; result: {a: \"a\", b: \"b\", c: \"c\"}\n</code></pre>\n\n<p>Pass an empty object as starting point; then \"augment\" that object with additional values.</p>\n\n<p>If your array is a set of objects:</p>\n\n<pre><code>[{ prop1: 'a'},{ prop2: 'b'},{ prop3: 'c'}].reduce(function(obj, k) {\n  var key = Object.keys(k)[0]; //first property\n  obj[key] = k[key];\n  return obj;\n}, {}) //result: {prop1: \"a\", prop2: \"b\", prop3: \"c\"}\n</code></pre>\n\n<p><strong>Caution</strong>: <code>reduce</code> (<code>Object.key</code> too) are part of <code>ECMA 5th edition</code>; you should provide a fallback/polyfill for browsers that don't support it (notably old IE).</p>\n\n<p>See a default implementation here:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>My version array to json in JS. Jusy copy/paste and use it. Isn't this awesome? I love this type of functions I found on StackOverflow. </p>\n\n<pre><code>function array2json(arr) {\n    var parts = [];\n    var is_list = (Object.prototype.toString.apply(arr) === '[object Array]');\n\n    for(var key in arr) {\n        var value = arr[key];\n        if(typeof value == \"object\") { //Custom handling for arrays\n            if(is_list) parts.push(array2json(value)); /* :RECURSION: */\n            else parts[key] = array2json(value); /* :RECURSION: */\n        } else {\n            var str = \"\";\n            if(!is_list) str = '\"' + key + '\":';\n\n            //Custom handling for multiple data types\n            if(typeof value == \"number\") str += value; //Numbers\n            else if(value === false) str += 'false'; //The booleans\n            else if(value === true) str += 'true';\n            else str += '\"' + value + '\"'; //All other things\n            // :TODO: Is there any more datatype we should be in the lookout for? (Functions?)\n\n            parts.push(str);\n        }\n    }\n    var json = parts.join(\",\");\n\n    if(is_list) return '[' + json + ']';//Return numerical JSON\n    return '{' + json + '}';//Return associative JSON\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a recursive function I just wrote. It's simple and works well.</p>\n\n<pre><code>// Convert array to object\nvar convArrToObj = function(array){\n    var thisEleObj = new Object();\n    if(typeof array == \"object\"){\n        for(var i in array){\n            var thisEle = convArrToObj(array[i]);\n            thisEleObj[i] = thisEle;\n        }\n    }else {\n        thisEleObj = array;\n    }\n    return thisEleObj;\n}\n</code></pre>\n\n<p>Here's an example (<a href=\"http://jsfiddle.net/GjJcH/1/\" rel=\"nofollow\">jsFiddle</a>):</p>\n\n<pre><code>var array = new Array();\narray.a = 123;\narray.b = 234;\narray.c = 345;\nvar array2 = new Array();\narray2.a = 321;\narray2.b = 432;\narray2.c = 543;\nvar array3 = new Array();\narray3.a = 132;\narray3.b = 243;\narray3.c = 354;\nvar array4 = new Array();\narray4.a = 312;\narray4.b = 423;\narray4.c = 534;\nvar array5 = new Array();\narray5.a = 112;\narray5.b = 223;\narray5.c = 334;\n\narray.d = array2;\narray4.d = array5;\narray3.d = array4;\narray.e = array3;\n\n\nconsole.log(array);\n\n// Convert array to object\nvar convArrToObj = function(array){\n    var thisEleObj = new Object();\n    if(typeof array == \"object\"){\n        for(var i in array){\n            var thisEle = convArrToObj(array[i]);\n            thisEleObj[i] = thisEle;\n        }\n    }else {\n        thisEleObj = array;\n    }\n    return thisEleObj;\n}\nconsole.log(convArrToObj(array));\n</code></pre>\n\n<p>Results:\n<img src=\"http://i.stack.imgur.com/KZHoT.png\" alt=\"Recursive Array to Object\"></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would use underscore for this, but if that isn't available then I would drop down to using reduce with an initial value of empty object <code>{}</code></p>\n\n<pre><code>&gt;&gt;&gt; ['a', 'b', 'c'].reduce(function(p, c, i) {p[i] = c; return p}, {})\nObject { 0=\"a\", 1=\"b\", 2=\"c\"}\n</code></pre>\n\n<p>reduce should be widely available in most browsers today, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow\">MDN</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using angularjs you can use angular.extend, the same effect with $.extend of jquery.</p>\n\n<pre><code>var newObj = {};\nangular.extend(newObj, ['a','b','c']);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the best way to convert:</p>\n\n<pre><code>['a','b','c']\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>{\n  0: 'a',\n  1: 'b',\n  2: 'c'\n}\n</code></pre>\n",
            "last_activity_date": 1424760049,
            "question_id": 4215737,
            "score": 53,
            "tags": [
                "javascript",
                "arrays",
                "object"
            ],
            "title": "Convert Array to Object"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>i'm not sure if this is the way (dunno php so well), but you can take a look <a href=\"http://kevin.vanzonneveld.net/techblog/article/javascript_equivalent_for_phps_htmlentities/\" rel=\"nofollow\">here</a>. You have JS equivalent for htmlentities, htmlspecialcharacters, and so on. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can't anticipate every possible weird type of malformed markup that some browser somewhere might trip over to escape blacklisting, so don't blacklist. There are <em>many</em> more structures you might need to remove than just script/embed/object and handlers.</p>\n\n<p>Instead attempt to parse the HTML into elements and attributes in a hierarchy, then run all element and attribute names against an as-minimal-as-possible whitelist. Also check any URL attributes you let through against a whitelist (remember there are more dangerous protocols than just javascript:).</p>\n\n<p>If the input is well-formed XHTML the first part of the above is much easier.</p>\n\n<p>As always with HTML sanitisation, if you can find any other way to avoid doing it, do that instead. There are many, many potential holes. If the major webmail services are still finding exploits after this many years, what makes you think you can do better?</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Shameless plug: see <a href=\"http://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js\">http://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js</a> for a client side html sanitizer that has been thoroughly reviewed.</p>\n\n<p>It is white-listed, not black-listed, but the whitelists are configurable as per <a href=\"http://code.google.com/p/google-caja/wiki/CajaWhitelists\">http://code.google.com/p/google-caja/wiki/CajaWhitelists</a></p>\n\n<hr>\n\n<p>If you want to remove all tags, then do the following:</p>\n\n<pre><code>var tagBody = '(?:[^\"\\'&gt;]|\"[^\"]*\"|\\'[^\\']*\\')*';\n\nvar tagOrComment = new RegExp(\n    '&lt;(?:'\n    // Comment body.\n    + '!--(?:(?:-*[^-&gt;])*--+|-?)'\n    // Special \"raw text\" elements whose content should be elided.\n    + '|script\\\\b' + tagBody + '&gt;[\\\\s\\\\S]*?&lt;/script\\\\s*'\n    + '|style\\\\b' + tagBody + '&gt;[\\\\s\\\\S]*?&lt;/style\\\\s*'\n    // Regular name\n    + '|/?[a-z]'\n    + tagBody\n    + ')&gt;',\n    'gi');\nfunction removeTags(html) {\n  var oldHtml;\n  do {\n    oldHtml = html;\n    html = html.replace(tagOrComment, '');\n  } while (html !== oldHtml);\n  return html.replace(/&lt;/g, '&amp;lt;');\n}\n</code></pre>\n\n<p>People will tell you that you can create an element, and assign <code>innerHTML</code> and then get the <code>innerText</code> or <code>textContent</code>, and then escape entities in that.  Do not do that.  It is vulnerable to XSS injection since <code>&lt;img src=bogus onerror=alert(1337)&gt;</code> will run the <code>onerror</code> handler even if the node is never attached to the DOM.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>Never trust the client. If you're writing a server application, assume that the client will always submit unsanitary, malicious data. It's a rule of thumb that will keep you out of trouble. If you can, I would advise doing all validation and sanitation in server code, which you know (to a reasonable degree) won't be fiddled with. Perhaps you could use a serverside web application as a proxy for your clientside code, which fetches from the 3rd party and does sanitation before sending it to the client itself?</p>\n\n<p>[edit] I'm sorry, I misunderstood the question. However, I stand by my advice. Your users will probably be safer if you sanitize on the server before sending it to them.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>String.prototype.sanitizeHTML=function (white,black) {\n   if (!white) white=\"b|i|p|br\";//allowed tags\n   if (!black) black=\"script|object|embed\";//complete remove tags\n   e=new RegExp(\"(&lt;(\"+black+\")[^&gt;]*&gt;.*&lt;/\\\\2&gt;|(?!&lt;[/]?(\"+white+\")(\\\\s[^&lt;]*&gt;|[/]&gt;|&gt;))&lt;[^&lt;&gt;]*&gt;|(?!&lt;[^&lt;&gt;\\\\s]+)\\\\s[^&lt;/&gt;]+(?=[/&gt;]))\", \"gi\");\n   return this.replace(e,\"\");\n}\n</code></pre>\n\n<p>-black list -> complete remove tag and content</p>\n\n<p>-white list -> retain tags </p>\n\n<p>-other tags are removed but tag content is retained</p>\n\n<p>-all attributes of white list tag's (the remaining ones) are removed</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I recommend cutting frameworks out of your life, it would make things excessively easier for you in the long term.</p>\n\n<p>cloneNode: Cloning a node copies all of its attributes and their values but <strong>does <em>NOT</em> copy event listeners</strong>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/Node.cloneNode\" rel=\"nofollow\">https://developer.mozilla.org/en/DOM/Node.cloneNode</a></p>\n\n<p>The following is not tested though I have using treewalkers for some time now and they are one of the most undervalued parts of JavaScript. Here is a list of the node types you can crawl, usually I use <strong>SHOW_ELEMENT</strong> or <strong>SHOW_TEXT</strong>.</p>\n\n<p><a href=\"http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter\" rel=\"nofollow\">http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html#Traversal-NodeFilter</a></p>\n\n<pre><code>function xhtml_cleaner(id)\n{\n var e = document.getElementById(id);\n var f = document.createDocumentFragment();\n f.appendChild(e.cloneNode(true));\n\n var walker = document.createTreeWalker(f,NodeFilter.SHOW_ELEMENT,null,false);\n\n while (walker.nextNode())\n {\n  var c = walker.currentNode;\n  if (c.hasAttribute('contentEditable')) {c.removeAttribute('contentEditable');}\n  if (c.hasAttribute('style')) {c.removeAttribute('style');}\n\n  if (c.nodeName.toLowerCase()=='script') {element_del(c);}\n }\n\n alert(new XMLSerializer().serializeToString(f));\n return f;\n}\n\n\nfunction element_del(element_id)\n{\n if (document.getElementById(element_id))\n {\n  document.getElementById(element_id).parentNode.removeChild(document.getElementById(element_id));\n }\n else if (element_id)\n {\n  element_id.parentNode.removeChild(element_id);\n }\n else\n {\n  alert('Error: the object or element \\'' + element_id + '\\' was not found and therefore could not be deleted.');\n }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The Google Caja <a href=\"https://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js\">HTML sanitizer</a> can be made \"web-ready\" by embedded it in a <a href=\"https://developer.mozilla.org/en/Using_web_workers\">web worker</a>. Any global variables introduced by the sanitizer will be contained within the worker, plus processing takes place in its own thread.</p>\n\n<p>For browsers that do not support Web Workers, we can use an iframe as a separate environment for the sanitizer to work in. Timothy Chien has a <a href=\"https://github.com/timdream/simworker\">polyfill</a> that does just this, using iframes to simulate Web Workers, so that part is done for us.</p>\n\n<p>The Caja project has a wiki page on <a href=\"https://code.google.com/p/google-caja/wiki/JsHtmlSanitizer\">how to use Caja as a standalone client-side sanitizer</a>:</p>\n\n<ul>\n<li>Checkout the source, then build by running <code>ant</code></li>\n<li>Include <code>html-sanitizer-minified.js</code> or <code>html-css-sanitizer-minified.js</code> in your page</li>\n<li>Call <code>html_sanitize(...)</code></li>\n</ul>\n\n<p>The worker script only needs to follow those instructions:</p>\n\n<pre><code>importScripts('html-css-sanitizer-minified.js'); // or 'html-sanitizer-minified.js'\n\nvar urlTransformer, nameIdClassTransformer;\n\n// customize if you need to filter URLs and/or ids/names/classes\nurlTransformer = nameIdClassTransformer = function(s) { return s; };\n\n// when we receive some HTML\nself.onmessage = function(event) {\n    // sanitize, then send the result back\n    postMessage(html_sanitize(event.data, urlTransformer, nameIdClassTransformer));\n};\n</code></pre>\n\n<p>(A bit more code is needed to get the simworker library working, but it's not important to this discussion.)</p>\n\n<p>Demo: <a href=\"https://dl.dropbox.com/u/291406/html-sanitize/demo.html\">https://dl.dropbox.com/u/291406/html-sanitize/demo.html</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Now that all major browsers support sandboxed iframes, there is a much simpler way that I <em>think</em> can be secure. I'd love it if this answer could be reviewed by people who are more familiar with this kind of security issue.</p>\n\n<p>The idea is to create a hidden iframe with JavaScript disabled, paste your untrusted HTML into it, and let it parse it. Then you can walk the DOM tree and copy out the tags and attributes that are considered safe.</p>\n\n<p>The whitelists shown here are just examples. What's best to whitelist would depend on the application. If you need a more sophisticated policy than just whitelists of tags and attributes, that can be accommodated by this method, though not by this example code.</p>\n\n<pre><code>var tagWhitelist_ = {\n  'A': true,\n  'B': true,\n  'BODY': true,\n  'BR': true,\n  'DIV': true,\n  'EM': true,\n  'HR': true,\n  'I': true,\n  'IMG': true,\n  'P': true,\n  'SPAN': true,\n  'STRONG': true\n};\n\nvar attributeWhitelist_ = {\n  'href': true,\n  'src': true\n};\n\nfunction sanitizeHtml(input) {\n  var iframe = document.createElement('iframe');\n  if (iframe['sandbox'] === undefined) {\n    alert('Your browser does not support sandboxed iframes. Please upgrade to a modern browser.');\n    return '';\n  }\n  iframe['sandbox'] = 'allow-same-origin';\n  iframe.style.display = 'none';\n  document.body.appendChild(iframe); // necessary so the iframe contains a document\n  iframe.contentDocument.body.innerHTML = input;\n\n  function makeSanitizedCopy(node) {\n    if (node.nodeType == Node.TEXT_NODE) {\n      var newNode = node.cloneNode(true);\n    } else if (node.nodeType == Node.ELEMENT_NODE &amp;&amp; tagWhitelist_[node.tagName]) {\n      newNode = iframe.contentDocument.createElement(node.tagName);\n      for (var i = 0; i &lt; node.attributes.length; i++) {\n        var attr = node.attributes[i];\n        if (attributeWhitelist_[attr.name]) {\n          newNode.setAttribute(attr.name, attr.value);\n        }\n      }\n      for (i = 0; i &lt; node.childNodes.length; i++) {\n        var subCopy = makeSanitizedCopy(node.childNodes[i]);\n        newNode.appendChild(subCopy, false);\n      }\n    } else {\n      newNode = document.createDocumentFragment();\n    }\n    return newNode;\n  };\n\n  var resultElement = makeSanitizedCopy(iframe.contentDocument.body);\n  document.body.removeChild(iframe);\n  return resultElement.innerHTML;\n};\n</code></pre>\n\n<p>You can try it out <a href=\"http://aldel.com/htmlsanitize.html\" rel=\"nofollow\">here</a>.</p>\n\n<p>Note that I'm disallowing style attributes and tags in this example. If you allowed them, you'd probably want to parse the CSS and make sure it's safe for your purposes.</p>\n\n<p>I've tested this on several modern browsers (Chrome 40, Firefox 36 Beta, IE 11, Chrome for Android), and on one old one (IE 8) to make sure it bailed before executing any scripts. I'd be interested to know if there are any browsers that have trouble with it, or any edge cases that I'm overlooking.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to display external resources loaded via cross domain requests and make sure to only display \"<em>safe</em>\" content. </p>\n\n<p>Could use Prototype's <a href=\"http://www.prototypejs.org/api/string/stripScripts\">String#stripScripts</a> to remove script blocks. But handlers such as <code>onclick</code> or <code>onerror</code> are still there.</p>\n\n<p>Is there any library which can at least</p>\n\n<ul>\n<li>strip script blocks,</li>\n<li>kill DOM handlers,</li>\n<li>remove black listed tags (eg: <code>embed</code> or <code>object</code>).</li>\n</ul>\n\n<p>So are any JavaScript related links and examples out there?</p>\n",
            "last_activity_date": 1424051987,
            "question_id": 295566,
            "score": 40,
            "tags": [
                "javascript",
                "html",
                "security",
                "html-sanitizing"
            ],
            "title": "Sanitize/Rewrite HTML on the Client Side"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>As far as I have heared Google Chrome will have multithreaded javascript, so it is a \"current implementations\" problem.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>According to <strong><a href=\"http://ltiwww.epfl.ch/sJavascript/\" rel=\"nofollow\">this article</a></strong> it is already possible to implement JavaScript threading.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Do you mean why doesn't the language support multithreading or why don't JavaScript engines in browsers support multithreading?</p>\n\n<p>The answer to the first question is that JavaScript in the browser is meant to be run in a sandbox and in a machine/OS-independent way, to add multithreading support would complicate the language and tie the language too closely to the OS.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It's the implementations that doesn't support multi-threading. Currently Google Gears is providing a way to use some form of concurrency by executing external processes but that's about it.</p>\n\n<p>The new browser Google is supposed to release today (Google Chrome) executes some code in parallel by separating it in process.</p>\n\n<p>The core language, of course can have the same support as, say Java, but support for something like Erlang's concurrency is nowhere near the horizon.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I don't know the rationale for this decision, but I know that you can simulate some of the benefits of multi-threaded programming using setTimeout.  You can give the illusion of multiple processes doing things at the same time, though in reality, everything happens in one thread.</p>\n\n<p>Just have your function do a little bit of work, and then call something like:</p>\n\n<pre><code>setTimeout(function () {\n    ... do the rest of the work...\n}, 0);\n</code></pre>\n\n<p>And any other things that need doing (like UI updates, animated images, etc) will happen when they get a chance.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Traditionally, JS was intended for short, quick-running pieces of code. If you had major calculations going on, you did it on a server - the idea of a JS+HTML <em>app</em> that ran in your browser for long periods of time doing non-trivial things was absurd.</p>\n\n<p>Of course, now we have that. But, it'll take a bit for browsers to catch up - most of them have been designed around a single-threaded model, and changing that is not easy. Google Gears side-steps a lot of potential problems by requiring that background execution is isolated - no changing the DOM (since that's not thread-safe), no accessing objects created by the main thread (ditto). While restrictive, this will likely be the most practical design for the near future, both because it simplifies the design of the browser, and because it reduces the risk involved in allowing inexperienced JS coders mess around with threads...</p>\n\n<p><a href=\"http://stackoverflow.com/questions/39879/why-doesnt-javascript-support-multithreading#40058\" rel=\"nofollow\">@marcio</a>:</p>\n\n<blockquote>\n  <p>Why is that a reason not to implement multi-threading in Javascript? Programmers can do whatever they want with the tools they have.</p>\n</blockquote>\n\n<p>So then, let's not give them tools that are so easy to <strong>misuse</strong> that every other website i open ends up crashing my browser. A naive implementation of this would bring you straight into the territory that caused MS so many headaches during IE7 development: add-on authors played fast and loose with the threading model, resulting in hidden bugs that became evident when object lifecycles changed on the primary thread. BAD. If you're writing multi-threaded ActiveX add-ons for IE, i guess it comes with the territory; doesn't mean it needs to go any further than that. </p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Just as matt b said, the question is not very clear. Assuming that you are asking about multithreading support in the language: because it isn't needed for 99.999% of the applications running in the browser currently. If you really need it, there are workarounds (like using window.setTimeout).</p>\n\n<p>In general multithreading is very, very, very, very, very, very hard (did I say that it is hard?) to get right, unless you put in extra restrictions (like using only immutable data).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Javascript does not support multithreading because the javascript interpreter in the browser is a single thread (AFAIK). Even Google Chrome will not let a single web page's Javacript run concurrently because this would cause massive concurrency issues in existing web pages. All Chrome does is separate multiple components (different tabs, plugins, etcetera) into separate processes, but I can't imagine a single page having more than one Javacript thread.</p>\n\n<p>You can however use, as was suggested, use setTimeout to allow some sort of scheduling and 'fake' concurrency. This causes the browser to regain control of the rendering thread, and start the Javascript code supplied to setTimeout after the given number of milliseconds. This is very useful if you want to allow the viewport (what you see) to refresh while performing operations on it. Just looping through e.g. coordinates and updating an element accordingly will just let you see the start and end positions, and nothing in between.</p>\n\n<p>We use an abstraction library in Javascript that allows us to create processes and threads which are all managed by the same Javascript interpreter. This allows us to run actions in the following manner:</p>\n\n<ul>\n<li>Process A, Thread 1</li>\n<li>Process A, Thread 2</li>\n<li>Process B, Thread 1</li>\n<li>Process A, Thread 3</li>\n<li>Process A, Thread 4</li>\n<li>Process B, Thread 2</li>\n<li>Pause Process A</li>\n<li>Process B, Thread 3</li>\n<li>Process B, Thread 4</li>\n<li>Process B, Thread 5</li>\n<li>Start Process A</li>\n<li>Process A, Thread 5</li>\n</ul>\n\n<p>This allows some form of scheduling and fakes parallelism, starting and stopping of threads, etcetera, but it will not be true multithreading. I don't think it will ever be implemented in the language itself, since true multithreading is only useful if the browser can run a single page multithreaded (or even more than one core), and the difficulties there are way larger than the extra possibilities.</p>\n\n<p>For the future of Javascript, check this out: <a href=\"http://developer.mozilla.org/presentations/xtech2006/javascript/\">http://developer.mozilla.org/presentations/xtech2006/javascript/</a></p>\n",
                    "is_accepted": true,
                    "score": 81
                },
                {
                    "body": "<p>See also the answers to the <a href=\"http://stackoverflow.com/questions/30036/javascript-and-threads#30197\" rel=\"nofollow\">JavaScript and Threads</a> question for information about web workers/worker threads.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Without proper language support for thread syncronization, it doesn't even make sense for new implementations to try. Existing complex JS apps (e.g. anything using ExtJS) would most likely crash unexpectedly, but without a <code>synchronized</code> keyword or something similar, it would also be very hard or even impossible to write new programs that behave correctly.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JavaScript multi-threading (with some limitations) is here. Google implemented workers for Gears, and workers are being included with HTML5. Most browsers have already added support for this feature.</p>\n\n<p>Thread-safety of data is guaranteed because all data communicated to/from the worker is serialized/copied.</p>\n\n<p>For more info, read:</p>\n\n<p><a href=\"http://www.whatwg.org/specs/web-workers/current-work/\">http://www.whatwg.org/specs/web-workers/current-work/</a></p>\n\n<p><a href=\"http://ejohn.org/blog/web-workers/\">http://ejohn.org/blog/web-workers/</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Intel has been doing some open-source research on multithreading in Javascript, it was showcased recently on GDC 2012. \nHere is the link for the <a href=\"http://www.youtube.com/watch?v=_adMEEAtDwE\" rel=\"nofollow\">video</a>. The research group used OpenCL which primarily focuses on Intel Chip sets and Windows OS. The project is code-named RiverTrail and the code is available on GitHub</p>\n\n<p>Some more useful links:</p>\n\n<p><a href=\"http://blogs.intel.com/research/2011/09/15/pjs/\" rel=\"nofollow\">Building a Computing Highway for Web Applications</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://keithwhor.github.io/multithread.js/%E2%80%8E\" rel=\"nofollow\">Multithread.js</a> wraps Web Workers and allows for easy multithreading in JS. Works on all new browsers, including iOS Safari. :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is it a deliberate design decision or a problem with our current day browsers which will be rectified in the coming versions?</p>\n",
            "last_activity_date": 1394305434,
            "question_id": 39879,
            "score": 102,
            "tags": [
                "javascript",
                "multithreading",
                "browser"
            ],
            "title": "Why doesn&#39;t JavaScript support multithreading?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I use webkit as a headless browser in Python via pyqt / pyside:<br>\n<a href=\"http://www.riverbankcomputing.co.uk/software/pyqt/download\">http://www.riverbankcomputing.co.uk/software/pyqt/download</a><br>\n<a href=\"http://developer.qt.nokia.com/wiki/Category%3aLanguageBindings%3a%3aPySide%3a%3aDownloads\">http://developer.qt.nokia.com/wiki/Category:LanguageBindings::PySide::Downloads</a></p>\n\n<p>I particularly like webkit because it is simple to setup. For Ubuntu you just use: <code>sudo apt-get install python-qt4</code></p>\n\n<p>Here is an example script:<br>\n<a href=\"http://webscraping.com/blog/Scraping-JavaScript-webpages-with-webkit/\">http://webscraping.com/blog/Scraping-JavaScript-webpages-with-webkit/</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>You can use HTQL in combination with IRobotSoft webscraper.  Check here for examples: <a href=\"http://htql.net/\" rel=\"nofollow\">http://htql.net/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There are not too many headless browsers yet that support Javascript.</p>\n\n<p>You could try <a href=\"http://zombie.labnotes.org/\">Zombie.js</a> or <a href=\"http://www.phantomjs.org/\">Phantomjs</a>. Those are not Python, but plain Javascript and those really can do the job.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I'm in the midst of writing a Python driver for Zombie.js, \"a lightweight framework for testing client-side JavaScript code in a simulated environment\".</p>\n\n<p>I'm currently at a standstill on a resolution to a bug in Node.js (before I write more tests and more code), but feel free to keep an eye on my project as it progresses:</p>\n\n<p><a href=\"https://github.com/ryanpetrello/python-zombie\">https://github.com/ryanpetrello/python-zombie</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Try using phantomjs, it has great javascript support.  Then you could run it as a subprocess of a python script </p>\n\n<p><a href=\"http://docs.python.org/library/subprocess.html\" rel=\"nofollow\">http://docs.python.org/library/subprocess.html</a></p>\n\n<p>that could boss it around.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The answer to this question was <a href=\"https://github.com/makinacorpus/spynner\" rel=\"nofollow\">Spynner</a></p>\n",
                    "is_accepted": true,
                    "score": 9
                }
            ],
            "body": "<p>I need a headless browser which is fairly easy to use (I am still fairly new to Python and programming in general) which will allow me to navigate to a page, log into a form that requires Javascript, and then scrape the resulting web page by searching for results matching certain criteria, clicking check boxes, and clicking to download files. All of this requires Javascript.</p>\n\n<p>I hear a headless browser is what I want - requirements/preferences are that I be able to run it from Python, and preferably that the resultant script will be compilable by py2exe (I am writing this program for other users).</p>\n\n<p>So far Windmill looks like it MIGHT be what I want, but I am not sure.</p>\n\n<p>Any ideas appreciated!</p>\n",
            "last_activity_date": 1390917371,
            "question_id": 6025082,
            "score": 38,
            "tags": [
                "javascript",
                "python",
                "screen-scraping",
                "headless-browser"
            ],
            "title": "Headless Browser for Python (Javascript support REQUIRED!)"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>If the JSON data in your array is sorted in some way, there are a variety of searches you could implement. However, if you're not dealing with a lot of data then you're probably going to be fine with an O(n) operation here (as you have). Anything else would probably be overkill.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>(You're not searching through \"JSON\", you're searching through an array -- the JSON string has already been deserialized into an object graph, in this case an array.)</p>\n\n<p>Some options:</p>\n\n<h2>Use an Object Instead of an Array</h2>\n\n<p>If you're in control of the generation of this thing, does it <em>have</em> to be an array? Because if not, there's a much simpler way.</p>\n\n<p>Say this is your original data:</p>\n\n<pre><code>[\n    {\"id\": \"one\",   \"pId\": \"foo1\", \"cId\": \"bar1\"},\n    {\"id\": \"two\",   \"pId\": \"foo2\", \"cId\": \"bar2\"},\n    {\"id\": \"three\", \"pId\": \"foo3\", \"cId\": \"bar3\"}\n]\n</code></pre>\n\n<p>Could you do the following instead?</p>\n\n<pre><code>{\n    \"one\":   {\"pId\": \"foo1\", \"cId\": \"bar1\"},\n    \"two\":   {\"pId\": \"foo2\", \"cId\": \"bar2\"},\n    \"three\": {\"pId\": \"foo3\", \"cId\": \"bar3\"}\n}\n</code></pre>\n\n<p>Then finding the relevant entry by ID is trivial:</p>\n\n<pre><code>id = \"one\"; // Or whatever\nvar entry = objJsonResp[id];\n</code></pre>\n\n<p>...as is updating it:</p>\n\n<pre><code>objJsonResp[id] = /* New value */;\n</code></pre>\n\n<p>...and removing it:</p>\n\n<pre><code>delete objJsonResp[id];\n</code></pre>\n\n<p>This takes advantage of the fact that in JavaScript, you can index into an object using a property name as a string -- and that string can be a literal, or it can come from a variable as with <code>id</code> above.</p>\n\n<h2>Putting in an ID-to-Index Map</h2>\n\n<p>(Dumb idea, predates the above. Kept for historical reasons.)</p>\n\n<p>It looks like you need this to be an array, in which case there isn't really a better way than searching through the array unless you want to put a map on it, which you could do if you have control of the generation of the object. E.g., say you have this originally:</p>\n\n<pre><code>[\n    {\"id\": \"one\",   \"pId\": \"foo1\", \"cId\": \"bar1\"},\n    {\"id\": \"two\",   \"pId\": \"foo2\", \"cId\": \"bar2\"},\n    {\"id\": \"three\", \"pId\": \"foo3\", \"cId\": \"bar3\"}\n]\n</code></pre>\n\n<p>The generating code could provide an id-to-index map:</p>\n\n<pre><code>{\n    \"index\": {\n        \"one\": 0, \"two\": 1, \"three\": 2\n    },\n    \"data\": [\n        {\"id\": \"one\",   \"pId\": \"foo1\", \"cId\": \"bar1\"},\n        {\"id\": \"two\",   \"pId\": \"foo2\", \"cId\": \"bar2\"},\n        {\"id\": \"three\", \"pId\": \"foo3\", \"cId\": \"bar3\"}\n    ]\n}\n</code></pre>\n\n<p>Then getting an entry for the id in the variable <code>id</code> is trivial:</p>\n\n<pre><code>var index = objJsonResp.index[id];\nvar obj = objJsonResp.data[index];\n</code></pre>\n\n<p>This takes advantage of the fact you can index into objects using property names.</p>\n\n<p>Of course, if you do that, you have to update the map when you modify the array, which could become a maintenance problem.</p>\n\n<p>But if you're not in control of the generation of the object, or updating the map of ids-to-indexes is too much code and/ora maintenance issue, then you'll have to do a brute force search.</p>\n\n<h2>Brute Force Search (corrected)</h2>\n\n<p>Somewhat OT (although you <em>did</em> ask if there was a better way :-) ), but your code for looping through an array is incorrect. <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\">Details here</a>, but you can't use <code>for..in</code> to loop through array indexes (or rather, if you do, you have to take special pains to do so); <code>for..in</code> loops through the <em>properties of an object</em>, not the <em>indexes of an array</em>. Your best bet with a non-sparse array (and yours is non-sparse) is a standard old-fashioned loop:</p>\n\n<pre><code>var k;\nfor (k = 0; k &lt; someArray.length; ++k) { /* ... */ }\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var k;\nfor (k = someArray.length - 1; k &gt;= 0; --k) { /* ... */ }\n</code></pre>\n\n<p>Whichever you prefer (the latter is not always faster in all implementations, which is counter-intuitive to me, but there we are). (With a <em>sparse</em> array, you might use <code>for..in</code> but again taking special pains to avoid pitfalls; more in the article linked above.)</p>\n\n<p>Using <code>for..in</code> on an array <em>seems</em> to work in simple cases because arrays have properties for each of their indexes, and their only other default properties (<code>length</code> and their methods) are marked as non-enumerable. But it breaks as soon as you set (or a framework sets) any other properties on the array object (which is perfectly valid; arrays are just objects with a bit of special handling around the <code>length</code> property).</p>\n",
                    "is_accepted": true,
                    "score": 130
                },
                {
                    "body": "<p>I had come across this issue for a complex model with several nested objects. A good example of what I was looking at doing would be this: Lets say you have a polaroid of yourself. And that picture is then put into a trunk of a car. The car is inside of a large crate. The crate is in the hold of a large ship with many other crates. I had to search the hold, look in the crates, check the trunk, and then look for an existing picture of me.</p>\n\n<p>I could not find any good solutions online to use, and using <code>.filter()</code> only works on arrays. Most solutions suggested just checking to see if <code>model[\"yourpicture\"]</code> existed. This was very undesirable because, from the example, that would only search the hold of the ship and I needed a way to get them from farther down the rabbit hole.</p>\n\n<p>This is the recursive solution I made. In comments, I confirmed from T.J. Crowder that a recursive version would be required. I thought I would share it in case anyone came across a similar complex situation.</p>\n\n<pre><code>function ContainsKeyValue( obj, key, value ){\n    if( obj[key] === value ) return true;\n    for( all in obj )\n    {\n        if( obj[all] != null &amp;&amp; obj[all][key] === value ){\n            return true;\n        }\n        if( typeof obj[all] == \"object\" &amp;&amp; obj[all]!= null ){\n            var found = ContainsKeyValue( obj[all], key, value );\n            if( found == true ) return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>This will start from a given object inside of the graph, and recurse down any objects found. I use it like this:</p>\n\n<pre><code>var liveData = [];\nfor( var items in viewmodel.Crates )\n{\n    if( ContainsKeyValue( viewmodel.Crates[items], \"PictureId\", 6 ) === true )\n    {\n        liveData.push( viewmodel.Crates[items] );\n    }\n}\n</code></pre>\n\n<p>Which will produce an array of the Crates which contained my picture.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Zapping - you can use this javascript lib; DefiantJS. There is no need to restructure JSON data into an array to ease searching. Instead, you can search the JSON structure with an XPath query like this:</p>\n\n<pre><code>    var data = [\n   {\n      \"id\": \"one\",\n      \"pId\": \"foo1\",\n      \"cId\": \"bar1\"\n   },\n   {\n      \"id\": \"two\",\n      \"pId\": \"foo2\",\n      \"cId\": \"bar2\"\n   },\n   {\n      \"id\": \"three\",\n      \"pId\": \"foo3\",\n      \"cId\": \"bar3\"\n   }\n],\nres = JSON.search( data, '//*[id=\"one\"]' );\n\nconsole.log( res[0].cId );\n// 'bar1'\n</code></pre>\n\n<p>DefiantJS extends the global object JSON with a new method; \"search\" which returns array with the matches (empty array if none were found). You can try it out yourself by pasting your JSON data and testing different XPath queries here:</p>\n\n<p><a href=\"http://www.defiantjs.com/#xpath_evaluator\" rel=\"nofollow\">http://www.defiantjs.com/#xpath_evaluator</a></p>\n\n<p>XPath is, as you know, a standardised query language.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is there a better way other than looping to find data in <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a>? It's for edit and delete.</p>\n\n<pre><code>for(var k in objJsonResp) {\n  if (objJsonResp[k].txtId == id) {\n    if (action == 'delete') {\n      objJsonResp.splice(k,1);\n    } else {\n      objJsonResp[k] = newVal;\n    }\n    break;\n  }\n}\n</code></pre>\n\n<p>The data is arranged as list of maps.\nLike:</p>\n\n<pre><code>[{id:value, pId:value, cId:value,...}, {id:value, pId:value, cId:value}, ...]\n</code></pre>\n",
            "last_activity_date": 1388904372,
            "question_id": 1946165,
            "score": 36,
            "tags": [
                "javascript",
                "json",
                "search"
            ],
            "title": "JSON find in JavaScript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p><strong>See here for working jsFiddle: <a href=\"http://jsfiddle.net/dKaJ3/2/\">http://jsfiddle.net/dKaJ3/2/</a></strong></p>\n\n<pre><code>function getSelectionHtml() {\n    var html = \"\";\n    if (typeof window.getSelection != \"undefined\") {\n        var sel = window.getSelection();\n        if (sel.rangeCount) {\n            var container = document.createElement(\"div\");\n            for (var i = 0, len = sel.rangeCount; i &lt; len; ++i) {\n                container.appendChild(sel.getRangeAt(i).cloneContents());\n            }\n            html = container.innerHTML;\n        }\n    } else if (typeof document.selection != \"undefined\") {\n        if (document.selection.type == \"Text\") {\n            html = document.selection.createRange().htmlText;\n        }\n    }\n    alert(html);\n}\n</code></pre>\n\n<p>Code taken from <a href=\"http://stackoverflow.com/users/96100/tim-down\">Tim Down</a>: <a href=\"http://stackoverflow.com/questions/4652734/return-html-from-a-user-selection/4652824#4652824\">Return HTML from a user selection</a></p>\n",
                    "is_accepted": true,
                    "score": 60
                },
                {
                    "body": "<p>To get the selected HTML, you can use the function I wrote for <a href=\"http://stackoverflow.com/questions/4652734/return-html-from-a-user-selection/4652824#4652824\">this question</a>. To replace the selection with your own HTML, you can use <a href=\"http://stackoverflow.com/questions/3362747/how-to-insert-an-element-at-selected-position-in-html-document/3363087#3363087\">this function</a>. Here's a version of the replacer function that inserts an HTML string instead of a DOM node:</p>\n\n<pre><code>function replaceSelectionWithHtml(html) {\n    var range, html;\n    if (window.getSelection &amp;&amp; window.getSelection().getRangeAt) {\n        range = window.getSelection().getRangeAt(0);\n        range.deleteContents();\n        var div = document.createElement(\"div\");\n        div.innerHTML = html;\n        var frag = document.createDocumentFragment(), child;\n        while ( (child = div.firstChild) ) {\n            frag.appendChild(child);\n        }\n        range.insertNode(frag);\n    } else if (document.selection &amp;&amp; document.selection.createRange) {\n        range = document.selection.createRange();\n        range.pasteHTML(html);\n    }\n}\n\nreplaceSelectionWithHtml(\"&lt;b&gt;REPLACEMENT HTML&lt;/b&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 35
                }
            ],
            "body": "<p>With a contenteditable element how can I replace the selected content with my own html?</p>\n",
            "last_activity_date": 1405469585,
            "question_id": 6251937,
            "score": 38,
            "tags": [
                "javascript",
                "jquery",
                "contenteditable"
            ],
            "title": "How to replace selected text with html in a contenteditable element?"
        },
        {
            "answer_count": 28,
            "answers": [
                {
                    "body": "<p>This can be a browser behavior not jQuery plugin issue. Have you tried removing the focus programmatically after you open the popup.</p>\n\n<pre><code>$('#lnkAddReservation').click(function () {\n    dlg.dialog('open');\n\n    // you may want to change the selector below\n    $('input,textarea,select').blur();\n\n    return false;\n});\n</code></pre>\n\n<p>Haven't tested that but should work ok.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Set the tabindex of the input to -1, and then set dialog.open to restore tabindex if you need it later:</p>\n\n<pre><code>$(function() {\n    $( \"#dialog-message\" ).dialog({\n        modal: true,\n        width: 500,\n        autoOpen: false,\n        resizable: false,\n        open: function()\n        {\n            $( \"#datepicker1\" ).attr(\"tabindex\",\"1\");\n            $( \"#datepicker2\" ).attr(\"tabindex\",\"2\");\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I found the following code the jQuery UI dialog function for open.</p>\n\n<pre><code>c([]).add(d.find(\".ui-dialog-content :tabbable:first\")).add(d.find(\".ui-dialog-buttonpane :tabbable:first\")).add(d).filter(\":first\").focus();\n</code></pre>\n\n<p>You can either workaround the jQuery behaviour or change the behaviour.</p>\n\n<p>tabindex -1 works as a workaround.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I had content that was longer than the dialog. On open, the dialog would scoll to the first :tabbable which was at the bottom. Here was my fix.</p>\n\n<pre><code>$(\"#myDialog\").dialog({\n   ...\n   open: function(event, ui) { $(this).scrollTop(0); }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can Add this :</p>\n\n<p>...</p>\n\n<pre><code>dlg.dialog({ autoOpen:false,\nmodal: true, \nwidth: 400,\nopen: function(){                  // There is new line\n  $(\"#txtStartDate\").focus();\n  }\n});\n</code></pre>\n\n<p>...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://jqueryui.com/changelog/1.10.0/\">jQuery UI 1.10.0 Changelog</a> lists <a href=\"http://bugs.jqueryui.com/ticket/4731\">ticket 4731</a> as being fixed.</p>\n\n<p>Looks like focusSelector was not implemented, but a cascading search for various elements was used instead.  From the ticket:</p>\n\n<blockquote>\n  <p>Extend autofocus, starting with [autofocus], then :tabbable content, then buttonpane, then close button, then dialog</p>\n</blockquote>\n\n<p>So, mark an element with the <code>autofocus</code> attribute and that is the element that should get the focus:</p>\n\n<pre><code>&lt;input autofocus&gt;\n</code></pre>\n\n<p>In <a href=\"http://api.jqueryui.com/dialog/\">the documentation</a>, the focus logic is explained (just under the table of contents, under the title 'Focus'):</p>\n\n<blockquote>\n  <p>Upon opening a dialog, focus is automatically moved to the first item\n  that matches the following:</p>\n  \n  <ol>\n  <li>The first element within the dialog with the <code>autofocus</code> attribute</li>\n  <li>The first <code>:tabbable</code> element within the dialog's content</li>\n  <li>The first <code>:tabbable</code> element within the dialog's buttonpane</li>\n  <li>The dialog's close button</li>\n  <li>The dialog itself</li>\n  </ol>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>I'd the same issue and solved it by inserting an empty input before the datepicker, that steals the focus every time the dialog is opened. This input is hidden on every opening of the dialog and shown again on closing.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I got the same problem.</p>\n\n<p>The workaround I did is add the dummy textbox at the top of the dialog container.</p>\n\n<pre><code>&lt;input type=\"text\" style=\"width: 1px; height: 1px; border: 0px;\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My workaround:</p>\n\n<pre><code>open: function(){\n  jQuery('input:first').blur();\n  jQuery('#ui-datepicker-div').hide();\n},  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>As mentioned, this is a known bug with jQuery UI and should be fixed relatively soon.  Until then...</p>\n\n<p>Here's another option, so you don't have to mess with tabindex:</p>\n\n<p><strong>Disable the datepicker temporarily until the dialog box opens:</strong></p>\n\n<pre><code>dialog.find(\".datepicker\").datepicker(\"disable\");\ndialog.dialog({\n    \"open\": function() {$(this).find(\".datepicker\").datepicker(\"enable\");},\n});\n</code></pre>\n\n<p>Works for me.</p>\n\n<p>Duplicate question: <a href=\"http://stackoverflow.com/questions/5418138/how-to-blur-the-first-form-input-at-the-dialog-opening/5423943#5423943\">How to blur the first form input at the dialog opening</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simple workaround:</p>\n\n<p>Just create a invisible element with tabindex=1 ...\nThis will not focus the datepicker ...</p>\n\n<p>eg.:</p>\n\n<pre><code>&lt;a href=\"\" tabindex=\"1\"&gt;&lt;/a&gt;\n...\nHere comes the input element\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>To expand on some of the previous answers (and ignoring the ancillary datepicker aspect), if you want to prevent the <code>focus()</code> event from focusing the first input field when your dialog opens, try this:</p>\n\n<pre><code>$('#myDialog').dialog(\n    { 'open': function() { $('input:first-child', $(this)).blur(); }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Well, it is cool that nobody found the solution for now, but it looks like I have something for you. The bad news is that the dialog grabs focus in any case even if no inputs and links are inside. \nI use the dialog as a tooltip and definitely need focus stay in the original element. Here is my solution:</p>\n\n<p>use option [autoOpen: false]</p>\n\n<pre><code>$toolTip.dialog(\"widget\").css(\"visibility\", \"hidden\"); \n$toolTip.dialog(\"open\");\n$toolTip.dialog(\"widget\").css(\"visibility\", \"visible\");\n</code></pre>\n\n<p>While the dialog invisible, the focus is not set anywhere and stay in the original place. \nIt works for tooltips with just a plain text, but not tested for more functional dialogs where it may be important to have dialog visible on opening moment. Probably will work fine in any case.</p>\n\n<p>I understand that the original post was just to avoid getting focus on the first element, but you can easily decide where the focus should be after the dialog is opened (after my code).</p>\n\n<p>Tested in IE, FF and Chrome.</p>\n\n<p>Hopefully this will help somebody.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had a similar problem and solved it by focusing on the dialog after open:</p>\n\n<pre><code>var $dialog = $(\"#pnlFiltros\")\n    .dialog({\n        autoOpen: false,\n        hide: \"puff\",                   \n        width: dWidth,\n        height: 'auto',\n        draggable: true,\n        resizable: true,\n        closeOnScape : true,\n        position: [x,y]                    \n    });\n$dialog.dialog('open');\n$(\"#pnlFiltros\").focus(); //focus on the div being dialogued (is that a word?)\n</code></pre>\n\n<p>But in my case the first element is an anchor, so I don't know if in your case that will leave the datepicker opened.</p>\n\n<p><strong>EDIT: only works on IE</strong></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Add a hidden span above it, use ui-helper-hidden-accessible to make it hidden by absolute positioning. I know you have that class because you are using dialog from jquery-ui and it's in jquery-ui.</p>\n\n<pre><code>&lt;span class=\"ui-helper-hidden-accessible\"&gt;&lt;input type=\"text\"/&gt;&lt;/span&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p><strong>find in jquery.ui.js</strong> </p>\n\n<pre><code>d.find(\".ui-dialog-buttonpane :tabbable\").get().concat(d.get()))).eq(0).focus(); \n</code></pre>\n\n<p><strong>and replace with</strong> </p>\n\n<pre><code>d.find(\".ui-dialog-buttonpane :tabbable\").get().concat(d.get()))).eq(-1).focus();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In my opinion this solution is very nice:</p>\n\n<pre><code>$(\"#dialog\").dialog({\n    open: function(event, ui) {\n        $(\"input\").blur();\n    }\n});\n</code></pre>\n\n<p>Found here: <a href=\"http://stackoverflow.com/a/9834762/1349740\">unable-to-remove-autofocus-in-ui-dialog</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have a similar problem. I open an error dialog when validation fails and it grabs the focus, just like Flugan shows it in his <a href=\"http://stackoverflow.com/a/1202501/80002\">answer</a>. The problem is that even if no element inside the dialog is tabbable, the dialog itself is still focused. Here is the original unminified code from jquery-ui-1.8.23\\js\\jquery.ui.dialog.js:</p>\n\n<pre><code>// set focus to the first tabbable element in the content area or the first button\n// if there are no tabbable elements, set focus on the dialog itself\n$(self.element.find(':tabbable').get().concat(\n  uiDialog.find('.ui-dialog-buttonpane :tabbable').get().concat(\n    uiDialog.get()))).eq(0).focus();\n</code></pre>\n\n<p>The comment is theirs!</p>\n\n<p>This is really bad for me for several reasons. The most annoying thing is that the first reaction of the user is to hit the backspace to delete the last character, but instead (s)he is prompted to leave the page, because the backspace is hit outside an input control.</p>\n\n<p>I found that the following workaround works pretty good for me:</p>\n\n<pre><code>jqueryFocus = $.fn.focus;\n$.fn.focus = function (delay, fn) {\n  jqueryFocus.apply(this.filter(':not(.ui-dialog)'), arguments);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I was looking around for a different issue but same cause.  The issue is that the dialog set focus to the first <code>&lt;a href=\"\"&gt;.&lt;/a&gt;</code> it finds.  So if you have a lot of text in your dialog and scroll bars appear you could have the situation where the scroll bar will be scrolled to the bottom.  I believe this also fixes the first persons question.  Although the others do as well.</p>\n\n<p>The simple easy to understand fix.\n<code>&lt;a id=\"someid\" href=\"#\"&gt;.&lt;/a&gt;</code>  as the first line in your dialog div.</p>\n\n<p><strong>EXAMPLE:</strong></p>\n\n<blockquote>\n<pre><code> &lt;div id=\"dialogdiv\" title=\"some title\"&gt;\n    &lt;a id=\"someid\" href=\"#\"&gt;.&lt;/a&gt;\n    &lt;p&gt;\n        //the rest of your stuff\n    &lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n</blockquote>\n\n<p><strong>Where your dialog is initiated</strong></p>\n\n<blockquote>\n<pre><code>$(somediv).dialog({\n        modal: true,\n        open: function () { $(\"#someid\").hide(); otherstuff or function },\n        close: function () { $(\"#someid\").show(); otherstuff or function }\n    });\n</code></pre>\n</blockquote>\n\n<p>The above will have nothing focused and the scroll bars will remain at the top where it belongs.  The <code>&lt;a&gt;</code> gets focus but is then hidden. So the overall effect is the desired effect.</p>\n\n<p>I know this is an old thread but as for as the UI docs there is no fix to this.  This does not require blur or focus to work.  Not sure if it is the most elegant.  But it just makes sense and easy to explain to anyone.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>jQuery 1.9 is released and there does not appear to be a fix. Attempting to prevent focus of the first text box by some of the suggested methods is not working in 1.9. I think beccause the methods attempt to blur focus or move focus occur AFTER the text box in the dialog has already gained focus and done its dirty work.</p>\n\n<p>I can't see anything in the API documentation that makes me think that anything has changed in terms of expected functionality. Off to add an opener button...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Starting from jQuery UI 1.10.0, you can choose <strong>which input element to focus on by using the HTML5 attribute</strong> <em>autofocus</em>.</p>\n\n<p>All you have to do is create a dummy element as your first input in the dialog box.\nIt will absorb the focus for you.</p>\n\n<pre><code>&lt;input type=\"hidden\" autofocus=\"autofocus\" /&gt;\n</code></pre>\n\n<p>This has been tested in Chrome, Firefox and Internet Explorer (all latest versions) on February 7, 2013.</p>\n\n<blockquote>\n  <p><a href=\"http://jqueryui.com/upgrade-guide/1.10/#added-ability-to-specify-which-element-to-focus-on-open\">http://jqueryui.com/upgrade-guide/1.10/#added-ability-to-specify-which-element-to-focus-on-open</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>In jQuery UI >= 1.10.2, you can replace the <a href=\"https://github.com/jquery/jquery-ui/blob/971c6b3e8c24a5d5c31bda7018236e60fb398ae1/ui/jquery.ui.dialog.js#L246\"><code>_focusTabbable</code></a> prototype method by a placebo function:</p>\n\n<pre><code>$.ui.dialog.prototype._focusTabbable = $.noop;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/8VbEU/132/\"><strong>Fiddle</strong></a></p>\n\n<p>This will affect all <code>dialog</code>s in the page without requiring to edit each one manually.</p>\n\n<p>The original function does nothing but setting the focus to the first element with <code>autofocus</code> attribute / <code>tabbable</code> element / or falling back to the dialog itself. As its use is just setting focus on an element, there should be no problem replacing it by a <code>noop</code>.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Here is the solution I implemented after reading through <a href=\"http://bugs.jqueryui.com/ticket/4731\" rel=\"nofollow\">jQuery UI ticket #4731</a>, originally posted by slolife as a response to another answer.  (The ticket was also created by him.)</p>\n\n<p>First, in whatever method you use to apply autocompletes to the page, add the following line of code:</p>\n\n<pre><code>$.ui.dialog.prototype._focusTabbable = function(){};\n</code></pre>\n\n<p>That disables jQuery's \"auto-focus\" behavior.  To ensure that your site continues to be broadly accessible, wrap your dialog creation methods so that additional code can be added, and add a call to focus the first input element:</p>\n\n<pre><code>function openDialog(context) {\n\n    // Open your dialog here\n\n    // Usability for screen readers.  Focus on an element so that screen readers report it.\n    $(\"input:first\", $(context)).focus();\n\n}\n</code></pre>\n\n<p>To further address accessibility when autocomplete options are selected via keyboard, we override jQuery UI's \"select\" autocomplete callback and add some additional code to ensure the textElement does not lose focus in IE 8 after making a selection.</p>\n\n<p>Here is the code we use to apply autocompletes to elements:</p>\n\n<pre><code>$.fn.applyAutocomplete = function () {\n\n    // Prevents jQuery dialog from auto-focusing on the first tabbable element.\n    // Make sure to wrap your dialog opens and focus on the first input element\n    // for screen readers.\n    $.ui.dialog.prototype._focusTabbable = function () { };\n\n    $(\".autocomplete\", this)\n        .each(function (index) {\n\n            var textElement = this;\n\n            var onSelect = $(this).autocomplete(\"option\", \"select\");\n            $(this).autocomplete(\"option\", {\n                select: function (event, ui) {\n                    // Call the original functionality first\n                    onSelect(event, ui);\n\n                    // We replace a lot of content via AJAX in our project.\n                    // This ensures proper copying of values if the original element which jQuery UI pointed to\n                    // is replaced.\n                    var $hiddenValueElement = $(\"#\" + $(textElement).attr('data-jqui-acomp-hiddenvalue'));\n                    if ($hiddenValueElement.attr(\"value\") != ui.item.value) {\n                        $hiddenValueElement.attr(\"value\", ui.item.value);\n                    }\n\n                    // Replace text element value with that indicated by \"display\" if any\n                    if (ui.item.display)\n                        textElement.value = ui.item.display;\n\n                    // For usability purposes.  When using the keyboard to select from an autocomplete, this returns focus to the textElement.\n                    $(textElement).focus();\n\n                    if (ui.item.display)\n                        return false;\n\n                }\n            });\n        })\n        // Set/clear data flag that can be checked, if necessary, to determine whether list is currently dropped down\n        .on(\"autocompleteopen\", function (event, ui) {\n            $(event.target).data().autocompleteIsDroppedDown = true;\n        })\n        .on(\"autocompleteclose\", function (event, ui) {\n            $(event.target).data().autocompleteIsDroppedDown = false;\n        });\n\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you only have one field in the form of Jquery dialog and it is the one that needs Datepicker, alternatively, you can just set focus on dialog <strong>Close (cross) button</strong> in dialog's title bar:</p>\n\n<pre><code>$('.ui-dialog-titlebar-close').focus();\n</code></pre>\n\n<p>Call this AFTER dialog was initialized, e.g.:</p>\n\n<pre><code>$('#yourDialogId').dialog();\n$('.ui-dialog-titlebar-close').focus();\n</code></pre>\n\n<p>Because close button is rendered after the <code>.dialog()</code> is called.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>as first input :  <code>&lt;input type=\"text\" style=\"position:absolute;top:-200px\" /&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I had similar problem.\nOn my page first input is text box with jQuery UI calendar.\nSecond element is button.\nAs date already have value, I set focus on button, but first add trigger for blur on text box. This solve problem in all browsers and probably in all version of jQuery. Tested in version 1.8.2.</p>\n\n<pre><code>&lt;div style=\"padding-bottom: 30px; height: 40px; width: 100%;\"&gt;\n@using (Html.BeginForm(\"Statistics\", \"Admin\", FormMethod.Post, new { id = \"FormStatistics\" }))\n{\n    &lt;label style=\"float: left;\"&gt;@Translation.StatisticsChooseDate&lt;/label&gt;\n    @Html.TextBoxFor(m =&gt; m.SelectDate, new { @class = \"js-date-time\",  @tabindex=1 })\n    &lt;input class=\"button gray-button button-large button-left-margin text-bold\" style=\"position:relative; top:-5px;\" type=\"submit\" id=\"ButtonStatisticsSearchTrips\" value=\"@Translation.StatisticsSearchTrips\"  tabindex=\"2\"/&gt;\n}\n</code></pre>\n\n<p></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function () {        \n    $(\"#SelectDate\").blur(function () {\n        $(\"#SelectDate\").datepicker(\"hide\");\n    });\n    $(\"#ButtonStatisticsSearchTrips\").focus();\n\n});   \n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just figured this out while playing around.</p>\n\n<p>I found with these solutions to remove focus, caused the <kbd>ESC</kbd> key to stop working (ie close the dialog) when first going into the Dialog.</p>\n\n<p>If the dialog opens and you immediately press <kbd>ESC</kbd>, it won't close the dialog (if you have that enabled), because the focus is on some hidden field or something, and it is not getting keypress events.</p>\n\n<p>The way I fixed it was to add this to the open event to remove the focus from the first field instead:</p>\n\n<pre><code>$('#myDialog').dialog({\n    open: function(event,ui) {\n        $(this).parent().focus();\n    }\n});\n</code></pre>\n\n<p>This sets focus to the dialog box, which is not visible, and then the <kbd>ESC</kbd> key works.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is really important for smartphones and tablets because the keyboard comes up when an input has the focus. This is what I've done, add this input at the beginning of the div:</p>\n\n<pre><code>&lt;input type=\"image\" width=\"1px\" height=\"1px\"/&gt;\n</code></pre>\n\n<p>Doesn't work with size <code>0px</code>. I guess it's even better with a real transparent image, either <code>.png</code> or <code>.gif</code> but I haven't tried.</p>\n\n<p>Working fine so far in iPad.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have setup a jQuery UI modal dialog to display when a user clicks a link.  There are two textboxes (I only show the code for 1 for brevity) in that dialog div tag and it is changed to be a jQuery UI DatePicker textbox that reacts on focus.</p>\n\n<p>The problem is that the jQuery UI dialog('open') somehow triggers the first textbox to have focus, which then triggers the datepicker calendar to open immediately.</p>\n\n<p>So I am looking for a way to prevent the focus from happening automatically.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div&gt;&lt;a id=\"lnkAddReservation\" href=\"#\"&gt;Add reservation&lt;/a&gt;&lt;/div&gt;\n\n&lt;div id=\"divNewReservation\" style=\"display:none\" title=\"Add reservation\"&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;&lt;asp:Label AssociatedControlID=\"txtStartDate\" runat=\"server\" Text=\"Start date\" /&gt;&lt;/th&gt;\n            &lt;td&gt;\n                &lt;asp:TextBox ID=\"txtStartDate\" runat=\"server\" CssClass=\"datepicker\" /&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n\n    &lt;div&gt;\n        &lt;asp:Button ID=\"btnAddReservation\" runat=\"server\" OnClick=\"btnAddReservation_Click\" Text=\"Add reservation\" /&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    $(document).ready(function() {\n        var dlg = $('#divNewReservation');\n        $('.datepicker').datepicker({ duration: '' });\n        dlg.dialog({ autoOpen:false, modal: true, width:400 });\n        $('#lnkAddReservation').click(function() { dlg.dialog('open'); return false; });\n        dlg.parent().appendTo(jQuery(\"form:first\"));\n    });\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1418432545,
            "question_id": 1202079,
            "score": 99,
            "tags": [
                "javascript",
                "jquery",
                "jquery-ui"
            ],
            "title": "Prevent jQuery UI dialog from setting focus to first textbox"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>My crystal ball says that you are loading the model using either <code>file://</code> or <code>C:/</code>, which stays true to the error message as they are not <code>http://</code></p>\n\n<p>So you can either install a webserver in your local PC or upload the model somewhere else and use <code>jsonp</code> and change the url to <code>http://example.com/path/to/model</code></p>\n",
                    "is_accepted": true,
                    "score": 93
                },
                {
                    "body": "<p>Just to be more explicit than above - so yes you cannot point your browser directly at file://some/path/some.html  so instead once you have python installed cd into the dir where your some.html file(s) lives then issue :</p>\n\n<pre><code> python -m SimpleHTTPServer  \n</code></pre>\n\n<p>which will spin up a web server hosting entire dir listing which you reference from URL :</p>\n\n<pre><code>http://localhost:8000\n</code></pre>\n\n<p>this is built into any python install (batteries are included).  For python3 use this :</p>\n\n<pre><code>python3 -m http.server\n</code></pre>\n\n<p>Alternatively, if you demand a more responsive setup and already use nodejs and npm just issue</p>\n\n<pre><code>npm install -g http-server\n</code></pre>\n\n<p>then, as above, cd into dir containing your some.html and issue :</p>\n\n<pre><code>http-server -c-1\n</code></pre>\n\n<p>which spins up a nodejs httpd which does a dir listing of your static files visible from :</p>\n\n<pre><code>http://localhost:8080 \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>Ran in to this today.</p>\n\n<p>I wrote some code that looked like this:</p>\n\n<pre><code>app.controller('ctrlr', function($scope, $http){\n    $http.get('localhost:3000').success(function(data) {\n        $scope.stuff = data;\n    });\n});\n</code></pre>\n\n<p>...but it should've looked like this:</p>\n\n<pre><code>app.controller('ctrlr', function($scope, $http){\n    $http.get('http://localhost:3000').success(function(data) {\n        $scope.stuff = data;\n    });\n});\n</code></pre>\n\n<p>The only difference was the lack of <code>http://</code> in the second snippet of code.</p>\n\n<p>Just wanted to put that out there in case there are others with a similar issue.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>In Chrome you can use this flag:</p>\n\n<pre><code>--allow-file-access-from-files\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/q/18586921/669677\">Read more here.</a></p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I was getting this exact error when loading an HTML file on the browser that was using a json file from the local directory. In my case, I was able to solve this by creating a simple node server that allowed to server static content. I left the code for this at this <a href=\"http://stackoverflow.com/a/26845720/267835\">other answer</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For those on Windows without Python or Node.js, there is still a lightweight solution: <strong><a href=\"http://cesanta.com/mongoose.shtml\" rel=\"nofollow\">Mongoose</a></strong>.</p>\n\n<p>All you do is drag the executable to wherever the root of the server should be, and run it. An icon will appear in the taskbar and it'll navigate to the server in the default browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to load a 3D model into Three.js with <code>JSONLoader</code>, and that 3D model is in the same directory as the entire website.</p>\n\n<p>I'm getting the <code>\"Cross origin requests are only supported for HTTP.\"</code> error, but I don't know what's causing it nor how to fix it.</p>\n",
            "last_activity_date": 1425447557,
            "question_id": 10752055,
            "score": 86,
            "tags": [
                "javascript",
                "file",
                "http",
                "3d",
                "three.js"
            ],
            "title": "&quot;Cross origin requests are only supported for HTTP.&quot; error when loading a local file"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>that is ajax. you cannot use ajax without javascript. you should look at jquery and prototype examples to get an idea of usage.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What you are trying to do is technically ajax. Ajax creates xhtml fragment transactions to update sections of a page. Javascript makes these get requests nice and neat.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>AJAX stands for Asynchronous Javascript and XHTML.  AJAX supports partial updates to pages without having to post the entire page back to the server.</p>\n\n<p>There are plenty of options for AJAX.  The two most notable (arguably) are Microsoft's ASP.NET AJAX (formerly Atlas) and jQuery.  </p>\n\n<p>ASP.NET AJAX is relatively easy to set up if you're already familiar with ASP.NET.  jQuery is good if you already know javascript, and allows very granular control over the querying and updating of your page.</p>\n\n<p>HTH</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>AJAX typically involves sending HTTP requests from client to server and processing the server's response, without reloading the entire page. (Asynchronously).</p>\n\n<p>Javascript generally does the submission and receives the data response from the server (traditionally XML, often other less verbose formats like JSON)</p>\n\n<p>The Javascript then may update the page DOM dynamically to update the user's view.</p>\n\n<p>Thus 'Asychronous Javascript And XML'.</p>\n\n<p>There are other options to update the user's view without reloading the page, things like Flash and Applets, but these don't sound like good solutions for your case. Sounds like Javascript is the way to go. There's loads of good library support around, like <a href=\"http://jquery.com/\">jQuery</a> as is used on this site, so you don't need to actually write much Javascript yourself.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The essence of AJAX is this:</p>\n\n<p><em>Your pages can browse the web and update their own content while\nthe user is doing other things</em>.</p>\n\n<p>That is, your javascript can send asynchronous GET and POST requests (usually via an <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow\"><code>XMLHttpRequest</code></a> object) then use the results of those requests to modify its page (via <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow\">Document Object Model</a> manipulation).</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Ajax is more than reload just a part of the page. Ajax stands for Asynchronous Javascript And Xml.</p>\n\n<p>The only part of Ajax that you need is the <em>XMLHttpRequest</em> object from javascript. You have to use it to load and reload small part of your html as a div or any other tags.</p>\n\n<p>Read that <a href=\"http://www.w3schools.com/Ajax/ajax%5Fexample.asp\">example</a> and you will be pro sooner as you think!</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nfunction ajaxFunction()\n{\nvar xmlhttp;\nif (window.XMLHttpRequest)\n  {\n  // code for IE7+, Firefox, Chrome, Opera, Safari\n  xmlhttp=new XMLHttpRequest();\n  }\nelse if (window.ActiveXObject)\n  {\n  // code for IE6, IE5\n  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\nelse\n  {\n  alert(\"Your browser does not support XMLHTTP!\");\n  }\nxmlhttp.onreadystatechange=function()\n{\nif(xmlhttp.readyState==4)\n  {\n  document.myForm.time.value=xmlhttp.responseText;\n  }\n}\nxmlhttp.open(\"GET\",\"time.asp\",true);\nxmlhttp.send(null);\n}\n&lt;/script&gt;\n\n&lt;form name=\"myForm\"&gt;\nName: &lt;input type=\"text\" name=\"username\" onkeyup=\"ajaxFunction();\" /&gt;\nTime: &lt;input type=\"text\" name=\"time\" /&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If you are totally new to AJAX (which stands for Asynchronous Javascript And XML), the <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">AJAX</a> entry on wikipedia is a good starting point:</p>\n\n<blockquote>\n  <p>Like DHTML and LAMP, AJAX is not a technology in itself, but a group of technologies. AJAX uses a combination of:</p>\n  \n  <ul>\n  <li>HTML and CSS for marking up and\n  styling information.  </li>\n  <li>The DOM\n  accessed with JavaScript to\n  dynamically display and interact with\n  the information presented.</li>\n  <li>A method\n  for exchanging data asynchronously\n  between browser and server, thereby\n  avoiding page reloads. The\n  XMLHttpRequest (XHR) object is usually\n  used, but sometimes an IFrame object\n  or a dynamically added  tag is\n  used instead.</li>\n  <li>A format for the data\n  sent to the browser. Common formats\n  include XML, pre-formatted HTML, plain\n  text, and JavaScript Object Notation\n  (JSON). This data could be created\n  dynamically by some form of\n  server-side scripting.</li>\n  </ul>\n</blockquote>\n\n<p>As you can see, from a pure technological point of view, there is nothing really new here. Most of AJAX parts were already there in 1994 (1999 for the <code>XMLHttpRequest</code> object). The real novelty was to use these parts <em>together</em> as Google did with GMail (2004) and Google Maps (2005). Actually, both sites contributed heavily to the promotion of AJAX.</p>\n\n<p>A picture being worth a thousand words, below a diagram that illustrates the communication between the client and the remote server, as well as the differences between the classic and the AJAX-powered applications:</p>\n\n<p><img src=\"http://i.imgur.com/rE8LCgv.jpg\" alt=\"alt text\"></p>\n\n<p>For the orange part, you can do everything by hand (with the <code>XMLHttpRequest</code> object) or you can use famous JavaScript libraries like <a href=\"http://jquery.com/\">jQuery</a>, <a href=\"http://www.prototypejs.org/\">Prototype</a>, <a href=\"http://developer.yahoo.com/yui/\">YUI</a>, etc to \"AJAXify\" the client-side of your application. Such libraries aim to hide the complexity of JavaScript development (e.g. the cross-browser compatibility), but might be overkill for a simple feature.</p>\n\n<p>On the server-side, some frameworks can help too (e.g. <a href=\"http://directwebremoting.org/\">DWR</a> or <a href=\"https://rajax.dev.java.net/\">RAJAX</a> if you are using Java), but all you need to do is basically to expose a service that returns only the required informations to partially update the page (initially as XML/XHTML - the X in AJAX - but <a href=\"http://json.org/\">JSON</a> is often preferred nowadays).</p>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<p>If you're interested, IBM have a 10 (possibly more) part series on Ajax: <a href=\"http://www.ibm.com/developerworks/web/library/wa-ajaxintro1.html\" rel=\"nofollow\">Mastering Ajax part 1</a></p>\n\n<p>Although a few years old now it's a good intro, (even if you just read the first part!)</p>\n\n<p>I think the whole series should be listed <a href=\"http://www.ibm.com/developerworks/views/web/libraryview.jsp?search%5Fby=Mastering+Ajax\" rel=\"nofollow\">Here</a>, although the site's being a bit slow for me at the moment...</p>\n\n<p><strong>Summary:</strong></p>\n\n<blockquote>\n  <p>Ajax, which consists of HTML, JavaScript\u2122 technology, DHTML, and DOM, is an outstanding approach that helps you transform clunky Web interfaces into interactive Ajax applications. The author, an Ajax expert, demonstrates how these technologies work together -- from an overview to a detailed look -- to make extremely efficient Web development an easy reality. He also unveils the central concepts of Ajax, including the XMLHttpRequest object.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the essence of AJAX? For example, I want to have a link on my page such that when a user clicks this link, some information is sent to my server without the reloading of the current page. Is that AJAX?</p>\n\n<p>I was able to get this behavior by using isoframes. In more details I put a link (let's say a small image) in a small isoframe. When the user clicks this link the browser reloads only the page in the isoframe.</p>\n\n<p>However, I think it is not an elegant way to reach the goal. I think I have to use AJAX. How does it work? Can a usage of XHTML solve the considered problem in an elegant way? Or do I need to use JavaScripts?</p>\n\n<p>I do not need much. I just want to have a small link which (after clicking) sent some information to server. Let say I have a \"star-image\" near a message. If a user click the star (he/she likes the message) star changes the color and my server update database (to remember that user likes the message).</p>\n",
            "last_activity_date": 1423194394,
            "question_id": 1510011,
            "score": 40,
            "tags": [
                "javascript",
                "ajax"
            ],
            "title": "How does AJAX work?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I'm thinking no.  Bookmarks/favorites should be under the control of the user, imagine if any site you visited could insert itself into your bookmarks with just some javascript.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><strong>jQuery Version</strong></p>\n\n<p>JavaScript (modified from a script I found on someone's site - I just can't find the site again, so I can't give the person credit):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  $(document).ready(function() {\n    $(\"#bookmarkme\").click(function() {\n      if (window.sidebar) { // Mozilla Firefox Bookmark\n        window.sidebar.addPanel(location.href,document.title,\"\");\n      } else if(window.external) { // IE Favorite\n        window.external.AddFavorite(location.href,document.title); }\n      else if(window.opera &amp;&amp; window.print) { // Opera Hotlist\n        this.title=document.title;\n        return true;\n  }\n});\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a id=\"bookmarkme\" href=\"#\" rel=\"sidebar\" title=\"bookmark this page\"&gt;Bookmark This Page&lt;/a&gt;\n</code></pre>\n\n<p>IE will show an error if you don't run it off a server (it doesn't allow JavaScript bookmarks via JavaScript when viewing it as a <code>file://...</code>.</p>\n\n<p>If you need a more complete script, you can always <a href=\"http://www.dynamicsitesolutions.com/javascript/add-bookmark-script/\">buy one from this page</a> (no, I'm not affiliated with that site... LOL).</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>How about using a drop-in solution like <a href=\"http://sharethis.com/\" rel=\"nofollow\">ShareThis</a> or <a href=\"http://addthis.com/\" rel=\"nofollow\">AddThis</a>? They have similar functionality, so it's quite possible they already solved the problem. </p>\n\n<p>AddThis's code has a huge if/else browser version fork for saving favorites, though, with most branches ending in prompting the user to manually add the favorite themselves, so I am thinking that no such pure JavaScript implementation exists.</p>\n\n<p>Otherwise, if you only need to support IE and Firefox, you have IE's <a href=\"http://msdn.microsoft.com/en-us/library/ms535926%28VS.85%29.aspx\" rel=\"nofollow\">window.externalAddFavorite( )</a> and Mozilla's <a href=\"https://developer.mozilla.org/en/DOM/window.sidebar\" rel=\"nofollow\">window.sidebar.addPanel( ).</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function bookmark(title, url) {\n    if(document.all) { // ie\n        window.external.AddFavorite(url, title);\n    }\n    else if(window.sidebar) { // firefox\n        window.sidebar.addPanel(title, url, \"\");\n    }\n    else if(window.opera &amp;&amp; window.print) { // opera\n        var elem = document.createElement('a');\n        elem.setAttribute('href',url);\n        elem.setAttribute('title',title);\n        elem.setAttribute('rel','sidebar');\n        elem.click(); // this.title=document.title;\n    }\n}\n</code></pre>\n\n<p>I used this &amp; works great in IE, FF, Netscape.\nChrome, Opera and safari do not support it!</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>Is there any Cross-browser bookmark/add to favorites javascript. </p>\n\n<p>Searched for some list but none is working. Can you please suggest any ?</p>\n",
            "last_activity_date": 1362031967,
            "question_id": 3024745,
            "score": 33,
            "tags": [
                "javascript",
                "wordpress",
                "plugins",
                "cross-browser",
                "bookmarks"
            ],
            "title": "Cross-browser bookmark/add to favorites javascript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>No, as that would allow you to create malicious programs in the client's computer, and harm his privacy.</p>\n\n<p>Also, requests to download files come from the server, so you'll need to create the file on the server, and serve it to the user, and hope he'll save it (if he requested for it it's likely that he will).</p>\n\n<p>Another possible solution to look at is to use data URIs or CSVs, but browser support for them is incomplete (IE), see <a href=\"http://stackoverflow.com/questions/3665115/create-a-file-in-memory-for-user-to-download-not-through-server/3665147#3665147\">Create a file in memory for user to download, not through server</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You will need server side functionality in order to server the user a text file (javascript is not enough).\nYou can create a server side script that creates the file and use javascript in order to prompt user to save it. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>On Submit button from user, you can create file on server and redirect user to url of the file, from where it should get automatically downloaded.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Sure you can, using the brand new APIs: <a href=\"http://jsfiddle.net/4D92b/88/\">http://jsfiddle.net/4D92b/88/</a>.</p>\n\n<pre><code> window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n\n window.requestFileSystem(window.TEMPORARY, 1024*1024, function(fs) {\n    fs.root.getFile('test.bin', {create: true}, function(fileEntry) { // test.bin is filename\n        fileEntry.createWriter(function(fileWriter) {\n            var arr = new Uint8Array(3); // data length\n\n            arr[0] = 97; // byte data; these are codes for 'abc'\n            arr[1] = 98;\n            arr[2] = 99;\n\n            var blob = new Blob([arr]);\n\n            fileWriter.addEventListener(\"writeend\", function() {\n                // navigate to file, will download\n                location.href = fileEntry.toURL();\n            }, false);\n\n            fileWriter.write(blob);\n        }, function() {});\n    }, function() {});\n}, function() {});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>Enter this into the Chrome browser</p>\n\n<pre><code>data:text;charset=utf-8,helloWorld\n</code></pre>\n\n<p>So to construct the download for your users you would do something like</p>\n\n<p><code>data='&lt;a href='data:text;charset=utf-8,'+uriEncode(yourUSERdataToDownload)+' &gt;Your Download&lt;/a&gt;</code></p>\n\n<p>Then inject it into the dom for your user to press.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>document.body.innerHTML+=\"&lt;a id='test' href='data:text;charset=utf-8,\"+encodeURIComponent(\"hi\")+\"'&gt;Your Download&lt;/a&gt;\";\ndocument.getElementById('test').click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following method works in IE11+, Firefox 25+ and Chrome 30+:</p>\n\n<pre><code>&lt;a id=\"export\" class=\"myButton\" download=\"\" href=\"#\"&gt;export&lt;/a&gt;\n&lt;script&gt;\n    function createDownloadLink(anchorSelector, str, fileName){\n        if(window.navigator.msSaveOrOpenBlob) {\n            var fileData = [str];\n            blobObject = new Blob(fileData);\n            $(anchorSelector).click(function(){\n                window.navigator.msSaveOrOpenBlob(blobObject, fileName);\n            });\n        } else {\n            var url = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(str);\n            $(anchorSelector).attr(\"download\", fileName);               \n            $(anchorSelector).attr(\"href\", url);\n        }\n    }\n\n    $(function () {\n        var str = \"hi,file\";\n        createDownloadLink(\"#export\",str,\"file.txt\");\n    });\n\n&lt;/script&gt;\n</code></pre>\n\n<p>See this in Action: <a href=\"http://jsfiddle.net/Kg7eA/\" rel=\"nofollow\">http://jsfiddle.net/Kg7eA/</a></p>\n\n<p>Firefox and Chrome support data URI for navigation, which allows us to create files by navigating to a data URI, while IE doesn't support it for security purposes. </p>\n\n<p>On the other hand, IE has API for saving a blob, which can be used to create and download files.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I would like to know if I can create a text file and save the file in the users \"Downloads\" section in his/her computer using javascript. The way my feature should work is when the user clicks the submit button, I populate the users info in the text file and then save it in his machine. I would like this to work in google chrome.</p>\n\n<p>Is this possible? I have seen posts that specifically tell me that it is a serious security issue.</p>\n",
            "last_activity_date": 1388127600,
            "question_id": 7160720,
            "score": 16,
            "tags": [
                "javascript",
                "google-chrome",
                "javascript-events",
                "google-chrome-extension",
                "facebook-javascript-sdk"
            ],
            "title": "create a file using javascript in chrome on client side"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>It's just a matter of personal preference. There is no difference between these two ways, other than a few bytes saved with the second form if you strip out the white space.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>var variable1 = \"Hello World!\";\nvar variable2 = \"Testing...\";\nvar variable3 = 42;\n</code></pre>\n\n<p>is more readable than:</p>\n\n<pre><code>var variable1 = \"Hello World!\",\n    variable2 = \"Testing...\",\n    variable3 = 42;\n</code></pre>\n\n<p>But they do the same thing.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The first way is easier to maintain. Each declaration is a single statement on a single line, so you can easily add, remove, and reorder the declarations.</p>\n\n<p>With the second way, it is annoying to remove the first or last declaration because they contain the <code>var</code> keyword and semicolon. And every time you add a new declaration, you have to change the semicolon in the old line to a comma.</p>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<p>It's common to use <a href=\"http://www.jslint.com/lint.html#scope\">one <code>var</code> statement per scope</a> for organization.  The way all \"scopes\" follow a similar pattern making the code more readable.  Additionally, the engine \"hoists\" them all to the top anyway.  So keeping your declarations together mimics what will actually happen more closely.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Besides maintainability, the first way eliminates possibility of accident global variables creation:</p>\n\n<pre><code>(function () {\nvar variable1 = \"Hello World!\" // semicolon is missed out accidently\nvar variable2 = \"Testing...\"; // still a local variable\nvar variable3 = 42;\n}());\n</code></pre>\n\n<p>While the second way is less forgiving:</p>\n\n<pre><code>(function () {\nvar variable1 = \"Hello World!\" // comma is missed out accidently\n    variable2 = \"Testing...\", // becomes a global variable\n    variable3 = 42; // a global variable as well\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>Maybe like this</p>\n\n<pre><code>var variable1 = \"hello world\"\n, variable2 = 2\n, variable3 = \"how are you doing\"\n, variable4 = 42;\n</code></pre>\n\n<p>Except when changing the first or last variable it is easy to maintain and read.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>It's much more readable when doing it this way:</p>\n\n<pre><code>var hey = 23;\nvar hi = 3;\nvar howdy 4;\n</code></pre>\n\n<p>But takes less space and lines of code this way:</p>\n\n<pre><code>var hey=23,hi=3,howdy=4;\n</code></pre>\n\n<p>It can be ideal for saving space, but let JavaScript compressors handle it for you.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>My only, yet essential use for comma is in a for loop:</p>\n\n<pre><code>for (var i = 0, n = a.length; i &lt; n; i++) {\n  var e = a[i];\n  console.log(e);\n}\n</code></pre>\n\n<p>I went here to look up whether this is OK in JavaScript.</p>\n\n<p>Even seeing it work, a question remained whether n is local to the function.</p>\n\n<p>This verifies, n is local:</p>\n\n<pre><code>a=[3,5,7,11];\n(function l () { for (var i = 0, n = a.length; i &lt; n; i++) {\n  var e = a[i];\n  console.log(e);\n}}) ();\nconsole.log(typeof n == \"undefined\" ?\n  \"as expected, n was local\" : \"oops, n was global\");\n</code></pre>\n\n<p>For a moment I wasn't sure, switching between languages.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think the first way (multiple vars) is best, as you can otherwise end up with this (from an application that uses Knockout), which is difficult to read in my opinion:</p>\n\n<pre><code>    var categories = ko.observableArray(),\n        keywordFilter = ko.observableArray(),\n        omniFilter = ko.observable('').extend({ throttle: 300 }),\n        filteredCategories = ko.computed(function () {\n            var underlyingArray = categories();\n            return ko.utils.arrayFilter(underlyingArray, function (n) {\n                return n.FilteredSportCount() &gt; 0;\n            });\n        }),\n        favoriteSports = ko.computed(function () {\n            var sports = ko.observableArray();\n            ko.utils.arrayForEach(categories(), function (c) {\n                ko.utils.arrayForEach(c.Sports(), function (a) {\n                    if (a.IsFavorite()) {\n                        sports.push(a);\n                    }\n                });\n            });\n            return sports;\n        }),\n        toggleFavorite = function (sport, userId) {\n            var isFavorite = sport.IsFavorite();\n\n            var url = setfavouritesurl;\n\n            var data = {\n                userId: userId,\n                sportId: sport.Id(),\n                isFavourite: !isFavorite\n            };\n\n            var callback = function () {\n                sport.IsFavorite(!isFavorite);\n            };\n\n            jQuery.support.cors = true;\n            jQuery.ajax({\n                url: url,\n                type: \"GET\",\n                data: data,\n                success: callback\n            });\n        },\n        hasfavoriteSports = ko.computed(function () {\n            var result = false;\n            ko.utils.arrayForEach(categories(), function (c) {\n                ko.utils.arrayForEach(c.Sports(), function (a) {\n                    if (a.IsFavorite()) {\n                        result = true;\n                    }\n                });\n            });\n            return result;\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Cohesion over Coupling.</p>\n\n<p>\"Low coupling is often a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability.\"</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Coupling_(computer_programming)\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Coupling_(computer_programming)</a></p>\n\n<p>So choose the first one.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Although both are valid, using the second discourages inexperienced developers from placing var statements all over the place and causing hoisting issues.  If there is only one var per function, at the top of the function, then it is easier to debug the code as a whole.  This can mean that the lines where the variables are declared are not as explicit as some may like. </p>\n\n<p>I feel that trade-off is worth it, if it means weaning a developer off of dropping 'var' anywhere they feel like.</p>\n\n<p>People may complain about JSLint, I do as well, but a lot of it is geared not toward fixing issues with the language, but in correcting bad habits of the coders and therefore preventing problems in the code they write.  Therefore:</p>\n\n<p>\"In languages with block scope, it is usually recommended that variables be declared at the site of first use. But because JavaScript does not have block scope, it is wiser to declare all of a function's variables at the top of the function. It is recommended that a single var statement be used per function.\" - <a href=\"http://www.jslint.com/lint.html#scope\" rel=\"nofollow\">http://www.jslint.com/lint.html#scope</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think it's a matter of personal preference. I prefer to do it in the following way  : </p>\n\n<pre><code>   var /* Vars */\n            me = this, that = scope,\n            temp, tempUri, tempUrl,\n            videoId = getQueryString()[\"id\"],\n            host = location.protocol + '//' + location.host,\n            baseUrl = \"localhost\",\n            str = \"Visit W3Schools\",\n            n = str.search(/w3schools/i),\n            x = 5,\n            y = 6,\n            z = x + y\n   /* End Vars */;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In JavaScript, it is possible to declare multiple variables like this:</p>\n\n<pre><code>var variable1 = \"Hello World!\";\nvar variable2 = \"Testing...\";\nvar variable3 = 42;\n</code></pre>\n\n<p>...or like this:</p>\n\n<pre><code>var variable1 = \"Hello World!\",\n    variable2 = \"Testing...\",\n    variable3 = 42;\n</code></pre>\n\n<p>Is one method better/faster than the other?</p>\n\n<p>Thanks,</p>\n\n<p>Steve</p>\n",
            "last_activity_date": 1423587779,
            "question_id": 694102,
            "score": 133,
            "tags": [
                "javascript",
                "variables",
                "coding-style",
                "performance",
                "declaration"
            ],
            "title": "Declaring Multiple Variables in JavaScript"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p><a href=\"http://ejohn.org/blog/fast-javascript-maxmin/\">Resig to the rescue:</a></p>\n\n<pre><code>Array.max = function( array ){\n    return Math.max.apply( Math, array );\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 153
                },
                {
                    "body": "<p>You can use the apply function, to call <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Math/max\">Math.max</a>:</p>\n\n<pre><code>var array = [267, 306, 108];\nvar largest = Math.max.apply(Math, array); // 306\n</code></pre>\n\n<p>How it works?</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Function/apply\">apply</a> function is used to call another function, with a given context and arguments, provided as an array. The min and max functions can take an arbitrary number of input arguments: Math.max(val1, val2, ..., valN)</p>\n\n<p>So if we call:</p>\n\n<pre><code>Math.min.apply(Math, [1,2,3,4]);\n</code></pre>\n\n<p>The apply function will execute:</p>\n\n<pre><code>Math.min(1,2,3,4);\n</code></pre>\n\n<p>Note that the first parameter, the context, is not important for these functions since they are static, they will work regardless of what is passed as the context.</p>\n",
                    "is_accepted": false,
                    "score": 92
                },
                {
                    "body": "<p>You could sort the array in descending order and get the first item:</p>\n\n<pre><code>[267, 306, 108].sort(function(a,b){return b-a;})[0]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I've done some testing and it turns out that for bigger arrays (~100k), the following code is roughly 30% faster than <code>Math.max.apply()</code>:</p>\n\n<pre><code>function mymax(a)\n{\n    var m = -Infinity, i = 0, n = a.length;\n\n    for (; i != n; ++i) {\n        if (a[i] &gt; m) {\n            m = a[i];\n        }\n    }\n\n    return m;\n}\n</code></pre>\n\n<p><a href=\"http://jsperf.com/max-integer-from-array\"><strong>Benchmark results</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Almost all of the answers use <code>Math.max.apply()</code> which is nice and dandy but has limitations.</p>\n\n<p>Function arguments are placed onto stack which has a downside - a limit. So if your array is bigger than limit it will fail with <code>RangeError: Maximum call stack size exceeded.</code></p>\n\n<p>To find a call stack size I used this code:</p>\n\n<pre><code>var ar = [];\nfor (var i = 1; i &lt; 100*99999; i++) {\n  ar.push(1);\n  try {\n    var max = Math.max.apply(Math, ar);\n  } catch(e) {\n    console.log('Limit reached: '+i+' error is: '+e);\n    break;\n  }\n}\n</code></pre>\n\n<p>It proved to be biggest on FireFox on my machine - <strong>591519</strong>. This means that if you array contains more than <strong>591519</strong> items, <code>Math.max.apply()</code> will result in <strong>RangeError</strong>.</p>\n\n<p>Best solution for this problem is iterative way(credit: <a href=\"https://developer.mozilla.org/\" rel=\"nofollow\">https://developer.mozilla.org/</a>):</p>\n\n<pre><code>max = -Infinity, min = +Infinity;\n\nfor (var i = 0; i &lt; numbers.length; i++) {\n  if (numbers[i] &gt; max)\n    max = numbers[i];\n  if (numbers[i] &lt; min)\n    min = numbers[i];\n}\n</code></pre>\n\n<p>I have written about this question on my blog <a href=\"http://www.letsdive.in/2013/10/03/finding-biggest-number-in-big-array/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Don't forget that the wrap can be done with <code>Function.prototype.bind</code>, giving you an \"all-native\" <em>function</em>.</p>\n\n<pre><code>var aMax = Math.max.apply.bind(Math.max, Math);\naMax([1, 2, 3, 4, 5]); // 5\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Finding Max and Min Value Easy and Manual Way. This Code is much faster than Math.max.apply i have tried upto 1000k num in array...</p>\n\n<pre><code>function findmax(array)\n   {\nvar max = 0;\nvar a = array.length;\nfor (counter=0;counter&lt;a;counter++)\n{\n    if (array[counter] &gt; max)\n    {\n        max = array[counter];\n    }\n}\nreturn max;\n</code></pre>\n\n<p>}</p>\n\n<pre><code>   function findmin(array)\n   {\n        var min = array[0];\n            var a = array.length;\n      for (counter=0;counter&lt;a;counter++)\n      {\n         if (array[counter] &lt; min)\n         {\n           min = array[counter];\n         }\n      }\n   return min;\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>how about using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow\">Array.reduce</a> ? </p>\n\n<pre><code>[0,1,2,3,4].reduce(function(previousValue, currentValue){\n  return Math.max(previousValue,currentValue);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could also extend <code>Array</code> to have this function and make it part of every array.</p>\n\n<pre><code>Array.prototype.max = function(){return Math.max.apply( Math, this )};\nmyArray = [1,2,3];\n\nconsole.log( myArray.max() );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes of course exist: <code>Math.max.apply(null,[23,45,67,-45])</code>  and the result return <code>67</code>;</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a simple JavaScript Array object containing a few numbers.</p>\n\n<pre><code>[267, 306, 108]\n</code></pre>\n\n<p>Is there a function that would find the largest number in this array?</p>\n",
            "last_activity_date": 1422806032,
            "question_id": 1379553,
            "score": 78,
            "tags": [
                "javascript",
                "algorithm",
                "arrays",
                "max"
            ],
            "title": "How might I find the largest number contained in a JavaScript array?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Interesting question. The problem is that height() does not accept a callback, so you wouldn't be able to fire up a callback. Use either animate() or css() to set the height and then trigger the custom event in the callback. Here is an example using animate() , tested and works (<a href=\"http://jsbin.com/umiba/edit\" rel=\"nofollow\">demo</a>), as a proof of concept :</p>\n\n<pre><code>$('#test').bind('style', function() {\n    alert($(this).css('height'));\n});\n\n$('#test').animate({height: 100},function(){\n$(this).trigger('style');\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is no inbuilt support for the style change event in jQuery or in java script. But jQuery supports to create custom event and listen to it but every time there is a change, you should have a way to trigger it on yourself. So it will not be a complete solution.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As others have suggested, if you have control over whatever code is changing the style of the element you could fire a custom event when you change the element's height:</p>\n\n<pre><code>$('#blah').bind('height-changed',function(){...});\n...\n$('#blah').css({height:'100px'});\n$('#blah').trigger('height-changed');\n</code></pre>\n\n<p>Otherwise, although pretty resource-intensive, you could set a timer to periodically check for changes to the element's height...</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Since jQuery is open-source, I would guess that you could tweak the <code>css</code> function to call a function of your choice every time it is invoked (passing the jQuery object).  Of course, you'll want to scour the jQuery code to make sure there is nothing else it uses internally to set CSS properties.  Ideally, you'd want to write a separate plugin for jQuery so that it does not interfere with the jQuery library itself, but you'll have to decide whether or not that is feasible for your project.</p>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>The declaration of your event object has to be inside your new css function.  Otherwise the event can only be fired once.</p>\n\n<pre><code>(function() {\n    orig = $.fn.css;\n    $.fn.css = function() {\n        var ev = new $.Event('style');\n        orig.apply(this, arguments);\n        $(this).trigger(ev);\n    }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I think the best answer if from Mike in the case you can't launch your event because is not from your code. But I get some errors when I used it. So I write a new answer for show you the code that I use.</p>\n\n<pre><code>(function() {\n    orig = $.fn.css;\n    $.fn.css = function() {\n        var result = orig.apply(this, arguments);\n        $(this).trigger(\"stylechanged\");\n        return result;\n    }\n})();\n</code></pre>\n\n<p>I got error because var ev = new $.Event('style'); Something like style was not defined in HtmlDiv.. I removed it, and I launch now $(this).trigger(\"stylechanged\"). Another problem was that Mike didn't return the resulto of $(css, ..) then It can make problems in some cases. So I get the result and return it. Now works ^^ In every css change include from some libs that I can't modify and trigger an event.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just adding and formalizing @David 's solution from above:</p>\n\n<p>Note that jQuery functions are chainable and return 'this' so that multiple invocations can be called one after the other (e.g <code>$container.css(\"overflow\", \"hidden\").css(\"outline\", 0);</code>).</p>\n\n<p>So the improved code should be:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>(function() {\n    var ev = new $.Event('style'),\n        orig = $.fn.css;\n    $.fn.css = function() {\n        var ret = orig.apply(this, arguments);\n        $(this).trigger(ev);\n        return ret; // must include this\n    }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same problem, so I wrote this. It works rather well. Looks great if you mix it with some CSS transitions.</p>\n\n<pre><code>function toggle_visibility(id) {\n   var e = document.getElementById(\"mjwelcome\");\n   if(e.style.height == '')\n      e.style.height = '0px';\n   else\n      e.style.height = '';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Things have moved on a bit since the question was asked - it is now possible to use a <a href=\"https://developer.mozilla.org/en/docs/Web/API/MutationObserver\">MutationObserver</a> to detect changes in the 'style' attribute of an element, no jQuery required.</p>\n\n<pre><code>var observer = new MutationObserver(function(mutations) {\n    mutations.forEach(function(mutation) {\n        console.log('style changed!');\n    });    \n});\n\nvar target = document.getElementById('myId');\nobserver.observe(target, { attributes : true, attributeFilter : ['style'] });\n</code></pre>\n\n<p>Support is <a href=\"http://caniuse.com/mutationobserver\">good in modern browsers</a> but if you need to support IE you might have to wait a year or two.</p>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>Is it possible to create an event listener in jQuery that can be bound to any style changes? For example, if I want to \"do\" something when an element changes dimensions, or any other changes in the style attribute I could do:</p>\n\n<pre><code>$('div').bind('style', function() {\n    console.log($(this).css('height'));\n});\n\n$('div').height(100); // yields '100'\n</code></pre>\n\n<p>It would be really useful.</p>\n\n<p>Any ideas?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Sorry for answering this myself, but I wrote a neat solution that might fit someone else:</p>\n\n<pre><code>(function() {\n    var ev = new $.Event('style'),\n        orig = $.fn.css;\n    $.fn.css = function() {\n        $(this).trigger(ev);\n        return orig.apply(this, arguments);\n    }\n})();\n</code></pre>\n\n<p>This will temporary override the internal prototype.css method and the redefine it with a trigger at the end. So it works like this:</p>\n\n<pre><code>$('p').bind('style', function(e) {\n    console.log( $(this).attr('style') );\n});\n\n$('p').width(100);\n$('p').css('color','red');\n</code></pre>\n",
            "last_activity_date": 1422308047,
            "question_id": 2157963,
            "score": 58,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Is it possible to listen to a &quot;style change&quot; event?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Maybe something like this:</p>\n\n<pre><code>&lt;script&gt;\nif(!window.jQuery)\n{\n   var script = document.createElement('script');\n   script.type = \"text/javascript\";\n   script.src = \"path/to/jQuery\";\n   document.getElementsByTagName('head')[0].appendChild(script);\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 82
                },
                {
                    "body": "<p>Avoid using \"if (!jQuery)\" since IE will return the error: jQuery is 'undefined'</p>\n\n<p>Instead use: if (typeof jQuery == 'undefined')</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nif (typeof jQuery == 'undefined') {\n    var script = document.createElement('script');\n    script.type = \"text/javascript\";\n    script.src = \"http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\";\n    document.getElementsByTagName('head')[0].appendChild(script);\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>You'll also need to check if the JQuery has loaded after appending it to the header.  Otherwise you'll have to wait for the window.onload event, which is slower if the page has images.  Here's a sample script which checks if the JQuery file has loaded, since you won't have the convenience of being able to use $(document).ready(function...</p>\n\n<p><a href=\"http://neighborhood.org/core/sample/jquery/append-to-head.htm\">http://neighborhood.org/core/sample/jquery/append-to-head.htm</a></p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>Try this :</p>\n\n<pre><code>&lt;script&gt;\n  window.jQuery || document.write('&lt;script src=\"js/jquery.min.js\"&gt;&lt;\\/script&gt;')\n&lt;/script&gt;\n</code></pre>\n\n<p>This checks if jQuery is available or not, if not it will add one dynamically from path specified.</p>\n\n<p>Ref: <a href=\"http://stackoverflow.com/questions/7887735/simulate-an-include-once-for-jquery\">Simulate an &quot;include_once&quot; for jQuery</a></p>\n\n<p>OR</p>\n\n<p>include_once equivalent for js. Ref: <a href=\"https://raw.github.com/kvz/phpjs/master/functions/language/include_once.js\" rel=\"nofollow\">https://raw.github.com/kvz/phpjs/master/functions/language/include_once.js</a></p>\n\n<pre><code>function include_once (filename) {\n  // http://kevin.vanzonneveld.net\n  // +   original by: Legaev Andrey\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // +   improved by: Michael White (http://getsprink.com)\n  // +      input by: Brett Zamir (http://brett-zamir.me)\n  // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // +   bugfixed by: Brett Zamir (http://brett-zamir.me)\n  // -    depends on: include\n  // %        note 1: Uses global: php_js to keep track of included files (though private static variable in namespaced version)\n  // *     example 1: include_once('http://www.phpjs.org/js/phpjs/_supporters/pj_test_supportfile_2.js');\n  // *     returns 1: true\n  var cur_file = {};\n  cur_file[this.window.location.href] = 1;\n\n  // BEGIN STATIC\n  try { // We can't try to access on window, since it might not exist in some environments, and if we use \"this.window\"\n    //    we risk adding another copy if different window objects are associated with the namespaced object\n    php_js_shared; // Will be private static variable in namespaced version or global in non-namespaced\n    //   version since we wish to share this across all instances\n  } catch (e) {\n    php_js_shared = {};\n  }\n  // END STATIC\n  if (!php_js_shared.includes) {\n    php_js_shared.includes = cur_file;\n  }\n  if (!php_js_shared.includes[filename]) {\n    if (this.include(filename)) {\n      return true;\n    }\n  } else {\n    return true;\n  }\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Even though you may have a head appending it may not work in all browsers. This was the only method I found to work consistently.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nif (typeof jQuery == 'undefined') {\n  document.write('&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\"&gt;&lt;\\/script&gt;');        \n  } \n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>NOTICE!!</h1>\n\n<p>You can also trigger a function after <strong>LOAD</strong>:</p>\n\n<pre><code>Elmnt.src    =\"../jquery.js\";\nElmnt.onload =function() {\n     MyFunctionnn();\n};  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Method 1:</p>\n\n<pre><code>if (window.jQuery) {  \n    // jQuery is loaded  \n} else {\n    // jQuery is not loaded\n}\n</code></pre>\n\n<p>Method 2:</p>\n\n<pre><code>if (typeof jQuery == 'undefined') {  \n    // jQuery is not loaded\n} else {\n    // jQuery is loaded\n}\n</code></pre>\n\n<p>If jquery.js file is not loaded, we can force load it like so:</p>\n\n<pre><code>if (!window.jQuery) {\n  var jq = document.createElement('script'); jq.type = 'text/javascript';\n  // Path to jquery.js file, eg. Google hosted version\n  jq.src = '/path-to-your/jquery.min.js';\n  document.getElementsByTagName('head')[0].appendChild(jq);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Does anyone know how to check if jquery has been loaded (with javascript) then load it if it hasnt been loaded.</p>\n\n<p>something like</p>\n\n<pre><code>if(!jQuery) {\n    //load jquery file\n}\n</code></pre>\n",
            "last_activity_date": 1424103694,
            "question_id": 1828237,
            "score": 56,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "check if jquery has been loaded, then load it if false"
        }
    ]
}
