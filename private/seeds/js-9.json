{
    "items": [
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<blockquote>\n  <p><em><code>-&gt;</code> For a more general explanation of async behavior with different examples, please see</em> <a href=\"http://stackoverflow.com/q/23667086/218196\">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a>  </p>\n  \n  <p><em><code>-&gt;</code> If you already understand the problem, skip to the possible solutions below.</em></p>\n</blockquote>\n\n<h1>Explanation of the problem</h1>\n\n<p>The <strong>A</strong> in AJAX stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer: </p>\n\n<h2>Synchronous</h2>\n\n<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer you needed.</p>\n\n<p>The same is happening when you make a function call containing \"normal\" code:</p>\n\n<pre><code>function findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n// do something with item\ndoSomethingElse();\n</code></pre>\n\n<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>\n\n<h2>Asynchronous</h2>\n\n<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>\n\n<p>That's exactly what's happening when you do an AJAX request. </p>\n\n<pre><code>findItem(function(item) {\n    // do something with item\n});\ndoSomethingElse();\n</code></pre>\n\n<p>Instead of waiting for the response, the execution continues immediately and the statement after the AJAX call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>\n\n<hr>\n\n<h1>Solutions</h1>\n\n<p>There are basically two ways how to solve this:</p>\n\n<ol>\n<li>Make the AJAX call synchronous (lets call it <em>SJAX</em>).</li>\n<li>Restructure your code to work properly with callbacks.</li>\n</ol>\n\n<h2>1. Synchronous AJAX calls -- DON'T DO IT</h2>\n\n<p>It is generally <strong>a bad idea</strong> to make AJAX calls synchronous. <strong>DON'T DO IT.</strong> I'm serious. I only mention it here for the sake of completeness. Why is it bad do you ask?</p>\n\n<p>JavaScript runs in the UI thread of the browser and any long running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not. \nAll of this is really bad user experience. The user won't be able to tell whether everything is working fine or not.  Furthermore the effect will be worse for users with a slow connection.</p>\n\n<h3>jQuery</h3>\n\n<p>If you use <a href=\"http://api.jquery.com/jQuery.ajax/\">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.\nYou can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\">jqXHR object</a>:</p>\n\n<pre><code>function foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n</code></pre>\n\n<p>If you use any other jQuery AJAX method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>\n\n<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=\"http://stackoverflow.com/questions/2067472/please-explain-jsonp\">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>\n\n<h3>Without jQuery</h3>\n\n<p>If you directly use a <a href=\"http://www.w3.org/TR/XMLHttpRequest/\"><code>XMLHTTPRequest</code></a> object, pass <code>false</code> as third argument to <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-open%28%29-method\"><code>.open</code></a>.</p>\n\n<h2>2. Restructure code</h2>\n\n<h3>Let functions accept callbacks</h3>\n\n<p>The better approach is to organize your code properly around callbacks. In the example in the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>\n\n<pre><code>var result = foo();\n// code that depends on 'result'\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>foo(function(result) {\n    // code that depends on 'result'\n});\n</code></pre>\n\n<p>Here we pass a function as argument to <code>foo</code>. You can pass any function reference, for example:</p>\n\n<pre><code>function myCallback(result) {\n    // code that depends on 'result'\n}\n\nfoo(myCallback);\n</code></pre>\n\n<p><code>foo</code> itself is defined as follows:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n</code></pre>\n\n<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we simply pass it on to <code>success</code>. I.e. once the AJAX request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>\n\n<p>You can also process the response before passing it to the callback:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // e.g. filter the response\n            callback(filtered_response);\n        }\n    });\n}\n</code></pre>\n\n<p>It's easier to write code using callbacks than it seems. After all, JavaScript in the browser is heavily event driven (DOM events). Receiving the AJAX response is nothing else but an event.<br>\nDifficulties could arise when you have to work with third party code, but most problems can be solved by just thinking through the application flow.</p>\n\n<h3>Use deferred objects / promises</h3>\n\n<p>While directly passing callbacks works just fine, it can become inflexible in certain situations.  <em>Deferred objects / promises</em> are a great way to deal with many callbacks and decouple your code.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/4866721/what-are-deferred-objects\">Deferred objects</a> are not <a href=\"http://en.wikipedia.org/wiki/Futures_and_promises\">unique to jQuery</a> (see also the <a href=\"http://wiki.commonjs.org/wiki/Promises/A\">Promise/A proposal</a>) and there many independent implementations but I will only focus on jQuery in this answer.</p>\n\n<p>Luckily for us, every AJAX method of jQuery already returns a promise which you can just return from your function and the calling code decides how to attach the callbacks:</p>\n\n<pre><code>function foo() {\n    return $.ajax(...);\n}\n\nfoo().done(function(result) {\n    // code depending on result\n}).fail(function() {\n    // an error occurred\n});\n</code></pre>\n\n<p>Describing all the advantages that deferred objects offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>\n\n<h3>Improving Bad Code</h3>\n\n<p>Deferreds can make it easy to transform broken asynchronous code into working code. For example suppose you had the following:</p>\n\n<pre><code>function checkPassword() {\n    return $.ajax({\n        url: '/password',\n        data: {\n            username: $('#username').val()\n            password: $('#password').val()\n        },\n        type: 'POST',\n        dataType: 'json'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they're logged in\n}\n</code></pre>\n\n<p>This code misunderstands the above asynchrony issues. Specifically, <code>$.ajax()</code> doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, immediately returns a jQuery Ajax Deferred object, which means your if statement is going to always get this Deferred object, treat that as <code>true</code>, and proceed as though the user is logged in. Not good.</p>\n\n<p>But the fix is easy:</p>\n\n<pre><code>checkPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they're logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n</code></pre>\n\n<p>So now we're still calling the '/password' page on the server, but our code now properly handles the wait time for the server to respond. The <code>$.ajax()</code> call still returns immediately with a jQuery Ajax Deferred object, but we use it to attach event listeners to <code>.done()</code> and <code>.fail()</code>. In the <code>.done()</code> call, where the server responded with a normal response (HTTP 200), we check the object returned by the server. In this example the server is just returning true if the login was successful, false if not, so <code>if (r)</code> is checking for true/false.</p>\n\n<p>In the <code>.fail()</code> handler we're dealing with something going wrong - for example if the user lost their internet connection while they were typing in their username and password, or if your server went down.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Felix Kling",
                        "user_id": 218196
                    },
                    "score": 1245
                },
                {
                    "body": "<h1>If you're <em>not</em> using jQuery in your code, this answer is for you</h1>\n\n<p>Your code should be something along the lines of this:</p>\n\n<pre><code>function foo() {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.open('GET', \"/echo/json\");\n    httpRequest.send();\n    return httpRequest.responseText;\n}\n\nvar result = foo(); // always ends up being 'undefined'\n</code></pre>\n\n<p>Felix Kling did a fine job writing an answer for people using jQuery for AJAX, I've decided to provide an alternative for people who aren't.</p>\n\n<hr>\n\n<h1>What you're facing</h1>\n\n<p>This is a short summary of \"Explanation of the problem\" from the other answer, if you're not sure after reading this, read that.</p>\n\n<p>The <strong>A</strong> in AJAX stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send%28%29\"><code>.send</code></a> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>This means when you're returning, the listener you've defined did not execute yet, which means the value you're returning has not been defined. </p>\n\n<p>Here is a simple analogy</p>\n\n<pre><code>function getFive(){ \n    var a;\n    setTimeout(function(){\n         a=5;\n    },10);\n    return a;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7RK3k/\">(Fiddle)</a></p>\n\n<p>The value of <code>a</code> returned is <code>undefined</code> since the <code>a=5</code> part has not executed yet. AJAX acts like this, you're returning the value before the server got the chance to tell your browser what that value is.</p>\n\n<p>One possible solution to this problem is to code <em>re-actively</em> , telling your program what to do when the calculation completed.</p>\n\n<pre><code>function onComplete(a){ // When the code completes, do this\n    alert(a);\n}\n\nfunction getFive(whenDone){ \n    var a;\n    setTimeout(function(){\n         a=5;\n         whenDone(a);\n    },10);\n}\n</code></pre>\n\n<p>This is called <a href=\"http://en.wikipedia.org/wiki/Continuation-passing_style\">CPS</a>. Basically, we're passing <code>getFive</code> an action to perform when it completes, we're telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).</p>\n\n<p>Usage would be:</p>\n\n<pre><code>getFive(onComplete);\n</code></pre>\n\n<p>Which should alert \"5\" to the screen. <a href=\"http://jsfiddle.net/PAjZR/\">(Fiddle)</a>.</p>\n\n<h1>Possible solutions</h1>\n\n<p>There are basically two ways how to solve this:</p>\n\n<ol>\n<li>Make the AJAX call synchronous (lets call it SJAX).</li>\n<li>Restructure your code to work properly with callbacks.</li>\n</ol>\n\n<h2>1. Synchronous AJAX - Don't do it!!</h2>\n\n<p>As for synchronous AJAX, <strong>don't do it!</strong> Felix's answer raises some compelling arguments about why it's a bad idea. To sum it up, it'll freeze the user's browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why:</p>\n\n<blockquote>\n  <p>XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.</p>\n  \n  <p>In short, synchronous requests block the execution of code... ...this can cause serious issues...</p>\n</blockquote>\n\n<p>If you <em>have</em> to do it, you can pass a flag: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests#Synchronous_request\">Here is how:</a></p>\n\n<pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', 'yourURL', false);  // `false` makes the request synchronous\nrequest.send(null);\n\nif (request.status === 200) {// That's HTTP for 'ok'\n  console.log(request.responseText);\n}\n</code></pre>\n\n<h2>2. Restructure code</h2>\n\n<p>Let your function accept a callback. In the example code <code>foo</code> can be made to accept a callback. We'll be telling our code how to <em>react</em> when <code>foo</code> completes. </p>\n\n<p>So:</p>\n\n<pre><code>var result = foo();\n// code that depends on `result` goes here\n</code></pre>\n\n<p>Becomes:</p>\n\n<pre><code>foo(function(result) {\n    // code that depends on `result`\n});\n</code></pre>\n\n<p>Here we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like:</p>\n\n<pre><code>function myHandler(result) {\n    // code that depends on `result`\n}\nfoo(myHandler);\n</code></pre>\n\n<p>For more details on how this sort of callback design is done, check Felix's answer. </p>\n\n<p>Now, let's define foo itself to act accordingly</p>\n\n<pre><code>function foo(callback) {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.onload = function(){ // when the request is loaded\n       callback(httpRequest.responseText);// we're calling our method\n    };\n    httpRequest.open('GET', \"/echo/json\");\n    httpRequest.send();\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/DAcWT/\">(fiddle)</a></p>\n\n<p>We have now made our foo function accept an action to run when the AJAX completes successfully, we can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively solving our issue.</p>\n\n<p>If you're still having a hard time understanding this <a href=\"https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started\">read the AJAX getting started guide</a> at MDN.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Benjamin Gruenbaum",
                        "user_id": 1348195
                    },
                    "score": 243
                },
                {
                    "body": "<p><strong>XHR2</strong> (first of all read the answers from Benjamin Gruenbaum &amp; Felix Kling)</p>\n\n<p>If you don't use jQuery, and want a nice short XHR2 which works on the modern browsers and also on the mobile browsers I suggest to use it this way.</p>\n\n<pre><code>function ajax(a,b,c){ // Url, Callback, just a placeholder\n c=new XMLHttpRequest;\n c.open('GET',a);\n c.onload=b;\n c.send()\n}\n</code></pre>\n\n<p>As you can see:</p>\n\n<ol>\n<li>It's shorter than all other functions Listed.</li>\n<li>The callback is set directly (so no extra unnecessary closures).</li>\n<li>It uses the new onload (so you don't have to check for readystate &amp;&amp; status)</li>\n<li>there are some other situations which i don't remember that make the xhr1 annoying. </li>\n</ol>\n\n<p>There are 2 ways to get the response of this ajax call(3 using the xhr var name):</p>\n\n<p>The simplest</p>\n\n<pre><code>this.response\n</code></pre>\n\n<p>or if for some reason you <code>bind()</code> the callback to a class</p>\n\n<pre><code>e.target.response\n</code></pre>\n\n<p>Example</p>\n\n<pre><code>function callback(e){\n console.log(this.response);\n}\najax('URL',callback);\n</code></pre>\n\n<p>or (the above one is better anonymous functions are always a problem)</p>\n\n<pre><code>ajax('URL',function(e){console.log(this.response)});\n</code></pre>\n\n<p>Nothing easier.</p>\n\n<p>Now some ppl will probably say that it's better to use onreadystatechange or the even the XMLHttpRequest variable name. That's wrong.</p>\n\n<p>Check this out:\n<a href=\"http://caniuse.com/xhr2\">http://caniuse.com/xhr2</a></p>\n\n<p>support on all *modern browsers. And I can confirm as I'm using this approach since xhr2 exists. I never had any type of problem on all browsers I use.</p>\n\n<p>onreadystatechange is only useful if you want to get the headers on state 2.</p>\n\n<p>Using the <code>XMLHttpRequest</code> variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures else you lost it.</p>\n\n<hr>\n\n<p>Now if you want something more complex using post and FormData you can easily extend this function:</p>\n\n<pre><code>function x(a,b,e,d,c){ // Url,callback,method,formdata or {key:val},placeholder\n c=new XMLHttpRequest;\n c.open(e||'get',a);\n c.onload=b;\n c.send(d||null)\n}\n</code></pre>\n\n<p>Again ... it's a very short function but it does get &amp; post</p>\n\n<p>examples of usage:</p>\n\n<pre><code>x(url,callback);//by default it's get so no need to set\nx(url,callback,'post',{'key':'val'}); //no need to set post data\n</code></pre>\n\n<p>or pass a full form element (<code>document.getElementsByTagName('form')[0]</code>)</p>\n\n<pre><code>var fd=new FormData(form);\nx(url,callback,'post',fd);\n</code></pre>\n\n<p>or set some custom values</p>\n\n<pre><code>var fd=new FormData();\nfd.append('key','val')\nx(url,callback,'post',fd);\n</code></pre>\n\n<p>As you can see I don't implemented sync... it's a bad thing.</p>\n\n<p>Said that ... why don't do it the easy way?</p>\n\n<hr>\n\n<p>As mentioned in the comment the use of error &amp;&amp; synchronous does completely break the point of the answer.Which is a nice short way to use ajax in the proper way.</p>\n\n<p><em>Errror handler</em></p>\n\n<pre><code>function x(a,b,e,d,c){ // URL,callback,method,formdata or {key:val},placeholder\n c=new XMLHttpRequest;\n c.open(e||'get',a);\n c.onload=b;\n c.onerror=error;\n c.send(d||null)\n}\nfunction error(e){\n console.log('--Error--',this.type);\n console.log('this: ',this);\n console.log('Event: ',e)     \n}\nfunction displayAjax(e){\n console.log(e,this);\n}\nx('WRONGURL',displayAjax);\n</code></pre>\n\n<p>In the above script you have an error handler which is statically defined so it does not compromise the function. The error handler can be used for other functions too.</p>\n\n<p>But to really get out an error the <strong>only</strong> way is to write a wrong URL in which case every browsers throws an error.</p>\n\n<p>error handlers are maybe useful if you set custom headers, set the responseType to blob arraybuffer or whatever.... </p>\n\n<p>Even if you pass 'POSTAPAPAP' as methot it won't throw an error.</p>\n\n<p>Even if you pass 'fdggdgilfdghfldj' as formdata it won't throw an error.</p>\n\n<p>In the first case the error is inside the <code>displayAjax()</code> under <code>this.statusText</code>\nas <code>Method not Allowed</code>.</p>\n\n<p>In the second case it simply works. You have to check at the server side if you passed the right post data.</p>\n\n<p>crossdomain not allowed throws error automatically.</p>\n\n<p>In the error response there are no error codes.</p>\n\n<p>There is only the <code>this.type</code> which is set to error.</p>\n\n<p>Why add errorhandler if you totally have no control over errors?\nMost of the errors are returned inside this in the callback function <code>displayAjax()</code></p>\n\n<p>So: NO need for error checks if your able to copy and paste the url properly. ;)</p>\n\n<p><em>ps.: As the first test i wrote x('x',displayAjax).. and it totally got a response...??? so I checked the folder where the HTML is located .. and there was a file called 'x.xml'..\nso even if you forget the extension of your file xhr2 WILL FIND IT</em> I lol'd</p>\n\n<hr>\n\n<p><em>Read a file syncronous</em></p>\n\n<p><strong>Don't do that.</strong></p>\n\n<p>if you wan't to block the browser for a while load a nice big txt file syncronous</p>\n\n<pre><code>function omg(a,c){ // Url\n c=new XMLHttpRequest;\n c.open('GET',a,true);\n c.send();\n return c; //or c.response \n}\n</code></pre>\n\n<p>now you can do </p>\n\n<pre><code> var res=omg('thisIsGonnaBlockThePage.txt');\n</code></pre>\n\n<p>There is no other way to do this in a non asynchronous way.(yeah with setTimeout loop... but srsly?)</p>\n\n<p>Another point is .. if you work with API's or just you own list's files or whatever you always use different functions for each request.. </p>\n\n<p>Only if you have a page where you load always the same XML/JSON or whatever you need only one function.In that case modify a little the ajax function and replace b with your special function.  </p>\n\n<hr>\n\n<p>the functions above are for basic use.</p>\n\n<p>if you want to EXTEND the function ...</p>\n\n<p>yes you can</p>\n\n<p>I'm using a lot of API's and one of the first functions i integrate in every html page is the first ajax function in this answer ..with GET only...</p>\n\n<p>but you can do a lot of stuff with xhr2:</p>\n\n<p>I made a download manager (using ranges on both sides with resume,filereader,filesystem),various image resizers converters using canvas,populate websql databases with base64images and much more... but in thisc cases you should create a function only for that purpose... sometimes you need blob, arraybuffers, you can set headers , override mimetype and there is a lot more...</p>\n\n<p>but the question here is how to return an Ajax response ... (i added n easy way)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cocco",
                        "user_id": 2450730
                    },
                    "score": 38
                },
                {
                    "body": "<p>Simplest solution is create a Javascript function and call it for ajax success callback.</p>\n\n<pre><code>  function callServerAsync(){\n   $.ajax({\n        url: '...',\n        success: function(response) {\n\n            successCallback(response);\n\n        }\n    });\n  }\n\n  function successCallback(responseObj){\n     //do something like read the response and show data \n     alert(JSON.stringify(responseObj)); // Only applicable to JSON response\n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Hemant Bavle",
                        "user_id": 1560518
                    },
                    "score": 14
                },
                {
                    "body": "<p>You are using Ajax incorrectly, the idea is not to have it return anything, but instead hand off the data to something called a callback function, which handles the data.</p>\n\n<p>IE:</p>\n\n<pre><code>function handleData( responseData ) {\n    // do what you want with the data\n    console.log(responseData);\n}\n\n$.ajax({\n    url: \"hi.php\",\n    ...\n    success: function ( data, status, XHR ) {\n        handleData(data);\n    }\n});\n</code></pre>\n\n<p>returning anything in the submit handler will not do anything, you must instead either hand off the data, or do what you want with it directly inside the success function.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nic",
                        "user_id": 2802187
                    },
                    "score": 18
                },
                {
                    "body": "<p>For people who are using angular js, can handle this situation using <code>Promises</code>. </p>\n\n<p><a href=\"http://liamkaufman.com/blog/2013/09/09/using-angularjs-promises/\" rel=\"nofollow\">Here</a> it says,</p>\n\n<blockquote>\n  <p>Promises can be used to unnest asynchronous functions and allows one to chain multiple functions together.</p>\n</blockquote>\n\n<p>You can find a nice explanation <a href=\"http://andyshora.com/promises-angularjs-explained-as-cartoon.html\" rel=\"nofollow\">here</a> also.</p>\n\n<p>Example found in <a href=\"https://docs.angularjs.org/api/ng/service/$q\" rel=\"nofollow\">docs</a> mentioned below.</p>\n\n<pre><code>  promiseB = promiseA.then(\n    function onSuccess(result) {\n      return result + 1;\n    }\n    ,function onError(err) {\n      //handle error\n    }\n  );\n\n // promiseB will be resolved immediately after promiseA\n // is resolved and its value will be the result of promiseA incremented by 1.\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Maleenc",
                        "user_id": 814025
                    },
                    "score": 4
                }
            ],
            "body": "<p>I have a function <code>foo</code> which makes an Ajax request. How can I return the response from <code>foo</code>? </p>\n\n<p>I tried to return the value from the <code>success</code> callback as well as assigning the response to a local variable inside the function and return that one, but none of those ways actually return the response.</p>\n\n<pre><code>function foo() {\n    var result;\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result = response;\n            // return response; // &lt;- tried that one as well\n        }\n    });\n\n    return result;\n}\n\nvar result = foo(); // always ends up being `undefined`.\n</code></pre>\n",
            "last_activity_date": 1424754517,
            "owner": {
                "display_name": "Felix Kling",
                "user_id": 218196
            },
            "question_id": 14220321,
            "score": 825,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "How to return the response from an asynchronous call?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>Try:</p>\n\n<pre><code>var funcs = [];\n\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = (function(index) {\n        return function() {\n            console.log(\"My value: \" + index);\n        };\n    }(i));\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();\n}\n</code></pre>\n\n<p><strong>Edit</strong> (2014):</p>\n\n<p>Personally I think @Aust's <a href=\"http://stackoverflow.com/a/19323214/918959\">more recent answer about using <code>.bind</code></a> is the best way to do this kind of thing now. There's also lo-dash/underscore's <code>_.partial</code> when you don't need or want to mess with <code>bind</code>'s <code>thisArg</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bjorn Tipling",
                        "user_id": 66475
                    },
                    "score": 144
                },
                {
                    "body": "<p>The value <code>i</code> inside the body of the closure is being bound to the same instance for each closure (that is, to the variable <code>i</code> which is the loop control variable for the for loop). This value is changing as you go through the loop. You need to figure out a way to make sure that it is bound to a different variable that is unique for each closure. The method shown by apphacker is one way, although possibly a little arcane.</p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) { \n    var index = i;                     // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + index); // each should log its value.\n    };\n}\n</code></pre>\n\n<p>This method doesn't work - the reason being because <code>var</code> in javascript uses function scope as opposed to other algol derivatives which use block scope. You can use <code>let</code> as a slightly less portable alternative, but it looks like your best bet is to use a factory method to create the closures.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "1800 INFORMATION",
                        "user_id": 3146
                    },
                    "score": -1
                },
                {
                    "body": "<p>Well, the problem is that the variable i, within each of your anonymous functions, is bound to the same variable outside of the function.</p>\n\n<p>What you want to do is bind the variable within each function to a separate, unchanging value outside of the function:</p>\n\n<pre><code>var funcs = [];\n\nfunction createfunc(i) {\n    return function() { console.log(\"My value: \" + i); };\n}\n\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = createfunc(i);\n}\n\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>Since there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of \"i\" remains as you intended.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "harto",
                        "user_id": 86463
                    },
                    "score": 537
                },
                {
                    "body": "<p>so the reason your original example did not work is that all the closures you created in the loop referenced the same frame. in effect having 3 methods on one object with only a single 'i' variable. they all printed out the same value</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jottos",
                        "user_id": 14555
                    },
                    "score": 0
                },
                {
                    "body": "<p>What you need to understand is the scope of the variables in javascript is based on the function. This is an important difference than say c# where you have block scope, and just copying the variable to one inside the for will work.</p>\n\n<p>Wrapping it in a function that evaluates returning the function like apphacker's answer will do the trick, as the variable now has the function scope.</p>\n\n<p>There is also a let keyword instead of var, that would allow using the block scope rule. In that case defining a variable inside the for would do the trick. That said, the let keyword isn't a practical solution because of compatibility.</p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) {\n    let index = i;          //add this\n    funcs[i] = function() {            \n        console.log(\"My value: \" + index); //change to the copy\n    };\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "eglasius",
                        "user_id": 66372
                    },
                    "score": 20
                },
                {
                    "body": "<p>Another way of saying it is that the <em>i</em> in your function is bound at the time of executing the function, not the time of creating the function.</p>\n\n<p>When you create the closure, <em>i</em> is a reference to the variable defined in the outside scope, not a copy of it as it was when you created the closure. It will be evaluated at the time of execution.</p>\n\n<p>Most of the other answers provide ways to work around by creating another variable that won't change value on you.</p>\n\n<p>Just thought I'd add an explanation for clarity. For a solution, personally I'd go with Harto's since it is the most self explanatory way of doing it from the answers here. Any of the code posted will work, but I'd opt for a closure factory over having to write a pile of comments to explain why I'm declaring a new variable(Freddy and 1800's) or have weird embedded closure syntax(apphacker).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Darren Clark",
                        "user_id": 65307
                    },
                    "score": 24
                },
                {
                    "body": "<p>Here's another variation on the technique, similar to Bjorn's (apphacker), which lets you assign the variable value inside the function rather than passing it as a parameter, which might be clearer sometimes:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n    funcs[i] = (function() {\n        var index = i;\n        return function() {\n            console.log(\"My value: \" + index);\n        }\n    })();\n}\n</code></pre>\n\n<p>Note that whatever technique you use, the <code>index</code> variable becomes a sort of static variable, bound to the returned copy of the inner function. I.e., changes to its value are preserved between calls. It can be very handy.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Boann",
                        "user_id": 964243
                    },
                    "score": 13
                },
                {
                    "body": "<p>You can make it by recursive function, like that</p>\n\n<pre><code>function hellowfunction(i){   \n\n  var j=0;  //make our iterator\n\n  (function onetick(){  \n    if(j&lt;i){           //checking state\n      setTimeout(function(){ \n          console.log(j++);  //increment the value\n          onetick();         //call function again\n      },1000)          //Waiting one second for above function\n    }\n  })(); //Run function first time after creation\n};\n\n\nhellowfunction(4); // Turn it for 0..(sec)..1..2..3\n</code></pre>\n\n<p>improvement of this method is that you do not create a bunch of function with setTimeout at  the beginning</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ivan Malyshev",
                        "user_id": 2154075
                    },
                    "score": -2
                },
                {
                    "body": "<p>This describes the common mistake with using closures in JavaScript.</p>\n\n<h2>A function defines a new environment</h2>\n\n<p>Consider:</p>\n\n<pre><code>function makeCounter()\n{\n  var obj = {counter: 0};\n  return {\n    inc: function(){obj.counter ++;},\n    get: function(){return obj.counter;}\n  };\n}\n\ncounter1 = makeCounter();\ncounter2 = makeCounter();\n\ncounter1.inc();\n\nalert(counter1.get()); // returns 1\nalert(counter2.get()); // returns 0\n</code></pre>\n\n<p>For each time <code>makeCounter</code> is invoked, <code>{counter: 0}</code> results in a new object being created. Also, a new copy of <code>obj</code> \nis created as well to reference the new object. Thus, <code>counter1</code> and <code>counter2</code> are independent of each other.</p>\n\n<h2>Closures in loops</h2>\n\n<p>Using a closure in a loop is tricky.</p>\n\n<p>Consider: </p>\n\n<pre><code>var counters = [];\n\nfunction makeCounters(num)\n{\n  for (var i = 0; i &lt; num; i++)\n  {\n    var obj = {counter: 0};\n    counters[i] = {\n      inc: function(){obj.counter++;},\n      get: function(){return obj.counter;}\n    }; \n  }\n}\n\nmakeCounters(2);\n\ncounters[0].inc();\n\nalert(counters[0].get()); // returns 1\nalert(counters[1].get()); // returns 1\n</code></pre>\n\n<p>Notice that <code>counters[0]</code> and <code>counters[1]</code> are <em>not</em> independent. In fact, they operate on the same <code>obj</code>!</p>\n\n<p>This is because there is only one copy of <code>obj</code> shared across all iterations of the loop, perhaps for performance reasons.\nEven though <code>{counter: 0}</code> creates a new object in each iteration, the same copy of <code>obj</code> will just get updated with a\nreference to the newest object.</p>\n\n<p>Solution is to use another helper function:</p>\n\n<pre><code>function makeHelper(obj)\n{\n  return {\n    inc: function(){obj.counter++;},\n    get: function(){return obj.counter;}\n  }; \n}\n\nfunction makeCounters(num)\n{\n  for (var i = 0; i &lt; num; i++)\n  {\n    var obj = {counter: 0};\n    counters[i] = makeHelper(obj);\n  }\n}\n</code></pre>\n\n<p>This works because local variables in the function scope directly, as well as function argument variables, are allocated \nnew copies upon entry.</p>\n\n<p>For a detailed discussion, please see <a href=\"https://gist.github.com/lucastan/5420969\">JavaScript closure pitfalls and usage</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lucas",
                        "user_id": 1724763
                    },
                    "score": 16
                },
                {
                    "body": "<p>With ES6 around the corner, note that the correct answer to this question will be changing.  ES6 provides the <code>let</code> keyword for this exact circumstance.  Instead of messing around with closures, we can just use <code>let</code> to set a loop scope variable like this:</p>\n\n<pre><code>var funcs = {};\nfor (let i = 0; i &lt; 3; i++) {          \n    funcs[i] = function() {            \n      console.log(\"My value: \" + i); \n    };\n}\n</code></pre>\n\n<p><code>val</code> will then point to an object that is specific to that particular turn of the loop, and will return the correct value without the additional closure notation.  This obviously significantly simplifies this problem.</p>\n\n<p>Browser support is currently sketchy, but <code>let</code> is currently supported in the latest version of firefox (21.0) and Dev builds of chrome.  You can see a working example here if you have a compatible browser: <a href=\"http://jsfiddle.net/ben336/rbU4t/2/\" rel=\"nofollow\">http://jsfiddle.net/ben336/rbU4t/2/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ben McCormick",
                        "user_id": 1424361
                    },
                    "score": 16
                },
                {
                    "body": "<p>The most simple solution would be</p>\n\n<p>instead of using this</p>\n\n<pre><code>var funcs = [];\nfor(var i =0; i&lt;3; i++){\n    funcs[i] = function(){\n        alert(i);\n    }\n}\n\nfor(var j =0; j&lt;3; j++){\n    funcs[j]();\n}\n</code></pre>\n\n<p>which alerts 2, 3 times. Use this,</p>\n\n<pre><code>var funcs = [];\nfor(var new_i =0; new_i&lt;3; new_i++){\n    (function(i){\n        funcs[i] = function(){\n            alert(i);\n        }\n    })(new_i);\n}\n\nfor(var j =0; j&lt;3; j++){\n    funcs[j]();\n}\n</code></pre>\n\n<p>The idea behind this is, encapsulating the entire body of the for loop with a self calling anonymous function and passing \"new_i\" as a parameter and capturing it as \"i\". Since the anonymous function is executed immediately, the \"i\" value is different for each function defined inside anonymous function. This solution seems to fit any such problem, since it will require minimum changes to original code suffering for this issue. In fact this is by design, it should not be an issue at all!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kemal Da\u011f",
                        "user_id": 1010916
                    },
                    "score": 9
                },
                {
                    "body": "<p>well, here you are only defining the three functions inside the for loop.They will be executed in the next for loop and at that time value of i is same(3) for each loop. Thats why ou are getting 3 as your output.</p>\n\n<p>Your output has nothing to do with closure here you can simply write it as,</p>\n\n<pre><code>var funcs = {};\n\nfuncs = function getValue(x) {        \n    document.write(\"My value: \" + x); \n};\n\n\nfor (var j = 0; j &lt; 3; j++) {\n  funcs(j);                      \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "schnill",
                        "user_id": 2605480
                    },
                    "score": 0
                },
                {
                    "body": "<h2>try this shorter one</h2>\n\n<ul>\n<li><p>no array</p></li>\n<li><p>no extra for loop</p></li>\n</ul>\n\n<p><br/></p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n    createfunc(i)();\n}\n\nfunction createfunc(i) {\n    return function(){console.log(\"My value: \" + i);};\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7P6EN/\">http://jsfiddle.net/7P6EN/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "yilmazburk",
                        "user_id": 1923723
                    },
                    "score": 7
                },
                {
                    "body": "<pre><code>var funcs = [];\n\nfor (var i = 0; i &lt; 3; i++) {          \n    funcs[i] = (function(index) {   \n        return function() {          \n            console.log(\"My value: \" + index);\n        } \n    })(i);\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "HYDER ALI",
                        "user_id": 2050886
                    },
                    "score": 0
                },
                {
                    "body": "<p>Another way that hasn't been mentioned yet is the use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind</code></a></p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = function(x) {\n        console.log('My value: ' + x);\n    }.bind(this, i);\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/PjweJ/2/\"><strong>jsFiddle</strong></a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Aust",
                        "user_id": 1408717
                    },
                    "score": 56
                },
                {
                    "body": "<p>Using an <a href=\"http://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">Immediately-Invoked Function Expression</a>, <a href=\"http://learn.jquery.com/javascript-101/functions/#immediately-invoked-function-expression-iife\">IIFE jQuery Docs</a>, the simplest and most readable way to enclose an index variable:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n\n    (function(index) {\n        console.log('iterator: ' + index);\n        //now you can also loop an ajax call here without problems: $.ajax({});\n    })(i);\n\n}\n</code></pre>\n\n<p>This sends the iterator <code>i</code> into the anonymous function of which we define as <code>index</code>.  This creates a closure, where the variable <code>i</code> gets saved for later use in any asynchronous functionality within the IIFE.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "neurosnap",
                        "user_id": 1713216
                    },
                    "score": 66
                },
                {
                    "body": "<p>The main issue with the code shown by the OP is that <code>i</code> is never read until the second loop. To demonstrate, imagine seeing an error inside of the code</p>\n\n<pre><code>funcs[i] = function() {            // and store them in funcs\n    throw new Error(\"test\");\n    console.log(\"My value: \" + i); // each should log its value.\n};\n</code></pre>\n\n<p>The error actually does not occur until <code>funcs[someIndex]</code> is executed <code>()</code>. Using this same logic, it should be apparent that the value of <code>i</code> is also not collected until this point either. Once the original loop finishes, <code>i++</code> brings <code>i</code> to the value of <code>3</code> which results in the condition <code>i &lt; 3</code> failing and the loop ending. At this point, <code>i</code> is <code>3</code> and so when <code>funcs[someIndex]()</code> is used, and <code>i</code> is evaluated, it is 3 - every time.</p>\n\n<p>To get past this, you must evaluate <code>i</code> as it is encountered. Note that this has already happened in the form of <code>funcs[i]</code> (where there are 3 unique indexes). There are several ways to capture this value. One is to pass it in as a parameter to a function which is shown in several ways already here. </p>\n\n<p>Another option is to construct a function object which will be able to close over the variable. That can be accomplished thusly</p>\n\n<p><em><strong><a href=\"http://jsfiddle.net/QcUjH/\"><code>jsFiddle Demo</code></a></em></strong></p>\n\n<pre><code>funcs[i] = new function() {   \n    var closedVariable = i;\n    return function(){\n        console.log(\"My value: \" + closedVariable); \n    };\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Travis J",
                        "user_id": 1026459
                    },
                    "score": 5
                },
                {
                    "body": "<p>Here's a simple solution that uses <code>forEach</code> (works back to IE9):</p>\n\n<pre><code>var funcs = {};\n[0,1,2].forEach(function(i) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n})\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>Prints:</p>\n\n<blockquote>\n<pre><code>My value: 0\nMy value: 1\nMy value: 2\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Daryl",
                        "user_id": 814454
                    },
                    "score": 2
                },
                {
                    "body": "<p>After reading through various solutions provided, I'd like to add that the reason those solutions work is to rely on the concept of <strong>scope chain</strong>. In short, each function definition forms a scope mainly consisting of all the local variables declared by <code>var</code> and its <code>arguments</code>. When a function gets executed, it evaluates variables by searching the <strong>scope chain</strong>. If a variable can be found in a certain point of the chain it will stop searching and use it, otherwise it continues until the global scope which belongs to <code>window</code>.</p>\n\n<p>In your initial code:</p>\n\n<pre><code>funcs = {};\nfor (var i = 0; i &lt; 3; i++) {          // assume 'for' is not contained in any function\n  funcs[i] = function() {              // function inner's scope contains nothing\n    console.log(\"My value: \" + i);    \n  };\n}\nconsole.log(window.i)                  // test value 'i', print 3\n</code></pre>\n\n<p>When <code>funcs</code> gets executed, the scope chain will be <code>function inner -&gt; global</code>. Since the variable <code>i</code> cannot be found in <code>function inner</code> (neither declared using <code>var</code> nor passed as arguments), it continues to search. So the value of <code>i</code> is eventually evaluated as the one that belongs to the global which is <code>window.i</code>.</p>\n\n<p>By wrapping it in an outer function either explicitly define a helper function like <a href=\"http://stackoverflow.com/a/750506\">harto</a> did or use an anonymous function like <a href=\"http://stackoverflow.com/a/750495\">Bjorn</a> did:</p>\n\n<pre><code>funcs = {};\nfunction createfunc(i) {              // function outer's scope contains 'i'\n  return function() {                 // function inner, closure created\n   console.log(\"My value: \" + i);\n  };\n}\nfor (var i = 0; i &lt; 3; i++) {\n  funcs[i] = createfunc(i);\n}\n</code></pre>\n\n<p>when <code>funcs</code> gets executed, now the scope chain will be <code>function inner -&gt; function outer</code>. This time <code>i</code> can be found in the outer function which is the value of argument (this value is correctly bound in the <code>for</code> loop). It won't use the value of <code>window.i</code></p>\n\n<p>You can read this: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures</a>.\nIt includes the common mistake in creating closure in the loop as what we have here, as well as why we need closure and the performance consideration.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "wpding",
                        "user_id": 1656715
                    },
                    "score": 2
                },
                {
                    "body": "<p>I'm surprised no one yet have suggested using the map function to better avoid (re)using local variables. In fact, I'm not using <code>for(var i ...)</code> at all anymore for this reason.</p>\n\n<pre><code>[0,2,3].map(function(i){ console.log('My value:', i); });\n// My value: 0\n// My value: 2\n// My value: 3\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Christian Landgren",
                        "user_id": 913800
                    },
                    "score": 2
                },
                {
                    "body": "<p><strong>Try it:</strong></p>\n\n<pre><code>var func=[]; \n\nfor(var i=0; i&lt;3; i++){\n  func[i]=function createfunc(i){\n       return function(){console.log(\"I am : \" +i);\n         };\n  }(i);\n\n}\n\nfor(var j=0; j&lt;3; j++){\n  func[j]();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user3687895",
                        "user_id": 3687895
                    },
                    "score": 0
                }
            ],
            "body": "<p>Closures are one of those things that have been discussed a lot on SO, but this situation pops up a lot for me and I'm always left scratching my head.</p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>It outputs this:</p>\n\n<blockquote>\n  <p>My value: 3<br>\n  My value: 3<br>\n  My value: 3</p>\n</blockquote>\n\n<p>Whereas I'd like it to output:</p>\n\n<blockquote>\n  <p>My value: 0<br>\n  My value: 1<br>\n  My value: 2</p>\n</blockquote>\n\n<p>What's the solution to this basic problem?</p>\n",
            "last_activity_date": 1425996443,
            "owner": {
                "display_name": "nickf",
                "user_id": 9021
            },
            "question_id": 750486,
            "score": 622,
            "tags": [
                "javascript",
                "loops",
                "closures"
            ],
            "title": "JavaScript closure inside loops \u2013 simple practical example"
        },
        {
            "answer_count": 74,
            "answers": [
                {
                    "body": "<p>If you're using jQuery, you can use a library, such as <a href=\"http://benalman.com/projects/jquery-bbq-plugin/\">jQuery BBQ: Back Button &amp; Query Library</a>.</p>\n\n<blockquote>\n  <p>...jQuery BBQ provides a full <code>.deparam()</code> method, along with both hash state management, and fragment / query string parse and merge utility methods.</p>\n</blockquote>\n\n<p>Edit: Adding Deparam Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code> var DeparamExample = function() {\r\n            var params = $.deparam.querystring();\r\n\r\n            //nameofparam is the name of a param from url\r\n            //code below will get param if ajax refresh with hash\r\n            if (typeof params.nameofparam == 'undefined') {\r\n                params = jQuery.deparam.fragment(window.location.href);\r\n            }\r\n            \r\n            if (typeof params.nameofparam != 'undefined') {\r\n                var paramValue = params.nameofparam.toString();\r\n                  \r\n            }\r\n        };</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If you want to just use plain JavaScript, you could use...</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var getParamValue = (function() {\n    var params;\n    var resetParams = function() {\n            var query = window.location.search;\n            var regex = /[?&amp;;](.+?)=([^&amp;;]+)/g;\n            var match;\n\n            params = {};\n\n            if (query) {\n                while (match = regex.exec(query)) {\n                    params[match[1]] = decodeURIComponent(match[2]);\n                }\n            }    \n        };\n\n    window.addEventListener\n    &amp;&amp; window.addEventListener('popstate', resetParams);\n\n    resetParams();\n\n    return function(param) {\n        return params.hasOwnProperty(param) ? params[param] : null;\n    }\n\n})();\u200b\n</code></pre>\n\n<p>Because of the new HTML History API and specifically <code>history.pushState()</code> and <code>history.replaceState()</code>, the URL can change which will invalidate the cache of parameters and their values.</p>\n\n<p>This version will update its internal cache of parameters each time the history changes.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "alex",
                        "user_id": 31671
                    },
                    "score": 122
                },
                {
                    "body": "<p>You don't need jQuery for that purpose. You can use just some pure JavaScript:</p>\n\n<pre><code>function getParameterByName(name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&amp;]\" + name + \"=([^&amp;#]*)\"),\n        results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>var prodId = getParameterByName('prodId');\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Artem Barger",
                        "user_id": 104014
                    },
                    "score": 3567
                },
                {
                    "body": "<p>Roshambo on snipplr.com has a really hot and simple script to achieve this described in <em><a href=\"http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\">Get URL Parameters with jQuery | Improved</a></em>. With his script you also easily get to pull out just the parameters you want.</p>\n\n<p>Here's the gist:</p>\n\n<pre><code>$.urlParam = function(name, url) {\n    if (!url) {\n     url = window.location.href;\n    }\n    var results = new RegExp('[\\\\?&amp;]' + name + '=([^&amp;#]*)').exec(url);\n    if (!results) { \n        return undefined;\n    }\n    return results[1] || undefined;\n}\n</code></pre>\n\n<p>Then just get your parameters from the query string.</p>\n\n<p>So if the URL/query string was <code>xyz.com/index.html?lang=de</code>.</p>\n\n<p>Just call <code>var langval = $.urlParam('lang');</code>, and you've got it.</p>\n\n<p>UZBEKJON has a great blog post on this as well, <em><a href=\"http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\">Get URL parameters &amp; values with jQuery</a></em>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "brandonjp",
                        "user_id": 264601
                    },
                    "score": 146
                },
                {
                    "body": "<p>Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.</p>\n\n<pre><code>var urlParams;\n(window.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate\">onpopstate</a> = function () {\n    var match,\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) { return <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent</a>(s.replace(pl, \" \")); },\n        query  = window.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.location\">location</a>.search.<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring\">substring</a>(1);\n\n    urlParams = {};\n    while (match = search.<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec\">exec</a>(query))\n       urlParams[decode(match[1])] = decode(match[2]);\n})();</code></pre>\n\n<p>Example querystring: </p>\n\n<blockquote>\n  <p><code>?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty</code></p>\n</blockquote>\n\n<p>Result:</p>\n\n<pre><code>urlParams = {\n    enc: \" Hello \",\n    i: \"main\",\n    mode: \"front\",\n    sid: \"de8d49b78a85a322c4155015fdce22c4\",\n    empty: \"\"\n}\n\nalert(urlParams[\"mode\"]);\n// -&gt; \"front\"\n\nalert(\"empty\" in urlParams);\n// -&gt; true\n</code></pre>\n\n<p>This could easily be improved upon to handle array-style query strings too.  An example of this is <a href=\"http://jsbin.com/adali3/2\">here</a>, but since array-style parameters aren't defined in <a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a> I won't pollute this answer with the source code. <a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756\">For those interested in a \"polluted\" version, look at campbeln's answer below</a>.</p>\n\n<p>Also, as pointed out in the comments, <code>;</code> is a legal delimiter for <code>key=value</code> pairs.  It would require a more complicated regex to handle <code>;</code> or <code>&amp;</code>, which I think is unnecessary because it's rare that <code>;</code> is used and I would say even more unlikely that both would be used.  If you need to support <code>;</code> instead of <code>&amp;</code>, just swap them in the regex.</p>\n\n<p><hr /> \nIf you're using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:</p>\n\n<pre><code>&lt;script>var urlParams = &lt;?php echo <a href=\"http://php.net/manual/en/function.json-encode.php\">json_encode</a>($_GET, JSON_HEX_TAG);?>;&lt;/script></code></pre>\n\n<p>Much simpler!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andy E",
                        "user_id": 94197
                    },
                    "score": 1149
                },
                {
                    "body": "<pre><code>function GET() {\n        var data = [];\n        for(x = 0; x &lt; arguments.length; ++x)\n            data.push(location.href.match(new RegExp(\"/\\?\".concat(arguments[x],\"=\",\"([^\\n&amp;]*)\")))[1])\n                return data;\n    }\n\n\nexample:\ndata = GET(\"id\",\"name\",\"foo\");\nquery string : ?id=3&amp;name=jet&amp;foo=b\nreturns:\n    data[0] // 3\n    data[1] // jet\n    data[2] // b\nor\n    alert(GET(\"id\")[0]) // return 3\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jet",
                        "user_id": 348008
                    },
                    "score": 25
                },
                {
                    "body": "<h2>Without jQuery</h2>\n\n<pre><code>var qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i &lt; a.length; ++i)\n    {\n        var p=a[i].split('=', 2);\n        if (p.length == 1)\n            b[p[0]] = \"\";\n        else\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return b;\n})(window.location.search.substr(1).split('&amp;'));\n</code></pre>\n\n<p>With an URL like <code>?topic=123&amp;name=query+string</code>, the following will return:</p>\n\n<pre><code>qs[\"topic\"];    // 123\nqs[\"name\"];     // query string\nqs[\"nothere\"];  // undefined (object)\n</code></pre>\n\n<hr>\n\n<h2>Google method</h2>\n\n<p>Tearing Google's code I found the method they use: <code>getUrlParameters</code></p>\n\n<pre><code>function (b) {\n    var c = typeof b === \"undefined\";\n    if (a !== h &amp;&amp; c) return a;\n    for (var d = {}, b = b || k[B][vb], e = b[p](\"?\"), f = b[p](\"#\"), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), \"&amp;\", b[Ya](f + 1)][K](\"\"))[z](\"&amp;\"), e = i.dd ? ia : unescape, f = 0, g = b[w]; f &lt; g; ++f) {\n        var l = b[f][p](\"=\");\n        if (l !== -1) {\n            var q = b[f][I](0, l),\n                l = b[f][I](l + 1),\n                l = l[Ca](/\\+/g, \" \");\n            try {\n                d[q] = e(l)\n            } catch (A) {}\n        }\n    }\n    c &amp;&amp; (a = d);\n    return d\n}\n</code></pre>\n\n<p>It is obfuscated, but it is understandable.</p>\n\n<p>They start to look for parameters on the url from <code>?</code> and also from the hash <code>#</code>. Then for each parameter they split in the equal sign <code>b[f][p](\"=\")</code> (which looks like <code>indexOf</code>, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has they store the value of <code>d</code>, if not it just continue.</p>\n\n<p>In the end the object <code>d</code> is returned, handling escaping and the <code>+</code> sign. This object is just like mine, it has the same behavior.</p>\n\n<hr>\n\n<p>My method as a <strong>jQuery plugin</strong></p>\n\n<pre><code>(function($) {\n    $.QueryString = (function(a) {\n        if (a == \"\") return {};\n        var b = {};\n        for (var i = 0; i &lt; a.length; ++i)\n        {\n            var p=a[i].split('=');\n            if (p.length != 2) continue;\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n        }\n        return b;\n    })(window.location.search.substr(1).split('&amp;'))\n})(jQuery);\n</code></pre>\n\n<p>Usage</p>\n\n<pre><code>$.QueryString[\"param\"]\n</code></pre>\n\n<hr>\n\n<h2><a href=\"http://jsperf.com/querystring-with-javascript\">Performance test (split method against regex method)</a> (<a href=\"http://jsperf.com/\">jsPerf</a>)</h2>\n\n<p>Preparation code: methods declaration</p>\n\n<h3>Split test code</h3>\n\n<pre><code>var qs = window.GetQueryString(query);\n\nvar search = qs[\"q\"];\nvar value = qs[\"value\"];\nvar undef = qs[\"undefinedstring\"];\n</code></pre>\n\n<h3>Regex test code</h3>\n\n<pre><code>var search = window.getParameterByName(\"q\");\nvar value = window.getParameterByName(\"value\");\nvar undef = window.getParameterByName(\"undefinedstring\");\n</code></pre>\n\n<p><strong>Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64</strong></p>\n\n<ul>\n<li><strong>Split method</strong>: 144,780 \u00b12.17% fastest</li>\n<li><strong>Regex method</strong>: 13,891 \u00b10.85% | 90% slower</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BrunoLM",
                        "user_id": 340760
                    },
                    "score": 760
                },
                {
                    "body": "<p>Here's my stab at making Andy E's excellent solution into a full fledged jQuery plugin:</p>\n\n<pre><code>;(function ($) {\n    $.extend({      \n        getQueryString: function (name) {           \n            function parseParams() {\n                var params = {},\n                    e,\n                    a = /\\+/g,  // Regex for replacing addition symbol with a space\n                    r = /([^&amp;=]+)=?([^&amp;]*)/g,\n                    d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n                    q = window.location.search.substring(1);\n\n                while (e = r.exec(q))\n                    params[d(e[1])] = d(e[2]);\n\n                return params;\n            }\n\n            if (!this.queryStringParams)\n                this.queryStringParams = parseParams(); \n\n            return this.queryStringParams[name];\n        }\n    });\n})(jQuery);\n</code></pre>\n\n<p>The syntax is:</p>\n\n<pre><code>var someVar = $.getQueryString('myParam');\n</code></pre>\n\n<p>Best of both worlds!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ryan Phelan",
                        "user_id": 467304
                    },
                    "score": 72
                },
                {
                    "body": "<p>Here is my version of query string parsing code on <a href=\"https://github.com/voituk/Misc/blob/master/js/jquery.hash.js#L10\">github</a></p>\n\n<p>It's \"prefixed\" with jquery.*, but the parsing function itself don't use jQuery. Its pretty fast but still open for few simple performance optimizations.</p>\n\n<p>Also it supports list &amp; hash-tables encoding in URL, like: </p>\n\n<pre><code>arr[]=10&amp;arr[]=20&amp;arr[]=100\n</code></pre>\n\n<p>or</p>\n\n<pre><code>hash[key1]=hello&amp;hash[key2]=moto&amp;a=How%20are%20you\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vadim",
                        "user_id": 338477
                    },
                    "score": 10
                },
                {
                    "body": "<p>Code golf:</p>\n\n<pre><code>var a = location.search&amp;&amp;location.search.substr(1).replace(/\\+/gi,\" \").split(\"&amp;\");\nfor (var i in a) {\n    var s = a[i].split(\"=\");\n    a[i]  = a[unescape(s[0])] = unescape(s[1]);\n}\n</code></pre>\n\n<p>Display it!</p>\n\n<pre><code>for (i in a) {\n    document.write(i + \":\" + a[i] + \"&lt;br/&gt;\");   \n};\n</code></pre>\n\n<p>On my Mac: <code>test.htm?i=can&amp;has=cheezburger</code> displays</p>\n\n<pre><code>0:can\n1:cheezburger\ni:can\nhas:cheezburger\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "shanimal",
                        "user_id": 509525
                    },
                    "score": 26
                },
                {
                    "body": "<p>Roshambo jQuery method wasn't taking care of decode URL</p>\n\n<p><a href=\"http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\" rel=\"nofollow\">http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/</a></p>\n\n<p>Just added that capability also while adding in  the return statement </p>\n\n<pre><code>return decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n</code></pre>\n\n<p>Now you can find the updated gist:</p>\n\n<pre><code>$.urlParam = function(name){\nvar results = new RegExp('[\\\\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);\nif (!results) { return 0; }\nreturn decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mohammed Arif",
                        "user_id": 181174
                    },
                    "score": 24
                },
                {
                    "body": "<p>This is a function I created a while back and I'm quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn't exist, it just returns an empty string.</p>\n\n<p>I use a compressed version of this. I'm posting uncompressed for the novice types to better explain what's going on.</p>\n\n<p>I'm sure this could be optimized or done differently to work faster, but it's always worked great for what I need.</p>\n\n<p>Enjoy.</p>\n\n<pre><code>    function getQSP(sName, sURL) {\n        var theItmToRtn = \"\";\n        var theSrchStrg = location.search;\n        if (sURL) theSrchStrg = sURL;\n\n        var sOrig = theSrchStrg;\n\n        theSrchStrg = theSrchStrg.toUpperCase();\n        sName = sName.toUpperCase();\n        theSrchStrg = theSrchStrg.replace(\"?\", \"&amp;\")\n        theSrchStrg = theSrchStrg + \"&amp;\";\n        var theSrchToken = \"&amp;\" + sName + \"=\";\n        if (theSrchStrg.indexOf(theSrchToken) != -1) {\n            var theSrchTokenLth = theSrchToken.length;\n            var theSrchTokenLocStart = theSrchStrg.indexOf(theSrchToken) + theSrchTokenLth;\n            var theLocOfNextAndSign = theSrchStrg.indexOf(\"&amp;\", theSrchTokenLocStart);\n            theItmToRtn = unescape(sOrig.substring(theSrchTokenLocStart, theLocOfNextAndSign));\n        }\n        return unescape(theItmToRtn);\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Clint",
                        "user_id": 594059
                    },
                    "score": 19
                },
                {
                    "body": "<p>Improved version of <a href=\"http://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144\">Artem Barger's answer</a>:</p>\n\n<pre><code>function getParameterByName(name) {\n    var match = RegExp('[?&amp;]' + name + '=([^&amp;]*)').exec(window.location.search);\n    return match &amp;&amp; decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\n</code></pre>\n\n<p>For more information on improvement see: <a href=\"http://james.padolsey.com/javascript/bujs-1-getparameterbyname/\">http://james.padolsey.com/javascript/bujs-1-getparameterbyname/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "James",
                        "user_id": 21677
                    },
                    "score": 473
                },
                {
                    "body": "<p>I use regular expressions a lot but not for that.</p>\n\n<p>It seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:</p>\n\n<pre><code>var search = function() {\n  var s = window.location.search.substr(1),\n    p = s.split(/\\&amp;/), l = p.length, kv, r = {};\n  if (l === 0) {return false;}\n  while (l--) {\n    kv = p[l].split(/\\=/);\n    r[kv[0]] = decodeURIComponent(kv[1] || '') || true;\n  }\n  return r;\n}();\n</code></pre>\n\n<p>For an URL like <code>http://domain.com?param1=val1&amp;param2=val2</code> you can get their value later in your code as <code>search.param1</code> and <code>search.param2</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mic",
                        "user_id": 166491
                    },
                    "score": 25
                },
                {
                    "body": "<p>Just another recommendation. The plugin <em><a href=\"https://github.com/allmarkedup/jQuery-URL-Parser\">Purl</a></em> allows to retrieve all parts of URL, including anchor, host, etc.</p>\n\n<p>It can be used with or without jQuery.</p>\n\n<p>Usage is very simple and cool:</p>\n\n<pre><code>var url = $.url('http://allmarkedup.com/folder/dir/index.html?item=value'); // jQuery version\nvar url = purl('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.attr('protocol'); // returns 'http'\nurl.attr('path'); // returns '/folder/dir/index.html'\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "AlfaTeK",
                        "user_id": 43671
                    },
                    "score": 354
                },
                {
                    "body": "<p>I would rather use split() instead of Regex for this operation:</p>\n\n<pre><code>function getUrlParams() {\n    var result = {};\n    var params = (window.location.search.split('?')[1] || '').split('&amp;');\n    for(var param in params) {\n        if (params.hasOwnProperty(param)) {\n            paramParts = params[param].split('=');\n            result[paramParts[0]] = decodeURIComponent(paramParts[1] || \"\");\n        }\n    }\n    return result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eneko Alonso",
                        "user_id": 422288
                    },
                    "score": 5
                },
                {
                    "body": "<p>I took <a href=\"http://stackoverflow.com/questions/901115/get-querystring-values-in-javascript/3855394#3855394\">this answer</a> and added support for optionally passing the URL in as a parameter; falls back to window.location.search. Obviously this is useful for getting the query string parameters from URLs that are not the current page:</p>\n\n<pre><code>(function($, undef) {\n  $.QueryString = function(url) {\n    var pairs, qs = null, index, map = {};\n    if(url == undef){\n      qs = window.location.search.substr(1);\n    }else{\n      index = url.indexOf('?');\n      if(index == -1) return {};\n      qs = url.substring(index+1);\n    }\n    pairs = qs.split('&amp;');\n    if (pairs == \"\") return {};\n    for (var i = 0; i &lt; pairs.length; ++i)\n    {\n      var p = pairs[i].split('=');\n      if(p.length != 2) continue;\n      map[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return map;\n  };\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mynameistechno",
                        "user_id": 271442
                    },
                    "score": 2
                },
                {
                    "body": "<p>Doesn't have enough reputation for comment, sigh.</p>\n\n<p>Here's my edit to this <a href=\"http://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394\">excellent answer</a> - with added ability to parse query strings with keys without values.</p>\n\n<pre><code>var url = 'http://sb.com/reg/step1?param';\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i &lt; a.length; ++i) {\n        var p=a[i].split('=', 2);\n        if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n        b[p[0]] = p[1];\n    }\n    return b;\n})((url.split('?'))[1].split('&amp;'));\n</code></pre>\n\n<p><b>IMPORTANT!</b> Parameter for that func in last line is different, it's just example how one can pass arbitrary url to it. You can use last line from Bruno answer to parse current url.</p>\n\n<p>So what exactly changed? With url <code>http://sb.com/reg/step1?param=</code> results will be same. But with url <code>http://sb.com/reg/step1?param</code> Bruno solution returns object without keys, while mine returns object with key <code>param</code> and <code>undefined</code> value.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "skaurus",
                        "user_id": 320345
                    },
                    "score": 23
                },
                {
                    "body": "<p>This code will create a object which have two method <br /> \n       1. <strong>isKeyExist</strong>: Check if particular parameter exist; <br /> \n       2. <strong>getValue</strong>: get value of particular parameter.</p>\n\n<pre><code> var QSParam = new function() {\n        var qsParm = {};\n        var query = window.location.search.substring(1);\n        var params = query.split('&amp;');\n        for (var i = 0; i &lt; params.length; i++) {\n            var pos = params[i].indexOf('=');\n            if (pos &gt; 0) {\n                var key = params[i].substring(0, pos);\n                var val = params[i].substring(pos + 1);\n                qsParm[key] = val;\n            }\n        }\n        this.isKeyExist = function(query){\n            if(qsParm[query]){\n                return true;\n            }\n            else{\n               return false;\n            }\n        };     \n        this.getValue = function(query){\n            if(qsParm[query])\n            {\n                return qsParm[query];\n            }\n            throw \"URL does not contain query \"+ query;\n        }\n  };\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anoop",
                        "user_id": 460942
                    },
                    "score": 4
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>String.prototype.getValueByKey = function(k){\n    var p = new RegExp('\\\\b'+k+'\\\\b','gi');\n    return this.search(p) != -1 ? decodeURIComponent(this.substr(this.search(p)+k.length+1).substr(0,this.substr(this.search(p)+k.length+1).search(/(&amp;|;|$)/))) : \"\";\n};\n</code></pre>\n\n<p>Then call it like so:</p>\n\n<pre><code>if(location.search != \"\") location.search.getValueByKey(\"id\");\n</code></pre>\n\n<p>You can use this for <strong>cookies</strong> also:</p>\n\n<pre><code>if(navigator.cookieEnabled) document.cookie.getValueByKey(\"username\");\n</code></pre>\n\n<p>This only works for strings that have \"key=value[&amp;|;|$]\"... will not work on objects/arrays.</p>\n\n<p>If you <strong>don't</strong> want to use <strong>String.prototype</strong>...\nmove it to a function and pass the string as an argument</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user981090"
                    },
                    "score": 5
                },
                {
                    "body": "<p>I like <a href=\"http://stackoverflow.com/a/3867610/632117\">Ryan Phelan's solution</a>. But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.</p>\n\n<p>On other hand I like the built-in function in Google Chrome: window.location.getParameter.</p>\n\n<p>So why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:</p>\n\n<pre><code>if (!window.location.getParameter ) {\n  window.location.getParameter = function(key) {\n    function parseParams() {\n        var params = {},\n            e,\n            a = /\\+/g,  // Regex for replacing addition symbol with a space\n            r = /([^&amp;=]+)=?([^&amp;]*)/g,\n            d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n            q = window.location.search.substring(1);\n\n        while (e = r.exec(q))\n            params[d(e[1])] = d(e[2]);\n\n        return params;\n    }\n\n    if (!this.queryStringParams)\n        this.queryStringParams = parseParams(); \n\n    return this.queryStringParams[key];\n  };\n}\n</code></pre>\n\n<p>This function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. <a href=\"http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/\">More about this function on my blog</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anatoly Mironov",
                        "user_id": 632117
                    },
                    "score": 41
                },
                {
                    "body": "<pre><code>function getUrlVar(key){\n    var result = new RegExp(key + \"=([^&amp;]*)\", \"i\").exec(window.location.search); \n    return result &amp;&amp; unescape(result[1]) || \"\"; \n}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/1771618\">https://gist.github.com/1771618</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "alkos333",
                        "user_id": 228174
                    },
                    "score": 6
                },
                {
                    "body": "<p>Keep it simple in plain javascript:</p>\n\n<pre><code>function qs(key) {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for(var i = 0; i &lt; hashes.length; i++)\n    {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars[key];\n}\n</code></pre>\n\n<p>Call it from anywhere in the JavaScript code:</p>\n\n<pre><code>var result = qs('someKey');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sagivo",
                        "user_id": 543601
                    },
                    "score": 33
                },
                {
                    "body": "<p>If you're doing more URL manipulation than simply parsing the querystring, you may find <a href=\"http://medialize.github.com/URI.js/\">URI.js</a> helpful. It is a library for manipulating URLs - and comes with all the bells and whistles. (Sorry for self-advertising here)</p>\n\n<p>to convert your querystring into a map:</p>\n\n<pre><code>var data = URI('?foo=bar&amp;bar=baz&amp;foo=world').query(true);\ndata == {\n  \"foo\": [\"bar\", \"world\"],\n  \"bar\": \"baz\"\n}\n</code></pre>\n\n<p>(URI.js also \"fixes\" bad querystrings like <code>?&amp;foo&amp;&amp;bar=baz&amp;</code> to <code>?foo&amp;bar=baz</code>)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "rodneyrehm",
                        "user_id": 515124
                    },
                    "score": 46
                },
                {
                    "body": "<p>Here's my own take on this. This first function decodes a URL string into an object of name/value pairs:</p>\n\n<pre><code>url_args_decode = function (url) {\n  var args_enc, el, i, nameval, ret;\n  ret = {};\n  // use the DOM to parse the URL via an 'a' element\n  el = document.createElement(\"a\");\n  el.href = url;\n  // strip off initial ? on search and split\n  args_enc = el.search.substring(1).split('&amp;');\n  for (i = 0; i &lt; args_enc.length; i++) {\n    // convert + into space, split on =, and then decode \n    args_enc[i].replace(/\\+/g, ' ');\n    nameval = args_enc[i].split('=', 2);\n    ret[decodeURIComponent(nameval[0])]=decodeURIComponent(nameval[1]);\n  }\n  return ret;\n};\n</code></pre>\n\n<p>And as an added bonus, if you change some of the args, you can use this second function to put the array of args back into the URL string:</p>\n\n<pre><code>url_args_replace = function (url, args) {\n  var args_enc, el, name;\n  // use the DOM to parse the URL via an 'a' element\n  el = document.createElement(\"a\");\n  el.href = url;\n  args_enc = [];\n  // encode args to go into url\n  for (name in args) {\n    if (args.hasOwnProperty(name)) {\n      name = encodeURIComponent(name);\n      args[name] = encodeURIComponent(args[name]);\n      args_enc.push(name + '=' + args[name]);\n    }\n  }\n  if (args_enc.length &gt; 0) {\n    el.search = '?' + args_enc.join('&amp;');\n  } else {\n    el.search = '';\n  }\n  return el.href;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BMitch",
                        "user_id": 596285
                    },
                    "score": 5
                },
                {
                    "body": "<pre><code>http://someurl.com?key=value&amp;keynovalue&amp;keyemptyvalue=&amp;&amp;keynovalue=nowhasvalue#somehash\n</code></pre>\n\n<ul>\n<li>Regular key/value pair (<code>?param=value</code>)</li>\n<li>Keys w/o value (<code>?param</code> : no equal sign or value)</li>\n<li>Keys w/ empty value (<code>?param=</code> : equal sign, but no value to right of equal sign)</li>\n<li>Repeated Keys (<code>?param=1&amp;param=2</code>)</li>\n<li>Removes Empty Keys (<code>?&amp;&amp;</code> : no key or value)</li>\n</ul>\n\n<h3>Code:</h3>\n\n<ul>\n<li><pre><code>var queryString = window.location.search || '';\nvar keyValPairs = [];\nvar params      = {};\nqueryString     = queryString.substr(1);\n\nif (queryString.length)\n{\n   keyValPairs = queryString.split('&amp;');\n   for (pairNum in keyValPairs)\n   {\n      var key = keyValPairs[pairNum].split('=')[0];\n      if (!key.length) continue;\n      if (typeof params[key] === 'undefined')\n         params[key] = [];\n      params[key].push(keyValPairs[pairNum].split('=')[1]);\n   }\n}\n</code></pre></li>\n</ul>\n\n<h3>How to Call:</h3>\n\n<ul>\n<li><pre><code>params['key'];  // returns an array of values (1..n)\n</code></pre></li>\n</ul>\n\n<h3>Output:</h3>\n\n<ul>\n<li><pre><code>key            [\"value\"]\nkeyemptyvalue  [\"\"]\nkeynovalue     [undefined, \"nowhasvalue\"]\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vol7ron",
                        "user_id": 183181
                    },
                    "score": 13
                },
                {
                    "body": "<p>This one works fine</p>\n\n<pre><code>function getQuerystring(key) {\n    var query = window.location.search.substring(1);\n    alert(query);\n    var vars = query.split(\"&amp;\");\n    for (var i = 0; i &lt; vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0] == key) {\n            return pair[1];\n        }\n    }\n}\n</code></pre>\n\n<p>taken from <a href=\"http://forums.asp.net/t/1771251.aspx/1\">here</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "IT ppl",
                        "user_id": 1285273
                    },
                    "score": 7
                },
                {
                    "body": "<p>The following function returns an object version of your queryString. \nYou can simply write <code>obj.key1</code> and  <code>obj.key2</code> to access values of <code>key1</code> and <code>key2</code> in parameter.</p>\n\n<pre><code>function getQueryStringObject()\n{\n    var querystring = document.location.search.replace('?','').split( '&amp;' );\n    var objQueryString={};\n    var key=\"\",val=\"\";\n    if(typeof querystring == 'undefined')\n    {\n        return (typeof querystring);\n    }\n    for(i=0;i&lt;querystring.length;i++)\n    {\n        key=querystring[i].split(\"=\")[0];\n        val=querystring[i].split(\"=\")[1];\n        objQueryString[key] = val;\n    }\n    return objQueryString;\n}\n</code></pre>\n\n<p>And to use this function you can write</p>\n\n<pre><code>var obj= getQueryStringObject();\nalert(obj.key1);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Imdad",
                        "user_id": 946170
                    },
                    "score": 5
                },
                {
                    "body": "<p>I like this one:</p>\n\n<pre><code>// get an array with all querystring values\n// example: var valor = getUrlVars()[\"valor\"];\nfunction getUrlVars() {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for (var i = 0; i &lt; hashes.length; i++) {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars;\n}\n</code></pre>\n\n<p>Works great for me.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tomamais",
                        "user_id": 1209721
                    },
                    "score": 19
                },
                {
                    "body": "<p>Use the following to get a query param value given a key name:</p>\n\n<pre><code>function getParam(key) \n  {\n  // Find the key and everything up to the ampersand delimiter\n  var value=RegExp(\"\"+key+\"[^&amp;]+\").exec(window.location.search);\n\n  // Return the unescaped value minus everything starting from the equals sign or an empty string\n  return unescape(!!value ? value.toString().replace(/^[^=]+./,\"\") : \"\");\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paul Sweatte",
                        "user_id": 1113772
                    },
                    "score": 31
                },
                {
                    "body": "<p>Here is a fast way to get an object similar to the PHP <a href=\"http://php.net/manual/en/reserved.variables.get.php\">$_GET</a> array:</p>\n\n<pre><code>function get_query(){\n    var url = location.href;\n    var qs = url.substring(url.indexOf('?') + 1).split('&amp;');\n    for(var i = 0, result = {}; i &lt; qs.length; i++){\n        qs[i] = qs[i].split('=');\n        result[qs[i][0]] = decodeURIComponent(qs[i][1]);\n    }\n    return result;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var $_GET = get_query();\n</code></pre>\n\n<p>For the query string <code>x=5&amp;y&amp;z=hello&amp;x=6</code> this returns the object:</p>\n\n<pre><code>{\n  x: \"6\",\n  y: undefined,\n  z: \"hello\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paulpro",
                        "user_id": 772035
                    },
                    "score": 30
                },
                {
                    "body": "<p>Why not just use 2 <strong>splits</strong> ?</p>\n\n<pre><code>function get(n) {\n      var half = location.search.split(n + '=')[1];\n      return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;\n  }\n</code></pre>\n\n<p>I was reading all previous and more complete answer. But I think that is the simplest and faster method. You can check in this jsPerf <a href=\"http://jsperf.com/querystring-with-javascript/9\">benchmark</a> </p>\n\n<p>To solve the problem in Rup's comment, add a conditional split by changing the first line to the two below.  But absolute accuracy means it's now slower than regexp (see <a href=\"http://jsperf.com/querystring-with-javascript/10\">jsPerf</a>).</p>\n\n<pre><code>function get(n) {\n    var half = location.search.split('&amp;' + n + '=')[1];\n    if (!half) half = location.search.split('?' + n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;\n}\n</code></pre>\n\n<p>So if you know you won't run into Rup's counter-case, this wins.  Otherwise, regexp.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Martin Borthiry",
                        "user_id": 356042
                    },
                    "score": 60
                },
                {
                    "body": "<p>These are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created. It is a simple library method that does dissection and manipulation of url parameters. The static method has the following sub methods that can be called on the subject url:</p>\n\n<ul>\n<li>getHost</li>\n<li>getPath</li>\n<li>getHash</li>\n<li>setHash</li>\n<li>getParams</li>\n<li>getQuery</li>\n<li>setParam</li>\n<li>getParam</li>\n<li>hasParam</li>\n<li>removeParam</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>URLParser(url).getParam('myparam1')\n</code></pre>\n\n<hr>\n\n<pre><code>var url = \"http://www.test.com/folder/mypage.html?myparam1=1&amp;myparam2=2#something\";\n\nfunction URLParser(u){\n    var path=\"\",query=\"\",hash=\"\",params;\n    if(u.indexOf(\"#\") &gt; 0){\n        hash = u.substr(u.indexOf(\"#\") + 1);\n        u = u.substr(0 , u.indexOf(\"#\"));\n    }\n    if(u.indexOf(\"?\") &gt; 0){\n        path = u.substr(0 , u.indexOf(\"?\"));        \n        query = u.substr(u.indexOf(\"?\") + 1);\n        params= query.split('&amp;');\n    }else\n        path = u;\n    return {\n        getHost: function(){\n            var hostexp = /\\/\\/([\\w.-]*)/;\n            var match = hostexp.exec(path);\n            if (match != null &amp;&amp; match.length &gt; 1)\n                return match[1];\n            return \"\";\n        },\n        getPath: function(){\n            var pathexp = /\\/\\/[\\w.-]*(?:\\/([^?]*))/;\n            var match = pathexp.exec(path);\n            if (match != null &amp;&amp; match.length &gt; 1)\n                return match[1];\n            return \"\";\n        },\n        getHash: function(){\n            return hash;\n        },\n        getParams: function(){\n            return params\n        },\n        getQuery: function(){\n            return query;\n        },\n        setHash: function(value){\n            if(query.length &gt; 0)\n                query = \"?\" + query;\n            if(value.length &gt; 0)\n                query = query + \"#\" + value;\n            return path + query;\n        },\n        setParam: function(name, value){\n            if(!params){\n                params= new Array();\n            }\n            params.push(name + '=' + value);\n            for (var i = 0; i &lt; params.length; i++) {\n                if(query.length &gt; 0)\n                    query += \"&amp;\";\n                query += params[i];\n            }\n            if(query.length &gt; 0)\n                query = \"?\" + query;\n            if(hash.length &gt; 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n        getParam: function(name){\n            if(params){\n                for (var i = 0; i &lt; params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return decodeURIComponent(pair[1]);\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        hasParam: function(name){\n            if(params){\n                for (var i = 0; i &lt; params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return true;\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        removeParam: function(name){\n            query = \"\";\n            if(params){\n                var newparams = new Array();\n                for (var i = 0;i &lt; params.length;i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) != name)\n                          newparams .push(params[i]);\n                }\n                params = newparams ;\n                for (var i = 0; i &lt; params.length; i++) {\n                    if(query.length &gt; 0)\n                        query += \"&amp;\";\n                    query += params[i];\n                }\n            }\n            if(query.length &gt; 0)\n                query = \"?\" + query;\n            if(hash.length &gt; 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n    }\n}\n\n\ndocument.write(\"Host: \" + URLParser(url).getHost() + '&lt;br&gt;');\ndocument.write(\"Path: \" + URLParser(url).getPath() + '&lt;br&gt;');\ndocument.write(\"Query: \" + URLParser(url).getQuery() + '&lt;br&gt;');\ndocument.write(\"Hash: \" + URLParser(url).getHash() + '&lt;br&gt;');\ndocument.write(\"Params Array: \" + URLParser(url).getParams() + '&lt;br&gt;');\ndocument.write(\"Param: \" + URLParser(url).getParam('myparam1') + '&lt;br&gt;');\ndocument.write(\"Has Param: \" + URLParser(url).hasParam('myparam1') + '&lt;br&gt;');\n\ndocument.write(url + '&lt;br&gt;');\n\n// Remove first param\nurl = URLParser(url).removeParam('myparam1');\ndocument.write(url + ' - Remove first param&lt;br&gt;');\n\n// Add third param\nurl = URLParser(url).setParam('myparam3',3);\ndocument.write(url + ' - Add third param&lt;br&gt;');\n\n// Remove second param\nurl = URLParser(url).removeParam('myparam2');\ndocument.write(url + ' - Add third param&lt;br&gt;');\n\n// Add hash \nurl = URLParser(url).setHash('newhash');\ndocument.write(url + ' - Set Hash&lt;br&gt;');\n\n// Remove last param\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove last param&lt;br&gt;');\n\n// Remove a param that doesnt exist\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove a param that doesnt exist&lt;br&gt;');\n\n\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bernesto",
                        "user_id": 165439
                    },
                    "score": 29
                },
                {
                    "body": "\n\n<p>This function converts the querystring to a JSON-like object, it also handles value-less and multi-value parameters:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>\"use strict\";\nfunction getQuerystringData(name) {\n    var data = { };\n    var parameters = window.location.search.substring(1).split(\"&amp;\");\n    for (var i = 0, j = parameters.length; i &lt; j; i++) {\n        var parameter = parameters[i].split(\"=\");\n        var parameterName = decodeURIComponent(parameter[0]);\n        var parameterValue = typeof parameter[1] === \"undefined\" ? parameter[1] : decodeURIComponent(parameter[1]);\n        var dataType = typeof data[parameterName];\n        if (dataType === \"undefined\") {\n            data[parameterName] = parameterValue;\n        } else if (dataType === \"array\") {\n            data[parameterName].push(parameterValue);\n        } else {\n            data[parameterName] = [data[parameterName]];\n            data[parameterName].push(parameterValue);\n        }\n    }\n    return typeof name === \"string\" ? data[name] : data;\n}\n</code></pre>\n\n<p>We perform a check for <code>undefined</code> on <code>parameter[1]</code> because <code>decodeURIComponent</code> returns the string \"undefined\" if the variable is <code>undefined</code>, and that's wrong.</p>\n\n<p>Usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>\"use strict\";\nvar data = getQuerystringData();\nvar parameterValue = getQuerystringData(\"parameterName\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Albireo",
                        "user_id": 91696
                    },
                    "score": 4
                },
                {
                    "body": "<p>There is a nice little <code>url</code> utility for this with some cool sugaring:</p>\n\n<pre><code>http://www.example.com/path/index.html?silly=willy#chucky=cheese\n\nurl();            // http://www.example.com/path/index.html?silly=willy#chucky=cheese\nurl('domain');    // example.com\nurl('1');         // path\nurl('-1');        // index.html\nurl('?');         // silly=willy\nurl('?silly');    // willy\nurl('?poo');      // (an empty string)\nurl('#');         // chucky=cheese\nurl('#chucky');   // cheese\nurl('#poo');      // (an empty string)\n</code></pre>\n\n<p>Check out more examples and download here: <a href=\"https://github.com/websanova/js-url#url\">https://github.com/websanova/js-url#url</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rob",
                        "user_id": 1200670
                    },
                    "score": 4
                },
                {
                    "body": "<p>One line code to get Query </p>\n\n<pre><code>var value = location.search.match(new RegExp(key + \"=(.*?)($|\\&amp;)\", \"i\"))[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anoop",
                        "user_id": 460942
                    },
                    "score": 13
                },
                {
                    "body": "<p><em><strong>This the most simple and small function JavaScript to get int ans String parameter value from URL</em></strong></p>\n\n<pre><code>/* THIS FUNCTION IS TO FETCH INT PARAMETER VALUES */\n\nfunction getParameterint(param) {\n            var val = document.URL;\n            var url = val.substr(val.indexOf(param))  \n            var n=parseInt(url.replace(param+\"=\",\"\"));\n            alert(n); \n}\ngetParameteraint(\"page\");\ngetParameteraint(\"pagee\");\n\n/*THIS FUNCTION IS TO FETCH STRING PARAMETER*/\nfunction getParameterstr(param) {\n            var val = document.URL;\n            var url = val.substr(val.indexOf(param))  \n            var n=url.replace(param+\"=\",\"\");\n            alert(n); \n}\ngetParameterstr(\"str\");\n</code></pre>\n\n<p><strong>Source And DEMO :</strong> <a href=\"http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html\" rel=\"nofollow\">http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jolly.exe",
                        "user_id": 1045296
                    },
                    "score": 4
                },
                {
                    "body": "<p>I developed a small library using techniques listed here to create an easy to use, drop-in solution to anyones troubles; It can be found here: </p>\n\n<p><a href=\"https://github.com/Nijikokun/query-js\">https://github.com/Nijikokun/query-js</a></p>\n\n<p><strong>Usage</strong></p>\n\n<p>Fetching specific parameter/key:</p>\n\n<pre><code>query.get('param');\n</code></pre>\n\n<p>Using the builder to fetch the entire object:</p>\n\n<pre><code>var storage = query.build();\nconsole.log(storage.param);\n</code></pre>\n\n<p>and tons more... check the github link for more examples.</p>\n\n<p><strong>Features</strong></p>\n\n<ol>\n<li>Caching on both decoding and parameters</li>\n<li>Supports hash query strings <code>#hello?page=3</code></li>\n<li>Supports passing custom queries</li>\n<li>Supports Array / Object Parameters <code>user[]=\"jim\"&amp;user[]=\"bob\"</code></li>\n<li>Supports empty management <code>&amp;&amp;</code></li>\n<li>Supports declaration parameters without values <code>name&amp;hello=\"world\"</code></li>\n<li>Supports repeated parameters <code>param=1&amp;param=2</code></li>\n<li>Clean, compact, and readable source <code>4kb</code></li>\n<li>AMD, Require, Node support</li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nijikokun",
                        "user_id": 983070
                    },
                    "score": 15
                },
                {
                    "body": "<pre><code>function GetQueryStringParams(sParam)\n{\n    var sPageURL = window.location.search.substring(1);\n    var sURLVariables = sPageURL.split('&amp;');\n\n    for (var i = 0; i &lt; sURLVariables.length; i++)\n    {\n        var sParameterName = sURLVariables[i].split('=');\n        if (sParameterName[0] == sParam)\n        {\n            return sParameterName[1];\n        }\n    }\n}\u200b\n</code></pre>\n\n<p>And this is how you can use this function assuming the URL is</p>\n\n<blockquote>\n  <p><code>http://dummy.com/?stringtext=jquery&amp;stringword=jquerybyexample</code></p>\n</blockquote>\n\n<pre><code>var tech = GetQueryStringParams('stringtext');\nvar blog = GetQueryStringParams('stringword');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "gewel",
                        "user_id": 2028173
                    },
                    "score": 14
                },
                {
                    "body": "<p>From <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.location#Get_the_value_of_a_single_window.location.search_key.3A\">the MDN</a>:</p>\n\n<pre><code>function loadPageVar (sVar) {\n\u00a0\u00a0return unescape(window.location.search.replace(new RegExp(\"^(?:.*[&amp;\\\\?]\" + escape(sVar).replace(/[\\.\\+\\*]/g, \"\\\\$&amp;\") + \"(?:\\\\=([^&amp;]*))?)?.*$\", \"i\"), \"$1\"));\n}\n\nalert(loadPageVar(\"name\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "orip",
                        "user_id": 37020
                    },
                    "score": 23
                },
                {
                    "body": "<p>I'm gonna throw my hat in the ring - I needed an object from the query string, and I hate lots of code. may not be the most robust in the universe but it's just a few lines of code.</p>\n\n<pre><code>var q = {};\nlocation.href.split('?')[1].split('&amp;').forEach(function(i){\n    q[i.split('=')[0]]=i.split('=')[1];\n});\n</code></pre>\n\n<p>a URL like <code>this.htm?hello=world&amp;foo=bar</code> will create:</p>\n\n<pre><code>{hello:'world', foo:'bar'}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "tim",
                        "user_id": 967943
                    },
                    "score": 19
                },
                {
                    "body": "<p>I believe this to be an accurate and concise way to achieve this (modified from <a href=\"http://css-tricks.com/snippets/javascript/get-url-variables/\" rel=\"nofollow\">http://css-tricks.com/snippets/javascript/get-url-variables/</a>):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function getQueryVariable(variable) {\n\n    var query = window.location.search.substring(1),            // Remove the ? from the query string.\n        vars = query.split(\"&amp;\");                                // Split all values by ampersand.\n\n    for (var i = 0; i &lt; vars.length; i++) {                     // Loop through them...\n        var pair = vars[i].split(\"=\");                          // Split the name from the value.\n        if (pair[0] == variable) {                              // Once the requested value is found...\n            return ( pair[1] == undefined ) ? null : pair[1];   // Return null if there is no value (no equals sign), otherwise return the value.\n        }\n    }\n\n    return undefined;                                           // Wasn't found.\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gabriel Ryan Nahmias",
                        "user_id": 949406
                    },
                    "score": 4
                },
                {
                    "body": "<p>A very lightweight jquery method: </p>\n\n<pre><code>var qs = window.location.search.replace('?','').split('&amp;'),\n    request = {};\n$.each(qs, function(i,v) {\n    var pair = v.split('=');\n    return request[pair[0]] = pair[1];\n});\nconsole.log(request);\n</code></pre>\n\n<p>And to alert ,for example ?q</p>\n\n<pre><code>alert(request.q)\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Roi",
                        "user_id": 931868
                    },
                    "score": 6
                },
                {
                    "body": "<p>If you want array-style parameters <a href=\"https://github.com/kevincox/url.js\" rel=\"nofollow\">URL.js</a> supports arbitrarily nested array-style parameters as well as string indexes (maps).  It also handles url-decoding.</p>\n\n<pre><code>url.get(\"val[0]=zero&amp;val[1]=one&amp;val[2]&amp;val[3]=&amp;val[4]=four&amp;val[5][0]=n1&amp;val[5][1]=n2&amp;val[5][2]=n3&amp;key=val\", {array:true});\n// Result\n{\n    val: [\n        'zero',\n        'one',\n        true,\n        '',\n        'four',\n        [ 'n1', 'n2', 'n3' ]\n    ]\n    key: 'val'\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kevin Cox",
                        "user_id": 1166181
                    },
                    "score": 4
                },
                {
                    "body": "<p>The problem with top answer on that question is that it's not support params placed after #, but sometimes it's needed to get this value also. I modify the unswer to let it parse full query string with hash sign also</p>\n\n<pre><code>var getQueryStringData = function(name){\n        var result = null;\n        var regexS = \"[\\\\?&amp;#]\" + name + \"=([^&amp;#]*)\";\n        var regex = new RegExp(regexS);\n        var results = regex.exec('?'+window.location.href.split('?')[1]);\n        if(results != null){\n            result = decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n        }\n        return result;\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ph0en1x",
                        "user_id": 1888017
                    },
                    "score": 9
                },
                {
                    "body": "<p>I did small URL library for my needs here: <a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">https://github.com/Mikhus/jsurl</a></p>\n\n<p>It's more common way of manipulating the URLs in JavaScript, meanwhile it's really lightweight (minified and gzipped &lt; 1KB) and has very simple and clean API. And it does not need any other library to work.</p>\n\n<p>Regarding the initial question, it's very simply to do:</p>\n\n<pre><code>var u = new Url; // current document url\n// or\nvar u = new Url('http://user:pass@example.com:8080/some/path?foo=bar&amp;bar=baz#anchor');\n\n// looking for query string params\nalert( u.query.bar);\nalert( u.query.foo);\n\n// modifying query string params\nu.query.foo = 'bla';\nu.query.woo = ['hi', 'hey']\n\nalert( u.query.foo);\nalert( u.query.woo);\nalert( u);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mikhus",
                        "user_id": 1236700
                    },
                    "score": 3
                },
                {
                    "body": "<p>If you are using Browserify you can use the <code>url</code> module from Node.js:</p>\n\n<pre><code>var url = require('url');\n\nurl.parse('http://example.com/?bob=123', true).query;\n// returns { \"bob\": \"123\" }\n</code></pre>\n\n<p>Further reading: <a href=\"http://nodejs.org/api/url.html\" rel=\"nofollow\">http://nodejs.org/api/url.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "najamkhn",
                        "user_id": 1166675
                    },
                    "score": 8
                },
                {
                    "body": "<p>If you do not wish to use a Javascript library you can use the Javascript string functions to parse window.location. Keep this code in an external .js file and you can use it over and over again in different projects. </p>\n\n<pre><code>// Example - window.location = \"index.htm?name=bob\";\n\nvar value = getParameterValue(\"name\");\n\nalert(\"name = \" + value);\n\nfunction getParameterValue(param)\n{\n     var url = window.location;\n     var parts = url.split('?');\n     var params = parts[1].split('&amp;');\n     var val = \"\";\n\n     for ( var i=0; i&lt;params.length; i++)\n     {\n          var paramNameVal = params[i].split('=');\n\n          if ( paramNameVal[0] == param )\n          {\n              val = paramNameVal[1];\n          }\n     }\n\n     return val;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Robert Bolton",
                        "user_id": 1382955
                    },
                    "score": 2
                },
                {
                    "body": "<p>see this <a href=\"http://www.darlesson.com/jquery/querystring/\" rel=\"nofollow\">post</a>  or use this</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n$(document).ready(function()\n{\n    var urlParams = {};\n    (function () \n    {\n        var match,\n        pl= /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&amp;=]+)=?([^&amp;]*)/g,\n        decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n        query  = window.location.search.substring(1);\n\n        while (match = search.exec(query))\n        urlParams[decode(match[1])] = decode(match[2]);\n    })();\n\n    if( urlParams[\"q1\"] === 1 )\n    {\n        return 1;\n    }\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "soheil bijavar",
                        "user_id": 1743326
                    },
                    "score": 1
                },
                {
                    "body": "<p>I recommend <a href=\"http://www.darlesson.com/jquery/querystring/\" rel=\"nofollow\">Dar Lessons</a> as a good plugin. I have worked with it fo  a long time. You can also use the following code.\nJus put var queryObj = {}; before document.ready and put the bellow code in the beginning of document.ready. After this code you can use queryObj[\"queryObjectName\"] for any query object you have</p>\n\n<pre><code>var querystring = location.search.replace('?', '').split('&amp;');\nfor (var i = 0; i &lt; querystring.length; i++) {\n    var name = querystring[i].split('=')[0];\n    var value = querystring[i].split('=')[1];\n    queryObj[name] = value;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "farnoush resa",
                        "user_id": 2044399
                    },
                    "score": 1
                },
                {
                    "body": "<blockquote>\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n    $(document).ready(function()\n    {\n        var urlParams = {};\n        (function () \n        {\n            var match,\n            pl= /\\+/g,  // Regex for replacing addition symbol with a space\n            search = /([^&amp;=]+)=?([^&amp;]*)/g,\n            decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n            query  = window.location.search.substring(1);\n\n            while (match = search.exec(query))\n            urlParams[decode(match[1])] = decode(match[2]);\n        })();\n         if( urlParams[\"q1\"]=== 1 )\n        { return 1; }\n});  \n</code></pre>\n  \n  <p></p>\n  \n  <p>Please check and let me know your comments.</p>\n</blockquote>\n\n<p>Also Refer : <code>http://jquerybyexample.blogspot.com/2012/05/how-to-get-querystring-value-using.html</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pushkraj",
                        "user_id": 1878198
                    },
                    "score": 1
                },
                {
                    "body": "<p>There's a robust implementation in Node.js's source<br>\n<a href=\"https://github.com/joyent/node/blob/master/lib/querystring.js\" rel=\"nofollow\">https://github.com/joyent/node/blob/master/lib/querystring.js</a>  </p>\n\n<p>Also TJ's qs does nested params parsing<br>\n<a href=\"https://github.com/visionmedia/node-querystring\" rel=\"nofollow\">https://github.com/visionmedia/node-querystring</a>  </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "clyfe",
                        "user_id": 283608
                    },
                    "score": 3
                },
                {
                    "body": "<pre><code>var getUrlParameters = function (name, url) {\n    if (!name) {\n        return undefined;\n    }\n\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    url = url || location.search;\n\n    var regex = new RegExp('[\\\\?&amp;#]' + name + '=?([^&amp;#]*)', 'gi'), result, resultList = [];\n\n    while (result = regex.exec(url)) {\n        resultList.push(decodeURIComponent(result[1].replace(/\\+/g, ' ')));\n    }\n\n    return resultList.length ? resultList.length === 1 ? resultList[0] : resultList : undefined;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "kayz1",
                        "user_id": 1127843
                    },
                    "score": 3
                },
                {
                    "body": "<p>I used this code (JavaScript) to get the what is passed through the URL:</p>\n\n<pre><code>function getUrlVars() {\n            var vars = {};\n            var parts = window.location.href.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\n                vars[key] = value;\n            });\n            return vars;\n        }\n</code></pre>\n\n<p>Then to assign the value to a variable, you only have to specify which parameter you want to get, ie if the URL is <code>example.com/?I=1&amp;p=2&amp;f=3</code></p>\n\n<p>You can do this to get the values:</p>\n\n<pre><code>var getI = getUrlVars()[\"I\"];\nvar getP = getUrlVars()[\"p\"];\nvar getF = getUrlVars()[\"f\"];\n</code></pre>\n\n<p>then the values would be:</p>\n\n<pre><code>getI = 1, getP = 2 and getF = 3\n</code></pre>\n\n<p>Thanks,\nJosh</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2579312"
                    },
                    "score": 2
                },
                {
                    "body": "<p>There are many solutions to retrieve URI query values, I prefer this one because it's short and works great:</p>\n\n<pre><code>function get(name){\n   if(name=(new RegExp('[?&amp;]'+encodeURIComponent(name)+'=([^&amp;]*)')).exec(location.search))\n      return decodeURIComponent(name[1]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BlueMark",
                        "user_id": 212345
                    },
                    "score": 2
                },
                {
                    "body": "<p>This is very simple method to get parameter value(query string)</p>\n\n<p>Use gV(para_name) function to retrieve its value</p>\n\n<pre><code>var a=window.location.search;\na=a.replace(a.charAt(0),\"\"); //Removes '?'\na=a.split(\"&amp;\");\n\nfunction gV(x){\n for(i=0;i&lt;a.length;i++){\n  var b=a[i].substr(0,a[i].indexOf(\"=\"));\n  if(x==b){\n   return a[i].substr(a[i].indexOf(\"=\")+1,a[i].length)}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ankit_Shah55",
                        "user_id": 1761066
                    },
                    "score": 1
                },
                {
                    "body": "<p>We've just released <a href=\"https://github.com/stretchr/arg.js\">arg.js</a>, a project aimed at solving this problem once and for all.  It's traditionally been so difficult but now you can do:</p>\n\n<pre><code>var name = Arg.get(\"name\");\n</code></pre>\n\n<p>or getting the whole lot:</p>\n\n<pre><code>var params = Arg.all();\n</code></pre>\n\n<p>and if you care about the difference between <code>?query=true</code> and <code>#hash=true</code> then you can use the <code>Arg.query()</code> and <code>Arg.hash()</code> methods.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mat Ryer",
                        "user_id": 117601
                    },
                    "score": 14
                },
                {
                    "body": "<p>Not to beat a dead horse, but if you have <a href=\"http://documentcloud.github.io/underscore/#object\" rel=\"nofollow\">underscore</a> or <a href=\"http://lodash.com/docs#zipObject\" rel=\"nofollow\">lodash</a>, a quick and dirty way to get this done is:</p>\n\n<pre><code>_.object(window.location.search.slice(1).split('&amp;').map(function (val) { return val.split('='); }));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "acjay",
                        "user_id": 807674
                    },
                    "score": 4
                },
                {
                    "body": "<h1><em>tl;dr</em></h1>\n\n<p>A quick, complete solution, which handles <strong>multivalued keys</strong> and <strong>encoded characters</strong>.</p>\n\n<pre><code>var qd = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {var k = item.split(\"=\")[0], v = decodeURIComponent(item.split(\"=\")[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v,]})\n</code></pre>\n\n<p>example:</p>\n\n<pre><code>\"?a=1&amp;b=2&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n&gt; qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"2\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=st\u00e5le&amp;car=saab\"]\n</code></pre>\n\n<p>...\u00a0</p>\n\n<h1>Read more... about the vanilla JavaScript solution</h1>\n\n<p><em>To access different parts of url use <code>location.(search|hash)</code></em></p>\n\n<h2>easiest (dummy) solution</h2>\n\n<pre><code>var queryDict = {}\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n</code></pre>\n\n<ul>\n<li>Handles <b>empty keys</b> correctly.</li>\n<li>Overrides <b>multi-keys</b> with <b>last</b> value found.</li>\n</ul>\n\n<pre><code>\"?a=1&amp;b=2&amp;c=3&amp;d&amp;e&amp;a=5\"\n&gt; queryDict\na: \"5\"\nb: \"2\"\nc: \"3\"\nd: undefined\ne: undefined\n</code></pre>\n\n<h2>multi-valued keys</h2>\n\n<p>Simple key check <code>(item in dict) ? dict.item.push(val) : dict.item = [val,]</code></p>\n\n<pre><code>var qd = {}\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {(item.split(\"=\")[0] in qd) ? qd[item.split(\"=\")[0]].push(item.split(\"=\")[1]) : qd[item.split(\"=\")[0]] = [item.split(\"=\")[1],]})\n</code></pre>\n\n<ul>\n<li>Now returns <b>arrays</b> instead.</li>\n<li>Access values by <code>qd.key[index]</code> or <code>qd[key][index]</code></li>\n</ul>\n\n<pre><code>&gt; qd\na: [\"1\", \"5\"]\nb: [\"2\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined]\n\n&gt; qd.a[1]    // \"5\"\n&gt; qd[\"a\"][1] // \"5\"\n</code></pre>\n\n<h2>encoded characters?</h2>\n\n<p>Enclose the <code>item.split(\"=\")[1]</code> by <code>decodeURIComponent(item.split(\"=\")[1])</code><br>\n<em>(as shown at the top)</em></p>\n\n<pre><code>\"?a=1&amp;b=2&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n&gt; qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"2\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=st\u00e5le&amp;car=saab\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Qwerty",
                        "user_id": 985454
                    },
                    "score": 43
                },
                {
                    "body": "<p>Doing this reliably is more involved than one may think at first.</p>\n\n<ol>\n<li><code>location.search</code>, which is used in other answers, is brittle and\nshould be avoided - for example, it returns empty if someone screws\nup and puts a <code>#fragment</code> identifier before the <code>?query</code> string.</li>\n<li>There are a number of ways URLs get automatically escaped in the\nbrowser, which makes <code>decodeURIComponent</code> pretty much mandatory, in\nmy opinion.</li>\n<li>Many query strings are generated from user input, which means\nassumptions about the URL content are very bad. Including very basic\nthings like that each key is unique or even has a value.</li>\n</ol>\n\n<p>To solve this, here is a configurable API with a healthy dose of <a href=\"http://en.wikipedia.org/wiki/Defensive_programming\" rel=\"nofollow\" title=\"Wiki article on programming with less assumptions.\">defensive programming</a>. Note that it can be made half the size if you are willing to hardcode some of the variables, or if the input can never include <code>hasOwnProperty</code>, etc.</p>\n\n<p><strong>Version 1:</strong> Returns a data object with names and values for each parameter. It effectively de-duplicates them and always respects the first one found from left-to-right.</p>\n\n<pre><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {\n\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\n\n    if (!url || typeof url !== 'string') {\n        url = location.href; // more robust than location.search, which is flaky\n    }\n    if (!paramKey || typeof paramKey !== 'string') {\n        paramKey = '&amp;';\n    }\n    if (!pairKey || typeof pairKey !== 'string') {\n        pairKey = '=';\n    }\n    // when you do not explicitly tell the API...\n    if (arguments.length &lt; 5) {\n        // it will unescape parameter keys and values by default...\n        decode = true;\n    }\n\n    queryStart = url.indexOf('?');\n    if (queryStart &gt;= 0) {\n        // grab everything after the very first ? question mark...\n        query = url.substring(queryStart + 1);\n    }\n    else {\n        // assume the input is already parameter data...\n        query = url;\n    }\n    // remove fragment identifiers...\n    fragStart = query.indexOf('#');\n    if (fragStart &gt;= 0) {\n        // remove everything after the first # hash mark...\n        query = query.substring(0, fragStart);\n    }\n    // make sure at this point we have enough material to do something useful...\n    if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\n        // we no longer need the whole query, so get the parameters...\n        query = query.split(paramKey);\n        result = {};\n        // loop through the parameters...\n        for (i = 0, len = query.length; i &lt; len; i = i + 1) {\n            pairKeyStart = query[i].indexOf(pairKey);\n            if (pairKeyStart &gt;= 0) {\n                name = query[i].substring(0, pairKeyStart);\n            }\n            else {\n                name = query[i];\n            }\n            // only continue for non-empty names that we have not seen before...\n            if (name &amp;&amp; !Object.prototype.hasOwnProperty.call(result, name)) {\n                if (decode) {\n                    // unescape characters with special meaning like ? and #\n                    name = decodeURIComponent(name);\n                }\n                if (pairKeyStart &gt;= 0) {\n                    value = query[i].substring(pairKeyStart + 1);\n                    if (value) {\n                        if (decode) {\n                            value = decodeURIComponent(value);\n                        }\n                    }\n                    else {\n                        value = missingValue;\n                    }\n                }\n                else {\n                    value = missingValue;\n                }\n                result[name] = value;\n            }\n        }\n        return result;\n    }\n}\n</code></pre>\n\n<p><strong>Version 2:</strong> Returns a data map object with two identical length arrays, one for names and one for values, with an index for each parameter. This one supports duplicate names and intentionally does not de-duplicate them, because that is probably why you would want to use this format.</p>\n\n<pre><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {\n\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\n\n    if (!url || typeof url !== 'string') {\n        url = location.href; // more robust than location.search, which is flaky\n    }\n    if (!paramKey || typeof paramKey !== 'string') {\n        paramKey = '&amp;';\n    }\n    if (!pairKey || typeof pairKey !== 'string') {\n        pairKey = '=';\n    }\n    // when you do not explicitly tell the API...\n    if (arguments.length &lt; 5) {\n        // it will unescape parameter keys and values by default...\n        decode = true;\n    }\n\n    queryStart = url.indexOf('?');\n    if (queryStart &gt;= 0) {\n        // grab everything after the very first ? question mark...\n        query = url.substring(queryStart + 1);\n    }\n    else {\n        // assume the input is already parameter data...\n        query = url;\n    }\n    // remove fragment identifiers...\n    fragStart = query.indexOf('#');\n    if (fragStart &gt;= 0) {\n        // remove everything after the first # hash mark...\n        query = query.substring(0, fragStart);\n    }\n    // make sure at this point we have enough material to do something useful...\n    if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\n        // we no longer need the whole query, so get the parameters...\n        query = query.split(paramKey);\n        result = {\n            names  : [],\n            values : []\n        };\n        // loop through the parameters...\n        for (i = 0, len = query.length; i &lt; len; i = i + 1) {\n            pairKeyStart = query[i].indexOf(pairKey);\n            if (pairKeyStart &gt;= 0) {\n                name = query[i].substring(0, pairKeyStart);\n            }\n            else {\n                name = query[i];\n            }\n            // only continue for non-empty names...\n            if (name) {\n                if (decode) {\n                    // unescape characters with special meaning like ? and #\n                    name = decodeURIComponent(name);\n                }\n                if (pairKeyStart &gt;= 0) {\n                    value = query[i].substring(pairKeyStart + 1);\n                    if (value) {\n                        if (decode) {\n                            value = decodeURIComponent(value);\n                        }\n                    }\n                    else {\n                        value = missingValue;\n                    }\n                }\n                else {\n                    value = missingValue;\n                }\n                result.names.push(name);\n                result.values.push(value);\n            }\n        }\n        return result;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Seth Holladay",
                        "user_id": 2990144
                    },
                    "score": -2
                },
                {
                    "body": "<p>This will parse variables <strong>AND</strong> arrays from a URL string. It uses neither <em>regex</em> or any external library.</p>\n\n<pre><code>function url2json(url) {\n   var obj={};\n   function arr_vals(arr){\n      if (arr.indexOf(',') &gt; 1){\n         var vals = arr.slice(1, -1).split(',');\n         var arr = [];\n         for (var i = 0; i &lt; vals.length; i++)\n            arr[i]=vals[i];\n         return arr;\n      }\n      else\n         return arr.slice(1, -1);\n   }\n   function eval_var(avar){\n      if (!avar[1])\n          obj[avar[0]] = '';\n      else\n      if (avar[1].indexOf('[') == 0)\n         obj[avar[0]] = arr_vals(avar[1]);\n      else\n         obj[avar[0]] = avar[1];\n   }\n   if (url.indexOf('?') &gt; -1){\n      var params = url.split('?')[1];\n      if(params.indexOf('&amp;') &gt; 2){\n         var vars = params.split('&amp;');\n         for (var i in vars)\n            eval_var(vars[i].split('='));\n      }\n      else\n         eval_var(params.split('='));\n   }\n   return obj;\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var url = \"http://www.x.com?luckyNums=[31,21,6]&amp;name=John&amp;favFoods=[pizza]&amp;noVal\"\nconsole.log(url2json(url));\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[object]\n   noVal: \"\"\n   favFoods: \"pizza\"\n   name:     \"John\"\n   luckyNums:\n      0: \"31\"\n      1: \"21\"\n      2: \"6\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pithikos",
                        "user_id": 474563
                    },
                    "score": 1
                },
                {
                    "body": "<p>this will work.. You  need call this function where you need get the parameter by passing  its name.. </p>\n\n<pre><code>function getParameterByName(name)\n{\n\n  name = name.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n  var regexS = \"[\\\\?&amp;]\"+name+\"=([^&amp;#]*)\";\n  var regex = new RegExp( regexS );\n  var results = regex.exec( window.location.href );\n  alert(results[1]);\n  if( results == null )\n    return \"\";\n  else\n    return results[1];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sonorita",
                        "user_id": 1002530
                    },
                    "score": 1
                },
                {
                    "body": "<p><strong>Get all querystring parameters including checkbox values (arrays).</strong></p>\n\n<p>Considering the a correct &amp; normal use of GET parameters the things i see it's missing, on most functions, is the support for arrays and removing the hash data</p>\n\n<p>So i wrote this function</p>\n\n<pre><code>function qs(a){\n if(!a)return {};\n a=a.split('#')[0].split('&amp;');\n var b=a.length,c={},d,k,v;\n while(b--){\n  d=a[b].split('=');\n  k=d[0].replace('[]',''),v=decodeURIComponent(d[1]||'');\n  c[k]?typeof c[k]==='string'?(c[k]=[v,c[k]]):(c[k].unshift(v)):c[k]=v;\n }\n return c\n}\n</code></pre>\n\n<p>Using shorthand operators &amp; while-- loop the performance should be very good to.</p>\n\n<p><strong>Support:</strong> </p>\n\n<ol>\n<li>empty values (<em>key= / key</em>)</li>\n<li>key value (<em>key=value</em>)</li>\n<li>arrays (<em>key[]=value</em>)</li>\n<li>hash (<em>the hash tag is split out</em>)</li>\n</ol>\n\n<p><strong>Notes:</strong></p>\n\n<p>It does not support object arrays (key[key]=value)</p>\n\n<p>If the space is + it remains a +.</p>\n\n<p>add <code>.replace(/\\+/g, \" \")</code> if you need.</p>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>qs('array[]=1&amp;array[]=2&amp;key=value&amp;empty=&amp;empty2#hash')\n</code></pre>\n\n<p><strong>Return:</strong></p>\n\n<pre><code>{\n    \"empty\": \"\",\n    \"key\": \"value\",\n    \"array\": [\n        \"1\",\n        \"2\"\n    ]\n}\n</code></pre>\n\n<p><strong>Demo:</strong></p>\n\n<p><a href=\"http://jsfiddle.net/ZQMrt/1/\">http://jsfiddle.net/ZQMrt/1/</a></p>\n\n<p><strong>Info</strong></p>\n\n<p>If you don't understand something or you can't read the function just ask i'm happy to explain what i did here.</p>\n\n<p><em>If you think the function is unreadable and unmanainable i'm happy to rewrite the function for you , but consider that shorthand &amp; bitwise operators are always faster than a standard syntax (mybe read about shorthands and bitwise operators in the ECMA-262 book or us your favorite searchengine).Rewriting the code in a standard readable syntax means performance loss.</em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cocco",
                        "user_id": 2450730
                    },
                    "score": 6
                },
                {
                    "body": "<p>Simple Solution with Plain JS and Regex</p>\n\n<pre><code>alert(getQueryString(\"p2\"));\n\nfunction getQueryString (Param) {\n      return decodeURI(\"http://www.example.com/?p1=p11&amp;p2=p2222\".replace(new RegExp(\"^(?:.*[&amp;?]\" + encodeURI(Param).replace(/[.+*]/g, \"$&amp;\") + \"(?:=([^&amp;]*))?)?.*$\", \"i\"), \"$1\"));\n    }\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/QeLF3/\" rel=\"nofollow\">JsFiddle</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sai",
                        "user_id": 1439176
                    },
                    "score": 1
                },
                {
                    "body": "<p>This didn't work for me, I want to match `?b' as the 'b' parameter is present, and not match '?return' as the 'r' parameter, here is <a href=\"https://gist.github.com/Dorian/833b37d2c7b168b7e94c\" rel=\"nofollow\">my solution</a>.</p>\n\n<pre><code>window.query_param = function(name) {\n  var param_value, params;\n\n  params = location.search.replace(/^\\?/, '');\n  params = _.map(params.split('&amp;'), function(s) {\n    return s.split('=');\n  });\n\n  param_value = _.select(params, function(s) {\n    return s.first === name;\n  })[0];\n\n  if (param_value) {\n    return decodeURIComponent(param_value[1] || '');\n  } else {\n    return null;\n  }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dorian",
                        "user_id": 407213
                    },
                    "score": 1
                },
                {
                    "body": "<p>The shortest possible expression in terms of size to obtain a query object seems to be:</p>\n\n<pre><code>var params = {};\nlocation.search.substr(1).replace(/([^&amp;=]*)=([^&amp;]*)&amp;?/g,\n  function () { params[decodeURIComponent(arguments[1])] = decodeURIComponent(arguments[2]); });\n</code></pre>\n\n<p>You can make use of the <code>A</code> element to parse a URI from a string into its <code>location</code>-like components (to get rid of <code>#...</code>, for example):</p>\n\n<pre><code>var a = document.createElement('a');\na.href = url;\n// Parse a.search.substr(1)... as above\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Filip Dal&#252;ge",
                        "user_id": 449012
                    },
                    "score": 1
                },
                {
                    "body": "<p>quick, easy, and fast:</p>\n\n<p><strong>The Function:</strong></p>\n\n<pre><code>    function getUrlVar() {\n        var result = {};\n        var location = window.location.href.split('#');\n        var parts = location[0].replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\n            result [key] = value;\n        });\n    return result ;\n    }\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>var varRequest = getUrlVar()[\"theUrlVarName\"];\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Shlomi Hassid",
                        "user_id": 1486486
                    },
                    "score": 2
                },
                {
                    "body": "<p>For those who wants a short method (with limitations):</p>\n\n<pre><code>location.search.split('myParameter=')[1]\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "George",
                        "user_id": 1140227
                    },
                    "score": 6
                },
                {
                    "body": "<p>Here is String prototype implementation:</p>\n\n<pre><code>String.prototype.getParam = function( str ){\n    str = str.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n    var regex = new RegExp( \"[\\\\?&amp;]*\"+str+\"=([^&amp;#]*)\" );    \n    var results = regex.exec( this );\n    if( results == null ){\n        return \"\";\n    } else {\n        return results[1];\n    }\n}\n</code></pre>\n\n<p>Example call:</p>\n\n<pre><code>var status = str.getParam(\"status\")\n</code></pre>\n\n<p><code>str</code> can be a query string or url</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "krisrak",
                        "user_id": 423089
                    },
                    "score": 2
                },
                {
                    "body": "<p>Here's an extended version of Andy E's linked \"Handle array-style query strings\"-version. Fixed a bug (<code>?key=1&amp;key[]=2&amp;key[]=3</code>; <code>1</code> is lost and replaced with <code>[2,3]</code>), made a few minor performance improvements (re-decoding of values, recalculating \"[\" position, etc.) and added a number of improvements (functionalized, support for <code>?key=1&amp;key=2</code>, support for <code>;</code> delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused <code>v</code> within the local functions, sorry if that is confusing ;).</p>\n\n<p>It will handle the following querystring...</p>\n\n<blockquote>\n  <p>?test=Hello&amp;person=neek&amp;person[]=jeff&amp;person[]=jim&amp;person[extra]=john&amp;test3&amp;nocache=1398914891264</p>\n</blockquote>\n\n<p>...making it into an object that looks like...</p>\n\n<pre><code>{\n    \"test\": \"Hello\",\n    \"person\": {\n        \"0\": \"neek\",\n        \"1\": \"jeff\",\n        \"2\": \"jim\",\n        \"length\": 3,\n        \"extra\": \"john\"\n    },\n    \"test3\": \"\",\n    \"nocache\": \"1398914891264\"\n}\n</code></pre>\n\n<p>As you can see above, this version handles some measure of \"malformed\" arrays, i.e. - <code>person=neek&amp;person[]=jeff&amp;person[]=jim</code> or <code>person=neek&amp;person=jeff&amp;person=jim</code> as the key is identifiable and valid (at least in dotNet's <a href=\"http://msdn.microsoft.com/en-us/library/xsc9a449.aspx\">NameValueCollection.Add</a>):</p>\n\n<blockquote>\n  <p>If the specified key already exists in the target NameValueCollection\n  instance, the specified value is added to the existing comma-separated\n  list of values in the form \"value1,value2,value3\".</p>\n</blockquote>\n\n<p>It seems <a href=\"http://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">the jury is somewhat out</a> on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I <strong>do not</strong> process values based on commas into arrays.</p>\n\n<p><strong>The code:</strong></p>\n\n<pre><code>getQueryStringKey = function(key) {\n    return getQueryStringAsObject()[key];\n};\n\n\ngetQueryStringAsObject = function() {\n    var b, cv, e, k, ma, sk, v, r = {},\n        d = function (v) { return decodeURIComponent(v).replace(/\\+/g, \" \"); }, //# d(ecode) the v(alue)\n        q = window.location.search.substring(1),\n        s = /([^&amp;;=]+)=?([^&amp;;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&amp;=]+)=?([^&amp;]*)/g\n    ;\n\n    //# ma(make array) out of the v(alue)\n    ma = function(v) {\n        //# If the passed v(alue) hasn't been setup as an object\n        if (typeof v != \"object\") {\n            //# Grab the cv(current value) then setup the v(alue) as an object\n            cv = v;\n            v = {};\n            v.length = 0;\n\n            //# If there was a cv(current value), .push it into the new v(alue)'s array\n            //#     NOTE: This may or may not be 100% logical to do... but it's better than loosing the original value\n            if (cv) { Array.prototype.push.call(v, cv); }\n        }\n        return v;\n    };\n\n    //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\n    while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\n        //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \n        b = e[1].indexOf(\"[\");\n        v = d(e[2]);\n\n        //# As long as this is NOT a hash[]-style key-value e(ntry)\n        if (b &lt; 0) { //# b == \"-1\"\n            //# d(ecode) the simple k(ey)\n            k = d(e[1]);\n\n            //# If the k(ey) already exists\n            if (r[k]) {\n                //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)'s array in the r(eturn value)\n                r[k] = ma(r[k]);\n                Array.prototype.push.call(r[k], v);\n            }\n            //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\n            else {\n                r[k] = v;\n            }\n        }\n        //# Else we've got ourselves a hash[]-style key-value e(ntry) \n        else {\n            //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\n            k = d(e[1].slice(0, b));\n            sk = d(e[1].slice(b + 1, e[1].indexOf(\"]\", b)));\n\n            //# ma(make array) out of the k(ey) \n            r[k] = ma(r[k]);\n\n            //# If we have a sk(sub-key), plug the v(alue) into it\n            if (sk) { r[k][sk] = v; }\n            //# Else .push the v(alue) into the k(ey)'s array\n            else { Array.prototype.push.call(r[k], v); }\n        }\n    }\n\n    //# Return the r(eturn value)\n    return r;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Campbeln",
                        "user_id": 235704
                    },
                    "score": 13
                },
                {
                    "body": "<p>Amazing how many overly complicated and incomplete solutions are posted here. Here's what I'm using:</p>\n\n<pre><code>/**\n * Returns a bare object of the URL's query parameters.\n * You can pass just a query string rather than a complete URL.\n * The default URL is the current page.\n */\nfunction getUrlParams (url) {\n    // http://stackoverflow.com/a/23946023/2407309\n    if (typeof url == 'undefined') {\n        url = window.location.search\n    }\n    var url = url.split('#')[0] // Discard fragment identifier.\n    var urlParams = {}\n    var queryString = url.split('?')[1]\n    if (!queryString) {\n        if (url.search('=') !== false) {\n            queryString = url\n        }\n    }\n    if (queryString) {\n        var keyValuePairs = queryString.split('&amp;')\n        for (var i = 0; i &lt; keyValuePairs.length; i++) {\n            var keyValuePair = keyValuePairs[i].split('=')\n            var paramName = keyValuePair[0]\n            var paramValue = keyValuePair[1] || ''\n            urlParams[paramName] = decodeURIComponent(paramValue.replace(/\\+/g, ' '))\n        }\n    }\n    return urlParams\n} // getUrlParams\n</code></pre>\n\n<p>Works with following URLs (values of <code>getUrlParams()['test']</code> in parens):</p>\n\n<pre><code>example.com                         (undefined)\nexample.com?                        (undefined)\nexample.com?test                    (empty string)\nexample.com?test=                   (empty string)\nexample.com?test=0                  (the string '0')\nexample.com?test=0&amp;test=override    (the string 'override')\n</code></pre>\n\n<p>Returning 'override' rather than '0' in the last case makes it consistent with PHP. Works in IE7.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vladimir Kornea",
                        "user_id": 2407309
                    },
                    "score": 8
                },
                {
                    "body": "<p>Most pretty but basic:</p>\n\n<pre><code>data = {};\n$.each(\n    location.search.substr(1).split('&amp;').filter(Boolean).map(function(kvpairs){\n        return kvpairs.split('=')\n    }),\n    function(i,values) {\n        data[values.shift()] = values.join('=')\n    }\n);\n</code></pre>\n\n<p>It doesn't handle values lists such as <code>?a[]=1&amp;a[]2</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Damien",
                        "user_id": 1300775
                    },
                    "score": 4
                },
                {
                    "body": "<pre><code>var EmployeeID = getQueryVariable(\"EmployeesIDs\");\n\nfunction getQueryVariable(variable) {\n\n        var query = window.location.search.substring(1);\n            var vars = query.split(\"&amp;\");\n            for (var i = 0; i &lt; vars.length; i++) {\n                var pair = vars[i].split(\"=\");\n                if (pair[0] == variable) {\n                    return pair[1];\n                }\n            }\n\n            return (false);\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Muhammad Hisham",
                        "user_id": 2390924
                    },
                    "score": -1
                },
                {
                    "body": "<pre><code>// Parse query string\nvar params = {}, queryString = location.hash.substring(1),\n    regex = /([^&amp;=]+)=([^&amp;]*)/g, m;\nwhile (m = regex.exec(queryString)) {\n    params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Konstantin Tarkus",
                        "user_id": 82686
                    },
                    "score": 0
                },
                {
                    "body": "<p>This function will return a parsed JavaScript object with any arbitrarily nested values using recursion as necessary.</p>\n\n<p>Here's a <a href=\"http://jsfiddle.net/WZHm5/\" rel=\"nofollow\">jsfiddle</a> example.</p>\n\n<pre><code>[\n  'a=a',\n  '&amp;b=a',\n  '&amp;b=b',\n  '&amp;c[]=a',\n  '&amp;c[]=b',\n  '&amp;d[a]=a',\n  '&amp;d[a]=x',\n  '&amp;e[a][]=a',\n  '&amp;e[a][]=b',\n  '&amp;f[a][b]=a',\n  '&amp;f[a][b]=x',\n  '&amp;g[a][b][]=a',\n  '&amp;g[a][b][]=b',\n  '&amp;h=%2B+%25'\n].join('');\n</code></pre>\n\n<p>Given any of the above test examples.</p>\n\n<pre><code>ls = function() {\n  var a, b, c, e;\n  a = {};\n  b = window.location.search.substring(1);\n  c = function(d) {\n    return d &amp;&amp; decodeURIComponent(d.replace(/\\+/g, ' '));\n  };\n  e = function(f, g, h) {\n    var i, j, k, l;\n    i = g.indexOf('[');\n    if (i !== -1) {\n      j = g.slice(0, i);\n      k = g.slice(1 + i).slice(0, g.slice(1 + i).indexOf(']'));\n      l = g.slice(1 + i).slice(1 + g.slice(1 + i).indexOf(']'));\n      if (k) {\n        if (typeof f[j] !== 'object') {\n          f[j] = {};\n        }\n        f[j][k] = l ? e(f[j], k + l, h) : h;\n      } else {\n        if (typeof f[j] !== 'object') {\n          f[j] = [];\n        }\n        f[j].push(h);\n      }\n      return f[j];\n    } else {\n      if (f.hasOwnProperty(g)) {\n        if (typeof f[g] === 'object') {\n          f[g].push(h);\n        } else {\n          f[g] = [].concat.apply([f[g]], [h]);\n        }\n      } else {\n        f[g] = h;\n      }\n      return f[g];\n    }\n  };\n  b.split('&amp;').forEach(function(m) {\n    e(a, c(m.split('=')[0]), c(m.split('=')[1]));\n  });\n  return a;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Peter T Bosse II",
                        "user_id": 1959421
                    },
                    "score": 0
                }
            ],
            "body": "<p>Is there a plugin-less way of retrieving <a href=\"http://en.wikipedia.org/wiki/Query_string\">query string</a> values via jQuery (or without)? </p>\n\n<p>If so, how? If not, is there a plugin which can do so?</p>\n",
            "last_activity_date": 1421751024,
            "owner": {
                "display_name": "Emin",
                "user_id": 49742
            },
            "question_id": 901115,
            "score": 2708,
            "tags": [
                "javascript",
                "jquery",
                "url",
                "plugins",
                "query-string"
            ],
            "title": "How can I get query string values in JavaScript?"
        },
        {
            "answer_count": 54,
            "answers": [
                {
                    "body": "<p><a href=\"http://blog.morrisjohns.com/javascript_closures_for_dummies.html\">JavaScript Closures For Dummies</a> (<a href=\"http://web.archive.org/web/20080209105120/http://blog.morrisjohns.com/javascript_closures_for_dummies\">mirror</a>) is the article that finally got me to understand closures. The explanation posted there is much better than anything I could write here.</p>\n\n<hr>\n\n<p>For archiving purposes, I (flying sheep) will put the article from the link below. The article was created by Morris and put under the Creative Commons Attribution / Share alike license, so I\u2019ll recreate it as close to the original as possible.</p>\n\n<h1>JavaScript Closures for Dummies</h1>\n\n<blockquote>Submitted by Morris on Tue, 2006-02-21 10:19. Community-edited since.</blockquote>\n\n<h2>Closures Are Not Magic</h2>\n\n<p>This page explains closures so that a programmer can understand them &mdash; using working JavaScript code. It is not for gurus or functional programmers.</p>\n\n<p>Closures are <em>not hard</em> to understand once the core concept is grokked. However, they are impossible to understand by reading any academic papers or academically oriented information about them!</p>\n\n<p>This article is intended for programmers with some programming experience in a mainstream language, and who can read the following JavaScript function:</p>\n\n<pre><code>function sayHello(name) {\n    var text = 'Hello ' + name;\n    var sayAlert = function() { alert(text); }\n    sayAlert();\n}\n</code></pre>\n\n<h2>An Example of a Closure</h2>\n\n<p>Two one sentence summaries:</p>\n\n<ul>\n<li>a closure is the local variables for a function &mdash; kept alive <em>after</em> the function has returned, or</li>\n<li>a closure is a stack-frame which is <em>not deallocated</em> when the function returns (as if a 'stack-frame' were malloc'ed instead of being on the stack!).</li>\n</ul>\n\n<p>The following code returns a reference to a function:</p>\n\n<pre><code>function sayHello2(name) {\n    var text = 'Hello ' + name; // Local variable\n    var sayAlert = function() { alert(text); }\n    return sayAlert;\n}\nsay2 = sayHello2('Bob');\nsay2(); // alerts \"Hello Bob\"\n</code></pre>\n\n<p>Most JavaScript programmers will understand how a reference to a function is returned to a variable in the above code. If you don't, then you need to before you can learn closures. A C programmer would think of the function as returning a pointer to a function, and that the variables <code>sayAlert</code> and <code>say2</code> were each a pointer to a function.</p>\n\n<p>There is a critical difference between a C pointer to a function and a JavaScript reference to a function. In JavaScript, you can think of a function reference variable as having both a pointer to a function <em>as well</em> as a hidden pointer to a closure.</p>\n\n<p>The above code has a closure because the anonymous function <code>function() { alert(text); }</code> is declared <em>inside</em> another function, <code>sayHello2()</code> in this example. In JavaScript, if you use the <code>function</code> keyword inside another function, you are creating a closure.</p>\n\n<p>In C, and most other common languages <em>after</em> a function returns, all the local variables are no longer accessible because the stack-frame is destroyed.</p>\n\n<p>In JavaScript, if you declare a function within another function, then the local variables can remain accessible after returning from the function you called. This is demonstrated above, because we call the function <code>say2()</code> after we have returned from <code>sayHello2()</code>. Notice that the code that we call references the variable <code>text</code>, which was a <em>local variable</em> of the function <code>sayHello2()</code>.</p>\n\n<pre><code>function() { alert(text); } // Output of say2.toString();\n</code></pre>\n\n<p>Click the button above to get JavaScript to print out the code for the anonymous function. You can see that the code refers to the variable text. The anonymous function can reference text which holds the value <code>'Bob'</code> because the local variables of <code>sayHello2()</code> are kept in a closure.</p>\n\n<p>The magic is that in JavaScript a function reference also has a secret reference to the closure it was created in &mdash; similar to how delegates are a method pointer plus a secret reference to an object.</p>\n\n<h2>More examples</h2>\n\n<p>For some reason, closures seem really hard to understand when you read about them, but when you see some examples you can click to how they work (it took me a while).\nI recommend working through the examples carefully until you understand how they work. If you start using closures without fully understanding how they work, you would soon create some very weird bugs!</p>\n\n<h3>Example 3</h3>\n\n<p>This example shows that the local variables are not copied &mdash; they are kept by reference. It is kind of like keeping a stack-frame in memory when the outer function exits!</p>\n\n<pre><code>function say667() {\n    // Local variable that ends up within closure\n    var num = 666;\n    var sayAlert = function() { alert(num); }\n    num++;\n    return sayAlert;\n}\nvar sayNumber = say667();\nsayNumber(); // alerts 667\n</code></pre>\n\n<h3>Example 4</h3>\n\n<p>All three global functions have a common reference to the <em>same</em> closure because they are all declared within a single call to <code>setupSomeGlobals()</code>.</p>\n\n<pre><code>function setupSomeGlobals() {\n    // Local variable that ends up within closure\n    var num = 666;\n    // Store some references to functions as global variables\n    gAlertNumber = function() { alert(num); }\n    gIncreaseNumber = function() { num++; }\n    gSetNumber = function(x) { num = x; }\n}\n\nsetupSomeGlobals();\ngIncreaseNumber();\ngAlertNumber(); // 667\ngSetNumber(5);\ngAlertNumber(); // 5\n\nvar oldAlert = gAlertNumber;\n\nsetupSomeGlobals();\ngAlertNumber(); // 666\n\noldAlert() // 5\n</code></pre>\n\n<p>The three functions have shared access to the same closure &mdash; the local variables of <code>setupSomeGlobals()</code> when the three functions were defined.</p>\n\n<p>Note that in the above example, if you call <code>setupSomeGlobals()</code> again, then a new closure (stack-frame!) is created. The old <code>gAlertNumber</code>, <code>gIncreaseNumber</code>, <code>gSetNumber</code> variables are overwritten with <em>new</em> functions that have the new closure. (In JavaScript, whenever you declare a function inside another function, the inside function(s) is/are recreated again <em>each</em> time the outside function is called.)</p>\n\n<h3>Example 5</h3>\n\n<p>This one is a real gotcha for many people, so you need to understand it. Be very careful if you are defining a function within a loop: the local variables from the closure do not act as you might first think.</p>\n\n<pre><code>function buildList(list) {\n    var result = [];\n    for (var i = 0; i &lt; list.length; i++) {\n        var item = 'item' + list[i];\n        result.push( function() {alert(item + ' ' + list[i])} );\n    }\n    return result;\n}\n\nfunction testList() {\n    var fnlist = buildList([1,2,3]);\n    // Using j only to help prevent confusion -- could use i.\n    for (var j = 0; j &lt; fnlist.length; j++) {\n        fnlist[j]();\n    }\n}\n</code></pre>\n\n<p>The line <code>result.push( function() {alert(item + ' ' + list[i])}</code> adds a reference to an anonymous function three times to the result array. If you are not so familiar with anonymous functions think of it like:</p>\n\n<pre><code>pointer = function() {alert(item + ' ' + list[i])};\nresult.push(pointer);\n</code></pre>\n\n<p>Note that when you run the example, <code>\"item3 undefined\"</code> is alerted three times! This is because just like previous examples, there is only one closure for the local variables for <code>buildList</code>. When the anonymous functions are called on the line <code>fnlist[j]()</code>; they all use the same single closure, and they use the current value for <code>i</code> and <code>item</code> within that one closure (where <code>i</code> has a value of <code>3</code> because the loop had completed, and <code>item</code> has a value of <code>'item3'</code>).</p>\n\n<h3>Example 6</h3>\n\n<p>This example shows that the closure contains any local variables that were declared inside the outer function before it exited. Note that the variable <code>alice</code> is actually declared after the anonymous function. The anonymous function is declared first; and when that function is called it can access the <code>alice</code> variable because <code>alice</code> is in the same scope (JavaScript does <a href=\"http://stackoverflow.com/a/3725763/1269037\">variable hoisting</a>).\nAlso <code>sayAlice()()</code> just directly calls the function reference returned from <code>sayAlice()</code> &mdash; it is exactly the same as what was done previously, but without the temporary variable.</p>\n\n<pre><code>function sayAlice() {\n    var sayAlert = function() { alert(alice); }\n    // Local variable that ends up within closure\n    var alice = 'Hello Alice';\n    return sayAlert;\n}\nsayAlice()();\n</code></pre>\n\n<p>Tricky: note also that the <code>sayAlert</code> variable is also inside the closure, and could be accessed by any other function that might be declared within <code>sayAlice()</code>, or it could be accessed recursively within the inside function.</p>\n\n<h3>Example 7</h3>\n\n<p>This final example shows that each call creates a separate closure for the local variables. There is <em>not</em> a single closure per function declaration. There is a closure for <em>each call</em> to a function.</p>\n\n<pre><code>function newClosure(someNum, someRef) {\n    // Local variables that end up within closure\n    var num = someNum;\n    var anArray = [1,2,3];\n    var ref = someRef;\n    return function(x) {\n        num += x;\n        anArray.push(num);\n        alert('num: ' + num +\n            '\\nanArray ' + anArray.toString() +\n            '\\nref.someVar ' + ref.someVar);\n      }\n}\nobj = {someVar: 4};\nfn1 = newClosure(4, obj);\nfn2 = newClosure(5, obj);\nfn1(1); // num: 5; anArray: 1,2,3,5; ref.someVar: 4;\nfn2(1); // num: 6; anArray: 1,2,3,6; ref.someVar: 4;\nobj.someVar++;\nfn1(2); // num: 7; anArray: 1,2,3,5,7; ref.someVar: 5;\nfn2(2); // num: 8; anArray: 1,2,3,6,8; ref.someVar: 5;\n</code></pre>\n\n<h2>Summary</h2>\n\n<p>If everything seems completely unclear then the best thing to do is to play with the examples. Reading an explanation is much harder than understanding examples.\nMy explanations of closures and stack-frames, etc. are not technically correct &mdash; they are gross simplifications intended to help understanding. Once the basic idea is grokked, you can pick up the details later.</p>\n\n<h2>Final points:</h2>\n\n<ul>\n<li>Whenever you use <code>function</code> inside another function, a closure is used.</li>\n<li>Whenever you use <code>eval()</code> inside a function, a closure is used. The text you <code>eval</code> can reference local variables of the function, and within <code>eval</code> you can even create new local variables by using <code>eval('var foo = \u2026')</code></li>\n<li>When you use <code>new Function(\u2026)</code> (the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\">Function constructor</a>) inside a function, it does not create a closure. (The new function cannot reference the local variables of the outer function.)</li>\n<li>A closure in JavaScript is like keeping a copy of all the local variables, just as they were when a function exited.</li>\n<li>It is probably best to think that a closure is always created just on entry to a function, and the local variables are added to that closure.</li>\n<li>A new set of local variables is kept every time a function with a closure is called (given that the function contains a function declaration inside it, and a reference to that inside function is either returned or an external reference is kept for it in some way).</li>\n<li>Two functions might look like they have the same source text, but have completely different behaviour because of their 'hidden' closure. I don't think JavaScript code can actually find out if a function reference has a closure or not.</li>\n<li>If you are trying to do any dynamic source code modifications (for example: <code>myFunction = Function(myFunction.toString().replace(/Hello/,'Hola'));</code>), it won't work if <code>myFunction</code> is a closure (of course, you would never even think of doing source code string substitution at runtime, but...).</li>\n<li>It is possible to get function declarations within function declarations within functions &mdash; and you can get closures at more than one level.</li>\n<li>I think normally a closure is the term for both the function along with the variables that are captured. Note that I do not use that definition in this article!</li>\n<li>I suspect that closures in JavaScript differ from those normally found in functional languages.</li>\n</ul>\n\n<h2>Links</h2>\n\n<ul>\n<li><a href=\"http://trimpath.com/project/wiki/TrimBreakpoint\">TrimBreakpoint</a> is a tricky use of closures to let you inspect local variables for a function from a popup breakpoint window.</li>\n<li>Douglas Crockford's simulated <a href=\"http://www.crockford.com/javascript/private.html\">private attributes and private methods</a> for an object, using closures.</li>\n<li>A great explanation of how closures can <a href=\"http://www.codeproject.com/jscript/LeakPatterns.asp\">cause memory leaks in IE</a> if you are not careful.</li>\n</ul>\n\n<h2>Thanks</h2>\n\n<p>If you have <em>just</em> learnt closures (here or elsewhere!), then I am interested in any feedback from you about any changes you might suggest that could make this article clearer. Send an email to morrisjohns.com (morris_closure @). Please note that I am not a guru on JavaScript &mdash; nor on closures.</p>\n\n<p>Thanks for reading.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Joel Anair",
                        "user_id": 7441
                    },
                    "score": 1195
                },
                {
                    "body": "<p>A <em>closure</em> is much like an object. It gets instantiated whenever you call a function. </p>\n\n<p>The scope of a <em>closure</em> in JavaScript is lexical, which means that everything that is contained within the function the <em>closure</em> belongs to, has access to any variable that is in it.</p>\n\n<p>A variable is contained in the <em>closure</em> if you</p>\n\n<ol>\n<li>assign it with <code>var foo=1;</code> or</li>\n<li>just write <code>var foo;</code></li>\n</ol>\n\n<p>If an inner function (a function contained inside another function) accesses such a variable without defining it in its own scope with var, it modifies the content of the variable in the outer <em>closure</em>.</p>\n\n<p>A <em>closure</em> outlives the runtime of the function that spawned it. If other functions make it out of the <em>closure/scope</em> in which they are defined (for instance as return values), those will continue to reference that <em>closure</em>.</p>\n\n<h2>Example</h2>\n\n<pre><code>function example(closure){\n    // define somevariable to live in the closure of example\n    var somevariable='unchanged';\n\n    return {\n        change_to:function(value){\n            somevariable = value;\n        },\n        log:function(value){\n            console.log('somevariable of closure %s is: %s',\n                closure, somevariable);\n        }\n    }\n}\n\nclosure_one = example('one');\nclosure_two = example('two');\n\nclosure_one.log();\nclosure_two.log();\nclosure_one.change_to('some new value');\nclosure_one.log();\nclosure_two.log();\n</code></pre>\n\n<h2>Output</h2>\n\n<pre><code>somevariable of closure one is: unchanged\nsomevariable of closure two is: unchanged\nsomevariable of closure one is: some new value\nsomevariable of closure two is: unchanged\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Florian B&#246;sch",
                        "user_id": 19435
                    },
                    "score": 97
                },
                {
                    "body": "<p>Closures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that <em>I</em> learned what they do) is to imagine the situation without them:</p>\n\n<pre><code>var bind = function(x) {\n    return function(y) { return x + y; };\n}\n\nvar plus5 = bind(5);\nalert(plus5(3));\n</code></pre>\n\n<p>What would happen here if JavaScript <em>didn't</em> know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:</p>\n\n<pre><code>alert(x + 3);\n</code></pre>\n\n<p>Now, where's the definition of <code>x</code>? We didn't define it in the current scope. The only solution is to let <code>plus5</code> <em>carry</em> its scope (or rather, its parent's scope) around. This way, <code>x</code> is well-defined and it is bound to the value 5.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Konrad Rudolph",
                        "user_id": 1968
                    },
                    "score": 161
                },
                {
                    "body": "<p>Whenever you see the function keyword within another function, the inner function has access to variables in the outer function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  function bar(y) {\r\n    alert(x + y + (++tmp)); // will alert 16\r\n  }\r\n\r\n  bar(10);\r\n}\r\n\r\nfoo(2);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This will always alert 16, because <code>bar</code> can access the <code>x</code> which was defined as an argument to <code>foo</code>, and it can also access <code>tmp</code> from <code>foo</code>.</p>\n\n<p>That <strong><em>is</em></strong> a closure. A function doesn't have to <em>return</em> in order to be called a closure. <strong><em>Simply accessing variables outside of your immediate lexical scope creates a closure</em></strong>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  return function (y) {\r\n    alert(x + y + (++tmp)); // will also alert 16\r\n  }\r\n}\r\n\r\nvar bar = foo(2); // bar is now a closure.\r\nbar(10);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The above function will also alert 16, because <code>bar</code> can still refer to <code>x</code> and <code>tmp</code>, even though it is no longer directly inside the scope.</p>\n\n<p>However, since <code>tmp</code> is still hanging around inside <code>bar</code>'s closure, it is also being incremented. It will be incremented each time you call <code>bar</code>.</p>\n\n<p>The simplest example of a closure is this:</p>\n\n<pre><code>var a = 10;\nvar b = 6;\n\nfunction test() {\n  console.log(a); // will output 10\n  console.log(b); // will output 6\n}\n\ntest();\n</code></pre>\n\n<p>When a JavaScript function is invoked, a new execution context is created. Together with the function arguments and the parent object, this execution context also receives all the variables declared outside of it (in the above example, both 'a' and 'b').</p>\n\n<p>It is possible to create more than one closure function, either by returning a list of them or by setting them to global variables. All of these will refer to the <strong>same</strong> <code>x</code> and the same <code>tmp</code>, they don't make their own copies.</p>\n\n<p>Here the number <code>x</code> is a literal number. As with other literals in JavaScript, when <code>foo</code> is called, the number <code>x</code> is <b>copied</b> into <code>foo</code> as its argument <code>x</code>.</p>\n\n<p>On the other hand, JavaScript always uses references when dealing with Objects. If say, you called <code>foo</code> with an Object, the closure it returns will <b>reference</b> that original Object!</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  return function (y) {\r\n    alert(x + y + tmp);\r\n    x.memb = x.memb ? x.memb + 1 : 1;\r\n    alert(x.memb);\r\n  }\r\n}\r\n\r\nvar age = 2;\r\nvar bar = foo(age); // bar is now a closure referencing age.\r\nbar(10);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>As expected, each call to <code>bar(10)</code> will increment <code>x.memb</code>. What might not be expected, is that <code>x</code> is simply referring to the same object as the <code>age</code> variable! After a couple of calls to <code>bar</code>, <code>age.memb</code> will be 2! This referencing is the basis for memory leaks with HTML objects.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Ali",
                        "user_id": 8689
                    },
                    "score": 2452
                },
                {
                    "body": "<p>A closure is where an inner function has access to variables in its outer function. That's probably the simplest one-line explanation you can get for closures.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rakesh Pai",
                        "user_id": 20089
                    },
                    "score": 21
                },
                {
                    "body": "<p>This is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.</p>\n\n<ul>\n<li><strong>A closure is not only created when you return an inner function.</strong>  In fact, the enclosing function <em>does not need to return at all</em> in order for its closure to be created.  You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be called immediately or any time later.  Therefore, the closure of the enclosing function is probably created <em>as soon as the enclosing function is called</em> since any inner function has access to that closure whenever the inner function is called, before or after the enclosing function returns. </li>\n<li><strong>A closure does not reference a copy of the <em>old values</em> of variables in its scope.</strong>  The variables themselves are part of the closure, and so the value seen when accessing one of those variables is the latest value at the time it is accessed.  This is why inner functions created inside of loops can be tricky, since each one has access to the same outer variables rather than grabbing a copy of the variables at the time the function is created or called.</li>\n<li><strong>The \"variables\" in a closure include any named functions</strong> declared within the function.  They also include arguments of the function.  A closure also has access to its containing closure's variables, all the way up to the global scope.</li>\n<li><strong>Closures use memory, but they don't cause memory leaks</strong> since JavaScript by itself cleans up its own circular structures that are not referenced.  IE memory leaks involving closures are created when it fails to disconnect DOM attribute values that reference closures, thus maintaining references to possibly circular structures.</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dlaliberte",
                        "user_id": 311389
                    },
                    "score": 147
                },
                {
                    "body": "<p>Example for the first point by <a href=\"http://stackoverflow.com/users/311389/dlaliberte\">dlaliberte</a>:</p>\n\n<blockquote>\n  <p>A closure is not only created when you\n  return an inner function. In fact,\n  the enclosing function does not need\n  to return at all. You might instead\n  assign your inner function to a\n  variable in an outer scope, or pass it\n  as an argument to another function\n  where it could be used immediately.\n  Therefore, the closure of the\n  enclosing function probably already\n  exists at the time that enclosing\n  function was called since any inner\n  function has access to it as soon as\n  it is called.</p>\n</blockquote>\n\n<pre><code>var i;\nfunction foo(x) {\n    var tmp = 3;\n    i = function (y) {\n        alert(x + y + (++tmp));\n    }\n}\nfoo(2);\ni(3);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "someisaac ",
                        "user_id": 167166
                    },
                    "score": 25
                },
                {
                    "body": "<h2><a href=\"http://stackoverflow.com/questions/1700514/how-do-you-explain-closure-to-a-5-year-old/1700627#1700627\">Can you explain closures to a 5 year old?*</a></h2>\n\n<p>I still think <a href=\"http://code.google.com/apis/ajax/playground/?exp=maps#closure_simple\">Google's explanation</a> works very well and is concise:</p>\n\n<pre><code>/*\n*    When a function is defined in another function and it\n*    has access to the outer function's context even after\n*    the outer function returns.\n*\n* An important concept to learn in JavaScript.\n*/\n\nfunction outerFunction(someNum) {\n    var someString = 'Hey!';\n    var content = document.getElementById('content');\n    function innerFunction() {\n        content.innerHTML = someNum + ': ' + someString;\n        content = null; // Internet Explorer memory leak for DOM reference\n    }\n    innerFunction();\n}\n\nouterFunction(1);\u200b\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/N0mn0.png\" alt=\"Proof that this example creates a closure even if the inner function doesn&#39;t return\"></p>\n\n<p><sub>*A C# question</sub></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chris S",
                        "user_id": 21574
                    },
                    "score": 58
                },
                {
                    "body": "<p>I wrote a blog post a while back explaining closures. Here's what I said about closures in terms of <strong>why</strong> you'd want one.</p>\n\n<blockquote>\n  <p>Closures are a way to let a function\n  have <strong>persistent, private variables</strong> -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.</p>\n</blockquote>\n\n<p>In that sense, they let a function act a bit like an object with private attributes.</p>\n\n<p>Full post:</p>\n\n<p><a href=\"http://sleeplessgeek.blogspot.com/2009/12/so-what-are-these-closure-thingys.html\">So what are these closure thingys?</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nathan Long",
                        "user_id": 4376
                    },
                    "score": 69
                },
                {
                    "body": "<p>JavaScript functions can access their:</p>\n\n<ol>\n<li>Arguments</li>\n<li>Locals (that is, their local variables and local functions)</li>\n<li>Environment, which includes:\n<ul>\n<li>globals, including the DOM</li>\n<li>anything in outer functions</li>\n</ul></li>\n</ol>\n\n<p>If a function accesses its environment, then the function is a closure.</p>\n\n<p>Note that outer functions are not required, though they do offer benefits I don't discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function's local data alive.</p>\n\n<p>Example of a closure that uses the global environment:</p>\n\n<p>Imagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity's sake, I am referring to StackOverflow's Question Vote buttons, not the array of Answer Vote buttons.)</p>\n\n<p>When the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.</p>\n\n<pre><code>var isVotedUp = false;\nvar isVotedDown = false;\n\nfunction voteUp_click()\n{\n  if (isVotedUp)\n    return;\n  else if (isVotedDown)\n    SetDownVote(false);\n  else\n    SetUpVote(true);\n}\n\nfunction voteDown_click()\n{\n  if (isVotedDown)\n    return;\n  else if (isVotedUp)\n    SetUpVote(false);\n  else\n    SetDownVote(true);\n}\n\nfunction SetUpVote(status)\n{\n  isVotedUp = status;\n  // Do some CSS stuff to Vote-Up button\n}\n\nfunction SetDownVote(status)\n{\n  isVotedDown = status;\n  // Do some CSS stuff to Vote-Down button\n}\n</code></pre>\n\n<p>All four of these functions are closures as they all access their environment.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Pick",
                        "user_id": 251034
                    },
                    "score": 15
                },
                {
                    "body": "<p>I'm a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.</p>\n\n<p><strong>Once upon a time:</strong></p>\n\n<p>There was a princess...</p>\n\n<pre><code>function princess() {\n</code></pre>\n\n<p>She lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.</p>\n\n<pre><code>    var adventures = [];\n\n    function princeCharming() { /* ... */ }\n\n    var unicorn = { /* ... */ },\n        dragons = [ /* ... */ ],\n        squirrel = \"Hello!\";\n</code></pre>\n\n<p>But she would always have to return back to her dull world of chores and grown-ups.</p>\n\n<pre><code>    return {\n</code></pre>\n\n<p>And she would often tell them of her latest amazing adventure as a princess.</p>\n\n<pre><code>        story: function() {\n            return adventures[adventures.length - 1];\n        }\n    };\n}\n</code></pre>\n\n<p>But all they would see is a little girl...</p>\n\n<pre><code>var littleGirl = princess();\n</code></pre>\n\n<p>...telling stories about magic and fantasy.</p>\n\n<pre><code>littleGirl.story();\n</code></pre>\n\n<p>And even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl's imagination.</p>\n\n<p>But we know the real truth; that the little girl with the princess inside...</p>\n\n<p>...is really a princess with a little girl inside.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jacob Swartwood",
                        "user_id": 777919
                    },
                    "score": 1096
                },
                {
                    "body": "<p>You're having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.</p>\n\n<p>Dan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function sleepOver(howManyControllersToBring) {\n\n    var numberOfDansControllers = howManyControllersToBring;\n\n    return function danInvitedPaul(numberOfPaulsControllers) {\n        var totalControllers = numberOfDansControllers + numberOfPaulsControllers;\n        return totalControllers;\n    }\n}\n\nvar howManyControllersToBring = 1;\n\nvar inviteDan = sleepOver(howManyControllersToBring);\n\n// The only reason Paul was invited is because Dan was invited. \n// So we set Paul's invitation = Dan's invitation.\n\nvar danInvitedPaul = inviteDan(howManyControllersToBring);\n\nalert(\"There were \" + danInvitedPaul + \" controllers brought to the party.\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "StewShack",
                        "user_id": 815682
                    },
                    "score": 27
                },
                {
                    "body": "<p>I put together an interactive JavaScript tutorial to explain how closures work.\n<a href=\"http://nathansjslessons.appspot.com\" rel=\"nofollow\">What's a Closure?</a></p>\n\n<p>Here's one of the examples:</p>\n\n<pre><code>var create = function (x) {\n    var f = function () {\n        return x; // We can refer to x here!\n    };\n    return f;\n};\n// 'create' takes one argument, creates a function\n\nvar g = create(42);\n// g is a function that takes no arguments now\n\nvar y = g();\n// y is 42 here\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nathan Whitehead",
                        "user_id": 232725
                    },
                    "score": 38
                },
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\">Wikipedia on closures</a>:</p>\n\n<blockquote>\n  <p>In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.</p>\n</blockquote>\n\n<p>Technically, in <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>, <strong>every function is a closure</strong>. It always has an access to variables defined in the surrounding scope.</p>\n\n<p>Since <strong>scope-defining construction in JavaScript is a function</strong>, not a code block like in many other languages, <strong>what we usually mean by <em>closure</em> in JavaScript</strong> is a <strong>function working with nonlocal variables defined in already executed surrounding function</strong>.</p>\n\n<p>Closures are often used for creating functions with some hidden private data (but it's not always the case).</p>\n\n<pre><code>var db = (function() {\n    // Create a hidden object, which will hold the data\n    // it's inaccessible from the outside.\n    var data = {};\n\n    // Make a function, which will provide some access to the data.\n    return function(key, val) {\n        if (val === undefined) { return data[key] } // Get\n        else { return data[key] = val } // Set\n    }\n    // We are calling the anonymous surrounding function,\n    // returning the above inner function, which is a closure.\n})();\n\ndb('x')    // -&gt; undefined\ndb('x', 1) // Set x to 1\ndb('x')    // -&gt; 1\n// It's impossible to access the data object itself.\n// We are able to get or set individual it.\n</code></pre>\n\n<p>ems</p>\n\n<p>The example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. <code>mkdb</code>) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mykhal",
                        "user_id": 234248
                    },
                    "score": 50
                },
                {
                    "body": "<p>Taking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.  </p>\n\n<p>On  <a href=\"http://www.howkidsdevelop.com/5-7years.html\">Childhood Development: 5 to 7 Years </a> it says:</p>\n\n<blockquote>\n  <p>Your child will be able to follow two-step directions. For example, if you say to your child, \"Go to the kitchen and get me a trash bag\" they will be able to remember that direction.</p>\n</blockquote>\n\n<p>We can use this example to explain closures, as follows:</p>\n\n<blockquote>\n  <p>The kitchen is a closure that has a local variable, called trashBags.  There is a function inside the kitchen called getTrashBag that gets one trash bag and returns it.</p>\n</blockquote>\n\n<p>We can code this in JavaScript like this:</p>\n\n<pre><code>function makeKitchen () {\n  var trashBags = ['A', 'B', 'C']; // only 3 at first\n\n  return {\n    getTrashBag: function() {\n      return trashBags.pop();\n    }\n  };\n}\n\nvar kitchen = makeKitchen();\n\nkitchen.getTrashBag(); // returns trash bag C\nkitchen.getTrashBag(); // returns trash bag B\nkitchen.getTrashBag(); // returns trash bag A\n</code></pre>\n\n<p>Further points that explain why closures are interesting:</p>\n\n<ul>\n<li>Each time makeKitchen() is called, a new closure is created with its own separate trashBags.</li>\n<li>The trashBags variable is local to the inside of each kitchen and is not accessible outside, but the inner function on the getTrashBag property does have access to it.  </li>\n<li>Every function call creates a closure, but there would be no need to keep the closure around unless an inner function, which has access to the inside of the closure, can be called from outside the closure.  Returning the object with the getTrashBag function does that here.</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dlaliberte",
                        "user_id": 311389
                    },
                    "score": 282
                },
                {
                    "body": "<p>I know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:</p>\n\n<pre><code>// makeSequencer will return a \"sequencer\" function\nvar makeSequencer = function() {\n    var _count = 0; // Not accessible outside this function\n    var sequencer = function () {\n        return _count++;\n    }\n    return sequencer;\n}\n\nvar fnext = makeSequencer();\nvar v0 = fnext();     // v0 = 0;\nvar v1 = fnext();     // v1 = 1;\nvar vz = fnext._count // vz = undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gerardo Lima",
                        "user_id": 394042
                    },
                    "score": 19
                },
                {
                    "body": "<p>After a function is invoked, it goes out of scope. If that function contains something like a callback function, then that callback function is still in scope. If the callback function references some local variable in the immediate environment of the parent function, then naturally you'd expect that variable to be inaccesible to the callback function and return undefined.</p>\n\n<p>Closures ensure that any property that is referenced by the callback function is available for use by that function, even when it's parent function may have gone out of scope</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "goonerify",
                        "user_id": 1445318
                    },
                    "score": 5
                },
                {
                    "body": "<p>From a personal <a href=\"http://tshikatshikaaa.blogspot.nl/2012/08/purpose-of-javascript-closure.html\" rel=\"nofollow\">blog post</a>:</p>\n\n<p>By default, JavaScript knows two types of scopes: global and local.</p>\n\n<pre><code>var a = 1;\n\nfunction b(x) {\n    var c = 2;\n    return x * c;\n}\n</code></pre>\n\n<p>In the above code, variable a and function b are available from anywhere in the code (that is, globally). Variable <code>c</code> is only available within the <code>b</code> function scope (that is, local). Most software developers won't be happy with this lack of scope flexibility, especially in large programs.</p>\n\n<p>JavaScript closures help solving that issue by tying a function with a context:</p>\n\n<pre><code>function a(x) {\n    return function b(y) {\n        return x + y;\n    }\n}\n</code></pre>\n\n<p>Here, function <code>a</code> returns a function called <code>b</code>. Since <code>b</code> is defined within <code>a</code>, it automatically has access to whatever is defined in <code>a</code>, that is, <code>x</code> in this example. This is why <code>b</code> can return <code>x</code> + <code>y</code> without declaring <code>x</code>.</p>\n\n<pre><code>var c = a(3);\n</code></pre>\n\n<p>Variable <code>c</code> is assigned the result of a call to a with parameter 3. That is, an instance of function <code>b</code> where <code>x</code> = 3. In other words, <code>c</code> is now a function equivalent to:</p>\n\n<pre><code>var c = function b(y) {\n    return 3 + y;\n}\n</code></pre>\n\n<p>Function <code>b</code> remembers that <code>x</code> = 3 in its context. Therefore:</p>\n\n<pre><code>var d = c(4);\n</code></pre>\n\n<p>will assign the value 3 + 4 to <code>d</code>, that is 7.</p>\n\n<p><strong>Remark</strong>: If someone modifies the value of <code>x</code> (say <code>x</code> = 22) after the instance of function <code>b</code> has been created, this will be reflected in <code>b</code> too. Hence a later call to <code>c</code>(4) would return 22 + 4, that is 26.</p>\n\n<p>Closures can also be used to limit the scope of variables and methods declared globally:</p>\n\n<pre><code>(function () {\n    var f = \"Some message\";\n    alert(f);\n})();\n</code></pre>\n\n<p>The above is a closure where the function has no name, no argument and is called immediately. The highlighted code, which declares a global variable <code>f</code>, limits the scopes of <code>f</code> to the closure.</p>\n\n<p>Now, there is a common JavaScript caveat where closures can help:</p>\n\n<pre><code>var a = new Array();\n\nfor (var i=0; i&lt;2; i++) {\n    a[i]= function(x) { return x + i ; }\n}\n</code></pre>\n\n<p>From the above, most would assume that array <code>a</code> would be initialized as follows:</p>\n\n<pre><code>a[0] = function (x) { return x + 0 ; }\na[1] = function (x) { return x + 1 ; }\na[2] = function (x) { return x + 2 ; }\n</code></pre>\n\n<p>In reality, this is how a is initialized, since the last value of <code>i</code> in the context is 2:</p>\n\n<pre><code>a[0] = function (x) { return x + 2 ; }\na[1] = function (x) { return x + 2 ; }\na[2] = function (x) { return x + 2 ; }\n</code></pre>\n\n<p>The solution is:</p>\n\n<pre><code>var a = new Array();\n\nfor (var i=0; i&lt;2; i++) {\n    a[i]= function(tmp) {\n        return function (x) { return x + tmp ; }\n    } (i);\n}\n</code></pre>\n\n<p>The argument/variable <code>tmp</code> holds a local copy of the changing value of <code>i</code> when creating function instances.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JVerstry",
                        "user_id": 520957
                    },
                    "score": 4
                },
                {
                    "body": "<p>A function in JavaScript is not just a reference to a set of instructions (as in C language) but also includes a hidden data structure which is composed of references to all nonlocal variables it uses. Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.</p>\n\n<p>Closures are functions with a state. It is somewhat similar to \"this\" in the sense that \"this\" also provides state for a function but function and \"this\" are separate objects (\"this\" is just a fancy parameter, and the only way to bind it to a function is to create a closure). While \"this\" and function always live separately, a function cannot be separated from its closure.</p>\n\n<p>Because all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, - every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).</p>\n\n<p>Also, it must be understood that local variables in JavaScript are created not on the stack frame but in the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented but can still be non-null if during the current execution they became part of a closure and are still referenced by its (lexically) nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).</p>\n\n<p>An example:</p>\n\n<pre><code>function foo (initValue) {\n   //This variable is not destroyed when the foo function exits.\n   //It is 'captured' by the two nested functions returned below.\n   var value = initValue; \n\n   //Note that the two returned functions are created right now.\n   //If the foo function is called again, it will return \n   //new functions referencing a different 'value' variable.\n   return {\n       getValue: function () { return value; },\n       setValue: function (newValue) { value = newValue; }\n   }\n}\n\nfunction bar () {\n    //foo sets its local variable 'value' to 5 and returns an object with\n    //two functions still referencing that local variable\n    var obj = foo(5);\n\n    //extracting functions just to show that no 'this' is involved here\n    var getValue = obj.getValue;\n    var setValue = obj.setValue;\n\n    alert(getValue()); //displays 5\n    setValue(10);\n    alert(getValue()); //displays 10\n\n    //At this point getValue and setValue functions are destroyed \n    //(in reality they are destroyed at the next iteration of the garbage collector).\n    //The local variable 'value' in the foo is no longer referenced by \n    //anything and is destroyed too.\n}\n\nbar();\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "srgstm",
                        "user_id": 875940
                    },
                    "score": 11
                },
                {
                    "body": "<p>Closures are a means through which inner functions can refer to the variables present in their outer enclosing function after their parent functions have already terminated.</p>\n\n<pre><code>// A function that generates a new function for adding numbers.\nfunction addGenerator( num ) {\n    // Return a simple function for adding two numbers\n    // with the first number borrowed from the generator\n    return function( toAdd ) {\n        return num + toAdd\n    };\n}\n\n// addFive now contains a function that takes one argument,\n// adds five to it, and returns the resulting number.\nvar addFive = addGenerator( 5 );\n// We can see here that the result of the addFive function is 9,\n// when passed an argument of 4.\nalert( addFive( 4 ) == 9 );\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ketan",
                        "user_id": 783815
                    },
                    "score": 5
                },
                {
                    "body": "<h1>The Straw Man</h1>\n\n<p>I need to know how many times a button has been clicked, and do something on every third click...</p>\n\n<h2>Fairly Obvious Solution</h2>\n\n<pre><code>// Declare counter outside event handler's scope\nvar counter = 0;\nvar element = document.getElementById('button');\n\nelement.onclick = function() {\n    // Increment outside counter\n    counter++;\n\n    if (counter === 3) {\n        // Do something every third time\n        alert(\"Third time's the charm!\");\n\n        // Reset counter\n        counter = 0;\n    }\n};\n</code></pre>\n\n<p>Now this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations this would be preferable as your outer application might need access to this information. But in this case we are only changing every third click's behavior, so it is preferable to <strong>enclose this functionality inside the event handler</strong>.</p>\n\n<h2>Consider this option</h2>\n\n<pre><code>var element = document.getElementById('button');\n\nelement.onclick = (function() {\n    // init the count to 0\n    var count = 0;\n\n    return function(e) {  // &lt;- This function becomes the onclick handler\n        count++;          //    and will retain access to the above `count`\n\n        if (count === 3) {\n            // Do something every third time\n            alert(\"Third time's the charm!\");\n\n            //Reset counter\n            count = 0;\n        }\n    };\n})();\n</code></pre>\n\n<p>Notice a few things here.</p>\n\n<p>In the above example I am using the closure behavior of JavaScript. <strong>This behavior allows any function to have access to the scope in which it was created, indefinitely.</strong> To practically apply this, I immediately invoke a function that returns another function, and because the function I'm returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? &nbsp;Lets dilute it down...</p>\n\n<p><strong>A simple one line closure</strong></p>\n\n<pre><code>//         ____________Immediately executed (self invoked)___________________\n//         |                                                                |\n//         |      Scope Retained for use        __Returned as the______     |\n//         |     only by returned function     |  value of func       |     |\n//         |             |            |        |                      |     |\n//         v             v            v        v                      v     v\nvar func = (function() { var a = 'val'; return function() { alert(a); }; })();\n</code></pre>\n\n<p>All variables outside the returned function are available to the returned function, but are not directly available to the returned function object...</p>\n\n<pre><code>func();  // Alerts \"value\"\nfunc.a;  // Undefined\n</code></pre>\n\n<p>Get it? So in our primary example, the count variable is contianed within the closure and always available to the event handler, so it retains its state from click to click.</p>\n\n<p>Also this private variable state is <strong>fully</strong> accessible, for both reading and assigning to its private scoped variables.</p>\n\n<p>There you go, you're now fully encapsulating this behavior.</p>\n\n<p><strong><a href=\"http://jondavidjohn.com/javascript-closure-explained-using-events/\">Full Blog Post</a></strong> (including jQuery considerations)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jondavidjohn",
                        "user_id": 555384
                    },
                    "score": 138
                },
                {
                    "body": "<p>Okay, talking with a 6-year old child, I would possibly use following associations.</p>\n\n<blockquote>\n  <p>Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother's room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy's <em>closure</em>; your brother made it up for you, and he is now into outer <em>scope</em>.</p>\n</blockquote>\n\n<p>Compare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.</p>\n\n<p>For an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:</p>\n\n<pre><code>function playingInBrothersRoom (withToys) {\n  // We closure toys which we played in the brother's room. When he come back and lock the door\n  // your brother is supposed to be into the outer [[scope]] object now. Thanks god you could communicate with him.\n  var closureToys = withToys || [],\n      returnToy, countIt, toy; // Just another closure helpers, for brother's inner use.\n\n  var brotherGivesToyBack = function (toy) {\n    // New request. There is not yet closureToys on brother's hand yet. Give him a time.\n    returnToy = null;\n    if (toy &amp;&amp; closureToys.length &gt; 0) { // If we ask for a specific toy, the brother is going to search for it.\n\n      for ( countIt = closureToys.length; countIt; countIt--) {\n        if (closureToys[countIt - 1] == toy) {\n          returnToy = 'Take your ' + closureToys.splice(countIt - 1, 1) + ', little boy!';\n          break;\n        }\n      }\n      returnToy = returnToy || 'Hey, I could not find any ' + toy + ' here. Look for it in another room.';\n    }\n    else if (closureToys.length &gt; 0) { // Otherwise, just give back everything he has in the room.\n      returnToy = 'Behold! ' + closureToys.join(', ') + '.';\n      closureToys = [];\n    }\n    else {\n      returnToy = 'Hey, lil shrimp, I gave you everything!';\n    }\n    console.log(returnToy);\n  }\n  return brotherGivesToyBack;\n}\n// You are playing in the house, including the brother's room.\nvar toys = ['teddybear', 'car', 'jumpingrope'],\n    askBrotherForClosuredToy = playingInBrothersRoom(toys);\n\n// The door is locked, and the brother came from the school. You could not cheat and take it out directly.\nconsole.log(askBrotherForClosuredToy.closureToys); // Undefined\n\n// But you could ask your brother politely, to give it back.\naskBrotherForClosuredToy('teddybear'); // Hooray, here it is, teddybear\naskBrotherForClosuredToy('ball'); // The brother would not be able to find it.\naskBrotherForClosuredToy(); // The brother gives you all the rest\naskBrotherForClosuredToy(); // Nothing left in there\n</code></pre>\n\n<p>As you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is <a href=\"http://jsbin.com/ubakor/9/edit\" rel=\"nofollow\">a jsbin</a> to play around with it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dmi3y",
                        "user_id": 1401973
                    },
                    "score": 16
                },
                {
                    "body": "<p>I'd simply point them to the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures\" rel=\"nofollow\">Mozilla Closures page</a>. It's the best, most <strong>concise and simple explanation</strong> of closure basics and practical usage that I've found. It is highly recommended to anyone learning JavaScript.</p>\n\n<p>And yes, I'd even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it's logical they're ready to comprehend the <em>concise and simple explanation</em> provided in the article.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mjmoody383",
                        "user_id": 549155
                    },
                    "score": 12
                },
                {
                    "body": "<p>If you want to explain it to a six-year old child then you must find something very much simpler and NO code.</p>\n\n<p>Just tell the child that he is \"open\", which says that he is able to have relations with some others, his friends. At some point in time, he has determined friends (we can know the names of his friends), that is a closure. If you take a picture of him and his friends then he is \"closed\" relatively to his friendship ability. But in general, he is \"open\". During his whole life he will have many different sets of friends. One of these sets is a closure.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jean-Baptiste Yun&#232;s",
                        "user_id": 719263
                    },
                    "score": 5
                },
                {
                    "body": "<p>This is copyrighted material so I can't copy it, but I will supply the reference and say that I found it very clear.  Chapter 8 section 6, \"Closures,\" of <em>Javascript the Definitive Guide</em> by David Flanagan, 6th edition, O'Reilly, 2011.  I'll try to paraphrase.  </p>\n\n<ol>\n<li><p>When a function is invoked, a new object is created to hold the local variables for that invocation.  </p></li>\n<li><p>A function's scope depends on its declaration location, not its execution location.</p></li>\n</ol>\n\n<p>Now, assume an inner function declared within an outer function and referring to variables of that outer function.  Further assume the outer function returns the inner function, as a function.  Now there is an external reference to whatever values were in the inner function's scope (which, by our assumptions, includes values from the outer function).  Javascript will preserve those values, as they have remained in scope of current execution thanks to being passed out of the completed outer function.  All functions are closures, but the closures of interest are the inner functions which, in our assumed scenario, preserve outer function values within their \"enclosure\" (I hope I'm using language correctly here) when they (the inner functions) are returned from outer functions.  I know this doesn't meet the six-year-old requirement, but hopefully is still helpful.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jim",
                        "user_id": 1811102
                    },
                    "score": 9
                },
                {
                    "body": "<p>A function is executed in the scope of the object/function in which it is defined. The said function can access the variables defined in the object/function where it has been defined while it is executing.</p>\n\n<p>And just take it literally.... as the code is written :P</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "moha297",
                        "user_id": 159765
                    },
                    "score": 0
                },
                {
                    "body": "<p>For a six-year-old?</p>\n\n<p>You and your family live in the mythical town of Ann Ville. You have a friend who lives next door, so you call them and ask them to come out and play. You dial:</p>\n\n<blockquote>\n  <p>000001 (jamiesHouse)</p>\n</blockquote>\n\n<p>After a month, you and your family move out of Ann Ville to the next town, but you and your friend still keep in touch, so now you have to dial the area code for the town that your friend lives in, before dialling their 'proper' number:</p>\n\n<blockquote>\n  <p>001 000001 (annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>A year after that, your parents move to a whole new country, but you and your friend still keep in touch, so after bugging your parents to let you make international rate calls, you now dial:</p>\n\n<blockquote>\n  <p>01 001 000001 (myOldCountry.annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>Strangely though, after moving to your new country, you and your family just so happen to move to a new town called Ann Ville... and you just so happen to make friends with some new person called Jamie... You give them a call...</p>\n\n<blockquote>\n  <p>000001 (jamiesHouse)</p>\n</blockquote>\n\n<p>Spooky...</p>\n\n<p>So spooky in fact, that you tell Jamie from your old country about it... You have a good laugh about it. So one day, you and your family take a holiday back to the old country. You visit your old town (Ann Ville), and go to visit Jamie...</p>\n\n<ul>\n<li>\"Really? Another Jamie? In Ann Ville? In your new country!!?\"</li>\n<li>\"Yeah... Let's call them...\"</li>\n</ul>\n\n<blockquote>\n  <p>02 001 000001 (myNewCountry.annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>Opinions?</p>\n\n<p><em>What's more, I have a load of questions about the patience of a modern six-year-old...</em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Charlie",
                        "user_id": 479836
                    },
                    "score": 8
                },
                {
                    "body": "<p>An answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):</p>\n\n<p>Functions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don't go away. Instead, that parent function \"closes.\" In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.</p>\n\n<pre><code>function the_closure() {\n  var x = 4;\n  return function () {\n    return x; // Here, we look back inside the_closure for the value of x\n  }\n}\n\nvar myFn = the_closure();\nmyFn(); //=&gt; 4\n</code></pre>\n\n<p>Another really simple way to explain it is in terms of scope:</p>\n\n<p>Any time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Stupid Stupid",
                        "user_id": 2391385
                    },
                    "score": 12
                },
                {
                    "body": "<p>I'm sure, Einstein didn't say it with a direct expectation for us to pick any esoteric brainstormer thing and run over six-year olds with futile attempts to get those 'crazy' (and what is even worse for them-boring) things to their childish minds :) If I were 6 years old I wouldn't like to have such parents or wouldn't make friendship with such boring philanthropists, sorry :)</p>\n\n<p>Anyways, for babies, <strong>closure</strong> is simply a <strong>hug</strong>, I guess, whatever way you try to explain :) And when you hug a friend of yours then you both kinda share anything you guys have at the moment. It's a rite of passage, once you've hugged somebody you're showing her trust and willingness to let her do with you a lot of things you don't allow and would hide from others. It's an act of friendship :).</p>\n\n<p>Really don't know how to explain it to 5-6 years old babies. I neither think they will appreciate any JavaScript code snippets like</p>\n\n<pre><code>function Baby(){\n  this.iTrustYou = true;\n}\n\nBaby.prototype.hug = function (baby) {\n    var smiles = 0;\n\n    if(baby.iTrustYou){\n        return function(){\n            smiles++;\n            alert(smiles);\n        };\n    }\n};\n\nvar \n   arman = new Baby(\"Arman\")\n  ,morgan = new Baby(\"Morgana\");\n\nvar hug = arman.hug(morgan);\nhug();\nhug();\n</code></pre>\n\n<p>For children only:</p>\n\n<p><strong>Closure</strong> is <strong>Hug</strong></p>\n\n<p><strong>Bug</strong> is <strong>fly</strong></p>\n\n<p><strong>KISS</strong> is <strong>smooch!</strong> :)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arman McHitaryan",
                        "user_id": 1847185
                    },
                    "score": 9
                },
                {
                    "body": "<p>OK, 6-year-old closures fan. Do you want to hear the simplest example of closure?</p>\n\n<p>Let's imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That's it. When you turn 27, look at the <a href=\"http://stackoverflow.com/a/111200/1393791\">more detailed explanation</a> or at the example below.</p>\n\n<p>Here is how I can convert my plane story into the code.</p>\n\n<pre><code>var plane = function (defaultAirport) {\n\n    var lastAirportLeft = defaultAirport;\n\n    var car = {\n        driver: {\n            startAccessPlaneInfo: function () {\n                setInterval(function () {\n                    console.log(\"Last airport was \" + lastAirportLeft);\n                }, 2000);\n            }\n        }\n    };\n    car.driver.startAccessPlaneInfo();\n\n    return {\n        leaveTheAirport: function (airPortName) {\n            lastAirportLeft = airPortName;\n        }\n    }\n}(\"Boryspil International Airport\");\n\nplane.leaveTheAirport(\"John F. Kennedy\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Max Tkachenko",
                        "user_id": 1393791
                    },
                    "score": 96
                },
                {
                    "body": "<p>I tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together <a href=\"http://jsfiddle.net/KMQZK/\">a jsFiddle</a> that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.</p>\n\n<h2>Closures done right:</h2>\n\n<pre><code>console.log('CLOSURES DONE RIGHT');\nvar arr = [];\nfunction createClosure(n) {\n    return function () {\n        return 'n = ' + n;\n    }\n}\nfor (var index = 0; index &lt; 10; index++) {\n    arr[index] = createClosure(index);\n}\nfor (var index in arr) {\n    console.log(arr[index]());\n}\n</code></pre>\n\n<ul>\n<li><p>In the above code createClosure(n) is invoked in every iteration of the loop.</p></li>\n<li><p>This creates a new scope and n is bound to that scope; this means we have 10 separate scopes, one for each iteration.</p></li>\n<li><p>createClosure(n) returns a function that returns the n within that scope.</p></li>\n<li><p>Within each scope n is bound to whatever value it had when createClosure(n) was invoked so the nested function that gets returned will always return the value of n that it had when createClosure(n) was invoked.</p></li>\n</ul>\n\n<h2>Closures done wrong:</h2>\n\n<pre><code>console.log('CLOSURES DONE WRONG');\nfunction createClosureArray() {\n    var badArr = [];\n    for (var index = 0; index &lt; 10; index++) {\n        badArr[index] = function () {\n            return 'n = ' + index;\n        };\n    }\n    return badArr;\n}\nvar badArr = createClosureArray();\nfor (var index in badArr) {\n    console.log(badArr[index]());\n}\n</code></pre>\n\n<ul>\n<li><p>In the above code the loop was moved within the createClosureArray() function and the function now just returns the completed array, which at first glance seems more intuitive.</p></li>\n<li><p>What might not be obvious is that since createClosureArray() is only invoked once only one scope is created for this function instead of one for every iteration of the loop.</p></li>\n<li><p>Within this function a variable named index is defined. The loop runs and adds functions to the array that return index.</p></li>\n<li><p>Because there was only one scope within the createClosureArray() function, the index variable is only bound to a value within that scope. In other words, each time the loop changes the value of index, it changes it for everything that references it within that scope.</p></li>\n<li><p>All of the functions added to the array return the SAME index variable instead of 10 different ones from 10 different scopes. The end result is that all 10 functions return the same variable from the same scope.</p></li>\n<li><p>After the loop finished and index was done being modified the end value was 10, therefore every function added to the array returns the value of the single index variable which is now set to 10.</p></li>\n</ul>\n\n<h2>Result</h2>\n\n<blockquote>\n  <p>CLOSURES DONE RIGHT<br>\n  n = 0<br>\n  n = 1<br>\n  n = 2<br>\n  n = 3<br>\n  n = 4<br>\n  n = 5<br>\n  n = 6<br>\n  n = 7<br>\n  n = 8<br>\n  n = 9  </p>\n  \n  <p>CLOSURES DONE WRONG<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10  </p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alex Ford",
                        "user_id": 498624
                    },
                    "score": 29
                },
                {
                    "body": "<h2>Given the following function</h2>\n\n<pre><code>function person(name, age){\n\n    var name = name;\n    var age = age;\n\n    function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n\n    return introduce;\n}\n\nvar a = person(\"Jack\",12);\nvar b = person(\"Matt\",14);\n</code></pre>\n\n<p>Everytime the function <code>person</code> is called a new closure is created. While variables <code>a</code> and <code>b</code> have the same <code>introduce</code> function, it is linked to different closures. And that closure will still exist even after the function <code>person</code> finishes execution.</p>\n\n<p><img src=\"http://i.stack.imgur.com/LDEhE.png\" alt=\"Enter image description here\"></p>\n\n<pre><code>a(); //My name is Jack, and I'm 12\nb(); //My name is Matt, and I'm 14\n</code></pre>\n\n<p>An abstract closures could be represented to something like this:</p>\n\n<pre><code>closure a = {\n    name: \"Jack\",\n    age: 12,\n    call: function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n}\n\nclosure b = {\n    name: \"Matt\",\n    age: 14,\n    call: function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Assuming you know how a <code>class</code> in another language work, I will make an analogy.</p>\n\n<p>Think like</p>\n\n<ul>\n<li>JavaScript <code>function</code> as a <code>constructor</code></li>\n<li><code>local variables</code> as <code>instance properties</code></li>\n<li>these <code>properties</code> are private</li>\n<li><code>inner functions</code> as <code>instance methods</code></li>\n</ul>\n\n<p>Everytime a <code>function</code> is called</p>\n\n<ul>\n<li>A new <code>object</code> containing all local variables will be created.</li>\n<li>Methods of this object have access to <code>\"properties\"</code> of that instance object.</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vitim.us",
                        "user_id": 938822
                    },
                    "score": 9
                },
                {
                    "body": "<p>Considering the question is about explaining it simply as if to a <strong>6-year old</strong>, my answer would be:</p>\n\n<p><strong>\"When you declare a function in javascript it has forever access to all the variables and functions that were available in the line before that function declaration. The function and all the outer variables and functions that it has access to is what we call a closure\"</strong></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Raul Martins",
                        "user_id": 1482415
                    },
                    "score": 3
                },
                {
                    "body": "<h2><strong>Closures are simple:</strong></h2>\n\n<p>The following simple example covers all the main points of JavaScript closures.<sup>*</sup>\n&nbsp;</p>\n\n<p>Here is a factory that produces calculators that can add and multiply:</p>\n\n<pre><code>function make_calculator() {\n    var n = 0;  // this calculator stores a single number n\n    return {\n                  add : function (a) { n += a; return n; },\n             multiply : function (a) { n *= a; return n; }\n           };\n}\n\nfirst_calculator = make_calculator();\nsecond_calculator = make_calculator();\n\nfirst_calculator.add(3);                   // returns 3\nsecond_calculator.add(400);                // returns 400\n\nfirst_calculator.multiply(11);             // returns 33\nsecond_calculator.multiply(10);            // returns 4000\n</code></pre>\n\n<p><strong>The key point:</strong> Each call to <code>make_calculator</code> creates a new local variable <code>n</code>, which continues to be usable by that calculator's <code>add</code> and <code>multiply</code> functions long after <code>make_calculator</code> returns.</p>\n\n<p><em>If you are familiar with stack frames, these calculators seem strange: How can they keep accessing <code>n</code> after <code>make_calculator</code> returns?  The answer is to imagine that JavaScript doesn't use \"stack frames\", but instead uses \"heap frames\", which can persist after the function call that made them returns.</em></p>\n\n<p>Inner functions like <code>add</code> and <code>multiply</code>, which access variables declared in an outer function<sup>**</sup>, are called <em>closures</em>.</p>\n\n<p><strong>That is pretty much all there is to closures.</strong></p>\n\n<p><br></p>\n\n<hr>\n\n<p><sup><sup>*</sup> For example, it covers all the points in the \"Closures for Dummies\" article given in <a href=\"http://stackoverflow.com/a/111111/706054\">another answer</a>, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in <a href=\"http://stackoverflow.com/a/111200/706054\">the accepted answer</a>, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in <a href=\"http://stackoverflow.com/a/111114/706054\">this answer</a> but a bit shorter and less abstract. It does not cover the point of <a href=\"http://stackoverflow.com/a/17200991/706054\">this answer</a> or <a href=\"http://stackoverflow.com/questions/111102/how-do-javascript-closures-work/17308587?noredirect=1#comment26377355_111111\">this comment</a>, which is that JavaScript makes it difficult to plug the <em>current</em> value of a loop variable into your inner function: The \"plugging in\" step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function's copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the \"plugging in\" way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values. </sup></p>\n\n<p><sup><sup>**</sup> Any outer function, if several are nested, or even in the global context, as <a href=\"http://stackoverflow.com/a/5099447/706054\">this answer</a> points out clearly.</sup></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matt",
                        "user_id": 706054
                    },
                    "score": 57
                },
                {
                    "body": "<p>A closure is basically creating two things :\n- a function\n- a private scope that only that function can access</p>\n\n<p>It is like putting some coating around a function.</p>\n\n<p>So to a 6-years-old, it could be explained by giving an analogy. Let's say I build a robot. That robot can do many things. Among those things, I programmed it to count the number of birds he sees in the sky. Each time he has seen 25 birds, he should tell me how many birds he has seen since the beginning.</p>\n\n<p>I don't know how many birds he has seen unless he has told me. Only he knows. That's the private scope. That's basically the robot's memory. Let's say I gave him 4&nbsp;GB.</p>\n\n<p>Telling me how many birds he has seen is the returned function. I also created that.</p>\n\n<p>That analogy is a bit sucky, but someone could improve it I guess.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Taye",
                        "user_id": 2076015
                    },
                    "score": 1
                },
                {
                    "body": "<p>The word <em>closure</em> simply refers to being able to access <em>objects</em> (six-year-old: things) that are <em>closed</em> (six-year-old: private) within a <em>function</em> (six-year-old: box). Even if the <em>function</em> (six-year-old: box) is out of <em>scope</em> (six-year-old: sent far away).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cube",
                        "user_id": 354992
                    },
                    "score": 1
                },
                {
                    "body": "<p>The more I think about closure the more I see it as a 2-step process: <strong>init - action</strong></p>\n\n<pre><code>init: pass first what's needed...\naction: in order to achieve something for later execution.\n</code></pre>\n\n<p>To a 6-year old, I'd emphasize on the practical aspect of closure:</p>\n\n<pre><code>Daddy: Listen. Could you bring mum some milk (2).\nTom: No problem.\nDaddy: Take a look at the map that Daddy has just made: mum is there and daddy is here. \nDaddy: But get ready first. And bring the map with you (1), it may come in handy\nDaddy: Then off you go (3). Ok?\nTom: A piece of cake!\n</code></pre>\n\n<p><strong>Example</strong>: <em>Bring some milk to mum (=action). First get ready and bring the map (=init).</em></p>\n\n<pre><code>function getReady(map) { \n    var cleverBoy = 'I examine the ' + map;\n    return function(what, who) {\n        return 'I bring ' + what + ' to ' + who + 'because + ' cleverBoy; //I can access the map\n    }\n}\nvar offYouGo = getReady('daddy-map');\noffYouGo('milk', 'mum');\n</code></pre>\n\n<p>Because you bring with you a very important piece of information (the map), you're enough knowledgeable to execute other similar actions:</p>\n\n<pre><code>offYouGo('potatoes', 'great mum');\n</code></pre>\n\n<p>To a developer I'd make a parallelism between closure and OOP. \nThe <strong>init phase</strong> is similar to passing arguments to a constructor in a traditional OO language; the <strong>action phase</strong> is ultimately the method you call to achieve what you want. And the method has access these init arguments using a mechanism called <em>closure</em>.</p>\n\n<p>See my another answer illustrating the parallelism between OO and closure:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1595611/how-to-properly-create-a-custom-object-in-javascript/21352366#21352366\">How to &quot;properly&quot; create a custom object in JavaScript?</a> </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "roland",
                        "user_id": 313353
                    },
                    "score": 7
                },
                {
                    "body": "<p>How I'd explain it to a six-year-old:</p>\n\n<p>You know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn't really own anything, right? But its parents own a house, so whenever someone asks the child \"Where's your home?\", he/she can answer \"that house!\", and point to the house of its parents. A \"Closure\" is the ability of the child to always (even if abroad) be able to say it has a home, even though it's really the parent's who own the house. :-)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Magne",
                        "user_id": 380607
                    },
                    "score": 43
                },
                {
                    "body": "<h1>The simplest, shortest, most easy to understand answer:</h1>\n\n<p>A closure is a block of code where each line can reference the same set of variables with the same variable names. </p>\n\n<p>If \"this\" means something different than it does somewhere else, then you know it is two different closures.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nick Manning",
                        "user_id": 1763217
                    },
                    "score": -1
                },
                {
                    "body": "<p>If you understand it well you can explain it simple. And the simplest way is abstracting it from the context. Code aside, even programming aside. A metaphor example will do it better.</p>\n\n<p>Let's imagine that a function is a room which wall are glass, but they are special glass, like the ones in an interrogation room. From outside they are opaque, from inside they are transparent. It can be rooms inside other rooms, and the only way of contact is a phone. If you call from outside, you don't know what is in it, but you know that the people inside will do a task if you give them certain information. They can see outside, so they can ask you for stuff that are outside and make changes to that stuff, but you can't change what it is inside from the outside, you don't even see (know) what it is inside. The people inside that room you are calling see what it is outside, but not what it is inside the rooms in that room, so they interact with them the way you are doing from outside. The people inside the most inner rooms can see many things, but the people of the most outer room  don't even know about the most inner rooms existence.</p>\n\n<p>For each call to an inner room, the people in that room keeps a record of the information about that specific call, and they are so good doing that that they never mistake one call stuff with other call stuff.</p>\n\n<p>Rooms are functions, visibility is scope, people doing task is statements, stuff are objects, phone calls are function calls, phone call information is arguments, call records are scope instances, the most outer room is the global object.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Juan Garcia",
                        "user_id": 1802325
                    },
                    "score": 2
                },
                {
                    "body": "<p>Even though many beautiful definitions of JavaScript closures exists on the Internet, I am trying to start explaining my six-year-old friend with my favourite definitions of closure which helped me to understand the closure much better.</p>\n\n<p><strong>What is a Closure?</strong></p>\n\n<p>A closure is an inner function that has access to the outer (enclosing) function\u2019s variables\u2014scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function\u2019s variables, and it has access to the global variables.</p>\n\n<p>A closure is the local variables for a function - kept alive after the function has returned.</p>\n\n<p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created in.</p>\n\n<p>Closures are an extension of the concept of scope. With closures, functions have access to variables that were available in the scope where the function was created.</p>\n\n<p>A closure is a stack-frame which is not deallocated when the function returns. (As if a 'stack-frame' were malloc'ed instead of being on the stack!)</p>\n\n<p>Languages such as Java provide the ability to declare methods private, meaning that they can only be called by other methods in the same class. JavaScript does not provide a native way of doing this, but it is possible to emulate private methods using closures.</p>\n\n<p>A \"closure\" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that \"closes\" the expression).</p>\n\n<p>Closures are an abstraction mechanism that allow you to separate concerns very cleanly.</p>\n\n<p><strong>Uses of Closures:</strong></p>\n\n<p>Closures are useful in hiding the implementation of functionality while still revealing the interface.</p>\n\n<p>You can emulate the encapsulation concept in JavaScript using closures.</p>\n\n<p>Closures are used extensively in <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"nofollow\">Node.js</a>.</p>\n\n<p>While object literals are certainly easy to create and convenient for storing data, closures are often a better choice for creating static singleton namespaces in a large web application.</p>\n\n<p><strong>Example of Closures:</strong></p>\n\n<p>Assuming my 6-year-old friend get to know addition very recently in his primary school, I felt this example of adding the two numbers would be the simplest and apt for the six-year-old to learn the closure.</p>\n\n<p><strong>Example 1: Closure is achieved here by returning a function.</strong></p>\n\n<pre><code>function makeAdder(x) {\n    return function(y) {\n        return x + y;\n    };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2));  // 7\nconsole.log(add10(2)); // 12\n</code></pre>\n\n<p><strong>Example 2: Closure is achieved here by returning an object literal.</strong></p>\n\n<pre><code>function makeAdder(x) {\n    return {\n        add: function(y){\n            return x + y;\n        }\n    }\n}\n\nvar add5 = makeAdder(5);\nconsole.log(add5.add(2));//7\n\nvar add10 = makeAdder(10);\nconsole.log(add10.add(2));//12\n</code></pre>\n\n<p><strong>Example 3: Closures in jQuery</strong></p>\n\n<pre><code>$(function(){\n    var name=\"Closure is easy\";\n    $('div').click(function(){\n        $('p').text(name);\n    });\n});\n</code></pre>\n\n<p><strong>Useful Links:</strong></p>\n\n<ul>\n<li><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">Closures</a></em> (Mozilla Developer Network)</li>\n<li><em><a href=\"http://javascriptissexy.com/understand-javascript-closures-with-ease/\" rel=\"nofollow\">Understand JavaScript Closures With Ease</a></em></li>\n</ul>\n\n<p>Thanks to the above links which helps me to understand and explain closure better.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ravi",
                        "user_id": 1000849
                    },
                    "score": 5
                },
                {
                    "body": "<p>I have read all of these before in the past, and they are all very informative. Some come very close to getting the simple explanation and then get complex or remain abstract, defeating the purpose and failing to show a very simple real world use. </p>\n\n<p>Though combing through all the examples and explanations you get a good idea of what closures are and aren't via comments and code, I was still unsatisfied with a very simple illustration that helped me get a closures usefulness without getting so complex. My wife wants to learn coding and I figured I needed to be able to show here not only what, but why, and and how.</p>\n\n<p>I am not sure a six year old will get this, but I think it might be a little closer to demonstrating a simple case in a real world way that might acually be useful and that is easily understandable.</p>\n\n<p>One of the best (or closest to simplest) is the retelling of Morris' Closures for Dummies example.</p>\n\n<p>Taking the \"SayHi2Bob\" concept just one step further demonstrates the two basic things you can glean from reading all the answers:</p>\n\n<ol>\n<li>Closures have access to the containing function's variables.</li>\n<li>Closures persist in their own memory space (and thus are useful for all kinds of oop-y instantiation stuff)</li>\n</ol>\n\n<p>Proving and demonstrating this to myself, I made a little fiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/9ZMyr/2/\" rel=\"nofollow\">http://jsfiddle.net/9ZMyr/2/</a></p>\n\n<pre><code>function sayHello(name) {\n  var text = 'Hello ' + name; // Local variable\n  console.log(text);\n  var sayAlert = function () {\n      alert(text);\n  }\n  return sayAlert;\n}\n\nsayHello(); \n/* This will write 'Hello undefined' to the console (in Chrome anyway), \nbut will not alert though since it returns a function handle to nothing). \nSince no handle or reference is created, I imagine a good js engine would \ndestroy/dispose of the internal sayAlert function once it completes. */\n\n// Create a handle/reference/instance of sayHello() using the name 'Bob'\nsayHelloBob = sayHello('Bob');\nsayHelloBob();\n\n// Create another handle or reference to sayHello with a different name\nsayHelloGerry = sayHello('Gerry');\nsayHelloGerry();\n\n/* Now calling them again demonstrates that each handle or reference contains its own \nunique local variable memory space. They remain in memory 'forever' \n(or until your computer/browser explode) */\nsayHelloBob();\nsayHelloGerry();\n</code></pre>\n\n<p>This demonstrates both of the basic concepts you should get about closures. </p>\n\n<p>In simple terms to explain the why this is useful, I have a base function to which I can make references or handles that contain unique data which persists within that memory reference. I don't have to rewrite the function for each time I want to say someone's name. I have encapsulated that routine and made it reusable.</p>\n\n<p>To me this leads to at least the basic concepts of constructors, oop practices, singletons vs instantiated instances with their own data, etc. etc.</p>\n\n<p>If you start a neophyte with this, then you can move on to more complex object property/member based calls, and hopefully the concepts carry.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "williambq",
                        "user_id": 1200607
                    },
                    "score": 1
                },
                {
                    "body": "<p>A closure is created when the inner function is somehow made available to any scope outside the outer function.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>var outer = function(params){ //Outer function defines a variable called params\n    var inner = function(){ // Inner function has access to the params variable of the outer function\n        return params;\n    }\n    return inner; //Return inner function exposing it to outer scope\n},\nmyFunc = outer(\"myParams\");\nmyFunc(); //Returns \"myParams\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bhojendra Nepal",
                        "user_id": 2138752
                    },
                    "score": 3
                },
                {
                    "body": "<p>Closure is a reusable function:\nIt seems also that you have learnt some languages where closures are available.</p>\n\n<p>So let's us see the equivalence between closures of <a href=\"http://en.wikipedia.org/wiki/Groovy_%28programming_language%29\" rel=\"nofollow\">Groovy</a> (for example) and closures of JavaScript.</p>\n\n<p><img src=\"http://i.stack.imgur.com/i1i9R.png\" alt=\"Enter image description here\"></p>\n\n<h2>How to use:</h2>\n\n<ol>\n<li><p>Groovy:</p>\n\n<pre><code>[1,2,3].myEach{e-&gt;println e+3;}\n</code></pre></li>\n<li><p>JavaScript:</p>\n\n<pre><code>var list=[1,2,3].myEach(function(e){console.log(e+3);})\n</code></pre></li>\n</ol>\n\n<p><strong>For Fiddling:</strong></p>\n\n<ol>\n<li><p>Groovy:</p>\n\n<p><em><a href=\"http://groovyconsole.appspot.com/script/2965001\" rel=\"nofollow\">Closure such as JS</a></em></p></li>\n<li><p>JavaScript:</p>\n\n<p><a href=\"http://jsfiddle.net/abdennour/kXtf4/1/\" rel=\"nofollow\">http://jsfiddle.net/abdennour/kXtf4/1/</a> (jsFiddle)</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Abdennour TOUMI",
                        "user_id": 747579
                    },
                    "score": -5
                },
                {
                    "body": "<p>Closure is when a function is <strong>closed</strong> in a way that it was defined in a namespace which is immutable by the time the function is called.</p>\n\n<p>In JavaScript, it happens when you:</p>\n\n<ul>\n<li>Define one function inside the other function</li>\n<li>The inner function is called after the outer function returned</li>\n</ul>\n\n\n\n<pre><code>// 'name' is resolved in the namespace created for one invocation of bindMessage\n// the processor cannot enter this namespace by the time displayMessage is called\nfunction bindMessage(name, div) {\n\n    function displayMessage() {\n        alert('This is ' + name);\n    }\n\n    $(div).click(displayMessage);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "uszywieloryba",
                        "user_id": 221315
                    },
                    "score": 1
                },
                {
                    "body": "<p>I think it is valuable to take a step back, and examine a more general notion of a \"closure\" -- the so-called \"join operator\".</p>\n\n<p>In mathematics, a \"join\" operator is a function on a partially ordered set which returns the smallest object greater than or equal to its arguments.  In symbols, join [a,b] = d such that d >= a and d >= b, but there does not exist an e such that d > e >= a or d > e >= b.</p>\n\n<p>So the join gives you the smallest thing \"bigger\" than the parts.</p>\n\n<p>Now, note that JavaScript scopes are a partially ordered structure.  So that there is a sensible notion of a join.  In particular, a join of scopes is the smallest scope bigger than the original scopes.  That scope is called the <strong>closure</strong>.</p>\n\n<p>So a closure for the variables a, b, c is the smallest scope (in the lattice of scopes for your program!) that brings a, b, and c into scope.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "nomen",
                        "user_id": 738762
                    },
                    "score": 2
                },
                {
                    "body": "<p>A closure is a block of code which meets three criteria:</p>\n\n<ul>\n<li><p>It can be passed around as a value and</p></li>\n<li><p>executed on demand by anyone who has that value, at which time</p></li>\n<li><p>it can refer to variables from the context in which it was created\n(that is, it is closed with respect to variable access, in the\nmathematical sense of the word \"closed\").</p></li>\n</ul>\n\n<p>(The word \"closure\" actually has an imprecise meaning, and some people don't think that criterion #1 is part of the definition. I think it is.)</p>\n\n<p>Closures are a mainstay of functional languages, but they are present in many other languages as well (for example, Java's anonymous inner classes). You can do cool stuff with them: they allow deferred execution and some elegant tricks of style.</p>\n\n<p>By: Paul Cantrell, @ <a href=\"http://innig.net/software/ruby/closures-in-ruby\" rel=\"nofollow\">http://innig.net/software/ruby/closures-in-ruby</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Magne",
                        "user_id": 380607
                    },
                    "score": 3
                },
                {
                    "body": "<p>Imagine there is a very large park in your town where see a magician called Mr. Coder starting baseball games in different corners of the park using his magic wand, called JavaScript.</p>\n\n<p>Naturally each baseball game has the exact same rules and each game has its own score board.</p>\n\n<p>Naturally, the scores of one baseball game are completely separate from the other games.</p>\n\n<p>A closure is the special way Mr.Coder keeps the scoring of all his magical baseball games separate.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "indiehacker",
                        "user_id": 290150
                    },
                    "score": 3
                },
                {
                    "body": "<p>Here is a simple real time scenario, Just read it through and you will understand how we have used closure here.</p>\n\n<p>all other examples explained above are also very good to understand the concept.</p>\n\n<pre><code>function movieBooking(movieName) {\n    var bookedSeatCount = 0 ;\n    return function(name) {\n                ++bookedSeatCount ;\n            alert( name + \" - \" + movieName + \", Seat - \" + bookedSeatCount )\n    };\n};\n\nvar MI1 = movieBooking(\"Mission Impossible 1 \") ; \nvar MI2 = movieBooking(\"Mission Impossible 2 \") ; \n\nMI1(\"Mayur\");\n// alert \n// Mayur - Mission Impossible 1, Seat - 1 \n\nMI1(\"Raju\");\n// alert \n// Raju - Mission Impossible 1, Seat - 2 \n\nMI2(\"Priyanka\");\n// alert \n// Raja - Mission Impossible 2, Seat - 1 \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mayrya",
                        "user_id": 3145245
                    },
                    "score": 3
                },
                {
                    "body": "<p>As a father of a 6 year old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required) I think the lesson would stick best through hands-on play. If the 6 year old is ready to understand what a closure is, then they are old enough to have a go themselves. I'd suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.</p>\n\n<pre><code>    function sing(person) {\n\n        var firstPart = \"There was \" + person + \" who swallowed \";\n\n        var fly = function() {\n            var creature = \"a fly\";\n            var result = \"Perhaps she'll die\";\n            alert( firstPart + creature + \"\\n\" + result );\n        };\n\n        var spider = function() {\n            var creature = \"a spider\";\n            var result = \"that wiggled and jiggled and tickled inside her\";\n            alert( firstPart + creature + \"\\n\" + result );\n        };\n\n        var bird = function() {\n            var creature = \"a bird\";\n            var result = \"How absurd!\";\n            alert( firstPart + creature + \"\\n\" + result );\n        };    \n\n        var cat = function() {\n            var creature = \"a cat\";\n            var result = \"Imagine That!\";\n            alert( firstPart + creature + \"\\n\" + result );\n        };    \n\n        fly();\n        spider();\n        bird();\n        cat();\n\n    }\n\n    var person=\"an old lady\";\n\n   sing( person );\n</code></pre>\n\n<p><strong>INSTRUCTIONS</strong></p>\n\n<p>DATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can't touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to <em>create</em> touch smell and taste using a computer. It can be made useful by a computer using code.</p>\n\n<p>CODE: All the writing above is called <em>code</em>. It is written in JavaScript.</p>\n\n<p>JAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For Javascript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says \"\u0432\u0441\u0435 \u0441\u0430\u0434\u044f\u0442\u0441\u044f\", the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means \"everybody sit down\" - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.</p>\n\n<p>BROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.</p>\n\n<p>FUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and t-shirts and jeans coming out. Our JavaScript factory only processes data, it can't sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out. </p>\n\n<p>All this data stuff sounds a bit boring but is really very cool; we might have a function that tells a robot what to make for dinner. Lets say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat. I haven't got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could 'talk' to the fridge, and the function could control the robot.</p>\n\n<p>A function normally has a name, parentheses and braces. Like this: </p>\n\n<pre><code>function cookMeal(){    /*STUFF INSIDE THE FUNCTION*/    }\n</code></pre>\n\n<p><em>note that <code>/*...*/</code> and <code>//</code> stop code being read by the browser</em></p>\n\n<p>NAME: You can call a function just about whatever word you want. The example \"cookMeal\" is typical in joining two words together and giving the scond one a capital letter at the beginning - but this is not necessary. It can't have a space in it, and it can't be a number on its own.</p>\n\n<p>PARENTHESES: \"Parentheses\" or <code>()</code> are the letter box on the JavaScript function factory's door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked <em>eg</em> <code>cookMeal( you, me, yourFriend, myFriend, fridge, dinnerTime )</code> , in which case you know what data you have to give it.</p>\n\n<p>BRACES: \"Braces\" which look like this <code>{}</code> are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can't see in.</p>\n\n<p><strong>THE LONG CODE EXAMPLE ABOVE</strong> </p>\n\n<p>Our code begins with the word <em>function</em>, so we know that it is one! Then the name of the function <em>sing</em> - that's my own description of what the function is about. Then parentheses <em>()</em>. The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: <code>( person )</code>. After this there is a brace like this <code>{</code> . This marks the start of the function <em>sing()</em>. It has a partner which marks the end of <em>sing()</em> like this <code>}</code> </p>\n\n<pre><code>function sing( person ){    /*STUFF INSIDE THE FUNCTION*/    }\n</code></pre>\n\n<p>So this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.</p>\n\n<p>Now, after the function <em>sing()</em>, near the end of the code is the line      </p>\n\n<pre><code>var person=\"an old lady\";\n</code></pre>\n\n<p>VARIABLE: The letters <em>var</em> stand for \"variable\". A variable is like an envelope. On the outside this envelope is marked \"person\". On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (its called a string) that make a phrase reading \"an old lady\". Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called <em>arrays</em>). Because this variable is written outside of all the braces <code>{}</code>, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a 'global variable'.</p>\n\n<p>GLOBAL VARIABLE: <em>person</em> is a global variable, meaning that if you change its value from \"an old lady\" to \"a young man\", the <em>person</em> will keep being a young man until you decide to change it again and that any other function in the code can see that it's a young man. Press the F12 button or look at the Options settings to open the developer console of a browser and type \"person\" to see what this value is. Type <code>person=\"a young man\"</code> to change it and then type \"person\" again to see that it has changed.</p>\n\n<p>After this we have the line </p>\n\n<pre><code>sing( person );\n</code></pre>\n\n<p>This line is calling the function, as if it were calling a dog </p>\n\n<blockquote>\n  <p>\"Come on <em>sing</em>, Come and get <em>person</em>!\"</p>\n</blockquote>\n\n<p>When the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.</p>\n\n<p>Functions define actions  - the main function is about singing. It contains a variable called <em>firstPart</em> which applies to the singing about the person that applies to each of the verses of the song: \"There was \" + person + \" who swallowed\". If you type <em>firstPart</em> into the console, you won't get an answer because the variable is locked up in a function - the browser can't see inside the tinted windows of the braces.</p>\n\n<p>CLOSURES: The closures are the smaller functions that are inside the big <em>sing()</em> function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can't be seen from the outside. Thats why the names of the variables (<em>creature</em> and <em>result</em>) can be repeated in the closures but with different values. If you type these variable names in the console window, you won't get its value because it's hidden by two layers of tinted windows.</p>\n\n<p>The closures all know what the <em>sing()</em> function's variable called <em>firstPart</em> is, because they can see out from their tinted windows.</p>\n\n<p>After the closures come the lines</p>\n\n<pre><code>    fly();\n    spider();\n    bird();\n    cat();\n</code></pre>\n\n<p>The sing() function will call each of these functions in the order they are given. Then the sing() function's work will be done.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "grateful",
                        "user_id": 3441335
                    },
                    "score": 11
                },
                {
                    "body": "<p><em>In javascript Closures are awesome ,where variables or arguments are available to inner functions and they will be alive even after the outer functions has returned .</em> </p>\n\n<pre><code> function getFullName(a, b) {\n      return a + b;\n  }\n\n  function makeFullName(fn) {\n\n      return function(firstName) {\n\n          return function(secondName) {\n\n              return fn(firstName, secondName);\n\n          }\n\n      }\n  }\n\nmakeFullName(getFullName)(\"stack\")(\"overflow\"); // stackoverflow\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "shushanth p",
                        "user_id": 4229768
                    },
                    "score": 5
                },
                {
                    "body": "<p>maybe you should consider about object oriented structure instead of inner functions. eg:</p>\n\n<pre><code>var calculate = {\n    number: 0,\n    init: function (num) {\n        this.number = num;\n    },\n    add: function (val) {\n        this.number += val;\n    },\n    rem: function (val) {\n        this.number -= val;\n    }\n};\n</code></pre>\n\n<p>and read result from calculate.number variable, who needs \"return\" anyway.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Psy Chip",
                        "user_id": 1381841
                    },
                    "score": -1
                },
                {
                    "body": "<p><strong>I do not understand why the answers are so complex here.</strong></p>\n\n<p>Here is a closure:</p>\n\n<pre><code>var a = 42;\n\nfunction b() { return a; }\n</code></pre>\n\n<p>Yes. You probably use that many times a day.</p>\n\n<p><br></p>\n\n<blockquote>\n  <p>There is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope <strong>from the perspective of where the function was declared (not run)</strong>.</p>\n  \n  <p>Now what it <em>allows</em> you to do can be more spectacular, see other answers.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "floribon",
                        "user_id": 1501926
                    },
                    "score": 11
                },
                {
                    "body": "<p>Perhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.</p>\n\n<p>A closure is a function that has access to another function's scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing function\u2019s scope.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    innerFunction();\r\n}\r\n\r\nouterFunction();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey</p>\n\n<p>In the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.</p>\n\n<p>Now consider the following:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey</p>\n\n<p>referenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.</p>\n\n<p>And here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case. </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());\r\n\r\nouterFunction = null;\r\nalert(referenceToInnerFunction());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey\nALERT: monkey</p>\n\n<p>But how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?</p>\n\n<p>The reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunction\u2019s scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunction\u2019s variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunction\u2019s variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.</p>\n\n<p>//////////</p>\n\n<p>Two other things about closures to note. First, the closure will always have access to the last values of its containing function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    outerVar = \"gorilla\";\r\n\r\n    innerFunction();\r\n}\r\n\r\nouterFunction();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: gorilla</p>\n\n<p>Second, when a closure is created, it retains a reference to all of its enclosing function\u2019s variables and functions; it doesn\u2019t get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Michael Dziedzic",
                        "user_id": 4171115
                    },
                    "score": 2
                }
            ],
            "body": "<p>Like the old <a href=\"http://en.wikipedia.org/wiki/Albert_Einstein\">Albert Einstein</a> <a href=\"http://www.searchquotes.com/quotation/If_you_can%27t_explain_it_to_a_six_year_old,_you_don%27t_understand_it_yourself./333069/\">said</a>: </p>\n\n<blockquote>\n  <p>If you can't explain it to a six-year-old, you really don't understand it yourself.  </p>\n</blockquote>\n\n<p>Well, I tried to explain JavaScript closures to a 27-year-old friend and completely failed.</p>\n\n<p>How would you explain it to someone with a knowledge of the concepts which make up closures (for example, functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\">the Scheme example</a> given on Stack Overflow, and it did not help.</p>\n",
            "last_activity_date": 1425319697,
            "owner": {
                "display_name": "e-satis",
                "user_id": 9951
            },
            "question_id": 111102,
            "score": 3540,
            "tags": [
                "javascript",
                "closures"
            ],
            "title": "How do JavaScript closures work?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<h2>Preliminaries</h2>\n\n<p>JavaScript has only one data type which can contain multiple values: <strong>Object</strong>. An <strong>Array</strong> is a special form of object.</p>\n\n<p>Both arrays and objects expose a <code>key -&gt; value</code> structure. Keys in an array must be numeric, whereas any string can be used as key in objects. The key-value pairs are also called the <strong>\"properties\"</strong>.</p>\n\n<p>Properties can be accessed either using <strong>dot notation</strong></p>\n\n<pre><code>var value = obj.someProperty;\n</code></pre>\n\n<p>or <strong>bracket notation</strong>, if the property name would not be a valid JavaScript <a href=\"http://es5.github.com/#x7.6\">identifier name <em><sup>[spec]</sup></em></a>, or the name is the value of a variable:</p>\n\n<pre><code>// the space is not a valid character in identifier names\nvar value = obj[\"some Property\"];\n\n// property name as variable\nvar name = \"some Property\";\nvar value = obj[name];\n</code></pre>\n\n<p>For that reason, array elements can only be accessed using bracket notation:</p>\n\n<pre><code>var value = arr[5]; // arr.5 would be a syntax error\n\n// property name / index as variable\nvar x = 5;\nvar value = arr[x];\n</code></pre>\n\n<h3>Wait... what about JSON?</h3>\n\n<p>JSON is a textual representation of data, just like XML, YAML, CSV, and others. To work with such data, it first has to be converted to JavaScript data types, i.e. arrays and objects (and how to work with those was just explained). How to parse JSON is explained in the question <a href=\"http://stackoverflow.com/questions/4935632/how-to-parse-json-in-javascript\">How to parse JSON in JavaScript</a> .</p>\n\n<hr>\n\n<h2>Accessing nested data structures</h2>\n\n<p>A nested data structure is an array or object which refers to other arrays or objects, i.e. its values are arrays or objects. Such structures can be accessed by consecutively applying dot or bracket notation. </p>\n\n<p>Here is an example:</p>\n\n<pre><code>var data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n</code></pre>\n\n<p>Let's assume we want to access the <code>name</code> of the second item. </p>\n\n<p>Here is how we can do it step-by-step:</p>\n\n<p>As we can see <code>data</code> is an object, hence we can access its properties using dot notation. The <code>items</code> property is accessed as follows:</p>\n\n<pre><code>data.items\n</code></pre>\n\n<p>The value is an array, to access its second element, we have to use bracket notation:</p>\n\n<pre><code>data.items[1]\n</code></pre>\n\n<p>This value is an object and we use dot notation again to access the <code>name</code> property. So we eventually get:</p>\n\n<pre><code>var item_name = data.items[1].name;\n</code></pre>\n\n<p>Alternatively, we could have used bracket notation for any of the properties, especially if the name contained characters that would have made it invalid for dot notation usage:</p>\n\n<pre><code>var item_name = data['items'][1]['name'];\n</code></pre>\n\n<h3>I'm trying to access a property but I get only <code>undefined</code> back?</h3>\n\n<p>Most of the time when you are getting <code>undefined</code>, the object/array simply doesn't have a property with that name.</p>\n\n<pre><code>var foo = {bar: {baz: 42}};\nconsole.log(foo.baz); // undefined\n</code></pre>\n\n<p>Use <a href=\"https://developer.mozilla.org/en-US/docs/DOM/console.log\"><code>console.log</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/DOM/console.dir\"><code>console.dir</code></a> and inspect the structure of object / array. The property you are trying to access might be actually defined on a nested object / array.</p>\n\n<pre><code>console.log(foo.bar.baz); // 42\n</code></pre>\n\n<h3>What if the property names are dynamic and I don't know them beforehand?</h3>\n\n<p>If the property names are unknown or we want to access all properties of an object / elements of an array, we can use the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...in\"><code>for...in</code> <em><sup>[MDN]</sup></em></a> loop for objects and the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for\"><code>for</code> <em><sup>[MDN]</sup></em></a> loop for arrays to iterate over all properties / elements.</p>\n\n<p>To iterate over all properties of <code>data</code>, we can iterate over the <strong>object</strong> like so:</p>\n\n<pre><code>for(var prop in data) {\n    // `prop` contains the name of each property, i.e. `'code'` or `'items'`\n    // consequently, `data[prop]` refers to the value of each property, i.e.\n    // either `42` or the array\n}\n</code></pre>\n\n<p>Depending on where the object comes from (and what you want to do), you might have to test in each iteration whether the property is really a property of the object, or it is an inherited property. You can do this with <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>Object#hasOwnProperty</code> <em><sup>[MDN]</sup></em></a>.</p>\n\n<p>To iterate over all elements of the <code>data.items</code> <strong>array</strong>, we use a <code>for</code> loop:</p>\n\n<pre><code>for(var i = 0, l = data.items.length; i &lt; l; i++) {\n    // `i` will take on the values `0`, `1`, `2`,..., i.e. in each iteration\n    // we can access the next element in the array with `data.items[i]`, example:\n    // \n    // var obj = data.items[i];\n    // \n    // Since each element is an object (in our example),\n    // we can now access the objects properties with `obj.id` and `obj.name`. \n    // We could also use `data.items[i].id`.\n}\n</code></pre>\n\n<p>One could also use <code>for...in</code> to iterate over arrays, but there are reasons why this should be avoided: <a href=\"http://stackoverflow.com/questions/2265167/why-is-forvar-item-in-list-with-arrays-considered-bad-practice-in-javascript\">Why is &#39;for(var item in list)&#39; with arrays considered bad practice in JavaScript?</a>.</p>\n\n<p>With the increasing browser support of ECMAScript 5, the array method <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>forEach</code> <em><sup>[MDN]</sup></em></a> becomes an interesting alternative as well:</p>\n\n<pre><code>data.items.forEach(function(value, index, array) {\n    // The callback is executed for each element in the array.\n    // `value` is the element itself (equivalent to `array[index]`)\n    // `index` will be the index of the element in the array\n    // `array` is a reference to the array itself (i.e. `data.items` in this case)\n}); \n</code></pre>\n\n<h3>What if the \"depth\" of the data structure is unknown to me?</h3>\n\n<p>In addition to unknown keys, the \"depth\" of the data structure (i.e. how many nested objects per array) it has, might be unknown as well. How to access deeply nested properties depends on the exact data structure, then?</p>\n\n<p>If the data structure contains repeating structures, e.g. the representation of a binary tree, the solution typically includes to <a href=\"https://en.wikipedia.org/wiki/Recursion_%28computer_science%29\"><strong>recursively</strong> <em><sup>[Wikipedia]</sup></em></a> access each level of the data structure.</p>\n\n<p>Here is an example to get the first leaf node of a binary tree:</p>\n\n<pre><code>function getLeaf(node) {\n    if (node.leftChild) {\n        return getLeaf(node.leftChild); // &lt;- recursive call\n    }\n    else if (node.rightChild) {\n        return getLeaf(node.rightChild); // &lt;- recursive call\n    }\n    else { // node must be a leaf node\n        return node;\n    }\n}\n\nvar first_leaf = getLeaf(root);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/fkling/CW5KW/\"><strong>DEMO</strong></a></p>\n\n<p>A more generic way to access a nested data structure with unknown keys and depth is to test the type of the value and act accordingly.</p>\n\n<p>Here is an example which adds all primitive values inside a nested data structure into an array (assuming it does not contain any functions). If we encounter an object (or array) we simply call <code>toArray</code> again on that value (recursive call).</p>\n\n<pre><code>function toArray(obj) {\n    var result = [];\n    for (var prop in obj) {\n        var value = obj[prop];\n        if (typeof value === 'object') {\n            result.push(toArray(value)); // &lt;- recursive call\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/fkling/c5K3r/\"><strong>DEMO</strong></a></p>\n\n<hr>\n\n<h2>Helpers</h2>\n\n<p>Since the structure of a complex object or array is not necessarily obvious, we can inspect the value at each step to decide how to move further. <a href=\"https://developer.mozilla.org/en-US/docs/DOM/console.log\"><code>console.log</code> <em><sup>[MDN]</sup></em></a> and <a href=\"https://developer.mozilla.org/en-US/docs/DOM/console.dir\"><code>console.dir</code> <em><sup>[MDN]</sup></em></a> help us doing this. For example (output of the Chrome console):</p>\n\n<pre><code>&gt; console.log(data.items)\n [ Object, Object ]\n</code></pre>\n\n<p>Here we see that that <code>data.items</code> is an array with two elements which are both objects. In Chrome console the objects can even be expanded and inspected immediately.</p>\n\n<pre><code>&gt; console.log(data.items[1])\n  Object\n     id: 2\n     name: \"bar\"\n     __proto__: Object\n</code></pre>\n\n<p>This tells us that <code>data.items[1]</code> is an object, and after expanding it we see that it has three properties, <code>id</code>, <code>name</code> and <code>__proto__</code>. The latter is an internal property used for the prototype chain of the object. The prototype chain and inheritance is out of scope for this answer, though.</p>\n\n<hr>\n\n<h2>Further reading material</h2>\n\n<p>How to access arrays and objects is basic JavaScript knowledge and therefore it is advisable to read the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide\">MDN JavaScript Guide</a>, especially the sections</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Working_with_Objects\">Working with Objects</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Array_Object\">Arrays</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Felix Kling",
                        "user_id": 218196
                    },
                    "score": 258
                },
                {
                    "body": "<p>You can access it this way</p>\n\n<pre><code>data.items[1].name\n</code></pre>\n\n<p>or</p>\n\n<pre><code>data[\"items\"][1][\"name\"]\n</code></pre>\n\n<p>Both ways are equal.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vitmalina",
                        "user_id": 1402150
                    },
                    "score": 12
                },
                {
                    "body": "<p>In case you're trying to access an <code>item</code> from the example structure by <code>id</code> or <code>name</code>, without knowing it's position in the array, the easiest way to do it would be to use <a href=\"http://underscorejs.org/\" rel=\"nofollow\">underscore.js</a> library:</p>\n\n<pre><code>var data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n\n_.find(data.items, function(item) {\n  return item.id === 2;\n});\n// Object {id: 2, name: \"bar\"}\n</code></pre>\n\n<p>From my experience, using higher order functions instead of <code>for</code> or <code>for..in</code> loops results in code that is easier to reason about, and hence more maintainable.</p>\n\n<p>Just my 2 cents.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "finishingmove",
                        "user_id": 1218080
                    },
                    "score": 5
                },
                {
                    "body": "<p>In my opinion, your true need is looking for the item with id '1' or with name 'foo'. If I guess right, <strong><a href=\"https://github.com/dabeng/JSON-Loop\" rel=\"nofollow\">JSON-Loop</a></strong> will help you a lot.Here's the <strong><a href=\"http://dabeng.github.io/JSON-Loop/\" rel=\"nofollow\">DEMO</a></strong> Page.The following is core code snippets:</p>\n\n<pre><code>var jsonloop = new JSONLoop(data, 'id', 'items');\n// find the item object with name 'foo'\njsonloop.findNodes(data, {'name': 'foo'}, function(err, nodes) {\n  nodes.forEach(function(node) {\n    console.dir(node);\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dabeng",
                        "user_id": 3152349
                    },
                    "score": 0
                },
                {
                    "body": "<p>Using <strong>JSONPath</strong> would be one of the most flexible solutions if you are willing to include a library:\n<a href=\"https://github.com/s3u/JSONPath\" rel=\"nofollow\">https://github.com/s3u/JSONPath</a> (node and browser)</p>\n\n<p>For your use case the json path would be:</p>\n\n<pre><code>$..items[1].name\n</code></pre>\n\n<p>so:</p>\n\n<pre><code>var secondName = jsonPath.eval(data, \"$..items[1].name\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andrejs",
                        "user_id": 1180621
                    },
                    "score": 0
                },
                {
                    "body": "<p>At times, accessing a nested object using a string can be desirable. The simple approach is the first level, for example</p>\n\n<pre><code>var obj = { hello: \"world\" };\nvar key = \"hello\";\nalert(obj[key]);//world\n</code></pre>\n\n<p>But this is often not the case with complex json. As json becomes more complex, the approaches for finding values inside of the json also become complex. A recursive approach for navigating the json is best, and how that recursion is leveraged will depend on the type of data being searched for. If there are conditional statements involved, a <a href=\"http://stackoverflow.com/a/11657379/1026459\">json search</a> can be a good tool to use.</p>\n\n<p>If the property being accessed is already known, but the path is complex, for example in this object</p>\n\n<pre><code>var obj = {\n arr: [\n    { id: 1, name: \"larry\" },    \n    { id: 2, name: \"curly\" },\n    { id: 3, name: \"moe\" }\n ]\n};\n</code></pre>\n\n<p>And you know you want to get the first result of the array in the object, perhaps you would like to use</p>\n\n<pre><code>var moe = obj[\"arr[0].name\"];\n</code></pre>\n\n<p>However, that will cause an exception as there is no property of object with that name. The solution to be able to use this would be to flatten the tree aspect of the object. This can be done recursively.</p>\n\n<pre><code>function flatten(obj){\n var root = {};\n (function tree(obj, index){\n   var suffix = toString.call(obj) == \"[object Array]\" ? \"]\" : \"\";\n   for(var key in obj){\n    if(!obj.hasOwnProperty(key))continue;\n    root[index+key+suffix] = obj[key];\n    if( toString.call(obj[key]) == \"[object Array]\" )tree(obj[key],index+key+suffix+\"[\");\n    if( toString.call(obj[key]) == \"[object Object]\" )tree(obj[key],index+key+suffix+\".\");   \n   }\n })(obj,\"\");\n return root;\n}\n</code></pre>\n\n<p>Now, the complex object can be flattened</p>\n\n<pre><code>var obj = previous definition;\nvar flat = flatten(obj);\nvar moe = flat[\"arr[0].name\"];//moe\n</code></pre>\n\n<p>Here is a <strong><em><a href=\"http://jsfiddle.net/73172hr0/\" rel=\"nofollow\"><code>jsFiddle Demo</code></a></em></strong> of this approach being used.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Travis J",
                        "user_id": 1026459
                    },
                    "score": 2
                }
            ],
            "body": "<p>I have a (nested) data structure containing objects and arrays. How can I extract the information, i.e. access a specific or multiple values (or keys)?</p>\n\n<p>For example:</p>\n\n<pre><code>var data = {\n    code: 42,\n    items: [{\n        id: 1,\n        name: 'foo'\n    }, {\n        id: 2,\n        name: 'bar'\n    }]\n};\n</code></pre>\n\n<p>How could I access the <code>name</code> of the second item in <code>items</code>?</p>\n",
            "last_activity_date": 1414706088,
            "owner": {
                "display_name": "Felix Kling",
                "user_id": 218196
            },
            "question_id": 11922383,
            "score": 166,
            "tags": [
                "javascript",
                "arrays",
                "object",
                "recursion"
            ],
            "title": "Access / process (nested) objects, arrays or JSON"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Your code is split into two entirely separate parts, the <em>server side</em> and the <em>client side</em>.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>                    |\n               ----------&gt;\n              HTTP request\n                    |\n+--------------+    |    +--------------+\n|              |    |    |              |\n|    browser   |    |    |  web  server |\n| (JavaScript) |    |    |  (PHP etc.)  |\n|              |    |    |              |\n+--------------+    |    +--------------+\n                    |\n  client side       |      server side\n                    |\n               &lt;----------\n          HTML, CSS, JavaScript\n                    |\n</code></pre>\n\n<p>The two sides communicate via HTTP requests and responses. PHP is executed on the server and outputs some HTML and maybe JavaScript code which is sent as response to the client where the HTML is interpreted and the JavaScript is executed. Once PHP has finished outputting the response, the script ends and nothing will happen on the server until a new HTTP request comes in.</p>\n\n<p>The example code executes like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var foo = 'bar';\n    &lt;?php\n        file_put_contents('foo.txt', ' + foo + ');\n    ?&gt;\n\n    var baz = &lt;?php echo 42; ?&gt;;\n    alert(baz);\n&lt;/script&gt;\n</code></pre>\n\n<p>Step 1, PHP executes all code between <code>&lt;?php ?&gt;</code> tags. The result is this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var foo = 'bar';\n\n    var baz = 42;\n    alert(baz);\n&lt;/script&gt;\n</code></pre>\n\n<p>The <code>file_put_contents</code> call did not result in anything, it just wrote \" + foo + \" into a file. The <code>&lt;?php echo 42; ?&gt;</code> call resulted in the output \"42\", which is now in the spot where that code used to be.</p>\n\n<p>This resulting HTML/JavaScript code is now sent to the client, where it gets evaluated. The <code>alert</code> call works, while the <code>foo</code> variable is not used anywhere.</p>\n\n<p><strong>All PHP code is executed on the server before the client even starts executing any of the JavaScript. There's no PHP code left in the response that JavaScript could interact with.</strong></p>\n\n<p>To call some PHP code, the client will have to send a new HTTP request to the server. This can happen using one of three possible methods:</p>\n\n<ol>\n<li>A link, which causes the browser to load a new page.</li>\n<li>A form submission, which submits data to the server and loads a new page.</li>\n<li>An <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">AJAX</a> request, which is a Javascript technique to make a regular HTTP request to the server (like 1. and 2. will), but without leaving the current page.</li>\n</ol>\n\n<p><a href=\"http://stackoverflow.com/questions/23740548/how-to-pass-variables-and-data-from-php-to-javascript/23741119\">Here's a question outlining these method in greater detail</a></p>\n\n<p>You can also use JavaScript to make the browser open a new page using <code>window.location</code> or submit a form, emulating possibilities 1. and 2.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "deceze",
                        "user_id": 476
                    },
                    "score": 146
                },
                {
                    "body": "<p>Your Javascript will execute on the client, not on the server. This means that <code>foo</code> is not evaluated on the server side and therefore its value can't be written to a file on the server.</p>\n\n<p>The best way to think about this process is as if you're generating a text file dynamically. The text you're generating only becomes executable code once the browser interprets it. Only what you place between <code>&lt;?php</code> tags is evaluated on the server.</p>\n\n<p>By the way, making a habit of embedding random pieces of PHP logic in HTML or Javascript can lead to seriously convoluted code. I speak from painful experience.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "NitayArt",
                        "user_id": 1419843
                    },
                    "score": 9
                },
                {
                    "body": "<p>To determine why <em>PHP</em> code doesn't work in <em>JavaScript</em> code we need to understand what is <strong>client side</strong> and <strong>server side</strong> language and how they work </p>\n\n<p><em>Server-side languages (PHP etc.)</em>:  They retrieve records from databases, maintain state over the <a href=\"http://stackoverflow.com/questions/4913763/what-does-it-mean-when-they-say-http-is-stateless\">stateless <em>HTTP</em> connection</a>, and do a lot of things that require  security. hey reside on the server, these programs never have their source code exposed to the user </p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/KoYhX.png\" alt=\"Image from wikipedia_http://en.wikipedia.org/wiki/File:Scheme_dynamic_page_en.svg\">\n  <sub><a href=\"http://en.wikipedia.org/wiki/File:Scheme_dynamic_page_en.svg\">image attr</a></sub></p>\n</blockquote>\n\n<p>so you can easily see that server side language handle HTTP request  and process it and as @deceze said  <em>PHP is executed on the server and outputs some HTML and maybe JavaScript code which is sent as response to the client where the HTML is interpreted and the JavaScript is executed</em></p>\n\n<p>while at the other hand <em>Client Side Language (like JavaScript)</em> Reside on browser and run at the browser , <em>Client-side scripting</em> generally refers to the class of computer programs on the web that are executed client-side, by the user's web browser, instead of <em>server-side</em>.</p>\n\n<p>JavaScript is visible to the user and can be easily modified so for security stuff we must not relay on JavaScript </p>\n\n<p>So when you make a <em>HTTP</em> request on server than  The server first reads the PHP file carefully to see if there are any tasks that need to be executed and send response to client side and again as @deceze said *Once PHP has finished outputting the response, the script ends and nothing will happen on the server until a new <em>HTTP</em> request comes in.*</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/Ax87s.png\" alt=\"Graphical representation\"></p>\n  \n  <p><sub><a href=\"http://www.html.net/tutorials/php/lesson1.php\">Image source </a></sub> </p>\n</blockquote>\n\n<p>So now what can I do if I need to  call PHP? It depends how you need to do it: either by reloading the page or by using an AJAX call.</p>\n\n<ol>\n<li>You can do by reloading page and send <em>HTTP</em> request </li>\n<li>you can make AJAX call with JavaScript and this does not require reloading page </li>\n</ol>\n\n<p><strong>Good Read:</strong></p>\n\n<ol>\n<li><a href=\"http://en.wikipedia.org/wiki/Server-side_scripting\">Wikipedia : Server-side scripting</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Client-side_scripting\">Wikipedia : Client-side scripting</a></li>\n<li><a href=\"http://programmers.stackexchange.com/a/171210/51446\">Madara Uchiha : Difference between client side and server side programming</a></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "NullPoi\u0438te\u044f",
                        "user_id": 1723893
                    },
                    "score": 44
                }
            ],
            "body": "<p>I have this code:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var foo = 'bar';\n    &lt;?php\n        file_put_contents('foo.txt', ' + foo + ');\n    ?&gt;\n\n    var baz = &lt;?php echo 42; ?&gt;;\n    alert(baz);\n&lt;/script&gt;\n</code></pre>\n\n<p>Why does this not write \"bar\" into my text file, but alerts \"42\"?</p>\n",
            "last_activity_date": 1408723805,
            "owner": {
                "display_name": "deceze",
                "user_id": 476
            },
            "question_id": 13840429,
            "score": 103,
            "tags": [
                "javascript",
                "php",
                "client-side",
                "server-side"
            ],
            "title": "What is the difference between client-side and server-side programming?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Prototypes are <strong>NOT</strong> instantiated for each instance of an object.</p>\n\n<pre><code>Hamster.prototype.food = []\n</code></pre>\n\n<p>Every instance of Hamster will share that array</p>\n\n<p>If you need (and you do in this case) separate instances of food collections for each Hamster, you need to create the property on the instance. For example:</p>\n\n<pre><code>function Hamster() {\n  this.food = [];\n}\n</code></pre>\n\n<p>To answer your question about Example 1, if it doesn't find the property anywhere in the prototype chain, it creates the property on the target object.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BLSully",
                        "user_id": 622129
                    },
                    "score": 5
                },
                {
                    "body": "<p><strong>Constructor function introduction</strong></p>\n\n<p>You can use a function as a constructor to create objects, if the constructor function is named Person then the object(s) created with that constructor are instances of Person.</p>\n\n<pre><code>var Person = function(name){\n  this.name = name;\n};\nPerson.prototype.walk=function(){\n  this.step().step().step();\n};\nvar bob = new Person(\"Bob\");\n</code></pre>\n\n<p>Person is the constructor function. When you create an instance using Person you have to use the new keyword:</p>\n\n<pre><code>var bob = new Person(\"Bob\");console.log(bob.name);//=Bob\nvar ben = new Person(\"Ben\");console.log(ben.name);//=Ben\n</code></pre>\n\n<p>The property/member <code>name</code> is instance specific, it's different for bob and ben</p>\n\n<p>The member <code>walk</code> is part of Person.prototype and is shared for all instances bob and ben are instances of Person so they share the walk member (bob.walk===ben.walk).</p>\n\n<pre><code>bob.walk();ben.walk();\n</code></pre>\n\n<p>Because walk() could not be found on bob directly JavaScript will look for it in the Person.prototype as this is the constructor of bob. If it can't be found there it'll look on Object.prototype. This is called the prototype chain. The prototype part of inheritance is done by lengthening this chain; for example bob => Employee.prototype => Person.prototype => Object.prototype (more on inheritance later).</p>\n\n<p>Even though bob, ben and all other created Person instances share walk the function will behave differently per instance because in the walk function it uses <code>this</code>. The value of <code>this</code> will be the invoking object; for now let's say it's the current instance so for <code>bob.walk()</code> \"this\" will be bob. (more on \"this\" and the invoking object later).</p>\n\n<p>If ben was waiting for a red light and and bob was at a green light; then you'll invoke walk() on both ben and bob obviously something different would happen to ben and bob.</p>\n\n<p>Shadowing members happens when we do something like <code>ben.walk=22</code>, even though bob and ben share <code>walk</code> the <em>assignment</em> of 22 to ben.walk will not affect bob.walk. This is because that statement will create a member called <code>walk</code> on ben directly and assign it a value of 22. There will be 2 different walk members: ben.walk and Person.prototype.walk.</p>\n\n<p>When asking for bob.walk you'll get the Person.prototype.walk function because <code>walk</code> could not be found on bob. Asking for ben.walk however will get you the value 22 because the member walk has been created on ben and since JavaScript found walk on ben it will not look in the Person.prototype.</p>\n\n<p>When using Object.create with 2 arguments, Object.defineProperty or Object.defineProperties shadowing works a bit different. More info on that <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch5.md#setting--shadowing-properties\" rel=\"nofollow\">here</a>.</p>\n\n<p><strong>More about prototype</strong></p>\n\n<p>An object can inherit from another object through the use of prototype. You can set the prototype of any object with any other object using <code>Object.create</code>. In the constructor function introduction we have seen that if a member can't be found on the object then JavaScript will look in the prototpe chain for it. </p>\n\n<p>In previous part we have seen that re assignment of members that come from an instance's prototype (ben.walk) will shadow that member (create walk on ben rather than changing Person.prototype.walk).</p>\n\n<p>What if we don't re assign but mutate the member? Mutating is (for example) changing sub properties of an Object or invoking functions that will change the object's value. For example:</p>\n\n<pre><code>var o = [];\nvar a = o;\na.push(11);//mutate a, this will change o\na[1]=22;//mutate a, this will change o\n</code></pre>\n\n<p>The following code demonstrates the difference between prototype members and instance members by mutating members.</p>\n\n<pre><code>var person = {\n  name:\"default\",//immutable so can be used as default\n  sayName:function(){\n    console.log(\"Hello, I am \"+this.name);\n  },\n  food:[]//not immutable, should be instance specific\n         //  not suitable as prototype member\n};\nvar ben = Object.create(person);\nben.name = \"Ben\";\nvar bob = Object.create(person);\nconsole.log(bob.name);//=default, setting ben.name shadowed the member\n                      //  so bob.name is actually person.name\nben.food.push(\"Hamburger\");\nconsole.log(bob.food);//=[\"Hamburger\"], mutating a shared member on the\n// prototype affects all instances as it changes person.food\nconsole.log(person.food);//=[\"Hamburger\"]\n</code></pre>\n\n<p>The code above shows that ben and bob share members from person. There is only one person, it is set as bob's and ben's prototype (person is used as the first object in the prototype chain to look up requested members that don't exist on the instance). The problem with the above code is that bob and ben should have their own <code>food</code> member. This is where the constructor function comes in. It is used to create instance specific members. You could also pass arguments to it to set values of these instance specific members.</p>\n\n<p>The next code shows another way to implement the constructor function, syntax is different but the idea is the same:</p>\n\n<ol>\n<li>Define an object that has members that will be same for many instances (person is a blueprint for bob and ben and can be for jilly, marie, clair ...)</li>\n<li>Define instance specific members that should be unique for instances (bob and ben).</li>\n<li>Create an instance running the code in step 2.</li>\n</ol>\n\n<p>With constructor functions you'll set the prototype in step 2 in the following code we set the prototype in step 3.</p>\n\n<p>In this code I have removed name from prototype as well as food because you are most likely going to shadow this almost immediately when creating an instance anyway. Name is now an instance specific member with a default value set in the constructor function. Becaus the food member is also moved from prototype to instance specific member it will not affect bob.food when adding food to ben.</p>\n\n<pre><code>var person = {\n  sayName:function(){\n    console.log(\"Hello, I am \"+this.name);\n  },\n  //need to run the constructor function when creating\n  //  an instance to make sure the instance has\n  //  instance specific members\n  constructor:function(name){\n    this.name = name || \"default\";\n    this.food = [];\n    return this;\n  }\n};\nvar ben = Object.create(person).constructor(\"Ben\");\nvar bob = Object.create(person).constructor(\"Bob\");\nconsole.log(bob.name);//=\"Bob\"\nben.food.push(\"Hamburger\");\nconsole.log(bob.food);//=[]\n</code></pre>\n\n<p>You may come across similar patterns that are more robust to help with object creation and object definition. </p>\n\n<p><strong>Inheritance</strong></p>\n\n<p>The following code shows how to inherit. The tasks are basically the same as in code before with a little extra</p>\n\n<ol>\n<li>Define instance specific members of an object (functions Hamster and RussionMini).</li>\n<li>Set the prototype part of inheritance (RussionMini.prototype = Object.create(Hamster.prototype))</li>\n<li>Define members that can be shared among instances.(Hamster.prototype and RussionMini.prototype)</li>\n<li>Create an instance running the code in step 1 and for objects that inherit have them run the Parent code as well (Hamster.apply(this,arguments);)</li>\n</ol>\n\n<p>Using a pattern some would call \"classical inheritance\". If you are confused by the syntax I'll be happy to explain more or provide different patterns.</p>\n\n<pre><code>function Hamster(){\n this.food=[];\n}\nfunction RussionMini(){\n  //Hamster.apply(this,arguments) executes every line of code\n  //in the Hamster body where the value of \"this\" is\n  //the to be created RussionMini (once for mini and once for betty)\n  Hamster.apply(this,arguments);\n}\n//setting RussionMini's prototype\nRussionMini.prototype=Object.create(Hamster.prototype);\n//setting the built in member called constructor to point\n// to the right function (previous line has it point to Hamster)\nRussionMini.prototype.constructor=RussionMini;\nmini=new RussionMini();\n//this.food (instance specic to mini)\n//  comes from running the Hamster code\n//  with Hamster.apply(this,arguments);\nmini.food.push(\"mini's food\");\n//adding behavior specific to Hamster that will still be\n//  inherited by RussionMini because RussionMini.prototype's prototype\n//  is Hamster.prototype\nHamster.prototype.runWheel=function(){console.log(\"I'm running\")};\nmini.runWheel();//=I'm running\n</code></pre>\n\n<p><strong>Object.create to set prototype part of inheritance</strong></p>\n\n<p>Here is the documentation about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" rel=\"nofollow\">Object.create</a>, it basically returns the second argument (not supported in the polyfil) with the first argument as the returned object's prototype. </p>\n\n<p>If no second argument was given it'll return an empty object with first argument to be used as the returned object's prototype (the first object to be used in the returned object's prototype chain).</p>\n\n<p>Some would set the prototype of RussionMini to an instance of Hamster (RussionMini.prototype = new Hamster()). This is not desirable because even though it accomplishes the same (RussionMini.prototype's prototype is Hamster.prototype) it also sets Hamster instance members as members of RussionMini.prototype. So RussionMini.prototype.food will exist but is a shared member (remember bob and ben in \"More about prototype\"?). The food member will be shadowed when creating a RussionMini because Hamster code is run with <code>Hamster.apply(this,arguments);</code> that in turn runs <code>this.food = []</code> but any Hamster members will still be members of RussionMini.prototype.</p>\n\n<p>Another reason could be that to create a Hamster a lot of complicated calculations need be done on passed arguments that may be not available yet, again you could pass in dummy arguments but it could unnecessarily complicate your code.</p>\n\n<p><strong>Extending and overriding Parent functions</strong></p>\n\n<p>Sometimes <code>children</code> need to extend <code>parent</code> functions.  </p>\n\n<p>You want the 'child' (=RussionMini) to do something extra. When RussionMini can call the Hamster code to do something and then do something extra you don't need to copy and paste Hamster code to RussionMini.</p>\n\n<p>In the following example we assume that a Hamster can run 3km an hour but a Russion mini can only run half as fast. We can hard code 3/2 in RussionMini but if this value were to change we have multiple places in code where it needs changing. Here is how we use Hamster.prototype to get the parent (Hamster) speed.</p>\n\n<pre><code>var Hamster = function(name){\n if(name===undefined){\n   throw new Error(\"Name cannot be undefined\");\n }\n this.name=name;\n}\nHamster.prototype.getSpeed=function(){\n  return 3;\n}\nHamster.prototype.run=function(){\n  //Russionmini does not need to implement this function as\n  //it will do exactly the same as it does for Hamster\n  //But Russionmini does need to implement getSpeed as it\n  //won't return the same as Hamster (see later in the code) \n  return \"I am running at \" + \n    this.getSpeed() + \"km an hour.\";\n}\n\nvar RussionMini=function(name){\n  Hamster.apply(this,arguments);\n}\n//call this before setting RussionMini prototypes\nRussionMini.prototype = Object.create(Hamster.prototype);\nRussionMini.prototype.constructor=RussionMini;\n\nRussionMini.prototype.getSpeed=function(){\n  return Hamster.prototype\n    .getSpeed.call(this)/2;\n}    \n\nvar betty=new RussionMini(\"Betty\");\nconsole.log(betty.run());//=I am running at 1.5km an hour.\n</code></pre>\n\n<p>The disadvantage is that you hard code Hamster.prototype. There may be patterns that will give you the advantage of <code>super</code> as in Java. </p>\n\n<p>Most of the patterns I've seen will either break when inheritance level is more than 2 levels (Child => Parent => GrandParent) or use more resources by implementing super through <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">closures</a>.</p>\n\n<p>To override a Parent (=Hamster) method you do the same but don't do Hamster.prototype.parentMethod.call(this,....</p>\n\n<p><strong>this.constructor</strong></p>\n\n<p>The constructor property is included in the prototype by JavaScript, you can change it but it should point to the constructor function. So <code>Hamster.prototype.constructor</code> should point to Hamster.</p>\n\n<p>If after setting prototype part of inheritance you should have it point to the right function again.</p>\n\n<pre><code>var Hamster = function(){};\nvar RussionMinni=function(){\n   // re use Parent constructor (I know there is none there)\n   Hamster.apply(this,arguments);\n};\nRussionMinni.prototype=Object.create(Hamster.prototype);\nconsole.log(RussionMinni.prototype.constructor===Hamster);//=true\nRussionMinni.prototype.haveBaby=function(){\n  return new this.constructor();\n};\nvar betty=new RussionMinni();\nvar littleBetty=betty.haveBaby();\nconsole.log(littleBetty instanceof RussionMinni);//false\nconsole.log(littleBetty instanceof Hamster);//true\n//fix the constructor\nRussionMinni.prototype.constructor=RussionMinni;\n//now make a baby again\nvar littleBetty=betty.haveBaby();\nconsole.log(littleBetty instanceof RussionMinni);//true\nconsole.log(littleBetty instanceof Hamster);//true\n</code></pre>\n\n<p><strong>\"Multiple inheritance\" with mix ins</strong></p>\n\n<p>Some things are better not to be inherited, if a Cat can move and then a Cat should not inherit from Movable. A Cat is not a Movable but rather a Cat can move. In a class based language Cat would have to implement Movable. In JavaScript we can define Movable and define implementation here, Cat can either override, extend it or us it's default implementation.</p>\n\n<p>For Movable we have instance specific members (like <code>location</code>). And we have members that are not instance specific (like the function move()). Instance specific members will be set by calling mxIns (added by mixin helper function) when creating an instance. Prototype members will be copied one by one on Cat.prototype from Movable.prototype using the mixin helper function.</p>\n\n<pre><code>var Mixin = function Mixin(args){\n  if(this.mixIns){\n    i=-1;len=this.mixIns.length;\n    while(++i&lt;len){\n        this.mixIns[i].call(this,args);\n      }\n  }  \n};\nMixin.mix = function(constructor, mix){\n  var thing\n  ,cProto=constructor.prototype\n  ,mProto=mix.prototype;\n  //no extending, if multiple prototypes\n  // have members with the same name then use\n  // the last\n  for(thing in mProto){\n    if(Object.hasOwnProperty.call(mProto, thing)){\n      cProto[thing]=mProto[thing];\n    }\n  }\n  //instance intialisers\n  cProto.mixIns = cProto.mixIns || [];\n  cProto.mixIns.push(mix);\n};\nvar Movable = function(args){\n  args=args || {};\n  //demo how to set defaults with truthy\n  // not checking validaty\n  this.location=args.location;\n  this.isStuck = (args.isStuck===true);//defaults to false\n  this.canMove = (args.canMove!==false);//defaults to true\n  //speed defaults to 4\n  this.speed = (args.speed===0)?0:(args.speed || 4);\n};\nMovable.prototype.move=function(){\n  console.log('I am moving, default implementation.');\n};\nvar Animal = function(args){\n  args = args || {};\n  this.name = args.name || \"thing\";\n};\nvar Cat = function(args){\n  var i,len;\n  Animal.call(args);\n  //if an object can have others mixed in\n  //  then this is needed to initialise \n  //  instance members\n  Mixin.call(this,args);\n};\nCat.prototype = Object.create(Animal.prototype);\nCat.prototype.constructor = Cat;\nMixin.mix(Cat,Movable);\nvar poochie = new Cat({\n  name:\"poochie\",\n  location: {x:0,y:22}\n});\npoochie.move();\n</code></pre>\n\n<p>The above is a simple implementation that replaces same named functions with whatever mix in is mixed in last.</p>\n\n<p><strong>The this variable</strong></p>\n\n<p>In all the example code you'll see <code>this</code> referring to the current instance.</p>\n\n<p>The this variable actually refers to the invoking object, it refers to the object that came before the function.</p>\n\n<p>To clarify see the following code:</p>\n\n<pre><code>theInvokingObject.thefunction();\n</code></pre>\n\n<p>The instances where this would refer to the wrong object are usually when attaching event listeners, callbacks or timeouts and intervals. In the next 2 lines of code we <code>pass</code> the function, we don't invoke it. Passing the function is: <code>someObject.aFunction</code> and invoking it is: <code>someObject.aFunction()</code>. The <code>this</code> value does not refer to the object the function was declared on but on the object that <code>invokes</code> it.</p>\n\n<pre><code>setTimeout(someObject.aFuncton,100);//this in aFunction is window\nsomebutton.onclick = someObject.aFunction;//this in aFunction is somebutton\n</code></pre>\n\n<p>To make <code>this</code> in the above cases refer to someObject you can pass a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">closure</a> instead of the function directly:</p>\n\n<pre><code>setTimeout(function(){someObject.aFuncton();},100);\nsomebutton.onclick = function(){someObject.aFunction();};\n</code></pre>\n\n<p>I like to define functions that return a function for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">closures</a> on the prototype to have fine control over the variables that are included in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">closure</a> scope.</p>\n\n<pre><code>var Hamster = function(name){\n  var largeVariable = new Array(100000).join(\"Hello World\");\n  // if I do \n  // setInterval(function(){this.checkSleep();},100);\n  // then largeVariable will be in the closure scope as well\n  this.name=name\n  setInterval(this.closures.checkSleep(this),1000);\n};\nHamster.prototype.closures={\n  checkSleep:function(hamsterInstance){\n    return function(){\n      console.log(typeof largeVariable);//undefined\n      console.log(hamsterInstance);//instance of Hamster named Betty\n      hamsterInstance.checkSleep();\n    };\n  }\n};\nHamster.prototype.checkSleep=function(){\n  //do stuff assuming this is the Hamster instance\n};\n\nvar betty = new Hamster(\"Betty\");\n</code></pre>\n\n<p><strong>Passing (constructor) arguments</strong></p>\n\n<p>When Child calls a Parent (<code>Hamster.apply(this,arguments);</code>) we assume that Hamster uses the same arguments as RussionMini in the same order. For functions that call other functions I usually use another way to pass arguments.</p>\n\n<p>I usually pass one object to a function and have that function mutate whatever it needs (set defaults), then that function will pass it to another function that will do the same and so on and so on. Here is an example:</p>\n\n<pre><code>//helper funciton to throw error\nfunction thowError(message){\n  throw new Error(message)\n};\nvar Hamster = function(args){\n  //make sure args is something so you get the errors\n  //  that make sense to you instead of \"args is undefined\"\n  args = args || {};\n  //default value for type:\n  this.type = args.type || \"default type\";\n  //name is not optional, very simple truthy check f\n  this.name = args.name || thowError(\"args.name is not optional\");\n};\nvar RussionMini = function(args){\n  //make sure args is something so you get the errors\n  //  that make sense to you instead of \"args is undefined\"\n  args = args || {};\n  args.type = \"Russion Mini\";\n  Hamster.call(this,args);\n};\nvar ben = new RussionMini({name:\"Ben\"});\nconsole.log(ben);// Object { type=\"Russion Mini\", name=\"Ben\"}\nvar betty = new RussionMini();//Error: args.name is not optional\n</code></pre>\n\n<p>This way of passing arguments in a function chain is useful in many cases. When you're working on code that would calculate a total of something and later you'd like to re factor the total of that something to be in a certain currency you may have to change a lot of functions to pass the value for currency. You could up scope a currency value (even to global like <code>window.currency='USD'</code>) but that's a bad way to solve it.</p>\n\n<p>With passing an object you could add currency to <code>args</code> whenever it's available in the function chain and mutate/use it whenever you need it without changing the other functions (explicitly have to pass it in the function calls).</p>\n\n<p><strong>Private variables</strong></p>\n\n<p>JavaScript doesn't have a private modifier.</p>\n\n<p>I agree with the following: <a href=\"http://blog.millermedeiros.com/a-case-against-private-variables-and-functions-in-javascript/\" rel=\"nofollow\">http://blog.millermedeiros.com/a-case-against-private-variables-and-functions-in-javascript/</a> and personally have not used them.</p>\n\n<p>You can indicate to other programmers a member is meant to be private by naming it <code>_aPrivate</code> or putting all the private variables in an object variable called <code>_</code>. </p>\n\n<p>You can implement private members through <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">closures</a> but instance specific private members can only be accessed by functions that are not on the prototype.</p>\n\n<p>Not implementing privates as closures would leak implementation and enable you or users extending your code to use members that are not part of your public API. This can be both good and bad. </p>\n\n<p>It's good because it enables you and others to mock certain members for testing easily. It gives others a chance to easily improve (patch) your code but this is also bad because there is no guarantee that a next version of your code has the same implementation and or private members.</p>\n\n<p>By using closures you do not give others a choice and by using the naming convention with documentation you do. This is not specific to JavaScript, in other languages you can decide not to use private members as you trust others to know what they are doing and give them the choice to do as they want (with risks involved).</p>\n\n<p>If you still insist on privates then the <a href=\"http://stackoverflow.com/a/21800194/1641941\">following</a> pattern may help. It doesn't implement private though but implements protected.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "HMR",
                        "user_id": 1641941
                    },
                    "score": 84
                }
            ],
            "body": "<p>So I have these 2 examples, from javascript.info:</p>\n\n<p>Example 1:</p>\n\n<pre><code>var animal = {\n  eat: function() {\n    alert( \"I'm full\" )\n    this.full = true\n  }\n}\n\nvar rabbit = {\n  jump: function() { /* something */ }\n}\n\nrabbit.__proto__ = animal \n\nrabbit.eat() \n</code></pre>\n\n<p>Example 2:</p>\n\n<pre><code>function Hamster() {  }\nHamster.prototype = {\n  food: [],\n  found: function(something) {\n    this.food.push(something)\n  }\n}\n\n// Create two speedy and lazy hamsters, then feed the first one\nspeedy = new Hamster()\nlazy = new Hamster()\n\nspeedy.found(\"apple\")\nspeedy.found(\"orange\")\n\nalert(speedy.food.length) // 2\nalert(lazy.food.length) // 2 (!??)\n</code></pre>\n\n<p>Start from Example 2: when the code reaches <code>speedy.found</code>, it finds no <code>found</code> property in <code>speedy</code>, and so it climbs up to the prototype and changes it there. That's why <code>food.length</code> is equal for both hamsters, in other words they have the same stomach.<br><br>\nFrom this I understand, that when writing up and adding a new property which doesn't exist, the interpreter will go up the prototype chain until it finds the property, and THEN change it.</p>\n\n<p>BUT in Example 1 something else happens:<br>\nwe run <code>rabbit.eat</code>, which changes <code>rabbit.full</code>. <code>full</code> property is nowhere to be found, so it should go up the prototype chain to (to object??), and well, I'm not sure what happens here. In this example the property <code>full</code> of <code>rabbit</code> is created and changed, while in the first example it goes up the prototype chain because it cannot find the property.</p>\n\n<p>I'm confused and cannot see why this happens.</p>\n",
            "last_activity_date": 1427107379,
            "owner": {
                "display_name": "frrlod",
                "user_id": 2107544
            },
            "question_id": 16063394,
            "score": 30,
            "tags": [
                "javascript",
                "inheritance",
                "prototype"
            ],
            "title": "Prototypical inheritance - writing up"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>The difference is that <code>functionOne</code> is defined at run-time, whereas <code>functionTwo</code> is defined at parse-time for a script block.  For example:</p>\n\n<pre><code>&lt;script&gt;\n  // Error\n  functionOne();\n\n  var functionOne = function() {\n  };\n&lt;/script&gt;\n\n&lt;script&gt;\n  // No error\n  functionTwo();\n\n  function functionTwo() {\n  }\n&lt;/script&gt;\n</code></pre>\n\n<p>This also means in <code>Strict</code> mode you can't conditionally define functions using the second syntax:</p>\n\n<pre><code>&lt;script&gt;\n  \"use strict\";\n  if (test) {\n     // Error\n     function functionThree() { doSomething(); }\n  }\n&lt;/script&gt;\n</code></pre>\n\n<p>Without <code>\"use strict\"</code> this would not cause an error and <code>functionThree</code> will be defined irrespective of <code>test</code>'s value.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Greg",
                        "user_id": 24181
                    },
                    "score": 2007
                },
                {
                    "body": "<p>First I want to correct Greg: <code>function abc(){}</code> is scoped too &mdash; the name <code>abc</code> is defined in the scope where this definition is encountered. Example:</p>\n\n<pre><code>function xyz(){\n  function abc(){};\n  // abc is defined here...\n}\n// ...but not here\n</code></pre>\n\n<p>Secondly, it is possible to combine both styles:</p>\n\n<pre><code>var xyz = function abc(){};\n</code></pre>\n\n<p><code>xyz</code> is going to be defined as usual, <code>abc</code> is undefined in all browsers but IE &mdash; do not rely on it being defined. But it will be defined inside its body:</p>\n\n<pre><code>var xyz = function abc(){\n  // xyz is visible here\n  // abc is visible here\n}\n// xyz is visible here\n// abc is undefined here\n</code></pre>\n\n<p>If you want to alias functions on all browsers use this kind of declaration:</p>\n\n<pre><code>function abc(){};\nvar xyz = abc;\n</code></pre>\n\n<p>In this case both <code>xyz</code> and <code>abc</code> are aliases of the same object:</p>\n\n<pre><code>console.log(xyz === abc); // prints \"true\"\n</code></pre>\n\n<p>One compelling reason to use the combined style is the \"name\" attribute of function objects (<strong>not supported by IE</strong>). Basically when you define a function like this:</p>\n\n<pre><code>function abc(){};\nconsole.log(abc.name); // prints \"abc\"\n</code></pre>\n\n<p>its name is automatically assigned. But when you define it like this:</p>\n\n<pre><code>var abc = function(){};\nconsole.log(abc.name); // prints \"\"\n</code></pre>\n\n<p>its name is empty &mdash; we created an anonymous function and assigned it to some variable.</p>\n\n<p>Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:</p>\n\n<pre><code>// assume really.long.external.scoped is {}\nreally.long.external.scoped.name = function shortcut(n){\n  // let's call itself recursively:\n  shortcut(n - 1);\n  // ...\n  // let's pass itself as a callback:\n  someFunction(shortcut);\n  // ...\n}\n</code></pre>\n\n<p>In the example above we can do the same with an external name, but it'll be too unwieldy (and slower).</p>\n\n<p><em>(Another way to refer to itself is to use <code>arguments.callee</code>, which is still relatively long, and not supported in the strict mode.)</em></p>\n\n<p>Deep down JavaScript treats both statements differently. This is a function declaration:</p>\n\n<pre><code>function abc(){}\n</code></pre>\n\n<p><code>abc</code> here is defined everywhere in the current scope:</p>\n\n<pre><code>// we can call it here\nabc(); // works\n// yet it is defined down there\nfunction abc(){}\n// we can call it again\nabc(); // works\n</code></pre>\n\n<p>This is a function expression:</p>\n\n<pre><code>var xyz = function(){};\n</code></pre>\n\n<p><code>xyz</code> here is defined from the point of assignment:</p>\n\n<pre><code>// we can't call it here\nxyz(); // UNDEFINED!!!\n// now it is defined\nxyz = function(){}\n// we can call it here\nxyz(); // works\n</code></pre>\n\n<p>Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.</p>\n\n<p>Fun fact:</p>\n\n<pre><code>var xyz = function abc(){};\nconsole.log(xyz.name); // prints \"abc\"\n</code></pre>\n\n<p>Personally I prefer the \"function expression\" declaration because this way I can control the visibility. When I define the function like that:</p>\n\n<pre><code>var abc = function(){};\n</code></pre>\n\n<p>I know that I defined the function locally. When I define the function like that:</p>\n\n<pre><code>abc = function(){};\n</code></pre>\n\n<p>I know that I defined it globally providing that I didn't define <code>abc</code> anywhere in the chain of scopes. This style of definition is resilient even when used inside eval(). While this definition:</p>\n\n<pre><code>function abc(){};\n</code></pre>\n\n<p>depends on the context and may leave you guessing where it is actually defined, especially in the case of eval() &mdash; the answer is: it depends on browser. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eugene Lazutkin",
                        "user_id": 26394
                    },
                    "score": 980
                },
                {
                    "body": "<p>In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to an name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.</p>\n\n<p>For more information on anonymous functions and lambda calculus, Wikipedia is a good start (<a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Anonymous_function</a>).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kafka",
                        "user_id": 45957
                    },
                    "score": 7
                },
                {
                    "body": "<p>In terms of code maintenance cost named functions are more preferable:</p>\n\n<ul>\n<li>independent from place where they are declared( but still limited by scope). </li>\n<li>More resistant to mistakes like conditional initialization.(You are still able to override if wanted to).</li>\n<li>The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.</li>\n<li>in debugger you will clearly see on call stack the function name instead of \"anonymous/evaluated\" function.</li>\n</ul>\n\n<p>I suspect more PROS for named functions are follow.\nAnd what is listed as advantage of named functions is disadvantage for anonymous ones.</p>\n\n<p>Historically anonymous functions appeared from inability of JS as language to list members with named functions: </p>\n\n<p>{ member:function(){/* how to make this.member a named function? */}\n}</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sasha Firsov",
                        "user_id": 257553
                    },
                    "score": 9
                },
                {
                    "body": "<p>The two code snippets you've posted there will, for almost all purposes, behave the same way.</p>\n\n<p>However, the difference in behaviour is that with the first variant (<code>var functionOne = function() {}</code>), that function can only be called after that point in the code.</p>\n\n<p>With the second variant (<code>function functionTwo()</code>), the function is available to code that runs above where the function is declared.</p>\n\n<p>This is because with the first variant, the function is assigned to the variable foo at run time.  In the second, the function is assigned to that identifier foo at parse time.</p>\n\n<p><strong>More technical info</strong></p>\n\n<p>Javascript has three ways of defining functions.</p>\n\n<ol>\n<li>Your first snippet shows a <strong>function expression</strong>.  This involves using the <em>\"function\" operator</em> to create a function - the result of that operator can be stored in any variable or object property.  The function expression is powerful that way.  The function expression is often called an \"anonymous function\" because it does not have to have a name,</li>\n<li>Your second example is a <strong>function declaration</strong>.  This uses the <em>\"function\" statement</em> to create a function.  The function is made available at parse time and can be called anywhere in that scope.  You can still store it in a variable or object property later.</li>\n<li>The third way of defining a function is the <strong>\"Function()\" constructor</strong>, which is not shown in your original post.  It's not recommended to use this as it works the same way as eval(), which has its problems.</li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "thomasrutter",
                        "user_id": 53212
                    },
                    "score": 53
                },
                {
                    "body": "<p>Speaking about the global context, both, the <code>var</code> statement and a <code>FunctionDeclaration</code> at the end will create a <em>non-deleteable</em> property on the global object, but the value of both <em>can be overwritten</em>.</p>\n\n<p>The subtle difference between the two ways is that when the <a href=\"http://bclary.com/2004/11/07/#a-10.1.3\">Variable Instantiation</a> process runs (before the actual code execution) all identifiers declared with <code>var</code> will be initialized with <code>undefined</code>, and the ones used by the <code>FunctionDeclaration</code>'s will be available since that moment, for example:</p>\n\n<pre><code> alert(typeof foo); // 'function', it's already available\n alert(typeof bar); // 'undefined'\n function foo () {}\n var bar = function () {};\n alert(typeof bar); // 'function'\n</code></pre>\n\n<p>The assignment of the <code>bar</code> <code>FunctionExpression</code> takes place until runtime.</p>\n\n<p>A global property created by a <code>FunctionDeclaration</code> can be overwritten without any problems just like a variable value, e.g.:</p>\n\n<pre><code> function test () {}\n test = null;\n</code></pre>\n\n<p>Another obvious difference between your two examples is that the first function doesn't have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).</p>\n\n<p>About your edited first example (<code>foo = function() { alert('hello!'); };</code>), it is an undeclared assignment, I would highly encourage you to always use the <code>var</code> keyword.</p>\n\n<p>With an assignment, without the <code>var</code> statement, if the referenced identifier is not found in the scope chain, it will become a <em>deleteable</em> property of the global object.</p>\n\n<p>Also, undeclared assignments throw a <code>ReferenceError</code> on ECMAScript 5 under <a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\">Strict Mode</a>.</p>\n\n<p>A must read:</p>\n\n<ul>\n<li><a href=\"http://kangax.github.com/nfe/\">Named function expressions demystified</a></li>\n</ul>\n\n<p><strong>Note</strong>: This answer has been merged from <a href=\"http://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function\">another question</a>, in which the major doubt and misconception from the OP was that identifiers declared with a <code>FunctionDeclaration</code>, couldn't be overwritten which is not the case.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "CMS",
                        "user_id": 5445
                    },
                    "score": 66
                },
                {
                    "body": "<p>An important reason is to add one and only one variable as the \"Root\" of your namespace...</p>\n\n<pre><code>var MyNamespace = {}\nMyNamespace.foo= function() {\n\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var MyNamespace {\n  foo: function() {\n  },\n  ...\n}\n</code></pre>\n\n<p>There are many techniques for namespacing.  Its become more important with the plethora of JavaScript modules available.</p>\n\n<p>Also see <a href=\"http://stackoverflow.com/questions/881515/javascript-namespace-declaration\">Javascript Namespace Declaration</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rob",
                        "user_id": 341616
                    },
                    "score": 20
                },
                {
                    "body": "<p>Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the \"assignment\" variation can set a property of another object.</p>\n\n<p>I often build JavaScript modules with a pattern like this:</p>\n\n<pre><code>(function(){\n    var exports = {};\n\n    function privateUtil() {\n            ...\n    }\n\n    exports.publicUtil = function() {\n            ...\n    };\n\n    return exports;\n})();\n</code></pre>\n\n<p>With this pattern, your public functions will all use assignment, while your private functions use declaration.</p>\n\n<p>(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sean McMillan",
                        "user_id": 117587
                    },
                    "score": 41
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/users/26394/eugene-lazutkin\">@EugeneLazutkin</a> gives an example where he <a href=\"http://stackoverflow.com/a/338053/\">names an assigned function to be able to use <code>shortcut()</code></a> as an internal reference to itself. <a href=\"http://ejohn.org/\">John Resig</a> gives another example - <em>copying a recursive function assigned to another object</em> in his <a href=\"http://ejohn.org/apps/learn/\">Learning Advanced Javascript</a> tutorial. While assigning functions to properties isn't strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.</p>\n\n<p>Examples from the tutorial: recursive calls in <code>yell()</code>:</p>\n\n<p><a href=\"http://ejohn.org/apps/learn/#13\">Tests fail when the original ninja object is removed.</a> (page 13)</p>\n\n<pre><code>var ninja = { \n  yell: function(n){ \n    return n &gt; 0 ? ninja.yell(n-1) + \"a\" : \"hiy\"; \n  } \n}; \nassert( ninja.yell(4) == \"hiyaaaa\", \"A single object isn't too bad, either.\" ); \n\nvar samurai = { yell: ninja.yell }; \nvar ninja = null; \n\ntry { \n  samurai.yell(4); \n} catch(e){ \n  assert( false, \"Uh, this isn't good! Where'd ninja.yell go?\" ); \n}\n</code></pre>\n\n<p><a href=\"http://ejohn.org/apps/learn/#14\">If you name the function that will be called recursively, the tests will pass.</a> (page 14)</p>\n\n<pre><code>var ninja = { \n  yell: function yell(n){ \n    return n &gt; 0 ? yell(n-1) + \"a\" : \"hiy\"; \n  } \n}; \nassert( ninja.yell(4) == \"hiyaaaa\", \"Works as we would expect it to!\" ); \n\nvar samurai = { yell: ninja.yell }; \nvar ninja = {}; \nassert( samurai.yell(4) == \"hiyaaaa\", \"The method correctly calls itself.\" );\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Joel Purra",
                        "user_id": 907779
                    },
                    "score": 9
                },
                {
                    "body": "<p>Another difference that is not mentioned in the other answers is that if you use the anonymous function</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<p>and use that as a constructor as in</p>\n\n<pre><code>var one = new functionOne();\n</code></pre>\n\n<p>then <code>one.constructor.name</code> will not be defined. <code>Function.name</code> is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.</p>\n\n<p>With </p>\n\n<pre><code>function functionTwo() {\n    // Some code\n}\ntwo = new functionTwo();\n</code></pre>\n\n<p>it is possible to retrieve the name of the constructor as a string with <code>two.constructor.name</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ingo Kegel",
                        "user_id": 936832
                    },
                    "score": 6
                },
                {
                    "body": "<p>I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited javascript expertise.</p>\n\n<p>I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.</p>\n\n<p>Some brandings require specific functions, some do not.  Sometimes I have to add new functions to do new branding-specific things.  I am happy to change the shared coded, but I don't want to have to change all 160 sets of branding files.</p>\n\n<p>By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.  </p>\n\n<p>The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, the rest do nothing.  I can test for a null function before I execute it in the shared code.</p>\n\n<p>From people's comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Herc",
                        "user_id": 1863024
                    },
                    "score": 10
                },
                {
                    "body": "<p>First one(function doSomething(x)) should be part of an object notation.</p>\n\n<p>The second one(<code>var doSomething = function(x){ alert(x);}</code>) is simply creating an anonymous function and assigning it to a variable doSomething . So doSomething() will call the function.</p>\n\n<p>you may want to What is a Function Declaration and  Function Expression </p>\n\n<p>A Function Declaration defines a named function variable without requiring variable assignment. Function Declarations occur as standalone constructs and cannot be nested within non-function blocks. </p>\n\n<pre><code>function foo() {\n    return 3;\n}\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as<br>\n  function Identifier ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n\n<p>in above condition the function name is visible within it\u2019s scope and the scope of it\u2019s parent (otherwise it would be unreachable)</p>\n\n<p>and in function expression </p>\n\n<p>A Function Expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via Functions Expressions can be named or anonymous. Function Expressions should not start with \u201cfunction\u201d  </p>\n\n<pre><code>//anonymous function expression\nvar a = function() {\n    return 3;\n}\n\n//named function expression\nvar a = function foo() {\n    return 3;\n}\n\n//self invoking function expression\n(function foo() {\n    alert(\"hello!\");\n})();\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as<br>\n  function Identifier<sub>opt</sub> ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "NullPoi\u0438te\u044f",
                        "user_id": 1723893
                    },
                    "score": 6
                },
                {
                    "body": "<p>A function declaration and a function expression assigned to a variable behave the same once the binding is established.</p>\n\n<p>There is a difference however at <em>how</em> and <em>when</em> the function object is actually associated with its variable. This difference is due to the mechanism called <em>variable hoisting</em> in JavaScript.</p>\n\n<p>Basically, all function declarations and variable declarations are hoisted to the top of the <em>function</em> in which the declaration occurs (this is why we say that JavaScript has <em>function scope</em>).</p>\n\n<ul>\n<li><p>When a function declaration is hoisted, the function body \"follows\"\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.</p></li>\n<li><p>When a variable declaration is hoisted, the initialization does <em>not</em>\nfollow, but is \"left behind\". The variable is initialized to\n<code>undefined</code> at the start of the function body, and will be <em>assigned</em>\na value at its original location in the code. (Actually, it will be assigned a value at <em>every</em> location where a declaration of a variable with the same name occurs.)</p></li>\n</ul>\n\n<p>The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.</p>\n\n<p>Some examples...</p>\n\n<pre><code>var foo = 1;\nfunction bar() {\n  if (!foo) {\n    var foo = 10 }\n  return foo; }\nbar() // 10\n</code></pre>\n\n<p>Variable <code>foo</code> is hoisted to the top of the function, initialized to <code>undefined</code>, so that <code>!foo</code> is <code>true</code>, so <code>foo</code> is assigned <code>10</code>. The <code>foo</code> outside of <code>bar</code>'s scope plays no role and is untouched. </p>\n\n<pre><code>function f() {\n  return a; \n  function a() {return 1}; \n  var a = 4;\n  function a() {return 2}}\nf()() // 2\n\nfunction f() {\n  return a;\n  var a = 4;\n  function a() {return 1};\n  function a() {return 2}}\nf()() // 2\n</code></pre>\n\n<p>Function declarations take precedence over variable declarations, and the last function declaration \"sticks\".</p>\n\n<pre><code>function f() {\n  var a = 4;\n  function a() {return 1}; \n  function a() {return 2}; \n  return a; }\nf() // 4\n</code></pre>\n\n<p>In this example <code>a</code> is initialized with the function object resulting from evaluating the second function declaration, and then is assigned <code>4</code>.</p>\n\n<pre><code>var a = 1;\nfunction b() {\n  a = 10;\n  return;\n  function a() {}}\nb();\na // 1\n</code></pre>\n\n<p>Here the function declaration is hoisted first, declaring and initializing variable <code>a</code>. Next, this variable is assigned <code>10</code>. In other words: the assignment does not assign to outer variable <code>a</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "eljenso",
                        "user_id": 30316
                    },
                    "score": 15
                },
                {
                    "body": "<p>An illustration of when to prefer the first method on the second one is when you need to avoid overriding a function's previous definition.</p>\n\n<p>With :</p>\n\n<pre><code>if (condition){\n    function myfunction(){\n        // some code \n    }\n}\n</code></pre>\n\n<p>, this definition of <code>myfunction</code> will override any previous definition, since it will be done at parse-time.</p>\n\n<p>While :</p>\n\n<pre><code>if (condition){\n    var myfunction = function (){\n        // some code\n    }\n}\n</code></pre>\n\n<p>does the correct job of defining <code>myfunction</code> only when <code>condition</code> is met.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mbengue Assane",
                        "user_id": 288258
                    },
                    "score": 16
                },
                {
                    "body": "<p>If you would use those functions to create objects, you would get:</p>\n\n<pre><code>var objectOne = new functionOne();\nconsole.log(objectOne.__proto__); // prints \"Object {}\" because constructor is an anonymous function\n\nvar objectTwo = new functionTwo();\nconsole.log(objectTwo.__proto__); // prints \"functionTwo {}\" because constructor is a named function\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "uszywieloryba",
                        "user_id": 221315
                    },
                    "score": 9
                },
                {
                    "body": "<p>Here's the rundown on the standard forms that create functions: <em>(Originally written for another question, but adapted after being moved into the canonical question.)</em></p>\n\n<h3>Function Declaration</h3>\n\n<p>The first form is a <em>function declaration</em>, which looks like this:</p>\n\n<pre><code>function x() {\n    console.log('x');\n}\n</code></pre>\n\n<p>A function declaration is a <em>declaration</em>; it's not a statement or expression. As such, you don't follow it with a <code>;</code> (although doing so is harmless).</p>\n\n<p>A function declaration is processed when execution enters the context in which it appears, <strong>before</strong> any step-by-step code is executed. The function it creates is given a proper name (<code>x</code> in the example above), and that name is put in the scope in which the declaration appears.</p>\n\n<p>Because it's processed before any step-by-step code in the same context, you can do things like this:</p>\n\n<pre><code>x(); // Works even though it's above the declaration\nfunction x() {\n    console.log('x');\n}\n</code></pre>\n\n<p>Also because it's not part of the step-by-step execution of the code, you can't put it inside a control structure like <code>try</code>, <code>if</code>, <code>switch</code>, <code>while</code>, etc.</p>\n\n<pre><code>if (someCondition) {\n    function foo() {    // &lt;===== INVALID AND WILL FAIL ON\n    }                   //        MANY ENGINES\n}\n</code></pre>\n\n<p>Some engines will handle the above even though it's invalid, by rewriting it as a function expression on-the-fly. There's talk of adding a <em>function statement</em> to the next spec (ECMAScript6) to codify that. But with current engines, it will not work reliably; don't do it.</p>\n\n<h3>Anonymous Function Expression</h3>\n\n<p>The second common form is called an <em>anonymous function expression</em>:</p>\n\n<pre><code>var y = function () {\n    console.log('y');\n};\n</code></pre>\n\n<p>The function this creates has no name (it's anonymous). Like all expressions, it's evaluated when it's reached in the step-by-step execution of the code.</p>\n\n<p>I should note that the current draft of the <em>next</em> version of the JavaScript standard, ECMAScript6, will actually assign a name to that function by inferring it from the context. The name in this case would be <code>y</code>. Mozilla's (Firefox's) JavaScript engine does that already, and it will be in the next spec. Basically any time the parser can make a reasonable guess, as it can above, it will (once engines are doing this new thing).</p>\n\n<h3>Named Function Expression</h3>\n\n<p>The third form is a <em>named function expression</em> (\"NFE\"):</p>\n\n<pre><code>var z = function w() {\n    console.log('zw')\n};\n</code></pre>\n\n<p>The function this creates has a proper name (<code>w</code> in this case). Like all expressions, this is evaluated when it's reached in the step-by-step execution of the code. The name of the function is <em>not</em> added to the scope in which the expression appears; the name <em>is</em> in scope within the function itself:</p>\n\n<pre><code>var z = function w() {\n    console.log(typeof w); // \"function\"\n};\nconsole.log(typeof w);     // \"undefined\"\n</code></pre>\n\n<p>Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs <a href=\"http://blog.niftysnippets.org/2010/09/double-take.html\">completely incorrectly</a>, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don't have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "T.J. Crowder",
                        "user_id": 157247
                    },
                    "score": 37
                },
                {
                    "body": "<p>The first example is a function declaration:</p>\n\n<pre><code>function abc(){}\n</code></pre>\n\n<p>The second example is a function expression:</p>\n\n<pre><code>var abc = function() {};\n</code></pre>\n\n<p>The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var 'abc' is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.</p>\n\n<p>To put it simply:</p>\n\n<pre><code>//this will work\nabc(param);\nfunction abc(){}\n\n//this would fail\nabc(param);\nvar abc = function() {}\n</code></pre>\n\n<p>To study more about this topic visit this \n<a href=\"http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792\" rel=\"nofollow\">link</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sla55er",
                        "user_id": 2454402
                    },
                    "score": 7
                },
                {
                    "body": "<p>A better explanation to <a href=\"http://stackoverflow.com/a/336868/2351696\">Greg's answer</a></p>\n\n<pre><code>functionTwo();\nfunction functionTwo() {\n}\n</code></pre>\n\n<p><strong>Why No error? We were always taught that expressions are excuted from top to bottom??</strong></p>\n\n<h2>Because:</h2>\n\n<blockquote>\n  <p>Function declarations and variable declarations are always moved (<code>hoisted</code>) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\">ben cherry</a></p>\n</blockquote>\n\n<p>This means that code like this:</p>\n\n<pre><code>functionOne();                  ---------------      var functionOne;\n                                | is actually |      functionOne(); \nvar functionOne = function(){   | interpreted |--&gt;       \n};                              |    like     |      functionOne = function(){\n                                ---------------      };\n</code></pre>\n\n<p>Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted. </p>\n\n<blockquote>\n  <p>But in the case with function declarations, where the entire function body will be hoisted as well.</p>\n</blockquote>\n\n<pre><code>functionTwo();              ---------------      function functionTwo() {\n                            | is actually |      };\nfunction functionTwo() {    | interpreted |--&gt;       \n}                           |    like     |      functionTwo();\n                            ---------------      \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "suhail",
                        "user_id": 2351696
                    },
                    "score": 29
                },
                {
                    "body": "<p>In light of the \"named functions show up in stack traces\" argument, modern JavaScript engines are actually quite capable of representing anonymous functions.</p>\n\n<p>As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.</p>\n\n<p>SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can't.</p>\n\n<p>If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...</p>\n\n<pre><code>[].forEach(function iterator() {});\n</code></pre>\n\n<p>But for the most part it's not worth stressing over.</p>\n\n<h2>Harness (<a href=\"http://jsfiddle.net/us9dg6y8/\" rel=\"nofollow\">Fiddle</a>)</h2>\n\n<pre><code>'use strict';\n\nvar a = function () {\n    throw new Error();\n},\n    b = function b() {\n        throw new Error();\n    },\n    c = function d() {\n        throw new Error();\n    },\n    e = {\n        f: a,\n        g: b,\n        h: c,\n        i: function () {\n            throw new Error();\n        },\n        j: function j() {\n            throw new Error();\n        },\n        k: function l() {\n            throw new Error();\n        }\n    },\n    m = (function () {\n        return function () {\n            throw new Error();\n        };\n    }()),\n    n = (function () {\n        return function n() {\n            throw new Error();\n        };\n    }()),\n    o = (function () {\n        return function p() {\n            throw new Error();\n        };\n    }());\n\nconsole.log([a, b, c].concat(Object.keys(e).reduce(function (values, key) {\n    return values.concat(e[key]);\n}, [])).concat([m, n, o]).reduce(function (logs, func) {\n\n    try {\n        func();\n    } catch (error) {\n        return logs.concat('func.name: ' + func.name + '\\n' +\n                           'Trace:\\n' +\n                           error.stack);\n        // Need to manually log the error object in Nitro.\n    }\n\n}, []).join('\\n\\n'));\n</code></pre>\n\n<h2>V8</h2>\n\n<pre><code>func.name: \nTrace:\nError\n    at a (http://localhost:8000/test.js:4:11)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: b\nTrace:\nError\n    at b (http://localhost:8000/test.js:7:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: d\nTrace:\nError\n    at d (http://localhost:8000/test.js:10:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at a (http://localhost:8000/test.js:4:11)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: b\nTrace:\nError\n    at b (http://localhost:8000/test.js:7:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: d\nTrace:\nError\n    at d (http://localhost:8000/test.js:10:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at e.i (http://localhost:8000/test.js:17:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: j\nTrace:\nError\n    at j (http://localhost:8000/test.js:20:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: l\nTrace:\nError\n    at l (http://localhost:8000/test.js:23:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at http://localhost:8000/test.js:28:19\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: n\nTrace:\nError\n    at n (http://localhost:8000/test.js:33:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: p\nTrace:\nError\n    at p (http://localhost:8000/test.js:38:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27 test.js:42\n</code></pre>\n\n<h2>SpiderMonkey</h2>\n\n<pre><code>func.name: \nTrace:\na@http://localhost:8000/test.js:4:5\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\na@http://localhost:8000/test.js:4:5\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\ne.i@http://localhost:8000/test.js:17:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: j\nTrace:\nj@http://localhost:8000/test.js:20:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: l\nTrace:\nl@http://localhost:8000/test.js:23:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\nm&lt;/&lt;@http://localhost:8000/test.js:28:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: n\nTrace:\nn@http://localhost:8000/test.js:33:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: p\nTrace:\np@http://localhost:8000/test.js:38:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n</code></pre>\n\n<h2>Chakra</h2>\n\n<pre><code>func.name: undefined\nTrace:\nError\n   at a (http://localhost:8000/test.js:4:5)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at b (http://localhost:8000/test.js:7:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at d (http://localhost:8000/test.js:10:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at a (http://localhost:8000/test.js:4:5)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at b (http://localhost:8000/test.js:7:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at d (http://localhost:8000/test.js:10:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at e.i (http://localhost:8000/test.js:17:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at j (http://localhost:8000/test.js:20:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at l (http://localhost:8000/test.js:23:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at Anonymous function (http://localhost:8000/test.js:28:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at n (http://localhost:8000/test.js:33:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at p (http://localhost:8000/test.js:38:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n</code></pre>\n\n<h2>Nitro</h2>\n\n<pre><code>func.name: \nTrace:\na@http://localhost:8000/test.js:4:22\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\na@http://localhost:8000/test.js:4:22\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\ni@http://localhost:8000/test.js:17:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: j\nTrace:\nj@http://localhost:8000/test.js:20:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: l\nTrace:\nl@http://localhost:8000/test.js:23:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\nhttp://localhost:8000/test.js:28:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: n\nTrace:\nn@http://localhost:8000/test.js:33:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: p\nTrace:\np@http://localhost:8000/test.js:38:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jackson",
                        "user_id": 1468130
                    },
                    "score": 2
                }
            ],
            "body": "<p>I've recently started maintaining someone else's JavaScript code. I'm fixing bugs, adding features and also trying to tidy up the code and make it more consistent.</p>\n\n<p>The previous developer uses two ways of declaring functions and I can't work out if there is a reason behind it or not.</p>\n\n<p>The two ways are:</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<p>What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can't be done with the other?</p>\n",
            "last_activity_date": 1427015536,
            "owner": {
                "display_name": "Richard Garside",
                "user_id": 31569
            },
            "question_id": 336859,
            "score": 2516,
            "tags": [
                "javascript",
                "function",
                "syntax",
                "idioms"
            ],
            "title": "var functionName = function() {} vs function functionName() {}"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>You cannot upload files using <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a> (Ajax). You can simulate the effect using an iframe or Flash. Try the SWF (Flash) uploader <em><a href=\"http://demo.swfupload.org/Documentation/\">SWFUpload</a></em>.</p>\n\n<p>Or the excellent <a href=\"http://malsup.com/jquery/form/\">jQuery Form Plugin</a> that posts your files through an iframe to get the effect.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mattias",
                        "user_id": 261
                    },
                    "score": 43
                },
                {
                    "body": "<h3>You cannot <em>practically</em> do <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> file uploads if you need wide-ranging browser support.</h3>\n\n<p><a href=\"http://caniuse.com/fileapi\">The new file API is not supported in IE before version 10</a> so depending on where you pull your stats from and your natural demographic, you're looking at 5-20% of your users. For most sane developers this is an unaffordable loss.</p>\n\n<p>However if you create an iframe on the page (that you can hide with CSS), you can target your form to post to that iframe. The main page doesn't need to move.</p>\n\n<p>Because it's a real post, it's not wholly interactive so you'd need to look at requesting the progress of the current upload from your server. This varies massively depending on your server. <a href=\"http://en.wikipedia.org/wiki/ASP.NET\">ASP.NET</a> has nicer mechanisms. PHP plain fails, but you can use <a href=\"http://en.wikipedia.org/wiki/Perl\">Perl</a> or Apache modifications to get around it.</p>\n\n<p>If you need multiple file-uploads, it's best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.</p>\n\n<p>Or use a Java/Flash solution. They're a lot more flexible in what they can do with their posts...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Oli",
                        "user_id": 12870
                    },
                    "score": 101
                },
                {
                    "body": "<p>There are various ready-made plugins on doing file upload on jQuery.</p>\n\n<p>Doing this kind of uploading hacks is not an enjoyable experience, so people enjoy using ready-made solutions.</p>\n\n<p>Here's few:</p>\n\n<ul>\n<li><a href=\"http://www.phpletter.com/Demo/AjaxFileUpload-Demo/\">Ajax File Upload Plugin</a></li>\n<li><a href=\"http://www.fyneworks.com/jquery/multiple-file-upload/\">Multiple File Upload Plugin</a></li>\n<li><a href=\"http://demo.tutorialzine.com/2013/05/mini-ajax-file-upload-form/\">Mini Multiple File Upload</a></li>\n<li><a href=\"http://blueimp.github.io/jQuery-File-Upload/\">jQuery File Upload</a></li>\n</ul>\n\n<p>You can search more from jQuery's plugin site.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Cheery",
                        "user_id": 21711
                    },
                    "score": 196
                },
                {
                    "body": "<p>A solution I found was to have the <code>&lt;form&gt;</code> target a hidden iFrame. The iFrame can then run JS to display to the user that it's complete (on page load).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Darryl Hein",
                        "user_id": 5441
                    },
                    "score": 15
                },
                {
                    "body": "<p>I recommend using the <a href=\"http://fineuploader.com/demos.html\">Fine Uploader</a> plugin for this purpose. Your JavaScript code would be:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"#uploadbutton\").jsupload({\n        action: \"addFile.do\",\n        onComplete: function(response){\n            alert( \"server response: \" + response);\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pixxaar"
                    },
                    "score": 73
                },
                {
                    "body": "<p><a href=\"http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/\">I've written this up in a Rails environment</a>.  It's only about five lines of JavaScript, if you use the lightweight jQuery-form plugin.</p>\n\n<p>The challenge is in getting AJAX upload working as the standard <code>remote_form_for</code> doesn't understand multi-part form submission. It's not going to send the file data Rails seeks back with the AJAX request.   </p>\n\n<p>That's where the jQuery-form plugin comes into play.  </p>\n\n<p>Here\u2019s the Rails code for it:</p>\n\n<pre><code>&lt;% remote_form_for(:image_form, \n                   :url =&gt; { :controller =&gt; \"blogs\", :action =&gt; :create_asset }, \n                   :html =&gt; { :method =&gt; :post, \n                              :id =&gt; 'uploadForm', :multipart =&gt; true }) \n                                                                        do |f| %&gt;\n Upload a file: &lt;%= f.file_field :uploaded_data %&gt;\n&lt;% end %&gt;\n</code></pre>\n\n<p>Here\u2019s the associated JavaScript:</p>\n\n<pre><code>$('#uploadForm input').change(function(){\n $(this).parent().ajaxSubmit({\n  beforeSubmit: function(a,f,o) {\n   o.dataType = 'json';\n  },\n  complete: function(XMLHttpRequest, textStatus) {\n   // XMLHttpRequest.responseText will contain the URL of the uploaded image.\n   // Put it in an image element you create, or do with it what you will.\n   // For example, if you have an image elemtn with id \"my_image\", then\n   //  $('#my_image').attr('src', XMLHttpRequest.responseText);\n   // Will set that image tag to display the uploaded image.\n  },\n });\n});\n</code></pre>\n\n<p>And here\u2019s the Rails controller action, pretty vanilla:</p>\n\n<pre><code> @image = Image.new(params[:image_form])\n @image.save\n render :text =&gt; @image.public_filename\n</code></pre>\n\n<p>I\u2019ve been using this for the past few weeks with Bloggity, and it\u2019s worked like a champ.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "wbharding",
                        "user_id": 153610
                    },
                    "score": 18
                },
                {
                    "body": "<p>I've come across a few really powerful jQuery-based file upload libraries. Check these out:</p>\n\n<ol>\n<li><a href=\"http://www.plupload.com/\" rel=\"nofollow\">Plupload</a>\n<ul>\n<li>docs: <a href=\"http://www.plupload.com/docs\" rel=\"nofollow\">http://www.plupload.com/docs</a></li>\n</ul></li>\n<li><a href=\"https://blueimp.github.io/jQuery-File-Upload/\" rel=\"nofollow\">jQuery File Upload</a>\n<ul>\n<li>docs: <a href=\"https://github.com/blueimp/jQuery-File-Upload\" rel=\"nofollow\">https://github.com/blueimp/jQuery-File-Upload</a></li>\n</ul></li>\n<li><a href=\"http://fineuploader.com/\" rel=\"nofollow\">FineUploader</a>\n<ul>\n<li>docs: <a href=\"http://docs.fineuploader.com/\" rel=\"nofollow\">http://docs.fineuploader.com/</a></li>\n</ul></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Hristo",
                        "user_id": 196921
                    },
                    "score": 30
                },
                {
                    "body": "<p>This <a href=\"https://github.com/jfeldstein/jQuery.AjaxFileUpload.js\">AJAX file upload jQuery plugin</a> uploads the file somehwere, and passes the\nresponse to a callback, nothing else. </p>\n\n<ul>\n<li>It does not depend on specific HTML, just give it a <code>&lt;input type=\"file\"&gt;</code></li>\n<li>It does not require your server to respond in any particular way</li>\n<li>It does not matter how many files you use, or where they are on the page</li>\n</ul>\n\n<p>-- Use as little as --</p>\n\n<pre><code>$('#one-specific-file').ajaxfileupload({\n  'action': '/upload.php'\n});\n</code></pre>\n\n<p>-- or as much as --</p>\n\n<pre><code>$('input[type=\"file\"]').ajaxfileupload({\n  'action': '/upload.php',\n  'params': {\n    'extra': 'info'\n  },\n  'onComplete': function(response) {\n    console.log('custom handler for file:');\n    alert(JSON.stringify(response));\n  },\n  'onStart': function() {\n    if(weWantedTo) return false; // cancels upload\n  },\n  'onCancel': function() {\n    console.log('no file selected');\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jordan Feldstein",
                        "user_id": 311901
                    },
                    "score": 59
                },
                {
                    "body": "<p>With <a href=\"http://en.wikipedia.org/wiki/HTML5\">HTML5</a> you CAN make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME-type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use <a href=\"http://en.wikipedia.org/wiki/Adobe_Flash\">Flash</a> nor Iframes or plugins and after some research I came up with the solution.</p>\n\n<p>The HTML:</p>\n\n<pre><code>&lt;form enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"file\" type=\"file\" /&gt;\n    &lt;input type=\"button\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n&lt;progress&gt;&lt;/progress&gt;\n</code></pre>\n\n<p>First, you can do some validation if you want. For example, in the onChange event of the file:</p>\n\n<pre><code>$(':file').change(function(){\n    var file = this.files[0];\n    var name = file.name;\n    var size = file.size;\n    var type = file.type;\n    //Your validation\n});\n</code></pre>\n\n<p>Now the Ajax submit with the button's click:</p>\n\n<pre><code>$(':button').click(function(){\n    var formData = new FormData($('form')[0]);\n    $.ajax({\n        url: 'upload.php',  //Server script to process data\n        type: 'POST',\n        xhr: function() {  // Custom XMLHttpRequest\n            var myXhr = $.ajaxSettings.xhr();\n            if(myXhr.upload){ // Check if upload property exists\n                myXhr.upload.addEventListener('progress',progressHandlingFunction, false); // For handling the progress of the upload\n            }\n            return myXhr;\n        },\n        //Ajax events\n        beforeSend: beforeSendHandler,\n        success: completeHandler,\n        error: errorHandler,\n        // Form data\n        data: formData,\n        //Options to tell jQuery not to process data or worry about content-type.\n        cache: false,\n        contentType: false,\n        processData: false\n    });\n});\n</code></pre>\n\n<p>Now if you want to handle the progress.</p>\n\n<pre><code>function progressHandlingFunction(e){\n    if(e.lengthComputable){\n        $('progress').attr({value:e.loaded,max:e.total});\n    }\n}\n</code></pre>\n\n<p>As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Google Chrome</a> as some of the HTML5 components of the examples aren't available in every browser.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "olanod",
                        "user_id": 931340
                    },
                    "score": 1329
                },
                {
                    "body": "<p>I have been using the below script to upload images which happens to work fine.</p>\n\n<h1>HTML</h1>\n\n<pre><code>&lt;input id=\"file\" type=\"file\" name=\"file\"/&gt;\n&lt;div id=\"response\"&gt;&lt;/div&gt;\n</code></pre>\n\n<h1>JavaScript</h1>\n\n<pre><code>jQuery('document').ready(function(){\n    var input = document.getElementById(\"file\");\n    var formdata = false;\n    if (window.FormData) {\n        formdata = new FormData();\n    }\n    input.addEventListener(\"change\", function (evt) {\n        var i = 0, len = this.files.length, img, reader, file;\n\n        for ( ; i &lt; len; i++ ) {\n            file = this.files[i];\n\n            if (!!file.type.match(/image.*/)) {\n                if ( window.FileReader ) {\n                    reader = new FileReader();\n                    reader.onloadend = function (e) {\n                        //showUploadedItem(e.target.result, file.fileName);\n                    };\n                    reader.readAsDataURL(file);\n                }\n\n                if (formdata) {\n                    formdata.append(\"image\", file);\n                    formdata.append(\"extra\",'extra-data');\n                }\n\n                if (formdata) {\n                    jQuery('div#response').html('&lt;br /&gt;&lt;img src=\"ajax-loader.gif\"/&gt;');\n\n                    jQuery.ajax({\n                        url: \"upload.php\",\n                        type: \"POST\",\n                        data: formdata,\n                        processData: false,\n                        contentType: false,\n                        success: function (res) {\n                         jQuery('div#response').html(\"Successfully uploaded\");\n                        }\n                    });\n                }\n            }\n            else\n            {\n                alert('Not a vaild image!');\n            }\n        }\n\n    }, false);\n});\n</code></pre>\n\n<h1>Explanation</h1>\n\n<p>I use response <code>div</code> to show the uploading animation and response after upload is done.</p>\n\n<p>Best part is you can send extra data such as ids &amp; etc with the file when you use this script. I have mention it <code>extra-data</code> as in the script.</p>\n\n<p>At the PHP level this will work as normal file upload. extra-data can be retrieved as <code>$_POST</code> data.</p>\n\n<p>Here you are not using a plugin and stuff. You can change the code as you want. You are not blindly coding here. This is the core functionality of any jQuery file upload. Actually Javascript.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Techie",
                        "user_id": 1263783
                    },
                    "score": 37
                },
                {
                    "body": "<p>You can do it in vanilla JavaScript pretty easily. Here's a snippet from my current project:</p>\n\n<pre><code>var xhr = new XMLHttpRequest();\nxhr.upload.onprogress = function(e) {\n    var percent = (e.position/ e.totalSize);\n    // Render a pretty progress bar\n};\nxhr.onreadystatechange = function(e) {\n    if(this.readyState === 4) {\n        // Handle file upload complete\n    }\n};\nxhr.open('POST', '/upload', true);\nxhr.setRequestHeader('X-FileName',file.name); // Pass the filename along\nxhr.send(file);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mark",
                        "user_id": 65387
                    },
                    "score": 15
                },
                {
                    "body": "<p>jQuery <a href=\"http://www.uploadify.com/download/\">Uploadify</a> is another good plugin which I have used before to upload files. The JavaScript code is as simple as the following: code. However, the new version does not work in Internet&nbsp;Explorer.</p>\n\n<pre><code>$('#file_upload').uploadify({\n    'swf': '/public/js/uploadify.swf',\n    'uploader': '/Upload.ashx?formGuid=' + $('#formGuid').val(),\n    'cancelImg': '/public/images/uploadify-cancel.png',\n    'multi': true,\n    'onQueueComplete': function (queueData) {\n        // ...\n    },\n    'onUploadStart': function (file) {\n        // ...\n    }\n});\n</code></pre>\n\n<p>I have done a lot of searching and I have come to another solution for uploading files without any plugin and only with ajax. The solution is as below:</p>\n\n<pre><code>$(document).ready(function () {\n    $('#btn_Upload').live('click', AjaxFileUpload);\n});\n\nfunction AjaxFileUpload() {\n    var fileInput = document.getElementById(\"#Uploader\");\n    var file = fileInput.files[0];\n    var fd = new FormData();\n    fd.append(\"files\", file);\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", 'Uploader.ashx');\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n             alert('success');\n        }\n        else if (uploadResult == 'success')\n            alert('error');\n    };\n    xhr.send(fd);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "farnoush resa",
                        "user_id": 2044399
                    },
                    "score": 10
                },
                {
                    "body": "<p>Simple Ajax Uploader is another option:</p>\n\n<p><a href=\"https://github.com/LPology/Simple-Ajax-Uploader\">https://github.com/LPology/Simple-Ajax-Uploader</a></p>\n\n<ul>\n<li>Cross-browser -- works in IE7+, Firefox, Chrome, Safari, Opera</li>\n<li>Supports multiple, concurrent uploads -- even in non-HTML5 browsers</li>\n<li>No flash or external CSS -- just one 5Kb Javascript file</li>\n<li>Optional, built-in support for fully cross-browser progress bars (using PHP's APC extension)</li>\n<li>Flexible and highly customizable -- use any element as upload button, style your own progress indicators</li>\n<li>No forms required, just provide an element that will serve as upload button</li>\n<li>MIT license -- free to use in commercial project</li>\n</ul>\n\n<p>Example usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var uploader = new ss.SimpleUpload({\n    button: $('#uploadBtn'), // upload button\n    url: '/uploadhandler', // URL of server-side upload handler\n    name: 'userfile', // parameter name of the uploaded file\n    onSubmit: function() {\n        this.setProgressBar( $('#progressBar') ); // designate elem as our progress bar\n    },\n    onComplete: function(file, response) {\n        // do whatever after upload is finished\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user1091949",
                        "user_id": 1091949
                    },
                    "score": 10
                },
                {
                    "body": "<p>You can use</p>\n\n<pre><code>$(function() {\n    $(\"#file_upload_1\").uploadify({\n        height        : 30,\n        swf           : '/uploadify/uploadify.swf',\n        uploader      : '/uploadify/uploadify.php',\n        width         : 120\n    });\n});\n</code></pre>\n\n<p><a href=\"http://www.uploadify.com/demos/\" rel=\"nofollow\">Demo</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Amit",
                        "user_id": 2396721
                    },
                    "score": 3
                },
                {
                    "body": "<p>To upload file asynchronously with Jquery use below steps:</p>\n\n<p><strong>step 1</strong> In your project open Nuget manager and add package (jquery fileupload(only you need to write it in search box it will come up and install it.))\nURL: <a href=\"https://github.com/blueimp/jQuery-File-Upload\" rel=\"nofollow\">https://github.com/blueimp/jQuery-File-Upload</a></p>\n\n<p><strong>step 2</strong> Add below scripts in the HTML files, which are already added to the project by running above package:</p>\n\n<blockquote>\n  <p>jquery.ui.widget.js</p>\n  \n  <p>jquery.iframe-transport.js</p>\n  \n  <p>jquery.fileupload.js</p>\n</blockquote>\n\n<p><strong>step 3</strong>  Write file upload control as per below code:</p>\n\n<pre><code>&lt;input id=\"upload\" name=\"upload\" type=\"file\" /&gt;\n</code></pre>\n\n<p><strong>step 4</strong>  write a js method as uploadFile as below: </p>\n\n<pre><code> function uploadFile(element) {\n\n            $(element).fileupload({\n\n                dataType: 'json',\n                url: '../DocumentUpload/upload',\n                autoUpload: true,\n                add: function (e, data) {           \n                  // write code for implementing, while selecting a file. \n                  // data represents the file data. \n                  //below code triggers the action in mvc controller\n                  data.formData =\n                                    {\n                                     files: data.files[0]\n                                    };\n                  data.submit();\n                },\n                done: function (e, data) {          \n                   // after file uploaded\n                },\n                progress: function (e, data) {\n\n                   // progress\n                },\n                fail: function (e, data) {\n\n                   //fail operation\n                },\n                stop: function () {\n\n                  code for cancel operation\n                }\n            });\n\n        };\n</code></pre>\n\n<p><strong>step 5</strong> In ready function call element file upload to initiate the process as per below:</p>\n\n<pre><code>$(document).ready(function()\n{\n    uploadFile($('#upload'));\n\n});\n</code></pre>\n\n<p><strong>step 6</strong> Write MVC controller and Action as per below:</p>\n\n<pre><code>public class DocumentUploadController : Controller\n    {       \n\n        [System.Web.Mvc.HttpPost]\n        public JsonResult upload(ICollection&lt;HttpPostedFileBase&gt; files)\n        {\n            bool result = false;\n\n            if (files != null || files.Count &gt; 0)\n            {\n                try\n                {\n                    foreach (HttpPostedFileBase file in files)\n                    {\n                        if (file.ContentLength == 0)\n                            throw new Exception(\"Zero length file!\");                       \n                        else \n                            //code for saving a file\n\n                    }\n                }\n                catch (Exception)\n                {\n                    result = false;\n                }\n            }\n\n\n            return new JsonResult()\n                {\n                    Data=result\n                };\n\n\n        }\n\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ashish",
                        "user_id": 1321613
                    },
                    "score": 1
                },
                {
                    "body": "<p>Convert file to base64 using |HTML5's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29\" rel=\"nofollow\">readAsDataURL()</a> or <a href=\"http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript\" rel=\"nofollow\">some base64 encoder</a>. \n<a href=\"http://jsfiddle.net/eliseosoto/JHQnk/\" rel=\"nofollow\">Fiddle here</a></p>\n\n<pre><code>var reader = new FileReader();\n\n        reader.onload = function(readerEvt) {\n            var binaryString = readerEvt.target.result;\n            document.getElementById(\"base64textarea\").value = btoa(binaryString);\n        };\n\n        reader.readAsBinaryString(file);\n</code></pre>\n\n<p>Then to retrieve:</p>\n\n<pre><code>window.open(\"data:application/octet-stream;base64,\" + base64);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "tnt-rox",
                        "user_id": 913620
                    },
                    "score": 2
                },
                {
                    "body": "<p>The simplest and most robust way I have done this in the past, is to simply target a hidden iFrame tag with you form - then it will submit within the iframe without reloading the page.</p>\n\n<p>That is if you don't want to use a plugin</p>\n\n<pre><code>&lt;form target=\"iframe\" action=\"\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"file\" type=\"file\" /&gt;\n    &lt;input type=\"button\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n\n&lt;iframe name=\"iframe\" id=\"iframe\" style=\"display:none\" &gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>You can also read the contents of the iframe ( onLoad() ) for server error or success response and then output that to user.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ArtisiticPhoenix",
                        "user_id": 3684882
                    },
                    "score": 5
                },
                {
                    "body": "<p>You can upload simply with AJAX.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div id=\"targetLayer\"&gt;No Image&lt;/div&gt;\n&lt;form id=\"uploadForm\"&gt;\n    &lt;label&gt;Upload Image File:&lt;/label&gt;&lt;br/&gt;\n    &lt;input name=\"image\" type=\"file\" /&gt;\n    &lt;input type=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>$(document).ready(function (e) {\n    $(\"#uploadForm\").on('submit',(function(e) {\n        e.preventDefault();\n        $.ajax({\n            url: \"upload.php\",\n            type: \"POST\",\n            data:  new FormData(this),\n            contentType: false,\n            cache: false,\n            processData:false,\n            success: function(data){\n                $(\"#targetLayer\").html(data);\n            }           \n       });\n    }));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ZAyn Ali",
                        "user_id": 2610720
                    },
                    "score": 4
                },
                {
                    "body": "<p>Wrapping up for future readers.</p>\n\n<h1>Asynchronous File Upload</h1>\n\n<h2>With HTML5</h2>\n\n<p>You can upload files <strong>with jQuery</strong> using the <code>$.ajax()</code> method if <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects\">FormData</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications\">File API</a> are supported (both HTML5 features). </p>\n\n<p>You can also send files <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files\">without FormData</a> but either way the File API must be present to process files in such a way that they can be sent with <em>XMLHttpRequest</em> (Ajax).</p>\n\n<pre><code>$.ajax({\n  url: 'file/destination.html', \n  type: 'POST',\n  data: new FormData($('#formWithFiles')[0]), // The form with the file inputs.\n  processData: false                          // Using FormData, no need to process data.\n}).done(function(){\n  console.log(\"Success: Files sent!\");\n}).fail(function(){\n  console.log(\"An error occurred, the files couldn't be sent!\");\n});\n</code></pre>\n\n<p>For a quick, pure JavaScript (<strong>no jQuery</strong>) example see \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object\">Sending files using a FormData object</a>\".</p>\n\n<h2>Fallback</h2>\n\n<p>When HTML5 isn't supported (no <em>File API</em>) the only other pure JavaScript solution (no <em>Flash</em> or any other browser plugin) is the <strong>hidden iframe</strong> technique, which allows to emulate an asynchronous request without using the <em>XMLHttpRequest</em> object.</p>\n\n<p>It consists of setting an iframe as the target of the form with the file inputs. When the user submits a request is made and the files are uploaded but the response is displayed inside the iframe instead of re-rendering the main page. Hiding the iframe makes the whole process transparent to the user and emulates an asynchronous request.</p>\n\n<p>If done properly it should work virtually on any browser, but it has some caveats as how to obtain the response from the iframe. </p>\n\n<p>In this case you may prefer to use a wrapper plugin like <a href=\"//github.com/matiasgagliano/bifrost\">Bifr\u00f6st</a> which uses the <em>iframe technique</em> but also provides a <a href=\"//api.jquery.com/jQuery.ajaxTransport\">jQuery Ajax transport</a> allowing to <strong>send files</strong> with just the <code>$.ajax()</code> method like this:</p>\n\n<pre><code>$.ajax({\n  url: 'file/destination.html', \n  type: 'POST',\n  // Set the transport to use (iframe means to use Bifr\u00f6st)\n  // and the expected data type (json in this case).\n  dataType: 'iframe json',                                \n  fileInputs: $('input[type=\"file\"]'),  // The file inputs containing the files to send.\n  data: { msg: 'Some extra data you might need.'}\n}).done(function(){\n  console.log(\"Success: Files sent!\");\n}).fail(function(){\n  console.log(\"An error occurred, the files couldn't be sent!\");\n});\n</code></pre>\n\n<h2>Plugins</h2>\n\n<p><a href=\"//github.com/matiasgagliano/bifrost\">Bifr\u00f6st</a> is just a small wrapper that adds fallback support to jQuery's ajax method, but many of the aforementioned plugins like <a href=\"//malsup.com/jquery/form/\">jQuery Form Plugin</a> or <a href=\"//github.com/blueimp/jQuery-File-Upload\">jQuery File Upload</a> include the whole stack from HTML5 to different fallbacks and some useful features to ease out the process. Depending on your needs and requirements you might want to consider a bare implementation or either of this plugins.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "404",
                        "user_id": 3614389
                    },
                    "score": 13
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>&lt;script&gt;\r\n   $(\"form\").submit(function(evt){\t \r\n   evt.preventDefault();\r\n\r\n   var formData = new FormData($(this)[0]); \r\n\r\n   $.ajax({\r\n     url: 'fileUpload',\r\n     type: 'POST',\r\n     data: formData,\r\n     async: false,\r\n     cache: false,\r\n     contentType: false,\r\n     enctype: 'multipart/form-data',\r\n     processData: false,\r\n     success: function (response) {\r\n       alert(response);\r\n     }\r\n   });\r\n\r\n   return false;\r\n });\r\n&lt;/script&gt;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;form&gt;\r\n  &lt;table&gt;\r\n\r\n    &lt;tr&gt;\r\n      &lt;td colspan=\"2\"&gt;File Upload&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n\r\n    &lt;tr&gt;\r\n      &lt;th&gt;Select File &lt;/th&gt;\r\n      &lt;td&gt;&lt;input id=\"csv\" name=\"csv\" type=\"file\" /&gt;&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n\r\n    &lt;tr&gt;\r\n      &lt;td colspan=\"2\"&gt;\r\n        &lt;input type=\"submit\" value=\"submit\"/&gt; \r\n      &lt;/td&gt;\r\n    &lt;/tr&gt;\r\n\r\n  &lt;/table&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vickisys",
                        "user_id": 2633945
                    },
                    "score": 0
                }
            ],
            "body": "<p>I would like to upload a file asynchronously with jQuery. This is my HTML:</p>\n\n<pre><code>&lt;span&gt;File&lt;/span&gt;\n&lt;input type=\"file\" id=\"file\" name=\"file\" size=\"10\"/&gt;\n&lt;input id=\"uploadbutton\" type=\"button\" value=\"Upload\"/&gt;\n</code></pre>\n\n<p>And here my JavaScript code:</p>\n\n<pre><code>$(document).ready(function () {\n    $(\"#uploadbutton\").click(function () {\n        var filename = $(\"#file\").val();\n\n        $.ajax({\n            type: \"POST\",\n            url: \"addFile.do\",\n            enctype: 'multipart/form-data',\n            data: {\n                file: filename\n            },\n            success: function () {\n                alert(\"Data Uploaded: \");\n            }\n        });\n    });\n});\n</code></pre>\n\n<p>Instead of the file being uploaded, I am only getting the filename. What can I do to fix this problem?</p>\n\n<h3>Current Solution</h3>\n\n<p>I am using the <a href=\"http://malsup.com/jquery/form/#code-samples\">jQuery Form Plugin</a> to upload files.</p>\n",
            "last_activity_date": 1425241508,
            "owner": {
                "display_name": "Sergio del Amo",
                "user_id": 2138
            },
            "question_id": 166221,
            "score": 1397,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "asynchronous",
                "upload"
            ],
            "title": "How can I upload files asynchronously?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>One word answer: <strong>asynchronicity</strong>.</p>\n\n<h2>Forewords</h2>\n\n<p>This topic has been iterated at least a couple of thousands times, here, in Stack Overflow. Hence, first off I'd like to point out some extremely useful resources:</p>\n\n<ul>\n<li><p><a href=\"http://stackoverflow.com/a/14220323/1331430\">@Felix Kling's \"How to return the response from an AJAX call\"</a>. See his excellent answer explaining synchronous and asynchronous flows, as well as the \"Restructure code\" section.<br>\n@Benjamin Gruenbaum has also put a lot of effort explaining asynchronicity in the same thread.</p></li>\n<li><p><a href=\"http://stackoverflow.com/a/10058879/1331430\">@Matt Esch's answer to \"Get data from fs.readFile\"</a> also explains asynchronicity extremely well in a simple manner.</p></li>\n</ul>\n\n<hr>\n\n<h2>The answer to the question at hand</h2>\n\n<p>Let's trace the common behavior first. In all examples, the <code>outerScopeVar</code> is modified inside of a <em>function</em>. That function is clearly not executed immediately, it is being assigned or passed as an argument. That is what we call a <strong><em>callback</em></strong>.</p>\n\n<p>Now the question is, when is that callback called?</p>\n\n<p>It depends on the case. Let's try to trace some common behavior again:</p>\n\n<ul>\n<li><code>img.onload</code> may be called <em>sometime in the future</em>, when (and if) the image has successfully loaded.</li>\n<li><code>setTimeout</code> may be called <em>sometime in the future</em>, after the delay has expired and the timeout hasn't been cancelled by <code>clearTimeout</code>. Note: even when using <code>0</code> as delay, all browsers have a minimum timeout delay cap (specified to be 4ms in the HTML5 spec).</li>\n<li>jQuery <code>$.post</code>'s callback may be called <em>sometime in the future</em>, when (and if) the Ajax request has been completed successfully.</li>\n<li>Node.js's <code>fs.readFile</code> may be called <em>sometime in the future</em>, when the file has been read successfully or thrown an error.</li>\n</ul>\n\n<p>In all cases, we have a callback which may run <em>sometime in the future</em>. This \"sometime in the future\" is what we refer to as <strong>asynchronous flow</strong>.</p>\n\n<p>Asynchronous execution is pushed out of the synchronous flow. That is, asynchronous code will <strong>never</strong> execute while the synchronous code stack is executing. This is the meaning of JavaScript being single-threaded.</p>\n\n<p>More specifically, when the JS engine is idle -- not executing a stack of (a)synchronous code -- it will poll for events that may have triggered asynchronous callbacks (e.g. expired timeout, received network response) and execute them one after another. This is regarded as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/EventLoop\">Event Loop</a>.</p>\n\n<p>That is, the asynchronous code highlighted in the hand-drawn red shapes may execute only after all the remaining synchronous code in their respective code blocks have executed:</p>\n\n<p><img src=\"http://i.stack.imgur.com/40IwM.png\" alt=\"async code highlighted\"></p>\n\n<p>In short, the callback functions are created synchronously, but executed asynchronously. You just can't rely on the execution of an asynchronous function until you know it has executed, and how to do that?</p>\n\n<p>It is simple, really. The logic that depends on the asynchronous function execution should be started/called from inside this asynchronous function. For example, moving the <code>alert</code>s and <code>console.log</code>s to inside the callback function would output the expected result, because the result is available at that point.</p>\n\n<h3>Implementing your own callback logic</h3>\n\n<p>Often you need to do more things with the result from an asynchronous function, or do different things with the result depending from where the asynchronous function has been called. Let's tackle a bit more complex example:</p>\n\n<pre><code>var outerScopeVar;\nhelloCatAsync();\nalert(outerScopeVar);\n\nfunction helloCatAsync() {\n    setTimeout(function() {\n        outerScopeVar = 'Nya';\n    }, Math.random() * 2000);\n}\n</code></pre>\n\n<p><strong>Note:</strong> I'm using <code>setTimeout</code> with a random delay as a generic asynchronous function, the same example applies to Ajax, <code>readFile</code>, <code>onload</code> and any other asynchronous flow.</p>\n\n<p>This example clearly suffers from the same issue as the other examples, it is not waiting until the asynchronous function executes.</p>\n\n<p>Let's tackle it implementing a callback system of our own. First off, we get rid of that ugly <code>outerScopeVar</code> which is completely useless in this case. Then we add a parameter which accepts a function argument, our callback. When the asynchronous operation finishes, we call this callback passing the result. The implementation (please read the comments in order):</p>\n\n<pre><code>// 1. Call helloCatAsync passing a callback function,\n//    which will be called receiving the result from the async operation\nhelloCatAsync(function(result) {\n    // 5. Received the result from the async function,\n    //    now do whatever you want with it:\n    alert(result);\n});\n\n// 2. The \"callback\" parameter is a reference to the function which\n//    was passed as argument from the helloCatAsync call\nfunction helloCatAsync(callback) {\n    // 3. Start async operation:\n    setTimeout(function() {\n        // 4. Finished async operation,\n        //    call the callback passing the result as argument\n        callback('Nya');\n    }, Math.random() * 2000);\n}\n</code></pre>\n\n<p>Most often in real use cases, the DOM API and most libraries already provide the callback functionality (the <code>helloCatAsync</code> implementation in this demonstrative example). You only need to pass the callback function and understand that it will execute out of the synchronous flow, and restructure your code to accommodate for that.</p>\n\n<p>You will also notice that due to the asynchronous nature, it is impossible to <code>return</code> a value from an asynchronous flow back to the synchronous flow where the callback was defined, as the asynchronous callbacks are executed long after the synchronous code has already finished executing.</p>\n\n<p>Instead of <code>return</code>ing a value from an asynchronous callback, you will have to make use of the callback pattern, or... Promises.</p>\n\n<h3>Promises</h3>\n\n<p>Although there are ways to keep the <a href=\"http://callbackhell.com/\">callback hell</a> at bay with vanilla JS, promises are growing in popularity and are currently being standardized in ES6 (see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise - MDN</a>).</p>\n\n<p>Promises (a.k.a. Futures) provide a more linear, and thus pleasant, reading of asynchronous code, but explaining their entire functionality is out of the scope of this question. Instead, I'll leave these excellent resources for the interested:</p>\n\n<ul>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\">JavaScript Promises - HTML5 Rocks</a></li>\n<li><a href=\"http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/\">You're Missing the Point of Promises - domenic.me</a></li>\n</ul>\n\n<hr>\n\n<h3>More reading material about JavaScript asynchronicity</h3>\n\n<ul>\n<li><a href=\"https://github.com/maxogden/art-of-node#callbacks\">The Art of Node - Callbacks</a> explains asynchronous code and callbacks very well with vanilla JS examples and Node.js code as well.</li>\n</ul>\n\n<hr>\n\n<blockquote>\n  <p><strong>Note:</strong> I've marked this answer as Community Wiki, hence anyone with at least 100 reputation can edit and improve it! Please feel free to improve this answer, or submit a completely new answer if you'd like as well.</p>\n  \n  <p>I want to turn this question into a canonical topic to answer asynchronicity issues which are unrelated to Ajax (there is <a href=\"http://stackoverflow.com/q/14220321/1331430\">How to return the response from an AJAX call?</a> for that), hence this topic needs your help to be as good and helpful as possible!</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Fabr&#237;cio Matt&#233;",
                        "user_id": 1331430
                    },
                    "score": 82
                },
                {
                    "body": "<p><em>Fabr\u00edcio's answer is spot on; but I wanted to complement his answer with something less technical, which focusses on an analogy to help explain the concept of asynchronicity</em>.</p>\n\n<hr>\n\n<h3>An Analogy...</h3>\n\n<p>Yesterday, the work I was doing required some information from a colleague. I rang him up; here's how the conversation went:</p>\n\n<blockquote>\n  <p><strong>Me</strong>: Hi Bob, I need to know how we <em>foo</em>'d the <em>bar</em>'d last week. Jim wants a report on it, and you're the only one who knows the details around it.</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p><strong>Bob</strong>: Sure thing, but it'll take me around 30 minutes?</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p><strong>Me</strong>: That's great Bob. Give me a ring back when you've got the information!</p>\n</blockquote>\n\n<p>At this point, I hung up the phone. Since I needed information from Bob to complete my report, I left the report and went for a coffee instead, then I caught up on some email. 40 minutes later (Bob is slow), Bob called back and gave me the information I needed. At this point, I resumed my work with my report, as I had all the information I needed.</p>\n\n<hr>\n\n<p>Imagine if the conversation had gone like this instead;</p>\n\n<blockquote>\n  <p><strong>Me</strong>: Hi Bob, I need to know how we <em>foo</em>'d the <em>bar</em>'d last week. Jim want's a report on it, and you're the only one who knows the details around it.</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p><strong>Bob</strong>: Sure thing, but it'll take me around 30 minutes?</p>\n</blockquote>\n\n\n\n<blockquote>\n  <p><strong>Me</strong>: That's great Bob. I'll wait.</p>\n</blockquote>\n\n<p>And I sat there and waited. And waited. And waited. For 40 minutes. Doing nothing but waiting. Eventually Bob gave me the information, we hung up, and I completed my report. But I'd lost 40 minutes of productivity.</p>\n\n<hr>\n\n<h3>This is asynchronous vs. synchronous behaviour</h3>\n\n<p>This is exactly what is happening in all the examples in our question. Loading an image, loading a file off disk, and requesting a page via AJAX are all slow operations (in the context of modern computing). </p>\n\n<p>Rather than <em>waiting</em> for these slow operations to complete, JavaScript lets you register a callback function which will be executed when the slow operation has completed. In the meantime however, JavaScript will continue to execute other code. The fact that JavaScript executes <em>other code</em> whilst waiting for the slow operation to complete makes the behaviour <strong>asynchronous</strong>. Had JavaScript waited around for the operation to complete before executing any other code, this would have been <strong>synchronous</strong> behaviour.</p>\n\n<pre><code>var outerScopeVar;    \nvar img = document.createElement('img');\n\n// Here we register the callback function.\nimg.onload = function() {\n    // Code within this function will be executed once the image has loaded.\n    outerScopeVar = this.width;\n};\n\n// But, while the image is loading, JavaScript continues executing, and\n// processes the following lines of JavaScript.\nimg.src = 'lolcat.png';\nalert(outerScopeVar);\n</code></pre>\n\n<p>In the code above, we're asking JavaScript to load <code>lolcat.png</code>, which is a <em>sloooow</em> operation. The callback function will be executed once this slow operation has done, but in the meantime, JavaScript will keep processing the next lines of code; i.e. <code>alert(outerScopeVar)</code>. </p>\n\n<p>This is why we see the alert showing <code>undefined</code>; since the <code>alert()</code> is processed immediately, rather than after the image has been loaded. This is analogous to me handing the report back to Jim <em>straight</em> after hanging up the phone to Bob, without giving him chance to figure out how we <em>foo</em>'d the <em>bar</em>. </p>\n\n<p>In order to fix our code, all we have to do is move the <code>alert(outerScopeVar)</code> code <em>into</em> the callback function. As a consequence of this, we no longer need the <code>outerScopeVar</code> variable declared as a global variable.</p>\n\n<pre><code>var img = document.createElement('img');\n\nimg.onload = function() {\n    var localScopeVar = this.width;\n    alert(localScopeVar);\n};\n\nimg.src = 'lolcat.png';\n</code></pre>\n\n<p>You'll <strong><em>always</em></strong> see a callback being specified as a function, because that's the only* way in JavaScript to define some code, but not execute it until later.</p>\n\n<p>Therefore, in all of our examples, the <code>function() { /* Do something */ }</code> is the callback; to fix <strong>all</strong> the examples, all we have to do is move the code which needs the response of the operation into there!</p>\n\n<p><sup>* Technically you can use <code>eval()</code> as well, but <a href=\"http://stackoverflow.com/questions/86513/why-is-using-the-javascript-eval-function-a-bad-idea\"><code>eval()</code> is evil</a> for this purpose</sup></p>\n\n<hr>\n\n<h3>How do I keep my caller waiting?</h3>\n\n<p>You might currently have some code similar to this;</p>\n\n<pre><code>function getWidthOfImage(src) {\n    var outerScopeVar;\n\n    var img = document.createElement('img');\n    img.onload = function() {\n        outerScopeVar = this.width;\n    };\n    img.src = src;\n    return outerScopeVar;\n}\n\nvar width = getWidthOfImage('lolcat.png');\nalert(width);\n</code></pre>\n\n<p>However, we now know that the <code>return outerScopeVar</code> happens immediately; before the callback function has updated the variable. Again, this is analogous to me handing the report back to Jim <em>straight</em> after hanging up the phone to Bob, without giving him chance to figure out how we <em>foo</em>'d the <em>bar</em>. </p>\n\n<p>We therefore need to allow the caller to register a callback, so we can tell them once the <em>slow operation</em> has completed (whether it be an AJAX call, an image load, or a report by Bob...). As before, we've also been able to do away with the variables <code>outerScopeVar</code> and <code>width</code> by fixing the code:</p>\n\n<pre><code>function getWidthOfImage(src, cb) {     \n    var img = document.createElement('img');\n    img.onload = function() {\n        cb(this.width);\n    };\n    img.src = src;\n}\n\ngetWidthOfImage('lolcat.png', function (width) {\n    alert(width);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matt",
                        "user_id": 444991
                    },
                    "score": 18
                },
                {
                    "body": "<p>The other answers are excellent, but I wanted to provide a more concise answer for people that are looking for a quick reference as well as some examples using promises.</p>\n\n<p>Start with the naive approach (that doesn't work) for a function that calls an asynchronous method (in this case <code>setTimeout</code>) and returns a message:</p>\n\n<pre><code>function getMessage() {\n  var outerScopeVar;\n  setTimeout(function() {\n    outerScopeVar = 'Hello asynchronous world!';\n  }, 0);\n  return outerScopeVar;\n}\nconsole.log(getMessage());\n</code></pre>\n\n<p><code>undefined</code> gets logged in this case because <code>getMessage</code> returns before the <code>setTimeout</code> callback is called and updates <code>outerScopeVar</code>.</p>\n\n<p>The two main ways to solve it are using <strong>callbacks</strong> and <strong>promises</strong>:</p>\n\n<p><strong>Callbacks</strong></p>\n\n<p>The change here is that <code>getMessage</code> accepts a <code>callback</code> parameter that will be called to deliver the results back to the calling code once available.</p>\n\n<pre><code>function getMessage(callback) {\n  setTimeout(function() {\n    callback('Hello asynchronous world!');\n  }, 0);\n}\ngetMessage(function(message) {\n  console.log(message);\n});\n</code></pre>\n\n<p><strong><a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\">Promises</a></strong></p>\n\n<p>Promises provide an alternative which is more flexible than callbacks because they can be naturally combined to coordinate multiple async operations. A <a href=\"https://promisesaplus.com/\">Promises/A+</a> standard implementation is natively provided in many current browsers, but is also implemented in libraries like <a href=\"https://github.com/petkaantonov/bluebird\">Bluebird</a> and <a href=\"https://github.com/kriskowal/q\">Q</a>.</p>\n\n<pre><code>function getMessage() {\n  return new Promise(function(resolve, reject) {\n    setTimeout(function() {\n      resolve('Hello asynchronous world!');\n    }, 0);\n  });\n}\n\ngetMessage().then(function(message) {\n  console.log(message);  \n});\n</code></pre>\n\n<p><strong>jQuery <a href=\"http://api.jquery.com/category/deferred-object/\">Deferreds</a></strong></p>\n\n<p>jQuery provides functionality that's similar to promises with its Deferreds.</p>\n\n<pre><code>function getMessage() {\n  var deferred = $.Deferred();\n  setTimeout(function() {\n    deferred.resolve('Hello asynchronous world!');\n  }, 0);\n  return deferred.promise();\n}\n\ngetMessage().done(function(message) {\n  console.log(message);  \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JohnnyHK",
                        "user_id": 1259510
                    },
                    "score": 5
                }
            ],
            "body": "<p>Given the following examples, why is <code>outerScopeVar</code> undefined in all cases?</p>\n\n<pre><code>var outerScopeVar;\n\nvar img = document.createElement('img');\nimg.onload = function() {\n    outerScopeVar = this.width;\n};\nimg.src = 'lolcat.png';\nalert(outerScopeVar);\n</code></pre>\n\n<p></p>\n\n<pre><code>var outerScopeVar;\nsetTimeout(function() {\n    outerScopeVar = 'Hello Asynchronous World!';\n}, 0);\nalert(outerScopeVar);\n</code></pre>\n\n<p></p>\n\n<pre><code>// Example using some jQuery\nvar outerScopeVar;\n$.post('loldog', function(response) {\n    outerScopeVar = response;\n});\nalert(outerScopeVar);\n</code></pre>\n\n<p></p>\n\n<pre><code>// Node.js example\nvar outerScopeVar;\nfs.readFile('./catdog.html', function(err, data) {\n    outerScopeVar = data;\n});\nconsole.log(outerScopeVar);\n</code></pre>\n\n<p></p>\n\n<pre><code>// with promises\nvar outerScopeVar;\nmyPromise.then(function (response) {\n    outerScopeVar = response;\n});\nconsole.log(outerScopeVar);\n</code></pre>\n\n<p>Why does it output \"undefined\" in all of these examples? I don't want workarounds, I want to know <strong>why</strong> this is happening.</p>\n\n<hr>\n\n<blockquote>\n  <p><strong>Note:</strong> This is a canonical question for <em>JavaScript asynchronicity</em>. Feel free to improve this question and add more simplified examples which the community can identify with.</p>\n</blockquote>\n",
            "last_activity_date": 1427296617,
            "owner": {
                "display_name": "Fabr&#237;cio Matt&#233;",
                "user_id": 1331430
            },
            "question_id": 23667086,
            "score": 77,
            "tags": [
                "javascript",
                "asynchronous"
            ],
            "title": "Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference"
        },
        {
            "answer_count": 31,
            "answers": [
                {
                    "body": "<p>The identity (<code>===</code>) operator behaves identically to the equality (<code>==</code>) operator except no type conversion is done, and the types must be the same to be considered equal.</p>\n\n<p>Reference: <a href=\"http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm\">Javascript Tutorial: Comparison Operators</a></p>\n\n<p>The <code>==</code> operator will compare for equality <em>after doing any necessary type conversions</em>.  The <code>===</code> operator will <strong>not</strong> do the conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. It's this case where <code>===</code> will be faster, and may return a different result than <code>==</code>. In all other cases performance will be the same.</p>\n\n<p>To quote Douglas Crockford's excellent <a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\">JavaScript: The Good Parts</a>,</p>\n\n<blockquote>\n  <p>JavaScript has two sets of equality operators: <code>===</code> and <code>!==</code>, and their evil twins <code>==</code> and <code>!=</code>.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then <code>===</code> produces <code>true</code> and <code>!==</code> produces <code>false</code>.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:</p>\n\n<pre><code>'' == '0'           // false\n0 == ''             // true\n0 == '0'            // true\n\nfalse == 'false'    // false\nfalse == '0'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n' \\t\\r\\n ' == 0     // true\n</code></pre>\n  \n  <p>The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use <code>===</code> and <code>!==</code>.  All of the comparisons just shown produce <code>false</code> with the <code>===</code> operator.</p>\n</blockquote>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>A good point was brought up by <a href=\"http://stackoverflow.com/users/165495/casebash\">@Casebash</a> in the comments and in <a href=\"http://stackoverflow.com/users/113570/philippe-leybaert\">@Phillipe Laybaert's</a> <a href=\"http://stackoverflow.com/a/957602/1288\">answer</a> concerning reference types.  For reference types <code>==</code> and <code>===</code> act consistently with one another (except in a special case).</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\n\nvar c = { x: 1, y: 2 };\nvar d = { x: 1, y: 2 };\n\nvar e = \"text\";\nvar f = \"te\" + \"xt\";\n\na == b            // false\na === b           // false\n\nc == d            // false\nc === d           // false\n\ne == f            // true\ne === f           // true\n</code></pre>\n\n<p>The special case is when you compare a literal with an object that evaluates to the same literal, due to its <code>toString</code> or <code>valueOf</code> method. For example, consider the comparison of a string literal with a string object created by the <code>String</code> constructor.</p>\n\n<pre><code>\"abc\" == new String(\"abc\")    // true\n\"abc\" === new String(\"abc\")   // false\n</code></pre>\n\n<p>Here the <code>==</code> operator is checking the values of the two objects and returning <code>true</code>, but the <code>===</code> is seeing that they're not the same type and returning <code>false</code>.  Which one is correct?  That really depends on what you're trying to compare.  My advice is to bypass the question entirely and just don't use the <code>String</code> constructor to create string objects.</p>\n\n<p><strong>Reference</strong><br>\n<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Bill the Lizard",
                        "user_id": 1288
                    },
                    "score": 2571
                },
                {
                    "body": "<p>Using the <code>==</code> operator (<em>Equality</em>)</p>\n\n<pre><code>true == 1; //true, because 'true' is converted to 1 and then compared\n\"2\" == 2;  //true, because \"2\" is converted to 2 and then compared\n</code></pre>\n\n<p>Using the <code>===</code> operator (<em>Identity</em>)</p>\n\n<pre><code>true === 1; //false\n\"2\" === 2;  //false\n</code></pre>\n\n<p>This is because the <strong>equality operator <code>==</code> does type coercion</strong>, meaning that the interpreter implicitly tries to convert the values before comparing.</p>\n\n<p>On the other hand, the <strong>identity operator <code>===</code> does not do type coercion</strong>, and thus does not convert the values when comparing.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andreas Grech",
                        "user_id": 44084
                    },
                    "score": 430
                },
                {
                    "body": "<p>There is unlikely to be any performance difference between the two operations in your usage. There is no type-conversion to be done because both parameters are already the same type. Both operations will have a type comparison followed by a value comparison.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sean",
                        "user_id": 45364
                    },
                    "score": 12
                },
                {
                    "body": "<p>The <strong>===</strong> operator is called a strict comparison operator, it <strong>does</strong> differ from the <strong>==</strong> operator.</p>\n\n<p>Lets take 2 vars a and b.</p>\n\n<p>For <strong>\"a == b\"</strong> to evaluate to true a and b need to be the <strong>same value</strong>.</p>\n\n<p>In the case of <strong>\"a === b\"</strong> a and b must be the <strong>same value</strong> and also the <strong>same type</strong> for it to evaluate to true.  </p>\n\n<p>Take the following example</p>\n\n<pre><code>var a = 1;\nvar b = \"1\";\n\nif (a == b) //evaluates to true as a and b are both 1\n{\n    alert(\"a == b\");\n}\n\nif (a === b) //evaluates to false as a is not the same type as b\n{\n    alert(\"a === b\");\n}\n</code></pre>\n\n<p><strong>In summary</strong>; using the <strong>==</strong> operator might evaluate to true in situations where you do not want it to so using the <strong>===</strong> operator would be safer.  </p>\n\n<p>In the 90% usage scenario it won't matter which one you use, but it is handy to know the difference when you get some unexpected behaviour one day.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Doctor Jones",
                        "user_id": 39277
                    },
                    "score": 27
                },
                {
                    "body": "<p>In a typical script there will be no performance difference. More important may be the fact that thousand \"===\" is 1&nbsp;KB heavier than thousand \"==\" :) <a href=\"http://stackoverflow.com/questions/tagged/javascript+performance\">JavaScript profilers</a> can tell you if there is a performance difference in your case.</p>\n\n<p>But personally I would do what JSLint suggests. This recommendation is there not because of performance issues, but because type coercion means <code>('\\t\\r\\n' == 0)</code> is true.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Constantin",
                        "user_id": 20310
                    },
                    "score": 15
                },
                {
                    "body": "<p>I tested this in Firefox with <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a> using code like this:</p>\n\n<pre><code>console.time(\"testEquality\");\nvar n = 0;\nwhile(true) {\n    n++;\n    if(n==100000) \n        break;\n}\nconsole.timeEnd(\"testEquality\");\n</code></pre>\n\n<p>and</p>\n\n<pre><code>console.time(\"testTypeEquality\");\nvar n = 0;\nwhile(true) {\n    n++;\n    if(n===100000) \n        break;\n}\nconsole.timeEnd(\"testTypeEquality\");\n</code></pre>\n\n<p>My results (tested five times each and averaged):</p>\n\n<pre><code>==: 115.2\n===: 114.4\n</code></pre>\n\n<p>So I'd say that the miniscule difference (this is over 100000 iterations, remember) is negligible. Performance <strong><em>isn't</em></strong> a reason to do <code>===</code>. Type safety (well, as safe as you're going to get in JavaScript), and code quality is.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Simon Scarfe",
                        "user_id": 39353
                    },
                    "score": 37
                },
                {
                    "body": "<p>The problem is that you might easily get into trouble since JavaScript have a lot of implicit conversions meaning...</p>\n\n<pre><code>var x = 0;\nvar isTrue = x == null;\nvar isFalse = x === null;\n</code></pre>\n\n<p>Which pretty soon becomes a problem. The best sample of why implicit conversion is \"evil\" can be taken from this code in <a href=\"http://en.wikipedia.org/wiki/Microsoft_Foundation_Class_Library\" rel=\"nofollow\">MFC</a> / C++ which actually will compile due to an implicit conversion from CString to HANDLE which is a pointer typedef type...</p>\n\n<pre><code>CString x;\ndelete x;\n</code></pre>\n\n<p>Which obviously during runtime does <em>very</em> undefined things...</p>\n\n<p>Google for implicit conversions in C++ and <a href=\"http://en.wikipedia.org/wiki/Standard_Template_Library\" rel=\"nofollow\">STL</a> to get some of the arguments against it...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Thomas Hansen",
                        "user_id": 29746
                    },
                    "score": 4
                },
                {
                    "body": "<p>In the answers here, I didn't read anything about what <strong>equal</strong> means. Some will say that <code>===</code> means <strong>equal and of the same type</strong>, but that's not really true. It actually means that <strong>both operands reference the same object</strong>, or in case of <strong>value types, have the same value</strong>.</p>\n\n<p>So, let's take the following code:</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n\n<p>The same here:</p>\n\n<pre><code>var a = { x: 1, y: 2 };\nvar b = { x: 1, y: 2 };\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n\n<p>Or even:</p>\n\n<pre><code>var a = { };\nvar b = { };\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n\n<p>This behavior is not always obvious. There's more to the story than being equal and being of the same type.</p>\n\n<p>The rule is:</p>\n\n<p><em><strong>For value types (numbers):</em></strong><br>\n   <code>a === b</code> returns true if <code>a</code> and <code>b</code> have the same value and are of the same type</p>\n\n<p><em><strong>For reference types:</em></strong><br>\n   <code>a === b</code> returns true if <code>a</code> and <code>b</code> reference the exact same object</p>\n\n<p><em><strong>For strings:</em></strong><br>\n   <code>a === b</code> returns true if <code>a</code> and <code>b</code> are both strings and contain the exact same characters</p>\n\n<hr>\n\n<h2>Strings: the special case...</h2>\n\n<p>Strings are not value types, but in Javascript they behave like value types, so they will be \"equal\" when the characters in the string are the same and when they are of the same length (as explained in the third rule)</p>\n\n<p>Now it becomes interesting:</p>\n\n<pre><code>var a = \"12\" + \"3\";\nvar b = \"123\";\n\nalert(a === b); // returns true, because strings behave like value types\n</code></pre>\n\n<p>But how about this?:</p>\n\n<pre><code>var a = new String(\"123\");\nvar b = \"123\";\n\nalert(a === b); // returns false !! (but they are equal and of the same type)\n</code></pre>\n\n<p>I thought strings behave like value types? Well, it depends who you ask... In this case a and b are not the same type. <code>a</code> is of type <code>Object</code>, while <code>b</code> is of type <code>string</code>. Just remember that creating a string object using the <code>String</code> constructor creates something of type <code>Object</code> that behaves as a string <em>most of the time</em>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Philippe Leybaert",
                        "user_id": 113570
                    },
                    "score": 247
                },
                {
                    "body": "<p>Let me add this counsel:</p>\n\n<p><strong><em>If in doubt, read the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">specification</a>!</em></strong> </p>\n\n<p>ECMA-262 is the specification for a scripting language of which JavaScript is a dialect. Of course in practice it matters more how the most important browsers behave than an esoteric definition how something is supposed to be handled. But it is helpful to understand why <strong>new String(\"a\") !== \"a\"</strong>.</p>\n\n<p>Please let me explain how to read the specification to clarify this question. I see that in this very old topic nobody had an answer for the very strange effect. So, if you can read a specification, this will help you in your profession tremendously. It is an acquired skill. So, let's continue.</p>\n\n<p>Searching the PDF file for === brings me to page 56 of the specification: <strong>11.9.4. The Strict Equals Operator ( === )</strong>, and after wading through the specificationalese I find:</p>\n\n<blockquote>\n  <p><strong>11.9.6 The Strict Equality Comparison Algorithm</strong><br>\n  The comparison x === y, where x and y are values, produces <strong>true</strong> or <strong>false</strong>. Such a comparison is performed as follows:<br>\n  &nbsp;&nbsp;1. If Type(x) is different from Type(y), return <strong>false</strong>.<br>\n  &nbsp;&nbsp;2. If Type(x) is Undefined, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;3. If Type(x) is Null, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;4. If Type(x) is not Number, go to step 11.<br>\n  &nbsp;&nbsp;5. If x is <strong>NaN</strong>, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;6. If y is <strong>NaN</strong>, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;7. If x is the same number value as y, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;8. If x is +0 and y is \u22120, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;9. If x is \u22120 and y is +0, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;10. Return <strong>false</strong>.<br>\n  &nbsp;&nbsp;11. If Type(x) is String, then return <strong>true</strong> if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;12. If Type(x) is Boolean, return <strong>true</strong> if x and y are both <strong>true</strong> or both <strong>false</strong>; otherwise, return <strong>false</strong>.\n  &nbsp;&nbsp;13. Return <strong>true</strong> if x and y refer to the same object or if they refer to objects joined to each other (see 13.1.2). Otherwise, return <strong>false</strong>.</p>\n</blockquote>\n\n<p>Interesting ist step 11. Yes, strings are treated as value types. But this does not explain why <strong>new String(\"a\") !== \"a\"</strong>. Do we have a browser not conforming to ECMA-262?</p>\n\n<p>Not so fast!</p>\n\n<p>Let's check the types of the operands. Try it out for yourself by wrapping them in <strong>typeof()</strong>. I find that <strong>new String(\"a\")</strong> is an object, and step 1 is used: return <strong>false</strong> if the types are different.</p>\n\n<p>If you wonder why <strong>new String(\"a\")</strong> does not return a string, how about some exercise reading a specification? Have fun!</p>\n\n<hr>\n\n<p>Aidiakapi wrote this in a comment below:</p>\n\n<blockquote>\n  <p>From the specification </p>\n  \n  <p><strong>11.2.2 The new Operator</strong>:</p>\n  \n  <p>If Type(constructor) is not Object, throw a TypeError exception.</p>\n  \n  <p>With other words, if String wouldn't be of type Object it couldn't be used with the new operator. </p>\n</blockquote>\n\n<p><strong>new</strong> always returns an Object, even for <strong>String</strong> constructors, too. And alas! The value semantics for strings (see step 11) is lost.</p>\n\n<p>And this finally means: <strong>new String(\"a\") !== \"a\"</strong>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "nalply",
                        "user_id": 220060
                    },
                    "score": 138
                },
                {
                    "body": "<p>It checked if same sides are equal in <strong>type</strong> as well as <strong>value</strong>. Example:</p>\n\n<pre><code>'1' === 1 // will return \"false\" because `string` is not a `number`\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vsync",
                        "user_id": 104380
                    },
                    "score": 17
                },
                {
                    "body": "<p>In JavaScript it means of the same value and type.</p>\n\n<p>For example,</p>\n\n<pre><code>4 == \"4\" // will return true\n</code></pre>\n\n<p>but</p>\n\n<pre><code>4 === \"4\" // will return false \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dimitar",
                        "user_id": 236521
                    },
                    "score": 34
                },
                {
                    "body": "<p>In PHP and JavaScript, it is a strict equality operator. Which means, it will compare both type and values.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Shiki",
                        "user_id": 246142
                    },
                    "score": 58
                },
                {
                    "body": "<p>It means <strong>equality without type coercion</strong></p>\n\n<pre><code>0==false   // true\n0===false  // false, different types\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pop Catalin",
                        "user_id": 4685
                    },
                    "score": 18
                },
                {
                    "body": "<p>From the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Comparison_Operators\">core javascript reference</a>\n=== Returns true if the operands are strictly equal (see above) with no type conversion.    </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paul Butcher",
                        "user_id": 150882
                    },
                    "score": 9
                },
                {
                    "body": "<p>It checks the values as well as the types of the variables for equality.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Niraj CHoubey",
                        "user_id": 333371
                    },
                    "score": 7
                },
                {
                    "body": "<p>It's a strict check test.</p>\n\n<p>It's a good thing especially if you're checking between 0 and false and null. </p>\n\n<p>For example, if you have:</p>\n\n<p>$a = 0;</p>\n\n<p>Then:</p>\n\n<pre><code>$a==0; \n$a==NULL;\n$a==false;\n</code></pre>\n\n<p>All returns true and you may not want this. Let's suppose you have a function that can return the 0th index of an array or false on failure. If you check with \"==\" false, you can get a confusing result.</p>\n\n<p>So with the same thing as above, but a strict test:</p>\n\n<pre><code>$a = 0;\n\n$a===0; // returns true\n$a===NULL; // returns false\n$a===false; // returns false\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Daniel",
                        "user_id": 250195
                    },
                    "score": 8
                },
                {
                    "body": "<p><em><strong>The equal comparison operator == is confusing and should be avoided.</em></strong> </p>\n\n<p>If you <strong>HAVE TO</strong> live with it, then remember the following 3 things: </p>\n\n<ol>\n<li><strong>It is not transitive: <em>(a == b)</em> and <em>(b == c)</em> does not lead to <em>(a == c)</em></strong></li>\n<li><strong>It's mutually exclusive to its negation: <em>(a == b)</em> and <em>(a != b)</em> always hold opposite Boolean values, with all a and b.</strong></li>\n<li><strong>In case of doubt, learn by heart the following truth table:</strong></li>\n</ol>\n\n<p>EQUAL OPERATOR TRUTH TABLE IN JAVASCRIPT</p>\n\n<ul>\n<li>Each row in the table is a set of 3 mutually \"equal\" values, meaning that any 2 values among them are equal using the equal == sign*</li>\n</ul>\n\n<p>** STRANGE: note that any two values on the first column are not equal in that sense.**</p>\n\n<pre><code>''       == 0 == false   // Any two values among these 3 ones are equal with the == operator\n'0'      == 0 == false   // Also a set of 3 equal values, note that only 0 and false are repeated\n'\\t'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\r'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\n'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\t\\r\\n' == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n\nnull == undefined  // These two \"default\" values are not-equal to any of the listed values above\nNaN                // NaN is not equal to any thing, even to itself.\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "CuongHuyTo",
                        "user_id": 487785
                    },
                    "score": 15
                },
                {
                    "body": "<p>JSLint sometimes gives you unrealistic reasons to modify stuff. <code>===</code> has the exactly same performance as <code>==</code> if the types are already the same. </p>\n\n<p>It is faster only when the types are not the same, in which case it does not try to convert types but directly returns a false.</p>\n\n<p>So, <em>IMHO,</em> JSLint maybe used to write new code, but useless over-optimizing should be avoided at all costs. </p>\n\n<p>Meaning, there is no reason to change <code>== to ===</code> in a check like <code>if (a == 'test')</code> when you know it for a fact that a can only be a String. </p>\n\n<p>Modifying a lot of code that way wastes developers' and reviewers' time and achieves nothing.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ashes",
                        "user_id": 582509
                    },
                    "score": 8
                },
                {
                    "body": "<p>As a rule of thumb, I would generally use <code>===</code> instead of <code>==</code> (and <code>!==</code> instead of <code>!=</code>).</p>\n\n<p>Reasons are explained in in the answers above and also Douglas Crockford is pretty clear about it (<a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\">JavaScript: The Good Parts</a>).</p>\n\n<p>However there is <strong>one single exception</strong>:\n<code>== null</code> is an efficient way to check for 'is null or undefined':</p>\n\n<pre><code>if( value == null ){\n    // value is either null or undefined\n}\n</code></pre>\n\n<p>For example jQuery 1.9.1 uses this pattern 43 times, and  the <a href=\"http://www.jshint.com/docs/#options\">JSHint syntax checker</a> even provides the <code>eqnull</code> relaxing option for this reason.</p>\n\n<p>From the <a href=\"http://contribute.jquery.org/style-guide/js/\">jQuery style guide</a>:</p>\n\n<blockquote>\n  <p>Strict equality checks (===) should be used in favor of ==. The only\n  exception is when checking for undefined and null by way of null.</p>\n\n<pre><code>// Check for both undefined and null values, for some important reason. \nundefOrNull == null;\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mar10",
                        "user_id": 19166
                    },
                    "score": 7
                },
                {
                    "body": "<pre><code>JavaScript === vs == .\n\n    0==false   // true\n    0===false  // false, because they are of a different type\n    1==\"1\"     // true, auto type coercion\n    1===\"1\"    // false, because they are of a different type\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2496033"
                    },
                    "score": 7
                },
                {
                    "body": "<p>The top 2 answers both mentioned == means equality and === means identity. Unfortunately, this statement is incorrect. </p>\n\n<p>If both operands of == are objects, then they are compared to see if they are the same object. If both operands point to the same object, then the equal operator returns true. Otherwise,\nthe two are not equal. </p>\n\n<pre><code>var a = [1, 2, 3];  \nvar b = [1, 2, 3];  \nconsole.log(a == b)  // false  \nconsole.log(a === b) // false  \n</code></pre>\n\n<p>In the code above, both == and === get false because a and b are not the same objects.</p>\n\n<p>That's to say: if both operands of == are objects, == behaves same as ===, which also means identity. The essential difference of this two operators is about type conversion. == has conversion before it checks equality, but === does not.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Harry He",
                        "user_id": 1092195
                    },
                    "score": 4
                },
                {
                    "body": "<p><b>Equality comparison: </b></p>\n\n<p>Operator <code>==</code></p>\n\n<p>Returns true, when both operands are equal. The operands are converted to the same type before being compared.</p>\n\n<pre><code>&gt;&gt;&gt; 1 == 1\ntrue\n&gt;&gt;&gt; 1 == 2\nfalse\n&gt;&gt;&gt; 1 == '1'\ntrue\n</code></pre>\n\n<p><b>Equality and type comparison: </b></p>\n\n<p>Operator <code>===</code></p>\n\n<p>Returns true if both operands are equal and of the same type. It's generally \nbetter and safer if you compare this way, because there's no behind-the-scenes type conversions.</p>\n\n<pre><code>&gt;&gt;&gt; 1 === '1'\nfalse\n&gt;&gt;&gt; 1 === 1\ntrue\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2601995",
                        "user_id": 2601995
                    },
                    "score": 4
                },
                {
                    "body": "<p>*<strong><em>Operators === vs == *</em></strong> </p>\n\n<pre><code>1 == true    =&gt;    true\ntrue == true    =&gt;    true\n1 === true    =&gt;    false\ntrue === true    =&gt;    true\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mr.G",
                        "user_id": 3048442
                    },
                    "score": 1
                },
                {
                    "body": "<p>Here is a handy comparison table that shows the conversions that happen and the differences between <code>==</code> and <code>===</code>.</p>\n\n<p>As the conclusion states:</p>\n\n<blockquote>\n  <p>\"Use three equals unless you fully understand the conversions that take\n  place for two-equals.\"</p>\n</blockquote>\n\n<p><a href=\"http://dorey.github.io/JavaScript-Equality-Table/\" rel=\"nofollow\">http://dorey.github.io/JavaScript-Equality-Table/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Christian Hagelid",
                        "user_id": 202
                    },
                    "score": 2
                },
                {
                    "body": "<p>null and undefined are nothingness, that is,</p>\n\n<pre><code>var a;\nvar b = null;\n</code></pre>\n\n<p>Here <code>a</code> and <code>b</code> do not have values. Whereas, 0, false and '' are all values. One thing common beween all these are that they are all falsy values, which means they all <strong>satisfy</strong> falsy conditions.</p>\n\n<p>So, the 0, false and '' together form a sub-group. And on other hand, null &amp; undefined form the second sub-group. Check the comparisons in the below image. null and undefined would equal. The other three would equal to each other. But, they all are treated as falsy conditions in JavaScript.</p>\n\n<p><img src=\"http://i.stack.imgur.com/11I0i.jpg\" alt=\"Enter image description here\"></p>\n\n<p>This is same as any object (like {}, arrays, etc.), non-empty string &amp; Boolean true are all truthy conditions. But, they are all not equal.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vivek_nk",
                        "user_id": 1984606
                    },
                    "score": 2
                },
                {
                    "body": "<p>An interesting pictorial representation of the equality comparison between <code>==</code> and <code>===</code>.  </p>\n\n<p><strong>Source: <a href=\"http://dorey.github.io/JavaScript-Equality-Table/\">http://dorey.github.io/JavaScript-Equality-Table/</a></strong></p>\n\n<p><br/></p>\n\n<h1>var1===var2</h1>\n\n<blockquote>\n  <p><strong><em>When using three equals signs for JavaScript equality testing,\n  everything is as is. Nothing gets converted before being evaluated.</em></strong></p>\n</blockquote>\n\n<p><img src=\"http://i.stack.imgur.com/62vxI.png\" alt=\"Equality evaluation of === in JS\"></p>\n\n<p><br /></p>\n\n<h1>var1==var2</h1>\n\n<blockquote>\n  <p><strong><em>When using two equals signs for JavaScript equality testing, some\n  funky conversions take place.</em></strong></p>\n</blockquote>\n\n<p><img src=\"http://i.stack.imgur.com/35MpY.png\" alt=\"Equality evaluation of == in JS\"></p>\n\n<p><br /></p>\n\n<blockquote>\n  <p><strong><em>Moral of the story: Use three equals unless you fully understand the\n  conversions that take place for two-equals.</em></strong></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SNag",
                        "user_id": 979621
                    },
                    "score": 114
                },
                {
                    "body": "<p>JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., <code>===</code>) is only true if the operands are of the same type. The more commonly used abstract comparison (e.g. <code>==</code>) converts the operands to the same Type before making the comparison.</p>\n\n<ul>\n<li><p>The equality(<code>==</code>) operator converts the operands if they are not of the same type, then applies strict comparison. If either operand is a number or a boolean, the operands are converted to numbers if possible; else if either operand is a string, the string operand is converted to a number if possible. If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory.</p>\n\n<p>Syntax</p>\n\n<p><code>x == y</code></p>\n\n<p>Examples</p>\n\n<p><code>3   == 3   // true\n\"3\"  == 3   // true\n3   == '3' // true</code></p></li>\n<li><p>The identity/strict equality(<code>===</code>) operator returns true if the operands are strictly equal (see above) with no type conversion.</p>\n\n<p>Syntax</p>\n\n<p><code>x === y</code></p>\n\n<p>Examples</p>\n\n<p><code>3 === 3   // true</code></p></li>\n</ul>\n\n<p>For reference: <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" rel=\"nofollow\">Comparison operators</a></em> (Mozilla Developer Network)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "garakchy",
                        "user_id": 2948746
                    },
                    "score": 1
                },
                {
                    "body": "<p>==  Equality comparison: \nReturns true when both operands are equal. The operands are converted to the same type before being compared.   </p>\n\n<pre><code>&gt;&gt;&gt; 1 == 1 \ntrue;\n&gt;&gt;&gt; 1 == 2 \nfalse;\n&gt;&gt;&gt; 1 == '1' \nTrue\n</code></pre>\n\n<p>=== Equality and type comparison: \nReturns true if both operands are equal and of the same type. It's generally better and safer if you compare this way, because there's no behind-the-scenes type conversions.</p>\n\n<pre><code>&gt;&gt;&gt; 1 === '1'\nfalse;\n&gt;&gt;&gt; 1 === 1\ntrue\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sourcecode",
                        "user_id": 2123853
                    },
                    "score": 2
                },
                {
                    "body": "<p><strong>Yes!</strong> It does matter.</p>\n\n<p><code>===</code> operator in javascript <strong>checks value as well as type</strong> where as <code>==</code> operator just checks <strong>the value (does type conversion if required)</strong>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/5ttlR.png\" alt=\"enter image description here\"></p>\n\n<p>You can easily test it. Paste following code in an HTML file and open it in browser</p>\n\n<pre><code>&lt;script&gt;\n\nfunction onPageLoad()\n{\n    var x = \"5\";\n    var y = 5;\n    alert(x === 5);\n};\n\n&lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body onload='onPageLoad();'&gt;\n</code></pre>\n\n<p>You will get '<strong>false</strong>' in alert. Now modify the <code>onPageLoad()</code> method to <code>alert(x == 5);</code> you will get <strong>true</strong>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Aniket Thakur",
                        "user_id": 2396539
                    },
                    "score": 2
                },
                {
                    "body": "<p>If you are making a web application or a secured page you should always use (only when possible)</p>\n\n<pre><code>===\n</code></pre>\n\n<p>because it will will check if it is the same content and if it is the same type!</p>\n\n<p>so when someone enters:</p>\n\n<pre><code>var check = 1;\nif(check == '1') {\n    //someone continued with a string instead of number, most of the time useless for your webapp, most of the time entered by a user who does not now what he is doing (this will sometimes let your app crash), or even worse it is a hacker searching for weaknesses in your webapp!\n}\n</code></pre>\n\n<p>but with</p>\n\n<pre><code>var check = 1;\nif(check === 1) {\n    //some continued with a number (no string) for your script\n} else {\n    alert('please enter a real number');\n}\n</code></pre>\n\n<p>a hacker will never get deeper in the system to find bugs and hack your app or your users</p>\n\n<p>my point it is that the </p>\n\n<pre><code>===\n</code></pre>\n\n<p>will add more security to your scripts</p>\n\n<p>of course you can also check if the entered number is valid, is a string, etc.. with other if statements inside the first example, but this is for at least me more easier to understand and use</p>\n\n<p>The reason I posted this is that the word 'more secure' or 'security' has never been said in this conversation (if you look at iCloud.com it uses 2019 times === and 1308 times ==, this also means that you sometimes have the use == instead of === because it will otherwise block your function, but as said in the begin you should use === as much as possible)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sake Salverda",
                        "user_id": 3711267
                    },
                    "score": 1
                },
                {
                    "body": "<p>Simply </p>\n\n<p><code>==</code> means <strong>comparison</strong> between operands <strong>with</strong> <code>type conversion</code></p>\n\n<p>&amp;</p>\n\n<p><code>===</code> means <strong>comparison</strong> between operands <strong>without</strong> <code>type conversion</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Amit",
                        "user_id": 2424040
                    },
                    "score": 0
                }
            ],
            "body": "<p>I'm using <a href=\"http://en.wikipedia.org/wiki/JSLint\">JSLint</a> to go through JavaScript, and it's returning many suggestions to replace <code>==</code> (two equals signs) with <code>===</code> (three equals signs) when doing things like comparing <code>idSele_UNVEHtype.value.length == 0</code> inside of an <code>if</code> statement.</p>\n\n<p>Is there a performance benefit to replacing <code>==</code> with <code>===</code>? </p>\n\n<p>Any performance improvement would be welcomed as many comparison operators exist.</p>\n\n<p>If no type conversion takes place, would there be a performance gain over <code>==</code>?</p>\n",
            "last_activity_date": 1426827948,
            "owner": {
                "display_name": "bcasp",
                "user_id": 44990
            },
            "question_id": 359494,
            "score": 2409,
            "tags": [
                "javascript",
                "operators",
                "equality",
                "equality-operator",
                "identity-operator"
            ],
            "title": "Does it matter which equals operator (== vs ===) I use in JavaScript comparisons?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>All is in the doc :</p>\n\n<blockquote>\n  <p>The difference between attributes and properties can be important in specific situations. Before jQuery 1.6, the .attr() method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. As of jQuery 1.6, the .prop() method provides a way to explicitly retrieve property values, while .attr() only retrieves attributes.</p>\n</blockquote>\n\n<p>So use prop !</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arnaud F.",
                        "user_id": 466227
                    },
                    "score": 19
                },
                {
                    "body": "<p>This change has been a long time coming for jQuery. For years, they've been content with a function named <code>attr()</code> that mostly retrieved DOM properties, not the result you'd expect from the name. The segregation of <a href=\"http://api.jquery.com/attr\" rel=\"nofollow\"><code>attr()</code></a> and <a href=\"http://api.jquery.com/prop\" rel=\"nofollow\"><code>prop()</code></a> should help alleviate some of the confusion between HTML attributes and DOM properties. <code>$.fn.prop()</code> grabs the specified DOM property, while <code>$.fn.attr()</code> grabs the specified HTML attribute. </p>\n\n<p>To fully understand how they work, here's an extended explanation on the difference between HTML attributes and DOM properties.:</p>\n\n<h2>HTML Attributes</h2>\n\n<h3>Syntax:</h3>\n\n<p><code>&lt;body onload=\"foo()\"&gt;</code></p>\n\n<p><strong>Purpose:</strong>\nAllows markup to have data associated with it for events, rendering, and other purposes.</p>\n\n<p><strong>Visualization:</strong>\n<img src=\"https://i.stack.imgur.com/NGBd6.png\" alt=\"HTML Attributes\">\nThe class attribute is shown here on the body. It's accessible through the following code:</p>\n\n<pre><code>var attr;\nattr = document.body.getAttribute(\"class\");\n//IE 8 Quirks and below\nattr = document.body.getAttribute(\"className\");\n</code></pre>\n\n<p>Attributes are returned in string form and can be inconsistent from browser to browser. However, they can be vital in some situations. As exemplified above, IE 8 Quirks Mode (and below) expects the name of a DOM property in get/set/removeAttribute instead of the attribute name. This is one of many reasons why it's important to know the difference.</p>\n\n<h2>DOM Properties</h2>\n\n<h3>Syntax:</h3>\n\n<p><code>document.body.onload = foo;</code></p>\n\n<p><strong>Purpose:</strong>\nGives access to properties that belong to element nodes. These properties are similar to attributes, but are only accessible through JavaScript. This is an important difference that helps clarify the role of DOM properties. <strong>Please note that attributes are completely different from properties</strong>, as this event handler assignment is useless and won't receive the event (body doesn't have an onload event, only an onload attribute).</p>\n\n<p><strong>Visualization:</strong>\n<img src=\"https://i.stack.imgur.com/genBY.png\" alt=\"DOM Properties\"></p>\n\n<p>Here, you'll notice a list of properties under the \"DOM\" tab in Firebug. These are DOM properties. You'll immediately notice quite a few of them, as you'll have used them before without knowing it. Their values are what you'll be receiving through JavaScript.</p>\n\n<h2>Documentation</h2>\n\n<ul>\n<li><a href=\"http://books.google.ca/books?id=2weL0iAfrEMC&amp;lpg=PT334&amp;ots=_9VAqAT03C&amp;dq=html%20attributes%20vs%20dom%20properties&amp;pg=PT332#v=onepage&amp;q&amp;f=false\" rel=\"nofollow\">JavaScript: The Definitive Guide by\nDavid Flanagan</a> </li>\n<li><a href=\"https://developer.mozilla.org/en/HTML/Attributes\" rel=\"nofollow\">HTML Attributes,\nMozilla Dev Center</a></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/element#Properties\" rel=\"nofollow\">DOM Element Properties, Mozilla Dev Center</a></li>\n</ul>\n\n<h2>Example</h2>\n\n<p>HTML: <code>&lt;textarea id=\"test\" value=\"foo\"&gt;&lt;/textarea&gt;</code></p>\n\n<p>JavaScript: <code>alert($('#test').attr('value'));</code></p>\n\n<p>In earlier versions of jQuery, this returns an empty string. In 1.6, it returns the proper value, <code>foo</code>.</p>\n\n<p>Without having glanced at the new code for either function, I can say with confidence that the confusion has more to do with the difference between HTML attributes and DOM properties, than with the code itself. Hopefully, this cleared some things up for you.</p>\n\n<p>-Matt</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user1385191"
                    },
                    "score": 164
                },
                {
                    "body": "<p><strong>Update 1 November 2012</strong></p>\n\n<p>My original answer applies specifically to jQuery 1.6. My advice remains the same but jQuery 1.6.1 changed things slightly: in the face of the predicted pile of broken websites, the jQuery team <a href=\"http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/\">reverted <code>attr()</code> to something close to (but not exactly the same as) its old behaviour for Boolean attributes</a>. John Resig also <a href=\"http://ejohn.org/blog/jquery-16-and-attr/\">blogged about it</a>. I can see the difficulty they were in but still disagree with his recommendation to prefer <code>attr()</code>.</p>\n\n<p><strong>Original answer</strong></p>\n\n<p>If you've only ever used jQuery and not the DOM directly, this could be a confusing change, although it is definitely an improvement conceptually. Not so good for the bazillions of sites using jQuery that will break as a result of this change though.</p>\n\n<p>I'll summarize the main issues:</p>\n\n<ul>\n<li>You usually want <code>prop()</code> rather than <code>attr()</code>.</li>\n<li>In the majority of cases, <code>prop()</code> does what <code>attr()</code> used to do. Replacing calls to <code>attr()</code> with <code>prop()</code> in your code will generally work.</li>\n<li>Properties are generally simpler to deal with than attributes. An attribute value may only be a string whereas a property can be of any type. For example, the <code>checked</code> property is a Boolean, the <code>style</code> property is an object with individual properties for each style, the <code>size</code> property is a number.</li>\n<li>Where both a property and an attribute with the same name exists, usually updating one will update the other, but this is not the case for certain attributes of inputs, such as <code>value</code> and <code>checked</code>: for these attributes, the property always represents the current state while the attribute (except in old versions of IE) corresponds to the default value/checkedness of the input (reflected in the <code>defaultValue</code> / <code>defaultChecked</code> property).</li>\n<li>This change removes some of the layer of magic jQuery stuck in front of attributes and properties, meaning jQuery developers will have to learn a bit about the difference between properties and attributes. This is a good thing.</li>\n</ul>\n\n<p>If you're a jQuery developer and are confused by this whole business about properties and attributes, you need to take a step back and learn a little about it, since jQuery is no longer trying so hard to shield you from this stuff. For the authoritative but somewhat dry word on the subject, there's the specs: <a href=\"http://www.w3.org/TR/dom/\">DOM4</a>, <a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/\">HTML DOM</a>, <a href=\"http://www.w3.org/TR/DOM-Level-2-Core\">DOM Level 2</a>, <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/\">DOM Level 3</a>. Mozilla's DOM documentation is valid for most modern browsers and is easier to read than the specs, so you may find their <a href=\"https://developer.mozilla.org/en/gecko_dom_reference\">DOM reference</a> helpful. There's a <a href=\"https://developer.mozilla.org/en/DOM/element#Properties\">section on element properties</a>.</p>\n\n<p>As an example of how properties are simpler to deal with than attributes, consider a checkbox that is initially checked. Here are two possible pieces of valid HTML to do this:</p>\n\n<pre><code>&lt;input id=\"cb\" type=\"checkbox\" checked&gt;\n&lt;input id=\"cb\" type=\"checkbox\" checked=\"checked\"&gt;\n</code></pre>\n\n<p>So, how do you find out if the checkbox is checked with jQuery? Look on Stack Overflow and you'll commonly find the following suggestions:</p>\n\n<ul>\n<li><code>if ( $(\"#cb\").attr(\"checked\") === true ) {...}</code></li>\n<li><code>if ( $(\"#cb\").attr(\"checked\") == \"checked\" ) {...}</code></li>\n<li><code>if ( $(\"#cb\").is(\":checked\") ) {...}</code></li>\n</ul>\n\n<p>This is actually the simplest thing in the world to do with the <code>checked</code> Boolean property, which has existed and worked flawlessly in every major scriptable browser since 1995:</p>\n\n<p><code>if (document.getElementById(\"cb\").checked) {...}</code></p>\n\n<p>The property also makes checking or unchecking the checkbox trivial:</p>\n\n<p><code>document.getElementById(\"cb\").checked = false</code></p>\n\n<p>In jQuery 1.6, this unambiguously becomes</p>\n\n<p><code>$(\"#cb\").prop(\"checked\", false)</code></p>\n\n<p>The idea of using the <code>checked</code> attribute for scripting a checkbox is unhelpful and unnecessary. The property is what you need.</p>\n\n<ul>\n<li>It's not obvious what the correct way to check or uncheck the checkbox is using the <code>checked</code> attribute</li>\n<li>The attribute value reflects the default rather than the current visible state (except in some older versions of IE, thus making things still harder). The attribute tells you nothing about the whether the checkbox on the page is checked. See <a href=\"http://jsfiddle.net/VktA6/49/\">http://jsfiddle.net/VktA6/49/</a>.</li>\n</ul>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Tim Down",
                        "user_id": 96100
                    },
                    "score": 1013
                },
                {
                    "body": "<p>I think <a href=\"http://stackoverflow.com/questions/5874652/prop-vs-attr/5876747#5876747\">Tim said it quite well</a>, but let's step back:</p>\n\n<p>A DOM element is an object, a thing in memory. Like most objects in OOP, it has <em>properties</em>. It also, separately, has a map of the attributes defined on the element (usually coming from the markup that the browser read to create the element). Some of the element's <em>properties</em> get their <em>initial</em> values from <em>attributes</em> with the same or similar names (<code>value</code> gets its initial value from the \"value\" attribute; <code>href</code> gets its initial value from the \"href\" attribute, but it's not exactly the same value; <code>className</code> from the \"class\" attribute). Other properties get their initial values in other ways: For instance, the <code>parentNode</code> property gets its value based on what its parent element is; an element always has a <code>style</code> property, whether it has a \"style\" attribute or not.</p>\n\n<p>Let's consider this anchor in a page at <code>http://example.com/testing.html</code>:</p>\n\n<pre><code>&lt;a href='foo.html' class='test one' name='fooAnchor' id='fooAnchor'&gt;Hi&lt;/a&gt;\n</code></pre>\n\n<p>Some gratuitous ASCII art (and leaving out a lot of stuff):</p>\n\n<pre><code>+-------------------------------------------+\n| a                                         |\n+-------------------------------------------+\n| href:       \"http://example.com/foo.html\" |\n| name:       \"fooAnchor\"                   |\n| id:         \"fooAnchor\"                   |\n| className:  \"test one\"                    |\n| attributes:                               |\n|    href:  \"foo.html\"                      |\n|    name:  \"fooAnchor\"                     |\n|    id:    \"fooAnchor\"                     |\n|    class: \"test one\"                      |\n+-------------------------------------------+\n</code></pre>\n\n<p>Note that the properties and attributes are distinct.</p>\n\n<p>Now, although they are distinct, because all of this evolved rather than being designed from the ground up, a number of properties write back to the attribute they derived from if you set them. But not all do, and as you can see from <code>href</code> above, the mapping is not always a straight \"pass the value on\", sometimes there's interpretation involved.</p>\n\n<p>When I talk about properties being properties of an object, I'm not speaking in the abstract. Here's some non-jQuery code:</p>\n\n<pre><code>var link = document.getElementById('fooAnchor');\nalert(link.href);                 // alerts \"http://example.com/foo.html\"\nalert(link.getAttribute(\"href\")); // alerts \"foo.html\"\n</code></pre>\n\n<p>(Those values are as per most browsers; there's some variation.)</p>\n\n<p>The <code>link</code> object is a real thing, and you can see there's a real distinction between accessing a <em>property</em> on it, and accessing an <em>attribute</em>.</p>\n\n<p>As Tim said, the <strong>vast majority</strong> of the time, we want to be working with properties. Partially that's because their values (even their names) tend to be more consistent across browsers. We mostly only want to work with attributes when there is no property related to it (custom attributes), or when we know that for that particular attribute, the attribute and the property are not 1:1 (as with <code>href</code> and \"href\" above).</p>\n\n<p>The standard properties are laid out in the various DOM specs:</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/\">DOM2 HTML</a></li>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-2-Core/\">DOM2 Core</a></li>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-3-Core/\">DOM3 Core</a></li>\n</ul>\n\n<p>These specs have excellent indexes and I recommend keeping links to them handy; I use them all the time.</p>\n\n<p>Custom attributes would include, for instance, any <code>data-xyz</code> attributes you might put on elements to provide meta-data to your code (now that that's valid as of HTML5, as long as you stick to the <code>data-</code> prefix). (Recent versions of jQuery give you access to <code>data-xyz</code> elements via the <code>data</code> function, but that function does more than that and if you're just dealing with a <code>data-xyz</code> attribute, I'd actually use the <code>attr</code> function to interact with it.)</p>\n\n<p>The <code>attr</code> function used to have some convoluted logic around getting what they thought you wanted, rather than literally getting the attribute. It conflated the concepts. Moving to <code>prop</code> and <code>attr</code> is meant to de-conflate them. There will be some brief confusion, but hopefully a better understanding of what's really going on going forward.</p>\n\n<p>Some time kicking around the specs above, and experimenting, should help clear some of this up.  </p>\n\n<p><strong>Update</strong>: jQuery 1.6.1 changes the <code>attr</code> function again, in ways that the jQuery team say mean most code that currently uses <code>attr</code> will continue to work, even if <code>prop</code> would technically be preferred. Details in the <a href=\"http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/\">jQuery 1.6.1 blog post</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "T.J. Crowder",
                        "user_id": 157247
                    },
                    "score": 371
                },
                {
                    "body": "<p>It's just the distinction between HTML attributes and DOM objects that causes a confusion. For those that are comfortable acting on the DOM elements native properties such a <code>this.src</code> <code>this.value</code> <code>this.checked</code> etc, <code>.prop</code> is a very warm welcome to the family. For others, it's just an added layer of confusion. Let's clear that up.</p>\n\n<p>The easiest way to see the difference between <code>.attr</code> and <code>.prop</code> is the following example:</p>\n\n<pre><code>&lt;input blah=\"hello\"&gt;\n</code></pre>\n\n<ol>\n<li><strong><code>$('input').attr('blah')</code></strong>: returns <code>'hello'</code> as expected. No suprises here.</li>\n<li><strong><code>$('input').prop('blah')</code></strong>: returns <code>undefined</code> -- because it's trying to do <code>[HTMLInputElement].blah</code> -- and no such property on that DOM object exists. It only exists in the scope as an attribute of that element i.e. <code>[HTMLInputElement].getAttribute('blah')</code></li>\n</ol>\n\n<p>Now we change a few things like so:</p>\n\n<pre><code>$('input').attr('blah', 'apple');\n$('input').prop('blah', 'pear');\n</code></pre>\n\n<ol>\n<li><strong><code>$('input').attr('blah')</code></strong>: returns <code>'apple'</code> eh? Why not \"pear\" as this was set last on that element. Because the property was changed on the input attribute, not the DOM input element itself -- they basically almost work independently of each other.</li>\n<li><strong><code>$('input').prop('blah')</code></strong>: returns <code>'pear'</code></li>\n</ol>\n\n<p>The thing you really need to be careful with is just <strong>do not mix the usage of these for the same property throughout your application</strong> for the above reason.</p>\n\n<p><strong>See a fiddle demonstrating the difference:</strong> <a href=\"http://jsfiddle.net/garreh/uLQXc/\">http://jsfiddle.net/garreh/uLQXc/</a></p>\n\n<hr>\n\n<h2><code>.attr</code> vs <code>.prop</code>:</h2>\n\n<h3>Round 1: style</h3>\n\n<pre><code>&lt;input style=\"font:arial;\"/&gt;\n</code></pre>\n\n<ul>\n<li><code>.attr('style')</code> -- returns inline styles for the matched element i.e. <code>\"font:arial;\"</code></li>\n<li><code>.prop('style')</code> -- returns an style declaration object i.e. <code>CSSStyleDeclaration</code></li>\n</ul>\n\n<h3>Round 2: value</h3>\n\n<pre><code>&lt;input value=\"hello\" type=\"text\"/&gt;   \n\n$('input').prop('value', 'i changed the value');\n</code></pre>\n\n<ul>\n<li><code>.attr('value')</code> -- returns <code>'hello'</code> *</li>\n<li><code>.prop('value')</code> -- returns <code>'i changed the value'</code></li>\n</ul>\n\n<p>* Note: jQuery for this reason has a <code>.val()</code> method, which internally is equivalent to <code>.prop('value')</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gary Hole",
                        "user_id": 63523
                    },
                    "score": 89
                },
                {
                    "body": "<p>A property is in the DOM; an attribute is in the HTML that is parsed into the DOM.</p>\n\n<h3>Further detail</h3>\n\n<p>If you change an attribute, the change will be reflected in the DOM (sometimes with a different name).<br>\nExample: changing the <code>class</code> attribute of a tag will change the <code>className</code> property of that tag in the DOM<br>\nIf you have no attribute on a tag, you still have the corresponding DOM property with an empty or default value.<br>\nExample: While your tag has no <code>class</code> attribute, the DOM property <code>className</code> does exist with a empty string value.</p>\n\n<p><strong>edit</strong></p>\n\n<p>If you change the one, the other will be changed by a controller, and vice versa.\nThis controller is not in jQuery, but in the browsers' native code.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "HerrSerker",
                        "user_id": 476951
                    },
                    "score": 142
                },
                {
                    "body": "<p>Usually you'll want to use properties.\nUse attributes only for:</p>\n\n<ol>\n<li>Getting a custom HTML attribute (since it's not synced with a DOM property).</li>\n<li>Getting a HTML attribute that doesn't sync with a DOM property, e.g. get the \"original value\" of a standard HTML attribute, like <code>&lt;input value=\"abc\"&gt;.</code></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "naor",
                        "user_id": 2160798
                    },
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://www.w3.org/TR/html5/forms.html#concept-input-checked-dirty\" rel=\"nofollow\"><strong>dirty checkedness</strong></a> is an example where the difference is <strong>observable</strong>.</p>\n\n<p>To see it, run the following snippet and:</p>\n\n<ul>\n<li>click the button. Both checkboxes got checked.</li>\n<li>uncheck both checkboxes.</li>\n<li>click the button again. Only the <code>prop</code> checkbox got checked. BANG!</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('button').on('click', function() {\r\n  $('#attr').attr('checked', 'checked')\r\n  $('#prop').prop('checked', true)\r\n})</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;label&gt;attr &lt;input id=\"attr\" type=\"checkbox\"&gt;&lt;/label&gt;\r\n&lt;label&gt;prop &lt;input id=\"prop\" type=\"checkbox\"&gt;&lt;/label&gt;\r\n&lt;button type=\"button\"&gt;Set checked attr and prop.&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For some attributes  like <code>disabled</code> on <code>button</code>, adding or removing the content attribute <code>disabled=\"disabled\"</code> always toggles the property (called IDL attribute in HTML5) because <a href=\"http://www.w3.org/TR/html5/forms.html#attr-fe-disabled\" rel=\"nofollow\">http://www.w3.org/TR/html5/forms.html#attr-fe-disabled</a> says:</p>\n\n<blockquote>\n  <p>The disabled IDL attribute must reflect the disabled content attribute.</p>\n</blockquote>\n\n<p>so you might get away with it, although it is ugly since it modifies HTML without need.</p>\n\n<p>For other attributes like <code>checked=\"checked\"</code> on <code>input type=\"checkbox\"</code>, things break, because once you click on it, it becomes dirty, and then adding or removing the <code>checked=\"checked\"</code> content attribute <strong>does not toggle checkedness anymore</strong>.</p>\n\n<p>This is why you should use mostly <code>.prop</code>, as it affects the effective property directly, instead of relying on complex side-effects.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ciro Santilli \u516d\u56db\u4e8b\u4ef6 \u6cd5\u8f6e\u529f",
                        "user_id": 895245
                    },
                    "score": 10
                },
                {
                    "body": "<p><strong>TL;DR</strong></p>\n\n<p>Use <code>prop()</code> over <code>attr()</code> in the majority of cases.</p>\n\n<p>A <em>property</em> is the current state of the input element. An <em>attribute</em> is the default value.</p>\n\n<p>A property can contain things of different types. An attribute can only contain strings</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "agjmills",
                        "user_id": 1042427
                    },
                    "score": 13
                },
                {
                    "body": "<p><code>attributes</code> -> HTML</p>\n\n<p><code>properties</code> -> DOM</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "NkS",
                        "user_id": 1398298
                    },
                    "score": 0
                }
            ],
            "body": "<p>So <a href=\"http://api.jquery.com/category/version/1.6/\">jQuery 1.6</a> has the new function <a href=\"http://api.jquery.com/prop/\"><code>prop()</code></a>.</p>\n\n<pre><code>$(selector).click(function(){\n    //instead of:\n    this.getAttribute('style');\n    //do i use:\n    $(this).prop('style');\n    //or:\n    $(this).attr('style');\n})\n</code></pre>\n\n<p>or in this case do they do the same thing?</p>\n\n<p>And if I <em>do</em> have to switch to using <code>prop()</code>, all the old <code>attr()</code> calls will break if i switch to 1.6?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>See this fiddle: <a href=\"http://jsfiddle.net/maniator/JpUF2/\">http://jsfiddle.net/maniator/JpUF2/</a></p>\n\n<p>The console logs the <code>getAttribute</code> as a string, and the <code>attr</code> as a string, but the <code>prop</code> as a <code>CSSStyleDeclaration</code>, Why? And how does that affect my coding in the future?</p>\n",
            "last_activity_date": 1426500279,
            "owner": {
                "display_name": "Neal",
                "user_id": 561731
            },
            "question_id": 5874652,
            "score": 1051,
            "tags": [
                "javascript",
                "jquery",
                "dom",
                "attr",
                "prop"
            ],
            "title": ".prop() vs .attr()"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Most browsers support <a href=\"http://msdn.microsoft.com/en-us/library/cc836466%28v=vs.85%29.aspx\"><code>JSON.parse()</code></a>, which is defined in ECMA-262 5th Edition (the specification that JS is based on).  Its usage is simple:</p>\n\n<pre><code>var json = '{\"result\":true,\"count\":1}',\n    obj = JSON.parse(json);\n\nalert(obj.count);\n</code></pre>\n\n<p>For the browsers that don't you can implement it using <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\">json2.js</a>.</p>\n\n<p>As noted in the comments, if you're already using jQuery, there is a <code>$.parseJSON</code> function that maps to <code>JSON.parse</code> if available or a form of <code>eval</code> in older browsers.\u2002However, this performs additional, unnecessary checks that are also performed by <code>JSON.parse</code>, so for the best all round performance I'd recommend using it like so:</p>\n\n<pre><code>var json = '{\"result\":true,\"count\":1}',\n    obj = JSON &amp;&amp; JSON.parse(json) || $.parseJSON(json);\n</code></pre>\n\n<p>This will ensure you use native <code>JSON.parse</code> immediately, rather than having jQuery perform sanity checks on the string before passing it to the native parsing function.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Andy E",
                        "user_id": 94197
                    },
                    "score": 1135
                },
                {
                    "body": "<p>Without using a library you can use <code>eval</code> - the only time you should use. It's safer to use a library though.</p>\n\n<p>eg...</p>\n\n<pre><code>var response = '{\"result\":true , \"count\":1}';\n\nvar parsedJSON = eval('('+response+')');\n\nvar result=parsedJSON.result;\nvar count=parsedJSON.count;\n\nalert('result:'+result+' count:'+count);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "El Ronnoco",
                        "user_id": 395628
                    },
                    "score": 9
                },
                {
                    "body": "<p>First of all, you have to make sure that the JSON code is valid.  After that, I would recommend using a JavaScript library such as jQuery or Prototype if you can because these things are handled well in those libraries.  On the other hand, if you don't want to use a library and you can vouch for the validity of the JSON object, I would simply wrap string in an anonymous function and use the eval function.  This is not recommended if you are getting the JSON object from another source that isn't absolutely trusted because the eval function allows for renegade code if you will.  Here is an example of using the eval function:</p>\n\n<pre><code>var strJSON = '{\"result\":true,\"count\":1}';\nvar objJSON = eval(\"(function(){return \" + strJSON + \";})()\");\nalert(objJSON.result);\nalert(objJSON.count);\n</code></pre>\n\n<p>If you control what browser is being used or you are not worried people with older browser, you can always use the JSON.parse method.  This is really the ideal solution for the future.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Clarence Fredericks",
                        "user_id": 606743
                    },
                    "score": 56
                },
                {
                    "body": "<p>If you are getting this from an outside site it might be helpful to use jquery's getJSON.  If it's a list you can iterate through it with $.each</p>\n\n<pre><code>$.getJSON(url, function (json) {\n    alert(json.result);\n    $.each(json.list, function (i, fb) {\n        alert(fb.result);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "milestyle",
                        "user_id": 1467019
                    },
                    "score": 27
                },
                {
                    "body": "<p>I thought <code>JSON.parse(myObject)</code> would work. But depending on the browsers, it might be worth using <code>eval('('+myObject+')')</code>. The only issue I can recommend watching out for is the multi-level list in JSON. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ha9u63ar",
                        "user_id": 1770601
                    },
                    "score": 3
                },
                {
                    "body": "<p>If you want to use <a href=\"http://bestiejs.github.com/json3/\" rel=\"nofollow\">JSON 3</a> for older browsers, you can load it conditionally with:</p>\n\n<pre><code>&lt;script&gt;\n    window.JSON || \n    document.write('&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/json3/3.2.4/json3.min.js\"&gt;&lt;\\/scr'+'ipt&gt;');\n&lt;/script&gt;\n</code></pre>\n\n<p>Now the standard window.JSON object is available to you no matter what browser a client is running.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "huwiler",
                        "user_id": 1952201
                    },
                    "score": 17
                },
                {
                    "body": "<p>You can either use the eval function as in some other answers. (Don't forget the extra braces.) You will know why when you dig deeper), or simply use the jQuery function <code>parseJSON</code>:</p>\n\n<pre><code>var response = '{\"result\":true , \"count\":1}'; \nvar parsedJSON = $.parseJSON(response);\n</code></pre>\n\n<p>OR </p>\n\n<p>You can use this below code.</p>\n\n<pre><code>var response = '{\"result\":true , \"count\":1}';\nvar jsonObject = JSON.parse(response);\n</code></pre>\n\n<p>And you can access the fields using <code>jsonObject.result</code> and <code>jsonObject.count</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Teja",
                        "user_id": 2446387
                    },
                    "score": 9
                },
                {
                    "body": "<p>The following example will make it clear:</p>\n\n<pre><code>var jsontext   = '{\"name\":\"x\",\"age\":\"11\"}';\nvar getContact = JSON.parse(jsontext);\ndocument.write(getContact.name + \", \" + getContact.age);\n\n// Output: x, 11\n</code></pre>\n\n<p>OR</p>\n\n<p>You can also use the <code>eval</code> function. The following example is using the <code>eval</code> function:</p>\n\n<pre><code>var jsontext   = '{\"name\":\"x\",\"age\":\"11\"}';\nvar getContact = eval('(' + jsontext + ')');\ndocument.write(getContact.name + \", \" + getContact.age);\n\n// Output: x, 11\n</code></pre>\n\n<p>Since the <code>JSON.parse</code> function is more secure and executes faster than the eval function, I recommend you to use <code>JSON.parse</code> function.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Joke_Sense10",
                        "user_id": 2609966
                    },
                    "score": 12
                },
                {
                    "body": "<p>If you use jQuery, it is simple:</p>\n\n<pre><code>var response = '{\"result\":true,\"count\":1}';\nvar obj = $.parseJSON(response);\nalert(obj.result); //true\nalert(obj.count); //1\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "legendJSLC",
                        "user_id": 816077
                    },
                    "score": 0
                },
                {
                    "body": "<p>As mentioned by numerous others, most browsers support <code>JSON.parse</code> and <code>JSON.stringify</code>.</p>\n\n<p>Now, I'd also like to add that if you are using <a href=\"https://angularjs.org/\" rel=\"nofollow\">AngularJS</a> (which I highly recommend), then it also provides the functionality that you require:</p>\n\n<pre><code>var myJson = '{\"result\": true, \"count\": 1}';\nvar obj = angular.fromJson(myJson);//equivalent to JSON.parse(myJson)\nvar backToJson = angular.toJson(obj);//equivalent to JSON.stringify(obj)\n</code></pre>\n\n<p>Just wanted to add the stuff about angularjs to provide another option. NOTE that angularjs doesn't officially support IE8 (and older versions, for that matter), though through experience most of the stuff seems to work pretty well.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2359695",
                        "user_id": 2359695
                    },
                    "score": 1
                },
                {
                    "body": "<p>if you use dojo</p>\n\n<p><a href=\"http://dojotoolkit.org/reference-guide/1.10/dojo/json.html\" rel=\"nofollow\">http://dojotoolkit.org/reference-guide/1.10/dojo/json.html</a></p>\n\n<pre>\nrequire([\"dojo/json\"], function(JSON){\n  JSON.parse('{\"hello\":\"world\"}', true);\n});\n</pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Brendon-Van-Heyzen",
                        "user_id": 1425
                    },
                    "score": 0
                },
                {
                    "body": "<p>an easy way to do it</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var data = '{\"result\":true,\"count\":1}';\nvar json = eval(\"[\" +data+ \"]\")[0]; // ;)\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "yassine",
                        "user_id": 4076081
                    },
                    "score": 0
                },
                {
                    "body": "<p>If you pass a string variable (a well-formed jsonstring) to JSON.parse from MVC @Viewbag that has doublequote '\"' as quotes, you need to process it before JSON.parse(jsonstring)</p>\n\n<pre><code>    var jsonstring = '@ViewBag.jsonstring';\n    jsonstring = jsonstring.replace(/&amp;quot;/g, '\"');  \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jenna Leaf",
                        "user_id": 4170504
                    },
                    "score": 6
                },
                {
                    "body": "<p>JSON.parse() converts any JSON String passed into the function, to a JSON Object.</p>\n\n<p>For Better understanding press F12 to open Inspect Element of your browser and go to console to write following commands  : -</p>\n\n<pre><code>var response = '{\"result\":true,\"count\":1}'; //sample json object(string form)\nJSON.parse(response); //converts passed string to JSON Object.\n</code></pre>\n\n<p>Now run the command :-</p>\n\n<pre><code>console.log(JSON.parse(response));\n</code></pre>\n\n<p>you'll get output as Object {result: true, count: 1}.</p>\n\n<p>In order to use that Object, you can assign it to the variable let's say obj :-</p>\n\n<pre><code>var obj = JSON.parse(response);\n</code></pre>\n\n<p>Now by using obj and dot(.) operator you can access properties of the JSON Object.</p>\n\n<p>Try to run the command </p>\n\n<pre><code>console.log(obj.result);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pushkar Kathuria",
                        "user_id": 2171599
                    },
                    "score": 0
                }
            ],
            "body": "<p>I want to parse a JSON string in JavaScript. The response is something like</p>\n\n<pre><code>var response = '{\"result\":true,\"count\":1}';\n</code></pre>\n\n<p>How can I get the values <code>result</code> and <code>count</code> from this?</p>\n",
            "last_activity_date": 1424254504,
            "owner": {
                "display_name": "user605334"
            },
            "question_id": 4935632,
            "score": 745,
            "tags": [
                "javascript",
                "json",
                "parsing"
            ],
            "title": "Parse JSON in JavaScript?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<h2>Imperative \u2192 declarative</h2>\n\n<p>In jQuery, <em>selectors</em> are used to find <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a> elements and then bind/register event handlers to them. When an event triggers, that (imperative) code executes to update/change the DOM.</p>\n\n<p>In AngularJS, you want to think about <strong>views</strong> rather than DOM elements. Views are (declarative) HTML that contain AngularJS <strong>directives</strong>. Directives set up the event handlers behind the scenes for us and give us dynamic databinding. Selectors are rarely used, so the need for IDs (and some types of classes) is greatly diminished. Views are tied to <strong>models</strong> (via scopes). Views are a projection of the model. Events change models (that is, data, scope properties), and the views that project those models update \"automatically.\"</p>\n\n<p>In AngularJS, think about models, rather than jQuery-selected DOM elements that hold your data. Think about views as projections of those models, rather than registering callbacks to manipulate what the user sees.</p>\n\n<h2>Separation of concerns</h2>\n\n<p>jQuery employs <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusive JavaScript</a> - behavior (JavaScript) is separated from the structure (HTML).</p>\n\n<p>AngularJS uses <strong>controllers</strong> and directives (each of which can have their own controller, and/or compile and linking functions) to remove behavior from the view/structure (HTML).  Angular also has <strong>services</strong> and <strong>filters</strong> to help separate/organize your application.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/a/14346528/215945\">http://stackoverflow.com/a/14346528/215945</a></p>\n\n<h2>Application design</h2>\n\n<p>One approach to designing an AngularJS application:</p>\n\n<ol>\n<li>Think about your models. Create services or your own JavaScript objects for those models.</li>\n<li>Think about how you want to present your models -- your views. Create HTML templates for each view, using the necessary directives to get dynamic databinding.</li>\n<li>Attach a controller to each view (using ng-view and routing, or ng-controller). Have the controller find/get only whatever model data the view needs to do its job. Make controllers as thin as possible.</li>\n</ol>\n\n<h2>Prototypal inheritance</h2>\n\n<p>You can do a lot with jQuery without knowing about how JavaScript prototypal inheritance works. When developing AngularJS applications, you will avoid some common pitfalls if you have a good understanding of JavaScript inheritance. Recommended reading: <a href=\"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs\">What are the nuances of scope prototypal / prototypical inheritance in AngularJS?</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mark Rajcok",
                        "user_id": 215945
                    },
                    "score": 346
                },
                {
                    "body": "<blockquote>\n  <p>Can you describe the paradigm shift that is necessary?</p>\n</blockquote>\n\n<p><strong>Imperative vs Declarative</strong></p>\n\n<p>With <strong>jQuery</strong> you tell the DOM what needs to happen, step by step. With <strong><a href=\"http://en.wikipedia.org/wiki/AngularJS\">AngularJS</a></strong> you describe what results you want but not how to do it. More on this <a href=\"http://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming\">here</a>. Also, check out Mark Rajcok's answer.</p>\n\n<blockquote>\n  <p>How do I architect and design client-side web apps differently? </p>\n</blockquote>\n\n<p>AngularJS is an entire client-side framework that uses the <a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">MVC</a> pattern (check out their <a href=\"http://docs.angularjs.org/guide/concepts\">graphical representation</a>). It greatly focuses on separation of concerns.</p>\n\n<blockquote>\n  <p>What is the biggest difference? What should I stop doing/using; what should I start doing/using instead?</p>\n</blockquote>\n\n<p><strong>jQuery</strong> is a library </p>\n\n<p><strong>AngularJS</strong> is a beautiful client-side framework, highly testable, that combines tons of cool stuff such as MVC, <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">dependency injection</a>, data binding and much more. </p>\n\n<p>It focuses on <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a> and testing (<a href=\"http://en.wikipedia.org/wiki/Unit_testing\">unit testing</a> and end-to-end testing), which facilitates test-driven development.</p>\n\n<p>The best way to start is going through <a href=\"http://docs.angularjs.org/tutorial/\">their awesome tutorial</a>. You can go through the steps in a couple of hours; however, in case you want to master the concepts behind the scenes, they include a myriad of reference for further reading.</p>\n\n<blockquote>\n  <p>Are there any server-side considerations/restrictions?</p>\n</blockquote>\n\n<p>You may use it on existing applications where you are already using pure jQuery. However, if you want to fully take advantage of the AngularJS features you may consider coding the server side using a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\">RESTful</a> approach.</p>\n\n<p>Doing so will allow you to leverage their <a href=\"http://docs.angularjs.org/api/ngResource.%24resource\">resource factory</a>, which creates an abstraction of your server side RESTful <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a> and makes server-side calls (get, save, delete, etc.) incredibly easy.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ulises",
                        "user_id": 620448
                    },
                    "score": 133
                },
                {
                    "body": "<h1>1. Don't design your page, and then change it with <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a> manipulations</h1>\n\n<p>In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.</p>\n\n<p>But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking \"I have this piece of the DOM and I want to make it do X\", you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.</p>\n\n<h1>2. Don't augment jQuery with AngularJS</h1>\n\n<p>Similarly, don't start with the idea that jQuery does X, Y, and Z, so I'll just add AngularJS on top of that for models and controllers. This is <em>really</em> tempting when you're just starting out, which is why I always recommend that new AngularJS developers don't use jQuery at all, at least until they get used to doing things the \"Angular Way\".</p>\n\n<p>I've seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and <code>$apply</code>s that are confusing and convoluted; but they eventually get it working! The problem is that in <strong>most</strong> cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.</p>\n\n<p>The bottom line is this: when solutioning, first \"think in AngularJS\"; if you can't think of a solution, ask the community; if after all of that there is no easy solution, <em>then</em> feel free to reach for the jQuery. But don't let jQuery become a crutch or you'll never master AngularJS.</p>\n\n<h1>3. Always think in terms of architecture</h1>\n\n<p>First know that <a href=\"http://en.wikipedia.org/wiki/Single-page_application\">single-page applications</a> are <em>applications</em>. They're <em>not</em> webpages. So we need to think like a server-side developer <em>in addition</em> to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.</p>\n\n<p>So then <em>how</em> do you do that? How do you \"think in AngularJS\"? Here are some general principles, contrasted with jQuery.</p>\n\n<h2>The view is the \"official record\"</h2>\n\n<p>In jQuery, we programmatically change the view. We could have a dropdown menu defined as a <code>ul</code> like so:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"main-menu\"&gt;\n    &lt;li class=\"active\"&gt;\n        &lt;a href=\"#/home\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href=\"#/menu1\"&gt;Menu 1&lt;/a&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#/sm1\"&gt;Submenu 1&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/sm2\"&gt;Submenu 2&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/sm3\"&gt;Submenu 3&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href=\"#/home\"&gt;Menu 2&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>In jQuery, in our application logic, we would activate it with something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$('.main-menu').dropdownMenu();\n</code></pre>\n\n<p>When we just look at the view, it's not immediately obvious that there is any functionality here. For small applications, that's fine. But for non-trivial applications, things quickly get confusing and hard to maintain.</p>\n\n<p>In AngularJS, though, the view is the official record of view-based functionality. Our <code>ul</code> declaration would look like this instead:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"main-menu\" dropdown-menu&gt;\n    ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>These two do the same thing, but in the AngularJS version anyone looking at the template knows what's supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then <em>know</em> that there is a directive called <code>dropdownMenu</code> operating on it; she doesn't need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.</p>\n\n<p>Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don't. But the reason you don't do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to \"do jQuery\" in the context of AngularJS. That's never going to work well. The view <em>is</em> the official record. Outside of a directive (more on this below), you never, ever, <em>never</em> change the DOM. And directives are applied <em>in the view</em>, so intent is clear.</p>\n\n<p>Remember: don't design, and then mark up. You must architect, and then design.</p>\n\n<h2>Data binding</h2>\n\n<p>This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don't have to! In jQuery, we respond to events and then update content. Something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$.ajax({\n  url: '/myEndpoint.json',\n  success: function ( data, status ) {\n    $('ul#log').append('&lt;li&gt;Data Received!&lt;/li&gt;');\n  }\n});\n</code></pre>\n\n<p>For a view that looks like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"messages\" id=\"log\"&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?</p>\n\n<p>This a little messy and a trifle frail. But in AngularJS, we can do this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$http( '/myEndpoint.json' ).then( function ( response ) {\n    $scope.log.push( { msg: 'Data Received!' } );\n});\n</code></pre>\n\n<p>And our view can look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"messages\"&gt;\n    &lt;li ng-repeat=\"entry in log\"&gt;{{ entry.msg }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But for that matter, our view could look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"messages\"&gt;\n    &lt;div class=\"alert\" ng-repeat=\"entry in log\"&gt;\n        {{ entry.msg }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And now instead of using an unordered list, we're using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter <em>where</em> or <em>how</em> the log gets updated, the view will change too. Automatically. Neat!</p>\n\n<p>Though I didn't show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this: <code>&lt;input ng-model=\"entry.msg\" /&gt;</code>. And there was much rejoicing.</p>\n\n<h2>Distinct model layer</h2>\n\n<p>In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">separation of concerns</a>, and introduces far greater testability. Other answers mentioned this point, so I'll just leave it at that.</p>\n\n<h2>Separation of concerns</h2>\n\n<p>And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part); your model represents your data; you have a service layer to perform reusable tasks; you do DOM manipulation and augment your view with directives; and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.</p>\n\n<h2>Dependency injection</h2>\n\n<p>To help us out with separation of concerns is <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">dependency injection</a> (DI). If you come from a server-side language (from <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> to <a href=\"http://en.wikipedia.org/wiki/PHP\">PHP</a>) you're probably familiar with this concept already, but if you're a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it's not. :-)</p>\n\n<p>From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don't have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I'll provide just one (common) example: testing.</p>\n\n<p>Let's say in our application, we require a service that implements server-side storage through a <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> API and, depending on application state, local storage as well. When running tests on our controllers, we don't want to have to communicate with the server - we're testing the <em>controller</em>, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn't and needn't know the difference.</p>\n\n<p>Speaking of testing...</p>\n\n<h1>4. Test-driven development - <em>always</em></h1>\n\n<p>This is really part of section 3 on architecture, but it's so important that I'm putting it as its own top-level section.</p>\n\n<p>Out of all of the many jQuery plugins you've seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn't very amenable to that. But AngularJS is.</p>\n\n<p>In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and <em>then</em> integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?</p>\n\n<p>But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let's say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"/hello\" when-active&gt;Hello&lt;/a&gt;\n</code></pre>\n\n<p>Okay, now we can write a test for the non-existent <code>when-active</code> directive:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>it( 'should add \"active\" when the route changes', inject(function() {\n    var elm = $compile( '&lt;a href=\"/hello\" when-active&gt;Hello&lt;/a&gt;' )( $scope );\n\n    $location.path('/not-matching');\n    expect( elm.hasClass('active') ).toBeFalsey();\n\n    $location.path( '/hello' );\n    expect( elm.hasClass('active') ).toBeTruthy();\n}));\n</code></pre>\n\n<p>And when we run our test, we can confirm that it fails. Only now should we create our directive:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'whenActive', function ( $location ) {\n    return {\n        scope: true,\n        link: function ( scope, element, attrs ) {\n            scope.$on( '$routeChangeSuccess', function () {\n                if ( $location.path() == element.attr( 'href' ) ) {\n                    element.addClass( 'active' );\n                }\n                else {\n                    element.removeClass( 'active' );\n                }\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>Our test now passes <em>and</em> our menu performs as requested. Our development is <em>both</em> iterative <em>and</em> test-driven. Wicked-cool.</p>\n\n<h1>5. Conceptually, directives are <em>not</em> packaged jQuery</h1>\n\n<p>You'll often hear \"only do DOM manipulation in a directive\". <strong>This is a necessity.</strong> Treat it with due deference!</p>\n\n<p>But let's dive a little deeper...</p>\n\n<p>Some directives just decorate what's already in the view (think <code>ngClass</code>) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a \"widget\" and has a template, it should <em>also</em> respect separation of concerns. That is, the template <em>too</em> should remain largely independent from its implementation in the link and controller functions.</p>\n\n<p>AngularJS comes with an entire set of tools to make this very easy; with <code>ngClass</code> we can dynamically update the class; <code>ngBind</code> allows two-way data binding; <code>ngShow</code> and <code>ngHide</code> programmatically show or hide an element; and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness <em>without</em> DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.</p>\n\n<p>I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think \"since I can't do DOM manipulation in the controller, I'll take that code put it in a directive\". While that certainly is much better, it's often <em>still wrong</em>.</p>\n\n<p>Think of the logger we programmed in section 3. Even if we put that in a directive, we <em>still</em> want to do it the \"Angular Way\". It <em>still</em> doesn't take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it's a <em>lot</em> rarer than you think! Before doing DOM manipulation <em>anywhere</em> in your application, ask yourself if you really need to. There might be a better way.</p>\n\n<p>Here's a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.)</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'myDirective', function () {\n    return {\n        template: '&lt;a class=\"btn\"&gt;Toggle me!&lt;/a&gt;',\n        link: function ( scope, element, attrs ) {\n            var on = false;\n\n            $(element).click( function () {\n                on = !on;\n                $(element).toggleClass('active', on);\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>There are a few things wrong with this:</p>\n\n<ol>\n<li>First, jQuery was never necessary. There's nothing we did here that needed jQuery at all!</li>\n<li>Second, even if we already have jQuery on our page, there's no reason to use it here; we can simply use <code>angular.element</code> and our component will still work when dropped into a project that doesn't have jQuery.</li>\n<li>Third, even assuming jQuery <em>was</em> required for this directive to work, jqLite (<code>angular.element</code>) will <em>always</em> use jQuery if it was loaded! So we needn't use the <code>$</code> - we can just use <code>angular.element</code>.</li>\n<li>Fourth, closely related to the third, is that jqLite elements needn't be wrapped in <code>$</code> - the <code>element</code> that is passed to the <code>link</code> function would <em>already be</em> a jQuery element! </li>\n<li>And fifth, which we've mentioned in previous sections, why are we mixing template stuff into our logic?</li>\n</ol>\n\n<p>This directive can be rewritten (even for very complicated cases!) much more simply like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'myDirective', function () {\n    return {\n        scope: true,\n        template: '&lt;a class=\"btn\" ng-class=\"{active: on}\" ng-click=\"toggle()\"&gt;Toggle me!&lt;/a&gt;',\n        link: function ( scope, element, attrs ) {\n            scope.on = false;\n\n            scope.toggle = function () {\n                scope.on = !scope.on;\n            };\n        }\n    };\n});\n</code></pre>\n\n<p>Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the <strong>logic</strong> never had to be touched. Reusability - boom!</p>\n\n<p>And there are still all those other benefits, like testing - it's easy! No matter what's in the template, the directive's internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.</p>\n\n<p>w00t!</p>\n\n<p>So if directives aren't just collections of jQuery-like functions, what are they? Directives are actually <strong>extensions of HTML</strong>. If HTML doesn't do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.</p>\n\n<p>Put another way, if AngularJS doesn't do something out of the box, think how the team would accomplish it to fit right in with <code>ngClick</code>, <code>ngClass</code>, et al.</p>\n\n<h1>Summary</h1>\n\n<p>Don't even use jQuery. Don't even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the <code>$</code>, try to think about how to do it within the confines the AngularJS. If you don't know, ask! 19 times out of 20, the best way to do it doesn't need jQuery and to try to solve it with jQuery results in more work for you.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Josh David Miller",
                        "user_id": 259038
                    },
                    "score": 6649
                },
                {
                    "body": "<p>They're apples and oranges. You don't want to compare them. They're two different things. AngularJs has already jQuery lite built in which allows you to perform basic DOM manipulation without even including the full blown jQuery version. </p>\n\n<p>jQuery is all about DOM manipulation. It solves all the cross browser pain otherwise you will have to deal with but it's not a framework that allows you to divide your app into components like AngularJS. </p>\n\n<p>A nice thing about AngularJs is that it allows you to separate/isolate the DOM manipulation in the directives.  There are built-in directives ready for you to use such as ng-click. You can create your own custom directives that will contain all your view logic or DOM manipulation so you don't end up mingle DOM manipulation code in the controllers or services that should take care of the business logic.</p>\n\n<p>Angular breaks down your app into \n- Controllers\n- Services\n- Views\n- etc.</p>\n\n<p>and there is one more thing, that's the directive. It's an attribute  you can attach to any DOM element and you can go nuts with jQuery within it without worrying about your jQuery ever conflicts with AngularJs components or messes up with its architecture. </p>\n\n<p>I heard from a meetup I attended, one of the founders of Angular said they worked really hard to separate out the DOM manipulation so do not try to include them back in. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jin",
                        "user_id": 752891
                    },
                    "score": 27
                },
                {
                    "body": "<p>I find this question interesting, because my first serious exposure to JavaScript programming was <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> and AngularJS. I never learned jQuery, and I guess that's a good thing, because I don't have to unlearn anything. In fact, I actively avoid jQuery solutions to my problems, and instead, solely look for an \"AngularJS way\" to solve them. So, I guess my answer to this question would essentially boil down to, \"think like someone who never learned jQuery\" and avoid any temptation to incorporate jQuery directly (obviously AngularJS uses it to some extent behind the scenes).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Evan Zamir",
                        "user_id": 1245418
                    },
                    "score": 22
                },
                {
                    "body": "<p>jQuery is a DOM manipulation library.</p>\n\n<p>AngularJS is an MV* framework.</p>\n\n<p>In fact, AngularJS is one of the few JavaScript MV* frameworks (many JavaScript MVC tools still fall under the category library).</p>\n\n<p>Being a framework, it hosts your code and takes ownership of decisions about what to call and when!</p>\n\n<p>AngularJS itself includes a jQuery-lite edition within it. So for some basic DOM selection/manipulation, you really don't have to include the jQuery library (it saves many bytes to run on the network.)</p>\n\n<p>AngularJS has the concept of \"Directives\" for DOM manipulation and designing reusable UI components, so you should use it whenever you feel the need of doing DOM manipulation related stuff (directives are only place where you should write jQuery code while using AngularJS).</p>\n\n<p>AngularJS involves some learning curve (more than jQuery :-).</p>\n\n<p>-->For any developer coming from jQuery background, my first advice would be to \"learn JavaScript as a first class language before jumping onto a rich framework like AngularJS!\"\nI learned the above fact the hard way.</p>\n\n<p>Good luck.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sutikshan Dubey",
                        "user_id": 389237
                    },
                    "score": 37
                },
                {
                    "body": "<p>jQuery: you think a lot about 'QUERYing the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a>' for DOM elements and doing something.</p>\n\n<p>AngularJS: THE model is the truth, and you always think from that ANGLE.</p>\n\n<p>For example, when you get data from THE server which you intend to display in some format in the DOM, in jQuery, you need to '1. FIND' where in the DOM you want to place this data, the '2. UPDATE/APPEND' it there by creating a new node or just setting its <a href=\"http://www.tizag.com/javascriptT/javascript-innerHTML.php\">innerHTML</a>. Then when you want to update this view, you then '3. FIND' the location and '4. UPDATE'. This cycle of find and update all done within the same context of getting and formatting data from server is gone in AngularJS.</p>\n\n<p>With AngularJS you have your model (JavaScript objects you are already used to) and the value of the model tells you about the model (obviously) and about the view, and an operation on the model automatically propagates to the view, so you don't have to think about it. You will find yourself in AngularJS no longer finding things in the DOM.</p>\n\n<p>To put in another way, in jQuery, you need to think about CSS selectors, that is, where is the <code>div</code> or <code>td</code> that has a class or attribute, etc., so that I can get their HTML or color or value, but in AngularJS, you will find yourself thinking like this: what model am I dealing with, I will set the model's value to true. You are not bothering yourself of whether the view reflecting this value is a checked box or resides in a <code>td</code> element (details you would have often needed to think about in jQuery).</p>\n\n<p>And with DOM manipulation in AngularJS, you find yourself adding directives and filters, which you can think of as valid HTML extensions.</p>\n\n<p>One more thing you will experience in AngularJS: in jQuery you call the jQuery functions a lot, in AngularJS, AngularJS will call your functions, so AngularJS will 'tell you how to do things', but the benefits are worth it, so learning AngularJS usually means learning what AngularJS wants or the way AngularJS requires that you present your functions and it will call it accordingly. This is one of the things that makes AngularJS a framework rather than a library.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Samuel",
                        "user_id": 2124293
                    },
                    "score": 51
                },
                {
                    "body": "<p>Listen to the podcast <em><a href=\"http://javascriptjabber.com/032-jsj-angular-js/\">JavaScript Jabber: Episode #32</a></em> that features the original creators of AngularJS: Misko Hevery &amp; Igor Minar. They talk a lot about what it's like to come to AngularJS from other JavaScript backgrounds, especially jQuery.</p>\n\n<p>One of the points made in the podcast made a lot of things click for me with respects to your question:</p>\n\n<blockquote>\n  <p><strong>MISKO</strong>: [...] one of the things we thought about very hardly in Angular is, how do we provide lots of escape hatches so that you can get out and basically figure out a way out of this. So to us, the answer is this thing called \u201cDirectives\u201d. <strong>And with directives, you essentially become a regular little jQuery JavaScript, you can do whatever you want.</strong></p>\n  \n  <p><strong>IGOR</strong>: So think of directive as the instruction to the compiler that tells it whenever you come across this certain element or this CSS in the template, and you keep this kind of code and that code is in charge of the element and everything below that element in the DOM tree.</p>\n</blockquote>\n\n<p>A transcript of the entire episode is available at the link provided above.</p>\n\n<p>So, to directly answer your question: AngularJS is -very- opinionated and is a true MV* framework. However, you can still do all of the really cool stuff you know and love with jQuery inside of directives. It's not a matter of \"How do I do what I used to in jQuery?\" as much as it's a matter of \"How do I supplement AngularJS with all of the stuff I used to do in jQuery?\"</p>\n\n<p>It's really two very different states of mind.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jdowell",
                        "user_id": 2073399
                    },
                    "score": 24
                },
                {
                    "body": "<h1>jQuery</h1>\n\n<p>jQuery makes ridiculously long JavaScript commands like <code>getElementByHerpDerp</code> shorter and cross-browser.</p>\n\n<h1>AngularJS</h1>\n\n<p>AngularJS allows you to make your own HTML tags/attributes that do things which work well with dynamic web applications (since HTML was designed for static pages).</p>\n\n<h1>Edit:</h1>\n\n<p>Saying \"I have a jQuery background how do I think in AngularJS?\" is like saying \"I have an HTML background how do I think in JavaScript?\" The fact that you're asking the question shows you most likely don't understand the fundamental purposes of these two resources. This is why I chose to answer the question by simply pointing out the fundamental difference rather than going through the list saying \"AngularJS makes use of directivies whereas jQuery uses CSS selectors to make a jQuery object which does this and that etc....\". This question does not require a lengthy answer.</p>\n\n<p>jQuery is a way to make programming JavaScript in the browser easier. Shorter, cross-browser commands, etc.</p>\n\n<p>AngularJS extends HTML, so you don't have to put <code>&lt;div&gt;</code> all over the place just to make an application. It makes HTML actually work for applications rather than what it was designed for, which is static, educational web pages. It accomplishes this in a roundabout way using JavaScript, but fundamentally it is an extension of HTML, not JavaScript.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nick Manning",
                        "user_id": 1763217
                    },
                    "score": 53
                },
                {
                    "body": "<p>To describe the \"paradigm shift\", I think a short answer can suffice.</p>\n\n<h2>AngularJS changes the way you <em>find</em> elements</h2>\n\n<p>In <strong>jQuery</strong>, you typically  use <strong>selectors</strong> to find elements, and then wire them up:<br>\n<code>$('#id .class').click(doStuff);</code></p>\n\n<p>In <strong>AngularJS</strong>, you use <strong>directives</strong> to mark the elements directly, to wire them up:<br>\n<code>&lt;a ng-click=\"doStuff()\"&gt;</code></p>\n\n<p>AngularJS doesn't need (or want) you to find elements using selectors - the primary difference between AngularJS's <strong>jqLite</strong> versus full-blown <strong>jQuery</strong> is that <a href=\"https://docs.angularjs.org/api/ng/function/angular.element\">jqLite does not support selectors</a>.  </p>\n\n<p>So when people say \"don't include jQuery at all\", it's mainly because they don't want you to use selectors; they want you to learn to use directives instead. Direct, not select!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Scott Rippey",
                        "user_id": 272072
                    },
                    "score": 69
                },
                {
                    "body": "<h1>AngularJS vs. jQuery</h1>\n\n<p>AngularJS and jQuery adopt very different ideologies. If you're coming from jQuery you may find some of the differences surprising. AngularJS may make you angry.</p>\n\n<p>This is normal, you should push through. AngularJS is worth it.</p>\n\n<h2>The big difference (TLDR)</h2>\n\n<p>jQuery gives you a toolkit for selecting arbitrary bits of the DOM and making ad-hoc changes to them. You can do pretty much anything you like piece by piece.</p>\n\n<p>AngularJS instead gives you a <strong>compiler</strong>.</p>\n\n<p>What this means is that AngularJS reads your entire DOM from top to bottom and treats it as code, literally as instructions to the compiler. As it traverses the DOM, It looks for specific <strong>directives</strong> (compiler directives) that tell the AngularJS compiler how to behave and what to do. Directives are little objects full of JavaScript, and can match attributes, tags, classes or even comments. These directives can then in turn pull in additional Angular components.</p>\n\n<p>Meanwhile it wires up your DOM with all sorts of useful goodness that will make your day brighter and will make your clients smile. What comes out the bottom of the compiler is a fully formed web application, wired up and ready to go.</p>\n\n<p>Your template drives the JavaScript, not the other way around. This is a radical reversal of roles that can take some getting used to.</p>\n\n<p>If this sounds like it might be over-prescriptive and limiting, nothing could be farther from the truth. Because AngularJS treats your HTML as code, you get HTML level granularity in your web application. Everything is possible, and most things are surprisingly easy once you make a few conceptual leaps.</p>\n\n<p>Let's get down to the nitty gritty.</p>\n\n<h2>First up, AngularJS doesn't replace jQuery</h2>\n\n<p>AngularJS and jQuery do different things. AngularJS gives you a set of tools to produce web applications. jQuery mainly gives you tools for modifying the DOM. If jQuery is present on your page, AngularJS will use it automatically. If it isn't, AngularJS ships with jQuery Lite, which is a cut down, but still perfectly usable version of jQuery.</p>\n\n<p>Misko likes jQuery and encourages you to use it. You sometimes still need to manipulate the DOM  directly and jQuery is a friendly tool for this. However you can get a pretty much all of your work done using a combination of scope, templates and directives, and you should prefer this workflow where possible because your code will be more discrete, more configurable, and more Angular.</p>\n\n<p>People encouraging you to drop jQuery altogether should stop encouraging you to do that. You probably ought to lay off the jQuery for a while while you learn what AngularJS can do, but jQuery is not going away just yet.</p>\n\n<p>That said, you shouldn't be sprinkling jQuery all over the place. The correct place for jQuery and other DOM manipulations in AngularJS is in directives. More on these later.</p>\n\n<h2>Unobtrusive JavaScript with Selectors vs. Declarative Templates</h2>\n\n<p>jQuery is typically applied unobtrusively. Your JavaScript code is linked in the header, and this is the only place it is mentioned. We use selectors to pick out bits of the page and write plugins to modify those parts.</p>\n\n<p>The JavaScript is in control. The HTML has a completely independent existence. Onclick attributes are very bad practice.</p>\n\n<p>One of the first things your will notice about AngularJS is that custom attributes are everywhere. Your HTML will be littered with ng attributes, which are essentially onClick attributes on steroids. These are directives (compiler directives), and are one of the main ways in which the template is hooked to the model.</p>\n\n<p>When you first see this you might be tempted to write AngularJS off as old school intrusive JavaScript (like I did at first). In fact, AngularJS does not play by those rules. In AngularJS, your HTML5 is a template. It is compiled by AngularJS to produce your web page.</p>\n\n<p>This is the first big difference. To jQuery, your web page is a DOM to be manipulated. To AngularJS, your HTML is code to be compiled. AngularJS reads in your whole web page and literally compiles it into a new web page using its built in compiler.</p>\n\n<p>Your template should be declarative; its meaning should be clear simply by reading it. We use custom attributes with meaningful names. We make up new HTML elements, again with meaningful names. A designer with minimal HTML knowledge and no coding skill can read your AngularJS template and understand what it is doing. He or she can make modifications. <em>This is the AngularJS way.</em></p>\n\n<h2>The template is in the driving seat.</h2>\n\n<p>One of the first questions I asked myself when starting AngularJS and running through the tutorials is <strong>\"Where is my code?\"</strong>. I've written no JavaScript, and yet I have all this behaviour. The answer is obvious. Because AngularJS compiles the DOM, AngularJS is treating your HTML as code. For many simple cases it's often sufficient to just write a template and let AngularJS compile it into an application for you.</p>\n\n<p>Your template drives your application. It's treated as a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">DSL</a>. You write AngularJS components, and AngularJS will take care of pulling them in and making them available at the right time based on the structure of your template. This is very different to a standard <a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">MVC</a> pattern, where the template is just for output.</p>\n\n<p>It's more similar to <a href=\"http://en.wikipedia.org/wiki/XSLT\">XSLT</a> than <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\">Ruby on Rails</a> for example.</p>\n\n<p>This is an inversion of control that takes some getting used to.</p>\n\n<p><strong>Stop trying to drive your application from your JavaScript. Let the template drive the application, and let AngularJS take care of wiring the components together. This also is the AngularJS way.</strong></p>\n\n<h2>Semantic HTML vs. Semantic Models</h2>\n\n<p>With jQuery your HTML page should contain semantic meaningful content. If the JavaScript is turned off (by a user or search engine) your content remains accessible.</p>\n\n<p>Because AngularJS treats your HTML page as a template. The template is not supposed to be semantic as your content is typically stored in your model. AngularJS compiles your DOM with the model to produce a semantic web page.</p>\n\n<p>In AngularJS, meaning lives in the model, the HTML is just a template, for display only.</p>\n\n<p>At this point you likely have all sorts of questions concerning <a href=\"http://en.wikipedia.org/wiki/Search_engine_optimization\">SEO</a> and accessibility, and rightly so. There are open issues here. Most screen readers will now parse JavaScript. Search engines can also index <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">AJAXed</a> content. Nevertheless, you will want to make sure you are using pushstate URLs and you have a decent sitemap. See here for a discussion of the issue: <a href=\"http://stackoverflow.com/a/23245379/687677\">http://stackoverflow.com/a/23245379/687677</a></p>\n\n<h2>Separation of concerns (SOC) vs. MVC</h2>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of concerns</a> (SOC) is a pattern that grew up over many years of web development for a variety of reasons including SEO, accessibility and browser incompatibility. It looks like this:</p>\n\n<ol>\n<li>HTML - Semantic meaning. The HTML should stand alone.</li>\n<li>CSS - Styling, without the CSS the page is still readable.</li>\n<li>JavaScript - Behaviour, without the script the content remains.</li>\n</ol>\n\n<p>Again, AngularJS does not play by their rules. In a stroke, <strong>AngularJS does away with a decade of received wisdom</strong> and instead implements an MVC pattern in which the template is no longer semantic, not even a little bit.</p>\n\n<p>It looks like this:</p>\n\n<ol>\n<li>Model - your models contains your semantic data. Models are usually <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> objects. Models exist as attributes of an object called $scope. You can also store handy utility functions on $scope which your templates can then access.</li>\n<li>View - Your views are written in HTML. The view is usually not semantic because your data lives in the model.</li>\n<li>Controller - Your controller is a JavaScript function which hooks the view to the model. Its function is to initialise $scope. Depending on your application, you may or may not need to create a controller. You can have many controllers on a page.</li>\n</ol>\n\n<p>MVC and SOC are not on opposite ends of the same scale, they are on completely different axes. SOC makes no sense in an AngularJS context. You have to forget it and move on.</p>\n\n<p>If, like me, you lived through the browser wars, you might find this idea quite offensive. Get over it, it'll be worth it, I promise.</p>\n\n<h2>Plugins vs. Directives</h2>\n\n<p><strong>Plugins extend jQuery. AngularJS Directives extend the capabilities of your browser.</strong></p>\n\n<p>In jQuery we define plugins by adding functions to the jQuery.prototype. We then hook these into the DOM by selecting elements and calling the plugin on the result. The idea is to extend the capabilities of jQuery.</p>\n\n<p>For example, if you want a carousel on your page, you might define an unordered list of figures, perhaps wrapped in a nav element. You might then write some jQuery to select the list on the page and restyle it as a gallery with timeouts to do the sliding animation.</p>\n\n<p>In AngularJS, we define directives. A directive is a function which returns a JSON object. This object tells AngularJS what DOM elements to look for, and what changes to make to them. Directives are hooked in to the template using either attributes or elements, which you invent. The idea is to extend the capabilities of HTML with new attributes and elements.</p>\n\n<p><em>The AngularJS way is to extend the capabilities of native looking HTML.</em> You should write HTML that looks like HTML, extended with custom attributes and elements.</p>\n\n<p>If you want a carousel, just use a <code>&lt;carousel /&gt;</code> element, then define a directive to pull in a template, and make that sucker work.</p>\n\n<h2>Lots of small directives vs. big plugins with configuration switches</h2>\n\n<p>The tendency with jQuery is to write great big plugins like lightbox which we then configure by passing in numerous values and options.</p>\n\n<p>This is a mistake in AngularJS.</p>\n\n<p>Take the example of a dropdown. When writing a dropdown plugin you might be tempted to code in click handlers, perhaps a function to add in a chevron which is either up or down, perhaps change the class of the unfolded element, show hide the menu, all helpful stuff.</p>\n\n<p>Until you want to make a small change.</p>\n\n<p>Say you have a menu that you want to unfold on hover. Well now we have a problem. Our plugin has wired in our click handler for us, we're going to need to add a configuration option to make it behave differently in this specific case.</p>\n\n<p>In AngularJS we write smaller directives. Our dropdown directive would be ridiculously small. It might maintain the folded state, and provide methods to fold(), unfold() or toggle(). These methods would simply update $scope.menu.visible which is a boolean holding the state.</p>\n\n<p>Now <strong>in our template</strong> we can wire this up:</p>\n\n<pre><code>&lt;a ng-click=\"toggle()\"&gt;Menu&lt;/a&gt;\n&lt;ul ng-show=\"menu.visible\"&gt;\n  ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>Need to update on mouseover?</p>\n\n<pre><code>&lt;a ng-mouseenter=\"unfold()\" ng-mouseleave=\"fold()\"&gt;Menu&lt;/a&gt;\n&lt;ul ng-show=\"menu.visible\"&gt;\n  ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>The template drives the application so we get HTML level granularity. If we want to make case by case exceptions, the template makes this easy.</p>\n\n<h2>Closure vs. $scope</h2>\n\n<p>jQuery plugins are created in a closure. Privacy is maintained within that closure. It's up to you to maintain your scope chain within that closure. You only really have access to the set of DOM nodes passed in to the plugin by jQuery, plus any local variables defined in the closure and any globals you have defined. This means that plugins are quite self contained. This is a good thing, but can get restrictive when creating a whole application. Trying to pass data between sections of a dynamic page becomes a chore.</p>\n\n<p>AngularJS has $scope objects. These are special objects created and maintained by AngularJS in which you store your model. Certain directives will spawn a new $scope, which by default inherits from its wrapping $scope using JavaScript prototypical inheritance. The $scope object is accessible in the controller and the view.</p>\n\n<p>This is the clever part. Because the structure of $scope inheritance roughly follows the structure of the DOM, elements have access to their own scope, and any containing scopes seamlessly, all the way up to the global $scope (which is not the same as the global scope).</p>\n\n<p>This makes it much easier to pass data around, and to store data at an appropriate level. If a dropdown is unfolded, only the dropdown $scope needs to know about it. If the user updates their preferences, you might want to update the global $scope, and any nested scopes listening to the user preferences would automatically be alerted.</p>\n\n<p>This might sound complicated, in fact, once you relax into it, it's like flying. You don't need to create the $scope object, AngularJS instantiates and configures it for you, correctly and appropriately based on your template hierarchy. AngularJS then makes it available to your component using the magic of dependency injection (more on this later).</p>\n\n<h2>Manual DOM changes vs. Data Binding</h2>\n\n<p>In jQuery you make all your DOM changes by hand. You construct new DOM elements programatically. If you have a JSON array and you want to put it to the DOM, you must write a function to generate the HTML and insert it.</p>\n\n<p>In AngularJS you can do this too, but you are encouraged to make use of data binding. Change your model, and because the DOM is bound to it via a template your DOM will automatically update, no intervention required.</p>\n\n<p>Because data binding is done from the template, using either an attribute or the curly brace syntax, it's super easy to do. There's little cognitive overhead associated with it so you'll find yourself doing it all the time.</p>\n\n<pre><code>&lt;input ng-model=\"user.name\" /&gt;\n</code></pre>\n\n<p>Binds the input element to <code>$scope.user.name</code>. Updating the input will update the value in your current scope, and vice-versa.</p>\n\n<p>Likewise:</p>\n\n<pre><code>&lt;p&gt;\n  {{user.name}}\n&lt;/p&gt;\n</code></pre>\n\n<p>will output the user name in a paragraph. It's a live binding, so if the <code>$scope.user.name</code> value is updated, the template will update too.</p>\n\n<h2>Ajax all of the time</h2>\n\n<p>In jQuery making an Ajax call is fairly simple, but it's still something you might think twice about. There's the added complexity to think about, and a fair chunk of script to maintain.</p>\n\n<p>In AngularJS, Ajax is your default go-to solution and it happens all the time, almost without you noticing. You can include templates with ng-include. You can apply a template with the simplest custom directive. You can wrap an Ajax call in a service and create yourself a <a href=\"http://en.wikipedia.org/wiki/GitHub\">GitHub</a> service, or a <a href=\"http://en.wikipedia.org/wiki/Flickr\">Flickr</a> service, which you can access with astonishing ease.</p>\n\n<h2>Service Objects vs Helper Functions</h2>\n\n<p>In jQuery, if we want to accomplish a small non-dom related task such as pulling a feed from an API, we might write a little function to do that in our closure. That's a valid solution, but what if we  want to access that feed often? What if we want to reuse that code in another application?</p>\n\n<p>AngularJS gives us service objects.</p>\n\n<p>Services are simple objects that contain functions and data. They are always singletons, meaning there can never be more than one of them. Say we want to access the Stack Overflow API, we might write a <code>StackOverflowService</code> which defines methods for doing so.</p>\n\n<p>Let's say we have a shopping cart. We might define a ShoppingCartService which maintains our cart and contains methods for adding and removing items. Because the service is a singleton, and is shared by all other components, any object that needs to can write to the shopping cart and pull data from it. It's always the same cart.</p>\n\n<p>Service objects are self-contained AngularJS components which we can use and reuse as we see fit. They are simple JSON objects containing functions and Data. They are always singletons, so if you store data on a service in one place, you can get that data out somewhere else just by requesting the same service.</p>\n\n<h2><a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">Dependency injection</a> (DI) - aka de-spaghettification</h2>\n\n<p>AngularJS manages your dependencies for you. If you want an object, simply refer to it and AngularJS will get it for you.</p>\n\n<p>Until you start to use this, it's hard to explain just what a massive time boon this is. Nothing like AngularJS DI exists inside jQuery.</p>\n\n<p>DI means that instead of writing your application and wiring it together, you instead define a library of components, each identified by a string.</p>\n\n<p>Say I have a component called 'FlickrService' which defines methods for pulling JSON feeds from Flickr. Now, if I want to write a controller that can access Flickr, I just need to refer to the 'FlickrService' by name when I declare the controller. AngularJS will take care of instantiating the component and making it available to my controller.</p>\n\n<p>For example, here I define a service:</p>\n\n<pre><code>myApp.service('FlickrService', function() {\n  return {\n    getFeed: function() { // do something here }\n  }\n});\n</code></pre>\n\n<p>Now when I want to use that service I just refer to it by name like this:</p>\n\n<pre><code>myApp.controller('myController', ['FlickrService', function(FlickrService) {\n  FlickrService.getFeed()\n}]);\n</code></pre>\n\n<p>AngularJS will recognise that a FlickrService object is needed to instantiate the controller, and will provide one for us.</p>\n\n<p>This makes wiring things together very easy, and pretty much eliminates any tendency towards spagettification. We have a flat list of components, and AngularJS hands them to us one by one as and when we need them.</p>\n\n<h2>Modular service architecture</h2>\n\n<p>jQuery says very little about how you should organise your code. AngularJS has opinions.</p>\n\n<p>AngularJS gives you modules into which you can place your code. If you're writing a script that talks to Flickr for example, you might want to create a Flickr module to wrap all your Flickr related functions in. Modules can include other modules (DI). Your main application is usually a module, and this should include all the other modules your application will depend on.</p>\n\n<p>You get simple code reuse, if you want to write another application based on Flickr, you can just include the Flickr module and voila, you have access to all your Flickr related functions in your new application.</p>\n\n<p>Modules contain AngularJS components. <strong>When we include a module, all the components in that module become available to us as a simple list identified by their unique strings</strong>. We can then inject those components into each other using AngularJS's dependency injection mechanism.</p>\n\n<h2>To sum up</h2>\n\n<p>AngularJS and jQuery are not enemies. It's possible to use jQuery within AngularJS very nicely. If you're using AngularJS well (templates, data-binding, $scope, directives, etc.) you will find you need a <strong>lot</strong> less jQuery than you might otherwise require.</p>\n\n<p>The main thing to realise is that your template drives your application. Stop trying to write big plugins that do everything. Instead write little directives that do one thing, then write a simple template to wire them together.</p>\n\n<p>Think less about unobtrusive JavaScript, and instead think in terms of HTML extensions.</p>\n\n<h2>My little book</h2>\n\n<p>I got so excited about AngularJS, I wrote a short book on it which you're very welcome to read online <a href=\"http://nicholasjohnson.com/angular-book/\">http://nicholasjohnson.com/angular-book/</a>. I hope it's helpful.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "superluminary",
                        "user_id": 687677
                    },
                    "score": 131
                },
                {
                    "body": "<p>Those are some very nice, but lengthy answers.</p>\n\n<p>To sum up my experiences:</p>\n\n<ol>\n<li>Controllers and providers (services, factories, etc.) are for modifying the data model, NOT HTML.</li>\n<li>HTML and directives define the layout and binding to the model.</li>\n<li>If you need to share data between controllers, create a service or factory - they are singletons that are shared across the application.</li>\n<li>If you need an HTML widget, create a directive.</li>\n<li><strong>If you have some data and are now trying to update HTML... STOP! update the model, and make sure your HTML is bound to the model.</strong></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dan",
                        "user_id": 1394392
                    },
                    "score": 38
                },
                {
                    "body": "<p>As a JavaScript MV* beginner and purely focusing on the application architecture (not the server/client-side matters), I would certainly recommend the following resource (which I am surprised wasn't mentioned yet): <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/\" rel=\"nofollow\">JavaScript Design Patterns</a>, by Addy Osmani, as an introduction to different <strong>JavaScript Design Patterns</strong>. The terms used in this answer are taken from the linked document above. I'm not going to repeat what was worded really well in the accepted answer. Instead, this answer links back to the <strong>theoretical backgrounds</strong> which power AngularJS (and other libraries).</p>\n\n<p>Like me, you will quickly realize that AngularJS (or <a href=\"http://en.wikipedia.org/wiki/Ember.js\" rel=\"nofollow\">Ember.js</a>, Durandal, &amp; other MV* frameworks for that matter) is one complex framework assembling many of the different JavaScript design patterns.</p>\n\n<p>I found it easier also, to test <strong>(1)</strong> native JavaScript code and <strong>(2)</strong> smaller libraries for each one of these patterns <strong>separately</strong> before diving into one global framework. This allowed me to better understand which crucial issues a framework adresses (because you are personally faced with the problem).</p>\n\n<p>For example:</p>\n\n<ul>\n<li><a href=\"https://www.google.be/search?q=js+oop\" rel=\"nofollow\">JavaScript Object-oriented Programming</a> (this is a Google search link). It is not a library, but certainly a prerequisite to any application programming. It taught me the native implementations of the <strong>prototype, constructor, singleton &amp; decorator patterns</strong></li>\n<li><a href=\"http://jquery.com\" rel=\"nofollow\">jQuery</a>/ <a href=\"http://underscorejs.org\" rel=\"nofollow\">Underscore</a> for the <strong>facade pattern</strong> (like WYSIWYG's for manipulating the DOM)</li>\n<li><a href=\"http://prototypejs.org\" rel=\"nofollow\">Prototype.js</a> for the <strong>prototype/ constructor/ mixin pattern</strong></li>\n<li><a href=\"http://requirejs.org\" rel=\"nofollow\">RequireJS</a>/ <a href=\"https://github.com/cujojs/curl\" rel=\"nofollow\">Curl.js</a> for the <strong>module pattern/ AMD</strong></li>\n<li><a href=\"http://knockoutjs.com\" rel=\"nofollow\">KnockoutJS</a> for the <strong>observable, publish/subscribe pattern</strong></li>\n</ul>\n\n<p>NB: This list is not complete, nor 'the best libraries'; they just happen to be the libraries I used. These libraries also include more patterns, the ones mentioned are just their main focuses or original intents. If you feel something is missing from this list, please do mention it in the comments, and I will be glad to add it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tyblitz",
                        "user_id": 1938203
                    },
                    "score": 10
                },
                {
                    "body": "<p>Actually, if you're using AngularJS, you don't need jQuery anymore. AngularJS itself has the binding and directive, which is a very good \"replacement\" for most things you can do with jQuery.</p>\n\n<p>I usually develop mobile applications using AngularJS and <a href=\"http://en.wikipedia.org/wiki/PhoneGap\" rel=\"nofollow\">Cordova</a>. The ONLY thing from jQuery I needed is the Selector.</p>\n\n<p>By googling, I see that there is a standalone jQuery selector module out there. It's Sizzle. </p>\n\n<p>And I decided to make a tiny code snippet that help me quickly start a website using AngularJS with the power of jQuery Selector (using Sizzle).</p>\n\n<p>I shared my code here: <a href=\"https://github.com/huytd/Sizzular\" rel=\"nofollow\">https://github.com/huytd/Sizzular</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "huydotnet",
                        "user_id": 1567340
                    },
                    "score": 7
                },
                {
                    "body": "<p>To answer this question, I want to share my experience on the first enterprise application with AngularJS:</p>\n\n<p><strong>Two-way data binding is amazing:</strong> \nI had a grid with all functionality UPDATE, DELTE, INSERT. I have a data object that binds the grid's model using ng-repeat. You only need to write a single line of simple JavaScript code for delete and insert and that's it. grid automatically updates as the grid model changes instantly. Update functionality is real time, no code for it.\nYou feel amazing!!!</p>\n\n<p><strong>Reusable directives are super:</strong>\nWrite directives in one place and use it throughout the application. OMG!!! I used these directive for paging, regex, validations, etc. It is really cool!</p>\n\n<p><strong>Routing is strong:</strong>\nIt's up to your implementation how you want to use it, but it requires very few lines of code to route the request to specify HTML and controller (JavaScript)</p>\n\n<p><strong>Controllers are great:</strong>\nControllers take care of their own HTML, but this separation works well for common functionality well as. If you want to call the same function on the click of a button on master HTML, just write the same function name in each controller and write individual code.</p>\n\n<p><strong>Plugins:</strong>\nThere are many other similar features like showing an overlay in your app. You don't need to write code for it, just use an overlay plugin available as wc-overlay, and this will automatically take care of all <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow\">XMLHttpRequest</a> (XHR) requests.</p>\n\n<p><strong>Ideal for <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\" rel=\"nofollow\">RESTful</a> architecture:</strong>\nBeing a complete frameworks makes AngularJS great to work with a RESTful architecture.</p>\n\n<p><strong>Services</strong>: Write common codes using services and less code in controllers. Sevices can be used to share common functionalities among the controllers.</p>\n\n<p><strong>Extensibility</strong>: Angular has extended the HTML using directives. Write expressions inside html and evaluate them on runtime.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "onsjjss",
                        "user_id": 3288863
                    },
                    "score": 12
                }
            ],
            "body": "<p>Suppose I'm familiar with developing client-side applications in <a href=\"http://jquery.com/\">jQuery</a>, but now I'd like to start using <a href=\"http://angularjs.org/\">AngularJS</a>. Can you describe the paradigm shift that is necessary? Here are a few questions that might help you frame an answer:</p>\n\n<ul>\n<li>How do I architect and design client-side web applications differently? What is the biggest difference?</li>\n<li>What should I stop doing/using; What should I start doing/using instead?</li>\n<li>Are there any server-side considerations/restrictions?</li>\n</ul>\n\n<p>I'm not looking for a detailed comparison between jQuery and AngularJS.</p>\n",
            "last_activity_date": 1427212934,
            "owner": {
                "display_name": "Mark Rajcok",
                "user_id": 215945
            },
            "question_id": 14994391,
            "score": 4060,
            "tags": [
                "javascript",
                "jquery",
                "angularjs",
                "design",
                "architecture"
            ],
            "title": "&quot;Thinking in AngularJS&quot; if I have a jQuery background?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Variables declared globally have a global scope. Variables declared within a function are scoped to that function, and shadow global variables of the same name.</p>\n\n<p>(I'm sure there are many subtleties that real JavaScript programmers will be able to point out in other answers. In particular I came across <a href=\"http://www.digital-web.com/articles/scope_in_javascript/\">this page</a> about what exactly <code>this</code> means at any time. Hopefully <a href=\"http://bowles.byethost3.com/javascript/section6/lesson6.htm#part4\">this more introductory link</a> is enough to get you started though.)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jon Skeet",
                        "user_id": 22656
                    },
                    "score": 44
                },
                {
                    "body": "<p>Javascript uses scope chains to establish the scope for a given function. There is typically one global scope, and each function defined has its own nested scope. Any function defined within another function has a local scope which is linked to the outer function. It's always the position in the source that defines the scope.</p>\n\n<p>An element in the scope chain is basically a Map with a pointer to its parent scope.</p>\n\n<p>When resolving a variable, javascript starts at the innermost scope and searches outwards.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "krosenvold",
                        "user_id": 23691
                    },
                    "score": 143
                },
                {
                    "body": "<p>Here's an example:</p>\n\n<pre><code>&lt;script&gt;\n\nvar globalVariable = 7; //==window.globalVariable\n\nfunction aGlobal( param ) { //==window.aGlobal(); \n                            //param is only accessible in this function\n  var scopedToFunction = {\n    //can't be accessed outside of this function\n\n    nested : 3 //accessible by: scopedToFunction.nested\n  };\n\n  anotherGlobal = {\n    //global because there's no `var`\n  }; \n\n}\n\n&lt;/script&gt;\n</code></pre>\n\n<p>You'll want to investigate closures, and how to use them to make <a href=\"http://www.crockford.com/javascript/private.html\">private members</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "geowa4",
                        "user_id": 50214
                    },
                    "score": 16
                },
                {
                    "body": "<p>I think about the best I can do is give you a bunch of examples to study.\nJavascript programmers are practically ranked by how well they understand scope.\nIt can at times be quite counter-intuitive.</p>\n\n<ol>\n<li><p><strong>A globally-scoped variable</strong></p>\n\n<pre><code>var a = 1;\n\n// global scope\nfunction one() {\n  alert(a);\n}\n</code></pre></li>\n<li><p><strong>Local scope</strong></p>\n\n<pre><code>var a = 1;\n\nfunction two(a) {\n  alert(a);\n}\n\n// local scope again\nfunction three() {\n  var a = 3;\n  alert(a);\n}\n</code></pre></li>\n<li><p><strong>Intermediate</strong>: <em>No such thing as block scope in JavaScript</em> (ES5; ES6 introduces <code>let</code>)</p>\n\n<pre><code>var a = 1;\n\nfunction four() {\n  if (true) {\n    var a = 4;\n  }\n\n  alert(a); // alerts '4', not the global value of '1'\n}\n</code></pre></li>\n<li><p><strong>Intermediate</strong>: <em>Object properties</em></p>\n\n<pre><code>var a = 1;\n\nfunction five() {\n  this.a = 5;\n}\n</code></pre></li>\n<li><p><strong>Advanced</strong>: <em>Closure</em></p>\n\n<pre><code>var a = 1;\n\nvar six = (function() {\n  var foo = 6;\n\n  return function() {\n    // JavaScript \"closure\" means I have access to foo in here,\n    // because it is defined in the function in which I was defined.\n    alert(foo);\n  };\n})();\n</code></pre></li>\n<li><p><strong>Advanced</strong>: <em>Prototype-based scope resolution</em></p>\n\n<pre><code>var a = 1;\n\nfunction seven() {\n  this.a = 7;\n}\n\n// [object].prototype.property loses to\n// [object].property in the lookup chain. For example...\n\n// Won't get reached, because 'a' is set in the constructor above.\nseven.prototype.a = -1;\n\n// Will get reached, even though 'b' is NOT set in the constructor.\nseven.prototype.b = 8;\n</code></pre></li>\n<li><p><strong>Altogether</strong></p>\n\n<pre><code>// These will print 1-8\none();\ntwo(2);\nthree();\nfour();\nalert(new five().a);\nsix();\nalert(new seven().a);\nalert(new seven().b);\n</code></pre>\n\n<hr></li>\n<li><p><strong>Global+Local</strong>: <em>An extra complex Case</em></p>\n\n<pre><code>var x = 5;\n\n(function () {\n    console.log(x);\n    var x = 10;\n    console.log(x); \n})();\n</code></pre>\n\n<p>This will print out <code>undefined</code> and <code>10</code> rather than <code>5</code> and <code>10</code> since JavaScript always move variable declarations (not initializations) to the top of the scope, making the code equivalent to:</p>\n\n<pre><code>var x = 5;\n\n(function () {\n    var x;\n    console.log(x);\n    x = 10;\n    console.log(x); \n})();\n</code></pre></li>\n<li><p><strong>Catch clause-scoped variable</strong></p>\n\n<pre><code>var e = 5;\nconsole.log(e);\ntry {\n    throw 6;\n} catch (e) {\n    console.log(e);\n}\nconsole.log(e);\n</code></pre>\n\n<p>This will print out <code>5</code>, <code>6</code>, <code>5</code>. Inside the catch clause <code>e</code> shadows global and local variables. But this special scope is only for the caught variable. If you write <code>var f;</code> inside the catch clause, then it's exactly the same as if you had defined it before or after the try-catch block.</p></li>\n</ol>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Triptych",
                        "user_id": 43089
                    },
                    "score": 1265
                },
                {
                    "body": "<p>In \"Javascript 1.7\" (Mozilla's extension to Javascript) one can also declare block-scope variables with <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7#section_11\"><code>let</code> statement</a>:</p>\n\n<pre><code> var a = 4;\n let (a = 3) {\n   alert(a); // 3\n }\n alert(a);   // 4\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "kennytm",
                        "user_id": 224671
                    },
                    "score": 13
                },
                {
                    "body": "<p>The key, as I understand it, is that Javascript has function level scoping vs the more common C block scoping.</p>\n\n<p><a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\">Here is a good article on the subject.</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "James McMahon",
                        "user_id": 20774
                    },
                    "score": 13
                },
                {
                    "body": "<p>I found that many people new to JavaScript have trouble understanding that inheritance is available by default in the language and that function scope is the only scope, so far. I provided an extension to a beautifier I wrote at the end of last year called JSPretty. The feature colors function scope in the code and always associates a color to all variables declared in that scope. Closure is visually demonstrated when a variable with a color from one scope is used in a different scope.</p>\n\n<p>Try the feature at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope\">http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope</a></li>\n</ul>\n\n<p>See a demo at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope&amp;s=http://prettydiff.com/lib/markup_beauty.js\">http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope&amp;s=http://prettydiff.com/lib/markup_beauty.js</a></li>\n</ul>\n\n<p>View the code at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/lib/jspretty.js\">http://prettydiff.com/lib/jspretty.js</a></li>\n<li><a href=\"https://github.com/austincheney/Pretty-Diff/blob/master/lib/jspretty.js\">https://github.com/austincheney/Pretty-Diff/blob/master/lib/jspretty.js</a></li>\n</ul>\n\n<p>Currently the feature offers support for a depth of 16 nested functions, but currently does not color global variables.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "austincheney",
                        "user_id": 1180508
                    },
                    "score": 5
                },
                {
                    "body": "<p>Try this curious example. In the example below if a were a numeric initialized at 0, you'd see 0 and then 1. Except a is an object and javascript will pass f1 a pointer of a rather than a copy of it. The result is that you get the same alert both times.</p>\n\n<pre><code>var a = new Date();\nfunction f1(b)\n{\n    b.setDate(b.getDate()+1);\n    alert(b.getDate());\n}\nf1(a);\nalert(a.getDate());\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mig82",
                        "user_id": 2670957
                    },
                    "score": 0
                },
                {
                    "body": "<p>1) There is a global scope, a function scope, and the with and catch scopes. There is no 'block' level scope in general for variable's -- the with and the catch statements add names to their blocks.</p>\n\n<p>2) Scopes are nested by functions all the way to the global scope.</p>\n\n<p>3) Properties are resolved by going through the prototype chain.  The with statement brings object property names into the lexical scope defined by the with block.</p>\n\n<p>EDIT: ECMAAScript 6 (Harmony) is spec'ed to support let, and I know chrome allows a 'harmony' flag, so perhaps it does support it..</p>\n\n<p>Let would be a support for block level scoping, but you have to use the keyword to make it happen.</p>\n\n<p>EDIT: Based on Benjamin's pointing out of the with and catch statements in the comments, I've edited the post, and added more.  Both the with and the catch statements introduce variables into their respective blocks, and that <em>is</em> a block scope. These variables are aliased to the properties of the objects passed into them.</p>\n\n<pre><code> //chrome (v8)\n\n var a = { 'test1':'test1val' }\n test1   // error not defined\n with (a) { var test1 = 'replaced' }\n test1   // undefined\n a       // a.test1 = 'replaced'\n</code></pre>\n\n<p>EDIT: Clarifying example:</p>\n\n<p>test1 is scoped to the with block, but is aliased to a.test1.  'Var test1' creates a new variable test1 in the upper lexical context (function, or global), unless it is a property of a -- which it is. </p>\n\n<p>Yikes!  Be careful using 'with' -- just like var is a noop if the variable is already defined in the function, it is also a noop with respect to names imported from the object!  A little heads up on the name already being defined would make this much safer.  I personally will never use with because of this.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gerard ONeill",
                        "user_id": 1331672
                    },
                    "score": 4
                },
                {
                    "body": "<p><strong>Global Scope::</strong> Global variables are exactly like global stars (Jackie Chan, Nelson Mandela). You can access them (get or set the value), from any part of your application. Global functions are like global events (New Year, Christmas). You can execute (call) them from any part of your application.</p>\n\n<pre><code>//global variable\nvar a = 2;\n\n//global function\nfunction b(){\n   console.log(a);  //access global variable\n}\n</code></pre>\n\n<p><strong>Local Star::</strong> If you are in the USA, you may know Kim Kardashian, infamous celebrity ( she somehow manages to make the tabloids). But people outside of the USA will not recognize her. She is a local star, bound to her territory.</p>\n\n<p><strong>Local Scope::</strong> Local variables are like local stars. You can only access them (get or set the value) inside the scope. A local function is like local events - you can execute only (celebrate) inside that scope. If you want to access them from outside of the scope, you will get a reference error</p>\n\n<pre><code>function b(){\n   var d = 21; //local variable\n   console.log(d);\n\n   function dog(){  console.log(a); }\n     dog(); //execute local function\n}\n\n console.log(d); //ReferenceError: dddddd is not defined    \n</code></pre>\n\n<p>check this for <a href=\"http://www.thatjsdude.com/jsConcepts/concepts/scope.html\" rel=\"nofollow\">in-depth understanding of scope</a> </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "KhanSharp",
                        "user_id": 1535443
                    },
                    "score": 1
                },
                {
                    "body": "<p>JavaScript have only two type of scope : </p>\n\n<ol>\n<li><strong>Global Scope</strong> : Global is nothing but a window level scope.Here, variable present throughout the application.</li>\n<li><strong>Functional Scope</strong> : Variable declared within a function with <code>var</code> keyword has functional scope.</li>\n</ol>\n\n<p><em>Whenever a function is called, a variable scope object is created (and included in scope chain) which is followed by variables in JavaScript.</em></p>\n\n<pre><code>        a = \"global\";\n         function outer(){ \n              b = \"local\";\n              console.log(a+b); //\"globallocal\"\n         }\nouter();\n</code></pre>\n\n<p>Scope chain -->  </p>\n\n<ol>\n<li>Window level - <code>a</code> and <code>outer</code> function are at top level in scope chain.</li>\n<li>when outer function called a new <code>variable scope object</code>(and included in scope chain) added with variable <code>b</code> inside it.</li>\n</ol>\n\n<p>Now when a variable <code>a</code> required it first searches for nearest variable scope and if variable is not there than it move's to next object of variable scope chain.which is in this case is window level.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anshul Shukla",
                        "user_id": 1768910
                    },
                    "score": 1
                },
                {
                    "body": "<p>run the code. hope this will give an idea about scoping </p>\n\n<pre><code>Name = 'global data';\ndocument.Name = 'current document data';\n(function(window,document){\nvar Name = 'local data';\nvar myObj = {\n    Name: 'object data',\n    f: function(){\n        alert(this.Name);\n    }\n};\n\nmyObj.newFun = function(){\n    alert(this.Name);\n}\n\nfunction testFun(){\n    alert(\"Window Scope : \" + window.Name + \n          \"\\nLocal Scope : \" + Name + \n          \"\\nObject Scope : \" + this.Name + \n          \"\\nCurrent document Scope : \" + document.Name\n         );\n}\n\n\ntestFun.call(myObj);\n})(window,document);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Yeasin Abedin Siam",
                        "user_id": 2672014
                    },
                    "score": 2
                },
                {
                    "body": "<p>Global: variable declared outside of a function</p>\n\n<p>Local: variable declared inside a function, and can only be called in that scope</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "poisonlocc",
                        "user_id": 4234062
                    },
                    "score": -1
                }
            ],
            "body": "<p>What is the scope of variables in javascript? Do they have the same scope inside as opposed to outside a function? Or does it even matter? Also, where are the variables stored if they are defined globally?</p>\n",
            "last_activity_date": 1420313752,
            "owner": {
                "display_name": "lYriCAlsSH",
                "user_id": 60102
            },
            "question_id": 500431,
            "score": 777,
            "tags": [
                "javascript",
                "variables",
                "scope"
            ],
            "title": "What is the scope of variables in JavaScript?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>There are actually several approaches to do this. Some require more overhead than others, and some are considered better than others.</p>\n\n<p>In no particular order:</p>\n\n<ol>\n<li>Use AJAX to get the data you need from the server.</li>\n<li>Echo the data into the page somewhere, and use JavaScript to get the information from the DOM.</li>\n<li>Echo the data directly to JavaScript.</li>\n</ol>\n\n<p>In this post, we'll examine each of the above methods, and see the pros and cons of each, as well as how to implement them.</p>\n\n<h1>1. Use AJAX to get the data you need from the server</h1>\n\n<p>This method is considered the best, because <strong>your server side and client side scripts are completely separate</strong>.</p>\n\n<h3>Pros</h3>\n\n<ul>\n<li><strong>Better separation between layers</strong> - If tomorrow you stop using PHP, and want to move to a servlet, a REST API, or some other service, you don't have to change much of the JavaScript code.</li>\n<li><strong>More readable</strong> - JavaScript is JavaScript, PHP is PHP. Without mixing the two, you get more readable code on both languages.</li>\n<li><strong>Allows for async data transfer</strong> - Getting the information from PHP might be time/resources expensive. Sometimes you just don't want to wait for the information, load the page, and have the information reach whenever.</li>\n<li><strong>Data is not directly found on the markup</strong> - This means that your markup is kept clean of any additional data, and only JavaScript sees it.</li>\n</ul>\n\n<h3>Cons</h3>\n\n<ul>\n<li><strong>Latency</strong> - AJAX creates an HTTP request, and HTTP requests are carried over network and have network latencies.</li>\n<li><strong>State</strong> - Data fetched via a separate HTTP request won't include any information from the HTTP request that fetched the HTML document. You may need this information (e.g. if the HTML document is generated in response to a form submission) and, if you do, will have to transfer it across somehow. If you have ruled out embedding the data in the page (which you have if you are using this technique) then that limits you to cookies/sessions which may be subject to race conditions.</li>\n</ul>\n\n<h2>Implementation Example</h2>\n\n<p>With AJAX, you need two pages, one is where PHP generates the output, and the second is where JavaScript gets that output:</p>\n\n<h3>get-data.php</h3>\n\n<pre><code>/* Do some operation here, like talk to the database, the file-session\n * The world beyond, limbo, the city of shimmers, and Canada.\n * \n * AJAX generally uses strings, but you can output JSON, HTML and XML as well. \n * It all depends on the Content-type header that you send with your AJAX\n * request. */\n\necho json_encode(42); //In the end, you need to <strong>echo</strong> the result. \n                      //All data should be <em>json_encode()</em>d.\n\n                      //You can json_encode() any value in PHP, arrays, strings,\n                      //even objects.\n\n</code></pre>\n\n<h3>index.php (or whatever the actual page is named like)</h3>\n\n<pre><code>&lt;!-- snip --&gt;\n&lt;script&gt;\n    function reqListener () {\n      console.log(this.responseText);\n    }\n\n    var oReq = new XMLHttpRequest(); //New request object\n    oReq.onload = function() {\n        //This is where you handle what to do with the response.\n        //The actual data is found on this.responseText\n        alert(this.responseText); //Will alert: 42\n    };\n    oReq.open(\"get\", \"get-data.php\", true);\n    //                               ^ Don't block the rest of the execution.\n    //                                 Don't wait until the request finishes to \n    //                                 continue.\n    oReq.send();\n&lt;/script&gt;\n&lt;!-- snip --&gt;\n</code></pre>\n\n<p>The above combination of the two files will alert <code>42</code> when the file finishes loading.</p>\n\n<h2>Some more reading material</h2>\n\n<ul>\n<li><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\">Using XMLHttpRequest - MDN</a></strong></li>\n<li><strong><a href=\"https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest\">XMLHttpRequest object reference - MDN</a></strong></li>\n<li><strong><a href=\"http://stackoverflow.com/questions/14220321/how-to-return-the-response-from-an-ajax-call\">How to return the response from an Ajax call?</a></strong></li>\n</ul>\n\n<h1>2. Echo the data into the page somewhere, and use JavaScript to get the information from the DOM</h1>\n\n<p>This method is less preferable to AJAX, but it still has its advantages. It's still <em>relatively</em> separated between PHP and JavaScript in a sense that there is no PHP directly in the JavaScript.</p>\n\n<h3>Pros</h3>\n\n<ul>\n<li><strong>Fast</strong> - DOM operations are often quick, and you can store and access a lot of data relatively quickly.</li>\n</ul>\n\n<h3>Cons</h3>\n\n<ul>\n<li><strong>Potentially Unsemantic Markup</strong> - Usually, what happens is that you use some sort of <code>&lt;input type=hidden&gt;</code> to store the information, because it's easier to get the information out of <code>inputNode.value</code>, but doing so means that you have a meaningless element in your HTML. HTML has the <code>&lt;meta&gt;</code> element for data about the document, and HTML 5 introduces <code>data-*</code> attributes for data specifically for reading with JS that can be associated with particular elements.</li>\n<li><strong>Dirties up the Source</strong> - Data that PHP generates is outputted directly to the HTML source, meaning that you get a bigger and less focused HTML source.</li>\n<li><strong>Harder to get structured data</strong> - Structured data will have to be valid HTML, otherwise you'll have to escape and convert strings yourself.</li>\n<li><strong>Tightly couples PHP to your data logic</strong> - Because PHP is used in presentation, you can't separate the two cleanly.</li>\n</ul>\n\n<h2>Implementation Example</h2>\n\n<p>With this, the idea is to create some sort of element which will not be displayed to the user, but is visible to JavaScript.</p>\n\n<h3>index.php</h3>\n\n<pre><code>&lt;!-- snip --&gt;\n&lt;div id=\"dom-target\" style=\"display: none;\"&gt;\n    &lt;?php \n        $output = \"42\"; //Again, do some operation, get the output.\n        echo htmlspecialchars($output); /* You have to escape because the result\n                                           will not be valid HTML otherwise. */\n    ?&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    var div = document.getElementById(\"dom-target\");\n    var myData = div.textContent;\n&lt;/script&gt;\n&lt;!-- snip --&gt;\n</code></pre>\n\n<h1>3. Echo the data directly to JavaScript</h1>\n\n<p>This is probably the easiest to understand, and the most horrible to use. Don't do this unless you know what you're doing.</p>\n\n<h3>Pros</h3>\n\n<ul>\n<li><strong>Very easily implemented</strong> - It takes very little to implement this, and understand.</li>\n<li><strong>Does not dirty source</strong> - Variables are outputted directly to JavaScript, so the DOM is not affected.</li>\n</ul>\n\n<h3>Cons</h3>\n\n<ul>\n<li><strong><em>Insecure</em></strong> - PHP has no trivial JavaScript escape functions, and they aren't trivial to implement. Especially when using user inputs, you are <strong>extremely</strong> vulnerable to second tier injections. <strong>Disputed</strong> see comments</li>\n<li><strong>Tightly couples PHP to your data logic</strong> - Because PHP is used in presentation, you can't separate the two cleanly.</li>\n<li><strong>Structured data is hard</strong> - You can probably do JSON... kinda. But XML and HTML will require special attention.</li>\n</ul>\n\n<h2>Implementation Example</h2>\n\n<p>Implementation is relatively straightforward:</p>\n\n<pre><code>&lt;!-- snip --&gt;\n&lt;script&gt;\n    var data = &lt;?php echo json_encode(\"42\"); ?&gt;; //Don't forget the extra semicolon!\n&lt;/script&gt;\n&lt;!-- snip --&gt;\n</code></pre>\n\n<p>Good luck!</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Second Rikudo",
                        "user_id": 871050
                    },
                    "score": 168
                },
                {
                    "body": "<p>I'm going to try a simpler answer:</p>\n\n<h2>Explanation of the problem</h2>\n\n<p>First, let's understand the flow of events when a page is served from our server:</p>\n\n<ul>\n<li>First PHP is run, it generates the HTML that is served to the client.</li>\n<li>Then, the HTML is delivered to the client, after PHP is done with it, I'd like to emphasize that once the code leaves the server - PHP is done with it and can no longer access it.</li>\n<li>Then, the HTML with JavaScript reaches the client, which can execute JS on that html.</li>\n</ul>\n\n<p>So really, the core thing to remember here is that <strong>HTTP is stateless</strong>. Once a request left the server, the server can not touch it. So, that leaves our options to:</p>\n\n<ol>\n<li>Send more requests from the client <em>after</em> the initial request is done.</li>\n<li>Encode what the server had to say in the initial request.</li>\n</ol>\n\n<h2>Solutions</h2>\n\n<p>That's the core question you should be asking yourself is:</p>\n\n<h2>Am I writing a website or an application?</h2>\n\n<p>Websites are mainly page based, and the page load times needs to be as fast as possible (for example - Wikipedia) . Web applications are more AJAX heavy and perform a lot of round trips to get the client fast information (for example - a stock dashboard).</p>\n\n<h3>Website</h3>\n\n<p>Sending more requests from the client after the initial request is done is <strong>slow</strong> as it requires more HTTP requests which have significant overhead. Moreover, it requires <em>asynchronousity</em> as making an AJAX request requires a handler for when it's complete.</p>\n\n<p>I would <em>not</em> recommend making another request <em>unless your site is an application</em> for getting that information from the server. </p>\n\n<p>You want fast response times which have a <em>huge</em> impact on conversion and load times. Making ajax requests is slow for the initial uptime in this case and unneeded.</p>\n\n<p>You have two ways to tackle the issue</p>\n\n<ul>\n<li><strong>Set a cookie</strong> - cookies are headers sent in HTTP requests that both the server and client can read.</li>\n<li><strong>Encode the variable as JSON</strong> - JSON looks very close to JavaScript objects and <em>most</em> JSON objects are valid JavaScript variables.</li>\n</ul>\n\n<p><a href=\"http://www.php.net/manual/en/function.setcookie.php\">Setting a cookie</a> is really not very difficult, you just assign it a value:</p>\n\n<pre><code>setcookie(\"MyCookie\", $value); // sets the cookie to the value, remember, do not\n                               // set it with HTTP only to true.\n</code></pre>\n\n<p>Then, you can <a href=\"http://stackoverflow.com/questions/5639346/shortest-function-for-reading-a-cookie-in-javascript\">read it with JavaScript</a> using <code>document.cookie</code>:</p>\n\n<p>Here is a short hand rolled parser, but the answer I linked to right above this has better tested ones: </p>\n\n<pre><code>var cookies = document.cookie.split(\";\").\n    map(function(el){ return el.split(\"=\"); }).\n    reduce(function(prev,cur){ prev[cur[0]] = cur[1];return prev },{});\n\ncookies[\"MyCookie\"] // value set with php.\n</code></pre>\n\n<p>Cookies are good for a little data. This is what tracking services often do.</p>\n\n<p>Once we have more data, we can encode it with JSON inside a JS variable instead:</p>\n\n<pre><code>&lt;script&gt;\n    var myServerData = &lt;?=json_encode($value)?&gt;; // don't forget to sanitize \n                                                 //server data\n&lt;/script&gt;\n</code></pre>\n\n<p>Assuming <code>$value</code> is <code>json_encode</code>able on the PHP side (it usually is). This technique is what StackOverflow does with its chat for example (only using .net instead of php).</p>\n\n<h3>Application</h3>\n\n<p>If you're writing an application - suddenly the initial load time isn't always as important as the ongoing performance of the app and it starts to pay off to load data and code separately.</p>\n\n<p>My answer <a href=\"http://stackoverflow.com/a/16825593/1348195\">here</a> explains how to load data using AJAX in JavaScript:</p>\n\n<pre><code>function callback(data){\n    // what do I do with the response?\n}\n\nvar httpRequest = new XMLHttpRequest;\nhttpRequest.onreadystatechange = function(){\n    if (httpRequest.readyState === 4) {// request is done\n        if (httpRequest.status === 200) {// successfully\n            callback(httpRequest.responseText);// we're calling our method\n        }\n    }\n};\nhttpRequest.open('GET', \"/echo/json\");\nhttpRequest.send();\n</code></pre>\n\n<p>Or with jQuery:</p>\n\n<pre><code>$.get(\"/your/url\").done(function(data){\n    // what do I do with the data?\n});\n</code></pre>\n\n<p>Now, the server just needs to contain a <code>/your/url</code> route/file that contains code that grabs the data and does something with it, in your case:</p>\n\n<pre><code>&lt;$php\n ...\n $val = myService-&gt;getValue(); // makes an api and db call\n echo json_encode($val); // write it to the output\n $&gt;\n</code></pre>\n\n<p>This way, our JS file asks for the data and shows it rather than asking for code or for layout. This is cleaner and starts to pay off as the application gets higher. It's also better separation of concerns and it allows testing the client side code without any server side technology involved which is another plus.</p>\n\n<p><strong>Postscript:</strong> You have to be <em>very</em> aware of XSS attack vectors when you inject anything from PHP to JavaScript. It's <em>very</em> hard to escape values properly and it's context sensitive. If you're unsure how to deal with XSS, or unaware of it - please read <a href=\"https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29\">this OWASP article</a>, <a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">this one</a> and <a href=\"http://stackoverflow.com/q/71328/1348195\">this question</a>. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Benjamin Gruenbaum",
                        "user_id": 1348195
                    },
                    "score": 27
                },
                {
                    "body": "<pre><code>myPlugin.start($val); // tried this, didn't work    \n</code></pre>\n\n<p>It doesn't work because <code>$val</code> is undefined as far as javascript is concerned, ie. the php did not output anything for <code>$val</code>. Try viewing the source in your browser and here is what you'll see:</p>\n\n<pre><code>myPlugin.start(); // tried this, didn't work    \n</code></pre>\n\n<p>And</p>\n\n<pre><code>&lt;?php myPlugin.start($val); ?&gt; // this didn't work either\n</code></pre>\n\n<p>This doesn't work because php will try to treat <code>myPlugin</code> as a constant and when that fails it will try to treat it as the string <code>'myPlugin'</code> which it will try to concatenate with the output of the php function <code>start()</code> and since that is undefined it will produce a fatal error</p>\n\n<p>And</p>\n\n<pre><code> myPlugin.start(&lt;?=$val?&gt; // this works sometimes, but sometimes it fails\n</code></pre>\n\n<p>While this is most likely to work, since the php is producing valid javascript with the expected arguments, if it fails, chances are its because <code>myPlugin</code> isn't ready yet. Check your order of execution.</p>\n\n<p>Also you should note that the php out put is insecure and should be filtered with <code>json_encode()</code></p>\n\n<p><strong>EDIT</strong>  </p>\n\n<p>Because I didn't notice the missing parenthesis in <code>myPlugin.start(&lt;?=$val?&gt;</code> :-\\</p>\n\n<p>As @Second Rikudo points out, for it to work correctly <code>$val</code> would need to contain the closing parenthesis eg: <code>$val=\"42);\"</code> </p>\n\n<p>Meaning that the php will now produce <code>myPlugin.start(42);</code> and will work as expected when executed by the javascript</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "andrew",
                        "user_id": 2578037
                    },
                    "score": 4
                },
                {
                    "body": "<p>I usually use data-* attributes in html.</p>\n\n<pre><code>&lt;div class=\"service-container\" data-service=\"&lt;?php echo $myService-&gt;getValue(); ?&gt;\"&gt;\n\n&lt;/div&gt;\n\n&lt;script&gt;\n$(document).ready(function() {\n    $('.service-container').each(function() {\n        var container = $(this);\n        var service = container.data('container');\n\n        // service variable now contains the value of $myService-&gt;getValue();\n    });\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>This example uses jQuery but can be adapted for another library or vanilla Javascript.</p>\n\n<p>You can read more about the dataset property here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset\">https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.dataset</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "asdasd",
                        "user_id": 1898532
                    },
                    "score": 16
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n  var jsvar = &lt;?php echo json_encode($PHPVar); ?&gt;;\n&lt;/script&gt;\n</code></pre>\n\n<p>json_encode() requires:</p>\n\n<ul>\n<li>PHP 5.2.0 or more</li>\n<li>$PHPVar encoded as UTF-8, Unicode.</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jess&#233; Catrinck",
                        "user_id": 3625217
                    },
                    "score": 2
                },
                {
                    "body": "<p>try this </p>\n\n<pre><code>&lt;?php\n    echo \"&lt;script&gt; var x = \". $phpVariable .\"&lt;/script&gt;\";\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Yosra Nagati",
                        "user_id": 1577444
                    },
                    "score": 4
                },
                {
                    "body": "<p>I quite like the way the Wordpress works with its <a href=\"http://codex.wordpress.org/Function_Reference/wp_enqueue_script\" rel=\"nofollow\">enqueue</a> and <a href=\"http://codex.wordpress.org/Function_Reference/wp_localize_script\" rel=\"nofollow\">localize</a> functions, so following that model, i wrote a simple class for putting a scripts into page according to the script dependencies, and for making additional data available for the script.</p>\n\n<pre><code>class mHeader {\n\n    private $scripts = array();\n\n    /**\n     * @param string $id        unique script identifier\n     * @param string $src   script src attribute\n     * @param array  $deps      an array of dependencies ( script identifiers ).\n     * @param array  $data      an array, data that will be json_encoded and available to the script.\n     */\n    function enqueue_script( $id, $src, $deps = array(), $data = array() ) {\n        $this-&gt;scripts[$id] = array( 'src' =&gt; $src, 'deps' =&gt; $deps, 'data' =&gt; $data );\n    }\n\n    private function dependencies( $script ) {\n        if ( $script['deps'] ) {\n            return array_map( array( $this, 'dependencies' ), array_intersect_key( $this-&gt;scripts, array_flip( $script['deps'] ) ) );\n        }\n    }\n\n    private function _unset( $key, &amp;$deps, &amp;$out ) {\n        $out[$key] = $this-&gt;scripts[$key];\n        unset( $deps[$key] );\n    }\n\n    private function flattern( &amp;$deps, &amp;$out = array() ) {\n\n        foreach( $deps as $key =&gt; $value ) {            \n            empty($value) ? $this-&gt;_unset( $key, $deps, $out ) : $this-&gt;flattern( $deps[$key], $out );\n        }\n    }   \n\n    function print_scripts() {\n\n        if ( !$this-&gt;scripts ) return;\n\n        $deps = array_map( array( $this, 'dependencies' ), $this-&gt;scripts );\n        while ( $deps ) \n            $this-&gt;flattern( $deps, $js );\n\n        foreach( $js as $key =&gt; $script ) {\n            $script['data'] &amp;&amp; printf( \"&lt;script&gt; var %s = %s; &lt;/script&gt;\" . PHP_EOL, key( $script['data'] ), json_encode( current( $script['data'] ) ) );\n            echo \"&lt;script id=\\\"$key-js\\\" src=\\\"$script[src]\\\" type=\\\"text/javascript\\\"&gt;&lt;/script&gt;\" . PHP_EOL;\n        }\n    }\n}\n</code></pre>\n\n<p>Call to <code>enqueue_script()</code> function is for adding script, setting the souce and dependencies on other scripts, and additional data needed for the script.</p>\n\n<pre><code>$header = new mHeader();\n\n$header-&gt;enqueue_script( 'jquery-ui', '//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js', array( 'jquery' ) );\n$header-&gt;enqueue_script( 'jquery', '//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js' );\n$header-&gt;enqueue_script( 'custom-script', '//custom-script.min.js', array( 'jquery-ui' ), array( 'mydata' =&gt; array( 'value' =&gt; 20 ) ) );\n\n$header-&gt;print_scripts();\n</code></pre>\n\n<p>And, <code>print_scripts()</code> method of the above example will send this output:</p>\n\n<pre><code>&lt;script id=\"jquery-js\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script id=\"jquery-ui-js\" src=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script&gt; var mydata = {\"value\":20}; &lt;/script&gt;\n&lt;script id=\"custom-script-js\" src=\"//custom-script.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Regardless the fact that the script 'jquery' is enqueued after the 'jquery-ui', it is printed before because it is defined in 'jquery-ui' that it depend on 'jquery'.\nAdditional data for the 'custom-script' are inside a new script block and are placed in front of it, it contains <code>mydata</code> object that holds additional data, now availible to 'custom-script'.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Danijel",
                        "user_id": 2352773
                    },
                    "score": 4
                },
                {
                    "body": "<p>I have come out with an easy method to assign JavaScript variables using PHP. </p>\n\n<p>It uses HTML5 data attributes to store PHP variables and then its assigned to JavaScript on page load.</p>\n\n<p>Complete Tutorial can be found <a href=\"http://qnimate.com/assign-javascript-variables-using-wordpressphp/\" rel=\"nofollow\">here</a></p>\n\n<p>Example:</p>\n\n<pre><code>&lt;?php\n\n$variable_1 = \"QNimate\";\n$variable_2 = \"QScutter\";\n\n?&gt;\n    &lt;span id=\"storage\" data-variable-one=\"&lt;?php echo $variable_1; ?&gt;\" data-variable-two=\"&lt;?php echo $variable_2; ?&gt;\"&gt;&lt;/span&gt;\n&lt;?php\n</code></pre>\n\n<p>Hers is the JS code</p>\n\n<pre><code>var variable_1 = undefined;\nvar variable_2 = undefined;\n\nwindow.onload = function(){\n    variable_1 = document.getElementById(\"storage\").getAttribute(\"data-variable-one\");\n    variable_2 = document.getElementById(\"storage\").getAttribute(\"data-variable-two\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "qnimate",
                        "user_id": 3981687
                    },
                    "score": 1
                }
            ],
            "body": "<p>I have a variable in PHP, and I need its value in my JavaScript code. How can I get my variable from PHP to JavaScript?</p>\n\n<p>I have code that looks like this:</p>\n\n<pre><code>&lt;$php\n     ...\n     $val = $myService-&gt;getValue(); // makes an api and db call\n$&gt;\n</code></pre>\n\n<p>I have JavaScript code that needs <code>val</code> and looks along the lines of:</p>\n\n<pre><code>&lt;script&gt;\n    myPlugin.start($val); // tried this, didn't work\n    &lt;?php myPlugin.start($val); ?&gt; // this didn't work either\n    myPlugin.start(&lt;?=$val?&gt; // this works sometimes, but sometimes it fails\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1426497555,
            "owner": {
                "display_name": "Second Rikudo",
                "user_id": 871050
            },
            "question_id": 23740548,
            "score": 109,
            "tags": [
                "javascript",
                "php"
            ],
            "title": "How to pass variables and data from PHP to JavaScript?"
        },
        {
            "answer_count": 33,
            "answers": [
                {
                    "body": "<p>I love <em><a href=\"http://www.webdevelopersnotes.com/tips/html/10_ways_to_format_time_and_date_using_javascript.php3\">10 ways to format time and date using JavaScript</a></em> and <em><a href=\"http://www.elated.com/articles/working-with-dates/\">Working with Dates</a></em>.</p>\n\n<p>Basically, you have three methods and you have to combine the strings for yourself:</p>\n\n<pre><code>getDate() // Returns the date\ngetMonth() // Returns the month\ngetFullYear() // Returns the year\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var d = new Date();\n    var curr_date = d.getDate();\n    var curr_month = d.getMonth() + 1; //Months are zero based\n    var curr_year = d.getFullYear();\n    document.write(curr_date + \"-\" + curr_month + \"-\" + curr_year);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Haim Evgi",
                        "user_id": 74314
                    },
                    "score": 779
                },
                {
                    "body": "<p>Make sure you checkout <a href=\"http://www.datejs.com/\">Datejs</a> when dealing with dates in JavaScript. It's quite impressive and well documented as you can see in case of the <a href=\"http://code.google.com/p/datejs/wiki/APIDocumentation#toString\">toString function</a>.</p>\n\n<p><strong>EDIT</strong>: Tyler Forsythe points out, that datejs is outdated. I use it in my current project and hadn't any trouble with it, however you should be aware of this and consider alternatives.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tim B&#252;the",
                        "user_id": 60518
                    },
                    "score": 80
                },
                {
                    "body": "<p>Just another option, which I wrote:</p>\n\n<p><a href=\"http://depressedpress.com/javascript-extensions/dp_dateextensions/\" rel=\"nofollow\">DP_DateExtensions Library</a></p>\n\n<p>Not sure if it'll help, but I've found it useful in several projects - looks like it'll do what you need.</p>\n\n<p>Supports date/time formatting, date math (add/subtract date parts), date compare, date parsing, etc. It's liberally open sourced.</p>\n\n<p>No reason to consider it if you're already using a framework (they're all capable), but if you just need to quickly add date manipulation to a project give it a chance.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jim Davis",
                        "user_id": 156098
                    },
                    "score": 3
                },
                {
                    "body": "<p>The functionality you cite is not standard Javascript, not likely to be portable across browsers and therefore not good practice.  The <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript 3 spec</a> leaves the parse and output formats function up to the Javascript implementation.  <a href=\"http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf\">ECMAScript 5</a> adds a subset of ISO8601 support.  I believe the toString() function you mention is an innovation in one browser (Mozilla?)</p>\n\n<p>Several libraries provide routines to parameterize this, some with extensive localization support.  You can also check out the methods in <a href=\"http://api.dojotoolkit.org/jsdoc/1.3/dojo.date.locale\">dojo.date.locale</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "peller",
                        "user_id": 153101
                    },
                    "score": 27
                },
                {
                    "body": "<p>I came across a brand new JavaScript library called jPaq which provides a function that closely emulates PHP's date function.  Documentation for this function can be found here:  <a href=\"http://jpaq.org/documentation/Date.prototype.format%28%29/1.0/\" rel=\"nofollow\">http://jpaq.org/documentation/Date.prototype.format%28%29/1.0/</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Clarence Fredericks",
                        "user_id": 606743
                    },
                    "score": 1
                },
                {
                    "body": "<p>If you are already using <a href=\"http://en.wikipedia.org/wiki/JQuery_UI\">jQuery UI</a> in your project, you can use the built-in datepicker method for formatting your date object:</p>\n\n<pre><code>$.datepicker.formatDate('yy-mm-dd', new Date(2007, 1 - 1, 26));\n</code></pre>\n\n<p>However, the datepicker only formats dates, and cannot format times.</p>\n\n<p>Have a look at <a href=\"http://docs.jquery.com/UI/Datepicker/formatDate\">jQuery UI datepicker formatDate</a>, the examples.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "casid",
                        "user_id": 889421
                    },
                    "score": 378
                },
                {
                    "body": "<p>DateJS is certainly full-featured, but I'd recommend <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\">this MUCH simpler lib (JavaScript Date Format)</a> which I prefer  simply because it's only 120 lines or so.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eric Wendelin",
                        "user_id": 25066
                    },
                    "score": 20
                },
                {
                    "body": "<p>Formatting and especially parsing dates in JavaScript can be a bit of a headache. Not all browsers handle dates in the same way. So while it's useful to know the base methods, its more practical to use a helper library.</p>\n\n<p>The <a href=\"http://arshaw.com/xdate/\">XDate javascript library</a> by <a href=\"https://github.com/arshaw\">Adam Shaw</a> has been around since mid-2011 and is still under active development. It has fantastic documentation, a great API, formatting, tries to remain backwards-compatible and even supports localized strings.</p>\n\n<p>Link to changing the locale strings: <a href=\"https://gist.github.com/1221376\">https://gist.github.com/1221376</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sam Lown",
                        "user_id": 448352
                    },
                    "score": 5
                },
                {
                    "body": "<p>I use <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\">Steven Levithan's date formatter</a>. It's nice, easy and fully customizable.\nHe's the author of <a href=\"http://shop.oreilly.com/product/9780596520694.do\">Regular Expressions Cookbook</a> (O'Reilly).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jkanini",
                        "user_id": 969132
                    },
                    "score": 11
                },
                {
                    "body": "<p><strong><a href=\"http://momentjs.com\">Moment.js</a></strong></p>\n\n<p>It is a (lightweight)* JavaScript date library for parsing, manipulating, and formatting dates.</p>\n\n<pre><code>var a = moment([2010, 1, 14, 15, 25, 50, 125]);\na.format(\"dddd, MMMM Do YYYY, h:mm:ss a\"); // \"Sunday, February 14th 2010, 3:25:50 pm\"\na.format(\"ddd, hA\");                       // \"Sun, 3PM\"\n</code></pre>\n\n<p><em>(*) lightweight meaning 9.3KB minified + gzipped in the smallest possible setup (feb 2014)</em> </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "chx007",
                        "user_id": 1210309
                    },
                    "score": 588
                },
                {
                    "body": "<p><a href=\"http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip\" rel=\"nofollow\">JsSimpleDateFormat</a> is a library that can format the date object and parse the formatted string back to Date object. It uses the Java format (SimpleDateFormat class). The name of months and days can be localized.</p>\n\n<p>Example:</p>\n\n<pre><code>var sdf = new JsSimpleDateFormat(\"EEEE, MMMM dd, yyyy\");\nvar formattedString = sdf.format(new Date());\nvar dateObject = sdf.parse(\"Monday, June 29, 2009\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Peter",
                        "user_id": 1405912
                    },
                    "score": 2
                },
                {
                    "body": "<pre><code>function dateToYMD(date) {\n    var d = date.getDate();\n    var m = date.getMonth() + 1;\n    var y = date.getFullYear();\n    return '' + y + '-' + (m&lt;=9 ? '0' + m : m) + '-' + (d &lt;= 9 ? '0' + d : d);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adrian Maire",
                        "user_id": 1212756
                    },
                    "score": 118
                },
                {
                    "body": "<blockquote>\n  <p>Where is the documentation which lists the format specifiers supported by the <code>Date()</code> object?</p>\n</blockquote>\n\n<p>I stumbled across this today and was quite surprised that no one took the time to answer this simple question.  True, there are many libraries out there to help with date manipulation.  Some are better than others.  But that wasn't the question asked.</p>\n\n<p>AFAIK, pure JavaScript doesn't support format specifiers <strong>the way you have indicated you'd like to use them</strong>.  But it does support methods for formatting dates and/or times, such as <code>.toLocaleDateString()</code>, <code>.toLocaleTimeString()</code>, and <code>.toUTCString()</code>.</p>\n\n<p>The <code>Date</code> object reference I use most frequently is on the <a href=\"http://www.w3schools.com/jsref/jsref_obj_date.asp\">w3schools.com website</a> (but <a href=\"https://www.google.com/search?q=javascript%20date%20object%20reference\">a quick Google search</a> will reveal many more that may better meet your needs).</p>\n\n<p>Also note that the <strong>Date Object Properties</strong> section provides a link to <a href=\"http://www.w3schools.com/jsref/jsref_prototype_date.asp\"><code>prototype</code></a>, which illustrates some ways you can extend the Date object with custom methods.  There has been <a href=\"http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/\">some debate</a> in the JavaScript community over the years about whether or not this is best practice, and I am not advocating for or against it, just pointing out its existence.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Scott Offen",
                        "user_id": 1102764
                    },
                    "score": 172
                },
                {
                    "body": "<p>I made this very simple formatter, it's cut/n/pastable (Updated with neater version):</p>\n\n<pre><code>function DateFmt(fstr) {\n  this.formatString = fstr\n\n  var mthNames = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  var dayNames = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n  var zeroPad = function(number) {\n     return (\"0\"+number).substr(-2,2);\n  }\n\n  var dateMarkers = {\n    d:['getDate',function(v) { return zeroPad(v)}],\n    m:['getMonth',function(v) { return zeroPad(v+1)}],\n    n:['getMonth',function(v) { return mthNames[v]; }],\n    w:['getDay',function(v) { return dayNames[v]; }],\n    y:['getFullYear'],\n    H:['getHours',function(v) { return zeroPad(v)}],\n    M:['getMinutes',function(v) { return zeroPad(v)}],\n    S:['getSeconds',function(v) { return zeroPad(v)}],\n    i:['toISOString']\n  };\n\n  this.format = function(date) {\n    var dateTxt = this.formatString.replace(/%(.)/g, function(m, p) {\n      var rv = date[(dateMarkers[p])[0]]()\n\n      if ( dateMarkers[p][1] != null ) rv = dateMarkers[p][1](rv)\n\n      return rv\n\n    });\n\n    return dateTxt\n  }\n\n}\n\nfmt = new DateFmt(\"%w %d:%n:%y - %H:%M:%S  %i\")\nv = fmt.format(new Date())\n</code></pre>\n\n<p><a href=\"http://snipplr.com/view/66968.82825/\">http://snipplr.com/view/66968.82825/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lyndon S",
                        "user_id": 1638344
                    },
                    "score": 27
                },
                {
                    "body": "<p>Having looked through several of the options provided in other answers, I decided to write my own limited but simple solution that others may also find useful.</p>\n\n<pre><code>/**\n* Format date as a string\n* @param date - a date object (usually \"new Date();\")\n* @param format - a string format, eg. \"DD-MM-YYYY\"\n*/\nfunction dateFormat(date, format) {\n    // Calculate date parts and replace instances in format string accordingly\n    format = format.replace(\"DD\", (date.getDate() &lt; 10 ? '0' : '') + date.getDate()); // Pad with '0' if needed\n    format = format.replace(\"MM\", (date.getMonth() &lt; 9 ? '0' : '') + (date.getMonth() + 1)); // Months are zero-based\n    format = format.replace(\"YYYY\", date.getFullYear());\n    return format;\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>console.log(\"The date is: \" + dateFormat(new Date(), \"DD/MM/YYYY\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ollie Bennett",
                        "user_id": 1323144
                    },
                    "score": 16
                },
                {
                    "body": "<p>You can just expand the <code>Date</code> Object with a new <code>format</code> method as noted by <a href=\"http://huahun.iteye.com/blog/197367\">meizz</a>, below is the code given by the author.  And\nhere is a <a href=\"http://jsfiddle.net/gongzhitaao/G5kEQ/1/\">jsfiddle</a>.</p>\n\n<pre><code>Date.prototype.format = function(format) //author: meizz\n{\n  var o = {\n    \"M+\" : this.getMonth()+1, //month\n    \"d+\" : this.getDate(),    //day\n    \"h+\" : this.getHours(),   //hour\n    \"m+\" : this.getMinutes(), //minute\n    \"s+\" : this.getSeconds(), //second\n    \"q+\" : Math.floor((this.getMonth()+3)/3),  //quarter\n    \"S\" : this.getMilliseconds() //millisecond\n  }\n\n  if(/(y+)/.test(format)) format=format.replace(RegExp.$1,\n    (this.getFullYear()+\"\").substr(4 - RegExp.$1.length));\n  for(var k in o)if(new RegExp(\"(\"+ k +\")\").test(format))\n    format = format.replace(RegExp.$1,\n      RegExp.$1.length==1 ? o[k] :\n        (\"00\"+ o[k]).substr((\"\"+ o[k]).length));\n  return format;\n}\n\nalert(new Date().format(\"yyyy-MM-dd\"));\nalert(new Date(\"january 12 2008 11:12:30\").format(\"yyyy-MM-dd h:mm:ss\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "gongzhitaao",
                        "user_id": 1429714
                    },
                    "score": 47
                },
                {
                    "body": "<p>The correct way to format a date to return \"2012-12-29\" is with the script from <em><a href=\"http://blog.stevenlevithan.com/archives/date-time-format\" rel=\"nofollow\">JavaScript Date Format</a></em>: </p>\n\n<pre><code>var d1 = new Date();\nreturn d1.format(\"dd-m-yy\");\n</code></pre>\n\n<p>This code does NOT work:</p>\n\n<pre><code>var d1 = new Date();\nd1.toString('yyyy-MM-dd');      \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "slaver113",
                        "user_id": 1714171
                    },
                    "score": 2
                },
                {
                    "body": "<p>When working with JavaScript, it's important to remember that it is Mozilla's intellectual property, and they are usually pretty solid with documenting it. Here are articles that should help anyone having trouble with dates:</p>\n\n<ul>\n<li><em><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow\">Date</a></em></li>\n<li><em><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/parse\" rel=\"nofollow\">Date.parse</a></em></li>\n<li><em><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toLocaleFormat\" rel=\"nofollow\">toLocaleFormat</a></em></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Billy",
                        "user_id": 1284683
                    },
                    "score": 0
                },
                {
                    "body": "<p>The answer is \"nowhere\" since the date formatting is proprietary functionality. I don't think the toString functions are intended to conform to a specific format. e.g. in the ECMAScript 5.1 spec (<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" rel=\"nofollow\">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</a>, 2/8/2013, page 173), the <em>toString</em> function is documented as follows:</p>\n\n<blockquote>\n  <p>\"The contents of the String are implementation-dependent\"</p>\n</blockquote>\n\n<p>Functions such as the samples below could be used to accomplish formatting fairly easily.</p>\n\n<pre><code>function pad(toPad, padWith) {\n    return (String(padWith) + String(toPad)).slice(-1 * padWith.length);\n}\n\nfunction dateAsInputValue(toFormat) {\n    if(!(toFormat instanceof Date)) return null;\n    return toFormat.getFullYear() + \"-\" + pad(toFormat.getMonth() + 1, \"00\") + \"-\" + pad(toFormat.getDate(), \"00\");\n}\n\nfunction timeAsInputValue(toFormat) {\n    if(!(toFormat instanceof Date)) return null;        \n    return pad(toFormat.getHours(), \"00\") + \":\" + pad(toFormat.getMinutes(), \"00\") + \":\" + pad(toFormat.getSeconds(), \"00\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "goofballLogic",
                        "user_id": 275501
                    },
                    "score": 0
                },
                {
                    "body": "<p>Personally, because I use both PHP and jQuery/javascript in equal measures, I use the date function from php.js <a href=\"http://phpjs.org/functions/date/\" rel=\"nofollow\">http://phpjs.org/functions/date/</a></p>\n\n<p>Using a library that uses the same format strings as something I already know is easier for me, and the manual containing all of the format string possibilities for the date function is of course online at php.net</p>\n\n<p>You simply include the date.js file in your HTML using your preferred method then call it like this:</p>\n\n<pre><code>var d1=new Date();\nvar datestring = date('Y-m-d', d1.valueOf()/1000);\n</code></pre>\n\n<p>You can use d1.getTime() instead of valueOf() if you want, they do the same thing.</p>\n\n<p>The divide by 1000 of the javascript timestamp is because a javascript timestamp is in miliseconds but a PHP timestamp is in seconds.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Cloudranger",
                        "user_id": 634303
                    },
                    "score": 1
                },
                {
                    "body": "<p>Many frameworks (that you might already be using) have date formatting that you may not be aware of.  jQueryUI  was already mentioned, but other frameworks such as <a href=\"http://docs.kendoui.com/getting-started/framework/globalization/dateformatting\" rel=\"nofollow\">Kendo UI (Globalization)</a>, <a href=\"http://developer.yahoo.com/yui/docs/YAHOO.util.Date.html\" rel=\"nofollow\">Yahoo UI (Util)</a> and <a href=\"http://docs.angularjs.org/api/ng.filter%3adate\" rel=\"nofollow\">AngularJS</a> have them as well.</p>\n\n<pre><code>// 11/6/2000\nkendo.toString(new Date(value), \"d\")\n\n// Monday, November 06, 2000\nkendo.toString(new Date(2000, 10, 6), \"D\")\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ProVega",
                        "user_id": 1388341
                    },
                    "score": 0
                },
                {
                    "body": "<p>If you want to show only time with <strong>two</strong> Digits This may helps you .</p>\n\n<pre><code>var now = new Date();\nvar cHour = now.getHours();\nvar cMinuts = now.getMinutes();\nvar cSeconds = now.getSeconds();\n\nvar outStr = (cHour &lt;= 0 ? ('0' + cHour) : cHour) + ':' + (cMinuts &lt;= 9 ? ('0' + cMinuts) : cMinuts) + ':' + (cSeconds &lt;= 9 ? '0' + cSeconds : cSeconds);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Usman Y",
                        "user_id": 1728403
                    },
                    "score": 2
                },
                {
                    "body": "<p>I'm a little surprised nobody has mentioned phpjs. It simulates PHP's date() function:</p>\n\n<p><a href=\"http://phpjs.org/functions/date/\" rel=\"nofollow\">http://phpjs.org/functions/date/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dtbarne",
                        "user_id": 477628
                    },
                    "score": 2
                },
                {
                    "body": "<p>Just to continue gongzhitaao's solid answer - this handles AM/PM</p>\n\n<pre><code> Date.prototype.format = function (format) //author: meizz\n{\n    var hours = this.getHours();\n    var ttime = \"AM\";\n    if(format.indexOf(\"t\") &gt; -1 &amp;&amp; hours &gt; 12)\n    {\n        hours = hours - 12;\n        ttime = \"PM\";\n     }\n\nvar o = {\n    \"M+\": this.getMonth() + 1, //month\n    \"d+\": this.getDate(),    //day\n    \"h+\": hours,   //hour\n    \"m+\": this.getMinutes(), //minute\n    \"s+\": this.getSeconds(), //second\n    \"q+\": Math.floor((this.getMonth() + 3) / 3),  //quarter\n    \"S\": this.getMilliseconds(), //millisecond,\n    \"t+\": ttime\n}\n\nif (/(y+)/.test(format)) format = format.replace(RegExp.$1,\n  (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\nfor (var k in o) if (new RegExp(\"(\" + k + \")\").test(format))\n    format = format.replace(RegExp.$1,\n      RegExp.$1.length == 1 ? o[k] :\n        (\"00\" + o[k]).substr((\"\" + o[k]).length));\nreturn format;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Michael Angstadt",
                        "user_id": 2156920
                    },
                    "score": 5
                },
                {
                    "body": "<p>The library <a href=\"http://sugarjs.com/\" rel=\"nofollow\">sugar.js</a> has some great functionality for working with dates in JavaScript. And it is very well <a href=\"http://sugarjs.com/dates\" rel=\"nofollow\">documented</a>.</p>\n\n<blockquote>\n  <p>Sugar gives the Date class much love starting with the Date.create\n  method which can understand dates in just about any format in 15 major\n  languages, including relative formats like \"1 hour ago\". Dates can\n  also be output in any format or language using an easy to understand\n  syntax, with shortcuts to commonly used date formats. Complex date\n  comparison is also possible with methods like is, which understand any\n  format and apply built in precision.</p>\n</blockquote>\n\n<p>A few examples:</p>\n\n<pre><code>Date.create('July 4, 1776')  -&gt; July 4, 1776\nDate.create(-446806800000)   -&gt; November 5, 1955\nDate.create(1776, 6, 4)      -&gt; July 4, 1776\nDate.create('1776\u5e7407\u670804\u65e5', 'ja') -&gt; July 4, 1776\nDate.utc.create('July 4, 1776', 'en')  -&gt; July 4, 1776\n\nDate.create().format('{Weekday} {d} {Month}, {yyyy}')    -&gt; Monday July 4, 2003\nDate.create().format('{hh}:{mm}')                        -&gt; 15:57\nDate.create().format('{12hr}:{mm}{tt}')                  -&gt; 3:57pm\nDate.create().format(Date.ISO8601_DATETIME)              -&gt; 2011-07-05 12:24:55.528Z\n\nDate.create().is('the 7th of June') -&gt; false\nDate.create().addMonths(2); -&gt;\"Sunday, June 15, 2014 13:39\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "andersh",
                        "user_id": 1838058
                    },
                    "score": 5
                },
                {
                    "body": "<p>Framework free, limited but light</p>\n\n<pre><code>var d = (new Date()+'').split(' ');\n// [\"Tue\", \"Sep\", \"03\", \"2013\", \"21:54:52\", \"GMT-0500\", \"(Central\", \"Daylight\", \"Time)\"]\n\n[d[3], d[1], d[2], d[4]].join(' ');\n// \"2013 Sep 03 21:58:03\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Williams",
                        "user_id": 1308338
                    },
                    "score": 23
                },
                {
                    "body": "<p>Although JS gives you many great ways of formatting and calculations, I prefer using moment JS (momentjs.com) library during application development as its very intuitive and saves a lot of time.</p>\n\n<p>Nonetheless, I suggest everyone to learn about the basic JS API too for a better understanding.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gaurav Karwal",
                        "user_id": 835050
                    },
                    "score": 0
                },
                {
                    "body": "<p>Example code:</p>\n\n<pre><code>var d = new Date();\nvar time = d.toISOString().replace(/.*?T(\\d+:\\d+:\\d+).*/, \"$1\");\n</code></pre>\n\n<p>Output:</p>\n\n<blockquote>\n  <p>\"13:45:20\"</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nery Jr",
                        "user_id": 848937
                    },
                    "score": 2
                },
                {
                    "body": "<p>Here's a function I use a lot. The result is yyyy-mm-dd hh:mm:ss.nnn.</p>\n\n<pre><code>function date_and_time() {\n    var date = new Date();\n    //zero-pad a single zero if needed\n    var zp = function (val){\n        return (val &lt;= 9 ? '0' + val : '' + val);\n    }\n\n    //zero-pad up to two zeroes if needed\n    var zp2 = function(val){\n        return val &lt;= 99? (val &lt;=9? '00' + val : '0' + val) : ('' + val ) ;\n    }\n\n    var d = date.getDate();\n    var m = date.getMonth() + 1;\n    var y = date.getFullYear();\n    var h = date.getHours();\n    var min = date.getMinutes();\n    var s = date.getSeconds();\n    var ms = date.getMilliseconds();\n    return '' + y + '-' + zp(m) + '-' + zp(d) + ' ' + zp(h) + ':' + zp(min) + ':' + zp(s) + '.' + zp2(ms);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Carl",
                        "user_id": 13760
                    },
                    "score": 7
                },
                {
                    "body": "<h1>The Short Answer</h1>\n\n<p>There is no \u201cuniversal\u201d documentation that Javascript caters to; every browser that has Javascript, is really an implementation. However, there is a standard that most modern browsers tend to follow, and that\u2019s the EMCAScript standard; the ECMAScript standard strings would take, minimally, a modified implementation of the ISO 8601 definition. In addition to this, there is a second standard set forward by the IETF that browsers tend to follow as well, that is the definition for timestamps made in the RFC 2822. Actual documentation can be found in the references list at the bottom.</p>\n\n<p>From this you can expect basic functionality, but what \u201cought\u201d to be is not inherently what \u201cis\u201d. I\u2019m going to go a little in depth with this procedurally though, as it appears only three people actually answered the question (Scott, goofballLogic, and peller namely) which, to me, suggests most people are unaware of what actually happens when you create a Date object.</p>\n\n<hr />\n\n<h1>The Long Answer</h1>\n\n<blockquote>\n  <p>Where is the documentation which lists the format specifiers supported by the Date() object?</p>\n</blockquote>\n\n<p><br /></p>\n\n<p>To answer the question, or typically even look for the answer to this question, you need to know that Javascript is not a novel language; it\u2019s actually an implementation of ECMAScript, and follows the ECMAScript standards (but note, Javascript also actually pre-dated those standards; EMCAScript standards are built off the early implementation of Javascript). The current ECMAScript standard is 5.1 (2011); at the time that the question was originally asked (June \u201909), the standard was 3 (4 was abandoned), but 5 was released shortly after the post at the end of 2009. This should outline one problem; what standard Javascript may follow, may not reflect what is actually in place, because a) it\u2019s an implementation of a given standard, b) not all implementations of a standard are puritan, and c) functionality is not released in synchronization with a new standard as d) an implementation is a constant work in progress</p>\n\n<p>Essentially, when dealing with Javascript, you\u2019re dealing with a derivative (Javascript specific to the browser) of an implementation (Javascript itself). Google\u2019s V8, for example, implements ECMAScript 5.0, but Internet Explorer\u2019s JScript doesn\u2019t attempt to conform to any ECMAScript standard, yet IE9 does conform to ECMAScript 5.0.</p>\n\n<p>When a single argument is passed to new Date(), it casts this function prototype:</p>\n\n<pre><code>new Date(value)\n</code></pre>\n\n<p>When two or more arguments are passed to new Date(), it casts this function prototype:</p>\n\n<pre><code>new Date (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )\n</code></pre>\n\n<p><br />\nBoth of those functions should look familiar, but this does not immediately answer your question and what quantifies as an acceptable \u201cdate format\u201d requires further explanation. When you pass a string to new Date(), it will call the prototype (note that I'm using the word <em>prototype</em> loosely; the versions may be individual functions, or it may be part of a conditional statement in a single function) for <strong>new Date(value)</strong> with your string as the argument for the \u201cvalue\u201d parameter. This function will first check whether it is a number or a string. The documentation for this function can be found here:</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.3.2\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.3.2</a></p>\n</blockquote>\n\n<p>From this, we can deduce that to get the string formatting allowed for new Date(value), we have to look at the method Date.parse(string). The documentation for this method can be found here:</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.2\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.2</a></p>\n</blockquote>\n\n<p>And we can further infer that dates are expected to be in a modified ISO 8601 Extended Format, as specified here:</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15</a></p>\n</blockquote>\n\n<p>However, we can recognize from experience that Javascript\u2019s Date object accepts other formats (enforced by the existence of this question in the first place), and this is okay because ECMAScript allows for implementation specific formats. However, that still doesn\u2019t answer the question of what documentation is available on the available formats, nor what formats are actually allowed. We\u2019re going to look at Google\u2019s Javascript implementation, V8; please note I\u2019m not suggesting this is the \u201cbest\u201d JS engine (how can one define \u201cbest\u201d or even \u201cgood\u201d) and one cannot assume that the formats allowed in V8 represent all formats available today, but I think it\u2019s fair to assume they do follow modern expectations.</p>\n\n<blockquote>\n  <p>Google\u2019s V8, date.js, DateConstructor</p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#141\">https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#141</a></p>\n</blockquote>\n\n<p>Looking at the DateConstructor function, we can we can deduce we need to find the DateParse function; however, note that \u201cyear\u201d is not the actual year and is only a reference to the \u201cyear\u201d parameter.  </p>\n\n<blockquote>\n  <p>Google\u2019s V8, date.js, DateParse</p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#270\">https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#270</a></p>\n</blockquote>\n\n<p>This calls %DateParseString, which is actually a run-time function reference for a C++ function. It refers to the following code:</p>\n\n<blockquote>\n  <p>Google\u2019s V8, runtime.cc, %DateParseString</p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/runtime.cc?r=18400#9559\">https://code.google.com/p/v8/source/browse/trunk/src/runtime.cc?r=18400#9559</a></p>\n</blockquote>\n\n<p>The function call we\u2019re concerned with in this function is for DateParser::Parse(); ignore the logic surrounding those function calls, these are just checks to conform to the encoding type (ASCII and UC16). DateParser::Parse is defined here:</p>\n\n<blockquote>\n  <p>Google's V8, dateparser-inl.h, DateParser::Parse</p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/dateparser-inl.h?r=18400#36\">https://code.google.com/p/v8/source/browse/trunk/src/dateparser-inl.h?r=18400#36</a></p>\n</blockquote>\n\n<p>This is the function that actually defines what formats it accepts. Essentially, it checks for the EMCAScript 5.0 ISO 8601 standard and if it is not standards compliant, then it will attempt to build the date based on legacy formats. A few key points based on the comments:</p>\n\n<ol>\n<li>Words before the first number that are unknown to the parser are ignored.</li>\n<li>Parenthesized text are ignored.</li>\n<li>Unsigned numbers followed by \u201c:\u201d are interpreted as a \u201ctime component\u201d. </li>\n<li>Unsigned numbers followed by \u201c.\u201d are interpreted as a \u201ctime component\u201d, and must be followed by milliseconds.</li>\n<li>Signed numbers followed by the hour or hour minute (e.g. +5:15 or +0515) are interpreted as the timezone. </li>\n<li>When declaring the hour and minute, you can use either \u201chh:mm\u201d or \u201chhmm\u201d.</li>\n<li>Words that indicate a time zone are interpreted as a time zone.</li>\n<li>All other numbers are interpreted as \u201cdate components\u201d.</li>\n<li>All words that start with the first three digits of a month are interpreted as the month.</li>\n<li>You can define minutes and hours together in either of the two formats: \u201chh:mm\u201d or \u201chhmm\u201d.</li>\n<li>Symbols like \u201c+\u201d, \u201c-\u201c and unmatched \u201c)\u201d are not allowed after a number has been processed.</li>\n<li>Items that match multiple formats (e.g. 1970-01-01) are processed as a standard compliant EMCAScript 5.0 ISO 8601 string.</li>\n</ol>\n\n<p>So this should be enough to give you a basic idea of what to expect when it comes to passing a string into a Date object. You can further expand upon this by looking at the following specification that Mozilla points to on the Mozilla Developer Network (compliant to the IETF RFC 2822 timestamps):</p>\n\n<blockquote>\n  <p><a href=\"http://tools.ietf.org/html/rfc2822#page-14\">http://tools.ietf.org/html/rfc2822#page-14</a></p>\n</blockquote>\n\n<p>The Microsoft Developer Network additionally mentions an additional standard for the Date object: ECMA-402, the ECMAScript Internationalization API Specification, which is complementary to the ECMAScript 5.1 standard (and future ones). That can be found here:</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-402/1.0/\">http://www.ecma-international.org/ecma-402/1.0/</a></p>\n</blockquote>\n\n<p>In any case, this should aid in highlighting that there is no \"documentation\" that universally represents all implementations of Javascript, but there is still enough documentation available to make reasonable sense of what strings are acceptable for a Date object. Quite the loaded question when you think about it, yes? :P</p>\n\n<blockquote>\n  <p><strong>References</strong></p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.3.2\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.3.2</a></p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.2\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.2</a></p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15</a></p>\n  \n  <p><a href=\"http://tools.ietf.org/html/rfc2822#page-14\">http://tools.ietf.org/html/rfc2822#page-14</a></p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-402/1.0/\">http://www.ecma-international.org/ecma-402/1.0/</a></p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#141\">https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#141</a></p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#270\">https://code.google.com/p/v8/source/browse/trunk/src/date.js?r=18400#270</a></p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/runtime.cc?r=18400#9559\">https://code.google.com/p/v8/source/browse/trunk/src/runtime.cc?r=18400#9559</a></p>\n  \n  <p><a href=\"https://code.google.com/p/v8/source/browse/trunk/src/dateparser-inl.h?r=18400#36\">https://code.google.com/p/v8/source/browse/trunk/src/dateparser-inl.h?r=18400#36</a></p>\n  \n  <p><strong>Resources</strong></p>\n  \n  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p>\n  \n  <p><a href=\"http://msdn.microsoft.com/en-us/library/ff743760(v=vs.94).aspx\">http://msdn.microsoft.com/en-us/library/ff743760(v=vs.94).aspx</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sg&#39;te&#39;gmuj",
                        "user_id": 3125685
                    },
                    "score": 78
                },
                {
                    "body": "<p><a href=\"https://rawgithub.com/minagabriel/dtmFRM/master/dtmFRM.js\" rel=\"nofollow\">dtmFRM.js</a></p>\n\n<p>if you are familiar with <code>C#</code> Custom Date and Time Format String this library should do the exact same thing.</p>\n\n<p><a href=\"http://jsfiddle.net/minagabriel/7sN5k/\" rel=\"nofollow\">DEMO</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mina Gabriel",
                        "user_id": 1410185
                    },
                    "score": 0
                },
                {
                    "body": "<p>I was unable to find any definitive documentation on valid date formats so I wrote my own test to see what is supported in various browsers.</p>\n\n<p><a href=\"http://blarg.co.uk/blog/javascript-date-formats\" rel=\"nofollow\">http://blarg.co.uk/blog/javascript-date-formats</a></p>\n\n<p>My results concluded the following formats are valid in all browsers that I tested (examples use the date \"9th August 2013\"):</p>\n\n<p><strong>[Full Year]/[Month]/[Date number]</strong> - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero.</p>\n\n<ul>\n<li>2013/08/09</li>\n<li>2013/08/9</li>\n<li>2013/8/09</li>\n<li>2013/8/9</li>\n<li>2013/August/09</li>\n<li>2013/August/9</li>\n<li>2013/Aug/09</li>\n<li>2013/Aug/9</li>\n</ul>\n\n<p><strong>[Month]/[Full Year]/[Date Number]</strong> - Month can be either the number with or without a leading zero or the month name in short or long format, and date number can be with or without a leading zero. </p>\n\n<ul>\n<li>08/2013/09</li>\n<li>08/2013/9</li>\n<li>8/2013/09</li>\n<li>8/2013/9</li>\n<li>August/2013/09</li>\n<li>August/2013/9</li>\n<li>Aug/2013/09</li>\n<li>Aug/2013/9</li>\n</ul>\n\n<p><strong>Any combination of [Full Year], [Month Name] and [Date Number] separated by spaces</strong> - Month name can be in either short or long format, and date number can be with or without a leading zero. </p>\n\n<ul>\n<li>2013 August 09</li>\n<li>August 2013 09</li>\n<li>09 August 2013</li>\n<li>2013 Aug 09</li>\n<li>Aug 9 2013</li>\n<li>2013 9 Aug</li>\n<li>etc...</li>\n</ul>\n\n<p>Also valid in \"modern browsers\" (or in other words all browsers except IE9 and below)</p>\n\n<p><strong>[Full Year]-[Month Number]-[Date Number]</strong> - Month and Date Number must include leading zeros (this is the format that the <a href=\"https://dev.mysql.com/doc/refman/5.1/en/datetime.html\" rel=\"nofollow\">MySQL Date type</a> uses) </p>\n\n<ul>\n<li>2013-08-09</li>\n</ul>\n\n<p><strong>Using month names:</strong><br>\nInterestingly, when using month names I discovered that only the first 3 characters of the month name are ever used so all the of the following are perfectly valid:</p>\n\n<pre><code>new Date('9 August 2013');\nnew Date('9 Aug 2013');\nnew Date('9 Augu 2013');\nnew Date('9 Augustagfsdgsd 2013');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pete Newnham",
                        "user_id": 2182482
                    },
                    "score": 2
                },
                {
                    "body": "<p>You may find useful this modification of date object, which is smaller than any library and is easily extendable to support different formats:</p>\n\n<p><strong>NOTE:</strong></p>\n\n<ul>\n<li>It uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\">Object.keys()</a> which is undefined in older browsers so you may need implement polyfill from given link.</li>\n</ul>\n\n<p><strong>CODE</strong></p>\n\n<pre><code>Date.prototype.format = function(format) {\n    // set default format if function argument not provided\n    format = format || 'YYYY-MM-DD hh:mm';\n\n    var zeropad = function(number, length) {\n            number = number.toString();\n            length = length || 2;\n            while(number.length &lt; length)\n                number = '0' + number;\n            return number;\n        },\n        // here you can define your formats\n        formats = {\n            YYYY: this.getFullYear(),\n            MM: zeropad(this.getMonth() + 1),\n            DD: zeropad(this.getDate()),\n            hh: zeropad(this.getHours()),\n            mm: zeropad(this.getMinutes())\n        },\n        pattern = '(' + Object.keys(formats).join(')|(') + ')';\n\n    return format.replace(new RegExp(pattern, 'g'), function(match) {\n        return formats[match];\n    });\n};\n</code></pre>\n\n<p><strong>USE</strong></p>\n\n<pre><code>var now = new Date;\nconsole.log(now.format());\n// outputs: 2015-02-09 11:47\nvar yesterday = new Date('2015-02-08');\nconsole.log(yesterday.format('hh:mm YYYY/MM/DD'));\n// outputs: 00:00 2015/02/08\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vaclav",
                        "user_id": 2508019
                    },
                    "score": 1
                }
            ],
            "body": "<p>I noticed that JavaScript's <code>new Date()</code> function is very smart in accepting dates in several formats.</p>\n\n<pre><code>Xmas95 = new Date(\"25 Dec, 1995 23:15:00\")\nXmas95 = new Date(\"2009 06 12,12:52:39\")\nXmas95 = new Date(\"20 09 2006,12:52:39\")\n</code></pre>\n\n<p>I could not find documentation anywhere showing all the valid string formats while calling <code>new Date()</code> function.</p>\n\n<p>This is for converting a string to date. If we look at the opposite side that is converting date object to string, until now I was under the impression that JavaScript doesn't have a built-in API to format a date object into a string.</p>\n\n<blockquote>\n  <p><strong>Editor's note:</strong> The following approach is the asker's attempt that worked on a particular browser but does <em>not</em> work in general; <strong>see the answers on this page</strong> to see some actual solutions.</p>\n</blockquote>\n\n<p>Today, I played with the <code>toString()</code> method on the date object and surprisingly it serves the purpose of formatting date to strings.</p>\n\n<pre><code>var d1=new Date();\nd1.toString('yyyy-MM-dd');       //returns \"2009-06-29\" in IE, but not FF or Chrome\nd1.toString('dddd, MMMM ,yyyy')  //returns \"Monday, June 29,2009\" in IE, but not FF or Chrome\n</code></pre>\n\n<p>Also here I couldn't find any documentation on all the ways we can format the date object into a string.</p>\n\n<p>Where is the documentation which lists the format specifiers supported by the <code>Date()</code> object?</p>\n",
            "last_activity_date": 1423479114,
            "owner": {
                "display_name": "Naga Kiran",
                "user_id": 65670
            },
            "question_id": 1056728,
            "score": 840,
            "tags": [
                "javascript",
                "datetime",
                "date"
            ],
            "title": "Where can I find documentation on formatting a date in JavaScript"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The element you were trying to find wasn\u2019t in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\" rel=\"nofollow\">DOM</a> when your script ran.</p>\n\n<p>The position of your DOM-reliant script can have a profound effect upon its behavior. The document is parsed from top to bottom. Elements are added to the DOM and scripts are executed as they're encountered. <strong>This means that order matters.</strong> Typically, scripts can't find elements which appear later in the markup because those elements haven't yet been added to the DOM.</p>\n\n<p>Consider the following markup (<a href=\"http://jsfiddle.net/antisanity/e9J9G/15/\" rel=\"nofollow\">fiddle</a>); the first <code>&lt;script&gt;</code> fails to find the <code>&lt;div&gt;</code> while the second <code>&lt;script&gt;</code> succeeds:</p>\n\n<pre><code>&lt;script&gt;\n    console.log(document.getElementById(\"test-div\")); // null\n&lt;/script&gt;\n\n<b>&lt;div id=\"test-div\"&gt;test div&lt;/div&gt;</b>\n\n&lt;script&gt;\n    console.log(document.getElementById(\"test-div\")); // &lt;div id=\"test-div\"&gt;...\n&lt;/script&gt;</code></pre>\n\n<p>So, what should you do? You've got a few options:</p>\n\n<hr>\n\n<h1>Option 1: Move your script</h1>\n\n<p>Move your script further down the page, just before the closing body tag. Organized in this fashion, the rest of the document is parsed before your script is executed (<a href=\"http://jsfiddle.net/9m3gF/show/\" rel=\"nofollow\">sample</a>):</p>\n\n<pre><code>        &lt;a class=\"menu_show\"&gt;test&lt;/a&gt;\n        &lt;script&gt;\n             $(\".menu_show\").click(function(){\n                 alert(\"test\");\n             });\n        &lt;/script&gt;\n    <b>&lt;/body&gt;</b> &lt;!-- closing body tag --&gt;\n&lt;/html&gt;</code></pre>\n\n<p><sub>Note: Placing scripts at the bottom is generally considered a <a href=\"http://developer.yahoo.com/performance/rules.html#js_bottom\" rel=\"nofollow\">best practice</a>.</sub></p>\n\n<hr>\n\n<h1>Option 2: jQuery's <code>ready()</code></h1>\n\n<p>Defer your script until the DOM has been completely parsed, using <a href=\"http://api.jquery.com/ready/\" rel=\"nofollow\"><code>ready()</code></a> (<a href=\"http://jsfiddle.net/q9JZf/show/\" rel=\"nofollow\">sample</a>):</p>\n\n<pre><code>$(document).<b>ready</b>(function(){    \n    $(\".menu_show\").click(function () {\n        alert('Works!');\n    });\n});</code></pre>\n\n<p><sub>Note: You could simply bind to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded\" rel=\"nofollow\"><code>DOMContentLoaded</code></a> or  <code>window.<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.onload?redirect=no\" rel=\"nofollow\">onload</a></code> but each has its caveats. jQuery's <a href=\"http://api.jquery.com/ready/\" rel=\"nofollow\"><code>ready()</code></a> delivers a hybrid solution.</sub></p>\n\n<hr>\n\n<h1>Option 3: Event Delegation</h1>\n\n<blockquote>\n  <p><a href=\"http://api.jquery.com/on/#direct-and-delegated-events\" rel=\"nofollow\">Delegated events</a> have the advantage that they can process events from descendant elements that are added to the document at a later time.</p>\n</blockquote>\n\n<p>When an element raises an event (provided that it's a <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling\" rel=\"nofollow\">bubbling</a> event and nothing stops its propagation), each parent in that element's ancestry receives the event as well. That allows us to attach a handler to an existing element and sample events as they bubble up from its descendants. Descendants added at a later time will send their events up to the handler waiting on the parent. All we have to do is check the event to see whether it was raised by the desired element and, if so, run our code. </p>\n\n<p>jQuery's <a href=\"http://api.jquery.com/on/\" rel=\"nofollow\"><code>on()</code></a> performs that logic for us. We simply provide an event name, a selector for the desired descendant, and an event handler (<a href=\"http://jsfiddle.net/antisanity/Dn2W8/\" rel=\"nofollow\">sample</a>):</p>\n\n<pre><code>&lt;script&gt;\n    $(document).on(\"click\", <b>\"#test-div\"</b>, function(e) {\n        alert(this.innerHTML);\n    });\n&lt;/script&gt;\n&lt;div id=\"test-div\"&gt;test div&lt;/div&gt;</code></pre>\n\n<p><sub>Note: Typically, this pattern is reserved for elements which didn't exist at load-time <em>or</em> to avoid attaching a large amount of handlers. In your particular case, <strong>Option 1</strong> and <strong>Option 2</strong> are more appropriate. It's also worth pointing out that while I've attached a handler to <code>document</code> (for demonstrative purposes), you should select the nearest reliable ancestor.</sub></p>\n\n<hr>\n\n<h1>Option 4: The <code>defer</code> attribute</h1>\n\n<p>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer\" rel=\"nofollow\"><code>defer</code></a> attribute of <code>&lt;script&gt;</code> (<a href=\"http://jsfiddle.net/antisanity/zV7v3/\" rel=\"nofollow\">sample</a>)</p>\n\n<blockquote>\n  <p>[<code>defer</code>, a Boolean attribute,] is set to indicate to a browser that the script is meant to be executed after the document has been parsed.</p>\n</blockquote>\n\n<pre><code>&lt;script src=\"js/some-script.js\" <b>defer</b>&gt;&lt;/script&gt;</code></pre>\n\n<p><sub>Note: this certainly <em>seems</em> like a magic bullet <em>but</em> it's important to be aware of the caveats...<br>\n1. <code>defer</code> can only be used for external scripts, i.e.: those having a <code>src</code> attribute.<br>\n2. be aware of <a href=\"http://caniuse.com/script-defer\" rel=\"nofollow\">browser support</a>, i.e.: buggy implementation in IE &lt; 10</sub></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "canon",
                        "user_id": 621962
                    },
                    "score": 115
                },
                {
                    "body": "<p><strong>Short and simple:</strong> Because the elements you are looking for do not exist in the document (yet).</p>\n\n<hr>\n\n<p><em>For the remainder of this answer I will use <code>getElementById</code> as example, but the same applies to <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagName\"><code>getElementsByTagName</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/DOM/Document.querySelector\"><code>querySelector</code></a> and any other DOM method that selects elements.</em></p>\n\n<p><strong>Possible Reasons</strong></p>\n\n<p>There are two reasons why an element might not exist:</p>\n\n<ol>\n<li><p>An element with the passed ID really does not exist in the document. You should double check that the ID you pass to <code>getElementById</code> really matches an ID of an existing element in the (generated) HTML and that you have not <em>misspelled</em> the ID.</p>\n\n<p>Incidentally, in the <a href=\"http://caniuse.com/queryselector\">majority of contemporary browsers</a>, which implement <code>querySelector()</code> and <code>querySelectorAll()</code> methods, CSS-style notation is used to retrieve an element by its <code>id</code>, for example: <code>document.querySelector('#elementID')</code>, as opposed to the method by which an element is retrieved by its <code>id</code> under <code>document.getElementById('elementID')</code>; in the first the <code>#</code> character is essential, in the second it would lead to the element not being retrieved.</p></li>\n<li><p>The element does not exist <em>at the moment</em> you call <code>getElementById</code>.</p></li>\n</ol>\n\n<p>The latter case is quite common. Browsers parse and process the HTML from top to bottom. That means that any call to a DOM element which occurs before that DOM element appears in the HTML, will fail.</p>\n\n<p>Consider the following example:</p>\n\n<pre><code>&lt;script&gt;\n    var element = document.getElementById('my_element');\n&lt;/script&gt;\n\n&lt;div id=\"my_element\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>The <code>div</code> appears <em>after</em> the <code>script</code>. At the moment the script is executed, the element does not exist <em>yet</em> and <code>getElementById</code> will return <code>null</code>.</p>\n\n<p><strong>jQuery</strong></p>\n\n<p>The same applies to all selectors with jQuery. jQuery won't find elements if you <em>misspelled</em> your selector or you are trying to select them <em>before they actually exist</em>.</p>\n\n<p>An added twist is when jQuery is not found because you have loaded the script without protocol and are running from file system:</p>\n\n<pre><code>&lt;script src=\"//somecdn.somewhere.com/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>this syntax is used to allow the script to load via HTTPS on a page with protocol https:// and to load the HTTP version on a page with protocol http://</p>\n\n<p>It has the unfortunate side effect of attempting and failing to load <code>file://somecdn.somewhere.com...</code></p>\n\n<hr>\n\n<p><strong>Solutions</strong></p>\n\n<p>Before you make a call to <code>getElementById</code> (or any DOM method for that matter), make sure the elements you want to access exist, i.e. the DOM is loaded.</p>\n\n<p>This can be ensured by simply putting your JavaScript <em>after</em> the corresponding DOM element</p>\n\n<pre><code>&lt;div id=\"my_element\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    var element = document.getElementById('my_element');\n&lt;/script&gt;\n</code></pre>\n\n<p>in which case you can also put the code just before the closing body tag (<code>&lt;/body&gt;</code>) (all DOM elements will be available at the time the script is executed).</p>\n\n<p>Other solutions include listening to the <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.onload\"><code>load</code> <em><sup>[MDN]</sup></em></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla_event_reference/DOMContentLoaded_%28event%29\"><code>DOMContentLoaded</code> <em><sup>[MDN]</sup></em></a> events. In these cases it does not matter where in the document you place the JavaScript code, you just have to remember to put all DOM processing code in the event handlers.</p>\n\n<p>Example:</p>\n\n<pre><code>window.onload = function() {\n    // process DOM elements here\n};\n\n// or\n\n// does not work IE 8 and below\ndocument.addEventListener('DOMContentLoaded', function() {\n    // process DOM elements here\n});\n</code></pre>\n\n<p>Please see the <a href=\"http://www.quirksmode.org/js/introevents.html\">articles at quirksmode.org</a> for more information regarding event handling and browser differences.</p>\n\n<p><strong>jQuery</strong></p>\n\n<p>First make sure that jQuery is loaded properly. <a href=\"http://www.netmagazine.com/tutorials/javascript-debugging-beginners\">Use the browser's developer tools</a> to find out whether the jQuery file was found and correct the URL if it wasn't (e.g. add the <code>http:</code> or <code>https:</code> scheme at the beginning, adjust the path, etc.)</p>\n\n<p>Listening to the <code>load</code>/<code>DOMContentLoaded</code>  events is exactly what jQuery is doing with <a href=\"http://api.jquery.com/ready/\"><code>.ready()</code> <em><sup>[docs]</sup></em></a>. All your jQuery code that affects DOM element should be inside that event handler.</p>\n\n<p>In fact, the <a href=\"http://docs.jquery.com/Tutorials%3aGetting_Started_with_jQuery\">jQuery tutorial</a> explicitly states:</p>\n\n<blockquote>\n  <p>As almost everything we do when using jQuery reads or manipulates the document object model (DOM), we need to make sure that we start adding events etc. as soon as the DOM is ready.</p>\n  \n  <p>To do this, we register a ready event for the document.</p>\n\n<pre><code>$(document).ready(function() {\n   // do stuff when DOM is ready\n});\n</code></pre>\n</blockquote>\n\n<p>Alternatively you can also use the shorthand syntax:</p>\n\n<pre><code>$(function() {\n    // do stuff when DOM is ready\n});\n</code></pre>\n\n<p>Both are equivalent.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Felix Kling",
                        "user_id": 218196
                    },
                    "score": 64
                },
                {
                    "body": "<p>As @FelixKling pointed out, the most likely scenario is that the nodes you are looking for do not exist (yet).</p>\n\n<p>However, modern development practices can often manipulate document elements outside of the document tree either with DocumentFragments or simply detaching/reattaching current elements directly.  Such techniques may be used as part of JavaScript templating or to avoid excessive repaint/reflow operations while the elements in question are being heavily altered.</p>\n\n<p>Similarly, the new \"Shadow DOM\" functionality being rolled out across modern browsers allows elements to be part of the document, but not query-able by document.getElementById and all of its sibling methods (querySelector, etc.). This is done to encapsulate functionality and specifically hide it.</p>\n\n<p>Again, though, it is most likely that the element you are looking for simply is not (yet) in the document, and you should do as Felix suggests. However, you should also be aware that that is increasingly not the only reason that an element might be unfindable (either temporarily or permanently).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nathan Bubna",
                        "user_id": 8131
                    },
                    "score": 3
                },
                {
                    "body": "<p><strong>Reasons why id based selectors don't work</strong></p>\n\n<ol>\n<li>element/DOM with id specified doesn't exist yet.</li>\n<li>element exist but is not registered in DOM [in case of HTML nodes appended dynamically from ajax responses]</li>\n<li>more than one elements with same id are present which is causing conflict.</li>\n</ol>\n\n<p><strong>solutions</strong></p>\n\n<ol>\n<li><p>try to access element after its declaration or alternatively use stuff like <code>$(document).ready();</code></p></li>\n<li><p>for elements coming from ajax responses, use <code>.bind()</code> method of jquery, older versions of jquery had <code>.live()</code> for the same.</p></li>\n<li><p>use tools [eg webdeveloper plugin for browsers] to find duplicate ids and remove them. </p></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sumit",
                        "user_id": 842050
                    },
                    "score": 3
                }
            ],
            "body": "<p>What are the possible reasons for <code>document.getElementById</code>, <code>$(\"#id\")</code> or any other DOM method / jQuery selector not finding the elements?</p>\n",
            "last_activity_date": 1426771137,
            "owner": {
                "display_name": "Felix Kling",
                "user_id": 218196
            },
            "question_id": 14028959,
            "score": 85,
            "tags": [
                "javascript",
                "jquery",
                "dom"
            ],
            "title": "Why does jQuery or a DOM method such as getElementById not find the element?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<h2>What you should know about <code>this</code></h2>\n\n<p><code>this</code> (aka \"the context\") is a special keyword inside each function and its value only depends on <em>how</em> the function was called, not how/when/where it was defined. It is not affected by lexical scope, like other variables. Here are some examples:</p>\n\n<pre><code>function foo() {\n    console.log(this);\n}\n\n// normal function call\nfoo(); // `this` will refer to `window`\n\n// as object method\nvar obj = {bar: foo};\nobj.bar(); // `this` will refer to `obj`\n\n// as constructor function\nnew foo(); // `this` will refer to an object that inherits from `foo.prototype`\n</code></pre>\n\n<p>To learn more about <code>this</code>, have a look at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">MDN documentation</a>.</p>\n\n<hr>\n\n<h2>How to refer to the correct <code>this</code></h2>\n\n<h3>Don't use <code>this</code></h3>\n\n<p>You actually don't want to access <code>this</code> in particular, but <em>the object it refers to</em>. That's why an easy solution is to simply create a new variable that also refers to that object. The variable can have any name, but common ones are <code>self</code> and <code>that</code>.</p>\n\n<pre><code>function MyConstructor(data, transport) {\n    this.data = data;\n    var self = this;\n    transport.on('data', function() {\n        alert(self.data);\n    });\n}\n</code></pre>\n\n<p>Since <code>self</code> is a normal variable, it obeys lexical scope rules and is accessible inside the callback.</p>\n\n<h3>Explicitly set <code>this</code> of the callback - part 1</h3>\n\n<p>It might look like you have no control over the value of <code>this</code>, because its value is set automatically, but that is actually not the case. </p>\n\n<p>Every function has the method <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>.bind</code> <em><sup>[docs]</sup></em></a>, which returns a new function with <code>this</code> bound to a value. The function has exactly the same behavior as the one you called <code>.bind</code> on, only that <code>this</code> was set by you. No matter how or when that function is called, <code>this</code> will always refer to the passed value.</p>\n\n<pre><code>function MyConstructor(data, transport) {\n    this.data = data;\n    var boundFunction = (function() { // parenthesis are not necessary\n        alert(this.data);             // but might improve readability\n    }).bind(this); // &lt;- here we are calling `.bind()` \n    transport.on('data', boundFunction);\n}\n</code></pre>\n\n<p>In this case, we are binding the callback's <code>this</code> to the value of <code>MyConstructor</code>'s <code>this</code>.</p>\n\n<p><strong>Note:</strong> When binding context for jQuery, use <a href=\"http://api.jquery.com/jQuery.proxy/\"><code>jQuery.proxy</code> <em><sup>[docs]</sup></em></a> instead. The reason to do this is so that you don't need to store the reference to the function when unbinding an event callback. jQuery handles that internally. </p>\n\n<h3>ECMAScript 6: Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a></h3>\n\n<p>ECMASCript 6 introduces <em>arrow functions</em>, which can be thought of as lambda functions. They don't have their own <code>this</code> binding. Instead, <code>this</code> is looked up in scope just like a normal variable. That means you don't have to call <code>.bind</code>. That's not the only special behavior they have, please refer to the MDN documentation for more information. </p>\n\n<pre><code>function MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data', () =&gt; alert(this.data));\n}\n</code></pre>\n\n<h3>Set <code>this</code> of the callback - part 2</h3>\n\n<p>Some functions/methods which accept callbacks also accept a value to which the callback's <code>this</code> should refer to. This is basically the same as binding it yourself, but the function/method does it for you. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array#map</code> <em><sup>[docs]</sup></em></a> is such a method. Its signature is:</p>\n\n<pre><code>array.map(callback[, thisArg])\n</code></pre>\n\n<p>The first argument is the callback and the second argument is the value <code>this</code> should refer to. Here is a contrived example:</p>\n\n<pre><code>var arr = [1, 2, 3];\nvar obj = {multipler: 42};\n\nvar new_arr = arr.map(function(v) {\n    return v * this.multiplier;\n}, obj); // &lt;- here we are passing `obj` as second argument\n</code></pre>\n\n<p><strong>Note:</strong> Whether or not you can pass a value for <code>this</code> is usually mentioned in the documentation of that function/method. For example, <a href=\"http://api.jquery.com/jQuery.ajax/\">jQuery's <code>$.ajax</code> method <em><sup>[docs]</sup></em></a> describes an option called <code>context</code>:</p>\n\n<blockquote>\n  <p>This object will be made the context of all Ajax-related callbacks.</p>\n</blockquote>\n\n<hr>\n\n<h2>Common problem: Using object methods as callbacks / event handlers</h2>\n\n<p>Another common manifestation of this problem is when an object method is used as callback / event handler. Functions are first class citizens in JavaScript and the term \"method\" is just a colloquial term for a function that is a value of an object property. But that function doesn't have a specific link to its \"containing\" object.</p>\n\n<p>Consider the following example:</p>\n\n<pre><code>function Foo() [\n    this.data = 42,\n    document.body.onclick = this.method;\n}\n\nFoo.prototype.method = function() {\n    console.log(this.data);\n};\n</code></pre>\n\n<p>The function <code>this.method</code> is assigned as click event handler, but if the body is clicked, the value logged will be <code>undefined</code>, because inside the event handler, <code>this</code> refers to the body, not the instance of <code>Foo</code>.<br>\nAs already mentioned at the beginning, what <code>this</code> refers to depends on how the function is <strong>called</strong>, not how it is <strong>defined</strong>.<br>\nIf the code was like the following, it might be more obvious that the function doesn't have an implicit reference to the object:</p>\n\n<pre><code>function method() {\n    console.log(this.data);\n}\n\n\nfunction Foo() [\n    this.data = 42,\n    document.body.onclick = this.method;\n}\n\nFoo.prototype.method = method;\n</code></pre>\n\n<p><strong>The solution</strong> is the same as mentioned above: If available, use <code>.bind</code> to explicitly bind <code>this</code> to a specific value</p>\n\n<pre><code>document.body.onclick = this.method.bind(this);\n</code></pre>\n\n<p>or explicitly call the function as a \"method\" of the object, by using an anonymous function has callback / event handler and assign the object (<code>this</code>) to another variable:</p>\n\n<pre><code>var self = this;\ndocument.body.onclick = function() {\n    self.method();\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Felix Kling",
                        "user_id": 218196
                    },
                    "score": 78
                },
                {
                    "body": "<pre><code>function MyConstructor(name, transport) {\n    var that = this;\n    that.name = name;\n    transport.on('data', function() {\n        alert(that.name);\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tyagi",
                        "user_id": 1653936
                    },
                    "score": 1
                },
                {
                    "body": "<p>It's all in the \"magic\" syntax of calling a method:</p>\n\n<pre><code>object.property();\n</code></pre>\n\n<p>When you get the property from the object and call it in one go, the object will be the context for the method. If you call the same method, but in separate steps, the context is the global scope (window) instead:</p>\n\n<pre><code>var f = object.property;\nf();\n</code></pre>\n\n<p>When you get the reference of a method, it's no longer attached to the object, it's just a reference to a plain function. The same happens when you get the reference to use as a callback:</p>\n\n<pre><code>this.saveNextLevelData(this.setAll);\n</code></pre>\n\n<p>That's where you would bind the context to the function:</p>\n\n<pre><code>this.saveNextLevelData(this.setAll.bind(this));\n</code></pre>\n\n<p>If you are using jQuery you should use the <code>$.proxy</code> method instead, as <code>bind</code> is not supported in all browsers:</p>\n\n<pre><code>this.saveNextLevelData($.proxy(this.setAll, this));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Guffa",
                        "user_id": 69083
                    },
                    "score": 4
                },
                {
                    "body": "<h3>The trouble with \"context\"</h3>\n\n<p>The term \"context\" is sometimes used to refer to the object referenced by <em>this</em>. It's use is inappropriate because it doesn't fit either semantically or technically with <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-10.3\" rel=\"nofollow\">ECMAScript's <em>this</em></a>.</p>\n\n<p><a href=\"http://www.oxforddictionaries.com/definition/english/context\" rel=\"nofollow\">\"Context\"</a> means the circumstances surrounding something that adds meaning, or some preceding and following information that gives extra meaning. The term \"context\" is used in ECMAScript to refer to <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-10.3\" rel=\"nofollow\"><em>execution context</em></a>, which is all the parameters, scope and <em>this</em> within the  scope of some executing code.</p>\n\n<p>This is shown in <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-10.4.2\" rel=\"nofollow\">ECMA-262 section 10.4.2</a>:</p>\n\n<blockquote>\n  <p>Set the ThisBinding to the same value as the ThisBinding of the\n  calling execution context</p>\n</blockquote>\n\n<p>which clearly indicates that <em>this</em> is part of an execution context.</p>\n\n<p>An execution context provides the surrounding information that adds meaning to code that is being executed. It includes much more information that just the <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-11.1.1\" rel=\"nofollow\"><em>thisBinding</em></a>.</p>\n\n<p>So the value of <em>this</em> isn't \"context\", it's just one part of an execution context. It's essentially a local variable that can be set by the call to any object and in strict mode, to any value at all. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "RobG",
                        "user_id": 257182
                    },
                    "score": 2
                }
            ],
            "body": "<p>I have a constructor function which registers an event handler:</p>\n\n<pre><code>function MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data', function() {\n        alert(this.data);\n    });\n}\n\n// called as\nvar obj = new MyConstructor('foo', transport);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Lt62L/\">jsFiddle demo</a></p>\n\n<p>However, I'm not able to access the <code>data</code> property of the created object inside the callback. It looks like <code>this</code> does not refer to the object that was created but to an other one.</p>\n\n<p>I also tried to use an object method instead of an anonymous function:</p>\n\n<pre><code>function MyConstructor(data, transport) {\n    this.data = data;\n    transport.on('data', this.alert);\n}\n\nMyConstructor.prototype.alert = function() {\n    alert(this.name);\n};\n</code></pre>\n\n<p>but it exhibits the same problems.</p>\n\n<p>How can I access the correct object?</p>\n",
            "last_activity_date": 1426780075,
            "owner": {
                "display_name": "Felix Kling",
                "user_id": 218196
            },
            "question_id": 20279484,
            "score": 32,
            "tags": [
                "javascript",
                "callback",
                "this"
            ],
            "title": "How to access the correct `this` / context inside a callback?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can hang a lot of functions on the <code>onClick</code> event for one element. How can you be sure the <code>false</code> one will be the last one to fire? <code>preventDefault</code> on the other hand will definitely prevent only the default behavior of the element.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eldar Djafarov",
                        "user_id": 94428
                    },
                    "score": 22
                },
                {
                    "body": "<p>I think</p>\n\n<p><code>event.preventDefault()</code></p>\n\n<p>is the w3c specified way of canceling events.</p>\n\n<p>You can read this in the W3C spec on <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation\" rel=\"nofollow\">Event cancelation</a>.</p>\n\n<p>Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "rahul",
                        "user_id": 47738
                    },
                    "score": 16
                },
                {
                    "body": "<p><code>return false</code> from <em>within a jQuery event handler</em> is effectively the same as calling both  <code>e.preventDefault</code> and <code>e.stopPropagation</code> on the passed <a href=\"http://api.jquery.com/category/events/event-object/\">jQuery.Event object.</a></p>\n\n<p><code>e.preventDefault()</code> will prevent the default event from occuring, <code>e.stopPropagation()</code> will prevent the event from bubbling up and <code>return false</code> will do both. Note that this behaviour differs from <em>normal</em> (non-jQuery) event handlers, in which, notably, <code>return false</code> <a href=\"http://jsfiddle.net/APQk6/\">does <em>not</em> stop the event from bubbling up</a>.</p>\n\n<p>Source: <a href=\"http://ejohn.org/\">John Resig</a></p>\n\n<p><a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\">http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html</a></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "karim79",
                        "user_id": 70393
                    },
                    "score": 1568
                },
                {
                    "body": "<p>This is not, as you've titled it, a \"JavaScript\" question; it is a question regarding the design of jQuery, as indicated in <a href=\"http://stackoverflow.com/users/48015\">Christoph's</a> <a href=\"http://stackoverflow.com/questions/1357118/#comment1193919_1357151\">comment</a>.</p>\n\n<p>jQuery and the <a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\">previously linked citation</a> from <a href=\"http://ejohn.org\">John Resig</a> (in <a href=\"http://stackoverflow.com/users/70393\">karim79's</a> <a href=\"http://stackoverflow.com/questions/1357118/#1357151\">message</a>) seem to be the source misunderstanding of how event handlers in general work. </p>\n\n<p>Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.</p>\n\n<p>The following documentation from MDC explains how <code>return false</code> in an event handler works:\n<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action\">https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action</a></p>\n\n<p>What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE \"attached\" events are a different matter altogether. </p>\n\n<p>For further reading, see <a href=\"http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx\">attachEvent on MSDN</a> and the <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/\">W3C DOM 2 Events documentation</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Garrett",
                        "user_id": 261439
                    },
                    "score": 51
                },
                {
                    "body": "<p>From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.</p>\n\n<pre><code>$('a').click(function (e) {\n  // custom handling here\n\n  // oops...runtime error...where oh where will the href take me?\n\n  return false;\n});\n</code></pre>\n\n<p>The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).</p>\n\n<pre><code>$('a').click(function (e) {\n  e.preventDefault();\n\n  // custom handling here\n\n  // oops...runtime error, but at least the user isn't navigated away.\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jeff Poulton",
                        "user_id": 490006
                    },
                    "score": 253
                },
                {
                    "body": "<p>Generally, your first option (<code>preventDefault()</code>) is the one to take, but you have to know what context you're in and what your goals are. </p>\n\n<p><a href=\"http://fuelyourcoding.com/\" rel=\"nofollow\">Fuel Your Coding</a> has a great <a href=\"http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\" rel=\"nofollow\">article on <code>return false;</code> vs <code>event.preventDefault()</code> vs <code>event.stopPropagation()</code> vs <code>event.stopImmediatePropagation()</code></a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JAAulde",
                        "user_id": 239567
                    },
                    "score": 30
                },
                {
                    "body": "<p><code>return false</code> is doing 3 separate things when you call it:</p>\n\n<ol>\n<li><code>event.preventDefault();</code></li>\n<li><code>event.stopPropagation();</code></li>\n<li>Stops callback execution and returns immediately when called.</li>\n</ol>\n\n<p>See <a href=\"http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\">jQuery Events: Stop (Mis)Using Return False</a> for more information and examples.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "James Drinkard",
                        "user_id": 543572
                    },
                    "score": 30
                },
                {
                    "body": "<p>i think the best way to do is use preventDefault because if some exception raised in the handler then the return false statement will be skipped and the behavior will be opposite to what you want so it's better to use event.preventDefault() method</p>\n\n<p>but if sure that the code wont trigger any exceptions then u can go with any of the method by your wish.</p>\n\n<p>if u still want to go with the return false\nthen you can put your entire handler code in try catch block like below</p>\n\n<pre><code>$('a').click(function (e) {\n  try{\n      your code here.........\n  }\n   catch(e){}\n  return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Naga Srinu Kapusetti",
                        "user_id": 1676634
                    },
                    "score": 7
                },
                {
                    "body": "<p>My opinion from my experience saying that it is always better to use</p>\n\n<pre><code>event.preventDefault() \n</code></pre>\n\n<p>practically\n        to stop or prevent submit event whenever we required rather than</p>\n\n<pre><code>return false\n</code></pre>\n\n<p>event.preventDefault() works fine.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dilip0165",
                        "user_id": 2318354
                    },
                    "score": 0
                }
            ],
            "body": "<p>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</p>\n\n<h3>1. <code>event.preventDefault()</code></h3>\n\n<pre><code>$('a').click(function (e) {\n    // custom handling here\n    e.preventDefault();\n});\n</code></pre>\n\n<h3>2. <code>return false</code></h3>\n\n<pre><code>$('a').click(function () {\n    // custom handling here\n    return false;\n});\n</code></pre>\n\n<p>Is there any significant difference between those two methods of stopping event propagation?</p>\n\n<p>For me, <code>return false;</code> is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc. </p>\n\n<p>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use <code>preventDefault</code> instead? What's the better way?</p>\n",
            "last_activity_date": 1424032264,
            "owner": {
                "display_name": "RaYell",
                "user_id": 137467
            },
            "question_id": 1357118,
            "score": 1430,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events",
                "event-handling",
                "event-propagation"
            ],
            "title": "event.preventDefault() vs. return false"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Because it enumerates through object fields, not indexes. You can get value with index \"length\" and I doubt you want this.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vava",
                        "user_id": 6258
                    },
                    "score": 4
                },
                {
                    "body": "<p>The reason is that one construct...</p>\n\n<pre><code>var a = [];\na[5] = 5; // Perfectly legal JavaScript that resizes the array.\n\nfor (var i=0; i&lt;a.length; i++) {\n    // Iterates over numeric indexes from 0 to 5, as everyone expects.\n}\n</code></pre>\n\n<p>can sometimes be totally different from the other...</p>\n\n<pre><code>var a = [];\na[5] = 5;\nfor (var x in a) {\n    // Shows only the explicitly set index of \"5\", and ignores 0-4\n}\n</code></pre>\n\n<p>Also consider that <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> libraries might do things like this, which will affect any array you create:</p>\n\n<pre><code>// Somewhere deep in your JavaScript library...\nArray.prototype.foo = 1;\n\n// Now you have no idea what the below code will do.\nvar a = [1,2,3,4,5];\nfor (var x in a){\n    // Now foo is a part of EVERY array and \n    // will show up here as a value of 'x'.\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Triptych",
                        "user_id": 43089
                    },
                    "score": 639
                },
                {
                    "body": "<p>Because for...in enumerates through the object that holds the array, not the array itself. If I add a function to the arrays prototype chain, that will also be included. I.e.</p>\n\n<pre><code>Array.prototype.myOwnFunction = function() { alert(this); }\na = new Array();\na[0] = 'foo';\na[1] = 'bar';\nfor(x in a){\n document.write(x + ' = ' + a[x]);\n}\n</code></pre>\n\n<p>This will write:</p>\n\n<pre>\n0 = foo\n1 = bar\nmyOwnFunction = function() { alert(this; }\n</pre>\n\n<p>And since you can never be sure that nothing will be added to the prototype chain just use a for loop to enumerate the array:</p>\n\n<pre><code>for(i=0,x=a.length;i&lt;x;i++){\n document.write(i + ' = ' + a[i]);\n}\n</code></pre>\n\n<p>This will write:</p>\n\n<pre>\n0 = foo\n1 = bar\n</pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pim Jager",
                        "user_id": 35197
                    },
                    "score": 28
                },
                {
                    "body": "<p>In isolation, there is nothing wrong with using for-in on arrays. For-in iterates over the property names of an object, and in the case of an \"out-of-the-box\" array, the properties corresponds to the array indexes. (The built-in propertes like <code>length</code>, <code>toString</code> and so on are not included in the iteration.)</p>\n\n<p>However, if your code (or the framework you are using) add custom properties to arrays or to the array prototype, then these properties will be included in the iteration, which is probably not what you want.</p>\n\n<p>Some  JS frameworks, like Prototype modifies the Array prototype. Other frameworks like JQuery doesn't, so with JQuery you can safely use for-in.</p>\n\n<p>If you are in doubt, you probably shouldn't use for-in. </p>\n\n<p>An alternative way of iterating through an array is using a for-loop:</p>\n\n<pre><code>for (var ix=0;ix&lt;arr.length;ix++) alert(ix);\n</code></pre>\n\n<p>However, this have a different issue. The issue is that a JavaScript array can have \"holes\". If you define <code>arr</code> as:</p>\n\n<pre><code>var arr = [\"hello\"];\narr[100] = \"goodbye\";\n</code></pre>\n\n<p>Then the array have two items, but a length of 101. Using for-in will yield two indexes, while the for-loop will yield 101 indexes, where the 99 has a value of <code>undefined</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JacquesB",
                        "user_id": 7488
                    },
                    "score": 22
                },
                {
                    "body": "<p>There are three reasons why you shouldn't use <code>for..in</code> to iterate over array elements:</p>\n\n<ul>\n<li><p><code>for..in</code> will loop over all own and inherited properties of the array object which aren't <code>DontEnum</code>; that means if someone adds properties to the specific array object (there are valid reasons for this - I've done so myself) or changed <code>Array.prototype</code> (which is considered bad practice in code which is supposed to work well with other scripts), these properties will be iterated over as well; inherited properties can be excluded by checking <code>hasOwnProperty()</code>, but that won't help you with properties set in the array object itself</p></li>\n<li><p><code>for..in</code> isn't guaranteed to preserve element ordering</p></li>\n<li><p>it's slow because you have to walk all properties of the array object and its whole prototype chain and will still only get the property's name, ie to get the value, an additional lookup will be required</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Christoph",
                        "user_id": 48015
                    },
                    "score": 27
                },
                {
                    "body": "<p>In addition to the reasons given in other answers, you may not want to use the \"for...in\" structure if you need to do math with the counter variable because the loop iterates through the names of the object's properties and so the variable is a string.</p>\n\n<p>For example,</p>\n\n<pre><code>for (var i=0; i&lt;a.length; i++) {\n    document.write(i + ', ' + typeof i + ', ' + i+1);\n}\n</code></pre>\n\n<p>will write </p>\n\n<pre><code>0, number, 1\n1, number, 2\n...\n</code></pre>\n\n<p>whereas,</p>\n\n<pre><code>for (var ii in a) {\n    document.write(i + ', ' + typeof i + ', ' + i+1);\n}\n</code></pre>\n\n<p>will write</p>\n\n<pre><code>0, string, 01\n1, string, 11\n...\n</code></pre>\n\n<p>Of course, this can easily be overcome by including</p>\n\n<pre><code>ii = parseInt(ii);\n</code></pre>\n\n<p>in the loop, but the first structure is more direct.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ctmiddle",
                        "user_id": 166962
                    },
                    "score": 15
                },
                {
                    "body": "<p>Because it will iterate over properties belonging to objects up the prototype chain if you're not careful.</p>\n\n<p>You can use <code>for.. in</code>, just be sure to check each property with <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" rel=\"nofollow\">hasOwnProperty</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JAL",
                        "user_id": 92448
                    },
                    "score": 4
                },
                {
                    "body": "<p>The <code>for-in</code> statement by itself is not a \"bad practice\", however it can be <em>mis-used</em>, for example, to <em>iterate</em> over arrays or array-like objects.</p>\n\n<p>The purpose of the <code>for-in</code> statement is to <em>enumerate</em> over object properties, this statement will go up in the prototype chain, enumerating also <em>inherited</em> properties, thing that <em>sometimes</em> is not desired.</p>\n\n<p>Also, the order of iteration is not guaranteed by the spec., meaning that if you want to \"iterate\" an array object, with this statement you cannot be sure that the properties (array indexes) will be visited in the numeric order.</p>\n\n<p>For example, in JScript (IE &lt;= 8), the order of enumeration even on Array objects is defined as the properties were created:</p>\n\n<pre><code>var array = [];\narray[2] = 'c';\narray[1] = 'b';\narray[0] = 'a';\n\nfor (var p in array) {\n  //... p will be 2, 1 and 0 on IE\n}\n</code></pre>\n\n<p>Also, speaking about inherited properties, if you, for example, extend the <code>Array.prototype</code> object (like some libraries as MooTools do), that properties will be also enumerated:</p>\n\n<pre><code>Array.prototype.last = function () { return this[this.length-1]; };\n\nfor (var p in []) { // an empty array\n  // last will be enumerated\n}\n</code></pre>\n\n<p>As I said before to <em>iterate</em> over arrays or array-like objects, the best thing is to use a <em>sequential loop</em>, such as a plain-old <code>for</code>/<code>while</code> loop.</p>\n\n<p>When you want to enumerate only the <em>own properties</em> of an object (the ones that aren't inherited), you can use the <code>hasOwnProperty</code> method:</p>\n\n<pre><code>for (var prop in obj) {\n  if (obj.hasOwnProperty(prop)) {\n    // prop is not inherited\n  }\n}\n</code></pre>\n\n<p>And some people even recommend calling the method directly from <code>Object.prototype</code> to avoid having problems if somebody adds a property named <code>hasOwnProperty</code> to our object:</p>\n\n<pre><code>for (var prop in obj) {\n  if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n    // prop is not inherited\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "CMS",
                        "user_id": 5445
                    },
                    "score": 204
                },
                {
                    "body": "<p>The problem with <code>for ... in ...</code> &mdash; and this only becomes a problem when a programmer doesn't really understand the language; it's not really a bug or anything &mdash; is that it iterates over <em>all</em> members of an object (well, all <em>enumerable</em> members, but that's a detail for now).  When you want to iterate over <em>just</em> the indexed properties of an array, the only guaranteed way to keep things semantically consistent is to use an integer index (that is, a <code>for (var i = 0; i &lt; array.length; ++i)</code> style loop).</p>\n\n<p>Any object can have arbitrary properties associated with it. There would be nothing terrible about loading additional properties onto an array instance, in particular. Code that wants to see <em>only</em> indexed array-like properties therefore <em>must</em> stick to an integer index. Code that is fully aware of what <code>for ... in</code> does and really <em>need</em> to see all properties, well then that's ok too.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pointy",
                        "user_id": 182668
                    },
                    "score": 7
                },
                {
                    "body": "<p>It's not <em>necessarily</em> bad (based on what you're doing), but in the case of arrays, if something has been added to <code>Array.prototype</code>, then you're going to get strange results.  Where you'd expect this loop to run three times:</p>\n\n<pre><code>var arr = ['a','b','c'];\nfor (var key in arr) { ... }\n</code></pre>\n\n<p>If a function called <code>helpfulUtilityMethod</code> has been added to <code>Array</code>'s <code>prototype</code>, then your loop would end up running four times: <code>key</code> would be <code>0</code>, <code>1</code>, <code>2</code>, and <code>helpfulUtilityMethod</code>.  If you were only expecting integers, oops.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "josh3736",
                        "user_id": 201952
                    },
                    "score": 3
                },
                {
                    "body": "<p>You should use the <code>for(var x in y)</code> only on property lists, not on objects (as explained above).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user268396",
                        "user_id": 268396
                    },
                    "score": 3
                },
                {
                    "body": "<p>The <code>for</code>/<code>in</code> works with two types of variables: hashtables (associative arrays) and array (non-associative).</p>\n\n<p>JavaScript will automatically determine the way its passes through the items. So if you know that your array is really non-associative you can use <code>for (var i=0; i&lt;=arrayLen; i++)</code>, and skip the auto-detection iteration.</p>\n\n<p>But in my opinion, it's better to use <code>for</code>/<code>in</code>, the process required for that auto-detection is very small. </p>\n\n<p>A real answer for this will depend on how the browser parsers/interpret the JavaScript code. It can change between browsers.</p>\n\n<p>I can't think of other purposes to not using <code>for</code>/<code>in</code>;</p>\n\n<pre><code>//Non-associative\nvar arr = ['a', 'b', 'c'];\nfor (var i in arr)\n   alert(arr[i]);\n\n//Associative\nvar arr = {\n   item1 : 'a',\n   item2 : 'b',\n   item3 : 'c'\n};\n\nfor (var i in arr)\n   alert(arr[i]);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ricardo",
                        "user_id": 518070
                    },
                    "score": 5
                },
                {
                    "body": "<p>Aside from the fact that <code>for</code>...<code>in</code> loops over all enumerable properties (which is <em>not</em> the same as \"all array elements\"!), see <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</a>, section 12.6.4:</p>\n\n<blockquote>\n  <p>The mechanics and <strong>order</strong> of enumerating the properties ... <strong>is not specified</strong>.</p>\n</blockquote>\n\n<p>(Emphasis mine.)</p>\n\n<p>That means if a browser wanted to, it could go through the properties in the order in which they were inserted.  Or in numerical order.  Or in lexical order (where \"30\" comes before \"4\"!  Keep in mind all object keys -- and thus, all array indexes -- are actually strings, so that makes total sense).  It could go through them by bucket, if it implemented objects as hash tables.  Or take any of that and add \"backwards\".  A browser could even iterate <em>randomly</em> and be ECMA-262 compliant, as long as it visited each property exactly once.</p>\n\n<p>In practice, most browsers currently like to iterate in roughly the same order.  But there's nothing saying they have to.  That's implementation specific, and could change at any time if another way was found to be far more efficient.</p>\n\n<p>Either way, <code>for</code>...<code>in</code> carries with it no connotation of order.  If you care about order, be explicit about it and use a regular <code>for</code> loop with an index.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cHao",
                        "user_id": 319403
                    },
                    "score": 11
                },
                {
                    "body": "<p>In addition to the other problems, the \"for..in\" syntax is probably slower, because the index is a string, not an integer.</p>\n\n<pre><code>var a = [\"a\"]\nfor (var i in a)\n    alert(typeof i)  // 'string'\nfor (var i = 0; i &lt; a.length; i++)\n    alert(typeof i)  // 'number'\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dc1",
                        "user_id": 559554
                    },
                    "score": 5
                },
                {
                    "body": "<p>Short answer: It's just not worth it.</p>\n\n<hr>\n\n<p>Longer answer: It's just not worth it, even if sequential element order and optimal performance aren't required.</p>\n\n<hr>\n\n<p>Long answer: It's just not worth it, for reasons following:</p>\n\n<ul>\n<li>Using <code>for (var i in array) {}</code> will cause 'array' to be interpreted as any other <em>pure</em> object, traversing the object property chain and ultimately performing slower than an index-based <code>for</code> loop.</li>\n<li>It's not guaranteed to return the object properties in sequential order as one might expect.</li>\n<li>Using <code>hasOwnProperty()</code> or <code>isNaN()</code> checks to filter the object properties is an additional overhead causing it to perform (even more) slower. Also, introducing such additional logic negates the key reason for using it in the first place, i.e. because of the more concise format.</li>\n</ul>\n\n<p>For these reasons an acceptable trade-off between performance and convenience doesn't even exist. Really, there's no benefit unless the intent is to treat the array as a <em>pure</em> object and performs operations on the array object's properties.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "WynandB",
                        "user_id": 192886
                    },
                    "score": 12
                },
                {
                    "body": "<p>An important aspect is that <code>for...in</code> only iterates over properties contained in an object which have their <strong>enumerable</strong> <em>property attribute</em> set to true. So if one attempts to iterate over an object using <code>for...in</code> then arbitrary properties may be missed if their enumerable property attribute is false. It is quite possible to alter the enumerable property attribute for normal Array objects so that certain elements are not enumerated. Though in general the property attributes tend to apply to function properties within an object.</p>\n\n<p>One can check the value of a properties' enumerable property attribute by:</p>\n\n<pre><code>myobject.propertyIsEnumerable('myproperty')\n</code></pre>\n\n<p>Or to obtain all four property attributes:</p>\n\n<pre><code>Object.getOwnPropertyDescriptor(myobject,'myproperty')\n</code></pre>\n\n<p>This is a feature available in ECMAScript 5 - in earlier versions it was not possible to alter the value of the enumerable property attribute (it was always set to true).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pierz",
                        "user_id": 436794
                    },
                    "score": 4
                },
                {
                    "body": "<p>Also, due to semantics, the way <code>for, in</code> treats arrays (i.e. the same as any other JavaScript object) is not aligned with other popular languages.</p>\n\n<pre><code>// C#\nchar[] a = new char[] {'A', 'B', 'C'};\nforeach (char x in a) System.Console.Write(x); //Output: \"ABC\"\n\n// Java\nchar[] a = {'A', 'B', 'C'};\nfor (char x : a) System.out.print(x);          //Output: \"ABC\"\n\n// PHP\n$a = array('A', 'B', 'C');\nforeach ($a as $x) echo $x;                    //Output: \"ABC\"\n\n// JavaScript\nvar a = ['A', 'B', 'C'];\nfor (var x in a) document.write(x);            //Output: \"012\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "matpop",
                        "user_id": 1836314
                    },
                    "score": 3
                },
                {
                    "body": "<p>Mainly two reasons:</p>\n\n<p><strong>One</strong></p>\n\n<p>Like others have said, You might get keys which aren't in your array or that are inherited from the prototype. So if, let's say, a library adds a property to the Array or Object prototypes:</p>\n\n<pre><code>Array.prototype.someProperty = true\n</code></pre>\n\n<p>You'll get it as part of every array:</p>\n\n<pre><code>for(var item in [1,2,3]){\n  console.log(item) // will log 1,2,3 but also \"someProperty\"\n}\n</code></pre>\n\n<p>you could solve this with the hasOwnProperty method:</p>\n\n<pre><code>var ary = [1,2,3];\nfor(var item in ary){\n   if(ary.hasOwnProperty(item)){\n      console.log(item) // will log only 1,2,3\n   }\n}\n</code></pre>\n\n<p>but this is true for iterating over any object with a for-in loop.</p>\n\n<p><strong>Two</strong></p>\n\n<p>Usually the order of the items in an array is important, but the for-in loop won't necessarily iterate in the right order, that's because it treats the array as an object, which is the way it is implemented in JS, and not as an array.\nThis seems like a small thing, but it can really screw up applications and is hard to debug.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lior",
                        "user_id": 1233630
                    },
                    "score": 7
                }
            ],
            "body": "<p>I've been told not to use \"for...in\" with arrays in JavaScript. Why not?</p>\n",
            "last_activity_date": 1425648379,
            "owner": {
                "display_name": "lYriCAlsSH",
                "user_id": 60102
            },
            "question_id": 500504,
            "score": 694,
            "tags": [
                "javascript",
                "arrays",
                "for-loop"
            ],
            "title": "Why is using &quot;for...in&quot; with array iteration such a bad idea?"
        },
        {
            "answer_count": 42,
            "answers": [
                {
                    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\">Prototype</a> you would do something like</p>\n\n<pre><code>newObject = Object.clone(myObject);\n</code></pre>\n\n<p>The <a href=\"http://prototypejs.org/doc/latest/language/Object/clone/\">Prototype documentation</a> notes that this makes a shallow copy.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "erlando",
                        "user_id": 4192
                    },
                    "score": 12
                },
                {
                    "body": "<p>There doesn't seem to be an in-built one, you could try:</p>\n\n<pre><code>function clone(obj) {\n    if(obj == null || typeof(obj) != 'object')\n        return obj;\n\n    var temp = obj.constructor(); // changed\n\n    for(var key in obj) {\n        if(obj.hasOwnProperty(key)) {\n            temp[key] = clone(obj[key]);\n        }\n    }\n    return temp;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ConroyP",
                        "user_id": 2287
                    },
                    "score": 152
                },
                {
                    "body": "<pre><code>function clone(obj)\n { var clone = {};\n   clone.prototype = obj.prototype;\n   for (property in obj) clone[property] = obj[property];\n   return clone;\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mark Cidade",
                        "user_id": 1659
                    },
                    "score": 8
                },
                {
                    "body": "<blockquote>\n  <p><strong>Note:</strong> This is a reply to another answer, not a proper response to this question. If you wish to have fast object cloning please follow <a href=\"http://stackoverflow.com/a/5344074/1438393\">Corban's advice in his answer</a> to this question.</p>\n</blockquote>\n\n<hr>\n\n<p>I want to note that the <a href=\"http://api.jquery.com/clone/\"><code>.clone()</code></a> method in <strong>jQuery</strong> only clones DOM elements. In order to clone JavaScript objects, you would do:</p>\n\n<pre><code>// Shallow copy\nvar newObject = jQuery.extend({}, oldObject);\n\n// Deep copy\nvar newObject = jQuery.extend(true, {}, oldObject);\n</code></pre>\n\n<p>More information can be found in the <a href=\"http://api.jquery.com/jQuery.extend/\">jQuery documentation</a>.</p>\n\n<p>I also want to note that the deep copy is actually much smarter than what is shown above \u2013 it's able to avoid many traps (trying to deep extend a DOM element, for example). It's used frequently in jQuery core and in plugins to great effect.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "John Resig",
                        "user_id": 6524
                    },
                    "score": 2556
                },
                {
                    "body": "<pre><code>function deepClone(obj, CloneObj) {\n    CloneObj.clear();\n    jQuery.each(obj, function(i, val) {\n        var newObject = jQuery.extend(true, {}, val);\n        CloneObj[i] = newObject;\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Omar Muwahed"
                    },
                    "score": 1
                },
                {
                    "body": "<p>Has anyone tried this?</p>\n\n<pre><code>Object.clone = function ()\n{\n    var ClonedObject = function(){};\n    ClonedObject.prototype = this;\n    return new ClonedObject;\n}\n</code></pre>\n\n<p>It seems to work and I can't see what pitfalls would be.\nIn my tests the cloned object is <code>instanceof</code> the correct objects.</p>\n\n<p>Note: it could also be implemented as a standalone function, i.e.</p>\n\n<pre><code>function clone(object)\n{\n    // (replace \"this\" with \"object\")\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bob"
                    },
                    "score": -4
                },
                {
                    "body": "<p>Code:</p>\n\n<pre><code>// extends 'from' object with members from 'to'. If 'to' is null, a deep clone of 'from' is returned\nfunction extend(from, to)\n{\n    if (from == null || typeof from != \"object\") return from;\n    if (from.constructor != Object &amp;&amp; from.constructor != Array) return from;\n    if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function ||\n        from.constructor == String || from.constructor == Number || from.constructor == Boolean)\n        return new from.constructor(from);\n\n    to = to || new from.constructor();\n\n    for (var name in from)\n    {\n        to[name] = typeof to[name] == \"undefined\" ? extend(from[name], null) : to[name];\n    }\n\n    return to;\n}\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>var obj =\n{\n    date: new Date(),\n    func: function(q) { return 1 + q; },\n    num: 123,\n    text: \"asdasd\",\n    array: [1, \"asd\"],\n    regex: new RegExp(/aaa/i),\n    subobj:\n    {\n        num: 234,\n        text: \"asdsaD\"\n    }\n}\n\nvar clone = extend(obj);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kamarey",
                        "user_id": 86296
                    },
                    "score": 44
                },
                {
                    "body": "<p>This is what I'm using:</p>\n\n<pre><code>function cloneObject(obj) {\n    var clone = {};\n    for(var i in obj) {\n        if(typeof(obj[i])==\"object\" &amp;&amp; obj[i] != null)\n            clone[i] = cloneObject(obj[i]);\n        else\n            clone[i] = obj[i];\n    }\n    return clone;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alan",
                        "user_id": 229955
                    },
                    "score": 50
                },
                {
                    "body": "<pre><code>var clone = function() {\n    var newObj = (this instanceof Array) ? [] : {};\n    for (var i in this) {\n        if (this[i] &amp;&amp; typeof this[i] == \"object\") {\n            newObj[i] = this[i].clone();\n        }\n        else\n        {\n            newObj[i] = this[i];\n        }\n    }\n    return newObj;\n}; \n\nObject.defineProperty( Object.prototype, \"clone\", {value: clone, enumerable: false});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Zibri",
                        "user_id": 236062
                    },
                    "score": 36
                },
                {
                    "body": "<p>dojo.clone apparently clones \"anything\". Certainly worth a look, perhaps?</p>\n\n<p><a href=\"http://api.dojotoolkit.org/jsdoc/1.5/dojo.clone\">http://api.dojotoolkit.org/jsdoc/1.5/dojo.clone</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "voidstate",
                        "user_id": 76363
                    },
                    "score": 12
                },
                {
                    "body": "<p>in my FF3.6/IE8/Chrome4 works only this solution:</p>\n\n<pre><code>function cloneObject(obj){\n  var newObj = (obj instanceof Array) ? [] : {};\n  for (var i in obj) {\n    if (obj[i] &amp;&amp; typeof obj[i] == \"object\") \n      newObj[i] = obj[i].clone();\n    else\n      newObj[i] = obj[i];\n  }\n  return newObj;\n}\n</code></pre>\n\n<p>I don't know why, but Object's prototype extension doesn't work well in FF ;(</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kirill",
                        "user_id": 296470
                    },
                    "score": 7
                },
                {
                    "body": "<p>// obj target object, vals source object</p>\n\n<pre><code>var setVals = function (obj, vals) {\nif (obj &amp;&amp; vals) {\n      for (var x in vals) {\n        if (vals.hasOwnProperty(x)) {\n          if (obj[x] &amp;&amp; typeof vals[x] === 'object') {\n            obj[x] = setVals(obj[x], vals[x]);\n          } else {\n            obj[x] = vals[x];\n          }\n        }\n      }\n    }\n    return obj;\n  };\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dima",
                        "user_id": 327790
                    },
                    "score": 5
                },
                {
                    "body": "<p>The way you are supposed to do it in Mootools.</p>\n\n<pre><code>var my_object = {one:1,two:2, subobject:{a:['a','A']}},three:'3'};\nvar my_object_clone = $merge({},my_object);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dukeofgaming",
                        "user_id": 156257
                    },
                    "score": 5
                },
                {
                    "body": "<p>for mootools in particular this severs the reference between the new obj and the old one:</p>\n\n<pre><code>var obj = {foo: 'bar'}; \nvar bar = $unlink(obj);\n</code></pre>\n\n<p>you can also do</p>\n\n<pre><code>var obj = {foo: 'bar'};\nvar bar = $merge({}, $obj);\n</code></pre>\n\n<p>although $merge uses $unlink anyway.</p>\n\n<p>p.s. for mootools 1.3 this becomes <code>Object.clone</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dimitar Christoff",
                        "user_id": 126998
                    },
                    "score": 4
                },
                {
                    "body": "<p>Crockford suggests (and I prefer) using this function:</p>\n\n<pre><code>function object(o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n}\n\nvar newObject = object(oldObject);\n</code></pre>\n\n<p>It's terse, works as expected and you don't need a library.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "protonfish",
                        "user_id": 468111
                    },
                    "score": 14
                },
                {
                    "body": "<p>There seems to be no ideal deep clone operator yet for array-like objects.  As the code below illustrates, John Resig's jQuery cloner turns arrays with non-numeric properties into objects that are not arrays, and RegDwight's JSON cloner drops the non-numeric properties. The following tests illustrate these points on multiple browsers:</p>\n\n<pre><code>function jQueryClone(obj) {\n   return jQuery.extend(true, {}, obj)\n}\n\nfunction JSONClone(obj) {\n   return JSON.parse(JSON.stringify(obj))\n}\n\nvar arrayLikeObj = [[1, \"a\", \"b\"], [2, \"b\", \"a\"]];\narrayLikeObj.names = [\"m\", \"n\", \"o\"];\nvar JSONCopy = JSONClone(arrayLikeObj);\nvar jQueryCopy = jQueryClone(arrayLikeObj);\n\nalert(\"Is arrayLikeObj an array instance?\" + (arrayLikeObj instanceof Array) +\n      \"\\nIs the jQueryClone an array instance? \" + (jQueryCopy instanceof Array) +\n      \"\\nWhat are the arrayLikeObj names? \" + arrayLikeObj.names +\n      \"\\nAnd what are the JSONClone names? \" + JSONCopy.names)\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Page Notes",
                        "user_id": 478323
                    },
                    "score": 10
                },
                {
                    "body": "<p>Assuming that you have only variables and not any functions in your object, you can  just use:</p>\n\n<pre><code>var newObject = JSON.parse(JSON.stringify(oldObject));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sultan Shakir",
                        "user_id": 505062
                    },
                    "score": 125
                },
                {
                    "body": "<p>Checkout this benchmark: <a href=\"http://web.archive.org/web/20140328224025/http://jsperf.com/cloning-an-object/2\">http://web.archive.org/web/20140328224025/http://jsperf.com/cloning-an-object/2</a></p>\n\n<p>In my previous tests where speed was a main concern I found <code>JSON.parse(JSON.stringify(obj))</code> to be the fastest way to Deep clone an object (it beats out JQuery.extend with deep flag set true by 10-20%).</p>\n\n<p>JQuery.extend is pretty fast when deep flag is set to false (shallow clone). It is a good option because it includes some extra logic for type validation and doesnt copy over undefined properties, etc. but this will also slow you down a little.</p>\n\n<p>If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple <code>for (var i in obj)</code> loop to clone your object while checking hasOwnProperty and it will be much much faster than JQuery. </p>\n\n<p>Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object. \nJS trace engines suck at optimizing for..in loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.</p>\n\n<pre><code>var clonedObject = {\n  knownProp: obj.knownProp,\n  ..\n}\n</code></pre>\n\n<p>I hope you found this helpful.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Corban Brook",
                        "user_id": 69959
                    },
                    "score": 605
                },
                {
                    "body": "<p>I think that this is the best solution  if you want to generalize your object cloning algorithm.<br>\nIt can be used with or without jQuery, although I recommend leaving jQuery's extend method out if you want you the cloned object to have the same \"class\" as the original one.</p>\n\n<pre><code>function clone(obj){\n    if(typeof(obj) == 'function')//it's a simple function\n        return obj;\n    //of it's not an object (but could be an array...even if in javascript arrays are objects)\n    if(typeof(obj) !=  'object' || obj.constructor.toString().indexOf('Array')!=-1)\n        if(JSON != undefined)//if we have the JSON obj\n            try{\n                return JSON.parse(JSON.stringify(obj));\n            }catch(err){\n                return JSON.parse('\"'+JSON.stringify(obj)+'\"');\n            }\n        else\n            try{\n                return eval(uneval(obj));\n            }catch(err){\n                return eval('\"'+uneval(obj)+'\"');\n            }\n    // I used to rely on jQuery for this, but the \"extend\" function returns\n    //an object similar to the one cloned,\n    //but that was not an instance (instanceof) of the cloned class\n    /*\n    if(jQuery != undefined)//if we use the jQuery plugin\n        return jQuery.extend(true,{},obj);\n    else//we recursivley clone the object\n    */\n    return (function _clone(obj){\n        if(obj == null || typeof(obj) != 'object')\n            return obj;\n        function temp () {};\n        temp.prototype = obj;\n        var F = new temp;\n        for(var key in obj)\n            F[key] = clone(obj[key]);\n        return F;\n    })(obj);            \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "gion_13",
                        "user_id": 491075
                    },
                    "score": 3
                },
                {
                    "body": "<p>This isn't generally the most efficient solution, but it does what I need. Simple test cases below...</p>\n\n<pre><code>function clone(obj, clones) {\n    // Makes a deep copy of 'obj'. Handles cyclic structures by\n    // tracking cloned obj's in the 'clones' parameter. Functions \n    // are included, but not cloned. Functions members are cloned.\n    var new_obj,\n        already_cloned,\n        t = typeof obj,\n        i = 0,\n        l,\n        pair; \n\n    clones = clones || [];\n\n    if (obj === null) {\n        return obj;\n    }\n\n    if (t === \"object\" || t === \"function\") {\n\n        // check to see if we've already cloned obj\n        for (i = 0, l = clones.length; i &lt; l; i++) {\n            pair = clones[i];\n            if (pair[0] === obj) {\n                already_cloned = pair[1];\n                break;\n            }\n        }\n\n        if (already_cloned) {\n            return already_cloned; \n        } else {\n            if (t === \"object\") { // create new object\n                new_obj = new obj.constructor();\n            } else { // Just use functions as is\n                new_obj = obj;\n            }\n\n            clones.push([obj, new_obj]); // keep track of objects we've cloned\n\n            for (key in obj) { // clone object members\n                if (obj.hasOwnProperty(key)) {\n                    new_obj[key] = clone(obj[key], clones);\n                }\n            }\n        }\n    }\n    return new_obj || obj;\n}\n</code></pre>\n\n<p>Cyclic array test...</p>\n\n<pre><code>a = []\na.push(\"b\", \"c\", a)\naa = clone(a)\naa === a //=&gt; false\naa[2] === a //=&gt; false\naa[2] === a[2] //=&gt; false\naa[2] === aa //=&gt; true\n</code></pre>\n\n<p>Function test...</p>\n\n<pre><code>f = new Function\nf.a = a\nff = clone(f)\nff === f //=&gt; true\nff.a === a //=&gt; false\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "neatonk",
                        "user_id": 682672
                    },
                    "score": 5
                },
                {
                    "body": "<p>This is the fastest method I have created that doesn't use the prototype, so it will maintain hasOwnProperty in the new object. The solution is to iterate the top level properties of the original object, make 2 copies, delete each property from the original and then reset the original object and return the new copy. It only has to iterate as many times as top level properties. This saves all the if conditions to check if each property is a function/object/string etc, and doesn't have to iterate each descendant property. The only drawback is that the original object must be supplied with its original created namespace, in order to reset it.</p>\n\n<pre>\ncopyDeleteAndReset:function(namespace,strObjName){\n    var obj = namespace[strObjName],\n    objNew = {},objOrig = {};\n    for(i in obj){\n        if(obj.hasOwnProperty(i)){\n            objNew[i] = objOrig[i] = obj[i];\n            delete obj[i];\n        }\n    }\n    namespace[strObjName] = objOrig;\n    return objNew;\n}\n\nvar namespace = {};\nnamespace.objOrig = {\n    '0':{\n        innerObj:{a:0,b:1,c:2}\n    }\n}\n\nvar objNew = copyDeleteAndReset(namespace,'objOrig');\nobjNew['0'] = 'NEW VALUE';\n\nconsole.log(objNew['0']) === 'NEW VALUE';\nconsole.log(namespace.objOrig['0']) === innerObj:{a:0,b:1,c:2};\n</pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Steve Tomlin",
                        "user_id": 813831
                    },
                    "score": 4
                },
                {
                    "body": "<p>I know this is an old post, but I thought this may be of some help to the next person who stumbles along.</p>\n\n<p>As long as you don't assign an object to anything it maintains no reference in memory.  So to make an object that you want to share among other objects, you'll have to create a factory like so:</p>\n\n<pre><code>var a = function(){\n    return {\n        father:'zacharias'\n    };\n},\nb = a(),\nc = a();\nc.father = 'johndoe';\nalert(b.father);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Joe",
                        "user_id": 962942
                    },
                    "score": 29
                },
                {
                    "body": "<p>If you're using it, the <a href=\"http://documentcloud.github.com/underscore/\">underscore.js</a> library has a <a href=\"http://documentcloud.github.com/underscore/#clone\">clone</a> method.</p>\n\n<pre><code>var newObject = _.clone(oldObject);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "itsadok",
                        "user_id": 7581
                    },
                    "score": 19
                },
                {
                    "body": "<p>In YUI you can do Deep object/array copy by </p>\n\n<pre><code>//For Safe clone.. in case where you need to delete items on the cloned objects\nclonedObj = Y.Clone(obj, true); \n\n//For Unsafe clone\nclonedObj = Y.Clone(obj, false); \n</code></pre>\n\n<p><a href=\"https://yuilibrary.com/yui/docs/api/classes/YUI.html#method_clone\" rel=\"nofollow\">More details</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Prabhakar Kasi",
                        "user_id": 465659
                    },
                    "score": 4
                },
                {
                    "body": "<p>HTML5 defines a method to create deep clones of objects. It still only works for certain built-in types, but it's more flexible than using JSON. The <a href=\"http://www.w3.org/TR/2012/CR-html5-20121217/infrastructure.html#safe-passing-of-structured-data\">internal structured clone algorithm</a> also supports Dates, RegExps, Files, Blobs, FileLists, ImageDatas, sparse Arrays, types defined in other specification <a href=\"https://www.khronos.org/registry/typedarray/specs/latest/#9\">such as Typed Arrays</a>, and recursive/cyclical structures.</p>\n\n<p>This feature is not yet directly exposed through any API. Below I describe two ways of creating structured clones through other APIs that use them. They both incur overhead that makes them many times slower than using a straightforward JSON copy. A more direct API may be made available in the future.</p>\n\n<hr>\n\n<p><code>history.pushState()</code> and <code>history.replaceState()</code> both create a structured clone of their first argument, and assign that value to <code>history.state</code>. You can use this to create a structured clone of any object like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function structuredClone_replaceState(obj) {\n    var oldState = history.state;\n    history.replaceState(obj, null);\n    var clonedObj = history.state;\n    history.replaceState(oldState, null);\n    return clonedObj;\n}\n</code></pre>\n\n<h3>Example Usage (<a href=\"http://jsfiddle.net/jeremy/ghC5U/22/\">jsfiddle</a>)</h3>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var original = { date: new Date(), number: Math.random() };\noriginal.self = original;\n\nvar clone = structuredClone_replaceState(original);\n\n// They're different objects:\nconsole.log(original !== clone);\nconsole.log(original.date !== clone.date);\n\n// They're cyclical:\nconsole.log(original.self === original);\nconsole.log(clone.self === clone);\n\n// They contain equivalent values:\nconsole.log(original.number === clone.number);\nconsole.log(Number(original.date) === Number(clone.date));\n</code></pre>\n\n<p>Though synchronous, this can be is extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.</p>\n\n<hr>\n\n<p>Calling <a href=\"https://developer.mozilla.org/en/DOM/window.postMessage\"><code>window.postMessage(original)</code></a> triggers an <code>message</code> event on <code>window</code> with a <code>.data</code> property whose value is a structured clone of the <code>original</code>. Here's function which uses this behaviour to asynchronously produce a structured clone of a target object and pass it to your callback. </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var pendingCallbacks = {};\n\nwindow.addEventListener('message', function(e) {\n    var cloneId = e.data.cloneId,\n        clonedValue = e.data.value;\n\n    if (e.source === window &amp;&amp; cloneId != null &amp;&amp; cloneId in pendingCallbacks) {\n        var callback = pendingCallbacks[cloneId];\n        delete pendingCallbacks[cloneId];\n        callback(clonedValue);\n    }\n});\n\nvar asyncStructuredClone_windowPostMessage = function(o, callback) {\n    var cloneId = asyncStructuredClone_windowPostMessage.nextCloneId_++;\n    pendingCallbacks[cloneId] = callback;\n    window.postMessage({ value: o, cloneId: cloneId }, '*');\n};\nasyncStructuredClone_windowPostMessage.nextCloneId_ = 0;\n</code></pre>\n\n<h3>Example Usage (<a href=\"http://jsfiddle.net/jeremy/WWN23/9/\">jsfiddle</a>)</h3>\n\n<pre class=\"lang-js prettyprint-override\"><code>var original = { date: new Date(), number: Math.random() };\noriginal.self = original;\n\nasyncStructuredClone_windowPostMessage(original, function(clone) {\n    // They're different objects:\n    console.log(original !== clone);\n    console.log(original.date !== clone.date);\n\n    // They're cyclical:\n    console.log(original.self === original);\n    console.log(clone.self === clone);\n\n    // They contain equivalent values:\n    console.log(original.number === clone.number);\n    console.log(Number(original.date) === Number(clone.date));\n});\n</code></pre>\n\n<p>It's possible to do this in a more isolated manner using a <code>new MessageChannel</code> instead of the global <code>window</code>, but so far that's only been implemented in Chrome.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jeremy Banks",
                        "user_id": 1114
                    },
                    "score": 102
                },
                {
                    "body": "<p>Shallow copy one-liner (ECMAScript 5th edition) :</p>\n\n<pre><code>var origin = { foo : {} };\nvar copy = Object.keys(origin).reduce(function(c,k){c[k]=origin[k];return c;},{});\n\nconsole.log(origin, copy);\nconsole.log(origin == copy); // false\nconsole.log(origin.foo == copy.foo); // true\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ma&#235;l Nison",
                        "user_id": 880703
                    },
                    "score": 7
                },
                {
                    "body": "<p>Here is a comprehensive clone() method that can clone any js object. It handles almost all the cases:</p>\n\n<pre><code>function clone(src, deep) {\n\n    var toString = Object.prototype.toString;\n    if(!src &amp;&amp; typeof src != \"object\"){\n        //any non-object ( Boolean, String, Number ), null, undefined, NaN\n        return src;\n    }\n\n    //Honor native/custom clone methods\n    if(src.clone &amp;&amp; toString.call(src.clone) == \"[object Function]\"){\n        return src.clone(deep);\n    }\n\n    //DOM Elements\n    if(src.nodeType &amp;&amp; toString.call(src.cloneNode) == \"[object Function]\"){\n        return src.cloneNode(deep);\n    }\n\n    //Date\n    if(toString.call(src) == \"[object Date]\"){\n        return new Date(src.getTime());\n    }\n\n    //RegExp\n    if(toString.call(src) == \"[object RegExp]\"){\n        return new RegExp(src);\n    }\n\n    //Function\n    if(toString.call(src) == \"[object Function]\"){\n        //Wrap in another method to make sure == is not true;\n        //Note: Huge performance issue due to closures, comment this :)\n        return (function(){\n            src.apply(this, arguments);\n        });\n\n    }\n\n    var ret, index;\n    //Array\n    if(toString.call(src) == \"[object Array]\"){\n        //[].slice(0) would soft clone\n        ret = src.slice();\n        if(deep){\n            index = ret.length;\n            while(index--){\n                ret[index] = clone(ret[index], true);\n            }\n        }\n    }\n    //Object\n    else {\n        ret = src.constructor ? new src.constructor() : {};\n        for (var prop in src) {\n            ret[prop] = deep\n                ? clone(src[prop], true)\n                : src[prop];\n        }\n    }\n\n    return ret;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user1547016",
                        "user_id": 1547016
                    },
                    "score": 5
                },
                {
                    "body": "<p>There\u2019s a <a href=\"https://github.com/pvorb/node-clone\">library (called \u201cclone\u201d)</a>, that does this quite well. It provides the most complete recursive cloning/copying of arbitrary objects that I know of. It also supports circular references, which is not covered by the other answers, yet.</p>\n\n<p>You can <a href=\"https://npmjs.org/package/clone\">find it on npm</a>, too. It can be used for the browser as well as Node.js.</p>\n\n<p>Here is an example on how to use it:</p>\n\n<p>Install it with</p>\n\n<pre><code>npm install clone\n</code></pre>\n\n<p>or package it with <a href=\"https://github.com/ender-js/Ender\">Ender</a>.</p>\n\n<pre><code>ender build clone [...]\n</code></pre>\n\n<p>You can also download the source code manually.</p>\n\n<p>Then you can use it in your source code.</p>\n\n<pre><code>var clone = require('clone');\n\nvar a = { foo: { bar: 'baz' } };  // inital value of a\nvar b = clone(a);                 // clone a -&gt; b\na.foo.bar = 'foo';                // change a\n\nconsole.log(a);                   // { foo: { bar: 'foo' } }\nconsole.log(b);                   // { foo: { bar: 'baz' } }\n</code></pre>\n\n<p>(Disclaimer: I\u2019m the author of the library.)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pvorb",
                        "user_id": 432354
                    },
                    "score": 18
                },
                {
                    "body": "<p>Here's a version of ConroyP's answer above that works even if the constructor has required parameters:</p>\n\n<pre><code>//If Object.create isn't already defined, we just do the simple shim, without the second argument,\n//since that's all we need here\nvar object_create = Object.create;\nif (typeof object_create !== 'function') {\n    object_create = function(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\n\nfunction deepCopy(obj) {\n    if(obj == null || typeof(obj) !== 'object'){\n        return obj;\n    }\n    //make sure the returned object has the same prototype as the original\n    var ret = object_create(obj.constructor.prototype);\n    for(var key in obj){\n        ret[key] = deepCopy(obj[key]);\n    }\n    return ret;\n}\n</code></pre>\n\n<p>This function is also available in my <a href=\"https://github.com/mbrowne/simpleoo.js\">simpleoo</a> library.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Here's a more robust version (thanks to Justin McCandless this now supports cyclic references as well):</p>\n\n<pre><code>/**\n * Deep copy an object (make copies of all its object properties, sub-properties, etc.)\n * An improved version of http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\n * that doesn't break if the constructor has required parameters\n * \n * It also borrows some code from http://stackoverflow.com/a/11621004/560114\n */ \nfunction deepCopy(src, /* INTERNAL */ _visited) {\n    if(src == null || typeof(src) !== 'object'){\n        return src;\n    }\n\n    // Initialize the visited objects array if needed\n    // This is used to detect cyclic references\n    if (_visited == undefined){\n        _visited = [];\n    }\n    // Otherwise, ensure src has not already been visited\n    else {\n        var i, len = _visited.length;\n        for (i = 0; i &lt; len; i++) {\n            // If src was already visited, don't try to copy it, just return the reference\n            if (src === _visited[i]) {\n                return src;\n            }\n        }\n    }\n\n    // Add this object to the visited array\n    _visited.push(src);\n\n    //Honor native/custom clone methods\n    if(typeof src.clone == 'function'){\n        return src.clone(true);\n    }\n\n    //Special cases:\n    //Array\n    if (Object.prototype.toString.call(src) == '[object Array]') {\n        //[].slice(0) would soft clone\n        ret = src.slice();\n        var i = ret.length;\n        while (i--){\n            ret[i] = deepCopy(ret[i], _visited);\n        }\n        return ret;\n    }\n    //Date\n    if (src instanceof Date){\n        return new Date(src.getTime());\n    }\n    //RegExp\n    if(src instanceof RegExp){\n        return new RegExp(src);\n    }\n    //DOM Elements\n    if(src.nodeType &amp;&amp; typeof src.cloneNode == 'function'){\n        return src.cloneNode(true);\n    }\n\n    //If we've reached here, we have a regular object, array, or function\n\n    //make sure the returned object has the same prototype as the original\n    var proto = (Object.getPrototypeOf ? Object.getPrototypeOf(src): src.__proto__);\n    if (!proto) {\n        proto = src.constructor.prototype; //this line would probably only be reached by very old browsers \n    }\n    var ret = object_create(proto);\n\n    for(var key in src){\n        //Note: this does NOT preserve ES5 property attributes like 'writable', 'enumerable', etc.\n        //For an example of how this could be modified to do so, see the singleMixin() function\n        ret[key] = deepCopy(src[key], _visited);\n    }\n    return ret;\n}\n\n//If Object.create isn't already defined, we just do the simple shim, without the second argument,\n//since that's all we need here\nvar object_create = Object.create;\nif (typeof object_create !== 'function') {\n    object_create = function(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matt Browne",
                        "user_id": 560114
                    },
                    "score": 15
                },
                {
                    "body": "<p>I have two good answers depending on whether your objective is to clone a \"plain old javascript object\" or not.</p>\n\n<p>Let's also assume that your intention is to create a complete clone with no prototype references back to the source object.  If you're not interested in a complete clone, then you can use many of the Object.clone() routines provided in some of the other answers (Crockford's pattern).</p>\n\n<p>For plain old JavaScript objects, a tried and true good way to clone an object in modern runtimes is quite simply:</p>\n\n<pre><code>var clone = JSON.parse(JSON.stringify(obj));\n</code></pre>\n\n<p>Note that the source object must be a pure JSON object.  This is to say, all of its nested properties must be scalars (like boolean, string, array, object, etc).  Any functions or special objects like RegExp or Date will not be cloned.</p>\n\n<p>Is it efficient?  Heck yes.  We've tried all kinds of cloning methods and this works best.  I'm sure some ninja could conjure up a faster method.  But I suspect we're talking about marginal gains.</p>\n\n<p>This approach is just simple and easy to implement.  Wrap it into a convenience function and if you really need to squeeze out some gain, go for at a later time.</p>\n\n<p>Now, for non-plain JavaScript objects, there isn't a really simple answer.  In fact, there can't be because of the dynamic nature of JavaScript functions and inner object state.  Deep cloning a JSON structure with functions inside requires you recreate those functions and their inner context.  And JavaScript simply doesn't have a standardized way of doing that.</p>\n\n<p>The correct way to do this, once again, is via a convenience method that you declare and reuse within your code.  The convenience method can be endowed with some understanding of your own objects so you can make sure to properly recreate the graph within the new object.</p>\n\n<p>We're written our own but the best general approach I've seen is covered here:</p>\n\n<p><a href=\"http://davidwalsh.name/javascript-clone\">http://davidwalsh.name/javascript-clone</a></p>\n\n<p>This is the right idea.  The author (David Walsh) has commented out the cloning of generalized functions.  This is something you might choose to do, depending on your use case.</p>\n\n<p>The main idea is that you need to special handle the instantiation of your functions (or prototypal classes, so to speak) on a per-type basis.  Here, he's provided a few examples for RegExp and Date.</p>\n\n<p>Not only is this code brief but it's also very readable.  It's pretty easy to extend.</p>\n\n<p>Is this efficient?  Heck yes.  Given that the goal is to produce a true deep-copy clone, then you're going to have to walk the members of the source object graph.  With this approach, you can tweak exactly which child members to treat and how to manually handle custom types.</p>\n\n<p>So there you go.  Two approaches.  Both efficient in my view.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Michael Uzquiano",
                        "user_id": 1489973
                    },
                    "score": 6
                },
                {
                    "body": "<p>Lodash has a nice _.cloneDeep method: <a href=\"http://lodash.com/docs#cloneDeep\">http://lodash.com/docs#cloneDeep</a></p>\n\n<p>The usual _.clone method also accepts a second parameter to make a deep copy instead of the shallow one: <a href=\"http://lodash.com/docs#clone\">http://lodash.com/docs#clone</a></p>\n\n<pre><code>_.clone(value [, deep=false, callback, thisArg])\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "opensas",
                        "user_id": 47633
                    },
                    "score": 6
                },
                {
                    "body": "<p>I wasn't satisfied with any of the existing solutions, so I wrote my own.  Here's a simplified version made just for StackOverflow.  It's untested in its current form, so I'd appreciate some reports on its functionality.</p>\n\n<p>It's a bit long, so here's a link to it on <a href=\"https://gist.github.com/Zenexer/5916772\" rel=\"nofollow\">gist</a>.</p>\n\n<p>It supports both shallow cloning and deep cloning:</p>\n\n<pre><code>Object.clone({ }); // Shallow\nObject.clone({ }, true); // Deep\n</code></pre>\n\n<p>It can attach to <code>Object.prototype</code>, provided ECMA 5 support for <code>Object.defineProperty</code> is present:</p>\n\n<pre><code>({ }).clone();\n// ...is the same as...\nObject.clone({ });\n</code></pre>\n\n<p>It will also avoid cloning functions while deep cloning unless you tell it to, because generally, you don't want to do that.  However, if you pass it a function directly, it will assume that you are doing what you mean to be doing, and will clone the function as requested.  Note that functions will still appear in clones: they will just be the same instances as those in the original.  This avoids duplicating types/constructors, which is probably not what you want to do.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Zenexer",
                        "user_id": 1188377
                    },
                    "score": 1
                },
                {
                    "body": "<p>There are a lot of answers, but none of them gave the desired effect I needed.  I wanted to utilize the power of jQuery's deep copy... However, when it runs into an array, it simply copies the reference to the array and deep copies the items in it.  To get around this, I made a nice little recursive function that will create a new array automatically.  </p>\n\n<p>(It even checks for kendo.data.ObservableArray if you want it to!  Though, make sure you make sure you call kendo.observable(newItem) if you want the Arrays to be observable again.) </p>\n\n<p>So, to fully copy an existing item, you just do this:</p>\n\n<pre><code>var newItem = jQuery.extend(true, {}, oldItem);\ncreateNewArrays(newItem);\n\n\nfunction createNewArrays(obj) {\n    for (var prop in obj) {\n        if ((kendo != null &amp;&amp; obj[prop] instanceof kendo.data.ObservableArray) || obj[prop] instanceof Array) {\n            var copy = [];\n            $.each(obj[prop], function (i, item) {\n                var newChild = $.extend(true, {}, item);\n                createNewArrays(newChild);\n                copy.push(newChild);\n            });\n            obj[prop] = copy;\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Daniel Lorenz",
                        "user_id": 1245940
                    },
                    "score": 2
                },
                {
                    "body": "<p>In AngularJS:</p>\n\n<pre><code>angular.copy(source[, destination]);\n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/angular.copy\">http://docs.angularjs.org/api/angular.copy</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "timurx",
                        "user_id": 2632041
                    },
                    "score": 17
                },
                {
                    "body": "<p>ExtJs has a method to clone objects too:</p>\n\n<pre><code>var newObject = Ext.apply({}, oldObject);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andron",
                        "user_id": 284602
                    },
                    "score": 0
                },
                {
                    "body": "<p>I usually use <code>var newObj = JSON.parse( JSON.stringify(oldObje) );</code> but, here's a more proper way:</p>\n\n<pre><code>var o = {};\n\nvar oo = Object.create(o);\n\n(o === oo); // =&gt; false\n</code></pre>\n\n<p>Watch legacy browsers!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Cody",
                        "user_id": 1153121
                    },
                    "score": 3
                },
                {
                    "body": "<p>This is my version of object cloner. This is a standalone version of the jQuery method, with only few tweaks and adjustments. Check out the <a href=\"http://jsfiddle.net/eyYJB/\" rel=\"nofollow\">fiddle</a>. I've used a lot jQuery until the day I realized that I'd use only this function most of the time x_x. </p>\n\n<p>The usage is the same as described into the jQuery API : </p>\n\n<ul>\n<li>Non deep clone : <code>extend(object_dest, object_source);</code></li>\n<li>Deep clone <code>extend(true, object_dest, object_source);</code></li>\n</ul>\n\n<p>One extra function is used to define if object is proper to be cloned.</p>\n\n<pre><code>/**\n * This is a quasi clone of jQuery's extend() function.\n * by Romain WEEGER for wJs library - www.wexample.com\n * @returns {*|{}}\n */\nfunction extend() {\n    // Make a copy of arguments to avoid JS inspector hints.\n    var to_add, name, copy_is_array, clone,\n    // The target object who receive parameters\n    // form other objects.\n            target = arguments[0] || {},\n    // Index of first argument to mix to target.\n            i = 1,\n    // Mix target with all function arguments.\n            length = arguments.length,\n    // Define if we merge object recursively.\n            deep = false;\n\n    // Handle a deep copy situation.\n    if (typeof target === 'boolean') {\n        deep = target;\n        // Skip the boolean and the target.\n        target = arguments[ i ] || {};\n        // Use next object as first added.\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if (typeof target !== 'object' &amp;&amp; typeof target !== 'function') {\n        target = {};\n    }\n\n    // Loop trough arguments.\n    for (false; i &lt; length; i += 1) {\n        // Only deal with non-null/undefined values\n        if ((to_add = arguments[ i ]) !== null) {\n            // Extend the base object.\n            for (name in to_add) {\n                // We do not wrap for loop into hasOwnProperty,\n                // to access to all values of object.\n                // Prevent never-ending loop.\n                if (target === to_add[name]) {\n                    continue;\n                }\n                // Recurse if we're merging plain objects or arrays.\n                if (deep &amp;&amp; to_add[name] &amp;&amp; (is_plain_object(to_add[name]) || (copy_is_array = Array.isArray(to_add[name])))) {\n                    if (copy_is_array) {\n                        copy_is_array = false;\n                        clone = target[name] &amp;&amp; Array.isArray(target[name]) ? target[name] : [];\n                    }\n                    else {\n                        clone = target[name] &amp;&amp; is_plain_object(target[name]) ? target[name] : {};\n                    }\n                    // Never move original objects, clone them.\n                    target[name] = extend(deep, clone, to_add[name]);\n                }\n                // Don't bring in undefined values.\n                else if (to_add[name] !== undefined) {\n                    target[name] = to_add[name];\n                }\n            }\n        }\n    }\n    return target;\n}\n\n/**\n * Check to see if an object is a plain object\n * (created using \"{}\" or \"new Object\").\n * Forked from jQuery.\n * @param obj\n * @returns {boolean}\n */\nfunction is_plain_object(obj) {\n    // Not plain objects:\n    // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n    // - DOM nodes\n    // - window\n    if (obj === null || typeof obj !== \"object\" || obj.nodeType || (obj !== null &amp;&amp; obj === obj.window)) {\n        return false;\n    }\n    // Support: Firefox &lt;20\n    // The try/catch suppresses exceptions thrown when attempting to access\n    // the \"constructor\" property of certain host objects, ie. |window.location|\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=814622\n    try {\n        if (obj.constructor &amp;&amp; !this.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n            return false;\n        }\n    } catch (e) {\n        return false;\n    }\n    // If the function hasn't returned already, we're confident that\n    // |obj| is a plain object, created by {} or constructed with new Object\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "weeger",
                        "user_id": 2057976
                    },
                    "score": 0
                },
                {
                    "body": "<pre><code>var a = { foo: 'bar' }\nvar b = JSON.parse( JSON.stringify( a ) );\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ucsarge",
                        "user_id": 1247925
                    },
                    "score": 2
                },
                {
                    "body": "<p>in Knockout you can do <code>ko.toJS()</code> which converts observables to properties.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bart",
                        "user_id": 826568
                    },
                    "score": -1
                },
                {
                    "body": "<p>For future reference, the current draft of Ecmascript 6 introduces <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\" rel=\"nofollow\">Object.assign</a> as a way of cloning objects. Example code would be:</p>\n\n<pre><code>var obj1 = { a: true, b: 1 };\nvar obj2 = Object.assign(obj1);\nconsole.log(obj2); // { a: true, b: 1 }\n</code></pre>\n\n<p>At the time of writing <a href=\"http://kangax.github.io/compat-table/es6/#Object.assign\" rel=\"nofollow\">support is limited to Firefox 34 in browsers</a> so it\u2019s not usuable in production code just yet (unless you\u2019re writing a Firefox extension of course).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Robin",
                        "user_id": 453783
                    },
                    "score": 2
                },
                {
                    "body": "<p>If you're using NodeJS or <a href=\"http://browserify.org/\" rel=\"nofollow\">Browserify</a> there's a nifty little <a href=\"https://www.npmjs.org/package/clone\" rel=\"nofollow\"><code>clone</code></a> library you can use without having to get tied to a big monolithic lib like jQuery, Underscore, or the likes.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "andrezsanchez",
                        "user_id": 1922955
                    },
                    "score": 2
                },
                {
                    "body": "<p><strong>Deep copy by performance:</strong><br>\nRanked from best to worst</p>\n\n<ul>\n<li>Reassignment \"=\" (for string / number arrays only)</li>\n<li>Slice (for string / number arrays only)</li>\n<li>Concat (for string / number arrays only)</li>\n<li>Custom For-loop Copy</li>\n<li>Object.assign</li>\n<li>$.extend</li>\n<li>JSON.parse</li>\n<li>_.extend()</li>\n<li>_.cloneDeep()</li>\n</ul>\n\n<p><strong>Deep copy an array of strings or numbers:</strong></p>\n\n<p>When an array contains numbers and strings - functions like .slice(), .concat(), .splice(), and the assignment operator \"=\"; will make a deep copy of the array's elements.</p>\n\n<p>Where reassignment has the fastest performance:</p>\n\n<pre><code>var arr1 = ['a', 'b', 'c'];\nvar arr2 = arr1;\narr1 = ['a', 'b', 'c'];\n</code></pre>\n\n<p>And .slice() has better performance than .concat()<br>\n<a href=\"http://jsperf.com/duplicate-array-slice-vs-concat/3\" rel=\"nofollow\">http://jsperf.com/duplicate-array-slice-vs-concat/3</a></p>\n\n<pre><code>var arr1 = ['a', 'b', 'c'];  // Becomes arr1 = ['a', 'b', 'c']\nvar arr2a = arr1.slice(0);   // Becomes arr2a = ['a', 'b', 'c'] - deep copy\nvar arr2b = arr1.concat();   // Becomes arr2b = ['a', 'b', 'c'] - deep copy\n</code></pre>\n\n<p><strong>Deep copy an array of objects:</strong> </p>\n\n<pre><code>var arr1 = [{object:'a'}, {object:'b'}];\n</code></pre>\n\n<p>Write a custom function: (has faster performance than $.extend() or JSON.parse)</p>\n\n<pre><code>function copy(o) {\n   var out, v, key;\n   out = Array.isArray(o) ? [] : {};\n   for (key in o) {\n       v = o[key];\n       out[key] = (typeof v === \"object\") ? copy(v) : v;\n   }\n   return out;\n}\n\ncopy(arr1);\n</code></pre>\n\n<p>Use native solutions:</p>\n\n<pre><code>Object.assign(arr1) // Ecmascript 6\n</code></pre>\n\n<p>Use 3rd-party utility functions:</p>\n\n<pre><code>JSON.parse(JSON.stringify(arr1)); // Native\n$.extend(true, [], arr1); // Jquery Extend\n_.extend(arr1); // Underscore\n_.cloneDeep(arr1); // Lo-dash\n</code></pre>\n\n<p>Where Jquery's $.extend has better performance:<br>\n<a href=\"http://jsperf.com/js-deep-copy/2\" rel=\"nofollow\">http://jsperf.com/js-deep-copy/2</a><br>\n<a href=\"http://jsperf.com/jquery-extend-vs-json-parse/2\" rel=\"nofollow\">http://jsperf.com/jquery-extend-vs-json-parse/2</a>  </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "tfmontague",
                        "user_id": 1404726
                    },
                    "score": 8
                }
            ],
            "body": "<p>What is the most efficient way to clone a JavaScript object? I've seen <code>obj = eval(uneval(o));</code> being used, but that's currently Firefox-only. In Mootools 1.2, I've done things like <code>obj = JSON.decode(JSON.encode(o));</code> but question the efficiency.</p>\n\n<p>I've also seen recursive copying functions with various flaws. I'm surprised no canonical solution exists.</p>\n",
            "last_activity_date": 1426555109,
            "owner": {
                "display_name": "jschrab",
                "user_id": 12694
            },
            "question_id": 122102,
            "score": 1957,
            "tags": [
                "javascript",
                "object",
                "clone"
            ],
            "title": "What is the most efficient way to clone an object?"
        },
        {
            "answer_count": 36,
            "answers": [
                {
                    "body": "<p>It would help if you were a little more descriptive in what you are trying to do.  If you are trying to generate paged data, there are some options in how you do this.  You can generate separate links for each page that you want to be able to get directly to.</p>\n\n<pre><code>&lt;a href='/path-to-page?page=1' class='pager-link'&gt;1&lt;/a&gt;\n&lt;a href='/path-to-page?page=2' class='pager-link'&gt;2&lt;/a&gt;\n&lt;span class='pager-link current-page'&gt;3&lt;/a&gt;\n...\n</code></pre>\n\n<p>Note that the current page in the example is handled differently in the code and with CSS.</p>\n\n<p>If you want the paged data to be changed via AJAX, this is where jQuery would come in.  What you would do is add a click handler to each of the anchor tags corresponding to a different page.  This click handler would invoke some jQuery code that goes and fetches the next page via AJAX and updates the table with the new data.  The example below assumes that you have a web service that returns the new page data.</p>\n\n<pre><code>$(document).ready( function() {\n    $('a.pager-link').click( function() {\n        var page = $(this).attr('href').split(/\\?/)[1];\n        $.ajax({\n            type: 'POST',\n            url: '/path-to-service',\n            data: page,\n            success: function(content) {\n               $('#myTable').html(content);  // replace\n            }\n        });\n        return false; // to stop link\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "tvanfosson",
                        "user_id": 12950
                    },
                    "score": 62
                },
                {
                    "body": "<p>jQuery is not necessary, and <strong><code>window.location.replace(...)</code></strong> will best simulate an HTTP redirect.  </p>\n\n<p>It is better than using <code>window.location.href =</code>, because <code>replace()</code> does not put the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco.  If you want to simulate someone clicking on a link, use <code>location.href</code>.  If you want to simulate an HTTP redirect, use <code>location.replace</code>.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>// similar behavior as an HTTP redirect\nwindow.location.replace(\"http://stackoverflow.com\");\n\n// similar behavior as clicking on a link\nwindow.location.href = \"http://stackoverflow.com\";\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Ryan McGeary",
                        "user_id": 8985
                    },
                    "score": 6200
                },
                {
                    "body": "<pre><code>var url = 'asdf.html';\nwindow.location.href = url;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user188973"
                    },
                    "score": 29
                },
                {
                    "body": "<p><strong>WARNING:</strong> This answer has been provided as a possible solution. Although, obviously, the pure JavaScript approach is the best one, as this requires jQuery.</p>\n\n<pre><code>var url = \"http://stackoverflow.com\";    \n$(location).attr('href',url);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Boris Gu&#233;ry",
                        "user_id": 61337
                    },
                    "score": 620
                },
                {
                    "body": "<p>This works for every browser:</p>\n\n<pre><code>window.location.href = 'your_url';\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Fred",
                        "user_id": 484764
                    },
                    "score": 50
                },
                {
                    "body": "<pre><code>$jq(window).attr(\"location\",\"http://google.fr\");\n</code></pre>\n\n<p>This version works well with jQuery 1.6.2.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "xloadx",
                        "user_id": 929302
                    },
                    "score": 17
                },
                {
                    "body": "<p>You can do that without jQuery as:</p>\n\n<pre><code>window.location = \"http://yourdomain.com\";\n</code></pre>\n\n<p>And if you want only jQuery then you can do it like:</p>\n\n<pre><code>$jq(window).attr(\"location\",\"http://yourdomain.com\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ScoRpion",
                        "user_id": 995113
                    },
                    "score": 27
                },
                {
                    "body": "<p>All of these answers are correct, but I'll post this for those who might run into the same strange issue that I did. I was having an issue with <code>HTTP_REFERER</code> getting <strong>lost</strong> when using simply location.href.</p>\n\n<p>In <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> and lower, location.href (or any &amp; all variations location - will lose referrer), which for secure sites is important to maintain, because testing for it (URL pasting, session, etc.) <em>can</em> be helpful in telling whether a request is legitimate.\n<em>(<strong>Note ::</strong> there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)</em></p>\n\n<p>My cross-browser fix is this simple function. Assuming you, of course, are worried about losing <code>HTTP_REFERER</code> as I stated (otherwise you can just use location.href, etc.).</p>\n\n<p><strong>Usage: <code>Redirect('anotherpage.aspx');</code></strong></p>\n\n<pre><code>function Redirect (url) {\n    var ua        = navigator.userAgent.toLowerCase(),\n        isIE      = ua.indexOf('msie') !== -1,\n        version   = parseInt(ua.substr(4, 2), 10);\n\n    // Internet Explorer 8 and lower\n    if (isIE &amp;&amp; version &lt; 9) {\n        var link = document.createElement('a');\n        link.href = url;\n        document.body.appendChild(link);\n        link.click();\n    }\n\n    // All other browsers\n    else { window.location.href = url; }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mcpDESIGNS",
                        "user_id": 1492009
                    },
                    "score": 69
                },
                {
                    "body": "<p>But if someone wants to redirect back to home page then he/she may use the following snippet.</p>\n\n<pre><code>window.location = window.location.host\n</code></pre>\n\n<p>It would be helpful if you have three different environments as development, staging, and production.</p>\n\n<p>You can explore this window or window.location object by just putting these words in Chrome Console or <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a>'s Console.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nadeem Yasin",
                        "user_id": 1103486
                    },
                    "score": 28
                },
                {
                    "body": "<p>On your click function, just add:</p>\n\n<pre><code>window.location.href = \"The URL where you want to redirect\";\n$('#id').click(function(){\n    window.location.href = \"http://www.google.com\";\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Swaprks",
                        "user_id": 1445754
                    },
                    "score": 13
                },
                {
                    "body": "<p>I also think that <code>location.replace(URL)</code> is the best way, but if you want to notify the search engines about your redirection (they don't analyze JavaScript code to see the redirection) you should add the <code>rel=\"canonical\"</code> meta tag to your website.</p>\n\n<p>Adding a noscript section with a HTML refresh meta tag in it, is also a good solution. I suggest you to use this <a href=\"http://online-marketing-technologies.com/tools/javascript-redirection-generator.html\" rel=\"nofollow\">JavaScript redirection tool</a> to create redirections. It also has Internet&nbsp;Explorer support to pass the HTTP referrer.</p>\n\n<p>Sample code without delay looks like this:</p>\n\n<pre><code>&lt;!-- Pleace this snippet right after opening the head tag to make it work properly --&gt;\n&lt;!-- REDIRECTING STARTS --&gt;\n&lt;link rel=\"canonical\" href=\"https://yourdomain.com\"/&gt;\n&lt;noscript&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"0;URL=https://yourdomain.com\"&gt;\n&lt;/noscript&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var url = \"https://yourdomain.com\";\n\n    // Internet Explorer 8 and lower fix\n    if (navigator.userAgent.match(/MSIE\\s(?!9.0)/))\n    {\n        var referLink = document.createElement(\"a\");\n        referLink.href = url;\n        document.body.appendChild(referLink);\n        referLink.click();\n    }\n    else {\n        // All other browsers\n        window.location.replace(url);\n    }\n&lt;/script&gt;\n&lt;!--REDIRECTING ENDS--&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Patartics Mil&#225;n",
                        "user_id": 2190252
                    },
                    "score": 36
                },
                {
                    "body": "<p>First write properly. You want to navigate within an application for another link from your application for another link. Here is the code:</p>\n\n<pre><code>window.location.href = \"http://www.google.com\";\n</code></pre>\n\n<p>And if you want to navigate pages within your application then I also have code, if you want.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anup",
                        "user_id": 2047151
                    },
                    "score": 9
                },
                {
                    "body": "<p>Use the following code:</p>\n\n<pre><code>$(\"#id\").click(function(){\n   window.location.href(\"https://www.google.com\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ijarlax",
                        "user_id": 1497812
                    },
                    "score": -3
                },
                {
                    "body": "<p>Write the below code after the PHP, HTML or jQuery section. If in the middle of the PHP or HTML section, then use the &lt;script> tag.</p>\n\n<pre><code>location.href = \"http://google.com\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bidyut",
                        "user_id": 1412912
                    },
                    "score": 7
                },
                {
                    "body": "<p>In JavaScript and jQuery we can use the following code to redirect the one page to another page:</p>\n\n<pre><code>window.location.href=\"http://google.com\";\nwindow.location.replace(\"page1.html\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2496033"
                    },
                    "score": 7
                },
                {
                    "body": "<p>jQuery is not needed. You can do this:</p>\n\n<pre><code>window.open(\"URL\",\"_self\",\"\",\"\")\n</code></pre>\n\n<p>It is that easy!</p>\n\n<p>The best way to initiate an HTTP request is with <code>document.loacation.href.replace('URL')</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SpeedyNinja",
                        "user_id": 2016735
                    },
                    "score": 9
                },
                {
                    "body": "<p>So, the question is how to make a redirect page, and not how to redirect to a website?</p>\n\n<p>You only need to use JavaScript for this. Here is some tiny code that will create a dynamic redirect page.</p>\n\n<pre><code>&lt;script&gt;\n    var url = window.location.search.split('url=')[1]; // Get the URL after ?url=\n    if( url ) window.location.replace(url);\n&lt;/script&gt;\n</code></pre>\n\n<p>So say you just put this snippet into a <code>redirect/index.html</code> file on your website you can use it like so.</p>\n\n<blockquote>\n  <p><code>http://www.mywebsite.com/redirect?url=http://stackoverflow.com</code></p>\n</blockquote>\n\n<p>And if you go to that link it will automatically redirect you to <strong>stackoverflow.com</strong>.</p>\n\n<blockquote>\n  <p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\" rel=\"nofollow\">Link to Documentation</a></strong></p>\n</blockquote>\n\n<p><strong>And that's how you make a <em>Simple</em> redirect page with JavaScript</strong></p>\n\n<p>Edit:</p>\n\n<p>There is also one thing to note. I have added <code>window.location.replace</code> in my code because I think it suits a redirect page, but, you must know that when using <code>window.location.replace</code> and you get redirected, when you press the back button in your browser it will <strong>not</strong> got back to the redirect page, and it will go back to the page before it, take a look at this little demo thing.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <p>The process: <strong>store home</strong> => <strong>redirect page to google</strong> => <strong>google</strong></p>\n  \n  <p>When at google: <strong>google</strong> => <strong>back button in browser</strong> => <strong>store home</strong></p>\n</blockquote>\n\n<p>So, if this suits your needs then everything should be fine. If you want to include the redirect page in the browser history replace this </p>\n\n<pre><code>if( url ) window.location.replace(url);\n</code></pre>\n\n<p>with </p>\n\n<pre><code>if( url ) window.location.href = url;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Connor",
                        "user_id": 1907358
                    },
                    "score": 12
                },
                {
                    "body": "<p>Try this:</p>\n\n<p><code>location.assign(\"<a href=\"http://www.google.com\">http://www.google.com</a>\");</code></p>\n\n<p><a href=\"http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_loc_assign\">Reference</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "t i l a k",
                        "user_id": 1343736
                    },
                    "score": 7
                },
                {
                    "body": "<p>Instead of redirecting, you can replace the window the user is on with the page you want to redirect to using JavaScript code like this:</p>\n\n<pre><code>window.open('url', '_self');\n</code></pre>\n\n<p>You can also do this:</p>\n\n<pre><code>window.location.href = \"http://example.com\";\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Oliver",
                        "user_id": 2827296
                    },
                    "score": 6
                },
                {
                    "body": "<p>Here is a time-delay redirection. You can set the delay time to whatever you want:</p>\n\n<pre><code>    &lt;!doctype html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Your Document Title&lt;/title&gt;\n      &lt;script type=\"text/javascript\"&gt;\n        function delayer(delay){\n          onLoad=setTimeout('window.location.href = \"http://www.google.com/\"',delay);\n        }   \n      &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;script&gt;delayer(8000)&lt;/script&gt;\n      &lt;div&gt;You will be redirected in 8 seconds!&lt;/div&gt;\n    &lt;/body&gt;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Stefan Gruenwald",
                        "user_id": 1751920
                    },
                    "score": 7
                },
                {
                    "body": "<p>You can use it like in the following code where getGuestHouseRequestToForward is the request mapping (<a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a>). You can also use your URL.</p>\n\n<pre><code>function savePopUp(){\n    $.blockUI();\n    $.ajax({\n        url:\"saveForwardingInformationForGuestHouse?roomType=\"+$(\"#roomType\").val(),\n        data: $(\"#popForm\").serialize(),\n        dataType: \"json\",\n        error: (function() {\n            alert(\"Server Error\");\n            $.unblockUI();\n    }),\n    success: function(map) {\n        $(\"#layer1\").hide();\n        $.unblockUI();\n        window.location = \"getGuestHouseRequestToForward\";\n    }\n});\n</code></pre>\n\n<p>This is for the same context of the application.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vinay Sharma",
                        "user_id": 2605850
                    },
                    "score": 2
                },
                {
                    "body": "<p>JavaScript provides you many methods to retrieve and change the current URL which is displayed in browser's address bar. All these methods uses the Location object, which is  a property of the Window object. You can create a new Location object that has the current URL as follows..</p>\n\n<pre><code>var currentLocation = window.location;\n</code></pre>\n\n<p><strong>Basic Structure of a URL</strong></p>\n\n<pre><code>&lt;protocol&gt;//&lt;hostname&gt;:&lt;port&gt;/&lt;pathname&gt;&lt;search&gt;&lt;hash&gt;\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/4kiBE.jpg\" alt=\"enter image description here\"></p>\n\n<ol>\n<li><p>Protocol -- Specifies the protocol name be used to access the resource on the Internet. (HTTP (without SSL) or HTTPS (with SSL))</p></li>\n<li><p>hostname -- Host name specifies the host that owns the resource. For example, www.stackoverflow.com. A server provides services using the name of the host.</p></li>\n<li><p>port -- A port number used to recognize a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.</p></li>\n<li><p>pathname -- The path gives info about the specific resource within the host that the Web client wants to access. For example, stackoverflow.com/index.html.</p></li>\n<li><p>query --  A query string follows the path component, and provides a string of information that the resource can utilize for some purpose (for example, as parameters for a search or as data to be processed). </p></li>\n<li><p>hash -- The anchor portion of a URL, includes the hash sign (#).</p></li>\n</ol>\n\n<p>With these Location object properties you can access all of these URL components</p>\n\n<ol>\n<li><strong>hash</strong>   -Sets or returns the anchor portion of a URL.  </li>\n<li><strong>host</strong>   -Sets\nor returns the hostname and port of a URL.   </li>\n<li><strong>hostname</strong>   -Sets or\nreturns the hostname of a URL.   </li>\n<li><strong>href</strong>   -Sets or returns the entire\nURL.  </li>\n<li><strong>pathname</strong>   -Sets or returns the path name of a URL.   </li>\n<li><strong>port</strong> -Sets or returns the port number the server uses for a URL.  </li>\n<li><strong>protocol</strong>   -Sets or returns the protocol of a URL.   </li>\n<li><strong>search</strong>   -Sets\nor returns the query portion of a URL</li>\n</ol>\n\n<p>Now If you want to change a page or redirect the user to some other page you can use the <code>href</code> property of the Location object like this</p>\n\n<p>You can use the href property of the Location object.</p>\n\n<pre><code>window.location.href = \"http://www.stackoverflow.com\";\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/agrawalnikhil/7Ly8f/\">Demo Fiddle</a></p>\n\n<p><strong>Location Object</strong> also have these three methods</p>\n\n<ol>\n<li><strong>assign()</strong> -- Loads a new document.</li>\n<li><strong>reload()</strong> -- Reloads the current document.</li>\n<li><strong>replace()</strong> -- Replaces the current document with a new one</li>\n</ol>\n\n<p>You can use assign() and replace methods also to redirect to other pages like these</p>\n\n<pre><code>location.assign(\"http://www.stackoverflow.com\");\n\nlocation.replace(\"http://www.stackoverflow.com\");\n</code></pre>\n\n<p><em><strong>How assign() and replace() differs</strong> -- The difference between replace() method and assign() method(), is that replace() removes the URL of the current document from the document history, means it is not possible to use the \"back\" button to navigate back to the original document. So Use the assign() method if you want to load a new document, andwant to give the option to navigate back to the original document.</em></p>\n\n<p>You can change the location object href property using <strong>jQuery</strong> also  like this</p>\n\n<pre><code>$(location).attr('href',url);\n</code></pre>\n\n<p>And hence you can redirect the user to some other url.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nikhil Agrawal",
                        "user_id": 2218452
                    },
                    "score": 32
                },
                {
                    "body": "<p>You need to put this line on your code</p>\n\n<pre><code> $(location).attr('href',\"http://stackoverflow.com\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ashish Ratan",
                        "user_id": 2312605
                    },
                    "score": 7
                },
                {
                    "body": "<p><strong><em>may be one of the followings helps someone.</em></strong></p>\n\n<pre><code>1. window.location.href=\"http://www.clicktable.com\";\n</code></pre>\n\n<hr>\n\n<pre><code>2. window.history.back(-1);                                     //  back\n</code></pre>\n\n<hr>\n\n<pre><code>3. window.navigate(\"top.jsp\");                                  // old-IE-only\n</code></pre>\n\n<hr>\n\n<pre><code>4. self.location=\"top.htm\";\n</code></pre>\n\n<hr>\n\n<pre><code>5. top.location=\"error.jsp\";\n</code></pre>\n\n<hr>\n\n<pre><code>6. window.location = window.location.host;\n</code></pre>\n\n<hr>\n\n<pre><code>7. $(location).attr('href',\"http://www.google.com\");            //jQuery\n</code></pre>\n\n<hr>\n\n<pre><code>8. $jq(window).attr(\"location\",\"http://www.google.com\");        //jQuery\n</code></pre>\n\n<hr>\n\n<pre><code>9. window.location.replace(\"http://www.kqingdom.com\");\n</code></pre>\n\n<hr>\n\n<pre><code>10. window.location.assign(\"http://www.mozilla.org\");\n</code></pre>\n\n<hr>\n\n<pre><code>11. document.location.href = '/path';\n</code></pre>\n\n<hr>\n\n<pre><code>12. window.history.go(-1);                                     //  back\n</code></pre>\n\n<hr>\n\n<pre><code>13. $(location).prop('href',\"http://www.google.com\");          //  jquery\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Govind Singh Nagarkoti",
                        "user_id": 3196723
                    },
                    "score": 56
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar url = \"https://yourdomain.com\";\n\n// IE8 and lower fix\nif (navigator.userAgent.match(/MSIE\\s(?!9.0)/))\n{\n    var referLink = document.createElement(\"a\");\n    referLink.href = url;\n    document.body.appendChild(referLink);\n    referLink.click();\n}\n\n// All other browsers\nelse { window.location.replace(url); }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Stral",
                        "user_id": 1950954
                    },
                    "score": 6
                },
                {
                    "body": "<p><strong>#Page redirect in jQuery/JavaScript</strong></p>\n\n<p>This is very simple. See this example code:</p>\n\n<pre><code>function myfunction()\n{\n    var i = document.getElementById('Login').value;\n    if (i == 'Login')\n    {\n        window.location = \"login.php\";\n    }\n    else\n        window.location = \"Logout.php\";\n}\n</code></pre>\n\n<p>If you want to give a complete URL as <strong><code>window.location = \"www.google.co.in\";</code></strong>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sakthi Karthik",
                        "user_id": 1931001
                    },
                    "score": 6
                },
                {
                    "body": "<p>This is how I use it.</p>\n\n<pre><code>   window.location.replace('yourPage.aspx');   \n   // If you're on root and redirection page is also on the root\n\n   window.location.replace(window.location.host + '/subDirectory/yourPage.aspx');\n\n   // If you're in sub directory and redirection page is also in some other sub directory.\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lucky",
                        "user_id": 1106625
                    },
                    "score": 4
                },
                {
                    "body": "<p>Use:</p>\n\n<pre><code>location.href = \"http://google.com\";\n</code></pre>\n\n<p>Don't write <code>window</code>. It's optional.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Hitesh Modha",
                        "user_id": 3274503
                    },
                    "score": 3
                },
                {
                    "body": "<p>There are three main ways to do this,</p>\n\n<pre><code>window.location.href='blaah.com';\nwindow.location.assign('blaah.com');\n</code></pre>\n\n<p>and...</p>\n\n<pre><code>window.location.replace('blaah.com');\n</code></pre>\n\n<p>The last one is best, for a traditional redirect, because it will not save the page you went to before being redirected in your search history. However, if you just want to open a tab with JavaScript, you can use any of the above.<a href=\"http://basicuse.net/tips/pl/scripting_languages/javascript/how_to_make_a_page_redirect_in_javascript\" rel=\"nofollow\">1</a></p>\n\n<p>EDIT: The <code>window</code> prefix is optional.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ben",
                        "user_id": 3513171
                    },
                    "score": 4
                },
                {
                    "body": "<p>The best way to redirect a page is:</p>\n\n<pre><code>window.location.replace(\"http://www.example.com\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adeel Gill",
                        "user_id": 3852426
                    },
                    "score": 1
                },
                {
                    "body": "<p>This page will redirect to <a href=\"http://www.google.com\" rel=\"nofollow\">http://www.google.com</a> after 3000 milliseconds</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;You will be redirected to google shortly.&lt;/p&gt;\n        &lt;script&gt;\n            setTimeout(function(){\n                window.location.href=\"http://www.google.com\"; // The URL that will be redirected too.\n            }, 3000); // The bigger the number the longer the delay.\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Different options are as followed:</p>\n\n<pre><code>window.location.href=\"url\"; //simulates normal navigation to a new page\nwindow.location.replace(\"url\");//removes current url from history and replaces with new url\nwindow.location.assign(\"url\");//adds new url to history stack and redirects to the new url\n\nwindow.history.back();//Simulates a back button click\nwindow.history.go(-1);//Simulates a back button click\nwindow.history.back(-1);//Simulates a back button click\nwindow.navigate(\"page.html\");//Same as window.location=\"url\" \n</code></pre>\n\n<p>When using replace, the back button will not go back to the redirect page, as if it was never in the history. If you want the user to be able to go back to the redirect page then use <code>window.location.href</code> or <code>window.location.assign</code>. If you do use an option that lets the user go back to the redirect page, remember that when you enter the redirect page it will redirect you back. So put that into consideration when picking an option for your redirect. under conditions where the page is only redirecting when an action is done by the user then having the page in the back button history will be okay. But if the page auto redirects then you should use replace so that the user can use the back button without getting forced back to the page the redirect sends. </p>\n\n<p>I would also like to point out, people don't like to be randomly redirected. Only redirect people when absolutely needed. If you start redirecting people randomly they will never go to your site again. </p>\n\n<p>Here is a fun little page that kicks you out of the page.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Go Away&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Go Away&lt;/h1&gt;\n        &lt;script&gt;\n            setTimeout(function(){\n                window.history.back();\n            }, 3000);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If you combine the two page examples together you would have an infant loop of rerouting that will guarantee that your user will never want to use your site ever again. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Patrick W. McMahon",
                        "user_id": 2576539
                    },
                    "score": 7
                },
                {
                    "body": "<p>Here is the code to redirect to some other page with a timeout of 10 seconds.</p>\n\n<pre><code>&lt;script&gt;\n    function Redirect()\n    {\n        window.location=\"http://www.adarshkr.com\";\n    }\n\n    document.write(\"You will be redirected to a new page in 10 seconds.\");\n    setTimeout('Redirect()', 10000);\n&lt;/script&gt;\n</code></pre>\n\n<p>You can also do it like this, on click of a button using location.assign:</p>\n\n<pre><code>&lt;input type=\"button\" value=\"Load new document\" onclick=\"newPage()\"&gt;\n&lt;script&gt;\n    function newPage() {\n        window.location.assign(\"http://www.adarshkr.com\")\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adarsh Gowda K R",
                        "user_id": 4006919
                    },
                    "score": 1
                },
                {
                    "body": "<p>Simply use any one of the following:</p>\n\n<pre><code>window.location = \"Your required URL\";\n</code></pre>\n\n<p>or</p>\n\n<pre><code>window.location.href = \"Your required URL\";\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vidhya Krishnan",
                        "user_id": 2818411
                    },
                    "score": 2
                },
                {
                    "body": "<p><strong>Redirecting User using jQuery/JavaScript</strong></p>\n\n<p>By using the location object in jQuery or JavaScript we can redirect the user to another web page.</p>\n\n<p><strong>In jQuery</strong></p>\n\n<p>The code to redirect the user from one page to another is:</p>\n\n<pre><code>var url = 'http://www.example.com';\n$(location).attr('href', url);\n</code></pre>\n\n<p><strong>In JavaScript</strong></p>\n\n<p>The code to redirect the user from one page to another is:</p>\n\n<pre><code>var url = 'http://www.example.com';\nwindow.location.href = url;\n</code></pre>\n\n<p><strong>Or</strong></p>\n\n<pre><code>var url = 'http://www.example.com';\nwindow.location = url;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BigByte",
                        "user_id": 4018783
                    },
                    "score": 1
                },
                {
                    "body": "<p>jQuery is a JavaScript framework made to make a smarter, easier and slickier UI (user interface).</p>\n\n<p>To just redirect page you can use JavaScript directly:</p>\n\n<pre><code>  window.location.href = \"/destanation.html\";\n</code></pre>\n\n<p>Or if you need to delay:</p>\n\n<pre><code>setTimeout(function() {\n  window.location.href = \"/destanation.html\";\n}, 2000); // **Put your time in milli-seconds here**\n</code></pre>\n\n<p>jQuery allows you to select elements from a Web page with ease. You can find anything you want in a page and then use jQuery to add special effects, react to user actions, or show and hide content inside or outside the element you have selected. All these tasks start with knowing <a href=\"http://learn.jquery.com/using-jquery-core/selecting-elements/\" rel=\"nofollow\">how to select an element</a>. </p>\n\n<pre><code>function redirect(){\n    .animate({\n        marginLeft: 100px; //Put some CSS animation here \n    }, 500, function() {\n      // OK, finished jQuery staff, let's go redirect \n      window.location.href = \"/destanation.html\";\n})\n</code></pre>\n\n<p>Imagine someone wrote a script/plugin that is 10000 lines of code?!\nWell, with jQuery you can connect to this code with just a line or two.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SergeDirect",
                        "user_id": 1316361
                    },
                    "score": 2
                },
                {
                    "body": "<p>Just had to update this ridiculousness with yet another newer jQuery method.</p>\n\n<pre><code>var url = 'http://www.fiftywaystoleaveyourlocation.com';\n$(location).prop('href',url);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Epiphany",
                        "user_id": 425714
                    },
                    "score": 1
                }
            ],
            "body": "<p>How can I redirect the user from one page to another using jQuery?</p>\n",
            "last_activity_date": 1427298360,
            "owner": {
                "display_name": "venkatachalam",
                "user_id": 44984
            },
            "question_id": 503093,
            "score": 3317,
            "tags": [
                "javascript",
                "jquery",
                "redirect"
            ],
            "title": "How can I make a redirect page using jQuery?"
        },
        {
            "answer_count": 40,
            "answers": [
                {
                    "body": "<p>JavaScript can match a regular expression:</p>\n\n<pre><code>emailAddress.match( / some_regex /);\n</code></pre>\n\n<p>Here's an <a href=\"http://tools.ietf.org/html/rfc22\" rel=\"nofollow\">RFC22</a> regular expression for emails:</p>\n\n<pre><code>^((?&gt;[a-zA-Z\\d!#$%&amp;'*+\\-/=?^_`{|}~]+\\x20*|\"((?=[\\x01-\\x7f])[^\"\\\\]|\\\\[\\x01-\\x7f])*\n\"\\x20*)*(?&lt;angle&gt;&lt;))?((?!\\.)(?&gt;\\.?[a-zA-Z\\d!#$%&amp;'*+\\-/=?^_`{|}~]+)+|\"((?=[\\x01-\\x\n7f])[^\"\\\\]|\\\\[\\x01-\\x7f])*\")@(((?!-)[a-zA-Z\\d\\-]+(?&lt;!-)\\.)+[a-zA-Z]{2,}|\\[(((?(?&lt;\n!\\[)\\.)(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)){4}|[a-zA-Z\\d\\-]*[a-zA-Z\\d]:((?=[\\x01-\\x7f])\n[^\\\\\\[\\]]|\\\\[\\x01-\\x7f])+)\\])(?(angle)&gt;)$\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ben Scheirman",
                        "user_id": 3381
                    },
                    "score": 26
                },
                {
                    "body": "<p>Using <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expressions</a> is probably the best way. Here's an example (<a href=\"http://jsbin.com/ozeyag/19\">live demo</a>):</p>\n\n<pre><code>function validateEmail(email) {\n    var re = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n</code></pre>\n\n<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can  easily be disabled. This should be validated on the server side as well.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "sectrean",
                        "user_id": 3880
                    },
                    "score": 1350
                },
                {
                    "body": "<p>Wow, there are lots of complexity here. If all you want to do is just catch the most obvious syntax errors, I would do something like this:</p>\n\n<pre><code>\\S+@\\S+\n</code></pre>\n\n<p>It usually catches the most obvious errors that the user makes and assures that the form is mostly right, which is what JavaScript validation is all about.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jaymon",
                        "user_id": 5006
                    },
                    "score": 141
                },
                {
                    "body": "<p>There's something you have to understand the second you decide to use a regular expression to validate emails: <a href=\"http://ex-parrot.com/~pdw/Mail-RFC822-Address.html\">It's probably not a good idea</a>. Once you have come to terms with that, there are many implementations out there that can get you halfway there, <a href=\"http://www.regular-expressions.info/email.html\">this article sums them up nicely.</a></p>\n\n<p>In short, however, the only way to be absolutely, positively sure that what the user entered is in fact an email is to actually send an email and see what happens. Other than that it's all just guesses.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paolo Bergantino",
                        "user_id": 16417
                    },
                    "score": 181
                },
                {
                    "body": "<p>This was stolen from <a href=\"http://codesnippets.joyent.com/posts/show/1917\">http://codesnippets.joyent.com/posts/show/1917</a></p>\n\n<pre><code>email = $('email');\nfilter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\nif (filter.test(email.value)) {\n  // Yay! valid\n  return true;\n}\nelse\n  {return false;}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adam McKee",
                        "user_id": 98601
                    },
                    "score": 12
                },
                {
                    "body": "<p>Following regular expression:</p>\n\n<pre><code>/^([\\w]+)(.[\\w]+)*@([\\w]+)(.[\\w]{2,3}){1,2}$/;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vikram",
                        "user_id": 95107
                    },
                    "score": -6
                },
                {
                    "body": "<p>It's hard to get an email validator 100% correct. The only really way to get it correct would be to send a test email to the account. That said, there are a few basic checks that can help make sure that you're getting something reasonable.</p>\n\n<p>Some things to improve:</p>\n\n<p>Instead of new RegExp, just try writing the regexp out like this:</p>\n\n<pre><code>if (reg.test(/@/))\n</code></pre>\n\n<p>Second, check to make sure that a period comes after the @ sign, and make sure that there are characters between the @s and periods. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jacobangel",
                        "user_id": 31318
                    },
                    "score": 3
                },
                {
                    "body": "<p>Just for completeness, <a href=\"http://www.regular-expressions.info/email.html\">here you have another RFC 2822 compliant regex</a></p>\n\n<blockquote>\n  <p>The official standard is known as <a href=\"https://tools.ietf.org/html/rfc2822#section-3.4.1\">RFC 2822</a>. It describes the syntax that valid email addresses must adhere to. You can (<strong>but you shouldn't</strong> &mdash; <a href=\"http://www.regular-expressions.info/email.html\">read on</a>) implement it with this regular expression:</p>\n  \n  <p><code>(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])</code></p>\n  \n  <p>(...) We get a more practical implementation of RFC 2822 if we omit the syntax using double quotes and square brackets. <strong>It will still match 99.99% of all email addresses in actual use today.</strong></p>\n  \n  <p><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?</code></p>\n  \n  <p>A further change you could make is to allow any two-letter country code top level domain, and only specific generic top level domains. <strong>This regex filters dummy email addresses like <code>asdf@adsf.adsf</code></strong>. You <strong>will need to update it as new top-level domains are added</strong>.</p>\n  \n  <p><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b</code></p>\n  \n  <p>So even when following official standards, there are still trade-offs to be made. <strong><em>Don't blindly copy regular expressions from online libraries or discussion forums. Always test them on your own data and with your own applications.</em></strong></p>\n</blockquote>\n\n<p><sub>Emphasis mine</sub></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "voyager",
                        "user_id": 34813
                    },
                    "score": 203
                },
                {
                    "body": "<p>Here is a very good discussion about using regular expressions to validate email addresses; \"<a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\" rel=\"nofollow\">Comparing E-mail Address Validating Regular Expressions</a>\"</p>\n\n<p>Here is the current top expression, that is JavaScript compatible, for reference purposes:</p>\n\n<pre><code>/^[-a-z0-9~!$%^&amp;*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&amp;*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "spoon16",
                        "user_id": 3957
                    },
                    "score": 3
                },
                {
                    "body": "<p>Apparently, that's it:</p>\n\n<pre><code>/^([\\w\\!\\#$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i\n</code></pre>\n\n<p>Taken from <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\" rel=\"nofollow\">http://fightingforalostcause.net/misc/2006/compare-email-regex.php</a> on Oct 1 '10.</p>\n\n<p>But, of course, that's ignoring internationalization.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "F&#233;lix Saparelli",
                        "user_id": 231788
                    },
                    "score": 4
                },
                {
                    "body": "<p>Correct validation of email address in compliance with the RFCs is not something that can be achieved with a one-liner regular expression. An article with the best solution I've found in PHP is <em><a href=\"http://www.dominicsayers.com/isemail/\" rel=\"nofollow\">What is a valid email address?</a></em>. Obviously, it has been ported to Java. I think the function is too complex to be ported and used in JavaScript.</p>\n\n<p>A good practice is to validate your data on the client, but double-check the validation on the server. With this in mind, you can simply check whether a string looks like a valid email address on the client and perform the strict check on the server.</p>\n\n<p>Here's the JavaScript function I use to check if a string looks like a valid mail address:</p>\n\n<pre><code>function looksLikeMail(str) {\n    var lastAtPos = str.lastIndexOf('@');\n    var lastDotPos = str.lastIndexOf('.');\n    return (lastAtPos &lt; lastDotPos &amp;&amp; lastAtPos &gt; 0 &amp;&amp; str.indexOf('@@') == -1 &amp;&amp; lastDotPos &gt; 2 &amp;&amp; (str.length - lastDotPos) &gt; 2);\n}\n</code></pre>\n\n<p>Explanation:</p>\n\n<ul>\n<li><p><code>lastAtPos &lt; lastDotPos</code>: Last <code>@</code> should be before last <code>.</code> since <code>@</code> cannot be part of server name (as far as I know).</p></li>\n<li><p><code>lastAtPos &gt; 0</code>: There should be something (the email username) before the last <code>@</code>.</p></li>\n<li><p><code>str.indexOf('@@') == -1</code>: There should be no <code>@@</code> in the address. Even if <code>@</code> appears as the last character in email username, it has to be quoted so <code>\"</code> would be between that <code>@</code> and the last <code>@</code> in the address.</p></li>\n<li><p><code>lastDotPos &gt; 2</code>: There should be at least three characters before the last dot, for example <code>a@b.com</code>.</p></li>\n<li><p><code>(str.length - lastDotPos) &gt; 2</code>: There should be enough characters after the last dot to form a two-character domain. I'm not sure if the brackets are necessary.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Milo\u0161 Ra\u0161i\u0107",
                        "user_id": 590569
                    },
                    "score": 28
                },
                {
                    "body": "<p>Don't validate, just send a confirmation email instead.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "bobobobo",
                        "user_id": 111307
                    },
                    "score": 14
                },
                {
                    "body": "<p>HTML5 itself has email validation. If your browser supports HTML5 then you can use the following code.</p>\n\n<pre><code>&lt;form&gt;&lt;input type=\"email\" placeholder=\"me@example.com\"&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/anoop26667/KDpjt/\">jsFiddle</a> link</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anoop",
                        "user_id": 460942
                    },
                    "score": 38
                },
                {
                    "body": "<p>You should not use regular expressions to validate an input string to check if it's an email. It's too complicated and would not cover all the cases.</p>\n\n<p>Now since you can only cover 90% of the cases, write something like:</p>\n\n<pre><code>function isPossiblyValidEmail(txt) {\n   return txt.length &gt; 5 &amp;&amp; txt.indexOf('@')&gt;0;\n}\n</code></pre>\n\n<p>You can refine it. For instance, 'aaa@' is valid. But overall you get the gist. And don't get carried away... A simple 90% solution is better than 100% solution that does not work. </p>\n\n<p>The world needs simpler code...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Zo72",
                        "user_id": 246394
                    },
                    "score": 10
                },
                {
                    "body": "<p>I've slightly modified Jaymon's answer for people who want really simple validation in the form of:</p>\n\n<p>anystring@anystring.anystring</p>\n\n<p>The regular expression:</p>\n\n<pre><code>/\\S+@\\S+\\.\\S+/\n</code></pre>\n\n<p>Example JavaScript function:</p>\n\n<pre><code>function validateEmail(email) \n{\n    var re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Squirtle",
                        "user_id": 270821
                    },
                    "score": 176
                },
                {
                    "body": "<p>In contrast to <em>squirtle</em>, here is a complex solution, but it does a mighty fine job of validating emails properly:</p>\n\n<pre><code>function isEmail(email) { \n    return /^((([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(email);\n} \n</code></pre>\n\n<p>Use like so:<br><br></p>\n\n<pre><code>if (isEmail('youremail@yourdomain.com') == true){ console.log('This is email is valid'); }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "steve",
                        "user_id": 587543
                    },
                    "score": 1
                },
                {
                    "body": "<p>Sectrean's solution works great, but it was failing my <a href=\"https://en.wikipedia.org/wiki/Lint_%28software%29\" rel=\"nofollow\">linter</a>. So I added some escapes:</p>\n\n<pre><code>function validateEmail(email){ \n     var re = /^(([^&lt;&gt;()[]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([[0-9]{1,3}\\\u200c\u200b.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; \n     return re.test(email); \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Darren Cato",
                        "user_id": 111291
                    },
                    "score": 2
                },
                {
                    "body": "<pre><code>function validateEmail(elementValue){        \n    var emailPattern = /^[a-zA-Z0-9._]+[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,4}$/;  \n    return emailPattern.test(elementValue);   \n  }   \n</code></pre>\n\n<p>It returns true if the email address is valid. Otherwise, it will return false.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "amit kate",
                        "user_id": 1719963
                    },
                    "score": -5
                },
                {
                    "body": "<p>Do this (case insensitive)</p>\n\n<pre><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\n</code></pre>\n\n<p>Why?  It's based on RFC 2822, which is a standard ALL email addresses MUST adhere to.</p>\n\n<p>Here's an example of it being use in JavaScript</p>\n\n<pre><code>var emailCheck=/^[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;\nconsole.log( emailCheck.test('some.body@domain.co.uk') );\n</code></pre>\n\n<p>Note: Technically some emails can include quotes in the section before the @ symbol with escape characters inside the quotes (so you're email user can be obnoxious and contain stuff like @ and \"... as long as it's written in quotes) NOBODY DOES THIS EVER. It's obsolete. But, it IS included in the true RFC 2822 standard, and omitted here.</p>\n\n<p>More info: <a href=\"http://www.regular-expressions.info/email.html\">http://www.regular-expressions.info/email.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ryan Taylor",
                        "user_id": 845413
                    },
                    "score": 7
                },
                {
                    "body": "<p>In modern browsers you can build on top of @Sushil's answer with pure JavaScript and the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a>:</p>\n\n<pre><code>function validateEmail(value) {\n  var input = document.createElement('input');\n\n  input.type = 'email';\n  input.value = value;\n\n  return input.checkValidity();\n}\n</code></pre>\n\n<p>I've put together an example in the fiddle <a href=\"http://jsfiddle.net/boldewyn/2b6d5/\">http://jsfiddle.net/boldewyn/2b6d5/</a>. If you combine this with a <a href=\"https://en.wikipedia.org/wiki/Modernizr\">Modernizr</a> feature detection, it frees you from the regular expression massacre.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Boldewyn",
                        "user_id": 113195
                    },
                    "score": 20
                },
                {
                    "body": "<pre><code>&lt;form name=\"validation\" onSubmit=\"return checkbae()\"&gt;\n    Please input a valid email address:&lt;br /&gt;\n\n    &lt;input type=\"text\" size=18 name=\"emailcheck\"&gt;\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n\n&lt;script language=\"JavaScript1.2\"&gt;\n    var testresults\n    function checkemail(){\n        var str = document.validation.emailcheck.value\n        var filter = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n        if (filter.test(str))\n            testresults = true\n        else {\n            alert(\"Please input a valid email address!\")\n            testresults = false\n        }\n        return (testresults)\n    }\n&lt;/script&gt;\n\n&lt;script&gt;\n    function checkbae(){\n        if (document.layers || document.getElementById || document.all)\n            return checkemail()\n        else\n            return true\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tugrul Asik",
                        "user_id": 1172945
                    },
                    "score": 2
                },
                {
                    "body": "<p>My knowledge of <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"nofollow\">regular expressions</a> is not that good. That's why I check the general syntax with a simple regular expression first and check more specific options with other functions afterwards. This may not be not the best technical solution, but this way I'm way more flexible and faster.</p>\n\n<p>The most common errors I've come across are spaces (especially at the beginning and end) and occasionally a double dot.</p>\n\n<pre><code>function check_email(val){\n    if(!val.match(/\\S+@\\S+\\.\\S+/)){ // Jaymon's / Squirtle's solution\n        // Do something\n        return false;\n    }\n    if( val.indexOf(' ')!=-1 || val.indexOf('..')!=-1){\n        // Do something\n        return false;\n    }\n    return true;\n}\n\ncheck_email('check@thiscom'); // Returns false\ncheck_email('check@this..com'); // Returns false\ncheck_email(' check@this.com'); // Returns false\ncheck_email('check@this.com'); // Returns true\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Linkmichiel",
                        "user_id": 738331
                    },
                    "score": 3
                },
                {
                    "body": "<p>This is the correct RFC822 version.</p>\n\n<pre><code>function checkEmail(emailAddress) {\n  var sQtext = '[^\\\\x0d\\\\x22\\\\x5c\\\\x80-\\\\xff]';\n  var sDtext = '[^\\\\x0d\\\\x5b-\\\\x5d\\\\x80-\\\\xff]';\n  var sAtom = '[^\\\\x00-\\\\x20\\\\x22\\\\x28\\\\x29\\\\x2c\\\\x2e\\\\x3a-\\\\x3c\\\\x3e\\\\x40\\\\x5b-\\\\x5d\\\\x7f-\\\\xff]+';\n  var sQuotedPair = '\\\\x5c[\\\\x00-\\\\x7f]';\n  var sDomainLiteral = '\\\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\\\x5d';\n  var sQuotedString = '\\\\x22(' + sQtext + '|' + sQuotedPair + ')*\\\\x22';\n  var sDomain_ref = sAtom;\n  var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';\n  var sWord = '(' + sAtom + '|' + sQuotedString + ')';\n  var sDomain = sSubDomain + '(\\\\x2e' + sSubDomain + ')*';\n  var sLocalPart = sWord + '(\\\\x2e' + sWord + ')*';\n  var sAddrSpec = sLocalPart + '\\\\x40' + sDomain; // complete RFC822 email address spec\n  var sValidEmail = '^' + sAddrSpec + '$'; // as whole string\n\n  var reValidEmail = new RegExp(sValidEmail);\n\n  return reValidEmail.test(emailAddress);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "bvl",
                        "user_id": 1501285
                    },
                    "score": 16
                },
                {
                    "body": "<p>Simply check out if the entered email address is valid or not using HTML.</p>\n\n<pre><code>&lt;input type=\"email\"/&gt;\n</code></pre>\n\n<p>There isn't any need to write a function for validation.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2496033"
                    },
                    "score": 9
                },
                {
                    "body": "<p>All email addresses contain an 'at' symbol. Test that necessary condition</p>\n\n<pre><code>email.indexOf(\"@\") &gt; 0\n</code></pre>\n\n<p>Don't bother with anything more complicated. Even if you could perfectly determine whether an email is RFC-syntactically valid, that wouldn't tell you whether it belongs to the person who supplied it. That's what really matters.</p>\n\n<p>To test that, send a validation message.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Colonel Panic",
                        "user_id": 284795
                    },
                    "score": 14
                },
                {
                    "body": "<p>If you're using Closure you can use the built-in <code>goog.format.EmailAddress</code> type:</p>\n\n<p><a href=\"http://docs.closure-library.googlecode.com/git/class_goog_format_EmailAddress.html\" rel=\"nofollow\">http://docs.closure-library.googlecode.com/git/class_goog_format_EmailAddress.html</a></p>\n\n<p>For example:</p>\n\n<pre><code>goog.format.EmailAddress.isValidAddrSpec(\"blah@blah.com\")\n</code></pre>\n\n<p>Note that by reading the source (linked above) you can see the comments state that IDN are not supported and that it only aims to cover <em>most</em> addresses:</p>\n\n<pre><code>// This is a fairly naive implementation, but it covers 99% of use cases.\n// For more details, see http://en.wikipedia.org/wiki/Email_address#Syntax\n// TODO(mariakhomenko): we should also be handling i18n domain names as per\n// http://en.wikipedia.org/wiki/Internationalized_domain_name\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Simon Steele",
                        "user_id": 4591
                    },
                    "score": 0
                },
                {
                    "body": "<p>This is how <a href=\"https://github.com/chriso/validator.js\" rel=\"nofollow\">node-validator</a> do it:</p>\n\n<pre><code>/^(?:[\\w\\!\\#\\$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pera",
                        "user_id": 79497
                    },
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/W3Schools\" rel=\"nofollow\">W3Schools</a> gives a good simple and efficient script to validate an email:  </p>\n\n<pre><code>function validateEmail(email) {\n    var atpos=email.indexOf(\"@\");\n    var dotpos=email.lastIndexOf(\".\");\n    if (atpos &lt; 1 || dotpos &lt; atpos+2 || dotpos+2 &gt;= email.length) {\n        alert(\"Not a valid e-mail address\");\n        return false;\n    }\n    return true;\n}\n</code></pre>\n\n<p>Note that you will have to remove spaces if there are any though, with something like this:</p>\n\n<pre><code>.replace(/ /g,'')\n</code></pre>\n\n<p>Source: <em><a href=\"http://www.w3schools.com/js/js_form_validation.asp\" rel=\"nofollow\">JavaScript Form Validation</a></em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Calahad",
                        "user_id": 1141984
                    },
                    "score": -4
                },
                {
                    "body": "<p>Use this code inside your validator function:</p>\n\n<pre><code>var emailID = document.forms[\"formName\"][\"form element id\"].value;\n    atpos = emailID.indexOf(\"@\");\n    dotpos = emailID.lastIndexOf(\".\");\n    if (atpos &lt; 1 || ( dotpos - atpos &lt; 2 ))\n    {\n        alert(\"Please enter correct email ID\")\n        return false;\n    }\n</code></pre>\n\n<p>Else you can use <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a>. Inside rules define:</p>\n\n<pre><code>eMailId: {\n    required: true,\n    email: true\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Orchid",
                        "user_id": 2845463
                    },
                    "score": 3
                },
                {
                    "body": "<p>The regular expression provided by Microsoft within <a href=\"http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework\" rel=\"nofollow\">ASP.NET MVC</a> is</p>\n\n<pre><code>/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/\n</code></pre>\n\n<p>Which I post here in case it's flawed - though it's always been perfect for my needs.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Neil Thompson",
                        "user_id": 932833
                    },
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;pre&gt;\n**The personal_info part contains the following ASCII characters.\n1.Uppercase (A-Z) and lowercase (a-z) English letters.\n2.Digits (0-9).\n3.Characters ! # $ % &amp; ' * + - / = ? ^ _ ` { | } ~\n4.Character . ( period, dot or fullstop) provided that it is not the first or last character and it will not come one after the other.**\n&lt;/pre&gt;\n*Example of valid email id*\n&lt;pre&gt;\nyoursite@ourearth.com\nmy.ownsite@ourearth.org\nmysite@you.me.net\nxxxx@gmail.com\nxxxxxx@yahoo.com\n&lt;/pre&gt;\n&lt;pre&gt;\nxxxx.ourearth.com [@ is not present] \nxxxx@.com.my [ tld (Top Level domain) can not start with dot \".\" ]\n@you.me.net [ No character before @ ]\nxxxx123@gmail.b [ \".b\" is not a valid tld ]\nxxxx@.org.org [ tld can not start with dot \".\" ]\n.xxxx@mysite.org [ an email should not be start with \".\" ]\nxxxxx()*@gmail.com [ here the regular expression only allows character, digit, underscore and dash ]\nxxxx..1234@yahoo.com [double dots are not allowed\n&lt;/pre&gt;\n**javascript mail code**\n\n    function ValidateEmail(inputText)\n    {\n    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(inputText.value.match(mailformat))\n    {\n    document.form1.text1.focus();\n    return true;\n    }\n    else\n    {\n    alert(\"You have entered an invalid email address!\");\n    document.form1.text1.focus();\n    return false;\n    }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ferrakkem Bhuiyan",
                        "user_id": 3231139
                    },
                    "score": 1
                },
                {
                    "body": "<p>Very simple in <code>JavaScript</code>. follow this code.</p>\n\n<pre><code>function validate(){\n    var email = document.getElementById('Email');\n    var filter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n\n    if (!filter.test(email.value))\n    {\n        alert('Please Enter the valid email address');\n        email.focus;\n        return false;\n    }\n    else\n{\n        return true;\n    }\n</code></pre>\n\n<p><code>HTML</code> code for this:</p>\n\n<pre><code>form name=\"form\"\n     enctype=\"multipart/form-data\"\n     name=\"form\"\n     action=\"register.php\"\n     method=\"POST\" onsubmit=\"return validate();\" &gt;\n    &lt;input type=\"text\" placeholder=\"Enter ur Email Id\" id=\"Email\" name=\"Email\" /&gt;\n    &lt;input type=\"submit\" id=\"submit\" value=\"save\" name=\"Like\" class=\"button\" /&gt;\n&lt;/form&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sakthi Karthik",
                        "user_id": 1931001
                    },
                    "score": -4
                },
                {
                    "body": "<p>One of my coworker shared this regex with me. I like it a lot.</p>\n\n<pre><code>function isValidEmailAddress (email) {\n    var validEmail = false;\n    if (email) {\n        email = email.trim().toLowerCase();\n        var pattern = /^[\\w-']+(\\.[\\w-']+)*@([a-zA-Z0-9]+[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*?\\.[a-zA-Z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n        validEmail = pattern.exec(email);\n    }\n\n    return validEmail;\n}\n\nif (typeof String.prototype.trim !== 'function') {\n    String.prototype.trim = function() {\n        return this.replace(/^\\s+|\\s+$/g, '');\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Yogesh Jindal",
                        "user_id": 197586
                    },
                    "score": 0
                },
                {
                    "body": "<pre><code>function validatecontactEmail(email) { \n\n if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email))  \n  {  \n    return (true)  \n  }  \n\n    return (false)  \n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Racoon",
                        "user_id": 3002452
                    },
                    "score": 0
                },
                {
                    "body": "<p>Here is a solid javascript email regular expression (regex) for use with JS: (Used by parsley.js)</p>\n\n<pre><code>/^((([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.\n([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|\n((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|\n[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\n\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*\n(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|\n(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\n\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\n\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\n\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\n\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))){2,6}$/i\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "zeros-ones",
                        "user_id": 2094495
                    },
                    "score": 2
                },
                {
                    "body": "<p>If you are using AngularJS, just add <code>type=\"email\"</code> to the input element: <a href=\"https://docs.angularjs.org/api/ng/input/input%5Bemail%5D\" rel=\"nofollow\">https://docs.angularjs.org/api/ng/input/input%5Bemail%5D</a></p>\n\n<p>In case there is no input element, it can be created dynamically:</p>\n\n<pre><code>var isEmail = $compile('&lt;input ng-model=\"m\" type=\"email\"&gt;')($rootScope.$new()).\n    controller('ngModel').$validators[\"email\"];\n\nif (isEmail('email@gmail.com')) {\n  console.log('valid');\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vitalii Fedorenko",
                        "user_id": 288671
                    },
                    "score": 0
                },
                {
                    "body": "<p>Validation regex for email:</p>\n\n<pre><code>var rex_email = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nif(email==\"\") {\n    window.plugins.toast.showShortBottom( \"Please enter the details. \", function(a) {\n        console.log('toast success: ' + a);\n    }, function(b) { });\n} else if(!rex_email.test(email)) {\n    window.plugins.toast.showShortBottom( \"Please enter the valid email id. \", function(a) {\n        console.log('toast success: ' + a);\n    }, function(b) { });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anil Singhania",
                        "user_id": 3560104
                    },
                    "score": -1
                },
                {
                    "body": "<p>I know its not regex but any way...</p>\n\n<p>This is example with node and npm package <a href=\"https://www.npmjs.com/package/email-existence\" rel=\"nofollow\">email-existence</a> this is ultimate checking if email exist and if its in the right form :)</p>\n\n<p>This will ping the email if its responding if it got no response it will return false or else true.</p>\n\n<pre><code>function doesEmailExist(email) {\n    var emailExistence = require('email-existence');\n    return emailExistence.check(email,function (err,status) {\n            if (status) {\n                return status;\n            }\n            else {\n                throw new Error('Email does not exist');\n            }\n        });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "urosjarc",
                        "user_id": 2081554
                    },
                    "score": 0
                },
                {
                    "body": "<p><strong><em>Following Regex validations:</em></strong></p>\n\n<ul>\n<li><p>No spacial characters before @ </p>\n\n<ul>\n<li>(-) and (.) should not be together\nafter @ No special characters after @ 2 characters must before @\nEmail length should be less 128 characters</li>\n</ul>\n\n<p>function validateEmail(email) {\nvar chrbeforAt = email.substr(0, email.indexOf('@'));\nif (!($.trim(email).length > 127)) {\n    if (chrbeforAt.length >= 2) {\n        var re = /^(([^&lt;>()[]{}'^?\\.,!|//#%<em>-+=&amp;;:\\s@\\\"]+(.[^&lt;>()[]\\.,;:\\s@\\\"]+)</em>)|(\\\".+\\\"))@(?:a-z0-9?.)+a-z0-9?/;\n        //var re = /[a-z0-9!#$%&amp;'<em>+/=?^_<code>{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_</code>{|}~-]+)</em>@(?:a-z0-9?.)+a-z0-9?/;\n        return re.test(email);\n    } else {\n        return false;\n    }\n} else {\n    return false;\n}\n}</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jolly.exe",
                        "user_id": 1045296
                    },
                    "score": 0
                },
                {
                    "body": "<p><strong><em>Following Regex validations:</em></strong></p>\n\n<ul>\n<li>No spacial characters before @ </li>\n<li>(-) and (.) should not be together after @ </li>\n<li>No special characters after @ 2 characters must before @</li>\n<li><p>Email length should be less 128 characters</p>\n\n<pre><code>        function validateEmail(email) {\n            var chrbeforAt = email.substr(0, email.indexOf('@'));\n            if (!($.trim(email).length &gt; 127)) {\n                if (chrbeforAt.length &gt;= 2) {\n                    var re = /^(([^&lt;&gt;()[\\]{}'^?\\\\.,!|//#%*-+=&amp;;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n                    return re.test(email);\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jolly.exe",
                        "user_id": 1045296
                    },
                    "score": 0
                }
            ],
            "body": "<p>How can an email address be validated in JavaScript?</p>\n",
            "last_activity_date": 1425921859,
            "owner": {
                "display_name": "pix0r",
                "user_id": 72
            },
            "question_id": 46155,
            "score": 1153,
            "tags": [
                "javascript",
                "regex",
                "validation",
                "email",
                "email-validation"
            ],
            "title": "Validate email address in JavaScript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>There's actually nothing wrong with <code>document.write</code>, per se.  The problem is that it's really easy to misuse it.  Grossly, even.</p>\n\n<p>In terms of vendors supplying analytics code (like Google Analytics) it's actually the easiest way for them to distribute such snippets</p>\n\n<ol>\n<li>It keeps the scripts small</li>\n<li>They don't have to worry about overriding already established onload events or including the necessary abstraction to add onload events safely</li>\n<li>It's extremely compatible</li>\n</ol>\n\n<p>As long as you don't try to use it after the document has loaded, <code>document.write</code> is not inherently evil, in my humble opinion.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Peter Bailey",
                        "user_id": 8815
                    },
                    "score": 81
                },
                {
                    "body": "<p>It overwrites content on the page which is the most obvious reason but I wouldn't call it \"bad\".</p>\n\n<p>It just doesn't have much use unless you're creating an entire document using JavaScript in which case you may start with document.write.</p>\n\n<p>Even so, you aren't really leveraging the DOM when you use document.write--you are just dumping a blob of text into the document so I'd say it's bad form.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "aleemb",
                        "user_id": 50475
                    },
                    "score": 3
                },
                {
                    "body": "<p>I think the biggest problem is that any elements written via document.write are added to the end of the page's elements. That's rarely the desired effect with modern page layouts and AJAX. (you have to keep in mind that the elements in the DOM are temporal, and when the script runs may affect its behavior).</p>\n\n<p>It's much better to set a placeholder element on the page, and then manipulate it's innerHTML.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BnWasteland",
                        "user_id": 88872
                    },
                    "score": -1
                },
                {
                    "body": "<p>Off the top of my head:</p>\n\n<ol>\n<li><p><code>document.write</code> needs to be used in the page load or body load.  So if you want to use the script in any other time to update your page content document.write is pretty much useless.</p></li>\n<li><p>Technically <code>document.write</code> will only update HTML pages not XHTML/XML.  IE seems to be pretty forgiving of this fact but other browsers will not be.</p></li>\n</ol>\n\n<p><a href=\"http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite\" rel=\"nofollow\">http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "brendan",
                        "user_id": 225
                    },
                    "score": 3
                },
                {
                    "body": "<p>A few of the more serious problems:</p>\n\n<ul>\n<li><p>document.write (henceforth DW) does not work in XHTML</p></li>\n<li><p><strike>DW does not directly modify the DOM, preventing further manipulation</strike> <em>(trying to find evidence of this, but it's at best situational)</em></p></li>\n<li><p>DW executed after the page has finished loading will overwrite the page, or write a new page, or not work</p></li>\n<li><p>DW executes where encountered: it cannot inject at a given node point</p></li>\n<li><p>DW is effectively writing serialised text which is not the way the DOM works conceptually, and is an easy way to create bugs (.innerHTML has the same problem)</p></li>\n</ul>\n\n<p>Far better to use the safe and DOM friendly <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\">DOM manipulation methods</a></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "annakata",
                        "user_id": 13018
                    },
                    "score": 139
                },
                {
                    "body": "<p>It breaks pages using XML rendering (like XHTML pages).</p>\n\n<p><strong>Best</strong>: some browser switch back to HTML rendering and everything works fine. </p>\n\n<p><strong>Probable</strong>: some browser disable the document.write() function in XML rendering mode.</p>\n\n<p><strong>Worst</strong>: some browser will fire an XML error whenever using the document.write() function.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vincent Robert",
                        "user_id": 268
                    },
                    "score": 3
                },
                {
                    "body": "<p><strong>Pro:</strong></p>\n\n<ul>\n<li>It's the easiest way to embed inline content from an external (to your host/domain) script.</li>\n<li>You can overwrite the entire content in a frame/iframe.  I used to use this technique a lot for menu/navigation pieces before more modern Ajax techniques were widely available (1998-2002).</li>\n</ul>\n\n<p><strong>Con:</strong></p>\n\n<ul>\n<li>It serializes the rendering engine to pause until said external script is loaded, which could take much longer than an internal script.</li>\n<li>It is usually used in such a way that the script is placed within the content, which is considered bad-form.</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tracker1",
                        "user_id": 43906
                    },
                    "score": 16
                },
                {
                    "body": "<p>Here's my twopence worth, in general you shouldn't use <code>document.write</code> for heavy lifting, but there is one instance where it is definitely useful: </p>\n\n<p><a href=\"http://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html\" rel=\"nofollow\">http://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html</a></p>\n\n<p>I discovered this recently trying to create an AJAX slider gallery. I created two nested divs, and applied <code>width</code>/<code>height</code> and <code>overflow: hidden</code> to the outer <code>&lt;div&gt;</code> with JS. This was so that in the event that the browser had JS disabled, the div would float to accommodate the images in the gallery - some nice graceful degradation. </p>\n\n<p>Thing is, as with the article above, this JS hijacking of the CSS didn't kick in until the page had loaded, causing a momentary flash as the div was loaded. So I needed to write a CSS rule, or include a sheet, as the page loaded. </p>\n\n<p>Obviously, this won't work in XHTML, but since XHTML appears to be something of a dead duck (and renders as tag soup in IE) it might be worth re-evaluating your choice of DOCTYPE...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sunwukung",
                        "user_id": 124192
                    },
                    "score": 5
                },
                {
                    "body": "<p><strong>It can block your page</strong></p>\n\n<p><code>document.write</code> only works while the page is loading; If you call it after the page is done loading, it will overwrite the whole page.</p>\n\n<p>This effectively means you have to call it from an inline script block - And that will prevent the browser from processing parts of the page that follow. Scripts and Images will not be downloaded until the writing block is finished.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sean McMillan",
                        "user_id": 117587
                    },
                    "score": 20
                },
                {
                    "body": "<p>Another legitimate use of <code>document.write</code> comes from the HTML5 Boilerplate <a href=\"https://github.com/h5bp/html5-boilerplate/blob/master/src/index.html\" rel=\"nofollow\">index.html</a> example.</p>\n\n<pre><code>&lt;!-- Grab Google CDN's jQuery, with a protocol relative URL; fall back to local if offline --&gt;\n&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;window.jQuery || document.write('&lt;script src=\"js/libs/jquery-1.6.3.min.js\"&gt;&lt;\\/script&gt;')&lt;/script&gt;\n</code></pre>\n\n<p>I've also seen the same technique for using the <a href=\"https://github.com/douglascrockford/JSON-js\" rel=\"nofollow\">json2.js</a> JSON parse/stringify polyfill (<a href=\"http://caniuse.com/#search=JSON\" rel=\"nofollow\">needed by IE7 and below</a>).</p>\n\n<pre><code>&lt;script&gt;window.JSON || document.write('&lt;script src=\"json2.js\"&gt;&lt;\\/script&gt;')&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kevin Hakanson",
                        "user_id": 22514
                    },
                    "score": 27
                },
                {
                    "body": "<p>One can think of document.write() (and .innerHTML) as evaluating a source code string. This can be very handy for many applications. For example if you get HTML code as a string from some source, it is handy to just \"evaluate\" it.</p>\n\n<p>In the context of Lisp, DOM manipulation would be like manipulating a list structure, e.g. create the list (orange) by doing:</p>\n\n<pre><code>(cons 'orange '())\n</code></pre>\n\n<p>And document.write() would be like evaluating a string, e.g. create a list by evaluating a source code string like this:</p>\n\n<pre><code>(eval-string \"(cons 'orange '())\")\n</code></pre>\n\n<p>Lisp also has the very useful ability to create code using list manipulation (like using the \"DOM style\" to create a JS parse tree). This means you can build up a list structure using the \"DOM style\", rather than the \"string style\", and then run that code, e.g. like this:</p>\n\n<pre><code>(eval '(cons 'orange '()))\n</code></pre>\n\n<p>If you implement coding tools, like simple live editors, it is very handy to have the ability to quickly evaluate a string, for example using document.write() or .innerHTML. Lisp is ideal in this sense, but you can do very cool stuff also in JS, and many people are doing that, like <a href=\"http://jsbin.com/\" rel=\"nofollow\">http://jsbin.com/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mikael Kindborg",
                        "user_id": 1285614
                    },
                    "score": 0
                }
            ],
            "body": "<p>I know <a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.write\"><code>document.write</code></a> is considered bad practice; and I'm hoping to compile a list of reasons to submit to a 3rd party vendor as to why they shouldn't use <code>document.write</code> in implementations of their analytics code.</p>\n\n<p>Please include your reason for claiming <code>document.write</code> as a bad practice below.</p>\n",
            "last_activity_date": 1418869842,
            "owner": {
                "display_name": "FlySwat",
                "user_id": 1965
            },
            "question_id": 802854,
            "score": 191,
            "tags": [
                "javascript"
            ],
            "title": "Why is document.write considered a &quot;bad practice&quot;?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In the first example, you simply bind this function to the onclick event:</p>\n\n<pre><code>function() {alert(i);};\n</code></pre>\n\n<p>This means that on the click event js should alert the value of the addlink functions i variable. Its value will be 5 because of the for loop().</p>\n\n<p>In the second example you generate a function to be bound with another function:</p>\n\n<pre><code>function (num) {\n  return function () { alert(num); };\n}\n</code></pre>\n\n<p>This means: if called with a value, return me a function that will alert the input value. E.g. calling <code>function(3)</code> will return <code>function() { alert(3) };</code>.</p>\n\n<p>You call this function with the value i at every iteration, thus you create separate onclick functions for each links.</p>\n\n<p>The point is that in the first example your function contained a variable reference, while in the second one with the help of the outer function you substituted the reference with an actual value. This is called a closure roughly because you \"enclose\" the current value of a variable within your function instead of keeping a reference to it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Zed",
                        "user_id": 143972
                    },
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/643542/doesnt-javascript-support-closures-with-local-variables/643664#643664\">Quoting myself</a> for an explanation of the first example:</p>\n\n<blockquote>\n  <p>JavaScript's scopes are function-level, not block-level, and creating a closure just means that the enclosing scope gets added to the lexical environment of the enclosed function.</p>\n  \n  <p>After the loop terminates, the function-level variable i has the value 5, and that's what the inner function 'sees'.</p>\n</blockquote>\n\n<p>In the second example, for each iteration step the outer function literal will evaluate to a new function object with its own scope and local variable <code>num</code>, whose value is set to the current value of <code>i</code>. As <code>num</code> is never modified, it will stay constant over the lifetime of the closure: The next iteration step doesn't overwrite the old value as the function objects are independant.</p>\n\n<p>Keep in mind that this approach is rather inefficient as two new function objects have to be created for each link. This is unnecessary, as they can easily be shared if you use the DOM node for information storage:</p>\n\n<pre><code>function linkListener() {\n    alert(this.i);\n}\n\nfunction addLinks () {\n    for(var i = 0; i &lt; 5; ++i) {\n        var link = document.createElement('a');\n        link.appendChild(document.createTextNode('Link ' + i));\n        link.i = i;\n        link.onclick = linkListener;\n        document.body.appendChild(link);\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Christoph",
                        "user_id": 48015
                    },
                    "score": 60
                },
                {
                    "body": "<p>Basically, in the first example you're binding the <code>i</code> inside the <code>onclick</code> handler directly to the <code>i</code> outside the <code>onclick</code> handler.  So when the <code>i</code> outside the <code>onclick</code> handler changes, the <code>i</code> inside the <code>onclick</code> handler changes too.</p>\n\n<p>In the second example, instead of binding it to the <code>num</code> in the <code>onclick</code> handler, you're passing it into a function, which then binds it to the <code>num</code> in the <code>onclick</code> handler.  When you pass it into the function, the value of <code>i</code> is <em>copied, not bound</em> to <code>num</code>.  So when <code>i</code> changes, <code>num</code> stays the same.  The copy occurs because functions in JavaScript are \"closures\", meaning that once something is passed into the function, it's \"closed\" for outside modification.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Imagist",
                        "user_id": 130640
                    },
                    "score": 10
                },
                {
                    "body": "<p>Others have explained what's going on, here's an alternative solution.</p>\n\n<pre><code>function addLinks () {\n  for (var i = 0, link; i &lt; 5; i++) {\n    link = document.createElement(\"a\");\n    link.innerHTML = \"Link \" + i;\n\n    with ({ n: i }) {\n      link.onclick = function() {\n        alert(n);\n      };\n    }\n    document.body.appendChild(link);\n  }\n}\n</code></pre>\n\n<p>Basically the poor mans let-binding.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "nlogax",
                        "user_id": 65188
                    },
                    "score": 11
                },
                {
                    "body": "<p>I like to write simple explanations for thick people, because I'm thick so here goes ...</p>\n\n<p>We have 5 divs on the page, each with an ID ... div1, div2, div3, div4, div5</p>\n\n<p>jQuery can do this ...</p>\n\n<pre><code>for (var i=1; i&lt;=5; i++) {\n    $(\"#div\" + i).click ( function() { alert ($(this).index()) } )\n}\n</code></pre>\n\n<p>But really addressing the problem (and building this up slowly) ...</p>\n\n<h2>STEP 1</h2>\n\n<pre><code>for (var i=1; i&lt;=5; i++) {\n    $(\"#div\" + i).click (\n        // TODO: Write function to handle click event\n    )\n}\n</code></pre>\n\n<h2>STEP 2</h2>\n\n<pre><code>for (var i=1; i&lt;=5; i++) {\n    $(\"#div\" + i).click (\n        function(num) {\n            // A functions variable values are set WHEN THE FUNCTION IS CALLED!\n            // PLEASE UNDERSTAND THIS AND YOU ARE HOME AND DRY (took me 2 years)!\n            // Now the click event is expecting a function as a handler so return it\n            return function() { alert (num) }\n        }(i) // We call the function here, passing in i\n    )\n}\n</code></pre>\n\n<h2>SIMPLE TO UNDERSTAND ALTERNATIVE</h2>\n\n<p>If you can't get your head around that then this should be easier to understand and has the same effect ...</p>\n\n<pre><code>for (var i=1; i&lt;=5; i++) {\n\n    function clickHandler(num) {    \n        $(\"#div\" + i).click (\n            function() { alert (num) }\n        )\n    }\n    clickHandler(i);\n\n}\n</code></pre>\n\n<p>This should be simple to understand if you remember that a functions variable values are set when the function is called (but this uses the exact same thought process as before)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Daniel Lewis",
                        "user_id": 1176661
                    },
                    "score": 39
                }
            ],
            "body": "<p>I've got the following code snippet. </p>\n\n<pre><code>function addLinks () {\n    for (var i=0, link; i&lt;5; i++) {\n        link = document.createElement(\"a\");\n        link.innerHTML = \"Link \" + i;\n        link.onclick = function () {\n            alert(i);\n        };\n        document.body.appendChild(link);\n    }\n}\n</code></pre>\n\n<p>The above code is for generating 5 links and bind each link with an alert event to show the current link id. But It doesn't work. When you click the generated links they all say \"link 5\". </p>\n\n<p>But the following codes snippet works as our expectation.</p>\n\n<pre><code>function addLinks () {\n    for (var i=0, link; i&lt;5; i++) {\n        link = document.createElement(\"a\");\n        link.innerHTML = \"Link \" + i;\n        link.onclick = function (num) {\n            return function () {\n                alert(num);\n            };\n        }(i);\n        document.body.appendChild(link);\n    }\n}\n</code></pre>\n\n<p>The above 2 snippets are quoted from <a href=\"http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/\">here</a>. As the author's explanation, seems the <strong>closure</strong> makes the magic.</p>\n\n<p>But how it works and How <strong>closure</strong> makes it work are all beyond my understanding. Why the first one doesn't work while the second one works? Can anyone give a detailed explanation about the magic? </p>\n\n<p>thanks.</p>\n",
            "last_activity_date": 1392188673,
            "owner": {
                "display_name": "Tower Joo",
                "user_id": 125633
            },
            "question_id": 1451009,
            "score": 85,
            "tags": [
                "javascript",
                "closures"
            ],
            "title": "Javascript infamous Loop issue?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Every function in javascript has a scope. Whatever that scope is, is referenced by \"this\".\nYou can change that scope by doing func.call or func.apply.</p>\n\n<p>By default, and what confuses most beginners, when a callback is called after an event is raised on a DOM element, the scope of the function is the DOM element.</p>\n\n<p>jQuery makes this trivial to change with jQuery.proxy.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "blockhead",
                        "user_id": 60223
                    },
                    "score": 2
                },
                {
                    "body": "<p>I recommend reading <a href=\"https://mikewest.org\">Mike West</a>'s article <a href=\"http://www.digital-web.com/articles/scope_in_javascript/\">Scope in JavaScript</a> (<a href=\"http://web.archive.org/web/20110725013125/http://www.digital-web.com/articles/scope_in_javascript/\">mirror</a>) first. It is an excellent, friendly introduction to the concepts of <code>this</code> and scope chains in JavaScript.</p>\n\n<p>Once you start getting used to <code>this</code>, the rules are actually pretty simple. The <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript Standard</a> defines <code>this</code> as a keyword that \"evaluates to the value of the ThisBinding of the current execution context\" (\u00a711.1.1). ThisBinding is something that the JavaScript interpreter maintains as it evaluates JavaScript code, like a special CPU register which holds a reference to an object. The interpreter updates the ThisBinding whenever establishing an execution context in one of only three different cases:</p>\n\n<ol>\n<li><p>Initial global execution context</p>\n\n<p>This is the case for JavaScript code that is evaluated when a <code>&lt;script&gt;</code> element is encountered:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;//&lt;![CDATA[\nalert(\"I'm evaluated in the initial global execution context!\");\n\nsetTimeout(function () {\n    alert(\"I'm NOT evaluated in the initial global execution context.\");\n}, 1);\n//]]&gt;&lt;/script&gt;\n</code></pre>\n\n<p>When evaluating code in the initial global execution context, ThisBinding is set to the global object, <code>window</code> (\u00a710.4.1.1).</p></li>\n<li><p>Entering eval code</p>\n\n<ul>\n<li><p>... by a direct call to eval()</p>\n\n<p>ThisBinding is left unchanged; it is the same value as the ThisBinding of the calling execution context (\u00a710.4.2(2)(a)).</p></li>\n<li><p>... if not by a direct call to eval()</p>\n\n<p>ThisBinding is set to the global object <em>as if</em> executing in the initial global execution context (\u00a710.4.2(1)).</p></li>\n</ul>\n\n<p>\u00a715.1.2.1.1 defines what a direct call to eval() is. Basically, <code>eval(...)</code> is a direct call whereas something like <code>(0, eval)(...)</code> or <code>var indirectEval = eval; indirectEval(...);</code> is an indirect call to eval(). See <a href=\"http://stackoverflow.com/a/9107491/196844\">chuckj's answer</a> to <a href=\"http://stackoverflow.com/q/9107240/196844\">(1,eval)('this') vs eval('this') in JavaScript?</a> and <a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/#indirect-eval-call\">this blog post by Dmitry Soshnikov</a> for when you might use an indirect eval() call.</p></li>\n<li><p>Entering function code</p>\n\n<p>This occurs when calling a function. If a function is called on an object, such as in <code>obj.myMethod()</code> or the equivalent <code>obj[\"myMethod\"]()</code>, then ThisBinding is set to the object (<code>obj</code> in the example; \u00a713.2.1). In most other cases, ThisBinding is set to the global object (\u00a710.4.3).</p>\n\n<p>The reason for writing \"in most other cases\" is because there are eight ECMAScript 5 built-in functions that allow ThisBinding to be specified in the arguments list. These special functions take a so-called <em>thisArg</em> which becomes the ThisBinding when calling the function (\u00a710.4.3).</p>\n\n<p>These special built-in functions are:</p>\n\n<ul>\n<li>Function.prototype.apply( thisArg, argArray )</li>\n<li>Function.prototype.call( thisArg [ , arg1 [ , arg2, ... ] ] )</li>\n<li>Function.prototype.bind( thisArg [ , arg1 [ , arg2, ... ] ] )</li>\n<li>Array.prototype.every( callbackfn [ , thisArg ] )</li>\n<li>Array.prototype.some( callbackfn [ , thisArg ] )</li>\n<li>Array.prototype.forEach( callbackfn [ , thisArg ] )</li>\n<li>Array.prototype.map( callbackfn [ , thisArg ] )</li>\n<li>Array.prototype.filter( callbackfn [ , thisArg ] )</li>\n</ul>\n\n<p><br>In the case of the Function.prototype functions, they are called on a function object, but rather than setting ThisBinding to the function object, ThisBinding is set to the <em>thisArg</em>.</p>\n\n<p>In the case of the Array.prototype functions, the given <em>callbackfn</em> is called in an execution context where ThisBinding is set to <em>thisArg</em> if supplied; otherwise, to the global object.</p></li>\n</ol>\n\n<p>Those are the rules for plain JavaScript. When you begin using JavaScript libraries (e.g. jQuery), you may find that certain library functions manipulate the value of <code>this</code>. The developers of those JavaScript libraries do this because it tends to support the most common use cases, and users of the library typically find this behavior to be more convenient. When passing callback functions referencing <code>this</code> to library functions, you should refer to the documentation for any guarantees about what the value of <code>this</code> is when the function is called.</p>\n\n<p>If you are wondering how a JavaScript library manipulates the value of <code>this</code>, the library is simply using one of the built-in JavaScript functions accepting a <em>thisArg</em>. You, too, can write your own function taking a callback function and <em>thisArg</em>:</p>\n\n<pre><code>function doWork(callbackfn, thisArg) {\n    //...\n    if (callbackfn != null) callbackfn.call(thisArg);\n}\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>I forgot a special case. When constructing a new object via the <code>new</code> operator, the JavaScript interpreter creates a new, empty object, sets some internal properties, and then calls the constructor function on the new object. Thus, when a function is called in a constructor context, the value of <code>this</code> is the new object that the interpreter created:</p>\n\n<pre><code>function MyType() {\n    this.someData = \"a string\";\n}\n\nvar instance = new MyType();\n// Kind of like the following, but there are more steps involved:\n// var instance = {};\n// MyType.call(instance);\n</code></pre>\n\n<p><strong>QUIZ:</strong> Just for fun, test your understanding with the following examples.</p>\n\n<p><em>To reveal the answers, mouse over the light yellow boxes.</em></p>\n\n<ol>\n<li><p>What is the value of <code>this</code> at line A? Why?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nif (true) {\n    // Line A\n}\n&lt;/script&gt;\n</code></pre>\n\n<blockquote class=\"spoiler\">\n  <p> <code>window</code>\n\n <p>Line A is evaluated in the initial global execution context.</p>\n</blockquote></li>\n<li><p>What is the value of <code>this</code> at line B when obj.staticFunction() is executed? Why?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar obj = {\n    someData: \"a string\"\n};\n\nfunction myFun() {\n    // Line B\n}\n\nobj.staticFunction = myFun;\n\nobj.staticFunction();\n&lt;/script&gt;\n</code></pre>\n\n<blockquote class=\"spoiler\">\n  <p> <code>obj</code>\n\n <p>When calling a function on an object, ThisBinding is set to the object.</p>\n</blockquote></li>\n<li><p>What is the value of <code>this</code> at line C? Why?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar obj = {\n    myMethod : function () {\n        // Line C\n    }\n};\nvar myFun = obj.myMethod;\nmyFun();\n&lt;/script&gt;\n</code></pre>\n\n<blockquote class=\"spoiler\">\n  <p> <code>window</code>\n\n <p>In this example, the JavaScript interpreter enters function code, but because <code>myFun</code>/<code>obj.myMethod</code> is not called on an object, ThisBinding is set to <code>window</code>.\n\n <p>This is different from Python, in which accessing a method (<code>obj.myMethod</code>) creates a <a href=\"http://docs.python.org/3/library/stdtypes.html#methods\">bound method object</a>.</p>\n</blockquote></li>\n<li><p>What is the value of <code>this</code> at line D? Why?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction myFun() {\n    // Line D\n}\nvar obj = {\n    myMethod : function () {\n        eval(\"myFun()\");\n    }\n};\nobj.myMethod();\n&lt;/script&gt;\n</code></pre>\n\n<blockquote class=\"spoiler\">\n  <p> <code>window</code>\n\n <p>This one was tricky. When evaluating the eval code, <code>this</code> is <code>obj</code>. However, in the eval code, <code>myFun</code> is not called on an object, so ThisBinding is set to <code>window</code> for the call.</p>\n</blockquote></li>\n<li><p>What is the value of <code>this</code> at line E?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction myFun() {\n    // Line E\n}\nvar obj = {\n    someData: \"a string\"\n};\nmyFun.call(obj);\n&lt;/script&gt;\n</code></pre>\n\n<blockquote class=\"spoiler\">\n  <p> <code>obj</code>\n\n <p>The line <code>myFun.call(obj);</code> is invoking the special built-in function Function.prototype.call(), which accepts <em>thisArg</em> as the first argument.</p>\n</blockquote></li>\n</ol>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Daniel Trebbien",
                        "user_id": 196844
                    },
                    "score": 456
                },
                {
                    "body": "<p>Whould <a href=\"http://www.quirksmode.org/js/this.html\" rel=\"nofollow\">this</a> help? (Most confusion of 'this' in javascript is coming from the fact that it generally is not linked to your object, but to the current executing scope -- that might not be exactly how it works but is always feels like that to me -- see the article for a complete explanation)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Simon Groenewolt",
                        "user_id": 31884
                    },
                    "score": 1
                },
                {
                    "body": "<p>\"this\" is all about scope. Every function has its own scope, and since everything in JS is an object, even a function can store some values into itself using \"this\". OOP 101 teaches that \"this\" is only applicable to <em>instances</em> of an object. Therefore, every-time a function executes, a new \"instance\" of that function has a new meaning of \"this\".</p>\n\n<p>Most people get confused when they try to use \"this\" inside of anonymous closure functions like:</p>\n\n<pre>\n(function(value) {\n    this.value = value;\n    $('.some-elements').each(function(elt){\n        elt.innerHTML = this.value;        // uh oh!! possibly undefined\n    });\n})(2);\n</pre>\n\n<p>So here, inside each(), \"this\" doesn't hold the \"value\" that you expect it to (from <pre>this.value = value;</pre> above it). So, to get over this (no pun intended) problem, a developer could:</p>\n\n<pre>\n(function(value) {\n    var self = this;            // small change\n    self.value = value;\n    $('.some-elements').each(function(elt){\n        elt.innerHTML = self.value;        // phew!! == 2 \n    });\n})(2);\n</pre>\n\n<p>Try it out; you'll begin to like this pattern of programming</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "arunjitsingh",
                        "user_id": 377392
                    },
                    "score": 23
                },
                {
                    "body": "<p>It is difficult to get a good grasp of JS, or write more than anything trivial in it, if you don't understand it thoroughly. You cannot just afford to take a quick dip :) I think the best way to get started with JS is to first watch these video lectures by Douglas Crockford - <a href=\"http://yuiblog.com/crockford/\" rel=\"nofollow\">http://yuiblog.com/crockford/</a>, which covers this and that, and everything else about JS.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "tathagata",
                        "user_id": 377815
                    },
                    "score": 2
                },
                {
                    "body": "<p>Daniel, awesome explanation! A couple of words on this and good list of <code>this</code> execution context pointer in case of event handlers.</p>\n\n<p>In two words, <code>this</code> in JavaScript points the object from whom (or from whose execution context) the current function was run and it's always read-only, you can't set it anyway (such an attempt will end up with 'Invalid left-hand side in assignment' message.</p>\n\n<p><strong>For event handlers:</strong> inline event handlers, such as <code>&lt;element onclick=\"foo\"&gt;</code>, override any other handlers attached earlier and before, so be careful and it's better to stay off of inline event delegation at all.\nAnd thanks to Zara Alaverdyan who inspired me to this list of examples through a dissenting debate :)</p>\n\n<ul>\n<li><code>el.onclick = foo; // in the foo - obj</code></li>\n<li><code>el.onclick = function () {this.style.color = '#fff';} // obj</code></li>\n<li><code>el.onclick = function() {doSomething();} // In the doSomething -\nWindow</code></li>\n<li><code>el.addEventListener('click',foo,false) // in the foo - obj</code></li>\n<li><code>el.attachEvent('onclick, function () { // this }') // window, all the\ncompliance to IE :)</code></li>\n<li><code>&lt;button onclick=\"this.style.color = '#fff';\"&gt; // obj</code></li>\n<li><code>&lt;button onclick=\"foo\"&gt; // In the foo - window, but you can &lt;button\nonclick=\"foo(this)\"&gt;</code></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arman McHitaryan",
                        "user_id": 1847185
                    },
                    "score": 2
                },
                {
                    "body": "<p>This answer is a replication of <a href=\"http://mahesha999.blogspot.in/2013/07/javascript-essential-parts-this-keyword.html\">my post</a>. You can find the corresponding JSFiddles on the post page.</p>\n\n<hr>\n\n<p>The <code>this</code> keyword behaves differently in JavaScript compared to other language. In Object Oriented languages, the <code>this</code> keyword refers to the current instance of the class. In JavaScript the value of <code>this</code> is determined mostly by the invocation context of function (<em><code>context.function()</code></em>) and where it is called.</p>\n\n<p><strong>1. When used in global context</strong></p>\n\n<p>When you use <code>this</code> in global context, it is bound to global object (<code>window</code> in browser)</p>\n\n<pre><code>document.write(this);  //[object Window]\n</code></pre>\n\n<p>When you use <code>this</code> inside a function defined in the global context, <code>this</code> is still bound to global object since the function is actually made a method of global context.</p>\n\n<pre><code>function f1()\n{\n   return this;\n}\ndocument.write(f1());  //[object Window]\n</code></pre>\n\n<p>Above <code>f1</code> is made a method of global object. Thus we can also call it on <code>window</code> object as follows:</p>\n\n<pre><code>function f()\n{\n    return this;\n}\n\ndocument.write(window.f()); //[object Window]\n</code></pre>\n\n<p><strong>2. When used inside object method</strong></p>\n\n<p>When you use <code>this</code> keyword inside an object method, <code>this</code> is bound to the \"immediate\" enclosing object.</p>\n\n<pre><code>var obj = {\n        name: \"obj\",\n        f: function () {\n            return this + \":\" + this.name;\n        }\n    };\ndocument.write(obj.f());  //[object Object]:obj\n</code></pre>\n\n<p>Above I have put the word immediate in double quotes. It is to make the point that if you nest the object inside another object, then <code>this</code> is bound to the immediate parent.</p>\n\n<pre><code>var obj = {\n        name: \"obj1\",\n        nestedobj: {\n            name:\"nestedobj\",\n            f: function () {\n                return this + \":\" + this.name;\n            }\n        }            \n    }\n\ndocument.write(obj.nestedobj.f()); //[object Object]:nestedobj\n</code></pre>\n\n<p>Even if you add function explicitly to the object as a method, it still follows above rules, that is <code>this</code> still points to the immediate parent object.</p>\n\n<pre><code> var obj1 = {\n name: \"obj1\",\n}\n\nfunction returnName() {\n        return this + \":\" + this.name;\n    }\n\nobj1.f = returnName; //add method to object\ndocument.write(obj1.f()); //[object Object]:obj1\n</code></pre>\n\n<p><strong>3. When invoking context-less function</strong></p>\n\n<p>When you use <code>this</code> inside function that is invoked without any context (i.e. not on any object), it is bound to the global object (<code>window</code> in browser)(even if the function is defined inside the object) .</p>\n\n<pre><code>var context = \"global\";\n\nvar obj = {  \ncontext: \"object\",\nmethod: function () {                  \n       function f() {\n           var context = \"function\";\n           return this + \":\" +this.context; \n       };\n       return f(); //invoked without context\n    }\n};\n\ndocument.write(obj.method()); //[object Window]:global \n</code></pre>\n\n<p><strong>Trying it all with functions</strong></p>\n\n<p>We can try above points with functions too. However there are some differences.</p>\n\n<ul>\n<li>Above we added members to objects using object literal notation. We can add members to functions by using <code>this</code>. to specify them.</li>\n<li>Object literal notation creates an instance of object which we can use immediately. With function we may need to first create its instance using <code>new</code> operator.</li>\n<li>Also in an object literal approach, we can explicitly add members to already defined object using dot operator. This gets added to the specific instance only. However I have added variable to the function prototype so that it gets reflected in all instances of the function.</li>\n</ul>\n\n<p>Below I tried out all the things that we did with Object and <code>this</code> above, but by first creating function instead of directly writing an object.</p>\n\n<pre><code>/********************************************************************* \n  1. When you add variable to the function using this keyword, it \n     gets added to the function prototype, thus allowing all function \n     instances to have their own copy of the variables added.\n*********************************************************************/\nfunction functionDef()\n{\n    this.name = \"ObjDefinition\";\n    this.getName = function(){                \n        return this+\":\"+this.name;\n    }\n}        \n\nobj1 = new functionDef();\ndocument.write(obj1.getName() + \"&lt;br /&gt;\"); //[object Object]:ObjDefinition   \n\n/********************************************************************* \n   2. Members explicitly added to the function protorype also behave \n      as above: all function instances have their own copy of the \n      variable added.\n*********************************************************************/\nfunctionDef.prototype.version = 1;\nfunctionDef.prototype.getVersion = function(){\n    return \"v\"+this.version; //see how this.version refers to the\n                             //version variable added through \n                             //prototype\n}\ndocument.write(obj1.getVersion() + \"&lt;br /&gt;\"); //v1\n\n/********************************************************************* \n   3. Illustrating that the function variables added by both above \n      ways have their own copies across function instances\n*********************************************************************/\nfunctionDef.prototype.incrementVersion = function(){\n    this.version = this.version + 1;\n}\nvar obj2 = new functionDef();\ndocument.write(obj2.getVersion() + \"&lt;br /&gt;\"); //v1\n\nobj2.incrementVersion();      //incrementing version in obj2\n                              //does not affect obj1 version\n\ndocument.write(obj2.getVersion() + \"&lt;br /&gt;\"); //v2\ndocument.write(obj1.getVersion() + \"&lt;br /&gt;\"); //v1\n\n/********************************************************************* \n   4. `this` keyword refers to the immediate parent object. If you \n       nest the object through function prototype, then `this` inside \n       object refers to the nested object not the function instance\n*********************************************************************/\nfunctionDef.prototype.nestedObj = { name: 'nestedObj', \n                                    getName1 : function(){\n                                        return this+\":\"+this.name;\n                                    }                            \n                                  };\n\ndocument.write(obj2.nestedObj.getName1() + \"&lt;br /&gt;\"); //[object Object]:nestedObj\n\n/********************************************************************* \n   5. If the method is on an object's prototype chain, `this` refers \n      to the object the method was called on, as if the method was on \n      the object.\n*********************************************************************/\nvar ProtoObj = { fun: function () { return this.a } };\nvar obj3 = Object.create(ProtoObj); //creating an object setting ProtoObj\n                                    //as its prototype\nobj3.a = 999;                       //adding instance member to obj3\ndocument.write(obj3.fun()+\"&lt;br /&gt;\");//999\n                                    //calling obj3.fun() makes \n                                    //ProtoObj.fun() to access obj3.a as \n                                    //if fun() is defined on obj3\n</code></pre>\n\n<p><strong>4. When used inside constructor function</strong>.</p>\n\n<p>When the function is used as a constructor (that is when it is called with <code>new</code> keyword), <code>this</code> inside function body points to the new object being constructed.</p>\n\n<pre><code>var myname = \"global context\";\nfunction SimpleFun()\n{\n    this.myname = \"simple function\";\n}\n\nvar obj1 = new SimpleFun(); //adds myname to obj1\n//1. `new` causes `this` inside the SimpleFun() to point to the\n//   object being constructed thus adding any member\n//   created inside SimipleFun() using this.membername to the\n//   object being constructed\n//2. And by default `new` makes function to return newly \n//   constructed object if no explicit return value is specified\n\ndocument.write(obj1.myname); //simple function\n</code></pre>\n\n<p><strong>5. When used inside function defined on prototype chain</strong></p>\n\n<p>If the method is on an object's prototype chain, <code>this</code> inside such method refers to the object the method was called on, as if the method was defined on the object.</p>\n\n<pre><code>var ProtoObj = {\n    fun: function () {\n        return this.a;\n    }\n};\n//Object.create() creates object with ProtoObj as its\n//prototype and assigns it to obj3, thus making fun() \n//to be the method on its prototype chain\n\nvar obj3 = Object.create(ProtoObj);\nobj3.a = 999;\ndocument.write(obj3.fun()); //999\n\n//Notice that fun() is defined on obj3's prototype but \n//`this.a` inside fun() retrieves obj3.a   \n</code></pre>\n\n<p><strong>6. Inside call(), apply() and bind() functions</strong></p>\n\n<ul>\n<li>All these methods are defined on <code>Function.prototype</code>.</li>\n<li>These methods allows to write a function once and invoke it in different context. In other words, they allows to specify the value of <code>this</code> which will be used while the function is being executed. They also take any parameters to passed to the original function when it is invoked.</li>\n<li><strong><code>fun.apply(obj1 [, argsArray])</code></strong> Sets <code>obj1</code> as the value of <code>this</code> inside <code>fun()</code> and calls <code>fun()</code> passing elements of <code>argsArray</code> as its arguments.</li>\n<li><strong><code>fun.call(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])</code></strong> - Sets <code>obj1</code> as the value of <code>this</code> inside <code>fun()</code> and calls <code>fun()</code> passing <code>arg1, arg2, arg3, ...</code> as its arguments.</li>\n<li><strong><code>fun.bind(obj1 [, arg1 [, arg2 [,arg3 [, ...]]]])</code></strong> - Returns the reference to the function <code>fun</code> with <code>this</code> inside fun bound to <code>obj1</code> and parameters of <code>fun</code> bound to the   parameters specified <code>arg1, arg2, arg3,...</code>.</li>\n<li>By now the difference between <code>apply</code>, <code>call</code> and <code>bind</code> must have become apparent. <code>apply</code> allows to specify the arguments to function as array-like object i.e. an object with a numeric <code>length</code> property and corresponding non-negative integer properties. Whereas <code>call</code> allows to specify the arguments to the function directly. Both <code>apply</code> and <code>call</code> immediately invokes the function in the specified context and with the specified arguments. On the other hand, <code>bind</code> simply returns the function bound to the specified <code>this</code> value and the arguments. We can capture the reference to this returned function by assigning it to a variable and later we can call it any time.</li>\n</ul>\n\n\n\n<pre><code>function add(inc1, inc2)\n{\n    return this.a + inc1 + inc2;\n}\n\nvar o = { a : 4 };\ndocument.write(add.call(o, 5, 6)+\"&lt;br /&gt;\"); //15\n      //above add.call(o,5,6) sets `this` inside\n      //add() to `o` and calls add() resulting:\n      // this.a + inc1 + inc2 = \n      // `o.a` i.e. 4 + 5 + 6 = 15\ndocument.write(add.apply(o, [5, 6]) + \"&lt;br /&gt;\"); //15\n      // `o.a` i.e. 4 + 5 + 6 = 15\n\nvar g = add.bind(o, 5, 6);       //g: `o.a` i.e. 4 + 5 + 6\ndocument.write(g()+\"&lt;br /&gt;\");    //15\n\nvar h = add.bind(o, 5);          //h: `o.a` i.e. 4 + 5 + ?\ndocument.write(h(6) + \"&lt;br /&gt;\"); //15\n      // 4 + 5 + 6 = 15\ndocument.write(h() + \"&lt;br /&gt;\");  //NaN\n      //no parameter is passed to h()\n      //thus inc2 inside add() is `undefined`\n      //4 + 5 + undefined = NaN&lt;/code&gt;\n</code></pre>\n\n<p><strong>7. <code>this</code> inside event handlers</strong></p>\n\n<ul>\n<li>When you assign function directly to event handlers of an element, use of <code>this</code> directly inside event handling function refers to the corresponding element. Such direct function assignment can be done using <code>addeventListener</code> method or through the traditional event registration methods like <code>onclick</code>.</li>\n<li>Similarly, when you use <code>this</code> directly inside the event property (like <code>&lt;button onclick=\"...this...\" &gt;</code>) of the element, it refers to the element.</li>\n<li>However use of <code>this</code> indirectly through the other function called inside the event handling function or event property resolves to the global object <code>window</code>.</li>\n<li>The same above behavior is achieved when we attach the function to the event handler using Microsoft's Event Registration model method <code>attachEvent</code>. Instead of assigning the function to the event handler (and the thus making the function method of the element), it calls the function on the event (effectively calling it in global context).</li>\n</ul>\n\n<p><em>I recommend to better try this in <a href=\"http://jsfiddle.net/Mahesha999/xKtzC/8/embedded/html,js,result\">JSFiddle</a>.</em></p>\n\n<pre><code>&lt;script&gt; \n    function clickedMe() {\n       alert(this + \" : \" + this.tagName + \" : \" + this.id);\n    } \n    document.getElementById(\"button1\").addEventListener(\"click\", clickedMe, false);\n    document.getElementById(\"button2\").onclick = clickedMe;\n    document.getElementById(\"button5\").attachEvent('onclick', clickedMe);   \n&lt;/script&gt;\n\n&lt;h3&gt;Using `this` \"directly\" inside event handler or event property&lt;/h3&gt;\n&lt;button id=\"button1\"&gt;click() \"assigned\" using addEventListner() &lt;/button&gt;&lt;br /&gt;\n&lt;button id=\"button2\"&gt;click() \"assigned\" using click() &lt;/button&gt;&lt;br /&gt;\n&lt;button id=\"button3\" onclick=\"alert(this+ ' : ' + this.tagName + ' : ' + this.id);\"&gt;used `this` directly in click event property&lt;/button&gt;\n\n&lt;h3&gt;Using `this` \"indirectly\" inside event handler or event property&lt;/h3&gt;\n&lt;button onclick=\"alert((function(){return this + ' : ' + this.tagName + ' : ' + this.id;})());\"&gt;`this` used indirectly, inside function &lt;br /&gt; defined &amp; called inside event property&lt;/button&gt;&lt;br /&gt;\n\n&lt;button id=\"button4\" onclick=\"clickedMe()\"&gt;`this` used indirectly, inside function &lt;br /&gt; called inside event property&lt;/button&gt; &lt;br /&gt;\n\nIE only: &lt;button id=\"button5\"&gt;click() \"attached\" using attachEvent() &lt;/button&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mahesha999",
                        "user_id": 1317018
                    },
                    "score": 24
                },
                {
                    "body": "<p><code>this</code> in Javascript always refers to the 'owner' of the function that is <strong>being executed</strong>.</p>\n\n<p>If no explicit owner is defined, then the top most owner, the window object, is referenced.</p>\n\n<p>So if I did</p>\n\n<pre><code>function someKindOfFunction() {\n   this.style = 'foo';\n}\n</code></pre>\n\n<p><code>element.onclick = someKindOfFunction;</code></p>\n\n<p><code>this</code> would refer to the element object. But be careful, a lot of people make this mistake</p>\n\n<p><code>&lt;element onclick=\"someKindOfFunction()\"&gt;</code></p>\n\n<p>In the latter case, you merely reference the function, not hand it over to the element. Therefor, <code>this</code> will refer to the window object.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SephVelut",
                        "user_id": 2427672
                    },
                    "score": 2
                },
                {
                    "body": "<p><code>this</code> is one of the misunderstood concept in JavaScript because it behaves little differently from place to place. Simply, <code>this</code> refers to the <strong>\"owner\" of the function we are currently executing</strong>. </p>\n\n<p><code>this</code> helps to get the current object (a.k.a. execution context) we work with. If you understand in which object the current function is getting executed, you can understand easily what current <code>this</code> is</p>\n\n<pre><code>var val = \"window.val\"\n\nvar obj = {\n    val: \"obj.val\",\n    innerMethod: function () {\n        var val = \"obj.val.inner\",\n            func = function () {\n                var self = this;\n                return self.val;\n            };\n\n        return func;\n    },\n    outerMethod: function(){\n        return this.val;\n    }\n};\n\n//This actually gets executed inside window object \nconsole.log(obj.innerMethod()()); //returns window.val\n\n//Breakdown in to 2 lines explains this in detail\nvar _inn = obj.innerMethod();\nconsole.log(_inn()); //returns window.val\n\nconsole.log(obj.outerMethod()); //returns obj.val\n</code></pre>\n\n<p>Above we create 3 variables with same name 'val'. One in global context, one inside obj and the other inside innerMethod of obj. JavaScript resolves identifiers within a particular context by going up the scope chain from local go global. </p>\n\n<hr>\n\n<p><em>Few places where <code>this</code> can be differentiated</em> </p>\n\n<h2>Calling a method of a object</h2>\n\n<pre><code>var status = 1;\nvar helper = {\n    status : 2,\n    getStatus: function () {\n        return this.status;\n    }\n};\n\nvar theStatus1 = helper.getStatus(); //line1\nconsole.log(theStatus1); //2\n\nvar theStatus2 = helper.getStatus;\nconsole.log(theStatus2()); //1\n</code></pre>\n\n<p>When line1 is executed, JavaScript establishes an execution context (EC) for the function call, setting <code>this</code> to the <strong>object referenced by whatever came before the last \".\"</strong>. so in the last line you can understand that <code>a()</code> was executed in the global context which is the <code>window</code>.</p>\n\n<h2>With Constructor</h2>\n\n<p><code>this</code> can be used to refer to the object being created</p>\n\n<pre><code>function Person(name){\n    this.personName = name;\n    this.sayHello = function(){\n        return \"Hello \" + this.personName;\n    }\n}\n\nvar person1 = new Person('Scott');\nconsole.log(person1.sayHello()); //Hello Scott\n\nvar person2 = new Person('Hugh');\nvar sayHelloP2 = person2.sayHello;\nconsole.log(sayHelloP2()); //Hello undefined\n</code></pre>\n\n<p>When new <code>Person()</code> is executed, a completely new object is created. <code>Person</code> is called and its <code>this</code> is set to reference that new object. </p>\n\n<h2>Function call</h2>\n\n<pre><code>function testFunc() {\n    this.name = \"Name\";\n    this.myCustomAttribute = \"Custom Attribute\";\n    return this;\n}\n\nvar whatIsThis = testFunc();\nconsole.log(whatIsThis); //window\n\nvar whatIsThis2 = new testFunc();\nconsole.log(whatIsThis2);  //testFunc() / object\n\nconsole.log(window.myCustomAttribute); //Custom Attribute \n</code></pre>\n\n<p>If we miss <code>new</code> keyword, <code>whatIsThis</code> referes to the most global context it can find(<code>window</code>)</p>\n\n<h2>With event handlers</h2>\n\n<p>If the event handler is inline, <code>this</code> refers to global object</p>\n\n<pre><code>&lt;script type=\"application/javascript\"&gt;\n    function click_handler() {\n        alert(this); // alerts the window object\n    }\n&lt;/script&gt;\n\n&lt;button id='thebutton' onclick='click_handler()'&gt;Click me!&lt;/button&gt;\n</code></pre>\n\n<p>When adding event handler through JavaScript, <code>this</code> refers to DOM element that generated the event.</p>\n\n<hr>\n\n<ul>\n<li>You can also manipulate the context using <code>.apply()</code> <code>.call()</code> and <code>.bind()</code></li>\n<li>JQuery proxy is another way you can use to make sure this in a function will be the value you desire. (Check <a href=\"http://stackoverflow.com/q/4986329/340046\">Understanding $.proxy()</a>, <a href=\"http://stackoverflow.com/q/3349380/340046\">jQuery.proxy() usage</a>)</li>\n<li><a href=\"http://stackoverflow.com/a/4886696/340046\">What does <code>var that = this</code> means in JavaScript</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nips",
                        "user_id": 340046
                    },
                    "score": 1
                },
                {
                    "body": "<h1>Javascript's <code>this</code></h1>\n\n<h2>Simple function invocation</h2>\n\n<p>Consider the following function:</p>\n\n<pre><code>function foo() {\n    console.log(\"bar\");\n    console.log(this);\n}\nfoo(); // calling the function\n</code></pre>\n\n<p>Note that we are running this in the normal mode, i.e. strict mode is not used.</p>\n\n<p>When run in a browser, the value of <code>this</code> would be logged as <code>window</code>. This is because <code>window</code> is the global variable in a web browser's scope.</p>\n\n<p>If you run this same piece of code in an environment like node.js, <code>this</code> would refer to the global variable in your app.</p>\n\n<p>Now if we run this in strict mode by adding the statement <code>\"use strict\";</code> to the beginning of the function declaration, <code>this</code> would no longer refer to the global variable in either of the envirnoments. This is done to avoid confusions in the strict mode. <code>this</code> would, in this case just log <code>undefined</code>, because that is what it is, it is not defined.</p>\n\n<p>In the following cases, we would see how to manipulate the value of <code>this</code>.</p>\n\n<h2>Calling a function on an object</h2>\n\n<p>There are different ways to do this. If you have called native methods in Javascript like <code>forEach</code> and <code>slice</code>, you should already know that the <code>this</code> variable in that case refers to the <code>Object</code> on which you called that function (Note that in javascript, just about everything is an <code>Object</code>, including <code>Array</code>s and <code>Function</code>s). Take the following code for example.</p>\n\n<pre><code>var myObj = {key: \"Obj\"};\nmyObj.logThis = function () {\n    // I am a method\n    console.log(this);\n}\nmyObj.logThis(); // myObj is logged\n</code></pre>\n\n<p>If an <code>Object</code> contains a property which holds a <code>Function</code>, the property is called a method. This method, when called, will always have it's <code>this</code> variable set to the <code>Object</code> it is associated with. This is true for both strict and non-strict modes.</p>\n\n<p>Note that if a method is stored (or rather, copied) in another variable, the reference to <code>this</code> is no longer preserved in the new variable. For example:</p>\n\n<pre><code>// continuing with the previous code snippet\n\nvar myVar = myObj.thisMethod;\nmyVar();\n// logs either of window/global/undefined based on mode of operation\n</code></pre>\n\n<p>Considering a more commonly practical scenario:</p>\n\n<pre><code>var el = document.getElementById('idOfEl');\nel.addEventListener('click', function() { console.log(this) });\n// the function called by addEventListener contains this as the reference to the element\n// so clicking on our element would log that element itself\n</code></pre>\n\n<h2>The <code>new</code> keyword</h2>\n\n<p>Consider a constructor function in Javascript:</p>\n\n<pre><code>function Person (name) {\n    this.name = name;\n    this.sayHello = function () {\n        console.log (\"Hello\", this);\n    }\n}\n\nvar awal = new Person(\"Awal\");\nawal.sayHello();\n// In `awal.sayHello`, `this` contains the reference to the variable `awal`\n</code></pre>\n\n<p>How does this work? Well, let's see what happens when we use the <code>new</code> keyword.</p>\n\n<ol>\n<li>Calling the function with the <code>new</code> keyword would immediately initialze an <code>Object</code> of type <code>Person</code>.</li>\n<li>The constructor of this <code>Object</code> has its constructor set to <code>Person</code>. Also, note that <code>typeof awal</code> would return <code>Object</code> only.</li>\n<li>This new <code>Object</code> would be assigned the protoype of <code>Person.prototype</code>. This means that any method or property in the <code>Person</code> prototype would be available to all instances of <code>Person</code>, including <code>awal</code>.</li>\n<li>The function <code>Person</code> itself is now invoked; <code>this</code> being a reference to the newly constructed object <code>awal</code>.</li>\n</ol>\n\n<p>Pretty straighforward, eh?</p>\n\n<p>Note that the official ECMAScript spec no where states that such types of functions are actual <code>constructor</code> functions. They are just normal functions, and <code>new</code> can be used on any function. It's just that we use them as such, and so we call them as such only.</p>\n\n<h2>Calling functions on Functions : <code>call</code> and <code>apply</code></h2>\n\n<p>So yeah, since <code>function</code>s are also <code>Objects</code> (and in-fact first class variables in Javascript), even functions have methods which are... well, functions themselved.</p>\n\n<p>All functions inherit from the global <code>Function</code>, and two of its many methods are <code>call</code> and <code>apply</code>, and both can be used to manipulate the value of <code>this</code> in the function on which they are called.</p>\n\n<pre><code>function foo () { console.log (this, arguments); }\nvar thisArg = {myObj: \"is cool\"};\nfoo.call(thisArg, 1, 2, 3);\n</code></pre>\n\n<p>This is a typical example of using <code>call</code>. It basically takes the first parameter and sets <code>this</code> in the function <code>foo</code> as a reference to <code>thisArg</code>.  All other parameters passed to <code>call</code> are passed to the function <code>foo</code> as arguments.<br>\nSo the above code will log <code>{myObj: \"is cool\"}, [1, 2, 3]</code> in the console. Pretty nice way to change the value of <code>this</code> in any function.</p>\n\n<p><code>apply</code> is almost the same as <code>call</code> accept that it takes only two parameters: <code>thisArg</code> and an array which contains the arguments to be passed to the function. So the above <code>call</code> call can be translated to <code>apply</code> like this:</p>\n\n<pre><code>foo.apply(thisArg, [1,2,3])\n</code></pre>\n\n<p>Note that <code>call</code> and <code>apply</code> can override the value of <code>this</code> set by dot method invocation we discussed in the second bullet.\nSimple enough :)</p>\n\n<h2>Presenting.... <code>bind</code>!</h2>\n\n<p><code>bind</code> is a brother of <code>call</code> and <code>apply</code>.  It is also a method inherited by all functions from the global <code>Function</code> constructor in Javascript. The difference between <code>bind</code> and <code>call</code>/<code>apply</code> is that both <code>call</code> and <code>apply</code> will actually invoke the function. <code>bind</code>, on the other hand, returns a new function with the <code>thisArg</code> and <code>arguments</code> pre-set. Let's take an example to better understand this:</p>\n\n<pre><code>function foo (a, b) {\n    console.log (this, arguments);\n}\nvar thisArg = {myObj: \"even more cool now\"};\nvar bound = foo.bind(thisArg, 1, 2);\nconsole.log (typeof bound); // logs `function`\nconsole.log (bound);\n/* logs `function () { native code }` */\n\nbound(); // calling the function returned by `.bind`\n// logs `{myObj: \"even more cool now\"}, [1, 2]`\n</code></pre>\n\n<p>See the difference between the three? It is subtle, but they are used differently. Like <code>call</code> and <code>apply</code>, <code>bind</code> will also over-ride the value of <code>this</code> set by dot-method invocation.</p>\n\n<p>Also note that neither of these three functions do any change to the original function. <code>call</code> and <code>apply</code> would return the value from freshly constructed functions while <code>bind</code> will return the freshly constructed function itself, ready to be called.</p>\n\n<h2>Extra stuff, copy this</h2>\n\n<p>Sometimes, you don't like the fact that <code>this</code> changes with scope, specially nested scope. Take a look at the following example.</p>\n\n<pre><code>var myObj = {\n    hello: function () {\n        return \"world\"\n        },\n    myMethod: function () {\n        // copy this, variable names are case-sensitive\n        var that = this;\n        // callbacks ftw \\o/\n        foo.bar(\"args\", function () {\n            // I want to call `hello` here\n            this.hello(); // error\n            // but `this` references to `foo` damn!\n            // oh wait we have a backup \\o/\n            that.hello(); // \"world\"\n        });\n    }\n  };\n</code></pre>\n\n<p>In the above code, we see that the value of <code>this</code> changed with nested scope, but we wanted the value of <code>this</code> from the original scope. So we 'copied' <code>this</code> to <code>that</code> and used the copy instead of <code>this</code>. Clever, eh?</p>\n\n<p>Index:</p>\n\n<ol>\n<li>What is held in <code>this</code> by default?</li>\n<li>What if we call the function as a method with Object-dot notation?</li>\n<li>What if we use the <code>new</code> keyword?</li>\n<li>How do we manipulate <code>this</code> with <code>call</code> and <code>apply</code>?</li>\n<li>Using <code>bind</code>.</li>\n<li>Copying <code>this</code> to solve nested-scope issues.</li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Awal Garg",
                        "user_id": 3459110
                    },
                    "score": 7
                },
                {
                    "body": "<p><em>Since this thread has bumped up, I have compiled few points for readers new to <code>this</code> topic.</em> </p>\n\n<h1>How is the value of <code>this</code> determined?</h1>\n\n<p>We use this similar to the way we use pronouns in natural languages like English:  \u201cJohn is running fast because <strong><em>he</em></strong> is trying to catch the train.\u201d Instead we could have written \u201c\u2026 <strong><em>John</em></strong> is trying to catch the train\u201d.  </p>\n\n<pre><code>var person = {    \n    firstName: \"Penelope\",\n    lastName: \"Barrymore\",\n    fullName: function () {\n\n    // We use \"this\" just as in the sentence above:\n       console.log(this.firstName + \" \" + this.lastName);\n\n    // We could have also written:\n       console.log(person.firstName + \" \" + person.lastName);\n    }\n}\n</code></pre>\n\n<p><code>this</code> <strong>is not assigned a value</strong> until an object invokes the function where it is defined. In the global scope, all global variables and functions are defined on the <code>window</code> object. Therefore, <code>this</code> in a global function refers to (and has the value of) the global <code>window</code> object. </p>\n\n<p>When <code>use strict</code>, <code>this</code> in global and in anonymous functions that are not bound to any object holds a value of <code>undefined</code>.</p>\n\n<p>The <code>this</code> keyword is <a href=\"http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/#When_this_is_most_misunderstood_and_becomes_tricky\" rel=\"nofollow\">most misunderstood</a> when: 1) we borrow a method that uses <code>this</code>, 2) we assign a method that uses <code>this</code> to a variable, 3) a function that uses <code>this</code> is passed as a callback function, and 4) <code>this</code> is used inside a closure \u2014 an inner function. <sup>(2)</sup></p>\n\n<p><img src=\"http://i.stack.imgur.com/nPSkX.png\" alt=\"table\"></p>\n\n<h2>What holds the future</h2>\n\n<p>Defined in <a href=\"https://leanpub.com/understandinges6/read\" rel=\"nofollow\">ECMA Script 6</a>, arrow-functions adopt the <code>this</code> binding from the\nenclosing (function or global) scope.</p>\n\n<pre><code>function foo() {\n     // return an arrow function\n     return (a) =&gt; {\n     // `this` here is lexically inherited from `foo()`\n     console.log(this.a);\n  };\n}\nvar obj1 = { a: 2 };\nvar obj2 = { a: 3 };\n\nvar bar = foo.call(obj1);\nbar.call( obj2 ); // 2, not 3!\n</code></pre>\n\n<p>While arrow-functions provide an alternative to using <code>bind()</code>, it\u2019s important to note that they essentially are disabling the traditional <code>this</code> mechanism in favor of more widely understood lexical scoping. <sup>(1)</sup></p>\n\n<hr>\n\n<p><strong><em>References:</em></strong></p>\n\n<ol>\n<li><strong>this &amp; Object Prototypes</strong>, by Kyle Simpson. \u00a9 2014 Getify Solutions.</li>\n<li>javascriptissexy.com - <a href=\"http://goo.gl/pvl0GX\" rel=\"nofollow\">http://goo.gl/pvl0GX</a> </li>\n<li>Angus Croll - <a href=\"http://goo.gl/Z2RacU\" rel=\"nofollow\">http://goo.gl/Z2RacU</a> </li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "carlodurso",
                        "user_id": 1672895
                    },
                    "score": 2
                }
            ],
            "body": "<p>I have noticed that there doesn't appear to be a clear explanation of what the <code>this</code> keyword is and how it is correctly (and incorrectly) used in JavaScript on the Stack Overflow site.</p>\n\n<p>I have witnessed some very strange behaviour with it and have failed to understand why it has occurred.</p>\n\n<p>How does <code>this</code> work and when should it be used?</p>\n",
            "last_activity_date": 1426166555,
            "owner": {
                "display_name": "Maxim Gershkovich",
                "user_id": 314661
            },
            "question_id": 3127429,
            "score": 334,
            "tags": [
                "javascript",
                "this"
            ],
            "title": "How does the &quot;this&quot; keyword work?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>As far as I know that only works in Internet&nbsp;Explorer.</p>\n\n<p>See also <em><a href=\"http://www.dynamic-tools.net/toolbox/copyToClipboard/\" rel=\"nofollow\">Dynamic Tools - JavaScript Copy To Clipboard</a></em>, but it requires the user to change the configuration first and even then it doesn't seems to work.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Stormenet",
                        "user_id": 2090
                    },
                    "score": 1
                },
                {
                    "body": "<p>Reading and modifying the clipboard from a webpage raises security and privacy concerns. However, in Internet&nbsp;Explorer, it is possible to do it. I found this <a href=\"http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/\">example snippet</a>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function select_all(obj) {\n        var text_val=eval(obj);\n        text_val.focus();\n        text_val.select();\n        if (!document.all) return; // IE only\n        r = text_val.createTextRange();\n        r.execCommand('copy');\n    }\n&lt;/script&gt;\n&lt;input value=\"http://www.sajithmr.com\"\n onclick=\"select_all(this)\" name=\"url\" type=\"text\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "bandi",
                        "user_id": 49388
                    },
                    "score": 51
                },
                {
                    "body": "<p>In browsers other than IE you need to use a small flash object to manipulate the clipboard, e.g.</p>\n\n<ul>\n<li><a href=\"http://ajaxian.com/archives/auto-copy-to-clipboard\" rel=\"nofollow\">Auto copy to clipboard</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Quog",
                        "user_id": 15531
                    },
                    "score": 10
                },
                {
                    "body": "<p>The other methods will copy plain text to the clipboard. To copy HTML (ie, you can paste results into a WSIWYG editor), you can do the following in <strong>IE ONLY</strong>. This is is fundamentally different from the other methods, as the browser actually visibly selects the content.</p>\n\n<pre><code>// create an editable DIV and append the HTML content you want copied\nvar editableDiv = document.createElement(\"div\");\nwith (editableDiv) {\n    contentEditable = true;\n}     \neditableDiv.appendChild(someContentElement);          \n\n// select the editable content and copy it to the clipboard\nvar r = document.body.createTextRange();\nr.moveToElementText(editableDiv);\nr.select();  \nr.execCommand(\"Copy\");\n\n// deselect, so the browser doesn't leave the element visibly selected\nr.moveToElementText(someHiddenDiv);\nr.select();\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chase Seibert",
                        "user_id": 7679
                    },
                    "score": 12
                },
                {
                    "body": "<p>Looks like you took the code from <a href=\"http://stackoverflow.com/questions/316508/greasemonkey-javascript-copy-to-clipboard-button\" rel=\"nofollow\" title=\"Greasemonkey\\JavaScript Copy to Clipboard button\">Greasemonkey\\JavaScript Copy to Clipboard button</a> or the original source of this snippet...</p>\n\n<p>This code was for Greasemonkey, hence the unsafeWindow. And I guess the syntax error in IE comes from the <code>const</code> keyword which is specific to Firefox (replace it with <code>var</code>).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PhiLho",
                        "user_id": 15459
                    },
                    "score": 3
                },
                {
                    "body": "<p>As of Flash 10, you can only copy to clipboard if the action originates from user interaction with a Flash object. (<a href=\"http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31\">Read related section from Adobe's Flash 10 announcement</a>)</p>\n\n<p>The solution is to overly a flash object above the Copy button, or whatever element initiates the copy. Zero Clipboard is currently the best library with this implementation. Experienced Flash developers may just want to make their own library.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "matthuhiggins",
                        "user_id": 462610
                    },
                    "score": 12
                },
                {
                    "body": "<p>If you want a really simple solution (takes less than 5 minutes to integrate) and looks good right out of the box, then Clippy is a nice alternative to some of the more complex solutions.  </p>\n\n<p><a href=\"http://github.com/mojombo/clippy\">Clippy</a></p>\n\n<p>It was written by a co-founder of Github.  Example Flash embed code below:</p>\n\n<pre><code>&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"\n        width=\"110\"\n        height=\"14\"\n        id=\"clippy\" &gt;\n&lt;param name=\"movie\" value=\"/flash/clippy.swf\"/&gt;\n&lt;param name=\"allowScriptAccess\" value=\"always\" /&gt;\n&lt;param name=\"quality\" value=\"high\" /&gt;\n&lt;param name=\"scale\" value=\"noscale\" /&gt;\n&lt;param NAME=\"FlashVars\" value=\"text=#{text}\"&gt;\n&lt;param name=\"bgcolor\" value=\"#{bgcolor}\"&gt;\n&lt;embed src=\"/flash/clippy.swf\"\n       width=\"110\"\n       height=\"14\"\n       name=\"clippy\"\n       quality=\"high\"\n       allowScriptAccess=\"always\"\n       type=\"application/x-shockwave-flash\"\n       pluginspage=\"http://www.macromedia.com/go/getflashplayer\"\n       FlashVars=\"text=#{text}\"\n       bgcolor=\"#{bgcolor}\"\n/&gt;\n&lt;/object&gt;\n</code></pre>\n\n<p>Remember to replace <code>#{text}</code> with the text you need copied, and <code>#{bgcolor}</code> with a colour.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Brent Matzelle",
                        "user_id": 330110
                    },
                    "score": 101
                },
                {
                    "body": "<p>I had the same problem building a custom grid edit from (something like Excel) and compatibility with Excel. I had to support selecting multiple cells, copying and pasting. </p>\n\n<p>Solution: create a textarea where you will be inserting data for the user to copy (for me when the user is selecting cells), set focus on it (for example, when user press <kbd>Ctrl</kbd>) and select the whole text. </p>\n\n<p>So, when the user hit <kbd>Ctrl</kbd> + <kbd>C</kbd> he gets copied cells he selected. After testing just resizing the textarea to 1 pixel (I didn't test if it will be working on display:none). It works nicely on all browsers, and it is transparent to the user.</p>\n\n<p>Pasting - you could do same like this (differs on your target) - keep focus on textarea and catch paste events using onpaste (in my project I use textareas in cells to edit).</p>\n\n<p>I can't paste an example (commercial project), but you got the idea.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "xiniu",
                        "user_id": 578815
                    },
                    "score": 3
                },
                {
                    "body": "<p>From one of the projects I've been working on, a jQuery copy-to-clipboard plugin that utilizes the <a href=\"http://steamdev.com/zclip\">Zero Clipboard</a> library.</p>\n\n<p>It is easier to use than the native Zero Clipboard plugin if you're a heavy jQuery user.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SteamDev",
                        "user_id": 736994
                    },
                    "score": 24
                },
                {
                    "body": "<p>Automatic copying to clipboard may be dangerous, therefore most browsers (except IE) make it very difficult. Personally, I use the following simple trick:</p>\n\n<pre><code>function copyToClipboard(text) {\n  window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\n}\n</code></pre>\n\n<p>The user is presented with the prompt box, where the text to be copied is already selected. Now it's enough to press <kbd>Ctrl</kbd>+<kbd>C</kbd> and <kbd>Enter</kbd> (to close the box) -- and voila!</p>\n\n<p>Now the clipboard copy operation is SAFE, because the user does it manually (but in a pretty straightforward way). Of course, works in all browsers.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jarek Milewski",
                        "user_id": 760609
                    },
                    "score": 757
                },
                {
                    "body": "<p>This is an expansion of @Chase's answer, with the advantage that it will work for IMAGE and TABLE elements, not just DIVs on IE9.</p>\n\n<pre><code>if (document.createRange) {\n    // IE9 and modern browsers\n    var r = document.createRange();\n    r.setStartBefore(to_copy);\n    r.setEndAfter(to_copy);\n    r.selectNode(to_copy);\n    var sel = window.getSelection();\n    sel.addRange(r);\n    document.execCommand('Copy');  // does nothing on FF\n} else {\n    // IE 8 and earlier.  This stuff won't work on IE9.\n    // (unless forced into a backward compatibility mode,\n    // or selecting plain divs, not img or table). \n    var r = document.body.createTextRange();\n    r.moveToElementText(to_copy);\n    r.select()\n    r.execCommand('Copy');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Oliver Bock",
                        "user_id": 249548
                    },
                    "score": 4
                },
                {
                    "body": "<p>It seems I misread the question, but for reference, you can extract a range of the DOM (not to clipboard; compatible with all modern browsers), and combine it with the oncopy and onpaste and onbeforepaste events to get clipboard behaviour. Here's the code to achieve this: </p>\n\n<pre><code>function clipBoard(sCommand) {\n  var oRange=contentDocument.createRange();\n  oRange.setStart(startNode, startOffset);\n  oRange.setEnd(endNode, endOffset);\n/* This is where the actual selection happens.\nin the above, startNode and endNode are dom nodes defining the beginning \nand end of the \"selection\" respectively. startOffset and endOffset are \nconstants that are defined as follows:\n\nEND_TO_END: 2\nEND_TO_START: 3\nNODE_AFTER: 1\nNODE_BEFORE: 0\nNODE_BEFORE_AND_AFTER: 2\nNODE_INSIDE: 3\nSTART_TO_END: 1\nSTART_TO_START: 0\n\nand would be used like oRange.START_TO_END */\n      switch(sCommand) {\n    case \"cut\":\n          this.oFragment=oRange.extractContents();\n      oRange.collapse();\n      break;\n    case \"copy\":\n      this.oFragment=oRange.cloneContents();\n      break;\n    case \"paste\":\n      oRange.deleteContents();\n      var cloneFragment=this.oFragment.cloneNode(true)\n      oRange.insertNode(cloneFragment);\n      oRange.collapse();\n      break;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mrBorna",
                        "user_id": 791686
                    },
                    "score": 4
                },
                {
                    "body": "<p>I also suggest <a href=\"http://plugins.jquery.com/?s=copy\" rel=\"nofollow\">jQuery Clipboard Copy Plugins</a>:</p>\n\n<pre><code>$(\"#elmID\").copy();\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "markzzz",
                        "user_id": 365251
                    },
                    "score": 14
                },
                {
                    "body": "<p>I found another nice solution LMCButton - small animated flash cross browser button. One JavaScript functions and swf button. Simple options (caption, custom JavaScript).  </p>\n\n<p>Link: <a href=\"http://www.lettersmarket.com/view_blog/a-3-copy_to_clipboard_lmcbutton.html\" rel=\"nofollow\">Copy to Clipboard LMCButton</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Denis",
                        "user_id": 1343124
                    },
                    "score": 5
                },
                {
                    "body": "<p>I found the following solution:</p>\n\n<p>On key down handler creates \"pre\" tag. We set the content to copy to this tag, then make a selection on this tag and return true in handler. This calls standard handler of chrome and copies selected text.</p>\n\n<p>And if you need you may be set the timeout for function for restoring previous selection. My implementation on Mootools:</p>\n\n<pre><code>   function EnybyClipboard() {\n     this.saveSelection = false;\n     this.callback = false;\n     this.pastedText = false;\n\n     this.restoreSelection = function() {\n       if (this.saveSelection) {\n         window.getSelection().removeAllRanges();\n         for (var i = 0; i &lt; this.saveSelection.length; i++) {\n           window.getSelection().addRange(this.saveSelection[i]);\n         }\n         this.saveSelection = false;\n       }\n     };\n\n     this.copyText = function(text) {\n       var div = $('special_copy');\n       if (!div) {\n         div = new Element('pre', {\n           'id': 'special_copy',\n           'style': 'opacity: 0;position: absolute;top: -10000px;right: 0;'\n         });\n         div.injectInside(document.body);\n       }\n       div.set('text', text);\n       if (document.createRange) {\n         var rng = document.createRange();\n         rng.selectNodeContents(div);\n         this.saveSelection = [];\n         var selection = window.getSelection();\n         for (var i = 0; i &lt; selection.rangeCount; i++) {\n           this.saveSelection[i] = selection.getRangeAt(i);\n         }\n         window.getSelection().removeAllRanges();\n         window.getSelection().addRange(rng);\n         setTimeout(this.restoreSelection.bind(this), 100);\n       } else return alert('Copy not work. :(');\n     };\n\n     this.getPastedText = function() {\n       if (!this.pastedText) alert('Nothing to paste. :(');\n       return this.pastedText;\n     };\n\n     this.pasteText = function(callback) {\n       var div = $('special_paste');\n       if (!div) {\n         div = new Element('textarea', {\n           'id': 'special_paste',\n           'style': 'opacity: 0;position: absolute;top: -10000px;right: 0;'\n         });\n         div.injectInside(document.body);\n         div.addEvent('keyup', function() {\n           if (this.callback) {\n             this.pastedText = $('special_paste').get('value');\n             this.callback.call(null, this.pastedText);\n             this.callback = false;\n             this.pastedText = false;\n             setTimeout(this.restoreSelection.bind(this), 100);\n           }\n         }.bind(this));\n       }\n       div.set('value', '');\n       if (document.createRange) {\n         var rng = document.createRange();\n         rng.selectNodeContents(div);\n         this.saveSelection = [];\n         var selection = window.getSelection();\n         for (var i = 0; i &lt; selection.rangeCount; i++) {\n           this.saveSelection[i] = selection.getRangeAt(i);\n         }\n         window.getSelection().removeAllRanges();\n         window.getSelection().addRange(rng);\n         div.focus();\n         this.callback = callback;\n       } else return alert('Fail to paste. :(');\n     };\n   }\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>enyby_clip = new EnybyClipboard(); //init \n\nenyby_clip.copyText('some_text'); // place this in CTRL+C handler and return true;\n\nenyby_clip.pasteText(function callback(pasted_text) {\n        alert(pasted_text);\n}); // place this in CTRL+V handler and return true;\n</code></pre>\n\n<p>On paste it creates textarea and works the same way.</p>\n\n<p>PS may be this solution can be used for creating fully cross-browser solution without flash. Its works in FF and Chrome.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Enyby",
                        "user_id": 1504248
                    },
                    "score": 17
                },
                {
                    "body": "<p>If the copied link has to be pasted on the same site, then simple solution is to,</p>\n\n<p>highlight the text before pressing the simple html copy button and then on pressing it, the text content is stored in a session. and wherever it is to be pasted, there is a paste button. </p>\n\n<p>**I know, its not persistent &amp; universal solution but its something :)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Saad",
                        "user_id": 555467
                    },
                    "score": 0
                },
                {
                    "body": "<p>@Jimbo, here is the simple ajax/session based clipboard for the same website.</p>\n\n<p>Note that the session must be enabled &amp; valid and this soln. works for the same site. I tested it on Codeigniter but ran into session/ajax problem but <a href=\"http://stackoverflow.com/questions/7980193/codeigniter-session-bugging-out-with-ajax-calls\">this</a> solved that problem too. If you dont want to play with sessions, use DB table.</p>\n\n<p><strong>js/jquery</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n\n    $(\"#copy_btn_id\").click(function(){\n\n      $.post(\"&lt;?php echo base_url();?&gt;ajax/foo_copy/\"+$(this).val(), null, \n        function(data){\n                //copied successfully\n            }, \"html\"\n      );\n    });\n\n    $(\"#paste_btn_id\").click(function() {\n\n       $.post(\"&lt;?php echo base_url();?&gt;ajax/foo_paste/\", null, \n         function(data) {\n           $('#paste_btn_id').val(data);\n         }, \"html\"\n       );\n    });\n\n\n  });\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>html</strong> </p>\n\n<pre><code>&lt;input type='text' id='copy_btn_id' onclick='this.select();'  value='myvalue' /&gt;\n&lt;input type='text' id='paste_btn_id' value='' /&gt;\n</code></pre>\n\n<p><strong>php</strong></p>\n\n<pre><code>&lt;?php \nclass Ajax extends CI_Controller {\n    public function foo_copy($val){\n        $this-&gt;session-&gt;set_userdata(array('clipboard_val' =&gt; $val));\n    }\n    public function foo_paste(){\n        echo $this-&gt;session-&gt;userdata('clipboard_val');\n        exit();\n    }\n}\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Saad",
                        "user_id": 555467
                    },
                    "score": 2
                },
                {
                    "body": "<p>My bad. This only works in IE.</p>\n\n<p>Here's yet another way to copy text:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;a onclick=\"window.clipboardData.setData('text', document.getElementById('Test').innerText);\"&gt;Copy&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dvallejo",
                        "user_id": 79727
                    },
                    "score": 3
                },
                {
                    "body": "<p>In case your are reading text from clipboard in a Chrome extension, with 'clipboardRead' permission allowed, you can use below code:</p>\n\n<pre><code>function readTextFromClipboardInChromeExtension() {\n    var ta = $('&lt;textarea/&gt;');\n    $('body').append(ta);\n    ta.focus();\n    document.execCommand('paste');\n    var text = ta.val();\n    ta.blur();\n    ta.remove();\n    return text;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "supNate",
                        "user_id": 818319
                    },
                    "score": 0
                },
                {
                    "body": "<p>ZeroClipboard is the best cross-browser solution I've found:</p>\n\n<pre><code>&lt;div id=\"copy\" data-clipboard-text=\"Copy Me!\"&gt;Click to copy&lt;/div&gt;    \n&lt;script src=\"ZeroClipboard.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  var clip = new ZeroClipboard( document.getElementById('copy') );\n&lt;/script&gt;\n</code></pre>\n\n<p>If you need non-flash support for iOS you just add a fall-back:</p>\n\n<pre><code>clip.on( 'noflash', function ( client, args ) {\n    $(\"#copy\").click(function(){            \n        var txt = $(this).attr('data-clipboard-text');\n        prompt (\"Copy link, then click OK.\", txt);\n    });\n});  \n</code></pre>\n\n<p><a href=\"http://zeroclipboard.org/\">http://zeroclipboard.org/</a></p>\n\n<p><a href=\"https://github.com/zeroclipboard/ZeroClipboard\">https://github.com/zeroclipboard/ZeroClipboard</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Justin",
                        "user_id": 922522
                    },
                    "score": 20
                },
                {
                    "body": "<p>In Chrome you can use <a href=\"http://anti-code.com/devtools-cheatsheet/#command-line-api\" rel=\"nofollow\"><code>copy('the text or variable etc')</code></a>.  While this isn't cross-browser (and <a href=\"https://code.google.com/p/chromium/issues/detail?id=260401\" rel=\"nofollow\">doesn't work in a snippet?</a>), you could add it to the other cross-browser answers.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "drzaus",
                        "user_id": 1037948
                    },
                    "score": 2
                },
                {
                    "body": "<p><a href=\"https://github.com/asafdav/ng-clip\" rel=\"nofollow\"><code>ng-clip</code></a> was the simplest solution for AngularJS.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nikolay Melnikov",
                        "user_id": 1202371
                    },
                    "score": 4
                },
                {
                    "body": "<p>I have recently written a <a href=\"https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/\">technical blog post</a> on this very problem (I work at Lucidchart and we recently did an overhaul on our clipboard).</p>\n\n<p>Copying plain text to the clipboard is relatively simple, assuming you want to do it during a system copy event (user presses ctrl-c or uses the browser's menu). </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var isIe = (navigator.userAgent.toLowerCase().indexOf(\"msie\") != -1 \n           || navigator.userAgent.toLowerCase().indexOf(\"trident\") != -1);\n\ndocument.addEventListener('copy', function(e) {\n    var textToPutOnClipboard = \"This is some text\";\n    if (isIe) {\n        window.clipboardData.setData('Text', textToPutOnClipboard);    \n    } else {\n        e.clipboardData.setData('text/plain', textToPutOnClipboard);\n    }\n    e.preventDefault();\n});\n</code></pre>\n\n<p>Putting text on the clipboard not during a system copy event is much more difficult. It looks like some of these other answers reference ways to do it via Flash, which is the only cross-browser way to do it (so far as I understand).</p>\n\n<p>Other than that, there are some options on a browser-by-browser basis.</p>\n\n<p>This is the most simple in IE, where you can access the clipboardData object at anytime from Javascript via:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.clipboardData\n</code></pre>\n\n<p>(When you attempt to do this outside of a system cut, copy, or paste event, however, IE will prompt the user to grant the web application clipboard permission.)</p>\n\n<p>In Chrome, you can create a chrome extension that will give you <a href=\"https://developer.chrome.com/extensions/declare_permissions\">clipboard permissions</a> (this is what we do for Lucidchart). Then for users with your extension installed you'll just need to fire the system event yourself:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>document.execCommand('copy');\n</code></pre>\n\n<p>It looks like Firefox has <a href=\"http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard\">some options</a> that allow users to grant permissions to certain sites to access the clipboard, but I haven't tried any of these personally.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Richard Shurtz",
                        "user_id": 984924
                    },
                    "score": 18
                }
            ],
            "body": "<p>What is the best way to copy text to the clipboard? (multi-browser)</p>\n\n<p>I have tried: </p>\n\n<pre><code>function copyToClipboard(text) {\n    if (window.clipboardData) { // Internet Explorer\n        window.clipboardData.setData(\"Text\", text);\n    } else {  \n        unsafeWindow.netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\");  \n        const clipboardHelper = Components.classes[\"@mozilla.org/widget/clipboardhelper;1\"].getService(Components.interfaces.nsIClipboardHelper);  \n        clipboardHelper.copyString(text);\n    }\n}\n</code></pre>\n\n<p>but in Internet Explorer it gives a syntax error. In Firefox, it says <code>unsafeWindow is not defined</code>.</p>\n\n<p><strong>Edit</strong> A nice trick without flash: <a href=\"http://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard\">How does Trello access the user&#39;s clipboard?</a></p>\n",
            "last_activity_date": 1421095240,
            "owner": {
                "display_name": "Santiago Corredoira",
                "user_id": 4264
            },
            "question_id": 400212,
            "score": 1133,
            "tags": [
                "javascript",
                "clipboard",
                "copy-paste"
            ],
            "title": "How do I copy to the clipboard in JavaScript?"
        },
        {
            "answer_count": 26,
            "answers": [
                {
                    "body": "<p><strong>Obfuscation:</strong></p>\n\n<p>Try <a href=\"http://developer.yahoo.com/yui/compressor/\"><strong>YUI Compressor</strong></a>.  It's a very popular tool, built, enhanced and maintained by the Yahoo UI team.</p>\n\n<p>You may also use:</p>\n\n<ul>\n<li><a href=\"http://closure-compiler.appspot.com/home\">Google Closure Compiler</a></li>\n<li><a href=\"http://marijnhaverbeke.nl/uglifyjs\">UglifyJS</a></li>\n</ul>\n\n<p><strong>Private String Data:</strong></p>\n\n<p>Keeping string values private is a different concern, and obfuscation won't really be of much benefit.  Of course, by packaging up your source into a garbled, minified mess, you have a light version of <strong>security</strong> through <strong>obscurity</strong>.  Most of the time, it's your user who is viewing the source, and the string values on the client are intended for their use, so that sort of private string value isn't often necessary.</p>\n\n<p>If you really had a value that you never wanted a user to see, you would have a couple of options.  First, you could do some kind of encryption, which is decrypted at page load.  That would probably be one of the most secure options, but also a lot of work which may be unnecessary.  You could probably base64 encode some string values, and that would be easier.. but someone who really wanted those string values could <strong>easily decode them</strong>.  Encryption is the only way to truly prevent anyone from accessing your data, and most people find that to be more security than they need.</p>\n\n<p><strong>Sidenote:</strong></p>\n\n<p>Obfuscation in Javascript has been known to cause some bugs. The obfuscators are getting a little better about it, but many outfits decide that they see enough benefit from <strong>minifying</strong> and <strong>gzipping</strong>, and the added savings of obfuscation <strong>isn't always worth the trouble</strong>.  If you're trying to protect your source, maybe you'll decide that it's worth your while, just to make your code harder to read. <a href=\"http://www.crockford.com/javascript/jsmin.html\"><strong>JSMin</strong></a> is a good alternative.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "keparo",
                        "user_id": 19468
                    },
                    "score": 261
                },
                {
                    "body": "<p>The problem with interpreted languages, is that you send the source to get them working (unless you have a compiler to bytecode, but then again, it is quite trivial to decompile).</p>\n\n<p>So, if you don't want to sacrifice performance, you can only act on variable and function names, eg. replacing them with a, b... aa, ab... or a101, a102, etc. And, of course, remove as much space/newlines as you can (that's what so called JS compressors do).<br />\nObfuscating strings will have a performance hit, if you have to encrypt them and decrypt them in real time. Plus a JS debugger can show the final values...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PhiLho",
                        "user_id": 15459
                    },
                    "score": 13
                },
                {
                    "body": "<p>There are a number of JavaScript obfuscation tools that are freely available; however, I think it's important to note that it is difficult to obfuscate JavaScript to the point where it cannot be reverse-engineered. </p>\n\n<p>To that end, there are several options that I've used to some degree overtime:</p>\n\n<ul>\n<li><p><a href=\"http://developer.yahoo.com/yui/compressor/\">YUI Compressor</a>. Yahoo!'s JavaScript compressor does a good job of condensing the code that will improve its load time. There is a small level of obfuscation that works relatively well. Essentially, Compressor will change function names, remove white space, and modify local variables. This is what I use most often. This is an open-source Java-based tool.</p></li>\n<li><p><a href=\"http://www.crockford.com/javascript/jsmin.html\">JSMin</a> is a tool written by Douglas Crockford that seeks to minify your JavaScript source. In Crockford's own words, \"JSMin does not obfuscate, but it does uglify.\" It's primary goal is to minify the size of your source for faster loading in browsers.</p></li>\n<li><p><a href=\"http://www.javascriptobfuscator.com/Default.aspx\">Free JavaScript Obfuscator</a>. This is a web-based tool that attempts to obfuscate your code by actually encoding it. I think that the trade-offs of its form of encoding (or obfuscation) could come at the cost of filesize; however, that's a matter of personal preference.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tom",
                        "user_id": 20
                    },
                    "score": 35
                },
                {
                    "body": "<p>I can recommend <a href=\"http://jsutility.pjoneil.net/\" rel=\"nofollow\">JavaScript Utility</a> by Patrick J. O'Neil. It can obfuscate/compact and compress and it seems to be pretty good at these. That said, I never tried integrating it in a build script of any kind.</p>\n\n<p>As for obfuscating vs. minifying - I am not a big fan of the former. It makes debugging impossible (Error at line 1... \"wait, there is only one line\") and they always take time to unpack. But if you need to... well.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tsvetomir Tsonev",
                        "user_id": 25449
                    },
                    "score": 7
                },
                {
                    "body": "<p>You can obfuscate the javascript source all you want, but it will always be reverse-engineerable just by virtue of requiring all the source code to actually run on the client machine... the best option I can think of is having all your processing done with server-side code, and all the client code javascript does is send requests for processing to the server itself. Otherwise, anyone will always be able to keep track of all operations that the code is doing.</p>\n\n<p>Someone mentioned base64 to keep strings safe. This is a terrible idea. Base64 is immediately recognizable by the types of people who would want to reverse engineer your code. The first thing they'll do is unencode it and see what it is.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Claudiu",
                        "user_id": 15055
                    },
                    "score": 32
                },
                {
                    "body": "<p>A non-open-source Javascript-based application is fairly silly. Javascript is a client-side interpreted language.. Obfuscation isn't much protection..</p>\n\n<p>JS obfuscation is usually done to reduce the size of the script, rather than \"protect\" it. If you are in a situation where you don't want your code to be public, Javascript isn't the right language..</p>\n\n<p>There are plenty of tools around, but most have the word \"compressor\" (or \"minifier\") in its name for a reason..</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dbr",
                        "user_id": 745
                    },
                    "score": 9
                },
                {
                    "body": "<p>Obfuscation can never really work.  For anyone who really wants to get at your code, it's just a speed bump.  Worse, it keeps your users from fixing bugs (and shipping them back to you) and makes it harder for you to diagnose problems in the field.  Its a waste of your time and money.</p>\n\n<p>Write a license and get a lawyer to go after violators.</p>\n\n<p>The only way you can really protect your code is to not ship it.  Move the important code server-side and have your public Javascript code do Ajax calls to it.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/232736/code-obfuscator-for-php\">See my full answer about obfuscators here.</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Schwern",
                        "user_id": 14660
                    },
                    "score": 73
                },
                {
                    "body": "<p><a href=\"http://www.anotherchris.net/tools/online-javascript-minifier/\" rel=\"nofollow\">This one minifies</a> but doesn't obfuscate. If you don't want to use command line Java you can paste your javascript into a webform.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chris S",
                        "user_id": 21574
                    },
                    "score": 1
                },
                {
                    "body": "<p>I'm under the impression that some enterprises (e.g.: JackBe) put encrypted JavaScript code inside *.gif files, rather than JS files, as an additional measure of obfuscation.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "xgMz",
                        "user_id": 47551
                    },
                    "score": 1
                },
                {
                    "body": "<p>As a JavaScript/HTML/CSS obfuscator/compressor you can also try <a href=\"http://digua.sf.net\" rel=\"nofollow\">Patu Digua</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adrian",
                        "user_id": 319273
                    },
                    "score": 1
                },
                {
                    "body": "<p>I'm surprised no one has mentioned Google's <a href=\"http://code.google.com/closure/compiler/\">Closure Compiler</a>. It doesn't just minify/compress, it analyzes to find and remove unused code, and rewrites for maximum minification. It can also do type checking and will warn about syntax errors. </p>\n\n<p>JQuery recently switched from YUI Compresser to Closure Compiler, and saw a \"<a href=\"http://twitter.com/jeresig/status/5462879648\">solid improvement</a>\"</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jason Hall",
                        "user_id": 83406
                    },
                    "score": 94
                },
                {
                    "body": "<p>Try <a href=\"http://www.jscrambler.com\">JScrambler</a>. I gave it a spin recently and  was impressed by it. \nIt provides a set of templates for obfuscation with predefined settings for those who dont care much about the details and just want to get it done quickly. You can also create custom obfuscation by choosing whatever transformations/techniques you want.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anthony",
                        "user_id": 361792
                    },
                    "score": 11
                },
                {
                    "body": "<p>Contrary to most of the other answers I suggest against YUI Compressor; you should use <a href=\"http://code.google.com/closure/\">Google Closure</a>.</p>\n\n<p>Not much because it compresses more, but mostly because it will catch javascript errors such as <code>a = [1,2,3,];</code> which make IE go haywire.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andreas Bonini",
                        "user_id": 95135
                    },
                    "score": 13
                },
                {
                    "body": "<p>If you use a JavaScript library, consider Dojo Toolkit which is compatible (after minor modifications) with the Closure Compiler's Advanced mode compilation.</p>\n\n<p><a href=\"http://dojo-toolkit.33424.n3.nabble.com/file/n2636749/Using_the_Dojo_Toolkit_with_the_Closure_Compiler.pdf?by-user=t\" rel=\"nofollow\">Dojo \u2013 The Only JavaScript Library \nCompatible with The Closure Compiler</a></p>\n\n<p>Code compiled with Closure Advanced mode is almost impossible to reverse-engineer, even passing through a beautifier, as the <em>entire</em> code base (includinhg the library) is obfuscated.  It is also 25% small on average.</p>\n\n<p>JavaScript code that is merely minified (YUI Compressor, Uglify etc.) is easy to reverse-engineer after passing through a beautifier.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Stephen Chung",
                        "user_id": 650891
                    },
                    "score": 1
                },
                {
                    "body": "<p>You could try this as an alternative as well.</p>\n\n<p><a href=\"http://tools.2vi.nl\" rel=\"nofollow\">ObfuscateJS : Javascript Obfuscator</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "campuscodi",
                        "user_id": 422642
                    },
                    "score": 2
                },
                {
                    "body": "<p>I would suggest first minify with something like YUI Compressor, and then convert all string and numbers to HEX Values using something like <a href=\"http://www.javascriptobfuscator.com/\" rel=\"nofollow\">http://www.javascriptobfuscator.com/</a></p>\n\n<p>With this, the code would be rendered near impossible to understand and I think at this Stage it will take more time for a Hacker to re-enact your code than actually if he re-wrote from scratch. Rewriting and Cloning is what you cant actually stop. After all we are free-people !</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dynamite Blitzer",
                        "user_id": 704986
                    },
                    "score": 1
                },
                {
                    "body": "<p>Dean Edward's Packer is an excellent obfuscator, though it primarily obfuscates the code, not any string elements you may have within your code.</p>\n\n<p>See: <a href=\"http://jscompress.com\" rel=\"nofollow\">Online Javascript Compression Tool</a>  and select Packer (Dean Edwards) from the dropdown</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "smdrager",
                        "user_id": 356550
                    },
                    "score": 3
                },
                {
                    "body": "<p>I've used this in the past, and it does a good job. It's not free, but you should definitely take a look.<br>\n<a href=\"http://www.stunnix.com/prod/jo\" rel=\"nofollow\">JavaScript Obfuscator &amp; Encoder</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Henry Wang",
                        "user_id": 716177
                    },
                    "score": 1
                },
                {
                    "body": "<p>I am using Closure-Compiler utility for the java-script obfuscation.  It minifies the code and has more options for obfuscation.\nThis utility is available at Google code at below URL:<br>\n<a href=\"http://code.google.com/closure/compiler\" rel=\"nofollow\">Closure Tools</a></p>\n\n<p>But now a days I am hearing much of UglifyJS.  You can find various comparison between Closure Compiler and UglifyJS in which Uglify seems to be a winner.<br>\n<a href=\"http://badassjs.com/post/971960912/uglifyjs-a-fast-new-javascript-compressor-for-node-js\" rel=\"nofollow\">UglifyJS: A Fast New JavaScript Compressor For Node.js That\u2019s On Par With Closure</a></p>\n\n<p>Soon I would give chance to UglifyJS.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "shaILU",
                        "user_id": 783890
                    },
                    "score": 3
                },
                {
                    "body": "<p>Try this tool <a href=\"http://javascript-source.com/\" rel=\"nofollow\">Javascript Obfuscator</a></p>\n\n<p>I used it on my HTML5 game not only it reduced it size from 950KB to 150 but also made the source code unreadable closure compilers and minifiers are reversable I personally dont know how to reverse this obfuscation.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jerczu",
                        "user_id": 902197
                    },
                    "score": 2
                },
                {
                    "body": "<p>I've been using <a href=\"http://www.jasob.com/\" rel=\"nofollow\">Jasob</a> for years and it is hands down the best obfuscator out there.<br>\nIt has an advanced UI but is still intuitive and easy to use.<br>\nIt will also handle HTML and CSS files.</p>\n\n<p>The best way to use it is to prefix all of your <em>private</em> variables with something like an underscore, then use the <code>sort</code> feature to group them all together and <em>check</em> them off as targets for obfuscation.  </p>\n\n<p>Users can still view your source, but it's much more difficult to decipher when your private variables are converted from something like <code>_sUserPreferredNickName</code> to <code>a</code>.</p>\n\n<p>The engine will automatically tally up the number of targeted variables and prioritize them to get the maximum compression.</p>\n\n<p>I don't work for Jasob and I get nothing out of promoting them, just offering some friendly advice.<br>\nThe downside is that it's not free and is a little pricey, but still worth it when stacked against alternatives - the 'free' options don't even come close.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matt",
                        "user_id": 1124926
                    },
                    "score": 1
                },
                {
                    "body": "<p>There is an alpha version of an Obfuscator compressor pretty good, you cna report bug if after obfuscation your code not run.</p>\n\n<p><a href=\"http://javaencrypt.com/javascript-obfuscator/index.php?lang=en\" rel=\"nofollow\">Obfuscating javascript with dirty code</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ramara",
                        "user_id": 1142842
                    },
                    "score": 3
                },
                {
                    "body": "<p>You definitely should consider taking a look at <a href=\"http://www.obfuscriptor.com/\" rel=\"nofollow\">Obfuscriptor</a>. </p>\n\n<p>I goes beyond the typical Javascript minifying tricks we've seen from other tools such as <a href=\"http://developer.yahoo.com/yui/compressor/\" rel=\"nofollow\">YUI Compressor</a> or <a href=\"http://closure-compiler.appspot.com/home\" rel=\"nofollow\">Google Closure</a>. </p>\n\n<p>The obfuscated code looks more like encrypted. Unlike anything I've seen before. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mike",
                        "user_id": 558139
                    },
                    "score": 2
                },
                {
                    "body": "<p>Have you tried <a href=\"http://www.bananascript.com/\" rel=\"nofollow\">Bananascript</a>? It produces highly compressed and completely unreadable code.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "niutech",
                        "user_id": 912946
                    },
                    "score": 3
                },
                {
                    "body": "<p>What i would do:</p>\n\n<p><strong>A.</strong> Troll the hacker!</p>\n\n<p>This is will be in the second part my fake/obfuscated secret javascript code LAUNCHER.\nThe one you see in the source code.</p>\n\n<p>What does this code?</p>\n\n<ol>\n<li>loads the real code </li>\n<li>sets a custom header</li>\n<li>posts a custom variable</li>\n</ol>\n\n<hr>\n\n<pre><code>var ajax=function(a,b,d,c,e,f){\n e=new FormData();\n for(f in d){e.append(f,d[f]);};\n c=new XMLHttpRequest();\n c.open('POST',a);\n c.setRequestHeader(\"Troll1\",\"lol\");\n c.onload=b;\n c.send(e);\n};\nwindow.onload=function(){\n ajax('Troll.php',function(){\n  (new Function(atob(this.response)))()\n },{'Troll2':'lol'});\n}\n</code></pre>\n\n<p><strong>B.</strong> Obfuscate the code a little</p>\n\n<p>What is that?</p>\n\n<ol>\n<li>thats the same code as above in base64</li>\n<li>this is not the SECRET javascript code</li>\n</ol>\n\n<hr>\n\n<pre><code>(new Function(atob('dmFyIGFqYXg9ZnVuY3Rpb24oYSxiLGQsYyxlLGYpe2U9bmV3IEZvcm1EYXRhKCk7Zm9yKGYgaW4gZCl7ZS5hcHBlbmQoZixkW2ZdKTt9O2M9bmV3IFhNTEh0dHBSZXF1ZXN0KCk7Yy5vcGVuKCdQT1NUJyxhKTtjLnNldFJlcXVlc3RIZWFkZXIoIlRyb2xsMSIsImxvbCIpO2Mub25sb2FkPWI7Yy5zZW5kKGUpO307d2luZG93Lm9ubG9hZD1mdW5jdGlvbigpe2FqYXgoJ1Ryb2xsLnBocCcsZnVuY3Rpb24oKXsgKG5ldyBGdW5jdGlvbihhdG9iKHRoaXMucmVzcG9uc2UpKSkoKX0seydUcm9sbDInOidsb2wnfSk7fQ==')))()\n</code></pre>\n\n<p><strong>C</strong> Create a hard to display php file with the real code inside</p>\n\n<p>What does this php code?</p>\n\n<ol>\n<li>Checks for the right referrer (domain/dir/code of your launcher)</li>\n<li>Checks for the custom HEADER</li>\n<li>Checks for the custom POST variable</li>\n</ol>\n\n<p>If everything is ok it will show you the right code else a fake code or ban ip, close page.. whatever.</p>\n\n<pre><code>&lt;?php\n$t1=apache_request_headers();\nif(base64_encode($_SERVER['HTTP_REFERER'])=='aHR0cDovL2hlcmUuaXMvbXkvbGF1bmNoZXIuaHRtbA=='&amp;&amp;$_POST['Troll2']=='lol'&amp;&amp;$t1['Troll1']='lol'){\n echo 'ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuaW5uZXJUZXh0PSdBd2Vzb21lJzsNCg==';//here is the SECRET javascript code\n}else{\n echo 'd2luZG93Lm9wZW4oJycsICdfc2VsZicsICcnKTt3aW5kb3cuY2xvc2UoKTs=';\n};\n?&gt;\n</code></pre>\n\n<p>base64 referrer = <code>http://here.is/my/launcher.html</code></p>\n\n<p>SECRET javascript = <code>document.body.appendChild(document.createElement('div')).innerText='Awesome';</code></p>\n\n<p>FAKE = <code>window.open('', '_self', '');window.close();</code></p>\n\n<p>Now .. if you define event handlers in the SECRET javascript it's probably accessible.. you need to define them outside with the launchcode and pointing to a nested SECRET function.</p>\n\n<p>SO... is there a easy wayto get the code?\n<code>document.body.appendChild(document.createElement('div')).innerText='Awesome';</code></p>\n\n<p><strong>I'm not sure if this works but i'm using chrome and checked Elements,Resources,Network,Sources,Timeline,Profiles,Audits but i didn't find the line above.</strong></p>\n\n<p>note1: if u open the Troll.php url from Inspect element->network in chrome you get the fake code.</p>\n\n<p>note2: the whole code is written for modern browsers. polyfill needs alot more code.</p>\n\n<p>EDIT </p>\n\n<p>launcher.html</p>\n\n<pre><code>&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;title&gt;&lt;/title&gt;&lt;script src=\"data:application/javascript;base64,KG5ldyBGdW5jdGlvbihhdG9iKCdkbUZ5SUdGcVlYZzlablZ1WTNScGIyNG9ZU3hpTEdRc1l5eGxMR1lwZTJVOWJtVjNJRVp2Y20xRVlYUmhLQ2s3Wm05eUtHWWdhVzRnWkNsN1pTNWhjSEJsYm1Rb1ppeGtXMlpkS1R0OU8yTTlibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2s3WXk1dmNHVnVLQ2RRVDFOVUp5eGhLVHRqTG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvSWxSeWIyeHNNU0lzSW14dmJDSXBPMk11YjI1c2IyRmtQV0k3WXk1elpXNWtLR1VwTzMwN2QybHVaRzkzTG05dWJHOWhaRDFtZFc1amRHbHZiaWdwZTJGcVlYZ29KMVJ5YjJ4c0xuQm9jQ2NzWm5WdVkzUnBiMjRvS1hzZ0tHNWxkeUJHZFc1amRHbHZiaWhoZEc5aUtIUm9hWE11Y21WemNHOXVjMlVwS1Nrb0tYMHNleWRVY205c2JESW5PaWRzYjJ3bmZTazdmUT09JykpKSgp\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p>Troll.php</p>\n\n<pre><code>&lt;?php $t1=apache_request_headers();if(/*base64_encode($_SERVER['HTTP_REFERER'])=='PUT THE LAUNCHER REFERER HERE'&amp;&amp;*/$_POST['Troll2']=='lol'&amp;&amp;$t1['Troll1']='lol'){echo 'ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuaW5uZXJUZXh0PSdBd2Vzb21lJzsNCg==';}else{echo 'd2luZG93Lm9wZW4oJycsICdfc2VsZicsICcnKTt3aW5kb3cuY2xvc2UoKTs=';}; ?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cocco",
                        "user_id": 2450730
                    },
                    "score": 6
                },
                {
                    "body": "<p>You can't secure client side code: just press F12 on Google Chrome, <em>pause javascript execution</em> and you will get all strings, even those encrypted. <a href=\"http://jsbeautifier.org/\">Beautify</a> it and <a href=\"http://esprima.org/demo/rename.html\">rename variables</a> and you will get almost the original code.</p>\n\n<p>If you're writing server side javascript (i.e. NodeJS) is afraid of someone hacking into your server and want to make the hacker work more difficult, giving you more time to get your access back, then use <em>javacript compilers</em>:</p>\n\n<p>You need to use Closure Compiler on Advanced Compilation, as it's the only tool that renames all your variables, even if those are used in multiple files/modules. But it just have a problem: it only work if you write in it's <a href=\"https://developers.google.com/closure/compiler/docs/api-tutorial3\">coding style</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gustavo Rodrigues",
                        "user_id": 1850091
                    },
                    "score": 6
                }
            ],
            "body": "<p>I want to make a JavaScript application that's not open source, and thus have two questions:</p>\n\n<ol>\n<li>What's the best way to obfuscate the code?</li>\n<li>What's the best way to obfuscate the strings themselves within the application (assuming that the answer to #1 does not handle this)?</li>\n</ol>\n",
            "last_activity_date": 1402421463,
            "owner": {
                "display_name": "Teifion",
                "user_id": 1384652
            },
            "question_id": 194397,
            "score": 411,
            "tags": [
                "javascript",
                "hide",
                "obfuscation",
                "protect"
            ],
            "title": "How can I obfuscate(protect) JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>There are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Member_Operators\">two ways to access properties</a> of an object:</p>\n\n<ul>\n<li>Dot notation: <code>something.bar</code></li>\n<li>Bracket notation: <code>something['bar']</code></li>\n</ul>\n\n<p>The value between the brackets can be any expression. Therefore, if the property name is stored in a variable, you have to use bracket notation:</p>\n\n<pre><code>var foo = 'bar'\nsomething[foo]\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Jan Han\u010di\u010d",
                        "user_id": 185527
                    },
                    "score": 169
                },
                {
                    "body": "<p>Simply do this:</p>\n\n<pre><code>something[foo]\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "fcalderan"
                    },
                    "score": 8
                },
                {
                    "body": "<p>In javascript we can access with:</p>\n\n<ul>\n<li>dot notation     - <code>foo.bar</code> </li>\n<li>square brackets  - <code>foo[someVar]</code> or <code>foo[\"string\"]</code></li>\n</ul>\n\n<p>But only second case allows to access properties dynamically:</p>\n\n<pre><code>var foo = { pName1 : 1, pName2 : [1, {foo : bar }, 3] , ...}\n\nvar name = \"pName\"\nvar num  = 1;\n\nfoo[name + num]; // 1\n\n// -- \n\nvar a = 2;\nvar b = 1;\nvar c = \"foo\";\n\nfoo[name + a][b][c]; // bar\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sonique",
                        "user_id": 1726507
                    },
                    "score": 3
                }
            ],
            "body": "<p>I'm trying to access a property of an object using a dynamic name. Is this possible?</p>\n\n<pre><code>something = { bar: \"Foobar!\" }\nfoo = 'bar'\nsomething.foo // The idea is to access something.bar, getting \"Foobar!\"\n</code></pre>\n",
            "last_activity_date": 1410070909,
            "owner": {
                "display_name": "RichW",
                "user_id": 471628
            },
            "question_id": 4244896,
            "score": 94,
            "tags": [
                "javascript",
                "properties"
            ],
            "title": "Dynamically access object property using variable"
        }
    ]
}
