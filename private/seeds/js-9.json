{
    "items": [
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You can use the Jquery UI for drag and drop with an additional library that translates mouse events into touch which is what you need, the library I recommend is <a href=\"https://github.com/furf/jquery-ui-touch-punch\">https://github.com/furf/jquery-ui-touch-punch</a>, with this your drag and drop from Jquery UI should work on touch devises </p>\n\n<p>or you can use this code which I am using, it also converts mouse events into touch and it works like magic. </p>\n\n<pre><code>function touchHandler(event) {\n    var touch = event.changedTouches[0];\n\n    var simulatedEvent = document.createEvent(\"MouseEvent\");\n        simulatedEvent.initMouseEvent({\n        touchstart: \"mousedown\",\n        touchmove: \"mousemove\",\n        touchend: \"mouseup\"\n    }[event.type], true, true, window, 1,\n        touch.screenX, touch.screenY,\n        touch.clientX, touch.clientY, false,\n        false, false, false, 0, null);\n\n    touch.target.dispatchEvent(simulatedEvent);\n    event.preventDefault();\n}\n\nfunction init() {\n    document.addEventListener(\"touchstart\", touchHandler, true);\n    document.addEventListener(\"touchmove\", touchHandler, true);\n    document.addEventListener(\"touchend\", touchHandler, true);\n    document.addEventListener(\"touchcancel\", touchHandler, true);\n}\n</code></pre>\n\n<p>And in your document.ready just call the init() function </p>\n\n<p>code found from <a href=\"http://ross.posterous.com/2008/08/19/iphone-touch-events-in-javascript/\">Here</a></p>\n",
                    "is_accepted": true,
                    "score": 189
                },
                {
                    "body": "<p>Thanks for the above codes! - I tried several options and this was the ticket. I had problems in that preventDefault was preventing scrolling on the ipad - I am now testing for draggable items and it works great so far.</p>\n\n<pre><code>if (event.target.id == 'draggable_item' ) {\n    event.preventDefault();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I had the same problem as gregpress, but my draggable items used a class instead of an id. It seems to work.</p>\n\n<pre><code>var $target = $(event.target);  \nif( $target.hasClass('draggable') ) {  \n    event.preventDefault();  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>For anyone looking to use this and keep the 'click' functionality (as John Landheer mentions in his comment), you can do it with just a couple of modifications:</p>\n\n<p>Add a couple of globals: </p>\n\n<pre><code>var clickms = 100;\nvar lastTouchDown = -1;\n</code></pre>\n\n<p>Then modify the switch statement from the original to this:</p>\n\n<pre><code>var d = new Date();\nswitch(event.type)\n{\n    case \"touchstart\": type = \"mousedown\"; lastTouchDown = d.getTime(); break;\n    case \"touchmove\": type=\"mousemove\"; lastTouchDown = -1; break;        \n    case \"touchend\": if(lastTouchDown &gt; -1 &amp;&amp; (d.getTime() - lastTouchDown) &lt; clickms){lastTouchDown = -1; type=\"click\"; break;} type=\"mouseup\"; break;\n    default: return;\n}\n</code></pre>\n\n<p>You may want to adjust 'clickms' to your tastes. Basically it's just watching for a 'touchstart' followed quickly by a 'touchend' to simulate a click. </p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Old thread I know.......</p>\n\n<p>Problem with the answer of @ryuutatsuo is that it blocks also any input or other element that has to react on 'clicks' (for example inputs), so i wrote this solution. This solution made it possible to use any existing drag and drop library that is based upon mousedown, mousemove and mouseup events on any touch device (or cumputer). This is also a cross-browser solution.</p>\n\n<p>I have tested in on several devices and it works fast (in combination with the drag and drop feature of ThreeDubMedia (see also <a href=\"http://threedubmedia.com/code/event/drag\">http://threedubmedia.com/code/event/drag</a>)). It is a jQuery solution so you can use it only with jQuery libs. I have used <strong>jQuery 1.5.1</strong> for it because some <strong>newer functions don't work properly with IE9 and above</strong> (not tested with newer versions of jQuery).</p>\n\n<p><strong>Before</strong> you add any <strong>drag or drop</strong> operation to an event <strong>you have to call this function first</strong>:</p>\n\n<pre><code>simulateTouchEvents(&lt;object&gt;);\n</code></pre>\n\n<p>You can also block all components/children for input or to speed up event handling by using the following syntax:</p>\n\n<pre><code>simulateTouchEvents(&lt;object&gt;, true); // ignore events on childs\n</code></pre>\n\n<p>Here is the code i wrote. I used some nice tricks to speed up evaluating things (see code).</p>\n\n<pre><code>function simulateTouchEvents(oo,bIgnoreChilds)\n{\n if( !$(oo)[0] )\n  { return false; }\n\n if( !window.__touchTypes )\n {\n   window.__touchTypes  = {touchstart:'mousedown',touchmove:'mousemove',touchend:'mouseup'};\n   window.__touchInputs = {INPUT:1,TEXTAREA:1,SELECT:1,OPTION:1,'input':1,'textarea':1,'select':1,'option':1};\n }\n\n$(oo).bind('touchstart touchmove touchend', function(ev)\n{\n    var bSame = (ev.target == this);\n    if( bIgnoreChilds &amp;&amp; !bSame )\n     { return; }\n\n    var b = (!bSame &amp;&amp; ev.target.__ajqmeclk), // Get if object is already tested or input type\n        e = ev.originalEvent;\n    if( b === true || !e.touches || e.touches.length &gt; 1 || !window.__touchTypes[e.type]  )\n     { return; } //allow multi-touch gestures to work\n\n    var oEv = ( !bSame &amp;&amp; typeof b != 'boolean')?$(ev.target).data('events'):false,\n        b = (!bSame)?(ev.target.__ajqmeclk = oEv?(oEv['click'] || oEv['mousedown'] || oEv['mouseup'] || oEv['mousemove']):false ):false;\n\n    if( b || window.__touchInputs[ev.target.tagName] )\n     { return; } //allow default clicks to work (and on inputs)\n\n    // https://developer.mozilla.org/en/DOM/event.initMouseEvent for API\n    var touch = e.changedTouches[0], newEvent = document.createEvent(\"MouseEvent\");\n    newEvent.initMouseEvent(window.__touchTypes[e.type], true, true, window, 1,\n            touch.screenX, touch.screenY,\n            touch.clientX, touch.clientY, false,\n            false, false, false, 0, null);\n\n    touch.target.dispatchEvent(newEvent);\n    e.preventDefault();\n    ev.stopImmediatePropagation();\n    ev.stopPropagation();\n    ev.preventDefault();\n});\n return true;\n}; \n</code></pre>\n\n<p>What it does:\nAt first, it translates single touch events into mouse events. It checks if an event is caused by an element on/in the element that must be dragged around. If it is an input element like input, textarea etc, it skips the translation, or if a standard mouse event is attached to it it will also skip a translation. </p>\n\n<p>Result:\nEvery element on a draggable element is still working.  </p>\n\n<p>Happy coding, greetz,\nErwin Haantjes</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I am looking for a drag &amp; DROP plugin that works on touch devices.</p>\n\n<p>I would like similar functionality to the <a href=\"http://jqueryui.com/demos/droppable/\">jQuery UI plugin</a> which allows \"droppable\" elements.</p>\n\n<p>The <a href=\"http://www.midemos.com/demos/iphone/touch/?/iphone/touch/\">jqtouch plugin</a> supports dragging, but no dropping.</p>\n\n<p><a href=\"http://www.gotproject.com/blog/post2.html\">Here</a> is drag &amp; drop that only supports iPhone/iPad.</p>\n\n<p>Can anyone point me in the direction of a drag &amp; drop plugin that works on android/ios? </p>\n\n<p>...Or it might be possible to update the jqtouch plugin for droppability, it already runs on Andriod and IOS.</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1404135234,
            "question_id": 5186441,
            "score": 79,
            "tags": [
                "javascript",
                "jquery",
                "jquery-ui",
                "touch"
            ],
            "title": "Javascript Drag and drop for touch devices"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>See: <a href=\"http://stackoverflow.com/questions/107546/#107662\">How would you implement auto-capitalization in JavaScript/HTML.</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var toMatch = \"john w. smith\";\nvar result = toMatch.replace(/(\\w)(\\w*)/g, function (_, i, r) {\n      return i.toUpperCase() + (r != null ? r : \"\");\n    }\n)\n</code></pre>\n\n<p>Seems to work...\nTested with the above, \"the quick-brown, fox? /jumps/ ^over^ the \u00a1lazy! dog...\" and \"C:/program files/some vendor/their 2nd application/a file1.txt\".</p>\n\n<p>If you want 2Nd instead of 2nd, you can change to <code>/([a-z])(\\w*)/g</code>.</p>\n\n<p>The first form can be simplified as:</p>\n\n<pre><code>function toTitleCase(toTransform) {\n  return toTransform.replace(/\\b([a-z])/g, function (_, initial) {\n      return initial.toUpperCase();\n  });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Try  this:</p>\n\n<pre><code>function toTitleCase(str)\n{\n    return str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 241
                },
                {
                    "body": "<p>I made this function which can handle last names (so it's not title case) such as \"McDonald\" or \"MacDonald\" or \"O'Toole\" or \"D'Orazio\". It doesn't however handle German or Dutch names with \"van\" or \"von\" which are often in lower-case... I believe \"de\" is often lower-case too such as \"Robert de Niro\". These would still have to be addressed.</p>\n\n<pre><code>function toProperCase(s)\n{\n  return s.toLowerCase().replace( /\\b((m)(a?c))?(\\w)/g,\n          function($1, $2, $3, $4, $5) { if($2){return $3.toUpperCase()+$4+$5.toUpperCase();} return $1.toUpperCase(); });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try to apply the <a href=\"http://www.w3.org/TR/CSS2/text.html#caps-prop\">text-transform</a> CSS style to your controls</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Just in case you are worried about those filler words, you can always just tell the function what not to capitalize.</p>\n\n<pre><code>/**\n * @param String str The text to be converted to titleCase.\n * @param Array glue the words to leave in lowercase. \n */\nvar titleCase = function(str, glue){\n    glue = (glue) ? glue : ['of', 'for', 'and'];\n    return str.replace(/(\\w)(\\w*)/g, function(_, i, r){\n        var j = i.toUpperCase() + (r != null ? r : \"\");\n        return (glue.indexOf(j.toLowerCase())&lt;0)?j:j.toLowerCase();\n    });\n};\n</code></pre>\n\n<p>Hope this helps you out.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>A slightly more elegant way, adapting Greg Dean's function:</p>\n\n<pre><code>String.prototype.toProperCase = function () {\n    return this.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n};\n</code></pre>\n\n<p>Call it like:</p>\n\n<pre><code>\"pascal\".toProperCase();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>Here\u2019s my function that converts to title case but also preserves defined acronyms as uppercase and minor words as lowercase:</p>\n\n<pre><code>String.prototype.toTitleCase = function() {\n  var i, j, str, lowers, uppers;\n  str = this.replace(/([^\\W_]+[^\\s-]*) */g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n\n  // Certain minor words should be left lowercase unless \n  // they are the first or last words in the string\n  lowers = ['A', 'An', 'The', 'And', 'But', 'Or', 'For', 'Nor', 'As', 'At', \n  'By', 'For', 'From', 'In', 'Into', 'Near', 'Of', 'On', 'Onto', 'To', 'With'];\n  for (i = 0, j = lowers.length; i &lt; j; i++)\n    str = str.replace(new RegExp('\\\\s' + lowers[i] + '\\\\s', 'g'), \n      function(txt) {\n        return txt.toLowerCase();\n      });\n\n  // Certain words such as initialisms or acronyms should be left uppercase\n  uppers = ['Id', 'Tv'];\n  for (i = 0, j = uppers.length; i &lt; j; i++)\n     str = str.replace(new RegExp('\\\\b' + uppers[i] + '\\\\b', 'g'), \n       uppers[i].toUpperCase());\n\n  return str;\n}\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>\"TO LOGIN TO THIS SITE and watch tv, please enter a valid id:\".toTitleCase();\n// Returns: \"To Login to This Site and Watch TV, Please Enter a Valid ID:\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>Without using regex just for reference:</p>\n\n<pre><code>String.prototype.toProperCase = function() {\n  var words = this.split(' ');\n  var results = [];\n  for (var i=0; i &lt; words.length; i++) {\n      var letter = words[i].charAt(0).toUpperCase();\n      results.push(letter + words[i].slice(1));\n  }\n  return results.join(' ');\n};\n\n'john smith'.toProperCase();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>String.prototype.toProperCase = function(){\n    return this.toLowerCase().replace(/(^[a-z]| [a-z]|-[a-z])/g, \n        function($1){\n            return $1.toUpperCase();\n        }\n    );\n};\n</code></pre>\n\n<p>Example</p>\n\n<pre><code>var str = 'john smith';\nstr.toProperCase();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As full featured as John Resig's solution, but as a one-liner: (based on <a href=\"https://github.com/gouch/to-title-case\" rel=\"nofollow\">this github project</a>)</p>\n\n<pre><code>function toTitleCase(e){var t=/^(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|vs?\\.?|via)$/i;return e.replace(/([^\\W_]+[^\\s-]*) */g,function(e,n,r,i){return r&gt;0&amp;&amp;r+n.length!==i.length&amp;&amp;n.search(t)&gt;-1&amp;&amp;i.charAt(r-2)!==\":\"&amp;&amp;i.charAt(r-1).search(/[^\\s-]/)&lt;0?e.toLowerCase():n.substr(1).search(/[A-Z]|\\../)&gt;-1?e:e.charAt(0).toUpperCase()+e.substr(1)})};\n\nconsole.log( toTitleCase( \"ignores mixed case words like iTunes, and allows AT&amp;A and website.com/address etc...\" ) );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>String.prototype.toProperCase = function() {\n    var aStr = this.split(' ');\n    var aProp = [];\n    for (str in aStr) {\n        aProp.push(aStr[str].charAt(0).toUpperCase() + aStr[str].slice(1));\n    }\n    return aProp.join(' ');\n};\n</code></pre>\n\n<p>My 2 cents.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Speaking of cents :D</p>\n\n<pre><code>'string'.replace(/^(.){1}/,'$1'.toUpperCase()) // String\n</code></pre>\n\n<p>Yeah this works only for one word strings but it's just what I needed</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Here's my version, I think it's easy to understand and elegant too.</p>\n\n<pre><code>var str = \"foo bar baz\";\nstr.split(\" \").map(function(i){return i[0].toUpperCase() + i.substring(1)}).join(\" \");\n//return \"Foo Bar Baz\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Most of these answers seem to ignore the possibility of using the word boundary metacharacter (\\b). A shorter version of Greg Dean's answer utilizing it:</p>\n\n<pre><code>function toTitleCase(str)\n{\n    return str.replace(/\\b\\w/g, function (txt) { return txt.toUpperCase(); });\n}\n</code></pre>\n\n<p>Works for hyphenated names like Jim-Bob too.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Taking the \"lewax00\" solution I created this simple solution that force to \"w\" starting with space or \"w\" that initiate de word, but is not able   to remove the extra intermediate spaces.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>\"SOF\u00cdA vergara\".toLowerCase().replace(/\\b(\\s\\w|^\\w)/g, function (txt) { return txt.toUpperCase(); });</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The result is \"Sof\u00eda Vergara\".</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a simple way to convert a string to title case? E.g. <code>john smith</code> becomes <code>John Smith</code>. I'm not looking for something complicated like <a href=\"http://ejohn.org/blog/title-capitalization-in-javascript/\">John Resig's solution</a>, just (hopefully) some kind of one- or two-liner.</p>\n",
            "last_activity_date": 1412103136,
            "question_id": 196972,
            "score": 159,
            "tags": [
                "javascript"
            ],
            "title": "Convert string to title case with javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Internally <code>Object.create</code> does this:</p>\n\n<pre><code>Object.create = function (o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n};\n</code></pre>\n\n<p>The syntax just takes away the illusion that JavaScript uses Classical Inheritance.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>The object used in Object.create actually forms the prototype of the new object, where as in the new Function() form the declared properties/functions do not form the prototype.</p>\n</blockquote>\n\n<p>Yes, <code>Object.create</code> builds an object that inherits directly from the one passed as its first argument.</p>\n\n<p>With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:</p>\n\n<pre><code>var o = new SomeConstructor();\n</code></pre>\n\n<p>In the above example, <code>o</code> inherits directly from <code>SomeConstructor.prototype</code>.</p>\n\n<p>There's a difference here, with <code>Object.create</code> you can create an object that doesn't inherit from anything, <code>Object.create(null);</code>, on the other hand, if you set <code>SomeConstructor.prototype = null;</code> the newly created object will inherit from <code>Object.prototype</code>.</p>\n\n<blockquote>\n  <p>You cannot create closures with the Object.create syntax as you would with the functional syntax. This is logical given the lexical (vs block) type scope of JavaScript.</p>\n</blockquote>\n\n<p>Well, you can create closures, e.g. using property descriptors argument:</p>\n\n<pre><code>var o = Object.create({inherited: 1}, {\n  foo: {\n    get: (function () { // a closure\n      var closured = 'foo';\n      return function () {\n        return closured+'bar';\n      };\n    })()\n  }\n});\n\no.foo; // \"foobar\"\n</code></pre>\n\n<p>Note that I'm talking about the ECMAScript 5th Edition <a href=\"http://sideshowbarker.github.com/es5-spec/#x15.2.3.5\"><code>Object.create</code></a> method, not the Crockford's shim.</p>\n\n<p>The method is starting to be natively implemented on latest browsers, check this <a href=\"http://kangax.github.com/es5-compat-table/\">compatibility table</a>.</p>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p><code>new Test()</code>:</p>\n\n<ol>\n<li>create <code>new Object()</code> obj</li>\n<li>set <code>obj.__proto__</code> to <code>Test.prototype</code></li>\n<li><code>return Test.call(obj) || obj;\n// normally obj is returned but constructors in JS can return a value</code></li>\n</ol>\n\n<p><code>Object.create( Test.prototype )</code></p>\n\n<ol>\n<li>create <code>new Object()</code> obj</li>\n<li>set <code>obj.__proto__</code> to <code>Test.prototype</code></li>\n<li><code>return obj;</code></li>\n</ol>\n\n<p>So basically <code>Object.create</code> doesn't execute the constructor.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The difference is the so-called \"pseudoclassical vs. prototypal inheritance\". The suggestion is to use only one type in your code, not mixing the two.</p>\n\n<p>In pseudoclassical inheritance (with \"new\" operator), imagine that you first define a pseudo-class, and then create objects from that class. For example, define a pseudo-class \"Person\", and then create \"Alice\" and \"Bob\" from \"Person\".</p>\n\n<p>In prototypal inheritance (using Object.create), you directly create a specific person \"Alice\", and then create another person \"Bob\" using \"Alice\" as a prototype. There is no \"class\" here; all are objects.</p>\n\n<p>Internally, JavaScript uses \"prototypal inheritance\"; the \"pseudoclassical\" way is just some sugar.</p>\n\n<p>See <a href=\"http://www.theoryapp.com/javascript-inheritance-pseudoclassical-vs-prototypal/\" rel=\"nofollow\">this link</a> for a comparison of the two ways.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Very simply said, <code>new X</code> is <code>Object.create(X.prototype)</code> with additionally running the <code>constructor</code> function. (And giving the <code>constructor</code> the chance to <code>return</code> the actual object that should be the result of the expression instead of <code>this</code>.)</p>\n\n<p>That\u2019s it. :)</p>\n\n<p>The rest of the answers is just confusing, because apparently nobody else read the definition of <code>new</code> either. ;)</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>just joined... this site is so informative and most importantly a reliable source for getting knowledge... thianks for all the help ..</p>\n\n<p>couldn't comment because need 50pts for that .. hopefully this is good enough to be an answer</p>\n\n<pre><code>function Test(){\n    this.prop1 = 'prop1';\n    this.prop2 = 'prop2';\n    this.func1 = function(){\n        return this.prop1 + this.prop2;\n    }\n};\n\nTest.prototype.protoProp1 = 'protoProp1';\nTest.prototype.protoProp2 = 'protoProp2';\nvar newKeywordTest = new Test();\nvar objectCreateTest = Object.create(Test.prototype);\n\n/* Object.create   */\nconsole.log(objectCreateTest.prop1); // undefined\nconsole.log(objectCreateTest.protoProp1); // protoProp1 \nconsole.log(objectCreateTest.__proto__.protoProp1); // protoProp1\n\n/* new    */\nconsole.log(newKeywordTest.prop1); // prop1\nconsole.log(newKeywordTest.__proto__.protoProp1); // protoProp1\n</code></pre>\n\n<p>Summary:</p>\n\n<p>1) with new keyword .. you get two things \n    a) function is used as a constructor b) function.protype object is passed to the <strong>proto</strong> property ... or where <strong>proto</strong> not supported its the second place where the new object looks to find properties</p>\n\n<p>2) with Object.create(obj.prototype) ...you are constructing an object (obj.prototype) and passing it to the intended object ..with the difference that now new oject's <strong>proto</strong> is also pointing to obj.prototype (please ref ans by xj9 for that)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This:</p>\n\n<pre><code>var foo = new Foo();\n</code></pre>\n\n<p>and</p>\n\n<pre><code>var foo = Object.create(Foo.prototype);\n</code></pre>\n\n<p>are quite similar.  One important difference is that <code>new Foo</code> actually runs constructor code, whereas <code>Object.create</code> will not execute code such as</p>\n\n<pre><code>function Foo() {\n    alert(\"This constructor does not run with Object.create\");\n}\n</code></pre>\n\n<p>Note that if you use the two-parameter version of <code>Object.create()</code> then you can do much more powerful things.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Let me try to explain (more on <a href=\"https://nodeway.wordpress.com/2015/02/16/javascript-prototype/\" rel=\"nofollow\">Blog</a>) :</p>\n\n<ol>\n<li>When you write <code>Car</code> constructor <code>var Car = function(){}</code>,This is how internally things are:\n<img src=\"http://i.stack.imgur.com/ayunh.png\" alt=\"enter image description here\">\nWe have one <code>{prototype}</code> hidden link <code>Function.prototype</code> which is not accessible and one <code>prototype</code> link <code>Car.prototype</code> which is accessible and have actual <code>constructor</code> of <code>Car</code>.Both Function.prototype and Car.prototype have hidden link to <code>Object.prototype</code>.</li>\n<li><p>When we want to create two equivalent objects by using <code>new</code> operator and <code>create</code> method than we have to do like this <code>Honda = new Car();</code> and <code>Maruti = Object.create(Car.prototype)</code>.<img src=\"http://i.stack.imgur.com/i1Vre.png\" alt=\"enter image description here\">\nWhat is happening ?</p>\n\n<p><strong><code>Honda = new Car();</code></strong> - When you create object like this then hidden <code>{prototype}</code> property is pointed to <code>Car.prototype</code>.So here, <code>{prototype}</code> of Honda object will always be <code>Car.prototype</code>,we don't have any option to change the <code>{prototype}</code> property of object.What if I want to change prototype of our newly created object ?<br>\n<strong><code>Maruti = Object.create(Car.prototype)</code></strong> - When you create object like this than you have a extra option to choose your object <code>{prototype}</code> property.If you want Car.prototype as {prototype} than pass it as parameter in function. If you don't want any <code>{prototype}</code> for your object than you can pass <code>null</code> like this <code>Maruti = Object.create(null)</code>.</p></li>\n</ol>\n\n<p><em>Conclusion - By using <code>Object.create</code> method you have freedom to choose your object <code>{prototype}</code> property.In <code>new Car();</code> , you don't have that freedom.</em></p>\n\n<p><strong>Preferred way in OO JavaScript :</strong> </p>\n\n<p>Suppose we have two objects <code>a</code> and <code>b</code>.</p>\n\n<pre><code>var a = new Object();\nvar b = new Object();\n</code></pre>\n\n<p>Now <code>a</code> have some methods which <code>b</code> also want to access.for that we required object inheritance(<code>a</code> should be the prototype of <code>b</code> only than we can access those methods).If we check prototype of <code>a</code> and <code>b</code> than we will find out that they are prototype of <code>Object.prototype</code>. </p>\n\n<pre><code>Object.prototype.isPrototypeOf(b); //true\na.isPrototypeOf(b); //false (here problem comes in picture).\n</code></pre>\n\n<p><em>Problem -</em> we want object <code>a</code> as a prototype of <code>b</code>.but here we created Object <code>b</code> whose prototype is <code>Object.prototype</code>.\n<em>Solution -</em> ECMAScript 5 introduce <code>Object.create()</code>, to achieve such kind of inheritance easily.If we create Object b like this :</p>\n\n<pre><code>var b = Object.create(a);\n</code></pre>\n\n<p>than,</p>\n\n<pre><code>a.isPrototypeOf(b);// true (problem solved, you included Object a in prototype chain of Object b.)\n</code></pre>\n\n<p>So if you are doing object oriented scripting than <code>Object.create()</code> is very useful for inheritance.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I recently stumbled upon the Object.create() method in JavaScript, and am trying to deduce how it is different from creating a new instance of an object with 'new SomeFunction()', and when you would want to use one over the other.</p>\n\n<p>Consider the following example:</p>\n\n<pre><code>var test = {val: 1, func: function(){ return this.val; }};\nvar testA = Object.create(test);\n\ntestA.val = 2;\nconsole.log(test.func()); // 1\nconsole.log(testA.func()); // 2\n\nconsole.log('other test');\nvar otherTest = function(){\n    this.val = 1;\n    this.func = function(){\n        return this.val;\n    };\n};\n\nvar otherTestA = new otherTest();\nvar otherTestB = new otherTest();\notherTestB .val = 2;\nconsole.log(otherTestA.val); // 1 \nconsole.log(otherTestB.val); // 2\n\nconsole.log(otherTestA.func()); // 1\nconsole.log(otherTestB.func()); // 2\n</code></pre>\n\n<p>Notice that the same behavior is observed in both cases.  It seems to me that the primary differences between these two scenarios are:</p>\n\n<ul>\n<li>The object used in Object.create actually forms the prototype of the new object, where as in the new Function() form the declared properties/functions do not form the prototype.  </li>\n<li>You cannot create closures with the Object.create syntax as you would with the functional syntax.  This is logical given the lexical (vs block) type scope of JavaScript.</li>\n</ul>\n\n<p>Are the above statements correct? And am I missing something?  When would you use one over the other?  </p>\n\n<p>EDIT: link to jsfiddle version of above code sample: <a href=\"http://jsfiddle.net/rZfYL/\">http://jsfiddle.net/rZfYL/</a></p>\n",
            "last_activity_date": 1424120353,
            "question_id": 4166616,
            "score": 101,
            "tags": [
                "javascript",
                "prototype",
                "object-create"
            ],
            "title": "Understanding the difference between Object.create() and new SomeFunction() in JavaScript"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>like this?</p>\n\n<pre><code>serialize = function(obj) {\n  var str = [];\n  for(var p in obj)\n    if (obj.hasOwnProperty(p)) {\n      str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n    }\n  return str.join(\"&amp;\");\n}\n\nconsole.log(serialize({foo: \"hi there\", bar: \"100%\" }));\n// foo=hi%20there&amp;bar=100%25\n</code></pre>\n\n<p>Edit: this one also converts recursive objects (using php \"array\" notation for the query string)</p>\n\n<pre><code>serialize = function(obj, prefix) {\n  var str = [];\n  for(var p in obj) {\n    if (obj.hasOwnProperty(p)) {\n      var k = prefix ? prefix + \"[\" + p + \"]\" : p, v = obj[p];\n      str.push(typeof v == \"object\" ?\n        serialize(v, k) :\n        encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\n    }\n  }\n  return str.join(\"&amp;\");\n}\n\nconsole.log(serialize({foo: \"hi there\", bar: { blah: 123, quux: [1, 2, 3] }}));\n// foo=hi%20there&amp;bar%5Bblah%5D=123&amp;bar%5Bquux%5D%5B0%5D=1&amp;bar%5Bquux%5D%5B1%5D=2&amp;bar%5Bquux%5D%5B2%5D=3\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 250
                },
                {
                    "body": "<p>Do you need to send arbitrary objects? If so, GET is a bad idea since there are limits to the lengths of URLs that user agents and web servers will accepts. My suggestion would be to build up an array of name-value pairs to send and then build up a query string:</p>\n\n<pre><code>function QueryStringBuilder() {\n    var nameValues = [];\n\n    this.add = function(name, value) {\n        nameValues.push( {name: name, value: value} );\n    };\n\n    this.toQueryString = function() {\n        var segments = [], nameValue;\n        for (var i = 0, len = nameValues.length; i &lt; len; i++) {\n            nameValue = nameValues[i];\n            segments[i] = encodeURIComponent(nameValue.name) + \"=\" + encodeURIComponent(nameValue.value);\n        }\n        return segments.join(\"&amp;\");\n    };\n}\n\nvar qsb = new QueryStringBuilder();\nqsb.add(\"veg\", \"cabbage\");\nqsb.add(\"vegCount\", \"5\");\n\nalert( qsb.toQueryString() );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>use JSON.</p>\n\n<p>take a look at <a href=\"http://stackoverflow.com/questions/459105/convert-a-multidimensional-javascript-array-to-json\">this question</a> for ideas on how to implement.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>jQuery has a function for this, if you're already using it u can use that:\n<a href=\"http://api.jquery.com/jquery.param/\">http://api.jquery.com/jquery.param/</a></p>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>If you want to convert a nested object recursively and the object may or may not contain arrays (and the arrays may contain objects or arrays, etc), then the solution gets a little more complex. This is my attempt.</p>\n\n<p>I've also added some options to choose if you want to record for each object member at what depth in the main object it sits, and to choose if you want to add a label to the members that come from converted arrays.</p>\n\n<p>Ideally you should test if the thing parameter really receives an object or array.</p>\n\n<pre><code>function thingToString(thing,maxDepth,recordLevel,markArrays){\n    //thing: object or array to be recursively serialized\n    //maxDepth (int or false):\n    // (int) how deep to go with converting objects/arrays within objs/arrays\n    // (false) no limit to recursive objects/arrays within objects/arrays\n    //recordLevel (boolean):\n    //  true - insert \"(level 1)\" before transcript of members at level one (etc)\n    //  false - just \n    //markArrays (boolean):\n    //  insert text to indicate any members that came from arrays\n    var result = \"\";\n    if (maxDepth !== false &amp;&amp; typeof maxDepth != 'number') {maxDepth = 3;}\n    var runningDepth = 0;//Keeps track how deep we're into recursion\n\n    //First prepare the function, so that it can call itself recursively\n    function serializeAnything(thing){\n        //Set path-finder values\n        runningDepth += 1;\n        if(recordLevel){result += \"(level \" + runningDepth + \")\";}\n\n        //First convert any arrays to object so they can be processed\n        if (thing instanceof Array){\n            var realObj = {};var key;\n            if (markArrays) {realObj['type'] = \"converted array\";}\n            for (var i = 0;i &lt; thing.length;i++){\n                if (markArrays) {key = \"a\" + i;} else {key = i;}\n                realObj[key] = thing[i];\n            }\n            thing = realObj;\n            console.log('converted one array to ' + typeof realObj);\n            console.log(thing);\n        }\n\n        //Then deal with it\n        for (var member in thing){\n            if (typeof thing[member] == 'object' &amp;&amp; runningDepth &lt; maxDepth){\n                serializeAnything(thing[member]);\n                //When a sub-object/array is serialized, it will add one to\n                //running depth. But when we continue to this object/array's\n                //next sibling, the level must go back up by one\n                runningDepth -= 1;\n            } else if (maxDepth !== false &amp;&amp; runningDepth &gt;= maxDepth) {\n                console.log('Reached bottom');\n            } else \n            if (\n                typeof thing[member] == \"string\" || \n                typeof thing[member] == 'boolean' ||\n                typeof thing[member] == 'number'\n            ){\n                result += \"(\" + member + \": \" + thing[member] + \") \";\n            }  else {\n                result += \"(\" + member + \": [\" + typeof thing[member] + \" not supported]) \";\n            }\n        }\n    }\n    //Actually kick off the serialization\n    serializeAnything(thing);\n\n    return result;\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's the coffeescript version of accepted answer. This might save time to someone.</p>\n\n<pre><code>serialize = (obj, prefix) -&gt;\n  str = []\n  for p, v of obj\n    k = if prefix then prefix + \"[\" + p + \"]\" else p\n    if typeof v == \"object\"\n      str.push(serialize(v, k))\n    else\n      str.push(encodeURIComponent(k) + \"=\" + encodeURIComponent(v))\n\n  str.join(\"&amp;\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Just another way (no recursive object):</p>\n\n<pre><code>   getQueryString = function(obj)\n   {\n      result = \"\";\n\n      for(param in obj)\n         result += ( encodeURIComponent(param) + '=' + encodeURIComponent(obj[param]) + '&amp;' );\n\n      if(result) //it's not empty string when at least one key/value pair was added. In such case we need to remove the last '&amp;' char\n         result = result.substr(0, result.length - 1); //If length is zero or negative, substr returns an empty string [ref. http://msdn.microsoft.com/en-us/library/0esxc5wy(v=VS.85).aspx]\n\n      return result;\n   }\n\nalert( getQueryString({foo: \"hi there\", bar: 123, quux: 2 }) );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>A small amendment to the accepted solution by user187291:</p>\n\n<pre><code>serialize = function(obj) {\n   var str = [];\n   for(var p in obj){\n       if (obj.hasOwnProperty(p)) {\n           str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n       }\n   }\n   return str.join(\"&amp;\");\n}\n</code></pre>\n\n<p>Checking for hasOwnProperty on the object makes JSLint/JSHint happy, and it prevents accidentally serializing methods of the object or other stuff if the object is anything but a simple dictionary. See the paragraph on for statements in this page: <a href=\"http://javascript.crockford.com/code.html\">http://javascript.crockford.com/code.html</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>ok, it's a older post but i'm facing this problem and i have found my personal solution.. maybe can help someone else..</p>\n\n<pre><code>     function objToQueryString(obj){\n        var k = Object.keys(obj);\n        var s = \"\";\n        for(var i=0;i&lt;k.length;i++) {\n            s += k[i] + \"=\" + encodeURIComponent(obj[k[i]]);\n            if (i != k.length -1) s += \"&amp;\";\n        }\n        return s;\n     };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>Object.keys(obj).reduce(function(a,k){a.push(k+'='+encodeURIComponent(obj[k]));return a},[]).join('&amp;')\n</code></pre>\n\n<p>Edit: I like this one-liner, but I bet it would be a more popular answer if it matched the accepted answer semantically:</p>\n\n<pre><code>function serialize( obj ) {\n  return '?'+Object.keys(obj).reduce(function(a,k){a.push(k+'='+encodeURIComponent(obj[k]));return a},[]).join('&amp;')\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>Do you know a fast and simple way to encode a javascript object into a string that I can pass via GET?</p>\n\n<p>No jQuery, no other frameworks, just plain Javascript :)</p>\n",
            "last_activity_date": 1412286535,
            "question_id": 1714786,
            "score": 112,
            "tags": [
                "javascript",
                "query-string",
                "urlencode"
            ],
            "title": "querystring encoding of a javascript object"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>param values are easy, they are contained in an array called</p>\n\n<p>arguments</p>\n\n<p>you cant get their names as far as i know. why do you need that?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't know how to get a list of the parameters but you can do this to get how many it expects.</p>\n\n<pre><code>alert(doSomething.length);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've tried doing this before, but never found a praticial way to get it done. I ended up passing in an object instead and then looping through it.</p>\n\n<pre><code>//define like\nfunction test(args) {\n    for(var item in args) {\n        alert(item);\n        alert(args[item]);\n    }\n}\n\n//then used like\ntest({\n    name:\"Joe\",\n    age:40,\n    admin:bool\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I don't know if this solution suits your problem, but it lets you redefine whatever function you want, without having to change code that uses it. Existing calls will use positioned params, while the function implementation may use \"named params\" (a single hash param).</p>\n\n<p>I thought that you will anyway modify existing function definitions so, why not having a factory function that makes just what you want:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;script type=\"text/javascript\"&gt;\nvar withNamedParams = function(params, lambda) {\n    return function() {\n        var named = {};\n        var max   = arguments.length;\n\n        for (var i=0; i&lt;max; i++) {\n            named[params[i]] = arguments[i];\n        }\n\n        return lambda(named);\n    };\n};\n\nvar foo = withNamedParams([\"a\", \"b\", \"c\"], function(params) {\n    for (var param in params) {\n        alert(param + \": \" + params[param]);\n    }\n});\n\nfoo(1, 2, 3);\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can access the argument values passed to a function using the \"arguments\" property.</p>\n\n<pre><code>    function doSomething()\n    {\n    \tvar args = doSomething.arguments;\n    \tvar numArgs = args.length;\n    \tfor(var i = 0 ; i &lt; numArgs ; i++)\n    \t{\n    \t\tconsole.log(\"arg \" + (i+1) + \" = \" + args[i]);\t\n                    //console.log works with firefox + firebug\n                    // you can use an alert to check in other browsers\n    \t}\n    }\n\n    doSomething(1, '2', {A:2}, [1,2,3]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's one way:</p>\n\n<pre><code>// Utility function to extract arg name-value pairs\nfunction getArgs(args) {\n    var argsObj = {};\n\n    var argList = /\\(([^)]*)/.exec(args.callee)[1];\n    var argCnt = 0;\n    var tokens;\n\n    while (tokens = /\\s*([^,]+)/g.exec(argList)) {\n        argsObj[tokens[1]] = args[argCnt++];\n    }\n\n    return argsObj;\n}\n\n// Test subject\nfunction add(number1, number2) {\n    var args = getArgs(arguments);\n    alert(args.toSource()); // ({number1:3,number2:4})\n}\n\n// Invoke test subject\nadd(3, 4);\n</code></pre>\n\n<p>Note: This only works on browsers that support <code>arguments.callee</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following function will return an array of the parameter names of any function passed in.</p>\n\n<pre><code>var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\nfunction getParamNames(func) {\n  var fnStr = func.toString().replace(STRIP_COMMENTS, '');\n  var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n  if(result === null)\n     result = [];\n  return result;\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>getParamNames(getParamNames) // returns ['func']\ngetParamNames(function (a,b,c,d){}) // returns ['a','b','c','d']\ngetParamNames(function (a,/*b,c,*/d){}) // returns ['a','d']\ngetParamNames(function (){}) // returns []\n</code></pre>\n\n<p><strong>Edit</strong>:\nI also note vikasde wants the parameter values in an array also.  This is already provided in a local variable named arguments.  </p>\n\n<p>excerpt from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments</a>:</p>\n\n<p>The arguments object is not an Array. It is similar to an Array, but does not have any Array properties except length. For example, it does not have the pop method. However it can be converted to a real Array:</p>\n\n<pre><code>var args = Array.prototype.slice.call(arguments);\n</code></pre>\n\n<p>If Array generics are available, one can use the following instead:</p>\n\n<pre><code>var args = Array.slice(arguments);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 155
                },
                {
                    "body": "<p>By using the arguments array in JS:</p>\n\n<pre><code>function doSomething(){\n\n    for (var i = 0, j = arguments.length; i &lt; j; i++){\n        alert(arguments[i]);\n    }\n\n}\n\ndoSomething('a','b','c')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How I typically do it:</p>\n\n<pre><code>function name(arg1, arg2){\n    var args = arguments; // array: [arg1, arg2]\n    var objecArgOne = args[0].one;\n}\nname({one: \"1\", two: \"2\"}, \"string\");\n</code></pre>\n\n<p>You can even ref the args by the functions name like: </p>\n\n<pre><code>name.arguments;\n</code></pre>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Below is the code taken from AngularJS which uses the technique for its dependency injection mechanism.</p>\n\n<p>And here is an explanation of it taken from <a href=\"http://docs.angularjs.org/tutorial/step_05\">http://docs.angularjs.org/tutorial/step_05</a></p>\n\n<blockquote>\n  <p>Angular's dependency injector provides services to your controller\n  when the controller is being constructed. The dependency injector also\n  takes care of creating any transitive dependencies the service may\n  have (services often depend upon other services).</p>\n  \n  <p>Note that the names of arguments are significant, because the injector\n  uses these to look up the dependencies.</p>\n</blockquote>\n\n<pre><code>/**\n * @ngdoc overview\n * @name AUTO\n * @description\n *\n * Implicit module which gets automatically added to each {@link AUTO.$injector $injector}.\n */\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /^\\s*(_?)(.+?)\\1\\s*$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nfunction annotate(fn) {\n  var $inject,\n      fnText,\n      argDecl,\n      last;\n\n  if (typeof fn == 'function') {\n    if (!($inject = fn.$inject)) {\n      $inject = [];\n      fnText = fn.toString().replace(STRIP_COMMENTS, '');\n      argDecl = fnText.match(FN_ARGS);\n      forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){\n        arg.replace(FN_ARG, function(all, underscore, name){\n          $inject.push(name);\n        });\n      });\n      fn.$inject = $inject;\n    }\n  } else if (isArray(fn)) {\n    last = fn.length - 1;\n    assertArgFn(fn[last], 'fn')\n    $inject = fn.slice(0, last);\n  } else {\n    assertArgFn(fn, 'fn', true);\n  }\n  return $inject;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<pre><code>//See this:\n\n\n// global var, naming bB\nvar bB = 5;\n\n//  Dependency Injection cokntroller\nvar a = function(str, fn) {\n  //stringify function body\n  var fnStr = fn.toString();\n\n  // Key: get form args to string\n  var args = fnStr.match(/function\\s*\\((.*?)\\)/);\n  // \n  console.log(args);\n  // if the form arg is 'bB', then exec it, otherwise, do nothing\n  for (var i = 0; i &lt; args.length; i++) {\n    if(args[i] == 'bB') {\n      fn(bB);\n    }\n  }\n}\n// will do nothing\na('sdfdfdfs,', function(some){\nalert(some)\n});\n// will alert 5\n\na('sdfdsdsfdfsdfdsf,', function(bB){\nalert(bB)\n});\n\n// see, this shows you how to get function args in string\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It's pretty easy.</p>\n\n<p>At the first there is a deprecated <code>arguments.callee</code> \u2014 a reference to called function.\nAt the second if you have a reference to your function you can easily get their textual representation.\nAt the third if you calling your function as constructor you can also have a link via yourObject.constructor.\nNB: The first solution deprecated so if you can't to not use it you must also think about your app architecture.\nIf you don't need exact variable names just use inside a function internal variable <code>arguments</code> without any magic.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/callee\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/callee</a></p>\n\n<p>All of them going to call toString and replace with re so we can create a helper:</p>\n\n<pre><code>// getting names of declared parameters\nvar getFunctionParams = function (func) {\n    return String(func).replace(/[^\\(]+\\(([^\\)]*)\\).*/m, '$1');\n}\n</code></pre>\n\n<p>Some examples:</p>\n\n<pre><code>// Solution 1. deprecated! don't use it!\nvar myPrivateFunction = function SomeFuncName (foo, bar, buz) {\n    console.log(getFunctionParams(arguments.callee));\n};\nmyPrivateFunction (1, 2);\n\n// Solution 2.\nvar myFunction = function someFunc (foo, bar, buz) {\n    // some code\n};\nvar params = getFunctionParams(myFunction);\nconsole.log(params);\n\n// Solution 3.\nvar cls = function SuperKewlClass (foo, bar, buz) {\n    // some code\n};\nvar inst = new cls();\nvar params = getFunctionParams(inst.constructor);\nconsole.log(params);\n</code></pre>\n\n<p>Enjoy with JS!</p>\n\n<p>UPD: Jack Allan was provided a little bit better solution actually. GJ Jack!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Solution that is more error prone to spaces and comments would be:</p>\n\n<pre><code>var fn = function(/* whoa) */ hi, you){};\n\nfn.toString()\n  .replace(/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/)|(\\s))/mg,'')\n  .match(/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m)[1]\n  .split(/,/)\n\n[\"hi\", \"you\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>(function(a,b,c){}).toString().replace(/.*\\(|\\).*/ig,\"\").split(',')\n</code></pre>\n\n<p>=> [ \"a\", \"b\", \"c\" ]</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>function getArgs(args) {\n    var argsObj = {};</p>\n\n<pre><code>var argList = /\\(([^)]*)/.exec(args.callee)[1];\nvar argCnt = 0;\nvar tokens;\n\nwhile (tokens = /\\s*([^,]+)/g.exec(argList)) {\n    argsObj[tokens[1]] = args[argCnt++];\n}\n\nreturn argsObj;\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can also use \"esprima\" parser to avoid many issues with comments, whitespace and other things inside parameters list.</p>\n\n<pre><code>function getParameters(yourFunction) {\n    var i,\n        // safetyValve is necessary, because sole \"function () {...}\"\n        // is not a valid syntax\n        parsed = esprima.parse(\"safetyValve = \" + yourFunction.toString()),\n        params = parsed.body[0].expression.right.params,\n        ret = [];\n\n    for (i = 0; i &lt; params.length; i += 1) {\n        ret.push(params[i].name);\n    }\n\n    return ret;\n}\n</code></pre>\n\n<p>It works even with code like this:</p>\n\n<pre><code>getParameters(function (hello /*, foo ),* /bar* { */,world) {}); // [\"hello\", \"world\"]\n</code></pre>\n\n<p>And I would like to advertise my lib which does this under Node.js also: <a href=\"https://github.com/cruks/cruks-lib-function\" rel=\"nofollow\">https://github.com/cruks/cruks-lib-function</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a way to get the function parameter names of a function dynamically?</p>\n\n<p>Lets say my function looks like this:</p>\n\n<pre><code>function doSomething(param1, param2, .... paramN)\n{\n   // fill an array with the parameter name and value\n   // some other code \n}\n</code></pre>\n\n<p>Now how would I get a list of the parameter names and their values into an array from inside the function?</p>\n",
            "last_activity_date": 1422711265,
            "question_id": 1007981,
            "score": 97,
            "tags": [
                "javascript",
                "reflection"
            ],
            "title": "How to get function parameter names/values dynamically from javascript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p><a href=\"http://jsfiddle.net/Zevan/c9UE5/1/\">Here is an example using thejh's instructions</a></p>\n\n<p>You can store a reference id to any setInterval or setTimeout. Like this:</p>\n\n<pre><code>var loop = setInterval(func, 30);\n\n// some time later clear the interval\nclearInterval(loop);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 85
                },
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Debounce#Contact_bounce\">Debounce</a>.</p>\n\n<pre><code>function debouncer( func , timeout ) {\n   var timeoutID , timeout = timeout || 200;\n   return function () {\n      var scope = this , args = arguments;\n      clearTimeout( timeoutID );\n      timeoutID = setTimeout( function () {\n          func.apply( scope , Array.prototype.slice.call( args ) );\n      } , timeout );\n   }\n}\n\n\n$( window ).resize( debouncer( function ( e ) {\n    // do stuff \n} ) );\n</code></pre>\n\n<p>Note, you can use this method for anything you want to debounce (key events etc).</p>\n\n<p>Tweak the timeout parameter for optimal desired effect.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<pre><code>var lightbox_resize = false;\n$(window).resize(function() {\n    console.log(true);\n    if (lightbox_resize)\n        clearTimeout(lightbox_resize);\n    lightbox_resize = setTimeout(function() {\n        console.log('resize');\n    }, 500);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use <code>setTimeout()</code> and <code>clearTimeout()</code> in conjunction with <a href=\"http://api.jquery.com/jQuery.data/\"><code>jQuery.data</code></a>:</p>\n\n<pre><code>$(window).resize(function() {\n    clearTimeout($.data(this, 'resizeTimer'));\n    $.data(this, 'resizeTimer', setTimeout(function() {\n        //do something\n        alert(\"Haven't resized in 200ms!\");\n    }, 200));\n});\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>I wrote an <em>extension</em> to enhance jQuery's default <code>on</code> (&amp; <code>bind</code>)-event-handler. It attaches an event handler function for one or more events to the selected elements if the event was not triggered for a given interval. This is useful if you want to fire a callback only after a delay, like the resize event, or else.\n<a href=\"https://github.com/yckart/jquery.unevent.js\">https://github.com/yckart/jquery.unevent.js</a></p>\n\n<pre><code>;(function ($) {\n    var methods = { on: $.fn.on, bind: $.fn.bind };\n    $.each(methods, function(k){\n        $.fn[k] = function () {\n            var args = [].slice.call(arguments),\n                delay = args.pop(),\n                fn = args.pop(),\n                timer;\n\n            args.push(function () {\n                var self = this,\n                    arg = arguments;\n                clearTimeout(timer);\n                timer = setTimeout(function(){\n                    fn.apply(self, [].slice.call(arg));\n                }, delay);\n            });\n\n            return methods[k].apply(this, isNaN(delay) ? arguments : args);\n        };\n    });\n}(jQuery));\n</code></pre>\n\n<p>Use it like any other <code>on</code> or <code>bind</code>-event handler, except that you can pass an extra parameter as a last:</p>\n\n<pre><code>$(window).on('resize', function(e) {\n    console.log(e.type + '-event was 200ms not triggered');\n}, 200);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/ARTsinn/EqqHx/\">http://jsfiddle.net/ARTsinn/EqqHx/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Just to add to the above, it is common to get unwanted resize events because of scroll bars popping in and out, here is some code to avoid that</p>\n\n<pre><code>    $(window).resize(function() {\n        clearTimeout(this.id);\n        this.id = setTimeout(doneResizing, 500);\n    });\n\n    function doneResizing() {\n        var oldOverflow = document.body.style.overflow;\n        document.body.style.overflow = \"hidden\";\n        var currHeight = $(window).height(),\n            currWidth = $(window).width();\n        document.body.style.overflow = oldOverflow;\n\n        var prevUndefined = (typeof this.prevHeight === 'undefined' || typeof this.prevWidth === 'undefined');\n\n        if (prevUndefined || this.prevHeight !== currHeight || this.prevWidth !== currWidth) {\n            console.log('Window size ' + (prevUndefined ? '' : this.prevHeight + \",\" + this.prevWidth) + \" -&gt; \" + currHeight + \",\" + currWidth);\n            this.prevHeight = currHeight;\n            this.prevWidth = currWidth;\n\n            // your resize stuff\n        }\n    }\n\n    $(window).resize();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://underscorejs.org/\" rel=\"nofollow\">Underscore.js</a> has a couple of great methods for this task: <a href=\"http://underscorejs.org/#throttle\" rel=\"nofollow\"><code>throttle</code></a> and <a href=\"http://underscorejs.org/#debounce\" rel=\"nofollow\"><code>debounce</code></a>. Even if you're not using Underscore, take a look at the source of these functions. Here's an example:</p>\n\n<pre><code>var redraw = function() {'redraw logic here'};\nvar debouncedRedraw = _.debounce(redraw, 750);\n$(window).on('resize', debouncedRedraw);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p><em>How do I call a function once the browser windows has FINISHED resizing?</em></p>\n\n<p>I'm trying to do it like so, but am having problems. I'm using the JQuery Resize event function:</p>\n\n<pre><code>$(window).resize(function() {\n  ... // how to call only once the browser has FINISHED resizing?\n});\n</code></pre>\n\n<p>However, this function is called <em>continuously</em> if the user is manually resizing the browser window. Which means, it might call this function dozens of times in short interval of time.</p>\n\n<p>How can I call the resize function only <em>a single time</em> (once the browser window has finished resizing)?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Also without having to use a global variable.</p>\n",
            "last_activity_date": 1400679690,
            "question_id": 4298612,
            "score": 72,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "JQuery: How to call RESIZE event only once it&#39;s FINISHED resizing?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Are you looking for floor?</p>\n\n<pre><code>var num = 1.42482;\nvar num2 = 1;\nvar fnum = Math.floor(num).toFixed(2);\nvar fnum2 = Math.floor(num2).toFixed(2);\nalert(fnum + \" and \" + fnum2); //both values will be 1.00\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This works fine in FF4:</p>\n\n<p><strong><a href=\"http://jsfiddle.net/FQTqk/7/\">Live Demo</a></strong></p>\n\n<pre><code>parseFloat(Math.round(num3 * 100) / 100).toFixed(2);\n</code></pre>\n\n<p><strong>Update:</strong> Will <strong>round</strong> to 2 decimal places, so the input <code>1.346</code> will return <code>1.35</code>.</p>\n",
                    "is_accepted": true,
                    "score": 188
                },
                {
                    "body": "<p>You are not giving us the whole picture. </p>\n\n<p><code>javascript:alert(parseFloat(1).toFixed(2))</code> shows 1.00 in my browsers when I paste it int0 the location bar. \nHowever if you do something to it afterwards, it will revert. </p>\n\n<pre><code>var num = 2\ndocument.getElementById('spanId').innerHTML=(parseFloat(num).toFixed(2)-1)\n\n\nshows 1 and not 1.00\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Where specific formatting is required, you should write your own routine or use a library function that does what you need. The basic ECMAScript functionality is usually insufficient for displaying formatted numbers.</p>\n\n<p>A thorough explanation of rounding and formatting is here: <a href=\"http://www.merlyn.demon.co.uk/js-round.htm#RiJ\" rel=\"nofollow\">http://www.merlyn.demon.co.uk/js-round.htm#RiJ</a></p>\n\n<p>As a general rule, rounding and formatting should only be peformed as a last step before output. Doing so earlier may introduce unexpectedly large errors and destroy the formatting.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Is this what you mean?</p>\n\n<pre><code>function showAsFloat(n){\n     return !Number(n) ? n : Number(n)%1 === 0 ? Number(n).toFixed(2) : n;\n}\nvar num1 = 1, num2 = 1.341;\nalert(showAsFloat(num1)); //=&gt; 1.00\nalert(showAsFloat(num2)); //=&gt; 1.341\nalert(showAsFloat('notanumber')); //=&gt; 'notanumber'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var num = new Number(14.12);\nconsole.log(num.toPrecision(2));//outputs 14\nconsole.log(num.toPrecision(3));//outputs 14.1\nconsole.log(num.toPrecision(4));//outputs 14.12\nconsole.log(num.toPrecision(5));//outputs 14.120\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>Number(1).toFixed(2);         // 1.00\nNumber(1.341).toFixed(2);     // 1.34\nNumber(1.345).toFixed(2);     // 1.34 NOTE: See andy's comment below.\nNumber(1.3450001).toFixed(2); // 1.35\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>If you're already using jQuery, you could look at using the <a href=\"http://www.teamdf.com/web/jquery-number-format/178/\">jQuery Number Format</a> plugin.</p>\n\n<p>The plugin can return formatted numbers as a string, you can set decimal, and thousands separators, and you can choose the number of decimals to show.</p>\n\n<pre><code>$.number( 123, 2 ); // Returns '123.00'\n</code></pre>\n\n<p>You can also get <a href=\"http://github.com/teamdf/jquery-number/\">jQuery Number Format from GitHub</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Simplest answer:</p>\n\n<pre><code>var num = 1.2353453;\nnum.toFixed(2); // 1.24\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/E2XU7/\">http://jsfiddle.net/E2XU7/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>var quantity = 12;</p>\n\n<p>var import1 = 12.55;</p>\n\n<p>var total = quantity * import1;</p>\n\n<p>var answer = parseFloat(total).toFixed(2);</p>\n\n<p>document.write(answer);</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I would like to format my numbers to always display 2 decimal places, rounding where applicable.</p>\n\n<p>Examples:</p>\n\n<pre><code>number     display\n------     -------\n1          1.00\n1.341      1.34\n1.345      1.35\n</code></pre>\n\n<p>I have been using this: </p>\n\n<pre><code>parseFloat(num).toFixed(2);\n</code></pre>\n\n<p>But it's displaying <code>1</code> as <code>1</code>, rather than <code>1.00</code>.</p>\n",
            "last_activity_date": 1415177206,
            "question_id": 6134039,
            "score": 125,
            "tags": [
                "javascript",
                "floating-point",
                "number-formatting"
            ],
            "title": "Format number to always show 2 decimal places"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Not sure exactly what you're trying to achieve but this is a method I have used in the past with success to force the browser to redraw, maybe it will work for you.</p>\n\n<pre><code>// in jquery\n$('#parentOfElementToBeRedrawn').hide().show(0);\n\n// in plain js\ndocument.getElementById('parentOfElementToBeRedrawn').style.display = 'none';\ndocument.getElementById('parentOfElementToBeRedrawn').style.display = 'block';\n</code></pre>\n\n<p>If this simple redraw doesn't work you can try this one. It inserts an empty text node into the element which guarantees a redraw.</p>\n\n<pre><code>var forceRedraw = function(element){\n\n    if (!element) { return; }\n\n    var n = document.createTextNode(' ');\n    var disp = element.style.display;  // don't worry about previous display style\n\n    element.appendChild(n);\n    element.style.display = 'none';\n\n    setTimeout(function(){\n        element.style.display = disp;\n        n.parentNode.removeChild(n);\n    },20); // you can play with this timeout to make it as short as possible\n}\n</code></pre>\n\n<p>EDIT: In response to \u0160ime Vidas what we are achieving here would be a forced reflow. You can find out more from the master himself <a href=\"http://paulirish.com/2011/dom-html5-css3-performance/\">http://paulirish.com/2011/dom-html5-css3-performance/</a> </p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>This works for me. <a href=\"http://forrst.com/posts/jQuery_redraw-BGv\">Kudos go here</a>.</p>\n\n<pre><code>jQuery.fn.redraw = function() {\n    return this.hide(0, function() {\n        $(this).show();\n    });\n};\n\n$(el).redraw();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>An approach that worked for me on IE (I couldn't use the display technique because there was an input that must not loose focus)</p>\n\n<p>It works if you have 0 margin (changing the padding works as well)</p>\n\n<pre><code>if(div.style.marginLeft == '0px'){\n    div.style.marginLeft = '';\n    div.style.marginRight = '0px';\n} else {\n    div.style.marginLeft = '0px';\n    div.style.marginRight = '';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Hiding an element and then showing it again within a setTimeout of 0 will force a redraw.</p>\n\n<pre><code>$('#page').hide();\nsetTimeout(function() {\n    $('#page').show();\n}, 0);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>call dom.getComputedStyle() should force a reflow</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This solution without timeouts! Real <strong>force</strong> redraw! For Android and iOS.</p>\n\n<pre><code>var forceRedraw = function(element){\n  var disp = element.style.display;\n  element.style.display = 'none';\n  var trick = element.offsetHeight;\n  element.style.display = disp;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>CSS only. This works for situations where a child element is removed or added. In these situations, borders and rounded corners can leave artifacts.</p>\n\n<pre><code>el:after { content: \" \"; }\nel:before { content: \" \"; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>None of the above answers worked for me. I did notice that <em>resizing</em> my window did cause a redraw. So this did it for me:</p>\n\n<pre><code>$(window).trigger('resize');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<blockquote>\n  <p><strong>Sample Html:</strong></p>\n</blockquote>\n\n<pre><code>&lt;section id=\"parent\"&gt;\n  &lt;article class=\"child\"&gt;&lt;/article&gt;\n  &lt;article class=\"child\"&gt;&lt;/article&gt;\n&lt;/section&gt;\n</code></pre>\n\n<blockquote>\n  <p><strong>Js:</strong></p>\n</blockquote>\n\n<pre><code>  jQuery.fn.redraw = function() {\n        return this.hide(0,function() {$(this).show(100);});\n        // hide immediately and show with 100ms duration\n\n    };\n</code></pre>\n\n<blockquote>\n  <p><strong>call function:</strong></p>\n</blockquote>\n\n<p><del><code>$('article.child').redraw();</code></del>    //&lt;==bad idea</p>\n\n<pre><code>$('#parent').redraw();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>We recently encountered this and discovered that promoting the affected element to a <a href=\"http://www.html5rocks.com/en/tutorials/speed/layers/\" rel=\"nofollow\">composite layer</a> with <a href=\"http://caniuse.com/#feat=transforms3d\" rel=\"nofollow\">translateZ</a> fixed the issue without needing extra javascript.</p>\n\n<pre><code>.willnotrender { \n   transform: translateZ(0); \n}\n</code></pre>\n\n<p>As these painting issues show up mostly in Webkit/Blink, and this fix mostly targets Webkit/Blink, it's preferable in some cases.  Especially since many JavaScript solutions cause a <a href=\"http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/\" rel=\"nofollow\"><strong>reflow</strong> and repaint</a>, not just a repaint.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Every once in a while, Chrome will render perfectly valid HTML/CSS incorrectly or not at all.   Digging in through the DOM inspector is often enough to get it to realize the error of its ways and redraw correctly, so it's provably the case that the markup is good.  This happens frequently (and predictably) enough in a project I'm working on that I've put code in place to force a redraw in certain circumstances.</p>\n\n<p>This works in most browser/os combinations:</p>\n\n<pre><code>    el.style.cssText += ';-webkit-transform:rotateZ(0deg)'\n    el.offsetHeight\n    el.style.cssText += ';-webkit-transform:none'\n</code></pre>\n\n<p>As in, tweak some unused CSS property, then ask for some information that forces a redraw, then untweak the property.  Unfortunately, the bright team behind Chrome for the Mac seem to have found a way to get that offsetHeight without redrawing.  Thus killing an otherwise useful hack.</p>\n\n<p>Thus far, the best I've come up with to get the same effect on Chrome/Mac is this piece of ugliness:</p>\n\n<pre><code>    $(el).css(\"border\", \"solid 1px transparent\");\n    setTimeout(function()\n    {\n        $(el).css(\"border\", \"solid 0px transparent\");\n    }, 1000);\n</code></pre>\n\n<p>As in, actually force the element to jump a bit, then chill a second and jump it back.  Making it worse, if you drop that timeout below 500ms (to where it would be less noticeable), it often won't have the desired effect, since the browser won't get around to redrawing before it goes back to its original state.</p>\n\n<p>Anybody care to offer a better version of this redraw/refresh hack (preferably based on the first example above)  that works on Chrome/Mac?</p>\n",
            "last_activity_date": 1421351789,
            "question_id": 8840580,
            "score": 65,
            "tags": [
                "javascript",
                "css",
                "osx",
                "dom",
                "google-chrome"
            ],
            "title": "Force DOM redraw/refresh on Chrome/Mac"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>They are often used in jQuery plugins. As explained in the <a href=\"http://docs.jquery.com/Plugins/Authoring\" rel=\"nofollow\">jQuery Plugins Authoring Guide</a> all variables declared inside <code>{ }</code> are private and are not visible to the outside which allows for better encapsulation.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function(){ // some code here }\n</code></pre>\n\n<p>is the way to define an anonymous function in javascript. They can give you the ability to execute a function in the context of another function (where you might not have that ability otherwise).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With the increasing popularity of JavaScript frameworks, the <code>$</code> sign was used in many different occasions. So, to alleviate possible clashes, you can use those constructs:</p>\n\n<pre><code>(function ($){\n  // Your code using $ here.\n})(jQuery);\n</code></pre>\n\n<p>Specifically, that's an <strong>anonymous</strong> function declaration which gets executed <strong>immediately</strong> passing the main jQuery object as parameter. Inside that function, you can use <code>$</code> to refer to that object, without worrying about other frameworks being in scope as well.</p>\n",
                    "is_accepted": true,
                    "score": 58
                },
                {
                    "body": "<p>It explains <a href=\"http://helephant.com/2008/08/javascript-anonymous-functions/\">here</a> that your first construct provides scope for variables. </p>\n\n<blockquote>\n  <p>Variables are scoped at the function level in javascript. This is different to what you might be used to in a language like C# or Java where the variables are scoped to the block. What this means is if you declare a variable inside a loop or an if statement, it will be available to the entire function.</p>\n  \n  <p>If you ever find yourself needing to explicitly scope a variable inside a function you can use an anonymous function to do this. You can actually create an anonymous function and then execute it straight away and all the variables inside will be scoped to the anonymous function:</p>\n</blockquote>\n\n<pre><code>(function() {\n  var myProperty = \"hello world\";\n  alert(myProperty);\n})();\nalert(typeof(myProperty)); // undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This is considered a <a href=\"http://stackoverflow.com/questions/1424837/best-asp-net-background-service-implementation\">closure</a>.  It means the code contained will run within its own lexical scope.  This means you can define new variables and functions and they won't collide with the namespace used in code outside of the closure.</p>\n\n<pre><code>var i = 0;\nalert(\"The magic number is \" + i);\n\n(function() {\n   var i = 99;\n   alert(\"The magic number inside the closure is \" + i);\n})();\n\nalert(\"The magic number is still \" + i);\n</code></pre>\n\n<p>This will generate three popups, demonstrating that the <code>i</code> in the closure does not alter the pre-existing variable of the same name:</p>\n\n<ul>\n<li>The magic number is 0</li>\n<li>The magic number inside the closure is 99</li>\n<li>The magic number is still 0</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It's a self-invoking function.  Kind of like shorthand for writing</p>\n\n<pre><code>function DoSomeStuff($)\n{\n}\n\nDoSomeStuff(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It's just an anonymous function that is called immediately. You could first create the function and then call it, and you get the same effect:</p>\n\n<pre><code>(function(){ ... })();\n</code></pre>\n\n<p>works as:</p>\n\n<pre><code>temp = function(){ ... };\ntemp();\n</code></pre>\n\n<p>You can also do the same with a named function:</p>\n\n<pre><code>function temp() { ... }\ntemp();\n</code></pre>\n\n<p>The code that you call jQuery-specific is only that in the sense that you use the jQuery object in it. It's just an anonymous function with a parameter, that is called immediately.</p>\n\n<p>You can do the same thing in two steps, and you can do it with any parameters you like:</p>\n\n<pre><code>temp = function(answer){ ... };\ntemp(42);\n</code></pre>\n\n<p>The problem that this solves is that it creates a closuse for the code in the function. You can declare variables in it without polluting the global namespace, thus reducing the risk of conflicts when using one script along with another.</p>\n\n<p>In the specific case for jQuery you use it in compatibility mode where it doesn't declare the name $ as an alias for jQuery. By sending in the jQuery object into the closure and naming the parameter $ you can still use the same syntax as without compatibility mode.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>As others have said, they both define anonymous functions that are invoked immediately.  I generally wrap my JavaScript class declarations in this structure in order to create a static private scope for the class.  I can then place constant data, static methods, event handlers, or anything else in that scope and it will only be visible to instances of the class:</p>\n\n<pre><code>// Declare a namespace object.\nwindow.MyLibrary = {};\n\n// Wrap class declaration to create a private static scope.\n(function() {\n  var incrementingID = 0;\n\n  function somePrivateStaticMethod() {\n    // ...\n  }\n\n  // Declare the MyObject class under the MyLibrary namespace.\n  MyLibrary.MyObject = function() {\n    this.id = incrementingID++;\n  };\n\n  // ...MyObject's prototype declaration goes here, etc...\n  MyLibrary.MyObject.prototype = {\n    memberMethod: function() {\n      // Do some stuff\n      // Maybe call a static private method!\n      somePrivateStaticMethod();\n    }\n  };\n})();\n</code></pre>\n\n<p>In this example, the <code>MyObject</code> class is assigned to the <code>MyLibrary</code> namespace, so it is accessible.  <code>incrementingID</code> and <code>somePrivateStaticMethod()</code> are not directly accessible outside of the anonymous function scope. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is a technique used to limit variable scope; it's the only way to prevent variables from polluting the global namespace.</p>\n\n<pre><code>var bar = 1; // bar is now part of the global namespace\nalert(bar);\n\n(function () {\n   var foo = 1; // foo has function scope\n   alert(foo); \n   // code to be executed goes here\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Another reason to do this is to remove any confusion over which framework's <code>$</code> operator you are using.  To force jQuery, for instance, you can do:</p>\n\n<pre><code>;(function($){\n   ... your jQuery code here...\n})(jQuery);\n</code></pre>\n\n<p>By passing in the <code>$</code> operator as a parameter and invoking it on jQuery, the <code>$</code> operator within the function is locked to jQuery even if you have other frameworks loaded.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Another use for this construct is to \"capture\" the values of local variables that will be used in a closure. For example:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n    $(\"#button\"+i).click(function() {\n        alert(i);\n    });\n}\n</code></pre>\n\n<p>The above code will make all three buttons pop up \"3\". On the other hand:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n    (function(i) {\n        $(\"#button\"+i).click(function() {\n            alert(i);\n        });\n    })(i);\n}\n</code></pre>\n\n<p>This will make the three buttons pop up \"0\", \"1\", and \"2\" as expected.</p>\n\n<p>The reason for this is that a closure keeps a reference to its enclosing stack <em>frame</em>, which holds the current values of its variables. If those variables change before the closure executes, then the closure will see only the latest values, not the values as they were at the time the closure was created. By wrapping the closure creation inside <em>another</em> function as in the second example above, the current value of the variable <code>i</code> is saved in the stack frame of the anonymous function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>That is basically to <em>namespace</em> your JavaScript code.</p>\n\n<p>For example, you can place any variables or functions within there, and from the outside, they don't exist in that scope. So when you encapsulate everything in there, you don't have to worry about clashes.</p>\n\n<p>The <code>()</code> at the end means to self invoke. You can also add an argument there that will become the argument of your anonymous function. I do this with jQuery often, and you can see why...</p>\n\n<pre><code>(function($) {\n\n    // Now I can use $, but it won't affect any other library like Prototype\n})(jQuery);\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/users/149436/evan-trimboli\">Evan Trimboli</a> covers the rest in his <a href=\"http://stackoverflow.com/questions/3115019/javascript-library-design/3115026#3115026\">answer</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>1) It defines an anonymous function and executes it straight away.</p>\n\n<p>2) It's usually done so as not to pollute the global namespace with unwanted code.</p>\n\n<p>3) You need to expose some methods from it, anything declared inside will be \"private\", for example:</p>\n\n<pre><code>MyLib = (function(){\n    // other private stuff here\n    return {\n        init: function(){\n        }\n    };\n\n})();\n</code></pre>\n\n<p>Or, alternatively:</p>\n\n<pre><code>MyLib = {};\n(function({\n    MyLib.foo = function(){\n    }\n}));\n</code></pre>\n\n<p>The point is, there are many ways you can use it, but the result stays the same.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>What the above code is doing is creating an anonymous function on line 1, and then calling it on line 3 with 0 arguments. This effectively encapsulates all functions and variables defined within that library, because all of the functions will be accessible only inside that anonymous function.</p>\n\n<p>This is good practice, and the reasoning behind it is to avoid polluting the global namespace with variables and functions, which could be clobbered by other pieces of Javascript throughout the site.</p>\n\n<p>To clarify how the function is called, consider the simple example:</p>\n\n<p>If you have this single line of Javascript included, it will invoke automatically without explicitly calling it:</p>\n\n<pre><code>alert('hello');\n</code></pre>\n\n<p>So, take that idea, and apply it to this example:</p>\n\n<pre><code>(function() {\n    alert('hello')\n    //anything I define in here is scoped to this function only\n}) (); //here, the anonymous function is invoked\n</code></pre>\n\n<p>The end result is similar, because the anonymous function is invoked just like the previous example.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Because the <strike>good</strike> <em>code</em> answers are already taken :) I'll throw in a suggestion to watch some John Resig videos <strong><a href=\"http://video.google.com/videoplay?docid=-474821803269194441&amp;ei=_hAkTIekIIfcqgKaxIzeBg&amp;q=type%3agoogle+engEDU&amp;so=1#\" rel=\"nofollow\"> video 1 </a>, <a href=\"http://video.google.com/videoplay?docid=-474821803269194441&amp;ei=_hAkTIekIIfcqgKaxIzeBg&amp;q=type%3agoogle+engEDU&amp;so=1#docid=-7485992465859932389\" rel=\"nofollow\"> video 2 </a></strong> (inventor of jQuery &amp; master at JavaScript).  </p>\n\n<p>Some really good insights and answers provided in the videos.</p>\n\n<p>That is what I happened to be doing at the moment when I saw your question.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p><code>(function() {})()</code> and its jQuery-specific cousin <code>(function($) {})(jQuery)</code> pop up all the time in Javascript code.</p>\n\n<p>How do these constructs work, and what problems do they solve?</p>\n\n<p>Examples appreciated</p>\n",
            "last_activity_date": 1387277531,
            "question_id": 1639180,
            "score": 60,
            "tags": [
                "javascript"
            ],
            "title": "How does the (function() {})() construct work and why do people use it?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You may want to use the <code>onLoad</code> event, as in the following example:</p>\n\n<pre><code>&lt;iframe src=\"http://www.google.com/\" onLoad=\"alert('Test');\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>The alert will pop-up whenever the location within the iframe changes. It works in all modern browsers, but may not work in some very older browsers like IE5 and early Opera. (<a href=\"http://www.tipstrs.com/tip/3126/Telling-when-an-iframe-is-done-loading\">Source</a>)</p>\n\n<p><strong>If the iframe is showing a page within the same domain of the parent</strong>, you would be able to  access the location with <code>contentWindow.location</code>, as in the following example:</p>\n\n<pre><code>&lt;iframe src=\"/test.html\" onLoad=\"alert(this.contentWindow.location);\"&gt;&lt;/iframe&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 96
                },
                {
                    "body": "<pre><code>$('#iframeid').load(function(){\n    alert('frame has (re)loaded');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>If you have no control over the page and wish to watch for some kind of change then the modern method is to use <a href=\"https://developer.mozilla.org/en/docs/Web/API/MutationObserver\" rel=\"nofollow\"><code>MutationObserver</code></a></p>\n\n<p>An example of its use, watching for the <code>src</code> attribute to change of an <code>iframe</code></p>\n\n<p>HTML</p>\n\n<pre><code>&lt;iframe src=\"http://www.google.com\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Javascript</p>\n\n<pre><code>new MutationObserver(function (mutations) {\n    mutations.some(function(mutation) {\n        if (mutation.type === 'attributes' &amp;&amp; mutation.attributeName === 'src') {\n            console.log(mutation);\n            console.log('Old src: ', mutation.oldValue);\n            console.log('New src: ', mutation.target.src);\n            return true;\n        }\n\n        return false;\n    });\n}).observe(document.body, {\n    attributes: true,\n    attributeFilter: ['src'],\n    attributeOldValue: true,\n    characterData: false,\n    characterDataOldValue: false,\n    childList: false,\n    subtree: true\n});\n\nsetTimeout(function () {\n    document.getElementsByTagName('iframe')[0].src = 'http://jsfiddle.net/';\n}, 3000);\n</code></pre>\n\n<p>Output after 3 seconds</p>\n\n<pre><code>MutationRecord {oldValue: \"http://www.google.com\", attributeNamespace: null, attributeName: \"src\", nextSibling: null, previousSibling: null\u2026}\nOld src:  http://www.google.com\nNew src:  http://jsfiddle.net/ \n</code></pre>\n\n<p>On <a href=\"http://jsfiddle.net/Xotic750/42KFg/\" rel=\"nofollow\">jsFiddle</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/24726672/loops-in-javascript-monitoring-objects-for-updates\">Posted answer here as original question was closed as a duplicate of this one.</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Assuming I have no control over the content in the iframe, is there any way that I can detect a src change in it via the parent page? Some sort of onload maybe?</p>\n\n<p>My last resort is to do a 1 second interval test if the iframe src is the same as it was before, but doing this hacky solution would suck.</p>\n\n<p>I'm using the jQuery library if it helps.</p>\n",
            "last_activity_date": 1405285204,
            "question_id": 2429045,
            "score": 70,
            "tags": [
                "javascript",
                "jquery",
                "iframe",
                "onload"
            ],
            "title": "iFrame src change event detection?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators\" rel=\"nofollow\">MDN reference on operators</a></p>\n\n<h1>The List</h1>\n\n<p><code>==</code>, <code>===</code> Equality Operators</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/359494/javascript-vs-does-it-matter-which-equal-operator-i-use\">Does it matter which equals operator (== vs ===) I use in JavaScript comparisons?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/664886/in-javascript-int-value-int-value-evaluates-to-true-why-is-it-so\">In Javascript, &lt;int-value&gt; == &quot;&lt;int-value&gt;&quot; evaluates to true. Why is it so?</a></li>\n</ul>\n\n<hr>\n\n<p><code>!=</code>, <code>!==</code> Inequality Operators</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1889260/javascript-operator\">!= vs. !==</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1889260/javascript-operator\">Javascript operator !==</a></li>\n</ul>\n\n<hr>\n\n<p><code>&amp;&amp;</code>, <code>||</code>, <code>!</code> Logical Operators</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4535647/logical-operators-in-javascript-how-do-you-use-them\">Logical operators in JavaScript \u2014 how do you use them?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9579262/logical-operator-in-javascript-0-stands-for-boolean-false\">Logical operator || in javascript, 0 stands for Boolean false?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6439579/what-does-var-foo-foo-mean-in-javascript\">What does &quot;var FOO = FOO || {}&quot; mean in Javascript?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript\">What is the !! (not not) operator in JavaScript?</a></li>\n</ul>\n\n<hr>\n\n<p><code>,</code> Comma Operator</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/3561043/javascript-syntax-what-comma-means\">What does a comma do?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5580596/javascript-comma-operator\">Comma operator returns first value instead of second?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9579546/comma-operator-where-it-can-really-be-useful\">Comma operator(,) Where it can &quot;really&quot; be useful</a></li>\n</ul>\n\n<hr>\n\n<p><code>?\u2026:</code> Conditional (ternary) Operator</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/1771786/1048572\">Question mark in JavaScript</a></li>\n<li><a href=\"http://stackoverflow.com/q/1788917/1048572\">Operator precedence with Javascript Ternary operator</a></li>\n</ul>\n\n<hr>\n\n<p><code>|</code>, <code>&amp;</code>, <code>^</code>, <code>~</code> Bitwise OR, AND, XOR &amp; NOT operators</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4535328/what-do-these-operators-do\">What do these JavaScript bitwise operators do?</a></li>\n<li><a href=\"http://stackoverflow.com/q/6260475/1048572\">How to: The ~ operator?</a></li>\n<li><a href=\"http://stackoverflow.com/q/3374811/1048572\">Is there a &amp; logical operator in Javascript</a></li>\n<li><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators\" rel=\"nofollow\">https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">Using bitwise OR 0 to floor a number</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9049677/how-does-x0-floor-the-number-in-javascript\">How does x|0 floor the number in JavaScript?</a></li>\n<li><a href=\"http://stackoverflow.com/q/4055633/1048572\">What does ~~ (&quot;double tilde&quot;) do in Javascript?</a></li>\n</ul>\n\n<hr>\n\n<p><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code> Bit shift operators</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4535328/what-do-these-operators-do\">What do these JavaScript bitwise operators do?</a></li>\n<li><a href=\"http://stackoverflow.com/q/1822350/1048572\">What is the JavaScript &gt;&gt;&gt; operator and how do you use it?</a></li>\n<li><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators\" rel=\"nofollow\">https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators</a></li>\n</ul>\n\n<hr>\n\n<p><code>+</code>, <code>-</code> operators</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/14470973/1048572\">Single plus operator in javascript</a></li>\n<li><a href=\"http://stackoverflow.com/q/5450076/1048572\">Whats the significant use of Unary Plus and Minus operators?</a></li>\n</ul>\n\n<hr>\n\n<p><code>var x = function()</code> vs <code>function x()</code> Function Declaration Syntax</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/336859/javascript-var-functionname-function-vs-function-functionname\">var functionName = function() {} vs function functionName() {}</a></li>\n</ul>\n\n<hr>\n\n<p><code>(function(){...})()</code> IIFE <em>(Immediately Invoked Function Expression)</em></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/592396/1048572\">What is the purpose?</a>, <a href=\"http://stackoverflow.com/q/8228281/1048572\">How is it called?</a></li>\n<li><a href=\"http://stackoverflow.com/q/1634268/1048572\">Why does <code>(function(){\u2026})();</code> work but <code>function(){\u2026}();</code> doesn't?</a></li>\n<li><a href=\"http://stackoverflow.com/q/3384504/1048572\"><code>(function(){\u2026})();</code> vs <code>(function(){\u2026}());</code></a></li>\n<li><a href=\"http://stackoverflow.com/q/5827290/1048572\">shorter alternatives</a>:\n<ul>\n<li><code>!function(){\u2026}();</code> - <a href=\"http://stackoverflow.com/q/3755606/1048572\">What does the exclamation mark do before the function?</a></li>\n<li><code>+function(){\u2026}();</code> - <a href=\"http://stackoverflow.com/q/13341698/1048572\">JavaScript plus sign in front of function name</a></li>\n<li><a href=\"http://stackoverflow.com/q/8305915/1048572\">!function(){ }() vs (function(){ })()</a>, <a href=\"http://stackoverflow.com/q/24067605/1048572\"><code>!</code> vs leading semicolon</a></li>\n</ul></li>\n<li><a href=\"http://stackoverflow.com/q/2716069/1048572\"><code>(function(window, undefined){\u2026}(window));</code></a></li>\n</ul>\n\n<hr>\n\n<p><code>[]</code>, <code>Array()</code> Array Notation</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/931872/whats-the-difference-between-array-and-while-declaring-a-javascript-ar\">What\u2019s the difference between &quot;Array()&quot; and &quot;[]&quot; while declaring a JavaScript array?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1094723/what-is-array-literal-notation-in-javascript-and-when-should-you-use-it\">What is array literal notation in javascript and when should you use it?</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 29
                }
            ],
            "body": "<h2>What is this?</h2>\n\n<p>This is a collection of questions that come up every now and then about syntax in JavaScript. This is also a Community Wiki, <strong>so everyone is invited to participate in maintaining this list.</strong></p>\n\n<h2>Why is this?</h2>\n\n<p>Stack Overflow does not allow searching for particular characters. As a consequence, many questions about operators and other syntax tokens are not found easily when searching for them. This also makes closing duplicates more difficult. The list below is to help with this issue.</p>\n\n<p>The main idea is to have links to existing questions on Stack Overflow, so it's easier for us to reference them, not to copy over content from the ECMAScript Spec.</p>\n\n<p>Additionally, this is a blatant copy of the <a href=\"http://stackoverflow.com/questions/3737139/reference-what-does-this-symbol-mean-in-php\">PHP</a> symbol reference. We needed a JS one. </p>\n\n<hr>\n\n<p><strong>Please help. Edit and add links to other operators/syntax references, or if you can't find good questions/answers on a particular piece of syntax, add an answer to this question and link it</strong></p>\n",
            "last_activity_date": 1421798062,
            "question_id": 9549780,
            "score": 37,
            "tags": [
                "javascript"
            ],
            "title": "What does this symbol mean in JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>I can't speak to what you are trying to do specifically with the function itself, but if you don't like the regex being built every time, here are two solutions and some caveats about each.</p>\n\n<p>Here is one way to do this:</p>\n\n<pre><code>function makeSortString(s) {\n  if(!makeSortString.translate_re) makeSortString.translate_re = /[\u00f6\u00e4\u00fc\u00d6\u00c4\u00dc]/g;\n  var translate = {\n    \"\u00e4\": \"a\", \"\u00f6\": \"o\", \"\u00fc\": \"u\",\n    \"\u00c4\": \"A\", \"\u00d6\": \"O\", \"\u00dc\": \"U\"   // probably more to come\n  };\n  return ( s.replace(makeSortString.translate_re, function(match) { \n    return translate[match]; \n  }) );\n}\n</code></pre>\n\n<p>This will obviously make the regex a property of the function itself. The only thing you may not like about this (or you may, I guess it depends) is that the regex can now be modified outside of the function's body. So, someone could do this to modify the interally-used regex:</p>\n\n<pre><code>makeSortString.translate_re = /[a-z]/g;\n</code></pre>\n\n<p>So, there is that option.</p>\n\n<p>One way to get a closure, and thus prevent someone from modifying the regex, would be to define this as an anonymous function assignment like this:</p>\n\n<pre><code>var makeSortString = (function() {\n  var translate_re = /[\u00f6\u00e4\u00fc\u00d6\u00c4\u00dc]/g;\n  return function(s) {\n    var translate = {\n      \"\u00e4\": \"a\", \"\u00f6\": \"o\", \"\u00fc\": \"u\",\n      \"\u00c4\": \"A\", \"\u00d6\": \"O\", \"\u00dc\": \"U\"   // probably more to come\n    };\n    return ( s.replace(translate_re, function(match) { \n      return translate[match]; \n    }) );\n  }\n})();\n</code></pre>\n\n<p>Hopefully this is useful to you.</p>\n\n<p><hr /></p>\n\n<p>UPDATE: It's early and I don't know why I didn't see the obvious before, but it might also be useful to put you <code>translate</code> object in a closure as well:</p>\n\n<pre><code>var makeSortString = (function() {\n  var translate_re = /[\u00f6\u00e4\u00fc\u00d6\u00c4\u00dc]/g;\n  var translate = {\n    \"\u00e4\": \"a\", \"\u00f6\": \"o\", \"\u00fc\": \"u\",\n    \"\u00c4\": \"A\", \"\u00d6\": \"O\", \"\u00dc\": \"U\"   // probably more to come\n  };\n  return function(s) {\n    return ( s.replace(translate_re, function(match) { \n      return translate[match]; \n    }) );\n  }\n})();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>Based on the solution by Jason Bunting, here is what I use now. </p>\n\n<p>The whole thing is for the <a href=\"http://tablesorter.com/docs/\">jQuery tablesorter plug-in</a>: For (nearly correct) sorting of non-English tables with tablesorter plugin it is necessary to make use of a custom <a href=\"http://tablesorter.com/docs/#Configuration\"><code>textExtraction</code> function</a>. </p>\n\n<p>This one:</p>\n\n<ul>\n<li>translates the most common accented letters to unaccented ones (the list of supported letters is easily expandable)</li>\n<li>changes dates in German format (<code>'dd.mm.yyyy'</code>) to a recognized format (<code>'yyyy-mm-dd'</code>)</li>\n</ul>\n\n<p>Be careful to save the JavaScript file in UTF-8 encoding or it won't work.</p>\n\n<pre><code>// file encoding must be UTF-8!\nfunction getTextExtractor()\n{\n  return (function() {\n    var patternLetters = /[\u00f6\u00e4\u00fc\u00d6\u00c4\u00dc\u00e1\u00e0\u00e2\u00e9\u00e8\u00ea\u00fa\u00f9\u00fb\u00f3\u00f2\u00f4\u00c1\u00c0\u00c2\u00c9\u00c8\u00ca\u00da\u00d9\u00db\u00d3\u00d2\u00d4\u00df]/g;\n    var patternDateDmy = /^(?:\\D+)?(\\d{1,2})\\.(\\d{1,2})\\.(\\d{2,4})$/;\n    var lookupLetters = {\n      \"\u00e4\": \"a\", \"\u00f6\": \"o\", \"\u00fc\": \"u\",\n      \"\u00c4\": \"A\", \"\u00d6\": \"O\", \"\u00dc\": \"U\",\n      \"\u00e1\": \"a\", \"\u00e0\": \"a\", \"\u00e2\": \"a\",\n      \"\u00e9\": \"e\", \"\u00e8\": \"e\", \"\u00ea\": \"e\",\n      \"\u00fa\": \"u\", \"\u00f9\": \"u\", \"\u00fb\": \"u\",\n      \"\u00f3\": \"o\", \"\u00f2\": \"o\", \"\u00f4\": \"o\",\n      \"\u00c1\": \"A\", \"\u00c0\": \"A\", \"\u00c2\": \"A\",\n      \"\u00c9\": \"E\", \"\u00c8\": \"E\", \"\u00ca\": \"E\",\n      \"\u00da\": \"U\", \"\u00d9\": \"U\", \"\u00db\": \"U\",\n      \"\u00d3\": \"O\", \"\u00d2\": \"O\", \"\u00d4\": \"O\",\n      \"\u00df\": \"s\"\n    };\n    var letterTranslator = function(match) { \n      return lookupLetters[match] || match;\n    }\n\n    return function(node) {\n      var text = $.trim($(node).text());\n      var date = text.match(patternDateDmy);\n      if (date)\n        return [date[3], date[2], date[1]].join(\"-\");\n      else\n        return text.replace(patternLetters, letterTranslator);\n    }\n  })();\n}\n</code></pre>\n\n<p>You can use it like this:</p>\n\n<pre><code>$(\"table.sortable\").tablesorter({ \n  textExtraction: getTextExtractor()\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I made a Prototype Version of this:</p>\n\n<pre><code>String.prototype.strip = function() {\n  var translate_re = /[\u00f6\u00e4\u00fc\u00d6\u00c4\u00dc\u00df ]/g;\n  var translate = {\n    \"\u00e4\":\"a\", \"\u00f6\":\"o\", \"\u00fc\":\"u\",\n    \"\u00c4\":\"A\", \"\u00d6\":\"O\", \"\u00dc\":\"U\",\n    \" \":\"_\", \"\u00df\":\"ss\"   // probably more to come\n  };\n    return (this.replace(translate_re, function(match){\n        return translate[match];})\n    );\n};\n</code></pre>\n\n<p>Use like:</p>\n\n<pre><code>var teststring = '\u00e4 \u00f6 \u00fc \u00c4 \u00d6 \u00dc \u00df';\nteststring.strip();\n</code></pre>\n\n<p>This will will change the String to a_o_u_A_O_U_ss</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think this might work a little cleaner/better (though I haven't test it's performance):</p>\n\n<pre><code>String.prototype.stripAccents = function() {\n    var translate_re = /[\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d9\u00da\u00db\u00dc\u00dd]/g;\n    var translate = 'aaaaaceeeeiiiinooooouuuuyyAAAAACEEEEIIIINOOOOOUUUUY';\n    return (this.replace(translate_re, function(match){\n        return translate.substr(translate_re.source.indexOf(match)-1, 1); })\n    );\n};\n</code></pre>\n\n<p>Or if you are still too worried about performance, let's get the best of both worlds:</p>\n\n<pre><code>String.prototype.stripAccents = function() {\n    var in_chrs =  '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d9\u00da\u00db\u00dc\u00dd',\n        out_chrs = 'aaaaaceeeeiiiinooooouuuuyyAAAAACEEEEIIIINOOOOOUUUUY', \n        transl = {};\n    eval('var chars_rgx = /['+in_chrs+']/g');\n    for(var i = 0; i &lt; in_chrs.length; i++){ transl[in_chrs.charAt(i)] = out_chrs.charAt(i); }\n    return this.replace(chars_rgx, function(match){\n        return transl[match]; });\n};\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT</strong> (by @Tomalak)</p>\n\n<p>I appreciate the idea. However, there are several things wrong with the implementation, as outlined in the comment below.</p>\n\n<p>Here is how I would implement it.</p>\n\n<pre><code>var stripAccents = (function () {\n  var in_chrs   = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff\u00c0\u00c1\u00c2\u00c3\u00c4\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d9\u00da\u00db\u00dc\u00dd',\n      out_chrs  = 'aaaaaceeeeiiiinooooouuuuyyAAAAACEEEEIIIINOOOOOUUUUY', \n      chars_rgx = new RegExp('[' + in_chrs + ']', 'g'),\n      transl    = {}, i,\n      lookup    = function (m) { return transl[m] || m; };\n\n  for (i=0; i&lt;in_chrs.length; i++) {\n    transl[ in_chrs[i] ] = out_chrs[i];\n  }\n\n  return function (s) { return s.replace(chars_rgx, lookup); }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is a more complete version based on the Unicode standard, taken from here: <a href=\"http://semplicewebsites.com/removing-accents-javascript\">http://semplicewebsites.com/removing-accents-javascript</a></p>\n\n<pre><code>var Latinise={};Latinise.latin_map={\"\u00c1\":\"A\",\"\u0102\":\"A\",\"\u1eae\":\"A\",\"\u1eb6\":\"A\",\"\u1eb0\":\"A\",\"\u1eb2\":\"A\",\"\u1eb4\":\"A\",\"\u01cd\":\"A\",\"\u00c2\":\"A\",\"\u1ea4\":\"A\",\"\u1eac\":\"A\",\"\u1ea6\":\"A\",\"\u1ea8\":\"A\",\"\u1eaa\":\"A\",\"\u00c4\":\"A\",\"\u01de\":\"A\",\"\u0226\":\"A\",\"\u01e0\":\"A\",\"\u1ea0\":\"A\",\"\u0200\":\"A\",\"\u00c0\":\"A\",\"\u1ea2\":\"A\",\"\u0202\":\"A\",\"\u0100\":\"A\",\"\u0104\":\"A\",\"\u00c5\":\"A\",\"\u01fa\":\"A\",\"\u1e00\":\"A\",\"\u023a\":\"A\",\"\u00c3\":\"A\",\"\ua732\":\"AA\",\"\u00c6\":\"AE\",\"\u01fc\":\"AE\",\"\u01e2\":\"AE\",\"\ua734\":\"AO\",\"\ua736\":\"AU\",\"\ua738\":\"AV\",\"\ua73a\":\"AV\",\"\ua73c\":\"AY\",\"\u1e02\":\"B\",\"\u1e04\":\"B\",\"\u0181\":\"B\",\"\u1e06\":\"B\",\"\u0243\":\"B\",\"\u0182\":\"B\",\"\u0106\":\"C\",\"\u010c\":\"C\",\"\u00c7\":\"C\",\"\u1e08\":\"C\",\"\u0108\":\"C\",\"\u010a\":\"C\",\"\u0187\":\"C\",\"\u023b\":\"C\",\"\u010e\":\"D\",\"\u1e10\":\"D\",\"\u1e12\":\"D\",\"\u1e0a\":\"D\",\"\u1e0c\":\"D\",\"\u018a\":\"D\",\"\u1e0e\":\"D\",\"\u01f2\":\"D\",\"\u01c5\":\"D\",\"\u0110\":\"D\",\"\u018b\":\"D\",\"\u01f1\":\"DZ\",\"\u01c4\":\"DZ\",\"\u00c9\":\"E\",\"\u0114\":\"E\",\"\u011a\":\"E\",\"\u0228\":\"E\",\"\u1e1c\":\"E\",\"\u00ca\":\"E\",\"\u1ebe\":\"E\",\"\u1ec6\":\"E\",\"\u1ec0\":\"E\",\"\u1ec2\":\"E\",\"\u1ec4\":\"E\",\"\u1e18\":\"E\",\"\u00cb\":\"E\",\"\u0116\":\"E\",\"\u1eb8\":\"E\",\"\u0204\":\"E\",\"\u00c8\":\"E\",\"\u1eba\":\"E\",\"\u0206\":\"E\",\"\u0112\":\"E\",\"\u1e16\":\"E\",\"\u1e14\":\"E\",\"\u0118\":\"E\",\"\u0246\":\"E\",\"\u1ebc\":\"E\",\"\u1e1a\":\"E\",\"\ua76a\":\"ET\",\"\u1e1e\":\"F\",\"\u0191\":\"F\",\"\u01f4\":\"G\",\"\u011e\":\"G\",\"\u01e6\":\"G\",\"\u0122\":\"G\",\"\u011c\":\"G\",\"\u0120\":\"G\",\"\u0193\":\"G\",\"\u1e20\":\"G\",\"\u01e4\":\"G\",\"\u1e2a\":\"H\",\"\u021e\":\"H\",\"\u1e28\":\"H\",\"\u0124\":\"H\",\"\u2c67\":\"H\",\"\u1e26\":\"H\",\"\u1e22\":\"H\",\"\u1e24\":\"H\",\"\u0126\":\"H\",\"\u00cd\":\"I\",\"\u012c\":\"I\",\"\u01cf\":\"I\",\"\u00ce\":\"I\",\"\u00cf\":\"I\",\"\u1e2e\":\"I\",\"\u0130\":\"I\",\"\u1eca\":\"I\",\"\u0208\":\"I\",\"\u00cc\":\"I\",\"\u1ec8\":\"I\",\"\u020a\":\"I\",\"\u012a\":\"I\",\"\u012e\":\"I\",\"\u0197\":\"I\",\"\u0128\":\"I\",\"\u1e2c\":\"I\",\"\ua779\":\"D\",\"\ua77b\":\"F\",\"\ua77d\":\"G\",\"\ua782\":\"R\",\"\ua784\":\"S\",\"\ua786\":\"T\",\"\ua76c\":\"IS\",\"\u0134\":\"J\",\"\u0248\":\"J\",\"\u1e30\":\"K\",\"\u01e8\":\"K\",\"\u0136\":\"K\",\"\u2c69\":\"K\",\"\ua742\":\"K\",\"\u1e32\":\"K\",\"\u0198\":\"K\",\"\u1e34\":\"K\",\"\ua740\":\"K\",\"\ua744\":\"K\",\"\u0139\":\"L\",\"\u023d\":\"L\",\"\u013d\":\"L\",\"\u013b\":\"L\",\"\u1e3c\":\"L\",\"\u1e36\":\"L\",\"\u1e38\":\"L\",\"\u2c60\":\"L\",\"\ua748\":\"L\",\"\u1e3a\":\"L\",\"\u013f\":\"L\",\"\u2c62\":\"L\",\"\u01c8\":\"L\",\"\u0141\":\"L\",\"\u01c7\":\"LJ\",\"\u1e3e\":\"M\",\"\u1e40\":\"M\",\"\u1e42\":\"M\",\"\u2c6e\":\"M\",\"\u0143\":\"N\",\"\u0147\":\"N\",\"\u0145\":\"N\",\"\u1e4a\":\"N\",\"\u1e44\":\"N\",\"\u1e46\":\"N\",\"\u01f8\":\"N\",\"\u019d\":\"N\",\"\u1e48\":\"N\",\"\u0220\":\"N\",\"\u01cb\":\"N\",\"\u00d1\":\"N\",\"\u01ca\":\"NJ\",\"\u00d3\":\"O\",\"\u014e\":\"O\",\"\u01d1\":\"O\",\"\u00d4\":\"O\",\"\u1ed0\":\"O\",\"\u1ed8\":\"O\",\"\u1ed2\":\"O\",\"\u1ed4\":\"O\",\"\u1ed6\":\"O\",\"\u00d6\":\"O\",\"\u022a\":\"O\",\"\u022e\":\"O\",\"\u0230\":\"O\",\"\u1ecc\":\"O\",\"\u0150\":\"O\",\"\u020c\":\"O\",\"\u00d2\":\"O\",\"\u1ece\":\"O\",\"\u01a0\":\"O\",\"\u1eda\":\"O\",\"\u1ee2\":\"O\",\"\u1edc\":\"O\",\"\u1ede\":\"O\",\"\u1ee0\":\"O\",\"\u020e\":\"O\",\"\ua74a\":\"O\",\"\ua74c\":\"O\",\"\u014c\":\"O\",\"\u1e52\":\"O\",\"\u1e50\":\"O\",\"\u019f\":\"O\",\"\u01ea\":\"O\",\"\u01ec\":\"O\",\"\u00d8\":\"O\",\"\u01fe\":\"O\",\"\u00d5\":\"O\",\"\u1e4c\":\"O\",\"\u1e4e\":\"O\",\"\u022c\":\"O\",\"\u01a2\":\"OI\",\"\ua74e\":\"OO\",\"\u0190\":\"E\",\"\u0186\":\"O\",\"\u0222\":\"OU\",\"\u1e54\":\"P\",\"\u1e56\":\"P\",\"\ua752\":\"P\",\"\u01a4\":\"P\",\"\ua754\":\"P\",\"\u2c63\":\"P\",\"\ua750\":\"P\",\"\ua758\":\"Q\",\"\ua756\":\"Q\",\"\u0154\":\"R\",\"\u0158\":\"R\",\"\u0156\":\"R\",\"\u1e58\":\"R\",\"\u1e5a\":\"R\",\"\u1e5c\":\"R\",\"\u0210\":\"R\",\"\u0212\":\"R\",\"\u1e5e\":\"R\",\"\u024c\":\"R\",\"\u2c64\":\"R\",\"\ua73e\":\"C\",\"\u018e\":\"E\",\"\u015a\":\"S\",\"\u1e64\":\"S\",\"\u0160\":\"S\",\"\u1e66\":\"S\",\"\u015e\":\"S\",\"\u015c\":\"S\",\"\u0218\":\"S\",\"\u1e60\":\"S\",\"\u1e62\":\"S\",\"\u1e68\":\"S\",\"\u0164\":\"T\",\"\u0162\":\"T\",\"\u1e70\":\"T\",\"\u021a\":\"T\",\"\u023e\":\"T\",\"\u1e6a\":\"T\",\"\u1e6c\":\"T\",\"\u01ac\":\"T\",\"\u1e6e\":\"T\",\"\u01ae\":\"T\",\"\u0166\":\"T\",\"\u2c6f\":\"A\",\"\ua780\":\"L\",\"\u019c\":\"M\",\"\u0245\":\"V\",\"\ua728\":\"TZ\",\"\u00da\":\"U\",\"\u016c\":\"U\",\"\u01d3\":\"U\",\"\u00db\":\"U\",\"\u1e76\":\"U\",\"\u00dc\":\"U\",\"\u01d7\":\"U\",\"\u01d9\":\"U\",\"\u01db\":\"U\",\"\u01d5\":\"U\",\"\u1e72\":\"U\",\"\u1ee4\":\"U\",\"\u0170\":\"U\",\"\u0214\":\"U\",\"\u00d9\":\"U\",\"\u1ee6\":\"U\",\"\u01af\":\"U\",\"\u1ee8\":\"U\",\"\u1ef0\":\"U\",\"\u1eea\":\"U\",\"\u1eec\":\"U\",\"\u1eee\":\"U\",\"\u0216\":\"U\",\"\u016a\":\"U\",\"\u1e7a\":\"U\",\"\u0172\":\"U\",\"\u016e\":\"U\",\"\u0168\":\"U\",\"\u1e78\":\"U\",\"\u1e74\":\"U\",\"\ua75e\":\"V\",\"\u1e7e\":\"V\",\"\u01b2\":\"V\",\"\u1e7c\":\"V\",\"\ua760\":\"VY\",\"\u1e82\":\"W\",\"\u0174\":\"W\",\"\u1e84\":\"W\",\"\u1e86\":\"W\",\"\u1e88\":\"W\",\"\u1e80\":\"W\",\"\u2c72\":\"W\",\"\u1e8c\":\"X\",\"\u1e8a\":\"X\",\"\u00dd\":\"Y\",\"\u0176\":\"Y\",\"\u0178\":\"Y\",\"\u1e8e\":\"Y\",\"\u1ef4\":\"Y\",\"\u1ef2\":\"Y\",\"\u01b3\":\"Y\",\"\u1ef6\":\"Y\",\"\u1efe\":\"Y\",\"\u0232\":\"Y\",\"\u024e\":\"Y\",\"\u1ef8\":\"Y\",\"\u0179\":\"Z\",\"\u017d\":\"Z\",\"\u1e90\":\"Z\",\"\u2c6b\":\"Z\",\"\u017b\":\"Z\",\"\u1e92\":\"Z\",\"\u0224\":\"Z\",\"\u1e94\":\"Z\",\"\u01b5\":\"Z\",\"\u0132\":\"IJ\",\"\u0152\":\"OE\",\"\u1d00\":\"A\",\"\u1d01\":\"AE\",\"\u0299\":\"B\",\"\u1d03\":\"B\",\"\u1d04\":\"C\",\"\u1d05\":\"D\",\"\u1d07\":\"E\",\"\ua730\":\"F\",\"\u0262\":\"G\",\"\u029b\":\"G\",\"\u029c\":\"H\",\"\u026a\":\"I\",\"\u0281\":\"R\",\"\u1d0a\":\"J\",\"\u1d0b\":\"K\",\"\u029f\":\"L\",\"\u1d0c\":\"L\",\"\u1d0d\":\"M\",\"\u0274\":\"N\",\"\u1d0f\":\"O\",\"\u0276\":\"OE\",\"\u1d10\":\"O\",\"\u1d15\":\"OU\",\"\u1d18\":\"P\",\"\u0280\":\"R\",\"\u1d0e\":\"N\",\"\u1d19\":\"R\",\"\ua731\":\"S\",\"\u1d1b\":\"T\",\"\u2c7b\":\"E\",\"\u1d1a\":\"R\",\"\u1d1c\":\"U\",\"\u1d20\":\"V\",\"\u1d21\":\"W\",\"\u028f\":\"Y\",\"\u1d22\":\"Z\",\"\u00e1\":\"a\",\"\u0103\":\"a\",\"\u1eaf\":\"a\",\"\u1eb7\":\"a\",\"\u1eb1\":\"a\",\"\u1eb3\":\"a\",\"\u1eb5\":\"a\",\"\u01ce\":\"a\",\"\u00e2\":\"a\",\"\u1ea5\":\"a\",\"\u1ead\":\"a\",\"\u1ea7\":\"a\",\"\u1ea9\":\"a\",\"\u1eab\":\"a\",\"\u00e4\":\"a\",\"\u01df\":\"a\",\"\u0227\":\"a\",\"\u01e1\":\"a\",\"\u1ea1\":\"a\",\"\u0201\":\"a\",\"\u00e0\":\"a\",\"\u1ea3\":\"a\",\"\u0203\":\"a\",\"\u0101\":\"a\",\"\u0105\":\"a\",\"\u1d8f\":\"a\",\"\u1e9a\":\"a\",\"\u00e5\":\"a\",\"\u01fb\":\"a\",\"\u1e01\":\"a\",\"\u2c65\":\"a\",\"\u00e3\":\"a\",\"\ua733\":\"aa\",\"\u00e6\":\"ae\",\"\u01fd\":\"ae\",\"\u01e3\":\"ae\",\"\ua735\":\"ao\",\"\ua737\":\"au\",\"\ua739\":\"av\",\"\ua73b\":\"av\",\"\ua73d\":\"ay\",\"\u1e03\":\"b\",\"\u1e05\":\"b\",\"\u0253\":\"b\",\"\u1e07\":\"b\",\"\u1d6c\":\"b\",\"\u1d80\":\"b\",\"\u0180\":\"b\",\"\u0183\":\"b\",\"\u0275\":\"o\",\"\u0107\":\"c\",\"\u010d\":\"c\",\"\u00e7\":\"c\",\"\u1e09\":\"c\",\"\u0109\":\"c\",\"\u0255\":\"c\",\"\u010b\":\"c\",\"\u0188\":\"c\",\"\u023c\":\"c\",\"\u010f\":\"d\",\"\u1e11\":\"d\",\"\u1e13\":\"d\",\"\u0221\":\"d\",\"\u1e0b\":\"d\",\"\u1e0d\":\"d\",\"\u0257\":\"d\",\"\u1d91\":\"d\",\"\u1e0f\":\"d\",\"\u1d6d\":\"d\",\"\u1d81\":\"d\",\"\u0111\":\"d\",\"\u0256\":\"d\",\"\u018c\":\"d\",\"\u0131\":\"i\",\"\u0237\":\"j\",\"\u025f\":\"j\",\"\u0284\":\"j\",\"\u01f3\":\"dz\",\"\u01c6\":\"dz\",\"\u00e9\":\"e\",\"\u0115\":\"e\",\"\u011b\":\"e\",\"\u0229\":\"e\",\"\u1e1d\":\"e\",\"\u00ea\":\"e\",\"\u1ebf\":\"e\",\"\u1ec7\":\"e\",\"\u1ec1\":\"e\",\"\u1ec3\":\"e\",\"\u1ec5\":\"e\",\"\u1e19\":\"e\",\"\u00eb\":\"e\",\"\u0117\":\"e\",\"\u1eb9\":\"e\",\"\u0205\":\"e\",\"\u00e8\":\"e\",\"\u1ebb\":\"e\",\"\u0207\":\"e\",\"\u0113\":\"e\",\"\u1e17\":\"e\",\"\u1e15\":\"e\",\"\u2c78\":\"e\",\"\u0119\":\"e\",\"\u1d92\":\"e\",\"\u0247\":\"e\",\"\u1ebd\":\"e\",\"\u1e1b\":\"e\",\"\ua76b\":\"et\",\"\u1e1f\":\"f\",\"\u0192\":\"f\",\"\u1d6e\":\"f\",\"\u1d82\":\"f\",\"\u01f5\":\"g\",\"\u011f\":\"g\",\"\u01e7\":\"g\",\"\u0123\":\"g\",\"\u011d\":\"g\",\"\u0121\":\"g\",\"\u0260\":\"g\",\"\u1e21\":\"g\",\"\u1d83\":\"g\",\"\u01e5\":\"g\",\"\u1e2b\":\"h\",\"\u021f\":\"h\",\"\u1e29\":\"h\",\"\u0125\":\"h\",\"\u2c68\":\"h\",\"\u1e27\":\"h\",\"\u1e23\":\"h\",\"\u1e25\":\"h\",\"\u0266\":\"h\",\"\u1e96\":\"h\",\"\u0127\":\"h\",\"\u0195\":\"hv\",\"\u00ed\":\"i\",\"\u012d\":\"i\",\"\u01d0\":\"i\",\"\u00ee\":\"i\",\"\u00ef\":\"i\",\"\u1e2f\":\"i\",\"\u1ecb\":\"i\",\"\u0209\":\"i\",\"\u00ec\":\"i\",\"\u1ec9\":\"i\",\"\u020b\":\"i\",\"\u012b\":\"i\",\"\u012f\":\"i\",\"\u1d96\":\"i\",\"\u0268\":\"i\",\"\u0129\":\"i\",\"\u1e2d\":\"i\",\"\ua77a\":\"d\",\"\ua77c\":\"f\",\"\u1d79\":\"g\",\"\ua783\":\"r\",\"\ua785\":\"s\",\"\ua787\":\"t\",\"\ua76d\":\"is\",\"\u01f0\":\"j\",\"\u0135\":\"j\",\"\u029d\":\"j\",\"\u0249\":\"j\",\"\u1e31\":\"k\",\"\u01e9\":\"k\",\"\u0137\":\"k\",\"\u2c6a\":\"k\",\"\ua743\":\"k\",\"\u1e33\":\"k\",\"\u0199\":\"k\",\"\u1e35\":\"k\",\"\u1d84\":\"k\",\"\ua741\":\"k\",\"\ua745\":\"k\",\"\u013a\":\"l\",\"\u019a\":\"l\",\"\u026c\":\"l\",\"\u013e\":\"l\",\"\u013c\":\"l\",\"\u1e3d\":\"l\",\"\u0234\":\"l\",\"\u1e37\":\"l\",\"\u1e39\":\"l\",\"\u2c61\":\"l\",\"\ua749\":\"l\",\"\u1e3b\":\"l\",\"\u0140\":\"l\",\"\u026b\":\"l\",\"\u1d85\":\"l\",\"\u026d\":\"l\",\"\u0142\":\"l\",\"\u01c9\":\"lj\",\"\u017f\":\"s\",\"\u1e9c\":\"s\",\"\u1e9b\":\"s\",\"\u1e9d\":\"s\",\"\u1e3f\":\"m\",\"\u1e41\":\"m\",\"\u1e43\":\"m\",\"\u0271\":\"m\",\"\u1d6f\":\"m\",\"\u1d86\":\"m\",\"\u0144\":\"n\",\"\u0148\":\"n\",\"\u0146\":\"n\",\"\u1e4b\":\"n\",\"\u0235\":\"n\",\"\u1e45\":\"n\",\"\u1e47\":\"n\",\"\u01f9\":\"n\",\"\u0272\":\"n\",\"\u1e49\":\"n\",\"\u019e\":\"n\",\"\u1d70\":\"n\",\"\u1d87\":\"n\",\"\u0273\":\"n\",\"\u00f1\":\"n\",\"\u01cc\":\"nj\",\"\u00f3\":\"o\",\"\u014f\":\"o\",\"\u01d2\":\"o\",\"\u00f4\":\"o\",\"\u1ed1\":\"o\",\"\u1ed9\":\"o\",\"\u1ed3\":\"o\",\"\u1ed5\":\"o\",\"\u1ed7\":\"o\",\"\u00f6\":\"o\",\"\u022b\":\"o\",\"\u022f\":\"o\",\"\u0231\":\"o\",\"\u1ecd\":\"o\",\"\u0151\":\"o\",\"\u020d\":\"o\",\"\u00f2\":\"o\",\"\u1ecf\":\"o\",\"\u01a1\":\"o\",\"\u1edb\":\"o\",\"\u1ee3\":\"o\",\"\u1edd\":\"o\",\"\u1edf\":\"o\",\"\u1ee1\":\"o\",\"\u020f\":\"o\",\"\ua74b\":\"o\",\"\ua74d\":\"o\",\"\u2c7a\":\"o\",\"\u014d\":\"o\",\"\u1e53\":\"o\",\"\u1e51\":\"o\",\"\u01eb\":\"o\",\"\u01ed\":\"o\",\"\u00f8\":\"o\",\"\u01ff\":\"o\",\"\u00f5\":\"o\",\"\u1e4d\":\"o\",\"\u1e4f\":\"o\",\"\u022d\":\"o\",\"\u01a3\":\"oi\",\"\ua74f\":\"oo\",\"\u025b\":\"e\",\"\u1d93\":\"e\",\"\u0254\":\"o\",\"\u1d97\":\"o\",\"\u0223\":\"ou\",\"\u1e55\":\"p\",\"\u1e57\":\"p\",\"\ua753\":\"p\",\"\u01a5\":\"p\",\"\u1d71\":\"p\",\"\u1d88\":\"p\",\"\ua755\":\"p\",\"\u1d7d\":\"p\",\"\ua751\":\"p\",\"\ua759\":\"q\",\"\u02a0\":\"q\",\"\u024b\":\"q\",\"\ua757\":\"q\",\"\u0155\":\"r\",\"\u0159\":\"r\",\"\u0157\":\"r\",\"\u1e59\":\"r\",\"\u1e5b\":\"r\",\"\u1e5d\":\"r\",\"\u0211\":\"r\",\"\u027e\":\"r\",\"\u1d73\":\"r\",\"\u0213\":\"r\",\"\u1e5f\":\"r\",\"\u027c\":\"r\",\"\u1d72\":\"r\",\"\u1d89\":\"r\",\"\u024d\":\"r\",\"\u027d\":\"r\",\"\u2184\":\"c\",\"\ua73f\":\"c\",\"\u0258\":\"e\",\"\u027f\":\"r\",\"\u015b\":\"s\",\"\u1e65\":\"s\",\"\u0161\":\"s\",\"\u1e67\":\"s\",\"\u015f\":\"s\",\"\u015d\":\"s\",\"\u0219\":\"s\",\"\u1e61\":\"s\",\"\u1e63\":\"s\",\"\u1e69\":\"s\",\"\u0282\":\"s\",\"\u1d74\":\"s\",\"\u1d8a\":\"s\",\"\u023f\":\"s\",\"\u0261\":\"g\",\"\u1d11\":\"o\",\"\u1d13\":\"o\",\"\u1d1d\":\"u\",\"\u0165\":\"t\",\"\u0163\":\"t\",\"\u1e71\":\"t\",\"\u021b\":\"t\",\"\u0236\":\"t\",\"\u1e97\":\"t\",\"\u2c66\":\"t\",\"\u1e6b\":\"t\",\"\u1e6d\":\"t\",\"\u01ad\":\"t\",\"\u1e6f\":\"t\",\"\u1d75\":\"t\",\"\u01ab\":\"t\",\"\u0288\":\"t\",\"\u0167\":\"t\",\"\u1d7a\":\"th\",\"\u0250\":\"a\",\"\u1d02\":\"ae\",\"\u01dd\":\"e\",\"\u1d77\":\"g\",\"\u0265\":\"h\",\"\u02ae\":\"h\",\"\u02af\":\"h\",\"\u1d09\":\"i\",\"\u029e\":\"k\",\"\ua781\":\"l\",\"\u026f\":\"m\",\"\u0270\":\"m\",\"\u1d14\":\"oe\",\"\u0279\":\"r\",\"\u027b\":\"r\",\"\u027a\":\"r\",\"\u2c79\":\"r\",\"\u0287\":\"t\",\"\u028c\":\"v\",\"\u028d\":\"w\",\"\u028e\":\"y\",\"\ua729\":\"tz\",\"\u00fa\":\"u\",\"\u016d\":\"u\",\"\u01d4\":\"u\",\"\u00fb\":\"u\",\"\u1e77\":\"u\",\"\u00fc\":\"u\",\"\u01d8\":\"u\",\"\u01da\":\"u\",\"\u01dc\":\"u\",\"\u01d6\":\"u\",\"\u1e73\":\"u\",\"\u1ee5\":\"u\",\"\u0171\":\"u\",\"\u0215\":\"u\",\"\u00f9\":\"u\",\"\u1ee7\":\"u\",\"\u01b0\":\"u\",\"\u1ee9\":\"u\",\"\u1ef1\":\"u\",\"\u1eeb\":\"u\",\"\u1eed\":\"u\",\"\u1eef\":\"u\",\"\u0217\":\"u\",\"\u016b\":\"u\",\"\u1e7b\":\"u\",\"\u0173\":\"u\",\"\u1d99\":\"u\",\"\u016f\":\"u\",\"\u0169\":\"u\",\"\u1e79\":\"u\",\"\u1e75\":\"u\",\"\u1d6b\":\"ue\",\"\ua778\":\"um\",\"\u2c74\":\"v\",\"\ua75f\":\"v\",\"\u1e7f\":\"v\",\"\u028b\":\"v\",\"\u1d8c\":\"v\",\"\u2c71\":\"v\",\"\u1e7d\":\"v\",\"\ua761\":\"vy\",\"\u1e83\":\"w\",\"\u0175\":\"w\",\"\u1e85\":\"w\",\"\u1e87\":\"w\",\"\u1e89\":\"w\",\"\u1e81\":\"w\",\"\u2c73\":\"w\",\"\u1e98\":\"w\",\"\u1e8d\":\"x\",\"\u1e8b\":\"x\",\"\u1d8d\":\"x\",\"\u00fd\":\"y\",\"\u0177\":\"y\",\"\u00ff\":\"y\",\"\u1e8f\":\"y\",\"\u1ef5\":\"y\",\"\u1ef3\":\"y\",\"\u01b4\":\"y\",\"\u1ef7\":\"y\",\"\u1eff\":\"y\",\"\u0233\":\"y\",\"\u1e99\":\"y\",\"\u024f\":\"y\",\"\u1ef9\":\"y\",\"\u017a\":\"z\",\"\u017e\":\"z\",\"\u1e91\":\"z\",\"\u0291\":\"z\",\"\u2c6c\":\"z\",\"\u017c\":\"z\",\"\u1e93\":\"z\",\"\u0225\":\"z\",\"\u1e95\":\"z\",\"\u1d76\":\"z\",\"\u1d8e\":\"z\",\"\u0290\":\"z\",\"\u01b6\":\"z\",\"\u0240\":\"z\",\"\ufb00\":\"ff\",\"\ufb03\":\"ffi\",\"\ufb04\":\"ffl\",\"\ufb01\":\"fi\",\"\ufb02\":\"fl\",\"\u0133\":\"ij\",\"\u0153\":\"oe\",\"\ufb06\":\"st\",\"\u2090\":\"a\",\"\u2091\":\"e\",\"\u1d62\":\"i\",\"\u2c7c\":\"j\",\"\u2092\":\"o\",\"\u1d63\":\"r\",\"\u1d64\":\"u\",\"\u1d65\":\"v\",\"\u2093\":\"x\"};\nString.prototype.latinise=function(){return this.replace(/[^A-Za-z0-9\\[\\] ]/g,function(a){return Latinise.latin_map[a]||a})};\nString.prototype.latinize=String.prototype.latinise;\nString.prototype.isLatin=function(){return this==this.latinise()}\n</code></pre>\n\n<p>Some examples:</p>\n\n<pre><code>&gt; \"Piqu\u00e9\".latinize();\n\"Pique\"\n&gt; \"Piqu\u00e9\".isLatin();\nfalse\n&gt; \"Pique\".isLatin();\ntrue\n&gt; \"Piqu\u00e9\".latinise().isLatin();\ntrue\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>If you want to achieve sorting where \"\u00e4\" comes after \"a\" and is not treated as the same, then you can use a function like mine.</p>\n\n<p>You can always change the alphabet to get different or even weird sortings. However, if you want some letters to be equivalent, then you have to manipulate the strings like <code>a = a.replace(/\u00e4/, 'a')</code> or similar, as many have already replied above. I've included the uppercase letters if someone wants to have all uppercase words before all lowercase words (then you have to ommit <code>.toLowerCase()</code>).</p>\n\n<pre><code>function sortbyalphabet(a,b) {\n        alphabet = \"0123456789Aa\u00c0\u00e0\u00c1\u00e1\u00c2\u00e2\u00c3\u00e3\u00c4\u00e4BbCc\u00c7\u00e7Dd\u00c8\u00e8\u00c9\u00e9\u00ca\u00ea\u00cb\u00ebFfGgHh\u00cc\u00ec\u00cd\u00ed\u00ce\u00ee\u00cf\u00efJjKkLlMmNn\u00d1\u00f1Oo\u00d2\u00f2\u00d3\u00f3\u00d4\u00f4\u00d5\u00f5\u00d6\u00f6PpQqRrSsTt\u00d9\u00f9\u00da\u00fa\u00db\u00fb\u00dc\u00fcVvWwXx\u00dd\u00fd\u0178\u00ffZz\";\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n        shorterone = (a.length &gt; b.length ? a : b);\n        for (i=0; i&lt;shorterone.length; i++){\n            diff = alphabet.indexOf(a.charAt(i)) - alphabet.indexOf(b.charAt(i));\n            if (diff!=0){\n                return diff;\n            }\n        }\n        // sort the shorter first\n        return a.length - b.length;\n    }\n    var n = [\"ast\", \"\u00c4ste\", \"apfel\", \"\u00e4pfel\", \"\u00e0\"];\n    console.log(n.sort(sortbyalphabet));\n    // should return [\"apfel\", \"ast\", \"\u00e0\", \"\u00e4pfel\", \"\u00e4ste\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A direct port to javascript of Kierons solution: <a href=\"https://github.com/rwarasaurus/nano/blob/master/system/helpers.php#L61-73\" rel=\"nofollow\">https://github.com/rwarasaurus/nano/blob/master/system/helpers.php#L61-73</a>:</p>\n\n<pre><code>/**\n * Normalise a string replacing foreign characters\n *\n * @param {String} str\n * @return {String} str\n */\n\nvar normalize = (function () {\n    var a = ['\u00c0', '\u00c1', '\u00c2', '\u00c3', '\u00c4', '\u00c5', '\u00c6', '\u00c7', '\u00c8', '\u00c9', '\u00ca', '\u00cb', '\u00cc', '\u00cd', '\u00ce', '\u00cf', '\u00d0', '\u00d1', '\u00d2', '\u00d3', '\u00d4', '\u00d5', '\u00d6', '\u00d8', '\u00d9', '\u00da', '\u00db', '\u00dc', '\u00dd', '\u00df', '\u00e0', '\u00e1', '\u00e2', '\u00e3', '\u00e4', '\u00e5', '\u00e6', '\u00e7', '\u00e8', '\u00e9', '\u00ea', '\u00eb', '\u00ec', '\u00ed', '\u00ee', '\u00ef', '\u00f1', '\u00f2', '\u00f3', '\u00f4', '\u00f5', '\u00f6', '\u00f8', '\u00f9', '\u00fa', '\u00fb', '\u00fc', '\u00fd', '\u00ff', '\u0100', '\u0101', '\u0102', '\u0103', '\u0104', '\u0105', '\u0106', '\u0107', '\u0108', '\u0109', '\u010a', '\u010b', '\u010c', '\u010d', '\u010e', '\u010f', '\u0110', '\u0111', '\u0112', '\u0113', '\u0114', '\u0115', '\u0116', '\u0117', '\u0118', '\u0119', '\u011a', '\u011b', '\u011c', '\u011d', '\u011e', '\u011f', '\u0120', '\u0121', '\u0122', '\u0123', '\u0124', '\u0125', '\u0126', '\u0127', '\u0128', '\u0129', '\u012a', '\u012b', '\u012c', '\u012d', '\u012e', '\u012f', '\u0130', '\u0131', '\u0132', '\u0133', '\u0134', '\u0135', '\u0136', '\u0137', '\u0139', '\u013a', '\u013b', '\u013c', '\u013d', '\u013e', '\u013f', '\u0140', '\u0141', '\u0142', '\u0143', '\u0144', '\u0145', '\u0146', '\u0147', '\u0148', '\u0149', '\u014c', '\u014d', '\u014e', '\u014f', '\u0150', '\u0151', '\u0152', '\u0153', '\u0154', '\u0155', '\u0156', '\u0157', '\u0158', '\u0159', '\u015a', '\u015b', '\u015c', '\u015d', '\u015e', '\u015f', '\u0160', '\u0161', '\u0162', '\u0163', '\u0164', '\u0165', '\u0166', '\u0167', '\u0168', '\u0169', '\u016a', '\u016b', '\u016c', '\u016d', '\u016e', '\u016f', '\u0170', '\u0171', '\u0172', '\u0173', '\u0174', '\u0175', '\u0176', '\u0177', '\u0178', '\u0179', '\u017a', '\u017b', '\u017c', '\u017d', '\u017e', '\u017f', '\u0192', '\u01a0', '\u01a1', '\u01af', '\u01b0', '\u01cd', '\u01ce', '\u01cf', '\u01d0', '\u01d1', '\u01d2', '\u01d3', '\u01d4', '\u01d5', '\u01d6', '\u01d7', '\u01d8', '\u01d9', '\u01da', '\u01db', '\u01dc', '\u01fa', '\u01fb', '\u01fc', '\u01fd', '\u01fe', '\u01ff'];\n    var b = ['A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o'];\n\n    return function (str) {\n        var i = a.length;\n        while (i--) str = str.replace(a[i], b[i]);\n        return str;\n    };\n}());\n</code></pre>\n\n<p>And a slightly modified version, using a char-map instead of two arrays:</p>\n\n<p>To compare these two methods I made a simple benchmark: <a href=\"http://jsperf.com/replace-foreign-characters\" rel=\"nofollow\">http://jsperf.com/replace-foreign-characters</a></p>\n\n<pre><code>/**\n * Normalise a string replacing foreign characters\n *\n * @param {String} str\n * @return {String}\n */\nvar normalize = (function () {\n    var map = {\n            \"\u00c0\": \"A\",\n            \"\u00c1\": \"A\",\n            \"\u00c2\": \"A\",\n            \"\u00c3\": \"A\",\n            \"\u00c4\": \"A\",\n            \"\u00c5\": \"A\",\n            \"\u00c6\": \"AE\",\n            \"\u00c7\": \"C\",\n            \"\u00c8\": \"E\",\n            \"\u00c9\": \"E\",\n            \"\u00ca\": \"E\",\n            \"\u00cb\": \"E\",\n            \"\u00cc\": \"I\",\n            \"\u00cd\": \"I\",\n            \"\u00ce\": \"I\",\n            \"\u00cf\": \"I\",\n            \"\u00d0\": \"D\",\n            \"\u00d1\": \"N\",\n            \"\u00d2\": \"O\",\n            \"\u00d3\": \"O\",\n            \"\u00d4\": \"O\",\n            \"\u00d5\": \"O\",\n            \"\u00d6\": \"O\",\n            \"\u00d8\": \"O\",\n            \"\u00d9\": \"U\",\n            \"\u00da\": \"U\",\n            \"\u00db\": \"U\",\n            \"\u00dc\": \"U\",\n            \"\u00dd\": \"Y\",\n            \"\u00df\": \"s\",\n            \"\u00e0\": \"a\",\n            \"\u00e1\": \"a\",\n            \"\u00e2\": \"a\",\n            \"\u00e3\": \"a\",\n            \"\u00e4\": \"a\",\n            \"\u00e5\": \"a\",\n            \"\u00e6\": \"ae\",\n            \"\u00e7\": \"c\",\n            \"\u00e8\": \"e\",\n            \"\u00e9\": \"e\",\n            \"\u00ea\": \"e\",\n            \"\u00eb\": \"e\",\n            \"\u00ec\": \"i\",\n            \"\u00ed\": \"i\",\n            \"\u00ee\": \"i\",\n            \"\u00ef\": \"i\",\n            \"\u00f1\": \"n\",\n            \"\u00f2\": \"o\",\n            \"\u00f3\": \"o\",\n            \"\u00f4\": \"o\",\n            \"\u00f5\": \"o\",\n            \"\u00f6\": \"o\",\n            \"\u00f8\": \"o\",\n            \"\u00f9\": \"u\",\n            \"\u00fa\": \"u\",\n            \"\u00fb\": \"u\",\n            \"\u00fc\": \"u\",\n            \"\u00fd\": \"y\",\n            \"\u00ff\": \"y\",\n            \"\u0100\": \"A\",\n            \"\u0101\": \"a\",\n            \"\u0102\": \"A\",\n            \"\u0103\": \"a\",\n            \"\u0104\": \"A\",\n            \"\u0105\": \"a\",\n            \"\u0106\": \"C\",\n            \"\u0107\": \"c\",\n            \"\u0108\": \"C\",\n            \"\u0109\": \"c\",\n            \"\u010a\": \"C\",\n            \"\u010b\": \"c\",\n            \"\u010c\": \"C\",\n            \"\u010d\": \"c\",\n            \"\u010e\": \"D\",\n            \"\u010f\": \"d\",\n            \"\u0110\": \"D\",\n            \"\u0111\": \"d\",\n            \"\u0112\": \"E\",\n            \"\u0113\": \"e\",\n            \"\u0114\": \"E\",\n            \"\u0115\": \"e\",\n            \"\u0116\": \"E\",\n            \"\u0117\": \"e\",\n            \"\u0118\": \"E\",\n            \"\u0119\": \"e\",\n            \"\u011a\": \"E\",\n            \"\u011b\": \"e\",\n            \"\u011c\": \"G\",\n            \"\u011d\": \"g\",\n            \"\u011e\": \"G\",\n            \"\u011f\": \"g\",\n            \"\u0120\": \"G\",\n            \"\u0121\": \"g\",\n            \"\u0122\": \"G\",\n            \"\u0123\": \"g\",\n            \"\u0124\": \"H\",\n            \"\u0125\": \"h\",\n            \"\u0126\": \"H\",\n            \"\u0127\": \"h\",\n            \"\u0128\": \"I\",\n            \"\u0129\": \"i\",\n            \"\u012a\": \"I\",\n            \"\u012b\": \"i\",\n            \"\u012c\": \"I\",\n            \"\u012d\": \"i\",\n            \"\u012e\": \"I\",\n            \"\u012f\": \"i\",\n            \"\u0130\": \"I\",\n            \"\u0131\": \"i\",\n            \"\u0132\": \"IJ\",\n            \"\u0133\": \"ij\",\n            \"\u0134\": \"J\",\n            \"\u0135\": \"j\",\n            \"\u0136\": \"K\",\n            \"\u0137\": \"k\",\n            \"\u0139\": \"L\",\n            \"\u013a\": \"l\",\n            \"\u013b\": \"L\",\n            \"\u013c\": \"l\",\n            \"\u013d\": \"L\",\n            \"\u013e\": \"l\",\n            \"\u013f\": \"L\",\n            \"\u0140\": \"l\",\n            \"\u0141\": \"l\",\n            \"\u0142\": \"l\",\n            \"\u0143\": \"N\",\n            \"\u0144\": \"n\",\n            \"\u0145\": \"N\",\n            \"\u0146\": \"n\",\n            \"\u0147\": \"N\",\n            \"\u0148\": \"n\",\n            \"\u0149\": \"n\",\n            \"\u014c\": \"O\",\n            \"\u014d\": \"o\",\n            \"\u014e\": \"O\",\n            \"\u014f\": \"o\",\n            \"\u0150\": \"O\",\n            \"\u0151\": \"o\",\n            \"\u0152\": \"OE\",\n            \"\u0153\": \"oe\",\n            \"\u0154\": \"R\",\n            \"\u0155\": \"r\",\n            \"\u0156\": \"R\",\n            \"\u0157\": \"r\",\n            \"\u0158\": \"R\",\n            \"\u0159\": \"r\",\n            \"\u015a\": \"S\",\n            \"\u015b\": \"s\",\n            \"\u015c\": \"S\",\n            \"\u015d\": \"s\",\n            \"\u015e\": \"S\",\n            \"\u015f\": \"s\",\n            \"\u0160\": \"S\",\n            \"\u0161\": \"s\",\n            \"\u0162\": \"T\",\n            \"\u0163\": \"t\",\n            \"\u0164\": \"T\",\n            \"\u0165\": \"t\",\n            \"\u0166\": \"T\",\n            \"\u0167\": \"t\",\n            \"\u0168\": \"U\",\n            \"\u0169\": \"u\",\n            \"\u016a\": \"U\",\n            \"\u016b\": \"u\",\n            \"\u016c\": \"U\",\n            \"\u016d\": \"u\",\n            \"\u016e\": \"U\",\n            \"\u016f\": \"u\",\n            \"\u0170\": \"U\",\n            \"\u0171\": \"u\",\n            \"\u0172\": \"U\",\n            \"\u0173\": \"u\",\n            \"\u0174\": \"W\",\n            \"\u0175\": \"w\",\n            \"\u0176\": \"Y\",\n            \"\u0177\": \"y\",\n            \"\u0178\": \"Y\",\n            \"\u0179\": \"Z\",\n            \"\u017a\": \"z\",\n            \"\u017b\": \"Z\",\n            \"\u017c\": \"z\",\n            \"\u017d\": \"Z\",\n            \"\u017e\": \"z\",\n            \"\u017f\": \"s\",\n            \"\u0192\": \"f\",\n            \"\u01a0\": \"O\",\n            \"\u01a1\": \"o\",\n            \"\u01af\": \"U\",\n            \"\u01b0\": \"u\",\n            \"\u01cd\": \"A\",\n            \"\u01ce\": \"a\",\n            \"\u01cf\": \"I\",\n            \"\u01d0\": \"i\",\n            \"\u01d1\": \"O\",\n            \"\u01d2\": \"o\",\n            \"\u01d3\": \"U\",\n            \"\u01d4\": \"u\",\n            \"\u01d5\": \"U\",\n            \"\u01d6\": \"u\",\n            \"\u01d7\": \"U\",\n            \"\u01d8\": \"u\",\n            \"\u01d9\": \"U\",\n            \"\u01da\": \"u\",\n            \"\u01db\": \"U\",\n            \"\u01dc\": \"u\",\n            \"\u01fa\": \"A\",\n            \"\u01fb\": \"a\",\n            \"\u01fc\": \"AE\",\n            \"\u01fd\": \"ae\",\n            \"\u01fe\": \"O\",\n            \"\u01ff\": \"o\"\n        },\n        nonWord = /\\W/g,\n        mapping = function (c) {\n            return map[c] || c; \n        };\n\n\n    return function (str) {\n        return str.replace(nonWord, mapping);\n    };\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The complete solution to your request is:</p>\n\n<pre><code>function convert_accented_characters(str){\nvar conversions = new Object();\nconversions['ae'] = '\u00e4|\u00e6|\u01fd';\nconversions['oe'] = '\u00f6|\u0153';\nconversions['ue'] = '\u00fc';\nconversions['Ae'] = '\u00c4';\nconversions['Ue'] = '\u00dc';\nconversions['Oe'] = '\u00d6';\nconversions['A'] = '\u00c0|\u00c1|\u00c2|\u00c3|\u00c4|\u00c5|\u01fa|\u0100|\u0102|\u0104|\u01cd';\nconversions['a'] = '\u00e0|\u00e1|\u00e2|\u00e3|\u00e5|\u01fb|\u0101|\u0103|\u0105|\u01ce|\u00aa';\nconversions['C'] = '\u00c7|\u0106|\u0108|\u010a|\u010c';\nconversions['c'] = '\u00e7|\u0107|\u0109|\u010b|\u010d';\nconversions['D'] = '\u00d0|\u010e|\u0110';\nconversions['d'] = '\u00f0|\u010f|\u0111';\nconversions['E'] = '\u00c8|\u00c9|\u00ca|\u00cb|\u0112|\u0114|\u0116|\u0118|\u011a';\nconversions['e'] = '\u00e8|\u00e9|\u00ea|\u00eb|\u0113|\u0115|\u0117|\u0119|\u011b';\nconversions['G'] = '\u011c|\u011e|\u0120|\u0122';\nconversions['g'] = '\u011d|\u011f|\u0121|\u0123';\nconversions['H'] = '\u0124|\u0126';\nconversions['h'] = '\u0125|\u0127';\nconversions['I'] = '\u00cc|\u00cd|\u00ce|\u00cf|\u0128|\u012a|\u012c|\u01cf|\u012e|\u0130';\nconversions['i'] = '\u00ec|\u00ed|\u00ee|\u00ef|\u0129|\u012b|\u012d|\u01d0|\u012f|\u0131';\nconversions['J'] = '\u0134';\nconversions['j'] = '\u0135';\nconversions['K'] = '\u0136';\nconversions['k'] = '\u0137';\nconversions['L'] = '\u0139|\u013b|\u013d|\u013f|\u0141';\nconversions['l'] = '\u013a|\u013c|\u013e|\u0140|\u0142';\nconversions['N'] = '\u00d1|\u0143|\u0145|\u0147';\nconversions['n'] = '\u00f1|\u0144|\u0146|\u0148|\u0149';\nconversions['O'] = '\u00d2|\u00d3|\u00d4|\u00d5|\u014c|\u014e|\u01d1|\u0150|\u01a0|\u00d8|\u01fe';\nconversions['o'] = '\u00f2|\u00f3|\u00f4|\u00f5|\u014d|\u014f|\u01d2|\u0151|\u01a1|\u00f8|\u01ff|\u00ba';\nconversions['R'] = '\u0154|\u0156|\u0158';\nconversions['r'] = '\u0155|\u0157|\u0159';\nconversions['S'] = '\u015a|\u015c|\u015e|\u0160';\nconversions['s'] = '\u015b|\u015d|\u015f|\u0161|\u017f';\nconversions['T'] = '\u0162|\u0164|\u0166';\nconversions['t'] = '\u0163|\u0165|\u0167';\nconversions['U'] = '\u00d9|\u00da|\u00db|\u0168|\u016a|\u016c|\u016e|\u0170|\u0172|\u01af|\u01d3|\u01d5|\u01d7|\u01d9|\u01db';\nconversions['u'] = '\u00f9|\u00fa|\u00fb|\u0169|\u016b|\u016d|\u016f|\u0171|\u0173|\u01b0|\u01d4|\u01d6|\u01d8|\u01da|\u01dc';\nconversions['Y'] = '\u00dd|\u0178|\u0176';\nconversions['y'] = '\u00fd|\u00ff|\u0177';\nconversions['W'] = '\u0174';\nconversions['w'] = '\u0175';\nconversions['Z'] = '\u0179|\u017b|\u017d';\nconversions['z'] = '\u017a|\u017c|\u017e';\nconversions['AE'] = '\u00c6|\u01fc';\nconversions['ss'] = '\u00df';\nconversions['IJ'] = '\u0132';\nconversions['ij'] = '\u0133';\nconversions['OE'] = '\u0152';\nconversions['f'] = '\u0192';\nfor(var i in conversions){\n    var re = new RegExp(conversions[i],\"g\");\n    str = str.replace(re,i);\n}\nreturn str;\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The correct terminology for such accents is <em>Diacritics</em>. After Googling this term, I found <a href=\"https://github.com/backbone-paginator/backbone.paginator/blob/master/plugins/diacritic.js\">this function</a> which is part of <code>backbone.paginator</code>. It has a very complete collection of Diacritics and replaces them with their most intuitive ascii character. I found this to be the most complete Javascript solution available today.</p>\n\n<p>The full function for future reference:</p>\n\n<pre><code>function removeDiacritics (str) {\n\n  var defaultDiacriticsRemovalMap = [\n    {'base':'A', 'letters':/[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g},\n    {'base':'AA','letters':/[\\uA732]/g},\n    {'base':'AE','letters':/[\\u00C6\\u01FC\\u01E2]/g},\n    {'base':'AO','letters':/[\\uA734]/g},\n    {'base':'AU','letters':/[\\uA736]/g},\n    {'base':'AV','letters':/[\\uA738\\uA73A]/g},\n    {'base':'AY','letters':/[\\uA73C]/g},\n    {'base':'B', 'letters':/[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g},\n    {'base':'C', 'letters':/[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g},\n    {'base':'D', 'letters':/[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g},\n    {'base':'DZ','letters':/[\\u01F1\\u01C4]/g},\n    {'base':'Dz','letters':/[\\u01F2\\u01C5]/g},\n    {'base':'E', 'letters':/[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g},\n    {'base':'F', 'letters':/[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g},\n    {'base':'G', 'letters':/[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g},\n    {'base':'H', 'letters':/[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g},\n    {'base':'I', 'letters':/[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g},\n    {'base':'J', 'letters':/[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g},\n    {'base':'K', 'letters':/[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g},\n    {'base':'L', 'letters':/[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g},\n    {'base':'LJ','letters':/[\\u01C7]/g},\n    {'base':'Lj','letters':/[\\u01C8]/g},\n    {'base':'M', 'letters':/[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g},\n    {'base':'N', 'letters':/[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g},\n    {'base':'NJ','letters':/[\\u01CA]/g},\n    {'base':'Nj','letters':/[\\u01CB]/g},\n    {'base':'O', 'letters':/[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g},\n    {'base':'OI','letters':/[\\u01A2]/g},\n    {'base':'OO','letters':/[\\uA74E]/g},\n    {'base':'OU','letters':/[\\u0222]/g},\n    {'base':'P', 'letters':/[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g},\n    {'base':'Q', 'letters':/[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g},\n    {'base':'R', 'letters':/[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g},\n    {'base':'S', 'letters':/[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g},\n    {'base':'T', 'letters':/[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g},\n    {'base':'TZ','letters':/[\\uA728]/g},\n    {'base':'U', 'letters':/[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g},\n    {'base':'V', 'letters':/[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g},\n    {'base':'VY','letters':/[\\uA760]/g},\n    {'base':'W', 'letters':/[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g},\n    {'base':'X', 'letters':/[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g},\n    {'base':'Y', 'letters':/[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g},\n    {'base':'Z', 'letters':/[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g},\n    {'base':'a', 'letters':/[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g},\n    {'base':'aa','letters':/[\\uA733]/g},\n    {'base':'ae','letters':/[\\u00E6\\u01FD\\u01E3]/g},\n    {'base':'ao','letters':/[\\uA735]/g},\n    {'base':'au','letters':/[\\uA737]/g},\n    {'base':'av','letters':/[\\uA739\\uA73B]/g},\n    {'base':'ay','letters':/[\\uA73D]/g},\n    {'base':'b', 'letters':/[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g},\n    {'base':'c', 'letters':/[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g},\n    {'base':'d', 'letters':/[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g},\n    {'base':'dz','letters':/[\\u01F3\\u01C6]/g},\n    {'base':'e', 'letters':/[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g},\n    {'base':'f', 'letters':/[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g},\n    {'base':'g', 'letters':/[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g},\n    {'base':'h', 'letters':/[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g},\n    {'base':'hv','letters':/[\\u0195]/g},\n    {'base':'i', 'letters':/[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g},\n    {'base':'j', 'letters':/[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g},\n    {'base':'k', 'letters':/[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g},\n    {'base':'l', 'letters':/[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g},\n    {'base':'lj','letters':/[\\u01C9]/g},\n    {'base':'m', 'letters':/[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g},\n    {'base':'n', 'letters':/[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g},\n    {'base':'nj','letters':/[\\u01CC]/g},\n    {'base':'o', 'letters':/[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g},\n    {'base':'oi','letters':/[\\u01A3]/g},\n    {'base':'ou','letters':/[\\u0223]/g},\n    {'base':'oo','letters':/[\\uA74F]/g},\n    {'base':'p','letters':/[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g},\n    {'base':'q','letters':/[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g},\n    {'base':'r','letters':/[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g},\n    {'base':'s','letters':/[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g},\n    {'base':'t','letters':/[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g},\n    {'base':'tz','letters':/[\\uA729]/g},\n    {'base':'u','letters':/[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g},\n    {'base':'v','letters':/[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g},\n    {'base':'vy','letters':/[\\uA761]/g},\n    {'base':'w','letters':/[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g},\n    {'base':'x','letters':/[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g},\n    {'base':'y','letters':/[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g},\n    {'base':'z','letters':/[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g}\n  ];\n\n  for(var i=0; i&lt;defaultDiacriticsRemovalMap.length; i++) {\n    str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);\n  }\n\n  return str;\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Simply should be normalized chain and run a replacement codes:</p>\n\n<pre><code>var str = \"Letras \u00c1 \u00c9 \u00cd \u00d3 \u00da \u00d1 - \u00e1 \u00e9 \u00ed \u00f3 \u00fa \u00f1...\";\nconsole.log (str.normalize (\"NFKD\").replace (/[\\u0300-\\u036F]/g, \"\"));\n// Letras A E I O U N - a e i o u n...\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\" rel=\"nofollow\">normalize</a></p>\n\n<p>Then you can use this function:</p>\n\n<pre><code>function noTilde (s) {\n    if (s.normalize != undefined) {\n        s = s.normalize (\"NFKD\");\n    }\n    return s.replace (/[\\u0300-\\u036F]/g, \"\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>For a poor man's implementation of <em>near</em>-collation-correct sorting on the client side I need a JavaScript function that does <em>efficient</em> single character replacement in a string.</p>\n\n<p>Here is what I mean (note that this applies to German text, other languages sort differently):</p>\n\n<pre>\nnative sorting gets it wrong: a b c o u z \u00e4 \u00f6 \u00fc\ncollation-correct would be:   a \u00e4 b c o \u00f6 u \u00fc z\n</pre>\n\n<p>Basically, I need all occurrences of \"\u00e4\" of a given string replaced with \"a\" (and so on). This way the result of native sorting would be very close to what a user would expect (or what a database would return). </p>\n\n<p>Other languages have facilities to do just that: <a href=\"http://docs.python.org/3.1/library/stdtypes.html#str.translate\">Python supplies <code>str.translate()</code></a>, in <a href=\"http://perldoc.perl.org/functions/tr.html\">Perl there is <code>tr/\u2026/\u2026/</code></a>, <a href=\"http://www.w3.org/TR/xpath/#function-translate\">XPath has a function <code>translate()</code></a>, <a href=\"http://livedocs.adobe.com/coldfusion/8/functions_m-r_33.html\">ColdFusion has <code>ReplaceList()</code></a>. But what about JavaScript?</p>\n\n<p>Here is what I have right now.</p>\n\n<pre><code>// s would be a rather short string (something like \n// 200 characters at max, most of the time much less)\nfunction makeSortString(s) {\n  var translate = {\n    \"\u00e4\": \"a\", \"\u00f6\": \"o\", \"\u00fc\": \"u\",\n    \"\u00c4\": \"A\", \"\u00d6\": \"O\", \"\u00dc\": \"U\"   // probably more to come\n  };\n  var translate_re = /[\u00f6\u00e4\u00fc\u00d6\u00c4\u00dc]/g;\n  return ( s.replace(translate_re, function(match) { \n    return translate[match]; \n  }) );\n}\n</code></pre>\n\n<p>For starters, I don't like the fact that the regex is rebuilt every time I call the function. I guess a closure can help in this regard, but I don't seem to get the hang of it for some reason.</p>\n\n<p>Can someone think of something more efficient?</p>\n",
            "last_activity_date": 1404340006,
            "question_id": 286921,
            "score": 39,
            "tags": [
                "javascript",
                "sorting",
                "string",
                "collation"
            ],
            "title": "Efficiently replace all accented characters in a string?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>JavaScript is your best bet.  The link below gives an example using buttons to de/select all.  You could try to adapt it to use a check box, just use you 'select all' check box' onClick attribute.</p>\n\n<p><a href=\"http://www.somacon.com/p117.php\" rel=\"nofollow\">Javascript Function to Check or Uncheck all Checkboxes</a></p>\n\n<p>This page has a simpler example</p>\n\n<p><a href=\"http://www.htmlcodetutorial.com/forms/_INPUT_onClick.html\" rel=\"nofollow\">http://www.htmlcodetutorial.com/forms/_INPUT_onClick.html</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;script language=\"JavaScript\"&gt;\nfunction toggle(source) {\n  checkboxes = document.getElementsByName('foo');\n  for each(var checkbox in checkboxes)\n    checkbox.checked = source.checked;\n}\n&lt;/script&gt;\n\n&lt;input type=\"checkbox\" onClick=\"toggle(this)\" /&gt; Toggle All&lt;br/&gt;\n\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar1\"&gt; Bar 1&lt;br/&gt;\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar2\"&gt; Bar 2&lt;br/&gt;\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar3\"&gt; Bar 3&lt;br/&gt;\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar4\"&gt; Bar 4&lt;br/&gt;\n</code></pre>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>The for each...in construct doesn't seem to work, at least in this case, in Safari 5 or Chrome 5. This code should work in all browsers:</p>\n\n<pre><code>function toggle(source) {\n  checkboxes = document.getElementsByName('foo');\n  for(var i=0, n=checkboxes.length;i&lt;n;i++) {\n    checkboxes[i].checked = source.checked;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 113
                },
                {
                    "body": "<p>Using <a href=\"http://jquery.com\">jQuery</a>:</p>\n\n<pre><code>// Listen for click on toggle checkbox\n$('#select-all').click(function(event) {   \n    if(this.checked) {\n        // Iterate each checkbox\n        $(':checkbox').each(function() {\n            this.checked = true;                        \n        });\n    }\n});\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input type=\"checkbox\" name=\"checkbox-1\" id=\"checkbox-1\" /&gt;\n&lt;input type=\"checkbox\" name=\"checkbox-2\" id=\"checkbox-2\" /&gt;\n&lt;input type=\"checkbox\" name=\"checkbox-3\" id=\"checkbox-3\" /&gt;\n\n&lt;!-- select all boxes --&gt;\n&lt;input type=\"checkbox\" name=\"select-all\" id=\"select-all\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>If adopting the top answer for jquery, remember that the object passed to the click function is an EventHandler, not the original checkbox object. Therefore code shoudl be modified as follows.</p>\n\n<p>Html</p>\n\n<pre><code>&lt;input type=\"selectThemAll\" /&gt; Toggle All&lt;br/&gt;\n\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar1\"&gt; Bar 1&lt;br/&gt;\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar2\"&gt; Bar 2&lt;br/&gt;\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar3\"&gt; Bar 3&lt;br/&gt;\n&lt;input type=\"checkbox\" name=\"foo\" value=\"bar4\"&gt; Bar 4&lt;br/&gt;\n</code></pre>\n\n<p>Javascript</p>\n\n<pre><code>jQuery(\"[name=selectThemAll]\").click(function(source) { \n    checkboxes = jQuery(\"[name=foo]\");\n    for(var i in checkboxes){\n        checkboxes[i].checked = source.target.checked;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;asp:CheckBox ID=\"CheckBox1\" runat=\"server\" Text=\"Select All\" onclick=\"checkAll(this);\" /&gt;\n&lt;br /&gt;\n&lt;asp:CheckBoxList ID=\"CheckBoxList1\" runat=\"server\"&gt;\n    &lt;asp:ListItem Value=\"Item 1\"&gt;Item 1&lt;/asp:ListItem&gt;\n    &lt;asp:ListItem Value=\"Item 2\"&gt;Item 2&lt;/asp:ListItem&gt;\n    &lt;asp:ListItem Value=\"Item 3\"&gt;Item 3&lt;/asp:ListItem&gt;\n    &lt;asp:ListItem Value=\"Item 4\"&gt;Item 4&lt;/asp:ListItem&gt;\n    &lt;asp:ListItem Value=\"Item 5\"&gt;Item 5&lt;/asp:ListItem&gt;\n    &lt;asp:ListItem Value=\"Item 6\"&gt;Item 6&lt;/asp:ListItem&gt;\n&lt;/asp:CheckBoxList&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    function checkAll(obj1) {\n        var checkboxCollection = document.getElementById('&lt;%=CheckBoxList1.ClientID %&gt;').getElementsByTagName('input');\n\n        for (var i = 0; i &lt; checkboxCollection.length; i++) {\n            if (checkboxCollection[i].type.toString().toLowerCase() == \"checkbox\") {\n                checkboxCollection[i].checked = obj1.checked;\n            }\n        }\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To make it deselect:</p>\n\n<pre><code>$('#select_all').click(function(event) {\n  if(this.checked) {\n      // Iterate each checkbox\n      $(':checkbox').each(function() {\n          this.checked = true;\n      });\n  }\n  else {\n    $(':checkbox').each(function() {\n          this.checked = false;\n      });\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Demo <a href=\"http://jsfiddle.net/H37cb/\">http://jsfiddle.net/H37cb/</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-latest.min.js\" /&gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function(){\n\n$('input[name=\"all\"],input[name=\"title\"]').bind('click', function(){\nvar status = $(this).is(':checked');\n$('input[type=\"checkbox\"]', $(this).parent('li')).attr('checked', status);\n});\n\n});\n&lt;/script&gt;\n\n\n\n\n&lt;div id=\"wrapper\"&gt;\n &lt;li style=\"margin-top: 20px\"&gt;\n  &lt;input type=\"checkbox\" name=\"all\" id=\"all\" /&gt; &lt;label for='all'&gt;All&lt;/label&gt;\n  &lt;ul&gt;\n   &lt;li&gt;&lt;input type=\"checkbox\" name=\"title\" id=\"title_1\" /&gt; &lt;label for=\"title_1\"&gt;&lt;strong&gt;Title 01&lt;/strong&gt;&lt;/label&gt;\n    &lt;ul&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_1\" value=\"1\" /&gt; &lt;label for=\"box_1\"&gt;Sub Title 01&lt;/label&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_2\" value=\"2\" /&gt; &lt;label for=\"box_2\"&gt;Sub Title 02&lt;/label&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_3\" value=\"3\" /&gt; &lt;label for=\"box_3\"&gt;Sub Title 03&lt;/label&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_4\" value=\"4\" /&gt; &lt;label for=\"box_4\"&gt;Sub Title 04&lt;/label&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n   &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul&gt;\n   &lt;li&gt;&lt;input type=\"checkbox\" name=\"title\" id=\"title_2\" /&gt; &lt;label for=\"title_2\"&gt;&lt;strong&gt;Title 02&lt;/strong&gt;&lt;/label&gt;\n    &lt;ul&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_5\" value=\"5\" /&gt; &lt;label for=\"box_5\"&gt;Sub Title 05&lt;/label&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_6\" value=\"6\" /&gt; &lt;label for=\"box_6\"&gt;Sub Title 06&lt;/label&gt;&lt;/li&gt;\n     &lt;li&gt;&lt;input type=\"checkbox\" name=\"selected[]\" id=\"box_7\" value=\"7\" /&gt; &lt;label for=\"box_7\"&gt;Sub Title 07&lt;/label&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n   &lt;/li&gt;\n  &lt;/ul&gt;\n &lt;/li&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\n\n    function do_this(){\n\n        var checkboxes = document.getElementsByName('approve[]');\n        var button = document.getElementById('toggle');\n\n        if(button.value == 'select'){\n            for (var i in checkboxes){\n                checkboxes[i].checked = 'FALSE';\n            }\n            button.value = 'deselect'\n        }else{\n            for (var i in checkboxes){\n                checkboxes[i].checked = '';\n            }\n            button.value = 'select';\n        }\n    }\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;input type=\"checkbox\" name=\"approve[]\" value=\"1\" /&gt;\n&lt;input type=\"checkbox\" name=\"approve[]\" value=\"2\" /&gt;\n&lt;input type=\"checkbox\" name=\"approve[]\" value=\"3\" /&gt;\n\n&lt;input type=\"button\" id=\"toggle\" value=\"select\" onClick=\"do_this()\" /&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>that should do the job done:</p>\n\n<pre><code>    $(':checkbox').each(function() {\n        this.checked = true;                        \n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm not sure anyone hasn't answered in this way (using <a href=\"http://jquery.com/\">jQuery</a>):</p>\n\n<pre><code>  $( '#container .toggle-button' ).click( function () {\n    $( '#container input[type=\"checkbox\"]' ).prop('checked', this.checked)\n  })\n</code></pre>\n\n<p>It's clean, has no loops or if/else clauses and works as a charm.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This code will select all and deselect all</p>\n\n<pre><code> $(function(){\n   $('#select-all').click(function(event) {   \n        if(this.checked) {\n            // Iterate each checkbox\n            $(':checkbox').each(function() {\n                this.checked = true;                        \n            });\n        }\n        if(!this.checked) {\n            // Iterate each checkbox\n            $(':checkbox').each(function() {\n                this.checked = false;                        \n            });\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Slightly changed version which checks and unchecks respectfully</p>\n\n<pre><code>$('#select-all').click(function(event) {\n        var $that = $(this);\n        $(':checkbox').each(function() {\n            this.checked = $that.is(':checked');\n        });\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>When you call <code>document.getElementsByName(\"name\")</code>, you will get a <code>Object</code>. Use <code>.item(index)</code> to traverse all items of a <code>Object</code></p>\n\n<p>HTML:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input type=\"checkbox\" onclick=\"for(c in document.getElementsByName('rfile')) document.getElementsByName('rfile').item(c).checked = this.checked\"&gt;\n\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bcgi-bin/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bincludes/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bmisc/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bmodules/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bprofiles/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bscripts/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bsites/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bstats/\u200b\"&gt;\u200b\n&lt;input type=\u200b\"checkbox\" name=\u200b\"rfile\" value=\u200b\"/\u200bthemes/\u200b\"&gt;\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This jquery code work to check and uncheck all, the target to active must have #checkAll</p>\n\n<pre><code>$('#checkAll').click(function(event) {   \n if(this.checked) {\n     $(':checkbox').each(function() {\n        this.checked = true;                        \n     });\n }\n else{\n     $(':checkbox').each(function(){\n        this.checked = false;\n     });\n }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>$(document).ready(function() {\n                $(document).on(' change', 'input[name=\"check_all\"]', function() {\n                    $('.cb').prop(\"checked\", this.checked);\n                });\n            });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have an HTML page with multiple checkboxes.</p>\n\n<p>I need one more checkbox by the name \"select all\". When I select this checkbox all checkboxes in the HTML page must be selected. How can I do this?</p>\n",
            "last_activity_date": 1415528905,
            "question_id": 386281,
            "score": 65,
            "tags": [
                "javascript",
                "html",
                "checkbox",
                "selectall"
            ],
            "title": "How to implement &quot;select all&quot; check box in HTML?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>As far as I know you can't do that, I may be wrong. However I'd do this with php, generate a JPEG using php standard functions and then display the image, should not be a very hard job, however depends on how flashy the contents of the DIV are</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As far as I know its not possible with javascript.</p>\n\n<p>What you can do for every result create a screenshot, save it somewhere and point the user when clicked on save result. (I guess no of result is only 10 so not a big deal to create 10 jpeg image of results) </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>No, I don't know of a way to 'screenshot' an element, but what you could do, is draw the quiz results into a canvas element, then use the <code>HTMLCanvasElement</code> object's <code>toDataURL</code> function to get a <code>data:</code> URI with the image's contents.</p>\n\n<p>When the quiz is finished, do this:</p>\n\n<pre><code>var c = document.getElementById('the_canvas_element_id');\nvar t = c.getContext('2d');\n/* then use the canvas 2D drawing functions to add text, etc. for the result */\n</code></pre>\n\n<p>When the user clicks \"Capture\", do this:</p>\n\n<pre><code>window.open('', document.getElementById('the_canvas_element_id').toDataURL());\n</code></pre>\n\n<p>This will open a new tab or window with the 'screenshot', allowing the user to save it. There is no way to invoke a 'save as' dialog of sorts, so this is the best you can do in my opinion.</p>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>You can't take a screen-shot: it would be an irresponsible security risk to let you do so. However, you can:</p>\n\n<ul>\n<li>Do things server-side and generate an image</li>\n<li>Draw something similar to a Canvas and render that to an image (in a browser that supports it)</li>\n<li>Use some other drawing library to draw directly to the image (slow, but would work on any browser)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Have a look at <a href=\"http://www.phantomjs.org/\" rel=\"nofollow\">http://www.phantomjs.org/</a> . Using it you could generate a full image of the HTML page on the serverside, and give the user a link to download.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Check out html2canvas - Screenshots with JavaScript: <a href=\"http://html2canvas.hertzen.com/\">http://html2canvas.hertzen.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>You can take a screenshot of a HTML element with <a href=\"http://grabz.it/api/javascript/\" rel=\"nofollow\">GrabIt's JavaScript API</a>, however the screenshot generation is done on the server side so you would need to pass GrabzIt a URL that recreated the Result div.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is an expansion of @Dathan's <a href=\"http://stackoverflow.com/a/6887750/189134\">answer</a>, using <a href=\"http://html2canvas.hertzen.com/\">html2canvas</a> and <a href=\"https://github.com/eligrey/FileSaver.js/\">FileSaver.js</a>.</p>\n\n<pre><code>$(function() { \n    $(\"#btnSave\").click(function() { \n        html2canvas($(\"#widget\"), {\n            onrendered: function(canvas) {\n                theCanvas = canvas;\n\n\n                canvas.toBlob(function(blob) {\n                    saveAs(blob, \"Dashboard.png\"); \n                });\n            }\n        });\n    });\n});\n</code></pre>\n\n<p>This code block waits for the button with the id <code>btnSave</code> to be clicked. When it is, it converts the <code>widget</code> div to a canvas element and then uses the saveAs() FileSaver interface (via FileSaver.js in browsers that don't support it natively) to save the div as an image named \"Dashboard.png\". </p>\n\n<p>An example of this working is available at this <a href=\"http://jsfiddle.net/6FZkk/1/\">fiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you wish to have \"Save as\" dialog, just pass image into php script, which adds appropriate headers</p>\n\n<p>Example \"all-in-one\" script <code>script.php</code></p>\n\n<pre><code>&lt;?php if(isset($_GET['image'])):\n    $image = $_GET['image'];\n\n    if(preg_match('#^data:image/(.*);base64,(.*)$#s', $image, $match)){\n        $base64 = $match[2];\n        $imageBody = base64_decode($base64);\n        $imageFormat = $match[1];\n\n        header('Content-type: application/octet-stream');\n        header(\"Pragma: public\");\n        header(\"Expires: 0\");\n        header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n        header(\"Cache-Control: private\", false); // required for certain browsers\n        header(\"Content-Disposition: attachment; filename=\\\"file.\".$imageFormat.\"\\\";\" ); //png is default for toDataURL\n        header(\"Content-Transfer-Encoding: binary\");\n        header(\"Content-Length: \".strlen($imageBody));\n        echo $imageBody;\n    }\n    exit();\nendif;?&gt;\n\n&lt;script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=1.7.2'&gt;&lt;/script&gt;\n&lt;canvas id=\"canvas\" width=\"300\" height=\"150\"&gt;&lt;/canvas&gt;\n&lt;button id=\"btn\"&gt;Save&lt;/button&gt;\n&lt;script&gt;\n    $(document).ready(function(){\n        var canvas = document.getElementById('canvas');\n        var oCtx = canvas.getContext(\"2d\");\n        oCtx.beginPath();\n        oCtx.moveTo(0,0);\n        oCtx.lineTo(300,150);\n        oCtx.stroke();\n\n        $('#btn').on('click', function(){\n            // opens dialog but location doesnt change due to SaveAs Dialog\n            document.location.href = '/script.php?image=' + canvas.toDataURL();\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am building something called the \"HTML Quiz\" It's completely ran on JavaScript and it's pretty cool.</p>\n\n<p>At the end, a results box pops up that says \"Your Results:\" and it shows how much time they took, what percentage that got and how much questions they got right out of 10. I would like to have a button that says \"Capture results\" and it can somehow take a screenshot or something of the div, and then it will just show the image captured on the page and they can right click and click \"Save image as\" </p>\n\n<p>It would be so awesome if I could do this. I really would love to do this so they can share their results with others. (I don't want them to \"copy\" the results because they can easily change that. If they change what it says in the image, oh well.)</p>\n\n<p>Does anyone know a way to do this or something similar? </p>\n",
            "last_activity_date": 1420370730,
            "question_id": 6887183,
            "score": 45,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "How to take screen shot of a div with JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You can achieve this by running your version of jQuery in <a href=\"http://docs.jquery.com/Using_jQuery_with_Other_Libraries\">no-conflict mode</a>. \"No conflict\" mode is the typical solution to get jQuery working on a page with other frameworks like <a href=\"http://www.prototypejs.org/\">prototype</a>, and can be also be used here as it essentially namespaces each version of jQuery which you load.</p>\n\n<pre><code>&lt;script src=\"jQuery1.3.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    jq13 = jQuery.noConflict(true);\n&lt;/script&gt;\n\n&lt;!-- original author's jquery version --&gt;\n&lt;script src=\"jQuery1.2.3.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This change will mean that any of the jQuery stuff you want to use will need to be called using <code>jq13</code> rather than <code>$</code>, e.g.</p>\n\n<pre><code>jq13(\"#id\").hide();\n</code></pre>\n\n<p>It's not an ideal situation to have the two versions running on the same page, but if you've no alternative, then the above method should allow you to use two differing versions at once.</p>\n\n<blockquote>\n  <p>Also out of curiosity, what if we were to use an additional control \n      that needed to reference yet another version of jQuery?</p>\n</blockquote>\n\n<p>If you needed to add another version of jQuery, you could expand on the above:</p>\n\n<pre><code>&lt;script src=\"jQuery1.3.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    jq13 = jQuery.noConflict(true);\n&lt;/script&gt;\n&lt;script src=\"jQuery1.3.1.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    jq131 = jQuery.noConflict(true);\n&lt;/script&gt;\n\n&lt;!-- original author's jquery version --&gt;\n&lt;script src=\"jQuery1.2.3.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The variables <code>jq13</code> and <code>jq131</code> would each be used for the version-specific features you require. </p>\n\n<p>It's important that the <strong>jQuery used by the original developer is loaded last</strong> - the original developer likely wrote their code under the assumption that <code>$()</code> would be using their jQuery version. If you load another version after theirs, the <code>$</code> will be \"grabbed\" by the last version you load, which would mean the original developer's code running on the latest library version, rendering the <code>noConflicts</code> somewhat redundant!</p>\n",
                    "is_accepted": true,
                    "score": 84
                },
                {
                    "body": "<p>It seems like the order doesn't matter... for example: <a href=\"http://gist.github.com/136686\" rel=\"nofollow\">http://gist.github.com/136686</a>. The console output is at the top and all the versions seem to be in the right places.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As said ConroyP you can do this with <code>jQuery.noConflict</code> but don't forget <code>var</code> when declaring variable.\nLike this.</p>\n\n<pre><code>&lt;script src=\"jQuery1.3.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    var jq13 = jQuery.noConflict(true);\n&lt;/script&gt;\n\n&lt;!-- original author's jquery version --&gt;\n&lt;script src=\"jQuery1.2.3.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You can connect all $'s to jq13 by adding (jq13) after function's <code>})</code>. like this</p>\n\n<pre><code>(function($) {\n ... \n})(jq13); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>In the second version declare a variable as $.noConflict(true). And use the declared variable in place of $ used in the jquery code. Please check the below code : This code is used after the declaration of second versions of jquery:</p>\n\n<p>\nvar jQuery_1_9_1 = $.noConflict(true); function pageLoad(sender, args) {</p>\n\n<pre><code>    var $ddl = jQuery_1_9_1(\"select[name$=drpClassCode]\");\n    var $ddl1 = jQuery_1_9_1(\"select[name$=drpSubContractors]\");\n    $ddl.select2();\n    $ddl1.select2();\n\n    $ddl.bind(\"change keyup\", function () {\n        $ddl.fadeIn(\"slow\");\n\n\n    });\n\n    $ddl.bind(\"change keyup\", function () {\n        $ddl1.fadeIn(\"slow\");\n\n\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>My company has purchased a product that renders an ASP.NET control on the page. This control uses jQuery 1.2.3 and adds a script tag to the page to reference it. The developers of the control will not support use of the control if it modified in any way (including modification to reference a different version of jQuery).</p>\n\n<p>I'm about to start development of my own control and would like to use the features and speed improvements of jQuery 1.3. Both of these controls will need to exist on the same page.</p>\n\n<p>How can I allow the purchased control to use jQuery 1.2.3 and new custom development to use jQuery 1.3? Also out of curiosity, what if we were to use an additional control that needed to reference yet another version of jQuery?</p>\n",
            "last_activity_date": 1391767134,
            "question_id": 528241,
            "score": 54,
            "tags": [
                "asp.net",
                "javascript",
                "jquery"
            ],
            "title": "How do I run different versions of jQuery on the same page?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>jQuery Version</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(function() {\n        $('#bookmarkme').click(function() {\n            if (window.sidebar &amp;&amp; window.sidebar.addPanel) { // Mozilla Firefox Bookmark\n                window.sidebar.addPanel(document.title,window.location.href,'');\n            } else if(window.external &amp;&amp; ('AddFavorite' in window.external)) { // IE Favorite\n                window.external.AddFavorite(location.href,document.title); \n            } else if(window.opera &amp;&amp; window.print) { // Opera Hotlist\n                this.title=document.title;\n                return true;\n            } else { // webkit - safari/chrome\n                alert('Press ' + (navigator.userAgent.toLowerCase().indexOf('mac') != - 1 ? 'Command/Cmd' : 'CTRL') + ' + D to bookmark this page.');\n            }\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a id=\"bookmarkme\" href=\"#\" rel=\"sidebar\" title=\"bookmark this page\"&gt;Bookmark This Page&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 44
                },
                {
                    "body": "<pre><code>  if (window.sidebar) { // Mozilla Firefox Bookmark\n     window.sidebar.addPanel(document.title,location.href,\"\");\n</code></pre>\n\n<p>It adds the bookmark but in the sidebar.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This code is the corrected version of iambriansreed's answer:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(function() {\n        $(\"#bookmarkme\").click(function() {\n            // Mozilla Firefox Bookmark\n            if ('sidebar' in window &amp;&amp; 'addPanel' in window.sidebar) { \n                window.sidebar.addPanel(location.href,document.title,\"\");\n            } else if( /*@cc_on!@*/false) { // IE Favorite\n                window.external.AddFavorite(location.href,document.title); \n            } else { // webkit - safari/chrome\n                alert('Press ' + (navigator.userAgent.toLowerCase().indexOf('mac') != - 1 ? 'Command/Cmd' : 'CTRL') + ' + D to bookmark this page.');\n            }\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I have faced some problems with rel=\"sidebar\". when I add it in link tag bookmarking will work on FF but stop working in other browser. so I fix that by adding rel=\"sidebar\" dynamic by code:</p>\n\n<pre><code>jQuery('.bookmarkMeLink').click(function() {\n    if (window.sidebar &amp;&amp; window.sidebar.addPanel) { \n        // Mozilla Firefox Bookmark\n        window.sidebar.addPanel(document.title,window.location.href,'');\n    }\n    else if(window.sidebar &amp;&amp; jQuery.browser.mozilla){\n        //for other version of FF add rel=\"sidebar\" to link like this:\n        //&lt;a id=\"bookmarkme\" href=\"#\" rel=\"sidebar\" title=\"bookmark this page\"&gt;Bookmark This Page&lt;/a&gt;\n        jQuery(this).attr('rel', 'sidebar');\n    }\n    else if(window.external &amp;&amp; ('AddFavorite' in window.external)) { \n        // IE Favorite\n        window.external.AddFavorite(location.href,document.title); \n    } else if(window.opera &amp;&amp; window.print) { \n        // Opera Hotlist\n        this.title=document.title;\n        return true;\n    } else { \n        // webkit - safari/chrome\n        alert('Press ' + (navigator.userAgent.toLowerCase().indexOf('mac') != - 1 ? 'Command/Cmd' : 'CTRL') + ' + D to bookmark this page.');\n\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm building a website using Drupal. On the header of each page I want to have a single image (custom designed by me) which would act as a custom \"Add to Favorites\" button. Clicking on the image should add the website's URL to the user browser's favorites (bookmarks). This should work for all browsers, IE7+, FF, Opera, Chrome.\nI wasn't able to find much information for this online. I suppose that javascript should do the job but I don't have much experience in Javascript :) so I need your help!</p>\n",
            "last_activity_date": 1417810115,
            "question_id": 10033215,
            "score": 24,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "bookmarks"
            ],
            "title": "How do I add an &quot;Add to Favorites&quot; button or link on my website?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Absolutly no difference. FREE QUOTING YEEHHAAA</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>They are the same, I usually use single quotes but thats because I am a .net developer and asp.net in particular so it aids me in distinguishing between the 2 types of strings.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You'll want to use single quotes where you want double quotes to appear inside the string (e.g. for html attributes) without having to escape them, or vice versa. Other than that, there is no difference.</p>\n",
                    "is_accepted": true,
                    "score": 73
                },
                {
                    "body": "<p>There is a difference in JSON, so I have started switching to using double-quotes as much as possible so that I don't make mistakes when dealing with JSON.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I just found a difference.  I'm making a mobile website, but I've mostly been testing on desktop Firefox.  This works fine on Firefox:</p>\n\n<pre><code>var searchArray = searchValue.split(' '); // Split a string at the spaces.\n</code></pre>\n\n<p>BUT... it doesn't work on mobile Safari (iPhone 3GS running iOS 6.1).  To make it work on mobile Safari, you have to use double quotes:</p>\n\n<pre><code>var searchArray = searchValue.split(\" \"); // Split a string at the spaces.\n</code></pre>\n\n<p>If you don't use double quotes, it doesn't split, it just puts the whole string into the first array element.  That was a real puzzler for me and took quite a while to figure out; I dunno what even made me try switching the quotes, because I thought they were always supposed to act the same way.  I haven't found anything on this problem by googling, so maybe this will help someone.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<blockquote>\n  <p>Unlike PHP, for which using double or single quotes changes how the\n  string is interpreted, there is  no difference in the two syntaxes in\n  ECMAScript. A string using double quotes is exactly the same as a\n  string using single quotes. Note, however, that a string beginning\n  with a double quote must end  with a double quote, and a string\n  beginning with a single quote must end with a single quote.</p>\n</blockquote>\n\n<p>Nicholas C. Zakas - Professional JavaScript for Web Developers </p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I know that in PHP, the only difference between double quotes and single quotes is the interpretation of variable inside a string and the treatment of escape characters.</p>\n\n<p>In JavaScript, I often see double quotes used in strings. Is there a particular reason for that, or are single quotes exactly the same as double quotes?</p>\n",
            "last_activity_date": 1376975566,
            "question_id": 3149192,
            "score": 66,
            "tags": [
                "javascript",
                "quotes"
            ],
            "title": "Difference between single quotes and double quotes in Javascript"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>There are several prototype libraries out there that take the pain out of array functionality.</p>\n\n<p>Try this one for many common array functions:</p>\n\n<p><a href=\"http://www.svendtofte.com/code/usefull_prototypes/\" rel=\"nofollow\">http://www.svendtofte.com/code/usefull_prototypes/</a></p>\n\n<p>After including the script, you will be able to call the following:</p>\n\n<pre><code>var array1 = [1,2,3];\nvar array2 = [1,2,3];\nvar equal = array1.compareArrays(array2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Based on Tim James <a href=\"http://stackoverflow.com/a/5115066/28810\">answer</a> and Fox32's comment, the following should check for nulls, with the assumption that two nulls are not equal.</p>\n\n<pre><code>function arrays_equal(a,b) { return !!a &amp;&amp; !!b &amp;&amp; !(a&lt;b || b&lt;a); }\n\n&gt; arrays_equal([1,2,3], [1,3,4])\nfalse\n&gt; arrays_equal([1,2,3], [1,2,3])\ntrue\n&gt; arrays_equal([1,3,4], [1,2,3])\nfalse\n&gt; arrays_equal(null, [1,2,3])\nfalse\n&gt; arrays_equal(null, null)\nfalse\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Option 1</strong></p>\n\n<p>Easiest option, works in almost all cases, except that <code>null</code>!==<code>undefined</code> but they both are converted to JSON representation <code>null</code> and considered equal:</p>\n\n<pre><code>function arraysEqual(a1,a2) {\n    return JSON.stringify(a1)==JSON.stringify(a2);\n}\n</code></pre>\n\n<p>Even works if your arrays contain objects! Normally <code>({1:2}) != ({1:2})</code>, but this method will consider them to be equal, so arbitrary expressions like <code>arrayEquals([{1:[]},2], [{1:[]},2])</code> will work, even (if you allow it) <code>arrayEquals(1,2)</code> or <code>arrayEquals({1:2},{1:2})</code>.</p>\n\n<p>(Whether this still works with objects depends on whether the JSON implementation sorts keys, however. The JSON of <code>{1:2,3:4}</code> may or may not be equal to <code>{3:4,1:2}</code> and the like, depending on the implementation. It at least seems to work in Chrome. If you choose not to use objects in your lists, this should work fine.)</p>\n\n<hr>\n\n<p><strong>Option 2</strong></p>\n\n<p>More \"proper\" option, which works with nested arrays (and which you can override to deal with special cases, like regular objects and null/undefined and custom objects, if you so desire):</p>\n\n<pre><code>// generally useful functions\nfunction type(x) {\n    // e.g.  type(/asdf/g) --&gt; \"[object RegExp]\"\n    return Object.prototype.toString.call(x);\n}\nfunction zip(arrays) {\n    // e.g. zip([[1,2,3],[4,5,6]]) --&gt; [[1,4],[2,5],[3,6]]\n    return arrays[0].map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n</code></pre>\n\n<p>&nbsp;</p>\n\n<pre><code>// helper functions\nfunction allCompareEqual(array) {\n    // e.g.  allCompareEqual([2,2,2,2]) --&gt; true\n    // does not work with nested arrays or objects\n    return array.every(function(x){return x==array[0]});\n}\n\nfunction isArray(x){ return type(x)==type([]) }\nfunction getLength(x){ return x.length }\nfunction allTrue(array){ return array.reduce(function(a,b){return a&amp;&amp;b},true) }\n    // e.g. allTrue([true,true,true,true]) --&gt; true\n    // or just array.every(function(x){return x});\n</code></pre>\n\n<p>&nbsp;</p>\n\n<pre><code>function allDeepEqual(things) {\n    // works with nested arrays\n    if( things.every(isArray) )\n        return allCompareEqual(things.map(getLength))     // all arrays of same length\n               &amp;&amp; allTrue(zip(things).map(allDeepEqual)); // elements recursively equal\n\n    //else if( this.every(isObject) )\n    //  return {all have exactly same keys, and for \n    //          each key k, allDeepEqual([o1[k],o2[k],...])}\n    //  e.g. ... &amp;&amp; allTrue(objectZip(objects).map(allDeepEqual)) \n\n    //else if( ... )\n    //  extend some more\n\n    else\n        return allCompareEqual(things);\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>allDeepEqual([ [], [], [] ])\ntrue\nallDeepEqual([ [1], [1], [1] ])\ntrue\nallDeepEqual([ [1,2], [1,2] ])\ntrue\nallDeepEqual([ [[1,2],[3]], [[1,2],[3]] ])\ntrue\n\nallDeepEqual([ [1,2,3], [1,2,3,4] ])\nfalse\nallDeepEqual([ [[1,2],[3]], [[1,2],[],3] ])\nfalse\nallDeepEqual([ [[1,2],[3]], [[1],[2,3]] ])\nfalse\nallDeepEqual([ [[1,2],3], [1,[2,3]] ])\nfalse\n</code></pre>\n\n<p>To use this like a regular function, do:</p>\n\n<pre><code>function allDeepEqual2() {\n    return allDeepEqual([].slice.call(arguments));\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>allDeepEqual2([[1,2],3], [[1,2],3])\ntrue\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Even if this would seem super simple, sometimes it's really useful. If all you need is to see if two arrays have the same items and they are in the same order, try this:</p>\n\n<pre><code>[1, 2, 3].toString() == [1, 2, 3].toString()\ntrue\n[1, 2, 3,].toString() == [1, 2, 3].toString()\ntrue\n[1,2,3].toString() == [1, 2, 3].toString()\ntrue\n</code></pre>\n\n<p>However, this doesn't work for mode advanced cases such as:</p>\n\n<pre><code>[[1,2],[3]].toString() == [[1],[2,3]].toString()\ntrue\n</code></pre>\n\n<p>It depends what you need.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>This method sucks, but I've left it here for reference so others avoid this path:</strong></p>\n\n<hr>\n\n<p>Using Option 1 from @ninjagecko worked best for me:</p>\n\n<pre><code>Array.prototype.equals = function(array) {\n    return array instanceof Array &amp;&amp; JSON.stringify(this) === JSON.stringify(array) ;\n}\n\na = [1, [2, 3]]\na.equals([[1, 2], 3]) // false\na.equals([1, [2, 3]]) // true\n</code></pre>\n\n<p>It will also handle the null and undefined case, since we're adding this to the prototype of array and checking that the other argument is also an array.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>jQuery has such method <a href=\"http://docs.jquery.com/QUnit/deepEqual\" rel=\"nofollow\">for deep recursive comparison</a>.</p>\n\n<p>A homegrown general purpose <strong>strict equality</strong> check could look as follows:</p>\n\n<pre><code>function deepEquals(obj1, obj2, parents1, parents2) {\n    \"use strict\";\n    var i;\n    // compare null and undefined\n    if (obj1 === undefined || obj2 === undefined || \n        obj1 === null || obj2 === null) {\n        return obj1 === obj2;\n    }\n\n    // compare primitives\n    if (typeof (obj1) !== 'object' || typeof (obj2) !== 'object') {\n        return obj1.valueOf() === obj2.valueOf();\n    }\n\n    // if objects are of different types or lengths they can't be equal\n    if (obj1.constructor !== obj2.constructor || (obj1.length !== undefined &amp;&amp; obj1.length !== obj2.length)) {\n        return false;\n    }\n\n    // iterate the objects\n    for (i in obj1) {\n        // build the parents list for object on the left (obj1)\n        if (parents1 === undefined) parents1 = [];\n        if (obj1.constructor === Object) parents1.push(obj1);\n        // build the parents list for object on the right (obj2)\n        if (parents2 === undefined) parents2 = [];\n        if (obj2.constructor === Object) parents2.push(obj2);\n        // walk through object properties\n        if (obj1.propertyIsEnumerable(i)) {\n            if (obj2.propertyIsEnumerable(i)) {\n                // if object at i was met while going down here\n                // it's a self reference\n                if ((obj1[i].constructor === Object &amp;&amp; parents1.indexOf(obj1[i]) &gt;= 0) || (obj2[i].constructor === Object &amp;&amp; parents2.indexOf(obj2[i]) &gt;= 0)) {\n                    if (obj1[i] !== obj2[i]) {\n                        return false;\n                    }\n                    continue;\n                }\n                // it's not a self reference so we are here\n                if (!deepEquals(obj1[i], obj2[i], parents1, parents2)) {\n                    return false;\n                }\n            } else {\n                // obj2[i] does not exist\n                return false;\n            }\n        }\n    }\n    return true;\n};\n</code></pre>\n\n<p>Tests:</p>\n\n<pre><code>// message is displayed on failure\n// clean console === all tests passed\nfunction assertTrue(cond, msg) {\n    if (!cond) {\n        console.log(msg);\n    }\n}\n\nvar a = 'sdf',\n    b = 'sdf';\nassertTrue(deepEquals(b, a), 'Strings are equal.');\nb = 'dfs';\nassertTrue(!deepEquals(b, a), 'Strings are not equal.');\na = 9;\nb = 9;\nassertTrue(deepEquals(b, a), 'Numbers are equal.');\nb = 3;\nassertTrue(!deepEquals(b, a), 'Numbers are not equal.');\na = false;\nb = false;\nassertTrue(deepEquals(b, a), 'Booleans are equal.');\nb = true;\nassertTrue(!deepEquals(b, a), 'Booleans are not equal.');\na = null;\nassertTrue(!deepEquals(b, a), 'Boolean is not equal to null.');\na = function () {\n    return true;\n};\nassertTrue(deepEquals(\n[\n    [1, 1, 1],\n    [2, 'asdf', [1, a]],\n    [3, {\n        'a': 1.0\n    },\n    true]\n], \n[\n    [1, 1, 1],\n    [2, 'asdf', [1, a]],\n    [3, {\n        'a': 1.0\n    },\n    true]\n]), 'Arrays are equal.');\nassertTrue(!deepEquals(\n[\n    [1, 1, 1],\n    [2, 'asdf', [1, a]],\n    [3, {\n        'a': 1.0\n    },\n    true]\n],\n[\n    [1, 1, 1],\n    [2, 'asdf', [1, a]],\n    [3, {\n        'a': '1'\n    },\n    true]\n]), 'Arrays are not equal.');\na = {\n    prop: 'val'\n};\na.self = a;\nb = {\n    prop: 'val'\n};\nb.self = a;\nassertTrue(deepEquals(b, a), 'Immediate self referencing objects are equal.');\na.prop = 'shmal';\nassertTrue(!deepEquals(b, a), 'Immediate self referencing objects are not equal.');\na = {\n    prop: 'val',\n    inside: {}\n};\na.inside.self = a;\nb = {\n    prop: 'val',\n    inside: {}\n};\nb.inside.self = a;\nassertTrue(deepEquals(b, a), 'Deep self referencing objects are equal.');\nb.inside.self = b;\nassertTrue(!deepEquals(b, a), 'Deep self referencing objects are not equeal. Not the same instance.');\nb.inside.self = {foo: 'bar'};\nassertTrue(!deepEquals(b, a), 'Deep self referencing objects are not equal. Completely different object.');\na = {};\nb = {};\na.self = a;\nb.self = {};\nassertTrue(!deepEquals(b, a), 'Empty object and self reference of an empty object.');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>a = [1,2,3]</p>\n\n<p>b = [3,2,1]</p>\n\n<p>a.sort().toString() == b.sort().toString() </p>\n\n<p>seems to be an easy solution too</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>jQuery does not have a method for comparing arrays. However the <a href=\"http://underscorejs.org/\">Underscore library</a> does have such a method: <a href=\"http://underscorejs.org/#isEqual\">isEqual</a>, and it can handle a variety of other cases (like object literals) as well. To stick to the provided example:</p>\n\n<pre><code>var a=[1,2,3];\nvar b=[3,2,1];\nvar c=new Array(1,2,3);\n\nalert(_.isEqual(a, b) + \"|\" + _.isEqual(b, c));\n</code></pre>\n\n<p>By the way: Underscore has lots of other methods that jQuery is missing as well, so it's a great complement to jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>This is what you should do. Please don't use <code>stringify</code> nor <code>&lt; &gt;</code>.</p>\n\n<pre><code>function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length != b.length) return false;\n\n  // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n\n  for (var i = 0; i &lt; a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 96
                },
                {
                    "body": "<p>With JavaScript version 1.6 it's as easy as this:</p>\n\n<pre><code>Array.prototype.equals = function( array ) {\n  return this.length == array.length &amp;&amp; \n         this.every( function(this_i,i) { return this_i == array[i] } )  \n  }\n</code></pre>\n\n<p>For example, <code>[].equals([])</code> gives <code>true</code>, while <code>[1,2,3].equals( [1,3,2] )</code> yields <code>false</code>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is no easy way to do this. I needed this as well, but wanted a function that can take any two variables and test for equality. That includes non-object values, objects, arrays and any level of nesting. </p>\n\n<p>In your question, you mention wanting to ignore the order of the values in an array. My solution doesn't inherently do that, but you can achieve it by sorting the arrays before comparing for equality</p>\n\n<p>I also wanted the option of casting non-objects to strings so that [1,2]===[\"1\",2]</p>\n\n<p>Since my project uses UnderscoreJs, I decided to make it a mixin rather than a standalone function. </p>\n\n<p>You can test it out on <a href=\"http://jsfiddle.net/nemesarial/T44W4/\" rel=\"nofollow\">http://jsfiddle.net/nemesarial/T44W4/</a></p>\n\n<p>Here is my mxin:</p>\n\n<pre><code>_.mixin({\n  /**\n  Tests for the equality of two variables\n    valA: first variable\n    valB: second variable\n    stringifyStatics: cast non-objects to string so that \"1\"===1\n  **/\n  equal:function(valA,valB,stringifyStatics){\n    stringifyStatics=!!stringifyStatics;\n\n    //check for same type\n    if(typeof(valA)!==typeof(valB)){\n      if((_.isObject(valA) || _.isObject(valB))){\n        return false;\n      }\n    }\n\n    //test non-objects for equality\n    if(!_.isObject(valA)){\n      if(stringifyStatics){\n        var valAs=''+valA;\n        var valBs=''+valB;\n        ret=(''+valA)===(''+valB);\n      }else{\n        ret=valA===valB;\n      }\n      return ret;\n    }\n\n    //test for length\n    if(_.size(valA)!=_.size(valB)){\n      return false;\n    }\n\n    //test for arrays first\n    var isArr=_.isArray(valA);\n\n    //test whether both are array or both object\n    if(isArr!==_.isArray(valB)){\n      return false;\n    }\n\n    var ret=true;\n    if(isArr){\n      //do test for arrays\n      _.each(valA,function(val,idx,lst){\n        if(!ret){return;}\n        ret=ret &amp;&amp; _.equal(val,valB[idx],stringifyStatics);\n      });\n    }else{\n      //do test for objects\n      _.each(valA,function(val,idx,lst){\n        if(!ret){return;}\n\n        //test for object member exists\n        if(!_.has(valB,idx)){\n          ret=false;\n          return;\n        }\n\n        // test for member equality\n        ret=ret &amp;&amp; _.equal(val,valB[idx],stringifyStatics);\n      });\n\n    }\n    return ret;\n  }\n});\n</code></pre>\n\n<p>This is how you use it:</p>\n\n<pre><code>_.equal([1,2,3],[1,2,\"3\"],true)\n</code></pre>\n\n<p>To demonstrate nesting, you can do this:</p>\n\n<pre><code>_.equal(\n    ['a',{b:'b',c:[{'someId':1},2]},[1,2,3]],\n    ['a',{b:'b',c:[{'someId':\"1\"},2]},[\"1\",'2',3]]\n,true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It handle all possible stuff and even reference itself in structure of object. You can see the example at the end of code.</p>\n\n<pre><code>var deepCompare = (function() {\n    function internalDeepCompare (obj1, obj2, objects) {\n        var i, objPair;\n\n        if (obj1 === obj2) {\n            return true;\n        }\n\n        i = objects.length;\n        while (i--) {\n            objPair = objects[i];\n            if (  (objPair.obj1 === obj1 &amp;&amp; objPair.obj2 === obj2) ||\n                  (objPair.obj1 === obj2 &amp;&amp; objPair.obj2 === obj1)  ) {                          \n                return true;\n            }                    \n        }\n        objects.push({obj1: obj1, obj2: obj2});\n\n        if (obj1 instanceof Array) {\n            if (!(obj2 instanceof Array)) {\n                return false;\n            }\n\n            i = obj1.length;\n\n            if (i !== obj2.length) {\n               return false; \n            }\n\n            while (i--) {\n                if (!internalDeepCompare(obj1[i], obj2[i], objects)) {\n                    return false;\n                }\n            }\n        }\n        else {\n            switch (typeof obj1) {\n                case \"object\":                \n                    // deal with null\n                    if (!(obj2 &amp;&amp; obj1.constructor === obj2.constructor)) {\n                        return false;\n                    }\n\n                    if (obj1 instanceof RegExp) {\n                        if (!(obj2 instanceof RegExp &amp;&amp; obj1.source === obj2.source)) {\n                            return false;\n                        }\n                    }                 \n                    else if (obj1 instanceof Date) {\n                        if (!(obj2 instanceof Date &amp;&amp; obj1.getTime() === obj2.getTime())) {\n                            return false;\n                        }\n                    } \n                    else {    \n                        for (i in obj1) {\n                            if (obj1.hasOwnProperty(i)) {       \n                                if (!(obj2.hasOwnProperty(i) &amp;&amp; internalDeepCompare(obj1[i], obj2[i], objects))) {\n                                    return false;\n                                }\n                            }\n                        }         \n                    }\n                    break;\n                case \"function\": \n                    if (!(typeof obj2 === \"function\" &amp;&amp; obj1+\"\" === obj2+\"\")) {\n                        return false;\n                    }\n                    break;\n                default:                 //deal with NaN \n                    if (obj1 !== obj2 &amp;&amp; obj1 === obj1 &amp;&amp; obj2 === obj2) {\n                        return false;            \n                    }\n            }\n        }\n\n        return true;\n    }\n\n    return function (obj1, obj2) {\n        return internalDeepCompare(obj1, obj2, []);    \n    };\n}());\n\n/*    \nvar a = [a, undefined, new Date(10), /.+/, {a:2}, function(){}, Infinity, -Infinity, NaN, 0, -0, 1, [4,5], \"1\", \"-1\", \"a\", null],\n    b = [b, undefined, new Date(10), /.+/, {a:2}, function(){}, Infinity, -Infinity, NaN, 0, -0, 1, [4,5], \"1\", \"-1\", \"a\", null];\ndeepCompare(a, b);\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var a= [1, 2, 3, '3'];\nvar b = [1, 2, 3];\n\nvar c = a.filter(function (i) { return ! ~b.indexOf(i); });\n\nalert(c.length);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>var a=[1,2,3];\nvar b=[3,2,1];\nvar c=new Array(1,2,3);\n\nalert(a==b+\"|\"+b==c);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/YrMyc/3/\">demo</a></p>\n\n<p>How to check these array, and get true from equals method?</p>\n\n<p>Under jQuery, has any methods for this?</p>\n",
            "last_activity_date": 1422402077,
            "question_id": 3115982,
            "score": 55,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "how to check javascript array equals?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If you notice, the code actually splits the chars into an array prior to do any permutation, so you simply remove the join and split operation</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var permArr = [],\r\n  usedChars = [];\r\n\r\nfunction permute(input) {\r\n  var i, ch;\r\n  for (i = 0; i &lt; input.length; i++) {\r\n    ch = input.splice(i, 1)[0];\r\n    usedChars.push(ch);\r\n    if (input.length == 0) {\r\n      permArr.push(usedChars.slice());\r\n    }\r\n    permute(input);\r\n    input.splice(i, 0, ch);\r\n    usedChars.pop();\r\n  }\r\n  return permArr\r\n};\r\n\r\n\r\ndocument.write(JSON.stringify(permute([5, 3, 7, 1])));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>I have improved @SiGanteng's answer: <a href=\"http://jsfiddle.net/q62Dr/41/\">http://jsfiddle.net/q62Dr/41/</a></p>\n\n<p>Now it is possible to call <code>permute()</code> more than one time, because <code>permArr</code> and <code>usedChars</code> are cleared each time.</p>\n\n<pre><code>function permute(input) {\n    var permArr = [],\n    usedChars = [];\n    function main(){\n        var i, ch;\n        for (i = 0; i &lt; input.length; i++) {\n            ch = input.splice(i, 1)[0];\n            usedChars.push(ch);\n            if (input.length == 0) {\n                permArr.push(usedChars.slice());\n            }\n            main();\n            input.splice(i, 0, ch);\n            usedChars.pop();\n        }\n        return permArr;\n    }\n    return main();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>The following function permutates an array of any type and calls a specified callback function on each permutation found:</p>\n\n<pre><code>/*\n  Permutate the elements in the specified array by swapping them\n  in-place and calling the specified callback function on the array\n  for each permutation.\n\n  Return the number of permutations.\n\n  If array is undefined, null or empty, return 0.\n\n  NOTE: when permutation succeeds, the array should be in the original state\n  on exit!\n*/\n  function permutate(array, callback) {\n    // Do the actual permuation work on array[], starting at index\n    function p(array, index, callback) {\n      // Swap elements i1 and i2 in array a[]\n      function swap(a, i1, i2) {\n        var t = a[i1];\n        a[i1] = a[i2];\n        a[i2] = t;\n      }\n\n      if (index == array.length - 1) {\n        callback(array);\n        return 1;\n      } else {\n        var count = p(array, index + 1, callback);\n        for (var i = index + 1; i &lt; array.length; i++) {\n          swap(array, i, index);\n          count += p(array, index + 1, callback);\n          swap(array, i, index);\n        }\n        return count;\n      }\n    }\n\n    if (!array || array.length == 0) {\n      return 0;\n    }\n    return p(array, 0, callback);\n  }\n</code></pre>\n\n<p>If you call it like this:</p>\n\n<pre><code>  // Empty array to hold results\n  var result = [];\n  // Permutate [1, 2, 3], pushing every permutation onto result[]\n  permutate([1, 2, 3], function (a) {\n    // Create a copy of a[] and add that to result[]\n    result.push(a.slice(0));\n  });\n  // Show result[]\n  document.write(result);\n</code></pre>\n\n<p>I think it will do exactly what you need - fill an array called <code>result</code> with the permutations of the array [1, 2, 3]. The result is:</p>\n\n<pre><code>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,2,1],[3,1,2]]\n</code></pre>\n\n<p>Slightly clearer code on JSFiddle: <a href=\"http://jsfiddle.net/MgmMg/6/\">http://jsfiddle.net/MgmMg/6/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Little late, but like to add a slightly more elegant version here.  Can be any array...</p>\n\n<pre><code>function permutator(inputArr) {\n  var results = [];\n\n  function permute(arr, memo) {\n    var cur, memo = memo || [];\n\n    for (var i = 0; i &lt; arr.length; i++) {\n      cur = arr.splice(i, 1);\n      if (arr.length === 0) {\n        results.push(memo.concat(cur));\n      }\n      permute(arr.slice(), memo.concat(cur));\n      arr.splice(i, 0, cur[0]);\n    }\n\n    return results;\n  }\n\n  return permute(inputArr);\n}\n</code></pre>\n\n<p>So...</p>\n\n<pre><code>permutator(['c','a','t']);\n</code></pre>\n\n<p>Yields...</p>\n\n<pre><code>[ [ 'c', 'a', 't' ],\n  [ 'c', 't', 'a' ],\n  [ 'a', 'c', 't' ],\n  [ 'a', 't', 'c' ],\n  [ 't', 'c', 'a' ],\n  [ 't', 'a', 'c' ] ]\n</code></pre>\n\n<p>And...</p>\n\n<pre><code>permutator([1,2,3]);\n</code></pre>\n\n<p>Yields...</p>\n\n<pre><code>[ [ 1, 2, 3 ],\n  [ 1, 3, 2 ],\n  [ 2, 1, 3 ],\n  [ 2, 3, 1 ],\n  [ 3, 1, 2 ],\n  [ 3, 2, 1 ] ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>var inputArray = [1, 2, 3];\n\nvar result = inputArray.reduce(function permute(res, item, key, arr) {\n    return res.concat(arr.length &gt; 1 &amp;&amp; arr.slice(0, key).concat(arr.slice(key + 1)).reduce(permute, []).map(function(perm) { return [item].concat(perm); }) || item);\n}, []);\n\n\nalert(JSON.stringify(result));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>My first contribution to the site. See <a href=\"http://urielzen.com/2014/07/07/javascript-permutations-round-2/\" rel=\"nofollow\">here</a> for some explanation drawings of the algorithm behind the code. Also, according to the tests that I have done, this code runs faster than all the other methods mentioned here before this date, of course it is minimal if there are few values, but the time increases exponentially when adding too many.</p>\n\n<pre><code>var permutations2 = function (arr) {\n    var finalArr = [];\n    var iterator = function (arrayTaken, tree) {\n        for (var i = 0; i &lt; tree; i++) {\n            var temp = arrayTaken.slice();\n            temp.splice(tree - 1 - i, 0, temp.splice(tree - 1, 1)[0]);\n            if (tree &gt;= arr.length) {\n                finalArr.push(temp);\n            } else { iterator(temp, tree + 1); }\n        }\n    }\n    iterator(arr, 1); return finalArr;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Answer without the need for a exterior array or additional function</p>\n\n<pre><code>function permutator (arr) {\n  var permutations = [];\n  if (arr.length === 1) {\n    return [ arr ];\n  }\n\n  for (var i = 0; i &lt;  arr.length; i++) { \n    var subPerms = permutator(arr.slice(0, i).concat(arr.slice(i + 1)));\n    for (var j = 0; j &lt; subPerms.length; j++) {\n      subPerms[j].unshift(arr[i]);\n      permutations.push(subPerms[j]);\n    }\n  }\n  return permutations;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is another \"more recursive\" solution.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function perms(input) {\r\n  var data = input.slice();\r\n  var permutations = [];\r\n  var n = data.length;\r\n\r\n  if (n === 0) {\r\n    return [\r\n      []\r\n    ];\r\n  } else {\r\n    var first = data.shift();\r\n    var words = perms(data);\r\n    words.forEach(function(word) {\r\n      for (var i = 0; i &lt; n; ++i) {\r\n        var tmp = word.slice();\r\n        tmp.splice(i, 0, first)\r\n        permutations.push(tmp);\r\n      }\r\n    });\r\n  }\r\n\r\n  return permutations;\r\n}\r\n\r\nvar str = 'ABC';\r\nvar chars = str.split('');\r\nvar result = perms(chars).map(function(p) {\r\n  return p.join('');\r\n});\r\n\r\nconsole.log(result);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code>[ 'ABC', 'BAC', 'BCA', 'ACB', 'CAB', 'CBA' ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to write a function that does the following:</p>\n\n<ul>\n<li>takes an array of integers as an argument (eg. [1,2,3,4])</li>\n<li>creates an array of all the possible permutations of [1,2,3,4], with each permutation having a length of 4</li>\n</ul>\n\n<p>the function below (I found it online) does this by taking a string as an argument, and returning all the permutations of that string</p>\n\n<p>I could not figure out how to modify it to make it work with an array of integers, (I think this has something to do with how some of the methods work differently on strings than they do on integers, but I'm not sure...)</p>\n\n<pre><code>var permArr = [], usedChars = [];\nfunction permute(input) {\n  var i, ch, chars = input.split(\"\");\n  for (i = 0; i &lt; chars.length; i++) {\n    ch = chars.splice(i, 1);\n    usedChars.push(ch);\n    if (chars.length == 0) permArr[permArr.length] = usedChars.join(\"\");\n    permute(chars.join(\"\"));\n    chars.splice(i, 0, ch);\n    usedChars.pop();\n  }\nreturn permArr\n};\n</code></pre>\n\n<p>note: I'm looking to make the function return arrays of INTEGERS, NOT an array of STRINGS</p>\n\n<p>I really need the solution to be in javascript. I've alredy figured out how to do this in python</p>\n",
            "last_activity_date": 1425112257,
            "question_id": 9960908,
            "score": 23,
            "tags": [
                "javascript",
                "permutation"
            ],
            "title": "permutations in javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I'd try adding a <code>keypress</code> <code>Event</code> handler upon <code>keydown</code>. E.g:</p>\n\n<pre><code>window.onkeydown = function() {\n    // evaluate key and call respective handler\n    window.onkeypress = function() {\n       // evaluate key and call respective handler\n    }\n}\n\nwindow.onkeyup = function() {\n    window.onkeypress = void(0) ;\n}\n</code></pre>\n\n<p>This is just meant to illustrate a pattern; I won't go into detail here (especially not into browser specific level2+ <code>Event</code> registration).</p>\n\n<p>Post back please whether this helps or not.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You should use the <strong>keydown</strong> event to keep track of the keys pressed, <em>and</em> you should use the <strong>keyup</strong> event to keep track of when the keys are released.</p>\n\n<p>See this example: <a href=\"http://jsfiddle.net/vor0nwe/mkHsU/\">http://jsfiddle.net/vor0nwe/mkHsU/</a></p>\n\n<p>(Update: I\u2019m reproducing the code here, in case jsfiddle.net bails:)\nThe HTML:</p>\n\n<pre><code>&lt;ul id=\"log\"&gt;\n    &lt;li&gt;List of keys:&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>...and the Javascript (using jQuery):</p>\n\n<pre><code>var log = $('#log')[0],\n    pressedKeys = [];\n\n$(document.body).keydown(function (evt) {\n    var li = pressedKeys[evt.keyCode];\n    if (!li) {\n        li = log.appendChild(document.createElement('li'));\n        pressedKeys[evt.keyCode] = li;\n    }\n    $(li).text('Down: ' + evt.keyCode);\n    $(li).removeClass('key-up');\n});\n\n$(document.body).keyup(function (evt) {\n    var li = pressedKeys[evt.keyCode];\n    if (!li) {\n       li = log.appendChild(document.createElement('li'));\n    }\n    $(li).text('Up: ' + evt.keyCode);\n    $(li).addClass('key-up');\n});\n</code></pre>\n\n<p>In that example, I\u2019m using an array to keep track of which keys are being pressed.  In a real application, you might want to <code>delete</code> each element once their associated key has been released.  </p>\n\n<p>Note that while I've used jQuery to make things easy for myself in this example, the concept works just as well when working in 'raw' Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<pre><code>case 65: //A\njp = 1;\nsetTimeout(\"jp = 0;\", 100);\n\nif(pj &gt; 0) {\nABFunction();\npj = 0;\n}\nbreak;\n\ncase 66: //B\npj = 1;\nsetTimeout(\"pj = 0;\", 100);\n\nif(jp &gt; 0) {\nABFunction();\njp = 0;\n}\nbreak;\n</code></pre>\n\n<p>Not the best way, I know.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Multiple keystroke detection is easy if you understand the concept</p>\n\n<p>The way I do it is like this:</p>\n\n<pre><code>var map = []; // Or you could call it \"key\"\nonkeydown = onkeyup = function(e){\n    e = e || event; // to deal with IE\n    map[e.keyCode] = e.type == 'keydown';\n    /*insert conditional here*/\n}\n</code></pre>\n\n<p>This code is very simple: Since the computer only passes one keystroke at a time, an array is created to keep track of multiple keys. The array can then be used to check for one or more keys at once.</p>\n\n<p>Just to explain, let's say you press <kbd>A</kbd> and <kbd>B</kbd>, each fires a <code>keydown</code> event that sets <code>map[e.keyCode]</code> to the value of <code>e.type == keydown</code>, which evaluates to either <em>true</em> or <em>false</em>. Now both <code>map[65]</code> and <code>map[66]</code> are set to <code>true</code>. When you let go of <code>A</code>, the <code>keyup</code> event fires, causing the same logic to determine the opposite result for <code>map[65]</code> (A), which is now <em>false</em>, but since <code>map[66]</code> (B) is still \"down\" (it hasn't triggered a keyup event), it remains <em>true</em>.</p>\n\n<p>The <code>map</code> array, through both events, looks like this:</p>\n\n<pre><code>// keydown A \n// keydown B\n[\n    65:true,\n    66:true\n]\n// keyup A\n// keydown B\n[\n    65:false,\n    66:true\n]\n</code></pre>\n\n<p>There are two things you can do now:</p>\n\n<p><strong>A)</strong> A Key logger (<a href=\"http://jsfiddle.net/B1KMusic/U5L2X/embedded/result,js\" rel=\"nofollow\">example</a>) can be created as a reference for later when you want to quickly figure out one or more key codes. Assuming you have defined an html element and pointed to it with the variable <code>element</code>.</p>\n\n<pre><code>element.innerHTML = '';\nvar i, l = map.length;\nfor(i = 0; i &lt; l; i ++){\n    if(map[i]){\n        element.innerHTML += '&lt;hr&gt;' + i;\n    }\n}\n</code></pre>\n\n<p>Note: You can easily grab an element by its <code>id</code> attribute.</p>\n\n<pre><code>&lt;div id=\"element\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>This creates an html element that can be easily referenced in javascript with <code>element</code></p>\n\n<pre><code>alert(element); // [Object HTMLDivElement]\n</code></pre>\n\n<p>You don't even have to use <code>document.getElementById()</code> or <code>$()</code> to grab it. But for the sake of compatibility, use of jQuery's <code>$()</code> is more widely recommended.</p>\n\n<p>Just make sure the <em>script</em> tag comes after the body of the HTML. <strong>Optimization tip</strong>: Most big-name websites put the script tag <strong>after</strong> the body tag for optimization. This is because the script tag blocks further elements from loading until its script is finished downloading. Putting it ahead of the content allows the content to load beforehand.</p>\n\n<p><strong>B (which is where your interest lies)</strong> You can check for one or more keys at a time where <code>/*insert conditional here*/</code> was, take this example:</p>\n\n<pre><code>if(map[17] &amp;&amp; map[16] &amp;&amp; map[65]){ // CTRL+SHIFT+A\n    alert('Control Shift A');\n}else if(map[17] &amp;&amp; map[16] &amp;&amp; map[66]){ // CTRL+SHIFT+B\n    alert('Control Shift B');\n}else if(map[17] &amp;&amp; map[16] &amp;&amp; map[67]){ // CTRL+SHIFT+C\n    alert('Control Shift C');\n}\n</code></pre>\n\n<p>This example checks for <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>A</kbd>, <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>B</kbd>, and <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>C</kbd></p>\n\n<p>It's just as simple as that :)</p>\n\n<h2>Notes</h2>\n\n<h3>Keeping Track of KeyCodes</h3>\n\n<p>As a general rule, it is good practice to document code, especially things like Key codes (like <code>// CTRL+ENTER</code>) so you can remember what they were. </p>\n\n<p>You should also put the key codes in the same order as the documentation (<code>CTRL+ENTER =&gt; map[17] &amp;&amp; map[13]</code>, NOT <code>map[13] &amp;&amp; map[17]</code>). This way you won't ever get confused when you need to go back and edit the code.</p>\n\n<h3>A gotcha with if-else chains</h3>\n\n<p>If checking for combos of differing amounts (like <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>Alt</kbd><kbd>Enter</kbd> and <kbd>Ctrl</kbd><kbd>Enter</kbd>), put smaller combos <strong>after</strong> larger combos, or else the smaller combos will override the larger combos if they are similar enough. Example:</p>\n\n<pre><code>// Correct:\nif(map[17] &amp;&amp; map[16] &amp;&amp; map[13]){ // CTRL+SHIFT+ENTER\n    alert('Whoa, mr. power user');\n}else if(map[17] &amp;&amp; map[13]){ // CTRL+ENTER\n    alert('You found me');\n}else if(map[13]){ // ENTER\n    alert('You pressed Enter. You win the prize!')\n}\n\n// Incorrect:\nif(map[17] &amp;&amp; map[13]){ // CTRL+ENTER\n    alert('You found me');\n}else if(map[17] &amp;&amp; map[16] &amp;&amp; map[13]){ // CTRL+SHIFT+ENTER\n    alert('Whoa, mr. power user');\n}else if(map[13]){ // ENTER\n    alert('You pressed Enter. You win the prize!');\n}\n// What will go wrong: When trying to do CTRL+SHIFT+ENTER, it will\n// detect CTRL+ENTER first, and override CTRL+SHIFT+ENTER.\n// Removing the else's is not a proper solution, either\n// as it will cause it to alert BOTH \"Mr. Power user\" AND \"You Found Me\"\n</code></pre>\n\n<h3>Gotcha: \"This key combo keeps activating even though I'm not pressing the keys\"</h3>\n\n<p>When dealing with alerts or anything that takes focus from the main window, you might want to include <code>map = []</code> to reset the array after the condition is done. This is because some things, like <code>alert()</code>, take the focus away from the main window and cause the event to not trigger. For example:</p>\n\n<pre><code>if(map[17] &amp;&amp; map[13]){ // CTRL+ENTER\n    alert('Oh noes, a bug!');\n}\n// When you Press any key after executing this, it will alert again, even though you \n// are clearly NOT pressing CTRL+ENTER\n// The fix would look like this:\n\nif(map[17] &amp;&amp; map[13]){ // CTRL+ENTER\n    alert('Take that, bug!');\n    map = [];\n}\n// The bug no longer happens since the array is cleared\n</code></pre>\n\n<h3>Gotcha: Browser Defaults</h3>\n\n<p>Here's an annoying thing I found, with the solution included: </p>\n\n<p>Problem: Since the browser usually has default actions on key combos (like <kbd>Ctrl</kbd><kbd>D</kbd> activates the bookmark window, or <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>C</kbd> activates skynote on maxthon), you might also want to add <code>return false</code> after <code>map = []</code>, so users of your site won't get frustrated when the \"Duplicate File\" function, being put on <kbd>Ctrl</kbd><kbd>D</kbd>, bookmarks the page instead.</p>\n\n<pre><code>if(map[17] &amp;&amp; map[68]){ // CTRL+D\n    alert('The bookmark window didn\\'t pop up!');\n    map = [];\n    return false;\n}\n</code></pre>\n\n<p>Without <code>return false</code>, the Bookmark window <em>would</em> pop up, to the dismay of the user.</p>\n\n<h3>The return statement (new)</h3>\n\n<p>Okay, so you don't always want to exit the function at that point. That's why the <code>event.preventDefault()</code> function is there. What it does is set an internal flag that tells the interpreter to <strong>not</strong> allow the browser to run its default action. After that, execution of the function continues (whereas <code>return</code> will immediately exit the function).</p>\n\n<p>Understand this distinction before you decide whether to use <code>return false</code> or <code>e.preventDefault()</code></p>\n\n<hr>\n\n<p>I hope this thoroughly explained answer was helpful :)</p>\n",
                    "is_accepted": true,
                    "score": 49
                },
                {
                    "body": "<p>I used this way (had to check wherever is Shift + Ctrl pressed):</p>\n\n<pre><code>// create some object to save all pressed keys\nvar keys = {\n    shift: false,\n    ctrl: false\n};\n\n$(document.body).keydown(function(event) {\n// save status of the button 'pressed' == 'true'\n    if (event.keyCode == 16) {\n        keys[\"shift\"] = true;\n    } else if (event.keyCode == 17) {\n        keys[\"ctrl\"] = true;\n    }\n    if (keys[\"shift\"] &amp;&amp; keys[\"ctrl\"]) {\n        $(\"#convert\").trigger(\"click\"); // or do anything else\n    }\n});\n\n$(document.body).keyup(function(event) {\n    // reset status of the button 'released' == 'false'\n    if (event.keyCode == 16) {\n        keys[\"shift\"] = false;\n    } else if (event.keyCode == 17) {\n        keys[\"ctrl\"] = false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>    document.onkeydown = keydown; \n\n    function keydown(evt) { \n\n    if (!evt) evt = event; \n\n    if (evt.ctrlKey &amp;&amp; evt.altKey &amp;&amp; evt.keyCode==115) {\n\n        alert(\"CTRL+ALT+F4\"); } \n\n    else if (evt.shiftKey &amp;&amp; evt.keyCode == 9) { \n\n        alert(\"Shift+TAB\"); }  \n\n    } \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to develop a javascript game engine and I've came across this problem:</p>\n\n<p>When I press <strong>space</strong> the character jumps.\nWhen I press the right arrow the character moves right.</p>\n\n<p>The thing is that when I keep pressing right then I press space the character jumps then it stops moving.</p>\n\n<p>I use the <strong>keydown</strong> function to get the key pressed, how can I check if there're multiple keys pressed down?</p>\n",
            "last_activity_date": 1424571028,
            "question_id": 5203407,
            "score": 30,
            "tags": [
                "javascript"
            ],
            "title": "javascript multiple keys pressed at once"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>It won't <a href=\"http://validator.w3.org/\">validate</a> outside of the <code>&lt;body&gt;</code> or <code>&lt;head&gt;</code> tags. It also won't make much difference &mdash; unless you're doing DOM manipulations that could <a href=\"http://blogs.msdn.com/b/ie/archive/2009/09/03/preventing-operation-aborted-scenarios.aspx\">break IE</a> before the body element is fully loaded &mdash; to putting it just before the closing <code>&lt;/body&gt;</code>.</p>\n\n<pre><code>&lt;html&gt;\n  ....\n  &lt;body&gt;\n     ....\n     &lt;script type=\"text/javascript\" src=\"theJs.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 92
                },
                {
                    "body": "<p>Yes. Only comments and the end tag for the html element are allowed after the end tag for the body.</p>\n\n<p>Browsers may perform error recovery, but you should never depend on that.</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>Yes. But if you do add the code outside it most likely will not be the end of the world since most browsers will fix it, but it is still a bad practice to get into.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As <a href=\"http://stackoverflow.com/a/3037769/288671\">Andy</a> said the document will be not valid, but nevertheless the script will still be interpreted. See the <a href=\"http://opensource.apple.com/source/WebCore/WebCore-514/html/HTMLParser.cpp\">snippet</a> from WebKit for example: </p>\n\n<pre><code>void HTMLParser::processCloseTag(Token* t)\n{\n    // Support for really broken html.\n    // we never close the body tag, since some stupid web pages close it before \n    // the actual end of the doc.\n    // let's rely on the end() call to close things.\n    if (t-&gt;tagName == htmlTag || t-&gt;tagName == bodyTag \n                              || t-&gt;tagName == commentAtom)\n        return;\n    ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>IE doesn't allow this anymore (since Version 10, I believe) and will ignore such scripts. FF and Chrome still tolerate them, but there are chances that some day they will drop this as non-standard.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Google actually recommends this in regards to 'CSS Optimization'. They recommend in-lining critical above-fold styles and deferring the rest(css file).</p>\n\n<p>Example:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      .blue{color:blue;}\n    &lt;/style&gt;\n    &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"blue\"&gt;\n      Hello, world!\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n&lt;noscript&gt;&lt;link rel=\"stylesheet\" href=\"small.css\"&gt;&lt;/noscript&gt;\n</code></pre>\n\n<hr>\n\n<p>See: <a href=\"https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery\" rel=\"nofollow\">https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How wrong is it to place the script tag after the closing tag of the body (<code>&lt;/body&gt;</code>). ?</p>\n\n<pre><code>&lt;html&gt;\n  ....\n  &lt;body&gt;\n     ....\n  &lt;/body&gt;\n  &lt;script type=\"text/javascript\" src=\"theJs.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1402366919,
            "question_id": 3037725,
            "score": 98,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Is it wrong to place the &lt;script&gt; tag after the &lt;/body&gt; tag?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can use <a href=\"https://developer.mozilla.org/En/DOM%3awindow.getComputedStyle\"><code>getComputedStyle()</code></a>.</p>\n\n<pre><code>var element = document.getElementById('image_1'),\n    style = window.getComputedStyle(element),\n    top = style.getPropertyValue('top');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/hAw53/\">jsFiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>If you set it programmatically you can just call it like a variable (i.e. document.getElementById('image_1').style.top). Otherwise, you can always use jQuery:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;div id=\"test\" style=\"height: 100px;\"&gt;Test&lt;/div&gt;\n        &lt;script type=\"text/javascript\" src=\"jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            alert($(\"#test\").css(\"height\"));\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>As a matter of safety, you may wish to check that the element exists before you attempt to read from it. If it doesn't exist, your code will throw an exception, which will stop execution on the rest of your JavaScript and potentially display an error message to the user -- not good. You want to be able to fail gracefully.</p>\n\n<pre><code>var height, width, top, margin, item;\nitem = document.getElementById( \"image_1\" );\nif( item ) {\n  height = item.style.height;\n  width = item.style.width;\n  top = item.style.top;\n  margin = item.style.margin;\n} else {\n  // Fail gracefully here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're into libraries, why not <a href=\"http://www.cinsoft.net/mylib.html\" rel=\"nofollow\">MyLibrary</a> and <a href=\"http://www.cinsoft.net/mylib-doc.asp#getstyle\" rel=\"nofollow\">getStyle</a>.</p>\n\n<p>The jQuery <em>css</em> method is misnamed, CSS is just one way of setting styles and doesn't necessarily represent the actual values of an element's style properties.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use the following. It helped me.</p>\n\n<pre><code>document.getElementById('image_1').offsetTop\n</code></pre>\n\n<p>See also <em><a href=\"http://www.quirksmode.org/dom/getstyles.html\" rel=\"nofollow\">Get Styles</a></em>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The element.style property lets you know only the CSS properties that were defined as inline in that element (programmatically, or defined in the style attribute of the element), you should get the computed style.</p>\n\n<p>Is not so easy to do it in a cross-browser way, IE has its own way, through the element.currentStyle property, and the DOM Level 2 standard way, implemented by other browsers is through the document.defaultView.getComputedStyle method.</p>\n\n<p>The two ways have differences, for example, the IE element.currentStyle property expect that you access the CCS property names composed of two or more words in camelCase (e.g. maxHeight, fontSize, backgroundColor, etc), the standard way expects the properties with the words separated with dashes (e.g. max-height, font-size, background-color, etc).\n......</p>\n\n<pre><code>  function getStyle(el, styleProp) {\n  var value, defaultView = (el.ownerDocument || document).defaultView;\n  // W3C standard way:\n  if (defaultView &amp;&amp; defaultView.getComputedStyle) {\n    // sanitize property name to css notation\n    // (hypen separated words eg. font-Size)\n    styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  } else if (el.currentStyle) { // IE\n    // sanitize property name to camelCase\n    styleProp = styleProp.replace(/\\-(\\w)/g, function(str, letter) {\n      return letter.toUpperCase();\n    });\n    value = el.currentStyle[styleProp];\n    // convert other units to pixels on IE\n    if (/^\\d+(em|pt|%|ex)?$/i.test(value)) { \n      return (function(value) {\n        var oldLeft = el.style.left, oldRsLeft = el.runtimeStyle.left;\n        el.runtimeStyle.left = el.currentStyle.left;\n        el.style.left = value || 0;\n        value = el.style.pixelLeft + \"px\";\n        el.style.left = oldLeft;\n        el.runtimeStyle.left = oldRsLeft;\n        return value;\n      })(value);\n    }\n    return value;\n  }\n}\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/2664045/how-to-retrieve-a-styles-value-in-javascript\">Main reference stackoverflow</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Cross-browser solution to checking CSS values without DOM manipulation:</p>\n\n<pre><code>function getStyleRuleValue(style, selector) {\n    for (var i = 0; i &lt; document.styleSheets.length; i++) {\n        var mysheet = document.styleSheets[i];\n        var myrules = mysheet.cssRules ? mysheet.cssRules : mysheet.rules;\n        for (var j = 0; j &lt; myrules.length; j++) {\n            if (myrules[j].selectorText &amp;&amp; myrules[j].selectorText.toLowerCase() === selector) {\n                return myrules[j].style[style];\n            }\n        }\n\n    }\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>getStyleRuleValue('backgroundColor', '.chart-color')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I know I can <em>set</em> a CSS value through JavaScript such as:</p>\n\n<pre><code>document.getElementById('image_1').style.top = '100px';\n</code></pre>\n\n<p>But, can I <em>get</em> a current specific style value? I've read where I can get the entire style for the element, but I don't want to have to parse the whole string if I don't have to.</p>\n",
            "last_activity_date": 1412840942,
            "question_id": 6338217,
            "score": 44,
            "tags": [
                "javascript",
                "css"
            ],
            "title": "Get a CSS value with JavaScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can't, you'll have to do something like</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n   var php_var = \"&lt;?php echo $php_var; ?&gt;\";\n&lt;/script&gt;\n</code></pre>\n\n<p>You can also load it with AJAX</p>\n\n<p>rhino is right, the snippet lacks of a type for the sake of brevity.</p>\n\n<p>Also, note that if <code>$php_var</code> has quotes, it will break your script. You shall use addslashes, htmlentities or a custom function.</p>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<p>metrobalderas is partially right. Partially, because the PHP variable's value may contain some special characters, which are metacharacters in JavaScript. To avoid such problem, use the code below:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar something=&lt;?php echo json_encode($a); ?&gt;;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>I'm not sure how necessary this is, and it adds a call to <code>getElementById</code>, but if you're really keen on getting inline JavaScript out of your code, you can pass it as an HTML attribute, namely:</p>\n\n<pre><code>&lt;span class=\"metadata\" id=\"metadata-size-of-widget\" title=\"&lt;?php echo json_encode($size_of_widget) ?&gt;\"&gt;&lt;/span&gt;\n</code></pre>\n\n<p>And then in your JavaScript:</p>\n\n<pre><code>var size_of_widget = document.getElementById(\"metadata-size-of-widget\").title;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/1808108/how-to-access-php-variables-in-javascript-or-jquery-rather-than-php-echo-vari\">How to access PHP variables in JavaScript or jQuery rather than &lt;?php echo $variable ?&gt;</a>  </p>\n</blockquote>\n\n\n\n<p>Is there any way to get access to a PHP variable in JavaScript?</p>\n\n<p>I have a variable, <code>$a</code>, in PHP and want to get its value in a JavaScript variable.</p>\n",
            "last_activity_date": 1354507550,
            "question_id": 4287357,
            "score": 14,
            "tags": [
                "php",
                "javascript"
            ],
            "title": "Access PHP variable in JavaScript"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>document.title = 'test'</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Use <code>document.title</code>.</p>\n\n<p>See <a href=\"http://homepage.ntlworld.com/kayseycarvey/document2.html\">this page</a> for a rudimentary tutorial as well.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I can't see how changing the page title via Javascript will help SEO. Most (or all) search bots do not run Javascript and will only read the initially loaded title that is the mark-up.</p>\n\n<p>If you want to help SEO, then you will need to change the page title in the back-end and serve different versions of the page. </p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>You can just do something like, <code>document.title = \"This is the new page title.\";</code>, but that would totally defeat the purpose of SEO. Most crawlers aren't going to support javascript in the first place, so they will take whatever is in the  element as the page title.</p>\n\n<p>If you want this to be compatible with most of the important crawlers, you're going to need to actually change the title tag itself, which would involve reloading the page (PHP, or the like). You're not going to be able to get around that, if you want to change the page title in a way that a crawler can see.</p>\n",
                    "is_accepted": true,
                    "score": 237
                },
                {
                    "body": "<p>Using the document.title is how you would accomplish it in JavaScript, but how is this supposed to assist with SEO? Bots don't generally execute javascript code as they traverse through pages.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>But in order to get the SEO befits </p>\n\n<p>You need to do a page reload when the page changes so that the search engine's see the different titles etc.</p>\n\n<p>So make sure the page reload works first then add document.title changes</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You'll have to re-serve the page with a new title in order for any crawlers to notice the change.  Doing it via javascript will only benefit a human reader, crawlers are not going to execute that code.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>One way that comes to mind that may help with SEO and still have your tab pages as they are would be to use named anchors that correspond to each tab, as in: </p>\n\n<p><code>http://www.example.com/mypage#tab1, <a href=\"http://www.example.com/mypage#tab2\" rel=\"nofollow\">http://www.example.com/mypage#tab2</a>, etc.</code></p>\n\n<p>You would need to have server side processing to parse the url and set the initial page title when the browser renders the page. I would also go ahead and make that tab the \"active\" one. Once the page is loaded and an actual user is switching tabs you would use javascript to change <code>document.title</code> as other users have stated.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Maybe you can load on your title all the tabs titles in one string, and then once you load one of the tabs change the title via javascript</p>\n\n<p>ex: at first set your title to</p>\n\n<pre><code>my app | description | contact | about us | \n</code></pre>\n\n<p>once you load one of the tabs run:</p>\n\n<pre><code>document.title = \"my app | tab title\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There are many ways you can change the title, the main two, are like so:</p>\n\n<p><strong>Method 1</strong><br>\n<em>Unreliable</em></p>\n\n<p>Put a title tag with an id in HTML (e.g. <code>&lt;title id='ttl'&gt;Hello&lt;/title&gt;</code>), then in javascript:</p>\n\n<pre><code>document.getElementById('ttl').innerHTML = 'World';\n// or, if you decided to optimize your code by putting the script tag after the body\nttl.innerHTML = 'world';\n// or ignore the id altogether\ndocument.getElementsByTagName('title')[0].innerHTML = 'world';\n// or if you're using HTML5\ndocument.querySelector.apply(document,['title']).innerHTML = 'world';\n// or\ndocument.querySelectorAll.apply(document,['title'])[0].innerHTML = 'world';\n</code></pre>\n\n<hr>\n\n<p><strong>Method 2</strong><br>\n<em>Best Practices</em></p>\n\n<p>The simplest of all is to actually use the method provided by the Document Object Model</p>\n\n<pre><code>document.title = \"Hello World\";\n</code></pre>\n\n<hr>\n\n<p>Method 1 is what you would do to alter tags found in the body of the document, <strong>it is not a good idea to try this on tags that would be found in the head, as browsers aren't expecting it, so their methods of dealing with unusual requests like those are not standardized</strong>. I.e. kiss cross-browser compatibility goodbye.</p>\n\n<p>What you want to go with is best practice--method 2. This method is provided in the standard JavaScript library specifically for the purpose of, as the name suggests, changing the title.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I just want to add something here: changing the title via JavaScript is actually useful if you're updating a database via AJAX, so then the title changes without you having to refresh the page. The title actually changes via your server side scripting language, but having it change via JavaScript is just a usability and UI thing that makes the user experience more enjoyable and fluid.</p>\n\n<p>Now, if you're changing the title via JavaScript just for the hell of it, then you should not be doing that. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The simplest way is to delete <code>&lt;title&gt;</code> tag from index.html, and include </p>\n\n<pre><code>&lt;head&gt;\n&lt;title&gt; Website - The page &lt;/title&gt;&lt;/head&gt;\n</code></pre>\n\n<p>in every page in the web. Spiders will find this and will be shown in search results :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Since search engines ignore most javascript, you will need to make it so that search engines can crawl using the tabs without using Ajax.  Make each tab a link with an href that loads the entire page with that tab selected.  Then the page can have that title in the  tag.</p>\n\n<p>The onclick event handler can still load the pages via ajax for human viewers.</p>\n\n<p>To see the pages as Google sees them, turn off Javascript in your browser, and try to make it so that clicking the tabs will load the page with that tab selected and the correct title.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a webpage that implements a set of tabs each showing different content. The tab clicks do not refresh the page but hide/unhide contents at the client side. Now there is a requirement to change the page title according to the tab selected on the page ( for SEO reasons ). Is this possible? Can someone suggest a solution to dynamically alter the page title via javascript without re-loading the page? Thanks in advance.</p>\n",
            "last_activity_date": 1391026029,
            "question_id": 413439,
            "score": 125,
            "tags": [
                "javascript",
                "html",
                "website"
            ],
            "title": "How to dynamically change a web page&#39;s title?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>\"no simple, cross-browser solution to achieve this\" : <a href=\"http://stackoverflow.com/questions/2934788/detecting-file-upload-size-on-the-client-side\">Detecting file upload size on the client side?</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This works in latest versions of Webkit/Gecko browsers:</p>\n\n<pre><code>if (typeof FileReader !== \"undefined\") {\n    var size = document.getElementById('myfile').files[0].size;\n    // check file size\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<p>HTML5 fie api supports to check the file size.</p>\n\n<p>read this article to get more info about file api</p>\n\n<p><a href=\"http://www.html5rocks.com/en/tutorials/file/dndfiles/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/file/dndfiles/</a></p>\n\n<pre><code>&lt;input type=\"file\" id=\"fileInput\" /&gt;\n\n\nvar size = document.getElementById(\"fileInput\").files[0].size;\n</code></pre>\n\n<p>similarly file API gives name and type.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://www.uploadify.com/\" rel=\"nofollow\"><strong>Uploadify</strong></a> can upload files with HTML5. Also there is a flash version. </p>\n\n<p>You can set the limits on file size, with '<a href=\"http://www.uploadify.com/documentation/uploadify/filesizelimit/\" rel=\"nofollow\"><strong>fileSizeLimit</strong></a>' parameter.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to ride the HTML5 wave but I'm facing a small issue. Before HTML5 we were checking the file size with flash but now the trend is to avoid using flash in web apps. Is there any way to check the file size in the client side using HTML5?</p>\n",
            "last_activity_date": 1366259904,
            "question_id": 4112575,
            "score": 43,
            "tags": [
                "javascript",
                "html5",
                "file-upload"
            ],
            "title": "Client Checking file size using HTML5?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The functions you define are defined in an onload function, so whereas before they were referenceable, because they are defined in that function they can only be referenced from within that function. You reference them as globals in your HTML. You have three options</p>\n\n<p>a) ( easiest, quickest, not ideal ) - change <code>function blah(){}</code> to <code>window.blah = function(){};</code> making the functions global.</p>\n\n<p>b) ( ideal way ) - use unobtrusive Javascript to attach behaviour to DOM elements from within the JS solely, meaning separate HTML from JS. </p>\n\n<p>c) Make the jsfiddle not wrap the stuff onload. Change <code>onLoad</code> to no wrap ( body or head ).</p>\n\n<p>So instead of <code>&lt;p onclick=\"lol()\" id=\"foo\"&gt;</code> you'd do <code>var e = document.getElementById('foo'); e.onclick = lol;</code> in the JS only.</p>\n\n<p>I recommend b as it encourages best practices.</p>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>In your fiddle select <code>no wrap (head)</code> in the dropdown on the left, click Run and it will work.</p>\n\n<p><a href=\"http://jsfiddle.net/afPrc/1/\"><strong>See example &#x2192;</strong></a></p>\n\n<p>When <code>onLoad</code> is selected your functions are defined within the closure of the <code>$(document).ready(function() {});</code> only.</p>\n",
                    "is_accepted": false,
                    "score": 28
                }
            ],
            "body": "<p>The code below works on a live site but I can't get it to run on jsfiddle.net . See <a href=\"http://jsfiddle.net/mjmitche/afPrc/\">http://jsfiddle.net/mjmitche/afPrc/</a></p>\n\n<p>Can anyone tell me why it's not working on jsfiddle?</p>\n\n<pre><code>&lt;form action=\"\" method=\"post\"&gt;\n    &lt;select multiple=\"multiple\" name=\"Select1\" id=\"theList\"\n            style=\"width: 152px; height: 226px\"&gt;\n    &lt;/select&gt;\n    &lt;br /&gt;\n    &lt;input name=\"Button1\" type=\"button\" value=\"Fill The List\"\n           onclick=\"fillList()\" /&gt;\n    &lt;input name=\"Button4\" onclick=\"mySelectList.clear()\"\n           type=\"button\" value=\"Clear The List\" /&gt;&lt;br /&gt;\n    &lt;input name=\"Button2\" onclick=\"alert(mySelectList.getCount())\"\n           type=\"button\" value=\"What's The Count?\" /&gt;&lt;br /&gt;\n    &lt;input name=\"Text1\" type=\"text\" id=\"txtToFind\"/&gt;\n    &lt;input name=\"Button3\" type=\"button\" value=\"Search\" onclick=\"findIt()\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>function BetterSelect(oSelList) {\n    this.objSelectList = oSelList;\n    this.objSelectList.onchange = this.selectionChanged;\n}\nBetterSelect.prototype.clear = function() {\n    this.objSelectList.options.length = 0;\n}\nBetterSelect.prototype.fill = function(aValues) {\n    this.clear();\n    for (var i=0; i &lt; aValues.length; i++) {\n        this.objSelectList.options[i] = new Option(aValues[i]);\n    }\n}\nBetterSelect.prototype.find = function(strToFind,bSelect) {\n    var indx = -1;\n    this.objSelectList.options.selectedIndex = -1;\n    for (var i=0; i&lt;this.getCount(); i++) {\n        if (this.objSelectList.options[i].text == strToFind) {\n            indx = i;\n            if (bSelect)\n                this.objSelectList.options.selectedIndex = i;\n        }\n    }\n    return indx;\n}\nBetterSelect.prototype.getCount = function() {\n    return this.objSelectList.options.length;\n}\nBetterSelect.prototype.selectionChanged = function() {\n    alert(\"selection changed!\");\n}\n\nvar mySelectList = null;\nwindow.onload = function() {\n    mySelectList = new BetterSelect(document.getElementById('theList'));\n}\nfunction fillList() {\n    mySelectList.fill([\"one\",\"two\",\"three\",\"four\",\"five\"]);\n}\nfunction findIt() {\n    mySelectList.find(document.getElementById('txtToFind').value, true);\n}\n</code></pre>\n",
            "last_activity_date": 1388298551,
            "question_id": 5468350,
            "score": 30,
            "tags": [
                "javascript"
            ],
            "title": "JavaScript not running on jsfiddle.net"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>PHP runs on the server and Javascript runs on the client, so you can't set a PHP variable to equal a Javascript variable without sending the value to the server. You can, however, set a Javascript variable to equal a PHP variable:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  var foo = '&lt;?php echo $foo ?&gt;';\n&lt;/script&gt;\n</code></pre>\n\n<p>To send a Javascript value to PHP you'd need to use AJAX. With jQuery, it would look something like this (most basic example possible):</p>\n\n<pre><code>var variableToSend = 'foo';\n$.post('file.php', {variable: variableToSend});\n</code></pre>\n\n<p>On your server, you would need to receive the variable sent in the post:</p>\n\n<pre><code>$variable = $_POST['variable'];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>As Jordan already said you have to post back the javascript variable to your server before the server can handle the value. To do this you can either program a javascript function that submits a form - or you can use ajax / jquery. <a href=\"http://api.jquery.com/jQuery.post/\">jQuery.post</a></p>\n\n<p>Maybe the most easiest approach for you is something like this</p>\n\n<pre><code>function myJavascriptFunction() { \n  var javascriptVariable = \"John\";\n  window.location.href = \"myphpfile.php?name=\" + javascriptVariable; \n}\n</code></pre>\n\n<p>On your myphpfile.php you can use <code>$_GET['name']</code> after your javascript was executed.</p>\n\n<p>Regards</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>It depends on the way your page behaves. If you want this to happens asynchronously, you have to use AJAX. Try out \"jQuery post()\" on Google to find some tuts.</p>\n\n<p>In other case, if this will happen when a user submits a form, you can send the variable in an hidden field or append <code>?variableName=someValue\"</code> to then end of the URL you are opening. :</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>http://www.somesite.com/send.php?variableName=someValue\n</code></pre>\n\n<p>or</p>\n\n<pre><code>http://www.somesite.com/send.php?variableName=someValue&amp;anotherVariable=anotherValue\n</code></pre>\n\n<p>This way, from PHP you can access this value as:</p>\n\n<pre><code>$phpVariableName = $_POST[\"variableName\"];\n</code></pre>\n\n<p>for forms using POST method or:</p>\n\n<pre><code>$phpVariableName = $_GET[\"variableName\"];\n</code></pre>\n\n<p>for forms using GET method or the append to url method I've mentioned above (querystring).</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/1917576/how-to-pass-javascript-variables-to-php\">How to pass JavaScript variables to PHP?</a>  </p>\n</blockquote>\n\n\n\n<p>First i thought that i had to convert javascript to php, but then i found out that cant because of server and client side executions. So now I simply want to send ONE variable</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction scriptvariable()\n{        \n    var theContents = \"the variable\";\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>to a php variable </p>\n\n<pre><code>&lt;?php\n$phpvariable\n?&gt;\n</code></pre>\n\n<p>That function in the javascript executes when lets say i click on a button.</p>\n\n<p>Now i have Nooo idea how to get that phpvariable Equal to the javascript one so i can use that phpvariable to look up stuff in my Database. \nI know i can add it to my url or some thing, and just refresh the page.. But id like to do it with AJAX as further in my webpage i might have to use this Ajax method.. </p>\n\n<p>So is there an easy way to do this without having to dump pages of code on my page to do one simple thing?</p>\n",
            "last_activity_date": 1321667016,
            "question_id": 8191124,
            "score": 13,
            "tags": [
                "php",
                "javascript",
                "ajax",
                "variables"
            ],
            "title": "send javaScript variable to php variable"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>There is no native dom changed event you can hook into.</p>\n\n<p>Good article <a href=\"http://darcyclarke.me/development/detect-attribute-changes-with-jquery/\" rel=\"nofollow\">here</a> which tries to provide a solution in the form of a jquery plugin.</p>\n\n<p>Code from article</p>\n\n<pre><code>$.fn.watch = function(props, callback, timeout){\n    if(!timeout)\n        timeout = 10;\n    return this.each(function(){\n        var el      = $(this),\n            func    = function(){ __check.call(this, el) },\n            data    = { props:  props.split(\",\"),\n                        func:   callback,\n                        vals:   [] };\n        $.each(data.props, function(i) {\n              data.vals[i] = el.css(data.props[i]); \n        });\n        el.data(data);\n        if (typeof (this.onpropertychange) == \"object\"){\n            el.bind(\"propertychange\", callback);\n        } else if ($.browser.mozilla){\n            el.bind(\"DOMAttrModified\", callback);\n        } else {\n            setInterval(func, timeout);\n        }\n    });\n    function __check(el) {\n        var data    = el.data(),\n            changed = false,\n            temp    = \"\";\n        for(var i=0;i &lt; data.props.length; i++) {\n            temp = el.css(data.props[i]);\n            if(data.vals[i] != temp){\n                data.vals[i] = temp;\n                changed = true;\n                break;\n            }\n        }\n        if(changed &amp;&amp; data.func) {\n            data.func.call(el, data);\n        }\n    } }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you only need something specific then a simple <code>setInterval()</code> will work, by checking the target attribute(s) every few milliseconds:</p>\n\n<pre><code>var imgSrc = null;\nsetInterval(function () {\n   var newImgSrc = $(\"#myImg\").attr(\"src\");\n   if (newImgSrc !== imgSrc) {\n      imgSrc = newImgSrc;\n      $(\"#myImg\").trigger(\"srcChange\");\n   }\n}, 50);\n</code></pre>\n\n<p>Then bind to the custom \"srcChange\" event:</p>\n\n<pre><code>$(\"#myImg\").bind(\"srcChange\", function () {....});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You are referring to <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mutationevents\">DOM Mutation Events</a>. There is poor (but improving) browser support for these events. <a href=\"https://github.com/jollytoad/jquery.mutation-events\">Mutation Events plugin for jQuery</a> might get you some of the way.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>How to setup a MutationObserver, mostly copied from <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\" rel=\"nofollow\">MDN</a> but I've added my own comments for clarity.</p>\n\n<pre><code>window.MutationObserver = window.MutationObserver\n    || window.WebKitMutationObserver\n    || window.MozMutationObserver;\n// Find the element that you want to \"watch\"\nvar target = document.querySelector('img'),\n// create an observer instance\nobserver = new MutationObserver(function(mutation) {\n     /** this is the callback where you\n         do what you need to do.\n         The argument is an array of MutationRecords where the affected attribute is\n         named \"attributeName\". There is a few other properties in a record\n         but I'll let you work it out yourself.\n      **/\n}),\n// configuration of the observer:\nconfig = {\n    attributes: true // this is to watch for attribute changes.\n};\n// pass in the element you wanna watch as well as the options\nobserver.observe(target, config);\n// later, you can stop observing\n// observer.disconnect();\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>is there any way to trigger event (may be custom) on attribute change? </p>\n\n<p>Let's say, when IMG src is changed or DIV's innerHtml? </p>\n",
            "last_activity_date": 1424211961,
            "question_id": 4561845,
            "score": 34,
            "tags": [
                "javascript",
                "jquery",
                "events",
                "dom",
                "javascript-events"
            ],
            "title": "firing event on DOM attribute change"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The general answer to this question is:</p>\n\n<blockquote>\n  <p>Don't geocode known locations every time you load your page.  Geocode them off-line and use the resulting coordinates to display the markers on your page.</p>\n</blockquote>\n\n<p>The limits exist for a reason.</p>\n\n<p>If you can't geocode the locations off-line, see <a href=\"http://econym.org.uk/gmap/geomulti.htm\" rel=\"nofollow\">this page (Part 17 Geocoding multiple addresses)</a> from Mike Williams' v2 tutorial which describes an approach, port that to the v3 API.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Nothing like these two lines appears in Mike Williams' tutorial:</p>\n\n<pre><code>    wait = true;\n    setTimeout(\"wait = true\", 2000);\n</code></pre>\n\n<p>Here's a Version 3 port:</p>\n\n<p><a href=\"http://acleach.me.uk/gmaps/v3/plotaddresses.htm\">http://acleach.me.uk/gmaps/v3/plotaddresses.htm</a></p>\n\n<p>The relevant bit of code is</p>\n\n<pre><code>  // ====== Geocoding ======\n  function getAddress(search, next) {\n    geo.geocode({address:search}, function (results,status)\n      { \n        // If that was successful\n        if (status == google.maps.GeocoderStatus.OK) {\n          // Lets assume that the first marker is the one we want\n          var p = results[0].geometry.location;\n          var lat=p.lat();\n          var lng=p.lng();\n          // Output the data\n            var msg = 'address=\"' + search + '\" lat=' +lat+ ' lng=' +lng+ '(delay='+delay+'ms)&lt;br&gt;';\n            document.getElementById(\"messages\").innerHTML += msg;\n          // Create a marker\n          createMarker(search,lat,lng);\n        }\n        // ====== Decode the error status ======\n        else {\n          // === if we were sending the requests to fast, try this one again and increase the delay\n          if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n            nextAddress--;\n            delay++;\n          } else {\n            var reason=\"Code \"+status;\n            var msg = 'address=\"' + search + '\" error=' +reason+ '(delay='+delay+'ms)&lt;br&gt;';\n            document.getElementById(\"messages\").innerHTML += msg;\n          }   \n        }\n        next();\n      }\n    );\n  }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 15
                }
            ],
            "body": "<p>I'm hitting an issue that is WELL discussed in these forums, but none of the recommendations seem to be working for me so I'm looking for some full javascript that works when saved as an html file.</p>\n\n<p>The issue is I keep hitting the OVER_QUERY_LIMIT error when trying to geocode > 11 locations on a Google Map using the V3 APIs called by Javascript. I understand that there is a limit to the rate at which you can call the geocoder (as well as the daily limit on total volume), so I need to introduce a pause in between each result in the array.</p>\n\n<p>Any help very much appreciated.</p>\n\n<p>Here is my code:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=false\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\nvar geocoder;\nvar map;\nvar wait = false;\n\n\n  function initialize() {\ngeocoder = new google.maps.Geocoder();\nvar latlng = new google.maps.LatLng(51.32, 0.5);\n\n\n\nvar myOptions = {\n  zoom: 8,\n  center: latlng,\n  mapTypeId: google.maps.MapTypeId.ROADMAP\n}\nmap = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\ncodeAddress('KT16 8LA' + ', UK');\ncodeAddress('LS8 2LQ' + ', UK');\ncodeAddress('NE13 8AF' + ', UK');\ncodeAddress('KT12 2BE' + ', UK');\ncodeAddress('W1W 8AN' + ', UK');\ncodeAddress('EC3N 2LS' + ', UK');\ncodeAddress('BS9 3BH' + ', UK');\ncodeAddress('KA10 6LZ' + ', UK');\ncodeAddress('EC1V 9BW' + ', UK');\ncodeAddress('WD18 8YN' + ', UK');\ncodeAddress('HA3 6DQ' + ', UK');\ncodeAddress('W1U 3PL' + ', UK');\ncodeAddress('W1T 7QL' + ', UK');\ncodeAddress('W1S 1TD' + ', UK');\ncodeAddress('SW1X 8NX' + ', UK');\ncodeAddress('LE2 8ET' + ', UK');\ncodeAddress('BA3 4BH' + ', UK');\ncodeAddress('AL3 8JP' + ', UK');\ncodeAddress('DE55 4QJ' + ', UK');\ncodeAddress('W6 0QT' + ', UK');\ncodeAddress('LA1 1PP' + ', UK');\ncodeAddress('SW16 4DH' + ', UK');\ncodeAddress('WC2N 6DF' + ', UK');\ncodeAddress('RM6 6LS' + ', UK');\ncodeAddress('S25 3QZ' + ', UK');\ncodeAddress('WC2H 7LR' + ', UK');\ncodeAddress('BH24 1DW' + ', UK');\ncodeAddress('EC2N 6AR' + ', UK');\ncodeAddress('W1U 2FA' + ', UK');\ncodeAddress('B60 3DX' + ', UK');    \n}\n\n  function codeAddress(vPostCode) {\nif (geocoder) {\n  geocoder.geocode( { 'address': \"'\" + vPostCode + \"'\"}, function(results, status) {\n    if (status == google.maps.GeocoderStatus.OK) {\n      map.setCenter(results[0].geometry.location);\n      var marker = new google.maps.Marker({\n          map: map, \n          position: results[0].geometry.location\n      });\n    } else {\n      alert(\"Geocode was not successful for the following reason: \" + status);\n    }\n  });\n}\n}\n\n&lt;/script&gt;\n&lt;body style=\"margin:0px; padding:0px;\" onload=\"initialize()\"&gt;\n&lt;div id=\"map_canvas\" style=\"width:100%; height:90%\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>EDIT: This is what I've tried to do to get it to pause/wait in the relevant section, but it doesn't do anything:</p>\n\n<pre><code>function codeAddress(vPostCode) {\n    if (geocoder) {\n    while (wait) { /* Just wait. */ };\n      geocoder.geocode( { 'address': \"'\" + vPostCode + \"'\"}, function(results, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          map.setCenter(results[0].geometry.location);\n          var marker = new google.maps.Marker({\n              map: map, \n              position: results[0].geometry.location\n          });\n        /* When geocoding \"fails\", see if it was because of over quota error: */\n        } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) { \n        wait = true;\n        setTimeout(\"wait = true\", 2000);\n        //alert(\"OQL: \" + status);\n        } else {\n          alert(\"Geocode was not successful for the following reason: \" + status);\n        }\n      });\n    }\n  }\n</code></pre>\n",
            "last_activity_date": 1415966546,
            "question_id": 11792916,
            "score": 10,
            "tags": [
                "javascript",
                "google-maps-api-3"
            ],
            "title": "OVER_QUERY_LIMIT in Google Maps API v3: How do I pause/delay in Javascript to slow it down?"
        },
        {
            "answer_count": 31,
            "answers": [
                {
                    "body": "<p>You can't. At least that's my experience from quick glance to <a href=\"http://json.org\">json.org</a></p>\n\n<p>Json has its syntax visualized on that page. No note from comments.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>I don't believe you can have an actual comment.  The JSON should all be data, and if you include a comment, then it will be data too.</p>\n\n<p>You could have a designated data element called \"_comment\" (or something) that would be ignored by apps that use the json data.</p>\n\n<p>You would probably be better having the comment in the processes that generate/receive the json, as they are supposed to know what the json data will be in advance, or at least the structure of it. </p>\n\n<p>But if you decided to...</p>\n\n<pre><code>{\n   \"_comment\": \"comment text goes here...\",\n   \"glossary\": {\n      \"title\": \"example glossary\",\n      \"GlossDiv\": {\n         \"title\": \"S\",\n         \"GlossList\": {\n            \"GlossEntry\": {\n               \"ID\": \"SGML\",\n               \"SortAs\": \"SGML\",\n               \"GlossTerm\": \"Standard Generalized Markup Language\",\n               \"Acronym\": \"SGML\",\n               \"Abbrev\": \"ISO 8879:1986\",\n               \"GlossDef\": {\n                  \"para\": \"A meta-markup language, used to create markup languages such as DocBook.\",\n                  \"GlossSeeAlso\": [\"GML\", \"XML\"]\n               },\n               \"GlossSee\": \"markup\"\n            }\n         }\n      }\n   }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1178
                },
                {
                    "body": "<p>The idea behind JSON is to provide simple data exchange between applications. These are typically web based and the language is javascript. </p>\n\n<p>It doesn't really allow for comments as such, however, passing a comment as one of the name/value pairs in the data would certainly work, although that data would obviously need to be ignored or handled specifically by the parsing code.</p>\n\n<p>All that said, it's not the intention that the JSON file should contain comments in the traditional sense. It should just be the data.</p>\n\n<p>Have a look at the <a href=\"http://www.json.org/\">JSON website</a> for more detail.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If your text file, which is a JSON string, is going to be read by some program, how difficult would it be to strip out either c or c++ style comments before using it?  Answer: It would be a one liner.  If you do that then JSON files could be used as configuration files.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p><strong>Include comments if you choose; strip them out with a minifier before parsing or transmitting.</strong></p>\n\n<p>I just released <strong><a href=\"http://github.com/getify/JSON.minify\">JSON.minify()</a></strong> which strips out comments and whitespace from a block of JSON and makes it valid JSON that can be parsed. So, you might use it like:  </p>\n\n<pre><code>JSON.parse(JSON.minify(my_str));\n</code></pre>\n\n<p>When I released it, I got a huge backlash of people disagreeing with even the idea of it, so I decided that I'd write a comprehensive blog post on why <a href=\"http://blog.getify.com/2010/06/json-comments/\">comments make sense in JSON</a>. It includes this notable comment from the creator of JSON:</p>\n\n<blockquote>\n  <p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser. - <a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\">Douglas Crockford, 2012</a></p>\n</blockquote>\n\n<p>Hopefully that's helpful to those who disagree with why <strong>JSON.minify()</strong> could be useful.</p>\n",
                    "is_accepted": false,
                    "score": 250
                },
                {
                    "body": "<p>You should write a <a href=\"http://json-schema.org/\">JSON schema</a> instead. JSON schema is currently a proposed internet draft specification. Besides documentation, the schema can also be used for validating your json data.</p>\n\n<p>Example:</p>\n\n<pre><code> {\n\"description\":\"A person\",\n\"type\":\"object\",\n\"properties\":\n   {\n    \"name\": \n        {\n          \"type\":\"string\"\n        },\n    \"age\" : \n        {\n          \"type\":\"integer\",\n          \"maximum\":125\n        }\n   }\n}\n</code></pre>\n\n<p>You can provide documentation by using the <strong>description</strong> schema attribute. </p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p><strong>No</strong>, comments in JSON are not allowed. This answer is based on:</p>\n\n<ul>\n<li><a href=\"http://www.json.org\">http://www.json.org</a></li>\n<li><a href=\"http://www.ietf.org/rfc/rfc4627.txt\">RFC 4627</a>:\nThe <code>application/json</code> Media Type for JavaScript Object Notation (JSON)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 652
                },
                {
                    "body": "<p>The Dojo javascript toolkit (at least as of version 1.4), allows you to include comments in your JSON. The comments can be of <code>/* */</code> format. Dojo consumes the JSON via the <code>dojo.xhrGet()</code> call.</p>\n\n<p>Other javascript toolkits may work similarly. If anybody finds one, please edit this response and include it.</p>\n\n<p>This can be helpful when experimenting with alternate data structures (or even data lists) before choosing a final option.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just encountering this for config files.  I don't want to use XML (verbose, graphically, ugly, hard to read), or \"ini\" format (no hierarchy no real standard etc) or java \"Properties\" format ( like .ini )  </p>\n\n<p>JSON can do all they can do but way less verbose and more human readable - and parsers are easy and ubiquitous in many languanges.  It's just a tree of data.  But out of band comments are a necessity often to document \"default\" configurations and the like.  Configs are never to be \"full documents\" but trees of saved data that can be human readable when needed.</p>\n\n<p>I guess one could use <code>\"#\": \"comment\"</code>, for \"valid\" JSON</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Consider using YAML. It's nearly a superset of JSON (virtually all valid JSON is valid YAML) and it allows comments.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Comments are not an official standard. Although some parsers support c-style comments. One that I use is <a href=\"https://github.com/open-source-parsers/jsoncpp\" rel=\"nofollow\">JsonCpp</a>. In the examples there is this one:</p>\n\n<pre><code>// Configuration options\n{\n    // Default encoding for text\n    \"encoding\" : \"UTF-8\",\n\n    // Plug-ins loaded at start-up\n    \"plug-ins\" : [\n        \"python\",\n        \"c++\",\n        \"ruby\"\n        ],\n\n    // Tab indent size\n    \"indent\" : { \"length\" : 3, \"use_space\": true }\n}\n</code></pre>\n\n<p><a href=\"http://www.jsonlint.com\" rel=\"nofollow\">jsonlint</a> does not validate this. So comments are a parser specific extension and not standard.</p>\n\n<p>EDIT: Another parser is JSON5. <a href=\"https://github.com/aseemk/json5\" rel=\"nofollow\">JSON5</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Comments were removed from JSON by design.</p>\n\n<blockquote>\n  <p>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability. I know that the lack of comments makes some people sad, but it shouldn't. </p>\n  \n  <p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.</p>\n</blockquote>\n\n<p>Source: <a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\">Public statement by Douglas Crockford on G+</a></p>\n",
                    "is_accepted": false,
                    "score": 133
                },
                {
                    "body": "<p>Depends on your json library, Json.net supports javascript style comments <code>/* commment */</code>.<br>\nSee <a href=\"http://stackoverflow.com/a/10325432/166286\">another SO question</a>.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Sorry, We cant use comments in JSON... See the syntax diagram for JSON in <a href=\"http://json.org/\">JSON.org</a></p>\n\n<p>Douglas Crockford says \"<a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\">why he removed comment in json and providing alternate way to do that</a>\"</p>\n\n<blockquote>\n  <p>I removed comments from JSON because I saw people were using them to\n  hold parsing directives, a practice which would have destroyed\n  interoperability. I know that the lack of comments makes some people\n  sad, but it shouldn't. </p>\n  \n  <p>Suppose you are using JSON to keep configuration files, which you\n  would like to annotate. Go ahead and insert all the comments you like.\n  Then pipe it through JSMin before handing it to your JSON parser.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>JSON makes a lot of sense for config files and other local usage because it's ubiquitous and because it's much simpler than XML. </p>\n\n<p>If people have strong reasons against having comments in JSON when communicating data (whether valid or not), then possibly JSON could be split into two:</p>\n\n<ul>\n<li>JSON-COM: JSON on the wire, or rules that apply when communicating JSON data.</li>\n<li>JSON-DOC: JSON document, or JSON in files or locally. Rules that define a valid JSON document.</li>\n</ul>\n\n<p>JSON-DOC will allow comments, and other minor differences might exist such as handling whitespace. Parsers can easily convert from one spec to the other. </p>\n\n<p>With regards to the <a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\">remark</a> made by Douglas Crockford on this issues (referenced by @Artur Czajka)</p>\n\n<blockquote>\n  <p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.</p>\n</blockquote>\n\n<p>We're talking about a generic config file issue (cross language/platform), and he's answering with a JS specific utility!</p>\n\n<p>Sure a JSON specific minify can be implemented in any language,\nbut standardize this so it becomes ubiquitous across parsers in all languages and platforms so people stop wasting their time lacking the feature because they have good use-cases for it, looking the issue up in online forums, and getting people telling them it's a bad idea or suggesting it's easy to implement stripping comments out of text files.</p>\n\n<p>The other issue is interoperability. Suppose you have a library or API or any kind of subsystem which has some config or data files associated with it. And this subsystem is\nto be accessed from different languages.  Then do you go about telling people: by the way\ndon't forget to strip out the comments from the JSON files before passing them to the parser!</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>JSON does not support comments natively, but you can make your own decoder or at least preprocessor to strip out comments, that's perfectly fine (as long as you just ignore comments and don't use them to guide how your application should process the JSON data).</p>\n\n<blockquote>\n  <p>JSON does not have comments. A JSON encoder MUST NOT output comments.\n  A JSON decoder MAY accept and ignore comments.</p>\n  \n  <p>Comments should never be used to transmit anything meaningful. That is\n  what JSON is for.</p>\n</blockquote>\n\n<p>Cf: <a href=\"http://tech.groups.yahoo.com/group/json/message/152\">Douglas Crockford, author of JSON spec</a>.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>DISCLAIMER: YOUR WARRANTY IS VOID</p>\n\n<p>As has been pointed out, this hack takes advantage of the implementation of the spec. Not all JSON parsers will understand this sort of JSON. Streaming parsers in particular wil choke.</p>\n\n<p>It's an interesting curiosity, but you <strong>should really not be using it for anything at all</strong>. Below is the original answer.</p>\n\n<hr>\n\n<p>I've found a little hack that allows you to place comments in a JSON file that will not affect the parsing, or alter the data being represented in any way.</p>\n\n<p>It appears that when declaring an object literal you can specify two values with the same key, and the last one takes precedence. Believe it or not, it turns out JSON parsers work the same way. So we can use this to create comments in the source JSON that will not be present in parsed object representation. </p>\n\n<pre><code>({a: 1, a: 2});\n// =&gt; Object {a: 2}\nObject.keys(JSON.parse('{\"a\": 1, \"a\": 2}')).length; \n// =&gt; 1\n</code></pre>\n\n<p>If we apply this technique, your commented JSON file might look like this:</p>\n\n<pre><code>{\n  \"api_host\" : \"The hostname of your API server. You may also specify the port.\",\n  \"api_host\" : \"hodorhodor.com\",\n\n  \"retry_interval\" : \"The interval in seconds between retrying failed API calls\",\n  \"retry_interval\" : 10,\n\n  \"auth_token\" : \"The authentication token. It is available in your developer dashboard under 'Settings'\",\n  \"auth_token\" : \"5ad0eb93697215bc0d48a7b69aa6fb8b\",\n\n  \"favorite_numbers\": \"An array containing my all-time favorite numbers\",\n  \"favorite_numbers\": [19, 13, 53]\n}\n</code></pre>\n\n<p>The above code is <a href=\"http://jsonlint.com/\">valid JSON</a>. If you parse it you'll get an object like this:</p>\n\n<pre><code>{\n    \"api_host\": \"hodorhodor.com\",\n    \"retry_interval\": 10,\n    \"auth_token\": \"5ad0eb93697215bc0d48a7b69aa6fb8b\",\n    \"favorite_numbers\": [19,13,53]\n}\n</code></pre>\n\n<p>Which means there is no trace of the comments, and they won't have weird side-effects.</p>\n\n<p>Happy hacking!</p>\n",
                    "is_accepted": false,
                    "score": 104
                },
                {
                    "body": "<p>You <em>can</em> have comments in JSONP, but not in pure JSON. I've just spent an hour trying to make my program work with this example from Highcharts: <a href=\"http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;callback=?\">http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;callback=?</a></p>\n\n<p>If you follow the link, you will see </p>\n\n<pre><code>?(/* AAPL historical OHLC data from the Google Finance API */\n[\n/* May 2006 */\n[1147651200000,67.79],\n[1147737600000,64.98],\n...\n[1368057600000,456.77],\n[1368144000000,452.97]\n]);\n</code></pre>\n\n<p>Since I had a similar file in my local folder, there were no issues with the <a href=\"http://en.wikipedia.org/wiki/Same-origin_policy\">Same-origin policy</a>, so I decided to use pure JSON... and, of course, <code>$.getJSON</code> was failing silently because of the comments. Eventually I just sent a manual HTTP request to the address above and realized that the content-type was <code>text/javascript</code> since, well, JSONP returns pure Javascript. In this case comments <em>are allowed</em>. But my application returned content-type <code>application/json</code>, so I had to remove the comments.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>What I do to cut a Json into parts is adding \"dummy comment\" lines :</p>\n\n<pre><code>{\n\n\"#############################\" : \"Part1\",\n\n\"data1\"             : \"value1\",\n\"data2\"             : \"value2\",\n\n\"#############################\" : \"Part2\",\n\n\"data4\"             : \"value3\",\n\"data3\"             : \"value4\"\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Sigh. Why not just add fields, e.g.</p>\n\n<pre><code>{\n    \"note1\" : \"This demonstrates the provision of annotations within a JSON file\",\n    \"field1\" : 12,\n    \"field2\" : \"some text\",\n\n    \"note2\" : \"Add more annotations as necessary\"\n}\n</code></pre>\n\n<p>Just make sure your \"notex\" names don't conflict with any real fields.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The author of JSON wants us to include comments in the JSON, but strip them out before parsing them (see <a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\" rel=\"nofollow\">link</a> provided by Michael Burr.)  If JSON should have comments, why not standardize them, and let the JSON parser do the job?  I don't agree with the logic there, but, alas, that's the standard.  Using YAML solution as suggested by others is good, but requires library dependency.</p>\n\n<p>If you want to strip out comments, but don't want to have a library dependency, here is a two-line solution, which works for C++-style comments, but can be adapted to others:</p>\n\n<pre><code>var comments=new RegExp(\"//.*\", 'mg');\ndata = JSON.parse(fs.readFileSync(sample_file, 'utf8').replace(comments, ''));\n</code></pre>\n\n<p>Note that this solution can only be used in cases where you can be sure that the JSON data does not contain the comment initiator, e.g. ('//').</p>\n\n<p>Another way to achieve JSON parsing, stripping of comments, and no extra library, is to evaluate the JSON in a JS interpreter.  The caveat with that approach, of course, is that you would only want to evaluate untainted data (no untrusted user-input.)  Here is an example of this approach in node.js -- another caveat, following example will only read the data once and then it will be cached:</p>\n\n<pre><code>data = require(fs.realpathSync(doctree_fp));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is a good solution (hack), which is valid JSON. \nJust make the same key twice (or more). For example: </p>\n\n<pre><code>{\n  \"param\" : \"This is the comment place\",\n  \"param\" : \"This is parameter place\",\n}\n</code></pre>\n\n<p>So JSON will understand this as:</p>\n\n<pre><code>{\n  \"param\" : \"This is parameter place\",\n}\n</code></pre>\n\n<p><a href=\"http://fadefade.com/json-comments.html\">Source</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you are using <a href=\"http://jackson.codehaus.org/\">Jackson</a> as your JSON parser then this is how you enable it to allow comments:</p>\n\n<pre><code>ObjectMapper mapper = new ObjectMapper().configure(Feature.ALLOW_COMMENTS, true);   \n</code></pre>\n\n<p>Then you can have comments like this:</p>\n\n<pre><code>{\n  key: \"value\" // comment\n}\n</code></pre>\n\n<p>But in general (as answered before) the spec does not allow comments.                               </p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>{\n  // This is Hjson\n\n  /*\n\n  Why?\n\n  JSON is a great tool that does its job very well. Maybe too well. JSON is a\n  great hammer but not everything is a nail.\n\n  Configuration files are edited by end-users, not developers. Users should not\n  have to worry about putting commas in the correct place. Software should\n  empower the user not hinder him.\n\n  */\n\n  \"JSON\": \"is Hjson\",\n\n  but: commas and quotes are optional!\n  and: those are allowed: // /**/ #\n  so:  less mistakes, more comments ;-)\n}\n</code></pre>\n\n<p>See <a href=\"http://hjson.org\" rel=\"nofollow\">hjson.org</a> for JavaScript, Python, C# and tools.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This is a <strong>\"can you\"</strong> question. And here is a <strong>\"yes\"</strong> answer.</p>\n\n<p>No, you shouldn't use duplicative object members to stuff side channel data into a JSON encoding. (See \"The names within an object SHOULD be unique\" <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"nofollow\">in the RFC</a>).</p>\n\n<p>And yes, you could <a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr\" rel=\"nofollow\">insert comments <em>around</em> the JSON</a>, which you could parse out.</p>\n\n<p>But if you want a way of inserting and extracting arbitrary side-channel data to a valid JSON, here is an answer. We take advantage of the non-unique representation of data in a JSON encoding. This is allowed in section two of the RFC under \"whitespace is allowed before or after any of the six structural characters\".</p>\n\n<hr>\n\n<p>First, canonicalize your JSON by minifying it:</p>\n\n<pre><code>$jsonMin = json_encode(json_decode($json));\n</code></pre>\n\n<p>Then encode your comment in binary:</p>\n\n<pre><code>$hex = unpack('H*', $comment);\n$commentBinary = base_convert($value[1], 16, 2);\n</code></pre>\n\n<p>Then steg your binary:</p>\n\n<pre><code>$steg = str_replace('0', ' ', $commentBinary);\n$steg = str_replace('1', \"\\t\", $steg);\n</code></pre>\n\n<p>Here is your output:</p>\n\n<pre><code>$jsonWithComment = $steg . $jsonMin;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I just found \"<a href=\"https://www.npmjs.org/package/grunt-strip-json-comments\" rel=\"nofollow\">grunt-strip-json-comments</a>\". </p>\n\n<blockquote>\n  <p>\u201cStrip comments from JSON. Lets you use comments in your JSON files!\u201d</p>\n</blockquote>\n\n<pre><code>{\n    // rainbows\n    \"unicorn\": /* \u2764 */ \"cake\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes, you can, but your parse will probably fail (there is no standard).</p>\n\n<p>To parse it you should remove those comments, or by hand, or using a regex exp:</p>\n\n<p>Replaces any comments like:</p>\n\n<pre><code>/****\n * Hey\n */\n</code></pre>\n\n<p><code>/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/</code></p>\n\n<p>Replaces any comments like:</p>\n\n<p><code>// Hey</code></p>\n\n<p><code>/\\/\\/.*/</code></p>\n\n<p>In javascript, you could do something like this:</p>\n\n<pre><code>jsonString = jsonString.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/, \"\").replace(/\\/\\/.*/,\"\")\nvar object = JSON.parse(jsonString);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If your context is Node.js configuration, you might consider JavaScript via <code>module.exports</code> as an alternative to JSON:</p>\n\n<pre><code>module.exports = {\n    \"key\": \"value\",\n\n    // And with comments!\n    \"key2\": \"value2\"\n};\n</code></pre>\n\n<p>The <code>require</code> syntax will still be the same. Being JavaScript, the file extension should be <code>.js</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using Newtonsoft.Json library with ASP.Net to read/deserialize you can use comments in the json content</p>\n\n<blockquote>\n  <p>//\"name\": \"string\"</p>\n  \n  <p>//\"id\": int</p>\n</blockquote>\n\n<p>or </p>\n\n<blockquote>\n  <p>/* This is a</p>\n  \n  <p>comment example */</p>\n</blockquote>\n\n<p><strong>PS:</strong> single line comments  only supported with 6+ versions of Newtonsoft Json</p>\n\n<p><strong>Additional Note for People Who Can't Think Out of The Box:</strong> I use JSON format for basic settings in an ASP.Net web application I made. I read the file, convert it into the settings object with Newtonsoft library and use when necessary.</p>\n\n<p>I prefer writing comments about each individual setting in the JSON file itself and I really don't care, integrity of JSON format as long as the library I use ok with it.</p>\n\n<p>I think this is an 'easy to use/understand' way than creating a separate 'settings.README' file and explaining the settings in it.</p>\n\n<p>If you have a problem with this kind of usage; sorry, the genie is out of the lamp. People would find other usages for JSON format and there is nothing you can do about it.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>We are using <a href=\"https://github.com/sindresorhus/strip-json-comments\" rel=\"nofollow\"><code>strip-json-comments</code></a> for our project. It supports something like:</p>\n\n<pre><code>/*\n * Description \n*/\n{\n    // rainbows\n    \"unicorn\": /* \u2764 */ \"cake\"\n}\n</code></pre>\n\n<p>Simply <code>npm install --save strip-json-comments</code> to install and use it like:</p>\n\n<pre><code>var strip_json_comments = require('strip-json-comments')\nvar json = '{/*rainbows*/\"unicorn\":\"cake\"}';\nJSON.parse(strip_json_comments(json));\n//=&gt; {unicorn: 'cake'}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>{\n\"// purpose of name\" :0,\n\"name\" : \"Jennie\",\n\n\"// reason for number\" :0,\n\"number\" : 867.5309\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                }
            ],
            "body": "<p>Can I comment a JSON file? If so, how?</p>\n",
            "last_activity_date": 1425245532,
            "question_id": 244777,
            "score": 1909,
            "tags": [
                "javascript",
                "json"
            ],
            "title": "Can I comment a JSON file?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>The best use case I can think of is in caching AJAX responses.  Here's a modified example from <a href=\"http://rmurphey.com/blog/2010/12/25/deferreds-coming-to-jquery/\" rel=\"nofollow\">Rebecca Murphey's intro post on the topic</a>:</p>\n\n<pre><code>var cache = {};\n\nfunction getData( val ){\n\n    // return either the cached value wrapped in a Promise, or\n    // jqXHR object (which contains a Promise)\n    return $.when(cache[ val ]) || $.ajax('/foo/', {\n        data: { value: val },\n        dataType: 'json',\n        success: function( resp ){\n            cache[ val ] = resp;\n        }\n    });\n}\n\ngetData('foo').then(function(resp){\n    // do something with the response, which may\n    // or may not have been retreived using an\n    // XHR request.\n});\n</code></pre>\n\n<p>Basically, if the value has already been requested once before it's returned immediately from the cache.  Otherwise, an AJAX request fetches the data and adds it to the cache.  The <code>$.when</code>/<code>.then</code> doesn't care about any of this; all you need to be concerned about is using the response, which is passed to the <code>.then()</code> handler in both cases. <a href=\"http://api.jquery.com/jQuery.when/\" rel=\"nofollow\"><code>jQuery.when()</code></a> handles a non-Promise/Deferred as a Completed one, immediately executing any <code>.done()</code> or <code>.then()</code> on the chain.</p>\n\n<p>Deferreds are perfect for when the task may or may not operate asynchronously, and you want to abstract that condition out of the code.</p>\n\n<p>Another real world example using the <code>$.when</code> helper:</p>\n\n<pre><code>$.when($.getJSON('/some/data/'), $.get('template.tpl')).then(function (data, tmpl) {\n\n    $(tmpl) // create a jQuery object out of the template\n    .tmpl(data) // compile it\n    .appendTo(\"#target\"); // insert it into the DOM\n\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 177
                },
                {
                    "body": "<p>Another use that I've been putting to good purpose is fetching data from multiple sources.  In the example below, I'm fetching multiple, independent JSON schema objects used in an existing application for validation between a client and a REST server.  In this case, I don't want the browser-side application to start loading data before it has all the schemas loaded.  $.when.apply().then() is perfect for this.  Thank to Raynos for pointers on using then(fn1, fn2) to monitor for error conditions.  </p>\n\n<pre><code>fetch_sources = function (schema_urls) {\n    var fetch_one = function (url) {\n            return $.ajax({\n                url: url,\n                data: {},\n                contentType: \"application/json; charset=utf-8\",\n                dataType: \"json\",\n            });\n        }\n    return $.map(schema_urls, fetch_one);\n}\n\nvar promises = fetch_sources(data['schemas']);\n$.when.apply(null, promises).then(\n\nfunction () {\n    var schemas = $.map(arguments, function (a) {\n        return a[0]\n    });\n    start_application(schemas);\n}, function () {\n    console.log(\"FAIL\", this, arguments);\n});     \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>You can use a deferred object to make a fluid design that works well in webkit browsers. Webkit browsers will fire resize event for each pixel the window is resized, unlike FF and IE which fire the event only once for each resize. As a result, you have no control over the order in which the functions bound to your window resize event will execute. Something like this solves the problem:</p>\n\n<pre><code>var resizeQueue = new $.Deferred(); //new is optional but it sure is descriptive\nresizeQueue.resolve();\n\nfunction resizeAlgorithm() {\n//some resize code here\n}\n\n$(window).resize(function() {\n    resizeQueue.done(resizeAlgorithm);\n});\n</code></pre>\n\n<p>This will serialize the execution of your code so that it executes as you intended it to. Beware of pitfalls when passing object methods as callbacks to a deferred. Once such method is executed as a callback to deferred, the 'this' reference will be overwritten with reference to the deferred object and will no longer refer to the object the method belongs to.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can also integrate it with any 3rd-party libraries which makes use of JQuery.</p>\n\n<p>One such library is Backbone, which is actually going to support Deferred in their next version. I have talked about it also on my <a href=\"http://a-developer-life.blogspot.com/2011/05/using-jquery-deferred-with-backbone.html\" rel=\"nofollow\">blog</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A deferred can be used in place of a mutex. This is essentially the same as the multiple ajax usage scenarios.</p>\n\n<p><strong>MUTEX</strong></p>\n\n<pre><code>var mutex = 2;\n\nsetTimeout(function() {\n callback();\n}, 800);\n\nsetTimeout(function() {\n callback();\n}, 500);\n\nfunction callback() {\n if (--mutex === 0) {\n  //run code\n }\n}\n</code></pre>\n\n<p><strong>DEFERRED</strong></p>\n\n<pre><code>function timeout(x) {\n var dfd = jQuery.Deferred();\n setTimeout(function() {\n  dfd.resolve();\n }, x);\n return dfd.promise();\n}\n\njQuery.when(\ntimeout(800), timeout(500)).done(function() {\n // run code\n});\n</code></pre>\n\n<p>When using a Deferred as a mutex only, watch out for performance impacts (http://jsperf.com/deferred-vs-mutex/2). Though the convenience, as well as additional benefits supplied by a Deferred is well worth it, and in actual (user driven event based) usage the performance impact should not be noticeable.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Here is a slightly different implementation of an AJAX cache as in <a href=\"http://stackoverflow.com/a/4874732/170132\">ehynd's answer</a>.</p>\n\n<p>As noted in <a href=\"http://stackoverflow.com/q/8960243/170132\">fortuneRice's follow-up question</a>, ehynd's implementation didn't actually prevent multiple identical requests if the requests were performed before one of them had returned. That is,</p>\n\n<pre><code>for (var i=0; i&lt;3; i++) {\n    getData(\"xxx\");\n}\n</code></pre>\n\n<p>will most likely result in 3 AJAX requests if the result for \"xxx\" has not already been cached before.</p>\n\n<p>This can be solved by caching the request's Deferreds instead of the result:</p>\n\n<pre><code>var cache = {};\n\nfunction getData( val ){\n\n    // Return a promise from the cache (if available)\n    // or create a new one (a jqXHR object) and store it in the cache.\n    var promise = cache[val];\n    if (!promise) {\n        promise = $.ajax('/foo/', {\n            data: { value: val },\n            dataType: 'json'\n        });\n        cache[val] = promise;\n    }\n    return promise;\n}\n\n$.when(getData('foo')).then(function(resp){\n    // do something with the response, which may\n    // or may not have been retreived using an\n    // XHR request.\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>Another example using <code>Deferred</code>s to implement a cache for any kind of computation (typically some performance-intensive or long-running tasks):</p>\n\n<pre><code>var ResultsCache = function(computationFunction, cacheKeyGenerator) {\n    this._cache = {};\n    this._computationFunction = computationFunction;\n    if (cacheKeyGenerator)\n        this._cacheKeyGenerator = cacheKeyGenerator;\n};\n\nResultsCache.prototype.compute = function() {\n    // try to retrieve computation from cache\n    var cacheKey = this._cacheKeyGenerator.apply(this, arguments);\n    var promise = this._cache[cacheKey];\n\n    // if not yet cached: start computation and store promise in cache \n    if (!promise) {\n        var deferred = $.Deferred();\n        promise = deferred.promise();\n        this._cache[cacheKey] = promise;\n\n        // perform the computation\n        var args = Array.prototype.slice.call(arguments);\n        args.push(deferred.resolve);\n        this._computationFunction.apply(null, args);\n    }\n\n    return promise;\n};\n\n// Default cache key generator (works with Booleans, Strings, Numbers and Dates)\n// You will need to create your own key generator if you work with Arrays etc.\nResultsCache.prototype._cacheKeyGenerator = function(args) {\n    return Array.prototype.slice.call(arguments).join(\"|\");\n};\n</code></pre>\n\n<p>Here is an example of using this class to perform some (simulated heavy) calculation:</p>\n\n<pre><code>// The addingMachine will add two numbers\nvar addingMachine = new ResultsCache(function(a, b, resultHandler) {\n    console.log(\"Performing computation: adding \" + a + \" and \" + b);\n    // simulate rather long calculation time by using a 1s timeout\n    setTimeout(function() {\n        var result = a + b;\n        resultHandler(result);\n    }, 1000);\n});\n\naddingMachine.compute(2, 4).then(function(result) {\n    console.log(\"result: \" + result);\n});\n\naddingMachine.compute(1, 1).then(function(result) {\n    console.log(\"result: \" + result);\n});\n\n// cached result will be used\naddingMachine.compute(2, 4).then(function(result) {\n    console.log(\"result: \" + result);\n});\n</code></pre>\n\n<p>The same underlying cache could be used to cache Ajax requests:</p>\n\n<pre><code>var ajaxCache = new ResultsCache(function(id, resultHandler) {\n    console.log(\"Performing Ajax request for id '\" + id + \"'\");\n    $.getJSON('http://jsfiddle.net/echo/jsonp/?callback=?', {value: id}, function(data) {\n        resultHandler(data.value);\n    });\n});\n\najaxCache.compute(\"anID\").then(function(result) {\n    console.log(\"result: \" + result);\n});\n\najaxCache.compute(\"anotherID\").then(function(result) {\n    console.log(\"result: \" + result);\n});\n\n// cached result will be used\najaxCache.compute(\"anID\").then(function(result) {\n    console.log(\"result: \" + result);\n});\n</code></pre>\n\n<p>You can play with the above code in <a href=\"http://jsfiddle.net/green/7zb3Z/\">this jsFiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>1) Use it to ensure an ordered execution of callbacks:</p>\n\n<pre><code>var step1 = new Deferred();\nvar step2 = new Deferred().done(function() { return step1 });\nvar step3 = new Deferred().done(function() { return step2 });\n\nstep1.done(function() { alert(\"Step 1\") });\nstep2.done(function() { alert(\"Step 2\") });\nstep3.done(function() { alert(\"All done\") });\n//now the 3 alerts will also be fired in order of 1,2,3\n//no matter which Deferred gets resolved first.\n\nstep2.resolve();\nstep3.resolve();\nstep1.resolve();\n</code></pre>\n\n<p>2) Use it to verify the status of the app:</p>\n\n<pre><code>var loggedIn = logUserInNow(); //deferred\nvar databaseReady = openDatabaseNow(); //deferred\n\njQuery.when(loggedIn, databaseReady).then(function() {\n  //do something\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This is a self-promotional answer, but I spent a few months researching this and presented the results at jQuery Conference San Francisco 2012. </p>\n\n<p>Here is a free video of the talk:</p>\n\n<p><a href=\"http://www.confreaks.com/videos/993-jqcon2012-i-promise-to-show-you-when-to-use-deferreds\">http://www.confreaks.com/videos/993-jqcon2012-i-promise-to-show-you-when-to-use-deferreds</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I've just used Deferred in real code. In project <a href=\"https://github.com/jcubic/jquery.terminal/\" rel=\"nofollow\">jQuery Terminal</a> I have function exec that call commands defined by user (like he was entering it and pressing enter), I've added Deferreds to the API and call exec with arrays. like this:</p>\n\n<pre><code>terminal.exec('command').then(function() {\n   terminal.echo('command finished');\n});\n</code></pre>\n\n<p>or </p>\n\n<pre><code>terminal.exec(['command 1', 'command 2', 'command 3']).then(function() {\n   terminal.echo('all commands finished');\n});\n</code></pre>\n\n<p>the commands can run async code, and exec need to call user code in order. My first api use pair of pause/resume calls and in new API I call those automatic when user return promise. So user code can just use</p>\n\n<pre><code>return $.get('/some/url');\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var d = new $.Deferred();\nsetTimeout(function() {\n    d.resolve(\"Hello Deferred\"); // resolve value will be echoed\n}, 500);\nreturn d.promise();\n</code></pre>\n\n<p>I use code like this:</p>\n\n<pre><code>exec: function(command, silent, deferred) {\n    var d;\n    if ($.isArray(command)) {\n        return $.when.apply($, $.map(command, function(command) {\n            return self.exec(command, silent);\n        }));\n    }\n    // both commands executed here (resume will call Term::exec)\n    if (paused) {\n        // delay command multiple time\n        d = deferred || new $.Deferred();\n        dalyed_commands.push([command, silent, d]);\n        return d.promise();\n    } else {\n        // commands may return promise from user code\n        // it will resolve exec promise when user promise\n        // is resolved\n        var ret = commands(command, silent, true, deferred);\n        if (!ret) {\n            if (deferred) {\n                deferred.resolve(self);\n                return deferred.promise();\n            } else {\n                d = new $.Deferred();\n                ret = d.promise();\n                ret.resolve();\n            }\n        }\n        return ret;\n    }\n},\n</code></pre>\n\n<p>dalyed_commands is used in resume function that call exec again with all dalyed_commands.</p>\n\n<p>and part of the commands function (I've stripped not related parts)</p>\n\n<pre><code>function commands(command, silent, exec, deferred) {\n\n    var position = lines.length-1;\n    // Call user interpreter function\n    var result = interpreter.interpreter(command, self);\n    // user code can return a promise\n    if (result != undefined) {\n        // new API - auto pause/resume when using promises\n        self.pause();\n        return $.when(result).then(function(result) {\n            // don't echo result if user echo something\n            if (result &amp;&amp; position === lines.length-1) {\n                display_object(result);\n            }\n            // resolve promise from exec. This will fire\n            // code if used terminal::exec('command').then\n            if (deferred) {\n                deferred.resolve();\n            }\n            self.resume();\n        });\n    }\n    // this is old API\n    // if command call pause - wait until resume\n    if (paused) {\n        self.bind('resume.command', function() {\n            // exec with resume/pause in user code\n            if (deferred) {\n                deferred.resolve();\n            }\n            self.unbind('resume.command');\n        });\n    } else {\n        // this should not happen\n        if (deferred) {\n            deferred.resolve();\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The answer by ehynds will not work, because it caches the responses data. It should cache the jqXHR which is also a Promise.\nHere is the correct code:</p>\n\n<pre><code>var cache = {};\n\nfunction getData( val ){\n\n    // return either the cached value or an\n    // jqXHR object (which contains a promise)\n    return cache[ val ] || $.ajax('/foo/', {\n        data: { value: val },\n        dataType: 'json',\n        success: function(data, textStatus, jqXHR){\n            cache[ val ] = jqXHR;\n        }\n    });\n}\n\ngetData('foo').then(function(resp){\n    // do something with the response, which may\n    // or may not have been retreived using an\n    // XHR request.\n});\n</code></pre>\n\n<p>The answer by Julian D. will work correct and is a better solution.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>jQuery 1.5 brings the new Deferred object and the attached methods <a href=\"http://api.jquery.com/jQuery.when/\"><code>.when</code></a>, <a href=\"http://api.jquery.com/category/deferred-object/\"><code>.Deferred</code></a> and <a href=\"https://github.com/jquery/jquery/blob/1.5/src/core.js#L808\"><code>._Deferred</code></a>.</p>\n\n<p>For those who havn't used <code>.Deferred</code> before I've annotated the source for <a href=\"http://jsfiddle.net/Raynos/Hufjr/\">it</a></p>\n\n<p>What are the possible usages of these new methods, how do we go about fitting them into patterns?</p>\n\n<p>I have already read the <a href=\"http://api.jquery.com/category/deferred-object/\">API</a> and the <a href=\"https://github.com/jquery/jquery/blob/1.5/src/core.js#L892\">source</a>, so I know what it does. My question is how can we use these new features in everyday code?</p>\n\n<p>I have a simple <a href=\"http://jsfiddle.net/Raynos/Vg5sY/9/\">example</a> of a buffer class that calls AJAX request in order. (Next one start after previous one finishes).</p>\n\n<pre><code>/* Class: Buffer\n *  methods: append\n *\n *  Constructor: takes a function which will be the task handler to be called\n *\n *  .append appends a task to the buffer. Buffer will only call a task when the \n *  previous task has finished\n */\nvar Buffer = function(handler) {\n    var tasks = [];\n    // empty resolved deferred object\n    var deferred = $.when();\n\n    // handle the next object\n    function handleNextTask() {\n        // if the current deferred task has resolved and there are more tasks\n        if (deferred.isResolved() &amp;&amp; tasks.length &gt; 0) {\n            // grab a task\n            var task = tasks.shift();\n            // set the deferred to be deferred returned from the handler\n            deferred = handler(task);\n            // if its not a deferred object then set it to be an empty deferred object\n            if (!(deferred &amp;&amp; deferred.promise)) {\n                deferred = $.when();\n            }\n            // if we have tasks left then handle the next one when the current one \n            // is done.\n            if (tasks.length &gt; 0) {\n                deferred.done(handleNextTask);\n            }\n        }\n    }\n\n    // appends a task.\n    this.append = function(task) {\n        // add to the array\n        tasks.push(task);\n        // handle the next task\n        handleNextTask();\n    };\n};\n</code></pre>\n\n<p>I'm looking for demonstrations and possible uses of <code>.Deferred</code> and <code>.when</code>.</p>\n\n<p>It would also be lovely to see examples of <code>._Deferred</code>. </p>\n\n<p>Linking to the new <a href=\"https://github.com/jquery/jquery/blob/1.5/src/ajax.js\"><code>jQuery.ajax</code></a> source for examples is cheating.</p>\n\n<p><strong>Bounty:</strong> Show us what techniques are available when we abstract away whether an operation is synchronously or asynchronously done.</p>\n",
            "last_activity_date": 1424125439,
            "question_id": 4869609,
            "score": 226,
            "tags": [
                "javascript",
                "jquery",
                "jquery-deferred"
            ],
            "title": "How can jQuery deferred be used?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Actually, your code will pretty much work as is, just declare your callback as an argument and you can call it directly using the argument name.</p>\n\n<h3>The basics</h3>\n\n<pre><code>function doSomething(callback) {\n    // ...\n\n    // Call the callback\n    callback('stuff', 'goes', 'here');\n}\n\nfunction foo(a, b, c) {\n    // I'm the callback\n    alert(a + \" \" + b + \" \" + c);\n}\n\ndoSomething(foo);\n</code></pre>\n\n<p>That will call <code>doSomething</code>, which will call <code>foo</code>, which will alert \"stuff goes here\".</p>\n\n<p>Note that it's very important to pass the function <em>reference</em> (<code>foo</code>), rather than calling the function and passing its result (<code>foo()</code>). In your question, you do it properly, but it's just worth pointing out because it's a common error.</p>\n\n<h3>More advanced stuff</h3>\n\n<p>Sometimes you want to call the callback in a specific <em>context</em>&nbsp;&mdash; e.g., so the <code>this</code> value inside the callback has a specific value. You can easily do that with the JavaScript <code>call</code> function:</p>\n\n<pre><code>function Thing(name) {\n    this.name = name;\n}\nThing.prototype.doSomething = function(callback) {\n    // Call our callback, but using our own instance as the context\n    callback.call(this);\n}\n\nfunction foo() {\n    alert(this.name);\n}\n\nvar t = new Thing('Joe');\nt.doSomething(foo);  // Alerts \"Joe\" via `foo`\n</code></pre>\n\n<p>You can also pass parameters:</p>\n\n<pre><code>function Thing(name) {\n    this.name = name;\n}\nThing.prototype.doSomething = function(callback, salutation) {\n    // Call our callback, but using our own instance as the context\n    callback.call(this, salutation);\n}\n\nfunction foo(salutation) {\n    alert(salutation + \" \" + this.name);\n}\n\nvar t = new Thing('Joe');\nt.doSomething(foo, 'Hi');  // Alerts \"Hi Joe\" via `foo`\n</code></pre>\n\n<p>Sometimes it's useful to pass the arguments you want to give the callback as an array, rather than individually. You can use <code>apply</code> to do that:</p>\n\n<pre><code>function Thing(name) {\n    this.name = name;\n}\nThing.prototype.doSomething = function(callback) {\n    // Call our callback, but using our own instance as the context\n    callback.apply(this, ['Hi', 3, 2, 1]);\n}\n\nfunction foo(salutation, three, two, one) {\n    alert(salutation + \" \" + this.name + \" - \" + three + \" \" + two + \" \" + one);\n}\n\nvar t = new Thing('Joe');\nt.doSomething(foo);  // Alerts \"Hi Joe - 3 2 1\" via `foo`\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 270
                },
                {
                    "body": "<pre><code>function LoadData(callback) \n{\n    alert('the data have been loaded');\n    callback(loadedData, currentObject);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try:</p>\n\n<pre><code>function LoadData (callback)\n{\n    // ... Process whatever data\n    callback (loadedData, currentObject);\n}\n</code></pre>\n\n<p>Functions are first class in <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"nofollow\">JavaScript</a>; you can just pass them around.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It is good practice to make sure the callback is an actual function before attempting to execute it:</p>\n\n<pre><code>if (callback &amp;&amp; typeof(callback) === \"function\") {\n\n  callback();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>My 2 cent. Same but different...</p>\n\n<pre><code>&lt;script&gt;\n    dosomething(\"blaha\", function(){\n        alert(\"Yay just like jQuery callbacks!\");\n    });\n\n\n    function dosomething(damsg, callback){\n        alert(damsg);\n        if(typeof callback == \"function\") \n        callback();\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>   function callback(e){\n      return e;\n   }\n    var MyClass = {\n       method: function(args, callback){\n          console.log(args);\n          if(typeof callback == \"function\")\n          callback();\n       }    \n    }\n</code></pre>\n\n<p>==============================================</p>\n\n<pre><code>MyClass.method(\"hello\",function(){\n    console.log(\"world !\");\n});\n</code></pre>\n\n<p>==============================================</p>\n\n<p>Result is:</p>\n\n<pre><code>hello world !\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>All I need to do is to execute a callback function when my current function execution ends.</p>\n\n<pre><code>function LoadData() \n{\n    alert('The data has been loaded');\n    //Call my callback with parameters. For example,\n    //callback(loadedData , currentObject);\n}\n</code></pre>\n\n<p>A consumer for this function should be like this:</p>\n\n<pre><code>object.LoadData(success);\n\nfunction success(loadedData , currentObject) \n{\n  //Todo: some action here \n}\n</code></pre>\n\n<p>How do I implement this?</p>\n",
            "last_activity_date": 1407272704,
            "question_id": 2190850,
            "score": 132,
            "tags": [
                "javascript"
            ],
            "title": "Create a custom callback in JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Wow, that's cool.  I haven't dived into the gmail source to figure it out yet (I did with the drag-out functionality), but I'm guessing that it's an extension of the drag/drop API that chrome has already extended.  There's a decent write-up on how the drag-to-desktop feature works: <a href=\"http://www.thecssninja.com/javascript/gmail-dragout\" rel=\"nofollow\">http://www.thecssninja.com/javascript/gmail-dragout</a> that may at least point you in the right direction.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I spent some time experimenting with this.  It seems to sort of follow the new <a href=\"http://dev.w3.org/2006/webapi/clipops/\">Clipboard API spec</a>.  You can define a \"paste\" event handler and look at event.clipboardData.items, and call getAsFile() on them to get a Blob.  Once you have a Blob, you can use <a href=\"https://developer.mozilla.org/en/DOM/FileReader\">FileReader</a> on it to see what's in it.  This is how you can get a data url for the stuff you just pasted in Chrome:</p>\n\n<pre><code>// window.addEventListener('paste', ... or\ndocument.onpaste = function(event){\n  var items = (event.clipboardData || event.originalEvent.clipboardData).items;\n  console.log(JSON.stringify(items)); // will give you the mime types\n  var blob = items[0].getAsFile();\n  var reader = new FileReader();\n  reader.onload = function(event){\n    console.log(event.target.result)}; // data url!\n  reader.readAsDataURL(blob);\n}\n</code></pre>\n\n<p>Once you have a data url you can display the image on the page.  If you want to upload it instead, you could use readAsBinaryString, or you could probably put it into an XHR using <a href=\"https://developer.mozilla.org/en/XMLHttpRequest/FormData\">FormData</a> (I haven't tested this yet).</p>\n",
                    "is_accepted": true,
                    "score": 105
                },
                {
                    "body": "<p>Here's a smooth jQuery plugin wrapping up the whole deal (basically the same principles as <a href=\"http://stackoverflow.com/questions/6333814/how-does-the-paste-image-from-clipboard-functionality-work-in-gmail-and-google-ch/6338207#6338207\">Nick's answer</a>): <a href=\"http://strd6.com/2011/09/html5-javascript-pasting-image-data-in-chrome/\">http://strd6.com/2011/09/html5-javascript-pasting-image-data-in-chrome/</a></p>\n\n<p>It's got a live demo, annotated source code, and everything.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>The answer by Nick seems to need small changes to still work :)</p>\n\n<pre><code>// window.addEventListener('paste', ... or\ndocument.onpaste = function (event) {\n  // use event.originalEvent.clipboard for newer chrome versions\n  var items = (event.clipboardData  || event.originalEvent.clipboardData).items;\n  console.log(JSON.stringify(items)); // will give you the mime types\n  // find pasted image among pasted items\n  var blob = null;\n  for (var i = 0; i &lt; items.length; i++) {\n    if (items[i].type.indexOf(\"image\") === 0) {\n      blob = items[i].getAsFile();\n    }\n  }\n  // load image if there is a pasted image\n  if (blob !== null) {\n    var reader = new FileReader();\n    reader.onload = function(event) {\n      console.log(event.target.result); // data url!\n    };\n    reader.readAsDataURL(blob);\n  }\n}\n</code></pre>\n\n<p>Example running code: <a href=\"http://jsfiddle.net/bt7BU/225/\" rel=\"nofollow\">http://jsfiddle.net/bt7BU/225/</a></p>\n\n<p>So the changes to nicks answer were:</p>\n\n<pre><code>var items = event.clipboardData.items;\n</code></pre>\n\n<p>to </p>\n\n<pre><code>var items = (event.clipboardData  || event.originalEvent.clipboardData).items;\n</code></pre>\n\n<p>Also I had to take the second element from the pasted items (first one seems to be text/html if you copy an image from another web page into the buffer). So I changed</p>\n\n<pre><code>  var blob = items[0].getAsFile();\n</code></pre>\n\n<p>to a loop finding the item containing the image (see above)</p>\n\n<p>I didn't know how to answer directly to Nick's answer, hope it is fine here :$ :)</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Web browsers keep marching forward. I recently found this:</p>\n\n<p><a href=\"http://joelb.me/blog/2011/code-snippet-accessing-clipboard-images-with-javascript/\" rel=\"nofollow\">Code Snippet \u2014 Accessing Clipboard Images with Javascript</a></p>\n\n<p>and this:</p>\n\n<p><a href=\"http://css.dzone.com/articles/paste-wasteland-or-why-onpaste\" rel=\"nofollow\">The Paste Wasteland (or, why the onPaste event is a mess)</a></p>\n\n<p>The first link describes a way to get clipboard images using JavaScript only on Firefox and Chrome. The second link contains a postscript that mentions the same technique was adapted to IE (unknown version).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As far as I know -</p>\n\n<p>With HTML 5 features(File Api and the related) - accessing clipboard image data is now possible with plain javascript.</p>\n\n<p>This however fails to work on IE (anything less than IE 10). Don't know much about IE10 support also.</p>\n\n<p>For IE the optiens that I believe are the 'fallback' options are \neither using Adobe's AIR api\nor \nusing a signed applet</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I noticed a <a href=\"http://gmailblog.blogspot.com/2011/06/pasting-images-into-messages-just-got.html\">blog post from Google</a> that mentions the ability to paste images directly from the clipboard into a Gmail message if you're using the latest version of Chrome.  I tried this with my version of Chrome (12.0.742.91 beta-m) and it works great using control keys or the context menu.  </p>\n\n<p>From that behavior I need to assume that the latest version of webkit used in Chrome is able to deal with images in the Javascript paste event, but I have been unable to locate any references to such an enhancement.  I believe <a href=\"http://code.google.com/p/zeroclipboard/\">ZeroClipboard</a> binds to keypress events to trigger its flash functionality and as such wouldn't work through the context menu (also, ZeroClipboard is cross-browser and the post says this works only with Chrome).  </p>\n\n<p>So, how does this work and where the enhancement was made to Webkit (or Chrome) that enables the functionality?</p>\n",
            "last_activity_date": 1423656429,
            "question_id": 6333814,
            "score": 66,
            "tags": [
                "javascript",
                "html5",
                "google-chrome",
                "webkit"
            ],
            "title": "How does the paste image from clipboard functionality work in Gmail and Google Chrome 12+?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The solution I originally posted is questionable (is a dirty hack). The tweaked behaviour has changed in Microsoft.AspNet.Web.Optimization package and the tweak does not work anymore, as pointed out by many commenters. Right now I cannot reproduce the issue at all with the version 1.1.3 of the package.</p>\n\n<p>Please see sources of System.Web.Optimization.BundleCollection (you can use <a href=\"http://www.jetbrains.com/decompiler/\">dotPeek</a> for example) for better understanding of what you are about to do. \nAlso read <a href=\"http://stackoverflow.com/a/12901050/1178142\">Max Shmelev's answer</a>.</p>\n\n<p><strong>Original answer</strong>: </p>\n\n<p>Either rename .min.js to .js or do something like </p>\n\n<pre><code>    public static void AddDefaultIgnorePatterns(IgnoreList ignoreList)\n    {\n        if (ignoreList == null)\n            throw new ArgumentNullException(\"ignoreList\");\n        ignoreList.Ignore(\"*.intellisense.js\");\n        ignoreList.Ignore(\"*-vsdoc.js\");\n        ignoreList.Ignore(\"*.debug.js\", OptimizationMode.WhenEnabled);\n        //ignoreList.Ignore(\"*.min.js\", OptimizationMode.WhenDisabled);\n        ignoreList.Ignore(\"*.min.css\", OptimizationMode.WhenDisabled);\n    }\n\n    public static void RegisterBundles(BundleCollection bundles)\n    {\n        bundles.IgnoreList.Clear();\n        AddDefaultIgnorePatterns(bundles.IgnoreList);\n        //NOTE: it's bundles.DirectoryFilter in Microsoft.AspNet.Web.Optimization.1.1.3 and not bundles.IgnoreList\n\n        //...your code\n     }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 208
                },
                {
                    "body": "<p>Microsoft implies the following behavior (and I prefer to follow it in my projects):</p>\n\n<h2>short version</h2>\n\n<ol>\n<li>You have both debug and minified versions of a script in your project under the same folder:\n<ul>\n<li><strong>script.js</strong></li>\n<li><strong>script.min.js</strong></li>\n</ul></li>\n<li>You add only <strong>script.js</strong> to a bundle in your code.</li>\n</ol>\n\n<p>As a result you will <strong>automatically</strong> have the <strong>script.js</strong> included in <strong>DEBUG</strong> mode and <strong>script.min.js</strong> in <strong>RELEASE</strong> mode.</p>\n\n<h2>long version</h2>\n\n<p>You can have also <strong>.debug.js</strong> version. In that case the file is included in the following priority in DEBUG:</p>\n\n<ol>\n<li><strong>script.debug.js</strong></li>\n<li><strong>script.js</strong></li>\n</ol>\n\n<p>in RELEASE:</p>\n\n<ol>\n<li><strong>script.min.js</strong></li>\n<li><strong>script.js</strong></li>\n</ol>\n\n<h2>note</h2>\n\n<p>And by the way, the only reason to have a <strong>.min</strong> versions of your scripts in MVC4 is the case when the minified version can not be processed automatically. For example the following code can not be obfuscated automatically:</p>\n\n<pre><code>if (DEBUG) console.log(\"Debug message\");\n</code></pre>\n\n<p>In all the other cases you can go with just a debug version of your script.</p>\n",
                    "is_accepted": false,
                    "score": 122
                },
                {
                    "body": "<p>For my case, I was using the (wonderful!) Knockout.js library which comes as Debug/Non versions:</p>\n\n<pre><code>\"~/Scripts/knockout-{Version}.js\"\n\"~/Scripts/knockout-{Version}.Debug.js\"\n</code></pre>\n\n<p>To make this work, I included \"Knockout-{Version}.js\" (non-debug) in my Bundle and got the .debug. js file in Debug mode.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Folks\nI would just keep it simply until Microsoft gets it act together</p>\n\n<p>Try this</p>\n\n<p>In RegisterBundles create this bundle for Kendo</p>\n\n<pre><code>bundles.Add(new StyleBundle(\"~/Content/kendo/css\").Include(\n                    \"~/Content/kendo/2012.3.1121/kendo.common.min.css\",\n                     \"~/Content/kendo/2012.3.1121/kendo.dataviz.min.css\",\n                      \"~/Content/kendo/2012.3.1121/kendo.blueopal.min.css\"\n ));\n</code></pre>\n\n<p>In _Layout.cshtml put this:</p>\n\n<pre><code>@if (HttpContext.Current.IsDebuggingEnabled)\n { \n&lt;link href=\"@Url.Content(\"~/Content/kendo/2012.3.1121/kendo.common.min.css\")\"      \nrel=\"stylesheet\"  type=\"text/css\" /&gt;\n&lt;link href=\"@Url.Content(\"~/Content/kendo/2012.3.1121/kendo.dataviz.min.css\")\" \nrel=\"stylesheet\" type=\"text/css\" /&gt;   \n&lt;link href=\"@Url.Content(\"~/Content/kendo/2012.3.1121/kendo.blueopal.min.css\")\"    \nrel=\"stylesheet\" type=\"text/css\" /&gt;\n }\n else\n {\n     @Styles.Render(\"~/Content/kendo/css\")   \n }\n</code></pre>\n\n<p>This way we get best of bundles in Production and a reference in Debug </p>\n\n<p>Fix it up when Microsoft fixes their MVC 4 Code</p>\n",
                    "is_accepted": false,
                    "score": -18
                },
                {
                    "body": "<p>Bundler have a lot of benefits <a href=\"http://go.microsoft.com/fwlink/?LinkId=254725\" rel=\"nofollow\">check this page</a> <strong>BUT</strong>:</p>\n\n<p>The Microsoft MVC4 Platform Considers that you have at least both minified version &amp; unminified version for each Script or Style Bundle(another files like Debug and vsdoc are available too). So We have trouble in situations that there is only one of these files.</p>\n\n<p>You can change debug state in web.config file permanently to handle output:</p>\n\n<pre><code>&lt;compilation debug=\"false\" targetFramework=\"4.0\" /&gt;\n</code></pre>\n\n<p>See the output changes! File filtering changed. To meet the purpose we must change ignore case filtration that will change application logic! </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If all you have is a minified version of a file, the simplest solution I've found is to copy the minified file, remove .min from the copied file's name, then reference the non-minified file name in your bundle.</p>\n\n<p>For example, let's say you purchased a js component and they gave you a file called some-lib-3.2.1.min.js. To use this file in a bundle, do the following:</p>\n\n<ol>\n<li><p>Copy some-lib-3.2.1.min.js and rename the copied file to some-lib-3.2.1.js. Include both files in your project.</p></li>\n<li><p>Reference the non-minified file in your bundle, like this:</p>\n\n<pre><code>bundles.Add(new ScriptBundle(\"~/bundles/libraries\").Include(\n    \"~/Scripts/some-lib-{version}.js\"\n));\n</code></pre></li>\n</ol>\n\n<p>Just because the file without 'min' in the name is actually minified shouldn't cause any issues (other than the fact it's essentially unreadable). It's only used in debug mode and gets written out as a separate script. When not in debug mode the pre-compiled min file should be included in your bundle.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>An easy way just Rename the .min file for example you have abc.min.css than just rename this file to abc_min.css and add this to your bundle. I know its not the right way to do it, but just a temporary solution. thanks and happy coding.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a weird issue with the mvc4 bundler not including files with extension .min.js</p>\n\n<p>In my BundleConfig class, I declare</p>\n\n<pre><code>public static void RegisterBundles(BundleCollection bundles)\n{\n    bundles.Add(new ScriptBundle(\"~/Scripts/jquery\")\n        .Include(\"~/Scripts/jquery-1.8.0.js\")\n        .Include(\"~/Scripts/jquery.tmpl.min.js\"));            \n}\n</code></pre>\n\n<p>In my view, I declare</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n    @Scripts.Render(\"~/Scripts/jquery\")\n    &lt;/head&gt;&lt;body&gt;test&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And when it renders, it only renders</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n         &lt;script src=\"/Scripts/jquery-1.8.0.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;test&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If I rename the jquery.tmpl.min.js to jquery.tmpl.js (and update the path in the bundle accordingly), both scripts are rendered correctly.</p>\n\n<p>Is there some config setting that is causing it to ignore '.min.js' files?</p>\n",
            "last_activity_date": 1420787183,
            "question_id": 11980458,
            "score": 187,
            "tags": [
                "c#",
                "javascript",
                "asp.net-mvc-4",
                "bundling-and-minification"
            ],
            "title": "Bundler not including .min files"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p><strong>Note</strong>: this answer is for Express 2. See <a href=\"http://stackoverflow.com/a/12008719/21115\">here</a> for Express 3.</p>\n\n<p>If you're using connect/express, you should use the <a href=\"https://github.com/senchalabs/connect/blob/master/lib/middleware/bodyParser.js\" rel=\"nofollow\">bodyParser middleware</a>: It's described in the <a href=\"http://expressjs.com/guide.html\" rel=\"nofollow\">Expressjs guide</a>.</p>\n\n<pre><code>// example using express.js:\nvar express = require('express')\n  , app = express.createServer();\napp.use(express.bodyParser());\napp.post('/', function(req, res){\n  var email = req.param('email', null);  // second parameter is default\n});\n</code></pre>\n\n<p>Here's the original connect-only version:</p>\n\n<pre><code>// example using just connect\nvar connect = require('connect');\nvar url = require('url');\nvar qs = require('qs');\nvar server = connect(\n  connect.bodyParser(),\n  connect.router(function(app) {\n    app.post('/userlogin', function(req, res) {\n      // the bodyParser puts the parsed request in req.body.\n      var parsedUrl = qs.parse(url.parse(req.url).query);\n      var email = parsedUrl.email || req.body.email;;\n    });\n  })\n);\n</code></pre>\n\n<p>Both the querystring and body are parsed using <a href=\"https://github.com/visionmedia/node-querystring\" rel=\"nofollow\">Rails-style parameter handling (<code>qs</code>)</a> rather than the <a href=\"http://nodejs.org/docs/v0.4.6/api/querystring.html\" rel=\"nofollow\">low-level <code>querystring</code> library</a>. In order to parse repeated parameters with <code>qs</code>, the parameter needs to have brackets: <code>name[]=val1&amp;name[]=val2</code>. It also supports nested maps. In addition to parsing HTML form submissions, the bodyParser can parse JSON requests automatically.</p>\n\n<p><strong>Edit</strong>: I read up on express.js and modified my answer to be more natural to users of Express.</p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>Given some form: </p>\n\n<pre><code>&lt;form action='/somepath' method='post'&gt;\n   &lt;input type='text' name='name'&gt;&lt;/input&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Using express</p>\n\n<pre><code>app.post('/somepath', function(req, res) {\n\n    console.log(JSON.stringify(req.body));\n\n    console.log('req.body.name', req.body['name']);\n});\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>{\"name\":\"x\",\"description\":\"x\"}\nreq.param.name x\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>app.use(express.bodyParser());\n</code></pre>\n\n<p>Then for <code>app.post</code> request you can get post values via <code>req.body.{post request variable}</code>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Things have <a href=\"https://github.com/senchalabs/connect#middleware\">changed</a> again in <strong>Express 4.0</strong>:</p>\n\n<pre><code>$ npm install --save body-parser\n</code></pre>\n\n<p>and then:</p>\n\n<pre><code>var bodyParser = require('body-parser')\napp.use( bodyParser.json() );       // to support JSON-encoded bodies\napp.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n  extended: true\n})); \n</code></pre>\n\n<p>The rest is like in <strong>Express 3.0</strong>:</p>\n\n<p>Firstly you need to add some middleware to parse the post data of the body.</p>\n\n<p>Add one or both of the following lines of code:</p>\n\n<pre><code>app.use(express.json());       // to support JSON-encoded bodies\napp.use(express.urlencoded()); // to support URL-encoded bodies\n</code></pre>\n\n<p>Then, in your handler, use the <a href=\"http://expressjs.com/api.html#req.body\"><code>req.body</code></a> object:</p>\n\n<pre><code>// assuming POST: name=foo&amp;color=red            &lt;-- URL encoding\n//\n// or       POST: {\"name\":\"foo\",\"color\":\"red\"}  &lt;-- JSON encoding\n\napp.post('/test-page', function(req, res) {\n    var name = req.body.name,\n        color = req.body.color;\n    // ...\n});\n</code></pre>\n\n<hr>\n\n<p>Note that the use of <a href=\"http://expressjs.com/api.html#bodyParser\"><code>express.bodyParser()</code></a> is not recommended.</p>\n\n<pre><code>app.use(express.bodyParser());\n</code></pre>\n\n<p>...is equivalent to:</p>\n\n<pre><code>app.use(express.json());\napp.use(express.urlencoded());\napp.use(express.multipart());\n</code></pre>\n\n<p>Security concerns exist with <code>express.multipart()</code>, and so it is better to explicitly add support for the specific encoding type(s) you require. If you do need multipart encoding (to support uploading files for example) then you should <a href=\"https://groups.google.com/forum/#!msg/express-js/iP2VyhkypHo/5AXQiYN3RPcJ\">read this</a>.</p>\n",
                    "is_accepted": true,
                    "score": 340
                },
                {
                    "body": "<p><strong>Security concern using express.bodyParser()</strong></p>\n\n<p>While all the other answers currently recommend using the <code>express.bodyParser()</code> middleware, this is actually a wrapper around the <code>express.json()</code>, <code>express.urlencoded()</code>, and <code>express.multipart()</code> middlewares (<a href=\"http://expressjs.com/api.html#bodyParser\">http://expressjs.com/api.html#bodyParser</a>).  The parsing of form request bodies is done by the <code>express.urlencoded()</code> middleware and is all that you need to expose your form data on <code>req.body</code> object.</p>\n\n<p>Due to a <a href=\"https://groups.google.com/forum/#!msg/express-js/iP2VyhkypHo/5AXQiYN3RPcJ\">security concern</a> with how <code>express.multipart()</code>/<code>connect.multipart()</code> creates temporary files for all uploaded files (and are not garbage collected), it is now <em><a href=\"https://github.com/senchalabs/connect/wiki/Connect-3.0\">recommended</a></em> not to use the <code>express.bodyParser()</code> wrapper but instead use only the middlewares you need.</p>\n\n<p>Note: <code>connect.bodyParser()</code> will soon be updated to only include <code>urlencoded</code> and <code>json</code> when Connect 3.0 is released (which Express extends).</p>\n\n<hr>\n\n<p>So in short, instead of ...</p>\n\n<pre><code>app.use(express.bodyParser());\n</code></pre>\n\n<p>...you should use</p>\n\n<pre><code>app.use(express.urlencoded());\napp.use(express.json());      // if needed\n</code></pre>\n\n<p>and if/when you need to handle multipart forms (file uploads), use a third party library or middleware such as multiparty, busboy, dicer, etc.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>You shoudn't use <strong>app.use(express.bodyParser())</strong>. BodyParser is a union of json + urlencoded + mulitpart. You shoudn't use this because multipart will be removed in connect 3.0.</p>\n\n<p>To resolve that, you can do this:</p>\n\n<pre><code>app.use(express.json());\napp.use(express.urlencoded());\n</code></pre>\n\n<p>It\u00b4s very important know that <strong>app.use(app.router)</strong> should be used after the json and urlencoded, otherwise it does not work!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Note for Express 4 users:</strong></p>\n\n<p>If you try and put <code>app.use(express.bodyParser());</code> into your app, you'll get the following error when you try to start your Express server:</p>\n\n<blockquote>\n  <p>Error: Most middleware (like bodyParser) is no longer bundled with Express and must be installed separately. Please see <a href=\"https://github.com/senchalabs/connect#middleware\">https://github.com/senchalabs/connect#middleware</a>.</p>\n</blockquote>\n\n<p>You'll have to install the package <code>body-parser</code> separately <a href=\"https://www.npmjs.org/package/body-parser\">from npm</a>, then use something like the following (example taken from <a href=\"https://github.com/expressjs/body-parser\">the GitHub page</a>):</p>\n\n<pre><code>var express    = require('express');\nvar bodyParser = require('body-parser');\n\nvar app = express();\n\napp.use(bodyParser());\n\napp.use(function (req, res, next) {\n  console.log(req.body) // populated!\n  next();\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<h2>Update for Express 4.4.1</h2>\n\n<p>Middleware of the following is removed from Express.</p>\n\n<ul>\n<li>bodyParser</li>\n<li>json</li>\n<li>urlencoded</li>\n<li>multipart</li>\n</ul>\n\n<p>When you use the middleware directly like you did in express 3.0. You will get the following error:</p>\n\n<pre><code>Error: Most middleware (like urlencoded) is no longer bundled with Express and \nmust be installed separately.\n</code></pre>\n\n<p><br>\nIn order to utilize those middleware, now you need to do <strong>npm</strong> for each middleware separately.</p>\n\n<p>Since bodyParser is marked deprecated, so I recommend the following way using json + urlencode + multipart parser like formidable, connect-multiparty. (Multipart middleware is deprecated as well).</p>\n\n<p><strong>Also remember, just defining urlencode + json, the form data will not be parsed and req.body will be undefined. You need to define a middleware handle the multipart request.</strong></p>\n\n<pre><code>var urlencode = require('urlencode');\nvar json = require('json-middleware');\nvar multipart = require('connect-multiparty');\nvar multipartMiddleware = multipart();\n\napp.use(json);\napp.use(urlencoded);\napp.use('/url/that/accepts/form-data', multipartMiddleware);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<h1>this will do it if you want to build the posted query without middleware</h1>\n\n<pre><code>app.post(\"/register/\",function(req,res){\n    var bodyStr = '';\n    req.on(\"data\",function(chunk){\n        bodyStr += chunk.toString();\n    });\n    req.on(\"end\",function(){\n        res.send(bodyStr);\n    });\n\n});\n</code></pre>\n\n<p>that will send this to the browser</p>\n\n<pre><code>email=emailval&amp;password1=pass1val&amp;password2=pass2val\n</code></pre>\n\n<p>its probably better to use middleware though so you don't have to write this over and over in each route</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Here is my simple form:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form id=\"loginformA\" action=\"userlogin\" method=\"post\"&gt;\n    &lt;div&gt;\n        &lt;label for=\"email\"&gt;Email: &lt;/label&gt;\n        &lt;input type=\"text\" id=\"email\" name=\"email\"&gt;&lt;/input&gt;\n    &lt;/div&gt;\n&lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/input&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Here is my express node.js code:</p>\n\n<pre><code>app.post('/userlogin', function(sReq, sRes){    \n    var email = sReq.query.email.;   \n}\n</code></pre>\n\n<p>I tried <code>sReq.query.email</code> or <code>sReq.query['email']</code> or <code>sReq.params['email']</code> etc. None of them work.  They all return <code>undefined</code>. </p>\n\n<p>When I change to a Get call, it works, so .. any idea?</p>\n",
            "last_activity_date": 1414187468,
            "question_id": 5710358,
            "score": 176,
            "tags": [
                "javascript",
                "node.js",
                "post",
                "express"
            ],
            "title": "how to get POST query in express node.js?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The vast majority of javascript code that I've seen uses the prototype method.  I think that there are three reasons for this that I can think of off the top of my head.  </p>\n\n<p>The first is that you avoid having every class be a huge constructor: constructor logic goes in the constructor function, logic for other methods is declared elsewhere--this is mostly a clarity thing / separation of concerns thing, but in javascript you need every bit of clarity you can get your hands on.</p>\n\n<p>The second is efficiency.  When you declare methods in the constructor, you are creating a new instance of the function object for each instance of the object, and also binding the scope of the constructor to each of these functions (that is, they can reference, for example, the arguments to the constructor, which can then never be gc'd as long as the object lives).  When you declare methods on the prototype there is a single copy of the function object that is used by all instances--prototype properties are not copied onto instances.</p>\n\n<p>A third reason is that you can \"extend\" a class in various ways when you use the prototype method, such as the prototype chaining used by Backbone.js and CoffeeScript's class construct.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For the example you give, you should use the prototype approach. In general, it depends. The main advantage of the first approach (initializing methods in the constructor) is that you can take advantage of closures by making use of local variables defined within the constructor in your methods. These variables are not directly accessible outside the constructor function so are effectively \"private\", meaning your API is cleaner than if these variable were instead defined as properties of the object. Some general rules of thumb:</p>\n\n<ul>\n<li>If your methods do not use local variables defined in your constructor (your example doesn't), then use the prototype approach.</li>\n<li>If you're creating lots of <code>Dog</code>s, use the prototype approach. This way, all \"instances\" (i.e. objects created by the <code>Dog</code> constructor) will share one set of functions, whereas the constructor way, a new set of functions is created every time the <code>Dog</code> constructor is called, using more memory.</li>\n<li>If you're creating a small number of <code>Dog</code>s and find that using of local, \"private\" variables in your constructor improves your code, this may be the better approach. Use your judgment and do some benchmarks if performance or memory consumption are major concerns.</li>\n</ul>\n\n<p>It is possible to use a hybrid approach whereby only methods that need access to local private constructor variables are defined in the constructor while other methods are assigned to the prototype.</p>\n\n<p>For example, the code below uses a local variable in the constructor to keep track of the number of times this dog has barked while keeping the actual number private, so the barking-related methods are defined inside the constructor. Tail wagging does not require access to the number of barks, therefore that method can be defined on the prototype.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var Dog = function(name) {\r\n    this.name = name;\r\n\r\n    var barkCount = 0;\r\n\r\n    this.bark = function() {\r\n        barkCount++;\r\n        alert(this.name + \" bark\");\r\n    };\r\n\r\n    this.getBarkCount = function() {\r\n        alert(this.name + \" has barked \" + barkCount + \" times\");\r\n    };\r\n};\r\n\r\nDog.prototype.wagTail = function() {\r\n    alert(this.name + \" wagging tail\");\r\n};\r\n\r\nvar dog = new Dog(\"Dave\");\r\ndog.bark();\r\ndog.bark();\r\ndog.getBarkCount();\r\ndog.wagTail();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 113
                },
                {
                    "body": "<p>The two are different: The first one will store the reference to the method <em>only</em> on the prototype object whereas the second solution will store the method on <em>each</em> of the object. This means that each object will contain an extra pointer and thus take up a bit more memory each.</p>\n\n<p>The per-object method allows the method to refer to variables in the constructor (a closure) and it therefore allows you to access some data that you cannot access from a prototype methods.</p>\n\n<p>Finally, a prototype method can be <em>changed later</em>, that is you can redefine <code>Bark</code> at runtime on the prototype object, and this change will work for all objects with this prototype (since the method is always looked up through the prototype).</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>In creating javascript objects, I can put a method declaration either in the constructor function or in the prototype.  For example, say I want a Dog class that has a Name property and a Bark method.  I can put the declaration of the Bark method into the constructor function:</p>\n\n<pre><code>var Dog = function(name) {\n    this.Name = name;\n    this.Bark = function() {\n        alert(this.Name + \" bark\");\n    };\n}\n</code></pre>\n\n<p>or I could put in as a method on the prototype object:</p>\n\n<pre><code>var Dog = function(name) {\n    this.Name = name;\n}\n\nDog.prototype.Bark = function() {\n    alert(this.Name + \" bark\");\n};\n</code></pre>\n\n<p>When I instantiate objects of type Dog, both approaches seem to work fine:  </p>\n\n<pre><code>var dog = new Dog(\"Fido\");\ndog.Bark();  //Both approaches show \"Fido bark\"\n</code></pre>\n\n<p>Should I prefer one of these approaches over the other?  Are there any advantages to using one over the other?  Behind the scenes, do these two approaches end up doing exactly the same thing?  Which approach do most people tend to favor?</p>\n\n<p>Thanks for the help.</p>\n",
            "last_activity_date": 1412365324,
            "question_id": 9772307,
            "score": 78,
            "tags": [
                "javascript",
                "oop"
            ],
            "title": "Declaring javascript object method in constructor function vs. in prototype"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>I believe that's the easiest way.  You might be interested in this <a href=\"http://web.archive.org/web/20140326215034/http://comp345.awardspace.com/select_element_cheatsheet.pdf\">cheat sheet</a> (PDF) on using jQuery with selects for more info.</p>\n",
                    "is_accepted": true,
                    "score": 200
                },
                {
                    "body": "<p>That works well. </p>\n\n<p>If adding more than one option element, I'd recommend performing the append once as opposed to performing an append on each element.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If the option name or value is dynamic, you won't want to have to worry about escaping special characters in it; in this you might prefer simple DOM methods:</p>\n\n<pre><code>var s= document.getElementById('mySelect');\ns.options[s.options.length]= new Option('My option', '1');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>for whatever reason doing <code>$(\"#myselect\").append(new Option(\"text\", \"text\"));</code> isn't working for me in IE7+</p>\n\n<p>I had to use <code>$(\"#myselect\").html(\"&lt;option value='text'&gt;text&lt;/option&gt;\");</code></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I agree Ashish, this did NOT work in IE8 (yet did in FF):</p>\n\n<pre><code>$(\"#selectList\").append(new Option(\"option text\", \"value\"));\n</code></pre>\n\n<p>This DID work:</p>\n\n<pre><code>var o = new Option(\"option text\", \"value\");\n/// jquerify the DOM object 'o' so we can use the html method\n$(o).html(\"option text\");\n$(\"#selectList\").append(o);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 100
                },
                {
                    "body": "<p>Personally, I prefer this syntax for appending options:</p>\n\n<pre><code>$('#mySelect').append($('&lt;option&gt;', {\n    value: 1,\n    text: 'My option'\n}));\n</code></pre>\n\n<p>If you're adding options from a collection of items, you can do the following:</p>\n\n<pre><code>$.each(items, function (i, item) {\n    $('#mySelect').append($('&lt;option&gt;', { \n        value: item.value,\n        text : item.text \n    }));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<pre><code>$('#mySelect').empty().append('&lt;option value=1&gt;My option&lt;/option&gt;').selectmenu('refresh');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can add option using following syntax, Also you can visit to <a href=\"http://mycodeprograms.blogspot.in/2013/09/how-to-handle-select-and-option-tag-in.html\" rel=\"nofollow\">way handle option in jQuery</a> for more details.</p>\n\n<ol>\n<li><p><code>$('select').append($('&lt;option&gt;', {value:1, text:'One'}));</code></p></li>\n<li><p><code>$('select').append('&lt;option val=\"1\"&gt;One&lt;/option&gt;');</code></p></li>\n<li><p><code>var option = new Option(text, value);\n$('select').append($(option));</code></p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>If you want to insert the new option at a specific index in the select:</p>\n\n<pre><code>$(\"#my_select option\").eq(2).before($('&lt;option&gt;', {\n    value: 'New Item',\n    text: 'New Item'\n}));\n</code></pre>\n\n<p>This will insert the \"New Item\" as the 3rd item in the select.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To help performance you should try to only alter the DOM once, even more so if you are adding many options. </p>\n\n<pre><code>var html = '';\nfor (var i = 0, len = data.length; i &lt; len; ++i) {\n    html += '&lt;option value=\"' + data[i]['value'] + '\"&gt;' + data[i]['label'] + '&lt;/option&gt;';\n}                   \n$('#select').append(html);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Not mentioned in any answer but useful is the case where you want that option to be also selected, you can add:</p>\n\n<pre><code>var o = new Option(\"option text\", \"value\");\no.selected=true;\n$(\"#mySelect\").append(o);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var select = $('#myselect');\nvar newOptions = {\n                'red' : 'Red',\n                'blue' : 'Blue',\n                'green' : 'Green',\n                'yellow' : 'Yellow'\n            };\n$('option', select).remove();\n$.each(newOptions, function(text, key) {\n    var option = new Option(key, text);\n    select.append($(option));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>if u have <strong>optgroup</strong> inside <strong>select</strong>, u got error in DOM.</p>\n\n<p>I tinhk a best way:</p>\n\n<pre><code>$(\"#select option:last\").after($('&lt;option value=\"1\"&gt;my option&lt;/option&gt;'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What's the easiest way to add an option to a dropdown using javascript? Can this work?</p>\n\n<pre><code>$(\"#mySelect\").append('&lt;option value=1&gt;My option&lt;/option&gt;');\n</code></pre>\n",
            "last_activity_date": 1419944121,
            "question_id": 740195,
            "score": 221,
            "tags": [
                "javascript",
                "jquery",
                "dom",
                "internet-explorer-8",
                "dhtml"
            ],
            "title": "Adding options to a select using Jquery/javascript"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<pre><code>String.prototype.reverse=function(){return this.split(\"\").reverse().join(\"\");}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>String.prototype.reverse = function() {\n    var s = \"\";\n    var i = this.length;\n    while (i&gt;0) {\n        s += this.substring(i-1,i);\n        i--;\n    }\n    return s;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<pre><code>function reverseString(string) {\n    var reversedString = \"\";\n    var stringLength = string.length - 1;\n    for (var i = stringLength; i &gt;= 0; i--) {\n        reversedString += string[i];\n    }\n    return reversedString;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function reverse(s){\n    return s.split(\"\").reverse().join(\"\");\n}\n</code></pre>\n\n<p>Caveats : <a href=\"http://stackoverflow.com/a/16776621/1636522\">http://stackoverflow.com/a/16776621/1636522</a>.</p>\n",
                    "is_accepted": false,
                    "score": 342
                },
                {
                    "body": "<p>You could try something like this. I'm sure there's some room for refactoring. I couldn't get around using the split function. Maybe someone knows of a way to do it without split.</p>\n\n<p>Code to set up, can put this in your .js library</p>\n\n<pre><code>String.prototype.aggregate = function (vals, aggregateFunction) {\n\n    var temp = '';\n    for(var i = vals.length - 1; i &gt;= 0; i-- )\n    {\n        temp = aggregateFunction(vals[i], temp);\n    }\n    return temp;\n}\n\nString.prototype.reverseLetters = function() {\n    return this.aggregate(this.split(''), \n        function(current, word) { return word + current; })\n}\n\nString.prototype.reverseWords = function() {\n    return this.aggregate(this.split(' '), \n        function(current, word) { return word + ' ' + current; })\n}\n</code></pre>\n\n<p>Code to use it (has client side code, only because it was tested in a browser):</p>\n\n<pre><code>var sentence = \"My Stack is Overflowing.\"\ndocument.write(sentence.reverseLetters() + '&lt;br /&gt;');\ndocument.write(sentence.reverseWords() + '&lt;br /&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Another variation (does it work with IE?):</p>\n\n<pre><code>String.prototype.reverse = function() {\n    for (i=1,s=\"\"; i&lt;=this.length; s+=this.substr(-i++,1)) {}\n    return s;\n}\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>This is without the use of built-in functions:</p>\n\n<pre><code>String.prototype.reverse = function() {\n    for (i=this[-1],s=\"\"; i&gt;=0; s+=this[i--]) {}\n    return s;\n}\n</code></pre>\n\n<p>Note: this[-1] holds a length of the string.</p>\n\n<p>However it's not possible to reverse the string in place, since the assignment to\nindividual array elements doesn't work with String object (protected?). I.e. you can do assigns, but the resulting string doesn't change.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The whole \"reverse a string in place\" is an antiquated interview question C programmers, and people who were interviewed by them (for revenge, maybe?), will ask.  Unfortunately, it's the \"In Place\" part that no longer works because strings in pretty much any managed language (JS, C#, etc) uses immutable strings, thus defeating the whole idea of moving a string without allocating any new memory.</p>\n\n<p>While the solutions above do indeed reverse a string, they do not do it without allocating more memory, and thus do not satisfy the conditions.  You need to have direct access to the string as allocated, and be able to manipulate it's original memory location to be able to reverse it in place.</p>\n\n<p>Personally, i really hate these kinds of interview questions, but sadly, i'm sure we'll keep seeing them for years to come.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<pre><code>var str = \"IAMA JavaScript Developer\";\nvar a=str.split(''), b = a.length;\nfor (var i=0; i&lt;b; i++) {\n    a.unshift(a.splice(1+i,1).shift())\n}\na.shift();\nalert(a.join(''));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is the easiest way I think</p>\n\n<pre>\n\nvar reverse = function(str) {\n    var arr = [];\n\n    for (var i = 0, len = str.length; i &lt= len; i++) {\n        arr.push(str.charAt(len - i))\n    }\n\n    return arr.join('');\n}\n\nreverse('lorem ipsum dolor');\n\n</pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Seems like I'm 3 years late to the party...</p>\n\n<p>Unfortunately you can't as has been pointed out. See <a href=\"http://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-js\">Are JavaScript strings immutable? Do I need a &quot;string builder&quot; in JavaScript?</a></p>\n\n<p>The next best thing you can do is to create a \"view\" or \"wrapper\", which takes a string and reimplements whatever parts of the string API you are using, but pretending the string is reversed. For example:</p>\n\n<pre><code>var identity = function(x){return x};\n\nfunction LazyString(s) {\n    this.original = s;\n\n    this.length = s.length;\n    this.start = 0; this.stop = this.length; this.dir = 1; // \"virtual\" slicing\n    // (dir=-1 if reversed)\n\n    this._caseTransform = identity;\n}\n\n// syntactic sugar to create new object:\nfunction S(s) {\n    return new LazyString(s);\n}\n\n//We now implement a `\"...\".reversed` which toggles a flag which will change our math:\n\n(function(){ // begin anonymous scope\n    var x = LazyString.prototype;\n\n    // Addition to the String API\n    x.reversed = function() {\n        var s = new LazyString(this.original);\n\n        s.start = this.stop - this.dir;\n        s.stop = this.start - this.dir;\n        s.dir = -1*this.dir;\n        s.length = this.length;\n\n        s._caseTransform = this._caseTransform;\n        return s;\n    }\n\n//We also override string coercion for some extra versatility (not really necessary):\n\n    // OVERRIDE STRING COERCION\n    //   - for string concatenation e.g. \"abc\"+reversed(\"abc\")\n    x.toString = function() {\n        if (typeof this._realized == 'undefined') {  // cached, to avoid recalculation\n            this._realized = this.dir==1 ?\n                this.original.slice(this.start,this.stop) : \n                this.original.slice(this.stop+1,this.start+1).split(\"\").reverse().join(\"\");\n\n            this._realized = this._caseTransform.call(this._realized, this._realized);\n        }\n        return this._realized;\n    }\n\n//Now we reimplement the String API by doing some math:\n\n    // String API:\n\n    // Do some math to figure out which character we really want\n\n    x.charAt = function(i) {\n        return this.slice(i, i+1).toString();\n    }\n    x.charCodeAt = function(i) {\n    \u00a0 \u00a0 return this.slice(i, i+1).toString().charCodeAt(0);\n    }\n\n// Slicing functions:\n\n    x.slice = function(start,stop) {\n        // lazy chaining version of https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice\n\n        if (stop===undefined)\n            stop = this.length;\n\n        var relativeStart = start&lt;0 ? this.length+start : start;\n        var relativeStop = stop&lt;0 ? this.length+stop : stop;\n\n        if (relativeStart &gt;= this.length)\n            relativeStart = this.length;\n        if (relativeStart &lt; 0)\n            relativeStart = 0;\n\n        if (relativeStop &gt; this.length)\n            relativeStop = this.length;\n        if (relativeStop &lt; 0)\n            relativeStop = 0;\n\n        if (relativeStop &lt; relativeStart)\n            relativeStop = relativeStart;\n\n        var s = new LazyString(this.original);\n        s.length = relativeStop - relativeStart;\n        s.start = this.start + this.dir*relativeStart;\n        s.stop = s.start + this.dir*s.length;\n        s.dir = this.dir;\n\n        //console.log([this.start,this.stop,this.dir,this.length], [s.start,s.stop,s.dir,s.length])\n\n        s._caseTransform = this._caseTransform;\n        return s;\n    }\n    x.substring = function() {\n        // ...\n    }\n    x.substr = function() {\n        // ...\n    }\n\n//Miscellaneous functions:\n\n    // Iterative search\n\n    x.indexOf = function(value) {\n        for(var i=0; i&lt;this.length; i++)\n            if (value==this.charAt(i))\n                return i;\n        return -1;\n    }\n    x.lastIndexOf = function() {\n        for(var i=this.length-1; i&gt;=0; i--)\n            if (value==this.charAt(i))\n                return i;\n        return -1;\n    }\n\n    // The following functions are too complicated to reimplement easily.\n    // Instead just realize the slice and do it the usual non-in-place way.\n\n    x.match = function() {\n        var s = this.toString();\n        return s.apply(s, arguments);\n    }\n    x.replace = function() {\n        var s = this.toString();\n        return s.apply(s, arguments);\n    }\n    x.search = function() {\n        var s = this.toString();\n        return s.apply(s, arguments);\n    }\n    x.split = function() {\n        var s = this.toString();\n        return s.apply(s, arguments);\n    }\n\n// Case transforms:\n\n    x.toLowerCase = function() {\n        var s = new LazyString(this.original);\n        s._caseTransform = ''.toLowerCase;\n\n        s.start=this.start; s.stop=this.stop; s.dir=this.dir; s.length=this.length;\n\n        return s;\n    }\n    x.toUpperCase = function() {\n        var s = new LazyString(this.original);\n        s._caseTransform = ''.toUpperCase;\n\n        s.start=this.start; s.stop=this.stop; s.dir=this.dir; s.length=this.length;\n\n        return s;\n    }\n\n})() // end anonymous scope\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt; r = S('abcABC')\nLazyString\n  original: \"abcABC\"\n  __proto__: LazyString\n\n&gt; r.charAt(1);       // doesn't reverse string!!! (good if very long)\n\"B\"\n\n&gt; r.toLowerCase()    // must reverse string, so does so\n\"cbacba\"\n\n&gt; r.toUpperCase()    // string already reversed: no extra work\n\"CBACBA\"\n\n&gt; r + '-demo-' + r   // natural coercion, string already reversed: no extra work\n\"CBAcba-demo-CBAcba\"\n</code></pre>\n\n<p>The kicker -- the following is done in-place by pure math, visiting each character only once, and only if necessary:</p>\n\n<pre><code>&gt; 'demo: ' + S('0123456789abcdef').slice(3).reversed().slice(1,-1).toUpperCase()\n\"demo: EDCBA987654\"\n\n&gt; S('0123456789ABCDEF').slice(3).reversed().slice(1,-1).toLowerCase().charAt(3)\n\"b\"\n</code></pre>\n\n<p>This yields significant savings if applied to a very large string, if you are only taking a relatively small slice thereof.</p>\n\n<p>Whether this is worth it (over reversing-as-a-copy like in most programming languages) highly depends on your use case and how efficiently you reimplement the string API. For example if all you want is to do string index manipulation, or take small <code>slice</code>s or <code>substr</code>s, this will save you space and time. If you're planning on printing large reversed slices or substrings however, the savings may be small indeed, even worse than having done a full copy. Your \"reversed\" string will also not have the type <code>string</code>, though you might be able to fake this with prototyping.</p>\n\n<p>The above demo implementation creates a new object of type ReversedString. It is prototyped, and therefore fairly efficient, with almost minimal work and minimal space overhead (prototype definitions are shared). It is a lazy implementation involving deferred slicing. Whenever you perform a function like <code>.slice</code> or <code>.reversed</code>, it will perform index mathematics. Finally when you extract data (by implicitly calling <code>.toString()</code> or <code>.charCodeAt(...)</code> or something), it will apply those in a \"smart\" manner, touching the least data possible.</p>\n\n<p>Note: the above string API is an example, and may not be implemented perfectly. You also can use just 1-2 functions which you need.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<pre><code>function reverse_string(string)\n{\nvar string;\n\nvar len = string.length;\n\nvar stringExp = string.split('');\nvar i;\nfor (i = len-1; i &gt;=0;i--)\n{\nvar result = document.write(stringExp[i]);\n}\n\nreturn result;\n}\n\nreverse_string(\"This is a reversed string\");\n</code></pre>\n\n<p>//outputs: gnirts desrever a si sihT</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check out this course on CodeCademy: <a href=\"http://www.codecademy.com/es/courses/javascript-intermediate-en-2nQQb/\" rel=\"nofollow\">Intermediate JavaScript</a>.  I'm testing it now, but it seems to walking you through (at a faster pace), how to define Prototype functions such as defining a good <code>reverse()</code> function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The following technique (or similar) is commonly used to reverse a string in JavaScript:</p>\n\n<pre><code>// Don\u2019t use this!\nvar naiveReverse = function(string) {\n    return string.split('').reverse().join('');\n}\n</code></pre>\n\n<p>In fact, all the answers posted so far are a variation of this pattern. However, there are some problems with this solution. For example:</p>\n\n<pre><code>naiveReverse('foo \ud834\udf06 bar');\n// \u2192 'rab \ufffd\ufffd oof'\n// Where did the `\ud834\udf06` symbol go? Whoops!\n</code></pre>\n\n<p>If you\u2019re wondering why this happens, <a href=\"http://mathiasbynens.be/notes/javascript-encoding\">read up on JavaScript\u2019s internal character encoding</a>. (TL;DR: <code>\ud834\udf06</code> is an astral symbol, and JavaScript exposes it as two separate code units.)</p>\n\n<p>But there\u2019s more:</p>\n\n<pre><code>// To see which symbols are being used here, check:\n// http://mothereff.in/js-escapes#1ma%C3%B1ana%20man%CC%83ana\nnaiveReverse('ma\u00f1ana man\u0303ana');\n// \u2192 'ana\u0303nam ana\u00f1am'\n// Wait, so now the tilde is applied to the `a` instead of the `n`? WAT.\n</code></pre>\n\n<p>A good string to test string reverse implementations is <a href=\"http://mothereff.in/js-escapes#1foo%20%F0%9D%8C%86%20bar%20ma%C3%B1ana%20man%CC%83ana\">the following</a>:</p>\n\n<pre><code>'foo \ud834\udf06 bar ma\u00f1ana man\u0303ana'\n</code></pre>\n\n<p>Why? Because it contains an astral symbol (<code>\ud834\udf06</code>) (which are <a href=\"http://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs\">represented by surrogate pairs in JavaScript</a>) and a combining mark (the <code>n\u0303</code> in the last <code>man\u0303ana</code> actually consists of two symbols: U+006E LATIN SMALL LETTER N and U+0303 COMBINING TILDE).</p>\n\n<p>The order in which surrogate pairs appear cannot be reversed, else the astral symbol won\u2019t show up anymore in the \u2018reversed\u2019 string. That\u2019s why you saw those <code>\ufffd\ufffd</code> marks in the output for the previous example.</p>\n\n<p>Combining marks always get applied to the previous symbol, so you have to treat both the main symbol (U+006E LATIN SMALL LETTER N) as the combining mark (U+0303 COMBINING TILDE) as a whole. Reversing their order will cause the combining mark to be paired with another symbol in the string. That\u2019s why the example output had <code>a\u0303</code> instead of <code>\u00f1</code>.</p>\n\n<p>Hopefully, this explains why all the answers posted so far are <strong>wrong</strong>.</p>\n\n<hr>\n\n<p>To answer your initial question \u2014 <em>how to [properly] reverse a string in JavaScript</em> \u2014, I\u2019ve written a small JavaScript library that is capable of Unicode-aware string reversal. It doesn\u2019t have any of the issues I just mentioned. The library is called <a href=\"http://mths.be/esrever\"><strong>Esrever</strong></a>; its code is on GitHub, and it works in pretty much any JavaScript environment. It comes with a shell utility/binary, so you can easily reverse strings from your terminal if you want.</p>\n\n<pre><code>var input = 'foo \ud834\udf06 bar ma\u00f1ana man\u0303ana';\nesrever.reverse(input);\n// \u2192 'anan\u0303am ana\u00f1am rab \ud834\udf06 oof'\n</code></pre>\n\n<p>As for the \u201cin-place\u201d part, see the other answers.</p>\n",
                    "is_accepted": false,
                    "score": 169
                },
                {
                    "body": "<p>Just as an exercise:  sometimes when you go to an interview, the interviewer may ask you how to do this using recursion, and I think the \"preferred answer\" might be \"I would rather not do this in recursion as it can easily cause a stack overflow\" (because it is <code>O(n)</code> rather than <code>O(log n)</code> I think <code>O(log n)</code> is a lot harder to get stack overflow -- 4 billion items could be handled by a stack level of 32, as 2 ** 32 is 4294967296. </p>\n\n<p>But sometimes the interviewer will still ask you, \"just as an exercise, why don't you still write it using recursion?\"  And here it is:</p>\n\n<pre><code>String.prototype.reverse = function() {\n    if (this.length &lt;= 1) return this;\n    else return this.slice(1).reverse() + this.slice(0,1);\n}\n</code></pre>\n\n<p>test run:</p>\n\n<pre><code>var s = \"\";\nfor(var i = 0; i &lt; 1000; i++) {\n    s += (\"apple\" + i);\n}\nconsole.log(s.reverse());\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>999elppa899elppa...2elppa1elppa0elppa\n</code></pre>\n\n<p>To try for a stack overflow, I changed <code>1000</code> to <code>10000</code>, and on Google Chrome, it said:</p>\n\n<pre><code>RangeError: Maximum call stack size exceeded\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know that this is an old question that has been well answered, but for my own amusement I wrote the following reverse function and thought I would share it in case it was useful for anyone else.  It handles both surrogate pairs and combining marks:</p>\n\n<pre><code>function StringReverse (str)\n{\n  var charArray = [];\n  for (var i = 0; i &lt; str.length; i++)\n    {\n      if (i+1 &lt; str.length)\n        {\n          var value = str.charCodeAt(i);\n          var nextValue = str.charCodeAt(i+1);\n          if (   (   value &gt;= 0xD800 &amp;&amp; value &lt;= 0xDBFF\n                  &amp;&amp; (nextValue &amp; 0xFC00) == 0xDC00) // Surrogate pair)\n              || (nextValue &gt;= 0x0300 &amp;&amp; nextValue &lt;= 0x036F)) // Combining marks\n            {\n              charArray.unshift(str.substring(i, i+2));\n              i++; // Skip the other half\n              continue;\n            }\n        }\n\n      // Otherwise we just have a rogue surrogate marker or a plain old character.\n      charArray.unshift(str[i]);\n    }\n\n  return charArray.join('');\n}\n</code></pre>\n\n<p>All props to Mathias, Punycode, and various other references for schooling me on the complexities of character encoding in JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>without converting string to array;</p>\n\n<pre><code>String.prototype.reverse = function() {\n\n    var ret = \"\";\n    var size = 0;\n\n    for (var i = this.length - 1; -1 &lt; i; i -= size) {\n\n        if (\n          '\\uD800' &lt;= this[i - 1] &amp;&amp; this[i - 1] &lt;= '\\uDBFF' &amp;&amp; \n          '\\uDC00' &lt;= this[i]     &amp;&amp; this[i]     &lt;= '\\uDFFF'\n        ) {\n            size = 2;\n            ret += this[i - 1] + this[i];\n        } else {\n            size = 1;\n            ret += this[i];\n        }\n    }\n\n    return ret;\n}\n\nconsole.log('ana\u0303nam ana\u00f1am' === 'ma\u00f1ana man\u0303ana'.reverse());\n</code></pre>\n\n<p>using Array.reverse without converting characters to code points;</p>\n\n<pre><code>String.prototype.reverse = function() {\n\n    var array = this.split(\"\").reverse();\n\n    for (var i = 0; i &lt; this.length; ++i) {\n\n        if (\n          '\\uD800' &lt;= this[i - 1] &amp;&amp; this[i - 1] &lt;= '\\uDBFF' &amp;&amp; \n          '\\uDC00' &lt;= this[i]     &amp;&amp; this[i]     &lt;= '\\uDFFF'\n        ) {\n            array[i - 1] = array[i - 1] + array[i];\n            array[i] = array[i - 1].substr(0, 1);\n            array[i - 1] = array[i - 1].substr(1, 1);\n        }\n\n    }\n\n    return array.join(\"\");\n}\n\nconsole.log('ana\u0303nam ana\u00f1am' === 'ma\u00f1ana man\u0303ana'.reverse());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think String.prototype.reverse is a good way to solve this problem;\nthe code as below;</p>\n\n<pre><code>String.prototype.reverse = function() {\n  return this.split('').reverse().join('');\n}\n\nvar str = 'this is a good example for string reverse';\nstr.reverse();\n-&gt; \"esrever gnirts rof elpmaxe doog a si siht\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function reverse(str){\nvar s = \"\";\nfor (var i = str.length - 1; i &gt;= 0; i--){\n    s += str[i];\n}\nreturn s;\n};\nreverse(\"your string comes here\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The below might help anyone that is looking to reverse a string recursively. Was asked to do this in a recent job interview using functional programming style:</p>\n\n<pre><code>var reverseStr = function(str) {\n    return (str.length &gt; 0) ? str[str.length - 1] + reverseStr(str.substr(0, str.length -   1)) : '';\n};\n\n//tests\nconsole.log(reverseStr('setab retsam')); //master bates\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using Array functions,</p>\n\n<pre><code>String.prototype.reverse = function(){\n    return [].reduceRight.call(this, function(last, secLast){return last + secLast});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Detailed analysis and ten different ways to reverse a string and their performance details.</p>\n\n<p><a href=\"http://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/\">http://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/</a></p>\n\n<p><strong>Perfomance of these implementations:</strong></p>\n\n<p>Best performing implementation(s) per browser</p>\n\n<ul>\n<li>Chrome 15 - Implemations 1 and 6 </li>\n<li>Firefox 7 - Implementation 6 </li>\n<li>IE 9 - Implementation 4 </li>\n<li>Opera 12 - Implementation 9</li>\n</ul>\n\n<p>Here are those implementations:</p>\n\n<p><strong>Implementation 1:</strong></p>\n\n<pre><code>function reverse(s) {\n  var o = '';\n  for (var i = s.length - 1; i &gt;= 0; i--)\n    o += s[i];\n  return o;\n}\n</code></pre>\n\n<p><strong>Implementation 2:</strong></p>\n\n<pre><code>    function reverse(s) {\n  var o = [];\n  for (var i = s.length - 1, j = 0; i &gt;= 0; i--, j++)\n    o[j] = s[i];\n  return o.join('');\n}\n</code></pre>\n\n<p><strong>Implemenation 3:</strong></p>\n\n<pre><code>function reverse(s) {\n  var o = [];\n  for (var i = 0, len = s.length; i &lt;= len; i++)\n    o.push(s.charAt(len - i));\n  return o.join('');\n}\n</code></pre>\n\n<p><strong>Implemenation 4:</strong></p>\n\n<pre><code>function reverse(s) {\n  return s.split('').reverse().join('');\n}\n</code></pre>\n\n<p><strong>Implemenation 5:</strong></p>\n\n<pre><code>function reverse(s) {\n  var i = s.length,\n      o = '';\n  while (i &gt; 0) {\n    o += s.substring(i - 1, i);\n    i--;\n  }\n  return o;\n}\n</code></pre>\n\n<p><strong>Implemenation 6:</strong></p>\n\n<pre><code>function reverse(s) {\n  for (var i = s.length - 1, o = ''; i &gt;= 0; o += s[i--]) { }\n  return o;\n}\n</code></pre>\n\n<p><strong>Implemenation 7:</strong></p>\n\n<pre><code>function reverse(s) {\n  return (s === '') ? '' : reverse(s.substr(1)) + s.charAt(0);\n}\n</code></pre>\n\n<p><strong>Implemenation 8:</strong></p>\n\n<pre><code>function reverse(s) {\n  function rev(s, len, o) {\n    return (len === 0) ? o : rev(s, --len, (o += s[len]));\n  };\n  return rev(s, s.length, '');\n}\n</code></pre>\n\n<p><strong>Implemenation 9:</strong></p>\n\n<pre><code>function reverse(s) {\n  s = s.split('');\n  var len = s.length,\n      halfIndex = Math.floor(len / 2) - 1,\n      tmp;\n\n\n     for (var i = 0; i &lt;= halfIndex; i++) {\n        tmp = s[len - i - 1];\n        s[len - i - 1] = s[i];\n        s[i] = tmp;\n      }\n      return s.join('');\n    }\n</code></pre>\n\n<p><strong>Implemenation 10</strong></p>\n\n<pre><code>function reverse(s) {\n  if (s.length &lt; 2)\n    return s;\n  var halfIndex = Math.ceil(s.length / 2);\n  return reverse(s.substr(halfIndex)) +\n         reverse(s.substr(0, halfIndex));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>During an interview, I was asked to reverse a string without using any variables or native methods. This is my favorite implementation:</p>\n\n<pre><code>function reverseString(str) {\n    return str === '' ? '' : reverseString(str.slice(1)) + str[0];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var str = \"my name is saurabh \";\nvar empStr='',finalString='';\nvar chunk=[];\nfunction reverse(str){\nvar i,j=0,n=str.length;\n    for(i=0;i&lt;n;++i){\n        if(str[i]===' '){\n            chunk[j]=empStr;\n            empStr = '';\n            j++;\n        }else{\n            empStr=empStr+str[i];\n        }\n    }\n    for(var z=chunk.length-1;z&gt;=0;z--){\n        finalString = finalString +' '+ chunk[z];\n        console.log(finalString);\n    }\n    return true;\n}\nreverse(str);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do you reverse a string in place (or in-place) in JavaScript when passed to a function with a return statement?  All without using the built-in functions? .reverse(), .charAt(), etc.</p>\n",
            "last_activity_date": 1423646891,
            "question_id": 958908,
            "score": 141,
            "tags": [
                "javascript",
                "string",
                "reverse"
            ],
            "title": "How do you reverse a string in place in JavaScript?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>There is no native event you can hook into for this however you can trigger an event from your script after you have made the div visible using the .<a href=\"http://docs.jquery.com/Events/trigger\">trigger</a> function</p>\n\n<p>e.g</p>\n\n<pre><code>//declare event to run when div is visible\nfunction isVisible(){\n   //do something\n\n}\n\n//hookup the event\n$('#someDivId').bind('isVisible', isVisible);\n\n//show div and trigger custom event in callback when div is visible\n$('#someDivId').show('slow', function(){\n    $(this).trigger('isVisible');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/1225102/jquery-event-to-trigger-action-when-a-div-is-made-visible/1225114#1225114\">redsquare's solution</a> is the right/logic answer.  </p>\n\n<p>but as an <strong>IN-THEORY solution</strong> you can code a function which is selecting the elements classed by <code>.visibilityCheck</code> class (<em>not all visible elements</em>) and check their <code>visibility</code> property value; if <code>true</code> then do something. ok?<br>\nAfterward the function should be performed periodically using the <code>setInterval()</code> function. As you know, you can stop the timer using <code>clearInterval()</code> and the timer ID upon the function's successful call-out.</p>\n\n<pre><code>function foo(){\n    $('.visibilityCheck').each(function(){\n        if($(this).is(':visible')){\n            //do something\n        }\n    });\n} //foo()\nwindow.setInterval(foo, 100);\n</code></pre>\n\n<p>Also you can do some performance improvements on this, but the solution is basically ignored to be used in action, I think.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>You could always add to the original <a href=\"http://api.jquery.com/show/\">.show()</a> method so you don't have to trigger events every time you show something or if you need it to work with legacy code:</p>\n\n<h3>Jquery extension:</h3>\n\n<pre><code>jQuery(function($) {\n\n  var _oldShow = $.fn.show;\n\n  $.fn.show = function(speed, oldCallback) {\n    return $(this).each(function() {\n      var obj         = $(this),\n          newCallback = function() {\n            if ($.isFunction(oldCallback)) {\n              oldCallback.apply(obj);\n            }\n            obj.trigger('afterShow');\n          };\n\n      // you can trigger a before show if you want\n      obj.trigger('beforeShow');\n\n      // now use the old function to show the element passing the new callback\n      _oldShow.apply(obj, [speed, newCallback]);\n    });\n  }\n});\n</code></pre>\n\n<h3>Usage example:</h3>\n\n<pre><code>jQuery(function($) {\n  $('#test')\n    .bind('beforeShow', function() {\n      alert('beforeShow');\n    }) \n    .bind('afterShow', function() {\n      alert('afterShow');\n    })\n    .show(1000, function() {\n      alert('in show callback');\n    })\n    .show();\n});\n</code></pre>\n\n<p>This effectively lets you do something beforeShow and afterShow while still executing the normal behavior of the original .show() method.</p>\n\n<p><sup>You could also create another method so you don't have to override the original .show() method.</sup></p>\n",
                    "is_accepted": true,
                    "score": 121
                },
                {
                    "body": "<p>If you want to trigger the event on all elements (and child elements) that are actually made visible, by $.show, toggle, toggleClass, addClass, or removeClass:</p>\n\n<pre><code>$.each([\"show\", \"toggle\", \"toggleClass\", \"addClass\", \"removeClass\"], function(){\n    var _oldFn = $.fn[this];\n    $.fn[this] = function(){\n        var hidden = this.find(\":hidden\").add(this.filter(\":hidden\"));\n        var result = _oldFn.apply(this, arguments);\n        hidden.filter(\":visible\").each(function(){\n            $(this).triggerHandler(\"show\"); //No bubbling\n        });\n        return result;\n    }\n});\n</code></pre>\n\n<p>And now your element:</p>\n\n<pre><code>$(\"#myLazyUl\").bind(\"show\", function(){\n    alert(this);\n});\n</code></pre>\n\n<p>You could add overrides to additional jQuery functions by adding them to the array at the top (like \"attr\")</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>a hide/show event trigger based on Glenns ideea:\nremoved toggle because it fires show/hide and we don't want 2fires for one event</p>\n\n<pre><code>$(function(){\n    $.each([\"show\",\"hide\", \"toggleClass\", \"addClass\", \"removeClass\"], function(){\n        var _oldFn = $.fn[this];\n        $.fn[this] = function(){\n            var hidden = this.find(\":hidden\").add(this.filter(\":hidden\"));\n            var visible = this.find(\":visible\").add(this.filter(\":visible\"));\n            var result = _oldFn.apply(this, arguments);\n            hidden.filter(\":visible\").each(function(){\n                $(this).triggerHandler(\"show\");\n            });\n            visible.filter(\":hidden\").each(function(){\n                $(this).triggerHandler(\"hide\");\n            });\n            return result;\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use jQuery's livequery plugin. \nAnd write code as follows:</p>\n\n<pre><code>$('#contentDiv:visible').livequery(function() {\n    alert(\"do something\");\n});\n</code></pre>\n\n<p>Then everytime the contentDiv is visible, \"do something\" will be alerted!</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>The problem is being addressed by <a href=\"https://developer.mozilla.org/en-US/docs/DOM/MutationObserver\">DOM mutation observers</a>. They allow to bind an observer (a function) to events of changing content, text or attributes of dom elements.</p>\n\n<p>Only supported in some browsers, notably Chrome and Firefox at the time this answer is written.</p>\n\n<p>The example code is a follows:</p>\n\n<pre><code>&lt;div id=\"testdiv\" style=\"display:none;\"&gt;hidden&lt;/div&gt;\n&lt;button id=\"show\"&gt;Show hidden div&lt;/button&gt;\n\n&lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.9.1.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(function(){\n    $('#show').click(function(){\n        $('#testdiv').show();\n    });\n\n    var observer = new MutationObserver(function(mutations) {\n      alert('Attributes changed!');\n    });\n    var target = document.querySelector('#testdiv');\n    observer.observe(target, { attributes: true });\n\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p><code>&lt;div id=\"welcometo\"&gt;\u00d6zhan&lt;/div&gt;\n&lt;input type=\"button\" name=\"ooo\" onclick=\"JavaScript:if(document.all.welcometo.style.display=='none'){document.all.welcometo.style.display='';}else{document.all.welcometo.style.display='none';}\"&gt;</code></p>\n\n<p>This code auto control not required query visible or unvisible control</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I changed the hide/show event trigger from Catalint based on Glenns idea.\nMy problem was that I have a modular application. I change between modules showing and hiding divs parents. Then when I hide a module and show another one, with his method I have a visible delay when I change between modules. I only need sometimes to liten this event, and in some special childs. So I decided to notify only the childs with the class \"displayObserver\"</p>\n\n<pre><code>$.each([\"show\", \"hide\", \"toggleClass\", \"addClass\", \"removeClass\"], function () {\n    var _oldFn = $.fn[this];\n    $.fn[this] = function () {\n        var hidden = this.find(\".displayObserver:hidden\").add(this.filter(\":hidden\"));\n        var visible = this.find(\".displayObserver:visible\").add(this.filter(\":visible\"));\n        var result = _oldFn.apply(this, arguments);\n        hidden.filter(\":visible\").each(function () {\n            $(this).triggerHandler(\"show\");\n        }); \n        visible.filter(\":hidden\").each(function () {\n            $(this).triggerHandler(\"hide\");\n        });\n        return result;\n    }\n});\n</code></pre>\n\n<p>Then when a child wants to listen for \"show\" or \"hide\" event I have to add him the class \"displayObserver\", and when It does not want to continue listen it, I remove him the class</p>\n\n<pre><code>bindDisplayEvent: function () {\n   $(\"#child1\").addClass(\"displayObserver\");\n   $(\"#child1\").off(\"show\", this.onParentShow);\n   $(\"#child1\").on(\"show\", this.onParentShow);\n},\n\nbindDisplayEvent: function () {\n   $(\"#child1\").removeClass(\"displayObserver\");\n   $(\"#child1\").off(\"show\", this.onParentShow);\n},\n</code></pre>\n\n<p>I wish help </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use jQuery Waypoints :</p>\n\n<pre><code>$('#contentDiv').waypoint(function() {\n   alert('do something');\n});\n</code></pre>\n\n<p>Other examples on <a href=\"http://imakewebthings.github.com/jquery-waypoints\" rel=\"nofollow\">the site of jQuery Waypoints</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following code (pulled from <a href=\"http://maximeparmentier.com/2012/11/06/bind-show-hide-events-with-jquery/\" rel=\"nofollow\">http://maximeparmentier.com/2012/11/06/bind-show-hide-events-with-jquery/</a>) will enable you to use <code>$('#someDiv').on('show', someFunc);</code>.</p>\n\n<pre><code>(function ($) {\n  $.each(['show', 'hide'], function (i, ev) {\n    var el = $.fn[ev];\n    $.fn[ev] = function () {\n      this.trigger(ev);\n      return el.apply(this, arguments);\n    };\n  });\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>There is a jQuery plugin available for watching change in DOM attributes,</p>\n\n<p><a href=\"https://github.com/darcyclarke/jQuery-Watch-Plugin\" rel=\"nofollow\">https://github.com/darcyclarke/jQuery-Watch-Plugin</a></p>\n\n<p>The plugin wraps All you need do is bind MutationObserver</p>\n\n<p>You can then use it to watch the div using: </p>\n\n<pre><code>$(\"#selector\").watch('css', function() {\n    console.log(\"Visibility: \" + this.style.display == 'none'?'hidden':'shown'));\n    //or any random events\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One way to do this.<br>\nWorks only on visibility changes that are made by css class change, but can be extended to watch for attribute changes too.</p>\n\n<pre><code>var observer = new MutationObserver(function(mutations) {\n        var clone = $(mutations[0].target).clone();\n        clone.removeClass();\n                for(var i = 0; i &lt; mutations.length; i++){\n                    clone.addClass(mutations[i].oldValue);\n        }\n        $(document.body).append(clone);\n        var cloneVisibility = $(clone).is(\":visible\");\n        $(clone).remove();\n        if (cloneVisibility != $(mutations[0].target).is(\":visible\")){\n            var visibilityChangedEvent = document.createEvent('Event');\n            visibilityChangedEvent.initEvent('visibilityChanged', true, true);\n            mutations[0].target.dispatchEvent(visibilityChangedEvent);\n        }\n});\n\nvar targets = $('.ui-collapsible-content');\n$.each(targets, function(i,target){\n        target.addEventListener('visibilityChanged',VisbilityChanedEventHandler});\n        target.addEventListener('DOMNodeRemovedFromDocument',VisbilityChanedEventHandler });\n        observer.observe(target, { attributes: true, attributeFilter : ['class'], childList: false, attributeOldValue: true });\n    });\n\nfunction VisbilityChanedEventHandler(e){console.log('Kaboom babe'); console.log(e.target); }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>my solution:\n\n; (function ($) {\n$.each([ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n    var cssFn = $.fn[ name ];\n    $.fn[ name ] = function( speed, easing, callback ) {\n        if(speed == null || typeof speed === \"boolean\"){\n            var ret=cssFn.apply( this, arguments )\n            $.fn.triggerVisibleEvent.apply(this,arguments)\n            return ret\n        }else{\n            var that=this\n            var new_callback=function(){\n                callback.call(this)\n                $.fn.triggerVisibleEvent.apply(that,arguments)\n            }\n            var ret=this.animate( genFx( name, true ), speed, easing, new_callback )\n            return ret\n        }\n    };\n});\n\n$.fn.triggerVisibleEvent=function(){\n    this.each(function(){\n        if($(this).is(':visible')){\n            $(this).trigger('visible')\n            $(this).find('[data-trigger-visible-event]').triggerVisibleEvent()\n        }\n    })\n}\n})(jQuery);\n\nfor example:\n\n\nif(!$info_center.is(':visible')){\n    $info_center.attr('data-trigger-visible-event','true').one('visible',processMoreLessButton)\n}else{\n    processMoreLessButton()\n}\n\nfunction processMoreLessButton(){\n//some logic\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can also try <a href=\"https://github.com/morr/jquery.appear\" rel=\"nofollow\">jQuery appear plugin</a> as mentioned in parallel thread <a href=\"http://stackoverflow.com/a/3535028/741782\">http://stackoverflow.com/a/3535028/741782</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm using jQuery in my site and I would like to trigger certain actions when a certain div is made visible.</p>\n\n<p>Is it possible to attach some sort of \"isvisible\" event handler to arbitrary divs and have certain code run when they the div is made visible?</p>\n\n<p>I would like something like the following pseudocode:</p>\n\n<pre><code>$(function() {\n  $('#contentDiv').isvisible(function() {\n    alert(\"do something\");\n  });\n});\n</code></pre>\n\n<p>The alert(\"do something\") code should not fire until the contentDiv is actually made visible.</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1401975702,
            "question_id": 1225102,
            "score": 145,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery event to trigger action when a div is made visible"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I don't know about determining height just now, but you can use this to put something on the bottom:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;CSS bottom test&lt;/title&gt;\n&lt;style&gt;\n.bottom {\n  position: absolute;\n  bottom: 1em;\n  left: 1em;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;p&gt;regular body stuff.&lt;/p&gt;\n\n&lt;div class='bottom'&gt;on the bottom&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I lied, jQuery returns the correct value for both pages $(document).height();... why did I ever doubt it?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Document sizes are a browser compatibility nightmare because, although all browsers expose clientHeight and scrollHeight properties, they don't all agree how the values are calculated.</p>\n\n<p>There used to be a complex best-practice formula around for how you tested for correct height/width. This involved using document.documentElement properties if available or falling back on document properties and so on. </p>\n\n<p>The simplest way to get correct height is to get all height values found on document, or documentElement, and use the highest one. This is basically what jQuery does:</p>\n\n<pre><code>var body = document.body,\n    html = document.documentElement;\n\nvar height = Math.max( body.scrollHeight, body.offsetHeight, \n                       html.clientHeight, html.scrollHeight, html.offsetHeight );\n</code></pre>\n\n<p>A quick test with Firebug + <a href=\"http://www.learningjquery.com/2006/12/jquerify-bookmarklet\">jQuery bookmarklet</a> returns the correct height for both cited pages, and so does the code example.</p>\n\n<p>Note that testing the height of the document before the document is ready will always result in a 0. Also, if you load more stuff in, or the user resizes the window, you may need to re-test. Use <code>onload</code> or a <a href=\"http://stackoverflow.com/search?q=document+ready\">document ready</a> event if you need this at load time, otherwise just test whenever you need the number.</p>\n",
                    "is_accepted": true,
                    "score": 178
                },
                {
                    "body": "<p>You can even use this:</p>\n\n<pre><code>var B = document.body,\n    H = document.documentElement,\n    height\n\nif (typeof document.height !== 'undefined') {\n    height = document.height // For webkit browsers\n} else {\n    height = Math.max( B.scrollHeight, B.offsetHeight,H.clientHeight, H.scrollHeight, H.offsetHeight );\n}\n</code></pre>\n\n<p>or in a more jQuery way (since as you said jQuery doesn't lies) :)</p>\n\n<pre><code>Math.max($(document).height(), $(window).height())\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><strong>Add References properly</strong>\nIn my case I was using a ASCX page and the aspx page that contains the ascx control is not using the references properly.\nI just pasted the following code and <strong>boom</strong> it worked</p>\n\n<pre><code>&lt;script src=\"../js/jquery-1.3.2-vsdoc.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"../js/jquery-1.3.2.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"../js/jquery-1.5.1.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Get the width in a cross browser/device way use:</p>\n\n<pre><code>function _getActualWidth()\n{\n    _actualWidth = window.innerWidth ||\n                   document.documentElement.clientWidth ||\n                   document.body.clientWidth ||\n                   document.body.offsetWidth;\n\n    return _actualWidth;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The \"jQuery method\" of determining the document size - query everything, take the highest value, and hope for the best - works in most cases, but <a href=\"https://github.com/hashchange/jquery.documentsize#what-does-it-do-that-jquery-doesnt\" rel=\"nofollow\">not in all of them </a>.</p>\n\n<p>If you <em>really</em> need bullet-proof results for the document size, I'd suggest you use my <a href=\"https://github.com/hashchange/jquery.documentsize\" rel=\"nofollow\">jQuery.documentSize</a> plugin. Unlike the other methods, it actually tests and evaluates browser behaviour when it is loaded and, based on the result, queries the right property from there on out. </p>\n\n<p>The impact of this one-time test on performance <a href=\"https://github.com/hashchange/jquery.documentsize#performance\" rel=\"nofollow\">is minimal</a>, and the plugin returns the right results in even the weirdest scenarios - not because I say so, but because a massive, auto-generated test suite actually verifies that it does.</p>\n\n<p>Because the plugin is written in vanilla Javascript, you can use it <a href=\"https://github.com/hashchange/jquery.documentsize#dependencies-and-setup\" rel=\"nofollow\">without jQuery</a>, too.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Some documents I can't get the height of the document (to position something absolutely at the very bottom). Additionally, a padding-bottom on  seems to do nothing on these pages, but do on the pages where height will return. Case(s) in point:</p>\n\n<p><a href=\"http://fandango.com\">http://fandango.com</a><br>\n<a href=\"http://paperbackswap.com\">http://paperbackswap.com</a></p>\n\n<p>On Fandango<br>\njQuery's <code>$(document).height();</code> returns correct value<br>\n<code>document.height</code> returns 0<br>\n<code>document.body.scrollHeight</code> returns 0</p>\n\n<p>On Paperback Swap:<br>\njQuery's <code>$(document).height();</code> TypeError: <code>$(document)</code> is null<br>\n<code>document.height</code> returns an incorrect value<br>\n<code>document.body.scrollHeight</code> returns an incorrect value</p>\n\n<p>Note: I have browser level permissions, if there is some trick there.</p>\n",
            "last_activity_date": 1425572592,
            "question_id": 1145850,
            "score": 69,
            "tags": [
                "javascript",
                "height"
            ],
            "title": "How to get height of entire document with JavaScript?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Yes, it is universal.</p>\n\n<p>Although <code>'\\n'</code> is the universal <em>newline</em> characters, you have to keep in mind that, depending on your input, new line characters might be preceded by carriage return characters (<code>'\\r'</code>).</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>yes use \\n, unless you are generating html code, in which you want to use <code>&lt;br /&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I believe it is -- when you are working with JS strings.</p>\n\n<p>If you are generating HTML, though, you will have to use <code>&lt;br /&gt;</code> tags (not <code>\\n</code>, as you're not dealing with JS anymore)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've just tested a few browsers using this silly bit of JavaScript:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;script&gt;\nfunction bar(){\n    baz = document.getElementById('foo').value;\n    alert((baz.match(/\\r/) &amp;&amp; 'CR') + ' ' + (baz.match(/\\n/) &amp;&amp; 'LF'));\n    document.getElementById('foo').value = \"foo\\nbar\";\n}\n&lt;/script&gt;\n&lt;body onload=\"bar()\"&gt;\n&lt;form&gt;&lt;textarea id=\"foo\" name=\"foo\"&gt;\n\n&lt;/textarea&gt;\n&lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>IE8 and Opera 9 on Windows use <code>\\r\\n</code>. All the other browsers I tested (Safari 4 and Firefox 3.5 on Windows, and Firefox 3.0 on Linux) use <code>\\n</code>. They can all handle <code>\\n</code> just fine when setting the value, though IE and Opera will convert that back to <code>\\r\\n</code> again internally. There's a SitePoint article with some more details called <a href=\"http://www.sitepoint.com/line-endings-in-javascript/\">Line endings in Javascript</a>.</p>\n\n<p>Note also that this is independent of the actual line endings in the HTML file itself (both <code>\\n</code> and <code>\\r\\n</code> give the same results).</p>\n\n<p>When submitting the form, all browsers canonicalize newlines to <code>\\r\\n</code> (<code>%0D%0A</code> in URL encoding).</p>\n\n<p>I don't think you really need to do much of any determining, though. If you just want to split the text on newlines, you could do something like this:</p>\n\n<pre><code>lines = foo.value.split(/\\r\\n|\\r|\\n/g);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 184
                },
                {
                    "body": "<p>The <code>\\n</code> is just fine for all cases I've encountered. I you are working with web, use <code>\\n</code> and don't worry about it (unless you have had any newline-related issues).</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>I had the problem of expressing newline with <strong>\\n</strong> or <strong>\\r\\n</strong>.<br>\nMagically the character <strong>\\r</strong> which is used for carriage return worked for me like a newline.<br>\nSo in some cases, it is useful to consider \\r too.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Get a line separator for the current browser:</p>\n\n<pre><code>function getLineSeparator() {\n  var textarea = document.createElement(\"textarea\");\n  textarea.value = \"\\n\"; \n  return textarea.value;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It might be easiest to just handle all cases of the new line character instead of checking which case then applying it.  For example, if you need to replace the newline then do the following:</p>\n\n<pre><code>htmlstring = stringContainingNewLines.replace(/(\\r\\n|\\n|\\r)/gm, \"&lt;br&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Email link function i use \"%0D%0A\"</p>\n\n<pre><code>function sendMail() {   \nvar bodydata=\"Before \"+ \"%0D%0A\";\n    bodydata+=\"After\"\n\nvar MailMSG = \"mailto:aaa@sss.com\" \n         + \"?cc=07@sss.com\" \n         + \"&amp;subject=subject\" \n         + \"&amp;body=\" + bodydata; \nwindow.location.href = MailMSG; \n} \n</code></pre>\n\n<p>[HTML]</p>\n\n<pre><code>&lt;a href=\"#\" onClick=\"sendMail()\"&gt;Contact Us&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you are using TinyMCE, I found that breakline works to create a newline inside the editor.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A note - when using ExtendScript JavaScript (the Adobe Scripting language used in applications like Photoshop CS3+), the character to use is \"\\r\". \"\\n\" will be interpreted as a font character, and many fonts will thus have a block character instead.</p>\n\n<p>For example (to select a layer named 'Note' and add line feeds after all periods):</p>\n\n<pre><code>var layerText = app.activeDocument.artLayers.getByName('Note').textItem.contents;\nlayerText = layerText.replace(/\\. /g,\".\\r\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>you can use <code>&lt;br/&gt;</code> and the <code>document.write/</code>, <code>document.writeln</code> one. </p>\n",
                    "is_accepted": false,
                    "score": -6
                }
            ],
            "body": "<p>Is <code>\\n</code> the universal newline character sequence in Javascript for all platforms? If not, how do I determine the character for the current environment?</p>\n\n<p>I'm not asking about the HTML newline element (<code>&lt;BR/&gt;</code>). I'm asking about the newline character sequence used within JavaScript strings.</p>\n",
            "last_activity_date": 1417150472,
            "question_id": 1155678,
            "score": 161,
            "tags": [
                "javascript",
                "newline"
            ],
            "title": "JavaScript string newline character?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>There is a '+' missing after the 'T'</p>\n\n<pre><code>isoDate: function(msSinceEpoch) {\n  var d = new Date(msSinceEpoch);\n  return d.getUTCFullYear() + '-' + (d.getUTCMonth() + 1) + '-' + d.getUTCDate() + 'T'\n         + d.getUTCHours() + ':' + d.getUTCMinutes() + ':' + d.getUTCSeconds();\n}\n</code></pre>\n\n<p>should do it.</p>\n\n<p>For the leading zeros you could use this from <a href=\"http://classicasp.aspfaq.com/general/how-do-i-pad-digits-with-leading-zeros.html\" rel=\"nofollow\">here</a>:</p>\n\n<pre><code>function PadDigits(n, totalDigits) \n{ \n    n = n.toString(); \n    var pd = ''; \n    if (totalDigits &gt; n.length) \n    { \n        for (i=0; i &lt; (totalDigits-n.length); i++) \n        { \n            pd += '0'; \n        } \n    } \n    return pd + n.toString(); \n} \n</code></pre>\n\n<p>Using it like this:</p>\n\n<pre><code>PadDigits(d.getUTCHours(),2)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I would just use this small extension to <code>Date</code> - <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\" rel=\"nofollow\">http://blog.stevenlevithan.com/archives/date-time-format</a></p>\n\n<pre><code>var date = new Date(msSinceEpoch);\ndate.format(\"isoDateTime\"); // 2007-06-09T17:46:21\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Last example on page: <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference:Global_Objects:Date\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference:Global_Objects:Date</a></p>\n\n<pre><code>/* use a function for the exact format desired... */\nfunction ISODateString(d){\n function pad(n){return n&lt;10 ? '0'+n : n}\n return d.getUTCFullYear()+'-'\n      + pad(d.getUTCMonth()+1)+'-'\n      + pad(d.getUTCDate())+'T'\n      + pad(d.getUTCHours())+':'\n      + pad(d.getUTCMinutes())+':'\n      + pad(d.getUTCSeconds())+'Z'}\n\nvar d = new Date();\nconsole.log(ISODateString(d)); // prints something like 2009-09-28T19:03:12Z\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>There is already a function called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\" rel=\"nofollow\"><code>toISOString()</code></a>: </p>\n\n<pre><code>var date = new Date();\ndate.toISOString(); //\"2011-12-19T15:28:46.493Z\"\n</code></pre>\n\n<p>If, somehow, you're on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString#Browser_compatibility\" rel=\"nofollow\">a browser</a> that doesn't support it, I've got you covered:</p>\n\n<pre><code>if ( !Date.prototype.toISOString ) {\n  ( function() {\n\n    function pad(number) {\n      var r = String(number);\n      if ( r.length === 1 ) {\n        r = '0' + r;\n      }\n      return r;\n    }\n\n    Date.prototype.toISOString = function() {\n      return this.getUTCFullYear()\n        + '-' + pad( this.getUTCMonth() + 1 )\n        + '-' + pad( this.getUTCDate() )\n        + 'T' + pad( this.getUTCHours() )\n        + ':' + pad( this.getUTCMinutes() )\n        + ':' + pad( this.getUTCSeconds() )\n        + '.' + String( (this.getUTCMilliseconds()/1000).toFixed(3) ).slice( 2, 5 )\n        + 'Z';\n    };\n\n  }() );\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 220
                },
                {
                    "body": "<p>If you don't need to support IE7, the following is a great, concise hack:</p>\n\n<pre><code>JSON.parse(JSON.stringify(new Date()))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Shortest, but not supported by IE8 and earlier :  </p>\n\n<pre><code>new Date().toJSON()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Almost every to-ISO method on the web drops the timezone information by applying a convert to \"Z\"ulu time (UTC) before outputting the string. Browser's native .toISOString() also drops timezone information.</p>\n\n<p>This discards valuable information, as the server, or recipient, can always convert a full ISO date to Zulu time or whichever timezone it requires, while still getting the timezone information of the sender.</p>\n\n<p><em>The best solution I've come across is to use the <strong><a href=\"http://momentjs.com/\">Moment.js</a></strong> javascript library and use the following code:</em></p>\n\n<p>To get the current ISO time with timezone information and milliseconds</p>\n\n<pre><code>now = moment().format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\")\n// \"2013-03-08T20:11:11.234+0100\"\n\nnow = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\")\n// \"2013-03-08T19:11:11.234+0000\"\n\nnow = moment().utc().format(\"YYYY-MM-DDTHH:mm:ss\") + \"Z\"\n// \"2013-03-08T19:11:11Z\" &lt;- better use the native .toISOString() \n</code></pre>\n\n<p>To get the ISO time of a native JavaScript Date object with timezone information but without milliseconds</p>\n\n<pre><code>var current_time = Date.now();\nmoment(current_time).format(\"YYYY-MM-DDTHH:mm:ssZZ\")\n</code></pre>\n\n<p>This can be combined with Date.js to get functions like Date.today() whose result can then be passed to moment.</p>\n\n<p>A date string formatted like this is JSON compilant, and lends itself well to get stored into a database. Python and C# seem to like it.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>I typically don't want to display a UTC date since customers don't like doing the conversion in their head. To display a <strong>local</strong> ISO date, I use the function:</p>\n\n<pre><code>function toLocalIsoString(date, includeSeconds) {\n    function pad(n) { return n &lt; 10 ? '0' + n : n }\n    var localIsoString = date.getFullYear() + '-'\n        + pad(date.getMonth() + 1) + '-'\n        + pad(date.getDate()) + 'T'\n        + pad(date.getHours()) + ':'\n        + pad(date.getMinutes()) + ':'\n        + pad(date.getSeconds());\n    if(date.getTimezoneOffset() == 0) localIsoString += 'Z';\n    return localIsoString;\n};\n</code></pre>\n\n<p>The function above omits time zone offset information (except if local time happens to be UTC), so I use the function below to show the local offset in a single location. You can also append its output to results from the above function if you wish to show the offset in each and every time:</p>\n\n<pre><code>function getOffsetFromUTC() {\n    var offset = new Date().getTimezoneOffset();\n    return ((offset &lt; 0 ? '+' : '-')\n        + pad(Math.abs(offset / 60), 2)\n        + pad(Math.abs(offset % 60), 2))\n};\n</code></pre>\n\n<p><code>toLocalIsoString</code> uses <code>pad</code>. If needed, it works like nearly any pad function, but for the sake of completeness this is what I use:</p>\n\n<pre><code>// Pad a number to length using padChar\nfunction pad(number, length, padChar) {\n    if (typeof length === 'undefined') length = 2;\n    if (typeof padChar === 'undefined') padChar = '0';\n    var str = \"\" + number;\n    while (str.length &lt; length) {\n        str = padChar + str;\n    }\n    return str;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The question asked was ISO Format WITH reduced precision. Voila:</p>\n\n<pre><code> new Date().toISOString().slice(0, 19) + 'Z'\n // '2014-10-23T13:18:06Z'\n</code></pre>\n\n<p>assuming the trailing Z is wanted, otherwise just omit.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function getdatetime() {\n    d = new Date();\n    return (1e3-~d.getUTCMonth()*10+d.toUTCString()+1e3+d/1)\n        .replace(/1(..)..*?(\\d+)\\D+(\\d+).(\\S+).*(...)/,'$3-$1-$2T$4.$5Z')\n        .replace(/-(\\d)T/,'-0$1T');\n}\n</code></pre>\n\n<p>I found the basics on StackOverflow somewhere (I believe it was part of some other StackExchange code golfing) and I improved it so it works on IE10- as well. It's ugly but gets the job done.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a date object from which I'd like to render an HTML snippet like:</p>\n\n<pre><code>&lt;abbr title=\"2010-04-02T14:12:07\"&gt;A couple days ago&lt;/abbr&gt;\n</code></pre>\n\n<p>I have the \"relative time in words\" portion from another library. How do I render the <code>title</code> portion?</p>\n\n<p>I've tried the following:</p>\n\n<pre><code>function isoDate(msSinceEpoch) {\n\n   var d = new Date(msSinceEpoch);\n   return d.getUTCFullYear() + '-' + (d.getUTCMonth() + 1) + '-' + d.getUTCDate() + 'T' +\n          d.getUTCHours() + ':' + d.getUTCMinutes() + ':' + d.getUTCSeconds();\n\n}\n</code></pre>\n\n<p>But that gives me:</p>\n\n<pre><code>\"2010-4-2T3:19\"\n</code></pre>\n",
            "last_activity_date": 1425570834,
            "question_id": 2573521,
            "score": 126,
            "tags": [
                "javascript",
                "datetime",
                "iso8601"
            ],
            "title": "How do I output an ISO-8601 formatted string in Javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You should pass a reference to a function as the first argument for <code>setTimeout</code> or <code>setInterval</code>. This reference may be in the form of:</p>\n\n<ul>\n<li><p>A function name </p>\n\n<pre><code>function foo(){...}        //that would be foo\n</code></pre></li>\n<li><p>A variable that refers to a function</p>\n\n<pre><code>var bar = function(){...}; //bar, pointing to anonymous function\nvar baz = bar;             //baz, pointing to bar\nvar bam = foo;             //bam, pointing to foo earlier\n</code></pre>\n\n<p><sub>Do note that I set \"variable in a function\" separately from \"function name\". It's not apparent, especially for newbies, that function definitions (ie. <code>foo</code>) and function expressions (ie. <code>bar</code>) are on the same namespace.</sub></p></li>\n<li><p>An anonymous function</p>\n\n<pre><code>setTimeout(function(){/* Look mah! No name! */},1000);\n</code></pre></li>\n</ul>\n\n<p>Here are samples on how to properly use <code>setTimeout</code></p>\n\n<pre><code>var bar;\n\n//a function named foo\nfunction foo(){\n   alert('foo');\n}\n\n//bar references function foo\nbar = foo;\n\n//you can:\n\n//1. pass the name of the function\nsetTimeout(foo,1000);\n\n//2. pass a variable that references to a function\nsetTimeout(bar,1000);\n\n//3.or pass in an anonymous function\nsetTimeout(function(){\n  //where we can also call foo\n  foo();\n},1000);\n</code></pre>\n\n<p>I should also add that to call a function and pass it parameters, you should use the third method.</p>\n\n<pre><code>setTimeout(function(){\n  foo(arg1,arg2,...,argN);\n},1000);\n</code></pre>\n\n<p><em>There is another</em> method to pass in arguments into the handler, however <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.setTimeout#Callback_arguments\">it's not cross-browser compatible</a>.</p>\n\n<p>By default, the context of the function (the value of <code>this</code> inside the function) when executed by <code>setTimeout</code> is the global object <code>window</code>.</p>\n\n<p>Although it's possible, but you should <a href=\"https://developer.mozilla.org/en/DOM/window.setTimeout#Passing_string_literals\">not pass a string</a> to <code>setTimeout</code> or <code>setInterval</code>. Passing a string makes <code>setTimeout()</code> and <code>setInterval()</code> use a functionality similar to <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> that executes strings as scripts. If it executes arbitrary, potentially malicious code from some other source, <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval#Don.27t_use_eval.21\">it will be dangerous</a>. </p>\n",
                    "is_accepted": false,
                    "score": 200
                },
                {
                    "body": "<p>Totally agree with Joseph.</p>\n\n<p>Here is a fiddle to test this: <a href=\"http://jsfiddle.net/nicocube/63s2s/\" rel=\"nofollow\">http://jsfiddle.net/nicocube/63s2s/</a></p>\n\n<p>In the context of the fiddle, the string argument do not work, in my opinion because the function is not defined in the global scope.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>i think the setTimeout function that you write is not being run.\nif you use jquery, you can make it run correctly by doing this : </p>\n\n<pre><code>    function alertMsg() {\n      //your func\n    }\n\n    $(document).ready(function() {\n       setTimeout(alertMsg,3000); \n       // the function you called by setTimeout must not be a string.\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am learning JavaScript and I have learned recently about JavaScript Timing Events.\nwhen I learned about JavaScript setTimeout Method at this link:<a href=\"http://www.w3schools.com/js/js_timing.asp\">http://www.w3schools.com/js/js_timing.asp</a></p>\n\n<p>I noticed a strange figure which I didn't run into before.\nWhen you set the setTimeout Method as w3schools sets at the link above.\nThey are using double quotes and then calling the function.</p>\n\n<p>Example: </p>\n\n<pre><code>setTimeout(\"alertMsg()\",3000);\n</code></pre>\n\n<p>I know that a double quotes a single quotes in <strong>JS</strong> means a String.\nalso I saw that I can do the same like that:</p>\n\n<pre><code>setTimeout(alertMsg,3000);\n</code></pre>\n\n<p>with the parentheses its referring,without the parentheses its copied.\nWhen I am using the quotes and the parentheses its getting crazy.\nI will be glad if some one can explain to me the three weirdness please,\nthe first I didn't understand is the using the method like that:</p>\n\n<pre><code>setTimeout(\"alertMsg()\",3000);\n</code></pre>\n\n<p>(with the parentheses). the second is with out the quotes and the parentheses like that: </p>\n\n<pre><code>setTimeout(alertMsg,3000);\n</code></pre>\n\n<p>and the third is when I am using : </p>\n\n<pre><code>setTimeout(\"alertMsg\",3000);\n</code></pre>\n\n<p>The quotes and without the parentheses.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>A better source for setTimeout reference would be <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.setTimeout\">MDN</a></p>\n",
            "last_activity_date": 1411605319,
            "question_id": 10312963,
            "score": 112,
            "tags": [
                "javascript",
                "settimeout"
            ],
            "title": "JavaScript,setTimeout"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>You can..... but don't.</p>\n\n<p>You should not be altering the default behaviour of a users browser.  It really is bad usability for your web application.  Also if a user wants to disable this hack then they can just disable javascript on their browser.</p>\n\n<p>Just add these attributes to the textbox</p>\n\n<pre><code>ondragstart=\u201dreturn false\u201d onselectstart=\u201dreturn false\u201d\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You could attach a \"keydown\" listener to the input box to detect whether or not the Ctrl + V keys are being pressed and, if so, stop the event or set the input box's value to ''.</p>\n\n<p>That wouldn't handle right clicking and pasting or pasting from the Edit menu of the browser, though. You may need to add a \"last length\" counter to the keydown listener and use an interval to check the field's current length to see if it increase since the last keystroke.</p>\n\n<p>Neither is recommended, though. Form fields with paste disabled are extremely frustrating. I'm capable of typing my email correctly the first time, so I reserve the right to paste it into the second box.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>How about sending a confirmation email to the email address that the user has just entered twice in which there is a link to a confirmation URL on your site, then you know that they have got the message?</p>\n\n<p>Anyone that doesn't click to confirm the receipt of the email may have entered their email address incorrectly.</p>\n\n<p>Not a perfect solution, but just some ideas.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Add a second step to your registration process. First page as usual, but on reload, display a second page and ask the email again. If it's that important, the user can handle it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I recently had to begrudgingly disable pasting in a form element. To do so, I wrote a cross-browser* implementation of Internet Explorer's (and others') onpaste event handler. My solution had to be independent of any third-party JavaScript libraries.</p>\n\n<p>Here's what I came up with. It doesn't completely disable pasting (the user can paste a single character at a time, for example), but it meets my needs and avoids having to deal with keyCodes, etc.</p>\n\n<pre><code>// Register onpaste on inputs and textareas in browsers that don't\n// natively support it.\n(function () {\n    var onload = window.onload;\n\n    window.onload = function () {\n        if (typeof onload == \"function\") {\n            onload.apply(this, arguments);\n        }\n\n        var fields = [];\n        var inputs = document.getElementsByTagName(\"input\");\n        var textareas = document.getElementsByTagName(\"textarea\");\n\n        for (var i = 0; i &lt; inputs.length; i++) {\n            fields.push(inputs[i]);\n        }\n\n        for (var i = 0; i &lt; textareas.length; i++) {\n            fields.push(textareas[i]);\n        }\n\n        for (var i = 0; i &lt; fields.length; i++) {\n            var field = fields[i];\n\n            if (typeof field.onpaste != \"function\" &amp;&amp; !!field.getAttribute(\"onpaste\")) {\n                field.onpaste = eval(\"(function () { \" + field.getAttribute(\"onpaste\") + \" })\");\n            }\n\n            if (typeof field.onpaste == \"function\") {\n                var oninput = field.oninput;\n\n                field.oninput = function () {\n                    if (typeof oninput == \"function\") {\n                        oninput.apply(this, arguments);\n                    }\n\n                    if (typeof this.previousValue == \"undefined\") {\n                        this.previousValue = this.value;\n                    }\n\n                    var pasted = (Math.abs(this.previousValue.length - this.value.length) &gt; 1 &amp;&amp; this.value != \"\");\n\n                    if (pasted &amp;&amp; !this.onpaste.apply(this, arguments)) {\n                        this.value = this.previousValue;\n                    }\n\n                    this.previousValue = this.value;\n                };\n\n                if (field.addEventListener) {\n                    field.addEventListener(\"input\", field.oninput, false);\n                } else if (field.attachEvent) {\n                    field.attachEvent(\"oninput\", field.oninput);\n                }\n            }\n        }\n    }\n})();\n</code></pre>\n\n<p>To make use of this in order to disable pasting:</p>\n\n<pre><code>&lt;input type=\"text\" onpaste=\"return false;\" /&gt;\n</code></pre>\n\n<p><hr></p>\n\n<p>* I know oninput isn't part of the W3C DOM spec, but all of the browsers I've tested this code with&mdash;Chrome 2, Safari 4, Firefox 3, Opera 10, IE6, IE7&mdash;support either oninput or onpaste. Out of all these browsers, only Opera doesn't support onpaste, but it does support oninput.</p>\n\n<p>Note: This won't work on a console or other system that uses an on-screen keyboard (assuming the on-screen keyboard doesn't send keys to the browser when each key is selected). If it's possible your page/app could be used by someone with an on-screen keyboard and Opera (e.g.: Nintendo Wii, some mobile phones), don't use this script unless you've tested to make sure the on-screen keyboard sends keys to the browser after each key selection.</p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>Crazy idea: Require the user to send you an email as part of the signup process. This would obviously be inconvenient when clicking on a mailto link doesn't work (if they're using webmail, for example), but I see it as a way to simultaneously guarantee against typos and confirm the email address.</p>\n\n<p>It would go like this: They fill out most of the form, entering their name, password, and whatnot. When they push submit, they're actually clicking a link to send mail to your server. You've already saved their other information, so the message just includes a token saying which account this is for.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>&lt;editorial&gt;</p>\n\n<p>Don't do it. Don't mess with the user's browser. By Copy + Pasting into an E-Mail confirmation field, the user accepts responsibility over what they type. If they are dumb enough to copy + paste a faulty address (it has happened to me) then it's their own damn fault.</p>\n\n<p>If you want to make sure that the E-Mail confirmation works out, have the user check their E-Mail while your site waits (\"Please open your webmail program in a new window\"). Show the E-Mail address in big fat letters (\"The confirmation E-Mail was sent to.... made an error? CLick here to change). </p>\n\n<p>Even better, if you can, let the user have some kind of limited access without confirming. That way, they can log in straight away and you improve your chances to keep in touch with the visitor even if the confirmation mail is blocked due to other reasons (e.g. spam filters).</p>\n\n<p>&lt;/editorial&gt;</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>what about using CSS on UIWebView? something like </p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n&lt;!\u2014-\n    * {\n        -webkit-user-select: none;\n    }\n--&gt;\n&lt;/style&gt;\n</code></pre>\n\n<p>also you can read detail about block copy-paste using CSS\n<a href=\"http://rakaz.nl/2009/09/iphone-webapps-101-getting-safari-out-of-the-way.html\" rel=\"nofollow\">http://rakaz.nl/2009/09/iphone-webapps-101-getting-safari-out-of-the-way.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simple solution: just reverse the registration process: instead of requiring confirmation at the end of registration process, request confirmation at the beginning of it! I.e. the registration process started with a simple form asking for e-mail address and nothing else. Upon submitting, an e-mail with link to a confirmation page unique to the e-mail address sent out. The user go to that page, then the rest of information for the registration (user name, full name, etc.) will be requested.</p>\n\n<p>This is simple since the website does not even need to store anything before confirmation, the e-mail address can be encrypted with a key and attached as part of the confirmation page address.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I did something similar to this for <a href=\"http://bookmarkchamp.com\" rel=\"nofollow\">http://bookmarkchamp.com</a> - there I wanted to detect when a user copied something into an HTML field. The implementation I came up with was to check the field constantly to see if at any time there was suddenly a whole lot of text in there.</p>\n\n<p>In other words: if once milisecond ago there was no text, and now there are more than 5 chars... then the user probably pasted something in the field.</p>\n\n<p>If you want to see this working in Bookmarkchamp (you need to be registered), paste a URL into the URL field (or drag and drop a URL in there).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found a JavaScript solution to disable copy paste on a text box: </p>\n\n<p></p>\n\n<p>for detail kindly visit: <a href=\"http://unnisworld.wordpress.com/2007/10/31/how-to-disable-copy-paste-and-autocomplete-for-an-html-textbox/#comment-1485\" rel=\"nofollow\">http://unnisworld.wordpress.com/2007/10/31/how-to-disable-copy-paste-and-autocomplete-for-an-html-textbox/#comment-1485</a></p>\n\n<p>Thanks </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"http://ehudashkenazi.com/disable-browser-autocomplete-deny-copy-and-paste\" rel=\"nofollow\">from</a></p>\n\n<p>Some may suggest using Javascript to capture the users' actions, like right-clicking the mouse or the Ctrl+C / Ctrl+V key combinations and then stopping the operation. But this is obviously not the best or simplest solution.\nThe solution is integrated in the input field properties itself together with some event capturing using Javascript.</p>\n\n<p>In order to disabled the browsers' autocomplete, simply add the attribute to the input field. It should look something like this:</p>\n\n<pre><code>&lt;input type=\"text\" autocomplete=\"off\"&gt;\n</code></pre>\n\n<p>And if you want to deny Copy and Paste for that field, simply add the Javascript event capturing calls oncopy, onpaste, and oncut and make them return false, like so:</p>\n\n<pre><code>&lt;input type=\"text\" oncopy=\"return false;\" onpaste=\"return false;\" oncut=\"return false;\"&gt;\n</code></pre>\n\n<p>The next step is using onselectstart to deny the input field's content selection from the user, but be warned: this only works for Internet Explorer. The rest of the above work great on all the major browsers: Internet Explorer, Mozilla Firefox, Apple Safari (on Windows OS, at least) and Google Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Add a class of 'disablecopypaste' to the inputs you want to disable the copy paste functionality on and add this jQuery script</p>\n\n<pre><code>  $(document).ready(function () {\n    $('input.disablecopypaste').bind('copy paste', function (e) {\n       e.preventDefault();\n    });\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Check validity of the MX record of the host of the given email. This can eliminate errors to the right of the @ sign.</p>\n\n<p>You could do this with an AJAX call before submit and/or server side after the form is submitted.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>Hope below code will work :\n\n&lt;!--Disable Copy And Paste--&gt;\n&lt;script language='JavaScript1.2'&gt;\nfunction disableselect(e){\nreturn false\n}\nfunction reEnable(){\nreturn true\n}\ndocument.onselectstart=new Function (\"return false\")\nif (window.sidebar){\ndocument.onmousedown=disableselect\ndocument.onclick=reEnable\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The way that I would resolve the issue of confirming an email address is as follows:</p>\n\n<ol>\n<li>Before going through the main process - say registering the user - first ask them to enter their email address.</li>\n<li>Generate a unique code and send it to that email address.</li>\n<li>If user has entered the correct email address, they will get the code.</li>\n<li>User must enter that code along with their email address, and their other required information, so they can complete the registration. - Please note that if this time they enter a wrong email address (or a wrong code), because it will not match with the code, the registration will not go through, and the user will be informed right away.</li>\n<li>If the email address, the code, and other registration information have been entered correctly, the registration is complete and user can start using the system immediately. - no need to to respond to any other email address in order to activate their account</li>\n</ol>\n\n<p>For better security, the code should have a limited lifetime, and it should be allowed only once in the registration process.\nAlso, in order to prevent any malicious robot applications, it is better to accompany the first step with captcha or a similar mechanism.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Extending <a href=\"http://stackoverflow.com/users/10573/\">@boycs</a> answer, I would recommend also using \"on\".</p>\n\n<pre><code>$('body').on('copy paste', 'input', function (e) { e.preventDefault(); });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Hey just got this around using onpaste:\"return false\", thanks to: <a href=\"http://sumtips.com/2011/11/prevent-copy-cut-paste-text-field.html\" rel=\"nofollow\">http://sumtips.com/2011/11/prevent-copy-cut-paste-text-field.html</a></p>\n\n<p>We have various other options available as listed below.</p>\n\n<pre><code>&lt;input type=\"text\" onselectstart=\"return false\" onpaste=\"return false;\" onCopy=\"return false\" onCut=\"return false\" onDrag=\"return false\" onDrop=\"return false\" autocomplete=off/&gt;&lt;br&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a way using Javascript to disable the ability to paste text into a text field on an HTML form?</p>\n\n<p>E.g.\nI have a simple registration form where the user is required to input their email twice.  The second email entry is to verify there are no typos in the first email entry.  However if the user copy/pastes their email then that defeats the purpose and I've been experiencing users having problems because they've input the wrong email and copy/pasted it.</p>\n\n<p>Thanks!</p>\n\n<p><strong>EDIT:</strong>\nMaybe I wasn't clear on my question but I am not trying to prevent people from copying (or drag selecting) text on their browser.  I just want to stop them from <em>pasting</em> input into a text field to minimize user error.</p>\n\n<p>Perhaps instead of using this \"hack\" you can suggest another solution to the core problem of what I'm trying to solve here?  I've done less than half a dozen user tests and this has already happened twice.  My audience does not have a high level of computer proficiency.</p>\n",
            "last_activity_date": 1412766363,
            "question_id": 1226574,
            "score": 43,
            "tags": [
                "javascript",
                "html",
                "copy-paste"
            ],
            "title": "Disable Copy/Paste into HTML form using Javascript"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>I don't think this is possible. As far as I know, the only time a browser doesn't scroll to a changed <code>document.location.hash</code> is if the hash doesn't exist within the page.</p>\n\n<p><a href=\"http://ajaxpatterns.org/Unique%5FURLs\" rel=\"nofollow\">This article</a> isn't directly related to your question, but it discusses typical browser behavior of changing <code>document.location.hash</code> </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Step 1: You need to defuse the node ID, until the hash has been set. This is done by removing the ID off the node while the hash is being set, and then adding it back on.</p>\n\n<pre><code>hash = hash.replace( /^#/, '' );\nvar node = $( '#' + hash );\nif ( node.length ) {\n  node.attr( 'id', '' );\n}\ndocument.location.hash = hash;\nif ( node.length ) {\n  node.attr( 'id', hash );\n}\n</code></pre>\n\n<p>Step 2: Some browsers will trigger the scroll based on where the ID'd node was last seen so you need to help them a little. You need to add an extra <code>div</code> to the top of the viewport, set its ID to the hash, and then roll everything back:</p>\n\n<pre><code>hash = hash.replace( /^#/, '' );\nvar fx, node = $( '#' + hash );\nif ( node.length ) {\n  node.attr( 'id', '' );\n  fx = $( '&lt;div&gt;&lt;/div&gt;' )\n          .css({\n              position:'absolute',\n              visibility:'hidden',\n              top: $(document).scrollTop() + 'px'\n          })\n          .attr( 'id', hash )\n          .appendTo( document.body );\n}\ndocument.location.hash = hash;\nif ( node.length ) {\n  fx.remove();\n  node.attr( 'id', hash );\n}\n</code></pre>\n\n<p>Step 3: Wrap it in a plugin and use that instead of writing to <code>location.hash</code>... </p>\n",
                    "is_accepted": false,
                    "score": 88
                },
                {
                    "body": "<p>I think I may have found a fairly simple solution.  The problem is that the hash in the URL is also an element on the page that you get scrolled to.  if I just prepend some text to the hash, now it no longer references an existing element!</p>\n\n<pre><code>$(function(){\n    //This emulates a click on the correct button on page load\n    if(document.location.hash){\n     $(\"#buttons li a\").removeClass('selected');\n     s=$(document.location.hash.replace(\"btn_\",\"\")).addClass('selected').attr(\"href\").replace(\"javascript:\",\"\");\n     eval(s);\n    }\n\n    //Click a button to change the hash\n    $(\"#buttons li a\").click(function(){\n            $(\"#buttons li a\").removeClass('selected');\n            $(this).addClass('selected');\n            document.location.hash=\"btn_\"+$(this).attr(\"id\")\n            //return false;\n    });\n});\n</code></pre>\n\n<p>Now the URL appears as <code>page.aspx#btn_elementID</code> which is not a real ID on the page. I just remove \"btn_\" and get the actual element ID</p>\n",
                    "is_accepted": true,
                    "score": 63
                },
                {
                    "body": "<p>A snippet of your original code:</p>\n\n<pre><code>$(\"#buttons li a\").click(function(){\n    $(\"#buttons li a\").removeClass('selected');\n    $(this).addClass('selected');\n    document.location.hash=$(this).attr(\"id\")\n});\n</code></pre>\n\n<p>Change this to:</p>\n\n<pre><code>$(\"#buttons li a\").click(function(e){\n    // need to pass in \"e\", which is the actual click event\n    e.preventDefault();\n    // the preventDefault() function ... prevents the default action.\n    $(\"#buttons li a\").removeClass('selected');\n    $(this).addClass('selected');\n    document.location.hash=$(this).attr(\"id\")\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The other way to do this is to add a div that's hidden at the top of the viewport. This div is then assigned the id of the hash before the hash is added to the url....so then you don't get a scroll.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you like progressive enhancement use <code>history.replaceState</code> to change the hash.\nThis will not trigger the jump to the associated element.</p>\n\n<pre><code>$(\"#buttons\").on('click', 'a', function(){\n        var scrollV\n          , scrollH\n          , $this = $(this)\n          , href = $this.attr('href');\n        $this\n           .siblings()\n             .removeClass('selected')\n             .end()\n           .addClass('selected');\n        // check if the browser supports pushState\n        if(history &amp;&amp; history.replaceState) { \n          history.replaceState({}, \"\", href);\n        // provide a fallback\n        } else { \n          scrollV = document.body.scrollTop;\n          scrollH = document.body.scrollLeft;\n          location.hash = href;\n          document.body.scrollTop = scrollV;\n          document.body.scrollLeft = scrollH;\n        }\n});\n</code></pre>\n\n<p>Browser Support: <a href=\"http://caniuse.com/#search=replaceState\" rel=\"nofollow\">replaceState</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>if you use hashchange event with hash parser, you can prevent default action on links and change location.hash adding one character to have difference with id property of an element</p>\n\n<pre><code>$('a[href^=#]').on('click', function(e){\n    e.preventDefault();\n    location.hash = $(this).attr('href')+'/';\n});\n\n$(window).on('hashchange', function(){\n    var a = /^#?chapter(\\d+)-section(\\d+)\\/?$/i.exec(location.hash);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Okay, this is a rather old topic but I thought I'd chip in as the 'correct' answer doesn't work well with CSS. </p>\n\n<p>This solution basically <strong>prevents</strong> the click event from moving the page so we can get the scroll position first. Then we manually add the hash and the browser automatically triggers a <strong>hashchange</strong> event. We capture the hashchange event and scroll back to the correct position. A callback separates and prevents your code causing a delay by keeping your hash hacking in one place. </p>\n\n<pre><code>var hashThis = function( $elem, callback ){\n    var scrollLocation;\n    $( $elem ).on( \"click\", function( event ){\n        event.preventDefault();\n        scrollLocation = $( window ).scrollTop();\n        window.location.hash = $( event.target ).attr('href').substr(1);\n    });\n    $( window ).on( \"hashchange\", function( event ){\n        $( window ).scrollTop( scrollLocation );\n        if( typeof callback === \"function\" ){\n            callback();\n        }\n    });\n}\nhashThis( $( \".myAnchor\" ), function(){\n    // do something useful!\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's my solution for history-enabled tabs:</p>\n\n<pre><code>    var tabContainer = $(\".tabs\"),\n        tabsContent = tabContainer.find(\".tabsection\").hide(),\n        tabNav = $(\".tab-nav\"), tabs = tabNav.find(\"a\").on(\"click\", function (e) {\n                e.preventDefault();\n                var href = this.href.split(\"#\")[1]; //mydiv\n                var target = \"#\" + href; //#myDiv\n                tabs.each(function() {\n                    $(this)[0].className = \"\"; //reset class names\n                });\n                tabsContent.hide();\n                $(this).addClass(\"active\");\n                var $target = $(target).show();\n                if ($target.length === 0) {\n                    console.log(\"Could not find associated tab content for \" + target);\n                } \n                $target.removeAttr(\"id\");\n                // TODO: You could add smooth scroll to element\n                document.location.hash = target;\n                $target.attr(\"id\", href);\n                return false;\n            });\n</code></pre>\n\n<p>And to show the last-selected tab:</p>\n\n<pre><code>var currentHashURL = document.location.hash;\n        if (currentHashURL != \"\") { //a tab was set in hash earlier\n            // show selected\n            $(currentHashURL).show();\n        }\n        else { //default to show first tab\n            tabsContent.first().show();\n        }\n        // Now set the tab to active\n        tabs.filter(\"[href*='\" + currentHashURL + \"']\").addClass(\"active\");\n</code></pre>\n\n<p>Note the <code>*=</code> on the <code>filter</code> call.  This is a jQuery-specific thing, and without it, your history-enabled tabs will fail.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This solution creates a div at the actual scrollTop and removes it after changing hash:</p>\n\n<pre><code>$('#menu a').on('click',function(){\n    //your anchor event here\n    var href = $(this).attr('href');\n    window.location.hash = href;\n    if(window.location.hash == href)return false;           \n    var $jumpTo = $('body').find(href);\n    $('body').append(\n        $('&lt;div&gt;')\n            .attr('id',$jumpTo.attr('id'))\n            .addClass('fakeDivForHash')\n            .data('realElementForHash',$jumpTo.removeAttr('id'))\n            .css({'position':'absolute','top':$(window).scrollTop()})\n    );\n    window.location.hash = href;    \n});\n$(window).on('hashchange', function(){\n    var $fakeDiv = $('.fakeDivForHash');\n    if(!$fakeDiv.length)return true;\n    $fakeDiv.data('realElementForHash').attr('id',$fakeDiv.attr('id'));\n    $fakeDiv.remove();\n});\n</code></pre>\n\n<p>optional, triggering anchor event at page load:</p>\n\n<pre><code>$('#menu a[href='+window.location.hash+']').click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Adding this here because the more relevant questions have all been marked as duplicates pointing here\u2026</p>\n\n<p>My situation is simpler:</p>\n\n<ul>\n<li>user clicks the link (<code>a[href='#something']</code>)</li>\n<li>click handler does: <code>e.preventDefault()</code></li>\n<li>smoothscroll function: <code>$(\"html,body\").stop(true,true).animate({ \"scrollTop\": linkoffset.top }, scrollspeed, \"swing\" );</code></li>\n<li><strong>then</strong> <code>window.location = link;</code></li>\n</ul>\n\n<p>This way, the scroll occurs, and there's no jump when the location is updated.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Erm I have a somewhat crude but definitely working method.<br>\nJust store the current scroll position in a temp variable and then reset it after changing the hash. :)</p>\n\n<p>So for the original example:</p>\n\n<pre><code>$(\"#buttons li a\").click(function(){\n        $(\"#buttons li a\").removeClass('selected');\n        $(this).addClass('selected');\n\n        var scrollPos = $(document).scrollTop();\n        document.location.hash=$(this).attr(\"id\")\n        $(document).scrollTop(scrollPos);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Only Add this code into jquary on document ready</p>\n\n<p>Ref : <a href=\"http://css-tricks.com/snippets/jquery/smooth-scrolling/\" rel=\"nofollow\">http://css-tricks.com/snippets/jquery/smooth-scrolling/</a></p>\n\n<pre><code>$(function() {\n  $('a[href*=#]:not([href=#])').click(function() {\n    if (location.pathname.replace(/^\\//,'') == this.pathname.replace(/^\\//,'') &amp;&amp; location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');\n      if (target.length) {\n        $('html,body').animate({\n          scrollTop: target.offset().top\n        }, 1000);\n        return false;\n      }\n    }\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>We've got a few pages using ajax to load in content and there's a few occasions where we need to deep link into a page. Instead of having a link to \"Users\" and telling people to click \"settings\" it's helpful to be able to link people to <em>user.aspx#settings</em></p>\n\n<p>To allow people to provide us with correct links to sections (for tech support, etc.) I've got it set up to automatically modify the hash in the URL whenever a button is clicked.  The only issue of course is that when this happens, it also scrolls the page to this element.</p>\n\n<p>Is there a way to disable this?  Below is how I'm doing this so far.</p>\n\n<pre><code>$(function(){\n    //This emulates a click on the correct button on page load\n    if(document.location.hash){\n     $(\"#buttons li a\").removeClass('selected');\n     s=$(document.location.hash).addClass('selected').attr(\"href\").replace(\"javascript:\",\"\");\n     eval(s);\n    }\n\n    //Click a button to change the hash\n    $(\"#buttons li a\").click(function(){\n            $(\"#buttons li a\").removeClass('selected');\n            $(this).addClass('selected');\n            document.location.hash=$(this).attr(\"id\")\n            //return false;\n    });\n});\n</code></pre>\n\n<p>I had hoped the <code>return false;</code> would stop the page from scrolling - but it just makes the link not work at all. So that's just commented out for now so I can navigate.</p>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1423696293,
            "question_id": 1489624,
            "score": 86,
            "tags": [
                "javascript",
                "jquery",
                "fragment-identifier"
            ],
            "title": "Modifying document.location.hash without page scrolling"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>I'd hate to redirect you to jQuery (like often is done) <a href=\"http://remysharp.com/2008/10/17/jquery-really-visible/\" rel=\"nofollow\">But this discussion</a> about when elements are really visible is very insightful.</p>\n\n<p>And since <a href=\"http://code.google.com/p/jqueryjs/downloads/detail?name=jquery-1.3.2.min.js&amp;downloadBtn=\" rel=\"nofollow\">jQuery 1.3.2</a> this is <a href=\"http://remysharp.com/2008/10/17/jquery-really-visible/#comment-135222\" rel=\"nofollow\">no longer a problem</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Check elements' offsetHeight property. If it is more than 0, it is visible. Note: this approach doesn't cover a situation when visibility:hidden style is set. But that style is something weird anyways.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Prototype's <a href=\"http://prototypejs.org/api/element\" rel=\"nofollow\">Element library</a> is one of the most powerful query lib in terms of the methods. I recommend you to check out the API.</p>\n\n<p>A few hints:</p>\n\n<p>1) Checking visibility can be a pain but you can use the Element.getStyle() method and Element.visible() method combined into a custom function. With getStyle() you can check the actual computed style.</p>\n\n<p>2) I don't know exactly what you mean by \"underneath\" :) If you meant by it has a specific ancestor eg. a wrapper div, you can use Element.up(cssRule):</p>\n\n<pre><code>var child = $(\"myparagraph\");\nif(!child.up(\"mywrapper\")){\n  // i lost my mom!\n} else {\n  // i found my mom!\n}\n</code></pre>\n\n<p>If you want to check the siblings of the child element you can do that too:</p>\n\n<pre><code>var child = $(\"myparagraph\");\nif(!child.previous(\"mywrapper\")){\n  // i lost my bro!\n} else {\n  // i found my bro!\n}\n</code></pre>\n\n<p>3) Again, Element lib can help you if I understand correctly what you mean :) You can check the actual <a href=\"http://prototypejs.org/api/document/viewport\" rel=\"nofollow\">dimensions of the viewport</a> and the <a href=\"http://prototypejs.org/api/element/cumulativeoffset\" rel=\"nofollow\">offset of your element</a> so you can calculate if your element is \"off screen\".</p>\n\n<p>Good luck!</p>\n\n<p><strong>Update:</strong> I pasted a test case for prototypejs here <a href=\"http://gist.github.com/117125\" rel=\"nofollow\">http://gist.github.com/117125</a> It seems in your case we simply cannot trust in getStyle() at all. For maximize the reliability of the isMyElementReallyVisible function you should combine the following:</p>\n\n<ul>\n<li>checking the computed style (dojo has a nice <a href=\"https://github.com/dojo/dojo/blob/master/dom-style.js#L23\" rel=\"nofollow\">implementation</a> that you can borrow)</li>\n<li>checking the viewportoffset (prototype native method)</li>\n<li>checking the z-index for the \"beneath\" problem (under IE it may be buggy)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Catch mouse-drag and viewport events (onmouseup, onresize, onscroll). </p>\n\n<p>When a drag ends do a comparison of the dragged item boundary with all \"elements of interest\" (ie, elements with class \"dont_hide\" or an array of ids). Do the same with window.onscroll and window.onresize. Mark any elements hidden with a special attribute or classname or simply perform whatever action you want then and there.</p>\n\n<p>The hidden tests are pretty easy. For \"totally hidden\" you want to know if ALL corners are either inside the dragged-item boundary or outside the viewport. For partially hidden you're looking for a single corner matching the same test.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is what I have so far. It covers both 1 and 3. I'm however still strugling with 2 since  I'm not that familiar with Prototype (I'm more a Jquery type of guy).</p>\n\n<pre><code>function isVisible( elem ){\n\tvar $elem = $(elem);\n\t//First check if elem is hidden through css as this is not very costly:\n\tif($elem.getStyle('display') == 'none' || $elem.getStyle('visibility') == 'hidden' ){\n\t\t//elem is set through CSS stylesheet or inline to invisible\n\t\treturn false;\n\t}\n\t//Now check for the elem being outside of the viewport\n\tvar $elemOffset = $elem.viewportOffset();\n\tif($elemOffset.left &lt; 0 || $elemOffset.top &lt; 0){ \n        //elem is left of or above viewport\n\t\treturn false;\n\t}\n\tvar vp = document.viewport.getDimensions();\n\tif($elemOffset.left &gt; vp.width || $elemOffset.top &gt; vp.height){ \n        //elem is below or right of vp\n\t\treturn false;\n\t}\n\t//Now check for elements positioned on top:\n\t//TODO: build check for this using prototype...\n\t//Neither of these was true, so the elem was visible:\n\treturn true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Interesting question.</p>\n\n<p>This would be my approach.</p>\n\n<ol>\n<li>At first check that element.style.visibility !== 'hidden' &amp;&amp; element.style.display !== 'none'</li>\n<li>Then test with document.elementFromPoint(element.offsetLeft, element.offsetTop) if the returned element is the element I expect, this is tricky to detect if an element is overlapping another completely.</li>\n<li>Finally test if offsetTop and offsetLeft are located in the viewport taking scroll offsets into account.</li>\n</ol>\n\n<p>Hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For the point 2.</p>\n\n<p>I see that no one has suggested to use <code>document.elementFromPoint(x,y)</code>, to me it is the fastest way to test if an element is nested or hidden by another. You can pass the offsets of the targetted element to the function.</p>\n\n<p>Here's PPK test page on <a href=\"http://www.quirksmode.org/dom/tests/elementfrompoint.html\">elementFromPoint</a>.  </p>\n",
                    "is_accepted": true,
                    "score": 69
                },
                {
                    "body": "<p>Here is a sample script and test case.  Covers positioned elements, visibilty: hidden, display: none.  Didn't test z-index, assume it works.</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n    div {\n      width: 200px;\n      border: 1px solid red;\n    }\n    p {\n      border: 2px solid green;\n    }\n    .r {\n      border: 1px solid #BB3333;\n      background: #EE9999;\n      position: relative;\n      top: -50px;\n      height: 2em;\n    }\n    .of {\n      overflow: hidden;\n      height: 2em;\n      word-wrap: none; \n    }\n    .of p {\n      width: 100%;\n    }\n\n    .of pre {\n      display: inline;\n    }\n    .iv {\n      visibility: hidden;\n    }\n    .dn {\n      display: none;\n    }\n    &lt;/style&gt;\n    &lt;script src=\"http://www.prototypejs.org/assets/2008/9/29/prototype-1.6.0.3.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      function isVisible(elem){\n        if (Element.getStyle(elem, 'visibility') == 'hidden' || Element.getStyle(elem, 'display') == 'none') {\n          return false;\n        }\n        var topx, topy, botx, boty;\n        var offset = Element.positionedOffset(elem);\n        topx = offset.left;\n        topy = offset.top;\n        botx = Element.getWidth(elem) + topx;\n        boty = Element.getHeight(elem) + topy;\n        var v = false;\n        for (var x = topx; x &lt;= botx; x++) {\n          for(var y = topy; y &lt;= boty; y++) {\n            if (document.elementFromPoint(x,y) == elem) {\n              // item is visible\n              v = true;\n              break;\n            }\n          }\n          if (v == true) {\n            break;\n          }\n        }\n        return v;\n      }\n\n      window.onload=function() {\n        var es = Element.descendants('body');\n        for (var i = 0; i &lt; es.length; i++ ) {\n          if (!isVisible(es[i])) {\n            alert(es[i].tagName);\n          }\n        }\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body id='body'&gt;\n    &lt;div class=\"s\"&gt;&lt;p&gt;This is text&lt;/p&gt;&lt;p&gt;More text&lt;/p&gt;&lt;/div&gt;\n    &lt;div class=\"r\"&gt;This is relative&lt;/div&gt;\n    &lt;div class=\"of\"&gt;&lt;p&gt;This is too wide...&lt;/p&gt;&lt;pre&gt;hidden&lt;/pre&gt;\n    &lt;div class=\"iv\"&gt;This is invisible&lt;/div&gt;\n    &lt;div class=\"dn\"&gt;This is display none&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Edit:</strong> changing answer due to missing 2nd/3rd points on the requirements:</p>\n\n<p>Hi Macha, the answer to the first point is quite simple if you're still able to use prototype (prototypejs):</p>\n\n<pre><code>$('HtmlElementID').visible(); returns: true|false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I don't think checking the element's own visibility and display properties is good enough for requirement #1, even if you use currentStyle/getComputedStyle.  You also have to check the element's ancestors.  If an ancestor is hidden, so is the element.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't know how much of this is supported in older or not-so-modern browsers, but I'm using something like this (without the neeed for any libraries):</p>\n\n<pre><code>function visible(element) {\n  if (element.offsetWidth === 0 || element.offsetHeight === 0) return false;\n  var height = document.documentElement.clientHeight,\n      rects = element.getClientRects(),\n      on_top = function(r) {\n        var x = (r.left + r.right)/2, y = (r.top + r.bottom)/2;\n        document.elementFromPoint(x, y) === element;\n      };\n  for (var i = 0, l = rects.length; i &lt; l; i++) {\n    var r = rects[i],\n        in_viewport = r.top &gt; 0 ? r.top &lt;= height : (r.bottom &gt; 0 &amp;&amp; r.bottom &lt;= height);\n    if (in_viewport &amp;&amp; on_top(r)) return true;\n  }\n  return false;\n}\n</code></pre>\n\n<p>It checks that the element has an area > 0 and then it checks if any part of the element is within the viewport and that it is not hidden \"under\" another element (actually I only check on a single point in the center of the element, so it's not 100% assured -- but you could just modify the script to itterate over all the points of the element, if you really need to...).</p>\n\n<p><em>Update</em></p>\n\n<p>Modified on_top function that check every pixel:</p>\n\n<pre><code>on_top = function(r) {\n  for (var x = Math.floor(r.left), x_max = Math.ceil(r.right); x &lt;= x_max; x++)\n  for (var y = Math.floor(r.top), y_max = Math.ceil(r.bottom); y &lt;= y_max; y++) {\n    if (document.elementFromPoint(x, y) === element) return true;\n  }\n  return false;\n};\n</code></pre>\n\n<p>Don't know about the performance :)</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>As jkl pointed out, checking the element's visibility or display is not enough. You do have to check its ancestors. Selenium does this when it verifies visibility on an element.</p>\n\n<p>Check out the method Selenium.prototype.isVisible in the selenium-api.js file.</p>\n\n<p><a href=\"http://svn.openqa.org/svn/selenium-on-rails/selenium-on-rails/selenium-core/scripts/selenium-api.js\">http://svn.openqa.org/svn/selenium-on-rails/selenium-on-rails/selenium-core/scripts/selenium-api.js</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>One way to do it is:</p>\n\n<pre><code>isVisible(elm) {\n    while(elm.tagName != 'BODY') {\n        if(!$(elm).visible()) return false;\n        elm = elm.parentNode;\n    }\n    return true;\n}\n</code></pre>\n\n<p>Credits: <a href=\"https://github.com/atetlaw/Really-Easy-Field-Validation/blob/master/validation.js#L178\" rel=\"nofollow\">https://github.com/atetlaw/Really-Easy-Field-Validation/blob/master/validation.js#L178</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>/**\n * Checks display and visibility of elements and it's parents\n * @param  DomElement  el\n * @param  boolean isDeep Watch parents? Default is true\n * @return {Boolean}\n *\n * @author Oleksandr Knyga &lt;oleksandrknyga@gmail.com&gt;\n */\nfunction isVisible(el, isDeep) {\n    var elIsVisible = true;\n\n    if(\"undefined\" === typeof isDeep) {\n        isDeep = true;\n    }\n\n    elIsVisible = elIsVisible &amp;&amp; el.offsetWidth &gt; 0 &amp;&amp; el.offsetHeight &gt; 0;\n\n    if(isDeep &amp;&amp; elIsVisible) {\n\n        while('BODY' != el.tagName &amp;&amp; elIsVisible) {\n            elIsVisible = elIsVisible &amp;&amp; 'hidden' != window.getComputedStyle(el).visibility;\n            el = el.parentElement;\n        }\n    }\n\n    return elIsVisible;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use the clientHeight or clientWidth properties</p>\n\n<pre><code>function isViewable(element){\n  return (element.clientHeight &gt; 0);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>how about using </p>\n\n<pre><code>if(ele.getClientRect().length&gt;0) return true; \nelse return false;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Try <code>element.getBoundingClientRect()</code>.\nIt will return an object with properties</p>\n\n<ul>\n<li>bottom</li>\n<li>top</li>\n<li>right</li>\n<li>left</li>\n<li>width  --  browser dependent</li>\n<li>height -- browser dependent</li>\n</ul>\n\n<p>Check that the width and height of the element's <code>BoundingClientRect</code> are not zero which is the value of hidden or non-visible elements. If the values are greater than zero the element should be visible in the body. Then check if the <code>bottom</code> property is less than <code>screen.height</code> which would imply that the element is withing the viewport. (Technically you would also have to account for the top of the browser window including the searchbar, buttons, etc.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a part of the response that tells you if an element is in the viewport.\nYou may need to check if there is nothing on top of it using elementFromPoint, but it's a bit longer.</p>\n\n<pre><code>function isInViewport(element) {\n  var rect = element.getBoundingClientRect()\n  var windowHeight = window.innerHeight || document.documentElement.clientHeight\n  var windowWidth = window.innerWidth || document.documentElement.clientWidth\n\n  return rect.bottom &gt; 0 &amp;&amp; rect.top &lt; windowHeight &amp;&amp; rect.right &gt; 0 &amp;&amp; rect.left &lt; windowWidth\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>In javascript, how would you check if an object is actually visible. I don't just mean checking the visibility and display attributes. I mean, checking that the element is not</p>\n\n<ul>\n<li>visibility:hidden or display:none</li>\n<li>underneath another element</li>\n<li>scrolled off the edge of the screen.</li>\n</ul>\n\n<p>EDIT: For technical reasons, I  can't include any scripts. I can however use prototype as it is on the page already.</p>\n\n<p>EDIT 2: This is no longer neccesary, but I'd still find an answer interesting)</p>\n",
            "last_activity_date": 1410369470,
            "question_id": 704758,
            "score": 86,
            "tags": [
                "javascript",
                "dom",
                "visibility"
            ],
            "title": "How to check if an element is really visible with javascript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can listen to the <code>dragend</code> event, and if the map is dragged outside the allowed bounds, move it back inside. You can define your allowed bounds in a <a href=\"http://code.google.com/apis/maps/documentation/javascript/reference.html#LatLngBounds\"><code>LatLngBounds</code></a> object and then use the <code>contains()</code> method to check if the new lat/lng center is within the bounds.</p>\n\n<p>You can also limit the zoom level very easily.</p>\n\n<p>Consider the following example: <kbd><a href=\"http://jsfiddle.net/cse_tushar/9d4jy4ye/\">Fiddle Demo</a></kbd></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt; \n&lt;head&gt; \n   &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/&gt; \n   &lt;title&gt;Google Maps JavaScript API v3 Example: Limit Panning and Zoom&lt;/title&gt; \n   &lt;script type=\"text/javascript\" \n           src=\"http://maps.google.com/maps/api/js?sensor=false\"&gt;&lt;/script&gt;\n&lt;/head&gt; \n&lt;body&gt; \n   &lt;div id=\"map\" style=\"width: 400px; height: 300px;\"&gt;&lt;/div&gt; \n\n   &lt;script type=\"text/javascript\"&gt; \n\n   // This is the minimum zoom level that we'll allow\n   var minZoomLevel = 5;\n\n   var map = new google.maps.Map(document.getElementById('map'), {\n      zoom: minZoomLevel,\n      center: new google.maps.LatLng(38.50, -90.50),\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n   });\n\n   // Bounds for North America\n   var strictBounds = new google.maps.LatLngBounds(\n     new google.maps.LatLng(28.70, -127.50), \n     new google.maps.LatLng(48.85, -55.90)\n   );\n\n   // Listen for the dragend event\n   google.maps.event.addListener(map, 'dragend', function() {\n     if (strictBounds.contains(map.getCenter())) return;\n\n     // We're out of bounds - Move the map back within the bounds\n\n     var c = map.getCenter(),\n         x = c.lng(),\n         y = c.lat(),\n         maxX = strictBounds.getNorthEast().lng(),\n         maxY = strictBounds.getNorthEast().lat(),\n         minX = strictBounds.getSouthWest().lng(),\n         minY = strictBounds.getSouthWest().lat();\n\n     if (x &lt; minX) x = minX;\n     if (x &gt; maxX) x = maxX;\n     if (y &lt; minY) y = minY;\n     if (y &gt; maxY) y = maxY;\n\n     map.setCenter(new google.maps.LatLng(y, x));\n   });\n\n   // Limit the zoom level\n   google.maps.event.addListener(map, 'zoom_changed', function() {\n     if (map.getZoom() &lt; minZoomLevel) map.setZoom(minZoomLevel);\n   });\n\n   &lt;/script&gt; \n&lt;/body&gt; \n&lt;/html&gt;\n</code></pre>\n\n<p>Screenshot from the above example. The user will not be able to drag further south or far east in this case:</p>\n\n<p><img src=\"http://i.imgur.com/3FvkTRH.png\" alt=\"Google Maps JavaScript API v3 Example: Force stop map dragging\"></p>\n",
                    "is_accepted": true,
                    "score": 69
                },
                {
                    "body": "<p>Better way to restrict zoom level might be to use the minZoom / maxZoom options rather than reacting to events?</p>\n\n<pre><code>  var opt = { minZoom: 6, maxZoom: 9 };\n  map.setOptions(opt);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>Much better way to limit the range... used the contains logic from above poster.</p>\n\n<pre><code>var dragStartCenter;\n\ngoogle.maps.event.addListener(map, 'dragstart', function(){\n                                       dragStartCenter = map.getCenter();\n                                         });\n\ngoogle.maps.event.addListener(this.googleMap, 'dragend', function(){\n                            if (mapBounds.contains(map.getCenter())) return;\n                    map.setCenter(this.dragStart);\n                           });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's my variant to solve the problem of viewable area's limitation.</p>\n\n<pre><code>        google.maps.event.addListener(this.map, 'idle', function() {\n            var minLat = strictBounds.getSouthWest().lat();\n            var minLon = strictBounds.getSouthWest().lng();\n            var maxLat = strictBounds.getNorthEast().lat();\n            var maxLon = strictBounds.getNorthEast().lng();\n            var cBounds  = self.map.getBounds();\n            var cMinLat = cBounds.getSouthWest().lat();\n            var cMinLon = cBounds.getSouthWest().lng();\n            var cMaxLat = cBounds.getNorthEast().lat();\n            var cMaxLon = cBounds.getNorthEast().lng();\n            var centerLat = self.map.getCenter().lat();\n            var centerLon = self.map.getCenter().lng();\n\n            if((cMaxLat - cMinLat &gt; maxLat - minLat) || (cMaxLon - cMinLon &gt; maxLon - minLon))\n            {   //We can't position the canvas to strict borders with a current zoom level\n                self.map.setZoomLevel(self.map.getZoomLevel()+1);\n                return;\n            }\n            if(cMinLat &lt; minLat)\n                var newCenterLat = minLat + ((cMaxLat-cMinLat) / 2);\n            else if(cMaxLat &gt; maxLat)\n                var newCenterLat = maxLat - ((cMaxLat-cMinLat) / 2);\n            else\n                var newCenterLat = centerLat;\n            if(cMinLon &lt; minLon)\n                var newCenterLon = minLon + ((cMaxLon-cMinLon) / 2);\n            else if(cMaxLon &gt; maxLon)\n                var newCenterLon = maxLon - ((cMaxLon-cMinLon) / 2);\n            else\n                var newCenterLon = centerLon;\n\n            if(newCenterLat != centerLat || newCenterLon != centerLon)\n                self.map.setCenter(new google.maps.LatLng(newCenterLat, newCenterLon));\n        });\n</code></pre>\n\n<p><code>strictBounds</code> is an object of <code>new google.maps.LatLngBounds()</code> type. <code>self.gmap</code> stores a Google Map object (<code>new google.maps.Map()</code>).</p>\n\n<p>It really works but don't only forget to take into account the haemorrhoids with crossing 0th meridians and parallels if your bounds cover them.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For some reason</p>\n\n<pre><code>if (strictBounds.contains(map.getCenter())) return;\n</code></pre>\n\n<p>didnt work for me (maybe a southern hemisphere issue). I had to change it to:</p>\n\n<pre><code>    function checkBounds() {\n        var c = map.getCenter(),\n            x = c.lng(),\n            y = c.lat(),\n            maxX = strictBounds.getNorthEast().lng(),\n            maxY = strictBounds.getNorthEast().lat(),\n            minX = strictBounds.getSouthWest().lng(),\n            minY = strictBounds.getSouthWest().lat();\n\n        if(x &lt; minX || x &gt; maxX || y &lt; minY || y &gt; maxY) {\n            if (x &lt; minX) x = minX;\n            if (x &gt; maxX) x = maxX;\n            if (y &lt; minY) y = minY;\n            if (y &gt; maxY) y = maxY;\n            map.setCenter(new google.maps.LatLng(y, x));\n        }\n    }\n</code></pre>\n\n<p>Hope it will help someone.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This may be helpful.</p>\n\n<pre><code>  var myOptions = {\n      center: new google.maps.LatLng($lat,$lang),\n      zoom: 7,\n      disableDefaultUI: true,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n</code></pre>\n\n<p>The Zoom level can be customizable according to the requirement.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>One solution is like, If you know the specific lat/lng.</p>\n\n<pre><code>google.maps.event.addListener(map, 'idle', function() {\n\n    map.setCenter(new google.maps.LatLng(latitude, longitude));\n    map.setZoom(8);\n\n});\n</code></pre>\n\n<p>If don't have specific lat/lng</p>\n\n<pre><code>google.maps.event.addListener(map, 'idle', function() {\n\n    map.setCenter(map.getCenter());\n    map.setZoom(8);\n\n});\n</code></pre>\n\n<p>or</p>\n\n<pre><code>google.maps.event.addListener(map, 'idle', function() {\n\n    var bounds = new google.maps.LatLngBounds();\n    map.setCenter(bounds.getCenter());\n    map.setZoom(8);\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To limit the zoom on v.3+.\nin your map setting add default zoom level and minZoom or maxZoom (or both if required)\nzoom levels are 0 to 19.\nYou must declare deafult zoom level if limitation is required. all are case sensitive!</p>\n\n<pre><code>function initialize() {\n   var mapOptions = {\n      maxZoom:17,\n      minZoom:15,\n      zoom:15,\n      ....\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This can be used to re-center the map to a specific location. Which is what I needed.</p>\n\n<pre><code>    var MapBounds = new google.maps.LatLngBounds(\n    new google.maps.LatLng(35.676263, 13.949096),\n    new google.maps.LatLng(36.204391, 14.89038));\n\n    google.maps.event.addListener(GoogleMap, 'dragend', function ()\n    {\n        if (MapBounds.contains(GoogleMap.getCenter()))\n        {\n            return;\n        }\n        else\n        {\n            GoogleMap.setCenter(new google.maps.LatLng(35.920242, 14.428825));\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>is it possible to limit Google map v3 to a certain area? I want to allow displaying only some area (e.g. a country) and disallow the user to slide elsewhere. Also I want to restrict the zoom level - e.g. only between levels 6 and 9. And I want to use all the base map types.</p>\n\n<p>Is there any way to achieve this? </p>\n\n<p>I had a partial success with limiting zoom level by using StyledMap, but I succeeded only with restricting ROADMAP, I wasn't able to limit zoom on other basic types this way.</p>\n\n<p>Thanks for any help</p>\n",
            "last_activity_date": 1413045639,
            "question_id": 3818016,
            "score": 44,
            "tags": [
                "javascript",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "Google Maps v3 - limit viewable area and zoom level"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You probably want this (to make it like a normal CSS background-image declaration):</p>\n\n<pre><code>$('myOjbect').css('background-image', 'url(' + imageUrl + ')');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 451
                },
                {
                    "body": "<p>You'll want to include double quotes (\") before and after the imageUrl like this:</p>\n\n<pre><code>$('myOjbect').css('background-image', 'url(\"' + imageUrl + '\")');\n</code></pre>\n\n<p>This way, if the image has spaces it will still be set as a property.</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>Here is my code:</p>\n\n<pre>$('body').css('background-image', 'url(\"/apo/1.jpg\")');</pre>\n\n<p>Enjoy, friend</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Alternatively to what the others are correctly suggesting, I find it easier usually to toggle CSS classes, instead of individual CSS settings (especially background image URLs).  For example: </p>\n\n<pre><code>// in CSS \n.bg1 \n{\n  background-image: url(/some/image/url/here.jpg);\n}\n\n.bg2 \n{\n  background-image: url(/another/image/url/there.jpg);\n}\n\n// in JS\n// based on value of imageUrl, determine what class to remove and what class to add.\n$('myOjbect').removeClass('bg1').addClass('bg2');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Further to the other answers, you can also use \"background\". This is particularly useful when you want to set other properties relating to the way the image is used by the background, such as:</p>\n\n<pre><code>$(\"myObject\").css(\"background\", \"transparent url('\"+imageURL+\"') no-repeat right top\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For those using an actual url and not a variable:</p>\n\n<blockquote>\n  <p>$('myObject').css('background-image', 'url(../../example/url.html)');</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have an image URL in a <code>imageUrl</code> variable and I am trying to set it as CSS style, using jQuery:</p>\n\n<pre><code>$('myObject').css('background-image', imageUrl);\n</code></pre>\n\n<p>This seems to be not working, as:</p>\n\n<pre><code>console.log($('myObject').css('background-image'));\n</code></pre>\n\n<p>returns <code>none</code>.</p>\n\n<p>Any idea, what I am doing wrong?</p>\n",
            "last_activity_date": 1418730997,
            "question_id": 512054,
            "score": 176,
            "tags": [
                "javascript",
                "jquery",
                "css"
            ],
            "title": "Setting background-image using jQuery CSS property"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can use the DOMSubtreeModified event </p>\n\n<pre><code>$(something).bind('DOMSubtreeModified' ...\n</code></pre>\n\n<p>But this will fire even if the dimensions don't change, and reassigning the position whenever it fires can take a performance hit. In my experience using this method, checking whether the dimensions have changed is less expensive and so you might consider combining the two.</p>\n\n<p>Or if you are directly altering the div (rather than the div being altered by user input in unpredictable ways, like if it is contentEditable), you can simply fire a custom event whenever you do so.</p>\n\n<p>Downside: IE and Opera don't implement this event.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>There is a jQuery plugin that can deal with this very well </p>\n\n<p><a href=\"http://www.jqui.net/jquery-projects/jquery-mutate-official/\">http://www.jqui.net/jquery-projects/jquery-mutate-official/</a></p>\n\n<p>here is a demo of it with different scenarios as to when the height change, if you resize the red bordered div.</p>\n\n<p><a href=\"http://www.jqui.net/demo/mutate/\">http://www.jqui.net/demo/mutate/</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This is how I recently handled this problem:</p>\n\n<pre><code>$('#your-resizing-div').bind('getheight', function() {\n    $('#your-resizing-div').height();\n});\n\nfunction your_function_to_load_content() {\n    /*whatever your thing does*/\n    $('#your-resizing-div').trigger('getheight');\n}\n</code></pre>\n\n<p>I know I'm a few years late to the party, just think my answer may help some people in the future, without having to download any plugins.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p><strong>In response to user007:</strong></p>\n\n<p>If the height of your element is changing due to items being appended to it using <code>.append()</code> you shouldn't need to detect the change in height. Simply add the reposition of your second element in the same function where you are appending the new content to your first element.</p>\n\n<p>As in:</p>\n\n<p><strong><a href=\"http://jsfiddle.net/apaul34208/T952A/\" rel=\"nofollow\">Working Example</a></strong></p>\n\n<pre><code>$('.class1').click(function () {\n    $('.class1').append(\"&lt;div class='newClass'&gt;&lt;h1&gt;This is some content&lt;/h1&gt;&lt;/div&gt;\");\n    $('.class2').css('top', $('.class1').offset().top + $('.class1').outerHeight());\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I wrote a plugin sometime back for <strong><a href=\"http://meetselva.github.io/attrchange/\">attrchange</a></strong> listener which basically adds a listener function on attribute change. Even though I say it as a plugin, actually it is a simple function written as a jQuery plugin.. so if you want.. strip off the plugin specfic code and use the core functions.</p>\n\n<p><strong>Note: This code doesn't use polling</strong> </p>\n\n<p>check out this simple demo <a href=\"http://jsfiddle.net/aD49d/\">http://jsfiddle.net/aD49d/</a></p>\n\n<pre><code>$(function () {\n    var prevHeight = $('#test').height();\n    $('#test').attrchange({\n        callback: function (e) {\n            var curHeight = $(this).height();            \n            if (prevHeight !== curHeight) {\n               $('#logger').text('height changed from ' + prevHeight + ' to ' + curHeight);\n\n                prevHeight = curHeight;\n            }            \n        }\n    }).resizable();\n});\n</code></pre>\n\n<p><strong>Plugin page:</strong> <a href=\"http://meetselva.github.io/attrchange/\">http://meetselva.github.io/attrchange/</a></p>\n\n<p><strong>Minified version:</strong> (1.68kb)</p>\n\n<pre><code>(function(e){function t(){var e=document.createElement(\"p\");var t=false;if(e.addEventListener)e.addEventListener(\"DOMAttrModified\",function(){t=true},false);else if(e.attachEvent)e.attachEvent(\"onDOMAttrModified\",function(){t=true});else return false;e.setAttribute(\"id\",\"target\");return t}function n(t,n){if(t){var r=this.data(\"attr-old-value\");if(n.attributeName.indexOf(\"style\")&gt;=0){if(!r[\"style\"])r[\"style\"]={};var i=n.attributeName.split(\".\");n.attributeName=i[0];n.oldValue=r[\"style\"][i[1]];n.newValue=i[1]+\":\"+this.prop(\"style\")[e.camelCase(i[1])];r[\"style\"][i[1]]=n.newValue}else{n.oldValue=r[n.attributeName];n.newValue=this.attr(n.attributeName);r[n.attributeName]=n.newValue}this.data(\"attr-old-value\",r)}}var r=window.MutationObserver||window.WebKitMutationObserver;e.fn.attrchange=function(i){var s={trackValues:false,callback:e.noop};if(typeof i===\"function\"){s.callback=i}else{e.extend(s,i)}if(s.trackValues){e(this).each(function(t,n){var r={};for(var i,t=0,s=n.attributes,o=s.length;t&lt;o;t++){i=s.item(t);r[i.nodeName]=i.value}e(this).data(\"attr-old-value\",r)})}if(r){var o={subtree:false,attributes:true,attributeOldValue:s.trackValues};var u=new r(function(t){t.forEach(function(t){var n=t.target;if(s.trackValues){t.newValue=e(n).attr(t.attributeName)}s.callback.call(n,t)})});return this.each(function(){u.observe(this,o)})}else if(t()){return this.on(\"DOMAttrModified\",function(e){if(e.originalEvent)e=e.originalEvent;e.attributeName=e.attrName;e.oldValue=e.prevValue;s.callback.call(this,e)})}else if(\"onpropertychange\"in document.body){return this.on(\"propertychange\",function(t){t.attributeName=window.event.propertyName;n.call(e(this),s.trackValues,t);s.callback.call(this,t)})}return this}})(jQuery)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Use a resize sensor from the css-element-queries library:</p>\n\n<p><a href=\"https://github.com/marcj/css-element-queries\">https://github.com/marcj/css-element-queries</a></p>\n\n<pre><code>new ResizeSensor(jQuery('#myElement'), function() {\n    console.log('myelement has been resized');\n});\n</code></pre>\n\n<p>It uses a event based approach and doesn't waste your cpu time. Works in all browsers incl. IE7+.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\" rel=\"nofollow\"><code>MutationObserver</code></a> class.</p>\n\n<p><code>MutationObserver</code> provides developers a way to react to changes in a DOM. It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.</p>\n\n<p><strong>Example</strong> (<a href=\"http://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/\" rel=\"nofollow\">source</a>)</p>\n\n<pre><code>// select the target node\nvar target = document.querySelector('#some-id');\n\n// create an observer instance\nvar observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    console.log(mutation.type);\n  });    \n});\n\n// configuration of the observer:\nvar config = { attributes: true, childList: true, characterData: true };\n\n// pass in the target node, as well as the observer options\nobserver.observe(target, config);\n\n// later, you can stop observing\nobserver.disconnect();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I've got a div that contains some content that's being added and removed dynamically, so its height is changing often. I also have a div that is absolutely positioned directly underneath with javascript, so unless I can detect when the height of the div changes, I can't reposition the div below it.</p>\n\n<p>So, how can I detect when the height of that div changes? I assume there's some jQuery event I need to use, but I'm not sure which one to hook into.</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1424096556,
            "question_id": 172821,
            "score": 81,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Detecting when a div&#39;s height changes using jQuery"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>You can listen to the keypress event, and halt the default event (entering the text) if it matches the specific keycodes</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I wrote a jQuery plugin, which catches keystrokes. It can be used to enable multiple language script input in html forms without the OS (except the fonts). Its about 300 lines of code, maybe you like to take a look: </p>\n\n<ul>\n<li><a href=\"http://miku.github.com/jquery-retype\" rel=\"nofollow\">http://miku.github.com/jquery-retype</a></li>\n</ul>\n\n<p>Generally, be careful with such kind of alterations. I wrote the plugin for a client because other solutions weren't available.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function noCopyMouse(e) {\n    if (event.button == 2 || event.button == 3) {\n        alert('You are prompted to type this twice for a reason!');\n        return false;\n    }\n    return true;\n}\n\nfunction noCopyKey(e) {\n    var forbiddenKeys = new Array('c','x','v');\n    var isCtrl;\n\n        if(window.event) {\n        if(window.event.ctrlKey)\n            isCtrl = true;\n        else\n            isCtrl = false;\n        }\n        else {\n                if(e.ctrlKey)\n                    isCtrl = true;\n                else\n                    isCtrl = false;\n        }\n\n    if(isCtrl) {\n        for(i=0; iif(forbiddenKeys[i] == String.fromCharCode(window.event.keyCode).toLowerCase()) {\n                alert('You are prompted to type this twice for a reason!');\n                return false;\n            }\n            }\n    }\n    return true;\n}\n</code></pre>\n\n<p>And now to reference those methods in the textboxes that you wish to restrict:</p>\n\n<pre><code>&lt;input name=\"txtTest\" id=\"txtTest\" type=\"textbox\" onmousedown=\"javascript:return noCopyMouse(event);\" onkeykown=\"javascript:return noCopyKey(event);\"  /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>There is some ways to prevent it.</p>\n\n<p>However the user will be always able to <strong>turn the javascript off</strong> or just look on the source code of the page.</p>\n\n<p>Some examples (require jQuery)</p>\n\n<pre><code>/**\n* Stop every keystroke with ctrl key pressed\n*/\n$(\".textbox\").keydown(function(){\n    if (event.ctrlKey==true) {\n        return false;\n    }\n});\n\n/**\n* Clear all data of clipboard on focus\n*/\n$(\".textbox\").focus(function(){\n    if ( window.clipboardData ) {\n        window.clipboardData.setData('text','');\n    }\n});\n\n/**\n* Block the paste event\n*/\n$(\".textbox\").bind('paste',function(e){return false;});\n</code></pre>\n\n<p>Edit: How Tim Down said, this functions are all browser dependents.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I just did this out of interest. I agree it's not the right thing to do, but I think it should be the op's decision... Also the code could easily be extended to add functionality, rather than take it away (like a more advanced clipboard, or Ctrl+s triggering a server-side save).</p>\n\n<pre><code>$(document).ready(function()\n{\n    var ctrlDown = false;\n    var ctrlKey = 17, vKey = 86, cKey = 67;\n\n    $(document).keydown(function(e)\n    {\n        if (e.keyCode == ctrlKey) ctrlDown = true;\n    }).keyup(function(e)\n    {\n        if (e.keyCode == ctrlKey) ctrlDown = false;\n    });\n\n    $(\".no-copy-paste\").keydown(function(e)\n    {\n        if (ctrlDown &amp;&amp; (e.keyCode == vKey || e.keyCode == cKey)) return false;\n    });\n});\n</code></pre>\n\n<p>Also just to clarify, this script requires the jQuery library.</p>\n\n<p>EDIT: removed 3 redundant lines (involving e.which) thanks to Tim Down's suggestion (see comments)</p>\n",
                    "is_accepted": true,
                    "score": 72
                },
                {
                    "body": "<p>While it can be annoying when used as an anti-piracy measure, I can see there might be some instances where it'd be legitimate, so:</p>\n\n<pre><code>function disableCopyPaste(elm) {\n    // Disable cut/copy/paste key events\n    elm.onkeydown = interceptKeys\n\n    // Disable right click events\n    elm.oncontextmenu = function() {\n        return false\n    }\n}\n\nfunction interceptKeys(evt) {\n    evt = evt||window.event // IE support\n    var c = evt.keyCode\n    var ctrlDown = evt.ctrlKey||evt.metaKey // Mac support\n\n    // Check for Alt+Gr (http://en.wikipedia.org/wiki/AltGr_key)\n    if (ctrlDown &amp;&amp; evt.altKey) return true\n\n    // Check for ctrl+c, v and x\n    else if (ctrlDown &amp;&amp; c==67) return false // c\n    else if (ctrlDown &amp;&amp; c==86) return false // v\n    else if (ctrlDown &amp;&amp; c==88) return false // x\n\n    // Otherwise allow\n    return true\n}\n</code></pre>\n\n<p>I've used <code>event.ctrlKey</code> rather than checking for the key code as on most browsers on Mac OS X ctrl/alt \"down\" and \"up\" events are never triggered, so the only way to detect is to use <code>event.ctrlKey</code> in the e.g. c event after the ctrl key is held down. I've also substituted <code>ctrlKey</code> with <code>metaKey</code> for macs.</p>\n\n<p><strong>Limitations of this method:</strong> </p>\n\n<ul>\n<li>Opera doesn't allow disabling right click events<P></li>\n<li>Drag and drop between browser windows can't be prevented as far as I know.<P></li>\n<li>The <code>edit</code>-><code>copy</code> menu item in e.g. Firefox can still allow copy/pasting.<P></li>\n<li>There's also no guarantee that for people with different keyboard layouts/locales that copy/paste/cut are the same key codes (though layouts often just follow the same standard as English), but blanket \"disable all control keys\" mean that select all etc will also be disabled so I think that's a compromise which needs to be made.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>i already have your problem and i solved it by the following code .. that accept only numbers</p>\n\n<pre><code>$('#&lt;%= mobileTextBox.ClientID %&gt;').keydown(function(e) {\n            ///// e.which Values\n            // 8  : BackSpace , 46 : Delete , 37 : Left , 39 : Rigth , 144: Num Lock \n            if (e.which != 8 &amp;&amp; e.which != 46 &amp;&amp; e.which != 37 &amp;&amp; e.which != 39 &amp;&amp; e.which != 144\n                &amp;&amp; (e.which &lt; 96 || e.which &gt; 105 )) {\n                return false;\n            }\n        });\n</code></pre>\n\n<p>you can detect <code>ctrl</code> id <code>e.which == 17</code> </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>There's another way of doing this:</strong> <code>onpaste</code>, <code>oncopy</code> and <code>oncut</code> events can be registered and cancelled in IE, Firefox, Chrome, Safari (with some minor problems), the only major browser that doesn't allow cancelling these events is Opera. </p>\n\n<p>As you can see in my other answer intercepting <code>ctrl+v</code> and <code>ctrl+c</code> comes with many side effects, and it still doesn't prevent users from pasting using the Firefox <code>Edit</code> menu etc.</p>\n\n<pre><code>function disable_cutcopypaste(e) {\n    var fn = function(evt) {\n        // IE-specific lines\n        evt = evt||window.event\n        evt.returnValue = false\n\n        // Other browser support\n        if (evt.preventDefault) \n            evt.preventDefault()\n        return false\n    }\n    e.onbeforepaste = e.onbeforecopy = e.onbeforecut = fn\n    e.onpaste = e.oncopy = e.oncut = fn\n}\n</code></pre>\n\n<p>Safari still has some minor problems with this method (it clears the clipboard in place of cut/copy when preventing default) but that bug appears to have been fixed in Chrome now.</p>\n\n<p><strong>See also:</strong> <a href=\"http://www.quirksmode.org/dom/events/cutcopypaste.html\" rel=\"nofollow\">http://www.quirksmode.org/dom/events/cutcopypaste.html</a> and the associated test page <a href=\"http://www.quirksmode.org/dom/events/tests/cutcopypaste.html\" rel=\"nofollow\">http://www.quirksmode.org/dom/events/tests/cutcopypaste.html</a> for more information.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Why is everyone so down on this question? It's a good question. Most of the people that are inputting are not programmers. They are likely to paste absurd things into fields when they can. Of course it is ultimately up to the client and server code to handle this.</p>\n\n<p>People will continue to paste from Word documents into WYSWYG editors like CKeditor (which has a Paste from Word option that most people don't even use) and continue to wonder why their page looks terrible. So in some cases you might need to prevent a user from pasting.</p>\n\n<p>By the way, I pasted this here from Word ;)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>With jquery you can easy detect copy, paste, etc by binding the function:</p>\n\n<pre><code>$(\"#textA\").bind('copy', function() {\n    $('span').text('copy behaviour detected!')\n}); \n$(\"#textA\").bind('paste', function() {\n    $('span').text('paste behaviour detected!')\n}); \n$(\"#textA\").bind('cut', function() {\n    $('span').text('cut behaviour detected!')\n});\n</code></pre>\n\n<p>More information here: <a href=\"http://www.mkyong.com/jquery/how-to-detect-copy-paste-and-cut-behavior-with-jquery/\">http://www.mkyong.com/jquery/how-to-detect-copy-paste-and-cut-behavior-with-jquery/</a></p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Live Demo : \n<a href=\"http://jsfiddle.net/abdennour/ba54W/\">http://jsfiddle.net/abdennour/ba54W/</a></p>\n\n<pre><code>$(document).ready(function() {\n\n    $(\"#textA\").bind({\n        copy : function(){\n            $('span').text('copy behaviour detected!');\n        },\n        paste : function(){\n            $('span').text('paste behaviour detected!');\n        },\n        cut : function(){\n            $('span').text('cut behaviour detected!');\n        }\n    });\n\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>instead of onkeypress, use onkeydown.</p>\n\n<pre><code>&lt;input type=text name=Txt\n     onkeydown=\"if(event.ctrlKey &amp;&amp; event.keyCode==86){return false;}\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Don't forget that, while you might be able to detect and block Ctrl+C/V, you can still alter the value of a certain field.<br>\nBest example for this is Chrome's Inspect Element function, this allows you to change the value-property of a field.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Short solution for preventing user from using context menu, copy and cut in jQuery:</p>\n\n<pre><code>jQuery(document).bind(\"cut copy contextmenu\",function(e){\n    e.preventDefault();\n});\n</code></pre>\n\n<p>Also disabling text selection in CSS might come handy:</p>\n\n<pre><code>.noselect {  \n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n     user-select: none;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How to detect <kbd>ctrl</kbd>+<kbd>v</kbd>, <kbd>ctrl</kbd>+<kbd>c</kbd> using Javascript?</p>\n\n<p>I need to restrict pasting in my textareas, end user should not copy and paste the content, user should only type text in textarea.</p>\n\n<p>How to achive this?</p>\n",
            "last_activity_date": 1422672772,
            "question_id": 2903991,
            "score": 61,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "How to detect ctrl+v ,Ctrl+c using Javascript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>From <a href=\"http://groups.google.com/group/jquery-en/browse_thread/thread/ba072168939b245a?pli=1\">Google Groups</a>:</p>\n\n<blockquote>\n  <p>Use two backslashes before each special character.</p>\n  \n  <p>A backslash in a jQuery selector escapes the next character. But you need\n  two of them because backslash is also the escape character for JavaScript\n  strings. The first backslash escapes the second one, giving you one actual\n  backslash in your string - which then escapes the next character for jQuery. </p>\n</blockquote>\n\n<p>So, I guess you're looking at</p>\n\n<pre><code>$(function() {\n  $.getJSON(\"/Location/GetCountryList\", null, function(data) {\n    $(\"#Address\\\\.Country\").fillSelect(data);\n  });\n  $(\"#Address\\\\.Country\").change(function() {\n    $.getJSON(\"/Location/GetRegionsForCountry\", { country: $(this).val() }, function(data) {\n      $(\"#Address\\\\.State\").fillSelect(data);\n    });\n  });\n});\n</code></pre>\n\n<p>Also check out <a href=\"https://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\">How do I select an element by an ID that has characters used in CSS notation?</a> on the jQuery FAQ.</p>\n",
                    "is_accepted": true,
                    "score": 196
                },
                {
                    "body": "<p>Just additional information:\nCheck this <a href=\"http://www.codeplex.com/aspnet/WorkItem/View.aspx?WorkItemId=2403\" rel=\"nofollow\">ASP.NET MVC issue #2403</a>.</p>\n\n<p>Until the issue is fixed, I use my own extension methods like Html.TextBoxFixed, etc. that simply replaces dots with underscores in the id attribute (not in the name attribute), so that you use jquery like $(\"#Address_Street\") but on the server, it's like Address.Street. </p>\n\n<p>Sample code follows:</p>\n\n<pre><code>public static string TextBoxFixed(this HtmlHelper html, string name, string value)\n{\n    return html.TextBox(name, value, GetIdAttributeObject(name));\n}\n\npublic static string TextBoxFixed(this HtmlHelper html, string name, string value, object htmlAttributes)\n{\n    return html.TextBox(name, value, GetIdAttributeObject(name, htmlAttributes));\n}\n\nprivate static IDictionary&lt;string, object&gt; GetIdAttributeObject(string name)\n{\n    Dictionary&lt;string, object&gt; list = new Dictionary&lt;string, object&gt;(1);\n    list[\"id\"] = name.Replace('.', '_');\n    return list;\n}\n\nprivate static IDictionary&lt;string, object&gt; GetIdAttributeObject(string name, object baseObject)\n{\n    Dictionary&lt;string, object&gt; list = new Dictionary&lt;string, object&gt;();\n    list.LoadFrom(baseObject);\n    list[\"id\"] = name.Replace('.', '_');\n    return list;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The Release Candidate of ASP.NET MVC that was just released fixed this issue, it now replaces the dots with underscores for the ID attribute.</p>\n\n<pre><code>&lt;%= Html.TextBox(\"Person.FirstName\") %&gt;\n</code></pre>\n\n<p>Renders to</p>\n\n<pre><code>&lt;input type=\"text\" name=\"Person.FirstName\" id=\"Person_FirstName\" /&gt;\n</code></pre>\n\n<p>For more information view the release notes, starting on page 14.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can't use a jQuery id selector if the id contains spaces.  Use an attribute selector:</p>\n\n<pre><code>$('[id=foo bar]').show();\n</code></pre>\n\n<p>If possible, specify element type as well:</p>\n\n<pre><code>$('div[id=foo bar]').show();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Using two Backslashes it\u00b4s ok, it\u00b4s work.\nBut if you are using a dynamic name, I mean, a variable name, you will need to replace characters. </p>\n\n<p>If you don\u00b4t wan\u00b4t to change your variables names you can do this:</p>\n\n<pre><code>var variable=\"namewith.andother\";    \nvar jqueryObj = $(document.getElementById(variable));\n</code></pre>\n\n<p>and than you have your jquery object.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Escape it for Jquery:</p>\n\n<pre><code>function escapeSelector(s){\n    return s.replace( /(:|\\.|\\[|\\])/g, \"\\\\$1\" );\n}\n</code></pre>\n\n<p>usage example:</p>\n\n<pre><code>e.find('option[value='+escapeSelector(val)+']')\n</code></pre>\n\n<p>more info <a href=\"http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is documented in <a href=\"http://api.jquery.com/category/selectors/\" rel=\"nofollow\">jQuery Selectors docs</a>:</p>\n\n<blockquote>\n  <p>To use any of the meta-characters (such as \n  <code>!\"#$%&amp;'()*+,./:;&lt;=&gt;?@[\\]^`{|}~</code>) as a literal part of a name, it must\n  be escaped with with two backslashes: <code>\\\\</code>. For example, an element with\n  <code>id=\"foo.bar\"</code>, can use the selector <code>$(\"#foo\\\\.bar\")</code>.</p>\n</blockquote>\n\n<p>In short, prefix the <code>.</code> with <code>\\\\</code> as follows:</p>\n\n\n\n<pre><code>$(\"#Address\\\\.Country\")\n</code></pre>\n\n<h1>Why doesn't <code>.</code> work in my ID?</h1>\n\n<p>The problem is that <code>.</code> has special significance, the string following is interpreted as a class selector. So <code>$('#Address.Country')</code> would match <code>&lt;div id=\"Address\" class=\"Country\"&gt;</code>.</p>\n\n<p>When escaped as <code>\\\\.</code>, the dot will be treated as normal text with no special significance, matching the ID you desire <code>&lt;div id=\"Address.Country\"&gt;</code>.</p>\n\n<p>This applies to all the characters <code>!\"#$%&amp;'()*+,./:;&lt;=&gt;?@[\\]^`{|}~</code> which would otherwise have special significance as a selector in jQuery. Just prepend <code>\\\\</code> to treat them as normal text.</p>\n\n<h1>Why 2 <code>\\\\</code>?</h1>\n\n<p>As noted in bdukes answer, there is a reason we need 2 <code>\\</code> characters. <code>\\</code> will escape the following character in JavaScript. Se when JavaScript interprets the string <code>\"#Address\\.Country\"</code>, it will see the <code>\\</code>, interpret it to mean <em>take the following character litterally</em> and <em>remove</em> it when the string is passed in as the argument to <code>$()</code>. That means jQuery will still see the string as <code>\"#Address.Country\"</code>.</p>\n\n<p>That's where the second <code>\\</code> comes in to play. The first one tells JavaScript to interpret the second as a literal (non-special) character. This means the second will be seen by jQuery and understand that the following  <code>.</code>  character is a literal character.</p>\n\n<p>Phew! Maybe we can visualize that.</p>\n\n<pre><code>//    Javascript, the following \\ is not special.\n//         | \n//         |\n//         v    \n$(\"#Address\\\\.Country\");\n//          ^ \n//          |\n//          |\n//      jQuery, the following . is not special.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Given the following classes and controller action method:</p>\n\n<pre><code>public School\n{\n  public Int32 ID { get; set; }\n  publig String Name { get; set; }\n  public Address Address { get; set; }\n}\n\npublic class Address\n{\n  public string Street1 { get; set; }\n  public string City { get; set; }\n  public String ZipCode { get; set; }\n  public String State { get; set; }\n  public String Country { get; set; }\n}\n\n[Authorize(Roles = \"SchoolEditor\")]\n[AcceptVerbs(HttpVerbs.Post)]\npublic SchoolResponse Edit(Int32 id, FormCollection form)\n{\n  School school = GetSchoolFromRepository(id);\n\n  UpdateModel(school, form);\n\n  return new SchoolResponse() { School = school };\n}\n</code></pre>\n\n<p>And the following form:</p>\n\n<pre><code>&lt;form method=\"post\"&gt;\n  School: &lt;%= Html.TextBox(\"Name\") %&gt;&lt;br /&gt;\n  Street: &lt;%= Html.TextBox(\"Address.Street\") %&gt;&lt;br /&gt;\n  City:  &lt;%= Html.TextBox(\"Address.City\") %&gt;&lt;br /&gt;\n  Zip Code: &lt;%= Html.TextBox(\"Address.ZipCode\") %&gt;&lt;br /&gt;\n  Sate: &lt;select id=\"Address.State\"&gt;&lt;/select&gt;&lt;br /&gt;\n  Country: &lt;select id=\"Address.Country\"&gt;&lt;/select&gt;&lt;br /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I am able to update both the School instance and the Address member of the school.  This is quite nice!  Thank you ASP.NET MVC team!</p>\n\n<p>However, how do I use jQuery to select the drop down list so that I can pre-fill it?  I realize that I could do this server side but there will be other dynamic elements on the page that affect the list.</p>\n\n<p>The following is what I have so far, and it does not work as the selectors don't seem to match the IDs:</p>\n\n<pre><code>$(function() {\n  $.getJSON(\"/Location/GetCountryList\", null, function(data) {\n    $(\"#Address.Country\").fillSelect(data);\n  });\n  $(\"#Address.Country\").change(function() {\n    $.getJSON(\"/Location/GetRegionsForCountry\", { country: $(this).val() }, function(data) {\n      $(\"#Address.State\").fillSelect(data);\n    });\n  });\n});\n</code></pre>\n",
            "last_activity_date": 1423159720,
            "question_id": 350292,
            "score": 123,
            "tags": [
                "javascript",
                "jquery",
                "jquery-selectors"
            ],
            "title": "How do I get jQuery to select elements with a . (period) in their ID?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You can do that with the next code</p>\n\n<pre><code> if(navigator.userAgent.match(/Android/i)){\n    window.scrollTo(0,1);\n }\n</code></pre>\n\n<p>I hope it helps you!</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>If you've loaded jQuery, you can see if the height of the content is greater than the viewport height. If not, then you can make it that height (or a little less). I ran the following code in WVGA800 mode in the Android emulator, and then ran it on my Samsung Galaxy Tab, and in both cases it hid the addressbar.</p>\n\n<pre><code>$(document).ready(function() {\n\n  if (navigator.userAgent.match(/Android/i)) {\n    window.scrollTo(0,0); // reset in case prev not scrolled  \n    var nPageH = $(document).height();\n    var nViewH = window.outerHeight;\n    if (nViewH &gt; nPageH) {\n      nViewH -= 250;\n      $('BODY').css('height',nViewH + 'px');\n    }\n    window.scrollTo(0,1);\n  }\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Referring to <a href=\"http://stackoverflow.com/questions/4068559/removing-address-bar-from-browser-to-view-on-android/4653596#4653596\">Volomike's answer</a>, I would suggest replacing the line </p>\n\n<pre><code>nViewH -= 250;\n</code></pre>\n\n<p>with </p>\n\n<pre><code>nViewH = nViewH / window.devicePixelRatio;\n</code></pre>\n\n<p>It works exactly as I check on a HTC Magic (PixelRatio = 1) and a Samsung Galaxy Tab 7\" (PixelRatio = 1.5).</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Here's the NON-jQuery solution that instantly removes the address bar without scrolling.  Also, it works when you rotate the browser's orientation.</p>\n\n<pre><code>function hideAddressBar(){\n  if(document.documentElement.scrollHeight&lt;window.outerHeight/window.devicePixelRatio)\n    document.documentElement.style.height=(window.outerHeight/window.devicePixelRatio)+'px';\n  setTimeout(window.scrollTo(1,1),0);\n}\nwindow.addEventListener(\"load\",function(){hideAddressBar();});\nwindow.addEventListener(\"orientationchange\",function(){hideAddressBar();});\n</code></pre>\n\n<p>It should work with the iPhone also, but I couldn't test this.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Here's an example that makes sure that the body has minimum height of the device screen height and also hides the scroll bar. It uses DOMSubtreeModified event, but makes the check only every 400ms, to avoid performance loss.</p>\n\n<pre><code>var page_size_check = null, q_body;\n(q_body = $('#body')).bind('DOMSubtreeModified', function() {\n  if (page_size_check === null) {\n    return;\n  }\n  page_size_check = setTimeout(function() {\n    q_body.css('height', '');\n    if (q_body.height() &lt; window.innerHeight) {\n      q_body.css('height', window.innerHeight + 'px');\n    }\n    if (!(window.pageYOffset &gt; 1)) {\n      window.scrollTo(0, 1);\n    }\n    page_size_check = null;\n  }, 400);\n});\n</code></pre>\n\n<p>Tested on Android and iPhone.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Finally I Try with this. Its worked for me..</p>\n\n<pre><code>  public void onCreate(Bundle savedInstanceState) {\n\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_ebook);\n\n    //webview use to call own site\n    webview =(WebView)findViewById(R.id.webView1);\n\n    webview.setWebViewClient(new WebViewClient());       \n    webview .getSettings().setJavaScriptEnabled(true);\n    webview .getSettings().setDomStorageEnabled(true);     \n    webview.loadUrl(\"http://www.google.com\"); \n}\n</code></pre>\n\n<p>and your entire main.xml(res/layout) look should like this:</p>\n\n<pre><code>&lt;WebView  xmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/webView1\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\n/&gt;\n</code></pre>\n\n<p>don't go to add layouts.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The one below works for me every time..</p>\n\n<p>This site also has a few other suggestions, but this no-nonsense, no-worry one is available in a github:gist and answers your question (pasted here for convenience):</p>\n\n<pre><code>function hideAddressBar()\n{\n  if(!window.location.hash)\n  {\n      if(document.height &lt; window.outerHeight)\n      {\n          document.body.style.height = (window.outerHeight + 50) + 'px';\n      }\n\n      setTimeout( function(){ window.scrollTo(0, 1); }, 50 );\n  }\n}\n\nwindow.addEventListener(\"load\", function(){ if(!window.pageYOffset){ hideAddressBar(); } } );\nwindow.addEventListener(\"orientationchange\", hideAddressBar );\n</code></pre>\n\n<p>As far as I can tell, the combination of extra height added to the page (which caused problems for you) and the scrollTo() statement make the address bar disappear.</p>\n\n<p>From the same site the 'simplest' solution to hiding the address bar is using the scrollTo() method:</p>\n\n<pre><code>window.addEventListener(\"load\", function() { window.scrollTo(0, 1); });\n</code></pre>\n\n<p>This will hide the address bar until the user scrolls.</p>\n\n<p>This site places the same method inside a timeout function (the justification is not explained, but it claims the code doesn't work well without it):</p>\n\n<pre><code>// When ready...\nwindow.addEventListener(\"load\",function() {\n  // Set a timeout...\n  setTimeout(function(){\n    // Hide the address bar!\n     window.scrollTo(0, 1);\n  }, 0);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The problem with most of these is that the user can still scroll up and see the addressbar.\nTo make a permanent solution, you need to add this as well.</p>\n\n<pre><code>//WHENEVER the user scrolls\n$(window).scroll(function(){\n    //if you reach the top\n    if ($(window).scrollTop() == 0)   \n    //scroll back down  \n    {window.scrollTo(1,1)}\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found that if you add the command to unload, he keeps down the page, ie the page that move!\nHope it works with you too!   </p>\n\n<pre><code>window.addEventListener(\"load\", function() { window.scrollTo(0, 1); });\nwindow.addEventListener(\"unload\", function() { window.scrollTo(0, 1); });\n</code></pre>\n\n<p>Using a 7-inch tablet with android, www.kupsoft.com visit my website and check how it behaves page, I use this command in my portal.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>this works on android (at least on stock gingerbread browser):</p>\n\n<pre><code>&lt;body onload=\"document.body.style.height=(2*window.innerHeight-window.outerHeight)+'px';\"&gt;&lt;/body&gt;\n</code></pre>\n\n<p>further if you want to disable scrolling you can use </p>\n\n<pre><code>setInterval(function(){window.scrollTo(1,0)},50);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Does anyone know how I can remove the address bar from the Android browser to better view my web app and make it look more like a native app?</p>\n",
            "last_activity_date": 1382014248,
            "question_id": 4068559,
            "score": 36,
            "tags": [
                "javascript",
                "android",
                "mobile"
            ],
            "title": "Removing address bar from browser (to view on Android)"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Without going into too much detail this essentially creates copies of the instance variables by wrapping them in a function that executes immediately and passes the back to the function that will be executed when the element gets clicked.</p>\n\n<p>Think of it like this:  </p>\n\n<pre><code>function() { alert(i); }  // Will expose the latest value of i\n(function(I) { return function() { alert(I); }; })(i); // Will pass the current\n                                                       // value of i and return\n                                                       // a function that exposes\n                                                       // i at that time\n</code></pre>\n\n<p>So during each iteration of the loop you are actually <em>executing</em> a function that returns a <em>function</em> with the <em>current</em> value of the variable.</p>\n\n<p>Which, if you imagine that you have 4 anchors in your loop you are creating 4 separate functions that can be visualized as..</p>\n\n<pre><code>function() { alert(0); };\nfunction() { alert(1); };\nfunction() { alert(2); };\nfunction() { alert(3); };\n</code></pre>\n\n<p>I would consider looking into scope and closures with javascript as if you go down this road and don't understand exactly what is happening you can run into massive problems from unexpected behavior.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>When the onclick event is triggered, the anonymous function is called and it refers to the same variable <code>i</code> that was used in the loop and it holds the last value of <code>i</code>, that is 4.</p>\n\n<p>The solution to your problem is to use a function returning a function:</p>\n\n<pre><code>a.onclick = (function(k) {return function() { alert(k); }; })(i);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>When you assign the function to the click handler, a <a href=\"http://www.jibbering.com/faq/faq_notes/closures.html\">closure</a> is created.</p>\n\n<p>Basically a closure is formed when you nest functions, inner functions can refer to the variables present in their outer enclosing functions even after their parent functions have already executed.</p>\n\n<p>At the time that the click event is executed, the handler refers to the last value that the <code>i</code> variable had, because that variable is stored on the closure.</p>\n\n<p>As you noticed, by wrapping the click handler function in order to accept the <code>i</code> variable as an argument, and returning another function (basically create another closure) it works as you expect:</p>\n\n<pre><code>for ( var i = 0; i &lt; 4; i++ ) {\n  var a = document.createElement( \"a\" );\n  a.onclick = (function(j) { // a closure is created\n    return function () {\n      alert(j); \n    }\n  }(i));\n  document.getElementById( \"foo\" ).appendChild( a );\n}\n</code></pre>\n\n<p>When you iterate, actually create 4 functions, each function store a reference to <code>i</code> at the time it was created (by passing <code>i</code>), this value is stored on the outer closure and the inner function is executed when the click event fires.</p>\n\n<p>I use the following snippet to explain closures (and a very basic concept of <a href=\"http://en.wikipedia.org/wiki/Curry_%28programming%29\">curry</a>), I think that a simple example can make easier to get the concept:</p>\n\n<pre><code>// a function that generates functions to add two numbers\nfunction addGenerator (x) { // closure that stores the first number\n  return function (y){ // make the addition\n    return x + y;\n  };\n}\n\nvar plusOne = addGenerator(1), // create two number adding functions\n    addFive = addGenerator(5);\n\nalert(addFive(10)); // 15\nalert(plusOne(10)); // 11\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 43
                }
            ],
            "body": "<p>I've been trying to assign a function to onclick event of a dynamically created \"a\" tag in JavaScript. All of the tags are created in a loop as follows:</p>\n\n<pre><code>for ( var i = 0; i &lt; 4; i++ )\n{\n  var a = document.createElement( \"a\" );\n  a.onclick = function( ) { alert( i ) };\n  document.getElementById( \"foo\" ).appendChild( a );\n}\n</code></pre>\n\n<p>The alerted value for all four links is always \"4\". Pretty obvious. When googling I came across a post that shows the following code snippet:</p>\n\n<pre><code>a.onclick = (function(p, d) {\nreturn function(){ show_photo(p, d) }\n})(path, description);\n</code></pre>\n\n<p>I managed to tweak it for my needs and got the alert( i ) thing to work correctly but I'll appreciate if someone could explain exactly what the above code does.</p>\n",
            "last_activity_date": 1357672338,
            "question_id": 1552941,
            "score": 18,
            "tags": [
                "javascript",
                "javascript-events",
                "loops",
                "closures",
                "anonymous-function"
            ],
            "title": "How does a function in a loop (which returns another function) work?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>After giving control back to the browser's rendering engine, the test reports <code>true</code> in FF 4b9 and Chromium 8.0.552.237. I modified these parts:</p>\n\n<pre><code>img.onload = function(){   // put this above img.src = \u2026\n    document.getElementById('onload').innerHTML = 'yes';\n};\nimg.src = img_src;\n\u2026\nwindow.setTimeout(function () {   // put this inside setTimeout\n    document.getElementById('wh').innerHTML = (img.height==img.width) &amp;&amp; (img.height==128);\n}, 0);\n</code></pre>\n\n<p><strong>Update:</strong> Yes, I understand this 'answer' is more like a comment, but just wanted to point it out. And after testing I get reproducible results:</p>\n\n<ul>\n<li>without <code>setTimeout</code>, in both browsers I get <code>false</code> the first time I open the page and <code>true</code> only after hitting <kbd>F5</kbd>. After explicitly clearing the cache both say <code>false</code> again after reloading.</li>\n<li>with <code>setTimeout</code> the width/height test always evualuates to <code>true</code>.</li>\n</ul>\n\n<p>In both cases the image doesn't show up the first time, only after reloading the page.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As no one has yet found any specifications about how this is <em>supposed</em> to behave, we will have to be satisfied with how it <em>does</em> behave. Following are the results of my tests.</p>\n\n<pre>\n            | is image data usable right  | does onload callback set after src\n            |     after setting src?      |   is changed still get invoked?\n------------+-----------------------------+-------------------------------------\nSafari  5   |             yes             |                  yes                \n------------+-----------------------------+-------------------------------------\nChrome  8   | **no** (1st page load), but |                  yes                \nFireFox 3.6 |  yes thereafter (cached)    |                                     \n------------+-----------------------------+-------------------------------------\nIE8         |    yes (32kB data limit)    |                  yes         \n------------+-----------------------------+-------------------------------------\nIE9b        |             yes             |                 **no**              \n------------+-----------------------------+-------------------------------------\n</pre>\n\n<p>In summary:</p>\n\n<ul>\n<li>You cannot assume that the image data will be available right after setting a data-uri; you must wait for the <code>onload</code> event.</li>\n<li>Due to IE9, you cannot set the <code>onload</code> handler after setting the <code>src</code> and expect it to be invoked.</li>\n<li>The recommendations in <strong><em>\"Playing it Safe\"</em></strong> (from the question above) are the only way to ensure correct behavior.</li>\n</ul>\n\n<p>If anyone can find specs discussing this, I will happily accept their answer instead.</p>\n",
                    "is_accepted": true,
                    "score": 32
                }
            ],
            "body": "<p>Consider the following (fragile) JavaScript code:</p>\n\n<pre><code>var img = new Image;\nimg.src = \"data:image/png;base64,...\"; // Assume valid data\n\n// Danger(?) Attempting to use image immediately after setting src\nconsole.log( img.width, img.height );\nsomeCanvasContext.drawImage( img, 0, 0 );\n\n// Danger(?) Setting onload after setting src\nimg.onload = function(){ console.log('I ran!'); };\n</code></pre>\n\n<p><strong>The Question(s)</strong></p>\n\n<ul>\n<li>Should the image width and height be correct immediately?</li>\n<li>Should the canvas draw work immediately?</li>\n<li>Should the <code>onload</code> callback (set after the src was changed) be invoked?</li>\n</ul>\n\n<p><strong>Experimental Tests</strong><br>\nI created a <a href=\"http://phrogz.net/tmp/img_via_dataurl.html\">simple test page</a> with similar code. In Safari my first tests, both by opening the HTML page locally (<code>file:///</code> url) and loading it from my server, showed everything working: the height and width is correct, the canvas draw works, <em>and</em> the <code>onload</code> also fires.</p>\n\n<p>In Firefox v3.6 (OS X), loading the page after launching the browser shows that the height/width is not correct immediately after setting, <code>drawImage()</code> fails. (The <code>onload</code> handler does fire, however.) Loading the page again, however, shows the width/height being correct immediately after setting, and <code>drawImage()</code> working. It would appear that Firefox caches the contents of the data URL as an image and has it available immediately when used in the same session.</p>\n\n<p>In Chrome v8 (OS X) I see the same results as in Firefox: the image is not available immediately, but takes some time to asynchronously 'load' from the data URL.</p>\n\n<p>In addition to experimental proof of what browsers the above does or does not work, I'd really love links to specs on how this is supposed to behave. So far my Google-fu has not been up to the task.</p>\n\n<p><strong>Playing It Safe</strong><br>\nFor those who don't understand why the above might be dangerous, know that you should use images like this to be safe:</p>\n\n<pre><code>// First create/find the image\nvar img = new Image;\n\n// Then, set the onload handler\nimg.onload = function(){\n  // Use the for-sure-loaded img here\n};\n\n// THEN, set the src\nimg.src = '...';\n</code></pre>\n",
            "last_activity_date": 1360399100,
            "question_id": 4776670,
            "score": 42,
            "tags": [
                "javascript",
                "html",
                "image",
                "data-uri"
            ],
            "title": "Should setting an image src to data URL be available immediately?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>In short, you want to <code>translate()</code> the canvas context by your offset, <code>scale()</code> it to zoom in or out, and then <code>translate()</code> back by the opposite of the mouse offset. Note that you need to transform the cursor position from screen space into the transformed canvas context.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>ctx.translate(pt.x,pt.y);\nctx.scale(factor,factor);\nctx.translate(-pt.x,-pt.y);\n</code></pre>\n\n<h2>Demo: <a href=\"http://phrogz.net/tmp/canvas_zoom_to_cursor.html\">http://phrogz.net/tmp/canvas_zoom_to_cursor.html</a></h2>\n\n<p>I've put up a <a href=\"http://phrogz.net/tmp/canvas_zoom_to_cursor.html\">full working example</a> on my website for you to examine, supporting dragging, click to zoom in, shift-click to out, or scroll wheel up/down.</p>\n\n<p><em>The only (current) issue is that <a href=\"http://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\">Safari zooms too fast</a> compared to Chrome or Firefox.</em></p>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>I hope, these JS libraries will help you:\n(HTML5, JS)</p>\n\n<ol>\n<li>Loupe</li>\n</ol>\n\n<p><a href=\"http://www.netzgesta.de/loupe/\">http://www.netzgesta.de/loupe/</a></p>\n\n<ol>\n<li>CanvasZoom</li>\n</ol>\n\n<p><a href=\"https://github.com/akademy/CanvasZoom\">https://github.com/akademy/CanvasZoom</a></p>\n\n<ol>\n<li>Scroller</li>\n</ol>\n\n<p><a href=\"https://github.com/zynga/scroller\">https://github.com/zynga/scroller</a></p>\n\n<p>As for me, I'm using loupe. It's awesome!\nFor you the best case - scroller.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I took @Phrogz's answer as a basis and made a small library that enables canvas with dragging, zooming and rotating.\nHere is the example.</p>\n\n<pre><code>var canvas = document.getElementById('canvas')\n//assuming that @param draw is a function where you do your main drawing.\nvar control = new CanvasManipulation(canvas, draw)\ncontrol.init()\ncontrol.layout()\n//now you can drag, zoom and rotate in canvas\n</code></pre>\n\n<p>You can find more detailed examples and documentation on the project's <a href=\"https://bitbucket.org/vogdb/canvas-manipulation\" rel=\"nofollow\">page</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I'm programming a HTML5 &lt; canvas > project that involves zooming in and out of images using the scroll wheel.\nI want to zoom towards the cursor like google maps does but I'm completely lost on how to calculate the movements.</p>\n\n<p>What I have: image x and y (top-left corner); image width and height; cursor x and y relative to the center of the canvas.</p>\n",
            "last_activity_date": 1394003362,
            "question_id": 5189968,
            "score": 29,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "zoom",
                "scrollwheel"
            ],
            "title": "Zoom Canvas to Mouse Cursor"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I'm assuming that you're trying to deal with Ajax navigation and not trying to prevent your users from using the back button, which violates just about every tenet of UI development ever.</p>\n\n<p>Here's some possible solutions:\n<a href=\"http://tkyk.github.com/jquery-history-plugin/\" rel=\"nofollow\">JQuery History</a>\n<a href=\"http://www.codeproject.com/KB/ajax/Salajax.aspx\" rel=\"nofollow\">Salajax</a>\n<a href=\"http://www.ajaxonomy.com/2007/web-design/a-better-ajax-back-button-solution\" rel=\"nofollow\">A Better Ajax Back Button</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Since the back button is a function of the browser, it can be difficult to change the default functionality. There are some work arounds though. Take a look at this article:</p>\n\n<p><a href=\"http://www.irt.org/script/311.htm\" rel=\"nofollow\">http://www.irt.org/script/311.htm</a></p>\n\n<p>Typically, the need to disable the back button is a good indicator of a programming issue/flaw. I would look for an alternative method like setting a session variable or a cookie that stores whether the form has already been submitted.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>So as far as AJAX is concerned...</p>\n\n<p>Pressing back while using most web-apps that use AJAX to navigate specific parts of a page is a HUGE issue.  I don't accept that 'having to disable the button means you're doing something wrong' and in fact developers in different facets have long run into this problem.  Here's my solution:</p>\n\n<pre><code>window.onload = function () {\n    if (typeof history.pushState === \"function\") {\n        history.pushState(\"jibberish\", null, null);\n        window.onpopstate = function () {\n            history.pushState('newjibberish', null, null);\n            // Handle the back (or forward) buttons here\n            // Will NOT handle refresh, use onbeforeunload for this.\n        };\n    }\n    else {\n        var ignoreHashChange = true;\n        window.onhashchange = function () {\n            if (!ignoreHashChange) {\n                ignoreHashChange = true;\n                window.location.hash = Math.random();\n                // Detect and redirect change here\n                // Works in older FF and IE9\n                // * it does mess with your hash symbol (anchor?) pound sign\n                // delimiter on the end of the URL\n            }\n            else {\n                ignoreHashChange = false;   \n            }\n        };\n    }\n}\n</code></pre>\n\n<p>As far as Ive been able to tell this works across chrome, firefox, <strike>haven't tested IE yet</strike>.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>best way I know</p>\n\n<pre><code>         window.onbeforeunload = function (e) {\n            var e = e || window.event;\n            var msg = \"Do you really want to leave this page?\"\n\n            // For IE and Firefox\n            if (e) {\n                e.returnValue = msg;\n            }\n\n            // For Safari / chrome\n            return msg;\n         };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Please try this (if the browser does not support \"onbeforeunload\"):</p>\n\n<pre><code>jQuery(document).ready(function($) {\n\n  if (window.history &amp;&amp; window.history.pushState) {\n\n    $(window).on('popstate', function() {\n      var hashLocation = location.hash;\n      var hashSplit = hashLocation.split(\"#!/\");\n      var hashName = hashSplit[1];\n\n      if (hashName !== '') {\n        var hash = window.location.hash;\n        if (hash === '') {\n          alert('Back button was pressed.');\n        }\n      }\n    });\n\n    window.history.pushState('forward', null, './#forward');\n  }\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I'm detecting the back button by this way:</p>\n\n<pre><code>window.onload = function () {\nif (typeof history.pushState === \"function\") {\n    history.pushState(\"jibberish\", null, null);\n    window.onpopstate = function () {\n        history.pushState('newjibberish', null, null);\n        // Handle the back (or forward) buttons here\n        // Will NOT handle refresh, use onbeforeunload for this.\n    };\n}\n</code></pre>\n\n<p>It works but I have to create a cookie in Chrome to detect that i'm in the page on first time because when i enter in the page without control by cookie, the browser do the back action without click in any back button.</p>\n\n<pre><code>if (typeof history.pushState === \"function\"){\nhistory.pushState(\"jibberish\", null, null); \nwindow.onpopstate = function () {\n    if ( ((x=usera.indexOf(\"Chrome\"))!=-1) &amp;&amp; readCookie('cookieChrome')==null ) \n    {\n        addCookie('cookieChrome',1, 1440);      \n    } \n    else \n    {\n        history.pushState('newjibberish', null, null);  \n    }\n};\n</code></pre>\n\n<p>}</p>\n\n<p>AND VERY IMPORTANT, <code>history.pushState(\"jibberish\", null, null);</code> duplicates the browser history.</p>\n\n<p>Some one knows who can i fix it?</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have to detect if a user has clicked back button or not.\nFor this I am using </p>\n\n<pre><code>window.onbeforeunload = function (e) {\n}\n</code></pre>\n\n<p>It works if a user clicks back button.  But this event is also fired if a user click F5 \nor reload button of browser.  How do I fix this?</p>\n",
            "last_activity_date": 1390902135,
            "question_id": 6359327,
            "score": 22,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "detect back button click in browser"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>UPDATE @RoyiNamir 's comment:</p>\n\n<pre><code>var frames = window.frames || window.document.frames;\n</code></pre>\n\n<p>for window in a iframe.</p>\n\n<pre><code>frames[\"myIframeId\"].window\n</code></pre>\n\n<p>for document in a iframe</p>\n\n<pre><code>frames[\"myIframeId\"].window.document\n</code></pre>\n\n<p>for body in a iframe </p>\n\n<pre><code>frames[\"myIframeId\"].window.document.body\n</code></pre>\n\n<p>for body in a iframe with jquery</p>\n\n<pre><code>var iframeBody = $(frames[\"myIframeId\"].window.document).contents().find(\"body\");\n</code></pre>\n\n<p>IMPORTANT:\nyou should always check that the document is with the status \"complete\" for work with this</p>\n\n<pre><code>if (frames[\"myIframeId\"].window.document.readyState==\"complete\")\n{\n   //ok\n}\nelse\n{\n   //perform a recursive call until it is complete\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To get the <code>window</code> object for a frame you can use the <code>window.frames</code> array:</p>\n\n<pre><code>var iframewindow= frames['iframe_name'];\n</code></pre>\n\n<p>This requires that you give the <code>&lt;iframe&gt;</code> an old-school <code>name</code> attribute instead-of-or-as-well-as the <code>id</code>. Alternatively if you know the order of iframes on the page you can index them numerically:</p>\n\n<pre><code>var iframewindow= frames[0];\n</code></pre>\n\n<p>It's generally more flexible to get the iframe window from the iframe element in the DOM, but this requires some compatibility code to cope with IE:</p>\n\n<pre><code>var iframe= document.getElementById('iframe_id');\nvar iframewindow= iframe.contentWindow? iframe.contentWindow : iframe.contentDocument.defaultView;\n</code></pre>\n\n<p>jQuery defines the <a href=\"http://docs.jquery.com/Traversing/contents\">contents()</a> method to grab the <code>document</code> node, but it doesn't give you a cross-browser way to go from the <code>document</code> to the <code>window</code>, so you're still stuck with:</p>\n\n<pre><code>var iframe= $('#iframe_id')[0];\nvar iframewindow= iframe.contentWindow? iframe.contentWindow : iframe.contentDocument.defaultView;\n</code></pre>\n\n<p>which isn't really a big win.</p>\n\n<p>(Note: be very careful using jQuery for cross-frame-scripting. Each frame needs its own copy of jQuery and methods from one frame's copy won't necessarily work on nodes from the other. Cross-frame-scripting is a topic fraught with traps.)</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<h1>To sum it up</h1>\n\n<h3>Access iframe content from parent page</h3>\n\n<pre><code>var iframe = $('iframe').contents(); // iframe.find('..') ...\n</code></pre>\n\n<h3>Access parent page content from iframe</h3>\n\n<pre><code>var parent = $(window.parent.document); // parent.find('..') ...\n</code></pre>\n\n<p>This applies only when the parent and the iframe pages are on same domain.</p>\n\n<h1>EDIT: On load child iframes example:</h1>\n\n<h2>parent html</h2>\n\n<pre><code>&lt;iframe id=\"iframe1\" src=\"iframe1.html\"&gt;&lt;/iframe&gt;\n&lt;iframe id=\"iframe2\" src=\"iframe2.html\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<h2>parent js</h2>\n\n<pre><code>$(function () {\n    var iframe1 = null,\n        iframe2 = null;\n\n    // IE8/7\n    var frameInterval = window.setInterval(function () {\n        iframe1 = $('#iframe1').contents();\n        iframe2 = $('#iframe2').contents();\n        if ($('head', iframe1).length &amp;&amp; $('head', iframe2).length) {\n            window.clearInterval(frameInterval);\n        }\n    }, 100);\n\n    // on iframe loaded\n    $('#iframe1').on('load', function (e) {\n        iframe1 = $('#iframe1').contents();\n    });\n    $('#iframe2').on('load', function (e) {\n        iframe2 = $('#iframe2').contents();\n    });\n});\n</code></pre>\n\n<p>All major browsers including IE9 work with the <code>on('load')</code> lines. Only IE8/7 need the interval block.</p>\n",
                    "is_accepted": false,
                    "score": 16
                }
            ],
            "body": "<p>Hey..\nI have a prototype representing a particual IFrame. That prototype have a function called GoToUrl(...) that opens the given url within the IFrame.</p>\n\n<p>My question is: How do I create an \"InternalDOM\" property and make this property refer to the \"window\" object (the root DOM object) of the IFrame inside? In such way that: If my IFrame exposes a page which has an object X in it's \"window\" object I could do:</p>\n\n<pre><code>MyFrameObject.GoToUrl(pageXurl);\nMyFrameObject.InternalDOM.X\n</code></pre>\n\n<p>Any help would be appreciated.</p>\n\n<p>PS: I would accept answers not necessarily related to jQuery but I would prefer a jQuery solution.</p>\n",
            "last_activity_date": 1408215440,
            "question_id": 1654017,
            "score": 19,
            "tags": [
                "javascript",
                "jquery",
                "dom"
            ],
            "title": "How to expose IFrame&#39;s DOM using jQuery?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You could write a function that runs getElementsByTagName('*'), and returns only those elements with a \"data-foo\" attribute:</p>\n\n<pre><code>function getAllElementsWithAttribute(attribute)\n{\n  var matchingElements = [];\n  var allElements = document.getElementsByTagName('*');\n  for (var i = 0, n = allElements.length; i &lt; n; i++)\n  {\n    if (allElements[i].getAttribute(attribute) !== null)\n    {\n      // Element exists with attribute. Add to array.\n      matchingElements.push(allElements[i]);\n    }\n  }\n  return matchingElements;\n}\n</code></pre>\n\n<p>Then,</p>\n\n<pre><code>getAllElementsWithAttribute('data-foo');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 60
                },
                {
                    "body": "<p>I played a bit around and ended up with this prude solution:</p>\n\n<pre><code>function getElementsByAttribute(attribute, context) {\n  var nodeList = (context || document).getElementsByTagName('*');\n  var nodeArray = [];\n  var iterator = 0;\n  var node = null;\n\n  while (node = nodeList[iterator++]) {\n    if (node.getAttribute(attribute)) nodeArray.push(node);\n  }\n\n  return nodeArray;\n}\n</code></pre>\n\n<p>The usage is quite simple, and works even in IE8:</p>\n\n<pre><code>getElementsByAttribute('data-foo');\n// or with parentNode\ngetElementsByAttribute('data-foo', document);\n</code></pre>\n\n<p><a href=\"http://fiddle.jshell.net/9xaxf6jr/\">http://fiddle.jshell.net/9xaxf6jr/</a></p>\n\n<p>But I <strong>recommend</strong> to use <code>querySelector</code> / <code>All</code> for this (and to support older browsers use a <a href=\"https://gist.github.com/connrs/2724353\">polyfill</a>):</p>\n\n<pre><code>document.querySelectorAll('[data-foo]');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This is the simplest way to getting attribute value for me</p>\n\n<pre><code>&lt;p id=\"something\" data-foo=\"your value\"&gt;\n&lt;script type=\"text/javascript\"&gt;\n    alert(document.getElementById('something').getAttribute('data-foo'));\n&lt;/script&gt;\n</code></pre>\n\n<p>Two years belated answer with hope of help future follower.</p>\n",
                    "is_accepted": false,
                    "score": -9
                },
                {
                    "body": "<p>Use </p>\n\n<pre><code>//find first element with \"someAttr\" attribute\ndocument.querySelector('[someAttr]')\n</code></pre>\n\n<p>or</p>\n\n<pre><code>//find all elements with \"someAttr\" attribute\ndocument.querySelectorAll('[someAttr]') \n</code></pre>\n\n<p>to find elements by attribute. It's now supported in all relevant browsers (even <a href=\"http://whyiesucks.blogspot.no/\" rel=\"nofollow\">IE</a>8): <a href=\"http://caniuse.com/#search=queryselector\" rel=\"nofollow\">http://caniuse.com/#search=queryselector</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this - I slightly changed the above answers:</p>\n\n<pre><code>var getAttributes = function(attribute) {\n    var allElements = document.getElementsByTagName('*'),\n        allElementsLen = allElements.length,\n        curElement,\n        i,\n        results = [];\n\n    for(i = 0; i &lt; allElementsLen; i += 1) {\n        curElement = allElements[i];\n\n        if(curElement.getAttribute(attribute)) {\n            results.push(curElement);\n        }\n    }\n\n    return results;\n};\n</code></pre>\n\n<p>Then,</p>\n\n<pre><code>getAttributes('data-foo');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>&lt;p data-foo=\"bar\"&gt;\n</code></pre>\n\n<p>How can you do the equivalent to</p>\n\n<pre><code>document.querySelectorAll('[data-foo]')\n</code></pre>\n\n<p>where <a href=\"https://developer.mozilla.org/en/DOM/Document.querySelectorAll\">querySelectorAll</a> is <a href=\"http://caniuse.com/queryselector\">not available</a>? </p>\n\n<p>I need a native solution that works at least in IE7. I don\u2019t care about IE6.</p>\n",
            "last_activity_date": 1422961028,
            "question_id": 9496427,
            "score": 45,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "Can I get elements by attribute selector when querySelectorAll is not available without uing libraries?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The <code>{}</code>-notation is just syntactical sugar to make the code nicer ;-)</p>\n\n<p>JavaScript has many similar constructs like the construction of functions, where function() is just a synonym for</p>\n\n<pre><code>var Func = new Function(\"&lt;params&gt;\", \"&lt;code&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In JS arrays are objects, just slightly modified (with a few more functions).</p>\n\n<p>Functions like:</p>\n\n<pre><code>concat\nevery   \nfiler\nforEach\njoin\nindexOf\nlastIndexOf\nmap\npop\npush\nreverse\nshift\nslice\nsome\nsort\nsplice\ntoSource\ntoString\nunshift\nvalueOf\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Virtually everything in javascript is an object, so you can \"abuse\" an <a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Array\">Array</a> object by setting arbitrary properties on it. This <a href=\"http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/\">should be considered harmful</a> though. Arrays are for numerically indexed data - for non-numeric keys, use an Object.</p>\n\n<p>Here's a more concrete example why non-numeric keys don't \"fit\" an Array:</p>\n\n<pre><code>var myArray = Array();\nmyArray['A'] = \"Athens\";\nmyArray['B'] = \"Berlin\";\n\nalert(myArray.length);\n</code></pre>\n\n<p>This won't display '2', but '0' - effectively, no elements have been added to the array, just some new properties added to the array object.</p>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<p>Everything in Javascript is an object besides primitive types.</p>\n\n<p>The code</p>\n\n<pre><code>var myArray = Array();\n</code></pre>\n\n<p>creates an instance of the Array object while </p>\n\n<pre><code>var myObject = {'A': 'Athens', 'B':'Berlin'};\n</code></pre>\n\n<p>creates an instance of Object object.</p>\n\n<p>Try the following code</p>\n\n<pre><code>alert(myArray.constructor)\nalert(myObject.constructor)\n</code></pre>\n\n<p>So you will see the difference is in the type of object constructor.</p>\n\n<p>The instance of the Array object will contain all the properties and methods of the Array prototype.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Me thinks, me too metaphorical and cryptic with previous answer. Clarification follows.</p>\n\n<p>An instance of Array, Boolean, Date, Function, Number, RegExp, String is an Object but enhanced with methods and properties specific to each type. For example, an array has a predefined <code>length</code> property while generic objects do not.</p>\n\n<pre><code>javascript:alert([].length+'\\n'+{}.length)\n</code></pre>\n\n<p>displays</p>\n\n<pre>\n0\nundefined\n</pre>\n\n<p>Intrinsically, the FF Gecko interpreter also distinguishes between Arrays and generic Objects with distinct differences evaluating language constructs.</p>\n\n<pre><code>javascript:\n  ra=[  \"one\",   \"two\",   \"three\"]; ra.a=4;\n  ob={0:\"one\", 1:\"two\", 2:\"three\"}; ob.a=4;\n  alert(\n    ra            +\"\\n\\n\"+\n    ob            +\"\\n\\n\"+\n    ra.toSource() +\"\\n\\n\"+\n    ra.a          +\"\\t .toSource() forgot me! \\n\\n\"+\n    ra.length     +\"\\t and my length! \\n\\n\"+\n    ob.toSource());\n  ps=\"\"; for(i in ra)ps+=i+\" \"; alert(ps);  /* NB .length is missing! */\n  ps=\"\"; for(i in ob)ps+=i+\" \"; alert(ps);\n</code></pre>\n\n<p>displaying</p>\n\n<pre>\none,two,three\n\n[object Object]\n\n[\"one\", \"two\", \"three\"]\n\n4    .toSource() forgot me! \n\n3    and my length! \n\n({0:\"one\", 1:\"two\", 2:\"three\", a:4})\n</pre>\n\n<p>and <code>0 1 2 a</code> and <code>0 1 2 a</code>.</p>\n\n<p>Regarding the statement that all objects are functions:</p>\n\n<p>It is neither syntactically nor semantically correct to use an arbitrary object instance as a function like <code>123()</code> or <code>\"abc\"()</code> or <code>[]()</code> or <code>{}()</code> or <code>obj()</code> where <code>obj</code> is any type other than <code>Function</code>, so an arbitrary object INSTANCE is not a <code>Function</code>. However, given an object <code>obj</code> and it's type as <code>Array, Boolean, Date, ...</code>, how did <code>obj</code> come to be as an <code>Array, Boolean, Date, ...</code>? What is an <code>Array, Boolean, Date, ...</code>?</p>\n\n<pre><code>javascript:\n    alert([Array, Boolean, Date, Function, \n              Number, Object, RegExp, String] . join('\\n\\n') );\n</code></pre>\n\n<p>displays</p>\n\n<pre><code>function Array() {\n    [native code]\n}\n\nfunction Boolean() {\n    [native code]\n}\n\nfunction Date() {\n    [native code]\n}\n\nfunction Function() {\n    [native code]\n}\n\nfunction Number() {\n    [native code]\n}\n\nfunction Object() {\n    [native code]\n}\n\nfunction RegExp() {\n    [native code]\n}\n\nfunction String() {\n    [native code]\n}\n</code></pre>\n\n<p>In every case, without equivocation, the object type manifests as a <code>function</code> definition, hence the statement that all objects are functions! (The tongue-in-cheek is that I intentionally obscured and blurred the distinction of an object instance with that of it's type! Still, this shows \"you can't have one without the other\", Object and Function! Capitalization emphasizes type as opposed to instance.)</p>\n\n<p>Both a functional and object paradigm seem to be fundamental to the programming and implementing of the JS interpreter low level built-in primitives, such as <code>Math</code> and <code>JSON</code> and <code>true</code>.</p>\n\n<pre><code> javascript:alert([Math, JSON, true.toSource()].join(\"\\n\\n\"));\n</code></pre>\n\n<p>displays</p>\n\n<pre><code>[object Math]\n\n[object JSON]\n\n(new Boolean(true))\n</code></pre>\n\n<hr>\n\n<p>At the time of the development of Javascript, an object-centric programming style (OOP's - Object Oriented Programming style - the \"'s\" is my own pun!) was in vogue and the interpreter was similarly christened with Java to give it greater credibility. Functional programming techniques were relegated to more abstract and esoteric examinations studying the theories of Automata, Recursive Functions, Formal Languages, etc. and as such not as palatable. However, the strengths of these formal considerations are clearly manifest in Javascript particularly as implemented in FF's Gecko engine (ie. <code>.toSource()</code>).</p>\n\n<hr>\n\n<p>The Object definition for Function is particularly satisfying for it is defined as a recurrence relation! defined using it's own definition!</p>\n\n<p><code>function Function() { [native code] }</code><br>\nand since a function is an Object the same sentiment holds for<br>\n<code>function Object() { [native code] }</code>.</p>\n\n<p>Most of the other definitions quiesce to a static terminal value. However, <code>eval()</code> is a particularly powerful primitive and so a String can also embed arbitrary functionality.</p>\n\n<p>Note again, the vernacular used above obscures object type and instance distinction.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>The following two different code snippets seem equivalent to me:</p>\n\n<pre><code>var myArray = Array();\nmyArray['A'] = \"Athens\";\nmyArray['B'] = \"Berlin\";\n</code></pre>\n\n<p>and</p>\n\n<pre><code>var myObject = {'A': 'Athens', 'B':'Berlin'};\n</code></pre>\n\n<p>because they both behave the same, and also <code>typeof(myArray) == typeof(myObjects)</code> (both yield 'object').</p>\n\n<p><strong>Is there any difference between these variants?</strong></p>\n",
            "last_activity_date": 1316881770,
            "question_id": 874205,
            "score": 43,
            "tags": [
                "javascript",
                "arrays",
                "object"
            ],
            "title": "What is the difference between an array and an object?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>When you declare global variables, functions, etc., they, ehm, go to the global namespace. Aside from performance/memory issues (which may arise), you're likely to run into unfortunate name clashing, when you'll redefine an important variable or use not the value you think you use.</p>\n\n<p>Defining things in the global namespace is to be avoided.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In JavaScript, declarations outside of a function are in the global scope. Consider this small example:</p>\n\n<pre><code>var x = 10;\nfunction example() {\n    console.log(x);\n}\nexample(); //Will print 10\n</code></pre>\n\n<p>In the example above, <code>x</code> is declared in the global scope. Any child scope, such as that created by the <code>example</code> function, effectively inherit things declared in any parent scopes (in this case, that's just the global scope).</p>\n\n<p>Any child scope that redeclares a variable declared in the global scope will shadow the global variable, potentially causing unwanted, hard to track bugs:</p>\n\n<pre><code>var x = 10;\nfunction example() {\n    var x = 20;\n    console.log(x); //Prints 20\n}\nexample();\nconsole.log(x); //Prints 10\n</code></pre>\n\n<p>Global variables are usually not recommended because of the potential to cause problems like this. If we didn't use the <code>var</code> statement inside the <code>example</code> function, we would have accidentally overwritten the value of <code>x</code> in the global scope:</p>\n\n<pre><code>var x = 10;\nfunction example() {\n    x = 20; //Oops, no var statement\n    console.log(x); //Prints 20\n}\nexample();\nconsole.log(x); //Prints 20... oh dear\n</code></pre>\n\n<p>If you want to read more and understand it properly, I suggest going through the <a href=\"http://es5.github.com/\">ECMAScript specification</a>. It may not be the most exciting of reads but it will help no end.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><strong>Quick Note On Garbage Collection</strong></p>\n\n<p>As variables lose scope, they will be eligible for garbage collection. If they are scoped globally, then they will not be eligible for collection until the global namespace loses scope.</p>\n\n<p>Here is an example:</p>\n\n<pre><code>var arra = [];\nfor (var i = 0; i &lt; 2003000; i++) {\n arra.push(i * i + i);\n}\n</code></pre>\n\n<p>Adding this to your global namespace (at least for me) should ad 10,000 kb of memory usage (win7 firefox) which will not be collected. Other browsers may handle this differently.</p>\n\n<p>Whereas having that same code in a scope which goes out of scope like this:</p>\n\n<pre><code>(function(){\n var arra = [];\n for (var i = 0; i &lt; 2003000; i++) {\n  arra.push(i * i + i);\n }\n})();\n</code></pre>\n\n<p>Will allow <code>arra</code> to lose scope after the closure executes and be eligible for garbage collection. </p>\n\n<p><strong>Global Namespace Is Your Friend</strong></p>\n\n<p>Despite the many claims against using the global namespace, it is your friend. And like a good friend, you should not abuse your relationship.</p>\n\n<p><strong>Be Gentle</strong></p>\n\n<p>Don't abuse (usually referred to as \"polluting\") the global namespace. And what I mean by do not abuse the global namespace is - do not create multiple global variables. Here is a <em>bad</em> example of using the global namespace.</p>\n\n<pre><code>var x1 = 5;\nvar x2 = 20;\nvar y1 = 3\nvar y2 = 16;\n\nvar rise = y2 - y1;\nvar run = x2 - x1;\n\nvar slope = rise / run;\n\nvar risesquared = rise * rise;\nvar runsquared = run * run;\n\nvar distancesquared = risesquared + runsquared;\n\nvar distance = Math.sqrt(dinstancesquared);\n</code></pre>\n\n<p>This is going to create 11 global variables which could possibly be overwritten or misconstrued somewhere.</p>\n\n<p><strong>Be Resourceful</strong></p>\n\n<p>A more resourceful approach, which does not pollute the global namespace, would be to wrap this all in the module pattern and only use one global variable while exposing multiple variables. </p>\n\n<p>Here is an example: (Please note this is simple and there is no error handling)</p>\n\n<pre><code>//Calculate is the only exposed global variable\nvar Calculate = function () {\n //all defintions in this closure are local, and will not be exposed to the global namespace\n var Coordinates = [];//array for coordinates\n var Coordinate = function (xcoord, ycoord) {//definition for type Coordinate\n   var x;\n   var y;\n   this.x = xcoord;//assign values similar to a constructor\n   this.y = ycoord;\n  };\n\n  return {//these methods will be exposed through the Calculate object\n   AddCoordinate: function (x, y) {\n   Coordinates.push(new Coordinate(x, y));//Add a new coordinate\n  },\n\n  Slope: function () {//Calculates slope and returns the value\n   var c1 = Coordinates[0];\n   var c2 = Coordinates[1];\n   return c2.y - c1.y / c2.x - c1.x;//calculates rise over run and returns result\n  },\n\n  Distance: function () {\n   //even with an excessive amount of variables declared, these are all still local\n   var c1 = Coordinates[0];\n   var c2 = Coordinates[1];\n\n   var rise = c2.y - c1.y;\n   var run = c2.x - c1.x;\n\n   var risesquared = rise * rise;\n   var runsquared = run * run;\n\n   var distancesquared = risesquared + runsquared;\n\n   var distance = Math.sqrt(distancesquared);\n\n   return distance;\n  }\n };\n};\n\n//this is a \"self executing closure\" and is used because these variables will be\n//scoped to the function, and will not be available globally nor will they collide\n//with any variable names in the global namespace\n(function () {\n var calc = new Calculate();\n calc.AddCoordinate(5, 20);\n calc.AddCoordinate(3, 16);\n console.log(calc.Slope());\n console.log(calc.Distance());\n})();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 40
                }
            ],
            "body": "<p><strong>What does it mean global namespace would be polluted?</strong></p>\n\n<p>I don't really understand what global namespace getting polluted means. </p>\n",
            "last_activity_date": 1403623554,
            "question_id": 8862665,
            "score": 23,
            "tags": [
                "javascript"
            ],
            "title": "What does it mean global namespace would be polluted?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You can print the PHP variable into your javascript while your page is created.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var MyJSStringVar = \"&lt;?php Print($MyPHPStringVar); ?&gt;\";\n    var MyJSNumVar = &lt;?php Print($MyPHPNumVar); ?&gt;;\n&lt;/script&gt;\n</code></pre>\n\n<p>Of course this is for <em>simple</em> variables and not objects.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>You can pass PHP Variables to your JavaScript by generating it with PHP:</p>\n\n<pre><code>&lt;?php\n$someVar = 1;\n?&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    var javaScriptVar = \"&lt;?php echo $someVar; ?&gt;\";\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>It depends on what type of PHP variable you want to use in Javascript. For example, entire PHP objects with class methods cannot be used in Javascript. You can, however, use the built-in PHP <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> (JavaScript Object Notation) functions to convert simple PHP variables into JSON representations. For more information, please read the following links:</p>\n\n<ul>\n<li><a href=\"http://www.php.net/json\">PHP JSON Manual</a></li>\n<li><a href=\"http://www.php.net/manual/en/function.json-encode.php\">PHP <code>json_encode</code> function</a></li>\n<li><a href=\"http://www.php.net/manual/en/function.json-decode.php\">PHP <code>json_decode</code> function</a></li>\n</ul>\n\n<p>You can generate the JSON representation of your PHP variable and then print it into your Javascript code when the page loads. For example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  var foo = &lt;?php echo json_encode($bar); ?&gt;;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I think the easiest route is to include the <a href=\"http://jquery.com/\">jQuery</a> javascript library in your webpages, then use <a href=\"http://json.org/\">JSON</a> as format to pass data between the two.</p>\n\n<p>In your HTML pages, you can request data from the PHP scripts like this:</p>\n\n<pre><code>$.getJSON('http://foo/bar.php', {'num1': 12, 'num2': 27}, function(e) {\n    alert('Result from PHP: ' + e.result);\n});\n</code></pre>\n\n<p>In bar.php you can do this:</p>\n\n<pre><code>$num1 = $_GET['num1'];\n$num2 = $_GET['num2'];\necho json_encode(array(\"result\" =&gt; $num1 * $num2));\n</code></pre>\n\n<p>This is what's usually called AJAX, and it is useful to give web pages a more\ndynamic and desktop-like feel (you don't have to refresh the entire page to communicate\nwith PHP).</p>\n\n<p>Other techniques are simpler.  As others have suggested, you can simply generate the\nvariable data from your PHP script:</p>\n\n<pre><code>$foo = 123;\necho \"&lt;script type=\\\"text/javascript\\\"&gt;\\n\";\necho \"var foo = ${foo};\\n\";\necho \"alert('value is:' + foo);\\n\";\necho \"&lt;/script&gt;\\n\";\n</code></pre>\n\n<p>Most web pages nowadays use a combination of the two.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Sure, there are ways to get the $_GET object in javascript by passing it directly from php, but there are other ways ;D</p>\n\n<p>I will proceed to explain both.<hr></p>\n\n<p>1) <code>Direct parse by function</code>. This just grabs the url and parses it directly with RegEx</p>\n\n<pre><code>$_GET=function(key,def){\n    try{\n        return RegExp('[?&amp;;]'+key+'=([^?&amp;#;]*)').exec(location.href)[1]\n    }catch(e){\n        return def||''\n    }\n}\n</code></pre>\n\n<p>Easy peasy, if the query string is <code>?ducksays=quack&amp;bearsays=growl</code>, then <code>$_GET('ducksays')</code> should return <code>quack</code> and <code>$_GET('bearsays')</code> should return <code>growl</code></p>\n\n<p>Now you probably instantly notice that the syntax is different as a result of being a function. Instead of <code>$_GET[key]</code>, it is <code>$_GET(key)</code>. Well, I thought of that :)</p>\n\n<p>Here comes the second method:<hr></p>\n\n<p>2) <code>Object Build by Loop</code></p>\n\n<pre><code>onload=function(){\n    $_GET={}//the lack of 'var' makes this global\n    str=location.search.split('&amp;')//not '?', this will be dealt with later\n    for(i in str){\n        REG=RegExp('([^?&amp;#;]*)=([^?&amp;#;]*)').exec(str[i])\n        $_GET[REG[1]]=REG[2]\n    }\n}\n</code></pre>\n\n<p>Behold! $_GET is now an object containing an index of every object in the url, so now this is possible:</p>\n\n<pre><code>$_GET['ducksays']//returns 'quack'\n</code></pre>\n\n<p>AND this is possible</p>\n\n<pre><code>for(i in $_GET){\n    document.write(i+': '+$_GET[i]+'&lt;hr&gt;')\n}\n</code></pre>\n\n<p>This is definitely <em>not</em> possible with the function.<hr></p>\n\n<p>I hope this was helpful and interesting</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;?php \n$j=1;\n?&gt;\n&lt;script&gt;\nvar i = \"&lt;?php echo $j; ?&gt;\";\n//Do something\n&lt;/script&gt;\n&lt;?php\necho $j;\n?&gt;\n</code></pre>\n\n<p>This is the easiest way of passing a php variable to javascript without Ajax.</p>\n\n<p>You can also use something like this:</p>\n\n<pre><code>var i = \"&lt;?php echo json_encode($j); ?&gt;\";\n</code></pre>\n\n<p>This said to be safer or more secure. i think</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to use a PHP variable in JavaScript. How is it possible?</p>\n",
            "last_activity_date": 1390890237,
            "question_id": 415868,
            "score": 22,
            "tags": [
                "php",
                "javascript"
            ],
            "title": "Get variable from PHP to JavaScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>There's a couple of ways you can do this.  If the <code>onchange</code> listener is a function set via the <code>element.onchange</code> property and you're not bothered about the event object or bubbling/propagation, the easiest method is to just call that function:</p>\n\n<pre><code>element.onchange();\n</code></pre>\n\n<p>If you need it to simulate the real event in full, or if you set the event via the html attribute or <code>addEventListener</code>/<code>attachEvent</code>, you need to do a bit of feature detection to correctly fire the event:</p>\n\n<pre><code>if (\"createEvent\" in document) {\n    var evt = document.createEvent(\"HTMLEvents\");\n    evt.initEvent(\"change\", false, true);\n    element.dispatchEvent(evt);\n}\nelse\n    element.fireEvent(\"onchange\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 117
                },
                {
                    "body": "<p>For those using jQuery there's a convenient method: <a href=\"http://api.jquery.com/change/\">http://api.jquery.com/change/</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\">MDN</a> suggests that there's a much cleaner way of doing this in modern browsers:</p>\n\n<pre><code>// Assuming we're listening for e.g. a 'change' event on `element`\n\n// Create a new 'change' event\nvar event = new Event('change');\n\n// Dispatch it.\nelement.dispatchEvent(event);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I'm setting a date-time textfield value via a calendar widget. Obviously, the calendar widget does something like this :</p>\n\n<pre><code>document.getElementById('datetimetext').value = date_value;\n</code></pre>\n\n<p>What I want is :\nOn changing value in the date-time textfield I need to reset some other fields in the page. I've added a onchange event listener to the datetimetext field which is not getting triggered, because I guess <code>onchange</code> gets triggered only when the element gets focus &amp; its value is changed on losing focus.</p>\n\n<p>Hence I'm looking for a way to manually trigger this <code>onchange</code> event (which I guess should take care of checking the value difference in the text field).</p>\n\n<p>Any ideas ?</p>\n",
            "last_activity_date": 1412279950,
            "question_id": 2856513,
            "score": 69,
            "tags": [
                "javascript"
            ],
            "title": "How can I trigger an onchange event manually?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>The best practice is using xslt and comments in it.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>I've stopped doing it.  At some point you just have to let go of your NCSA Mosaic.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I stopped doing that ages ago. You really don't need it in this day and age.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't do it but the other day I went to validate my password protected site at w3c. So I had to use their direct input method. It complained about my javascript, so I put the comments back in everything was fine.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are typing manually, I suggest you always use external js files, that would help so much.</p>\n\n<p>Regarding your concern: most browsers are JavaScript safe today. However sometimes people may write simple parsers to fetch a HTML directly - and I must say, the safe quote is really helpful for those clients. Also some non-JS clients like old Lynx would get benefits from this.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The important thing is that nowadays, whether a particular browser supports JavaScript or not is irrelevant (clearly the great majority do) - it is irrelevant because almost <em>all</em> understand script blocks, which means that they know to ignore the JavaScript even if they can't interpret it.</p>\n\n<p>Matt Kruse gives a slightly <a href=\"http://www.javascripttoolbox.com/bestpractices/#comments\">more detailed explanation</a> on his <em>JavaScript Toolbox</em> site for why specifically <em>not</em> to use HTML comments within script blocks.</p>\n\n<p>Quoted from that page:</p>\n\n<hr>\n\n<h2>Don't Use HTML Comments In Script Blocks</h2>\n\n<p>\nIn the ancient days of javascript (1995), some browsers like Netscape 1.0 didn't have any support or knowledge of the script tag. So when javascript was first released, a technique was needed to hide the code from older browsers so they wouldn't show it as text in the page. The 'hack' was to use HTML comments within the script block to hide the code.\n</p>\n\n<p><strong>Using HTML Comments In Script Is Bad</strong></p>\n\n<pre><code>// DON'T do this! Code is just representative on how things were done\n&lt;script language=\"javascript\"&gt;\n&lt;!--\n   // code here\n//--&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>\nNo browsers in common use today are ignorant of the &lt;script&gt; tag, so hiding of javascript source is no longer necessary. In fact, it can be considered harmful for the following reasons:\n</p>\n\n<ul>\n    <li>Within XHTML documents, the source will actually be hidden from all browsers and rendered useless\n    <li>-- is not allowed within HTML comments, so any decrement operations in script are invalid\n</ul>\n",
                    "is_accepted": true,
                    "score": 77
                },
                {
                    "body": "<p>No, it is a hangover from a workaround used when the script element was first introduced. No browser fails to understand the script element today (even if it understands it as \"Script that should be ignored because scripting is turned off or unsupported\").</p>\n\n<p>In XHTML, they are actively harmful.</p>\n\n<p>I wrote something about <a href=\"http://dorward.me.uk/www/comments-cdata/\">the history of it</a> a while back.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Stopped using this a while back. Also, according to <a href=\"http://www.crockford.com/\" rel=\"nofollow\">Douglas Crockford</a>, you can <a href=\"http://www.sitepoint.com/blogs/2008/05/13/javascript-mime-type-damned-if-you-do-damned-if-you-dont/\" rel=\"nofollow\">drop the type attribute</a> from your script tags since the only scripting language available in most browsers is JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As per <strong>W3C Recommendation</strong> it was mainly useful to hide the script data from USER AGENTS.</p>\n\n<p>Quoted from the <a href=\"http://www.w3.org/TR/REC-html40/interact/scripts.html#h-18.3.2\" rel=\"nofollow\">W3c page</a> :</p>\n\n<p><em>Commenting scripts in JavaScript The JavaScript engine allows the string <code>\"&lt;!--\"</code> to occur at the start of a SCRIPT element, and ignores further characters until the end of the line. JavaScript interprets \"//\" as starting a comment extending to the end of the current line. This is needed to hide the string \"-->\" from the JavaScript parser.</em></p>\n\n<pre><code>    &lt;SCRIPT type=\"text/javascript\"&gt;\n&lt;!--  to hide script contents from old browsers\n  function square(i) {\n    document.write(\"The call passed \", i ,\" to the function.\",\"&lt;BR&gt;\")\n    return i * i\n  }\n  document.write(\"The function returned \",square(5),\".\")\n// end hiding contents from old browsers  --&gt;\n&lt;/SCRIPT&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you do not include literal text between script tags- that is, if you load scripts from src files, you can forget about the comments.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would recommend using a CDATA section, as described in <a href=\"http://stackoverflow.com/questions/66837/javascript-cdata-tags\">this question</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>The following practice is fairly commonplace in the inline JavaScript I have to work with:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n   &lt;!--\n       // Code goes here\n   //--&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>I know that the point is to prevent browsers that are incompatible with JavaScript from rendering the source, but is this still a best practice today? The vast majority of browsers used today can interpret JavaScript; even modern mobile devices usually don't have trouble.</p>\n\n<p>As for the 'why not?' question: I recently had to spend several hours debugging an issue where someone had left off the '//' in front of a '-->' at the end of a script tag buried deep in some pages, and this was causing mysterious JavaScript errors.</p>\n\n<p>What do you do? Is this still considered a 'best practice?'</p>\n",
            "last_activity_date": 1349396303,
            "question_id": 808816,
            "score": 61,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Are HTML comments inside script tags a best practice?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Not possible in IE, as the UI Zoom button in the status bar is not scriptable.  YMMV for other browsers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would say not possible in most browsers, at least not without some additional plugins. And in any case I would try to avoid relying on the browser's zoom as the implementations vary (some browsers only zoom the fonts, others zoom the images, too etc). Unless you don't care much about user experience.</p>\n\n<p>If you need a more reliable zoom, then consider zooming the page fonts and images with JavaScript and CSS, or possibly on the server side. The image and layout scaling issues could be addressed this way. Of course, this requires a bit more work.</p>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>You can use the <a href=\"http://www.css3.com/css-zoom/\" rel=\"nofollow\">CSS3 zoom function</a>, but I have not tested it yet with jQuery. Will try now and let you know.\nUPDATE: tested it, works but it's fun\n<a href=\"http://www.dmitrylambrianov.com/webdis/elements/zoom_jquery_css3.html\" rel=\"nofollow\">http://www.dmitrylambrianov.com/webdis/elements/zoom_jquery_css3.html</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Try if this works for you.  This works on FF, IE8+ and chrome.  The else part applies for non-firefox browsers.  Though this gives you a zoom effect, it does not actually modify the zoom value at browser level.</p>\n\n<pre><code>    var currFFZoom = 1;\n    var currIEZoom = 100;\n\n    $('#plusBtn').on('click',function(){\n        if ($.browser.mozilla){\n            var step = 0.02;\n            currFFZoom += step; \n            $('body').css('MozTransform','scale(' + currFFZoom + ')');\n        } else {\n            var step = 2;\n            currIEZoom += step;\n            $('body').css('zoom', ' ' + currIEZoom + '%');\n        }\n    });\n\n    $('#minusBtn').on('click',function(){\n        if ($.browser.mozilla){\n            var step = 0.02;\n            currFFZoom -= step;                 \n            $('body').css('MozTransform','scale(' + currFFZoom + ')');\n\n        } else {\n            var step = 2;\n            currIEZoom -= step;\n            $('body').css('zoom', ' ' + currIEZoom + '%');\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>possible in IE and chrome although it does not work in firefox:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction toggleZoomScreen() {\ndocument.body.style.zoom=\"80%\"\n} \n&lt;/script&gt;\n\n&lt;img src=\"example.jpg\" alt=\"example\" onclick=\"toggleZoomScreen()\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I have need to create 2 buttons on my site that would change the browser zoom level (+) (-). I'm requesting browser zoom and not css zoom because of image size and layout issues.</p>\n\n<p>Well, is this even possible? I've heard conflicting reports.</p>\n",
            "last_activity_date": 1419318356,
            "question_id": 1055336,
            "score": 33,
            "tags": [
                "javascript",
                "browser",
                "zoom"
            ],
            "title": "Changing the browser zoom level"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Easy, just use the HEAD method, instead of GET or POST:</p>\n\n<pre><code>function UrlExists(url, callback)\n{\n    var http = new XMLHttpRequest();\n    http.open('HEAD', url);\n    http.onreadystatechange = function() {\n        if (this.readyState == this.DONE) {\n            callback(this.status != 404);\n        }\n    };\n    http.send();\n}\n</code></pre>\n\n<p>This is just a short example to show how to use the HEAD method. Production code may need more fine-grained callbacks for different result states (success, failure, timeout), and may use different <a href=\"http://www.w3.org/TR/XMLHttpRequest2/#event-handlers\">event handlers</a> (<code>onload</code>, <code>onerror</code> and <code>ontimeout</code> rather than <code>onreadystatechange</code>).</p>\n",
                    "is_accepted": true,
                    "score": 54
                },
                {
                    "body": "<p>An XMLHTTPRequest object should have</p>\n\n<pre><code>getAllResponseHeaders();\ngetResponseHeader(\"header-name\")\n</code></pre>\n\n<p>defined on it</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Is it possible to do a HTTP Head request solely using an XMLHTTPRequest in JavaScript?</p>\n\n<p>My motivation is to conserve bandwidth.</p>\n\n<p>If not, is it possible to fake it?</p>\n",
            "last_activity_date": 1331285758,
            "question_id": 333634,
            "score": 33,
            "tags": [
                "javascript",
                "ajax",
                "http-headers",
                "xmlhttprequest"
            ],
            "title": "HTTP HEAD Request in Javascript/Ajax?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>No, there isn't. And even if it were, it would probably most likely support something like RGB to HEX, which would translate [255,255,255] to #FFFFFF, not 'white'. You can find examples of RGB to HEX conversions and vice versa on the internet, but less likely what you want.\nYou'll maybe have to create it yourself, but it's not hundreds of lines, you pick the most common 16 colors and create a switch. I don't want to offend you by creating it myself :).</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Not that's built-in, as far as I know.  It would be kind of a hack, but I think you could create an invisible div, set its CSS background property to the named color, then use JS to get the background color of the div, then delete the div.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>No, but using the <a href=\"http://www.w3schools.com/HTML/html_colornames.asp\">list here</a> you could create one.  Something like this:</p>\n\n<pre><code>function colourNameToHex(colour)\n{\n    var colours = {\"aliceblue\":\"#f0f8ff\",\"antiquewhite\":\"#faebd7\",\"aqua\":\"#00ffff\",\"aquamarine\":\"#7fffd4\",\"azure\":\"#f0ffff\",\n    \"beige\":\"#f5f5dc\",\"bisque\":\"#ffe4c4\",\"black\":\"#000000\",\"blanchedalmond\":\"#ffebcd\",\"blue\":\"#0000ff\",\"blueviolet\":\"#8a2be2\",\"brown\":\"#a52a2a\",\"burlywood\":\"#deb887\",\n    \"cadetblue\":\"#5f9ea0\",\"chartreuse\":\"#7fff00\",\"chocolate\":\"#d2691e\",\"coral\":\"#ff7f50\",\"cornflowerblue\":\"#6495ed\",\"cornsilk\":\"#fff8dc\",\"crimson\":\"#dc143c\",\"cyan\":\"#00ffff\",\n    \"darkblue\":\"#00008b\",\"darkcyan\":\"#008b8b\",\"darkgoldenrod\":\"#b8860b\",\"darkgray\":\"#a9a9a9\",\"darkgreen\":\"#006400\",\"darkkhaki\":\"#bdb76b\",\"darkmagenta\":\"#8b008b\",\"darkolivegreen\":\"#556b2f\",\n    \"darkorange\":\"#ff8c00\",\"darkorchid\":\"#9932cc\",\"darkred\":\"#8b0000\",\"darksalmon\":\"#e9967a\",\"darkseagreen\":\"#8fbc8f\",\"darkslateblue\":\"#483d8b\",\"darkslategray\":\"#2f4f4f\",\"darkturquoise\":\"#00ced1\",\n    \"darkviolet\":\"#9400d3\",\"deeppink\":\"#ff1493\",\"deepskyblue\":\"#00bfff\",\"dimgray\":\"#696969\",\"dodgerblue\":\"#1e90ff\",\n    \"firebrick\":\"#b22222\",\"floralwhite\":\"#fffaf0\",\"forestgreen\":\"#228b22\",\"fuchsia\":\"#ff00ff\",\n    \"gainsboro\":\"#dcdcdc\",\"ghostwhite\":\"#f8f8ff\",\"gold\":\"#ffd700\",\"goldenrod\":\"#daa520\",\"gray\":\"#808080\",\"green\":\"#008000\",\"greenyellow\":\"#adff2f\",\n    \"honeydew\":\"#f0fff0\",\"hotpink\":\"#ff69b4\",\n    \"indianred \":\"#cd5c5c\",\"indigo\":\"#4b0082\",\"ivory\":\"#fffff0\",\"khaki\":\"#f0e68c\",\n    \"lavender\":\"#e6e6fa\",\"lavenderblush\":\"#fff0f5\",\"lawngreen\":\"#7cfc00\",\"lemonchiffon\":\"#fffacd\",\"lightblue\":\"#add8e6\",\"lightcoral\":\"#f08080\",\"lightcyan\":\"#e0ffff\",\"lightgoldenrodyellow\":\"#fafad2\",\n    \"lightgrey\":\"#d3d3d3\",\"lightgreen\":\"#90ee90\",\"lightpink\":\"#ffb6c1\",\"lightsalmon\":\"#ffa07a\",\"lightseagreen\":\"#20b2aa\",\"lightskyblue\":\"#87cefa\",\"lightslategray\":\"#778899\",\"lightsteelblue\":\"#b0c4de\",\n    \"lightyellow\":\"#ffffe0\",\"lime\":\"#00ff00\",\"limegreen\":\"#32cd32\",\"linen\":\"#faf0e6\",\n    \"magenta\":\"#ff00ff\",\"maroon\":\"#800000\",\"mediumaquamarine\":\"#66cdaa\",\"mediumblue\":\"#0000cd\",\"mediumorchid\":\"#ba55d3\",\"mediumpurple\":\"#9370d8\",\"mediumseagreen\":\"#3cb371\",\"mediumslateblue\":\"#7b68ee\",\n    \"mediumspringgreen\":\"#00fa9a\",\"mediumturquoise\":\"#48d1cc\",\"mediumvioletred\":\"#c71585\",\"midnightblue\":\"#191970\",\"mintcream\":\"#f5fffa\",\"mistyrose\":\"#ffe4e1\",\"moccasin\":\"#ffe4b5\",\n    \"navajowhite\":\"#ffdead\",\"navy\":\"#000080\",\n    \"oldlace\":\"#fdf5e6\",\"olive\":\"#808000\",\"olivedrab\":\"#6b8e23\",\"orange\":\"#ffa500\",\"orangered\":\"#ff4500\",\"orchid\":\"#da70d6\",\n    \"palegoldenrod\":\"#eee8aa\",\"palegreen\":\"#98fb98\",\"paleturquoise\":\"#afeeee\",\"palevioletred\":\"#d87093\",\"papayawhip\":\"#ffefd5\",\"peachpuff\":\"#ffdab9\",\"peru\":\"#cd853f\",\"pink\":\"#ffc0cb\",\"plum\":\"#dda0dd\",\"powderblue\":\"#b0e0e6\",\"purple\":\"#800080\",\n    \"red\":\"#ff0000\",\"rosybrown\":\"#bc8f8f\",\"royalblue\":\"#4169e1\",\n    \"saddlebrown\":\"#8b4513\",\"salmon\":\"#fa8072\",\"sandybrown\":\"#f4a460\",\"seagreen\":\"#2e8b57\",\"seashell\":\"#fff5ee\",\"sienna\":\"#a0522d\",\"silver\":\"#c0c0c0\",\"skyblue\":\"#87ceeb\",\"slateblue\":\"#6a5acd\",\"slategray\":\"#708090\",\"snow\":\"#fffafa\",\"springgreen\":\"#00ff7f\",\"steelblue\":\"#4682b4\",\n    \"tan\":\"#d2b48c\",\"teal\":\"#008080\",\"thistle\":\"#d8bfd8\",\"tomato\":\"#ff6347\",\"turquoise\":\"#40e0d0\",\n    \"violet\":\"#ee82ee\",\n    \"wheat\":\"#f5deb3\",\"white\":\"#ffffff\",\"whitesmoke\":\"#f5f5f5\",\n    \"yellow\":\"#ffff00\",\"yellowgreen\":\"#9acd32\"};\n\n    if (typeof colours[colour.toLowerCase()] != 'undefined')\n        return colours[colour.toLowerCase()];\n\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p>This will give it to you in RGB - you should be able to do the hex conversion pretty easily.</p>\n\n<pre><code>d = document.createElement(\"div\");\nd.style.color = \"white\";\ndocument.body.appendChild(d)\n//Color in RGB \nwindow.getComputedStyle(d).color\n</code></pre>\n\n<p>Get Computed style is not supported on all browsers.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Here's an all purpose solution that does exactly what you want in every browser that is 100% programmatic, goodbye giant static table of names and hex values!:</p>\n\n<pre><code>// Here is the solution tied together as a native String native extension using \n// MooTools, though you can implement the same thing in whatever framework you prefer:\n\n(function(String){\n\nvar valueMatch = {\n        'rgb(0,0,0)': { 'black': ' ', 'rgb(0,0,0)': ' ' },\n        'rgba(0,0,0,0)': { 'transparent': ' ', 'rgba(0,0,0,0)': ' ' },\n        '#ffffff': { 'transparent': ' ' },\n        'transparent': { 'transparent': ' ' }\n    },\n    colorFromProbe = function(color){\n        color = color.toString();\n        if(!color.match(/^#.+$|^[^0-9]+$/)) return color;\n        var probe = ($('moo_color_probe') || new Element('textarea', {\n                'id': 'moo_color_probe',\n                'styles': {\n                    'display': 'none',\n                    'color': 'transparent'\n                }\n            }).inject(document.body, 'after'));\n        try{ probe.setStyle('color', color) } catch(e){ return color } //IE throws an error instead of defaulting the style to some color or transparent when the value is unrecognized\n        var computed = (Browser.ie) ? ieColorToHex(probe) : (Browser.opera) ? probe.style.color : probe.getComputedStyle('color'),\n            match = valueMatch[computed.replace(/ /g, '')];\n        probe.setStyle('color', 'transparent');\n        if((!Browser.ie || Browser.ie9) &amp;&amp; color == 'transparent' &amp;&amp; (match &amp;&amp; match['transparent'])) return 'rgba(0, 0, 0, 0)';\n        return (computed == 'transparent' || match &amp;&amp; !match[color.replace(/ /g, '')]) ? color : computed;\n    },\n    ieColorToHex = function(probe){ // Special IE mojo, thanks to Dean Edwards for the inspiration, his code used a pop-up window to test the color, I found you can simply use a textarea instead ;)\n        var value = probe.set('value', '').createTextRange().queryCommandValue(\"ForeColor\");\n        value = (((value &amp; 0x0000ff) &lt;&lt; 16) | (value &amp; 0x00ff00) | ((value &amp; 0xff0000) &gt;&gt;&gt; 16)).toString(16);\n        return \"#000000\".slice(0, 7 - value.length) + value;\n    };\n\n    String.implement({\n        colorToRgb: function(){\n            var color = colorFromProbe(this);\n            return (color.charAt(0) == '#') ? color.hexToRgb() : color;\n        },\n        colorToHex: function(){\n            var color = colorFromProbe(this);\n            return (color.test('rgb')) ? color.rgbToHex() : color;\n        }\n    });\n\n})(String);    \n</code></pre>\n\n<p>A more complete explanation and live example can be found here:\n<a href=\"http://www.backalleycoder.com/2010/10/05/converting-css-named-colors-to-rgb-and-hex/\">http://www.backalleycoder.com/2010/10/05/converting-css-named-colors-to-rgb-and-hex/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You'll need to rely on <code>getComputedStyle(...)</code>.</p>\n\n<p><strong>Example of using <code>getComputedStyle</code>:</strong></p>\n\n<pre><code>function convertToHexColor(englishColor) {\n\n    // create a temporary div. \n    var div = $('&lt;div&gt;&lt;/div&gt;').appendTo(\"body\").css('background-color', englishColor);\n    var computedStyle = window.getComputedStyle(div[0]);\n\n    // get computed color.\n    var computedColor = computedStyle.backgroundColor;\n\n    // cleanup temporary div.\n    div.remove();\n\n    // done.\n    return computedColor;\n\n    // The above returns \"rgb(R, G, B)\" on IE9/Chrome20/Firefox13.\n};\n</code></pre>\n\n<p><strong>And to convert \"rgb(R, G, B)\" to #RRGGBB you can use:</strong></p>\n\n<pre><code>function convertRGBDecimalToHex(rgb)\n{\n    var regex = /rgb *\\( *([0-9]{1,3}) *, *([0-9]{1,3}) *, *([0-9]{1,3}) *\\)/;\n    var values = regex.exec(rgb);\n    if(values.length != 4)\n    {\n        return rgb; // fall back to what was given.              \n    }\n    var r = Math.round(parseFloat(values[1]));\n    var g = Math.round(parseFloat(values[2]));\n    var b = Math.round(parseFloat(values[3]));\n    return \"#\" \n        + (r + 0x10000).toString(16).substring(3).toUpperCase() \n        + (g + 0x10000).toString(16).substring(3).toUpperCase()\n        + (b + 0x10000).toString(16).substring(3).toUpperCase();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>building on <a href=\"http://stackoverflow.com/a/1573141/731179\">Greg's answer</a> including gray/gray version</p>\n\n<p>added: flag to pass through unresolved strings</p>\n\n<p>available as <a href=\"https://gist.github.com/mxfh/4719348\" rel=\"nofollow\">gist colorhelpersforcanvas.js</a></p>\n\n<pre><code>String.prototype.colorNameToHex = function (returnUnresolved) { // color list from http://stackoverflow.com/q/1573053/731179  with added gray/gray\n    var hexRGB, definedColorNames = {\"aliceblue\": \"#f0f8ff\", \"antiquewhite\": \"#faebd7\", \"aqua\": \"#00ffff\", \"aquamarine\": \"#7fffd4\", \"azure\": \"#f0ffff\", \"beige\": \"#f5f5dc\", \"bisque\": \"#ffe4c4\", \"black\": \"#000000\", \"blanchedalmond\": \"#ffebcd\", \"blue\": \"#0000ff\", \"blueviolet\": \"#8a2be2\", \"brown\": \"#a52a2a\", \"burlywood\": \"#deb887\", \"cadetblue\": \"#5f9ea0\", \"chartreuse\": \"#7fff00\", \"chocolate\": \"#d2691e\", \"coral\": \"#ff7f50\", \"cornflowerblue\": \"#6495ed\", \"cornsilk\": \"#fff8dc\", \"crimson\": \"#dc143c\", \"cyan\": \"#00ffff\", \"darkblue\": \"#00008b\", \"darkcyan\": \"#008b8b\", \"darkgoldenrod\": \"#b8860b\", \"darkgray\": \"#a9a9a9\", \"darkgreen\": \"#006400\", \"darkkhaki\": \"#bdb76b\", \"darkmagenta\": \"#8b008b\", \"darkolivegreen\": \"#556b2f\", \"darkorange\": \"#ff8c00\", \"darkorchid\": \"#9932cc\", \"darkred\": \"#8b0000\", \"darksalmon\": \"#e9967a\", \"darkseagreen\": \"#8fbc8f\", \"darkslateblue\": \"#483d8b\", \"darkslategray\": \"#2f4f4f\", \"darkturquoise\": \"#00ced1\", \"darkviolet\": \"#9400d3\", \"deeppink\": \"#ff1493\", \"deepskyblue\": \"#00bfff\", \"dimgray\": \"#696969\", \"dodgerblue\": \"#1e90ff\", \"firebrick\": \"#b22222\", \"floralwhite\": \"#fffaf0\", \"forestgreen\": \"#228b22\", \"fuchsia\": \"#ff00ff\", \"gainsboro\": \"#dcdcdc\", \"ghostwhite\": \"#f8f8ff\", \"gold\": \"#ffd700\", \"goldenrod\": \"#daa520\", \"gray\": \"#808080\", \"green\": \"#008000\", \"greenyellow\": \"#adff2f\", \"honeydew\": \"#f0fff0\", \"hotpink\": \"#ff69b4\", \"indianred \": \"#cd5c5c\", \"indigo \": \"#4b0082\", \"ivory\": \"#fffff0\", \"khaki\": \"#f0e68c\", \"lavender\": \"#e6e6fa\", \"lavenderblush\": \"#fff0f5\", \"lawngreen\": \"#7cfc00\", \"lemonchiffon\": \"#fffacd\", \"lightblue\": \"#add8e6\", \"lightcoral\": \"#f08080\", \"lightcyan\": \"#e0ffff\", \"lightgoldenrodyellow\": \"#fafad2\", \"lightgrey\": \"#d3d3d3\", \"lightgreen\": \"#90ee90\", \"lightpink\": \"#ffb6c1\", \"lightsalmon\": \"#ffa07a\", \"lightseagreen\": \"#20b2aa\", \"lightskyblue\": \"#87cefa\", \"lightslategray\": \"#778899\", \"lightsteelblue\": \"#b0c4de\", \"lightyellow\": \"#ffffe0\", \"lime\": \"#00ff00\", \"limegreen\": \"#32cd32\", \"linen\": \"#faf0e6\", \"magenta\": \"#ff00ff\", \"maroon\": \"#800000\", \"mediumaquamarine\": \"#66cdaa\", \"mediumblue\": \"#0000cd\", \"mediumorchid\": \"#ba55d3\", \"mediumpurple\": \"#9370d8\", \"mediumseagreen\": \"#3cb371\", \"mediumslateblue\": \"#7b68ee\", \"mediumspringgreen\": \"#00fa9a\", \"mediumturquoise\": \"#48d1cc\", \"mediumvioletred\": \"#c71585\", \"midnightblue\": \"#191970\", \"mintcream\": \"#f5fffa\", \"mistyrose\": \"#ffe4e1\", \"moccasin\": \"#ffe4b5\", \"navajowhite\": \"#ffdead\", \"navy\": \"#000080\", \"oldlace\": \"#fdf5e6\", \"olive\": \"#808000\", \"olivedrab\": \"#6b8e23\", \"orange\": \"#ffa500\", \"orangered\": \"#ff4500\", \"orchid\": \"#da70d6\", \"palegoldenrod\": \"#eee8aa\", \"palegreen\": \"#98fb98\", \"paleturquoise\": \"#afeeee\", \"palevioletred\": \"#d87093\", \"papayawhip\": \"#ffefd5\", \"peachpuff\": \"#ffdab9\", \"peru\": \"#cd853f\", \"pink\": \"#ffc0cb\", \"plum\": \"#dda0dd\", \"powderblue\": \"#b0e0e6\", \"purple\": \"#800080\", \"red\": \"#ff0000\", \"rosybrown\": \"#bc8f8f\", \"royalblue\": \"#4169e1\", \"saddlebrown\": \"#8b4513\", \"salmon\": \"#fa8072\", \"sandybrown\": \"#f4a460\", \"seagreen\": \"#2e8b57\", \"seashell\": \"#fff5ee\", \"sienna\": \"#a0522d\", \"silver\": \"#c0c0c0\", \"skyblue\": \"#87ceeb\", \"slateblue\": \"#6a5acd\", \"slategray\": \"#708090\", \"snow\": \"#fffafa\", \"springgreen\": \"#00ff7f\", \"steelblue\": \"#4682b4\", \"tan\": \"#d2b48c\", \"teal\": \"#008080\", \"thistle\": \"#d8bfd8\", \"tomato\": \"#ff6347\", \"turquoise\": \"#40e0d0\", \"violet\": \"#ee82ee\", \"wheat\": \"#f5deb3\", \"white\": \"#ffffff\", \"whitesmoke\": \"#f5f5f5\", \"yellow\": \"#ffff00\", \"yellowgreen\": \"#9acd32\", \"darkgrey\": \"#a9a9a9\", \"darkslategrey\": \"#2f4f4f\", \"dimgrey\": \"#696969\", \"grey\": \"#808080\", \"lightgray\": \"#d3d3d3\", \"lightslategrey\": \"#778899\", \"slategrey\": \"#708090\"};\n    if (definedColorNames[this.toLowerCase()] !== undefined) {\n        hexRGB = definedColorNames[this.toLowerCase()];\n        // to keep unresolved strings set flag returnUnresolved to true\n    } else {if (returnUnresolved) {hexRGB = this; } else {hexRGB = undefined; } }\n    return hexRGB;\n};\n</code></pre>\n\n<p>some test cases:</p>\n\n<pre><code>console.log(\"black\".colorNameToHex());                //returns #000000\nconsole.log(\"rgba(100,100,0,0.7)\".colorNameToHex());  //returns undefined \nconsole.log(\"rgba(100,100,0,0.7)\".colorNameToHex(1)); //returns rgba(100,100,0,0.7) \n</code></pre>\n\n<p>as a bonus here my use case for that in a color-string to color-string-with-alpha conversion:</p>\n\n<p>works with any <a href=\"http://en.wikipedia.org/wiki/Web_colors#CSS_colors\" rel=\"nofollow\">css defined color</a> including: rgba, rgb, r%g%b%, #rgb, #rrggbb, hsl, hsla  </p>\n\n<p>mostly useful in drawing with alpha/opacity/transparency onto a HTML5 canvas element with passed on color strings</p>\n\n<pre><code>String.prototype.setAlpha = function (alpha) {\n    // change alpha of color string in any css color space\n    // intended for use in canvas/svg\n    // currently implemented:\n    // css defined colors               &gt; rgba\n    // rgba, rgb, r%g%b%, #rgb, #rrggbb &gt; rgba\n    // hsl, hsla                        &gt; hsla\n    // unresolved                       &gt; as is\n    //\n    // If no alpha is passed its is set to 1 or keeps the value in rgba/hsla\n\n    // kill whitespace split at \"(\", \")\", \",\"\n    var i, hex, c = this.replace(/\\s/g, '').split(/[\\(\\),]/);\n    function extractHex(string) {\n        if (string.charAt(0) === \"#\") {  // detect hex strings\n            hex = string.replace(/#/g, '');\n            string = \"hex\";\n        } else {hex = undefined; }\n        return string;\n    }\n    extractHex(c[0]);\n    if ([\"rgba\", \"rgb\", \"hsla\", \"hsl\", \"hex\"].indexOf(c[0]) === -1) {\n        c[0] = extractHex(c[0].colorNameToHex(1)); // detect defined color names\n    }\n    switch (c[0]) {\n    case \"rgba\":\n        if (alpha === undefined) {alpha = c[4]; }\n        c = \"rgba(\" + c[1] + \", \" + c[2] + \", \" + c[3] + \", \" + alpha + \")\";\n        break;\n    case \"rgb\":\n        if (alpha === undefined) {alpha = 1; }\n        //  if colors are in percentage values\n        for  (i = 1; i &lt;= 3; i = i + 1) {\n            if (c[i].charAt(c[i].length - 1) === \"%\") {\n                c[i] = Math.round(c[i].replace(/%/g, '') * 2.55);\n            }\n        }\n        c = \"rgba(\" + c[1] + \", \" + c[2] + \", \" + c[3] + \", \" + alpha + \")\";\n        break;\n    case \"hsl\":\n        if (alpha === undefined) {alpha = 1; }\n        c = \"hsla(\" + c[1] + \", \" + c[2] + \", \" + c[3] + \", \" + alpha + \")\";\n        break;\n    case \"hsla\":\n        if (alpha === undefined) {alpha = c[4]; }\n        c = \"hsla(\" + c[1] + \", \" + c[2] + \", \" + c[3] + \", \" + alpha + \")\";\n        break;\n    case \"hex\":\n        if (alpha === undefined) {alpha = 1; }\n        if (hex.length === 3) {\n            c[1] = parseInt(hex.charAt(0) + hex.charAt(0), 16);\n            c[2] = parseInt(hex.charAt(1) + hex.charAt(1), 16);\n            c[3] = parseInt(hex.charAt(2) + hex.charAt(2), 16);\n        } else if (hex.length === 6) {\n            c[1] = parseInt(hex.charAt(0) + hex.charAt(1), 16);\n            c[2] = parseInt(hex.charAt(2) + hex.charAt(3), 16);\n            c[3] = parseInt(hex.charAt(4) + hex.charAt(5), 16);\n        } else {break; }\n        c = \"rgba(\" + c[1] + \", \" + c[2] + \", \" + c[3] + \", \" + alpha + \")\";\n        break;\n    default: c = this; break;\n    }\n    return c;\n};\n</code></pre>\n\n<p>test:</p>\n\n<pre><code>console.log(\"orange\".setAlpha(0.3));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://cdnjs.cloudflare.com/ajax/libs/aight/1.1.1/aight.min.js\" rel=\"nofollow\">IE8 getComputedStyle polyfill</a> if needed</p>\n\n<pre><code>var rgbToHex = function(r, g, b) {\n    return \"#\" + (16777216 | b | (g &lt;&lt; 8) | (r &lt;&lt; 16)).toString(16).slice(1);\n};\n\nvar d = document.createElement('div');\nd.style.color = 'white';\nwindow.document.body.appendChild(d);\nvar parts = (window.getComputedStyle(d).color || '').match(/\\d+/g);\nvar f = function(n) { return parseInt(n, 10); };\nwindow.document.body.removeChild(d);\nvar hex = rgbToHex(f(parts[0]), f(parts[1]), f(parts[2]));\n\n//\"#ffffff\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Quick code for HEX / RGB values only, might be useful to someone, and can be adapted to include names: pull the whole object in the for loop, check the name and if it matches you've got your hex / rbg.\nThey are taken from here:\n<a href=\"http://www.colourlovers.com/web/blog/2008/04/22/all-120-crayon-names-color-codes-and-fun-facts\" rel=\"nofollow\">http://www.colourlovers.com/web/blog/2008/04/22/all-120-crayon-names-color-codes-and-fun-facts</a></p>\n\n<p>Most importantly, please notice the correct spelling of \"colour\" :P</p>\n\n<pre><code>/*COLOURS*/\nfunction loadColourPalette() {\n\n$(\"#colourPalette\").empty();\n//load them animated\nfor (var t = 0; t&lt;120; t++){\n    var c = returnColourForIndex(t);\n    console.log(\"c is \" + c);\n    var div = '&lt;div class=\"colourBox\" id=\"cb'+t+'\" style=\"background:'+c+'\"&gt;&lt;/div&gt;';\n    $(\"#colourPalette\").append(div);\n}\n\n}\n\n\n\nfunction returnColourForIndex(i){\n\nvar colours = [     {hex:\"CD4A4A\",rgb:\"205,74,74\"},\n                    {hex:\"CC6666\",rgb:\"204,102,102\"},\n                    {hex:\"BC5D58\",rgb:\"188,93,88\"},\n                    {hex:\"FF5349\",rgb:\"255,83,73\"},\n                    {hex:\"FD5E53\",rgb:\"253,94,83\"},\n                    {hex:\"FD7C6E\",rgb:\"253,124,110\"},\n                    {hex:\"FDBCB4\",rgb:\"253,188,180\"},\n                    {hex:\"FF6E4A\",rgb:\"255,110,74\"},\n                    {hex:\"FFA089\",rgb:\"255,160,137\"},\n                    {hex:\"EA7E5D\",rgb:\"234,126,93\"},\n                    {hex:\"B4674D\",rgb:\"180,103,77\"},\n                    {hex:\"A5694F\",rgb:\"165,105,79\"},\n                    {hex:\"FF7538\",rgb:\"255,117,56\"},\n                    {hex:\"FF7F49\",rgb:\"255,127,73\"},\n                    {hex:\"DD9475\",rgb:\"221,148,117\"},\n                    {hex:\"FF8243\",rgb:\"255,130,67\"},\n                    {hex:\"FFA474\",rgb:\"255,164,116\"},\n                    {hex:\"9F8170\",rgb:\"159,129,112\"},\n                    {hex:\"CD9575\",rgb:\"205,149,117\"},\n                    {hex:\"EFCDB8\",rgb:\"239,205,184\"},\n                    {hex:\"D68A59\",rgb:\"214,138,89\"},\n                    {hex:\"DEAA88\",rgb:\"222,170,136\"},\n                    {hex:\"FAA76C\",rgb:\"250,167,108\"},\n                    {hex:\"FFCFAB\",rgb:\"255,207,171\"},\n                    {hex:\"FFBD88\",rgb:\"255,189,136\"},\n                    {hex:\"FDD9B5\",rgb:\"253,217,181\"},\n                    {hex:\"FFA343\",rgb:\"255,163,67\"},\n                    {hex:\"EFDBC5\",rgb:\"239,219,197\"},\n                    {hex:\"FFB653\",rgb:\"255,182,83\"},\n                    {hex:\"E7C697\",rgb:\"231,198,151\"},\n                    {hex:\"8A795D\",rgb:\"138,121,93\"},\n                    {hex:\"FAE7B5\",rgb:\"250,231,181\"},\n                    {hex:\"FFCF48\",rgb:\"255,207,72\"},\n                    {hex:\"FCD975\",rgb:\"252,217,117\"},\n                    {hex:\"FDDB6D\",rgb:\"253,219,109\"},\n                    {hex:\"FCE883\",rgb:\"252,232,131\"},\n                    {hex:\"F0E891\",rgb:\"240,232,145\"},\n                    {hex:\"ECEABE\",rgb:\"236,234,190\"},\n                    {hex:\"BAB86C\",rgb:\"186,184,108\"},\n                    {hex:\"FDFC74\",rgb:\"253,252,116\"},\n                    {hex:\"FFFF99\",rgb:\"255,255,153\"},\n                    {hex:\"C5E384\",rgb:\"197,227,132\"},\n                    {hex:\"B2EC5D\",rgb:\"178,236,93\"},\n                    {hex:\"87A96B\",rgb:\"135,169,107\"},\n                    {hex:\"A8E4A0\",rgb:\"168,228,160\"},\n                    {hex:\"1DF914\",rgb:\"29,249,20\"},\n                    {hex:\"76FF7A\",rgb:\"118,255,122\"},\n                    {hex:\"71BC78\",rgb:\"113,188,120\"},\n                    {hex:\"6DAE81\",rgb:\"109,174,129\"},\n                    {hex:\"9FE2BF\",rgb:\"159,226,191\"},\n                    {hex:\"1CAC78\",rgb:\"28,172,120\"},\n                    {hex:\"30BA8F\",rgb:\"48,186,143\"},\n                    {hex:\"45CEA2\",rgb:\"69,206,162\"},\n                    {hex:\"3BB08F\",rgb:\"59,176,143\"},\n                    {hex:\"1CD3A2\",rgb:\"28,211,162\"},\n                    {hex:\"17806D\",rgb:\"23,128,109\"},\n                    {hex:\"158078\",rgb:\"21,128,120\"},\n                    {hex:\"1FCECB\",rgb:\"31,206,203\"},\n                    {hex:\"78DBE2\",rgb:\"120,219,226\"},\n                    {hex:\"77DDE7\",rgb:\"119,221,231\"},\n                    {hex:\"80DAEB\",rgb:\"128,218,235\"},\n                    {hex:\"199EBD\",rgb:\"251,58,189\"},\n                    {hex:\"1CA9C9\",rgb:\"28,169,201\"},\n                    {hex:\"1DACD6\",rgb:\"291,72,214\"},\n                    {hex:\"9ACEEB\",rgb:\"154,206,235\"},\n                    {hex:\"1A4876\",rgb:\"26,72,118\"},\n                    {hex:\"1974D2\",rgb:\"25,116,210\"},\n                    {hex:\"2B6CC4\",rgb:\"43,108,196\"},\n                    {hex:\"1F75FE\",rgb:\"31,117,254\"},\n                    {hex:\"C5D0E6\",rgb:\"197,208,230\"},\n                    {hex:\"B0B7C6\",rgb:\"176,183,198\"},\n                    {hex:\"5D76CB\",rgb:\"93,118,203\"},\n                    {hex:\"A2ADD0\",rgb:\"162,173,208\"},\n                    {hex:\"979AAA\",rgb:\"151,154,170\"},\n                    {hex:\"ADADD6\",rgb:\"173,173,214\"},\n                    {hex:\"7366BD\",rgb:\"115,102,189\"},\n                    {hex:\"7442C8\",rgb:\"116,66,200\"},\n                    {hex:\"7851A9\",rgb:\"120,81,169\"},\n                    {hex:\"9D81BA\",rgb:\"157,129,186\"},\n                    {hex:\"926EAE\",rgb:\"146,110,174\"},\n                    {hex:\"CDA4DE\",rgb:\"205,164,222\"},\n                    {hex:\"8F509D\",rgb:\"143,80,157\"},\n                    {hex:\"C364C5\",rgb:\"195,100,197\"},\n                    {hex:\"FB7EFD\",rgb:\"251,126,253\"},\n                    {hex:\"FC74FD\",rgb:\"252,116,253\"},\n                    {hex:\"8E4585\",rgb:\"142,69,133\"},\n                    {hex:\"FF1DCE\",rgb:\"255,29,206\"},\n                    {hex:\"FF48D0\",rgb:\"255,72,208\"},\n                    {hex:\"E6A8D7\",rgb:\"230,168,215\"},\n                    {hex:\"C0448F\",rgb:\"192,68,143\"},\n                    {hex:\"6E5160\",rgb:\"110,81,96\"},\n                    {hex:\"DD4492\",rgb:\"221,68,146\"},\n                    {hex:\"FF43A4\",rgb:\"255,67,164\"},\n                    {hex:\"F664AF\",rgb:\"246,100,175\"},\n                    {hex:\"FCB4D5\",rgb:\"252,180,213\"},\n                    {hex:\"FFBCD9\",rgb:\"255,188,217\"},\n                    {hex:\"F75394\",rgb:\"247,83,148\"},\n                    {hex:\"FFAACC\",rgb:\"255,170,204\"},\n                    {hex:\"E3256B\",rgb:\"227,37,107\"},\n                    {hex:\"FDD7E4\",rgb:\"253,215,228\"},\n                    {hex:\"CA3767\",rgb:\"202,55,103\"},\n                    {hex:\"DE5D83\",rgb:\"222,93,131\"},\n                    {hex:\"FC89AC\",rgb:\"252,137,172\"},\n                    {hex:\"F780A1\",rgb:\"247,128,161\"},\n                    {hex:\"C8385A\",rgb:\"200,56,90\"},\n                    {hex:\"EE204D\",rgb:\"238,32,77\"},\n                    {hex:\"FF496C\",rgb:\"255,73,108\"},\n                    {hex:\"EF98AA\",rgb:\"239,152,170\"},\n                    {hex:\"FC6C85\",rgb:\"252,108,133\"},\n                    {hex:\"FC2847\",rgb:\"252,40,71\"},\n                    {hex:\"FF9BAA\",rgb:\"255,155,170\"},\n                    {hex:\"CB4154\",rgb:\"203,65,84\"},\n                    {hex:\"FFFFFF\",rgb:\"255,255,255\"},\n                    {hex:\"EDEDED\",rgb:\"237,237,237\"},\n                    {hex:\"DBD7D2\",rgb:\"219,215,210\"},\n                    {hex:\"CDC5C2\",rgb:\"205,197,194\"},\n                    {hex:\"95918C\",rgb:\"149,145,140\"},\n                    {hex:\"414A4C\",rgb:\"65,74,76\"},\n                    {hex:\"232323\",rgb:\"35,35,35\"},\n                    {hex:\"000000\",rgb:\"0,0,0\"}];\n\nreturn \"#\"+colours[i].hex;\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here function where you use the browser to calculate it for you</p>\n\n<pre><code>function getHexColor(colorStr) {\n    var a = document.createElement('div');\n    a.style.color = colorStr;\n    var colors = window.getComputedStyle( document.body.appendChild(a) ).color.match(/\\d+/g).map(function(a){ return parseInt(a,10); });\n    document.body.removeChild(a);\n    return (colors.length &gt;= 3) ? '#' + (((1 &lt;&lt; 24) + (colors[0] &lt;&lt; 16) + (colors[1] &lt;&lt; 8) + colors[2]).toString(16).substr(1)) : false;\n}\ngetHexColor('teal') // returns #008080\n</code></pre>\n\n<p><strong>Explanation by line:</strong></p>\n\n<ul>\n<li>Create html element</li>\n<li>Set the color</li>\n<li>Get the rgb-code form the element which is just appended to the body (so it is rendered), filter numbers and convert each number to an integer.</li>\n<li>Remove the html element we just created</li>\n<li>Return the HEX code using zyklus code (see credits for more info)</li>\n</ul>\n\n<p><em>credits to <a href=\"http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb#comment6408455_5623914\">zyklus</a> for his rgb to hex code</em></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The \"add an element to the DOM and check its ComputedStyle\" approach seems a little complex to me \u2014 you need to add it and check it and remember to remove it and you're changing the DOM just to compute a color and does it cause reflow? So here's a solution based on a temporary (and never rendered) <code>&lt;canvas&gt;</code>:</p>\n\n<pre><code>function colorToRGBA(color) {\n    // Returns the color as an array of [r, g, b, a] -- all range from 0 - 255\n    // color must be a valid canvas fillStyle. This will cover most anything\n    // you'd want to use.\n    // Examples:\n    // colorToRGBA('red')  # [255, 0, 0, 255]\n    // colorToRGBA('#f00') # [255, 0, 0, 255]\n    var cvs, ctx;\n    cvs = document.createElement('canvas');\n    cvs.height = 1;\n    cvs.width = 1;\n    ctx = cvs.getContext('2d');\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, 1, 1);\n    return ctx.getImageData(0, 0, 1, 1).data;\n}\n\nfunction byteToHex(num) {\n    // Turns a number (0-255) into a 2-character hex number (00-ff)\n    return ('0'+num.toString(16)).slice(-2);\n}\n\nfunction colorToHex(color) {\n    // Convert any CSS color to a hex representation\n    // Examples:\n    // colorToHex('red')            # '#ff0000'\n    // colorToHex('rgb(255, 0, 0)') # '#ff0000'\n    var rgba, hex;\n    rgba = colorToRGBA(color);\n    hex = [0,1,2].map(\n        function(idx) { return byteToHex(rgba[idx]); }\n        ).join('');\n    return \"#\"+hex;\n}\n</code></pre>\n\n<p>Note that this lets you use anything that's a valid canvas fillStyle, so if you want to gin up a 1 pixel pattern from an image, it'll tell you the color of that as well.</p>\n\n<p>Note that I haven't tested this in IE, but it's good in FFX/Chrome/Safari.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is there a built-in function that would convert a color by name into its hex representation?\nLike I want to pass 'white' and receive '#FFFFFF'. I really want to avoid coding all hundred if's myself :)</p>\n",
            "last_activity_date": 1403696712,
            "question_id": 1573053,
            "score": 29,
            "tags": [
                "javascript",
                "colors"
            ],
            "title": "Javascript function to convert color names to hex codes"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The <code>language</code> attribute has been deprecated. Both will work in pretty much all browsers, but the first better adheres to modern standards.</p>\n\n<p>As for omitting <code>type</code>, yes, it will still work, but in XHTML 1.0 and HTML 4.01 is considered invalid. Try <a href=\"http://validator.w3.org/\">validating</a> the following:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n&lt;script src=\"http://example.com/test.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body/&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You will be informed of the following error:</p>\n\n<blockquote>\n  <p>Line 4, Column 41: required attribute \"type\" not specified</p>\n</blockquote>\n\n<p>So if you're a fan of standards, use it. It should have no practical effect, but, when in doubt, may as well go by the spec.</p>\n",
                    "is_accepted": true,
                    "score": 80
                },
                {
                    "body": "<p>The <strong>type</strong> attribute is used to define the MIME type within the HTML document.  Depending on what DOCTYPE you use, the type value is required in order to validate the HTML document.</p>\n\n<p>The language attribute lets the browser know what language you are using (Javascript vs. VBScript) but is not necessarily essential and, IIRC, has been deprecated.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>HTML4/XHTML1 requires</p>\n\n<pre><code>&lt;script type=\"...\"&gt;...&lt;/script&gt;\n</code></pre>\n\n<p>HTML5 faces the fact that there is only one scripting language on the web, and allows</p>\n\n<pre><code>&lt;script&gt;...&lt;/script&gt;\n</code></pre>\n\n<p>The latter works in any browser that supports scripting (NN2+).</p>\n",
                    "is_accepted": false,
                    "score": 22
                }
            ],
            "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n    /* ... */\n&lt;/script&gt;\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>&lt;script language=\"Javascript\"&gt;\n    /* ... */\n&lt;/script&gt;\n</code></pre>\n\n<p>Which should be used and why?</p>\n\n<p><em>(edit)</em> Or, the third alternative: omitting either of these, such as the example code in jQuery's API reference:</p>\n\n<pre><code>&lt;script src=\"http://code.jquery.com/jquery-latest.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1363628509,
            "question_id": 2267476,
            "score": 86,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "HTML Script tag: type or language (or omit both)?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Since you're already using JS, you could create a hidden SELECT element on the page, and for each item you are trying to hide in that list, move it to the hidden list. This way, they can be easily restored.</p>\n\n<p>I don't know a way offhand of doing it in pure CSS... I would have thought that the display:none trick would have worked.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Simple answer: You can't. Form elements have very limited styling capabilities.</p>\n\n<p>The best alternative would be to set <code>disabled=true</code> on the option (and maybe a gray colour, since only IE does that automatically), and this will make the option unclickable.</p>\n\n<p>Alternatively, if you can, completely remove the <code>option</code> element.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Select inputs are tricky in this way. What about disabling it instead, this will work cross-browser:</p>\n\n<pre><code>$('select').children(':nth-child(even)').prop('disabled', true);\n</code></pre>\n\n<p>This will disable every-other <code>&lt;option&gt;</code> element, but you can select which ever one you want.</p>\n\n<p>Here is a demo: <a href=\"http://jsfiddle.net/jYWrH/\" rel=\"nofollow\">http://jsfiddle.net/jYWrH/</a></p>\n\n<p>Note: If you want to remove the disabled property of an element you can use <code>.removeProp('disabled')</code>.</p>\n\n<h2>Update</h2>\n\n<p>You could save the <code>&lt;option&gt;</code> elements you want to hide in hidden select element:</p>\n\n<pre><code>$('#visible').on('change', function () {\n    $(this).children().eq(this.selectedIndex).appendTo('#hidden');\n});\n</code></pre>\n\n<p>You can then add the <code>&lt;option&gt;</code> elements back to the original select element:</p>\n\n<pre><code>$('#hidden').children().appendTo('#visible');\n</code></pre>\n\n<p>In these two examples it's expected that the visible select element has the id of <code>visible</code> and the hidden select element has the id of <code>hidden</code>.</p>\n\n<p>Here is a demo: <a href=\"http://jsfiddle.net/jYWrH/1/\" rel=\"nofollow\">http://jsfiddle.net/jYWrH/1/</a></p>\n\n<p>Note that <code>.on()</code> is new in jQuery 1.7 and in the usage for this answer is the same as <code>.bind()</code>: <a href=\"http://api.jquery.com/on\" rel=\"nofollow\">http://api.jquery.com/on</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You should remove them from the <code>&lt;select&gt;</code> using JavaScript. That is the only guaranteed way to make them go away.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You have to implement two methods for hiding. <code>display: none</code> works for FF, but not Chrome or IE. So the second method is wrapping the <code>&lt;option&gt;</code> in a <code>&lt;span&gt;</code> with <code>display: none</code>. FF won't do it (technically invalid HTML, per the spec) but Chrome and IE will and it will hide the option.</p>\n\n<p>EDIT: Oh yeah, I already implemented this in jQuery:</p>\n\n<pre><code>jQuery.fn.toggleOption = function( show ) {\n    jQuery( this ).toggle( show );\n    if( show ) {\n        if( jQuery( this ).parent( 'span.toggleOption' ).length )\n            jQuery( this ).unwrap( );\n    } else {\n        if( jQuery( this ).parent( 'span.toggleOption' ).length == 0 )\n            jQuery( this ).wrap( '&lt;span class=\"toggleOption\" style=\"display: none;\" /&gt;' );\n    }\n};\n</code></pre>\n\n<p>EDIT 2: Here's how you would use this function:</p>\n\n<pre><code>jQuery(selector).toggleOption(true); // show option\njQuery(selector).toggleOption(false); // hide option\n</code></pre>\n\n<p>EDIT 3: Added extra check suggested by @user1521986</p>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>Ryan P's answer should be changed to:</p>\n\n<pre><code>    jQuery.fn.toggleOption = function (show) {\n        $(this).toggle(show);\n        if (show) {\n            if ($(this).parent('span.toggleOption').length)\n                $(this).unwrap();\n        } else {\n            **if ($(this).parent('span.toggleOption').length==0)**\n                $(this).wrap('&lt;span class=\"toggleOption\" style=\"display: none;\" /&gt;');\n        }\n    };\n</code></pre>\n\n<p>Otherwise it gets wrapped in too many  tags</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The toggleOption function is not perfect and introduced nasty bugs in my application. jQuery will get confused with .val() and .arraySerialize()\nTry to select options 4 and 5 to see what I mean:</p>\n\n<pre><code>&lt;select id=\"t\"&gt;\n&lt;option value=\"v1\"&gt;options 1&lt;/option&gt;\n&lt;option value=\"v2\"&gt;options 2&lt;/option&gt;\n&lt;option value=\"v3\" id=\"o3\"&gt;options 3&lt;/option&gt;\n&lt;option value=\"v4\"&gt;options 4&lt;/option&gt;\n&lt;option value=\"v5\"&gt;options 5&lt;/option&gt;\n&lt;/select&gt;\n&lt;script&gt;\njQuery.fn.toggleOption = function( show ) {\n    jQuery( this ).toggle( show );\n    if( show ) {\n        if( jQuery( this ).parent( 'span.toggleOption' ).length )\n            jQuery( this ).unwrap( );\n    } else {\n        jQuery( this ).wrap( '&lt;span class=\"toggleOption\" style=\"display: none;\" /&gt;' );\n    }\n};\n\n$(\"#o3\").toggleOption(false); \n$(\"#t\").change(function(e) {\n    if($(this).val() != this.value) {\n    console.log(\"Error values not equal\", this.value, $(this).val());\n    }\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>!!! WARNING !!!</p>\n\n<p>Replace the second \"IF\" by \"WHILE\" or doesn't work !</p>\n\n<pre><code>jQuery.fn.toggleOption = function( show ) {\n    jQuery( this ).toggle( show );\n    if( show ) {\n        while( jQuery( this ).parent( 'span.toggleOption' ).length )\n            jQuery( this ).unwrap( );\n    } else {\n        jQuery( this ).wrap( '&lt;span class=\"toggleOption\" style=\"display: none;\" /&gt;' );\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would suggest that you do <em>not</em> use the solutions that use a <code>&lt;span&gt;</code> wrapper because it isn't valid HTML, which could cause problems down the road. I think the preferred solution is to actually remove any options that you wish to hide, and restore them as needed. Using jQuery, you'll only need these 3 functions:</p>\n\n<p>The first function will save the original contents of the <em>select</em>. Just to be safe, you may want to call this function when you load the page.</p>\n\n<pre><code>function setOriginalSelect ($select) {\n    if ($select.data(\"originalHTML\") == undefined) {\n        $select.data(\"originalHTML\", $select.html());\n    } // If it's already there, don't re-set it\n}\n</code></pre>\n\n<p>This next function calls the above function to ensure that the original contents have been saved, and then simply removes the options from the DOM.</p>\n\n<pre><code>function removeOptions ($select, $options) {\n    setOriginalSelect($select);\n    $options.remove();\n }\n</code></pre>\n\n<p>The last function can be used whenever you want to \"reset\" back to all the original options.</p>\n\n<pre><code>function restoreOptions ($select) {\n    var ogHTML = $select.data(\"originalHTML\");\n    if (ogHTML != undefined) {\n        $select.html(ogHTML);\n    }\n}\n</code></pre>\n\n<p>Note that all these functions expect that you're passing in jQuery elements. For example: </p>\n\n<pre><code>// in your search function...\nvar $s = $('select.someClass');\nvar $optionsThatDontMatchYourSearch= $s.find('options.someOtherClass');\nrestoreOptions($s); // Make sure you're working with a full deck\nremoveOptions($s, $optionsThatDontMatchYourSearch); // remove options not needed\n</code></pre>\n\n<p>Here is a working example: <a href=\"http://jsfiddle.net/luken/9CYjy/\" rel=\"nofollow\">http://jsfiddle.net/luken/9CYjy/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>// Simplest way\n\nvar originalContent = $('select').html();\n\n$('select').change(function() {\n    $('select').html(originalContent); //Restore Original Content\n    $('select option[myfilter=1]').remove(); // Filter my options\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For HTML5, you can use the 'hidden' attribute.</p>\n\n<pre><code>&lt;option hidden&gt;Hidden option&lt;/option&gt;\n</code></pre>\n\n<p>It is <em>not</em> supported by IE &lt; 11. But if you need only to hide a few elements, maybe it would be better to just set the hidden attribute in combination with disabled in comparison to adding/removing elements or doing not semantically correct constructions.</p>\n\n<p><a href=\"http://www.w3schools.com/tags/att_global_hidden.asp\" rel=\"nofollow\">Reference</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>this one seems to work for me in chrome</p>\n\n<pre><code>$(\"#selectid span option\").unwrap();\n$(\"#selectid option:not([filterattr=filtervalue])\").wrap('&lt;span/&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've realized that Chrome, it seems, will not allow me to hide <code>&lt;option&gt;</code> in a <code>&lt;select&gt;</code>. Firefox will.</p>\n\n<p>I need to hide the <code>&lt;option&gt;</code>s that match a search criteria. In the Chrome web tools I can see that they are correctly being set to <code>display: none;</code> by my JavaScript, but once then <code>&lt;select&gt;</code> menu is clicked they are shown.</p>\n\n<p>How can I make these <code>&lt;option&gt;</code>s that match my search criteria NOT show when the menu is clicked? Thanks!</p>\n",
            "last_activity_date": 1425050886,
            "question_id": 9234830,
            "score": 29,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "dom"
            ],
            "title": "How to hide a &lt;option&gt; in a &lt;select&gt; menu with CSS?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>It is not possible to get the users computer name with Javascript. You can get all details about the browser and network. But not more than that.</p>\n\n<p>Like some one answered in one of the previous question today. </p>\n\n<p>I already did a favor of visiting your website, May be I will return or refer other friends.. I also told you where I am and what OS, Browser and screen resolution I use Why do you want to know the color of my underwear? ;-)</p>\n\n<p>You cannot do it using asp.net as well.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>No this data is not exposed. The only data that is available is what is exposed through the HTTP request which might include their OS and other such information. But certainly not machine name.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can do it with IE 'sometimes' as I have done this for an internal application on an intranet which is IE only.  Try the following:</p>\n\n<pre><code>function GetComputerName()\n{\n    try\n    {\n        var network = new ActiveXObject('WScript.Network');\n        // Show a pop up if it works\n        alert(network.computerName);\n    }\n    catch (e) { }\n}\n</code></pre>\n\n<p>It may or may not require some specific security setting setup in IE as well to allow the browser to access the ActiveX object.</p>\n\n<p>Here is a link to some more info on WScript: <a href=\"http://www.pctools.com/guides/scripting/id/3/?act=reference\">More Information</a></p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>Browser, Operating System, Screen Colors, Screen Resolution, Flash version, and Java Support should all be detectable from JavaScript (and maybe a few more).  However, computer name is not possible.</p>\n\n<p>EDIT: Not possible across all browser at least.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Well you could get the ip address using asp.net, then do a reverse DNS lookup on the ip to get the hostname.</p>\n\n<p>From the ASP.NET Developer's cookbook ... <a href=\"http://aspalliance.com/cookbook/ViewSource.aspx?Filename=Recipe2110cs.aspx&amp;RecipeType=ASPX\">Performing a Reverse-DNS Lookup</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>We did something like this for an inhouse bugtracking tool, it got taken out before we went live but i think it would work\nI think a coop student found it on the internet somewhere :)</p>\n\n<pre><code>using System;\nusing System.Management;\nusing System.Windows.Forms;\nnamespace ComputerInfo\n\n{\n/// &lt;summary&gt;\n/// Summary description for Class1.\n/// &lt;/summary&gt;\npublic class CPUInfo\n{\n    #region Properties\n    private String osVersion;\n    public String OSVersion\n    {\n        get { return this.osVersion; }\n    }\n\n    private String machineName;\n    public String MachineName\n    {\n        get { return this.OSVersion; }\n    }\n\n    private int width;\n    public int ScreenWidth\n    {\n        get { return this.width; }\n    }\n\n    private int height;\n    public int ScreenHeight\n    {\n        get { return this.height; }\n    }\n\n    private String userName;\n    public String UserName\n    {\n        get { return this.userName; }\n    }\n\n    private String clockSpeed;\n    public String ClockSpeed\n    {\n        get { return this.clockSpeed; }\n    }\n\n    private String procName;\n    public String ProcessorName\n    {\n        get { return this.procName; }\n    }\n\n    private String manufacturer;\n    public String ProcessorManufacturer\n    {\n        get { return this.manufacturer; }\n    }\n\n    private String version;\n    public String ProcessorVersion\n    {\n        get { return this.version; }\n    }\n\n    private double ram;\n    public double RAM\n    {\n        get { return this.ram; }\n    }\n\n    private bool usehtml;\n    public bool UseHTMLFormatting\n    {\n        get { return this.usehtml; }\n        set { usehtml = value; }\n    }\n    #endregion\n\n    public CPUInfo() : this(false)\n    {\n\n    }\n\n    public CPUInfo(bool use_html_formatting)\n    {\n        usehtml = use_html_formatting;\n        osVersion = System.Environment.OSVersion.ToString() ;\n        machineName = System.Environment.MachineName.ToString();\n        width = Screen.PrimaryScreen.Bounds.Width;\n        height = Screen.PrimaryScreen.Bounds.Height;\n        userName = \"\";\n        clockSpeed = \"\";\n        procName = \"\";\n        manufacturer = \"\";\n        version = \"\";\n        ram = 0.0d;\n        getMachineInfo();\n    }\n\n    private void getMachineInfo()\n    {\n        try\n        {\n            using(ManagementObjectSearcher win32Proc = new ManagementObjectSearcher(\"select * from Win32_Processor\"),\n                  win32CompSys = new ManagementObjectSearcher(\"select * from Win32_ComputerSystem\"),\n                  win32Memory = new ManagementObjectSearcher(\"select * from Win32_PhysicalMemory\"))\n            {\n                foreach (ManagementObject obj in win32Proc.Get())\n                {\n                    clockSpeed = obj[\"CurrentClockSpeed\"].ToString();\n                    procName = obj[\"Name\"].ToString();\n                    manufacturer = obj[\"Manufacturer\"].ToString();\n                    version = obj[\"Version\"].ToString();\n                }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>Erm is there any reason why you can't just use the HttpRequest? This would be on the server side but you could pass it to the javascript if you needed to?</p>\n\n<pre><code>Page.Request.UserHostName\n</code></pre>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/system.web.httprequest.userhostname.aspx\" rel=\"nofollow\">HttpRequest.UserHostName</a></p>\n\n<p>The one problem with this is it would only really work in an Intranet environment otherwise it would just end up picking up the users Router or Proxy address...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>Page.Request.UserHostName</code> is also \u201cgreat if you want info about the server\u201d                                 </p>\n\n<p>But why?  The name implies that it returns what we want.  And the <code>ServerVariables</code> equivalent is advertised on Microsoft sites as doing what we want, i.e., giving the host name of the remote.  Yet both are giving me the IP address (not the name) of the host running IIS.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try getting the client computer name in mozilla firfox by using the code given below.</p>\n\n<pre><code>netscape.security.PrivilegeManager.enablePrivilege( 'UniversalXPConnect' ); \n\nvar dnsComp = Components.classes[\"@mozilla.org/network/dns-service;1\"]; \nvar dnsSvc = dnsComp.getService(Components.interfaces.nsIDNSService);\nvar compName = dnsSvc.myHostName;\n</code></pre>\n\n<p>Also the same piece of code can be put as an extension and it can called from your web page.</p>\n\n<p>Please find the sample code below.</p>\n\n<p>Extension code:</p>\n\n<pre><code>var myExtension = {\n  myListener: function(evt) {\n\n//netscape.security.PrivilegeManager.enablePrivilege( 'UniversalXPConnect' ); \nvar dnsComp = Components.classes[\"@mozilla.org/network/dns-service;1\"]; \nvar dnsSvc = dnsComp.getService(Components.interfaces.nsIDNSService);\nvar compName = dnsSvc.myHostName;\ncontent.document.getElementById(\"compname\").value = compName ;    \n  }\n}\ndocument.addEventListener(\"MyExtensionEvent\", function(e) { myExtension.myListener(e); }, false, true); //this event will raised from the webpage\n</code></pre>\n\n<p>Webpage Code:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body onload = \"load()\"&gt;\n&lt;script&gt;\nfunction showcomp()\n{\nalert(\"your computer name is \" + document.getElementById(\"compname\").value);\n}\nfunction load()\n{ \n//var element = document.createElement(\"MyExtensionDataElement\");\n//element.setAttribute(\"attribute1\", \"foobar\");\n//element.setAttribute(\"attribute2\", \"hello world\");\n//document.documentElement.appendChild(element);\nvar evt = document.createEvent(\"Events\");\nevt.initEvent(\"MyExtensionEvent\", true, false);\n//element.dispatchEvent(evt);\ndocument.getElementById(\"compname\").dispatchEvent(evt); //this raises the MyExtensionEvent event , which assigns the client computer name to the hidden variable.\n}\n&lt;/script&gt;\n&lt;form name=\"login_form\" id=\"login_form\"&gt;\n&lt;input type = \"text\" name = \"txtname\" id = \"txtnamee\" tabindex = \"1\"/&gt;\n&lt;input type=\"hidden\" name=\"compname\" value=\"\" id = \"compname\" /&gt;\n&lt;input type = \"button\" onclick = \"showcomp()\" tabindex = \"2\"/&gt;\n\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I read the client's machine/computer name from the browser?<br>\nIs it possible using JavaScript and/or ASP.NET?</p>\n",
            "last_activity_date": 1403245316,
            "question_id": 922476,
            "score": 13,
            "tags": [
                "javascript",
                "asp.net",
                "computer-name"
            ],
            "title": "How can I read the client&#39;s machine/computer name from the browser?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Technically, this question is opinion, but it's a good question.</p>\n\n<p><a href=\"http://www.west-wind.com/weblog/posts/2009/Mar/22/Internet-Explorer-Global-Variable-Blow-ups\" rel=\"nofollow\">IE does this as well and it has caused headaches for some.</a></p>\n\n<p>The rules for naming <a href=\"http://stackoverflow.com/questions/1661197/valid-characters-for-javascript-variable-names\">variables in JavaScript</a> and <a href=\"http://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\">IDs in HTML</a> are different. I can't see how this is a good thing.</p>\n\n<p>For instance, on this page there is an element with an ID of \"notify-container\". That's not a valid JavaScript name at all. </p>\n\n<p>Also, when are these names bound? If an inline script declares a variable and then the element appears later, which has precedence?</p>\n\n<p>It's cannot be made consistent.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Since very early days, IE has created global variables that reference elements by their name or id attribute value. This was never a good idea, but was copied by other browsers in order to be compatible with sites created for IE.</p>\n\n<p>It is a bad idea and should not be copied or used.</p>\n\n<h3>Edit</h3>\n\n<p>To answer your extra questions:</p>\n\n<blockquote>\n  <p>...how will Chrome resolve the\n  ambiguity if i have a div with id a\n  yet have a global variable called a\n  too in my script.</p>\n</blockquote>\n\n<p>In IE (which introduced this behaviour) if a global variable is declared with the same name as an element id or name, it will take presidence. However, undeclared globals don't work that way. It shoudn't take much to test that in Chrome (I have but I'm not going to give you the answer).</p>\n\n<blockquote>\n  <p>And how would an element with id\n  consisting of hyphens (\"-\"), colons\n  (\":\"), and periods (\".\") be translated\n  (ok i know they can be accessed with\n  document.getElementById but how will\n  the browser translate it into the\n  global variable that was representing\n  them)</p>\n</blockquote>\n\n<p>Exactly the same as any object property name that is not a valid identifier - square bracket notation (i.e. window['name-or-id']).</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I think document.getElementById is supported by most browsers so far.. Its better and safe using this one..</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It depends on which spec you read. :)</p>\n\n<p>This behavior is not described by the HTML4 specification (c.f., <a href=\"http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-id\">http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-id</a> and <a href=\"http://www.w3.org/TR/1999/REC-html401-19991224/types.html#type-name\">http://www.w3.org/TR/1999/REC-html401-19991224/types.html#type-name</a>). However, it was introduced by Internet Explorer and then copied in other major browsers for compatibility. FireFox also displays this behavior, but only in <a href=\"https://developer.mozilla.org/en/Mozilla%27s_Quirks_Mode\">quirks mode</a> (and even then its implementation seems buggy).</p>\n\n<p>The WHATWG HTML spec currently <a href=\"http://www.whatwg.org/specs/web-apps/current-work/#dom-window-nameditem\">requires</a> this behavior but there is an <a href=\"http://www.w3.org/Bugs/Public/show_bug.cgi?id=11960\">open bug</a> requesting that it be removed.</p>\n\n<p>Regardless of spec compliance, using the global namespace (i.e., <code>window</code>) for application code is generally considered bad behavior. Consider referencing element IDs using <code>document.getElementById()</code> or jQuery convenience methods (e.g., <code>$(\"#a\")</code>) and using function-scoped variables to avoid introducing new variables into the global namespace.</p>\n\n<p>There is a longer discussion of this behavior on the <a href=\"http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2011-April/031109.html\">WHATWG mailing list</a>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>If I have a <code>&lt;div id='a'&gt;</code> in Chrome then in javascript I can do <code>a.<em>stuff()</em></code> (it's like as if <code>a</code> is a global variable).</p>\n\n<p>However this does not work with FireFox - I will need to use <code>document.getElementById('a')</code>.</p>\n\n<p>What is the <strong>correct behaviour</strong> here? (according to W3 specs that is)</p>\n\n<p>Also I'm interested in how will Chrome resolve the ambiguity if I have a div with id <code>a</code> yet have a global variable called <code>a</code> too in my script. Is the behavior going to be random and whacky?</p>\n\n<p>And how would an element with id consisting of hyphens (\"-\"), colons (\":\"), and periods (\".\") be translated (ok i know they can be accessed with <code>document.getElementById</code> but how will the browser translate it into the global variable that was representing them)</p>\n",
            "last_activity_date": 1409584908,
            "question_id": 6381425,
            "score": 16,
            "tags": [
                "javascript",
                "html",
                "dom",
                "global-variables",
                "identifier"
            ],
            "title": "Is there a spec that the id of elements should be made global variable?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>A switch statement, as your code is only if-elses :-)</p>\n\n<p>No, honestly. The best thing would be if you'd find a simple algorithm to create an email address from any given name, like</p>\n\n<pre><code>function mail(name) {\n    return name.toLowerCase() + \"@gmail.com\";\n}\nvar email = mail(\"Bob\") // example usage\n</code></pre>\n\n<p>If they differ to much, you might use an object as a key-value-map:</p>\n\n<pre><code>var mails = {\n    \"Steve\": \"steve@gmail.com\",\n    \"Bob\": \"bob1@freemail.org\",\n    ...\n}\nvar email = mails[name];\n</code></pre>\n\n<p>You could also combine those, if you have to determine which algorithm you need to use:</p>\n\n<pre><code>var map = [{\n    algorithm: function(name) { return name+\"@something\"; },\n    names: [\"Steve\", \"Bob\", ...]\n},{\n    algorithm: function(name) { return \"info@\"+name+\".org\"; },\n    names: [\"Mark\", ...]\n}];\nfor (var i=0; i&lt;map.length; i++)\n    if (map[i].names.indexOf(name) &gt; -1) {\n        var email = map[i].algorithm(name);\n        break;\n    }\n</code></pre>\n\n<p>or when it is a bit simpler:</p>\n\n<pre><code>var domains = {\n    \"gmail.com\": [\"Steve\", \"Bob\", ...],\n    \"free.xxx\": [\"Mark\", ...],\n    ...\n};\nfor (var domain in domains)\n    if (domains[domain].indexOf(name) &gt; -1)\n        var email = name.toLowerCase()+\"@\"+domain;\n        break;\n    }\n</code></pre>\n\n<p>Just try to reduce the amount of data to deliver to the client as much as you can.</p>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>You can store all the email address in an associative array like</p>\n\n<p>pseudo code</p>\n\n<pre><code>var emailsList = [\"steve\" =&gt; \"steve@gmail.com\", \"bob\" =&gt; \"bob@gmail.com\"];\nthen email = emailsList[name]; will solve your problem\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You could create an object in advance:</p>\n\n<pre><code>var name_email_map = {\n \"Steve\": \"steve@gmail.com\",\n \"Bob\": \"bob@gmail.com\",\n \"John\": \"j7hogli123123@telus.net\"\n}\n</code></pre>\n\n<p>This would be easy to output from some server side language with a JSON library for whatever language you're using. There is a list of JSON libraries at the bottom of this page: <a href=\"http://www.json.org/\" rel=\"nofollow\">http://www.json.org/</a></p>\n\n<p>If you're using PHP on the server side you can just json_encode an associative array, which you may have selected from a database.</p>\n\n<pre><code>var name = 'Bob'; //x.innerHTML;\nvar email = name_email_map[name];\nalert(email); // Alerts bob@gmail.com\nalert(name_email_map['John']); // Alerts j7hogli123123@telus.net\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Using JavaScript I am pulling names out of webpage and stringing them together somehow (probably going with an array). Once I gather all the names together I need to make another string that gives all the email addresses of the names. The email addresses are not on the webpage so I will have to list every possible thisName=thisEmail in my script somehow. I was about to approach this with making a bazillion if statements but I thought there has to be a more efficient way. Any suggestions?</p>\n\n<pre><code>var x = getElementById(\"names\");\nvar name = x.InnerHTML;\nvar email;\nif (name == 'Steve'){ email == 'steve462@gmail.com'; }\nif (name == 'Bob'){ email == 'duckhunter89@gmail.com'; }\n....\n</code></pre>\n",
            "last_activity_date": 1333632128,
            "question_id": 10029089,
            "score": 6,
            "tags": [
                "javascript",
                "if-statement"
            ],
            "title": "Alternative to a million IF statements"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Use <code>.toPrecision</code>, <code>.toFixed</code>, etc. You can count the number of digits in your number by converting it to a string with  <code>.toString</code> then looking at its <code>.length</code>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There's <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Number/toFixed\">Number.toFixed</a>, but it uses scientific notation if the number is >= 1e21 and has a maximum precision of 20. Other than that, you can roll your own, but it will be messy.</p>\n\n<pre><code>function toFixed(x) {\n  if (Math.abs(x) &lt; 1.0) {\n    var e = parseInt(x.toString().split('e-')[1]);\n    if (e) {\n        x *= Math.pow(10,e-1);\n        x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n    }\n  } else {\n    var e = parseInt(x.toString().split('+')[1]);\n    if (e &gt; 20) {\n        e -= 20;\n        x /= Math.pow(10,e);\n        x += (new Array(e+1)).join('0');\n    }\n  }\n  return x;\n}\n</code></pre>\n\n<p>Above uses cheap-'n'-easy string repetition (<code>(new Array(n+1)).join(str)</code>). You could define <code>String.prototype.repeat</code> using Russian Peasant Multiplication and use that instead.</p>\n\n<p>Alternatively, you could use a <a href=\"http://www.leemon.com/crypto/BigInt.html\">BigInt</a> library.</p>\n",
                    "is_accepted": true,
                    "score": 33
                },
                {
                    "body": "<p>I had the same issue with oracle returning scientic notation, but I needed the actual number for a url.  I just used a PHP trick by subtracting zero, and I get the correct number.</p>\n\n<p>for example 5.4987E7 is the val.</p>\n\n<pre><code>newval = val - 0;\n</code></pre>\n\n<p>newval now equals 54987000</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>You can loop over the number and achieve the rounding</p>\n\n<blockquote>\n  <p>// functionality to replace char at given index</p>\n</blockquote>\n\n<pre><code>String.prototype.replaceAt=function(index, character) {\n    return this.substr(0, index) + character + this.substr(index+character.length);\n}\n</code></pre>\n\n<blockquote>\n  <p>// looping over the number starts</p>\n</blockquote>\n\n<pre><code>var str = \"123456789123456799.55\";\nvar arr = str.split('.');\nstr = arr[0];\ni = (str.length-1);\nif(arr[1].length &amp;&amp; Math.round(arr[1]/100)){\n  while(i&gt;0){\n    var intVal = parseInt(str.charAt(i));\n\n   if(intVal == 9){\n      str = str.replaceAt(i,'0');\n      console.log(1,str)\n   }else{\n      str = str.replaceAt(i,(intVal+1).toString()); \n      console.log(2,i,(intVal+1).toString(),str)\n      break;\n   }\n   i--;\n }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is what I ended up using to take the value from an input, expanding numbers less than 17digits and converting Exponential numbers to x10<sup>y</sup></p>\n\n<pre><code>// e.g.\n//  niceNumber(\"1.24e+4\")   becomes \n// 1.24x10 to the power of 4 [displayed in Superscript]\n\nfunction niceNumber(num) {\n  try{\n        var sOut = num.toString();\n      if ( sOut.length &gt;=17 || sOut.indexOf(\"e\") &gt; 0){\n      sOut=parseFloat(num).toPrecision(5)+\"\";\n      sOut = sOut.replace(\"e\",\"x10&lt;sup&gt;\")+\"&lt;/sup&gt;\";\n      }\n      return sOut;\n\n  }\n  catch ( e) {\n      return num;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Javascript converts a large INT to scientific notation when the number becomes large. \nHow can I prevent this from happening?</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1414679612,
            "question_id": 1685680,
            "score": 26,
            "tags": [
                "javascript"
            ],
            "title": "How to avoid scientific notation for large numbers in javascript?"
        },
        {
            "answer_count": 0,
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/9310112/why-am-i-seeing-an-origin-is-not-allowed-by-access-control-allow-origin-error\">Why am I seeing an \u201corigin is not allowed by Access-Control-Allow-Origin\u201d error here?</a>  </p>\n</blockquote>\n\n\n\n<p>I am facing problem with my code\ncan anyone tell me whats wrong with this\n<strong>Origin <a href=\"http://localhost:8080\" rel=\"nofollow\">http://localhost:8080</a> is not allowed by Access-Control-Allow-Origin</strong></p>\n\n<pre><code>var http = new getXMLHttpRequestObject();\nvar url = \"http://gdata.youtube.com/action/GetUploadToken\";\nvar sendXML = '&lt;?xml version=\"1.0\"?&gt;&lt;entry xmlns=\"http://www.w3.org/2005/Atom\"'+\n    'xmlns:media=\"http://search.yahoo.com/mrss/'+\n    'xmlns:yt=\"http://gdata.youtube.com/schemas/2007\"&gt;'+\n    '&lt;media:group&gt;&lt;media:title type=\"plain\"&gt;My First API&lt;/media:title&gt;'+\n    '&lt;media:description type=\"plain\"&gt;First API&lt;/media:description&gt;'+\n    '&lt;media:category scheme=\"http://gdata.youtube.com/schemas/2007/categories.cat\"&gt;People&lt;/media:category&gt;'+\n    '&lt;media:keywords&gt;first, api&lt;/media:keywords&gt;&lt;/media:group&gt;&lt;/entry&gt;';\nhttp.open(\"POST\", url, true);\nhttp.setRequestHeader(\"Authorization\", \"AuthSub token=\" + AccessToken);\nhttp.setRequestHeader(\"X-GData-Key\", \"key=\"+ dev_key);\nhttp.setRequestHeader(\"Content-Type\", \"application/atom+xml; charset=UTF-8\");\n\nhttp.onreadystatechange = function() {\n    if(http.readyState == 4) {\n        alert(http.responseXML);\n    }\n}\nhttp.send(sendXML);\n</code></pre>\n",
            "last_activity_date": 1357741620,
            "question_id": 9327218,
            "score": 20,
            "tags": [
                "javascript",
                "xmlhttprequest",
                "cors"
            ],
            "title": "Access Control Allow Origin not allowed by"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>There is an issue with the <a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerwithlabel/src/\">MarkerWithLabel library</a>.  <a href=\"https://code.google.com/p/gmaps-api-issues/issues/detail?id=6447\">Issue</a>.</p>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>MarkerWithLabel v1.1.10 stopped working for me recently after Google Maps Api's experimental version became v3.18.  I had Maps API set to \"...maps/api/js?v3&amp;...\" which by default picks latest experimental version (currently v3.18).  By fixing the version to v3.17 MarkerWithLabel worked fine.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a very strange issue that seems to have appeared only recently.  I haven't done any major code changes to the project in a while and none to the function in question in a long while.</p>\n\n<p>So the problem, when I add more than one icon to Google Map using API, the icons are appearig on top of each other.</p>\n\n<p><img src=\"http://i.stack.imgur.com/9gNM8.png\" alt=\"Google Screen Capture from project web site\"></p>\n\n<p>The strange thing is the labels are all correctly located but those use the same coordinates as the icons.</p>\n\n<p>Here is the string that is passed to the function</p>\n\n<pre><code>1344, 52.65665917, -2.49004717, '../Images/Icons/Direction/container_blueN.ico', 'Galahad', '2014 Mar 05 Wednesday, 14:00', 'Wellington Road, Horsehay, Hollybank', 'RESERVED', '0 KPH', 0\n</code></pre>\n\n<p>The function is </p>\n\n<pre><code>function AddClusterLocation(FID, latitude, longitude, Icon, ID, DateStamp, Location, Event, Speed, IgnitionStatus) {\nif (objMap) {\n\n    var cssName = 'MarkerIgnitionOff';\n\n    switch (IgnitionStatus) {\n        case '1':\n            cssName = 'MarkerIgnitionOn';\n            break;\n        default:\n            cssName = 'MarkerIgnitionOff';\n    }\n\n    var adjustedIcon = new google.maps.MarkerImage(\n        Icon,\n        new google.maps.Size(32, 32),\n        new google.maps.Point(0, 0),\n        new google.maps.Point(16, 16)\n        );\n\n    var objMarker = new MarkerWithLabel({\n        position: new google.maps.LatLng(latitude, longitude),\n        draggable: false,\n        raiseOnDrag: false,\n        icon: adjustedIcon,\n        map: objMap,\n        labelContent: '&amp;nbsp;&amp;nbsp;' + ID + '&amp;nbsp;&amp;nbsp;',\n        labelAnchor: new google.maps.Point(-8, -8),\n        labelClass: cssName, // the CSS class for the label\n        labelStyle: { opacity: 1.0 }\n    });\n\n\n    // Add Maker to array\n    objMakersArray.push(objMarker);\n\n    // Wrap the event listener inside an anonymous function\n    // then we immediately invoke and passes the variables to\n    (function (ID, DateStamp, Location, Event, Speed, Icon) {\n        google.maps.event.addListener(objMarker, 'click', function () {\n            if (!objInfoWindows) {\n                objInfoWindows = new google.maps.InfoWindow();\n            }\n\n            // Create Paragraph\n            var para1 = document.createElement('p');\n            var adiv = document.createElement('div');\n            adiv.style.cssText = 'width: 300px; font-family: \"Lucida Grande\", Helvetica, Arial, sans-serif; font-size: 10pt; color: #000000;';\n\n            // var htmlstring = '&lt;div style=\"width: 300px; font-family: \"Lucida Grande\", Helvetica, Arial, sans-serif; font-size: 6pt; color: #FF0000;\"&gt;'\n            var htmlstring = '&lt;table&gt;' // style=\"width: 300px; font-family: \"Lucida Grande\", Helvetica, Arial, sans-serif; font-size: 6pt; color: #FF0000;\"&gt;'\n            htmlstring = htmlstring + '&lt;tr&gt;&lt;td style=\"width: 100px;\"&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/td&gt;&lt;td style=\"width: 200px;\"&gt;' + ID + '&lt;/td&gt;&lt;/tr&gt;';\n            htmlstring = htmlstring + '&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Date/Time&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;' + DateStamp + '&lt;/td&gt;&lt;/tr&gt;';\n            htmlstring = htmlstring + '&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Location&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;' + Location + '&lt;/td&gt;&lt;/tr&gt;';\n            htmlstring = htmlstring + '&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Event&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;' + Event + '&lt;/td&gt;&lt;/tr&gt;';\n            htmlstring = htmlstring + '&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;' + Speed + '&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;'\n            // htmlstring = htmlstring + '&lt;/div&gt;';\n\n            adiv.innerHTML = htmlstring;\n\n            // para1.innerHTML = htmlstring;\n            para1.appendChild(adiv);\n\n            // Zoom In DIV\n            var aDiv = document.createElement('div');\n            aDiv.style.width = \"100px\";\n            aDiv.style.float = 'left';\n\n            // Zoom In\n            var alink = document.createElement('a');\n            alink.innerHTML = 'Zoom In';\n            alink.href = '#';\n            alink.onclick = function () {\n                objMap.setCenter(objMarker.getPosition());\n                zoomLevel = objMap.getZoom();\n                if (zoomLevel != 21) {\n                    objMap.setZoom(zoomLevel + 1);\n                }\n                return false;\n            };\n\n            aDiv.appendChild(alink);\n\n            // Zoom OUT DIV\n            var bDiv = document.createElement('div');\n            bDiv.style.width = '100px';\n            bDiv.style.float = 'left';\n\n            // Zoom In\n            var blink = document.createElement('a');\n            blink.innerHTML = 'Zoom Out';\n            blink.href = '#';\n            blink.onclick = function () {\n                objMap.setCenter(objMarker.getPosition());\n                zoomLevel = objMap.getZoom();\n                if (zoomLevel != 0) {\n                    objMap.setZoom(zoomLevel - 1);\n                }\n                return false;\n            };\n\n            bDiv.appendChild(blink);\n\n            // Add Favourite Div\n            var cDiv = document.createElement('div');\n            cDiv.style.float = 'right';\n            cDiv.style.width = '150px';\n\n            // Add Favourite\n            var clink = document.createElement('a');\n            clink.innerHTML = 'Add to Favourite';\n            clink.href = '#';\n            clink.onclick = function () {\n                position = objMarker.getPosition();\n                Pane = window.parent.ASPxSplitterDefault.GetPaneByName('PaneDisplay');\n                if (Pane) {\n                    Pane.SetContentUrl('../Pages/FavouritePage.aspx?latitude=' + position.lat() + '&amp;longitude=' + position.lng(), true);\n                }\n                return false;\n            };\n            cDiv.appendChild(clink);\n\n            var para2 = document.createElement('p');\n            para2.appendChild(aDiv);\n            para2.appendChild(bDiv);\n            para2.appendChild(cDiv);\n\n            // Create Master Div to hold everything\n            var masterDiv = document.createElement('div');\n\n            // Get name of DIV that has Atlas\n            var objDiv = objMap.getDiv();\n            var divName = objDiv.id;\n\n            // Bind to mapping Div\n            document.getElementById(divName).appendChild(masterDiv);\n\n            // Info Div\n            var infoDiv = document.createElement('div');\n            infoDiv.style.float = 'left';\n            infoDiv.style.width = '350px';\n            infoDiv.appendChild(para1);\n            infoDiv.appendChild(para2);\n            masterDiv.appendChild(infoDiv);\n\n            // Creating the div that will contain the detail map\n            var detailDiv = document.createElement('div');\n            infoDiv.style.float = 'right';\n            detailDiv.style.width = '200px';\n            detailDiv.style.height = '200px';\n            masterDiv.appendChild(detailDiv)\n\n            // Setting up small map\n\n            // Creating MapOptions for the overview map\n            var overviewOpts = {\n                zoom: 14,\n                icon: adjustedIcon,\n                center: objMarker.getPosition(),\n                mapTypeId: google.maps.MapTypeId.HYBRID,\n                disableDefaultUI: true\n            };\n\n            var objdetailMap = new google.maps.Map(detailDiv, overviewOpts);\n\n            // Create a marker that will show in the detail map\n            var objdetailMarker = new google.maps.Marker({\n                position: objMarker.getPosition(),\n                map: objdetailMap,\n                icon: adjustedIcon,\n                clickable: false\n            });\n\n            // Setting the content of the InfoWindow\n            objInfoWindows.setContent(masterDiv);\n\n            // Tying the InfoWindow to the marker\n            objInfoWindows.open(objMap, objMarker);\n\n        });\n    })(ID, DateStamp, Location, Event, Speed, Icon);\n    objMarker = null;\n}\n</code></pre>\n\n<p>}</p>\n\n<p>The function that would call this would be</p>\n\n<pre><code>        function OnCurrentPosition(arg) {\n        if (arg == null) {\n            parent.location = '../Security/Login.aspx';\n        }\n\n        if (arg) {\n            var latitude, longitude\n            var arrayList = arg.split(\";\");\n            alert(arg);\n            for (i = 0; i &lt; arrayList.length; i++) {\n                if (arrayList[i].length) {\n                    var arrLocation = arrayList[i].split(\"$\")\n                    AddClusterLocation(arrLocation[0], arrLocation[1], arrLocation[2], arrLocation[3], arrLocation[4], arrLocation[5], arrLocation[6], arrLocation[7], arrLocation[8], arrLocation[9]);\n                    SetBounds(arrLocation[1], arrLocation[2]);\n                    latitude = arrLocation[1];\n                    longitude = arrLocation[2];\n                }\n            }\n            CreateClusterer();\n\n            if (flgLockMapToBounds == false) {\n                if (objMakersArray.length == 1) {\n                    SetMapCentre(latitude, longitude, 14);\n                }\n                else {\n                    ZoomToExtend();\n                }\n            }\n        }\n    }\n\narg = 1344$52.65665917$-2.49004717$../Images/Icons/Direction/container_blueN.ico$Galahad$2014 Mar 05 Wednesday, 14:00$Wellington Road, Horsehay, Hollybank$RESERVED$0 KPH$0$0.00000000$0.00000000$0;1342$52.65582367$-2.48958417$../Images/Icons/Direction/container_yellowN.ico$Gwinevere$2014 Mar 05 Wednesday, 14:00$Woodlands Lane, Horsehay, Coalbrookdale$RESERVED$0 KPH$0$0.00000000$0.00000000$0;\n</code></pre>\n\n<p>I'm really at a lost to explain this as the labels are correct, I've checked the latitude and longitude and its different each time the function is called.  Plus this was working, only spotted by customer yesterday that it wasn't.</p>\n\n<p>Here's the API that I use</p>\n\n<pre><code>&lt;script src=\"http://maps.google.com/maps/api/js?sensor=false\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Thank you for reading the question, hopefully you be able to help!\nJim</p>\n",
            "last_activity_date": 1417543180,
            "question_id": 22202569,
            "score": 4,
            "tags": [
                "javascript",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "Google Map API - multiple icons in wrong spot"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>This technique (to detect same users without cookies - or even without ip address) is called <strong>browser fingerprinting</strong>. Basically you crawl as information about the browser as you can - better results can be achieved with javascript, flash or java (f.ex. installed extensions, fonts, etc.). After that, you can store the results hashed, if you want.</p>\n\n<p>It's not infallible, but:</p>\n\n<blockquote>\n  <p>83.6% of the browsers seen had a unique fingerprint; among those with Flash or Java enabled, 94.2%. This does not include cookies!</p>\n</blockquote>\n\n<p>More info:</p>\n\n<ul>\n<li><a href=\"https://panopticlick.eff.org/\">https://panopticlick.eff.org/</a></li>\n<li><a href=\"https://wiki.mozilla.org/Fingerprinting\">https://wiki.mozilla.org/Fingerprinting</a></li>\n<li><a href=\"https://www.browserleaks.com/\">https://www.browserleaks.com/</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p><strong>Introduction</strong></p>\n\n<p>If I understand you correctly, you need to identify a user for whom you don't have a Unique Identifier, so you want to figure out who they are by matching Random Data. You can't store the user's identity reliably because:</p>\n\n<ul>\n<li>Cookies Can be deleted</li>\n<li>IP address Can change</li>\n<li>Browser Can Change</li>\n<li>Browser Cache may be deleted </li>\n</ul>\n\n<p>A Java Applet or Com Object would have been an easy solution using a hash of hardware information, but these days people are so security-aware that it would be difficult to get people to install these kinds of programs on their system. This leaves you stuck with using Cookies and other, similar tools.</p>\n\n<p><strong>Cookies and other, similar tools</strong></p>\n\n<p>You might consider building a Data Profile, then using Probability tests to identify a <em>Probable User</em>. A profile useful for this can be generated by some combination of the following:</p>\n\n<ol>\n<li>IP Address\n<ul>\n<li>Real IP Address</li>\n<li>Proxy IP Address (users often use the same proxy repeatedly)</li>\n</ul></li>\n<li>Cookies\n<ul>\n<li>HTTP Cookies</li>\n<li>Session Cookies</li>\n<li>3rd Party Cookies</li>\n<li>Flash Cookies (<a href=\"http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager07.html\">most people don't know how to delete these</a>)</li>\n</ul></li>\n<li>Web Bugs (less reliable because bugs get fixed, but still useful)\n<ul>\n<li>PDF Bug</li>\n<li>Flash Bug</li>\n<li>Java Bug</li>\n</ul></li>\n<li>Browsers\n<ul>\n<li>Click Tracking (many users visit the same series of pages on each visit)</li>\n<li>Browsers Finger Print\n\u00a0 - Installed Plugins (people often have varied, somewhat unique sets of plugins) </li>\n<li>Cached Images (people sometimes delete their cookies but leave cached images)</li>\n<li>Using Blobs</li>\n<li>URL(s) (browser history or cookies may contain unique user id's in URLs, such as <a href=\"http://stackoverflow.com/users/1226894\">http://stackoverflow.com/users/1226894</a> or <a href=\"http://www.facebook.com/barackobama?fref=ts\">http://www.facebook.com/barackobama?fref=ts</a>)</li>\n<li><a href=\"https://www.browserleaks.com/fonts\">System Fonts Detection</a> (this is a little-known but often unique key signature) </li>\n</ul></li>\n<li>HTML5 &amp; Javascript\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/Storage\">HTML5 LocalStorage</a></li>\n<li>HTML5 Geolocation API and Reverse Geocoding</li>\n<li>Architecture, OS Language, System Time, Screen Resolution, etc.</li>\n<li>Network Information API</li>\n<li>Battery Status API</li>\n</ul></li>\n</ol>\n\n<p>The items I listed are, of course, just a few possible ways a user can be identified uniquely. There are many more.</p>\n\n<p><strong>With this set of Random Data elements to build a Data Profile from, what's next?</strong></p>\n\n<p>The next step is to develop some <a href=\"http://en.wikipedia.org/wiki/Fuzzy_logic\">Fuzzy Logic</a>, or, better yet, an <a href=\"http://en.wikipedia.org/wiki/Artificial_neural_network\">Artificial Neural Network</a> (which uses fuzzy logic). In either case, the idea is to train your system, and then combine its training with <a href=\"http://en.wikipedia.org/wiki/Bayesian_inference\">Bayesian Inference</a> to increase the accuracy of your results.</p>\n\n<p><img src=\"http://i.stack.imgur.com/c79lN.png\" alt=\"Artificial Neural Network\"></p>\n\n<p>The <a href=\"http://sourceforge.net/projects/neuralmesh/\">NeuralMesh</a> library for PHP allows you to generate Artificial Neural Networks. To implement Bayesian Inference, check out the following links:</p>\n\n<ul>\n<li><a href=\"http://www.ibm.com/developerworks/opensource/library/wa-bayes1/\">Implement Bayesian inference using PHP, Part 1</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/web/library/wa-bayes2/\">Implement Bayesian inference using PHP, Part 2</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/web/library/wa-bayes3/\">Implement Bayesian inference using PHP, Part 3</a></li>\n</ul>\n\n<p>At this point, you may be thinking:</p>\n\n<p><strong>Why so much Math and Logic for a seemingly simple task?</strong></p>\n\n<p>Basically, because it is <em>not a simple task</em>. What you are trying to achieve is, in fact, <em>Pure Probability</em>. For example, given the following known users:</p>\n\n<pre><code>User1 = A + B + C + D + G + K\nUser2 = C + D + I + J + K + F\n</code></pre>\n\n<p>When you receive the following data:</p>\n\n<pre><code>B + C + E + G + F + K\n</code></pre>\n\n<p>The question which you are essentially asking is:</p>\n\n<p>What is the probability that the received data (B + C + E + G + F + K) is actually User1 or User2? And which of those two matches is <em>most</em> probable?</p>\n\n<p>In order to effectively answer this question, you need to understand <a href=\"http://www.ibm.com/developerworks/opensource/library/wa-bayes1/#4\">Frequency vs Probability Format</a> and why <a href=\"http://www.ibm.com/developerworks/opensource/library/wa-bayes1/#5\">Joint Probability</a> might be a better approach. The details are too much to get into here (which is why I'm giving you links), but a good example would be a <a href=\"http://www.ibm.com/developerworks/opensource/library/wa-bayes1/#8\">Medical Diagnosis Wizard Application</a>, which uses a combination of symptoms to identify possible diseases.</p>\n\n<p>Think for a moment of the series of data points which comprise your Data Profile (B + C + E + G + F + K in the example above) as <em>Symptoms</em>, and Unknown Users as <em>Diseases</em>. By identifying the disease, you can further identify an appropriate treatment (treat this user as User1).</p>\n\n<p>Obviously, a <em>Disease</em> for which we have identified more than 1 <em>Symptom</em> is easier to identify. In fact, the more <em>Symptoms</em> we can identify, the easier and more accurate our diagnosis is almost certain to be.</p>\n\n<p><strong>Are there any other alternatives?</strong></p>\n\n<p>Of course. As an alternative measure, you might create your own simple scoring algorithm, and base it on exact matches. This is not as efficient as probability, but may be simpler for you to implement.</p>\n\n<p>As an example, consider this simple score chart:</p>\n\n<pre>\n+-------------------------+--------+------------+\n|        Property         | Weight | Importance |\n+-------------------------+--------+------------+\n| Real IP address         |     60 |          5 |\n| Used proxy IP address   |     40 |          4 |\n| HTTP Cookies            |     80 |          8 |\n| Session Cookies         |     80 |          6 |\n| 3rd Party Cookies       |     60 |          4 |\n| Flash Cookies           |     90 |          7 |\n| PDF Bug                 |     20 |          1 |\n| Flash Bug               |     20 |          1 |\n| Java Bug                |     20 |          1 |\n| Frequent Pages          |     40 |          1 |\n| Browsers Finger Print   |     35 |          2 |\n| Installed Plugins       |     25 |          1 |\n| Cached Images           |     40 |          3 |\n| URL                     |     60 |          4 |\n| System Fonts Detection  |     70 |          4 |\n| Localstorage            |     90 |          8 |\n| Geolocation             |     70 |          6 |\n| AOLTR                   |     70 |          4 |\n| Network Information API |     40 |          3 |\n| Battery Status API      |     20 |          1 |\n+-------------------------+--------+------------+\n</pre>\n\n<p>For each piece of information which you can gather on a given request, award the associated score, then use <em>Importance</em> to resolve conflicts when scores are the same.</p>\n\n<p><strong>Proof of Concept</strong> </p>\n\n<p>For a simple proof of concept, please take a look at <a href=\"http://en.wikipedia.org/wiki/Perceptron\">Perceptron</a>. Perceptron is a <a href=\"http://en.wikipedia.org/wiki/RNA_world_hypothesis\">RNA Model</a> that is generally used in pattern recognition applications. There is even an old <a href=\"http://www.phpclasses.org/package/1702-PHP-Perceptron-implementation-for-pattern-recognition.html\">PHP Class</a> which implements it perfectly, but you would likely need to modify it for your purposes.</p>\n\n<p>Despite being a great tool, Perceptron can still return multiple results (possible matches), so using a Score and Difference comparison is still useful to identify the <em>best</em> of those matches.</p>\n\n<p><strong>Assumptions</strong> </p>\n\n<ul>\n<li>Store all possible information about each user (IP, cookies, etc.)</li>\n<li>Where result is an exact match, increase score by 1</li>\n<li>Where result is not an exact match, decrease score by 1</li>\n</ul>\n\n<p><strong>Expectation</strong> </p>\n\n<ol>\n<li>Generate RNA labels</li>\n<li>Generate random users emulating a database</li>\n<li>Generate a single Unknown user </li>\n<li>Generate Unknown user RNA and Values</li>\n<li>The system will merge RNA information and teach the Perceptron</li>\n<li>After training the Perceptron, the system will have a set of weightings</li>\n<li>You can now test the Unknown user's pattern and the Perceptron will produce a result set.</li>\n<li>Store all Positive matches</li>\n<li>Sort the matches first by Score, then by Difference (as described above)</li>\n<li>Output the two closest matches, or, if no matches are found, output empty results</li>\n</ol>\n\n<p><strong>Code for Proof of Concept</strong></p>\n\n<pre><code>$features = array(\n    'Real IP address' =&gt; .5,\n    'Used proxy IP address' =&gt; .4,\n    'HTTP Cookies' =&gt; .9,\n    'Session Cookies' =&gt; .6,\n    '3rd Party Cookies' =&gt; .6,\n    'Flash Cookies' =&gt; .7,\n    'PDF Bug' =&gt; .2,\n    'Flash Bug' =&gt; .2,\n    'Java Bug' =&gt; .2,\n    'Frequent Pages' =&gt; .3,\n    'Browsers Finger Print' =&gt; .3,\n    'Installed Plugins' =&gt; .2,\n    'URL' =&gt; .5,\n    'Cached PNG' =&gt; .4,\n    'System Fonts Detection' =&gt; .6,\n    'Localstorage' =&gt; .8,\n    'Geolocation' =&gt; .6,\n    'AOLTR' =&gt; .4,\n    'Network Information API' =&gt; .3,\n    'Battery Status API' =&gt; .2\n);\n\n// Get RNA Lables\n$labels = array();\n$n = 1;\nforeach ($features as $k =&gt; $v) {\n    $labels[$k] = \"x\" . $n;\n    $n ++;\n}\n\n// Create Users\n$users = array();\nfor($i = 0, $name = \"A\"; $i &lt; 5; $i ++, $name ++) {\n    $users[] = new Profile($name, $features);\n}\n\n// Generate Unknown User\n$unknown = new Profile(\"Unknown\", $features);\n\n// Generate Unknown RNA\n$unknownRNA = array(\n    0 =&gt; array(\"o\" =&gt; 1),\n    1 =&gt; array(\"o\" =&gt; - 1)\n);\n\n// Create RNA Values\nforeach ($unknown-&gt;data as $item =&gt; $point) {\n    $unknownRNA[0][$labels[$item]] = $point;\n    $unknownRNA[1][$labels[$item]] = (- 1 * $point);\n}\n\n// Start Perception Class\n$perceptron = new Perceptron();\n\n// Train Results\n$trainResult = $perceptron-&gt;train($unknownRNA, 1, 1);\n\n// Find matches\nforeach ($users as $name =&gt; &amp;$profile) {\n    // Use shorter labels\n    $data = array_combine($labels, $profile-&gt;data);\n    if ($perceptron-&gt;testCase($data, $trainResult) == true) {\n        $score = $diff = 0;\n\n        // Determing the score and diffrennce\n        foreach ($unknown-&gt;data as $item =&gt; $found) {\n            if ($unknown-&gt;data[$item] === $profile-&gt;data[$item]) {\n                if ($profile-&gt;data[$item] &gt; 0) {\n                    $score += $features[$item];\n                } else {\n                    $diff += $features[$item];\n                }\n            }\n        }\n        // Ser score and diff\n        $profile-&gt;setScore($score, $diff);\n        $matchs[] = $profile;\n    }\n}\n\n// Sort bases on score and Output\nif (count($matchs) &gt; 1) {\n    usort($matchs, function ($a, $b) {\n        // If score is the same use diffrence\n        if ($a-&gt;score == $b-&gt;score) {\n            // Lower the diffrence the better\n            return $a-&gt;diff == $b-&gt;diff ? 0 : ($a-&gt;diff &gt; $b-&gt;diff ? 1 : - 1);\n        }\n        // The higher the score the better\n        return $a-&gt;score &gt; $b-&gt;score ? - 1 : 1;\n    });\n\n    echo \"&lt;br /&gt;Possible Match \", implode(\",\", array_slice(array_map(function ($v) {\n        return sprintf(\" %s (%0.4f|%0.4f) \", $v-&gt;name, $v-&gt;score,$v-&gt;diff);\n    }, $matchs), 0, 2));\n} else {\n    echo \"&lt;br /&gt;No match Found \";\n}\n</code></pre>\n\n<p><a href=\"http://codepad.viper-7.com/tZArzd\"><strong>Output:</strong></a> </p>\n\n<pre><code>Possible Match D (0.7416|0.16853),C (0.5393|0.2809)\n</code></pre>\n\n<p><strong>Print_r of \"D\":</strong> </p>\n\n<pre><code>echo \"&lt;pre&gt;\";\nprint_r($matchs[0]);\n\n\nProfile Object(\n    [name] =&gt; D\n    [data] =&gt; Array (\n        [Real IP address] =&gt; -1\n        [Used proxy IP address] =&gt; -1\n        [HTTP Cookies] =&gt; 1\n        [Session Cookies] =&gt; 1\n        [3rd Party Cookies] =&gt; 1\n        [Flash Cookies] =&gt; 1\n        [PDF Bug] =&gt; 1\n        [Flash Bug] =&gt; 1\n        [Java Bug] =&gt; -1\n        [Frequent Pages] =&gt; 1\n        [Browsers Finger Print] =&gt; -1\n        [Installed Plugins] =&gt; 1\n        [URL] =&gt; -1\n        [Cached PNG] =&gt; 1\n        [System Fonts Detection] =&gt; 1\n        [Localstorage] =&gt; -1\n        [Geolocation] =&gt; -1\n        [AOLTR] =&gt; 1\n        [Network Information API] =&gt; -1\n        [Battery Status API] =&gt; -1\n    )\n    [score] =&gt; 0.74157303370787\n    [diff] =&gt; 0.1685393258427\n    [base] =&gt; 8.9\n)\n</code></pre>\n\n<p>If Debug = true you would be able to see <a href=\"http://codepad.viper-7.com/Ui5Zt0\">Input (Sensor &amp; Desired), Initial Weights, Output (Sensor, Sum, Network), Error, Correction and Final Weights</a>.</p>\n\n<pre><code>+----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+-----+----+---------+---------+---------+---------+---------+---------+---------+---------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----------+\n| o  | x1 | x2 | x3 | x4 | x5 | x6 | x7 | x8 | x9 | x10 | x11 | x12 | x13 | x14 | x15 | x16 | x17 | x18 | x19 | x20 | Bias | Yin | Y  | deltaW1 | deltaW2 | deltaW3 | deltaW4 | deltaW5 | deltaW6 | deltaW7 | deltaW8 | deltaW9 | deltaW10 | deltaW11 | deltaW12 | deltaW13 | deltaW14 | deltaW15 | deltaW16 | deltaW17 | deltaW18 | deltaW19 | deltaW20 | W1 | W2 | W3 | W4 | W5 | W6 | W7 | W8 | W9 | W10 | W11 | W12 | W13 | W14 | W15 | W16 | W17 | W18 | W19 | W20 | deltaBias |\n+----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+-----+----+---------+---------+---------+---------+---------+---------+---------+---------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----------+\n| 1  | 1  | -1 | -1 | -1 | -1 | -1 | -1 | 1  | 1  | 1   | 1   | 1   | 1   | 1   | -1  | -1  | -1  | -1  | 1   | 1   | 1    | 0   | -1 | 0       | -1      | -1      | -1      | -1      | -1      | -1      | 1       | 1       | 1        | 1        | 1        | 1        | 1        | -1       | -1       | -1       | -1       | 1        | 1        | 0  | -1 | -1 | -1 | -1 | -1 | -1 | 1  | 1  | 1   | 1   | 1   | 1   | 1   | -1  | -1  | -1  | -1  | 1   | 1   | 1         |\n| -1 | -1 | 1  | 1  | 1  | 1  | 1  | 1  | -1 | -1 | -1  | -1  | -1  | -1  | -1  | 1   | 1   | 1   | 1   | -1  | -1  | 1    | -19 | -1 | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0  | -1 | -1 | -1 | -1 | -1 | -1 | 1  | 1  | 1   | 1   | 1   | 1   | 1   | -1  | -1  | -1  | -1  | 1   | 1   | 1         |\n| -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --   | --  | -- | --      | --      | --      | --      | --      | --      | --      | --      | --      | --       | --       | --       | --       | --       | --       | --       | --       | --       | --       | --       | -- | -- | -- | -- | -- | -- | -- | -- | -- | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --        |\n| 1  | 1  | -1 | -1 | -1 | -1 | -1 | -1 | 1  | 1  | 1   | 1   | 1   | 1   | 1   | -1  | -1  | -1  | -1  | 1   | 1   | 1    | 19  | 1  | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0  | -1 | -1 | -1 | -1 | -1 | -1 | 1  | 1  | 1   | 1   | 1   | 1   | 1   | -1  | -1  | -1  | -1  | 1   | 1   | 1         |\n| -1 | -1 | 1  | 1  | 1  | 1  | 1  | 1  | -1 | -1 | -1  | -1  | -1  | -1  | -1  | 1   | 1   | 1   | 1   | -1  | -1  | 1    | -19 | -1 | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0       | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0        | 0  | -1 | -1 | -1 | -1 | -1 | -1 | 1  | 1  | 1   | 1   | 1   | 1   | 1   | -1  | -1  | -1  | -1  | 1   | 1   | 1         |\n| -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --   | --  | -- | --      | --      | --      | --      | --      | --      | --      | --      | --      | --       | --       | --       | --       | --       | --       | --       | --       | --       | --       | --       | -- | -- | -- | -- | -- | -- | -- | -- | -- | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --  | --        |\n+----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+------+-----+----+---------+---------+---------+---------+---------+---------+---------+---------+---------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----------+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----------+\n</code></pre>\n\n<p>x1 to x20 represent the features converted by the code.</p>\n\n<pre><code>// Get RNA Labels\n$labels = array();\n$n = 1;\nforeach ( $features as $k =&gt; $v ) {\n    $labels[$k] = \"x\" . $n;\n    $n ++;\n}\n</code></pre>\n\n<p>Here is an <a href=\"http://codepad.viper-7.com/Ui5Zt0\">online demo</a></p>\n\n<p><strong>Class Used:</strong></p>\n\n<pre><code>class Profile {\n    public $name, $data = array(), $score, $diff, $base;\n\n    function __construct($name, array $importance) {\n        $values = array(-1, 1); // Perception values\n        $this-&gt;name = $name;\n        foreach ($importance as $item =&gt; $point) {\n            // Generate Random true/false for real Items\n            $this-&gt;data[$item] = $values[mt_rand(0, 1)];\n        }\n        $this-&gt;base = array_sum($importance);\n    }\n\n    public function setScore($score, $diff) {\n        $this-&gt;score = $score / $this-&gt;base;\n        $this-&gt;diff = $diff / $this-&gt;base;\n    }\n}\n</code></pre>\n\n<p><strong>Modified Perceptron Class</strong></p>\n\n<pre><code>class Perceptron {\n    private $w = array();\n    private $dw = array();\n    public $debug = false;\n\n    private function initialize($colums) {\n        // Initialize perceptron vars\n        for($i = 1; $i &lt;= $colums; $i ++) {\n            // weighting vars\n            $this-&gt;w[$i] = 0;\n            $this-&gt;dw[$i] = 0;\n        }\n    }\n\n    function train($input, $alpha, $teta) {\n        $colums = count($input[0]) - 1;\n        $weightCache = array_fill(1, $colums, 0);\n        $checkpoints = array();\n        $keepTrainning = true;\n\n        // Initialize RNA vars\n        $this-&gt;initialize(count($input[0]) - 1);\n        $just_started = true;\n        $totalRun = 0;\n        $yin = 0;\n\n        // Trains RNA until it gets stable\n        while ($keepTrainning == true) {\n            // Sweeps each row of the input subject\n            foreach ($input as $row_counter =&gt; $row_data) {\n                // Finds out the number of columns the input has\n                $n_columns = count($row_data) - 1;\n\n                // Calculates Yin\n                $yin = 0;\n                for($i = 1; $i &lt;= $n_columns; $i ++) {\n                    $yin += $row_data[\"x\" . $i] * $weightCache[$i];\n                }\n\n                // Calculates Real Output\n                $Y = ($yin &lt;= 1) ? - 1 : 1;\n\n                // Sweeps columns ...\n                $checkpoints[$row_counter] = 0;\n                for($i = 1; $i &lt;= $n_columns; $i ++) {\n                    /** DELTAS **/\n                    // Is it the first row?\n                    if ($just_started == true) {\n                        $this-&gt;dw[$i] = $weightCache[$i];\n                        $just_started = false;\n                        // Found desired output?\n                    } elseif ($Y == $row_data[\"o\"]) {\n                        $this-&gt;dw[$i] = 0;\n                        // Calculates Delta Ws\n                    } else {\n                        $this-&gt;dw[$i] = $row_data[\"x\" . $i] * $row_data[\"o\"];\n                    }\n\n                    /** WEIGHTS **/\n                    // Calculate Weights\n                    $this-&gt;w[$i] = $this-&gt;dw[$i] + $weightCache[$i];\n                    $weightCache[$i] = $this-&gt;w[$i];\n\n                    /** CHECK-POINT **/\n                    $checkpoints[$row_counter] += $this-&gt;w[$i];\n                } // END - for\n\n                foreach ($this-&gt;w as $index =&gt; $w_item) {\n                    $debug_w[\"W\" . $index] = $w_item;\n                    $debug_dw[\"deltaW\" . $index] = $this-&gt;dw[$index];\n                }\n\n                // Special for script debugging\n                $debug_vars[] = array_merge($row_data, array(\n                    \"Bias\" =&gt; 1,\n                    \"Yin\" =&gt; $yin,\n                    \"Y\" =&gt; $Y\n                ), $debug_dw, $debug_w, array(\n                    \"deltaBias\" =&gt; 1\n                ));\n            } // END - foreach\n\n            // Special for script debugging\n             $empty_data_row = array();\n            for($i = 1; $i &lt;= $n_columns; $i ++) {\n                $empty_data_row[\"x\" . $i] = \"--\";\n                $empty_data_row[\"W\" . $i] = \"--\";\n                $empty_data_row[\"deltaW\" . $i] = \"--\";\n            }\n            $debug_vars[] = array_merge($empty_data_row, array(\n                \"o\" =&gt; \"--\",\n                \"Bias\" =&gt; \"--\",\n                \"Yin\" =&gt; \"--\",\n                \"Y\" =&gt; \"--\",\n                \"deltaBias\" =&gt; \"--\"\n            ));\n\n            // Counts training times\n            $totalRun ++;\n\n            // Now checks if the RNA is stable already\n            $referer_value = end($checkpoints);\n            // if all rows match the desired output ...\n            $sum = array_sum($checkpoints);\n            $n_rows = count($checkpoints);\n            if ($totalRun &gt; 1 &amp;&amp; ($sum / $n_rows) == $referer_value) {\n                $keepTrainning = false;\n            }\n        } // END - while\n\n        // Prepares the final result\n        $result = array();\n        for($i = 1; $i &lt;= $n_columns; $i ++) {\n            $result[\"w\" . $i] = $this-&gt;w[$i];\n        }\n\n        $this-&gt;debug($this-&gt;print_html_table($debug_vars));\n\n        return $result;\n    } // END - train\n    function testCase($input, $results) {\n        // Sweeps input columns\n        $result = 0;\n        $i = 1;\n        foreach ($input as $column_value) {\n            // Calculates teste Y\n            $result += $results[\"w\" . $i] * $column_value;\n            $i ++;\n        }\n        // Checks in each class the test fits\n        return ($result &gt; 0) ? true : false;\n    } // END - test_class\n\n    // Returns the html code of a html table base on a hash array\n    function print_html_table($array) {\n        $html = \"\";\n        $inner_html = \"\";\n        $table_header_composed = false;\n        $table_header = array();\n\n        // Builds table contents\n        foreach ($array as $array_item) {\n            $inner_html .= \"&lt;tr&gt;\\n\";\n            foreach ( $array_item as $array_col_label =&gt; $array_col ) {\n                $inner_html .= \"&lt;td&gt;\\n\";\n                $inner_html .= $array_col;\n                $inner_html .= \"&lt;/td&gt;\\n\";\n\n                if ($table_header_composed == false) {\n                    $table_header[] = $array_col_label;\n                }\n            }\n            $table_header_composed = true;\n            $inner_html .= \"&lt;/tr&gt;\\n\";\n        }\n\n        // Builds full table\n        $html = \"&lt;table border=1&gt;\\n\";\n        $html .= \"&lt;tr&gt;\\n\";\n        foreach ($table_header as $table_header_item) {\n            $html .= \"&lt;td&gt;\\n\";\n            $html .= \"&lt;b&gt;\" . $table_header_item . \"&lt;/b&gt;\";\n            $html .= \"&lt;/td&gt;\\n\";\n        }\n        $html .= \"&lt;/tr&gt;\\n\";\n\n        $html .= $inner_html . \"&lt;/table&gt;\";\n\n        return $html;\n    } // END - print_html_table\n\n    // Debug function\n    function debug($message) {\n        if ($this-&gt;debug == true) {\n            echo \"&lt;b&gt;DEBUG:&lt;/b&gt; $message\";\n        }\n    } // END - debug\n} // END - class\n</code></pre>\n\n<p><strong>Conclusion</strong></p>\n\n<p>Identifying a user without a Unique Identifier is not a straight-forward or simple task. it is dependent upon gathering a sufficient amount of Random Data which you are able to gather from the user by a variety of methods.</p>\n\n<p>Even if you choose not to use an Artificial Neural Network, I suggest at least using a Simple Probability Matrix with priorities and likelihoods - and I hope the code and examples provided above give you enough to go on.</p>\n",
                    "is_accepted": true,
                    "score": 252
                },
                {
                    "body": "<p>The above mentioned thumbprinting works, but can still suffer colisions.  </p>\n\n<p>One way is to add UID to the url of each interaction with the user.</p>\n\n<p><a href=\"http://someplace.com/12899823/user/profile\">http://someplace.com/12899823/user/profile</a></p>\n\n<p>Where every link in the site is adapted with this modifier. It is similar to the way ASP.Net used to work using FORM data between pages.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can do it with etags.  Although I am not sure if this legal as a bunch of lawsuits were filed.  </p>\n\n<p>If you properly warn your users or if you have something like an intranet website it might be ok.  </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Inefficient, but may give you the desired results, would be to poll an API on your side. Have a background process on the client side which sends user data at an interval. You will need a user identifier to send to your API.  Once you have that you can send along any information associated to that unique identifier. </p>\n\n<p>This removes the need for cookies and localstorage.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could do this with a cached png, it would be somewhat unreliable (different browsers behave differently, and it'll fail if the user clears their cache), but it's an option. </p>\n\n<p>1: set up a Database that stores a unique user id as a hex string</p>\n\n<p>2: create a genUser.php (or whatever language) file that generates a user id, stores it in the DB and then creates a true color .png out of the values of that hex string (each pixel will be 4 bytes) and return that to the browser. Be sure to set the content-type and cache headers. </p>\n\n<p>3: in the HTML or JS create an image like <code>&lt;img id='user_id' src='genUser.php' /&gt;</code></p>\n\n<p>4: draw that image to a canvas <code>ctx.drawImage(document.getElementById('user_id'), 0, 0);</code></p>\n\n<p>5: read the bytes of that image out using <code>ctx.getImageData</code>, and convert the integers to a hex string.</p>\n\n<p>6: That is your unique user id that's now cached on the your users computer. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Have you looked into <a href=\"http://samy.pl/evercookie/\">Evercookie</a>?\nIt may or may not work across browsers. An extract from their site.</p>\n\n<p>\"If a user gets cookied on one browser and switches to another browser,\n    as long as they still have the Local Shared Object cookie, the cookie\n    will reproduce in both browsers.\"</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You could potentially create a blob to store a device identifier ...</p>\n\n<p>the downside is that the user needs to download the blob ( <a href=\"http://thiscouldbebetter.wordpress.com/2012/12/18/loading-editing-and-saving-a-text-file-in-html5-using-javascrip/\" rel=\"nofollow\">you can force the download</a> ), \nas the browser can't access the File System to directly save the file. </p>\n\n<p>reference: </p>\n\n<p><a href=\"https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-22/blobs\" rel=\"nofollow\">https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-22/blobs</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on what you have said :</p>\n\n<blockquote>\n  <p>Basically I'm after device recognition not really the user</p>\n</blockquote>\n\n<p>Best way to do it is to send the mac address which is the NIC ID.</p>\n\n<p>You can take a look at this post : \n<a href=\"http://stackoverflow.com/questions/1420381/how-can-i-get-the-mac-and-the-ip-address-of-a-connected-client-in-php\">How can I get the MAC and the IP address of a connected client in PHP?</a></p>\n\n<p><a href=\"http://www.qualitycodes.com/tutorial.php?articleid=19&amp;title=MAC-Address-Using-WMI-on-Internet-Explorer\" rel=\"nofollow\">JavaScript Mac Finder</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<ol>\n<li>create a cross-platform dummy (nsapi)plugin and generate a unique name for the plugin name or version when the user downloads it (eg after login).</li>\n<li>provide a installer for the plugin / install it per policy</li>\n</ol>\n\n<p>this will require the user to willingly install the identifier.</p>\n\n<p>once the plugin is installed, the <a href=\"https://wiki.mozilla.org/Fingerprinting#Plugins\" rel=\"nofollow\">fingerprint</a> of any (plugin enabled) browser will contain this specific plugin. To return the info to a server, a algorithm to effectively detect the plugin on client-side is needed, otherwise IE and Firefox >= 28 users will need a table of possible valid identifies.</p>\n\n<p>This requires a relatively high investment into a technology that will likely be shut down by the browser-vendors. When you are able to convince your users to install a plugin, there may also be options like install a <a href=\"http://www.privoxy.org/\" rel=\"nofollow\">local proxy</a>, use vpn or patch the network drivers.</p>\n\n<p>Users that do not want to be identified (or their machines) will always find a way to prevent it.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I can't believe, <a href=\"http://browserspy.dk\" rel=\"nofollow\">http://browserspy.dk</a> still has not been mentioned here!\nThe site describes many features (in terms of pattern recognition), which could be used to build a classifier.</p>\n\n<p>And of cause, for evaluating the features I'd suggest Support Vector Machines and <a href=\"http://www.csie.ntu.edu.tw/~cjlin/libsvm/\" rel=\"nofollow\">libsvm</a> in particular.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Track them during a session or across sessions?</p>\n\n<p>If your site is HTTPS Everywhere you could use the TLS Session ID to track the user's session</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm building an analytic tool and I can currently get the user's IP address, browser and operating system from their user agent.</p>\n\n<p>I'm wondering if there is a possibility to detect the same user without using cookies or local storage? I'm not expecting code examples here; just a simple hint of where to look further.</p>\n\n<p>Forgot to mention that it would need to be cross-browser compatible if it's the same computer/device. Basically I'm after device recognition not really the user.</p>\n",
            "last_activity_date": 1425698638,
            "question_id": 15966812,
            "score": 82,
            "tags": [
                "php",
                "javascript",
                "http-headers",
                "user",
                "fingerprinting"
            ],
            "title": "User recognition without cookies or local storage"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Callbacks are about signals and \"new\" is about creating object instances. </p>\n\n<p>In this case it would be even more appropriate to execute just \"callback();\" than \"return new callback()\" because you aren't doing anything with a return value anyway.</p>\n\n<p><em>(And the arguments.length==3 test is really clunky, fwiw, better to check that callback param exists and is a function.)</em></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can just say</p>\n\n<pre><code>callback();\n</code></pre>\n\n<p>Alternately you can use the <code>call</code> method if you want to adjust the value of <code>this</code> within the callback.</p>\n\n<pre><code>callback.call( newValueForThis);\n</code></pre>\n\n<p>Inside the function <code>this</code> would be whatever <code>newValueForThis</code> is.</p>\n",
                    "is_accepted": true,
                    "score": 104
                },
                {
                    "body": "<p>There are 3 main possibilities to execute a function:</p>\n\n<pre><code>var callback = function(x, y) {\n    // \"this\" may be different depending how you call the function\n    alert(this);\n};\n</code></pre>\n\n<ol>\n<li>callback(argument_1, argument_2);</li>\n<li>callback.call(some_object, argument_1, argument_2);</li>\n<li>callback.apply(some_object, [argument_1, argument_2]);</li>\n</ol>\n\n<p>The method you choose depends whether:</p>\n\n<ol>\n<li>You have the arguments stored in an Array or as distinct variables.</li>\n<li>You want to call that function in the context of some object. In this case, using the \"this\" keyword in that callback would reference the object passed as argument in call() or apply(). If you don't want to pass the object context, use null or undefined. In the latter case the global object would be used for \"this\".</li>\n</ol>\n\n<p>Docs for <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/call\">Function.call</a>, \n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Function/apply\">Function.apply</a></p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>the proper implementation would be:</p>\n\n<pre><code>if( callback ) callback();\n</code></pre>\n\n<p>this makes the callback parameter optional..</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You should check if the callback exists, and is an executable function:</p>\n\n<pre><code>if (callback &amp;&amp; typeof(callback) === \"function\") {\n    // execute the callback, passing parameters as necessary\n    callback();\n}\n</code></pre>\n\n<p>A lot of libraries (jQuery, dojo, etc.) use a similar pattern for their asynchronous functions, as well as node.js for all async functions (nodejs usually passes <code>error</code> and <code>data</code> to the callback). Looking into their source code would help!</p>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<pre><code>function checkCallback(cb)\n{\n    if(cb || cb!='')\n    {\n        if(typeof window[cb] === 'undefined') alert('Callback function not found.');\n        else window[cb].call(this,Arg1, Arg2);\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I understand passing in a function to another function as a callback and having it execute, but I'm not understanding the best implementation to do that. I'm looking for a very basic example, like this:</p>\n\n<pre><code>var myCallBackExample = {\n    myFirstFunction : function( param1, param2, callback ) {\n    \t// Do something with param1 and param2.\n    \tif ( arguments.length == 3 ) {\n    \t\t// Execute callback function.\n    \t\t// What is the \"best\" way to do this?\n    \t}\n    },\n    mySecondFunction : function() {\n    \tmyFirstFunction( false, true, function() {\n    \t\t// When this anonymous function is called, execute it.\n    \t});\n    }\n};\n</code></pre>\n\n<p>In myFirstFunction, if I do return new callback(), then it works and executes the anonymous function, but that doesn't seem like the correct approach to me.</p>\n",
            "last_activity_date": 1365775683,
            "question_id": 483073,
            "score": 124,
            "tags": [
                "javascript",
                "function",
                "callback"
            ],
            "title": "Getting a better understanding of callback functions in JavaScript"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Why not hash your objects yourself manually, and use the resulting strings as keys for a regular JavaScript dictionary? After all you are in the best position to know what makes your objects unique. That's what I do.</p>\n\n<p>Example:</p>\n\n<pre><code>var key = function(obj){\n  // some unique object-dependent key\n  return obj.lastName + obj.firstName; // just an example\n};\n\nvar dict = {};\n\ndict[key(obj1)] = obj1;\ndict[key(obj2)] = obj2;\n</code></pre>\n\n<p>This way you can control indexing done by JavaScript without heavy lifting of memory allocation, and overflow handling.</p>\n\n<p>Of course, if you truly want the \"industrial-grade solution\", you can build a class parameterized by the key function, and with all necessary API of the container, but &hellip; we use JavaScript, and trying to be simple and lightweight, so this functional solution is simple and fast.</p>\n\n<p>The key function can be as simple as selecting right attributes of the object, e.g., a key, or a set of keys, which are already unique, a combination of keys, which are unique together, or as complex as using some cryptographic hashes like in <a href=\"http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/encoding/\" rel=\"nofollow\">DojoX Encoding</a>, or <a href=\"http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/uuid/\" rel=\"nofollow\">DojoX UUID</a>. While the latter solutions may produce unique keys, personally I try to avoid them at all costs, especially, if I know what makes my objects unique.</p>\n\n<p><strong>Update in 2014:</strong> Answered back in 2008 this simple solution still requires more explanations. Let me clarify the idea in Q &amp; A form.</p>\n\n<p><em>Your solution doesn't have a real hash. Where is it???</em></p>\n\n<p>JavaScript is a high-level language. Its basic primitive\n(<a href=\"http://en.wikipedia.org/wiki/JavaScript_syntax#Objects\" rel=\"nofollow\">Object</a>)\nincludes a hash table to keep properties. This hash table is usually written\nin a low-level language for efficiency. Using a simple object with string keys we use an efficiently implemented hash table with no efforts on our part.</p>\n\n<p><em>How do you know they use hash?</em></p>\n\n<p>There are three major ways to keep a collection of objects addressable by a key:</p>\n\n<ul>\n<li>Unordered. In this case to retrieve an object by its key we have to go over all keys stopping when we find it. On average it will take n/2 comparisons.</li>\n<li>Ordered.\n<ul>\n<li>Example #1: a sorted array &mdash; doing a binary search we will find our key after ~log2(n) comparisons on average. Much better.</li>\n<li>Example #2: a tree. Again it'll be ~log(n) attempts.</li>\n</ul></li>\n<li>Hash table. On average it requires a constant time. Compare: O(n) vs. O(log n) vs. O(1). Boom.</li>\n</ul>\n\n<p>Obviously JavaScript objects use hash tables in some form to handle general cases.</p>\n\n<p><em>Do browser vendors really use hash tables???</em></p>\n\n<p>Really.</p>\n\n<ul>\n<li>Chrome/node.js/<a href=\"https://github.com/v8/v8/\" rel=\"nofollow\">V8</a>: \n<a href=\"https://github.com/v8/v8/blob/master/src/objects.h#L1680\" rel=\"nofollow\">JSObject</a>. Look for\n<a href=\"https://github.com/v8/v8/blob/master/src/objects.h#L3618\" rel=\"nofollow\">NameDictionary</a> and\n<a href=\"https://github.com/v8/v8/blob/master/src/objects.h#L3606\" rel=\"nofollow\">NameDictionaryShape</a> with\npertinent details in <a href=\"https://github.com/v8/v8/blob/master/src/objects.cc\" rel=\"nofollow\">objects.cc</a>\nand <a href=\"https://github.com/v8/v8/blob/master/src/objects-inl.h\" rel=\"nofollow\">objects-inl.h</a>.</li>\n<li>Firefox/<a href=\"https://github.com/mozilla/gecko-dev\" rel=\"nofollow\">Gecko</a>:\n<a href=\"https://github.com/mozilla/gecko-dev/blob/master/js/src/jsobj.h#L99\" rel=\"nofollow\">JSObject</a>,\n<a href=\"https://github.com/mozilla/gecko-dev/blob/master/js/src/vm/NativeObject.h#L349\" rel=\"nofollow\">NativeObject</a>, and\n<a href=\"https://github.com/mozilla/gecko-dev/blob/master/js/src/vm/NativeObject.h#L1238\" rel=\"nofollow\">PlainObject</a> with pertinent details in\n<a href=\"https://github.com/mozilla/gecko-dev/blob/master/js/src/jsobj.cpp\" rel=\"nofollow\">jsobj.cpp</a> and\n<a href=\"https://github.com/mozilla/gecko-dev/blob/master/js/src/vm/NativeObject.cpp\" rel=\"nofollow\">vm/NativeObject.cpp</a>.</li>\n</ul>\n\n<p><em>Do they handle collisions?</em></p>\n\n<p>Yes. See above. If you found a collision on unequal strings, please do not hesitate to file a bug with a vendor.</p>\n\n<p><em>So what is your idea?</em></p>\n\n<p>If you want to hash an object, find what makes it unique and use it as a key. Do not try to calculate real hash or emulate hash tables &mdash; it is already efficiently handled by the underlying JavaScript object.</p>\n\n<p>Use this key with JavaScript <code>Object</code> to leverage its built-in hash table while steering clear of possible clashes with default properties.</p>\n\n<p>Examples to get you started:</p>\n\n<ul>\n<li>If your objects include a unique user name &mdash; use it as a key.</li>\n<li>If it includes a unique customer number &mdash; use it as a key.\n<ul>\n<li>If it includes unique government-issued numbers like an SSN, or a passport number, and your system doesn't allow duplicates &mdash; use it as a key.</li>\n</ul></li>\n<li>If a combination of fields is unique &mdash; use it as a key.\n<ul>\n<li>State abbreviation + driver license number makes an excellent key.</li>\n<li>Country abbreviation + passport number is an excellent key too.</li>\n</ul></li>\n<li>Some function on fields, or a whole object, can return a unique value &mdash; use it as a key.</li>\n</ul>\n\n<p><em>I used your suggestion and cached all objects using a user name. But some wise guy is named \"toString\", which is a built-in property! What should I do now?</em></p>\n\n<p>Obviously, if it is even remotely possible that the resulting key will exclusively consists of Latin characters, you should do something about it. For example, add any non-Latin Unicode character you like at the beginning or at the end to un-clash with default properties: \"#toString\", \"#MarySmith\". If a composite key is used, separate key components using some kind of non-Latin delimiter: \"name,city,state\".</p>\n\n<p>In general this is the place, where we have to be creative, and select the easiest keys with given limitations (uniqueness, potential clashes with default properties).</p>\n\n<p>Note: unique keys do not clash by definition, while potential hash clashes will be handled by the underlying <code>Object</code>.</p>\n\n<p><em>Why don't you like industrial solutions?</em></p>\n\n<p>IMHO, the best code is no code at all: it has no errors, requires no maintenance, easy to understand, and executes instantaneously. All \"hash tables in JavaScript\" I saw were >100 lines of code, and involved multiple objects. Compare it with: <code>dict[key] = value</code>.</p>\n\n<p>Another point: is it even possible to beat a performance of a primordial object written in a low-level language, using JavaScript and the very same primordial objects to implement what is already implemented?</p>\n\n<p><em>I still want to hash my objects without any keys!</em></p>\n\n<p>We are in luck: ECMAScript 6 (scheduled for mid 2015 release, give or take 1-2 years after that to become widespread) defines\n<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-map-objects\" rel=\"nofollow\">map</a> and\n<a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-set-objects\" rel=\"nofollow\">set</a>.</p>\n\n<p>Judging by the definition they can use object's address as a key, which makes objects instantly distinct without artificial keys. OTOH, two different, yet identical objects, will be mapped as distinct.</p>\n",
                    "is_accepted": true,
                    "score": 111
                },
                {
                    "body": "<p>You'd have to store in some internal state couplets of object/value pairs</p>\n\n<pre><code>HashMap = function(){\n  this._dict = [];\n}\nHashMap.prototype._get = function(key){\n  for(var i=0, couplet; couplet = this._dict[i]; i++){\n    if(couplet[0] === key){\n      return couplet;\n    }\n  }\n}\nHashMap.prototype.put = function(key, value){\n  var couplet = this._get(key);\n  if(couplet){\n    couplet[1] = value;\n  }else{\n    this._dict.push([key, value]);\n  }\n  return this; // for chaining\n}\nHashMap.prototype.get = function(key){\n  var couplet = this._get(key);\n  if(couplet){\n    return couplet[1];\n  }\n}\n</code></pre>\n\n<p>And use it as such:</p>\n\n<pre><code>var color = {}; // unique object instance\nvar shape = {}; // unique object instance\nvar map = new HashMap();\nmap.put(color, \"blue\");\nmap.put(shape, \"round\");\nconsole.log(\"Item is\", map.get(color), \"and\", map.get(shape));\n</code></pre>\n\n<p>Of course, this implementation is also somewhere along the lines of O(n). Eugene's examples above are the only way to get a hash that works with any sort of speed you'd expect from a real hash.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>Another approach, along the lines of Eugene's answer is to somehow attach a unique ID to all objects. One of my favorite approaches is to take one of the built-in methods inherited from the Object superclass, replace it with a custom function passthrough and attach properties to that function object. If you were to rewrite my HashMap method to do this, it would look like:</p>\n\n<pre><code>HashMap = function(){\n  this._dict = {};\n}\nHashMap.prototype._shared = {id: 1};\nHashMap.prototype.put = function put(key, value){\n  if(typeof key == \"object\"){\n    if(!key.hasOwnProperty._id){\n      key.hasOwnProperty = function(key){\n        return Object.prototype.hasOwnProperty.call(this, key);\n      }\n      key.hasOwnProperty._id = this._shared.id++;\n    }\n    this._dict[key.hasOwnProperty._id] = value;\n  }else{\n    this._dict[key] = value;\n  }\n  return this; // for chaining\n}\nHashMap.prototype.get = function get(key){\n  if(typeof key == \"object\"){\n    return this._dict[key.hasOwnProperty._id];\n  }\n  return this._dict[key];\n}\n</code></pre>\n\n<p>This version appears to be only slightly faster, but in theory it will be significantly faster for large data sets.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<h1>Problem description</h1>\n\n<p>JavaScript has no built-in general <em>map</em> type (sometimes called <em>associative array</em> or <em>dictionary</em>) which allows to access arbitrary values by arbitrary keys. JavaScript's fundamental data structure is the <em>object</em>, a special type of map which only accepts strings as keys and has special semantics like prototypical inheritance, getters and setters and some further voodoo.</p>\n\n<p>When usings objects as maps, you have to remember that the key will be converted to a string value via <code>toString()</code>, which results in mapping <code>5</code> and <code>'5'</code> to the same value and all objects which don't overwrite the <code>toString()</code> method to the value indexed by <code>'[object Object]'</code>. You might also involuntarily access its inherited properties if you don't check <code>hasOwnProperty()</code>.</p>\n\n<p>JavaScript's built-in <em>array</em> type does not help one bit: JavaScript arrays are not associative arrays, but just objects with a few more special properties. If you want to know why they can't be used as maps, <a href=\"http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/\">look here</a>.</p>\n\n<h1>Eugene's Solution</h1>\n\n<p>Eugene Lazutkin already described the basic idea of using a custom hash function to generate unique strings which can be used to look up the associated values as properties of a dictionary object. This will most likely be the fastest solution, because objects are internally implemented as <em>hash tables</em>.</p>\n\n<ul>\n<li><strong>Note:</strong> Hash tables (sometimes called <em>hash maps</em>) are a particular implementation of the map concept using a backing array and lookup via numeric hash values. The runtime environment might use other structures (such as <em>search trees</em> or <em>skip lists</em>) to implement JavaScript objects, but as objects are the fundamental data structure, they should be sufficiently optimised.</li>\n</ul>\n\n<p>In order to get a unique hash value for arbitrary objects, one possibility is to use a global counter and cache the hash value in the object itself (eg in a property named <code>__hash</code>).</p>\n\n<p>A hash function which does this is and works for both primitive values and objects is:</p>\n\n<pre><code>function hash(value) {\n    return (typeof value) + ' ' + (value instanceof Object ?\n        (value.__hash || (value.__hash = ++arguments.callee.current)) :\n        value.toString());\n}\n\nhash.current = 0;\n</code></pre>\n\n<p>This function can be used as described by Eugene. For convenience, we will further wrap it in a <code>Map</code> class.</p>\n\n<h1>My <code>Map</code> implementation</h1>\n\n<p>The following implementation will additionally store the key-value-pairs in a doubly linked list in order to allow fast iteration over both keys and values. To supply your own hash function, you can overwrite the instance's <code>hash()</code> method after creation.</p>\n\n<pre><code>// linking the key-value-pairs is optional\n// if no argument is provided, linkItems === undefined, i.e. !== false\n// --&gt; linking will be enabled\nfunction Map(linkItems) {\n    this.current = undefined;\n    this.size = 0;\n\n    if(linkItems === false)\n        this.disableLinking();\n}\n\nMap.noop = function() {\n    return this;\n};\n\nMap.illegal = function() {\n    throw new Error(\"illegal operation for maps without linking\");\n};\n\n// map initialisation from existing object\n// doesn't add inherited properties if not explicitly instructed to:\n// omitting foreignKeys means foreignKeys === undefined, i.e. == false\n// --&gt; inherited properties won't be added\nMap.from = function(obj, foreignKeys) {\n    var map = new Map;\n\n    for(var prop in obj) {\n        if(foreignKeys || obj.hasOwnProperty(prop))\n            map.put(prop, obj[prop]);\n    }\n\n    return map;\n};\n\nMap.prototype.disableLinking = function() {\n    this.link = Map.noop;\n    this.unlink = Map.noop;\n    this.disableLinking = Map.noop;\n    this.next = Map.illegal;\n    this.key = Map.illegal;\n    this.value = Map.illegal;\n    this.removeAll = Map.illegal;\n\n    return this;\n};\n\n// overwrite in Map instance if necessary\nMap.prototype.hash = function(value) {\n    return (typeof value) + ' ' + (value instanceof Object ?\n        (value.__hash || (value.__hash = ++arguments.callee.current)) :\n        value.toString());\n};\n\nMap.prototype.hash.current = 0;\n\n// --- mapping functions\n\nMap.prototype.get = function(key) {\n    var item = this[this.hash(key)];\n    return item === undefined ? undefined : item.value;\n};\n\nMap.prototype.put = function(key, value) {\n    var hash = this.hash(key);\n\n    if(this[hash] === undefined) {\n        var item = { key : key, value : value };\n        this[hash] = item;\n\n        this.link(item);\n        ++this.size;\n    }\n    else this[hash].value = value;\n\n    return this;\n};\n\nMap.prototype.remove = function(key) {\n    var hash = this.hash(key);\n    var item = this[hash];\n\n    if(item !== undefined) {\n        --this.size;\n        this.unlink(item);\n\n        delete this[hash];\n    }\n\n    return this;\n};\n\n// only works if linked\nMap.prototype.removeAll = function() {\n    while(this.size)\n        this.remove(this.key());\n\n    return this;\n};\n\n// --- linked list helper functions\n\nMap.prototype.link = function(item) {\n    if(this.size == 0) {\n        item.prev = item;\n        item.next = item;\n        this.current = item;\n    }\n    else {\n        item.prev = this.current.prev;\n        item.prev.next = item;\n        item.next = this.current;\n        this.current.prev = item;\n    }\n};\n\nMap.prototype.unlink = function(item) {\n    if(this.size == 0)\n        this.current = undefined;\n    else {\n        item.prev.next = item.next;\n        item.next.prev = item.prev;\n        if(item === this.current)\n            this.current = item.next;\n    }\n};\n\n// --- iterator functions - only work if map is linked\n\nMap.prototype.next = function() {\n    this.current = this.current.next;\n};\n\nMap.prototype.key = function() {\n    return this.current.key;\n};\n\nMap.prototype.value = function() {\n    return this.current.value;\n};\n</code></pre>\n\n<h1>Example</h1>\n\n<p>The following script</p>\n\n<pre><code>var map = new Map;\n\nmap.put('spam', 'eggs').\n    put('foo', 'bar').\n    put('foo', 'baz').\n    put({}, 'an object').\n    put({}, 'another object').\n    put(5, 'five').\n    put(5, 'five again').\n    put('5', 'another five');\n\nfor(var i = 0; i++ &lt; map.size; map.next())\n    document.writeln(map.hash(map.key()) + ' : ' + map.value());\n</code></pre>\n\n<p>generates this output:</p>\n\n<pre><code>string spam : eggs\nstring foo : baz\nobject 1 : an object\nobject 2 : another object\nnumber 5 : five again\nstring 5 : another five\n</code></pre>\n\n<h1>Further considerations</h1>\n\n<p>PEZ suggested to overwrite the <code>toString()</code> method, presumably with our hash function. This is not feasible because it doesn't work for primitive values (changing <code>toString()</code> for primitives is a <em>very</em> bad idea). If we want <code>toString()</code> to return meaningful values for arbitrary objects, we would have to modify <code>Object.prototype</code>, which some people (myself not included) consider <em>verboten</em>.</p>\n\n<p><hr /></p>\n\n<p><strong>Edit:</strong> The current version of my <code>Map</code> implementation as well as other JavaScript goodies <a href=\"http://mercurial.intuxication.org/hg/js-hacks/raw-file/tip/map.js\">can be obtained from here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 148
                },
                {
                    "body": "<p>Javascript does not build-in Map/hashmap. It should be called <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/Array\" rel=\"nofollow\">associative array</a>.</p>\n\n<p><code>hash[\"X\"]</code> is equals to <code>hash.X</code>, but allow \"X\" as a string variable.\nIn other words, <code>hash[x]</code> is functionally equals to <code>eval(\"hash.\"+x.toString())</code></p>\n\n<p>It is more similar as object.properties rather then key-value mapping.\nIf you are looking for a better Key/value mapping in Javascript, please use Map object which you can find on the web.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try my JavaScript hash table implementation: <a href=\"http://www.timdown.co.uk/jshashtable\" rel=\"nofollow\">http://www.timdown.co.uk/jshashtable</a></p>\n\n<p>It looks for a hashCode() method of key objects, or you can supply a hashing function when creating a Hashtable object.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've implemented javascript HashMap which code can be obtained from <a href=\"http://github.com/lambder/HashMapJS/tree/master\">http://github.com/lambder/HashMapJS/tree/master</a></p>\n\n<p>Here is the code:</p>\n\n<pre><code>/*\n =====================================================================\n @license MIT\n @author Daniel Kwiecinski &lt;daniel.kwiecinski@lambder.com&gt;\n @copyright 2009 Daniel Kwiecinski.\n @end\n =====================================================================\n */\nvar HashMap = function() {\n  this.initialize();\n}\n\nHashMap.prototype = {\n  hashkey_prefix: \"&lt;#HashMapHashkeyPerfix&gt;\",\n  hashcode_field: \"&lt;#HashMapHashkeyPerfix&gt;\",\n\n  initialize: function() {\n    this.backing_hash = {};\n    this.code = 0;\n  },\n  /*\n   maps value to key returning previous assocciation\n   */\n  put: function(key, value) {\n    var prev;\n    if (key &amp;&amp; value) {\n      var hashCode = key[this.hashcode_field];\n      if (hashCode) {\n        prev = this.backing_hash[hashCode];\n      } else {\n        this.code += 1;\n        hashCode = this.hashkey_prefix + this.code;\n        key[this.hashcode_field] = hashCode;\n      }\n      this.backing_hash[hashCode] = value;\n    }\n    return prev;\n  },\n  /*\n   returns value associated with given key\n   */\n  get: function(key) {\n    var value;\n    if (key) {\n      var hashCode = key[this.hashcode_field];\n      if (hashCode) {\n        value = this.backing_hash[hashCode];\n      }\n    }\n    return value;\n  },\n  /*\n   deletes association by given key.\n   Returns true if the assocciation existed, false otherwise\n   */\n  del: function(key) {\n    var success = false;\n    if (key) {\n      var hashCode = key[this.hashcode_field];\n      if (hashCode) {\n        var prev = this.backing_hash[hashCode];\n        this.backing_hash[hashCode] = undefined;\n        if(prev !== undefined)\n          success = true;\n      }\n    }\n    return success;\n  }\n}\n\n//// Usage\n\n// creation\n\nvar my_map = new HashMap();\n\n// insertion\n\nvar a_key = {};\nvar a_value = {struct: \"structA\"};\nvar b_key = {};\nvar b_value = {struct: \"structB\"};\nvar c_key = {};\nvar c_value = {struct: \"structC\"};\n\nmy_map.put(a_key, a_value);\nmy_map.put(b_key, b_value);\nvar prev_b = my_map.put(b_key, c_value);\n\n// retrieval\n\nif(my_map.get(a_key) !== a_value){\n  throw(\"fail1\")\n}\nif(my_map.get(b_key) !== c_value){\n  throw(\"fail2\")\n}\nif(prev_b !== b_value){\n  throw(\"fail3\")\n}\n\n// deletion\n\nvar a_existed = my_map.del(a_key);\nvar c_existed = my_map.del(c_key);\nvar a2_existed = my_map.del(a_key);\n\nif(a_existed !== true){\n  throw(\"fail4\")\n}\nif(c_existed !== false){\n  throw(\"fail5\")\n}\nif(a2_existed !== false){\n  throw(\"fail6\")\n}\n</code></pre>\n\n<p>Bon App\u00e9tit,\nDaniel Kwiecinski</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://jsclass.jcoglan.com/hash.html\" rel=\"nofollow\">Js.Class</a> has a <a href=\"http://jsclass.jcoglan.com/hash.html\" rel=\"nofollow\">Hash</a> implementation, not to mention several other good features.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Unfortunately, none of the above answers were good for my case: different key objects may have the same hash code. Therefore, I wrote a simple Java-like HashMap version:</p>\n\n<pre><code>function HashMap() {\n    this.buckets = {};\n}\n\nHashMap.prototype.put = function(key, value) {\n    var hashCode = key.hashCode();\n    var bucket = this.buckets[hashCode];\n    if (!bucket) {\n        bucket = new Array();\n        this.buckets[hashCode] = bucket;\n    }\n    for (var i = 0; i &lt; bucket.length; ++i) {\n        if (bucket[i].key.equals(key)) {\n            bucket[i].value = value;\n            return;\n        }\n    }\n    bucket.push({ key: key, value: value });\n}\n\nHashMap.prototype.get = function(key) {\n    var hashCode = key.hashCode();\n    var bucket = this.buckets[hashCode];\n    if (!bucket) {\n        return null;\n    }\n    for (var i = 0; i &lt; bucket.length; ++i) {\n        if (bucket[i].key.equals(key)) {\n            return bucket[i].value;\n        }\n    }\n}\n\nHashMap.prototype.keys = function() {\n    var keys = new Array();\n    for (var hashKey in this.buckets) {\n        var bucket = this.buckets[hashKey];\n        for (var i = 0; i &lt; bucket.length; ++i) {\n            keys.push(bucket[i].key);\n        }\n    }\n    return keys;\n}\n\nHashMap.prototype.values = function() {\n    var values = new Array();\n    for (var hashKey in this.buckets) {\n        var bucket = this.buckets[hashKey];\n        for (var i = 0; i &lt; bucket.length; ++i) {\n            values.push(bucket[i].value);\n        }\n    }\n    return values;\n}\n</code></pre>\n\n<p>Note: key objects must \"implement\" hashCode() and equals() methods.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>My Map Implementation, derived from Christoph's example:</p>\n\n<p>Example Usage:</p>\n\n<pre><code>var map = new Map();  //creates an \"in-memory\" map\nvar map = new Map(\"storageId\");  //creates a map that is loaded/persisted using html5 storage\n</code></pre>\n\n<hr>\n\n<pre><code>function Map(storageId) {\n    this.current = undefined;\n    this.size = 0;\n    this.storageId = storageId;\n    if (this.storageId) {\n        this.keys = new Array();\n        this.disableLinking();\n    }\n}\n\nMap.noop = function() {\n    return this;\n};\n\nMap.illegal = function() {\n    throw new Error(\"illegal operation for maps without linking\");\n};\n\n// map initialisation from existing object\n// doesn't add inherited properties if not explicitly instructed to:\n// omitting foreignKeys means foreignKeys === undefined, i.e. == false\n// --&gt; inherited properties won't be added\nMap.from = function(obj, foreignKeys) {\n    var map = new Map;\n    for(var prop in obj) {\n        if(foreignKeys || obj.hasOwnProperty(prop))\n            map.put(prop, obj[prop]);\n    }\n    return map;\n};\n\nMap.prototype.disableLinking = function() {\n    this.link = Map.noop;\n    this.unlink = Map.noop;\n    this.disableLinking = Map.noop;\n\n    this.next = Map.illegal;\n    this.key = Map.illegal;\n    this.value = Map.illegal;\n//    this.removeAll = Map.illegal;\n\n\n    return this;\n};\n\n// overwrite in Map instance if necessary\nMap.prototype.hash = function(value) {\n    return (typeof value) + ' ' + (value instanceof Object ?\n        (value.__hash || (value.__hash = ++arguments.callee.current)) :\n        value.toString());\n};\n\nMap.prototype.hash.current = 0;\n\n// --- mapping functions\n\nMap.prototype.get = function(key) {\n    var item = this[this.hash(key)];\n    if (item === undefined) {\n        if (this.storageId) {\n            try {\n                var itemStr = localStorage.getItem(this.storageId + key);\n                if (itemStr &amp;&amp; itemStr !== 'undefined') {\n                    item = JSON.parse(itemStr);\n                    this[this.hash(key)] = item;\n                    this.keys.push(key);\n                    ++this.size;\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    }\n    return item === undefined ? undefined : item.value;\n};\n\nMap.prototype.put = function(key, value) {\n    var hash = this.hash(key);\n\n    if(this[hash] === undefined) {\n        var item = { key : key, value : value };\n        this[hash] = item;\n\n        this.link(item);\n        ++this.size;\n    }\n    else this[hash].value = value;\n    if (this.storageId) {\n        this.keys.push(key);\n        try {\n            localStorage.setItem(this.storageId + key, JSON.stringify(this[hash]));\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return this;\n};\n\nMap.prototype.remove = function(key) {\n    var hash = this.hash(key);\n    var item = this[hash];\n    if(item !== undefined) {\n        --this.size;\n        this.unlink(item);\n\n        delete this[hash];\n    }\n    if (this.storageId) {\n        try {\n            localStorage.setItem(this.storageId + key, undefined);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    return this;\n};\n\n// only works if linked\nMap.prototype.removeAll = function() {\n    if (this.storageId) {\n        for (var i=0; i&lt;this.keys.length; i++) {\n            this.remove(this.keys[i]);\n        }\n        this.keys.length = 0;\n    } else {\n        while(this.size)\n            this.remove(this.key());\n    }\n    return this;\n};\n\n// --- linked list helper functions\n\nMap.prototype.link = function(item) {\n    if (this.storageId) {\n        return;\n    }\n    if(this.size == 0) {\n        item.prev = item;\n        item.next = item;\n        this.current = item;\n    }\n    else {\n        item.prev = this.current.prev;\n        item.prev.next = item;\n        item.next = this.current;\n        this.current.prev = item;\n    }\n};\n\nMap.prototype.unlink = function(item) {\n    if (this.storageId) {\n        return;\n    }\n    if(this.size == 0)\n        this.current = undefined;\n    else {\n        item.prev.next = item.next;\n        item.next.prev = item.prev;\n        if(item === this.current)\n            this.current = item.next;\n    }\n};\n\n// --- iterator functions - only work if map is linked\n\nMap.prototype.next = function() {\n    this.current = this.current.next;\n};\n\nMap.prototype.key = function() {\n    if (this.storageId) {\n        return undefined;\n    } else {\n        return this.current.key;\n    }\n};\n\nMap.prototype.value = function() {\n    if (this.storageId) {\n        return undefined;\n    }\n    return this.current.value;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is an easy and convenient way of using something similar to the java map:</p>\n\n<pre><code>var map= {\n        'map_name_1': map_value_1,\n        'map_name_2': map_value_2,\n        'map_name_3': map_value_3,\n        'map_name_4': map_value_4\n        }\n</code></pre>\n\n<p>And to get the value: </p>\n\n<pre><code>alert( map['map_name_1'] );    // fives the value of map_value_1\n\n......  etc  .....\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Adding yet another solution: <code>HashMap</code> is pretty much the first class I ported from Java to Javascript. You could say there is a lot of overhead, but the implementation is almost 100% equal to Java's implementation and includes all interfaces and subclasses.</p>\n\n<p>The project can be found here: <a href=\"https://github.com/Airblader/jsava\" rel=\"nofollow\">https://github.com/Airblader/jsava</a>\nI'll also attach the (current) source code for the HashMap class, but as stated it also depends on the super class etc. The OOP framework used is qooxdoo.</p>\n\n<p><strong>Edit:</strong> Please note that this code is already out-dated and refer to the github project for the current work. As of writing this, there is also an <code>ArrayList</code> implementation.</p>\n\n<pre><code>qx.Class.define( 'jsava.util.HashMap', {\n    extend: jsava.util.AbstractMap,\n    implement: [jsava.util.Map, jsava.io.Serializable, jsava.lang.Cloneable],\n\n    construct: function () {\n        var args = Array.prototype.slice.call( arguments ),\n            initialCapacity = this.self( arguments ).DEFAULT_INITIAL_CAPACITY,\n            loadFactor = this.self( arguments ).DEFAULT_LOAD_FACTOR;\n\n        switch( args.length ) {\n            case 1:\n                if( qx.Class.implementsInterface( args[0], jsava.util.Map ) ) {\n                    initialCapacity = Math.max( ((args[0].size() / this.self( arguments ).DEFAULT_LOAD_FACTOR) | 0) + 1,\n                        this.self( arguments ).DEFAULT_INITIAL_CAPACITY );\n                    loadFactor = this.self( arguments ).DEFAULT_LOAD_FACTOR;\n                } else {\n                    initialCapacity = args[0];\n                }\n                break;\n            case 2:\n                initialCapacity = args[0];\n                loadFactor = args[1];\n                break;\n        }\n\n        if( initialCapacity &lt; 0 ) {\n            throw new jsava.lang.IllegalArgumentException( 'Illegal initial capacity: ' + initialCapacity );\n        }\n        if( initialCapacity &gt; this.self( arguments ).MAXIMUM_CAPACITY ) {\n            initialCapacity = this.self( arguments ).MAXIMUM_CAPACITY;\n        }\n        if( loadFactor &lt;= 0 || isNaN( loadFactor ) ) {\n            throw new jsava.lang.IllegalArgumentException( 'Illegal load factor: ' + loadFactor );\n        }\n\n        var capacity = 1;\n        while( capacity &lt; initialCapacity ) {\n            capacity &lt;&lt;= 1;\n        }\n\n        this._loadFactor = loadFactor;\n        this._threshold = (capacity * loadFactor) | 0;\n        this._table = jsava.JsavaUtils.emptyArrayOfGivenSize( capacity, null );\n        this._init();\n    },\n\n    statics: {\n        serialVersionUID: 1,\n\n        DEFAULT_INITIAL_CAPACITY: 16,\n        MAXIMUM_CAPACITY: 1 &lt;&lt; 30,\n        DEFAULT_LOAD_FACTOR: 0.75,\n\n        _hash: function (hash) {\n            hash ^= (hash &gt;&gt;&gt; 20) ^ (hash &gt;&gt;&gt; 12);\n            return hash ^ (hash &gt;&gt;&gt; 7) ^ (hash &gt;&gt;&gt; 4);\n        },\n\n        _indexFor: function (hashCode, length) {\n            return hashCode &amp; (length - 1);\n        },\n\n        Entry: qx.Class.define( 'jsava.util.HashMap.Entry', {\n            extend: jsava.lang.Object,\n            implement: [jsava.util.Map.Entry],\n\n            construct: function (hash, key, value, nextEntry) {\n                this._value = value;\n                this._next = nextEntry;\n                this._key = key;\n                this._hash = hash;\n            },\n\n            members: {\n                _key: null,\n                _value: null,\n                /** @type jsava.util.HashMap.Entry */\n                _next: null,\n                /** @type Number */\n                _hash: 0,\n\n                getKey: function () {\n                    return this._key;\n                },\n\n                getValue: function () {\n                    return this._value;\n                },\n\n                setValue: function (newValue) {\n                    var oldValue = this._value;\n                    this._value = newValue;\n                    return oldValue;\n                },\n\n                equals: function (obj) {\n                    if( obj === null || !qx.Class.implementsInterface( obj, jsava.util.HashMap.Entry ) ) {\n                        return false;\n                    }\n\n                    /** @type jsava.util.HashMap.Entry */\n                    var entry = obj,\n                        key1 = this.getKey(),\n                        key2 = entry.getKey();\n                    if( key1 === key2 || (key1 !== null &amp;&amp; key1.equals( key2 )) ) {\n                        var value1 = this.getValue(),\n                            value2 = entry.getValue();\n                        if( value1 === value2 || (value1 !== null &amp;&amp; value1.equals( value2 )) ) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                },\n\n                hashCode: function () {\n                    return (this._key === null ? 0 : this._key.hashCode()) ^\n                        (this._value === null ? 0 : this._value.hashCode());\n                },\n\n                toString: function () {\n                    return this.getKey() + '=' + this.getValue();\n                },\n\n                /**\n                 * This method is invoked whenever the value in an entry is\n                 * overwritten by an invocation of put(k,v) for a key k that's already\n                 * in the HashMap.\n                 */\n                _recordAccess: function (map) {\n                },\n\n                /**\n                 * This method is invoked whenever the entry is\n                 * removed from the table.\n                 */\n                _recordRemoval: function (map) {\n                }\n            }\n        } )\n    },\n\n    members: {\n        /** @type jsava.util.HashMap.Entry[] */\n        _table: null,\n        /** @type Number */\n        _size: 0,\n        /** @type Number */\n        _threshold: 0,\n        /** @type Number */\n        _loadFactor: 0,\n        /** @type Number */\n        _modCount: 0,\n        /** @implements jsava.util.Set */\n        __entrySet: null,\n\n        /**\n         * Initialization hook for subclasses. This method is called\n         * in all constructors and pseudo-constructors (clone, readObject)\n         * after HashMap has been initialized but before any entries have\n         * been inserted.  (In the absence of this method, readObject would\n         * require explicit knowledge of subclasses.)\n         */\n        _init: function () {\n        },\n\n        size: function () {\n            return this._size;\n        },\n\n        isEmpty: function () {\n            return this._size === 0;\n        },\n\n        get: function (key) {\n            if( key === null ) {\n                return this.__getForNullKey();\n            }\n\n            var hash = this.self( arguments )._hash( key.hashCode() );\n            for( var entry = this._table[this.self( arguments )._indexFor( hash, this._table.length )];\n                 entry !== null; entry = entry._next ) {\n                /** @type jsava.lang.Object */\n                var k;\n                if( entry._hash === hash &amp;&amp; ((k = entry._key) === key || key.equals( k )) ) {\n                    return entry._value;\n                }\n            }\n\n            return null;\n        },\n\n        __getForNullKey: function () {\n            for( var entry = this._table[0]; entry !== null; entry = entry._next ) {\n                if( entry._key === null ) {\n                    return entry._value;\n                }\n            }\n\n            return null;\n        },\n\n        containsKey: function (key) {\n            return this._getEntry( key ) !== null;\n        },\n\n        _getEntry: function (key) {\n            var hash = (key === null) ? 0 : this.self( arguments )._hash( key.hashCode() );\n            for( var entry = this._table[this.self( arguments )._indexFor( hash, this._table.length )];\n                 entry !== null; entry = entry._next ) {\n                /** @type jsava.lang.Object */\n                var k;\n                if( entry._hash === hash\n                    &amp;&amp; ( ( k = entry._key ) === key || ( key !== null &amp;&amp; key.equals( k ) ) ) ) {\n                    return entry;\n                }\n            }\n\n            return null;\n        },\n\n        put: function (key, value) {\n            if( key === null ) {\n                return this.__putForNullKey( value );\n            }\n\n            var hash = this.self( arguments )._hash( key.hashCode() ),\n                i = this.self( arguments )._indexFor( hash, this._table.length );\n            for( var entry = this._table[i]; entry !== null; entry = entry._next ) {\n                /** @type jsava.lang.Object */\n                var k;\n                if( entry._hash === hash &amp;&amp; ( (k = entry._key) === key || key.equals( k ) ) ) {\n                    var oldValue = entry._value;\n                    entry._value = value;\n                    entry._recordAccess( this );\n                    return oldValue;\n                }\n            }\n\n            this._modCount++;\n            this._addEntry( hash, key, value, i );\n            return null;\n        },\n\n        __putForNullKey: function (value) {\n            for( var entry = this._table[0]; entry !== null; entry = entry._next ) {\n                if( entry._key === null ) {\n                    var oldValue = entry._value;\n                    entry._value = value;\n                    entry._recordAccess( this );\n                    return oldValue;\n                }\n            }\n\n            this._modCount++;\n            this._addEntry( 0, null, value, 0 );\n            return null;\n        },\n\n        __putForCreate: function (key, value) {\n            var hash = (key === null) ? 0 : this.self( arguments )._hash( key.hashCode() ),\n                i = this.self( arguments )._indexFor( hash, this._table.length );\n            for( var entry = this._table[i]; entry !== null; entry = entry._next ) {\n                /** @type jsava.lang.Object */\n                var k;\n                if( entry._hash === hash\n                    &amp;&amp; ( (k = entry._key) === key || ( key !== null &amp;&amp; key.equals( k ) ) ) ) {\n                    entry._value = value;\n                    return;\n                }\n            }\n\n            this._createEntry( hash, key, value, i );\n        },\n\n        __putAllForCreate: function (map) {\n            var iterator = map.entrySet().iterator();\n            while( iterator.hasNext() ) {\n                var entry = iterator.next();\n                this.__putForCreate( entry.getKey(), entry.getValue() );\n            }\n        },\n\n        _resize: function (newCapacity) {\n            var oldTable = this._table,\n                oldCapacity = oldTable.length;\n            if( oldCapacity === this.self( arguments ).MAXIMUM_CAPACITY ) {\n                this._threshold = Number.MAX_VALUE;\n                return;\n            }\n\n            var newTable = jsava.JsavaUtils.emptyArrayOfGivenSize( newCapacity, null );\n            this._transfer( newTable );\n            this._table = newTable;\n            this._threshold = (newCapacity * this._loadFactor) | 0;\n        },\n\n        _transfer: function (newTable) {\n            var src = this._table,\n                newCapacity = newTable.length;\n            for( var j = 0; j &lt; src.length; j++ ) {\n                var entry = src[j];\n                if( entry !== null ) {\n                    src[j] = null;\n                    do {\n                        var next = entry._next,\n                            i = this.self( arguments )._indexFor( entry._hash, newCapacity );\n                        entry._next = newTable[i];\n                        newTable[i] = entry;\n                        entry = next;\n                    } while( entry !== null );\n                }\n            }\n        },\n\n        putAll: function (map) {\n            var numKeyToBeAdded = map.size();\n            if( numKeyToBeAdded === 0 ) {\n                return;\n            }\n\n            if( numKeyToBeAdded &gt; this._threshold ) {\n                var targetCapacity = (numKeyToBeAdded / this._loadFactor + 1) | 0;\n                if( targetCapacity &gt; this.self( arguments ).MAXIMUM_CAPACITY ) {\n                    targetCapacity = this.self( arguments ).MAXIMUM_CAPACITY;\n                }\n\n                var newCapacity = this._table.length;\n                while( newCapacity &lt; targetCapacity ) {\n                    newCapacity &lt;&lt;= 1;\n                }\n                if( newCapacity &gt; this._table.length ) {\n                    this._resize( newCapacity );\n                }\n            }\n\n            var iterator = map.entrySet().iterator();\n            while( iterator.hasNext() ) {\n                var entry = iterator.next();\n                this.put( entry.getKey(), entry.getValue() );\n            }\n        },\n\n        remove: function (key) {\n            var entry = this._removeEntryForKey( key );\n            return entry === null ? null : entry._value;\n        },\n\n        _removeEntryForKey: function (key) {\n            var hash = (key === null) ? 0 : this.self( arguments )._hash( key.hashCode() ),\n                i = this.self( arguments )._indexFor( hash, this._table.length ),\n                prev = this._table[i],\n                entry = prev;\n\n            while( entry !== null ) {\n                var next = entry._next,\n                    /** @type jsava.lang.Object */\n                        k;\n                if( entry._hash === hash\n                    &amp;&amp; ( (k = entry._key) === key || ( key !== null &amp;&amp; key.equals( k ) ) ) ) {\n                    this._modCount++;\n                    this._size--;\n                    if( prev === entry ) {\n                        this._table[i] = next;\n                    } else {\n                        prev._next = next;\n                    }\n                    entry._recordRemoval( this );\n                    return entry;\n                }\n                prev = entry;\n                entry = next;\n            }\n\n            return entry;\n        },\n\n        _removeMapping: function (obj) {\n            if( obj === null || !qx.Class.implementsInterface( obj, jsava.util.Map.Entry ) ) {\n                return null;\n            }\n\n            /** @implements jsava.util.Map.Entry */\n            var entry = obj,\n                key = entry.getKey(),\n                hash = (key === null) ? 0 : this.self( arguments )._hash( key.hashCode() ),\n                i = this.self( arguments )._indexFor( hash, this._table.length ),\n                prev = this._table[i],\n                e = prev;\n\n            while( e !== null ) {\n                var next = e._next;\n                if( e._hash === hash &amp;&amp; e.equals( entry ) ) {\n                    this._modCount++;\n                    this._size--;\n                    if( prev === e ) {\n                        this._table[i] = next;\n                    } else {\n                        prev._next = next;\n                    }\n                    e._recordRemoval( this );\n                    return e;\n                }\n                prev = e;\n                e = next;\n            }\n\n            return e;\n        },\n\n        clear: function () {\n            this._modCount++;\n            var table = this._table;\n            for( var i = 0; i &lt; table.length; i++ ) {\n                table[i] = null;\n            }\n            this._size = 0;\n        },\n\n        containsValue: function (value) {\n            if( value === null ) {\n                return this.__containsNullValue();\n            }\n\n            var table = this._table;\n            for( var i = 0; i &lt; table.length; i++ ) {\n                for( var entry = table[i]; entry !== null; entry = entry._next ) {\n                    if( value.equals( entry._value ) ) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n\n        __containsNullValue: function () {\n            var table = this._table;\n            for( var i = 0; i &lt; table.length; i++ ) {\n                for( var entry = table[i]; entry !== null; entry = entry._next ) {\n                    if( entry._value === null ) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n\n        clone: function () {\n            /** @type jsava.util.HashMap */\n            var result = null;\n            try {\n                result = this.base( arguments );\n            } catch( e ) {\n                if( !qx.Class.isSubClassOf( e.constructor, jsava.lang.CloneNotSupportedException ) ) {\n                    throw e;\n                }\n            }\n\n            result._table = jsava.JsavaUtils.emptyArrayOfGivenSize( this._table.length, null );\n            result.__entrySet = null;\n            result._modCount = 0;\n            result._size = 0;\n            result._init();\n            result.__putAllForCreate( this );\n\n            return result;\n        },\n\n        _addEntry: function (hash, key, value, bucketIndex) {\n            var entry = this._table[bucketIndex];\n            this._table[bucketIndex] = new (this.self( arguments ).Entry)( hash, key, value, entry );\n            if( this._size++ &gt;= this._threshold ) {\n                this._resize( 2 * this._table.length );\n            }\n        },\n\n        _createEntry: function (hash, key, value, bucketIndex) {\n            var entry = this._table[bucketIndex];\n            this._table[bucketIndex] = new (this.self( arguments ).Entry)( hash, key, value, entry );\n            this._size++;\n        },\n\n        keySet: function () {\n            var keySet = this._keySet;\n            return keySet !== null ? keySet : ( this._keySet = new this.KeySet( this ) );\n        },\n\n        values: function () {\n            var values = this._values;\n            return values !== null ? values : ( this._values = new this.Values( this ) );\n        },\n\n        entrySet: function () {\n            return this.__entrySet0();\n        },\n\n        __entrySet0: function () {\n            var entrySet = this.__entrySet;\n            return entrySet !== null ? entrySet : ( this.__entrySet = new this.EntrySet( this ) );\n        },\n\n        /** @private */\n        HashIterator: qx.Class.define( 'jsava.util.HashMap.HashIterator', {\n            extend: jsava.lang.Object,\n            implement: [jsava.util.Iterator],\n\n            type: 'abstract',\n\n            /** @protected */\n            construct: function (thisHashMap) {\n                this.__thisHashMap = thisHashMap;\n                this._expectedModCount = this.__thisHashMap._modCount;\n                if( this.__thisHashMap._size &gt; 0 ) {\n                    var table = this.__thisHashMap._table;\n                    while( this._index &lt; table.length &amp;&amp; ( this._next = table[this._index++] ) === null ) {\n                        // do nothing\n                    }\n                }\n            },\n\n            members: {\n                __thisHashMap: null,\n\n                /** @type jsava.util.HashMap.Entry */\n                _next: null,\n                /** @type Number */\n                _expectedModCount: 0,\n                /** @type Number */\n                _index: 0,\n                /** @type jsava.util.HashMap.Entry */\n                _current: null,\n\n                hasNext: function () {\n                    return this._next !== null;\n                },\n\n                _nextEntry: function () {\n                    if( this.__thisHashMap._modCount !== this._expectedModCount ) {\n                        throw new jsava.lang.ConcurrentModificationException();\n                    }\n\n                    var entry = this._next;\n                    if( entry === null ) {\n                        throw new jsava.lang.NoSuchElementException();\n                    }\n\n                    if( (this._next = entry._next) === null ) {\n                        var table = this.__thisHashMap._table;\n                        while( this._index &lt; table.length &amp;&amp; ( this._next = table[this._index++] ) === null ) {\n                            // do nothing\n                        }\n                    }\n\n                    this._current = entry;\n                    return entry;\n                },\n\n                remove: function () {\n                    if( this._current === null ) {\n                        throw new jsava.lang.IllegalStateException();\n                    }\n\n                    if( this.__thisHashMap._modCount !== this._expectedModCount ) {\n                        throw new jsava.lang.ConcurrentModificationException();\n                    }\n\n                    var key = this._current._key;\n                    this._current = null;\n                    this.__thisHashMap._removeEntryForKey( key );\n                    this._expectedModCount = this.__thisHashMap._modCount;\n                }\n            }\n        } ),\n\n        _newKeyIterator: function () {\n            return new this.KeyIterator( this );\n        },\n\n        _newValueIterator: function () {\n            return new this.ValueIterator( this );\n        },\n\n        _newEntryIterator: function () {\n            return new this.EntryIterator( this );\n        },\n\n        /** @private */\n        ValueIterator: qx.Class.define( 'jsava.util.HashMap.ValueIterator', {\n            extend: jsava.util.HashMap.HashIterator,\n\n            construct: function (thisHashMap) {\n                this.base( arguments, thisHashMap );\n            },\n\n            members: {\n                next: function () {\n                    return this._nextEntry()._value;\n                }\n            }\n        } ),\n\n        /** @private */\n        KeyIterator: qx.Class.define( 'jsava.util.HashMap.KeyIterator', {\n            extend: jsava.util.HashMap.HashIterator,\n\n            construct: function (thisHashMap) {\n                this.base( arguments, thisHashMap );\n            },\n\n            members: {\n                next: function () {\n                    return this._nextEntry().getKey();\n                }\n            }\n        } ),\n\n        /** @private */\n        EntryIterator: qx.Class.define( 'jsava.util.HashMap.EntryIterator', {\n            extend: jsava.util.HashMap.HashIterator,\n\n            construct: function (thisHashMap) {\n                this.base( arguments, thisHashMap );\n            },\n\n            members: {\n                next: function () {\n                    return this._nextEntry();\n                }\n            }\n        } ),\n\n        /** @private */\n        KeySet: qx.Class.define( 'jsava.util.HashMap.KeySet', {\n            extend: jsava.util.AbstractSet,\n\n            construct: function (thisHashMap) {\n                this.base( arguments );\n                this.__thisHashMap = thisHashMap;\n            },\n\n            members: {\n                __thisHashMap: null,\n\n                iterator: function () {\n                    return this.__thisHashMap._newKeyIterator();\n                },\n\n                size: function () {\n                    return this.__thisHashMap._size;\n                },\n\n                contains: function (obj) {\n                    return this.__thisHashMap.containsKey( obj );\n                },\n\n                remove: function (obj) {\n                    return this.__thisHashMap._removeEntryForKey( obj ) !== null;\n                },\n\n                clear: function () {\n                    this.__thisHashMap.clear();\n                }\n            }\n        } ),\n\n        /** @private */\n        Values: qx.Class.define( 'jsava.util.HashMap.Values', {\n            extend: jsava.util.AbstractCollection,\n\n            construct: function (thisHashMap) {\n                this.base( arguments );\n                this.__thisHashMap = thisHashMap;\n            },\n\n            members: {\n                __thisHashMap: null,\n\n                iterator: function () {\n                    return this.__thisHashMap._newValueIterator();\n                },\n\n                size: function () {\n                    return this.__thisHashMap._size;\n                },\n\n                contains: function (obj) {\n                    return this.__thisHashMap.containsValue( obj );\n                },\n\n                clear: function () {\n                    this.__thisHashMap.clear();\n                }\n            }\n        } ),\n\n        /** @private */\n        EntrySet: qx.Class.define( 'jsava.util.HashMap.EntrySet', {\n            extend: jsava.util.AbstractSet,\n\n            construct: function (thisHashMap) {\n                this.base( arguments );\n                this.__thisHashMap = thisHashMap;\n            },\n\n            members: {\n                __thisHashMap: null,\n\n                iterator: function () {\n                    return this.__thisHashMap._newEntryIterator();\n                },\n\n                size: function () {\n                    return this.__thisHashMap._size;\n                },\n\n                contains: function (obj) {\n                    if( obj === null || !qx.Class.implementsInterface( obj, jsava.util.Map.Entry ) ) {\n                        return false;\n                    }\n\n                    /** @implements jsava.util.Map.Entry */\n                    var entry = obj,\n                        candidate = this.__thisHashMap._getEntry( entry.getKey() );\n                    return candidate !== null &amp;&amp; candidate.equals( entry );\n                },\n\n                remove: function (obj) {\n                    return this.__thisHashMap._removeMapping( obj ) !== null;\n                },\n\n                clear: function () {\n                    this.__thisHashMap.clear();\n                }\n            }\n        } )\n    }\n} );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This looks like a pretty robust solution: <a href=\"https://github.com/flesler/hashmap\" rel=\"nofollow\">https://github.com/flesler/hashmap</a> . It will even work well for functions and objects that look identical. The only hack it uses is adding an obscure member to an object to identify it. If your program doesn't overwrite that obscure variable (its something like <em>hashid</em>), you're golden.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In ECMA6 you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\" rel=\"nofollow\">WeakMap</a> </p>\n\n<p>Example:</p>\n\n<pre><code>var wm1 = new WeakMap(),\n    wm2 = new WeakMap(),\n    wm3 = new WeakMap();\nvar o1 = {},\n    o2 = function(){},\n    o3 = window;\n\nwm1.set(o1, 37);\nwm1.set(o2, \"azerty\");\nwm2.set(o1, o2); // a value can be anything, including an object or a function\nwm2.set(o3, undefined);\nwm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n\nwm1.get(o2); // \"azerty\"\nwm2.get(o2); // undefined, because there is no value for o2 on wm2\nwm2.get(o3); // undefined, because that is the set value\n\nwm1.has(o2); // true\nwm2.has(o2); // false\nwm2.has(o3); // true (even if the value itself is 'undefined')\n\nwm3.set(o1, 37);\nwm3.get(o1); // 37\nwm3.clear();\nwm3.get(o1); // undefined, because wm3 was cleared and there is no value for o1 anymore\n\nwm1.has(o1);   // true\nwm1.delete(o1);\nwm1.has(o1);   // false\n</code></pre>\n\n<p>But:</p>\n\n<pre><code>Because of references being weak, WeakMap keys are not enumerable (i.e. there is no method giving you a list of the keys). \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If performance is not critical (e.g. the amount of keys is relatively small) and you don't want to pollute your (or maybe not your) objects with additional fields like <code>_hash</code>, <code>_id</code>, etc., then you can make use of the fact that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"nofollow\"><code>Array.prototype.indexOf</code></a> employs strict equality. Here is a simple implementation:</p>\n\n<pre><code>var Dict = (function(){\n    // IE 8 and earlier has no Array.prototype.indexOf\n    function indexOfPolyfill(val) {\n      for (var i = 0, l = this.length; i &lt; l; ++i) {\n        if (this[i] === val) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n    function Dict(){\n      this.keys = [];\n      this.values = [];\n      if (!this.keys.indexOf) {\n        this.keys.indexOf = indexOfPolyfill;\n      }\n    };\n\n    Dict.prototype.has = function(key){\n      return this.keys.indexOf(key) != -1;\n    };\n\n    Dict.prototype.get = function(key, defaultValue){\n      var index = this.keys.indexOf(key);\n      return index == -1 ? defaultValue : this.values[index];\n    };\n\n    Dict.prototype.set = function(key, value){\n      var index = this.keys.indexOf(key);\n      if (index == -1) {\n        this.keys.push(key);\n        this.values.push(value);\n      } else {\n        var prevValue = this.values[index];\n        this.values[index] = value;\n        return prevValue;\n      }\n    };\n\n    Dict.prototype.delete = function(key){\n      var index = this.keys.indexOf(key);\n      if (index != -1) {\n        this.keys.splice(index, 1);\n        return this.values.splice(index, 1)[0];\n      }\n    };\n\n    Dict.prototype.clear = function(){\n      this.keys.splice(0, this.keys.length);\n      this.values.splice(0, this.values.length);\n    };\n\n    return Dict;\n})();\n</code></pre>\n\n<p>Example of usage:</p>\n\n<pre><code>var a = {}, b = {},\n    c = { toString: function(){ return '1'; } },\n    d = 1, s = '1', u = undefined, n = null,\n    dict = new Dict();\n\n// keys and values can be anything\ndict.set(a, 'a');\ndict.set(b, 'b');\ndict.set(c, 'c');\ndict.set(d, 'd');\ndict.set(s, 's');\ndict.set(u, 'u');\ndict.set(n, 'n');\n\ndict.get(a); // 'a'\ndict.get(b); // 'b'\ndict.get(s); // 's'\ndict.get(u); // 'u'\ndict.get(n); // 'n'\n// etc.\n</code></pre>\n\n<p>Comparing to ES6 WeakMap it has two issues: O(n) search time and non-weakness (i.e. it will cause memory leak if you don't use <code>delete</code> or <code>clear</code> to release keys).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\" rel=\"nofollow\"><code>WeakMap</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"nofollow\"><code>Map</code></a>:</p>\n\n<ul>\n<li><blockquote><p>WeakMaps are key/value maps in which keys are objects.</p></blockquote></li>\n<li><blockquote><p>\n<code>Map</code> objects are simple key/value maps. Any value (both objects and primitive values) may be used as either a key or a value.\n</p></blockquote></li>\n</ul>\n\n<p>Be aware that neither is widely supported, but you can use <a href=\"https://github.com/paulmillr/es6-shim\" rel=\"nofollow\">ES6 Shim</a> (requires native ES5 or <a href=\"https://github.com/kriskowal/es5-shim\" rel=\"nofollow\">ES5 Shim</a>) to support <code>Map</code>, but not <code>WeakMap</code> (<a href=\"https://github.com/paulmillr/es6-shim#weakmap-shim\" rel=\"nofollow\">see why</a>).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Yet another map implementation by me. With randomizer, 'generics' and 'iterator' =)</p>\n\n<pre><code>var HashMap = function (TKey, TValue) {\n    var db = [];\n    var keyType, valueType;\n\n    (function () {\n        keyType = TKey;\n        valueType = TValue;\n    })();\n\n    var getIndexOfKey = function (key) {\n        if (typeof key !== keyType)\n            throw new Error('Type of key should be ' + keyType);\n        for (var i = 0; i &lt; db.length; i++) {\n            if (db[i][0] == key)\n                return i;\n        }\n        return -1;\n    }\n\n    this.add = function (key, value) {\n        if (typeof key !== keyType) {\n            throw new Error('Type of key should be ' + keyType);\n        } else if (typeof value !== valueType) {\n            throw new Error('Type of value should be ' + valueType);\n        }\n        var index = getIndexOfKey(key);\n        if (index === -1)\n            db.push([key, value]);\n        else\n            db[index][1] = value;\n        return this;\n    }\n\n    this.get = function (key) {\n        if (typeof key !== keyType || db.length === 0)\n            return null;\n        for (var i = 0; i &lt; db.length; i++) {\n            if (db[i][0] == key)\n                return db[i][1];\n        }\n        return null;\n    }\n\n    this.size = function () {\n        return db.length;\n    }\n\n    this.keys = function () {\n        if (db.length === 0)\n            return [];\n        var result = [];\n        for (var i = 0; i &lt; db.length; i++) {\n            result.push(db[i][0]);\n        }\n        return result;\n    }\n\n    this.values = function () {\n        if (db.length === 0)\n            return [];\n        var result = [];\n        for (var i = 0; i &lt; db.length; i++) {\n            result.push(db[i][1]);\n        }\n        return result;\n    }\n\n    this.randomize = function () {\n        if (db.length === 0)\n            return this;\n        var currentIndex = db.length, temporaryValue, randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n            temporaryValue = db[currentIndex];\n            db[currentIndex] = db[randomIndex];\n            db[randomIndex] = temporaryValue;\n        }\n        return this;\n    }\n\n    this.iterate = function (callback) {\n        if (db.length === 0)\n            return false;\n        for (var i = 0; i &lt; db.length; i++) {\n            callback(db[i][0], db[i][1]);\n        }\n        return true;\n    }\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var a = new HashMap(\"string\", \"number\");\na.add('test', 1132)\n .add('test14', 666)\n .add('1421test14', 12312666)\n .iterate(function (key, value) {console.log('a['+key+']='+value)});\n/*\na[test]=1132\na[test14]=666\na[1421test14]=12312666 \n*/\na.randomize();\n/*\na[1421test14]=12312666\na[test]=1132\na[test14]=666\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this question is pretty old, but there are some really great solutions nowadays with external libraries.</p>\n\n<ul>\n<li><a href=\"http://underscorejs.org/\" rel=\"nofollow\">underscore.js</a></li>\n<li><a href=\"http://www.collectionsjs.com/\" rel=\"nofollow\">collections.js</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>As made clear in update 3 on <a href=\"http://stackoverflow.com/questions/367440/javascript-associative-array-without-tostring-etc#367454\">this answer</a>, this notation:</p>\n\n<pre><code>var hash = {};\nhash[X]\n</code></pre>\n\n<p>does not actually hash the object <code>X</code>; it actually just converts <code>X</code> to a string (via <code>.toString()</code> if it's an object, or some other built-in conversions for various primitive types) and then looks that string up, without hashing it, in \"<code>hash</code>\". Object equality is also not checked - if two different objects have the same string conversion, they will just overwrite each other.</p>\n\n<p>Given this - are there any efficient implementations of hashmaps in javascript? (For example, the 2nd Google result of <a href=\"http://www.google.com/search?rlz=1C1GGLS_en-USUS299US303&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=javascript+hashmap\"><code>javascript hashmap</code></a> yields an implementation which is O(n) for any operation. Various other results ignore the fact that different objects with equivalent string representations overwrite each other.</p>\n",
            "last_activity_date": 1424281418,
            "question_id": 368280,
            "score": 126,
            "tags": [
                "javascript",
                "data-structures",
                "language-features",
                "hashmap"
            ],
            "title": "JavaScript Hashmap Equivalent"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>RequireJS can be configured to append a value to each of the script urls for cache busting. </p>\n\n<p>From the RequireJS documentation (<a href=\"http://requirejs.org/docs/api.html#config\">http://requirejs.org/docs/api.html#config</a>):</p>\n\n<blockquote>\n  <p><strong>urlArgs</strong>: Extra query string arguments appended to URLs that RequireJS\n  uses to fetch resources. Most useful to cache bust when the browser or\n  server is not configured correctly. </p>\n</blockquote>\n\n<p>Example, appending \"v2\" to all scripts:</p>\n\n<pre><code>require.config({\n    urlArgs: \"bust=v2\"\n});\n</code></pre>\n\n<p>For development purposes, you can force RequireJS to bypass the cache by appending a timestamp:</p>\n\n<pre><code>require.config({\n    urlArgs: \"bust=\" + (new Date()).getTime()\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 286
                },
                {
                    "body": "<p>Inspired by <a href=\"http://stackoverflow.com/questions/11088909/expire-cache-on-require-js-data-main\">Expire cache on require.js data-main</a> we updated our deploy script with the following ant task:</p>\n\n<pre><code>&lt;target name=\"deployWebsite\"&gt;\n    &lt;untar src=\"${temp.dir}/website.tar.gz\" dest=\"${website.dir}\" compression=\"gzip\" /&gt;       \n    &lt;!-- fetch latest buildNumber from build agent --&gt;\n    &lt;replace file=\"${website.dir}/js/main.js\" token=\"@Revision@\" value=\"${buildNumber}\" /&gt;\n&lt;/target&gt;\n</code></pre>\n\n<p>Where the beginning of main.js looks like:</p>\n\n<pre><code>require.config({\n    baseUrl: '/js',\n    urlArgs: 'bust=@Revision@',\n    ...\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<h2>Do not use urlArgs for this!</h2>\n\n<p>Require script loads respect http caching headers. (Scripts are loaded with a dynamically inserted <code>&lt;script&gt;</code>, which means the request looks just like any old asset getting loaded.)</p>\n\n<p>Serve your javascript assets with the proper HTTP headers to disable caching during development. </p>\n\n<p>Using require's urlArgs means any breakpoints you set will not be preserved across refreshes; you end up needing to put <code>debugger</code> statements everywhere in your code. Bad. I use <code>urlArgs</code> for cache-busting assets during production upgrades with the git sha; then I can set my assets to be cached forever and be guaranteed to never have stale assets. </p>\n\n<p>In development, I mock all ajax requests with a complex <a href=\"https://github.com/appendto/jquery-mockjax\">mockjax</a> configuration, then I can serve my app in javascript-only mode with a <a href=\"https://gist.github.com/dustingetz/5348582\">10 line python http server with all caching turned off</a>. This has scaled up for me to a quite large \"enterprisey\" application with hundreds of restful webservice endpoints. We even have a contracted designer who can work with our real production codebase without giving him access to our backend code.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p><strong>Quick Fix for Development</strong></p>\n\n<p>For development, you could just <strong>disable the cache in Chrome Dev Tools</strong> (<a href=\"http://stackoverflow.com/questions/5690269/disabling-chrome-cache-for-website-development\">Disabling Chrome cache for website development</a>). The cache disabling happens only if the dev tools dialog is open, so you need not worry about toggling this option every time you do regular browsing.</p>\n\n<p>Note: Using '<strong>urlArgs</strong>' is the proper solution in production so that users get the latest code. But it makes debugging difficult because chrome invalidates breakpoints with every refresh (because its a 'new' file being served each time).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<h3>In production</h3>\n\n<p><strong><code>urlArgs</code> can cause problems!</strong></p>\n\n<p>The principal author of requirejs <a href=\"https://groups.google.com/d/msg/requirejs/3E9dP_BSQoY/36ut2Gtko7cJ\">prefers not to use <code>urlArgs</code></a>:</p>\n\n<blockquote>\n  <p>For deployed assets, I prefer to put the version or hash for the whole\n  build as a build directory, then just modify the <code>baseUrl</code> config used\n  for the project to use that versioned directory as the <code>baseUrl</code>. Then\n  no other files change, and it helps avoid <strong>some proxy issues where they\n  may not cache an URL with a query string on it.</strong></p>\n</blockquote>\n\n<p>[Styling mine.]</p>\n\n<p>I follow this advice.</p>\n\n<h3>In development</h3>\n\n<p>I prefer to use a server that intelligently caches files that may change frequently: a server that emits <code>Last-Modified</code> and responds to <code>If-Modified-Since</code> with 304 when appropriate. Even a server based on Node's <a href=\"http://expressjs.com/\">express</a> set to serve static files does this right out the box. It does not require doing anything to my browser, and does not mess up breakpoints.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I took this snippet from <a href=\"http://www.askapache.com/htaccess/using-http-headers-with-htaccess.html#100_Prevent_Files_cached\">AskApache</a> and put it into a seperate .conf file of my local Apache webserver (in my case /etc/apache2/others/preventcaching.conf):</p>\n\n<pre><code>&lt;FilesMatch \"\\.(html|htm|js|css)$\"&gt;\nFileETag None\n&lt;ifModule mod_headers.c&gt;\nHeader unset ETag\nHeader set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate\"\nHeader set Pragma \"no-cache\"\nHeader set Expires \"Wed, 11 Jan 1984 05:00:00 GMT\"\n&lt;/ifModule&gt;\n&lt;/FilesMatch&gt;\n</code></pre>\n\n<p>For development this works fine with no need to change the code. As for the production, I might use @dvtoever's approach.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The urlArgs solution has problems. Unfortunately you cannot control all proxy servers that might be between you and your user's web browser. Some of these proxy servers can be unfortunately configured to ignore URL parameters when caching files. If this happens, the wrong version of your JS file will be delivered to your user.</p>\n\n<p>I finally gave up and <a href=\"https://github.com/jbcpollak/requirejs/commit/589ee0cdfe6f719cd761eee631ce68eee09a5a67\">implemented my own fix</a> directly into require.js. If you are willing to modify your version of the requirejs library, this solution might work for you.</p>\n\n<p>You can see the patch here:</p>\n\n<p><a href=\"https://github.com/jbcpollak/requirejs/commit/589ee0cdfe6f719cd761eee631ce68eee09a5a67\">https://github.com/jbcpollak/requirejs/commit/589ee0cdfe6f719cd761eee631ce68eee09a5a67</a></p>\n\n<p>Once added, you can do something like this in your require config:</p>\n\n<pre><code>var require = {\n    baseUrl: \"/scripts/\",\n    cacheSuffix: \".buildNumber\"\n}\n</code></pre>\n\n<p>Use your build system or server environment to replace <code>buildNumber</code> with a revision id / software version / favorite color.</p>\n\n<p>Using require like this:</p>\n\n<pre><code>require([\"myModule\"], function() {\n    // no-op;\n});\n</code></pre>\n\n<p>Will cause require to request this file:</p>\n\n<pre><code>http://yourserver.com/scripts/myModule.buildNumber.js\n</code></pre>\n\n<p>On our server environment, we use url rewrite rules to strip out the buildNumber, and serve the correct JS file. This way we don't actually have to worry about renaming all of our JS files.</p>\n\n<p>The patch will ignore any script that specifies a protocol, and it will not affect any non-JS files.</p>\n\n<p>This works well for my environment, but I realize some users would prefer a prefix rather than a suffix, it should be easy to modify my commit to suit your needs.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>In the pull request discussion, the requirejs author suggest this might work as a solution to prefix the revision number:</p>\n\n<pre><code>var require = {\n    baseUrl: \"/scripts/buildNumber.\"\n};\n</code></pre>\n\n<p>I have not tried this, but the implication is that this would request the following URL:</p>\n\n<pre><code>http://yourserver.com/scripts/buildNumber.myModule.js\n</code></pre>\n\n<p>Which might work very well for many people who can use a prefix.</p>\n\n<p>Here are some possible duplicate questions:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/18242756/requirejs-and-proxy-caching/21619297#21619297\">RequireJS and proxy caching</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/13833094/require-js-how-can-i-set-a-version-on-required-modules-as-part-of-the-url/21619238#21619238\">require.js - How can I set a version on required modules as part of the URL?</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This is how I do it in Django / Flask (can be easily adapted to other languages / VCS systems):</p>\n\n<p>In your <code>config.py</code> (I use this in python3, so you may need to tweak the encoding in python2)</p>\n\n<pre><code>import subprocess\nGIT_HASH = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip().decode('utf-8')\n</code></pre>\n\n<p>Then in your template:</p>\n\n<pre><code>{% if config.DEBUG %}\n     require.config({urlArgs: \"bust=\" + (new Date().getTime())});\n{% else %}\n    require.config({urlArgs: \"bust=\" + {{ config.GIT_HASH|tojson }}});\n{% endif %}\n</code></pre>\n\n<ul>\n<li>Doesn't require manual build process</li>\n<li>Only runs <code>git rev-parse HEAD</code> once when the app starts, and stores it in the <code>config</code> object</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't recommend using '<strong>urlArgs</strong>' for cache bursting with RequireJS. As this does not solves the problem fully. Updating a version no will result in downloading all the resources, even though you have just changes a single resource.</p>\n\n<p>To handle this issue i recommend using Grunt modules like 'filerev' for creating revision no. On top of this i have written a custom task in Gruntfile to update the revision no wherever required.</p>\n\n<p>If needed i can share the code snippet for this task.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>RequireJS seems to do something internally that caches required javascript files. If I make a change to one of the required files, I have to rename the file in order for the changes to be applied.  </p>\n\n<p>The common trick of appending a version number as a querystring param to the end of the filename does not work with requirejs <code>&lt;script src=\"jsfile.js?v2\"&gt;&lt;/script&gt;</code> </p>\n\n<p>What I am looking for is a way to prevent this internal cacheing of RequireJS required scripts without having to rename my script files every time they are updated.</p>\n\n<p><strong>Cross-Platform Solution:</strong></p>\n\n<p>I am now using <code>urlArgs: \"bust=\" + (new Date()).getTime()</code> for automatic cache-busting during development and <code>urlArgs: \"bust=v2\"</code> for production where I increment the hard-coded version num after rolling out an updated required script.</p>\n\n<p><strong>Note:</strong></p>\n\n<p>@Dustin Getz mentioned in a recent answer that Chrome Developer Tools will drop breakpoints during debugging when Javascript files are continuously refreshed like this. One workaround  is to write <code>debugger;</code> in code to trigger a breakpoint in most Javascript debuggers.</p>\n\n<p><strong>Server-Specific Solutions:</strong></p>\n\n<p>For specific solutions that may work better for your server environment such as Node or Apache, see some of the answers below.</p>\n",
            "last_activity_date": 1425411346,
            "question_id": 8315088,
            "score": 174,
            "tags": [
                "javascript",
                "jquery",
                "requirejs"
            ],
            "title": "Prevent RequireJS from Caching Required Scripts"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You're using stuff that the specification is not final on, so I'd say that no, there's going to be a completely consistent, cross-browser way of fixing this.</p>\n\n<p>just use input type=\"text\", and use a form of javascript validation to make sure it's a number. </p>\n",
                    "is_accepted": false,
                    "score": -8
                },
                {
                    "body": "<p>Not what you asked for, but I do this because of a focus bug in WebKit with spinboxes:</p>\n\n<pre><code>// temporary fix for focus bug with webkit input type=number ui\nif (navigator.userAgent.indexOf(\"AppleWebKit\") &gt; -1 &amp;&amp; navigator.userAgent.indexOf(\"Mobile\") == -1)\n{\n    var els = document.querySelectorAll(\"input[type=number]\");\n    for (var el in els)\n        el.type = \"text\";\n}\n</code></pre>\n\n<p>It might give you an idea to help with what you need.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This CSS effectively hides the spin-button for webkit browsers (have tested it in Chrome 7.0.517.44 and Safari Version 5.0.2 (6533.18.5)):</p>\n\n<pre><code>input::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n    /* display: none; &lt;- Crashes Chrome on hover */\n    -webkit-appearance: none;\n    margin: 0; /* &lt;-- Apparently some margin are still there even though it's hidden */\n}\n</code></pre>\n\n<p>You can always use the inspector (webkit, possibly Firebug for Firefox) to look for matched CSS properties for the elements you are interested in, look for Pseudo elemnts. This image shows results for an input element type=\"number\":</p>\n\n<p><img src=\"http://i.stack.imgur.com/QATjk.png\" alt=\"Inspector for input type=number (Chrome)\"></p>\n",
                    "is_accepted": true,
                    "score": 306
                },
                {
                    "body": "<p>According to <a href=\"http://developer.apple.com/library/safari/codinghowtos/Mobile/UserExperience/_index.html#//apple_ref/doc/uid/DTS40008248-CH1-SUBSECTION11\">Apple\u2019s user experience coding guide for mobile Safari</a>, you can use the following to display a numeric keyboard in the iPhone browser:</p>\n\n\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input type=\"text\" pattern=\"[0-9]*\" /&gt;\n</code></pre>\n\n<p>A <code>pattern</code> of <code>\\d*</code> will also work.</p>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<p>Try using <code>input type=\"tel\"</code> instead. It pops up a keyboard with numbers, and it doesn\u2019t show spin boxes. It requires no JavaScript or plugins.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Firefox 29 currently adds support for number elements, so here's a snippet for hiding the spinners in webkit and moz based browsers:</p>\n\n<pre><code>input[type='number'] {\n    -moz-appearance:textfield;\n}\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>To make this work in Safari I found adding !important to the webkit adjustment forces the spin button to be hidden.</p>\n\n<pre><code>input::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n    /* display: none; &lt;- Crashes Chrome on hover */\n    -webkit-appearance: none !important;\n    margin: 0; /* &lt;-- Apparently some margin are still there even though it's hidden */\n}\n</code></pre>\n\n<p>I am still having trouble working out a solution for Opera as well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>Short answer:</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[type=\"number\"]::-webkit-outer-spin-button,\r\ninput[type=\"number\"]::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n}\r\ninput[type=\"number\"] {\r\n    -moz-appearance: textfield;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"number\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Longer answer:</h2>\n\n<p>To add to existing answer...</p>\n\n<h2>Firefox:</h2>\n\n<p>In current versions of Firefox, the (user agent) default value of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance\"><code>-moz-appearance</code> property</a> on these elements is <code>number-input</code>. Changing that to the value <code>textfield</code> effectively removes the spinner.</p>\n\n<pre><code>input[type=\"number\"] {\n    -moz-appearance: textfield;\n}\n</code></pre>\n\n<p>In some cases, you may want the spinner to be hidden <em>initially</em>, and then appear on hover/focus. (This is currently the default behavior in Chrome). If so, you can use the following:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[type=\"number\"] {\r\n    -moz-appearance: textfield;\r\n}\r\ninput[type=\"number\"]:hover,\r\ninput[type=\"number\"]:focus {\r\n    -moz-appearance: number-input;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"number\"/&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<h2>Chrome:</h2>\n\n<p>In current versions of Chrome, the (user agent) default value of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance\"><code>-webkit-appearance</code> property</a> on these elements is already <code>textfield</code>. In order to remove the spinner, the <code>-webkit-appearance</code> property's value needs to be changed to <code>none</code> on the <code>::-webkit-outer-spin-button</code>/<code>::-webkit-inner-spin-button</code> pseudo classes (it is <code>-webkit-appearance: inner-spin-button</code> by default).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[type=\"number\"]::-webkit-outer-spin-button,\r\ninput[type=\"number\"]::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"number\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It's worth pointing out that <code>margin: 0</code> is used to remove the margin in <em>older</em> versions of Chrome.</p>\n\n<p>Currently, as of writing this, here is the default user agent styling on the 'inner-spin-button' pseudo class:</p>\n\n<pre><code>input::-webkit-inner-spin-button {\n    -webkit-appearance: inner-spin-button;\n    display: inline-block;\n    cursor: default;\n    flex: 0 0 auto;\n    align-self: stretch;\n    -webkit-user-select: none;\n    opacity: 0;\n    pointer-events: none;\n    -webkit-user-modify: read-only;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>Is there a consistent way across browsers to hide the new spin boxes that some browsers (such as Chrome) render for HTML input of type number?  I am looking for a CSS or JavaScript method to prevent the up/down arrows from appearing.</p>\n\n<pre><code>&lt;input id=\"test\" type=\"number\"/&gt;\n</code></pre>\n",
            "last_activity_date": 1421206812,
            "question_id": 3790935,
            "score": 239,
            "tags": [
                "javascript",
                "css",
                "html5",
                "input",
                "numbers"
            ],
            "title": "Can I hide the HTML5 number input\u2019s spin box?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>JSON does not know anything about dates. What .NET does is a non-standard hack/extension.</p>\n\n<p>I would use a format that can be easily converted to a <code>Date</code> object in JavaScript, i.e. one that can be passed to <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow\"><code>new Date(...)</code></a>. The easiest and probably most portable format is the timestamp containing milliseconds since 1970.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>The <strong><a href=\"http://www.json.org/\" rel=\"nofollow\">JSON specification</a></strong> does not specify a format for exchanging dates which is why there are so many different ways to do it.</p>\n\n<p>The best way of handling this in JavaScript is to write a date parsing utility function to handle the expected formats.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><a href=\"http://json.org/\">JSON</a> itself <strong>does not</strong> specify how dates should be represented, but JavaScript does.</p>\n\n<p>You <em>should</em> use the format emitted by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a>'s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\"><code>toJSON</code></a> method:</p>\n\n<p><code>2012-04-23T18:25:43.511Z</code></p>\n\n<p>Here's why:</p>\n\n<ol>\n<li><p>It's human readable but also succinct</p></li>\n<li><p>It sorts correctly</p></li>\n<li><p>It includes fractional seconds, which can help re-establish chronology</p></li>\n<li><p>It conforms to <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a></p></li>\n<li><p>ISO 8601 has been well-established internationally for more than a decade</p></li>\n<li><p>ISO 8601 is endorsed by <a href=\"http://www.w3.org/TR/NOTE-datetime\">W3C</a>, <a href=\"http://tools.ietf.org/html/rfc3339\">RFC3339</a>, and <a href=\"http://xkcd.com/1179/\">XKCD</a></p></li>\n</ol>\n\n<p><strong>That being said</strong>, every date library ever written can understand \"milliseconds since 1970\". So for easy portability, ThiefMaster is right.</p>\n",
                    "is_accepted": true,
                    "score": 299
                }
            ],
            "body": "<p>I've seen so many different standards for the JSON date format:</p>\n\n<pre><code>\"\\\"\\\\/Date(1335205592410)\\\\/\\\"\"         .NET JavaScriptSerializer\n\"\\\"\\\\/Date(1335205592410-0500)\\\\/\\\"\"    .NET DataContractJsonSerializer\n\"2012-04-23T18:25:43.511Z\"              JavaScript built-in JSON object\n\"2012-04-21T18:25:43-05:00\"             ISO 8601\n</code></pre>\n\n<p>Which one is the right one? Or best? Is there any sort of standard on this?</p>\n",
            "last_activity_date": 1423210129,
            "question_id": 10286204,
            "score": 177,
            "tags": [
                "javascript",
                "json"
            ],
            "title": "The &quot;right&quot; JSON date format"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Quick and dirty solution: remove <code>//= require_tree .</code> from <code>application.js</code>.</p>\n\n<p>As I explain in the comments for the question, this doesn't actually solve the underlying issue that is causing the error, but merely sidesteps it.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I had this problem and was scowering the internet I am running Windows 8 with this rails gem file</p>\n\n<pre><code>source 'https://rubygems.org'\n\ngem 'rails', '3.2.9'\n\n# Bundle edge Rails instead:\n# gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'\n\ngroup :development do gem 'sqlite3', '1.3.5' \nend\n\n# Gems used only for assets and not required # in production environments by default. \n\ngroup :assets do \n    gem 'sass-rails', '3.2.5' \n    gem 'coffee-rails', '3.2.2'\n\ngem 'uglifier', '1.2.3' \nend\n\ngem 'jquery-rails', '2.0.2'\n\ngroup :production do \n    gem 'pg', '0.12.2' \nend\n</code></pre>\n\n<p>Went to <a href=\"http://nodejs.org/download/\">http://nodejs.org/download/</a>  installed - restarted the machine and everything worked.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>My friend was attempting a Rails tutorial on Win 8 RTM a few months ago and ran into this error.  Not sure if this issue exists in Windows 7 as well, but this may help.</p>\n\n<p><strong>Options:</strong></p>\n\n<p><strong>1) Removing  <code>//= require_tree .</code> / Ignoring the issue -</strong> As ColinR stated above, this line should not be causing an issue in the first place.  There is an actual problem with ExecJS working properly with the JavaScript runtime on your system and removing this line is just ignoring that fact.</p>\n\n<p><strong>2) Installing Node.js / Running away -</strong>  Many people seem to just end up installing Node.js and using that instead of the JavaScript runtime already on their system.  While that is a valid option, it also requires additional software and only avoids the original issue, which is that ExecJS is not working properly with the JavaScript runtime already on your system.  If the existing JavaScript runtime on your system is supposed to work, why not make it work instead of installing more software?  According to the ExecJS creator, the runtime already built into Windows is in fact supported...</p>\n\n<blockquote>\n  <p>ExecJS lets you run JavaScript code from Ruby. It automatically picks the best runtime available to evaluate your JavaScript program, then returns the result to you as a Ruby object.</p>\n  \n  <p>ExecJS supports these runtimes:</p>\n  \n  <ul>\n  <li>therubyracer - Google V8 embedded within Ruby</li>\n  <li>therubyrhino - Mozilla Rhino embedded within JRuby</li>\n  <li>Node.js</li>\n  <li>Apple JavaScriptCore - Included with Mac OS X</li>\n  <li><strong>Microsoft Windows Script Host (JScript)</strong></li>\n  </ul>\n  \n  <p>(from github.com/sstephenson/execjs#execjs )</p>\n</blockquote>\n\n<p><strong>3) Actually fixing the issue / Learning -</strong> Use the knowledge of options 1 and 2 to search for other solutions.  I can't tell you how many webpages I closed upon seeing options 1 or 2 was the accepted solution before actually finding information about the root issue we were having.  The only reason we kept looking was that we couldn't believe the Rails team would (1) insert a line of code in every scaffold generated project that caused an issue, or (2) require that we install additional software just to run that default line of code.  And so we eventually arrived at a fix for our root issue (your miles may vary).</p>\n\n<p><strong>The Fix that worked for us:</strong>\nOn the system having issues, find ExecJS's <strong>runtimes.rb</strong> file.  It looks like <a href=\"https://github.com/sstephenson/execjs/blob/master/lib/execjs/runtimes.rb\">this</a>. Make a copy of the found file for backup. Open the original runtimes.rb for editing.  Find the section that starts with the line <code>JScript = ExternalRuntime.new(</code>. In that section, on the line containing <code>:command     =&gt; \"cscript //E:jscript //Nologo //U\",</code> - remove the <code>//U</code> only.  Then on the line containing <code>:encoding    =&gt; 'UTF-16LE' # CScript with //U returns UTF-16LE</code> - change UTF-16LE to <code>UTF-8</code> .  Save the changes to the file.  This section of the file should now read:</p>\n\n<pre><code>JScript = ExternalRuntime.new(\n    :name        =&gt; \"JScript\",\n    :command     =&gt; \"cscript //E:jscript //Nologo\",\n    :runner_path =&gt; ExecJS.root + \"/support/jscript_runner.js\",\n    :encoding    =&gt; 'UTF-8' # CScript with //U returns UTF-16LE\n)\n</code></pre>\n\n<p>Next, stop then restart your Rails server and refresh the page in your browser that produced the original error. Hopefully the page loads without error now.  Here's the ExecJS issue thread where we originally posted our results: <a href=\"https://github.com/sstephenson/execjs/issues/81#issuecomment-9892952\">https://github.com/sstephenson/execjs/issues/81#issuecomment-9892952</a></p>\n\n<p>If this did not fix the issue, you can always overwrite the modified runtimes.rb with the backup copy you (hopefully) made and everything will be back to square one.  In that case, consider option 3 and keep searching.  Let us know what eventually works for you.. unless it's removing the require_tree or installing node.js, there's plenty of that going around already. :)</p>\n",
                    "is_accepted": true,
                    "score": 180
                },
                {
                    "body": "<p>I had to add my nodejs folder to my Windows Path environment variable.  In Windows 8 open the Control Panel, go to System, Advanced system settings (on the left), click Environment Variables on the left, and edit the Path variable to include the directory to your nodejs folder (probably in Program Files).</p>\n\n<p>Of course you have to have Node.js installed (use the <a href=\"http://nodejs.org/download/\" rel=\"nofollow\">Windows installer</a>) and have installed CoffeeScript through NPM.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's a less complicated solution, for beginners:</p>\n\n<p>If you are just working through the tutorial, you are probably working with the default Gemfile (or very nearly). You can open it up in your text editor, and remove the pound sign from the front of this line:</p>\n\n<pre><code># gem 'therubyracer', :platforms =&gt; :ruby\n</code></pre>\n\n<p>You will need to re-run <code>bundle install</code>, which will likely download a few things. But once it does, you should be able to start the server without any problem.</p>\n\n<p>At least, that worked for me.</p>\n\n<p>This also works on Ubuntu 12.04, by the way.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Had the same issue\nOS- Windows 8\nError- 'ExecJS::RuntimeError...'\nSolution- missing Node.js</p>\n\n<ol>\n<li>install Node.js from <a href=\"http://www.nodejs.org/download/\">http://www.nodejs.org/download/</a></li>\n<li>Restart the computer</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I favoured the <strong>Learning</strong> route. It seems the problem stems from </p>\n\n<pre><code>IO.popen(command, options) { |f| output = f.read }\n</code></pre>\n\n<p>returning an empty string in <code>execjs\\external_runtine.rb</code> (line 173 in version 1.4.0). This is why the error message contains no text. The changes suggested did not work for me. I changed <code>UTF-16LE</code> to <code>UTF-8</code>, but it still returned an empty string. I removed <code>\\\\U</code> from the <code>command</code> - this at least returned text, but it was in the wrong encoding - in the browser it displayed as Chinese characters.</p>\n\n<p>According to <a href=\"http://blogs.msdn.com/b/ericlippert/archive/2004/02/11/71472.aspx\" rel=\"nofollow\">this MSDN blog post</a>, using the <code>//U</code> flag and redirecting to a file causes <code>cscript</code> to return the result using <code>UTF-16</code>.</p>\n\n<p>And then, magically, it worked (<em>@#%$&amp;^@</em>$%!!!?!?!) using <code>command</code> as <code>\"cscript //E:jscript //Nologo\"</code> and <code>encoding</code> as <code>\"UTF-8\"</code>. Oh well.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know this is a very late answer for this issue, but I got on something similar and went down the full path to understand what was really causing the issue.</p>\n\n<p>Turned out that the default windows jscript engine is still on es3, and many gems are taking advantage of es5 or es6 features.\nUnfortunately if this happen (you are using a gem or a piece of code that leverage es5 or es6 features), there is no way to let it work on windows with the native js engine.</p>\n\n<p>This is the reason why installing node.js solves the problem (node is at least es5).</p>\n\n<p>Hope this can help some folks struggling with a runtime error of jsexec.</p>\n\n<p>My 2 cents advise is to install node(very easy) or install v8, and not removing the //=require_tree.</p>\n\n<p>Note execjs will automatically use node if detected. Otherwise force its use, adding in boot something like: </p>\n\n<pre><code>ENV['EXECJS_RUNTIME'] = 'Node'\n</code></pre>\n\n<p>To set the env to node.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p><strong>UPDATE:</strong> <a href=\"http://stackoverflow.com/users/1017768/colin-r\">Colin</a>'s suggestion of removing the line //= require_tree . has fixed the issue.</p>\n\n<p>I have wasted over 2 days trying to follow every suggestion out there and fix my issue. I am trying to follow the <a href=\"http://ruby.railstutorial.org\">http://ruby.railstutorial.org</a> book on windows machine and cannot for the life of me get past the following nasty error.</p>\n\n<pre><code>ExecJS::RuntimeError in Static_pages#home\n\nShowing C:/Users/.../bootcamp-sample-app/app/views/layouts/application.html.erb where line #6 raised:\n\n[\"ok\",\"(function() {\\n\\n\\n\\n}).call(this);\\n\"]\n(in C:/Users/.../bootcamp-sample-app/app/assets/javascripts/sessions.js.coffee)\nExtracted source (around line #6):\n\n3: &lt;head&gt;\n4:   &lt;title&gt;&lt;%= full_title(yield(:title)) %&gt;&lt;/title&gt;\n5:   &lt;%= stylesheet_link_tag    \"application\", media: \"all\" %&gt;\n6:   &lt;%= javascript_include_tag \"application\" %&gt;\n7:   &lt;%= csrf_meta_tags %&gt;\n8:   &lt;%= render 'layouts/shim' %&gt;\n9: &lt;/head&gt;\nRails.root: C:/Users/.../bootcamp-sample-app\n\nApplication Trace | Framework Trace | Full Trace\napp/views/layouts/application.html.erb:6:in `_app_views_layouts_application_html_erb___487732698_30422172'\nRequest\n</code></pre>\n\n<p>I have tried every suggestion including installing nodejs with the msi, using execjs 1.3.0 and other things which I can't even remember any more. Here is the <strong>gem file</strong> </p>\n\n<pre><code>source 'https://rubygems.org'\n\ngem 'rails', '3.2.8'\ngem 'bootstrap-sass', '2.0.0'\ngem 'bcrypt-ruby', '3.0.1'\ngem 'faker', '1.0.1'\ngem 'will_paginate', '3.0.3'\ngem 'bootstrap-will_paginate', '0.0.6'\n\ngroup :development, :test do\n  gem 'sqlite3', '1.3.5'\n  gem 'rspec-rails', '2.10.0'\n  gem 'guard-rspec', '0.5.5'\n  gem 'guard-cucumber'\nend\n\ngroup :development do\n  gem 'annotate', '2.5.0'\nend\n\n\n# Gems used only for assets and not required\n# in production environments by default.\ngroup :assets do\n  gem 'sass-rails'\n  gem 'coffee-rails'\n  gem 'coffee-script'\n  gem 'uglifier'\nend\n\ngem 'jquery-rails', '2.0.2'\n\ngem 'execjs'\n\n# Gems on Linus/Mac\n#gem 'therubyracer'\n\n\ngroup :test do\n  gem 'capybara', '1.1.2'\n  gem 'guard-spork', '0.3.2'\n  gem 'spork', '0.9.0'\n  gem 'factory_girl_rails', '1.4.0'\n  gem 'cucumber-rails', '1.2.1', require: false\n  gem 'database_cleaner', '0.7.0'\n\n\n# Test gems on Linux\n#  gem 'rb-inotify', '0.8.8'\n#  gem 'libnotify', '0.5.9'\n\n# Test gems on Macintosh OS X\n#  gem 'selenium-webdriver', '~&gt; 2.22.0'\n#  gem 'rb-fsevent', '0.9.1', :require =&gt; false\n#  gem 'growl', '1.0.3'\n\n# Test gems on Windows\n# gem 'rb-fchange', '0.0.5'\n# gem 'rb-notifu', '0.0.4'\n# gem 'win32console', '1.3.0'\nend\n\ngroup :production do\n#  gem 'therubyracer'\n  gem 'pg', '0.12.2'\nend\n\n# To use ActiveModel has_secure_password\n# gem 'bcrypt-ruby', '~&gt; 3.0.0'\n\n# To use Jbuilder templates for JSON\n# gem 'jbuilder'\n\n# Use unicorn as the app server\n# gem 'unicorn'\n\n# Deploy with Capistrano\n# gem 'capistrano'\n\n# To use debugger\n#gem 'debugger''\n</code></pre>\n\n<p>and here is the <strong>sessions.js.coffee</strong></p>\n\n<pre><code># Place all the behaviors and hooks related to the matching controller here.\n# All this logic will automatically be available in application.js.\n# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/\n</code></pre>\n\n<p><strong>application.js</strong></p>\n\n<pre><code>// This is a manifest file that'll be compiled into application.js, which will include all the files\n// listed below.\n//\n// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,\n// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.\n//\n// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the\n// the compiled file.\n//\n// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD\n// GO AFTER THE REQUIRES BELOW.\n//\n//= require jquery\n//= require jquery_ujs\n//= require_tree .\n//= require bootstrap\n</code></pre>\n\n<p><strong>application.html.erb</strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n &lt;html&gt;\n &lt;head&gt;\n   &lt;title&gt;&lt;%= full_title(yield(:title)) %&gt;&lt;/title&gt;\n   &lt;%= stylesheet_link_tag    \"application\", media: \"all\" %&gt;\n   &lt;%= javascript_include_tag \"application\" %&gt;\n   &lt;%= csrf_meta_tags %&gt;\n   &lt;%= render 'layouts/shim' %&gt;\n &lt;/head&gt;\n &lt;body&gt;\n &lt;%= render 'layouts/header' %&gt;\n &lt;div class=\"container\"&gt;\n   &lt;%= yield %&gt;\n   &lt;%= render 'layouts/footer' %&gt;\n &lt;/div&gt;\n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre>\n\n<p>Here is <strong>console content</strong></p>\n\n<pre><code>Processing by StaticPagesController#home as HTML\n  Rendered static_pages/home.html.erb within layouts/application (45.0ms)\nCompleted 500 Internal Server Error in 1136ms\n\nActionView::Template::Error ([\"ok\",\"(function() {\\n\\n\\n\\n}).call(this);\\n\"]\n  (in C:/Users/.../bootcamp-sample-app/app/assets/javascripts/sessions.js.coffee)):\n    3: &lt;head&gt;\n    4:   &lt;title&gt;&lt;%= full_title(yield(:title)) %&gt;&lt;/title&gt;\n    5:   &lt;%= stylesheet_link_tag    \"application\", media: \"all\" %&gt;\n    6:   &lt;%= javascript_include_tag \"application\" %&gt;\n    7:   &lt;%= csrf_meta_tags %&gt;\n    8:   &lt;%= render 'layouts/shim' %&gt;\n    9: &lt;/head&gt;\n  app/views/layouts/application.html.erb:6:in `_app_views_layouts_application_html_erb___487732698_30422172'\n\n\n  Rendered C:/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/actionpack-3.2.8/lib/action_dispatch/middleware/templates/rescues/_trace.erb (2.0ms)\n  Rendered C:/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/actionpack-3.2.8/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (1.0ms)\n  Rendered C:/RailsInstaller/Ruby1.9.3/lib/ruby/gems/1.9.1/gems/actionpack-3.2.8/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (34.0ms)\n</code></pre>\n\n<p>I have installed Devkit and have tried various gems but please suggest changes which can help me develop on windows. I used rubyinstaller for everything.</p>\n\n<p>What am I missing?</p>\n",
            "last_activity_date": 1421797437,
            "question_id": 12520456,
            "score": 56,
            "tags": [
                "javascript",
                "ruby-on-rails",
                "ruby",
                "windows",
                "asset-pipeline"
            ],
            "title": "ExecJS::RuntimeError on Windows trying to follow rubytutorial"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Because <code>someFunction1</code> has not yet been assigned at the time the call to <code>setTimeout()</code> is executed.</p>\n\n<p>someFunction3 may look like a similar case, but since you are passing a function wrapping <code>someFunction3()</code> to <code>setTimeout()</code> in this case, the call to <code>someFunction3()</code> is not evaluated until later.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Javascript's scope is function based, not strictly lexical scoping.  that means that </p>\n\n<ul>\n<li><p>Somefunction1 is defined from the start of the enclosing function, but it's content is undefined until assigned.  </p></li>\n<li><p>in the second example, the assignment is part of the declaration, so it 'moves' to the top. </p></li>\n<li><p>in the third example, the variable exist when the anonymous inner closure is defined, but it's not used until 10 seconds later, by then the value has been assigned.</p></li>\n<li><p>fourth example has both of the second and third reasons to work</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is neither a scope problem nor is it a closure problem. The problem is in understanding between <strong>declarations</strong> and <strong>expressions</strong>.</p>\n\n<p>JavaScript code, since even Netscape's first version of JavaScript and Microsoft's first copy of it, is processed in two phases:</p>\n\n<p>Phase 1: compilation - in this phase the code is compiled into a syntax tree (and bytecode or binary depending on the engine).</p>\n\n<p>Phase 2: execution - the parsed code is then interpreted.</p>\n\n<p>The syntax for function <strong>declaration</strong> is:</p>\n\n<pre><code>function name (arguments) {code}\n</code></pre>\n\n<p>Arguments are of course optional (code is optional as well but what's the point of that?).</p>\n\n<p>But JavaScript also allows you to create functions using <strong>expressions</strong>. The syntax for function expressions are similar to function declarations except that they are written in expression context. And expressions are:</p>\n\n<ol>\n<li>Anything to the right of an <code>=</code> sign (or <code>:</code> on object literals).</li>\n<li>Anything in parentheses <code>()</code>.</li>\n<li>Parameters to functions (this is actually already covered by 2).</li>\n</ol>\n\n<p><strong>Expressions</strong> unlike <strong>declarations</strong> are processed in the execution phase rather than the compilation phase. And because of this the order of expressions matter.</p>\n\n<p>So, to clarify:</p>\n\n<hr>\n\n<pre><code>// 1\n(function() {\nsetTimeout(someFunction, 10);\nvar someFunction = function() { alert('here1'); };\n})();\n</code></pre>\n\n<p>Phase 1: compilation. The compiler sees that the variable <code>someFunction</code> is defined so it creates it. By default all variables created have the value of undefined. Note that the compiler cannot assign values yet at this point because the values may need the interpreter to execute some code to return a value to assign. And at this stage we are not yet executing code.</p>\n\n<p>Phase 2: execution. The interpreter sees you want to pass the variable <code>someFunction</code> to setTimeout. And so it does. Unfortunately the current value of <code>someFunction</code> is undefined.</p>\n\n<hr>\n\n<pre><code>// 2\n(function() {\nsetTimeout(someFunction, 10);\nfunction someFunction() { alert('here2'); }\n})();\n</code></pre>\n\n<p>Phase 1: compilation. The compiler sees you are declaring a function with the name someFunction and so it creates it.</p>\n\n<p>Phase 2: The interpreter sees you want to pass <code>someFunction</code> to the setTimeout. And so it does. The current value of <code>someFunction</code> is its compiled function declaration.</p>\n\n<hr>\n\n<pre><code>// 3\n(function() {\nsetTimeout(function() { someFunction(); }, 10);\nvar someFunction = function() { alert('here3'); };\n})();\n</code></pre>\n\n<p>Phase 1: compilation. The compiler sees you have declared a variable <code>someFunction</code> and creates it. As before, its value is undefined.</p>\n\n<p>Phase 2: execution. The interpreter passes an anonymous function to setTimeout to be executed later. In this function it sees you're using the variable <code>someFunction</code> so it creates a closure to the variable. At this point the value of <code>someFunction</code> is still undefined. Then it sees you assigning a function to <code>someFunction</code>. At this point the value of <code>someFunction</code> is no longer undefined. 1/100th of a second later the setTimeout triggers and the someFunction is called. Since its value is no longer undefined it works.</p>\n\n<hr>\n\n<p>Case 4 is really another version of case 2 with a bit of case 3 thrown in. At the point <code>someFunction</code> is passed to setTimeout it already exists due to it being declared.</p>\n\n<hr>\n\n<p><em>Additional clarification:</em></p>\n\n<p>You may wonder why <code>setTimeout(someFunction, 10)</code> doesn't create a closure between the local copy of someFunction and the one passed to setTimeout. The answer to that is that function arguments in JavaScript are always, <em>always</em> passed by value if they are numbers or strings or by reference for everything else. So setTimeout does not actually get the variable someFunction passed to it (which would have meant a closure being created) but rather only gets the object that someFunction refers to (which in this case is a function). This is the most widely used mechanism in JavaScript for breaking closures (for example in loops).</p>\n",
                    "is_accepted": true,
                    "score": 119
                },
                {
                    "body": "<p>This sounds like a basic case of following good procedure to stay out of trouble.  Declare variables and functions before you use them and declare functions like this:</p>\n\n<pre><code>function name (arguments) {code}\n</code></pre>\n\n<p>Avoid declaring them with var.  This is just sloppy and leads to problems.  If you get into the habit of declaring everything before using it, most of your problems will disappear in a big hurry.  When declaring variables, I would initialize them with a valid value right away to insure that none of them are undefined.  I also tend to include code that checks for valid values of global variables before a function uses them.  This is an additional safeguard against errors.</p>\n\n<p>The technical details of how all this works is sort of like the physics of how a hand grenade works when you play with it.  My simple advice is to not play with hand grenades in the first place.</p>\n\n<p>Some simple declarations at the beginning of the code might solve most most of these kinds of problems, but some cleanup of the code might still be necessary.</p>\n\n<p><b>Additional Note:</b><br>\nI ran a few experiments and it seems that if you declare all of your functions in the   manner described here, it doesn't really matter what order they are in.  If function A uses function B, function B does not have to be declared before function A.</p>\n\n<p>So, declare all of your functions first, your global variables next, and then put your other code last.  Follow these rules of thumb and you can't go wrong.  It might even be best to put your declarations in the head of the web page and your other code in the body to ensure enforcement of these rules.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Why does the first one of these examples not work, but all the other ones do?</p>\n\n<pre><code>// 1 - does not work\n(function() {\nsetTimeout(someFunction1, 10);\nvar someFunction1 = function() { alert('here1'); };\n})();\n\n// 2\n(function() {\nsetTimeout(someFunction2, 10);\nfunction someFunction2() { alert('here2'); }\n})();\n\n// 3\n(function() {\nsetTimeout(function() { someFunction3(); }, 10);\nvar someFunction3 = function() { alert('here3'); };\n})();\n\n// 4\n(function() {\nsetTimeout(function() { someFunction4(); }, 10);\nfunction someFunction4() { alert('here4'); }\n})();\n</code></pre>\n",
            "last_activity_date": 1416326803,
            "question_id": 3887408,
            "score": 57,
            "tags": [
                "javascript",
                "function-declaration"
            ],
            "title": "JavaScript function declaration and evaluation order"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>you can get this information from the data cache.</p>\n\n<p>//log them to the console (firebug, ie8)</p>\n\n<pre><code>console.dir( $('#someElementId').data('events') );\n</code></pre>\n\n<p>//or iterate them</p>\n\n<pre><code>jQuery.each($('#someElementId').data('events'), function(i, event){\n\n    jQuery.each(event, function(i, handler){\n\n        console.log( handler.toString() );\n\n    });\n\n});\n</code></pre>\n\n<p>Another way is you can use the following <a href=\"http://www.sprymedia.co.uk/article/Visual+Event\">bookmarklet</a> but obviously this does not help at runtime.</p>\n",
                    "is_accepted": true,
                    "score": 108
                },
                {
                    "body": "<p>I wrote a plugin called hasEventListener which exactly does that :</p>\n\n<p><a href=\"http://github.com/sebastien-p/jquery.hasEventListener\">http://github.com/sebastien-p/jquery.hasEventListener</a></p>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>I don't think that the hasEventListener plugin mentioned will handle custom events e.g.</p>\n\n<pre><code>var obj = {id:'test'};\n$(obj).bind('custom', function(){\n    alert('custom');\n}).trigger('custom');\n\nalert($(obj).hasEventListener('custom'));\n</code></pre>\n\n<p>Also, at least in jQuery 1.5 I think you need to be careful using $(target).data('events') because it returns differently for events that have been bound to objects as above. </p>\n\n<p>You need to do something like:</p>\n\n<pre><code>var events = $(target).data(\"events\");\nif(typeof events === \"function\"){\n   events = events.events;\n}\n</code></pre>\n\n<p>I am using this sort of approach and it works but it feels a bit like I am at the mercy of jquery internals and that really I shouldn't be doing it!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Killing off the binding when it does not exist yet is not the best solution but seems effective enough! The second time you \u2018click\u2019 you can know with certainty that it will not create a duplicate binding.</p>\n\n<p>I therefore use die() or unbind() like this:</p>\n\n<pre><code>$(\"#someid\").die(\"click\").live(\"click\",function(){...\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"#someid\").unbind(\"click\").bind(\"click\",function(){...\n</code></pre>\n\n<p>or in recent jQuery versions:</p>\n\n<pre><code>$(\"#someid\").off(\"click\").on(\"click\",function(){...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>This works for me:\n$('#profile1').attr('onclick')</p>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>This solution is no more supported since jQuery 1.8 as we can read on the blog here:</p>\n\n<blockquote>\n  <p>$(element).data(\u201cevents\u201d): This is now removed in 1.8, but you can still get to the\n  events data for debugging purposes via $._data(element, \"events\").\n  <strong>Note that this is not a supported public interface; the actual data\n  structures may change incompatibly from version to version.</strong></p>\n</blockquote>\n\n<p>So, you should unbind/rebind it or simply, use a boolean to determine if your event as been attached or not (which is in my opinion the best solution).</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>With reference to <a href=\"http://stackoverflow.com/a/7000418/132599\">SJG's answer</a> and from <a href=\"http://www.w3schools.com/jquery/event_off.asp\" rel=\"nofollow\">W3Schools.com</a> </p>\n\n<blockquote>\n  <p>As of jQuery version 1.7, the off() method is the new replacement for the unbind(), die() and undelegate() methods. This method brings a lot of consistency to the API, and we recommend that you use this method, as it simplifies the jQuery code base.  </p>\n</blockquote>\n\n<p>This gives:</p>\n\n<pre><code>$(\"#someid\").off(\"click\").live(\"click\",function(){...\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"#someid\").off(\"click\").bind(\"click\",function(){...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think this might have updated with jQuery 1.9.*</p>\n\n<p>I'm finding the this is the only thing that works for me at the moment:</p>\n\n<pre><code>$._data($(\"#yourElementID\")[0]).events\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I had the same need &amp; quickly patched an existing code to be able to do something like this: </p>\n\n<pre><code> if( $('.scroll').hasHandlers('mouseout') )  // could be click, or '*'...\n { \n   ... code ..\n }\n</code></pre>\n\n<p>It works for event delegation too: </p>\n\n<pre><code> if ( $('#main').hasHandlers('click','.simple-search') )  ...\n</code></pre>\n\n<p>It is available here : <a href=\"https://github.com/Inducido/jquery-handler-toolkit.js\" rel=\"nofollow\">jquery-handler-toolkit.js</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I wrote a very tiny plugin called \"once\" which do that:</p>\n\n<pre><code>$.fn.once = function(a, b) {\n    return this.each(function() {\n        $(this).off(a).on(a,b);\n    });\n};\n</code></pre>\n\n<p>And simply:</p>\n\n<pre><code>$(element).once('click', function(){\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is it possible to determine whether an element has a click handler, or a change handler, or any kind of event handler bound to it using jQuery?</p>\n\n<p>Furthermore, is it possible to determine how many click handlers (or whatever kind of event handlers) it has for a given type of event, and what functions are in the event handlers?</p>\n",
            "last_activity_date": 1411999112,
            "question_id": 1236067,
            "score": 142,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "test if event handler is bound to an element in jQuery"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Perhaps adobe's flash player detection kit could be helpful here?</p>\n\n<p><a href=\"http://www.adobe.com/products/flashplayer/download/detection_kit/\">http://www.adobe.com/products/flashplayer/download/detection_kit/</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><a href=\"http://code.google.com/p/swfobject/\">SWFObject</a> is very reliable.  I have used it without trouble for quite a while.</p>\n",
                    "is_accepted": true,
                    "score": 74
                },
                {
                    "body": "<p>View the source at <a href=\"http://whatsmy.browsersize.com\" rel=\"nofollow\">http://whatsmy.browsersize.com</a> (lines 14-120).</p>\n\n<p>Here is the abstracted cross browser <a href=\"http://jsbin.com/aqubiq/4/edit\" rel=\"nofollow\">code on jsbin</a> for <b>flash detection only</b>,\nworks on: FF/IE/Safari/Opera/Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Carl Yestrau's JavaScript Flash Detection Library, here:</p>\n\n<p><a href=\"http://www.featureblend.com/javascript-flash-detection-library.html\">http://www.featureblend.com/javascript-flash-detection-library.html</a></p>\n\n<p>... may be what you're looking for.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Detecting and embedding Flash within a web document is a surprisingly difficult task.</p>\n\n<p>I was very disappointed with the quality and non-standards compliant markup generated from both SWFObject and Adobe's solutions. Additionally, my testing found Adobe's auto updater to be inconsistent and unreliable.</p>\n\n<p><a href=\"http://featureblend.com/javascript-flash-detection-library.html\">The JavaScript Flash Detection Library (Flash Detect)</a> and <a href=\"http://featureblend.com/javascript-flash-html-generator-library.html\">JavaScript Flash HTML Generator Library (Flash TML)</a> are a legible, maintainable and standards compliant markup solution.</p>\n\n<p>-\"Luke read the source!\"</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To create a Flash object standart-compliant (with JavaScript however), I recommend you take a look at</p>\n\n<p>Unobtrusive Flash Objects (UFO) </p>\n\n<p><a href=\"http://www.bobbyvandersluis.com/ufo/index.html\" rel=\"nofollow\">http://www.bobbyvandersluis.com/ufo/index.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I agree with <a href=\"http://stackoverflow.com/questions/159261/cross-browser-flash-detection-in-javascript/159374#159374\">Max Stewart</a>.  SWFObject is the way to go.  I'd like to supplement his answer with a code example.  This ought to to get you started:</p>\n\n<pre><code>if(swfobject.hasFlashPlayerVersion(\"9.0.115\"))\n{\n    alert(\"You have the minimum required flash version (or newer)\");\n}\nelse\n{\n    alert(\"You do not have the minimum required flash version\");\n}\n</code></pre>\n\n<p>Replace \"9.0.115\" with whatever minimum flash version you need.  I chose 9.0.115 as an example because that's the version that added h.264 support.</p>\n\n<p>If the visitor does not have flash, it will report a flash version of \"0.0.0\", so if you just want to know if they have flash at all, use:</p>\n\n<pre><code>if(swfobject.hasFlashPlayerVersion(\"1\"))\n{\n    alert(\"You have flash!\");\n}\nelse\n{\n    alert(\"You do not flash :-(\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>I know this is an old post, but I've been looking for a while and didn't find anything.<br>\nI've implemented the <a href=\"http://www.featureblend.com/javascript-flash-detection-library.html\">JavaScript Flash Detection Library</a>.\nIt works very well and it is documented for quick use.  It literally took me 2 minutes. Here is the code I wrote in the header:</p>\n\n<pre><code>&lt;script src=\"Scripts/flash_detect.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt; \n    if(!FlashDetect.installed){\n        alert(\"Flash is required to enjoy this site.\");         \n    }else{\n        alert(\"Flash is insalled on your Web browser.\");\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>You could use <a href=\"http://closure-compiler.appspot.com/home\">closure compiler</a> to generate a small, cross-browser flash detection:</p>\n\n<pre><code>// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @output_file_name default.js\n// @formatting pretty_print\n// @use_closure_library true\n// ==/ClosureCompiler==\n\n// ADD YOUR CODE HERE\ngoog.require('goog.userAgent.flash');\nif (goog.userAgent.flash.HAS_FLASH) {\n    alert('flash version: '+goog.userAgent.flash.VERSION);\n}else{\n    alert('no flash found');\n}\n</code></pre>\n\n<p>which results in the following \"compiled\" code:</p>\n\n<pre><code>var a = !1,\n    b = \"\";\n\nfunction c(d) {\n    d = d.match(/[\\d]+/g);\n    d.length = 3;\n    return d.join(\".\")\n}\nif (navigator.plugins &amp;&amp; navigator.plugins.length) {\n    var e = navigator.plugins[\"Shockwave Flash\"];\n    e &amp;&amp; (a = !0, e.description &amp;&amp; (b = c(e.description)));\n    navigator.plugins[\"Shockwave Flash 2.0\"] &amp;&amp; (a = !0, b = \"2.0.0.11\")\n} else {\n    if (navigator.mimeTypes &amp;&amp; navigator.mimeTypes.length) {\n        var f = navigator.mimeTypes[\"application/x-shockwave-flash\"];\n        (a = f &amp;&amp; f.enabledPlugin) &amp;&amp; (b = c(f.enabledPlugin.description))\n    } else {\n        try {\n            var g = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.7\"),\n                a = !0,\n                b = c(g.GetVariable(\"$version\"))\n        } catch (h) {\n            try {\n                g = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash.6\"), a = !0, b = \"6.0.21\"\n            } catch (i) {\n                try {\n                    g = new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"), a = !0, b = c(g.GetVariable(\"$version\"))\n                } catch (j) {}\n            }\n        }\n    }\n}\nvar k = b;\na ? alert(\"flash version: \" + k) : alert(\"no flash found\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Minimum version I've ever used (doesn't check version, just Flash Plugin):</p>\n\n<pre><code>var hasFlash = function() {\n    return (typeof navigator.plugins == \"undefined\" || navigator.plugins.length == 0) ? !!(new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")) : navigator.plugins[\"Shockwave Flash\"];\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Code for one liner <code>isFlashExists</code> variable: </p>\n\n<pre><code>&lt;script type='text/javascript'\n    src='//ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js'&gt; &lt;/script&gt;\n\n&lt;script type='text/javascript'&gt;\n   var isFlashExists = swfobject.hasFlashPlayerVersion('1') ? true : false ;\n   if (isFlashExists) {\n    alert ('flash exists');\n   } else {\n    alert ('NO flash');\n   }\n&lt;/script&gt;\n</code></pre>\n\n<p>Note that there is an alternative like this: <code>swfobject.getFlashPlayerVersion();</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you just wanted to check whether flash is enabled, this should be enough.</p>\n\n<pre><code>function testFlash() {\n\n    var support = false;\n\n    //IE only\n    if(\"ActiveXObject\" in window) {\n\n        try{\n            support = !!(new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\"));\n        }catch(e){\n            support = false;\n        }\n\n    //W3C, better support in legacy browser\n    } else {\n\n        support = !!navigator.mimeTypes['application/x-shockwave-flash'];\n\n    }\n\n    return support;\n\n}\n</code></pre>\n\n<p>Note: avoid checking <strong>enabledPlugin</strong>, some mobile browser has tap-to-enable flash plugin, and will trigger false negative.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Have created a small <code>.swf</code> which redirects. If the browser is flash enabled it will redirect.</p>\n\n<pre><code>package com.play48.modules.standalone.util;\n\nimport flash.net.URLRequest;\n\n\nclass Redirect {\n\n\nstatic function main() {\n\n    flash.Lib.getURL(new URLRequest(\"http://play48.com/flash.html\"), \"_self\");\n\n}\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>what about:</p>\n\n<pre><code>var hasFlash = function() {\n    var flash = false;\n    try{\n        if(new ActiveXObject('ShockwaveFlash.ShockwaveFlash')){\n            flash=true;\n        }\n    }catch(e){\n        if(navigator.mimeTypes ['application/x-shockwave-flash'] !== undefined){\n            flash=true;\n        }\n    }\n    return flash;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are interested in a pure Javascript solution, here is the one that I copy from <a href=\"http://www.blangdon.com/writing/about/detect-flash-with-javascript/\" rel=\"nofollow\">Brett</a>:</p>\n\n<pre><code>function detectflash(){\n    if (navigator.plugins != null &amp;&amp; navigator.plugins.length &gt; 0){\n        return navigator.plugins[\"Shockwave Flash\"] &amp;&amp; true;\n    }\n    if(~navigator.userAgent.toLowerCase().indexOf(\"webtv\")){\n        return true;\n    }\n    if(~navigator.appVersion.indexOf(\"MSIE\") &amp;&amp; !~navigator.userAgent.indexOf(\"Opera\")){\n        try{\n            return new ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\") &amp;&amp; true;\n        } catch(e){}\n    }\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Does anyone have an example of script that can work reliably well across IE/Firefox to detect if the browser is capable of displaying embedded flash content. I say reliably because I know its not possible 100% of the time. </p>\n",
            "last_activity_date": 1396140897,
            "question_id": 159261,
            "score": 67,
            "tags": [
                "javascript",
                "flash",
                "cross-browser"
            ],
            "title": "Cross Browser Flash Detection in Javascript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You're asking for zero padding? Not really rounding. You'll have to convert it to a string since numbers don't make sense with leading zeros. Something like this...</p>\n\n<pre><code>function pad(num, size) {\n    var s = num+\"\";\n    while (s.length &lt; size) s = \"0\" + s;\n    return s;\n}\n</code></pre>\n\n<p>Or if you know you'd never be using more than X number of zeros this might be better. This assumes you'd never want more than 10 digits.</p>\n\n<pre><code>function pad(num, size) {\n    var s = \"000000000\" + num;\n    return s.substr(s.length-size);\n}\n</code></pre>\n\n<p>If you care about negative numbers you'll have to strip the \"-\" and readd it.</p>\n",
                    "is_accepted": true,
                    "score": 170
                },
                {
                    "body": "<p>Another approach:</p>\n\n<pre><code>function zeroPad(num, places) {\n  var zero = places - num.toString().length + 1;\n  return Array(+(zero &gt; 0 &amp;&amp; zero)).join(\"0\") + num;\n}\n\nzeroPad(5, 2); // \"05\"\nzeroPad(5, 4); // \"0005\"\nzeroPad(5, 6); // \"000005\"\nzeroPad(1234, 2); // \"1234\" :)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>Just for fun (I had some time to kill), a more sophisticated implementation which caches the zero-string:</p>\n\n<pre><code>pad.zeros = new Array(5).join('0');\nfunction pad(num, len) {\n    var str = String(num),\n        diff = len - str.length;\n    if(diff &lt;= 0) return str;\n    if(diff &gt; pad.zeros.length)\n        pad.zeros = new Array(diff + 1).join('0');\n    return pad.zeros.substr(0, diff) + str;\n}\n</code></pre>\n\n<p>If the padding count is large and the function is called often enough, it actually outperforms the other methods...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>From <a href=\"https://gist.github.com/1180489\">https://gist.github.com/1180489</a></p>\n\n<pre><code>function pad(a,b){return(1e15+a+\"\").slice(-b)}\n</code></pre>\n\n<p>With comments:</p>\n\n<pre><code>function pad(\n  a, // the number to convert \n  b // number of resulting characters\n){\n  return (\n    1e15 + a + // combine with large number\n    \"\" // convert to string\n  ).slice(-b) // cut leading \"1\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<pre><code>function zfill(num, len) {return (Array(len).join(\"0\") + num).slice(-len);}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could extend the <code>Number</code> object:</p>\n\n<pre><code>Number.prototype.pad = function(size) {\n      var s = String(this);\n      while (s.length &lt; (size || 2)) {s = \"0\" + s;}\n      return s;\n    }\n</code></pre>\n\n<p><em>Examples:</em></p>\n\n<pre><code>9.pad();  //returns \"09\"\n\n7.pad(3);  //returns \"007\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/1267283/how-can-i-create-a-zerofilled-value-using-javascript\">How can I create a Zerofilled value using JavaScript?</a>  </p>\n</blockquote>\n\n\n\n<p>I can round to  x amount of decimal places with math.round but is there a way to round left of the decimal? for example 5 becomes 05 if I specify 2 places </p>\n",
            "last_activity_date": 1410951309,
            "question_id": 2998784,
            "score": 99,
            "tags": [
                "javascript",
                "text-formatting",
                "number-formatting"
            ],
            "title": "How to output integers with leading zeros in JavaScript"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I've never attempted to do this, but it seems like this has been discussed on the internet.</p>\n\n<p>Here looks to be a good place to start:\n<a href=\"http://www.hunlock.com/blogs/Mastering_The_Back_Button_With_Javascript\" rel=\"nofollow\">http://www.hunlock.com/blogs/Mastering_The_Back_Button_With_Javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use the <a href=\"https://github.com/cowboy/jquery-hashchange\" rel=\"nofollow\">jQuery hashchange event</a> plugin instead. Regarding your full ajax navigation, try to have <a href=\"http://www.chazzuka.com/blog/?p=90\" rel=\"nofollow\">SEO friendly ajax</a>. Otherwise your pages shown nothing in browsers with JavaScript limitations.</p>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<p>I used a jquery plugin and wrote a YUI History like interface on top of it.</p>\n\n<p><a href=\"http://jstalkies.blogspot.com/2009/10/history-utility.html\" rel=\"nofollow\">http://jstalkies.blogspot.com/2009/10/history-utility.html</a></p>\n\n<p>Check it out once. If you need help I can help</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://benalman.com/projects/jquery-bbq-plugin/\"><strong>jQuery BBQ</strong> (Back Button &amp; Query Library)</a></p>\n\n<p>A high quality hash-based browser history plugin and very much <a href=\"http://benalman.com/news/2010/01/jquery-bbq-v111-also-bbq-jquer/\">up-to-date (Jan 26, 2010) as of this writing (jQuery 1.4.1)</a>.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Another great implementation is balupton's <a href=\"https://github.com/balupton/jquery-history\" rel=\"nofollow\">jQuery History</a> which will use the native onhashchange event if it is supported by the browser, if not it will use an iframe or interval appropriately for the browser to ensure all the expected functionality is successfully emulated. It also provides a nice interface to bind to certain states.</p>\n\n<p>Another project worth noting as well is <a href=\"https://github.com/balupton/jquery-ajaxy\" rel=\"nofollow\">jQuery Ajaxy</a> which is pretty much an extension for jQuery History to add ajax to the mix. As when you start using ajax with hashes it get's <a href=\"http://stackoverflow.com/questions/3205900/how-to-show-ajax-requests-in-url/3276206#3276206\">quite complicated</a>!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>HTML5 has included a much better solution than using hashchange which is the HTML5 State Management APIs - <a href=\"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\" rel=\"nofollow\">https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history</a> - they allow you to change the url of the page, without needing to use hashes!</p>\n\n<p>Though the HTML5 State Functionality is only available to HTML5 Browsers. So you probably want to use something like <a href=\"https://github.com/browserstate/History.js\" rel=\"nofollow\">History.js</a> which provides a backwards compatible experience to HTML4 Browsers (via hashes, but still supports data and titles as well as the replaceState functionality).</p>\n\n<p>You can read more about it here:\n<a href=\"https://github.com/browserstate/History.js\" rel=\"nofollow\">https://github.com/browserstate/History.js</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Take a look to <a href=\"http://itsnat.sourceforge.net/index.php?_page=support.tutorial.spi_site\" rel=\"nofollow\">this tutorial</a> of Single Page Interface web sites</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I do the following, if you want to use it then paste it in some where and set your handler code in locationHashChanged(qs) where commented, and then call changeHashValue(hashQuery) every time you load an ajax request. \nIts not a quick-fix answer and there are none, so you will need to think about it and pass sensible hashQuery args (ie a=1&amp;b=2) to changeHashValue(hashQuery) and then cater for each combination of said args in your locationHashChanged(qs) callback ...</p>\n\n<pre><code>// Add code below ...\nfunction locationHashChanged(qs)\n{\n  var q = parseQs(qs);\n  // ADD SOME CODE HERE TO LOAD YOUR PAGE ELEMS AS PER q !!\n  // YOU SHOULD CATER FOR EACH hashQuery ATTRS COMBINATION\n  //  THAT IS PASSED TO changeHashValue(hashQuery)\n}\n\n// CALL THIS FROM YOUR AJAX LOAD CODE EACH LOAD ...\nfunction changeHashValue(hashQuery)\n{\n  stopHashListener();\n  hashValue     = hashQuery;\n  location.hash = hashQuery;\n  startHashListener();\n}\n\n// AND DONT WORRY ABOUT ANYTHING BELOW ...\nfunction checkIfHashChanged()\n{\n  var hashQuery = getHashQuery();\n  if (hashQuery == hashValue)\n    return;\n  hashValue = hashQuery;\n  locationHashChanged(hashQuery);\n}\n\nfunction parseQs(qs)\n{\n  var q = {};\n  var pairs = qs.split('&amp;');\n  for (var idx in pairs) {\n    var arg = pairs[idx].split('=');\n    q[arg[0]] = arg[1];\n  }\n  return q;\n}\n\nfunction startHashListener()\n{\n  hashListener = setInterval(checkIfHashChanged, 1000);\n}\n\nfunction stopHashListener()\n{\n  if (hashListener != null)\n    clearInterval(hashListener);\n  hashListener = null;\n}\n\nfunction getHashQuery()\n{\n  return location.hash.replace(/^#/, '');\n}\n\nvar hashListener = null;\nvar hashValue    = '';//getHashQuery();\nstartHashListener();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Sounds like SammyJS is what you needed.</p>\n\n<p><a href=\"http://sammyjs.org/\" rel=\"nofollow\">http://sammyjs.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try simple &amp; lightweight <a href=\"https://github.com/mtrpcic/pathjs\" rel=\"nofollow\">PathJS</a> lib.</p>\n\n<p>Simple example:</p>\n\n<pre><code>Path.map(\"#/page\").to(function(){\n    alert('page!');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The answers here are all quite old.</p>\n\n<p>In the HTML5 world, you should the use <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate\"><code>onpopstate</code></a> event.</p>\n\n<pre><code>window.onpopstate = function(event)\n{\n    alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n};\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>window.addEventListener('popstate', function(event)\n{\n    alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n});\n</code></pre>\n\n<p>The latter snippet allows multiple event handlers to exist, whereas the former will replace any existing handler which may cause hard-to-find bugs.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Try using jquery address\n<a href=\"http://www.asual.com/jquery/address/\" rel=\"nofollow\">http://www.asual.com/jquery/address/</a></p>\n\n<p>It is neatly written and supports hijax too...</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I just set up my new homepage at <a href=\"http://ritter.vg\">http://ritter.vg</a>.  I'm using jQuery, but very minimally.<br>\nIt loads all the pages using AJAX - I have it set up to allow bookmarking by detecting the hash in the URL.  </p>\n\n<pre><code> //general functions\n function getUrl(u) {\n      return u + '.html';\n }\n function loadURL(u)    {\n      $.get(getUrl(u), function(r){\n                $('#main').html(r);\n           }\n      );\n }\n //allows bookmarking\n var hash = new String(document.location).indexOf(\"#\");\n if(hash &gt; 0)\n {\n      page = new String(document.location).substring(hash + 1);\n      if(page.length &gt; 1)\n        loadURL(page);\n      else\n        loadURL('news');\n }\n else\n      loadURL('news');\n</code></pre>\n\n<p>But I can't get the back and forward buttons to work.  </p>\n\n<p>Is there a way to detect when the back button has been pressed (or detect when the hash changes) without using a setInterval loop?  When I tried those with .2 and 1 second timeouts, it pegged my CPU.</p>\n",
            "last_activity_date": 1387497821,
            "question_id": 172957,
            "score": 41,
            "tags": [
                "javascript",
                "ajax",
                "navigation",
                "fragment-identifier",
                "hashchange"
            ],
            "title": "Detecting Back Button/Hash Change in URL"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can't call <code>_doPostBack()</code> because it forces submition of the form. Why don't you disable the <code>PostBack</code> on the <code>UpdatePanel</code>?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>First, don't use update panels.  They are the second most evil thing that Microsoft has ever created for the web developer.</p>\n\n<p>Second, if you <em>must</em> use update panels, try setting the UpdateMode property to Conditional.  Then add a trigger to an Asp:Hidden control that you add to the page.  Assign the change event as the trigger.  In your dragstop event, change the value of the hidden control.</p>\n\n<p>This is untested, but the theory seems sound...  If this does not work, you could try the same thing with an asp:button, just set the display:none style on it and use the click event instead of the change event.</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>Have you tried passing the Update panel's client id to the __doPostBack function?  My team has done this to refresh an update panel and as far as I know it worked.</p>\n\n<pre><code>__doPostBack(UpdatePanelClientID, '**Some String**');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>While Phairoh's solution seems theoretically sound, I have also found another solution to this problem. By passing the UpdatePanels id as a paramater (event target) for the doPostBack function the update panel will post back but not the entire page.</p>\n\n<pre><code>__doPostBack('myUpdatePanelId','')\n</code></pre>\n\n<p>*note: second parameter is for addition event args</p>\n\n<p>hope this helps someone! </p>\n\n<p>EDIT: so it seems this same piece of advice was given above as i was typing :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Per Phairoh:  Use this in the Page/Component just in case the panel name changes</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n     &lt;!--\n     //must be global to be called by ExternalInterface\n         function JSFunction() {\n             __doPostBack('&lt;%= myUpdatePanel.ClientID  %&gt;', '');\n         }\n     --&gt;\n     &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>Here is a complete solution</strong></p>\n\n<h1><strong>Entire form tag of the asp.net page</strong></h1>\n\n<pre><code>&lt;form id=\"form1\" runat=\"server\"&gt;\n    &lt;asp:LinkButton ID=\"LinkButton1\" runat=\"server\" /&gt; &lt;%-- included to force __doPostBack javascript function to be rendered --%&gt;\n\n    &lt;input type=\"button\" id=\"Button45\" name=\"Button45\" onclick=\"javascript:__doPostBack('ButtonA','')\" value=\"clicking this will run ButtonA.Click Event Handler\" /&gt;&lt;br /&gt;&lt;br /&gt;\n    &lt;input type=\"button\" id=\"Button46\" name=\"Button46\" onclick=\"javascript:__doPostBack('ButtonB','')\" value=\"clicking this will run ButtonB.Click Event Handler\" /&gt;&lt;br /&gt;&lt;br /&gt;\n\n    &lt;asp:Button runat=\"server\" ID=\"ButtonA\" ClientIDMode=\"Static\" Text=\"ButtonA\" /&gt;&lt;br /&gt;&lt;br /&gt;\n    &lt;asp:Button runat=\"server\" ID=\"ButtonB\" ClientIDMode=\"Static\" Text=\"ButtonB\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<h1><strong>Entire Contents of the Page's Code-Behind Class</strong></h1>\n\n<pre><code>Private Sub ButtonA_Click(sender As Object, e As System.EventArgs) Handles ButtonA.Click\n    Response.Write(\"You ran the ButtonA click event\")\nEnd Sub\n\nPrivate Sub ButtonB_Click(sender As Object, e As System.EventArgs) Handles ButtonB.Click\n    Response.Write(\"You ran the ButtonB click event\")\nEnd Sub\n</code></pre>\n\n<ul>\n<li>The LinkButton is included to ensure that the __doPostBack javascript function is rendered to the client. Simply having Button controls will not cause this __doPostBack function to be rendered. This function will be rendered by virtue of having a variety of controls on most ASP.NET pages, so an empty link button is typically not needed</li>\n</ul>\n\n<h1>What's going on?</h1>\n\n<p>Two input controls are rendered to the client:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"__EVENTTARGET\" id=\"__EVENTTARGET\" value=\"\" /&gt;\n&lt;input type=\"hidden\" name=\"__EVENTARGUMENT\" id=\"__EVENTARGUMENT\" value=\"\" /&gt;\n</code></pre>\n\n<ul>\n<li><code>__EVENTTARGET</code> receives argument 1 of __doPostBack</li>\n<li><code>__EVENTARGUMENT</code> receives argument 2 of __doPostBack</li>\n</ul>\n\n<p>The __doPostBack function is rendered out like this:</p>\n\n<pre><code>function __doPostBack(eventTarget, eventArgument) {\n    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {\n        theForm.__EVENTTARGET.value = eventTarget;\n        theForm.__EVENTARGUMENT.value = eventArgument;\n        theForm.submit();\n    }\n}\n</code></pre>\n\n<ul>\n<li>As you can see, it assigns the values to the hidden inputs.</li>\n</ul>\n\n<p><strong>When the form submits / postback occurs:</strong></p>\n\n<ul>\n<li>If you provided the UniqueID of the Server-Control Button whose button-click-handler you want to run (<code>javascript:__doPostBack('ButtonB','')</code>, then the button click handler for that button will be run.</li>\n</ul>\n\n<h1>What if I don't want to run a click handler, but want to do something else instead?</h1>\n\n<p>You can pass whatever you want as arguments to <code>__doPostBack</code></p>\n\n<p>You can then analyze the hidden input values and run specific code accordingly:</p>\n\n<pre><code>If Request.Form(\"__EVENTTARGET\") = \"DoSomethingElse\" Then\n    Response.Write(\"Do Something else\") \nEnd If\n</code></pre>\n\n<h1>Other Notes</h1>\n\n<ul>\n<li>What if I don't know the ID of the control whose click handler I want to run?\n<ul>\n<li>If it is not acceptable to set <code>ClientIDMode=\"Static\"</code>, then you can do something like this: <code>__doPostBack('&lt;%= myclientid.UniqueID %&gt;', '')</code>. </li>\n<li>Or: <code>__doPostBack('&lt;%= MYBUTTON.UniqueID %&gt;','')</code></li>\n<li>This will inject the unique id of the control into the javascript, should you wish it</li>\n</ul></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 136
                },
                {
                    "body": "<p>If anyone's having trouble with this (as I was), you can get the postback code for a button by adding the UseSubmitBehavior=\"false\" attribute to it. If you examine the rendered source of the button, you'll see the exact javascript you need to execute. In my case it was using the name of the button rather than the id.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have several small <code>div</code>s which utilizing <code>jQuery</code> draggable. These <code>div</code>s are placed in an <code>UpdatePanel</code>, and on dragstop I use the <code>_doPostBack()</code> JavaScript function. where i extract necessary information from the pages form. </p>\n\n<p>My problem is that when i call this function the whole page is re-loaded but i only want the update panel to be re-loaded.</p>\n",
            "last_activity_date": 1421946581,
            "question_id": 1305954,
            "score": 51,
            "tags": [
                "javascript",
                "asp.net",
                "updatepanel",
                "postback"
            ],
            "title": "ASP.NET postback with JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You can't avoid a server call here, JavaScript simply cannot (for security reasons) save a file to the user's file system.  You'll have to submit your data to the server and have <em>it</em> send the <code>.csv</code> as a link or an attachment directly.</p>\n\n<p><a href=\"http://www.w3.org/TR/FileAPI/\" rel=\"nofollow\">HTML5 has <em>some</em> ability to do this</a> (though saving really isn't specified - just a use case, you can <em>read</em> the file if you want), but there's no cross-browser solution in place now.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here are two <strong>WORKAROUNDS</strong> to the problem of triggering downloads from the client only. In later browsers you should look at \"blob\"</p>\n\n<hr>\n\n<p><strong>1. Drag and drop the table</strong></p>\n\n<p>Did you know you can simply DRAG your table into excel?</p>\n\n<p>Here is how to select the table to either cut and past or drag</p>\n\n<p><a href=\"http://stackoverflow.com/questions/2044616/select-a-complete-table-with-javascript-to-be-copied-to-clipboard\">Select a complete table with javascript (to be copied to clipboard)</a></p>\n\n<hr>\n\n<p><strong>2. create a popup page from your div</strong></p>\n\n<p>Although it will <strong>not produce a save dialog</strong>, if the <strong>resulting</strong> popup is saved with extension <em>.csv</em>, it will be treated correctly by Excel.  </p>\n\n<p>The string could be<br>\n<code>w.document.write(\"row1.1\\trow1.2\\trow1.3\\nrow2.1\\trow2.2\\trow2.3\");</code><br>\ne.g. tab-delimited with a linefeed for the lines.  </p>\n\n<p>There are plugins that will create the string for you - such as <a href=\"http://plugins.jquery.com/project/table2csv\" rel=\"nofollow\">http://plugins.jquery.com/project/table2csv</a></p>\n\n<pre><code>var w = window.open('','csvWindow'); // popup, may be blocked though\n// the following line does not actually do anything interesting with the \n// parameter given in current browsers, but really should have. \n// Maybe in some browser it will. It does not hurt anyway to give the mime type\nw.document.open(\"text/csv\");\nw.document.write(csvstring); // the csv string from for example a jquery plugin\nw.document.close();\n</code></pre>\n\n<hr>\n\n<p><strong>DISCLAIMER</strong>: These are workarounds, and does not fully answer the question which currently has the answer for most browser: not possible on the client only</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>By using just jQuery, you cannot avoid a server call.</p>\n\n<p>However, to achieve this result, I'm using <a href=\"https://github.com/dcneiner/Downloadify\" rel=\"nofollow\">Downloadify</a>, which lets me save files without having to make another server call. Doing this reduces server load and makes a good user experience.</p>\n\n<p>To get a proper CSV you just have to take out all the unnecessary tags and put a ',' between the data.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can do that in the client side only, in browser that accept <a href=\"http://en.wikipedia.org/wiki/Data_URI\" rel=\"nofollow\">Data URIs</a>:</p>\n\n<pre><code>data:application/csv;charset=utf-8,content_encoded_as_url\n</code></pre>\n\n<p>In your example the Data URI must be:</p>\n\n<pre><code>data:application/csv;charset=utf-8,Col1%2CCol2%2CCol3%0AVal1%2CVal2%2CVal3%0AVal11%2CVal22%2CVal33%0AVal111%2CVal222%2CVal333\n</code></pre>\n\n<p>You can call this URI by:</p>\n\n<ul>\n<li>using <code>window.open</code> </li>\n<li>or setting the <code>window.location</code></li>\n<li>or by the href of an anchor</li>\n<li>by adding the download attribute it will work in chrome, still have to test in IE. </li>\n</ul>\n\n<p>To test, simply copy the URIs above and paste in your browser address bar. Or test the anchor below in a HTML page:</p>\n\n<pre><code>&lt;a download=\"somedata.csv\" href=\"data:application/csv;charset=utf-8,Col1%2CCol2%2CCol3%0AVal1%2CVal2%2CVal3%0AVal11%2CVal22%2CVal33%0AVal111%2CVal222%2CVal333\"&gt;Example&lt;/a&gt;\n</code></pre>\n\n<p>To create the content, getting the values from the table, you can use <a href=\"http://www.kunalbabre.com/projects/table2CSV.php\" rel=\"nofollow\">table2CSV</a> and do:</p>\n\n<pre><code>var data = $table.table2CSV({delivery:'value'});\n\n$('&lt;a&gt;&lt;/a&gt;')\n    .attr('id','downloadFile')\n    .attr('href','data:text/csv;charset=utf8,' + encodeURIComponent(data))\n    .attr('download','filename.csv')\n    .appendTo('body');\n\n$('#downloadFile').ready(function() {\n    $('#downloadFile').get(0).click();\n});\n</code></pre>\n\n<p>Most, if not all, versions of IE don't support navigation to a data link, so a hack must be implemented, often with an <code>iframe</code>.  Using an <code>iFrame</code> <a href=\"http://stackoverflow.com/a/26003382/378151\">combined with <code>document.execCommand('SaveAs'..)</code></a>, you can get similar behavior on most currently used versions of IE.</p>\n",
                    "is_accepted": true,
                    "score": 84
                },
                {
                    "body": "<p>This is my implementation (based in: <a href=\"https://gist.github.com/3782074\">https://gist.github.com/3782074</a>):</p>\n\n<p><strong>Usage</strong>: </p>\n\n<pre><code>$(\"table.myclass\").toCSV();\n</code></pre>\n\n<p><strong>Code</strong>:</p>\n\n<pre><code>jQuery.fn.toCSV = function() {\n  var data = $(this).first(); //Only one table\n  var csvData = [];\n  var tmpArr = [];\n  var tmpStr = '';\n  data.find(\"tr\").each(function() {\n      if($(this).find(\"th\").length) {\n          $(this).find(\"th\").each(function() {\n            tmpStr = $(this).text().replace(/\"/g, '\"\"');\n            tmpArr.push('\"' + tmpStr + '\"');\n          });\n          csvData.push(tmpArr);\n      } else {\n          tmpArr = [];\n             $(this).find(\"td\").each(function() {\n                  if($(this).text().match(/^-{0,1}\\d*\\.{0,1}\\d+$/)) {\n                      tmpArr.push(parseFloat($(this).text()));\n                  } else {\n                      tmpStr = $(this).text().replace(/\"/g, '\"\"');\n                      tmpArr.push('\"' + tmpStr + '\"');\n                  }\n             });\n          csvData.push(tmpArr.join(','));\n      }\n  });\n  var output = csvData.join('\\n');\n  var uri = 'data:application/csv;charset=UTF-8,' + encodeURIComponent(output);\n  window.open(uri);\n}\n</code></pre>\n\n<p><strong>Notes</strong>: </p>\n\n<ul>\n<li>It uses \"th\" tags for headings. If they are not present, they are not\nadded. </li>\n<li>This code detects numbers in the format: -####.## (You will need modify the code in order to accept other formats, e.g. using commas).</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>I recently posted a free software library for this: <a href=\"http://github.com/DrPaulBrewer/html5csv\" rel=\"nofollow\">\"html5csv.js\" -- GitHub</a> </p>\n\n<p>It is intended to help streamline the creation of small simulator apps\nin Javascript that might need to import or export csv files, manipulate, display, edit\nthe data, perform various mathematical procedures like fitting, etc.</p>\n\n<p>After loading \"html5csv.js\" the problem of scanning a table and creating a CSV is a one-liner:</p>\n\n<pre><code>CSV.begin('#PrintDiv').download('MyData.csv').go();\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/DrPaulBrewer/raaaW/4/\" rel=\"nofollow\">JSFiddle demo of your example with this code</a>.</p>\n\n<p>Internally, for Firefox/Chrome this is a data URL oriented solution, similar to that proposed by @italo, @lepe, and @adeneo (on another question).  For IE </p>\n\n<p>The <code>CSV.begin()</code> call sets up the system to read the data into an internal array.  That fetch then occurs.  Then the <code>.download()</code> generates a data URL link internally and clicks it with a link-clicker. This pushes a file to the end user. </p>\n\n<p>According to <a href=\"http://caniuse.com/#search=download\" rel=\"nofollow\">caniuse</a> IE10 doesn't support <code>&lt;a download=...&gt;</code>. So for IE my library calls <code>navigator.msSaveBlob()</code> internally, as <a href=\"http://stackoverflow.com/a/27699027/103081\">suggested by @Manu Sharma</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I am dynamically generating a div which is like :</p>\n\n<pre><code>&lt;div id='PrintDiv'&gt;\n        &lt;table id=\"mainTable\"&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    Col1\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Col2\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Col3\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    Val1\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Val2\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Val3\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    Val11\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Val22\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Val33\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    Val111\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Val222\n                &lt;/td&gt;\n                &lt;td&gt;\n                    Val333\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>And there are lot more elements on the page as well.\nNow, how can i get a csv file like this :</p>\n\n<pre><code>Col1,Col2,Col3\nVal1,Val2,Val3\nVal11,Val22,Val33\nVal111,Val222,Val333\n</code></pre>\n\n<p>using jQuery ?</p>\n\n<p>need a file save dailog box too,like this :</p>\n\n<p><img src=\"http://i.stack.imgur.com/Mr3Tl.png\" alt=\"alt text\"></p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1423161056,
            "question_id": 4639372,
            "score": 33,
            "tags": [
                "javascript",
                "asp.net",
                "jquery",
                "csv"
            ],
            "title": "Export to csv in jQuery"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Track the value by hand.</p>\n\n<pre><code>var selects = jQuery(\"select.track_me\");\n\nselects.each(function (i, element) {\n  var select = jQuery(element);\n  var previousValue = select.val();\n  select.bind(\"change\", function () {\n    var currentValue = select.val();\n\n    // Use currentValue and previousValue\n    // ...\n\n    previousValue = currentValue;\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>store the selected value in a global variable. onchange will get that value and will after that update the global variable to the now new one.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Well, why don't you store the current selected value, and when the selected item is changed you will have the old value stored? (and you can update it again as you wish)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>please don't use a global var for this - store the prev value at the data\nhere is an example: <a href=\"http://jsbin.com/uqupu3/2/edit\">http://jsbin.com/uqupu3/2/edit</a></p>\n\n<p>the code for ref:</p>\n\n<pre><code>$(document).ready(function(){\n  var sel = $(\"#sel\");\n  sel.data(\"prev\",sel.val());\n\n  sel.change(function(data){\n     var jqThis = $(this);\n     alert(jqThis.data(\"prev\"));\n     jqThis.data(\"prev\",jqThis.val());\n  });\n});\n</code></pre>\n\n<p>just saw that you have many selects on page - this approach will also work for you since for each select you will store the prev value on the data of the select</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>Combine the <em>focus</em> event with the <em>change</em> event to achieve what you want:</p>\n\n<pre><code>(function () {\n    var previous;\n\n    $(\"select\").on('focus', function () {\n        // Store the current value on focus and on change\n        previous = this.value;\n    }).change(function() {\n        // Do something with the previous value after the change\n        alert(previous);\n\n        // Make sure the previous value is updated\n        previous = this.value;\n    });\n})();\n</code></pre>\n\n<p>Working example: <a href=\"http://jsfiddle.net/x5PKf/766\">http://jsfiddle.net/x5PKf/766</a></p>\n",
                    "is_accepted": true,
                    "score": 164
                },
                {
                    "body": "<p>I go for Avi Pinto's solution which uses <code>jquery.data()</code></p>\n\n<p>Using focus isn't a valid solution. It works at first time you change the options, but if you stay on that select element, and press key \"up\" or \"down\". It won't go through the focus event again.</p>\n\n<p>So the solution should be more looks like the following, </p>\n\n<pre><code>//set the pre data, usually needed after you initialize the select element\n$('mySelect').data('pre', $(this).val());\n\n$('mySelect').change(function(e){\n    var before_change = $(this).data('pre');//get the pre data\n    //Do your work here\n    $(this).data('pre', $(this).val());//update the pre data\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Use following code,I have tested it and its working</p>\n\n<pre><code>var prev_val;\n$('.dropdown').focus(function() {\n    prev_val = $(this).val();\n}).change(function(){\n            $(this).unbind('focus');\n            var conf = confirm('Are you sure want to change status ?');\n\n            if(conf == true){\n                //your code\n            }\n            else{\n                $(this).val(prev_val);\n                $(this).bind('focus');\n                return false;\n            }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code> $(\"#dropdownId\").one('focus', function () {\n    var ddl = $(this);\n    ddl.data('previous', ddl.val());\n}).on('change', function () {\n    var ddl = $(this);\n    var previous = ddl.data('previous');\n    ddl.data('previous', ddl.val());\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>(function() {\n\n    var value = $('[name=request_status]').change(function() {\n        if (confirm('You are about to update the status of this request, please confirm')) {\n            $(this).closest('form').submit(); // submit the form\n        }else {\n            $(this).val(value); // set the value back\n        }\n    }).val();\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am using event \"live\", my solution is basically similiar with Dimitiar, but instead of using \"focus\", my previous value is stored when \"click\" is triggered. </p>\n\n<pre><code>var previous = \"initial prev value\";\n$(\"select\").live('click', function () {\n        //update previous value\n        previous = $(this).val();\n    }).change(function() {\n        alert(previous); //I have previous value \n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>The thing i want to achieve is whenever the <code>&lt;select&gt;</code> dropdown is changed i want the value of the dropdown before change. I am using 1.3.2 version of jquery and using on change event but the value i am getting over there is after change.</p>\n\n<pre><code>&lt;select name=\"test\"&gt;\n&lt;option value=\"stack\"&gt;Stack&lt;/option&gt;\n&lt;option value=\"overflow\"&gt;Overflow&lt;/option&gt;\n&lt;option value=\"my\"&gt;My&lt;/option&gt;\n&lt;option value=\"question\"&gt;Question&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Lets say currently option My is selected now when i change it to stack in the onchange event (ie when i changed it to stack) i want it's previous value ie my expected in this case.</p>\n\n<p>How can this be achieved ?</p>\n\n<p><strong>Edit:</strong> In my case i am having multiple select boxes in the same page and want same thing to be applied to all of them. Also all of my select are inserted after page load through ajax.</p>\n",
            "last_activity_date": 1406903307,
            "question_id": 4076770,
            "score": 80,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events"
            ],
            "title": "Getting value of select (dropdown) before change"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The way I'm doing it now is basically like this:</p>\n\n<p>The HTML:</p>\n\n<pre><code>&lt;textarea id=\"myText\"&gt;\n    Lorem ipsum...\n&lt;/textarea&gt;\n&lt;button onclick=\"sendMail(); return false\"&gt;Send&lt;/button&gt;\n</code></pre>\n\n<p>The Javascript:</p>\n\n<pre><code>function sendMail() {\n    var link = \"mailto:me@example.com\"\n             + \"?cc=myCCaddress@example.com\"\n             + \"&amp;subject=\" + escape(\"This is my subject\")\n             + \"&amp;body=\" + escape(document.getElementById('myText').value)\n    ;\n\n    window.location.href = link;\n}\n</code></pre>\n\n<p>This, surprisingly, works rather well. The only problem is that if the body is particularly long (somewhere over 2000 characters), then it just opens a new email but there's no information in it. I suspect that it'd be to do with the maximum length of the URL being exceeded.</p>\n",
                    "is_accepted": true,
                    "score": 53
                },
                {
                    "body": "<p>If this is just going to open up the user's client to send the email, why not let them compose it there as well.  You lose the ability to track what they are sending, but if that's not important, then just collect the addresses and subject and pop up the client to let the user fill in the body.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You don't need any javascript, you just need your href to be coded like this:</p>\n\n<pre><code>&lt;a href=\"mailto:me@me.com\"&gt;email me here!&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>What about having a live validation on the textbox, and once it goes over 2000 (or whatever the maximum threshold is) then display 'This email is too long to be completed in the browser, please <code>&lt;span class=\"launchEmailClientLink\"&gt;launch what you have in your email client&lt;/span&gt;</code>'</p>\n\n<p>To which I'd have</p>\n\n<pre><code>.launchEmailClientLink {\ncursor: pointer;\ncolor: #00F;\n}\n</code></pre>\n\n<p>and jQuery this into your onDomReady</p>\n\n<pre><code>$('.launchEmailClientLink').bind('click',sendMail);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's the way doing it using jQuery and an \"element\" to click on :</p>\n\n<pre><code>$('#element').click(function(){\n    $(location).attr('href', 'mailto:?subject='\n                             + encodeURIComponent(\"This is my subject\")\n                             + \"&amp;body=\" \n                             + encodeURIComponent(\"This is my body\")\n    );\n});\n</code></pre>\n\n<p>Then, you can get your contents either by feeding it from input fields (ie. using <code>$('#input1').val()</code> or by a server side script with <code>$.get('...')</code>. Have fun</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>This is a little confusing to explain, so bear with me here...</p>\n\n<p>I want to set up a system where a user can send templated emails via my website, except it's not actually sent using my server - it instead just opens up their own local mail client with an email ready to go. The application would fill out the body of the email with predefined variables, to save the user having to type it themselves. They can then edit the message as desired, should it not exactly suit their purposes.</p>\n\n<p>There's a number of reasons I want it to go via the user's local mail client, so getting the server to send the email is not an option: it has to be 100% client-side.</p>\n\n<p>I already have a mostly-working solution running, and I'll post the details of that as an answer, I'm wondering if there's any better way?</p>\n",
            "last_activity_date": 1389348703,
            "question_id": 271171,
            "score": 44,
            "tags": [
                "javascript",
                "email",
                "client-scripting"
            ],
            "title": "Sending emails with Javascript"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Hate to say it, but I don't think there is a way to alleviate this. I do think that it depends on the client system, though, so a faster javascript engine or machine may make it <em>slightly</em> more accurate.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To my experience it is lost effort, even as the smallest reasonable amount of time I ever recognized js act in is around 32-33 ms. ...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is definitely a limitation here.  To give you some perspective, the Chrome browser Google just released is fast enough that it can execute setTimeout(function() {}, 0) in 15-20 ms whereas older Javascript engines took hundreds of milliseconds to execute that function.  Although setTimeout uses milliseconds, no javascript virtual machine at this point in time can execute code with that precision.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Dan, from my experience (that includes implementation of SMIL2.1 language in JavaScript, where time management is in subject) I can assure you that you actually never need high precision of setTimeout or setInterval.</p>\n\n<p>What does however matter is the order in which setTimeout/setInterval gets executed when queued - and that always works perfectly.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<blockquote>\n  <p>Are there any tricks that can be done\n  to ensure that <code>setTimeout()</code> performs\n  accurately (without resorting to an\n  external API) or is this a lost cause?</p>\n</blockquote>\n\n<p>No and no. You're not going to get anything close to a perfectly accurate timer with <code>setTimeout()</code> - browsers aren't set up for that. <strong>However</strong>, you don't need to rely on it for timing things either. Most animation libraries figured this out years ago: you set up a callback with <code>setTimeout()</code>, but determine what needs to be done based on the value of <code>(new Date()).milliseconds</code> (or equivalent). This allows you to take advantage of more reliable timer support in newer browsers, while still behaving appropriately on older browsers.</p>\n\n<p>It also allows you to <em>avoid using too many timers</em>! This is important: each timer is a callback. Each callback executes JS code. While JS code is executing, browser events - including other callbacks - are delayed or dropped. When the callback finishes, additional callbacks must compete with other browser events for a chance to execute. Therefore, one timer that handles all pending tasks for that interval will perform better than two timers with coinciding intervals, and (for short timeouts) better than two timers with overlapping timeouts!</p>\n\n<p>Summary: stop using <code>setTimeout()</code> to implement \"one timer / one task\" designs, and use the real-time clock to smooth out UI actions. </p>\n",
                    "is_accepted": true,
                    "score": 47
                },
                {
                    "body": "<p>JavaScript timeouts have a defacto limit of 10-15ms (I'm not sure what you're doing to get 200ms, unless you're doing 185ms of actual js execution).  This is due to windows having a standard timer resolution of 15ms, the only way to do better is to use Windows' higher resolution timers which is a system wide setting so can screw with other applications on the system and also chews battery life (Chrome has a bug from Intel on this issue).</p>\n\n<p>The defacto standard of 10-15ms is due to people using 0ms timeouts on websites but then coding in a way that assumes that assumes a 10-15ms timeout (eg. js games which assume 60fps but ask 0ms/frame with no delta logic so the game/site/animation goes a few orders of magnitude faster than intended).  To account for that, even on platforms that don't have windows' timer problems, the browsers limit timer resolution to 10ms. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>shog9's answer is pretty much what I'd say, although I'd add the following about UI animation/events:</p>\n\n<p>If you've got a box that's supposed to slide onto the screen, expand downwards, then fade in its contents, don't try to make all three events separate with delays timed to make them fire one after another - use callbacks, so once the first event is done sliding it calls the expander, once that's done it calls the fader. jQuery can do it easily, and I'm sure other libraries can as well.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You need to \"creep up\" on the target time. Some trial and error will be necessary but in essence.</p>\n\n<p>Set a timeout to complete arround 100ms before the required time</p>\n\n<p>make the timeout handler function like this:</p>\n\n<pre><code>calculate_remaining_time\nif remaining_time &gt; 20ms // maybe as much as 50\n  re-queue the handler for 10ms time\nelse\n{\n  while( remaining_time &gt; 0 ) calculate_remaining_time;\n  do_your_thing();\n  re-queue the handler for 100ms before the next required time\n}\n</code></pre>\n\n<p>But your while loop can still get interrupted by other processes so it's still not perfect.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you need to get an accurate callback on a given interval, this gist may help you:</p>\n\n<p><a href=\"https://gist.github.com/1185904\" rel=\"nofollow\">https://gist.github.com/1185904</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>.</p>\n\n<p>REF; <a href=\"http://www.sitepoint.com/creating-accurate-timers-in-javascript/\">http://www.sitepoint.com/creating-accurate-timers-in-javascript/</a></p>\n\n<p>This site bailed me out on a major scale.</p>\n\n<p>You can use the system clock to compensate for timer inaccuracy. If you run a timing function as a series of setTimeout calls \u2014 each instance calling the next \u2014 then all you have to do to keep it accurate is work out exactly how inaccurate it is, and subtract that difference from the next iteration:</p>\n\n<pre><code>var start = new Date().getTime(),  \n    time = 0,  \n    elapsed = '0.0';  \nfunction instance()  \n{  \n    time += 100;  \n    elapsed = Math.floor(time / 100) / 10;  \n    if(Math.round(elapsed) == elapsed) { elapsed += '.0'; }  \n    document.title = elapsed;  \n    var diff = (new Date().getTime() - start) - time;  \n    window.setTimeout(instance, (100 - diff));  \n}  \nwindow.setTimeout(instance, 100);  \n</code></pre>\n\n<p>This method will minimize drift and reduce the inaccuracies by more than 90%.</p>\n\n<p>It fixed my issues, hope it helps </p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Here's an example demoing Shog9's suggestion. This fills a jquery progress bar smoothly over 6 seconds, then redirects to a different page once it's filled: </p>\n\n<pre><code>var TOTAL_SEC = 6;\nvar FRAMES_PER_SEC = 60;\nvar percent = 0;\nvar startTime = new Date().getTime();\n\nsetTimeout(updateProgress, 1000 / FRAMES_PER_SEC);\n\nfunction updateProgress() {\n    var currentTime = new Date().getTime();\n\n    // 1000 to convert to milliseconds, and 100 to convert to percentage\n    percent = (currentTime - startTime) / (TOTAL_SEC * 1000) * 100;\n\n    $(\"#progressbar\").progressbar({ value: percent });\n\n    if (percent &gt;= 100) {\n        window.location = \"newLocation.html\";\n    } else {\n        setTimeout(updateProgress, 1000 / FRAMES_PER_SEC);\n    }                 \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had a similar problem not long ago and came up with an approach which combines <code>requestAnimationFrame</code> with performance.now() which works very effectively.</p>\n\n<p>Im now able to make timers accurate to approx 12 decimal places:</p>\n\n<pre><code>    window.performance = window.performance || {};\n    performance.now = (function() {\n        return performance.now       ||\n            performance.mozNow    ||\n            performance.msNow     ||\n            performance.oNow      ||\n            performance.webkitNow ||\n                function() {\n                    //Doh! Crap browser!\n                    return new Date().getTime(); \n                };\n        })();\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/CGWGreen/9pg9L/\" rel=\"nofollow\">http://jsfiddle.net/CGWGreen/9pg9L/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>If you're using <code>setTimeout()</code> to yield quickly to the browser</strong> so it's UI thread can catch up with any tasks it needs to do (such as updating a tab, or to not show the Long Running Script dialog), there is a new API called <a href=\"https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html\" rel=\"nofollow\">Efficient Script Yielding</a>, aka, <code>setImmediate()</code> that may work a bit better for you.</p>\n\n<p><code>setImmediate()</code> operates very similarly to <code>setTimeout()</code>, yet it may run immediately if the browser has nothing else to do.  In many situations where you are using <code>setTimeout(..., 16)</code> or <code>setTimeout(..., 4)</code> or <code>setTimeout(..., 0)</code> (i.e. you want the browser to run any outstanding UI thread tasks and not show a Long Running Script dialog), you can simply replace your <code>setTimeout()</code> with <code>setImmediate()</code>, dropping the second (millisecond) argument.</p>\n\n<p>The difference with <code>setImmediate()</code> is that it is basically a yield; if the browser has sometime to do on the UI thread (e.g., update a tab), it will do so before returning to your callback.  However, if the browser is already all caught up with its work, the callback specified in <code>setImmediate()</code> will essentially run without delay.</p>\n\n<p>Unfortunately it is only currently supported in IE9+, as there is some <a href=\"http://code.google.com/p/chromium/issues/detail?id=146172\" rel=\"nofollow\">push back</a> from the other browser vendors.</p>\n\n<p>There is a <a href=\"https://github.com/NobleJS/setImmediate\" rel=\"nofollow\">good polyfill</a> available though, if you want to use it and hope the other browsers implement it at some point.</p>\n\n<p><strong>If you are using <code>setTimeout()</code> for animation</strong>, <a href=\"http://www.w3.org/TR/animation-timing/\" rel=\"nofollow\">requestAnimationFrame</a> is your best bet as your code will run in-sync with the monitor's refresh rate.</p>\n\n<p><strong>If you are using <code>setTimeout()</code> on a slower cadence</strong>, e.g. once every 300 milliseconds, you could use a solution similar to what user1213320 suggests, where you monitor how long it was from the last timestamp your timer ran and compensate for any delay.  One improvement is that you could use the new <a href=\"http://www.w3.org/TR/hr-time/\" rel=\"nofollow\">High Resolution Time</a> interface (aka <code>window.performance.now()</code>) instead of <code>Date.now()</code> to get greater-than-millisecond resolution for the current time.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is a timer I made for a music project of mine which does this thing. Timer that is accurate on all devices.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var Timer = function(){\r\n  var framebuffer = 0,\r\n  var msSinceInitialized = 0,\r\n  var timer = this;\r\n\r\n  var timeAtLastInterval = new Date().getTime();\r\n\r\n  setInterval(function(){\r\n    var frametime = new Date().getTime();\r\n    var timeElapsed = frametime - timeAtLastInterval;\r\n    msSinceInitialized += timeElapsed;\r\n    timeAtLastInterval = frametime;\r\n  },1);\r\n\r\n  this.setInterval = function(callback,timeout,arguments) {\r\n    var timeStarted = msSinceInitialized;\r\n    var interval = setInterval(function(){\r\n      var totaltimepassed = msSinceInitialized - timeStarted;\r\n      if (totaltimepassed &gt;= timeout) {\r\n        callback(arguments);\r\n        timeStarted = msSinceInitialized;\r\n      }\r\n    },1);\r\n\r\n    return interval;\r\n  }\r\n}\r\n\r\nvar timer = new Timer();\r\ntimer.setInterval(function(){console.log(\"This timer will not drift.\"),1000}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Something that has always bugged me is how unpredictable the <code>setTimeout()</code> method in Javascript is.</p>\n\n<p>In my experience, the timer is horribly inaccurate in a lot of situations. By inaccurate, I mean the actual delay time seems to vary by 250-500ms more or less. Although this isn't a huge amount of time, when using it to hide/show UI elements the time can be visibly noticeable.</p>\n\n<p>Are there any tricks that can be done to ensure that <code>setTimeout()</code> performs accurately (without resorting to an external API) or is this a lost cause?</p>\n",
            "last_activity_date": 1417710837,
            "question_id": 196027,
            "score": 40,
            "tags": [
                "javascript",
                "timer"
            ],
            "title": "Is there a more accurate way to create a Javascript timer than setTimeout?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Javascript is limited when making ajax requests outside of the current domain.  </p>\n\n<ul>\n<li>Ex 1: your domain is example.com and you want to make a request to test.com => you cannot.   </li>\n<li>Ex 2: your domain is example.com and you want to make a request to inner.example.com => you cannot.</li>\n<li>Ex 3: your domain is example.com:80 and you want to make a request to example.com:81 => you cannot</li>\n<li>EX 4: your domain is example.com and you want to make a request to example.com => you can.</li>\n</ul>\n\n<p>Javascript is limited by the \"same origin policy\" for security reasons so that a malicious script cannot contact a remote server and send sensitive data.</p>\n\n<p><a href=\"http://www.google.it/url?sa=t&amp;rct=j&amp;q=jsonp&amp;source=web&amp;cd=1&amp;ved=0CDgQFjAA&amp;url=http://en.wikipedia.org/wiki/JSONP&amp;ei=N_g8T-CKLsKhOrW_xcEK&amp;usg=AFQjCNF9iru2-pOWuj8FjOdl2X4WcsD3ZQ&amp;sig2=KlUBhMqKwmdiCjIkxH4nxA\">jsonp</a> is a different way to use javascript. You make a request and results are encapsulated into a callback function which is run in the client. It's the same as linking a new script tag into the head part of your html (you know that you can load scripts from different domains than yours here).<br>\nHowever, to use jsonp the server must be configured properly. If this is not the case you cannot use jsonp and you MUST rely on a server side proxy (PHP, ASP, etc.). There are plenty of guides related to this topic, just google it!</p>\n",
                    "is_accepted": true,
                    "score": 78
                },
                {
                    "body": "<p>XMLHttpRequest will not let you reach <code>localhost:8080</code> because of the \"same origin policy\".</p>\n\n<p>You can allow requests from modern browsers by adding a header to your response on <code>localhost:8080</code>:</p>\n\n<pre><code>Access-Control-Allow-Origin: *\n</code></pre>\n\n<p>You can do so by adding directives to your HTTP server or adding headers via server-side code (PHP, Ruby, ...).</p>\n\n<p>Read more on Cross-Origin ajax requests on <a href=\"https://developer.mozilla.org/en/http_access_control\">https://developer.mozilla.org/en/http_access_control</a></p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>If you are using Chrome, a simple workaround (only for development purposes) is to use option <code>--disable-web-security</code>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Unrelated to this particular question, but for anyone in this situation using jQuery...This error is also caused if you try to make a JSONP request using jQuery and omit the magic callback parameter: <code>callback=?</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Add a global.asax in your solution.</p>\n\n<p>Add</p>\n\n<pre><code>HttpContext.Current.Response.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\n</code></pre>\n\n<p>in</p>\n\n<pre><code>protected void Application_BeginRequest(object sender, EventArgs e)\n{\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>If you are from a java background one possible solution could be to make a servlet which calls the Web-services for your javascript. something like the below code in the GET(Your-choice) method...</p>\n\n<pre><code>JsonElement jelement;\n    JsonArray jarray;\n    try {\n        URL url = new URL(\"http://rest.\"YOUR URL\"#ba0482\");\n        URLConnection connection = url.openConnection();\n        connection.setDoInput(true);\n        InputStream inStream = connection.getInputStream();\n        BufferedReader input = new BufferedReader(new InputStreamReader(inStream));\n\n        jelement = new JsonParser().parse(input);\n\n        jarray = jelement.getAsJsonArray();\n\n        response.setContentType(\"application/json\");\n        PrintWriter out = response.getWriter();\n        out.print(jarray);\n        out.flush();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>\n\n<p>Now in the javascript simply specify the url as the servlet name!!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For local development you can use a tool for modifying the HTTP response headers. For example <a href=\"http://www.charlesproxy.com\" rel=\"nofollow\">Charles</a> is able to do this by the included rewrite tool: <a href=\"http://www.charlesproxy.com/documentation/tools/rewrite/\" rel=\"nofollow\">Rewrite Tool</a></p>\n\n<p>Just add a new rule for the target domain/location with:</p>\n\n<pre><code>Type: Add Header\nWhere: Response\nReplace\n     Name: Access-Control-Allow-Origin\n     Value: *\nReplace All\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If your using apache, this works:  put this in/create a .htaccess file in your public root, and add any other file extensions you might need.  </p>\n\n<pre><code>&lt;FilesMatch \"\\.(ttf|otf|eot|woff|jpg|png|jpeg|gif|js|json|html|css)$\"&gt;\n  &lt;IfModule mod_headers.c&gt;\n    Header set Access-Control-Allow-Origin \"*\"\n  &lt;/IfModule&gt;\n&lt;/FilesMatch&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>if you re using google chrome as a browser you can add CORS extension, and activate it , it will solve the hole problem without having to change anything in your code</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am seeing the following error:</p>\n\n<pre><code>Origin http://localhost:8080 is not allowed by Access-Control-Allow-Origin\n</code></pre>\n\n<p>with this code:</p>\n\n<pre><code>var http = new getXMLHttpRequestObject();\nvar url = \"http://gdata.youtube.com/action/GetUploadToken\";\nvar sendXML = '&lt;?xml version=\"1.0\"?&gt;&lt;entry xmlns=\"http://www.w3.org/2005/Atom\"'+\n    'xmlns:media=\"http://search.yahoo.com/mrss/'+\n    'xmlns:yt=\"http://gdata.youtube.com/schemas/2007\"&gt;'+\n    '&lt;media:group&gt;&lt;media:title type=\"plain\"&gt;My First API&lt;/media:title&gt;'+\n    '&lt;media:description type=\"plain\"&gt;First API&lt;/media:description&gt;'+\n    '&lt;media:category scheme=\"http://gdata.youtube.com/schemas/2007/categories.cat\"&gt;People&lt;/media:category&gt;'+\n    '&lt;media:keywords&gt;first, api&lt;/media:keywords&gt;&lt;/media:group&gt;&lt;/entry&gt;';\nhttp.open(\"POST\", url, true);\nhttp.setRequestHeader(\"Authorization\", \"AuthSub token=\" + AccessToken);\nhttp.setRequestHeader(\"X-GData-Key\", \"key=\"+ dev_key);\nhttp.setRequestHeader(\"Content-Type\", \"application/atom+xml; charset=UTF-8\");\n\nhttp.onreadystatechange = function() {\n    if(http.readyState == 4) {\n        alert(http.responseXML);\n    }\n}\nhttp.send(sendXML);\n</code></pre>\n\n<p>What can cause this, and how do I solve it?</p>\n",
            "last_activity_date": 1418831323,
            "question_id": 9310112,
            "score": 61,
            "tags": [
                "javascript",
                "ajax",
                "xmlhttprequest",
                "youtube-api"
            ],
            "title": "Why am I seeing an &quot;origin is not allowed by Access-Control-Allow-Origin&quot; error here?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>The trick is to listen to the <code>dragend</code> event, and if the map is dragged outside the allowed bounds, move it back inside. If you define your allowed bounds as a <a href=\"http://code.google.com/apis/maps/documentation/javascript/reference.html#LatLngBounds\" rel=\"nofollow\"><code>LatLngBounds</code></a> object, you can use the <code>contains()</code> method, since it returns true if the given lat/lng argument is within the bounds.</p>\n\n<p>It is also important to limit the zoom level, but it seems you are already doing this.</p>\n\n<p>Therefore, you may want to try the following example:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt; \n&lt;head&gt; \n   &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/&gt; \n   &lt;title&gt;Google Maps JavaScript API v3 Example: Limit Panning&lt;/title&gt; \n   &lt;script type=\"text/javascript\" \n           src=\"http://maps.google.com/maps/api/js?sensor=false\"&gt;&lt;/script&gt;\n&lt;/head&gt; \n&lt;body&gt; \n   &lt;div id=\"map\" style=\"width: 400px; height: 300px;\"&gt;&lt;/div&gt; \n\n   &lt;script type=\"text/javascript\"&gt; \n\n   var minZoomLevel = 5;\n\n   var map = new google.maps.Map(document.getElementById('map'), {\n      zoom: minZoomLevel,\n      center: new google.maps.LatLng(38.50, -90.50),\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n   });\n\n   // Bounds for North America\n   var allowedBounds = new google.maps.LatLngBounds(\n     new google.maps.LatLng(28.70, -127.50), \n     new google.maps.LatLng(48.85, -55.90));\n\n   // Listen for the dragend event\n   google.maps.event.addListener(map, 'dragend', function() {\n     if (allowedBounds.contains(map.getCenter())) return;\n\n     // Out of bounds - Move the map back within the bounds\n\n     var c = map.getCenter(),\n         x = c.lng(),\n         y = c.lat(),\n         maxX = allowedBounds.getNorthEast().lng(),\n         maxY = allowedBounds.getNorthEast().lat(),\n         minX = allowedBounds.getSouthWest().lng(),\n         minY = allowedBounds.getSouthWest().lat();\n\n     if (x &lt; minX) x = minX;\n     if (x &gt; maxX) x = maxX;\n     if (y &lt; minY) y = minY;\n     if (y &gt; maxY) y = maxY;\n\n     map.setCenter(new google.maps.LatLng(y, x));\n   });\n\n   // Limit the zoom level\n   google.maps.event.addListener(map, 'zoom_changed', function() {\n     if (map.getZoom() &lt; minZoomLevel) map.setZoom(minZoomLevel);\n   });\n\n   &lt;/script&gt; \n&lt;/body&gt; \n&lt;/html&gt;\n</code></pre>\n\n<p>Screenshot from the above example. The user will not be able to drag further south or far east in this case:</p>\n\n<p><img src=\"http://i.imgur.com/3FvkTRH.png\" alt=\"Google Maps JavaScript API v3 Example: Limit Panning\"></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Here is a nice extension to <a href=\"http://stackoverflow.com/questions/3125065/how-do-i-limit-panning-in-google-maps-api-v3/3126754#3126754\">the above</a> that will reset the Map's center to the last valid position by listening to the dragstart event.</p>\n\n<pre><code>// Limit panning\nvar lastCenter = map.getCenter();\n\ngoogle.maps.event.addListener(map, 'dragstart', function() {\n    lastCenter = map.getCenter();\n});\n\ngoogle.maps.event.addListener(map, 'dragend', function() {\n    if(allowedBounds.contains(map.getCenter())) return;\n\n    map.setCenter(lastCenter);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I guess I'm a little bit late to the party, but since this was exactly what I needed just now AND I improved on it, I thought I'd post an answer anyway.</p>\n\n<p>With both the answers of <a href=\"http://stackoverflow.com/questions/3125065/how-do-i-limit-panning-in-google-maps-api-v3/3126754#3126754\">Daniel Vassallo</a> and <a href=\"http://stackoverflow.com/questions/3125065/how-do-i-limit-panning-in-google-maps-api-v3/4241201#4241201\">brendo</a>, the user can still use the pan-control (if it's activated) to move away from the wanted area. The thing @Yauhen.F mentioned in a comment.</p>\n\n<p>So instead of using the dragend event, I use the center_changed event. This is continuously fired during dragging and every time someone uses the pan control.</p>\n\n<pre><code>// bounds of the desired area\nvar allowedBounds = new google.maps.LatLngBounds(\n     new google.maps.LatLng(70.33956792419954, 178.01171875), \n     new google.maps.LatLng(83.86483689701898, -88.033203125)\n);\nvar lastValidCenter = map.getCenter();\n\ngoogle.maps.event.addListener(map, 'center_changed', function() {\n    if (allowedBounds.contains(map.getCenter())) {\n        // still within valid bounds, so save the last valid position\n        lastValidCenter = map.getCenter();\n        return; \n    }\n\n    // not valid anymore =&gt; return to last valid position\n    map.panTo(lastValidCenter);\n});\n</code></pre>\n\n<p>By saving the last valid position continuously during the dragging, the movement will just stop once it's out of bounds, instead of yerking back once the dragging ended.\n......</p>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>There is <a href=\"http://stackoverflow.com/questions/3901611/google-maps-api-v3-limit-map-bounds\">another thread</a> on the subject that is also very good. The problem I had to solve was that instead of setting boundaries manually and checking center containment, I wanted a boundary set on page load, then allow dragging to the edge if zoomed in.</p>\n\n<p>So I set panning boundaries on map load, once.\nThen I check if map is still at max zoom and if so, return the initial center.\nIf zoomed in, I want to pan to the EDGE of initial boundaries, not just check if CENTER contained, because that would extend the allowed panning by half the viewport.</p>\n\n<p>Unfortunately, although this gets the job done and works fine when paning slowly, it's a bit jerky if you pan quickly.</p>\n\n<p>If you have suggestions on how this can be avoided, I'd be grateful.</p>\n\n<pre><code>    map = new google.maps.Map( // defaults\n        document.getElementById(\"map22\"),\n        {\n            disableDefaultUI        : true,\n            zoomControl             : true,\n            zoom                    : 7,\n            minZoom                 : 7,\n            maxZoom                 : 10,\n            center                  : new google.maps.LatLng(\n                64.99473104134819,\n                -19.22332763671875\n            ),\n            mapTypeId               : google.maps.MapTypeId.ROADMAP\n        }\n    );\n\n\n\n    function borders(){\n        return {\n            maxLat : map.getBounds().getNorthEast().lat(),\n            maxLng : map.getBounds().getNorthEast().lng(),\n            minLat : map.getBounds().getSouthWest().lat(),\n            minLng : map.getBounds().getSouthWest().lng(),\n            center : map.getCenter()\n        }\n    }\n\n    google.maps.event.addListenerOnce(map,'idle',function() {\n        limit = borders();\n    });\n\n    google.maps.event.addListener(map,'drag',function() {\n        if(map.getZoom() == 7) return map.setCenter(limit.center);\n        current = borders();\n        if( current.maxLng &lt; limit.maxLng &amp;&amp; current.minLng &gt; limit.minLng ) activeCenterLng = current.center.lng();\n        if( current.maxLat &lt; limit.maxLat &amp;&amp; current.minLat &gt; limit.minLat ) activeCenterLat = current.center.lat();\n        map.setCenter(\n            new google.maps.LatLng(\n                activeCenterLat,\n                activeCenterLng\n            )\n        );\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>When I'm using drag or dragend or whatever, the map jumps back into allowed bounds instead of simply restricting overflowing movement. Just change the event to 'center_changed' to stop it from jumping around like that.</p>\n\n<p>Modified jsfiddle: <a href=\"http://jsfiddle.net/Vjdde/1/\" rel=\"nofollow\">http://jsfiddle.net/Vjdde/1/</a></p>\n\n<p>Edit: Not sure why the fiddle doesn't produce a stack overflow but it should, since setCenter will call center_changed again.. Just watch out </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I tried the answer from HenningJ and the map wouldn't stop panning until the center was in a corner of the bounds which was not ideal. Here is my solution:</p>\n\n<pre><code>google.maps.event.addListener(map, 'center_changed', function() {\n    var mapBounds = map.getBounds();\n    if(allowedBounds.contains(mapBounds.getNorthEast()) &amp;&amp; allowedBounds.contains(mapBounds.getSouthWest())) {\n        lastCenter = map.getCenter();\n        return;\n    }\n\n    map.panTo(lastCenter);\n}, this));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My version, based on the one from @HenningJ, but with some modification of the <code>lastValidCenter</code> to allow smooth dragging along the edges of the bounds.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;style type=\"text/css\"&gt;\n            html { height: 100% }\n            body { height: 100%; margin: 0; padding: 0 }\n            #map-canvas { height: 100% }\n        &lt;/style&gt;\n        &lt;script type=\"text/javascript\"\n            src=\"http://maps.google.com/maps/api/js?sensor=false\"&gt;&lt;/script&gt;\n        &lt;/script&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function initialize() {\n                var mapOptions = {\n                    center: new google.maps.LatLng(28.70, -127.50),\n                    zoom: 4,\n                    mapTypeId: google.maps.MapTypeId.ROADMAP\n                };\n                var map = new google.maps.Map(document.getElementById(\"map-canvas\"),\n                        mapOptions);\n\n                // bounds of the desired area\n                var allowedBounds = new google.maps.LatLngBounds(\n                  new google.maps.LatLng(28.70, -127.50),\n                  new google.maps.LatLng(48.85, -55.90)\n                );\n                var boundLimits = {\n                    maxLat : allowedBounds.getNorthEast().lat(),\n                    maxLng : allowedBounds.getNorthEast().lng(),\n                    minLat : allowedBounds.getSouthWest().lat(),\n                    minLng : allowedBounds.getSouthWest().lng()\n                };\n\n                var lastValidCenter = map.getCenter();\n                var newLat, newLng;\n                google.maps.event.addListener(map, 'center_changed', function() {\n                    center = map.getCenter();\n                    if (allowedBounds.contains(center)) {\n                        // still within valid bounds, so save the last valid position\n                        lastValidCenter = map.getCenter();\n                        return;\n                    }\n                    newLat = lastValidCenter.lat();\n                    newLng = lastValidCenter.lng();\n                    if(center.lng() &gt; boundLimits.minLng &amp;&amp; center.lng() &lt; boundLimits.maxLng){\n                        newLng = center.lng();\n                    }\n                    if(center.lat() &gt; boundLimits.minLat &amp;&amp; center.lat() &lt; boundLimits.maxLat){\n                        newLat = center.lat();\n                    }\n                    map.panTo(new google.maps.LatLng(newLat, newLng));\n                });\n            }\n            google.maps.event.addDomListener(window, 'load', initialize);\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"map-canvas\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Fiddle here: <a href=\"http://jsfiddle.net/koenpunt/n7h6t/\">http://jsfiddle.net/koenpunt/n7h6t/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The solutions here left me with 2 issues.  First of all, if you held down the arrow key so that it started panning rapidly, when it hit the edge, it wouldn't go all the way to the edge because due to the panning acceleration taking large \"steps\", the next \"step\" would have gone outside the bounds, so it doesn't take that last \"step\".  So once it stopped, you could release the arrow key and then press it again, and it would pan just a little bit further.  Second, these solutions didn't properly contain the panning after a zoom change.  I managed to solve both, and posted my solution <a href=\"http://stackoverflow.com/a/17328707/1609411\">in another thread</a>, but I thought I'd link it here, since this was the thread that first got me started in the right direction.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The best method to restrict is, set the zoom level and center point and disable the controls like zoom, scroll etc like below.</p>\n\n<pre><code> var latlng = new google.maps.LatLng(18.283078,84.047556);\n     var myOptions = {\n          zoom: 12,\n\n          center: latlng,\n          zoomControl: false,\n          mapTypeId: google.maps.MapTypeId.ROADMAP,\n          scrollwheel: false,\n        navigationControl: false,\n        mapTypeControl: false,\n        scaleControl: false,\n        draggable: false,\n        disableDoubleClickZoom: true,\n        };\n        map = new google.maps.Map(document.getElementById(\"map_canvas\"),   myOptions);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>In V2 there was a way to limit panning/dragging so the map stays within certain bounds. How is that done in V3? </p>\n\n<p>Let's say I want the users to only look at Europe. I've already limited the zoom, but if I allow dragging (which I have to in this case, for other reasons) then the user can pan beyond the area I want to show.</p>\n\n<p>Please give working example or code snippet - I'm not an expert coder... </p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1406167288,
            "question_id": 3125065,
            "score": 40,
            "tags": [
                "javascript",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "How do I limit panning in Google maps API V3?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Use a couple of functions and a boolean.  Here's a pattern, not full code:</p>\n\n<pre><code> var state = false,\n     oddONes = function () {...},\n     evenOnes = function() {...};\n\n $(\"#time\").click(function(){\n     if(!state){\n        evenOnes();\n     } else {\n        oddOnes();\n     }\n     state = !state;\n  });\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>  var cases[] = {\n      function evenOnes(){...},  // these could even be anonymous functions\n      function oddOnes(){...}    // function(){...}\n  };\n\n  var idx = 0; // should always be 0 or 1\n\n  $(\"#time\").click(function(idx){cases[idx = ((idx+1)%2)]()}); // corrected\n</code></pre>\n\n<p>(Note the second is off the top of my head and I mix languages a lot, so the exact syntax isn't guaranteed.  Should be close to real Javascript through.)        </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would do something like this for the code you showed, if all you need to do is toggle a value :</p>\n\n<pre><code>var oddClick = true;\n$(\"#time\").click(function() {\n    $(this).animate({\n        width: oddClick ? 260 : 30\n    },1500);\n    oddClick = !oddClick;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>If all you're doing is keeping a boolean <code>isEven</code> then you can consider checking if a class <code>isEven</code> is on the element then toggling that class.</p>\n\n<p>Using a shared variable like count is kind of bad practice. Ask yourself what is the scope of that variable, think of if you had 10 items that you'd want to toggle on your page, would you create 10 variables, or an array or variables to store their state? Probably not.</p>\n\n<p>Edit:<br>\njQuery has a <a href=\"http://docs.jquery.com/UI/Effects/switchClass\" rel=\"nofollow\">switchClass</a> method that, when combined with hasClass can be used to animate between the two width you have defined. This is favourable because you can change these sizes later in your stylesheet or add other parameters, like background-color or margin, to transition.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>jQuery has two methods called <code>.toggle()</code>. The <a href=\"http://api.jquery.com/toggle-event/\">other one <em><sup>[docs]</sup></em></a> does exactly what you want for click events.</p>\n\n<p><strong>Note:</strong> It seems that at least since <strong>jQuery 1.7</strong>, this version of <code>.toggle</code> is <strong>deprecated</strong>, probably for exactly that reason, namely that two versions exist. Using <code>.toggle</code> to change the visibility of elements is just a more common usage. The method was <strong>removed in jQuery 1.9</strong>.</p>\n\n<p>Below is an example of how one could implement the same functionality as a plugin (but probably exposes the same problems as the built-in version (see the last paragraph in the documentation)).</p>\n\n<hr>\n\n<pre><code>(function($) {\n    $.fn.clickToggle = function(func1, func2) {\n        var funcs = [func1, func2];\n        this.data('toggleclicked', 0);\n        this.click(function() {\n            var data = $(this).data();\n            var tc = data.toggleclicked;\n            $.proxy(funcs[tc], this)();\n            data.toggleclicked = (tc + 1) % 2;\n        });\n        return this;\n    };\n}(jQuery));\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/npwAz/1/\"><strong>DEMO</strong></a></p>\n\n<p><em>(Disclaimer: I don't say this is the best implementation! I bet it can be improved in terms of performance)</em></p>\n\n<p>And then call it with:</p>\n\n<pre><code>$('#test').clickToggle(function() {   \n    $(this).animate({\n        width: \"260px\"\n    }, 1500);\n},\nfunction() {\n    $(this).animate({\n        width: \"30px\"\n    }, 1500);\n});\n</code></pre>\n\n<p><strong>Update 2:</strong></p>\n\n<p>In the meantime, I created a proper plugin for this. It accepts an arbitrary number of functions and can be used for any event. <a href=\"https://github.com/fkling/jQuery-Function-Toggle-Plugin\">It can be found on GitHub</a>.</p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>I used this to create a toggle effect between two functions.</p>\n\n<pre><code>var x = false\n$(element).on('click', function(){\n if (!x){\n  //function\n  x = true;\n }\n else {\n  //function\n  x = false;\n }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"http://jsfiddle.net/cse_tushar/npwAz/81/\"><strong>DEMO</strong></a></p>\n\n<p><a href=\"http://api.jquery.com/one/\">.one()</a> documentation. </p>\n\n<p>I am very late to answer but i think it's shortest code and might help.</p>\n\n<pre><code>function handler1() {\n    alert('First handler: ' + $(this).text());\n    $(this).one(\"click\", handler2);\n}\nfunction handler2() {\n    alert('Second handler: ' + $(this).text());\n    $(this).one(\"click\", handler1);\n}\n$(\"div\").one(\"click\", handler1);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/cse_tushar/FcvaD/83/\"><strong>DEMO With Op's Code</strong></a></p>\n\n<pre><code>function handler1() {\n    $(this).animate({\n        width: \"260px\"\n    }, 1500);\n    $(this).one(\"click\", handler2);\n}\n\nfunction handler2() {\n    $(this).animate({\n        width: \"30px\"\n    }, 1500);\n    $(this).one(\"click\", handler1);\n}\n$(\"#time\").one(\"click\", handler1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<h2>Micro jQuery Plugin</h2>\n\n<p>If you want your own chainable <strong>clickToggle</strong> jQuery Method you can do it like:</p>\n\n<p><strong><a href=\"http://jsbin.com/mohite/1/edit?html,js,console,output\">DEMO</a></strong></p>\n\n<pre><code>jQuery.fn.clickToggle = function(a,b) {\n  var ab=[b,a];\n  function cb(){ ab[this._tog^=1].call(this); }\n  return this.on(\"click\", cb);\n};\n</code></pre>\n\n<p>\n\n<pre><code>$(\"selector\").clickToggle(function() {   \n// Do something here\n}, function() {\n// Do thething here\n}); // (you can chain here other jQuery methods)\n</code></pre>\n\n<hr>\n\n<h2>Simple Functions Toggler</h2>\n\n<p><strong><a href=\"http://jsbin.com/ohOZEYI/1/edit\">LIVE DEMO</a></strong></p>\n\n<pre><code>function a(){ console.log('a'); }\nfunction b(){ console.log('b'); }\n\n$(\"selector\").click(function() { \n  return (this.tog = !this.tog) ? a() : b();\n});\n</code></pre>\n\n<p>If you want it even shorter (<em>why would one, right?!</em>) you can use the <a href=\"http://stackoverflow.com/a/22061240/383904\">Bitwise XOR</a> <sup><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\">*Docs</a></sup> operator like:<br>\n <a href=\"http://jsbin.com/ohOZEYI/5/edit\"><strong>DEMO</strong></a></p>\n\n<pre><code>  return (this.tog^=1) ? a() : b();\n</code></pre>\n\n<p><strong>That's all.</strong><br>\n<sub>The trick is to set to the <code>this</code> Object a <code>boolean</code> property <code>tog</code>,  and toggle it using <em>negation</em> (<code>tog = !tog</code>)<br>\nand put the needed function calls\n in a <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional Operator</a></em> <code>?:</code></sub>\n<br><br><br></p>\n\n<hr>\n\n<p>In OP's example (even with multiple elements) could look like:</p>\n\n<pre><code>function a(el){ $(el).animate({width: 260}, 1500); }\nfunction b(el){ $(el).animate({width: 30}, 1500);  }\n\n$(\"selector\").click(function() {\n  var el = this;\n  return (el.t = !el.t) ? a(el) : b(el);\n}); \n</code></pre>\n\n<p><strong><em>ALSO</em>:</strong> You can also <strong><em>store</em>-toggle</strong> like:<br>\n<a href=\"http://jsbin.com/farolo/1/edit?html,js,output\"><strong>DEMO</strong></a>:</p>\n\n<pre><code>$(\"selector\").click(function() {\n  $(this).animate({width: (this.tog ^= 1) ? 260 : 30 });\n}); \n</code></pre>\n\n<p><sub>but it was not the OP's exact request for he's <em><code>looking for a way to have two separate operations / functions</code></em> </sub></p>\n\n<hr>\n\n<h2>Using <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">Array.prototype.reverse</a>:</h2>\n\n<p><sub><strong>Note</strong>: this will not store the current Toggle state but just inverse our functions positions in Array (It has it's uses...)</sub></p>\n\n<p>You simply store your <em>a,b</em> functions inside an array, <em>onclick</em> you simply reverse the array order and execute the <code>array[1]</code> function:</p>\n\n<p><strong><a href=\"http://jsbin.com/wisuju/1/edit\">LIVE DEMO</a></strong></p>\n\n<pre><code>function a(){ console.log(\"a\"); }\nfunction b(){ console.log(\"b\"); }\nvar ab = [a,b];\n\n$(\"selector\").click(function(){\n  ab.reverse()[1](); // Reverse and Execute! // &gt;&gt; \"a\",\"b\",\"a\",\"b\"...\n});\n</code></pre>\n\n<hr>\n\n<h2>SOME MASHUP!</h2>\n\n<p><strong><a href=\"http://jsbin.com/farolo/3/edit\">jQuery DEMO</a></strong><br>\n<strong><a href=\"http://jsfiddle.net/zzeqp6w2/\">JavaScript DEMO</a></strong></p>\n\n<p>Create a nice function <code>toggleAB()</code> that will contain your two functions, <strong>put them in Array</strong>, and at the end of the array you simply execute the function [<code>0 // 1</code>] respectively depending on the <code>tog</code> property that's passed to the function from the <code>this</code>  reference:</p>\n\n<pre><code>function toggleAB(){\n  var el = this; // `this` is the \"button\" Element Obj reference`\n  return [\n    function() { console.log(\"b\"); },\n    function() { console.log(\"a\"); }\n  ][el.tog^=1]();\n}\n\n$(\"selector\").click( toggleAB );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I am looking for a way to have two separate operations / functions / \"blocks of code\" run when something is clicked and then a totally different block when the same thing is clicked again. I put this together. I was wondering if there was a more efficient / elegant way. I know about jQuery <a href=\"http://api.jquery.com/toggle\">.toggle()</a> but it kind of sucks.</p>\n\n<p>Working here:\n<a href=\"http://jsfiddle.net/reggi/FcvaD/1/\">http://jsfiddle.net/reggi/FcvaD/1/</a></p>\n\n<pre><code>var count = 0;\n$(\"#time\").click(function() {\n    count++;\n    //even odd click detect \n    var isEven = function(someNumber) {\n        return (someNumber % 2 === 0) ? true : false;\n    };\n    // on odd clicks do this\n    if (isEven(count) === false) {\n        $(this).animate({\n            width: \"260px\"\n        }, 1500);\n    }\n    // on even clicks do this\n    else if (isEven(count) === true) {\n        $(this).animate({\n            width: \"30px\"\n        }, 1500);\n    }\n});\n</code></pre>\n",
            "last_activity_date": 1415306199,
            "question_id": 4911577,
            "score": 31,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery click / toggle between two functions"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The <code>~</code> seems to do <code>-(N+1)</code>. So <code>~2 == -(2 + 1) == -3</code> If you do it again on -3 it turns it back: <code>~-3 == -(-3 + 1) == 2</code> It probably just converts a string to a number in a round-about way.</p>\n\n<p>See this thread: <a href=\"http://www.sitepoint.com/forums/showthread.php?t=663275\" rel=\"nofollow\">http://www.sitepoint.com/forums/showthread.php?t=663275</a></p>\n\n<p>Also, more detailed info is available here: <a href=\"http://dreaminginjavascript.wordpress.com/2008/07/04/28/\" rel=\"nofollow\">http://dreaminginjavascript.wordpress.com/2008/07/04/28/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>It removes everything after the decimal point because the bitwise operators implicitly convert their operands to signed 32-bit integers. This works whether the operands are (floating-point) numbers or strings, and the result is a number.</p>\n\n<p>In other words, it yields:</p>\n\n<pre><code>function(x) {\n  if(x &lt; 0) return Math.ceil(x);\n  else return Math.floor(x);\n}\n</code></pre>\n\n<p>only if <em>x</em> is between -(2<sup>31</sup>) and 2<sup>31</sup> - 1. Otherwise, overflow will occur and the number will \"wrap around\".</p>\n\n<p>This may be considered useful to convert a function's string argument to a number, but both because of the possibility of overflow and that it is incorrect for use with non-integers, I would not use it that way except for \"code golf\" (<em>i.e.</em> pointlessly trimming bytes off the source code of your program at the expense of readability and robustness). I would use <code>+x</code> or <code>Number(x)</code> instead.</p>\n\n<hr>\n\n<h3>How this is the NOT of the NOT</h3>\n\n<p>The number -43.2, for example is:</p>\n\n<blockquote>-43.2<sub>10</sub> = 11111111111111111111111111010101<sub>2</sub></blockquote>\n\n<p>as a signed (two's complement) 32-bit binary number. (JavaScript ignores what is after the decimal point.) Inverting the bits gives:</p>\n\n<blockquote>NOT -43<sub>10</sub> = 00000000000000000000000000101010<sub>2</sub> = 42<sub>10</sub></blockquote>\n\n<p>Inverting again gives:</p>\n\n<blockquote>NOT 42<sub>10</sub> = 11111111111111111111111111010101<sub>2</sub> = -43<sub>10</sub></blockquote>\n\n<p>This differs from <code>Math.floor(-43.2)</code> in that negative numbers are rounded toward zero, not away from it. (The floor function, which would equal -44, always rounds down to the next lower integer, regardless of whether the number is positive or negative.)</p>\n",
                    "is_accepted": true,
                    "score": 115
                },
                {
                    "body": "<p>Given <code>~N</code> is <code>-(N+1)</code>, <code>~~N</code> is then <code>-(-(N+1) + 1)</code>. Which, evidently, leads to a <a href=\"https://dreaminginjavascript.wordpress.com/2008/07/04/28/\">neat trick</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The first ~ operator forces the operand to an integer (possibly after coercing the value to a string or a boolean), then inverts the lowest 31 bits. Officially ECMAScript numbers are all floating-point, but some numbers are implemented as 31-bit integers in the SpiderMonkey engine.</p>\n\n<p>You can use it to turn a 1-element array into an integer. Floating-points are converted according to the C rule, ie. truncation of the fractional part.</p>\n\n<p>The second ~ operator then inverts the bits back, so you know that you will have an integer. This is not the same as coercing a value to boolean in a condition statement, because an empty object {} evaluates to true, whereas ~~{} evaluates to false.</p>\n\n<pre><code>js&gt;~~\"yes\"\n0\njs&gt;~~3\n3\njs&gt;~~\"yes\"\n0\njs&gt;~~false\n0\njs&gt;~~\"\"\n0\njs&gt;~~true\n1\njs&gt;~~\"3\"\n3\njs&gt;~~{}\n0\njs&gt;~~{a:2}\n0\njs&gt;~~[2]\n2\njs&gt;~~[2,3]\n0\njs&gt;~~{toString: function() {return 4}}\n4\njs&gt;~~NaN\n0\njs&gt;~~[4.5]\n4\njs&gt;~~5.6\n5\njs&gt;~~-5.6\n-5\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>In ECMAScript 6, the equivalent of <code>~~</code> is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\" rel=\"nofollow\">Math.trunc</a>:</p>\n\n<blockquote>\n  <p>Returns the integral part of a number by removing any fractional digits. It does not round any numbers.</p>\n</blockquote>\n\n<pre><code>Math.trunc(13.37)   // 13\nMath.trunc(42.84)   // 42\nMath.trunc(0.123)   //  0\nMath.trunc(-0.123)  // -0\nMath.trunc(\"-1.123\")// -1\nMath.trunc(NaN)     // NaN\nMath.trunc(\"foo\")   // NaN\nMath.trunc()        // NaN\n</code></pre>\n\n<p>The polyfill:</p>\n\n<pre><code>function trunc(x) {\n    return x &lt; 0 ? Math.ceil(x) : Math.floor(x);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I was checking out an online game physics library today and came across the ~~ operator.  I know a single ~ is a bitwise NOT, would that make ~~ a NOT of a NOT, which would give back the same value, wouldn't it?</p>\n",
            "last_activity_date": 1418829050,
            "question_id": 4055633,
            "score": 86,
            "tags": [
                "javascript"
            ],
            "title": "What does ~~ (&quot;double tilde&quot;) do in Javascript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Try using <code>scrolling=no</code> attribute on the iframe tag. Mozilla also has an <code>overflow-x</code> and <code>overflow-y</code> CSS property you may look into.</p>\n\n<p>In terms of the height, you could also try <code>height=100%</code> on the iframe tag.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Fitting IFRAME contents is kind of an easy thing to <a href=\"http://www.google.com/search?q=fit+iframe+to+contents\" rel=\"nofollow\">find on Google</a>. Here's <a href=\"http://www.kaali.co.uk/article-Cross-bowser-iframe-auto-resize-script-94.htm\" rel=\"nofollow\">one solution</a>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function autoIframe(frameId) {\n       try {\n          frame = document.getElementById(frameId);\n          innerDoc = (frame.contentDocument) ? frame.contentDocument : frame.contentWindow.document;\n          objToResize = (frame.style) ? frame.style : frame;\n          objToResize.height = innerDoc.body.scrollHeight + 10;\n       }\n       catch(err) {\n          window.status = err.message;\n       }\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>This of course doesn't solve the cross-domain problem you are having... Setting <code>document.domain</code> might help if these sites are in the same place. I don't think there is a solution if you are iframe-ing random sites.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can do this with JavaScript.</p>\n\n<pre><code>document.getElementById('foo').height = document.getElementById('foo').contentWindow.document.body.scrollHeight + \"px\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>To directly answer your two subquestions: No, you cannot do this with Ajax, nor can you calculate it with PHP.</p>\n\n<p>What I have done in the past is use a trigger from the iframe'd page in <code>window.onload</code> (NOT <code>domready</code>, as it can take a while for images to load) to pass the page's body height to the parent.</p>\n\n<pre><code>&lt;body onload='parent.resizeIframe(document.body.scrollHeight)'&gt;\n</code></pre>\n\n<p>Then the <code>parent.resizeIframe</code> looks like this:</p>\n\n<pre><code>function resizeIframe(newHeight)\n{\n    document.getElementById('blogIframe').style.height = parseInt(newHeight,10) + 10 + 'px';\n}\n</code></pre>\n\n<p>Et voila, you have a robust resizer that triggers once the page is fully rendered with no nasty <code>contentdocument</code> vs <code>contentWindow</code> fiddling :)</p>\n\n<p>Sure, now people will see your iframe at default height first, but this can be easily handled by hiding your iframe at first and just showing a 'loading' image. Then, when the <code>resizeIframe</code> function kicks in, put two extra lines in there that will hide the loading image, and show the iframe for that faux Ajax look.</p>\n\n<p>Of course, this only works from the same domain, so you may want to have a proxy PHP script to embed this stuff, and once you go there, you might as well just embed your blog's RSS feed directly into your site with PHP.</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>Below is my <code>onload</code> event handler.</p>\n\n<p>I use an IFRAME within a <a href=\"http://en.wikipedia.org/wiki/JQuery_UI\" rel=\"nofollow\">jQuery UI</a> dialog. Different usages will need some adjustments.\nThis seems to do the trick for me (for now) in Internet Explorer 8 and Firefox 3.5.\nIt might need some extra tweaking, but the general idea should be clear.</p>\n\n<pre><code>    function onLoadDialog(frame) {\n    try {\n        var body = frame.contentDocument.body;\n        var $body = $(body);\n        var $frame = $(frame);\n        var contentDiv = frame.parentNode;\n        var $contentDiv = $(contentDiv);\n\n        var savedShow = $contentDiv.dialog('option', 'show');\n        var position = $contentDiv.dialog('option', 'position');\n        // disable show effect to enable re-positioning (UI bug?)\n        $contentDiv.dialog('option', 'show', null);\n        // show dialog, otherwise sizing won't work\n        $contentDiv.dialog('open');\n\n        // Maximize frame width in order to determine minimal scrollHeight\n        $frame.css('width', $contentDiv.dialog('option', 'maxWidth') -\n                contentDiv.offsetWidth + frame.offsetWidth);\n\n        var minScrollHeight = body.scrollHeight;\n        var maxWidth = body.offsetWidth;\n        var minWidth = 0;\n        // decrease frame width until scrollHeight starts to grow (wrapping)\n        while (Math.abs(maxWidth - minWidth) &gt; 10) {\n            var width = minWidth + Math.ceil((maxWidth - minWidth) / 2);\n            $body.css('width', width);\n            if (body.scrollHeight &gt; minScrollHeight) {\n                minWidth = width;\n            } else {\n                maxWidth = width;\n            }\n        }\n        $frame.css('width', maxWidth);\n        // use maximum height to avoid vertical scrollbar (if possible)\n        var maxHeight = $contentDiv.dialog('option', 'maxHeight')\n        $frame.css('height', maxHeight);\n        $body.css('width', '');\n        // correct for vertical scrollbar (if necessary)\n        while (body.clientWidth &lt; maxWidth) {\n            $frame.css('width', maxWidth + (maxWidth - body.clientWidth));\n        }\n\n        var minScrollWidth = body.scrollWidth;\n        var minHeight = Math.min(minScrollHeight, maxHeight);\n        // descrease frame height until scrollWidth decreases (wrapping)\n        while (Math.abs(maxHeight - minHeight) &gt; 10) {\n            var height = minHeight + Math.ceil((maxHeight - minHeight) / 2);\n            $body.css('height', height);\n            if (body.scrollWidth &lt; minScrollWidth) {\n                minHeight = height;\n            } else {\n                maxHeight = height;\n            }\n        }\n        $frame.css('height', maxHeight);\n        $body.css('height', '');\n\n        // reset widths to 'auto' where possible\n        $contentDiv.css('width', 'auto');\n        $contentDiv.css('height', 'auto');\n        $contentDiv.dialog('option', 'width', 'auto');\n\n        // re-position the dialog\n        $contentDiv.dialog('option', 'position', position);\n\n        // hide dialog\n        $contentDiv.dialog('close');\n        // restore show effect\n        $contentDiv.dialog('option', 'show', savedShow);\n        // open using show effect\n        $contentDiv.dialog('open');\n        // remove show effect for consecutive requests\n        $contentDiv.dialog('option', 'show', null);\n\n        return;\n    }\n\n    //An error is raised if the IFrame domain != its container's domain\n    catch (e) {\n        window.status = 'Error: ' + e.number + '; ' + e.description;\n        alert('Error: ' + e.number + '; ' + e.description);\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's my solution to the problem using MooTools which works in Firefox 3.6, Safari 4.0.4 and Internet Explorer 7: </p>\n\n<pre><code>var iframe_container = $('iframe_container_id');\nvar iframe_style = {\n    height: 300,\n    width: '100%'\n};\nif (!Browser.Engine.trident) {\n    // IE has hasLayout issues if iframe display is none, so don't use the loading class\n    iframe_container.addClass('loading');\n    iframe_style.display = 'none';\n}\nthis.iframe = new IFrame({\n    frameBorder: 0,\n    src: \"http://www.youriframeurl.com/\",\n    styles: iframe_style,\n    events: {\n        'load': function() {\n            var innerDoc = (this.contentDocument) ? this.contentDocument : this.contentWindow.document;\n            var h = this.measure(function(){\n                return innerDoc.body.scrollHeight;\n            });            \n            this.setStyles({\n                height: h.toInt(),\n                display: 'block'\n            });\n            if (!Browser.Engine.trident) {\n                iframe_container.removeClass('loading');\n            }\n        }\n    }\n}).inject(iframe_container);\n</code></pre>\n\n<p>Style the \"loading\" class to show an Ajax loading graphic in the middle of the iframe container. Then for browsers other than Internet Explorer, it will display the full height IFRAME once the loading of its content is complete and remove the loading graphic.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The trick is to acquire all the necessary iframe events from an external script. For instance, you have a script which creates the iFrame using document.createElement; in this same script you temporarily have access to the contents of the iFrame.</p>\n\n<pre><code>var dFrame = document.createElement(\"iframe\");\ndFrame.src = \"http://www.example.com\";\n// Acquire onload and resize the iframe\ndFrame.onload = function()\n{\n    // Setting the content window's resize function tells us when we've changed the height of the internal document\n    // It also only needs to do what onload does, so just have it call onload\n    dFrame.contentWindow.onresize = function() { dFrame.onload() };\n    dFrame.style.height = dFrame.contentWindow.document.body.scrollHeight + \"px\";\n}\nwindow.onresize = function() {\n    dFrame.onload();\n}\n</code></pre>\n\n<p>This works because dFrame stays in scope in those functions, giving you access to the external iFrame element from within the scope of the frame, allowing you to see the actual document height and expand it as necessary. This example will work in firefox but nowhere else; I could give you the workarounds, but you can figure out the rest ;)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><em><a href=\"http://www.mattcutts.com/blog/iframe-height-scrollbar-example/\" rel=\"nofollow\">How to dynamically adjust an iframe\u2019s height</a></em> is really simple and tested by me.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@SchizoDuckie's answer is very elegant and lightweight, but due to Webkit's lack of implementation for scrollHeight (see <a href=\"https://developer.mozilla.org/en/DOM/element.scrollHeight\" rel=\"nofollow\">here</a>), does not work on Webkit-based browsers (Safari, Chrome, various and sundry mobile platforms).</p>\n\n<p>For this basic idea to work on Webkit along with Gecko and Trident browsers, one need only replace</p>\n\n<pre><code>&lt;body onload='parent.resizeIframe(document.body.scrollHeight)'&gt;\n</code></pre>\n\n<p>with </p>\n\n<pre><code>&lt;body onload='parent.resizeIframe(document.body.offsetHeight)'&gt;\n</code></pre>\n\n<p>So long as everything is on the same domain, this works quite well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this, you can change for even when you want. this example use jQuery.</p>\n\n<pre><code>$('#iframe').live('mousemove', function (event) {   \n    var theFrame = $(this, parent.document.body);\n    this.height($(document.body).height() - 350);           \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just spent the better part of 3 days wrestling with this. I'm working on an application that loads other applications into itself while maintaining a fixed header and a fixed footer. Here's what I've come up with. (I also used EasyXDM, with success, but pulled it out later to use this solution.)</p>\n\n<p>Make sure to run this code AFTER the <code>&lt;iframe&gt;</code> exists in the DOM. Put it into the page that pulls in the iframe (the parent).</p>\n\n<pre><code>// get the iframe\nvar theFrame = $(\"#myIframe\");\n// set its height to the height of the window minus the combined height of fixed header and footer\ntheFrame.height(Number($(window).height()) - 80);\n\nfunction resizeIframe() {\n    theFrame.height(Number($(window).height()) - 80);\n}\n\n// setup a resize method to fire off resizeIframe.\n// use timeout to filter out unnecessary firing.\nvar TO = false;\n$(window).resize(function() {\n    if (TO !== false) clearTimeout(TO);\n    TO = setTimeout(resizeIframe, 500); //500 is time in miliseconds\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am opening my blog page in my website. The problem is I can give a width to an iframe but the height should be dynamic so that there is no scrollbar in the iframe, and it looks like a single page...</p>\n\n<p>I have tried various JavaScript code to calculate the height of the content but all of them give an <em>access denied permission</em> error and is of no use.</p>\n\n<pre><code>&lt;iframe src=\"http://bagtheplanet.blogspot.com/\" name=\"ifrm\" id=\"ifrm\" width=\"1024px\" &gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Can we use Ajax to calculate height or maybe using PHP?</p>\n",
            "last_activity_date": 1397159766,
            "question_id": 525992,
            "score": 66,
            "tags": [
                "php",
                "javascript",
                "ajax",
                "iframe"
            ],
            "title": "Resize iframe height according to content height in it"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Try</p>\n\n<pre><code>/{(.*?)}/\n</code></pre>\n\n<p>That means, match any character between { and }, but don't be greedy - match the shortest string which ends with } (the ? stops * being greedy). The parentheses let you extract the matched portion.</p>\n\n<p>Another way would be</p>\n\n<pre><code>/{([^}]*)}/\n</code></pre>\n\n<p>This matches any character except a } char (another way of not being greedy)</p>\n",
                    "is_accepted": false,
                    "score": 135
                },
                {
                    "body": "<p>If your string will always be of that format, a regex is overkill:</p>\n\n<pre><code>&gt;&gt;&gt; var g='{getThis}';\n&gt;&gt;&gt; g.substring(1,g.length-1)\n\"getThis\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<pre><code>/\\{([^}]+)\\}/\n\n/        - delimiter\n\\{       - opening literal brace escaped because it is a special character used for quantifiers eg {2,3}\n(        - start capturing\n[^}]     - character class consisting of\n    ^    - not\n    }    - a closing brace (no escaping necessary because special characters in a character class are different)\n+        - one or more of the character class\n)        - end capturing\n\\}       - the closing literal brace\n/        - delimiter\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 86
                },
                {
                    "body": "<p>This one works in Textmate and it matches everything in a CSS file between the curly brackets.</p>\n\n<pre><code>\\{(\\s*?.*?)*?\\}\n</code></pre>\n\n<p><code>\nselector {.\n.\nmatches here\nincluding white space.\n.\n.}\n</code></p>\n\n<p>If you want to further be able to return the content, then wrap it all in one more set of parentheses like so:</p>\n\n<pre><code>\\{((\\s*?.*?)*?)\\}\n</code></pre>\n\n<p>and you can access the contents via $1.</p>\n\n<p>This also works for functions, but I haven't tested it with nested curly brackets.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If you're using PHP and you have the following strings and want to extract the albumid.</p>\n\n<pre><code>http://picasaweb.google.com/data/entry/base/user/user/albumid/5241920314542926625?alt=rss&amp;hl=en_US\nhttp://picasaweb.google.com/data/entry/base/user/user/albumid/5200211976033472801?alt=rss&amp;hl=en_US\n\npreg_match('/albumid\\/(.*?)\\?/',$item-&gt;guid, $match);\n</code></pre>\n\n<p>$match would contain something like this.</p>\n\n<pre><code>Array ( [0] =&gt; albumid/5241920314542926625? [1] =&gt; 5241920314542926625 )\nArray ( [0] =&gt; albumid/5200211976033472801? [1] =&gt; 5200211976033472801 ) \n</code></pre>\n\n<p>So basically use match[1] to get the value that you need inside your delimiter.</p>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p>You want to use regex lookahead and lookbehind. This will give you only what is inside the curly braces:  </p>\n\n<pre><code>(?&lt;=\\{)(.*?)(?=\\})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here's a simple solution using javascript replace</p>\n\n<pre><code>var st = '{getThis}';\n\nst = st.replace(/\\{|\\}/gi,''); // \"getThis\"\n</code></pre>\n\n<p>As the accepted answer above points out the original problem is easily solved with substring, but using replace can solve the more complicated use cases</p>\n\n<p>If you have a string like \"randomstring999[fieldname]\"\nYou use a slightly different pattern to get fieldname</p>\n\n<pre><code>var nameAttr = \"randomstring999[fieldname]\";\n\njustName = nameAttr.replace(/.*\\[|\\]/gi,''); // \"fieldname\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>var re = /{(.*)}/;\nvar m = \"{helloworld}\".match(re);\nif (m != null)\n    console.log(m[0].replace(re, '$1'));\n</code></pre>\n\n<p>The simpler <code>.replace(/.*{(.*)}.*/, '$1')</code> unfortunately returns the entire string if the regex does not match. The above code snippet can more easily detect a match.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Unfortunately, despite having tried to learn regex at least one time a year for as many years as I can remember, I always forget as I use them so infrequently. This year my new year's resolution is to not try and learn regex again - <em>So this year to save me from tears I'll give it to Stack Overflow</em>. (Last Christmas remix).</p>\n\n<p>I want to pass in a string in this format <code>{getThis}</code>, and be returned the string <code>getThis</code>. Could anyone be of assistance in helping to stick to my new year's resolution?</p>\n\n<hr>\n\n<p>Related questions on Stack Overflow:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/346567/how-can-one-turn-regular-quotes-i-e-into-latex-tex-quotes-i-e\">How can one turn regular quotes (i.e. &#39;, &quot;) into LaTeX/TeX quotes (i.e. `&#39;, ``&#39;&#39;)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1237/regex-to-pull-out-a-section-a-substing-from-a-string-between-two-tags\">Regex: To pull out a sub-string between two tags in a string</a></li>\n<li><a href=\"http://stackoverflow.com/questions/328387/regex-to-replace-all-n-in-a-string-but-no-those-inside-code-code-tag\">Regex to replace all \\n in a String, but no those inside [code] [/code] tag</a></li>\n</ul>\n",
            "last_activity_date": 1423478509,
            "question_id": 413071,
            "score": 47,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "Regex to get string between curly braces &quot;{I want what&#39;s between the curly braces}&quot;"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<pre><code>function hasClass(ele,cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)'));\n}\n\nfunction removeClass(ele,cls) {\n        if (hasClass(ele,cls)) {\n            var reg = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n            ele.className=ele.className.replace(reg,' ');\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>try:</p>\n\n<pre><code>function removeClassName(elem, name){\n    var remClass = elem.className;\n    var re = new RegExp('(^| )' + name + '( |$)');\n    remClass = remClass.replace(re, '$1');\n    remClass = remClass.replace(/ $/, '');\n    elem.className = remClass;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>document.getElementById(\"MyID\").className =\n    document.getElementById(\"MyID\").className.replace(/\\bMyClass\\b/,'');\n</code></pre>\n\n<p>where <code>MyID</code> is the ID of the element and MyClass is the name of the class you wish to remove.</p>\n",
                    "is_accepted": false,
                    "score": 238
                },
                {
                    "body": "<p>You could simply set the elements class to nothing.</p>\n\n<pre><code>document.getElementById(\"whatever\").className = \"\";\n</code></pre>\n\n<p>or if you wanted to keep a particular class you could just reset the class</p>\n\n<pre><code>document.getElementById(\"whatever\").className = \"\";\ndocument.getElementById(\"whatever\").className = \"classToKeep\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 66
                },
                {
                    "body": "<p>The right and standard way to do it is using <code>classList</code>. However <a href=\"http://caniuse.com/#search=classList\" rel=\"nofollow\">the browser support is limited</a>:</p>\n\n<pre><code>ELEMENT.classList.remove(\"CLASS_NAME\");\n</code></pre>\n\n<p>I'm going to publish an article about that on <a href=\"http://hacks.mozilla.org\" rel=\"nofollow\">http://hacks.mozilla.org</a> next week with fallback mechanism for other browsers.</p>\n\n<p>Documentation: <a href=\"https://developer.mozilla.org/en/DOM/element.classList\" rel=\"nofollow\">https://developer.mozilla.org/en/DOM/element.classList</a></p>\n",
                    "is_accepted": false,
                    "score": 93
                },
                {
                    "body": "<p>Here's a way to bake this functionality right into all DOM elements:</p>\n\n<pre><code>HTMLElement.prototype.removeClass = function(remove) {\n    var newClassName = \"\";\n    var i;\n    var classes = this.className.split(\" \");\n    for(i = 0; i &lt; classes.length; i++) {\n        if(classes[i] !== remove) {\n            newClassName += classes[i] + \" \";\n        }\n    }\n    this.className = newClassName;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>There is also <code>$.toggleClass</code>, <code>$.addClass</code>, and <code>$.removeClass</code>. For documentation, take a look at <a href=\"http://api.jquery.com/toggleClass/\" rel=\"nofollow\">http://api.jquery.com/toggleClass/</a>.</p>\n\n<p>Take a look at this <a href=\"http://jsfiddle.net/7jmsH/\" rel=\"nofollow\">jsFiddle example</a> to see it in action.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<pre><code>div.classList.add(\"foo\");\ndiv.classList.remove(\"foo\");\n</code></pre>\n\n<p>More at <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element.classList\">https://developer.mozilla.org/en-US/docs/Web/API/element.classList</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>All of these answers are way too complicated, try</p>\n\n<pre><code>var string = \"Hello, whats on your mind?\";\nvar new_string = string.replace(', whats on your mind?', '');\n</code></pre>\n\n<p>The result would be a return of the string</p>\n\n<pre><code>Hello\n</code></pre>\n\n<p>Super easy. Credits go to jondavidjohn <a href=\"http://stackoverflow.com/questions/8529070/remove-portion-of-string-in-javascript\">Remove portion of string in Javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It's very simple, I think.</p>\n\n<pre><code>document.getElementById(\"whatever\").classList.remove(\"className\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><b>Edit</b></p>\n\n<p>Okay, complete re-write.\nIt's been a while, I've learned a bit and the comments have helped.</p>\n\n<pre><code>Node.prototype.hasClass = function (className) {\n    if (this.classList) {\n        return this.classList.contains(className);\n    } else {\n        return (-1 &lt; this.className.indexOf(className));\n    }\n};\n\nNode.prototype.addClass = function (className) {\n    if (this.classList) {\n        this.classList.add(className);\n    } else if (!this.hasClass(className)) {\n        var classes = this.className.split(\" \");\n        classes.push(className);\n        this.className = classes.join(\" \");\n    }\n    return this;\n};\n\nNode.prototype.removeClass = function (className) {\n    if (this.classList) {\n        this.classList.remove(className);\n    } else {\n        var classes = this.className.split(\" \");\n        classes.splice(classes.indexOf(className), 1);\n        this.className = classes.join(\" \");\n    }\n    return this;\n};\n</code></pre>\n\n<p><hr>\n<b>Old Post</b>\n<hr>\nI was just working with something like this. Here's a solution I came up with...</p>\n\n<pre><code>// Some browsers don't have a native trim() function\nif(!String.prototype.trim) {\n    Object.defineProperty(String.prototype,'trim', {\n        value: function() {\n            return this.replace(/^\\s+|\\s+$/g,'');\n        },\n        writable:false,\n        enumerable:false,\n        configurable:false\n    });\n}\n// addClass()\n// first checks if the class name already exists, if not, it adds the class.\nObject.defineProperty(Node.prototype,'addClass', {\n    value: function(c) {\n        if(this.className.indexOf(c)&lt;0) {\n            this.className=this.className+=' '+c;\n        }\n        return this;\n    },\n    writable:false,\n    enumerable:false,\n    configurable:false\n});\n// removeClass()\n// removes the class and cleans up the className value by changing double \n// spacing to single spacing and trimming any leading or trailing spaces\nObject.defineProperty(Node.prototype,'removeClass', {\n    value: function(c) {\n        this.className=this.className.replace(c,'').replace('  ',' ').trim();\n        return this;\n    },\n    writable:false,\n    enumerable:false,\n    configurable:false\n});\n</code></pre>\n\n<p>Now you can call <code>myElement.removeClass('myClass')</code></p>\n\n<p>or chain it: <code>myElement.removeClass(\"oldClass\").addClass(\"newClass\");</code></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>var element = document.getElementById('example_id');\nvar remove_class = 'example_class';\n\nelement.className = element.className.replace(' ' + remove_class, '').replace(remove_class, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>document.getElementById(\"whatever\").className += \"classToKeep\";\n</code></pre>\n\n<p>With the plus sign ('+') appending the class as opposed to overwriting any existing classes    </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use this JS snippet code :</p>\n\n<p>First of all, I reach all the classes then according to index of my target class, I set <strong>className = \"\"</strong>.</p>\n\n<pre><code>Target = document.getElementsByClassName(\"yourClass\")[1];\nTarget.className=\"\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Could anyone let me know how to remove a class on an element using JavaScript only?\nPlease do not give me an answer with jQuery as I can't use it, and I don't know anything about it.</p>\n",
            "last_activity_date": 1425365640,
            "question_id": 2155737,
            "score": 111,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "Remove CSS class from element with JavaScript (no jQuery)"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>There are no JS callbacks for CSS assets.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>try this:</p>\n\n<pre><code>$('&lt;img/&gt;').attr('src', 'http://picture.de/image.png').load(function() {\n   $(this).remove(); // prevent memory leaks as @benweet suggested\n   $('body').css('background-image', 'url(http://picture.de/image.png)');\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 128
                },
                {
                    "body": "<p>Something like this:</p>\n\n<pre><code>var $div = $('div'),\n  bg = $div.css('background-image');\n  if (bg) {\n    var src = bg.replace(/(^url\\()|(\\)$|[\\\"\\'])/g, ''),\n      $img = $('&lt;img&gt;').attr('src', src).on('load', function() {\n        // do something, maybe:\n        $div.fadeIn();\n      });\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I have a <a href=\"https://github.com/alexanderdickson/waitForImages\">jQuery plugin</a> called <code>waitForImages</code> that can detect when background images have downloaded.</p>\n\n<pre><code>$('body')\n  .css('background-image','url(http://picture.de/image.png)')\n  .waitForImages(function() {\n    alert('Background image done loading');\n    // This *does* work\n  }, $.noop, true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Here is a small plugin I made to allow you to do exactly this, it also works on multiple background images and multiple elements:</p>\n\n<p>Read the article:</p>\n\n<p><a href=\"http://catmull.uk/code-lab/background-image-loaded/\" rel=\"nofollow\">http://catmull.uk/code-lab/background-image-loaded/</a></p>\n\n<p>or go straight to the plugin code:</p>\n\n<p><a href=\"http://catmull.uk/downloads/bg-loaded/bg-loaded.js\" rel=\"nofollow\">http://catmull.uk/downloads/bg-loaded/bg-loaded.js</a></p>\n\n<p>So just include the plugin and then call it on the element:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://catmull.uk/downloads/bg-loaded/bg-loaded.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n   $('body').bgLoaded();\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Obviously download the plugin and store it on your own hosting.</strong></p>\n\n<p>By default it adds an additional \"bg-loaded\" class  to each matched element once the background is loaded but you can easily change that by passing it a different function like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://catmull.uk/downloads/bg-loaded/bg-loaded.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n   $('body').bgLoaded({\n      afterLoaded : function() {\n         alert('Background image done loading');\n      }\n   });\n&lt;/script&gt;\n</code></pre>\n\n<p>Here is a codepen demonstrating it working.</p>\n\n<p><a href=\"http://codepen.io/catmull/pen/Lfcpb\" rel=\"nofollow\">http://codepen.io/catmull/pen/Lfcpb</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I want to set a background image on the body tag, then run some code - like this:</p>\n\n<pre><code>$('body').css('background-image','http://picture.de/image.png').load(function() {\n    alert('Background image done loading');\n    // This doesn't work\n});\n</code></pre>\n\n<p>How can I make sure the background image is fully loaded?</p>\n",
            "last_activity_date": 1415094977,
            "question_id": 5057990,
            "score": 55,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How can I check if a background image is loaded?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.chrome.com/extensions/content_scripts.html\">Content scripts</a> run in an isolated environment. To get access to the any global properties (of the page's <code>window</code>), you have to either inject a new <code>&lt;script&gt;</code> element, or use event listeners for passing data.</p>\n\n<p>See <a href=\"http://stackoverflow.com/a/9517879/938089?building-a-chrome-extension-with-youtube-events\">this answer</a> for example on injecting a <code>&lt;script&gt;</code> element in the context of the page.</p>\n\n<h2>Example</h2>\n\n<p><strong>contentscript.js</strong> (<code>\"run_at\": \"document_end\"</code> in manifest):</p>\n\n<pre><code>var s = document.createElement('script');\ns.src = chrome.extension.getURL('script.js');\n(document.head||document.documentElement).appendChild(s);\ns.onload = function() {\n    s.parentNode.removeChild(s);\n};\n\n// Event listener\ndocument.addEventListener('RW759_connectExtension', function(e) {\n    // e.detail contains the transferred data (can be anything, ranging\n    // from JavaScript objects to strings).\n    // Do something, for example:\n    alert(e.detail);\n});\n</code></pre>\n\n<p><strong><code>script.js</code></strong> - Located in the extension directory:</p>\n\n<pre><code>setTimeout(function() {\n    /* Example: Send data to your Chrome extension*/\n    document.dispatchEvent(new CustomEvent('RW759_connectExtension', {\n        detail: GLOBALS // Some variable from Gmail.\n    }));\n}, 0);\n</code></pre>\n\n<p>Since it is being loaded via a chrome: URL from within the DOM, script.js must be added to the web_accessible_resources section of the manifest file.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>A more modern solution for communicating between a chrome extension content_script and the javascript on the page would be to use the html5 postMessage API.  Any messages sent to \"window\" are visible from both the javascript on the webpage and the extension's content_script.</p>\n\n<p>The extension's content_script.js:</p>\n\n<pre><code>window.addEventListener('message', function(event) {\n    console.log('content_script.js got message:', event);\n    // check event.type and event.data\n});\n\nsetTimeout(function () {\n    console.log('cs sending message');\n    window.postMessage({ type: 'content_script_type',\n                         text: 'Hello from content_script.js!'},\n                       '*' /* targetOrigin: any */ );\n}, 1000);\n</code></pre>\n\n<p>The javascript running on the webpage:</p>\n\n<pre><code>window.addEventListener('message', function(event) {\n    console.log('page javascript got message:', event);\n});\n\nsetTimeout(function() {\n    console.log('page javascript sending message');\n    window.postMessage({ type: 'page_js_type',\n                         text: \"Hello from the page's javascript!\"},\n                       '*' /* targetOrigin: any */);\n}, 2000);\n</code></pre>\n\n<p>Also see <a href=\"http://developer.chrome.com/extensions/content_scripts.html#host-page-communication\" rel=\"nofollow\">http://developer.chrome.com/extensions/content_scripts.html#host-page-communication</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is a new API for web pages to communicate securely and without any side effects (window.postMessage can have other listeners!) to the content script.</p>\n\n<p>\"From the web page, use the runtime.sendMessage or runtime.connect APIs to send a message to a specific app or extension\"</p>\n\n<pre><code>// The ID of the extension we want to talk to.\nvar editorExtensionId = \"abcdefghijklmnoabcdefhijklmnoabc\";\n\n// Make a simple request:\nchrome.runtime.sendMessage(editorExtensionId, {openUrlInEditor: url},\n  function(response) {\n    if (!response.success)\n    handleError(url);\n});\n</code></pre>\n\n<p>\"From your app or extension, you may listen to messages from web pages via the runtime.onMessageExternal or runtime.onConnectExternal APIs, similar to cross-extension messaging. Only the web page can initiate a connection. [...]\"</p>\n\n<p>(from <a href=\"http://developer.chrome.com/extensions/messaging.html\" rel=\"nofollow\">http://developer.chrome.com/extensions/messaging.html</a>)\nThis is still only available in chrome's dev channel, but seems like it'll be in the next version or so.</p>\n\n<p>Don't ask me how this works, it seems highly confusing. How on earth does chrome.runtime get defined on the web page? What if the script already defined that variable for some reason? I also couldn't find the chromium bug report to see the history of the development of this feature.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am working on an extension for Chrome. I wish parse the content of the \"original\" Gmail message (the currently viewed message).</p>\n\n<p>I am familiar with <a href=\"http://stackoverflow.com/questions/7054204/programmatically-click-gmails-show-original-button-in-a-chrome-extension\">programmatically click Gmail&#39;s &quot;show original&quot; button in a chrome extension?</a>. But since it does not reveal much information, it is hard to understand it.</p>\n\n<p>I tried to utilize the jQuery.load() as follows</p>\n\n<pre><code>$(windows).load(function() { alert(GLOBALS); });\n</code></pre>\n\n<p>and place it at the content script, but it does not work either. I am using Chrome's developer tools, which returns the following error on the invocation of the <code>alert(GLOBALS);</code></p>\n\n<pre><code>Uncaught ReferenceError: GLOBALS is not defined\n</code></pre>\n\n<p>although, when using the developers tools' console, typing into the console <code>GLOBALS</code> it returns an array. Any clue how can to programatically read the content of the original message? or how to access the GLOBALS from the content script?</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>I edited my original post for clarity.</p>\n",
            "last_activity_date": 1395899546,
            "question_id": 9602022,
            "score": 9,
            "tags": [
                "javascript",
                "html",
                "dom",
                "google-chrome-extension"
            ],
            "title": "Chrome extension - retrieving Gmail&#39;s original message"
        }
    ]
}
