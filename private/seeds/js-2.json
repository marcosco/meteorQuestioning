{
    "items": [
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><strong>Edit</strong></p>\n\n<p>This answer is now deprecated. See the answer by <a href=\"http://stackoverflow.com/a/11546242/165737\">apsillers</a>.</p>\n\n<p>Since this is for a Chrome extension, you might as well use the standard DOM event - <code>DOMSubtreeModified</code>. See the support for this <a href=\"http://www.quirksmode.org/dom/events/#t18\">event</a> across browsers. It has been supported in Chrome since 1.0.</p>\n\n<pre><code>$(\"#someDiv\").bind(\"DOMSubtreeModified\", function() {\n    alert(\"tree changed\");\n});\n</code></pre>\n\n<p>See a working example <a href=\"http://jsfiddle.net/eQErD/1/\">here</a>.</p>\n",
                    "is_accepted": true,
                    "score": 132
                },
                {
                    "body": "<p>Another approach depending on how you are changing the div.\nIf you are using JQuery to change a div's contents with its html() method, you can extend that method and call a registration function each time you put html into a div.</p>\n\n<pre><code>(function( $, oldHtmlMethod ){\n    // Override the core html method in the jQuery object.\n    $.fn.html = function(){\n        // Execute the original HTML method using the\n        // augmented arguments collection.\n\n        var results = oldHtmlMethod.apply( this, arguments );\n        com.invisibility.elements.findAndRegisterElements(this);\n        return results;\n\n    };\n})( jQuery, jQuery.fn.html );\n</code></pre>\n\n<p>We just intercept the calls to html(), call a registration function with this, which in the context refers to the target element getting new content, then we pass on the call to the original jquery.html() function. Remember to return the results of the original html() method, because JQuery expects it for method chaining.</p>\n\n<p>For more info on method overriding and extension, check out <a href=\"http://www.bennadel.com/blog/2009-Using-Self-Executing-Function-Arguments-To-Override-Core-jQuery-Methods.htm\">http://www.bennadel.com/blog/2009-Using-Self-Executing-Function-Arguments-To-Override-Core-jQuery-Methods.htm</a>, which is where I cribbed the closure function. Also check out the plugins tutorial at JQuery's site.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Several years later, there is now officially a better solution.  <a href=\"http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html\">DOM4 Mutation Observers</a> are the replacement for deprecated DOM3 mutation events.  They are currently implemented in Firefox as <code>MutationObserver</code> and in Chrome as the vendor-prefixed <code>WebKitMutationObserver</code>:</p>\n\n<pre><code>MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\nvar observer = new MutationObserver(function(mutations, observer) {\n    // fired when a mutation occurs\n    console.log(mutations, observer);\n    // ...\n});\n\n// define what element should be observed by the observer\n// and what types of mutations trigger the callback\nobserver.observe(document, {\n  subtree: true,\n  attributes: true\n  //...\n});\n</code></pre>\n\n<p>This example listens for DOM changes on <code>document</code> and its entire subtree, and it will fire on changes to element attributes as well as structural changes.  The draft spec has a full list of valid <a href=\"https://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#mutationobserverinit\">mutation listener properties</a>:</p>\n\n<blockquote>\n  <p><strong>childList</strong></p>\n  \n  <ul>\n  <li>Set to <code>true</code> if mutations to target's children are to be observed.</li>\n  </ul>\n  \n  <p><strong>attributes</strong></p>\n  \n  <ul>\n  <li>Set to <code>true</code> if mutations to target's attributes are to be observed.</li>\n  </ul>\n  \n  <p><strong>characterData</strong></p>\n  \n  <ul>\n  <li>Set to <code>true</code> if mutations to target's data are to be observed.</li>\n  </ul>\n  \n  <p><strong>subtree</strong></p>\n  \n  <ul>\n  <li>Set to <code>true</code> if mutations to not just target, but also target's descendants are to be observed.</li>\n  </ul>\n  \n  <p><strong>attributeOldValue</strong></p>\n  \n  <ul>\n  <li>Set to <code>true</code> if <code>attributes</code> is set to true and target's attribute value before the mutation needs to be recorded.</li>\n  </ul>\n  \n  <p><strong>characterDataOldValue</strong></p>\n  \n  <ul>\n  <li>Set to <code>true</code> if <code>characterData</code> is set to true and target's data before the mutation needs to be recorded.</li>\n  </ul>\n  \n  <p><strong>attributeFilter</strong></p>\n  \n  <ul>\n  <li>Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed.</li>\n  </ul>\n</blockquote>\n\n<p>(This list is current as of April 2014; you may check the specification for any changes.)</p>\n",
                    "is_accepted": false,
                    "score": 183
                }
            ],
            "body": "<p>Essentially I want to have a script execute when the contents of a DIV change. Since the scripts are separate (content script in chrome extension &amp; webpage script), I need a way simply observe changes in DOM state. I could set up polling but that seems sloppy.</p>\n",
            "last_activity_date": 1420499805,
            "question_id": 2844565,
            "score": 160,
            "tags": [
                "javascript",
                "jquery",
                "google-chrome-extension"
            ],
            "title": "Is there a jQuery DOM change listener?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>JavaScript can read the DOM and render a fairly accurate representation of that using <code>canvas</code>. I have been working on a script which converts html into an canvas image. Decided today to make an implementation of it into sending feedbacks like you described.</p>\n\n<p>The script allows you to create feedback forms which include a screenshot, created on the clients browser, along with the form. The screenshot is based on the DOM and as such may not be 100% accurate to the real representation as it does not make an actual screenshot, but builds the screenshot based on the information available on the page.</p>\n\n<p>It <strong>does not require any rendering from the server</strong>, as the whole image is created on the clients browser. The HTML2Canvas script itself is still in a very experimental state, as it does not parse nearly as much of the CSS3 attributes I would want it to, nor does it have any support to load CORS images even if a proxy was available.</p>\n\n<p>Still quite limited browser compatibility (not because more couldn't be supported, just haven't had time to make it more cross browser supported).</p>\n\n<p>For more information, have a look at the examples here:</p>\n\n<p><a href=\"http://hertzen.com/experiments/jsfeedback/\">http://hertzen.com/experiments/jsfeedback/</a></p>\n\n<p><strong>edit</strong>\nThe html2canvas script is now available seperately <a href=\"https://github.com/niklasvh/html2canvas\">here</a> and some <a href=\"http://html2canvas.hertzen.com/\">examples here</a>.</p>\n\n<p><strong>edit 2</strong>\nAnother confirmation that Google uses a very similar method, (in fact based on the documentation the only major difference is their async method of traversing/drawing) can be found in this presentation by Elliott Sprehn from the Google Feedback team:\n<a href=\"http://www.elliottsprehn.com/preso/fluentconf/\">http://www.elliottsprehn.com/preso/fluentconf/</a></p>\n",
                    "is_accepted": true,
                    "score": 607
                },
                {
                    "body": "<p>Your web app can now take a 'native' screenshot of the client's entire desktop using WebRtc:</p>\n\n<p><a href=\"http://www.webrtc.org/\">http://www.webrtc.org/</a> </p>\n\n<p>Have a look at this example: </p>\n\n<p><a href=\"https://www.webrtc-experiment.com/Pluginfree-Screen-Sharing/\">https://www.webrtc-experiment.com/Pluginfree-Screen-Sharing/</a></p>\n\n<p>The client will have to be using chrome (for now) and will need to enable screen capture support under chrome://flags.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Back 2011 we thought about the same question and come to the result that HTML2Canvas is not the perfect fit for accurate rendering. Accurate rendering was for us very important because very often users simply have a very specific browser problem or a problem where the correct screenshot is important. </p>\n\n<p>That was the reason for building <a href=\"https://usersnap.com\" rel=\"nofollow\">https://usersnap.com</a>. We are capturing the DOM state and rendering the image on our server farm which creates accurate screenshots of the exact web site/web application state. After that we build a awesome bug tracker around that single feature.</p>\n\n<p>Now we have a huge customer base which really like that feature of capturing the exact state of a website and draw on that to give the website owner a detailed bug description or feedback.</p>\n\n<p>Full disclosure: I'm one of the co founders.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Google's \"Report a Bug\" or \"Feedback Tool\" lets you select an area of your browser window to create a screenshot that is submitted with your feedback about a bug.</p>\n\n<p><img src=\"http://i.stack.imgur.com/CDhEi.png\" alt=\"Google Feedback Tool Screenshot\">\n<sub><em>Screenshot by Jason Small, posted in a <a href=\"http://stackoverflow.com/questions/6608327/google-style-send-feedback\">duplicate question</a>.</em> </sub></p>\n\n<p>How are they doing this?  Google's JavaScript feedback API is loaded from <a href=\"https://ssl.gstatic.com/feedback/api.js\">here</a> and <a href=\"http://www.google.com/tools/feedback/intl/en/learnmore.html\">their overview of the feedback module</a> will demonstrate the screenshot capability.</p>\n",
            "last_activity_date": 1421934110,
            "question_id": 4912092,
            "score": 428,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "screenshot"
            ],
            "title": "Using HTML5/Canvas/JavaScript to take screenshots"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>There is a standards based replacement,<code>DOMContentLoaded</code> that is supported by over <a href=\"http://caniuse.com/#search=DOMContentLoaded\">90%+ of browsers</a>, though not IE8:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n  //do work\n});\n</code></pre>\n\n<p>jQuery's native function is much more complicated than just window.onload, as depicted below.  </p>\n\n<pre><code>function bindReady(){\n    if ( readyBound ) return;\n    readyBound = true;\n\n    // Mozilla, Opera and webkit nightlies currently support this event\n    if ( document.addEventListener ) {\n        // Use the handy event callback\n        document.addEventListener( \"DOMContentLoaded\", function(){\n            document.removeEventListener( \"DOMContentLoaded\", arguments.callee, false );\n            jQuery.ready();\n        }, false );\n\n    // If IE event model is used\n    } else if ( document.attachEvent ) {\n        // ensure firing before onload,\n        // maybe late but safe also for iframes\n        document.attachEvent(\"onreadystatechange\", function(){\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", arguments.callee );\n                jQuery.ready();\n            }\n        });\n\n        // If IE and not an iframe\n        // continually check to see if the document is ready\n        if ( document.documentElement.doScroll &amp;&amp; window == window.top ) (function(){\n            if ( jQuery.isReady ) return;\n\n            try {\n                // If IE is used, use the trick by Diego Perini\n                // http://javascript.nwbox.com/IEContentLoaded/\n                document.documentElement.doScroll(\"left\");\n            } catch( error ) {\n                setTimeout( arguments.callee, 0 );\n                return;\n            }\n\n            // and execute any waiting functions\n            jQuery.ready();\n        })();\n    }\n\n    // A fallback to window.onload, that will always work\n    jQuery.event.add( window, \"load\", jQuery.ready );\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 148
                },
                {
                    "body": "<p>the ready function in jQuery does a number of things. Frankly, I don't see that point of replacing it unless you have amazingly small output from your website. jquery is a pretty tiny library, and it handles all sorts of cross-browser things you'll need later. </p>\n\n<p>Anyway, there's little point in posting it here, just open up jquery and look at the bindReady method.  </p>\n\n<p>It starts by calling either document.addEventListener(\"DOMContentLoaded\") or document.attachEvent('onreadystatechange') depending on the event model, and goes on from there.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I was recently using this for a mobile site. This is John Resig's simplified version from \"Pro JavaScript Techniques\". It depends on addEvent.</p>\n\n<pre><code>var ready = ( function () {\n  function ready( f ) {\n    if( ready.done ) return f();\n\n    if( ready.timer ) {\n      ready.ready.push(f);\n    } else {\n      addEvent( window, \"load\", isDOMReady );\n      ready.ready = [ f ];\n      ready.timer = setInterval(isDOMReady, 13);\n    }\n  };\n\n  function isDOMReady() {\n    if( ready.done ) return false;\n\n    if( document &amp;&amp; document.getElementsByTagName &amp;&amp; document.getElementById &amp;&amp; document.body ) {\n      clearInterval( ready.timer );\n      ready.timer = null;\n      for( var i = 0; i &lt; ready.ready.length; i++ ) {\n        ready.ready[i]();\n      }\n      ready.ready = null;\n      ready.done = true;\n    }\n  }\n\n  return ready;\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>As The accepted answer was very far from complete, so I stitched together a \"ready\" function like jQuery.ready() based on jQuery 1.6.2 source</p>\n\n<pre><code>var ready = (function(){    \n\n    var readyList,\n        DOMContentLoaded,\n        class2type = {};\n        class2type[\"[object Boolean]\"] = \"boolean\";\n        class2type[\"[object Number]\"] = \"number\";\n        class2type[\"[object String]\"] = \"string\";\n        class2type[\"[object Function]\"] = \"function\";\n        class2type[\"[object Array]\"] = \"array\";\n        class2type[\"[object Date]\"] = \"date\";\n        class2type[\"[object RegExp]\"] = \"regexp\";\n        class2type[\"[object Object]\"] = \"object\";\n\n    var ReadyObj = {\n        // Is the DOM ready to be used? Set to true once it occurs.\n        isReady: false,\n        // A counter to track how many items to wait for before\n        // the ready event fires. See #6781\n        readyWait: 1,\n        // Hold (or release) the ready event\n        holdReady: function( hold ) {\n            if ( hold ) {\n                ReadyObj.readyWait++;\n            } else {\n                ReadyObj.ready( true );\n            }\n        },\n        // Handle when the DOM is ready\n        ready: function( wait ) {\n            // Either a released hold or an DOMready/load event and not yet ready\n            if ( (wait === true &amp;&amp; !--ReadyObj.readyWait) || (wait !== true &amp;&amp; !ReadyObj.isReady) ) {\n                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                if ( !document.body ) {\n                    return setTimeout( ReadyObj.ready, 1 );\n                }\n\n                // Remember that the DOM is ready\n                ReadyObj.isReady = true;\n                // If a normal DOM Ready event fired, decrement, and wait if need be\n                if ( wait !== true &amp;&amp; --ReadyObj.readyWait &gt; 0 ) {\n                    return;\n                }\n                // If there are functions bound, to execute\n                readyList.resolveWith( document, [ ReadyObj ] );\n\n                // Trigger any bound ready events\n                //if ( ReadyObj.fn.trigger ) {\n                //  ReadyObj( document ).trigger( \"ready\" ).unbind( \"ready\" );\n                //}\n            }\n        },\n        bindReady: function() {\n            if ( readyList ) {\n                return;\n            }\n            readyList = ReadyObj._Deferred();\n\n            // Catch cases where $(document).ready() is called after the\n            // browser event has already occurred.\n            if ( document.readyState === \"complete\" ) {\n                // Handle it asynchronously to allow scripts the opportunity to delay ready\n                return setTimeout( ReadyObj.ready, 1 );\n            }\n\n            // Mozilla, Opera and webkit nightlies currently support this event\n            if ( document.addEventListener ) {\n                // Use the handy event callback\n                document.addEventListener( \"DOMContentLoaded\", DOMContentLoaded, false );\n                // A fallback to window.onload, that will always work\n                window.addEventListener( \"load\", ReadyObj.ready, false );\n\n            // If IE event model is used\n            } else if ( document.attachEvent ) {\n                // ensure firing before onload,\n                // maybe late but safe also for iframes\n                document.attachEvent( \"onreadystatechange\", DOMContentLoaded );\n\n                // A fallback to window.onload, that will always work\n                window.attachEvent( \"onload\", ReadyObj.ready );\n\n                // If IE and not a frame\n                // continually check to see if the document is ready\n                var toplevel = false;\n\n                try {\n                    toplevel = window.frameElement == null;\n                } catch(e) {}\n\n                if ( document.documentElement.doScroll &amp;&amp; toplevel ) {\n                    doScrollCheck();\n                }\n            }\n        },\n        _Deferred: function() {\n            var // callbacks list\n                callbacks = [],\n                // stored [ context , args ]\n                fired,\n                // to avoid firing when already doing so\n                firing,\n                // flag to know if the deferred has been cancelled\n                cancelled,\n                // the deferred itself\n                deferred  = {\n\n                    // done( f1, f2, ...)\n                    done: function() {\n                        if ( !cancelled ) {\n                            var args = arguments,\n                                i,\n                                length,\n                                elem,\n                                type,\n                                _fired;\n                            if ( fired ) {\n                                _fired = fired;\n                                fired = 0;\n                            }\n                            for ( i = 0, length = args.length; i &lt; length; i++ ) {\n                                elem = args[ i ];\n                                type = ReadyObj.type( elem );\n                                if ( type === \"array\" ) {\n                                    deferred.done.apply( deferred, elem );\n                                } else if ( type === \"function\" ) {\n                                    callbacks.push( elem );\n                                }\n                            }\n                            if ( _fired ) {\n                                deferred.resolveWith( _fired[ 0 ], _fired[ 1 ] );\n                            }\n                        }\n                        return this;\n                    },\n\n                    // resolve with given context and args\n                    resolveWith: function( context, args ) {\n                        if ( !cancelled &amp;&amp; !fired &amp;&amp; !firing ) {\n                            // make sure args are available (#8421)\n                            args = args || [];\n                            firing = 1;\n                            try {\n                                while( callbacks[ 0 ] ) {\n                                    callbacks.shift().apply( context, args );//shifts a callback, and applies it to document\n                                }\n                            }\n                            finally {\n                                fired = [ context, args ];\n                                firing = 0;\n                            }\n                        }\n                        return this;\n                    },\n\n                    // resolve with this as context and given arguments\n                    resolve: function() {\n                        deferred.resolveWith( this, arguments );\n                        return this;\n                    },\n\n                    // Has this deferred been resolved?\n                    isResolved: function() {\n                        return !!( firing || fired );\n                    },\n\n                    // Cancel\n                    cancel: function() {\n                        cancelled = 1;\n                        callbacks = [];\n                        return this;\n                    }\n                };\n\n            return deferred;\n        },\n        type: function( obj ) {\n            return obj == null ?\n                String( obj ) :\n                class2type[ Object.prototype.toString.call(obj) ] || \"object\";\n        }\n    }\n    // The DOM ready check for Internet Explorer\n    function doScrollCheck() {\n        if ( ReadyObj.isReady ) {\n            return;\n        }\n\n        try {\n            // If IE is used, use the trick by Diego Perini\n            // http://javascript.nwbox.com/IEContentLoaded/\n            document.documentElement.doScroll(\"left\");\n        } catch(e) {\n            setTimeout( doScrollCheck, 1 );\n            return;\n        }\n\n        // and execute any waiting functions\n        ReadyObj.ready();\n    }\n    // Cleanup functions for the document ready method\n    if ( document.addEventListener ) {\n        DOMContentLoaded = function() {\n            document.removeEventListener( \"DOMContentLoaded\", DOMContentLoaded, false );\n            ReadyObj.ready();\n        };\n\n    } else if ( document.attachEvent ) {\n        DOMContentLoaded = function() {\n            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", DOMContentLoaded );\n                ReadyObj.ready();\n            }\n        };\n    }\n    function ready( fn ) {\n        // Attach the listeners\n        ReadyObj.bindReady();\n\n        var type = ReadyObj.type( fn );\n\n        // Add the callback\n        readyList.done( fn );//readyList is result of _Deferred()\n    }\n    return ready;\n})();\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>&lt;script&gt;\nready(function(){\n    alert('it works!');\n});\nready(function(){\n    alert('also works!');\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>I am not sure how functional this code is, but it worked fine with my superficial tests.\nThis took quite a while, so I hope you and others can benefit from it.</p>\n\n<p>p.s. I suggest <a href=\"http://closure-compiler.appspot.com/home\">compiling</a> it</p>\n\n<p><strong>Edit:</strong>\nor you can use <a href=\"http://dustindiaz.com/smallest-domready-ever\">http://dustindiaz.com/smallest-domready-ever</a></p>\n\n<pre><code>function r(f){/in/(document.readyState)?setTimeout(r,9,f):f()}\nr(function(){/*code to run*/});\n</code></pre>\n\n<p>or the native function if you only need to support the new browsers</p>\n\n<pre><code>document.addEventListener('DOMContentLoaded',function(){/*fun code to run*/})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 196
                },
                {
                    "body": "<p>It is worth looking here <a href=\"http://www.dustindiaz.com/rock-solid-addevent/\" rel=\"nofollow\">http://www.dustindiaz.com/rock-solid-addevent/</a> &amp; here <a href=\"http://www.braksator.com/how-to-make-your-own-jquery\" rel=\"nofollow\">http://www.braksator.com/how-to-make-your-own-jquery</a></p>\n\n<p>Here is the code in case the site goes down </p>\n\n<pre><code>function addEvent( obj, type, fn ) {\n    if (obj.addEventListener) {\n        obj.addEventListener( type, fn, false );\n        EventCache.add(obj, type, fn);\n    }\n    else if (obj.attachEvent) {\n        obj[\"e\"+type+fn] = fn;\n        obj[type+fn] = function() { obj[\"e\"+type+fn]( window.event ); }\n        obj.attachEvent( \"on\"+type, obj[type+fn] );\n        EventCache.add(obj, type, fn);\n    }\n    else {\n        obj[\"on\"+type] = obj[\"e\"+type+fn];\n    }\n}\nvar EventCache = function(){\n    var listEvents = [];\n    return {\n        listEvents : listEvents,\n        add : function(node, sEventName, fHandler){\n            listEvents.push(arguments);\n        },\n        flush : function(){\n            var i, item;\n            for(i = listEvents.length - 1; i &gt;= 0; i = i - 1){\n                item = listEvents[i];\n                if(item[0].removeEventListener){\n                    item[0].removeEventListener(item[1], item[2], item[3]);\n                };\n                if(item[1].substring(0, 2) != \"on\"){\n                    item[1] = \"on\" + item[1];\n                };\n                if(item[0].detachEvent){\n                    item[0].detachEvent(item[1], item[2]);\n                };\n                item[0][item[1]] = null;\n            };\n        }\n    };\n}();\n// Usage\naddEvent(window,'unload',EventCache.flush);\naddEvent(window,'load', function(){alert(\"I'm ready\");});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Poor man's solution:</p>\n\n<pre><code>var checkLoad = function() {   \n  document.readyState !== \"complete\" ? setTimeout(checkLoad, 11) : alert(\"loaded!\");   \n};  \n\ncheckLoad();  \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/squadjot/s4EzY/\">http://jsfiddle.net/squadjot/s4EzY/</a></p>\n\n<p>Added this one, a bit better I guess, own scope, and non recursive</p>\n\n<pre><code>(function(){\n  var tId = setInterval(function() {\n    if (document.readyState == \"complete\") onComplete()\n  }, 11);\n\n  function onComplete(){\n    clearInterval(tId);    \n    alert(\"loaded!\");    \n  };\n})()\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/squadjot/XD7ZF/\">http://jsfiddle.net/squadjot/XD7ZF/</a></p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>How about this solution?</p>\n\n<pre><code>// other onload attached earlier\nwindow.onload=function() {\n   alert('test');\n};\n\ntmpPreviousFunction=window.onload ? window.onload : null;\n\n// our onload function\nwindow.onload=function() {\n   alert('another message');\n\n   // execute previous one\n   if (tmpPreviousFunction) tmpPreviousFunction();\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The jQuery answer was pretty useful to me. With a little refactory it fitted my needs well.\nI hope it helps anybody else.</p>\n\n<pre><code>function onReady ( callback ){\n    var addListener = document.addEventListener || document.attachEvent,\n        removeListener =  document.removeEventListener || document.detachEvent\n        eventName = document.addEventListener ? \"DOMContentLoaded\" : \"onreadystatechange\"\n\n    addListener.call(document, eventName, function(){\n        removeListener( eventName, arguments.callee, false )\n        callback()\n    }, false )\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Just add this to the bottom of your html page...</p>\n\n<pre><code>&gt; &lt;script&gt;\n&gt;    Your_Function();\n&gt; &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>three options: </p>\n\n<ol>\n<li>If script is the last tag of the body, DOM would be ready before script tag executes</li>\n<li>When DOM is ready, \"readyState\" will change to \"complete\"</li>\n<li>Put everything under 'DOMContentLoaded' event listener</li>\n</ol>\n\n<p><em><strong>onreadystatechange</em></strong></p>\n\n<pre><code>  document.onreadystatechange = function () {\n     if (document.readyState == \"complete\") {\n     //document is ready. Do your stuff here\n   }\n }\n</code></pre>\n\n<p>src: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.readyState\">mdn</a></p>\n\n<p><em><strong>DOMContentLoaded</em></strong> </p>\n\n<pre><code>document.addEventListener('DOMContentLoaded', function(){\n   console.log('document is ready. I can sleep now'); \n });\n</code></pre>\n\n<p><em><strong>concerned about stone age browsers:</em></strong>\ngo to jquery source code and use ready function. in that case you are not parsing+executing the whole library, your are doing only very small part of it.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>This was a good <a href=\"http://stackoverflow.com/a/11810957/185565\">http://stackoverflow.com/a/11810957/185565</a> poor man's solution. One comment considered a counter to bail out in case of emergency. This is my modification.</p>\n\n<pre><code>function doTheMagic(counter) {\n  alert(\"It worked on \" + counter);\n}\n\n// wait for document ready then call handler function\nvar checkLoad = function(counter) {\n  counter++;\n  if (document.readyState != \"complete\" &amp;&amp; counter&lt;1000) {\n    var fn = function() { checkLoad(counter); };\n    setTimeout(fn,10);\n  } else doTheMagic(counter);\n};\ncheckLoad(0);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>If you want to support <strong>IE7+ (no quirks, compatibility and other pain), last chrome, last safari, last firefox and no iframes</strong> - this will be enough:</p>\n\n<pre><code>is_loaded = false\ncallbacks = []\n\nloaded = -&gt;\n  is_loaded = true\n  for i in [0...callbacks.length]\n    callbacks[i].call document\n  callbacks = []\n\ncontent_loaded = -&gt;\n  document.removeEventListener \"DOMContentLoaded\", content_loaded, true\n  loaded()\n\nstate_changed = -&gt;\n  if document.readyState is \"complete\"\n    document.detachEvent \"onreadystatechange\", state_changed\n    loaded()\n\nif !!document.addEventListener\n  document.addEventListener \"DOMContentLoaded\", content_loaded, true\nelse\n  document.attachEvent \"onreadystatechange\", state_changed\n\ndom_ready = (callback) -&gt;\n  if is_loaded\n    callback.call document\n  else\n    callbacks.push callback\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>Cross-browser(old browsers too) and simple solution</p>\n\n<pre><code>var docLoaded = setInterval(function () {\n    if(document.readyState === \"complete\") {\n        clearInterval(docLoaded);\n        /*\n            Your code goes here i.e. init()\n        */\n    }\n}, 100);\n</code></pre>\n\n<p>Showing alert in jsfiddle\n<a href=\"http://jsfiddle.net/FH749/\" rel=\"nofollow\">http://jsfiddle.net/FH749/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>late to the game but I use this:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n//Do work\n});\n</code></pre>\n\n<p>Note: this probably only works with newer browsers, specifcally these: <a href=\"http://caniuse.com/#feat=domcontentloaded\">http://caniuse.com/#feat=domcontentloaded</a></p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>If you are loading jQuery near the bottom of BODY but having trouble with code that writes out jQuery(  ) or jQuery(document).ready(  ), check out jqShim on Github</p>\n\n<p><a href=\"https://github.com/withjam/jqshim-head\" rel=\"nofollow\">https://github.com/withjam/jqshim-head</a></p>\n\n<p>Rather than recreate its own document ready function, it simply holds onto the functions until jQuery is available then proceeds with jQuery as expected.  The point of moving jQuery to the bottom of body is to speed up page load, and you can still accomplish it by inlining the jqShim.min.js in the head of your template.  </p>\n\n<p>I ended up writing this code to make moving all the scrips in Wordpress to the footer, and just this shim code now sits directly in the header.  Seems to work so I shared it in case anyone else has this problem. Let me know if it works for you or if there are other issues it doesn't handle.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Edit of the edit of @duskwuff to support ie8 too. the diference is a new call to the function test of the regex and the setTimeout with an anonymous function.\nAlso, setted the timeout to 99.</p>\n\n<pre><code>function ready(f){/in/.test(document.readyState)?setTimeout(function(){ready(f);},99):f();}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I know this is a really old topic, but we found a quick and dirty cross browser implementation of ours that may do the trick for most simple cases with a minimal implementation:</p>\n\n<pre><code>window.onReady = function onReady(fn){\n    doc.body ? fn() : setTimeout(function(){ onReady(fn);},50);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The setTimeout/setInterval solutions presented here will only work in specific circumstances.</p>\n\n<p>The problem shows up especially in older Internet Explorer versions up to IE8.</p>\n\n<p>The variables affecting the success of these setTimeout/setInterval solutions are:</p>\n\n<pre><code>1) dynamic or static HTML\n2) cached or non cached requests\n3) size of the complete HTML document\n4) chunked or non chunked transfer encoding\n</code></pre>\n\n<p>The original (native Javascript) code solving this specific issue is here:</p>\n\n<pre><code>https://github.com/dperini/ContentLoaded\nhttp://javascript.nwbox.com/ContentLoaded (test)\n</code></pre>\n\n<p>this is the code from which the jQuery team have built their implementation.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Really, if you care about <strong>IE9+</strong> only, this code would be enough </p>\n\n<pre><code>    document.addEventListener(\"DOMContentLoaded\", callback);\n</code></pre>\n\n<p>to replace jQuery.ready</p>\n\n<hr>\n\n<p>If you worry about IE6 and some really strange and rare browsers, this will work</p>\n\n<pre><code>domReady: function (callback) {\n    // Mozilla, Opera and Webkit\n    if (document.addEventListener) {\n        document.addEventListener(\"DOMContentLoaded\", callback, false);\n        // If IE event model is used\n    } else if (document.attachEvent) {\n        document.attachEvent(\"onreadystatechange\", function() {\n            if (document.readyState === \"complete\" ) {\n                callback();\n            }\n        });\n        // A fallback to window.onload, that will always work\n    } else {\n        var oldOnload = window.onload;\n        window.onload = function () {\n            oldOnload &amp;&amp; oldOnload();\n            callback();\n        }\n    }\n},\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This cross-browser code will call a function once the DOM is ready:</p>\n\n<pre><code>var domReady=function(func){\n    var scriptText='('+func+')();';\n    var scriptElement=document.createElement('script');\n    scriptElement.innerText=scriptText;\n    document.body.appendChild(scriptElement);\n};\n</code></pre>\n\n<p>Here's how it works:</p>\n\n<ol>\n<li>The first line of <code>domReady</code> calls the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\" rel=\"nofollow\"><code>toString</code></a> method of the function to get a string representation of the function you pass in and wraps it in an expression that immediately calls the function.</li>\n<li>The rest of <code>domReady</code> creates a script element with the expression and appends it to the <code>body</code> of the document.</li>\n<li>The browser runs script tags appended to <code>body</code> after the DOM is ready.</li>\n</ol>\n\n<p>For example, if you do this: <code>domReady(function(){alert();});</code>, the following will appended to the <code>body</code> element:</p>\n\n<pre><code> &lt;script&gt;(function (){alert();})();&lt;/script&gt;\n</code></pre>\n\n<p>Note that this works only for user-defined functions. The following won't work: <code>domReady(alert);</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This question was asked quite a long time ago.  For anyone just seeing this question, there is now a site called \"you might not need jquery\" <a href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">http://youmightnotneedjquery.com/</a> which breaks down - by level of IE support required - all the functionality of jquery and provides some alternative, smaller libraries.</p>\n\n<p>IE8 document ready script according to <a href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">http://youmightnotneedjquery.com/</a></p>\n\n<pre><code>function ready(fn) {\n  if (document.readyState != 'loading'){\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function() {\n      if (document.readyState != 'loading')\n        fn();\n    });\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a script that uses <code>$(document).ready</code>, but doesn't use anything else from jQuery. I'd like to lighten it up by removing the jQuery dependency.</p>\n\n<p>How can I implement my own <code>$(document).ready</code> functionality without using jQuery? I know that  using <code>window.onload</code> will not be the same, as <code>window.onload</code> fires after all images, frames etc have been loaded.</p>\n",
            "last_activity_date": 1424096141,
            "question_id": 799981,
            "score": 580,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "$(document).ready equivalent without jQuery"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>With Firefox, Safari (and other Gecko based browsers) you can easily use textarea.selectionStart, but for IE that doesn't work, so you will have to do something like this:</p>\n\n<pre><code>function getCaret(node) {\n  if (node.selectionStart) {\n    return node.selectionStart;\n  } else if (!document.selection) {\n    return 0;\n  }\n\n  var c = \"\\001\",\n      sel = document.selection.createRange(),\n      dul = sel.duplicate(),\n      len = 0;\n\n  dul.moveToElementText(node);\n  sel.text = c;\n  len = dul.text.indexOf(c);\n  sel.moveStart('character',-1);\n  sel.text = \"\";\n  return len;\n}\n</code></pre>\n\n<p>(<a href=\"http://web.archive.org/web/20080214051356/http://www.csie.ntu.edu.tw/~b88039/html/jslib/caret.html\">complete code here</a>)</p>\n\n<p>I also recommend you to check the jQuery <a href=\"https://github.com/localhost/jquery-fieldselection\">FieldSelection</a> Plugin, it allows you to do that and much more...</p>\n\n<p><strong>Edit:</strong> I actually re-implemented the above code: </p>\n\n<pre><code>function getCaret(el) { \n  if (el.selectionStart) { \n    return el.selectionStart; \n  } else if (document.selection) { \n    el.focus(); \n\n    var r = document.selection.createRange(); \n    if (r == null) { \n      return 0; \n    } \n\n    var re = el.createTextRange(), \n        rc = re.duplicate(); \n    re.moveToBookmark(r.getBookmark()); \n    rc.setEndPoint('EndToStart', re); \n\n    return rc.text.length; \n  }  \n  return 0; \n}\n</code></pre>\n\n<p>Check an example <a href=\"http://jsbin.com/iwopa\">here</a>.</p>\n",
                    "is_accepted": true,
                    "score": 144
                },
                {
                    "body": "<p>I modified the above function to account for carriage returns in IE. It's untested but I did something similar with it in my code so it should be workable.</p>\n\n<pre><code>function getCaret(el) {\n  if (el.selectionStart) { \n    return el.selectionStart; \n  } else if (document.selection) { \n    el.focus(); \n\n    var r = document.selection.createRange(); \n    if (r == null) { \n      return 0; \n    } \n\n    var re = el.createTextRange(), \n    rc = re.duplicate(); \n    re.moveToBookmark(r.getBookmark()); \n    rc.setEndPoint('EndToStart', re); \n\n    var add_newlines = 0;\n    for (var i=0; i&lt;rc.text.length; i++) {\n      if (rc.text.substr(i, 2) == '\\r\\n') {\n        add_newlines += 2;\n        i++;\n      }\n    }\n\n    //return rc.text.length + add_newlines;\n\n    //We need to substract the no. of lines\n    return rc.text.length - add_newlines; \n  }  \n  return 0; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Updated 5 September 2010</strong></p>\n\n<p>Seeing as everyone seems to get directed here for this issue, I'm adding my answer to a similar question, which contains the same code as this answer but with full background for those who are interested:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/3622818/ies-document-selection-createrange-doesnt-include-leading-or-trailing-blank-li\">IE&#39;s document.selection.createRange doesn&#39;t include leading or trailing blank lines</a></p>\n\n<p>To account for trailing line breaks is tricky in IE, and I haven't seen any solution that does this correctly, including any other answers to this question. It is possible, however, using the following function, which will return you the start and end of the selection (which are the same in the case of a caret) within a <code>&lt;textarea&gt;</code> or text <code>&lt;input&gt;</code>.</p>\n\n<p>Note that the textarea must have focus for this function to work properly in IE. If in doubt, call the textarea's <code>focus()</code> method first.</p>\n\n<pre><code>function getInputSelection(el) {\n    var start = 0, end = 0, normalizedValue, range,\n        textInputRange, len, endRange;\n\n    if (typeof el.selectionStart == \"number\" &amp;&amp; typeof el.selectionEnd == \"number\") {\n        start = el.selectionStart;\n        end = el.selectionEnd;\n    } else {\n        range = document.selection.createRange();\n\n        if (range &amp;&amp; range.parentElement() == el) {\n            len = el.value.length;\n            normalizedValue = el.value.replace(/\\r\\n/g, \"\\n\");\n\n            // Create a working TextRange that lives only in the input\n            textInputRange = el.createTextRange();\n            textInputRange.moveToBookmark(range.getBookmark());\n\n            // Check if the start and end of the selection are at the very end\n            // of the input, since moveStart/moveEnd doesn't return what we want\n            // in those cases\n            endRange = el.createTextRange();\n            endRange.collapse(false);\n\n            if (textInputRange.compareEndPoints(\"StartToEnd\", endRange) &gt; -1) {\n                start = end = len;\n            } else {\n                start = -textInputRange.moveStart(\"character\", -len);\n                start += normalizedValue.slice(0, start).split(\"\\n\").length - 1;\n\n                if (textInputRange.compareEndPoints(\"EndToEnd\", endRange) &gt; -1) {\n                    end = len;\n                } else {\n                    end = -textInputRange.moveEnd(\"character\", -len);\n                    end += normalizedValue.slice(0, end).split(\"\\n\").length - 1;\n                }\n            }\n        }\n    }\n\n    return {\n        start: start,\n        end: end\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 52
                }
            ],
            "body": "<p>How do you get the caret position in text area using JavaScript?</p>\n\n<p>For example:<br>\n<code>This is| a text</code></p>\n\n<p>This should return 7.</p>\n\n<p>How would you get it to return the strings surrounding the cursor/selection? eg:</p>\n\n<p><code>'This is', '', ' a text'</code><br>\nIf the word \"is\" is highlighted, then it would return <code>'This ', 'is', ' a text'</code></p>\n",
            "last_activity_date": 1395061135,
            "question_id": 263743,
            "score": 128,
            "tags": [
                "javascript",
                "cursor",
                "textarea",
                "caret"
            ],
            "title": "Caret position in textarea, in characters from the start"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Thanks for the comment, tec.  I was able to find an existing unconfirmed Webkit bug that explains this issue: <a href=\"https://bugs.webkit.org/show_bug.cgi?id=35801\">https://bugs.webkit.org/show_bug.cgi?id=35801</a></p>\n\n<p>There appears to be some debate regarding just how much of a bug it is and whether it's fixable.  It does seem like bad behavior to me.  It was especially troubling to me because, in Chrome at least, it occurs when the code resides in scripts that are executed immediately (before the page is loaded), even when the console is open, whenever the page is refreshed.  Calling console.log when the console is not yet active only results in a reference to the object being queued, not the output the console will contain.  Therefore, the array (or any object), will not be evaluated until the console is ready.  It really is a case of lazy evaluation.</p>\n\n<p>However, there is a simple way to avoid this in your code:</p>\n\n<pre><code>var s = [\"hi\"];\nconsole.log(s.toString());\ns[0] = \"bye\";\nconsole.log(s.toString());\n</code></pre>\n\n<p>By calling toString, you create a representation in memory that will not be altered by following statements, which the console will read when it is ready.  The console output is slightly different from passing the object directly, but it seems acceptable:</p>\n\n<pre><code>hi\nbye\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>Looks like Chrome is replacing in its \"pre compile\" phase any instance of \"s\" with <strong>pointer</strong> to the actual array.</p>\n\n<p>One way around is by cloning the array, logging fresh copy instead:</p>\n\n<pre><code>var s = [\"hi\"];\nconsole.log(CloneArray(s));\ns[0] = \"bye\";\nconsole.log(CloneArray(s));\n\nfunction CloneArray(array)\n{\n    var clone = new Array();\n    for (var i = 0; i &lt; array.length; i++)\n        clone[clone.length] = array[i];\n    return clone;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can clone an array with <code>Array#slice</code>:</p>\n\n<pre><code>console.log(s); // [\"bye\"], i.e. incorrect\nconsole.log(s.slice()); // [\"hi\"], i.e. correct\n</code></pre>\n\n<p>A function that you can use instead of <code>console.log</code> that doesn't have this problem is as follows:</p>\n\n<pre><code>console.logShallowCopy = function () {\n    function slicedIfArray(arg) {\n        return Array.isArray(arg) ? arg.slice() : arg;\n    }\n\n    var argsSnapshot = Array.prototype.map.call(arguments, slicedIfArray);\n    return console.log.apply(console, argsSnapshot);\n};\n</code></pre>\n\n<p>For the case of objects, unfortunately, the best method appears to be to debug first with a non-WebKit browser, or to write a complicated function to clone. If you are only working with simple objects, where order of keys doesn't matter and there are no functions, you could always do:</p>\n\n<pre><code>console.logSanitizedCopy = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var sanitizedArgs = JSON.parse(JSON.stringify(args));\n\n    return console.log.apply(console, sanitizedArgs);\n};\n</code></pre>\n\n<p>All of these methods are obviously very slow, so even more so than with normal <code>console.log</code>s, you have to strip them off after you're done debugging.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>From Eric's explanation, it is due to <code>console.log()</code> being queued up, and it prints a later value of the array (or object).</p>\n\n<p>There can be 5 solutions:</p>\n\n<pre><code>1. arr.toString()   // not well for [1,[2,3]] as it shows 1,2,3\n2. arr.join()       // same as above\n3. arr.slice(0)     // a new array is created, but if arr is [1, 2, arr2, 3] \n                    //   and arr2 changes, then later value might be shown\n4. arr.concat()     // a new array is created, but same issue as slice(0)\n5. JSON.stringify(arr)  // works well as it takes a snapshot of the whole array \n                        //   or object, and the format shows the exact structure\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This is already answered, but I'll drop my answer anyway. I implemented a simple console wrapper which doesn't suffer from this issue. Requires jQuery.</p>\n\n<p>It implements only <code>log</code>, <code>warn</code> and <code>error</code> methods, you will have to add some more in order for it to be interchangeable with a regular <code>console</code>.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var fixedConsole;\n(function($) {\n    var _freezeOne = function(arg) {\n        if (typeof arg === 'object') {\n            return $.extend(true, {}, arg);\n        } else {\n            return arg;\n        }\n    };\n    var _freezeAll = function(args) {\n        var frozen = [];\n        for (var i=0; i&lt;args.length; i++) {\n            frozen.push(_freezeOne(args[i]));\n        }\n        return frozen;\n    };\n    fixedConsole = {\n        log: function() { console.log.apply(console, _freezeAll(arguments)); },\n        warn: function() { console.warn.apply(console, _freezeAll(arguments)); },\n        error: function() { console.error.apply(console, _freezeAll(arguments)); }\n    };\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'll start with the code:</p>\n\n<pre><code>var s = [\"hi\"];\nconsole.log(s);\ns[0] = \"bye\";\nconsole.log(s);\n</code></pre>\n\n<p>Simple, right?  In response to this, Firebug says:</p>\n\n<pre><code>[\"hi\"]\n[\"bye\"]\n</code></pre>\n\n<p>Wonderful, but Chrome's JavaScript console (7.0.517.41 beta) says:</p>\n\n<pre><code>[\"bye\"]\n[\"bye\"]\n</code></pre>\n\n<p>Have I done something wrong, or is Chrome's JavaScript console being exceptionally lazy about evaluating my array?  </p>\n",
            "last_activity_date": 1362065491,
            "question_id": 4057440,
            "score": 53,
            "tags": [
                "javascript",
                "arrays",
                "logging",
                "google-chrome",
                "console"
            ],
            "title": "Is Chrome&#39;s JavaScript console lazy about evaluating arrays?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The <a href=\"https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns#the-deferred-anti-pattern\">deferred antipattern</a> coined by <a href=\"http://stackoverflow.com/users/995876/esailija\">Esailija</a> is a common anti-pattern people who are new to promises make, I've made it myself when I first used promises. The problem with the above code is that is fails to utilize the fact promises chain.</p>\n\n<p>Promises can chain with <code>.then</code> and you can return promises directly. Your code in <code>getStuffDone</code> can be rewritten as:</p>\n\n<pre><code>function getStuffDone(param){\n    return myPromiseFn(param+1); // much nicer, right?\n}\n</code></pre>\n\n<p>Promises are all about making asynchronous code more readable and behave like synchronous code without hiding that fact. Promises represent an abstraction over a value of one time operation, they abstract the notion of a statement or expression in a programming language.</p>\n\n<p>You should only use deferred objects when you are <a href=\"http://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises\">converting an API to promises</a> and can't do it automatically, or when you're writing aggregation functions that are easier expressed this way. </p>\n\n<p>Quoting Esailija:</p>\n\n<blockquote>\n  <p>This is the most common anti-pattern. It is easy to fall into this when you don't really understand promises and think of them as glorified event emitters or callback utility. Let's recap: promises are about making asynchronous code retain most of the lost properties of synchronous code such as flat indentation and one exception channel.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<h1>What's wrong with it?</h1>\n\n<blockquote>\n  <p>But the pattern works!</p>\n</blockquote>\n\n<p>Lucky you. Unfortunately, it probably doesn't, as you likely forgot some edge case. In more than half of the occurrences I've seen, the author has forgotten to take care of the error handler:</p>\n\n<pre><code>return new Promise(function(resolve) {\n    getOtherPromise().done(function(result) {\n        resolve(result.property.example);\n    });\n})\n</code></pre>\n\n<p>If the other promise is rejected, this will happen unnoticed instead of being propagated to the new promise (where it would get handled) - and the new promise stays forever pending, which can induce leaks.</p>\n\n<p>The same thing happens in the case that your callback code causes an error - e.g. when <code>result</code> doesn't have a <code>property</code> and an exception is thrown. That would go unhandled and leave the new promise unresolved. </p>\n\n<p>In contrast, using <code>.then()</code> does automatically take care of both these scenarios, and rejects the new promise when an error happens:</p>\n\n<pre><code> return getOtherPromise().then(function(result) {\n     return result.property.example;\n })\n</code></pre>\n\n<p>The deferred antipattern is not only cumbersome, but also <strong>error-prone</strong>. Using <code>.then()</code> for chaining is much safer.</p>\n\n<blockquote>\n  <p>But I've handled everything!</p>\n</blockquote>\n\n<p>Really? Good. However, this will be pretty detailed and copious, especially if you use a promise library that supports other features like cancellation or message passing. Or maybe it will in the future, or you want to swap your library against a better one? You won't want to rewrite your code for that.</p>\n\n<p>The libraries' methods (<code>then</code>) do not only natively support all the features, they also might have certain optimisations in place. Using them will likely make your code faster, or at least allow to be optimised by future revisions of the library.</p>\n\n<h1>How do I avoid it?</h1>\n\n<p>So whenever you find yourself manually creating a <code>Promise</code> or <code>Deferred</code> and already existing promises are involved, <strong>check the library API first</strong>. The Deferred antipattern is often applied by people who see promises [only] as an observer pattern - but <a href=\"http://stackoverflow.com/a/22562045/1048572\">promises are <em>more</em> than callbacks</a>: they are supposed to be composable. Every decent library has lots of easy-to-use functions for the composition of promises in every thinkable manner, taking care of all the low-level stuff you don't want to deal with.</p>\n\n<p>If you have found a need to compose some promises in a new way that is not supported by an existing helper function, writing your own function with unavoidable Deferreds should be your last option. Consider switching to a more featureful library, and/or file a bug against your current library. Its maintainer should be able to derive the composition from existing functions, implement a new helper function for you and/or help to identify the edge cases that need to be handled.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I was writing code that does something that looks like:</p>\n\n<pre><code>function getStuffDone(param) {\n    var d = Q.defer(); // or new Promise, $.Deferred, $q.defer() etc.\n    myPromiseFn(param+1).then(function(val) { // or `.done`\n        d.resolve(val);\n    }).catch(function(err) {\n        d.reject(err);\n    });\n    return d.promise; // or d.promise(), \n                      // or return new Promise in the constructor ver\n}\n</code></pre>\n\n<p>Someone told me this is called \"the deferred antipattern\", what's bad about this code and why is this called an <a href=\"https://en.wikipedia.org/wiki/Anti-pattern\">antipattern</a>?</p>\n",
            "last_activity_date": 1410785828,
            "question_id": 23803743,
            "score": 33,
            "tags": [
                "javascript",
                "promise",
                "q",
                "bluebird",
                "angular-promise"
            ],
            "title": "What is the deferred antipattern and how do I avoid it?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Firefox uses the <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-textContent\">W3C-compliant</a> <a href=\"https://developer.mozilla.org/En/DOM/Node.textContent\">textContent</a> property.</p>\n\n<p>I'd guess Safari and Opera also support this property.</p>\n",
                    "is_accepted": true,
                    "score": 181
                },
                {
                    "body": "<p>As per Prakash K's answer Firefox does not support the innerText property. So as is the recommended practise you can simply test whether the user agent supports this property and proceed accordingly as below:</p>\n\n<pre><code>function changeText(elem,changeVal){\n   if (elem.textContent){\n      elem.textContent = changeVal;\n   }else{\n      elem.innerText = changeVal;\n   }\n}\n</code></pre>\n\n<p><strong>Updated:</strong> (for easier copy/paste) to include Miff's comments:</p>\n\n<pre><code>function changeText(elem, changeVal) {\n    if ((elem.textContent) &amp;&amp; (typeof (elem.textContent) != \"undefined\")) {\n        elem.textContent = changeVal;\n    } else {\n        elem.innerText = changeVal;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Firefox uses W3C standard <code>Node::textContent</code>, but its behavior differs \"slightly\" from that of MSHTML's proprietary <code>innerText</code> (copied by Opera as well, some time ago, among dozens of other MSHTML features).</p>\n\n<p>First of all, <code>textContent</code> whitespace representation is different from <code>innerText</code> one. Second, and more importantly, <code>textContent</code> <strong>includes all of SCRIPT tag contents</strong>, whereas innerText doesn't.</p>\n\n<p>Just to make things more entertaining, Opera - besides implementing standard <code>textContent</code> - decided to also add MSHTML's <code>innerText</code> <strong>but changed it to act as <code>textContent</code></strong> - i.e. including SCRIPT contents (in fact, <code>textContent</code> and <code>innerText</code> in Opera seem to produce identical results, probably being just aliased to each other).</p>\n\n<p><code>textContent</code> is part of <code>Node</code> interface, whereas <code>innerText</code> is part of <code>HTMLElement</code>. This, for example, means that you can \"retrieve\" <code>textContent</code> but not <code>innerText</code> from text nodes:</p>\n\n<pre><code>var el = document.createElement('p');\nvar textNode = document.createTextNode('x');\n\nel.textContent; // \"\"\nel.innerText; // \"\"\n\ntextNode.textContent; // \"x\"\ntextNode.innerText; // undefined\n</code></pre>\n\n<p>Finally, Safari 2.x also has buggy <code>innerText</code> implementation. In Safari, <code>innerText</code> functions properly only if an element is\nneither hidden (via <code>style.display == \"none\"</code>) nor orphaned from the document. Otherwise, <code>innerText</code> results in an empty string.</p>\n\n<p>I was playing with <code>textContent</code> abstraction (to work around these deficiencies), but it turned out to be <a href=\"http://groups.google.com/group/comp.lang.javascript/msg/d1574256dea74077\">rather complex</a>.</p>\n\n<p>You best bet is to <strong>first define your exact requirements</strong> and follow from there. It is often possible to simply strip tags off of <code>innerHTML</code> of an element, rather than deal with all of the possible <code>textContent</code>/<code>innerText</code> deviations.</p>\n\n<p>Another possibility, of course, is to walk the DOM tree and collect text nodes recursively.</p>\n",
                    "is_accepted": false,
                    "score": 206
                },
                {
                    "body": "<p>If you only need to set text content and not retrieve, here's a trivial DOM version you can use on any browser; it doesn't require either the IE innerText extension or the DOM Level 3 Core textContent property.</p>\n\n<pre><code>function setTextContent(element, text) {\n    while (element.firstChild!==null)\n        element.removeChild(element.firstChild); // remove all existing content\n    element.appendChild(document.createTextNode(text));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 70
                },
                {
                    "body": "<p>if you are having cross browser issues I would go ahead and use <strong>jquery</strong>. It supports many, many browsers.</p>\n\n<p>Example:</p>\n\n<pre><code> $(document).ready(function() {\n      // do stuff when DOM is ready\n      $('myElement').text(\"Foo\");\n });\n</code></pre>\n\n<p>This works for all browsers. This way you don't have to worry about if it will work in a certain browser or not.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>This has been my experience with <code>innerText</code>, <code>textContent</code>, <code>innerHTML</code>, and value:</p>\n\n<pre><code>// elem.innerText = changeVal;  // works on ie but not on ff or ch\n// elem.setAttribute(\"innerText\", changeVal); // works on ie but not ff or ch\n// elem.textContent = changeVal;  // works on ie but not ff or ch\n// elem.setAttribute(\"textContent\", changeVal);  // does not work on ie ff or ch\n// elem.innerHTML = changeVal;  // ie causes error - doesn't work in ff or ch\n// elem.setAttribute(\"innerHTML\", changeVal); //ie causes error doesn't work in ff or ch\n   elem.value = changeVal; // works in ie and ff -- see note 2 on ch\n// elem.setAttribute(\"value\", changeVal); // ie works; see note 1 on ff and note 2 on ch\n</code></pre>\n\n<p>ie = internet explorer, ff = firefox, ch = google chrome.\nnote 1: ff works until after value is deleted with backspace - see note by Ray Vega above.\nnote 2: works somewhat in chrome - after update it is unchanged then you click away and click back into the field and the value appears.\nThe best of the lot is <code>elem.value = changeVal</code>; which I did not comment out above.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Add this </p>\n\n<pre>\nfunction htmlEncode(str) {\n    var elm = document.createElement(\"div\");\n    var txtNode = document.createTextNode(str);\n    elm.appendChild(txtNode);\n    return elm.innerHTML;\n}\n</pre>\n\n<p>Then do this, even though it looks silly. It will properly escape everything </p>\n\n<pre>\n\nmyElement.innerHTML = htmlEncode(\"&lt;silly&gt;foo & foo aren't the same.&lt;/silly&gt;\");\n</pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Note that the <code>Element::innerText</code> property will <strong>not</strong> contain the text which has been hidden by CSS style \"<code>display:none</code>\" in Google Chrome (as well it will drop the content that has been masked by other CSS technics (including font-size:0, color:transparent, and a few other similar effects that cause the text not to be rendered in any visible way).</p>\n\n<p>Other CSS properties are also considered :</p>\n\n<ul>\n<li>First the \"display:\" style of inner elements is parsed to determine if it delimits a block content (such as \"display:block\" which is the default of HTML block elements in the browser's builtin stylesheet, and whose behavior as not been overriden by your own CSS style); if so a newline will be inserted in the value of the innerText property. This won't happen with the textContent property.</li>\n<li>The CSS properties that generate inline contents will also be considered : for example the inline element <code>&lt;br \\&gt;</code> that generates an inline newline will also generate an newline in the value of innerText.</li>\n<li>The \"display:inline\" style causes no newline either in textContent or innerText.</li>\n<li>The \"display:table\" style generates newlines around the table and between table rows, but\"display:table-cell\" will generate a tabulation character.</li>\n<li>The \"position:absolute\" property (used with display:block or display:inline, it does not matter) will also cause a line break to be inserted.</li>\n<li>Some browsers will also include a single space separation between spans</li>\n</ul>\n\n<p>But <code>Element::textContent</code> will still contain ALL contents of inner text elements independantly of the applied CSS even if they are invisible. And no extra newlines or whitespaces will be generated in textContent, which just ignores all styles and the structure and inline/block or positioned types of inner elements.</p>\n\n<p>A copy/paste operation using mouse selection will discard the hidden text in the plain-text format that is put in the clipboard, so it won't contain everything in the <code>textContent</code>, but only what is within <code>innerText</code> (after whitespace/newline generation as above).</p>\n\n<p>Both properties are then supported in Google Chrome, but their content may then be different. Older browsers still included in innetText everything like what textContent now contains (but their behavior in relation with then generation of whitespaces/newlines was inconsistant).</p>\n\n<p>jQuery will solve these inconsistencies between browsers using the \".text()\" method added to the parsed elements it returns via a $() query. Internally, it solves the difficulties by looking into the HTML DOM, working only with the \"node\" level. So it will return something looking more like the standard textContent.</p>\n\n<p><em>The caveat is that that this jQuery method will not insert any extra spaces or line breaks that may be visible on screen caused by subelements (like <code>&lt;br /&gt;</code>) of the content.</em></p>\n\n<p>If you design some scripts for accessibility and your stylesheet is parsed for non-aural rendering, such as plugins used to communicate with a Braille reader, this tool should use the textContent if it must include the specific punctuation signs that are added in spans styled with \"display:none\" and that are typically included in pages (for example for superscripts/subscripts), otherwise the innerText will be very confusive on the Braille reader.</p>\n\n<p>Texts hidden by CSS tricks are now typically ignored by major search engines (that will also parse the CSS of your HTML pages, and will also ignore texts that are not in contrasting colors on the background) using an HTML/CSS parser and the DOM property \"innerText\" exactly like in modern visual browsers (at least this invisible content will not be indexed so hidden text cannot be used as a trick to force the inclusion of some keywords in the page to check its content) ; but this hidden text will be stil displayed in the result page (if the page was still qualified from the index to be included in results), using the \"textContent\" property instead of the full HTML to strip the extra styles and scripts.</p>\n\n<p>IF you assign some plain-text in any one of these two properties, this will overwrite the inner markup and styles applied to it (only the assigned element will keep its type, attributes and styles), so both properties will then contain the same content. However, some browsers will now no longer honor the write to innerText, and will only let you overwrite the textContent property (you cannot insert HTML markup when writing to these properties, as HTML special characters will be properly encoded using numeric character references to appear literally, if you then read the <code>innerHTML</code> property after the assignment of <code>innerText</code> or <code>textContent</code>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>found this here:</p>\n\n<pre><code>&lt;!--[if gte IE 8]&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        if (Object.defineProperty &amp;&amp; Object.getOwnPropertyDescriptor &amp;&amp;\n            !Object.getOwnPropertyDescriptor(Element.prototype, \"textContent\").get)\n          (function() {\n            var innerText = Object.getOwnPropertyDescriptor(Element.prototype, \"innerText\");\n            Object.defineProperty(Element.prototype, \"textContent\",\n              { // It won't work if you just drop in innerText.get\n                // and innerText.set or the whole descriptor.\n                get : function() {\n                  return innerText.get.call(this)\n                },\n                set : function(x) {\n                  return innerText.set.call(this, x)\n                }\n              }\n            );\n          })();\n    &lt;/script&gt;\n&lt;![endif]--&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A really simple line of Javascript can get the \"non-taggy\" text in all main browsers...</p>\n\n<pre><code>var myElement = document.getElementById('anyElementId');\nvar myText = (myElement.innerText || myElement.textContent);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>It's also possible to emulate <code>innerText</code> behavior in other browsers:</p>\n\n<pre><code> if (((typeof window.HTMLElement) !== \"undefined\") &amp;&amp; ((typeof HTMLElement.prototype.__defineGetter__) !== \"undefined\")) {\n     HTMLElement.prototype.__defineGetter__(\"innerText\", function () {\n         if (this.textContent) {\n             return this.textContent;\n         } else {\n             var r = this.ownerDocument.createRange();\n             r.selectNodeContents(this);\n             return r.toString();\n         }\n     });\n     HTMLElement.prototype.__defineSetter__(\"innerText\", function (str) {\n         if (this.textContent) {\n             this.textContent = str;\n         } else {\n             this.innerHTML = str.replace(/&amp;/g, '&amp;amp;').replace(/&gt;/g, '&amp;gt;').replace(/&lt;/g, '&amp;lt;').replace(/\\n/g, \"&lt;br /&gt;\\n\");\n         }\n     });\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>myElement.innerText = myElement.textContent = \"foo\";\n</code></pre>\n\n<p>Tested in Internet Explorer 10, Firefox, and Chrome.</p>\n\n<p>(I wanted to add this as a comment on one of the answers that already mentions textContent, but am not allowed to add comments yet.)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>What about something like this?</p>\n\n<pre><code>//$elem is the jQuery object passed along.\n\nvar $currentText = $elem.context.firstChild.data.toUpperCase();\n</code></pre>\n\n<p>** I needed to make mine uppercase.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Internet Explorer introduced <code>innerText</code> and Firefox never accepted this change, although it is an HTML5 standard. Firefox uses <code>textContent</code>, although there are <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.textContent\" rel=\"nofollow\">some differences</a>.</p>\n\n<p>You can use <code>textContent</code>, although it is unsafe to assume users are no longer using I.E. 8 or less and this is only supported in I.E. 9+.</p>\n\n<p>My suggestion would be to use something like <code>myElement.firstChild.nodeValue = \"foo\"</code> if you are not using JQuery and wish to support the most browsers. If you are using JQuery, it is a much safer to use <code>$(myElement).Text(\"foo\")</code>, as JQuery is well-known for its support for different browsers.</p>\n\n<p><a href=\"http://jsperf.com/read-innerhtml-vs-innertext-vs-nodevalue-vs-textcontent/13\" rel=\"nofollow\">Performance Costs</a> of using each. Using <code>nodeValue</code> is the best, using JQuery's <code>Text()</code> is the worst.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just reposting from comments under the original post. innerHTML works in all browsers. Thanks stefita.</p>\n\n<p><strong>myElement.innerHTML = \"foo\";</strong></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have some JavaScript code that works in IE containing the following:</p>\n\n<pre><code>myElement.innerText = \"foo\";\n</code></pre>\n\n<p>However, it seems that the 'innerText' property does not work in Firefox.  Is there some Firefox equivalent?  Or is there a more generic, cross browser property that can be used?</p>\n",
            "last_activity_date": 1423734580,
            "question_id": 1359469,
            "score": 189,
            "tags": [
                "javascript",
                "internet-explorer",
                "firefox",
                "cross-browser"
            ],
            "title": "&#39;innerText&#39; works in IE, but not in Firefox"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>Use a sequential <code>for</code> loop:</p>\n\n<pre><code>var myStringArray = [\"Hello\",\"World\"];\nvar arrayLength = myStringArray.length;\nfor (var i = 0; i &lt; arrayLength; i++) {\n    alert(myStringArray[i]);\n    //Do something\n}\n</code></pre>\n\n<p>@zipcodeman suggests the use of the <code>for...in</code> statement, but for iterating arrays <code>for-in</code> should be avoided, that statement is meant to <strong>enumerate</strong> object properties.</p>\n\n<p>It shouldn't be used for array-like objects because:</p>\n\n<ul>\n<li>The order of iteration is not guaranteed, the array indexes may not be visited in numeric order.</li>\n<li>Inherited properties are also enumerated.</li>\n</ul>\n\n<p>The second point is that it can give you a lot of problems, for example, if you extend the <code>Array.prototype</code> object to include a method there, that property will be also enumerated.</p>\n\n<p>For example:</p>\n\n<pre><code>Array.prototype.foo = \"foo!\";\nvar array = ['a', 'b', 'c'];\n\nfor (var i in array) {\n  alert(array[i]);\n}\n</code></pre>\n\n<p>The above code will alert, \"a\", \"b\", \"c\" and \"foo!\".</p>\n\n<p>That be particularly a problem if you use some library that relies heavily on native prototypes augmention (such as MooTools for example).</p>\n\n<p>The <code>for-in</code> statement as I said before is there to <em>enumerate</em> object properties, for example:</p>\n\n<pre><code>var obj = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n};\n\nfor (var prop in obj) {\n  if (obj.hasOwnProperty(prop)) { \n  // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...\n    alert(\"prop: \" + prop + \" value: \" + obj[prop])\n  }\n}\n</code></pre>\n\n<p>In the above example the <code>hasOwnProperty</code> method allows you to enumerate only <em>own properties</em>, that's it, only the properties that the object physically has, no inherited properties.</p>\n\n<p>I would recommend you to read the following article:</p>\n\n<ul>\n<li><a href=\"http://web.archive.org/web/20101213150231/http://dhtmlkitchen.com/?category=/JavaScript/&amp;date=2007/10/21/&amp;entry=Iteration-Enumeration-Primitives-and-Objects\">Enumeration VS Iteration</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1438
                },
                {
                    "body": "<p>You can use <code>map</code> (also known as <code>apply</code> in other languages like python, and probably haskell too)</p>\n\n<pre><code>[1,2,3,4].map( function(item) {\n     alert(item);\n})\n</code></pre>\n\n<p>The general syntax is:</p>\n\n<pre><code>array.map(func)\n</code></pre>\n\n<p><code>func</code> should take one parameter.</p>\n\n<p>The return value of <code>array.map</code> is another array, so you can use it like this:</p>\n\n<pre><code>var x = [1,2,3,4].map( function(item) { return item * 10; } );\n</code></pre>\n\n<p>And now x is <code>[10,20,30,40]</code></p>\n\n<h3>EDIT:</h3>\n\n<p>I must clarify: this concept is from the functional paradigm.</p>\n\n<p>You don't have to write the function inline; one might do so as a first sketch, but you could then extract it into its own function.</p>\n\n<pre><code>var item_processor = function(item) {\n      // do something complicated to an item \n}\n\nnew_list = my_list.map(item_processor);\n</code></pre>\n\n<p>which would be sort-of equivalent to:</p>\n\n<pre><code> for(item in my_list) { item_processor(item); }\n</code></pre>\n\n<p>except you don't get the <code>new_list</code>.</p>\n",
                    "is_accepted": false,
                    "score": 188
                },
                {
                    "body": "<p>Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.</p>\n\n<p>You may not need all of them, but they can be very useful, or would be if every browser supported them.</p>\n\n<p>The mozilla labs published the algorithms they and webkit both use, so that you can add them\nyourself.</p>\n\n<p><strong>filter</strong> returns an array of items that satisfy some condition or test.</p>\n\n<p><strong>every</strong> returns true if every array member passes the test.</p>\n\n<p><strong>some</strong> returns true if any pass the test.</p>\n\n<p><strong>forEach</strong> runs a function on each array member and doesn't return anything.</p>\n\n<p><strong>map</strong> is like forEach, but it returns an array of the results of the operation for each element.</p>\n\n<p>These methods all take a function for their first argument, and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function. </p>\n\n<p>Ignore it until you need it.</p>\n\n<p><strong>indexOf</strong> and <strong>lastIndexOf</strong> find the appropriate position of the first or last element that matches its argument exactly. </p>\n\n<pre><code>(function(){\n    var p, ap= Array.prototype, p2={\n        filter: function(fun, scope){\n            var L= this.length, A= [], i= 0, val;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        val= this[i];\n                        if(fun.call(scope, val, i, this)){\n                            A[A.length]= val;\n                        }\n                    }\n                    ++i;\n                }\n            }\n            return A;\n        },\n        every: function(fun, scope){\n            var L= this.length, i= 0;\n            if(typeof fun== 'function'){\n                while(i&lt;L){\n                    if(i in this &amp;&amp; !fun.call(scope, this[i], i, this)) return false;\n                    ++i;\n                }\n                return true;\n            }\n            return null;\n        },\n        forEach: function(fun, scope){\n            var L= this.length, i= 0;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        fun.call(scope, this[i], i, this);\n                    }\n                    ++i;\n                }\n            }\n            return this;\n        },\n        indexOf: function(what, i){\n            i= i || 0;\n            var L= this.length;\n            while(i&lt; L){\n                if(this[i]=== what) return i;\n                ++i;\n            }\n            return -1;\n        },\n        lastIndexOf: function(what, i){\n            var L= this.length;\n            i= i || L-1;\n            if(isNaN(i) || i&gt;= L) i= L-1;\n            else if(i&lt; 0) i += L;\n            while(i&gt; -1){\n                if(this[i]=== what) return i;\n                --i;\n            }\n            return -1;\n        },\n        map: function(fun, scope){\n            var L= this.length, A= Array(this.length), i= 0, val;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        A[i]= fun.call(scope, this[i], i, this);\n                    }\n                    ++i;\n                }\n                return A;\n            }\n        },\n        some: function(fun, scope){\n            var i= 0, L= this.length;\n            if(typeof fun== 'function'){\n                while(i&lt;L){\n                    if(i in this &amp;&amp; fun.call(scope, this[i], i, this)) return true;\n                    ++i;\n                }\n                return false;\n            }\n        }\n    }\n    for(p in p2){\n        if(!ap[p]) ap[p]= p2[p];\n    }\n    return true;\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>In JavaScript it's not advisable to loop through an Array with a for-in loop, but it's better using a for loop such as:</p>\n\n<pre><code>for(var i=0, len=myArray.length; i &lt; len; i++){}\n</code></pre>\n\n<p>It's optimized as well (\"caching\" the array length). If you'd like to learn more, <a href=\"http://blog.sebarmeli.com/2010/12/06/best-way-to-loop-through-an-array-in-javascript/\">read my post on the subject</a>.</p>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>There is a way to do it where you have very little implicit scope in your loop and do away with extra variables.</p>\n\n<pre><code>var i = 0,\n     item;\n\n// note this is weak to sparse arrays or falsey values\nfor ( ; item = myStringArray[i++] ; ){ \n    item; // This is the string at the index.\n}\n</code></pre>\n\n<p>Or if you really want to get the id and have a really classical <code>for</code> loop:</p>\n\n<pre><code>var i = 0,\n    len = myStringArray.length; // cache the length\n\nfor ( ; i &lt; len ; i++ ){\n    myStringArray[i]; // Don't use this if you plan on changing the length of the array\n}\n</code></pre>\n\n<p>Modern browsers all support iterator methods <code>forEach</code>, <code>map</code>, <code>reduce</code>, <code>filter</code> and a host of other methods on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray\" rel=\"nofollow\">Array prototype</a>. </p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Use the while loop...</p>\n\n<pre><code>var i=0, item, items = ['one','two','three'];\nwhile(item = items[i++]){\n    console.log(item);\n}\n</code></pre>\n\n<p>logs: 'one','two','three'</p>\n\n<p>And for the reverse order, an even more efficient loop</p>\n\n<pre><code>var items = ['one','two','three'], i = items.length;\nwhile(i--){\n    console.log(items[i]);\n}\n</code></pre>\n\n<p>logs: 'three','two','one'</p>\n\n<p>Or the classical <code>for</code> loop</p>\n\n<pre><code>var items = ['one','two','three']\nfor(var i=0, l = items.length; i &lt; l; i++){\n    console.log(items[i]);\n}\n</code></pre>\n\n<p>logs: 'one','two','three'</p>\n\n<p>Reference:\n<a href=\"http://www.sitepoint.com/google-closure-how-not-to-write-javascript/\">http://www.sitepoint.com/google-closure-how-not-to-write-javascript/</a></p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>There's a method to iterate over only own object properties, not including prototype's ones:</p>\n\n<pre><code>for (var i in array) if (array.hasOwnProperty(i)) {\n    // do something with array[i]\n}\n</code></pre>\n\n<p>but it still will iterate over custom-defined properties.</p>\n\n<p>In javascript any custom property could be assigned to any object including array.</p>\n\n<p>If one wants to iterate over sparsed array, <code>for (var i = 0; i &lt; array.length; i++) if (i in array)</code> or <code>array.forEach</code> with <code>es5shim</code> should be used.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>To directly answer the question: usually not.  JavaScript only has that capability if you're lucky enough to be in control of the JavaScript interpreter being used (usually not the case if it's browser-side code), and that implementation includes the <code>for</code>...<code>of</code> feature from the proposed sixth version of the ECMAScript specification (code-named \"Harmony\"). If the stars have so aligned in your case, you can do this:</p>\n\n<pre><code>// ONLY WORKS IN ECMASCRIPT 6 \"HARMONY\"\nvar myStringArray = [\"Hello\", \"World\"];\nfor (var s of myStringArray)\n{\n  // ... do something with s ...\n}\n</code></pre>\n\n<p>Most JavaScript programmers are working in an environment that's not there yet, however. </p>\n\n<p>If you can assume the interpreter is compliant with version <em>5</em> of the specification (which means, for browser code, no versions of Internet Explorer before 9), then you can use the <code>forEach</code> iterator method instead of a loop. In that case, you pass a function to be called for each item in the list:</p>\n\n<pre><code>var myStringArray = [ \"Hello\", \"World\" ]\nmyStringArray.forEach( function(s) { \n     // ... do something with s ...\n} )\n</code></pre>\n\n<p>If you want something that works in <em>all</em> versions of JavaScript, then you have to use an explicit counting loop.  The safest version, which handles sparse arrays properly, is something like this:</p>\n\n<pre><code>var myStringArray = [ \"Hello\", \"World\" ]\nvar len = myStringArray.length\nfor (var i=0; i&lt;len; ++i) {\n  if (i in myStringArray) {\n    var s = myStringArray[i];\n    // ... do something with s ...\n  }\n}\n</code></pre>\n\n<p>Assigning the length value to the local variable (as opposed to including the full <code>myStringArray.length</code> expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through; using Rhino on my machine, the speedup is 43%. </p>\n\n<p>You will often see the length caching done in the loop initialization clause, like this:</p>\n\n<pre><code>var myStringArray = [ \"Hello\", \"World\" ]\nfor (var len = myStringArray.length, i=0; i&lt;len; ++i) {\n</code></pre>\n\n<p>The <code>for</code>...<code>in</code> syntax mentioned by others is for looping over an object's properties; since an Array in JavaScript is just an object with numeric property names (and a magical \"length\" property), you can theoretically loop over an Array with it.  But the problem is that it doesn't restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor does it iterate over those in numeric order. Therefore, the <code>for</code>...<code>in</code> syntax should <em>not</em> be used for looping through Arrays. </p>\n",
                    "is_accepted": false,
                    "score": 127
                },
                {
                    "body": "<p>I would thoroughly recommend making use of the <a href=\"http://documentcloud.github.com/underscore\">underscore.js</a> library. It provides you with various functions that you can use to iterate over arrays/collections.</p>\n\n<p>For instance:</p>\n\n<pre><code>_.each([1, 2, 3], function(num){ alert(num); });\n=&gt; alerts each number in turn...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>It's not 100% identical, but similar:</p>\n\n<pre><code>var myStringArray = ['Hello', 'World']; // array uses [] not {}\nfor (var i in myStringArray) {\n    console.log(i + ' -&gt; ' + myStringArray[i]); // i is the index/key, not the item\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want a terse way to write a fast loop <em>and</em> you can iterate in reverse:</p>\n\n<pre><code>for (var i=myArray.length;i--;){\n  var item=myArray[i];\n}\n</code></pre>\n\n<p>This has the benefit of caching the length (similar to <code>for (var i=0,len=myArray.length;i&lt;len;++i)</code> and unlike <code>for (var i=0;i&lt;myArray.length;++i)</code>) while being fewer characters to type.</p>\n\n<p>There are even some times when you ought to iterate in reverse, such as when iterating over a <a href=\"https://developer.mozilla.org/En/DOM/NodeList#A_.22live.22_collection\">live NodeList</a> where you plan on removing items from the DOM during iteration.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you're using the jQuery library, consider using \n<a href=\"http://api.jquery.com/jQuery.each/\">http://api.jquery.com/jQuery.each/</a></p>\n\n<p>From the documentation:</p>\n\n<p>jQuery.each( collection, callback(indexInArray, valueOfElement) ) </p>\n\n<p>Returns: Object</p>\n\n<p>Description: A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</p>\n\n<p>The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is a map (JavaScript object) or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I did not yet see this variation, which I personally like the best:</p>\n\n<p>Given an array:</p>\n\n<pre><code>var someArray = [\"some\", \"example\", \"array\"];\n</code></pre>\n\n<p>You can loop over it without ever accessing the length property:</p>\n\n<pre><code>for (var i=0, item; item=someArray[i]; i++) {\n  // item is \"some\", then \"example\", then \"array\"\n  // i is the index of item in the array\n  alert(\"someArray[\" + i + \"]: \" + item);\n}\n</code></pre>\n\n<p>See this JsFiddle demonstrating that: <a href=\"http://jsfiddle.net/prvzk/\">http://jsfiddle.net/prvzk/</a></p>\n\n<p>This only works for arrays that are <em>not</em> sparse. Meaning that there actually is a value at each index in the array. However, I found that in practice I hardly ever use sparse arrays in Javascript... In such cases it's usually a lot easier to use an object as a map/hashtable. If you do have a sparse array, and want to loop over 0 .. length-1, you need the for (var i=0; i&lt;someArray.length; ++i) construct, but you still need an if inside the loop to check whether the element at the current index is actually defined.</p>\n\n<p>Also, as CMS mentions in a comment below, you can only use this on arrays that don't contain any falsish values. The array of strings from the example works, but if you have empty strings, or numbers that are 0 or NaN, etc. the loop will break off prematurely. Again in practice this is hardly ever a problem for me, but it is something to keep in mind, which makes this a loop to think about before you use it... That may disqualify it for some people :)</p>\n\n<p>What I like about this loop is:</p>\n\n<ul>\n<li>It's short to write </li>\n<li>No need to access (let alone cache) the length property </li>\n<li>The item to access is automatically defined within the loop\nbody under the name you pick.</li>\n<li>Combines very naturally with array.push and array.splice to use arrays like lists/stacks</li>\n</ul>\n\n<p>The reason this works is that the array specification mandates that when you read an item from an index >= the array's length, it will return undefined. When you write to such a location it will actually update the length.</p>\n\n<p>For me, this construct most closely emulates the Java 5 syntax that I love:</p>\n\n<pre><code>for (String item : someArray) {\n}\n</code></pre>\n\n<p>... with the added benefit of also knowing about the current index inside the loop</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>v = [4, 5, 6]\nfor (i = 0, j = x[i]; i &lt; x.length; j = x[++i]){\n    console.log(i,j);\n}\n</code></pre>\n\n<p>A lot cleaner...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>for (var s of myStringArray) {</h1>\n\n<p>(Directly answering your question: now you can!)</p>\n\n<p>Most other answers are right, but you should also know that <strong><em>ECMA Script 6</em></strong> is bringing a new mechanism for doing iteration, the <strong><code>for..of</code></strong> loop. </p>\n\n<p>This new syntax is the most elegant way to iterate an array in javascript (as long you don't need the iteration index), but it is not yet widely supported by the browsers. </p>\n\n<p>It currently works with Firefox 13+, Chrome 37+ and it does not work with other browsers (see browser compatibility below). </p>\n\n<p>It also works on Node (I tested it on version 0.12.0).</p>\n\n<p><strong>Iterating an array</strong></p>\n\n<pre><code>for (letter of [\"a\", \"b\", \"c\"]) {\n   console.log(letter); \n}\n</code></pre>\n\n<p><strong>Iterating an array of objects</strong></p>\n\n<pre><code>var band = [\n  {firstName : 'John', lastName: 'Lennon'}, \n  {firstName : 'Paul', lastName: 'McCartney'}\n];\n\nfor(member of band){\n  console.log(member.firstName + ' ' + member.lastName); \n}\n</code></pre>\n\n<p><strong>You could also iterate custom types, by defining an <code>iterator()</code> method:</strong></p>\n\n<pre><code>// Warning: this mode of iteration is not yet fully defined in the specification and highly subject to changes\nMyCollection.prototype.iterator = function() {\n  return {\n     elements: this.elements,\n     index: 0,\n      next: function() {\n         if (this.index &gt;= this.elements.length)\n            throw StopIteration;\n         return this.elements[this.index++]\n      }\n  }\n}\n</code></pre>\n\n<hr>\n\n<p><em>Compatibility table:</em>\n<a href=\"http://kangax.github.io/es5-compat-table/es6/\" rel=\"nofollow\">http://kangax.github.io/es5-compat-table/es6/#For..of loops</a></p>\n\n<p><em>Spec:</em> <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\" rel=\"nofollow\">http://wiki.ecmascript.org/doku.php?id=harmony:iterators</a></p>\n\n<h1>}</h1>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The optimized approach is to cache the length of array and using single var pattern initializing all variables with single var keyword.</p>\n\n<pre><code>var i, max, myStringArray = [\"Hello\",\"World\"];\nfor (i = 0, max = myStringArray.length; i &lt; max; i++) {\n    alert(myStringArray[i]);\n   //Do something\n}\n</code></pre>\n\n<p>If order of iteration does not matter than you should try reversed loop, it is fastest as it reduce overhead condition testing and decrement is in one statement:</p>\n\n<pre><code>var i,myStringArray = [\"item1\",\"item2\"];\nfor (i =  myStringArray.length; i--) {\n    alert(myStringArray[i]);\n}\n</code></pre>\n\n<p>or better and cleaner to use while loop:</p>\n\n<pre><code>var myStringArray = [\"item1\",\"item2\"],i = myStringArray.length;\nwhile(i--) {\n   // do something with fruits[i]\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code> var myStringArray = ['Hello','World'];\n for(var i=0; i&lt;myStringArray.length; i++)\n console.log(myStringArray[i]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>The most elegant and fast way</h2>\n\n<pre><code>var arr = [1, 2, 3, 1023, 1024];\nfor (var value; value = arr.pop();) {\n    value + 1\n}\n</code></pre>\n\n<p><a href=\"http://jsperf.com/native-loop-performance/8\" rel=\"nofollow\">http://jsperf.com/native-loop-performance/8</a></p>\n\n<hr>\n\n<h2>Edited (because I was wrong)</h2>\n\n<hr>\n\n<p>Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.</p>\n\n<ul>\n<li><a href=\"http://jsperf.com/native-loop-performance/16\" rel=\"nofollow\">http://jsperf.com/native-loop-performance/16</a> !</li>\n</ul>\n\n<p><strong>Preparation:</strong></p>\n\n<pre><code>&lt;script src=\"//code.jquery.com/jquery-2.1.0.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    Benchmark.prototype.setup = function() {\n        // Fake function with minimal action on the value\n        var tmp = 0;\n        var process = function(value) {\n            tmp = value; // Hold a reference to the variable (prevent engine optimisation?)\n        };\n\n        // Declare the test Array\n        var arr = [];\n        for (var i = 0; i &lt; 100000; i++)\n            arr[i] = i;\n    };\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Tests:</strong></p>\n\n<pre><code>&lt;a href=\"http://jsperf.com/native-loop-performance/16\" \n   title=\"http://jsperf.com/native-loop-performance/16\"\n&gt;&lt;img src=\"http://i.imgur.com/YTrO68E.png\" title=\"Hosted by imgur.com\" /&gt;&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Well, how about this:</p>\n\n<pre><code>for (var key in myStringArray) {\n    console.log(myStringArray[key]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There are various way to loop through array in javascript.<br>\n<strong>Generic loop:</strong></p>\n\n<pre><code>var i;\nfor (i = 0; i &lt; substr.length; ++i) {\n    // do something with `substr[i]`\n}\n</code></pre>\n\n<p><strong>ES5's forEach:</strong></p>\n\n<pre><code>substr.forEach(function(item) {\n    // do something with `item`\n});\n</code></pre>\n\n<p><strong>jQuery.each:</strong></p>\n\n<pre><code>jQuery.each(substr, function(index, item) {\n    // do something with `item` (or `this` is also `item` if you like)\n});\n</code></pre>\n\n<p>Have a look <a href=\"http://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery\">this</a> for detail information or\nyou can also Check <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">MDN</a> for looping through array in javascript &amp; using jquery check <a href=\"http://api.jquery.com/jquery.each/\">Jquery for each</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For example, I used in a Firefox console:</p>\n\n<pre><code>[].forEach.call(document.getElementsByTagName('pre'), function(e){ \n   console.log(e);\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In Java you can use a <code>for()</code> loop to go through objects in an array like so:</p>\n\n<pre><code>String[] myStringArray = {\"Hello\",\"World\"};\nfor(String s : myStringArray)\n{\n    //Do something\n}\n</code></pre>\n\n<p>Can you do the same in JavaScript?</p>\n",
            "last_activity_date": 1424421467,
            "question_id": 3010840,
            "score": 852,
            "tags": [
                "javascript",
                "arrays",
                "for-loop"
            ],
            "title": "Loop through array in JavaScript"
        },
        {
            "answer_count": 35,
            "answers": [
                {
                    "body": "<p>I wouldn't say there is a preferred method, you can use either. However If you are using one form of quote in the string, you might want to use the other as the literal.</p>\n\n<pre><code>alert('Say \"Hello\"');\nalert(\"Say 'Hello'\");\n</code></pre>\n\n<p>The most likely reason is programmer preference / API consistency.</p>\n",
                    "is_accepted": true,
                    "score": 439
                },
                {
                    "body": "<p>There are people that claim to see performance differences: <a href=\"http://lists.evolt.org/pipermail/javascript/2003-November/006168.html\" rel=\"nofollow\">old mailing list thread</a>. But I couldn't find any of them to be confirmed.</p>\n\n<p>The main thing is to look at what kind of quotes (double or single) you are using inside your string. It helps to keep the number of escapes low. For instance when you are working with html inside your strings, it is easier to use single quotes so that you don't have to escape all double quotes around the attributes.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is strictly no difference, so it is mostly a matter of taste and of what is in the string (or if the JS code itself is in a string), to keep number of escapes low.</p>\n\n<p>The speed difference legend might come from PHP world, where the two quotes have different behavior.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Strictly speaking, there is no difference in meaning; so the choice comes down to convenience.</p>\n\n<p>Here are several factors that could influence your choise:</p>\n\n<ul>\n<li>House style: Some groups of developers already use one convention or the other.</li>\n<li>Client-side requirements: Will you be using quotes within the strings? (See Ady's answer).</li>\n<li>Server-side language: VB.Net people might choose to use single quotes for java-script so that the scripts can be built server-side (VB.Net uses double-quotes for strings, so the java-script strings are easy to distinguished if they use single quotes).</li>\n<li>Library code: If you're using a library that uses a particular style, you might consider using the same style yourself.</li>\n<li>Personal preference: You might thing one or other style looks better.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>The difference is purely stylistic. I used to be a double-quote Nazi. Now I use single quotes in nearly all cases. There's no practical difference beyond how your editor highlights the syntax.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <strong>only</strong> difference is demonstrated in the following:</p>\n\n<pre><code>'A string that\\'s single quoted'\n\n\"a string that's double quoted\"\n</code></pre>\n\n<p>So, it's only down to how much quote escaping you want to do. Obviously the same applies to double quotes in double quoted strings.</p>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>I'd like to say the difference is purely stylistic, but I'm really having my doubts. Consider the following example:</p>\n\n<pre><code>/*\n   Add trim() functionality to JavaScript...\n    1. By extending the String prototype\n    2. By creating a 'stand-alone' function\n   This is just to demonstrate results are the same in both cases.\n*/\n\n// Extend the String prototype with a trim() method\nString.prototype.trim = function() {\n return this.replace(/^\\s+|\\s+$/g, '');\n};\n\n// 'Stand-alone' trim() function\nfunction trim(str) {\n return str.replace(/^\\s+|\\s+$/g, '');\n};\n\ndocument.writeln(String.prototype.trim);\ndocument.writeln(trim);\n</code></pre>\n\n<p>In Safari, Chrome, Opera, and Internet Explorer (tested in IE7 and IE8), this will return the following:</p>\n\n<pre><code>function () {\n return this.replace(/^\\s+|\\s+$/g, '');\n}\nfunction trim(str) {\n return str.replace(/^\\s+|\\s+$/g, '');\n}\n</code></pre>\n\n<p>However, Firefox will yield a slightly different result:</p>\n\n<pre><code>function () {\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n}\nfunction trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, \"\");\n}\n</code></pre>\n\n<p>The single quotes have been replaced by double quotes. (Also note how the indenting space was replaced by four spaces.) This gives the impression that at least one browser parses JavaScript internally as if everything was written using double quotes. <em>One might think, it takes Firefox less time to parse JavaScript if everything is already written according to this 'standard'.</em></p>\n\n<p>Which, by the way, makes me a very sad panda, since I think single quotes look much nicer in code. Plus, in other programming languages, they're usually faster to use than double quotes, so it would only make sense if the same applied to JavaScript.</p>\n\n<p><strong>Conclusion:</strong> I think we need to do more research on this.</p>\n\n<p><strong>Edit:</strong> This might explain <a href=\"http://lists.evolt.org/pipermail/javascript/2003-November/006155.html\">Peter-Paul Koch's test results</a> from back in 2003.</p>\n\n<blockquote>\n  <p>It seems that single quotes are <em>sometimes</em> faster in Explorer Windows (roughly 1/3 of my tests did show a faster response time), but if Mozilla shows a difference at all, it handles double quotes slightly faster. I found no difference at all in Opera.</p>\n</blockquote>\n\n<p><strong>Edit 2014:</strong> Modern versions of Firefox/Spidermonkey don\u2019t do this anymore.</p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>Double quotes will wear your shift key out faster :)</p>\n",
                    "is_accepted": false,
                    "score": 218
                },
                {
                    "body": "<p>I think it's important not to forget that while IE might have 0 extensions/toolbars installed, firefox might have some extensions installed (I'm just thinking of firebug for instance). Those extensions will have an influence on the benchmark result. </p>\n\n<p>Not that it really matters since browser X is faster in getting elementstyles, while browser Y might be faster in rendering a canvas element. (hence why a browser \"manufacturer\" always has the fastest javascript engine)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you're doing inline JavaScript (arguably a \"bad\" thing, but avoiding that discussion) <strong>single</strong> quotes are your only option for string literals, I believe.</p>\n\n<p>e.g., this works fine:</p>\n\n<pre><code>&lt;a onclick=\"alert('hi');\"&gt;hi&lt;/a&gt;\n</code></pre>\n\n<p>But you can't wrap the \"hi\" in double quotes, via any escaping method I'm aware of.  Even <b><code>&amp;quot;</code></b> which would have been my best guess (since you're escaping quotes in an attribute value of HTML) doesn't work for me in Firefox.  <b><code>\\\"</code></b> won't work either because at this point you're escaping for HTML, not JavaScript.</p>\n\n<p>So, if the name of the game is consistency, and you're going to do some inline JavaScript in parts of your app, I think single quotes are the winner.  Someone please correct me if I'm wrong though.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I would use double quotes when single quotes cannot be used and vice versa:</p>\n\n<pre><code>\"'\" + singleQuotedValue + \"'\"\n'\"' + doubleQuotedValue + '\"'\n</code></pre>\n\n<p>Instead of:</p>\n\n<pre><code>'\\'' + singleQuotedValue + '\\''\n\"\\\"\" + doubleQuotedValue + \"\\\"\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>there is no difference between single and double quotes in javascript. </p>\n\n<p>specification is important:</p>\n\n<p>maybe there are performance diffs, but they are absolutely minimum and can change everyday according to browsers' implementation. further discussion is futile unless your js application is hundreds of thousands long.</p>\n\n<p>it's like benchmark if</p>\n\n<p>a=b;</p>\n\n<p>is faster than</p>\n\n<p>a = b;</p>\n\n<p>(extra spaces)\ntoday, in a particular browser and platform, etc.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>i've been running the following about 20 times. and it appears that Double quotes are about 20% faster.\nFun part is, if you change part 2 and part 1 around, Single quotes are about 20% faster.</p>\n\n<pre><code>//Part1\nvar r='';\nvar iTime3 = new Date().valueOf();\nfor(var j=0;j&lt;1000000;j++){\n    r+='a';\n}\nvar iTime4 = new Date().valueOf();\nalert('With single quote : ' + (iTime4 - iTime3));  \n\n//Part 2                \nvar s=\"\";\nvar iTime1 = new Date().valueOf();\nfor(var i=0;i&lt;1000000;i++){\n    s+=\"a\";\n}\nvar iTime2 = new Date().valueOf();\nalert('With double quote : ' + (iTime2 - iTime1));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're dealing with JSON, it should be noted that strictly speaking, JSON strings must be double quoted. Sure, many libraries support single quotes as well, but I had great problems in one of my projects before realizing that single quoting a string is in fact not according to JSON standards.</p>\n",
                    "is_accepted": false,
                    "score": 267
                },
                {
                    "body": "<p>After reading all the answers that say it maybe be faster or maybe have advantages, I would say double quote is better or maybe faster too because <a href=\"http://closure-compiler.appspot.com/home\" rel=\"nofollow\">Google closure compiler</a> convert single quotes to double quotes. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>One more thing that you might want to consider as a reason for the shift from double quotes to single quotes is the increase in popularity of server side scripts. When using PHP you can pass variables and parse javascript functions using strings and variables in PHP.</p>\n\n<p>If you write a string and use double quotes for your PHP you won't have to escape any of the single quotes and PHP will automatically retrieve the value of the variables for you.</p>\n\n<p>Example:I need to run a javascript function using a variable from my server.</p>\n\n<pre><code>public static function redirectPage( $pageLocation )\n{\n    echo \"&lt;script type='text/javascript'&gt;window.location = '$pageLocation';&lt;/script&gt;\";\n}\n</code></pre>\n\n<p>This saves me a lot of hassle in having to deal with joining strings, and I can effectively call a javascript from PHP. This is only one example, but this may be one of several reasons why programmers are defaulting to single quotes in javascript.</p>\n\n<p><a href=\"http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double\">Quote from PHP documents</a>: \"The most important feature of double-quoted strings is the fact that variable names will be expanded. See string parsing for details. \"</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Technically there's no difference, it's only matter of style and convention.</p>\n\n<p>Douglas Crockford recommends using single quotes for internal strings and double quotes for external (by external we mean those to be displayed to user of application, like messages or alerts).</p>\n\n<p>I personally follow that.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>For use of javascript code across different languages, I've found single quotes to consistently require less code tweaking.</p>\n\n<p>Double quotes support multi-line strings.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I hope I am not adding something obvious,\nbut I have been struggling with django and ajax and JSON on this.</p>\n\n<p>Assuming that in your HTML code you do use double quotes, as normally should be,\nI highly suggest to use single quotes for the rest in javascript.</p>\n\n<p>So I agree with @ady but with some care.</p>\n\n<p>My bottom line is:\nIn javascript probably it doesn't matter, but as soon as you embed\nit inside HTML or the like you start to get troubles. You should know\nwhat is actually escaping, reading, passing your string.</p>\n\n<p>My simple case was:</p>\n\n<pre><code>tbox.innerHTML = tbox.innerHTML + '&lt;div class=\"thisbox_des\" style=\"width:210px;\" onmouseout=\"clear()\"&gt;&lt;a href=\"/this/thislist/'\n                   + myThis[i].pk +'\"&gt;&lt;img src=\"/site_media/'\n                   + myThis[i].fields.thumbnail +'\" height=\"80\" width=\"80\" style=\"float:left;\" onmouseover=\"showThis('\n                   + myThis[i].fields.left +','\n                   + myThis[i].fields.right +',\\''\n                   + myThis[i].fields.title +'\\')\"&gt;&lt;/a&gt;&lt;p style=\"float:left;width:130px;height:80px;\"&gt;&lt;b&gt;'\n                   + myThis[i].fields.title +'&lt;/b&gt; '\n                   + myThis[i].fields.description +'&lt;/p&gt;&lt;/div&gt;'\n</code></pre>\n\n<p>You can spot the \\' in the third field of showThis.</p>\n\n<p>The double quote didn't work!\nIt is clear why,</p>\n\n<p>but it is also clear why we should stick on single quotes...\n.. I guess..</p>\n\n<p>This case is a very simple HTML embedding, the error was generated\nby a simple copy/paste from a 'double quoted' javascript code.</p>\n\n<p>So to answer the question:</p>\n\n<p>Try to use single quotes while within HTML. It might save a couple of debug issues..</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>It's mostly a matter of style and preference. There are some rather interesting and useful technical explorations in the other answers, so perhaps the only thing I might add is to offer a little worldly advice.</p>\n\n<ul>\n<li><p><em>If</em> you're coding in a company or team, <em>then</em> it's probably a good idea to\nfollow the \"house style\".</p></li>\n<li><p><em>If</em> you're alone hacking a few side projects, <em>then</em> look at a few prominent leaders in the community . Eg let's say you getting into Node.js. Take a look at core modules, eg underscore.js or express and see what\nconvention they use, and consider following that.</p></li>\n<li><p><em>If</em> both conventions are equally used, <em>then</em> defer to your personal<br>\npreference.</p></li>\n<li><p><em>If</em> you have no personal preference, <em>then</em> flip a coin.</p></li>\n<li><p><em>If</em> you don't have a coin, <em>then</em> beer is on me ;)</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Let's look what a reference do.</p>\n\n<p>Inside jquery.js, every string are double-quoted. </p>\n\n<p>So, beginning now, I'll use double-quoted strings. (I was using single!)</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>For me, if I code in a VIM editor and if something is enclosed in single quotes, I can double-click to select ONLY the text within the quotes. Double quotes, on the other hand, includes the quote marks which I find annoying when I want to do some quick copy and pasting.</p>\n\n<p>E.g. 'myVar' double-click in VIM editor copies: >myVar&lt;\n\"myVar\" literally copies: >\"myVar\"&lt; and when I paste, I have to delete the quote marks either side.</p>\n\n<p>My two cents anyway...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As stated by other replies, they are almost the same. But I will try to add more.</p>\n\n<ol>\n<li>Some efficient algorithms use character arrays to process strings. Those algorithms(browser compiler etc.) would see <code>\"</code> (#34) first before <code>'</code> (#39) therefore saving several cpu cycles depending on your data structure.</li>\n<li><code>\"</code> is escaped by anti-XSS engines</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Not sure if this is relevant in todays world, but double quotes used to be used for content that needed to have control characters processed and single quotes for strings that didn't.</p>\n\n<p>The compiler will run string manipulation on a double quoted string while leaving a single quoted string literally untouched. This used to lead to 'good' developers choosing to use single quotes for strings that didn't contain control characters like <code>\\n</code> or <code>\\0</code> (not processed within single quotes) and double quotes when they needed the string parsed (at a slight cost in cpu cycles for processing the string).</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you're jumping back an forth between JavaScript and C#, it's best to train your fingers for the common convention which is double quotes. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>There is no one better solution</strong>; however, I would like to argue that double quotes may be more desirable at times:</p>\n\n<ul>\n<li><strong>Newcomers will already be familiar with double quotes from their language</strong>.  In English, we must use double quotes <code>\"</code> to identify a passage of quoted text.  If we were to use a single quote <code>'</code>, the reader may misinterpret it as a contraction.  The other meaning of a passage of text surrounded by the <code>'</code> indicates the 'colloquial' meaning.  It makes sense to stay consistent with pre-existing languages, and this may likely ease the learning and interpretation of code.</li>\n<li><strong>Double quotes eliminate the need to escape apostrophes</strong> (as in contraptions).  Consider the string: <code>\"I'm going to the mall\"</code>, vs. the otherwise escaped version: <code>'I\\'m going to the mall'</code>.</li>\n<li><strong>Double quotes mean a string</strong>.  When you learn a new language like Java, Python, or C, double quotes are always used.  This is because, as mentioned above, double quotes have always been used in language to indicate quoted passages of text.  Old books will use double quotes, while newer ones may not.  It may be desirable to stick to convention in certain cases.</li>\n</ul>\n\n<p>Nonetheless, as others have stated, it is most important to remain consistent.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>best practice is to use double quotes (\"\") first and single quotes ('') if needed after, the reason being is that if you ever use server-side scripting you will not be able to pull content from a server (example sql queries from a database) if you use singles quotes over double.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think this is all a matter of convenience/preference.</p>\n\n<p>I prefer double quote because it matches to what C# has and this my environment that I normally work on: C# + JS.</p>\n\n<p>Also one possible reason for double quotes over single quotes is this (which I have found in my projects code):\nFrench or some other languages use single quotes a lot (like English actually), so if by some reason you end up rendering strings from server side (which I know is bad practice), then a single quote will render wrongly.</p>\n\n<p>The probability of using double quotes in regular language is low therefore I think it has a better chance of not breaking something.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Talking about performance, quotes will never be your bottleneck, however, the performance is the same in both cases.</p>\n\n<p>Talking about coding speed, if you use <code>'</code> for delimiting a string, you will need to escape <code>\"</code> quotes. You are more likely to need to use <code>\"</code> inside the string, in example:</p>\n\n<pre><code>//JSON Objects:\nvar jsonObject = '{\"foo\":\"bar\"}';\n//HTML attributes:\ndocument.getElementById(\"foobar\").innerHTML = '&lt;input type=\"text\"&gt;';\n</code></pre>\n\n<p>Then, I prefer to use <code>'</code> for delimiting the string, so I have to escape less characters.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>One (silly) reason to use single quotes would be that they don't require you to hit the shift key to type them, whereas a double quote do.  (I'm assuming that the average string doesn't require escaping, which is a reasonable assumption.)  Now, let's suppose every day I code 200 lines of code.  Maybe in those 200 lines I have 30 quotes.  Maybe typing a double quote takes 0.1 seconds more time than typing a single quote (because I have to hit the shift key).  Then on any given day, I waste 3 seconds.  If I code in this manner for 200 days a year for 40 years, then I've wasted 6.7 hours of my life.  Food for thought.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you are using <a href=\"http://www.jshint.com/\" rel=\"nofollow\">jshint</a>, it will raise an error if you use double quote string.</p>\n\n<p>I used it through the Yeoman scafflholding of AngularJS but maybe there is somehow a maner to configure this.</p>\n\n<p>By the way, when you handle HTML into JavaScript, it's easier to use single quote :</p>\n\n<pre><code>var foo = '&lt;div class=\"cool-stuff\"&gt;Cool content&lt;/div&gt;';\n</code></pre>\n\n<p>And at least JSON is using double quotes to reprensent strings.</p>\n\n<p>There is no trivial way to answer to your question</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If your JS source is:</p>\n\n<pre><code>elem.innerHTML=\"&lt;img src='smily' alt='It\\'s a Smily' style='width:50px'&gt;\";\n</code></pre>\n\n<p>The HTML source will be: </p>\n\n<pre><code>&lt;img src=\"smiley\" alt=\"It's a Smiley\" style=\"width:50px\"&gt;\n</code></pre>\n\n<p>or for HTML5</p>\n\n<pre><code>&lt;img src=smiley alt=\"It's a Smiley\" style=width:50px&gt;\n</code></pre>\n\n<p>JS allows arrays like that:</p>\n\n<pre><code>var arr=['this','that'];\n</code></pre>\n\n<p>But if you stringify it, it will be for compatibly reason:</p>\n\n<pre><code>JSON=[\"this\",\"that\"]\n</code></pre>\n\n<p>I'm sure this takes some time.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just to add my 2 cents: In working with both JS and PHP a few years back, I've become accustom to using single quotes so I can type the escape character ('\\') without having to escape it as well.  I usually used it when typing raw strings with file paths, etc. (<a href=\"http://en.wikipedia.org/wiki/String_literal#Raw_strings\" rel=\"nofollow\">http://en.wikipedia.org/wiki/String_literal#Raw_strings</a>)</p>\n\n<p>Anyhow, my convention ended up becoming the use of single quotes on identifier-type raw strings, such as <code>if (typeof s == 'string') ...</code> (in which escape characters would never be used - ever), and double quotes for <em>texts</em>, such as \"Hey, what's up?\".  I also use single quotes in comments as a typographical convention to show identifier names.  This is just a rule of thumb, and I break off only when needed, such as when typing HTML strings <code>'&lt;a href=\"#\"&gt; like so &lt;a&gt;'</code> (though you could reverse the quotes here also).  I'm also aware that, in the case of JSON, double quotes are used for the names - but outside that, personally, I prefer the single quotes when escaping is <em>never</em> required for the text between the quotes - like <code>document.createElement('div')</code>.</p>\n\n<p>Bottom line, and as some have mentioned/alluded to, pick a convention, stick with it, and only deviate when necessary.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use single quotes or double quotes.\nThis enables you for example to easily nest javascript inside HTML attributes, without the need to escape the quotes. \nThe same is when you create javascript with PHP.</p>\n\n<p>The general idea is: if it is possible use such quotes that you won't need to escape.\nLess escaping = better code.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>When using CoffeeScript I use double quotes. I agree that you should pick either one and stick to it. CoffeeScript gives you interpolation when using the double quotes.</p>\n\n<p><code>\n\"This is my #{name}\"\n</code></p>\n\n<p>ES6 is using back ticks (`) for template strings. Which probably has a good reason, but when coding it can be cumbersome to change the string literals character from quotes or double quotes to back ticks in order to get the interpolation feature. CoffeeScript might not be perfect, but using the same string literals character everywhere (double quotes) and always be able to interpolate is a nice feature.</p>\n\n<p><code>\n`This is my ${name}`\n</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p><code>console.log(\"double\");</code> <strong>vs</strong> <code>console.log('single');</code></p>\n\n<p>I see more and more JavaScript libraries out there using single quotes when handling strings. What are the reasons to use one over the other? I thought they're pretty much interchangeable.</p>\n",
            "last_activity_date": 1423646910,
            "question_id": 242813,
            "score": 722,
            "tags": [
                "javascript",
                "string",
                "coding-style",
                "conventions"
            ],
            "title": "When to Use Double or Single Quotes in JavaScript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The first statement depends on the context in which it is declared. </p>\n\n<p>If it is declared in the global context it will create an implied global variable called \"foo\" which will be a variable which points to the function. Thus the function call \"foo()\" can be made anywhere in your javascript program. </p>\n\n<p>If the function is created in a closure it will create an implied local variable called \"foo\" which you can then use to invoke the function inside the closure with \"foo()\"</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>I should have also said that function statements (The first one) are parsed before function expressions (The other 2). This means that if you declare the function at the bottom of your script you will still be able to use it at the top. Function expressions only get evaluated as they are hit by the executing code.</p>\n\n<p><strong>END EDIT</strong></p>\n\n<p>Statements 2 &amp; 3 are pretty much equivalent to each other. Again if used in the global context they will create global variables and if used within a closure will create local variables. However it is worth noting that statement 3 will ignore the function name, so esentially you could call the function anything. Therefore</p>\n\n<pre><code>var foo = function foo() { return 5; }\n</code></pre>\n\n<p>Is the same as </p>\n\n<pre><code>var foo = function fooYou() { return 5; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>They're actually really similar. How you call them is exactly the same, but the difference lies in how the browser loads them into the execution context.</p>\n\n<p>function declarations loads before any code is executed. </p>\n\n<p>While function expressions loads only when the interpreter reaches that line of code.</p>\n\n<p>So if you try to call a function expression before it's loaded, you'll get an error</p>\n\n<p>But if you call a function declaration, it'll always work. Because no code can be called until all declarations are loaded. </p>\n\n<p>ex. Function Expression</p>\n\n<pre><code>alert(foo()); // ERROR! foo wasn't loaded yet\nvar foo = function() { return 5; } \n</code></pre>\n\n<p>ex. Function Declaration</p>\n\n<pre><code>alert(foo()); // Alerts 5. Declarations are loaded before any code can run.\nfunction foo() { return 5; } \n</code></pre>\n\n<p>As for the second part of your questions. </p>\n\n<p><code>var foo = function foo() { return 5; }</code> is really the same as the other two. It's just that this line of code used to cause  an error in safari, though it no longer does.</p>\n",
                    "is_accepted": false,
                    "score": 157
                },
                {
                    "body": "<p>Though the complete difference is more complicated, the only difference that concerns me is when the machine creates the function object. Which in the case of declarations is before any statement is executed but after a statement body is invoked (be that the global code body or a sub-function's), and in the case of expressions is when the statement it is in gets executed. Other than that for all intents and purposes browsers treat them the same.</p>\n\n<p>To help you understand, take a look at this performance <a href=\"http://jsperf.com/local-vs-global/7\" rel=\"nofollow\">test</a> which busted an assumption I had made of internally declared functions not needing to be re-created by the machine when the outer function is invoked. Kind of a shame too as I liked writing code that way.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>FUNCTION DECLARATION</strong></p>\n\n<pre><code>function foo() { ... }\n</code></pre>\n\n<p><em>Because of FUNCTION HOISTING, the function declared this way can be called both after and before the definition.</em></p>\n\n<p><strong>FUNCTION EXPRESSION</strong></p>\n\n<ol>\n<li><p><strong>NAMED FUNCTION EXPRESSION</strong></p>\n\n<p>var foo = function bar() { ... }</p></li>\n<li><p><strong>ANONYMOUS FUNCTION EXPRESSION</strong></p>\n\n<p>var foo = function() { ... }</p></li>\n</ol>\n\n<p><em>foo() can be called only after creation.</em></p>\n\n<p><strong><a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife\">IMMEDIATELY-INVOKED FUNCTION EXPRESSION (IIFE)</a></strong></p>\n\n<pre><code>(function() { ... }());\n</code></pre>\n\n<p>Conclusion?</p>\n\n<p>Crockford recommends to use function expression because it makes it clear that foo is a variable containing a function value. Well, personally, I prefer to use Declaration unless there is a reason for Expression.</p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>Regarding 3rd definition:</p>\n\n<pre><code>var foo = function foo() { return 5; }\n</code></pre>\n\n<p>Heres an example which shows how to use possibility of recursive call:</p>\n\n<pre><code>a = function b(i) { \n  if (i&gt;10) {\n    return i;\n  }\n  else {\n    return b(++i);\n  }\n}\n\nconsole.log(a(5));  // outputs 11\nconsole.log(a(10)); // outputs 11\nconsole.log(a(11)); // outputs 11\nconsole.log(a(15)); // outputs 15\n</code></pre>\n\n<p>Edit:\nmore interesting example with closures:</p>\n\n<pre><code>a = function(c) {\n return function b(i){\n  if (i&gt;c) {\n   return i;\n  }\n  return b(++i);\n }\n}\nd = a(5);\nconsole.log(d(3)); // outputs 6\nconsole.log(d(8)); // outputs 8\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>What is the difference between the following lines of code:</p>\n\n<pre><code>//Function declaration\nfunction foo() { return 5; }\n\n//Anonymous function expression\nvar foo = function() { return 5; }\n\n//Named function expression\nvar foo = function foo() { return 5; }\n</code></pre>\n\n<p>What is named/anonymous function expression?<br>\nWhat is declared function?<br>\nHow do browsers deal with these constructs differently?</p>\n\n<p>What do the responses to a similar question (<a href=\"http://stackoverflow.com/questions/336859/javascript-var-functionname-function-vs-function-functionname\">var functionName = function() {} vs function functionName() {}</a>) not get exactly right?</p>\n",
            "last_activity_date": 1416333666,
            "question_id": 1013385,
            "score": 204,
            "tags": [
                "javascript"
            ],
            "title": "What is the difference between a function expression vs declaration in Javascript?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Simple enough:</p>\n\n<pre><code>for(var propertyName in myObject) {\n   // propertyName is what you want\n   // you can get the value like this: myObject[propertyName]\n}\n</code></pre>\n\n<p>Now, you will not get private variables this way because they are not available.</p>\n\n<hr>\n\n<p>EDIT: <a href=\"http://stackoverflow.com/questions/85992/how-do-i-enumerate-the-properties-of-a-javascript-object#86306\">@bitwiseplatypus</a> is correct that unless you use the <code>hasOwnProperty()</code> method, you will get properties that are inherited - however, I don't know why anyone familiar with object-oriented programming would expect anything less! Typically, someone that brings this up has been subjected to Douglas Crockford's warnings about this, which still confuse me a bit. Again, inheritance is a normal part of OO languages and is therefore part of JavaScript, notwithstanding it being prototypical.</p>\n\n<p>Now, that said, <code>hasOwnProperty()</code> <em>is</em> useful for filtering, but we don't need to sound a warning as if there is something dangerous in getting inherited properties.</p>\n\n<p>EDIT 2: <a href=\"http://stackoverflow.com/questions/85992/how-do-i-enumerate-the-properties-of-a-javascript-object#86306\">@bitwiseplatypus</a> brings up the situation that would occur should someone add properties/methods to your objects at a point in time later than when you originally wrote your objects (via its prototype) - while it is true that this might cause unexpected behavior, I personally don't see that as my problem entirely. Just a matter of opinion. Besides, what if I design things in such a way that I use prototypes during the construction of my objects and yet have code that iterates over the properties of the object and I want all inherited properties? I wouldn't use <code>hasOwnProperty()</code>. Then, let's say, someone adds new properties later. Is that my fault if things behave badly at that point? I don't think so. I think this is why jQuery, as an example, has specified ways of extending how it works (via <code>jQuery.extend</code> and <code>jQuery.fn.extend</code>).</p>\n",
                    "is_accepted": true,
                    "score": 424
                },
                {
                    "body": "<p>I found it... <code>for (property in object) { // do stuff }</code> will list all the properties, and therefore all the globally declared variables on the window object..</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Use a <code>for..in</code> loop to enumerate an object's properties, but be careful. The enumeration will return properties not just of the object being enumerated, but also from the prototypes of any parent objects.</p>\n\n<pre><code>var myObject = {foo: 'bar'};\n\nfor (var name in myObject) {\n  alert(name);\n}\n\n// results in a single alert of 'foo'\n\nObject.prototype.baz = 'quux';\n\nfor (var name in myObject) {\n  alert(name);\n}\n\n// results in two alerts, one for 'foo' and one for 'baz'\n</code></pre>\n\n<p>To avoid including inherited properties in your enumeration, check <code>hasOwnProperty()</code>:</p>\n\n<pre><code>for (var name in myObject) {\n  if (myObject.hasOwnProperty(name)) {\n    alert(name);\n  }\n}\n</code></pre>\n\n<p><strong>Edit:</strong> I disagree with JasonBunting's statement that we don't need to worry about enumerating inherited properties. There <em>is</em> danger in enumerating over inherited properties that you aren't expecting, because it can change the behavior of your code.</p>\n\n<p>It doesn't matter whether this problem exists in other languages; the fact is it exists, and JavaScript is particularly vulnerable since modifications to an object's prototype affects child objects even if the modification takes place after instantiation.</p>\n\n<p>This is why JavaScript provides <code>hasOwnProperty()</code>, and this is why you should use it in order to ensure that third party code (or any other code that might modify a prototype) doesn't break yours. Apart from adding a few extra bytes of code, there is no downside to using <code>hasOwnProperty()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 134
                },
                {
                    "body": "<p>If you're trying to enumerate the properties in order to write new code against the object, I would recommend using a debugger like Firebug to see them visually. </p>\n\n<p>Another handy technique is to use Prototype's Object.toJSON() to serialize the object to JSON, which will show you both property names and values. </p>\n\n<pre><code>var data = {name: 'Violet', occupation: 'character', age: 25, pets: ['frog', 'rabbit']};\nObject.toJSON(data);\n//-&gt; '{\"name\": \"Violet\", \"occupation\": \"character\", \"age\": 25, \"pets\": [\"frog\",\"rabbit\"]}'\n</code></pre>\n\n<p><a href=\"http://www.prototypejs.org/api/object/tojson\" rel=\"nofollow\">http://www.prototypejs.org/api/object/tojson</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>for (prop in obj) {\n    alert(prop + ' = ' + obj[prop]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I think an example of the case that has caught me by surprise is relevant:</p>\n\n<pre><code>  var myObject = { name: \"Cody\", status: \"Surprised\" };\n  for (var propertyName in myObject) {\n    document.writeln( propertyName + \" : \" + myObject[propertyName] );\n  }\n</code></pre>\n\n<p>But to my surprise, the output is</p>\n\n<pre><code>  name : Cody\n  status : Surprised\n  forEach : function (obj, callback) {\n      for (prop in obj) {\n          if (obj.hasOwnProperty(prop) &amp;&amp; typeof obj[prop] !== \"function\") {\n              callback(prop);\n          }\n      }\n  }\n</code></pre>\n\n<p>Why? Another script on the page has extended the Object prototype:</p>\n\n<pre><code>  Object.prototype.forEach = function (obj, callback) {\n    for ( prop in obj ) {\n      if ( obj.hasOwnProperty( prop ) &amp;&amp; typeof obj[prop] !== \"function\" ) {\n        callback( prop );\n      }\n    }\n  };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The standard way, which has already been proposed several times is:</p>\n\n<pre><code>for (var name in myObject) {\n  alert(name);\n}\n</code></pre>\n\n<p>However Internet Explorer 6, 7 and 8 have a bug in the JavaScript interpreter, which has the effect that some keys are not enumerated. If you run this code:</p>\n\n<pre><code>var obj = { toString: 12};\nfor (var name in obj) {\n  alert(name);\n}\n</code></pre>\n\n<p>If will alert \"12\" in all browsers except IE. IE will simply ignore this key. The affected key values are:</p>\n\n<ul>\n<li><code>isPrototypeOf</code></li>\n<li><code>hasOwnProperty</code></li>\n<li><code>toLocaleString</code></li>\n<li><code>toString</code></li>\n<li><code>valueOf</code></li>\n</ul>\n\n<p>To be really safe in IE you have to use something like:</p>\n\n<pre><code>for (var key in myObject) {\n  alert(key);\n}\n\nvar shadowedKeys = [\n  \"isPrototypeOf\",\n  \"hasOwnProperty\",\n  \"toLocaleString\",\n  \"toString\",\n  \"valueOf\"\n];\nfor (var i=0, a=shadowedKeys, l=a.length; i&lt;l; i++) {\n  if map.hasOwnProperty(a[i])) {\n    alert(a[i]);\n  }\n}\n</code></pre>\n\n<p>The good news is that EcmaScript 5 defines the <code>Object.keys(myObject)</code> function, which returns the keys of an object as array and some browsers (e.g. Safari 4) already implement it.</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>simple javascript:</p>\n\n<pre><code>for(var propertyName in myObject) {\n   // propertyName is what you want\n   // you can get the value like this: myObject[propertyName]\n}\n</code></pre>\n\n<p>jquery:</p>\n\n<pre><code>jQuery.each(obj, function(key, value) {\n   // key is what you want\n   // value is in: value\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you are using the Underscore library, you can use function <a href=\"http://underscorejs.org/#keys\" rel=\"nofollow\" title=\"keys\">keys</a>:</p>\n\n<pre><code>_.keys({one : 1, two : 2, three : 3});\n=&gt; [\"one\", \"two\", \"three\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>here's how to enumerate an object's properties :</p>\n\n<pre><code>var params = { name: 'myname', age: 'myage' }\n\nfor (var key in params) {\n  alert(key + \"=\" + params[key]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In modern browsers (ECMAScript 5) to get all enumerable properties you can do:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">Object.keys(obj)</a>\n(Check the link to get a snippet for backward compatibility on older browsers)</p>\n\n<p>Or to get also non-enumerable properties:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\">Object.getOwnPropertyNames(obj)</a></p>\n\n<p><a href=\"http://kangax.github.io/es5-compat-table/\">Check ECMAScript 5 compatibility table</a></p>\n\n<p>Additional info:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Enumerable_attribute\">What is a enumerable attribute?</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Python dict has 'keys' method, that is really useful. I think in javascript we can have something this:</p>\n\n<pre><code>function keys(){\n    var k = [];\n    for(var p in this) {\n        if(this.hasOwnProperty(p))\n            k.push(p);\n    }\n    return k;\n}\nObject.defineProperty(Object.prototype, \"keys\", { value : keys, enumerable:false });\n</code></pre>\n\n<p>EDIT: But the answer of @carlos-ruana works very well. I tested Object.keys(window) and the result is what I expected.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I actually want to list all the defined variables and their values, but I've learned that defining a variable actually creates a property of the window object.</p>\n",
            "last_activity_date": 1384354701,
            "question_id": 85992,
            "score": 319,
            "tags": [
                "javascript",
                "properties"
            ],
            "title": "How do I enumerate the properties of a javascript object?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Please take a look at the sample JS code below:</p>\n\n<pre><code>function readURL(input) {\n\n    if (input.files &amp;&amp; input.files[0]) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n            $('#blah').attr('src', e.target.result);\n        }\n\n        reader.readAsDataURL(input.files[0]);\n    }\n}\n\n$(\"#imgInp\").change(function(){\n    readURL(this);\n});\n</code></pre>\n\n<p>and the associated HTML:</p>\n\n<pre><code>&lt;form id=\"form1\" runat=\"server\"&gt;\n    &lt;input type='file' id=\"imgInp\" /&gt;\n    &lt;img id=\"blah\" src=\"#\" alt=\"your image\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Also, you can <a href=\"http://jsfiddle.net/LvsYc/\">try this sample here</a>.</p>\n",
                    "is_accepted": true,
                    "score": 641
                },
                {
                    "body": "<p>The answer of LeassTaTT works well in \"standard\" browsers like FF and Chrome.\nThe solution for IE exists, but looks different. Here description of cross-browser solution:</p>\n\n<p>In HTML we need two preview elements, img for standard browsers and div for IE</p>\n\n<p>HTML:</p>\n\n<pre><code>        &lt;img id=\"preview\" \n             src=\"\" \n             alt=\"\" \n             style=\"display:none; max-width: 160px; max-height: 120px; border: none;\"/&gt;\n\n        &lt;div id=\"preview_ie\"&gt;\n        &lt;/div&gt;\n</code></pre>\n\n<p>In CSS we specify the following IE specific thing:</p>\n\n<p>CSS:</p>\n\n<pre><code>  #preview_ie {\n    FILTER: progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale)\n  }  \n</code></pre>\n\n<p>In HTML we include the standard and the IE-specific Javascripts:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  {% include \"pic_preview.js\" %}\n&lt;/script&gt;  \n&lt;!--[if gte IE 7]&gt; \n&lt;script type=\"text/javascript\"&gt;\n  {% include \"pic_preview_ie.js\" %}\n&lt;/script&gt;\n</code></pre>\n\n<p></p>\n\n<p>The <code>pic_preview.js</code> is the Javascript from the LeassTaTT's answer. Replace the  <code>$('#blah')</code> whith the <code>$('#preview')</code> and add the <code>$('#preview').show()</code></p>\n\n<p>Now the IE specific Javascript (pic_preview_ie.js):</p>\n\n<pre><code>function readURL(imgFile)\n{    \n    var newPreview = document.getElementById(\"preview_ie\");\n    newPreview.filters.item(\"DXImageTransform.Microsoft.AlphaImageLoader\").src = imgFile.value;\n    newPreview.style.width = \"160px\";\n    newPreview.style.height = \"120px\";\n}    \n</code></pre>\n\n<p>That's is. Works in IE7, IE8, FF and Chrome. Please test in IE9 and report.\nThe idea of IE preview was found here:\n<a href=\"http://forums.asp.net/t/1320559.aspx\">http://forums.asp.net/t/1320559.aspx</a></p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms532969(v=vs.85).aspx\">http://msdn.microsoft.com/en-us/library/ms532969(v=vs.85).aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>How about creating a function that loads the file and fires a custom event. Then attach a listener to the input. This way we have more flexibility to use the file, not just for previewing images. </p>\n\n<pre><code>/**\n * @param {domElement} input - The input element\n * @param {string} typeData - The type of data to be return in the event object. \n */\nfunction loadFileFromInput(input,typeData) {\n    var reader,\n        fileLoadedEvent,\n        files = input.files;\n\n    if (files &amp;&amp; files[0]) {\n        reader = new FileReader();\n\n        reader.onload = function (e) {\n            fileLoadedEvent = new CustomEvent('fileLoaded',{\n                detail:{\n                    data:reader.result,\n                    file:files[0]  \n                },\n                bubbles:true,\n                cancelable:true\n            });\n            input.dispatchEvent(fileLoadedEvent);\n        }\n        switch(typeData) {\n            case 'arraybuffer':\n                reader.readAsArrayBuffer(files[0]);\n                break;\n            case 'dataurl':\n                reader.readAsDataURL(files[0]);\n                break;\n            case 'binarystring':\n                reader.readAsBinaryString(files[0]);\n                break;\n            case 'text':\n                reader.readAsText(files[0]);\n                break;\n        }\n    }\n}\nfunction fileHandler (e) {\n    var data = e.detail.data,\n        fileInfo = e.detail.file;\n\n    img.src = data;\n}\nvar input = document.getElementById('inputId'),\n    img = document.getElementById('imgId');\n\ninput.onchange = function (e) {\n    loadFileFromInput(e.target,'dataurl');\n};\n\ninput.addEventListener('fileLoaded',fileHandler)\n</code></pre>\n\n<p>Probably my code isn't as good as some users but I think you will get the point of it. Here you can see an <a href=\"http://jsfiddle.net/ajorquera/U6S4T/3/\" rel=\"nofollow\">example</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have edited @Ivan's answer to display \"No Preview Available\" image, if it is not an image:</p>\n\n<pre><code>function readURL(input) {\n    var url = input.value;\n    var ext = url.substring(url.lastIndexOf('.') + 1).toLowerCase();\n    if (input.files &amp;&amp; input.files[0]&amp;&amp; (ext == \"gif\" || ext == \"png\" || ext == \"jpeg\" || ext == \"jpg\")) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n            $('.imagepreview').attr('src', e.target.result);\n        }\n\n        reader.readAsDataURL(input.files[0]);\n    }else{\n         $('.imagepreview').attr('src', '/assets/no_preview.png');\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Yes. It is possible.</p>\n\n<p>Html</p>\n\n<pre><code>&lt;input type=\"file\" accept=\"image/*\"  onchange=\"showMyImage(this)\" /&gt;\n &lt;br/&gt;\n&lt;img id=\"thumbnil\" style=\"width:20%; margin-top:10px;\"  src=\"\" alt=\"image\"/&gt;\n</code></pre>\n\n<p>JS</p>\n\n<pre><code> function showMyImage(fileInput) {\n        var files = fileInput.files;\n        for (var i = 0; i &lt; files.length; i++) {           \n            var file = files[i];\n            var imageType = /image.*/;     \n            if (!file.type.match(imageType)) {\n                continue;\n            }           \n            var img=document.getElementById(\"thumbnil\");            \n            img.file = file;    \n            var reader = new FileReader();\n            reader.onload = (function(aImg) { \n                return function(e) { \n                    aImg.src = e.target.result; \n                }; \n            })(img);\n            reader.readAsDataURL(file);\n        }    \n    }\n</code></pre>\n\n<p>You can get <a href=\"http://jsfiddle.net/shadiq_aust/Z8BaX/\" rel=\"nofollow\">Live Demo</a> from here.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a code that uses blob object URLs, which is much more efficient than data URL when loading large images (imagine adding 4M markup to your HTML page !):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;\r\n&lt;/script&gt;\r\n&lt;img id=\"blah\" alt=\"your image\" width=\"100\" height=\"100\" /&gt;\r\n&lt;input type=\"file\" \r\n    onchange=\"$('#blah')[0].src = window.URL.createObjectURL(this.files[0])\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Generated URL will be like:</p>\n\n<pre><code>blob:http%3A//localhost/7514bc74-65d4-4cf0-a0df-3de016824345\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are a couple ways you can do this. The most efficient way would be to use <a href=\"http://www.javascripture.com/URL#createObjectURL\">URL.createObjectURL()</a> on the <a href=\"http://www.javascripture.com/File\">File</a> from your <a href=\"http://www.javascripture.com/HTMLInputElement#files\">&lt;input&gt;</a>.  Pass this URL to <a href=\"http://www.javascripture.com/HTMLImageElement#src\">img.src</a> to tell the browser to load the provided image. </p>\n\n<p>Here's an example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"file\" accept=\"image/*\" onchange=\"loadFile(event)\"&gt;\r\n&lt;img id=\"output\"/&gt;\r\n&lt;script&gt;\r\n  var loadFile = function(event) {\r\n    var output = document.getElementById('output');\r\n    output.src = URL.createObjectURL(event.target.files[0]);\r\n  };\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can also use <a href=\"http://www.javascripture.com/FileReader#readAsDataURL\">FileReader.readAsDataURL()</a> to parse the file from your &lt;input&gt;.  This will create a string in memory containing a base64 representation of the image.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"file\" accept=\"image/*\" onchange=\"loadFile(event)\"&gt;\r\n&lt;img id=\"output\"/&gt;\r\n&lt;script&gt;\r\n  var loadFile = function(event) {\r\n    var reader = new FileReader();\r\n    reader.onload = function(){\r\n      var output = document.getElementById('output');\r\n      output.src = reader.result;\r\n    };\r\n    reader.readAsDataURL(event.target.files[0]);\r\n  };\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>What about this solution?</p>\n\n<p>Just add the data attribute \"data-type=editable\" to an image tag like this:</p>\n\n<pre><code>&lt;img data-type=\"editable\" id=\"companyLogo\" src=\"http://www.coventrywebgraphicdesign.co.uk/wp-content/uploads/logo-here.jpg\" height=\"300px\" width=\"300px\" /&gt;\n</code></pre>\n\n<p>And the script to your project off course...</p>\n\n<pre><code>function init() {\n    $(\"img[data-type=editable]\").each(function (i, e) {\n        var _inputFile = $('&lt;input/&gt;')\n            .attr('type', 'file')\n            .attr('hidden', 'hidden')\n            .attr('onchange', 'readImage()')\n            .attr('data-image-placeholder', e.id);\n\n        $(e.parentElement).append(_inputFile);\n\n        $(e).on(\"click\", _inputFile, triggerClick);\n    });\n}\n\nfunction triggerClick(e) {\n    e.data.click();\n}\n\nElement.prototype.readImage = function () {\n    var _inputFile = this;\n    if (_inputFile &amp;&amp; _inputFile.files &amp;&amp; _inputFile.files[0]) {\n        var _fileReader = new FileReader();\n        _fileReader.onload = function (e) {\n            var _imagePlaceholder = _inputFile.attributes.getNamedItem(\"data-image-placeholder\").value;\n            var _img = $(\"#\" + _imagePlaceholder);\n            _img.attr(\"src\", e.target.result);\n        };\n        _fileReader.readAsDataURL(_inputFile.files[0]);\n    }\n};\n\n// \n// IIFE - Immediately Invoked Function Expression\n// https://stackoverflow.com/questions/18307078/jquery-best-practises-in-case-of-document-ready\n(\n\nfunction (yourcode) {\n    \"use strict\";\n    // The global jQuery object is passed as a parameter\n    yourcode(window.jQuery, window, document);\n}(\n\nfunction ($, window, document) {\n    \"use strict\";\n    // The $ is now locally scoped \n    $(function () {\n        // The DOM is ready!\n        init();\n    });\n\n    // The rest of your code goes here!\n}));\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/rodolphobrock/q8f33f8L/\" rel=\"nofollow\">See demo at JSFiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I want to be able to preview a file (image) before it is uploaded.  The preview action should be executed all in the browser without using Ajax to upload the image.</p>\n\n<p>How can I do this?</p>\n",
            "last_activity_date": 1421135016,
            "question_id": 4459379,
            "score": 352,
            "tags": [
                "javascript",
                "jquery",
                "file-upload"
            ],
            "title": "Preview an image before it is uploaded"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Probably not. </p>\n\n<p>I use the URL rewriting features of <a href=\"http://www.charlesproxy.com/\" rel=\"nofollow\">Charles Proxy</a> to map remote HTTP APIs to URLs that appear to point to my development server when I need to do that kind of thing.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Close chrome (or chromium) and restart with the <code>--disable-web-security</code> argument. I just tested this and verified that I can access the contents of an iframe with src=\"http://google.com\" embedded in a page served from \"localhost\" (tested under chromium 5 / ubuntu). For me the exact command was:</p>\n\n<pre><code>chromium-browser --disable-web-security\n</code></pre>\n\n<p>From the chromium source:</p>\n\n<pre><code>// Don't enforce the same-origin policy. (Used by people testing their sites.)\nconst wchar_t kDisableWebSecurity[] = L\"disable-web-security\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 288
                },
                {
                    "body": "<p>Yep. For OSX, open Terminal and run:</p>\n\n<pre><code>$ open -a Google\\ Chrome --args --disable-web-security\n</code></pre>\n\n<p>For Linux run:</p>\n\n<pre><code>$ google-chrome --disable-web-security\n</code></pre>\n\n<p>Also if you're trying to access local files for dev purposes like AJAX or JSON, you can use this flag too.</p>\n\n<pre><code>-\u2013allow-file-access-from-files\n</code></pre>\n\n<p>For PC go into the command prompt and go into the folder where Chrome.exe is and type</p>\n\n<pre><code>chrome.exe --disable-web-security\n</code></pre>\n\n<p>That should disable the same origin policy and allow you to access local files.</p>\n\n<p><strong>Update:</strong> For Chrome 22+ you will be presented with an error message that says:</p>\n\n<blockquote>\n  <p>You are using an unsupported command-line flag: --disable-web-security. Stability and security will suffer.</p>\n</blockquote>\n\n<p>However you can just ignore that message while developing.</p>\n",
                    "is_accepted": false,
                    "score": 411
                },
                {
                    "body": "<p>For Selenium Webdriver, you can have selenium start Chrome with the appropriate arguments (or \"switches\") in this case.<br/></p>\n\n<pre><code> @driver = Selenium::WebDriver.for(:Chrome, { \n       :detach =&gt; false,\n       :switches =&gt; [\"--disable-web-security\"]\n    })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If you are using Google Chrome on Linux, following command works.</p>\n\n<pre><code>google-chrome  --disable-web-security\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>For Windows... create a Chrome shortcut on your desktop.<br>\nRight-clic > properties > Shortcut<br>\nEdit \"target\" path :  </p>\n\n<pre><code>\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --args --disable-web-security\n</code></pre>\n\n<p>et voil\u00e0 :)</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>For Windows users:</p>\n\n<p>The problem with the solution accepted here, in my opinion is that if you already have Chrome open and try to run this it won't work. </p>\n\n<p>However, when researching this, I came across a post on Super&nbsp;User, <em><a href=\"http://superuser.com/questions/593726/is-it-possible-to-run-chrome-with-and-without-web-security-at-the-same-time\">Is it possible to run Chrome with and without web security at the same time?</a></em>.</p>\n\n<p>Basically, by running the following command (or creating a shortcut with it and opening Chrome through that)</p>\n\n<pre><code>chrome.exe --user-data-dir=\"C:/Chrome dev session\" --disable-web-security\n</code></pre>\n\n<p>you can open a new \"unsecure\" instance of Chrome at the same time as you keep your other \"secure\" browser instances open and working as normal.</p>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>On a Windows PC, use an older version of Chrome and the command will work for all you guys. \nI downgraded my Chrome to 26 version and it worked.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I didn't want to restart Chrome and disable my web security (because I was browsing while developing) and stumbled onto this Chrome extension.</p>\n\n<p><a href=\"https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en\" rel=\"nofollow\">https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en</a></p>\n\n<p>Basically it's a little toggle switch to toggle on and off the Allow-Access-Origin-Control check. Works perfectly for me for what I'm doing.</p>\n\n<p>EDIT: I tried using the just the other day for another project and it stopped working. Uninstalling and reinstalling the extension fixed it (to reset the defaults).</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This Chrome plugin works for me:\n<a href=\"https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi\" rel=\"nofollow\">Allow-Control-Allow-Origin: * - Chrome Web Store</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Seems none of above solutions are actually working. The <strong>--disable-web-security</strong> is no longer supported in recent chrome versions. </p>\n\n<p><strong>Allow-Control-Allow-Origin: * - chrome extension</strong> partially solved the problem. It works only if your request is using GET method and there's no custom HTTP Header. Otherwise, chrome will send OPTIONS http request as pre-flight request. If the server doesn't support CORS, it will response with 404 HTTP status code. The plugin can't modify the response HTTP status code. So chrome will reject this request. There's no way for chrome plugin to modify the response HTTP status code based on current chrome extension API. And you can't do a redirect as well for XHR initiated request.</p>\n\n<p>Not sure why Chrome makes developers life so difficult. It blocks all the possible ways to disable XSS security check even for development use which is totally un-necessary.</p>\n\n<p>After days struggle and research, one solution works perfect for me: to use <strong>corsproxy</strong>. You have two options here: \n1. use corsproxy.com\n2. install corsproxy in local box: <strong>npm install -g corsproxy</strong></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can simply use this chrome extension <a href=\"https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en\" rel=\"nofollow\">Allow-Control-Allow-Origin</a></p>\n\n<p>just click the icon of the extensnion on the top-right corner the turn enable cross-resource sharing to ON of OFF as you want </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a way to disable the <a href=\"https://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a> on Google's <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Chrome</a> browser?</p>\n\n<p>This is strictly for development, not production, use.</p>\n",
            "last_activity_date": 1425550127,
            "question_id": 3102819,
            "score": 327,
            "tags": [
                "javascript",
                "ajax",
                "google-chrome"
            ],
            "title": "Disable same origin policy in Chrome"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>You can use the browser native <a href=\"https://developer.mozilla.org/en/DOM/window.location\">location.search</a> property:</p>\n\n<pre><code>function getParameter(paramName) {\n  var searchString = window.location.search.substring(1),\n      i, val, params = searchString.split(\"&amp;\");\n\n  for (i=0;i&lt;params.length;i++) {\n    val = params[i].split(\"=\");\n    if (val[0] == paramName) {\n      return unescape(val[1]);\n    }\n  }\n  return null;\n}\n</code></pre>\n\n<p>But there are some jQuery plugins that can help you:</p>\n\n<ul>\n<li><a href=\"http://plugins.jquery.com/project/query-object\">query-object</a></li>\n<li><a href=\"http://www.mathias-bank.de/2007/04/21/jquery-plugin-geturlparam-version-2/\">getURLParam</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<pre><code>function getURLParameter(name) {\n    return decodeURI(\n        (RegExp(name + '=' + '(.+?)(&amp;|$)').exec(location.search)||[,null])[1]\n    );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 410
                },
                {
                    "body": "<p>Based on the <a href=\"http://stackoverflow.com/a/1404100/244297\">999's answer</a>: </p>\n\n<pre><code>function getURLParameter(name) {\n    return decodeURIComponent(\n        (location.search.match(RegExp(\"[?|&amp;]\"+name+'=(.+?)(&amp;|$)'))||[,null])[1]\n    );  \n}\n</code></pre>\n\n<p>Changes:</p>\n\n<ul>\n<li><code>decodeURI()</code> is replaced with <code>decodeURIComponent()</code></li>\n<li><code>[?|&amp;]</code> is added at the beginning of the regexp</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<pre><code>function getURLParameters(paramName) \n{\n        var sURL = window.document.URL.toString();  \n    if (sURL.indexOf(\"?\") &gt; 0)\n    {\n       var arrParams = sURL.split(\"?\");         \n       var arrURLParams = arrParams[1].split(\"&amp;\");      \n       var arrParamNames = new Array(arrURLParams.length);\n       var arrParamValues = new Array(arrURLParams.length);     \n       var i = 0;\n       for (i=0;i&lt;arrURLParams.length;i++)\n       {\n        var sParam =  arrURLParams[i].split(\"=\");\n        arrParamNames[i] = sParam[0];\n        if (sParam[1] != \"\")\n            arrParamValues[i] = unescape(sParam[1]);\n        else\n            arrParamValues[i] = \"No Value\";\n       }\n\n       for (i=0;i&lt;arrURLParams.length;i++)\n       {\n                if(arrParamNames[i] == paramName){\n            //alert(\"Param:\"+arrParamValues[i]);\n                return arrParamValues[i];\n             }\n       }\n       return \"No Parameters Found\";\n    }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Below is what I have created from the comments here, as well as fixing bugs not mentioned (such as actually returning null, and not 'null'):</p>\n\n<pre><code>function getURLParameter(name) {\n    return decodeURIComponent((new RegExp('[?|&amp;]' + name + '=' + '([^&amp;;]+?)(&amp;|#|;|$)').exec(location.search)||[,\"\"])[1].replace(/\\+/g, '%20'))||null;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 279
                },
                {
                    "body": "<p>If you don't know what the URL parameters will be and want to get an object with the keys and values that are in the parameters, you can use this:</p>\n\n<pre><code>function getParameters() {\n  var searchString = window.location.search.substring(1),\n      params = searchString.split(\"&amp;\"),\n      hash = {};\n\n  if (searchString == \"\") return {};\n  for (var i = 0; i &lt; params.length; i++) {\n    var val = params[i].split(\"=\");\n    hash[unescape(val[0])] = unescape(val[1]);\n  }\n  return hash;\n}\n</code></pre>\n\n<p>Calling getParameters() with a url like <code>/posts?date=9/10/11&amp;author=nilbus</code> would return:</p>\n\n<pre><code>{\n  date:   '9/10/11',\n  author: 'nilbus'\n}\n</code></pre>\n\n<p>I won't include the code here since it's even farther away from the question, but weareon.net posted a library that allows manipulation of the parameters in the URL too:</p>\n\n<ul>\n<li>Blog post: <a href=\"http://blog.weareon.net/working-with-url-parameters-in-javascript/\">http://blog.weareon.net/working-with-url-parameters-in-javascript/</a></li>\n<li>Code: <a href=\"http://pastebin.ubuntu.com/1163515/\">http://pastebin.ubuntu.com/1163515/</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<pre><code>$.urlParam = function(name){\n  var results = new RegExp('[\\\\?&amp;]' + name + '=([^&amp;#]*)').exec(top.window.location.href); \n  return (results !== null) ? results[1] : 0;\n}\n\n$.urlParam(\"key\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>What you really want is the <a href=\"https://github.com/allmarkedup/jQuery-URL-Parser\">jQuery URL Parser plugin</a>. With this plugin, getting the value of a specific URL parameter (for the current URL) looks like this:</p>\n\n<pre><code>$.url().param('foo');\n</code></pre>\n\n<p>If you want an object with parameter names as keys and parameter values as values, you'd just call <code>param()</code> without an argument, like this:</p>\n\n<pre><code>$.url().param();\n</code></pre>\n\n<p>This library also works with other urls, not just the current one:</p>\n\n<pre><code>$.url('http://allmarkedup.com?sky=blue&amp;grass=green').param();\n$('#myElement').url().param(); // works with elements that have 'src', 'href' or 'action' attributes\n</code></pre>\n\n<p>Since this is an entire URL parsing library, you can also get other information from the URL, like the port specified, or the path, protocol etc:</p>\n\n<pre><code>var url = $.url('http://allmarkedup.com/folder/dir/index.html?item=value');\nurl.attr('protocol'); // returns 'http'\nurl.attr('path'); // returns '/folder/dir/index.html'\n</code></pre>\n\n<p>It has other features as well, check out its <a href=\"https://github.com/allmarkedup/jQuery-URL-Parser\">homepage</a> for more docs and examples.</p>\n\n<p>Instead of writing your own URI parser for this specific purpose that <em>kinda</em> works in <em>most</em> cases, use an actual URI parser. Depending on the answer, code from other answers can return <code>'null'</code> instead of <code>null</code>, doesn't work with empty parameters (<code>?foo=&amp;bar=x</code>), can't parse and return all parameters at once, repeats the work if you repeatedly query the URL for parameters etc. </p>\n\n<p>Use an actual URI parser, don't invent your own.</p>\n\n<p>For those averse to jQuery, there's <a href=\"https://github.com/allmarkedup/jQuery-URL-Parser/tree/no-jquery\">a version of the plugin that's pure JS</a>. </p>\n",
                    "is_accepted": false,
                    "score": 103
                },
                {
                    "body": "<p>I created a simple function to get URL parameter in JavaScript from a URL like this:</p>\n\n<pre><code>.....58e/web/viewer.html?page=*17*&amp;getinfo=33\n\n\nfunction buildLinkb(param) {\n    var val = document.URL;\n    var url = val.substr(val.indexOf(param))  \n    var n=parseInt(url.replace(param+\"=\",\"\"));\n    alert(n+1); \n}\nbuildLinkb(\"page\");\n</code></pre>\n\n<p>OUTPUT: <code>18</code>    </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This may help.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(document).ready(function(){\n        alert(getParameterByName(\"third\"));\n    });\n    function getParameterByName(name){\n        var url     = document.URL,\n            count   = url.indexOf(name);\n            sub     = url.substring(count);\n            amper   = sub.indexOf(\"&amp;\"); \n\n        if(amper == \"-1\"){\n            var param = sub.split(\"=\");\n            return param[1];\n        }else{\n            var param = sub.substr(0,amper).split(\"=\");\n            return param[1];\n        }\n\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Just in case you guys have the url like  localhost/index.xsp?a=1#something and you need to get the param not the hash.</p>\n\n<pre><code>var vars = [], hash, anchor;\nvar q = document.URL.split('?')[1];\nif(q != undefined){\n    q = q.split('&amp;');\n    for(var i = 0; i &lt; q.length; i++){\n        hash = q[i].split('=');\n        anchor = hash[1].split('#');\n        vars.push(anchor[0]);\n        vars[hash[0]] = anchor[0];\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Need to add the i parameter to make it case insensitive:</p>\n\n<pre><code>  function getURLParameter(name) {\n    return decodeURIComponent(\n      (RegExp(name + '=' + '(.+?)(&amp;|$)', 'i').exec(location.search) || [, \"\"])[1]\n    );\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For example , a function which returns value of any parameters variable.</p>\n\n<pre><code>function GetURLParameter(sParam)\n{\n    var sPageURL = window.location.search.substring(1);\n    var sURLVariables = sPageURL.split('&amp;');\n    for (var i = 0; i &lt; sURLVariables.length; i++)\n    {\n        var sParameterName = sURLVariables[i].split('=');\n        if (sParameterName[0] == sParam)\n        {\n            return sParameterName[1];\n        }\n    }\n}\u200b\n</code></pre>\n\n<p>And this is how you can use this function assuming the URL is,</p>\n\n<p><strong>\"http://example.com/?technology=jquery&amp;blog=jquerybyexample\".</strong></p>\n\n<pre><code>var tech = GetURLParameter('technology');\nvar blog = GetURLParameter('blog');\n</code></pre>\n\n<p>So in above code variable \"tech\" will have \"jQuery\" as value and \"blog\" variable's will be \"jquerybyexample\".</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>After reading all of the answers I ended up with this version with + a second function to use parameters as flags</p>\n\n<pre><code>function getURLParameter(name) {\n    return decodeURIComponent((new RegExp('[?|&amp;]' + name + '=' + '([^&amp;;]+?)(&amp;|#|;|$)','i').exec(location.search)||[,\"\"])[1].replace(/\\+/g, '%20'))||null;\n}\n\nfunction isSetURLParameter(name) {\n    return (new RegExp('[?|&amp;]' + name + '(?:[=|&amp;|#|;|]|$)','i').exec(location.search) !== null)\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's a lot of buggy code here and regex solutions are very slow. I found a solution that works up to 20x faster than the regex counterpart and is elegantly simple:</p>\n\n<pre><code>    /*\n    *   @param      string      parameter to return the value of.\n    *   @return     string      value of chosen parameter, if found.\n    */\n    function get_param(return_this)\n    {\n        return_this = return_this.replace(/\\?/ig, \"\").replace(/=/ig, \"\"); // Globally replace illegal chars.\n\n        var url = window.location.href;                                   // Get the URL.\n        var parameters = url.substring(url.indexOf(\"?\") + 1).split(\"&amp;\");  // Split by \"param=value\".\n        var params = [];                                                  // Array to store individual values.\n\n        for(var i = 0; i &lt; parameters.length; i++)\n            if(parameters[i].search(return_this + \"=\") != -1)\n                return parameters[i].substring(parameters[i].indexOf(\"=\") + 1).split(\"+\");\n\n        return \"Parameter not found\";\n    }\n\nconsole.log(get_param(\"parameterName\"));\n</code></pre>\n\n<p>Regex is not the be-all and end-all solution, for this type of problem simple string manipulation can work a huge amount more efficiently. <a href=\"http://www.texodigital.com/blog/JavaScript/javascript-url-parameters\" rel=\"nofollow\">Code source</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Slight modification to the answer by @pauloppenheim , as it will not properly handle parameter names which can be a part of other parameter names.</p>\n\n<p>Eg: If you have \"appenv\" &amp; \"env\" parameters, redeaing the value for \"env\" can pick-up \"appenv\" value.</p>\n\n<p>Fix:</p>\n\n<pre><code>var urlParamVal = function (name) {\n    var result = RegExp(\"(&amp;|\\\\?)\" + name + \"=(.+?)(&amp;|$)\").exec(location.search);\n    return result ? decodeURIComponent(result[2]) : \"\";\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction getURLParameter(name) {\n        return decodeURIComponent(\n            (location.search.toLowerCase().match(RegExp(\"[?|&amp;]\" + name + '=(.+?)(&amp;|$)')) || [, null])[1]\n        );\n    }\n\n&lt;/script&gt;\n</code></pre>\n\n<p><code>getURLParameter(id)</code> or <code>getURLParameter(Id)</code> Works the same : )</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>You should not use jQuery for something like this!</strong><br>\nThe modern way is to use small reusable modules through a package-manager like Bower.</p>\n\n<p>I've created a tiny <a href=\"https://github.com/sindresorhus/query-string\" rel=\"nofollow\">module</a> that can parse the query string into an object. Use it like this:</p>\n\n<pre><code>// parse the query string into an object and get the property\nqueryString.parse(unescape(location.search)).search;\n//=&gt; \u00e6\u00f8\u00e5\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 2
                },
                {
                    "body": "<p>jQuery code snippet to get the dynamic variables stored in the url as parameters and store them as JavaScript variables ready for use with your scripts:</p>\n\n<pre><code>$.urlParam = function(name){\n    var results = new RegExp('[\\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);\n    if (results==null){\n       return null;\n    }\n    else{\n       return results[1] || 0;\n    }\n}\n\nexample.com?param1=name&amp;param2=&amp;id=6\n\n$.urlParam('param1'); // name\n$.urlParam('id');        // 6\n$.urlParam('param2');   // null\n\n//example params with spaces\nhttp://www.jquery4u.com?city=Gold Coast\nconsole.log($.urlParam('city'));  \n//output: Gold%20Coast\n\nconsole.log(decodeURIComponent($.urlParam('city'))); \n//output: Gold Coast\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I'm looking for a jQuery plugin that can get URL parameters, and support this search string without outputting the JavaScript error: \"malformed URI sequence\". If there isn't a jQuery plugin that supports this, I need to know how to modify it to support this.</p>\n\n<pre><code>?search=%E6%F8%E5\n</code></pre>\n\n<p>The value of the URL parameter, when decoded, should be:</p>\n\n<pre><code>\u00e6\u00f8\u00e5\n</code></pre>\n\n<p>(the characters are Norwegian).</p>\n\n<p>I don't have access to the server, so I can't modify anything on it.</p>\n",
            "last_activity_date": 1408351732,
            "question_id": 1403888,
            "score": 275,
            "tags": [
                "javascript",
                "url",
                "query-string",
                "url-parameters"
            ],
            "title": "Get escaped URL parameter"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Certainly not the only way - you could prototype a method (against Object here but I certainly wouldn't suggest using Object for live code) to replicate C#/Java style comparison methods.</p>\n\n<p>Edit, since a general example seems to be expected:</p>\n\n<pre><code>Object.prototype.equals = function(x)\n{\n    for(p in this)\n    {\n    \tswitch(typeof(this[p]))\n    \t{\n    \t\tcase 'object':\n    \t\t\tif (!this[p].equals(x[p])) { return false }; break;\n    \t\tcase 'function':\n    \t\t\tif (typeof(x[p])=='undefined' || (p != 'equals' &amp;&amp; this[p].toString() != x[p].toString())) { return false; }; break;\n    \t\tdefault:\n    \t\t\tif (this[p] != x[p]) { return false; }\n    \t}\n    }\n\n    for(p in x)\n    {\n    \tif(typeof(this[p])=='undefined') {return false;}\n    }\n\n    return true;\n}\n</code></pre>\n\n<p>Note that testing methods with toString() is <em>absolutely not good enough</em> but a method which would be acceptable is very hard because of the problem of whitespace having meaning or not, never mind synonym methods and methods producing the same result with different implementations. <em>And</em> the problems of prototyping against Object in general.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>if you want to check for methods explicitly you can use the method.toSource() or method.toString() methods.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Unfortunately there is no perfect way, unless you use <code>_proto_</code> recursively and access all non-enumerable properties, but this works in Firefox only.</p>\n\n<p>So the best I can do is to guess usage scenarios.</p>\n\n<hr>\n\n<h2><strong>1) Fast and limited.</strong></h2>\n\n<p>Works when you have simple JSON-style objects without methods and DOM nodes inside:</p>\n\n<pre><code> JSON.stringify(obj1) === JSON.stringify(obj2) \n</code></pre>\n\n<p>The ORDER of the properties IS IMPORTANT, so this method will return false for following objects:</p>\n\n<pre><code> x = {a: 1, b: 2};\n y = {b: 2, a: 1};\n</code></pre>\n\n<hr>\n\n<h2><strong>2) Slow and more generic.</strong></h2>\n\n<p>Compares objects without digging into prototypes, then compares properties' projections recursively, and also compares constructors.</p>\n\n<p>This is almost correct algorithm:</p>\n\n<pre><code>function deepCompare () {\n  var i, l, leftChain, rightChain;\n\n  function compare2Objects (x, y) {\n    var p;\n\n    // remember that NaN === NaN returns false\n    // and isNaN(undefined) returns true\n    if (isNaN(x) &amp;&amp; isNaN(y) &amp;&amp; typeof x === 'number' &amp;&amp; typeof y === 'number') {\n         return true;\n    }\n\n    // Compare primitives and functions.     \n    // Check if both arguments link to the same object.\n    // Especially useful on step when comparing prototypes\n    if (x === y) {\n        return true;\n    }\n\n    // Works in case when functions are created in constructor.\n    // Comparing dates is a common scenario. Another built-ins?\n    // We can even handle functions passed across iframes\n    if ((typeof x === 'function' &amp;&amp; typeof y === 'function') ||\n       (x instanceof Date &amp;&amp; y instanceof Date) ||\n       (x instanceof RegExp &amp;&amp; y instanceof RegExp) ||\n       (x instanceof String &amp;&amp; y instanceof String) ||\n       (x instanceof Number &amp;&amp; y instanceof Number)) {\n        return x.toString() === y.toString();\n    }\n\n    // At last checking prototypes as good a we can\n    if (!(x instanceof Object &amp;&amp; y instanceof Object)) {\n        return false;\n    }\n\n    if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {\n        return false;\n    }\n\n    if (x.constructor !== y.constructor) {\n        return false;\n    }\n\n    if (x.prototype !== y.prototype) {\n        return false;\n    }\n\n    // Check for infinitive linking loops\n    if (leftChain.indexOf(x) &gt; -1 || rightChain.indexOf(y) &gt; -1) {\n         return false;\n    }\n\n    // Quick checking of one object beeing a subset of another.\n    // todo: cache the structure of arguments[0] for performance\n    for (p in y) {\n        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n            return false;\n        }\n        else if (typeof y[p] !== typeof x[p]) {\n            return false;\n        }\n    }\n\n    for (p in x) {\n        if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n            return false;\n        }\n        else if (typeof y[p] !== typeof x[p]) {\n            return false;\n        }\n\n        switch (typeof (x[p])) {\n            case 'object':\n            case 'function':\n\n                leftChain.push(x);\n                rightChain.push(y);\n\n                if (!compare2Objects (x[p], y[p])) {\n                    return false;\n                }\n\n                leftChain.pop();\n                rightChain.pop();\n                break;\n\n            default:\n                if (x[p] !== y[p]) {\n                    return false;\n                }\n                break;\n        }\n    }\n\n    return true;\n  }\n\n  if (arguments.length &lt; 1) {\n    return true; //Die silently? Don't know how to handle such case, please help...\n    // throw \"Need two or more arguments to compare\";\n  }\n\n  for (i = 1, l = arguments.length; i &lt; l; i++) {\n\n      leftChain = []; //Todo: this can be cached\n      rightChain = [];\n\n      if (!compare2Objects(arguments[0], arguments[i])) {\n          return false;\n      }\n  }\n\n  return true;\n}\n</code></pre>\n\n<p>Known issues (well, they have very low priority, probably you'll never notice them):</p>\n\n<ul>\n<li>objects with different prototype structure but same projection</li>\n<li>functions may have identical text but refer to different closures</li>\n</ul>\n\n<p><strong>Tests:</strong> passes tests are from <em><a href=\"http://stackoverflow.com/a/16788517/139361\">How to determine equality for two JavaScript objects?</a></em>.</p>\n",
                    "is_accepted": true,
                    "score": 273
                },
                {
                    "body": "<p>If you work without the JSON library, maybe this will help you out:</p>\n\n<pre><code>Object.prototype.equals = function(b) {\n    var a = this;\n    for(i in a) {\n        if(typeof b[i] == 'undefined') {\n            return false;\n        }\n        if(typeof b[i] == 'object') {\n            if(!b[i].equals(a[i])) {\n                return false;\n            }\n        }\n        if(b[i] != a[i]) {\n            return false;\n        }\n    }\n    for(i in b) {\n        if(typeof a[i] == 'undefined') {\n            return false;\n        }\n        if(typeof a[i] == 'object') {\n            if(!a[i].equals(b[i])) {\n                return false;\n            }\n        }\n        if(a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvar a = {foo:'bar', bar: {blub:'bla'}};\nvar b = {foo:'bar', bar: {blub:'blob'}};\nalert(a.equals(b)); // alert's a false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I have modified a bit the code above. for me <em>0 !== false</em> and <em>null !== undefined</em>. If you do not need such strict check remove one \"<em>=</em>\" sign in \"<em>this[p] !== x[p]</em>\" inside the code.</p>\n\n<pre><code>Object.prototype.equals = function(x){\n    for (var p in this) {\n        if(typeof(this[p]) !== typeof(x[p])) return false;\n        if((this[p]===null) !== (x[p]===null)) return false;\n        switch (typeof(this[p])) {\n            case 'undefined':\n                if (typeof(x[p]) != 'undefined') return false;\n                break;\n            case 'object':\n                if(this[p]!==null &amp;&amp; x[p]!==null &amp;&amp; (this[p].constructor.toString() !== x[p].constructor.toString() || !this[p].equals(x[p]))) return false;\n                break;\n            case 'function':\n                if (p != 'equals' &amp;&amp; this[p].toString() != x[p].toString()) return false;\n                break;\n            default:\n                if (this[p] !== x[p]) return false;\n        }\n    }\n    return true;\n}\n</code></pre>\n\n<p>Then I have tested it with next objects:</p>\n\n<pre><code>var a = {a: 'text', b:[0,1]};\nvar b = {a: 'text', b:[0,1]};\nvar c = {a: 'text', b: 0};\nvar d = {a: 'text', b: false};\nvar e = {a: 'text', b:[1,0]};\nvar f = {a: 'text', b:[1,0], f: function(){ this.f = this.b; }};\nvar g = {a: 'text', b:[1,0], f: function(){ this.f = this.b; }};\nvar h = {a: 'text', b:[1,0], f: function(){ this.a = this.b; }};\nvar i = {\n    a: 'text',\n    c: {\n        b: [1, 0],\n        f: function(){\n            this.a = this.b;\n        }\n    }\n};\nvar j = {\n    a: 'text',\n    c: {\n        b: [1, 0],\n        f: function(){\n            this.a = this.b;\n        }\n    }\n};\nvar k = {a: 'text', b: null};\nvar l = {a: 'text', b: undefined};\n</code></pre>\n\n<p>a==b expected true; returned true</p>\n\n<p>a==c expected false; returned false</p>\n\n<p>c==d expected false; returned false</p>\n\n<p>a==e expected false; returned false</p>\n\n<p>f==g expected true; returned true</p>\n\n<p>h==g expected false; returned false</p>\n\n<p>i==j expected true; returned true</p>\n\n<p>d==k expected false; returned false</p>\n\n<p>k==l expected false; returned false</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wrote this piece of code for object comparison, and it seems to work. check the assertions:</p>\n\n<pre><code>\nfunction countProps(obj) {\n    var count = 0;\n    for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nfunction objectEquals(v1, v2) {\n\n    if (typeof(v1) !== typeof(v2)) {\n        return false;\n    }\n\n    if (typeof(v1) === \"function\") {\n        return v1.toString() === v2.toString();\n    }\n\n    if (v1 instanceof Object && v2 instanceof Object) {\n        if (countProps(v1) !== countProps(v2)) {\n            return false;\n        }\n        var r = true;\n        for (k in v1) {\n            r = objectEquals(v1[k], v2[k]);\n            if (!r) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return v1 === v2;\n    }\n}\n\nassert.isTrue(objectEquals(null,null));\nassert.isFalse(objectEquals(null,undefined));\n\nassert.isTrue(objectEquals(\"hi\",\"hi\"));\nassert.isTrue(objectEquals(5,5));\nassert.isFalse(objectEquals(5,10));\n\nassert.isTrue(objectEquals([],[]));\nassert.isTrue(objectEquals([1,2],[1,2]));\nassert.isFalse(objectEquals([1,2],[2,1]));\nassert.isFalse(objectEquals([1,2],[1,2,3]));\n\nassert.isTrue(objectEquals({},{}));\nassert.isTrue(objectEquals({a:1,b:2},{a:1,b:2}));\nassert.isTrue(objectEquals({a:1,b:2},{b:2,a:1}));\nassert.isFalse(objectEquals({a:1,b:2},{a:1,b:3}));\n\nassert.isTrue(objectEquals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}},{1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}));\nassert.isFalse(objectEquals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}},{1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:27}}));\n\nassert.isTrue(objectEquals(function(x){return x;},function(x){return x;}));\nassert.isFalse(objectEquals(function(x){return x;},function(y){return y+2;}));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is my version, pretty much stuff from this thread is integrated (same counts for the test cases):</p>\n\n<pre><code>Object.defineProperty(Object.prototype, \"equals\", {\n    enumerable: false,\n    value: function (obj) {\n        var p;\n        if (this === obj) {\n            return true;\n        }\n\n        // some checks for native types first\n\n        // function and sring\n        if (typeof(this) === \"function\" || typeof(this) === \"string\" || this instanceof String) { \n            return this.toString() === obj.toString();\n        }\n\n        // number\n        if (this instanceof Number || typeof(this) === \"number\") {\n            if (obj instanceof Number || typeof(obj) === \"number\") {\n                return this.valueOf() === obj.valueOf();\n            }\n            return false;\n        }\n\n        // null.equals(null) and undefined.equals(undefined) do not inherit from the \n        // Object.prototype so we can return false when they are passed as obj\n        if (typeof(this) !== typeof(obj) || obj === null || typeof(obj) === \"undefined\") {\n            return false;\n        }\n\n        function sort (o) {\n            var result = {};\n\n            if (typeof o !== \"object\") {\n                return o;\n            }\n\n            Object.keys(o).sort().forEach(function (key) {\n                result[key] = sort(o[key]);\n            });\n\n            return result;\n        }\n\n        if (typeof(this) === \"object\") {\n            if (Array.isArray(this)) { // check on arrays\n                return JSON.stringify(this) === JSON.stringify(obj);                \n            } else { // anyway objects\n                for (p in this) {\n                    if (typeof(this[p]) !== typeof(obj[p])) {\n                        return false;\n                    }\n                    if ((this[p] === null) !== (obj[p] === null)) {\n                        return false;\n                    }\n                    switch (typeof(this[p])) {\n                    case 'undefined':\n                        if (typeof(obj[p]) !== 'undefined') {\n                            return false;\n                        }\n                        break;\n                    case 'object':\n                        if (this[p] !== null \n                                &amp;&amp; obj[p] !== null \n                                &amp;&amp; (this[p].constructor.toString() !== obj[p].constructor.toString() \n                                        || !this[p].equals(obj[p]))) {\n                            return false;\n                        }\n                        break;\n                    case 'function':\n                        if (this[p].toString() !== obj[p].toString()) {\n                            return false;\n                        }\n                        break;\n                    default:\n                        if (this[p] !== obj[p]) {\n                            return false;\n                        }\n                    }\n                };\n\n            }\n        }\n\n        // at least check them with JSON\n        return JSON.stringify(sort(this)) === JSON.stringify(sort(obj));\n    }\n});\n</code></pre>\n\n<p>Here is my TestCase:</p>\n\n<pre><code>    assertFalse({}.equals(null));\n    assertFalse({}.equals(undefined));\n\n    assertTrue(\"String\", \"hi\".equals(\"hi\"));\n    assertTrue(\"Number\", new Number(5).equals(5));\n    assertFalse(\"Number\", new Number(5).equals(10));\n    assertFalse(\"Number+String\", new Number(1).equals(\"1\"));\n\n    assertTrue([].equals([]));\n    assertTrue([1,2].equals([1,2]));\n    assertFalse([1,2].equals([2,1]));\n    assertFalse([1,2].equals([1,2,3]));\n\n    assertTrue(new Date(\"2011-03-31\").equals(new Date(\"2011-03-31\")));\n    assertFalse(new Date(\"2011-03-31\").equals(new Date(\"1970-01-01\")));\n\n    assertTrue({}.equals({}));\n    assertTrue({a:1,b:2}.equals({a:1,b:2}));\n    assertTrue({a:1,b:2}.equals({b:2,a:1}));\n    assertFalse({a:1,b:2}.equals({a:1,b:3}));\n\n    assertTrue({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}.equals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}));\n    assertFalse({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}.equals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:27}}));\n\n    assertTrue(\"Function\", (function(x){return x;}).equals(function(x){return x;}));\n    assertFalse(\"Function\", (function(x){return x;}).equals(function(y){return y+2;}));\n\n    var a = {a: 'text', b:[0,1]};\n    var b = {a: 'text', b:[0,1]};\n    var c = {a: 'text', b: 0};\n    var d = {a: 'text', b: false};\n    var e = {a: 'text', b:[1,0]};\n    var f = {a: 'text', b:[1,0], f: function(){ this.f = this.b; }};\n    var g = {a: 'text', b:[1,0], f: function(){ this.f = this.b; }};\n    var h = {a: 'text', b:[1,0], f: function(){ this.a = this.b; }};\n    var i = {\n        a: 'text',\n        c: {\n            b: [1, 0],\n            f: function(){\n                this.a = this.b;\n            }\n        }\n    };\n    var j = {\n        a: 'text',\n        c: {\n            b: [1, 0],\n            f: function(){\n                this.a = this.b;\n            }\n        }\n    };\n    var k = {a: 'text', b: null};\n    var l = {a: 'text', b: undefined};\n\n    assertTrue(a.equals(b));\n    assertFalse(a.equals(c));\n    assertFalse(c.equals(d));\n    assertFalse(a.equals(e));\n    assertTrue(f.equals(g));\n    assertFalse(h.equals(g));\n    assertTrue(i.equals(j));\n    assertFalse(d.equals(k));\n    assertFalse(k.equals(l));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>  Utils.compareObjects = function(o1, o2){\n    for(var p in o1){\n        if(o1.hasOwnProperty(p)){\n            if(o1[p] !== o2[p]){\n                return false;\n            }\n        }\n    }\n    for(var p in o2){\n        if(o2.hasOwnProperty(p)){\n            if(o1[p] !== o2[p]){\n                return false;\n            }\n        }\n    }\n    return true;\n};\n</code></pre>\n\n<p>Simple way to compare ONE-LEVEL only objects.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The following algorithm will deal with self-referential data structures, numbers, strings, dates, and of course plain nested javascript objects:</p>\n\n<p>Objects are considered equivalent when</p>\n\n<ul>\n<li>They are exactly equal per <code>===</code> (String and Number are unwrapped first to ensure <code>42</code> is equivalent to <code>Number(42)</code>)</li>\n<li>or they are both dates and have the same <code>valueOf()</code></li>\n<li>or they are both of the same type and not null and...\n<ul>\n<li>they are not objects and are equal per <code>==</code> (catches numbers/strings/booleans)</li>\n<li>or, ignoring properties with <code>undefined</code> value they have the same properties all of which are considered recursively equivalent.</li>\n</ul></li>\n</ul>\n\n<p><strong>Functions</strong> are not considered identical by function text.  This test is insufficient because functions may have differing closures.  Functions are only considered equal if <code>===</code> says so (but you could easily extend that equivalent relation should you choose to do so).</p>\n\n<p><strong>Infinite loops</strong>, potentially caused by circular datastructures, are avoided.  When <code>areEquivalent</code> attempts to disprove equality and recurses into an object's properties to do so, it keeps track of the objects for which this sub-comparison is needed.  If equality can be disproved, then some reachable property path differs between the objects, and then there must be a shortest such reachable path, and that shortest reachable path cannot contain cycles present in both paths; i.e. it is OK to assume equality when recursively comparing objects.  The assumption is stored in a property <code>areEquivalent_Eq_91_2_34</code>, which is deleted after use, but if the object graph already contains such a property, behavior is undefined.  The use of such a marker property is necessary because javascript doesn't support dictionaries using arbitrary objects as keys.</p>\n\n<pre><code>function unwrapStringOrNumber(obj) {\n    return (obj instanceof Number || obj instanceof String \n            ? obj.valueOf() \n            : obj);\n}\nfunction areEquivalent(a, b) {\n    a = unwrapStringOrNumber(a);\n    b = unwrapStringOrNumber(b);\n    if (a === b) return true; //e.g. a and b both null\n    if (a === null || b === null || typeof (a) !== typeof (b)) return false;\n    if (a instanceof Date) \n        return b instanceof Date &amp;&amp; a.valueOf() === b.valueOf();\n    if (typeof (a) !== \"object\") \n        return a == b; //for boolean, number, string, xml\n\n    var newA = (a.areEquivalent_Eq_91_2_34 === undefined),\n        newB = (b.areEquivalent_Eq_91_2_34 === undefined);\n    try {\n        if (newA) a.areEquivalent_Eq_91_2_34 = [];\n        else if (a.areEquivalent_Eq_91_2_34.some(\n            function (other) { return other === b; })) return true;\n        if (newB) b.areEquivalent_Eq_91_2_34 = [];\n        else if (b.areEquivalent_Eq_91_2_34.some(\n            function (other) { return other === a; })) return true;\n        a.areEquivalent_Eq_91_2_34.push(b);\n        b.areEquivalent_Eq_91_2_34.push(a);\n\n        var tmp = {};\n        for (var prop in a) \n            if(prop != \"areEquivalent_Eq_91_2_34\") \n                tmp[prop] = null;\n        for (var prop in b) \n            if (prop != \"areEquivalent_Eq_91_2_34\") \n                tmp[prop] = null;\n\n        for (var prop in tmp) \n            if (!areEquivalent(a[prop], b[prop]))\n                return false;\n        return true;\n    } finally {\n        if (newA) delete a.areEquivalent_Eq_91_2_34;\n        if (newB) delete b.areEquivalent_Eq_91_2_34;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is my commented solution (gory details after the code):</p>\n\n<pre><code>Object.equals = function( x, y ) {\n  if ( x === y ) return true;\n    // if both x and y are null or undefined and exactly the same\n\n  if ( ! ( x instanceof Object ) || ! ( y instanceof Object ) ) return false;\n    // if they are not strictly equal, they both need to be Objects\n\n  if ( x.constructor !== y.constructor ) return false;\n    // they must have the exact same prototype chain, the closest we can do is\n    // test there constructor.\n\n  for ( var p in x ) {\n    if ( ! x.hasOwnProperty( p ) ) continue;\n      // other properties were tested using x.constructor === y.constructor\n\n    if ( ! y.hasOwnProperty( p ) ) return false;\n      // allows to compare x[ p ] and y[ p ] when set to undefined\n\n    if ( x[ p ] === y[ p ] ) continue;\n      // if they have the same strict value or identity then they are equal\n\n    if ( typeof( x[ p ] ) !== \"object\" ) return false;\n      // Numbers, Strings, Functions, Booleans must be strictly equal\n\n    if ( ! Object.equals( x[ p ],  y[ p ] ) ) return false;\n      // Objects and Arrays must be tested recursively\n  }\n\n  for ( p in y ) {\n    if ( y.hasOwnProperty( p ) &amp;&amp; ! x.hasOwnProperty( p ) ) return false;\n      // allows x[ p ] to be set to undefined\n  }\n  return true;\n}\n</code></pre>\n\n<p>In developing this solution, I took a particular look at corner cases, efficiency, yet trying to yield a simple solution that works, hopefully with some elegance. JavaScript allows both <strong><em>null</em></strong> and <strong><em>undefined</em></strong> properties and objects have <strong><em>prototypes chains</em></strong> that can lead to very different behaviors if not checked.</p>\n\n<p>First I have chosen to extend <strong><em>Object</em></strong> instead of <strong><em>Object.prototype</em></strong>, mostly because <strong><em>null</em></strong> could not be one of the objects of the comparison and that I believe that <strong><em>null</em></strong> should be a valid object to compare with another. There are also other legitimate concerns noted by others regarding the extension of <strong><em>Object.prototype</em></strong> regarding possible side effects on other's code.</p>\n\n<p>Special care must taken to deal the possibility that JavaScript allows object properties can be set to <strong><em>undefined</em></strong>, i.e. there exists properties which values are set to <strong><em>undefined</em></strong>. The above solution verifies that both objects have the same properties set to <strong><em>undefined</em></strong> to report equality. This can only be accomplished by checking the existence of properties using <strong><em>Object.hasOwnProperty( property_name )</em></strong>. Also note that <strong><em>JSON.stringify()</em></strong> removes properties that are set to <strong><em>undefined</em></strong>, and that therefore comparisons using this form will ignore properties set to the value <strong><em>undefined</em></strong>. </p>\n\n<p>Functions should be considered equal only if they share the same reference, not just the same code, because this would not take into account these functions prototype. So comparing the code string does not work to guaranty that they have the same prototype object.</p>\n\n<p>The two objects should have the same <strong><em>prototype chain</em></strong>, not just the same properties. This can only be tested cross-browser by comparing the <strong><em>constructor</em></strong> of both objects for strict equality. ECMAScript 5 would allow to test their actual prototype using <strong><em>Object.getPrototypeOf()</em></strong>. Some web browsers also offer a <strong>__proto__</strong> property that does the same thing. A possible improvement of the above code would allow to use one of these methods whenever available.</p>\n\n<p>The use of strict comparisons is paramount here because <strong><em>2</em></strong> should not be considered equal to <strong><em>\"2.0000\"</em></strong>, nor <strong><em>false</em></strong> should be considered equal to <strong><em>null</em></strong>, <strong><em>undefined</em></strong>, or <strong><em>0</em></strong>.</p>\n\n<p>Efficiency considerations lead me to compare for equality of properties as soon as possible. Then, only if that failed, look for the <strong><em>typeof</em></strong> these properties. The speed boost could be significant on large objects with lots of scalar properties.</p>\n\n<p>No more that two loops are required, the first to check properties from the left object, the second to check properties from the right and verify only existence (not value), to catch these properties which are defined with the <strong><em>undefined</em></strong> value.</p>\n\n<p>Overall this code handles most corner cases in only 16 lines of code (without comments).</p>\n",
                    "is_accepted": false,
                    "score": 63
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/201183/how-do-you-determine-equality-for-two-javascript-objects\">How do you determine equality for two JavaScript objects?</a>  </p>\n</blockquote>\n\n\n\n<p>What is the best way to compare Objects in JavaScript?</p>\n\n<p>Example:</p>\n\n<pre><code>var user1 = {name : \"nerd\", org: \"dev\"};\nvar user2 = {name : \"nerd\", org: \"dev\"};\nvar eq = user1 == user2;\nalert(eq); // gives false\n</code></pre>\n\n<p>I know that \"Two objects are equal if they refer to the exact same Object\", but is there a way to check it another way??</p>\n\n<p>Using this way works for me.....but is it the only possibility?</p>\n\n<pre><code>var eq = Object.toJSON(user1) == Object.toJSON(user2);\nalert(eq); // gives true\n</code></pre>\n",
            "last_activity_date": 1407601366,
            "question_id": 1068834,
            "score": 266,
            "tags": [
                "javascript",
                "object",
                "comparison",
                "object-comparison"
            ],
            "title": "Object comparison in JavaScript"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<ol>\n<li>Create an iFrame, </li>\n<li>put a form in it with Hidden inputs, </li>\n<li>set the form's action to the URL, </li>\n<li>Add iframe to document</li>\n<li>submit the form</li>\n</ol>\n\n<p>Pseudocode</p>\n\n<pre><code> var ifr = document.createElement('iframe');\n var frm = document.createElement('form');\n frm.setAttribute(\"action\", \"yoururl\");\n frm.setAttribute(\"method\", \"post\");\n\n // create hidden inputs, add them\n // not shown, but similar (create, setAttribute, appendChild)\n\n ifr.appendChild(frm);\n document.body.appendChild(ifr);\n frm.submit();\n</code></pre>\n\n<p>You probably want to style the iframe, to be hidden and absolutely positioned.  Not sure cross site posting will be allowed by the browser, but if so, this is how to do it.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>High level.... You need to have a cname setup on your server so that other-serve.your-server.com points to other-server.com.</p>\n\n<p>Your page dynamically creates an invisible iframe, which acts as your transport to other-server.com.  You then have to communicate via JS from your page to the other-server.com and have call backs that return the data back to your page.  </p>\n\n<p>Possible but requires coordination from your-server.com and other-server.com</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Check the <code>post_method</code> function in <a href=\"http://taiyolab.com/mbtweet/scripts/twitterapi_call.js\">http://taiyolab.com/mbtweet/scripts/twitterapi_call.js</a> - a good example for the iframe method described above.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<ol>\n<li><p>Create two hidden iframes (add \"display: none;\" to the css style). Make your second iframe point to something on your own domain.</p></li>\n<li><p>Create a hidden form, set its method to \"post\" with target = your first iframe, and optionally set enctype to \"multipart/form-data\" (I'm thinking you want to do POST because you want to send multipart data like pictures?)</p></li>\n<li><p>When ready, make the form submit() the POST.</p></li>\n<li><p>If you can get the other domain to return javascript that will do Cross-Domain Communication With Iframes (http://softwareas.com/cross-domain-communication-with-iframes) then you are in luck, and you can capture the response as well. </p></li>\n</ol>\n\n<p>Of course, if you want to use your server as a proxy, you can avoid all this. Simply submit the form to your own server, which will proxy the request to the other server (assuming the other server isn't set up to notice IP discrepancies), get the response, and return whatever you like.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Should be possible with a YQL custom table + JS XHR, take a look at:\n<a href=\"http://developer.yahoo.com/yql/guide/index.html\" rel=\"nofollow\">http://developer.yahoo.com/yql/guide/index.html</a></p>\n\n<p>I use it to do some client side (js) html scraping, works fine \n(I have a full audio player, with search on internet/playlists/lyrics/last fm informations, all client js + YQL)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is an old question, but some new technology might help someone out.</p>\n\n<p>If you have administrative access to the other server then you can use the opensource Forge project to accomplish your cross-domain POST. Forge provides a cross-domain JavaScript XmlHttpRequest wrapper that takes advantage of Flash's raw socket API. The POST can even be done over TLS.</p>\n\n<p>The reason you need administrative access to the server you are POSTing to is because you must provide a cross-domain policy that permits access from your domain.</p>\n\n<p><a href=\"http://github.com/digitalbazaar/forge\" rel=\"nofollow\">http://github.com/digitalbazaar/forge</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you have access to all servers involved, put the following in the header of the reply for the page being requested in the other domain:</p>\n\n<p>PHP:</p>\n\n<pre><code>header('Access-Control-Allow-Origin: *');\n</code></pre>\n\n<p>For example, in Drupal's xmlrpc.php code you would do this:</p>\n\n<pre><code>function xmlrpc_server_output($xml) {\n    $xml = '&lt;?xml version=\"1.0\"?&gt;'.\"\\n\". $xml;\n    header('Connection: close');\n    header('Content-Length: '. strlen($xml));\n    header('Access-Control-Allow-Origin: *');\n    header('Content-Type: application/x-www-form-urlencoded');\n    header('Date: '. date('r'));\n    // $xml = str_replace(\"\\n\", \" \", $xml); \n\n    echo $xml;\n    exit;\n}\n</code></pre>\n\n<p>This probably creates a security problem, and you should make sure that you take the appropriate measures to verify the request.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>If you control the remote server, you should probably use CORS, as described in the top answer on this question; it's supported in IE8 and up, and all recent versions of FF, GC, and Safari.</p>\n\n<p>But if you <em>don't</em> control the remote server, or if you have to support IE7, you'll probably want to use an iframe technique.</p>\n\n<ol>\n<li>Create an iframe with a unique name. (iframes use a global namespace for the entire browser, so pick a name that no other website will use.)</li>\n<li>Construct a form with hidden inputs, targeting the iframe.</li>\n<li>Submit the form.</li>\n</ol>\n\n<p>Here's sample code; I tested it on IE6, IE7, IE8, IE9, FF4, GC11, S5.</p>\n\n<pre><code>function crossDomainPost() {\n  // Add the iframe with a unique name\n  var iframe = document.createElement(\"iframe\");\n  var uniqueString = \"CHANGE_THIS_TO_SOME_UNIQUE_STRING\";\n  document.body.appendChild(iframe);\n  iframe.style.display = \"none\";\n  iframe.contentWindow.name = uniqueString;\n\n  // construct a form with hidden inputs, targeting the iframe\n  var form = document.createElement(\"form\");\n  form.target = uniqueString;\n  form.action = \"http://INSERT_YOUR_URL_HERE\";\n  form.method = \"POST\";\n\n  // repeat for each parameter\n  var input = document.createElement(\"input\");\n  input.type = \"hidden\";\n  input.name = \"INSERT_YOUR_PARAMETER_NAME_HERE\";\n  input.value = \"INSERT_YOUR_PARAMETER_VALUE_HERE\";\n  form.appendChild(input);\n\n  document.body.appendChild(form);\n  form.submit();\n}\n</code></pre>\n\n<p>Beware! You won't be able to directly read the response of the POST, since the iframe exists on a separate domain. Frames aren't allowed to communicate with each other from different domains; this is the <a href=\"http://en.wikipedia.org/wiki/Same-origin_policy\">same-origin policy</a>.</p>\n\n<p>If you control the remote server but you can't use CORS for some reason, there are ways to  work around the same-origin policy, for example by using <a href=\"https://developer.mozilla.org/en/DOM/window.postMessage\"><code>window.postMessage</code></a> and/or one of a number of libraries allowing you to send cross-domain cross-frame messages in older browsers:</p>\n\n<ul>\n<li><a href=\"https://github.com/ternarylabs/porthole/\">Porthole</a></li>\n<li><a href=\"http://code.google.com/p/xssinterface/\">XSSInterface</a></li>\n<li><a href=\"http://easyxdm.net/\">EasyXDM</a></li>\n<li><a href=\"http://benalman.com/projects/jquery-postmessage-plugin/\">jQuery PostMessage Plugin</a></li>\n</ul>\n\n<p>If you don't control the remote server, then you can't read the response of the POST, period. It would cause security problems otherwise.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p><strong>Update:</strong> Before continuing everyone should read and understand the <a href=\"http://www.html5rocks.com/en/tutorials/cors/\">html5rocks tutorial</a> on CORS. It is easy to understand and very clear.</p>\n\n<p>If you control the server being POSTed, simply leverage the \"Cross-Origin Resource Sharing standard\" by setting response headers on the server.  This answer is discussed in other answers in this thread, but not very clearly in my opinion.</p>\n\n<p>In short here is how you accomplish the cross domain POST from from.com/1.html to to.com/postHere.php (using PHP as an example). Note: you only need to set <code>Access-Control-Allow-Origin</code> for NON <code>OPTIONS</code> requests - this example always sets all headers for a smaller code snippet.</p>\n\n<ol>\n<li><p>In postHere.php setup the following:</p>\n\n<pre><code>switch ($_SERVER['HTTP_ORIGIN']) {\n    case 'http://from.com': case 'https://from.com':\n    header('Access-Control-Allow-Origin: '.$_SERVER['HTTP_ORIGIN']);\n    header('Access-Control-Allow-Methods: GET, PUT, POST, DELETE, OPTIONS');\n    header('Access-Control-Max-Age: 1000');\n    header('Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With');\n    break;\n}\n</code></pre>\n\n<p>This allows your script to make cross domain POST, GET and OPTIONS.  This will become clear as you continue to read...</p></li>\n<li><p>Setup your cross domain POST from JS (jQuery example):</p>\n\n<pre><code>$.ajax({\n    type: 'POST',\n    url: 'https://to.com/postHere.php',\n    crossDomain: true,\n    data: '{\"some\":\"json\"}',\n    dataType: 'json',\n    success: function(responseData, textStatus, jqXHR) {\n        var value = responseData.someKey;\n    },\n    error: function (responseData, textStatus, errorThrown) {\n        alert('POST failed.');\n    }\n});\n</code></pre></li>\n</ol>\n\n<p>When you do the POST in step 2, your browser will send a \"OPTIONS\" method to the server.  This is a \"sniff\" by the browser to see if the server is cool with you POSTing to it.  The server responds with an \"Access-Control-Allow-Origin\" telling the browser its OK to POST|GET|ORIGIN if request originated from \"<a href=\"http://from.com\">http://from.com</a>\" or \"<a href=\"https://from.com\">https://from.com</a>\".  Since the server is OK with it, the browser will make a 2nd request (this time a POST).  It is good practice to have your client set the content type it is sending - so you'll need to allow that as well.</p>\n\n<p>MDN has a great write-up about <a href=\"https://developer.mozilla.org/en/http_access_control\">HTTP access control</a>, that goes into detail of how the entire flow works. According to their docs, it should \"work in browsers that support cross-site XMLHttpRequest\". This is a bit misleading however, as I <em>THINK</em> only modern browsers allow cross domain POST.  I have only verified this works with safari,chrome,FF 3.6.</p>\n\n<p>Keep in mind the following if you do this:</p>\n\n<ol>\n<li>Your server will have to handle 2 requests per operation</li>\n<li>You will have to think about the security implications. Be careful before doing something like 'Access-Control-Allow-Origin: *' </li>\n<li>This wont work on mobile browsers. In my experience they do not allow cross domain POST at all. I've tested android, iPad, iPhone</li>\n<li>There is a pretty big bug in FF &lt; 3.6 where if the server returns a non 400 response code AND there is a response body (validation errors for example), FF 3.6 wont get the response body. This is a huge pain in the ass, since you cant use good REST practices. See bug <a href=\"http://bugs.jquery.com/ticket/7868#comment:11\">here</a> (its filed under jQuery, but my guess is its a FF bug - seems to be fixed in FF4).</li>\n<li>Always return the headers above, not just on OPTION requests. FF needs it in the response from the POST.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 240
                },
                {
                    "body": "<p>I think the best way is to use XMLHttpRequest (e.g. $.ajax(), $.post() in jQuery) with one of Cross-Origin Resource Sharing polyfills <a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#wiki-CORS\" rel=\"nofollow\">https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#wiki-CORS</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>One more important thing to note!!!\nIn <a href=\"http://stackoverflow.com/a/7605119/411671\">example</a> above it's described how to use </p>\n\n<pre><code>$.ajax({\n    type     : 'POST',\n    dataType : 'json', \n    url      : 'another-remote-server',\n    ...\n});\n</code></pre>\n\n<p>JQuery 1.6 and lower has a bug with cross-domain XHR.\nAccording to Firebug no requests except OPTIONS were sent. No POST. At all.</p>\n\n<p>Spent 5 hours testing/tuning my code. Adding a lot of headers on the remote server (script). Without any effect.\nBut later, I've updated JQuery lib to 1.6.4, and everything works like a charm.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I have a code example for this problem.</p>\n\n<p><a href=\"http://reddymails.blogspot.com/2012/05/solving-cross-domain-problem-using.html\" rel=\"nofollow\">http://reddymails.blogspot.com/2012/05/solving-cross-domain-problem-using.html</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know this is an old question, but I wanted to share my approach. I use cURL as a proxy, very easy and consistent. Create a php page called submit.php, and add the following code:</p>\n\n<pre><code>&lt;?\n\nfunction post($url, $data) {\n$header = array(\"User-Agent: \" . $_SERVER[\"HTTP_USER_AGENT\"], \"Content-Type: application/x-www-form-urlencoded\");\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, $url);\ncurl_setopt($curl, CURLOPT_HTTPHEADER, $header);\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_POST, 1);\ncurl_setopt($curl, CURLOPT_POSTFIELDS, $data);\n$response = curl_exec($curl);\ncurl_close($curl);\nreturn $response;\n}\n\n$url = \"your cross domain request here\";\n$data = $_SERVER[\"QUERY_STRING\"];\necho(post($url, $data));\n</code></pre>\n\n<p>Then, in your js (jQuery here):</p>\n\n<pre><code>$.ajax({\ntype: 'POST',\nurl: 'submit.php',\ncrossDomain: true,\ndata: '{\"some\":\"json\"}',\ndataType: 'json',\nsuccess: function(responseData, textStatus, jqXHR) {\n    var value = responseData.someKey;\n},\nerror: function (responseData, textStatus, errorThrown) {\n    alert('POST failed.');\n}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you want to do this in ASP.net MVC environment with JQuery AJAX, follow these steps:\n(this is a summary of the solution offered at <a href=\"http://stackoverflow.com/questions/9010457/cross-domain-posts-to-asp-net-mvc-app\">this</a> thread) </p>\n\n<p>Assume that \"caller.com\"(can be any website) needs to post to \"server.com\"(an ASP.net MVC application)</p>\n\n<ol>\n<li><p>On the \"server.com\" app's Web.config add the following section:</p>\n\n<pre><code>  &lt;httpProtocol&gt;\n      &lt;customHeaders&gt;\n          &lt;add name=\"Access-Control-Allow-Origin\" value=\"*\" /&gt;\n          &lt;add name=\"Access-Control-Allow-Headers\" value=\"Content-Type\" /&gt;\n          &lt;add name=\"Access-Control-Allow-Methods\" value=\"POST, GET, OPTIONS\" /&gt;\n      &lt;/customHeaders&gt;\n  &lt;/httpProtocol&gt;\n</code></pre></li>\n<li><p>On the \"server.com\", we'll have the following action on the controller(called \"Home\") to which we will be posting:</p>\n\n<pre><code>[HttpPost]\npublic JsonResult Save()\n{\n    //Handle the post data...\n\n    return Json(\n        new\n        {\n            IsSuccess = true\n        });\n}\n</code></pre></li>\n<li><p>Then from the \"caller.com\", post data from a form(with the html id \"formId\") to \"server.com\" as follow:</p>\n\n<pre><code>$.ajax({\n        type: \"POST\",\n        url: \"http://www.server.com/home/save\",\n        dataType: 'json',\n        crossDomain: true,\n        data: $(formId).serialize(),\n        success: function (jsonResult) {\n           //do what ever with the reply\n        },\n        error: function (jqXHR, textStatus) {\n            //handle error\n        }\n    });\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is one more way (using html5 feature). You can use proxy iframe hosted on that other domain, you send message using postMessage to that iframe, then that iframe can do POST request (on same domain) and postMessage back with reposnse to the parent window.</p>\n\n<p>parent on sender.com</p>\n\n<pre><code>var win = $('iframe')[0].contentWindow;\n\nwin.postMessage(JSON.stringify({url: \"URL\", data: {}}),\"http://reciver.com\");\n\nfunction get(event) {\n    if (event.origin === \"http://reciver.com\") {\n        // event.data is response from POST\n    }\n}\n\nif (window.addEventListener){\n    addEventListener(\"message\", get, false)\n} else {\n    attachEvent(\"onmessage\", get)\n}\n</code></pre>\n\n<p>iframe on reciver.com</p>\n\n<pre><code>function listener(event) {\n    if (event.origin === \"http://sender.com\") {\n        var data = JSON.parse(event.data);\n        $.post(data.url, data.data, function(reponse) {\n            window.parent.postMessage(reponse, \"*\");\n        });\n    }\n}\n// don't know if we can use jQuery here\nif (window.addEventListener){\n    addEventListener(\"message\", listener, false)\n} else {\n    attachEvent(\"onmessage\", listener)\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Keep it simple: </p>\n\n<ol>\n<li><p><em>cross-domain POST</em>:<br>\nuse <strong>crossDomain: true,</strong></p></li>\n<li><p><em>shouldn't refresh the page</em>: <br>\nit wont't,  <strong>success</strong> or <strong>error</strong> async callback will be called when server send back his response. </p></li>\n</ol>\n\n<p>example: </p>\n\n<pre><code>$.ajax({\n        type: \"POST\",\n        url: \"http://www.yoururl.com/\",\n        crossDomain: true,\n        data: 'parm1=value1&amp;param2=value2',\n        success: function (data) {\n            // do something with server response data\n        },\n        error: function (err) {\n            // handle your error logic here\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>How do I send a cross-domain POST request via JavaScript?</p>\n\n<p>Notes - it shouldn't refresh the page, and I need to grab and parse the response afterward.</p>\n\n<p>Your help with some code examples will be much appreciated.</p>\n",
            "last_activity_date": 1412355705,
            "question_id": 298745,
            "score": 311,
            "tags": [
                "javascript",
                "ajax",
                "cross-domain"
            ],
            "title": "How do I send a cross-domain POST request via JavaScript?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<h3>Replacing URLs with links (Answer to the General Problem)</h3>\n\n<p>The regular expression in the question misses <em>a lot</em> of edge cases. When detecting URLs, it's always better to use a specialized library that handles international domain names, new TLDs like <code>.museum</code>, parentheses and other punctuation within and at the end of the URL, and many other edge cases. See the Jeff Atwood's blog post <em><a href=\"http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html\">The Problem With URLs</a></em> for an explanation of some of the other issues. </p>\n\n<blockquote>\n  <p>The <strong>best summary of URL matching libraries</strong> is in <strong><a href=\"http://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links#21925491\">Dan Dascalescu's Answer <img src=\"http://i.stack.imgur.com/AhNsx.png\" alt=\"+100\"></a></strong><br>\n  (as of Feb 2014)</p>\n</blockquote>\n\n<hr>\n\n<h3>\"Make a regular expression replace more than one match\" (Answer to the specific problem)</h3>\n\n<p>Add a \"g\" to the end of the regular expression to enable global matching:</p>\n\n<pre><code>/ig;\n</code></pre>\n\n<p>But that only fixes the problem in the question where the regular expression was only replacing the first match. <em>Do not use that code.</em></p>\n",
                    "is_accepted": false,
                    "score": 265
                },
                {
                    "body": "<p>I had to do the opposite, and make html links into just the URL, but I modified your regex and it works like a charm, thanks :) </p>\n\n<pre>\nvar exp = /&lt;a\\s.*href=['&quot;](\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])['&quot;].*&gt;.*&lt;\\/a&gt;/ig;\n\nsource = source.replace(exp,&quot;$1&quot;);\n</pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Thanks, this was very helpful. I also wanted something that would link things that looked like a URL -- as a basic requirement, it'd link something like www.yahoo.com, even if the http:// protocol prefix was not present. So basically, if \"www.\" is present, it'll link it and assume it's http://. I also wanted emails to turn into mailto: links. EXAMPLE:  www.yahoo.com would be converted to www.yahoo.com</p>\n\n<p>Here's the code I ended up with (combination of code from this page and other stuff I found online, and other stuff I did on my own):</p>\n\n<pre><code>function Linkify(inputText) {\n    //URLs starting with http://, https://, or ftp://\n    var replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\n    var replacedText = inputText.replace(replacePattern1, '&lt;a href=\"$1\" target=\"_blank\"&gt;$1&lt;/a&gt;');\n\n    //URLs starting with www. (without // before it, or it'd re-link the ones done above)\n    var replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    var replacedText = replacedText.replace(replacePattern2, '$1&lt;a href=\"http://$2\" target=\"_blank\"&gt;$2&lt;/a&gt;');\n\n    //Change email addresses to mailto:: links\n    var replacePattern3 = /(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})/gim;\n    var replacedText = replacedText.replace(replacePattern3, '&lt;a href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n\n    return replacedText\n}\n</code></pre>\n\n<p>In the 2nd replace, the (^|[^/]) part is only replacing www.whatever.com if it's not already prefixed by // -- to avoid double-linking if a URL was already linked in the first replace. Also, it's possible that www.whatever.com might be at the beginning of the string, which is the first \"or\" condition in that part of the regex.</p>\n\n<p>This could be integrated as a jQuery plugin as Jesse P illustrated above -- but I specifically wanted a regular function that wasn't acting on an existing DOM element, because I'm taking text I have and then adding it to the DOM, and I want the text to be \"linkified\" before I add it, so I pass the text through this function. Works great.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>The e-mail detection in Travitron's answer above did not work for me, so I extended/replaced it with the following (C# code).</p>\n\n<pre><code>// Change e-mail addresses to mailto: links.\nconst RegexOptions o = RegexOptions.Multiline | RegexOptions.IgnoreCase;\nconst string pat3 = @\"([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,6})\";\nconst string rep3 = @\"&lt;a href=\"\"mailto:$1@$2.$3\"\"&gt;$1@$2.$3&lt;/a&gt;\";\ntext = Regex.Replace(text, pat3, rep3, o);\n</code></pre>\n\n<p>This allows for e-mail addresses like \"<em>firstname.secondname@one.two.three.co.uk</em>\".</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The best script to do this:\n<a href=\"http://benalman.com/projects/javascript-linkify-process-lin/\">http://benalman.com/projects/javascript-linkify-process-lin/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I've made some small modifications to Travis's code (just to avoid any unnecessary redeclaration - but it's working great for my needs, so nice job!):</p>\n\n<pre><code>function linkify(inputText) {\n    var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n    //URLs starting with http://, https://, or ftp://\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\n    replacedText = inputText.replace(replacePattern1, '&lt;a href=\"$1\" target=\"_blank\"&gt;$1&lt;/a&gt;');\n\n    //URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n    replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    replacedText = replacedText.replace(replacePattern2, '$1&lt;a href=\"http://$2\" target=\"_blank\"&gt;$2&lt;/a&gt;');\n\n    //Change email addresses to mailto:: links.\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(replacePattern3, '&lt;a href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n\n    return replacedText;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 86
                },
                {
                    "body": "<p>Made some optimizations to Travis' <code>Linkify()</code> code above. I also fixed a bug where email addresses with subdomain type formats would not be matched (i.e. example@domain.co.uk).</p>\n\n<p>In addition, I changed the implementation to prototype the <code>String</code> class so that items can be matched like so:</p>\n\n<pre><code>var text = 'address@example.com';\ntext.linkify();\n\n'http://stackoverflow.com/'.linkify();\n</code></pre>\n\n<p>Anyway, here's the script:</p>\n\n<pre><code>if(!String.linkify) {\n    String.prototype.linkify = function() {\n\n        // http://, https://, ftp://\n        var urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&amp;@#\\/%?=~_|!:,.;]*[a-z0-9-+&amp;@#\\/%=~_|]/gim;\n\n        // www. sans http:// or https://\n        var pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n\n        // Email addresses\n        var emailAddressPattern = /[\\w.]+@[a-zA-Z_-]+?(?:\\.[a-zA-Z]{2,6})+/gim;\n\n        return this\n            .replace(urlPattern, '&lt;a href=\"$&amp;\"&gt;$&amp;&lt;/a&gt;')\n            .replace(pseudoUrlPattern, '$1&lt;a href=\"http://$2\"&gt;$2&lt;/a&gt;')\n            .replace(emailAddressPattern, '&lt;a href=\"mailto:$&amp;\"&gt;$&amp;&lt;/a&gt;');\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I made a change to Roshambo String.linkify() to the emailAddressPattern to recognize aaa.bbb.@ccc.ddd addresses</p>\n\n<pre><code>if(!String.linkify) {\n    String.prototype.linkify = function() {\n\n        // http://, https://, ftp://\n        var urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&amp;@#\\/%?=~_|!:,.;]*[a-z0-9-+&amp;@#\\/%=~_|]/gim;\n\n        // www. sans http:// or https://\n        var pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n\n        // Email addresses *** here I've changed the expression ***\n        var emailAddressPattern = /(([a-zA-Z0-9_\\-\\.]+)@[a-zA-Z_]+?(?:\\.[a-zA-Z]{2,6}))+/gim;\n\n        return this\n            .replace(urlPattern, '&lt;a target=\"_blank\" href=\"$&amp;\"&gt;$&amp;&lt;/a&gt;')\n            .replace(pseudoUrlPattern, '$1&lt;a target=\"_blank\" href=\"http://$2\"&gt;$2&lt;/a&gt;')\n            .replace(emailAddressPattern, '&lt;a target=\"_blank\" href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I got bits and pieces from different places on the net (including this page) and tweaked them to come up with a function you can find here: <a href=\"http://tech.cibul.net/turn-urls-into-links-in-text-with-jquery/\" rel=\"nofollow\">http://tech.cibul.net/turn-urls-into-links-in-text-with-jquery/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you need to show shorter link (only domain), but with same long URL, you can try my modification of Sam Hasler's code version posted above</p>\n\n<pre><code>function replaceURLWithHTMLLinks(text) {\n    var exp = /(\\b(https?|ftp|file):\\/\\/([-A-Z0-9+&amp;@#%?=~_|!:,.;]*)([-A-Z0-9+&amp;@#%?\\/=~_|!:,.;]*)[-A-Z0-9+&amp;@#\\/%=~_|])/ig;\n    return text.replace(exp, \"&lt;a href='$1' target='_blank'&gt;$3&lt;/a&gt;\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Identifying URLs is tricky because they are often surrounded by punctuation marks and because users frequently do not use the full form of the URL. Many JavaScript functions exist for replacing URLs with hyperlinks, but I was unable to find one that works as well as the <code>urlize</code> filter in the Python-based web framework Django. I therefore ported Django's <code>urlize</code> function to JavaScript:</p>\n\n<blockquote>\n  <p><a href=\"https://github.com/ljosa/urlize.js\">https://github.com/ljosa/urlize.js</a></p>\n</blockquote>\n\n<p>An example:</p>\n\n<pre><code>urlize('Go to SO (stackoverflow.com) and ask. &lt;grin&gt;', \n       {nofollow: true, autoescape: true})\n=&gt; \"Go to SO (&lt;a href=\"http://stackoverflow.com\" rel=\"nofollow\"&gt;stackoverflow.com&lt;/a&gt;) and ask. &amp;lt;grin&amp;gt;\"\n</code></pre>\n\n<p>The second argument, if true, causes <code>rel=\"nofollow\"</code> to be inserted. The third argument, if true, escapes characters that have special meaning in HTML. See <a href=\"https://github.com/ljosa/urlize.js/blob/master/README.md\">the README file</a>.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>This solution works like many of the others, and in fact uses the same regex as one of them, however in stead of returning a HTML String this will return a document fragment containing the A element and any applicable text nodes. </p>\n\n<pre><code> function make_link(string) {\n    var words = string.split(' '),\n        ret = document.createDocumentFragment();\n    for (var i = 0, l = words.length; i &lt; l; i++) {\n        if (words[i].match(/[-a-zA-Z0-9@:%_\\+.~#?&amp;//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)?/gi)) {\n            var elm = document.createElement('a');\n            elm.href = words[i];\n            elm.textContent = words[i];\n            if (ret.childNodes.length &gt; 0) {\n                ret.lastChild.textContent += ' ';\n            }\n            ret.appendChild(elm);\n        } else {\n            if (ret.lastChild &amp;&amp; ret.lastChild.nodeType === 3) {\n                ret.lastChild.textContent += ' ' + words[i];\n            } else {\n                ret.appendChild(document.createTextNode(' ' + words[i]));\n            }\n        }\n    }\n    return ret;\n}\n</code></pre>\n\n<p>There are some caveats, namely with older IE and textContent support. </p>\n\n<p><a href=\"http://jsfiddle.net/rlemon/Npavu/\" rel=\"nofollow\">here</a> is a demo.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>After input from several sources I've now a solution that works well.  It had to do with writing your own replacement code.</p>\n\n<p><a href=\"http://stackoverflow.com/a/19708150/1153319\">Answer</a>.</p>\n\n<p><a href=\"http://jsfiddle.net/EwzcD/1/\" rel=\"nofollow\">Fiddle</a>.</p>\n\n<pre><code>function replaceURLWithHTMLLinks(text) {\n    var re = /(\\(.*?)?\\b((?:https?|ftp|file):\\/\\/[-a-z0-9+&amp;@#\\/%?=~_()|!:,.;]*[-a-z0-9+&amp;@#\\/%=~_()|])/ig;\n    return text.replace(re, function(match, lParens, url) {\n        var rParens = '';\n        lParens = lParens || '';\n\n        // Try to strip the same number of right parens from url\n        // as there are left parens.  Here, lParenCounter must be\n        // a RegExp object.  You cannot use a literal\n        //     while (/\\(/g.exec(lParens)) { ... }\n        // because an object is needed to store the lastIndex state.\n        var lParenCounter = /\\(/g;\n        while (lParenCounter.exec(lParens)) {\n            var m;\n            // We want m[1] to be greedy, unless a period precedes the\n            // right parenthesis.  These tests cannot be simplified as\n            //     /(.*)(\\.?\\).*)/.exec(url)\n            // because if (.*) is greedy then \\.? never gets a chance.\n            if (m = /(.*)(\\.\\).*)/.exec(url) ||\n                    /(.*)(\\).*)/.exec(url)) {\n                url = m[1];\n                rParens = m[2] + rParens;\n            }\n        }\n        return lParens + \"&lt;a href='\" + url + \"'&gt;\" + url + \"&lt;/a&gt;\" + rParens;\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I too did some modifications on the original version by Travis. The main problem for me was users having the possibility to edit the texts after the first linkify, resulting to further links not working or resulting in double, triple and so on linking. Here's my version that can handle texts that already have hyperlinks in them!</p>\n\n<pre><code>function linkify(inputText) {\n    var replacedText, replacePattern1, replacePattern2, replacePattern3;\n    var originalText = inputText;\n\n    //URLs starting with http://, https://, file:// or ftp://\n    replacePattern1 = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/gim;\n    replacedText = inputText.replace(replacePattern1, '&lt;a href=\"$1\" target=\"_blank\"&gt;$1&lt;/a&gt;');\n\n    //URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n    replacePattern2 = /(^|[^\\/f])(www\\.[\\S]+(\\b|$))/gim;\n\n    replacedText = replacedText.replace(replacePattern2, '$1&lt;a href=\"http://$2\" target=\"_blank\"&gt;$2&lt;/a&gt;');\n\n    //Change email addresses to mailto:: links.\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(replacePattern3, '&lt;a href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n\n    //If there are hrefs in the original text, let's split\n    // the text up and only work on the parts that don't have urls yet.\n    var count = originalText.match(/&lt;a href/g) || [];  \n\n    if(count.length &gt; 0){\n        var combinedReplacedText;\n        //Keep delimiter when splitting\n        var splitInput = originalText.split(/(&lt;\\/a&gt;)/g);\n\n        for (i = 0 ; i &lt; splitInput.length ; i++){\n            if(splitInput[i].match(/&lt;a href/g) == null){\n                splitInput[i] = splitInput[i].replace(replacePattern1, '&lt;a href=\"$1\" target=\"_blank\"&gt;$1&lt;/a&gt;').replace(replacePattern2, '$1&lt;a href=\"http://$2\" target=\"_blank\"&gt;$2&lt;/a&gt;').replace(replacePattern3, '&lt;a href=\"mailto:$1\"&gt;$1&lt;/a&gt;');\n        }\n    }\n    combinedReplacedText = splitInput.join('');\n    return combinedReplacedText;\n    } else {\n    return replacedText;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><strong>Reg Ex:</strong> \n<code>/(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|]*)/ig</code></p>\n\n<pre><code>function UriphiMe(text) {\n      var exp = /(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|]*)/ig; \n      return text.replace(exp,\"&lt;a href='$1'&gt;$1&lt;/a&gt;\");\n}\n</code></pre>\n\n<p><strong>Below are some tested string:</strong> </p>\n\n<ol>\n<li>Find me on to www.google.com </li>\n<li>www</li>\n<li>Find me on to www.<a href=\"http://www.com\" rel=\"nofollow\">http://www.com</a> </li>\n<li>Follow me on : <a href=\"http://www.nishantwork.wordpress.com\" rel=\"nofollow\">http://www.nishantwork.wordpress.com</a> </li>\n<li><a href=\"http://www.nishantwork.wordpress.com\" rel=\"nofollow\">http://www.nishantwork.wordpress.com</a> </li>\n<li>Follow me on : <a href=\"http://www.nishantwork.wordpress.com\" rel=\"nofollow\">http://www.nishantwork.wordpress.com</a> </li>\n<li><a href=\"http://stackoverflow.com/users/430803/nishant\">http://stackoverflow.com/users/430803/nishant</a></li>\n</ol>\n\n<p>Note: If you don't want to pass <code>www</code> as valid one just use below reg ex: \n<code>/(\\b((https?|ftp|file):\\/\\/|(www))[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/ig</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>First off, rolling your own regexp to parse URLs is a <em>terrible idea</em>. You must imagine this is a common enough problem that someone has written, debugged and <a href=\"http://benalman.com/code/test/js-linkify/\">tested</a> a library for it, according to <a href=\"https://metacpan.org/pod/Regexp::Common::URI#REFERENCES\">the RFCs</a>. <strong>URIs are complex</strong> - check out the <a href=\"https://github.com/joyent/node/blob/master/lib/url.js\">code for URL parsing in Node.js</a>) and the Wikipedia page on <a href=\"http://en.wikipedia.org/wiki/URI_scheme\">URI schemes</a>.</p>\n\n<p>There are a ton of edge cases when it comes to parsing URLs: <a href=\"http://en.wikipedia.org/wiki/Top-level_domain#IDN_test_domains\">international domain names</a>, actual (<code>.museum</code>) vs. nonexistent (<code>.etc</code>) TLDs, weird punctuation including <a href=\"http://www.codinghorror.com/blog/2008/10/the-problem-with-urls.html\">parentheses</a>, punctuation at the end of the URL, IPV6 hostnames etc.</p>\n\n<p>I've looked at <a href=\"https://github.com/search?l=JavaScript&amp;q=linkify&amp;ref=cmdform&amp;search_target=global&amp;type=Repositories\">a ton</a> of <a href=\"https://github.com/search?l=JavaScript&amp;q=autolink&amp;ref=cmdform&amp;search_target=global&amp;type=Repositories\">libraries</a>, and those that were worth investigating all have their downsides:</p>\n\n<ul>\n<li><a href=\"https://github.com/cowboy/javascript-linkify\">Ben Alman's linkify</a> hasn't been maintained since 2009.</li>\n<li>Soapbox's <a href=\"http://soapbox.github.io/jQuery-linkify/\">jQuery linkify</a> has seen some serious effort put into it, and <a href=\"https://github.com/SoapBox/jQuery-linkify/pull/51\">a major refactor in Jan 2015</a> but it's a bit overkill in weaving jQuery into what's essentially a purely JavaScript problem. This, however, will be <a href=\"https://github.com/SoapBox/jQuery-linkify/issues/56\">solved when 2.0 is out</a>!</li>\n<li>Django's urlize <a href=\"https://github.com/ljosa/urlize.js/pull/18\">doesn't handle TLDs properly</a>. Here is the official <a href=\"http://data.iana.org/TLD/tlds-alpha-by-domain.txt\">list of valid TLDs</a></li>\n<li><a href=\"https://github.com/bryanwoods/autolink-js/issues/12\">autolink-js</a> wouldn't detect \"www.google.com\" without http://, so it's not quite suitable for autolinking \"casual URLs\" (without a scheme/protocol) found in plain text.</li>\n</ul>\n\n<p><a href=\"https://github.com/gregjacobs/Autolinker.js\">Autolinker.js</a> is the only library I've found so far that lists features (e.g. <em>\"Will properly handle HTML input. The utility will not change the <code>href</code> attribute inside anchor () tags\"</em>). I'll be looking into it more.</p>\n\n<p>If you insist on a regular expression, the most comprehensive is the <a href=\"https://github.com/component/regexps/blob/master/index.js#L3\">URL regexp from Component</a>, though it will falsely detect some non-existent two-letter TLDs by looking at it.</p>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>Keep it simple! Say what you cannot have, rather than what you can have :)</p>\n\n<p>As mentioned above, URLs can be quite complex, especially after the '?', and not all of them start with a 'www.' e.g. <code>maps.bing.com/something?key=!\"\u00a3$%^*()&amp;lat=65&amp;lon&amp;lon=20</code></p>\n\n<p>So, rather than have a complex regex that wont meet all edge cases, and will be hard to maintain, how about this much simpler one, which works well for me in practise.</p>\n\n<p>Match</p>\n\n<p><code>http(s):// (anything but a space)+</code></p>\n\n<p><code>www. (anything but a space)+</code></p>\n\n<p>Where 'anything' is <code>[^'\"&lt;&gt;\\s]</code>\n... basically a greedy match, carrying on to you meet a space, quote, angle bracket, or end of line </p>\n\n<p>Also:</p>\n\n<p>Remember to check that it is not already in URL format, e.g. the text contains <code>href=\"...\"</code> or <code>src=\"...\"</code></p>\n\n<p>Add ref=nofollow (if appropriate)</p>\n\n<p>This solution isn't as \"good\" as the libraries mentioned above, but is much simpler, and works well in practise.</p>\n\n<pre><code>if html.match( /(href)|(src)/i )) {\n    return html; // text already has a hyper link in it\n    }\n\nhtml = html.replace( \n            /\\b(https?:\\/\\/[^\\s\\(\\)\\'\\\"\\&lt;\\&gt;]+)/ig, \n            \"&lt;a ref='nofollow' href='$1'&gt;$1&lt;/a&gt;\" \n            );\n\nhtml = html.replace( \n            /\\s(www\\.[^\\s\\(\\)\\'\\\"\\&lt;\\&gt;]+)/ig, \n            \"&lt;a ref='nofollow' href='http://$1'&gt;$1&lt;/a&gt;\" \n            );\n\nhtml = html.replace( \n             /^(www\\.[^\\s\\(\\)\\'\\\"\\&lt;\\&gt;]+)/ig, \n            \"&lt;a ref='nofollow' href='http://$1'&gt;$1&lt;/a&gt;\" \n            );\n\nreturn html;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using the function below to match URLs inside a given text and replace them for HTML links. The regular expression is working great, but currently I am only replacing the first match.</p>\n\n<p>How I can replace all the URL? I guess I should be using the <em>exec</em> command, but I did not really figure how to do it.</p>\n\n<pre><code>function replaceURLWithHTMLLinks(text) {\n    var exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|!:,.;]*[-A-Z0-9+&amp;@#\\/%=~_|])/i;\n    return text.replace(exp,\"&lt;a href='$1'&gt;$1&lt;/a&gt;\"); \n}\n</code></pre>\n",
            "last_activity_date": 1421878555,
            "question_id": 37684,
            "score": 240,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "How to replace plain URLs with links?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If I understood it right you are doing an <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a> to a different domain than your page is on. So the browser is blocking it as it usually allows a request in the same origin for security reasons. You need to do something different when you want to do a cross-domain request. A tutorial about how to achieve that is <em><a href=\"http://www.html5rocks.com/en/tutorials/cors/\">Using CORS</a></em>.</p>\n\n<p>When you are using postman they are not restricted by this policy. Quoted from <em><a href=\"http://developer.chrome.com/extensions/xhr.html\">Cross-Origin XMLHttpRequest</a></em>:</p>\n\n<blockquote>\n  <p>Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they're limited by the same origin policy. Extensions aren't so limited. An extension can talk to remote servers outside of its origin, as long as it first requests cross-origin permissions.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 184
                },
                {
                    "body": "<p>If you can deal with <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> in return, then try using <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> (note the <strong>P</strong> at the end) for speaking between domains:</p>\n\n<pre><code>$.ajax({\n  type: \"POST\",\n  dataType: 'jsonp',\n  ...... etc ....\n</code></pre>\n\n<p>\"<em>The advent of JSONP \u2014 essentially a consensual cross-site scripting hack \u2014 has opened the door to powerful mashups of content.</em>\"</p>\n\n<p><a href=\"https://learn.jquery.com/ajax/working-with-jsonp/\">https://learn.jquery.com/ajax/working-with-jsonp/</a></p>\n",
                    "is_accepted": false,
                    "score": 76
                },
                {
                    "body": "<p>There's a cross-domain issue using Ajax. You must be sure you are accessing your files on the same <code>http://</code> path without <code>www.</code> (or access from <code>http://www.</code> and post to the same path including <code>www.</code>) which the browser considers as another domain when accessing via a <code>www.</code> path, so you see where's the problem is. You are posting to a different domain and the browser blocks the flow because of the origin issue.</p>\n\n<p>If the <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a> is not placed on the same host that you are requesting from, the flow is blocked, and you will need to find another way to communicate with the API.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Try <a href=\"https://github.com/jpillora/xdomain\" rel=\"nofollow\">XDomain</a>,</p>\n\n<blockquote>\n  <p>Summary: A pure JavaScript CORS alternative/polyfill. No server configuration required - just add a proxy.html on the domain you wish to communicate with. This library uses XHook to hook all <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow\">XHR</a>, so XDomain should work in conjunction with any library.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Very Simple to solve\njust add this in start of your php page which handles the request </p>\n\n<pre><code>&lt;?php header('Access-Control-Allow-Origin: *'); ?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I tried following solution, this method work only when your <strong>Server running locally</strong></p>\n\n<ol>\n<li><p>put following line in web.xml</p>\n\n<p><code>&lt;filter&gt;\n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;\n    &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;</code></p></li>\n<li>Download <a href=\"http://software.dzhuvinov.com/download.html#download-cors\" rel=\"nofollow\">cors-filter-2.1.2</a> and <a href=\"https://www.versioneye.com/java/com.thetransactioncompany:java-property-utils/1.9.1\" rel=\"nofollow\">java-property-utils-1.9.1</a> and put in library</li>\n<li><p>open browser to allow access control with following code in terminal(mac)</p>\n\n<pre><code>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --allow-file-access-from-files\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I had a problem with this when I used AngularJS to access my API. The same request worked in SoapUI 5.0 and ColdFusion. My GET method already had Access-Control-Allow-Origin header.</p>\n\n<p>I found out that <strong>AngularJS makes a \"trial\" OPTIONS request</strong>. ColdFusion, by default, generates OPTIONS method, but it doesn\u2019t have much, these headers specifically. The error was generated in response to that OPTIONS call, and not to my intentional call to GET. After I added OPTIONS method below to my API, the problem has been resolved.</p>\n\n<pre><code>&lt;cffunction name=\"optionsMethod\" access=\"remote\" output=\"false\" returntype=\"any\" httpmethod=\"OPTIONS\" description=\"Method to respond to AngularJS trial call\"&gt;\n    &lt;cfheader name=\"Access-Control-Allow-Headers\" value=\"Content-Type,x-requested-with,Authorization,Access-Control-Allow-Origin\"&gt; \n    &lt;cfheader name=\"Access-Control-Allow-Methods\" value=\"GET,OPTIONS\"&gt;      \n    &lt;cfheader name=\"Access-Control-Allow-Origin\" value=\"*\"&gt;      \n    &lt;cfheader name=\"Access-Control-Max-Age\" value=\"360\"&gt;        \n&lt;/cffunction&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The easy way is to just add the extension in google chrome to allow access using CORS.</p>\n\n<p>(<a href=\"https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US\" rel=\"nofollow\">https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US</a>)</p>\n\n<p>Just enable this extension whenever you want allow access to no <strong>'access-control-allow-origin'</strong> header request.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I am trying to do authorization using <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> by connecting to the <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\">RESTful</a> <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a> built in <a href=\"https://en.wikipedia.org/wiki/Flask_%28web_framework%29\">Flask</a>.</p>\n\n<p>As result I get:</p>\n\n<pre><code>XMLHttpRequest cannot load http://myApiUrl/login. No\n'Access-Control-Allow-Origin' header is present on the requested\nresource. Origin 'null' is therefore not allowed access.\n</code></pre>\n\n<p>I know that the API or remote resource must set the header, but why did it work when I tested authorization in the Chrome extension POSTMAN?</p>\n\n<p>This is the request code:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    dataType: 'text',\n    url: api,\n    username: 'user',\n    password: 'pass',\n    crossDomain : true,\n    xhrFields: {\n        withCredentials: true\n    }\n})\n    .done(function( data ) {\n        console.log(\"done\");\n    })\n    .fail( function(xhr, textStatus, errorThrown) {\n        alert(xhr.responseText);\n        alert(textStatus);\n    });\n</code></pre>\n",
            "last_activity_date": 1425451327,
            "question_id": 20035101,
            "score": 267,
            "tags": [
                "javascript",
                "cors",
                "restful-authentication",
                "flask-restless"
            ],
            "title": "&quot;No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource&quot;"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>First of all you should know which statements are affected by the automatic semicolon insertion (also known as ASI for brevity):</p>\n\n<ul>\n<li>empty statement</li>\n<li><code>var</code> statement</li>\n<li>expression statement</li>\n<li><code>do-while</code> statement</li>\n<li><code>continue</code> statement</li>\n<li><code>break</code> statement</li>\n<li><code>return</code> statement</li>\n<li><code>throw</code> statement</li>\n</ul>\n\n<p>The concrete rules of ASI, are described in the specification:</p>\n\n<ul>\n<li><a href=\"http://bclary.com/2004/11/07/#a-7.9.1\">&sect;7.9.1 Rules of Automatic Semicolon Insertion</a></li>\n</ul>\n\n<p>Three cases are described:</p>\n\n<ol>\n<li><p>When a token (<code>LineTerminator</code> or <code>}</code>) is encountered that is not allowed by the grammar, a semicolon is inserted before it if: </p>\n\n<ul>\n<li>The token is separated from the previous token by at least one <code>LineTerminator</code>.</li>\n<li>The token is <code>}</code></li>\n</ul>\n\n<p>E.g.:</p>\n\n<pre><code>    { 1\n    2 } 3\n    // is transformed to\n    { 1\n    ;2 ;} 3;\n</code></pre>\n\n<p>The <code>NumericLiteral</code> <code>1</code> meets the first condition, the following token is a line terminator.\nThe <code>2</code> meets the second condition, the following token is <code>}</code>.</p></li>\n<li><p>When the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete Program, then a semicolon is automatically inserted at the end of the input stream.</p>\n\n<p>E.g.:</p>\n\n<pre><code>a = b\n++c\n// is transformed to:\na = b;\n++c;\n</code></pre></li>\n<li><p>This case occurs when a token is allowed by some production of the grammar, but the production is a <em>restricted production</em>, a semicolon is automatically inserted before the restricted token.</p></li>\n</ol>\n\n<p>Restricted productions:</p>\n\n<pre><code>PostfixExpression :\n    LeftHandSideExpression [no LineTerminator here] ++\n    LeftHandSideExpression [no LineTerminator here] --\n\nContinueStatement :\n    continue [no LineTerminator here] Identifieropt ;\n\nBreakStatement :\n    break [no LineTerminator here] Identifieropt ;\n\nReturnStatement :\n    return [no LineTerminator here] Expressionopt ;\n\nThrowStatement :\n    throw [no LineTerminator here] Expression ; \n</code></pre>\n\n<p>The classic example, with the <code>ReturnStatement</code>:</p>\n\n<pre><code>return \n  \"something\";\n// is transformed to\nreturn;\n  \"something\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 121
                },
                {
                    "body": "<p>Straight from the <a href=\"http://WWW.ECMA-International.Org/publications/standards/Ecma-262.htm\" rel=\"nofollow\">ECMA-262, Fifth Edition ECMAScript Specification</a>:</p>\n\n<blockquote>\n  <h1>7.9.1 Rules of Automatic Semicolon Insertion</h1>\n  \n  <p>There are three basic rules of semicolon insertion:</p>\n  \n  <ol>\n  <li>When, as the program is parsed from left to right, a token (called the <em>offending token</em>) is encountered that is not allowed by any production of the grammar,  then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true:\n  <ul>\n  <li>The offending token is separated from the previous token by at least one <code>LineTerminator</code>.</li>\n  <li>The offending token is <kbd>}</kbd>.</li>\n  </ul></li>\n  <li>When, as the program is parsed from left to right,  the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete ECMAScript <code>Program</code>, then a semicolon is automatically inserted at the end of the input stream.</li>\n  <li>When, as the program is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a <em>restricted production</em> and the token would be the first token for a terminal or nonterminal immediately following the annotation \"<sub>[no <code>LineTerminator</code> here]</sub>\" within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one <strong>LineTerminator</strong>, then a semicolon is automatically inserted before the restricted token.</li>\n  </ol>\n  \n  <p>However, there is an additional overriding condition on  the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a <kbd>for</kbd> statement (see 12.6.3).</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Regarding semicolon insertion and the var statement, beware forgetting the comma when using var but spanning multiple lines.  Somebody found this in my code yesterday:</p>\n\n<pre><code>    var srcRecords = src.records\n        srcIds = [];\n</code></pre>\n\n<p>It ran but the effect was that the srcIds declaration/assignment was global because the local declaration with var on the previous line no longer applied as that statement was considered finished due to automatic semi-colon insertion.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Well, first I should probably ask if this is browser dependent.</p>\n\n<p>I've read that if an invalid token is found, but the section of code is valid until that invalid token, a semicolon is inserted before the token if it is preceded by a line break.<br>\nHowever, the common example cited for bugs caused by semicolon insertion is:</p>\n\n<pre><code>return\n  _a+b;\n</code></pre>\n\n<p>which doesn't seem to follow this rule, since _a would be a valid token. On the other hand, breaking up call chains works as expected:</p>\n\n<pre><code>$('#myButton')\n  .click(function(){alert(\"Hello!\")});\n</code></pre>\n\n<p>Does anyone have a more in-depth description of the rules?</p>\n",
            "last_activity_date": 1421161926,
            "question_id": 2846283,
            "score": 90,
            "tags": [
                "javascript",
                "semicolon"
            ],
            "title": "What are the rules for Javascript&#39;s automatic semicolon insertion (ASI)?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>There are some examples on the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Math/random\">Mozilla Developer Center</a> page:</p>\n\n<pre><code>/**\n * Returns a random number between min (inclusive) and max (exclusive)\n */\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</code></pre>\n\n<hr>\n\n<p>Here's the logic behind it. It's a simple rule of three:</p>\n\n<p><code>Math.random()</code> returns a <code>Number</code> between 0 (inclusive) and 1 (exclusive). So we have an interval like this:</p>\n\n<pre><code>[0 .................................... 1)\n</code></pre>\n\n<p>Now, we'd like a number between <code>min</code> (inclusive) and <code>max</code> (exclusive):</p>\n\n<pre><code>[0 .................................... 1)\n[min .................................. max)\n</code></pre>\n\n<p>We can use the <code>Math.random</code> to get the correspondent in the [min, max) interval. But, first we should factor a little bit the problem by subtracting <code>min</code> from the second interval:</p>\n\n<pre><code>[0 .................................... 1)\n[min - min ............................ max - min)\n</code></pre>\n\n<p>This gives:</p>\n\n<pre><code>[0 .................................... 1)\n[0 .................................... max - min)\n</code></pre>\n\n<p>We may now apply <code>Math.random</code> and then calculate the correspondent. Let's choose a random number:</p>\n\n<pre><code>                Math.random()\n                    |\n[0 .................................... 1)\n[0 .................................... max - min)\n                    |\n                    x (what we need)\n</code></pre>\n\n<p>So, in order to find <code>x</code>, we would do:</p>\n\n<pre><code>x = Math.random() * (max - min);\n</code></pre>\n\n<p>Don't forget to add <code>min</code> back, so that we get a number in the [min, max) interval:</p>\n\n<pre><code>x = Math.random() * (max - min) + min;\n</code></pre>\n\n<p>That was the first function from MDC. The second one, returns an integer between <code>min</code> and <code>max</code>, both inclusive.</p>\n\n<p>Now for getting integers, you could use <code>round</code>, <code>ceil</code> or <code>floor</code>.</p>\n\n<p>You could use <code>Math.round(Math.random() * (max - min)) + min</code>, this however gives a non-even distribution. Both, <code>min</code> and <code>max</code> only have approximately half the chance to roll:</p>\n\n<pre><code>min...min+0.5...min+1...min+1.5   ...    max-0.5....max\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500 ... \u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2518   \u2190 round()\n   min          min+1                          max\n</code></pre>\n\n<p>With <code>max</code> excluded from the interval, it has an even less chance to roll than <code>min</code>.</p>\n\n<p>With <code>Math.floor(Math.random() * (max - min +1)) + min</code> you have a perfectly even distribution.</p>\n\n<pre><code>min.... min+1... min+2 ... max-1... max.... max+1 (is excluded from interval)\n|        |        |         |        |        |\n\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500 ... \u2518\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518   \u2190 floor()\n   min     min+1               max-1    max\n</code></pre>\n\n<p>You can't use <code>ceil()</code> and <code>-1</code> in that equation because <code>max</code> now had a slightly less chance to roll, but you can roll the (unwanted) <code>min-1</code> result too.</p>\n",
                    "is_accepted": true,
                    "score": 1165
                },
                {
                    "body": "<pre><code>function getRandomizer(bottom, top) {\n    return function() {\n        return Math.floor( Math.random() * ( 1 + top - bottom ) ) + bottom;\n    }\n}\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>var rollDie = getRandomizer( 1, 6 );\n\nvar results = \"\"\nfor ( var i = 0; i&lt;1000; i++ ) {\n    results += rollDie() + \" \";    //make a string filled with 1000 random numbers in the range 1-6.\n}\n</code></pre>\n\n<p>breakdown: </p>\n\n<p>We are returning a function (borrowing from functional programming) that when called, will return a random integer between the the values <code>bottom</code> and <code>top</code>, inclusive. We say 'inclusive' because we want to include both bottom and top in the range of numbers that can be returned. This way, <code>getRandomizer( 1, 6 )</code> will return either 1, 2, 3, 4, 5, or 6. </p>\n\n<p>(bottom is lower number, top is greater number)</p>\n\n<pre><code>Math.random() * ( 1 + top - bottom )\n</code></pre>\n\n<p><code>Math.random()</code> returns a random double between 0 and 1, and if we multiply it by one plus the difference between <code>top</code> and <code>bottom</code>, we'll get a double somewhere between <code>0</code> and <code>1+b-a</code>. </p>\n\n<pre><code>Math.floor( Math.random() * ( 1 + top - bottom ) )\n</code></pre>\n\n<p><code>Math.floor</code> rounds the number down to the nearest integer. So we now have all the integers between <code>0</code> and <code>top-bottom</code>. The 1 looks confusing, but it needs to be there because we are always rounding down, so the top number will never actually be reached without it. The random decimal we generate needs to be in the range <code>0</code> to <code>(1+top-bottom)</code> so we can round down and get an int in the range <code>0</code> to <code>top-bottom</code></p>\n\n<pre><code>Math.floor( Math.random() * ( 1 + top - bottom ) ) + bottom\n</code></pre>\n\n<p>The code in the previous example gave us an integer in the range <code>0</code> and <code>top-bottom</code>, so all we need to do now is add <code>bottom</code> to that result to get an integer in the range <code>bottom</code> and <code>top</code> inclusive. :D</p>\n\n<hr>\n\n<p>NOTE: If you pass in a non-integer value or the greater number first you'll get undesirable behavior, but unless anyone requests it I am not going to delve into the argument checking code as its rather far from the intent of the original question. </p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<pre><code>function getRandomInt(lower, upper)\n{\n    //to create an even sample distribution\n    return Math.floor(lower + (Math.random() * (upper - lower + 1)));\n\n    //to produce an uneven sample distribution\n    //return Math.round(lower + (Math.random() * (upper - lower)));\n\n    //to exclude the max value from the possible values\n    //return Math.floor(lower + (Math.random() * (upper - lower)));\n}\n</code></pre>\n\n<p>To test this function, and variations of this function, save the below HTML/JavaScript to a file and open with a browser.  The code will produce a <em>graph</em> showing the distribution of one million function calls.  The code will also record the edge cases, so if the the function produces a value greater than the max, or less than the min, you.will.know.about.it.</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\"&gt;\n        function getRandomInt(lower, upper)\n        {\n            //to create an even sample distribution\n            return Math.floor(lower + (Math.random() * (upper - lower + 1)));\n\n            //to produce an uneven sample distribution\n            //return Math.round(lower + (Math.random() * (upper - lower)));\n\n            //to exclude the max value from the possible values\n            //return Math.floor(lower + (Math.random() * (upper - lower)));\n        }\n\n        var min = -5;\n        var max = 5;\n\n        var array = new Array();\n\n        for(var i = 0; i &lt;= (max - min) + 2; i++) {\n          array.push(0);\n        }\n\n        for(var i = 0; i &lt; 1000000; i++) {\n            var random = getRandomInt(min, max);\n            array[random - min + 1]++;\n        }\n\n        var maxSample = 0;\n        for(var i = 0; i &lt; max - min; i++) {\n            maxSample = Math.max(maxSample, array[i]);\n        }\n\n        //create a bar graph to show the sample distribution\n        var maxHeight = 500;\n        for(var i = 0; i &lt;= (max - min) + 2; i++) {\n            var sampleHeight = (array[i]/maxSample) * maxHeight;\n\n            document.write('&lt;span style=\"display:inline-block;color:'+(sampleHeight == 0 ? 'black' : 'white')+';background-color:black;height:'+sampleHeight+'px\"&gt;&amp;nbsp;[' + (i + min - 1) + ']:&amp;nbsp;'+array[i]+'&lt;/span&gt;&amp;nbsp;&amp;nbsp;');\n        }\n        document.write('&lt;hr/&gt;');\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var randomnumber = Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 111
                },
                {
                    "body": "<p>For a random integer with a range, try:</p>\n\n<pre><code>            function random (minimum, maximum){\n            var bool = true;\n            while(bool) {\n            var number = (Math.floor(Math.random()*maximum+1)+minimum);\n                if (number &gt; 20) {bool = true;}\n                else {bool = false;}}\n            return number;}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function randomRange(min, max) {\n  return ~~(Math.random() * (max - min + 1)) + min\n}\n</code></pre>\n\n<p>Alternative if you are using <strong><a href=\"http://underscorejs.org/#random\">Underscore.js</a></strong> you can use</p>\n\n<pre><code>_.random(min, max)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>After generating a random number using a computer program, it is still consider as a random number if the picked number is a part or the full one of the initial one. But if it was changed, then <strong>mathematicians are not accept it as a random number and they can call it a biased number.</strong> But if you are developing a program for a simple task, this will not be a case to consider. <strong>But if you are developing a program to generate a random number for a valuable stuff such as lottery program, or gambling game, then your program will be rejected by the management if you are not consider about the above case.</strong></p>\n\n<p>So for those kind of people, here is my suggestion:</p>\n\n<p>Generate a random number using <code>Math.random()</code>.(say this <code>n</code>)</p>\n\n<pre><code>Now for [0,10) ==&gt;  n*10 (i.e. one digit) and for[10,100) ==&gt; n*100 (i.e. two digits) and so on. Here squire bracket indicates that boundary is inclusive and round bracket indicates boundary is exclusive.\nThen remove the rest after the decimal point. (i.e. get floor) - using Math.floor(), this can be done.\n</code></pre>\n\n<p>If you know how to read random number table to pick a random number, you know above process(multiplying by 1, 10, 100 and so on) is not violates the one that I was mentioned at the beginning.( Because it changes only the place of the decimal point.)</p>\n\n<p>Study the following example and develop it to your needs.</p>\n\n<p>If you need a sample [0,9] then floor of n*10 is your answer and if need [0,99] then floor of n*100 is your answer and so on.</p>\n\n<p>Now let enter into your role:</p>\n\n<p>You've asked numbers among specific range. (In this case you are biased among that range. - By taking a number from [1,6] by roll a die, then you are biased into [1,6] but still it is a random if and only if die is unbiased.)</p>\n\n<p>So consider your range ==> [78, 247]\nnumber of elements of the range = 247 - 78 + 1 = 170; (since both the boundaries are inclusive.</p>\n\n<pre><code>/*Mthod 1:*/\n    var i = 78, j = 247, k = 170, a = [], b = [], c, d, e, f, l = 0;\n    for(; i &lt;= j; i++){ a.push(i); }\n    while(l &lt; 170){\n        c = Math.random()*100; c = Math.floor(c);\n        d = Math.random()*100; d = Math.floor(d);\n        b.push(a[c]); e = c + d;\n        if((b.length != k) &amp;&amp; (e &lt; k)){  b.push(a[e]); }\n        l = b.length;\n    }\n    console.log('Method 1:');\n    console.log(b);\n/*Method 2:*/\n\n    var a, b, c, d = [], l = 0;\n    while(l &lt; 170){\n        a = Math.random()*100; a = Math.floor(a);\n        b = Math.random()*100; b = Math.floor(b);\n        c = a + b;\n        if(c &lt;= 247 || c &gt;= 78){ d.push(c); }else{ d.push(a); }\n        l = d.length;\n    }\n    console.log('Method 2:');\n    console.log(d);\n</code></pre>\n\n<p>Note: In method one, first I created an array which contains numbers that you need and then randomly put them into another array.\nIn method two, generate numbers randomly and check those are in the range that you need. Then put it into an array. Here I generated two random numbers and used total of them to maximize the speed of the program by minimizing the failure rate that obtaining a useful number. However adding generated numbers will also give some biassness. So I would recommend my first method to generate random numbers within a specific range.</p>\n\n<p>In both methods, your console will show the result.(Press f12 in Chrome to open the console)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To get a random number say between 1 and 6, first do:</p>\n\n<pre><code>    0.5 + (Math.random() * ((6 - 1) + 1))\n</code></pre>\n\n<p>This multiplies a random number by 6 and then adds 0.5 to it. Next round the number to a positive integer by doing:</p>\n\n<pre><code>    Math.round(0.5 + (Math.random() * ((6 - 1) + 1))\n</code></pre>\n\n<p>This round the number to the nearest whole number.</p>\n\n<p>Or to make it more understandable do this:</p>\n\n<pre><code>    var value = 0.5 + (Math.random() * ((6 - 1) + 1))\n    var roll = Math.round(value);\n    return roll;\n</code></pre>\n\n<p>In general the code for doing this using variables is:</p>\n\n<pre><code>    var value = (Min - 0.5) + (Math.random() * ((Max - Min) + 1))\n    var roll = Math.round(value);\n    return roll;\n</code></pre>\n\n<p>The reason for taking away 0.5 from the minimum value is because using the minimum value alone would allow you to get an integer that was one more than your maximum value. By taking away 0.5 from the minimum value you are essentially preventing the maximum value from being rounded up.</p>\n\n<p><strong>Hope that helps.</strong></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Random whole number between lowest and highest:</p>\n\n<pre><code>function randomRange(l,h){\n  var range = (h-l);\n  var random = Math.floor(Math.random()*range);\n  if (random === 0){random+=1;}\n  return l+random;\n}\n</code></pre>\n\n<p>Not the most elegant solution.. but something quick.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Return a random number between 1 and 10:</p>\n\n<p>Math.floor((Math.random()*10)+1); </p>\n\n<p>Return a random number between 1 and 100:</p>\n\n<p>Math.floor((Math.random()*100)+1); etc....</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The other answers don't account for the perfectly reasonable parameters of <code>0</code> and <code>1</code>. Instead you should use the <code>round</code> <strong>instead</strong> of <code>ceil</code> or <code>floor</code>:</p>\n\n<pre><code>function randomNumber(minimum, maximum){\n    return Math.round( Math.random() * (maximum - minimum) + minimum);\n}\n\nconsole.log(randomNumber(0,1));  # 0 1 1 0 1 0\nconsole.log(randomNumber(5,6));  # 9 6 6 5 7 7\nconsole.log(randomNumber(3,-1)); # 1 3 1 -1 -1 -1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's what I use to generate random numbers.</p>\n\n<pre><code>function random(high,low) {\n    high++;\n    return Math.floor((Math.random())*(high-low))+low;\n}\n</code></pre>\n\n<p>We do execute <code>high++</code> because<code>Math.random()</code> generates a random number between 0, (inclusive), and 1(exclusive) The one being excluded, means we must increase the high by one before executing any math. We then subtract low from high, giving us the highest number to generate - low, then +low, bringing high back to normal, and making the lowest number atleast low. then we return the resulting number</p>\n\n<p><code>random(7,3)</code> could return <code>3,4,5,6, or 7</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>OMG! I know I'm late to the game, but how bout we make this clear, simple, and easy. As in as easy as:</p>\n\n<pre><code>function rand(min, max, whole) {\n    return void 0===whole||!1===whole?Math.random()*(max-min+1)+min:!isNaN(parseFloat(whole))&amp;&amp;0&lt;=parseFloat(whole)&amp;&amp;20&gt;=parseFloat(whole)?(Math.random()*(max-min+1)+min).toFixed(whole):Math.floor(Math.random()*(max-min+1))+min;\n};\n</code></pre>\n\n<p>This method is clear plain, simple and easy. Oh, and did I mention this also works with negative numbers?!</p>\n\n<p>Parameters:</p>\n\n<ol>\n<li>min = the minimum number allowed</li>\n<li>max = the maximum number allowed</li>\n<li>whole = If true, then return will be a whole number; however \n<ul>\n<li><code>undefined</code> is = to 'true' and will always return a whole number value</li>\n<li>If <code>false</code> then return will have decimal value</li>\n<li><em>example</em>: rand(0, 2, false); will return something like <strong><code>1.5717526022344828</code></strong></li>\n<li>If you input a # between 0 and 20 for <code>whole</code>, then the decimal places will be decided by said number</li>\n<li><em>example</em>: rand(0, 2, 2); will return something like <strong><code>1.57</code></strong></li>\n</ul></li>\n</ol>\n\n<h2>ALAS! One more NEAT trick!</h2>\n\n<p>If you alternate the numbers, enter the high for <code>min</code> and the low for <code>max</code>, the return will <strong><em>only</em></strong> ever be a number <em>between</em> those two. In other words, rand will never return thos two numbers.</p>\n\n<blockquote>\n  <p>example: rand(1, 5, true); can return 2, 3, &amp; 4, but NEVER returns 1 or 5!</p>\n</blockquote>\n\n<h2>Click <code>Show code snippet</code> below to see example of it in action!</h2>\n\n<p><sub>Or go to this handy, dandy <a href=\"http://jsfiddle.net/SpYk3/2aj6v0v2/\" rel=\"nofollow\">jsFiddle</a></sub></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function rand(min, max, whole) {\r\n\t\tvar r = !1===whole?Math.random()*(max-min+1)+min:!isNaN(parseFloat(whole))&amp;&amp;0&lt;=parseFloat(whole)&amp;&amp;20&gt;=parseFloat(whole)?(Math.random()*(max-min+1)+min).toFixed(whole):Math.floor(Math.random()*(max-min+1))+min;\r\n  return r &gt; min &amp;&amp; r &gt; max ? max : r;\r\n\t};\r\n\t\r\n\t$(document).on('keyup', '#whole[type=text]', function(e) {\r\n\t\t\tvar val = $.trim($(this).val());\r\n\t\t\tif (val !== '' &amp;&amp; $('#whole[type=checkbox]').is(':checked')) {\r\n\t\t\t\t$('#whole[type=checkbox]').prop('checked', false);\r\n\t\t\t}\r\n\t\t\telse if (val === '') $('#whole[type=checkbox]').prop('checked', true);\r\n\t\t})\r\n\t\t.on('click', 'button', function(e) { \r\n\t\t\tvar $min = parseFloat($('#min').val()),\r\n\t\t\t\t$max = parseFloat($('#max').val()),\r\n\t\t\t\t$whole = $('#whole[type=checkbox]').is(':checked'),\r\n\t\t\t\t$rand = rand($min, $max, $whole);\r\n\t\t\tif (!$whole &amp;&amp; $.trim($('#whole[type=checkbox]').val())) {\r\n\t\t\t\t$whole = parseFloat($.trim($('#whole[type=text]').val()));\r\n\t\t\t\t$rand = rand($min, $max, $whole);\r\n\t\t\t}\r\n\t\t\t$('#output').val($rand);\r\n\t\t});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;input id=\"min\" name=\"min\" type=\"text\" value=\"1\" /&gt;&lt;label for=\"min\"&gt;min&lt;/label&gt;\r\n&lt;br /&gt;\r\n&lt;input id=\"max\" name=\"max\" type=\"text\" value=\"5\" /&gt;&lt;label for=\"max\"&gt;MAX&lt;/label&gt;\r\n&lt;br /&gt;\r\n&lt;input id=\"whole\" name=\"whole\" type=\"checkbox\" checked=\"checked\" /&gt;&lt;label for=\"whole\"&gt;whole #&lt;/label&gt;\r\n&lt;input id=\"whole\" name=\"whole\" type=\"text\" placeholder=\"# of Decimal Places, if unchecked\" /&gt;\r\n&lt;hr /&gt;\r\n&lt;input id=\"output\" type=\"text\" /&gt;&lt;button&gt;get rand&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong><em>PS:</em></strong> To use as a jQuery call, simply define it as a jQuery method.</p>\n\n<pre><code>$.rand = function (min, max, whole) {\n    return void 0===whole||!1===whole?Math.random()*(max-min+1)+min:!isNaN(parseFloat(whole))&amp;&amp;0&lt;=parseFloat(whole)&amp;&amp;20&gt;=parseFloat(whole)?(Math.random()*(max-min+1)+min).toFixed(whole):Math.floor(Math.random()*(max-min+1))+min;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I generate a random whole number between two specified variables in Javascript, e.g. <code>x = 4</code> and <code>y = 8</code> would output any of 4, 5, 6, 7, 8?</p>\n",
            "last_activity_date": 1421323016,
            "question_id": 1527803,
            "score": 467,
            "tags": [
                "javascript",
                "random",
                "numbers"
            ],
            "title": "Generating random numbers in Javascript in a specific range?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Promises have state, they start as pending and can settle to:</p>\n\n<ul>\n<li><strong>fulfilled</strong> meaning that the computation completed successfully.</li>\n<li><strong>rejected</strong> meaning that the computation failed.</li>\n</ul>\n\n<p>Promise returning functions <em>should never throw</em>, they should return rejections instead. Throwing from a promise returning function will force you to use both a <code>} catch {</code> <em>and</em> a <code>.catch</code>. People using promisified APIs do not expect promises to throw.</p>\n\n<h3>1. DOM load or other one time event:</h3>\n\n<p>So, creating promises generally means specifying when they settle - that means when they move to the fulfilled or rejected phase to indicate the data is available (and can be accessed with <code>.then</code>).</p>\n\n<p>With modern promise implementations that support the <code>Promise</code> constructor like native ES6 promises:</p>\n\n<pre><code>function load(){\n    return new Promise(function(resolve,reject){\n         window.onload = resolve;\n    });\n}\n</code></pre>\n\n<p>With libraries that support deferred (Let's use $q for this example here, but we'll also use jQuery later):</p>\n\n<pre><code>function load(){\n    var d = $q.defer();\n    window.onload = function(){ d.resolve(); };\n    return d.promise;\n}\n</code></pre>\n\n<p>Or with a jQuery like API, hooking on an event happening once:</p>\n\n<pre><code>function done(){\n    var d = $.Deferred();\n    $(\"#myObject\").once(\"click\",function(){\n         d.resolve();\n    });\n    return d.promise();\n}\n</code></pre>\n\n<h3>2. Plain callback:</h3>\n\n<p>These APIs are rather common since well... callbacks are common in JS. Let's look at the common case of having <code>onSuccess</code> and <code>onFail</code>:</p>\n\n<pre><code> function getUserData(userId, onLoad, onFail){ ...\n</code></pre>\n\n<p>With modern promise implementations that support the <code>Promise</code> constructor like native ES6 promises:</p>\n\n<pre><code>function getUserDataAsync(userId){\n    return new Promise(function(resolve,reject){\n         getUserData(userId,resolve,reject);\n    });\n}\n</code></pre>\n\n<p>With libraries that support deferred (Let's use jQuery for this example here, but we've also used $q above):</p>\n\n<pre><code>function getUserDataAsync(userId){\n    var d = $.Deferred();\n    getUserData(userId,function(res){ d.resolve(res); } ,function(err){ d.reject(err); });\n    return d.promise();\n}\n</code></pre>\n\n<p>jQuery also offers a <code>$.Deferred(fn)</code> form, which has the advantage of allowing us to write an expression that emulates very closely the <code>new Promise(fn)</code> form, as follows:</p>\n\n<pre><code>function getUserDataAsync(userId) {\n    return $.Deferred(function(dfrd) {\n        getUserData(userId, dfrd.resolve, dfrd.reject);\n    }).promise();\n}\n</code></pre>\n\n<p>Note: Here we exploit the fact that a jQuery deferred's <code>resolve</code> and <code>reject</code> methods are \"detachable\"; ie. they are bound to the <em>instance</em> of a jQuery.Deferred(). Not all libs offer this feature.</p>\n\n<h3>3. Node style callback (\"nodeback\"):</h3>\n\n<p>Node style callbacks (nodebacks) have a particular format where the callbacks is always the last argument and its first parameter is an error. Let's first promisify one manually:</p>\n\n<pre><code>getStuff(\"dataParam\",function(err,data){\n</code></pre>\n\n<p>To:</p>\n\n<pre><code>function getStuffAsync(param){\n    return new Promise(function(resolve,reject){\n         getStuff(param,function(err,data){\n             if(err !== null) return reject(err);\n             resolve(data);\n         });\n    });\n}\n</code></pre>\n\n<p>With deferreds you can do the following (let's use Q for this example, although Q now supports the new syntax which you should prefer): </p>\n\n<pre><code>function getStuffAsync(param){\n    var d = Q.defer();\n    getStuff(param,function(err,data){\n         if(err !== null) return d.reject(err); // `throw err` also works here.\n             d.resolve(data);\n    });\n    return d.promise;   \n}\n</code></pre>\n\n<p>In general, you should not promisify things manually too much, most promise libraries that were designed with Node in mind have a built in method for promisifying nodebacks. For example</p>\n\n<pre><code>var getStuffAsync = Promise.promisify(getStuff); // Bluebird\nvar getStuffAsync = Q.denodeify(getStuff); // Q\n</code></pre>\n\n<h3>4. A whole library with node style callbacks:</h3>\n\n<p>There is no golden rule here, you promisify them one by one. However, some promise implementations allow you to do this in bulk, for example in Bluebird, converting a nodeback API to a promise API is as simple as:</p>\n\n<pre><code>Promise.promisifyAll(API);\n</code></pre>\n\n<p>Notes:</p>\n\n<ul>\n<li>Of course, when you are in a <code>.then</code> handler you do not need to promisify things. Returning a promise from a <code>.then</code> handler will resolve or reject with that promise's value. Throwing from a <code>.then</code> handler is also good practice and will reject the promise - this is the famous promise throw safety. </li>\n<li>In an actual <code>onload</code> case, you should use <code>addEventListener</code> rather than <code>onX</code>.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 55
                },
                {
                    "body": "<p>I don't think the <code>window.onload</code> suggestion by @Benjamin will work all the time, as it doesn't detect whether it is called after the load. I have been bitten by that many times. Here is a version which should always work:</p>\n\n<pre><code>function promiseDOMready() {\n    return new Promise(function(resolve) {\n        if (document.readyState === \"complete\") return resolve();\n        document.addEventListener(\"DOMContentLoaded\", resolve);\n    });\n}\npromiseDOMready().then(initOnLoad);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I want to work with promises but I have a callback API in a format like:</p>\n\n<h3>1. DOM load or other one time event:</h3>\n\n<pre><code>window.onload; // set to callback\n...\nwindow.onload = function(){\n\n};\n</code></pre>\n\n<h3>2. Plain callback:</h3>\n\n<pre><code>function request(onChangeHandler){\n...\nrequest(function(){\n    // change happened\n});\n</code></pre>\n\n<h3>3. Node style callback (\"nodeback\"):</h3>\n\n<pre><code>function getStuff(dat,callback){\n...\ngetStuff(\"dataParam\",function(err,data){\n\n}\n</code></pre>\n\n<h3>4. A whole library with node style callbacks:</h3>\n\n<pre><code>API;\nAPI.one(function(err,data){\n    API.two(function(err,data2){\n        API.three(function(err,data3){\n\n        })\n    });\n});\n</code></pre>\n\n<h3>How do I work with the API in promises, how do I \"promisify\" it?</h3>\n",
            "last_activity_date": 1425385932,
            "question_id": 22519784,
            "score": 44,
            "tags": [
                "javascript",
                "node.js",
                "callback",
                "promise",
                "bluebird"
            ],
            "title": "How do I convert an existing callback API to promises?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>TinyMCE does this and it is not obfuscated.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is slightly tricky as you have to know when the iframe page has loaded, which is difficuly when you're not in control of its content. Its possible to add an onload handler to the iframe, but I've tried this in the past and it has vastly different behaviour across browsers (not guess who's the most annoying...). You'd probably have to add a function to the iframe page that performs the resize and inject some script into the content that either listens to load events or resize events, which then calls the previous function. I'm thinking add a function to the page since you want to make sure its secure, but I have no idea how easy it will be to do.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Something on the lines of this i belive should work.</p>\n\n<pre><code>parent.document.getElementById(iFrameID).style.height=framedPage.scrollHeight;\n</code></pre>\n\n<p>Load this with your body onload on the iframe content.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The solution on <a href=\"http://www.phinesolutions.com/use-jquery-to-adjust-the-iframe-height.html\">http://www.phinesolutions.com/use-jquery-to-adjust-the-iframe-height.html</a> works great (uses jQuery):</p>\n\n<pre><code>&lt;script type=\u201dtext/javascript\u201d&gt;\n$(document).ready(function() {\nvar theFrame = $(\u201d#iFrameToAdjust\u201d, parent.document.body);\ntheFrame.height($(document.body).height() + 30);\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>I don't know that you need to add 30 to the length... 1 worked for me.</p>\n\n<p><b>FYI</b>: If you already have a \"height\" attribute on your iFrame, this just adds style=\"height: xxx\".  This might not be what you want.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>iGoogle gadgets have to actively implement resizing, so my guess is in a cross-domain model you can't do this without the remote content taking part in some way. If your content can send a message with the new size to the container page using typical cross-domain communication techniques, then the rest is simple.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>We had this type of problem, but slightly in reverse to your situation - we were providing the iframed content to sites on other domains, so the <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a> was also an issue. After many hours spent trawling google, we eventually found a (somewhat..) workable solution, which you may be able to adapt to your needs.</p>\n\n<p>There is a way around the same origin policy, but it requires changes on both the iframed content and the framing page, so if you haven't the ability to request changes on both sides, this method won't be very useful to you, i'm afraid.</p>\n\n<p>There's a browser quirk which allows us to skirt the same origin policy - javascript can communicate either with pages on its own domain, or with pages it has iframed, but never pages in which it is framed, e.g. if you have:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> www.foo.com/home.html, which iframes\n |-&gt; www.bar.net/framed.html, which iframes\n     |-&gt; www.foo.com/helper.html\n</code></pre>\n\n<p>then <code>home.html</code> can communicate with <code>framed.html</code> (iframed) and <code>helper.html</code> (same domain). </p>\n\n<pre class=\"lang-none prettyprint-override\"><code> Communication options for each page:\n +-------------------------+-----------+-------------+-------------+\n |                         | home.html | framed.html | helper.html |\n +-------------------------+-----------+-------------+-------------+\n | www.foo.com/home.html   |    N/A    |     YES     |     YES     |\n | www.bar.net/framed.html |    NO     |     N/A     |     YES     |\n | www.foo.com/helper.html |    YES    |     YES     |     N/A     |\n +-------------------------+-----------+-------------+-------------+\n</code></pre>\n\n<p><code>framed.html</code> can send messages to <code>helper.html</code> (iframed) but <em>not</em> <code>home.html</code> (child can't communicate cross-domain with parent).</p>\n\n<p>The key here is that <code>helper.html</code> can receive messages from <code>framed.html</code>, and <strong>can also communicate</strong> with <code>home.html</code>. </p>\n\n<p>So essentially, when <code>framed.html</code> loads, it works out its own height, tells <code>helper.html</code>, which passes the message on to <code>home.html</code>, which can then resize the iframe in which <code>framed.html</code> sits. </p>\n\n<p>The simplest way we found to pass messages from <code>framed.html</code> to <code>helper.html</code> was through a URL argument. To do this, <code>framed.html</code> has an iframe with <code>src=''</code> specified. When its <code>onload</code> fires, it evaluates its own height, and sets the src of the iframe at this point to <code>helper.html?height=N</code></p>\n\n<p><a href=\"http://www.quora.com/How-does-Facebook-Connect-do-cross-domain-communication\">There's an explanation here</a> of how facebook handle it, which may be slightly clearer than mine above!</p>\n\n<p><hr />\n<strong>Code</strong></p>\n\n<p>In <code>www.foo.com/home.html</code>, the following javascript code is required (this can be loaded from a .js file on any domain, incidentally..):</p>\n\n<pre><code>&lt;script&gt;\n  // Resize iframe to full height\n  function resizeIframe(height)\n  {\n    // \"+60\" is a general rule of thumb to allow for differences in\n    // IE &amp; and FF height reporting, can be adjusted as required..\n    document.getElementById('frame_name_here').height = parseInt(height)+60;\n  }\n&lt;/script&gt;\n&lt;iframe id='frame_name_here' src='http://www.bar.net/framed.html'&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>In <code>www.bar.net/framed.html</code>:</p>\n\n<pre><code>&lt;body onload=\"iframeResizePipe()\"&gt;\n&lt;iframe id=\"helpframe\" src='' height='0' width='0' frameborder='0'&gt;&lt;/iframe&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n  function iframeResizePipe()\n  {\n     // What's the page height?\n     var height = document.body.scrollHeight;\n\n     // Going to 'pipe' the data to the parent through the helpframe..\n     var pipe = document.getElementById('helpframe');\n\n     // Cachebuster a precaution here to stop browser caching interfering\n     pipe.src = 'http://www.foo.com/helper.html?height='+height+'&amp;cacheb='+Math.random();\n\n  }\n&lt;/script&gt;\n</code></pre>\n\n<p>Contents of <code>www.foo.com/helper.html</code>:</p>\n\n<pre><code>&lt;html&gt; \n&lt;!-- \nThis page is on the same domain as the parent, so can\ncommunicate with it to order the iframe window resizing\nto fit the content \n--&gt; \n  &lt;body onload=\"parentIframeResize()\"&gt; \n    &lt;script&gt; \n      // Tell the parent iframe what height the iframe needs to be\n      function parentIframeResize()\n      {\n         var height = getParam('height');\n         // This works as our parent's parent is on our domain..\n         parent.parent.resizeIframe(height);\n      }\n\n      // Helper function, parse param from request string\n      function getParam( name )\n      {\n        name = name.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n        var regexS = \"[\\\\?&amp;]\"+name+\"=([^&amp;#]*)\";\n        var regex = new RegExp( regexS );\n        var results = regex.exec( window.location.href );\n        if( results == null )\n          return \"\";\n        else\n          return results[1];\n      }\n    &lt;/script&gt; \n  &lt;/body&gt; \n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 481
                },
                {
                    "body": "<p>If you do not need to handle iframe content from a different domain, try this code, it will solve the problem completely and it's simple:</p>\n\n<pre><code>&lt;script language=\"JavaScript\"&gt;\n&lt;!--\nfunction autoResize(id){\n    var newheight;\n    var newwidth;\n\n    if(document.getElementById){\n        newheight=document.getElementById(id).contentWindow.document .body.scrollHeight;\n        newwidth=document.getElementById(id).contentWindow.document .body.scrollWidth;\n    }\n\n    document.getElementById(id).height= (newheight) + \"px\";\n    document.getElementById(id).width= (newwidth) + \"px\";\n}\n//--&gt;\n&lt;/script&gt;\n\n&lt;iframe src=\"usagelogs/default.aspx\" width=\"100%\" height=\"200px\" id=\"iframe1\" marginheight=\"0\" frameborder=\"0\" onLoad=\"autoResize('iframe1');\"&gt;&lt;/iframe&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>Here is a simple solution using a dynamically generated style sheet served up by the same server as the iframe content.  Quite simply the style sheet \"knows\" what is in the iframe, and knows the dimensions to use to style the iframe.  This gets around the same origin policy restrictions.  </p>\n\n<p><a href=\"http://www.8degrees.co.nz/2010/06/09/dynamically-resize-an-iframe-depending-on-its-content/\" rel=\"nofollow\">http://www.8degrees.co.nz/2010/06/09/dynamically-resize-an-iframe-depending-on-its-content/</a></p>\n\n<p>So the supplied iframe code would have an accompanying style sheet like so...</p>\n\n<p><code>&lt;link href=\"http://your.site/path/to/css?contents_id=1234&amp;dom_id=iframe_widget\" rel=\"stylesheet\" type=\"text/css\" /&gt;\u2028\n&lt;iframe id=\"iframe_widget\" src=\"http://your.site/path/to/content?content_id=1234\" frameborder=\"0\" width=\"100%\" scrolling=\"no\"&gt;&lt;/iframe&gt;</code></p>\n\n<p>This does require the server side logic being able to calculate the dimensions of the rendered content of the iframe.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/DOM/window.postMessage\">https://developer.mozilla.org/en/DOM/window.postMessage</a></p>\n\n<blockquote>\n  <p><em>window.postMessage()</em></p>\n  \n  <p>window.postMessage is a method for safely enabling cross-origin communication. Normally, scripts on different pages are only allowed to access each other if and only if the pages which executed them are at locations with the same protocol (usually both http), port number (80 being the default for http), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.</p>\n  \n  <p><em>Summary</em></p>\n  \n  <p>window.postMessage, when called, causes a MessageEvent to be dispatched at the target window when any pending script that must be executed completes (e.g. remaining event handlers if window.postMessage is called from an event handler, previously-set pending timeouts, etc.). The MessageEvent has the type message, a data property which is set to the string value of the first argument provided to window.postMessage, an origin property corresponding to the origin of the main document in the window calling window.postMessage at the time window.postMessage was called, and a source property which is the window from which window.postMessage is called. (Other standard properties of events are present with their expected values.)</p>\n</blockquote>\n\n<p>The <em>iFrame-Resizer</em> library uses postMessage to keep an iFrame sized to it's content, along with <a href=\"https://developer.mozilla.org/en/docs/Web/API/MutationObserver\">MutationObserver</a> to detect changes to the content and doesn't depend on jQuery.</p>\n\n<p><a href=\"https://github.com/davidjbradshaw/iframe-resizer\">https://github.com/davidjbradshaw/iframe-resizer</a></p>\n\n<p>jQuery: Cross-domain scripting goodness</p>\n\n<p><a href=\"http://benalman.com/projects/jquery-postmessage-plugin/\">http://benalman.com/projects/jquery-postmessage-plugin/</a></p>\n\n<p>Has demo of resizing iframe window...</p>\n\n<p><a href=\"http://benalman.com/code/projects/jquery-postmessage/examples/iframe/\">http://benalman.com/code/projects/jquery-postmessage/examples/iframe/</a></p>\n\n<p>This article shows how to remove the dependency on jQuery... Plus has a lot of useful info and links to other solutions. </p>\n\n<p><a href=\"http://www.onlineaspect.com/2010/01/15/backwards-compatible-postmessage/\">http://www.onlineaspect.com/2010/01/15/backwards-compatible-postmessage/</a></p>\n\n<p>Barebones example...</p>\n\n<p><a href=\"http://onlineaspect.com/uploads/postmessage/parent.html\">http://onlineaspect.com/uploads/postmessage/parent.html</a></p>\n\n<p>HTML 5 working draft on window.postMessage</p>\n\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\">http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages</a></p>\n\n<p>John Resig on Cross-Window Messaging</p>\n\n<p><a href=\"http://ejohn.org/blog/cross-window-messaging/\">http://ejohn.org/blog/cross-window-messaging/</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>When you want to zoom out a web page to fit it into the iframe size:</p>\n\n<ol>\n<li>You should resize the <strong>iframe</strong> to fit it with the content</li>\n<li>Then you should zoom out the whole iframe with the loaded web page content</li>\n</ol>\n\n<p>Here is an example:</p>\n\n<pre><code>&lt;div id=\"wrap\"&gt;\n   &lt;IFRAME ID=\"frame\" name=\"Main\" src =\"http://www.google.com\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<hr>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n    #wrap { width: 130px; height: 130px; padding: 0; overflow: hidden; }\n    #frame { width: 900px; height: 600px; border: 1px solid black; }\n    #frame { zoom:0.15; -moz-transform:scale(0.15);-moz-transform-origin: 0 0; }\n&lt;/style&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have an easy solution and requires you to determine the width and height in the link, please try (It works with most browsers):</p>\n\n<pre><code>&lt;a href='#' onClick=\" document.getElementById('myform').src='t2.htm';document.getElementById('myform').width='500px'; document.getElementById('myform').height='400px'; return false\"&gt;500x400&lt;/a&gt;\n</code></pre>\n\n\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>I'm implementing ConroyP's frame-in-frame solution to replace a solution based on setting document.domain, but found it to be quite hard determining the height of the iframe's content correctly in different browsers (testing with FF11, Ch17 and IE9 right now).</p>\n\n<p>ConroyP uses:</p>\n\n<pre><code>var height = document.body.scrollHeight;\n</code></pre>\n\n<p>But that only works on the initial page load. My iframe has dynamic content and I need to resize the iframe on certain events.</p>\n\n<p>What I ended up doing was using different JS properties for the different browsers.</p>\n\n<pre><code>function getDim () {\n    var body = document.body,\n        html = document.documentElement;\n\n    var bc = body.clientHeight;\n    var bo = body.offsetHeight;\n    var bs = body.scrollHeight;\n    var hc = html.clientHeight;\n    var ho = html.offsetHeight;\n    var hs = html.scrollHeight;\n\n    var h = Math.max(bc, bo, bs, hc, hs, ho);\n\n    var bd = getBrowserData();\n\n    // Select height property to use depending on browser\n    if (bd.isGecko) {\n        // FF 11\n        h = hc;\n    } else if (bd.isChrome) {\n        // CH 17\n        h = hc;\n    } else if (bd.isIE) {\n        // IE 9\n        h = bs;\n    }\n\n    return h;\n}\n</code></pre>\n\n<p><em>getBrowserData() is browser detect function \"inspired\" by Ext Core's <a href=\"http://docs.sencha.com/core/source/Ext.html#method-Ext-apply\" rel=\"nofollow\">http://docs.sencha.com/core/source/Ext.html#method-Ext-apply</a></em></p>\n\n<p>That worked well for FF and IE but then there were issues with Chrome. One of the was a timing issue, apparently it takes Chrome a while to set/detect the hight of the iframe. And then Chrome also never returned the height of the content in the iframe correctly if the iframe was higher than the content. This wouldn't work with dynamic content when the height is reduced.</p>\n\n<p>To solve this I always set the iframe to a low height before detecting the content's height and then setting the iframe height to it's correct value.</p>\n\n<pre><code>function resize () {\n    // Reset the iframes height to a low value.\n    // Otherwise Chrome won't detect the content height of the iframe.\n    setIframeHeight(150);\n\n    // Delay getting the dimensions because Chrome needs\n    // a few moments to get the correct height.\n    setTimeout(\"getDimAndResize()\", 100);\n}\n</code></pre>\n\n<p>The code is not optimized, it's from my devel testing :)</p>\n\n<p>Hope someone finds this helpful!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The simplest way using jQuery:</p>\n\n<pre><code>$(\"iframe\")\n.attr({\"scrolling\": \"no\", \"src\":\"http://www.someotherlink.com/\"})\n.load(function() {\n    $(this).css(\"height\", $(this).contents().height() + \"px\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Here's a jQuery approach that adds the info in json via the src attribute of the iframe.  Here's a demo, resize and scroll this window.. the resulting url with json looks like this... \n<a href=\"http://fiddle.jshell.net/zippyskippy/RJN3G/show/#%7BdocHeight:5124,windowHeight:1019,scrollHeight:571%7D#\" rel=\"nofollow\">http://fiddle.jshell.net/zippyskippy/RJN3G/show/#{docHeight:5124,windowHeight:1019,scrollHeight:571}#</a></p>\n\n<p>Here's the source code fiddle <a href=\"http://jsfiddle.net/zippyskippy/RJN3G/\" rel=\"nofollow\">http://jsfiddle.net/zippyskippy/RJN3G/</a></p>\n\n<pre><code>function updateLocation(){\n\n    var loc = window.location.href;\n    window.location.href = loc.replace(/#{.*}#/,\"\") \n        + \"#{docHeight:\"+$(document).height() \n        + \",windowHeight:\"+$(window).height()\n        + \",scrollHeight:\"+$(window).scrollTop()\n        +\"}#\";\n\n};\n\n//setInterval(updateLocation,500);\n\n$(window).resize(updateLocation);\n$(window).scroll(updateLocation);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction frameSize(id){\nvar frameHeight;\n\ndocument.getElementById(id).height=0 + \"px\";\nif(document.getElementById){\n    newheight=document.getElementById(id).contentWindow.document.body.scrollHeight;    \n}\n\ndocument.getElementById(id).height= (frameHeight) + \"px\";\n}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;iframe id=\"frame\"  src=\"startframe.html\" frameborder=\"0\" marginheight=\"0\" hspace=20     width=\"100%\" \n\nonload=\"javascript:frameSize('frame');\"&gt;\n\n&lt;p&gt;This will work, but you need to host it on an http server, you can do it locally.    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>get iframe content height then give it to this iframe</h2>\n\n<pre><code> var iframes = document.getElementsByTagName(\"iframe\");\n for(var i = 0, len = iframes.length; i&lt;len; i++){\n      window.frames[i].onload = function(_i){\n           return function(){\n                     iframes[_i].style.height = window.frames[_i].document.body.scrollHeight + \"px\";\n                     }\n      }(i);\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>may be a bit late, as all the other answers are older :-) but... here\u00b4s my solution. Tested in actual FF, Chrome and Safari 5.0.</p>\n\n<p>css:</p>\n\n<pre><code>iframe {border:0; overflow:hidden;}\n</code></pre>\n\n<p>javascript:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"iframe\").load( function () {\n        var c = (this.contentWindow || this.contentDocument);\n        if (c.document) d = c.document;\n        var ih = $(d).outerHeight();\n        var iw = $(d).outerWidth();\n        $(this).css({\n            height: ih,\n            width: iw\n        });\n    });\n});\n</code></pre>\n\n<p>Hope this will help anybody.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Finally I found some other solution for sending data to parent website from iframe using <code>window.postMessage(message, targetOrigin);</code>. Here I explain How I did.</p>\n\n<p>Site A = <a href=\"http://foo.com\" rel=\"nofollow\">http://foo.com</a> \nSite B = <a href=\"http://bar.com\" rel=\"nofollow\">http://bar.com</a></p>\n\n<p>SiteB is loading inside the siteA website</p>\n\n<p>SiteB website have this line</p>\n\n<pre><code>window.parent.postMessage(\"Hello From IFrame\", \"*\"); \n</code></pre>\n\n<p>or</p>\n\n<pre><code>window.parent.postMessage(\"Hello From IFrame\", \"http://foo.com\");\n</code></pre>\n\n<p>Then siteA have this following code</p>\n\n<pre><code>// Here \"addEventListener\" is for standards-compliant web browsers and \"attachEvent\" is for IE Browsers.\nvar eventMethod = window.addEventListener ? \"addEventListener\" : \"attachEvent\";\nvar eventer = window[eventMethod];\n\n\nvar messageEvent = eventMethod == \"attachEvent\" ? \"onmessage\" : \"message\";\n\n// Listen to message from child IFrame window\neventer(messageEvent, function (e) {\n   alert(e.data);\n   // Do whatever you want to do with the data got from IFrame in Parent form.\n}, false); \n</code></pre>\n\n<p>If you want to add security connection you can use this if condition in <code>eventer(messageEvent, function (e) {})</code></p>\n\n<pre><code>if (e.origin == 'http://iframe.example.com') {\n    alert(e.data); \n    // Do whatever you want to do with the data got from IFrame in Parent form.\n}\n</code></pre>\n\n<p><strong>For IE</strong></p>\n\n<p>Inside IFrame:</p>\n\n<pre><code> window.parent.postMessage('{\"key\":\"value\"}','*');\n</code></pre>\n\n<p>Outside:</p>\n\n<pre><code> eventer(messageEvent, function (e) {\n   var data = jQuery.parseJSON(e.data);\n   doSomething(data.key);\n }, false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Work with jquery on load (cross browser):</p>\n\n<pre><code> &lt;iframe src=\"your_url\" marginwidth=\"0\"  marginheight=\"0\" scrolling=\"No\" frameborder=\"0\"  hspace=\"0\" vspace=\"0\" id=\"containiframe\" onload=\"loaderIframe();\" height=\"100%\"  width=\"100%\"&gt;&lt;/iframe&gt;\n\nfunction loaderIframe(){\nvar heightIframe = $('#containiframe').contents().find('body').height();\n$('#frame').css(\"height\", heightFrame);\n }  \n</code></pre>\n\n<p>on resize in responsive page:</p>\n\n<pre><code>$(window).resize(function(){\nif($('#containiframe').length !== 0) {\nvar heightIframe = $('#containiframe').contents().find('body').height();\n $('#frame').css(\"height\", heightFrame);\n}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This answer is only applicable for websites which uses Bootstrap. The responsive embed feature of the Bootstrap does the job. It is based on the width (not height) of the content.</p>\n\n<pre><code>&lt;!-- 16:9 aspect ratio --&gt;\n&lt;div class=\"embed-responsive embed-responsive-16by9\"&gt;\n  &lt;iframe class=\"embed-responsive-item\" src=\"http://www.youtube.com/embed/WsFWhL4Y84Y\"&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>jsfiddle:  <a href=\"http://jsfiddle.net/00qggsjj/2/\" rel=\"nofollow\">http://jsfiddle.net/00qggsjj/2/</a></p>\n\n<p><a href=\"http://getbootstrap.com/components/#responsive-embed\" rel=\"nofollow\">http://getbootstrap.com/components/#responsive-embed</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am working on an iGoogle-like application. Content from other applications (on other domains) is shown using iframes. </p>\n\n<p>How do I resize the iframes to fit the height of the iframes' content?</p>\n\n<p>I've tried to decipher the javascript Google uses but it's obfuscated, and searching the web has been fruitless so far.</p>\n\n<p><strong>Update:</strong> Please note that content is loaded from other domains, so the same-origin policy applies.</p>\n",
            "last_activity_date": 1422935234,
            "question_id": 153152,
            "score": 392,
            "tags": [
                "javascript",
                "iframe",
                "widget"
            ],
            "title": "Resizing an iframe based on content"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>It depends on how the events are attached. For illustration presume we have the following click handler:</p>\n\n<pre><code>var handler = function() { alert('clicked!') };\n</code></pre>\n\n<p>We're going to attach it to our element using different methods, some which allow inspection and some that don't.</p>\n\n<p>Method A) single event handler</p>\n\n<pre><code>element.onclick = handler;\n// inspect\nalert(element.onclick); // alerts \"function() { alert('clicked!') }\"\n</code></pre>\n\n<p>Method B) multiple event handlers</p>\n\n<pre><code>if(element.addEventListener) { // DOM standard\n    element.addEventListener('click', handler, false)\n} else if(element.attachEvent) { // IE\n    element.attachEvent('onclick', handler)\n}\n// cannot inspect element to find handlers\n</code></pre>\n\n<p>Method C): jQuery</p>\n\n<pre><code>$(element).click(handler);\n</code></pre>\n\n<ul>\n<li><p>1.3.x</p>\n\n<pre><code>// inspect\nvar clickEvents = $(element).data(\"events\").click;\njQuery.each(clickEvents, function(key, value) {\n    alert(value) // alerts \"function() { alert('clicked!') }\"\n})\n</code></pre></li>\n<li><p>1.4.x (stores the handler inside an object)</p>\n\n<pre><code>// inspect\nvar clickEvents = $(element).data(\"events\").click;\njQuery.each(clickEvents, function(key, handlerObj) {\n    alert(handlerObj.handler) // alerts \"function() { alert('clicked!') }\"\n    // also available: handlerObj.type, handlerObj.namespace\n})\n</code></pre></li>\n</ul>\n\n<p><sup>(See <a href=\"http://docs.jquery.com/Core/data#name\"><code>jQuery.fn.data</code></a> and <a href=\"http://docs.jquery.com/Internals/jQuery.data\"><code>jQuery.data</code></a>)</sup></p>\n\n<p>Method D): Prototype (messy)</p>\n\n<pre><code>$(element).observe('click', handler);\n</code></pre>\n\n<ul>\n<li><p>1.5.x</p>\n\n<pre><code>// inspect\nEvent.observers.each(function(item) {\n    if(item[0] == element) {\n        alert(item[2]) // alerts \"function() { alert('clicked!') }\"\n    }\n})\n</code></pre></li>\n<li><p>1.6 to 1.6.0.3, inclusive (got very difficult here)</p>\n\n<pre><code>// inspect. \"_eventId\" is for &lt; 1.6.0.3 while \n// \"_prototypeEventID\" was introduced in 1.6.0.3\nvar clickEvents = Event.cache[element._eventId || (element._prototypeEventID || [])[0]].click;\nclickEvents.each(function(wrapper){\n    alert(wrapper.handler) // alerts \"function() { alert('clicked!') }\"\n})\n</code></pre></li>\n<li><p>1.6.1 (little better)</p>\n\n<pre><code>// inspect\nvar clickEvents = element.getStorage().get('prototype_event_registry').get('click');\nclickEvents.each(function(wrapper){\n    alert(wrapper.handler) // alerts \"function() { alert('clicked!') }\"\n})\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 267
                },
                {
                    "body": "<p>If you have Firebug, you can use console.dir(object or array) to print a nice tree in the console log of any javascript scalar, array, or object. \nTry: \n<code>console.dir(clickEvents);</code>\nor\n<code>console.dir(window);</code></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If you just need to inspect what's happening on a page, you might try the <a href=\"http://www.sprymedia.co.uk/article/Visual+Event\">Visual Event</a> bookmarklet.</p>\n\n<p><strong>Update</strong>: <a href=\"http://www.sprymedia.co.uk/article/Visual+Event+2\">Visual Event 2</a> available;</p>\n",
                    "is_accepted": true,
                    "score": 330
                },
                {
                    "body": "<p>WebKit Inspector in Chrome or Safari browsers now does this. It will display the event listeners for a DOM element when you select it in the Elements pane.</p>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p><strong>It is possible to list all event listeners</strong> in JavaScript: It's not that hard; you just have to hack the <code>prototype</code>'s method of the HTML elements (<em>before</em> adding the listeners).</p>\n\n<pre><code>function reportIn(e){\n    var a = this.lastListenerInfo[this.lastListenerInfo.length-1];\n    console.log(a)\n}\n\n\nHTMLAnchorElement.prototype.realAddEventListener = HTMLAnchorElement.prototype.addEventListener;\n\nHTMLAnchorElement.prototype.addEventListener = function(a,b,c){\n    this.realAddEventListener(a,reportIn,c); \n    this.realAddEventListener(a,b,c); \n    if(!this.lastListenerInfo){  this.lastListenerInfo = new Array()};\n    this.lastListenerInfo.push({a : a, b : b , c : c});\n};\n</code></pre>\n\n<p>Now every anchor element (<code>a</code>) will have a <code>lastListenerInfo</code> property wich contains all of its listeners. And it even works for removing listeners with anonymous functions.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>(Rewriting the answer from <a href=\"http://stackoverflow.com/questions/2382994/how-to-check-if-any-javascript-event-listeners-handlers-attached-to-an-element-d/13017468#13017468\">this question</a> since it's relevant here.)</p>\n\n<p>When debugging, if you just want to see the events, I recommend either... </p>\n\n<ol>\n<li><a href=\"http://www.sprymedia.co.uk/article/Visual+Event+2\">Visual Event</a></li>\n<li>The <em>Elements</em> section of Chrome's Developer Tools: select an element and look for \"Event Listeners\" on the bottom right (similar in Firefox)</li>\n</ol>\n\n<p>If you want to use the events in your code, and you are using jQuery <em>before version 1.8</em>, you can use: </p>\n\n<pre><code>$(selector).data(\"events\")\n</code></pre>\n\n<p>to get the events. <strong>As of version 1.8, using .data(\"events\") is discontinued</strong> (see <a href=\"http://bugs.jquery.com/ticket/10589\">this bug ticket</a>). You can use:</p>\n\n<pre><code>$._data(element, \"events\")\n</code></pre>\n\n<p>Another example: Write all click events on a certain link to the console:</p>\n\n<pre><code>var $myLink = $('a.myClass');\nconsole.log($._data($myLink[0], \"events\").click);\n</code></pre>\n\n<p>(see <a href=\"http://jsfiddle.net/HmsQC/\">http://jsfiddle.net/HmsQC/</a> for a working example)</p>\n\n<p>Unfortunately, <strong>using $._data this is not recommended</strong> except for debugging since it is an internal jQuery structure, and could change in future releases. Unfortunately I know of no other easy means of accessing the events.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Prototype 1.7.1 way</p>\n\n<pre><code>function get_element_registry(element) {\n    var cache = Event.cache;\n    if(element === window) return 0;\n    if(typeof element._prototypeUID === 'undefined') {\n        element._prototypeUID = Element.Storage.UID++;\n    }\n    var uid =  element._prototypeUID;           \n    if(!cache[uid]) cache[uid] = {element: element};\n    return cache[uid];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Chrome supports getEventListeners on a node.</p>\n\n<p>For majority of the debugging purposes, this could be used. </p>\n\n<p>Below is a very good reference to use it:\n<a href=\"https://developers.google.com/chrome-developer-tools/docs/commandline-api#geteventlistenersobject\">https://developers.google.com/chrome-developer-tools/docs/commandline-api#geteventlistenersobject</a></p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Opera 12 (not the latest Chrome Webkit engine based) <a href=\"http://www.opera.com/dragonfly/\">Dragonfly</a> has had this for a while and is obviously displayed in the DOM structure. In my opinion it is a superior debugger and is the only reason remaining why I still use the Opera 12 based version (there is no v13, v14 version and the v15 Webkit based lacks Dragonfly still)</p>\n\n<p><img src=\"http://i.stack.imgur.com/Lwfo6.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>use getEventListeners in google chrome\ngetEventListeners(document.getElementByID('btnlogin'));\ngetEventListeners($('#btnlogin'));</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>1: <code>Prototype.observe</code> uses Element.addEventListener (see <a href=\"https://github.com/sstephenson/prototype/blob/ecacc02/src/prototype/dom/event.js#L759\">the source code</a>)</p>\n\n<p>2: You can override <code>Element.addEventListener</code> to remember the added listeners (handy property <code>EventListenerList</code> was removed from DOM3 spec proposal). Run this code before any event is attached:</p>\n\n<pre><code>(function() {\n  Element.prototype.eventListenerList = {};\n  Element.prototype._addEventListener = Element.prototype.addEventListener;\n  Element.prototype.addEventListener = function(a,b,c) {\n    this._addEventListener(a,b,c);\n    if(!this.eventListenerList[a]) this.eventListenerList[a] = [];\n    this.eventListenerList[a].push(b);\n  };\n})();\n</code></pre>\n\n<p>Read all the events by:</p>\n\n<pre><code>var clicks = someElement.eventListenerList.click;\nif(clicks) clicks.forEach(function(f) {\n  alert(\"I listen to this function: \"+f.toString());\n});\n</code></pre>\n\n<p>And don't forget to override <code>Element.removeEventListener</code> to remove the event from the custom <code>Element.eventListenerList</code>.</p>\n\n<p>3: the <code>Element.onclick</code> property needs special care here:</p>\n\n<pre><code>if(someElement.onclick)\n  alert(\"I also listen tho this: \"+someElement.onclick.toString());\n</code></pre>\n\n<p>4: don't forget the <code>Element.onclick</code> content attribute: these are two different things:</p>\n\n<pre><code>someElement.onclick = someHandler; // IDL attribute\nsomeElement.setAttribute(\"onclick\",\"otherHandler(event)\"); // content attribute\n</code></pre>\n\n<p>So you need to handle it, too:</p>\n\n<pre><code>var click = someElement.getAttribute(\"onclick\");\nif(click) alert(\"I even listen to this: \"+click);\n</code></pre>\n\n<p>The Visual Event bookmarklet (mentioned in the most popular answer) only steals the custom library handler cache:</p>\n\n<blockquote>\n  <p>It turns out that there is no standard method provided by the W3C\n  recommended DOM interface to find out what event listeners are\n  attached to a particular element. While this may appear to be an\n  oversight, there was a proposal to include a property called\n  eventListenerList to the level 3 DOM specification, but was\n  unfortunately been removed in later drafts. As such we are forced to\n  looked at the individual Javascript libraries, which typically\n  maintain a cache of attached events (so they can later be removed and\n  perform other useful abstractions).</p>\n  \n  <p>As such, in order for Visual Event to show events, it must be able to\n  parse the event information out of a Javascript library.</p>\n</blockquote>\n\n<p>Element overriding may be questionable (i.e. because there are some DOM specific features like live collections, which can not be coded in JS), but it gives the eventListenerList support natively and it works in Chrome, Firefox and Opera (doesn't work in IE7).</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The firefox dev tools now does this, events are shown by clicking the \"ev\" button on the right of each element's display, including jquery &amp; dom events.</p>\n\n<p><img src=\"http://i.stack.imgur.com/E1AXv.png\" alt=\"Screenshot of firefox dev tools&#39; event listener button in the inspector tab\"></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have a page where some event listeners are attached to input boxes and select boxes.\nIs there a way to find out which event listeners are observing a particular DOM node and for what event?</p>\n\n<p>Events are attached using:</p>\n\n<ol>\n<li>Prototype's <code>Event.observe</code>;</li>\n<li>DOM's <code>addEventListener</code>;</li>\n<li>As element attribute <code>element.onclick</code>.</li>\n</ol>\n",
            "last_activity_date": 1421249609,
            "question_id": 446892,
            "score": 421,
            "tags": [
                "javascript",
                "events",
                "dom"
            ],
            "title": "How to find event listeners on a DOM node?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Since originally writing this answer, a new specification has reached <em>recommendation</em> status thanks to the W3C.\u2002The <a href=\"http://www.w3.org/TR/page-visibility/\">Page Visibility API</a> now allows us to more accurately detect when a page is hidden to the user.</p>\n\n<p>Current browser support:</p>\n\n<ul>\n<li>Chrome 13+</li>\n<li>Internet Explorer 10+</li>\n<li>Firefox 10+</li>\n<li>Opera 12.10+ <sup>[<a href=\"https://dev.opera.com/blog/page-visibility-api-support-in-opera-12-10/\">read notes</a>]</sup></li>\n</ul>\n\n<p>The following code makes use of the API, falling back to the less reliable blur/focus method in incompatible browsers.</p>\n\n<pre><code>(function() {\n  var hidden = \"hidden\";\n\n  // Standards:\n  if (hidden in document)\n    document.addEventListener(\"visibilitychange\", onchange);\n  else if ((hidden = \"mozHidden\") in document)\n    document.addEventListener(\"mozvisibilitychange\", onchange);\n  else if ((hidden = \"webkitHidden\") in document)\n    document.addEventListener(\"webkitvisibilitychange\", onchange);\n  else if ((hidden = \"msHidden\") in document)\n    document.addEventListener(\"msvisibilitychange\", onchange);\n  // IE 9 and lower:\n  else if (\"onfocusin\" in document)\n    document.onfocusin = document.onfocusout = onchange;\n  // All others:\n  else\n    window.onpageshow = window.onpagehide\n    = window.onfocus = window.onblur = onchange;\n\n  function onchange (evt) {\n    var v = \"visible\", h = \"hidden\",\n        evtMap = {\n          focus:v, focusin:v, pageshow:v, blur:h, focusout:h, pagehide:h\n        };\n\n    evt = evt || window.event;\n    if (evt.type in evtMap)\n      document.body.className = evtMap[evt.type];\n    else\n      document.body.className = this[hidden] ? \"hidden\" : \"visible\";\n  }\n\n  // set the initial state (but only if browser supports the Page Visibility API)\n  if( document[hidden] !== undefined )\n    onchange({type: document[hidden] ? \"blur\" : \"focus\"});\n})();\n</code></pre>\n\n<p><code>onfocusin</code> and <code>onfocusout</code> are <a href=\"http://www.thefutureoftheweb.com/blog/detect-browser-window-focus\">required for IE 9 and lower</a>, while all others make use of <code>onfocus</code> and <code>onblur</code>, except for iOS, which uses <code>onpageshow</code> and <code>onpagehide</code>.</p>\n",
                    "is_accepted": true,
                    "score": 335
                },
                {
                    "body": "<p>A slightly more complicated way would be to use <code>setInterval()</code> to check mouse position and compare to last check. If the mouse hasn't moved in a set amount of time, the user is probably idle.</p>\n\n<p><strike>This has the added advantage of telling if the user is idle, instead of <em>just</em> checking if the window is not active.</strike></p>\n\n<p>As many people have pointed out, this is not always a good way to check whether the user or browser window is idle, as the user might not even be using the mouse or is watching a video, or similar. I am just suggesting one possible way to check for idle-ness.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In HTML 5 you could also use:</p>\n\n<ul>\n<li><code>onpageshow</code>: Script to be run when the window becomes visible</li>\n<li><code>onpagehide</code>: Script to be run when the window is hidden</li>\n</ul>\n\n<p>See:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Attribute/onpageshow\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/XUL/Attribute/onpageshow</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Attribute/onpagehide\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/XUL/Attribute/onpagehide</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I would use jQuery because then all you have to do is this:</p>\n\n<pre><code>$(window).blur(function(){\n  //your code here\n});\n$(window).focus(function(){\n  //your code\n});\n</code></pre>\n\n<p>Or at least it worked for me.</p>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>The <a href=\"https://developer.mozilla.org/en/DOM/Using_the_Page_Visibility_API\">W3C Page Visibility API</a> is what you are looking for (i.e. determine if the user can see the page). But it is currently supported only under the following browsers:</p>\n\n<ul>\n<li>Firefox 10</li>\n<li>MSIE 10</li>\n<li>Chrome 13</li>\n</ul>\n\n<p>Alternate methods will not work, e.g. :</p>\n\n<ul>\n<li>Using <strong>focus/blur based methods</strong> gives you a lot of false positive. For example, if the user displays a smaller window on top of the browser window, the browser window will loose the focus (<code>onblur</code> raised) but the user is still able to see it (so it still need to be refreshed). See also <a href=\"http://javascript.info/tutorial/focus\">http://javascript.info/tutorial/focus</a></li>\n<li><strong>Relying on user activity</strong> (mouse move, clicks, key typed) gives you a lot of false positive too. Think about the same case as above, or a user watching a video.</li>\n</ul>\n\n<p>I use a combination of the focus/blur and user activity methods in order to reduce the false positive rate. When the document loose the focus, the user activity (such as mouse move) on the document is monitored in order to determine if the window is visible or not. The page visibility probability is inversely proportional to the time of the last user activity on the page: if the user makes no activity on the document for a long time, the page is most probably not visible. The code below mimics the W3C Page Visibility API: it behaves the same way but has a small false positive rate. It has the advantage to be multibrowser (tested on Firefox 5, Firefox 10, MSIE 9, MSIE 7, Safari 5, Chrome 9).</p>\n\n<pre>\n\n    &lt;div id=\"x\">&lt;/div>\n\n    &lt;script>\n    /**\n    Registers the handler to the event for the given object.\n    @param obj the object which will raise the event\n    @param evType the event type: click, keypress, mouseover, ...\n    @param fn the event handler function\n    @param isCapturing set the event mode (true = capturing event, false = bubbling event)\n    @return true if the event handler has been attached correctly\n    */\n    function addEvent(obj, evType, fn, isCapturing){\n      if (isCapturing==null) isCapturing=false; \n      if (obj.addEventListener){\n        // Firefox\n        obj.addEventListener(evType, fn, isCapturing);\n        return true;\n      } else if (obj.attachEvent){\n        // MSIE\n        var r = obj.attachEvent('on'+evType, fn);\n        return r;\n      } else {\n        return false;\n      }\n    }\n\n    // register to the potential page visibility change\n    addEvent(document, \"potentialvisilitychange\", function(event) {\n      document.getElementById(\"x\").innerHTML+=\"potentialVisilityChange: potentialHidden=\"+document.potentialHidden+\", document.potentiallyHiddenSince=\"+document.potentiallyHiddenSince+\" s<br>\";\n    });\n\n    // register to the W3C Page Visibility API\n    var hidden=null;\n    var visibilityChange=null;\n    if (typeof document.mozHidden !== \"undefined\") {\n      hidden=\"mozHidden\";\n      visibilityChange=\"mozvisibilitychange\";\n    } else if (typeof document.msHidden !== \"undefined\") {\n      hidden=\"msHidden\";\n      visibilityChange=\"msvisibilitychange\";\n    } else if (typeof document.webkitHidden!==\"undefined\") {\n      hidden=\"webkitHidden\";\n      visibilityChange=\"webkitvisibilitychange\";\n    } else if (typeof document.hidden !==\"hidden\") {\n      hidden=\"hidden\";\n      visibilityChange=\"visibilitychange\";\n    }\n    if (hidden!=null && visibilityChange!=null) {\n      addEvent(document, visibilityChange, function(event) {\n        document.getElementById(\"x\").innerHTML+=visibilityChange+\": \"+hidden+\"=\"+document[hidden]+\"<br>\";\n      });\n    }\n\n\n    var potentialPageVisibility = {\n      pageVisibilityChangeThreshold:3*3600, // in seconds\n      init:function() {\n        function setAsNotHidden() {\n          var dispatchEventRequired=document.potentialHidden;\n          document.potentialHidden=false;\n          document.potentiallyHiddenSince=0;\n          if (dispatchEventRequired) dispatchPageVisibilityChangeEvent();\n        }\n\n        function initPotentiallyHiddenDetection() {\n          if (!hasFocusLocal) {\n            // the window does not has the focus => check for  user activity in the window\n            lastActionDate=new Date();\n            if (timeoutHandler!=null) {\n              clearTimeout(timeoutHandler);\n            }\n            timeoutHandler = setTimeout(checkPageVisibility, potentialPageVisibility.pageVisibilityChangeThreshold*1000+100); // +100 ms to avoid rounding issues under Firefox\n          }\n        }\n\n        function dispatchPageVisibilityChangeEvent() {\n          unifiedVisilityChangeEventDispatchAllowed=false;\n          var evt = document.createEvent(\"Event\");\n          evt.initEvent(\"potentialvisilitychange\", true, true);\n          document.dispatchEvent(evt);\n        }\n\n        function checkPageVisibility() {\n          var potentialHiddenDuration=(hasFocusLocal || lastActionDate==null?0:Math.floor((new Date().getTime()-lastActionDate.getTime())/1000));\n                                        document.potentiallyHiddenSince=potentialHiddenDuration;\n          if (potentialHiddenDuration>=potentialPageVisibility.pageVisibilityChangeThreshold && !document.potentialHidden) {\n            // page visibility change threshold raiched => raise the even\n            document.potentialHidden=true;\n            dispatchPageVisibilityChangeEvent();\n          }\n        }\n\n        var lastActionDate=null;\n        var hasFocusLocal=true;\n        var hasMouseOver=true;\n        document.potentialHidden=false;\n        document.potentiallyHiddenSince=0;\n        var timeoutHandler = null;\n\n        addEvent(document, \"pageshow\", function(event) {\n          document.getElementById(\"x\").innerHTML+=\"pageshow/doc:<br>\";\n        });\n        addEvent(document, \"pagehide\", function(event) {\n          document.getElementById(\"x\").innerHTML+=\"pagehide/doc:<br>\";\n        });\n        addEvent(window, \"pageshow\", function(event) {\n          document.getElementById(\"x\").innerHTML+=\"pageshow/win:<br>\"; // raised when the page first shows\n        });\n        addEvent(window, \"pagehide\", function(event) {\n          document.getElementById(\"x\").innerHTML+=\"pagehide/win:<br>\"; // not raised\n        });\n        addEvent(document, \"mousemove\", function(event) {\n          lastActionDate=new Date();\n        });\n        addEvent(document, \"mouseover\", function(event) {\n          hasMouseOver=true;\n          setAsNotHidden();\n        });\n        addEvent(document, \"mouseout\", function(event) {\n          hasMouseOver=false;\n          initPotentiallyHiddenDetection();\n        });\n        addEvent(window, \"blur\", function(event) {\n          hasFocusLocal=false;\n          initPotentiallyHiddenDetection();\n        });\n        addEvent(window, \"focus\", function(event) {\n          hasFocusLocal=true;\n          setAsNotHidden();\n        });\n        setAsNotHidden();\n      }\n    }\n\n    potentialPageVisibility.pageVisibilityChangeThreshold=4; // for testing\n    potentialPageVisibility.init();\n    &lt;/script>\n\n</pre>\n\n<p>Since there is currently no working cross-browser solution without false positive, you should better think twice about disabling periodical activity on your web site.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>This is an adaptation of the answer from Andy E.</p>\n\n<p>This will do a task e.g. refresh the page every 30 seconds,\nbut only if the page is visible and focused.</p>\n\n<p>If visibility can't be detected, then only focus will be used.</p>\n\n<p>If the user focuses the page, then it will update immediately</p>\n\n<p>The page won't update again until 30 seconds after any ajax call</p>\n\n<pre><code>var windowFocused = true;\nvar timeOut2 = null;\n\n$(function(){\n  $.ajaxSetup ({\n    cache: false\n  });\n  $(\"#content\").ajaxComplete(function(event,request, settings){\n       set_refresh_page(); // ajax call has just been made, so page doesn't need updating again for 30 seconds\n   });\n  // check visibility and focus of window, so as not to keep updating unnecessarily\n  (function() {\n      var hidden, change, vis = {\n              hidden: \"visibilitychange\",\n              mozHidden: \"mozvisibilitychange\",\n              webkitHidden: \"webkitvisibilitychange\",\n              msHidden: \"msvisibilitychange\",\n              oHidden: \"ovisibilitychange\" /* not currently supported */\n          };\n      for (hidden in vis) {\n          if (vis.hasOwnProperty(hidden) &amp;&amp; hidden in document) {\n              change = vis[hidden];\n              break;\n          }\n      }\n      document.body.className=\"visible\";\n      if (change){     // this will check the tab visibility instead of window focus\n          document.addEventListener(change, onchange,false);\n      }\n\n      if(navigator.appName == \"Microsoft Internet Explorer\")\n         window.onfocus = document.onfocusin = document.onfocusout = onchangeFocus\n      else\n         window.onfocus = window.onblur = onchangeFocus;\n\n      function onchangeFocus(evt){\n        evt = evt || window.event;\n        if (evt.type == \"focus\" || evt.type == \"focusin\"){\n          windowFocused=true; \n        }\n        else if (evt.type == \"blur\" || evt.type == \"focusout\"){\n          windowFocused=false;\n        }\n        if (evt.type == \"focus\"){\n          update_page();  // only update using window.onfocus, because document.onfocusin can trigger on every click\n        }\n\n      }\n\n      function onchange () {\n        document.body.className = this[hidden] ? \"hidden\" : \"visible\";\n        update_page();\n      }\n\n      function update_page(){\n        if(windowFocused&amp;&amp;(document.body.className==\"visible\")){\n          set_refresh_page(1000);\n        }\n      }\n\n\n  })();\n  set_refresh_page();\n})\n\nfunction get_date_time_string(){\n  var d = new Date();\n  var dT = [];\n  dT.push(d.getDate());\n  dT.push(d.getMonth())\n  dT.push(d.getFullYear());\n  dT.push(d.getHours());\n  dT.push(d.getMinutes());\n  dT.push(d.getSeconds());\n  dT.push(d.getMilliseconds());\n  return dT.join('_');\n}\n\nfunction do_refresh_page(){\n\n// do tasks here\n\n// e.g. some ajax call to update part of the page.\n\n// (date time parameter will probably force the server not to cache)\n\n//      $.ajax({\n//        type: \"POST\",\n//        url: \"someUrl.php\",\n//        data: \"t=\" + get_date_time_string()+\"&amp;task=update\",\n//        success: function(html){\n//          $('#content').html(html);\n//        }\n//      });\n\n}\n\nfunction set_refresh_page(interval){\n  interval = typeof interval !== 'undefined' ? interval : 30000; // default time = 30 seconds\n  if(timeOut2 != null) clearTimeout(timeOut2);\n  timeOut2 = setTimeout(function(){\n    if((document.body.className==\"visible\")&amp;&amp;windowFocused){\n      do_refresh_page();\n    }\n    set_refresh_page();\n  }, interval);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>u can use :</p>\n\n<pre><code>(function () {\n\n    var requiredResolution = 10; // ms\n    var checkInterval = 1000; // ms\n    var tolerance = 20; // percent\n\n\n    var counter = 0;\n    var expected = checkInterval / requiredResolution;\n    //console.log('expected:', expected);\n\n    window.setInterval(function () {\n        counter++;\n    }, requiredResolution);\n\n    window.setInterval(function () {\n        var deviation = 100 * Math.abs(1 - counter / expected);\n        // console.log('is:', counter, '(off by', deviation , '%)');\n        if (deviation &gt; tolerance) {\n            console.warn('Timer resolution not sufficient!');\n        }\n        counter = 0;\n    }, checkInterval);\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var visibilityChange = (function (window) {\n    var inView = false;\n    return function (fn) {\n        window.onfocus = window.onblur = window.onpageshow = window.onpagehide = function (e) {\n            if ({focus:1, pageshow:1}[e.type]) {\n                if (inView) return;\n                fn(\"visible\");\n                inView = true;\n            } else if (inView) {\n                fn(\"hidden\");\n                inView = false;\n            }\n        };\n    };\n}(this));\n\nvisibilityChange(function (state) {\n    console.log(state);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/ARTsinn/JTxQY/\" rel=\"nofollow\">http://jsfiddle.net/ARTsinn/JTxQY/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The <a href=\"http://stackoverflow.com/questions/1060008/is-there-a-way-to-detect-if-a-browser-window-is-not-currently-active#answer-1060034\">top answer rocks</a> and is what has led to my answer, so even if you find my answer great, maybe plus one the inspiration?</p>\n\n<p>I'm simply throwing my 2cents in here because I found many other answers that half worked but should be avoided. I also rebuilt the top answer into a custom jQuery Plugin with ease of use and a working Fiddle to show just how easy it is!</p>\n\n<p>First of all, one of the common answers I've seen here and in dups of this question is the jQuery <code>$(window).focus/blur</code> methods. 2 problems persist with this method.</p>\n\n<p>The first problem is an issue of \"duplicate\" calls. This is easy enough to work around if you want to use this method. Simply create some sort of identifier to check each time your function is called and then go to town. \nFor Example:</p>\n\n<pre><code>$(window).on(\"blur focus\", function(e) {\n    var prevType = $(this).data(\"prevType\"); // getting identifier to check by\n    if (prevType != e.type) {   //  reduce double fire issues by checking identifier\n        switch (e.type) {\n            case \"blur\":\n                // do work\n                break;\n            case \"focus\":\n                // do work\n                break;\n        }\n    }\n    $(this).data(\"prevType\", e.type); // reset identifier\n})\n</code></pre>\n\n<p>As simple as this seems, it returns a new problem. For jQuery, window.focus means when the user has actually \"selected\" that window. In other words, if the user selects another application (like calculator or something) or even clicks in the browser console, the window \"looses focus\". Thus this method may still be undesirable. </p>\n\n<p>Thus we're back to the method provided by the top answer. Great answer! It accounts for these issues by becoming directly event driven. This is what led me to be able to make a very easy to use jQuery plugin that will be much more accurate than <code>$(window).blur</code>.</p>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/8a9N6/\"><h1>jsFiddle/jQPlug-in</h1></a></p>\n\n<p>Use:</p>\n\n<pre><code>$.winFocus(function(event, isVisible) {\n    console.log(\"Combo\\t\\t\", event, isVisible);\n});\n\n//  OR *new option*\n\n$.winFocus(function(event, isVisible) {\n    console.log(\"Combo\\t\\t\", event, isVisible);\n}, false);\n\n//  OR\n\n$.winFocus({\n    blur: function(event) {\n        console.log(\"Blur\\t\\t\", event);\n    },\n    focus: function(event) {\n        console.log(\"Focus\\t\\t\", event);\n    }\n});\n\n//  OR\n\n$.winFocus(function(event) {\n    console.log(\"Blur\\t\\t\", event);\n},\nfunction(event) {\n    console.log(\"Focus\\t\\t\", event);\n});\n</code></pre>\n\n<p><em><strong>Plugin has been updated!</em></strong>\n<br />\nNow has an option \"initRun\". This is default to true and will run you're change function upon initialization. Simply add a <code>false</code> boolean to the call like <code>$.winFocus(func..., false)</code> to take it back a step and not have it run till the first time the window is focused or blurred (most likly blurred) after the initial call.</p>\n\n<p>Also, I believe I've fixed all cross-browser issues. Hit me up in comments if you find a problem!</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I create a Comet Chat for my app, and when i receive a message from another user i use</p>\n\n<pre><code>if(new_mensajes){\n    if(!document.hasFocus()){\n        audio.play();\n        document.title=\"Have new messages\";\n    }\n    else{\n        audio.stop();\n        document.title=\"Application Name\";\n    } \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is really tricky. There seems to be no solution given the following requirements.</p>\n\n<ul>\n<li>The page includes iframes that you have no control over</li>\n<li>You want to track visibility state change regardless of the change being triggered by a TAB change (ctrl+tab) or a window change (alt+tab)</li>\n</ul>\n\n<p>This happens because:</p>\n\n<ul>\n<li>The page Visibility API can reliably tell you of a tab change (even with iframes), but it can't tell you when the user changes windows.</li>\n<li>Listening to window blur/focus events can detect alt+tabs and ctrl+tabs, as long as the iframe doesn't have focus.</li>\n</ul>\n\n<p>Given these restrictions, it is possible to implement a solution that combines \n- The page Visibility API\n- window blur/focus\n- document.activeElement</p>\n\n<p>That is able to:</p>\n\n<ul>\n<li>1) ctrl+tab when parent page has focus: YES</li>\n<li>2) ctrl+tab when iframe has focus: YES</li>\n<li>3) alt+tab when parent page has focus: YES</li>\n<li>4) alt+tab when iframe has focus: <em>NO</em> &lt;-- bummer</li>\n</ul>\n\n<p>When the iframe has focus, your blur/focus events don't get invoked at all, and the page Visibility API won't trigger on alt+tab.</p>\n\n<p>I built upon @AndyE's solution and implemented this (almost good) solution here:\n<a href=\"https://dl.dropboxusercontent.com/u/2683925/estante-components/visibility_test1.html\" rel=\"nofollow\">https://dl.dropboxusercontent.com/u/2683925/estante-components/visibility_test1.html</a>\n(sorry, I had some trouble with JSFiddle).</p>\n\n<p>This is also available on Github: <a href=\"https://github.com/qmagico/estante-components\" rel=\"nofollow\">https://github.com/qmagico/estante-components</a></p>\n\n<p>This works on chrome/chromium.\nIt kind works on firefox, except that it doesn't load the iframe contents (any idea why?)</p>\n\n<p>Anyway, to resolve the last problem (4), the only way you can do that is to listen for blur/focus events on the iframe.\nIf you have some control over the iframes, you can use the postMessage API to do that.</p>\n\n<p><a href=\"https://dl.dropboxusercontent.com/u/2683925/estante-components/visibility_test2.html\" rel=\"nofollow\">https://dl.dropboxusercontent.com/u/2683925/estante-components/visibility_test2.html</a></p>\n\n<p>I still haven't tested this with enough browsers.\nIf you can find more info about where this doesn't work, please let me know in the comments below.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is a neat library available on GitHub:</p>\n\n<p><a href=\"https://github.com/serkanyersen/ifvisible.js\">https://github.com/serkanyersen/ifvisible.js</a></p>\n\n<p>Example:</p>\n\n<pre><code>// If page is visible right now\nif( ifvisible.now() ){\n  // Display pop-up\n  openPopUp();\n}\n</code></pre>\n\n<p>I've tested version 1.0.1 on all browsers I have and can confirm that it works with:</p>\n\n<ul>\n<li>IE9, IE10</li>\n<li>FF 26.0</li>\n<li>Chrome 34.0</li>\n</ul>\n\n<p>... and probably all newer versions.</p>\n\n<p>Doesn't fully work with:</p>\n\n<ul>\n<li>IE8 - always indicate that tab/window is currently active (<code>.now()</code> always returns <code>true</code> for me)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>For a solution without jQuery check out <a href=\"https://github.com/ai/visibilityjs\" rel=\"nofollow\">Visibility.js</a> which provides information about three page states</p>\n\n<pre><code>visible    ... page is visible\nhidden     ... page is not visible\nprerender  ... page is being prerendered by the browser\n</code></pre>\n\n<p>and also convenience-wrappers for setInterval</p>\n\n<pre><code>/* Perform action every second if visible */\nVisibility.every(1000, function () {\n    action();\n});\n\n/* Perform action every second if visible, every 60 sec if not visible */\nVisibility.every(1000, 60*1000, function () {\n    action();\n});\n</code></pre>\n\n<p>A fallback for older browsers (IE &lt; 10; iOS &lt; 7) is also available</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to act <strong>on</strong> whole <strong>browser blur</strong>:\nAs I commented, if browser loose focus none of the suggested events fire. My idea is to count up in a loop and reset the counter if an event fire. If the counter reach a limit I do a location.href to an other page. This also fire if you work on dev-tools. </p>\n\n<pre><code>var iput=document.getElementById(\"hiddenInput\");\n   ,count=1\n   ;\nfunction check(){\n         count++;\n         if(count%2===0){\n           iput.focus();\n         }\n         else{\n           iput.blur();\n         }\n         iput.value=count;  \n         if(count&gt;3){\n           location.href=\"http://Nirwana.com\";\n         }              \n         setTimeout(function(){check()},1000);\n}   \niput.onblur=function(){count=1}\niput.onfocus=function(){count=1}\ncheck();\n</code></pre>\n\n<p>This is a draft successful tested on FF.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For angular.js, here is a directive (based on the accepted answer) that will allow your controller to react to a change in visibility:</p>\n\n<pre><code>myApp.directive('reactOnWindowFocus', function($parse) {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n            var hidden = \"hidden\";\n            var currentlyVisible = true;\n            var functionOrExpression = $parse(attrs.reactOnWindowFocus);\n\n          // Standards:\n          if (hidden in document)\n            document.addEventListener(\"visibilitychange\", onchange);\n          else if ((hidden = \"mozHidden\") in document)\n            document.addEventListener(\"mozvisibilitychange\", onchange);\n          else if ((hidden = \"webkitHidden\") in document)\n            document.addEventListener(\"webkitvisibilitychange\", onchange);\n          else if ((hidden = \"msHidden\") in document)\n            document.addEventListener(\"msvisibilitychange\", onchange);\n          else if (\"onfocusin\" in document) {\n                // IE 9 and lower:\n            document.onfocusin = onshow;\n                document.onfocusout = onhide;\n          } else {\n                // All others:\n            window.onpageshow = window.onfocus = onshow;\n                window.onpagehide = window.onblur = onhide;\n            }\n\n          function onchange (evt) {\n                //occurs both on leaving and on returning\n                currentlyVisible = !currentlyVisible;\n                doSomethingIfAppropriate();\n          }\n\n            function onshow(evt) {\n                //for older browsers\n                currentlyVisible = true;\n                doSomethingIfAppropriate();\n            }\n\n            function onhide(evt) {\n                //for older browsers\n                currentlyVisible = false;\n                doSomethingIfAppropriate();\n            }\n\n            function doSomethingIfAppropriate() {\n                if (currentlyVisible) {\n                    //trigger angular digest cycle in this scope\n                    scope.$apply(function() {\n                        functionOrExpression(scope);\n                    });\n                }\n            }\n        }\n    };\n\n});\n</code></pre>\n\n<p>You can use it like this example: <code>&lt;div react-on-window-focus=\"refresh()\"&gt;</code>, where <code>refresh()</code> is a scope function in the scope of whatever Controller is in scope.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have JavaScript that is doing activity periodically. When the user is not looking at the site (i.e., the window or tab does not have focus), it'd be nice to not run.</p>\n\n<p>Is there a way to do this using JavaScript?</p>\n\n<p>My reference point: Gmail Chat plays a sound if the window you're using isn't active. </p>\n",
            "last_activity_date": 1425469740,
            "question_id": 1060008,
            "score": 247,
            "tags": [
                "javascript",
                "browser",
                "focus",
                "window"
            ],
            "title": "Is there a way to detect if a browser window is not currently active?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p><code>setTimeout()</code> buys you some time until the DOM elements are loaded, even if is set to 0.</p>\n\n<p>Check this out: <a href=\"http://snook.ca/archives/javascript/settimeout%5Fsolve%5Fdomcontentloaded\">setTimeout</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>By calling setTimeout you give the page time to react to the whatever the user is doing. This is particularly helpful for functions run during page load. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This works because you're doing co-operative multi-tasking. </p>\n\n<p>A browser has to do a number of things pretty much all at once, and just one of those is execute JavaScript. But one of the things JavaScript is very often used for is to ask the browser to build a display element. This is often assumed to be done synchronously (particularly as JavaScript is not executed in parallel) but there is no guarantee this is the case and JavaScript does not have a well-defined mechanism for waiting. </p>\n\n<p>The solution is to \"pause\" the JavaScript execution to let the rendering threads catch up. And this is the effect that <code>setTimeout()</code> with a timeout of <strong>0</strong> does. It is like a thread/process yield in C. Although it seems to say \"run this immediately\" it actually gives the browser a chance to finish doing some non-JavaScript things that have been waiting to finish before attending to this new piece of JavaScript.</p>\n\n<p>(In actuality, <code>setTimeout()</code> re-queues the new JavaScript at the end of the execution queue. See the comments for links to a longer explanation.)</p>\n\n<p>IE6 just happens to be more prone to this error, but I have seen it occur on older versions of Mozilla and in Firefox.</p>\n",
                    "is_accepted": true,
                    "score": 322
                },
                {
                    "body": "<p>Take a look at John Resig's article about <a href=\"http://ejohn.org/blog/how-javascript-timers-work/\">How JavaScript Timers Work</a>. When you set a timeout, it actually queues the asynchronous code until the engine executes the current call stack.</p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>One reason to do that is to defer the execution of code to a separate, subsequent event loop. When responding to a browser event of some kind (mouse click, for example), sometimes it's necessary to perform operations only <em>after</em> the current event is processed. The <code>setTimeout()</code> facility is the simplest way to do it.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Since it is being passed a duration of <code>0</code>, I suppose it is in order to remove the code passed to the <code>setTimeout</code> from the flow of execution. So if it's a function that could take a while, it won't prevent the subsequent code from executing.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><strong><em>Preface:</em></strong></p>\n\n<p>IMPORTANT NOTE: While it's most upvoted and accepted, the accepted answer by @staticsan actually is <strong>NOT CORRECT!</strong> - see David Mulder's comment for explanation why.</p>\n\n<p>Some of the other answers are correct but don't actually illustrate what the problem being solved is, so I created this answer to present that detailed illustration.</p>\n\n<p>As such, I am posting a <strong>detailed walk-through of what the browser does and how using <code>setTimeout()</code> helps</strong>. It looks longish but is actually very simple and straightforward - I just made it very detailed. </p>\n\n<p><strong>UPDATE:</strong> I have made a JSFiddle to live-demonstrate the explanation below: <a href=\"http://jsfiddle.net/C2YBE/31/\" rel=\"nofollow\">http://jsfiddle.net/C2YBE/31/</a> . Many things to @ThangChung for helping to kickstart it.</p>\n\n<p><strong>UPDATE2:</strong> Just in case JSFiddle web site dies, or deletes the code, I added the code to this answer at the very end.</p>\n\n<hr>\n\n<p><strong>DETAILS</strong>:</p>\n\n<p>Imagine a web app with a \"do something\" button and a result div.</p>\n\n<p>The <code>onClick</code> handler for \"do something\" button calls a function \"LongCalc()\", which does 2 things:</p>\n\n<ol>\n<li><p>Makes a very long calculation (say takes 3 min)</p></li>\n<li><p>Prints the results of calculation into the result div.</p></li>\n</ol>\n\n<p>Now, your users start testing this, click \"do something\" button, and the page sits there doing seemingly nothing for 3 minutes, they get restless, click the button again, wait 1 min, nothing happens, click button again... </p>\n\n<p>The problem is obvious - you want a \"Status\" DIV, which shows what's going on. Let's see how that works.</p>\n\n<hr>\n\n<p>So you add a \"Status\" DIV (initially empty), and modify the <code>onclick</code> handler (function <code>LongCalc()</code>) to do 4 things:</p>\n\n<ol>\n<li><p>Populate the status \"Calculating... may take ~3 minutes\" into status DIV</p></li>\n<li><p>Makes a very long calculation (say takes 3 min)</p></li>\n<li><p>Prints the results of calculation into the result div.</p></li>\n<li><p>Populate the status \"Calculation done\" into status DIV</p></li>\n</ol>\n\n<p>And, you happily give the app to users to re-test.</p>\n\n<p>They come back to you looking very angry. And explain that when they clicked the button, <strong>the Status DIV never got updated with \"Calculating...\" status!!!</strong></p>\n\n<hr>\n\n<p>You scratch your head, ask around on StackOverflow (or read docs or google), and realize the problem:</p>\n\n<p>The browser places all its \"TODO\" tasks (both UI tasks and JavaScript commands) resulting from events into a <strong>single queue</strong>. And unfortunately, re-drawing the \"Status\" DIV with the new \"Calculating...\" value is a separate TODO which goes to the end of the queue!</p>\n\n<p>Here's a breakdown of the events during your user's test, contents of the queue after each event:</p>\n\n<ul>\n<li>Queue: <code>[Empty]</code></li>\n<li>Event: Click the button. Queue after event: <code>[Execute OnClick handler(lines 1-4)]</code></li>\n<li>Event: Execute first line in OnClick handler (e.g. change Status DIV vaue). Queue after event: <code>[Execute OnClick handler(lines 2-4), re-draw Status DIV with new \"Calculating\" value]</code>. <strong>Please note that while the DOM changes happen instantaneously, to re-draw the corresponding DOM element you need a new event, triggered by the DOM change, that went at the end of the queue</strong>.</li>\n<li><strong>PROBLEM!!!</strong> <strong>PROBLEM!!!</strong> Details explained below.</li>\n<li>Event: Execute second line in handler (calulation). Queue after: <code>[Execute OnClick handler(lines 3-4), re-draw Status DIV with \"Calculating\" value]</code>.</li>\n<li>Event: Execute 3d line in handler (populate result DIV). Queue after: <code>[Execute OnClick handler(line 4), re-draw Status DIV with \"Calculating\" value, re-draw result DIV with result]</code>.</li>\n<li>Event: Execute 4th line in handler (populate status DIV with \"DONE\"). Queue: <code>[Execute OnClick handler, re-draw Status DIV with \"Calculating\" value, re-draw result DIV with result; re-draw Status DIV with \"DONE\" value]</code>.</li>\n<li>Event: execute implied <code>return</code> from <code>onclick</code> handler sub. We take the \"Execute OnClick handler\" off the queue and start executing next item on the queue.</li>\n<li>NOTE: Since we already finished the calculation, 3 minutes already passed for the user. <strong>The re-draw event didn't happen yet!!!</strong></li>\n<li>Event: re-draw Status DIV with \"Calculating\" value. We do the re-draw and take that off the queue.</li>\n<li>Event: re-draw Result DIV with result value. We do the re-draw and take that off the queue.</li>\n<li>Event: re-draw Status DIV with \"Done\" value. We do the re-draw and take that off the queue.\nSharp-eyed viewers might even notice \"Status DIV with \"Calculating\" value flashing for fraction of a microsecond - <strong>AFTER THE CALCULATION FINISHED</strong></li>\n</ul>\n\n<p>So, the underlying problem is that the re-draw event for \"Status\" DIV is placed on the queue at the end, AFTER the \"execute line 2\" event which takes 3 mins, so the actual re-draw doesn't happen until AFTER the calculation is done.</p>\n\n<hr>\n\n<p>To the rescue comes the <code>setTimeout()</code>. How does it help? Because by calling long-executing code via <code>setTimeout</code>, you actually create 2 events: <code>setTimeout</code> execution itself, and (due to 0 timeout), separate queue entry for the code being executed.</p>\n\n<p>So, to fix your problem, you modify your <code>onClick</code> handler to be TWO statements (in a new function or just a block within <code>onClick</code>):</p>\n\n<ol>\n<li><p>Populate the status \"Calculating... may take ~3 minutes\" into status DIV</p></li>\n<li><p><strong>Execute <code>setTimeout()</code> with 0 timeout and a call to <code>LongCalc()</code> function</strong>. </p>\n\n<p><code>LongCalc()</code> function is almost the same as last time but obviously doesn't have \"Calculating...\" status DIV update as first step; and instead starts the calculation right away.</p></li>\n</ol>\n\n<p>So, what does the event sequence and the queue look like now?</p>\n\n<ul>\n<li>Queue: <code>[Empty]</code></li>\n<li>Event: Click the button. Queue after event: <code>[Execute OnClick handler(status update, setTimeout() call)]</code></li>\n<li>Event: Execute first line in OnClick handler (e.g. change Status DIV value). Queue after event: <code>[Execute OnClick handler(which is a setTimeout call), re-draw Status DIV with new \"Calculating\" value]</code>. </li>\n<li>Event: Execute second line in handler (setTimeout call). Queue after: <code>[re-draw Status DIV with \"Calculating\" value]</code>. The queue has nothing new in it for 0 more seconds.</li>\n<li>Event: Alarm from the timeout goes off, 0 seconds later. Queue after: <code>[re-draw Status DIV with \"Calculating\" value, execute LongCalc (lines 1-3)]</code>. </li>\n<li>Event: <strong>re-draw Status DIV with \"Calculating\" value</strong>. Queue after: <code>[execute LongCalc (lines 1-3)]</code>. Please note that this re-draw event might actually happen BEFORE the alarm goes off, which works just as well.</li>\n<li>...</li>\n</ul>\n\n<p>Hoorray! The Status DIV just got updated to \"Calculating...\" before the calculation started!!!</p>\n\n<hr>\n\n<hr>\n\n<p>Below is the sample code from the JSFiddle illustrating these examples: <a href=\"http://jsfiddle.net/C2YBE/31/\" rel=\"nofollow\">http://jsfiddle.net/C2YBE/31/</a> :</p>\n\n<p><strong>HTML code:</strong></p>\n\n<pre><code>&lt;table border=1&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;button id='do'&gt;Do long calc - bad status!&lt;/button&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;div id='status'&gt;Not Calculating yet.&lt;/div&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;button id='do_ok'&gt;Do long calc - good status!&lt;/button&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;div id='status_ok'&gt;Not Calculating yet.&lt;/div&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p><strong>JavaScript code: (Executed on <code>onDomReady</code> and may require jQuery 1.9)</strong></p>\n\n<pre><code>function long_running(status_div) {\n\n    var result = 0;\n    // Use 1000/700/300 limits in Chrome, \n    //    300/100/100 in IE8, \n    //    1000/500/200 in FireFox\n    // I have no idea why identical runtimes fail on diff browsers.\n    for (var i = 0; i &lt; 1000; i++) {\n        for (var j = 0; j &lt; 700; j++) {\n            for (var k = 0; k &lt; 300; k++) {\n                result = result + i + j + k;\n            }\n        }\n    }\n    $(status_div).text('calclation done');\n}\n\n// Assign events to buttons\n$('#do').on('click', function () {\n    $('#status').text('calculating....');\n    long_running('#status');\n});\n\n$('#do_ok').on('click', function () {\n    $('#status_ok').text('calculating....');\n    // This works on IE8. Works in Chrome\n    // Does NOT work in FireFox 25 with timeout =0 or =1\n    // DOES work in FF if you change timeout from 0 to 500\n    window.setTimeout(function (){ long_running('#status_ok') }, 0);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 158
                },
                {
                    "body": "<p>The other thing this does is push the function invocation to the bottom of the stack, preventing a stack overflow if you are recursively calling a function. This has the effect of a <code>while</code> loop but lets the JavaScript engine fire other asynchronous timers.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Some other cases where setTimeout is useful:</p>\n\n<p>You want to break a long-running loop or calculation into smaller components so that the browser doesn't appear to 'freeze' or say \"Script on page is busy\".</p>\n\n<p>You want to disable a form submit button when clicked, but if you disable the button in the onClick handler the form will not be submitted. setTimeout with a time of zero does the trick, allowing the event to end, the form to begin submitting, then your button can be disabled.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Most browsers have a single process called main UI thread that is responsible for perform JavaScript and UI updates e.g. painting, redraw or reflow.</p>\n\n<p>Every JavaScript execution and UI update tasks are added to the browser event queue system, then those tasks are dispatched to the browser main UI Thread to be performed.</p>\n\n<p>When UI updates are generated while the UI thread is busy, the tasks are pushed into the UI queue system.</p>\n\n<p><code>setTimeout(fn, 0);</code> add a task to the UI queue system after 0 milliseconds delay.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The answers about execution loops and rendering the DOM before some other code completes are correct. Zero second timeouts in JavaScript help make the code pseudo-multithreaded, even though it is not.</p>\n\n<p>I want to add that the BEST value for a cross browser / cross platform zero-second timeout in JavaScript is actually about 20 milliseconds instead of 0 (zero), because many mobile browsers can't register timeouts smaller than 20 milliseconds due to clock limitations on AMD chips.</p>\n\n<p>Also, long-running processes that do not involve DOM manipulation should be sent to Web Workers now, as they provide true multithreaded execution of JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is an old questions with old answers. I wanted to add a new look at this problem and to answer why is this happens and not why is this useful.</p>\n\n<p>So you have two functions:</p>\n\n<pre><code>var f1 = function () {    \n   setTimeout(function(){\n      console.log(\"f1\", \"First function call...\");\n   }, 0);\n};\n\nvar f2 = function () {\n    console.log(\"f2\", \"Second call...\");\n};\n</code></pre>\n\n<p>and then call them in the following order <code>f1(); f2();</code> just to see that the second one executed first. </p>\n\n<p>And here is why: it is not possible to have <code>setTimeout</code> with a time delay of 0 milliseconds. The <strong>Minimum value is determined by the browser</strong> and it is not 0 milliseconds. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout?redirectlocale=en-US&amp;redirectslug=DOM/window.setTimeout#Minimum.2F_maximum_delay_and_timeout_nesting\">Historically</a> browsers sets this minimum to 10 milliseconds, but the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#timers\">HTML5 specs</a> and modern browsers have it set at 4 milliseconds. </p>\n\n<blockquote>\n  <p>If nesting level is greater than 5, and timeout is less than 4, then\n  increase timeout to 4.</p>\n</blockquote>\n\n<p>Also from mozilla:</p>\n\n<blockquote>\n  <p>To implement a 0 ms timeout in a modern browser, you can use\n  window.postMessage() as described <a href=\"http://dbaron.org/log/20100309-faster-timeouts\">here</a>.</p>\n</blockquote>\n\n<p>P.S. information is taken after reading the following <a href=\"http://geekabyte.blogspot.com/2014/01/javascript-effect-of-setting-settimeout.html\">article</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are conflicting upvoted answers here, and without proof there is no way to know whom to believe. Here is proof that @DVK is correct and @SalvadorDali is wrong. The latter claims:</p>\n\n<blockquote>\n  <p>\"And here is why: it is not possible to have setTimeout with a time\n  delay of 0 milliseconds. The Minimum value is determined by the\n  browser and it is not 0 milliseconds. Historically browsers sets this\n  minimum to 10 milliseconds, but the HTML5 specs and modern browsers\n  have it set at 4 milliseconds.\"</p>\n</blockquote>\n\n<p>The 4ms minimum timeout is irrelevant to what is happening. What really happens is that setTimeout pushes the callback function to the end of the execution queue. If after setTimeout(callback, 0) you have blocking code which takes several seconds to run, the callback will not be executed for several seconds, until the blocking code has finished. Try this code:</p>\n\n<pre><code>function testSettimeout0 () {\n    var startTime = new Date().getTime()\n    console.log('setting timeout 0 callback at ' +sinceStart())\n    setTimeout(function(){\n        console.log('in timeout callback at ' +sinceStart())\n    }, 0)\n    console.log('starting blocking loop at ' +sinceStart())\n    while (sinceStart() &lt; 3000) {\n        continue\n    }\n    console.log('blocking loop ended at ' +sinceStart())\n    return // functions below\n    function sinceStart () {\n        return new Date().getTime() - startTime\n    } // sinceStart\n} // testSettimeout0\n</code></pre>\n\n<p>Output is:</p>\n\n<pre><code>setting timeout 0 callback at 0\nstarting blocking loop at 5\nblocking loop ended at 3000\nin timeout callback at 3033\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I've recently run into a rather nasty bug, wherein the code was loading a <code>&lt;select&gt;</code> dynamically via JavaScript.  This dynamically loaded <code>&lt;select&gt;</code> had a pre-selected value.  In IE6, we already had code to fix the selected <code>&lt;option&gt;</code>, because sometimes the <code>&lt;select&gt;</code>'s <code>selectedIndex</code> value would be out of sync with the selected <code>&lt;option&gt;</code>'s <code>index</code> attribute, as below:</p>\n\n<pre><code>field.selectedIndex = element.index;\n</code></pre>\n\n<p>However, this code wasn't working.  Even though the field's <code>selectedIndex</code> was being set correctly, the wrong index would end up being selected.  However, if I stuck an <code>alert()</code> statement in at the right time, the correct option would be selected.  Thinking this might be some sort of timing issue, I tried something random that I'd seen in code before:</p>\n\n<pre><code>var wrapFn = (function() {\n    var myField = field;\n    var myElement = element;\n\n    return function() {\n        myField.selectedIndex = myElement.index;\n    }\n})();\nsetTimeout(wrapFn, 0);\n</code></pre>\n\n<p>And this worked!</p>\n\n<p>I've got a solution for my problem, but I'm uneasy that I don't know exactly why this fixes my problem.  Does anyone have an official explanation?  What browser issue am I avoiding by calling my function \"later\" using <code>setTimeout()</code>?</p>\n",
            "last_activity_date": 1424904404,
            "question_id": 779379,
            "score": 281,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "Why is setTimeout(fn, 0) sometimes useful?"
        },
        {
            "answer_count": 35,
            "answers": [
                {
                    "body": "<p>You can use a simple JS snippet to set the value of a hidden field. When posted back you know if JS was enabled or not.</p>\n\n<p>Or you can try to open a popup window that you close rapidly (but that might be visible).</p>\n\n<p>Also you have the NOSCRIPT tag that you can use to show text for browsers with JS disabled.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript?redirectlocale=en-US&amp;redirectslug=HTML%2FElement%2Fnoscript\"><code>noscript</code></a> blocks are executed when JavaScript is disabled, and are typically used to display alternative content to that you've generated in JavaScript, e.g.</p>\n\n<pre><code>&lt;script type=\"javascript\"&gt;\n    ... construction of ajaxy-link,  setting of \"js-enabled\" cookie flag, etc..\n&lt;/script&gt;\n&lt;noscript&gt;\n    &lt;a href=\"next_page.php?nojs=1\"&gt;Next Page&lt;/a&gt;\n&lt;/noscript&gt;\n</code></pre>\n\n<p>Users without js will get the <code>next_page</code> link - you can add parameters here so that you know on the next page whether they've come via a JS/non-JS link, or attempt to set a cookie via JS, the absence of which implies JS is disabled. Both of these examples are fairly trivial and open to manipulation, but you get the idea.</p>\n\n<p>If you want a purely statistical idea of how many of your users have javascript disabled, you could do something like:</p>\n\n<pre><code>&lt;noscript&gt;\n    &lt;img src=\"no_js.gif\" alt=\"Javascript not enabled\" /&gt;\n&lt;/noscript&gt;\n</code></pre>\n\n<p>then check your access logs to see how many times this image has been hit. A slightly crude solution, but it'll give you a good idea percentage-wise for your user base.</p>\n\n<p>The above approach (image tracking) won't work well for text-only browsers or those that don't support js at all, so if your userbase swings primarily towards that area, this mightn't be the best approach.</p>\n",
                    "is_accepted": false,
                    "score": 163
                },
                {
                    "body": "<p>Detect it in what? JavaScript? That would be impossible. If you just want it for logging purposes, you could use some sort of tracking scheme, where each page has JavaScript that will make a request for a special resource (probably a very small <code>gif</code> or similar). That way you can just take the difference between unique page requests and requests for your tracking file.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You'll want to take a look at the noscript tag.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n...some javascript script to insert data...\n&lt;/script&gt;\n&lt;noscript&gt;\n   &lt;p&gt;Access the &lt;a href=\"http://someplace.com/data\"&gt;data.&lt;/a&gt;&lt;/p&gt;\n&lt;/noscript&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If javascript is disabled your client-side code won't run anyway, so I assume you mean you want that info available server-side.  In that case, <em>noscript</em> is less helpful.  Instead, I'd have a hidden input and use javascript to fill in a value.  After your next request or postback, if the value is there you know javascript is turned on.</p>\n\n<p>Be careful of things like noscript, where the first request may show javascript disabled, but future requests turn it on.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>A technique I've used in the past is to use JavaScript to write a session cookie that simply acts as a flag to say that JavaScript is enabled. Then the server-side code looks for this cookie and if it's not found takes action as appropriate. Of course this technique does rely on cookies being enabled!</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I'd suggest you go the other way around by writing unobtrusive JavaScript:</p>\n\n<p>Make the features of your project work for users with JavaScript disabled, and when your're done: implement your JavaScript UI-enhancements.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">http://en.wikipedia.org/wiki/Unobtrusive_JavaScript</a></p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I think you could insert an image tag into a noscript tag and look at the stats how many times your site and how often this image has been loaded.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I assume that you're trying to decide whether or not to deliver JavaScript-enhanced content.  The best implementations degrade cleanly, so that the site still operates without JavaScript. I guess that you mean server-side detection, rather than using the <code>&lt;noscript&gt;</code> element.</p>\n\n<p>There isn't a good way to perform server-side JavaScript detection. Instead, use JavaScript to set a cookie, and then test for that cookie using server-side scripting upon subsequent page views; deliver content appropriately.</p>\n",
                    "is_accepted": true,
                    "score": 176
                },
                {
                    "body": "<p>You might, for instance, use something like document.location = 'java_page.html' to redirect the browser to a new, script-laden page. Failure to redirect implies that JavaScript is unavailable, in which case you can either resort to CGI ro utines or insert appropriate code between the  tags. (NOTE: NOSCRIPT is only available in Netscape Navigator 3.0 and up.)</p>\n\n<p>credit \n<a href=\"http://www.intranetjournal.com/faqs/jsfaq/how12.html\">http://www.intranetjournal.com/faqs/jsfaq/how12.html</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>People have already posted examples that are good options for detection, but based on your requirement of \"give warning that the site is not able to function properly without the browser having JS enabled\". You basically add an element that appears somehow on the page, for example the 'pop-ups' on Stack Overflow when you earn a badge, with an appropriate message, then remove this with some Javascript that runs as soon as the page is loaded (and I mean the DOM, not the whole page).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If your use case is that you have a form (e.g., a login form) and your server-side script needs to know if the user has JavaScript enabled, you can do something like this:</p>\n\n<pre><code>&lt;form onsubmit=\"this.js_enabled.value=1;return true;\"&gt;\n    &lt;input type=\"hidden\" name=\"js_enabled\" value=\"0\"&gt;\n    &lt;input type=\"submit\" value=\"go\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>This will change the value of js_enabled to 1 before submitting the form. If your server-side script gets a 0, no JS. If it gets a 1, JS!</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>The noscript tag works well, but will require each additional page request to continue serving useless JS files, since essentially noscript is a client side check.</p>\n\n<p>You could set a cookie with JS, but as someone else pointed out, this could fail.  Ideally, you'd like to be able to detect JS client side, and without using cookies, set a session server side for that user that indicates is JS is enabled.</p>\n\n<p>A possibility is to dynamically add a 1x1 image using JavaScript where the src attribute is actually a server side script.  All this script does is saves to the current user session that JS is enabled ($_SESSION['js_enabled']).  You can then output a 1x1 blank image back to the browser.  The script won't run for users who have JS disabled, and hence the $_SESSION['js_enabled'] won't be set.  Then for further pages served to this user, you can decide whether to include all of your external JS files, but you'll always want to include the check, since some of your users might be using the NoScript Firefox add-on or have JS disabled temporarily for some other reason.</p>\n\n<p>You'll probably want to include this check somewhere close to the end of your page so that the additional HTTP request doesn't slow down the rendering of your page.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This is what worked for me: it redirects a visitor if javascript is disabled</p>\n\n<pre><code>&lt;noscript&gt;&lt;meta http-equiv=\"refresh\" content=\"0; url=whatyouwant.html\" /&gt;&lt;/noscript&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Adding a refresh in meta inside noscript is not a good idea.</p>\n\n<ol>\n<li><p>Because noscript tag is not XHTML compliant</p></li>\n<li><p>The attribute value \"Refresh\" is nonstandard, and should not be used. \"Refresh\" takes the control of a page away from the user. Using \"Refresh\" will cause a failure in W3C's Web Content Accessibility Guidelines \n--- Reference <a href=\"http://www.w3schools.com/TAGS/att_meta_http_equiv.asp\" rel=\"nofollow\">http://www.w3schools.com/TAGS/att_meta_http_equiv.asp</a>. </p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Why don't you just put a hijacked onClick() event handler that will fire only when JS is enabled, and use this to append a parameter (js=true) to the clicked/selected URL (you could also detect a drop down list and change the value- of add a hidden form field). So now when the server sees this parameter (js=true) it knows that JS is enabled and then do your fancy logic server-side.<br />\n  The down side to this is that the first time a users comes to your site, bookmark, URL, search engine generated URL- you will need to detect that this is a new user so don't look for the NVP appended into the URL, and the server would have to wait for the next click to determine the user is JS enabled/disabled.  Also, another downside is that the URL will end up on the browser URL and if this user then bookmarks this URL it will have the js=true NVP, even if the user does not have JS enabled, though on the next click the server would be wise to knowing whether the user still had JS enabled or not.  Sigh.. this is fun...</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>simply use the noscript tag and ask the user to enable javascript</p>\n\n<p><a href=\"http://www.w3schools.com/TAGS/tag%5Fnoscript.asp\" rel=\"nofollow\">http://www.w3schools.com/TAGS/tag%5Fnoscript.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Because I always want to give the browser something worthwhile to look at I often use this trick:</p>\n\n<p>First, any portion of a page that needs javaScript to run properly (including passive HTML elements that get modified through getElementById calls etc.) are designed to be usable as-is with the assumption that the ISN'T javaScript available.  (designed as if it wasn't there)</p>\n\n<p>Any elements that would require javascript, I place inside a tag something like:</p>\n\n<p>&lt;span name=\"jsOnly\" style=\"display: none;\" &gt;&lt;/span&gt;</p>\n\n<p>Then at the beginning of my document, I use <b>.onload</b> or <b>document.ready</b> within a loop of <b>getElementsByName('jsOnly')</b> to set the <b>.style.display = \"\";</b> turning the JS dependent elements back on.  That way, non-JS browsers don't ever have to see the JS dependent portions of the site, and if they have it, it appears immediately when it's ready.</p>\n\n<p>Once you are used to this method, it's fairly easy to hybridize your code to handle both situations, although I am only now experimenting with the &lt;noscript&gt; tag and expect it will have some additional advantages...</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>To force users to enable JavaScripts, I set 'href' attribute of each link to the same document, which notifies user to enable JavaScripts or download Firefox (if they don't know how to enable JavaScripts). I stored actual link url to the 'name' attribute of links and defined a global onclick event that reads 'name' attribute and redirects the page there.</p>\n\n<p>This works well for my user-base, though a bit fascist ;).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I'd like to add my .02 here.  It's not 100% bulletproof, but I think it's good enough.</p>\n\n<p>The problem, for me, with the preferred example of putting up some sort of \"this site doesn't work so well without Javascript\" message is that you then need to make sure that your site works okay without Javascript.  And once you've started down that road, then you start realizing that the site should be bulletproof with JS turned off, and that's a whole big chunk of additional work.</p>\n\n<p>So, what you really want is a \"redirection\" to a page that says \"turn on JS, silly\".  But, of course, you can't reliably do meta redirections.  So, here's the suggestion:  </p>\n\n<pre><code>&lt;noscript&gt;\n    &lt;style type=\"text/css\"&gt;\n        .pagecontainer {display:none;}\n    &lt;/style&gt;\n    &lt;div class=\"noscriptmsg\"&gt;\n    You don't have javascript enabled.  Good luck with that.\n    &lt;/div&gt;\n&lt;/noscript&gt;\n</code></pre>\n\n<p>...where <em>all</em> of the content in your site is wrapped with a div of class \"pagecontainer\".  The CSS inside the noscript tag will then hide all of your page content, and instead display whatever \"no JS\" message you want to show.  This is actually what Gmail appears to do...and if it's good enough for Google, it's good enough for my little site.</p>\n",
                    "is_accepted": false,
                    "score": 191
                },
                {
                    "body": "<p>For those who just want to track if js was enabled, how about using an ajax routine to store the state? For example, I log all visitors/visits in a set of tables. The JSenabled field can be set to a default of FALSE, and the ajax routine would set it to TRUE, if JS is enabled.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>just a tougth but (hairbo gave me the idear)</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;style type=\"text/css\"&gt;\n        .pagecontainer {\n display:none;\n }\n    &lt;/style&gt;\n    &lt;script&gt;\n     function load() {\n      document.getElementById('noscriptmsg').style.display = \"none\";\n      document.getElementById('load').style.display = \"block\";\n     /* rest of js*/\n     }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"load();\"&gt;\n\n    &lt;div class=\"pagecontainer\" id=\"load\"&gt;\n    Page loading....\n    &lt;/div&gt;\n    &lt;div id=\"noscriptmsg\"&gt;\n    You don't have javascript enabled.  Good luck with that.\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>would work in any case right?\neven if the noscrip tag is unseported (only some css requierd) \nany one knows a  non css solution?</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Add this to the HEAD tag of each page.</p>\n\n<pre><code>&lt;noscript&gt;\n        &lt;meta http-equiv=\"refresh\" runat=\"server\" id=\"mtaJSCheck\" content=\"0;logon.aspx\" /&gt;\n&lt;/noscript&gt;\n</code></pre>\n\n<p>So you have:</p>\n\n<pre><code>&lt;head&gt;\n    &lt;noscript&gt;\n        &lt;meta http-equiv=\"refresh\" runat=\"server\" id=\"mtaJSCheck\" content=\"0;logon.aspx\" /&gt;\n    &lt;/noscript&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>With thanks to Jay.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I've had to solve the same problem yesterday, so I'm just adding my .001 here. The solution works for me ok at least at the home page (index.php)  </p>\n\n<p>I like to have only one file at the root folder: index.php . Then I use folders to structure the whole project (code, css, js, etc). So the code for index.php is as follows:</p>\n\n<p>\n</p>\n\n<pre><code>&lt;head&gt;\n    &lt;title&gt;Please Activate Javascript&lt;/title&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n    &lt;script type=\"text/javascript\" src=\"js/jquery-1.3.2.min.js\"&gt;&lt;/script&gt; \n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;script language=\"JavaScript\"&gt;\n    $(document).ready(function() {\n        location.href = \"code/home.php\";\n    });   \n&lt;/script&gt;\n\n&lt;noscript&gt;\n    &lt;h2&gt;This web site needs javascript activated to work properly. Please activate it. Thanks!&lt;/h2&gt;\n&lt;/noscript&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p>Hope this helps anyone. Best Regards.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You don't detect whether the user has javascript disabled (server side or client).  Instead, you assume that javascript is disabled and build your webpage with javascript disabled.  This obviates the need for <code>noscript</code>, which you should avoid using anyway because it doesn't work quite right and is unnecessary.</p>\n\n<p>For example, just build your site to say <code>&lt;div id=\"nojs\"&gt;This website doesn't work without JS&lt;/div&gt;</code></p>\n\n<p>Then, your script will simply do <code>document.getElementById('nojs').style.display = 'none';</code> and go about its normal JS business.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Check for cookies using a pure server side solution i have introduced <a href=\"http://stackoverflow.com/questions/9205051/a-php-function-to-check-for-cookies\" title=\"A PHP function to check for cookies\">here</a> then check for javascript by dropping a cookie using Jquery.Cookie and then check for cookie this way u check for both cookies and javascript</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use a .no-js class on the body and create non javascript styles based on .no-js parent class. \nIf javascript is disabled you will get all the non javascript styles,\nif there is JS support the .no-js class will be replaced giving you all the styles as usual.</p>\n\n<pre><code> document.body.className = document.body.className.replace(\"no-js\",\"js\");\n</code></pre>\n\n<p>trick used in HTML5 boilerplate <a href=\"http://html5boilerplate.com/\">http://html5boilerplate.com/</a> through modernizr but you can use one line of javascript to replace the classes </p>\n\n<p>noscript tags are okay but why have extra stuff in your html when it can be done with css</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>In some cases, doing it backwards could be sufficient.  Add a class using javascript:</p>\n\n<pre><code>// Jquery\n$('body').addClass('js-enabled');\n\n/* CSS */\n.menu-mobile {display:none;}\nbody.js-enabled .menu-mobile {display:block;}\n</code></pre>\n\n<p>This could create maintenance issues on anything complex, but it's a simple fix for some things.  Rather than trying to detect when it's not loaded, just style according to when it is loaded.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Might sound a strange solution, but you can give it a try :</p>\n\n<pre><code>&lt;?php $jsEnabledVar = 0; ?&gt;    \n\n&lt;script type=\"text/javascript\"&gt;\nvar jsenabled = 1;\nif(jsenabled == 1)\n{\n   &lt;?php $jsEnabledVar = 1; ?&gt;\n}\n&lt;/script&gt;\n\n&lt;noscript&gt;\nvar jsenabled = 0;\nif(jsenabled == 0)\n{\n   &lt;?php $jsEnabledVar = 0; ?&gt;\n}\n&lt;/noscript&gt;\n</code></pre>\n\n<p>Now use the value of '$jsEnabledVar' throughout the page. You may also use it to display a block indicating the user that JS is turned off.</p>\n\n<p>hope this will help</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A common solution is to the meta tag in conjunction with noscript to refresh the page and notify the server when JavaScript is disabled, like this:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;noscript&gt;\n            &lt;meta http-equiv=\"refresh\" content=\"0; /?javascript=false\"&gt;\n        &lt;/noscript&gt;\n        &lt;meta charset=\"UTF-8\"/&gt;\n        &lt;title&gt;&lt;/title&gt;\n    &lt;/head&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>In the above example when JavaScript is disabled the browser will redirect to the home page of the web site in 0 seconds. In addition it will also send the parameter javascript=false to the server.</p>\n\n<p>A server side script such as node.js or PHP can then parse the parameter and come to know that JavaScript is disabled. It can then send a special non-JavaScript version of the web site to the client.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I would like to add my solution to get reliable statistics on how many real users visit my site with javascript disabled over the total users. The check is done one time only per session with these benefits:</p>\n\n<ul>\n<li>Users visiting 100 pages or just 1 are counted 1 each. This allows to focus on single users, not pages.</li>\n<li>Does not break page flow, structure or semantic in anyway</li>\n<li>Could logs user agent. This allow to exclude bots from statistics, such as google bot and bing bot which usually have JS disabled! Could also log IP, time etc...</li>\n<li>Just one check per session (minimal overload)</li>\n</ul>\n\n<p>My code uses PHP, mysql and jquery with ajax but could be adapted to other languanges:</p>\n\n<p>Create a table in your DB like this one:</p>\n\n<pre><code>CREATE TABLE IF NOT EXISTS `log_JS` (\n  `logJS_id` int(11) NOT NULL AUTO_INCREMENT,\n  `data_ins` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `session_id` varchar(50) NOT NULL,\n  `JS_ON` tinyint(1) NOT NULL DEFAULT '0',\n  `agent` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`logJS_id`)\n) ENGINE=MyISAM  DEFAULT CHARSET=utf8;\n</code></pre>\n\n<p>Add this to every page after using session_start() or equivalent (jquery required):</p>\n\n<pre><code>&lt;?  if (!isset($_SESSION[\"JSTest\"]))\n    { \n        mysql_query(\"INSERT INTO log_JS (session_id, agent) VALUES ('\" . mysql_real_escape_string(session_id()) . \"', '\" . mysql_real_escape_string($_SERVER['HTTP_USER_AGENT']). \"')\"); \n        $_SESSION[\"JSTest\"] = 1; // One time per session\n        ?&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            $(document).ready(function() { $.get('JSOK.php'); });\n        &lt;/script&gt;\n        &lt;?\n    }\n?&gt;\n</code></pre>\n\n<p>Create the page JSOK.php like this:</p>\n\n<pre><code>&lt;?\ninclude_once(\"[DB connection file].php\");   \nmysql_query(\"UPDATE log_JS SET JS_ON = 1 WHERE session_id = '\" . mysql_real_escape_string(session_id()) . \"'\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've figured out another approach using css and javascript itself.<br>\nThis is just to start tinkering with classes and ids.</p>\n\n<p>The CSS snippet:<br>\n1. Create a css ID rule, and name it #jsDis.<br>\n2. Use the \"content\" property to generate a text after the BODY element. (You can style this as you wish).<br>\n3 Create a 2nd css ID rule and name it #jsEn, and stylize it. (for the sake of simplicity, I gave to my #jsEn rule a different background color.</p>\n\n<pre><code>&lt;style&gt;\n#jsDis:after {\n    content:\"Javascript is Disable. Please turn it ON!\";\n    font:bold 11px Verdana;\n    color:#FF0000;\n}\n\n#jsEn {\n    background-color:#dedede;\n}\n\n#jsEn:after {\n    content:\"Javascript is Enable. Well Done!\";\n    font:bold 11px Verdana;\n    color:#333333;\n}\n&lt;/style&gt;\n</code></pre>\n\n<p>The JavaScript snippet:<br>\n1. Create a function.<br>\n2. Grab the BODY ID with getElementById and assign it to a variable.<br>\n3. Using the JS function 'setAttribute', change the value of the ID attribute of the BODY element.<br></p>\n\n<pre><code>&lt;script&gt;\nfunction jsOn() {\n    var chgID = document.getElementById('jsDis');\n    chgID.setAttribute('id', 'jsEn');\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>The HTML part.<br>\n1. Name the BODY element attribute with the ID of #jsDis.<br>\n2. Add the onLoad event with the function name. (jsOn()).</p>\n\n<pre><code>&lt;body id=\"jsDis\" onLoad=\"jsOn()\"&gt;\n</code></pre>\n\n<p>Because of the BODY tag has been given the ID of #jsDis:<br>\n- If Javascript is enable, it will change by himself the attribute of the BODY tag.<br>\n- If Javascript is disable, it will show the css 'content:' rule text.<br><br></p>\n\n<p>You can play around with a #wrapper container, or with any DIV that use JS.<br><br>\nHope this helps to get the idea.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a PHP script which can be included once before any output is generated.  It is not perfect, but it works well enough in most cases to avoid delivering content or code that will not be used by the client.  The header comments explain how it works.</p>\n\n<pre><code>&lt;?php\n/*****************************************************************************\n * JAVASCRIPT DETECTION                                                      *\n *****************************************************************************/\n\n// Progressive enhancement and graceful degradation are not sufficient if we\n// want to avoid sending HTML or JavaScript code that won't be useful on the\n// client side.  A normal HTTP request will not include any explicit indicator\n// that JavaScript is enabled in the client.  So a \"preflight response\" is\n// needed to prompt the client to provide an indicator in a follow-up request.\n// Once the state of JavaScript availability has been received the state of\n// data received in the original request must be restored before proceding.\n// To the user, this handshake should be as invisible as possible.\n// \n// The most convenient place to store the original data is in a PHP session.\n// The PHP session extension will try to use a cookie to pass the session ID\n// but if cookies are not enabled it will insert it into the query string.\n// This violates our preference for invisibility.  When Javascript is not\n// enabled the only way to effect a client side redirect is with a \"meta\"\n// element with its \"http-equiv\" attribute set to \"refresh\".  In this case\n// modifying the URL is the only way to pass the session ID back.\n//\n// But when cookies are disabled and JavaScript is enabled then a client side\n// redirect can be effected by setting the \"window.onload\" method to a function\n// which submits a form.  The form has a \"method\" attribute of \"post\" and an\n// \"action\" attribute set to the original URL.  The form contains two hidden\n// input elements, one in which the session ID is stored and one in which the\n// state of JavaScript availability is stored.  Both values are thereby passed\n// back to the server in a POST request while the URL remains unchanged.  The\n// follow-up request will be a POST even if the original request was a GET, but\n// since the original request data is restored, the containing script ought to\n// process the request as though it were a GET.\n\n// In order to ensure that the constant SID is defined as the caller of this\n// script would expect, call session_start if it hasn't already been called.\n$session = isset($_SESSION);\nif (!$session) session_start();\n\n// Use a separate session for Javascript detection.  Save the caller's session\n// name and ID.  If this is the followup request then close the caller's\n// session and reopen the Javascript detection session.  Otherwise, generate a\n// new session ID, close the caller's session and create a new session for\n// Javascript detection.\n$session_name = session_name();\n$session_id = session_id();\nsession_write_close();\nsession_name('JS_DETECT');\nif (isset($_COOKIE['JS_DETECT'])) {\n    session_id($_COOKIE['JS_DETECT']);\n} elseif (isset($_REQUEST['JS_DETECT'])) {\n    session_id($_REQUEST['JS_DETECT']);\n} else {\n    session_id(sha1(mt_rand()));\n}\nsession_start();\n\nif (isset($_SESSION['_SERVER'])) {\n    // Preflight response already sent.\n    // Store the JavaScript availability status in a constant.\n    define('JS_ENABLED', 0+$_REQUEST['JS_ENABLED']);\n    // Store the cookie availability status in a constant.\n    define('COOKIES_ENABLED', isset($_COOKIE['JS_DETECT']));\n    // Expire the cookies if they exist.\n    setcookie('JS_DETECT', 0, time()-3600);\n    setcookie('JS_ENABLED', 0, time()-3600);\n    // Restore the original request data.\n    $_GET = $_SESSION['_GET'];\n    $_POST = $_SESSION['_POST'];\n    $_FILES = $_SESSION['_FILES'];\n    $_COOKIE = $_SESSION['_COOKIE'];\n    $_SERVER = $_SESSION['_SERVER'];\n    $_REQUEST = $_SESSION['_REQUEST'];\n    // Ensure that uploaded files will be deleted if they are not moved or renamed.\n    function unlink_uploaded_files () {\n        foreach (array_keys($_FILES) as $k)\n            if (file_exists($_FILES[$k]['tmp_name']))\n                unlink($_FILES[$k]['tmp_name']);\n    }\n    register_shutdown_function('unlink_uploaded_files');\n    // Reinitialize the superglobal.\n    $_SESSION = array();\n    // Destroy the Javascript detection session.\n    session_destroy();\n    // Reopen the caller's session.\n    session_name($session_name);\n    session_id($session_id);\n    if ($session) session_start();\n    unset($session, $session_name, $session_id, $tmp_name);\n    // Complete the request.\n} else {\n    // Preflight response not sent so send it.\n    // To cover the case where cookies are enabled but JavaScript is disabled,\n    // initialize the cookie to indicate that JavaScript is disabled.\n    setcookie('JS_ENABLED', 0);\n    // Prepare the client side redirect used when JavaScript is disabled.\n    $content = '0; url='.$_SERVER['REQUEST_URI'];\n    if (!$_GET['JS_DETECT']) {\n        $content .= empty($_SERVER['QUERY_STRING']) ? '?' : '&amp;';\n        $content .= 'JS_DETECT='.session_id();\n    }\n    // Remove request data which should only be used here.\n    unset($_GET['JS_DETECT'],$_GET['JS_ENABLED'],\n            $_POST['JS_DETECT'],$_POST['JS_ENABLED'],\n            $_COOKIE['JS_DETECT'],$_COOKIE['JS_ENABLED'],\n            $_REQUEST['JS_DETECT'],$_REQUEST['JS_ENABLED']);\n    // Save all remaining request data in session data.\n    $_SESSION['_GET'] = $_GET;\n    $_SESSION['_POST'] = $_POST;\n    $_SESSION['_FILES'] = $_FILES;\n    $_SESSION['_COOKIE'] = $_COOKIE;\n    $_SESSION['_SERVER'] = $_SERVER;\n    $_SESSION['_REQUEST'] = $_REQUEST;\n    // Rename any uploaded files so they won't be deleted by PHP.  When using\n    // a clustered web server, upload_tmp_dir must point to shared storage.\n    foreach (array_keys($_FILES) as $k) {\n        $tmp_name = $_FILES[$k]['tmp_name'].'x';\n        if (move_uploaded_file($_FILES[$k]['tmp_name'], $tmp_name))\n            $_SESSION['_FILES'][$k]['tmp_name'] = $tmp_name;\n    }\n// Have the client inform the server as to the status of Javascript.\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;script&gt;\n        document.cookie = 'JS_ENABLED=1';\n// location.reload causes a confirm box in FireFox\n//      if (document.cookie) { location.reload(true); }\n        if (document.cookie) { location.href = location; }\n    &lt;/script&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"&lt;?=$content?&gt;\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"formid\" method=\"post\" action=\"\" &gt;\n        &lt;input type=\"hidden\" name=\"&lt;?=$session_name?&gt;\" value=\"&lt;?=$session_id?&gt;\" /&gt;\n        &lt;input type=\"hidden\" name=\"JS_DETECT\" value=\"&lt;?=session_id()?&gt;\" /&gt;\n        &lt;input type=\"hidden\" name=\"JS_ENABLED\" value=\"1\" /&gt;\n    &lt;/form&gt;\n    &lt;script&gt;\n        document.getElementById('formid').submit();\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&lt;?php\n    exit;\n}\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is the twist!\nThere might be client browsers with enabled Javascript and who use JS compatible browsers. But for what ever the reason Javascript does not work in the browser (ex: firewall settings). According to statistics this happens every 1 out of 93 scenarios. So the server detects the client is capable of executing Javascript but actually it doesn't!</p>\n\n<p>As a solution I suggest we set a cookie in client site then read it from server. If the cookie is set then JS works fine. Any thoughts ?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>&lt;noscript&gt;</code> isn't even necessary, and not to mention <strong>not supported in XHTML</strong>.</p>\n\n<p><strong>Working Example</strong>: </p>\n\n<pre><code>    &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\"&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My website&lt;/title&gt;\n        &lt;style&gt;\n          #site {\n              display: none;\n          }\n        &lt;/style&gt;\n        &lt;script src=\"http://code.jquery.com/jquery-latest.min.js \"&gt;&lt;/script&gt;\n        &lt;script&gt;\n          $(document).ready(function() {\n              $(\"#noJS\").hide();\n              $(\"#site\").show();\n          });\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id=\"noJS\"&gt;Please enable javascript...&lt;/div&gt;\n        &lt;div id=\"site\"&gt;javascript dependent content here...&lt;/div&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n\n<p>in this example, if javascript is enabled, then you see the site. If not, then you see the \"no javascript\" message. <strong>The best way to test if javascript is enabled, is to simply try and use javascript!</strong> if it works, its enabled, if not, then its not... </p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>There was a post this morning asking about how many people disable javascript. Then I began to wonder what techniques might be used to determine if the user has it disabled. Anyone know of some short/simple ways to detect if Javascript is disabled? my intention is to give warning that the site is not able to function properly without the browser having JS enabled, eventually I would want to redirect them to content that is able to work in the abscence of JS, but I need this detection as a place holder to start.</p>\n",
            "last_activity_date": 1417191907,
            "question_id": 121203,
            "score": 380,
            "tags": [
                "javascript",
                "html",
                "code-snippets"
            ],
            "title": "How to detect if JavaScript is disabled?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>here it does not change!:</p>\n\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;&lt;/title&gt;\n &lt;/head&gt;\n&lt;body&gt;\n &lt;div id=\"xy\" style=\"width:400px;\"&gt;\n  foobar\n &lt;/div&gt;\n &lt;div&gt;\n  &lt;button onclick=\"alert(document.getElementById('xy').style.width);\"&gt;Show&lt;/button&gt;\n &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>create a simple html file, click on the button. regardless of what zoom level: it will show you the width of 400px (at least with firefox and ie8)</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Your calculations are still based on a number of CSS pixels. They're just a different size on the screen now. That's the point of full page zoom.</p>\n\n<p>What would you want to happen on a browser on a 192dpi device which therefore normally displayed four device pixels for each pixel in an image? At 50% zoom this device now displays one image pixel in one device pixel.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Didn't test this for IE, but if you make an element <code>elem</code> with</p>\n\n<pre><code>min-width: 100%\n</code></pre>\n\n<p>then </p>\n\n<pre><code>window.document.width / elem.clientWidth\n</code></pre>\n\n<p>will give you your browser zoom level (including the <code>document.body.style.zoom</code> factor).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In Internet Explorer 7, 8 &amp; 9, this works:</p>\n\n<pre><code>function getZoom() {\n    var screen;\n\n    screen = document.frames.screen;\n    return ((screen.deviceXDPI / screen.systemXDPI) * 100 + 0.9).toFixed();\n}\n</code></pre>\n\n<p>The \"+0.9\" is added to prevent rounding errors (otherwise, you would get 104% and 109% when the browser zoom is set to 105% and 110% respectively).</p>\n\n<p>In IE6 zoom doesn't exists, so it is unnecessary to check the zoom.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Now it's an even bigger mess than it was when this question was first asked. From reading all the responses and blog posts I could find, here's a summary. I also set up <a href=\"http://htmldoodads.appspot.com/zoom-level.html\">this page to test all these methods of measuring the zoom level</a>.</p>\n\n<p><strong>Edit</strong> (2011-12-12): I've added a project that can be cloned: <a href=\"https://github.com/tombigel/detect-zoom\">https://github.com/tombigel/detect-zoom</a></p>\n\n<ul>\n<li><strong>IE8</strong>: <code>screen.deviceXDPI / screen.logicalXDPI</code> (or, for the zoom level relative to default zoom, <code>screen.systemXDPI / screen.logicalXDPI</code>)</li>\n<li><strong>IE7</strong>: <code>var body = document.body,r = body.getBoundingClientRect(); return (r.left-r.right)/body.offsetWidth;</code> (thanks to <a href=\"http://help.dottoro.com/ljgshbne.php\">this example</a> or <a href=\"http://stackoverflow.com/questions/680596/how-to-get-zoom-level-in-internet-explorer-7-javascript/680747#680747\">this answer</a>)</li>\n<li><strong>FF3.5 ONLY</strong>: <code>screen.width</code> / media query screen width (see below) (takes advantage of the fact that <code>screen.width</code> uses device pixels but MQ width uses CSS pixels--thanks to <a href=\"http://www.quirksmode.org/m/widths.html\">Quirksmode widths</a>)</li>\n<li><strong>FF3.6</strong>: no known method</li>\n<li><strong>FF4+</strong>: media queries binary search (see below)</li>\n<li><strong>WebKit</strong>: measure the preferred size of a div with <code>-webkit-text-size-adjust:none</code>.</li>\n<li><strong>WebKit</strong>: (broken since <a href=\"https://bugs.webkit.org/show_bug.cgi?id=72591\">r72591</a>) <code>document.width / jQuery(document).width()</code> (thanks to <a href=\"http://stackoverflow.com/questions/1713771/how-to-detect-page-zoom-level-in-all-modern-browsers/4135649#4135649\">Dirk van Oosterbosch above</a>). To get ratio in terms of device pixels (instead of relative to default zoom), multiply by <code>window.devicePixelRatio</code>.</li>\n<li><strong>Old WebKit?</strong> (unverified): <code>parseInt(getComputedStyle(document.documentElement,null).width) / document.documentElement.clientWidth</code> (from <a href=\"http://stackoverflow.com/questions/4130649/detect-browser-zoom-level-using-javascript/4132694#4132694\">this answer</a>)</li>\n<li><strong>Opera</strong>: <code>document.documentElement.offsetWidth</code> / width of a <code>position:fixed; width:100%</code> div. <a href=\"http://virtuelvis.com/archives/2005/05/opera-measure-zoom\">from here</a> (<a href=\"http://www.quirksmode.org/m/widths.html\">Quirksmode's widths table</a> says it's a bug; innerWidth should be CSS px). We use the position:fixed element to get the width of the viewport <em>including the space where the scrollbars are</em>; document.documentElement.clientWidth excludes this width. This is broken since sometime in 2011; I know no way to get the zoom level in Opera anymore.</li>\n<li><strong>Other</strong>: <a href=\"http://blog.sebastian-martens.de/2009/12/how-to-detect-the-browser-zoom-level-change-browser-zoo/\">Flash solution from Sebastian</a></li>\n<li>Unreliable: listen to mouse events and measure change in screenX / change in clientX</li>\n</ul>\n\n<p>Here's a binary search for Firefox 4, since I don't know of any variable where it is exposed:</p>\n\n<pre><code>&lt;style id=binarysearch&gt;&lt;/style&gt;\n&lt;div id=dummyElement&gt;Dummy element to test media queries.&lt;/div&gt;\n&lt;script&gt;\nvar mediaQueryMatches = function(property, r) {\n  var style = document.getElementById('binarysearch');\n  var dummyElement = document.getElementById('dummyElement');\n  style.sheet.insertRule('@media (' + property + ':' + r +\n                         ') {#dummyElement ' +\n                         '{text-decoration: underline} }', 0);\n  var matched = getComputedStyle(dummyElement, null).textDecoration\n      == 'underline';\n  style.sheet.deleteRule(0);\n  return matched;\n};\nvar mediaQueryBinarySearch = function(\n    property, unit, a, b, maxIter, epsilon) {\n  var mid = (a + b)/2;\n  if (maxIter == 0 || b - a &lt; epsilon) return mid;\n  if (mediaQueryMatches(property, mid + unit)) {\n    return mediaQueryBinarySearch(\n        property, unit, mid, b, maxIter-1, epsilon);\n  } else {\n    return mediaQueryBinarySearch(\n        property, unit, a, mid, maxIter-1, epsilon);\n  }\n};\nvar mozDevicePixelRatio = mediaQueryBinarySearch(\n    'min--moz-device-pixel-ratio', '', a, b, maxIter, epsilon);\nvar ff35DevicePixelRatio = screen.width / mediaQueryBinarySearch(\n    'min-device-width', 'px', 0, 6000, 25, .0001);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 192
                },
                {
                    "body": "<p>Thanks for the great summary.</p>\n\n<p>For me, for Chrome/Webkit, document.width / jQuery(document).width() did not work. When I made my window small and zoomed into my site such that horizontal scrollbars appeared, document.width / jQuery(document).width() did not equal 1 at the default zoom. This is because document.width includes part of the document outside the viewport.</p>\n\n<p>Using window.innerWidth and window.outerWidth worked. For some reason in Chrome, outerWidth is measured in screen pixels and innerWidth is measured in css pixels.</p>\n\n<pre><code>var screenCssPixelRatio = (window.outerWidth - 8) / window.innerWidth;\nif (screenCssPixelRatio &gt;= .46 &amp;&amp; screenCssPixelRatio &lt;= .54) {\n  zoomLevel = \"-4\";\n} else if (screenCssPixelRatio &lt;= .64) {\n  zoomLevel = \"-3\";\n} else if (screenCssPixelRatio &lt;= .76) {\n  zoomLevel = \"-2\";\n} else if (screenCssPixelRatio &lt;= .92) {\n  zoomLevel = \"-1\";\n} else if (screenCssPixelRatio &lt;= 1.10) {\n  zoomLevel = \"0\";\n} else if (screenCssPixelRatio &lt;= 1.32) {\n  zoomLevel = \"1\";\n} else if (screenCssPixelRatio &lt;= 1.58) {\n  zoomLevel = \"2\";\n} else if (screenCssPixelRatio &lt;= 1.90) {\n  zoomLevel = \"3\";\n} else if (screenCssPixelRatio &lt;= 2.28) {\n  zoomLevel = \"4\";\n} else if (screenCssPixelRatio &lt;= 2.70) {\n  zoomLevel = \"5\";\n} else {\n  zoomLevel = \"unknown\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>I found this article enormously helpful. Huge thanks to yonran. I wanted to pass on some additional learning I found while implementing some of the techniques he provided. In FF6 and Chrome 9, support for media queries from JS was added, which can greatly simplify the media query approach necessary for determining zoom in FF. See the docs at MDN <a href=\"https://developer.mozilla.org/en/CSS/Using_media_queries_from_code\">here</a>. For my purposes, I only needed to detect whether the browser was zoomed in or out, I had no need for the actual zoom factor. I was able to get my answer with one line of JavaScript:</p>\n\n<pre><code>var isZoomed = window.matchMedia('(max--moz-device-pixel-ratio:0.99), (min--moz-device-pixel-ratio:1.01)').matches;\n</code></pre>\n\n<p>Combining this with the IE8+ and Webkit solutions, which were also single lines, I was able to detect zoom on the vast majority of browsers hitting our app with only a few lines of code.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This may or may not help anyone, but I had a page I could not get to center correctly no matter what Css tricks I tried so I wrote a JQuery file call Center Page:</p>\n\n<p>The problem occurred with zoom level of the browser, the page would shift based upon if you were 100%, 125%, 150%, etc.</p>\n\n<p>The code below is in a JQuery file called centerpage.js.</p>\n\n<p>From my page I had to link to JQuery and this file to get it work, even though my master page already had a link to JQuery.</p>\n\n<pre><code>&lt;title&gt;Home Page.&lt;/title&gt;\n&lt;script src=\"Scripts/jquery-1.7.1.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"Scripts/centerpage.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><code>centerpage.js</code>:</p>\n\n<pre><code>// centering page element\nfunction centerPage() {\n    // get body element\n    var body = document.body;\n\n    // if the body element exists\n    if (body != null) {\n        // get the clientWidth\n        var clientWidth = body.clientWidth;\n\n        // request data for centering\n        var windowWidth = document.documentElement.clientWidth;\n        var left = (windowWidth - bodyWidth) / 2;\n\n        // this is a hack, but it works for me a better method is to determine the \n        // scale but for now it works for my needs\n        if (left &gt; 84) {\n            // the zoom level is most likely around 150 or higher\n            $('#MainBody').removeClass('body').addClass('body150');\n        } else if (left &lt; 100) {\n            // the zoom level is most likely around 110 - 140\n            $('#MainBody').removeClass('body').addClass('body125');\n        }\n    }\n}\n\n\n// CONTROLLING EVENTS IN jQuery\n$(document).ready(function() {\n    // center the page\n    centerPage();\n});\n</code></pre>\n\n<p>Also if you want to center a panel:</p>\n\n<pre><code>// centering panel\nfunction centerPanel($panelControl) {\n    // if the panel control exists\n    if ($panelControl &amp;&amp; $panelControl.length) {\n        // request data for centering\n        var windowWidth = document.documentElement.clientWidth;\n        var windowHeight = document.documentElement.clientHeight;\n        var panelHeight = $panelControl.height();\n        var panelWidth = $panelControl.width();\n\n        // centering\n        $panelControl.css({\n            'position': 'absolute',\n            'top': (windowHeight - panelHeight) / 2,\n            'left': (windowWidth - panelWidth) / 2\n        });\n\n        // only need force for IE6\n        $('#backgroundPanel').css('height', windowHeight);\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This is question was posted like ages back, but today when i was looking for the same answer \"How to detect zoom in and out event\", i couldn't find one answer that would fit all the browsers. </p>\n\n<p>As on now : For Firefox/Chrome/IE8 and IE9 , the zoom in and out fires a window.resize event.\nThis can be captured using:</p>\n\n<pre><code>$(window).resize(function() {\n//YOUR CODE.\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This has worked great for me in webkit-based browsers (Chrome, Safari):</p>\n\n<pre><code>function isZoomed() {\n    var width, mediaQuery;\n\n    width = document.body.clientWidth;\n    mediaQuery = '(max-width: ' + width + 'px) and (min-width: ' + width + 'px)';\n\n    return !window.matchMedia(mediaQuery).matches;\n}\n</code></pre>\n\n<p>Doesn't seem to work in Firefox though.</p>\n\n<p>This also works in WebKit:</p>\n\n<pre><code>var zoomLevel = document.width / document.body.clientWidth;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My coworker and I used the script from <a href=\"https://github.com/tombigel/detect-zoom\">https://github.com/tombigel/detect-zoom</a>.  In addition, we also dynamically created a svg element and check its currentScale property. It works great on Chrome and likely most browsers too. On FF the \"zoom text only\" feature has to be turned off though.  SVG is <a href=\"http://caniuse.com/#feat=svg-img\">supported</a> on most browsers.  At the time of this writing, tested on IE10, FF19 and Chrome28.</p>\n\n<pre><code>var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\nsvg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\nsvg.setAttribute('version', '1.1');\ndocument.body.appendChild(svg);\nvar z = svg.currentScale;\n... more code ...\ndocument.body.removeChild(svg);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>This is for <strong>Chrome</strong>, in the wake of <a href=\"http://stackoverflow.com/a/6365777/2308279\"><strong>user800583</strong> answer</a> ...</p>\n\n<p>I spent a few hours on this problem and have not found a better approach, but :</p>\n\n<ul>\n<li>There are 16 'zoomLevel' and not 10</li>\n<li>When Chrome is fullscreen/maximized the ratio is <code>window.outerWidth/window.innerWidth</code>, and when it is not, the ratio seems to be <code>(window.outerWidth-16)/window.innerWidth</code>, however the 1st case can be approached by the 2nd one.</li>\n</ul>\n\n<p>So I came to the following ...</p>\n\n<p>But this approach has limitations : for example if you play the accordion with the application window (rapidly enlarge and reduce the width of the window) then you will get gaps between zoom levels although the zoom has not changed (may be outerWidth and innerWidth are not exactly updated in the same time).</p>\n\n<pre><code>var snap = function (r, snaps)\n{\n    var i;\n    for (i=0; i &lt; 16; i++) { if ( r &lt; snaps[i] ) return i; }\n};\nvar w, l, r;\nw = window.outerWidth, l = window.innerWidth;\nreturn snap((w - 16) / l,\n            [ 0.29, 0.42, 0.58, 0.71, 0.83, 0.95, 1.05, 1.18, 1.38, 1.63, 1.88, 2.25, 2.75, 3.5, 4.5, 100 ],\n);\n</code></pre>\n\n<p>And if you want the factor :</p>\n\n<pre><code>var snap = function (r, snaps, ratios)\n{\n    var i;\n    for (i=0; i &lt; 16; i++) { if ( r &lt; snaps[i] ) return eval(ratios[i]); }\n};\nvar w, l, r;\nw = window.outerWidth, l = window.innerWidth;\nreturn snap((w - 16) / l,\n            [ 0.29, 0.42, 0.58, 0.71, 0.83, 0.95, 1.05, 1.18, 1.38, 1.63, 1.88, 2.25, 2.75, 3.5, 4.5, 100 ],\n            [ 0.25, '1/3', 0.5, '2/3', 0.75, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 2.5, 3, 4, 5 ]\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What i came up with is :</p>\n\n<p>1) Make a <code>position:fixed</code> <code>&lt;div&gt;</code> with <code>width:100%</code> (<em>id=zoomdiv</em>)</p>\n\n<p>2) when the page loads :</p>\n\n<pre><code>zoomlevel=$(\"#zoomdiv\").width()*1.0 / screen.availWidth\n</code></pre>\n\n<p>And it worked for me for <code>ctrl+</code> and <code>ctrl-</code> zooms.</p>\n\n<p>or i can add the line to a <code>$(window).onresize()</code> event to get the active zoom level</p>\n\n<hr>\n\n<p>Code:</p>\n\n<pre><code>&lt;script&gt;\n    var zoom=$(\"#zoomdiv\").width()*1.0 / screen.availWidth;\n\n    $(window).resize(function(){\n        zoom=$(\"#zoomdiv\").width()*1.0 / screen.availWidth;\n        alert(zoom);    \n    });\n&lt;/script&gt;\n&lt;body&gt;\n    &lt;div id=zoomdiv style=\"width:100%;position:fixed;\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>P.S. : this is my first post, pardon any mistakes</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A workaround for FireFox 16+ to find DPPX (zoom level) purely with JavaScript:</p>\n\n<pre><code>var dppx = (function (precision) {\n  var searchDPPX = function(level, min, divisor) {\n    var wmq = window.matchMedia;\n    while (level &gt;= min &amp;&amp; !wmq(\"(min-resolution: \" + (level/divisor) + \"dppx)\").matches) {\n      level--;\n    }\n    return level;\n  };\n\n  var maxDPPX = 5.0; // Firefox 22 has 3.0 as maximum, but testing a bit greater values does not cost much\n  var minDPPX = 0.1; // Firefox 22 has 0.3 as minimum, but testing a bit smaller values does not cost anything\n  var divisor = 1;\n  var result;\n  for (var i = 0; i &lt; precision; i++) {\n    result = 10 * searchDPPX (maxDPPX, minDPPX, divisor);\n    maxDPPX = result + 9;\n    minDPPX = result;\n    divisor *= 10;\n  }\n\n  return result / divisor;\n}) (5);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have this solution for <strong>mobile only</strong> (tested with Android):</p>\n\n<pre><code>jQuery(function($){\n\nzoom_level = function(){\n\n    $(\"body\").prepend('&lt;div class=\"overlay\" ' +\n                'style=\"position:fixed; top:0%; left:0%; ' +\n                'width:100%; height:100%; z-index:1;\"&gt;&lt;/div&gt;');\n\n    var ratio = $(\"body .overlay:eq(0)\").outerWidth() / $(window).width();\n    $(\"body .overlay:eq(0)\").remove();\n\n    return ratio;\n}\n\nalert(zoom_level());\n\n});\n</code></pre>\n\n<p>If you want the zoom level right after the pinch move, you will probably have to set a little timeout because of the rendering delay (but I'm not sure because I didn't test it).</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<ol>\n<li><p>How can I detect the page zoom level in all modern browsers? While this <a href=\"http://stackoverflow.com/questions/680596/how-to-get-zoom-level-in-internet-explorer-7-javascript\">thread</a> tells how to do it in IE7 and IE8, I can't find a good cross-browser solution.</p></li>\n<li><p>Firefox stores the page zoom level for future access. On the first page load, would I be able to get the zoom level? Somewhere I read it works when a zoom change occurs <em>after</em> the page is loaded.</p></li>\n<li><p>Is there a way to trap the <code>'zoom'</code> event?</p></li>\n</ol>\n\n<p>I need this because some of my calculations are pixel-based and they may fluctuate when zoomed.</p>\n\n<hr>\n\n<p><strong>Modified sample given by @tfl</strong></p>\n\n<p>This page alerts different height values when zoomed. <a href=\"http://jsfiddle.net/hjLnG/\">[jsFiddle]</a></p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js\" type=\"text/javascript\"/&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"xy\" style=\"border:1px solid #f00; width:100px;\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque sollicitudin tortor in lacus tincidunt volutpat. Integer dignissim imperdiet mollis. Suspendisse quis tortor velit, placerat tempor neque. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Praesent bibendum auctor lorem vitae tempor. Nullam condimentum aliquam elementum. Nullam egestas gravida elementum. Maecenas mattis molestie nisl sit amet vehicula. Donec semper tristique blandit. Vestibulum adipiscing placerat mollis.&lt;/div&gt;\n        &lt;button onclick=\"alert($('#xy').height());\"&gt;Show&lt;/button&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1404930129,
            "question_id": 1713771,
            "score": 160,
            "tags": [
                "javascript",
                "browser",
                "zoom",
                "detection"
            ],
            "title": "How to detect page zoom level in all modern browsers?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<pre><code> var xhReq = new XMLHttpRequest();\n xhReq.open(\"GET\", \"sumGet.phtml?figure1=5&amp;figure2=10\", false);\n xhReq.send(null);\n var serverResponse = xhReq.responseText;\n alert(serverResponse); // Shows \"15\"\n</code></pre>\n\n<p><a href=\"http://ajaxpatterns.org/XMLHttpRequest_Call\">http://ajaxpatterns.org/XMLHttpRequest_Call</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>With \"vanilla\" JavaScript:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction loadXMLDoc() {\n    var xmlhttp;\n\n    if (window.XMLHttpRequest) {\n        // code for IE7+, Firefox, Chrome, Opera, Safari\n        xmlhttp = new XMLHttpRequest();\n    } else {\n        // code for IE6, IE5\n        xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xmlhttp.onreadystatechange = function() {\n        if (xmlhttp.readyState == 4 ) {\n           if(xmlhttp.status == 200){\n               document.getElementById(\"myDiv\").innerHTML = xmlhttp.responseText;\n           }\n           else if(xmlhttp.status == 400) {\n              alert('There was an error 400')\n           }\n           else {\n               alert('something else other than 200 was returned')\n           }\n        }\n    }\n\n    xmlhttp.open(\"GET\", \"ajax_info.txt\", true);\n    xmlhttp.send();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>With jQuery:</p>\n\n<pre><code>$.ajax({\n    url: \"test.html\",\n    context: document.body,\n    success: function(){\n      $(this).addClass(\"done\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 171
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n  &lt;script&gt;\n    var xmlDoc = null ;\n\n  function load() {\n    if (typeof window.ActiveXObject != 'undefined' ) {\n      xmlDoc = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      xmlDoc.onreadystatechange = process ;\n    }\n    else {\n      xmlDoc = new XMLHttpRequest();\n      xmlDoc.onload = process ;\n    }\n    xmlDoc.open( \"GET\", \"background.html\", true );\n    xmlDoc.send( null );\n  }\n\n  function process() {\n    if ( xmlDoc.readyState != 4 ) return ;\n    document.getElementById(\"output\").value = xmlDoc.responseText ;\n  }\n\n  function empty() {\n    document.getElementById(\"output\").value = '&lt;empty&gt;' ;\n  }\n&lt;/script&gt;\n\n&lt;body&gt;\n  &lt;textarea id=\"output\" cols='70' rows='40'&gt;&lt;empty&gt;&lt;/textarea&gt;\n  &lt;br&gt;&lt;/br&gt;\n  &lt;button onclick=\"load()\"&gt;Load&lt;/button&gt; &amp;nbsp;\n  &lt;button onclick=\"empty()\"&gt;Clear&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>HTML :</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;script&gt;\n    function loadXMLDoc()\n    {\n    var xmlhttp;\n    if (window.XMLHttpRequest)\n      {// code for IE7+, Firefox, Chrome, Opera, Safari\n      xmlhttp=new XMLHttpRequest();\n      }\n    else\n      {// code for IE6, IE5\n      xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n    xmlhttp.onreadystatechange=function()\n      {\n      if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)\n        {\n        document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n        }\n      }\n    xmlhttp.open(\"GET\",\"1.php?id=99freebies.blogspot.com\",true);\n    xmlhttp.send();\n    }\n    &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;div id=\"myDiv\"&gt;&lt;h2&gt;Let AJAX change this text&lt;/h2&gt;&lt;/div&gt;\n    &lt;button type=\"button\" onclick=\"loadXMLDoc()\"&gt;Change Content&lt;/button&gt;\n\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n\n<p>PHP:</p>\n\n<pre><code>&lt;?php\n\n$id = $_GET[id];\nprint \"$id\";\n\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Using the following snippet you can do similar things pretty easily, like this:</p>\n\n<pre><code>ajax.get('/test.php', {foo: 'bar'}, function() {});\n</code></pre>\n\n<p>Here is the snippet:</p>\n\n<pre><code>var ajax = {};\najax.x = function() {\n    if (typeof XMLHttpRequest !== 'undefined') {\n        return new XMLHttpRequest();  \n    }\n    var versions = [\n        \"MSXML2.XmlHttp.5.0\",   \n        \"MSXML2.XmlHttp.4.0\",  \n        \"MSXML2.XmlHttp.3.0\",   \n        \"MSXML2.XmlHttp.2.0\",  \n        \"Microsoft.XmlHttp\"\n    ];\n\n    var xhr;\n    for(var i = 0; i &lt; versions.length; i++) {  \n        try {  \n            xhr = new ActiveXObject(versions[i]);  \n            break;  \n        } catch (e) {\n        }  \n    }\n    return xhr;\n};\n\najax.send = function(url, callback, method, data, sync) {\n    var x = ajax.x();\n    x.open(method, url, sync);\n    x.onreadystatechange = function() {\n        if (x.readyState == 4) {\n            callback(x.responseText)\n        }\n    };\n    if (method == 'POST') {\n        x.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    }\n    x.send(data)\n};\n\najax.get = function(url, data, callback, sync) {\n    var query = [];\n    for (var key in data) {\n        query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    }\n    ajax.send(url + '?' + query.join('&amp;'), callback, 'GET', null, sync)\n};\n\najax.post = function(url, data, callback, sync) {\n    var query = [];\n    for (var key in data) {\n        query.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    }\n    ajax.send(url, callback, 'POST', query.join('&amp;'), sync)\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>You can use the following function:</p>\n\n<pre><code>function callAjax(url, callback){\n    var xmlhttp;\n    // compatible with IE7+, Firefox, Chrome, Opera, Safari\n    xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = function(){\n        if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200){\n            callback(xmlhttp.responseText);\n        }\n    }\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send();\n}\n</code></pre>\n\n<p>You can try similar solutions online on these links:</p>\n\n<ul>\n<li><a href=\"http://www.w3schools.com/ajax/tryit.asp?filename=tryajax_first\">http://www.w3schools.com/ajax/tryit.asp?filename=tryajax_first</a></li>\n<li><a href=\"http://www.w3schools.com/ajax/tryit.asp?filename=tryajax_callback\">http://www.w3schools.com/ajax/tryit.asp?filename=tryajax_callback</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>You can get the correct object according to the browser with</p>\n\n<pre><code>function getXmlDoc() {\n  var xmlDoc;\n\n  if (window.XMLHttpRequest) {\n    // code for IE7+, Firefox, Chrome, Opera, Safari\n    xmlDoc = new XMLHttpRequest();\n  }\n  else {\n    // code for IE6, IE5\n    xmlDoc = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n\n  return xmlDoc;\n}\n</code></pre>\n\n<p>With the correct object, a GET might can be abstracted to:</p>\n\n<pre><code>function myGet(url, callback) {\n  var xmlDoc = getXmlDoc();\n\n  xmlDoc.open('GET', url, true);\n\n  xmlDoc.onreadystatechange = function() {\n    if (xmlDoc.readyState === 4 &amp;&amp; xmlDoc.status === 200) {\n      callback(xmlDoc);\n    }\n  }\n\n  xmlDoc.send();\n}\n</code></pre>\n\n<p>And a POST to:</p>\n\n<pre><code>function myPost(url, data, callback) {\n  var xmlDoc = getXmlDoc();\n\n  xmlDoc.open('POST', url, true);\n  xmlDoc.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\n  xmlDoc.onreadystatechange = function() {\n    if (xmlDoc.readyState === 4 &amp;&amp; xmlDoc.status === 200) {\n      callback(xmlDoc);\n    }\n  }\n\n  xmlDoc.send(data);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This may help:</p>\n\n<pre><code>function doAjax(url, callback) {\n    var xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n    xmlhttp.onreadystatechange = function() {\n        if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {\n            callback(xmlhttp.responseText);\n        }\n    }\n\n    xmlhttp.open(\"GET\", url, true);\n    xmlhttp.send();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>A small combination from a couple of the examples below and created this simple piece:</strong></p>\n\n<pre><code>function ajax(url, method, data, async)\n{\n    method = typeof method !== 'undefined' ? method : 'GET';\n    async = typeof async !== 'undefined' ? async : false;\n\n    if (window.XMLHttpRequest)\n    {\n        var xhReq = new XMLHttpRequest();\n    }\n    else\n    {\n        var xhReq = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n\n    if (method == 'POST')\n    {\n        xhReq.open(method, url, async);\n        xhReq.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        xhReq.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        xhReq.send(data);\n    }\n    else\n    {\n        if(typeof data !== 'undefined' &amp;&amp; data !== null)\n        {\n            url = url+'?'+data;\n        }\n        xhReq.open(method, url, async);\n        xhReq.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        xhReq.send(null);\n    }\n    //var serverResponse = xhReq.responseText;\n    //alert(serverResponse);\n}\n\n// Example usage below (using a string query):\n\najax('http://www.google.com');\najax('http://www.google.com', 'POST', 'q=test');\n</code></pre>\n\n<p><strong>OR if your parameters are object(s) - minor additional code adjustment:</strong></p>\n\n<pre><code>var parameters = {\n    q: 'test'\n}\n\nvar query = [];\nfor (var key in parameters)\n{\n    query.push(encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]));\n}\n\najax('http://www.google.com', 'POST', query.join('&amp;'));\n</code></pre>\n\n<p>Both should be fully browser + version compatible.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I was looking for away to include promises with ajax and exclude jQuery. There's an article on <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"nofollow\">HTML5 Rocks</a> that talks about ES6 promises (could polyfill with a promise library like <a href=\"https://github.com/kriskowal/q\" rel=\"nofollow\">Q</a>) then use the code snippet that I copied from the article.</p>\n\n<pre><code>function get(url) {\n  // Return a new promise.\n  return new Promise(function(resolve, reject) {\n    // Do the usual XHR stuff\n    var req = new XMLHttpRequest();\n    req.open('GET', url);\n\n    req.onload = function() {\n      // This is called even on 404 etc\n      // so check the status\n      if (req.status == 200) {\n        // Resolve the promise with the response text\n        resolve(req.response);\n      }\n      else {\n        // Otherwise reject with the status text\n        // which will hopefully be a meaningful error\n        reject(Error(req.statusText));\n      }\n    };\n\n    // Handle network errors\n    req.onerror = function() {\n      reject(Error(\"Network Error\"));\n    };\n\n    // Make the request\n    req.send();\n  });\n}\n</code></pre>\n\n<p>Note: I also wrote <a href=\"http://www.geekswithblogs.net/Aligned/archive/2014/10/07/ajax-promises-without-jquery.aspx\" rel=\"nofollow\">an article about this</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you don't want to include JQuery, I'd try out microAjax:</p>\n\n<p><a href=\"https://code.google.com/p/microajax/\" rel=\"nofollow\">https://code.google.com/p/microajax/</a></p>\n\n<p>This is all the code right here:</p>\n\n<pre><code>function microAjax(B,A){this.bindFunction=function(E,D){return function(){return E.apply(D,[D])}};this.stateChange=function(D){if(this.request.readyState==4){this.callbackFunction(this.request.responseText)}};this.getRequest=function(){if(window.ActiveXObject){return new ActiveXObject(\"Microsoft.XMLHTTP\")}else{if(window.XMLHttpRequest){return new XMLHttpRequest()}}return false};this.postBody=(arguments[2]||\"\");this.callbackFunction=A;this.url=B;this.request=this.getRequest();if(this.request){var C=this.request;C.onreadystatechange=this.bindFunction(this.stateChange,this);if(this.postBody!==\"\"){C.open(\"POST\",B,true);C.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\");C.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");C.setRequestHeader(\"Connection\",\"close\")}else{C.open(\"GET\",B,true)}C.send(this.postBody)}};\n</code></pre>\n\n<p>It's very lightweight and works like a charm. Just do:</p>\n\n<pre><code>microAjax(url, callback);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How to make an AJAX call using JavaScript, without using jQuery? </p>\n",
            "last_activity_date": 1422997670,
            "question_id": 8567114,
            "score": 182,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "How to make an AJAX call without jQuery?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Namespacing. JavaScript's scopes are function-level.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>IIRC it allows you to create private properties and methods.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Its all about variable scoping.  Variables declared in the self executing function are, by default, only available to code within the self executing function.  This allows code to be written without concern of how variables are named in other blocks of javascript code.</p>\n",
                    "is_accepted": true,
                    "score": 176
                },
                {
                    "body": "<p>Since functions in Javascript are first-class object, by defining it that way, it effectively defines a \"class\" much like C++ or C#.</p>\n\n<p>That function can define local variables, and have functions within it.  The internal functions (effectively instance methods) will have access to the local variables (effectively instance variables), but they will be isolated from the rest of the script.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Scope isolation, maybe.  So that the variables inside the function declaration don't pollute the outer namespace.</p>\n\n<p>Of course, on half the JS implementations out there, they will anyway.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>One difference is that the variables that you declare in the function are local, so they goes away when you exit the function and the don't conflict with other variables in other code.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Is there a parameter and the \"Bunch of code\" returns a function?</p>\n\n<pre><code>var a = function(x) { return function() { document.write(x); } }(something);\n</code></pre>\n\n<p>Closure. The value of <code>something</code> gets used by the function assigned to <code>a</code>. <code>something</code> could have some varying value (for loop) and every time a has a new function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<blockquote>\n  <p>Self-invocation (also known as\n  auto-invocation) is when a function\n  executes immediately upon its\n  definition. This is a core pattern and\n  serves as the foundation for many\n  other patterns of JavaScript\n  development.</p>\n</blockquote>\n\n<p>I am a great fan :) of it because:</p>\n\n<ul>\n<li>It keeps code to a minimum</li>\n<li>It enforces separation of behavior from presentation</li>\n<li>It provides a closure which prevents naming conflicts</li>\n</ul>\n\n<p>Enormously \u2013 (Why you should say its good?)</p>\n\n<ul>\n<li>It\u2019s about defining and executing a function all at once.</li>\n<li>You could have that self-executing function return a value and pass the function as a param to another function.</li>\n<li>It\u2019s good for encapsulation.</li>\n<li>It\u2019s also good for block scoping.</li>\n<li>Yeah, you can enclose all your .js files in a self-executing function and can prevent global namespace pollution. ;)</li>\n</ul>\n\n<p>More <a href=\"http://mahtonu.wordpress.com/2010/05/19/self-executing-functions-in-javascript/\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>I can't believe none of the answers mention implied globals.</p>\n\n<p>The <code>(function(){})()</code> construct does not protect agains implied globals, which to me is the bigger concern, see <a href=\"http://yuiblog.com/blog/2006/06/01/global-domination/\" rel=\"nofollow\">http://yuiblog.com/blog/2006/06/01/global-domination/</a></p>\n\n<p>Basically the function block makes sure all the dependent \"global vars\" you defined are confined to your program, it does not protect you against defining implicit globals. <a href=\"http://www.jshint.com\" rel=\"nofollow\">JSHint</a> or the like it what you actually want to defend against that.</p>\n\n<p>The more concise <code>var App = {}</code> syntax provides a similar level of protection, and may be wrapped in the function block when on 'public' pages. (see <a href=\"http://emberjs.com\" rel=\"nofollow\">Ember.js</a> or <a href=\"http://sproutcore.com\" rel=\"nofollow\">SproutCore</a> for real world examples of libraries that use this construct)</p>\n\n<p>As far as <code>private</code> properties go, they are kind of overrated unless you are creating a public framework or library, but if you need to implement them, <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"nofollow\">Douglas Crockford</a> has some good ideas.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>In javascript, when would you want to use this:</p>\n\n<pre><code>(function(){\n    //Bunch of code...\n})();\n</code></pre>\n\n<p>over this:</p>\n\n<pre><code>//Bunch of code...\n</code></pre>\n",
            "last_activity_date": 1410229797,
            "question_id": 592396,
            "score": 157,
            "tags": [
                "javascript",
                "closures",
                "self-executing-function"
            ],
            "title": "What is the purpose of a self executing function in javascript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>This is my basic understanding, it may well be wrong!</p>\n\n<ol>\n<li>Items are watched by passing a function (returning the thing to be\nwatched) to the <code>$watch</code> method.</li>\n<li>Changes to watched items must be made within a block of code\nwrapped by the <code>$apply</code> method.</li>\n<li>At the end of the <code>$apply</code> the <code>$digest</code> method is invoked which goes\nthrough each of the watches and checks to see if they changed since\nlast time the <code>$digest</code> ran.</li>\n<li>If any changes are found then the digest is invoked again until all changes stabilize.</li>\n</ol>\n\n<p>In normal development, data-binding syntax in the html tells the angular compiler to create the watches for you and controller methods are run inside <code>$apply</code> already.  So to the app developer it is all transparent.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>AngularJS remembers the value and compares it to previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event. </p>\n\n<p>The <code>$apply()</code> method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls <code>$digest()</code>. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</p>\n\n<p>To contrast dirty-checking (AngularJS) vs change listeners (<a href=\"http://en.wikipedia.org/wiki/KnockoutJS\">KnockoutJS</a> and <a href=\"https://en.wikipedia.org/wiki/Backbone.js\">Backbone.js</a>): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</p>\n\n<h1>Issues with change listeners:</h1>\n\n<ul>\n<li>Syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course no proxies on old browsers. The bottom line is that dirty-checking allows you to do <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Java_Object\">POJO</a>, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</li>\n<li>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine grained.</li>\n<li>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</li>\n</ul>\n\n<h1>What about performance?</h1>\n\n<p>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</p>\n\n<p>Humans are:</p>\n\n<ul>\n<li><p><em>Slow</em> \u2014 Anything faster than 50&nbsp;ms is imperceptible to humans and thus can be considered as \"instant\".</p></li>\n<li><p><em>Limited</em> \u2014 You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</p></li>\n</ul>\n\n<p>So the real question is this: How many comparisons can you do on a browser in 50&nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: <a href=\"http://jsperf.com/angularjs-digest/6\">http://jsperf.com/angularjs-digest/6</a> which creates 10,000 watchers. On a modern browser this takes just under 6&nbsp;ms. On <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> it takes about 40&nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: the comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</p>\n\n<p>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</p>\n",
                    "is_accepted": true,
                    "score": 1573
                },
                {
                    "body": "<p>I wondered this myself for awhile. Without setters how does Angular notice changes to the <code>$scope</code> object? Does it poll them?</p>\n\n<p>What it actually does is this: Any \"normal\" place you modify the model was already called from the guts of Angular, so it automatically calls $apply for you after your code runs. Say your controller has a method that's hooked up to <code>ng-click</code> on some element. Because Angular wires the calling of that method together for you, it has a chance to do an <code>$apply</code> in the appropriate place. Likewise for expressions that appear right in the views, those are executed by Angular so it does the <code>$apply</code>.</p>\n\n<p>When the docs talk about having to call <code>$apply</code> manually for code <em>outside of angular</em>, it's talking about code which, when run, doesn't stem from Angular itself in the call stack.</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Misko already gave an excellent description of how the data bindings work, but I would like to add my view on the performance issue with the data binding.</p>\n\n<p>As Misko stated, around 2000 bindings is where you start to see problems, but you shouldn't have more than 2000 pieces of information on a page anyway. This may be true, but not every data-binding is visible to the user. Once you start building any sort of widget or data grid with two-way binding you can <em>easily</em> hit 2000 bindings, without having a bad ux.</p>\n\n<p>Consider, for example, a combobox where you can type text to filter the available options. This sort of control could have ~150 items and still be highly usable. If it has some extra feature (for example a specific class on the currently selected option) you start to get 3-5 bindings per option. Put three of these widgets on a page (e.g. one to select a country, the other to select a city in said country, and the third to select a hotel) and you are somewhere between 1000 and 2000 bindings already.</p>\n\n<p>Or consider a data-grid in a corporate web application. 50 rows per page is not unreasonable, each of which could have 10-20 columns. If you build this with ng-repeats, and/or have information in some cells which uses some bindings, you could be approaching 2000 bindings with this grid alone.</p>\n\n<p>I find this to be a <strong>huge</strong> problem when working with AngularJS, and the only solution I've been able to find so far is to construct widgets without using two-way binding, instead using ngOnce, deregistering watchers and similar tricks, or construct directives which builds the DOM with jQuery and DOM manipulation. I feel this defeats the purpose of using Angular in the first place.</p>\n\n<p>I would love to hear suggestions on other ways to handle this, but then maybe I should write my own question. I wanted to put this in a comment, but it turned out to be way too long for that...</p>\n\n<p><strong>TL;DR</strong> <br />\nThe data binding can cause performance issues on complex pages.</p>\n",
                    "is_accepted": false,
                    "score": 147
                },
                {
                    "body": "<p>It happened that I needed to link a data model of a person with a form, what I did was a direct mapping of the data with the form.</p>\n\n<p>For example if the model had something like:</p>\n\n<pre><code>$scope.model.people.name\n</code></pre>\n\n<p>The control input of the form:</p>\n\n<pre><code>&lt;input type=\"text\" name=\"namePeople\" model=\"model.people.name\"&gt;\n</code></pre>\n\n<p>That way if you modify the value of the object controller, this will be reflected automatically in the view.</p>\n\n<p>An example where I passed the model is updated from server data is when you ask for a zip code and zip code based on written loads a list of colonies and cities associated with that view, and by default set the first value with the user. And this I worked very well, what does happen, is that angularJS sometimes takes a few seconds to refresh the model, to do this you can put a spinner while displaying the data.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>How does databinding work in the AngularJS framework?</p>\n\n<p>I haven't found technical details on <a href=\"http://angularjs.org\">their site</a>. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters? I found that there are <a href=\"http://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">JavaScript watchers</a> that may do this work. But they are not supported in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\">Internet&nbsp;Explorer&nbsp;7</a>. So how does AngularJS know that I changed for example:</p>\n\n<pre><code>myobject.myproperty=\"new value\";\n</code></pre>\n\n<p>and reflect this change on a view?</p>\n",
            "last_activity_date": 1422508963,
            "question_id": 9682092,
            "score": 760,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "Databinding in AngularJS"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>JavaScript has no classes. It uses the mightier prototypical inheritance, which can mimic classes, but is not suited well for it. Everything is an object, and objects [can] inherit from other objects.</p>\n\n<p>A constructor is just a function that assigns properties to newly created objects. The object (created by a call with the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/new\"><code>new</code> keyword</a>) can be referenced trough the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/this\"><code>this</code> keyword</a> (which is local to the function).</p>\n\n<p>A method also is just a function which is called <em>on</em> an object - again with <code>this</code> pointing to the object. At least when that function is invoked as a property of the object, using a <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Member_Operators\">member operator</a> (dot, brackets). This causes lots of confusion to newbies, because if you pass around that function (e.g. to an event listener) it is \"detached\" from the object it was accessed on.</p>\n\n<p>Now where is the inheritance? Instances of a \"class\" inherit from the same prototype object. Methods are defined as function properties on that object (instead of one function for each instance), the instance on which you call them just inherits that property.</p>\n\n<p>Example:</p>\n\n<pre><code>function Foo() {\n    this.bar = \"foo\"; // creating a property on the instance\n}\nFoo.prototype.foo = 0; // of course you also can define other values to inherit\nFoo.prototype.getBar = function() {\n    // quite useless\n    return this.bar;\n}\n\nvar foo = new Foo; // creates an object which inherits from Foo.prototype,\n                   // applies the Foo constructor on it and assigns it to the var\nfoo.getBar(); // \"foo\" - the inherited function is applied on the object and\n              // returns its \"bar\" property\nfoo.bar; // \"foo\" - we could have done this easier.\nfoo[foo.bar]; // 0 - access the \"foo\" property, which is inherited\nfoo.foo = 1;  // and now overwrite it by creating an own property of foo\nfoo[foo.getBar()]; // 1 - gets the overwritten property value. Notice that\n(new Foo).foo;     // is still 0\n</code></pre>\n\n<p>So, we did only use properties of that object and are happy with it. But all of them are \"public\", and can be overwritten/changed/deleted! If that doesn't matter you, you're lucky. You can indicate \"privateness\" of properties by prefixing their names with underscores, but that's only a hint to other developers and may not be obeyed (especially in error).</p>\n\n<p>So, clever minds have found a solution that uses the constructor function as a closure, allowing the creating of private \"attributes\". Every execution of a javascript function creates a new variable environment for local variables, which may get garbage collected once the execution has finished. Every function that is declared inside that scope also has access to these variables, and as long as those functions could be called (e.g. by an event listener) the environment must persist. So, by <em>exporting locally defined functions</em> from your constructor you preserve that variable environment with local variables that can only be accessed by these functions.</p>\n\n<p>Let's see it in action:</p>\n\n<pre><code>function Foo() {\n    var bar = \"foo\"; // a local variable\n    this.getBar = function getter() {\n        return bar; // accesses the local variable\n    }; // the assignment to a property makes it available to outside\n}\n\nvar foo = new Foo; // an object with one method, inheriting from a [currently] empty prototype\nfoo.getBar(); // \"foo\" - receives us the value of the \"bar\" variable in the constructor\n</code></pre>\n\n<p>This getter function, which is defined inside the constructor, is now called a \"<em>privileged</em> method\" as it has access to the \"private\" (local) \"attributes\" (variables). The value of <code>bar</code> will never change. You also could declare a setter function for it, of course, and with that you might add some validation etc.</p>\n\n<p>Notice that the methods on the prototype object do not have access to the local variables of the constructor, yet they might use the privileged methods. Let's add one:</p>\n\n<pre><code>Foo.prototype.getFooBar = function() {\n    return this.getBar() + \"bar\"; // access the \"getBar\" function on \"this\" instance\n}\n// the inheritance is dynamic, so we can use it on our existing foo object\nfoo.getFooBar(); // \"foobar\" - concatenated the \"bar\" value with a custom suffix\n</code></pre>\n\n<p>So, you can combine both approaches. Notice that the privileged methods need more memory, as you create distinct function objects with different scope chains (yet the same code). If you are going to create very much instances, you should define methods only on the prototype.</p>\n\n<p>It gets even a little more complicated when you are setting up inheritance from one \"class\" to another - basically you have to make the child prototype object inherit from the parent one, and apply the parent constructor on child instances to create the \"private attributes\". Have a look at <a href=\"http://stackoverflow.com/q/10898786/1048572\">Correct javascript inheritance</a>, <a href=\"http://stackoverflow.com/q/3617139/1048572\">Private variables in inherited prototypes</a>, <a href=\"http://stackoverflow.com/q/12463040/1048572\">Define Private field Members and Inheritance in JAVASCRIPT module pattern</a> and <a href=\"http://stackoverflow.com/q/9248655/1048572\">How to implement inheritance in JS Revealing prototype pattern?</a></p>\n",
                    "is_accepted": true,
                    "score": 20
                },
                {
                    "body": "<p>To get closer to OOP in JavaScript, you might want to take a look into a Module design pattern (for instance, described <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/\" rel=\"nofollow\">here</a>).</p>\n\n<p>Based on the closure effect, this pattern allows emulating private properties in your objects.</p>\n\n<p>With 'private' properties you can reference them directly by its identifier (i.e., no <code>this</code> keyword as in constructors).</p>\n\n<p>But anyway, closures and design patterns in JS - an advanced topic. So, get familiar with basics (also explained in the book mentioned before).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In javascript <code>this</code> always refers to the owner object of the function. For example, if you define your function <code>foo()</code> in a page, then owner is the javascript object <code>windows</code>; or if you define the <code>foo()</code> on html element <code>&lt;body&gt;</code>, then the owner is the html element body; and likewise if you define the function onclick of element <code>&lt;a&gt;</code>, then the owner is the anchor.</p>\n\n<p>In your case, you are assigning a property <code>bar</code> to the 'owner' object at the begining and trying to return the local variable <code>bar</code>.</p>\n\n<p>Since you never defined any local varialbe <code>bar</code>, it is giving you as bar is undefined.</p>\n\n<p>Ideally your code should have defined the variable as <code>var bar;</code> if you want to return the value zero.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Explicitly saying <code>this.foo</code> means (as you've understood well) that you're interested about the property <code>foo</code> of the current object referenced by <code>this</code>. So if you use: <code>this.foo = 'bar';</code> you're going to set the property <code>foo</code> of the current object referenced by <code>this</code> equals to <code>bar</code>.</p>\n\n<p>The <code>this</code> keyword in JavaScript doesn't always mean the same thing like in C++. Here I can give you an example:</p>\n\n<pre><code>function Person(name) {\n   this.name = name;\n   console.log(this); //Developer {language: \"js\", name: \"foo\"} if called by Developer\n}\n\nfunction Developer(name, language) {\n   this.language = language;\n   Person.call(this, name);\n}\n\nvar dev = new Developer('foo', 'js');\n</code></pre>\n\n<p>In the example above we're calling the function <code>Person</code> with the context of the function <code>Developer</code> so <code>this</code> is referencing to the object which will be created by <code>Developer</code>. As you might see from the <code>console.log</code> result <code>this</code> is comes from <code>Developer</code>. With the first argument of the method <code>call</code> we specify the context with which the function will be called.</p>\n\n<p>If you don't use <code>this</code> simply the property you've created will be a local variable. As you might know JavaScript have functional scope so that's why the variable will be local, visible only for the function where it's declared (and of course all it's child functions which are declared inside the parent). Here is an example:</p>\n\n<pre><code>function foo() {\n    var bar = 'foobar';\n    this.getBar = function () {\n        return bar;\n    }\n}\n\nvar f = new foo();\nconsole.log(f.getBar());  //'foobar'\n</code></pre>\n\n<p>This is true when you use the <code>var</code> keyword. This means that you're defining <code>bar</code> as local variable if you forget <code>var</code> unfortunately <code>bar</code> will became global.</p>\n\n<pre><code>function foo() {\n    bar = 'foobar';\n    this.getBar = function () {\n        return bar;\n    }\n}\n\nvar f = new foo();\nconsole.log(window.bar);  //'foobar'\n</code></pre>\n\n<p>Exactly the local scope can help you to achieve privacy and encapsulation which are one of the greatest benefits of OOP.</p>\n\n<p>Real world example:</p>\n\n<pre><code>function ShoppingCart() {\n    var items = [];\n\n    this.getPrice = function () {\n       var total = 0;\n       for (var i = 0; i &lt; items.length; i += 1) {\n          total += items[i].price;\n       }\n       return total;\n    }\n\n    this.addItem = function (item) {\n        items.push(item);\n    }\n\n    this.checkOut = function () {\n        var serializedItems = JSON.strigify(items);\n        //send request to the server...\n    }\n}\n\nvar cart = new ShoppingCart();\ncart.addItem({ price: 10, type: 'T-shirt' });\ncart.addItem({ price: 20, type: 'Pants' });\nconsole.log(cart.getPrice()); //30\n</code></pre>\n\n<hr>\n\n<p>One more example of the benefits of the JavaScript scope is the <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\" rel=\"nofollow\">Module Pattern</a>.\nIn Module Pattern you can simulate privacy using the local functional scope of JavaScript. With this approach you can have both private properties and methods. Here is an example:</p>\n\n<pre><code>var module = (function {\n\n    var privateProperty = 42;\n\n    function privateMethod() {\n        console.log('I\\'m private');\n    }\n    return {\n\n       publicMethod: function () {\n           console.log('I\\'m public!');\n           console.log('I\\'ll call a private method!');\n           privateMethod();\n       },\n\n       publicProperty: 1.68,\n\n       getPrivateProperty: function () {\n           return privateProperty;\n       },\n\n       usePublicProperty: function () {\n           console.log('I\\'ll get a public property...' + this.publicProperty);\n       }\n\n    }\n}());\n\nmodule.privateMethod(); //TypeError\nmodule.publicProperty(); //1.68\nmodule.usePublicProperty(); //I'll get a public property...1.68\nmodule.getPrivateProperty(); //42\nmodule.publicMethod(); \n/*\n * I'm public!\n * I'll call a private method!\n * I'm private\n */\n</code></pre>\n\n<p>There's a little strange syntax with the parentless wrapping the anonymous functions but forget it for the moment (it's just executing the function after it's being initialized). The functionality can be saw from the example of usage but the benefits are connected mainly of providing a simple public interface which does not engages you with all implementation details. For more detailed explanation of the pattern you can see the link I've put above.</p>\n\n<hr>\n\n<p>I hope that with <code>this</code> :-) information I helped you to understand few basic topics of JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>function Foo() {\n  this.bar = 0;\n  this.getBar = function () { return this.bar };\n}\n</code></pre>\n\n<p>When you call the function above with the <code>new</code> keyword - like this...</p>\n\n<pre><code>var foo = new Foo();\n</code></pre>\n\n<p>... - a few things happen: </p>\n\n<p>1) an object is created<br>\n2) the function is executed with the <code>this</code> keyword referencing that object.<br>\n3) that object is returned.  </p>\n\n<p><code>foo</code>, then, becomes this object:</p>\n\n<pre><code>{\n    bar: 0,\n    getBar: function () { return this.bar; }\n};\n</code></pre>\n\n<p>Why not, then, just do this:</p>\n\n<pre><code>var foo = {\n    bar: 0,\n    getBar: function () { return this.bar; }\n};\n</code></pre>\n\n<p>You would, if it's just that one simple object. </p>\n\n<p>But creating an object with a constructor (that's how it's called) gives us a big advantage in creating multiple of the \"same\" objects. </p>\n\n<p>See, in javascript, all functions are created with a prototype property [an object], and all objects created with that function (by calling it with the new keyword) are linked to that prototype object. This is why it's so cool - you can store all common methods (and properties, if you wanted to) in the prototype object, and save a lot of memory. This is how it works:</p>\n\n<pre><code>function Foo( bar, bob ) {\n   this.bar = bar;\n   this.bob = bob;\n}\n\nFoo.prototype.calculate = function () {\n  // 'this' points not to the 'prototype' object \n  // as you could've expect, but to the objects\n  // created by calling Foo with the new keyword.\n  // This is what makes it work.\n  return this.bar - this.bob;  \n};\n\nvar foo1 = new Foo(9, 5);\nvar foo2 = new Foo(13, 3);\nvar result1 = foo1.calculate();\nvar result2 = foo2.calculate();\n\nconsole.log(result1); //logs 4\nconsole.log(result2); //logs 10\n</code></pre>\n\n<p>That's it!</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>In C++, the language I'm most comfortable with, usually one declares an object like this:</p>\n\n<pre><code>class foo\n{\npublic:\n    int bar;\n    int getBar() { return bar; }\n}\n</code></pre>\n\n<p>Calling <code>getBar()</code> works fine (ignoring the fact that <code>bar</code> might be uninitialized). The variable <code>bar</code> within <code>getBar()</code> is in the scope of class <code>foo</code>, so I don't need to say <code>this-&gt;bar</code> unless I really need to make it clear that I'm referring to the class' <code>bar</code> instead of, say, a parameter.</p>\n\n<p>Now, I'm trying to get started with OOP in Javascript. So, I look up how to define classes and try the same sort of thing:</p>\n\n<pre><code>function foo()\n{\n     this.bar = 0;\n     this.getBar = function() { return bar; }\n}\n</code></pre>\n\n<p>And it gives me <code>bar is undefined</code>. Changing the <code>bar</code> to <code>this.bar</code> fixes the issue, but doing that for every variable clutters up my code quite a bit. Is this necessary for every variable? Since I can't find any questions relating to this, it makes me feel like I'm doing something fundamentally wrong.</p>\n\n<hr>\n\n<p>EDIT: Right, so, from the comments what I'm getting is that <code>this.bar</code>, a property of an object, references something different than <code>bar</code>, a local variable. Can someone say why exactly this is, in terms of scoping and objects, and if there's another way to define an object where this isn't necessary?</p>\n",
            "last_activity_date": 1376662374,
            "question_id": 13418669,
            "score": 10,
            "tags": [
                "javascript",
                "scope",
                "this"
            ],
            "title": "Javascript: Do I need to put this.var for every variable in an object?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>so it's probably not for creating\n  instances of object</p>\n</blockquote>\n\n<p>It's used exactly for that. You define a function constructor like so:</p>\n\n<pre><code>function person(name) {\nthis.name = name;\n}\n\nvar john = new person('John');\n</code></pre>\n\n<p>However the extra benefit that ECMAScript has is you can extend with the <code>.prototype</code> property, so we can do something like...</p>\n\n<pre><code>person.prototype.getName = function() { return this.name; }\n</code></pre>\n\n<p>All objects created from this constructor will now have a <code>getName</code> because of the prototype chain that they have access to.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>JavaScript <em>is</em> an object-oriented programming language and it's used exactly for creating instances. It's prototype-based, rather than class-based, but that does not mean that it is not object-oriented.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Javascript is a dynamic programming language which supports the object oriented programming paradigm, and it use used for creating new instances of object.</p>\n\n<p>Classes are not necessary for objects - Javascript is a <a href=\"http://en.wikipedia.org/wiki/Prototype-based_programming\" rel=\"nofollow\">prototype based</a> language.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The <code>new</code> keyword creates instances of objects using functions as a constructor. For instance:</p>\n\n<pre><code>var Foo = function() {};\nFoo.prototype.bar = 'bar';\n\nvar foo = new Foo();\nfoo instanceof Foo; // true\n</code></pre>\n\n<p>Instances inherit from the <code>prototype</code> of the constructor function. So given the example above...</p>\n\n<pre><code>foo.bar; // 'bar'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The <code>new</code> keyword is for creating new object instances. And yes, javascript is a dynamic programming language, which supports the object oriented programming paradigm. The convention about the object naming is, always use capital letter for objects that are supposed to be instantiated by the new keyword.</p>\n\n<pre><code>obj = new Element();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Suppose you have this function:</p>\n\n<pre><code>var Foo = function(){\n  this.A = 1;\n  this.B = 2;\n};\n</code></pre>\n\n<p>If you call this as a standalone function like so:</p>\n\n<pre><code>Foo();\n</code></pre>\n\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In Javascript at least. </p>\n\n<p>Now, call it like this with <code>new</code>:</p>\n\n<pre><code>var bar = new Foo();\n</code></pre>\n\n<p>What happens when you add <code>new</code> to a function call is that a new object is created (just <code>var bar = new Object()</code>) and that the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor, it just doesn't always make sense. </p>\n",
                    "is_accepted": false,
                    "score": 204
                },
                {
                    "body": "<p>It is 4 things:</p>\n\n<ol>\n<li>It creates a new object.  The type of this object, is simply <em>object</em>.</li>\n<li>It sets this new object's internal, inaccessible, <em>[[prototype]]</em> property to be the constructor function's external, accessible, <em>prototype</em> object (every function object automatically has a <em>prototype</em> property).</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-primitive value. In this case, that non-primitive value will be returned.</li>\n</ol>\n\n<p>Note: <em>constructor function</em> refers the function after the <code>new</code> keyword, as in </p>\n\n<pre><code>new constructorFunction(arg1, arg2)\n</code></pre>\n\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object's <em>[[prototype]]</em> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript. </p>\n\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <em>[[prototype]]</em>. It can <em>only</em> be set at object creation time, either with <em>new</em>, with <em>Object.create</em>, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with <em>Object.getPrototypeOf(someObject)</em>. There is <em>no</em> other way to set or read this value.</p>\n\n<p>Functions, in addition to the hidden <em>[[prototype]]</em> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n\n<hr>\n\n<p>Here is an example:</p>\n\n<pre><code>ObjMaker = function() {this.a = 'first';};\n// ObjMaker is just a function, there's nothing special about it that makes \n// it a constructor.\n\nObjMaker.prototype.b = 'second';\n// like all functions, ObjMaker has an accessible prototype property that \n// we can alter. I just added a property called 'b' to it. Like \n// all objects, ObjMaker also has an inaccessible [[prototype]] property\n// that we can't do anything with\n\nobj1 = new ObjMaker();\n// 3 things just happened.\n// A new, empty object was created called obj1.  At first obj1 was the same\n// as {}. The [[prototype]] property of obj1 was then set to the current\n// object value of the ObjMaker.prototype (if ObjMaker.prototype is later\n// assigned a new object value, obj1's [[prototype]] will not change, but you\n// can alter the properties of ObjMaker.prototype to add to both the\n// prototype and [[prototype]]). The ObjMaker function was executed, with\n// obj1 in place of this... so obj1.a was set to 'first'.\n\nobj1.a;\n// returns 'first'\nobj1.b;\n// obj1 doesn't have a property called 'b', so JavaScript checks \n// its [[prototype]]. Its [[prototype]] is the same as ObjMaker.prototype\n// ObjMaker.prototype has a property called 'b' with value 'second'\n// returns 'second'\n</code></pre>\n\n<p>It's like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the 'b' property.</p>\n\n<p>If you want something like a subclass, then you do this:</p>\n\n<pre><code>SubObjMaker = function () {};\nSubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!\n// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype\n// is now set to the object value of ObjMaker.prototype.\n// The modern way to do this is with Object.create(), which was added in ECMAScript 5:\n// SubObjMaker.prototype = Object.create(ObjMaker.prototype);\n\nSubObjMaker.prototype.c = 'third';  \nobj2 = new SubObjMaker();\n// [[prototype]] property of obj2 is now set to SubObjMaker.prototype\n// Remember that the [[prototype]] property of SubObjMaker.prototype\n// is ObjMaker.prototype. So now obj2 has a prototype chain!\n// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype\n\nobj2.c;\n// returns 'third', from SubObjMaker.prototype\n\nobj2.b;\n// returns 'second', from ObjMaker.prototype\n\nobj2.a;\n// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype \n// was created with the ObjMaker function, which assigned a for us\n</code></pre>\n\n<hr>\n\n<p>I read a ton of rubbish on this subject before finally finding <a href=\"http://joost.zeekat.nl/constructors-considered-mildly-confusing.html\">this page</a>, where this is explained very well with nice diagrams.</p>\n",
                    "is_accepted": true,
                    "score": 1399
                },
                {
                    "body": "<p>In addition to Daniel Howard's answer, here is what <code>new</code> does (or at least seems to do):</p>\n\n<pre><code>function New(func) {\n    var res = {};\n    if (func.prototype !== null) {\n        res.__proto__ = func.prototype;\n    }\n    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));\n    if ((typeof ret === \"object\" || typeof ret === \"function\") &amp;&amp; ret !== null) {\n        return ret;\n    }\n    return res;\n}\n</code></pre>\n\n<p>While</p>\n\n<pre><code>var obj = New(A, 1, 2);\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>var obj = new A(1, 2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<pre><code>Creating a function\n    function MyConstructor() {}\n        - MyConstructor = function(){}\n        - MyConstructor.__proto__ = Function.prototype\n        - MyConstructor.prototype = {}\n            * This object will \"not\" have all properties defined in the constructor. Constructor is a function, thats it. The constructor function will not be run till a \"new\" operator is encountered.\n            * This is the object that will be assigned to &lt;all objects of this class&gt;.__proto__. So adding anything to it will also add the same functionality to all objects.\n        - MyConstructor.prototype.__proto__ = Object.prototype (internally {}.__proto__ = Object.prototype)\n        - MyConstructor.prototype.constructor = MyConstructor\n            * whenever the prototype property is created, automatically constructor property is created which points back to the function.\n\nCreating an object\n    var myobject = new MyConstructor();\n        - myobject = {} // object is type of MyConstructor\n        - myobject.__proto__ = MyConstructor.prototype (this property can only be set at the time on object creation)\n        * Executes the constructor function, using the newly created object (myobject) whenever \"this\" is mentioned.\n        - myObject.constructor = MyConstructor;\n\nUsing instanceOf\n    myobject instanceof MyConstructor  // true\n        - checks the prototype property of the MyConstructor and checks it agains the {Prototype} chain of the myobject. Since myobject.__proto__ = MyConstructor.prototype, hence it will return true.\n\nRemember:\n    - Object.prototype.constructor = Object (class/function/object)\n    - Function.prototype.__proto__ = Object.prototype\n    - Constructors have their own {Prototype} chain completely separate from the prototype chain of objects they initialize.\n    - Any user-defined function in javascript automatically gets a prototype property which in turn has a constructor property that refers back to the function.\n    - Any user-defined function in javascript can be called as a constructor by prepending new to the call. This will pass a new \"this\" object to the function and its {Prototype} property will be set to the prototype property of the function.\n\nExample:\n    function MyConstructor() {}\n    var myobject = new MyConstructor();\n    MyConstructor.prototype = {}; // this line breaks the prototype chain.\n\n    console.log(myobject instanceof MyConstructor); // prints \"false\". Why? See below.\n        - instanceof always Checks the prototype chain of myobject.\n        - myobject.__proto__ points to old MyConstructor.prototype object.\n        - Old MyConstructor.prototype has __proto__ pointing to Object.prototype.\n        - So anywhere in the prototype chain of myobject, MyConstructor has not come. Hence false.\n    console.log(myobject.constructor == MyConstructor) // prints \"true\"\n        - myobject.__proto__ points to old MyConstructor.prototype object.\n        - Old MyConstructor.prototype.constructor points to MyConstructor.\n        - hence myobject.constructor will be pointing to MyConstructor.\n    console.log(myobject instanceof Object); //prints \"true\"\n        - myobject.__proto__ points to old MyConstructor.prototype object.\n        - old MyConstructor.prototype.__proto__ = Object.prototype\n        - hence myObject prototype chain has Object in its list\n\nTo implement inheritance\n    To implement classical inheritance, you have to leverage the prototype chains. Since properties and methods are searched on an object's __proto__, if you want it to inherit from another object you have to modify the prototype of its class (you can't modify __proto__).\n    1   function Animal(){\n    2       this.alive = true;\n    3   }\n    4   function Dog(){\n    5       this.legs = 4;\n    6       this.hasTail = true;\n    7   }\n    8   Dog.prototype = new Animal();\n    9   var tommy = new Dog();\n\n    Line 1-3\n        - Animal = function()\n        - Animal.__proto__ = Function.prototype\n        - Animal.prototype = {} // type of Object\n        - Animal.prototype.__proto__ = Object.prototype\n        - Animal.prototype.constructor = Animal\n    Line 4-7\n        - Dog = function()\n        - Dog.__proto__ = Function.prototype\n        - Dog.prototype = {} // type of Object\n        - Dog.prototype.__proto__ = Object.prototype\n        - Dog.prototype.constructor = Dog\n    Line 8\n        - Dog.prototype = {} // object of type Animal\n        - Dog.prototype.__proto__ = Animal.prototype\n            * Now if you add any property to Animal.prototype, then Animal and Dog objects will also get access to that property.\n            * very important line. This only does inheritance. But since we can't directly assign __proto__, we have to use \"new\" operator.\n                - what if browser allows us to directly execute the above line instead of Line 8?\n\n                    * this will also create the inheritance properly but the below step where constructor function of Animal() is run with Dog.prototype replacing keyword \"this\" in all places will not run (which happens automatically when new keyword is used). Hence Dog.prototype will not get properties already defined in Animal constructor function.\n\n                    * Although any new property that we are going to add to Animal.prototype will be visible to all instances of Animal and Dogs. So to get values already defined inside Animal class, we need to use new keyword so that the constructor function is run and copies the values (like isalive which is statically defined inside the constructor function Animal() to child class's Dog.prototype).\n\n                    * Note that the statically defined properties of base class (E.g. isalive) are \"copied\" to child class (Dog.prototype) and not referred to. So all child classes have a seperate instance of those statically defined properties (like isalive) inside each child class prototype property. Only the new properties that you are going to define in Animal.prototype will be shared among the child Objects since all child class prototype property refer to the same object Animal.prototype. But the base class's statically defined properties will be copied to the child class \"prototype\" property.\n\n                    * Also note that running such a line and directly manipulating the __proto__ property is not recommended/allowed in most browsers.\n\n                    # So we can conclude that Animal.prototype can be used to enhance behaviour of Animal class so that all objects will get value of it.\n                    # Using the new Keyword is the recommended way of creating inheritance and creating objects in Javascript.\n            * Since \"new\" operator is encountered, we have to run the constructor function Animal() with Dog.prototype replacing keyword \"this\" in all places. So all properties of Animal are copied onto Dog.prototype.\n        - Dog.prototype.alive = true;\n            * notice Animal.prototype doesn't have any properties like alive, etc.\n                E.g. Animal.prototype.alive === undefined   // true\n            * Also note that the alive property is copied to the Dog.prototype and not referred (and hence not shared) to as would be a property which will be added to Animal.prototype in future (which will be shared).\n        - Dog.prototype will also have a property \"constructor\" since __proto__ refers to Animal.prototype and Animal.prototype.constructor = Animal\n            * notice after execution of line 4-7, Dog.prototype.constructor = Dog, but after line 8, because of using new keyword, Dog.prototype.constructor = Animal.\n            * So to avoid this kind of consufion, we should write one more line after line 7, Dog.prototype.constructor = Dog;, to correct the behaviour, else the objects of Dog like tommy will still be of type Animal (based on tommy.constructor).\n            * Another trick we can use is to put the following line instead of line 8, Dog.prototype.__proto__ = Animal.prototype. This approach has been covered above. But the assumption is that Animal shouldn't have any statically defined properties, else they won't be copied (since we didn't use the \"new\" keyword).\n    Line 9\n        - tommy = {} // type of Dog\n        - tommy.__proto__ = Dog.prototype (which is an object of type Animal {\"alive\":true})\n            * remember statically defined property \"alive\" was copied to Dog.prototype\n\n        * since Dog.prototype has \"alive\" and tommy.__proto__ refers to Dog.prototype, tommy will also have \"alive\"\n        - tommy.alive = true\n\n        * Executes the constructor function, using the newly created object (tommy) whenever \"this\" is mentioned.\n        - tommy.legs = 4;\n        - tommy.hasTail = true;\n        - tommy.constructor = Animal\n            * since tommy.__proto__ refers to Dog.prototype whose property __proto__ refers to Animal.prototype which has constructor property.\n\nNow if you execute following line\n    Animal.prototype.hasHair = true;\nthen tommy.__proto__ refers to Dog.prototype. Since \"hasHair\" not found in Dog.prototype so we will find it in Dog.prototype.__proto__ which referrs to Animal.prototype which has it.\nSo, tommy.hasHair will be true.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Functions are divided into two types: constructors and the other type. Constructors create and return a new object. The other kind returns some value. Calling a function with <code>new</code> makes the function act as a constructor, and leaving out <code>new</code> makes the function act as the other kind. </p>\n\n<p>Bonus fact: When a constructor is called, you can refer to the object it is going to return with the keyword <code>this</code>. </p>\n\n<p>For example:</p>\n\n<pre><code>function foo(){\n    this.stackoverflow=\"bar\";\n    this.someProperty=\"baz\";\n    return 4;\n}\n\nfoo(); //returns 4\nnew foo(); //returns {stackoverflow:\"bar\",someProperty:\"baz\"}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>Trying to understand the use of the keyword 'new' I found this blog post to very useful\n<a href=\"http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/\" rel=\"nofollow\">http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>\n\n<ul>\n<li>What is it?</li>\n<li>What problems does it solve?</li>\n<li>When is it appropriate and when not?</li>\n</ul>\n",
            "last_activity_date": 1420858273,
            "question_id": 1646698,
            "score": 889,
            "tags": [
                "javascript"
            ],
            "title": "What is the &#39;new&#39; keyword in JavaScript?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>There are <a href=\"http://blog.stevenlevithan.com/archives/faster-trim-javascript\">a lot of implementations</a> that can be used. The most obvious seems to be something like this:</p>\n\n<pre><code>String.prototype.trim = function() {\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n\" foo bar \".trim();  // \"foo bar\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 111
                },
                {
                    "body": "<p>Simple version here <a href=\"http://www.whadiz.com/what-is.aspx/programming/javascript/javascript-trim\">What is a general function for JavaScript trim?</a></p>\n\n<pre><code>function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g,\"\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>The trim from <a href=\"http://api.jquery.com/jQuery.trim/\">jQuery</a> is convenient if you are already using that framework. </p>\n\n<pre><code>$.trim('  your string   ');\n</code></pre>\n\n<p>I tend to use jQuery often, so trimming strings with it is natural for me.  But it's possible that there is backlash against jQuery out there? :) </p>\n",
                    "is_accepted": false,
                    "score": 393
                },
                {
                    "body": "<p>See this:</p>\n\n<pre><code>String.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, '');};\n\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,'');};\n\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,'');};\n\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');};\n</code></pre>\n\n<p>Since new Browsers (IE9+) have <code>trim()</code> already implemented, you should only implement <code>trim()</code> if it is not already available on the Prototype-Object (overriding it is a huge performance hit). This is generally recommended when extending Native Objects! Note that the added property is enumerable unless you use ES5 <code>Object.defineProperty</code>!</p>\n\n<pre><code>if (!String.prototype.trim) {\n   //code for trim\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 667
                },
                {
                    "body": "<p><em>Flagrant Badassery</em> has 11 different trims with benchmark information:</p>\n\n<p><a href=\"http://blog.stevenlevithan.com/archives/faster-trim-javascript\">http://blog.stevenlevithan.com/archives/faster-trim-javascript</a></p>\n\n<p>Non-surprisingly regexp-based are slower than traditional loop.</p>\n\n<hr>\n\n<p>Here is my personal one. This code is old! I wrote it for JavaScript1.1 and Netscape 3 and it has been only slightly updated since. (Original used String.charAt)</p>\n\n<pre><code>/**\n *  Trim string. Actually trims all control characters.\n *  Ignores fancy Unicode spaces. Forces to string.\n */\nfunction trim(str) {\n    str = str.toString();\n    var begin = 0;\n    var end = str.length - 1;\n    while (begin &lt;= end &amp;&amp; str.charCodeAt(begin) &lt; 33) { ++begin; }\n    while (end &gt; begin &amp;&amp; str.charCodeAt(end) &lt; 33) { --end; }\n    return str.substr(begin, end - begin + 1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>If you are using JQuery use <code>jQuery.trim()</code> function. For example,\n<code>if( jQuery.trim(StringVariable) == '')</code> </p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Although there are a bunch of correct answers above, it should be noted that the <code>String</code> object in JavaScript has a native <code>.trim()</code> method as of <em>ECMAScript 5</em>.  Thus ideally any attempt to prototype the trim method should really check to see if it already exists first.</p>\n\n<pre><code>if(!String.prototype.trim){  \n  String.prototype.trim = function(){  \n    return this.replace(/^\\s+|\\s+$/g,'');  \n  };  \n}\n</code></pre>\n\n<p><strong>Added natively in:</strong>\nJavaScript 1.8.1 / ECMAScript 5</p>\n\n<p>Thus supported in:</p>\n\n<p>Firefox: <strong>3.5+</strong></p>\n\n<p>Safari: <strong>5+</strong></p>\n\n<p>Internet Explorer: <strong>IE9+</strong> (in Standards mode only!) <a href=\"http://blogs.msdn.com/b/ie/archive/2010/06/25/enhanced-scripting-in-ie9-ecmascript-5-support-and-more.aspx\">http://blogs.msdn.com/b/ie/archive/2010/06/25/enhanced-scripting-in-ie9-ecmascript-5-support-and-more.aspx</a></p>\n\n<p>Chrome: <strong>5+</strong></p>\n\n<p>Opera: <strong>10.5+</strong></p>\n\n<p>ECMAScript 5 Support Table: <a href=\"http://kangax.github.com/es5-compat-table/\">http://kangax.github.com/es5-compat-table/</a></p>\n",
                    "is_accepted": false,
                    "score": 135
                },
                {
                    "body": "<p>I know this question has been asked three years back.Now,<code>String.trim()</code> was added natively in JavaScript.For an instance, you can trim directly as following, </p>\n\n<pre><code>document.getElementById(\"id\").value.trim();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>mine uses a single regex to look for cases where trimming is necessary, and uses that regex's results to determine desired substring bounds:</p>\n\n<pre><code>var illmatch= /^(\\s*)(?:.*?)(\\s*)$/\nfunction strip(me){\n    var match= illmatch.exec(me)\n    if(match &amp;&amp; (match[1].length || match[2].length)){\n        me= me.substring(match[1].length, p.length-match[2].length)\n    }\n    return me\n}\n</code></pre>\n\n<p>the one design decision that went into this was using a substring to perform the final capture. s/\\?:// (make the middle term capturing) and and the replacement fragment becomes:</p>\n\n<pre><code>    if(match &amp;&amp; (match[1].length || match[3].length)){\n        me= match[2]\n    }\n</code></pre>\n\n<p>there's two performance bets I made in these impls:</p>\n\n<ol>\n<li><p>does the substring implementation copy the original string's data? if so, in the first, when a string needs to be trimmed there is a double traversal, first in the regex (which may, hopefully be partial), and second in the substring extraction. hopefully a substring implementation only references the original string, so operations like substring can be nearly free. <em>cross fingers</em></p></li>\n<li><p>how good is the capture in the regex impl? the middle term, the output value, could potentially be very long. i wasn't ready to bank that all regex impls' capturing wouldn't balk at a couple hundred KB input capture, but i also did not test (too many runtimes, sorry!). the second ALWAYS runs a capture; if your engine can do this without taking a hit, perhaps using some of the above string-roping-techniques, for sure USE IT!</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>This only removes spaces; there are no regular expressions: </p>\n\n<pre><code>function trim(str){\n    return str.split(' ').join();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>Don't know what bugs can hide here, but I use this:</p>\n\n<pre><code>var some_string_with_extra_spaces=\"   goes here    \"\nconsole.log(some_string_with_extra_spaces.match(/\\S.*\\S|\\S/)[0])\n</code></pre>\n\n<p>Or this, if text contain enters:</p>\n\n<pre><code>console.log(some_string_with_extra_spaces.match(/\\S[\\s\\S]*\\S|\\S/)[0])\n</code></pre>\n\n<p>Another try:</p>\n\n<pre><code>console.log(some_string_with_extra_spaces.match(/^\\s*(.*?)\\s*$/)[1])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have a lib that uses trim. so solved it by using the following code.</p>\n\n<pre><code>String.prototype.trim = String.prototype.trim || function(){ return jQuery.trim(this); };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use the Native JavaScript Methods: <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/TrimLeft\"><code>String.trimLeft()</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/trimRight\"><code>String.trimRight()</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/trim\"><code>String.trim()</code></a>.</p>\n\n<p><br>\n<code>String.trim()</code> is supported in <a href=\"http://kangax.github.com/es5-compat-table/\">IE9+ and all other major browsers</a>:</p>\n\n<pre><code>'  Hello  '.trim()  //-&gt; 'Hello'\n</code></pre>\n\n<p><br>\n<code>String.trimLeft()</code> and <code>String.trimRight()</code> are non-standard, but are supported in <a href=\"http://kangax.github.com/es5-compat-table/non-standard/\">all major browsers <em>except IE</em></a></p>\n\n<pre><code>'  Hello  '.trimLeft()   //-&gt; 'Hello  '\n'  Hello  '.trimRight()  //-&gt; '  Hello'\n</code></pre>\n\n<p><br>\nIE support is easy with a polyfill however:</p>\n\n<pre><code>if (!''.trimLeft) {\n    String.prototype.trimLeft = function() {\n        return this.replace(/^\\s+/,'');\n    };\n    String.prototype.trimRight = function() {\n        return this.replace(/\\s+$/,'');\n    };\n    if (!''.trim) {\n        String.prototype.trim = function() {\n            return this.replace(/^\\s+|\\s+$/g, '');\n        };\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>String.prototype.trim = String.prototype.trim || function () {\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n};\n\nString.prototype.trimLeft = String.prototype.trimLeft || function () {\n    return this.replace(/^\\s+/, \"\");\n};\n\nString.prototype.trimRight = String.prototype.trimRight || function () {\n    return this.replace(/\\s+$/, \"\");\n};\n\nString.prototype.trimFull = String.prototype.trimFull || function () {\n    return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g, \"\").replace(/\\s+/g, \" \");\n};\n</code></pre>\n\n<p>Shamelessly stolen from <a href=\"https://github.com/duereg/SwimTraining/blob/master/lib/app/swim/string.js\" rel=\"nofollow\">Matt duereg</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>For IE9+ and other browsers</p>\n\n<pre><code>function trim(text) {\n    return (text == null) ? '' : ''.trim.call(text);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>Here it is in TypeScript:</p>\n\n<pre><code>var trim: (input: string) =&gt; string = String.prototype.trim\n    ? ((input: string) : string =&gt; {\n        return (input || \"\").trim();\n    })\n    : ((input: string) : string =&gt; {\n        return (input || \"\").replace(/^\\s+|\\s+$/g,\"\");\n    })\n</code></pre>\n\n<p>It will fall back to the regex if the native prototype is not available.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had written this function for trim, when the .trim() function was not available in JS way back in 2008. Some of the older browsers still do not support the .trim() function and i hope this function may help somebody.</p>\n\n<p><em><strong>TRIM FUNCTION</em></strong></p>\n\n<pre><code>function trim(str)\n{\n    var startpatt = /^\\s/;\n    var endpatt = /\\s$/;\n\n    while(str.search(startpatt) == 0)\n        str = str.substring(1, str.length);\n\n    while(str.search(endpatt) == str.length-1)\n        str = str.substring(0, str.length-1);   \n\n    return str;\n}\n</code></pre>\n\n<p><strong>Explanation</strong>: The function trim() accept a string object and remove any starting and trailing whitespaces (spaces,tabs and newlines) and return the trimmed string. You can use this function to trim form inputs to ensure valid data to be sent.</p>\n\n<p>The function can be called in the following manner as an example.</p>\n\n<pre><code>form.elements[i].value = trim(form.elements[i].value);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Trim code from <a href=\"https://github.com/angular/angular.js/blob/master/src/Angular.js#L455\" rel=\"nofollow\">angular js </a> project</p>\n\n<pre><code>var trim = (function() {\n\n  // if a reference is a `String`.\n  function isString(value){\n       return typeof value == 'string';\n  } \n\n  // native trim is way faster: http://jsperf.com/angular-trim-test\n  // but IE doesn't have it... :-(\n  // TODO: we should move this into IE/ES5 polyfill\n\n  if (!String.prototype.trim) {\n    return function(value) {\n      return isString(value) ? \n         value.replace(/^\\s*/, '').replace(/\\s*$/, '') : value;\n    };\n  }\n\n  return function(value) {\n    return isString(value) ? value.trim() : value;\n  };\n\n})();\n</code></pre>\n\n<p>and call it as <code>trim(\" hello \")</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can just declare your variable as string and use its trim function: </p>\n\n<pre><code>var str = new String('my string'); \nstr= str.trim();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Now days you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\" rel=\"nofollow\">string.trim()</a> that is native Javascript implementation</p>\n\n<pre><code>var orig = \"   foo  \";\nconsole.log(orig.trim());//foo\n</code></pre>\n\n<p>See also </p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FString%2FTrimLeft\" rel=\"nofollow\">trimLeft()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FString%2FTrimRight\" rel=\"nofollow\">trimRight()</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>use simply code</p>\n\n<pre><code>var str = \"       Hello World!        \";\nalert(str.trim());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I trim a string in JavaScript?</p>\n",
            "last_activity_date": 1425504625,
            "question_id": 498970,
            "score": 849,
            "tags": [
                "javascript",
                "string",
                "trim"
            ],
            "title": "Trim string in JavaScript?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>You can't. And even if you could, it would be the address of the machine, which is useless if they're communicating via a proxy or NAT. Find a way to get it server-side.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>Not possible in general unless you use some kind of external service.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There isn't really a reliable way to get the client computer's IP address.</p>\n\n<p>This goes through some of the possibilities. The code that uses Java will break if the user has multiple interfaces.</p>\n\n<p><a href=\"http://nanoagent.blogspot.com/2006/09/how-to-find-evaluate-remoteaddrclients.html\" rel=\"nofollow\">http://nanoagent.blogspot.com/2006/09/how-to-find-evaluate-remoteaddrclients.html</a></p>\n\n<p>From looking at the other answers here it sounds like you may want to get the client's public IP address, which is probably the address of the router they're using to connect to the internet. A lot of the other answers here talk about that. I would recommend creating and hosting your own server side page for receiving the request and responding with the IP address instead of depending on someone else's service that may or may not continue to work.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I'm no javascript guru, but if its possible you could open an iframe with <a href=\"http://www.whatismyip.com/automation/n09230945.asp\" rel=\"nofollow\">http://www.whatismyip.com/automation/n09230945.asp</a> as the source and read the content of the frame.</p>\n\n<p>Edit: this wont work because of the cross domain security.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Well, I am digressing from the question, but I had a similar need today and though I couldn't find the ID from the client using Javascript, I did the following.</p>\n\n<p>On the server side: -</p>\n\n<pre><code>&lt;div style=\"display:none;visibility:hidden\" id=\"uip\"&gt;&lt;%= Request.UserHostAddress %&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Using Javascript</p>\n\n<pre><code>var ip = $get(\"uip\").innerHTML;\n</code></pre>\n\n<p>I am using ASP.Net Ajax, but you can use getElementById instead of $get().</p>\n\n<p>What's happening is, I've got a hidden div element on the page with the user's IP rendered from the server. Than in Javascript I just load that value.</p>\n\n<p>This might be helpful to some people with a similar requirement like yours (like me while I hadn't figure this out).</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can, relaying it via server side with JSONP</p>\n\n<p>And while googling to find one, found it here on SO <a href=\"http://stackoverflow.com/questions/102605/can-i-lookup-the-ip-address-of-a-hostname-from-javascript\">http://stackoverflow.com/questions/102605/can-i-lookup-the-ip-address-of-a-hostname-from-javascript</a></p>\n\n<pre><code>&lt;script type=\"application/javascript\"&gt;\n    function getip(json){\n      alert(json.ip); // alerts the ip address\n    }\n&lt;/script&gt;\n\n&lt;script type=\"application/javascript\" src=\"http://jsonip.appspot.com/?callback=getip\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 146
                },
                {
                    "body": "<p>You can do an ajax call to hostip.info or a similar service...</p>\n\n<pre><code>function myIP() {\n    if (window.XMLHttpRequest) xmlhttp = new XMLHttpRequest();\n    else xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\n    xmlhttp.open(\"GET\",\"http://api.hostip.info/get_html.php\",false);\n    xmlhttp.send();\n\n    hostipInfo = xmlhttp.responseText.split(\"\\n\");\n\n    for (i=0; hostipInfo.length &gt;= i; i++) {\n        ipAddress = hostipInfo[i].split(\":\");\n        if ( ipAddress[0] == \"IP\" ) return ipAddress[1];\n    }\n\n    return false;\n}\n</code></pre>\n\n<p>As a bonus, geolocalisation information is returned in the same call.</p>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>With using Smart-IP.net <a href=\"http://smart-ip.net/geoip-api\">Geo-IP API</a>. For example, by using jQuery:</p>\n\n<pre><code>$(document).ready( function() {\n    $.getJSON( \"http://smart-ip.net/geoip-json?callback=?\",\n        function(data){\n            alert( data.host);\n        }\n    );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>include this code in your page : <code>&lt;script type=\"text/javascript\" src=\"http://l2.io/ip.js\"&gt;&lt;/script&gt;</code></p>\n\n<p>more doc here : <a href=\"http://l2.io\">http://l2.io</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I'm going to offer a method that I use a lot when I want to store information in the html page, and want my javascript to read information without actually having to pass parameters to the javascript. This is especially useful when your script is referenced externally, rather than inline.</p>\n\n<p>It doesn't meet the criterion of \"no server side script\", however. But if you can include server side scripting in your html, do this:</p>\n\n<p>Make hidden label elements at the bottom of your html page, just above the end body tag.</p>\n\n<p>Your label will look like this: </p>\n\n<pre><code>&lt;label id=\"ip\" class=\"hiddenlabel\"&gt;&lt;?php echo $_SERVER['REMOTE_ADDR']; ?&gt;&lt;/label&gt;\n</code></pre>\n\n<p>Be sure to make a class called <code>hiddenlabel</code> and set the <code>visibility:hidden</code> so no one actually sees the label. You can store lots of things this way, in hidden labels.</p>\n\n<p>Now, in your javascript, to retrieve the information stored in the label (in this case the client's ip address), you can do this:</p>\n\n<pre><code>var ip = document.getElementById(\"ip\").innerHTML;\n</code></pre>\n\n<p>Now your variable \"ip\" equals the ip address. Now you can pass the ip to your API request.</p>\n\n<p><strong>* EDIT 2 YEARS LATER *</strong>\nTwo minor refinements:</p>\n\n<p>I routinely use this method, but call the label <code>class=\"data\"</code>, because, in fact, it is a way to store data. Class name \"hiddenlabel\" is kind of a stupid name.</p>\n\n<p>The second modification is in the style sheet, instead of <code>visibility:hidden</code>:</p>\n\n<pre><code>.data{\n    display:none;\n}\n</code></pre>\n\n<p>...is the better way of doing it.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I would say Chad and Malta has great answer. However, theirs are complicated. So I suggest this code that I found from ads by country plugin</p>\n\n<pre><code>&lt;script&gt;\n&lt;script language=\"javascript\" src=\"http://j.maxmind.com/app/geoip.js\"&gt;&lt;/script&gt;\n&lt;script language=\"javascript\"&gt;\nmmjsCountryCode = geoip_country_code();\nmmjsCountryName = geoip_country_name();\n\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>No ajax. Just plain javascripts. :D</strong></p>\n\n<p>If you go to <a href=\"http://j.maxmind.com/app/geoip.js\">http://j.maxmind.com/app/geoip.js</a> you will see that it contains</p>\n\n<pre><code>function geoip_country_code() { return 'ID'; }\nfunction geoip_country_name() { return 'Indonesia'; }\nfunction geoip_city()         { return 'Jakarta'; }\nfunction geoip_region()       { return '04'; }\nfunction geoip_region_name()  { return 'Jakarta Raya'; }\nfunction geoip_latitude()     { return '-6.1744'; }\nfunction geoip_longitude()    { return '106.8294'; }\nfunction geoip_postal_code()  { return ''; }\nfunction geoip_area_code()    { return ''; }\nfunction geoip_metro_code()   { return ''; }\n</code></pre>\n\n<p>It doesn't really answer the question yet because</p>\n\n<p><a href=\"http://j.maxmind.com/app/geoip.js\">http://j.maxmind.com/app/geoip.js</a> doesn't contain the IP (although I bet it uses the IP to get the country).</p>\n\n<p>But it's so easy to make a PhP script that pop something like</p>\n\n<pre><code>function visitorsIP()   { return '123.123.123.123'; }\n</code></pre>\n\n<p>Make that. Put on <a href=\"http://yourdomain.com/yourip.php\">http://yourdomain.com/yourip.php</a>.</p>\n\n<p>Then do </p>\n\n<pre><code>&lt;script language=\"javascript\" src=\"http://yourdomain.com/yourip.php\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The question specifically mention NOT to use third party script. There is no other way. Javascript cannot know your IP. But other servers that  can be accessed through javascript can which work just as well with no issue.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>All the above answers have a server part, not pure client part. This should be provided by the web browser. At present, no web browser support this.</p>\n\n<p>However, with this addon for firefox:\n<a href=\"https://addons.mozilla.org/en-US/firefox/addon/ip-address/\" rel=\"nofollow\">https://addons.mozilla.org/en-US/firefox/addon/ip-address/</a>\nYou will have to ask your users to install this addon. (it's good from me, a 3rd party).</p>\n\n<p>you can test whether the user has installed it.</p>\n\n<pre><code>var installed=window.IP!==undefined;\n</code></pre>\n\n<p>you can get it with javascript, if it is installed, then\n    var ip=IP.getClient();\n    var IPclient=ip.IP;\n    //while ip.url is the url</p>\n\n<pre><code>ip=IP.getServer();\nvar IPserver=ip.IP;\nvar portServer=ip.port;\n//while ip.url is the url\n\n//or you can use IP.getBoth();\n</code></pre>\n\n<p>more information here: <a href=\"http://www.jackiszhp.info/tech/addon.IP.html\" rel=\"nofollow\">http://www.jackiszhp.info/tech/addon.IP.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://ip.codehelper.io\">Javascript / jQuery get Client's IP Address &amp; Location</a> (Country, City)</p>\n\n<p>You only need to embed a  tag with \"src\" link to the server. The server will return \"codehelper_ip\" as an Object / JSON, and you can use it right away.</p>\n\n<pre><code>// First, embed this script in your head or at bottom of the page.\n&lt;script language=\"Javascript\" src=\"http://www.codehelper.io/api/ips/?js\"&gt;&lt;/script&gt;\n// You can use it\n&lt;script language=\"Javascript\"&gt;\n    alert(codehelper_ip.IP);\n    alert(codehelper_ip.Country);\n&lt;/script&gt;\n</code></pre>\n\n<p>More information at <a href=\"http://ip.codehelper.io\">Javascript Detect Real IP Address Plus Country</a></p>\n\n<p>If you are using jQUery, you can try:</p>\n\n<pre><code>console.log(codehelper_ip); \n</code></pre>\n\n<p>It will show you more information about returned object.</p>\n\n<p>If you want callback function, please try this:</p>\n\n<pre><code>// First, embed this script in your head or at bottom of the page.\n&lt;script language=\"Javascript\" src=\"http://www.codehelper.io/api/ips/?callback=yourcallback\"&gt;&lt;/script&gt;\n// You can use it\n&lt;script language=\"Javascript\"&gt;\n    function yourcallback(json) {\n       alert(json.IP);\n     }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use the <a href=\"http://ipinfo.io\" rel=\"nofollow\">http://ipinfo.io</a> service for this, which will give you the client IP, hostname, geolocation information and network owner. Here's a simple example that logs the IP:</p>\n\n<pre><code>$.get(\"http://ipinfo.io\", function(response) {\n    console.log(response.ip);\n}, \"jsonp\");\n</code></pre>\n\n<p>Here's a more detailed JSFiddle example that also prints out the full response information, so you can see all of the available details: <a href=\"http://jsfiddle.net/zK5FN/2/\" rel=\"nofollow\">http://jsfiddle.net/zK5FN/2/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"getIp\"&gt;\n&lt;body&gt;\n    &lt;div ng-controller=\"getIpCtrl\"&gt;\n        &lt;div ng-bind=\"ip\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Javascript for load faster\n    ================================================== --&gt;\n    &lt;script src=\"lib/jquery/jquery.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"lib/angular/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n    /// Scripts app\n\n    'use strict';\n\n    /* App Module */\n    var getIp = angular.module('getIp', [ ]);\n\n    getIp.controller('getIpCtrl', ['$scope', '$http',\n      function($scope, $http) {\n        $http.jsonp('http://jsonip.appspot.com/?callback=JSON_CALLBACK')\n            .success(function(data) {\n            $scope.ip = data.ip;\n        });\n      }]);\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Appspot.com callback's service isn't available.  ipinfo.io seems to be working.</p>\n\n<p>I did an extra step and retrieved all geo info using AngularJS. (Thanks to Ricardo)  Check it out.</p>\n\n<pre><code>&lt;div ng-controller=\"geoCtrl\"&gt;\n  &lt;p ng-bind=\"ip\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"hostname\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"loc\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"org\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"city\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"region\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"country\"&gt;&lt;/p&gt;\n  &lt;p ng-bind=\"phone\"&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;script src=\"http://code.jquery.com/jquery-1.10.2.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"http://code.angularjs.org/1.2.12/angular.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"http://code.angularjs.org/1.2.12/angular-route.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n'use strict';\nvar geo = angular.module('geo', [])\n.controller('geoCtrl', ['$scope', '$http', function($scope, $http) {\n  $http.jsonp('http://ipinfo.io/?callback=JSON_CALLBACK')\n    .success(function(data) {\n    $scope.ip = data.ip;\n    $scope.hostname = data.hostname;\n    $scope.loc = data.loc; //Latitude and Longitude\n    $scope.org = data.org; //organization\n    $scope.city = data.city;\n    $scope.region = data.region; //state\n    $scope.country = data.country;\n    $scope.phone = data.phone; //city area code\n  });\n}]);\n&lt;/script&gt;\n</code></pre>\n\n<p>Working page here: <a href=\"http://www.orangecountyseomarketing.com/projects/_ip_angularjs.html\" rel=\"nofollow\">http://www.orangecountyseomarketing.com/projects/_ip_angularjs.html</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var call_to = \"http://smart-ip.net/geoip-json?callback=?\";\n\n$.getJSON(call_to, function(data){\n   alert(data.host);\n});\n</code></pre>\n\n<p><code>data.host</code> is the ip address. Simply call this from your browser. </p>\n\n<p><code>http://smart-ip.net/geoip-json?callback=?</code> [Without quotes] and get the ip.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use web services like: <a href=\"http://ip-api.com/\" rel=\"nofollow\">http://ip-api.com/</a></p>\n\n<p>Example: </p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://ip-api.com/json/?callback=foo\"&gt;\n&lt;script&gt;\n    function foo(json) {\n        alert(json.query)\n    }\n&lt;/script&gt;\n\nadditional example: http://whatmyip.info    \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could do this entirely client side and mostly in JavaScript by using a Flash object that the js can call. Flash <em>can</em> access the IP address of the local machine which might not be very useful.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have my own api back end with laravel, so I usually just the following: </p>\n\n<pre><code>$(document).ready( function() {\n\n    $.getJSON( \"http://api.whoisdoma.com/v1/ip/visitor?api_key=key\",\n        function(data){\n          alert( data.ip);\n        }\n    );\n\n});\n</code></pre>\n\n<p>For extra security, I provide an api key which is required to get results.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use the <a href=\"http://userinfo.io\" rel=\"nofollow\">userinfo.io</a> javascript library.</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"userinfo.0.0.1.min.js\"&gt;&lt;/script&gt;\n\nUserInfo.getInfo(function(data) {\n  alert(data.ip_address);\n}, function(err) {\n  // Do something with the error\n});\n</code></pre>\n\n<p>You can also use requirejs to load the script.</p>\n\n<p>It will give you the IP address of your visitor, as well as a few data on its location (country, city, etc.). It is based on maxmind geoip database.</p>\n\n<p><em>Disclaimer: I wrote this library</em></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Check out <a href=\"http://www.ipify.org/\" rel=\"nofollow\">http://www.ipify.org/</a></p>\n\n<p>According to them:</p>\n\n<blockquote>\n  <ul>\n  <li>You can use it <strong>without limit</strong> (even if you're doing millions of requests per minute).</li>\n  <li>ipify is completely open source (check out the <a href=\"https://github.com/rdegges/ipify-api\" rel=\"nofollow\">GitHub repository</a>).</li>\n  </ul>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Well, if in the HTML you import a script...</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"//stier.linuxfaq.org/ip.php\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You can then use the variable userIP (which would be the visitor's IP address) anywhere on the page.</p>\n\n<p>To redirect: <code>&lt;script&gt;if (userIP == \"555.555.555.55\") {window.location.replace(\"http://192.168.1.3/flex-start/examples/navbar-fixed-top/\");}&lt;/script&gt;</code></p>\n\n<p>Or to show it on the page: <code>document.write (userIP);</code></p>\n\n<p>DISCLAIMER: I am the author of the script I said to import. The script comes up with the IP by using PHP. The source code of the script is below.</p>\n\n<p><code>&lt;?php \n //Gets the IP address\n $ip = getenv(\"REMOTE_ADDR\") ; \n Echo \"var userIP = '\" . $ip . \"';\"; \n ?&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to somehow pull the client's IP address using pure JavaScript; no server side code, not even SSI.</p>\n\n<p>Any ideas?</p>\n\n<p>I'm not against using a free 3rd party script, if someone can suggest one. This is an emergency stop gap until we can deploy new code.</p>\n",
            "last_activity_date": 1424284603,
            "question_id": 391979,
            "score": 188,
            "tags": [
                "javascript",
                "ip-address",
                "clientip"
            ],
            "title": "Get client IP using just JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>When one uses the trick of closing on \"this\" during a constructor invocation, it's in order to write a function that can be used as a callback by some other object that doesn't want to invoke a method on an object. It's not related to \"making the scope correct\".</p>\n\n<p>Here's a vanilla JavaScript object:</p>\n\n<pre><code>function MyThing(aParam) {\n    var myPrivateVariable = \"squizzitch\";\n\n    this.someProperty = aParam;\n    this.useMeAsACallback = function() {\n        console.log(\"Look, I have access to \" + myPrivateVariable + \"!\");\n    }\n}\n\n// Every MyThing will get this method for free:\nMyThing.prototype.someMethod = function() {\n    console.log(this.someProperty);\n};\n</code></pre>\n\n<p>You might get a lot out of reading what <a href=\"http://www.crockford.com/javascript/\" rel=\"nofollow\">Douglas Crockford</a> has to say about JavaScript. <a href=\"http://ejohn.org/\" rel=\"nofollow\">John Resig</a> is also brilliant. Good luck!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can also do it this way, using structures :</p>\n\n<pre><code>function createCounter () {\n    var count = 0;\n\n    return {\n        increaseBy: function(nb) {\n            count += nb;\n        },\n        reset: function {\n            count = 0;\n        }\n    }\n}\n</code></pre>\n\n<p>Then :</p>\n\n<pre><code>var counter1 = createCounter();\ncounter1.increaseBy(4);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><em>Douglas Crockford</em> discusses that topic extensively in <em>The Good Parts</em>. He recommends to avoid the <strong>new</strong> operator to create new objects. Instead he proposes to create customized constructors. For instance:</p>\n\n<pre><code>var mammal = function (spec) {     \n   var that = {}; \n   that.get_name = function (  ) { \n      return spec.name; \n   }; \n   that.says = function (  ) { \n      return spec.saying || ''; \n   }; \n   return that; \n}; \n\nvar myMammal = mammal({name: 'Herb'});\n</code></pre>\n\n<p>In Javascript a function is an object, and can be used to construct objects out of together with the <strong>new</strong> operator. By convention, functions intended to be used as constructors start with a capital letter. You often see things like:</p>\n\n<pre><code>function Person() {\n   this.name = \"John\";\n   return this;\n}\n\nvar person = new Person();\nalert(\"name: \" + person.name);**\n</code></pre>\n\n<p>In case you forget to use the <strong>new</strong> operator while instantiating a new object, what you get is an ordinary function call, and <em>this</em> is bound to the global object instead to the new object.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I use this pattern fairly frequently - I've found that it gives me a pretty huge amount of flexibility when I need it.  In use it's rather similar to Java-style classes.</p>\n\n<pre><code>var Foo = function()\n{\n\n    var privateStaticMethod = function() {};\n    var privateStaticVariable = \"foo\";\n\n    var constructor = function Foo(foo, bar)\n    {\n        var privateMethod = function() {};\n        this.publicMethod = function() {};\n    };\n\n    constructor.publicStaticMethod = function() {};\n\n    return constructor;\n}();\n</code></pre>\n\n<p>This uses an anonymous function that is called upon creation, returning a new constructor function.  Because the anonymous function is called only once, you can create private static variables in it (they're inside the closure, visible to the other members of the class).  The constructor function is basically a standard Javascript object - you define private attributes inside of it, and public attributes are attached to the <code>this</code> variable.</p>\n\n<p>Basically, this approach combines the Crockfordian approach with standard Javascript objects  to create a more powerful class.</p>\n\n<p>You can use it just like you would any other Javascript object:</p>\n\n<pre><code>Foo.publicStaticMethod(); //calling a static method\nvar test = new Foo();     //instantiation\ntest.publicMethod();      //calling a method\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>There are two models for implementing classes and instances in JavaScript: the prototyping way, and the closure way. Both have advantages and drawbacks, and there are plenty of extended variations. Many programmers and libraries have different approaches and class-handling utility functions to paper over some of the uglier parts of the language.</p>\n\n<p>The result is that in mixed company you will have a mishmash of metaclasses, all behaving slightly differently. What's worse, most JavaScript tutorial material is terrible and serves up some kind of in-between compromise to cover all bases, leaving you very confused. (Probably the author is also confused. JavaScript's object model is very different to most programming languages, and in many places straight-up badly designed.)</p>\n\n<p>Let's start with <strong>the prototype way</strong>. This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.</p>\n\n<pre><code>function Shape(x, y) {\n    this.x= x;\n    this.y= y;\n}\n</code></pre>\n\n<p>We can add methods to the instance created by <code>new Shape</code> by writing them to the <code>prototype</code> lookup of this constructor function:</p>\n\n<pre><code>Shape.prototype.toString= function() {\n    return 'Shape at '+this.x+', '+this.y;\n};\n</code></pre>\n\n<p>Now to subclass it, in as much as you can call what JavaScript does subclassing. We do that by completely replacing that weird magic <code>prototype</code> property:</p>\n\n<pre><code>function Circle(x, y, r) {\n    Shape.call(this, x, y); // invoke the base class's constructor function to take co-ords\n    this.r= r;\n}\nCircle.prototype= new Shape();\n</code></pre>\n\n<p>before adding methods to it:</p>\n\n<pre><code>Circle.prototype.toString= function() {\n    return 'Circular '+Shape.prototype.toString.call(this)+' with radius '+this.r;\n}\n</code></pre>\n\n<p>This example will work and you will see code like it in many tutorials. But man, that <code>new Shape()</code> is ugly: we're instantiating the base class even though no actual Shape is to be created. It happens to work in this simple case because JavaScript is so sloppy: it allows zero arguments to be passed in, in which case <code>x</code> and <code>y</code> become <code>undefined</code> and are assigned to the prototype's <code>this.x</code> and <code>this.y</code>. If the constructor function were doing anything more complicated, it would fall flat on its face.</p>\n\n<p>So what we need to do is find a way to create a prototype object which contains the methods and other members we want at a class level, without calling the base class's constructor function. To do this we are going to have to start writing helper code. This is the simplest approach I know of:</p>\n\n<pre><code>function subclassOf(base) {\n    _subclassOf.prototype= base.prototype;\n    return new _subclassOf();\n}\nfunction _subclassOf() {};\n</code></pre>\n\n<p>This transfers the base class's members in its prototype to a new constructor function which does nothing, then uses that constructor. Now we can write simply:</p>\n\n<pre><code>function Circle(x, y, r) {\n    Shape.call(this, x, y);\n    this.r= r;\n}\nCircle.prototype= subclassOf(Shape);\n</code></pre>\n\n<p>instead of the <code>new Shape()</code> wrongness. We now have an acceptable set of primitives to built classes.</p>\n\n<p>There are a few refinements and extensions we can consider under this model. For example here is a syntactical-sugar version:</p>\n\n<pre><code>Function.prototype.subclass= function(base) {\n    var c= Function.prototype.subclass.nonconstructor;\n    c.prototype= base.prototype;\n    this.prototype= new c();\n};\nFunction.prototype.subclass.nonconstructor= function() {};\n\n...\n\nfunction Circle(x, y, r) {\n    Shape.call(this, x, y);\n    this.r= r;\n}\nCircle.subclass(Shape);\n</code></pre>\n\n<p>Either version has the drawback that the constructor function cannot be inherited, as it is in many languages. So even if your subclass adds nothing to the construction process, it must remember to call the base constructor with whatever arguments the base wanted. This can be slightly automated using <code>apply</code>, but still you have to write out:</p>\n\n<pre><code>function Point() {\n    Shape.apply(this, arguments);\n}\nPoint.subclass(Shape);\n</code></pre>\n\n<p>So a common extension is to break out the initialisation stuff into its own function rather than the constructor itself. This function can then inherit from the base just fine:</p>\n\n<pre><code>function Shape() { this._init.apply(this, arguments); }\nShape.prototype._init= function(x, y) {\n    this.x= x;\n    this.y= y;\n};\n\nfunction Point() { this._init.apply(this, arguments); }\nPoint.subclass(Shape);\n// no need to write new initialiser for Point!\n</code></pre>\n\n<p>Now we've just got the same constructor function boilerplate for each class. Maybe we can move that out into its own helper function so we don't have to keep typing it, for example instead of <code>Function.prototype.subclass</code>, turning it round and letting the base class's Function spit out subclasses:</p>\n\n<pre><code>Function.prototype.makeSubclass= function() {\n    function Class() {\n        if ('_init' in this)\n            this._init.apply(this, arguments);\n    }\n    Function.prototype.makeSubclass.nonconstructor.prototype= this.prototype;\n    Class.prototype= new Function.prototype.makeSubclass.nonconstructor();\n    return Class;\n};\nFunction.prototype.makeSubclass.nonconstructor= function() {};\n\n...\n\nShape= Object.makeSubclass();\nShape.prototype._init= function(x, y) {\n    this.x= x;\n    this.y= y;\n};\n\nPoint= Shape.makeSubclass();\n\nCircle= Shape.makeSubclass();\nCircle.prototype._init= function(x, y, r) {\n    Shape.prototype._init.call(this, x, y);\n    this.r= r;\n};\n</code></pre>\n\n<p>...which is starting to look a bit more like other languages, albeit with slightly clumsier syntax. You can sprinkle in a few extra features if you like. Maybe you want <code>makeSubclass</code> to take and remember a class name and provide a default <code>toString</code> using it. Maybe you want to make the constructor detect when it has accidentally been called without the <code>new</code> operator (which would otherwise often result in very annoying debugging):</p>\n\n<pre><code>Function.prototype.makeSubclass= function() {\n    function Class() {\n        if (!(this instanceof Class))\n            throw('Constructor called without \"new\"');\n        ...\n</code></pre>\n\n<p>Maybe you want to pass in all the new members and have <code>makeSubclass</code> add them to the prototype, to save you having to write <code>Class.prototype...</code> quite so much. A lot of class systems do that, eg:</p>\n\n<pre><code>Circle= Shape.makeSubclass({\n    _init: function(x, y, z) {\n        Shape.prototype._init.call(this, x, y);\n        this.r= r;\n    },\n    ...\n});\n</code></pre>\n\n<p>There are a lot of potential features you might consider desirable in an object system and no-one really agrees on one particular formula.</p>\n\n<hr>\n\n<p>The <strong>closure way</strong>, then. This avoids the problems of JavaScript's prototype-based inheritance, by not using inheritance at all. Instead:</p>\n\n<pre><code>function Shape(x, y) {\n    var that= this;\n\n    this.x= x;\n    this.y= y;\n\n    this.toString= function() {\n        return 'Shape at '+that.x+', '+that.y;\n    };\n}\n\nfunction Circle(x, y, r) {\n    var that= this;\n\n    Shape.call(this, x, y);\n    this.r= r;\n\n    var _baseToString= this.toString;\n    this.toString= function() {\n        return 'Circular '+_baseToString(that)+' with radius '+that.r;\n    };\n};\n\nvar mycircle= new Circle();\n</code></pre>\n\n<p>Now every single instance of <code>Shape</code> will have its own copy of the <code>toString</code> method (and any other methods or other class members we add).</p>\n\n<p>The bad thing about every instance having its own copy of each class member is that it's less efficient. If you are dealing with large numbers of subclassed instances, prototypical inheritance may serve you better. Also calling a method of the base class is slightly annoying as you can see: we have to remember what the method was before the subclass constructor overwrote it, or it gets lost.</p>\n\n<p>[Also because there is no inheritance here, the <code>instanceof</code> operator won't work; you would have to provide your own mechanism for class-sniffing if you need it. Whilst you <em>could</em> fiddle the prototype objects in a similar way as with prototype inheritance, it's a bit tricky and not really worth it just to get <code>instanceof</code> working.]</p>\n\n<p>The good thing about every instance having its own method is that the method may then be bound to the specific instance that owns it. This is useful because of JavaScript's weird way of binding <code>this</code> in method calls, which has the upshot that if you detach a method from its owner:</p>\n\n<pre><code>var ts= mycircle.toString;\nalert(ts());\n</code></pre>\n\n<p>then <code>this</code> inside the method won't be the Circle instance as expected (it'll actually be the global <code>window</code> object, causing widespread debugging woe). In reality this typically happens when a method is taken and assigned to a <code>setTimeout</code>, <code>onclick</code> or <code>EventListener</code> in general.</p>\n\n<p>With the prototype way, you have to include a closure for every such assignment:</p>\n\n<pre><code>setTimeout(function() {\n    mycircle.move(1, 1);\n}, 1000);\n</code></pre>\n\n<p>or, in the future (or now if you hack Function.prototype) you can also do it with <code>function.bind()</code>:</p>\n\n<pre><code>setTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);\n</code></pre>\n\n<p>if your instances are done the closure way, the binding is done for free by the closure over the instance variable (usually called <code>that</code> or <code>self</code>, though personally I would advise against the latter as <code>self</code> already has another, different meaning in JavaScript). You don't get the arguments <code>1, 1</code> in the above snippet for free though, so you would still need another closure or a <code>bind()</code> if you need to do that.</p>\n\n<p>There are lots of variants on the closure method too. You may prefer to omit <code>this</code> completely, creating a new <code>that</code> and returning it instead of using the <code>new</code> operator:</p>\n\n<pre><code>function Shape(x, y) {\n    var that= {};\n\n    that.x= x;\n    that.y= y;\n\n    that.toString= function() {\n        return 'Shape at '+that.x+', '+that.y;\n    };\n\n    return that;\n}\n\nfunction Circle(x, y, r) {\n    var that= Shape(x, y);\n\n    that.r= r;\n\n    var _baseToString= that.toString;\n    that.toString= function() {\n        return 'Circular '+_baseToString(that)+' with radius '+r;\n    };\n\n    return that;\n};\n\nvar mycircle= Circle(); // you can include `new` if you want but it won't do anything\n</code></pre>\n\n<p>Which way is \u201cproper\u201d? Both. Which is \u201cbest\u201d? That depends on your situation. FWIW I tend towards prototyping for real JavaScript inheritance when I'm doing strongly OO stuff, and closures for simple throwaway page effects.</p>\n\n<p>But both ways are quite counter-intuitive to most programmers. Both have many potential messy variations. You will meet both (as well as many in-between and generally broken schemes) if you use other people's code/libraries. There is no one generally-accepted answer. Welcome to the wonderful world of JavaScript objects.</p>\n\n<p>[This has been part 94 of Why JavaScript Is Not My Favourite Programming Language.]</p>\n",
                    "is_accepted": true,
                    "score": 670
                },
                {
                    "body": "<p>Another way would be <a href=\"http://jsfiddle.net/nnUY4/\" rel=\"nofollow\">http://jsfiddle.net/nnUY4/</a>\n(i dont know if this kind of handling object creation and revealing functions follow any specific pattern)</p>\n\n<pre><code>// Build-Reveal\n\nvar person={\ncreate:function(_name){ // 'constructor'\n                        //  prevents direct instantiation \n                        //  but no inheritance\n    return (function() {\n\n        var name=_name||\"defaultname\";  // private variable\n\n        // [some private functions]\n\n        function getName(){\n            return name;\n        }\n\n        function setName(_name){\n            name=_name;\n        }\n\n        return {    // revealed functions\n            getName:getName,    \n            setName:setName\n        }\n    })();\n   }\n  }\n\n  // \u2026 no (instantiated) person so far \u2026\n\n  var p=person.create(); // name will be set to 'defaultname'\n  p.setName(\"adam\");        // and overwritten\n  var p2=person.create(\"eva\"); // or provide 'constructor parameters'\n  alert(p.getName()+\":\"+p2.getName()); // alerts \"adam:eva\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Instead of using a pattern, why  not use a library?</p>\n\n<ul>\n<li><a href=\"https://github.com/fresheneesz/proto\" rel=\"nofollow\">https://github.com/fresheneesz/proto</a></li>\n<li><a href=\"http://classy.pocoo.org/\" rel=\"nofollow\">http://classy.pocoo.org/</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>Closure</code> is versatile. <code>bobince</code> has well summarized the <em>prototype vs. closure</em> approaches when creating objects. However you can mimic some aspects of <code>OOP</code> using closure in a functional programming way. Remember <em>functions are objects in JavaScript</em>; so use function as object in a different way.</p>\n\n<p>Here is an example of closure:</p>\n\n<pre><code>function outer(outerArg) {\n    return inner(innerArg) {\n        return innerArg + outerArg; //the scope chain is composed of innerArg and outerArg from the outer context \n    }\n}\n</code></pre>\n\n<p>A while ago I came across the Mozilla's article on Closure. Here is what jump at my eyes: \"A closure lets you associate some data (the environment) with a function that operates on that data. <strong>This has obvious parallels to object oriented programming, where objects allow us to associate some data (the object's properties) with one or more methods</strong>\". It was the very first time I read a parallelism between closure and classic OOP with no reference to prototype.</p>\n\n<p>How?</p>\n\n<p>Suppose you want to calculate the VAT of some items. The VAT is likely to stay stable during the lifetime of an application. One way to do it in OOP (pseudo code):</p>\n\n<pre><code>public class Calculator {\n    public property VAT { get; private set; }\n    public Calculator(int vat) {\n        this.VAT = vat;\n    }\n    public int Calculate(int price) {\n        return price * this.VAT;\n    }\n}\n</code></pre>\n\n<p>Basically you pass a VAT value into your constructor and your calculate method can operate upon it via <em>closure</em>.\nNow instead of using a class/constructor, pass your VAT as an argument into a function. Because the only stuff you are interested in is the calculation itself, returns a new function, which is the calculate method:</p>\n\n<pre><code>function calculator(vat) {\n    return function(item) {\n        return item * vat;\n    }\n}\nvar calculate = calculator(1.10);\nvar jsBook = 100; //100$\ncalculate(jsBook); //110\n</code></pre>\n\n<p>In your project identify top-level values that are good candidate of what VAT is for calculation. As a rule of thumb whenever you pass the same arguments on and on, there is a way to improve it using closure. No need to create traditional objects.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I came across this small tutorial on creating classes in javascript: <a href=\"http://www.mimasoftware.com/2014/03/how-to-create-classes-in-javascript.html\" rel=\"nofollow\">http://www.mimasoftware.com/2014/03/how-to-create-classes-in-javascript.html</a> It's helped me get a better handle on creating custom objects in javascript.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm still trying to understand JavaScript, and I wonder about what the best way is to create an object that has properties and methods.</p>\n\n<p>I have seen examples where the person used \"var self = this\" and then uses \"self.\" in all functions to make sure the scope is always correct.</p>\n\n<p>Then I have seen examples of using .prototype to add properties, while others do it inline.</p>\n\n<p>Can someone give me a proper example of a JavaScript object with some Properties and Methods?</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1422633148,
            "question_id": 1595611,
            "score": 319,
            "tags": [
                "javascript"
            ],
            "title": "How to &quot;properly&quot; create a custom object in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You will need to create a canvas element with the correct dimensions and copy the image data with the <code>drawImage</code> function. Then you can use the <code>toDataURL</code> function to get a data: url that has the base-64 encoded image. Note that the image must be fully loaded, or you'll just get back an empty (black, transparent) image.</p>\n\n<p>It would be something like this. I've never written a Greasemonkey script, so you might need to adjust the code to run in that environment.</p>\n\n<pre><code>function getBase64Image(img) {\n    // Create an empty canvas element\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = img.width;\n    canvas.height = img.height;\n\n    // Copy the image contents to the canvas\n    var ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n\n    // Get the data-URL formatted image\n    // Firefox supports PNG and JPEG. You could check img.src to\n    // guess the original format, but be aware the using \"image/jpg\"\n    // will re-encode the image.\n    var dataURL = canvas.toDataURL(\"image/png\");\n\n    return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n}\n</code></pre>\n\n<p>Getting a JPEG-formatted image doesn't work on older versions (around 3.5) of Firefox, so if you want to support that, you'll need to check the compatibility. If the encoding is not supported, it will default to \"image/png\".</p>\n",
                    "is_accepted": true,
                    "score": 250
                },
                {
                    "body": "<p>This Function takes the URL then returns the image BASE64</p>\n\n<pre><code>function getBase64FromImageUrl(URL) {\n    var img = new Image();\n    img.src = URL;\n    img.onload = function () {\n\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.width =this.width;\n    canvas.height =this.height;\n\n    var ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(this, 0, 0);\n\n\n    var dataURL = canvas.toDataURL(\"image/png\");\n\n    alert(  dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\"));\n\n    }\n}\n</code></pre>\n\n<p>Call it like this : \n  <code>getBase64FromImageUrl(\"images/slbltxt.png\")</code></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>In addition to matthew's answer, I'd like to say that image.width and image.height return the displayed size of the picture (and crop the image when drawing it to the canvas)</p>\n\n<p>Use naturalWidth and naturalHeight instead, which uses the real-size picture.</p>\n\n<p>See <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/edits.html#dom-img-naturalwidth\">http://www.whatwg.org/specs/web-apps/current-work/multipage/edits.html#dom-img-naturalwidth</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I have a regular HTML page with some images (just regular <code>&lt;img /&gt;</code> HTML tags). I'd like to get their content, base64 encoded preferably, without the need to redownload the image (ie. it's already loaded by the browser, so now I want the content).</p>\n\n<p>I'd love to achieve that with Greasemonkey and Firefox.</p>\n",
            "last_activity_date": 1421787362,
            "question_id": 934012,
            "score": 187,
            "tags": [
                "javascript",
                "image",
                "firefox",
                "greasemonkey",
                "base64"
            ],
            "title": "Get image data in JavaScript?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>Yes!</p>\n\n<pre><code>jQuery.fn.exists = function(){return this.length&gt;0;}\n\nif ($(selector).exists()) {\n    // Do something\n}\n</code></pre>\n\n<p>There you go!</p>\n\n<p>This is in response to: <a href=\"http://herdingcode.com/?p=36\">Herding Code podcast with Jeff Atwood</a></p>\n",
                    "is_accepted": true,
                    "score": 709
                },
                {
                    "body": "<p>You can use:</p>\n\n<pre><code>if ($(selector).is('*')) {\n  // Do something\n}\n</code></pre>\n\n<p>A <strong>little</strong> more elegant, perhaps.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>If you used</p>\n\n<pre><code>jQuery.fn.exists = function(){return ($(this).length &gt; 0);}\nif ($(selector).exists()) { }\n</code></pre>\n\n<p>you would imply that chaining was possible when it is not.</p>\n\n<p>This would be better:</p>\n\n<pre><code>jQuery.exists = function(selector) {return ($(selector).length &gt; 0);}\nif ($.exists(selector)) { }\n</code></pre>\n\n<p>Alternatively, <a href=\"http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/\">from the FAQ</a>:</p>\n\n<pre><code>if ( $('#myDiv').length ) { //Do something }\n</code></pre>\n\n<p>You could also use the following. If there are no values in the jQuery object array then getting the first item in the array would return undefined.</p>\n\n<pre><code>if ( $('#myDiv')[0] ) { //Do something }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 176
                },
                {
                    "body": "<pre><code>if ( $('#myDiv').size() &gt; 0 ) { //do something }\n</code></pre>\n\n<p><code>size()</code> counts the number of elements returned by the selector</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In JavaScript, everything is truthy or falsy and for numbers, 0 means false, everything else true. So you could write:</p>\n\n<pre><code>if ($(selector).length)\n</code></pre>\n\n<p>and you don't need that <code>&gt; 0</code> part.</p>\n",
                    "is_accepted": false,
                    "score": 843
                },
                {
                    "body": "<p>You can use this:</p>\n\n<pre><code>// if element exists\nif($('selector').length){ //do something }\n</code></pre>\n\n<hr>\n\n<pre><code>// if element does not exist\nif(!$('selector').length){ //do something }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>There's no need for jQuery really. With plain JavaScript it's easier and semantically correct to check for:</p>\n\n<pre><code>if(document.getElementById(\"myElement\")) {\n    //Do something...\n}\n</code></pre>\n\n<p>If for any reason you don't want to put an id to the element, you can still use any other JavaScript method designed to access the DOM.</p>\n\n<p>jQuery is really cool, but don't let pure JavaScript fall into oblivion...</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The fastest and most semantically self explaining way to check for existence is actually by using plain JavaScript:</p>\n\n<pre><code>if (document.getElementById('element_id')) {\n    // Do something\n}\n</code></pre>\n\n<p>It is a bit longer to write than the jQuery length alternative, but executes faster since it is a native JS method.</p>\n\n<p>And it is better than the alternative of writing your own jQuery function. That alternative is slower, for the reasons @snover stated. But it would also give other programmers the impression that the exists() function is something inherent to jQuery. JavaScript would/should be understood by others editing your code, without increased knowledge debt.</p>\n\n<p>NB: Notice the lack of an '#' before the element_id (since this is plain JS, not jQuery).</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>I have found <code>if ($(selector).length) {}</code> to be insufficient. It will silently break your app when <code>selector</code> is an empty object <code>{}</code>.</p>\n\n<pre><code>var $target = $({});        \nconsole.log($target, $target.length);\n\n// Console output:\n// -------------------------------------\n// [\u25bc Object              ] 1\n//    \u25ba __proto__: Object\n</code></pre>\n\n<p>My only suggestion is to perform an additional check for <code>{}</code>.</p>\n\n<pre><code>if ($.isEmptyObject(selector) || !$(selector).length) {\n    throw new Error('Unable to work with the given selector.');\n}\n</code></pre>\n\n<p>I'm still looking for a better solution though as this one is a bit heavy.</p>\n\n<p>Edit: <strong>WARNING!</strong> This doesn't work in IE when <code>selector</code> is a string.</p>\n\n<pre><code>$.isEmptyObject('hello') // FALSE in Chrome and TRUE in IE\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I had a case where I wanted to see if an object exists inside of another so I added something to the first answer to check for a selector inside the selector..</p>\n\n<pre><code>// Checks if an object exists.\n// Usage:\n//\n//     $(selector).exists()\n//\n// Or:\n// \n//     $(selector).exists(anotherSelector);\njQuery.fn.exists = function(selector) {\n    return selector ? this.find(selector).length : this.length;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>$(selector).length &amp;&amp; //Do something\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I'm using this:</p>\n\n<pre><code>    $.fn.ifExists = function(fn) {\n      if (this.length) {\n        $(fn(this));\n      }\n    };\n    $(\"#element\").ifExists( \n      function($this){\n        $this.addClass('someClass').animate({marginTop:20},function(){alert('ok')});               \n      }\n    ); \n</code></pre>\n\n<p>Execute the chain only if a jQuery element exist  - <a href=\"http://jsfiddle.net/andres_314/vbNM3/2/\" rel=\"nofollow\">http://jsfiddle.net/andres_314/vbNM3/2/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Extreme Update</strong> <em><sub>Oct 2, '13</sub></em></p>\n\n<hr>\n\n<p>Originally I made this plugin to provide a bit more acute sense than simply <code>if ($(ele).length) { /* DO WORK */ }</code>.\nSure that is simple and easy, but I didn't like how it took me \"outside\" of typical \"jQuery style\".\nI really wanted a <code>$.fn.exist()</code> method in order to maintain readable markup.\nAlso, the <em>simple plugins</em> so often previously suggested, do not account for <em>developer error</em>.\nThus the creation of the <em>very simple</em> plugin found <a href=\"http://jsfiddle.net/SpYk3/qkQgL\" rel=\"nofollow\"><strong>here</strong></a> (<a href=\"http://jsfiddle.net/SpYk3/qkQgL/44/\" rel=\"nofollow\"><strong>minified</strong></a>).</p>\n\n<p>I soon decided to kick it up a notch and provide for more functionality in checking against <em>developer mistakes</em> as well as provide a bit more <em>functionality</em>.\nThe thought lead me to the update on <sub>Jun 6, '13</sub> found over <a href=\"http://jsfiddle.net/SpYk3/qkQgL/41/\" rel=\"nofollow\"><strong>here</strong></a> (<a href=\"http://jsfiddle.net/SpYk3/qkQgL/45/\" rel=\"nofollow\"><strong>minified</strong></a>).\nNow I've finally put together a version I really <strong><em>like</em></strong>!</p>\n\n<p>This new version of the plugin can still be used as simple as <code>if ($(ele).exist()) { /* DO WORK */ }</code>, however I found that to be a bit \"against the grain\" with jQuery <em>typical</em> markup style.\nI thought, \"<em>Why the <strong>if</strong> statement? Shouldn't that be in a <strong>callback</strong>?</em>\"\nNow it is! Behold, the new, bigger, stronger, callbackier <strong>$.exist() Plugin</strong>!</p>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/cEUR5/\" rel=\"nofollow\"><h1>jsFiddle</h1></a></p>\n\n<h2>Plugin</h2>\n\n<pre><code>;;(function($) {\n    if (!$.exist) {\n        $.extend({\n            exist: function() {\n                var ele, cbmExist, cbmNotExist;\n                if (arguments.length) {\n                    for (x in arguments) {\n                        switch (typeof arguments[x]) {\n                            case 'function':\n                                if (typeof cbmExist == \"undefined\") cbmExist = arguments[x];\n                                else cbmNotExist = arguments[x];\n                                break;\n                            case 'object':\n                                if (arguments[x] instanceof jQuery) ele = arguments[x];\n                                else {\n                                    var obj = arguments[x];\n                                    for (y in obj) {\n                                        if (typeof obj[y] == 'function') {\n                                            if (typeof cbmExist == \"undefined\") cbmExist = obj[y];\n                                            else cbmNotExist = obj[y];\n                                        }\n                                        if (typeof obj[y] == 'object' &amp;&amp; obj[y] instanceof jQuery) ele = obj[y];\n                                        if (typeof obj[y] == 'string') ele = $(obj[y]);\n                                    }\n                                }\n                                break;\n                            case 'string':\n                                ele = $(arguments[x]);\n                                break;\n                        }\n                    }\n                }\n\n                if (typeof cbmExist == 'function') {\n                    var exist =  ele.length &gt; 0 ? true : false;\n                    if (exist) {\n                        return ele.each(function(i) { cbmExist.apply(this, [exist, ele, i]); });\n                    }\n                    else if (typeof cbmNotExist == 'function') {\n                        cbmNotExist.apply(ele, [exist, ele]);\n                        return ele;\n                    }\n                    else {\n                        if (ele.length &lt;= 1) return ele.length &gt; 0 ? true : false;\n                        else return ele.length;\n                    }\n                }\n                else {  \n                    if (ele.length &lt;= 1) return ele.length &gt; 0 ? true : false; \n                    else return ele.length; \n                }\n\n                return false; \n            }\n        });\n        $.fn.extend({\n            exist: function() {\n                var args = [$(this)];\n                if (arguments.length) for (x in arguments) args.push(arguments[x]);\n                return $.exist.apply($, args);\n            }\n        });\n    }\n})(jQuery);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/cEUR5/\" rel=\"nofollow\">jsFiddle</a></p>\n\n<p>The use is extremely easy.\nYou can still use in an <strong><code>if:</code></strong> statement, or you can create your own callback.\nKeep in mind, the callback has 2 possible <em>creations</em>.\n<strike>\nYou can create the call back with <strong>NO PARAMETERS</strong> such as <code>function() {}</code> and it will <strong>ONLY FIRE IF</strong> the element <strong>EXIST</strong>.\n<em>However</em>, if you provide a parameter, such as <code>function(exist) {}</code> or even <code>function(bob) {}</code>, then the callback will <strong>ALWAYS FIRE</strong> even if the element does <strong>NOT EXIST</strong>.\nIn the second scenario, your <em>parameter</em>, no mater what you name it, becomes a <strong><code>BOOLEAN</code></strong> of wether or not the element exist.\n</strike></p>\n\n<p><strong><code>UPDATE</code></strong>: After a little more personal use, I found the \"<em>parameter</em>\" setup to be a bit flawed. I've since replaced it with a better working ideal of allowing for a \"<strong><em>second</em></strong>\" function. The second function will fire if the element does <strong>NOT</strong> exist. However, if you choose to set only one function, then it will only fire when the element exist. Thus the \"<em>chain</em>\" will die if the selected element does \"<em>not</em>\" exist. Of course, if it does exist, the first function will fire and chainability will continue.</p>\n\n<p>On another note, keep in mind, using a <em>callback</em> method helps to <strong>maintain chainability</strong>. This means the element is returned and you can continue <em>chaining</em> commands as with any other jQuery method!</p>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/cEUR5/\" rel=\"nofollow\">jsFiddle</a></p>\n\n<h2>Example Uses</h2>\n\n<pre><code>if ($.exist('#eleID')) { /* DO WORK */ }        //  param as STRING\nif ($.exist($('#eleID'))) { /*  DO WORK */ }    //  param as jQuery OBJECT\nif ($('#eleID').exist()) { /*   DO WORK */ }        //  enduced on jQuery OBJECT\n\n$.exist('#eleID', function() {          //  param is STRING &amp;&amp; CALLBACK METHOD\n    /*  DO WORK */\n    /*  This will ONLY fire if the element EXIST    */\n}, function() {         //  param is STRING &amp;&amp; CALLBACK METHOD\n    /*  DO WORK */\n    /*  This will ONLY fire if the element DOES NOT EXIST   */\n})\n\n$('#eleID').exist(function() {          //  enduced on jQuery OBJECT with CALLBACK METHOD\n    /*  DO WORK */\n    /*  Will ONLY FIRE IF EXIST */\n})\n\n$.exist({                       //  param is OBJECT containing 2 key|value pairs: element = STRING, callback = METHOD\n    element: '#eleID',\n    callback: function() {\n        /*  DO WORK */\n    /*  This will ONLY fire if the element EXIST    */\n    }\n})\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/cEUR5/6/\" rel=\"nofollow\">Minified jsFiddle</a></p>\n\n<pre><code>;;(function($){$.exist||($.extend({exist:function(){var a,c,d;if(arguments.length)for(x in arguments)switch(typeof arguments[x]){case \"function\":\"undefined\"==typeof c?c=arguments[x]:d=arguments[x];break;case \"object\":if(arguments[x]instanceof jQuery)a=arguments[x];else{var b=arguments[x];for(y in b)\"function\"==typeof b[y]&amp;&amp;(\"undefined\"==typeof c?c=b[y]:d=b[y]),\"object\"==typeof b[y]&amp;&amp;b[y]instanceof jQuery&amp;&amp;(a=b[y]),\"string\"==typeof b[y]&amp;&amp;(a=$(b[y]))}break;case \"string\":a=$(arguments[x])}if(\"function\"==typeof c){var e=0&lt;a.length?!0:!1;if(e)return a.each(function(b){c.apply(this,[e,a,b])});if(\"function\"==typeof d)return d.apply(a,[e,a]),a}return 1&gt;=a.length?0&lt;a.length?!0:!1:a.length}}),$.fn.extend({exist:function(){var a=[$(this)];if(arguments.length)for(x in arguments)a.push(arguments[x]);return $.exist.apply($,a)}}))})(jQuery);\n</code></pre>\n\n<hr>\n\n<p><strong><code>NOTE:</code></strong> All minified versions were made using <a href=\"http://closure-compiler.appspot.com/home\" rel=\"nofollow\">Google Closure</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You could use this:</p>\n\n<pre><code>jQuery.fn.extend({\n    exists: function() { return this.length }\n});\n\nif($(selector).exists()){do something}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Is <a href=\"http://api.jquery.com/jQuery.contains/\" rel=\"nofollow\">$.contains()</a> what you want?</p>\n\n<blockquote>\n  <p>jQuery.contains( container, contained )</p>\n  \n  <p>The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.</p>\n  \n  <p><em><strong>Note</em></strong>: The first argument must be a DOM element, not a jQuery object or plain JavaScript object.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can save a few bytes by writing:</p>\n\n<pre><code>if ($(selector)[0]) { ... }\n</code></pre>\n\n<p>This works because each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get the first item from the <em>array</em>. It returns <code>undefined</code> if there is no item at the specified index.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>How about:</p>\n\n<pre><code>function exists(selector) {\n    return $(selector).length;\n}\n\nif (exists(selector)) {\n    // do something\n}\n</code></pre>\n\n<p>It's very minimal and saves you having to enclose the selector with <code>$()</code> every time.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>i always use</p>\n\n<pre><code>if ( $(selector)[0] ){}\n</code></pre>\n\n<p>thats nice and short</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I stumbled upon this question and i'd like to share a snippet of code i currently use:</p>\n\n<pre><code>$.fn.exists = function(callback) {\n    var self = this;\n    var wrapper = (function(){\n            function notExists () {}\n\n            notExists.prototype.else = function(fallback){\n                if (!self.length) {                    \n                    fallback.call();\n                }\n            };\n\n            return new notExists;\n        })();\n\n    if(self.length) {\n        callback.call();    \n    }\n\n    return wrapper;\n}\n</code></pre>\n\n<p>And now i can write code like this - </p>\n\n<pre><code>$(\"#elem\").exists(function(){\n    alert (\"it exists\");\n}).else(function(){\n    alert (\"it doesn't exist\");\n});\n</code></pre>\n\n<p>What's more exciting about this stuff is how it's written in CoffeeScript:</p>\n\n<pre><code>$.fn.exists = (callback) -&gt;\n    exists = @length\n    callback.call() if exists        \n    new class\n       else: (fallback) -&gt;            \n            fallback.call() if not exists\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The reason all of the previous answers require the <code>.length</code> parameter is that they are mostly using jquery's <code>$()</code> selector which has querySelectorAll behind the curtains (or they are using it directly).  This method is rather slow because it needs to parse the entire DOM tree looking for <strong>all</strong> matches to that selector and populating an array with them.</p>\n\n<p>The ['length'] parameter is not needed or useful and the code will be a lot faster if you directly use <code>document.querySelector(selector)</code> instead, because it returns the first element it matches or null if not found.</p>\n\n<pre><code>function elementIfExists(selector){  //named this way on purpose, see below\n    return document.querySelector(selector);\n}\n/* usage: */\nvar myelement = elementIfExists(\"#myid\") || myfallbackelement;\n</code></pre>\n\n<p>However this method leaves us with the actual object being returned; which is fine if it isn't going to be saved as variable and used repeatedly (thus keeping the reference around if we forget).</p>\n\n<pre><code>var myel=elementIfExists(\"#myid\");\n// now we are using a reference to the element which will linger after removal\nmyel.getParentNode.removeChild(myel);\nconsole.log(elementIfExists(\"#myid\")); /* null */\nconsole.log(myel); /* giant table lingering around detached from document */\nmyel=null; /* now it can be garbage collected */\n</code></pre>\n\n<p>In some cases this may be desired.  It can be used in a for loop like this:</p>\n\n<pre><code>/* locally scoped myel gets garbage collected even with the break; */\nfor (var myel; myel = elementIfExist(sel); myel.getParentNode.removeChild(myel))\n    if (myel == myblacklistedel) break;\n</code></pre>\n\n<p>If you don't actually need the element and want to get/store just a true/false, just double not it !!  It works for shoes that come untied, so why knot here?</p>\n\n<pre><code>function elementExists(selector){\n    return !!document.querySelector(selector);\n}\n/* usage: */\nvar hastables = elementExists(\"table\");  /* will be true or false */\nif (hastables){\n    /* insert css style sheet for our pretty tables */\n}\nsetTimeOut(function (){if (hastables &amp;&amp; !elementExists(\"#mytablecss\"))\n                           alert(\"bad table layouts\");},3000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can I check the existence of an element in jQuery?</p>\n\n<p>The current code that I have is this:</p>\n\n<pre><code>if ($(selector).length&gt;0) {\n    // Do something\n}\n</code></pre>\n\n<p>Is there is a more elegant way to approach this? Perhaps a plugin or a function?</p>\n",
            "last_activity_date": 1424864338,
            "question_id": 31044,
            "score": 993,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Is there an &quot;exists&quot; function for jQuery?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p><code>===</code> and <code>!==</code> are strict comparison operators:</p>\n\n<blockquote>\n  <p>JavaScript has both strict and\n  type-converting equality comparison.\n  For strict equality the objects being\n  compared must have the same type and:</p>\n  \n  <ul>\n  <li>Two strings are strictly equal when they have the same sequence of\n  characters, same length, and same\n  characters in corresponding positions.</li>\n  <li>Two numbers are strictly equal when they are numerically equal (have\n  the same number value). NaN is not\n  equal to anything, including NaN.\n  Positive and negative zeros are equal\n  to one another.</li>\n  <li>Two Boolean operands are strictly equal if both are true or\n  both are false.</li>\n  <li>Two objects are strictly equal if they refer to the same Object.</li>\n  <li>Null and Undefined types are == (but not ===). [I.e. Null==Undefined (but not Null===Undefined)]</li>\n  </ul>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Comparison_Operators\">Comparison Operators - MDC</a></p>\n",
                    "is_accepted": true,
                    "score": 549
                },
                {
                    "body": "<p>Take a look here: <a href=\"http://longgoldenears.blogspot.com/2007/09/triple-equals-in-javascript.html\">http://longgoldenears.blogspot.com/2007/09/triple-equals-in-javascript.html</a></p>\n\n<p>The 3 equal signs mean \"equality without type coercion\". Using the triple equals, the values must be equal in type as well.</p>\n\n<pre><code>0 == false   // true\n0 === false  // false, because they are of a different type\n1 == \"1\"     // true, auto type coercion\n1 === \"1\"    // false, because they are of a different type\nnull == undefined // true\nnull === undefined // false\n'0' == false // true\n'0' === false // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 734
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/359494/javascript-vs-does-it-matter-which-equal-operator-i-use\">Javascript === vs == : Does it matter which &ldquo;equal&rdquo; operator I use?</a>   </p>\n</blockquote>\n\n\n\n<p>What is the difference between <code>==</code> and <code>===</code> in JavaScript?  I have also seen <code>!=</code> and <code>!==</code> operators.  Are there more such operators?</p>\n",
            "last_activity_date": 1406017717,
            "question_id": 523643,
            "score": 615,
            "tags": [
                "javascript",
                "comparison-operators",
                "equality-operator",
                "identity-operator"
            ],
            "title": "Difference between == and === in JavaScript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Why not use <a href=\"http://www.w3schools.com/jsref/dom_obj_style.asp\"><code>.style</code> of the DOM element</a>?  It's an object which contains members such as <code>width</code> and <code>backgroundColor</code>.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>A couple years late, but here is a solution that retrieves both inline styling and external styling:</p>\n\n<pre><code>function css(a) {\n    var sheets = document.styleSheets, o = {};\n    for (var i in sheets) {\n        var rules = sheets[i].rules || sheets[i].cssRules;\n        for (var r in rules) {\n            if (a.is(rules[r].selectorText)) {\n                o = $.extend(o, css2json(rules[r].style), css2json(a.attr('style')));\n            }\n        }\n    }\n    return o;\n}\n\nfunction css2json(css) {\n    var s = {};\n    if (!css) return s;\n    if (css instanceof CSSStyleDeclaration) {\n        for (var i in css) {\n            if ((css[i]).toLowerCase) {\n                s[(css[i]).toLowerCase()] = (css[css[i]]);\n            }\n        }\n    } else if (typeof css == \"string\") {\n        css = css.split(\"; \");\n        for (var i in css) {\n            var l = css[i].split(\": \");\n            s[l[0].toLowerCase()] = (l[1]);\n        }\n    }\n    return s;\n}\n</code></pre>\n\n<p>Pass a jQuery object into <code>css()</code> and it will return an object, which you can then plug back into jQuery's <code>$().css()</code>, ex:</p>\n\n<pre><code>var style = css($(\"#elementToGetAllCSS\"));\n$(\"#elementToPutStyleInto\").css(style);\n</code></pre>\n\n<p>:)</p>\n",
                    "is_accepted": true,
                    "score": 224
                },
                {
                    "body": "<p>Two years late, but I have the solution you're looking for. Not intending to take credit form the <a href=\"http://upshots.org/?p=192\">original author</a>, here's a plugin which I found works exceptionally well for what you need, but gets <strong>all</strong> possible styles in all browsers, even IE.</p>\n\n<p><strong>Warning:</strong> This code generates a lot of output, and should be used sparingly. It not only copies all standard CSS properties, but also all vendor CSS properties for that browser.</p>\n\n<p><code>jquery.getStyleObject.js:</code></p>\n\n<pre><code>/*\n * getStyleObject Plugin for jQuery JavaScript Library\n * From: http://upshots.org/?p=112\n */\n\n(function($){\n    $.fn.getStyleObject = function(){\n        var dom = this.get(0);\n        var style;\n        var returns = {};\n        if(window.getComputedStyle){\n            var camelize = function(a,b){\n                return b.toUpperCase();\n            };\n            style = window.getComputedStyle(dom, null);\n            for(var i = 0, l = style.length; i &lt; l; i++){\n                var prop = style[i];\n                var camel = prop.replace(/\\-([a-z])/g, camelize);\n                var val = style.getPropertyValue(prop);\n                returns[camel] = val;\n            };\n            return returns;\n        };\n        if(style = dom.currentStyle){\n            for(var prop in style){\n                returns[prop] = style[prop];\n            };\n            return returns;\n        };\n        return this.css();\n    }\n})(jQuery);\n</code></pre>\n\n<p>Basic usage is pretty simple, but he's written a function for that as well:</p>\n\n<pre><code>$.fn.copyCSS = function(source){\n\u00a0\u00a0var styles = $(source).getStyleObject();\n\u00a0\u00a0this.css(styles);\n}\n</code></pre>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>@marknadal's solution wasn't grabbing hyphenated properties for me (e.g. <code>max-width</code>), but changing the first <code>for</code> loop in <code>css2json()</code> made it work, and I suspect performs fewer iterations:</p>\n\n<pre><code>for (var i = 0; i &lt; css.length; i += 1) {\n    s[css[i]] = css.getPropertyValue(css[i]);\n}\n</code></pre>\n\n<p>Loops via <code>length</code> rather than <code>in,</code> retrieves via <code>getPropertyValue()</code> rather than <code>toLowerCase().</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I had tried many different solutions. This was the only one that worked for me in that it was able to pick up on styles applied at class level and at style as directly attributed on the element. So a font set at css file level and one as a style attribute; it returned the correct font.</p>\n\n<p>It is simple! (Sorry, can't find where I originally found it)</p>\n\n<pre><code>//-- html object\nvar element = htmlObject; //e.g document.getElementById\n//-- or jquery object\nvar element = htmlObject[0]; //e.g $(selector)\n\nvar stylearray = document.defaultView.getComputedStyle(element, null);\nvar font = stylearray[\"font-family\"]\n</code></pre>\n\n<p>Alternatively you can list all the style by cycling through the array</p>\n\n<pre><code>for (var key in styles) {\nconsole.log(key + ': ' + styles[key];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a way in jQuery to get all CSS from an existing element and apply it to another without listing them all?</p>\n\n<p>I know it would work if they were a style attribute with <code>attr()</code>, but all of my styles are in an external style sheet.</p>\n",
            "last_activity_date": 1415170922,
            "question_id": 754607,
            "score": 182,
            "tags": [
                "javascript",
                "jquery",
                "css"
            ],
            "title": "Can jQuery get all CSS styles associated with an element?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I've seen issues where some browsers don't respect some changes when you do them directly (by which I mean creating the HTML from text like you're trying with the script tag), but when you do them with built-in commands things go better.  Try this:</p>\n\n<pre><code>var script = document.createElement( 'script' );\nscript.type = 'text/javascript';\nscript.src = url;\n$(\"#someElement\").append( script );\n</code></pre>\n\n<p>From: <a href=\"http://mg.to/2006/01/25/json-for-jquery\">http://mg.to/2006/01/25/json-for-jquery</a></p>\n",
                    "is_accepted": true,
                    "score": 181
                },
                {
                    "body": "<p>What do you mean \"not working\"?</p>\n\n<p>jQuery detects that you're trying to create a SCRIPT element and will automatically run the contents of the element within the global context. Are you telling me that this doesn't work for you? -</p>\n\n<pre><code>$('#someElement').append('&lt;script&gt;alert(\"WORKING\");&lt;/script&gt;');\n</code></pre>\n\n<p><hr /></p>\n\n<p>Edit: If you're not seeing the SCRIPT element in the DOM (in Firebug for example) after you run the command that's because jQuery, like I said, will run the code and then will delete the SCRIPT element - I believe that SCRIPT elements are always appended to the body... but anyway - placement has absolutely no bearing on code execution in this situation.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I want to do the same thing but to append a script tag in other frame!</p>\n\n<pre><code>var url = 'library.js'; \nvar script = window.parent.frames[1].document.createElement('script' ); \nscript.type = 'text/javascript'; \nscript.src = url;\n$('head',window.parent.frames[1].document).append(script);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n    ...\n    ...jQuery(\"&lt;script&gt;&lt;/script&gt;\")...\n    ...\n&lt;/script&gt;\n</code></pre>\n\n<p>The <code>&lt;/script&gt;</code> within the string literal terminates the entire script, to avoid that <code>\"&lt;/scr\" + \"ipt&gt;\"</code> can be used instead.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is possible to dynamically load a JavaScript file using the <a href=\"http://api.jquery.com/jQuery.getScript/\">jQuery function <code>getScript</code></a></p>\n\n<pre>\n$.getScript('http://www.whatever.com/shareprice/shareprice.js', function() {\n  Display.sharePrice();\n});\n</pre>\n\n<p>Now the external script will be called, and if it cannot be loaded it will gracefully degrade.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Here's how google analytics would do it:</p>\n\n<pre><code>$(\"#someElement\").append(unescape('%3Cscript src=blah.js%3E%3C/script%3E\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This works:</p>\n\n<pre><code>var code = \"&lt;script&gt;alert('Hi!');&lt;/scr\"+\"ipt&gt;\";\n$('body').append($(code)[0]);\n</code></pre>\n\n<p>It seems like jQuery is doing something clever with scripts so you need to append it rather than letting jQuery parse it.</p>\n\n<p>This is how you would add a script to an <code>iframe</code>:</p>\n\n<pre><code>var code = \"&lt;script&gt;alert('Hi!');&lt;/scr\"+\"ipt&gt;\";\n$('iframe').contents().find('head').append($(code)[0]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><strong>The Good News is:</strong></p>\n\n<blockquote>\n  <p><em>It's 100% working.</em></p>\n</blockquote>\n\n<p>Just add something inside the script tag such as <code>alert('voila!');</code>. The right question you might want to ask perhaps, <strong><em>\"Why didn't I see it in the DOM?\"</em></strong>.</p>\n\n<p>Karl Swedberg has made a nice explanation to visitor's comment in <a href=\"http://api.jquery.com/append/#comment-61121802\">jQuery API site</a>. I <strike>don't</strike> want to repeat all his words, you can read directly <strike>there</strike> here <em>(I found it hard to navigate through the comments there)</em>.</p>\n\n<blockquote>\n  <p><em>All of jQuery's insertion methods use\n  a domManip function internally to\n  clean/process elements before and\n  after they are inserted into the DOM.\n  One of the things the domManip\n  function does is pull out any script\n  elements about to be inserted and run\n  them through an \"evalScript routine\"\n  rather than inject them with the rest\n  of the DOM fragment. It inserts the\n  scripts separately, evaluates them,\n  and then removes them from the DOM.</em></p>\n  \n  <p><em>I believe that one of the reasons jQuery\n  does this is to avoid \"Permission\n  Denied\" errors that can occur in\n  Internet Explorer when inserting\n  scripts under certain circumstances.\n  It also avoids repeatedly\n  inserting/evaluating the same script\n  (which could potentially cause\n  problems) if it is within a containing\n  element that you are inserting and\n  then moving around the DOM.</em></p>\n</blockquote>\n\n<p>The next thing is, I'll summarize what's the bad news by using <code>.append()</code> function to add a script.</p>\n\n<hr>\n\n<p><strong>And The Bad News is..</strong></p>\n\n<blockquote>\n  <p><em>You can't debug your code.</em></p>\n</blockquote>\n\n<p>I'm not joking, even if you add <code>debugger;</code> keyword between the line you want to set as breakpoint, you'll be end up getting only the call stack of the object without seeing the breakpoint on the source code, <em>(not to mention that this keyword only works in webkit browser, all other major browsers seems to omit this keyword)</em>.</p>\n\n<p>If you fully understand what your code does, than this will be a minor drawback. But if you don't, you will end up adding a <code>debugger;</code> keyword all over the place just to find out what's wrong with your (or my) code. Anyway, there's an alternative, don't forget that javascript can natively manipulate HTML DOM. </p>\n\n<hr>\n\n<p><strong>Workaround.</strong></p>\n\n<blockquote>\n  <p><em>Use javascript (not jQuery) to manipulate HTML DOM</em></p>\n</blockquote>\n\n<p>If you don't want to lose debugging capability, than you can use javascript native HTML DOM manipulation. Consider this example:</p>\n\n<pre><code>var script   = document.createElement(\"script\");\nscript.type  = \"text/javascript\";\nscript.src   = \"path/to/your/javascript.js\";    // use this for linked script\nscript.text  = \"alert('voila!');\"               // use this for inline script\ndocument.body.appendChild(script);\n</code></pre>\n\n<p>There it is, just like the old days isn't it. And don't forget to clean things up whether in the DOM or in the memory for all object that's referenced and not needed anymore to prevent memory leaks. You can consider this code to clean things up:</p>\n\n<pre><code>document.body.removechild(document.body.lastChild);\ndelete UnusedReferencedObjects; // replace UnusedReferencedObject with any object you created in the script you load.\n</code></pre>\n\n<p>The drawback from this workaround is that you may accidentally add a duplicate script, and that's bad. From here you can slightly mimic <code>.append()</code> function by adding an object verification before adding, and removing the script from the DOM right after it was added. Consider this example:</p>\n\n<pre><code>function AddScript(url, object){\n    if (object != null){\n        // add script\n        var script   = document.createElement(\"script\");\n        script.type  = \"text/javascript\";\n        script.src   = \"path/to/your/javascript.js\";\n        document.body.appendChild(script);\n\n        // remove from the dom\n        document.body.removeChild(document.body.lastChild);\n        return true;\n    } else {\n        return false;\n    };\n};\n\nfunction DeleteObject(UnusedReferencedObjects) {\n    delete UnusedReferencedObjects;\n}\n</code></pre>\n\n<p>This way, you can add script with debugging capability while safe from script duplicity. This is just a prototype, you can expand for whatever you want it to be. I have been using this approach and quite satisfied with this. Sure enough I will never use jquery <code>.append()</code> to add a script.</p>\n\n<p>Happy Coding,<br>\nHendra Uzia.</p>\n",
                    "is_accepted": false,
                    "score": 272
                },
                {
                    "body": "<p>Adding the sourceURL in the script file helped as mentioned in this page:\n<a href=\"https://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/\" rel=\"nofollow\">https://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/</a></p>\n\n<ol>\n<li>In the script file, add a statement with sourceURL like \"//@ sourceURL=foo.js\"</li>\n<li>Load the script using jQuery $.getScript() and the script will be available in \"sources\" tab in chrome dev tools</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Your script is executing , you just can't use <code>document.write</code> from it. Use an alert to test it and avoid using <code>document.write</code>. The statements of your js file with <code>document.write</code> will not be executed and the rest of the function will be executed.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this may be helpful: </p>\n\n<pre><code>var fileref=document.createElement('script');\nfileref.setAttribute(\"type\",\"text/javascript\");\nfileref.setAttribute(\"src\",\"scriptAnalytics.js\");\ndocument.getElementsByTagName(\"head\")[0].appendChild(fileref);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Append script to body:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"&lt;script&gt;\", {  src : \"bootstrap.min.js\",  type : \"text/javascript\" }).appendTo(\"body\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Any idea why the piece of code below does not add the script element to the DOM?</p>\n\n<pre><code>var code = \"&lt;script&gt;&lt;/script&gt;\";\n$(\"#someElement\").append(code);\n</code></pre>\n",
            "last_activity_date": 1423047952,
            "question_id": 610995,
            "score": 193,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Can&#39;t append &lt;script&gt; element"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>This is a common Javascript gotcha with a simple solution:</p>\n\n<p>Just <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">specify the base</a>, or 'radix', like so:</p>\n\n<pre><code>parseInt('08',10); // 8\n</code></pre>\n\n<p>You could also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a>:</p>\n\n<pre><code>Number('08'); // 8\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 267
                },
                {
                    "body": "<p>From the <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FFunctions/parseInt\">parseInt documentation</a>, use the optional radix argument to specify base-10:</p>\n\n<pre><code>parseInt('08', 10); //equals 8\nparseInt('09', 10); //equals 9\n</code></pre>\n\n<p>This strikes me as pedantic, confusing, and verbose (really, an extra argument in every single parseInt?) so I'm hoping there is a Better Way.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Specify the base:</p>\n\n<pre><code>var number = parseInt(s, 10);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>function parseDecimal(s) { return parseInt(s, 10); }\n</code></pre>\n\n<p>edit: making your own function, to do what you really want, is just an option if you don't like adding the \",10\" all the time to the parseInt() call. It has the disadvantage of being a nonstandard function: more convenient for you if you use it a lot, but perhaps more confusing for others.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Would it be very naughty to replace parseInt with a version that assumes decimal if it has no second parameter? (note - not tested)</p>\n\n<pre><code>parseIntImpl = parseInt\nparseInt = function(str, base){return parseIntImpl(str, base ? base : 10)}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you <strong>know</strong> your value will be in the signed 32 bit integer range, then <code>~~x</code> will do the correct thing in all scenarios.</p>\n\n<pre><code>~~\"08\" === 8\n~~\"foobar\" === 0\n~~(1.99) === 1\n~~(-1.99)  === -1\n</code></pre>\n\n<p>If you look up binary not (<code>~</code>), the spec requires a \"ToInt32\" conversion for the argument which does the obvious conversion to an Int32 and is specified to coerce <code>NaN</code> values to zero.</p>\n\n<p>Yes, this is incredibly hackish but is so convenient...</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>If you've done a bunch of coding already with parseInt and don't want to add \",10\" to everything, you can just override the function to make base 10 the default:</p>\n\n<pre><code>window._oldParseInt = window.parseInt;\nwindow.parseInt = function(str, rad) {\n    if (! rad) {\n        return _oldParseInt(str, 10);\n    }\n    return _oldParseInt(str, rad);\n};\n</code></pre>\n\n<p>That may confuse a later reader, so making a parseInt10() function might be more self-explanatory. Personally I prefer using a simple function than having to add \",10\" all the time - just creates more opportunity for mistakes.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How about this for decimal:</p>\n\n<pre><code>('09'-0) === 9  // true\n\n('009'-0) === 9 // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>First of all, you really don't need <code>parseInt()</code> in most cases. It's algorithm is full of various quirks, the <code>0</code> prefix is even <a href=\"http://es5.github.com/#E\">forbidden by the specification</a> (\"the specification of the function parseInt no longer allows implementations to treat Strings beginning with a 0 character as octal values.\"), but <a href=\"http://whereswalden.com/2011/02/26/the-proper-way-to-call-parseint-tldr-parseintstr-radix/\">it will take a while to change browser behaviors</a> (even if I'm sure that nobody does use octals intentionally in <code>parseInt()</code>). And Internet Explorer 6 will never change (the Internet Explorer 9 however removed support for octals in <code>parseInt()</code>). The algorithm used by it usually does more than you want from it. In certain cases, it's bad idea.</p>\n\n<ol>\n<li>First argument is converted to string if it isn't already.</li>\n<li>Trim the number, so <code>' 4'</code> becomes <code>'4'</code>.</li>\n<li>Check if string begins with <code>-</code> or <code>+</code> and remove this character. If it was <code>-</code> make output negative.</li>\n<li>Convert radix to integer.</li>\n<li>If radix is <code>0</code> or <code>NaN</code> try to guess radix. It means looking (case-insensitive) for <code>0x</code> and (non-standard) <code>0</code>. If prefix wasn't found, <code>10</code> is used (and this is what you most likely what).</li>\n<li>If radix is <code>16</code> strip <code>0x</code> from the beginning if it exists.</li>\n<li>Find the first character which is not in range of radix.</li>\n<li>If there is nothing before first character which wasn't in range of radix, return <code>NaN</code>.</li>\n<li><p>Convert number to decimal until the first character which is not in range.</p>\n\n<p>For example, <code>parseInt('012z', 27)</code> gives <code>0 * Math.pow(27, 2) + 1 * Math.pow(27, 1) + 2 * Math.pow(27, 0)</code>.</p></li>\n</ol>\n\n<p>The algorithm itself is not really quick, but performance varies (optimizations make wonders). I've put test on <a href=\"http://jsperf.com/performance-of-parseint\">JSPerf</a> and the results are interesting. <code>+</code> and <code>~~</code> are fastest with exception for Chrome where <code>parseFloat()</code> is somehow way faster than other options (2 to 5 times faster than other options, where <code>+</code> is actually 5 times slower). In Firefox, <code>~~</code> test is very fast - in certain cases, I've got <code>Infinity</code> cycles.</p>\n\n<p>The other thing is correctness. <code>parseInt()</code>, <code>~~</code> and <code>parseFloat()</code> make errors silent. In case of <code>parseInt()</code> and <code>parseFloat()</code> characters are ignored after invalid character - you can call it a feature (in most cases it's anti-feature for me, just like <code>switch</code> statements fallthrough) and if you need it, use one of those. In case of <code>~~</code> it means returning <code>0</code>, so be careful.</p>\n\n<p>In certain cases, <code>parseInt()</code> might hurt you. Badly. For example, if number is so big that it is written in exponential notation. Use <code>Math</code> methods then.</p>\n\n<pre><code>parseInt(2e30); // will return 2\n</code></pre>\n\n<p>Anyways, at end I want to make a list when of methods to convert strings to numbers (both integers and floats). They have various usages and you may be interested what method to use. In most cases, the simplest one is <code>+number</code> method, use it if you can. Whatever you do (except for first method), all should give correct result.</p>\n\n<pre><code>parseInt('08', 10); // 8\n+'08';              // 8\n~~'08';             // 8\nparseFloat('08');   // 8\nNumber('08');       // 8\nnew Number('08');   // 8... I meant Object container for 8\nMath.ceil('08');    // 8\n</code></pre>\n\n<h2><code>parseInt(number)</code></h2>\n\n<p>Don't use. Simple as that. Either use <code>parseInt(number, 10)</code> or this workaround which will magically fix <code>parseInt</code> function. Please note that this workaround will not work in JSLint. Please don't complain about it.</p>\n\n<pre><code>(function () {\n    \"use strict\";\n    var oldParseInt = parseInt;\n    // Don't use function parseInt() {}. It will make local variable.\n    parseInt = function (number, radix) {\n        return oldParseInt(number, radix || 10);\n    };\n}());\n</code></pre>\n\n<h2><code>parseInt(number, radix)</code></h2>\n\n<p><code>parseInt</code> converts argument to numbers using mentioned above algorithm. Avoid using it on large integers as it can do incorrect results in cases like <code>parseInt(2e30)</code>. Also, never ever give it as argument to <code>Array.prototype.map</code> or Underscore.js variation of it as you may get weird results (try <code>['1', '2', '3'].map(parseInt)</code> if you want (for explanation, replace <code>parseInt</code> with <code>console.log</code>)).</p>\n\n<p>Use it when either:</p>\n\n<ol>\n<li>When you need to read data written in different radix.</li>\n<li>You need to ignore errors (for example change <code>123px</code> to <code>123</code>)</li>\n</ol>\n\n<p>Otherwise use other more safe methods (if you need integer, use <code>Math.floor</code> instead).</p>\n\n<h2><code>+number</code></h2>\n\n<p><code>+</code> prefix (<code>+number</code>) converts number to float. In case of error it returns <code>NaN</code> which you can compare by either <code>isNaN()</code> or just by <code>number !== number</code> (it should return <code>true</code> only for <code>NaN</code>). It's very fast in Opera.</p>\n\n<p>Use it unless you want specific features of other types.</p>\n\n<h2><code>~~number</code></h2>\n\n<p><code>~~</code> is a hack which uses <code>~</code> two times on the integer. As <code>~</code> bitwise operation can be only done for integers, the number is automatically converted. Most browsers have optimizations for this case. As bitwise operations only work below <code>Math.pow(2, 32)</code> never use this method with big numbers. It's blazingly fast on SpiderMonkey engine.</p>\n\n<p>Use it when either:</p>\n\n<ol>\n<li>You're writing code where performance is important for SpiderMonkey (like FireFox plugins) and you don't need error detection.</li>\n<li>You need integer and care resulting JavaScript size.</li>\n</ol>\n\n<h2><code>parseFloat(number)</code></h2>\n\n<p><code>parseFloat()</code> works like <code>+</code> with the one exception - it processes number until first invalid character instead of returning <code>NaN</code>. It's very fast (but not as fast as <code>~~</code> on Firefox) in V8. Unlike <code>parseInt</code> variation, it should be safe with <code>Array.prototype.map</code>.</p>\n\n<p>Use it when either:</p>\n\n<ol>\n<li>You're writing performance-critical code for Node.js or you're writing Google Chrome plugins (V8).</li>\n<li>You need to ignore errors (for example change <code>42.13px</code> to <code>42.13</code>)</li>\n</ol>\n\n<h2><code>Number(number)</code></h2>\n\n<p>Avoid it. It works just like <code>+</code> prefix and is usually slower. The only usage where it could be useful is callback for <code>Array.prototype.map</code> - you cannot use <code>+</code> as callback.</p>\n\n<h2><code>new Number(number)</code></h2>\n\n<p>Use it when you need to confuse everybody with <code>0</code> being truthy value and having <code>typeof</code> of <code>'number'</code>. Seriously, don't.</p>\n\n<h2>Math methods, like <code>Math.ceil(number)</code></h2>\n\n<p>Use them when you need integer as it's more safe than <code>parseInt()</code> by not ignoring unexpected characters. Please note that technically it involves long conversion - string \u2192 float \u2192 integer \u2192 float (numbers in JavaScript are floats) - but most browser have optimizations for it, so usually it's not that noticeable. It's also safe with <code>Array.prototype.map</code>.</p>\n",
                    "is_accepted": false,
                    "score": 52
                }
            ],
            "body": "<p>Try executing the following in JavaScript:</p>\n\n<pre><code>parseInt('01'); //equals 1\nparseInt('02'); //equals 2\nparseInt('03'); //equals 3\nparseInt('04'); //equals 4\nparseInt('05'); //equals 5\nparseInt('06'); //equals 6\nparseInt('07'); //equals 7\nparseInt('08'); //equals 0 !!\nparseInt('09'); //equals 0 !!\n</code></pre>\n\n<p>I just learned the hard way that JavaScript thinks the leading zero indicates an <a href=\"http://en.wikipedia.org/wiki/Octal\">octal integer</a>, and since there is no \"8\" or \"9\" in base-8, the function returns zero. Like it or not, <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Functions/parseInt\">this is by design</a>.</p>\n\n<p>What are the workarounds?</p>\n\n<p><em>Note: For sake of completeness, I'm about to post a solution, but it's a solution that I hate, so please post other/better answers.</em></p>\n\n<hr>\n\n<p>Update: the 5th Edition of the JavaScript standard (<a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMA-262</a>) introduces a breaking change that eliminates this behavior. Mozilla has a good <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt#ECMAScript_5_Removes_Octal_Interpretation\">write-up</a>. </p>\n",
            "last_activity_date": 1393871186,
            "question_id": 850341,
            "score": 208,
            "tags": [
                "javascript",
                "integer",
                "octal"
            ],
            "title": "How do I work around JavaScript&#39;s parseInt octal behavior?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>The answer to this other question shows you how to do that: <a href=\"http://stackoverflow.com/questions/39960/javascript-locals\">http://stackoverflow.com/questions/39960/javascript-locals</a></p>\n\n<p>Basically, you can say</p>\n\n<pre><code>window[\"foo\"](arg1, arg2);\n</code></pre>\n\n<p>or as many others have suggested, you can just use eval:</p>\n\n<pre><code>eval(fname)(arg1, arg2);\n</code></pre>\n\n<p>although this is extremely unsafe unless you're absolutely sure about what you're eval-ing.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Two things: </p>\n\n<ul>\n<li><p>avoid eval, it's terribly dangerous and slow</p></li>\n<li><p>secondly it doesn't matter where your function exists, \"global\" -ness is irrelevant. <code>x.y.foo()</code> can be enabled through <code>x.y['foo']()</code> or <code>x['y']['foo']()</code> or even <code>window['x']['y']['foo']()</code>. You can chain indefinitely like this.</p></li>\n</ul>\n\n<p>I &lt;3 JS</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Don't use eval unless you <em>absolutely, positively</em> have no other choice.</p>\n\n<p>As has been mentioned, using something like this would be the best way to do it:</p>\n\n<pre><code>window[\"functionName\"](arguments);\n</code></pre>\n\n<p>That, however, will not work with a namespace'd function:</p>\n\n<pre><code>window[\"My.Namespace.functionName\"](arguments); // fail\n</code></pre>\n\n<p>This is how you would do that:</p>\n\n<pre><code>window[\"My\"][\"Namespace\"][\"functionName\"](arguments); // succeeds\n</code></pre>\n\n<p>In order to make that easier and provide some flexibility, here is a convenience function:</p>\n\n<pre><code>function executeFunctionByName(functionName, context /*, args */) {\n  var args = [].slice.call(arguments).splice(2);\n  var namespaces = functionName.split(\".\");\n  var func = namespaces.pop();\n  for(var i = 0; i &lt; namespaces.length; i++) {\n    context = context[namespaces[i]];\n  }\n  return context[func].apply(this, args);\n}\n</code></pre>\n\n<p>You would call it like so:</p>\n\n<pre><code>executeFunctionByName(\"My.Namespace.functionName\", window, arguments);\n</code></pre>\n\n<p>Note, you can pass in whatever context you want, so this would do the same as above:</p>\n\n<pre><code>executeFunctionByName(\"Namespace.functionName\", My, arguments);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 604
                },
                {
                    "body": "<p>Just thought I'd post a slightly altered version of <a href=\"http://stackoverflow.com/questions/359788/javascript-function-name-as-a-string/359910#359910\">Jason Bunting's very helpful function</a>. First, I have simplified the first statement by supplying a second parameter to <em>slice()</em>. The original version was working fine in all browsers except IE. Secondly, I have replaced <em>this</em> with <em>context</em> in the return statement; otherwise, <em>this</em> was always pointing to <em>window</em> when the target function was being executed.</p>\n\n<pre><code>function executeFunctionByName(functionName, context /*, args */) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for (var i = 0; i &lt; namespaces.length; i++) {\n        context = context[namespaces[i]];\n    }\n    return context[func].apply(context, args);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>You just need convert your string to a pointer by <code>window[&lt;method name&gt;]</code>.\nexample:</p>\n\n<pre><code>var function_name = \"string\";\nfunction_name = window[function_name];\n</code></pre>\n\n<p>and now you can use it like a pointer.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>There too some very helpful way.</p>\n\n<p><a href=\"http://devlicio.us/blogs/sergio_pereira/archive/2009/02/09/javascript-5-ways-to-call-a-function.aspx\" rel=\"nofollow\">http://devlicio.us/blogs/sergio_pereira/archive/2009/02/09/javascript-5-ways-to-call-a-function.aspx</a></p>\n\n<pre><code>var arrayMaker = {  \n    someProperty: 'some value here',  \n    make: function (arg1, arg2) {  \n        return [ this, arg1, arg2 ];  \n    },\n    execute: function_name\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>One more detail on Jason and Alex's posts. I found it helpful to add a default value to context. Just put <code>context = context == undefined? window:context;</code> at the beginning of the function. You can change <code>window</code> to whatever your preferred context is, and then you won't need to pass in the same variable each time you call this in your default context.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you want to call a function of an object instead of a global function with <code>window[\"functionName\"]</code>. You can do it like;</p>\n\n<pre><code>var myObject=new Object();\nmyObject[\"functionName\"](arguments);\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var now=new Date();\nnow[\"getFullYear\"]()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Could you not just do this:</p>\n\n<pre><code>var codeToExecute = \"My.Namespace.functionName()\";\nvar tmpFunc = new Function(codeToExecute);\ntmpFunc();\n</code></pre>\n\n<p>You can also execute any other JavaScript using this method.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>All the answers assume that the functions can be accessed through global scope (aka window). However, the OP did not make this assumption.</p>\n\n<p>If the functions live in a local scope (aka closure) and are not referenced by some other local object, bad luck: You have to use <em>eval()</em> AFAIK, see\n<a href=\"http://stackoverflow.com/questions/9464921/dynamically-call-local-function-in-javascript\">dynamically call local function in javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is working for me.</p>\n\n<pre><code>var command = \"Add\";\nvar tempFunction = new Function(\"Arg1\",\"Arg2\", \"window.\" + command + \"(Arg1,Arg2)\");\ntempFunction(x,y);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To add to Jason Bunting's answer, if you're using nodejs or something (and this works in dom js, too), you could use <code>this</code> instead of <code>window</code> (and remember: eval is <strong>evil</strong>:</p>\n\n<pre><code>this['fun'+'ctionName']();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>BE CAREFUL!!!</strong></p>\n\n<p>One should try to avoid calling a function by string in JavaScript for two reasons:</p>\n\n<p>Reason 1: Some code obfuscators will wreck your code as they will change the function names, making the string invalid.</p>\n\n<p>Reason 2: It is much harder to maintain code that uses this methodology as it is much harder to locate usages of the methods called by a string.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Surprised to see no mention of setTimeout.</p>\n\n<p>To run a function without arguments:</p>\n\n<pre><code>var functionWithoutArguments = function(){\n    console.log(\"Executing functionWithoutArguments\");\n}\nsetTimeout(\"functionWithoutArguments()\", 0);\n</code></pre>\n\n<p>To run function with arguments:</p>\n\n<pre><code>var functionWithArguments = function(arg1, arg2) {\n    console.log(\"Executing functionWithArguments\", arg1, arg2);\n}\nsetTimeout(\"functionWithArguments(10, 20)\");\n</code></pre>\n\n<p>To run deeply namespaced function:</p>\n\n<pre><code>var _very = {\n    _deeply: {\n        _defined: {\n            _function: function(num1, num2) {\n                console.log(\"Execution _very _deeply _defined _function : \", num1, num2);\n            }\n        }\n    }\n}\nsetTimeout(\"_very._deeply._defined._function(40,50)\", 0);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have the name of a function in JavaScript as a string. How do I convert that into a function pointer so I can call it later?</p>\n\n<p>Depending on the circumstances, I may need to pass various arguments into the method too.</p>\n\n<p>Some of the functions may take the form of <code>namespace.namespace.function(args[...])</code>.</p>\n",
            "last_activity_date": 1414473224,
            "question_id": 359788,
            "score": 382,
            "tags": [
                "javascript"
            ],
            "title": "How to execute a JavaScript function when I have its name as a string"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>If you're deploying on Windows, the <a href=\"http://msdn.microsoft.com/en-us/library/9bbdkx3k.aspx\">Windows Script Host</a> offers a very useful JScript API to the file system and other local resources.  Incorporating WSH scripts into a local web application may not be as elegant as you might wish, however.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>On Firefox you (the programmer) can do this from within a JavaScript file:</p>\n\n<pre><code>netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserRead\");\nnetscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserWrite\");\n</code></pre>\n\n<p>and you (the browser user) will be prompted to allow access. (for Firefox you just need to do this once every time the browser is started)</p>\n\n<p>If the browser user is someone else, they have to grant permission.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>In general, this is not allowed by design. It's a violation of the sandbox.</p>\n\n<p>Update: it's now possible in current browsers, see answer below.</p>\n\n<p>From <a href=\"http://en.wikipedia.org/wiki/JavaScript#Security\">Wikipedia -> Javascript -> Security</a>:</p>\n\n<blockquote>\n  <p>JavaScript and the DOM provide the\n  potential for malicious authors to\n  deliver scripts to run on a client\n  computer via the web. Browser authors\n  contain this risk using two\n  restrictions. First, scripts run in a\n  sandbox in which they can only perform\n  web-related actions, not\n  general-purpose programming tasks like\n  <strong>creating files</strong>.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>You may want to take a look at the source code of <a href=\"http://trac.tiddlywiki.org/browser/Trunk/core/js/FileSystem.js\" rel=\"nofollow\">tiddlywiki</a> and <a href=\"http://stackoverflow.com/questions/1087246/can-javascript-access-a-filesystem/3405736#3405736\">this SO post</a>.<br>\nIt uses browser specific methods to save its modified instance into the local filesystem. </p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Just an update of the HTML5 features <a href=\"http://www.html5rocks.com/en/tutorials/file/dndfiles/\">http://www.html5rocks.com/en/tutorials/file/dndfiles/</a> This excellent article will explain en detail the local file access in Javascript. Summary from the mentioned article:</p>\n\n<p>The spec provides several interfaces for <a href=\"http://www.html5rocks.com/en/tutorials/file/dndfiles/\">accessing files from a 'local' filesystem</a>:</p>\n\n<ol>\n<li>File - an individual file; provides readonly information such as name, file size, mimetype, and a reference to the file handle. </li>\n<li>FileList - an array-like sequence of File objects. (Think <code>&lt;input type=\"file\" multiple&gt;</code> or dragging a directory of files from the desktop). </li>\n<li>Blob - Allows for slicing a file into byte ranges.</li>\n</ol>\n\n<p>-- Edit --</p>\n\n<p>See  Paul D. Waite's  comment below</p>\n",
                    "is_accepted": false,
                    "score": 109
                },
                {
                    "body": "<p>assuming that any file that a js might need, should be allowed directly by the user, creators of famous browsers do not let javascript access files generally.</p>\n\n<p>main idea of the solution is: the javascript cannot access the file by having it's local URL.\nbut it can use the file by having it's DataURL: so if user browses a file and opens it, js should get the \"DataURL\" directly from HTML instead of getting \"URL\".</p>\n\n<p>Then it turns the DataURL into a file, using readAsDataURL function and FileReader object. \nsource and a more complete guide with a nice example:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader?redirectlocale=en-US&amp;redirectslug=DOM%2FFileReader\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/FileReader?redirectlocale=en-US&amp;redirectslug=DOM%2FFileReader</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you need access to the entire file system on the client, read/write files, watch folders for changes, start applications, encrypt or sign documents, etc. please have a look at JSFS.</p>\n\n<p>It allows secure and unlimited access from your web page to computer resources on the client without using a browser plugin technology like AcitveX or Java Applet. However, a peace of software has to be installed too.</p>\n\n<p>In order to work with JSFS you should have basic knowledge in Java and Java EE development (Servlets).</p>\n\n<p>Please find JSFS here: <a href=\"https://github.com/jsfsproject/jsfs\" rel=\"nofollow\">https://github.com/jsfsproject/jsfs</a>. It's free and licensed under GPL</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://fsojs.com/\" rel=\"nofollow\">FSO.js</a> wraps the new HTML5 FileSystem API that's being standardized by the W3C and provides an <em>extremely easy</em> way to read from, write to, or traverse a local sandboxed FileSystem. It's asynchronous so file IO will not interfere with user experience. :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Node-Webkit allows you to create desktop applications using Javascript without all the security restrictions usually placed on the browser. So you can run executables with a function, or create/edit/read/write/delete files. You can access the hardware, such as current CPU usage or total ram in use, etc.</p>\n\n<p>You can create a windows, linux, or mac desktop application with it that doesn't require any installation.</p>\n\n<ul>\n<li><a href=\"https://github.com/rogerwang/node-webkit\" rel=\"nofollow\">https://github.com/rogerwang/node-webkit</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there any local file manipulation that's been done with JavaScript? I'm looking for a solution that can be accomplished with no install footprint like requiring AIR.</p>\n\n<p>Specifically, I'd like to read the contents from a file and write those contents to another file. At this point I'm not worried about gaining permissions, just assuming I already have full permissions to these files.</p>\n",
            "last_activity_date": 1417403666,
            "question_id": 371875,
            "score": 67,
            "tags": [
                "javascript",
                "file-access"
            ],
            "title": "Local file access with javascript"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>The approach you suggest is not guaranteed to give you the result you're looking for - what if you had a <code>tbody</code> for example:</p>\n\n<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>You would end up with the following:</p>\n\n<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tr&gt;...&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>I would therefore recommend this approach instead:</p>\n\n<pre><code>$('#myTable tr:last').after('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n\n<p>You can include anything within the <code>after()</code> method as long as it's valid HTML, including multiple rows as per the example above.</p>\n\n<p><strong>Update:</strong> Revisiting this answer following recent activity with this question. eyelidlessness makes a good comment that there will always be a <code>tbody</code> in the DOM; this is true, but only if there is at least one row. If you have no rows, there will be no <code>tbody</code> unless you have specified one yourself.</p>\n\n<p>DaRKoN_ <a href=\"http://stackoverflow.com/questions/171027/jquery-add-table-row/468240#468240\">suggests</a> appending to the <code>tbody</code> rather than adding content after the last <code>tr</code>. This gets around the issue of having no rows, but still isn't bulletproof as you could theoretically have multiple <code>tbody</code> elements and the row would get added to each of them.</p>\n\n<p>Weighing everything up, I'm not sure there is a single one-line solution that accounts for every single possible scenario. You will need to make sure the jQuery code tallies with your markup.</p>\n\n<p>I think the safest solution is probably to ensure your <code>table</code> always includes at least one <code>tbody</code> in your markup, even if it has no rows. On this basis, you can use the following which will work however many rows you have (and also account for multiple <code>tbody</code> elements):</p>\n\n<pre><code>$('#myTable &gt; tbody:last').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1095
                },
                {
                    "body": "<p>What if you had a <code>&lt;tbody&gt;</code> and a <code>&lt;tfoot&gt;</code>? such as:</p>\n\n<pre><code>&lt;table&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td&gt;Foo&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;tfoot&gt;\n        &lt;tr&gt;&lt;td&gt;footer information&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>Then it would insert your new row in the footer - not to the body.</p>\n\n<p>Hence the best solution is to include a <code>&lt;tbody&gt;</code> tag and use .append, rather than .after.</p>\n\n<pre><code>$(\"#myTable &gt; tbody\").append(\"&lt;tr&gt;&lt;td&gt;row content&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 80
                },
                {
                    "body": "<p>You can use this great <a href=\"http://jquery-howto.blogspot.com/2009/02/add-table-row-using-jquery-and.html\">jQuery add table row</a> function. It works great with tables that have <code>&lt;tbody&gt;</code> and that don't. Also it takes into the consideration the colspan of your last table row.</p>\n\n<p>Here is an example usage:</p>\n\n<pre><code>// One table\naddTableRow($('#myTable'));\n// add table row to number of tables\naddTableRow($('.myTables'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>jQuery has a built-in facility to manipulate DOM elements on the fly.</p>\n\n<p><strong>You can add anything to your table like this:</strong></p>\n\n<pre><code>$(\"#tableID\").find('tbody')\n    .append($('&lt;tr&gt;')\n        .append($('&lt;td&gt;')\n            .append($('&lt;img&gt;')\n                .attr('src', 'img.png')\n                .text('Image cell')\n            )\n        )\n    );\n</code></pre>\n\n<p>The <code>$('&lt;some-tag&gt;')</code> thing in jQuery is a tag object that can have several <code>attr</code> attributes that can be set and get, as well as <code>text</code>, which represents the text between the tag here: <code>&lt;tag&gt;text&lt;/tag&gt;</code>.</p>\n\n<p><em>This is some pretty weird indenting, but it's easier for you to see what's going on in this example.</em></p>\n",
                    "is_accepted": false,
                    "score": 341
                },
                {
                    "body": "<p>I was having some related issues, trying to insert a table row after the clicked row. All is fine except the .after() call does not work for the last row.</p>\n\n<pre><code>$('#traffic tbody').find('tr.trafficBody).filter(':nth-child(' + (column + 1) + ')').after(insertedhtml);\n</code></pre>\n\n<p>I landed up with a very untidy solution:</p>\n\n<p>create the table as follows (id for each row):</p>\n\n<pre><code>&lt;tr id=\"row1\"&gt; ... &lt;/tr&gt;\n&lt;tr id=\"row2\"&gt; ... &lt;/tr&gt;\n&lt;tr id=\"row3\"&gt; ... &lt;/tr&gt;\n</code></pre>\n\n<p>etc ...</p>\n\n<p>and then :</p>\n\n<pre><code>$('#traffic tbody').find('tr.trafficBody' + idx).after(html);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This can be done easily using the \"last()\" function of jQuery.</p>\n\n<pre><code>$(\"#tableId\").last().append(\"&lt;tr&gt;&lt;td&gt;New row&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I recommend</p>\n\n<pre><code>$('#myTable &gt; tbody:first').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;'); \n</code></pre>\n\n<p>as opposed to </p>\n\n<pre><code>$('#myTable &gt; tbody:last').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;'); \n</code></pre>\n\n<p>The <code>first</code> and <code>last</code> keywords work on the first or last tag to be started, not closed. Therefore, this plays nicer with nested tables, if you don't want the nested table to be changed, but instead add to the overall table. At least, this is what I found.</p>\n\n<pre><code>&lt;table id=myTable&gt;\n  &lt;tbody id=first&gt;\n    &lt;tr&gt;&lt;td&gt;\n      &lt;table id=myNestedTable&gt;\n        &lt;tbody id=last&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I'm using this way when there is not any row in the table, as well as, each row is quite complicated.</p>\n\n<p>style.css:</p>\n\n<pre><code>...\n#templateRow {\n  display:none;\n}\n...\n</code></pre>\n\n<p>xxx.html</p>\n\n<pre><code>...\n&lt;tr id=\"templateRow\"&gt; ... &lt;/tr&gt;\n...\n\n$(\"#templateRow\").clone().removeAttr(\"id\").appendTo( $(\"#templateRow\").parent() );\n\n...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>For the best solution posted here, if there's a nested table on the last row, the new row will be added to the nested table instead of the main table. A quick solution (considering tables with/without tbody and tables with nested tables):</p>\n\n<pre><code>function add_new_row(table,rowcontent){\n        if ($(table).length&gt;0){\n            if ($(table+' &gt; tbody').length==0) $(table).append('&lt;tbody /&gt;');\n            ($(table+' &gt; tr').length&gt;0)?$(table).children('tbody:last').children('tr:last').append(rowcontent):$(table).children('tbody:last').append(rowcontent);\n        }\n    }\n</code></pre>\n\n<p>Usage example:</p>\n\n<pre><code>add_new_row('#myTable','&lt;tr&gt;&lt;td&gt;my new row&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I found this <a href=\"http://www.examplet.buss.hk/jquery/table.addrow.php\" rel=\"nofollow\">AddRow plugin</a> quite useful for managing table rows. Though, Luke's <a href=\"http://stackoverflow.com/a/171049/288671\">solution</a> would be the best fit if you just need to add a new row.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>My solution:</p>\n\n<pre><code>//Adds a new table row\n$.fn.addNewRow = function (rowId) {\n    $(this).find('tbody').append('&lt;tr id=\"' + rowId + '\"&gt; &lt;/tr&gt;');\n};\n</code></pre>\n\n<p><strong>usage:</strong></p>\n\n<pre><code>$('#Table').addNewRow(id1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "\n\n<pre><code>&lt;table id=myTable&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;style=\"height=0px;\" tfoot&gt;&lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>\n\n\n\n<p>You can cache the footer variable and reduce access to DOM (Note: may be it will be better to use a fake row instead of footer).</p>\n\n<pre><code>   var footer = $(\"#mytable tfoot\")\n   footer.before(\"&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p>will add a new row to the <strong>first</strong> <code>TBODY</code> of the table, without depending of any <code>THEAD</code> or <code>TFOOT</code> present.\n(I didn't find information from which version of jQuery <code>.append()</code> this behavior is present.)</p>\n\n<p>You may try it in these examples:</p>\n\n<pre><code>&lt;table class=\"t\"&gt; &lt;!-- table with THEAD, TBODY and TFOOT --&gt;\n&lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;h1&lt;/th&gt;&lt;th&gt;h2&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tfoot&gt;\n  &lt;tr&gt;&lt;th&gt;f1&lt;/th&gt;&lt;th&gt;f2&lt;/th&gt;&lt;/tr&gt;\n&lt;/tfoot&gt;\n&lt;/table&gt;&lt;br&gt;\n\n&lt;table class=\"t\"&gt; &lt;!-- table with two TBODYs --&gt;\n&lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;h1&lt;/th&gt;&lt;th&gt;h2&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tfoot&gt;\n  &lt;tr&gt;&lt;th&gt;f1&lt;/th&gt;&lt;th&gt;f2&lt;/th&gt;&lt;/tr&gt;\n&lt;/tfoot&gt;\n&lt;/table&gt;&lt;br&gt;\n\n&lt;table class=\"t\"&gt;  &lt;!-- table without TBODY --&gt;\n&lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;h1&lt;/th&gt;&lt;th&gt;h2&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;/table&gt;&lt;br&gt;\n\n&lt;table class=\"t\"&gt;  &lt;!-- table with TR not in TBODY  --&gt;\n  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;br&gt;\n&lt;table class=\"t\"&gt;\n&lt;/table&gt;\n\n&lt;script&gt;\n$('.t').append('&lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;a&lt;/td&gt;&lt;/tr&gt;');\n&lt;/script&gt;\n</code></pre>\n\n<p>In which example <code>a b</code> row is inserted after <code>1 2</code>, not after <code>3 4</code> in second example. If the table were empty, jQuery creates <code>TBODY</code> for a new row.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I know you have asked for a jQuery method. I looked a lot and find that we can do it in a better way than using JavaScript directly by the following function.</p>\n\n<pre><code>tableObject.insertRow(index)\n</code></pre>\n\n<p><code>index</code> is an integer that specifies the position of the row to insert (starts at 0). The value of -1 can also be used; which result in that the new row will be inserted at the last position.</p>\n\n<p>This parameter is required in Firefox and <a href=\"http://en.wikipedia.org/wiki/Opera_%28web_browser%29\">Opera</a>, but it is optional in Internet Explorer, <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Chrome</a> and <a href=\"http://en.wikipedia.org/wiki/Safari_%28web_browser%29\">Safari</a>.</p>\n\n<p>If this parameter is omitted, <code>insertRow()</code> inserts a new row at the last position in Internet&nbsp;Explorer and at the first position in Chrome and Safari.</p>\n\n<p><strong>It will work for every acceptable structure of HTML table.</strong></p>\n\n<p>The following example will insert a row in last (-1 is used as index):</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\"&gt;\n        function displayResult()\n        {\n            document.getElementById(\"myTable\").insertRow(-1).innerHTML = '&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;';\n        }\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;       \n        &lt;table id=\"myTable\" border=\"1\"&gt;\n            &lt;tr&gt;\n                &lt;td&gt;cell 1&lt;/td&gt;\n                &lt;td&gt;cell 2&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;cell 3&lt;/td&gt;\n                &lt;td&gt;cell 4&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n        &lt;br /&gt;\n        &lt;button type=\"button\" onclick=\"displayResult()\"&gt;Insert new row&lt;/button&gt;            \n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>So things have changed ever since <a href=\"http://stackoverflow.com/a/171049/362006\">@Luke Bennett</a> answered this question. Here is an update.</p>\n\n<p>jQuery since version 1.4(?) automatically detects if the element you are trying to insert (using any of the <code>append</code>, <code>prepend</code>, <code>before</code> or <code>after</code> methods) is a <code>&lt;tr&gt;</code> and inserts it into the first <code>&lt;tbody&gt;</code> in your table or wraps it into a new <code>&lt;tbody&gt;</code> if one doesn't exist. </p>\n\n<p>So yes your example code is acceptable and will work fine with jQuery 1.4+. ;)</p>\n\n<p><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');</code></p>\n",
                    "is_accepted": false,
                    "score": 125
                },
                {
                    "body": "<p>Here is some hacketi hack code. I wanted to maintain a row template in an <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"nofollow\">HTML</a> page. Table rows 0...n are rendered at request time, and this example has one hardcoded row and a simplified template row. The template table is hidden, and the row tag must be within a valid table or browsers may drop it from the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow\">DOM</a> tree. Adding a row uses counter+1 identifier, and the current value is maintained in the data attribute. It guarantees each row gets unique <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a> parameters.</p>\n\n<p>I have run tests on Internet&nbsp;Explorer&nbsp;8, Internet&nbsp;Explorer&nbsp;9, Firefox, Chrome, Opera, <a href=\"http://en.wikipedia.org/wiki/Nokia_Lumia_800\" rel=\"nofollow\">Nokia Lumia 800</a>, <a href=\"http://en.wikipedia.org/wiki/Nokia_C7-00\" rel=\"nofollow\">Nokia C7</a> (with <a href=\"http://en.wikipedia.org/wiki/Symbian\" rel=\"nofollow\">Symbian</a> 3), Android stock and Firefox beta browsers.</p>\n\n<pre><code>&lt;table id=\"properties\"&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Name&lt;/th&gt;\n    &lt;th&gt;Value&lt;/th&gt;\n    &lt;th&gt;&amp;nbsp;&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td nowrap&gt;key1&lt;/td&gt;\n    &lt;td&gt;&lt;input type=\"text\" name=\"property_key1\" value=\"value1\" size=\"70\"/&gt;&lt;/td&gt;\n    &lt;td class=\"data_item_options\"&gt;\n       &lt;a class=\"buttonicon\" href=\"javascript:deleteRow()\" title=\"Delete row\" onClick=\"deleteRow(this); return false;\"&gt;&lt;/a&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;table id=\"properties_rowtemplate\" style=\"display:none\" data-counter=\"0\"&gt;\n&lt;tr&gt;\n &lt;td&gt;&lt;input type=\"text\" name=\"newproperty_name_\\${counter}\" value=\"\" size=\"35\"/&gt;&lt;/td&gt;\n &lt;td&gt;&lt;input type=\"text\" name=\"newproperty_value_\\${counter}\" value=\"\" size=\"70\"/&gt;&lt;/td&gt;\n &lt;td&gt;&lt;a class=\"buttonicon\" href=\"javascript:deleteRow()\" title=\"Delete row\" onClick=\"deleteRow(this); return false;\"&gt;&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;a class=\"action\" href=\"javascript:addRow()\" onclick=\"addRow('properties'); return false\" title=\"Add new row\"&gt;Add row&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n\n- - - - \n// add row to html table, read html from row template\nfunction addRow(sTableId) {\n    // find destination and template tables, find first &lt;tr&gt;\n    // in template. Wrap inner html around &lt;tr&gt; tags.\n    // Keep track of counter to give unique field names.\n    var table  = $(\"#\"+sTableId);\n    var template = $(\"#\"+sTableId+\"_rowtemplate\");\n    var htmlCode = \"&lt;tr&gt;\"+template.find(\"tr:first\").html()+\"&lt;/tr&gt;\";\n    var id = parseInt(template.data(\"counter\"),10)+1;\n    template.data(\"counter\", id);\n    htmlCode = htmlCode.replace(/\\${counter}/g, id);\n    table.find(\"tbody:last\").append(htmlCode);\n}\n\n// delete &lt;TR&gt; row, childElem is any element inside row\nfunction deleteRow(childElem) {\n    var row = $(childElem).closest(\"tr\"); // find &lt;tr&gt; parent\n    row.remove();\n}\n</code></pre>\n\n<p>PS: I give all credits to the jQuery team; they deserve everything. JavaScript programming without jQuery - I don't even want think about that nightmare.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As i have also got a way too add row at last or any specific place so i think i should also share this:</p>\n\n<p>First find out the length or rows:</p>\n\n<pre><code>var r=$(\"#content_table\").length;\n</code></pre>\n\n<p>and then use below code to add your row:</p>\n\n<pre><code>$(\"#table_id\").eq(r-1).after(row_html);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To add a good example on the topic, here is working solution if you need to add a row at specific position. </p>\n\n<p>The extra row is added after the 5th row, or at the end of the table if there are less then 5 rows.</p>\n\n<pre><code>var ninja_row = $('#banner_holder').find('tr');\n\nif( $('#my_table tbody tr').length &gt; 5){\n    $('#my_table tbody tr').filter(':nth-child(5)').after(ninja_row);\n}else{\n    $('#my_table tr:last').after(ninja_row);\n}\n</code></pre>\n\n<p>I put the content on a ready (hidden) container below the table ..so if you(or the designer) have to change it is not required to edit the JS.</p>\n\n<pre><code>&lt;table id=\"banner_holder\" style=\"display:none;\"&gt; \n    &lt;tr&gt;\n        &lt;td colspan=\"3\"&gt;\n            &lt;div class=\"wide-banner\"&gt;&lt;/div&gt;\n        &lt;/td&gt;   \n    &lt;/tr&gt; \n&lt;/table&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you are using Datatable JQuery plugin you can try.</p>\n\n<pre><code>oTable = $('#tblStateFeesSetup').dataTable({\n            \"bScrollCollapse\": true,\n            \"bJQueryUI\": true,\n            ...\n            ...\n            //Custom Initializations.\n            });\n\n//Data Row Template of the table.\nvar dataRowTemplate = {};\ndataRowTemplate.InvoiceID = '';\ndataRowTemplate.InvoiceDate = '';\ndataRowTemplate.IsOverRide = false;\ndataRowTemplate.AmountOfInvoice = '';\ndataRowTemplate.DateReceived = '';\ndataRowTemplate.AmountReceived = '';\ndataRowTemplate.CheckNumber = '';\n\n//Add dataRow to the table.\noTable.fnAddData(dataRowTemplate);\n</code></pre>\n\n<p>Refer Datatables fnAddData <a href=\"http://datatables.net/api\" rel=\"nofollow\">Datatables API</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>&lt;tr id=\"tablerow\"&gt;&lt;/tr&gt;\n\n$('#tablerow').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I Guess i have done in my project , here it is:</p>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;div class=\"container\"&gt;\n&lt;div class = \"row\"&gt;\n&lt;div class = \"span9\"&gt;\n    &lt;div class = \"well\"&gt;\n      &lt;%= form_for (@replication) do |f| %&gt;\n&lt;table&gt;\n&lt;tr&gt;\n  &lt;td&gt;\n      &lt;%= f.label :SR_NO %&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n      &lt;%= f.text_field :sr_no , :id =&gt; \"txt_RegionName\" %&gt;\n  &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n  &lt;td&gt;\n    &lt;%= f.label :Particular %&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;%= f.text_area :particular , :id =&gt; \"txt_Region\" %&gt;\n  &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n  &lt;td&gt;\n    &lt;%= f.label :Unit %&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;%= f.text_field :unit ,:id =&gt; \"txt_Regio\" %&gt;\n  &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n\n  &lt;td&gt; \n    &lt;%= f.label :Required_Quantity %&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;%= f.text_field :quantity ,:id =&gt; \"txt_Regi\" %&gt;\n  &lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;\n&lt;table&gt;\n&lt;tr&gt;&lt;td&gt;\n&lt;input type=\"button\"  name=\"add\" id=\"btn_AddToList\" value=\"add\" class=\"btn btn-primary\" /&gt;\n&lt;/td&gt;&lt;td&gt;&lt;input type=\"button\"  name=\"Done\" id=\"btn_AddToList1\" value=\"Done\" class=\"btn btn-success\" /&gt;\n&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;% end %&gt;\n&lt;table id=\"lst_Regions\" style=\"width: 500px;\" border= \"2\" class=\"table table-striped table-bordered table-condensed\"&gt;\n&lt;tr&gt;\n&lt;td&gt;SR_NO&lt;/td&gt;\n&lt;td&gt;Item Name&lt;/td&gt;\n&lt;td&gt;Particular&lt;/td&gt;\n&lt;td&gt;Cost&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;input type=\"button\" id= \"submit\" value=\"Submit Repication\"  class=\"btn btn-success\" /&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>js</strong></p>\n\n<pre><code>$(document).ready(function() {     \n$('#submit').prop('disabled', true);\n$('#btn_AddToList').click(function () {\n $('#submit').prop('disabled', true);\nvar val = $('#txt_RegionName').val();\nvar val2 = $('#txt_Region').val();\nvar val3 = $('#txt_Regio').val();\nvar val4 = $('#txt_Regi').val();\n$('#lst_Regions').append('&lt;tr&gt;&lt;td&gt;' + val + '&lt;/td&gt;' + '&lt;td&gt;' + val2 + '&lt;/td&gt;' + '&lt;td&gt;' + val3 + '&lt;/td&gt;' + '&lt;td&gt;' + val4 + '&lt;/td&gt;&lt;/tr&gt;');\n$('#txt_RegionName').val('').focus();\n$('#txt_Region').val('');\n    $('#txt_Regio').val('');\n    $('#txt_Regi').val('');\n$('#btn_AddToList1').click(function () {\n     $('#submit').prop('disabled', false).addclass('btn btn-warning');\n});\n  });\n</code></pre>\n\n<p>});</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/a/1278557/604004\">Neil's answer</a> is by far the best one. However things get messy really fast. My suggestion would be to use variables to store elements and append them to the DOM hierarchy.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;table id=\"tableID\"&gt;\n    &lt;tbody&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p><strong>JAVASCRIPT</strong></p>\n\n<pre><code>// Reference to the table body\nvar body = $(\"#tableID\").find('tbody');\n\n// Create a new row element\nvar row = $('&lt;tr&gt;');\n\n// Create a new column element\nvar column = $('&lt;td&gt;');\n\n// Create a new image element\nvar image = $('&lt;img&gt;');\nimage.attr('src', 'img.png');\nimage.text('Image cell');\n\n// Append the image to the column element\ncolumn.append(image);\n// Append the column to the row element\nrow.append(column);\n// Append the row to the table body\nbody.append(row);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In my opinion the fastest and clear way is</p>\n\n<pre><code>//Try to get tbody first with jquery children. works faster!\nvar tbody = $('#myTable').children('tbody');\n\n//Then if no tbody just select your table \nvar table = tbody.length ? tbody : $('#myTable');\n\n//Add row\ntable.append('&lt;tr&gt;&lt;td&gt;hello&gt;&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/zwmpN/\" rel=\"nofollow\">http://jsfiddle.net/zwmpN/</a></p>\n\n<p><br /><br />\nAlso I can recommend a small function to make more html changes</p>\n\n<pre><code>//Compose template string\nString.prototype.compose = (function (){\nvar re = /\\{{(.+?)\\}}/g;\nreturn function (o){\n        return this.replace(re, function (_, k){\n            return typeof o[k] != 'undefined' ? o[k] : '';\n        });\n    }\n}());\n</code></pre>\n\n<p>If you use my string composer you can do this like</p>\n\n<pre><code>var tbody = $('#myTable').children('tbody');\nvar table = tbody.length ? tbody : $('#myTable');\nvar row = '&lt;tr&gt;'+\n    '&lt;td&gt;{{id}}&lt;/td&gt;'+\n    '&lt;td&gt;{{name}}&lt;/td&gt;'+\n    '&lt;td&gt;{{phone}}&lt;/td&gt;'+\n'&lt;/tr&gt;';\n\n\n//Add row\ntable.append(row.compose({\n    'id': 3,\n    'name': 'Lee',\n    'phone': '123 456 789'\n}));\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/w2YmD/\" rel=\"nofollow\">http://jsfiddle.net/w2YmD/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>What is the best method in jQuery to add an additional row to a table as the last row?</p>\n\n<p><strong>Update</strong></p>\n\n<p>Is this acceptable:</p>\n\n<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p>Are there limitations to what you can add to a table like this (such as inputs, selects, number of rows)?</p>\n",
            "last_activity_date": 1424128075,
            "question_id": 171027,
            "score": 1150,
            "tags": [
                "javascript",
                "jquery",
                "table",
                "html-table"
            ],
            "title": "Add table row in jQuery"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>You cannot do that in all browsers, supposedly IE <em>does</em> allow it, but Mozilla and Opera do not. </p>\n\n<p>When you compose a message in GMail, the 'attach files' feature is implemented one way for IE and any browser that supports this, and then implemented another way for Firefox and those browsers that do not.</p>\n\n<p>I don't know why you cannot do it, but one thing that <em>is</em> a security risk, and which you are not allowed to do in any browser, is programmatically set the file name on the HTML File element.</p>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<p>There are ways to redirect events to the control but don't expect to be able to easily fire events to the fire control yourself as the browsers will try to block that for (good) security reasons. </p>\n\n<p>If you only need the file dialog to show up when a user clicks something, let's say because you want better looking file upload buttons, then you might want to take a look at <a href=\"http://www.shauninman.com/archive/2007/09/10/styling_file_inputs_with_css_and_the_dom\" rel=\"nofollow\">what Shaun Inman came up with</a>.</p>\n\n<p>I've been able to achieve keyboard triggering with creative shifting of focus in and out of the control between keydown, keypress &amp; keyup events. YMMV.</p>\n\n<p>My sincere advice is to leave this the alone, because this is a world of browser-incompatibility-pain. Minor browser updates may also block tricks without warning and you may have to keep reinventing hacks to keep it working.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I was researching this a while ago because I wanted to create a custom button that would open the file dialog and start the upload immediately. I just noticed something that might make this possible - firefox seems to open the dialog when you click anywhere on the upload. So the following might do it:</p>\n\n<ol>\n<li>Create a file upload and a separate element containing an image that you want to use as the button</li>\n<li>Arrange them to overlap and make the file element backgroud and border transparent so the button is the only thing visible</li>\n<li>Add the javascript to make IE open the dialog when the button/file input is clicked</li>\n<li>Use an onchange event to submit the form when a file is selected</li>\n</ol>\n\n<p>This is only theoretical since I already used another method to solve the problem but it just might work.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have been searching for solution to this whole day. And these are the conclusions that I have made:</p>\n\n<ol>\n<li>For the security reasons Opera and Firefox don't allow to trigger file input.</li>\n<li>The only convenient alternative is to create a \"hidden\" file input (using opacity, not \"hidden\" or \"display: none\"!) and afterwards create the button \"bellow\" it. In this way the button is seen but on user click it actually activates the file input.</li>\n</ol>\n\n<p>Hope this helps! :)</p>\n\n<pre><code>&lt;div style=\"display: block; width: 100px; height: 20px; overflow: hidden;\"&gt;\n&lt;button style=\"width: 110px; height: 30px; position: relative; top: -5px; left: -5px;\"&gt;&lt;a href=\"javascript: void(0)\"&gt;Upload File&lt;/a&gt;&lt;/button&gt;\n&lt;input type=\"file\" id=\"upload_input\" name=\"upload\" style=\"font-size: 50px; width: 120px; opacity: 0; filter:alpha(opacity: 0);  position: relative; top: -40px;; left: -20px\" /&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 192
                },
                {
                    "body": "<p>For those who understand that you have to overlay an invisible form over the link, but are too lazy to write, I wrote it for you. Well, for me, but might as well share. Comments are welcome.</p>\n\n<p>HTML (Somewhere):</p>\n\n<pre><code>&lt;a id=\"fileLink\" href=\"javascript:fileBrowse();\" onmouseover=\"fileMove();\"&gt;File Browse&lt;/a&gt;\n</code></pre>\n\n<p>HTML (Somewhere you don't care about):</p>\n\n<pre><code>&lt;div id=\"uploadForm\" style=\"filter:alpha(opacity=0); opacity: 0.0; width: 300px; cursor: pointer;\"&gt;\n    &lt;form method=\"POST\" enctype=\"multipart/form-data\"&gt;\n        &lt;input type=\"file\" name=\"file\" /&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>function pageY(el) {\n    var ot = 0;\n    while (el &amp;&amp; el.offsetParent != el) {\n        ot += el.offsetTop ? el.offsetTop : 0;\n        el = el.offsetParent;\n    }\n    return ot;\n}\n\nfunction pageX(el) {\n    var ol = 0;\n    while (el &amp;&amp; el.offsetParent != el) {\n        ol += el.offsetLeft ? el.offsetLeft : 0;\n        el = el.offsetParent;\n    }\n    return ol;\n}\n\nfunction fileMove() {\n    if (navigator.appName == \"Microsoft Internet Explorer\") {\n        return; // Don't need to do this in IE. \n    }\n    var link = document.getElementById(\"fileLink\");\n    var form = document.getElementById(\"uploadForm\");\n    var x = pageX(link);\n    var y = pageY(link);\n    form.style.position = 'absolute';\n    form.style.left = x + 'px';\n    form.style.top = y + 'px';\n}\n\nfunction fileBrowse() {\n    // This works in IE only. Doesn't do jack in FF. :( \n    var browseField = document.getElementById(\"uploadForm\").file;\n    browseField.click();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Try this solution: <a href=\"http://code.google.com/p/upload-at-click/\">http://code.google.com/p/upload-at-click/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This will now be possible in Firefox 4, with the caveat that it counts as a pop-up window and will therefore be blocked whenever a pop-up window would have been.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can fire click() on any browser but some browsers need the element to be visible and focused. Here's a jQuery example:</p>\n\n<pre><code>$('#input_element').show();\n$('#input_element').focus();\n$('#input_element').click();\n$('#input_element').hide();\n</code></pre>\n\n<p>It works with the hide before the <code>click()</code> but I don't know if it works without calling the show method. Never tried this on Opera, I tested on IE/FF/Safari/Chrome and it works. I hope this will help.</p>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>This code works for me. Is this what you are trying to do?</p>\n\n<pre><code>&lt;input type=\"file\" style=\"position:absolute;left:-999px;\" id=\"fileinput\" /&gt;\n&lt;button  id=\"addfiles\" &gt;Add files&lt;/button&gt;\n\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n   $(\"#addfiles\").click(function(){\n      $(\"#fileinput\").click();\n   });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is solution that work for me:\n<strong>CSS:</strong></p>\n\n<pre><code>#uploadtruefield {\n    left: 225px;\n    opacity: 0;\n    position: absolute;\n    right: 0;\n    top: 266px;\n    opacity:0;\n    -moz-opacity:0;\n    filter:alpha(opacity:0);\n    width: 270px;\n    z-index: 2;\n}\n\n.uploadmask {\n    background:url(../img/browse.gif) no-repeat 100% 50%;\n}\n#uploadmaskfield{\n    width:132px;\n}\n</code></pre>\n\n<p><strong>HTML with \"small\" JQuery help:</strong></p>\n\n<pre><code>&lt;div class=\"uploadmask\"&gt;\n    &lt;input id=\"uploadmaskfield\" type=\"text\" name=\"uploadmaskfield\"&gt;\n&lt;/div&gt;\n&lt;input id=\"uploadtruefield\"  type=\"file\" onchange=\"$('#uploadmaskfield').val(this.value)\" &gt;\n</code></pre>\n\n<p><em>Just be sure that maskfied is covered compeltly by true upload field.</em></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had a <code>&lt;input type=\"button\"&gt;</code> tag hidden from view. What I did was attaching the <code>\"onClick\"</code> event to any visible component of any type such as a label. This was done using either Google Chrome's Developer Tools or Mozilla Firefox's Firebug using the right-click \"edit HTML\" command. In this event specify the following script or something similar:</p>\n\n<p>If you have JQuery:</p>\n\n<pre><code>$('#id_of_component').click();\n</code></pre>\n\n<p>if not:</p>\n\n<pre><code>document.getElementById('id_of_component').click();\n</code></pre>\n\n<p>Thanks.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you want the <code>click</code> method to work on Chrome, Firefox, etc, apply the following style to your input file. It will be perfectly hidden, it's like you do a <code>display: none;</code></p>\n\n<pre><code>#fileInput {\n    visibility: hidden;\n    position: absolute;\n    top: 0;\n    left: -5000px;\n}\n</code></pre>\n\n<p>It's that simple, I tested it works!</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>THIS IS POSSIBLE:\nUnder FF4+, Opera ?, Chrome:\nbut:</p>\n\n<ol>\n<li><p><code>inputElement.click()</code> should be called from user action context! (not script execution context)</p></li>\n<li><p><code>&lt;input type=\"file\" /&gt;</code> should be visible (<code>inputElement.style.display !== 'none'</code>) (you can hide it with visibility or something other, but not \"display\" property)</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>My solution for Safari with jQuery and jQuery-ui:</p>\n\n<pre><code>$(\"&lt;input type='file' class='ui-helper-hidden-accessible' /&gt;\").appendTo(\"body\").focus().trigger('click');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>$(document).one('mousemove', function() { $(element).trigger('click') } );\n</code></pre>\n\n<p>Worked for me when I ran into similar problem, it's a regular eRube Goldberg.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<blockquote>\n  <p><em><strong>WORKING SOLUTION</em></strong></p>\n</blockquote>\n\n<p>Let me add to this old post, a working solution I used to use that works in probably 80% or more of all browsers both new and old.</p>\n\n<p>The solution is complex yet simple.  The first step is to make use of CSS and guise the input file type with \"under-elements\" that show through as it has an opacity of 0. The next step is to use JavaScript to update its label as needed.</p>\n\n<blockquote>\n  <p><strong>HTML</strong> <sub><em>The ID's are simply inserted if you wanted a quick way to access a specific element, the classes however, are a must as they relate to the CSS that sets this whole process up</em></sub></p>\n</blockquote>\n\n<pre><code>&lt;div class=\"file-input wrapper\"&gt;\n    &lt;input id=\"inpFile0\" type=\"file\" class=\"file-input control\" /&gt;\n    &lt;div class=\"file-input content\"&gt;\n        &lt;label id=\"inpFileOutput0\" for=\"inpFileButton\" class=\"file-input output\"&gt;Click Here&lt;/label&gt;\n        &lt;input id=\"inpFileButton0\" type=\"button\" class=\"file-input button\" value=\"Select File\" /&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<blockquote>\n  <p>CSS <sub><em>Keep in mind, coloring and font-styles and such are totally your preference, if you use this basic CSS, you can always use after-end mark up to style as you please, this is shown in the jsFiddle listed at the end.</em></sub></p>\n</blockquote>\n\n<pre><code>.file-test-area {\n    border: 1px solid;\n    margin: .5em;\n    padding: 1em;\n}\n.file-input {\n    cursor: pointer !important;\n}\n.file-input * {\n    cursor: pointer !important;\n    display: inline-block;\n}\n.file-input.wrapper {\n    display: inline-block;\n    font-size: 14px;\n    height: auto;\n    overflow: hidden;\n    position: relative;\n    width: auto;\n}\n.file-input.control {\n    -moz-opacity:0 ;\n    filter:alpha(opacity: 0);\n    opacity: 0;\n\n    height: 100%;\n    position: absolute;\n    text-align: right;\n    width: 100%;\n    z-index: 2;\n}\n.file-input.content {\n    position: relative;\n    top: 0px;\n    left: 0px;\n    z-index: 1;\n}\n.file-input.output {\n    background-color: #FFC;\n    font-size: .8em;\n    padding: .2em .2em .2em .4em;\n    text-align: center;\n    width: 10em;\n}\n.file-input.button {\n    border: none;\n    font-weight: bold;\n    margin-left: .25em;\n    padding: 0 .25em;\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>JavaScript</strong> <sub><em>Pure and true, however, some OLDER (retired) browsers may still have trouble with it (like Netscrape 2!)</em></sub></p>\n</blockquote>\n\n<pre><code>var inp = document.getElementsByTagName('input');\nfor (var i=0;i&lt;inp.length;i++) {\n    if (inp[i].type != 'file') continue;\n    inp[i].relatedElement = inp[i].parentNode.getElementsByTagName('label')[0];\n    inp[i].onchange /*= inp[i].onmouseout*/ = function () {\n        this.relatedElement.innerHTML = this.value;\n    };\n};\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/8fTfY/\" rel=\"nofollow\"><h1>Working jsFiddle Example</h1></a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can do this as per answer from <a href=\"http://stackoverflow.com/questions/10216331/open-file-diaglog-box-on-a-tag\">Open File Diaglog box on &lt;a&gt; tag</a></p>\n\n<pre><code>&lt;input type=\"file\" id=\"upload\" name=\"upload\" style=\"visibility: hidden; width: 1px;     height: 1px\" multiple /&gt;\n&lt;a href=\"\" onclick=\"document.getElementById('upload').click(); return false\"&gt;Upload&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found that if input(file) is outside form, then firing click event invokes file dialog.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Hopefully this helps someone - I spent 2 hours banging my head against it:</p>\n\n<p>In IE8 or IE9, if you trigger opening a file input with javascript in any way at all (believe me I've tried them all), it won't let you submit the form using javascript, it will just silently fail.</p>\n\n<p>Submitting the form via a regular submit button may work but calling form.submit(); will silently fail.</p>\n\n<p>I had to resort to overlaying my select file button with a transparent file input which works.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>It works :</strong></p>\n\n<p>For security reasons on Firefox and Opera, you can't fire the click on file input, but you can simulate with MouseEvents :</p>\n\n<pre><code>&lt;script&gt;\nclick=function(element){\n    if(element!=null){\n        try {element.click();}\n        catch(e) {\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"click\",true,true,window,0,0,0,0,0,false,false,false,false,0,null);\n            element.dispatchEvent(evt);\n            }\n        }\n    };\n&lt;/script&gt;\n\n&lt;input type=\"button\" value=\"upload\" onclick=\"click(document.getElementById('inputFile'));\"&gt;&lt;input type=\"file\" id=\"inputFile\" style=\"display:none\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This worked for me:</p>\n\n<pre><code>&lt;script&gt;\n    function sel_file() {\n        $(\"input[name=userfile]\").trigger('click');\n    }  \n&lt;/script&gt;\n\n&lt;input type=\"file\" name=\"userfile\" id=\"userfile\" /&gt;\n\n&lt;a href=\"javascript:sel_file();\"&gt;Click&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is old, and all these solutions are hacks around browser security precautions with real value. </p>\n\n<p>That said, as of today, fileInput.click() works in current Chrome (36.0.1985.125 m) and current Firefox ESR (24.7.0), but not in current IE (11.0.9600.17207). Overlaying a file field with opacity 0 on top of a button works, but I wanted a link element as the visible trigger, and hover underlining doesn't quite work in any browser. It flashes on then disappears, probably the browser thinking through whether hover styling actually applies or not.</p>\n\n<p>But I did find a solution that works in all those browsers. I won't claim to have tested every version of every browser, or that I know it'll continue to work forever, but it appears to meet my needs now.</p>\n\n<p>It's simple: Position the file input field offscreen (position: absolute; top: -5000px), put a label element around it, and trigger the click on the label, instead of the file field itself.</p>\n\n<p>Note that the link does need to be scripted to call the click method of the label, it doesn't do that automatically, like when you click on text inside a label element. Apparently the link element captures the click, and it doesn't make it through to the label.</p>\n\n<p>Note also that this doesn't provide a way to show the currently selected file, since the field is offscreen. I wanted to submit immediately when a file was selected, so that's not a problem for me, but you'll need a somewhat different approach if your situation is different.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>just use a label tag, that way you can hide the input, and make it work through its related label\n<a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/Label\" rel=\"nofollow\">https://developer.mozilla.org/fr/docs/Web/HTML/Element/Label</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JS Fiddle: <a href=\"http://jsfiddle.net/eyedean/1bw357kw/\" rel=\"nofollow\">http://jsfiddle.net/eyedean/1bw357kw/</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>popFileSelector = function() {\r\n    var el = document.getElementById(\"fileElem\");\r\n    if (el) {\r\n        el.click();  \r\n    }\r\n};\r\n\r\nwindow.popRightAway = function() {\r\n    document.getElementById('log').innerHTML += 'I am right away!&lt;br /&gt;';\r\n    popFileSelector();\r\n};\r\n\r\nwindow.popWithDelay = function() {\r\n    document.getElementById('log').innerHTML += 'I am gonna delay!&lt;br /&gt;';\r\n    window.setTimeout(function() {\r\n        document.getElementById('log').innerHTML += 'I was delayed!&lt;br /&gt;';\r\n        popFileSelector();\r\n    }, 1000);\r\n};</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;body&gt;\r\n  &lt;form&gt;\r\n      &lt;input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\" style=\"display:none\" onchange=\"handleFiles(this.files)\" /&gt;\r\n  &lt;/form&gt;\r\n  &lt;a onclick=\"popRightAway()\" href=\"#\"&gt;Pop Now&lt;/a&gt;\r\n    &lt;br /&gt;\r\n  &lt;a onclick=\"popWithDelay()\" href=\"#\"&gt;Pop With 1 Second Delay&lt;/a&gt;\r\n    &lt;div id=\"log\"&gt;Log: &lt;br /&gt;&lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'd like to make a click event fire on an <code>&lt;input type=\"file\"&gt;</code> tag programmatically.</p>\n\n<p>Just calling click() doesn't seem to do anything or at least it doesn't pop up a file selection dialog.</p>\n\n<p>I've been experimenting with capturing events using listeners and redirecting the event, but I haven't been able to get that to actually perform the event like someone clicked on it.</p>\n",
            "last_activity_date": 1414780544,
            "question_id": 210643,
            "score": 174,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "In JavaScript can I make a &quot;click&quot; event fire programmatically for a file input element?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<h2>Disclaimer:</h2>\n\n<p>This article can also be found as a part of my blog <strong><a href=\"http://www.gajotres.net/jquery-mobile-and-how-to-enhance-the-markup-of-dynamically-added-content/\">HERE</a></strong>.</p>\n\n<h2>Intro:</h2>\n\n<p>There are several ways of enhancing dynamically created content markup. It is just not enough to dynamically add new content to <strong>jQuery Mobile</strong> page, new content must be enhanced with classic <strong>jQuery Mobile</strong> styling. Because this is rather processing heavy task there need to be some priorities, if possible <strong>jQuery Mobile</strong> needs to do as less enhancing as possible. Don't enhance whole page if only one component need's to be styled.</p>\n\n<p>What does this all means? When page plugin dispatches a <strong>pageInit</strong> event, which most widgets use to auto-initialize themselves. it will automatically enhance any instances of the widgets it finds on the page.</p>\n\n<p>However, if you generate new markup client-side or load in content via Ajax and inject it into a page, you can trigger the create event to handle the auto-initialization for all the plugins contained within the new markup. This can be triggered on any element (even the page div itself), saving you the task of manually initializing each plugin (listview button, select, etc.).</p>\n\n<p>With this in mind lets discuss enhancement levels. There are three of them and they are sorted from the less resource demanding to higher ones:</p>\n\n<ol>\n<li>Enhance a single component/widget</li>\n<li>Enhance a page content</li>\n<li>Enhance a full page content (header, content, footer)</li>\n</ol>\n\n<h2>Enhance a single component/widget:</h2>\n\n<blockquote>\n  <p><strong>Important:</strong> The below enhancement methods are to be used only on current/active page. For dynamically inserted pages, those pages and their contents will be enhanced once inserted into DOM. Calling any method on dynamically created pages / other than the active page, will result an error.</p>\n</blockquote>\n\n<p>Every <strong>jQuery Mobile</strong> widget can be enhanced dynamically:</p>\n\n<ol>\n<li><p><a href=\"http://api.jquerymobile.com/listview/\"><strong>Listview</strong></a> :</p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('#mylist').listview('refresh');\n</code></pre>\n\n<p>Removing listview elements:</p>\n\n<pre><code>$('#mylist li').eq(0).addClass('ui-screen-hidden'); \n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/LrAyE/\">http://jsfiddle.net/Gajotres/LrAyE/</a></p>\n\n<p><em>Note that the refresh() method only affects new nodes appended to a list. This is done for performance reasons.</em></p>\n\n<p>One of a listview high-points is a filtering functionality. Unfortunately, for some reason, jQuery Mobile will fail to dynamically add filter option to an existing listview. Fortunately there's a workaround. If possible, remove current listview and add another one with a filer option turned on.</p>\n\n<p>Here's a working example: <a href=\"http://stackoverflow.com/a/15163984/1848600\">http://stackoverflow.com/a/15163984/1848600</a></p>\n\n<pre><code>$(document).on('pagebeforeshow', '#index', function(){       \n    $('&lt;ul&gt;').attr({'id':'test-listview','data-role':'listview', 'data-filter':'true','data-filter-placeholder':'Search...'}).appendTo('#index [data-role=\"content\"]');\n    $('&lt;li&gt;').append('&lt;a href=\"#\"&gt;Audi&lt;/a&gt;').appendTo('#test-listview');\n    $('&lt;li&gt;').append('&lt;a href=\"#\"&gt;Mercedes&lt;/a&gt;').appendTo('#test-listview');\n    $('&lt;li&gt;').append('&lt;a href=\"#\"&gt;Opel&lt;/a&gt;').appendTo('#test-listview');\n    $('#test-listview').listview().listview('refresh');\n});\n</code></pre></li>\n<li><p><a href=\"http://api.jquerymobile.com/button/\"><strong>Button</strong></a></p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('[type=\"button\"]').button();\n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/m4rjZ/\">http://jsfiddle.net/Gajotres/m4rjZ/</a></p>\n\n<p>One more thing, you don't need to use a input element to create a button, it can be even done with a basic div, here's an example: <a href=\"http://jsfiddle.net/Gajotres/L9xcN/\">http://jsfiddle.net/Gajotres/L9xcN/</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/navbar/\"><strong>Navbar</strong></a></p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('[data-role=\"navbar\"]').navbar();\n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/w4m2B/\">http://jsfiddle.net/Gajotres/w4m2B/</a></p>\n\n<p>Here's a demo how to add dynamic navbar tab: <a href=\"http://jsfiddle.net/Gajotres/V6nHp/\">http://jsfiddle.net/Gajotres/V6nHp/</a></p>\n\n<p>And one more in <strong>pagebeforecreate</strong> event: <a href=\"http://jsfiddle.net/Gajotres/SJG8W/\">http://jsfiddle.net/Gajotres/SJG8W/</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/textinput/\"><strong>Text inputs, Search inputs &amp; Textareas</strong></a></p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('[type=\"text\"]').textinput();   \n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/9UQ9k/\">http://jsfiddle.net/Gajotres/9UQ9k/</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/slider/\"><strong>Sliders &amp; Flip toggle switch</strong></a></p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('[type=\"range\"]').slider();  \n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/caCsf/\">http://jsfiddle.net/Gajotres/caCsf/</a></p>\n\n<p>Enhancement example during the pagebeforecreate event: <a href=\"http://jsfiddle.net/Gajotres/NwMLP/\">http://jsfiddle.net/Gajotres/NwMLP/</a></p>\n\n<p>Sliders are little bit buggy to dynamically create, read more about it here: <a href=\"http://stackoverflow.com/a/15708562/1848600\">http://stackoverflow.com/a/15708562/1848600</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/controlgroup/\"><strong>Checkbox &amp; Radiobox</strong></a></p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('[type=\"radio\"]').checkboxradio();\n</code></pre>\n\n<p>or if you want to select/deselect another Radiobox/Checkbox element:</p>\n\n<pre><code>$(\"input[type='radio']\").eq(0).attr(\"checked\",false).checkboxradio(\"refresh\");\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"input[type='radio']\").eq(0).attr(\"checked\",true).checkboxradio(\"refresh\");\n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/VAG6F/\">http://jsfiddle.net/Gajotres/VAG6F/</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/select/\"><strong>Select menu</strong></a></p>\n\n<p>Markup enhancement:</p>\n\n<pre><code>$('select').selectmenu();  \n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/dEXac/\">http://jsfiddle.net/Gajotres/dEXac/</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/collapsible/\"><strong>Collapsible</strong></a></p>\n\n<p>Unfortunately collapsible element can't be enhanced through some specific method, so trigger('create') must be used instead.</p>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/ck6uK/\">http://jsfiddle.net/Gajotres/ck6uK/</a></p></li>\n<li><p><a href=\"http://api.jquerymobile.com/table-reflow/\"><strong>Table</strong></a></p>\n\n<p>Markup enhancement: </p>\n\n<pre><code>$(\".selector\").table(\"refresh\");\n</code></pre>\n\n<p>While this is a standard way of table enhancement, at this point I can't make it work. So instead use trigger('create').</p>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/Zqy4n/\">http://jsfiddle.net/Gajotres/Zqy4n/</a></p></li>\n<li><p><strong><a href=\"http://view.jquerymobile.com/1.3.1/dist/demos/widgets/panels/\">Panels</a></strong> - <em>New</em></p>\n\n<p>Panel Markup enhancement:</p>\n\n<pre><code>$('.selector').trigger('pagecreate');\n</code></pre>\n\n<p>Markup enhancement of <em>content dynamically added</em> to Panel:</p>\n\n<pre><code>$('.selector').trigger('pagecreate');\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/Palestinian/PRC8W/\">http://jsfiddle.net/Palestinian/PRC8W/</a></p></li>\n</ol>\n\n<h2>Enhance a page content:</h2>\n\n<p>In case we are generating/rebuilding whole page content it is best to do it all at once and it can be done with this:</p>\n\n<pre><code>$('#index').trigger('create');\n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/426NU/\">http://jsfiddle.net/Gajotres/426NU/</a></p>\n\n<h2>Enhance a full page content (header, content, footer):</h2>\n\n<p>Unfortunately for us trigger('create') can not enhance header and footer markup. In that case we need big guns:</p>\n\n<pre><code>$('#index').trigger('pagecreate');\n</code></pre>\n\n<p>Enhancement example: <a href=\"http://jsfiddle.net/Gajotres/DGZcr/\">http://jsfiddle.net/Gajotres/DGZcr/</a></p>\n\n<p>This is almost a mystic method because I can't find it in official <strong>jQuery Mobile</strong> documentation. Still it is easily found in <strong>jQuery Mobile</strong> bug tracker with a warning not to use it unless it is really really necessary.</p>\n\n<p>Note, <strong>.trigger('pagecreate');</strong> can suppose be used only once per page refresh, I found it to be untrue:</p>\n\n<p><a href=\"http://jsfiddle.net/Gajotres/5rzxJ/\">http://jsfiddle.net/Gajotres/5rzxJ/</a></p>\n\n<h2>3rd party enhancement plugins</h2>\n\n<p>There are several 3rd party enhancement plugins. Some are made as an update to an existing method and some are made to fix broken jQM functionalities.</p>\n\n<ul>\n<li><p><strong>Button text change</strong></p>\n\n<p>Unfortunately cant found the developer of this plugin. Original SO source: <a href=\"http://stackoverflow.com/questions/4009524/change-button-text-jquery-mobile/7279843#7279843\">Change button text jquery mobile</a></p>\n\n<pre><code>(function($) {\n    /*\n     * Changes the displayed text for a jquery mobile button.\n     * Encapsulates the idiosyncracies of how jquery re-arranges the DOM\n     * to display a button for either an &lt;a&gt; link or &lt;input type=\"button\"&gt;\n     */\n    $.fn.changeButtonText = function(newText) {\n        return this.each(function() {\n            $this = $(this);\n            if( $this.is('a') ) {\n                $('span.ui-btn-text',$this).text(newText);\n                return;\n            }\n            if( $this.is('input') ) {\n                $this.val(newText);\n                // go up the tree\n                var ctx = $this.closest('.ui-btn');\n                $('span.ui-btn-text',ctx).text(newText);\n                return;\n            }\n        });\n    };\n})(jQuery);\n</code></pre>\n\n<p>Working example: <a href=\"http://jsfiddle.net/Gajotres/mwB22/\">http://jsfiddle.net/Gajotres/mwB22/</a></p></li>\n</ul>\n\n<h2>Get correct maximum content height</h2>\n\n<p>In case page header and footer has a constant height content div can be easily set to cover full available space with a little css trick:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#content {\n    padding: 0;\n    position : absolute !important; \n    top : 40px !important;  \n    right : 0; \n    bottom : 40px !important;  \n    left : 0 !important;     \n}\n</code></pre>\n\n<p>And here's a working example with <strong><code>Google maps api3</code></strong> demo: <a href=\"http://jsfiddle.net/Gajotres/7kGdE/\">http://jsfiddle.net/Gajotres/7kGdE/</a></p>\n\n<p>This method can be used to get correct maximum content height, and it must be used with a <strong>pageshow</strong> event.</p>\n\n<pre><code>function getRealContentHeight() {\n    var header = $.mobile.activePage.find(\"div[data-role='header']:visible\");\n    var footer = $.mobile.activePage.find(\"div[data-role='footer']:visible\");\n    var content = $.mobile.activePage.find(\"div[data-role='content']:visible:visible\");\n    var viewport_height = $(window).height();\n\n    var content_height = viewport_height - header.outerHeight() - footer.outerHeight();\n    if((content.outerHeight() - header.outerHeight() - footer.outerHeight()) &lt;= viewport_height) {\n        content_height -= (content.outerHeight() - content.height());\n    } \n    return content_height;\n}\n</code></pre>\n\n<p>And here's a live jsFiddle example: <a href=\"http://jsfiddle.net/Gajotres/nVs9J/\">http://jsfiddle.net/Gajotres/nVs9J/</a></p>\n\n<p>There's one thing to remember. This function will correctly get you maximum available content height and at the same time it can be used to stretch that same content. Unfortunately it cant be used to stretch img to full content height, img tag has an overhead of 3px.</p>\n\n<h2>Methods of markup enhancement prevention:</h2>\n\n<p>This can be done in few ways, sometimes you will need to combine them to achieve a desired result.</p>\n\n<ul>\n<li><p>Method 1:</p>\n\n<p>It can do it by adding this attribute:</p>\n\n<pre><code>data-enhance=\"false\"\n</code></pre>\n\n<p>to the header, content, footer container.</p>\n\n<p>This also needs to be turned in the app loading phase:</p>\n\n<pre><code>$(document).one(\"mobileinit\", function () {\n    $.mobile.ignoreContentEnabled=true;\n});\n</code></pre>\n\n<p><em><strong>Initialize it before jquery-mobile.js is initialized (look at the example below).</em></strong></p>\n\n<p>More about this can be found here:</p>\n\n<p><a href=\"http://jquerymobile.com/test/docs/pages/page-scripting.html\">http://jquerymobile.com/test/docs/pages/page-scripting.html</a></p>\n\n<p>Example: <a href=\"http://jsfiddle.net/Gajotres/UZwpj/\">http://jsfiddle.net/Gajotres/UZwpj/</a></p>\n\n<p>To recreate a page again use this:</p>\n\n<pre><code>$('#index').live('pagebeforeshow', function (event) {\n    $.mobile.ignoreContentEnabled = false;\n    $(this).attr('data-enhance','true');\n    $(this).trigger(\"pagecreate\")\n});\n</code></pre></li>\n<li><p>Method 2:</p>\n\n<p>Second option is to do it manually with this line:</p>\n\n<pre><code>data-role=\"none\"\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/Gajotres/LqDke/\">http://jsfiddle.net/Gajotres/LqDke/</a></p></li>\n<li><p>Method 3:</p>\n\n<p>Certain HTML elements can be prevented from markup enhancement:</p>\n\n<pre><code> $(document).bind('mobileinit',function(){\n      $.mobile.page.prototype.options.keepNative = \"select, input\";\n });    \n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/Gajotres/gAGtS/\">http://jsfiddle.net/Gajotres/gAGtS/</a></p>\n\n<p><em><strong>Again initialize it before jquery-mobile.js is initialized (look at the example below).</em></strong></p></li>\n</ul>\n\n<h2>Markup enhancement problems:</h2>\n\n<p>Sometimes when creating a component from scratch (like listview) this error will occur:</p>\n\n<blockquote>\n  <p>cannot call methods on listview prior to initialization</p>\n</blockquote>\n\n<p>It can be prevented with component initialization prior to markup enhancement, this is how you can fix this:</p>\n\n<pre><code>$('#mylist').listview().listview('refresh');\n</code></pre>\n\n<h2>Markup overrding problems:</h2>\n\n<p>If for some reason default jQuery Mobile CSS needs to be changed it must be done with <strong><code>!important</code></strong> override. Without it default css styles can not be changed.</p>\n\n<p>Example:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#navbar li {\n    background: red !important;\n}\n</code></pre>\n\n<p><strong><code>jsFiddle</code></strong> example: <a href=\"http://jsfiddle.net/Gajotres/vTBGa/\">http://jsfiddle.net/Gajotres/vTBGa/</a></p>\n\n<h2>Changes:</h2>\n\n<ul>\n<li>01.02.2013 - Added a dynamic navbar demo</li>\n<li>01.03.2013 - Added comment about how to dynamically add filtering to a listview</li>\n<li>07.03.2013 - Added new chapter: <strong>Get correct maximum content height</strong></li>\n<li>17.03.2013 - Added few words to the chapter: <strong>Get correct maximum content height</strong></li>\n<li>29.03.2013 - Added new content about dynamically created sliders and fix an example bug</li>\n<li>03.04.2013 - Added new content about dynamically created collapsible elements</li>\n<li>04.04.2013 - Added 3rd party plugins chapter</li>\n<li>20.05.2013 - Added Dynamically added Panels and contents</li>\n<li>21.05.2013 - Added another way of setting full content height</li>\n<li>20.06.2013 - Added new chapter: <strong>Markup overrding problems</strong></li>\n<li>29.06.2013 - Added an important note of WHEN to use enhancement methods</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 143
                },
                {
                    "body": "<p>From JQMobile 1.4 you can do .enhanceWithin() on all the children <a href=\"http://api.jquerymobile.com/enhanceWithin/\" rel=\"nofollow\">http://api.jquerymobile.com/enhanceWithin/</a></p>\n\n<pre><code>var content = '&lt;p&gt;Hi&lt;/p&gt;';\n$('#somediv').html(content);\n$('#somediv').enhanceWithin();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I was wondering how can I enhance dynamically jQuery Mobile page?</p>\n\n<p>I have tried to use these methods:</p>\n\n<ol>\n<li><p><code>$('[data-role=\"page\"]').trigger('create');</code></p>\n\n<p>and</p></li>\n<li><p><code>$('[data-role=\"page\"]').page();</code></p></li>\n</ol>\n\n<p>Also how can I prevent enhancement markup of check boxes only?</p>\n",
            "last_activity_date": 1406813354,
            "question_id": 14550396,
            "score": 49,
            "tags": [
                "javascript",
                "jquery",
                "html5",
                "jquery-mobile"
            ],
            "title": "jQuery Mobile: Markup Enhancement of dynamically added content"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><em>According to some odd Javascript rules, <code>new Widget</code> actually invokes the constructor rather than returning a reference to the constructor.  This question actually answers the question the difference between <code>var a = new Widget()</code> and <code>var a = Widget()</code>.</em></p>\n\n<p>In simple words, the <code>new</code> keyword tells Javascript to call the function <code>Widget</code> under a different set of rules than a regular function call.  Going off the top of my head, the ones I remember are:</p>\n\n<ol>\n<li>There is a brand new object created</li>\n<li><code>Widget</code> can use the <code>this</code> keyword to refer to that object.</li>\n<li>If <code>Widget</code> does not return anything, this new object will be created.</li>\n<li>This object will inherit a few additional properties that will indicate it was created by <code>Widget</code> that are used to track down property chains.</li>\n</ol>\n\n<p>Without the <code>new</code> keyword, a call to widget would</p>\n\n<ol>\n<li>If in strict mode, <code>this</code> will be set to <code>undefined.</code></li>\n<li>Otherwise, <code>this</code> will refer to the global object.  (Called <code>window</code> by the browser.)</li>\n<li>If the function does not return anything, then <code>undefined</code> will be returned.</li>\n</ol>\n\n<p>Reference: \n<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/new\" rel=\"nofollow\"><code>new</code> keyword</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>As in any other object oriented programming language, the keyword \"new\" means creating a new allotment of memory for a particular object, and also calls the \"constructor\" for object's class.</p>\n\n<p>I've got to assume that in JavaScript, it means the same.</p>\n\n<p>With no other knowledge of what you are dealing with, again, it sounds like Widget is a class which has a constructor, which executes some code, and is required to use the \"new\" keyword.  Without, it will most likely be nil, or \"uninstantiated\" which could cause a lot of programmatic issues.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/new\" rel=\"nofollow\"> <code>new</code> </a> is important for <em>prototype</em> inheritance; i.e.<br>\nCreate a constructor with a method</p>\n\n<pre><code>var Obj = function(){};\nObj.prototype = {};\nObj.prototype.foo = function(){console.log('foo');};\n</code></pre>\n\n<p>Make a second constructor to extend the first with</p>\n\n<pre><code>var ExObj = function(){};\n</code></pre>\n\n<p>Now, if we prototype without <code>new</code>,</p>\n\n<pre><code>ExObj.prototype = Obj;\n(new ExObj).foo(); // TypeError: Object #&lt;Object&gt; has no method 'foo'\n</code></pre>\n\n<p>Which means we haven't inherited from the prototype of <code>Obj</code>, however, if we prototype with <code>new</code></p>\n\n<pre><code>ExObj.prototype = new Obj();\n(new ExObj).foo(); // console logs 'foo'\n</code></pre>\n\n<p>Furthermore, adding new things to the prototype of <code>ExObj</code> doesn't make any changes to it's base, <code>Obj</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>WeatherWidget.prototype = new Widget;\n</code></pre>\n\n<p>does create a new instance of the <code>Widget</code> constructor and use it as <code>WeatherWidget</code>'s prototype object. Using the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/new\" rel=\"nofollow\"><code>new</code> keyword</a> creates the new object, sets up the inheritance chain of it to <code>Widget.prototype</code>, and applies the constructor function on it (where you can set up individual properties'n'methods, or create private-scoped variables).</p>\n\n<p>Without the <code>new</code> keyword it would be an assignment of the <code>Widget</code> function to the <code>prototype</code> property - which does not make any sense. If you'd add the optional brackets (i.e. <code>Widget()</code>), it would invoke the function normally, but not as a constructor on a new instance, but with the global object as context. See also the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/this\" rel=\"nofollow\">reference for the <code>this</code> keyword</a>.</p>\n\n<p>Notice that you should not really use this code. As said, it creates a new instance by invoking the constructor function. But the purpose is only to create an <em>empty</em> object that inherits from the <code>Widget</code>s prototype object, not to instantiate something (which could do some harm, depending on the code). Instead, you should use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create\" rel=\"nofollow\"><code>Object.create</code></a> (or its <a href=\"http://stackoverflow.com/q/10141086/1048572\">popular shim</a>):</p>\n\n<pre><code>WeatherWidget.prototype = Object.create(Widget.prototype);\n</code></pre>\n\n<p>see also <a href=\"http://stackoverflow.com/q/11812648/1048572\">Javascript basic inheritance vs Crockford prototypical inheritance</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In plain english you're extending one class with another. A prototype can only be an object so you set <code>WeatherWidget</code>'s prototype to a new instance of <code>Widget</code>. If you removed the <code>new</code> keyword you would be setting the prototype to the literal constructor function which doesn't do anything.</p>\n\n<pre><code>var Appendages = function(){\n  this.legs = 2\n};\nvar Features = function() {\n   this.ears = 4;\n   this.eyes = 1;\n}\n\n// Extend Features class with Appendages class.\nFeatures.prototype = new Appendages;\nvar sara = new Features();\nsara.legs;\n// Returns 2.\n</code></pre>\n\n<p>Understanding that the prototype can be any object, something like this would also work:</p>\n\n<pre><code>var appendages = {\n  legs : 2\n};\nvar Features = function() {\n   this.ears = 4;\n   this.eyes = 1;\n}\n\n// Extend Features class with Appendages class.\nFeatures.prototype = appendages;\nvar sara = new Features();\nsara.legs;\n// Returns 2.\n</code></pre>\n\n<p>In JavaScript, if the key isn't found on the object, it checks the parents object you extended it from. Hence you can change items on the parent object on the fly like so:</p>\n\n<pre><code>var appendages = {\n  legs : 2\n};\nvar Features = function() {\n   this.ears = 4;\n   this.eyes = 1;\n}\n\n// Extend Features class with Appendages class.\nFeatures.prototype = appendages;\nvar sara = new Features();\nsara.legs;\n// Returns 2.\nappendages.hair = true;\nsara.hair;\n// Returns true.\n</code></pre>\n\n<p>Note that this all happens during instantiation which means you can't just switch out the prototype after you've created the object:</p>\n\n<pre><code>var foo = {name : 'bob'};\nvar bar = {nachos : 'cheese'};\nfoo.prototype = bar;\nfoo.nachos;\n// undefined\n</code></pre>\n\n<p>However, all modern browsers come with this newer <code>__proto__</code> method, which allows you to do it:</p>\n\n<pre><code>var foo = {name : 'bob'};\nvar bar = {nachos : 'cheese'};\nfoo.__proto__ = bar;\nfoo.nachos\n// \"cheese\"\n</code></pre>\n\n<p>Read up more on understanding JavaScript prototypes <a href=\"http://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/\" rel=\"nofollow\">here</a>.\nThis <a href=\"http://pivotallabs.com/users/pjaros/blog/articles/1368-javascript-constructors-prototypes-and-the-new-keyword\" rel=\"nofollow\">article</a> from Pivotal Labs is also really good.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>WeatherWidget.prototype = new Widget;\n</code></pre>\n\n<p>The <code>new</code> keyword calls <code>Widget</code> as a constructor and the return value is assigned to the <code>prototype</code> property.  (If you would omit <code>new</code>, you would not call <code>Widget</code> unless you added an argument list, <code>()</code>. However, calling <code>Widget</code> that way might not be possible. It would certainly have the potential to <em>spoil the global namespace</em> if it is not strict mode code and the implementation is conforming to ECMAScript Ed. 5.x there.)</p>\n\n<p>But this approach actually comes from a <a href=\"https://www.google.com/search?q=%22prototype+%3D+new%22&amp;filter=0\">really viral</a> <a href=\"http://docs.oracle.com/cd/E19957-01/816-6409-10/obj2.htm#1008404\"><em>bad example</em> in the old Netscape JavaScript 1.3 Guide</a> (mirrored at Oracle, formerly Sun).</p>\n\n<p>This way, your <code>WeatherWidget</code> instances will all inherit from the <em>same</em> <code>Widget</code> instance:</p>\n\n<pre><code>[new WeatherWidget()] \u2192 [new Widget()] \u2192 [Widget.prototype] \u2192 \u2026\n</code></pre>\n\n<p>This can be useful, but most of the time you would not want it to happen.  You should not do that here unless you want all your <code>WeatherWidget</code> instances to <em>share among them</em> the <em>property values</em> they inherit from this <code>Widget</code> instance, and only <em>through it</em>, from <code>Widget.prototype</code>.  Another problem is that you need to call the parent constructor this way, which may not allow to be called without arguments as you do, or would not initialize properly. It certainly has nothing to do with emulation of class-based inheritance as known, e.g., from Java.</p>\n\n<p>The proper way to implement class-based inheritance in these prototype-based languages is (originally devised by <a href=\"https://groups.google.com/group/comp.lang.javascript/msg/5d06e72e55d5bf11\">Lasse Reichstein Nielsen in <code>comp.lang.javascript</code> in 2003, for cloning objects</a>):</p>\n\n<pre><code>function Dummy () {}\nDummy.prototype = Widget.prototype;\nWeatherWidget.prototype = new Dummy();\nWeatherWidget.prototype.constructor = WeatherWidget;\n</code></pre>\n\n<p>(The <code>constructor</code> prototype property should be fixed as well, so that your <code>WeatherWidget</code> instances <code>w</code> would have <code>w.constructor === WeatherWidget</code> as expected, and not <code>w.constructor === Widget</code>. However, be aware that it is enumerable afterwards.)</p>\n\n<p>This way, <code>WeatherWidget</code> instances will inherit properties through the prototype chain, but will not share property values among them, because they inherit from <code>Widget.prototype</code> through <code>Dummy</code> which has no own properties:</p>\n\n<pre><code>[new WeatherWidget()] \u2192 [new Dummy()] \u2192 [Widget.prototype] \u2192 \u2026\n</code></pre>\n\n<p>The parent constructor will only be called if you call it explicitly, from <code>WeatherWidget</code>, for example with</p>\n\n<pre><code>function WeatherWidget (\u2026)\n{\n  Widget.apply(this, arguments);\n}\n</code></pre>\n\n<p>(If you are in a very restricted environment that requires compliance with ECMAScript Ed. 5 and later \u2013 so not on the Web \u2013 or when implementations of ECMAScript Edition 5.1 have become ubiquitous \u2013 in 10 years or so from now, given that it took Edition 3 that long \u2013, you can and should use <code>WeatherWidget.prototype = Object.create(Widget.prototype, {constructor: {value: WeatherWidget}});</code> instead.)</p>\n\n<p>See also <code>Function.prototype.extend()</code> in my <a href=\"http://pointedears.de/wsvn/JSX/trunk/object.js\">JSX:object.js</a> for how to generalize this.  Using that code, it would become</p>\n\n<pre><code>WeatherWidget.extend(Widget);\n</code></pre>\n\n<p>My <code>Function.prototype.extend()</code> takes an optional second argument with which you can easily augment the prototype of <code>WeatherWidget</code> instances:</p>\n\n<pre><code>WeatherWidget.extend(Widget, {\n  foo: 42,\n  bar: \"baz\"\n});\n</code></pre>\n\n<p>would be equivalent to</p>\n\n<pre><code>WeatherWidget.extend(Widget);\nWeatherWidget.prototype.foo = 42;\nWeatherWidget.prototype.bar = \"baz\";\n</code></pre>\n\n<p>You will still need to call the parent constructor explicitly in the child constructor, though; that part cannot reasonably be automated.  But my <code>Function.prototype.extend()</code> adds a <code>_super</code> property to the <code>Function</code> instance which makes it easier:</p>\n\n<pre><code>function WeatherWidget (\u2026)\n{\n  WeatherWidget._super.apply(this, arguments);\n}\n</code></pre>\n\n<p>Other people have implemented similar extensions.</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>JavaScript functions are \"MULTIPLE(2) PERSONALITIES\"!!!</p>\n\n<p>They are regular-functions with input and output, which we call like <code>function()</code>.</p>\n\n<p>Also they are constructors of JS-objects, when we use the <code>new</code> keyword.  >>>BUT&lt;&lt;&lt; the new created objects are NOT INSTANCES of the constructors (like the objects of classes in class-based inheritance). The new objects are instances of the object of the <code>prototype</code> property of the constructor.</p>\n\n<p>Then in <code>WeatherWidget.prototype =</code> you put the object you want to inherit its properties to the objects the constructor will create, which usually is <code>new function()</code> and not a function.</p>\n\n<p>JavaScript created HUGE confusion in the programming community by naming the objects created by constructors, INSTANCES of them with the <code>instanceof</code> keyword.<br>\n<code>&gt; function f(){}</code><br>\n<code>undefined</code><br>\n<code>&gt; new f() instanceof f</code><br>\n<code>true</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What does the following code do:</p>\n\n<pre><code>WeatherWidget.prototype = new Widget;\n</code></pre>\n\n<p>where <code>Widget</code> is a constructor, and I want to extend the Widget 'class' with a new function <code>WeatherWidget</code>.</p>\n\n<p>What is the <strong><code>new</code></strong> keyword doing there and what would happen if it is left out? </p>\n",
            "last_activity_date": 1410633513,
            "question_id": 12592913,
            "score": 20,
            "tags": [
                "javascript",
                "constructor",
                "prototype"
            ],
            "title": "What is the reason to use the &#39;new&#39; keyword at Derived.prototype = new Base"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>I have two functions:</p>\n\n<pre><code>function setSelectionRange(input, selectionStart, selectionEnd) {\n  if (input.setSelectionRange) {\n    input.focus();\n    input.setSelectionRange(selectionStart, selectionEnd);\n  }\n  else if (input.createTextRange) {\n    var range = input.createTextRange();\n    range.collapse(true);\n    range.moveEnd('character', selectionEnd);\n    range.moveStart('character', selectionStart);\n    range.select();\n  }\n}\n\nfunction setCaretToPos (input, pos) {\n  setSelectionRange(input, pos, pos);\n}\n</code></pre>\n\n<p>Then you can use setCaretToPos like this:</p>\n\n<pre><code>setCaretToPos(document.getElementById(\"YOURINPUT\"), 4);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 158
                },
                {
                    "body": "<p>Here's a jQuery solution:</p>\n\n<pre><code>$.fn.selectRange = function(start, end) {\n    if(!end) end = start; \n    return this.each(function() {\n        if (this.setSelectionRange) {\n            this.focus();\n            this.setSelectionRange(start, end);\n        } else if (this.createTextRange) {\n            var range = this.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', end);\n            range.moveStart('character', start);\n            range.select();\n        }\n    });\n};\n</code></pre>\n\n<p>With this, you can do</p>\n\n<pre><code>$('#elem').selectRange(3,5); // select a range of text\n$('#elem').selectRange(3); // set cursor position\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mnpenner/WpqsN/\" rel=\"nofollow\">JsFiddle Example</a></p>\n",
                    "is_accepted": false,
                    "score": 234
                },
                {
                    "body": "<p>In IE to move cursor on some position this code is enough:</p>\n\n<pre><code>var range = elt.createTextRange();\nrange.move('character', pos);\nrange.select();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I'm using this: <a href=\"http://plugins.jquery.com/project/jCaret\">http://plugins.jquery.com/project/jCaret</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This worked for me on Safari 5 on Mac OSX, jQuery 1.4:</p>\n\n<pre><code>$(\"Selector\")[elementIx].selectionStart = desiredStartPos; \n$(\"Selector\")[elementIx].selectionEnd = desiredEndPos;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The solutions here are right except for the jQuery extension code.</p>\n\n<p>The extension function should iterate over each selected element and return <code>this</code> to support chaining. Here is <strike>the</strike> <em>a</em> correct version:</p>\n\n<pre><code>$.fn.setCursorPosition = function(pos) {\n  this.each(function(index, elem) {\n    if (elem.setSelectionRange) {\n      elem.setSelectionRange(pos, pos);\n    } else if (elem.createTextRange) {\n      var range = elem.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  });\n  return this;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Just remember to return false right after the function call if you're using the arrow keys since Chrome fricks the frack up otherwise.</p>\n\n<pre><code>{\n    document.getElementById('moveto3').setSelectionRange(3,3);\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found this in github:</p>\n\n<p><a href=\"https://github.com/DrPheltRight/jquery-caret\" rel=\"nofollow\">https://github.com/DrPheltRight/jquery-caret</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found a solution that works for me:</p>\n\n<pre><code>$.fn.setCursorPosition = function(position){\n    if(this.length == 0) return this;\n    return $(this).setSelection(position, position);\n}\n\n$.fn.setSelection = function(selectionStart, selectionEnd) {\n    if(this.length == 0) return this;\n    input = this[0];\n\n    if (input.createTextRange) {\n        var range = input.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', selectionEnd);\n        range.moveStart('character', selectionStart);\n        range.select();\n    } else if (input.setSelectionRange) {\n        input.focus();\n        input.setSelectionRange(selectionStart, selectionEnd);\n    }\n\n    return this;\n}\n\n$.fn.focusEnd = function(){\n    this.setCursorPosition(this.val().length);\n            return this;\n}\n</code></pre>\n\n<p>Now you can move the focus to end of any element by calling:</p>\n\n<pre><code>$(element).focusEnd();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>You can directly change the prototype if setSelectionRange does not exist.</p>\n\n<pre><code>(function() {\n    if (!HTMLInputElement.prototype.setSelectionRange) {\n        HTMLInputElement.prototype.setSelectionRange = function(start, end) {\n            if (this.createTextRange) {\n                var range = this.createTextRange();\n                this.collapse(true);\n                this.moveEnd('character', end);\n                this.moveStart('character', start);\n                this.select();\n            }\n        }\n    }\n})();\ndocument.getElementById(\"input_tag\").setSelectionRange(6, 7);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/anoop26667/CHrfc/\" rel=\"nofollow\">jsFiddle</a> link</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Based on this <a href=\"http://stackoverflow.com/questions/8928660/setselectionrange-not-behaving-the-same-way-across-browsers\">question</a>, the answer will not work perfectly for ie and opera when there is new line in the textarea. \nThe <a href=\"http://stackoverflow.com/a/8928945/611741\">answer</a> explain how to adjust the selectionStart, selectionEnd before calling setSelectionRange.</p>\n\n<p>I have try the adjustOffset from the other question with the solution proposed by @AVProgrammer and it work.</p>\n\n<pre><code>function adjustOffset(el, offset) {\n    /* From http://stackoverflow.com/a/8928945/611741 */\n    var val = el.value, newOffset = offset;\n    if (val.indexOf(\"\\r\\n\") &gt; -1) {\n        var matches = val.replace(/\\r\\n/g, \"\\n\").slice(0, offset).match(/\\n/g);\n        newOffset += matches ? matches.length : 0;\n    }\n    return newOffset;\n}\n\n$.fn.setCursorPosition = function(position){\n    /* From http://stackoverflow.com/a/7180862/611741 */\n    if(this.lengh == 0) return this;\n    return $(this).setSelection(position, position);\n}\n\n$.fn.setSelection = function(selectionStart, selectionEnd) {\n    /* From http://stackoverflow.com/a/7180862/611741 \n       modified to fit http://stackoverflow.com/a/8928945/611741 */\n    if(this.lengh == 0) return this;\n    input = this[0];\n\n    if (input.createTextRange) {\n        var range = input.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', selectionEnd);\n        range.moveStart('character', selectionStart);\n        range.select();\n    } else if (input.setSelectionRange) {\n        input.focus();\n        selectionStart = adjustOffset(input, selectionStart);\n        selectionEnd = adjustOffset(input, selectionEnd);\n        input.setSelectionRange(selectionStart, selectionEnd);\n    }\n\n    return this;\n}\n\n$.fn.focusEnd = function(){\n    /* From http://stackoverflow.com/a/7180862/611741 */\n    this.setCursorPosition(this.val().length);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Small modification to the code I found in <a href=\"http://code.accursoft.com/caret/wiki/Home\" rel=\"nofollow\">bitbucket</a></p>\n\n<p>Code is now able to select/highlight with start/end points if given 2 positions.\nTested and works fine in FF/Chrome/IE9/Opera.</p>\n\n<pre><code>$('#field').caret(1, 9);\n</code></pre>\n\n<p>The code is listed below, only a few lines changed:</p>\n\n<pre><code>(function($) {\n  $.fn.caret = function(pos) {\n    var target = this[0];\n    if (arguments.length == 0) { //get\n      if (target.selectionStart) { //DOM\n        var pos = target.selectionStart;\n        return pos &gt; 0 ? pos : 0;\n      }\n      else if (target.createTextRange) { //IE\n        target.focus();\n        var range = document.selection.createRange();\n        if (range == null)\n            return '0';\n        var re = target.createTextRange();\n        var rc = re.duplicate();\n        re.moveToBookmark(range.getBookmark());\n        rc.setEndPoint('EndToStart', re);\n        return rc.text.length;\n      }\n      else return 0;\n    }\n\n    //set\n    var pos_start = pos;\n    var pos_end = pos;\n\n    if (arguments.length &gt; 1) {\n        pos_end = arguments[1];\n    }\n\n    if (target.setSelectionRange) //DOM\n      target.setSelectionRange(pos_start, pos_end);\n    else if (target.createTextRange) { //IE\n      var range = target.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos_end);\n      range.moveStart('character', pos_start);\n      range.select();\n    }\n  }\n})(jQuery)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Set the focus before you have inserted the text into the textarea thus?</p>\n\n<pre><code>$(\"#comments\").focus();\n$(\"#comments\").val(comments);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>How do you set the cursor position in a text field using jQuery?  I've got a text field with content, and I want the users cursor to be positioned at a certain offset when they focus on the field.  The code should look kind of like this:</p>\n\n<pre><code>$('#input').focus(function() {\n  $(this).setCursorPosition(4);\n});\n</code></pre>\n\n<p>What would the implementation of that setCursorPosition function look like?  If you had a text field with the content abcdefg, this call would result in the cursor being positioned as follows: abcd*<em>|</em>*efg.</p>\n\n<p>Java has a similar function, setCaretPosition.  Does a similar method exist for javascript?</p>\n\n<p><strong>Update: I modified CMS's code to work with jQuery as follows:</strong></p>\n\n<pre><code>new function($) {\n  $.fn.setCursorPosition = function(pos) {\n    if (this.setSelectionRange) {\n      this.setSelectionRange(pos, pos);\n    } else if (this.createTextRange) {\n      var range = this.createTextRange();\n      range.collapse(true);\n      if(pos &lt; 0) {\n        pos = $(this).val().length + pos;\n      }\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      range.select();\n    }\n  }\n}(jQuery);\n</code></pre>\n",
            "last_activity_date": 1420669458,
            "question_id": 499126,
            "score": 302,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "textfield"
            ],
            "title": "jQuery Set Cursor Position in Text Area"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I think  you want the Ecma 262 spec:</p>\n\n<p><a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</a></p>\n\n<p>There's a section on page 15 which defines what identifier syntax can be.</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>Basically, in regular expression form: <code>[a-zA-Z_$][0-9a-zA-Z_$]*</code>. In other words, the first character can be a letter or _ or $, and the other characters can be letters or _ or $ or numbers.</p>\n\n<p><em>Note:</em> This answer is not technically correct. You can use Unicode characters in identifiers. But don't do it. Encodings get screwed up all the time. Keep your code in the 32-126 ASCII range where it's safe.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p><strong>Javascript Variables</strong></p>\n\n<p>You can start a variable with any letter, <code>$</code>, or <code>_</code> character. As long as it doesn't start with a number, you can include numbers as well.</p>\n\n<p>Start: <code>[a-z], $, _</code></p>\n\n<p>Contain: <code>[a-z], [0-9], $, _</code></p>\n\n<p><strong>jQuery</strong></p>\n\n<p>You can use <code>_</code> for your library so that it will stand side-by-side with jQuery. However, there is a configuration you can set so that jQuery will not use <code>$</code>. It will instead use <code>jQuery</code>. To do this, simply set:</p>\n\n<pre><code>jQuery.noConflict();\n</code></pre>\n\n<p><a href=\"http://docs.jquery.com/Using%5FjQuery%5Fwith%5FOther%5FLibraries\">This page</a> explains how to do this.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Javascript variables can have letters, digits, dollar signs ($) and underscores (_). They can't start with digits.</p>\n\n<p>Usually libraries use <code>$</code> and <code>_</code> as shortcuts for functions that you'll be using everywhere. Although the names <code>$</code> or <code>_</code> aren't meaningful, they're useful for their shortness and since you'll be using the function everywhere you're expected to know what they mean.</p>\n\n<p>If your library doesn't consist on getting a single function being used everywhere, I'd recommend that you use more meaningful names as those will help you and others understand what your code is doing without necessarily compromising the source code <em>niceness</em>.</p>\n\n<p>You could for instance take a look at the awesome <a href=\"http://www.datejs.com\" rel=\"nofollow\">DateJS</a> library and at the syntatic sugar it allows without the need of any <em>symbol</em> or <em>short-named</em> variables.</p>\n\n<p>You should first get your code to be practical, and only after try making it pretty.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Actually, ECMAScript says on page 15:\nThat an identifier may start with a $, an underscore or a UnicodeLetter, and then it goes on (just below that) to specify that a UnicodeLetter can be any character from the unicode catagories, Lo, Ll, Lu, Lt, Lm and Nl.\nAnd when you look up those catagories you will see that this opens up a lot more possibilities than just latin letters. Just search for \"unicode catagories\" in google and you can find them.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>From the ECMAScript specification in section <a href=\"http://www.ecmascript.org/docs.php\">7.6 Identifier Names and Identifiers</a>, a valid identifier is defined as:</p>\n\n<pre><code>Identifier :: \n    IdentifierName but not ReservedWord\n\nIdentifierName :: \n    IdentifierStart \n    IdentifierName IdentifierPart \n\nIdentifierStart :: \n    UnicodeLetter \n    $ \n    _ \n    \\ UnicodeEscapeSequence \n\nIdentifierPart :: \n    IdentifierStart \n    UnicodeCombiningMark \n    UnicodeDigit \n    UnicodeConnectorPunctuation \n    \\ UnicodeEscapeSequence \n\nUnicodeLetter \n    any character in the Unicode categories \u201cUppercase letter (Lu)\u201d, \u201cLowercase letter (Ll)\u201d, \u201cTitlecase letter (Lt)\u201d, \n    \u201cModifier letter (Lm)\u201d, \u201cOther letter (Lo)\u201d, or \u201cLetter number (Nl)\u201d. \n\nUnicodeCombiningMark \n    any character in the Unicode categories \u201cNon-spacing mark (Mn)\u201d or \u201cCombining spacing mark (Mc)\u201d \n\nUnicodeDigit \n    any character in the Unicode category \u201cDecimal number (Nd)\u201d \n\nUnicodeConnectorPunctuation \n    any character in the Unicode category \u201cConnector punctuation (Pc)\u201d \n\nUnicodeEscapeSequence \n    see 7.8.4. \n\nHexDigit :: one of \n    0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F\n</code></pre>\n\n<p>which creates a lot of opportunities for naming variables and also in golfing. Let's try some examples.</p>\n\n<p>A valid identifier could start with either a <code>UnicodeLetter</code>, <code>$</code>, <code>_</code>,  or <code>\\ UnicodeEscapeSequence</code>. A unicode letter is any character from these categories (<a href=\"http://www.dpawson.co.uk/xsl/rev2/UnicodeCategories.html\">see all categories</a>):</p>\n\n<ul>\n<li>Uppercase letter (Lu)</li>\n<li>Lowercase letter (Ll)</li>\n<li>Titlecase letter (Lt)</li>\n<li>Modifier letter (Lm)</li>\n<li>Other letter (Lo)</li>\n<li>Letter number (Nl)</li>\n</ul>\n\n<p>This alone accounts for some crazy possibilities - <a href=\"http://jsfiddle.net/JYZtk/1/\">working examples</a>. If it doesn't work in all browsers, then call it a bug, cause it should.</p>\n\n<pre><code>var \u1fa9 = \"something\";\nvar \u0126\u0114\u013d\u013b\u014e = \"hello\";\nvar \u3031\u3031\u3031\u3031 = \"less than? wtf\";\nvar \u091c\u093e\u0935\u093e\u0938\u094d\u0915\u094d\u0930\u093f\u092a\u094d\u091f = \"javascript\"; // ok that's JavaScript in hindi\nvar KingGeorge\u2166 = \"Roman numerals, awesome!\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>Before JavaScript 1.5: <code>^[a-zA-Z_$][0-9a-zA-Z_$]*$</code></p>\n\n<p><em>In English:</em> It must start with a dollar sign, underscore or one of letters in the 26-character alphabet, upper or lower case. Subsequent characters (if any) can be one of any of those or a decimal digit.</p>\n\n<p>JavaScript 1.5 and later <strong>*</strong> : <code>^[\\p{L}\\p{Nl}$_][\\p{L}\\p{Nl}$\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}]*$</code></p>\n\n<p>This is more difficult to express in English, but it is conceptually similar to the older syntax with the addition that the letters and digits can be from any language. After the first character, there  are also allowed additional underscore-like characters (collectively called \u201cconnectors\u201d) and additional character combining marks (\u201cmodifiers\u201d). (Other currency symbols are not included in this extended set.)</p>\n\n<p>JavaScript 1.5 and later also allows Unicode escape sequences, <strong><em>provided that</em></strong> the result is a character that would be allowed in the above regular expression.</p>\n\n<p>Identifiers also must not be a current reserved word or one that is considered for future use.</p>\n\n<p>There is no practical limit to the length of an identifier. (Browsers vary, but you\u2019ll safely have 1000 characters and probably several more orders of magnitude than that.)</p>\n\n<p><strong>Links to the character categories:</strong></p>\n\n<ul>\n<li>Letters: <a href=\"http://www.fileformat.info/info/unicode/category/Lu/list.htm\">Lu</a>, <a href=\"http://www.fileformat.info/info/unicode/category/Ll/list.htm\">Ll</a>, <a href=\"http://www.fileformat.info/info/unicode/category/Lt/list.htm\">Lt</a>, <a href=\"http://www.fileformat.info/info/unicode/category/Lm/list.htm\">Lm</a>, <a href=\"http://www.fileformat.info/info/unicode/category/Lo/list.htm\">Lo</a>, <a href=\"http://www.fileformat.info/info/unicode/category/Nl/list.htm\">Nl</a><br/>(combined in the regex above as \u201cL\u201d)</li>\n<li>Combining marks (\u201cmodifiers\u201d): <a href=\"http://www.fileformat.info/info/unicode/category/Mn/list.htm\">Mn</a>, <a href=\"http://www.fileformat.info/info/unicode/category/Mc/list.htm\">Mc</a></li>\n<li>Digits: <a href=\"http://www.fileformat.info/info/unicode/category/Nd/list.htm\">Nd</a></li>\n<li>Connectors: <a href=\"http://www.fileformat.info/info/unicode/category/Pc/list.htm\">Pc</a></li>\n</ul>\n\n<hr>\n\n<p>*<strong>n.b.</strong> <em>This Perl regex is intended to describe the syntax only \u2014 it won\u2019t work in JavaScript, which doesn\u2019t (yet) include support for Unicode Properties. (There are some third-party packages that claim to add such support.)</em></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><strong>The accepted answer would rule out a lot of valid identifiers</strong>, as far as I can see. Here is a regular expression that I put together which should follow <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" rel=\"nofollow\">the spec</a> (see chapter 7.6 on identifiers). Created it using RegexBuddy and you can find an export of the explanation at <a href=\"http://samples.geekality.net/js-identifiers\" rel=\"nofollow\">http://samples.geekality.net/js-identifiers</a>.</p>\n\n<pre><code>^[$_\\p{L}][$_\\p{L}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\u200C\\u200D]*+$\n</code></pre>\n\n<p>In addition, the name cannot be one of the following reserved words.</p>\n\n<blockquote>\n  <p>break, do, instanceof, typeof, case, else, new, var, catch, finally, return, void, continue, for, switch, while, debugger, function, this, with, default, if, throw, delete, in, try, class, enum, extends, super, const, export, import, implements, let, private, public, yield, interface, package, protected, static, null, true, false</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>To quote <a href=\"http://mathiasbynens.be/notes/javascript-identifiers\"><em><strong>Valid JavaScript variable names</strong></em></a>, my write-up summarizing the relevant spec sections:</p>\n\n<blockquote>\n  <p>An identifier must start with <code>$</code>, <code>_</code>, or any character in the Unicode categories <a href=\"http://graphemica.com/categories/uppercase-letter\">\u201cUppercase letter (Lu)\u201d</a>, <a href=\"http://graphemica.com/categories/lowercase-letter\">\u201cLowercase letter (Ll)\u201d</a>, <a href=\"http://graphemica.com/categories/titlecase-letter\">\u201cTitlecase letter (Lt)\u201d</a>, <a href=\"http://graphemica.com/categories/modifier-letter\">\u201cModifier letter (Lm)\u201d</a>, <a href=\"http://graphemica.com/categories/other-letter\">\u201cOther letter (Lo)\u201d</a>, or <a href=\"http://graphemica.com/categories/letter-number\">\u201cLetter number (Nl)\u201d</a>.</p>\n  \n  <p>The rest of the string can contain the same characters, plus any <em>U+200C zero width non-joiner</em> characters, <em>U+200D zero width joiner</em> characters, and characters in the Unicode categories <a href=\"http://graphemica.com/unicode/categories/nonspacing-mark\">\u201cNon-spacing mark (Mn)\u201d</a>, <a href=\"http://graphemica.com/categories/spacing-combining-mark\">\u201cSpacing combining mark (Mc)\u201d</a>, <a href=\"http://graphemica.com/categories/decimal-digit-number\">\u201cDecimal digit number (Nd)\u201d</a>, or <a href=\"http://graphemica.com/categories/connector-punctuation\">\u201cConnector punctuation (Pc)\u201d</a>.</p>\n</blockquote>\n\n<p>I\u2019ve also created <a href=\"http://mothereff.in/js-variables\">a tool</a> that will tell you if any string that you enter is a valid JavaScript variable name according to ECMAScript 5.1 and Unicode 6.1:</p>\n\n<p><a href=\"http://mothereff.in/js-variables\"><img src=\"http://i.imgur.com/GNv5t.png\" alt=\"JavaScript variable name validator\"></a></p>\n\n<hr>\n\n<p>P.S. To give you an idea of how wrong Anthony Mills' answer is: if you were to summarize all these rules in a single ASCII-only regular expression for JavaScript, <strong>it would be 11,236 characters long</strong>. Here it is:</p>\n\n<pre><code>// ES5.1 / Unicode 6.1\n/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 659
                },
                {
                    "body": "<p>Here is one quick suggestion for creating variable names. If you want the variable not to conflict when being used in FireFox, <strong>do not</strong> use the variable name \"<strong>_content</strong>\" as this variable name is already being used by the browser. I found this out the hard way and had to change all of the places I used the variable \"_content\" in a large JavaScript application.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>in case regular expressions is not a must, wouldn't it be better to just ask the browser to decide using <code>eval</code> ?</p>\n\n<pre><code>function isValidVarName( name ) {\n    try {\n        eval('(function() { var ' + name + '; })()');\n    } catch( e ) {\n        return false;\n    }\n    return true;\n}\n\nisValidVarName('my_var');     // true\nisValidVarName('1');          // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think what you're looking for is to create functions as attributes in objects.</p>\n\n<p>make a new object with your \"library\" name. then, for every function (or variable) you want in that library, make a new attribute.</p>\n\n<p>example:</p>\n\n<pre><code>var myMath = {\n    addition: function(a,b) {\n        return a+b;\n    },\n    subtraction: function(a,b) {\n        return a-b;\n    }\n}\n</code></pre>\n\n<p>now, you can use your function's as such:</p>\n\n<pre><code>myMath.addition(5,6);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Just wondering if anyone can point me to a webpage detailing the valid characters that can be used for naming a JavaScript variable.  </p>\n\n<p>I want to create a small 'extension library' for my non-javascript users here at work (who all seem to be squeamish when it comes to the language).  I love how jQuery and Prototype have both used the '$' dollar sign, and since I use jQuery, I'm looking for another nice one character symbol to use.  </p>\n\n<p>I realize that I could just test out a number of characters, but I'm posing this question to the JavaScript Sensi's of the world to give me advice about what characters (even if valid) would be a bad idea to use (perhaps for future integration with another popular library).</p>\n",
            "last_activity_date": 1410423293,
            "question_id": 1661197,
            "score": 350,
            "tags": [
                "javascript"
            ],
            "title": "Valid Characters for JavaScript Variable Names"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>From the <a href=\"http://docs.jquery.com/Ajax/jQuery.ajax\">Jquery docs</a>: you specify the <strong>async</strong> option to be <strong>false</strong> to get a synchronous Ajax request.  Then your callback can set some data before your mother function proceeds.</p>\n\n<p>Here's what your code would look like if changed as suggested:</p>\n\n<pre><code>beforecreate: function(node,targetNode,type,to) {\n    jQuery.ajax({\n         url:    'http://example.com/catalog/create/' \n                  + targetNode.id \n                  + '?name=' \n                  + encode(to.inp[0].value),\n         success: function(result) {\n                      if(result.isOk == false)\n                          alert(result.message);\n                  },\n         async:   false\n    });          \n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 542
                },
                {
                    "body": "<p>Good Post I was trying to do this and I wasn't setting the async to false.<br />\nI'm using <a href=\"http://malsup.com/jquery/block/\">BlockUI</a> which \"grays\" out the screen and displays a loading message while the server is doing the work. </p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Excellent solution!  I noticed when I tried to implement it that if I returned a value in the success clause, it came back as undefined.  I had to store it in a variable and return that variable.  This is the method I came up with:</p>\n\n<pre><code>function getWhatever() {\n  // strUrl is whatever URL you need to call\n  var strUrl = \"\", strReturn = \"\";\n\n  jQuery.ajax({\n    url: strUrl,\n    success: function(html) {\n      strReturn = html;\n    },\n    async:false\n  });\n\n  return strReturn;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>You can put the JQuery's AJAX setup in synchronous mode by calling</p>\n\n<pre><code>jQuery.ajaxSetup({async:false});\n</code></pre>\n\n<p>and then perform your ajax calls using jQuery.get( ... );</p>\n\n<p>then just turning it on again once </p>\n\n<pre><code>jQuery.ajaxSetup({async:true});\n</code></pre>\n\n<p>I guess it works out the same thing as suggested by @Adam but might be helpful to someone that does want to reconfigure their jQuery.get() or jQuery.post() to the more elaborate jQuery.ajax() syntax</p>\n",
                    "is_accepted": false,
                    "score": 132
                },
                {
                    "body": "<p>Make the get request without a callback function and it will be \"synchronous\". For e.g.</p>\n\n<pre><code>var result = jQuery.get('http://example.com/catalog/create/');\nvar responseText = result.responseText;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -14
                },
                {
                    "body": "<pre><code>function getURL(url){\n    return $.ajax({\n        type: \"GET\",\n        url: url,\n        cache: false,\n        async: false\n    }).responseText;\n}\n\n\n//example use\nvar msg=getURL(\"message.php\");\nalert(msg);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>All of these answers miss the point that doing an AJAX call with async:false will cause the browser to hang until the AJAX request completes. Using a flow control library will solve this problem without hanging up the browser.  Here is an example with <a href=\"https://github.com/bishopZ/Frame.js\">Frame.js</a>:</p>\n\n<pre><code>beforecreate: function(node,targetNode,type,to) { \n\n    Frame(function(next)){ \n\n        jQuery.get('http://example.com/catalog/create/', next);\n\n    });\n    Frame(function(next, response)){ \n\n        alert(response);\n        next();\n\n    });\n    Frame.init();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>This is example:</p>\n\n<pre><code>$.ajax({\n  url: \"test.html\",\n  async: false\n}).done(function(data) {\n   // Todo something..\n}).fail(function(xhr)  {\n   // Todo something..\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I used the answer given by Carcione and modified it to use JSON.</p>\n\n<pre><code> function getUrlJsonSync(url){\n\n    var jqxhr = $.ajax({\n        type: \"GET\",\n        url: url,\n        dataType: 'json',\n        cache: false,\n        async: false\n    });\n\n    // 'async' has to be 'false' for this to work\n    var response = {valid: jqxhr.statusText,  data: jqxhr.responseJSON};\n\n    return response;\n}    \n\nfunction testGetUrlJsonSync()\n{\n    var reply = getUrlJsonSync(\"myurl\");\n\n    if (reply.valid == 'OK')\n    {\n        console.dir(reply.data);\n    }\n    else\n    {\n        alert('not valid');\n    }    \n}\n</code></pre>\n\n<p>I added the <strong>dataType</strong> of <strong>'json'</strong> and changed the <strong>.responseText</strong> to <strong>responseJSON</strong>.</p>\n\n<p>I also retrieved the status using the <strong>statusText</strong> property of the returned object. Note, that this is the status of the Ajax response, not whether the JSON is valid.</p>\n\n<p>The backend has to return the response in correct (well-formed) JSON, otherwise the returned object will be undefined.</p>\n\n<p>There are two aspects to consider when answering the original question. One is telling Ajax to perform synchronously (by setting <strong>async: false</strong>) and the other is returning the response via the calling function's return statement, rather than into a callback function. </p>\n\n<p>I also tried it with POST and it worked. </p>\n\n<p>I changed the GET to POST and added <strong>data: postdata</strong></p>\n\n<pre><code>function postUrlJsonSync(url, postdata){\n\n    var jqxhr = $.ajax({\n        type: \"POST\",\n        url: url,\n        data: postdata,\n        dataType: 'json',\n        cache: false,\n        async: false\n    });\n\n    // 'async' has to be 'false' for this to work\n    var response = {valid: jqxhr.statusText,  data: jqxhr.responseJSON};\n\n    return response;\n}\n</code></pre>\n\n<p>Note that the above code only works in the case where <strong>async</strong> is <strong>false</strong>. If you were to set <strong>async:true</strong> the returned object <strong>jqxhr</strong> would not be valid at the time the ajax call returns, only later when the asynchronous call has finished, but that is much too late to set the <strong>response</strong> variable.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>js client side code</h2>\n\n<pre><code>function isValidLogin() {\n    var flag = false;\n    var Response = $.ajax({\n        type: \"POST\",\n        dataType: \"json\",\n        contentType: \"application/json; charset=utf-8\",\n        url: \"UPSLabelFormCA.aspx/IsValidLogin\",\n        async: false\n    }).responseText;\n\n    var toJson = jQuery.parseJSON(Response);\n    if (toJson.d[0].Message == 'SUCCESS') {\n        flag = true;\n    }\n    return flag;\n}\n</code></pre>\n\n<h2>asp.net server side code</h2>\n\n<pre><code>[WebMethod]\n        public static List&lt;ShipInfo&gt; IsValidLogin()\n        {\n            List&lt;ShipInfo&gt; loginStatus = new List&lt;ShipInfo&gt;();\n            if (HttpContext.Current.User.Identity.IsAuthenticated &amp;&amp; HttpContext.Current.Session[\"Email\"] != null)\n            {\n                loginStatus.Add(new ShipInfo() { Success = true, Message = \"SUCCESS\" });\n            }\n            else\n            {\n\n                loginStatus.Add(new ShipInfo() { Success = false, Message = \"FAILED\" });\n            }\n            return loginStatus;\n\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a JavaScript widget which provides standard extension points. One of them is the <code>beforecreate</code> function. It should return <code>false</code> to prevent an item from being created. </p>\n\n<p>I've added an AJAX call into this function using jQuery:</p>\n\n<pre><code>beforecreate: function (node, targetNode, type, to) {\n  jQuery.get('http://example.com/catalog/create/' + targetNode.id + '?name=' + encode(to.inp[0].value),\n\n  function (result) {\n    if (result.isOk == false) alert(result.message);\n  });\n}\n</code></pre>\n\n<p>But I want to prevent my widget from creating the item, so I should return <code>false</code> in the mother-function, not in the callback. Is there any way to perform a synchronized AJAX request using jQuery or any other API? Thanks.</p>\n",
            "last_activity_date": 1418953459,
            "question_id": 133310,
            "score": 463,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "asynchronous"
            ],
            "title": "How can I get jQuery to perform a synchronous, rather than asynchronous, AJAX request?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I tore my hair out over this one too. Your code only works if the user has granted an extended permission for that which is not ideal.</p>\n\n<p><a href=\"http://www.chilipepperdesign.com/2011/02/15/reveal-fan-gate-like-gate-facebook-iframe-tab-tutorial-with-php\">Here's another approach.</a></p>\n\n<p>In a nutshell, if you turn on the \"OAuth 2.0 for Canvas\" advanced option, Facebook will send a $_REQUEST['signed_request'] along with every page requested within your tab app. If you parse that signed_request you can get some info about the user including if they've liked the page or not.</p>\n\n<pre><code>function parsePageSignedRequest() {\n    if (isset($_REQUEST['signed_request'])) {\n      $encoded_sig = null;\n      $payload = null;\n      list($encoded_sig, $payload) = explode('.', $_REQUEST['signed_request'], 2);\n      $sig = base64_decode(strtr($encoded_sig, '-_', '+/'));\n      $data = json_decode(base64_decode(strtr($payload, '-_', '+/'), true));\n      return $data;\n    }\n    return false;\n  }\n  if($signed_request = parsePageSignedRequest()) {\n    if($signed_request-&gt;page-&gt;liked) {\n      echo \"This content is for Fans only!\";\n    } else {\n      echo \"Please click on the Like button to view this tab!\";\n    }\n  }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>i use jquery to send the data when the user press the like button.</p>\n\n<pre><code>&lt;script&gt;\n  window.fbAsyncInit = function() {\n    FB.init({appId: 'xxxxxxxxxxxxx', status: true, cookie: true,\n             xfbml: true});\n\n                 FB.Event.subscribe('edge.create', function(href, widget) {\n$(document).ready(function() { \n\nvar h_fbl=href.split(\"/\");\nvar fbl_id= h_fbl[4]; \n\n\n $.post(\"http://xxxxxx.com/inc/like.php\",{ idfb:fbl_id,rand:Math.random() } )\n\n}) });\n  };\n\n&lt;/script&gt;\n</code></pre>\n\n<p>Note:you can use some hidden input text to get the id of your button.in my case i take it from the url itself in  \"var fbl_id=h_fbl[4];\" becasue there is the id example:\nurl:\n<a href=\"http://mywebsite.com/post/22/some-tittle\" rel=\"nofollow\">http://mywebsite.com/post/22/some-tittle</a></p>\n\n<p>so i parse the url to get the id and then insert it to my databse in the like.php file.\nin this way you dont need to ask for permissions to know if some one press the like button, but if you whant to know who press it, permissions are needed.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use (PHP)</p>\n\n<pre><code>$isFan = file_get_contents(\"https://api.facebook.com/method/pages.isFan?format=json&amp;access_token=\" . USER_TOKEN . \"&amp;page_id=\" . FB_FANPAGE_ID);\n</code></pre>\n\n<p>That will return one of three:</p>\n\n<ul>\n<li>string true string false json</li>\n<li>formatted response of error if token</li>\n<li>or page_id are not valid</li>\n</ul>\n\n<p>I guess the only not-using-token way to achieve this is with the signed_request Jason Siffring just posted. My helper using PHP SDK:</p>\n\n<pre><code>function isFan(){\n    global $facebook;\n    $request = $facebook-&gt;getSignedRequest();\n    return $request['page']['liked'];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>You can do it in JavaScript like so (Building off of <a href=\"http://stackoverflow.com/questions/6246449/facebook-how-to-check-if-user-has-liked-page-and-show-content/6314568#6314568\">@dwarfy's response to a similar question</a>):</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n      div#container_notlike, div#container_like {\n        display: none;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"fb-root\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n      window.fbAsyncInit = function() {\n        FB.init({\n          appId      : 'YOUR_APP_ID', // App ID\n          channelUrl : 'http(s)://YOUR_APP_DOMAIN/channel.html', // Channel File\n          status     : true, // check login status\n          cookie     : true, // enable cookies to allow the server to access the session\n          xfbml      : true  // parse XFBML\n        });\n\n        FB.getLoginStatus(function(response) {\n          var page_id = \"YOUR_PAGE_ID\";\n          if (response &amp;&amp; response.authResponse) {\n            var user_id = response.authResponse.userID;\n            var fql_query = \"SELECT uid FROM page_fan WHERE page_id = \"+page_id+\"and uid=\"+user_id;\n            FB.Data.query(fql_query).wait(function(rows) {\n              if (rows.length == 1 &amp;&amp; rows[0].uid == user_id) {\n                console.log(\"LIKE\");\n                $('#container_like').show();\n              } else {\n                console.log(\"NO LIKEY\");\n                $('#container_notlike').show();\n              }\n            });\n          } else {\n            FB.login(function(response) {\n              if (response &amp;&amp; response.authResponse) {\n                var user_id = response.authResponse.userID;\n                var fql_query = \"SELECT uid FROM page_fan WHERE page_id = \"+page_id+\"and uid=\"+user_id;\n                FB.Data.query(fql_query).wait(function(rows) {\n                  if (rows.length == 1 &amp;&amp; rows[0].uid == user_id) {\n                    console.log(\"LIKE\");\n                    $('#container_like').show();\n                  } else {\n                    console.log(\"NO LIKEY\");\n                    $('#container_notlike').show();\n                  }\n                });\n              } else {\n                console.log(\"NO LIKEY\");\n                $('#container_notlike').show();\n              }\n            }, {scope: 'user_likes'});\n          }\n        });\n      };\n\n      // Load the SDK Asynchronously\n      (function(d){\n        var js, id = 'facebook-jssdk'; if (d.getElementById(id)) {return;}\n        js = d.createElement('script'); js.id = id; js.async = true;\n        js.src = \"//connect.facebook.net/en_US/all.js\";\n        d.getElementsByTagName('head')[0].appendChild(js);\n      }(document));\n    &lt;/script&gt;\n\n    &lt;div id=\"container_notlike\"&gt;\n      YOU DON'T LIKE ME :(\n    &lt;/div&gt;\n\n    &lt;div id=\"container_like\"&gt;\n      YOU LIKE ME :)\n    &lt;/div&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Where the channel.html file on your server just contains the line:</p>\n\n<pre><code> &lt;script src=\"//connect.facebook.net/en_US/all.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>There is a little code duplication in there, but you get the idea. This will pop up a login dialog the first time the user visits the page (which isn't exactly ideal, but works). On subsequent visits nothing should pop up though.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Though this post has been here for quite a while, the solutions are not pure JS. Though <a href=\"http://stackoverflow.com/a/5100287/368003\">Jason</a> noted that requesting permissions is not ideal, I consider it a good thing since the user can reject it explicitly. I still post this code, though (almost) the same thing can also be seen in <a href=\"http://stackoverflow.com/a/4971560/368003\">another post by ifaour</a>. Consider this the JS only version without too much attention to detail. </p>\n\n<p>The basic code is rather simple:</p>\n\n<pre><code>FB.api(\"me/likes/SOME_ID\", function(response) {\n    if ( response.data.length === 1 ) { //there should only be a single value inside \"data\"\n        console.log('You like it');\n    } else {\n        console.log(\"You don't like it\");\n    }\n});\n</code></pre>\n\n<p>ALternatively, replace <code>me</code> with the proper UserID of someone else (you might need to alter the permissions below to do this, like <code>friends_likes</code>) As noted, you need more than the basic permission:</p>\n\n<pre><code>FB.login(function(response) {\n    //do whatever you need to do after a (un)successfull login         \n}, { scope: 'user_likes' });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>I think I'm going crazy. I can't get it to work.<br>\nI simply want to check if a user has liked my page with javascript in an <code>iFrame</code> app.</p>\n\n<pre><code>FB.api({\n    method:     \"pages.isFan\",\n    page_id:        my_page_id,\n},  function(response) {\n        console.log(response);\n        if(response){\n            alert('You Likey');\n        } else {\n            alert('You not Likey :(');\n        }\n    }\n);\n</code></pre>\n\n<p>This returns: False<br>\nBut I'm a fan of my page so shouldn't it return true?!</p>\n",
            "last_activity_date": 1353064792,
            "question_id": 5093398,
            "score": 91,
            "tags": [
                "javascript",
                "facebook",
                "facebook-graph-api"
            ],
            "title": "How to check if a user likes my Facebook Page or URL using Facebook&#39;s API"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You have to use <a href=\"http://www.w3schools.com/jsref/jsref_eval.asp\">eval()</a> to execute any script code that you've inserted as DOM text.</p>\n\n<p>MooTools will do this for you automatically, and I'm sure jQuery would as well (depending on the version. jQuery version 1.6+ uses <code>eval</code>).  This saves a lot of hassle of parsing out <code>&lt;script&gt;</code> tags and escaping your content, as well as a bunch of other \"gotchas\".</p>\n\n<p>Generally if you're going to <code>eval()</code> it yourself, you want to create/send the script code without any HTML markup such as <code>&lt;script&gt;</code>, as these will not <code>eval()</code> properly.</p>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<p>Yes you can, but you have to do it outside of the DOM and the order has to be right.</p>\n\n<pre><code>var scr = '&lt;scr'+'ipt&gt;alert(\"foo\")&lt;/scr'+'ipt&gt;';\nwindow.onload = function(){\n    var n = document.createElement(\"div\");\n    n.innerHTML = scr;\n    document.body.appendChild(n);\n}\n</code></pre>\n\n<p>...will alert 'foo'. This won't work:</p>\n\n<pre><code>document.getElementById(\"myDiv\").innerHTML = scr;\n</code></pre>\n\n<p>And even this won't work, because the node is inserted first:</p>\n\n<pre><code>var scr = '&lt;scr'+'ipt&gt;alert(\"foo\")&lt;/scr'+'ipt&gt;';\nwindow.onload = function(){\n    var n = document.createElement(\"div\");\n    document.body.appendChild(n);\n    n.innerHTML = scr;\t\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a very interesting solution to your problem:\n<a href=\"http://24ways.org/2005/have-your-dom-and-script-it-too\">http://24ways.org/2005/have-your-dom-and-script-it-too</a></p>\n\n<p>So use this instead of script tags:</p>\n\n<p><code>&lt;img src=\"empty.gif\" onload=\"alert('test');this.parentNode.removeChild(this);\" /&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>You can create script and then inject the content. </p>\n\n<pre><code>var g = document.createElement('script');\nvar s = document.getElementsByTagName('script')[0];\ng.text = \"alert(\\\"hi\\\");\"\ns.parentNode.insertBefore(g, s);\n</code></pre>\n\n<p><strong>This works in all browsers :)</strong></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Execute  (Java Script) tag from innerHTML</p>\n\n<p>Replace your script element with div having a class attribute class=\"javascript\" and close it with <code>&lt;/div&gt;</code></p>\n\n<p>Don't change the content that you want to execute (previously it was in script tag and now it is in div tag)   </p>\n\n<p>Add a style in your page...</p>\n\n<p><code>&lt;style type=\"text/css\"&gt; .javascript { display: none; } &lt;/style&gt;</code></p>\n\n<p>Now run  eval using jquery(Jquery js should be already included)</p>\n\n<pre><code>   $('.javascript').each(function() {\n      eval($(this).text());\n\n    });`\n</code></pre>\n\n<p>You can explore more <a href=\"http://knowledge-serve.blogspot.in/2013/01/execute-scripts-inside.html\" rel=\"nofollow\">here</a>, at my blog.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I used this code, it is working fine</p>\n\n<pre><code>var arr = MyDiv.getElementsByTagName('script')\nfor (var n = 0; n &lt; arr.length; n++)\n    eval(arr[n].innerHTML)//run script inside div\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>i tried this, its working...thnxs mwilcox</p>\n\n<pre><code>var maint = document.getElementById(\"maint\");\n  maint.innerHTML = '';\n  var inner = '&lt;form &gt;'+\n                      'add new member:-&lt;br&gt;'+\n                      '&lt;input type=\"text\" name=\"namea\" placeholder=\"enter ur name\"&gt;'+\n                     '&lt;/form &gt;';\n\n  maint.innerHTML =inner;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a method that recursively replaces all scripts with executable ones: </p>\n\n<pre><code>function replaceScriptsRecurse(node) {                                                      \n        if ( nodeScriptIs(node) ) {                                                         \n                var script  = document.createElement(\"script\");                             \n                script.text = node.innerHTML;                                               \n\n                node.parentNode.replaceChild(script, node);                                 \n        }                                                                                   \n        else {                                                                              \n                var i        = 0;                                                           \n                var children = node.childNodes;                                             \n                while ( i &lt; children.length) {                                              \n                        replaceScriptsRecurse( children[i] );                               \n                        i++;                                                                \n                }                                                                           \n        }                                                                                   \n\n        return node;                                                                        \n}                                                                                           \nfunction nodeScriptIs(node) {                                                               \n        return node.getAttribute &amp;&amp; node.getAttribute(\"type\") == \"text/javascript\";         \n}                                                                                                                                                                                                                                                                         \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Krasimir Tsonev has a great solution that overcome all problems.\nHis method doesn't need using eval, so no performance nor security problems exist.\nIt allows you to set innerHTML string contains html with js and translate it immediately to an DOM element while also executes the js parts exist along the code. short ,simple, and works exactly as you want.</p>\n\n<p>Enjoy his solution:</p>\n\n<p><a href=\"http://krasimirtsonev.com/blog/article/Convert-HTML-string-to-DOM-element\" rel=\"nofollow\">http://krasimirtsonev.com/blog/article/Convert-HTML-string-to-DOM-element</a></p>\n\n<p>Important notes:</p>\n\n<ol>\n<li>You need to wrap the target element with div tag</li>\n<li>You need to wrap the src string with div tag.</li>\n<li>If you write the src string directly and it includes js parts, please take attention to write the closing script tags correctly (with \\ before /) as this is a string. </li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use <code>$(parent).html(code)</code> instead of <code>parent.innerHTML = code</code>.</p>\n\n<pre><code>var oldDocumentWrite = document.write;\nvar oldDocumentWriteln = document.writeln;\ntry {\n    document.write = function(code) {\n        $(parent).append(code);\n    }\n    document.writeln = function(code) {\n        document.write(code + \"&lt;br/&gt;\");\n    }\n    $(parent).html(html); \n} finally {\n    $(window).load(function() {\n        document.write = oldDocumentWrite\n        document.writeln = oldDocumentWriteln\n    })\n}\n</code></pre>\n\n<p>This also works with scripts that use <code>document.write</code> and scripts loaded via <code>src</code> attribute. Unfortunately even this doesn't work with Google AdSense scripts.</p>\n\n<p>(Taken from my post  <a href=\"http://stackoverflow.com/questions/2592092/executing-script-elements-inserted-with-innerhtml\">here</a>)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Append the  tag into head after putting text in innerHTML and it will run</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I tried to load some scripts into a page using <code>innerHTML</code> on a <code>&lt;div&gt;</code>. It appears that the script loads into the DOM, but it is never executed (at least in Firefox and Chrome). Is there a way to have scripts execute when inserting them with <code>innerHTML</code>?</p>\n\n<p>Sample code:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;body onload=\"document.getElementById('loader').innerHTML = '&lt;script&gt;alert(\\'hi\\')&lt;\\/script&gt;'\"&gt;\n  Shouldn't an alert saying 'hi' appear?\n  &lt;div id=\"loader\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n",
            "last_activity_date": 1421354271,
            "question_id": 1197575,
            "score": 63,
            "tags": [
                "javascript",
                "html",
                "dom",
                "innerhtml"
            ],
            "title": "Can scripts be inserted with innerHTML?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<pre><code>for(key in p) {\n  alert( p[key] );\n}\n</code></pre>\n\n<p>Note: you can do this over arrays, but you'll iterate over the <code>length</code> and other properties, too.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can just iterate over it like:</p>\n\n<pre><code>for (var key in p) {\n  alert(p[key]);\n}\n</code></pre>\n\n<p>Note that <code>key</code> will not take on the value of the property, it's just an index value.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>You can use the for-in loop as shown by others. However, you also want to make sure that the key you get is an actual property of an object, and doesn't come from the prototype:</p>\n\n<pre><code>for (var key in p) {\n  if (p.hasOwnProperty(key)) {\n    alert(key + \" -&gt; \" + p[key]);\n  }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1152
                },
                {
                    "body": "<p>You have to use the <strong>for-in loop</strong></p>\n\n<p>But be very careful when using this kind of loop, because this will <strong>loop all the properties along the prototype chain</strong>.</p>\n\n<p>Therefore, when using for-in loops, always make use of the <code>hasOwnProperty</code> method to determine if the current property in iteration is really a property of the object you're checking on:</p>\n\n<pre><code>for (prop in p) {\n    if (!p.hasOwnProperty(prop)) {\n        //The current property is not a direct property of p\n        continue;\n    }\n    //Do your logic with the property here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 117
                },
                {
                    "body": "<p>Under ECMAScript 5, you can combine <code>Object.keys()</code> and <code>Array.prototype.forEach()</code>:</p>\n\n<pre>\n    var obj = { first: \"John\", last: \"Doe\" };\n    // Visit non-inherited enumerable keys\n    Object.keys(obj).forEach(function(key) {\n        console.log(key);\n    });\n</pre>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>After looking through all the answers in here, hasOwnProperty isn't required for my own usage because my json object is clean; there's really no sense in adding any additional javascript processing. This is all I'm using:</p>\n\n<pre><code>for (var key in p) {\n    console.log(key + ' =&gt; ' + p[key]);\n    // key is key\n    // value is p[key]\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>var p =\n    {\n        \"p1\": \"value1\",\n        \"p2\": \"value2\",\n        \"p3\": \"value3\"\n    };\n\nfor (var key in p) \n{\n    if (p.hasOwnProperty(key))\n    {\n    alert(key + \" = \" + p[key]);\n    }\n}\n---------------------------\n---------------------------\nOutput:\np1 = values1\np2 = values2\np3 = values3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>via <strong>prototype</strong> with <strong>forEach()</strong> which should skip the <strong>prototype chain</strong> properties:</p>\n\n<pre><code>Object.prototype.each = function(f) {\n    var obj = this\n    Object.keys(obj).forEach( function(key) { \n        f( key , obj[key] ) \n    });\n}\n\n\n//print all keys and values\nvar obj = {a:1,b:2,c:3}\nobj.each(function(key,value) { console.log(key + \" \" + value) });\n// a 1\n// b 2\n// c 3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The question won't be complete if we don't mention about alternative methods for looping through objects.</p>\n\n<p>Nowadays many well known JavaScript libraries provide their own methods for iterating over collections, i.e. over <em>arrays</em>, <em>objects</em>, and <em>array-like objects</em>. These methods are convenient to use and are entirely compatible with any browser.</p>\n\n<ol>\n<li><p>If you work with <strong>jQuery</strong>, you may use <a href=\"http://api.jquery.com/jQuery.each/\"><code>jQuery.each()</code></a> method. It can be used to seamlessly iterate over both objects and arrays:</p>\n\n<pre><code>$.each(obj, function(key, value) {\n    console.log(key, value);\n});\n</code></pre></li>\n<li><p>In <strong>Underscore.js</strong> you can find method <a href=\"http://underscorejs.org/#each\"><code>_.each()</code></a>, which iterates over a list of elements, yielding each in turn to a supplied function (pay attention to the order of arguments in <em>iteratee</em> function!):</p>\n\n<pre><code>_.each(obj, function(value, key) {\n    console.log(key, value);\n});\n</code></pre></li>\n<li><p><strong>Lo-Dash</strong> provides several methods for iterating over object properties. Basic <a href=\"http://lodash.com/docs#forEach\"><code>_.forEach()</code></a> (or it's alias <code>_.each()</code>) is useful for looping through both objects and arrays, however (!) objects with <code>length</code> property are treated like arrays, and to avoid this behavior it is suggested to use <a href=\"http://lodash.com/docs#forIn\"><code>_.forIn()</code></a> and <a href=\"http://lodash.com/docs#forOwn\"><code>_.forOwn()</code></a> methods (these also have <code>value</code> argument coming first):</p>\n\n<pre><code>_.forIn(obj, function(value, key) {\n    console.log(key, value);\n});\n</code></pre>\n\n<p><code>_.forIn()</code> iterates over <em>own and inherited</em> enumerable properties of an object, while <code>_.forOwn()</code> iterates only over <em>own</em> properties of an object (basically checking against <code>hasOwnProperty</code> function). For simple objects and object literals any of these methods will work fine.</p></li>\n</ol>\n\n<p>Generally all described methods have the same behaviour with any supplied objects. Besides using native <code>for..in</code> loop will usually be <em>faster</em> than any abstraction, such as <code>jQuery.each()</code>, these methods are considerably easier to use, require less coding and provide better error handling.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>In ECMAScript 5 you have new approach in iteration fields of literal - <code>Object.keys</code></p>\n\n<p>More information you can see on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">MDN</a></p>\n\n<p>My choice is below as a faster solution in current versions of browsers (Chrome30, IE10, FF25)</p>\n\n<pre><code>var keys = Object.keys(p),\n    len = keys.length,\n    i = 0,\n    prop,\n    value;\nwhile (i &lt; len) {\n    prop = keys[i];\n    value = p[prop];\n    i += 1;\n}\n</code></pre>\n\n<p>You can compare performance of this approach with different implementations on <a href=\"http://jsperf.com/\">jsperf.com</a>:</p>\n\n<ul>\n<li><a href=\"http://jsperf.com/extendimplementations/2\">Extend Implementations</a></li>\n<li><a href=\"http://jsperf.com/object-keys-iteration/30\">Object keys iteration</a></li>\n<li><a href=\"http://jsperf.com/object-literal-iteration/5\">object literal iteration</a></li>\n</ul>\n\n<p>Browser support you can see on <a href=\"http://kangax.github.io/es5-compat-table/#Object.keys\">Kangax's compat table</a></p>\n\n<p>For old browser you have <a href=\"http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\">simple</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">full</a> polyfill</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Besause the asker's ['<em>ultimate goal is to loop through some key value pairs</em>'] and finally don't looking for a loop.</p>\n\n<pre><code>var p ={\"p1\":\"value1\",\"p2\":\"value2\",\"p3\":\"value3\"};\nif('p1' in p){\n  var val=p['p1'];\n  ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a JavaScript object like the following:</p>\n\n<pre><code> var p =\n    {\n        \"p1\": \"value1\",\n        \"p2\": \"value2\",\n        \"p3\": \"value3\"\n    };\n</code></pre>\n\n<p>Now I want to loop through all <code>p</code> elements (<code>p1</code>,<code>p2</code>,<code>p3</code>...) and get their keys and values. How can I do that? I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using <code>eval</code>.</p>\n",
            "last_activity_date": 1421276632,
            "question_id": 684672,
            "score": 583,
            "tags": [
                "javascript"
            ],
            "title": "Loop through JavaScript object"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>If you have download a file, which is saved, as opposed to being in the document, there's no way to determine when the download is complete, since it is not in the scope of the current document, but a separate process in the browser.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>When the user triggers the generation of the file, you could simply assign a unique ID to that \"download\", and send the user to a page which refreshes (or checks with AJAX) every few seconds.  Once the file is finished, save it under that same unique ID and...</p>\n\n<ul>\n<li>If the file is ready, do the download.</li>\n<li>If the file is not ready, show the progress.</li>\n</ul>\n\n<p>Then you can skip the whole iframe/waiting/browserwindow mess, yet have a really elegant solution.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you don't want to generate and store the file on the server, are you willing to store the status, e.g. file-in-progress, file-complete?  Your \"waiting\" page could poll the server to know when the file generation is complete. You wouldn't know for sure that the browser started the download but you'd have some confidence.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I just had this exact same problem. My solution was to use temporary files since I was generating a bunch of temporary files already. The form is submitted with:</p>\n\n<pre><code>var microBox = {\n    show : function(content) {\n        $(document.body).append('&lt;div id=\"microBox_overlay\"&gt;&lt;/div&gt;&lt;div id=\"microBox_window\"&gt;&lt;div id=\"microBox_frame\"&gt;&lt;div id=\"microBox\"&gt;' +\n        content + '&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;');\n        return $('#microBox_overlay');\n    },\n\n    close : function() {\n        $('#microBox_overlay').remove();\n        $('#microBox_window').remove();\n    }\n};\n\n$.fn.bgForm = function(content, callback) {\n    // Create an iframe as target of form submit\n    var id = 'bgForm' + (new Date().getTime());\n    var $iframe = $('&lt;iframe id=\"' + id + '\" name=\"' + id + '\" style=\"display: none;\" src=\"about:blank\"&gt;&lt;/iframe&gt;')\n        .appendTo(document.body);\n    var $form = this;\n    // Submittal to an iframe target prevents page refresh\n    $form.attr('target', id);\n    // The first load event is called when about:blank is loaded\n    $iframe.one('load', function() {\n        // Attach listener to load events that occur after successful form submittal\n        $iframe.load(function() {\n            microBox.close();\n            if (typeof(callback) == 'function') {\n                var iframe = $iframe[0];\n                var doc = iframe.contentWindow.document;\n                var data = doc.body.innerHTML;\n                callback(data);\n            }\n        });\n    });\n\n    this.submit(function() {\n        microBox.show(content);\n    });\n\n    return this;\n};\n\n$('#myForm').bgForm('Please wait...');\n</code></pre>\n\n<p>At the end of the script that generates the file I have:</p>\n\n<pre><code>header('Refresh: 0;url=fetch.php?token=' . $token);\necho '&lt;html&gt;&lt;/html&gt;';\n</code></pre>\n\n<p>This will cause the load event on the iframe to be fired. Then the wait message is closed and the file download will then start. Tested on IE7 and Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The question is to have a \u2018waiting\u2019 indicator while a file is generated and then return to normal once the file is downloading.  The way I like todo this is using a hidden iFrame and hook the frame\u2019s onload event to let my page know when download starts. <strong>BUT</strong> onload does not fire in IE for file downloads (like with the attachment header token). Polling the server works, but I dislike the extra complexity. So here is what I do:</p>\n\n<ul>\n<li>Target the hidden iFrame as usual.</li>\n<li>Generate the content. Cache it with\nan absolute timeout in 2 minutes.</li>\n<li>Send a javascript redirect back to\nthe calling client, essentially calling the\ngenerator page a second time. NOTE: this will cause the onload event to fire in IE because it's acting like a regular page.</li>\n<li>Remove the content from the cache and\nsend it to the client.</li>\n</ul>\n\n<p>Disclaimer, don\u2019t do this on a busy site, because of the caching could add up. But really, if your sites that busy the long running process will starve you of threads anyways.</p>\n\n<p>Here is what the codebehind looks like, which is all you really need.</p>\n\n<pre><code>public partial class Download : System.Web.UI.Page\n{\n    protected System.Web.UI.HtmlControls.HtmlControl Body;\n\n    protected void Page_Load( object sender, EventArgs e )\n    {\n        byte[ ] data;\n        string reportKey = Session.SessionID + \"_Report\";\n\n        // Check is this page request to generate the content\n        //    or return the content (data query string defined)\n        if ( Request.QueryString[ \"data\" ] != null )\n        {\n            // Get the data and remove the cache\n            data = Cache[ reportKey ] as byte[ ];\n            Cache.Remove( reportKey );\n\n            if ( data == null )                    \n                // send the user some information\n                Response.Write( \"Javascript to tell user there was a problem.\" );                    \n            else\n            {\n                Response.CacheControl = \"no-cache\";\n                Response.AppendHeader( \"Pragma\", \"no-cache\" );\n                Response.Buffer = true;\n\n                Response.AppendHeader( \"content-disposition\", \"attachment; filename=Report.pdf\" );\n                Response.AppendHeader( \"content-size\", data.Length.ToString( ) );\n                Response.BinaryWrite( data );\n            }\n            Response.End();                \n        }\n        else\n        {\n            // Generate the data here. I am loading a file just for an example\n            using ( System.IO.FileStream stream = new System.IO.FileStream( @\"C:\\1.pdf\", System.IO.FileMode.Open ) )\n                using ( System.IO.BinaryReader reader = new System.IO.BinaryReader( stream ) )\n                {\n                    data = new byte[ reader.BaseStream.Length ];\n                    reader.Read( data, 0, data.Length );\n                }\n\n            // Store the content for retrieval              \n            Cache.Insert( reportKey, data, null, DateTime.Now.AddMinutes( 5 ), TimeSpan.Zero );\n\n            // This is the key bit that tells the frame to reload this page \n            //   and start downloading the content. NOTE: Url has a query string \n            //   value, so that the content isn't generated again.\n            Body.Attributes.Add(\"onload\", \"window.location = 'binary.aspx?data=t'\");\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>old thread, i know...</p>\n\n<p>but those, that are lead here by google might be interested in my solution.\nit is very simple, yet reliable. and it makes it possible to display real progress messages (and can be easily plugged in to existing processes):</p>\n\n<p>the script that processes (my problem was: retrieving files via http and deliver them as zip) writes the status to the session.</p>\n\n<p>the status is polled and displayed every second. thats all (ok, its not. you have to take care of a lot of details [eg concurrent downloads], but its a good place to start ;-)).</p>\n\n<p>the downloadpage:</p>\n\n<pre><code>    &lt;a href=\"download.php?id=1\" class=\"download\"&gt;DOWNLOAD 1&lt;/a&gt;\n    &lt;a href=\"download.php?id=2\" class=\"download\"&gt;DOWNLOAD 2&lt;/a&gt;\n    ...\n    &lt;div id=\"wait\"&gt;\n    Please wait...\n    &lt;div id=\"statusmessage\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n//this is jquery\n    $('a.download').each(function()\n       {\n        $(this).click(\n             function(){\n               $('#statusmessage').html('prepare loading...');\n               $('#wait').show();\n               setTimeout('getstatus()', 1000);\n             }\n          );\n        });\n    });\n    function getstatus(){\n      $.ajax({\n          url: \"/getstatus.php\",\n          type: \"POST\",\n          dataType: 'json',\n          success: function(data) {\n            $('#statusmessage').html(data.message);\n            if(data.status==\"pending\")\n              setTimeout('getstatus()', 1000);\n            else\n              $('#wait').hide();\n          }\n      });\n    }\n    &lt;/script&gt;\n</code></pre>\n\n<p>getstatus.php</p>\n\n<pre><code>&lt;?php\nsession_start();\necho json_encode($_SESSION['downloadstatus']);\n?&gt;\n</code></pre>\n\n<p>download.php</p>\n\n<pre><code>    &lt;?php\n    session_start();\n    $processing=true;\n    while($processing){\n      $_SESSION['downloadstatus']=array(\"status\"=&gt;\"pending\",\"message\"=&gt;\"Processing\".$someinfo);\n      session_write_close();\n      $processing=do_what_has_2Bdone();\n      session_start();\n    }\n      $_SESSION['downloadstatus']=array(\"status\"=&gt;\"finished\",\"message\"=&gt;\"Done\");\n//and spit the generated file to the browser\n    ?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>One <a href=\"http://gruffcode.com/2010/10/28/detecting-the-file-download-dialog-in-the-browser/\">possible solution</a> uses JavaScript on the client.</p>\n\n<p>The client algorithm:</p>\n\n<ol>\n<li>Generate a random unique token.</li>\n<li>Submit the download request, and include the token in a GET/POST field.</li>\n<li>Show the \"waiting\" indicator.</li>\n<li>Start a timer, and every second or so, look for a cookie named \"fileDownloadToken\" (or whatever you decide).</li>\n<li>If the cookie exists, and its value matches the token, hide the \"waiting\" indicator.</li>\n</ol>\n\n<p>The server algorithm:</p>\n\n<ol>\n<li>Look for the GET/POST field in the request.</li>\n<li>If it has a non-empty value, drop a cookie (e.g. \"fileDownloadToken\"), and set its value to the token's value.</li>\n</ol>\n\n<hr>\n\n<p>Client source code (JavaScript):</p>\n\n<pre><code>  function getCookie( name ) {\n    var parts = document.cookie.split(name + \"=\");\n    if (parts.length == 2) return parts.pop().split(\";\").shift();\n  }\n\n  function expireCookie( cName ) {\n    document.cookie = \n      encodeURIComponent( cName ) +\n      \"=deleted; expires=\" +\n      new Date( 0 ).toUTCString();\n  }\n\n  function setCursor( docStyle, buttonStyle ) {\n    document.getElementById( \"doc\" ).style.cursor = docStyle;\n    document.getElementById( \"button-id\" ).style.cursor = buttonStyle;\n  }\n\n  function setFormToken() {\n    var downloadToken = new Date().getTime();\n    document.getElementById( \"downloadToken\" ).value = downloadToken;\n    return downloadToken;\n  }\n\n  var downloadTimer;\n  var attempts = 30;\n\n  // Prevents double-submits by waiting for a cookie from the server.\n  function blockResubmit() {\n    var downloadToken = setFormToken();\n    setCursor( \"wait\", \"wait\" );\n\n    downloadTimer = window.setInterval( function() {\n      var token = getCookie( \"downloadToken\" );\n\n      if( (token == downloadToken) || (attempts == 0) ) {\n        unblockSubmit();\n      }\n\n      attempts--;\n    }, 1000 );\n  }\n\n  function unblockSubmit() {\n    setCursor( \"auto\", \"pointer\" );\n    window.clearInterval( downloadTimer );\n    expireCookie( \"downloadToken\" );\n  }\n</code></pre>\n\n<p>Example server code (PHP):</p>\n\n<pre><code>    $TOKEN = \"downloadToken\";\n\n    // Sets a cookie so that when the download begins the browser can\n    // unblock the submit button (thus helping to prevent multiple clicks).\n    // The false parameter allows the cookie to be exposed to JavaScript.\n    $this-&gt;setCookieToken( $TOKEN, $_GET[ $TOKEN ], false );\n\n    $result = $this-&gt;sendFile();\n</code></pre>\n\n<p>Where:</p>\n\n<pre><code>  public function setCookieToken(\n    $cookieName, $cookieValue, $httpOnly = true, $secure = false ) {\n\n    // See: http://stackoverflow.com/a/1459794/59087\n    // See: http://shiflett.org/blog/2006/mar/server-name-versus-http-host\n    // See: http://stackoverflow.com/a/3290474/59087\n    setcookie(\n      $cookieName,\n      $cookieValue,\n      2147483647,            // expires January 1, 2038\n      \"/\",                   // your path\n      $_SERVER[\"HTTP_HOST\"], // your domain\n      $secure,               // Use true over HTTPS\n      $httpOnly              // Set true for $AUTH_COOKIE_NAME\n    );\n  }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 211
                },
                {
                    "body": "<p>A very simple (and lame) one line solution is to use the <code>window.onblur()</code> event to close the loading dialog. Of course, if it takes too long and the user decides to do something else (like reading emails) the loading dialog will close.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>i use the following to download blobs and revoke the object-url after the download. it works in chrome and firefox!</p>\n\n<pre><code>function download(blob){\n    var url = URL.createObjectURL(blob);\n    console.log('create ' + url);\n\n    window.addEventListener('focus', window_focus, false);\n    function window_focus(){\n        window.removeEventListener('focus', window_focus, false);                   \n        URL.revokeObjectURL(url);\n        console.log('revoke ' + url);\n    }\n    location.href = url;\n}\n</code></pre>\n\n<p>after the file download dialog is closed, the window gets her focus back so the focus event is triggered.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Create an iframe when button/link is clicked and append this to body.</p>\n\n<pre><code>                  $('&lt;iframe /&gt;')\n                 .attr('src', url)\n                 .attr('id','iframe_download_report')\n                 .hide()\n                 .appendTo('body'); \n</code></pre>\n\n<p>Create an iframe with delay and delete it after download.</p>\n\n<pre><code>                            var triggerDelay =   100;\n                            var cleaningDelay =  20000;\n                            var that = this;\n                            setTimeout(function() {\n                                var frame = $('&lt;iframe style=\"width:1px; height:1px;\" class=\"multi-download-frame\"&gt;&lt;/iframe&gt;');\n                                frame.attr('src', url+\"?\"+ \"Content-Disposition: attachment ; filename=\"+that.model.get('fileName'));\n                                $(ev.target).after(frame);\n                                setTimeout(function() {\n                                    frame.remove();\n                                }, cleaningDelay);\n                            }, triggerDelay);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Based on Elmer's example I've prepared my own solution. After elements click with defined <em>download</em> class it lets to show custom message on the screen. I've used <em>focus</em> trigger to hide the message.</p>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>$(function(){$('.download').click(function() { ShowDownloadMessage(); }); })\n\nfunction ShowDownloadMessage()\n{\n     $('#message-text').text('your report is creating, please wait...');\n     $('#message').show();\n     window.addEventListener('focus', HideDownloadMessage, false);\n}\n\nfunction HideDownloadMessage(){\n    window.removeEventListener('focus', HideDownloadMessage, false);                   \n    $('#message').hide();\n}\n</code></pre>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div id=\"message\" style=\"display: none\"&gt;\n    &lt;div id=\"message-screen-mask\" class=\"ui-widget-overlay ui-front\"&gt;&lt;/div&gt;\n    &lt;div id=\"message-text\" class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable waitmessage\"&gt;please wait...&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Now you should implement any element to download:</p>\n\n<pre><code>&lt;a class=\"download\" href=\"file://www.ocelot.com.pl/prepare-report\"&gt;Download report&lt;/a&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;input class=\"download\" type=\"submit\" value=\"Download\" name=\"actionType\"&gt;\n</code></pre>\n\n<p>After each <em>download</em> click you will see message <strong>your report is creating, please wait...</strong></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm very late to the party but I'll put this up here if anyone else would like to know my solution:</p>\n\n<p>I had a real struggle with this exact problem but I found a viable solution using iframes (I know, I know. It's terrible but it works for a simple problem that I had)</p>\n\n<p>I had an html page that launched a separate php script that generated the file and then downloaded it. On the html page, i used the following jquery in the html header (you'll need to include a jquery library as well):</p>\n\n<pre><code>&lt;script&gt;\n    $(function(){\n        var iframe = $(\"&lt;iframe&gt;\", {name: 'iframe', id: 'iframe',}).appendTo(\"body\").hide();\n        $('#click').on('click', function(){\n            $('#iframe').attr('src', 'your_download_script.php');\n        });\n        $('iframe').load(function(){\n            $('#iframe').attr('src', 'your_download_script.php?download=yes'); &lt;!--on first iframe load, run script again but download file instead--&gt;\n            $('#iframe').unbind(); &lt;!--unbinds the iframe. Helps prevent against infinite recursion if the script returns valid html (such as echoing out exceptions) --&gt;\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>On your_download_script.php, have the following:</p>\n\n<pre><code>function downloadFile($file_path) {\n    if (file_exists($file_path)) {\n        header('Content-Description: File Transfer');\n        header('Content-Type: text/csv');\n        header('Content-Disposition: attachment; filename=' . basename($file_path));\n        header('Expires: 0');\n        header('Cache-Control: must-revalidate');\n        header('Pragma: public');\n        header('Content-Length: ' . filesize($file_path));\n        ob_clean();\n        flush();\n        readfile($file_path);\n        exit();\n    }\n}\n\n\n$_SESSION['your_file'] = path_to_file; //this is just how I chose to store the filepath\n\nif (isset($_REQUEST['download']) &amp;&amp; $_REQUEST['download'] == 'yes') {\n    downloadFile($_SESSION['your_file']);\n} else {\n    *execute logic to create the file*\n}\n</code></pre>\n\n<p>To break this down, jquery first launches your php script in an iframe. The iframe is loaded once the file is generated. Then jquery launches the script again with a request variable telling the script to download the file.</p>\n\n<p>The reason that you can't do the download and file generation all in one go is due to the php header() function. If you use header(), you're changing the script to something other than a web page and jquery will never recognize the download script as being 'loaded'. I know this may not necessarily be detecting when a browser receives a file but your issue sounded similar to mine. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I wrote a simple JavaScript class that implements a technique similar to the one described in bulltorious <a href=\"http://stackoverflow.com/questions/1106377/detect-when-browser-receives-file-download#4168965\">answer</a>. I hope it can be useful to someone here.\nThe GitHub project is called <a href=\"https://github.com/witstep/response-monitor.js\" rel=\"nofollow\">response-monitor.js</a></p>\n\n<p>By default it uses <a href=\"http://fgnass.github.io/spin.js\" rel=\"nofollow\">spin.js</a> as the waiting indicator but it also provides a set of callbacks for implementation of a custom indicator.</p>\n\n<p>JQuery is supported but not required.</p>\n\n<p><strong>Notable features</strong></p>\n\n<ul>\n<li>Simple integration</li>\n<li>No dependencies</li>\n<li>JQuery plug-in (optional)</li>\n<li>Spin.js Integration (optional)</li>\n<li>Configurable callbacks for monitoring events</li>\n<li>Handles multiple simultaneous requests</li>\n<li>Server-side error detection</li>\n<li>Timeout detection</li>\n<li>Cross browser</li>\n</ul>\n\n<p><strong>Example usage</strong></p>\n\n<p>HTML</p>\n\n<pre><code>&lt;!-- the response monitor implementation --&gt;\n&lt;script src=\"response-monitor.js\"&gt;&lt;/script&gt;\n\n&lt;!-- optional JQuery plug-in --&gt;\n&lt;script src=\"response-monitor.jquery.js\"&gt;&lt;/script&gt; \n\n&lt;a class=\"my_anchors\" href=\"/report?criteria1=a&amp;criteria2=b#30\"&gt;Link 1 (Timeout: 30s)&lt;/a&gt;\n&lt;a class=\"my_anchors\" href=\"/report?criteria1=b&amp;criteria2=d#10\"&gt;Link 2 (Timeout: 10s)&lt;/a&gt;\n\n&lt;form id=\"my_form\" method=\"POST\"&gt;\n    &lt;input type=\"text\" name=\"criteria1\"&gt;\n    &lt;input type=\"text\" name=\"criteria2\"&gt;\n    &lt;input type=\"submit\" value=\"Download Report\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Client (plain JavaScript)</p>\n\n<pre><code>//registering multiple anchors at once\nvar my_anchors = document.getElementsByClassName('my_anchors');\nResponseMonitor.register(my_anchors); //clicking on the links initiates monitoring\n\n//registering a single form\nvar my_form = document.getElementById('my_form');\nResponseMonitor.register(my_form); //the submit event will be intercepted and monitored\n</code></pre>\n\n<p>Client (JQuery)</p>\n\n<pre><code>$('.my_anchors').ResponseMonitor();\n$('#my_form').ResponseMonitor({timeout: 20});\n</code></pre>\n\n<p>Client with callbacks (JQuery)</p>\n\n<pre><code>//when options are defined, the default spin.js integration is bypassed\nvar options = {\n    onRequest: function(token){\n        $('#cookie').html(token);\n        $('#outcome').html('');\n        $('#duration').html(''); \n    },\n    onMonitor: function(countdown){\n        $('#duration').html(countdown); \n    },\n    onResponse: function(status){\n        $('#outcome').html(status==1?'success':'failure');\n    },\n    onTimeout: function(){\n        $('#outcome').html('timeout');\n    }\n};\n\n//monitor all anchors in the document\n$('a').ResponseMonitor(options);\n</code></pre>\n\n<p>Server (PHP)</p>\n\n<pre><code>$cookiePrefix = 'response-monitor'; //must match the one set on the client options\n$tokenValue = $_GET[$cookiePrefix];\n$cookieName = $cookiePrefix.'_'.$tokenValue; //ex: response-monitor_1419642741528\n\n//this value is passed to the client through the ResponseMonitor.onResponse callback\n$cookieValue = 1; //for ex, \"1\" can interpret as success and \"0\" as failure\n\nsetcookie(\n    $cookieName,\n    $cookieValue,\n    time()+300,            // expire in 5 minutes\n    \"/\",\n    $_SERVER[\"HTTP_HOST\"],\n    true,\n    false\n);\n\nheader('Content-Type: text/plain');\nheader(\"Content-Disposition: attachment; filename=\\\"Response.txt\\\"\");\n\nsleep(5); //simulate whatever delays the response\nprint_r($_REQUEST); //dump the request in the text file\n</code></pre>\n\n<p>For more examples check the <a href=\"https://github.com/witstep/response-monitor.js/tree/master/examples\" rel=\"nofollow\">examples</a> folder on the repository.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a page that allows the user to download a dynamically-generated file. It takes a long time to generate, so I'd like to show a \"waiting\" indicator. The problem is, I can't figure out how to detect when the browser has received the file, so I can hide the indicator.</p>\n\n<p>I'm making the request in a hidden form, which POSTs to the server, and targets a hidden iframe for its results. This is so I don't replace the entire browser window with the result. I listen for a \"load\" event on the iframe, in the hope that it will fire when the download is complete.</p>\n\n<p>I return a \"Content-Disposition: attachment\" header with the file, which causes the browser to show the \"Save\" dialog. But the browser doesn't fire a \"load\" event in the iframe.</p>\n\n<p>One approach I tried is using a multi-part response. So it would send an empty HTML file, as well as the attached downloadable file. For example:</p>\n\n<pre><code>Content-type: multipart/x-mixed-replace;boundary=\"abcde\"\n\n--abcde\nContent-type: text/html\n\n--abcde\nContent-type: application/vnd.fdf\nContent-Disposition: attachment; filename=foo.fdf\n\nfile-content\n--abcde\n</code></pre>\n\n<p>This works in Firefox; it receives the empty HTML file, fires the \"load\" event, then shows the \"Save\" dialog for the downloadable file. But it fails on IE and Safari; IE fires the \"load\" event but doesn't download the file, and Safari downloads the file (with the wrong name and content-type), and doesn't fire the \"load\" event.</p>\n\n<p>A different approach might be to make a call to start the file creation, then poll the server until it's ready, then download the already-created file. But I'd rather avoid creating temporary files on the server.</p>\n\n<p>Does anyone have a better idea?</p>\n",
            "last_activity_date": 1422216824,
            "question_id": 1106377,
            "score": 202,
            "tags": [
                "javascript",
                "http",
                "mime"
            ],
            "title": "Detect when browser receives file download"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>For anyone finding this. Your better off using the jQuery UI version because it works on all browsers. The color plugin has issues with Safari and Chrome. It only works sometimes.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I had the same problem and fixed it by including jQuery UI. Here is the complete script : </p>\n\n<pre><code>&lt;!-- include Google's AJAX API loader --&gt;\n&lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;!-- load JQuery and UI from Google (need to use UI to animate colors) --&gt;\n&lt;script type=\"text/javascript\"&gt;\ngoogle.load(\"jqueryui\", \"1.5.2\");\n&lt;/script&gt;\n\n\n&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n$('#menu ul li.item').hover(\n    function() {\n        $(this).stop().animate({backgroundColor:'#4E1402'}, 300);\n        }, function () {\n        $(this).stop().animate({backgroundColor:'#943D20'}, 100);\n    });\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>These days jQuery color plugin supports following named colors:</p>\n\n<pre><code>aqua:[0,255,255],\nazure:[240,255,255],\nbeige:[245,245,220],\nblack:[0,0,0],\nblue:[0,0,255],\nbrown:[165,42,42],\ncyan:[0,255,255],\ndarkblue:[0,0,139],\ndarkcyan:[0,139,139],\ndarkgrey:[169,169,169],\ndarkgreen:[0,100,0],\ndarkkhaki:[189,183,107],\ndarkmagenta:[139,0,139],\ndarkolivegreen:[85,107,47],\ndarkorange:[255,140,0],\ndarkorchid:[153,50,204],\ndarkred:[139,0,0],\ndarksalmon:[233,150,122],\ndarkviolet:[148,0,211],\nfuchsia:[255,0,255],\ngold:[255,215,0],\ngreen:[0,128,0],\nindigo:[75,0,130],\nkhaki:[240,230,140],\nlightblue:[173,216,230],\nlightcyan:[224,255,255],\nlightgreen:[144,238,144],\nlightgrey:[211,211,211],\nlightpink:[255,182,193],\nlightyellow:[255,255,224],\nlime:[0,255,0],\nmagenta:[255,0,255],\nmaroon:[128,0,0],\nnavy:[0,0,128],\nolive:[128,128,0],\norange:[255,165,0],\npink:[255,192,203],\npurple:[128,0,128],\nviolet:[128,0,128],\nred:[255,0,0],\nsilver:[192,192,192],\nwhite:[255,255,255],\nyellow:[255,255,0]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The color plugin is only 4kb so much cheaper than the UI library.  Of course you'll want to use a <a href=\"http://github.com/jquery/jquery-color\">decent version</a> of the plugin and not <a href=\"http://plugins.jquery.com/project/color\">some buggy old thing</a> which doesn't handle Safari and crashes when the transitions are too fast.  Since a minified version isn't supplied you might like test various compressors and <a href=\"http://compressorrater.thruhere.net/\">make your own</a> min version.  YUI gets the best compression in this case needing only 2317 bytes and since it is so small - here it is:</p>\n\n<pre><code>(function (d) {\n    d.each([\"backgroundColor\", \"borderBottomColor\", \"borderLeftColor\", \"borderRightColor\", \"borderTopColor\", \"color\", \"outlineColor\"], function (f, e) {\n        d.fx.step[e] = function (g) {\n            if (!g.colorInit) {\n                g.start = c(g.elem, e);\n                g.end = b(g.end);\n                g.colorInit = true\n            }\n            g.elem.style[e] = \"rgb(\" + [Math.max(Math.min(parseInt((g.pos * (g.end[0] - g.start[0])) + g.start[0]), 255), 0), Math.max(Math.min(parseInt((g.pos * (g.end[1] - g.start[1])) + g.start[1]), 255), 0), Math.max(Math.min(parseInt((g.pos * (g.end[2] - g.start[2])) + g.start[2]), 255), 0)].join(\",\") + \")\"\n        }\n    });\n\n    function b(f) {\n        var e;\n        if (f &amp;&amp; f.constructor == Array &amp;&amp; f.length == 3) {\n            return f\n        }\n        if (e = /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(f)) {\n            return [parseInt(e[1]), parseInt(e[2]), parseInt(e[3])]\n        }\n        if (e = /rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(f)) {\n            return [parseFloat(e[1]) * 2.55, parseFloat(e[2]) * 2.55, parseFloat(e[3]) * 2.55]\n        }\n        if (e = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(f)) {\n            return [parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)]\n        }\n        if (e = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(f)) {\n            return [parseInt(e[1] + e[1], 16), parseInt(e[2] + e[2], 16), parseInt(e[3] + e[3], 16)]\n        }\n        if (e = /rgba\\(0, 0, 0, 0\\)/.exec(f)) {\n            return a.transparent\n        }\n        return a[d.trim(f).toLowerCase()]\n    }\n    function c(g, e) {\n        var f;\n        do {\n            f = d.css(g, e);\n            if (f != \"\" &amp;&amp; f != \"transparent\" || d.nodeName(g, \"body\")) {\n                break\n            }\n            e = \"backgroundColor\"\n        } while (g = g.parentNode);\n        return b(f)\n    }\n    var a = {\n        aqua: [0, 255, 255],\n        azure: [240, 255, 255],\n        beige: [245, 245, 220],\n        black: [0, 0, 0],\n        blue: [0, 0, 255],\n        brown: [165, 42, 42],\n        cyan: [0, 255, 255],\n        darkblue: [0, 0, 139],\n        darkcyan: [0, 139, 139],\n        darkgrey: [169, 169, 169],\n        darkgreen: [0, 100, 0],\n        darkkhaki: [189, 183, 107],\n        darkmagenta: [139, 0, 139],\n        darkolivegreen: [85, 107, 47],\n        darkorange: [255, 140, 0],\n        darkorchid: [153, 50, 204],\n        darkred: [139, 0, 0],\n        darksalmon: [233, 150, 122],\n        darkviolet: [148, 0, 211],\n        fuchsia: [255, 0, 255],\n        gold: [255, 215, 0],\n        green: [0, 128, 0],\n        indigo: [75, 0, 130],\n        khaki: [240, 230, 140],\n        lightblue: [173, 216, 230],\n        lightcyan: [224, 255, 255],\n        lightgreen: [144, 238, 144],\n        lightgrey: [211, 211, 211],\n        lightpink: [255, 182, 193],\n        lightyellow: [255, 255, 224],\n        lime: [0, 255, 0],\n        magenta: [255, 0, 255],\n        maroon: [128, 0, 0],\n        navy: [0, 0, 128],\n        olive: [128, 128, 0],\n        orange: [255, 165, 0],\n        pink: [255, 192, 203],\n        purple: [128, 0, 128],\n        violet: [128, 0, 128],\n        red: [255, 0, 0],\n        silver: [192, 192, 192],\n        white: [255, 255, 255],\n        yellow: [255, 255, 0],\n        transparent: [255, 255, 255]\n    }\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 289
                },
                {
                    "body": "<p>I made a version that supports rgba, based off the github version. However, it won't work in IE since it <em>only</em> does rgba. <a href=\"http://dl.dropbox.com/u/57502/jquery.color.js\" rel=\"nofollow\">http://dl.dropbox.com/u/57502/jquery.color.js</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use 2 divs:</p>\n\n<p>You could put a clone on top of it and fade the original out while fading the clone in.</p>\n\n<p>When the fades are done, restore the original with the new bg.</p>\n\n<pre><code>$(function(){\n    var $mytd = $('#mytd'), $elie = $mytd.clone(), os = $mytd.offset();\n\n      // Create clone w other bg and position it on original\n    $elie.toggleClass(\"class1, class2\").appendTo(\"body\")\n         .offset({top: os.top, left: os.left}).hide();\n\n    $mytd.mouseover(function() {            \n          // Fade original\n        $mytd.fadeOut(3000, function() {\n            $mytd.toggleClass(\"class1, class2\").show();\n            $elie.toggleClass(\"class1, class2\").hide();            \n        });\n          // Show clone at same time\n        $elie.fadeIn(3000);\n    });\n});\u200b\n</code></pre>\n\n<h2><strong><a href=\"http://jsfiddle.net/cq2S8/\">jsFiddle example</a></strong></h2>\n\n<p><br/></p>\n\n<p><strong><a href=\"http://api.jquery.com/toggleClass/\"><code>.toggleClass()</code></a></strong><br>\n<strong><a href=\"http://api.jquery.com/offset/\"><code>.offset()</code></a></strong><br>\n<strong><a href=\"http://api.jquery.com/fadeIn/\"><code>.fadeIn()</code></a></strong><br>\n<strong><a href=\"http://api.jquery.com/fadeOut/\"><code>.fadeOut()</code></a></strong></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I like using delay() to get this done, here's an example:</p>\n\n<pre><code>jQuery(element).animate({ backgroundColor: \"#FCFCD8\" },1).delay(1000).animate({ backgroundColor: \"#EFEAEA\" }, 1500);\n</code></pre>\n\n<p>This can be called by a function, with \"element\" being the element class/name/etc. The element will instantly appear with the #FCFCD8 background, hold for a second, then fade into #EFEAEA. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>ColorBlend plug in does exactly what u want</p>\n\n<p><a href=\"http://plugins.jquery.com/project/colorBlend\" rel=\"nofollow\">http://plugins.jquery.com/project/colorBlend</a></p>\n\n<p>Here is the my highlight code</p>\n\n<pre><code>$(\"#container\").colorBlend([{\n    colorList:[\"white\",  \"yellow\"], \n    param:\"background-color\",\n    cycles: 1,\n    duration: 500\n}]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Bitstorm has the best jquery color animation plugin I've seen. It's an improvement to the jquery color project. It also supports rgba.</p>\n\n<p><a href=\"http://www.bitstorm.org/jquery/color-animation/\">http://www.bitstorm.org/jquery/color-animation/</a></p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Try this one:</p>\n\n<pre><code>jQuery(\".usercontent\").hover(function() {\n    jQuery(this).animate({backgroundColor:\"pink\"}, \"slow\");\n},function(){\n    jQuery(this).animate({backgroundColor:\"white\"}, \"slow\");\n});\n</code></pre>\n\n<p>Revised way with effects:</p>\n\n<pre><code>jQuery(\".usercontent\").hover(function() {\n\n    jQuery(this).fadeout(\"slow\",function(){\n        jQuery(this).animate({\"color\",\"yellow\"}, \"slow\");\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Strange thing is that you can animate using CSS3 transition but cannot do it with jQuery. that's pity :(</p>\n\n<p><a href=\"http://jsfiddle.net/eqMMn/5/\" rel=\"nofollow\">Animate backgroundColor on mouseover comparison on Fiddle (example including the latest jQuery color plugin) </a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use jQuery UI to add this functionality. You can grab just what you need, so if you want to animate color, all you have to include is the following code. I got if from latest jQuery UI (currently 1.8.14)</p>\n\n<pre><code>/******************************************************************************/\n/****************************** COLOR ANIMATIONS ******************************/\n/******************************************************************************/\n\n// override the animation for color styles\n$.each(['backgroundColor', 'borderBottomColor', 'borderLeftColor',\n    'borderRightColor', 'borderTopColor', 'borderColor', 'color', 'outlineColor'],\nfunction(i, attr) {\n    $.fx.step[attr] = function(fx) {\n        if (!fx.colorInit) {\n            fx.start = getColor(fx.elem, attr);\n            fx.end = getRGB(fx.end);\n            fx.colorInit = true;\n        }\n\n        fx.elem.style[attr] = 'rgb(' +\n            Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 255), 0) + ',' +\n            Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 255), 0) + ',' +\n            Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 255), 0) + ')';\n    };\n});\n\n// Color Conversion functions from highlightFade\n// By Blair Mitchelmore\n// http://jquery.offput.ca/highlightFade/\n\n// Parse strings looking for color tuples [255,255,255]\nfunction getRGB(color) {\n        var result;\n\n        // Check if we're already dealing with an array of colors\n        if ( color &amp;&amp; color.constructor == Array &amp;&amp; color.length == 3 )\n                return color;\n\n        // Look for rgb(num,num,num)\n        if (result = /rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(color))\n                return [parseInt(result[1],10), parseInt(result[2],10), parseInt(result[3],10)];\n\n        // Look for rgb(num%,num%,num%)\n        if (result = /rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(color))\n                return [parseFloat(result[1])*2.55, parseFloat(result[2])*2.55, parseFloat(result[3])*2.55];\n\n        // Look for #a0b1c2\n        if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color))\n                return [parseInt(result[1],16), parseInt(result[2],16), parseInt(result[3],16)];\n\n        // Look for #fff\n        if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color))\n                return [parseInt(result[1]+result[1],16), parseInt(result[2]+result[2],16), parseInt(result[3]+result[3],16)];\n\n        // Look for rgba(0, 0, 0, 0) == transparent in Safari 3\n        if (result = /rgba\\(0, 0, 0, 0\\)/.exec(color))\n                return colors['transparent'];\n\n        // Otherwise, we're most likely dealing with a named color\n        return colors[$.trim(color).toLowerCase()];\n}\n\nfunction getColor(elem, attr) {\n        var color;\n\n        do {\n                color = $.curCSS(elem, attr);\n\n                // Keep going until we find an element that has color, or we hit the body\n                if ( color != '' &amp;&amp; color != 'transparent' || $.nodeName(elem, \"body\") )\n                        break;\n\n                attr = \"backgroundColor\";\n        } while ( elem = elem.parentNode );\n\n        return getRGB(color);\n};\n</code></pre>\n\n<p>It's only 1.43kb after compressing with YUI:</p>\n\n<pre><code>$.each([\"backgroundColor\",\"borderBottomColor\",\"borderLeftColor\",\"borderRightColor\",\"borderTopColor\",\"borderColor\",\"color\",\"outlineColor\"],function(b,a){$.fx.step[a]=function(c){if(!c.colorInit){c.start=getColor(c.elem,a);c.end=getRGB(c.end);c.colorInit=true}c.elem.style[a]=\"rgb(\"+Math.max(Math.min(parseInt((c.pos*(c.end[0]-c.start[0]))+c.start[0],10),255),0)+\",\"+Math.max(Math.min(parseInt((c.pos*(c.end[1]-c.start[1]))+c.start[1],10),255),0)+\",\"+Math.max(Math.min(parseInt((c.pos*(c.end[2]-c.start[2]))+c.start[2],10),255),0)+\")\"}});function getRGB(b){var a;if(b&amp;&amp;b.constructor==Array&amp;&amp;b.length==3){return b}if(a=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(b)){return[parseInt(a[1],10),parseInt(a[2],10),parseInt(a[3],10)]}if(a=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(b)){return[parseFloat(a[1])*2.55,parseFloat(a[2])*2.55,parseFloat(a[3])*2.55]}if(a=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(b)){return[parseInt(a[1],16),parseInt(a[2],16),parseInt(a[3],16)]}if(a=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(b)){return[parseInt(a[1]+a[1],16),parseInt(a[2]+a[2],16),parseInt(a[3]+a[3],16)]}if(a=/rgba\\(0, 0, 0, 0\\)/.exec(b)){return colors.transparent}return colors[$.trim(b).toLowerCase()]}function getColor(c,a){var b;do{b=$.curCSS(c,a);if(b!=\"\"&amp;&amp;b!=\"transparent\"||$.nodeName(c,\"body\")){break}a=\"backgroundColor\"}while(c=c.parentNode);return getRGB(b)};\n</code></pre>\n\n<p>You can also animate colors using CSS3 transitions but it's only supported by modern browsers. </p>\n\n<pre><code>a.test {\n  color: red;\n  -moz-transition-property: color;  /* FF4+ */\n  -moz-transition-duration: 1s;\n  -webkit-transition-property: color;  /* Saf3.2+, Chrome */\n  -webkit-transition-duration: 1s;\n  -o-transition-property: color;  /* Opera 10.5+ */\n  -o-transition-duration: 1s;\n  -ms-transition-property: color;  /* IE10? */\n  -ms-transition-duration: 1s;\n  transition-property: color;  /* Standard */\n  transition-duration: 1s;\n  }\n\n  a.test:hover {\n  color: blue;\n  }\n</code></pre>\n\n<p>Using shorthand property:</p>\n\n<pre><code>/* shorthand notation for transition properties */\n/* transition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay]; */\n\na.test {\n  color: red;\n  -moz-transition: color 1s;\n  -webkit-transition: color 1s;\n  -o-transition: color 1s;\n  -ms-transition: color 1s;\n  transition: color 1s;\n  }\n\na.test {\n  color: blue;\n }\n</code></pre>\n\n<p>Unlike regular javascript transitions, CSS3 transitions are hardware accelerated and therefore smoother. You can use Modernizr, to find out if the browser supports CSS3 transitions, if it didn't then you can use jQuery as a fallback:</p>\n\n<pre><code>if ( !cssTransitions() ) {\n    $(document).ready(function(){\n        $(\".test\").hover(function () {\n                $(this).stop().animate({ backgroundColor: \"red\" },500)\n             }, function() {\n                 $(this).stop().animate({ backgroundColor: \"blue\" },500)}    \n             );\n    }); \n}\n</code></pre>\n\n<p>Remember to use stop() to stop the current animation before starting a new one otherwise when you pass over the element too fast, the effect keeps blinking for a while.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Try to use it</p>\n\n<pre><code>-moz-transition: background .2s linear;\n-webkit-transition: background .2s linear;\n-o-transition: background .2s linear;\ntransition: background .2s linear;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I stumbled across this page with the same issue, but the following problems:</p>\n\n<ol>\n<li>I can't include an extra jQuery plugin file with my current set-up.</li>\n<li>I'm not comfortable pasting large blocks of code that I don't have time to read over and validate.</li>\n<li>I don't have access to the css.</li>\n<li>I hardly had any time for implementation (it was only a visual improvement to an admin page)</li>\n</ol>\n\n<p>With the above that pretty much ruled out every answer. Considering my fade of colour was very simple, I used the following quick hack instead:</p>\n\n<pre><code>element\n  .css('color','#FF0000')\n;\n$('&lt;div /&gt;')\n  .css('width',0)\n  .animate(\n    {'width':100},\n    {\n      duration: 3000,\n      step:function(now){\n        var v = (255 - 255/100 * now).toString(16);\n        v = (v.length &lt; 2 ? '0' : '') + v.substr(0,2);\n        element.css('color','#'+v+'0000');\n      }\n    }\n  )\n;\n</code></pre>\n\n<p>The above creates a temporary div that is never placed in the document flow. I then use jQuery's built-in animation to animate a numeric property of that element - in this case <code>width</code> - which can represent a percentage (0 to 100). Then, using the step function, I transfer this numeric animation to the text colour with a simple hex cacluation.</p>\n\n<p>The same could have been achieved with <code>setInterval</code>, but by using this method you can benefit from jQuery's animation methods - like <code>.stop()</code> - and you can use <code>easing</code> and <code>duration</code>.</p>\n\n<p>Obivously it's only of use for simple colour fades, for more complicated colour conversions you'll need to use one of the above answers - or code your own colour fade math :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I used a combination of CSS transitions with JQuery for the desired effect; obviously browsers which don't support CSS transitions will not animate but its a lightweight option which works well for most browsers and for my requirements is acceptable degradation.</p>\n\n<p><strong>Jquery to change the background color:</strong> </p>\n\n<pre><code>   $('.mylinkholder a').hover(\n        function () {\n            $(this).css({ backgroundColor: '#f0f0f0' }); \n        },\n        function () {\n            $(this).css({ backgroundColor: '#fff' });\n        }\n    );\n</code></pre>\n\n<p><strong>CSS using transition to fade background-color change</strong></p>\n\n<pre><code>   .mylinkholder a\n   {\n   transition: background-color .5s ease-in-out;\n   -moz-transition: background-color .5s ease-in-out;\n   -webkit-transition: background-color .5s ease-in-out; \n  -o-transition: background-color .5s ease-in-out; \n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you wan't to animate your background using only core jQuery functionality, try this:</p>\n\n<pre><code>jQuery(\".usercontent\").mouseover(function() {\n      jQuery(\".usercontent\").animate({backgroundColor:'red'}, 'fast', 'linear', function() {\n            jQuery(this).animate({\n                backgroundColor: 'white'\n            }, 'normal', 'linear', function() {\n                jQuery(this).css({'background':'none', backgroundColor : ''});\n            });\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Do it with CSS3-Transitions. Support is great (all modern browsers, even IE). With Compass and SASS this is quickly done:</p>\n\n<pre><code>#foo {background:red; @include transition(background 1s)}\n#foo:hover {background:yellow}\n</code></pre>\n\n<p>Pure CSS:</p>\n\n<pre><code>#foo {\nbackground:red;\n-webkit-transition:background 1s;\n-moz-transition:background 1s;\n-o-transition:background 1s;\ntransition:background 1s\n}\n#foo:hover {background:yellow}\n</code></pre>\n\n<p>I've wrote an german article about this topic: <a href=\"http://www.solife.cc/blog/animation-farben-css3-transition.html\">http://www.solife.cc/blog/animation-farben-css3-transition.html</a></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Try this one:\n    (function($) {  </p>\n\n<pre><code>            var i = 0;  \n\n            var someBackground = $(\".someBackground\");  \n            var someColors = [ \"yellow\", \"red\", \"blue\", \"pink\" ];  \n\n\n            someBackground.css('backgroundColor', someColors[0]);  \n\n            window.setInterval(function() {  \n                i = i == someColors.length ? 0 : i;  \n                someBackground.animate({backgroundColor: someColors[i]}, 3000);  \n                i++;  \n            }, 30);  \n\n})(jQuery);  \n</code></pre>\n\n<p>you can preview example here: <a href=\"http://jquerydemo.com/demo/jquery-animate-background-color.aspx\" rel=\"nofollow\">http://jquerydemo.com/demo/jquery-animate-background-color.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am trying to animate a change in backgroundColor using jQuery on mouseover.</p>\n\n<p>I have checked some example and I seem to have it right, it works with other properties like fontSize, but with backgroundColor I get and \"Invalid Property\" js error.\nThe element I am working with is a div.</p>\n\n<pre><code>$(\".usercontent\").mouseover(function() {\n    $(this).animate({ backgroundColor: \"olive\" }, \"slow\");\n});\n</code></pre>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1421165927,
            "question_id": 190560,
            "score": 244,
            "tags": [
                "javascript",
                "jquery",
                "colors",
                "jquery-animate"
            ],
            "title": "jQuery animate backgroundColor"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>I think you are asking for this:</p>\n\n<pre><code>var part1name = someObject.part1.name;\nvar part2quantity = someObject.part2.qty;\nvar part3name1 =  someObject.part3[0].name;\n</code></pre>\n\n<p>You could be asking for this:</p>\n\n<pre><code>var part1name = someObject[\"part1\"][\"name\"];\nvar part2quantity = someObject[\"part2\"][\"qty\"];\nvar part3name1 =  someObject[\"part3\"][0][\"name\"];\n</code></pre>\n\n<p>Both of which will work</p>\n\n<hr>\n\n<p>Or maybe you are asking for this</p>\n\n<pre><code>var partName = \"part1\";\nvar nameStr = \"name\";\n\nvar part1name = someObject[partName][nameStr];\n</code></pre>\n\n<hr>\n\n<p>Finally you could be asking for this</p>\n\n<pre><code>var partName = \"part1.name\";\n\nvar partBits = partName.split(\".\");\n\nvar part1name = someObject[partBits[0]][partBits[1]];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you need to access different nested key without knowing it at coding time (it will be trivial to address them) you can use the array notation accessor:</p>\n\n<pre><code>var part1name = someObject['part1']['name'];\nvar part2quantity = someObject['part2']['qty'];\nvar part3name1 =  someObject['part3'][0]['name'];\n</code></pre>\n\n<p>They are equivalent to the dot notation accessor and may vary at runtime, for example:</p>\n\n<pre><code>var part = 'part1';\nvar property = 'name';\n\nvar part1name = someObject[part][property];\n</code></pre>\n\n<p>is equivalent to </p>\n\n<pre><code>var part1name = someObject['part1']['name'];\n</code></pre>\n\n<p>or </p>\n\n<pre><code>var part1name = someObject.part1.name;\n</code></pre>\n\n<p>I hope this address your question...</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I won't use a string to mantain a sort of xpath <em>query</em> to access an object value.\nAs you have to call a function to parse the query and retrieve the value I would follow another path (not :</p>\n\n<pre><code>var part1name = function(){ return this.part1.name; }\nvar part2quantity = function() { return this['part2']['qty']; }\nvar part3name1 =  function() { return this.part3[0]['name'];}\n\n// usage: part1name.apply(someObject);\n</code></pre>\n\n<p>or, if you are uneasy with the <em>apply</em> method </p>\n\n<pre><code>var part1name = function(obj){ return obj.part1.name; }\nvar part2quantity = function(obj) { return obj['part2']['qty']; }\nvar part3name1 =  function(obj) { return obj.part3[0]['name'];}\n\n// usage: part1name(someObject);\n</code></pre>\n\n<p>The functions are shorter, clearer, the interpreter check them for you for syntax errors and so on.</p>\n\n<p>By the way, I feel that a simple assignment made at right time will be sufficent...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You'd have to parse the string yourself:</p>\n\n<pre><code>function getProperty(obj, prop) {\n    var parts = prop.split('.'),\n        last = parts.pop(),\n        l = parts.length,\n        i = 1,\n        current = parts[0];\n\n    while((obj = obj[current]) &amp;&amp; i &lt; l) {\n        current = parts[i];\n        i++;\n    }\n\n    if(obj) {\n        return obj[last];\n    }\n}\n</code></pre>\n\n<p>This required that you also define array indexes with dot notation:</p>\n\n<pre><code>var part3name1 = \"part3.0.name\";\n</code></pre>\n\n<p>It makes the parsing easier.</p>\n\n<p><a href=\"http://jsfiddle.net/fkling/WmYEX/\"><strong>DEMO</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>I just made this based on some similar code I already had, it appears to work:</p>\n\n<pre><code>Object.byString = function(o, s) {\n    s = s.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n    s = s.replace(/^\\./, '');           // strip a leading dot\n    var a = s.split('.');\n    for (var i = 0, n = a.length; i &lt; n; ++i) {\n        var n = a[i];\n        if (n in o) {\n            o = o[n];\n        } else {\n            return;\n        }\n    }\n    return o;\n}\n</code></pre>\n\n<p>Usage::</p>\n\n<pre><code>Object.byString(someObj, 'part3[0].name');\n</code></pre>\n\n<p>See a working demo at <a href=\"http://jsfiddle.net/alnitak/hEsys/\" rel=\"nofollow\">http://jsfiddle.net/alnitak/hEsys/</a></p>\n",
                    "is_accepted": true,
                    "score": 97
                },
                {
                    "body": "<p>using eval:</p>\n\n<pre><code>var part1name = eval(\"someObject.part1.name\");\n</code></pre>\n\n<p>wrap to return undefined on error</p>\n\n<pre><code>function path(obj, path) {\n    try {\n        return eval(\"obj.\" + path);\n    } catch(e) {\n        return undefined;\n    }\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/shanimal/b3xTw/\" rel=\"nofollow\">http://jsfiddle.net/shanimal/b3xTw/</a></p>\n\n<p><em>Please use common sense and caution when wielding the power of eval. It's a bit like a light saber, if you turn it on there's a 90% chance you'll sever a limb. Its not for everybody.</em></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Works for arrays / arrays inside the object also.\nDefensive against invalid values.</p>\n\n<pre><code>/**\n * Retrieve nested item from object/array\n * @param {Object|Array} obj\n * @param {String} path dot separated\n * @param {*} def default value ( if result undefined )\n * @returns {*}\n */\npath: function(obj, path, def){\n    var i, len;\n\n    for(i = 0,path = path.split('.'), len = path.length; i &lt; len; i++){\n        if(!obj || typeof obj !== 'object') return def;\n        obj = obj[path[i]];\n    }\n\n    if(obj === undefined) return def;\n    return obj;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>Here are performance tests for all 4, with @TheZver and @Shanimal being the winners:</p>\n\n<p><a href=\"http://jsfiddle.net/Jw8XB/3/\" rel=\"nofollow\">http://jsfiddle.net/Jw8XB/3/</a></p>\n\n<pre><code>Part 1\n60\nPart 3A\nObject.byString: 2.536ms \nPart 1\n60\nPart 3A\ngetProperty: 0.274ms\nPart 1\n60\nundefined\neval: 0.657ms\nPart 1\n60\nPart 3A\npath: 0.256ms\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Just had the same question recently and successfully used <a href=\"https://npmjs.org/package/tea-properties\" rel=\"nofollow\">https://npmjs.org/package/tea-properties</a> which also <code>set</code> nested object/arrays :</p>\n\n<p>get:</p>\n\n<pre><code>var o = {\n  prop: {\n    arr: [\n      {foo: 'bar'}\n    ]\n  }\n};\n\nvar properties = require('tea-properties');\nvar value = properties.get(o, 'prop.arr[0].foo');\n\nassert(value, 'bar'); // true\n</code></pre>\n\n<p>set:</p>\n\n<pre><code>var o = {};\n\nvar properties = require('tea-properties');\nproperties.set(o, 'prop.arr[0].foo', 'bar');\n\nassert(o.prop.arr[0].foo, 'bar'); // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What about this solution:</p>\n\n<pre><code>setJsonValue: function (json, field, val) {\n  if (field !== undefined){\n    try {\n      eval(\"json.\" + field + \" = val\");\n    }\n    catch(e){\n      ;\n    }\n  }  \n}\n</code></pre>\n\n<p>And this one, for getting:</p>\n\n<pre><code>getJsonValue: function (json, field){\n  var value = undefined;\n  if (field !== undefined) {\n    try {\n      eval(\"value = json.\" + field);\n    } \n    catch(e){\n      ;\n    }\n  }\n  return value;\n};\n</code></pre>\n\n<p>Probably some will consider them unsafe, but they must be much faster then, parsing the string.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This is the solution I use:</p>\n\n<pre><code>Object.resolve = function(path, obj) {\n    return [obj || self].concat(path.split('.')).reduce(function(prev, curr) {\n        return prev[curr]\n    })\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>Object.resolve(\"document.body.style.width\")\n// or\nObject.resolve(\"style.width\", document.body)\n// or even use array indexes\nObject.resolve(\"part3.0.size\", someObject) //someObject has been defined in the question.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>There is an <code>npm</code> module now for doing this: <a href=\"https://github.com/erictrinh/safe-access\" rel=\"nofollow\">https://github.com/erictrinh/safe-access</a></p>\n\n<p>Example usage:</p>\n\n<pre><code>var access = require('safe-access');\naccess(very, 'nested.property.and.array[0]');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here I offer two more ways, which both seem faster than all the above (those that support indexes that is, like \"a.b[0].x\"):</p>\n\n<p>Option 1: Split string on ' or [ or ], reverse it, skip empty items.</p>\n\n<pre><code>function getValue(path, origin) {\n    if (origin === void 0 || origin === null) origin = self ? self : this;\n    if (typeof path !== 'string') path = '' + path;\n    var parts = path.split(/[\\.\\[\\]]/g).reverse(), name; // (why reverse? because it's usually faster to pop off the end of an array)\n    while (parts.length) { name=parts.pop(); if(!name) continue; if(name[0]=='[') name=name.substring(1, name.length-2); origin=origin[name]; }\n    return origin;\n}\n</code></pre>\n\n<p>Option 2 (fastest of all): Low level character scan (no regex/split/etc, just a quick char scan).</p>\n\n<pre><code>function getValue(path, origin) {\n    if (origin === void 0 || origin === null) origin = self ? self : this;\n    if (typeof path !== 'string') path = '' + path;\n    var c = '', pc, i = 0, n = path.length, name = '';\n    if (n) while (i&lt;=n) ((c = path[i++]) == '.' || c == '[' || c == ']' || c == void 0) ? (name?(origin = origin[name], name = ''):(pc=='.'||pc=='['||pc==']'&amp;&amp;c==']'?i=n+2:void 0),pc=c) : name += c;\n    if (i==n+2) throw \"Invalid path: \"+path;\n    return origin;\n} // (around 1,000,000+/- ops/sec)\n</code></pre>\n\n<p>JSPerf: <a href=\"http://jsperf.com/ways-to-dereference-a-delimited-property-string\" rel=\"nofollow\">http://jsperf.com/ways-to-dereference-a-delimited-property-string</a></p>\n\n<p>\"eval(...)\" is still king though (performance wise that is).  If you have property paths directly under your control, there shouldn't be any issues with using 'eval' (especially if speed is desired).  If pulling property paths \"over the wire\" (<a href=\"https://www.youtube.com/watch?v=CewJ-ihIqaM\" rel=\"nofollow\">on the line</a>!? lol :P), then yes, use something else to be safe.  Only an idiot would say to never use \"eval\" at all, as there <a href=\"http://stackoverflow.com/questions/1594023/what-is-the-intended-purpose-of-eval-in-javascript?lq=1\">ARE good reasons</a> when to use it.  Also, \"It is used in <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" rel=\"nofollow\">Doug Crockford's JSON parser</a>.\" If the input is safe, then no problems at all.  Use the right tool for the right job, that's it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Underscore has a function available called <code>getNested(obj, chain, def, opts)</code> seen here...</p>\n\n<p><a href=\"https://github.com/dsc/underscore.nested/blob/master/underscore.nested.js#L182\" rel=\"nofollow\">https://github.com/dsc/underscore.nested/blob/master/underscore.nested.js#L182</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Speigg's approach is very neat and clean, though I found this reply while searching for the solution of accessing AngularJS $scope properties by string path and with a little modification it does the job:</p>\n\n<pre><code>$scope.resolve = function( path, obj ) {\n    return path.split('.').reduce( function( prev, curr ) {\n        return prev[curr];\n    }, obj || this );\n}\n</code></pre>\n\n<p>Just place this function in your root controller and use it any child scope like this:</p>\n\n<pre><code>$scope.resolve( 'path.to.any.object.in.scope')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have a data structure like this :</p>\n\n<pre><code>var someObject = {\n    'part1' : {\n        'name': 'Part 1',\n        'size': '20',\n        'qty' : '50'\n    },\n    'part2' : {\n        'name': 'Part 2',\n        'size': '15',\n        'qty' : '60'\n    },\n    'part3' : [\n        {\n            'name': 'Part 3A',\n            'size': '10',\n            'qty' : '20'\n        }, {\n            'name': 'Part 3B',\n            'size': '5',\n            'qty' : '20'\n        }, {\n            'name': 'Part 3C',\n            'size': '7.5',\n            'qty' : '20'\n        }\n    ]\n};\n</code></pre>\n\n<p>And I would like to access the data using these variable :</p>\n\n<pre><code>var part1name = \"part1.name\";\nvar part2quantity = \"part2.qty\";\nvar part3name1 = \"part3[0].name\";\n</code></pre>\n\n<p>part1name should be filled with someObject.part1.name 's value, which is \"Part 1\". Same thing with part2quantity which filled with 60.</p>\n\n<p>Is there anyway to achieve this with either pure javascript or JQuery?</p>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1425455575,
            "question_id": 6491463,
            "score": 71,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Accessing nested JavaScript objects with string key"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>As it happens, most browsers do return properties in the same order as they were inserted, but it is explicitly not guaranteed behaviour so you should not rely upon it.</p>\n\n<p>In particular see section 12.6.4 of the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\">ECMAScript specification</a>:</p>\n\n<blockquote>\n  <p>The mechanics and order of enumerating the properties ... is not specified.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>No, properties order in objects are not guaranted in JavaScript, you need to use an <code>Array</code>.</p>\n\n<p>Definition of an Object from <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\">ECMAScript Third Edition (pdf)</a>:</p>\n\n<blockquote>\n  <p>4.3.3 Object<br>\n  An object is a member of the\n  type Object. <strong>It is an unordered collection of properties</strong> each of which\n  contains a primitive value, object, or\n  function. A function stored in a\n  property of an object is called a\n  method.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 97
                },
                {
                    "body": "<p>From the <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"nofollow\">JSON standard</a>:</p>\n\n<blockquote>\n  <p>An object is an <strong>unordered</strong> collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array.</p>\n</blockquote>\n\n<p>(emphasis mine).</p>\n\n<p>So, no you can't guarantee the order.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The best link above is in Tim Down's comment:</p>\n\n<p><a href=\"http://code.google.com/p/v8/issues/detail?id=164\">http://code.google.com/p/v8/issues/detail?id=164</a></p>\n\n<p>That bug covers in detail the design decisions involved for Chrome's implementation of key ordering.  One take-away is that for string keys that don't parse to an integer (ie \"a\" or \"b\", but NOT \"3\"), <strong>keys are printed in insertion order on all major browsers</strong> and while this behavior is not \"standardized\", it <em>IS</em> considered a significant backwards-compatibility issue by browser vendors.  Use at your own risk.</p>\n\n<p>Per one of the (rather opinionated) comments:</p>\n\n<blockquote>\n  <p>Standards always follow implementations, that's where XHR came from, and Google does the same thing by implementing Gears and then\n      embracing equivalent HTML5 functionality.  The right fix is to have ECMA formally\n      incorporate the de-facto standard behavior into the next rev of the spec.</p>\n</blockquote>\n\n<p>If you rely on insertion order, you are outside the ECMAScript spec, but within the de-facto standard of common browser behavior (AS LONG AS YOUR KEYS DON\"T PARSE AS INTEGERS!).</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>As others have stated, you have no guarantee as to the order when you iterate over the properties of an object. If you need an ordered list of multiple fields I suggested creating an array of objects.</p>\n\n<pre><code>var myarr = [{somfield1: 'x', somefield2: 'y'},\n{somfield1: 'a', somefield2: 'b'},\n{somfield1: 'i', somefield2: 'j'}];\n</code></pre>\n\n<p>This way you can use a regular for loop and have the insert order. You could then use the Array sort method to sort this into a new array if needed.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If I create an object like this:</p>\n\n<pre><code>var obj = {};\nobj.prop1 = \"Foo\";\nobj.prop2 = \"Bar\";\n</code></pre>\n\n<p>Will the resulting object <em>always</em> look like this?</p>\n\n<pre><code>{ prop1 : \"Foo\", prop2 : \"Bar\" }\n</code></pre>\n\n<p>That is, will the properties be in the same order that I added them?</p>\n",
            "last_activity_date": 1422385755,
            "question_id": 5525795,
            "score": 94,
            "tags": [
                "javascript"
            ],
            "title": "Does JavaScript Guarantee Object Property Order?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>encodeURI() - the escape() function is for javascript escaping, not HTTP.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Also remember that they all encode different sets of characters, and select the one you need appropriately.  encodeURI() encodes fewer characters than encodeURIComponent(), which encodes fewer (and also different, to dannyp's point) characters than escape().</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<h1>escape()</h1>\n\n<p>Don't use it, as it has been deprecated since ECMAScript v3.</p>\n\n<h1>encodeURI()</h1>\n\n<p>Use encodeURI when you want a working URL. Make this call:</p>\n\n<pre><code>encodeURI(\"http://www.google.com/a file with spaces.html\")\n</code></pre>\n\n<p>to get:</p>\n\n<pre>\nhttp://www.google.com/a%20file%20with%20spaces.html\n</pre>\n\n<p>Don't call encodeURIComponent since it would destroy the URL and return</p>\n\n<pre>\nhttp%3A%2F%2Fwww.google.com%2Fa%20file%20with%20spaces.html\n</pre>\n\n<h1>encodeURIComponent()</h1>\n\n<p>Use encodeURIComponent when you want to encode a URL parameter.</p>\n\n<pre><code>param1 = encodeURIComponent(\"http://xyz.com/?a=12&amp;b=55\")\n</code></pre>\n\n<p>Then you may create the URL you need:</p>\n\n<pre><code>url = \"http://domain.com/?param1=\" + param1 + \"&amp;param2=99\";\n</code></pre>\n\n<p>And you will get this complete URL:</p>\n\n<p><code>http://www.domain.com/?param1=http%3A%2F%2Fxyz.com%2F%Ffa%3D12%26b%3D55&amp;param2=99</code></p>\n\n<p>Note that encodeURIComponent does not escape the ' character. A common bug is to use it to create html attributes such as <code>href='MyUrl'</code>, which could suffer an injection bug. If you are constructing html from strings, either use \" instead of ' for attribute quotes, or add an extra layer of encoding (' can be encoded as %27).</p>\n\n<p>For more information on this type of encoding you can check: <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">http://en.wikipedia.org/wiki/Percent-encoding</a></p>\n",
                    "is_accepted": true,
                    "score": 1125
                },
                {
                    "body": "<p>I found this article enlightening :\n<a href=\"http://unixpapa.com/js/querystring.html\">Javascript Madness: Query String Parsing</a></p>\n\n<p>I found it when I was trying to undersand why decodeURIComponent was not decoding '+' correctly. Here is an extract:</p>\n\n<pre><code>String:                         \"A + B\"\nExpected Query String Encoding: \"A+%2B+B\"\nescape(\"A + B\") =               \"A%20+%20B\"     Wrong!\nencodeURI(\"A + B\") =            \"A%20+%20B\"     Wrong!\nencodeURIComponent(\"A + B\") =   \"A%20%2B%20B\"   Acceptable, but strange\n\nEncoded String:                 \"A+%2B+B\"\nExpected Decoding:              \"A + B\"\nunescape(\"A+%2B+B\") =           \"A+++B\"       Wrong!\ndecodeURI(\"A+%2B+B\") =          \"A+++B\"       Wrong!\ndecodeURIComponent(\"A+%2B+B\") = \"A+++B\"       Wrong!\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>encodeURIComponent doesn't encode <code>-_.!~*'()</code>, causing problem in posting data to php in xml string.</p>\n\n<p>For example:<br/>\n<code>&lt;xml&gt;&lt;text x=\"100\" y=\"150\" value=\"It's a value with single quote\" /&gt;\n&lt;/xml&gt;</code></p>\n\n<p>General escape with <code>encodeURI</code><br/>\n<code>%3Cxml%3E%3Ctext%20x=%22100%22%20y=%22150%22%20value=%22It's%20a%20value%20with%20single%20quote%22%20/%3E%20%3C/xml%3E</code></p>\n\n<p>You can see, single quote is not encoded.\nTo resolve issue I created two functions to solve issue in my project, for Encoding URL:</p>\n\n<pre><code>function encodeData(s:String):String{\n    return encodeURIComponent(s).replace(/\\-/g, \"%2D\").replace(/\\_/g, \"%5F\").replace(/\\./g, \"%2E\").replace(/\\!/g, \"%21\").replace(/\\~/g, \"%7E\").replace(/\\*/g, \"%2A\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\");\n}\n</code></pre>\n\n<p>For Decoding URL:</p>\n\n<pre><code>function decodeData(s:String):String{\n    try{\n        return decodeURIComponent(s.replace(/\\%2D/g, \"-\").replace(/\\%5F/g, \"_\").replace(/\\%2E/g, \".\").replace(/\\%21/g, \"!\").replace(/\\%7E/g, \"~\").replace(/\\%2A/g, \"*\").replace(/\\%27/g, \"'\").replace(/\\%28/g, \"(\").replace(/\\%29/g, \")\"));\n    }catch (e:Error) {\n    }\n    return \"\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I have this function...</p>\n\n<pre><code>var escapeURIparam = function(url) {\n    if (encodeURIComponent) url = encodeURIComponent(url);\n    else if (encodeURI) url = encodeURI(url);\n    else url = escape(url);\n    url = url.replace(/\\+/g, '%2B'); // Force the replacement of \"+\"\n    return url;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've found that experimenting with the various methods is a good sanity check even after having a good handle of what their various uses and capabilities are.</p>\n\n<p>Towards that end I have found <a href=\"http://www.the-art-of-web.com/javascript/escape/\" rel=\"nofollow\">this website</a> extremely useful to confirm my suspicions that I am doing something appropriately. It has also proven useful for decoding an encodeURIComponent'ed string which can be rather challenging to interpret. A great bookmark to have:</p>\n\n<p><a href=\"http://www.the-art-of-web.com/javascript/escape/\" rel=\"nofollow\">http://www.the-art-of-web.com/javascript/escape/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I recommend not to use one of those methods as is. Write your own function which does the right thing.</p>\n\n<p>MDN has given a good example on url encoding shown below.</p>\n\n<pre><code>var fileName = 'my file(2).txt';\nvar header = \"Content-Disposition: attachment; filename*=UTF-8''\" + encodeRFC5987ValueChars(fileName);\n\nconsole.log(header); \n// logs \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n\n\nfunction encodeRFC5987ValueChars (str) {\n    return encodeURIComponent(str).\n        // Note that although RFC3986 reserves \"!\", RFC5987 does not,\n        // so we do not need to escape it\n        replace(/['()]/g, escape). // i.e., %27 %28 %29\n        replace(/\\*/g, '%2A').\n            // The following are not required for percent-encoding per RFC5987, \n            //  so we can allow for a little better readability over the wire: |`^\n            replace(/%(?:7C|60|5E)/g, unescape);\n}\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The difference between <code>encodeURI()</code> and <code>encodeURIComponent()</code> are exactly 11 characters encoded by encodeURIComponent but not by encodeURI:</p>\n\n<p><img src=\"http://i.imgur.com/rHWC1r1.png\" alt=\"Table with the ten differences between encodeURI and encodeURIComponent\"></p>\n\n<p>I generated this table easily with <strong>console.table</strong> in Google Chrome with this code:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [];\r\nfor(var i=0;i&lt;256;i++) {\r\n  var char=String.fromCharCode(i);\r\n  if(encodeURI(char)!==encodeURIComponent(char)) {\r\n    arr.push({\r\n      character:char,\r\n      encodeURI:encodeURI(char),\r\n      encodeURIComponent:encodeURIComponent(char)\r\n    });\r\n  }\r\n}\r\nconsole.table(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 86
                },
                {
                    "body": "<pre><code>String:                         \"A + B\"\nExpected Query String Encoding: \"A+%2B+B\"\nescape(\"A + B\") =               \"A%20+%20B\"     Wrong!\nencodeURI(\"A + B\") =            \"A%20+%20B\"     Wrong!\nencodeURIComponent(\"A + B\") =   \"A%20%2B%20B\"   Acceptable, but strange\n\nEncoded String:                 \"A+%2B+B\"\nExpected Decoding:              \"A + B\"\nunescape(\"A+%2B+B\") =           \"A+++B\"       Wrong!\ndecodeURI(\"A+%2B+B\") =          \"A+++B\"       Wrong!\ndecodeURIComponent(\"A+%2B+B\") = \"A+++B\"       Wrong!\n</code></pre>\n\n<p>i cannot accept above codes, because the decodeURIComponent should decode the string which was encode by 'encodeURIComponent'.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>When encoding a query string to be sent to a web server - what is the best practice to use from javascript:</p>\n\n<p>Use escape:</p>\n\n<pre><code>escape(\"% +&amp;=\");\n</code></pre>\n\n<p>OR</p>\n\n<p>use encodeURI() / encodeURIComponent()</p>\n\n<pre><code>encodeURI(\"http://www.google.com?var1=value1&amp;var2=value2\");\n\nencodeURIComponent(\"var1=value1&amp;var2=value2\");\n</code></pre>\n",
            "last_activity_date": 1415973139,
            "question_id": 75980,
            "score": 723,
            "tags": [
                "javascript",
                "actionscript-3",
                "actionscript",
                "encoding",
                "query-string"
            ],
            "title": "Best practice: escape, or encodeURI / encodeURIComponent"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><strong>Description:</strong></p>\n\n<p><a href=\"http://www.quirksmode.org/js/events_order.html\"><em>quirksmode.org</em></a> has a nice description of this. In a nutshell (copied from quirksmode):</p>\n\n<blockquote>\n  <p><strong>Event capturing</strong></p>\n  \n  <p>When you use event capturing</p>\n\n<pre><code>               | |\n---------------| |-----------------\n| element1     | |                |\n|   -----------| |-----------     |\n|   |element2  \\ /          |     |\n|   -------------------------     |\n|        Event CAPTURING          |\n-----------------------------------\n</code></pre>\n  \n  <p>the event handler of element1 fires first, the event handler of element2 fires last.</p>\n  \n  <p><strong>Event bubbling</strong></p>\n  \n  <p>When you use event bubbling</p>\n\n<pre><code>               / \\\n---------------| |-----------------\n| element1     | |                |\n|   -----------| |-----------     |\n|   |element2  | |          |     |\n|   -------------------------     |\n|        Event BUBBLING           |\n-----------------------------------\n</code></pre>\n  \n  <p>the event handler of element2 fires first, the event handler of element1 fires last.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>What to use?</strong></p>\n\n<p>It depends on what you want to do. There is no better. The difference is the order of the execution of the event handlers. Most of the time it will be fine to fire event handlers in the <em>bubbling</em> phase but it can also be necessary to fire them earlier.</p>\n",
                    "is_accepted": false,
                    "score": 245
                },
                {
                    "body": "<p>Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. The event propagation mode determines in <a href=\"http://www.quirksmode.org/js/events_order.html\">which order the elements receive the event</a>.</p>\n\n<p>With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.</p>\n\n<p>With capturing, the event is first captured by the outermost element and propagated to the inner elements.</p>\n\n<p>Capturing is also called \"trickling\", which helps remember the propagation order:</p>\n\n<blockquote>\n  <p>bubble up, trickle down</p>\n</blockquote>\n\n<p>Back in the old days, Netscape advocated event capturing, while Microsoft promoted event bubbling. Both are part of the W3C <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html\">Document Object Model Events</a> standard (2000).</p>\n\n<p>IE &lt; 9 uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener\">only event bubbling</a>, whereas IE9+ and all major browsers support both.</p>\n\n<p>We can use the <code>addEventListener(type, listener, useCapture)</code> to register event handlers for in either bubbling (default) or capturing mode. To use the capturing model pass the third argument as <code>true</code>.</p>\n\n<p><strong>Only the bubbling model is supported by all major browsers</strong>. If you are going to use event capturing anyway, you need to handle event bubbling for IE. This makes it event bubbling easier to use, in that it provides wider browser compatibility. On the other hand, the <a href=\"http://stackoverflow.com/a/10335117/1269037\">performance of event bubbling may be slightly lower</a> for complex DOMs.</p>\n\n<h2>Example</h2>\n\n<pre><code>&lt;div&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In the structure above, assume that a click event occurred in the <code>li</code> element.</p>\n\n<p>In capturing model, the event will be handled by the <code>div</code> first (click event handlers in the <code>div</code> will fire first), then in the <code>ul</code>, then at the last in the target element, <code>li</code>.</p>\n\n<p>In the bubbling model, the opposite will happen: the event will be first handled by the <code>li</code>, then by the <code>ul</code>, and at last by the <code>div</code> element.</p>\n\n<p>For more information, see</p>\n\n<ul>\n<li><a href=\"http://www.quirksmode.org/js/events_order.html\">Event Order</a> on QuirksMode</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener\">addEventListener</a> on MDN</li>\n<li><a href=\"http://www.quirksmode.org/js/events_advanced.html\">Events Advanced</a> on QuirksMode</li>\n</ul>\n\n<p>In the example below, if you click on any of the highlighted elements, you can see that the capturing phase of the event propagation flow occurs first, followed by the bubbling phase.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var divs = document.getElementsByTagName('div');\r\n\r\nfunction capture() {\r\n    log('capture: ' + this.firstChild.nodeValue.trim())\r\n}\r\n\r\nfunction bubble() {\r\n    log('bubble: ' + this.firstChild.nodeValue.trim())\r\n}\r\n\r\nfor (var i = 0; i &lt; divs.length; i++) {\r\n    divs[i].addEventListener('click', capture, true);\r\n    divs[i].addEventListener('click', bubble, false);\r\n}\r\n\r\nvar $log = $('#log');\r\n\r\nfunction log(msg) {\r\n    $log.append('&lt;p&gt;' + msg + '&lt;/p&gt;');\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n    border: 1px solid red;\r\n    padding: 5px;\r\n    min-height: 10px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"http://code.jquery.com/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div&gt;1\r\n    &lt;div&gt;2\r\n        &lt;div&gt;3\r\n            &lt;div&gt;4\r\n                &lt;div&gt;5&lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;section id=\"log\"&gt;&lt;/section&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"http://jsfiddle.net/cwtuan/je1g3f29/16\">Another example at JSFiddle</a>.</p>\n",
                    "is_accepted": true,
                    "score": 412
                },
                {
                    "body": "<p>If there are two elements element 1 and element 2 . element 2 is inside element 1 and we attach an event with both the elements lets say onClick. Now when we click on element 2 then eventHandler for both the elements will be executed. Now here the question is in which order the event will execute. If the event attached with element 1 executes it is called event capturing and if the event attached with element 2 executes first this is called event bubbling. \n As per W3C the event will start in the capturing phase untill it reaches the target comes back to the element and then it starts bubbling</p>\n\n<p>the capturing and bubbling states are known bye the useCapture parameter of addEventListener method</p>\n\n<blockquote>\n  <p>eventTarget.addEventListener(type,listener,[,useCapture]);</p>\n</blockquote>\n\n<p>By Default useCapture is false. It means it is in the bubbling phase.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code> &lt;div id=\"div1\"&gt;\n   element 1\n     &lt;div id=\"div2\"&gt;\n       element 2\n    &lt;/div&gt;\n &lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>#div1{\n    width:500px;\n    height:500px;\n    background-color:red;\n}\n\n#div2{\n    width:300px;\n    height:300px;\n    background-color:green;\n    margin:0 auto;\n}\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>var div1 = document.querySelector(\"#div1\");\nvar div2 = document.querySelector(\"#div2\");\ndiv1.addEventListener(\"click\", function (event) {\n    alert(\"you clicked on div 1\");\n\n}, true);\n\n\ndiv2.addEventListener(\"click\", function (event) {\n    alert(\"you clicked on div 2\");\n\n\n}, false);\n</code></pre>\n\n<p>Please try with changing true and false.</p>\n",
                    "is_accepted": false,
                    "score": 16
                }
            ],
            "body": "<p>What is the difference between event bubbling and capturing? Of the two, which is the faster and better model to use?</p>\n",
            "last_activity_date": 1413955127,
            "question_id": 4616694,
            "score": 287,
            "tags": [
                "javascript",
                "javascript-events"
            ],
            "title": "What is event bubbling and capturing"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>Well, you can modify the value of the counter, but that is obviously a brittle solution. You can load your content via AJAX after you have determined the site is not within a frame - also not a great solution, but it hopefully avoids firing the on beforeunload event (I am assuming).</p>\n\n<p>Edit: Another idea. If you detect you are in a frame, ask the user to disable javascript, before clicking on a link that takes you to the desired URL (passing a querystring that lets your page know to tell the user that they can re-enable javascript once they are there).</p>\n\n<p>Edit 2: Go nuclear - if you detect you are in a frame, just delete your document body content and print some nasty message.</p>\n\n<p>Edit 3: Can you enumerate the top document and set all functions to null (even anonymous ones)?</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think you were almost there.  Have you tried:</p>\n\n<pre><code>window.parent.onbeforeunload = null;\nwindow.parent.location.replace(self.location.href);\n</code></pre>\n\n<p>or, alternatively:</p>\n\n<pre><code>window.parent.prevent_bust = 0;\n</code></pre>\n\n<p>Note: I didn't actually test this.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Came up with this, and it seems to work at least in Firefox.</p>\n\n<pre><code>if(top != self) {\n top.onbeforeunload = function() {};\n top.location.replace(self.location.href);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>What about calling the buster repeatedly as well? This'll create a race condition, but one may hope that the buster comes out on top:</p>\n\n<pre><code>(function() {\n    if(top !== self) {\n    \ttop.location.href = self.location.href;\n    \tsetTimeout(arguments.callee, 0);\n    }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Ok, so we know that were in a frame. So we location.href to another special page with the path as a GET variable.  We now explain to the user what is going on and provide a link with a target=\"_TOP\" option. It's simple and would probably work (haven't tested it), but it requires some user interaction. Maybe you could point out the offending site to the user and make a hall of shame of click jackers to your site somewhere.. Just an idea, but it night work..</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I'm not sure if this is viable or not - but if you can't break the frame, why not just display a warning. For example, If your page isn't the \"top page\" create a setInterval method that tries to break the frame. If after 3 or 4 tries your page still isn't the top page - create a div element that covers the whole page (modal box) with a message and a link like...</p>\n\n<blockquote>\n  <p>You are viewing this page in a unauthorized frame window - (Blah blah... potential security issue)</p>\n  \n  <p><strong>click this link to fix this problem</strong></p>\n</blockquote>\n\n<p>Not the best, but I don't see any way they could script their way out of that.</p>\n",
                    "is_accepted": true,
                    "score": 114
                },
                {
                    "body": "<p>After pondering this for a little while, I believe this will show them who's boss...</p>\n\n<pre><code>if(top != self) {\n  window.open(location.href, '_top');\n}\n</code></pre>\n\n<p>Using <code>_top</code> as the target parameter for <code>window.open()</code> will launch it in the same window.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>All the proposed solutions directly force a change in the location of the top window. What if a user wants the frame to be there? For example the top frame in the image results of search engines.</p>\n\n<p>I wrote a prototype where by default all inputs (links, forms and input elements) are disabled and/or do nothing when activated.</p>\n\n<p>If a containing frame is detected, the inputs are left disabled and a warning message is shown at the top of the page. The warning message contains a link that will open a safe version of the page in a new window. This prevents the page from being used for clickjacking, while still allowing the user to view the contents in other situations.</p>\n\n<p>If no containing frame is detected, the inputs are enabled.</p>\n\n<p>Here is the code. You need to set the standard HTML attributes to safe values and add additonal attributes that contain the actual values. It probably is incomplete and for full safety additional attributes (I am thinking about event handlers) will probably have to be treated in the same way:</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script&gt;&lt;!--\n      function replaceAttributeValuesWithActualOnes( array, attributeName, actualValueAttributeName, additionalProcessor ) {\n        for ( var elementIndex = 0; elementIndex &lt; array.length; elementIndex += 1 ) {\n          var element = array[ elementIndex ];\n          var actualValue = element.getAttribute( actualValueAttributeName );\n          if ( actualValue != null ) {\n            element[ attributeName ] = actualValue;\n          }\n\n          if ( additionalProcessor != null ) {\n            additionalProcessor( element );\n          }\n        }\n      }\n\n      function detectFraming() {\n        if ( top != self ) {\n          document.getElementById( \"framingWarning\" ).style.display = \"block\";\n        } else {\n          replaceAttributeValuesWithActualOnes( document.links, \"href\", \"acme:href\" );\n\n          replaceAttributeValuesWithActualOnes( document.forms, \"action\", \"acme:action\", function ( form ) {\n            replaceAttributeValuesWithActualOnes( form.elements, \"disabled\", \"acme:disabled\" );\n          });\n        }\n      }\n      // --&gt;\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"detectFraming()\"&gt;\n    &lt;div id=\"framingWarning\" style=\"display: none; border-style: solid; border-width: 4px; border-color: #F00; padding: 6px; background-color: #FFF; color: #F00;\"&gt;\n      &lt;div&gt;\n        &lt;b&gt;SECURITY WARNING&lt;/b&gt;: Acme App is displayed inside another page.\n        To make sure your data is safe this page has been disabled.&lt;br&gt;\n        &lt;a href=\"framing-detection.html\" target=\"_blank\" style=\"color: #090\"&gt;Continue working safely in a new tab/window&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;p&gt;\n      Content. &lt;a href=\"#\" acme:href=\"javascript:window.alert( 'Action performed' );\"&gt;Do something&lt;/a&gt;\n    &lt;/p&gt;\n    &lt;form name=\"acmeForm\" action=\"#\" acme:action=\"real-action.html\"&gt;\n      &lt;p&gt;Name: &lt;input type=\"text\" name=\"name\" value=\"\" disabled=\"disabled\" acme:disabled=\"\"&gt;&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"submit\" name=\"save\" value=\"Save\" disabled=\"disabled\" acme:disabled=\"\"&gt;&lt;/p&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://coderrr.wordpress.com/2009/06/18/anti-anti-frame-busting/\">http://coderrr.wordpress.com/2009/06/18/anti-anti-frame-busting/</a></p>\n\n<pre><code>if (top != self) {  \n  top.location.replace(document.location)  \n  alert('busting you out, please wait...')  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<pre><code>if (top != self) {\n  top.location.replace(location);\n  location.replace(\"about:blank\"); // want me framed? no way!\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you add an alert right after the buster code, then the alert will stall the javascript thread, and it will let the page load. This is what StackOverflow does, and it busts out of my iframes, even when I use the frame busting buster. It also worked with my simple test page. This has only been tested in Firefox 3.5 and IE7 on windows.</p>\n\n<p>Code:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nif (top != self){\n  top.location.replace(self.location.href);\n  alert(\"for security reasons bla bla bla\");\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>setInterval and setTimeout create an automatically incrementing interval.  Each time setTimeout or setInterval is called, this number goes up by one, so that if you call setTimeout, you'll get the current, highest value.</p>\n\n<pre><code>   var currentInterval = 10000;\n   currentInterval += setTimeout( gotoHREF, 100 );\n   for( var i = 0; i &lt; currentInterval; i++ ) top.clearInterval( i );\n   // Include setTimeout to avoid recursive functions.\n   for( i = 0; i &lt; currentInterval; i++ )     top.clearTimeout( i );\n\n   function gotoHREF(){\n           top.location.href = \"http://your.url.here\";\n   }\n</code></pre>\n\n<p>Since it is almost unheard of for there to be 10000 simultaneous setIntervals and setTimeouts working, and since setTimeout returns \"last interval or timeout created + 1\", and since top.clearInterval is still accessible, this will defeat the black-hat attacks to frame websites which are described above.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you look at the values returned by <code>setInterval()</code> they are usually single digits, so you can usually disable all such interrupts with a single line of code:</p>\n\n<pre><code>for (var j = 0 ; j &lt; 256 ; ++j) clearInterval(j)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>FWIW, most current browsers <a href=\"http://en.wikipedia.org/wiki/Clickjacking#X-Frame-Options\">support</a> the <a href=\"http://blogs.msdn.com/ie/archive/2009/01/27/ie8-security-part-vii-clickjacking-defenses.aspx\">X-Frame-Options: deny</a> directive, which works even when script is disabled.</p>\n\n<p>IE8:<br>\n<a href=\"http://blogs.msdn.com/ie/archive/2009/01/27/ie8-security-part-vii-clickjacking-defenses.aspx\">http://blogs.msdn.com/ie/archive/2009/01/27/ie8-security-part-vii-clickjacking-defenses.aspx</a></p>\n\n<p>Firefox (3.6.9)<br>\n<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=475530\">https://bugzilla.mozilla.org/show_bug.cgi?id=475530</a><br>\n<a href=\"https://developer.mozilla.org/en/The_X-FRAME-OPTIONS_response_header\">https://developer.mozilla.org/en/The_X-FRAME-OPTIONS_response_header</a></p>\n\n<p>Chrome/Webkit<br>\n<a href=\"http://blog.chromium.org/2010/01/security-in-depth-new-security-features.html\">http://blog.chromium.org/2010/01/security-in-depth-new-security-features.html</a><br>\n<a href=\"http://trac.webkit.org/changeset/42333\">http://trac.webkit.org/changeset/42333</a></p>\n",
                    "is_accepted": false,
                    "score": 160
                },
                {
                    "body": "<p>I might just have just gotten a way to bust the frame buster buster javascript. Using the getElementsByName in my javascript function, i've set a loop between the frame buster and the actual frame buster buster script.\ncheck this post out. <a href=\"http://www.phcityonweb.com/frame-buster-buster-buster-2426\" rel=\"nofollow\">http://www.phcityonweb.com/frame-buster-buster-buster-2426</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm going to be brave and throw my hat into the ring on this one (ancient as it is), see how many downvotes I can collect.</p>\n\n<p>Here is my attempt, which does seem to work everywhere I have tested it (Chrome20, IE8 and FF14):</p>\n\n<pre><code>(function() {\n    if (top == self) {\n        return;\n    }\n\n    setInterval(function() {\n        top.location.replace(document.location);\n        setTimeout(function() {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\n                'get',\n                'http://mysite.tld/page-that-takes-a-while-to-load',\n                false\n            );\n            xhr.send(null);\n        }, 0);\n    }, 1);\n}());\n</code></pre>\n\n<p>I placed this code in the <code>&lt;head&gt;</code> and called it from the end of the <code>&lt;body&gt;</code> to ensure my page is rendered before it starts arguing with the malicious code, don't know if this is the best approach, YMMV.</p>\n\n<p><strong>How does it work?</strong></p>\n\n<p>...I hear you ask - well the honest answer is, I don't <em>really</em> know. It took a lot of fudging about to make it work everywhere I was testing, and the exact effect that it has varies slightly depending on where you run it.</p>\n\n<p>Here is the thinking behind it:</p>\n\n<ul>\n<li>Set a function to run at the lowest possible interval. The basic concept behind any of the realistic solutions I have seen is to fill up the scheduler with more events than the frame buster-buster has.</li>\n<li>Every time the function fires, try and change the location of the top frame. Fairly obvious requirement.</li>\n<li>Also schedule a function to run immediately which will take a long time to complete (thereby blocking the frame buster-buster from interfering with the location change). I chose a synchronous XMLHttpRequest because it's the only mechanism I can think of that doesn't require (or at least ask for) user interaction and doesn't chew up the user's CPU time.</li>\n</ul>\n\n<p>For my <code>http://mysite.tld/page-that-takes-a-while-to-load</code> (the target of the XHR) I used a PHP script that looks like this:</p>\n\n<pre><code>&lt;?php sleep(5);\n</code></pre>\n\n<p><strong>What happens?</strong></p>\n\n<ul>\n<li>Chrome and Firefox wait the 5 seconds while the XHR completes, then successfully redirect to the framed page's URL.</li>\n<li>IE redirects pretty much immediately</li>\n</ul>\n\n<p><strong>Can't you avoid the wait time in Chrome and Firefox?</strong></p>\n\n<p>Apparently not. At first I pointed the XHR to a URL that would return a 404 - this didn't work in Firefox. Then I tried the <code>sleep(5);</code> approach that I eventually landed on for this answer, then I started playing around with the sleep length in various ways. I could find no real pattern to the behaviour, but I did find that if it is too short, specifically Firefox will not play ball (Chrome and IE seem to be fairly well behaved). I don't know what the definition of \"too short\" is in real terms, but 5 seconds <em>seems</em> to work every time.</p>\n\n<hr>\n\n<p>If any passing Javascript ninjas want to explain a little better what's going on, why this is (probably) wrong, unreliable, the worst code they've ever seen etc I'll happily listen.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>We have used the following approach in one of our websites from <a href=\"http://seclab.stanford.edu/websec/framebusting/framebust.pdf\">http://seclab.stanford.edu/websec/framebusting/framebust.pdf</a></p>\n\n<pre><code>&lt;style&gt;\n body { \n display : none   \n}\n&lt;/style&gt;\n&lt;script&gt;\nif(self == top) {\ndocument.getElementsByTagName(\"body\")[0].style.display = 'block';\n}\nelse{\ntop.location = self.location;\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Considering current HTML5 standard that introduced sandbox for iframe, all frame busting codes that provided in this page can be disabled when attacker uses sandbox because it restricts the iframe from following:</p>\n\n<pre><code>allow-forms: Allow form submissions.\nallow-popups: Allow opening popup windows.\nallow-pointer-lock: Allow access to pointer movement and pointer lock.\nallow-same-origin: Allow access to DOM objects when the iframe loaded form same origin\nallow-scripts: Allow executing scripts inside iframe\nallow-top-navigation: Allow navigation to top level window\n</code></pre>\n\n<p>Please see: <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-iframe-element.html#attr-iframe-sandbox\">http://www.whatwg.org/specs/web-apps/current-work/multipage/the-iframe-element.html#attr-iframe-sandbox</a></p>\n\n<p>Now, consider attacker used the following code to host your site in iframe:</p>\n\n<pre><code>&lt;iframe src=\"URI\" sandbox&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Then, all JavaScript frame busting code will fail. </p>\n\n<p>After checking all frame busing code, only this defense works in all cases:</p>\n\n<pre><code>&lt;style id=\"antiClickjack\"&gt;body{display:none !important;}&lt;/style&gt;\n&lt;script type=\"text/javascript\"&gt;\n   if (self === top) {\n       var antiClickjack = document.getElementById(\"antiClickjack\");\n       antiClickjack.parentNode.removeChild(antiClickjack);\n   } else {\n       top.location = self.location;\n   }\n&lt;/script&gt;\n</code></pre>\n\n<p>that originally proposed by <a href=\"http://seclab.stanford.edu/websec/framebusting/framebust.pdf\">Gustav Rydstedt, Elie Bursztein, Dan Boneh, and Collin Jackson (2010)</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Use htaccess to avoid high-jacking frameset, iframe and any content like images.</p>\n\n<pre><code>RewriteEngine on\nRewriteCond %{HTTP_REFERER} !^http://www\\.yoursite\\.com/ [NC]\nRewriteCond %{HTTP_REFERER} !^$\nRewriteRule ^(.*)$ /copyrights.html [L]\n</code></pre>\n\n<p>This will show a copyright page instead of the expected.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>if (top.location != self.location) {\n    top.location = self.location.href;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Let's say you don't want other sites to \"frame\" your site in an <code>&lt;iframe&gt;</code>:</p>\n\n<pre><code>&lt;iframe src=\"http://example.org\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>So you insert anti-framing, frame busting JavaScript into all your pages:</p>\n\n<pre><code>/* break us out of any containing iframes */\nif (top != self) { top.location.replace(self.location.href); }\n</code></pre>\n\n<p>Excellent! Now you \"bust\" or break out of any containing iframe automatically. Except for one small problem.</p>\n\n<p>As it turns out, <strong>your frame-busting code can be busted</strong>, <a href=\"http://coderrr.wordpress.com/2009/02/13/preventing-frame-busting-and-click-jacking-ui-redressing/\">as shown here</a>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var prevent_bust = 0  \n    window.onbeforeunload = function() { prevent_bust++ }  \n    setInterval(function() {  \n      if (prevent_bust &gt; 0) {  \n        prevent_bust -= 2  \n        window.top.location = 'http://example.org/page-which-responds-with-204'  \n      }  \n    }, 1)  \n&lt;/script&gt;\n</code></pre>\n\n<p>This code does the following:</p>\n\n<ul>\n<li>increments a counter every time the browser attempts to navigate away from the current page, via the <code>window.onbeforeunload</code> event handler</li>\n<li>sets up a timer that fires every millisecond via <code>setInterval()</code>, and if it sees the counter incremented, changes the current location to a server of the attacker's control</li>\n<li>that server serves up a page with HTTP status code <strong>204</strong>, which does not cause the browser to navigate anywhere</li>\n</ul>\n\n<p>My question is -- and this is more of a JavaScript puzzle than an actual <em>problem</em> -- how can you defeat the frame-busting buster? </p>\n\n<p>I had a few thoughts, but nothing worked in my testing:</p>\n\n<ul>\n<li>attempting to clear the <code>onbeforeunload</code> event via <code>onbeforeunload = null</code> had no effect</li>\n<li>adding an <code>alert()</code> stopped the process let the user know it was happening, but did not interfere with the code in any way; clicking OK lets the busting continue as normal</li>\n<li>I can't think of any way to clear the <code>setInterval()</code> timer</li>\n</ul>\n\n<p>I'm not much of a JavaScript programmer, so here's my challenge to you: <strong>hey buster, can you bust the frame-busting buster?</strong></p>\n",
            "last_activity_date": 1424088706,
            "question_id": 958997,
            "score": 326,
            "tags": [
                "javascript",
                "html",
                "iframe",
                "framebusting"
            ],
            "title": "Frame Buster Buster ... buster code needed"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>Handle the <code>onError</code> event for the image to reassign its source using JavaScript:</p>\n\n<pre><code>function imgError(image) {\n    image.onerror = \"\";\n    image.src = \"/images/noimage.gif\";\n    return true;\n}\n</code></pre>\n\n\n\n<pre><code>&lt;img src=\"image.png\" onerror=\"imgError(this);\"/&gt;\n</code></pre>\n\n<p>Or without a JavaScript function:</p>\n\n<pre><code>&lt;img src=\"image.png\" onError=\"this.onerror=null;this.src='/images/noimage.gif';\" /&gt;\n</code></pre>\n\n<p>The following compatibility table lists the browsers that support the error facility:</p>\n\n<p><a href=\"http://www.quirksmode.org/dom/events/error.html\">http://www.quirksmode.org/dom/events/error.html</a></p>\n",
                    "is_accepted": true,
                    "score": 344
                },
                {
                    "body": "<p>I believe this is what you're after: <a href=\"http://flesler.blogspot.com/2008/01/jquerypreload.html\">jQuery.Preload</a></p>\n\n<p>Here's the example code from the demo, you specify the loading and not found images and you're all set:</p>\n\n<pre><code>$('#images img').preload({\n    placeholder:'placeholder.jpg',\n    notFound:'notfound.jpg'\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Not sure if there is a better way, but I can think of a hack to get it - you could ajax post to the img url, and parse the response to see if the image actually came back. If it came back as a 404 or something, then swap out the img. Though i expect this to be quite slow. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I don't know jQuery yet, so my answer will be generic (and the result of a quick search...).\nI found the page <a href=\"http://talideon.com/weblog/2005/02/detecting-broken-images-js.cfm\" rel=\"nofollow\" title=\"talideon.com\">Detecting broken images with JavaScript</a> (via a DZone Snippet, but I better give the original source!) which gives a simple and apparently relatively cross-browser (to test on Opera/Safari) method.</p>\n\n<p>Of course, it would be better to serve a non-broken page, no? Although to be honest it can be a connection issue to.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is a standalone solution:</p>\n\n<pre><code>$(window).load(function() {\n  $('img').each(function() {\n    if (!this.complete || typeof this.naturalWidth == \"undefined\" || this.naturalWidth == 0) {\n      // image was broken, replace with your new image\n      this.src = 'http://www.tranism.com/weblog/images/broken_ipod.gif';\n    }\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I use the built in <code>error</code> handler:</p>\n\n<pre><code>$(\"img\").error(function () {\n  $(this).unbind(\"error\").attr(\"src\", \"broken.gif\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 132
                },
                {
                    "body": "<pre><code>$(window).bind('load', function() {\n$('img').each(function() {\n    if((typeof this.naturalWidth != \"undefined\" &amp;&amp;\n        this.naturalWidth == 0 ) \n        || this.readyState == 'uninitialized' ) {\n        $(this).attr('src', 'missing.jpg');\n    }\n}); })\n</code></pre>\n\n<p>Source: <a href=\"http://www.developria.com/2009/03/jquery-quickie---broken-images.html\">http://www.developria.com/2009/03/jquery-quickie---broken-images.html</a></p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>couldn't find a script to suit my needs so I made a recursive function to check for broken images and attempt to reload them every 4 sec until they are fixed. I limited it to 10 attempt as if it's not loaded by then the image might not be present on server and the function would enter an infinite loop. Still testing though. Feel free to tweak it :)</p>\n\n<pre><code>var retries = 0;   \n$.imgReload = function() {\nvar loaded = 1;\n\n\n$(\"img\").each(function() {\n    if (!this.complete || typeof this.naturalWidth == \"undefined\" || this.naturalWidth == 0) {\n\n        var src = $(this).attr(\"src\");\n        var date = new Date();          \n        $(this).attr(\"src\", src + \"?v=\" + date.getTime()); //slightly change url to prevent loading from cache\n        loaded =0;\n\n    }\n});\nretries +=1;\nif(retries &lt; 10) //if after 10 retries error images are not fixed maybe because they are not present on server, the recursion will break the loop\n {if(loaded == 0)\n   {setTimeout('$.imgReload()',4000); // I think 4 seconds is enough to load a small image (&lt;50k) from a slow server\n   } \n  //all images have been loaded \n  else {// alert(\"images loaded\");\n       }\n }\n //if error images cannot be loaded  after 10 retries\n else {// alert(\"recursion exceeded\");\n      }\n\n}\n\njQuery(document).ready(function() {\n setTimeout('$.imgReload()',5000);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>better call using </p>\n\n<pre><code>jQuery(window).load(function(){\n$.imgReload();\n});\n</code></pre>\n\n<p>because using document.ready doesn't necessary imply that images are loaded, only the html. thus no need for a delayed call</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just for information in case someone like me try to attach the <strong>error</strong> event on a dynamic HTML <code>img</code> tags well there is catch because apparently <code>img</code> error event <strong><a href=\"http://forum.jquery.com/topic/error-event-with-live\">don't bubble</a></strong> in most browsers at the opposite of what the <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-htmlevents\">standard</a> say:</p>\n\n<p>So something like this will <strong>not work</strong>:</p>\n\n<pre><code>$(document).on('error', 'img', function () { ... })\n</code></pre>\n\n<p>Hope this will be helpful to someone else, i wish i had seen this here in this thread but i didn't so i am adding it :)</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<pre><code>;(window.jQuery || window.Zepto).fn.fallback = function (fallback) {\n    return this.one('error', function () {\n        var self = this;\n        this.src = (fallback || 'http://lorempixel.com/$width/$height')\n        .replace(/\\$(\\w+)/g, function (m, t) { return self[t] || ''; });\n    });\n};\n</code></pre>\n\n<p>You can pass a placeholder path and acces in it all properties from the failed image object via <code>$*</code>:</p>\n\n<pre><code>$('img').fallback('http://dummyimage.com/$widthx$height&amp;text=$src');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/ARTsinn/Cu4Zn/\" rel=\"nofollow\">http://jsfiddle.net/ARTsinn/Cu4Zn/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just because there's not enough answers here, here's my coffeescript variant. I made it to fix an issue with Turbolinks that causes the .error() method to get raised in firefox sometimes even though the image is really there.</p>\n\n<pre><code>$(\"img\").error -&gt; \n  e = $(@).get 0\n  $(@).hide() if !$.browser.msie &amp;&amp; (typeof this.naturalWidth == \"undefined\" || this.naturalWidth == 0)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I Solve my problem with this two simple function:</p>\n\n<pre><code>function imgExists(imgPath) {\n  var http = jQuery.ajax({\n                type:\"HEAD\",\n        url: imgPath,\n        async: false\n          });\n  return http.status!=404;\n}\n\nfunction handleImageError() {\n    var imgPath;\n\n    $('img').each(function(){\n        imgPath = $(this).attr('src');\n        if(!imgExists(imgPath)){\n            $(this).attr('src', 'images/noimage.jpg');\n        }\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a quick and dirty way to replace all the broken images no need to change the html code ;)</p>\n\n<p><a href=\"http://ashfaqahmed.net/jquery-replacing-broken-images/\" rel=\"nofollow\">http://ashfaqahmed.net/jquery-replacing-broken-images/</a></p>\n\n<pre><code>$(\"img\").each(function(){ \nvar NoImageUrl = \"http://www.acsu.buffalo.edu/~rslaine/imageNotFound.jpg\";\nvar image = $(this); \nvar ThisHeight = $(image).css(\"height\");\nvar ThisWidth = $(image).css(\"width\");\nif(image.context.naturalWidth == 0 || image.readyState == 'uninitialized')\n{    \n    $(image).unbind(\"error\").attr(\"src\", NoImageUrl).css(\n    { \n        height: ThisHeight,\n        width: ThisWidth,\n    }); \n} }); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is a crappy technique, but it's pretty much guaranteed:</p>\n\n<pre><code>&lt;img ...  onerror=\"this.parentNode.removeChild(this);\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This has been frustrating me for years.  My CSS fix sets a background image on the <code>img</code>. When a dynamic image <code>src</code> doesn't load to the foreground, a placeholder is visible on the <code>img</code>'s bg.  This works if your images have a default size (e.g. <code>height</code>, <code>min-height</code>, <code>width</code> and/or <code>min-width</code>).</p>\n\n<p>You'll see the broken image icon but it's an improvement.  Tested down to IE9 successfully.  iOS Safari and Chrome don't even show a broken icon.</p>\n\n<pre><code>.dynamicContainer img {\n  background: url('/images/placeholder.png');\n  background-size: contain;\n}\n</code></pre>\n\n<p>Add a little animation to give <code>src</code> time to load without a background flicker.  Chrome fades in the background smoothly but desktop Safari doesn't.</p>\n\n<pre><code>.dynamicContainer img {\n  background: url('/images/placeholder.png');\n  background-size: contain;\n  -webkit-animation: fadein 1s;\n  animation: fadein 1s;                     \n}\n\n@-webkit-keyframes fadein {\n  0%   { opacity: 0.0; }\n  50%  { opacity: 0.5; }\n  100% { opacity: 1.0; }\n}\n\n@keyframes fadein {\n  0%   { opacity: 0.0; }\n  50%  { opacity: 0.5; }\n  100% { opacity: 1.0; }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>By using Prestaul's answer I added some checks and I prefer to use jQuery way.</p>\n\n<pre><code>&lt;img src=\"image1.png\" onerror=\"imgError(this,1);\"/&gt;\n&lt;img src=\"image2.png\" onerror=\"imgError(this,2);\"/&gt;\n\nfunction imgError(image, type) {\n    if (typeof jQuery !== 'undefined') {\n       var imgWidth=$(image).attr(\"width\");\n       var imgHeight=$(image).attr(\"height\");\n\n        // type 1 puts a placeholder image\n        // type 2 hides img tag\n        if (type == 1) {\n            if (typeof imgWidth !== 'undefined' &amp;&amp; typeof imgHeight !== 'undefined') {\n                $(image).attr(\"src\", \"http://lorempixel.com/\" + imgWidth + \"/\" + imgHeight + \"/\");\n            } else {\n               $(image).attr(\"src\", \"http://lorempixel.com/200/200/\");\n            }\n        } else if (type == 2) {\n            $(image).hide();\n        }\n    }\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Bouncing off of Nick's solution with using <a href=\"http://flesler.blogspot.com/2008/01/jquerypreload.html\" rel=\"nofollow\">jQuery.Preload</a> , you can extend the preload method with a callback, which could then do some serious jQuery manipulations on the placeholder image itself...</p>\n\n<p>Here is a working solution for FireFox situations...</p>\n\n<pre><code>function checkimages() {\n/*DETECT FIREFOX AND CHECK FOR BROKEN IMAGES*/\nvar mfirefox = !(window.mozInnerScreenX == null);\nif(mfirefox) {\n    var mpath = 'images/';\n    var mimage = 'no-image_40x40.png';\n    $('#wrapper img').preload({\n        placeholder:mpath + mimage,\n        notFound:mpath + mimage,\n        onFinish: function(data){\n          //GET THE DATA IMAGE SOURCE\n          var $fullsource = data.original.src;\n          //GET THE NAME OF THE FILE\n          var $imagename = $fullsource.lastIndexOf(\"/\") + 1;\n          $imagename = $fullsource.substr($imagename);\n          //NOW DO WHATEVER YOU WANT WITH THIS REPLACEMENT ICON VIA JQUERY\n          $(\"img[src='\"+ mpath + $imagename+\"']\").css({border: 'solid 1px #777', width:40, height:40});\n        }\n    });\n}\n/**/\n}\n</code></pre>\n\n<p>The only thing I would like to add to this, is detecting the orginal name of the image \"before\" it was replaced, and appending it to the alt tag.</p>\n\n<p>Hope this helps.  You can get the latest version of <a href=\"https://github.com/flesler/jquery.preload\" rel=\"nofollow\">jQuery.Preload here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What about this solution?</p>\n\n<p>It's plain javascript should be crossbrowser compatible and delivers without ugly markup <code>onerror=\"\"</code>:</p>\n\n<pre><code>var sPathToDefaultImg = 'http://cdn.sstatic.net/stackexchange/img/logos/so/so-icon.png';\n\nvar fnValidateImage   = function ( oImg )\n{\n  img         = new Image();\n  img.onerror = function () {\n    oImg.src  = sPathToDefaultImg;\n  };\n  img.src     = oImg.src;\n};\n\nvar aImg = document.getElementsByTagName('IMG');\nvar i    = aImg.length;\n\nwhile ( --i !== -1 ) {\n  fnValidateImage( aImg[ i ] );\n}\n</code></pre>\n\n<p><a href=\"http://codepen.io/elstermann/pen/giEvC?editors=001\" rel=\"nofollow\">Feel free to play around with this CODEPEN</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is JavaScript, should be cross browser compatible, and delivers without the ugly markup <code>onerror=\"\"</code>:</p>\n\n<pre><code>var sPathToDefaultImg = 'http://cdn.sstatic.net/stackexchange/img/logos/so/so-icon.png';\nvar fnValidateImage = function(oImg) {\n    img = new Image();\n    img.onerror = function() {\n        oImg.src = sPathToDefaultImg;\n    };\n    img.src = oImg.src;\n};\nvar aImg = document.getElementsByTagName('IMG');\nvar i = aImg.length;\nwhile (--i !== -1) {\n    fnValidateImage(aImg[i]);\n}\n</code></pre>\n\n<p><a href=\"http://codepen.io/elstermann/pen/giEvC?editors=001\" rel=\"nofollow\">CODEPEN: </a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you have inserted your <code>img</code> with <code>innerHTML</code>, like: <code>$(\"div\").innerHTML = &lt;img src=\"wrong-uri\"&gt;</code>, you can load another image if it fails doing, e.g, this:</p>\n\n<pre><code>&lt;script&gt;\nfunction imgError(img) {\n    img.error=\"\";\n    img.src=\"valid-uri\";\n}\n&lt;/script&gt;\n\n&lt;img src=\"wrong-uri\" onerror=\"javascript:imgError(this)\"&gt;\n</code></pre>\n\n<p>Why <code>javascript: _</code>is needed? Because scripts injected into the DOM via script tags in <code>innerHTML</code> are not run at the time they are injected, so you have to be explicit</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use the code below which first tries to find the current user's avatar based on their userid which in this case is \"123\", and if it doesn't find an avatar image the onerror code changes the img src to a placeholder image.</p>\n\n<pre><code>&lt;img src=\"avatars/users/123.png\" onerror=\"this.src='/ngTribeBase/src/assets/img/avatars/male.png'\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a web page that includes a bunch of images.\nSometimes the image isn't available so a broken image is displayed in the clients browser.</p>\n\n<p>How do I use jQuery to get the set of images, filter it to broken images then replace the   src?</p>\n\n<p>--I thought it would be easier to do this with Jquery, but It turned out much easier to just use a pure javascript solution. i.e the one provided by Prestaul</p>\n",
            "last_activity_date": 1424195966,
            "question_id": 92720,
            "score": 267,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "brokenimage"
            ],
            "title": "jQuery/Javascript to replace broken images"
        },
        {
            "answer_count": 42,
            "answers": [
                {
                    "body": "<p>For the love of $DEITY please do not make a busy-wait sleep function.  <code>setTimeout</code> and <code>setInterval</code> do everything you need.</p>\n",
                    "is_accepted": false,
                    "score": 108
                },
                {
                    "body": "<p>You can't do a sleep like that in JavaScript, or, rather, you shouldn't. Running a sleep or a while loop will cause the user's browser to hang until the loop is done.</p>\n\n<p>Use a timer, as specified in the link you referenced. </p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>In JavaScript, I rewrite every function so that it can end as soon as possible. You want the browser back in control so it can make your DOM changes.</p>\n\n<p>Every time I've wanted a sleep in the middle of my function, I refactored to use a setTimeout().</p>\n",
                    "is_accepted": true,
                    "score": 323
                },
                {
                    "body": "<p>First:</p>\n\n<p>Define a function you want to execute like this:</p>\n\n<pre><code>function alertWorld(){\n  alert(\"Hello World\");\n}\n</code></pre>\n\n<p>Then schedule its execution with the setTimeout method:</p>\n\n<pre><code>setTimeout(alertWorld,1000)\n</code></pre>\n\n<p>Note two things</p>\n\n<ul>\n<li>the second argument is time in miliseconds</li>\n<li>as a first argument you have to pass just the name (reference) of the function, without the parenthesis</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>This is really not a good idea, doing something like this would cause the entire page to freeze up while the system waited for your function to return.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I agree with the other posters, a busy sleep is just a bad idea.</p>\n\n<p>However, setTimeout does not hold up execution, it executes the next line of the function immediately after the timeout is SET, not after the timeout expires, so that does not accomplish the same task that a sleep would accomplish.</p>\n\n<p>The way to do it is to breakdown your function in to before and after parts. </p>\n\n<pre><code>function doStuff()\n{\n  //do some things\n  setTimeout(continueExecution, 10000) //wait ten seconds before continuing\n}\n\nfunction continueExecution()\n{\n   //finish doing things after the pause\n}\n</code></pre>\n\n<p>Make sure your function names still accurately describe what each piece is doing (I.E. GatherInputThenWait and CheckInput, rather than funcPart1 and funcPart2)</p>\n\n<p><strong>Edit</strong> </p>\n\n<p>This method achieves the purpose of not executing the lines of code you decide until AFTER your timeout, while still returning control back to the client PC to execute whatever else it has queued up.</p>\n\n<p><strong>Further Edit</strong></p>\n\n<p>As pointed out in the comments this will absolutely NOT WORK in a loop. You could do some fancy (ugly) hacking to make it work in a loop, but in general that will just make for disastrous spaghetti code.</p>\n",
                    "is_accepted": false,
                    "score": 92
                },
                {
                    "body": "<p>If you're using jQuery, someone actually created a \"delay\" plugin that's nothing more than a wrapper for setTimeout:</p>\n\n<pre><code>// Delay Plugin for jQuery\n// - http://www.evanbot.com\n// - \u00a9 2008 Evan Byrne\n\njQuery.fn.delay = function(time,func){\n    this.each(function(){\n    \tsetTimeout(func,time);\n    });\n\n    return this;\n};\n</code></pre>\n\n<p>You can then just use it in a row of function calls as expected:</p>\n\n<pre><code>$('#warning')\n.addClass('highlight')\n.delay(1000)\n.removeClass('highlight');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>I have searched/googled quite a few webpages on javascript sleep/wait... and there is NO answer if you want javascript to \"RUN, DELAY, RUN\"... what most people got was either, \"RUN, RUN(useless stuff), RUN\" or \"RUN, RUN + delayed RUN\"....</p>\n\n<p>So I ate some burgers and got thinking:::\nhere is a solution that works... but you have to chop up your running codes...:::\nyes, I know, this is just an easier to read refactoring... still...</p>\n\n<p>//.........................................\n//example1:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setInterval\nvar i = 0;\n\nfunction run() {\n    //pieces of codes to run\n    if (i==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i &gt;2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i==5){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;all code segment finished running&lt;/p&gt;\"; clearInterval(t); } //end interval, stops run\n    i++; //segment of code finished running, next...\n}\n\nrun();\nt=setInterval(\"run()\",1000);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>//....................................\n//example2:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setTimeout\nvar i = 0;\n\nfunction run() {\n    //pieces of codes to run, can use switch statement\n    if (i==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\"; sleep(1000);}\n    if (i==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\"; sleep(2000);}\n    if (i==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\"; sleep(3000);}\n    if (i==3){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\";} //stops automatically\n    i++;\n}\n\nfunction sleep(dur) {t=setTimeout(\"run()\",dur);} //starts flow control again after dur\n\nrun(); //starts\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>//.................\nexample3:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setTimeout\nvar i = 0;\n\nfunction flow() {\n    run(i);\n    i++; //code segment finished running, increment i; can put elsewhere\n    sleep(1000);\n    if (i==5) {clearTimeout(t);} //stops flow, must be after sleep()\n}\n\nfunction run(segment) {\n    //pieces of codes to run, can use switch statement\n    if (segment==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment &gt;2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n}\n\nfunction sleep(dur) {t=setTimeout(\"flow()\",dur);} //starts flow control again after dur\n\nflow(); //starts flow\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>//..............\nexample4:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setTimeout, switch\nvar i = 0;\n\nfunction flow() {\n    switch(i)\n    {\n    \tcase 0:\n    \t\trun(i);\n    \t\tsleep(1000);\n    \t\tbreak;\n    \tcase 1:\n    \t\trun(i);\n    \t\tsleep(2000);\n    \t\tbreak;\n    \tcase 5:\n    \t\trun(i);\n    \t\tclearTimeout(t); //stops flow\n    \t\tbreak;\n    \tdefault:\n    \t\trun(i);\n    \t\tsleep(3000);\n    \t\tbreak;\n    }\n}\n\nfunction run(segment) {\n    //pieces of codes to run, can use switch statement\n    if (segment==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment &gt;2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    i++; //current segment of code finished running, next...\n}\n\nfunction sleep(dur) {t=setTimeout(\"flow()\",dur);} //starts flow control again after dur\n\nflow(); //starts flow control for first time...\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>For the specific case of wanting to space out a set of calls being executed by a loop, you can use something like the code below with prototype. Without prototype, you can substitute the delay function with setTimeout.</p>\n\n<pre><code>function itemHandler(item)\n{\n    alert(item);\n}\n\nvar itemSet = ['a','b','c'];\n\n// Each call to itemHandler will execute\n// 1 second apart\nfor(var i=0; i&lt;itemSet.length; i++)\n{\n    var secondsUntilExecution = i;\n    itemHandler.delay(secondsUntilExecution, item)\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>One scenario where you might want a sleep() function rather than using setTimeout() is if you have a function responding to a user click that will ultimately end up opening a new i.e. popup window and you have initiated some processing that requires a short period to complete before the popup is displayed. Moving the open window into a closure means that it typically gets blocked by the browser.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think it's perfectly reasonable to want to perform an action, wait, then perform another action. If you are used to writing in multi-threaded languages, you probably have the idea of yielding execution for a set amount of time until your thread wakes up.</p>\n\n<p>The issue here is that JavaScript is a single-thread event-based model. While in a specific case, it might be nice to have the whole engine wait for a few seconds, in general it is bad practice. Suppose I wanted to make use of your functions while writing my own? When I called your method, my methods would all freeze up. If JavaScript could somehow preserve your function's execution context, store it somewhere, then bring it back and continue later, then sleep could happen, but that would basically be threading.</p>\n\n<p>So you are pretty much stuck with what others have suggested -- you'll need to break your code up into multiple functions.</p>\n\n<p>Your question is a bit of a false choice, then. There is no way to sleep in the way you want, nor should you pursue the solution you suggest.</p>\n",
                    "is_accepted": false,
                    "score": 436
                },
                {
                    "body": "<p>I've searched for sleep soluton too(not for real project for now, only tests) and found this article:\n<a href=\"http://narayanraman.blogspot.com/2005/12/javascript-sleep-or-wait.html\">http://narayanraman.blogspot.com/2005/12/javascript-sleep-or-wait.html</a>\nAnd another link with client-side solutions:\n<a href=\"http://www.devcheater.com/\">http://www.devcheater.com/</a>\nLooks good. Also when you are calling alert(), your code will be paused too, while alert is shown -- need to find a way to not display alert but get the same effect. :)</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>I can understand the purpose of a sleep function if you have to deal with synchronous execution. The setInterval and setTimeout functions create a parallel execution thread which returns the execution sequence back to the main program, which is ineffective if you have to wait for a given result. Of course one may use events and handlers, but in some cases is not what is intended.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Better solution to make things look like what most people want is to use an anonymous function:</p>\n\n<pre><code>alert('start');\nvar a = 'foo';\n//lots of code\nsetTimeout(function(){  //Beginning of code that should run AFTER the timeout\n    alert(a);\n    //lots more code\n},5000);  // put the timeout here\n</code></pre>\n\n<p>This is probably the closest you'll get to something that simply does what you want.</p>\n\n<p>Note, if you need multiple sleeps this can get ugly in a hurry and you might actually need to rethink your design.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>First of all - setTimeout and setInterval is what <strong>should</strong> be used, because of javascript's callback-ish nature. If you want to use <code>sleep()</code> it's the control flow or the architecture of your code that is incorrect.</p>\n\n<p>Having said that I suppose I still can help with two implementation of a sleep.</p>\n\n<ol>\n<li><p>faking synchronous run off the top of my head:</p>\n\n<pre><code>//a module to do taht //dual-license: MIT or WTF [you can use it anyhow and leave my nickname in a comment if you want to]\nvar _=(function(){\n var queue=[];\n var play=function(){\n   var go=queue.shift();\n     if(go){if(go.a){go.f();play();}else{setTimeout(play,go.t);}}\n   }\n return {\n   go:function(f){\n    queue.push({a:1,f:f});\n    },\n   sleep:function(t){\n    queue.push({a:0,t:t});\n    },\n   playback:play \n }\n})();\n</code></pre>\n\n<p>[making playback automatic should also be possible]</p>\n\n<pre><code>//usage\n\n_.go(function(){\n\n//your code\nconsole.log('first');\n\n});\n\n\n_.sleep(5000);\n\n_.go(function(){\n\n//your code\nconsole.log('next');\n\n});\n\n//this triggers the simulation\n_.playback();\n</code></pre></li>\n<li><p>real synchronous run</p></li>\n</ol>\n\n<p>I gave it a lot of thought one day and the only idea I had for a true sleep in javascript is technical.</p>\n\n<p>a sleep function would have to be a <strong>synchronous</strong> AJAX call with a timeout set to the sleep value. That's all and an only way to have a real <code>sleep()</code></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you want to sleep an anonymous function like one you've created as a handler, I recommend the following:</p>\n\n<pre><code>function()\n{\nif (!wait_condition)\n    {\n    setTimeout(arguments.callee, 100, /*comma-separated arguments here*/);\n    }\n//rest of function\n}\n</code></pre>\n\n<p>This code says \"If the wait condition has not yet been satisfied, call this function again with these arguments.\" I've used this method to pass in the same arguments to my handlers, effectively making this code a non-polling sleep() (which only works at the start of your function).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is a bit of an old question, but if (like me) you're using Javascript with Rhino, you can use...</p>\n\n<pre><code>try\n{\n  java.lang.Thread.sleep(timeInMilliseconds);\n}\ncatch (e)\n{\n  /*\n   * This will happen if the sleep is woken up - you might want to check\n   * if enough time has passed and sleep again if not - depending on how\n   * important the sleep time is to you.\n   */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>Code taken from this <a href=\"http://www.daniweb.com/web-development/javascript-dhtml-ajax/threads/47199\" rel=\"nofollow\">link</a> will not freeze comp. But it works only on ff.</p>\n\n<pre><code>    /**\n * Netscape compatible WaitForDelay function.\n * You can use it as an alternative to Thread.Sleep() in any major programming language\n * that support it while JavaScript it self doesn't have any built-in function to do such a thing.\n * parameters:\n * (Number) delay in millisecond\n*/\nfunction nsWaitForDelay(delay) {\n/**\n  * Just uncomment this code if you're building an extention for Firefox.\n  * Since FF3, we'll have to ask for user permission to execute XPCOM objects.\n  */\nnetscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\");\n\n// Get the current thread.\nvar thread = Components.classes[\"@mozilla.org/thread-manager;1\"].getService(Components.interfaces.nsIThreadManager).currentThread;\n\n// Create an inner property to be used later as a notifier.\nthis.delayed = true;\n\n/* Call JavaScript setTimeout function\n  * to execute this.delayed = false\n  * after it finish.\n  */\nsetTimeout(\"this.delayed = false;\", delay);\n\n/**\n  * Keep looping until this.delayed = false\n  */\nwhile (this.delayed) {\n/**\n  * This code will not freeze your browser as it's documented in here:\n  * https://developer.mozilla.org/en/Code_snippets/Threads#Waiting_for_a_background_task_to_complete\n  */\nthread.processNextEvent(true);\n}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>A method of an object that needs to use a \"sleep\" method such as the following:</p>\n\n<pre><code>function SomeObject() {\n    this.SomeProperty = \"xxx\";\n    return this;\n}\nSomeObject.prototype.SomeMethod = function () {\n    this.DoSomething1(arg1);\n    sleep(500);\n    this.DoSomething2(arg1);\n}\n</code></pre>\n\n<p>Can almost be translated to:</p>\n\n<pre><code>function SomeObject() {\n    this.SomeProperty = \"xxx\";\n    return this;\n}\nSomeObject.prototype.SomeMethod = function (arg1) {\n    var self = this;\n    self.DoSomething1(arg1);\n    setTimeout(function () {\n        self.DoSomething2(arg1);\n    }, 500);\n}\n</code></pre>\n\n<p>The difference is that the operation of \"SomeMethod\" returns before the operation \"DoSomething2\" is executed. The caller of \"SomeMethod\" cannot depend on this. Since the \"Sleep\" method does not exists, I use the later method and design my code accordingly.</p>\n\n<p>I hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A good alternative in some situations is to display a top-level message panel to stop user interaction, and then hide it again when you get the result you're waiting for (asynchronously). That allows the browser to get on with background tasks, but pauses the workflow until you've got your result back.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here you go.  As the code says, don't be a bad dev and use this on websites.  It's a development utility function.</p>\n\n<pre><code>// Basic sleep function based on ms.\n// DO NOT USE ON PUBLIC FACING WEBSITES.\nfunction sleep(ms) {\n    var unixtime_ms = new Date().getTime();\n    while(new Date().getTime() &lt; unixtime_ms + ms) {}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Adding my two bits. I needed a busy-wait for testing purposes. I didn't want to split the code as that would be a lot of work, so a simple for did it for me. </p>\n\n<pre><code>for (var i=0;i&lt;1000000;i++){                    \n     //waiting\n  }\n</code></pre>\n\n<p>I don't see any downside in doing this and it did the trick for me.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>It can be done using Java's sleep method. I've tested it in FF and IE and it doesn't lock the computer, chew up resources, or cause endless server hits. Seems like a clean solution to me.</p>\n\n<p>First you have to get Java loaded up on the page and make its methods available. To do that, I did this:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\n  function load() {\n    var appletRef = document.getElementById(\"app\");\n    window.java = appletRef.Packages.java;\n  } // endfunction\n\n&lt;/script&gt;\n\n&lt;body onLoad=\"load()\"&gt;\n\n&lt;embed id=\"app\" code=\"java.applet.Applet\" type=\"application/x-java-applet\" MAYSCRIPT=\"true\" width=\"0\" height=\"0\" /&gt;\n</code></pre>\n\n<p>Then, all you have to do when you want a painless pause in your JS is:</p>\n\n<pre><code>java.lang.Thread.sleep(xxx)\n</code></pre>\n\n<p>Where xxx is time in milliseconds. In my case (by way of justification), this was part of back-end order fulfillment at a very small company and I needed to print an invoice that had to be loaded from the server. I did it by loading the invoice (as a webpage) into an iFrame and then printing the iFrame. Of course, I had to wait until the page was fully loaded before I could print, so the JS had to pause. I accomplished this by having the invoice page (in the iFrame) change a hidden form field on the parent page with the onLoad event.  And the code on the parent page to print the invoice looked like this (irrelevant parts cut for clarity):</p>\n\n<pre><code>var isReady = eval('document.batchForm.ready');\nisReady.value=0;\n\nframes['rpc_frame'].location.href=url;\n\nwhile (isReady.value==0) {\n  java.lang.Thread.sleep(250);\n} // endwhile\n\nwindow.frames['rpc_frame'].focus();\nwindow.frames['rpc_frame'].print();\n</code></pre>\n\n<p>So the user pushes the button, the script loads the invoice page, then waits, checking every quarter second to see if the invoice page is finished loading, then pops up the print dialog for the user to send it to the printer.  QED.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Or just create this:</p>\n\n<pre><code>function yourFunction(){\n\n   //do something\n   setInterval(myFunc(),1000);\n   //do something else\n\n}\n\nfunction myFunc(){\n   return;\n}\n</code></pre>\n\n<p>this will just wait the interval specified and call the function which will just do nothing.</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>For browsers, I agree that setTimeout and setInterval are the way to go.</p>\n\n<p>But for server-side code, it may require a blocking function (for example, so you can effectively have thread synchronization).</p>\n\n<p>If you're using node.js and meteor, you may have run into the limitations of using setTimeout in a fiber. Here is the code for server-side sleep.</p>\n\n<pre><code>var Fiber = require('fibers');\n\nfunction sleep(ms) {\n    var fiber = Fiber.current;\n    setTimeout(function() {\n        fiber.run();\n    }, ms);\n    Fiber.yield();\n}\n\nFiber(function() {\n    console.log('wait... ' + new Date);\n    sleep(1000);\n    console.log('ok... ' + new Date);\n}).run();\nconsole.log('back in main');\n</code></pre>\n\n<p>See: <a href=\"https://github.com/laverdet/node-fibers#sleep\" rel=\"nofollow\">https://github.com/laverdet/node-fibers#sleep</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you right a sleep function like this</p>\n\n<pre><code>var sleep = function(period, decision, callback){\n    var interval = setInterval(function(){\n        if (decision()) {\n            interval = clearInterval(interval);\n            callback();\n        }\n    }, period);\n}\n</code></pre>\n\n<p>and you have a asynchronous function to call multiple times</p>\n\n<pre><code>var xhr = function(url, callback){\n    // make ajax request\n    // call callback when request fulfills\n}\n</code></pre>\n\n<p>And you setup your project like this:</p>\n\n<pre><code>var ready = false;\n\nfunction xhr1(){\n    xhr(url1, function(){ ready = true;});  \n}\nfunction xhr2(){\n    xhr(url2, function(){ ready = true; }); \n}\nfunction xhr3(){\n    xhr(url3, function(){ ready = true; }); \n}\n</code></pre>\n\n<p>Then you can do this:</p>\n\n<pre><code>xhr1();\nsleep(100, function(){ return done; }, xhr2);\nsleep(100, function(){ return done; }, xhr3);\nsleep(100, function(){ return done; }, function(){\n    // do more\n});\n</code></pre>\n\n<p>Instead of endless callback indentation like this:</p>\n\n<pre><code>xhr(url1, function(){\n    xhr2(url2, function(){\n        xhr3(url3, function(){\n            // do more\n        });\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>only for debug/dev , I post this if it's useful to someone</p>\n\n<p>Interesting stuff, in Firebug ( &amp; probably other js consoles ), nothing happen after hitting enter, only after the sleep duration specified (...)</p>\n\n<pre><code>function sleepFor( sleepDuration ){\n    var now = new Date().getTime();\n    while(new Date().getTime() &lt; now + sleepDuration){ /* do nothing */ } \n}\n</code></pre>\n\n<p>Example of use:</p>\n\n<pre><code>function sleepThenAct(){ sleepFor(2000); console.log(\"hello js sleep !\"); }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<pre><code>var waitTillSomethingHappens = function(){  \n    if(somethingHappened == 1)  \n    {  \n        alert('Something Happened get out of sleep');  \n    }\n    else\n    {  \n    setTimeout(waitTillSomethingHappens,1000);  \n    }  \n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>I use the multithread HTML5 Worker which will be able to abort an synchronous XMLHttpRequest pointing to an unresponsive URL. This does not block the browser.</p>\n\n<p><a href=\"https://gist.github.com/el-gringo/6990785\" rel=\"nofollow\">https://gist.github.com/el-gringo/6990785</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The short answer is <em>NO</em>, not in javascript by itself.  You solution seems to be the only way to not return control back to the environment.</p>\n\n<p>This is necessary if the environment does not support events.  They probably wouldn't support the settimeout either.</p>\n\n<p>settimeout is definitely the best way if you are in an event driven environment suchas a browser or node.js.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function sleep(milliseconds) {\n  var start = new Date().getTime();\n  for (var i = 0; i &lt; 1e7; i++) {\n    if ((new Date().getTime() - start) &gt; milliseconds){\n      break;\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I'm sure there is a million ways to do this one better, but I thought I would give it a try by creating an object:</p>\n\n<pre><code>// execute code consecutively with delays (blocking/non-blocking internally)\nfunction timed_functions() \n{\nthis.myfuncs = [];\nthis.myfuncs_delays = []; // mirrors keys of myfuncs -- values stored are custom delays, or -1 for use default\nthis.myfuncs_count = 0; // increment by 1 whenever we add a function\nthis.myfuncs_prev   = -1; // previous index in array\nthis.myfuncs_cur    = 0; // current index in array\nthis.myfuncs_next  = 0; // next index in array\nthis.delay_cur     = 0; // current delay in ms\nthis.delay_default = 0; // default delay in ms\nthis.loop = false;      // will this object continue to execute when at end of myfuncs array?\nthis.finished = false;  // are we there yet?\nthis.blocking = true;   // wait till code completes before firing timer?\nthis.destroy = false;   // &lt;advanced&gt; destroy self when finished\n\n\nthis.next_cycle = function() {\nvar that  = this;\nvar mytimer = this.delay_default;\n\nif(this.myfuncs_cur &gt; -1)\nif(this.myfuncs_delays[this.myfuncs_cur] &gt; -1)\nmytimer = this.myfuncs_delays[this.myfuncs_cur];\n\nconsole.log(\"fnc:\" + this.myfuncs_cur);\nconsole.log(\"timer:\" + mytimer);\nconsole.log(\"custom delay:\" + this.myfuncs_delays[this.myfuncs_cur]);\nsetTimeout(function() {\n// times up! next cycle...\nthat.cycle(); \n\n}, mytimer);\n}\n\nthis.cycle = function() {\n\n// now check how far we are along our queue.. is this the last function?\nif(this.myfuncs_next + 1 &gt; this.myfuncs_count)\n{\nif(this.loop)\n{\nconsole.log('looping..');\nthis.myfuncs_next = 0;\n}\nelse\nthis.finished = true;\n}\n\n\n// first check if object isn't finished\nif(this.finished)\nreturn false;\n\n// HANDLE NON BLOCKING //\nif(this.blocking != true) // blocking disabled\n{\nconsole.log(\"NOT BLOCKING\");\nthis.next_cycle();\n}\n\n\n// set prev = current, and current to next, and next to new next\nthis.myfuncs_prev = this.myfuncs_cur;\nthis.myfuncs_cur  = this.myfuncs_next;\nthis.myfuncs_next++; \n\n// execute current slot\nthis.myfuncs[this.myfuncs_cur]();\n\n\n\n\n// HANDLE BLOCKING\nif(this.blocking == true)  // blocking enabled\n{\nconsole.log(\"BLOCKING\");\nthis.next_cycle();\n}\n\n\n\n\nreturn true;\n};\n\n// adders \nthis.add = {\nthat:this,\n\nfnc: function(aFunction) { \n// add to the function array\nvar cur_key = this.that.myfuncs_count++;\nthis.that.myfuncs[cur_key] = aFunction;\n// add to the delay reference array\nthis.that.myfuncs_delays[cur_key] = -1;\n}\n}; // end::this.add\n\n// setters\nthis.set = {\nthat:this, \n\ndelay:          function(ms)    {  \nvar cur_key = this.that.myfuncs_count - 1;\n// this will handle the custom delay array this.that.myfunc_delays\n// add a custom delay to your function container\n\nconsole.log(\"setting custom delay. key: \"+ cur_key + \" msecs: \" + ms);\nif(cur_key &gt; -1)\n{ \nthis.that.myfuncs_delays[cur_key] = ms; \n}\n\n// so now we create an entry on the delay variable\n},  \n\ndelay_cur:      function(ms)    { this.that.delay_cur = ms;         },\ndelay_default:  function(ms)    { this.that.delay_default = ms;         },\nloop_on:          function()        { this.that.loop = true; }, \nloop_off:         function()        { this.that.loop = false; },\nblocking_on:      function()        { this.that.blocking = true; }, \nblocking_off:     function()        { this.that.blocking = false; },\n\nfinished:           function(aBool) { this.that.finished = true; }\n}; // end::this.set    \n\n\n// setters\nthis.get = {\nthat:this, \n\ndelay_default: function() { return this.that.delay_default; },\ndelay_cur:     function() { return this.that.delay_cur; }\n}; // end::this.get     \n\n} // end:::function timed_functions()\n</code></pre>\n\n<p>and use like:\n    // // // BEGIN :: TEST // // //</p>\n\n<pre><code>// initialize\nvar fncTimer = new timed_functions;\n\n// set some defaults\nfncTimer.set.delay_default(1000);\nfncTimer.set.blocking_on();\n// fncTimer.set.loop_on();\n// fncTimer.set.loop_off();\n\n\n// BEGIN :: ADD FUNCTIONS (they will fire off in order)\nfncTimer.add.fnc(function() {\n    console.log('plan a (2 secs)');\n});\nfncTimer.set.delay(2000); // set custom delay for previously added function\n\nfncTimer.add.fnc(function() {\n    console.log('hello world (delay 3 seconds)');\n});\nfncTimer.set.delay(3000);\n\nfncTimer.add.fnc(function() {\n    console.log('wait 4 seconds...');\n});\nfncTimer.set.delay(4000);\n\nfncTimer.add.fnc(function() {\n    console.log('wait 2 seconds');\n});\nfncTimer.set.delay(2000);\n\nfncTimer.add.fnc(function() {\n    console.log('finished.');\n});\n// END :: ADD FUNCTIONS\n\n\n// NOW RUN\nfncTimer.cycle(); // begin execution \n\n\n// // // END :: TEST // // //\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use a closure call setTimeout() with incrementally larger values.</p>\n\n<pre><code>var items = ['item1', 'item2', 'item3'];\n\nfunction functionToExecute(item) {\n  console.log('function executed for item: ' + item);\n}\n\n$.each(items, function (index, item) {\n  var timeoutValue = index * 2000;\n  setTimeout(function() {\n    console.log('waited ' + timeoutValue + ' milliseconds');\n    functionToExecute(item);\n  }, timeoutValue);\n});\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>waited 0 milliseconds\nfunction executed for item: item1\nwaited 2000 milliseconds\nfunction executed for item: item2\nwaited 4000 milliseconds\nfunction executed for item: item3 \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you like an advise to not loss performance . <code>setTimeout</code> is your expected <code>sleep</code> . \nHowever , if you wanna a syntax where code  is \"divided in middle\" by <code>sleep</code>, we can do :  </p>\n\n<pre><code>sleep=function(tm,fn){\n   window.setTimeout(fn,tm);\n}\n</code></pre>\n\n<p>then , perpare functions as following : </p>\n\n<pre><code>var fnBeforeSleep=function(){\n\n //All codes before sleep\n\n}  \n\nvar fnAfterSleep=function(){\n\n //All codes after sleep\n\n}  \n</code></pre>\n\n<p>Then :</p>\n\n<pre><code>fnBeforeSleep();\nsleep(2000,\nfnAfterSleep);\n</code></pre>\n\n<h1>YEP! \u064dsyntactically,It is very close to :</h1>\n\n<pre><code>fnBeforeSleep();\nsleep(2000); \nfnAfterSleep();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Most of the answers here are misguided or at the very least outdated. There is no reason javascript has to be single threaded, and indeed it isnt't. Today all the mainstream browsers support workers, before this was the case other javascript runtimes like Rhino and Node.js supported multithreading.</p>\n\n<p>'Javascript is single threaded' is not a valid answer. For example running a sleep function within a worker would not block any of the code running in the ui thread.</p>\n\n<p>In newer runtimes supporting generators and yield, one could bring similar functionality to the sleep function in a single threaded environment:</p>\n\n<pre><code>// This is based on the latest ES6 drafts.\n// js 1.7+ (SpiderMonkey/Firefox 2+) syntax is slightly different\n\n// run code you want to sleep here (ommit star if using js 1.7)\nfunction* main(){\n    for (var i = 0; i &lt; 10; i++) {\n        // to sleep for 10 milliseconds 10 times in a row\n        yield 10;\n    }\n\n    yield 5;\n    console.log('I just slept 5 milliseconds!');\n}\n\n// resume the given generator after ms milliseconds\nfunction resume(ms, generator){\n    setTimeout(function(){\n        // ommit .value if using js 1.7\n        var nextSleep = generator.next().value;\n        resume(nextSleep, generator);\n    }, ms);\n}\n\n// initialize generator and get first sleep for recursive function\nvar\n    generator = main(),\n    firstSleep = generator.next().value;\n\n// initialize recursive resume function\nresume(firstSleep, generator);\n</code></pre>\n\n<p>This imitation of sleep is different from a true sleep function as it does not block the thread. It is simply sugar on top of javascript's current setTimeout function. This functionality type has been implemented in <a href=\"http://taskjs.org/\" rel=\"nofollow\">Task.js</a> and should work today in Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Embrace the asyncronous nature of javascript!</p>\n\n<p>All of the following will return immediately but have a single place for putting code you want to run after something has happened.  </p>\n\n<p>The methods I've outlined here are all for different use cases and are roughly ordered in terms of their complexity.</p>\n\n<p>The different things are as follows:</p>\n\n<ul>\n<li>Waiting for some condition to become true</li>\n<li>Waiting for a set of methods to finish (in any order) before calling a single callback</li>\n<li>Running a series of asyncronous methods with shared state in a particular order before calling a callback</li>\n</ul>\n\n<p><strong>Wait</strong></p>\n\n<p>Waiting to see if some condition is true is usedful where there is no accessible callback to tell you when something has finished executing.</p>\n\n<p>This is a pretty basic implementation that assumes that the condition will become true at some point.  With a few tweaks it could be expanded to be even more useful (eg by setting a call limit).  (I only wrote this one yesterday!)</p>\n\n<pre><code>function waitFor(predicate, successCallback) {\n    setTimeout(function () {\n        var result = predicate();\n        if (result !== undefined)\n            successCallback(result);\n        else\n            waitFor(predicate, successCallback);\n    }, 100);\n}\n</code></pre>\n\n<p>calling code:</p>\n\n<pre><code>    beforeEach(function (done) {\n        selectListField('A field');\n\n        waitFor(function () {\n            var availableOptions = stores.scrapeStore(optionStore);\n            if (availableOptions.length !== 0)\n                return availableOptions;\n        }, done);\n    });\n</code></pre>\n\n<p>Here I'm calling something which loads an extjs 'store' and waiting til the store contains something before continuing (the beforeEach is a jasmine test framework thing).</p>\n\n<p><strong>Wait for several things to complete</strong></p>\n\n<p>Another thing I needed to do was run a single callback after a load of different methods finished.  You can do that like this:</p>\n\n<pre><code>createWaitRunner = function (completionCallback) {\n    var callback = completionCallback;\n    var completionRecord = [];\n    var elements = 0;\n\n    function maybeFinish() {\n        var done = completionRecord.every(function (element) {\n            return element === true\n        });\n\n        if (done)\n            callback();\n    }\n\n    return {\n        getNotifier: function (func) {\n            func = func || function (){};\n\n            var index = elements++;\n            completionRecord[index] = false;\n\n            return function () {\n                func.applyTo(arguments);\n                completionRecord[index] = true;\n                maybeFinish();\n            }\n        }\n    }\n};\n</code></pre>\n\n<p>calling code:</p>\n\n<pre><code>    var waiter = createWaitRunner(done);\n\n    filterList.bindStore = waiter.getNotifier();\n    includeGrid.reconfigure = waiter.getNotifier(function (store) {\n        includeStore = store;\n    });\n    excludeGrid.reconfigure = waiter.getNotifier(function (store) {\n        excludeStore = store;\n    });\n</code></pre>\n\n<p>You either just wait for the notifications or can also wrap other functions which use the values passed to the function.  When all the methods are called then <code>done</code> will be run.</p>\n\n<p><strong>Running asynchronous methods in order</strong></p>\n\n<p>I've used a different approach when I had a series of asynchronous methods to call in a row (again in tests).  This is somewhat similar to something you can get in <a href=\"https://github.com/caolan/async\" rel=\"nofollow\">the Async library</a> - series does about the same thing and I had a little read of that library first to see if it did what I wanted.  I think mine has a nicer api for working with tests though (+ it was fun to implement!).</p>\n\n<pre><code>//provides a context for running asyncronous methods syncronously\n//the context just provides a way of sharing bits of state\n//use run to execute the methods.  These should be methods that take a callback and optionally the context as arguments\n//note the callback is provided first so you have the option of just partially applying your function to the arguments you want\n//instead of having to wrap even simple functions in another function\n\n//when adding steps you can supply either just a function or a variable name and a function\n//if you supply a variable name then the output of the function (which should be passed into the callback) will be written to the context\ncreateSynchronisedRunner = function (doneFunction) {\n    var context = {};\n\n    var currentPosition = 0;\n    var steps = [];\n\n    //this is the loop. it is triggered again when each method finishes\n    var runNext = function () {\n        var step = steps[currentPosition];\n        step.func.call(null,\n                       function (output) {\n                           step.outputHandler(output);\n                           currentPosition++;\n\n                           if (currentPosition === steps.length)\n                               return;\n\n                           runNext();\n                       }, context);\n    };\n\n    var api = {};\n\n    api.addStep = function (firstArg, secondArg) {\n        var assignOutput;\n        var func;\n\n        //overloads\n        if (secondArg === undefined) {\n            assignOutput = function () {\n            };\n            func = firstArg;\n        }\n        else {\n            var propertyName = firstArg;\n            assignOutput = function (output) {\n                context[propertyName] = output;\n            };\n            func = secondArg;\n        }\n\n        steps.push({\n                       func: func,\n                       outputHandler: assignOutput\n                   });\n    };\n\n    api.run = function (completedAllCallback) {\n        completedAllCallback = completedAllCallback || function(){};\n\n        var lastStep = steps[steps.length - 1];\n        var currentHandler = lastStep.outputHandler;\n        lastStep.outputHandler = function (output) {\n            currentHandler(output);\n            completedAllCallback(context);\n            doneFunction();\n        };\n\n        runNext();\n    };\n\n    //this is to support more flexible use where you use a done function in a different scope to initialisation\n    //eg the done of a test but create in a beforeEach\n    api.setDoneCallback = function (done) {\n        doneFunction = done;\n    };\n\n    return api;\n};\n</code></pre>\n\n<p>calling code:</p>\n\n<pre><code>beforeAll(function (done) {\n    var runner = createSynchronisedRunner(done);\n    runner.addStep('attachmentInformation', testEventService.getAttachmentCalled.partiallyApplyTo('cat eating lots of memory.jpg'));\n    runner.addStep('attachment', getAttachment.partiallyApplyTo(\"cat eating lots of memory.jpg\"));\n    runner.addStep('noAttachment', getAttachment.partiallyApplyTo(\"somethingElse.jpg\"));\n    runner.run(function (context) {\n        attachment = context.attachment;\n        noAttachment = context.noAttachment;\n    });\n});\n</code></pre>\n\n<p>PartiallyApplyTo here is basically a renamed version of Doug Crockford's implementation of Curry.  A lot of the stuff I'm working with takes a callback as the final argument so simple calls can be done like this rather than having to wrap everything with an extra func.</p>\n\n<p>Hopefully some of the ideas in there might be useful to people.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here's a simple solution using a synchronous XMLHttpRequest:</p>\n\n<pre><code>function sleep(n){\n  var request = new XMLHttpRequest();\n  request.open('GET', '/sleep.php?n=' + n, false);  // `false` makes the request synchronous\n  request.send(null);\n}\n</code></pre>\n\n<p>contents of sleep.php:</p>\n\n<pre><code>sleep($_GET['n']);\n</code></pre>\n\n<p>Now call it with:\nsleep(5);</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I recently had a case in that the code following a callback was being executed before the callback of the <code>$.ui.popup</code> had executed.  My solution was to set a var before hand called pause, set it to true, execute the <code>$.ui.popup</code> code, then have the code i needed to wait on in a interval. example:</p>\n\n<pre><code>var pause = false;\nfunction something() {\n    if(edited &amp;&amp; renamed) {\n        pause = true;\n        $.ui.popup({\n            //...\n            doneCallback: function() {\n                //...\n                pause = false;\n            }\n            //...\n        });\n        //...\n    }\n\n    var waitCode = setInterval(function(){\n        if(!pause) {\n            //... code I needed to wait on ...\n            clearInterval(waitCode);\n        }\n    },500);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A lot of the answers don't (directly) answer the question, and neither does this one...</p>\n\n<p>Here's my two cents (or functions) (and maybe another cent afterwards)</p>\n\n<p>If you want slightly less clunky functions than <code>setTimeout</code> and <code>setInterval</code>, you can wrap them in functions that just reverse the order of the arguments:</p>\n\n<pre><code>function after(ms, fn){ setTimeout(fn, ms); }\nfunction every(ms, fn){ setInterval(fn, ms); }\n</code></pre>\n\n<p>CoffeeScript versions:</p>\n\n<pre><code>after = (ms, fn)-&gt; setTimeout fn, ms\nevery = (ms, fn)-&gt; setInterval fn, ms\n</code></pre>\n\n<p>You can then use them less awkwardly with anonymous functions:</p>\n\n<pre><code>after(1000, function(){\n    console.log(\"it's been a second\");\n    after(1000, function(){\n        console.log(\"it's been another second\");\n    });\n});\n</code></pre>\n\n<p>Now it reads easily as \"after 1000 milliseconds, ...\"</p>\n\n<p>But of course, you may easily run into <a href=\"http://callbackhell.com/\" rel=\"nofollow\">callback hell</a> so you may want to consider a higher level language (that compiles to javascript) that let's you flatten your callbacks out, like <a href=\"https://github.com/jiangmiao/toffee-script\" rel=\"nofollow\">ToffeeScript</a> (which I haven't yet tried)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In case you really need a sleep() just to test something. But be aware that it'll crash the browser most of the times while debuggin - probably that's why you need it anyway. In production mode I'll comment out this function.</p>\n\n<pre><code>function pauseBrowser(millis) {\n    var date = Date.now();\n    var curDate = null;\n    do {\n        curDate = Date.now();\n    } while (curDate-date &lt; millis);\n}\n</code></pre>\n\n<p>Don't use new Date() in the loop, unless you want to waste memory, processing power, battery and possibly the lifetime of your device.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know the question is about sleep, and clearly the answer is that it isn't possible. I think a common want for sleep is to handle asynchronous tasks in order, I know I have had to deal with it for sure.</p>\n\n<p>Many cases may be able to use promises (AJAX requests common use). They let you do asynchronous things in a synchronous manner.  There is also handling for success/failure, and they can be chained. </p>\n\n<p>They part of ECMAScript 6, so browser support isn't all there yet, mainly, IE does not support them.  There is also library called Q for doing promises.</p>\n\n<p>References:\n<a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/es6/promises/</a></p>\n\n<p><a href=\"https://github.com/jakearchibald/es6-promise#readme\" rel=\"nofollow\">https://github.com/jakearchibald/es6-promise#readme</a> (Shim for older, or IE browsers)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're on node.js, you can have a look at <a href=\"https://www.npmjs.com/package/fibers\" rel=\"nofollow\">fibers</a> \u2013 a native C extension to node, a kinda-multi-threading simulation.</p>\n\n<p>It allows you to do a real <code>sleep</code> in a way which is blocking execution in a fiber, but it's non-blocking in the main thread and other fibers.</p>\n\n<p>Here's an example fresh from their own readme:</p>\n\n<pre><code>// sleep.js\n\nvar Fiber = require('fibers');\n\nfunction sleep(ms) {\n    var fiber = Fiber.current;\n    setTimeout(function() {\n        fiber.run();\n    }, ms);\n    Fiber.yield();\n}\n\nFiber(function() {\n    console.log('wait... ' + new Date);\n    sleep(1000);\n    console.log('ok... ' + new Date);\n}).run();\nconsole.log('back in main');\n</code></pre>\n\n<p>\u2013 and the results are:</p>\n\n<pre><code>$ node sleep.js\nwait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)\nback in main\nok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a better way to engineer a <code>sleep</code> in JavaScript than the following <code>pausecomp</code>  function (<a href=\"http://www.sean.co.uk/a/webdesign/javascriptdelay.shtm\">taken from here</a>)?</p>\n\n<pre><code>function pausecomp(millis)\n {\n  var date = new Date();\n  var curDate = null;\n  do { curDate = new Date(); }\n  while(curDate-date &lt; millis);\n}\n</code></pre>\n\n<p>This is not a duplicate of <a href=\"http://stackoverflow.com/questions/758688/sleep-in-javascript\">Sleep in Javascript</a>; I want a real sleep in the middle of a function, and not a delay before a piece of code executes.</p>\n",
            "last_activity_date": 1425582851,
            "question_id": 951021,
            "score": 535,
            "tags": [
                "javascript",
                "sleep"
            ],
            "title": "What do I do if I want a JavaScript version of sleep()?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Please take a look at <em><a href=\"http://www.w3schools.com/Dom/dom_parser.asp\" rel=\"nofollow\">XML DOM Parser</a></em> (<a href=\"http://en.wikipedia.org/wiki/W3Schools\" rel=\"nofollow\">W3Schools</a>). It's a tutorial on XML DOM parsing. The actual DOM parser differs from browser to browser but the DOM API is standardised and remains the same (more or less).</p>\n\n<p>Alternatively use <a href=\"http://www.w3schools.com/e4x/e4x_why.asp\" rel=\"nofollow\">E4X</a> if you can <a href=\"http://www.w3schools.com/e4x/e4x_browsers.asp\" rel=\"nofollow\">restrict</a> yourself to Firefox. It's relatively easier to use and it's part of JavaScript since version 1.6. Here is a small sample usage...</p>\n\n<pre><code>//Using E4X\nvar xmlDoc=new XML();\nxmlDoc.load(\"note.xml\");\ndocument.write(xmlDoc.body); //Note: 'body' is actually a tag in note.xml,\n//but it can be accessed as if it were a regular property of xmlDoc.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Update: For a more correct answer see <a href=\"http://stackoverflow.com/a/8412989/2172\">Tim Down's answer</a>.</p>\n\n<p>Internet Explorer and, for example, Mozilla-based browsers expose different objects for XML parsing, so it's wise to use a JavaScript framework like <a href=\"http://jquery.com/\">jQuery</a> to handle the cross-browsers differences.</p>\n\n<p>A really basic example is:</p>\n\n<pre><code>var xml = \"&lt;music&gt;&lt;album&gt;Beethoven&lt;/album&gt;&lt;/music&gt;\";\n\nvar result = $(xml).find(\"album\").text();\n</code></pre>\n\n<p>For more in-depth information, read the tutorial <em><a href=\"http://www.compoc.com/tuts/\">Easy XML Consumption using jQuery</a></em>.</p>\n\n<p>Note: As pointed out in comments; jQuery does not really do any XML parsing whatsoever, it relies on the DOM innerHTML method and will parse it like it would any HTML so be careful when using HTML element names in your XML. But I think it works fairly good for simple XML 'parsing', but it's probably not suggested for intensive or 'dynamic' XML parsing where you do not upfront what XML will come down and this tests if everything parses as expected.</p>\n",
                    "is_accepted": true,
                    "score": 67
                },
                {
                    "body": "<p>Assuming you want to build a DOM from this XML, sadly you need to use browser-specific interfaces. <a href=\"http://www.van-steenbeek.net/?q=explorer%5Fdomparser%5Fparsefromstring\" rel=\"nofollow\">Here</a> is an attempt at a cross-browser function for doing it, however. </p>\n\n<p>W3Schools <a href=\"http://www.w3schools.com/Xml/xml%5Fparser.asp\" rel=\"nofollow\">also document</a> the individual browser-specific methods.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Most examples on the web (and some presented above) show how to load an XML <strong>from a file</strong> in a browser compatible manner. This proves easy, except in the case of Google Chrome which does not support the <code>document.implementation.createDocument()</code> method. When using Chrome, in order to load an XML file into a XmlDocument object, you need to use the inbuilt XmlHttp object and then load the file by passing it's URI.</p>\n\n<p>In your case, the scenario is different, because you want to load the XML <strong>from a string variable</strong>, not a URL. For this requirement however, Chrome supposedly works just like Mozilla (or so I've heard) and supports the parseFromString() method.</p>\n\n<p>Here is a function I use (it's part of the Browser compatibility library I'm currently building):</p>\n\n<pre><code>function LoadXMLString(xmlString)\n{\n  // ObjectExists checks if the passed parameter is not null.\n  // isString (as the name suggests) checks if the type is a valid string.\n  if (ObjectExists(xmlString) &amp;&amp; isString(xmlString))\n  {\n    var xDoc;\n    // The GetBrowserType function returns a 2-letter code representing\n    // ...the type of browser.\n    var bType = GetBrowserType();\n\n    switch(bType)\n    {\n      case \"ie\":\n        // This actually calls into a function that returns a DOMDocument \n        // on the basis of the MSXML version installed.\n        // Simplified here for illustration.\n        xDoc = new ActiveXObject(\"MSXML2.DOMDocument\")\n        xDoc.async = false;\n        xDoc.loadXML(xmlString);\n        break;\n      default:\n        var dp = new DOMParser();\n        xDoc = dp.parseFromString(xmlString, \"text/xml\");\n        break;\n    }\n    return xDoc;\n  }\n  else\n    return null;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>I've always used the approach below which works in IE and Firefox.</p>\n\n<p>Example XML:</p>\n\n<pre><code>&lt;fruits&gt;\n  &lt;fruit name=\"Apple\" colour=\"Green\" /&gt;\n  &lt;fruit name=\"Banana\" colour=\"Yellow\" /&gt;\n&lt;/fruits&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>function getFruits(xml) {\n  var fruits = xml.getElementsByTagName(\"fruits\")[0];\n  if (fruits) {\n    var fruitsNodes = fruits.childNodes;\n    if (fruitsNodes) {\n      for (var i = 0; i &lt; fruitsNodes.length; i++) {\n        var name = fruitsNodes[i].getAttribute(\"name\");\n        var colour = fruitsNodes[i].getAttribute(\"colour\");\n        alert(\"Fruit \" + name + \" is coloured \" + colour);\n      }\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I created a jQuery plugin that parses XML pretty easily. It works in all Yahoo A grade browsers and comes with filtering, limit and callback options.</p>\n\n<p>It might be a solution to consider: <a href=\"http://jparse.kylerush.net/\" rel=\"nofollow\">http://jparse.kylerush.net/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Apparently jQuery now provides jQuery.parseXML <a href=\"http://api.jquery.com/jQuery.parseXML/\">http://api.jquery.com/jQuery.parseXML/</a>\nas of version 1.5</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The following will parse an XML string into an XML document in all major browsers, including Internet&nbsp;Explorer&nbsp;6. Once you have that, you can use the usual DOM traversal methods/properties such as <code>childNodes</code> and <code>getElementsByTagName()</code> to get the nodes you want.</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>var parseXml;\n\nif (typeof window.DOMParser != \"undefined\") {\n    parseXml = function(xmlStr) {\n        return ( new window.DOMParser() ).parseFromString(xmlStr, \"text/xml\");\n    };\n} else if (typeof window.ActiveXObject != \"undefined\" &amp;&amp;\n       new window.ActiveXObject(\"Microsoft.XMLDOM\")) {\n    parseXml = function(xmlStr) {\n        var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = \"false\";\n        xmlDoc.loadXML(xmlStr);\n        return xmlDoc;\n    };\n} else {\n    throw new Error(\"No XML parser found\");\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var xml = parseXml(\"&lt;foo&gt;Stuff&lt;/foo&gt;\");\nalert(xml.documentElement.nodeName);\n</code></pre>\n\n<p>If you're using jQuery, from version 1.5 you can use its built-in <a href=\"http://api.jquery.com/jQuery.parseXML/\"><code>parseXML()</code></a> method.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var xml = $.parseXML(\"&lt;foo&gt;Stuff&lt;/foo&gt;\");\nalert(xml.documentElement.nodeName);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 227
                },
                {
                    "body": "<p><a href=\"http://code.google.com/p/marknote/\">Marknote</a> is a nice lightweight cross-browser JavaScript XML parser. It's object-oriented and it's got plenty of examples, plus the <a href=\"http://jbulb.org/marknote/doc/\">API</a> is documented. It's fairly new, but it has worked nicely in one of my projects so far. One thing I like about it is that it will read XML directly from strings or URLs and you can also use it to convert the XML into JSON.</p>\n\n<p>Here's an example of what you can do with Marknote:</p>\n\n<pre><code>var str = '&lt;books&gt;' +\n          '  &lt;book title=\"A Tale of Two Cities\"/&gt;' +\n          '  &lt;book title=\"1984\"/&gt;' +\n          '&lt;/books&gt;';\n\nvar parser = new marknote.Parser();\nvar doc = parser.parse(str);\n\nvar bookEls = doc.getRootElement().getChildElements();\n\nfor (var i=0; i&lt;bookEls.length; i++) {\n    var bookEl = bookEls[i];\n    // alerts \"Element name is 'book' and book title is '...'\"\n    alert(\"Element name is '\" + bookEl.getName() + \n        \"' and book title is '\" + \n        bookEl.getAttributeValue(\"title\") + \"'\"\n    );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                }
            ],
            "body": "<p>I have a <strong>variable string</strong> that contains well-formed and valid XML. I need to use JavaScript code to parse this feed.</p>\n\n<p>How can I accomplish this using (browser-compatible) JavaScript code?</p>\n",
            "last_activity_date": 1339929247,
            "question_id": 649614,
            "score": 135,
            "tags": [
                "javascript",
                "xml",
                "parsing"
            ],
            "title": "XML parsing of a variable string in JavaScript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The elements of an object that for/in enumerates are the properties that don't have the DontEnum flag set. The ECMAScript, aka Javascript, standard explicitly says that \"An Object is an unordered collection of properties\" (see <a href=\"http://www.mozilla.org/js/language/E262-3.pdf\">http://www.mozilla.org/js/language/E262-3.pdf</a> section 8.6).</p>\n\n<p>It's not going to be standards conformant (i.e. safe) to assume all Javascript implementations will enumerate in declaration order.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>From the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">ECMAScript Language Specification</a>, section 12.6.4 (on the <code>for .. in</code> loop):</p>\n\n<blockquote>\n  <p>The mechanics of enumerating the properties is implementation dependent. The order of enumeration is defined by the object.</p>\n</blockquote>\n\n<p>And section 4.3.3 (definition of \"Object\"):</p>\n\n<blockquote>\n  <p>It is an unordered collection of properties each of which contains a primitive value, object, or function. A function stored in a property of an object is called a method.</p>\n</blockquote>\n\n<p>I guess that means you cant rely on the properties being enumerated in a consistent order across JavaScript implementations. (It would be bad style anyway to rely on implementation-specific details of a language.)</p>\n\n<p>If you want your order defined, you will need to implement something that defines it, like an array of keys that you sort before accessing the object with it.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p><a href=\"http://ejohn.org/blog/javascript-in-chrome/\">Quoting John Resig</a>:</p>\n\n<blockquote>\n  <p>Currently all major browsers loop over the properties of an object in the order in \n  which they were defined. Chrome does this as well, except for a couple cases. [...]\n  This behavior is explicitly left undefined by the ECMAScript specification. \n  In ECMA-262, section 12.6.4:</p>\n  \n  <blockquote>\n    <p>The mechanics of enumerating the properties ... is implementation dependent.</p>\n  </blockquote>\n  \n  <p>However, specification is quite different from implementation. All modern implementations \n  of ECMAScript iterate through object properties in the order in which they were defined. \n  Because of this the Chrome team has deemed this to be a bug and will be fixing it.</p>\n</blockquote>\n\n<p>All browsers respect definition order <a href=\"https://code.google.com/p/v8/issues/detail?id=164\">with the exception of Chrome</a> and Opera which do for every non-numerical property name. In these two browsers the properties are pulled in-order ahead of the first non-numerical property (this is has to do with how they implement arrays). The order is the same for <code>Object.keys</code> as well.</p>\n\n<p>This example should make it clear what happens: </p>\n\n<pre><code>var obj = {\n  \"first\":\"first\",\n  \"2\":\"2\",\n  \"34\":\"34\",\n  \"1\":\"1\",\n  \"second\":\"second\"\n};\nfor (var i in obj) { console.log(i); };\n// Order listed:\n// \"1\"\n// \"2\"\n// \"34\"\n// \"first\"\n// \"second\"\n</code></pre>\n\n<p>The technicalities of this are less important than the fact that this may change at any time. Do not rely on things staying this way.</p>\n\n<p>In short: <strong>Use an array if order is important to you.</strong></p>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>in IE6, the order is not guaranteed. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The order cannot be trusted. Both Opera and Chrome return the list of properties unordered.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar username = {\"14719\":\"A\",\"648\":\"B\",\"15185\":\"C\"};\n\nfor (var i in username) {\n  window.alert(i + ' =&gt; ' + username[i]);\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>The code above shows B, A, C in Opera and C, A, B in Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Iteration order is also confused with respect to deleting of properties, but in this case with IE only.</p>\n\n<pre><code>var obj = {};\nobj.a = 'a';\nobj.b = 'b';\nobj.c = 'c';\n\n// IE allows the value to be deleted...\ndelete obj.b;\n\n// ...but remembers the old position if it is added back later\nobj.b = 'bb';\nfor (var p in obj) {\n    alert(obj[p]); // in IE, will be a, bb, then c;\n                   // not a, c, then bb as for FF/Chrome/Opera/Safari\n}\n</code></pre>\n\n<p>The desire for changing the spec to fix the iteration order seems to be quite a popular desire among developers if the discussion at <a href=\"http://code.google.com/p/v8/issues/detail?id=164\" rel=\"nofollow\">http://code.google.com/p/v8/issues/detail?id=164</a> is any indication.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><em>Bumping this a year later...</em></p>\n\n<p>It is <strong>2012</strong> and the major browsers <strong>still</strong> differ:</p>\n\n<pre><code>function lineate(obj){\n    var arr = [], i;\n    for (i in obj) arr.push([i,obj[i]].join(':'));\n    console.log(arr);\n}\nvar obj = { a:1, b:2, c:3, \"123\":'xyz' };\n/* log1 */  lineate(obj);\nobj.a = 4;\n/* log2 */  lineate(obj);\ndelete obj.a;\nobj.a = 4;\n/* log3 */  lineate(obj);\n</code></pre>\n\n<p><a href=\"https://gist.github.com/1551668\">gist</a></p>\n\n<p>Safari 5, Firefox 14</p>\n\n<pre><code>[\"a:1\", \"b:2\", \"c:3\", \"123:xyz\"]\n[\"a:4\", \"b:2\", \"c:3\", \"123:xyz\"]\n[\"b:2\", \"c:3\", \"123:xyz\", \"a:4\"]\n</code></pre>\n\n<p>Chrome 21, Opera 12, Node 0.6, Firefox 27</p>\n\n<pre><code>[\"123:xyz\", \"a:1\", \"b:2\", \"c:3\"]\n[\"123:xyz\", \"a:4\", \"b:2\", \"c:3\"]\n[\"123:xyz\", \"b:2\", \"c:3\", \"a:4\"]\n</code></pre>\n\n<p>IE9</p>\n\n<pre><code>[123:xyz,a:1,b:2,c:3] \n[123:xyz,a:4,b:2,c:3] \n[123:xyz,a:4,b:2,c:3] \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                }
            ],
            "body": "<p>Does the \"for\u2026in\" loop in Javascript loop through the hashtables/elements in the order they are declared? Is there a browser which doesn't do it in order?<br>\nThe object I wish to use will be declared <em>once</em> and will never be modified.</p>\n\n<p>Suppose I have:</p>\n\n<pre><code>var myObject = { A: \"Hello\", B: \"World\" };\n</code></pre>\n\n<p>And I further use them in:</p>\n\n<pre><code>for (var item in myObject) alert(item + \" : \" + myObject[item]);\n</code></pre>\n\n<p>Can I expect 'A : \"Hello\"' to always come before 'B : \"World\"' in most decent browsers?</p>\n",
            "last_activity_date": 1410860043,
            "question_id": 280713,
            "score": 119,
            "tags": [
                "javascript",
                "for-loop"
            ],
            "title": "Elements order in a &quot;for (\u2026 in \u2026)&quot; loop"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Create a DIV styled with the following styles. In your JavaScript, set the font size and attributes that you are trying to measure, put your string in the DIV, then read the current width and height of the DIV. It will stretch to fit the contents and the size will be within a few pixels of the string rendered size.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div id=\"Test\"&gt;\n    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>#Test\n{\n    position: absolute;\n    visibility: hidden;\n    height: auto;\n    width: auto;\n    white-space: nowrap; /* Thanks to Herb Caudill comment */\n}\n</code></pre>\n\n<p>JavaScript (fragment):</p>\n\n<pre><code>var test = document.getElementById(\"Test\");\ntest.style.fontSize = fontSize;\nvar height = (test.clientHeight + 1) + \"px\";\nvar width = (test.clientWidth + 1) + \"px\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 199
                },
                {
                    "body": "<p>Text</p>\n\n<pre><code>&lt;script&gt;\nvar textWidth = document.getElementById(\"text\").offsetWidth;\n&lt;/script&gt;\n</code></pre>\n\n<p>This should work as long as the &lt;span&gt; tag has no other styles applied to it.\noffsetWidth will include the width of any borders, horizontal padding, vertical scrollbar width, etc. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The <a href=\"http://extjs.com\">ExtJS javascript library</a> has a great class called Ext.util.TextMetrics that \"provides precise pixel measurements for blocks of text so that you can determine exactly how high and wide, in pixels, a given block of text will be\".  You can either use it directly or view its source to code to see how this is done.</p>\n\n<p><a href=\"http://extjs.com/deploy/dev/docs/?class=Ext.util.TextMetrics\">http://extjs.com/deploy/dev/docs/?class=Ext.util.TextMetrics</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>jQuery:</p>\n\n<pre><code>(function($) {\n\n $.textMetrics = function(el) {\n\n  var h = 0, w = 0;\n\n  var div = document.createElement('div');\n  document.body.appendChild(div);\n  $(div).css({\n   position: 'absolute',\n   left: -1000,\n   top: -1000,\n   display: 'none'\n  });\n\n  $(div).html($(el).html());\n  var styles = ['font-size','font-style', 'font-weight', 'font-family','line-height', 'text-transform', 'letter-spacing'];\n  $(styles).each(function() {\n   var s = this.toString();\n   $(div).css(s, $(el).css(s));\n  });\n\n  h = $(div).outerHeight();\n  w = $(div).outerWidth();\n\n  $(div).remove();\n\n  var ret = {\n   height: h,\n   width: w\n  };\n\n  return ret;\n }\n\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>The code-snips below, \"calculate\" the width of the span-tag, appends \"...\" to it if its too long and reduces the text-length, until it fits in its parent (or until it has tried more than a thousand times)</p>\n\n<p>CSS</p>\n\n<pre><code>div.places {\n  width : 100px;\n}\ndiv.places span {\n  white-space:nowrap;\n  overflow:hidden;\n}\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;div class=\"places\"&gt;\n  &lt;span&gt;This is my house&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class=\"places\"&gt;\n  &lt;span&gt;And my house are your house&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class=\"places\"&gt;\n  &lt;span&gt;This placename is most certainly too wide to fit&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>JavaScript (with jQuery)</p>\n\n<pre><code>// loops elements classed \"places\" and checks if their child \"span\" is too long to fit\n$(\".places\").each(function (index, item) {\n    var obj = $(item).find(\"span\");\n    if (obj.length) {\n        var placename = $(obj).text();\n        if ($(obj).width() &gt; $(item).width() &amp;&amp; placename.trim().length &gt; 0) {\n            var limit = 0;\n            do {\n                limit++;\n                                    placename = placename.substring(0, placename.length - 1);\n                                    $(obj).text(placename + \"...\");\n            } while ($(obj).width() &gt; $(item).width() &amp;&amp; limit &lt; 1000)\n        }\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This works for me...</p>\n\n<pre><code>// Handy JavaScript to meature the size taken to render the supplied text;\n// you can supply additional style information too if you have it to hand.\n\nfunction measureText(pText, pFontSize, pStyle) {\n    var lDiv = document.createElement('lDiv');\n\n    document.body.appendChild(lDiv);\n\n    if (pStyle != null) {\n        lDiv.style = pStyle;\n    }\n    lDiv.style.fontSize = \"\" + pFontSize + \"px\";\n    lDiv.style.position = \"absolute\";\n    lDiv.style.left = -1000;\n    lDiv.style.top = -1000;\n\n    lDiv.innerHTML = pText;\n\n    var lResult = {\n        width: lDiv.clientWidth,\n        height: lDiv.clientHeight\n    };\n\n    document.body.removeChild(lDiv);\n    lDiv = null;\n\n    return lResult;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's one I whipped together without example. It looks like we are all on the same page.</p>\n\n<pre><code>String.prototype.width = function(font) {\n  var f = font || '12px arial',\n      o = $('&lt;div&gt;' + this + '&lt;/div&gt;')\n            .css({'position': 'absolute', 'float': 'left', 'white-space': 'nowrap', 'visibility': 'hidden', 'font': f})\n            .appendTo($('body')),\n      w = o.width();\n\n  o.remove();\n\n  return w;\n}\n</code></pre>\n\n<p>Using it is simple: <code>\"a string\".width()</code></p>\n\n<p>**Added <code>white-space: nowrap</code> so strings with width larger than the window width can be calculated.</p>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>You can use the canvas so you don't have to deal so much with css properties:</p>\n\n<pre><code>var canvas = document.createElement(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nctx.font = \"20pt Arial\";  // This can be set programmaticly from the element's font-style if desired\nvar textWidth = ctx.measureText($(\"#myElement\").text()).width;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Try this code:</p>\n\n<pre><code>function GetTextRectToPixels(obj)\n{\nvar tmpRect = obj.getBoundingClientRect();\nobj.style.width = \"auto\"; \nobj.style.height = \"auto\"; \nvar Ret = obj.getBoundingClientRect(); \nobj.style.width = (tmpRect.right - tmpRect.left).toString() + \"px\";\nobj.style.height = (tmpRect.bottom - tmpRect.top).toString() + \"px\"; \nreturn Ret;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The width and heigth of a text can be obtained with <code>clientWidth</code> and <code>clientHeight</code></p>\n\n<pre><code>var element = document.getElementById (\"mytext\");\n\nvar width = element.clientWidth;\nvar height = element.clientHeight;\n</code></pre>\n\n<p>make sure that style position property is set to absolute</p>\n\n<pre><code>element.style.position = \"absolute\";\n</code></pre>\n\n<p>not required to be inside a <code>div</code>, can be inside a <code>p</code> or a <code>span</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The better of is to detect whether text will fits right before you display the element. So you can use this function which doesn't requires the element to be on screen.</p>\n\n<pre><code>function textWidth(text, fontProp) {\n    var tag = document.createElement(\"div\");\n    tag.style.position = \"absolute\";\n    tag.style.left = \"-999em\";\n    tag.style.whiteSpace = \"nowrap\";\n    tag.style.font = fontProp;\n    tag.innerHTML = text;\n\n    document.body.appendChild(tag);\n\n    var result = tag.clientWidth;\n\n    document.body.removeChild(tag);\n\n    return result;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>if ( textWidth(\"Text\", \"bold 13px Verdana\") &gt; elementWidth) {\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var textWidth = (function (el) {\n    el.style.position = 'absolute';\n    el.style.top = '-1000px';\n    document.body.appendChild(el);\n\n    return function (text) {\n        el.innerHTML = text;\n        return el.clientWidth;\n    };\n})(document.createElement('div'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>In <strong>HTML 5</strong>, you can just use the <a href=\"http://www.w3schools.com/tags/canvas_measuretext.asp\" rel=\"nofollow\">Canvas.measureText method</a> (further explanation <a href=\"http://www.html5canvastutorials.com/tutorials/html5-canvas-text-metrics/\" rel=\"nofollow\">here</a>).</p>\n\n<p><a href=\"http://jsfiddle.net/eNzjZ/34/\" rel=\"nofollow\">Try this fiddle</a>:</p>\n\n<pre><code>/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n * \n * @param {String} text The text to be rendered.\n * @param {String} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n * \n * @see http://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nfunction getTextWidth(text, font) {\n    // re-use canvas object for better performance\n    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\n    var context = canvas.getContext(\"2d\");\n    context.font = font;\n    var metrics = context.measureText(text);\n    return metrics.width;\n};\n\nconsole.log(getTextWidth(\"hello there!\", \"bold 12pt arial\"));  // close to 86\n</code></pre>\n\n<p>There are several advantages to this approach, including:</p>\n\n<ul>\n<li>More concise and safer than the other (DOM-based) methods because it does not change global state, such as your DOM.</li>\n<li>Further customization is possible by <a href=\"http://diveintohtml5.info/canvas.html#text\" rel=\"nofollow\">modifying more canvas text properties</a>, such as <code>textAlign</code> and <code>textBaseline</code>.</li>\n</ul>\n\n<p>NOTE: When you add the text to your DOM, remember to also take account of <a href=\"http://api.jquery.com/outerwidth/\" rel=\"nofollow\">padding, margin and border</a>.</p>\n\n<p>NOTE 2: On some browsers, this method yields sub-pixel accuracy (result is a floating point number), on others it does not (result is only an int). You might want to run <code>Math.floor</code> on (and possibly add 1 to) the result, to avoid inconsistencies. Since the DOM-based method is never sub-pixel accurate, this method has even higher precision than the other methods here.</p>\n\n<p>NOTE 3: This snippet gets you the <strong>text width</strong> (in pixels). As explained <a href=\"http://www.html5canvastutorials.com/tutorials/html5-canvas-text-metrics/\" rel=\"nofollow\">here</a>, the font size is actually equal to the <strong>font height</strong>; so that's how you can get that.</p>\n\n<p>According to <a href=\"http://jsperf.com/measure-text-width/4\" rel=\"nofollow\">this jsperf</a> (thanks to the contributors in comments), the <em>Canvas method</em> and the <em>DOM-based method</em> are about equally fast, if caching is added to the <em>DOM-based method</em> and you are not using Firefox. In Firefox, for some reason, this <em>Canvas method</em> is much much faster than the <em>DOM-based method</em> (as of September 2014).</p>\n\n<p>Finally, <a href=\"http://jsfiddle.net/eNzjZ/54/\" rel=\"nofollow\">this fiddle</a> compares the Canvas method to a variation of <a href=\"http://stackoverflow.com/a/5047712/2228771\">Bob Monteverde's DOM-based method</a>, so you can analyze and compare accuracy of the results.</p>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>I wrote a little tool for that. Perhaps it's useful to somebody. It works <strong>without jQuery</strong>.</p>\n\n<p><strong><a href=\"https://github.com/schickling/calculate-size\" rel=\"nofollow\">https://github.com/schickling/calculate-size</a></strong></p>\n\n<p>Usage:</p>\n\n<pre><code>var size = calculateSize(\"Hello world!\", {\n   font: 'Arial',\n   fontSize: '12px'\n});\n\nconsole.log(size.width); // 65\nconsole.log(size.height); // 14\n</code></pre>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/PEvL8/\" rel=\"nofollow\">http://jsfiddle.net/PEvL8/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I guess this is prety similar to Depak entry, but is based on the work of Louis Lazaris published at an article in <a href=\"http://www.impressivewebs.com/textarea-auto-resize/\" rel=\"nofollow\">impressivewebs page</a></p>\n\n<pre><code>(function($){\n\n        $.fn.autofit = function() {             \n\n            var hiddenDiv = $(document.createElement('div')),\n            content = null;\n\n            hiddenDiv.css('display','none');\n\n            $('body').append(hiddenDiv);\n\n            $(this).bind('fit keyup keydown blur update focus',function () {\n                content = $(this).val();\n\n                content = content.replace(/\\n/g, '&lt;br&gt;');\n                hiddenDiv.html(content);\n\n                $(this).css('width', hiddenDiv.width());\n\n            });\n\n            return this;\n\n        };\n    })(jQuery);\n</code></pre>\n\n<p>The fit event is used to execute the function call inmediatly after the function is asociated to the control.</p>\n\n<p>e.g.: $('input').autofit().trigger(\"fit\");</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Without jquery : </p>\n\n<pre><code>String.prototype.width = function (fontSize) {\n    var el,\n        f = fontSize + \" px arial\" || '12px arial';\n    el = document.createElement('div');\n    el.style.position = 'absolute';\n    el.style.float = \"left\";\n    el.style.whiteSpace = 'nowrap';\n    el.style.visibility = 'hidden';\n    el.style.font = f;\n    el.innerHTML = this;\n    el = document.body.appendChild(el);\n    w = el.offsetWidth;\n    el.parentNode.removeChild(el);\n    return w;\n}\n\n// Usage  \n\"MyString\".width(12);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'd like to use Javascript to calculate the width of a string, is this possible without having to use a monospace typeface?  If it's not built-in, my only idea is to create a table of widths for each character, but this is pretty unreasonable especially supporting unicode and different type sizes (and all browsers for that matter).</p>\n",
            "last_activity_date": 1424932264,
            "question_id": 118241,
            "score": 221,
            "tags": [
                "javascript",
                "textbox"
            ],
            "title": "Calculate text width with Javascript"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You can't modify the default dialogue for <code>onbeforeunload</code>, so your best bet may be to work with it.</p>\n\n<pre><code>window.onbeforeunload = function() {\n    return 'You have unsaved changes!';\n}\n</code></pre>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms536907%28VS.85%29.aspx\">Here's a reference</a> to this from Microsoft:</p>\n\n<blockquote>\n  <p>When a string is assigned to the returnValue property of window.event, a dialog box appears that gives users the option to stay on the current page and retain the string that was assigned to it. The default statement that appears in the dialog box, \"Are you sure you want to navigate away from this page? ... Press OK to continue, or Cancel to stay on the current page.\", cannot be removed or altered.</p>\n</blockquote>\n\n<p>The problem seems to be:</p>\n\n<ol>\n<li>When <code>onbeforeunload</code> is called, it will take the return value of the handler as <code>window.event.returnValue</code>.</li>\n<li>It will then parse the return value as a string (unless it is null).</li>\n<li>Since <code>false</code> is parsed as a string, the dialogue box will fire, which will then pass an appropriate <code>true</code>/<code>false</code>.</li>\n</ol>\n\n<p>The result is, there doesn't seem to be a way of assigning <code>false</code> to <code>onbeforeunload</code> to prevent it from the default dialogue.</p>\n\n<p>Additional notes on jQuery:</p>\n\n<ul>\n<li>Setting the event in jQuery <strong>may</strong> be problematic, as that allows other <code>onbeforeunload</code> events to occur as well. If you wish only for your unload event to occur I'd stick to plain ol' JavaScript for it.</li>\n<li><p>jQuery doesn't have a shortcut for <code>onbeforeunload</code> so you'd have to use the generic <code>bind</code> syntax.</p>\n\n<pre><code>$(window).bind('beforeunload', function() {} );\n</code></pre></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 184
                },
                {
                    "body": "<p>Owen is correct. And, the reason behind this is security. Preventing a page from unloading is useful in web forms and such, but it can easily be exploited by a malicious site to fool the user into staying on a page. That's why web browsers implement the standard message and have this mechanism for inserting custom text.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>What about to use the specialized version of the \"bind\" command \"one\". Once the event handler executes the first time, it\u2019s automatically removed as an event handler.</p>\n\n<p>$(window).one(\"beforeunload\", BeforeUnload);</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What worked for me (IE8, Chrome, Firefox)  is:</p>\n\n<pre><code>$(window).bind(\"beforeunload\",function(event) {\n    if(hasChanged) return \"You have unsaved changes\";\n});\n</code></pre>\n\n<p>It is important not to return anything if no prompt is required as there are differences between IE and other browser behaviours here.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I faced the same problem, I was ok to get its own dialog box with my message, but the problem I faced was :\n1) It was giving message on all navigations I want it only for close click. \n2) with my own confirmation message if user selects cancel it still shows the browser's default dialog box.</p>\n\n<p>Following is the solutions code I found, which I wrote on my Master page.</p>\n\n<pre><code>function closeMe(evt) {\n    if (typeof evt == 'undefined') {\n        evt = window.event; }\n    if (evt &amp;&amp; evt.clientX &gt;= (window.event.screenX - 150) &amp;&amp;\n        evt.clientY &gt;= -150 &amp;&amp; evt.clientY &lt;= 0) {\n        return \"Do you want to log out of your current session?\";\n    }\n}\nwindow.onbeforeunload = closeMe;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can detect which button (ok or cancel) pressed by user, because the onunload function called only when the user choise leaveing the page. Althoug in this funcion the possibilities is limited, because the DOM is being collapsed. You can run javascript, but the ajax POST doesn't do anything therefore you can't use this methode for automatic logout. But there is a solution for that. The window.open('logout.php') executed in the onunload funcion, so the user will logged out with a new window opening.</p>\n\n<pre><code>function onunload = (){\n    window.open('logout.php');\n}\n</code></pre>\n\n<p>This code called when user leave the page or close the active window and user logged out by 'logout.php'.\nThe new window close immediately when logout php consist of code:</p>\n\n<pre><code>window.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code> &lt;script type=\"text/javascript\"&gt;\n        window.onbeforeunload = function(evt) {\n            var message = 'Are you sure you want to leave?';\n            if (typeof evt == 'undefined') {\n                evt = window.event;\n            }       \n            if (evt) {\n                evt.returnValue = message;\n            }\n            return message;\n        } \n    &lt;/script&gt;\n</code></pre>\n\n<p>refer from <a href=\"http://www.codeprojectdownload.com\" rel=\"nofollow\">http://www.codeprojectdownload.com</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>While there isn't anything you can do about the box in some circumstances, you can intercept someone clicking on a link. For me, this was worth the effort for most scenarios and as a fallback, I've left the unload event.</p>\n\n<p>I've used Boxy instead of the standard jQuery Dialog, it is available here: <a href=\"http://onehackoranother.com/projects/jquery/boxy/\">http://onehackoranother.com/projects/jquery/boxy/</a></p>\n\n<pre><code>$(':input').change(function() {\n    if(!is_dirty){\n        // When the user changes a field on this page, set our is_dirty flag.\n        is_dirty = true;\n    }\n});\n\n$('a').mousedown(function(e) {\n    if(is_dirty) {\n        // if the user navigates away from this page via an anchor link, \n        //    popup a new boxy confirmation.\n        answer = Boxy.confirm(\"You have made some changes which you might want to save.\");\n    }\n});\n\nwindow.onbeforeunload = function() {\nif((is_dirty)&amp;&amp;(!answer)){\n            // call this if the box wasn't shown.\n    return 'You have made some changes which you might want to save.';\n    }\n};\n</code></pre>\n\n<p>You could attach to another event, and filter more on what kind of anchor was clicked, but this works for me and what I want to do and serves as an example for others to use or improve. Thought I would share this for those wanting this solution.</p>\n\n<p><em>I have cut out code, so this may not work as is.</em></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>1) Use onbeforeunload, not onunload.</p>\n\n<p>2) The important thing is to avoid executing a return statement. I don't mean, by this, to avoid returning from your handler. You return all right, but you do it by ensuring that you reach the end of the function and DO NOT execute a return statement. Under these conditions the built-in standard dialog does not occur.</p>\n\n<p>3) You can, if you use onbeforeunload, run an ajax call in your unbeforeunload handler to tidy up on the server, but it must be a synchronous one, and you have to wait for and handle the reply in your onbeforeunload handler (still respecting condition (2) above). I do this and it works fine. If you do a synchronous ajax call, everything is held up until the response comes back. If you do an asynchronous one, thinking that you don't care about the reply from the server, the page unload continues and your ajax call is aborted by this process - including a remote script if it's running.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Try placing a <code>return;</code> instead of a message.. this is working most browsers for me.\n(This only really prevents dialog's presents)</p>\n\n<pre><code>window.onbeforeunload = function(evt) {            \n        //Your Extra Code\n        return;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I need to warn users about unsaved changes before they leave a page (a pretty common problem). </p>\n\n<pre><code>window.onbeforeunload=handler\n</code></pre>\n\n<p>This works but it raises a default dialog with an irritating standard message that wraps my own text. I need to either completely replace the standard message, so my text is clear, or (even better) replace the entire dialog with a modal dialog using jQuery.</p>\n\n<p>So far I have failed and I haven't found anyone else who seems to have an answer. Is it even possible?</p>\n\n<p>Javascript in my page:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;   \n   window.onbeforeunload=closeIt;\n&lt;/script&gt;\n</code></pre>\n\n<p>The closeIt() function:</p>\n\n<pre><code>function closeIt()\n{\n  if (changes == \"true\" || files == \"true\")\n  {\n      return \"Here you can append a custom message to the default dialog.\";\n  }\n}\n</code></pre>\n\n<p>Using jQuery and jqModal I have tried this kind of thing (using a custom confirm dialog):</p>\n\n<pre><code>$(window).beforeunload(function() {\n        confirm('new message: ' + this.href + ' !', this.href);\n        return false;\n    });\n</code></pre>\n\n<p>which also doesn't work - I cannot seem to bind to the beforeunload event. </p>\n",
            "last_activity_date": 1399894755,
            "question_id": 276660,
            "score": 198,
            "tags": [
                "javascript",
                "jquery",
                "onbeforeunload"
            ],
            "title": "How can I override the OnBeforeUnload dialog and replace it with my own?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\">Firebug</a> is one of the most popular tools for this purpose.</p>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>I found the new version of Internet&nbsp;Explorer&nbsp;8 (press <kbd>F12</kbd>) is very good to debug JavaScript code.</p>\n\n<p>Of course, <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a> is good if you use Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Visual Studio 2008 has some very good JavaScript debugging tools. You can drop a breakpoint in your client side JavaScript code and step through it using the exact same tools as you would the server side code. There is no need to attach to a process or do anything tricky to enable it.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I use <a href=\"http://en.wikipedia.org/wiki/WebKit\" rel=\"nofollow\">WebKit's</a> developer menu/console (Safari 4). It is almost identical to Firebug.</p>\n\n<p><code>console.log()</code> is the new black -- far better than <code>alert()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I use a few tools: <a href=\"http://www.fiddler2.com/fiddler2/\" rel=\"nofollow\">Fiddler</a>, Firebug, and Visual Studio. I hear Internet&nbsp;Explorer&nbsp;8 has a good built-in debugger.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Start with Firebug and IE Debugger.</p>\n\n<p>Be careful with debuggers in JavaScript though. Every once in a while they will affect the environment just enough to cause some of the errors you are trying to debug.</p>\n\n<p>Examples:</p>\n\n<p>For Internet&nbsp;Explorer, it's generally a gradual slowdown and is some kind of memory leak type deal. After a half hour or so I need to restart. It seems to be fairly regular.</p>\n\n<p>For Firebug, it's probably been more than a year so it may have been an older version. As a result, I don't remember the specifics, but basically the code was not running correctly and after trying to debug it for a while I disabled Firebug and the code worked fine.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I used to use <a href=\"http://getfirebug.com/\" rel=\"nofollow\">Firebug</a>, until Internet&nbsp;Explorer&nbsp;8 came out. I'm not a huge fan of Internet&nbsp;Explorer, but after spending some time with the built-in developer tools, which includes a really nice debugger, it seems pointless to use anything else. I have to tip my hat to Microsoft they did a fantastic job on this tool. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You might also check out <a href=\"http://developer.yahoo.com/yui/logger/\" rel=\"nofollow\">YUI Logger</a>. All you have to do to use it is include a couple of tags in your HTML. It is a helpful addition to Firebug, which is more or less a must.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My first step is always to validate the HTML and to check syntax with <a href=\"http://www.jslint.com/lint.html\" rel=\"nofollow\">JSLint</a>. If you have clean markup and valid JavaScript code then it is time for Firebug or another debugger.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<ul>\n<li>Internet&nbsp;Explorer&nbsp;8 (Developer Tools - <kbd>F12</kbd>).  Anything else is second rate in Internet&nbsp;Explorer land</li>\n<li>Firefox and <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\">Firebug</a>. Hit <kbd>F12</kbd> to display.</li>\n<li>Safari (Show Menu Bar, <em>Preferences</em> -> <em>Advanced</em> -> <em>Show Develop</em> menu bar)</li>\n<li>Google Chrome JavaScript Console (<kbd>F12</kbd> or (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd>)).  Mostly the same browser as Safari, but Safari is better IMHO.</li>\n<li>Opera (<em>Tools</em> -> <em>Advanced</em> -> <em>Developer Tools</em>)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>As with most answers, it really depends: What are you trying to achieve with your debugging? Basic development, fixing performance issues? For basic development, all the previous answers are more than adequate.</p>\n\n<p>For performance testing specifically, I recommend Firebug. Being able to profile which methods are the most expensive in terms of time has been invaluable for a number of projects I have worked on. As client-side libraries become more and more robust, and more responsibility is placed client-side in general, this type of debugging and profiling will only become more useful.</p>\n\n<p>Firebug Console API:\n<a href=\"http://getfirebug.com/console.html\" rel=\"nofollow\">http://getfirebug.com/console.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Although <code>alert(msg);</code> works in those \"I just want to find out whats going on\" scenarios...  <strong>every</strong> developer has encountered that case where you end up in a (very large or endless) loop that you can't break out of.</p>\n\n<p>I'd recommend that during development if you want a very in-your-face debug option, use a debug option that lets you break out.  (PS Opera, Safari? and Chrome? all have this available in their native dialogs)</p>\n\n<pre><code>//global flag\n_debug = true;\nfunction debug(msg){\n  if(_debug){\n    if(!confirm(msg + '\\n\\nPress Cancel to stop debugging.')){\n      _debug = false;\n    }\n  }\n}\n</code></pre>\n\n<p>With the above you can get your self into a large loop of popup debugging, where pressing <kbd>Enter</kbd>/<kbd>Ok</kbd> lets you jump through each message, but pressing <kbd>Escape</kbd>/<kbd>Cancel</kbd> lets you break out nicely.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Besides using Visual Studio's JavaScript debugger, I wrote my own simple panel that I include to a page. It's simply like the <a href=\"http://msdn.microsoft.com/en-us/library/f177hahy%28v=vs.80%29.aspx\" rel=\"nofollow\">Immediate window</a> of Visual Studio. I can change my variables' values, call my functions, and see variables' values. It simply evaluates the code written in the text field.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm using <a href=\"http://www.mozilla.org/projects/venkman/\" rel=\"nofollow\">Venkman</a>, a JavaScript debugger for <a href=\"http://en.wikipedia.org/wiki/XUL\" rel=\"nofollow\">XUL</a> applications.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are using <a href=\"http://en.wikipedia.org/wiki/Microsoft_Visual_Studio\" rel=\"nofollow\">Visual Studio</a>, just put <code>debugger;</code> above the code you want to debug. During execution the control will pause at that place, and you can debug step by step from there on.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use old good <code>printf</code> approach (an ancient technique which will work well in any time).</p>\n\n<p>Look to magic <code>%o</code>:</p>\n\n<pre><code>console.log(\"this is %o, event is %o, host is %s\", this, e, location.host);\n</code></pre>\n\n<p><code>%o</code> dump <em>clickable and deep-browsable, pretty-printed</em> content of JS object. <code>%s</code> was shown just for a record.</p>\n\n<p>And this:</p>\n\n<pre><code>console.log(\"%s\", new Error().stack);\n</code></pre>\n\n<p>gives you Java-like stack trace to point of <code>new Error()</code> invocation (including <em>path to file and line number</em>!!).</p>\n\n<p>Both <code>%o</code> and <code>new Error().stack</code> available in Chrome and Firefox.</p>\n\n<p>With such powerful tools you make assumption whats going wrong in your JS, put debug output (don't forget wrap in <code>if</code> statement to reduce amount of data) and verify your assumption. Fix issue or make new assumption or put more debug output to bit problem.</p>\n\n<p>Also for stack traces use:</p>\n\n<pre><code>console.trace();\n</code></pre>\n\n<p>as say <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/console</a>.</p>\n\n<p>Happy hacking!</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>All modern browsers come with some form of a built-in JavaScript debugging application. The details of these will be covered on the relevant technologies web pages. My personal preference for debugging JavaScript is <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a> in Firefox. I'm not saying Firebug is better than any other; it depends on your personal preference and you should probably test your site in all browsers anyway, but my first, personal, first choice is always Firebug.</p>\n\n<p>I'll cover some of the high-level solutions below, using Firebug as an example:</p>\n\n<h2>Firefox</h2>\n\n<p>Firefox comes with with its own inbuilt JavaScript debugging tool, but I would recommend you install the <a href=\"http://Firebug\" rel=\"nofollow\">Firebug</a> add on. This provides several additional features based on the basic version that are handy. I'm going to only talk about Firebug here.</p>\n\n<p>Once Firebug is installed you can access it like below:</p>\n\n<p>Firstly if you right click on any element you can <em>Inspect Element with Firebug</em>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/1s6D8.png\" alt=\"Inspect Element in Firebug\"></p>\n\n<p>Clicking this will open up the Firebug pane at the bottom of the browser:</p>\n\n<p><img src=\"http://i.stack.imgur.com/poLZ2.png\" alt=\"Firebug pane\"></p>\n\n<p>Firebug provides several features but the one were interested in is the script tab. Clicking the script tab opens the below window:</p>\n\n<p><img src=\"http://i.stack.imgur.com/lCBfr.png\" alt=\"Script tab\"></p>\n\n<p>Obviously, to debug you need to click <em>reload</em>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/NOARO.png\" alt=\"JavaScript in the sctipt tab\"></p>\n\n<p>You can now add <a href=\"http://en.wikipedia.org/wiki/Breakpoint\" rel=\"nofollow\">breakpoints</a> by clicking the line to the left of the piece of JavaScript code you want to add the breakpoint to:</p>\n\n<p><img src=\"http://i.stack.imgur.com/jHJXI.png\" alt=\"Adding breakpoints\"></p>\n\n<p>When your breakpoint is hit, it will look like below:</p>\n\n<p><img src=\"http://i.stack.imgur.com/WXNCN.png\" alt=\"A breakpoint being hit\"></p>\n\n<p>You can also add <a href=\"http://www.pcmag.com/encyclopedia/term/59634/watch-variable\" rel=\"nofollow\">watch variables</a> and generally do everything that you would expect in a modern debugging tool.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ycAjq.png\" alt=\"Watch varibables\"></p>\n\n<p>For more information on the various options offered in Firebug, check out the <a href=\"http://getfirebug.com/faq/\" rel=\"nofollow\">Firebug FAQ</a>.</p>\n\n<h2>Chrome</h2>\n\n<p>Chrome also has its own in built JavaScript debugging option, which works in a very similar way, <em>right click, inspect element, etc.</em>. Have a look at <a href=\"https://developers.google.com/chrome-developer-tools/docs/javascript-debugging\" rel=\"nofollow\">Chrome Developer Tools</a>. I generally find the <a href=\"http://en.wikipedia.org/wiki/Stack_trace\" rel=\"nofollow\">stack traces</a> in Chrome better than Firebug.</p>\n\n<h2>Internet Explorer</h2>\n\n<p>If your developing in <a href=\"http://en.wikipedia.org/wiki/.NET_Framework\" rel=\"nofollow\">.NET</a> and using Visual Studio using the web development environment you can debug JavaScript code directly by placing breakpoints, etc. Your JavaScript code looks exactly the same as if you were debugging your C# or <a href=\"http://en.wikipedia.org/wiki/Visual_Basic_.NET\" rel=\"nofollow\">VB.NET</a> code.</p>\n\n<p>If you don't have this, Internet Explorer also provides all of the tools shown above. Annoyingly, instead of having the <em>right click inspect element</em> features of Chrome or Firefox, you access the developer tools by pressing <strong>F12</strong>. <a href=\"http://stackoverflow.com/questions/10191099\">This question</a> covers most of the points.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>In addition to Firebug and browser-native developer extensions <em>JetBrains WebStorm</em> IDE comes with <a href=\"http://www.jetbrains.com/webstorm/webhelp/debugging-javascript.html\" rel=\"nofollow\">remote debug support for Firefox and Chrome</a> (Extension required) built in.</p>\n\n<p>Also supports:</p>\n\n<ul>\n<li>coffescript: <a href=\"http://stackoverflow.com/questions/15262480/how-to-debug-coffeescript-in-node-js-with-webstorm-6-source-maps\">how to debug coffeescript in node.js with webstorm 6 source maps</a></li>\n<li><a href=\"http://www.jetbrains.com/webstorm/webhelp/running-and-debugging-node-js.html\" rel=\"nofollow\">node.js</a></li>\n</ul>\n\n<p>Options to test this for free are the 30 trial or using an <a href=\"http://confluence.jetbrains.com/display/WI/WebStorm+EAP\" rel=\"nofollow\">Early Access Version</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is a <strong>debugger</strong> keyword in JavaScript to debug the JavaScript code. Put <strong>debugger;</strong> snippet in your JavaScript code. It will automatically start debugging the JavaScript code at that point.</p>\n\n<p>For example:</p>\n\n<p>Suppose this is your <strong>test.js</strong> file</p>\n\n<pre><code>function func(){\n    //Some stuff\n    debugger;  //Debugging is automatically started from here\n    //Some stuff\n}\nfunc();\n</code></pre>\n\n<ul>\n<li>When the browser runs the web page in developer option with enabled debugger, then it automatically starts debugging from the <strong>debugger;</strong> point.</li>\n<li>There should be opened the developer window the browser.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Don't bother with <a href=\"https://en.wikipedia.org/wiki/WebStorm\" rel=\"nofollow\">WebStorm</a>. It doesn't work at all. </p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>When I find that I have a problematic code snippet, how should I go about debugging it?</p>\n",
            "last_activity_date": 1422392759,
            "question_id": 988363,
            "score": 52,
            "tags": [
                "javascript",
                "debugging"
            ],
            "title": "How can I debug my JavaScript code?"
        },
        {
            "answer_count": 32,
            "answers": [
                {
                    "body": "<p><strong>Update:</strong>  Rewritten to incorporate suggestions from <strong>John Millikin</strong> and <strong>da5id</strong>.  This solution is written in PHP, but should be easily adapted to other languages.</p>\n\n<p><strong>Update 2:</strong> Incorporating comments from <strong>Nick Johnson</strong> that the original <code>.htaccess</code> regex can cause problems with files like <code>json-1.3.js</code>. Solution is to only rewrite if there are exactly 10 digits at the end. (Because 10 digits covers all timestamps from 9/9/2001 to 11/20/2286.)</p>\n\n<p>First, we use the following rewrite rule in .htaccess:</p>\n\n<pre><code>RewriteEngine on\nRewriteRule ^(.*)\\.[\\d]{10}\\.(css|js)$ $1.$2 [L]\n</code></pre>\n\n<p>Now, we write the following PHP function:</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>/**\n *  Given a file, i.e. /css/base.css, replaces it with a string containing the\n *  file's mtime, i.e. /css/base.1221534296.css.\n *  \n *  @param $file  The file to be loaded.  Must be an absolute path (i.e.\n *                starting with slash).\n */\nfunction auto_version($file)\n{\n  if(strpos($file, '/') !== 0 || !file_exists($_SERVER['DOCUMENT_ROOT'] . $file))\n    return $file;\n\n  $mtime = filemtime($_SERVER['DOCUMENT_ROOT'] . $file);\n  return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $file);\n}\n</code></pre>\n\n<p>Now, wherever you include your CSS, change it from this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;link rel=\"stylesheet\" href=\"/css/base.css\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>To this:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"&lt;?php echo auto_version('/css/base.css'); ?&gt;\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>This way, you never have to modify the link tag again, and the user will always see the latest CSS.  The browser will be able to cache the CSS file, but when you make any changes to your CSS the browser will see this as a new URL, so it won't use the cached copy.</p>\n\n<p>This can also work with images, favicons, and JavaScript. Basically anything that is not dynamically generated.</p>\n",
                    "is_accepted": false,
                    "score": 264
                },
                {
                    "body": "<p>You can just put <code>?foo=1234</code> at the end of your css / js import, changing 1234 to be whatever you like. Have a look at the SO html source for an example.</p>\n\n<p>The idea there being that the ? parameters are discarded / ignored on the request anyway and you can change that number when you roll out a new version.</p>\n\n<p><hr /></p>\n\n<p><strong>Note:</strong> There is some argument with regard to exactly how this affects caching. I believe the general gist of it is that GET requests, with or without parameters <em>should</em> be cachable, so the above solution should work.</p>\n\n<p>However, it is down to both the web server to decide if it wants to adhere to that part of the spec and the browser the user uses, as it can just go right ahead and ask for a fresh version anyway.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>I've heard this called \"auto versioning\". The most common method is to include the static file's mtime somewhere in the URL, and strip it out using rewrite handlers or URL confs:</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"http://muffinresearch.co.uk/archives/2008/04/08/automatic-asset-versioning-in-django/\">Automatic asset versioning in Django</a></li>\n<li><a href=\"http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/\">Automatically Version Your CSS and JavaScript Files</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>You can force a \"session-wide caching\" if you add the session-id as a spureous parameter of the js/css file:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" src=\"myStyles.css?ABCDEF12345sessionID\" /&gt;\n&lt;script language=\"javascript\" src=\"myCode.js?ABCDEF12345sessionID\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>If you want a version-wide caching you could add some code to print the file date or similar. If you're using Java you can use a custom-tag to generate the link in an elegant way.</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" src=\"myStyles.css?20080922_1020\" /&gt;\n&lt;script language=\"javascript\" src=\"myCode.js?20080922_1120\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Simple Client-side Technique</strong></p>\n\n<p>In general, caching is good.. So there are a couple of techniques, depending on whether you're fixing the problem for yourself as you develop a website, or whether you're trying to control cache in a production environment.</p>\n\n<p>General visitors to your website won't have the same experience that you're having when you're developing the site.  Since the average visitor comes to the site less frequently (maybe only a few times each month, unless you're a Google or hi5 Networks), then they are less likely to have your files in cache, and that may be enough.  If you want to force a new version into the browser, you can always add a query string to the request, and bump up the version number when you make major changes: </p>\n\n<pre><code>&lt;script src=\"/myJavascript.js?version=4\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This will ensure that everyone gets the new file.  It works because the browser looks at the URL of the file to determine whether it has a copy in cache.  If your server isn't set up to do anything with the query string, it will be ignored, but the name will look like a new file to the browser.</p>\n\n<p>On the other hand, if you're developing a website, you don't want to change the version number every time you save a change to your development version.  That would be tedious.</p>\n\n<p>So while you're developing your site, a good trick would be to automatically generate a query string parameter:</p>\n\n<pre><code>&lt;!-- Development version: --&gt;\n&lt;script&gt;document.write('&lt;script src=\"/myJavascript.js?dev=' + Math.floor(Math.random() * 100) + '\"\\&gt;&lt;\\/script&gt;');&lt;/script&gt;\n</code></pre>\n\n<p>Adding a query string to the request is a good way to version a resource, but for a simple website this may be unnecessary.  And remember, caching is a good thing.</p>\n\n<p>It's also worth noting that the browser isn't necessarily stingy about keeping files in cache.  Browsers have policies for this sort of thing, and they are usually playing by the rules laid down in the HTTP specification.  When a browser makes a request to a server, part of the response is an EXPIRES header.. a date which tells the browser how long it should be kept in cache.  The next time the browser comes across a request for the same file, it sees that it has a copy in cache and looks to the EXPIRES date to decide whether it should be used.  </p>\n\n<p>So believe it or not, it's actually your server that is making that browser cache so persistent.  You could adjust your server settings and change the EXPIRES headers, but the little technique I've written above is probably a much simpler way for you to go about it. Since caching is good, you usually want to set that date far into the future (a \"Far-future Expires Header\"), and use the technique described above to force a change.</p>\n\n<p>If you're interested in more info on HTTP or how these requests are made, a good book is \"High Performance Web Sites\" by Steve Souders.  It's a very good introduction to the subject.</p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>Changing the filename will work.  But that's not usually the simplest solution.</p>\n\n<p>An HTTP cache-control header of 'no-cache' doesn't always work, as you've noticed.  The HTTP 1.1 spec allows wiggle-room for user-agents to decide whether or not to request a new copy.  (It's non-intuitive if you just look at the names of the directives.  Go read the actual <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\" rel=\"nofollow\">HTTP 1.1 spec for cache</a>... it makes a little more sense in context.)</p>\n\n<p>In a nutshell, if you want iron-tight cache-control use</p>\n\n<pre><code>Cache-Control: no-cache, no-store, must-revalidate\n</code></pre>\n\n<p>in your response headers.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Dont use foo.css?version=1! Browsers aren't supposed to cache URLs with GET variables. According to <a href=\"http://www.thinkvitamin.com/features/webapps/serving-javascript-fast\">http://www.thinkvitamin.com/features/webapps/serving-javascript-fast</a>, though IE and Firefox ignore this, Opera and Safari don't! Instead, use foo.v1234.css, and use rewrite rules to strip out the version number.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Instead of changing the version manually, I would recommend you use an MD5 hash of the actual CSS file.</p>\n\n<p>So your URL would be something like</p>\n\n<pre><code>http://mysite.com/css/[md5_hash_here]/style.css\n</code></pre>\n\n<p>You could still use the rewrite rule to strip out the hash, but the advantage is that now you can set your cache policy to \"cache forever\", since if the URL is the same, that means that the file is unchanged.</p>\n\n<p>You can then write a simple shell script that would compute the hash of the file and update your  tag (you'd probably want to move it to a separate file for inclusion).</p>\n\n<p>Simply run that script every time CSS changes and you're good. The browser will ONLY reload your files when they are altered. If you make an edit and then undo it, there's no pain in figuring out which version you need to return to in order for your visitors not to re-download.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>I recently solved this using Python. Here the code (should be easy to adopt to other languages):</p>\n\n<pre><code>def import_tag(pattern, name, **kw):\n    if name[0] == \"/\":\n        name = name[1:]\n    # Additional HTML attributes\n    attrs = ' '.join(['%s=\"%s\"' % item for item in kw.items()])\n    try:\n        # Get the files modification time\n        mtime = os.stat(os.path.join('/documentroot', name)).st_mtime\n        include = \"%s?%d\" % (name, mtime)\n        # this is the same as sprintf(pattern, attrs, include) in other\n        # languages\n        return pattern % (attrs, include)\n    except:\n        # In case of error return the include without the added query\n        # parameter.\n        return pattern % (attrs, name)\n\ndef script(name, **kw):\n    return import_tag(\"\"\"&lt;script type=\"text/javascript\" \"\"\" +\\\n        \"\"\" %s src=\"/%s\"&gt;&lt;/script&gt;\"\"\", name, **kw)\n\ndef stylesheet(name, **kw):\n    return import_tag('&lt;link rel=\"stylesheet\" type=\"text/css\" ' +\\\n        \"\"\"%s href=\"/%s\"&gt;', name, **kw)\n</code></pre>\n\n<p>This code basically appends the files time-stamp as a query parameter to the URL. The call of the following function</p>\n\n<pre><code>script(\"/main.css\")\n</code></pre>\n\n<p>will result in</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\"  href=\"/main.css?1221842734\"&gt;\n</code></pre>\n\n<p>The advantage of course is that you do never have to change your html again, touching the CSS file will automatically trigger a cache invalidation. Works very good and the overhead is not noticeable.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Say you have a file available at:</p>\n\n<pre><code>/styles/screen.css\n</code></pre>\n\n<p>your can either append a query parameter with version information onto the URI, e.g.:</p>\n\n<pre><code>/styles/screen.css?v=1234\n</code></pre>\n\n<p>or you can prepend version information, e.g.:</p>\n\n<pre><code>/v/1234/styles/screen.css\n</code></pre>\n\n<p>IMHO the second method is better for CSS files because they can refer to images using relative URLs which means that if you specify a <code>background-image</code> like so:</p>\n\n<pre><code>body {\n    background-image: url('images/happy.gif');\n}\n</code></pre>\n\n<p>its URL will effectively be:</p>\n\n<pre><code>/v/1234/styles/images/happy.gif\n</code></pre>\n\n<p>This means that if you update the version number used the server will treat this as a new resource and not use a cached version. If you base your version number on the Subversion/CVS/etc. revision this means that changes to images referenced in CSS files will be noticed. That isn't guaranteed with the first scheme, i.e. the URL <code>images/happy.gif</code> relative to <code>/styles/screen.css?v=1235</code> is <code>/styles/images/happy.gif</code> which doesn't contain any version information.</p>\n\n<p>I have implemented a caching solution using this technique with Java servlets and simply handle requests to <code>/v/*</code> with a servlet that delegates to the underlying resource (i.e. <code>/styles/screen.css</code>). In development mode I set caching headers that tell the client to always check the freshness of the resource with the server (this typically results in a 304 if you delegate to Tomcat's <code>DefaultServlet</code> and the <code>.css</code>, <code>.js</code>, etc. file hasn't changed) while in deployment mode I set headers that say \"cache forever\".</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I suggest implementing the following process:</p>\n\n<ul>\n<li><p>version your css/js files whenever you deploy, something like: screen.1233.css    (the number can be your SVN revision if you use a versioning system)</p></li>\n<li><p>minify them to optimize loading times</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>if you are using jquery, there is an option called cache that will append a random number \nthis is not a complete answer i know but it might save you some time</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>My method to do this is simply to have the link element into a server-side include:</p>\n\n<pre><code>&lt;!--#include virtual=\"/includes/css-element.txt\"--&gt;\n</code></pre>\n\n<p>where the contents of css-element.txt is</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"mycss.css\"/&gt;\n</code></pre>\n\n<p>so the day you want to link to my-new-css.css or whatever, you just change the include.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Interesting post. Having read all the answers here combined with the fact that I have never had any problems with \"bogus\" query strings (which I am unsure why everyone is so reluctant to use this) I guess the solution (which removes the need for apache rewrite rules as in the accepted answer) is to compute a short HASH of the CSS file contents (instead of the file datetime) as a bogus querystring.</p>\n\n<p>This would result in the following:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"/css/base.css?[hash-here]\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>Of course the datetime solutions also get the job done in the case of editing a CSS file but I think it is about the css file content and not about the file datetime, so why get these mixed up?</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The RewriteRule needs a small update for js or css files that contain a dot notation versioning at the end. E.g. json-1.3.js.</p>\n\n<p>I added a dot negation class [^.] to the regex so .number. is ignored.</p>\n\n<pre><code>RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Thanks at Kip for his perfect solution!</p>\n\n<p>I extended it to use it as an Zend_view_Helper. Because my client run his page on a virtual host I also extended it for that.</p>\n\n<p>Hope it helps someone else too.</p>\n\n<pre><code>/**\n * Extend filepath with timestamp to force browser to\n * automatically refresh them if they are updated\n *\n * This is based on Kip's version, but now\n * also works on virtual hosts\n * @link http://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files\n *\n * Usage:\n * - extend your .htaccess file with\n * # Route for My_View_Helper_AutoRefreshRewriter\n * # which extends files with there timestamp so if these\n * # are updated a automatic refresh should occur\n * # RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\n * - then use it in your view script like\n * $this-&gt;headLink()-&gt;appendStylesheet( $this-&gt;autoRefreshRewriter($this-&gt;cssPath . 'default.css'));\n *\n */\nclass My_View_Helper_AutoRefreshRewriter extends Zend_View_Helper_Abstract {\n\n    public function autoRefreshRewriter($filePath) {\n\n        if (strpos($filePath, '/') !== 0) {\n\n            // path has no leading '/'\n            return $filePath;\n        } elseif (file_exists($_SERVER['DOCUMENT_ROOT'] . $filePath)) {\n\n            // file exists under normal path\n            // so build path based on this\n            $mtime = filemtime($_SERVER['DOCUMENT_ROOT'] . $filePath);\n            return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $filePath);\n        } else {\n\n            // fetch directory of index.php file (file from all others are included)\n            // and get only the directory\n            $indexFilePath = dirname(current(get_included_files()));\n\n            // check if file exist relativ to index file\n            if (file_exists($indexFilePath . $filePath)) {\n\n                // get timestamp based on this relativ path\n                $mtime = filemtime($indexFilePath . $filePath);\n\n                // write generated timestamp to path\n                // but use old path not the relativ one\n                return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $filePath);\n            } else {\n\n                return $filePath;\n            }\n        }\n    }\n\n}\n</code></pre>\n\n<p>Cheers and thanks.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Google's <a href=\"http://code.google.com/p/modpagespeed/\">mod_pagespeed</a> plugin for apache will do auto-versioning for you.  It's really slick.</p>\n\n<p>It parses HTML on its way out of the webserver (works with PHP, rails, python, static HTML -- anything) and rewrites links to CSS, JS, image files so they include an id code.  It serves up the files at the modified URLs with a very long cache control on them.  When the files change, it automatically changes the URLs so the browser has to re-fetch them.  It basically just works, without any changes to your code.  It'll even minify your code on the way out too.</p>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>I put an MD5 hash of the file's contents in its URL.  That way I can set a very long expiration date, and don't have to worry about users having old JS or CSS.</p>\n\n<p>I also calculate this once per file at runtime (or on file system changes) so there's nothing funny to do at design time or during the build process.</p>\n\n<p>If you're using ASP.NET MVC then you can check out the code <a href=\"http://stackoverflow.com/questions/936626/how-can-i-force-a-hard-refresh-ctrlf5/6439351#6439351\">in my other answer here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The simplest method is to take advantage of the PHP file read functionality. Just have the PHP echo the contents of the file into  tags.</p>\n\n<pre><code>&lt;?php\n//Replace the 'style.css' with the link to the stylesheet.\necho \"&lt;style type='text/css'&gt;\".file_get_contents('style.css').\"&lt;/style&gt;\";\n?&gt;\n</code></pre>\n\n<p>If you're using something besides PHP, there are some variations depending on the language, but almost all languages have a way to print the contents of a file. Put it in the right location (in the  section), and that way, you don't have to rely on the browser.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Sorry for bringing back a dead thread. </p>\n\n<p>@<a href=\"http://stackoverflow.com/users/35440/toma\">TomA</a> is right. </p>\n\n<p>Using \"querystring\" method will not be cached as quoted by <a href=\"http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/\" rel=\"nofollow\">Steve Souders</a> below:</p>\n\n<blockquote>\n  <p>...that Squid, a popular proxy, doesn\u2019t cache resources with a\n  querystring.</p>\n</blockquote>\n\n<p>@<a href=\"http://stackoverflow.com/users/35440/toma\">TomA</a> suggestion of using style.TIMESTAMP.css is good, but MD5 would be much better as only when the contents were genuinely changed, the MD5 changes as well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I see a problem with the approach of using a timestamp- or hash-based differentiator in the resource URL which gets stripped out on request at the server. The page that contains the link to e.g. the style sheet <em>might get cached as well</em>. So the cached page might request an older version of the style sheet but will be served the latest version, which might or might not work with the requesting page.</p>\n\n<p>To fix this, you either have to guard the requesting page with a <code>no-cache</code> header or meta, to make sure it gets refreshed on every load. Or you have to maintain <em>all versions</em> of the style file that you ever deployed on the server, each as an individual file and with their differentiator intact, so that the requesting page can get at the version of the style file it was designed for. In the latter case you basically tie the versions of the HTML page and the style sheet together, which can be done statically and doesn't require any server logic.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Not sure why you guys are taking so much pain to implement this solution.</p>\n\n<p>All you need to do if get the file's modified timestamp and append it as a querystring to the file</p>\n\n<p>In PHP i would do it as:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"mycss.css?v=&lt;?php echo filemtime('mycss.css') ?&gt;\"/&gt;\n</code></pre>\n\n<p>filemtime is a PHP function that returns the file modified timestamp.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>\"Another idea which was suggested by SCdF would be to append a bogus query string to the file. (Some Python code to automatically use the timestamp as a bogus query string was submitted by pi.) However, there is some discussion as to whether or not the browser would cache a file with a query string. (Remember, we want the browser to cache the file and use it on future visits. We only want it to fetch the file again when it has changed.) Since it is not clear what happens with a bogus query string, I am not accepting that answer.\"</p>\n\n<p>&lt;link rel=\"stylesheet\" href=\"file.css?&lt;?=hash_hmac('sha1', session_id(), md5_file(\"file.css\")); ?>\" /></p>\n\n<p>Hashing the file means when it has changed, the query string will have changed. If it hasn't, it will remain the same. Each session forces a reload too.</p>\n\n<p>Optionally, you can also use rewrites to cause the browser to think it's a new URI</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For a Java Servlet environment, you can look at the <a href=\"https://jawr.java.net/\" rel=\"nofollow\">Jawr library</a>. The features page explains how it handles caching:</p>\n\n<blockquote>\n  <p>Jawr will try its best to force your clients to cache the resources. If a browser asks if a file changed, a 304 (not modified) header is sent back with no content. On the other hand, with Jawr you will be 100% sure that new versions of your bundles are downloaded by all clients. Every URL to your resources will include an automatically generated, content-based prefix that changes automatically whenever a resurce is updated. Once you deploy a new version, the URL to the bundle will change as well so it will be impossible that a client uses an older, cached version.</p>\n</blockquote>\n\n<p>The library also does js/css minification, but you can turn that off if you don't want it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could simply add some random number with the CSS/JS url like</p>\n\n<pre><code>example.css?randomNo=Math.random()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For ASP.NET I suppose next solution with advanced options (debug/release mode, versions):</p>\n\n<p>Js or Css files included by such way:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;\" /&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Css/exampleCss&lt;%=Global.CssPostfix%&gt;\" /&gt;\n</code></pre>\n\n<p>Global.JsPostfix and Global.CssPostfix is calculated by the following way in Global.asax:</p>\n\n<pre><code>protected void Application_Start(object sender, EventArgs e)\n{\n    ...\n    string jsVersion = ConfigurationManager.AppSettings[\"JsVersion\"];\n    bool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[\"UpdateJsEveryAppStart\"]);\n    int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\n    JsPostfix = \"\";\n#if !DEBUG\n    JsPostfix += \".min\";\n#endif      \n    JsPostfix += \".js?\" + jsVersion + \"_\" + buildNumber;\n    if (updateEveryAppStart)\n    {\n        Random rand = new Random();\n        JsPosfix += \"_\" + rand.Next();\n    }\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Another way I have not seen mentioned for js files would be to use the jQuery <code>$.getScript</code> in conjunction with <code>$.ajaxSetup</code> option <code>cache: false</code>.</p>\n\n<p>Instead of:</p>\n\n<pre><code>&lt;script src=\"scripts/app.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You can use:</p>\n\n<pre><code>$.ajaxSetup({\n  cache: false\n});\n\n$.getScript('scripts/app.js'); // GET scripts/app.js?_1391722802668\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Another suggestion for ASP.Net websites,</p>\n\n<ol>\n<li>Set different cache-control:max-age values, for different static files. </li>\n<li>For css/js files, the chances of modifying these files on server is high, so set a minimal cache-control:max-age value of  1 or 2 mins or something that meets your need. </li>\n<li>For images, set a far date as cache-control:max-age value, say 360 days. </li>\n<li>By doing so, when we make the first request, all static contents are downloaded to client machine with a 200-OK response.</li>\n<li>On subsequent requests and after two minutes, we see 304-Not Modified requests on css and js files which avoids us from css/js versioning.</li>\n<li>Image files will not be requested as they will be used from cached memory til the cache expires.</li>\n<li>By using below web.config configurations, we can achieve the above described behavior,\n\n    \n    \n      \n    \n    \n      \n        \n      \n    \n  \n  \n    \n      \n        \n      \n    \n  </li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using a modern browser, you could use a manifest file to inform the browsers which files need to be updated. This requires no headers, no versions in urls etc...</p>\n\n<p>For more details, see:\nSee: <a href=\"https://developer.mozilla.org/nl/docs/Web/HTML/Applicatie_cache_gebruiken#Introduction\" rel=\"nofollow\">https://developer.mozilla.org/nl/docs/Web/HTML/Applicatie_cache_gebruiken#Introduction</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For ASP.NET 4.5 and greater you can use <a href=\"http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification\" rel=\"nofollow\">script bundling</a>.</p>\n\n<blockquote>\n  <p>The request <code>http://localhost/MvcBM_time/bundles/AllMyScripts?v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81</code> is for the bundle AllMyScripts and contains a query string pair v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81. The query string v has a value token that is a unique identifier used for caching. As long as the bundle doesn't change, the ASP.NET application will request the AllMyScripts  bundle using this token. If any file in the bundle changes, the ASP.NET optimization framework will generate a new token, guaranteeing that browser requests for the bundle will get the latest bundle.</p>\n</blockquote>\n\n<p>There are other benefits to bundling including increased performance on first time page loads with minification.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Many answers here advocate adding a timestamp to the url.  Unless you are modifying your production files directly, the file's timestamp is not likely to reflect the time when a file was changed.  In most cases this will cause the url to change more frequently than the file itself.  This is why you should use a fast hash of the file's contents such has MD5 as levik and others have suggested.</p>\n\n<p>Keep in mind that the value should be calculated once at build or run, rather than each time the file is requested.</p>\n\n<p>As an example, here's a simple bash script that reads a list of filenames from stdin and writes a json file containing hashes to stdout:</p>\n\n<pre><code>#!/bin/bash\n# create a json map from filenames to md5s\n# run as hashes.sh &lt; inputfile.list &gt; outputfile.json\n\necho \"{\"\ndelim=\"\"\nwhile read l; do\n    echo \"$delim\\\"$l\\\": \\\"`md5 -q $l`\\\"\"\n    delim=\",\"\ndone\necho \"}\"\n</code></pre>\n\n<p>This file could then be loaded at server startup and referenced instead of reading the file system.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a pure JavaScript solution</p>\n\n<pre><code>(function(){\n\n    // Match this timestamp with the release of your code\n    var lastVersioning = Date.UTC(2014, 11, 20, 2, 15, 10);\n\n    var lastCacheDateTime = localStorage.getItem('lastCacheDatetime');\n\n    if(lastCacheDateTime){\n        if(lastVersioning &gt; lastCacheDateTime){\n            var reload = true;\n        }\n    }\n\n    localStorage.setItem('lastCacheDatetime', Date.now());\n\n    if(reload){\n        location.reload(true);\n    }\n\n})();\n</code></pre>\n\n<p>The above will look for the last time the user visited your site.  If the last visit was before you released new code, it uses <code>location.reload(true)</code> to force page refresh from server.  </p>\n\n<p>I usually have this as the very first script within the <code>&lt;head&gt;</code> so it's evaluated before any other content loads.  If a reload needs to occurs, it's hardly noticeable to the user.</p>\n\n<p>I am using local storage to store the last visit timestamp on the browser, but you can add cookies to the mix if you're looking to support older versions of IE.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have noticed that some browsers (in particular, Firefox and Opera) are very zealous in using cached copies of .css and .js files, even between browser sessions.  This leads to a problem when you update one of these files but the user's browser keeps on using the cached copy.</p>\n\n<p>The question is: what is the most elegant way of forcing the user's browser to reload the file when it has changed?</p>\n\n<p>Ideally the solution would not force the browser to reload the file on every visit to the page.  I will post my own solution as an answer, but I am curious if anyone has a better solution and I'll let your votes decide.</p>\n\n<p><strong>Update:</strong>  After allowing discussion here for a while, I have found <strong>John Millikin</strong> and <strong>da5id</strong>'s suggestion to be useful.  It turns out there is a term for this: auto-versioning.  I have posted a new answer below which is a combination of my original solution and John's suggestion.</p>\n\n<p>Another idea which was suggested by <strong>SCdF</strong> would be to append a bogus query string to the file.  (Some Python code to automatically use the timestamp as a bogus query string was submitted by <strong>pi</strong>.)  However, there is some discussion as to whether or not the browser would cache a file with a query string.  (Remember, we want the browser to cache the file and use it on future visits.  We only want it to fetch the file again when it has changed.)  Since it is not clear what happens with a bogus query string, I am not accepting that answer.</p>\n",
            "last_activity_date": 1421160372,
            "question_id": 118884,
            "score": 495,
            "tags": [
                "javascript",
                "css",
                "caching",
                "auto-versioning"
            ],
            "title": "What is an elegant way to force browsers to reload cached CSS/JS files?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The function is being defined inside a load handler and thus is in a different scope.  As @ellisbben notes in the comments, you can fix this by explicitly defining it on the <code>window</code> object.  Better, yet, change it to apply the handler to the object unobtrusively: <a href=\"http://jsfiddle.net/pUeue/\" rel=\"nofollow\">http://jsfiddle.net/pUeue/</a></p>\n\n<pre><code>$('input[type=button]').click( function() {\n   alert(\"test\");   \n});\n</code></pre>\n\n<p>Note applying the handler this way, instead of inline, keeps your HTML clean.  I'm using jQuery, but you could do it with or without a framework or using a different framework, if you like.</p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>If you do not specify the wrap setting it defaults to \"onLoad\". This results with all JavaScript being wrapped in a function run after result has been loaded. All variables are local to this function thus unavailable in the global scope.</p>\n\n<p>Change the wrapping setting to \"no wrap\" and it'll work:</p>\n\n<p><a href=\"http://jsfiddle.net/zalun/Yazpj/1/\">http://jsfiddle.net/zalun/Yazpj/1/</a></p>\n\n<p>I switched the framework to \"No Library\" as you don't use any.</p>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>There is another way, declare your function into a variable like this :</p>\n\n<pre><code>test = function(){\n  alert(\"test\");\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/R3tep/Yazpj/1406/\" rel=\"nofollow\">JSFiddle</a></p>\n\n<p>In this way <code>test</code> will be defined at run-time. <a href=\"http://stackoverflow.com/a/336868/3083093\">More information</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Change wrap setting in the Frameworks &amp; Extensions panel, to \"No wrap-in \"</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is no problem with your code.Just choose the extension onLoad() from right side. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I can't find out - what is the problem with such an example:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input type=\"button\" value=\"test\" onclick=\"test()\"&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>function test(){alert(\"test\");}\n</code></pre>\n\n<p>And when I click on button - nothing happened. Console says \"test not defined\"</p>\n\n<p>I've read jsfiddle documentation - there is written, that JS code is added to  and html code is added to . (so this JS code is earlier than html and should work)</p>\n\n<p><a href=\"http://jsfiddle.net/Yazpj/\">http://jsfiddle.net/Yazpj/</a></p>\n",
            "last_activity_date": 1419409318,
            "question_id": 5431351,
            "score": 58,
            "tags": [
                "javascript",
                "html",
                "jsfiddle"
            ],
            "title": "Simple example doesn&#39;t work on JSFiddle"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Have a look at the <a href=\"https://developer.mozilla.org/en/DOM/Selection\" rel=\"nofollow\">Selection object</a> (Gecko engine) and the <a href=\"http://www.webreference.com/js/column12/trmethods.html\" rel=\"nofollow\">TextRange object</a> (Trident engine.) I don't know about any JavaScript frameworks that have cross-browser support for this implemented, but I've never looked for it either, so it's possible that even jQuery has it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>According to the jQuery documentation of <code>select()</code>: </p>\n\n<blockquote>\n  <p>Trigger the select event of each matched element. This causes all of the functions that have been bound to that select event to be executed, and calls the browser's default select action on the matching element(s).</p>\n</blockquote>\n\n<p>There is your explanation why the jQuery <code>select()</code> won't work in this case.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This <a href=\"http://www.codingforums.com/archive/index.php/t-105808.html\">thread</a> contains really wonderful stuff. But I'm not able to do it right on this page using FF 3.5b99 + FireBug due to \"Security Error\".</p>\n\n<p>Yipee!! I was able to select whole right hand sidebar with this code hope it helps you:</p>\n\n<pre><code>    var r = document.createRange();\n    var w=document.getElementById(\"sidebar\");  \n    r.selectNodeContents(w);  \n    var sel=window.getSelection(); \n    sel.removeAllRanges(); \n    sel.addRange(r);\n</code></pre>\n\n<p>PS:- I was not able to use objects returned by jquery selectors like</p>\n\n<pre><code>   var w=$(\"div.welovestackoverflow\",$(\"div.sidebar\"));\n\n   //this throws **security exception**\n\n   r.selectNodeContents(w);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I have found a solution for this, thanks to <a href=\"http://www.codingforums.com/archive/index.php/t-105808.html\">this thread</a> found by TheVillageIdiot. I was able to modify the info given and mix it with a bit of jQuery to create a totally awesome function to select the text in any element, regardless of browser:</p>\n\n<pre><code>function SelectText(element) {\n    var text = document.getElementById(element);\n    if ($.browser.msie) {\n        var range = document.body.createTextRange();\n        range.moveToElementText(text);\n        range.select();\n    } else if ($.browser.mozilla || $.browser.opera) {\n        var selection = window.getSelection();\n        var range = document.createRange();\n        range.selectNodeContents(text);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    } else if ($.browser.safari) {\n        var selection = window.getSelection();\n        selection.setBaseAndExtent(text, 0, text, 1);\n    }\n}\n</code></pre>\n\n<p><strong>EDIT (9/28/11):</strong></p>\n\n<p>It's been a while since this answer was updated, and I've learned a lot as a developer since I asked and answered this question. It has also gotten a lot more attention than I thought it would. I want to provide a better solution than the original one I posted, one that doesn't rely on deprecated jQuery methods, or jQuery at all, for that matter. Could you use jQuery to help you out? Sure, but if you can achieve the same result without jQuery and using feature detection instead of browser sniffing, why wouldn't you? So below is my updated answer:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function SelectText(element) {\r\n    var doc = document\r\n        , text = doc.getElementById(element)\r\n        , range, selection\r\n    ;    \r\n    if (doc.body.createTextRange) {\r\n        range = document.body.createTextRange();\r\n        range.moveToElementText(text);\r\n        range.select();\r\n    } else if (window.getSelection) {\r\n        selection = window.getSelection();        \r\n        range = document.createRange();\r\n        range.selectNodeContents(text);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n    }\r\n}\r\n\r\ndocument.onclick = function(e) {    \r\n    if (e.target.className === 'click') {\r\n        SelectText('selectme');\r\n    }\r\n};</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"selectme\"&gt;&lt;p&gt;Some text goes here!&lt;/p&gt;&lt;p&gt;Moar text!&lt;/p&gt;&lt;/div&gt;\r\n&lt;p class=\"click\"&gt;Click me!&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Here is an <em>updated</em> <a href=\"http://jsfiddle.net/edelman/KcX6A/1507/\">working demo</a>. For those of you looking for a jQuery plugin, I made <a href=\"http://jsfiddle.net/edelman/KcX6A/1506/\">one of those too</a> (updated again).</p>\n\n<p><em>UPDATED (1/10/2012)</em> Per Tim Down's suggestion, <code>setBaseAndExtent()</code> is not needed for webkit.</p>\n\n<p><em>UPDATED (9/19/2014)</em> Embedded code snippet</p>\n",
                    "is_accepted": true,
                    "score": 328
                },
                {
                    "body": "<p>Jason's code can not be used for elements inside an iframe (as the scope differs from window and document). I fixed that problem and I modified it in order to be used as any other jQuery plugin (chainable):</p>\n\n<p>Example 1: Selection of all text inside &lt; code > tags with single click and add class \"selected\":</p>\n\n<pre><code>$(function() {\n    $(\"code\").click(function() {\n        $(this).selText().addClass(\"selected\");\n    });\n});\n</code></pre>\n\n<p>Example 2: On button click, select an element inside an Iframe:</p>\n\n<pre><code>$(function() {\n    $(\"button\").click(function() {\n        $(\"iframe\").contents().find(\"#selectme\").selText();\n    });\n});\n</code></pre>\n\n<p>Note: remember that the iframe source should reside in the same domain to prevent security errors.</p>\n\n<p>jQuery Plugin:</p>\n\n<pre><code>jQuery.fn.selText = function() {\n    var obj = this[0];\n    if ($.browser.msie) {\n        var range = obj.offsetParent.createTextRange();\n        range.moveToElementText(obj);\n        range.select();\n    } else if ($.browser.mozilla || $.browser.opera) {\n        var selection = obj.ownerDocument.defaultView.getSelection();\n        var range = obj.ownerDocument.createRange();\n        range.selectNodeContents(obj);\n        selection.removeAllRanges();\n        selection.addRange(range);\n    } else if ($.browser.safari) {\n        var selection = obj.ownerDocument.defaultView.getSelection();\n        selection.setBaseAndExtent(obj, 0, obj, 1);\n    }\n    return this;\n}\n</code></pre>\n\n<p>I tested it in IE8, Firefox, Opera, Safari, Chrome (current versions). I'm not sure if it works in older IE versions (sincerely I don't care).</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's a version with no browser sniffing and no reliance on jQuery:</p>\n\n<pre><code>function selectElementText(el, win) {\n    win = win || window;\n    var doc = win.document, sel, range;\n    if (win.getSelection &amp;&amp; doc.createRange) {\n        sel = win.getSelection();\n        range = doc.createRange();\n        range.selectNodeContents(el);\n        sel.removeAllRanges();\n        sel.addRange(range);\n    } else if (doc.body.createTextRange) {\n        range = doc.body.createTextRange();\n        range.moveToElementText(el);\n        range.select();\n    }\n}\n\nselectElementText(document.getElementById(\"someElement\"));\nselectElementText(elementInIframe, iframe.contentWindow);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>Tim's method works perfectly for my case - selecting the text in a div for both IE and FF after I replaced the following statement:</p>\n\n<pre><code>range.moveToElementText(text);\n</code></pre>\n\n<p>with the following:</p>\n\n<pre><code>range.moveToElementText(el);\n</code></pre>\n\n<p>The text in the div is selected by clicking it with the following jQuery function:</p>\n\n<pre><code>$(function () {\n    $(\"#divFoo\").click(function () {\n        selectElementText(document.getElementById(\"divFoo\"));\n    })\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>lepe - That works great for me thanks!\nI put your code in a plugin file, then used it in conjunction with an each statement so you can have multiple pre tags and multiple \"Select all\" links on one page and it picks out the correct pre to highlight:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"../js/jquery.selecttext.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n  $(document).ready(function() { \n        $(\".selectText\").each(function(indx) {\n                $(this).click(function() {                 \n                    $('pre').eq(indx).selText().addClass(\"selected\");\n                        return false;               \n                    });\n        });\n  });\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I was searching for the same thing, my solution was this:</p>\n\n<pre><code>$('#el-id').focus().select();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>here is another simple solution to get the selected the text in the form of string, you can use this string easily to append a div element child into your code:</p>\n\n<pre><code>          var text = '';\n          if(window.getSelection){\n            text = window.getSelection();\n          }else if(document.getSelection){\n            text = document.getSelection();\n          }else if(document.selection){\n            text = document.selection.createRange().text;\n          }\n          text=text.toString();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An Updated version that works in chrome:</p>\n\n<pre><code>function SelectText(element) {\n    var doc = document;\n    var text = doc.getElementById(element);    \n    if (doc.body.createTextRange) { // ms\n        var range = doc.body.createTextRange();\n        range.moveToElementText(text);\n        range.select();\n    } else if (window.getSelection) {\n        var selection = window.getSelection();\n        var range = doc.createRange();\n        range.selectNodeContents(text);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n    }\n}\n\n$(function() {\n    $('p').click(function() {\n        SelectText(\"selectme\");\n\n    });\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/KcX6A/326/\" rel=\"nofollow\">http://jsfiddle.net/KcX6A/326/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I liked lepe's answer except for a few things:</p>\n\n<ol>\n<li>Browser-sniffing, jQuery or no isn't optimal</li>\n<li>DRY</li>\n<li>Doesn't work in IE8 if obj's parent doesn't support <strong>createTextRange</strong></li>\n<li>Chrome's ability to use <strong>setBaseAndExtent</strong> should be leveraged (IMO)</li>\n<li>Will not select text spanning across multiple DOM elements (elements within the \"selected\" element).  In other words if you call <strong>selText</strong> on a div containing multiple span elements, it will <em>not</em> select the text of each of those elements.  That was a deal-breaker for me, YMMV.</li>\n</ol>\n\n<p>Here's what I came up with, with a nod to lepe's answer for inspiration. I'm sure I'll be ridiculed as this is perhaps a bit heavy-handed (and actually could be moreso but I digress). But it works and avoids browser-sniffing and <em>that's the point</em>.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>selectText:function(){\n\n    var range,\n        selection,\n        obj = this[0],\n        type = {\n            func:'function',\n            obj:'object'\n        },\n        // Convenience\n        is = function(type, o){\n            return typeof o === type;\n        };\n\n    if(is(type.obj, obj.ownerDocument)\n        &amp;&amp; is(type.obj, obj.ownerDocument.defaultView)\n        &amp;&amp; is(type.func, obj.ownerDocument.defaultView.getSelection)){\n\n        selection = obj.ownerDocument.defaultView.getSelection();\n\n        if(is(type.func, selection.setBaseAndExtent)){\n            // Chrome, Safari - nice and easy\n            selection.setBaseAndExtent(obj, 0, obj, $(obj).contents().size());\n        }\n        else if(is(type.func, obj.ownerDocument.createRange)){\n\n            range = obj.ownerDocument.createRange();\n\n            if(is(type.func, range.selectNodeContents)\n                &amp;&amp; is(type.func, selection.removeAllRanges)\n                &amp;&amp; is(type.func, selection.addRange)){\n                // Mozilla\n                range.selectNodeContents(obj);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n    }\n    else if(is(type.obj, document.body) &amp;&amp; is(type.obj, document.body.createTextRange)) {\n\n        range = document.body.createTextRange();\n\n        if(is(type.obj, range.moveToElementText) &amp;&amp; is(type.obj, range.select)){\n            // IE most likely\n            range.moveToElementText(obj);\n            range.select();\n        }\n    }\n\n    // Chainable\n    return this;\n}\n</code></pre>\n\n<p>That's it.  Some of what you see is the for readability and/or convenience.  Tested on Mac in latest versions of Opera, Safari, Chrome, Firefox and IE.  Also tested in IE8.  Also I typically only declare variables if/when needed inside code blocks but jslint suggested they all be declared up top.  Ok jslint.</p>\n\n<p><strong>Edit</strong>\nI forgot to include how to tie this in to the op's code:</p>\n\n<pre><code>function SelectText(element) {\n    $(\"#\" + element).selectText();\n}\n</code></pre>\n\n<p>Cheers</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Added <code>jQuery.browser.webkit</code> to the \"else if\" for Chrome. Could not get this working in Chrome 23. </p>\n\n<p>Made this script below for selecting the content in a <code>&lt;pre&gt;</code> tag that has the <code>class=\"code\"</code>.</p>\n\n<pre><code>jQuery( document ).ready(function() {\n    jQuery('pre.code').attr('title', 'Click to select all');\n    jQuery( '#divFoo' ).click( function() {\n        var refNode = jQuery( this )[0];\n        if ( jQuery.browser.msie ) {\n            var range = document.body.createTextRange();\n            range.moveToElementText( refNode );\n            range.select();\n        } else if ( jQuery.browser.mozilla || jQuery.browser.opera  || jQuery.browser.webkit ) {\n            var selection = refNode.ownerDocument.defaultView.getSelection();\n            console.log(selection);\n            var range = refNode.ownerDocument.createRange();\n            range.selectNodeContents( refNode );\n            selection.removeAllRanges();\n            selection.addRange( range );\n        } else if ( jQuery.browser.safari ) {\n            var selection = refNode.ownerDocument.defaultView.getSelection();\n            selection.setBaseAndExtent( refNode, 0, refNode, 1 );\n        }\n    } );\n} );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to have users click a link, then it selects the HTML text in another element (<em>not</em> an input).</p>\n\n<p>By \"select\" I mean the same way you would select text by dragging your mouse over it. This has been a bear to research because everyone talks about \"select\" or \"highlight\" in other terms.</p>\n\n<p>Is this possible? My code so far:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a href=\"javascript:\" onclick=\"SelectText('xhtml-code')\"&gt;Select Code&lt;/a&gt;\n&lt;code id=\"xhtml-code\"&gt;Some Code here &lt;/code&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>function SelectText(element) {\n    $(\"#\" + element).select();\n}\n</code></pre>\n\n<p>Am I missing something blatantly obvious?</p>\n",
            "last_activity_date": 1417199501,
            "question_id": 985272,
            "score": 210,
            "tags": [
                "javascript",
                "jquery",
                "select",
                "highlight"
            ],
            "title": "Selecting text in an element (akin to highlighting with your mouse)"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>you can use the window object to get at it . </p>\n\n<p><code>window['myVar']</code></p>\n\n<p>Window has a reference to all global variables and global functions you are using. </p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p><code>eval</code> is one option.</p>\n\n<pre><code>var a = 1;\nvar name = 'a';\n\ndocument.write(eval(name)); // 1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Since ECMA-/Javascript is all about <code>Objects</code> and <code>Contexts</code> (which, are also somekind of Object), every variable is stored in a such called <strong>Variable-</strong> (or in case of a Function, <strong>Activation Object</strong>).</p>\n\n<p>So if you create variables like this:</p>\n\n<pre><code>var a = 1,\n    b = 2,\n    c = 3;\n</code></pre>\n\n<p>In the <strong>Global scope</strong> (= NO function context), you implicitly write those variables into the <strong>Global object</strong> (= <code>window</code> in a browser).</p>\n\n<p>Those can get accessed by using the \"dot\" or \"bracket\" notation:</p>\n\n<pre><code>var name = window.a;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var name = window['a'];\n</code></pre>\n\n<p>This only works for the global object in this particular instance, because the <strong>Variable Object</strong> of the <strong>Global Object</strong> is the <code>window</code> object itself. Within the Context of a function, you don't have direct access to the <strong>Activation Object</strong>. For instance:</p>\n\n<pre><code>function foobar() {\n   this.a = 1;\n   this.b = 2;\n\n   var name = window['a']; // === undefined\n   alert(name);\n   name = this['a']; // === 1\n   alert(name);\n}\n\nnew foobar();\n</code></pre>\n\n<p><code>new</code> creates a new instance of a self-defined object (context). Without <code>new</code> the scope of the function would be also <code>global</code> (=window). This example would alert <code>undefined</code> and <code>1</code> respectively. If we would replace <code>this.a = 1; this.b = 2</code> with:</p>\n\n<pre><code>var a = 1,\n    b = 2;\n</code></pre>\n\n<p>Both alert outputs would be undefined. In that scenario, the variables <code>a</code> and <code>b</code> would get stored in the Activation Object from <code>foobar</code>, which we cannot access (of course we could access those directly by calling <code>a</code> and <code>b</code>).</p>\n",
                    "is_accepted": true,
                    "score": 132
                },
                {
                    "body": "<pre><code>a = 'varname';\nstr = a+' = '+'123';\neval(str)\nalert(varname);\n</code></pre>\n\n<p>Try this...</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>what they mean is no, you can't.\nthere is no way to get it done.\nso it was possible you could do something like this</p>\n\n<pre><code>function create(obj, const){\n// where obj is an object and const is a variable name\nfunction const () {}\n\nconst.prototype.myProperty = property_value;\n// .. more prototype\n\nreturn new const();\n\n}\n</code></pre>\n\n<p>having a create function just like the one implemented in ECMAScript 5.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>eval() did not work in my tests. But adding new JavaScript code to the DOM tree is possible. So here is a function that adds a new variable:</p>\n\n<pre><code>function createVariable(varName,varContent)\n{\n  var scriptStr = \"var \"+varName+\"= \\\"\"+varContent+\"\\\"\"\n\n  var node_scriptCode = document.createTextNode( scriptStr )\n  var node_script = document.createElement(\"script\");\n  node_script.type = \"text/javascript\"\n  node_script.appendChild(node_scriptCode);\n\n  var node_head = document.getElementById(\"head\")\n  node_head.appendChild(node_script);\n}\n\ncreateVariable(\"dynamicVar\", \"some content\")\nconsole.log(dynamicVar)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In Javascript you can use the fact that all properties are key value pairs. jAndy already mentioned this but I don't think his answer show how it can be exploited.</p>\n\n<p>Usually you are not trying to create a variable to hold a variable name but are trying to generate variable names and then use them. PHP does it with <code>$$var</code> notation but Javascript doesn't need to because property keys are interchangeable with array keys.</p>\n\n<pre><code>var id = \"abc\";\nvar mine = {};\nmine[id] = 123;\nconsole.log(mine.abc);\n</code></pre>\n\n<p>gives 123. Usually you want to construct the variable which is why there is the indirection so you can also do it the other way around.</p>\n\n<pre><code>var mine = {};\nmine.abc = 123;\nconsole.log(mine[\"a\"+\"bc\"]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just don't know what a bad answer gets so many votes. It's quite easy answer but you make it complex.</p>\n\n<pre><code>// If you want to get article_count\n// var article_count = 1000;\nvar type = 'article';\nthis[type+'_count'] = 1000;  // in a function we use \"this\";\nalert(article_count);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This is an example : </p>\n\n<pre><code>for(var i=0; i&lt;=3; i++) {\n    window['p'+i] = \"hello \" + i;\n}\n\nalert(p0); // hello 0\nalert(p1); // hello 1\nalert(p2); // hello 2\nalert(p3); // hello 3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you don't want to use a global object like window or global (node), you can try something like this:</p>\n\n<pre><code>var obj = {};\nobj['whatever'] = 'There\\'s no need to store even more stuff in a global object.';\n\nconsole.log(obj['whatever']);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In PHP you can do amazing/horrendous things like this:</p>\n\n<pre><code>$a = 1;\n$b = 2;\n$c = 3;\n$name = 'a';\necho $$name;\n// prints 1\n</code></pre>\n\n<p>Is there any way of doing something like this with Javascript?</p>\n\n<p>E.g. if I have a <code>var name = 'the name of the variable';</code> can I get a reference to the variable with name <code>name</code>?</p>\n",
            "last_activity_date": 1423645080,
            "question_id": 5117127,
            "score": 99,
            "tags": [
                "javascript",
                "dynamic-variables"
            ],
            "title": "Use dynamic variable names in JavaScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>They're virtually the same. </p>\n\n<p>The first wraps parentheses around a function to make it a valid expression and invokes it. The result of the expression is undefined.</p>\n\n<p>The second executes the function and the parentheses around the automatic invocation make it a valid expression. It also evaluates to undefined.</p>\n\n<p>I don't think there's a \"right\" way of doing it, since the result of the expression is the same. </p>\n\n<pre><code>&gt; function(){}()\nSyntaxError: Unexpected token (\n&gt; (function(){})()\nundefined\n&gt; (function(){return 'foo'})()\n\"foo\"\n&gt; (function(){ return 'foo'}())\n\"foo\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>In that case it doesn't matter. You are invoking an expression that resolves to a function in the first definition, and defining and immediately invoking a function in the second example. They're similar because the function expression in the first example is just the function definition.</p>\n\n<p>There are other more obviously useful cases for invoking expressions that resolve to functions: </p>\n\n<pre><code>(foo || bar)()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>There isn't any difference beyond the syntax.</p>\n\n<p>Regarding your concerns about the second method of doing it:</p>\n\n<p>Consider:</p>\n\n<p><code>(function namedfunc () { ... }())</code></p>\n\n<p><code>namedfunc</code> will still not be in the global scope even though you provided the name. The same goes for anonymous functions. The only way to get it in that scope would be to assign it to a variable inside the parens.</p>\n\n<pre><code>((namedfunc = function namedfunc () { ... })())\n</code></pre>\n\n<p>The outer parens are unnecessary:</p>\n\n<pre><code>(namedfunc = function namedfunc () { ... })()\n</code></pre>\n\n<p>But you didn't want that global declaration anyways, did you?</p>\n\n<p>So it it boils down to:</p>\n\n<pre><code>(function namedfunc () { ... })()\n</code></pre>\n\n<p>And you can reduce it even further: the name is unnecessary since it will never be used (unless your function is recursive.. and even then you could use <code>arguments.callee</code>)</p>\n\n<pre><code>(function () { ... })()\n</code></pre>\n\n<p>That's the way I think about it (may be incorrect, I haven't read the ECMAScript specification yet). Hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I was recently comparing the current version of <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\">json2.js</a> with the version I had in my project and noticed a difference in how the function expression was created and self executed.</p>\n\n<p>The code used to wrap an anonymous function in parenthesis and then execute it,</p>\n\n<pre><code>(function () {\n  // code here\n})();\n</code></pre>\n\n<p>but now it wraps the auto-executed function in parenthesis.</p>\n\n<pre><code>(function () {\n  // code here\n}());\n</code></pre>\n\n<p>There is a comment by CMS in the accepted answer of <a href=\"http://stackoverflow.com/questions/1634268/explain-javascripts-encapsulated-anonymous-function-syntax\">Explain JavaScript\u2019s encapsulated anonymous function syntax</a> that \u201cboth: <code>(function(){})();</code> and <code>(function(){}());</code> are valid.\u201d</p>\n\n<p>I was wondering what the difference is?  Does the former take up memory by leaving around a global, anonymous function?  Where should the parenthesis be located?</p>\n",
            "last_activity_date": 1421844445,
            "question_id": 3384504,
            "score": 40,
            "tags": [
                "javascript",
                "syntax",
                "anonymous-function",
                "iife"
            ],
            "title": "Location of parenthesis for auto-executing anonymous JavaScript functions?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>While you can simply use it to prefix your identifiers, it's supposed to be used for generated code, such as replacement tokens in a template, for example.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In the 1st, 2nd, and <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\">3rd Edition of ECMAScript</a>, using $-prefixed variable names was explicitly discouraged by the spec except in the context of autogenerated code:</p>\n\n<blockquote>\n  <p>The dollar sign (<code>$</code>) and the underscore (<code>_</code>) are permitted anywhere in an identifier. The dollar sign is intended for use only in mechanically generated code.</p>\n</blockquote>\n\n<p>However, in the next version (the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262%205th%20edition%20December%202009.pdf\">5th Edition</a>, which is current), this restriction was dropped, and the above passage replaced with</p>\n\n<blockquote>\n  <p>The dollar sign (<code>$</code>) and the underscore (<code>_</code>) are permitted anywhere in an <em>IdentifierName</em>.</p>\n</blockquote>\n\n<p>As such, the $ sign may now be used freely in variable names. Certain frameworks and libraries have their own conventions on the meaning of the symbol, noted in other answers here.</p>\n",
                    "is_accepted": false,
                    "score": 111
                },
                {
                    "body": "<p>As others have mentioned the dollar sign is intended to be used by mechanically generated code.  However, that convention has been broken by some wildly popular JavaScript libraries.  JQuery, Prototype and MS AJAX (AKA Atlas) all use this character in their identifiers (or as an entire identifier).</p>\n\n<p>In short you can use the <code>$</code> whenever you want.  (The interpreter won't complain.)  The question is when do you <i>want</i> to use it?</p>\n\n<p>I personally do not use it, but I think its use is valid.  I think MS AJAX uses it to signify that a function is an alias for some more verbose call.</p>\n\n<p>For example:</p>\n\n<pre><code>var $get = function(id) { return document.getElementById(id); }\n</code></pre>\n\n<p>That seems like a reasonable convention.</p>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>A very common use in jQuery is to distinguish jQuery objects stored in variables from other variables.  For example, I would define</p>\n\n<pre><code>var $email = $(\"#email\"); // refers to the jQuery object representation of the dom object\nvar email_field = $(\"#email\").get(0); // refers to the dom object itself\n</code></pre>\n\n<p>I find this to be very helpful in writing jQuery code and makes it easy to see jQuery objects which have a different set of properties.</p>\n",
                    "is_accepted": true,
                    "score": 734
                },
                {
                    "body": "<p>The $ character has no special meaning to the JavaScript engine.  It's just another valid character in a variable name like a-z, A-Z, _, 0-9, etc...</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Stevo is right, the meaning and usage of the dollar script sign (in Javascript and the jQuery platform, but not in PHP) is completely semantic. $ is a character that can be used as part of an identifier name. In addition, the dollar sign is perhaps not the most \"weird\" thing you can encounter in Javascript. Here are some examples of valid identifier names:</p>\n\n<pre><code>var _       = function() { alert(\"hello from _\"); }\nvar \\u0024  = function() { alert(\"hello from $ defined as u0024\"); }\nvar \u00d8       = function() { alert(\"hello from \u00d8\"); }\nvar $$$$$   = function() { alert(\"hello from $$$$$\"); }\n</code></pre>\n\n<p>All of the examples above will work.</p>\n\n<p>Try them.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>The reason I sometimes use php name-conventions with javascript variables:\nWhen doing input validation, I want to run the exact same algorithms both client-side,\nand server-side.  I really want the two side of code to look as similar as possible, to simplify maintenance.  Using dollar signs in variable names makes this easier.</p>\n\n<p>(Also, some judicious helper functions help make the code look similar, e.g. wrapping input-value-lookups, non-OO versions of strlen,substr, etc.  It still requires some manual tweaking though.)</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>If you see the dollar sign ($) or double dollar sign ($$), and are curious as to what this means in the Prototype framework, here is your answer:</p>\n\n<pre><code>$$('div');\n// -&gt; all DIVs in the document.  Same as document.getElementsByTagName('div')!\n\n$$('#contents');\n// -&gt; same as $('contents'), only it returns an array anyway (even though IDs must be unique within a document).\n\n$$('li.faux');\n// -&gt; all LI elements with class 'faux'\n</code></pre>\n\n<p>Source:<br>\n<a href=\"http://www.prototypejs.org/api/utility/dollar-dollar\" rel=\"nofollow\">http://www.prototypejs.org/api/utility/dollar-dollar</a></p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>I use var <strong>$x</strong> to tell between apples and oranges (to know that I am dealing with a variable).\n<br/>\nIt's easy to see and to identify right away.</p>\n\n<p><br/><br/>\nBesides, PHP variables are also <strong>$x</strong>, so it's much easier to go back and forth</p>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p><a href=\"http://angularjs.org\" rel=\"nofollow\" title=\"AngularJS\">Angular</a> uses is for properties generated by the framework. Guess, they are going by the (now defunct) hint provided by the ECMA-262 3.0.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In the context of AngularJS, <code>$</code> is used only for variables in the framework's code. Users of the framework are instructed not to use it in their own variable names:</p>\n\n<blockquote>\n  <h2>Angular Namespaces <code>$</code> and <code>$$</code></h2>\n  \n  <p>To prevent accidental name collisions with your code, Angular prefixes names of public objects with <code>$</code> and names of private objects with <code>$$</code>. Please do not use the <code>$</code> or <code>$$</code> prefix in your code.</p>\n</blockquote>\n\n<p>Source: <a href=\"https://docs.angularjs.org/api\">https://docs.angularjs.org/api</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>$ is used to DISTINGUISH between common variables and jquery variables in case of normal variables.\nlet you place a order in FLIPKART then if the order is a variable showing you the string output then it is named simple as \"order\" but if we click on place order then an object is returned that object will be denoted by $ as \"$order\" so that the programmer may able to snip out the javascript variables and jquery variables in the entire code.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Since <code>_</code> at the beginning of a variable name is often used to indicate a private variable (or at least one intended to remain private), I find <code>$</code> convenient for adding in front of my own brief aliases to generic code libraries.</p>\n\n<p>For example, when using jQuery, I prefer to use the variable <code>$J</code> (instead of just <code>$</code>) and use <code>$P</code> when using php.js, etc.</p>\n\n<p>The prefix makes it visually distinct from other variables such as my own static variables, cluing me into the fact that the code is part of some library or other, and is less likely to conflict or confuse others once they know the convention.</p>\n\n<p>It also doesn't clutter the code (or require extra typing) as does a fully specified name repeated for each library call.</p>\n\n<p>I like to think of it as being similar to what modifier keys do for expanding the possibilities of single keys.</p>\n\n<p>But this is just my own convention.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>${varname}</code> is just a naming convention jQuery developers use to distinguish variables that are holding jQuery elements.</p>\n\n<p>Plain <code>{varname}</code> is used to store general stuffs like texts and strings.\n<code>${varname}</code> holds elements returned from jQuery.</p>\n\n<p>You can use plain <code>{varname}</code> to store jQuery elements as well, but as I said in the beginning this distinguishes it from the plain variables and makes it much easier to understand (imagine confusing it for a plain variable and searching all over to understand what it holds). </p>\n\n<p>For example :</p>\n\n<pre><code>var $blah = $(this).parents('.blahblah');\n</code></pre>\n\n<p>Here, blah is storing a returned jQuery element.</p>\n\n<p>So, when someone else see the <code>$blah</code> in the code, they'll understand it's not just a string or a number, it's a jQuery element.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I quite often see JavaScript with variables that start with a dollar sign. When/why would you choose to prefix a variable in this way?</p>\n\n<p>(I'm not asking about <code>$('p.foo')</code> syntax that you see in jQuery and others, but normal variables like <code>$name</code> and <code>$order</code>)</p>\n",
            "last_activity_date": 1423561564,
            "question_id": 205853,
            "score": 468,
            "tags": [
                "javascript",
                "naming-conventions"
            ],
            "title": "Why would a JavaScript variable start with a dollar sign?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Instead of using the <code>/regex/g</code> syntax, you can construct a new <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions\">RegExp</a> object:</p>\n\n<pre><code>var re = new RegExp(\"regex\",\"g\");\n</code></pre>\n\n<p>You can dynamically create regex objects this way. Then you will do:</p>\n\n<pre><code>\"mystring\".replace(re, \"newstring\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 562
                },
                {
                    "body": "<pre><code>this.replace( new RegExp( replaceThis, 'g' ), withThis );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This:</p>\n\n<pre><code>var txt=new RegExp(pattern,attributes);\n</code></pre>\n\n<p>is equivalent to this:</p>\n\n<pre><code>var txt=/pattern/attributes;\n</code></pre>\n\n<p>See <a href=\"http://www.w3schools.com/jsref/jsref_obj_regexp.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_obj_regexp.asp</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As Eric Wendelin mentioned, you can do something like this:</p>\n\n<pre><code>str1 = \"pattern\"\nvar re = new RegExp(str1, \"g\");\n\"pattern matching .\".replace(re, \"regex\");\n</code></pre>\n\n<p>This yields <code>\"regex matching .\"</code>. However, it will fail if str1 is <code>\".\"</code>. You'd expect the result to be <code>\"pattern matching regex\"</code>, replacing the period with <code>\"regex\"</code>, but it'll turn out to be...</p>\n\n<pre><code>regexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregexregex\n</code></pre>\n\n<p>This is because, although <code>\".\"</code> is a String, in the RegExp constructor it's still interpreted as a regular expression, meaning any non-line-break character, meaning every character in the string. For this purpose, the following function may be useful:</p>\n\n<pre><code> RegExp.quote = function(str) {\n     return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, \"\\\\$1\");\n };\n</code></pre>\n\n<p>Then you can do:</p>\n\n<pre><code>str1 = \".\"\nvar re = new RegExp(RegExp.quote(str1), \"g\");\n\"pattern matching .\".replace(re, \"regex\");\n</code></pre>\n\n<p>yielding <code>\"pattern matching regex\"</code>.</p>\n",
                    "is_accepted": false,
                    "score": 70
                },
                {
                    "body": "<p>While you can make dynamically-created RegExp's (as per the other responses to this question), I'll echo my comment from a <a href=\"http://stackoverflow.com/questions/487509/passing-variable-to-a-regexp-in-javascript/488133#488133\">similar post</a>: The functional form of <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/String/Replace\" rel=\"nofollow\">String.replace()</a> is extremely useful and in many cases reduces the need for dynamically-created RegExp objects. (which are kind of a pain 'cause you have to express the input to the RegExp constructor as a string rather than use the slashes /[A-Z]+/ regexp literal format)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>\"ABABAB\".replace(/B/g, \"A\");</p>\n</blockquote>\n\n<p>As always: don't use regex unless you have to. For a simple string replace, the idiom is:</p>\n\n<pre><code>'ABABAB'.split('B').join('A')\n</code></pre>\n\n<p>Then you don't have to worry about the quoting issues mentioned in Gracenotes's answer.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<pre><code>String.prototype.replaceAll = function (replaceThis, withThis) {\n   var re = new RegExp(replaceThis,\"g\"); \n   return this.replace(re, withThis);\n};\nvar aa = \"abab54..aba\".replaceAll(\"\\\\.\", \"v\");\n</code></pre>\n\n<p>Test with this <a href=\"http://www.pagecolumn.com/tool/regtest.htm\">tool</a> </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For anyone looking to use variable with the <strong>match</strong> method, this worked for me</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var baz = \"foo\";\n\nvar filter = new RegExp(baz + \"d\");\n\n\"food fight\".match(filter)[0]; // food\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here's another replaceAll implementation:</p>\n\n<pre><code>    String.prototype.replaceAll = function (stringToFind, stringToReplace) {\n        if ( stringToFind == stringToReplace) return this;\n        var temp = this;\n        var index = temp.indexOf(stringToFind);\n        while (index != -1) {\n            temp = temp.replace(stringToFind, stringToReplace);\n            index = temp.indexOf(stringToFind);\n        }\n        return temp;\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>To satisfy my need to insert a variable/alias/function into a Regular Expression, this is what I came up with:</p>\n\n<pre><code>oldre = /xx\\(\"\"\\)/;\nfunction newre(e){\n    return RegExp(e.toString().replace(/\\//g,\"\").replace(/xx/g, yy), \"g\")\n};\n\nString.prototype.replaceAll = this.replace(newre(oldre), \"withThis\");\n</code></pre>\n\n<p>where 'oldre' is the original regexp that I want to insert a variable,\n'xx' is the placeholder for that variable/alias/function,\nand 'yy' is the actual variable name, alias, or function.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use this if $1 not work with you</p>\n\n<pre><code>var pattern = new RegExp(\"amman\",\"i\");\n\"abc Amman efg\".replace(pattern,\"&lt;b&gt;\"+\"abc Amman efg\".match(pattern)[0]+\"&lt;/b&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can always use <code>indexOf</code> repeatedly:</p>\n\n<pre><code>String.prototype.replaceAll = function(substring, replacement) {\n    var result = '';\n    var lastIndex = 0;\n\n    while(true) {\n        var index = this.indexOf(substring, lastIndex);\n        if(index === -1) break;\n        result += this.substring(lastIndex, index) + replacement;\n        lastIndex = index + substring.length;\n    }\n\n    return result + this.substring(lastIndex);\n};\n</code></pre>\n\n<p>This doesn\u2019t go into an infinite loop when the replacement contains the match.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>String.prototype.replaceAll = function(a, b) {\n    return this.replace(new RegExp(a.replace(/([.?*+^$[\\]\\\\(){}|-])/ig, \"\\\\$1\"), 'ig'), b)\n}\n</code></pre>\n\n<p>Test it like:</p>\n\n<pre><code>var whatever = 'Some [b]random[/b] text in a [b]sentence.[/b]'\n\nconsole.log(whatever.replaceAll(\"[\", \"&lt;\").replaceAll(\"]\", \"&gt;\"))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You want to build the regular expression dynamically and for this the proper solutuion is to use the <code>new RegExp(string)</code> constructor. In order for constructor to treat special characters <em>literally</em>, you must escape them. There is a built-in function in <a href=\"http://api.jqueryui.com/autocomplete/\" rel=\"nofollow\">jQuery UI autocomplete widget</a> called <code>$.ui.autocomplete.escapeRegex</code>:</p>\n\n<blockquote>\n  <p>[...] you can make use of the built-in\n  <code>$.ui.autocomplete.escapeRegex</code> function. It'll take a single string\n  argument and escape all regex characters, making the result safe to\n  pass to <code>new RegExp()</code>.</p>\n</blockquote>\n\n<p>If you are using jQuery UI you can use that function, or copy its definition <a href=\"https://github.com/jquery/jquery-ui/blob/master/ui/autocomplete.js\" rel=\"nofollow\">from the source</a>:</p>\n\n<pre><code>function escapeRegex(value) {\n    return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&amp;\");\n}\n</code></pre>\n\n<p>And use it like this:</p>\n\n<pre><code>\"[z-a][z-a][z-a]\".replace(new RegExp(escapeRegex(\"[z-a]\"), \"g\"), \"[a-z]\");\n//            escapeRegex(\"[z-a]\")       -&gt; \"\\[z\\-a\\]\"\n// new RegExp(escapeRegex(\"[z-a]\"), \"g\") -&gt; /\\[z\\-a\\]/g\n// end result                            -&gt; \"[a-z][a-z][a-z]\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>And the coffeescript version of Steven Penny's answer, since this is #2 google result....even if coffee isn't really java...;)</p>\n\n<pre><code>baz = \"foo\"\nfilter = new RegExp(baz + \"d\")\n\"food fight\".match(filter)[0] // food\n</code></pre>\n\n<p>and in my particular case</p>\n\n<pre><code>robot.name=hubot\nfilter = new RegExp(robot.name)\nif msg.match.input.match(filter)\n  console.log \"True!\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I would like to create a String.replaceAll() method in JavaScript and I'm thinking that using a RegEx would be most terse way to do it.  However, I can't figure out how to pass a variable in to a RegEx.  I can do this already which will replace all the instances of \"B\" with \"A\".</p>\n\n<pre><code>\"ABABAB\".replace(/B/g, \"A\");\n</code></pre>\n\n<p>But I want to do something like this:</p>\n\n<pre><code>String.prototype.replaceAll = function(replaceThis, withThis) {\n    this.replace(/replaceThis/g, withThis);\n};\n</code></pre>\n\n<p>But obviously this will only replace the text \"replaceThis\"...so how do I pass this variable in to my RegEx string?</p>\n",
            "last_activity_date": 1416958278,
            "question_id": 494035,
            "score": 383,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "How do you pass a variable to a Regular Expression JavaScript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You can achieve that using HTA and <a href=\"http://en.wikipedia.org/wiki/VBScript\" rel=\"nofollow\">VBScript</a>. Just call an external tool to do the screenshotting. I forgot what the name is, but on Windows&nbsp;Vista there is a tool to do screenshots. You don't even need an extra install for it.</p>\n\n<p>As for as automatic - it totally depends on the tool you use. If it has an API, I am sure you can trigger the screenshot and saving process through a couple of Visual Basic calls without the user knowing that you did what you did.</p>\n\n<p>Since you mentioned HTA, I am assuming you are on Windows and (probably) know your environment (e.g. OS and version) very well.  </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>We had a similar requirement for reporting bugs. Since it was for an intranet scenario, we were able to use browser addons (like <a href=\"https://addons.mozilla.org/en-US/firefox/addon/5648\" rel=\"nofollow\">Fireshot</a> for Firefox and <a href=\"http://www.softpedia.com/get/Tweak/Browser-Tweak/IE-Screenshot-Pro.shtml\" rel=\"nofollow\">IE Screenshot</a> for Internet&nbsp;Explorer).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I have done this for an HTA by using an ActiveX control. It was pretty easy to build the control in VB6 to take the screenshot. I had to use the keybd_event API call because SendKeys can't do PrintScreen. Here's the code for that:</p>\n\n<pre><code>Declare Sub keybd_event Lib \"user32\" _\n(ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)\n\nPublic Const CaptWindow = 2\n\nPublic Sub ScreenGrab()\n   keybd_event &amp;H12, 0, 0, 0\n   keybd_event &amp;H2C, CaptWindow, 0, 0\n   keybd_event &amp;H2C, CaptWindow, &amp;H2, 0\n   keybd_event &amp;H12, 0, &amp;H2, 0\nEnd Sub\n</code></pre>\n\n<p>That only gets you as far as getting the window to the clipboard.</p>\n\n<p>Another option, if the window you want a screenshot of is an HTA would be to just use an XMLHTTPRequest to send the DOM nodes to the server, then create the screenshots server-side.</p>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>This might not be the ideal solution for you, but it might still be worth mentioning. </p>\n\n<p><em><a href=\"http://snapsie.sourceforge.net/\" rel=\"nofollow\">Snapsie</a> is an open source, <a href=\"http://en.wikipedia.org/wiki/ActiveX\" rel=\"nofollow\">ActiveX</a> object that enables Internet Explorer screenshots to be captured and saved.</em> Once the DLL file is registered on the client, you should be able to capture the screenshot and upload the file to the server withing JavaScript. Drawbacks: it needs to register the DLL file at the client and works only with Internet&nbsp;Explorer.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The <a href=\"http://www.snapengage.com/\" rel=\"nofollow\">SnapEngage</a> uses a <a href=\"http://en.wikipedia.org/wiki/Java_applet\" rel=\"nofollow\">Java applet</a> (1.5+) to make a browser screenshot. AFAIK, <code>java.awt.Robot</code> should do the job - the user has just to permit the applet to do it (once).</p>\n\n<p>And I have just found a post about it: </p>\n\n<ul>\n<li>Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/2046812\">JavaScript code to take a screenshot of a website without using ActiveX</a></em></li>\n<li>Blog post <em><a href=\"http://www.barklund.org/blog/2009/10/14/how-snapabug-works/\" rel=\"nofollow\">How SnapABug works \u2013 and what they should do</a></em></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Pounder's if this is possible to do by setting the whole body elements into a canvase then using canvas2image ?</p>\n\n<p><a href=\"http://www.nihilogic.dk/labs/canvas2image/\">http://www.nihilogic.dk/labs/canvas2image/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>A possible way to do this, if running on windows and have .NET installed you can do:</p>\n\n<pre><code>public Bitmap GenerateScreenshot(string url)\n{\n    // This method gets a screenshot of the webpage\n    // rendered at its full size (height and width)\n    return GenerateScreenshot(url, -1, -1);\n}\n\npublic Bitmap GenerateScreenshot(string url, int width, int height)\n{\n    // Load the webpage into a WebBrowser control\n    WebBrowser wb = new WebBrowser();\n    wb.ScrollBarsEnabled = false;\n    wb.ScriptErrorsSuppressed = true;\n    wb.Navigate(url);\n    while (wb.ReadyState != WebBrowserReadyState.Complete) { Application.DoEvents(); }\n\n\n    // Set the size of the WebBrowser control\n    wb.Width = width;\n    wb.Height = height;\n\n    if (width == -1)\n    {\n        // Take Screenshot of the web pages full width\n        wb.Width = wb.Document.Body.ScrollRectangle.Width;\n    }\n\n    if (height == -1)\n    {\n        // Take Screenshot of the web pages full height\n        wb.Height = wb.Document.Body.ScrollRectangle.Height;\n    }\n\n    // Get a Bitmap representation of the webpage as it's rendered in the WebBrowser control\n    Bitmap bitmap = new Bitmap(wb.Width, wb.Height);\n    wb.DrawToBitmap(bitmap, new Rectangle(0, 0, wb.Width, wb.Height));\n    wb.Dispose();\n\n    return bitmap;\n}\n</code></pre>\n\n<p>And then via PHP you can do:</p>\n\n<p><code>exec(\"CreateScreenShot.exe -url http://.... -save C:/shots domain_page.png\");</code></p>\n\n<p>Then you have the screenshot in the server side.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Google is doing this in Google+ and a talented developer reverse engineered it and produced <a href=\"http://html2canvas.hertzen.com/\">http://html2canvas.hertzen.com/</a> .  To work in IE you'll need a canvas support library such as <a href=\"http://excanvas.sourceforge.net/\">http://excanvas.sourceforge.net/</a></p>\n",
                    "is_accepted": false,
                    "score": 133
                },
                {
                    "body": "<p>Another possible solution that I've discovered is <a href=\"http://www.phantomjs.org/\">http://www.phantomjs.org/</a> which allows one to very easily take screenshots of pages and a whole lot more. Whilst my original requirements for this question aren't valid any more (different job), I will likely integrate PhantomJS into future projects.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I have come across <a href=\"http://grabz.it/\" rel=\"nofollow\">GrabzIt</a> before that allows you to quickly take screenshots of web pages using their <a href=\"http://grabz.it/api/javascript/\" rel=\"nofollow\">Javascript API</a> and display it straight in your web page.</p>\n\n<p>Heres an example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"\nsrc=\"http://grabz.it/services/javascript.ashx?key=APPLICATION KEY\n&amp;url=http://www.google.com\n&amp;width=400&amp;height=400&amp;format=png&amp;delay=10000\"&gt;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use this API: <strong><a href=\"https://api.blockspring.com/mapsup/07b6410853fa5343076db5d742de58e7\" rel=\"nofollow\">Get Website Screenshot</a></strong> </p>\n\n<p>It's free and has no rate limit.</p>\n\n<p>You give it a URL, and it returns a screenshot as .jpeg.</p>\n\n<p>Here is a screenshot of google.com in jQuery:</p>\n\n<pre><code>$.ajax({\n  url: \"https://sender.blockspring.com/api_v2/blocks/07b6410853fa5343076db5d742de58e7\",\n  type: \"POST\",\n  contentType: \"application/json\",\n  data: JSON.stringify({ \n    url: \"http://www.google.com\",  // Put in any URL here.\n    width: 600, \n    height: 300\n  }),\n  crossDomain: true\n}).done(function(response){\n  // This has your screenshot. Now you can save it, or do whatever with it.\n  console.log(response);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to to take a screenshot of a webpage with JavaScript and then submit that back to the server?</p>\n\n<p>I'm not so concerned with browser security issues. etc. as the implementation would be for <a href=\"http://msdn.microsoft.com/en-us/library/ms536471%28vs.85%29.aspx\">HTA</a>. But is it possible?</p>\n",
            "last_activity_date": 1418332624,
            "question_id": 60455,
            "score": 111,
            "tags": [
                "javascript",
                "hta"
            ],
            "title": "Take a screenshot of a webpage with JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can use <a href=\"http://msdn.microsoft.com/en-us/library/ms536423%28VS.85%29.aspx\">fireEvent</a> on IE, and w3c's <a href=\"https://developer.mozilla.org/en/DOM/element.dispatchEvent\">dispatchEvent</a> on most other browsers. To create the event you want to fire, you can use either <code>createEvent</code> or <code>createEventObject</code> depending on the browser.</p>\n\n<p>Here is a self-explanatory piece of code (from prototype) that fires an event <code>dataavailable</code> on an <code>element</code>:</p>\n\n<pre><code>  var event; // The custom event that will be created\n\n  if (document.createEvent) {\n    event = document.createEvent(\"HTMLEvents\");\n    event.initEvent(\"name-of-custom-event\", true, true);\n  } else {\n    event = document.createEventObject();\n    event.eventType = \"name-of-custom-event\";\n  }\n\n  event.eventName = \"name-of-custom-event\";\n\n  if (document.createEvent) {\n    element.dispatchEvent(event);\n  } else {\n    element.fireEvent(\"on\" + event.eventType, event);\n  }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 187
                },
                {
                    "body": "<p>An example that actually works:</p>\n\n<pre><code>// Add an event listener\ndocument.addEventListener(\"name-of-event\", function(e) {\n  console.log(e.detail); // Prints \"Example of an event\"\n});\n\n// Create the event\nvar event = new CustomEvent(\"name-of-event\", { \"detail\": \"Example of an event\" });\n\n// Dispatch/Trigger/Fire the event\ndocument.dispatchEvent(event);\n</code></pre>\n\n<p>For older browsers polyfill and more complex examples, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\">MDN docs</a>.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>if you use jQuery, you can simple do</p>\n\n<pre><code>$('#yourElement').trigger('customEventName', [arg0, arg1, ..., argN]);\n</code></pre>\n\n<p>and handle it with</p>\n\n<pre><code>$('#yourElement').on('customEventName',\n                      function (objectEvent, [arg0, arg1, ..., argN]){\n                           alert (\"customEventName\");\n                });\n</code></pre>\n\n<p>where \"[arg0, arg1, ..., argN]\" means that these args are optional.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I have attached an event to a text box using <code>addEventListener</code>. It works fine. My problem arose when I wanted to trigger the event programmatically from another function. </p>\n\n<p>How can I do it?</p>\n",
            "last_activity_date": 1406572500,
            "question_id": 2490825,
            "score": 142,
            "tags": [
                "javascript",
                "events",
                "javascript-events",
                "triggers",
                "addeventlistener"
            ],
            "title": "How to trigger event in JavaScript?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<h3>Background</h3>\n\n<p>JavaScript's <code>Date</code> object tracks time in UTC internally, but typically accepts input and output in the local time of the computer it's running on. It doesn't have any facilities for working with time in other time zones.  You can parse and output dates that are UTC or Local, but you can't directly work with other time zones.</p>\n\n<h3>Libraries</h3>\n\n<p>Fortunately, there are libraries that can accomplish this.  They implement the standard Olson/IANA timezone database in JavaScript.  This has some overhead if you are running in a web browser, as the database can get a bit large if you want the whole thing.  Fortunately, many of these libraries allow you to selectively choose which zones you want to support, making the data size much more palatable.</p>\n\n<p>There are five libraries for this that I am aware of:</p>\n\n<ul>\n<li><a href=\"http://momentjs.com/timezone/\">moment-timezone</a></li>\n<li><a href=\"https://github.com/bigeasy/timezone\">BigEasy/TimeZone</a></li>\n<li><a href=\"https://github.com/sproutsocial/walltime-js\">WallTime-js</a></li>\n<li><a href=\"https://github.com/mde/timezone-js\">TimeZoneJS</a></li>\n<li><a href=\"https://github.com/dbaron/tz.js\">tz.js</a></li>\n</ul>\n\n<p>Moment-timezone is an extension to <a href=\"http://momentjs.com\">moment.js</a>, and requires moment.js 2.1.0 - which is now stable.</p>\n\n<p>WallTime and BigEasy/TimeZone are fairly new, but appear to be on the right track.  There is a nice blog post about WallTime-js <a href=\"http://sproutsocial.com/insights/javascript-time-zone-conversion-walltime/\">here</a>.</p>\n\n<p>TimeZoneJS has been around the longest, but is known to have some bugs.  tz.js has also been around for some time, but isn't very well documented.</p>\n\n<p>You should evaluate these libraries to see which will meet your needs.  I am currently working on a full comparative analysis of these different libraries, and will blog the results when ready.</p>\n\n<h3>Native Support in Chrome and Opera</h3>\n\n<p>If you can limit your usage to Google Chrome or Opera browsers, you can now do the following without any special libraries:</p>\n\n<pre><code>new Date().toLocaleString(\"en-US\", {timeZone: \"America/New_York\"})\n</code></pre>\n\n<p>This isn't a comprehensive solution, but it is interesting.  See <a href=\"http://stackoverflow.com/q/17478086/634824\">this post</a> for more details.</p>\n",
                    "is_accepted": false,
                    "score": 29
                }
            ],
            "body": "<p>I have date time in a particular timezone as a string and I want to convert this to the local time. But, I don't know how to set the timezone in the Date object.</p>\n\n<p>For example, I have <code>Feb 28 2013 7:00 PM ET,</code> then I can </p>\n\n<pre><code>var mydate = new Date();\nmydate.setFullYear(2013);\nmydate.setMonth(02);\nmydate.setDate(28);\nmydate.setHours(7);\nmydate.setMinutes(00);  \n</code></pre>\n\n<p>As far as I know, I can either set the UTC time or local time. But, how do I set time in another timezone? </p>\n\n<p>I tried  to use the add/subtract the offset from UTC but I don't know how to counter daylight savings. Am not sure if I am heading the right direction. </p>\n\n<p>How can I go about converting time from a different timezone to local time in javascript?</p>\n",
            "last_activity_date": 1402605031,
            "question_id": 15141762,
            "score": 14,
            "tags": [
                "javascript",
                "timezone"
            ],
            "title": "How to initialize javascript date to a particular timezone"
        },
        {
            "answer_count": 45,
            "answers": [
                {
                    "body": "<p>There's a much prettier way to do this, using <a href=\"http://api.jquery.com/toggle/\"><code>toggle</code></a>:</p>\n\n<pre><code>$('#isAgeSelected').click(function () {\n    $(\"#txtAge\").toggle(this.checked);\n});\n\n&lt;input type=\"checkbox\" id=\"isAgeSelected\"/&gt;\n&lt;div id=\"txtAge\" style=\"display:none\"&gt;Age is something&lt;/div&gt;\u200b\n</code></pre>\n\n<h1><a href=\"http://jsfiddle.net/5udtC/\">Fiddle Demo</a></h1>\n",
                    "is_accepted": false,
                    "score": 1846
                },
                {
                    "body": "<p>I believe you could do this:</p>\n\n<pre><code>if ($('#isAgeSelected :checked').size() &gt; 0)\n{\n    $(\"#txtAge\").show(); \n} else { \n    $(\"#txtAge\").hide();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>This worked for me:</p>\n\n<pre><code>$get(\"isAgeSelected \").checked == true\n</code></pre>\n\n<p>Where <code>isAgeSelected</code> is the id of the control.</p>\n\n<p>Also, @karim79's <a href=\"http://stackoverflow.com/questions/901712/check-checkbox-checked-property-using-jquery/901727#901727\">answer</a> works fine. I am not sure what I missed at the time I tested it.</p>\n\n<p><strong>Note, this is answer uses Microsoft Ajax, not jQuery</strong></p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>I am using this and this is working absolutely fine:</p>\n\n<pre><code>$(\"#checkkBoxId\").attr(\"checked\") ? alert(\"Checked\") : alert(\"Unchecked\");\n</code></pre>\n\n<p>Note: If the checkbox is checked it will return true otherwise undefined, so better check for the \"TRUE\" value.</p>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>I was having the same problem and none of the posted solutions seemed to work and then I found out that it's because ASP.NET renders the CheckBox control as a SPAN with INPUT inside, so the CheckBox ID is actually an ID of a SPAN, not an INPUT, so you should use:</p>\n\n<pre><code>$('#isAgeSelected input')\n</code></pre>\n\n<p>rather than</p>\n\n<pre><code>$('#isAgeSelected')\n</code></pre>\n\n<p>and then all methods listed above should work.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I ran in to the exact same issue. I have an ASP.NET checkbox</p>\n\n<pre><code>&lt;asp:CheckBox ID=\"chkBox1\" CssClass='cssChkBox1' runat=\"server\" /&gt;\n</code></pre>\n\n<p>In the jQuery code I used the following selector to check if the checkbox was checked or not, and it seems to work like a charm.</p>\n\n<pre><code>if ($(\"'.cssChkBox1 input[type=checkbox]'\").is(':checked'))\n{ ... } else { ... }\n</code></pre>\n\n<p>I'm sure you can also use the ID instead of the CssClass,</p>\n\n<pre><code>if ($(\"'#cssChkBox1 input[type=checkbox]'\").is(':checked'))\n{ ... } else { ... }\n</code></pre>\n\n<p>I hope this helps you.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>this works for me,</p>\n\n<pre><code>/* isAgeSelected being id for checkbox */\n\n$(\"#isAgeSelected\").click(function(){\n  $(this).is(':checked') ? $(\"#txtAge\").show() : $(\"#txtAge\").hide();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Here's an example that includes <strong>initialising</strong> the show/hide to match the state of the checkbox when the <strong>page loads</strong>; taking account of the fact that firefox <em>remembers the state of checkboxes</em> when you refresh the page, but <em>won't</em> remember the state of the shown/hidden elements.</p>\n\n<pre><code>$(function() {\n    // initialise visibility when page is loaded\n    $('tr.invoiceItemRow').toggle($('#showInvoiceItems').attr('checked'));\n    // attach click handler to checkbox\n    $('#showInvoiceItems').click(function(){ $('tr.invoiceItemRow').toggle(this.checked);})\n});\n</code></pre>\n\n<p>(with help from other answers on this question)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Use jQuery's <a href=\"http://api.jquery.com/is/\">is()</a> function:</p>\n\n<pre><code>if($(\"#isAgeSelected\").is(':checked'))\n    $(\"#txtAge\").show();  // checked\nelse\n    $(\"#txtAge\").hide();  // unchecked\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 545
                },
                {
                    "body": "<p>Using jQuery > 1.6 </p>\n\n<pre><code>&lt;input type=\"checkbox\" value=\"1\" name=\"checkMeOut\" id=\"checkMeOut\" checked=\"checked\" /&gt;\n\n// traditional attr\n$('#checkMeOut').attr('checked'); // \"checked\"\n// new property method\n$('#checkMeOut').prop('checked'); // true\n</code></pre>\n\n<p>Using the new property method:</p>\n\n<pre><code>if($('#checkMeOut').prop('checked')) {\n    // something when checked\n} else {\n    // something else when not\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 199
                },
                {
                    "body": "<p>Using the <code>Click</code> event handler for the checkbox property is unreliable, as the <code>checked</code> property can change during the execution of the event handler itself! Ideally, you'd want to put your code into a <code>change</code> event handler such as it is fired every time the value of the check box is changed(independent of <em>how</em> it's done so).</p>\n\n<pre><code>$('#isAgeSelected').bind('change', function () {\n\n   if ($(this).is(':checked'))\n     $(\"#txtAge\").show();\n   else\n     $(\"#txtAge\").hide();\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>My way of doing this is:</p>\n\n<pre><code>if ( $(\"#checkbox:checked\").length ) {\n\n    alert(\"checkbox is checked\");\n\n} else {\n\n    alert(\"checkbox is not checked\");\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I verified in Firefox 9.0.1 that the following works for catching the state of a checkbox post change:</p>\n\n<pre><code>$(\"#mycheckbox\").change(function() {\n    var value = $(this).prop(\"checked\") ? 'true' : 'false';                     \n    alert(value);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>$(selector).attr('checked') !== undefined\n</code></pre>\n\n<p>This returns <code>true</code> if the input is checked and <code>false</code> if it is not.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>if ($(\"#checkBoxId\").is(':checked') == true) {\n    alert(\"Checked\");\n}\nelse {\n    alert(\"Unchecked\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -9
                },
                {
                    "body": "<p>I decided to post an answer on how to do that exact same thing without jQuery. Just because I'm a rebel.</p>\n\n<pre><code>var ageCheckbox = document.getElementById('isAgeSelected');\nvar ageInput = document.getElementById('txtAge');\n\n// Just because of IE &lt;333\nageCheckbox.onchange = function() {\n    // Check if the checkbox is checked, and show/hide the text field.\n    ageInput.hidden = this.checked ? false : true;\n};\n</code></pre>\n\n<p>First you get both elements by their ID. Then you assign the checkboxe's <code>onchange</code> event a function that checks whether the checkbox got checked and sets the <code>hidden</code> property of the age text field appropriately. In that example using the ternary operator.</p>\n\n<p>Here is a <a href=\"http://jsfiddle.net/mainerror/cjSkC/\">fiddle</a> for you to test it.</p>\n\n<p><strong>Addendum</strong></p>\n\n<p>If cross-browser compatibility is an issue then I propose to set the CSS <code>display</code> property to <em>none</em> and <em>inline</em>.</p>\n\n<pre><code>elem.style.display = this.checked ? 'inline' : 'none';\n</code></pre>\n\n<p>Slower but cross-browser compatible.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Since jQuery 1.6, The behavior of <a href=\"http://api.jquery.com/attr/\"><code>jQuery.attr()</code></a> has changed and users are encouraged  not to use it to retrieve an element's checked state. Instead, you should use <a href=\"http://api.jquery.com/prop/\"><code>jQuery.prop()</code></a>:</p>\n\n<pre><code>$(\"#txtAge\").toggle(\n    $(\"#isAgeSelected\").prop(\"checked\") // for checked attribute it returns true/false;\n                                        // return value changes with checkbox state\n);                           \n</code></pre>\n\n<p>Two other possibilities are:</p>\n\n<pre><code>$(\"#txtAge\").get(0).checked\n$(\"#txtAge\").is(\":checked\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Top answer didn't do it for me, this did though:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function(){\n\n    $(\"#li_13\").click(function(){\n        if($(\"#agree\").attr('checked')){\n            $(\"#saveForm\").fadeIn();\n        }\n\n        else\n        {\n            $(\"#saveForm\").fadeOut();\n        }\n    });\n    });\n\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>UPDATE 20121213:</strong> Basically when the element #li_13 is clicked, it checks if the element #agree (which is the checkbox) is checked by using the .attr('checked') function, if it is then fadeIn the #saveForm element, and if not fadeOut the saveForm element.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>if( undefined == $('#isAgeSelected').attr('checked') ) {\n    $(\"#txtAge\").hide();\n} else {\n    $(\"#txtAge\").show();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>if( undefined == $('#isAgeSelected').attr('checked') ) {\n$(\"#txtAge\").hide();\n} else {\n$(\"#txtAge\").show();\n}`adfdadgagdah`\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>$(this).toggle($(\"input:checkbox\", $(this))[0].checked);\n</code></pre>\n\n<p>When you are selecting out of context, remember you need the [0] to access the checkbox</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This was my workaround</p>\n\n<pre><code>$('#vcGoButton').click(function (){\n    var buttonStatus=$('#vcChangeLocation').prop('checked');\n    console.log(\"status is \" + buttonStatus);\n    if(buttonStatus){\n        var address=$('#vcNewLocation').val();\n        var cabNumber=$('#vcVehicleNumber').val();\n        $.get('postCabLocation.php',\n            {address: address, cabNumber: cabNumber},\n            function(data) {\n                console.log(\"changed vehicle \" + cabNumber + \" location to \" + address );\n            });\n        }else{\n            console.log(\"vc go button clicked but no location action\");\n        }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Include jQuery from local file system. I used Google CDN there are also many CDNs to choose.</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The code will execute as soon as checkbox inside <code>mycheck</code> class is clicked. If the current clicked checkbox is checked then it will disable all other and enable the current one. If current one is unchecked, it will again enable all checkboxes for re checking.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n\n    var checkbox_selector = '.mycheck input[type=checkbox]';\n\n    $(checkbox_selector).click(function() {\n        if ($($(this)).is(':checked')) {\n            // disable all checkbox\n            $(checkbox_selector).attr('disabled', 'disabled');\n            // enable current one\n            $($(this)).removeAttr('disabled');\n        } else {\n            // if unchecked open all checkbox\n            $(checkbox_selector).removeAttr('disabled');\n        }\n    });\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>Simple form to test</p>\n\n<pre><code>&lt;form method=\"post\" action=\"\"&gt;\n    &lt;div class=\"mycheck\"&gt;\n        &lt;input type=\"checkbox\" value=\"1\" /&gt; Television \n        &lt;input type=\"checkbox\" value=\"2\" /&gt; Computer \n        &lt;input type=\"checkbox\" value=\"3\" /&gt; Laptop \n        &lt;input type=\"checkbox\" value=\"4\" /&gt; Camera \n        &lt;input type=\"checkbox\" value=\"5\" /&gt; Music Systems \n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Output Screen</p>\n\n<p><img src=\"http://i.stack.imgur.com/SM7V9.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Please consider that the best cross-browser &amp; cross-HTML version way to check if a check box is checked or not is:</p>\n\n<pre><code>$(\"#checkkBoxId\").is(':checked') \n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"#checkkBoxId\").prop('checked') \n</code></pre>\n\n<p>Other ways may working on some browsers but not all browsers and also HTML version is effecting on their behavior.</p>\n\n<p>So the only 100% working way is using <code>.is(':checked')</code> or <code>.prop('checked')</code></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>if($(\"#checkkBoxId\").is(':checked')){\n  alert(\"Checked=true\");\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>if($(\"#checkkBoxId\").attr('checked') == true){\n  alert(\"checked=true\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>forgive me if there are previous posted versions of this above but I wanted to post the a minimal amount of code I think needed to do something like this effectively.  I found this method to be useful, it returns an array of the check boxes that are checked and then you can use their value.  (This solution uses jQuery)</p>\n\n<pre><code> //this is how you get them  \n    var output = \"\";\n    var checkedBoxes = $(\"DivCheckBoxesAreIn\").children(\"input:checked\");\n                        if(checkedBoxes.length &lt;= 0) {\n                            alert('Please select check boxes');\n                            return false;\n                        };\n //and how is how you use them\n                        checkedBoxes.each(function() {\n                            output +=  this.value + \", \";\n                        };\n</code></pre>\n\n<p>printing \"output\" will give you a comma separated list of your values</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There are several ways of doing it:\n<a href=\"http://api.jquery.com/is/\">.is()</a></p>\n\n<pre><code>$(\"#checkkBoxId\").is(':checked') \n</code></pre>\n\n<p>or you can try:\n<a href=\"http://api.jquery.com/prop/\">.prop()</a></p>\n\n<pre><code>$(\"#checkkBoxId\").prop('checked') \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>If you are using an updated version of jquery, you must go for <code>.prop</code> method to resolve your issue:</p>\n\n<p><code>$('#isAgeSelected').prop('checked')</code> will return <code>true</code> if checked and <code>false</code> if unchecked. I confirmed it and I came across this issue earlier. <code>$('#isAgeSelected').attr('checked')</code> and <code>$('#isAgeSelected').is('checked')</code> is returning <code>undefined</code> which is not a worthy answer for the situation. So do as given below.</p>\n\n<pre><code>if($('#isAgeSelected').prop('checked')) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>Hope it helps someone.. :)- Thanks.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I am using this :</p>\n\n<pre><code> &lt;input type=\"checkbox\" id=\"isAgeSelected\" value=\"1\" /&gt; &lt;br /&gt;\n &lt;input type=\"textbox\" id=\"txtAge\" /&gt;\n\n $(\"#isAgeSelected\").is(':checked') ? $(\"#txtAge\").show() : $(\"#txtAge\").hide(); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;input type=\"checkbox\" id=\"abc\" value=\"UDB\"&gt;UDB\n&lt;input type=\"checkbox\" id=\"abc\" value=\"Prasad\"&gt;Prasad\n\n$('input#abc').click(function(){\n  if($(this).is(':checked'))\n  {\n    var checkedOne=$(this).val()\n    alert(checkedOne);\n\n    //do some other action\n  }\n\n})\n</code></pre>\n\n<p>this can help if you want that the required action has to be done only when you check the box not at the time you remove the check</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <code>checked</code> attribute of an <code>input type=\"checkbox\"</code> is mapped with the <code>defaultChecked</code> property, <strong>not</strong> with the <code>checked</code> property. </p>\n\n<p>So when doing something in a page when a checkbox is checked on uncheked, use the <code>prop()</code> method instead. It fetches the property value and changes as the state of the checkbox changes. </p>\n\n<p>Using <code>attr(</code>) or <code>getAttribute</code>(in pure js) in these cases are not the proper way of doing things. </p>\n\n<p>if <code>elem</code> is the concerned checkbox then do something like this to fetch the value:</p>\n\n<pre><code>elem.checked\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(elem).prop('checked')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><strong>1) If your HTML markup is:</strong> </p>\n\n<pre><code>&lt;input type=\"checkbox\"  /&gt;\n</code></pre>\n\n<p>attr used:  </p>\n\n<pre><code>$(element).attr(\"checked\");//will give you undefined as initial value of checkbox is not set\n</code></pre>\n\n<p>If prop is used :</p>\n\n<pre><code>$(element).prop(\"checked\");//will give you false whether or not initial value is set \n</code></pre>\n\n<p><strong>2) If your HTML markup is:</strong> </p>\n\n<pre><code> &lt;input type=\"checkbox\"  checked=\"checked\" /&gt;// may be like this also  checked=\"true\"\n</code></pre>\n\n<p>attr used:</p>\n\n<pre><code>$(element).attr(\"checked\")//will return checked whether it is checked=\"true\"\n</code></pre>\n\n<p>prop used:</p>\n\n<pre><code>$(element).prop(\"checked\")//will return true whether checked=\"checked\" \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>For uchecking purpos this might help..</p>\n\n<pre><code>$('#chkbox').removeAttr('checked');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Im sure its not some revalation but didnt see it all in one example:\nSelector for all checked checkboxes(on the page):</p>\n\n<pre><code>$('input[type=checkbox]:checked')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>this example is for button.\nTry this\n\n&lt;input type=\"button\" class=\"check\" id=\"checkall\" value=\"Check All\" /&gt;  &amp;nbsp; &lt;input type=\"button\" id=\"remove\" value=\"Delete\" /&gt; &lt;br/&gt;\n\n&lt;input type=\"checkbox\" class=\"cb-element\"  value=\"1\" /&gt; Checkbox  1 &lt;br/&gt;\n&lt;input type=\"checkbox\" class=\"cb-element\"  value=\"2\" /&gt; Checkbox  2 &lt;br/&gt;\n&lt;input type=\"checkbox\" class=\"cb-element\"  value=\"3\" /&gt; Checkbox  3 &lt;br/&gt;\n\n\n$('#remove').attr('disabled', 'disabled'); \n\n$(document).ready(function() {  \n\n    $('.cb-element').click(function() {\n\n        if($(this).prop('checked'))\n        {\n            $('#remove').attr('disabled', false);\n        }\n        else\n        {\n            $('#remove').attr('disabled', true);\n        }\n    });   \n\n    $('.check:button').click(function()\n{\n    var checked = !$(this).data('checked');\n    $('input:checkbox').prop('checked', checked);\n    $(this).data('checked', checked);\n\n    if(checked == true)\n    {\n        $(this).val('Uncheck All');\n         $('#remove').attr('disabled', false);\n    }\n\n    else if(checked == false)\n    {\n        $(this).val('Check All');\n        $('#remove').attr('disabled', true);\n    }\n});\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>check if not checked</p>\n\n<pre><code>if(!$(\"#your_id\").is(':checked') ){\n  //your code\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Setter:</p>\n\n<pre><code>$(\"#chkmyElement\")[0].checked = true;\n</code></pre>\n\n<p>Getter:</p>\n\n<pre><code>if($(\"#chkmyElement\")[0].checked) {\n   alert(\"enabled\");\n} else {\n   alert(\"disabled\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Automated</strong></p>\n\n<pre><code>$(document).ready(function()\n{\n   $('#isAgeSelected').change(function()\n   {\n      alert( 'value =' + $('#chkSelect').attr('checked') );\n   });\n});\n</code></pre>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;b&gt; &lt;input type=\"isAgeSelected\" id=\"chkSelect\" /&gt; Age Check &lt;/b&gt;\n\n&lt;br/&gt;&lt;br/&gt;\n\n&lt;input type=\"button\" id=\"btnCheck\" value=\"check\" /&gt;  \n</code></pre>\n\n<p><strong>JQuery</strong></p>\n\n<pre><code>$(document).ready(function()\n{\n    $('#btnCheck').click(function()\n    {\n        var isChecked = $('#isAgeSelected').attr('checked');\n\n        if (isChecked == 'checked')\n            alert('check-box is checked');\n        else\n            alert('check-box is not checked');\n    })\n});\n</code></pre>\n\n<p><strong>AJAX</strong></p>\n\n<pre><code>function check()\n{\n    if (isAgeSelected())\n        alert('check-box is checked');\n    else\n        alert('check-box is not checked');\n}\n\nfunction isAgeSelected()\n{\n    return ($get(\"isAgeSelected\").checked == true);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>jQuery 1.6+</strong></p>\n\n<pre><code>$('#isAgeSelected').prop('checked')\n</code></pre>\n\n<p><strong>jQuery 1.5 and below</strong></p>\n\n<pre><code>$('#isAgeSelected').attr('checked')\n</code></pre>\n\n<p><strong>Any version of jQuery</strong></p>\n\n<pre><code>// Assuming an event handler on a checkbox\nif (this.checked)\n</code></pre>\n\n<p>all credit to: <a href=\"http://stackoverflow.com/a/426276/443427\">http://stackoverflow.com/a/426276/443427</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I would actually prefere the <code>change</code> event.</p>\n\n<pre><code>$('#isAgeSelected').change(function() {\n    $(\"#txtAge\").toggle(this.checked);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/5udtC/6913/\" rel=\"nofollow\">http://jsfiddle.net/5udtC/6913/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There Are many way to check checkbox is checked or not :</p>\n\n<p>Way to check using jQuery</p>\n\n<pre><code>if ( elem.checked )\nif ( $( elem ).prop( \"checked\" ) )\nif ( $( elem ).is( \":checked\" ) )\nif ( $( elem ).attr( 'checked' ) )\n</code></pre>\n\n<p>check example Or also document </p>\n\n<p><a href=\"http://api.jquery.com/attr/\" rel=\"nofollow\">http://api.jquery.com/attr/</a></p>\n\n<p><a href=\"http://api.jquery.com/prop/\" rel=\"nofollow\">http://api.jquery.com/prop/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In case if you need to use CSS class as jQuery selector you can do following:</p>\n\n<pre><code>$(document).ready(function () {\n        $('.myOptionCheckbox').change(function () {            \n            if ($(this).prop('checked') == true) {\n                console.log(\"checked\");           \n            }\n            else {\n                console.log(\"unchecked\");                \n            }\n        });\n    });\n</code></pre>\n\n<p>It works fine for <code>checkboxes</code> and <code>radioboxes</code> as well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>$(document).ready(function() {    \n    $('#agecheckbox').click(function() {\n        if($(this).is(\":checked\"))\n        {\n            $('#agetextbox').show();\n        } else {\n            $('#agetextbox').hide();\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>$(\"#isAgeSelected\").prop('checked', true);</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Toggle: 0/1 ore else</p>\n\n<pre><code>&lt;input type=\"checkbox\" id=\"nolunch\" /&gt;\n&lt;input id=\"checklunch /&gt;\"\n\n    $('#nolunch').change(function () {\n    if ($(this).is(':checked')) {\n        $('#checklunch').val('1');\n    };\n    if ($(this).is(':checked') == false) {\n        $('#checklunch').val('0');\n    };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I need to check the <code>checked</code> property of a checkbox and perform an action based on the checked property using <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a>.</p>\n\n<p>For example, if the age checkbox is checked, then I need to show a textbox to enter age, else hide the textbox.</p>\n\n<p>But the following code returns <code>false</code> by default:</p>\n\n<pre><code>if($('#isAgeSelected').attr('checked')) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>How do I successfully query the <code>checked</code> property?</p>\n",
            "last_activity_date": 1420851340,
            "question_id": 901712,
            "score": 1862,
            "tags": [
                "javascript",
                "jquery",
                "checkbox"
            ],
            "title": "Check checkbox checked property"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>I'm not a javascript expert but it looks like you would have to loop through the elements and count them since Object doesn't have a length method:</p>\n\n<pre><code>var element_count = 0;\nfor (e in myArray) {  if (myArray.hasOwnProperty(e)) element_count++; }\n</code></pre>\n\n<p>@palmsey: In fairness to the OP, the javascript docs actually explicitly refer to using variables of type Object in this manner as \"associative arrays\".</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Here's how and don't forget to check that the property is not on the prototype chain:</p>\n\n<pre><code>var element_count = 0;\nfor(var e in myArray)\n    if(myArray.hasOwnProperty(e))\n        element_count++;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<blockquote>\r\n  <blockquote>\r\n    <p>@palmsey: In fairness to the OP, the javascript docs actually explicitly refer to using variables of type Object in this manner as \"associative arrays\".</p>\r\n  </blockquote>\r\n</blockquote>\r\n\r\n<p>And in fairness to @palmsey he was quite correct, they aren't associative arrays, they're definitely objects :) - doing the job of an associative array. But as regards the wider point you definitely seem to have the right of it according to this rather fine article I found: </p>\r\n\r\n<p><a href=\"http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/\" rel=\"nofollow\">JavaScript \u201cAssociative Arrays\u201d Considered Harmful</a></p>\r\n\r\n<p>But according to all this, isn't the <a href=\"http://stackoverflow.com/questions/5223/length-of-javascript-associative-array#5234\" rel=\"nofollow\">accepted answer</a> itself bad practice?</p>\r\n\r\n<blockquote>\r\n  <blockquote>\r\n    <p>Specify a prototype size() function for Object</p>\r\n  </blockquote>\r\n</blockquote>\r\n\r\n<p>If anything else has been added to Object .prototype, then the suggested code will fail:</p>\r\n\r\n<pre><code>&lt;script type=\"text/javascript\"&gt;\r\nObject.prototype.size = function () {\r\n  var len = this.length ? --this.length : -1;\r\n    for (var k in this)\r\n      len++;\r\n  return len;\r\n}\r\nObject.prototype.size2 = function () {\r\n  var len = this.length ? --this.length : -1;\r\n    for (var k in this)\r\n      len++;\r\n  return len;\r\n}\r\nvar myArray = new Object();\r\nmyArray[\"firstname\"] = \"Gareth\";\r\nmyArray[\"lastname\"] = \"Simpson\";\r\nmyArray[\"age\"] = 21;\r\nalert(\"age is \" + myArray[\"age\"]);\r\nalert(\"length is \" + myArray.size());\r\n&lt;/script&gt;\r\n</code></pre>\r\n\r\n<p>I don't think that answer should be the accepted one as it can't be trusted to work if you have any other code running in the same execution context. To do it in a robust fashion surely you would need to define the size method within myArray and check for the type of the members as you iterate through them.</p>",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The most robust answer (i.e. that captures the intent of what you're trying to do while causing the fewest bugs) would be:</p>\n\n<pre><code>Object.size = function(obj) {\n    var size = 0, key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n\n// Get the size of an object\nvar size = Object.size(myArray);\n</code></pre>\n\n<p>There's a sort of convention in JavaScript that you <a href=\"http://stackoverflow.com/questions/10757455/object-prototype-is-verboten\">don't add things to Object.prototype</a>, because it can break enumerations in various libraries. Adding methods to Object is usually safe, though.</p>\n",
                    "is_accepted": true,
                    "score": 812
                },
                {
                    "body": "<p>If you know you don't have to worry about <code>hasOwnProperty</code> checks, you can do this very simply:</p>\n\n<pre><code>Object.keys(myArray).length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 628
                },
                {
                    "body": "<p>To not mess with the prototype or other code, you could build and extend your own object:</p>\n\n<pre><code>function Hash(){\n    var length=0;\n    this.add = function(key, val){\n         if(this[key] == undefined)\n         {\n           length++;\n         }\n         this[key]=val;\n    }; \n    this.length = function(){\n        return length;\n    };\n}\n\nmyArray = new Hash();\nmyArray.add(\"lastname\", \"Simpson\");\nmyArray.add(\"age\", 21);\nalert(myArray.length()); // will alert 2\n</code></pre>\n\n<p>If you always use the add method, the length property will be correct. If you're worried that you or others forget about using it, you could add the property counter which the others have posted to the length method, too.</p>\n\n<p>Of course, you could always overwrite the methods. But even if you do, your code would probably fail noticeably, making it easy to debug. ;)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For some cases it is better to just store the size in a separate variable. Especially, if you're adding to the array by one element in one place and can easily increment the size. It would obviously work much faster if you need to check the size often.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>What about something like this --</p>\n\n<pre><code>function keyValuePairs() {\n    this.length = 0;\n    function add(key, value) { this[key] = value; this.length++; }\n    function remove(key) { if (this.hasOwnProperty(key)) { delete this[key]; this.length--; }}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A variation on some of the above is:</p>\n\n<pre><code>var objLength = function(obj){    \n    var key,len=0;\n    for(key in obj){\n        len += Number( obj.hasOwnProperty(key) );\n    }\n    return len;\n};\n</code></pre>\n\n<p>It is a bit more elegant way to integrate hasOwnProp.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Updated</strong>: If you're using <a href=\"http://underscorejs.org/#size\">Underscore.js</a> (recommended, it's lightweight!), then you can just do</p>\n\n<pre><code>_.size({one : 1, two : 2, three : 3});\n=&gt; 3\n</code></pre>\n\n<p><strong>If not</strong>, and you don't want to mess around with Object properties for whatever reason, and are already using jQuery, a plugin is equally accessible:</p>\n\n<pre><code>$.assocArraySize = function(obj) {\n    // http://stackoverflow.com/a/6700/11236\n    var size = 0, key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 149
                },
                {
                    "body": "<p>Below is a version of James Coglan's answer in CoffeeScript for those who have abandoned straight JavaScript :)</p>\n\n<pre><code>Object.size = (obj) -&gt;\n  size = 0\n  size++ for own key of obj\n  size\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a different version of James Cogan's answer. Instead of passing an argument, just prototype out the Object class and make the code cleaner.</p>\n\n<pre><code>Object.prototype.size = function () {\n    var size = 0,\n        key;\n    for (key in this) {\n        if (this.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n\nvar x = {\n    one: 1,\n    two: 2,\n    three: 3\n};\n\nx.size() === 3;\n</code></pre>\n\n<p>jsfiddle example: <a href=\"http://jsfiddle.net/qar4j/1/\" rel=\"nofollow\">http://jsfiddle.net/qar4j/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a completely different solution that will only work in more modern browsers (IE9+, Chrome, Firefox 4+, Opera 11.60+, Safari 5.1+)</p>\n\n<p>See <a href=\"http://jsfiddle.net/QHDt7/\">jsFiddle</a></p>\n\n<p>Setup your Associative Array class</p>\n\n<pre><code>/**\n * @constructor\n */\nAssociativeArray = function () {};\n\n// Make the length property work\nObject.defineProperty(AssociativeArray.prototype, \"length\", {\n    get: function () {\n        var count = 0;\n        for (var key in this) {\n            if (this.hasOwnProperty(key))\n                count++;\n        }\n        return count;\n    }\n});\n</code></pre>\n\n<p>Now you can use this code as follows...</p>\n\n<pre><code>var a1 = new AssociativeArray();\na1[\"prop1\"] = \"test\";\na1[\"prop2\"] = 1234;\na1[\"prop3\"] = \"something else\";\nalert(\"Length of array is \" + a1.length);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's the most cross-browser solution.</p>\n\n<p>This is better than the accepted answer because it uses native Object.keys if exists.\nThus, it is the fastest for all modern browsers.</p>\n\n<pre><code>if (!Object.keys) {\n    Object.keys = function (obj) {\n        var arr = [],\n            key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                arr.push(key);\n            }\n        }\n        return arr;\n    };\n}\n\nObject.keys(obj).length;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>if we have the following hash </p>\n\n<blockquote>\n  <p>hash =  {\"a\" : \"b\", \"c\": \"d\"};</p>\n</blockquote>\n\n<p>you can get length using length of the keys which is the length of hash</p>\n\n<blockquote>\n  <p>keys(hash).length</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Like most, JavaScript problems there are many solutions.  You could extend the Object that for better or worst works like many other languages' Dictionary (+ first class citizens). Nothing wrong with that, but another option is to construct a new Object that meets your specific needs. </p>\n\n<pre><code>function uberject(obj){\n    this._count = 0;\n    for(var param in obj){\n        this[param] = obj[param];\n        this._count++;\n    }\n}\n\nuberject.prototype.getLength = function(){\n    return this._count;\n};\n\nvar foo = new uberject({bar:123,baz:456});\nalert(foo.getLength());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are using jquery just go with .length method.</p>\n\n<p>$(object).length will give you length of passed object</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This method gets all your object's property names in an array, so you can get the length of that array which is equal to your object's keys' length.</p>\n\n<pre><code>Object.getOwnPropertyNames({\"hi\":\"Hi\",\"msg\":\"Message\"}).length; // =&gt; 2\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Why not something as simple as:</p>\n\n<pre><code>Object.keys(obj).length\n</code></pre>\n\n<p>It doesn't have to be difficult and definitely doesn't require another function to accomplish.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<h2>Property</h2>\n\n<pre><code>Object.defineProperty(Object.prototype, 'length', {\n    get: function () {\n        var size = 0, key;\n        for (key in this)\n            if (this.hasOwnProperty(key))\n                size++;\n        return size;\n    }\n});\n</code></pre>\n\n<h2>Use</h2>\n\n<pre><code>var o = {a: 1, b: 2, c: 3};\nalert(o.length); // &lt;-- 3\no['foo'] = 123;\nalert(o.length); // &lt;-- 4\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If I have a JavaScript associative array, say:</p>\n\n<pre><code>var myArray = new Object();\nmyArray[\"firstname\"] = \"Gareth\";\nmyArray[\"lastname\"] = \"Simpson\";\nmyArray[\"age\"] = 21;\n</code></pre>\n\n<p>Is there a built-in or accepted best practice way to get the length of this array?</p>\n\n<p>JavaScript does not have associative arrays -- it only has objects, <em>which can be used as a notion of associative arrays</em>.**</p>\n",
            "last_activity_date": 1424967052,
            "question_id": 5223,
            "score": 682,
            "tags": [
                "javascript",
                "arrays",
                "javascript-objects"
            ],
            "title": "Length of a JavaScript object (that is, associative array)"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>The difference is subtle, I believe the setInterval code executes every 1000ms exactly, while the setTimeout waits 1000ms, runs the function, which takes some ms, then sets another timeout. So the wait period is actually greater than 1000ms.</p>\n",
                    "is_accepted": true,
                    "score": 292
                },
                {
                    "body": "<p>I use setTimeout.</p>\n\n<p>Apparently the difference is setTimeout calls the method once, setInterval calls it repeatdly.</p>\n\n<p>Here is a good article explaining the difference: <a href=\"http://www.elated.com/articles/javascript-timers-with-settimeout-and-setinterval/\" rel=\"nofollow\">Tutorial: JavaScript timers with setTimeout and setInterval</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The setInterval makes it easier to cancel future execution of your code. If you use setTimeout, you must keep track of the timer id in case you wish to cancel it later on.</p>\n\n<pre><code>var timerId = null;\nfunction myTimeoutFunction()\n{\n    doStuff();\n    timerId = setTimeout(myTimeoutFunction, 1000);\n}\n\nmyTimeoutFunction();\n\n// later on...\nclearTimeout(timerId);\n</code></pre>\n\n<p>versus</p>\n\n<pre><code>function myTimeoutFunction()\n{\n    doStuff();\n}\n\nmyTimeoutFunction();\nvar timerId = setInterval(myTimeoutFunction, 1000);\n\n// later on...\nclearInterval(timerId);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>I find the <code>setTimeout</code> method easier to use if you want to cancel the timeout:</p>\n\n<pre><code>function myTimeoutFunction() {\n   doStuff();\n   if (stillrunning) {\n      setTimeout(myTimeoutFunction, 1000);\n   }\n}\n\nmyTimeoutFunction();\n</code></pre>\n\n<p>Also, if something would go wrong in the function it will just stop repeating at the first time error, instead of repeating the error every second.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Both setInterval and setTimeout return a timer id that you can use to cancel the execution, that is, before the timeouts are triggered. To cancel you call either clearInterval or clearTimeout like this:</p>\n\n<pre><code>var timeoutId = setTimeout(someFunction, 1000);\nclearTimeout(timeoutId);\nvar intervalId = setInterval(someFunction, 1000),\nclearInterval(intervalId);\n</code></pre>\n\n<p>Also, the timeouts are automatically cancelled when you leave the page or close the browser window.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>Is there any difference?</p>\n</blockquote>\n\n<p>Yes. A Timeout executes a certain amount of time after setTimeout() is called; an Interval executes a certain amount of time after the previous interval fired.</p>\n\n<p>You will notice the difference if your doStuff() function takes a while to execute. For example, if we represent a call to setTimeout/setInterval with <code>.</code>, a firing of the timeout/interval with <code>*</code> and JavaScript code execution with <code>[-----]</code>, the timelines look like:</p>\n\n<pre><code>Timeout:\n\n.    *  .    *  .    *  .    *  .\n     [--]    [--]    [--]    [--]\n\nInterval:\n\n.    *    *    *    *    *    *\n     [--] [--] [--] [--] [--] [--]\n</code></pre>\n\n<p>The next complication is if an interval fires whilst JavaScript is already busy doing something (such as handling a previous interval). In this case, the interval is remembered, and happens as soon as the previous handler finishes and returns control to the browser. So for example for a doStuff() process that is sometimes short ([-]) and sometimes long ([-----]):</p>\n\n<pre><code>.    *    *    \u2022    *    \u2022    *    *\n     [-]  [-----][-][-----][-][-]  [-]\n</code></pre>\n\n<p>\u2022 represents an interval firing that couldn't execute its code straight away, and was made pending instead.</p>\n\n<p>So intervals try to \u2018catch up\u2019 to get back on schedule. But, they don't queue one on top of each other: there can only ever be one execution pending per interval. (If they all queued up, the browser would be left with an ever-expanding list of outstanding executions!)</p>\n\n<pre><code>.    *    \u2022    \u2022    x    \u2022    \u2022    x\n     [------][------][------][------]\n</code></pre>\n\n<p>x represents an interval firing that couldn't execute or be made pending, so instead was discarded.</p>\n\n<p>If your doStuff() function habitually takes longer to execute than the interval that is set for it, the browser will eat 100% CPU trying to service it, and may become less responsive.</p>\n\n<blockquote>\n  <p>Which do you use and why?</p>\n</blockquote>\n\n<p>Chained-Timeout gives a guaranteed slot of free time to the browser; Interval tries to ensure the function it is running executes as close as possible to its scheduled times, at the expense of browser UI availability.</p>\n\n<p>I would consider an interval for one-off animations I wanted to be as smooth as possible, whilst chained timeouts are more polite for ongoing animations that would take place all the time whilst the page is loaded. For less demanding uses (such as a trivial updater firing every 30 seconds or something), you can safely use either.</p>\n\n<p>In terms of browser compatibility, setTimeout predates setInterval, but all browsers you will meet today support both. The last straggler for many years was IE Mobile in WinMo &lt;6.5, but hopefully that too is now behind us.</p>\n",
                    "is_accepted": false,
                    "score": 473
                },
                {
                    "body": "<p><a href=\"http://weblogs.asp.net/bleroy/archive/2009/05/14/setinterval-is-moderately-evil.aspx\" rel=\"nofollow\">This article</a> says that you should avoid setInterval if possible, especially since you can replicate its behavior with setTimeout and get some additional benefits along the way.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It seems that no one in this thread has actually tested setInterval's ability to keep time. If you had, you would have found that not two browsers do exactly the same. But they are all unreliable for timekeeping.</p>\n\n<p>Firefox tries to keep on schedule, except for when it misses an iteration, then it just skips it, but you don't need to be anywhere near 100% CPU load for that to happen.</p>\n\n<p>IE does sorta the same as Firefox, except that it only works as long as it is fed a time that is divisible by 15.625 (1/64 second). Otherwise it rounds the number up to meet the aforementioned criteria.</p>\n\n<p>Opera, Safari and Chrome as far as I can tell all just execute too slowly.</p>\n\n<p>If you just need some update to run once in a while setInterval is fine, but if you need actual timekeeping there is no way around keeping on calling new Date().getTime() to get the actual time.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Well, setTimeout is better in one situation, as I have just learned. I always use setInterval, which i have left to run in the background for more than half an hour. When i switched back to that tab, the slideshow (on which the code was used) was changing very rapidly, instead of every 5 seconds that it should have. It does in fact happen again as i test it more and whether it's the browser's fault or not isn't important, because with setTimeout that situation is completely impossible. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It would probably better to replace the first function by this </p>\n\n<p><strong>Options A'</strong></p>\n\n<pre><code>function myTimeoutFunction()\n{\n     setTimeout(myTimeoutFunction, 1000);// At first \n     doStuff();\n}\nmyTimeoutFunction();\n</code></pre>\n\n<p>Isn't it ? </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've made simple test of <code>setInterval(func, milisec)</code>, because I was curious what happens when function time consumption is greater than interval duration. </p>\n\n<p><code>setInterval</code> will <strong>generally</strong> schedule next iteration just after the <strong>start</strong> of the previous iteration, <strong>unless the function is still ongoing</strong>. If so, <code>setInterval</code> will wait, till the function ends. As soon as it happens, the function is immediately fired again - there is no waiting for next iteration according to schedule (as it would be under conditions without time exceeded function). There is also no situation with parallel iterations running. </p>\n\n<p>I've tested this on Chrome v23. I hope it is deterministic implementation across all modern browsers.</p>\n\n<pre><code>window.setInterval(function(start) {\n    console.log('fired: ' + (new Date().getTime() - start));\n    wait();\n  }, 1000, new Date().getTime());\n</code></pre>\n\n<p>Console output:</p>\n\n<pre><code>fired: 1000    + ~2500 ajax call -.\nfired: 3522    &lt;------------------'\nfired: 6032\nfired: 8540\nfired: 11048\n</code></pre>\n\n<p>The <code>wait</code> function is just a thread blocking helper - synchronous ajax call which takes exactly <strong>2500 milliseconds</strong> of processing at the server side:</p>\n\n<pre><code>function wait() {\n    $.ajax({\n        url: \"...\",\n        async: false\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think <code>SetInterval</code> and <code>SetTimeout</code> are different. <code>SetInterval</code> executes the block according to the time set while, <code>SetTimeout</code> executes the block of code once.</p>\n\n<p>Try these set of codes after the timeout countdown seconds:</p>\n\n<pre><code>setInterval(function(e){\n    alert('Ugbana Kelvin');\n}, 2000);\n</code></pre>\n\n<p>and then try</p>\n\n<pre><code>setTimeout(function(e){\n    alert('Ugbana Kelvin');\n}, 2000);\n</code></pre>\n\n<p>You can see the differences for yourself.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<h3>setInterval()</h3>\n\n<p><code>setInterval()</code> is a time interval based code execution method that has the native ability to repeatedly run a specified script when the interval is reached. It should <em>not</em> be nested into its callback function by the script author to make it loop, since it <strong><em>loops by default</em></strong>. It will keep firing at the interval unless you call <code>clearInterval()</code>.</p>\n\n<p>If you want to loop code for animations or on a clock tick, then use <code>setInterval()</code>.</p>\n\n<pre><code>function doStuff() {\n    alert(\"run your code here when time interval is reached\");\n}\nvar myTimer = setInterval(doStuff, 5000);\n</code></pre>\n\n<h3>setTimeout()</h3>\n\n<p><code>setTimeout()</code> is a time based code execution method that will execute a script only <strong><em>one time</em></strong> when the interval is reached. It will <em>not</em> repeat again unless you gear it to loop the script by nesting the <code>setTimeout()</code> object inside of the function it calls to run. If geared to loop, it will keep firing at the interval unless you call <code>clearTimeout()</code>.</p>\n\n<pre><code>function doStuff() {\n    alert(\"run your code here when time interval is reached\");\n}\nvar myTimer = setTimeout(doStuff, 5000);\n</code></pre>\n\n<p>If you want something to happen one time after a specified period of time, then use <code>setTimeout()</code>. That is because it only executes one time when the specified interval is reached.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>The difference is obvious in console:</p>\n\n<p><img src=\"http://i.stack.imgur.com/VP6ax.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is the complete answer is simple words..</p>\n\n<p><a href=\"http://javascript.info/tutorial/settimeout-setinterval\" rel=\"nofollow\">http://javascript.info/tutorial/settimeout-setinterval</a>.</p>\n\n<p>If you want to dive deep here are the MDN links:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/window.setTimeout</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.setInterval\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/window.setInterval</a></p>\n\n<p>cheers :) </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The very difference is in their purposes.</p>\n\n<pre><code>setInterval()\n   -&gt; executes a function, over and over again, at specified time intervals  \n\nsetTimeout()\n   -&gt; executes a function, once, after waiting a specified number of milliseconds\n</code></pre>\n\n<p>It's as simple as that</p>\n\n<p>More elaborate details here <a href=\"http://javascript.info/tutorial/settimeout-setinterval\" rel=\"nofollow\">http://javascript.info/tutorial/settimeout-setinterval</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>When you run some function inside setInterval, which works more time than timeout-> the browser will be stuck.\n<br>\n<br> - E.g., <strong>doStuff()</strong> takes 1500 sec. to be execute and you do: <strong>setInterval(doStuff, 1000);</strong>\n<br>1) Browser run <strong>doStuff()</strong> which takes 1.5 sec. to be executed;\n<br>2) After ~1 second it tries to run <strong>doStuff()</strong> again. But previous <strong>doStuff()</strong> is still executed-> so browser adds this run to the queue (to run after first is done).\n<br>3,4,..) The same adding to the queue of execution for next iterations, but <strong>doStuff()</strong> from previous are still in progress...\n<br> <strong>As the result- the browser is stuck.</strong>\n<br>\n<br>To prevent this behavior, the best way is to run <strong>setTimeout inside setTimeout to emulate setInterval</strong>.\n<br>To correct timeouts between setTimeout calls, you can use <a href=\"http://www.andrewduthie.com/post/a-self-correcting-setinterval-alternative/\" rel=\"nofollow\">self-correcting alternative to JavaScript's setInterval</a> technique.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just adding onto what has already been said but the setTimeout version of the code will also reach the <code>Maximum call stack size</code> which will stop it from functioning. Since there is no base case for the recursive function to stop at so you can't have it run <em>forever.</em></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can validate bobince answer by yourself when you run the following javascript or check this <a href=\"http://jsfiddle.net/dcy82Lj2/1/\" rel=\"nofollow\">JSFiddle</a></p>\n\n<pre><code>&lt;div id=\"timeout\"&gt;&lt;/div&gt;\n&lt;div id=\"interval\"&gt;&lt;/div&gt;\n\nvar timeout = 0;\nvar interval = 0;\n\nfunction doTimeout(){\n    $('#timeout').html(timeout);\n    timeout++;\n    setTimeout(doTimeout, 1);\n}\n\nfunction doInterval(){\n    $('#interval').html(interval);\n    interval++;\n}\n\n$(function(){\n    doTimeout();\n    doInterval();\n    setInterval(doInterval, 1);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think the setTimeout version may actually leak memory. You call a function recursively which does not return. So there is a push for a return address on each call, but there is no pop.\nAdditionally, there are scope allocations for each variables defined inside tick function which don't get a chance to get freed because the scope is never exited.</p>\n\n<pre><code>var i = 0; \n//The parameter leaks stack memory\nfunction tickFunction(param) \n{ \n    //The following array leaks heap memory\n    var heapLeakArray = [\"sdsadsasad\", \"dsadsadsasa\", \"dsadsadsa\"]; \n    //The following call leaks stack memory\n    setTimeout(function(){tickFunction(++param);}, 10);\n}\n</code></pre>\n\n<p>So for scheduling purposes, I suggest you to use the setInterval approach while the setTimeout approach is better for delayed execution and asynchronous work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To look at it a bit differently: setInterval insures that a code is run every 1000ms (or how much you specify) while setTimeout sets the time that it waits until it runs the code again. And since it takes a few milliseconds to run the code, it adds up to 1000ms and some milliseconds extra each run.</p>\n\n<p>For example, timers are done with setInterval, to ensure it does not delay/</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>As far as I can tell, these two pieces of javascript behave the same way:</p>\n\n<p><strong>Option A:</strong></p>\n\n<pre><code>function myTimeoutFunction()\n{\n    doStuff();\n    setTimeout(myTimeoutFunction, 1000);\n}\n\nmyTimeoutFunction();\n</code></pre>\n\n<p><strong>Option B:</strong></p>\n\n<pre><code>function myTimeoutFunction()\n{\n    doStuff();\n}\n\nmyTimeoutFunction();\nsetInterval(myTimeoutFunction, 1000);\n</code></pre>\n\n<p>Is there any difference between using <a href=\"https://developer.mozilla.org/en/window.setTimeout\">setTimeout</a> and <a href=\"https://developer.mozilla.org/En/window.setInterval\">setInterval</a>? Which do you use and why?</p>\n",
            "last_activity_date": 1422390328,
            "question_id": 729921,
            "score": 362,
            "tags": [
                "javascript"
            ],
            "title": "setTimeout or setInterval?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>It doesn't work because it is being parsed as a <strong><code>FunctionDeclaration</code></strong>, and the name identifier of function declarations is a <em>mandatory</em>.</p>\n\n<p>When you surround it with parentheses it is evaluated as a <strong><code>FunctionExpression</code></strong>, and function expressions can be named or not.</p>\n\n<p>The grammar of a <code>FunctionDeclaration</code> looks like this:</p>\n\n<pre><code>FunctionDeclaration :\nfunction Identifier ( FormalParameterListopt ) {FunctionBody}\n</code></pre>\n\n<p>And the one of <code>FunctionExpression</code>s:</p>\n\n<pre>\n    FunctionExpression :\n    function Identifier<strong>opt</strong> (FormalParameterListopt) {FunctionBody}\n</pre>\n\n<p>As you can see the <code>Identifier</code> token in <code>FunctionExpression</code>s is optional, therefore we can have a function expression without a name defined:</p>\n\n<pre><code>(function () {\n    alert(2 + 2);\n}());\n</code></pre>\n\n<p>Or <em>named</em> function expression:</p>\n\n<pre><code>(function foo() {\n    alert(2 + 2);\n}());\n</code></pre>\n\n<p>The Parentheses (formally called <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.1.6\">the Grouping Operator</a>) can surround only expressions, and a function expression is evaluated.</p>\n\n<p>The two grammar productions can be ambiguous, and they can look exactly the same, for example:</p>\n\n<pre><code>function foo () {} // FunctionDeclaration\n\n0,function foo () {} // FunctionExpression\n</code></pre>\n\n<p>The parser knows if it's a <code>FunctionDeclaration</code> or a <code>FunctionExpression</code>, depending on the <strong>context</strong> where it appears.</p>\n\n<p>In the above example, the second one is an expression because the <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.14\">Comma operator</a> can also handle only expressions.</p>\n\n<p>On the other hand, <code>FunctionDeclaration</code>'s could actually appear only in what's called \"<code>Program</code>\" code, meaning code outside in the global scope, and inside the <code>FunctionBody</code> of other functions.</p>\n\n<p>Functions inside blocks should be avoided, because they can lead an unpredictable behavior, e.g.:</p>\n\n<pre><code>if (true) {\n  function foo () { alert('true'); }\n} else {\n  function foo () { alert('false!'); }\n}\n\nfoo(); // true? false? why?\n</code></pre>\n\n<p>The above code should actually produce a <code>SyntaxError</code>, since a <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_12.1\"><code>Block</code></a> such those can only contain statements (and the ECMAScript Specification doesn't define any function statement), but most implementations are tolerant, and will simply take the second function, the one which alerts <code>'false!'</code>.</p>\n\n<p>The Mozilla implementations -Rhino, SpiderMonkey,- have a different behavior. Their grammar contains a <em>non-standard</em> Function Statement, meaning that the function will be evaluated at <em>run-time</em>, not at parse time, as it happens with <code>FunctionDeclaration</code>s. In those implementations we will get the first function defined.</p>\n\n<hr>\n\n<p>Functions can be declared in different ways, <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions#Function_constructor_vs._function_declaration_vs._function_expression\">compare the following</a>:</p>\n\n<p>1- A function defined with the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function\">Function</a> constructor assigned to the variable <em>multiply</em>:</p>\n\n<pre><code>  var multiply = new Function(\"x\", \"y\", \"return x * y;\");\n</code></pre>\n\n<p>2- A function declaration of a function named <em>multiply</em>:</p>\n\n<pre><code>  function multiply(x, y) {\n     return x * y;\n  }\n</code></pre>\n\n<p>3- A function expression assigned to the variable <em>multiply</em>:</p>\n\n<pre><code>  var multiply = function (x, y) {\n     return x * y;\n  };\n</code></pre>\n\n<p>4- A named function expression *func_name*, assigned to the variable <em>multiply</em>:</p>\n\n<pre><code>  var multiply = function func_name(x, y) {\n     return x * y;\n  };\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 180
                },
                {
                    "body": "<p>CMS's answer is correct. For an excellent in-depth explanation of function declarations and expressions, see <a href=\"http://kangax.github.com/nfe/\">this article by kangax</a>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I have just another small remark. Your code will work with a small change:</p>\n\n<pre><code>var x = function(){\n    alert(2 + 2);\n}();\n</code></pre>\n\n<p>I use the above syntax instead of the more widely spread version:</p>\n\n<pre><code>var module = (function(){\n    alert(2 + 2);\n})();\n</code></pre>\n\n<p>because I didn't manage to get the indentation to work correctly for javascript files in vim. It seems that vim doesn't like the curly braces inside open parenthesis. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Even though this is an old question and answer, it discusses a topic that to this day throws many developers for a loop. I can't count the number of JavaScript developer candidates I've interviewed who couldn't tell me the difference between a function declaration and a function expression <em>and</em> who had no clue what an immediately invoked function expression is.</p>\n\n<p>I'd like to mention, though, one very important thing which is that Premasagar's code snippet wouldn't work even if he had given it a name identifier.</p>\n\n<pre><code>function someName() {\n    alert(2 + 2);\n}();\n</code></pre>\n\n<p>The reason this wouldn't work is that the JavaScript engine interprets this as a function declaration followed by a completely unrelated grouping operator that contains no expression, and grouping operators <em>must</em> contain an expression. According to JavaScript, the above snippet of code is equivalent to the following one.</p>\n\n<pre><code>function someName() {\n    alert(2 + 2);\n}\n\n();\n</code></pre>\n\n<p>Another thing I'd like to point out that may be of some use to some people is that any name identifier you provide for a function expression is pretty much useless in the context of the code except from within the function definition itself.</p>\n\n<pre><code>var a = function b() {\n    // do something\n};\na(); // works\nb(); // doesn't work\n\nvar c = function d() {\n    window.setTimeout(d, 1000); // works\n};\n</code></pre>\n\n<p>Of course, using name identifiers with your function definitions is always helpful when it comes to debugging code, but that's something else entirely... :-)</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<h2>Summary</h2>\n\n<p>Can you explain the reasoning behind the syntax for encapsulated anonymous functions in JavaScript? Why does this work: <code>(function(){})();</code> but this doesn't: <code>function(){}();</code>?</p>\n\n<p><hr /></p>\n\n<h2>What I know</h2>\n\n<p>In JavaScript, one creates a named function like this:</p>\n\n<pre><code>function twoPlusTwo(){\n    alert(2 + 2);\n}\ntwoPlusTwo();\n</code></pre>\n\n<p>You can also create an anonymous function and assign it to a variable:</p>\n\n<pre><code>var twoPlusTwo = function(){\n    alert(2 + 2);\n};\ntwoPlusTwo();\n</code></pre>\n\n<p>You can encapsulate a block of code by creating an anonymous function, then wrapping it in brackets and executing it immediately:</p>\n\n<pre><code>(function(){\n    alert(2 + 2);\n})();\n</code></pre>\n\n<p>This is useful when creating modularised scripts, to avoid cluttering up the current scope, or global scope, with potentially conflicting variables - as in the case of Greasemonkey scripts, jQuery plugins, etc.</p>\n\n<p>Now, I understand why this works. The brackets enclose the contents and expose only the outcome (I'm sure there's a better way to describe that), such as with <code>(2 + 2) === 4</code>.</p>\n\n<p><hr /></p>\n\n<h2>What I don't understand</h2>\n\n<p>But I don't understand why this does not work equally as well:</p>\n\n<pre><code>function(){\n    alert(2 + 2);\n}();\n</code></pre>\n\n<p>Can you explain that to me?</p>\n",
            "last_activity_date": 1395889738,
            "question_id": 1634268,
            "score": 145,
            "tags": [
                "javascript",
                "syntax",
                "anonymous-function"
            ],
            "title": "Explain JavaScript&#39;s encapsulated anonymous function syntax"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>While <code>onclick</code> works in all browsers, <code>addEventListener</code> does not work in older versions of Internet Explorer, which uses <code>attachEvent</code> instead.</p>\n\n<p>The downside of <code>onclick</code> is that there can only be one event handler, while the other two will fire all registered callbacks.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The difference you could see if you had another couple of functions:</p>\n\n<pre><code>var h = document.getElementById('a');\nh.onclick = donothing1;\nh.onclick = donothing2;\n\nh.addEventListener('click', donothing3);\nh.addEventListener('click', donothing4);\n</code></pre>\n\n<p>Functions 2, 3 and 4 work, but 1 does not.  This is because <code>addEventListener</code> does not overwrite existing event handlers, whereas <code>onclick</code> overrides any existing <code>onclick = fn</code> event handlers.</p>\n\n<p>The other significant difference, of course, is that <code>onclick</code> will always work, whereas <code>addEventListener</code> does not work in Internet Explorer before version 9. You can use the analogous <code>attachEvent</code> (which has <em>slightly</em> different syntax) in IE &lt;9.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p><code>addEventListener</code> lets you set multiple handlers, but isn't supported in IE8 or lower.</p>\n\n<p>IE does have <code>attachEvent</code>, but it's not exactly the same.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Both are correct, but none of them are \"best\" per se, and there may be a reason the developer chose to use both approaches.</p>\n\n<p><strong>Event Listeners (addEventListener and IE's attachEvent)</strong></p>\n\n<p>Earlier versions of Internet Explorer implement javascript differently from pretty much every other browser.  With versions less than 9, you use the <code>attachEvent</code>[<a href=\"http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx\">doc</a>]  method, like this:</p>\n\n<pre><code>element.attachEvent('onclick', function() { /* do stuff here*/ });\n</code></pre>\n\n<p>In most other browsers (including IE 9 and above), you use <code>addEventListener</code>[<a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\">doc</a>], like this:</p>\n\n<pre><code>element.addEventListener('click', function() { /* do stuff here*/ }, false);\n</code></pre>\n\n<p>Using this approach (<a href=\"http://www.w3.org/wiki/Handling_events_with_JavaScript#The_evolution_of_events\">DOM Level 2 events</a>), you can attach a theoretically unlimited number of events to any single element. The only practical limitation is client-side memory and other performance concerns, which are different for each browser.</p>\n\n<p>The examples above represent using an anonymous function[<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope\">doc</a>]. You can also add an event listener using a function reference[<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function\">doc</a>] or a closure[<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures\">doc</a>]:</p>\n\n<pre><code>var myFunctionReference = function() { /* do stuff here*/ }\n\nelement.attachEvent('onclick', myFunctionReference);\nelement.addEventListener('click', myFunctionReference , false);\n</code></pre>\n\n<p>Another important feature of <code>addEventListener</code> is the final parameter, which controls how the listener reacts to bubbling events[<a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">doc</a>]. I've been passing false in the examples, which is standard for probably 95% of use cases. There is no equivalent argument for <code>attachEvent</code>, or when using inline events.</p>\n\n<p><strong>Inline events (HTML onclick=\"\" property and element.onclick)</strong></p>\n\n<p>In all browsers that support javascript, you can put an event listener inline, meaning right in the HTML code.  You've probably seen this:</p>\n\n<pre><code>&lt;a id=\"testing\" href=\"#\" onclick=\"alert('did stuff inline');\"&gt;Click me&lt;/a&gt;\n</code></pre>\n\n<p>Most experienced developers shun this method, but it does get the job done; it is simple and direct. You may not use closures or anonymous functions here (though the handler itself is an anonymous function of sorts), and your control of scope is limited.</p>\n\n<p>The other method you mention:</p>\n\n<pre><code>element.onclick = function () { /*do stuff here */ };\n</code></pre>\n\n<p>... is the equivalent of inline javascript except that you have more control of the scope (since you're writing a script rather than HTML) and can use anonymous functions, function references, and/or closures.</p>\n\n<p>The significant drawback with inline events is that unlike event listeners described above, you may only have one inline event assigned. Inline events are stored as an attribute/property of the element[<a href=\"http://www.w3.org/wiki/HTML/Attributes/_Global#Event-handler_Attributes\">doc</a>], meaning that it can be overwritten.</p>\n\n<p>Using the example <code>&lt;a&gt;</code> from the HTML above:</p>\n\n<pre><code>var element = document.getElementById('testing');\nelement.onclick = function () { alert('did stuff #1'); };\nelement.onclick = function () { alert('did stuff #2'); };\n</code></pre>\n\n<p>... when you clicked the element, you'd <strong>only</strong> see \"Did stuff #2\" - you overwrote the first assigned of the <code>onclick</code> property with the second value, and you overwrote the original inline HTML <code>onclick</code> property too. Check it out here: <a href=\"http://jsfiddle.net/jpgah/\">http://jsfiddle.net/jpgah/</a>.</p>\n\n<p><strong>Which is Best?</strong></p>\n\n<p>The question is a matter of browser compatibility and necessity. Do you currently need to attach more than one event to an element? Will you in the future? Odds are, you will. attachEvent and addEventListener are necessary. If not, an inline event will do the trick.</p>\n\n<p>jQuery and other javascript frameworks encapsulate the different browser implementations of DOM level 2 events in generic models so you can write cross-browser compliant code without having to worry about IE's history as a rebel.  Same code with jQuery, all cross-browser and ready to rock:</p>\n\n<pre><code>$(element).on('click', function () { /* do stuff */ });\n</code></pre>\n\n<p>Don't run out and get a framework just for this one thing, though. You can easily roll your own little utility to take care of the older browsers:</p>\n\n<pre><code>function addEvent(element, evnt, funct){\n  if (element.attachEvent)\n   return element.attachEvent('on'+evnt, funct);\n  else\n   return element.addEventListener(evnt, funct, false);\n}\n\n// example\naddEvent(\n    document.getElementById('myElement'),\n    'click',\n    function () { alert('hi!'); }\n);\n</code></pre>\n\n<p>Try it: <a href=\"http://jsfiddle.net/bmArj/\">http://jsfiddle.net/bmArj/</a></p>\n\n<p>Taking all of that into consideration, unless the script you're looking at took the browser differences into account some other way (in code not shown in your question), the part using <code>addEventListener</code> would not work in IE versions less than 9.</p>\n\n<p><strong>Documentation and Related Reading</strong></p>\n\n<ul>\n<li><a href=\"http://www.w3.org/wiki/HTML/Attributes/_Global#Event-handler_Attributes\">W3 HTML specification, element Event Handler Attributes</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\">element.addEventListener on MDN</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx\">element.attachEvent on MSDN</a></li>\n<li><a href=\"http://api.jquery.com/on/\">Jquery.on</a></li>\n<li><a href=\"http://www.quirksmode.org/js/introevents.html\">quirksmode blog \"Introduction to Events\"</a></li>\n<li><a href=\"https://developers.google.com/speed/libraries/\">CDN-hosted javascript libraries at Google</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 264
                },
                {
                    "body": "<p>As far as I know, the DOM \"load\" event still does only work very limited. That means it'll only fire for the <code>window object</code>, <code>images</code> and <code>&lt;script&gt;</code> elements for instance. The same goes for the direct <code>onload</code> assignment. There is no technical difference between those two. Probably <code>.onload =</code> has a better cross-browser availabilty.</p>\n\n<p>However, you cannot assign a <code>load event</code> to a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> element or whatnot.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The context referenced by <code>'this'</code> keyword in JavasSript is different.</p>\n\n<p>look at the following code:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input id=\"btnSubmit\" type=\"button\" value=\"Submit\" /&gt;\n    &lt;script&gt;\n        function disable() {\n            this.disabled = true;\n        }\n        var btnSubmit = document.getElementById('btnSubmit');\n        btnSubmit.onclick = disable();\n        //btnSubmit.addEventListener('click', disable, false);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>What it does is really simple. when you click the button, the button will be disabled automatically.</p>\n\n<p>First when you try to hook up the events in this way <code>button.onclick = function(),</code>\nonclick event will be triggered by clicking the button, however, the button will not be disabled because there's no explicit binding between button.onclick and onclick event handler. If you debug see the <code>'this'</code> object, you can see it refers to <code>'window'</code> object.</p>\n\n<p>Secondly, if you comment <code>btnSubmit.onclick = disable();</code> and uncomment \n<code>//btnSubmit.addEventListener('click', disable, false);</code> you can see that the button is disabled because with this way there's explicit binding between button.onclick event and onclick event handler. If you debug into disable function, you can see <code>'this'</code> refers to the <code>button control</code> rather than the <code>window</code>.</p>\n\n<p>This is something I don't like about JavaScript which is inconsistency.\nBtw, if you are using jQuery(<code>$('#btnSubmit').on('click', disable);</code>), it uses explicit binding. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are not too worried about browser support, there is a way to rebind the 'this' reference in the function called by the event. It will normally point to the element that generated the event when the function is executed, which is not always what you want. The tricky part is to at the same time be able to remove the very same event listener, as shown in this example: <a href=\"http://jsfiddle.net/roenbaeck/vBYu3/\" rel=\"nofollow\">http://jsfiddle.net/roenbaeck/vBYu3/</a></p>\n\n<pre><code>/*\n    Testing that the function returned from bind is rereferenceable, \n    such that it can be added and removed as an event listener.\n*/\nfunction MyImportantCalloutToYou(message, otherMessage) {\n    // the following is necessary as calling bind again does \n    // not return the same function, so instead we replace the \n    // original function with the one bound to this instance\n    this.swap = this.swap.bind(this); \n    this.element = document.createElement('div');\n    this.element.addEventListener('click', this.swap, false);\n    document.body.appendChild(this.element);\n}\nMyImportantCalloutToYou.prototype = {\n    element: null,\n    swap: function() {\n        // now this function can be properly removed \n        this.element.removeEventListener('click', this.swap, false);           \n    }\n}\n</code></pre>\n\n<p>The code above works well in Chrome, and there's probably some shim around making \"bind\" compatible with other browsers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What's the difference between addEventListener and onclick?</p>\n\n<pre><code>var h=document.getElementById(\"a\");\nh.onclick=dothing1;\nh.addEventListener(\"click\", dothing2);\n</code></pre>\n\n<p>The code above resides together in a separate .js file, and they both work perfectly.</p>\n",
            "last_activity_date": 1424037700,
            "question_id": 6348494,
            "score": 150,
            "tags": [
                "javascript",
                "onclick",
                "addeventlistener"
            ],
            "title": "addEventListener vs onclick"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Unfortunately, there isn't an API to give you the HTTP response headers for your initial page request. That was the original question posted here. It has been <a href=\"http://stackoverflow.com/questions/12258705/how-can-i-read-the-current-headers-without-making-a-new-request-with-js\">repeatedly asked</a>, too, because some people would like to get the actual response headers of the original page request without issuing another one.</p>\n\n<p><strong>For AJAX Requests:</strong></p>\n\n<p>If an HTTP request is made over AJAX, it is possible to get the response headers with the <strong>getAllResponseHeaders()</strong> method. It's part of the XMLHttpRequest API. To see how this can be applied, check out the <em>fetchSimilarHeaders()</em> function below. Note that this is a work-around to the problem that won't be reliable for some applications.</p>\n\n<pre><code>myXMLHttpRequest.getAllResponseHeaders();\n</code></pre>\n\n<p>The API was specified in the following candidate recommendation for XMLHttpRequest: <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader-method\">XMLHttpRequest - W3C Candidate Recommendation 3 August 2010</a></p>\n\n<p>Specifically, the getAllResponseHeaders() method was specified in the following section:<br>\n<a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders%28%29-method\">http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders()-method</a> </p>\n\n<p>The MDN documentation is good, too:<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest</a>.</p>\n\n<p>This will not give you information about the original page request's HTTP response headers, but it could be used to make educated guesses about what those headers were. More on that is described next.</p>\n\n<p><strong>Getting header values from the Initial Page Request:</strong></p>\n\n<p>This question was first asked several years ago, asking specifically about how to get at the original HTTP response headers for the <em>current page</em> (i.e. the same page inside of which the javascript was running). This is quite a different question than simply getting the response headers for any HTTP request. For the initial page request, the headers aren't readily available to javascript. Whether the header values you need will be reliably and sufficiently consistent if you request the same page again via AJAX will depend on your particular application.</p>\n\n<p>The following are a few suggestions for getting around that problem.</p>\n\n<p><strong>1. Requests on Resources which are largely static</strong></p>\n\n<p>If the response is largely static and the headers are not expected to change much between requests, you could make an AJAX request for the same page you're currently on and assume that they're they are the same values which were part of the page's HTTP response. This could allow you to access the headers you need using the nice XMLHttpRequest API described above.</p>\n\n<pre><code>function fetchSimilarHeaders (callback) {\n    var request = new XMLHttpRequest();\n    request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n            //\n            // The following headers may often be similar\n            // to those of the original page request...\n            //\n            if (callback &amp;&amp; typeof callback === 'function') {\n                callback(request.getAllResponseHeaders());\n            }\n        }\n    };\n\n    //\n    // Re-request the same page (document.location)\n    // We hope to get the same or similar response headers to those which \n    // came with the current page, but we have no guarantee.\n    // Since we are only after the headers, a HEAD request may be sufficient.\n    //\n    request.open('HEAD', document.location, true);\n    request.send(null);\n}\n</code></pre>\n\n<p>This approach will be problematic if you truly have to rely on the values being consistent between requests, since you can't fully guarantee that they are the same. It's going to depend on your specific application and whether you know that the value you need is something that won't be changing from one request to the next.</p>\n\n<p><strong>2. Make Inferences</strong></p>\n\n<p>There are <strong>some BOM properties</strong> which the browser determines by looking at the headers. Some of these properties reflect HTTP headers directly (e.g. <code>navigator.userAgent</code> is set to the value of the HTTP <code>UserAgent</code> header field). By sniffing around the available properties you might be able to find what you need, or some clues to indicate what the HTTP response contained.</p>\n\n<p><strong>3. Stash them</strong></p>\n\n<p>If you control the server side, you can access any header you like as you construct the full response. Values could be passed to the client with the page, stashed in some markup or perhaps in an inlined JSON structure. If you wanted to have every HTTP request header available to your javascript, you could iterate through them on the server and send them back as hidden values in the markup. It's probably not ideal to send header values this way, but you could certainly do it for the specific value you need. This solution is arguably inefficient, too, but it would do the job if you needed it.</p>\n",
                    "is_accepted": true,
                    "score": 138
                },
                {
                    "body": "<p>Another way to send header information to JavaScript would be through cookies. The server can extract whatever data it needs from the request headers and send them back inside a <code>Set-Cookie</code> response header \u2014 and cookies can be read in JavaScript. As keparo says, though, it's best to do this for just one or two headers, rather than for all of them.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<blockquote>\n  <blockquote>\n    <p>How do I access the HTTP request header fields via JavaScript?</p>\n  </blockquote>\n</blockquote>\n\n<p>If we're talking about <em>Request</em> headers, you can create your own headers when doing XmlHttpRequests.</p>\n\n<pre><code>var request = new XMLHttpRequest();\nrequest.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\nrequest.open(\"GET\", path, true);\nrequest.send(null);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Using <code>XmlHttpRequest</code> you can pull up the current page and then examine the http headers of the response.</p>\n\n<p>Best case is to just do a <code>HEAD</code> request and then examine the headers.</p>\n\n<p>For some examples of doing this have a look at <a href=\"http://www.jibbering.com/2002/4/httprequest.html\" rel=\"nofollow\">http://www.jibbering.com/2002/4/httprequest.html</a></p>\n\n<p>Just my 2 cents.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Using mootools, you can use this.xhr.getAllResponseHeaders()</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is an old question. Not sure when support became more broad, but <code>getAllResponseHeaders()</code> and <code>getResponseHeader()</code> appear to now be fairly standard: <a href=\"http://www.w3schools.com/dom/dom_http.asp\" rel=\"nofollow\">http://www.w3schools.com/dom/dom_http.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Use following javascript code to get all the HTTP headers.</p>\n\n<pre><code>var req = new XMLHttpRequest();\nreq.open('GET', document.location, false);\nreq.send(null);\nvar headers = req.getAllResponseHeaders().toLowerCase();\nalert(headers);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 211
                },
                {
                    "body": "<p>You can't access the http headers, but some of the information provided in them is available in the DOM. For example, if you want to see the http referer (sic), use document.referrer. There may be others like this for other http headers. Try googling the specific thing you want, like \"http referer javascript\".</p>\n\n<p>I know this should be obvious, but I kept searching for stuff like \"http headers javascript\" when all I really wanted was the referer, and didn't get any useful results. I don't know how I didn't realize I could make a more specific query.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've just tested, and this works for me using chrome Version 28.0.1500.95.</p>\n\n<p>I was needing to download a file and read the file name. The file name is in the header so I did the follow,</p>\n\n<pre><code>    var xhr = new XMLHttpRequest(); \n    xhr.open('POST', url, true); \n    xhr.responseType = \"blob\";\n    xhr.onreadystatechange = function () { \n        if (xhr.readyState == 4) {\n            success(xhr.response); // the function to proccess the response\n\n            console.log(\"++++++ reading headers ++++++++\");\n            var headers = xhr.getAllResponseHeaders();\n            console.log(headers);\n            console.log(\"++++++ reading headers end ++++++++\");\n\n        }\n    };\n</code></pre>\n\n<p>Output:</p>\n\n<p>Date: Fri, 16 Aug 2013 16:21:33 GMT\nContent-Disposition: attachment;filename=testFileName.doc\nContent-Length: 20\nServer: Apache-Coyote/1.1\nContent-Type: application/octet-stream</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Like many people I've been digging the net with no real answer :(</p>\n\n<p>I've nevertheless find out a bypass that could help others. In my case I fully control my web server. In fact it is part of my application (see end reference). It is easy for me to add a script to my http response. I modified my httpd server to inject a small script within every html pages. I only push a extra 'js script' line right after my header construction, that set an existing variable from my document within my browser [I choose location], but any other option is possible. While my server is written in nodejs, I've no doubt that the same technique can be use from PHP or others.</p>\n\n<pre><code>  case \".html\":\n    response.setHeader(\"Content-Type\", \"text/html\");\n    response.write (\"&lt;script&gt;location['GPSD_HTTP_AJAX']=true&lt;/script&gt;\")\n    // process the real contend of my page\n</code></pre>\n\n<p>Now every html pages loaded from my server, have this script executed by the browser at reception. I can then easily check from JavaScript if the variable exist or not. In my usecase I need to know if I should use JSON or JSON-P profile to avoid CORS issue, but the same technique can be used for other purposes [ie: choose in between development/production server, get from server a REST/API key, etc ....]</p>\n\n<p>On the browser you just need to check variable directly from JavaScript as in my example, where I use it to select my Json/JQuery profile</p>\n\n<pre><code> // Select direct Ajax/Json profile if using GpsdTracking/HttpAjax server otherwise use JsonP\n  var corsbypass = true;  \n  if (location['GPSD_HTTP_AJAX']) corsbypass = false;\n\n  if (corsbypass) { // Json &amp; html served from two different web servers\n    var gpsdApi = \"http://localhost:4080/geojson.rest?jsoncallback=?\";\n  } else { // Json &amp; html served from same web server [no ?jsoncallback=]\n    var gpsdApi = \"geojson.rest?\";\n  }\n  var gpsdRqt = \n      {key   :123456789 // user authentication key\n      ,cmd   :'list'    // rest command\n      ,group :'all'     // group to retreive\n      ,round : true     // ask server to round numbers\n   };\n   $.getJSON(gpsdApi,gpsdRqt, DevListCB);\n</code></pre>\n\n<p>For who ever would like to check my code: \n<a href=\"https://www.npmjs.org/package/gpsdtracking\" rel=\"nofollow\">https://www.npmjs.org/package/gpsdtracking</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I access a page's HTTP response headers via JavaScript?</p>\n\n<p>Related to <a href=\"http://stackoverflow.com/questions/220149/how-do-i-access-the-http-request-header-fields-via-javascript\"><strong>this question</strong></a>, which was modified to ask about accessing two specific HTTP headers.</p>\n\n<blockquote>\n  <p><strong>Related:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/220149/how-do-i-access-the-http-request-header-fields-via-javascript\">How do I access the HTTP request header fields via JavaScript?</a></p>\n  \n  <p><strong>Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/12258705/how-can-i-read-the-current-headers-without-making-a-new-request-with-js\">How can i read the current headers without making a new request with JS?</a></p>\n</blockquote>\n",
            "last_activity_date": 1413374940,
            "question_id": 220231,
            "score": 182,
            "tags": [
                "javascript",
                "http",
                "http-headers"
            ],
            "title": "Accessing the web page&#39;s HTTP Headers in JavaScript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>JavaScript objects are unordered by definition (see the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMAScript Language\nSpecification</a>, section 8.6). The language specification doesn't even guarantee that, if you iterate over the properties of an object twice in succession, they'll come out in the same order the second time.</p>\n\n<p>If you need things to be ordered, use an array and the Array.prototype.sort method.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Move them to an array, sort that array, and then use that array for your purposes.</p>\n\n<p><a href=\"http://wolfram.kriesing.de/blog/index.php/2008/javascript-sort-object-by-a-value\">Here's a solution I found</a> via Google:</p>\n\n<pre><code>var maxSpeed = {car:300, bike:60, motorbike:200, airplane:1000,\n    helicopter:400, rocket:8*60*60}\nvar sortable = [];\nfor (var vehicle in maxSpeed)\n      sortable.push([vehicle, maxSpeed[vehicle]])\nsortable.sort(function(a, b) {return a[1] - b[1]})\n//[[\"bike\", 60], [\"motorbike\", 200], [\"car\", 300],\n//[\"helicopter\", 400], [\"airplane\", 1000], [\"rocket\", 28800]]\n</code></pre>\n\n<hr>\n\n<p>Once you have the array, you could rebuild the object from the array in the order you like, thus achieving exactly what you set out to do. That would work in all the browsers I know of, but it would be dependent on an implementation quirk, and could break at any time. You should never make assumptions about the order of elements in a JavaScript object.</p>\n",
                    "is_accepted": true,
                    "score": 179
                },
                {
                    "body": "<p>For completeness sake, this function returns <strong>sorted array</strong> of object properties:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function sortObject(obj) {\n    var arr = [];\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            arr.push({\n                'key': prop,\n                'value': obj[prop]\n            });\n        }\n    }\n    arr.sort(function(a, b) { return a.value - b.value; });\n    //arr.sort(function(a, b) { a.value.toLowerCase().localeCompare(b.value.toLowerCase()); }); //use this to sort as strings\n    return arr; // returns array\n}\n\nvar list = {\"you\": 100, \"me\": 75, \"foo\": 116, \"bar\": 15};\nvar arr = sortObject(list);\nconsole.log(arr); // [{key:\"bar\", value:15}, {key:\"me\", value:75}, {key:\"you\", value:100}, {key:\"foo\", value:116}]\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/lalatino/mcuzr/\">Jsfiddle with the code above is here</a>. This solution is based on <a href=\"http://wolfram.kriesing.de/blog/index.php/2008/javascript-sort-object-by-a-value\">this article</a>.</p>\n\n<p><a href=\"http://jsfiddle.net/lalatino/mcuzr/86/\">Updated fiddle for sorting strings is here.</a> You can remove both additional .toLowerCase() conversions from it for case sensitive string comparation.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I am following <a href=\"http://stackoverflow.com/a/13758701/1053612\">the solution given by <strong>slebetman</strong></a> (go read it for all the details), but adjusted, since your object is non-nested.</p>\n\n<pre><code>// First create the array of keys/values so that we can sort it:\nvar sort_array = [];\nfor (var key in list) {\n    sort_array.push({key:key,value:list[key]});\n}\n\n// Now sort it:\nsort_array.sort(function(x,y){return x.value - y.value});\n\n// Now process that object with it:\nfor (var i=0;i&lt;sort_array.length;i++) {\n    var item = list[sort_array[i].key];\n\n    // now do stuff with each item\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>We don't want to duplicate the entire data structure, or use an array where we need an associative array.</p>\n\n<p>Here's another way to do the same thing as bonna:</p>\n\n<pre><code>var list = {\"you\": 100, \"me\": 75, \"foo\": 116, \"bar\": 15};\nkeysSorted = Object.keys(list).sort(function(a,b){return list[a]-list[b]})\nalert(keysSorted);     // bar,me,you,foo\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>Underscore.js or Lodash.js for advanced array or object sorts</p>\n\n<pre><code> var data={\n        \"models\": {\n\n            \"LTI\": [\n                \"TX\"\n            ],\n            \"Carado\": [\n                \"A\",\n                \"T\",\n                \"A(\u043f\u0430\u0441\u0441)\",\n                \"A(\u0433\u0440\u0443\u0437)\",\n                \"T(\u043f\u0430\u0441\u0441)\",\n                \"T(\u0433\u0440\u0443\u0437)\",\n                \"A\",\n                \"T\"\n            ],\n            \"SPARK\": [\n                \"SP110C 2\",\n                \"sp150r 18\"\n            ],\n            \"Autobianchi\": [\n                \"A112\"\n            ]\n        }\n    };\n\n    var arr=[],\n        obj={};\n    for(var i in data.models){\n      arr.push([i, _.sortBy(data.models[i],function (el){return el;})]);\n    }\n    arr=_.sortBy(arr,function (el){\n      return el[0];\n    });\n    _.map(arr,function (el){return obj[el[0]]=el[1];});\n     console.log(obj);\n</code></pre>\n\n<p><a href=\"http://jsbin.com/Oxeyuqa/11/edit?js,console\" rel=\"nofollow\">demo</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Your objects can have any amount of properties and you can choose to sort by whatever object property you want, number or string, if you put the objects in an array. Consider this object:</p>\n\n<pre><code>var arrayOfObjects = [   \n    {\n        name: 'Diana',\n        born: 1373925600000, // Mon, Jul 15 2013\n        num: 4,\n        sex: 'male'\n    },\n    {\n\n        name: 'Beyonce',\n        born: 1366832953000, // Wed, Apr 24 2013\n        num: 2,\n        sex: 'male'\n    },\n    {            \n        name: 'Albert',\n        born: 1370288700000, // Mon, Jun 3 2013\n        num: 3,\n        sex: 'female'\n    },    \n    {\n        name: 'Doris',\n        born: 1354412087000, // Sat, Dec 1 2012\n        num: 1,\n        sex: 'male'\n    }\n];\n</code></pre>\n\n<p>sort by date born, oldest first</p>\n\n<pre><code>// use slice() to copy the array and not just make a reference\nvar byDate = arrayOfObjects.slice(0);\nbyDate.sort(function(a,b) {\n    return a.born - b.born;\n});\nconsole.log('by date:');\nconsole.log(byDate);\n</code></pre>\n\n<p>sort by name</p>\n\n<pre><code>var byName = arrayOfObjects.slice(0);\nbyName.sort(function(a,b) {\n    var x = a.name.toLowerCase();\n    var y = b.name.toLowerCase();\n    return x &lt; y ? -1 : x &gt; y ? 1 : 0;\n});\n\nconsole.log('by name:');\nconsole.log(byName);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/xsM5s/16/\">http://jsfiddle.net/xsM5s/16/</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Another way to solve this:-</p>\n\n<pre><code>var res = [{\"s1\":5},{\"s2\":3},{\"s3\":8}].sort(function(obj1,obj2){ \n var prop1;\n var prop2;\n for(prop in obj1) {\n  prop1=prop;\n }\n for(prop in obj2) {\n  prop2=prop;\n }\n //the above two for loops will iterate only once because we use it to find the key\n return obj1[prop1]-obj2[prop2];\n});\n</code></pre>\n\n<p>//<strong>res</strong> will have the result array</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Thank you and continue answer @Nosredna</p>\n\n<p>Now that we understand object need to be converted to array then sort the array. this is useful for sorting array (or converted object to array) by string: </p>\n\n<pre><code>Object {6: Object, 7: Object, 8: Object, 9: Object, 10: Object, 11: Object, 12: Object}\n   6: Object\n   id: \"6\"\n   name: \"PhD\"\n   obe_service_type_id: \"2\"\n   __proto__: Object\n   7: Object\n   id: \"7\"\n   name: \"BVC (BPTC)\"\n   obe_service_type_id: \"2\"\n   __proto__: Object\n\n\n    //Sort options\n    var sortable = [];\n    for (var vehicle in options)\n    sortable.push([vehicle, options[vehicle]]);\n    sortable.sort(function(a, b) {\n        return a[1].name &lt; b[1].name ? -1 : 1;\n    });\n\n\n    //sortable =&gt; prints  \n[Array[2], Array[2], Array[2], Array[2], Array[2], Array[2], Array[2]]\n    0: Array[2]\n    0: \"11\"\n    1: Object\n        id: \"11\"\n        name: \"AS/A2\"\n        obe_service_type_id: \"2\"\n        __proto__: Object\n        length: 2\n        __proto__: Array[0]\n    1: Array[2]\n    0: \"7\"\n    1: Object\n        id: \"7\"\n        name: \"BVC (BPTC)\"\n        obe_service_type_id: \"2\"\n        __proto__: Object\n        length: 2\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This could be a simple way to handle it as a real ordered object. Not sure how slow it is. also might be better with a while loop.</p>\n\n<pre><code>Object.sortByKeys = function(myObj){\n  var keys = Object.keys(myObj)\n  keys.sort()\n  var sortedObject = Object()\n  for(i in keys){\n    key = keys[i]\n    sortedObject[key]=myObj[key]\n   }\n\n  return sortedObject\n\n}\n</code></pre>\n\n<p>And then I found this invert function from:\n<a href=\"http://nelsonwells.net/2011/10/swap-object-key-and-values-in-javascript/\" rel=\"nofollow\">http://nelsonwells.net/2011/10/swap-object-key-and-values-in-javascript/</a></p>\n\n<pre><code>Object.invert = function (obj) {\n\n  var new_obj = {};\n\n  for (var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      new_obj[obj[prop]] = prop;\n    }\n  }\n\n  return new_obj;\n};\n</code></pre>\n\n<p>So </p>\n\n<pre><code>var list = {\"you\": 100, \"me\": 75, \"foo\": 116, \"bar\": 15};\nvar invertedList = Object.invert(list)\nvar invertedOrderedList = Object.sortByKeys(invertedList)\nvar orderedList = Object.invert(invertedOrderedList)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this. Even your object is not having the property based on which you are trying to sort also will get handled. </p>\n\n<p>Just call it by sending property with object. </p>\n\n<pre><code>var sortObjectByProperty = function(property,object){\n\n    console.time(\"Sorting\");\n    var  sortedList      = [];\n         emptyProperty   = [];\n         tempObject      = [];\n         nullProperty    = [];\n    $.each(object,function(index,entry){\n        if(entry.hasOwnProperty(property)){\n            var propertyValue = entry[property];\n            if(propertyValue!=\"\" &amp;&amp; propertyValue!=null){\n              sortedList.push({key:propertyValue.toLowerCase().trim(),value:entry});  \n            }else{\n                emptyProperty.push(entry);\n           }\n        }else{\n            nullProperty.push(entry);\n        }\n    });\n\n      sortedList.sort(function(a,b){\n           return a.key &lt; b.key ? -1 : 1;\n         //return a.key &lt; b.key?-1:1;   // Asc \n         //return a.key &lt; b.key?1:-1;  // Desc\n      });\n\n\n    $.each(sortedList,function(key,entry){\n        tempObject[tempObject.length] = entry.value;\n     });\n\n    if(emptyProperty.length&gt;0){\n        tempObject.concat(emptyProperty);\n    }\n    if(nullProperty.length&gt;0){\n        tempObject.concat(nullProperty);\n    }\n    console.timeEnd(\"Sorting\");\n    return tempObject;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If I have a JavaScript object such as:</p>\n\n<pre><code>var list = {\"you\": 100, \"me\": 75, \"foo\": 116, \"bar\": 15};\n</code></pre>\n\n<p>is there a way to sort the properties based on value? So that I end up with</p>\n\n<pre><code>list = {\"bar\": 15, \"me\": 75, \"you\": 100, \"foo\": 116};\n</code></pre>\n\n<p>I'm having a real brain-dead moment regarding this.</p>\n",
            "last_activity_date": 1411560164,
            "question_id": 1069666,
            "score": 126,
            "tags": [
                "javascript",
                "sorting",
                "properties",
                "object"
            ],
            "title": "Sorting JavaScript Object by property value"
        },
        {
            "answer_count": 44,
            "answers": [
                {
                    "body": "<blockquote>\n  <p><em><strong>Note to readers!</em></strong></p>\n  \n  <p>As commenters have pointed out, this solution is \"clever\", and as\n  clever solutions often are, it's memory intensive and relatively\n  slow. If performance is a concern for you, don't use this solution!</p>\n</blockquote>\n\n<p>A simple function is all you need</p>\n\n<pre><code>function zeroFill( number, width )\n{\n  width -= number.toString().length;\n  if ( width &gt; 0 )\n  {\n    return new Array( width + (/\\./.test( number ) ? 2 : 1) ).join( '0' ) + number;\n  }\n  return number + \"\"; // always return a string\n}\n</code></pre>\n\n<p>you could bake this into a library if you want to conserve namespace or whatever.  Like with <a href=\"http://docs.jquery.com/Core/jQuery.extend#object\">jQuery's extend</a>.</p>\n",
                    "is_accepted": true,
                    "score": 88
                },
                {
                    "body": "<p>Here's a quick function I came up with to do the job. If anyone has a simpler approach, feel free to share!</p>\n\n<pre><code>function zerofill(number, length) {\n    // Setup\n    var result = number.toString();\n    var pad = length - result.length;\n\n    while(pad &gt; 0) {\n    \tresult = '0' + result;\n    \tpad--;\n    }\n\n    return result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I actually had to come up with something like this recently.\nI figured there had to be a way to do it without using loops.</p>\n\n<p>This is what I came up with.</p>\n\n<pre><code>function zeroPad(num, numZeros) {\n    var n = Math.abs(num);\n    var zeros = Math.max(0, numZeros - Math.floor(n).toString().length );\n    var zeroString = Math.pow(10,zeros).toString().substr(1);\n    if( num &lt; 0 ) {\n        zeroString = '-' + zeroString;\n    }\n\n    return zeroString+n;\n}\n</code></pre>\n\n<p>Then just use it providing a number to zero pad:</p>\n\n<pre><code>&gt; zeroPad(50,4);\n\"0050\"\n</code></pre>\n\n<p>If the number is larger than the padding, the number will expand beyond the padding:</p>\n\n<pre><code>&gt; zeroPad(51234, 3);\n\"51234\"\n</code></pre>\n\n<p>Decimals are fine too!</p>\n\n<pre><code>&gt; zeroPad(51.1234, 4);\n\"0051.1234\"\n</code></pre>\n\n<p>If you don't mind polluting the global namespace you can add it to Number directly:</p>\n\n<pre><code>Number.prototype.leftZeroPad = function(numZeros) {\n    var n = Math.abs(this);\n    var zeros = Math.max(0, numZeros - Math.floor(n).toString().length );\n    var zeroString = Math.pow(10,zeros).toString().substr(1);\n    if( this &lt; 0 ) {\n        zeroString = '-' + zeroString;\n    }\n\n    return zeroString+n;\n}\n</code></pre>\n\n<p>And if you'd rather have decimals take up space in the padding:</p>\n\n<pre><code>Number.prototype.leftZeroPad = function(numZeros) {\n    var n = Math.abs(this);\n    var zeros = Math.max(0, numZeros - n.toString().length );\n    var zeroString = Math.pow(10,zeros).toString().substr(1);\n    if( this &lt; 0 ) {\n        zeroString = '-' + zeroString;\n    }\n\n    return zeroString+n;\n}\n</code></pre>\n\n<p>Cheers!</p>\n\n<hr>\n\n<hr>\n\n<p><a href=\"http://stackoverflow.com/users/2030088/xdr\">XDR</a> came up with <strong>a logarithmic variation</strong> that seems to perform better:</p>\n\n<pre><code>function zeroPad (num, numZeros) {\n    var an = Math.abs (num);\n    var digitCount = 1 + Math.floor (Math.log (an) / Math.LN10);\n    if (digitCount &gt;= numZeros) {\n        return num;\n    }\n    var zeroString = Math.pow (10, numZeros - digitCount).toString ().substr (1);\n    return num &lt; 0 ? '-' + zeroString + an : zeroString + an;\n}\n</code></pre>\n\n<hr>\n\n<p>Speaking of performance, <a href=\"http://stackoverflow.com/users/1608468/tomsmeding\">tomsmeding</a> <a href=\"http://jsperf.com/left-zero-pad\" rel=\"nofollow\">compared the top 3 answers</a> (<a href=\"http://jsperf.com/left-zero-pad/10\" rel=\"nofollow\">4 with the log variation</a>).  Guess which one <em>majorly</em> outperformed the other two? :)</p>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>This method isn't faster, but it's fairly native.</p>\n\n<pre><code>zeroPad = function (num, count) {\n    return [Math.pow(10, count - num.toString().length), num].join('').substr(1);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function zeroPad(num,digits){ return ((num/Math.pow(10,digits))+'').slice(2) }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>This one is less native, but may be the fastest...</p>\n\n<pre><code>zeroPad = function (num, count) {\n    var pad = (num + '').length - count;\n    while(--pad &gt; -1) {\n        num = '0' + num;\n    }\n    return num;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Our tests were bogus because mine had a typo.</p>\n\n<pre><code>zeroPad = function (num, count) {\n    return ((num / Math.pow(10, count)) + '').substr(2);\n};\n</code></pre>\n\n<p>Paul's is the fastest, but I think .substr is faster than .slice even if it is one character more ;)</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Some monkeypatching also works</p>\n\n<pre><code>String.prototype.padLeft = function (n, c) {\n  if (isNaN(n))\n    return null;\n  c = c || \"0\";\n  return (new Array(n).join(c).substring(0, this.length-n)) + this; \n};\nvar paddedValue = \"123\".padLeft(6); // returns \"000123\"\nvar otherPadded = \"TEXT\".padLeft(8, \" \"); // returns \"    TEXT\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>just wanted to make the comment (but i don't have enough points) that the highest voted answer fails with negative numbers and decimals</p>\n\n<pre><code>function padNumber(n,pad) {\n    p = Math.pow(10,pad);\n    a = Math.abs(n);\n    g = (n&lt;0);\n    return (a &lt; p) ?  ((g ? '-' : '') + (p+a).toString().substring(1)) : n;\n}\n\npadNumber( -31.235, 5);\n\n\"-00031.235\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The quick and dirty way:</p>\n\n<pre><code>y = (new Array(count + 1 - x.toString().length)).join('0') + x;\n</code></pre>\n\n<p>For x = 5 and count = 6 you'll have y = \"000005\"</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>If the fill number is known in advance not to exceed a certain value, there's another way to do this with no loops:</p>\n\n<pre><code>var fillZeroes = \"00000000000000000000\";  // max number of zero fill ever asked for in global\n\nfunction zeroFill(number, width) {\n    // make sure it's a string\n    var input = number + \"\";  \n    var prefix = \"\";\n    if (input.charAt(0) === '-') {\n        prefix = \"-\";\n        input = input.slice(1);\n        --width;\n    }\n    var fillAmt = Math.max(width - input.length, 0);\n    return prefix + fillZeroes.slice(0, fillAmt) + input;\n}\n</code></pre>\n\n<p>Test cases here: <a href=\"http://jsfiddle.net/jfriend00/N87mZ/\" rel=\"nofollow\">http://jsfiddle.net/jfriend00/N87mZ/</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>To pad at the end of the number, use num.toFixed</p>\n\n<p>for example:</p>\n\n<pre><code>  document.getElementById('el').value = amt.toFixed(2);\n</code></pre>\n\n<p>It's the simplest solution i've found, and it works.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Yet another version :</p>\n\n<pre><code>function zPad(s,n){\n    return (new Array(n+1).join('0')+s).substr(-Math.max(n,s.toString().length));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Simple way. You could add string multiplication for the pad and turn it into a function.</p>\n\n<pre><code>var pad = \"000000\";\nvar n = '5';\nvar result = (pad+n).slice(-pad.length);\n</code></pre>\n\n<p>As a function,</p>\n\n<pre><code>function paddy(n, p, c) {\n    var pad_char = typeof c !== 'undefined' ? c : '0';\n    var pad = new Array(1 + p).join(pad_char);\n    return (pad + n).slice(-pad.length);\n}\nvar fu = paddy(14, 5); // 00014\nvar bar = paddy(2, 4, '#'); // ###2\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 122
                },
                {
                    "body": "<pre><code>function pad(toPad, padChar, length){\n    return (String(toPad).length &lt; length)\n        ? new Array(length - String(toPad).length + 1).join(padChar) + String(toPad)\n        : toPad;\n}\n</code></pre>\n\n<p><code>pad(5, 0, 6)</code>      = <code>000005</code></p>\n\n<p><code>pad('10', 0, 2)</code>   = <code>10  // don't pad if not necessary</code></p>\n\n<p><code>pad('S', 'O', 2)</code>  = <code>SO</code></p>\n\n<p>...etc.</p>\n\n<p>Cheers</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function zeroFill(number, width) {\n    width -= (number.toString().length - /\\./.test(number));\n    if (width &gt; 0) {\n        return new Array(width + 1).join('0') + number;\n    }\n    return number + \"\"; // always return a string\n}\n</code></pre>\n\n<p>Slight changes made to Peter's code. With his code if the input is (1.2, 3) the value returned should be 01.2 but it is returning 1.2.  The changes here should correct that.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Even later to the party.</p>\n\n<pre><code>function zfill(num, len) {\n  return(0 &gt; num ? \"-\" : \"\") + (Math.pow(10, len) &lt;= Math.abs(num) ? \"0\" + Math.abs(num) : Math.pow(10, len) + Math.abs(num)).toString().substr(1)\n}\n</code></pre>\n\n<p>This handles negatives and situations where the number is longer than the field width. And floating-point.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Mnah...  I have not seen a \"ultimate\" answer to this issue and if you are facing the same challenge I must save you some time by saying that saddly there's not built-in function for that on JavaScript; but there's <strong><a href=\"http://php.net/manual/en/function.str-pad.php\" rel=\"nofollow\">this awesome function</a></strong> in PHP that does a great job on padding strings as well as numbers with single character or arbitrary strings so after some time of banging my head for not having the right tool on JS [mostly for zerofillin' numbers and usually for trimming strings to fit a fixed length] and excessive coding work I decided to write my own function that does the same [\"almost the same\", read on for detail] that the dream PHP function but in comfortable client-side JavaScript.</p>\n\n<pre><code>function str_pad(input,pad_length,pad_string,pad_type){\n    var input=input.toString();\n    var output=\"\";\n    if((input.length&gt;pad_length)&amp;&amp;(pad_type=='STR_PAD_RIGHT')){var output=input.slice(0,pad_length);}\n    else if((input.length&gt;pad_length)&amp;&amp;(pad_type=='STR_PAD_LEFT')){var output=input.slice(input.length-pad_length,input.length);}\n    else if((input.length&lt;pad_length)&amp;&amp;(pad_type=='STR_PAD_RIGHT')){\n        var caracteresNecesarios=pad_length-input.length;\n        var rellenoEnteros=Math.floor(caracteresNecesarios/pad_string.length);\n        var rellenoParte=caracteresNecesarios%pad_string.length;\n        var output=input;\n        for(var i=0;i&lt;rellenoEnteros;i++){var output=output+pad_string;};\n        var output=output+pad_string.slice(0,rellenoParte);\n    }\n    else if((input.length&lt;pad_length)&amp;&amp;(pad_type=='STR_PAD_LEFT')){\n        var caracteresNecesarios=pad_length-input.length;\n        var rellenoEnteros=Math.floor(caracteresNecesarios/pad_string.length);\n        var rellenoParte=caracteresNecesarios%pad_string.length;\n        var output=\"\";\n        for(var i=0;i&lt;rellenoEnteros;i++){var output=output+pad_string;};\n        var output=output+pad_string.slice(0,rellenoParte);\n        var output=output+input;\n    }\n    else if(input.length==pad_length){var output=input;};\n    return output;\n};\n</code></pre>\n\n<p>The only thing that my function does not do is the <code>STR_PAD_BOTH</code> behavior that I could add with some time and a more comfortable keyboard.\nYou might call the function and test it; bet you'll love it if you don't mind that inner code uses one or two words in Spanish... not big deal I think. I did not added comments for \"watermarking\" my coding so you can seamless use it in your work nor I compressed the code for enhanced readability.\nUse it and test it like this and <em>spread the code</em>:</p>\n\n<pre><code>alert(\"str_pad('murcielago',20,'123','STR_PAD_RIGHT')=\"+str_pad('murcielago',20,'123','STR_PAD_RIGHT')+'.');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>function numberPadding(n, p) {\n  n = n.toString();\n  var len = p - n.length;\n  if (len &gt; 0) {\n    for (var i=0; i &lt; len; i++) {\n      n = '0' + n;\n    }\n  }\n  return n;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Late to the party here, but I often use this construct for doing ad-hoc padding of some value <code>n</code>, known to be a positive, decimal:</p>\n\n<pre><code>(offset + n + '').substr(1);\n</code></pre>\n\n<p>Where <code>offset</code> is 10^^digits.</p>\n\n<p>E.g. Padding to 5 digits, where n = 123:</p>\n\n<pre><code>(1e5 + 123 + '').substr(1); // =&gt; 00123\n</code></pre>\n\n<p>The hexidecimal version of this is slightly more verbose:</p>\n\n<pre><code>(0x100000 + 0x123).toString(16).substr(1); // =&gt; 00123\n</code></pre>\n\n<p>Note 1: I like @profitehlolz's solution as well, which is the string version of this, using slice()'s nifty negative-index feature.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Maybe I am to naive, but I think that this works in one simple and efficient line of code (for positive numbers):</p>\n\n<pre><code>padded = (value+Math.pow(10,total_length)+\"\").slice(1)\n</code></pre>\n\n<p>As long as you keep your length OK according to you set of values (as in any zero padding), this should work.</p>\n\n<p>The steps are:</p>\n\n<ol>\n<li>Add the power of 10 with the correct number of 0's [69+1000 = 1069]</li>\n<li>Convert to string with +\"\" [1069 => \"1069\"]</li>\n<li>Slice the first 1, which resulted of first multiplication [\"1069\" => \"069\"]</li>\n</ol>\n\n<p>For natural listings (files, dirs...) is quite useful.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My solution</p>\n\n<pre><code>Number.prototype.PadLeft = function (length, digit) {\n    var str = '' + this;\n    while (str.length &lt; length) {\n        str = (digit || '0') + str;\n    }\n    return str;\n};\n</code></pre>\n\n<p>Usage</p>\n\n<pre><code>var a = 567.25;\na.PadLeft(10); // 0000567.25\n\nvar b = 567.25;\nb.PadLeft(20, '2'); // 22222222222222567.25\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's what I used to pad a number up to 7 characters.</p>\n\n<pre><code>new String(\"0000000\" + number).slice(-7)\n</code></pre>\n\n<p>This approach will probably suffice for most people.</p>\n\n<p>Edit: If you want to make it more generic you can do this:</p>\n\n<pre><code>new String(new Array(padding + 1).join(\"0\") + number).slice(-padding)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I really don't know why, but no one did it in the most obvious way. Here it's my implementation.</p>\n\n<p>Function:</p>\n\n<pre><code>/** Pad a number with 0 on the left */\nfunction zeroPad(number, digits) {\n    var num = number+\"\";\n    while(num.length &lt; digits){\n        num='0'+num;\n    }\n    return num;\n}\n</code></pre>\n\n<p>Prototype:</p>\n\n<pre><code>Number.prototype.zeroPad=function(digits){\n    var num=this+\"\";\n    while(num.length &lt; digits){\n        num='0'+num;\n    }\n    return(num);\n};\n</code></pre>\n\n<p>Very straightforward, I can't see any way how this can be any simpler. For some reason I've seem many times here on SO, people just try to avoid 'for' and 'while' loops at any cost. Using regex will probably cost way more cycles for such a trivial 8 digit padding.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>function numPadding (padding,i) {\n    return padding.substr(0, padding.length - (Math.floor(i).toString().length)) + Math.floor(i );\n}\n\nnumPadding(\"000000000\",234); -&gt; \"000000234\"\n</code></pre>\n\n<p>or</p>\n\n<pre><code>function numPadding (number, paddingChar,i) {\n    var padding = new Array(number + 1).join(paddingChar);\n    return padding.substr(0, padding.length - (Math.floor(i).toString().length)) + Math.floor(i );\n}\n\nnumPadding(8 ,\"0\", 234); -&gt; \"00000234\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>variable-length padding function</p>\n\n<pre><code>function addPaddingZeroes(value, nLength)\n{\n    var sValue = value + ''; //converts to string\n\n    if(sValue.length&gt;=nLength)\n        return sValue;\n    else\n    {\n        for(var nZero = 0; nZero &lt; nLength; nZero++)\n            sValue = \"0\" + sValue;\n        return (sValue).substring(nLength - sValue.length, nLength);    \n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The power of Math!</p>\n\n<p>x = integer to pad<br>\ny = number of zeroes to pad</p>\n\n<pre><code>function zeroPad(x, y)\n{\n   y = Math.max(y-1,0);\n   var n = (x / Math.pow(10,y)).toFixed(y);\n   return n.replace('.','');  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>A simple one for my use case (to fill milliseconds never > 999)\nYou can adjust the number of zeros for yours or use a more generic way if required.</p>\n\n<pre><code>/**\n * @val integer\n * @zeros padding\n */\nfunction zeroFill(val, zeros)\n{\n    var str = val.toString();\n    if (str.length &gt;= zeros)\n        return str;\n    str = \"000\" + str;\n    return str.substring(str.length - zeros);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>After a, long, long time of testing 15 different functions/methods found in this questions answers, I now know which is the best (the most versatile and quickest).</p>\n\n<p>I took 15 functions/methods from the answers to this question and made a script to measure the time taken to execute 100 pads. Each pad would pad the number <code>9</code> with <code>2000</code> zeros. This may seem excessive, and it is, but it gives you a good idea about the scaling of the functions.</p>\n\n<p>The code I used can be found here:\n<a href=\"https://gist.github.com/NextToNothing/6325915\" rel=\"nofollow\">https://gist.github.com/NextToNothing/6325915</a></p>\n\n<p>Feel free to modify and test the code yourself.</p>\n\n<p>In order to get the most versatile method, you have to use a loop. This is because with very large numbers others are likely to fail, whereas, this will succeed.</p>\n\n<p>So, which loop to use? Well, that would be a <code>while</code> loop. A <code>for</code> loop is still fast, but a <code>while</code> loop is just slightly quicker(a couple of ms) - and cleaner.</p>\n\n<p>Answers like those by <code>Wilco</code>, <code>Aleksandar Toplek</code> or <code>Vitim.us</code> will do the job perfectly.</p>\n\n<p>Personally, I tried a different approach. I tried to use a recursive function to pad the string/number. It worked out better than methods joining an array but, still, didn't work as quick as a for loop.</p>\n\n<p>My function is:</p>\n\n<pre><code>function pad(str, max, padder) {\n  padder = typeof padder === \"undefined\" ? \"0\" : padder;\n  return str.toString().length &lt; max ? pad(padder.toString() + str, max, padder) : str;\n}\n</code></pre>\n\n<p>You can use my function with, or without, setting the padding variable. So like this:</p>\n\n<pre><code>pad(1, 3); // Returns '001'\n// - Or -\npad(1, 3, \"x\"); // Returns 'xx1'\n</code></pre>\n\n<p>Personally, after my tests, I would use a method with a while loop, like <code>Aleksandar Toplek</code> or <code>Vitim.us</code>. However, I would modify it slightly so that you are able to set the padding string.</p>\n\n<p>So, I would use this code:</p>\n\n<pre><code>function padLeft(str, len, pad) {\n    pad = typeof pad === \"undefined\" ? \"0\" : pad + \"\";\n    str = str + \"\";\n    while(str.length &lt; len) {\n        str = pad + str;\n    }\n    return str;\n}\n\n// Usage\npadLeft(1, 3); // Returns '001'\n// - Or -\npadLeft(1, 3, \"x\"); // Returns 'xx1'\n</code></pre>\n\n<p>You could also use it as a prototype function, by using this code:</p>\n\n<pre><code>Number.prototype.padLeft = function(len, pad) {\n    pad = typeof pad === \"undefined\" ? \"0\" : pad + \"\";\n    var str = this + \"\";\n    while(str.length &lt; len) {\n        str = pad + str;\n    }\n    return str;\n}\n\n// Usage\nvar num = 1;\n\nnum.padLeft(3); // Returns '001'\n// - Or -\nnum.padLeft(3, \"x\"); // Returns 'xx1'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I use this snipet to get a 5 digits representation</p>\n\n<pre><code>(value+100000).toString().slice(-5) // \"00123\" with value=123\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>was here looking for a standard. had the same idea as Paul and Jonathan... theirs are super cute, here's a horrible-cute version:</p>\n\n<pre><code>function zeroPad(n,l,i){\n    return (i=n/Math.pow(10,l))*i&gt;1?''+n:i.toFixed(l).replace('0.','');\n}\n</code></pre>\n\n<p>works too (we're assuming integers, yes?)...</p>\n\n<pre><code>&gt; zeroPad(Math.pow(2, 53), 20);\n'00009007199254740992'\n&gt; zeroPad(-Math.pow(2, 53), 20);\n'-00009007199254740992'\n&gt; zeroPad(Math.pow(2, 53), 10);\n'9007199254740992'\n&gt; zeroPad(-Math.pow(2, 53), 10);\n'-9007199254740992'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>A simple short recursive function to achieve your proposal: </p>\n\n<pre><code>function padleft (YourNumber, OutputLength){\n    if (YourNumber.length &gt;= OutputLength) {\n        return YourNumber;\n    } else {\n        return padleft(\"0\" +YourNumber, OutputLength);\n    }\n}\n</code></pre>\n\n<ul>\n<li><strong>YourNumber</strong> is the input number.</li>\n<li><strong>OutputLength</strong> is the preferred output number length (with 0 padding left).</li>\n</ul>\n\n<p>This function will add 0 on the left if your input number length is shorter than the wanted output number length.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I can't believe all the complex answers on here...just use this:</p>\n\n<pre>\n<code>\nvar zerofilled = ('0000'+n).slice(-4);\n</code>\n</pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<pre><code>function uint_zerofill(num, width) {\n    var pad = ''; num += '';\n    for (var i = num.length; i &lt; width; i++)\n        pad += '0';\n    return pad + num;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A little math can give you a one-line function:</p>\n\n<pre><code>function zeroFill( number, width ) {\n  return Array(width - parseInt(Math.log(number)/Math.LN10) ).join('0') + number;\n}\n</code></pre>\n\n<p>That's assuming that <code>number</code> is an integer no wider than <code>width</code>. If the calling routine can't make that guarantee, the function will need to make some checks:</p>\n\n<pre><code>function zeroFill( number, width ) {\n    var n = width - parseInt(Math.log(number)/Math.LN10);\n    return (n &lt; 0) ? '' + number : Array(n).join('0') + number;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>First parameter is any real number, second parameter is a positive integer specifying the minimum number of digits to the left of the decimal point and third parameter is an optional positive integer specifying the number if digits to the right of the decimal point.</p>\n\n<pre><code>function zPad(n, l, r){\n    return(a=String(n).match(/(^-?)(\\d*)\\.?(\\d*)/))?a[1]+(Array(l).join(0)+a[2]).slice(-Math.max(l,a[2].length))+('undefined'!==typeof r?(0&lt;r?'.':'')+(a[3]+Array(r+1).join(0)).slice(0,r):a[3]?'.'+a[3]:''):0\n}\n</code></pre>\n\n<p>so</p>\n\n<pre><code>           zPad(6, 2) === '06'\n          zPad(-6, 2) === '-06'\n       zPad(600.2, 2) === '600.2'\n        zPad(-600, 2) === '-600'\n         zPad(6.2, 3) === '006.2'\n        zPad(-6.2, 3) === '-006.2'\n      zPad(6.2, 3, 0) === '006'\n        zPad(6, 2, 3) === '06.000'\n    zPad(600.2, 2, 3) === '600.200'\nzPad(-600.1499, 2, 3) === '-600.149'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>My contribution:</p>\n\n<p>I'm assuming you want the total string length to include the 'dot'. If not it's still simple to rewrite to add an extra zero if the number is a float.</p>\n\n<pre><code>padZeros = function (num, zeros) {\n        return (((num &lt; 0) ? \"-\" : \"\") + Array(++zeros - String(Math.abs(num)).length).join(\"0\") + Math.abs(num));\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Don't reinvent the wheel, use <a href=\"http://epeli.github.io/underscore.string/\" rel=\"nofollow\">underscore string</a>:</p>\n\n<p><a href=\"http://jsfiddle.net/plantface/ob6fnh1e/\" rel=\"nofollow\">jsFiddle</a></p>\n\n<pre><code>var numToPad = '5';\n\nalert(_.str.pad(numToPad, 6, '0')); // yields: '000005'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>My little contribution with this topic (<a href=\"https://gist.github.com/lucasferreira/a881606894dde5568029\" rel=\"nofollow\">https://gist.github.com/lucasferreira/a881606894dde5568029</a>):</p>\n\n<pre><code>/* Autor: Lucas Ferreira - http://blog.lucasferreira.com | Usage: fz(9) or fz(100, 7) */\nfunction fz(o, s) {\n    for(var s=Math.max((+s||2),(n=\"\"+Math.abs(o)).length); n.length&lt;s; (n=\"0\"+n));\n    return (+o &lt; 0 ? \"-\" : \"\") + n;\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>fz(9) &amp; fz(9, 2) == \"09\"\nfz(-3, 2) == \"-03\"\nfz(101, 7) == \"0000101\"\n</code></pre>\n\n<p>I know, it's a pretty dirty function, but it's fast and works even with negative numbers ;)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function zFill(n,l){\n    return \n      (l &gt; n.toString().length) ? \n        ( (Array(l).join('0') + n).slice(-l) ) : n;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Unfortunately, there are a lot of needless complicated suggestions for this problem, typically involving writing your own function to do math or string manipulation or calling a third-party utility.  However, there is a standard way of doing this in the base JavaScript library with just one line of code.  It might be worth wrapping this one line of code in a function to avoid having to specify parameters that you never want to change like the local name or style.</p>\n\n<pre><code>var amount = 5;\n\nvar text = amount.toLocaleString('en-US',\n{\n    style: 'decimal',\n    minimumIntegerDigits: 3,\n    useGrouping: false\n});\n</code></pre>\n\n<p>This will produce the value of \"005\" for text.  You can also use the toLocaleString function of Number to pad zeros to the right side of the decimal point.</p>\n\n<pre><code>var amount = 5;\n\nvar text = amount.toLocaleString('en-US',\n{\n    style: 'decimal',\n    minimumFractionDigits: 2,\n    useGrouping: false\n});\n</code></pre>\n\n<p>This will produce the value of \"5.00\" for text.  Change useGrouping to true to use comma separators for thousands.</p>\n\n<p><a href=\"http://jsfiddle.net/w3xgqmsr/\" rel=\"nofollow\">Complete Example</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The <strong><em>simplest</em></strong>, most straight-forward solution you will find.</p>\n\n<pre><code>function zerofill(number,length) {\n    var output = number.toString();\n    while(output.length &lt; length) {\n      output = '0' + output;\n    }\n    return output;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here a little array solution within a two line function. It checks also if the leading zeros are less than the length of the number string.</p>\n\n<pre><code>function pad(num, z) {\n    if (z &lt; (num = num + '').length) return num;\n    return Array(++z - num.length).join('0') + num;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just stumbled upon this post looking for a native solution. Since there isn't a built-in solution, here's my take on it:</p>\n\n<pre><code>function zerofill(number, width) {\n    var num = '';\n    while (width-- &gt; 0) {\n        num += '0';\n    }\n\n    return num.slice(0, - (number + '').length) + number + '';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the recommended way to zerofill a value in JavaScript? I imagine I could build a custom function to pad zeros on to a typecasted value, but I'm wondering if there is a more direct way to do this?</p>\n\n<p><strong>Note:</strong> By \"zerofilled\" I mean it in the database sense of the word (where a 6-digit zerofilled representation of the number 5 would be \"000005\").</p>\n",
            "last_activity_date": 1425513181,
            "question_id": 1267283,
            "score": 117,
            "tags": [
                "javascript",
                "zerofill"
            ],
            "title": "How can I create a Zerofilled value using JavaScript?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Create the shuffle function (modified from <a href=\"http://snippets.dzone.com/posts/show/849\">here</a>):</p>\n\n<pre><code>//+ Jonas Raoni Soares Silva\n//@ http://jsfromhell.com/array/shuffle [v1.0]\nfunction shuffle(o){ //v1.0\n    for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n    return o;\n};\n</code></pre>\n\n<p>Then, data and call:</p>\n\n<pre><code>var myArray = ['1','2','3','4','5','6','7','8','9'];\nshuffle(myArray);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 238
                },
                {
                    "body": "<p>You could use the <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates Shuffle</a> (code adapted from <a href=\"http://bost.ocks.org/mike/shuffle/\">this site</a>):</p>\n\n<pre><code>function shuffle(array) {\n    var counter = array.length, temp, index;\n\n    // While there are elements in the array\n    while (counter &gt; 0) {\n        // Pick a random index\n        index = Math.floor(Math.random() * counter);\n\n        // Decrease counter by 1\n        counter--;\n\n        // And swap the last element with it\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n\n    return array;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 195
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/2450954/how-to-randomize-a-javascript-array\">How to randomize a javascript array?</a>  </p>\n</blockquote>\n\n\n\n<p>I want to shuffle an array of elements in JavaScript like these:</p>\n\n<pre><code>[0, 3, 3] -&gt; [3, 0, 3]\n[9, 3, 6, 0, 6] -&gt; [0, 3, 6, 9, 6]\n[3, 3, 6, 0, 6] -&gt; [0, 3, 6, 3, 6]\n</code></pre>\n",
            "last_activity_date": 1422735012,
            "question_id": 6274339,
            "score": 116,
            "tags": [
                "javascript"
            ],
            "title": "How can i shuffle an array in JavaScript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Yes, although you can still suffer some of the issues of concurrent programming (mainly race conditions) when using any of the asynchronous APIs such as setInterval and xmlhttp callbacks.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I'd say yes - because virtually all existing (at least all non-trivial) javascript code would break if a browser's javascript engine were to run it asynchronously.</p>\n\n<p>Add to that the fact that <a href=\"http://www.whatwg.org/specs/web-workers/current-work/\">HTML5 already specifies Web Workers</a> (an explicit, standardized API for multi-threading javascript code) introducing multi-threading into the basic Javascript would be mostly pointless.</p>\n\n<p>(<strong>Note to others commenters:</strong> Even though <code>setTimeout/setInterval</code>, HTTP-request onload events (XHR), and UI events (click, focus, etc.) provide a crude impression of multi-threadedness - they are still all executed along a single timeline - one at a time - so even if we don't know their execution order beforehand, there's no need to worry about external conditions changing during the execution of an event handler, timed function or XHR callback.)</p>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>Well, Chrome is multiprocess, and I think every process deals with its own Javascript code, but as far as the code knows, it is \"single-threaded\".</p>\n\n<p>There is no support whatsoever in Javascript for multi-threading, at least not explicitly, so it does not make a difference.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes, although Internet Explorer 9 will compile your Javascript on a separate thread in preparation for execution on the main thread. This doesn't change anything for you as a programmer, though.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>JavaScript/ECMAScript is designed to live within a host environment. That is, JavaScript doesn't actually <em>do anything</em> unless the host environment decides to parse and execute a given script, and provide environment objects that let JavaScript actually be useful (such as the DOM in browsers).</p>\n\n<p>I think a given function or script block will execute line-by-line and that is guaranteed for JavaScript. However, perhaps a host environment could execute multiple scripts at the same time. Or, a host environment could always provide an object that provides multi-threading. <code>setTimeout</code> and <code>setInterval</code> are examples, or at least pseudo-examples, of a host environment providing a way to do some concurrency (even if it's not exactly concurrency).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>That's a good question. I'd love to say \u201cyes\u201d. I can't.</p>\n\n<p>JavaScript is usually considered to have a single thread of execution visible to scripts(*), so that when your inline script, event listener or timeout is entered, you remain completely in control until you return from the end of your block or function.</p>\n\n<p>(*: ignoring the question of whether browsers really implement their JS engines using one OS-thread, or whether other limited threads-of-execution are introduced by WebWorkers.)</p>\n\n<p>However, in reality this <em>isn't quite true</em>, in sneaky nasty ways.</p>\n\n<p>The most common case is immediate events. Browsers will fire these right away when your code does something to cause them:</p>\n\n<pre><code>&lt;textarea id=\"log\" rows=\"20\" cols=\"40\"&gt;&lt;/textarea&gt;\n&lt;input id=\"inp\"&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var l= document.getElementById('log');\n    var i= document.getElementById('inp');\n    i.onblur= function() {\n        l.value+= 'blur\\n';\n    };\n    setTimeout(function() {\n        l.value+= 'log in\\n';\n        l.focus();\n        l.value+= 'log out\\n';\n    }, 100);\n    i.focus();\n&lt;/script&gt;\n</code></pre>\n\n<p>Results in <code>log in, blur, log out</code> on all except IE. These events don't just fire because you called <code>focus()</code> directly, they could happen because you called <code>alert()</code>, or opened a pop-up window, or anything else that moves the focus.</p>\n\n<p>This can also result in other events. For example add an <code>i.onchange</code> listener and type something in the input before the <code>focus()</code> call unfocuses it, and the log order is <code>log in, change, blur, log out</code>, except in Opera where it's <code>log in, blur, log out, change</code> and IE where it's (even less explicably) <code>log in, change, log out, blur</code>.</p>\n\n<p>Similarly calling <code>click()</code> on an element that provides it calls the <code>onclick</code> handler immediately in all browsers (at least this is consistent!).</p>\n\n<p>(I'm using the direct <code>on...</code> event handler properties here, but the same happens with <code>addEventListener</code> and <code>attachEvent</code>.)</p>\n\n<p>There's also a bunch of circumstances in which events can fire whilst your code is threaded in, despite you having done <em>nothing</em> to provoke it. An example:</p>\n\n<pre><code>&lt;textarea id=\"log\" rows=\"20\" cols=\"40\"&gt;&lt;/textarea&gt;\n&lt;button id=\"act\"&gt;alert&lt;/button&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var l= document.getElementById('log');\n    document.getElementById('act').onclick= function() {\n        l.value+= 'alert in\\n';\n        alert('alert!');\n        l.value+= 'alert out\\n';\n    };\n    window.onresize= function() {\n        l.value+= 'resize\\n';\n    };\n&lt;/script&gt;\n</code></pre>\n\n<p>Hit <code>alert</code> and you'll get a modal dialogue box. No more script executes until you dismiss that dialogue, yes? Nope. Resize the main window and you will get <code>alert in, resize, alert out</code> in the textarea.</p>\n\n<p>You might think it's impossible to resize a window whilst a modal dialogue box is up, but not so: in Linux, you can resize the window as much as you like; on Windows it's not so easy, but you can do it by changing the screen resolution from a larger to a smaller one where the window doesn't fit, causing it to get resized.</p>\n\n<p>You might think, well, it's only <code>resize</code> (and probably a few more like <code>scroll</code>) that can fire when the user doesn't have active interaction with the browser because script is threaded. And for single windows you might be right. But that all goes to pot as soon as you're doing cross-window scripting. For all browsers other than Safari, which blocks all windows/tabs/frames when any one of them is busy, you can interact with a document from the code of another document, running in a separate thread of execution and causing any related event handlers to fire.</p>\n\n<p>Places where events that you can cause to be generated can be raised whilst script is still threaded:</p>\n\n<ul>\n<li><p>when the modal popups (<code>alert</code>, <code>confirm</code>, <code>prompt</code>) are open, in all browsers but Opera;</p></li>\n<li><p>during <code>showModalDialog</code> on browsers that support it;</p></li>\n<li><p>the \u201cA script on this page may be busy...\u201d dialogue box, even if you choose to let the script continue to run, allows events like resize and blur to fire and be handled even whilst the script is in the middle of a busy-loop, except in Opera.</p></li>\n<li><p>a while ago for me, in IE with the Sun Java Plugin, calling any method on an applet could allow events to fire and script to be re-entered. This was always a timing-sensitive bug, and it's possible Sun have fixed it since (I certainly hope so).</p></li>\n<li><p>probably more. It's been a while since I tested this and browsers have gained complexity since.</p></li>\n</ul>\n\n<p>In summary, JavaScript appears to most users, most of the time, to have a strict event-driven single thread of execution. In reality, it has no such thing. It is not clear how much of this is simply a bug and how much deliberate design, but if you're writing complex applications, especially cross-window/frame-scripting ones, there is every chance it could bite you\u2009\u2014\u2009and in intermittent, hard-to-debug ways.</p>\n\n<p>If the worst comes to the worst, you can solve concurrency problems by indirecting all event responses. When an event comes in, drop it in a queue and deal with the queue in order later, in a <code>setInterval</code> function. If you are writing a framework that you intend to be used by complex applications, doing this could be a good move. <code>postMessage</code> will also hopefully soothe the pain of cross-document scripting in the future.</p>\n",
                    "is_accepted": true,
                    "score": 302
                },
                {
                    "body": "<p>Actually, a parent window can communicate with child or sibling windows or frames that have their own execution threads running.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Are you asking if javascript is single threaded or if it only does one thing at a time? I can think of a number of cases where javascript will be performing more that one task at a time. For example, setting a timer, then doing something else. The timer will still execute on schedule, even if other js code is running. </p>\n\n<p>You can also have multiple AJAX requests outstanding. If you don't create your objects or track the requests properly, the AJAX responses can appear \"out of order\". For example, send an AJAX request for content, send another for logging an action. The second request may complete before the first. If you are using generic handles to track responses, the first AJAX request will get the logging response (out of order).</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>Try to nest two setTimeout functions within each other and they will behave multithreaded (ie; the outer timer won't wait for the inner one to complete before executing its function).</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>No.</p>\n\n<p>I'm going against the crowd here, but bear with me. A single JS script is intended to be <em>effectively</em> single threaded, but this doesn't mean that it can't be interpreted differently.</p>\n\n<p>Let's say you have the following code...</p>\n\n<pre><code>var list = [];\nfor (var i = 0; i &lt; 10000; i++) {\n  list[i] = i * i;\n}\n</code></pre>\n\n<p>This is written with the expectation that by the end of the loop, the list must have 10000 entries which are the index squared, but the VM could notice that each iteration of the loop does not affect the other, and reinterpret using two threads.</p>\n\n<p>First thread</p>\n\n<pre><code>for (var i = 0; i &lt; 5000; i++) {\n  list[i] = i * i;\n}\n</code></pre>\n\n<p>Second thread</p>\n\n<pre><code>for (var i = 5000; i &lt; 10000; i++) {\n  list[i] = i * i;\n}\n</code></pre>\n\n<p>I'm simplifying here, because JS arrays are more complicated then dumb chunks of memory, but if these two scripts are able to add entries to the array in a thread-safe way, then by the time both are done executing it'll have the same result as the single-threaded version.</p>\n\n<p>While I'm not aware of any VM detecting parallelizable code like this, it seems likely that it could come into existence in the future for JIT VMs, since it could offer more speed in some situations.</p>\n\n<p>Taking this concept further, it's possible that code could be annotated to let the VM know what to convert to multi-threaded code.</p>\n\n<pre><code>// like \"use strict\" this enables certain features on compatible VMs.\n\"use parallel\";\n\nvar list = [];\n\n// This string, which has no effect on incompatible VMs, enables threading on\n// this loop.\n\"parallel for\";\nfor (var i = 0; i &lt; 10000; i++) {\n  list[i] = i * i;\n}\n</code></pre>\n\n<p>Since Web Workers are coming to Javascript, it's unlikely that this... uglier system will ever come into existence, but I think it's safe to say Javascript is single-threaded by tradition.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Ok this is an old thread but been helpfull, I have been trying to deal with a nexted timeout loop for a slideshow animation with hilarious, hypnotic but unintentional results:</p>\n\n<p>General format:</p>\n\n<pre><code>function do_loop()\n{\n\ndo multiple calls to function1 if fucntion2 is done\n\ndo multiple calls to function2 if function1 is done\n\ntimeout (do_loop)\n}\n</code></pre>\n\n<p>Where function 1 &amp; 2 are also on timeout loops.</p>\n\n<p>the problem is that any way I try to send information back from function1 or 2  the main do_loop it gets garbled, despite various attempts to kill the timeout process to stop it running away.....</p>\n\n<p>OK what the solution?</p>\n\n<p>In my case interegating the HTML (DOM) for the final change that should occour in calls to function 1 before running the next function did the trick- this effectively checked that all calls to function1 had completed.</p>\n\n<p>Hope this helps anyone else looking at the same problem.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Javascript is known to be single-threaded in all modern browser implementations, but is that specified in any standard or is it just by tradition? Is it totally safe to assume that javascript is always single-threaded?</p>\n",
            "last_activity_date": 1411075753,
            "question_id": 2734025,
            "score": 318,
            "tags": [
                "javascript",
                "concurrency"
            ],
            "title": "Is javascript guaranteed to be single-threaded?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>This is because of <a href=\"http://en.wikipedia.org/wiki/Same-origin_policy\" rel=\"nofollow\">same-origin policy</a>. See more at <a href=\"https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript\" rel=\"nofollow\">Mozilla Developer Network</a> or <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy\" rel=\"nofollow\">Wikipedia</a>.</p>\n\n<p>Basically, in your example, you need load the <code>http://nqatalog.negroesquisso.pt/login.php</code> page only from <code>nqatalog.negroesquisso.pt</code>, not <code>localhost</code>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wrote an article on this issue a while back, <a href=\"http://www.cypressnorth.com/blog/programming/cross-domain-ajax-request-with-json-response-for-iefirefoxchrome-safari-jquery/\">Cross Domain AJAX</a>.</p>\n\n<p>The easiest way to handle this if you have control of the responding server is to add a response header for:</p>\n\n<pre><code>Access-Control-Allow-Origin: *\n</code></pre>\n\n<p>This will allow cross-domain <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a>. In PHP, you'll want to modify the response like so:</p>\n\n<pre><code>&lt;?php header('Access-Control-Allow-Origin: *'); ?&gt;\n</code></pre>\n\n<p>You can just put the <code>Header set Access-Control-Allow-Origin *</code> setting in the <a href=\"http://en.wikipedia.org/wiki/Apache_HTTP_Server\">Apache</a> configuration or htaccess file. It just work like a charm.</p>\n\n<p>From the comments, this is an important note: <em>the wildcard is going to allow any domain to send requests to your host. I recommend replacing the asterisk with a specific domain that you will be running scripts on</em>.</p>\n",
                    "is_accepted": true,
                    "score": 251
                },
                {
                    "body": "<p>If you <strong>don't</strong> have control of the server, you can simply add this argument to your Chrome launcher: <code>--disable-web-security</code>.</p>\n\n<p>Note that I wouldn't use this for normal \"web surfing\". For reference, see this post: <a href=\"http://stackoverflow.com/questions/3102819/chrome-disable-same-origin-policy\">Chrome: Disable same origin policy</a>.</p>\n\n<p>One you use Phonegap to actually build the application and load it onto the device, this won't be an issue.</p>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>As Matt Mombrea is correct for the server side, you might run into another problem which is whitelisting rejection.</p>\n\n<p>You have to configure your phonegap.plist. (I am using a old version of phonegap)</p>\n\n<p>For cordova, there might be some changes in the naming and directory. But the steps should be mostly the same.</p>\n\n<p>First select Supporting files > PhoneGap.plist</p>\n\n<p><img src=\"http://i.stack.imgur.com/PSSXx.png\" alt=\"enter image description here\"></p>\n\n<p>then under \"ExternalHosts\"</p>\n\n<p>Add a entry, with a value of perhaps \"http://nqatalog.negroesquisso.pt\"\nI am using * for debugging purposes only.</p>\n\n<p><img src=\"http://i.stack.imgur.com/U7fxd.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you're using Apache just add:</p>\n\n<pre><code>&lt;ifModule mod_headers.c&gt;\n    Header set Access-Control-Allow-Origin: *\n&lt;/ifModule&gt;\n</code></pre>\n\n<p>in your configuration. This will cause all responses from your webserver to be accessible from any other site on the internet. If you intend to only allow services on your host to be used by a specific server you can replace the <code>*</code> with the URL of the originating server:</p>\n\n<pre><code>Header set Access-Control-Allow-Origin: http://my.origin.host\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I've run into this a few times when working with various APIs. Often a quick fix is to add \"&amp;callback=?\" to the end of a string. Sometimes the ampersand has to be a character code.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>We also have same problem with phonegap application tested in chrome.\nOne windows machine we use below batch file everyday before Opening Chrome.\nRemember before running this you need to clean all instance of chrome from task manager or you can select chrome to not to run in background.\nBATCH:\n<strong>cd D:\\Program Files (x86)\\Google\\Chrome\\Application\\\nchrome.exe --disable-web-security</strong></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you get this in Angular.js, then make sure you escape your port number like this:</p>\n\n<pre><code>var Project = $resource(\n       'http://localhost\\\\:5648/api/...',\n          {'a':'b'}, \n          {\n            update: { method: 'PUT' }\n          }\n      );\n</code></pre>\n\n<p>See <a href=\"https://github.com/angular/angular.js/issues/1243\" rel=\"nofollow\">https://github.com/angular/angular.js/issues/1243</a> for more info on it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This was the first question/answer that popped up for me when trying to solve the same problem using <a href=\"http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework\" rel=\"nofollow\">ASP.NET MVC</a> as the source of my data. I realize this doesn't solve the <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"nofollow\">PHP</a> question, but it is related enough to be valuable.</p>\n\n<p>I am using ASP.NET MVC. The <a href=\"http://blog.gregbrant.com/post/Adding-Custom-HTTP-Headers-to-an-ASPNET-MVC-Response.aspx\" rel=\"nofollow\">blog post from Greg Brant</a> worked for me. Ultimately, you create an attribute, <code>[HttpHeaderAttribute(\"Access-Control-Allow-Origin\", \"*\")]</code>, that you are able to add to controller actions.</p>\n\n<p>For example:</p>\n\n<pre><code>public class HttpHeaderAttribute : ActionFilterAttribute\n{\n    public string Name { get; set; }\n    public string Value { get; set; }\n    public HttpHeaderAttribute(string name, string value)\n    {\n        Name = name;\n        Value = value;\n    }\n\n    public override void OnResultExecuted(ResultExecutedContext filterContext)\n    {\n        filterContext.HttpContext.Response.AppendHeader(Name, Value);\n        base.OnResultExecuted(filterContext);\n    }\n}\n</code></pre>\n\n<p>And then using it with:</p>\n\n<pre><code>[HttpHeaderAttribute(\"Access-Control-Allow-Origin\", \"*\")]\npublic ActionResult MyVeryAvailableAction(string id)\n{\n    return Json( \"Some public result\" );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This might be handy for anyone who needs to an exception for both 'www' and 'non-www' versions of a referrer:</p>\n\n<pre><code> $referrer = $_SERVER['HTTP_REFERER'];\n $parts = parse_url($referrer);\n $domain = $parts['host'];\n\n if($domain == 'google.com')\n {\n         header('Access-Control-Allow-Origin: http://google.com');\n }\n else if($domain == 'www.google.com')\n {\n         header('Access-Control-Allow-Origin: http://www.google.com');\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you have an <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"nofollow\">ASP.NET</a> / <a href=\"http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework\" rel=\"nofollow\">ASP.NET MVC</a> application, you can include this header via the Web.config file:</p>\n\n<pre><code>&lt;system.webServer&gt;\n  ...\n\n    &lt;httpProtocol&gt;\n        &lt;customHeaders&gt;\n            &lt;!-- Enable Cross Domain AJAX calls --&gt;\n            &lt;remove name=\"Access-Control-Allow-Origin\" /&gt;\n            &lt;add name=\"Access-Control-Allow-Origin\" value=\"*\" /&gt;\n        &lt;/customHeaders&gt;\n    &lt;/httpProtocol&gt;\n&lt;/system.webServer&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\" rel=\"nofollow\">Ruby on Rails</a>, you can do in a controller:</p>\n\n<pre><code>headers['Access-Control-Allow-Origin'] = '*'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I will give you a simple solution for this one. In my case I don't have access to a server. In that case you can change the security policy in your <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\" rel=\"nofollow\">Google Chrome</a> browser to allow Access-Control-Allow-Origin. This is very simple:</p>\n\n<ol>\n<li>Create a Chrome browser shortcut</li>\n<li>Right click short cut icon -> Properties -> Shortcut -> Target </li>\n</ol>\n\n<p>Simple paste in <code>\"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --allow-file-access-from-files --disable-web-security</code>.</p>\n\n<p>The location may differ. Now open Chrome by clicking on that shortcut.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you're writing a Chrome Extension and get this error, then be sure you have added the API's base URL to your <code>manifest.json</code>'s <a href=\"https://developer.chrome.com/extensions/declare_permissions.html\" rel=\"nofollow\">permissions block</a>, example:</p>\n\n<pre><code>\"permissions\": [\n    \"https://itunes.apple.com/\"\n]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>When you receive the request you can </p>\n\n<pre><code>var origin = (req.headers.origin || \"*\");\n</code></pre>\n\n<p>than when you have to response go with something like that:</p>\n\n<pre><code>res.writeHead(\n        206,\n        {\n            'Access-Control-Allow-Credentials': true,\n            'Access-Control-Allow-Origin': origin,\n        }\n    );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm making an <code>Ajax.request</code> to a remote PHP server in a <a href=\"https://en.wikipedia.org/wiki/Sencha_Touch\">Sencha Touch</a> 2 application (wrapped in <a href=\"http://en.wikipedia.org/wiki/PhoneGap\">PhoneGap</a>).</p>\n\n<p>The response from the server is the following:</p>\n\n<blockquote>\n  <p>XMLHttpRequest cannot load <a href=\"http://nqatalog.negroesquisso.pt/login.php\">http://nqatalog.negroesquisso.pt/login.php</a>. Origin <code>http://localhost:8888</code> is not allowed by Access-Control-Allow-Origin.</p>\n</blockquote>\n\n<p>How can I fix this problem?</p>\n",
            "last_activity_date": 1410304226,
            "question_id": 10143093,
            "score": 184,
            "tags": [
                "javascript",
                "ajax",
                "xmlhttprequest"
            ],
            "title": "Origin is not allowed by Access-Control-Allow-Origin"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/DOM/element.clientWidth\">clientWidth</a> and <a href=\"https://developer.mozilla.org/en/DOM/element.clientheight\">clientHeight</a> are DOM properties that show the current in-browser size of the inner dimensions of a DOM element (excluding margin and border). So in the case of an IMG element, this will get the actual dimensions of the visible image.</p>\n\n<pre><code>var img = document.getElementById('imageid'); \n//or however you get a handle to the IMG\nvar width = img.clientWidth;\nvar height = img.clientHeight;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 237
                },
                {
                    "body": "<p>Using JQuery you do this:</p>\n\n<pre><code>var imgWidth = $(\"#imgIDWhatever\").width();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>Also (in addition to Rex and Ian's answers) there is:</p>\n\n<pre><code> imageElement.naturalHeight\n</code></pre>\n\n<p>and:</p>\n\n<pre><code> imageElement.naturalWidth\n</code></pre>\n\n<p>which provide the height and width of the image file itself (rather than just the image element).</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>The thing all other have forgot is that you cant check image size before it loads. When the author checks all of posted methods it will work probably only on localhost. Since jQuery could be used here, remember that 'ready' event is fired before images are loaded. $('#xxx').width() and .height() should be fired in onload event or later.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>You can also use:</p>\n\n<pre><code>var image=document.getElementById(\"imageID\");\nvar width=image.offsetWidth;\nvar height=image.offsetHeight;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can programmatically get the image and check the dimensions using Javascript...</p>\n\n<pre><code>var img = new Image();\nimg.onload = function() {\n  alert(this.width + 'x' + this.height);\n}\nimg.src = 'http://www.google.com/intl/en_ALL/images/logo.gif';\n</code></pre>\n\n<p>This can be useful if the image is not a part of the markup.</p>\n",
                    "is_accepted": false,
                    "score": 418
                },
                {
                    "body": "<p>You can only really do this using a callback of the load event as the size of the image is not known until it has actually finished loading. Something like the code below...</p>\n\n<pre><code>var imgTesting = new Image();\n\nfunction CreateDelegate(contextObject, delegateMethod)\n{\n    return function()\n    {\n        return delegateMethod.apply(contextObject, arguments);\n    }\n}\n\nfunction imgTesting_onload()\n{\n    alert(this.width + \" by \" + this.height);\n}\n\n\nimgTesting.onload = CreateDelegate(imgTesting, imgTesting_onload);\nimgTesting.src = 'yourimage.jpg';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>JQuery Answer:</p>\n\n<pre><code>$height = $('#image_id').height();\n$width  = $('#image_id').width();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>ok guys, i think i improved the source code to be able to let the image load before trying to find out its properties, otherwise it will display '0 * 0', because the next statement would have been called before the file was loaded into the browser. Requires jquery...</p>\n\n<pre><code>function getImgSize(imgSrc){\n    var newImg = new Image();\n    newImg.src = imgSrc;\n    var height = newImg.height;\n    var width = newImg.width;\n    p = $(newImg).ready(function(){\n        return {width: newImg.width, height: newImg.height};\n    });\n    alert (p[0]['width']+\" \"+p[0]['height']);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you are using jQuery and you are requesting image sizes you have to wait until they load or you will only get zeroes.</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"img\").load(function() {\n        alert($(this).height());\n        alert($(this).width());\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>Nicky De Maeyer asked after a background picture; I simply get it from the css and replace the \"url()\":</p>\n\n<pre><code>var div = $('#my-bg-div');\nvar url = div.css('background-image').replace(/^url\\(\\'?(.*)\\'?\\)$/, '$1');\nvar img = new Image();\nimg.src = url;\nconsole.log('img:', img.width + 'x' + img.height); // zero, image not yet loaded\nconsole.log('div:', div.width() + 'x' + div.height());\nimg.onload = function() {\n  console.log('img:', img.width + 'x' + img.height, (img.width/div.width()));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Before using real image size you should load source image. If you use JQuery framework  you can get real image size in simple way.</p>\n\n<pre><code>$(\"ImageID\").load(function(){\n  console.log($(this).width() + \"x\" + $(this).height())\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think an update to these answers is useful, because one of the best voted replies sugests using clientWidth and clientHeight, which I think are now obsolete.</p>\n\n<p>I have done some experiments with HTML5, to see which values actually get returned.</p>\n\n<p>First of all I used a program called Dash to get an overview of the image API.\nIt states that 'height' and 'width' are the rendered height/width of the image and that 'naturalHeight' and 'naturalWidth' are the intrinsic height/width of the image (and are HTML5 only).</p>\n\n<p>I used an image of a beautiful butterfly, from a file with height 300 and width 400. And this Javascript:</p>\n\n<pre><code>var img = document.getElementById(\"img1\");\n\nconsole.log(img.height,           img.width);\nconsole.log(img.naturalHeight,    img.naturalWidth);\nconsole.log($(\"#img1\").height(),  $(\"#img1\").width());\n</code></pre>\n\n<p><strong>Then I used this HTML, with inline CSS for the height and width.</strong></p>\n\n<pre><code>&lt;img style=\"height:120px;width:150px;\" id=\"img1\" src=\"img/Butterfly.jpg\" /&gt;\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>/*Image Element*/ height == 300         width == 400\n           naturalHeight == 300  naturalWidth == 400\n/*Jquery*/      height() == 120       width() == 150\n\n/*Actual Rendered size*/    120                  150\n</code></pre>\n\n<p><strong>I then changed the HTML to the following:</strong></p>\n\n<pre><code>&lt;img height=\"90\" width=\"115\" id=\"img1\" src=\"img/Butterfly.jpg\" /&gt;\n</code></pre>\n\n<p><em>i.e. using height and width attributes rather than inline styles</em></p>\n\n<p>Results:</p>\n\n<pre><code>/*Image Element*/ height ==  90         width == 115\n           naturalHeight == 300  naturalWidth == 400\n/*Jquery*/      height() ==  90       width() == 115\n\n/*Actual Rendered size*/     90                  115\n</code></pre>\n\n<p><strong>I then changed the HTML to the following:</strong></p>\n\n<pre><code>&lt;img height=\"90\" width=\"115\" style=\"height:120px;width:150px;\" id=\"img1\" src=\"img/Butterfly.jpg\" /&gt;\n</code></pre>\n\n<p><em>i.e. using both attributes and CSS, to see which takes precedence.</em></p>\n\n<p>Results:</p>\n\n<pre><code>/*Image Element*/ height ==  90         width == 115\n           naturalHeight == 300  naturalWidth == 400\n/*Jquery*/      height() == 120       width() == 150\n\n/*Actual Rendered size*/    120                  150\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<pre><code>var img = document.getElementById(\"img_id\");\nalert( img.height + \" ;; \" + img .width + \" ;; \" + img .naturalHeight + \" ;; \" + img .clientHeight + \" ;; \" + img.offsetHeight + \" ;; \" + img.scrollHeight + \" ;; \" + img.clientWidth + \" ;; \" + img.offsetWidth + \" ;; \" + img.scrollWidth )\n//But all invalid in Baidu browser  360 browser ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>it is important to remove the browser interpreted setting from the parent div. So if you want the real image width and height you can just use </p>\n\n<pre><code>$('.right-sidebar').find('img').each(function(){\n    $(this).removeAttr(\"width\");\n    $(this).removeAttr(\"height\");\n    $(this).imageResize();\n});\n</code></pre>\n\n<p>This is one TYPO3 Project example from me where I need the real properties of the image to scale it with the right relation. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Recently I had same issue for an error in the flex slider. The first image's height was set smaller due to the loading delay. I tried the following method for resolving that issue and it's worked.    </p>\n\n<pre><code>// create image with a reference id. Id shall be used for removing it from the dom later.\nvar tempImg = $('&lt;img id=\"testImage\" /&gt;');\n//If you want to get the height with respect to any specific width you set.\n//I used window width here.\ntempImg.css('width', window.innerWidth);  \ntempImg[0].onload = function () {\n    $(this).css('height', 'auto').css('display', 'none');\n    var imgHeight = $(this).height();\n    // Remove it if you don't want this image anymore.\n    $('#testImage').remove();\n}\n//append to body\n$('body').append(tempImg);\n//Set an image url. I am using an image which I got from google.\ntempImg[0].src ='http://aspo.org/wp-content/uploads/strips.jpg';\n</code></pre>\n\n<p>This will give you the height with respect to the width you set rather than original width or  Zero. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can apply the onload handler property when the page loads in js or jquery like this:-</p>\n\n<pre><code>$(document).ready(function(){\n   var width = img.clientWidth;\n   var height = img.clientHeight;\n\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Are there any JavaScript or jQuery APIs or methods to get the dimensions of an image on the page?</p>\n",
            "last_activity_date": 1426154358,
            "question_id": 623172,
            "score": 263,
            "tags": [
                "javascript",
                "jquery",
                "image",
                "jquery-plugins"
            ],
            "title": "How to get image size (height &amp; width) using JavaScript?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p><code>navigator.userLanguage</code> for IE</p>\n\n<p><code>window.navigator.language</code> for firefox/opera/safari</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I can't find a single reference that state that it's possible without involving the serverside.</p>\n\n<p>MSDN on:</p>\n\n<ul>\n<li>navigator.<a href=\"http://msdn.microsoft.com/en-us/library/ms533542%28VS.85%29.aspx\" rel=\"nofollow\">browserLanguage</a></li>\n<li>navigator.<a href=\"http://msdn.microsoft.com/en-us/library/ms534653%28VS.85%29.aspx\" rel=\"nofollow\">systemLanguage</a></li>\n<li>navigator.<a href=\"http://msdn.microsoft.com/en-us/library/ms534713%28VS.85%29.aspx\" rel=\"nofollow\">userLanguage</a></li>\n</ul>\n\n<p>From browserLanguage:</p>\n\n<blockquote>\n  <p>In Microsoft Internet Explorer 4.0 and\n  earlier, the browserLanguage property\n  reflects the language of the installed\n  browser's user interface. For example,\n  if you install a Japanese version of\n  Windows Internet Explorer on an\n  English operating system,\n  browserLanguage would be ja.</p>\n  \n  <p>In Internet Explorer 5 and later,\n  however, the browserLanguage property\n  reflects the language of the operating\n  system regardless of the installed\n  language version of Internet Explorer.\n  However, if Microsoft Windows 2000\n  MultiLanguage version is installed,\n  the browserLanguage property indicates\n  the language set in the operating\n  system's current menus and dialogs, as\n  found in the Regional Options of the\n  Control Panel. For example, if you\n  install a Japanese version of Internet\n  Explorer 5 on an English (United\n  Kingdom) operating system,\n  browserLanguage would be en-gb. If you\n  install Windows 2000 MultiLanguage\n  version and set the language of the\n  menus and dialogs to French,\n  browserLanguage would be fr, even\n  though you have a Japanese version of\n  Internet Explorer.</p>\n  \n  <blockquote>\n    <p>Note  This property does not indicate\n    the language or languages set by the\n    user in Language Preferences, located\n    in the Internet Options dialog box.</p>\n  </blockquote>\n</blockquote>\n\n<p>Furthermore, it looks like <code>browserLanguage</code> is deprecated cause IE8 doesn't list it</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is no decent way to get that setting, at least not something browser independent.</p>\n\n<p>But the server has that info, because it is part of the HTTP request header (the Accept-Language field, see <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4</a>)</p>\n\n<p>So the only reliable way is to get an answer back from the server. You will need something that runs on the server (like .asp, .jsp, .php, CGI) and that \"thing\" can return that info.\nGood examples here: <a href=\"http://www.developershome.com/wap/detection/detection.asp?page=readHeader\">http://www.developershome.com/wap/detection/detection.asp?page=readHeader</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I think the main problem here is that the browser settings don't actually affect the <code>navigator.language</code> property that is obtained via javascript. </p>\n\n<p>What they do affect is the HTTP 'Accept-Language' header, but it appears this value is not available through javascript at all. (Probably why @anddoutoi states he can't find a reference for it that doesn't involve server side.)</p>\n\n<p>I have coded a workaround: I've knocked up a google app engine script at <a href=\"http://ajaxhttpheaders.appspot.com\">http://ajaxhttpheaders.appspot.com</a> that will return you the HTTP request headers via JSONP.</p>\n\n<p>(Note: this is a hack only to be used if you do not have a back end available that can do this for you. In general you should not be making calls to  third party hosted javascript files in your pages unless you have a very high level of trust in the host.)</p>\n\n<p>I intend to leave it there in perpetuity so feel free to use it in your code.</p>\n\n<p>Here's some example code (in jQuery) for how you might use it</p>\n\n<pre><code>$.ajax({ \n    url: \"http://ajaxhttpheaders.appspot.com\", \n    dataType: 'jsonp', \n    success: function(headers) {\n        language = headers['Accept-Language'];\n        nowDoSomethingWithIt(language);\n    }\n});\n</code></pre>\n\n<p>Hope someone finds this useful.</p>\n\n<p>Edit: I have written a small jQuery plugin on github that wraps this functionality: <a href=\"https://github.com/dansingerman/jQuery-Browser-Language\">https://github.com/dansingerman/jQuery-Browser-Language</a></p>\n\n<p>Edit 2: As requested here is the code that is running on AppEngine (super trivial really):</p>\n\n<pre><code>class MainPage(webapp.RequestHandler):\n    def get(self):\n        headers = self.request.headers\n        callback = self.request.get('callback')\n\n        if callback:\n          self.response.headers['Content-Type'] = 'application/javascript'\n          self.response.out.write(callback + \"(\")\n          self.response.out.write(headers)\n          self.response.out.write(\")\")\n        else:\n          self.response.headers['Content-Type'] = 'text/plain'\n          self.response.out.write(\"I need a callback=\")\n\napplication = webapp.WSGIApplication(\n                                     [('/', MainPage)],\n                                     debug=False)\n\ndef main():\n    run_wsgi_app(application)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 151
                },
                {
                    "body": "<pre><code>var language = window.navigator.userLanguage || window.navigator.language;\nalert(language); //works IE/SAFARI/CHROME/FF\n</code></pre>\n\n<p><code>window.navigator.userLanguage</code> is IE only and it's the language set in <strong>Windows Control Panel - Regional Options</strong> and NOT browser language, but you could suppose that a user using a machine with Window Regional settings set to France is probably a French user.</p>\n\n<p><code>navigator.language</code> is FireFox and all other browser.</p>\n\n<p>Some language code: <code>'it'</code> = italy, <code>'en-US'</code> = english US, etc.</p>\n\n<hr>\n\n<p>As pointed out by <em>rcoup</em> and <em>The WebMacheter</em> in comments below, this workaround won't let you discriminate among English dialects when users are viewing website in browsers other than IE.</p>\n\n<p><em><code>window.navigator.language</code> (Chrome/FF/Safari) returns always browser language and not browser's preferred language, but: \"it's pretty common for English speakers (gb, au, nz, etc) to have an en-us version of Firefox/Chrome/Safari.\" Hence <code>window.navigator.language</code> will still return <code>en-US</code> even if the user preferred language is <code>en-GB</code>.</em></p>\n",
                    "is_accepted": false,
                    "score": 113
                },
                {
                    "body": "<p>DanSingerman has a very good solution for this question.</p>\n\n<p>The only reliable source for the language is in the HTTP-request header.\nSo you need a server-side script to reply the request-header or at least the <code>Accept-Language</code> field back to you.</p>\n\n<p>Here is a very simple Node.js server which should be compatible with DanSingermans jQuery plugin.</p>\n\n<pre><code>var http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end(JSON.stringify(req.headers));\n}).listen(80,'0.0.0.0');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For what it's worth, Wikimedia's Universal Language Selector library has hooks for doing this:\n<a href=\"https://www.mediawiki.org/wiki/Extension:UniversalLanguageSelector\" rel=\"nofollow\">https://www.mediawiki.org/wiki/Extension:UniversalLanguageSelector</a></p>\n\n<p>See the function getFrequentLanguageList in resources/js/ext.uls.init.js . Direct link:\n<a href=\"https://gerrit.wikimedia.org/r/gitweb?p=mediawiki/extensions/UniversalLanguageSelector.git;a=blob;f=resources/js/ext.uls.init.js;hb=HEAD\" rel=\"nofollow\">https://gerrit.wikimedia.org/r/gitweb?p=mediawiki/extensions/UniversalLanguageSelector.git;a=blob;f=resources/js/ext.uls.init.js;hb=HEAD</a></p>\n\n<p>It still depends on the server, or more specifically, the MediaWiki API. The reason I'm showing it is that it may provide a good example of getting all the useful information about the user's language: browser language, Accept-Language, geolocation (with getting country/language info from the CLDR), and of course, user's own site preferences.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Dan Singerman's answer has an issue that the header fetched has to be used right away, due to the asynchronous nature of jQuery's ajax.  However, with his google app server, I wrote the following, such that the header is set as part of the initial set up and can be used at later time.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n\n    var bLocale='raw'; // can be used at any other place\n\n    function processHeaders(headers){\n        bLocale=headers['Accept-Language'];\n        comma=bLocale.indexOf(',');\n        if(comma&gt;0) bLocale=bLocale.substring(0, comma);\n    }\n\n&lt;/script&gt;\n\n&lt;script src=\"jquery-1.11.0.js\"&gt;&lt;/script&gt;\n\n&lt;script type=\"application/javascript\" src=\"http://ajaxhttpheaders.appspot.com?callback=processHeaders\"&gt;&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1 id=\"bLocale\"&gt;Should be the browser locale here&lt;/h1&gt;\n\n&lt;/body&gt;\n\n&lt;script&gt;\n\n    $(\"#bLocale\").text(bLocale);\n\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I created x-echo a nodejs module: <a href=\"https://www.npmjs.org/package/x-echo\" rel=\"nofollow\">https://www.npmjs.org/package/x-echo</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Update of year 2014.</p>\n\n<p>Now there is a way to get Accept-Languages in Firefox and Chrome using <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage.languages\">navigator.languages</a></strong>  (works in Chrome >= 32 and Firefox >= 32)</p>\n\n<p>Also, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage.language\">navigator.language</a> in Firefox these years reflects most preferred language of content, not language of UI. But since this notion is yet to be supported by other browsers, it is not very useful.</p>\n\n<p>So, to get most preferred content language when possible, and use UI language as fallback:</p>\n\n<p><code>navigator.languages? navigator.languages[0] : (navigator.language || navigator.userLanguage)\n</code></p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>If you only need to support certain modern browsers then you can now use:</p>\n\n<pre><code>navigator.languages\n</code></pre>\n\n<p>which returns an array of the user's language preferences in the order specified by the user.</p>\n\n<p>As of now (Sep 2014) this works on:\nChrome (v37), \nFirefox (v32) and \nOpera (v24)</p>\n\n<p>But not on:\nIE (v11)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you have control of a backend and are using django, a 4 line implementation of Dan's idea is:</p>\n\n<pre><code>def get_browser_lang(request):\nif request.META.has_key('HTTP_ACCEPT_LANGUAGE'):\n    return JsonResponse({'response': request.META['HTTP_ACCEPT_LANGUAGE']})\nelse:\n    return JsonResponse({'response': settings.DEFAULT_LANG})\n</code></pre>\n\n<p>then in urls.py:</p>\n\n<pre><code>url(r'^browserlang/$', views.get_browser_lang, name='get_browser_lang'),\n</code></pre>\n\n<p>and on the front end:</p>\n\n<pre><code>$.get(lg('SERVER') + 'browserlang/', function(data){\n    var lang_code = data.response.split(',')[0].split(';')[0].split('-')[0];\n});\n</code></pre>\n\n<p>(you have to set DEFAULT_LANG in settings.py of course)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar lang = window.navigator.languages ? window.navigator.languages[0] : null;\n    lang = lang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\nif (lang.indexOf('-') !== -1)\n    lang = lang.split('-')[0];\n\nif (lang.indexOf('_') !== -1)\n    lang = lang.split('_')[0];\n&lt;/script&gt;\n</code></pre>\n\n<p>I only needed the primary component for my needs, but you can easily just use the full string. Works with latest Chrome, Firefox, Safari and IE10+.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Based on the answer here <a href=\"http://stackoverflow.com/questions/220231/accessing-the-web-pages-http-headers-in-javascript\">Accessing the web page&#39;s HTTP Headers in JavaScript</a> I built the following script to get the browser language:</p>\n\n<pre><code>var req = new XMLHttpRequest();\nreq.open('GET', document.location, false);\nreq.send(null);\nvar headers = req.getAllResponseHeaders().toLowerCase();\nvar contentLanguage = headers.match( /^content-language\\:(.*)$/gm );\nif(contentLanguage[0]) {\n    return contentLanguage[0].split(\":\")[1].trim().toUpperCase();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you don't want to rely on an external server and you have one of your own you can use a simple PHP script to achieve the same behavior as @DanSingerman answer.</p>\n\n<p><strong>languageDetector.php</strong>:</p>\n\n<pre><code>&lt;?php\n$lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);\necho json_encode($lang);\n?&gt;\n</code></pre>\n\n<p>And just change this lines from the jQuery script:</p>\n\n<pre><code>url: \"languageDetector.php\",\ndataType: 'json',\nsuccess: function(language) {\n    nowDoSomethingWithIt(language);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have been trying to detect the browser language preference using JavaScript.</p>\n\n<p>If I set the browser language in IE in <code>Tools&gt;Internet Options&gt;General&gt;Languages</code>, how do I read this value using JavaScript?</p>\n\n<p>Same problem for Firefox. I'm not able to detect the setting for <code>tools&gt;options&gt;content&gt;languages</code> using <code>navigator.language</code>.</p>\n\n<p>Using  <code>navigator.userLanguage</code>  , it detects the setting done thru\n<code>Start&gt;ControlPanel&gt;RegionalandLanguageOptions&gt;Regional Options</code> tab.</p>\n\n<p>I have tested with <code>navigator.browserLanguage</code> and <code>navigator.systemLanguage</code> but neither  returns the value for the first setting(<code>Tools&gt;InternetOptions&gt;General&gt;Languages</code>)</p>\n\n<p>I found a <a href=\"http://www.velocityreviews.com/forums/t99655-save-way-to-detect-browser-language.html\">link</a> which discusses this in detail, but the question remains unanswered :(</p>\n",
            "last_activity_date": 1424699101,
            "question_id": 1043339,
            "score": 177,
            "tags": [
                "javascript",
                "localization",
                "internationalization"
            ],
            "title": "JavaScript for detecting browser language preference"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The function linked above is insufficient. It fails to escape <code>^</code> or <code>$</code> (start and end of string), or <code>-</code>, which in a character group is used for ranges.</p>\n\n<p>Use this function:</p>\n\n<pre><code>RegExp.escape= function(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&amp;');\n};\n</code></pre>\n\n<p>While it may seem unnecessary at first glance, escaping <code>-</code> (as well as <code>^</code>) makes the function suitable for escaping characters to be inserted into a character class as well as the body of the regex.</p>\n\n<p>Escaping <code>/</code> makes the function suitable for escaping characters to be used in a JS regex literal for later eval.</p>\n\n<p>As there is no downside to escaping either of them it makes sense to escape to cover wider use cases.</p>\n\n<p>And yes, it is a disappointing failing that this is not part of standard JavaScript.</p>\n",
                    "is_accepted": true,
                    "score": 155
                },
                {
                    "body": "<p>In jQueryUI's autocomplete widget (version 1.9.1) they use a slightly different regex (Line 6753), here's the regular expression combined with @bobince approach.</p>\n\n<pre><code>RegExp.escape = function( value ) {\n     return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&amp;\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>This is a shorter version.</p>\n\n<pre><code>RegExp.escape = function(s) {\n    return s.replace(/[$-\\/?[-^{|}]/g, '\\\\$&amp;');\n}\n</code></pre>\n\n<p>This includes the non-meta characters of <code>%</code>, <code>&amp;</code>, <code>'</code>, and <code>,</code>, but the JavaScript RegExp specification allows this.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" rel=\"nofollow\">Mozilla Developer Network's Guide to Regular Expressions</a> provides this escaping function:</p>\n\n<pre><code>function escapeRegExp(string){\n    return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The functions in the other answers are overkill for escaping entire regular expressions (they may be useful for escaping <em>parts</em> of regular expressions that will later be concatenated into bigger regexps).</p>\n\n<p>If you escape an entire regexp and are done with it, quoting the metacharacters that are either standalone (<code>.</code>, <code>?</code>, <code>+</code>, <code>*</code>, <code>^</code>, <code>$</code>, <code>|</code>, <code>\\</code>) or start something (<code>(</code>, <code>[</code>, <code>{</code>) is all you need:</p>\n\n<pre><code>String.prototype.regexEscape = function regexEscape() {\n  return this.replace(/[.?+*^$|({[\\\\]/g, '\\\\$&amp;');\n};\n</code></pre>\n\n<p>And yes, it's disappointing that JavaScript doesn't have a function like this built-in.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I just want to create a regular expression out of any possible string.</p>\n\n<pre><code>var usersString = \"Hello?!*`~World()[]\";\nvar expression = new RegExp(RegExp.escape(usersString))\nvar matches = \"Hello\".match(expression);\n</code></pre>\n\n<p>Is there a built in method for that?  If not, what do people use?  Ruby has <a href=\"http://ruby-doc.org/core/classes/Regexp.html#M001195\"><code>RegExp.escape</code></a>.  I don't feel like I'd need to write my own, there's gotta be something standard out there.  Thanks!</p>\n",
            "last_activity_date": 1417138375,
            "question_id": 3561493,
            "score": 104,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "Is there a RegExp.escape function in Javascript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>HTML5 provides Canvas.toDataURL(mimetype), which is implemented in Opera, Firefox, and Safari 4 beta.  There are a number of security restrictions however (mostly to do with drawing content from another origin onto the canvas).</p>\n\n<p>So you don't need an additional library, eg.</p>\n\n<pre><code> &lt;canvas id=canvas width=200 height=200&gt;&lt;/canvas&gt;\n &lt;script&gt;\n      window.onload = function() {\n          var canvas = document.getElementById(\"canvas\");\n          var context = canvas.getContext(\"2d\");\n          context.fillStyle = \"green\";\n          context.fillRect(50, 50, 100, 100);\n          // no argument defaults to image/png; image/jpeg, etc also work on some\n          // implementations -- image/png is the only one that must be supported per spec.\n          window.location = canvas.toDataURL(\"image/png\");\n      }\n &lt;/script&gt;\n</code></pre>\n\n<p>Theoretically this should create and then navigate to an image with a green square in the middle of it, but i haven't tested.</p>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>Oops. Original answer was specific to a similar question. This has been revised: </p>\n\n<pre><code>var canvas = document.getElementById(\"mycanvas\");\nvar img    = canvas.toDataURL(\"image/png\");\n</code></pre>\n\n<p>with the value in IMG you can write it out as a new Image like so:</p>\n\n<pre><code>document.write('&lt;img src=\"'+img+'\"/&gt;');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 348
                },
                {
                    "body": "<p>I would use \"<a href=\"http://wkhtmltopdf.org/\" rel=\"nofollow\">wkhtmltopdf</a>\" it just work great. It uses webkit engine (used in Chrome, Safari, etc.) and it is very easy to use:</p>\n\n<pre><code>wkhtmltopdf stackoverflow.com/questions/923885/ this_question.pdf\n</code></pre>\n\n<p>That's it! (Try it)</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Another interesting solution is <a href=\"http://phantomjs.org/\" rel=\"nofollow\">PhantomJS</a>.\nIt's a headless WebKit scriptable with JavaScript or CoffeeScript.</p>\n\n<p>One of the use case is screen capture : you can programmatically capture web contents, including SVG and Canvas and/or Create web site screenshots with thumbnail preview.</p>\n\n<p>The best entry point is  the <a href=\"https://github.com/ariya/phantomjs/wiki/Screen-Capture\" rel=\"nofollow\">screen capture</a> wiki page.</p>\n\n<p>Here is a good example for polar clock (from RaphaelJS):</p>\n\n<pre><code>&gt;phantomjs rasterize.js http://raphaeljs.com/polar-clock.html clock.png\n</code></pre>\n\n<p>Do you want to render a page to a PDF ?</p>\n\n<pre><code>&gt; phantomjs rasterize.js 'http://en.wikipedia.org/w/index.php?title=Jakarta&amp;printable=yes' jakarta.pdf\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I thought I'd extend the scope of this question a bit, with some useful tidbits on the matter.</p>\n\n<p>In order to get the canvas as an image, you should do the following:</p>\n\n<pre><code>var canvas = document.getElementById(\"mycanvas\");\nvar image = canvas.toDataURL(\"image/png\");\n</code></pre>\n\n<p>You can use this to write the image to the page:</p>\n\n<pre><code>document.write('&lt;img src=\"'+image+'\"/&gt;');\n</code></pre>\n\n<p>Where \"image/png\" is a mime type (png is the only one that must be supported). If you would like an array of the supported types you can do something along the lines of this:</p>\n\n<pre><code>var imageMimes = ['image/png', 'image/bmp', 'image/gif', 'image/jpeg', 'image/tiff']; //Extend as necessary \nvar acceptedMimes = new Array();\nfor(i = 0; i &lt; imageMimes.length; i++) {\n    if(canvas.toDataURL(imageMimes[i]).search(imageMimes[i])&gt;=0) {\n        acceptedMimes[acceptedMimes.length] = imageMimes[i];\n    }\n}\n</code></pre>\n\n<p>You only need to run this once per page - it should never change through a page's lifecycle.</p>\n\n<p>If you wish to make the user download the file as it is saved you can do the following:</p>\n\n<pre><code>var canvas = document.getElementById(\"mycanvas\");\nvar image = canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\"); //Convert image to 'octet-stream' (Just a download, really)\nwindow.location.href = image;\n</code></pre>\n\n<p>If you're using that with different mime types, be sure to change both instances of image/png, but not the image/octet-stream.\nIt is also worth mentioning that if you use any cross-domain resources in rendering your canvas, you will encounter a security error when you try to use the toDataUrl method.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Some help if you do the download trough server (this way you can name/convert/post-process/etc your file):</p>\n\n<p>-Post data using <code>toDataURL</code></p>\n\n<p>-Set the headers</p>\n\n<pre><code>$filename = \"test.jpg\"; //or png\nheader('Content-Description: File Transfer');\nif($msie = !strstr($_SERVER[\"HTTP_USER_AGENT\"],\"MSIE\")==false)      \n  header(\"Content-type: application/force-download\");else       \n  header(\"Content-type: application/octet-stream\"); \nheader(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");   \nheader(\"Content-Transfer-Encoding: binary\"); \nheader(\"Expires: 0\"); header(\"Cache-Control: must-revalidate\"); \nheader(\"Pragma: public\");\n</code></pre>\n\n<p>-create image</p>\n\n<pre><code>$data = $_POST['data'];\n$img = imagecreatefromstring(base64_decode(substr($data,strpos($data,',')+1)));\n</code></pre>\n\n<p>-export image <a href=\"http://stackoverflow.com/a/2570015/669677\">as JPEG</a></p>\n\n<pre><code>$width = imagesx($img);\n$height = imagesy($img);\n$output = imagecreatetruecolor($width, $height);\n$white = imagecolorallocate($output,  255, 255, 255);\nimagefilledrectangle($output, 0, 0, $width, $height, $white);\nimagecopy($output, $img, 0, 0, 0, 0, $width, $height);\nimagejpeg($output);\nexit();\n</code></pre>\n\n<p>-or <a href=\"http://stackoverflow.com/a/4813540/669677\">as transparent PNG</a></p>\n\n<pre><code>imagesavealpha($img, true);\nimagepng($img);\ndie($img);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I thought I would add something that might be useful.  If you are using jQuery which quite a lot of people do then you would implement the accepted answer like so</p>\n\n<pre><code>var canvas = $(\"#mycanvas\")[0];\nvar img = canvas.toDataURL(\"image/png\");\n\n$(\"#elememt-to-write-to\").html('&lt;img src=\"'+img+'\"/&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Is it possible to capture or print what's displayed in an html canvas as an image or pdf? </p>\n\n<p>I'd like to generate an image via canvas, and be able to generate a png from that image.</p>\n",
            "last_activity_date": 1416608368,
            "question_id": 923885,
            "score": 342,
            "tags": [
                "javascript",
                "html5",
                "canvas"
            ],
            "title": "Capture HTML Canvas as gif/jpg/png/pdf?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Quirksmode had a <a href=\"http://web.archive.org/web/20080225210716/http://www.quirksmode.org/js/iframe.html\">post on this</a>.</p>\n\n<p>Since the page is now broken, and only accessible via archive.org, I reproduced it here:</p>\n\n<p><strong>IFrames</strong></p>\n\n<p>On this page I give a short overview of accessing iframes from the page they\u2019re on. Not surprisingly, there are some browser considerations.</p>\n\n<p>An iframe is an inline frame, a frame that, while containing a completely separate page with its own URL, is nonetheless placed inside another HTML page. This gives very nice possibilities in web design. The problem is to access the iframe, for instance to load a new page into it. This page explains how to do it.</p>\n\n<p><strong>Frame or object?</strong></p>\n\n<p>The fundamental question is whether the iframe is seen as a frame or as an object.</p>\n\n<ul>\n<li>As explained on the <a href=\"http://web.archive.org/web/20080225210716/http://www.quirksmode.org/js/frameintro.html\">Introduction to frames</a> pages, if you use frames the browser creates a frame hierarchy for you (<code>top.frames[1].frames[2]</code> and such). Does the iframe fit into this frame hierarchy?</li>\n<li>Or does the browser see an iframe as just another object, an object that happens to have a src property? In that case we have to use a standard <a href=\"http://web.archive.org/web/20080225210716/http://www.quirksmode.org/js/dom.html\">DOM call</a> (like <code>document.getElementById('theiframe'))</code> to access it.\nIn general browsers allow both views on 'real' (hard-coded) iframes, but generated iframes cannot be accessed as frames.</li>\n</ul>\n\n<p><strong>NAME attribute</strong></p>\n\n<p>The most important rule is to give any iframe you create a <code>name</code> attribute, even if you also use an <code>id</code>.</p>\n\n<pre><code>&lt;iframe src=\"iframe_page1.html\"\n    id=\"testiframe\"\n    name=\"testiframe\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Most browsers need the <code>name</code> attribute to make the iframe part of the frame hierarchy. Some browsers (notably Mozilla) need the <code>id</code> to make the iframe accessible as an object. By assigning both attributes to the iframe you keep your options open. But <code>name</code> is far more important than <code>id</code>.</p>\n\n<p><strong>Access</strong></p>\n\n<p>Either you access the iframe as an object and change its <code>src</code> or you access the iframe as a frame and change its <code>location.href</code>.</p>\n\n<p>document.getElementById('iframe_id').src = 'newpage.html';\nframes['iframe_name'].location.href = 'newpage.html';\nThe frame syntax is slightly preferable because Opera 6 supports it but not the object syntax.</p>\n\n<p><strong>Accessing the iframe</strong></p>\n\n<p>So for a complete cross\u2013browser experience you should give the iframe a name and use the</p>\n\n<pre><code>frames['testiframe'].location.href\n</code></pre>\n\n<p>syntax. As far as I know this always works.</p>\n\n<p><strong>Accessing the document</strong></p>\n\n<p>Accessing the document inside the iframe is quite simple, provided you use the <code>name</code> attribute. To count the number of links in the document in the iframe, do\n<a href=\"http://web.archive.org/web/20080225210716/http://www.quirksmode.org/js/iframe.html#\"><code>frames['testiframe'].document.links.length</code></a>.</p>\n\n<p><strong>Generated iframes</strong></p>\n\n<p>When you generate an iframe through the <a href=\"http://web.archive.org/web/20080225210716/http://www.quirksmode.org/dom/intro.html\">W3C DOM</a> the iframe is not immediately entered into the <code>frames</code> array, though, and the <code>frames['testiframe'].location.href</code> syntax will not work right away. The browser needs a little time before the iframe turns up in the array, time during which no script may run.</p>\n\n<p>The <code>document.getElementById('testiframe').src</code> syntax works fine in all circumstances.</p>\n\n<p>The <code>target</code> attribute of a link doesn't work either with generated iframes, except in Opera, even though I gave my generated iframe both a <code>name</code> and an <code>id</code>.</p>\n\n<p>The lack of <code>target</code> support means that you must use JavaScript to change the content of a generated iframe, but since you need JavaScript anyway to generate it in the first place, I don't see this as much of a problem.</p>\n\n<p><strong>Text size in iframes</strong></p>\n\n<p>A curious Explorer 6 only bug:</p>\n\n<p>When you change the text size through the View menu, text sizes in iframes are correctly changed. However, this browser does not change the line breaks in the original text, so that part of the text may become invisible, or line breaks may occur while the line could still hold another word.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Assume your iFrame's id is \"targetFrame\" and the function you want to call is <code>targetFunction()</code>:</p>\n\n<pre><code>document.getElementById('targetFrame').contentWindow.targetFunction();\n</code></pre>\n\n<p>You can also access the frame using <code>window.frames</code> instead of <code>document.getElementById</code>.</p>\n\n<pre><code>window.frames[0].frameElement.contentWindow.targetFunction();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 308
                },
                {
                    "body": "<p>The IFRAME should be in the <code>frames[]</code> collection. Use something like</p>\n\n<pre><code>frames['iframeid'].method();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>In the IFRAME, make your function public to the window object:</p>\n\n<pre><code>window.myFunction = function(args) {\n   doStuff();\n}\n</code></pre>\n\n<p>For access from the parent page, use this:</p>\n\n<pre><code>var iframe = document.getElementById(\"iframeId\");\niframe.contentWindow.myFunction(args);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>There are some quirks to be aware of here.</p>\n\n<ol>\n<li><p><code>HTMLIFrameElement.contentWindow</code> is probably the easier way, but it's not quite a standard property and some browsers don't support it, mostly older ones. This is because the DOM Level 1 HTML standard has nothing to say about the <code>window</code> object.</p></li>\n<li><p>You can also try <code>HTMLIFrameElement.contentDocument.defaultView</code>, which a couple of older browsers allow but IE doesn't. Even so, the standard doesn't explicitly say that you get the <code>window</code> object back, for the same reason as (1), but you can pick up a few extra browser versions here if you care.</p></li>\n<li><p><code>window.frames['name']</code> returning the window is the oldest and hence most reliable interface. But you then have to use a <code>name=\"...\"</code> attribute to be able to get a frame by name, which is slightly ugly/<strike>deprecated</strike>/transitional. (<code>id=\"...\"</code> would be better but IE doesn't like that.)</p></li>\n<li><p><code>window.frames[number]</code> is also very reliable, but knowing the right index is the trick. You can get away with this eg. if you know you only have the one iframe on the page.</p></li>\n<li><p>It is entirely possible the child iframe hasn't loaded yet, or something else went wrong to make it inaccessible. You may find it easier to reverse the flow of communications: that is, have the child iframe notify its <code>window.parent</code> script when it has finished loaded and is ready to be called back. By passing one of its own objects (eg. a callback function) to the parent script, that parent can then communicate directly with the script in the iframe without having to worry about what HTMLIFrameElement it is associated with.</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 104
                },
                {
                    "body": "<pre><code>       $(\"#myframe\").load(function() {\n            alert(\"loaded\");\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Just for the record, I've ran into the same issue today but this time the page was embedded in an object, not an iframe (since it was an XHTML 1.1 document). Here's how it works with objects:</p>\n\n<pre><code>document\n  .getElementById('targetFrame')\n  .contentDocument\n  .defaultView\n  .targetFunction();\n</code></pre>\n\n<p>(sorry for the ugly line breaks, didn't fit in a single line)</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Calling a parent JS function from <code>iframe</code> is possible, but only when both the parent and the page loaded in the <code>iframe</code> are from same domain i.e. abc.com, and both are using same protocol i.e. both are either on <code>http://</code> or <code>https://</code>. </p>\n\n<p>The call will fail in below mentioned cases:</p>\n\n<ol>\n<li>Parent page and the iframe page are from different domain.<br/></li>\n<li>They are using different protocols, one is on http:// and other is on https://.<br/></li>\n</ol>\n\n<p>Any workaround to this restriction would be extremely insecure. </p>\n\n<p>For instance, imagine I registered the domain superwinningcontest.com and sent out links to people's emails. When they loaded up the main page, I could hide a few <code>iframe</code>s in there and read their Facebook feed, check recent Amazon or PayPal transactions, or--if they used a service that did not implement sufficient security--transfer money out of their accounts. That's why JavaScript is limited to same-domain and same-protocol.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>Same things but a bit easier way will be <a href=\"http://dotnetspidor.blogspot.com/2011/07/refresh-parent-page-partially-from.html\" rel=\"nofollow\">How to refresh parent page from page within iframe</a>.\nJust call the parent page's function to invoke javascript function to reload the page:</p>\n\n<pre><code>window.location.reload();\n</code></pre>\n\n<p>Or do this directly from the page in iframe:</p>\n\n<pre><code>window.parent.location.reload();\n</code></pre>\n\n<p>Both works.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Continuing with <a href=\"http://stackoverflow.com/users/7441/joel-anair\">JoelAnair's</a> answer:</p>\n\n<p>For more robustness, use as follows:</p>\n\n<pre><code>var el = document.getElementById('targetFrame');\n\nif(el.contentWindow)\n{\n   el.contentWindow.targetFunction();\n}\nelse if(el.contentDocument)\n{\n   el.contentDocument.targetFunction();\n}\n</code></pre>\n\n<p>Workd like charm :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If the iFrame and the containing document is on a different domain, these methods might not work, but there is a solution:</p>\n\n<p>For example, if document A contains an iframe element that contains document B, and script in document A calls postMessage() on the Window object of document B, then a message event will be fired on that object, marked as originating from the Window of document A. The script in document A might look like:</p>\n\n<pre><code>var o = document.getElementsByTagName('iframe')[0];\no.contentWindow.postMessage('Hello world', 'http://b.example.org/');\n</code></pre>\n\n<p>To register an event handler for incoming events, the script would use addEventListener() (or similar mechanisms). For example, the script in document B might look like:</p>\n\n<pre><code>window.addEventListener('message', receiver, false);\nfunction receiver(e) {\n  if (e.origin == 'http://example.com') {\n    if (e.data == 'Hello world') {\n      e.source.postMessage('Hello', e.origin);\n    } else {\n      alert(e.data);\n    }\n  }\n}\n</code></pre>\n\n<p>This script first checks the domain is the expected domain, and then looks at the message, which it either displays to the user, or responds to by sending a message back to the document which sent the message in the first place.</p>\n\n<p>via <a href=\"http://dev.w3.org/html5/postmsg/#web-messaging\">http://dev.w3.org/html5/postmsg/#web-messaging</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If We want call the parent page javascript function from the iframe which generated from the coding. ex shadowbox or lightbox</p>\n\n<p>window.parent.targetFunction();</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try just <code>parent.myfunction()</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Folowing Nitin Bansal's answer</p>\n\n<p>and for even more robustness:</p>\n\n<pre><code>function getIframeWindow(iframe_object) {\n  var doc;\n\n  if (iframe_object.contentWindow) {\n    return iframe_object.contentWindow;\n  }\n\n  if (iframe_object.window) {\n    return iframe_object.window;\n  } \n\n  if (!doc &amp;&amp; iframe_object.contentDocument) {\n    doc = iframe_object.contentDocument;\n  } \n\n  if (!doc &amp;&amp; iframe_object.document) {\n    doc = iframe_object.document;\n  }\n\n  if (doc &amp;&amp; doc.defaultView) {\n   return doc.defaultView;\n  }\n\n  if (doc &amp;&amp; doc.parentWindow) {\n    return doc.parentWindow;\n  }\n\n  return undefined;\n}\n</code></pre>\n\n<p>and </p>\n\n<pre><code>...\nvar el = document.getElementById('targetFrame');\n\ngetIframeWindow(el).targetFunction();\n...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Injecting code into iframes:<br>\n<a href=\"http://net.tutsplus.com/tutorials/html-css-techniques/how-to-inject-custom-html-and-css-into-an-iframe/\" rel=\"nofollow\">http://net.tutsplus.com/tutorials/html-css-techniques/how-to-inject-custom-html-and-css-into-an-iframe/</a></p>\n\n<p>An example and a short tutorial:<br>\n<a href=\"http://www.dyn-web.com/tutorials/iframes/refs.php\" rel=\"nofollow\">http://www.dyn-web.com/tutorials/iframes/refs.php</a></p>\n\n<p>If the above links are broken search for \"html javascript iframes\", it should find some results.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found quite an elegant solution.</p>\n\n<p>As you said, it's fairly easy to execute code located on the parent document. And that's the base of my code, do to just the opposite.</p>\n\n<p>When my iframe loads, I call a function located on the parent document, passing as an argument a reference to a local function, located in the iframe's document.\nThe parent document now has a direct access to the iframe's function thru this reference.</p>\n\n<p><strong>Example:</strong></p>\n\n<p>On the parent:</p>\n\n<pre><code>function tunnel(fn) {\n    fn();\n}\n</code></pre>\n\n<p>On the iframe:</p>\n\n<pre><code>var myFunction = function() {\n    alert(\"This work!\");\n}\n\nparent.tunnel(myFunction);\n</code></pre>\n\n<p>When the iframe loads, it will call parent.tunnel(YourFunctionReference), which will execute the function received in parameter.</p>\n\n<p>That simple, without having to deal with the all the non-standards methods from the various browsers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use following to call function of a frame in parent page</p>\n\n<pre><code>parent.document.getElementById('frameid').contentWindow.somefunction()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Basically, I have an iframe embedded in a page and the iframe has some <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> routines I need to invoke from the parent page.</p>\n\n<p>Now the opposite is quite simple as you only need to call <code>parent.functionName()</code>, but unfortunately I need exactly the opposite of that.</p>\n\n<p>Please note that my problem is not changing the source <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> of the iframe, but invoking a function defined in the iframe.</p>\n",
            "last_activity_date": 1424881787,
            "question_id": 251420,
            "score": 359,
            "tags": [
                "javascript",
                "html",
                "iframe"
            ],
            "title": "Invoking JavaScript code in an iframe from the parent page"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You can use the <a href=\"http://www.bennadel.com/blog/1504-Ask-Ben-Parsing-CSV-Strings-With-Javascript-Exec-Regular-Expression-Command.htm\">CSVToArray()</a> function mentioned in this blog entry.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    // ref: http://stackoverflow.com/a/1293163/2343\n    // This will parse a delimited string into an array of\n    // arrays. The default delimiter is the comma, but this\n    // can be overriden in the second argument.\n    function CSVToArray( strData, strDelimiter ){\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n            );\n\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )){\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &amp;&amp;\n                strMatchedDelimiter !== strDelimiter\n                ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n\n            }\n\n            var strMatchedValue;\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                    );\n\n            } else {\n\n                // We found a non-quoted value.\n                strMatchedValue = arrMatches[ 3 ];\n\n            }\n\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            arrData[ arrData.length - 1 ].push( strMatchedValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    }\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 148
                },
                {
                    "body": "<p>Im not sure why I couldn't kirtans ex. to work for me. It seemed to be failing on empty fields or maybe fields with trailing commas...</p>\n\n<p>This one seems to handle both. </p>\n\n<p>I did not write the parser code, just a wrapper around the parser function to make this work for a file. see Attribution</p>\n\n<pre><code>    var Strings = {\n        /**\n         * Wrapped csv line parser\n         * @param s string delimited csv string\n         * @param sep separator override\n         * @attribution : http://www.greywyvern.com/?post=258 (comments closed on blog :( )\n         */\n        parseCSV : function(s,sep) {\n            // http://stackoverflow.com/questions/1155678/javascript-string-newline-character\n            var universalNewline = /\\r\\n|\\r|\\n/g;\n            var a = s.split(universalNewline);\n            for(var i in a){\n                for (var f = a[i].split(sep = sep || \",\"), x = f.length - 1, tl; x &gt;= 0; x--) {\n                    if (f[x].replace(/\"\\s+$/, '\"').charAt(f[x].length - 1) == '\"') {\n                        if ((tl = f[x].replace(/^\\s+\"/, '\"')).length &gt; 1 &amp;&amp; tl.charAt(0) == '\"') {\n                            f[x] = f[x].replace(/^\\s*\"|\"\\s*$/g, '').replace(/\"\"/g, '\"');\n                          } else if (x) {\n                        f.splice(x - 1, 2, [f[x - 1], f[x]].join(sep));\n                      } else f = f.shift().split(sep).concat(f);\n                    } else f[x].replace(/\"\"/g, '\"');\n                  } a[i] = f;\n        }\n        return a;\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think I can sufficiently beat <a href=\"http://stackoverflow.com/a/1293163/290340\">Kirtan's answer</a></p>\n\n<p><strong>Enter <a href=\"http://code.google.com/p/jquery-csv/\">jQuery-CSV</a></strong></p>\n\n<p>It's a jquery plugin designed to work as an end-to-end solution for parsing CSV into Javascript data. It handles every single edge case presented in <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>, as well as some that pop up for Excel/Google Spreadsheed exports (ie mostly involving null values) that the spec is missing.</p>\n\n<p><em>Example:</em></p>\n\n<blockquote>\n  <p>track,artist,album,year</p>\n  \n  <p>Dangerous,'Busta Rhymes','When Disaster Strikes',1997</p>\n</blockquote>\n\n<pre><code>// calling this\nmusic = $.csv.toArrays(csv)\n\n// outputs...\n[\n  [\"track\",\"artist\",\"album\",\"year\"],\n  [\"Dangerous\",\"Busta Rhymes\",\"When Disaster Strikes\",\"1997\"]\n]\n\nconsole.log(music[1][2]) // outputs: 'When Disaster Strikes'\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>Oh yeah, I should also probably mention that it's completely configurable.</p>\n\n<pre><code>music = $.csv.toArrays(csv, {\n  delimiter:\"'\", // sets a custom value delimiter character\n  separator:';', // sets a custom field separator character\n});\n</code></pre>\n\n<p><strong>Update 2:</strong></p>\n\n<p>It now works with jQuery on Node.js too. So you have the option of doing either client-side or server-side parsing with the same lib.</p>\n\n<p><em>Disclaimer: I am also the author of jQuery-CSV.</em></p>\n",
                    "is_accepted": false,
                    "score": 108
                },
                {
                    "body": "<p>Here's my PEG(.js) grammar that seems to do ok at RFC 4180 (i.e. it handles the examples at <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">http://en.wikipedia.org/wiki/Comma-separated_values</a>):</p>\n\n<pre><code>start\n  = [\\n\\r]* first:line rest:([\\n\\r]+ data:line { return data; })* [\\n\\r]* { rest.unshift(first); return rest; }\n\nline\n  = first:field rest:(\",\" text:field { return text; })*\n    &amp; { return !!first || rest.length; } // ignore blank lines\n    { rest.unshift(first); return rest; }\n\nfield\n  = '\"' text:char* '\"' { return text.join(''); }\n  / text:[^\\n\\r,]* { return text.join(''); }\n\nchar\n  = '\"' '\"' { return '\"'; }\n  / [^\"]\n</code></pre>\n\n<p>Try it out at <a href=\"http://jsfiddle.net/knvzk/10\">http://jsfiddle.net/knvzk/10</a> or <a href=\"http://pegjs.majda.cz/online\">http://pegjs.majda.cz/online</a>. Download the generated parser at <a href=\"https://gist.github.com/3362830\">https://gist.github.com/3362830</a>.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Why not just use .split(',') ?</p>\n\n<p><a href=\"http://www.w3schools.com/jsref/jsref_split.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_split.asp</a></p>\n\n<pre><code>var str=\"How are you doing today?\";\nvar n=str.split(\" \"); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p>I have an <a href=\"https://github.com/thetalecrafter/excel.js/blob/master/src/csv.js\">implementation</a> as part of a spreadsheet project.</p>\n\n<p>This code is not yet tested thoroughly, but anyone is welcome to use it.</p>\n\n<p>As some of the answers noted though, your implementation can be much simpler if you actually have <a href=\"http://en.wikipedia.org/wiki/Delimiter-separated_values\">DSV</a> or <a href=\"http://www.iana.org/assignments/media-types/text/tab-separated-values\">TSV</a> file, as they disallow the use of the record and field separators in the values. CSV, on the other hand can actually have commas and newlines inside a field, which breaks most regex and split-based approaches.</p>\n\n<pre><code>var CSV = {\nparse: function(csv, reviver) {\n    reviver = reviver || function(r, c, v) { return v; };\n    var chars = csv.split(''), c = 0, cc = chars.length, start, end, table = [], row;\n    while (c &lt; cc) {\n        table.push(row = []);\n        while (c &lt; cc &amp;&amp; '\\r' !== chars[c] &amp;&amp; '\\n' !== chars[c]) {\n            start = end = c;\n            if ('\"' === chars[c]){\n                start = end = ++c;\n                while (c &lt; cc) {\n                    if ('\"' === chars[c]) {\n                        if ('\"' !== chars[c+1]) { break; }\n                        else { chars[++c] = ''; } // unescape \"\"\n                    }\n                    end = ++c;\n                }\n                if ('\"' === chars[c]) { ++c; }\n                while (c &lt; cc &amp;&amp; '\\r' !== chars[c] &amp;&amp; '\\n' !== chars[c] &amp;&amp; ',' !== chars[c]) { ++c; }\n            } else {\n                while (c &lt; cc &amp;&amp; '\\r' !== chars[c] &amp;&amp; '\\n' !== chars[c] &amp;&amp; ',' !== chars[c]) { end = ++c; }\n            }\n            row.push(reviver(table.length-1, row.length, chars.slice(start, end).join('')));\n            if (',' === chars[c]) { ++c; }\n        }\n        if ('\\r' === chars[c]) { ++c; }\n        if ('\\n' === chars[c]) { ++c; }\n    }\n    return table;\n},\n\nstringify: function(table, replacer) {\n    replacer = replacer || function(r, c, v) { return v; };\n    var csv = '', c, cc, r, rr = table.length, cell;\n    for (r = 0; r &lt; rr; ++r) {\n        if (r) { csv += '\\r\\n'; }\n        for (c = 0, cc = table[r].length; c &lt; cc; ++c) {\n            if (c) { csv += ','; }\n            cell = replacer(r, c, table[r][c]);\n            if (/[,\\r\\n\"]/.test(cell)) { cell = '\"' + cell.replace(/\"/g, '\"\"') + '\"'; }\n            csv += (cell || 0 === cell) ? cell : '';\n        }\n    }\n    return csv;\n}\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Here's an extremely simple CSV parser that handles quoted fields with commas, new lines, and escaped double quotation marks. There's no splitting or RegEx. It scans the input string 1-2 characters at a time and builds an array.</p>\n\n<p>Test it at <a href=\"http://jsfiddle.net/vHKYH/\">http://jsfiddle.net/vHKYH/</a>.</p>\n\n<pre><code>function parseCSV(str) {\n    var arr = [];\n    var quote = false;  // true means we're inside a quoted field\n\n    // iterate over each character, keep track of current row and column (of the returned array)\n    for (var row = col = c = 0; c &lt; str.length; c++) {\n        var cc = str[c], nc = str[c+1];        // current character, next character\n        arr[row] = arr[row] || [];             // create a new row if necessary\n        arr[row][col] = arr[row][col] || '';   // create a new column (start with empty string) if necessary\n\n        // If the current character is a quotation mark, and we're inside a\n        // quoted field, and the next character is also a quotation mark,\n        // add a quotation mark to the current column and skip the next character\n        if (cc == '\"' &amp;&amp; quote &amp;&amp; nc == '\"') { arr[row][col] += cc; ++c; continue; }  \n\n        // If it's just one quotation mark, begin/end quoted field\n        if (cc == '\"') { quote = !quote; continue; }\n\n        // If it's a comma and we're not in a quoted field, move on to the next column\n        if (cc == ',' &amp;&amp; !quote) { ++col; continue; }\n\n        // If it's a newline and we're not in a quoted field, move on to the next\n        // row and move to column 0 of that new row\n        if (cc == '\\n' &amp;&amp; !quote) { ++row; col = 0; continue; }\n\n        // Otherwise, append the current character to the current column\n        arr[row][col] += cc;\n    }\n    return arr;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>csvToArray v1.3</p>\n\n<p>A compact (645 bytes) but compliant function to convert a CSV string into a 2D array, conforming to the RFC4180 standard.</p>\n\n<p><a href=\"http://code.google.com/p/csv-to-array/\" rel=\"nofollow\">http://code.google.com/p/csv-to-array/</a></p>\n\n<p>Common Usage: jQuery</p>\n\n<pre><code> $.ajax({\n        url: \"test.csv\",\n        dataType: 'text',\n        cache: false\n }).done(function(csvAsString){\n        csvAsArray=csvAsString.csvToArray();\n });\n</code></pre>\n\n<p>Common usage: Javascript</p>\n\n<pre><code>csvAsArray = csvAsString.csvToArray();\n</code></pre>\n\n<p>Override field separator</p>\n\n<pre><code>csvAsArray = csvAsString.csvToArray(\"|\");\n</code></pre>\n\n<p>Override record separator</p>\n\n<pre><code>csvAsArray = csvAsString.csvToArray(\"\", \"#\");\n</code></pre>\n\n<p>Override Skip Header</p>\n\n<pre><code>csvAsArray = csvAsString.csvToArray(\"\", \"\", 1);\n</code></pre>\n\n<p>Override all</p>\n\n<pre><code>csvAsArray = csvAsString.csvToArray(\"|\", \"#\", 1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Does someone have an idea on where I could find some javascript code to parse CSV data ?</p>\n",
            "last_activity_date": 1402932041,
            "question_id": 1293147,
            "score": 119,
            "tags": [
                "javascript"
            ],
            "title": "Javascript code to parse CSV data"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>See jquery docs example:\n<a href=\"http://api.jquery.com/jQuery.ajax/\" rel=\"nofollow\">http://api.jquery.com/jQuery.ajax/</a>\n(about 2/3 the page)</p>\n\n<p>You may be looking for following code:</p>\n\n<pre><code>    $.ajax({\n     url: 'ajax/test.html',\n     success: function(data) {\n     $('.result').html(data);\n     alert('Load was performed.');\n   }\n});\n</code></pre>\n\n<p>Same page...lower down.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>The only way to return the data from the function would be to make a synchronous call instead of an asynchronous call, but that would freeze up the browser while it's waiting for the response.</p>\n\n<p>You can pass in a callback function that handles the result:</p>\n\n<pre><code>function testAjax(handleData) {\n  $.ajax({\n    url:\"getvalue.php\",  \n    success:function(data) {\n      handleData(data); \n    }\n  });\n}\n</code></pre>\n\n<p>Call it like this:</p>\n\n<pre><code>testAjax(function(output){\n  // here you use the output\n});\n// Note: the call won't wait for the result,\n// so it will continue with the code here while waiting.\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 114
                },
                {
                    "body": "<p>You can't return anything from a function that is asynchronous. What you can return is a <em>promise</em>. I explained how promises work in jQuery in my answers to those questions:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/5150571/javascript-function-that-returns-ajax-call-data\">JavaScript function that returns AJAX call data</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5111695/jquery-jqxhr-cancel-chained-calls-trigger-error-chain\">jQuery jqXHR - cancel chained calls, trigger error chain</a></li>\n</ul>\n\n<p>If you could explain <strong>why</strong> do you want to return the data and what do you want to do with it later, then I might be able to give you a more specific answer how to do it.</p>\n\n<p>Generally, instead of:</p>\n\n<pre><code>function testAjax() {\n  $.ajax({\n    url: \"getvalue.php\",  \n    success: function(data) {\n      return data; \n    }\n  });\n}\n</code></pre>\n\n<p>you can write your testAjax function like this:</p>\n\n<pre><code>function testAjax() {\n  return $.ajax({\n      url: \"getvalue.php\"\n  });\n}\n</code></pre>\n\n<p>Then you can get your promise like this:</p>\n\n<pre><code>var promise = testAjax();\n</code></pre>\n\n<p>You can store your promise, you can pass it around, you can use it as an argument in function calls and you can return it from functions, but when you finally want to <strong>use</strong> your data that is returned by the AJAX call, you have to do it like this:</p>\n\n<pre><code>promise.success(function (data) {\n  alert(data);\n});\n</code></pre>\n\n<p>If your data is available at this point then this function will be invoked immediately. If it isn't then it will be invoked as soon as the data is available.</p>\n\n<p>The whole point of doing all of this is that your data is not available immediately after the call to $.ajax because it is asynchronous. Promises is a nice abstraction for functions to say: I can't return you the data because I don't have it yet and I don't want to block and make you wait so here's a <em>promise</em> instead and you'll be able to use it later, or to just give it to someone else and be done with it.</p>\n\n<p>See this <a href=\"http://jsfiddle.net/jW68r/\" rel=\"nofollow\"><strong>DEMO</strong></a>.</p>\n\n<h2>UPDATE</h2>\n\n<p>Currently jQuery Promises are not compatible with the <a href=\"http://promises-aplus.github.io/promises-spec/\" rel=\"nofollow\">Promises/A+ specification</a> which means that they may not cooperate very well with other <a href=\"https://github.com/promises-aplus/promises-spec/blob/master/implementations.md\" rel=\"nofollow\">Promises/A+ conformant implementations</a>.</p>\n\n<p>What I explained above is a way to use promises to do something asynchronously that in synchronous code would be achieved by returning a value. But a synchronous function call can do two things - it can either return a value (if it can) or throw an exception (if it can't return a value). Promises/A+ addresses both of those use cases in a way that is pretty much as powerful as exception handling in synchronous code. The jQuery version handles the equivalent of returning a value just fine but the equivalent of complex exception handling is somewhat problematic.</p>\n\n<p>In particular, the whole point of exception handling in synchronous code is not just giving up with a nice message, but trying to fix the problem and continue the execution, or possibly rethrowing the same or a different exception for some other parts of the program to handle. In synchronous code you have a call stack. In asynchronous call you don't and advanced exception handling inside of your promises as required by the Promises/A+ specification can really help you write code that will handle errors and exceptions in a meaningful way even for complex use cases.</p>\n\n<p>For differences between jQuery and other implementations, and how to convert jQuery promises to Promises/A+ compliant, see <a href=\"https://github.com/kriskowal/q/wiki/Coming-from-jQuery\" rel=\"nofollow\">this explanation</a> on the Q library wiki.</p>\n\n<p>For more info see:</p>\n\n<ul>\n<li><a href=\"http://bugs.jquery.com/ticket/14510\" rel=\"nofollow\">http://bugs.jquery.com/ticket/14510</a></li>\n<li><a href=\"https://github.com/jquery/jquery/issues/1722\" rel=\"nofollow\">https://github.com/jquery/jquery/issues/1722</a></li>\n<li><a href=\"https://gist.github.com/domenic/3889970\" rel=\"nofollow\">https://gist.github.com/domenic/3889970</a></li>\n<li><a href=\"http://promises-aplus.github.io/promises-spec/\" rel=\"nofollow\">http://promises-aplus.github.io/promises-spec/</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/es6/promises/</a></li>\n</ul>\n\n<p>Interesting talks:</p>\n\n<ul>\n<li><a href=\"http://youtu.be/V2Q13hzTGmA\" rel=\"nofollow\">Boom, Promises/A+ Was Born</a> by Domenic Denicola (JSConfUS 2013)</li>\n<li><a href=\"http://youtu.be/hf1T_AONQJU\" rel=\"nofollow\">Redemption from Callback Hell</a> by Michael Jackson and Domenic Denicola (HTML5DevConf 2013)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 175
                },
                {
                    "body": "<p>you can add async option to false <strong>and</strong> return outside the ajax call.</p>\n\n<pre><code>function testAjax() {\n    var result=\"\";\n    $.ajax({\n      url:\"getvalue.php\",\n      async: false,  \n      success:function(data) {\n         result = data; \n      }\n   });\n   return result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>Idk if you guys solved it but I recommend another way to do it, and it works :)</p>\n\n<pre><code>    ServiceUtil = ig.Class.extend({\n        base_url : 'someurl',\n\n        sendRequest: function(request)\n        {\n            var url = this.base_url + request;\n            var requestVar = new XMLHttpRequest();\n            dataGet = false;\n\n            $.ajax({\n                url: url,\n                async: false,\n                type: \"get\",\n                success: function(data){\n                    ServiceUtil.objDataReturned = data;\n                }\n            });\n            return ServiceUtil.objDataReturned;                \n        }\n    })\n</code></pre>\n\n<p>So the main idea here is that, by adding async: false, then you make everything waits until the data is retrieved. Then you assign it to a static variable of the class, and everything magically works :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>i have something like this, where it is a simple call to a script that gives me back a value, a string..</p>\n\n<pre><code>function testAjax() {\n    $.ajax({\n      url:\"getvalue.php\",  \n      success:function(data) {\n         return data; \n      }\n   });\n}\n</code></pre>\n\n<p>but if i call something like this</p>\n\n<pre><code>var output  = testAjax(svar);  // output will be undefined...\n</code></pre>\n\n<p>so how can i return the value?\nthe below code does not seem to work either...</p>\n\n<pre><code>function testAjax() {\n    $.ajax({\n      url:\"getvalue.php\",  \n      success:function(data) {\n\n      }\n   });\n   return data; \n}\n</code></pre>\n",
            "last_activity_date": 1421187032,
            "question_id": 5316697,
            "score": 125,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "jQuery: Return data after ajax call success"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You can't get the difference between two objects. To do what you want, you need to get a timestamp via Date().getTime();</p>\n\n<p>getDate() simply returns a formatted string, and it doesn't make sense to decrease a string by a string.</p>\n\n<p>So, your code would look like:</p>\n\n<pre><code>var date1 = new Date('7/11/2010');\nvar date2 = new Date('12/12/2010');\nvar diffDays = date2.getTime() - date1.getTime(); \nalert(diffDays);\n</code></pre>\n\n<p>Edit: TNi's code should work like a charm. I'm getting fed up at this keyboard typing race...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://jsfiddle.net/JS69L/1/\">Here is one way</a>:</p>\n\n<pre><code>var date1 = new Date(\"7/11/2010\");\nvar date2 = new Date(\"12/12/2010\");\nvar timeDiff = Math.abs(date2.getTime() - date1.getTime());\nvar diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)); \nalert(diffDays)\u200b;\n</code></pre>\n\n<p>Observe that we need to enclose the date in quotes. The rest of the code gets the time difference in milliseconds and then divides to get the number of days.</p>\n",
                    "is_accepted": true,
                    "score": 98
                },
                {
                    "body": "<pre><code>var date1 = new Date(\"7/11/2010\");\nvar date2 = new Date(\"8/11/2010\");\nvar diffDays = parseInt((date2 - date1) / (1000 * 60 * 60 * 24)); \n\nalert(diffDays )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Most of these solutions ignore a case that fails when the two dates involved go across a daylight saving change. In this case, the date on which day light saving change happens will have a duration in milliseconds which != 1000*60*60*24, so the typical calculation will fail.</p>\n\n<p>A more accurate way to get the number of days between two javascript dates can be written as follows:</p>\n\n<pre><code>var _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\n// a and b are javascript Date objects\nfunction dateDiffInDays(a, b) {\n  // Discard the time and time-zone information.\n  var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n  var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n\n  return Math.floor((utc2 - utc1) / _MS_PER_DAY);\n}\n</code></pre>\n\n<p>This works because UTC time never observes DST. See <a href=\"http://stackoverflow.com/questions/5495803/does-utc-observe-daylight-saving-time\">Does UTC observe daylight saving time?</a></p>\n",
                    "is_accepted": false,
                    "score": 161
                },
                {
                    "body": "<p>Here is a solution using <a href=\"http://momentjs.com\" rel=\"nofollow\">moment.js</a>:</p>\n\n<pre><code>var a = moment('7/11/2010','M/D/YYYY');\nvar b = moment('12/12/2010','M/D/YYYY');\nvar diffDays = b.diff(a, 'days');\nalert(diffDays);\n</code></pre>\n\n<p>I used your original input values, but you didn't specify the format so I assumed the first value was July 11th.  If it was intended to be November 7th, then adjust the format to <code>D/M/YYYY</code> instead.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I tried lots of ways, and found that using datepicker was the best, but the date format causes problems with JavaScript....</p>\n\n<p>So here's my answer and can be run out of the box.....please remember to vote up if you like....</p>\n\n<pre><code>&lt;input type=\"text\" id=\"startdate\"&gt;\n&lt;input type=\"text\" id=\"enddate\"&gt;\n&lt;input type=\"text\" id=\"days\"&gt;\n\n&lt;script src=\"https://code.jquery.com/jquery-1.8.3.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://code.jquery.com/ui/1.10.0/jquery-ui.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"http://code.jquery.com/ui/1.10.3/themes/redmond/jquery-ui.css\" /&gt;\n&lt;script&gt;\n$(document).ready(function() {\n\n$( \"#startdate,#enddate\" ).datepicker({\nchangeMonth: true,\nchangeYear: true,\nfirstDay: 1,\ndateFormat: 'dd/mm/yy',\n})\n\n$( \"#startdate\" ).datepicker({ dateFormat: 'dd-mm-yy' });\n$( \"#enddate\" ).datepicker({ dateFormat: 'dd-mm-yy' });\n\n$('#enddate').change(function() {\nvar start = $('#startdate').datepicker('getDate');\nvar end   = $('#enddate').datepicker('getDate');\n\nif (start&lt;end) {\nvar days   = (end - start)/1000/60/60/24;\n$('#days').val(days);\n}\nelse {\nalert (\"You cant come back before you have been!\");\n$('#startdate').val(\"\");\n$('#enddate').val(\"\");\n$('#days').val(\"\");\n}\n}); //end change function\n}); //end ready\n&lt;/script&gt;\n</code></pre>\n\n<p>a Fiddle can be seen here <a href=\"http://jsfiddle.net/mikeys4u/3TA4s/1/\" rel=\"nofollow\">DEMO</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>1000000% sure...............</p>\n\n<pre><code> &lt;script&gt;\n    function myFunction() {\n        var date1=new Date();// for current date\n        var date2 =new Date(\"Sep, 30, 2015\");\n\n         // for other date you can get the another date from a textbox by\n         // var Newdate=document.getElementById('&lt;%=textBox1.ClientID%&gt;').value;\n         // convert Newdate to dateTime by......   var date2=New Date(Newdate);\n\n        var yearDiff=date1.getFullYear()-date2.getFullYear();// for year difference\n        var y1=date1.getFullYear();\n        var y2=date2.getFullYear();\n        var monthDiff=(date1.getMonth() + y1*12)-(date2.getMonth() +y2*12);\n        var day1=parseInt(date1.getDate());\n        var day2=parseInt(date2.getDate());\n        var dayDiff= (day1-day2)+ (monthDiff * 30);\n    document.write(\"Number of day difference : \"+dayDiff);\n    }\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var date1 = new Date(2014,1,15); \nvar date2 = new Date(2015,1,15);\nvar timeDiff = Math.abs(date2.getTime() - date1.getTime());\nvar diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)); \nalert(diffDays);\nhere is an inline link to get demo:\nhttp://jsfiddle.net/PUSQU/23/\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I get the difference between 2 dates in full days (I don't want any fractions of a day)</p>\n\n<pre><code>var date1 = new Date('7/11/2010');\nvar date2 = new Date('12/12/2010');\nvar diffDays = date2.getDate() - date1.getDate(); \nalert(diffDays)\n</code></pre>\n\n<p>I tried the above but this did not work.</p>\n",
            "last_activity_date": 1421806535,
            "question_id": 3224834,
            "score": 78,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "Get difference between 2 dates in javascript?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>It's a new feature of ECMAScript 5. John Resig wrote up <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\">a nice summary</a> of it.</p>\n\n<p>It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:</p>\n\n<pre><code>\"use strict\";\n</code></pre>\n\n<p>Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have <code>foo = \"bar\"</code> without defining <code>foo</code> first, your code will start failing...which is a good thing in my opinion.</p>\n",
                    "is_accepted": false,
                    "score": 590
                },
                {
                    "body": "<p>This article about that might interest you: <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a></p>\n\n<p>To quote some interesting parts:</p>\n\n<blockquote>\n  <p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>\n</blockquote>\n\n<p>And:</p>\n\n<blockquote>\n  <p>Strict mode helps out in a couple ways:</p>\n  \n  <ul>\n  <li>It catches some common coding bloopers, throwing exceptions.</li>\n  <li>It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).</li>\n  <li>It disables features that are confusing or poorly thought out.</li>\n  </ul>\n</blockquote>\n\n<p>Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function <em>(still quoting from John Resig's article)</em>:</p>\n\n<pre><code>// Non-strict code...\n\n(function(){\n  \"use strict\";\n\n  // Define your library strictly...\n})();\n\n// Non-strict code... \n</code></pre>\n\n<p>Which might be helpful if you have to mix old and new code ;-)</p>\n\n<p>So, I suppose it's a bit like the <code>\"use strict\"</code> you can use in Perl <em>(hence the name?)</em>: it helps you make fewer errors, by detecting more things that could lead to breakages.</p>\n\n<p>Currently, it's <a href=\"http://caniuse.com/#use-strict\"><strong>supported by all major browsers</strong></a>.</p>\n",
                    "is_accepted": true,
                    "score": 2127
                },
                {
                    "body": "<p>If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it. </p>\n\n<p>The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>If people are worried about using <code>use strict</code> it might be worth checking out this article: </p>\n\n<p><a href=\"http://www.novogeek.com/post/ECMAScript-5-Strict-mode-support-in-browsers-What-does-this-mean.aspx\">http://www.novogeek.com/post/ECMAScript-5-Strict-mode-support-in-browsers-What-does-this-mean.aspx</a></p>\n\n<p>It talks about browser support, but more importantly how to deal with it safely:</p>\n\n<pre><code>function isStrictMode(){\n    return !this;\n} \n//returns false, since 'this' refers to global object and '!this' becomes false\n\nfunction isStrictMode(){   \n    \"use strict\";\n    return !this;\n} \n//returns true, since in strict mode, the keyword 'this' does not refer to global object, unlike traditional JS. So here,'this' is null and '!this' becomes true.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 135
                },
                {
                    "body": "<p>\"Use Strict\"; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. \"Use Strict\" will help you do \"Straight coding\".</p>\n\n<p>Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.</p>\n\n<p>Believe me. The overhead is negligible compared to poorly designed code. <a href=\"http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\" rel=\"nofollow\">Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here</a>. Personally, I like to return to his site all the time to make sure I don't forget my good practice.</p>\n\n<p><strong>Modern JavaScript practice should always evoke the \"Use Strict\"; pragma.</strong> The only reason that the ECMA Group has made the \"Strict\" mode optional <em>is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.</em></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn\u2019t even know were in your code.</p>\n\n<p>Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don\u2019t just throw <strong>\"use strict\"</strong> in our code and assume there are no errors. So the churn is that it\u2019s time to start using this incredibly useful language feature to write better code.</p>\n\n<p>For example,</p>\n\n<pre><code>var person = {\n    name : 'xyz',\n    position : 'abc',\n    fullname : function () {  \"use strict\"; return this.name; }\n};\n</code></pre>\n\n<p><a href=\"http://www.jslint.com/\" rel=\"nofollow\">JSLint</a> is a debugger written by Douglas Crockford. Simply paste in your script, and it\u2019ll quickly scan for any noticeable issues and errors in your code.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>A word of caution, all you hard-charging programmers:  applying \"use strict\" to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the \"use strict\" pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!</p>\n\n<p>If you are going to take the plunge, it is a good idea to apply \"use strict\" alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add \"use strict\" to any of your legacy code, it's probably safer that way, honestly.  DEFINITELY DO NOT add \"use strict\" to any modules you do not own or maintain, like third party modules.</p>\n\n<p>I think even though it is a deadly caged animal, \"use strict\" can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch.  Configure JSHint/JSLint with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like Grunt+Karma+Chai, and only THEN start marking all your new modules as \"use strict\".  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if JSHint/JSLint produces any violations.</p>\n\n<p>My project was not a greenfield project when I adopted \"use strict\".  As a result, my IDE is full of red marks because I don't have \"use strict\" on half my modules, and JSHint complains about that.  It's a reminder to me about what refactorings I should do in the future.  My goal is to be red mark free due to all of my missing \"use strict\" statements, but that is years away now.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>To invoke strict mode for an entire script, put the exact statement <code>\"use strict\";</code> (or <code>'use strict';</code>) before any other statements.</p>\n\n<pre><code>// Whole-script strict mode syntax\n\"use strict\";\nvar v = \"Hi!  I'm a strict mode script!\";\n</code></pre>\n\n<p>This syntax has a trap that has already bitten a major site: it isn't possible to blindly concatenate non-conflicting scripts. Consider concatenating a strict mode script with a non-strict mode script: the entire concatenation looks strict! The inverse is also true: non-strict plus strict looks non-strict. Concatenation of strict mode scripts with each other is fine, and concatenation of non-strict mode scripts is fine. Only concatenating strict and non-strict scripts is problematic. It is thus recommended that you enable strict mode on a function-by-function basis (at least during the transition period).</p>\n\n<p>You can also take the approach of wrapping the entire contents of a script in a function and having that outer function use strict mode. This eliminates the concatenation problem but it means that you have to explicitly export any global variables out of the function scope.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Strict mode makes several changes to normal JavaScript semantics:</p>\n\n<ul>\n<li><p>eliminates some JavaScript silent errors by changing them\nto throw errors.</p></li>\n<li><p>fixes mistakes that make it difficult for JavaScript\nengines to perform optimizations.</p></li>\n<li><p>prohibits some syntax likely to be defined in future\nversions of ECMAScript.</p></li>\n</ul>\n\n<p>for more information vistit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\" rel=\"nofollow\">Strict Mode- Javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There's a good talk by some people who were on the ECMAScript committee: <a href=\"http://www.youtube.com/watch?v=Kq4FpMe6cRs\" rel=\"nofollow\">Changes to JavaScript, Part 1: ECMAScript 5\"</a> about how incremental use of the <code>\"use strict\"</code> switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.</p>\n\n<p>Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Including \"<strong>use strict</strong>\" in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><em>My two cents:</em></p>\n\n<p>One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent &amp; strange behaviour of your webpage. The moment we use <code>use strict</code>, the code will throw out errors which helps developer to fix it in advance.</p>\n\n<p>Few important things which I have learned after using <code>use strict</code> :</p>\n\n<p><strong><em>Prevents Global Variable Declaration:</em></strong></p>\n\n<pre><code>var tree1Data = { name: 'Banana Tree',age: 100,leafCount: 100000};\n\nfunction Tree(typeOfTree) {\n    var age;\n    var leafCount;\n\n    age = typeOfTree.age;\n    leafCount = typeOfTree.leafCount;\n    nameoftree = typeOfTree.name;\n};\n\nvar tree1 = new Tree(tree1Data);\nconsole.log(window);\n</code></pre>\n\n<p>Now,this code creates <code>nameoftree</code> in global scope which could be accessed using <code>window.nameoftree</code>. When we implement <code>use strict</code> the code would throw error.</p>\n\n<blockquote>\n  <p>Uncaught ReferenceError: nameoftree is not defined</p>\n</blockquote>\n\n<p><a href=\"http://jsfiddle.net/shubh0602/08p556u5/\"><kbd>Sample</kbd></a></p>\n\n<p><strong><em>Eliminates <code>with</code> statement :</em></strong></p>\n\n<p><code>with</code> statements can't be minified using tools like <a href=\"http://marijnhaverbeke.nl/uglifyjs\">uglify-js</a>. They're also <a href=\"http://www.2ality.com/2011/06/with-statement.html\">deprecated</a> and removed from future JavaScript versions.</p>\n\n<p><a href=\"http://jsfiddle.net/shubh0602/vjgznz79/\"><kbd>Sample</kbd></a></p>\n\n<p><strong><em>Prevents Duplicates :</em></strong></p>\n\n<p>When we have duplicate property, it throws an exception </p>\n\n<blockquote>\n  <p>Uncaught SyntaxError: Duplicate data property in object literal not\n  allowed in strict mode</p>\n</blockquote>\n\n<pre><code>\"use strict\";\nvar tree1Data = {\n    name: 'Banana Tree',\n    age: 100,\n    leafCount: 100000,\n    name:'Banana Tree'\n};\n</code></pre>\n\n<p>There are few more but I need to gain more knowledge on that.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><code>\"use strict\";</code> instructs the browser to use the Strict mode, which is a reduced and safer feature set   of javascript. </p>\n\n<h2>List of features (non exhaustive)</h2>\n\n<ol>\n<li><p>Disallows global variables. (Catches missing var declarations and typos in variable names) </p></li>\n<li><p>Silent failing assignments will throw error in strict mode (<code>assigning NaN = 5;</code>) </p></li>\n<li><p>Attempts to delete undeletable properties will throw (<code>delete Object.prototype</code>) </p></li>\n<li><p>Requires all property names in an object literal to be unique (<code>var x = {x1: \"1\", x1: \"2\"}</code>) </p></li>\n<li><p>Function parameter names must be unique (<code>function sum (x, x) {...}</code>) </p></li>\n<li><p>Forbids Octal syntax (<code>var x = 023;// some devs assume wrongly that a preceding zero does nothing to change the number.</code> ) </p></li>\n<li><p>Forbids the <code>with</code> keyword <code>eval</code> in strict mode does not introduce new variables  </p></li>\n<li><p>Forbids deleting plain names (<code>delete x;</code>)</p></li>\n<li><p>Forbids binding or assignment of the names 'eval' and 'arguments' in any form </p></li>\n<li><p>Strict mode does not alias properties of the arguments object with the formal parameters. (i.e. in <code>function sum (a,b) { return arguments[0] + b;}</code> This works because arguments[0] is bound to a and so on. )</p></li>\n<li><p><code>arguments.callee</code> is not supported</p></li>\n</ol>\n\n<p>[Ref: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode</a>]</p>\n",
                    "is_accepted": false,
                    "score": 22
                }
            ],
            "body": "<p>Recently, I ran some of my JavaScript code through Crockford's <a href=\"http://www.jslint.com/\">JSLint</a>, and it gave the following error:</p>\n\n<blockquote>\n  <p>Problem at line 1 character 1: Missing \"use strict\" statement.</p>\n</blockquote>\n\n<p>Doing some searching, I realized that some people add <code>\"use strict\";</code> into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</p>\n\n<p>So what is <code>\"use strict\";</code> all about, what does it imply, and is it still relevant?</p>\n\n<p>Do any of the current browsers respond to the <code>\"use strict\";</code> string or is it for future use?</p>\n",
            "last_activity_date": 1424396291,
            "question_id": 1335851,
            "score": 3190,
            "tags": [
                "javascript",
                "syntax",
                "jslint",
                "use-strict"
            ],
            "title": "What does &quot;use strict&quot; do in JavaScript, and what is the reasoning behind it?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Here's a really basic way to do it:</p>\n\n<pre><code>window.onscroll = function () { window.scrollTo(0, 0); };\n</code></pre>\n\n<p>It's kind of jumpy in IE6.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The <code>scroll</code> event cannot be canceled. You can <strong>cancel</strong> 2 things however: <strong>mouse scroll</strong> and <strong>buttons</strong> associated with scrolling.</p>\n\n<h2>[<a href=\"http://jsbin.com/disable-scrolling/1\">Working demo</a>]</h2>\n\n<pre><code>// left: 37, up: 38, right: 39, down: 40,\n// spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36\nvar keys = [37, 38, 39, 40];\n\nfunction preventDefault(e) {\n  e = e || window.event;\n  if (e.preventDefault)\n      e.preventDefault();\n  e.returnValue = false;  \n}\n\nfunction keydown(e) {\n    for (var i = keys.length; i--;) {\n        if (e.keyCode === keys[i]) {\n            preventDefault(e);\n            return;\n        }\n    }\n}\n\nfunction wheel(e) {\n  preventDefault(e);\n}\n\nfunction disable_scroll() {\n  if (window.addEventListener) {\n      window.addEventListener('DOMMouseScroll', wheel, false);\n  }\n  window.onmousewheel = document.onmousewheel = wheel;\n  document.onkeydown = keydown;\n}\n\nfunction enable_scroll() {\n    if (window.removeEventListener) {\n        window.removeEventListener('DOMMouseScroll', wheel, false);\n    }\n    window.onmousewheel = document.onmousewheel = document.onkeydown = null;  \n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 219
                },
                {
                    "body": "<p>I'm sorry to answer an old post but I was looking for a solution and came across this question.</p>\n\n<p>There are many workarounds for this issue to still display the scrollbar, like giving the container a 100% height and an overfloy-y: scroll styling.</p>\n\n<p>In my case I just created a div with a scrollbar which I display while adding overflow: hidden to the body:</p>\n\n<pre><code>function disableScroll() {\n    document.getElementById('scrollbar').style.display= 'block';\n    document.body.style.overflow= 'hidden';\n    }\n</code></pre>\n\n<p>The element scrollbar must have this styles:</p>\n\n<pre><code>overflow-y: scroll; top: 0; right:0; display: none; height: 100%; position: fixed;\n</code></pre>\n\n<p>This shows a grey scrollbar, hope it helps future visitors.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found a better, but buggy way, combining sdleihssirhc's idea:</p>\n\n<pre><code>window.onscroll = function() {\n    window.scrollTo(window.scrollX, window.scrollY);\n    //Or\n    //window.scroll(window.scrollX, window.scrollY);\n    //Or Fallback\n    //window.scrollX=window.scrollX;\n    //window.scrollY=window.scrollY;\n};\n</code></pre>\n\n<p>I didn't test it, but I'll edit later and let you all know. I'm 85% sure it works on major browsers.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Do it simply by adding a class to the body:</p>\n\n<pre><code>.stop-scrolling {\n  height: 100%;\n  overflow: hidden;\n}\n</code></pre>\n\n<p>Add the class then remove when you want to re-enable scrolling, tested in IE, FF, Safari and Chrome.  </p>\n\n<pre><code>$('body').addClass('stop-scrolling')\n</code></pre>\n\n<hr>\n\n<p>For <strong>mobile devices</strong>, you'll need to handle the <code>touchmove</code> event:</p>\n\n<pre><code>$('body').bind('touchmove', function(e){e.preventDefault()})\n</code></pre>\n\n<p>And unbind to re-enable scrolling. Tested in iOS6 and Android 2.3.3</p>\n\n<pre><code>$('body').unbind('touchmove')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 155
                },
                {
                    "body": "<p>How about this? (If you're using jQuery)</p>\n\n<pre><code>var $window = $(window);\nvar $body = $(window.document.body);\n\nwindow.onscroll = function() {\n    var overlay = $body.children(\".ui-widget-overlay\").first();\n\n    // Check if the overlay is visible and restore the previous scroll state\n    if (overlay.is(\":visible\")) {\n        var scrollPos = $body.data(\"scroll-pos\") || { x: 0, y: 0 };\n        window.scrollTo(scrollPos.x, scrollPos.y);\n    }\n    else {\n        // Just store the scroll state\n        $body.data(\"scroll-pos\", { x: $window.scrollLeft(), y: $window.scrollTop() });\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found this answer on another <a href=\"http://phonegapcmsworld.blogspot.com/2013/02/disable-page-scroll-on-jquerymobile.html\" rel=\"nofollow\">site</a>:</p>\n\n<p>Disable scroll:</p>\n\n<pre><code>$( \".popup\").live({\n    popupbeforeposition: function(event, ui) {\n    $(\"body\").on(\"touchmove\", false);\n}\n});\n</code></pre>\n\n<p>After close popup release scroll:</p>\n\n<pre><code>$( \".popup\" ).live({\n    popupafterclose: function(event, ui) {\n    $(\"body\").unbind(\"touchmove\");\n}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Depending on what you want to achieve with the removed scroll you could just fix the element that you want to remove scroll from (on click, or whatever other trigger you'd like to temporarily deactivate scroll)</p>\n\n<p>I was searching around for a \"temp no scroll\" solution and for my needs, this solved it</p>\n\n<p>make a class</p>\n\n<pre><code>.fixed{\n    position: fixed;\n}\n</code></pre>\n\n<p>then with Jquery</p>\n\n<pre><code>var someTrigger = $('#trigger'); //a trigger button\nvar contentContainer = $('#content'); //element I want to temporarily remove scroll from\n\ncontentContainer.addClass('notfixed'); //make sure that the element has the \"notfixed\" class\n\n//Something to trigger the fixed positioning. In this case we chose a button.\nsomeTrigger.on('click', function(){\n\n    if(contentContainer.hasClass('notfixed')){\n        contentContainer.removeClass('notfixed').addClass('fixed');\n\n    }else if(contentContainer.hasClass('fixed')){\n        contentContainer.removeClass('fixed').addClass('notfixed');\n    };\n});\n</code></pre>\n\n<p>I found that this was a simple enough solution that works well on all browsers, and also makes for simple use on portable devices (i.e. iPhones, tablets etc). Since the element is temporarily fixed, there is no scroll  :)</p>\n\n<p>NOTE! Depending on the placement of your \"contentContainer\" element you might need to adjust it from the left. Which can easily be done by adding a css left value to that element when the fixed class is active</p>\n\n<pre><code>contentContainer.css({\n    'left': $(window).width() - contentContainer.width()/2 //This would result in a value that is the windows entire width minus the element we want to \"center\" divided by two (since it's only pushed from one side)\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>According to the <strong>galambalazs</strong> post I would add support for touch devices, allowing us to touch but no scroll up or down:</p>\n\n<pre><code>function disable_scroll() {\n   ...\n   document.ontouchmove = function(e){ \n        e.preventDefault(); \n   }\n}\n\nfunction enable_scroll() {\n   ...\n   document.ontouchmove = function(e){ \n     return true; \n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Another solution:</p>\n\n<pre><code>body {\n    overflow-y: scroll;\n    width: 100%;\n    margin: 0 auto;\n}\n</code></pre>\n\n<p>This way you always have a vertical scrollbar, but as most of my content is longer than the viewport, this is ok for me. Content is centered with a seperate div, but without setting margin again in body my content would stay at the left. </p>\n\n<p>These are the two function I use to show my popup/modal:</p>\n\n<pre><code>var popup_bodyTop = 0;\nvar popup_bodyLeft = 0;\n\n    function popupShow(id)\n    {\n        $('#'+ id).effect('fade');\n    $('#popup-overlay').effect('fade');\n\n        // remember current scroll-position\n        // because when setting/unsetting position: fixed to body\n        // the body would scroll to 0,0\n    popup_bodyLeft = $(document).scrollLeft();\n    popup_bodyTop  = $(document).scrollTop();\n\n        // invert position\n    var x = - popup_bodyLeft;\n    var y = - popup_bodyTop;\n\n    $('body').css('position', 'fixed');\n    $('body').css('top', y.toString() +'px');\n    $('body').css('left', x.toString() +'px');\n    }\n\n    function popupHide(id)\n    {\n        $('#'+ id).effect('fade');\n    $('#popup-overlay').effect('fade');\n    $('body').css('position', '');\n    $('html, body').scrollTop(popup_bodyTop);\n    $('html, body').scrollLeft(popup_bodyLeft);\n    }\n</code></pre>\n\n<p>Result: non scrollable background and no re-positioning of the content because of the left scrollbar. Tested with current FF, Chrome and IE 10. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This solution will maintain the current scroll position whilst scrolling is disabled, unlike some which jump the user back to the top.</p>\n\n<p>It's based on <a href=\"http://stackoverflow.com/a/4770179/940252\">galambalazs' answer</a>, but with support for touch devices, and refactored as a single object with jquery plugin wrapper.</p>\n\n<p><strong><a href=\"http://jsfiddle.net/5s01jg4s/\" rel=\"nofollow\">Demo here.</a></strong> </p>\n\n<p><strong><a href=\"https://github.com/ultrapasty/jquery-disablescroll\" rel=\"nofollow\">On github here.</a></strong></p>\n\n<pre><code>/**\n * $.disablescroll\n * Author: Josh Harrison - aloof.co\n *\n * Disables scroll events from mousewheels, touchmoves and keypresses.\n * Use while jQuery is animating the scroll position for a guaranteed super-smooth ride!\n */\n\n;(function($) {\n\n    \"use strict\";\n\n    var instance, proto;\n\n    function UserScrollDisabler($container, options) {\n        // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36\n        // left: 37, up: 38, right: 39, down: 40\n        this.opts = $.extend({\n            handleKeys : true,\n            scrollEventKeys : [32, 33, 34, 35, 36, 37, 38, 39, 40]\n        }, options);\n\n        this.$container = $container;\n        this.$document = $(document);\n        this.lockToScrollPos = [0, 0];\n\n        this.disable();\n    }\n\n    proto = UserScrollDisabler.prototype;\n\n    proto.disable = function() {\n        var t = this;\n\n        t.lockToScrollPos = [\n            t.$container.scrollLeft(),\n            t.$container.scrollTop()\n        ];\n\n        t.$container.on(\n            \"mousewheel.disablescroll DOMMouseScroll.disablescroll touchmove.disablescroll\",\n            t._handleWheel\n        );\n\n        t.$container.on(\"scroll.disablescroll\", function() {\n            t._handleScrollbar.call(t);\n        });\n\n        if(t.opts.handleKeys) {\n            t.$document.on(\"keydown.disablescroll\", function(event) {\n                t._handleKeydown.call(t, event);\n            });\n        }\n    };\n\n    proto.undo = function() {\n        var t = this;\n        t.$container.off(\".disablescroll\");\n        if(t.opts.handleKeys) {\n            t.$document.off(\".disablescroll\");\n        }\n    };\n\n    proto._handleWheel = function(event) {\n        event.preventDefault();\n    };\n\n    proto._handleScrollbar = function() {\n        this.$container.scrollLeft(this.lockToScrollPos[0]);\n        this.$container.scrollTop(this.lockToScrollPos[1]);\n    };\n\n    proto._handleKeydown = function(event) {\n        for (var i = 0; i &lt; this.opts.scrollEventKeys.length; i++) {\n            if (event.keyCode === this.opts.scrollEventKeys[i]) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n\n\n    // Plugin wrapper for object\n    $.fn.disablescroll = function(method) {\n\n        // If calling for the first time, instantiate the object and save\n        // reference. The plugin can therefore only be instantiated once per\n        // page. You can pass options object in through the method parameter.\n        if( ! instance &amp;&amp; (typeof method === \"object\" || ! method)) {\n            instance = new UserScrollDisabler(this, method);\n        }\n\n        // Instance already created, and a method is being explicitly called,\n        // e.g. .disablescroll('undo');\n        else if(instance &amp;&amp; instance[method]) {\n            instance[method].call(instance);\n        }\n\n    };\n\n    // Global access\n    window.UserScrollDisabler = UserScrollDisabler;\n\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You can block the spacebar scroll and hide the browser scrollbar:</p>\n\n<pre><code>    $(document).keydown(function(event){\n        if(event.keyCode == 32){\n            return false;\n\n        }\n    });\n\ndocument.documentElement.style.overflow = 'hidden';\ndocument.body.scroll = \"no\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this is an old question, but I had to do something very similar, and after some time looking for an answer and trying different approaches, I ended up using a very easy solution.</p>\n\n<p>My problem was very similar, almost identical, the only difference is I didn't have to actually show the scroll bar - I just had to make sure its width would still be used, so the page's width would not change while my overlay was displayed.</p>\n\n<p>When I start sliding my overlay into the screen, I do:</p>\n\n<pre><code>$('body').addClass('stop-scrolling').css('margin-right', 8);\n</code></pre>\n\n<p>and after I slide my overlay off the screen I do:</p>\n\n<pre><code>$('body').removeClass('stop-scrolling').css('margin-right', 0);\n</code></pre>\n\n<p>IMPORTANT: this works perfectly because my overlay is positioned absolute, right: 0px when visible.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following solution is basic but pure JavaScript (no jQuery):</p>\n\n<pre><code>function disableScrolling(){\n    var x=window.scrollX;\n    var y=window.scrollY;\n    window.onscroll=function(){window.scrollTo(x, y);};\n}\n\nfunction enableScrolling(){\n    window.onscroll=function(){};\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I was looking out for a solution to this problem but was not satisfied with the any of the above solutions (<em>as of writing this answer</em>), so I came up with this solution..</p>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>.scrollDisabled {   \n    position: fixed;\n    margin-top: 0;// override by JS to use acc to curr $(window).scrollTop()\n    width: 100%;\n}\n</code></pre>\n\n<p><strong>JS</strong></p>\n\n<pre><code>var y_offsetWhenScrollDisabled=0;\n\nfunction disableScrollOnBody(){\n    y_offsetWhenScrollDisabled= $(window).scrollTop();\n    $('body').addClass('scrollDisabled').css('margin-top', -y_offsetWhenScrollDisabled);\n}\nfunction enableScrollOnBody(){\n    $('body').removeClass('scrollDisabled').css('margin-top', 0);\n    $(window).scrollTop(y_offsetWhenScrollDisabled);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>galambalazs's solution is great! It worked perfectly for me in both Chrome and Firefox. And it also may be extended to prevent any default event from the browser window.\nLet's say you are doing an app on the canvas. You could do this:</p>\n\n<pre><code>var events = {\n  preventDefault: function(e) {\n    e = e || window.event;\n    if (e.preventDefault) e.preventDefault();\n    e.returnValue = false;  \n  },\n\n  //spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36,\n  //left: 37, up: 38, right: 39, down: 40\n  keys: [32, 33, 34, 35, 36, 37, 38, 39, 40],\n  keydown: function(e) {\n    for (var i = events.keys.length; i--;) {\n      if (e.keyCode === events.keys[i]) {\n        events.preventDefault(e);\n        return;\n      }\n    }\n  },\n\n  wheel: function(e) {\n    events.preventDefault(e);\n  },\n\n  disable: function() {\n    if (window.addEventListener) {\n      window.addEventListener('DOMMouseScroll', events.wheel, false);\n    }\n    window.onmousewheel = document.onmousewheel = events.wheel;\n    document.onkeydown = helpers.events.keydown;\n  },\n\n  enable: function() {\n    if (window.removeEventListener) {\n      window.removeEventListener('DOMMouseScroll', events.wheel, false);\n    }\n    window.onmousewheel = document.onmousewheel = document.onkeydown = null;  \n  }\n}\n</code></pre>\n\n<p>And then on your app let's say you're going to process your own events, like mouse, keyboard, touch events and so on... You could disable default events when the mouse goes inside the canvas and re-enable them when the mouse goes out:</p>\n\n<pre><code>function setMouseEvents(canvas) {\n  var useCapture = false;\n\n  //Mouse enter event\n  canvas.addEventListener('mouseenter', function(event) {\n    events.disable();\n  }, useCapture);\n\n  //Mouse leave event\n  canvas.addEventListener('mouseleave', function(event) {\n    events.enable();\n  }, useCapture);\n}\n</code></pre>\n\n<p>You could even disable right click menu with this hack:</p>\n\n<pre><code>function disableRightClickMenu(canvas) {\n  var my_gradient = canvas.context.createLinearGradient(0, 0, 0, 225);\n  my_gradient.addColorStop(0, \"white\");\n  my_gradient.addColorStop(1, \"white\");\n  canvas.context.fillStyle = my_gradient;\n  canvas.context.fillRect(0, 0, canvas.width, canvas.height);\n  canvas.oncontextmenu = function() { return false; };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm using the scrollTo jQuery plugin and would like to know if it is somehow possible to temporarily disable scrolling on the window element through Javascript? The reason I'd like to disable scrolling is that when you scroll while scrollTo is animating, it gets really ugly ;)</p>\n\n<p>Of course, I could do a <code>$(\"body\").css(\"overflow\", \"hidden\");</code> and then put it back to auto when the animation stops, but it would be better if the scrollbar was still show but inactive.</p>\n",
            "last_activity_date": 1419345833,
            "question_id": 4770025,
            "score": 125,
            "tags": [
                "javascript",
                "jquery",
                "scroll"
            ],
            "title": "How to disable scrolling temporarily?"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<pre><code>myString.replace(/&lt;(?:.|\\n)*?&gt;/gm, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 180
                },
                {
                    "body": "<p>If you're running in a browser, then the easiest way is just to <a href=\"http://jsfiddle.net/8JSZX/\">let the browser do it for you...</a></p>\n\n<pre><code>function strip(html)\n{\n   var tmp = document.createElement(\"DIV\");\n   tmp.innerHTML = html;\n   return tmp.textContent || tmp.innerText || \"\";\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 326
                },
                {
                    "body": "<p>Another, admittedly less elegant solution than nickf's or Shog9's, would be to recursively walk the DOM starting at the &lt;body&gt; tag and append each text node.</p>\n\n<pre><code>var bodyContent = document.getElementsByTagName('body')[0];\nvar result = appendTextNodes(bodyContent);\n\nfunction appendTextNodes(element) {\n    var text = '';\n\n    // Loop through the childNodes of the passed in element\n    for (var i = 0, len = element.childNodes.length; i &lt; len; i++) {\n    \t// Get a reference to the current child\n    \tvar node = element.childNodes[i];\n    \t// Append the node's value if it's a text node\n    \tif (node.nodeType == 3) {\n    \t\ttext += node.nodeValue;\n    \t}\n    \t// Recurse through the node's children, if there are any\n    \tif (node.childNodes.length &gt; 0) {\n    \t\tappendTextNodes(node);\n    \t}\n    }\n    // Return the final result\n    return text;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<h2>Converting HTML for Plain Text emailing keeping hyperlinks (a href) intact</h2>\n\n<p>The above function posted by hypoxide works fine, but I was after something that would basically convert HTML created in a Web RichText editor (for example FCKEditor) and clear out all HTML but leave all the Links due the fact that I wanted both the HTML and the plain text version to aid creating the correct parts to an STMP email (both HTML and plain text).</p>\n\n<p>After a long time of searching Google myself and my collegues came up with this using the regex engine in Javascript:-</p>\n\n<pre><code>str='this string has &lt;i&gt;html&lt;/i&gt; code i want to &lt;b&gt;remove&lt;/b&gt;&lt;br&gt;Link Number 1 -&gt;&lt;a href=\"http://www.bbc.co.uk\"&gt;BBC&lt;/a&gt; Link Number 1&lt;br&gt;&lt;p&gt;Now back to normal text and stuff&lt;/p&gt;\n';\nstr=str.replace(/&lt;br&gt;/gi, \"\\n\");\nstr=str.replace(/&lt;p.*&gt;/gi, \"\\n\");\nstr=str.replace(/&lt;a.*href=\"(.*?)\".*&gt;(.*?)&lt;\\/a&gt;/gi, \" $2 (Link-&gt;$1) \");\nstr=str.replace(/&lt;(?:.|\\s)*?&gt;/g, \"\");\n</code></pre>\n\n<p>the str var starts out like this:-</p>\n\n<pre><code>this string has &lt;i&gt;html&lt;/i&gt; code i want to &lt;b&gt;remove&lt;/b&gt;&lt;br&gt;Link Number 1 -&gt;&lt;a href=\"http://www.bbc.co.uk\"&gt;BBC&lt;/a&gt; Link Number 1&lt;br&gt;&lt;p&gt;Now back to normal text and stuff&lt;/p&gt;\n</code></pre>\n\n<p>which renders like this:-</p>\n\n<pre><code>--start--\n\nthis string has &lt;i&gt;html&lt;/i&gt; code i want to &lt;b&gt;remove&lt;/b&gt;&lt;br&gt;Link Number 1 -&gt;&lt;a href=\"http://www.bbc.co.uk\"&gt;BBC&lt;/a&gt; Link Number 1&lt;br&gt;&lt;p&gt;Now back to normal text and stuff&lt;/p&gt;\n--end--\n&lt;br&gt;&lt;br&gt;\n</code></pre>\n\n<p>and then after the code has run it looks like this:-</p>\n\n<pre><code>this string has html code i want to remove\nLink Number 1 -&gt; BBC (Link-&gt;http://www.bbc.co.uk)  Link Number 1\n\n\nNow back to normal text and stuff\n</code></pre>\n\n<p>As you can see the all the HTML has been removed and the Link have been persevered with the hyperlinked text is still intact. Also I have replaced the <p> and <br> tags with \\n (newline char) so that some sort of visual formatting has been retained.</p>\n\n<p>To change the link format (eg. \"BBC (Link-><a href=\"http://www.bbc.co.uk\">http://www.bbc.co.uk</a>)\" ) just edit the \" $2 (Link->$1) \", where $1 is the href URL/URI and the $2 is the hyperlinked text. With the links directly in body of the plain text most SMTP Mail Clients convert these so the user has the ability to click on them.</p>\n\n<p>Hope you find this useful.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I built this JavaScript library for a Konfabulator widget that does exactly that.</p>\n\n<p>It completely strips out comments and &lt;style&gt; and &lt;script&gt; tags and tries to be somewhat smart about converting &lt;br/&gt;'s and &lt;p/&gt;'s into newlines as well.</p>\n\n<p><a href=\"http://github.com/mtrimpe/jsHtmlToText\" rel=\"nofollow\">http://github.com/mtrimpe/jsHtmlToText</a></p>\n\n<p>Keep in mind though this only exists to work around the limitations of the Konfabulator TV-widget implementation.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think the easiest way is to just use Regular Expressions as someone mentioned above. Although there's no reason to use a bunch of them. Try:</p>\n\n<pre><code>stringWithHTML = stringWithHTML.replace(/&lt;\\/?[a-z][a-z0-9]*[^&lt;&gt;]*&gt;/ig, \"\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I made some modifications to original Jibberboy2000 script\nHope it'll be usefull for someone</p>\n\n<pre><code>str = '**ANY HTML CONTENT HERE**';\n\nstr=str.replace(/&lt;\\s*br\\/*&gt;/gi, \"\\n\");\nstr=str.replace(/&lt;\\s*a.*href=\"(.*?)\".*&gt;(.*?)&lt;\\/a&gt;/gi, \" $2 (Link-&gt;$1) \");\nstr=str.replace(/&lt;\\s*\\/*.+?&gt;/ig, \"\\n\");\nstr=str.replace(/ {2,}/gi, \" \");\nstr=str.replace(/\\n+\\s*/gi, \"\\n\\n\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Simplest way:</p>\n\n<pre><code>jQuery(html).text();\n</code></pre>\n\n<p>That retrieves all the text from a string of html. </p>\n",
                    "is_accepted": false,
                    "score": 128
                },
                {
                    "body": "<p>I altered <a href=\"http://stackoverflow.com/a/1237620/238722\">Jibberboy2000's answer</a> to include several <code>&lt;BR /&gt;</code> tag formats, remove everything inside <code>&lt;SCRIPT&gt;</code> and <code>&lt;STYLE&gt;</code> tags, format the resulting HTML by removing multiple line breaks and spaces and convert some HTML-encoded code into normal. After some testing it appears that you can convert most of full web pages into simple text where page title and content are retained.</p>\n\n<p>In the simple example,</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;\n&lt;html&gt;\n&lt;!--comment--&gt;\n\n&lt;head&gt;\n\n&lt;title&gt;This is my title&lt;/title&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\"&gt;\n&lt;style&gt;\n\n    body {margin-top: 15px;}\n    a { color: #D80C1F; font-weight:bold; text-decoration:none; }\n\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;center&gt;\n        This string has &lt;i&gt;html&lt;/i&gt; code i want to &lt;b&gt;remove&lt;/b&gt;&lt;br&gt;\n        In this line &lt;a href=\"http://www.bbc.co.uk\"&gt;BBC&lt;/a&gt; with link is mentioned.&lt;br/&gt;Now back to &amp;quot;normal text&amp;quot; and stuff using &amp;lt;html encoding&amp;gt;                 \n    &lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>becomes</p>\n\n<blockquote>\n  <p>This is my title</p>\n  \n  <p>This string has html code i want to remove</p>\n  \n  <p>In this line BBC (<a href=\"http://www.bbc.co.uk\" rel=\"nofollow\">http://www.bbc.co.uk</a>) with link is mentioned.</p>\n  \n  <p>Now back to \"normal text\" and stuff using  </p>\n</blockquote>\n\n<p>The JavaScript function and test page look this:</p>\n\n<pre><code>function convertHtmlToText() {\n    var inputText = document.getElementById(\"input\").value;\n    var returnText = \"\" + inputText;\n\n    //-- remove BR tags and replace them with line break\n    returnText=returnText.replace(/&lt;br&gt;/gi, \"\\n\");\n    returnText=returnText.replace(/&lt;br\\s\\/&gt;/gi, \"\\n\");\n    returnText=returnText.replace(/&lt;br\\/&gt;/gi, \"\\n\");\n\n    //-- remove P and A tags but preserve what's inside of them\n    returnText=returnText.replace(/&lt;p.*&gt;/gi, \"\\n\");\n    returnText=returnText.replace(/&lt;a.*href=\"(.*?)\".*&gt;(.*?)&lt;\\/a&gt;/gi, \" $2 ($1)\");\n\n    //-- remove all inside SCRIPT and STYLE tags\n    returnText=returnText.replace(/&lt;script.*&gt;[\\w\\W]{1,}(.*?)[\\w\\W]{1,}&lt;\\/script&gt;/gi, \"\");\n    returnText=returnText.replace(/&lt;style.*&gt;[\\w\\W]{1,}(.*?)[\\w\\W]{1,}&lt;\\/style&gt;/gi, \"\");\n    //-- remove all else\n    returnText=returnText.replace(/&lt;(?:.|\\s)*?&gt;/g, \"\");\n\n    //-- get rid of more than 2 multiple line breaks:\n    returnText=returnText.replace(/(?:(?:\\r\\n|\\r|\\n)\\s*){2,}/gim, \"\\n\\n\");\n\n    //-- get rid of more than 2 spaces:\n    returnText = returnText.replace(/ +(?= )/g,'');\n\n    //-- get rid of html-encoded characters:\n    returnText=returnText.replace(/&amp;nbsp;/gi,\" \");\n    returnText=returnText.replace(/&amp;amp;/gi,\"&amp;\");\n    returnText=returnText.replace(/&amp;quot;/gi,'\"');\n    returnText=returnText.replace(/&amp;lt;/gi,'&lt;');\n    returnText=returnText.replace(/&amp;gt;/gi,'&gt;');\n\n    //-- return\n    document.getElementById(\"output\").value = returnText;\n}\n</code></pre>\n\n<p>It was used with this HTML:</p>\n\n<pre><code>&lt;textarea id=\"input\" style=\"width: 400px; height: 300px;\"&gt;&lt;/textarea&gt;&lt;br /&gt;\n&lt;button onclick=\"convertHtmlToText()\"&gt;CONVERT&lt;/button&gt;&lt;br /&gt;\n&lt;textarea id=\"output\" style=\"width: 400px; height: 300px;\"&gt;&lt;/textarea&gt;&lt;br /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>    (function($){\n        $.html2text = function(html) {\n            if($('#scratch_pad').length === 0) {\n                $('&lt;div id=\"lh_scratch\"&gt;&lt;/div&gt;').appendTo('body');  \n            }\n            return $('#scratch_pad').html(html).text();\n        };\n\n    })(jQuery);\n</code></pre>\n\n<p>Define this as a jquery plugin and use it like as follows:</p>\n\n<pre><code>$.html2text(htmlContent);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a version which sorta addresses @MikeSamuel's security concern: </p>\n\n<pre><code>function strip(html)\n{\n   try {\n       var doc = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n       doc.documentElement.innerHTML = html;\n       return doc.documentElement.textContent||doc.documentElement.innerText;\n   } catch(e) {\n       return \"\";\n   }\n}\n</code></pre>\n\n<p>Note, it will return an empty string if the HTML markup isn't valid XML (aka, tags must be closed and attributes must be quoted). This isn't ideal, but does avoid the issue of having the security exploit potential.</p>\n\n<p>If not having valid XML markup is a requirement for you, you could try using:</p>\n\n<pre><code>var doc = document.implementation.createHTMLDocument(\"\");\n</code></pre>\n\n<p>but that isn't a perfect solution either for other reasons.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A method that strips the legal HTML tags, and escapes everything else:</p>\n\n<pre><code>function strip(html) {\n    // Stripping the legal HTML tags\n    html = html.replace(/&lt;[^&gt;]*&gt;/g, '');\n\n    // Escaping the remaining characters\n    var div = document.createElement('div');\n    div.textContent = html;\n    return div.innerHTML;\n}\n</code></pre>\n\n<p>First of all <strong>this is safe</strong>. It is <strong>also pretty</strong> if the string does not contain invalid HTML. Use this if you care about security, and don't want your site to be vulnerable to <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\" rel=\"nofollow\">XSS</a> attacks.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>With jQuery you can simply retrieving it by using </p>\n\n<pre><code>$('#elementID').text()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have created a working regular expression myself:</p>\n\n<pre><code>str=str.replace(/(&lt;\\?[a-z]*(\\s[^&gt;]*)?\\?(&gt;|$)|&lt;!\\[[a-z]*\\[|\\]\\]&gt;|&lt;!DOCTYPE[^&gt;]*?(&gt;|$)|&lt;!--[\\s\\S]*?(--&gt;|$)|&lt;[a-z?!\\/]([a-z0-9_:.])*(\\s[^&gt;]*)?(&gt;|$))/gi, ''); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As an extension to the jQuery method, if your string might not contian HTML (eg if you are trying to remove HTML from a form field) </p>\n\n<p><code>jQuery(html).text();</code> </p>\n\n<p>will return an empty string if there is no html</p>\n\n<p>Use:</p>\n\n<p><code>jQuery('&lt;p&gt;' + html + '&lt;/p&gt;').text();</code> </p>\n\n<p>instead</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>function stripMarkup(ml)\n{\n    var i, qx=false, it=false;\n    var os=\"\",c;\n\n    for( i=0 i&lt;ml.length; i++ ) {\n        c= ml.substr(i,1);\n        if( !it ) {\n            if( c == \"&lt;\" ) {\n                it=true;\n            } else {\n                os += c;\n            }\n        } else {\n            if( qx !== false ) {\n                if( c == qx ) {\n                    qx=false;\n                }\n            } else if( c == \"'\" || c == '\"' ) {\n                qx = c;\n            } else if( c == \"\\\\\" ) {\n                if( ml.substr(i+1,1) == qx ) i++; // bwahahahhaHA\n            } else if( c == \"&gt;\" ) {\n                it = false;\n            }\n            continue;\n        }\n    }\n\n    return os;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>simple 2 line jquery to strip the html.</p>\n\n<pre><code> var content = \"&lt;p&gt;checking the html source&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;\n  &lt;/p&gt;&lt;p&gt;with&amp;nbsp;&lt;/p&gt;&lt;p&gt;all&lt;/p&gt;&lt;p&gt;the html&amp;nbsp;&lt;/p&gt;&lt;p&gt;content&lt;/p&gt;\";\n\n var text = $(content).text();//It gets you the plain text\n console.log(text);//check the data in your console\n\n cj(\"#text_area_id\").val(text);//set your content to text area using text_area_id\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An improvement to an earlier answer.</p>\n\n<pre><code>function strip(html)\n{\n   var tmp = document.implementation.createHTMLDocument(\"New\").body;\n   tmp.innerHTML = html;\n   return tmp.textContent || tmp.innerText || \"\";\n}\n</code></pre>\n\n<p>This way something running like this will do no harm:</p>\n\n<pre><code>strip(\"&lt;img onerror='alert(\\\"could run arbitrary JS here\\\")' src=bogus&gt;\")\n</code></pre>\n\n<p>Firefox, Chromium and Explorer 9+ are safe.\nOpera Presto is still vulnerable.\nAlso images mentioned in the strings are not downloaded in Chromium and Firefox saving http requests.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I just needed to strip out the  tags and replace them with the text of the link.</p>\n\n<p>This seems to work great.</p>\n\n<pre><code>htmlContent= htmlContent.replace(/&lt;a.*href=\"(.*?)\"&gt;/g, '');\nhtmlContent= htmlContent.replace(/&lt;\\/a&gt;/g, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there an easy way to take a string of html in JavaScript and strip out the html? </p>\n",
            "last_activity_date": 1404933414,
            "question_id": 822452,
            "score": 212,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "string"
            ],
            "title": "Strip HTML from Text JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Until the 5th edition spec came out, the <a href=\"http://bclary.com/2004/11/07/#a-15.9.4.2\"><code>Date.parse</code></a> method was completely <em>implementation dependent</em> (<code>new Date(string)</code> is equivalent to <a href=\"http://bclary.com/2004/11/07/#a-15.9.4.2\"><code>Date.parse(string)</code></a> except the latter returns a number rather than a <code>Date</code>). In the 5th edition spec the requirement was added to support a <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\">simplified <em>(and slightly incorrect)</em> ISO-8601</a>, but other than that, there was <em>no</em> requirement for what <code>Date.parse</code> / <code>new Date(string)</code> should accept other than that they had to accept whatever <code>Date#toString</code> output (without saying what that was).</p>\n\n<p>I would recommend you to parse your date string manually, and use the <a href=\"http://bclary.com/2004/11/07/#a-15.9.3.1\">Date constructor</a> with the year, month and day arguments to avoid ambiguity:</p>\n\n<pre><code>// parse a date in yyyy-mm-dd format\nfunction parseDate(input) {\n  var parts = input.split('-');\n  // new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])\n  return new Date(parts[0], parts[1]-1, parts[2]); // Note: months are 0-based\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 269
                },
                {
                    "body": "<p>While <a href=\"http://stackoverflow.com/a/2587398\">CMS is correct</a> that passing strings into the parse method is generally unsafe, the new <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\" rel=\"nofollow\">ECMA-262 5th Edition</a> (aka ES5) specification in section 15.9.4.2 suggests that <code>Date.parse()</code> actually should handle ISO-formatted dates.  The old specification made no such claim.  Of course, old browsers and some current browsers still do not provide this ES5 functionality.</p>\n\n<p>Your second example isn't wrong.  It is the specified date in UTC, as implied by <code>Date.prototype.toISOString()</code>, but is represented in your local timezone.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is some method to the madness. As a general rule, if a browser can interpret a date as an ISO-8601, it will. \"2005-07-08\" falls into this camp, and so it is parsed as UTC. \"Jul 8, 2005\" cannot, and so it is parsed in the local time.</p>\n\n<p>See <a href=\"http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html\">JavaScript and Dates, What a Mess!</a> for more.</p>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>According to <a href=\"http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html\" rel=\"nofollow\">http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html</a> the format \"yyyy/mm/dd\" solves the usual problems. \nHe says: \"Stick to \"YYYY/MM/DD\" for your date strings whenever possible. It's universally supported and unambiguous. With this format, all times are local.\"\nI've set tests: <a href=\"http://jsfiddle.net/jlanus/ND2Qg/432/\" rel=\"nofollow\">http://jsfiddle.net/jlanus/ND2Qg/432/</a>\nThis format: \n + avoids the day and month order ambiguity by using y m d ordering and a 4-digit year\n + avoids the UTC vs. local issue not complying with ISO format by using slashes\n + danvk, the <a href=\"http://blog.dygraphs.com/2012/03/javascript-and-dates-what-mess.html\" rel=\"nofollow\">dygraphs</a> guy, says that this format is good in all browsers. </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Another solution is to build an associative array with date format and then reformat data.</p>\n\n<p>This method is useful for date formatted in an unussual way.</p>\n\n<p>An example:</p>\n\n<pre><code>    mydate='01.02.12 10:20:43':\n    myformat='dd/mm/yy HH:MM:ss';\n\n\n    dtsplit=mydate.split(/[\\/ .:]/);\n    dfsplit=myformat.split(/[\\/ .:]/);\n\n    // creates assoc array for date\n    df = new Array();\n    for(dc=0;dc&lt;6;dc++) {\n            df[dfsplit[dc]]=dtsplit[dc];\n            }\n\n    // uses assc array for standard mysql format\n    dstring[r] = '20'+df['yy']+'-'+df['mm']+'-'+df['dd'];\n    dstring[r] += ' '+df['HH']+':'+df['MM']+':'+df['ss'];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This <a href=\"https://code.google.com/p/flexible-js-formatting/\" rel=\"nofollow\">light weight date parsing library</a> should solve all similar problems. I like the library because it is quite easy to extend. It's also possible to i18n it (not very straight forward, but not that hard).</p>\n\n<p>Parsing example:</p>\n\n<pre><code>var caseOne = Date.parseDate(\"Jul 8, 2005\", \"M d, Y\");\nvar caseTwo = Date.parseDate(\"2005-07-08\", \"Y-m-d\");\n</code></pre>\n\n<p>And formatting back to string (you will notice both cases give exactly the same result):</p>\n\n<pre><code>console.log( caseOne.dateFormat(\"M d, Y\") );\nconsole.log( caseTwo.dateFormat(\"M d, Y\") );\nconsole.log( caseOne.dateFormat(\"Y-m-d\") );\nconsole.log( caseTwo.dateFormat(\"Y-m-d\") );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>During recent experience writing a JS interpreter I wrestled plenty with the inner workings of ECMA/JS dates. So, I figure I'll throw in my 2 cents here. Hopefully sharing this stuff will help others with any questions about the differences among browsers in how they handle dates.</p>\n\n<h1>The Input Side</h1>\n\n<p>All implementations store their date values internally as 64-bit numbers that represent the number of milliseconds since 1/1/1970 UTC (GMT is the same thing as UTC). Dates occurring after <code>1/1/1970 00:00:00</code> are positive numbers and dates prior are negative.</p>\n\n<p>Therefore, the following code produces the exact same result on all browsers.</p>\n\n<pre><code>Date.parse('1/1/1970');\n</code></pre>\n\n<p>In my timezone (EST), the result is 18000000 because that's how many ms are in 5 hours (it's only 4 hours during daylight savings months). The value will be different in different time zones. All the major browsers do it the same way.</p>\n\n<p>Here is the rub though. While there is some variance in the input string formats that the major browsers will parse as dates, they essentially interpret them the same as far as time zones and daylight savings are concerned. The one hold out is the ISO 8601 format. It's the only format outlined in the ECMA-262 v.5 spec specifically. For all other string formats, the interpretation is implementation-dependent. Ironically, this is the format where browsers can differ. Here is a comparison output of Chrome vs Firefox for 1/1/1970 on my machine using the ISO 8601 string format.</p>\n\n<pre><code>Date.parse('1970-01-01T00:00:00Z');       // Chrome: 0         FF: 0\nDate.parse('1970-01-01T00:00:00-0500');   // Chrome: 18000000  FF: 18000000\nDate.parse('1970-01-01T00:00:00');        // Chrome: 0         FF: 18000000\n</code></pre>\n\n<ul>\n<li>The \"Z\" specifier indicates that the input is already in UTC time and requires no offset before storage. </li>\n<li>The \"-0500\" specifier indicates that the input is in GMT-05:00 so both\nbrowsers interpret the input as being in my local timezone. That means that the \nvalue is converted to UTC before being stored. In my case, it means adding 18000000ms to the date's internal value thus requiring a -18000000ms (-05:00) shift to put me back in local time.</li>\n<li>When there is no specifier however, FF treats the input as local time while Chrome\ntreats it as UTC time. For me this creates a 5 hour difference in the stored value, which is problematic. In my implementation I ended up siding with FF here because I like the output of <code>toString</code> to match my input value unless I specify an alternate timezone, which I never do. The <b>absence</b> of a specifier should presume local time input.</li>\n</ul>\n\n<p>But here is where it gets worse, FF treats the short form of the ISO 8601 format (\"YYYY-MM-DD\") differently than it treats the long form (\"YYYY-MM-DDTHH:mm:ss:sssZ\") for no logical reason whatsoever. Here is the output from FF with the long and short ISO date formats with no time zone specifier.</p>\n\n<pre><code>Date.parse('1970-01-01T00:00:00');       // 18000000\nDate.parse('1970-01-01');                // 0\n</code></pre>\n\n<p>So, to answer the original asker's question directly, <code>\"YYYY-MM-DD\"</code> is the short form of the ISO 8601 format <code>\"YYYY-MM-DDTHH:mm:ss:sssZ\"</code>. So, it is interpreted as UTC time while the other is interpreted as local. That's why, </p>\n\n<h3>This doesn't jive:</h3>\n\n<pre><code>console.log(new Date(Date.parse(\"Jul 8, 2005\")).toString());\nconsole.log(new Date(Date.parse(\"2005-07-08\")).toString());\n</code></pre>\n\n<h3>This does:</h3>\n\n<pre><code>console.log(new Date(Date.parse(\"Jul 8, 2005\")).toString());\nconsole.log(new Date(Date.parse(\"2005-07-08T00:00:00\")).toString());\n</code></pre>\n\n<p>The bottom line is this for parsing date strings. The ONLY ISO 8601 string that you can safely parse across browsers is the long form. And, ALWAYS use the \"Z\" specifier. If you do that you can safely go back and forth between local and UTC time.</p>\n\n<h3>This works across browsers (after IE9):</h3>\n\n<pre><code>console.log(new Date(Date.parse(\"2005-07-08T00:00:00Z\")).toString());\n</code></pre>\n\n<p>Fortunately, most current browsers do treat the other input formats equally, including the most frequently used '1/1/1970' and '1/1/1970 00:00:00 AM' formats. All of the following formats (and others) are treated as local time input in all browsers and converted to UTC before storage. Thus, making them cross-browser compatible. The output of this code is the same in all browsers in my timezone.</p>\n\n<pre><code>console.log(Date.parse(\"1/1/1970\"));\nconsole.log(Date.parse(\"1/1/1970 12:00:00 AM\"));\nconsole.log(Date.parse(\"Thu Jan 01 1970\"));\nconsole.log(Date.parse(\"Thu Jan 01 1970 00:00:00\"));\nconsole.log(Date.parse(\"Thu Jan 01 1970 00:00:00 GMT-0500\"));\n</code></pre>\n\n<h1>The Output Side</h1>\n\n<p>On the output side, all browsers translate time zones the same way but they handle the string formats differently. Here are the <code>toString</code> functions and what they output. Notice the <code>toUTCString</code> and <code>toISOString</code> functions output 5:00 AM on my machine.</p>\n\n<p><b>Converts from UTC to Local time before printing</b></p>\n\n<pre><code> - toString\n - toDateString\n - toTimeString\n - toLocaleString\n - toLocaleDateString\n - toLocaleTimeString\n</code></pre>\n\n<p><b>Prints the stored UTC time directly</b></p>\n\n<pre><code> - toUTCString\n - toISOString \n</code></pre>\n\n<hr>\n\n<pre><b>In Chrome</b></pre>\n\n<pre><code>toString            Thu Jan 01 1970 00:00:00 GMT-05:00 (Eastern Standard Time)\ntoDateString        Thu Jan 01 1970\ntoTimeString        00:00:00 GMT-05:00 (Eastern Standard Time)\ntoLocaleString      1/1/1970 12:00:00 AM\ntoLocaleDateString  1/1/1970\ntoLocaleTimeString  00:00:00 AM\n\ntoUTCString         Thu, 01 Jan 1970 05:00:00 GMT\ntoISOString         1970-01-01T05:00:00.000Z\n</code></pre>\n\n<hr>\n\n<pre><b>In Firefox</b></pre>\n\n<pre><code>toString            Thu Jan 01 1970 00:00:00 GMT-05:00 (Eastern Standard Time)\ntoDateString        Thu Jan 01 1970\ntoTimeString        00:00:00 GMT-0500 (Eastern Standard Time)\ntoLocaleString      Thursday, January 01, 1970 12:00:00 AM\ntoLocaleDateString  Thursday, January 01, 1970\ntoLocaleTimeString  12:00:00 AM\n\ntoUTCString         Thu, 01 Jan 1970 05:00:00 GMT\ntoISOString         1970-01-01T05:00:00.000Z\n</code></pre>\n\n<hr>\n\n<p>I normally don't use the ISO format for string input. The only time that using that format is beneficial to me is when dates need to be sorted as strings. The ISO format is sortable as-is while the others are not. If you have to have cross-browser compatibility, either specify the timezone or use a compatible string format.</p>\n\n<p>The code <code>new Date('12/4/2013').toString()</code> goes through the following internal pseudo-transformation:</p>\n\n<pre><code>  \"12/4/2013\" -&gt; toUCT -&gt; [storage] -&gt; toLocal -&gt; print \"12/4/2013\"\n</code></pre>\n\n<p>I hope this answer was helpful.</p>\n",
                    "is_accepted": false,
                    "score": 80
                },
                {
                    "body": "<p>Here is a short, flexible snippet to convert a datetime-string in a cross-browser-safe fashion as nicel detailed by @drankin2112.</p>\n\n<pre><code>var inputTimestamp = \"2014-04-29 13:00:15\"; //example\n\nvar partsTimestamp = inputTimestamp.split(/[ \\/:-]/g);\nif(partsTimestamp.length &lt; 6) {\n    partsTimestamp = partsTimestamp.concat(['00', '00', '00'].slice(0, 6 - partsTimestamp.length));\n}\n//if your string-format is something like '7/02/2014'...\n//use: var tstring = partsTimestamp.slice(0, 3).reverse().join('-');\nvar tstring = partsTimestamp.slice(0, 3).join('-');\ntstring += 'T' + partsTimestamp.slice(3).join(':') + 'Z'; //configure as needed\nvar timestamp = Date.parse(tstring);\n</code></pre>\n\n<p>Your browser should provide the same timestamp result as <code>Date.parse</code> with:</p>\n\n<pre><code>(new Date(tstring)).getTime()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<h3>Case One:</h3>\n\n<pre><code>new Date(Date.parse(\"Jul 8, 2005\"));\n</code></pre>\n\n<h3>Output:</h3>\n\n<p>Fri Jul 08 2005 00:00:00 GMT-0700 (PST)</p>\n\n<h3>Case Two:</h3>\n\n<pre><code>new Date(Date.parse(\"2005-07-08\"));\n</code></pre>\n\n<h3>Output:</h3>\n\n<p>Thu Jul 07 2005 17:00:00 GMT-0700 (PST)</p>\n\n<hr />\n\n<p>Why is the second parse incorrect?</p>\n",
            "last_activity_date": 1425996991,
            "question_id": 2587345,
            "score": 156,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "javascript Date.parse"
        }
    ]
}
