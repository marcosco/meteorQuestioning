{
    "items": [
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Disabled elements don't fire mouse events.  Most browsers will propagate an event originating from the disabled element up the DOM tree, so event handlers could be placed on container elements.  However, Firefox doesn't exhibit this behaviour, it just does nothing at all when you click on a disabled element.</p>\n\n<p>I can't think of a better solution but, for complete cross browser compatibility, you could place an element in front of the disabled input and catch the click on that element.  Here's an example of what I mean:</p>\n\n<pre><code>&lt;div style=\"display:inline-block; position:relative;\"&gt;\n  &lt;input type=\"text\" disabled /&gt;\n  &lt;div style=\"position:absolute; left:0; right:0; top:0; bottom:0;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\u200b\n</code></pre>\n\n<p>jq:</p>\n\n<pre><code>$(\"div &gt; div\").click(function (evt) {\n    $(this).hide().prev(\"input[disabled]\").prop(\"disabled\", false).focus();\n});\u200b\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/RXqAm/170/\">http://jsfiddle.net/RXqAm/170/</a> (updated to use jQuery 1.7 with <code>prop</code> instead of  <code>attr</code>).</p>\n",
                    "is_accepted": true,
                    "score": 127
                },
                {
                    "body": "<p>hm.. maybe you could make the field readonly and on submit disable all readonly fields</p>\n\n<pre><code>$(\".myform\").submit(function(e) {\n    $(\"input[readonly]\", this).attr(\"disabled\", true);\n});\n</code></pre>\n\n<p>and the input (+ script) sould be</p>\n\n<pre><code>&lt;input type=\"text\" readonly=\"readonly\" name=\"test\" value=\"test\" /&gt;\n\n$('input[readonly]').click(function () {\n    $(this).removeAttr('readonly');\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>suggestion here looks like a good candidate for this question as well </p>\n\n<p><a href=\"http://stackoverflow.com/questions/1221778/performing-click-event-on-a-disabled-element-javascript-jquery\">Performing click event on a disabled element? Javascript jQuery</a></p>\n\n<pre><code>jQuery('input#submit').click(function(e) {\n    if ( something ) {        \n        return false;\n    } \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would suggest an alternative - use CSS:</p>\n\n<pre><code>input.disabled {\n    user-select : none;\n    -moz-user-select : none;\n    -webkit-user-select : none;\n    color: gray;\n    cursor: pointer;\n}\n</code></pre>\n\n<p>instead of the disabled attribute. Then, you can add your own CSS attributes to simulate a disabled input, but with more control.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>OR do this with jQuery and CSS!</p>\n\n<pre><code>$('input.disabled').attr('ignore','true').css({\n    'pointer-events':'none',\n     'color': 'gray'\n});\n</code></pre>\n\n<p>This way you make the element look disabled and no pointer events will fire, yet it allows propagation and if submitted you can use the attribute 'ignore' to ignore it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>html</p>\n\n<pre><code>&lt;div&gt;\n    &lt;input type=\"text\" disabled /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>jquery</p>\n\n<pre><code>$(\"input:disabled\").closest(\"div\").click(function () {\n    $(this).find(\"input:disabled\").prop(\"disabled\", false).focus();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Apparently a disabled <code>&lt;input&gt;</code> is not handled by any event (am I wrong?)</p>\n\n<p>Is there a way to work arround this problem?</p>\n\n<pre><code>&lt;input type=\"text\" disabled=\"disabled\" name=\"test\" value=\"test\" /&gt;\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>$(':input').click(function () {\n    $(this).removeAttr('disabled');\n})\n</code></pre>\n\n<p>Here, I need to click on the input to enable it. But if I don't activate it, the input should not be posted.</p>\n",
            "last_activity_date": 1417016242,
            "question_id": 3100319,
            "score": 95,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Event on a disabled input"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Do not disable expected browser behaviour. </p>\n\n<p>Make your pages handle the possibility of users going back a page or two; don't try to cripple their software.</p>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>You should be using posts with proper expires and caching headers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This question is very similar to this <a href=\"http://stackoverflow.com/questions/533867/whats-the-best-method-for-forcing-cache-expiration-in-asp-net\">one</a>...</p>\n\n<p>You need to force the cache to expire for this to work.  Place the following code on your page code behind.</p>\n\n<pre><code>Page.Response.Cache.SetCacheability(HttpCacheability.NoCache)\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p><em>Others have taken the approach to say \"don't do this\" but that doesn't really answer the poster's question.  Let's just assume that everyone knows this is a bad idea, but we are curious about how it's done anyway...</em></p>\n\n<p>You cannot disable the back button on a user's browser, but you can make it so that your application breaks (displays an error message, requiring the user to start over) if the user goes back.</p>\n\n<p>One approach I have seen for doing this is to pass a token on every URL within the application, and within every form.  The token is regenerated on every page, and once the user loads a new page any tokens from previous pages are invalidated.</p>\n\n<p>When the user loads a page, the page will only show if the correct token (which was given to all links/forms on the previous page) was passed to it.</p>\n\n<p>The online banking application my bank provides is like this.  If you use the back button at all, no more links will work and no more page reloads can be made - instead you see a notice telling you that you cannot go back, and you have to start over.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>If you rely on client-side technology, it can be circumvented. Javascript may be disabled, for example. Or user might execute a JS script to work around your restrictions.</p>\n\n<p>My guess is you can only do this by server-side tracking of the user session, and redirecting (as in Server.Transfer, not Response.Redirect) the user/browser to the required page.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Instead of trying to disable the browser back button it's better to support it.\n.NET 3.5 can very well handle the browser back (and forward) buttons. Search with Google: \"Scriptmanager EnableHistory\". \nYou can control which user actions will add an entry to the browser's history (ScriptManager -> AddHistoryPoint) and your ASP.NET application receives an event whenever the user clicks the browser Back/Forward buttons. \nThis will work for all known browsers</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;body onLoad=\"if(history.length&gt;0)history.go(+1)\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There have been a few different implementations. There is a flash solution and some iframe/frame solutions for IE.  Check out this  </p>\n\n<p><a href=\"http://www.contentwithstyle.co.uk/content/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps\" rel=\"nofollow\">http://www.contentwithstyle.co.uk/content/fixing-the-back-button-and-enabling-bookmarking-for-ajax-apps</a></p>\n\n<p>BTW: There are plenty of valid reasons to disable (or at least prevent 1 step) a back button -- look at gmail as an example which implements the hash solution discussed in the above article.</p>\n\n<p>Google \"how ajax broke the back button\" and you'll find plenty of articles on user testing and the validity of disabling the back button.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Condemning the question without knowing the context is a bit harsh. I, for instance, would love to know the proper way to do this: currently I'm running an online psychology experiment, and sometimes participants press the back button (backspace or 'delete' when on a mac) instead of the enter key, by accident. This can potentially mess up the experiment and thus ruin the data (which thankfully hasn't happened yet). This is obviously a case where the input needs to be confined.</p>\n\n<p>Ofcourse I do agree that in the rule this is a very bad idea... but that has been made clear abundantly already.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I came up with a little hack that disables the back button using JavaScript. I checked it on chrome 10, firefox 3.6 and IE9:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n&lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;script type = \"text/javascript\" &gt;\nfunction changeHashOnLoad() {\n     window.location.href += \"#\";\n     setTimeout(\"changeHashAgain()\", \"50\"); \n}\n\nfunction changeHashAgain() {\n  window.location.href += \"1\";\n}\n\nvar storedHash = window.location.hash;\nwindow.setInterval(function () {\n    if (window.location.hash != storedHash) {\n         window.location.hash = storedHash;\n    }\n}, 50);\n\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"changeHashOnLoad(); \"&gt;\nTry to hit the back button!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><em>What is it doing?</em></p>\n\n<p><em>From Comments:</em></p>\n\n<p>This script leverages the fact that browsers consider whatever comes after the \"#\" sign in the URL as part of the browsing history. What it does is this: When the page loads, \"#1\" is added to the URL. After 50ms the \"1\" is removed. When the user clicks \"back\", the browser changes the URL back to what it was before the \"1\" was removed, BUT - it's the same web page, so the browser doesn't need to reload the page. \u2013  Yossi Shasho</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>I was searching for the same question and I found following code on a site. Thought to share it here:</p>\n\n<pre><code>function noBack()\n{\n   window.history.forward()\n}\nnoBack();\nwindow.onload = noBack;\nwindow.onpageshow = function(evt){ if(evt.persisted) noBack(); }\nwindow.onunload = function(){ void(0); }\n</code></pre>\n\n<p>However as noted by above users, this is never a good practice and should be avoided for all reasons.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>While i'm looking for the answer myself,\n\"Best Practice\" is.... outdated... Just like browsers are.(Really browsers are ugly fossils)</p>\n\n<p>The best/safest solution would be for browsers to implement a method/request where the user can grant the page the ability to control the interface.</p>\n\n<p>Why? Because for my current project i'm building a 100% JavaScript built and controlled interface.. And back button's have no place in my project since there is no page change. (Ie bloody fast and no page-flashes because of a refresh.. Just like a real application!)</p>\n\n<p>I know why the ability to \"highjack\" the interface isn't there, and i understand it. But atleast we should have the ability to request it from the browser! Now that would truly be \"best practice\" without the highjack dangers.</p>\n\n<p>But browsers being browsers.. I don't expect anything exiting to happen in this regard.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Globally, disabling the back button is indeed bad practice.  But, in certain situations, the back button functionality doesn't make sense.  </p>\n\n<p>Here's one way to prevent unwanted navigation between pages:</p>\n\n<p><strong>Top page (file <code>top.php</code>):</strong></p>\n\n<pre><code>&lt;?php\n    session_start();\n    $_SESSION[pid]++;\n    echo \"top page $_SESSION[pid]\";\n    echo \"&lt;BR&gt;&lt;a href='secondary.php?pid=$_SESSION[pid]'&gt;secondary page&lt;/a&gt;\";\n?&gt;\n</code></pre>\n\n<p><strong>Secondary page (file <code>secondary.php</code>):</strong></p>\n\n<pre><code>&lt;?php\n    session_start();\n    if ($_SESSION[pid] != $_GET[pid]) \n        header(\"location: top.php\");\n    else {\n        echo \"secondary page $_SESSION[pid]\";\n        echo \"&lt;BR&gt;&lt;a href='top.php'&gt;top&lt;/a&gt;\";\n    }\n?&gt;\n</code></pre>\n\n<p>The effect is to allow navigating from the top page forward to the secondary page and back (e.g. Cancel) using your own links.  But, after returning to the top page the browser back button is prevented from navigating to the secondary page.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Even I faced the same situation before...and didn't have any help.\ntry these things maybe these will work for you</p>\n\n<p>in login page <code>&lt;head&gt;</code> tag:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.history.forward();\n&lt;/script&gt;\n</code></pre>\n\n<p>in Logout Button I did this:</p>\n\n<pre><code>protected void Btn_Logout_Click(object sender, EventArgs e)      \n{\n    connObj.Close();\n    Session.Abandon();\n    Session.RemoveAll();\n    Session.Clear();\n    HttpContext.Current.Session.Abandon();\n}\n</code></pre>\n\n<p>and on login page I have put the focus on Username textbox like this:</p>\n\n<pre><code>protected void Page_Load(object sender, EventArgs e)\n{\n    _txtUsername.Focus();\n}\n</code></pre>\n\n<p>hope this helps...\n:)\nsomeone plz teach me how to edit this page...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>IF you need to softly suppress the delete and backspace keys in your Web app, so that when they are editing / deleting items the page does not get redirected unexpectedly, you can use this code:</p>\n\n<pre><code>window.addEventListener('keydown', function(e) {\n  var key = e.keyCode || e.which;\n  if (key == 8 /*BACKSPACE*/ || key == 46/*DELETE*/) {\n    var len=window.location.href.length;\n    if(window.location.href[len-1]!='#') window.location.href += \"#\";\n  }\n},false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this code.\nYou just need to implement this code in master page and it will work for you on all the pages</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.onload = function () {\n        noBack();\n    }\n    function noBack() {\n        window.history.forward();\n    }\n&lt;/script&gt;\n&lt;body  onpageshow=\"if (event.persisted) noBack();\"&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I also had the same problem, use this Java script function on head tag or in , its 100% working fine, would not let you go back.</p>\n\n<pre><code> &lt;script type = \"text/javascript\" &gt;\n      function preventBack(){window.history.forward();}\n        setTimeout(\"preventBack()\", 0);\n        window.onunload=function(){null};\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How to disable browser's BACK Button (across browsers)?</p>\n",
            "last_activity_date": 1398457602,
            "question_id": 961188,
            "score": 71,
            "tags": [
                "asp.net",
                "javascript"
            ],
            "title": "Disable browser&#39;s back button"
        },
        {
            "answer_count": 29,
            "answers": [
                {
                    "body": "<p>Visual Basic.NET has a similar <code>With</code> statement. One of the more common ways I use it is to quickly set a number of properties. Instead of:</p>\n\n<pre><code>someObject.Foo = ''\nsomeObject.Bar = ''\nsomeObject.Baz = ''\n</code></pre>\n\n<p>, I can write:</p>\n\n<pre><code>With someObject\n    .Foo = ''\n    .Bar = ''\n    .Baz = ''\nEnd With\n</code></pre>\n\n<p>This isn't just a matter of laziness. It also makes for much more readable code. And unlike JavaScript, it does not suffer from ambiguity, as you have to prefix everything affected by the statement with a <code>.</code> (dot). So, the following two are clearly distinct:</p>\n\n<pre><code>With someObject\n    .Foo = ''\nEnd With\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>With someObject\n    Foo = ''\nEnd With\n</code></pre>\n\n<p>The former is <code>someObject.Foo</code>; the latter is <code>Foo</code> in the scope <em>outside</em> <code>someObject</code>.</p>\n\n<p>I find that JavaScript's lack of distinction makes it far less useful than Visual Basic's variant, as the risk of ambiguity is too high. Other than that, <code>with</code> is still a powerful idea that can make for better readability.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I think the obvious use is as a shortcut. If you're e.g. initializing an object you simply save typing a lot of \"ObjectName.\" Kind of like lisp's \"with-slots\" which lets you write </p>\n\n<pre><code>(with-slots (foo bar) objectname\n   \"some code that accesses foo and bar\"\n</code></pre>\n\n<p>which is the same as writing</p>\n\n<pre><code>\"some code that accesses (slot-value objectname 'foo) and (slot-value objectname 'bar)\"\"\n</code></pre>\n\n<p>It's more obvious why this is a shortcut then when your language allows \"Objectname.foo\" but still.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Having experience with Delphi, I would say that using <em>with</em> should be a last-resort size optimization, possibly performed by some kind of javascript minimizer algorithm with access to static code analysis to verify its safety.</p>\n\n<p>The scoping problems you can get into with liberal use of the <em>with</em> statement can be a royal pain in the a** and I wouldn't want anyone to experience a debugging session to figure out what the he.. is going on in your code, only to find out that it captured an object member or the wrong local variable, instead of your global or outer scope variable which you intended.</p>\n\n<p>The VB <em>with</em> statement is better, in that it needs the dots to disambiguate the scoping, but the Delphi <em>with</em> statement is a loaded gun with a hairtrigger, and it looks to me as though the javascript one is similar enough to warrant the same warning.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can define a small helper function to provide the benefits of <code>with</code> without the ambiguity:</p>\n\n<pre><code>var with_ = function (obj, func) { func (obj); };\n\nwith_ (object_name_here, function (_)\n{\n    _.a = \"foo\";\n    _.b = \"bar\";\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I just really don't see how using the with is any more readable than just typing object.member.  I don't think it's any less readable, but I don't think it's any more readable either.</p>\n\n<p>Like lassevk said, I can definitely see how using with would be more error prone than just using the very explicit \"object.member\" syntax.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using with also makes your code slower in many implementation, as everything now gets wrapped in an extra scope for lookup. There's no legitimate reason for using with in JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As my previous comments indicated, I don't think you can use <em><code>with</code></em> safely no matter how tempting it might be in any given situation. Since the issue isn't directly covered here, I'll repeat it.  Consider the following code</p>\n\n<pre><code>user = {};\nsomeFunctionThatDoesStuffToUser(user);\nsomeOtherFunction(user);\n\nwith(user){\n    name = 'Bob';\n    age  = 20;\n}\n</code></pre>\n\n<p>Without carefully investigating those function calls, there's no way to tell what the state of your program will be after this code runs.  If <code>user.name</code> was already set, it will now be <code>Bob</code>. If it wasn't set, the global <code>name</code> will be initialized or changed to <code>Bob</code> and the <code>user</code> object will remain without a <code>name</code> property. </p>\n\n<p>Bugs happen.  If you use <em>with</em> you will eventually do this and increase the chances your program will fail.  Worse, you may encounter working code that sets a global in the with block, either deliberately or through the author not knowing about this quirk of the construct.  It's a lot like encountering fall through on a switch, you have no idea if the author intended this and there's no way to know if \"fixing\" the code will introduce a regression.</p>\n\n<p>Modern programming languages are chocked full of features. Some features, after years of use, are discovered to be bad, and should be avoided.  Javascript's <em><code>with</code></em> is one of them.</p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>Hardly seems worth it since you can do the following:</p>\n\n<pre><code>var o = incrediblyLongObjectNameThatNoOneWouldUse;\no.name = \"Bob\";\no.age = \"50\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>I think the with-statement can come in handy when converting a template language into JavaScript. For example <a href=\"http://code.google.com/p/base2/source/browse/trunk/src/base2/JST/Interpreter.js\" rel=\"nofollow\">JST</a> in <a href=\"http://code.google.com/p/base2/\" rel=\"nofollow\">base2</a>, but I've seen it more often. </p>\n\n<p>I agree one can program this without the with-statement. But because it doesn't give any problems it is a legitimate use. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think that the usefulness of <code>with</code> can be dependent on how well your code is written. For example, if you're writing code that appears like this:</p>\n\n<pre><code>var sHeader = object.data.header.toString();\nvar sContent = object.data.content.toString();\nvar sFooter = object.data.footer.toString();\n</code></pre>\n\n<p>then you could argue that <code>with</code> will improve the readability of the code by doing this:</p>\n\n<pre><code>var sHeader = null, sContent = null, sFooter = null;\nwith(object.data) {\n    sHeader = header.toString();\n    sContent = content.toString();\n    sFooter = content.toString();\n}\n</code></pre>\n\n<p>Conversely, it could be argued that you're violating the <a href=\"http://en.wikipedia.org/wiki/Law_of_Demeter\" rel=\"nofollow\">Law of Demeter</a>, but, then again, maybe not. I digress =).</p>\n\n<p>Above all else, know that Douglas Crockford recommends <strong>not</strong> using <code>with</code>. I urge you to check out his blog post regarding <code>with</code> and its alternatives <a href=\"http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another use occurred to me today, so i searched the web excitedly and found an existing mention of it: <a href=\"http://web.archive.org/web/20090111183416/http://www.hedgerwow.com/360/dhtml/js_block_scope.html\">Defining Variables inside Block Scope</a>.</p>\n\n<h3>Background</h3>\n\n<p>JavaScript, in spite of its superficial resemblance to C and C++, does not scope variables to the block they are defined in:</p>\n\n<pre><code>var name = \"Joe\";\nif ( true )\n{\n   var name = \"Jack\";\n}\n// name now contains \"Jack\"\n</code></pre>\n\n<p>Declaring a closure in a loop is a common task where this can lead to errors:</p>\n\n<pre><code>for (var i=0; i&lt;3; ++i)\n{\n   var num = i;\n   setTimeout(function() { alert(num); }, 10);\n}\n</code></pre>\n\n<p>Because the for loop does not introduce a new scope, the same <code>num</code> - with a value of <code>2</code> - will be shared by all three functions. </p>\n\n<h3>A new scope: <code>let</code> and <code>with</code></h3>\n\n<p>With the introduction of the <code>let</code> statement in <a href=\"http://developer.mozilla.org/En/New_in_JavaScript_1.7#Block_scope_with_let\">JavaScript 1.7</a>, it becomes easy to introduce a new scope when necessary to avoid these problems:</p>\n\n<pre><code>for (var i=0; i&lt;3; ++i)\n{\n   // variables introduced in this statement \n   // are scoped to the block following it.\n   let (num = i) \n   {\n      setTimeout(function() { alert(num); }, 10);\n   }\n}\n</code></pre>\n\n<p>But until other browsers implement it, this will remain limited to Mozilla-targeted code. However, we can easily simulate this behavior using <code>with</code>:</p>\n\n<pre><code>for (var i=0; i&lt;3; ++i)\n{\n   // object members introduced in this statement \n   // are scoped to the block following it.\n   with ({num: i})\n   {\n      setTimeout(function() { alert(num); }, 10);\n   }\n}\n</code></pre>\n\n<p>The loop now works as intended, creating three separate variables with values from 0 to 2. Note that variables declared <em>within</em> the block are not scoped to it - this is identical to the behavior of <code>let</code>, but unlike the behavior of blocks in C++ (in C, variables must be declared at the start of a block, so in a way it is similar). </p>\n",
                    "is_accepted": false,
                    "score": 443
                },
                {
                    "body": "<p>Yes, yes and yes.  There is a very legitimate use.  Watch:</p>\n\n<pre><code>with (document.getElementById(\"blah\").style) {\n    background = \"black\";\n    color = \"blue\";\n    border = \"1px solid green\";\n}\n</code></pre>\n\n<p>Basically any other DOM or CSS hooks are fantastic uses of with.  It's not like \"CloneNode\" will be undefined and go back to the global scope unless you went out of your way and decided to make it possible.</p>\n\n<p>Crockford's speed complaint is that a new context is created by with.  Contexts are generally expensive.  I agree.  But if you just created a div and don't have some framework on hand for setting your css and need to set up 15 or so CSS properties by hand, then creating a context will probably be cheaper then variable creation and 15 dereferences:</p>\n\n<pre><code>var element = document.createElement(\"div\"),\n    elementStyle = element.style;\n\nelementStyle.fontWeight = \"bold\";\nelementStyle.fontSize = \"1.5em\";\nelementStyle.color = \"#55d\";\nelementStyle.marginLeft = \"2px\";\n</code></pre>\n\n<p>etc...</p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>I have been using the with statement as a simple form of scoped import. Let's say you have a markup builder of some sort. Rather than writing:</p>\n\n<pre><code>markupbuilder.div(\n  markupbuilder.p('Hi! I am a paragraph!',\n    markupbuilder.span('I am a span inside a paragraph')\n  )\n)\n</code></pre>\n\n<p>You could instead write:</p>\n\n<pre><code>with(markupbuilder){\n  div(\n    p('Hi! I am a paragraph!',\n      span('I am a span inside a paragraph')\n    )\n  )\n}\n</code></pre>\n\n<p>For this use case, I am not doing any assignment, so I don't have the ambiguity problem associated with that.</p>\n",
                    "is_accepted": false,
                    "score": 142
                },
                {
                    "body": "<p>I don't ever use with, don't see a reason to, and don't recommend it.</p>\n\n<p>The problem with <code>with</code> is that it <strong>prevents numerous lexical optimizations</strong> an ECMAScript implementation can perform. Given the rise of fast JIT-based engines, this issue will probably become even more important in the near future.</p>\n\n<p>It might look like <code>with</code> allows for cleaner constructs (when, say, introducing a new scope instead of a common anonymous function wrapper or replacing verbose aliasing), but it's  <strong>really not worth it</strong>. Besides a decreased performance, there's always a danger of assigning to a property of a wrong object (when property is not found on an object in injected scope) and perhaps erroneously introducing global variables. IIRC, latter issue is the one that motivated Crockford to recommend to avoid <code>with</code>.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The with statement can be used to decrease the code size or for private class members, example:</p>\n\n<pre><code>// demo class framework\nvar Class= function(name, o) {\n   var c=function(){};\n   if( o.hasOwnProperty(\"constructor\") ) {\n       c= o.constructor;\n   }\n   delete o[\"constructor\"];\n   delete o[\"prototype\"];\n   c.prototype= {};\n   for( var k in o ) c.prototype[k]= o[k];\n   c.scope= Class.scope;\n   c.scope.Class= c;\n   c.Name= name;\n   return c;\n}\nClass.newScope= function() {\n    Class.scope= {};\n    Class.scope.Scope= Class.scope;\n    return Class.scope;\n}\n\n// create a new class\nwith( Class.newScope() ) {\n   window.Foo= Class(\"Foo\",{\n      test: function() {\n          alert( Class.Name );\n      }\n   });\n}\n(new Foo()).test();\n</code></pre>\n\n<p>The with-statement is very usefull if you want to modify the scope, what is necessary for having your own global scope that you can manipulate at runtime. You can put constants on it or certain helper functions often used like e.g. \"toUpper\", \"toLower\" or \"isNumber\", \"clipNumber\" aso..</p>\n\n<p>About the bad performance I read that often: Scoping a function won't have any impact on the performance, in fact in my FF a scoped function runs faster then an unscoped:</p>\n\n<pre><code>var o={x: 5},r, fnRAW= function(a,b){ return a*b; }, fnScoped, s, e, i;\nwith( o ) {\n    fnScoped= function(a,b){ return a*b; };\n}\n\ns= Date.now();\nr= 0;\nfor( i=0; i &lt; 1000000; i++ ) {\n    r+= fnRAW(i,i);\n}\ne= Date.now();\nconsole.log( (e-s)+\"ms\" );\n\ns= Date.now();\nr= 0;\nfor( i=0; i &lt; 1000000; i++ ) {\n    r+= fnScoped(i,i);\n}\ne= Date.now();\nconsole.log( (e-s)+\"ms\" );\n</code></pre>\n\n<p>So in the above mentioned way used the with-statement has no negative effect on performance, but a good one as it deceases the code size, what impacts the memory usage on mobile devices.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It's good for putting code that runs in a relatively complicated environment into a container: I use it to make a local binding for \"window\" and such to run code meant for a web browser.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think the object literal use is interesting, like a drop-in replacement for using a closure</p>\n\n<pre><code>for(var i = nodes.length; i--;)\n{\n       // info is namespaced in a closure the click handler can access!\n       (function(info)\n       {           \n            nodes[i].onclick = function(){ showStuff(info) };\n       })(data[i]);\n}\n</code></pre>\n\n<p>or the with statement equivilent of a closure</p>\n\n<pre><code>for(var i = nodes.length; i--;)\n{\n       // info is namespaced in a closure the click handler can access!\n       with({info: data[i]})\n       {           \n            nodes[i].onclick = function(){ showStuff(info) };\n       }        \n}\n</code></pre>\n\n<p>I think the real risk is accidently minipulating variables that are not part of the with statement, which is why I like the object literal being passed into with, you can see exactly what it will be in the added context in the code.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Using \"with\" can make your code more dry.</p>\n\n<p>Consider the following code:</p>\n\n<pre><code>var photo = document.getElementById('photo');\nphoto.style.position = 'absolute';\nphoto.style.left = '10px';\nphoto.style.top = '10px';\n</code></pre>\n\n<p>You can dry it to the following:</p>\n\n<pre><code>with(document.getElementById('photo').style) {\n  position = 'absolute';\n  left = '10px';\n  top = '10px';\n}\n</code></pre>\n\n<p>I guess it depends whether you have a preference for legibility or expressiveness. </p>\n\n<p>The first example is more legible and probably recommended for most code. But most code is pretty tame anyway. The second one is a bit more obscure but uses the expressive nature of the language to cut down on code size and superfluous variables.</p>\n\n<p>I imagine people who like Java or C# would choose the first way (object.member) and those who prefer Ruby or Python would choose the latter.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I created a \"merge\" function which eliminates some of this ambiguity with the <code>with</code> statement:</p>\n\n<pre><code>if (typeof Object.merge !== 'function') {\n    Object.merge = function (o1, o2) { // Function to merge all of the properties from one object into another\n        for(var i in o2) { o1[i] = o2[i]; }\n        return o1;\n    };\n}\n</code></pre>\n\n<p>I can use it similarly to <code>with</code>, but I can know it won't affect any scope which I don't intend for it to affect.</p>\n\n<p>Usage:</p>\n\n<pre><code>var eDiv = document.createElement(\"div\");\nvar eHeader = Object.merge(eDiv.cloneNode(false), {className: \"header\", onclick: function(){ alert(\"Click!\"); }});\nfunction NewObj() {\n    Object.merge(this, {size: 4096, initDate: new Date()});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use <code>with</code> to introduce the contents of an object as local variables to a block, like it's being done with this <a href=\"http://ejohn.org/blog/javascript-micro-templating/\">small template engine</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You got to see the validation of a form in javascript at W3schools <a href=\"http://www.w3schools.com/js/js_form_validation.asp\" rel=\"nofollow\">http://www.w3schools.com/js/js_form_validation.asp</a> where the object form is \"scanned\" through to find an input with name 'email'</p>\n\n<p>But i've modified it to get from ANY form all the fields validate as not empty, regardless of the name or quantity of field in a form. Well i've tested only text-fields.</p>\n\n<p>But the with() made things simpler. Here's the code:</p>\n\n<pre><code>function validate_required(field)\n{\nwith (field)\n  {\n  if (value==null||value==\"\")\n    {\n    alert('All fields are mandtory');return false;\n    }\n  else\n    {\n    return true;\n    }\n  }\n}\n\nfunction validate_form(thisform)\n{\nwith (thisform)\n  {\n    for(fiie in elements){\n        if (validate_required(elements[fiie])==false){\n            elements[fiie].focus();\n            elements[fiie].style.border='1px solid red';\n            return false;\n        } else {elements[fiie].style.border='1px solid #7F9DB9';}\n    }\n\n  }\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I actually found the <code>with</code> statement to be incredibly useful recently.  This technique never really occurred to me until I started my current project - a command line console written in JavaScript.  I was trying to emulate the Firebug/WebKit console APIs where special commands can be entered into the console but they don't override any variables in the global scope.  I thought of this when trying to overcome a problem I mentioned in the comments to <a href=\"http://stackoverflow.com/questions/61552/are-there-legitimate-uses-for-javascripts-with-statement/185283#185283\">Shog9's excellent answer</a>.</p>\n\n<p>To achieve this effect, I used two with statements to \"layer\" a scope behind the global scope:</p>\n\n<pre><code>with (consoleCommands) {\n    with (window) {\n        eval(expression); \n    }\n}\n</code></pre>\n\n<p>The great thing about this technique is that, aside from the performance disadvantages, it doesn't suffer the usual fears of the <code>with</code> statement, because we're evaluating in the global scope anyway - there's no danger of variables outside our pseudo-scope from being modified.  </p>\n\n<p>I was inspired to post this answer when, to my surprise, I managed to find the same technique used elsewhere - the <a href=\"http://www.google.com/codesearch/p?hl=en#1IKf2ZWr9OM/deps/reference_builds/chrome_frame/resources/inspector/InjectedScript.js&amp;l=551\">Chromium source code</a>!</p>\n\n<pre><code>InjectedScript._evaluateOn = function(evalFunction, object, expression) {\n    InjectedScript._ensureCommandLineAPIInstalled();\n    // Surround the expression in with statements to inject our command line API so that\n    // the window object properties still take more precedent than our API functions.\n    expression = \"with (window._inspectorCommandLineAPI) { with (window) { \" + expression + \" } }\";\n    return evalFunction.call(object, expression);\n}\n</code></pre>\n\n<p><strong>EDIT:</strong> Just checked the Firebug source, they <a href=\"http://code.google.com/p/fbug/source/browse/branches/eval/content/firebug/commandLine.js#16\">chain 4 with statements together</a> for even more layers.  Crazy!</p>\n\n<pre><code>const evalScript = \"with (__win__.__scope__.vars) { with (__win__.__scope__.api) { with (__win__.__scope__.userVars) { with (__win__) {\" +\n    \"try {\" +\n        \"__win__.__scope__.callback(eval(__win__.__scope__.expr));\" +\n    \"} catch (exc) {\" +\n        \"__win__.__scope__.callback(exc, true);\" +\n    \"}\" +\n\"}}}}\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>CoffeeScript's <a href=\"http://github.com/satyr/coco\" rel=\"nofollow\">Coco</a> fork has a <code>with</code> keyword, but it simply sets <code>this</code> (also writable as <code>@</code> in CoffeeScript/Coco) to the target object within the block. This removes ambiguity and achieves ES5 strict mode compliance:</p>\n\n<pre><code>with long.object.reference\n  @a = 'foo'\n  bar = @b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For some short code pieces, I would like to use the trigonometric functions like <code>sin</code>, <code>cos</code> etc. in degree mode instead of in radiant mode. For this purpose, I use an <code>AngularDegree</code>object: </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>AngularDegree = new function() {\nthis.CONV = Math.PI / 180;\nthis.sin = function(x) { return Math.sin( x * this.CONV ) };\nthis.cos = function(x) { return Math.cos( x * this.CONV ) };\nthis.tan = function(x) { return Math.tan( x * this.CONV ) };\nthis.asin = function(x) { return Math.asin( x ) / this.CONV };\nthis.acos = function(x) { return Math.acos( x ) / this.CONV };\nthis.atan = function(x) { return Math.atan( x ) / this.CONV };\nthis.atan2 = function(x,y) { return Math.atan2(x,y) / this.CONV };\n};\n</code></pre>\n\n<p>Then I can use the trigonometric functions in degree mode without further language noise in a <code>with</code> block: </p>\n\n<pre><code>function getAzimut(pol,pos) {\n  ...\n  var d = pos.lon - pol.lon;\n  with(AngularDegree) {\n    var z = atan2( sin(d), cos(pol.lat)*tan(pos.lat) - sin(pol.lat)*cos(d) );\n    return z;\n    }\n  }\n</code></pre>\n\n<p>This means: I use an object as a collection of functions, which I enable in a limited code region for direct access. I find this useful.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using with is not recommended, and is forbidden in ECMAScript 5 strict mode. The recommended alternative is to assign the object whose properties you want to access to a temporary variable.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/with\" rel=\"nofollow\">Source: Mozilla.org</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here's a good use for <code>with</code>: adding new elements to an Object Literal, based on values stored in that Object.  Here's an example that I just used today:</p>\n\n<p>I had a set of possible tiles (with openings facing top, bottom, left, or right) that could be used, and I wanted a quick way of adding a list of tiles which would be always placed and locked at the start of the game.  I didn't want to keep typing <code>types.tbr</code> for each type in the list, so I just used <code>with</code>.</p>\n\n<pre><code>Tile.types = (function(t,l,b,r) {\n  function j(a) { return a.join(' '); }\n  // all possible types\n  var types = { \n    br:  j(  [b,r]),\n    lbr: j([l,b,r]),\n    lb:  j([l,b]  ),  \n    tbr: j([t,b,r]),\n    tbl: j([t,b,l]),\n    tlr: j([t,l,r]),\n    tr:  j([t,r]  ),  \n    tl:  j([t,l]  ),  \n    locked: []\n  };  \n  // store starting (base/locked) tiles in types.locked\n  with( types ) { locked = [ \n    br,  lbr, lbr, lb, \n    tbr, tbr, lbr, tbl,\n    tbr, tlr, tbl, tbl,\n    tr,  tlr, tlr, tl\n  ] } \n  return types;\n})(\"top\",\"left\",\"bottom\",\"right\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use with to avoid having to explicitly manage arity when using require.js:  </p>\n\n<pre><code>var modules = requirejs.declare([{\n    'App' : 'app/app'\n}]);\n\nrequire(modules.paths(), function() { with (modules.resolve(arguments)) {\n    App.run();\n}});\n</code></pre>\n\n<p>Implementation of requirejs.declare:</p>\n\n<pre><code>requirejs.declare = function(dependencyPairs) {\n    var pair;\n    var dependencyKeys = [];\n    var dependencyValues = [];\n\n    for (var i=0, n=dependencyPairs.length; i&lt;n; i++) {\n        pair = dependencyPairs[i];\n        for (var key in dependencyPairs[i]) {\n            dependencyKeys.push(key);\n            dependencyValues.push(pair[key]);\n            break;\n        }\n    };\n\n    return {\n        paths : function() {\n            return dependencyValues;\n        },\n\n        resolve : function(args) {\n            var modules = {};\n            for (var i=0, n=args.length; i&lt;n; i++) {\n                modules[dependencyKeys[i]] = args[i];\n            }\n            return modules;\n        }\n    }   \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As Andy E pointed out in the comments of Shog9's answer, this potentially-unexpected behavior occurs when using <code>with</code> with an object literal:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n  function toString() {\n    return 'a';\n  }\n  with ({num: i}) {\n    setTimeout(function() { console.log(num); }, 10);\n    console.log(toString()); // prints \"[object Object]\"\n  }\n}\n</code></pre>\n\n<p>Not that unexpected behavior wasn't <em>already</em> a hallmark of <code>with</code>.</p>\n\n<p>If you really still want to use this technique, at least use an object with a null prototype.</p>\n\n<pre><code>function scope(o) {\n  var ret = Object.create(null);\n  if (typeof o !== 'object') return ret;\n  Object.keys(o).forEach(function (key) {\n    ret[key] = o[key];\n  });\n  return ret;\n}\n\nfor (var i = 0; i &lt; 3; i++) {\n  function toString() {\n    return 'a';\n  }\n  with (scope({num: i})) {\n    setTimeout(function() { console.log(num); }, 10);\n    console.log(toString()); // prints \"a\"\n  }\n}\n</code></pre>\n\n<p>But this will only work in ES5+. Also don't use <code>with</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am working on a project that will allow users to upload code in order to modify the behavior of parts of the application.  In this scenario, I have been using a <code>with</code> clause to keep their code from modifying anything outside of the scope that I want them to mess around with.  The (simplified) portion of code I use to do this is:</p>\n\n<pre><code>// this code is only executed once\nvar localScope = {\n    build: undefined,\n\n    // this is where all of the values I want to hide go; the list is rather long\n    window: undefined,\n    console: undefined,\n    ...\n};\nwith(localScope) {\n    build = function(userCode) {\n        eval('var builtFunction = function(options) {' + userCode + '}');\n        return builtFunction;\n    }\n}\nvar build = localScope.build;\ndelete localScope.build;\n\n// this is how I use the build method\nvar userCode = 'return \"Hello, World!\";';\nvar userFunction = build(userCode);\n</code></pre>\n\n<p>This code ensures (somewhat) that the user-defined code neither has access to any globally-scoped objects such as <code>window</code> nor to any of my local variables through a closure.</p>\n\n<p>Just as a word to the wise, I still have to perform static code checks on the user-submitted code to ensure they aren't using other sneaky manners to access global scope.  For instance, the following user-defined code grabs direct access to <code>window</code>:</p>\n\n<pre><code>test = function() {\n     return this.window\n};\nreturn test();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p><a href=\"http://www.stackoverflow.com/questions/61088/hidden-features-of-javascript#61118\">Alan Storm's comments</a> in response to my answer regarding the <a href=\"http://developer.mozilla.org/index.php?title=En/Core_JavaScript_1.5_Reference/Statements/With\"><code>with</code> statement</a> got me thinking. I've seldom found a reason to use this particular language feature, and had never given much thought to how it might cause trouble. Now, I'm curious as to how I might make effective use of <code>with</code>, while avoiding its pitfalls...</p>\n\n<p>So my question is, where have you found the <code>with</code> statement useful?</p>\n",
            "last_activity_date": 1415124052,
            "question_id": 61552,
            "score": 266,
            "tags": [
                "javascript",
                "language-features",
                "with-statement"
            ],
            "title": "Are there legitimate uses for JavaScript&#39;s &quot;with&quot; statement?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow\">Ajax</a></p>\n\n<p>You'd be best off using a library such as <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\" rel=\"nofollow\">Prototype</a> or <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is code to do it directly with JavaScript. But, as previously mentioned, you'd be much better off with a JavaScript library. My favorite is jQuery.</p>\n\n<p>In the case below, an ASPX page (that's servicing as a poor man's REST service) is being called to return a JavaScript JSON object.</p>\n\n<pre><code>var xmlHttp = null;\n\nfunction GetCustomerInfo()\n{\n    var CustomerNumber = document.getElementById( \"TextBoxCustomerNumber\" ).value;\n    var Url = \"GetCustomerInfoAsJson.aspx?number=\" + CustomerNumber;\n\n    xmlHttp = new XMLHttpRequest(); \n    xmlHttp.onreadystatechange = ProcessRequest;\n    xmlHttp.open( \"GET\", Url, true );\n    xmlHttp.send( null );\n}\n\nfunction ProcessRequest() \n{\n    if ( xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200 ) \n    {\n        if ( xmlHttp.responseText == \"Not found\" ) \n        {\n            document.getElementById( \"TextBoxCustomerName\"    ).value = \"Not found\";\n            document.getElementById( \"TextBoxCustomerAddress\" ).value = \"\";\n        }\n        else\n        {\n            var info = eval ( \"(\" + xmlHttp.responseText + \")\" );\n\n            // No parsing necessary with JSON!        \n            document.getElementById( \"TextBoxCustomerName\"    ).value = info.jsonData[ 0 ].cmname;\n            document.getElementById( \"TextBoxCustomerAddress\" ).value = info.jsonData[ 0 ].cmaddr1;\n        }                    \n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p><a href=\"http://www.prototypejs.org\">Prototype</a> makes it dead simple</p>\n\n<pre><code>new Ajax.Request( '/myurl', {\n  method:  'get',\n  parameters:  { 'param1': 'value1'},\n  onSuccess:  function(response){\n    alert(response.responseText);\n  },\n  onFailure:  function(){\n    alert('ERROR');\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><a href=\"http://docs.jquery.com/Ajax/jQuery.get#examples\">In jQuery</a>:</p>\n\n<pre><code>$.get(\n    \"somepage.php\",\n    {paramOne : 1, paramX : 'abc'},\n    function(data) {\n       alert('page content: ' + data);\n    }\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 94
                },
                {
                    "body": "<p>IE will cache URLs in order to make laoding faster, but if you're, say, polling a server at intervals trying to get new information, IE will cache that URL and will likely return the same data set you've always had.</p>\n\n<p>Regardless of how you end up doing your GET request - vanilla JavaScript, Prototype, jQuery, etc - make sure that you put a mechanism in place to combat caching. In order to combat that, append a unique token to the end of the URL you're going to be hitting. This can be done by:</p>\n\n<pre><code>var sURL = '/your/url.html?' + (new Date()).getTime();\n</code></pre>\n\n<p>This will append a unique timestamp to the end of the URL and will prevent any caching from happening.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>In your widget's Info.plist file, don't forget to set your <code>AllowNetworkAccess</code> key to true.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The best way is to use AJAX ( you can find a simple tutorial on this page Tizag). The reason is that any other technique you may use requires more code, it is not guaranteed to work cross browser without rework and requires you use more client memory by opening hidden pages inside frames passing urls parsing their data and closing them. \nAJAX is the way to go in this situation. That my two years of javascript heavy development speaking. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm not familiar with Mac OS Dashcode Widgets, but if they let you use JavaScript libraries and support <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow\">XMLHttpRequests</a>, I'd use <a href=\"http://docs.jquery.com/Ajax/jQuery.get#examples\" rel=\"nofollow\">jQuery</a> and do something like this:</p>\n\n<pre><code>var page_content;\n$.get( \"somepage.php\", function(data){\n    page_content = data;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you want to use the code for a Dashboard widget, and you don't want to include a JavaScript library in every widget you created, then you can use the object XMLHttpRequest that Safari natively supports.</p>\n\n<p>As reported by Andrew Hedges, a widget doesn't have access to a network, by default; you need to change that setting in the info.plist associated with the widget.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use Javascript's built-in functions:</p>\n\n<pre><code>function httpGet(theUrl)\n{\n    var xmlHttp = null;\n\n    xmlHttp = new XMLHttpRequest();\n    xmlHttp.open( \"GET\", theUrl, false );\n    xmlHttp.send( null );\n    return xmlHttp.responseText;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 415
                },
                {
                    "body": "<p>A version without callback</p>\n\n<pre><code>var i = document.createElement(\"img\");\ni.src = \"/your/GET/url?params=here\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Lots of great advice above, but not very reusable, and too often filled with DOM nonsense and other fluff that hides the easy code.</p>\n\n<p>Here's a Javascript class we created that's reusable and easy to use.  Currently it only has a GET method, but that works for us.  Adding a POST shouldn't tax anyone's skills.</p>\n\n<pre><code>var HttpClient = function() {\n    this.get = function(aUrl, aCallback) {\n        anHttpRequest = new XMLHttpRequest();\n        anHttpRequest.onreadystatechange = function() { \n            if (anHttpRequest.readyState == 4 &amp;&amp; anHttpRequest.status == 200)\n                aCallback(anHttpRequest.responseText);\n        }\n\n        anHttpRequest.open( \"GET\", aUrl, true );            \n        anHttpRequest.send( null );\n    }\n}\n</code></pre>\n\n<p>Using it is as easy as:</p>\n\n<pre><code>aClient = new HttpClient();\naClient.get('http://some/thing?with=arguments', function(answer) {\n    // do something with answer\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>In jquery - To open url in new browser tab:</p>\n\n<p>window.open(url);\n or\nwindow.open('url');</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>A copy-paste ready version</p>\n\n<pre><code>var request = new XMLHttpRequest();\nrequest.onreadystatechange = function() {\n    if (request.readyState === 4) {\n        if (request.status === 200) {\n            document.body.className = 'ok';\n        } else {\n            document.body.className = 'error';\n        }\n    }\n};\nrequest.open(\"GET\", url , true);\nrequest.send(null);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;pre&gt;\n    You can get HTTP GET request in two ways:\n1) xmlhttp.open(\"GET\",\"URL\",true);\nxmlhttp.send();\nThis approach based on xml format.\nHere you have to pass url for the request.\n\n2) $(\"btn\").click(function()\n{\n  $.ajax({url:\"demo_test.txt\",success:function_name(result)\n  {\n    $(\"#innerdiv\").html(result);\n  }});\n}); \n\nThis one based on the JQuery.\nHere you have to specified url and function_name to which you want to call\n&lt;/pre&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to do an <a href=\"http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods\">HTTP GET</a> request in JavaScript. What's the best way to do that?</p>\n\n<p>I need to do this in a Mac OS X dashcode widget.</p>\n",
            "last_activity_date": 1418149719,
            "question_id": 247483,
            "score": 172,
            "tags": [
                "javascript",
                "http",
                "get",
                "dashcode"
            ],
            "title": "HTTP GET request in JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>(Modified version to make it work without prototype.js)</p>\n\n<pre><code>function simulate(element, eventName)\n{\n    var options = extend(defaultOptions, arguments[2] || {});\n    var oEvent, eventType = null;\n\n    for (var name in eventMatchers)\n    {\n        if (eventMatchers[name].test(eventName)) { eventType = name; break; }\n    }\n\n    if (!eventType)\n        throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');\n\n    if (document.createEvent)\n    {\n        oEvent = document.createEvent(eventType);\n        if (eventType == 'HTMLEvents')\n        {\n            oEvent.initEvent(eventName, options.bubbles, options.cancelable);\n        }\n        else\n        {\n            oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,\n            options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,\n            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);\n        }\n        element.dispatchEvent(oEvent);\n    }\n    else\n    {\n        options.clientX = options.pointerX;\n        options.clientY = options.pointerY;\n        var evt = document.createEventObject();\n        oEvent = extend(evt, options);\n        element.fireEvent('on' + eventName, oEvent);\n    }\n    return element;\n}\n\nfunction extend(destination, source) {\n    for (var property in source)\n      destination[property] = source[property];\n    return destination;\n}\n\nvar eventMatchers = {\n    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,\n    'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/\n}\nvar defaultOptions = {\n    pointerX: 0,\n    pointerY: 0,\n    button: 0,\n    ctrlKey: false,\n    altKey: false,\n    shiftKey: false,\n    metaKey: false,\n    bubbles: true,\n    cancelable: true\n}\n</code></pre>\n\n<p>You can use it like this:</p>\n\n<pre><code>simulate(document.getElementById(\"btn\"), \"click\");\n</code></pre>\n\n<p>Note that as a third parameter you can pass in 'options'. The options you don't specify are taken from the defaultOptions (see bottom of the script). So if you for example want to specify mouse coordinates you can do something like:</p>\n\n<pre><code>simulate(document.getElementById(\"btn\"), \"click\", { pointerX: 123, pointerY: 321 })\n</code></pre>\n\n<p>You can use a similar approach to override other default options.</p>\n\n<p>Credits should go to <a href=\"http://perfectionkills.com/cross-browser-mouse-events-simulation/\">kangax</a>. <a href=\"http://github.com/kangax/protolicious/tree/master/event.simulate.js\">Here</a>'s the original source (prototype.js specific).</p>\n",
                    "is_accepted": true,
                    "score": 120
                },
                {
                    "body": "<p>Here's a pure JavaScript function which will simulate a click (or any mouse event) on a target element:</p>\n\n<pre><code>function simulatedClick(target, options) {\n\n    var event = target.ownerDocument.createEvent('MouseEvents'),\n        options = options || {};\n\n    //Set your default options to the right of ||\n    var opts = {\n        type: options.type                   || 'click',\n        canBubble:options.canBubble          || true,\n        cancelable:options.cancelable        || true,\n        view:options.view                    || target.ownerDocument.defaultView,\n        detail:options.detail                || 1,\n        screenX:options.screenX              || 0, //The coordinates within the entire page\n        screenY:options.screenY              || 0,\n        clientX:options.clientX              || 0, //The coordinates within the viewport\n        clientY:options.clientY              || 0,\n        ctrlKey:options.ctrlKey              || false,\n        altKey:options.altKey                || false,\n        shiftKey:options.shiftKey            || false,\n        metaKey:options.metaKey              || false, //I *think* 'meta' is 'Cmd/Apple' on Mac, and 'Windows key' on Win. Not sure, though!\n        button:options.button                || 0, //0 = left, 1 = middle, 2 = right\n        relatedTarget:options.relatedTarget  || null,\n    }\n\n    //Pass in the options\n    event.initMouseEvent(\n        opts.type,\n        opts.canBubble,\n        opts.cancelable,\n        opts.view,\n        opts.detail,\n        opts.screenX,\n        opts.screenY,\n        opts.clientX,\n        opts.clientY,\n        opts.ctrlKey,\n        opts.altKey,\n        opts.shiftKey,\n        opts.metaKey,\n        opts.button,\n        opts.relatedTarget\n    );\n\n    //Fire the event\n    target.dispatchEvent(event);\n}\n</code></pre>\n\n<p>Here's a working example: <a href=\"http://www.spookandpuff.com/examples/clickSimulation.html\" rel=\"nofollow\">http://www.spookandpuff.com/examples/clickSimulation.html</a></p>\n\n<p>You can simulate a click on any element in the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow\">DOM</a>. Something like <code>simulatedClick(document.getElementById('yourButtonId'))</code> would work.</p>\n\n<p>You can pass in an object into <code>options</code> to override the defaults (to simulate which mouse button you want, whether <kbd>Shift</kbd>/<kbd>Alt</kbd>/<kbd>Ctrl</kbd> are held, etc.</p>\n\n<p>I've tested in Firefox, Safari and Chrome. Internet&nbsp;Explorer might need special treatment, I'm not sure.</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>From the Mozilla Developer Network (MDN) documentation, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.click\" rel=\"nofollow\"><strong>HTMLElement.click()</strong></a> is what you're looking for. You can find out more events <a href=\"https://developer.mozilla.org/en-US/docs/tag/HTMLElement\" rel=\"nofollow\"><strong>here</strong></a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>An easier and more standard way to simulate a mouse click would be directly using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\" rel=\"nofollow\">the event constructor</a> to create an event and dispatch it.</p>\n\n<pre><code>var evt = new MouseEvent(\"click\", {\n    view: window,\n    bubbles: true,\n    cancelable: true,\n    clientX: 20,\n    /* whatever properties you want to give it */\n});\nele.dispatchEvent(evt);\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/DerekL/932wyok6/\" rel=\"nofollow\">http://jsfiddle.net/DerekL/932wyok6/</a></p>\n\n<p>This works on all modern browsers (IE9+).</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I know about the <code>document.form.button.click()</code> method. However, I'd like to know how to simulate the onclick event.</p>\n\n<p>I found this code somewhere here on Stack&nbsp;Overflow, but I don't know how to use it :(</p>\n\n<pre><code>function contextMenuClick()\n{\n    var element= 'button'\n\n    var evt = element.ownerDocument.createEvent('MouseEvents');\n\n    evt.initMouseEvent('contextmenu', true, true,\n         element.ownerDocument.defaultView, 1, 0, 0, 0, 0, false,\n         false, false, false, 1, null);\n\n    element.dispatchEvent(evt);\n}\n</code></pre>\n\n<p>How do I fire a mouse click event using JavaScript?</p>\n",
            "last_activity_date": 1423539811,
            "question_id": 6157929,
            "score": 60,
            "tags": [
                "javascript",
                "javascript-events"
            ],
            "title": "How to simulate a mouse click using JavaScript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I answered a similar question (see <a href=\"http://stackoverflow.com/questions/164085/javascript-callback-when-iframe-is-finished-loading\">Javascript callback when IFRAME is finished loading?</a>).\nYou can obtain control over the iframe load event with the following code:</p>\n\n<pre><code>function callIframe(url, callback) {\n    $(document.body).append('&lt;IFRAME id=\"myId\" ...&gt;');\n    $('iframe#myId').attr('src', url);\n\n    $('iframe#myId').load(function() {\n        callback(this);\n    });\n}\n</code></pre>\n\n<p>In dealing with iframes I found good enough to use load event instead of document ready event.</p>\n",
                    "is_accepted": true,
                    "score": 223
                },
                {
                    "body": "<p>In IFrames I usually solve this problem by putting a small script to the very end of the  block:</p>\n\n<pre><code>&lt;body&gt;\nThe content of your IFrame\n&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\n   fireOnReadyEvent();\n   parent.IFrameLoaded();\n//]]&gt;\n&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>This work most of the time for me. Sometimes the simplest and most naive solution is the most appropriate.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Found the solution to the problem.</p>\n\n<p>When you click on a thickbox link that open a iframe, it insert an iframe with an id of TB_iframeContent.</p>\n\n<p>Instead of relying on the <code>$(document).ready</code> event in the iframe code, I just have to bind to the load event of the iframe in the parent document:</p>\n\n<pre><code>$('#TB_iframeContent', top.document).load(ApplyGalleria);\n</code></pre>\n\n<p>This code is in the iframe but binds to an event of a control in the parent document.  It works in FireFox and IE.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Using jQuery 1.3.2 the following worked for me:</p>\n\n<pre><code>$('iframe').ready(function() {\n  $('body', $('iframe').contents()).html('Hello World!');\n});\n</code></pre>\n\n<p>REVISION:!\nActually the above code sometimes looks like it works in Firefox, never looks like it works in Opera.</p>\n\n<p>Instead I implemented a polling solution for my purposes. Simplified down it looks like this:</p>\n\n<pre><code>$(function() {\n  function manipIframe() {\n    el = $('body', $('iframe').contents());\n    if (el.length != 1) {\n      setTimeout(manipIframe, 100);\n      return;\n    }\n    el.html('Hello World!');\n  }\n  manipIframe();\n});\n</code></pre>\n\n<p>This doesn't require code in the called iframe pages. All code resides and executes from the parent frame/window.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Try this,</p>\n\n<pre><code>&lt;iframe id=\"testframe\" src=\"about:blank\" onload=\"if (testframe.location.href != 'about:blank') testframe_loaded()\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>All you need to do then is create the JavaScript function testframe_loaded().</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm loading the PDF with jQuery ajax into browser cache. Then I create embedded element with data already in browser cache. I guess it will work with iframe too.</p>\n\n<pre><code>\nvar url = \"http://example.com/my.pdf\";\n// show spinner\n$.mobile.showPageLoadingMsg('b', note, false);\n$.ajax({\n    url: url,\n    cache: true,\n    mimeType: 'application/pdf',\n    success: function () {\n        // display cached data\n        $(scroller).append('&lt;embed type=\"application/pdf\" src=\"' + url + '\" /&gt;');\n        // hide spinner\n        $.mobile.hidePageLoadingMsg();\n    }\n});\n</code></pre>\n\n<p>You have to set your http headers correctly as well.</p>\n\n<pre><code>\nHttpContext.Response.Expires = 1;\nHttpContext.Response.Cache.SetNoServerCaching();\nHttpContext.Response.Cache.SetAllowResponseInBrowserHistory(false);\nHttpContext.Response.CacheControl = \"Private\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Following DrJokepu's and David Murdoch idea I implemented a more complete version.\nIt <strong>requires</strong> jQuery on both the parent and iframe and the iframe to be in your control.</p>\n\n<p><strong>iframe code:</strong></p>\n\n<pre><code>var iframe = window.frameElement;\n\nif (iframe){\n    iframe.contentDocument = document;//normalization: some browsers don't set the contentDocument, only the contentWindow\n\n    var parent = window.parent;\n    $(parent.document).ready(function(){//wait for parent to make sure it has jQuery ready\n        var parent$ = parent.jQuery;\n\n        parent$(iframe).trigger(\"iframeloading\");\n\n        $(function(){\n            parent$(iframe).trigger(\"iframeready\");\n        });\n\n        $(window).load(function(){//kind of unnecessary, but here for completion\n            parent$(iframe).trigger(\"iframeloaded\");\n        });\n\n        $(window).unload(function(e){//not possible to prevent default\n            parent$(iframe).trigger(\"iframeunloaded\");\n        });\n\n        $(window).on(\"beforeunload\",function(){\n            parent$(iframe).trigger(\"iframebeforeunload\");\n        });\n    });\n}\n</code></pre>\n\n<p><strong>parent test code:</strong></p>\n\n<pre><code>$(function(){\n    $(\"iframe\").on(\"iframeloading iframeready iframeloaded iframebeforeunload iframeunloaded\", function(e){\n        console.log(e.type);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>We are using jQuery <a href=\"http://jquery.com/demo/thickbox/\">thickbox</a> to dynamically display an iframe when someone clicks on a picture.  In this iframe, we are using <a href=\"http://devkick.com/lab/galleria/demo_01.htm\">galleria</a> a javascript library to display multiple pictures.</p>\n\n<p>The problem seems to be that <code>$(document).ready</code> in the iframe seems to be fired too soon and the iframe content isn't even loaded yet, so galleria code is not applied properly on the DOM elements.  <code>$(document).ready</code> seems to use the iframe parent ready state to decide if the iframe is ready.</p>\n\n<p>If we extract the function called by document ready in a separate function and call it after a timeout of 100&nbsp;ms. It works, but we can't take the chance in production with a slow computer.</p>\n\n<pre><code>$(document).ready(function() { setTimeout(ApplyGalleria, 100); });\n</code></pre>\n\n<p>My question: which jQuery event should we bind to to be able to execute our code when the dynamic iframe is ready and not just it's a parent?</p>\n",
            "last_activity_date": 1368021195,
            "question_id": 205087,
            "score": 127,
            "tags": [
                "javascript",
                "jquery",
                "iframe",
                "thickbox",
                "galleria"
            ],
            "title": "jQuery .ready in a dynamically inserted iframe"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>My understanding is that this is actually very simple:</p>\n\n<ul>\n<li>Javascript is <em>always</em> pass by value, but when a variable refers to an object (including arrays), the \"value\" is a reference to the object. </li>\n<li>Changing the value of a variable <em>never</em> changes the underlying primitive or object, it just points the variable to a new primitive or object.</li>\n<li>However, changing a <em>property</em> of an object referenced by a variable does change the underlying object.</li>\n</ul>\n\n<p>So, to work through some of  your examples:</p>\n\n<pre><code>function f(a,b,c) {\n    // Argument a is re-assigned to a new value.\n    // The object or primitive referenced by the original a is unchanged.\n    a = 3;\n    // Calling b.push changes its properties - it adds\n    // a new property b[b.length] with the value \"foo\".\n    // So the object referenced by b has been changed.\n    b.push(\"foo\");\n    // The \"first\" property of argument c has been changed.\n    // So the object referenced by c has been changed (unless c is a primitive)\n    c.first = false;\n}\n\nvar x = 4;\nvar y = [\"eeny\", \"miny\", \"mo\"];\nvar z = {first: true};\nf(x,y,z);\nconsole.log(x, y, z.first); // 4, [\"eeny\", \"miny\", \"mo\", \"foo\"], false\n</code></pre>\n\n<p>Example 2:</p>\n\n<pre><code>var a = [\"1\", \"2\", {foo:\"bar\"}];\nvar b = a[1]; // b is now \"2\";\nvar c = a[2]; // c now references {foo:\"bar\"}\na[1] = \"4\";   // a is now [\"1\", \"4\", {foo:\"bar\"}]; b still has the value\n              // it had at the time of assignment\na[2] = \"5\";   // a is now [\"1\", \"4\", \"5\"]; c still has the value\n              // it had at the time of assignment, i.e. a reference to\n              // the object {foo:\"bar\"}\nconsole.log(b, c.foo); // \"2\" \"bar\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 124
                },
                {
                    "body": "<p>Yes, Javascript always passes by value, but in an array or object, the value is a reference to it, so you can 'change' the contents.</p>\n\n<p>But, I think you already read it on SO; <a href=\"http://snook.ca/archives/javascript/javascript_pass\">here</a> you have the documentation you want:</p>\n\n<p><a href=\"http://snook.ca/archives/javascript/javascript_pass\">http://snook.ca/archives/javascript/javascript_pass</a></p>\n\n<p>Hope this helps. Cheers.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Javascript <em>always</em> passes by value. However, if you pass an object to a function, the \"value\" is really a reference to that object, so the function can modify that object's properties <em>but not cause the variable outside the function to point to some other object</em>.</p>\n\n<p>An example:</p>\n\n<pre><code>function changeParam(x, y, z) {\n  x = 3;\n  y = \"new string\";\n  z[\"key2\"] = \"new\";\n  z[\"key3\"] = \"newer\";\n\n  z = {\"new\" : \"object\"};\n}\n\nvar a = 1,\n    b = \"something\",\n    c = {\"key1\" : \"whatever\", \"key2\" : \"original value\"};\n\nchangeParam(a, b, c);\n\n// at this point a is still 1\n// b is still \"something\"\n// c still points to the same object but its properties have been updated\n// so it is now {\"key1\" : \"whatever\", \"key2\" : \"new\", \"key3\" : \"newer\"}\n// c definitely doesn't point to the new object created as the last line\n// of the function with z = ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<ol>\n<li>primitive type variable like string,number are always pass as  pass\nby value.</li>\n<li><p>Array and Object is passed as  pass by reference or  pass by value based on these two condition.</p>\n\n<ul>\n<li><p>if you are changing value of that Object or array with new Object or Array then it is pass by Value.</p>\n\n<p><code>object1 = {item: \"car\"};\n  array1=[1,2,3];</code></p></li>\n</ul>\n\n<p>here you are assigning new object or array to old one.you are not changing the value of property \nof old object.so it is pass by value.</p>\n\n<ul>\n<li><p>if you are changing a property value of an object or array then it is pass by Reference.</p>\n\n<p><code>object1.item= \"car\";\n  array1[0]=9;</code></p></li>\n</ul>\n\n<p>here you are changing a property value of old object.you are not assigning new object or array to old one.so it is pass by reference.</p></li>\n</ol>\n\n<p><strong>Code</strong></p>\n\n<pre><code>    function passVar(object1, object2, number1) {\n\n        object1.key1= \"laptop\";\n        object2 = {\n            key2: \"computer\"\n        };\n        number1 = number1 + 1;\n    }\n\n    var object1 = {\n        key1: \"car\"\n    };\n    var object2 = {\n        key2: \"bike\"\n    };\n    var number1 = 10;\n\n    passVar(object1, object2, number1);\n    console.log(object1.key1);\n    console.log(object2.key2);\n    console.log(number1);\n\nOutput: -\n    laptop\n    bike\n    10\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I'm looking for some good comprehensive reading material on when Javascript passes something by value and when by reference and when modifying a passed item affects the value outside a function and when not.  I'm also interested in when assigning to another variable is by reference vs. by value and whether that follows any different rules than passing as a function parameter.</p>\n\n<p>I've done a lot of searching and find lots of specific examples (many of them here on SO) from which I can start to piece together pieces of the real rules, but I haven't yet found a single, well written document that describes it all.</p>\n\n<p>Also, are there ways in the language to control whether something is passed by reference or by value?</p>\n\n<p>Here are some of the types of questions I want to understand.  These are just examples - I'm actually looking to understand the rules the language goes by, not just the answers to specific examples.  But, here are some examples:</p>\n\n<pre><code>function f(a,b,c) {\n   a = 3;\n   b.push(\"foo\");\n   c.first = false;\n}\n\nvar x = 4;\nvar y = [\"eeny\", \"miny\", \"mo\"];\nvar z = {first: true};\nf(x,y,z);\n</code></pre>\n\n<p>When are the contents of x, y and z changed outside the scope of f for all the different types?</p>\n\n<pre><code>function f() {\n    var a = [\"1\", \"2\", \"3\"];\n    var b = a[1];\n    a[1] = \"4\";\n    // what is the value of b now for all possible data types that the array in \"a\" might hold?\n}\n\nfunction f() {\n    var a = [{yellow: \"blue\"}, {red: \"cyan\"}, {green: \"magenta\"}];\n    var b = a[1];\n    a[1].red = \"tan\";\n    // what is the value of b now and why?\n    b.red = \"black\";\n    // did the value of a[1].red change when I assigned to b.red?\n}\n</code></pre>\n\n<p>If I want to make a fully independent copy of an object (no references whatsoever), what's the best practice way to do that?</p>\n",
            "last_activity_date": 1414523899,
            "question_id": 6605640,
            "score": 96,
            "tags": [
                "javascript",
                "reference",
                "pass-by-reference",
                "pass-by-value"
            ],
            "title": "Javascript by reference vs. by value"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I believe it causes the standard event to not happen.</p>\n\n<p>In your example the browser will not attempt to go to #.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Retuning false from a JavaScript event usually cancels the \"default\" behavior - in the case of links, it tells the browser to not follow the link.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Return false will prevent navigation. Otherwise, the location would become the return value of someFunc</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The return false is saying not to take the default action, which in the case of an  is to follow the link.  When you return false to the onclick, then the href will be ignored. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>using return false in an onclick event stops the browser from processing the rest of the execution stack, which includes following the link in the href attribute.</p>\n\n<p>In other words, adding return false stops the href from working.  In your example, this is exactly what you want.</p>\n\n<p>In buttons, it's not necessary because onclick is all it will ever execute -- there is no href to process and go to.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Browser hack:\n<a href=\"http://jszen.blogspot.com/2007/03/return-false-to-prevent-jumping.html\" rel=\"nofollow\">http://jszen.blogspot.com/2007/03/return-false-to-prevent-jumping.html</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Return false will stop the hyperlink being followed after the javascript has run. This is useful for unobtrusive javascript that degrades gracefully - for example, you could have a thumbnail image that uses javascript to open a pop-up of the full-sized image. When javascript is turned off or the image is middle-clicked (opened in a new tab) this ignores the onClick event and just opens the image as a full-sized image normally.</p>\n\n<p>If return false were not specified, the image would both launch the pop-up and open the image normally. Some people instead of using return false use javascript as the href attribute, but this means that when javascript is disabled the link will do nothing.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The return value of an event handler determines whether or not the default browser behaviour should take place as well.  In the case of clicking on links, this would be following the link, but the difference is most noticeable in form submit handlers, where you can cancel a form submission if the user has made a mistake entering the information.</p>\n\n<p>I don't believe there is a W3C specification for this.  All the ancient JavaScript interfaces like this have been given the nickname \"DOM 0\", and are mostly unspecified.  You may have some luck reading old Netscape 2 documentation.</p>\n\n<p>The modern way of achieving this effect is to call <code>event.preventDefault()</code>, and this is specified in <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation\">the DOM 2 Events specification</a>.</p>\n",
                    "is_accepted": true,
                    "score": 153
                },
                {
                    "body": "<p>Here's a more robust routine to cancel default behavior and event bubbling in all browsers:</p>\n\n<pre><code>    // Prevents event bubble up or any usage after this is called.\n    eventCancel = function (e)\n    {\n       if (!e)\n         if (window.event) e = window.event;\n         else return;\n       if (e.cancelBubble != null) e.cancelBubble = true;\n       if (e.stopPropagation) e.stopPropagation();\n       if (e.preventDefault) e.preventDefault();\n       if (window.event) e.returnValue = false;\n       if (e.cancel != null) e.cancel = true;\n    }\n</code></pre>\n\n<p>An example of how this would be used in an event handler:</p>\n\n<pre><code>      // Handles the click event for each tab\n      Tabstrip.tabstripLinkElement_click = function (evt, context) \n      {\n         // Find the tabStrip element (we know it's the parent element of this link)\n          var tabstripElement = this.parentNode;\n          Tabstrip.showTabByLink(tabstripElement, this);\n          return eventCancel(evt);\n      }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>You can see the difference with the following example:</p>\n\n<pre><code>&lt;a href=\"http://www.google.co.uk/\" onclick=\"return (confirm('Follow this link?'))\"&gt;Google&lt;/a&gt;\n</code></pre>\n\n<p>Clicking \"Okay\" returns true, and the link is followed. Clicking \"Cancel\" returns false and doesn't follow the link. If javascript is disabled the link is followed normally.</p>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>I am surprised that no one mentioned <code>onmousedown</code> instead of <code>onclick</code>. The </p>\n\n<p><code>onclick='return false'</code> </p>\n\n<p>does not catch the default marking occurring for <code>mousedown</code> but </p>\n\n<p><code>onmousedown='return false'</code> </p>\n\n<p>does. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>WHAT <strong><em>\"return false\"</em></strong> IS REALLY DOING?</h2>\n\n<p>return false is actually doing three very separate things when you call it:</p>\n\n<ol>\n<li>event.preventDefault();</li>\n<li>event.stopPropagation();</li>\n<li>Stops callback execution and returns immediately when called.</li>\n</ol>\n\n<p>See <a href=\"http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\" rel=\"nofollow\">jquery-events-stop-misusing-return-false</a> for more information.</p>\n\n<p><em>For example :</em></p>\n\n<p>while clicking this link, return false will <strong><em>cancel the default behaviour of the browser</em></strong>. </p>\n\n<pre><code>&lt;a href='#' onclick='someFunc(3.1415926); return false;'&gt;Click here !&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Many times I've seen links like these in HTML pages:</p>\n\n<pre><code>&lt;a href='#' onclick='someFunc(3.1415926); return false;'&gt;Click here !&lt;/a&gt;\n</code></pre>\n\n<p>What's the effect of the <strong>return false</strong> in there ?</p>\n\n<p>Also, I don't usually see that in buttons.</p>\n\n<p>Edit: Is this specified anywhere ? In some spec in w3.org ?</p>\n",
            "last_activity_date": 1408436595,
            "question_id": 128923,
            "score": 174,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "What&#39;s the effect of adding &#39;return false&#39; to an onclick event?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The <a href=\"https://developer.mozilla.org/en/window.setTimeout\"><code>setTimeout()</code></a> function is non-blocking and will return immediately. Therefore your loop will iterate very quickly and it will initiate 3-second timeout triggers one after the other in quick succession. That is why your first alerts pops up after 3 seconds, and all the rest follow in succession without any delay.</p>\n\n<p>You may want to use something like this instead:</p>\n\n<pre><code>var i = 1;                     //  set your counter to 1\n\nfunction myLoop () {           //  create a loop function\n   setTimeout(function () {    //  call a 3s setTimeout when the loop is called\n      alert('hello');          //  your code here\n      i++;                     //  increment the counter\n      if (i &lt; 10) {            //  if the counter &lt; 10, call the loop function\n         myLoop();             //  ..  again which will trigger another \n      }                        //  ..  setTimeout()\n   }, 3000)\n}\n\nmyLoop();                      //  start the loop\n</code></pre>\n\n<p>You could also neaten it up, by using a self invoking function, passing the number of iterations as an argument:</p>\n\n<pre><code>(function myLoop (i) {          \n   setTimeout(function () {   \n      alert('hello');          //  your code here                \n      if (--i) myLoop(i);      //  decrement i and call myLoop again if i &gt; 0\n   }, 3000)\n})(10);                        //  pass the number of iterations as an argument\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 231
                },
                {
                    "body": "<p>Try something like this:</p>\n\n<pre><code>var i = 0, howManyTimes = 10;\nfunction f() {\n    alert( \"hi\" );\n    i++;\n    if( i &lt; howManyTimes ){\n        setTimeout( f, 3000 );\n    }\n}\nf();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Another way is to multiply the time to timeout, but note that this is <strong>not like sleep</strong>. Code after the loop will be executed immediately, only the execution of the callback function is deferred.</p>\n\n<pre><code>for (var start = 1; start &lt; 10; start++)\n    setTimeout(function () { alert('hello');  }, 3000 * start);\n</code></pre>\n\n<p>The first timeout will be set to <code>3000 * 1</code>, the second to <code>3000 * 2</code> and so on.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I think you need something like this:</p>\n\n<pre><code>var TimedQueue = function(defaultDelay){\n    this.queue = [];\n    this.index = 0;\n    this.defaultDelay = defaultDelay || 3000;\n};\n\nTimedQueue.prototype = {\n    add: function(fn, delay){\n        this.queue.push({\n            fn: fn,\n            delay: delay\n        });\n    },\n    run: function(index){\n        (index || index === 0) &amp;&amp; (this.index = index);\n        this.next();\n    },\n    next: function(){\n        var self = this\n        , i = this.index++\n        , at = this.queue[i]\n        , next = this.queue[this.index]\n        if(!at) return;\n        at.fn();\n        next &amp;&amp; setTimeout(function(){\n            self.next();\n        }, next.delay||this.defaultDelay);\n    },\n    reset: function(){\n        this.index = 0;\n    }\n}\n</code></pre>\n\n<p>Test code:</p>\n\n<pre><code>var now = +new Date();\n\nvar x = new TimedQueue(2000);\n\nx.add(function(){\n    console.log('hey');\n    console.log(+new Date() - now);\n});\nx.add(function(){\n    console.log('ho');\n    console.log(+new Date() - now);\n}, 3000);\nx.add(function(){\n    console.log('bye');\n    console.log(+new Date() - now);\n});\n\nx.run();\n</code></pre>\n\n<p>Note: using alerts stalls javascript execution till you close the alert.\nIt might be more code than you asked for, but this is a robust reusable solution.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I would probably use <code>setInteval</code>. Like this,</p>\n\n<pre><code>var period = 1000; // ms\nvar endTime = 10000;  // ms\nvar counter = 0;\nvar sleepyAlert = setInterval(function(){\n    alert('Hello');\n    if(counter === endTime){\n       clearInterval(sleepyAlert);\n    }\n    counter += period;\n}, period);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>/* \n  Use Recursive  and setTimeout \n  call below function will run loop loopFunctionNeedCheck until \n  conditionCheckAfterRunFn = true, if conditionCheckAfterRunFn == false : delay \n  reRunAfterMs miliseconds and continue loop\n  tested code, thanks\n*/\n\nfunction functionRepeatUntilConditionTrue(reRunAfterMs, conditionCheckAfterRunFn,\n loopFunctionNeedCheck) {\n    loopFunctionNeedCheck();\n    var result = conditionCheckAfterRunFn();\n    //check after run\n    if (!result) {\n        setTimeout(function () {\n            functionRepeatUntilConditionTrue(reRunAfterMs, conditionCheckAfterRunFn, loopFunctionNeedCheck)\n        }, reRunAfterMs);\n    }\n    else  console.log(\"completed, thanks\");    \n            //if you need call a function after completed add code call callback in here\n}\n\n//passing-parameters-to-a-callback-function\n// From Prototype.js \nif (!Function.prototype.bind) { // check if native implementation available\n    Function.prototype.bind = function () {\n        var fn = this, args = Array.prototype.slice.call(arguments),\n            object = args.shift();\n        return function () {\n            return fn.apply(object,\n              args.concat(Array.prototype.slice.call(arguments)));\n        };\n    };\n}\n\n//test code: \nvar result = 0; \nconsole.log(\"---&gt; init result is \" + result);\nvar functionNeedRun = function (step) {           \n   result+=step;    \n       console.log(\"current result is \" + result);  \n}\nvar checkResultFunction = function () {\n    return result==100;\n}  \n\n//call this function will run loop functionNeedRun and delay 500 miliseconds until result=100    \nfunctionRepeatUntilConditionTrue(500, checkResultFunction , functionNeedRun.bind(null, 5));\n\n//result log from console:\n/*\n---&gt; init result is 0\ncurrent result is 5\nundefined\ncurrent result is 10\ncurrent result is 15\ncurrent result is 20\ncurrent result is 25\ncurrent result is 30\ncurrent result is 35\ncurrent result is 40\ncurrent result is 45\ncurrent result is 50\ncurrent result is 55\ncurrent result is 60\ncurrent result is 65\ncurrent result is 70\ncurrent result is 75\ncurrent result is 80\ncurrent result is 85\ncurrent result is 90\ncurrent result is 95\ncurrent result is 100\ncompleted, thanks\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I do this with Promise.delay and recursion.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function myLoop(i) {\r\n  return Promise.delay(1000)\r\n    .then(function() {\r\n      if (i &gt; 0) {\r\n        alert('hello');\r\n        return myLoop(i-=1);\r\n      }\r\n    });\r\n}\r\n\r\nmyLoop(3);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/bluebird/2.9.4/bluebird.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to add a delay/sleep inside a <code>while</code> loop:</p>\n\n<p>I tried it like this:</p>\n\n<pre><code>alert('hi');\n\nfor(var start = 1; start &lt; 10; start++) {\n  setTimeout(function () {\n    alert('hello');\n  }, 3000);\n}\n</code></pre>\n\n<p>Only the first scenario is true: after showing <code>alert('hi')</code>, it will be waiting for 3 seconds then <code>alert('hello')</code> will be displayed but then <code>alert('hello')</code> will be repeatedly constantly. </p>\n\n<p>What I would like is that after <code>alert('hello')</code> is shown 3 seconds after <code>alert('hi')</code> then it needs to wait for 3 seconds for the second time <code>alert('hello')</code> and so on.</p>\n\n<p>Could anyone please give advice?</p>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1422867970,
            "question_id": 3583724,
            "score": 82,
            "tags": [
                "javascript",
                "loops",
                "sleep"
            ],
            "title": "How do I add a delay in a JavaScript loop?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I'm assuming that you're wanting to insert a <code>style</code> tag versus a <code>link</code> tag (referencing an external CSS), so that's what the following example does:</p>\n\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n  &lt;title&gt;Example Page&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n  &lt;span&gt;\n   This is styled dynamically via JavaScript.\n  &lt;/span&gt;\n &lt;/body&gt;\n &lt;script type=\"text/javascript\"&gt;\n   var styleNode = document.createElement('style');\n   styleNode.type = \"text/css\";\n   // browser detection (based on prototype.js)\n   if(!!(window.attachEvent &amp;&amp; !window.opera)) {\n    \tstyleNode.styleSheet.cssText = 'span { color: rgb(255, 0, 0); }';\n   } else {\n    \tvar styleText = document.createTextNode('span { color: rgb(255, 0, 0); } ');\n    \tstyleNode.appendChild(styleText);\n   }\n   document.getElementsByTagName('head')[0].appendChild(styleNode);\n &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Also, I noticed in your question that you are using <code>innerHTML</code>. This is actually a non-standard way of inserting data into a page. The best practice is to create a text node and append it to another element node.</p>\n\n<p>With respect to your final question, you're going to hear some people say that your work should work across all of the browsers. It all depends on your audience. If no one in your audience is using Chrome, then don't sweat it; however, if you're looking to reach the biggest audience possible, then it's best to support all major A-grade browsers</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>An example that works and are compliant with all browsers :</p>\n\n<pre><code>var ss = document.createElement(\"link\");\nss.type = \"text/css\";\nss.rel = \"stylesheet\";\nss.href = \"style.css\";\ndocument.getElementsByTagName(\"head\")[0].appendChild(ss);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Try adding the <code>style</code> element to the <code>head</code> rather than the <code>body</code>.</p>\n\n<p>This was tested in IE (7-9), Firefox, Opera and Chrome:</p>\n\n<pre><code>var css = 'h1 { background: red; }',\n    head = document.head || document.getElementsByTagName('head')[0],\n    style = document.createElement('style');\n\nstyle.type = 'text/css';\nif (style.styleSheet){\n  style.styleSheet.cssText = css;\n} else {\n  style.appendChild(document.createTextNode(css));\n}\n\nhead.appendChild(style);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 228
                },
                {
                    "body": "<p>Here's a script which adds IE-style <code>createStyleSheet()</code> and <code>addRule()</code> methods to browsers which don't have them:</p>\n\n<pre><code>if(typeof document.createStyleSheet === 'undefined') {\n    document.createStyleSheet = (function() {\n        function createStyleSheet(href) {\n            if(typeof href !== 'undefined') {\n                var element = document.createElement('link');\n                element.type = 'text/css';\n                element.rel = 'stylesheet';\n                element.href = href;\n            }\n            else {\n                var element = document.createElement('style');\n                element.type = 'text/css';\n            }\n\n            document.getElementsByTagName('head')[0].appendChild(element);\n            var sheet = document.styleSheets[document.styleSheets.length - 1];\n\n            if(typeof sheet.addRule === 'undefined')\n                sheet.addRule = addRule;\n\n            if(typeof sheet.removeRule === 'undefined')\n                sheet.removeRule = sheet.deleteRule;\n\n            return sheet;\n        }\n\n        function addRule(selectorText, cssText, index) {\n            if(typeof index === 'undefined')\n                index = this.cssRules.length;\n\n            this.insertRule(selectorText + ' {' + cssText + '}', index);\n        }\n\n        return createStyleSheet;\n    })();\n}\n</code></pre>\n\n<p>You can add external files via</p>\n\n<pre><code>document.createStyleSheet('foo.css');\n</code></pre>\n\n<p>and dynamically create rules via</p>\n\n<pre><code>var sheet = document.createStyleSheet();\nsheet.addRule('h1', 'background: red;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Here is a variant for dynamically adding a class </p>\n\n<pre><code>function setClassStyle(class_name, css) {\n  var style_sheet = document.createElement('style');\n  if (style_sheet) {\n    style_sheet.setAttribute('type', 'text/css');\n    var cstr = '.' + class_name + ' {' + css + '}';\n    var rules = document.createTextNode(cstr);\n    if(style_sheet.styleSheet){// IE\n      style_sheet.styleSheet.cssText = rules.nodeValue;\n    } else {\n      style_sheet.appendChild(rules);\n    }\n    var head = document.getElementsByTagName('head')[0];\n    if (head) {\n      head.appendChild(style_sheet);\n    }\n  }\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>All good, but for styleNode.cssText to work in IE6 with node created by javascipt, you need to append the node to the document before you set the cssText;</p>\n\n<p>further info @ <a href=\"http://msdn.microsoft.com/en-us/library/ms533698%28VS.85%29.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ms533698%28VS.85%29.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Oftentimes there's a need to override existing rules, so appending new styles to the HEAD doesn't work in every case.</p>\n\n<p>I came up with this simple function that summarizes all \"append to the BODY\" approaches and is just more convenient to use and debug (IE8+).</p>\n\n<pre><code>window.injectCSS = (function(doc){\n    // wrapper for all injected styles and temp el to create them\n    var wrap = doc.createElement('div');\n    var temp = doc.createElement('div');\n    // rules like \"a {color: red}\" etc.\n    return function (cssRules) {\n        // append wrapper to the body on the first call\n        if (!wrap.id) {\n            wrap.id = 'injected-css';\n            wrap.style.display = 'none';\n            doc.body.appendChild(wrap);\n        }\n        // &lt;br&gt; for IE: http://goo.gl/vLY4x7\n        temp.innerHTML = '&lt;br&gt;&lt;style&gt;'+ cssRules +'&lt;/style&gt;';\n        wrap.appendChild( temp.children[1] );\n    };\n})(document);\n</code></pre>\n\n<p>Demo: <a href=\"http://codepen.io/anon/pen/vtHCs\" rel=\"nofollow\">codepen</a>, <a href=\"http://jsfiddle.net/8h09zkht/\" rel=\"nofollow\">jsfiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This object variable will append style tag to the head tag with type attribute and one simple transition rule inside that matches every single id/class/element. Feel free to modify <strong>content</strong> property and inject as many rules as you need. Just make sure that css rules inside <strong>content</strong> remain in one line (or 'escape' each new line, if You prefer so). </p>\n\n<pre><code>var script = {\n\n  type: 'text/css', style: document.createElement('style'), \n  content: \"* { transition: all 220ms cubic-bezier(0.390, 0.575, 0.565, 1.000); }\",\n  append: function() {\n\n    this.style.type = this.type;\n    this.style.appendChild(document.createTextNode(this.content));\n    document.head.appendChild(this.style);\n\n}}; script.append();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For those who already use <strong>jQuery</strong> I will write what I am using, just to cover all possible solutions here:</p>\n\n<pre><code>$('&lt;style type=\"text/css\"&gt;'+ styles +'&lt;/style&gt;').appendTo(document.head);\n</code></pre>\n\n<p>So that's it. You can also save a reference to this element to change it later.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm looking for a way to insert a &lt;style&gt; tag into an HTML page with javascript.</p>\n\n<p>The best way I found so far:</p>\n\n<pre><code>var divNode = document.createElement(\"div\");\ndivNode.innerHTML = \"&lt;br&gt;&lt;style&gt;h1 { background: red; }&lt;/style&gt;\";\ndocument.body.appendChild(divNode);\n</code></pre>\n\n<p>This works in Firefox, Opera and Internet Explorer but not in Google Chrome. Also it's a bit ugly with the &lt;br&gt; in front for IE.</p>\n\n<p>Does anyone know of a way to create a &lt;style&gt; tag that </p>\n\n<ol>\n<li>is nicer</li>\n<li>works with Chrome?</li>\n</ol>\n\n<p>Or maybe</p>\n\n<ol>\n<li>this is a non-standard thing I should avoid </li>\n<li>three working browsers are great and who uses Chrome anyway?</li>\n</ol>\n\n<p>I appreciate any advice on this.</p>\n",
            "last_activity_date": 1424632582,
            "question_id": 524696,
            "score": 109,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "How to create a &lt;style&gt; tag with Javascript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Probably the easiest thing to do would be to give your scrip tag an <code>id</code> attribute.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>A word of warning: modifying the DOM while it is still loading will cause you a <a href=\"http://support.microsoft.com/kb/927917/en-us\" rel=\"nofollow\">world of hurt in IE6 &amp; IE7</a>.</p>\n\n<p>You're gonna be better off running that code after page load.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I've got this, which is working in FF3, IE6 &amp; 7. The methods in the on-demand loaded scripts aren't available until page load is complete, but this is still very useful.</p>\n\n<pre><code>//handle on-demand loading of javascripts\nmakescript = function(url){\n    var v = document.createElement('script');\n    v.src=url;\n    v.type='text/javascript';\n\n    //insertAfter. Get last &lt;script&gt; tag in DOM\n    d=document.getElementsByTagName('script')[(document.getElementsByTagName('script').length-1)];\n    d.parentNode.insertBefore( v, d.nextSibling );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you can assume the file name of the script, you can find it.  I've only really tested the following function in Firefox so far. </p>\n\n<pre><code>  function findMe(tag, attr, file) {\n    var tags = document.getElementsByTagName(tag);\n    var r = new RegExp(file + '$');\n    for (var i = 0;i &lt; tags.length;i++) {\n      if (r.exec(tags[i][attr])) {\n        return tags[i][attr];\n      }\n    }\n  };\n  var element = findMe('script', 'src', 'scripts.js');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Since scripts are executed sequentially, the currently executed script tag is always the last script tag on the page until then. So, to get the script tag, you can do:</p>\n\n<pre><code>var scripts = document.getElementsByTagName( 'script' );\nvar thisScriptTag = scripts[ scripts.length - 1 ];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<p>Script are executed sequentially only if they do not have either a \"defer\" or an \"async\" attribute. Knowing one of the possible ID/SRC/TITLE attributes of the script tag could work also in those cases. So both Greg and Justin suggestions are correct.</p>\n\n<p>There is already a proposal for a <code>document.currentScript</code> on the WHATWG lists.</p>\n\n<p><strong>EDIT</strong>: Firefox > 4 already implement this very useful property.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It must works at page load and when an script tag is added with javascript (ex. with ajax)</p>\n\n<pre><code>&lt;script id=\"currentScript\"&gt;\nvar $this = document.getElementById(\"currentScript\");\n$this.setAttribute(\"id\",\"\");\n//...\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Follow these simple steps to obtain reference to current executing script block:</p>\n\n<ol>\n<li>Put some random unique string within the script block (must be unique / different in each script block)</li>\n<li>Iterate result of document.getElementsByTagName('script'), looking the unique string from each of their content (obtained from innerText/textContent property).</li>\n</ol>\n\n<p><em>Example (ABCDE345678 is the unique ID)</em>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar A=document.getElementsByTagName('script'),i=count(A),thi$;\nfor(;i;thi$=A[--i])\n  if((thi$.innerText||thi$.textContent).indexOf('ABCDE345678'))break;\n// Now thi$ is refer to current script block\n&lt;/script&gt;\n</code></pre>\n\n<p>btw, for your case, you can simply use old fashioned document.write() method to include another script.\nAs you mentioned that DOM is not rendered yet, you can take advantage from the fact that browser always execute script in linear sequence (except for deferred one that will be rendered later), so the rest of your document is still \"not exists\".\nAnything you write through document.write() will be placed right after the caller script.</p>\n\n<p><em>Example of original HTML page</em>:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;script src=\"otherscript.js\"&gt;&lt;/script&gt;\n&lt;body&gt;anything&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p><em>Content of script.js</em>:</p>\n\n<pre><code>document.write('&lt;script src=\"inserted.js\"&gt;&lt;/script&gt;');\n</code></pre>\n\n<p>After rendered, the DOM structure will become:</p>\n\n<pre><code>HEAD\n  SCRIPT script.js\n  SCRIPT inserted.js\n  SCRIPT otherscript.js\nBODY\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An approach for dealing with async &amp; deferred scripts is to leverage the onload handler- set an onload handler for all script tags and the first one which executes should be yours.</p>\n\n<pre><code>function getCurrentScript(callback) {\n  if (document.currentScript) {\n    callback(document.currentScript);\n    return;\n  }\n  var scripts = document.scripts;\n  function onLoad() {\n    for (var i = 0; i &lt; scripts.length; ++i) {\n      scripts[i].removeEventListener('load', onLoad, false);\n    }\n    callback(event.target);\n  }\n  for (var i = 0; i &lt; scripts.length; ++i) {\n    scripts[i].addEventListener('load', onLoad, false);\n  }\n}\n\ngetCurrentScript(function(currentScript) {\n  window.console.log(currentScript.src);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a bit of a polyfill that leverages <code>document.CurrentScript</code> if it exists and falls back to finding the script by ID.</p>\n\n<pre><code>&lt;script id=\"uniqueScriptId\"&gt;\n    (function () {\n        var thisScript = document.CurrentScript || document.getElementByID('uniqueScriptId');\n\n        // your code referencing thisScript here\n    ());\n&lt;/script&gt;\n</code></pre>\n\n<p>If you include this at the top of every script tag I believe you'll be able to consistently know which script tag is being fired, and you'll also be able to reference the script tag in the context of an asynchronous callback.</p>\n\n<p>Untested, so leave feedback for others if you try it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<h1>How to get the current script element:</h1>\n\n<h1>1. Use <code>document.currentScript</code></h1>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript\"><code>document.currentScript</code></a> will return the <code>&lt;script&gt;</code> element whose script is currently being processed. </p>\n\n<pre><code>&lt;script&gt;\nvar me = document.currentScript;\n&lt;/script&gt;\n</code></pre>\n\n<h3>Benefits</h3>\n\n<ul>\n<li>Simple and explicit. Reliable.</li>\n<li>Don't need to modify the script tag</li>\n<li>Works with asynchronous scripts (<code>defer</code> &amp; <code>async</code>)</li>\n<li>Works with scripts inserted dynamically</li>\n</ul>\n\n<h3>Problems</h3>\n\n<ul>\n<li>Will not work in older browsers and IE.</li>\n</ul>\n\n<h1>2. Select script by id</h1>\n\n<p>Giving the script an id attribute will let you easily select it by id from within using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.getElementById\"><code>document.getElementById()</code></a>. </p>\n\n<pre><code>&lt;script id=\"myscript\"&gt;\nvar me = document.getElementById('myscript');\n&lt;/script&gt;\n</code></pre>\n\n<h3>Benefits</h3>\n\n<ul>\n<li>Simple and explicit. Reliable.</li>\n<li>Almost universally supported</li>\n<li>Works with asynchronous scripts (<code>defer</code> &amp; <code>async</code>)</li>\n<li>Works with scripts inserted dynamically</li>\n</ul>\n\n<h3>Problems</h3>\n\n<ul>\n<li>Requires adding a custom attribute to the script tag</li>\n<li><code>id</code> attribute may cause weird behaviour for scripts in some browsers for some edge cases</li>\n</ul>\n\n<h1>3. Select the script using a <code>data-*</code> attribute</h1>\n\n<p>Giving the script a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes\"><code>data-*</code></a> attribute will let you easily select it from within. </p>\n\n<pre><code>&lt;script data-name=\"myscript\"&gt;\nvar me = document.querySelector('script[data-name=\"myscript\"]');\n&lt;/script&gt;\n</code></pre>\n\n<p>This has few benefits over the previous option. </p>\n\n<h3>Benefits</h3>\n\n<ul>\n<li>Simple and explicit.</li>\n<li>Works with asynchronous scripts (<code>defer</code> &amp; <code>async</code>)</li>\n<li>Works with scripts inserted dynamically</li>\n</ul>\n\n<h3>Problems</h3>\n\n<ul>\n<li>Requires adding a custom attribute to the script tag</li>\n<li>HTML5, and <code>querySelector()</code> not compliant in all browsers</li>\n<li>Less widely supported than using the <code>id</code> attribute</li>\n<li>Will get around <code>&lt;script&gt;</code> with <code>id</code> edge cases. </li>\n<li>May get confused if another element has the same data attribute and value on the page.</li>\n</ul>\n\n<h1>4. Select the script by src</h1>\n\n<p>Instead of using the data attributes, you can use the selector to choose the script by source:</p>\n\n<pre><code>&lt;script src=\"//example.com/embed.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>In embed.js:</p>\n\n<pre><code>var me = document.querySelector('script[src=\"//example.com/embed.js\"]');\n</code></pre>\n\n<h3>Benefits</h3>\n\n<ul>\n<li>Reliable</li>\n<li>Works with asynchronous scripts (<code>defer</code> &amp; <code>async</code>)</li>\n<li>Works with scripts inserted dynamically</li>\n<li>No custom attributes or id needed</li>\n</ul>\n\n<h3>Problems</h3>\n\n<ul>\n<li>Does <strong>not</strong> work for local scripts</li>\n<li>Will cause problems in different environments, like Development and Production</li>\n<li>Static and fragile. Changing the location of the script file will require modifying the script</li>\n<li>Less widely supported than using the <code>id</code> attribute</li>\n<li>Will cause problems if you load the same script twice</li>\n</ul>\n\n<h1>5. Loop over all scripts to find the one you want</h1>\n\n<p>We can also loop over every script element and check each individually to select the one we want:</p>\n\n<pre><code>&lt;script&gt;\nvar me = null;\nvar scripts = document.getElementsByTagName(\"script\")\nfor (var i = 0; i &lt; scripts.length; ++i) {\n    if( isMe(scripts[i])){\n      me = scripts[i];\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>This lets us use both previous techniques in older browsers that don't support <code>querySelector()</code> well with attributes. For example:</p>\n\n<pre><code>function isMe(scriptElem){\n    return scriptElem.getAttribute('src') === \"//example.com/embed.js\";\n}\n</code></pre>\n\n<p>This inherits the benefits and problems of whatever approach is taken, but does not rely on <code>querySelector()</code> so will work in older browsers.</p>\n\n<h1>6. Get the last executed script</h1>\n\n<p>Since the scripts are executed sequentially, the last script element will very often be the currently running script: </p>\n\n<pre><code>&lt;script&gt;\nvar scripts = document.getElementsByTagName( 'script' );\nvar me = scripts[ scripts.length - 1 ];\n&lt;/script&gt;\n</code></pre>\n\n<h3>Benefits</h3>\n\n<ul>\n<li>Simple.</li>\n<li>Almost universally supported</li>\n<li>No custom attributes or id needed</li>\n</ul>\n\n<h3>Problems</h3>\n\n<ul>\n<li>Does <strong>not</strong> work with asynchronous scripts (<code>defer</code> &amp; <code>async</code>)</li>\n<li>Does <strong>not</strong> work with scripts inserted dynamically</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 111
                }
            ],
            "body": "<p>How can I reference the script element that loaded the javascript that is currently running?</p>\n\n<p>Here's the situation. I have a \"master\" script being loaded high in the page, first thing under the HEAD tag.</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>There is a script in \"scripts.js\" which needs to be able to do on-demand loading of other scripts. The normal method doesn't quite work for me because I need to add new scripts without referencing the HEAD tag, because the HEAD element hasn't finished rendering:</p>\n\n<pre><code>document.getElementsByTagName('head')[0].appendChild(v);\n</code></pre>\n\n<p>What I want to do is reference the script element that loaded the current script so that I can then append my new dynamically loaded script tags into the DOM after it.</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"scripts.js\"&gt;&lt;/script&gt;\nloaded by scripts.js--&gt;&lt;script type=\"text/javascript\" src=\"new_script1.js\"&gt;&lt;/script&gt;\nloaded by scripts.js --&gt;&lt;script type=\"text/javascript\" src=\"new_script2.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1412626643,
            "question_id": 403967,
            "score": 70,
            "tags": [
                "javascript",
                "element",
                "parent"
            ],
            "title": "How may I reference the script tag that loaded the currently-executing script?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If you are using jQuery, you can get the size of the window or the document using jQuery methods:</p>\n\n<pre><code>$(window).height();   // returns height of browser viewport\n$(document).height(); // returns height of HTML document\n$(window).width();   // returns width of browser viewport\n$(document).width(); // returns width of HTML document\n</code></pre>\n\n<p>For screen size you can use the <code>screen</code> object in the following way:</p>\n\n<pre><code>screen.height;\nscreen.width;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 463
                },
                {
                    "body": "<pre><code>function wndsize(){\nvar w = 0;var h = 0;\n//IE\nif(!window.innerWidth){\n    if(!(document.documentElement.clientWidth == 0)){\n        //strict mode\n        w = document.documentElement.clientWidth;h = document.documentElement.clientHeight;\n    } else{\n        //quirks mode\n        w = document.body.clientWidth;h = document.body.clientHeight;\n    }\n} else {\n    //w3c\n    w = window.innerWidth;h = window.innerHeight;\n}\nreturn {width:w,height:h};\n}\nfunction wndcent(){\nvar hWnd = (arguments[0] != null) ? arguments[0] : {width:0,height:0};\nvar _x = 0;var _y = 0;var offsetX = 0;var offsetY = 0;\n//IE\nif(!window.pageYOffset){\n//strict mode\nif(!(document.documentElement.scrollTop == 0)){offsetY = document.documentElement.scrollTop;offsetX = document.documentElement.scrollLeft;}\n//quirks mode\nelse{offsetY = document.body.scrollTop;offsetX = document.body.scrollLeft;}}\n//w3c\nelse{offsetX = window.pageXOffset;offsetY = window.pageYOffset;}_x = ((wndsize().width-hWnd.width)/2)+offsetX;_y = ((wndsize().height-hWnd.height)/2)+offsetY;\nreturn{x:_x,y:_y};\n}\nvar center = wndcent({width:350,height:350});\ndocument.write(center.x+';&lt;br&gt;');\ndocument.write(center.y+';&lt;br&gt;');\ndocument.write('&lt;DIV align=\"center\" id=\"rich_ad\" style=\"Z-INDEX: 10; left:'+center.x+'px;WIDTH: 350px; POSITION: absolute; TOP: '+center.y+'px; HEIGHT: 350px\"&gt;&lt;!--\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0443 \u0412\u0430\u0441 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d flash \u043f\u043b\u0435\u0435\u0440.--&gt;&lt;/div&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This is everything you need to know: <a href=\"http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\">http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/</a></p>\n\n<p>but in short:</p>\n\n<pre><code>var w = window,\n    d = document,\n    e = d.documentElement,\n    g = d.getElementsByTagName('body')[0],\n    x = w.innerWidth || e.clientWidth || g.clientWidth,\n    y = w.innerHeight|| e.clientHeight|| g.clientHeight;\nalert(x + ' \u00d7 ' + y);\n</code></pre>\n\n<p><a href=\"http://fiddle.jshell.net/L6uPV/show/4\">http://fiddle.jshell.net/L6uPV/show/4</a></p>\n",
                    "is_accepted": false,
                    "score": 333
                },
                {
                    "body": "<p>A non-jQuery way to get the available screen dimension. <code>window.screen.width/height</code> has already been put up, but for responsive webdesign and completeness sake I think its worth to mention those attributes:</p>\n\n<pre><code>alert(window.screen.availWidth);\nalert(window.screen.availHeight);\n</code></pre>\n\n<p><a href=\"http://www.quirksmode.org/dom/w3c_cssom.html#t10\">http://www.quirksmode.org/dom/w3c_cssom.html#t10</a> :</p>\n\n<blockquote>\n  <p><strong>availWidth</strong> and <strong>availHeight</strong> - The available width and height on the\n  screen (excluding OS taskbars and such).</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>You can also get the WINDOW width and height, avoiding browser toolbars and other stuff. It is the <strong>real usable area in browser's window</strong>.</p>\n\n<p>To do this, use:\n<code>window.innerWidth</code>  and  <code>window.innerHeight</code> properties (<a href=\"http://www.w3schools.com/jsref/prop_win_innerheight.asp\">see doc at w3schools</a>).</p>\n\n<p>In most cases it will be the best way, in example, to display a perfectly centred floating modal dialog. It allows you to calculate positions on window, no matter which resolution orientation or window size is using the browser.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is a cross browser solution with pure JavaScript (<a href=\"http://www.w3schools.com/jsref/prop_win_innerheight.asp\">Source</a>): </p>\n\n<pre><code>var w = window.innerWidth\n|| document.documentElement.clientWidth\n|| document.body.clientWidth;\n\nvar h = window.innerHeight\n|| document.documentElement.clientHeight\n|| document.body.clientHeight;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Sometimes you need to see the width/height changes while resizing the window and inner content.</p>\n\n<p>For that I've written a little script that adds a log box that dynamicly monitors all the resizing and almost immediatly updates.</p>\n\n<p>It adds a valid HTML with fixed position and high z-index, but is small enough, so <strong>you can</strong>:</p>\n\n<ul>\n<li>use it on an <strong><em>actual</em> site</strong> </li>\n<li>use it for testing <strong>mobile/responsive</strong>\nviews</li>\n</ul>\n\n<p><br>Tested on: Chrome 40, IE11, but it is highly possible to work on other/older browsers too ... :)</p>\n\n<pre><code>  function gebID(id){ return document.getElementById(id); }\n  function gebTN(tagName){ return document.getElementsByTagName(tagName); }\n  function setStyleToTags(tagName, styleString){\n    var tags = gebTN(tagName);\n    for( var i = 0; i&lt;tags.length; i++ ) tags[i].setAttribute('style', styleString);\n  }\n  function testSizes(){\n    gebID( 'screen.Width' ).innerHTML = screen.width;\n    gebID( 'screen.Height' ).innerHTML = screen.height;\n\n    gebID( 'window.Width' ).innerHTML = window.innerWidth;\n    gebID( 'window.Height' ).innerHTML = window.innerHeight;\n\n    gebID( 'documentElement.Width' ).innerHTML = document.documentElement.clientWidth;\n    gebID( 'documentElement.Height' ).innerHTML = document.documentElement.clientHeight;\n\n    gebID( 'body.Width' ).innerHTML = gebTN(\"body\")[0].clientWidth;\n    gebID( 'body.Height' ).innerHTML = gebTN(\"body\")[0].clientHeight;  \n  }\n\n  var table = document.createElement('table');\n  table.innerHTML = \n       \"&lt;tr&gt;&lt;th&gt;SOURCE&lt;/th&gt;&lt;th&gt;WIDTH&lt;/th&gt;&lt;th&gt;x&lt;/th&gt;&lt;th&gt;HEIGHT&lt;/th&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;screen&lt;/td&gt;&lt;td id='screen.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='screen.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;window&lt;/td&gt;&lt;td id='window.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='window.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;document&lt;br&gt;.documentElement&lt;/td&gt;&lt;td id='documentElement.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='documentElement.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;document.body&lt;/td&gt;&lt;td id='body.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='body.Height' /&gt;&lt;/tr&gt;\"\n  ;\n\n  gebTN(\"body\")[0].appendChild( table );\n\n  setStyleToTags(\"table\",\n                 \"border: 2px solid black !important; position: fixed !important;\"\n                +\"left: 50% !important; top: 0px !important; padding:10px !important;\"\n                +\"width: 150px !important; font-size:18px; !important\"\n                +\"white-space: pre !important; font-family: monospace !important;\"\n                +\"z-index: 9999 !important;background: white !important;\"\n  );\n  setStyleToTags(\"td\", \"color: black !important; border: none !important; padding: 5px !important; text-align:center !important;\");\n  setStyleToTags(\"th\", \"color: black !important; border: none !important; padding: 5px !important; text-align:center !important;\");\n\n  table.style.setProperty( 'margin-left', '-'+( table.clientWidth / 2 )+'px' );\n\n  setInterval( testSizes, 200 );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you need a truly bulletproof solution for the document width and height (the <code>pageWidth</code> and <code>pageHeight</code> in the picture), you might want to consider using a plugin of mine, <a href=\"https://github.com/hashchange/jquery.documentsize\" rel=\"nofollow\">jQuery.documentSize</a>. </p>\n\n<p>It has just one purpose: to always return the correct document size, even in scenarios when jQuery and other methods <a href=\"https://github.com/hashchange/jquery.documentsize#what-does-it-do-that-jquery-doesnt\" rel=\"nofollow\">fail</a>. Despite its name, you don't necessarily have to use jQuery \u2013 it is written in vanilla Javascript and <a href=\"https://github.com/hashchange/jquery.documentsize#dependencies-and-setup\" rel=\"nofollow\">works without jQuery</a>, too.</p>\n\n<p>Usage:</p>\n\n<pre><code>var w = $.documentWidth(),\n    h = $.documentHeight();\n</code></pre>\n\n<p>for the global <code>document</code>. For other documents, e.g. in an embedded iframe you have access to, pass the document as a parameter:</p>\n\n<pre><code>var w = $.documentWidth( myIframe.contentDocument ),\n    h = $.documentHeight( myIframe.contentDocument );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can I get <code>windowWidth</code>, <code>windowHeight</code>, <code>pageWidth</code>, <code>pageHeight</code>, <code>screenWidth</code>, <code>screenHeight</code>, <code>pageX</code>, <code>pageY</code>, <code>screenX</code>, <code>screenY</code> which will work in all major browsers?</p>\n\n<p><img src=\"http://i.stack.imgur.com/6xPdH.png\" alt=\"screenshot describing which values are wanted\"></p>\n",
            "last_activity_date": 1425508200,
            "question_id": 3437786,
            "score": 496,
            "tags": [
                "javascript",
                "layout",
                "cross-browser"
            ],
            "title": "Get the size of the screen, current web page and browser window"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>In modern browsers (IE9+, FF4+, Chrome5+, Opera12+, Safari5+) you can use the built in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\">Object.keys</a> method:</p>\n\n<pre><code>var keys = Object.keys(myJSONObject);\n</code></pre>\n\n<p>The above has a full polyfill but a simplified version is:</p>\n\n<pre><code>var getKeys = function(obj){\n   var keys = [];\n   for(var key in obj){\n      keys.push(key);\n   }\n   return keys;\n}\n</code></pre>\n\n<p>Alternatively replace <code>var getKeys</code> with <code>Object.prototype.keys</code> to allow you to call <code>.keys()</code> on any object.  Extending the prototype has some side effects and I wouldn't recommend doing it.</p>\n",
                    "is_accepted": true,
                    "score": 516
                },
                {
                    "body": "<p>As <a href=\"http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object#208020\">slashnick</a> pointed out, you can use the \"for in\" construct to iterate over an object for its attribute names. However you'll be iterating over all attribute names in the object's prototype chain. If you want to iterate <strong>only</strong> over the object's own attributes, you can make use of the <a href=\"http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty\">Object#hasOwnProperty()</a> method. Thus having the following.</p>\n\n<pre><code>for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n        /* useful code here */\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 158
                },
                {
                    "body": "<p>IE does not support for(i in obj) for native properties. Here is a list of all the props I could find.</p>\n\n<p>It seems stackoverflow does some stupid filtering.</p>\n\n<p>The list is available at the bottom of this google group post:-\nhttps://groups.google.com/group/hackvertor/browse_thread/thread/a9ba81ca642a63e0</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm a huge fan of the dump function.</p>\n\n<p><a href=\"http://ajaxian.com/archives/javascript-variable-dump-in-coldfusion\">http://ajaxian.com/archives/javascript-variable-dump-in-coldfusion</a>\n<img src=\"http://www.petefreitag.com/images/blog/jsdump.gif\" alt=\"alt text\"></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Note that Object.keys and other ECMAScript 5 methods are supported by Firefox 4, Chrome 6, Safari 5, IE 9 and above.</p>\n\n<p>For example: </p>\n\n<pre><code>var o = {\"foo\": 1, \"bar\": 2}; \nalert(Object.keys(o));\n</code></pre>\n\n<p>ECMAScript 5 compatibility table: <a href=\"http://kangax.github.com/es5-compat-table/\">http://kangax.github.com/es5-compat-table/</a></p>\n\n<p>Description of new methods: <a href=\"http://markcaudill.com/index.php/2009/04/javascript-new-features-ecma5/\">http://markcaudill.com/index.php/2009/04/javascript-new-features-ecma5/</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>As Sam Dutton answered, a new method for this very purpose has been introduced in ECMAScript 5th Edition.  <code>Object.keys()</code> will do what you want and is supported in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\">Firefox 4</a>, Chrome 6, Safari 5 and <a href=\"http://blogs.msdn.com/b/ie/archive/2010/06/25/enhanced-scripting-in-ie9-ecmascript-5-support-and-more.aspx\">IE 9</a>.  </p>\n\n<p>You can also very easily implement the method in browsers that don't support it.  However, some of the implementations out there aren't fully compatible with Internet Explorer.  <a href=\"http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\">I've detailed this on my blog</a> and produced a more compatible solution:</p>\n\n<pre><code>Object.keys = Object.keys || (function () {\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\n        hasDontEnumBug = !{toString:null}.propertyIsEnumerable(\"toString\"),\n        DontEnums = [ \n            'toString', 'toLocaleString', 'valueOf', 'hasOwnProperty',\n            'isPrototypeOf', 'propertyIsEnumerable', 'constructor'\n        ],\n        DontEnumsLength = DontEnums.length;\n\n    return function (o) {\n        if (typeof o != \"object\" &amp;&amp; typeof o != \"function\" || o === null)\n            throw new TypeError(\"Object.keys called on a non-object\");\n\n        var result = [];\n        for (var name in o) {\n            if (hasOwnProperty.call(o, name))\n                result.push(name);\n        }\n\n        if (hasDontEnumBug) {\n            for (var i = 0; i &lt; DontEnumsLength; i++) {\n                if (hasOwnProperty.call(o, DontEnums[i]))\n                    result.push(DontEnums[i]);\n            }   \n        }\n\n        return result;\n    };\n})();\n</code></pre>\n\n<p>Note that the currently accepted answer doesn't include a check for <em>hasOwnProperty()</em> and will return properties that are inherited through the prototype chain.  It also doesn't account for the famous DontEnum bug in Internet Explorer where non-enumerable properties on the prototype chain cause locally declared properties with the same name to inherit their DontEnum attribute.</p>\n\n<p>Implementing <em>Object.keys()</em> will give you a more robust solution.</p>\n\n<p><strong>EDIT:</strong> following a recent discussion with <a href=\"http://perfectionkills.com\">kangax</a>, a well-known contributor to Prototype, I implemented the workaround for the DontEnum bug based on code for his <code>Object.forIn()</code> function found <a href=\"http://github.com/kangax/protolicious/blob/master/experimental/object.for_in.js#L18\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 83
                },
                {
                    "body": "<p>if you are trying to get the elements only but not the functions then this code can help you</p>\n\n<pre><code>this.getKeys = function() {\n\n    var keys = new Array();\n    for(var key in this) {\n\n        if( typeof this[key] !== 'function') {\n\n            keys.push(key);\n        }\n    }\n    return keys;\n}\n</code></pre>\n\n<p>this is part of my implementation of the HashMap and I only want the keys, \"this\" is the hashmap object that contains the keys</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This will work in most browsers, even in IE8 , and no libraries of any sort are required.  var i is your key.</p>\n\n<pre><code>var myJSONObject =  {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"}; \nvar keys=[];\nfor (var i in myJSONObject ) { keys.push(i); }\nalert(keys);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Under browsers supporting js 1.8:</p>\n\n<pre><code>[i for(i in obj)]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Could do it with jQuery as follows:</p>\n\n<pre><code>var objectKeys = $.map(object, function(value, key) {\n  return key;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Mozilla has <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\">full implementation details</a> on how to do it in a browser where it isn't supported, if that helps:</p>\n\n<pre><code>if (!Object.keys) {\n  Object.keys = (function () {\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\n        hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n        dontEnums = [\n          'toString',\n          'toLocaleString',\n          'valueOf',\n          'hasOwnProperty',\n          'isPrototypeOf',\n          'propertyIsEnumerable',\n          'constructor'\n        ],\n        dontEnumsLength = dontEnums.length;\n\n    return function (obj) {\n      if (typeof obj !== 'object' &amp;&amp; typeof obj !== 'function' || obj === null) throw new TypeError('Object.keys called on non-object');\n\n      var result = [];\n\n      for (var prop in obj) {\n        if (hasOwnProperty.call(obj, prop)) result.push(prop);\n      }\n\n      if (hasDontEnumBug) {\n        for (var i=0; i &lt; dontEnumsLength; i++) {\n          if (hasOwnProperty.call(obj, dontEnums[i])) result.push(dontEnums[i]);\n        }\n      }\n      return result;\n    };\n  })();\n}\n</code></pre>\n\n<p>You could include it however you'd like, but possibly in some kind of <code>extensions.js</code> file at the top of your script stack.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Say I create an object thus:</p>\n\n<pre><code>var myJSONObject =\n        {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n</code></pre>\n\n<p>What is the best way to retrieve a list of the property names? i.e. I would like to end up with some variable 'keys' such that:</p>\n\n<pre><code>keys == [\"ircEvent\", \"method\", \"regex\"]\n</code></pre>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1425804084,
            "question_id": 208016,
            "score": 397,
            "tags": [
                "javascript",
                "json"
            ],
            "title": "How to list the properties of a JavaScript object"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<pre><code>function Hello()\n{\n    alert(\"caller is \" + arguments.callee.caller.toString());\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 480
                },
                {
                    "body": "<p>It's safer to use <code>*arguments.callee.caller</code> since <code>arguments.caller</code> is <strong>deprecated</strong>...</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Try accessing this:</p>\n\n<pre><code>arguments.callee.caller.name\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>function Hello() {\n    alert(Hello.caller);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>to recap (and make it clearer) ...</p>\n\n<p>this code: </p>\n\n<pre><code>function Hello() {\n    alert(\"caller is \" + arguments.callee.caller.toString());\n}\n</code></pre>\n\n<p>is equivalent to this: </p>\n\n<pre><code>function Hello() {\n    alert(\"caller is \" + Hello.caller.toString());\n}\n</code></pre>\n\n<p>clearly the first bit is more portable since you can change the name of the function, say from \"Hello\" to \"Ciao\", and still get the whole thing to work. In the latter, in case u decide to refactor the name of the invoked function (Hello), you would have to change all its occurencies :( </p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<h2>StackTrace</h2>\n\n<p>You can find the entire stack trace using browser specific code. The good thing is <a href=\"http://eriwen.com/javascript/stacktrace-update/\">someone already made it</a>; here is the <a href=\"http://github.com/eriwen/javascript-stacktrace\">project code on GitHub</a>.</p>\n\n<p>But not all the news is good:</p>\n\n<ol>\n<li><p>It is really slow to get the stack trace so be careful (read <a href=\"http://webreflection.blogspot.com/2009/06/es5-arguments-and-callee-i-was-wrong.html\">this</a> for more).</p></li>\n<li><p>You will need to define function names for the stack trace to be legible. Because if you have code like this:</p>\n\n<pre><code>var Klass = function kls() {\n   this.Hello = function() { alert(printStackTrace().join('\\n\\n')); };\n}\nnew Klass().Hello();\n</code></pre>\n\n<p>Google Chrome will alert <code>... kls.Hello ( ...</code> but most browsers will expect a function name just after the keyword <code>function</code> and will treat it as an anonymous function. An not even Chrome will be able to use the <code>Klass</code> name if you don't give the name <code>kls</code> to the function.</p>\n\n<p>And by the way, you can pass to the function printStackTrace the option <code>{guess: true}</code> but I didn't find any real improvement by doing that.</p></li>\n<li><p>Not all browsers give you the same information. That is, parameters, code column, etc.</p></li>\n</ol>\n\n<p><hr></p>\n\n<h2>Caller Function Name</h2>\n\n<p>By the way, if you only want the name of the caller function (in most browsers, but not IE) you can use:</p>\n\n<pre><code>arguments.callee.caller.name\n</code></pre>\n\n<p>But note that this name will be the one after the <code>function</code> keyword.  I found no way (even on Google Chrome) to get more than that without getting the code of the whole function.</p>\n\n<p><hr></p>\n\n<h2>Caller Function Code</h2>\n\n<p>And summarizing the rest of the best answers (by Pablo Cabrera, nourdine, and Greg Hewgill). <strong>The only cross-browser and really safe thing you can use is:</strong></p>\n\n<pre><code>arguments.callee.caller.toString();\n</code></pre>\n\n<p>Which will show the <strong>code</strong> of the caller function. Sadly, that is not enough for me, and that is why I give you tips for the StackTrace and the caller function Name (although they are not cross-browser).</p>\n",
                    "is_accepted": false,
                    "score": 90
                },
                {
                    "body": "<p>You can get the full stacktrace:</p>\n\n<pre><code>arguments.callee.caller\narguments.callee.caller.caller\narguments.callee.caller.caller.caller\n</code></pre>\n\n<p>Until caller is <code>null</code>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>If you just want the function name and not the code, and want a browser-independent solution, use the following:</p>\n\n<pre><code>var callerFunction = arguments.callee.caller.toString().match(/function ([^\\(]+)/)[1];\n</code></pre>\n\n<p>Note that the above will return an error if there is no caller function as there is no [1] element in the array. To work around, use the below:</p>\n\n<pre><code>var callerFunction = (arguments.callee.caller.toString().match(/function ([^\\(]+)/) === null) ? 'Document Object Model': arguments.callee.caller.toString().match(/function ([^\\(]+)/)[1], arguments.callee.toString().match(/function ([^\\(]+)/)[1]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I wanted to add my fiddle here for this:</p>\n\n<p><a href=\"http://jsfiddle.net/bladnman/EhUm3/\" rel=\"nofollow\">http://jsfiddle.net/bladnman/EhUm3/</a></p>\n\n<p>I tested this is chrome, safari and IE (10 and 8). Works fine. There is only 1 function that matters, so if you get scared by the big fiddle, read below.</p>\n\n<p>Note:\nThere is a fair amount of my own \"boilerplate\" in this fiddle. You can remove all of that and use split's if you like. It's just an ultra-safe\" set of functions I've come to rely on.</p>\n\n<p>There is also a \"JSFiddle\" template in there that I use for many fiddles to simply quick fiddling.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here, everything but the <code>functionname</code> is stripped from <code>caller.toString()</code>, with RegExp.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;Show the callers name&lt;/title&gt;&lt;!-- This validates as html5! --&gt;\n&lt;script&gt;\nmain();\nfunction main() { Hello(); }\nfunction Hello(){\n  var name = Hello.caller.toString().replace(/\\s\\([^#]+$|^[^\\s]+\\s/g,'');\n  name = name.replace(/\\s/g,'');\n  if ( typeof window[name] !== 'function' )\n    alert (\"sorry, the type of \"+name+\" is \"+ typeof window[name]);\n  else\n    alert (\"The name of the \"+typeof window[name]+\" that called is \"+name);\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try the following code:</p>\n\n<pre><code>function getStackTrace(){\n  var f = arguments.callee;\n  var ret = [];\n  var item = {};\n  var iter = 0;\n\n  while ( f = f.caller ){\n      // Initialize\n    item = {\n      name: f.name || null,\n      args: [], // Empty array = no arguments passed\n      callback: f\n    };\n\n      // Function arguments\n    if ( f.arguments ){\n      for ( iter = 0; iter&lt;f.arguments.length; iter++ ){\n        item.args[iter] = f.arguments[iter];\n      }\n    } else {\n      item.args = null; // null = argument listing not supported\n    }\n\n    ret.push( item );\n  }\n  return ret;\n}\n</code></pre>\n\n<p>Worked for me in Firefox-21 and Chromium-25.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Looks like this is quite a solved question but I recently found out that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/callee\" rel=\"nofollow\">callee is not allowed in 'strict mode'</a> so for my own use I wrote a class that will get the path from where it is called. It's <a href=\"https://github.com/QueueHammer/codecraftsman.js/blob/master/codecraftsman.js\" rel=\"nofollow\">part of a small helper lib</a> and if you want to use the code standalone change the offset used to return the stack trace of the caller (use 1 instead of 2)</p>\n\n<pre><code>function ScriptPath() {\n  var scriptPath = '';\n  try {\n    //Throw an error to generate a stack trace\n    throw new Error();\n  }\n  catch(e) {\n    //Split the stack trace into each line\n    var stackLines = e.stack.split('\\n');\n    var callerIndex = 0;\n    //Now walk though each line until we find a path reference\n    for(var i in stackLines){\n      if(!stackLines[i].match(/http[s]?:\\/\\//)) continue;\n      //We skipped all the lines with out an http so we now have a script reference\n      //This one is the class constructor, the next is the getScriptPath() call\n      //The one after that is the user code requesting the path info (so offset by 2)\n      callerIndex = Number(i) + 2;\n      break;\n    }\n    //Now parse the string for each section we want to return\n    pathParts = stackLines[callerIndex].match(/((http[s]?:\\/\\/.+\\/)([^\\/]+\\.js)):/);\n  }\n\n  this.fullPath = function() {\n    return pathParts[1];\n  };\n\n  this.path = function() {\n    return pathParts[2];\n  };\n\n  this.file = function() {\n    return pathParts[3];\n  };\n\n  this.fileNoExt = function() {\n    var parts = this.file().split('.');\n    parts.length = parts.length != 1 ? parts.length - 1 : 1;\n    return parts.join('.');\n  };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just want to let you know that on <strong>PhoneGap/Android</strong> the <code>name</code> doesnt seem to be working. But <code>arguments.callee.caller.toString()</code> will do the trick.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know you mentioned \"in Javascript\", but if the purpose is debugging, I think it's easier to just use your browser's developer tools. This is how it looks in Chrome:\n<img src=\"http://i.stack.imgur.com/aBtUp.png\" alt=\"enter image description here\">\nJust drop the debugger where you want to investigate the stack.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>function main()\n{\n   Hello();\n}\n\nfunction Hello()\n{\n  // How do you find out the caller function is 'main'?\n}\n</code></pre>\n\n<p>Is there a way to find out the call stack at all?</p>\n",
            "last_activity_date": 1422923339,
            "question_id": 280389,
            "score": 338,
            "tags": [
                "javascript",
                "callstack"
            ],
            "title": "How do you find out the caller function in JavaScript?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<pre><code>var items = [[1,2],[3,4],[5,6]];\nalert(items[0][0]); // 1\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 515
                },
                {
                    "body": "<p>Two dimensional arrays are created the same way single dimensional arrays are.  And you access them like <code>array[0][1]</code>.</p>\n\n<pre><code>var arr = [1, 2, [3, 4], 5];\n\nalert (arr[2][1]); //alerts \"4\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You simply make each item within the array an array.</p>\n\n<pre><code>  var x = new Array(10);\n  for (var i = 0; i &lt; 10; i++) {\n    x[i] = new Array(20);\n  }\n  x[5][12] = 3.0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 185
                },
                {
                    "body": "<p>Javascript only has 1-dimensional arrays, but you can build arrays of arrays, as others pointed out.</p>\n\n<p>The following function can be used to construct a 2-d array of fixed dimensions:</p>\n\n<pre><code>function Create2DArray(rows) {\n  var arr = [];\n\n  for (var i=0;i&lt;rows;i++) {\n     arr[i] = [];\n  }\n\n  return arr;\n}\n</code></pre>\n\n<p>The number of columns is not really important, because it is not required to specify the size of an array before using it.</p>\n\n<p>Then you can just call:</p>\n\n<pre><code>var arr = Create2DArray(100);\n\narr[50][2] = 5;\narr[70][5] = 7454;\n// ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>You could allocate an array of rows, where each row is an array of the same length. Or you could allocate a one-dimensional array with rows*columns elements and define methods to map row/column coordinates to element indices.</p>\n\n<p>Whichever implementation you pick, if you wrap it in an object you can define the accessor methods in a prototype to make the API easy to use. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The reason some say that it isn't possible is because a two dimensional array is really just an array of arrays. The other comments here provide perfectly valid methods of creating two dimensional arrays in JavaScript, but the purest point of view would be that you have a one dimensional array of objects, each of those objects would be a one dimensional array consisting of two elements.</p>\n\n<p>So, that's the cause of the conflicting view points. </p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>Similar to activa's answer, here's a function to create an n-dimensional array:</p>\n\n<pre><code>function createArray(length) {\n    var arr = new Array(length || 0),\n        i = length;\n\n    if (arguments.length &gt; 1) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        while(i--) arr[length-1 - i] = createArray.apply(this, args);\n    }\n\n    return arr;\n}\n\ncreateArray();     // [] or new Array()\n\ncreateArray(2);    // new Array(2)\n\ncreateArray(3, 2); // [new Array(2),\n                   //  new Array(2),\n                   //  new Array(2)]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>I'm not sure if anyone has answered this but I found this worked for me pretty well - </p>\n\n<pre><code>var array = [[,],[,]]\n</code></pre>\n\n<p>eg: </p>\n\n<pre><code>var a = [[1,2],[3,4]]\n</code></pre>\n\n<p>For a 2 dimensional array, for instance. </p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I had to make a flexible array function to add \"records\" to it as i needed and to be able to update them and do whatever calculations e needed before i sent it to a database for further processing. Here's the code, hope it helps :).</p>\n\n<pre><code>function Add2List(clmn1, clmn2, clmn3) {\n    aColumns.push(clmn1,clmn2,clmn3); // Creates array with \"record\"\n    aLine.splice(aPos, 0,aColumns);  // Inserts new \"record\" at position aPos in main array\n    aColumns = [];    // Resets temporary array\n    aPos++ // Increments position not to overlap previous \"records\"\n}\n</code></pre>\n\n<p>Feel free to optimize and / or point out any bugs :)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The easiest way:</p>\n\n<pre><code>var myArray = [[]];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Few people show the use of push:<br>\nTo bring something new, I will show you how to initialize the matrix with some value, example: 0 or an empty string \"\".<br>\nReminding that if you have a 10 elements array, in javascript the last index will be 9!</p>\n\n<pre><code>function matrix( rows, cols, defaultValue){\n\n  var arr = [];\n\n  // Creates all lines:\n  for(var i=0; i &lt; rows; i++){\n\n      // Creates an empty line\n      arr.push([]);\n\n      // Adds cols to the empty line:\n      arr[i].push( new Array(cols));\n\n      for(var j=0; j &lt; cols; j++){\n        // Initializes:\n        arr[i][j] = defaultValue;\n      }\n  }\n\nreturn arr;\n}\n</code></pre>\n\n<p>usage examples: </p>\n\n<pre><code>x = matrix( 2 , 3,''); // 2 lines, 3 cols filled with empty string\ny = matrix( 10, 5, 0);// 10 lines, 5 cols filled with 0\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>If you are after 2D array for google charts, the best way to do it is </p>\n\n<pre><code>var finalData = [];\n[[\"key\",value], [\"2013-8-5\", 13.5], [\"2013-7-29\",19.7]...]\n</code></pre>\n\n<p>referring to \n<a href=\"http://stackoverflow.com/questions/18090783/not-a-valid-2d-array-google-chart\">Not a valid 2d array google chart</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The easiest way:</p>\n\n<pre><code>var arr  = [];\n\nvar arr1 = ['00','01'];\nvar arr2 = ['10','11'];\nvar arr3 = ['20','21'];\n\narr.push(arr1);\narr.push(arr2);\narr.push(arr3);\n\nalert(arr[0][1]); // '01'\nalert(arr[1][1]); // '11'\nalert(arr[2][0]); // '20'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var _field = (function()\n{\n    var array = [];\n    for(var y = 0; y != 3; y++) { array[y] = new Array(5); }\n    return array;\n})();\n\n// var item = _field[2][4];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What happens if the size of array is unknown? Or array should be dynamically created and populated? Alternative solution which worked for me is to use class with static 2d array variable which in case of non-existence of index in array will initiate it:</p>\n\n<pre><code>function _a(x,y,val){\n    // return depending on parameters\n    switch(arguments.length){\n        case 0: return _a.a;\n        case 1: return _a.a[x];\n        case 2: return _a.a[x][y];\n    }\n\n    // declare array if wasn't declared yet\n    if(typeof _a.a[x] == 'undefined')\n        _a.a[x] = [];\n\n    _a.a[x][y] = val;\n}\n// declare static empty variable\n_a.a = [];\n</code></pre>\n\n<p>The syntax will be:</p>\n\n<pre><code>_a(1,1,2); // populates [1][1] with value 2\n_a(1,1);   // 2 or alternative syntax _a.a[1][1]\n_a(1);     // [undefined \u00d7 1, 2]\n_a.a;      // [undefined \u00d7 1, Array[2]]\n_a.a.length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found below is the simplest way:</p>\n\n<pre><code>var array1 = [[]];   \narray1[0][100] = 5; \n\nalert(array1[0][100]);\nalert(array1.length);\nalert(array1[0].length);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Two-liner:</p>\n\n<pre><code>var a = []; \nwhile(a.push([]) &lt; 10);\n</code></pre>\n\n<p>It will generate an array a of the length 10, filled with arrays.\n(Push adds an element to an array and returns the new length)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I found that this code works for me:</p>\n\n<pre><code>var map = [\n    []\n];\n\nmapWidth = 50;\nmapHeight = 50;\nfillEmptyMap(map, mapWidth, mapHeight);\n</code></pre>\n\n<p>...</p>\n\n<pre><code>function fillEmptyMap(array, width, height) {\n    for (var x = 0; x &lt; width; x++) {\n        array[x] = [];\n        for (var y = 0; y &lt; height; y++) {\n\n            array[x][y] = [0];\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To create a 2D array in javaScript we can create an Array first and then add Arrays as it's elements. This method will return a 2D array with the given number of rows and columns.     </p>\n\n<pre><code>function Create2DArray(rows,columns) {\n   var x = new Array(rows);\n   for (var i = 0; i &lt; rows; i++) {\n       x[i] = new Array(columns);\n   }\n   return x;\n}\n</code></pre>\n\n<p>to create an Array use this method as below.</p>\n\n<pre><code>var array = Create2DArray(10,20);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I've made a modification of <a href=\"http://stackoverflow.com/users/2214/matthew-crumley\">Matthew Crumley</a>'s answer for creating a multidimensional array function. I've added the dimensions of the array to be passed as array variable and there will be another variable - <code>value</code>, which will be used to set the values of the elements of the last arrays in the multidimensional array.</p>\n\n<pre><code>/*\n*   Function to create an n-dimensional array\n*\n*   @param array dimensions\n*   @param any type value\n*\n*   @return array array\n */\nfunction createArray(dimensions, value) {\n    // Create new array\n    var array = new Array(dimensions[0] || 0);\n    var i = dimensions[0];\n\n    // If dimensions array's length is bigger than 1\n    // we start creating arrays in the array elements with recursions\n    // to achieve multidimensional array\n    if (dimensions.length &gt; 1) {\n        // Remove the first value from the array\n        var args = Array.prototype.slice.call(dimensions, 1);\n        // For each index in the created array create a new array with recursion\n        while(i--) {\n            array[dimensions[0]-1 - i] = createArray(args, value);\n        }\n    // If there is only one element left in the dimensions array\n    // assign value to each of the new array's elements if value is set as param\n    } else {\n        if (typeof value !== 'undefined') {\n            while(i--) {\n                array[dimensions[0]-1 - i] = value;\n            }\n        }\n    }\n\n    return array;\n}\n\ncreateArray([]);              // [] or new Array()\n\ncreateArray([2], 'empty');    // ['empty', 'empty']\n\ncreateArray([3, 2], 0);       // [[0, 0],\n                              //  [0, 0],\n                              //  [0, 0]]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have been reading online and some places say it isn't possible, some say it is and then give an example and others refute the example, etc. </p>\n\n<ol>\n<li><p>How do I declare a 2 dimensional array in JavaScript? (assuming it's possible) </p></li>\n<li><p>How would I access its members? (<code>myArray[0][1]</code> or <code>myArray[0,1]</code>?)</p></li>\n</ol>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1424424660,
            "question_id": 966225,
            "score": 388,
            "tags": [
                "javascript",
                "arrays",
                "multidimensional-array"
            ],
            "title": "How can I create a two dimensional array in JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can try by sending XHR Requests a few times, and then if you get errors it means there's a problem with the internet connection.</p>\n\n<p><strong>Edit:</strong> <strike>I found <a href=\"http://jamazon.co.uk/web/2008/06/17/publish-subscribe-with-jquery/\" rel=\"nofollow\">this JQuery script</a> which is doing what you are asking for, I didn't test it though.</strike></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>edit: this solution is only for subsequent calls when the page is already loaded and we need to detect if we still have internet access. that's how i interpreted the first version of the question. navigator.online is more elegant for the 'first-time-check' though.</p>\n\n<p>google should have a good uptime for this test :-)</p>\n\n<p>the first function is an event handler which is only being called, when the get-function will not succeed. the callback of the get-function will only be called on success.</p>\n\n<pre><code>$('body').ajaxError(function() {\n  alert(\"failed\");\n});\n\n$.get('http://www.google.de', function(data) {\n  alert(\"success\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Sending XHR requests is bad because it could fail if that particular server is down.  Instead, use googles API library to load their cached version(s) of jQuery.</p>\n\n<p>You can use googles API to perform a callback after loading jQuery, and this will check if jQuery was loaded successfully.  Something like the code below should work:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    google.load(\"jquery\");\n\n    // Call this function when the page has been loaded\n    function test_connection() {\n        if($){\n            //jQuery WAS loaded.\n        } else {\n            //jQuery failed to load.  Grab the local copy.\n        }\n    }\n    google.setOnLoadCallback(test_connection);\n&lt;/script&gt;\n</code></pre>\n\n<p>The google API documentation can be found <a href=\"http://code.google.com/apis/ajax/documentation/#GoogleLoad\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p><strong>The best option for your specific case might be:</strong></p>\n\n<p>Right before your close <code>&lt;/body&gt;</code> tag:</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;window.jQuery || document.write('&lt;script src=\"js/vendor/jquery-1.10.2.min.js\"&gt;&lt;\\/script&gt;')&lt;/script&gt;\n</code></pre>\n\n<p>This is probably the easiest way given that your issue is centered around jQuery.</p>\n\n<p><strong>If you wanted a more robust solution you could try:</strong></p>\n\n<pre><code>var online = navigator.onLine;\n</code></pre>\n\n<p>Read more about the <a href=\"http://www.w3.org/TR/offline-webapps/\">W3C's spec on offline web apps</a>, however be aware that this will work best in modern web browsers, doing so with older web browsers may not work as expected, or at all.</p>\n\n<p>Alternatively, an XHR request to your own server isn't that bad of a method for testing your connectivity. Considering one of the other answers state that there are too many points of failure for an XHR, if your XHR is flawed when establishing it's connection then it'll also be flawed during routine use anyhow. If your site is unreachable for any reason, then your other services running on the same servers will likely be unreachable also. That decision is up to you.</p>\n\n<p>I wouldn't recommend making an XHR request to someone else's service, even google.com for that matter. Make the request to your server, or not at all.</p>\n\n<h2>What does it mean to be \"online\"?</h2>\n\n<p>There seems to be some confusion around what being \"online\" means. Consider that the internet is a bunch of networks, however sometimes you're on a VPN, without access to the internet \"at-large\" or the world wide web. Often companies have their own networks which have limited connectivity to other external networks, therefore you could be considered \"online\". Being online only entails that you are connected to <em>a</em> network, not the availability nor reachability of the services you are trying to connect to.</p>\n\n<p>To determine if a host is reachable from your network, you could do this:</p>\n\n<pre><code>function hostReachable() {\n\n  // Handle IE and more capable browsers\n  var xhr = new ( window.ActiveXObject || XMLHttpRequest )( \"Microsoft.XMLHTTP\" );\n  var status;\n\n  // Open new request as a HEAD to the root hostname with a random param to bust the cache\n  xhr.open( \"HEAD\", \"//\" + window.location.hostname + \"/?rand=\" + Math.floor((1 + Math.random()) * 0x10000), false );\n\n  // Issue request and handle response\n  try {\n    xhr.send();\n    return ( xhr.status &gt;= 200 &amp;&amp; (xhr.status &lt; 300 || xhr.status === 304) );\n  } catch (error) {\n    return false;\n  }\n\n}\n</code></pre>\n\n<p>You can also find the Gist for that here: <a href=\"https://gist.github.com/jpsilvashy/5725579\">https://gist.github.com/jpsilvashy/5725579</a></p>\n\n<p><strong>Details on local implementation</strong></p>\n\n<p>Some people have commented, \"I'm always being returned false\". That's because you're probably testing it out on your local server. Whatever server you're making the request to, you'll need to be able to respond to the HEAD request, that of course can be changed to a GET if you want.</p>\n",
                    "is_accepted": true,
                    "score": 138
                },
                {
                    "body": "<p>Ok, maybe a bit late in the game but what about checking with an online image?\nI mean, the OP needs to know if he needs to grab the Google CMD or the local JQ copy, but that doesn't mean the browser can't read Javascript no matter what, right? </p>\n\n<pre><code>&lt;script&gt;\nfunction doConnectFunction() {\n// Grab the GOOGLE CMD\n}\nfunction doNotConnectFunction() {\n// Grab the LOCAL JQ\n}\n\nvar i = new Image();\ni.onload = doConnectFunction;\ni.onerror = doNotConnectFunction;\n// CHANGE IMAGE URL TO ANY IMAGE YOU KNOW IS LIVE\ni.src = 'http://gfx2.hotmail.com/mail/uxp/w4/m4/pr014/h/s7.png?d=' + escape(Date());\n// escape(Date()) is necessary to override possibility of image coming from cache\n&lt;/script&gt;\n</code></pre>\n\n<p>Just my 2 cents</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>You can mimic the Ping command.</p>\n\n<p>Use Ajax to request a timestamp to your own server, define a timer using setTimeout to 5 seconds, if theres no response it try again.</p>\n\n<p>If there's no response in 4 attempts, you can suppose that internet is down.</p>\n\n<p>So you can check using this routine in regular intervals like 1 or 3 minutes.</p>\n\n<p>That seems a good and clean solution for me.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wrote a jQuery plugin for doing this. By default it checks the current URL (because that's already loaded once from the Web) or you can specify a URL to use as an argument. Always doing a request to Google isn't the best idea because it's blocked in different countries at different times. Also you might be at the mercy of what the connection across a particular ocean/weather front/political climate might be like that day.</p>\n\n<p><a href=\"http://tomriley.net/blog/archives/111\" rel=\"nofollow\">http://tomriley.net/blog/archives/111</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A much simpler solution:</p>\n\n<pre><code>&lt;script language=\"javascript\" src=\"http://maps.google.com/maps/api/js?v=3.2&amp;sensor=false\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>and later in the code:</p>\n\n<pre><code>var online;\n// check whether this function works (online only)\ntry {\n  var x = google.maps.MapTypeId.TERRAIN;\n  online = true;\n} catch (e) {\n  online = false;\n}\nconsole.log(online);\n</code></pre>\n\n<p>When not online the google script will not be loaded thus resulting in an error where an exception will be thrown.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>i have a solution who work here to check if internet connection exist : </p>\n\n<pre><code>              $.ajax({\n                      url: \"http://www.google.com\",\n                      context: document.body,\n                      error: function(jqXHR, exception) {alert('offline')},\n                      success: function(){alert('ONline')}\n                    })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>How do you check if there is an internet connection using Javascript?  That way I could have some conditionals saying \"use the google cached version of JQuery during production, use either that or a local version during development, depending on the internet connection\".</p>\n",
            "last_activity_date": 1412038820,
            "question_id": 2384167,
            "score": 114,
            "tags": [
                "javascript",
                "browser",
                "internet-connection"
            ],
            "title": "Check if Internet Connection Exists with Javascript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Just make your animation function tick by <strong>real elapsed time</strong>.</p>\n\n<p><a href=\"http://jsfiddle.net/7f6DX/31/\">http://jsfiddle.net/7f6DX/31/</a></p>\n\n<pre><code>var div = $('#my-div');\nvar leftValue = 0;\nvar interval = (1000/20); //20fps\nvar before = new Date();\n\nsetInterval(function()\n{\n    now = new Date();\n    var elapsedTime = (now.getTime() - before.getTime());\n\n    if(elapsedTime &gt; interval)\n    {\n        //Recover the motion lost while inactive.\n        leftValue += Math.floor(elapsedTime/interval);\n    }\n    else\n    {\n        leftValue++;\n    }\n\n    div.css(\"left\", leftValue);\n    before = new Date();    \n\n}, interval);\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT</strong></p>\n\n<p>@UpTheCreek comment:</p>\n\n<blockquote>\n  <p>Fine for presentation issues, but still\n  there are some things that you need to keep running.</p>\n</blockquote>\n\n<p>For this you can use <a href=\"http://robertnyman.com/2010/03/25/using-html5-web-workers-to-have-background-computational-power/\">HTML5 Web Workers</a>. Take a look at <a href=\"http://stackoverflow.com/questions/5927284/how-can-i-make-setinterval-also-work-when-a-tab-is-inactive-in-chrome/5927432#12522580\">M\u00f6hre's answer</a>...</p>\n\n<p><strong>NOTE</strong></p>\n\n<p>Considering animations, this problem and <a href=\"http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/\">many others</a> are solved by using CSS transitions instead of jQuery animation functions. I'd recommend this <a href=\"http://ricostacruz.com/jquery.transit/\"><strong>jQuery  plugin</strong></a> that let's you take benefit from CSS transitions just like the <code>animate()</code> methods.</p>\n",
                    "is_accepted": true,
                    "score": 72
                },
                {
                    "body": "<p>Just do this:</p>\n\n<pre><code>var $div = $('div');\nvar a = 0;\n\nsetInterval(function() {\n    a++;\n    $div.stop(true,true).css(\"left\", a);\n}, 1000 / 30);\n</code></pre>\n\n<p>Inactive browser tabs buffer some of the <code>setInterval</code> or <code>setTimeout</code> functions.</p>\n\n<p><code>stop(true,true)</code> will stop all buffered events and execute immediatly only the last animation.</p>\n\n<p>The <code>window.setTimeout()</code> method now clamps to send no more than one timeout per second in inactive tabs. In addition, it now clamps nested timeouts to the smallest value allowed by the HTML5 specification: 4 ms (instead of the 10 ms it used to clamp to).</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I think that a best understanding about this problem is in this example: <a href=\"http://jsfiddle.net/TAHDb/\" rel=\"nofollow\">http://jsfiddle.net/TAHDb/</a></p>\n\n<p>I am doing a simple thing here: </p>\n\n<p>Have a interval of 1 sec and each time hide the first span and move it to last, and show the 2nd span.</p>\n\n<p>If you stay on page it works as it is supposed. \nBut if you hide the tab for some seconds, when you get back you will see a weired thing.</p>\n\n<p>Its like all events that didn't ucur during the time you were inactive now will ocur all in 1 time. so for some few seconds you will get like X events. they are so quick that its possible to see all 6 spans at once.</p>\n\n<p>So it seams chrome only delays the events, so when you get back all events will occur but all at once...</p>\n\n<p>A pratical application were this ocur iss for a simple slideshow. Imagine the numbers being Images, and if user stay with tab hidden when he came back he will see all imgs floating, Totally mesed.</p>\n\n<p>To fix this use the stop(true,true) like pimvdb told.\nTHis will clear the event queue.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I ran into the same problem with audio fading and HTML5 player. It got stucked when tab became inactive.\nSo I found out a WebWorker is allowed to use intervals/timeouts without limitation. I use it to post \"ticks\" to the main javascript.</p>\n\n<p>WebWorkers Code:</p>\n\n<pre><code>var fading = false;\nvar interval;\nself.addEventListener('message', function(e){\n    switch (e.data) {\n        case 'start':\n            if (!fading){\n                fading = true;\n                interval = setInterval(function(){\n                    self.postMessage('tick');\n                }, 50);\n            }\n            break;\n        case 'stop':\n            clearInterval(interval);\n            fading = false;\n            break;\n    };\n}, false);\n</code></pre>\n\n<p>Main Javascript:</p>\n\n<pre><code>var player = new Audio();\nplayer.fader = new Worker('js/fader.js');\nplayer.faderPosition = 0.0;\nplayer.faderTargetVolume = 1.0;\nplayer.faderCallback = function(){};\nplayer.fadeTo = function(volume, func){\n    console.log('fadeTo called');\n    if (func) this.faderCallback = func;\n    this.faderTargetVolume = volume;\n    this.fader.postMessage('start');\n}\nplayer.fader.addEventListener('message', function(e){\n    console.log('fader tick');\n    if (player.faderTargetVolume &gt; player.volume){\n        player.faderPosition -= 0.02;\n    } else {\n        player.faderPosition += 0.02;\n    }\n    var newVolume = Math.pow(player.faderPosition - 1, 2);\n    if (newVolume &gt; 0.999){\n        player.volume = newVolume = 1.0;\n        player.fader.postMessage('stop');\n        player.faderCallback();\n    } else if (newVolume &lt; 0.001) {\n        player.volume = newVolume = 0.0;\n        player.fader.postMessage('stop');\n        player.faderCallback();\n    } else {\n        player.volume = newVolume;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>I have a <code>setInterval</code> running a piece of code 30 times a second. This works great, however when I select another tab (so that the tab with my code becomes inactive), the <code>setInterval</code> is set to an idle state for some reason.</p>\n\n<p>I made this simplified test case (<a href=\"http://jsfiddle.net/7f6DX/3/\">http://jsfiddle.net/7f6DX/3/</a>):</p>\n\n<pre><code>var $div = $('div');\nvar a = 0;\n\nsetInterval(function() {\n    a++;\n    $div.css(\"left\", a)\n}, 1000 / 30);\n</code></pre>\n\n<p>If you run this code and then switch to another tab, wait a few seconds and go back, the animation continues at the point it was when you switched to the other tab. So the animation isn't running 30 times a second in case the tab is inactive. This can be confirmed by counting the amount of times the <code>setInterval</code> function is called each second - this will not be 30 but just 1 or 2 if the tab is inactive.</p>\n\n<p>I guess that this is done by design so as to improve performance, but is there any way to disable this behaviour? It is actually a disadvantage in my scenario.</p>\n",
            "last_activity_date": 1398058401,
            "question_id": 5927284,
            "score": 59,
            "tags": [
                "javascript",
                "google-chrome",
                "setinterval"
            ],
            "title": "How can I make setInterval also work when a tab is inactive in Chrome?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>Maybe you are calling the ready function before the JQuery Javascript is included?</p>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>You should put the references to the jquery scripts first. </p>\n\n<pre><code>&lt;script language=\"JavaScript\" type=\"text/javascript\" src=\"/js/jquery-1.2.6.min.js\"&gt;&lt;/script&gt;\n&lt;script language=\"JavaScript\" type=\"text/javascript\" src=\"/js/jquery-ui-personalized-1.5.2.packed.js\"&gt;&lt;/script&gt;\n&lt;script language=\"JavaScript\" type=\"text/javascript\" src=\"/js/sprinkle.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 331
                },
                {
                    "body": "<p>i had the exact same problem and none of these solutions above helped.\nhowever, i just linked the .css files after the .js files and the problem miraculously disappeared. hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>In my case it was a typo, I forgot a backslash and was referencing the source incorrectly.</p>\n\n<p>Before <code>src=\"/scripts/jquery.js\"</code></p>\n\n<p>After &nbsp;&nbsp; <code>src=\"scripts/jquery.js\"</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Doh! I had mixed quotes in my  tags that caused the jquery reference to break.  Doing an inspect in Chrome allowed me to see that the file wasn't properly linked.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The source file <code>jquery-1.2.6.min.js</code> is not called the jQuery command <code>$()</code> is executed earlier than <code>&lt;..src='jquery-1.2.6.min.js'&gt;</code>.</p>\n\n<p>Please run <code>&lt;.. src=\"/js/jquery-1.2.6.min.js..\"&gt;</code> at first and make sure the src path is right, then execute jquery command</p>\n\n<pre><code>$(document).ready(function() \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Okay, my problem was different - it was <strong>Document Security</strong> model in <strong>Chrome</strong>.</p>\n\n<p>Looking at the answers here, it was obvious that I was somehow not loading my jquery files before calling the <code>$(document).ready()</code> etc. functions. However, they were all in the correct positions.</p>\n\n<p>In my case, this was because I was accessing the content over a secure HTTPS connection, whereas the page was trying to download the CDN hosted data from google, etc. The solution was to store them locally and then include then directly rather than from the CDN each time.</p>\n\n<p><em>Edit</em>: The other way of doing this is to link to all the CDN-hosted stuff as https:// rather than http:// - then the model doesn't complain.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>This is what solved it for me.  Originally I went to Google and copied and pasted their suggested snippet for jQuery on their CDN page: </p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The snippet does not include the <code>HTTP:</code> or <code>HTTPS:</code> in the <code>src</code> attribute but my browser, FireFox, needed it so I changed it to:</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><em>Then</em> it worked.</p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>Your JavaScript file is missing so this error occurred. Just add the JavaScript file inside the <code>&lt;head&gt;</code> tag. See the example:</p>\n\n<pre><code>&lt;script src=\"js/sample.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;link href=\"css/sample.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>or add the following code in  tag :</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are doing this in .Net and have the script file referenced properly and you jQuery looks fine, make sure that your users have access to the script file. The project I was working on (a coworker) had their web.config denying access to anonymous users. The page I was working on was accessible to anonymous users therefore they didn't have access to the script file. Dropped the following into the web.config and all was right in the world:</p>\n\n<pre><code>  &lt;location path=\"Scripts\"&gt;\n    &lt;system.web&gt;\n      &lt;authorization&gt;\n        &lt;allow users=\"*\"/&gt;\n      &lt;/authorization&gt;\n    &lt;/system.web&gt;\n  &lt;/location&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I had this problem in Fireox, and it was solved after i changed the name of the jQuery js file, from <code>jquery_1.7.js</code> in <code>jquery1_7.js</code>. So, i adeed only one dot, before extension.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This happened to me before. </p>\n\n<p>The reason was that I'm connecting android to a webview with a JS. And I sent a parameter without quotes.</p>\n\n<pre><code>js.sayHello(hello);\n</code></pre>\n\n<p>and when I changed it to </p>\n\n<pre><code>js.sayHello('hello');\n</code></pre>\n\n<p>it worked.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If your custom script is loaded before the jQuery plugin is loaded to the browser then this type of problem may occur. So, always keep your own JavaScript or jQuery code after calling the jQuery plugin so the solution for this is :</p>\n\n<p>First add the link to the jQuery file hosted at GoogleApis or a local jQuery file that you will download from <a href=\"http://jquery.com/download/\">http://jquery.com/download/</a> and host on your server:</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>or any plugin for jQuery. Then put your custom script file link or code:</p>\n\n<pre><code>&lt;script src=\"js/custom.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>In my case I had this referenceError as the order of script calls was wrong. Solved that by changing the order:</p>\n\n<pre><code>&lt;script src=\"js/index.js\"&gt;&lt;/script&gt;\n&lt;script src=\"js/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>to</p>\n\n<pre><code>&lt;script src=\"js/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;script src=\"js/index.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I had a similar issue and it was because I was missing a closing > on a style sheet link.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Strange enough, my problem was coming from PHP.</p>\n\n<p>A REST API call was failing, and it was breaking the loading of the libraries afterwards. Since failure was from the REST call, it was not giving me a php compile error.</p>\n\n<p>Keep this as an option also, if loading jquery seems ok.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had this issue, when I was browsing internet through my mobile hotspot. it was also compressing images and added the following script at the bottom of body tag </p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;&lt;!--\nbmi_SafeAddOnload(bmi_load,\"bmi_orig_img\");//--&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>When I connected to proper wifi connection, all seems to work find for me. Hope this help someone.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In my case i forgot to include this :</p>\n\n<pre><code> &lt;script src =\"jquery-2.1.1.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Earlier I was including just jquery-mobile which was causing this error.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is the worst case: </p>\n\n<p>Everything seemed perfect. After spending a couple of hours I realized that the jquery file which is added in the correct position was actually a file with empty content!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>On my case i was putting my \".js\" file before the Jquery script link, putting the \".js\" file after Jquery script link solved my issue.</p>\n\n<p><code>&lt;script src=\"http://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n &lt;script src=\"http://code.jquery.com/ui/1.11.2/jquery-ui.js\"&gt;&lt;/script&gt;\n &lt;script src=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n &lt;script src=\"exponential.js\"&gt;&lt;/script&gt;\n</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Bitten by this once again, missing library source links. \n<a href=\"https://developers.google.com/speed/libraries/devguide\" rel=\"nofollow\">Google Hosted Libraries</a>\n<a href=\"http://stackoverflow.com/questions/24946616/javascript-uncaught-referenceerror-jquery-is-not-defined-uncaught-referenceerr\">Similar link</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How come this code throws an \"Uncaught ReferenceError: $ is not defined\" - when it was OK before?   </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).ready(function() {\n    $('#tabs &gt; ul').tabs({ fx: { opacity: 'toggle' } });\n    $('#featuredvid &gt; ul').tabs();\n});\n</code></pre>\n\n<p>Results in tabs don't close anymore.</p>\n\n<p>jQuery is referenced in the header:</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>&lt;script language=\"JavaScript\" type=\"text/javascript\" src=\"&lt;?php echo get_option('siteurl') ?&gt;/js/sprinkle.js\"&gt;&lt;/script&gt;\n&lt;script language=\"JavaScript\" type=\"text/javascript\" src=\"&lt;?php echo get_option('siteurl') ?&gt;/js/jquery-1.2.6.min.js\"&gt;&lt;/script&gt;\n&lt;script language=\"JavaScript\" type=\"text/javascript\" src=\"&lt;?php echo get_option('siteurl') ?&gt;/js/jquery-ui-personalized-1.5.2.packed.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1419219220,
            "question_id": 2075337,
            "score": 189,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Uncaught ReferenceError: $ is not defined?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><strike>No</strike> Yes, using the File API in newer browsers. See TJ's answer for details.  </p>\n\n<p>If you need to support older browsers as well, you will have to use a Flash-based uploader like <a href=\"http://www.swfupload.org\" rel=\"nofollow\">SWFUpload</a> or <a href=\"http://www.uploadify.com\" rel=\"nofollow\">Uploadify</a> to do this.</p>\n\n<p>The <a href=\"http://demo.swfupload.org/v220/featuresdemo/index.php\" rel=\"nofollow\">SWFUpload Features Demo</a> shows how the <code>file_size_limit</code> setting works.</p>\n\n<p>Note that this (obviously) needs Flash, plus the way it works is a bit different from normal upload forms.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><strong>Yes</strong>, there's a new feature from the W3C that's supported by some modern browsers, the <a href=\"http://www.w3.org/TR/FileAPI/\">File API</a>. It can be used for this purpose, and it's easy to test whether it's supported and fall back (if necessary) to another mechanism if it isn't.</p>\n\n<p>Here's a complete example:</p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\"&gt;\n&lt;title&gt;Show File Data&lt;/title&gt;\n&lt;style type='text/css'&gt;\nbody {\n    font-family: sans-serif;\n}\n&lt;/style&gt;\n&lt;script type='text/javascript'&gt;\nfunction showFileSize() {\n    var input, file;\n\n    // (Can't use `typeof FileReader === \"function\"` because apparently\n    // it comes back as \"object\" on some browsers. So just see if it's there\n    // at all.)\n    if (!window.FileReader) {\n        bodyAppend(\"p\", \"The file API isn't supported on this browser yet.\");\n        return;\n    }\n\n    input = document.getElementById('fileinput');\n    if (!input) {\n        bodyAppend(\"p\", \"Um, couldn't find the fileinput element.\");\n    }\n    else if (!input.files) {\n        bodyAppend(\"p\", \"This browser doesn't seem to support the `files` property of file inputs.\");\n    }\n    else if (!input.files[0]) {\n        bodyAppend(\"p\", \"Please select a file before clicking 'Load'\");\n    }\n    else {\n        file = input.files[0];\n        bodyAppend(\"p\", \"File \" + file.name + \" is \" + file.size + \" bytes in size\");\n    }\n}\n\nfunction bodyAppend(tagName, innerHTML) {\n    var elm;\n\n    elm = document.createElement(tagName);\n    elm.innerHTML = innerHTML;\n    document.body.appendChild(elm);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action='#' onsubmit=\"return false;\"&gt;\n&lt;input type='file' id='fileinput'&gt;\n&lt;input type='button' id='btnLoad' value='Load' onclick='showFileSize();'&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And <a href=\"http://jsbin.com/ulamor\">here</a> it is in action. Try that with a recent version of Chrome or Firefox.</p>\n\n<hr>\n\n<p>Slightly off-topic, but: Note that client-side validation is <strong>no substitute</strong> for server-side validation. Client-side validation is purely to make it possible to provide a nicer user experience. For instance, if you don't allow uploading a file more than 5MB, you could use client-side validation to check that the file the user has chosen isn't more than 5MB in size and give them a nice friendly message if it is (so they don't spend all that time uploading only to get the result thrown away at the server), but you must <strong>also</strong> enforce that limit at the server, as all client-side limits (and other validations) can be circumvented.</p>\n",
                    "is_accepted": true,
                    "score": 105
                },
                {
                    "body": "<p>You can try this <a href=\"http://fineuploader.com/\" rel=\"nofollow\">fineuploader</a></p>\n\n<p>It works fine under IE6(and avove), Chrome or Firefox</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>// Using jquery</p>\n\n<pre><code>&lt;form action=\"upload\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n\n    Upload image:\n    &lt;input id=\"image-file\" type=\"file\" name=\"file\" /&gt;\n    &lt;input type=\"submit\" value=\"Upload\" /&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $('#image-file').bind('change', function() {\n            alert('This file size is: ' + this.files[0].size/1024/1024 + \"MB\");\n        });\n    &lt;/script&gt;\n\n&lt;/form&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>If you're using jQuery Validation, you could write something like this:</p>\n\n<pre><code>$.validator.addMethod(\n    \"maxfilesize\",\n    function (value, element) {\n        return this.optional(element) || (element.files &amp;&amp; element.files[0]\n                               &amp;&amp; element.files[0].size &lt; 1024 * 1024 * 2);\n    },\n    'The file size can not exceed 2MB.'\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I use one main Javascript function that I had found at Mozilla Developer Network site <a href=\"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications</a>, along with another function with AJAX and changed according to my needs. It receives a document element id regarding the place in my html code where I want to write the file size.</p>\n\n<pre><code>&lt;Javascript&gt;\n\nfunction updateSize(elementId) {\n    var nBytes = 0,\n    oFiles = document.getElementById(elementId).files,\n    nFiles = oFiles.length;\n\n    for (var nFileId = 0; nFileId &lt; nFiles; nFileId++) {\n        nBytes += oFiles[nFileId].size;\n    }\n    var sOutput = nBytes + \" bytes\";\n    // optional code for multiples approximation\n    for (var aMultiples = [\"K\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"], nMultiple = 0, nApprox = nBytes / 1024; nApprox &gt; 1; nApprox /= 1024, nMultiple++) {\n        sOutput = \" (\" + nApprox.toFixed(3) + aMultiples[nMultiple] + \")\";\n    }\n\n    return sOutput;\n}\n&lt;/Javascript&gt;\n\n&lt;HTML&gt;\n&lt;input type=\"file\" id=\"inputFileUpload\" onchange=\"uploadFuncWithAJAX(this.value);\" size=\"25\"&gt;\n&lt;/HTML&gt;\n\n&lt;Javascript with XMLHttpRequest&gt;\ndocument.getElementById('spanFileSizeText').innerHTML=updateSize(\"inputFileUpload\");\n&lt;/XMLHttpRequest&gt;\n</code></pre>\n\n<p>Cheers</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you set the Ie 'Document Mode' to 'Standards' you can use the simple javascript 'size' method to get the uploaded file's size.</p>\n\n<p>Set the Ie 'Document Mode' to 'Standards':</p>\n\n<pre><code>&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt;\n</code></pre>\n\n<p>Than, use the 'size' javascript method to get the uploaded file's size:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var uploadedFile = document.getElementById('imageUpload');\n    var fileSize = uploadedFile.files[0].size;\n    alert(fileSize); \n&lt;/script&gt;\n</code></pre>\n\n<p>It works for me.</p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>Is there any way to check <strong>file size</strong> before uploading it using javascript.</p>\n",
            "last_activity_date": 1392115264,
            "question_id": 3717793,
            "score": 64,
            "tags": [
                "javascript",
                "validation",
                "file-upload"
            ],
            "title": "javascript file upload size validation"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You are using a single <code>RegExp</code> object and executing it multiple times. On each successive execution it continues on from the last match index.</p>\n\n<p>You need to \"reset\" the regex to start from the beginning before each execution:</p>\n\n<pre><code>result.push(re.test('Foo Bar'));\nre.lastIndex = 0;\nresult.push(re.test('Foo Bar'));\n// result is now [true, true]\n</code></pre>\n\n<p>Having said that it may be more readable to create a new RegExp object each time (overhead is minimal as the RegExp is cached anyway):</p>\n\n<pre><code>result.push((/Foo B/gi).test(stringA));\nresult.push((/Foo B/gi).test(stringB));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p><strong><code>RegExp.prototype.test</code></strong> updates the regular expressions' <strong><code>lastIndex</code></strong> property so that each test will start where the last one stopped. I'd suggest using <strong><code>String.prototype.match</code></strong> since it doesn't update the <strong><code>lastIndex</code></strong> property:</p>\n\n<pre><code>!!'Foo Bar'.match(re); // -&gt; true\n!!'Foo Bar'.match(re); // -&gt; true\n</code></pre>\n\n<p>Note: <strong><code>!!</code></strong> converts it to a boolean and then inverts the boolean so it reflects the result.</p>\n\n<p>Alternatively, you could just reset the <strong><code>lastIndex</code></strong> property:</p>\n\n<pre><code>result.push(re.test('Foo Bar'));\nre.lastIndex = 0;\nresult.push(re.test('Foo Bar'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>The <code>RegExp</code> object keeps track of the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> where a match occurred, so on subsequent matches it will start from the last used index, instead of 0. Take a look:</p>\n\n<pre><code>var query = 'Foo B';\nvar re = new RegExp(query, 'gi');\nvar result = [];\nresult.push(re.test('Foo Bar'));\n\nalert(re.lastIndex);\n\nresult.push(re.test('Foo Bar'));\n</code></pre>\n\n<p>If you don't want to manually reset <code>lastIndex</code> to 0 after every test, just remove the <code>g</code> flag.</p>\n\n<p>Here's the algorithm that the specs dictate (section 15.10.6.2):</p>\n\n<blockquote>\n  <p><strong>RegExp.prototype.exec(string)</strong></p>\n  \n  <p>Performs\n  a regular expression match of string\n  against the regular expression and\n  returns an Array object containing the\n  results of the match, or null if the\n  string did not match The string\n  ToString(string) is searched for an\n  occurrence of the regular expression\n  pattern as follows:</p>\n  \n  <ol>\n  <li>Let S be the value of ToString(string).</li>\n  <li>Let length be the length of S.</li>\n  <li><strong>Let lastIndex be the value of the lastIndex property.</strong></li>\n  <li>Let i be the value of ToInteger(lastIndex).</li>\n  <li>If the global property is false, let i = 0.</li>\n  <li>If I &lt; 0 or I > length then set lastIndex to 0 and return null.</li>\n  <li>Call [[Match]], giving it the arguments S and i. If [[Match]]\n  returned failure, go to step 8;\n  otherwise let r be its State result\n  and go to step 10.</li>\n  <li>Let i = i+1.</li>\n  <li>Go to step 6.</li>\n  <li>Let e be r's endIndex value.</li>\n  <li>If the global property is true, set lastIndex to e.</li>\n  <li>Let n be the length of r's captures array. (This is the same\n  value as 15.10.2.1's\n  NCapturingParens.)</li>\n  <li>Return a new array with the following properties:\n  <ul>\n  <li>The index\n  property is set to the position of the\n  matched substring within the complete\n  string S.</li>\n  <li>The input property is set\n  to S.</li>\n  <li>The length property is set to\n  n + 1.</li>\n  <li>The 0 property is set to the\n  matched substring (i.e. the portion of\n  S between offset i inclusive and\n  offset e exclusive).</li>\n  <li>For each\n  integer i such that I > 0 and I \u2264 n,\n  set the property named ToString(i) to\n  the ith element of r's captures array.</li>\n  </ul></li>\n  </ol>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 88
                },
                {
                    "body": "<p>Remove global (g) flag will fix your problem.</p>\n\n<p>var re = new RegExp(query, '<strong>g</strong>i'); <em>should be</em> var re = new RegExp(query, 'i');</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>What is the problem with this regular expression when I use the global flag and the case insensitive flag? Query is a user generated input. The result should be [true, true].</p>\n\n<pre><code>var query = 'Foo B';\nvar re = new RegExp(query, 'gi');\nvar result = [];\nresult.push(re.test('Foo Bar'));\nresult.push(re.test('Foo Bar'));\n// result will be [true, false]\n</code></pre>\n",
            "last_activity_date": 1414663137,
            "question_id": 1520800,
            "score": 61,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "Why RegExp with global flag in Javascript give wrong results?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Here are functions you can use for creating and retrieving cookies.</p>\n\n<pre><code>var createCookie = function(name, value, days) {\n    var expires;\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = \"; expires=\" + date.toGMTString();\n    }\n    else {\n        expires = \"\";\n    }\n    document.cookie = name + \"=\" + value + expires + \"; path=/\";\n}\n\nfunction getCookie(c_name) {\n    if (document.cookie.length &gt; 0) {\n        c_start = document.cookie.indexOf(c_name + \"=\");\n        if (c_start != -1) {\n            c_start = c_start + c_name.length + 1;\n            c_end = document.cookie.indexOf(\";\", c_start);\n            if (c_end == -1) {\n                c_end = document.cookie.length;\n            }\n            return unescape(document.cookie.substring(c_start, c_end));\n        }\n    }\n    return \"\";\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 82
                },
                {
                    "body": "<p><a href=\"http://www.electrictoolbox.com/jquery-cookies/\">JQuery Cookies</a></p>\n\n<p>or plain Javascript:</p>\n\n<pre><code>    function setCookie(c_name,value,exdays)\n    {\n      var exdate=new Date();\n      exdate.setDate(exdate.getDate() + exdays);\n      var c_value=escape(value) + \n        ((exdays==null) ? \"\" : (\"; expires=\"+exdate.toUTCString()));\n      document.cookie=c_name + \"=\" + c_value;\n    }\n\n    function getCookie(c_name)\n    {\n     var i,x,y,ARRcookies=document.cookie.split(\";\");\n     for (i=0;i&lt;ARRcookies.length;i++)\n     {\n      x=ARRcookies[i].substr(0,ARRcookies[i].indexOf(\"=\"));\n      y=ARRcookies[i].substr(ARRcookies[i].indexOf(\"=\")+1);\n      x=x.replace(/^\\s+|\\s+$/g,\"\");\n      if (x==c_name)\n      {\n       return unescape(y);\n      }\n     }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Mozilla provides a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\" rel=\"nofollow\">simple framework for reading and writing cookies with full unicode support</a> along with examples of how to use it.</p>\n\n<p>Once included on the page, you can set a cookie:</p>\n\n<pre><code>docCookies.setItem(name, value);\n</code></pre>\n\n<p>read a cookie:</p>\n\n<pre><code>docCookies.getItem(name);\n</code></pre>\n\n<p>or delete a cookie:</p>\n\n<pre><code>docCookies.removeItem(name);\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>// sets a cookie called 'myCookie' with value 'Chocolate Chip'\ndocCookies.setItem('myCookie', 'Chocolate Chip');\n\n// reads the value of a cookie called 'myCookie' and assigns to variable\nvar myCookie = docCookies.getItem('myCookie');\n\n// removes the cookie called 'myCookie'\ndocCookies.removeItem('myCookie');\n</code></pre>\n\n<p>See more examples and details on <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\" rel=\"nofollow\">Mozilla's document.cookie page</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>An improved version of the readCookie:</p>\n\n<pre><code>function readCookie( name )\n{\n    var cookieParts = document.cookie.split( ';' )\n    ,   i           = 0\n    ,   part\n    ,   part_data\n    ,   value\n    ;\n\n    while( part = cookieParts[ i++ ] )\n    {\n        part_data = part.split( '=' );\n\n        if ( part_data.shift().replace(/\\s/, '' ) === name )\n        {\n            value = part_data.shift();\n            break;\n        }\n\n    }\n    return value;\n}\n</code></pre>\n\n<p>This should break as soon as you  have found your cookie value and return its value. In my opinion very elegant with the double split.</p>\n\n<p>The replace on the if-condition is a white space trim, to make sure it matches correctly</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I create and read a value from cookie in JavaScript?</p>\n",
            "last_activity_date": 1425460561,
            "question_id": 4825683,
            "score": 55,
            "tags": [
                "javascript",
                "cookies"
            ],
            "title": "How do I create and read a value from cookie?"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>Same as other answers, in jQuery fashion:</p>\n\n<pre><code>$.each(selectValues, function(key, value) {   \n     $('#mySelect')\n         .append($(\"&lt;option&gt;&lt;/option&gt;\")\n         .attr(\"value\",key)\n         .text(value)); \n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 693
                },
                {
                    "body": "<p>I have made something like this, <a href=\"http://www.chazzuka.com/blog/?p=206\" rel=\"nofollow\">loading a dropdown item via Ajax</a>. The response above is also acceptable, but it is always good to have as little DOM modification as as possible for better performance.</p>\n\n<p>So rather than add each item inside a loop it is better to collect items within a loop and append it once it's completed.</p>\n\n<pre><code>$(data).each(function(){\n    ... Collect items\n})\n</code></pre>\n\n<p>Append it,</p>\n\n<pre><code>$('#select_id').append(items); \n</code></pre>\n\n<p>or even better </p>\n\n<pre><code>$('#select_id').html(items);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Using <a href=\"http://plugins.jquery.com/project/DOMEC\">DOM Elements Creator plugin</a> (my favorite):</p>\n\n<pre><code>$.create('option', {'value': 'val'}, 'myText').appendTo('#mySelect');\n</code></pre>\n\n<p>Using the <code>Option</code> constructor (not sure about browser support):</p>\n\n<pre><code>$(new Option('myText', 'val')).appendTo('#mySelect');\n</code></pre>\n\n<p>Using <code>document.createElement</code> (avoiding extra work parsing HTML with <code>$(\"&lt;option&gt;&lt;/option&gt;\")</code>):</p>\n\n<pre><code>$('#mySelect').append($(document.createElement(\"option\")).\n                        attr(\"value\",\"val\").text(\"myText\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<pre><code>var output = [];\n\n$.each(selectValues, function(key, value)\n{\n  output.push('&lt;option value=\"'+ key +'\"&gt;'+ value +'&lt;/option&gt;');\n});\n\n$('#mySelect').html(output.join(''));\n</code></pre>\n\n<p>In this way you \"touch the DOM\" only one time. </p>\n\n<p><strike>\nI'm not sure if the latest line can be converted into $('#mySelect').html(output.join('')) because I don't know jquery internals (maybe it does some parsing in the html() method)\n</strike></p>\n",
                    "is_accepted": false,
                    "score": 144
                },
                {
                    "body": "<pre><code> var output = [];\n var length = data.length;\n for(var i=0; i &lt; length; i++)\n {\n    output[i++] = '&lt;option value=\"'+ data[i].start +'\"&gt;'+ data[i].start +'&lt;/option&gt;';\n }\n\n $('#choose_schedule').get(0).innerHTML = output.join('');\n</code></pre>\n\n<p>I've done a few tests and this is, I believe does the job the fastest :P</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This looks nicer, provides readability, but is slower than other methods.</p>\n\n<pre><code>$.each(selectData, function(i, option)\n{\n    $(\"&lt;option/&gt;\").val(option.id).text(option.title).appendTo(\"#selectBox\");\n});\n</code></pre>\n\n<p>If you want speed, the fastest (tested!) way is this, using array, not string concatenation, and using only one append call.</p>\n\n<pre><code>auxArr = [];\n$.each(selectData, function(i, option)\n{\n    auxArr[i] = \"&lt;option value='\" + option.id + \"'&gt;\" + option.title + \"&lt;/option&gt;\";\n});\n\n$('#selectBox').append(auxArr.join(''));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>function populateDropdown(select, data) {   \n    select.html('');   \n    $.each(data, function(id, option) {   \n        select.append($('&lt;option&gt;&lt;/option&gt;').val(option.value).html(option.name));   \n    });          \n}   \n</code></pre>\n\n<p>It works well with jQuery 1.4.1.</p>\n\n<p>For complete article for using dynamic lists with ASP.NET MVC &amp; jQuery visit:\n<a href=\"http://www.codecapers.com/post/Dynamic-Select-Lists-with-MVC-and-jQuery.aspx\" rel=\"nofollow\">http://www.codecapers.com/post/Dynamic-Select-Lists-with-MVC-and-jQuery.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>simple way is </p>\n\n<pre><code>$('#SelectId').html(\"&lt;option value='0'&gt;select &lt;/option&gt;&lt;option value='1'&gt;Laguna&lt;/option&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This is slightly faster and cleaner.</p>\n\n<pre><code>$.each(selectValues, function(key, value) {\n    $('#mySelect').append($(\"&lt;option/&gt;\", {\n        value: key,\n        text: value\n    }));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 122
                },
                {
                    "body": "<p>There's an approach using the <a href=\"http://wiki.github.com/nje/jquery/jquery-templates-proposal\">Microsoft Templating approach</a> that's currently under proposal for inclusion into jQuery core. There's more power in using the templating so for the simplest scenario it may not be the best option. For more details see Scott Gu's post outlining the features.</p>\n\n<p>First include the templating js file, available from <a href=\"http://github.com/jquery/jquery-tmpl\">github</a>.</p>\n\n<pre><code>&lt;script src=\"Scripts/jquery.tmpl.js\" type=\"text/javascript\" /&gt;\n</code></pre>\n\n<p>Next set-up a template</p>\n\n<pre><code>&lt;script id=\"templateOptionItem\" type=\"text/html\"&gt;\n    &lt;option value=\\'{{= Value}}\\'&gt;{{= Text}}&lt;/option&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>Then with your data call the .render() method</p>\n\n<pre><code>var someData = [\n    { Text: \"one\", Value: \"1\" },\n    { Text: \"two\", Value: \"2\" },\n    { Text: \"three\", Value: \"3\"}];\n\n$(\"#templateOptionItem\").render(someData).appendTo(\"#mySelect\");\n</code></pre>\n\n<p>I've <a href=\"http://blog.nick.josevski.com/2010/07/08/using-jquery-templates-to-appendto-an-option-on-a-select-list-via-render/\">blogged</a> this approach in more detail.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can just iterate over your json array with the following code</p>\n\n<p><code>$('&lt;option/&gt;').attr(\"value\",\"someValue\").text(\"Option1\").appendTo(\"#my-select-id\");</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A compromise of sorts between the top two answers, in a \"one-liner\":</p>\n\n<pre><code>$.fn.append.apply($('mySelect'),\n    $.map(selectValues, function(val, idx) {\n        return $(\"&lt;option/&gt;\")\n            .val(val.key)\n            .text(val.value);\n    })\n);\n</code></pre>\n\n<p>Builds up an array of Option elements using <a href=\"http://api.jquery.com/jQuery.map/\" rel=\"nofollow\">map</a> and then appends them all to the Select at once by using <code>apply</code> to send each Option as a separate argument on the <code>append</code> function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>A jQuery plugin could be found here: <a href=\"http://remysharp.com/2007/01/20/auto-populating-select-boxes-using-jquery-ajax/\" rel=\"nofollow\">http://remysharp.com/2007/01/20/auto-populating-select-boxes-using-jquery-ajax/</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>jQuery</p>\n\n<pre><code>var list = $(\"#selectList\");\n$.each(items, function(index, item) {\n  list.append(new Option(item.text, item.value));\n});\n</code></pre>\n\n<p>pure javascript</p>\n\n<pre><code>var list = document.getElementById(\"selectList\");\nfor(var i in items) {\n  list.add(new Option(items[i].text, items[i].value));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Be forwarned... I am using jQuery Mobile 1.0b2 with PhoneGap 1.0.0 on an Android 2.2 (Cyanogen 7.0.1) phone (T-Mobile G2) and could not get the .append() method to work at all.  I had to use .html() like follows:</p>\n\n<pre><code>var options;\n$.each(data, function(index, object) {\n    options += '&lt;option value=\"' + object.id + '\"&gt;' + object.stop + '&lt;/option&gt;';\n});\n\n$('#selectMenu').html(options);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I found that this is simple and works great.    </p>\n\n<pre><code>for (var i = 0; i &lt; array.length; i++) {\n    $('#clientsList').append($(\"&lt;option&gt;&lt;/option&gt;\").text(array[i].ClientName).val(array[i].ID));\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>that's what i did with two-dimensional array: first column is item i add to <code>innerHTML</code> of the <code>&lt;option&gt;</code>, second column is record_id i add to the <code>value</code> of the <code>&lt;option&gt;</code>:</p>\n\n<ol>\n<li><p>PHP</p>\n\n<pre><code>$items = $dal-&gt;get_new_items(); //gets data from the db\n$items_arr = array();\n$i = 0;\nforeach ($items as $item)\n{\n    $first_name = $item-&gt;first_name;\n    $last_name = $item-&gt;last_name;\n    $date = $item-&gt;date;\n    $show = $first_name . \" \" . $last_name . \", \" . $date;\n    $request_id = $request-&gt;request_id;\n    $items_arr[0][$i] = $show;\n    $items_arr[1][$i] = $request_id;\n    $i++;\n    }\n\n    echo json_encode($items_arr);\n</code></pre></li>\n<li><p>JS/AJAX</p>\n\n<pre><code>function ddl_items(){\nif (window.XMLHttpRequest){\n    // code for IE7+, Firefox, Chrome, Opera, Safari\n    xmlhttp=new XMLHttpRequest();\n}\nelse{\n    // code for IE6, IE5\n    xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\n\nxmlhttp.onreadystatechange=function(){\nif (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200){\n    var arr = JSON.parse(xmlhttp.responseText);\n    var lstbx = document.getElementById('my_listbox');\n\n    for (var i=0; i&lt;arr.length; i++) {\n            var option = new Option(arr[0][i], arr[1][i]);\n            lstbx.options.add(option);\n        }\n    }\n};\n\n    xmlhttp.open(\"GET\",\"Code/get_items.php?dummy_time=\"+new Date().getTime()+\"\",true);\n    xmlhttp.send();\n    }\n   }\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's a sorting problem with this solution in Chrome (jQuery 1.7.1) (Chrome sorts object properties by name/number?)\nSo to keep the order (yes, it's object abusing), I changed this:</p>\n\n<pre><code>optionValues0 = {\"4321\": \"option 1\", \"1234\": \"option 2\"};\n</code></pre>\n\n<p>to this</p>\n\n<pre><code>optionValues0 = {\"1\": {id: \"4321\", value: \"option 1\"}, \"2\": {id: \"1234\", value: \"option 2\"}};\n</code></pre>\n\n<p>and then the $.each will look like:</p>\n\n<pre><code>$.each(optionValues0, function(order, object) {\n  key = object.id;\n  value = object.value;\n  $('#mySelect').append($('&lt;option&gt;', { value : key }).text(value));\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Although the above are all valid answers - it might be advisable to append all these to a documentFragmnet first, then append that document fragment as an elemet after...</p>\n\n<p>see <a href=\"http://ejohn.org/blog/dom-documentfragments/\" rel=\"nofollow\">John Resig's thoughts on the matter..</a></p>\n\n<p>Something along the lines of:</p>\n\n<pre><code>var frag = document.createDocumentFragment();\n\nfor(item in data.Events)\n{\n   var option = document.createElement(\"option\");\n\n   option.setAttribute(\"value\", data.Events[item].Key);\n   option.innerText = data.Events[item].Value;\n\n   frag.appendChild(option);\n}\neventDrop.empty();\neventDrop.append(frag);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>@joshperry</p>\n\n<p>It seems that plain <strong>.append</strong> also works as expected,</p>\n\n<pre><code>$(\"mySelect\").append(\n  $.map(selectValues, function(v,k){\n\n    return $(\"&lt;option&gt;\").val(k).text(v);\n  })\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Yet another way of doing it:</p>\n\n<pre><code>var options = [];    \n$.each(selectValues, function(key, value) {\n    options.push($(\"&lt;option/&gt;\", {\n        value: key,\n        text: value\n    }));\n});\n$('#mySelect').append(options);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>if (data.length != 0) {\n    var opts = \"\";\n    for (i in data)\n        opts += \"&lt;option value='\"+data[i][value]+\"'&gt;\"+data[i][text]+\"&lt;/option&gt;\";\n\n    $(\"#myselect\").empty().append(opts);\n}\n</code></pre>\n\n<p>This manipulates the DOM only once after first building a giant string.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>All of these answers seem unnecessarily complicated.  All you need is:</p>\n\n<pre><code>var options = $('#mySelect').get(0).options;\n$.each(selectValues, function(key, value) {\n        options[options.length] = new Option(key, value);\n});\n</code></pre>\n\n<p>That is completely cross browser compatible.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<ol>\n<li><code>$.each</code> is slower then <code>for</code> loop</li>\n<li>Each time dom selection is not best practice in loop <code>$(\"#mySelect\").append();</code></li>\n</ol>\n\n<p>So best solution is following</p>\n\n<p>if json data <code>resp</code> is</p>\n\n<pre><code>    [\n        {\"id\":\"0001\",\"name\":\"Mr. P\"},\n        {\"id\":\"0003\",\"name\":\"Mr. Q\"},\n        {\"id\":\"0054\",\"name\":\"Mr. R\"},\n        {\"id\":\"0061\",\"name\":\"Mr. S\"}\n    ]\n</code></pre>\n\n<p>use it as</p>\n\n<pre><code>    var option = \"\";\n    for (i=0; i&lt;resp.length; i++) {\n        option += \"&lt;option value='\"+resp[i].id+\"'&gt;\"+resp[i].name+\"&lt;/option&gt;\";\n    }\n    $('#mySelect').html(option);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the best method for adding options to a select from a JSON object using jQuery?</p>\n\n<p>I'm looking for something that I don't need a plugin to do, but would also be interested in the plugins that are out there.</p>\n\n<p>This is what I did:</p>\n\n<pre><code>selectValues = { \"1\": \"test 1\", \"2\": \"test 2\" };\n\nfor (key in selectValues) {\n  if (typeof (selectValues[key] == 'string') {\n    $('#mySelect').append('&lt;option value=\"' + key + '\"&gt;' + selectValues[key] + '&lt;/option&gt;');\n  }\n}\n</code></pre>\n\n<p><strong>A clean/simple solution:</strong></p>\n\n<p>This is a cleaned up and simplified <a href=\"http://stackoverflow.com/questions/170986/what-is-the-best-way-to-add-options-to-a-select-from-an-array-with-jquery/171007#171007\">version of matdumsa's</a>:</p>\n\n<pre><code>$.each(selectValues, function(key, value) {   \n     $('#mySelect')\n          .append($('&lt;option&gt;', { value : key })\n          .text(value)); \n});\n</code></pre>\n\n<p>Changes from matdumsa's: (1) removed the close tag for the option inside append() and (2) moved the properties/attributes into an map as the second parameter of append().</p>\n",
            "last_activity_date": 1421559556,
            "question_id": 170986,
            "score": 604,
            "tags": [
                "javascript",
                "jquery",
                "arrays",
                "html-select"
            ],
            "title": "What is the best way to add options to a select from an array with jQuery?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>Try the following</p>\n\n<pre><code>function findById(source, id) {\n  for (var i = 0; i &lt; source.length; i++) {\n    if (source[i].id === id) {\n      return source[i];\n    }\n  }\n  throw \"Couldn't find object with id: \" + id;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>I think the easiest way would be the following, but it won't work on IE8-:</p>\n\n<pre><code>var result = myArray.filter(function(v) {\n    return v.id === '45'; // filter out appropriate one\n})[0].foo; // get result and access foo property\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Iterate over any item in the array. Every item you visit, check that item's id. If it's a match, return it</p>\n\n<p>If you just want teh codez:</p>\n\n<pre><code>function getId(array, id) {\n    for (var i = 0, len = array.length; i &lt; len; i++) {\n        if (array[i].id === id) {\n            return array[i];\n        }\n    }\n    return null; //nothing found\n}\n</code></pre>\n\n<p>And the same thing using ES5's Array methods:</p>\n\n<pre><code>function getId(array, id) {\n    var obj = array.filter(function (val) {\n        return val.id === id;\n    });\n    //filter returns an array, and we just want the matching item\n    return obj[0];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can get this easily using the <a href=\"http://api.jquery.com/jQuery.map/\">map()</a> function:</p>\n\n<pre><code>myArray = [{'id':'73','foo':'bar'},{'id':'45','foo':'bar'}];\n\nvar found = $.map(myArray, function(val) {\n    return val.id == 45 ? val.foo : null;\n});\n\n//found[0] == \"bar\";\n</code></pre>\n\n<hr>\n\n<p>working example: <a href=\"http://jsfiddle.net/hunter/Pxaua/\">http://jsfiddle.net/hunter/Pxaua/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Use the filter method of jQuery:</p>\n\n<pre><code> $(myArray).filter(function()\n {\n     return this.id == desiredId;\n }).first();\n</code></pre>\n\n<p>That will return the first element with the specified Id. </p>\n\n<p>It also has the benefit of a nice C# LINQ looking format. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another solution is to create a lookup object:</p>\n\n<pre><code>var lookup = {};\nfor (var i = 0, len = array.length; i &lt; len; i++) {\n    lookup[array[i].id] = array[i];\n}\n\n... now you can use lookup[id]...\n</code></pre>\n\n<p>This is especially interesting if you need to do many lookups.</p>\n\n<p>This won't need much more memory since the IDs and objects will be shared.</p>\n",
                    "is_accepted": false,
                    "score": 155
                },
                {
                    "body": "<p>As you are already using jQuery, you can use the <a href=\"http://api.jquery.com/jQuery.grep/\">grep</a> function which is intended for searching an array:</p>\n\n<pre><code>var result = $.grep(myArray, function(e){ return e.id == id; });\n</code></pre>\n\n<p>The result is an array with the items found. If you know that the object is always there and that it only occurs once, you can just use <code>result[0].foo</code> to get the value. Otherwise you should check the length of the resulting array. Example:</p>\n\n<pre><code>if (result.length == 0) {\n  // not found\n} else if (result.length == 1) {\n  // access the foo property using result[0].foo\n} else {\n  // multiple items found\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 595
                },
                {
                    "body": "<p>A generic and more flexible version of the findById function above:</p>\n\n<pre><code>// array = [{key:value},{key:value}]\nfunction objectFindByKey(array, key, value) {\n    for (var i = 0; i &lt; array.length; i++) {\n        if (array[i][key] === value) {\n            return array[i];\n        }\n    }\n    return null;\n}\n\nvar array = [{'id':'73','foo':'bar'},{'id':'45','foo':'bar'}];\nvar result_obj = objectFindByKey(array, 'id', '45');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You may try out Sugarjs from <a href=\"http://sugarjs.com/\" rel=\"nofollow\">http://sugarjs.com/</a>.</p>\n\n<p>It has a very sweet .find method on Arrays.\nSo you can find an element like this:</p>\n\n<pre><code>array.find( {id: 75} );\n</code></pre>\n\n<p>you may also pass an object with more properties to it to add another \"where-clause\"</p>\n\n<p><em>Note that Sugarjs extends native objects, Some people consider this very evil...</em></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://underscorejs.org/#find\">Underscore.js</a> has a nice method for that:</p>\n\n<pre><code>myArray = [{'id':'73','foo':'bar'},{'id':'45','foo':'bar'},etc.]\nobj = _.find(myArray, function(obj) { return obj.id == '45' })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<pre><code>var retObj ={};\n$.each(ArrayOfObjects, function (index, obj) {\n\n        if (obj.id === '5') { // id.toString() if it is int  \n\n            retObj = obj;\n            return false;\n        }\n    });\nreturn retObj;\n</code></pre>\n\n<p>It shoud return object by id.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use filters,</p>\n\n<pre><code>  function getById(id, myArray) {\n    return myArray.filter(function(obj) {\n      if(obj.id == id) {\n        return obj \n      }\n    })[0]\n  }\n\nget_my_obj = getById(73, myArray);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I don't know when the <code>find</code>-method was added or if it's just an unknown feature, but</p>\n\n<pre><code>myArray.find(function (e) {\n    return e.id === 45;\n}).foo;\n\n// bar\n</code></pre>\n\n<p>works without external libraries.\nIt seems to me the simplest solution, I wonder why, in two years nobody has proposed it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As long as the browser supports ECMA-262, 5th edition, this should work, almost one-liner</p>\n\n<pre><code>var bFound = myArray.some(function (obj) {\n   return obj.id === 45;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Starting from <a href=\"http://stackoverflow.com/a/22943874/714240\">aggaton's answer</a>, this is a function that actually returns the wanted element (or <code>null</code> if not found), given the <code>array</code> and a <code>callback</code> function that returns a truthy value for the \"correct\" element:</p>\n\n<pre><code>function findElement(array, callback) {\n    var elem;\n    return array.some(function(e) {\n        if (callback(e)) {\n            elem = e;\n            return true;\n        }\n    }) ? elem : null;\n});\n</code></pre>\n\n<p>Just remember that this doesn't natively work on IE8-, as it doesn't support <code>some</code>. A polyfill can be provided, alternatively there's always the classic <code>for</code> loop:</p>\n\n<pre><code>function findElement(array, callback) {\n    for (var i = 0; i &lt; array.length; i++)\n        if (callback(array[i])) return array[i];\n    return null;\n});\n</code></pre>\n\n<p>It's actually faster and more compact. But if you don't want to reinvent the wheel, I suggest using an utility library like underscore or lodash.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>fine\uff0cthis solution may helpful as well:  </p>\n\n<pre><code>Array.prototype.grep = function (key, value) {\n    var that = this, ret = [];\n    this.forEach(function (elem, index) {\n        if (elem[key] === value) {\n            ret.push(that[index]);\n        }\n    });\n    return ret.length &lt; 2 ? ret[0] : ret;\n};\nvar bar = myArray.grep(\"id\",\"45\");\n</code></pre>\n\n<p>I made it just like $.grep and if 1 object is find out, <em>function</em> will return the object,rather than an array.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Building on the accepted answer</p>\n\n<p>jquery:</p>\n\n<pre><code>var foo = $.grep(myArray, function(e){ return e.id === foo_id})\nmyArray.pop(foo)\n</code></pre>\n\n<p>or coffeescript:</p>\n\n<pre><code>foo = $.grep myArray, (e) -&gt; e.id == foo_id\nmyArray.pop foo\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can do this even in pure javascript. by using the in built \"filter\" function for arrays.</p>\n\n<pre><code>Array.prototype.filterObjects = function(key, value) {\n    return this.filter(function(x) { return x[key] === value; })\n}\n</code></pre>\n\n<p>So now simply pass \"id\" in place of key and \"45\" in place of value, and you will get the full object matching an id of 45. So that would be,</p>\n\n<pre><code>myArr.filterObjects(\"id\", \"45\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I really liked the answer provided by Aaron Digulla but needed to keep my array of objects so I could iterate through it later.  So I modified it to </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>\tvar indexer = {};\r\n\tfor (var i = 0; i &lt; array.length; i++) {\r\n\t    indexer[array[i].id] = parseInt(i);\r\n\t}\r\n\t\r\n\t//Then you can access object properties in your array using \r\n\tarray[indexer[id]].property</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using <strong><a href=\"https://github.com/abdennour/spl/tree/master/spl/JS-ORMQuery\" rel=\"nofollow\">ORMQuery</a></strong> Library which is a JS Library, prepares the data access layer after running this instruction : </p>\n\n<pre><code> ORMQuery.addDB(myArray); \n</code></pre>\n\n<p>then </p>\n\n<h1>Your Need :</h1>\n\n<pre><code>  var obj=Object.findBy('id','45')\n</code></pre>\n\n<p>or </p>\n\n<pre><code>  var obj=Object.get('45') //as the default id is 'id' property \n</code></pre>\n\n<p>then : </p>\n\n<pre><code>println (obj.foo) \n//bar\n</code></pre>\n\n<hr>\n\n<h2>NOTE: It is recommended to not use Literal Objects  . example :</h2>\n\n<pre><code> function CustomClass(a,b){this.id=a;this.foo=b;return this;} ;\n//then\n myArray=[new CustomClass('45','bar'),...]\n//then :\n\n CustomClass.findBy('id',''45)\n</code></pre>\n\n<h2>Anywhy , Take this <a href=\"http://jsfiddle.net/abdennour/8ncqkgnw/1/\" rel=\"nofollow\">fiddle</a> :</h2>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Shortest,</p>\n\n<pre><code>var theAnswerObj = _.findWhere(array, {id : 42});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's how I'd go about it in pure JavaScript, in the most minimal manner I can think of that works in ES3+. Returns as soon as a match is found.</p>\n\n<pre><code>var getKeyValueById = function(array, key, id){\n    var testArray = array.slice(), test;\n    while(test = testArray.pop()) {\n        if (test.id === id) return test[key]\n    }\n    // return undefined if no matching id is found in array\n    return;\n}\n\nvar myArray = [{'id':'73','foo':'bar'},{'id':'45','foo':'bar'}]\nvar result = getKeyValueById(myArray, 'foo','45'); \n\n// result is 'bar', obtained from object with id of '45'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Consider \"axesOptions\" to be array of objects with an object format being\n{:field_type => 2, :fields => [1,3,4]}</p>\n\n<pre><code>function getFieldOptions(axesOptions,choice){\n  var fields=[]\n  axesOptions.each(function(item){\n    if(item.field_type == choice)\n        fields= hashToArray(item.fields)\n  });\n  return fields;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've got an array:</p>\n\n<pre><code>myArray = [{'id':'73','foo':'bar'},{'id':'45','foo':'bar'}, etc.]\n</code></pre>\n\n<p>I'm unable to change the structure of the array. I'm being passed an id of <code>45</code>, and I want to get <code>'bar'</code> for that object in the array. </p>\n\n<p>How do I do this in JavaScript or using jQuery?</p>\n",
            "last_activity_date": 1425449166,
            "question_id": 7364150,
            "score": 330,
            "tags": [
                "javascript",
                "jquery",
                "arrays"
            ],
            "title": "Find object by id in array of javascript objects"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>Try</p>\n\n<pre><code>if (!window.console) console = ...\n</code></pre>\n\n<p>An undefined variable cannot be referred directly. However, all global variables are attributes of the same name of the global context (<code>window</code> in case of browsers), and accessing an undefined attribute is fine.</p>\n",
                    "is_accepted": true,
                    "score": 300
                },
                {
                    "body": "<p>In my scripts, I either use the shorthand:</p>\n\n<pre><code>window.console &amp;&amp; console.log(...) // only log if the function exists\n</code></pre>\n\n<p>or, if it's not possible or feasible  to edit every console.log line, I create a fake console:</p>\n\n<pre><code>// check to see if console exists. If not, create an empty object for it,\n// then create and empty logging function which does nothing. \n//\n// REMEMBER: put this before any other console.log calls\n!window.console &amp;&amp; (window.console = {} &amp;&amp; window.console.log = function () {});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Another alternative is the <code>typeof</code> operator:</p>\n\n<pre><code>if (typeof console == \"undefined\") {\n    this.console = {log: function() {}};\n}\n</code></pre>\n\n<p>Yet another alternative is to use a logging library, such as my own <a href=\"http://log4javascript.org/\">log4javascript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>You can use console.log(...) directly in Firefox but not in IEs. In IEs you have to use window.console.</p>\n",
                    "is_accepted": false,
                    "score": -8
                },
                {
                    "body": "<p>You can use <code>console.log()</code> if you have <code>Developer Tools</code> in IE8 opened and also you can use the <code>Console</code> textbox on script tab.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>    // a simple\n    if(console) {\n        console.log(\"blah blah blah ...\");\n    }\n\n    /*\n     * use .error() to attach error handlers and whenever\n     * an error occurs it will automatically logged to the console\n     * by jquery if you are using one\n     * whenever an error occurs, see bellow.\n     */\n    $('jQuery_selector').error(function(){\n        // and your error handling code here\n    });\n</code></pre>\n\n<p>For .error() reference visit <a href=\"http://api.jquery.com/error/\" rel=\"nofollow\">http://api.jquery.com/error/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm using <a href=\"http://icant.co.uk/sandbox/fauxconsole/\" rel=\"nofollow\">fauxconsole</a>; I modified the css a bit so that it looks nicer but works very well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In IE9, if console is not opened, this code:</p>\n\n<pre><code>alert(typeof console);\n</code></pre>\n\n<p>will show \"object\", but this code</p>\n\n<pre><code>alert(typeof console.log);\n</code></pre>\n\n<p>will throw TypeError exception, but not return undefined value;</p>\n\n<p>So, guaranteed version of code will look similar to this:</p>\n\n<pre><code>try {\n    if (window.console &amp;&amp; window.console.log) {\n        my_console_log = window.console.log;\n    }\n} catch (e) {\n    my_console_log = function() {};\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>if (typeof console == \"undefined\") {\n  this.console = {\n    log: function() {},\n    info: function() {},\n    error: function() {},\n    warn: function() {}\n  };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Paste the following at the top of your JavaScript (before using the console):</p>\n\n<pre><code>/**\n * Protect window.console method calls, e.g. console is not defined on IE\n * unless dev tools are open, and IE doesn't define console.debug\n */\n(function() {\n  if (!window.console) {\n    window.console = {};\n  }\n  // union of Chrome, FF, IE, and Safari console methods\n  var m = [\n    \"log\", \"info\", \"warn\", \"error\", \"debug\", \"trace\", \"dir\", \"group\",\n    \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\", \"profile\", \"profileEnd\",\n    \"dirxml\", \"assert\", \"count\", \"markTimeline\", \"timeStamp\", \"clear\"\n  ];\n  // define undefined methods as noops to prevent errors\n  for (var i = 0; i &lt; m.length; i++) {\n    if (!window.console[m[i]]) {\n      window.console[m[i]] = function() {};\n    }    \n  } \n})();\n</code></pre>\n\n<p>The function closure wrapper is to scope the variables as to not define any variables. This guards against both undefined <code>console</code> and undefined <code>console.debug</code> (and other missing methods).</p>\n",
                    "is_accepted": false,
                    "score": 215
                },
                {
                    "body": "<p>You can use the below to give an extra degree of insurance that you've got all bases covered.  Using <code>typeof</code> first will avoid any <code>undefined</code> errors.  Using <code>===</code> will also ensure that the name of the type is actually the string \"undefined\".  Finally, you'll want to add a parameter to the function signature (I chose <code>logMsg</code> arbitrarily) to ensure consistency, since you do pass whatever you want printed to the console to the log function.  This also keep you intellisense accurate and avoids any warnings/errors in your JS aware IDE.</p>\n\n<pre><code>if(!window.console || typeof console === \"undefined\") {\n  var console = { log: function (logMsg) { } };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For debugging in IE, check out this <a href=\"http://log4javascript.org/\" rel=\"nofollow\">log4javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For IE8 or console support limited to console.log (no debug, trace, ...) you can do the following:</p>\n\n<ul>\n<li><p>If console OR console.log undefined: Create dummy functions for\nconsole functions (trace, debug, log, ...)</p>\n\n<p><code>window.console = {\n      debug : function() {}, ...};</code></p></li>\n<li><p>Else if console.log is defined (IE8) AND console.debug (any other) is not defined: redirect all logging functions to console.log, this allows to keep those logs !</p>\n\n<p><code>window.console = {\n          debug : window.console.log, ...};</code></p></li>\n</ul>\n\n<p>Not sure about the assert support in various IE versions, but any suggestions are welcome. Also posted this answer here: <a href=\"http://stackoverflow.com/questions/2656730/internet-explorer-console/\">Internet Explorer Console</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For a more robust solution, use this piece of code (taken from twitter's source code):</p>\n\n<pre><code>// Avoid `console` errors in browsers that lack a console.\n(function() {\n    var method;\n    var noop = function () {};\n    var methods = [\n        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n        'timeStamp', 'trace', 'warn'\n    ];\n    var length = methods.length;\n    var console = (window.console = window.console || {});\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Based on two previous answers by</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/a/16916941/253468\">Vin\u00edcius Moraes</a></li>\n<li><a href=\"http://stackoverflow.com/a/13817235/253468\">Peter Tseng</a></li>\n</ul>\n\n<p>and the documentations for</p>\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ie/hh772169%28v=vs.85%29.aspx#methods\" rel=\"nofollow\">Internet Explorer (IE 10)</a></li>\n<li><a href=\"https://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html#//apple_ref/doc/uid/TP40007874-CH8-SW20\" rel=\"nofollow\">Safari (2012. 07. 23.)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" rel=\"nofollow\">Firefox (2013. 05. 20.)</a></li>\n<li><a href=\"https://developers.google.com/chrome-developer-tools/docs/console-api\" rel=\"nofollow\">Chrome (2013. 01. 25.)</a> and <a href=\"https://developers.google.com/web-toolkit/speedtracer/logging-api\" rel=\"nofollow\">Chrome (2012. 10. 04.)</a></li>\n<li>and some of my knowledge</li>\n</ul>\n\n<p>Here's a best effort implementation for the issue, meaning if there's a console.log which actually exists, it fills in the gaps for non-existing methods via console.log.</p>\n\n<p>For example for IE6/7 you can replace logging with alert (stupid but works) and then include the below monster (I called it console.js):\n[Feel free to remove comments as you see fit, I left them in for reference, a minimizer can tackle them]:</p>\n\n<pre><code>&lt;!--[if lte IE 7]&gt;\n&lt;SCRIPT LANGUAGE=\"javascript\"&gt;\n    (window.console = window.console || {}).log = function() { return window.alert.apply(window, arguments); };\n&lt;/SCRIPT&gt;\n&lt;![endif]--&gt;\n&lt;script type=\"text/javascript\" src=\"console.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>and console.js:</p>\n\n<pre><code>    /**\n     * Protect window.console method calls, e.g. console is not defined on IE\n     * unless dev tools are open, and IE doesn't define console.debug\n     */\n    (function() {\n        var console = (window.console = window.console || {});\n        var noop = function () {};\n        var log = console.log || noop;\n        var start = function(name) { return function(param) { log(\"Start \" + name + \": \" + param); } };\n        var end = function(name) { return function(param) { log(\"End \" + name + \": \" + param); } };\n\n        var methods = {\n            // Internet Explorer (IE 10): http://msdn.microsoft.com/en-us/library/ie/hh772169(v=vs.85).aspx#methods\n            // assert(test, message, optionalParams), clear(), count(countTitle), debug(message, optionalParams), dir(value, optionalParams), dirxml(value), error(message, optionalParams), group(groupTitle), groupCollapsed(groupTitle), groupEnd([groupTitle]), info(message, optionalParams), log(message, optionalParams), msIsIndependentlyComposed(oElementNode), profile(reportName), profileEnd(), time(timerName), timeEnd(timerName), trace(), warn(message, optionalParams)\n            // \"assert\", \"clear\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"group\", \"groupCollapsed\", \"groupEnd\", \"info\", \"log\", \"msIsIndependentlyComposed\", \"profile\", \"profileEnd\", \"time\", \"timeEnd\", \"trace\", \"warn\"\n\n            // Safari (2012. 07. 23.): https://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html#//apple_ref/doc/uid/TP40007874-CH8-SW20\n            // assert(expression, message-object), count([title]), debug([message-object]), dir(object), dirxml(node), error(message-object), group(message-object), groupEnd(), info(message-object), log(message-object), profile([title]), profileEnd([title]), time(name), markTimeline(\"string\"), trace(), warn(message-object)\n            // \"assert\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"group\", \"groupEnd\", \"info\", \"log\", \"profile\", \"profileEnd\", \"time\", \"markTimeline\", \"trace\", \"warn\"\n\n            // Firefox (2013. 05. 20.): https://developer.mozilla.org/en-US/docs/Web/API/console\n            // debug(obj1 [, obj2, ..., objN]), debug(msg [, subst1, ..., substN]), dir(object), error(obj1 [, obj2, ..., objN]), error(msg [, subst1, ..., substN]), group(), groupCollapsed(), groupEnd(), info(obj1 [, obj2, ..., objN]), info(msg [, subst1, ..., substN]), log(obj1 [, obj2, ..., objN]), log(msg [, subst1, ..., substN]), time(timerName), timeEnd(timerName), trace(), warn(obj1 [, obj2, ..., objN]), warn(msg [, subst1, ..., substN])\n            // \"debug\", \"dir\", \"error\", \"group\", \"groupCollapsed\", \"groupEnd\", \"info\", \"log\", \"time\", \"timeEnd\", \"trace\", \"warn\"\n\n            // Chrome (2013. 01. 25.): https://developers.google.com/chrome-developer-tools/docs/console-api\n            // assert(expression, object), clear(), count(label), debug(object [, object, ...]), dir(object), dirxml(object), error(object [, object, ...]), group(object[, object, ...]), groupCollapsed(object[, object, ...]), groupEnd(), info(object [, object, ...]), log(object [, object, ...]), profile([label]), profileEnd(), time(label), timeEnd(label), timeStamp([label]), trace(), warn(object [, object, ...])\n            // \"assert\", \"clear\", \"count\", \"debug\", \"dir\", \"dirxml\", \"error\", \"group\", \"groupCollapsed\", \"groupEnd\", \"info\", \"log\", \"profile\", \"profileEnd\", \"time\", \"timeEnd\", \"timeStamp\", \"trace\", \"warn\"\n            // Chrome (2012. 10. 04.): https://developers.google.com/web-toolkit/speedtracer/logging-api\n            // markTimeline(String)\n            // \"markTimeline\"\n\n            assert: noop, clear: noop, trace: noop, count: noop, timeStamp: noop, msIsIndependentlyComposed: noop,\n            debug: log, info: log, log: log, warn: log, error: log,\n            dir: log, dirxml: log, markTimeline: log,\n            group: start('group'), groupCollapsed: start('groupCollapsed'), groupEnd: end('group'),\n            profile: start('profile'), profileEnd: end('profile'),\n            time: start('time'), timeEnd: end('time')\n        };\n\n        for (var method in methods) {\n            if ( methods.hasOwnProperty(method) &amp;&amp; !(method in console) ) { // define undefined methods as best-effort methods\n                console[method] = methods[method];\n            }\n        }\n    })();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>After having oh so many problems with this thing (it's hard to debug the error since if you open the developer console the error no longer happens!) I decided to make an overkill code to never have to bother with this ever again:</p>\n\n<pre><code>if (typeof window.console === \"undefined\")\n    window.console = {};\n\nif (typeof window.console.debug === \"undefined\")\n    window.console.debug= function() {};\n\nif (typeof window.console.log === \"undefined\")\n    window.console.log= function() {};\n\nif (typeof window.console.error === \"undefined\")\n    window.console.error= function() {alert(\"error\");};\n\nif (typeof window.console.time === \"undefined\")\n    window.console.time= function() {};\n\nif (typeof window.console.trace === \"undefined\")\n    window.console.trace= function() {};\n\nif (typeof window.console.info === \"undefined\")\n    window.console.info= function() {};\n\nif (typeof window.console.timeEnd === \"undefined\")\n    window.console.timeEnd= function() {};\n\nif (typeof window.console.group === \"undefined\")\n    window.console.group= function() {};\n\nif (typeof window.console.groupEnd === \"undefined\")\n    window.console.groupEnd= function() {};\n\nif (typeof window.console.groupCollapsed === \"undefined\")\n    window.console.groupCollapsed= function() {};\n\nif (typeof window.console.dir === \"undefined\")\n    window.console.dir= function() {};\n\nif (typeof window.console.warn === \"undefined\")\n    window.console.warn= function() {};\n</code></pre>\n\n<p>Personaly I only ever use console.log and console.error, but this code handles all the other functions as shown in the Mozzila Developer Network: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/console</a>.\nJust put that code on the top of your page and you are done forever with this.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am only using console.log in my code.  So I include a very short 2 liner</p>\n\n<pre><code>var console = console || {};\nconsole.log = console.log || function(){};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>console = console || { \n    debug: function(){}, \n    log: function(){}\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Sometimes console will work in IE8/9 but fail at other times. This erratic behaviour depends on whether you have developer tools open and is described in stackoverflow question <a href=\"http://stackoverflow.com/a/5473193/2732969\">Does IE9 support console.log, and is it a real function?</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Noticed that OP is using Firebug with IE, so assume it's <a href=\"https://getfirebug.com/firebuglite\" rel=\"nofollow\">Firebug Lite</a>.  This is a funky situation as console gets defined in IE when the debugger window is opened, but what happens when Firebug is already running?  Not sure, but perhaps the \"firebugx.js\" method might be a good way to test in this situation:</p>\n\n<p>source:</p>\n\n<p><a href=\"https://code.google.com/p/fbug/source/browse/branches/firebug1.2/lite/firebugx.js?r=187\" rel=\"nofollow\">https://code.google.com/p/fbug/source/browse/branches/firebug1.2/lite/firebugx.js?r=187</a></p>\n\n<pre><code>    if (!window.console || !console.firebug) {\n        var names = [\n            \"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\",\n            \"dir\",\"dirxml\",\"group\",\"groupEnd\",\"time\",\"timeEnd\",\n            \"count\",\"trace\",\"profile\",\"profileEnd\"\n        ];\n        window.console = {};\n        for (var i = 0; i &lt; names.length; ++i)\n            window.console[names[i]] = function() {}\n    }\n</code></pre>\n\n<p>(updated links 12/2014)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Encountered similar problem running console.log in child windows in IE9, created by window.open function. </p>\n\n<p>It seems that in this case console is defined only in parent window and is undefined in child windows until you refresh them. Same applies to children of child windows. </p>\n\n<p>I deal with this issue by wrapping log in next function (below is fragment of module)</p>\n\n<pre><code>getConsole: function()\n    {\n        if (typeof console !== 'undefined') return console;\n\n        var searchDepthMax = 5,\n            searchDepth = 0,\n            context = window.opener;\n\n        while (!!context &amp;&amp; searchDepth &lt; searchDepthMax)\n        {\n            if (typeof context.console !== 'undefined') return context.console;\n\n            context = context.opener;\n            searchDepth++;\n        }\n\n        return null;\n    },\n    log: function(message){\n        var _console = this.getConsole();\n        if (!!_console) _console.log(message);\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm using Firebug and have some statements like:</p>\n\n<pre><code>console.log(\"...\");\n</code></pre>\n\n<p>in my page. In IE8 (probably earlier versions too) I get script errors saying 'console' is undefined. I tried putting this at the top of my page:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    if (!console) console = {log: function() {}};\n&lt;/script&gt;\n</code></pre>\n\n<p>still I get the errors. Any way to get rid of the errors?</p>\n",
            "last_activity_date": 1418326473,
            "question_id": 3326650,
            "score": 277,
            "tags": [
                "javascript",
                "internet-explorer",
                "internet-explorer-8",
                "firebug"
            ],
            "title": "&#39;console&#39; is undefined error for Internet Explorer"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Using <code>$('#myDiv').click(function(){</code> is <strong>better</strong> as it follows standard event registration model. (jQuery <a href=\"https://github.com/jquery/jquery/blob/6e995583a11b63bf1d94142da6408955ee93e7cc/src/event.js#L97-102\">internally</a> uses <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\"><code>addEventListener</code></a> and <a href=\"http://msdn.microsoft.com/en-us/library/ie/ms536343%28v=vs.85%29.aspx\"><code>attachEvent</code></a>). </p>\n\n<p>Basically registering an event in <a href=\"http://www.quirksmode.org/js/events_advanced.html\">modern way</a> is the <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusive</a> way of handling events. Also to register more than one event listener for the target you can call <code>addEventListener()</code> for the same target. </p>\n\n<pre><code>var myEl = document.getElementById('myelement');\n\nmyEl.addEventListener('click', function() {\n    alert('Hello world');\n}, false);\n\nmyEl.addEventListener('click', function() {\n    alert('Hello world again!!!');\n}, false);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/aj55x/1/\">http://jsfiddle.net/aj55x/1/</a> </p>\n\n<blockquote>\n  <p><strong><a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener#Why_use_addEventListener.3F\">Why use addEventListener?</a></strong> (From MDN)</p>\n  \n  <p>addEventListener is the way to register an event listener as specified\n  in W3C DOM. Its benefits are as follows:</p>\n  \n  <ul>\n  <li>It allows adding more than a single handler for an event. This is particularly useful for DHTML libraries or Mozilla extensions that\n  need to work well even if other libraries/extensions are used.</li>\n  <li>It gives you finer-grained control of the phase when the listener gets activated (capturing vs. bubbling)</li>\n  <li>It works on any DOM element, not just HTML elements.</li>\n  </ul>\n</blockquote>\n\n<p>More about Modern event registration -> <a href=\"http://www.quirksmode.org/js/events_advanced.html\">http://www.quirksmode.org/js/events_advanced.html</a></p>\n\n<p>Other methods such as setting the <a href=\"https://developer.mozilla.org/en-US/docs/DOM/event#HTML_attribute\">HTML attributes</a> (ex: <code>&lt;button onclick=\"alert('Hello world!')\"&gt;</code>) or <a href=\"https://developer.mozilla.org/en-US/docs/DOM/event#DOM_element_properties\">DOM element properties</a> (ex: <code>myEl.onclick = function(event){alert('Hello world');};</code>) are old and they can be over written easily. </p>\n\n<p><em><strong>HTML attribute</em></strong> should be avoided as It makes the markup bigger and less readable. Concerns of content/structure and behavior are not well-separated, making a bug harder to find.</p>\n\n<p>The problem with the <strong><em>DOM element properties</em></strong> method is that only one event handler can be bound to an element per event.</p>\n\n<p>More about Traditional event handling -> <a href=\"http://www.quirksmode.org/js/events_tradmod.html\">http://www.quirksmode.org/js/events_tradmod.html</a></p>\n\n<p>MDN Reference: <a href=\"https://developer.mozilla.org/en-US/docs/DOM/event\">https://developer.mozilla.org/en-US/docs/DOM/event</a></p>\n",
                    "is_accepted": true,
                    "score": 237
                },
                {
                    "body": "<p>You could combine them, use jQuery to bind the function to the click</p>\n\n<pre><code>&lt;div id=\"myDiv\"&gt;Some Content&lt;/div&gt;\n\n$('#myDiv').click(divFunction);\n\nfunction divFunction(){\n //some code\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The first method is to prefer. It uses the <a href=\"http://www.quirksmode.org/js/events_advanced.html\" rel=\"nofollow\">advanced event registration model[s]</a>, which means you can attach multiple handlers to the same element. You can easily access the event object, and the handler can live in any function's scope. Also, it is dynamic, i.e it can be invoked at any time and is especially well-suited for dynamically generated elements. Whether you use jQuery, an other library or the native methods directly does not really matter.</p>\n\n<p>The second method, using inline attributes, needs a lot of global functions (which leads to namespace pollution) and mixes the content/structure (HTML) with the behavior (JavaScript). Do not use that.</p>\n\n<p>Your question about performance or standards can't be easily answered. The two methods are just completely different, and do different things. The first one is mightier, while the second one is despised (considered bad style).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Most of the time, native JavaScript methods are a better choice over jQuery when performance is the only criteria, but jQuery makes use of JavaScript and makes the development easy. You can use jQuery as it does not degrade performance too much. In your specific case, the difference of performance is ignorable.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Neither one is <em>better</em> in that they may be used for different purposes. <code>onClick</code> (should actually be <code>onclick</code>) performs very slightly better, but I highly doubt you will notice a difference there.</p>\n\n<p>It is worth noting that they do different things: <code>.click</code> can be bound to any jQuery collection whereas <code>onclick</code> has to be used inline on the elements you want it to be bound to. You can also bind only one event to using <code>onclick</code>, whereas <code>.click</code> lets you continue to bind events.</p>\n\n<p>In my opinion, I would be consistent about it and just use <code>.click</code> everywhere and keep <em>all</em> of my JavaScript code together and separated from the HTML.</p>\n\n<p>Don't use <code>onclick</code>. There isn't any reason to use it unless you know what you're doing, and you probably don't.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><code>$('#myDiv').click</code> is better, because it separates JavaScript code from <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"nofollow\">HTML</a>. One must try to keep the page <strong>behaviour and structure different</strong>. This helps a lot.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The first method of using <code>onclick</code> is not jQuery but simply Javascript, so you do not get the overhead of jQuery. The jQuery way can expanded via selectors if you needed to add it to other elements without adding the event handler to each element, but as you have it now it is just a question if you need to use jQuery or not.</p>\n\n<p>Personally since you are using jQuery I would stick with it as it is consistent and does decouple the markup from the script.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Well, one of the main ideas behind <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a> is to separate JavaScript from the nasty <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"nofollow\">HTML</a> code. The first method is the way to go.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For better performance, use the native JavaScript. For faster development, use jQuery. Check the comparison in performance at <em><a href=\"http://jsperf.com/jquery-vs-native-element-performance\">jQuery vs Native Element Performance</a></em>.</p>\n\n<p>I've done a test in Firefox 16.0 32-bit on Windows Server 2008 R2 / 7 64-bit</p>\n\n<pre><code>$('span'); // 6,604 operations per second\ndocument.getElementsByTagName('span'); // 10,331,708 operations/sec\n</code></pre>\n\n<p>For click events, check <em><a href=\"http://jsperf.com/native-browser-events-vs-jquery-trigger\">Native Browser events vs jquery trigger</a></em> or <em><a href=\"http://jsperf.com/jquery-vs-native-click-event-binding\">jQuery vs Native Click Event Binding</a></em>.</p>\n\n<p>Testing in Chrome 22.0.1229.79 32-bit on Windows Server 2008 R2 / 7 64-bit</p>\n\n<pre><code>$('#jquery a').click(window.testClickListener); // 2,957 operations/second\n\n[].forEach.call( document.querySelectorAll('#native a'), function(el) {\n    el.addEventListener('click', window.testClickListener, false);\n}); // 18,196 operations/second\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>From what I understand, your question is not really about whether to use jQuery or not. It's rather: <em>Is it better to bind events inline in HTML or through event listeners?</em></p>\n\n<p>As @Vega mentioned above, inline binding is deprecated. Moreover this way you can only bind one function to a certain event. Therefore I recommend using listeners. Whether it's jQuery's <code>.bind</code>/<code>.click</code>, or it's pure JavaScript <code>.addEventListener</code> - it doesn't really matter. This way, you'll be able to bind many functions to one event and to unbind them later if needed. Consider this pure JavaScript code:</p>\n\n<pre><code>querySelector('#myDiv').addEventListener('click', function () {\n    // Some code...\n});\n</code></pre>\n\n<p>This will work in most modern browsers. If you care about Internet&nbsp;Explorer compatibility or if you include jQuery in your project anyway - use jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<pre><code>&lt;whatever onclick=\"doStuff();\" onmouseover=\"in()\" onmouseout=\"out()\" /&gt;\n</code></pre>\n\n<p><strong>onclick, onmouseover, onmouseout, etc.</strong> events are actually <strong>bad for performance</strong> (in <em>Internet&nbsp;Explorer</em> mainly, go figure). If you code using <a href=\"http://en.wikipedia.org/wiki/Microsoft_Visual_Studio\" rel=\"nofollow\">Visual Studio</a>, when you run a page with these, every single one of these will create a separate SCRIPT block taking up memory, and thus slowing down performance.</p>\n\n<p>Not to mention you should have a <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\" rel=\"nofollow\">separation of concerns</a>: JavaScript and layouts should be separated!</p>\n\n<p>It is always better to create evenHandlers for any of these events, one event can capture hundreds/thousands of items, instead of creating thousands of separate script blocks for each one!</p>\n\n<p>(Also, everything everyone else is saying.)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Difference in works. If you use click(), you can add several functions, but if you use an attribute, only one function will be executed - the last one.</p>\n\n<p><strong><em><a href=\"http://jsfiddle.net/abaksheyev/SqH3D/1/\" rel=\"nofollow\">DEMO</a></em></strong></p>\n\n<p><strong><em>HTML</em></strong></p>\n\n<pre><code>&lt;span id=\"JQueryClick\"&gt;Click #JQuery&lt;/span&gt; &lt;/br&gt;\n&lt;span id=\"JQueryAttrClick\"&gt;Click #Attr&lt;/span&gt; &lt;/br&gt;\n</code></pre>\n\n<p><strong><em>JavaScript</em></strong></p>\n\n<pre><code>$('#JQueryClick').click(function(){alert('1')})\n$('#JQueryClick').click(function(){alert('2')})\n\n$('#JQueryAttrClick').attr('onClick',\" alert('1')\" ) //This doesn't work\n$('#JQueryAttrClick').attr('onClick',\" alert('2')\" )\n</code></pre>\n\n<p>If we are talking about performance, in any case directly using is always faster, but using of an attribute, you will be able to assign only one function.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Go for this as it will give you both standard and performance.</p>\n\n<pre><code> $('#myDiv').click(function(){\n      //Some code\n });\n</code></pre>\n\n<p>As the second method is simple JavaScript code and is faster than jQuery. But here performance will be approximately the same.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>IMHO, onclick is the preferred method over .click only when the following conditions are met:</p>\n\n<ul>\n<li>there are many elements on the page</li>\n<li>only one event to be registered for the click event</li>\n<li>You're worried about mobile performance/battery life</li>\n</ul>\n\n<p>I formed this opinion because of the fact that the JavaScript engines on mobile devices are 4 to 7 times slower than their desktop counterparts which were made in the same generation. I hate it when I visit a site on my mobile device and receive jittery scrolling because the jQuery is binding all of the events at the expense of my user experience and battery life. Another recent supporting factor, although this should only be a concern with government agencies ;) , we had IE7 pop-up with a message box stating that JavaScript process is taking to long...wait or cancel process. This happened every time there were a lot of elements to bind to via jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Seperation of concerns is key here, and so the event binding is the generally accepted method. This is basically what a lot of the existing answers have said. </p>\n\n<p><strong>However</strong> don't throw away the idea of declarative markup too quickly. It has it's place, and with frameworks like Angularjs, is the centerpiece. </p>\n\n<p>There needs to be an understanding that the whole <code>&lt;div id=\"myDiv\" onClick=\"divFunction()\"&gt;Some Content&lt;/div&gt;</code> was shamed so heavily because it was abused by some developers. So it reached the point of sacrilegious proportions, much like <code>tables</code>. Some developers <em>actually</em> avoid <code>tables</code> for tabular data. It's the perfect example of people acting without understanding. </p>\n\n<p>Although I like the idea of keeping my behaviour seperate from my views. I see no issue with the markup declaring <strong>what</strong> it does (not <strong>how</strong> it does it, that's behaviour). It might be in the form of an actual onClick attribute, or a custom attribute, much like bootstraps javascript components. </p>\n\n<p>This way, by glancing just at the markup, you can see what is does, instead of trying to reverse lookup javascript event binders. </p>\n\n<p>So, as a third alternative to the above, using data attributes to declarativly announce the behaviour within the markup. Behaviour is kept out of the view, but at a glance you can see what is happening.  </p>\n\n<p>Bootstrap example:</p>\n\n<pre><code>&lt;button type=\"button\" class=\"btn btn-lg btn-danger\" data-toggle=\"popover\" title=\"Popover title\" data-content=\"And here's some amazing content. It's very engaging. Right?\"&gt;Click to toggle popover&lt;/button&gt;\n</code></pre>\n\n<p>Source: <a href=\"http://getbootstrap.com/javascript/#popovers\" rel=\"nofollow\">http://getbootstrap.com/javascript/#popovers</a></p>\n\n<p><strong>Note</strong> The main disadvantage with the second example is the pollution of global namespace. This can be circumvented by either using the third alternative above, or frameworks like Angular and their ng-click attributes with automatically scope. </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a huge jQuery application, and I'm using the below two methods for click events.</p>\n\n<p><strong>First method</strong></p>\n\n<h3>HTML</h3>\n\n<pre><code>&lt;div id=\"myDiv\"&gt;Some Content&lt;/div&gt;\n</code></pre>\n\n<h3>jQuery</h3>\n\n<pre><code>$('#myDiv').click(function(){\n    //Some code\n});\n</code></pre>\n\n<p><strong>Second method</strong></p>\n\n<h3>HTML</h3>\n\n<pre><code>&lt;div id=\"myDiv\" onClick=\"divFunction()\"&gt;Some Content&lt;/div&gt;\n</code></pre>\n\n<h3>JavaScript function call</h3>\n\n<pre><code>function divFunction(){\n    //Some code\n}\n</code></pre>\n\n<p>I use either the first or second method in my application. Which one is better? Better for performance? And standard?</p>\n",
            "last_activity_date": 1413634613,
            "question_id": 12627443,
            "score": 209,
            "tags": [
                "javascript",
                "html",
                "javascript-events",
                "jquery"
            ],
            "title": "jQuery.click() vs onClick"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<h3>The error</h3>\n\n<p>When code is parsed by the JavaScript interpreter, it gets broken into pieces called \"tokens\".  When a token cannot be classified into one of the <a href=\"http://es5.github.com/#x7.5\">four basic token types</a>, it gets labelled \"ILLEGAL\" on most implementations, and this error is thrown. The same error is raised if, for example, you try to run a js file with a rogue <code>@</code> character somewhere, for example.</p>\n\n<h3>But I can't see anything illegal!</h3>\n\n<p>There is an invisible character in the code, right after the semicolon. It's the <a href=\"http://www.fileformat.info/info/unicode/char/200b/index.htm\">Unicode <code>U+200B</code> Zero-width space</a> character (a.k.a. <code>ZWSP</code>, HTML entity <code>&amp;#8203;</code>). That character is known to cause the <code>Unexpected token ILLEGAL</code> JavaScript syntax error.</p>\n\n<h3>And where did it come from?</h3>\n\n<p>I can't tell for sure, but my bet is on <a href=\"http://jsfiddle.net\">jsfiddle</a>. If you paste code from there, it's very likely to include one or more <code>U+200B</code> characters. It seems the tool uses that character to control word-wrapping on long strings.</p>\n\n<blockquote>\n  <p><strong>UPDATE 2013-01-07</strong></p>\n  \n  <p>After the latest <a href=\"http://blog.jsfiddle.net/post/39954467099/jsfiddle-updated\">jsfiddle update</a>, <a href=\"http://jsfiddle.net/FFEsE/\">it's now showing the character as a red dot</a> like codepen does. <em>Apparently</em>, it's also not inserting <code>U+200B</code> characters on its own anymore, so this problem should be less frequent from now on.</p>\n</blockquote>\n\n<p>It's also been <a href=\"http://stackoverflow.com/a/7077279/825789\">reported</a> that code pasted from the Chrome developer tools may include that character, but I was unable to reproduce that with the current version (22.0.1229.79 on OSX).</p>\n\n<h3>How can I spot it?</h3>\n\n<p>The character is invisible, do how do we know it's there? You can ask your editor to show invisible characters. Most text editors have this feature. Vim, for example, displays them by default, and the <code>ZWSP</code> shows as <code>&lt;u200b&gt;</code>. You can also debug it online: <a href=\"http://jsbin.com/\">jsbin</a> displays the character as a red dot on its code panes (but seems to remove it after saving and reloading the page). <a href=\"http://codepen.io/anon/pen/htlkd\">CodePen.io also displays it as a dot</a>, and keeps it even after saving. </p>\n\n<h3>Related problems</h3>\n\n<p>That character is not something bad, it can actually be quite useful. <a href=\"http://en.wikipedia.org/wiki/Zero-width_space\">This example on Wikipedia</a> demonstrates how it can be used to control where a long string should be wrapped to the next line. However, if you are unaware of the character's presence on your markup, it may become a problem. If you have it inside of a string (e.g., the <code>nodeValue</code> of a DOM element that has no visible content), you might expect such string to be empty, when in fact it's not (even after applying <code>String.trim</code>). </p>\n\n<p><code>ZWSP</code> can also cause extra whitespace to be displayed on an HTML page, for example when it's found between two <code>&lt;div&gt;</code> elements (as seen on <a href=\"http://stackoverflow.com/q/12731253/825789\">this question</a>). This case is not even reproducible on jsfiddle, since the character is ignored there.</p>\n\n<p>Another potential problem: if the web page's encoding is not recognized as UTF-8, the character may actually be displayed (as <code>\u00e2\u20ac\u2039</code> in latin1, for example).</p>\n\n<p>If <code>ZWSP</code> is present on CSS code (inline code, or an external stylesheet), styles can also not be parsed properly, so some styles don't get applied (as seen on <a href=\"http://stackoverflow.com/q/12203376/825789\">this question</a>).</p>\n\n<h3>The ECMAScript Specification</h3>\n\n<p>I couldn't find any mention to that specific character on the ECMAScript Specification (versions <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\">3</a> and <a href=\"http://ecma-international.org/ecma-262/5.1\">5.1</a>). The current version mentions similar characters (<code>U+200C</code> and <code>U+200D</code>) on <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-7.1\">Section 7.1</a>, which says they should be treated as <code>IdentifierPart</code>s when \"outside of comments, string literals, and regular expression literals\". Those characters may, for example, be part of a variable name (and <code>var x\\u200c;</code> indeed works). </p>\n\n<p><a href=\"http://ecma-international.org/ecma-262/5.1/#sec-7.2\">Section 7.2</a> lists the valid White space characters (such as tab, space, no-break space, etc.), and vaguely mentions that any other Unicode \u201cspace separator\u201d (category \u201cZs\u201d) should be treated as white space. I'm probably not the best person to discuss the specs in this regard, but it seems to me that <code>U+200B</code> should be considered white space according to that, when in fact the implementations (at least Chrome and Firefox) appear to treat them as an unexpected token (or part of one), causing the syntax error.</p>\n",
                    "is_accepted": true,
                    "score": 238
                },
                {
                    "body": "<p>This also could be happening if you're copying code from another document (like a PDF) into your console and trying to run it.</p>\n\n<p>I was trying to run some example code out of a Javascript book I'm reading and was surprised it didn't run in the console.</p>\n\n<p>Apparently, copying from the PDF introduces some unexpected, illegal, and invisible characters into the code.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>why you looking for this problem into your code? Even, if it's copypasted. </p>\n\n<p>If you can see, what exactly happening after save file in synced folder - you will see something like <code>*****</code> at the end of file. It's not related to your code at all. </p>\n\n<p><strong>Solution.</strong></p>\n\n<p>If you are using <code>nginx</code> in vagrant box - add to server config: </p>\n\n<pre><code>sendfile off;\n</code></pre>\n\n<p>Source of problem: <a href=\"https://github.com/mitchellh/vagrant/issues/351#issuecomment-1339640\">VirtualBox Bug</a></p>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>I'm getting this JavaScript error on my console:</p>\n\n<blockquote>\n  <p>Uncaught SyntaxError: Unexpected token ILLEGAL</p>\n</blockquote>\n\n<p>This is my code:</p>\n\n<pre><code>var foo = 'bar';\u200b\n</code></pre>\n\n<p>It's super simple, as you can see. How could it be causing a syntax error?</p>\n",
            "last_activity_date": 1416649584,
            "question_id": 12719859,
            "score": 119,
            "tags": [
                "javascript",
                "syntax-error",
                "illegal-characters"
            ],
            "title": "SyntaxError: Unexpected token ILLEGAL"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I guess something like this script would do:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"/js/styles.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This JS file contains the following statement:</p>\n\n<pre><code>if (!document.getElementById) document.write('&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css/versions4.css\"&gt;');\n</code></pre>\n\n<p>The address of the javascript and css would need to be absolute if they are to refer to your site.</p>\n\n<p>Many CSS import techniques are discussed in this <a href=\"http://www.tjkdesign.com/articles/branching.asp\">\"Say no to CSS hacks with branching techniques\"</a> article.</p>\n\n<p>But the <a href=\"http://cse-mjmcl.cse.bris.ac.uk/blog/2005/08/18/1124396539593.html\">\"Using JavaScript to dynamically add Portlet CSS stylesheets\"</a> article mentions also the CreateStyleSheet possibility (proprietary method for IE):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\nif(document.createStyleSheet) {\n  document.createStyleSheet('http://server/stylesheet.css');\n}\nelse {\n  var styles = \"@import url(' http://server/stylesheet.css ');\";\n  var newSS=document.createElement('link');\n  newSS.rel='stylesheet';\n  newSS.href='data:text/css,'+escape(styles);\n  document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n}\n//]]&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>You may use for this <a href=\"http://developer.yahoo.com/yui/get/\" rel=\"nofollow\">YUI library</a> or use this <a href=\"http://www.javascriptkit.com/javatutors/loadjavascriptcss.shtml\" rel=\"nofollow\">article to implement</a> </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <a href=\"http://developer.yahoo.com/yui/get/\" rel=\"nofollow\">YUI library</a> might be what you are looking for. It also supports cross domain loading.</p>\n\n<p>If you use jquery, <a href=\"http://nicolas.rudas.info/jQuery/getPlugin/\" rel=\"nofollow\">this plugin</a> does the same thing.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's the \"oldschool\" way of doing it, which hopefully works accross all browsers. In theory you would use setAttribute unfortunately IE6 doesn't support it consistently.</p>\n\n<pre><code>var cssId = 'myCss';  // you could encode the css path itself to generate id..\nif (!document.getElementById(cssId))\n{\n    var head  = document.getElementsByTagName('head')[0];\n    var link  = document.createElement('link');\n    link.id   = cssId;\n    link.rel  = 'stylesheet';\n    link.type = 'text/css';\n    link.href = 'http://website.com/css/stylesheet.css';\n    link.media = 'all';\n    head.appendChild(link);\n}\n</code></pre>\n\n<p>This example checks if the CSS was already added so it adds it only once.</p>\n\n<p>Put that code into a javascript file, have the end-user simply include the javascript, and make sure the CSS path is absolute so it is loaded from your servers.</p>\n\n<h1>VanillaJS</h1>\n\n<p>Here is an example that uses plain JavaScript to inject a CSS link into the <code>head</code> element based on the filename portion of the URL:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfile = location.pathname.split( \"/\" ).pop();\n\nlink = document.createElement( \"link\" );\nlink.href = file.substr( 0, file.lastIndexOf( \".\" ) ) + \".css\";\nlink.type = \"text/css\";\nlink.rel = \"stylesheet\";\nlink.media = \"screen,print\";\n\ndocument.getElementsByTagName( \"head\" )[0].appendChild( link );\n&lt;/script&gt;\n</code></pre>\n\n<p>Insert the code just before the closing <code>head</code> tag and the CSS will be loaded before the page is rendered. Using an external JavaScript (<code>.js</code>) file will cause a flash of unstyled content (<a href=\"http://en.wikipedia.org/wiki/Flash_of_unstyled_content\">FOUC</a>) to appear.</p>\n",
                    "is_accepted": true,
                    "score": 123
                },
                {
                    "body": "<p>There is a general jquery plugin that loads css and JS files synch and asych on demand.\nIt also keeps track off what is already been loaded :)\nsee: <a href=\"http://code.google.com/p/rloader/\" rel=\"nofollow\">http://code.google.com/p/rloader/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know this is a pretty old thread but here comes my 5 cents.</p>\n\n<p>There is another way to do this depending on what your needs are.</p>\n\n<p>I have a case where i want a css file to be active only a while. Like css switching. Activate the css and then after another event deativate it. </p>\n\n<p>Instead of loading the css dynamically and then removing it you can add a Class/an id in front of all elements in the new css and then just switch that class/id of the base node of your css (like body tag).</p>\n\n<p>You would with this solution have more css files initially loaded but you have a more dynamic way of switching css layouts.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>   function loadjscssfile(filename, filetype) {\n                if (filetype == \"js\") { //if filename is a external JavaScript file\n                   // alert('called');\n                    var fileref = document.createElement('script')\n                    fileref.setAttribute(\"type\", \"text/javascript\")\n                    fileref.setAttribute(\"src\", filename)\n                    alert('called');\n                }\n                else if (filetype == \"css\") { //if filename is an external CSS file\n                    var fileref = document.createElement(\"link\")\n                    fileref.setAttribute(\"rel\", \"stylesheet\")\n                    fileref.setAttribute(\"type\", \"text/css\")\n                    fileref.setAttribute(\"href\", filename)\n                }\n                if (typeof fileref != \"undefined\")\n                    document.getElementsByTagName(\"head\")[0].appendChild(fileref)\n            }\n</code></pre>\n\n<p>Call this javascript function to dynamically load the css and js file. Pass the complete file path with name in \u2018filename\u2019 argument.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>var fileref = document.createElement(\"link\")\nfileref.setAttribute(\"rel\", \"stylesheet\")\nfileref.setAttribute(\"type\", \"text/css\")\nfileref.setAttribute(\"th:href\", \"@{/filepath}\")\nfileref.setAttribute(\"href\", \"/filepath\")\n</code></pre>\n\n<p>I'm using thymeleaf and this is work fine. Thanks</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a way with jQuery's element creation method (my preference) and with callback <code>onLoad</code>:</p>\n\n<pre><code>var css = $(\"&lt;link&gt;\", {\n  \"rel\" : \"stylesheet\",\n  \"type\" :  \"text/css\",\n  \"href\" : \"style.css\"\n})[0];\n\ncss.onload = function(){\n  console.log(\"CSS IN IFRAME LOADED\");\n};\n\ndocument\n  .getElementsByTagName(\"head\")[0]\n  .appendChild(css);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is it possible to import css stylesheets into a html page using Javascript? If so, how can it be done?</p>\n\n<p>P.S the javascript will be hosted on my site, but I want users to be able to put in the <code>&lt;head&gt;</code> tag of their website, and it should be able to import a css file hosted on my server into the current web page. (both the css file and the javascript file will be hosted on my server).</p>\n",
            "last_activity_date": 1421422174,
            "question_id": 574944,
            "score": 101,
            "tags": [
                "javascript",
                "html",
                "css",
                "dhtml"
            ],
            "title": "How to load up CSS files using Javascript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You will need Javascript to do this. Use <a href=\"https://developer.mozilla.org/en/DOM/window.close\"><code>window.close()</code></a>:</p>\n\n<pre><code>close();\n</code></pre>\n\n<p><strong>Note:</strong> the current window is implied. This is equivalent:</p>\n\n<pre><code>window.close();\n</code></pre>\n\n<p>or you can specify a different window.</p>\n\n<p>So:</p>\n\n<pre><code>function close_window() {\n  if (confirm(\"Close Window?\")) {\n    close();\n  }\n}\n</code></pre>\n\n<p>with HTML:</p>\n\n<pre><code>&lt;a href=\"javascript:close_window();\"&gt;close&lt;/a&gt;\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"close_window();return false;\"&gt;close&lt;/a&gt;\n</code></pre>\n\n<p>You <code>return false</code> here to prevent the default behavior for the event. Otherwise the browser will attempt to go to that URL (which it obviously isn't).</p>\n\n<p>Now the options on the <a href=\"https://developer.mozilla.org/en/DOM/window.confirm\"><code>window.confirm()</code></a> dialog box will be OK and Cancel (not Yes and No). If you <em>really</em> want Yes and No you'll need to create some kind of modal Javascript dialog box.</p>\n\n<p><strong>Note:</strong> there is browser-specific differences with the above. If you opened the window with Javascript (via <code>window.open()</code>) then you are allowed to close the window with javascript. Firefox disallows you from closing other windows. I believe IE will ask the user for confirmation. Other browsers may vary.</p>\n",
                    "is_accepted": true,
                    "score": 138
                },
                {
                    "body": "<p>Here's how you would create such a link: </p>\n\n<p><code>&lt;a href=\"javascript:if(confirm('Close window?'))window.close()\"&gt;close&lt;/a&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This method works in Chrome and IE:</p>\n\n<pre><code>&lt;a href=\"blablabla\" onclick=\"setTimeout(function(){var ww = window.open(window.location, '_self'); ww.close(); }, 1000);\"&gt;\n    If you click on this the window will be closed after 1000ms\n&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>Tested successfully in FF 18 and Chrome 24:</p>\n\n<p>Insert in head:</p>\n\n<pre><code>&lt;script&gt;\n    function closeWindow() {\n        window.open('','_parent','');\n        window.close();\n    }\n&lt;/script&gt; \n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a href=\"javascript:closeWindow();\"&gt;Close Window&lt;/a&gt;\n</code></pre>\n\n<p>Credits go to <a href=\"http://www.yournewdesigner.com/css-experiments/javascript-window-close-firefox.html\" rel=\"nofollow\">Marcos J. Drake</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>&lt;a href=\"javascript:window.open('','_self').close();\"&gt;close&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 102
                },
                {
                    "body": "<p>This is one way of solving the same, declare a JavaScript function like this</p>\n\n<pre><code>&lt;script&gt;\n  function Exit() {\n     var x=confirm('Are You sure want to exit:');\n     if(x) window.close();\n   }\n&lt;/script&gt;\n</code></pre>\n\n<p>Add the following line to the HTML to call the function using a <code>&lt;button&gt;</code></p>\n\n<pre><code>&lt;button name='closeIt' onClick=\"Exit()\" &gt;Click to exit &lt;/Button&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this as well. Working for me on all three major browsers. </p>\n\n<pre><code>&lt;!-- saved from url=(0014)about:internet --&gt;\n&lt;a href=\"#\" onclick=\"window.close();opener.window.focus()\" &gt;Close Window&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Close window after 2 seconds with jquery\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>setTimeout(function() {\r\n\twindow.close();\r\n}, 2000);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It is possible. I searched the whole net for this, but once when i took one of microsoft's survey, I finally got the answer.</p>\n\n<p>try this:</p>\n\n<pre><code>window.top.close();\n</code></pre>\n\n<p>this will close the current tab for you.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to create a link on a webpage that would close current active tab in a browser without closing other tabs in the browser. When user clicks close link, an alert message should appear asking user to confirm with two buttons, \"YES\" and \"NO\". If user clicks \"YES\", close that page and If \"NO\", do nothing.</p>\n\n<p>How can it be done? Any suggestions?</p>\n",
            "last_activity_date": 1419107077,
            "question_id": 2076299,
            "score": 107,
            "tags": [
                "javascript",
                "html",
                "hyperlink"
            ],
            "title": "How to close current tab in a browser window?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><code>? :</code> isn't this the ternary operator?</p>\n\n<p><code>var x= expression ? true:false</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Properly parenthesized for clarity, it is </p>\n\n<pre><code>hsb.s = (max != 0) ? (255 * delta / max) : 0;\n</code></pre>\n\n<p>meaning return either</p>\n\n<ul>\n<li><code>255*delta/max</code> if max != 0</li>\n<li><code>0</code> if max == 0</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This is probably a bit clearer when written with brackets as follows:</p>\n\n<pre><code>hsb.s = (max != 0) ? (255 * delta / max) : 0;\n</code></pre>\n\n<p>What it does is evaluate the part in the first brackets. If the result is true then the part after the ? and before the : is returned. If it is false, then what follows the : is returned.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is called the <a href=\"http://en.wikipedia.org/wiki/Ternary%5Foperation\">Ternary Operator</a>.</p>\n\n<p>It has the form of: <code>condition</code> ? <code>value-if-true</code> : <code>value-if-false</code><br>\nThink of the <code>?</code> as \"then\" and <code>:</code> as \"else\".</p>\n\n<p>Your code is equivalent to</p>\n\n<pre><code>if (max != 0)\n  hsb.s = 255 * delta / max;\nelse\n  hsb.s = 0;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>hsb.s = max != 0 ? 255 * delta / max : 0;</p>\n\n<p>? is a ternary operator, it works like an if in conjunction with the : </p>\n\n<p>!= means not equals</p>\n\n<p>So, the long form of this line would be</p>\n\n<pre><code>if (max != 0) { //if max is not zero\n  hsb.s = 255 * delta / max;\n} else {\n  hsb.s = 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I came across the following line in a JS function (it was an RGB to HSB color converter, if you must know)</p>\n\n<pre><code>hsb.s = max != 0 ? 255 * delta / max : 0;\n</code></pre>\n\n<p>I'm wondering if someone can explain what the \"?\" and the \":\" mean in this context. </p>\n",
            "last_activity_date": 1344906245,
            "question_id": 1771786,
            "score": 87,
            "tags": [
                "javascript",
                "syntax",
                "operators",
                "conditional-operator"
            ],
            "title": "Question mark in JavaScript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>There's the dot notation and the array notation</p>\n\n<pre><code>myObj[a] = b;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 158
                },
                {
                    "body": "<p>Dot notation and the properties are equivalent. So you would accomplish like so:</p>\n\n<pre><code>var myObj = new Object;\nvar a = 'string1';\nmyObj[a] = 'whatever';\nalert(myObj.string1)\n</code></pre>\n\n<p>(alerts \"whatever\")</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Ecu, if you do <code>myObj.a</code>, then it looks for the property named a of myObj.\nIf you do <code>myObj[a] =b</code> then it looks for the <code>a.valueOf()</code> property of myObj.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You could just use this:</p>\n\n<pre><code>function createObject(propName, propValue){\n    this[propName] = propValue;\n}\nvar myObj1 = new createObject('string1','string2');\n</code></pre>\n\n<p>Anything you pass as the first parameter will be the property name, and the second parameter is the property value.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Oneliner:</p>\n\n<pre><code>obj = (function(attr, val){ var a = {}; a[attr]=val; return a; })('hash', 5);\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>attr = 'hash';\nval = 5;\nvar obj = (obj={}, obj[attr]=val, obj);\n</code></pre>\n\n<p>Anything more shorter?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>ES6 introduces computed property names, which allow you to do</p>\n\n<pre><code>var myObj = {[a]: b};\n</code></pre>\n\n<p>Note browser support is currently negligible.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You cannot use a variable to access a property via dot notation, instead use the array notation.</p>\n\n<pre><code>var obj= {\n     'name' : 'jroi'\n};\nvar a = 'name';\nalert(obj.a); //will not work\nalert(obj[a]); //should work and alert jroi'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As $scope is an object, you can try with JavaScript by:</p>\n\n<pre><code>$scope['something'] = 'hey'\n</code></pre>\n\n<p>It is equal to:</p>\n\n<pre><code>$scope.something = 'hey'\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/o1qjmk7w/\" rel=\"nofollow\">I created a fiddle to test</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following demonstrates an alternative approach for returning a key pair object using the form of <code>(a, b)</code>. The first example uses the string <code>'key'</code> as the property name, and <code>'val'</code> as the value.</p>\n\n<p><strong>Example #1:</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>(function(o,a,b){return o[a]=b,o})({},'key','val');\n</code></pre>\n\n<p><strong>Example: #2:</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var obj = { foo: 'bar' };\n(function(o,a,b){return o[a]=b,o})(obj,'key','val');\n</code></pre>\n\n<p>As shown in the second example, this can modify existing objects, too <em>(if property is already defined in the object, value will be overwritten)</em>.</p>\n\n<blockquote>\n  <p><strong><em>Result #1:</em></strong> <code>{ key: 'val' }</code></p>\n  \n  <p><strong><em>Result #2:</em></strong> <code>{ foo: 'bar', key: 'val' }</code></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to add a new property to 'myObj', name it 'string1' and give it a value of 'string2', but when I do it it returns 'undefined:</p>\n\n<pre><code>var myObj = new Object;\nvar a = 'string1';\nvar b = 'string2';\nmyObj.a = b;\n\nalert(myObj.string1); //Returns 'undefined'\nalert(myObj.a); //Returns 'string2'\n</code></pre>\n\n<p>In other words: How do I create an object property and give it the name stored in the variable, but not the name of the variable itself?</p>\n",
            "last_activity_date": 1425104819,
            "question_id": 2241875,
            "score": 110,
            "tags": [
                "javascript",
                "properties",
                "object"
            ],
            "title": "How to create an object property from a variable value in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>No; they are identical</p>\n\n<hr>\n\n<p>However, if you add <code>new</code> beforehand and <code>.something</code> afterwards, they will be different.</p>\n\n<h1>Code 1</h1>\n\n<pre><code>new (function() {\n    this.prop = 4;\n}) ().prop;\n</code></pre>\n\n<p>This code creates a new instance of this function's class, then gets the <code>prop</code> property of the new instance.<br>\nIt returns <code>4</code>.</p>\n\n<p>It's equivalent to </p>\n\n<pre><code>function MyClass() {\n    this.prop = 4;\n}\nnew MyClass().prop;\n</code></pre>\n\n<hr>\n\n<h1>Code 2</h1>\n\n<pre><code>new ( function() {\n    return { Class: function() { } }; \n}() ).Class;\n</code></pre>\n\n<p>This code calls <code>new</code> on the <code>Class</code> property.<br>\nSince the parentheses for the function call are inside the outer set of parentheses, they aren't picked up by the <code>new</code> expression, and instead call the function normally, returning its return value.<br>\nThe <code>new</code> expression parses up to the <code>.Class</code> and instantiates that.  (the parentheses after <code>new</code> are optional)</p>\n\n<p>It's equivalent to</p>\n\n<pre><code>var namespace = { Class: function() { } };\n\nfunction getNamespace() { return namespace; }\n\nnew ( getNamespace() ).Class;\n//Or,\nnew namespace.Class;\n</code></pre>\n\n<p>Without the parentheses around the call to <code>getNamespace()</code>, this would be parsed as <code>(new getNamespace()).Class</code> &mdash; it would call instantiate the <code>getNamespace</code> class and return the <code>Class</code> property of the new instance.</p>\n",
                    "is_accepted": true,
                    "score": 47
                },
                {
                    "body": "<p>There's no difference. Both are function expressions.</p>\n\n<p>There is be a third way, too:</p>\n\n<pre><code>+function() {\n    bar = 'bar';\n    alert('foo');\n}();\n</code></pre>\n\n<p>(instead of the <code>+</code> another operator would work, too)</p>\n\n<p>The most common way is</p>\n\n<pre><code>(function() {\n    // ...\n})();\n</code></pre>\n\n<p>though.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>There's no difference - the opening brace only serves as a syntactic hint to tell the parser that what follows is a <em>function expression</em> instead of a <em>function declaration</em>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>Both of these code blocks below alert <code>foo</code> then <code>bar</code>. The only difference is <code>})()</code> and <code>}())</code>.</p>\n\n<p>Code 1:</p>\n\n<pre><code>(function()\n{\n    bar = 'bar';\n    alert('foo');\n})();\n\nalert(bar);\n</code></pre>\n\n<p>Code 2:</p>\n\n<pre><code>(function()\n{\n    bar = 'bar';\n    alert('foo');\n}());\n\nalert(bar);\n</code></pre>\n\n<p>So is there any difference, apart from the syntax?</p>\n",
            "last_activity_date": 1358262463,
            "question_id": 5938802,
            "score": 41,
            "tags": [
                "javascript",
                "function"
            ],
            "title": "Are &quot;(function ( ) { } ) ( )&quot; and &quot;(function ( ) { } ( ) )&quot; functionally equal in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Unlike normal ordinary HTML pages, jQuery Mobile uses ajax technology when navigating between pages. So make sure to import all your JS files and libraries in all your html pages. </p>\n\n<p>If you notice closely you will see that JS files from previous page is taken into consideration when loading the second page. But if you force rrefresh the current page then the js files of the current page will be effective.</p>\n\n<p>So as I said earlier make sure to import the js files in all the html files.</p>\n\n<p>Also no need to call <code>deviceready</code>, use following syntax to call your page specific js functions</p>\n\n<pre><code>$(document).on('pageshow', '#YourPageID', function(){\n    // Your code goes here\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Jquery Mobile uses ajax to load a \"page\". A \"page\" here is a div with data-role=page. If you load a physical page index.html, you can navigate using changePage to any \"page\" div inside that page. </p>\n\n<p>However, if you want to load a \"page\" from other physical page, jQM will only load the first \"page\" div from that page. What actually happen is you do not change page, jQM just load that particular \"page\" div using ajax and inject it to your current page.</p>\n\n<p>You have two possible architecture where you put all your \"pages\" in a html page and navigate from there. Or you can have multiple page architecture. You can always mix this.</p>\n\n<p>To physically change page, you need to add rel=external to your link.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h1>Intro</h1>\n\n<p>This article can also be found <strong><a href=\"http://www.gajotres.net/how-jquery-mobile-page-handling-affects-javascript-executions/\">HERE</a></strong> as a part of my blog.</p>\n\n<h1>How jQuery Mobile handles page changes</h1>\n\n<p>To understand this situation you need to understand how jQuery Mobile works. It uses ajax to load other pages. </p>\n\n<p>First page is loaded normally. Its <strong><code>HEAD</code></strong> and <strong><code>BODY</code></strong> is loaded into the <strong><code>DOM</code></strong>, and they are there to await other content. When second page is loaded, only its <strong><code>BODY</code></strong> content is loaded into the <strong><code>DOM</code></strong>. To be more precise, even <strong><code>BODY</code></strong> is not fully loaded. Only first div with an attribute data-role=\"page\" will be loaded, everything else is going to be discarded. Even if you have more pages inside a <strong><code>BODY</code></strong> only first one is going to be loaded. This rule only applies to subsequent pages, if you have more pages in an initial <strong>HTML</strong> all of them will be loaded. </p>\n\n<p>That's why your button is show successfully but click event is not working. Same click event whose parent <strong><code>HEAD</code></strong> was disregarded during the page transition.</p>\n\n<p>Here's an official documentation: <a href=\"http://jquerymobile.com/demos/1.2.0/docs/pages/page-links.html\">http://jquerymobile.com/demos/1.2.0/docs/pages/page-links.html</a></p>\n\n<p>Unfortunately you are not going to find this described in their documentation. Ether they think this is a common knowledge or they forgot to describe this like my other topics. (jQuery Mobile documentation is big but lacking many things).</p>\n\n<h1>Solution 1</h1>\n\n<p>In your second page, and every other page, move your <strong><code>SCRIPT</code></strong> tag into the <strong><code>BODY</code></strong> content, like this:</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div data-role=\"page\"&gt;\n        // And rest of your HTML content\n        &lt;script&gt;\n            // Your javascript will go here\n        &lt;/script&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>This is a quick solution but still an ugly one.</p>\n\n<p>Working example can be found in my other answer here: <strong><a href=\"http://stackoverflow.com/a/16083870/1848600\">Pageshow not triggered after changepage</a></strong></p>\n\n<p>Another working example: <a href=\"http://stackoverflow.com/questions/15430912/page-loaded-differently-with-jquery-mobile-transition/15431229#15431229\"><strong>Page loaded differently with jQuery-mobile transition</strong></a></p>\n\n<h1>Solution 2</h1>\n\n<p>Move all of your javascript into the original first HTML. Collect everything and put it inside a single js file, into a <strong><code>HEAD</code></strong>. Initialize it after jQuery Mobile has been loaded.</p>\n\n<pre><code>&lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1.0; minimum-scale=1.0; user-scalable=no; target-densityDpi=device-dpi\"/&gt;\n    &lt;link rel=\"stylesheet\" href=\"http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.css\" /&gt;\n    &lt;script src=\"http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.js\"&gt;&lt;/script&gt;    \n    &lt;script src=\"index.js\"&gt;&lt;/script&gt; // Put your code into a new file\n&lt;/head&gt;\n</code></pre>\n\n<p>In the end I will describe why this is a part of a good solution.</p>\n\n<h1>Solution 3</h1>\n\n<p>Use <strong>rel=\"external\"</strong> in your buttons and every elements you are using to change page. Because of it ajax is not going to be used for page loading and your jQuery Mobile app will behave like a normal web application. Unfortunately this is not a good solution in your case. Phonegap should never work as a normal web app.</p>\n\n<pre><code>&lt;a href=\"#second\" class=\"ui-btn-right\" rel=\"external\"&gt;Next&lt;/a&gt;\n</code></pre>\n\n<p>Official documentation, look for a chapter: <strong><a href=\"http://jquerymobile.com/demos/1.2.0/docs/pages/page-links.html\">Linking without Ajax</a></strong></p>\n\n<h1>Realistic solution</h1>\n\n<p>Realistic solution would use <strong>Solution 2</strong>. But unlike solution 2, I would use that same index.js file and initialize it inside a <strong><code>HEAD</code></strong> of every possible other page. </p>\n\n<p>Now you can ask me <strong>WHY</strong>?</p>\n\n<p><strong><code>Phonegap</code></strong> like jQuery Mobile is buggy, and sooner or later there's going to be an error and your app will fail (including loaded DOM) if your every js content is inside a single HTML file. DOM could be erased and <strong><code>Phonegap</code></strong> will refresh your current page. If that page don't have javascript that it will not work until it is restarted.</p>\n\n<h1>Final words</h1>\n\n<p>This problem can be easily fixed with a good page architecture. If anyone is interested I have wrote an <strong><a href=\"http://www.gajotres.net/secrets-of-a-good-jquery-mobile-page-architecture/\">ARTICLE</a></strong> about good jQuery Mobile page architecture. In a nut shell I am discussing that knowledge of how jQuery Mobile works is the most important thing you need to know before you can successfully create you first app.</p>\n",
                    "is_accepted": true,
                    "score": 42
                }
            ],
            "body": "<p>I have used $.mobile.changepage to do the redirect in my phonegap+jquerymobile projects. However what makes me confused is that I need to put the script of all the pages to the same file index.html. If not, the redirect page can not execute the function in its header.</p>\n\n<p>for example, my index.html seem to be \n<code>$(document).bind(\"deviceready\",function(){$.mobile.changepage(\"test.html\");})</code></p>\n\n<p>then, my device will redirect to test.html which seem to be</p>\n\n<pre><code>$(\"#btnTest\").click(function(){alert(\"123\");})\n&lt;button id=\"btnTest\"&gt;Test&lt;/button&gt;\n</code></pre>\n\n<p>However, the script will never execute in test.html. Then I put the script to index.html, what I expect to be is done. Whatever, if I put all the script to the same page, the project will become harder and harder to be preserved. Appreciated for your help.</p>\n",
            "last_activity_date": 1375083997,
            "question_id": 15800121,
            "score": 13,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "cordova",
                "jquery-mobile"
            ],
            "title": "Why I have to put all the script to index.html in jquery mobile"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Use:</p>\n\n<pre><code>str = str.replace(/[\u201c\u201d]/g, '\"');\nstr = str.replace(/[\u2018\u2019]/g, \"'\");\n</code></pre>\n\n<p>or to do it in one statement:</p>\n\n<pre><code>str = str.replace(/[\u201c\u201d]/g, '\"').replace(/[\u2018\u2019]/g,\"'\");\n</code></pre>\n\n<p>In JavaScript (as in many other languages) strings are immutable - string \"replacement\" methods actually just return the new string instead of modifying the string in place.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" rel=\"nofollow\">MDN JavaScript reference entry</a> for <code>replace</code> states:</p>\n\n<blockquote>\n  <p>Returns a new string with some or all matches of a pattern replaced by a replacement.</p>\n  \n  <p>\u2026</p>\n  \n  <p>This method does not change the String object it is called on. It simply returns a new string.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>replace return the resulting string</p>\n\n<pre><code>str = str.replace(/[\"']/, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The OP doesn't say why it isn't working, but there seems to be problems related to the encoding of the file. If I have an ANSI encoded file and I do:</p>\n\n<pre><code>var s = \"\u201cThis is a test\u201d \u2018Another test\u2019\";\ns = s.replace(/[\u201c\u201d]/g, '\"').replace(/[\u2018\u2019]/g,\"'\");\ndocument.writeln(s);\n</code></pre>\n\n<p>I get:</p>\n\n<pre><code>\"This is a test\" \"Another test\"\n</code></pre>\n\n<p>I converted the encoding to UTF-8, fixed the smart quotes (which broke when I changed encoding), then converted back to ANSI and the problem went away.</p>\n\n<p>Note that when I copied and pasted the double and single smart quotes off this page into my test document (ANSI encoded) and ran this code:</p>\n\n<pre><code>var s = \"\u201cThis is a test\u201d \u2018Another test\u2019\";\nfor (var i = 0; i &lt; s.length; i++) {\n    document.writeln(s.charAt(i) + '=' + s.charCodeAt(i));\n}\n</code></pre>\n\n<p>I discovered that all the smart quotes showed up as <code>? = 63</code>.</p>\n\n<p>So, to the OP, determine where the smart quotes are originating and make sure they are the character codes you expect them to be. If they are not, consider changing the encoding of the source so they arrive as <code>\u201c = 8220</code>, <code>\u201d = 8221</code>, <code>\u2018 = 8216</code> and <code>\u2019 = 8217</code>. Use my loop to examine the source, if the smart quotes are showing up with any <code>charCodeAt()</code> values other than those I've listed, <code>replace()</code> will not work as written.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To replace all regular quotes with smart quotes, I am using a similar function. You must specify the CharCode as some different computers/browsers default settings may identify the plain characters differently (\"\",\",','). </p>\n\n<p><strong>Using the CharCode with call the ASCII character, which will eliminate the room for error across different browsers, and operating systems. This is also helpful for bilingual use (accents, etc.).</strong></p>\n\n<p><strong>To replace smart quotes with SINGLE QUOTES</strong></p>\n\n<pre><code>function unSmartQuotify(n){\n    var name = n;\n    var apos = String.fromCharCode(39);\n    while (n.indexOf(\"'\") &gt; -1)\n        name = name.replace(\"'\" , apos);\n    return name;\n} \n</code></pre>\n\n<p>To find the other ASCII values you may need. Check <a href=\"http://www.ascii-code.com/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to replace the smart quotes like <code>\u2018</code>, <code>\u2019</code>, <code>\u201c</code> and <code>\u201d</code> to regular quotes. Also, I wanted to replace the <code>\u00a9</code>, <code>\u00ae</code> and <code>\u2122</code>. I used the following code. But it doesn't help.\nKindly help me to resolve this issue.</p>\n\n<pre><code>str.replace(/[\u201c\u201d]/g, '\"');\nstr.replace(/[\u2018\u2019]/g, \"'\");\n</code></pre>\n",
            "last_activity_date": 1425310564,
            "question_id": 1433212,
            "score": 5,
            "tags": [
                "javascript"
            ],
            "title": "Replace method doesn&#39;t work"
        },
        {
            "answer_count": 35,
            "answers": [
                {
                    "body": "<p>Another solution:</p>\n\n<pre><code>function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n</code></pre>\n\n<p>You could also add it to the <code>String.prototype</code> so you could chain it with other methods:</p>\n\n<pre><code>String.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>and use it like this:</p>\n\n<pre><code>'string'.capitalizeFirstLetter() // String\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1904
                },
                {
                    "body": "<p>Here is a function called <strong>ucfirst()</strong> (short for \"upper case first letter\"):</p>\n\n<pre><code>function ucfirst(str) {\n    var firstLetter = str.substr(0, 1);\n    return firstLetter.toUpperCase() + str.substr(1);\n}\n</code></pre>\n\n<p>You can capitalise a string by calling <strong>ucfirst(\"some string\")</strong> -- for example,</p>\n\n<pre><code>ucfirst(\"this is a test\") --&gt; \"This is a test\"\n</code></pre>\n\n<p>It works by splitting the string into two pieces.  On the first line it pulls out <strong>firstLetter</strong> and then on the second line it capitalises <strong>firstLetter</strong> by calling <strong>firstLetter.toUpperCase()</strong> and joins it with the rest of the string, which is found by calling <strong>str.substr(1)</strong>.</p>\n\n<p>You might think this would fail for an empty string, and indeed in a language like C you would have to cater for this.  However in Javascript, when you take a substring of an empty string, you just get an empty string back.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>A more object-oriented approach:</p>\n\n<pre><code>String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>\"hello world\".capitalize();  =&gt;  \"Hello world\" \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 832
                },
                {
                    "body": "<p>The ucfirst function works if you do it like this</p>\n\n<pre><code>function ucfirst(str) {\nvar firstLetter = str.slice(0,1);\nreturn firstLetter.toUpperCase() + str.substring(1);\n}\n</code></pre>\n\n<p>Thanks J-P for the aclaration.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>String.prototype.capitalize = function(){\n    return this.replace( /(^|\\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase();\n    } );\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>capitalizedString = someString.capitalize();\n</code></pre>\n\n<p>this is a text string => This Is A Text String</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>If I may alter the code a little. I found that if I run an all caps string through this function, nothing happens. So... here is my tid bit. Force the string to lower case first.</p>\n\n<pre><code>String.prototype.capitalize = function(){\n return this.toLowerCase().replace( /(^|\\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase(); } );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>If you go with one of the regex answers, remember they will only work with ASCII characters. All your unicode letters will not be uppercased. The <a href=\"http://xregexp.com/plugins/\">XRegExp</a> library and its unicode plugins solve this problem if you want to stick with regexps. So something like this would work:</p>\n\n<pre><code>String.prototype.capitalize = function () {\n    return this.replace(XRegExp(\"^\\\\p{L}\"), function ($0) { return $0.toUpperCase(); })\n}\n</code></pre>\n\n<p>Considering that it still doesn't cover all possibilities (combined characters, see <a href=\"http://www.regular-expressions.info/unicode.html\">http://www.regular-expressions.info/unicode.html</a>) it seems easier to just use the .charAt(0).toUpperCase() approach.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you are wanting to reformat all-caps text, you might want to modify the other examples as such:</p>\n\n<pre><code>function capitalize (text) {\n    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\n</code></pre>\n\n<p>This will ensure that the following text is changed:</p>\n\n<pre><code>TEST =&gt; Test\nThis Is A TeST =&gt; This is a test\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Here is a shortened version of the popular answer that gets the first letter by treating the string as an array:</p>\n\n<pre><code>function capitalize(s)\n{\n    return s[0].toUpperCase() + s.slice(1);\n}\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>According to the comments below this doesn't work in IE 7 or below.</p>\n\n<p><strong>Update 2:</strong></p>\n\n<p>To avoid <code>undefined</code> for empty strings (see <a href=\"http://stackoverflow.com/questions/1026069/capitalize-the-first-letter-of-string-in-javascript/7224605?noredirect=1#comment40995528_7224605\">@njzk2's comment below</a>), you can check for an empty string:</p>\n\n<pre><code>function capitalize(s)\n{\n    return s &amp;&amp; s[0].toUpperCase() + s.slice(1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 115
                },
                {
                    "body": "<p>CoffeeScript</p>\n\n<pre><code>ucfirst = (str) -&gt; str.charAt(0).toUpperCase() + str.slice(1)\n</code></pre>\n\n<p>As String prototype method:</p>\n\n<pre><code>String::capitalize = -&gt; @charAt(0).toUpperCase() + @slice(1)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Capitalize the first letter of all words in a string:</p>\n\n<pre><code>function ucFirstAllWords( str )\n{\n    var pieces = str.split(\" \");\n    for ( var i = 0; i &lt; pieces.length; i++ )\n    {\n        var j = pieces[i].charAt(0).toUpperCase();\n        pieces[i] = j + pieces[i].substr(1);\n    }\n    return pieces.join(\" \");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>It seems to be easier in CSS:</p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n    p.capitalize {text-transform:capitalize;}\n&lt;/style&gt;\n&lt;p class=\"capitalize\"&gt;This is some text.&lt;/p&gt;\n</code></pre>\n\n<p>This is from <em><a href=\"http://www.w3schools.com/cssref/pr_text_text-transform.asp\" rel=\"nofollow\">CSS text-transform Property</a></em> (at <a href=\"http://en.wikipedia.org/wiki/W3Schools\" rel=\"nofollow\">W3Schools</a>).</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>Okay, so I am new to JavaScript. I wasn't able to get the above to work for me. So I started putting it together myself. Here's my idea (about the same, different and working syntax):</p>\n\n<pre><code>String name = request.getParameter(\"name\");\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);\n</code></pre>\n\n<p>Here I get the variable from a form (it also works manually):</p>\n\n<pre><code>String name = \"i am a Smartypants...\";\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);\n</code></pre>\n\n<p>Output: \"I am a Smartypants...\";</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In CSS :</p>\n\n<pre><code>p:first-letter {\n    text-transform:capitalize;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<pre><code>//uppercase first letter\nfunction ucfirst(field) {\n    field.value = field.value.substr(0, 1).toUpperCase() + field.value.substr(1);\n}\n</code></pre>\n\n<p>usage : </p>\n\n<pre><code>&lt;input type=\"text\" onKeyup=\"ucfirst(this)\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/CoffeeScript\" rel=\"nofollow\">CoffeeScript</a>, add to the prototype for a string:</p>\n\n<pre><code>String::capitalize = -&gt;\n  @substr(0, 1).toUpperCase() + @substr(1)\n</code></pre>\n\n<p>Usage would be:</p>\n\n<pre><code>\"woobie\".capitalize()\n</code></pre>\n\n<p>Which yields:</p>\n\n<pre><code>\"Woobie\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>One Possible Solution:</p>\n\n<pre><code>function ConvertFirstCharacterToUpperCase(text) {\n    return text.substr(0, 1).toUpperCase() + text.substr(1);    \n}\n</code></pre>\n\n<p>use this:</p>\n\n<pre><code> alert(ConvertFirstCharacterToUpperCase(\"this is string\"));\n</code></pre>\n\n<p>Here is working <a href=\"http://jsfiddle.net/zaheerahmed/ffVpc/1/\">JS Fiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>yourString.replace(/^[a-z]/, function(m){ return m.toUpperCase() });\n</code></pre>\n\n<p>(You may encapsulate it in a function or even add it to the String prototype if you use it frequently)</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>We could get the first character with one of my favorite <code>RegExp</code>, looks like a cute smiley: <code>/^./</code></p>\n\n<pre><code>String.prototype.capitalize = function () {\n    return this.replace(/^./, function (match) {\n        return match.toUpperCase();\n    });\n};\n</code></pre>\n\n<p>And for all coffee-junkies:</p>\n\n<pre><code>String::capitalize = -&gt;\n    @replace /^./, (match) -&gt;\n        match.toUpperCase()\n</code></pre>\n\n<p>...and for all guys who think that there's a better way of doing this, without extending native prototypes:</p>\n\n<pre><code>var capitalize = function (input) {\n    return input.replace(/^./, function (match) {\n        return match.toUpperCase();\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<pre><code>var string = \"hello world\";\n    string.charAt(0).toUpperCase() + string.slice(1);\n    alert(string);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>For another case I need it to Capitalize the first letter and lowercase the rest , the following cases made me change this function </p>\n\n<pre><code>function capitalise(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\ncapitalise(\"alfredo\")  // =&gt; \"Alfredo\"\ncapitalise(\"Alejandro\")// =&gt; \"Alejandro \ncapitalise(\"ALBERTO\")  // =&gt; \"Alberto\"\ncapitalise(\"ArMaNdO\")  // =&gt; \"Armando\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>The function takes 2 arguments: \nstart -  the start index;\nlength - the length of substring to Capitalise</p>\n\n<pre><code>    String.prototype.subUpper = function () {\n        var result = this.toString();\n        var start = 0;\n        var length = 1;\n        if (arguments.length &gt; 0) {\n            start = arguments[0];\n            if (start &lt; this.length) {\n                if (arguments.length &gt; 1) { length = arguments[1]; }\n                if (start + length &gt; this.length) {\n                    length = this.length - start;\n                }\n                var startRest = start + length;\n                var prefix = start &gt; 0 ? this.substr(0, start) : String.empty;\n                var sub = this.substr(start, length);\n                var suffix = this.substr(startRest, this.length - startRest);\n                result = prefix + sub.toUpperCase() + suffix;\n            }\n        }\n        return result;\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>String.prototype.capitalize=function(all){\n    if(all){\n       return this.split(' ').map(function(e){return e.capitalize();}).join(' ');    \n    }else{\n         return this.charAt(0).toUpperCase() + this.slice(1);\n    } \n}\n</code></pre>\n\n<p>And then  :  </p>\n\n<pre><code> \"capitalize just first word\".capitalize(); ==&gt;\"Capitalize just first word\"\n  \"captitalize all words\".capitalize(true); ==&gt;\"Captitalize All Words\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>I have been trying to do same (that is; capitalize the first letter in a string while it is being typed) using jQuery. I searched all through the web for the answer but couldn't find it. However I was able to get a work around using the on() function in jQuery like so:</p>\n\n<pre><code>$(\"#FirstNameField\").on(\"keydown\",function(e){\n        var str = $(\"#FirstNameField\").val();\n        if(str.substring()===str.substring(0,1)){\n            $(\"#FirstNameField\").val(str.substring(0,1).toUpperCase());\n        } \n     });\n</code></pre>\n\n<p>This function actually capitalizes the first letter while the data entrant is typing contineously.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is my attempt to make a universal function that can capitalize only the first letter, or the first letter of each word, including words separated by a dash (like some first names in French).</p>\n\n<p>By default, the function capitalizes only the first letter and leave the rest untouched.</p>\n\n<p><strong>Parameters</strong> :<br>\n<strong>lc</strong>: <em>true</em> to lowercase the rest of the word(s)<br>\n<strong>all</strong>: <em>true</em> to capitalize each words  </p>\n\n<pre><code>if(typeof String.prototype.capitalize !== 'function') {\n    String.prototype.capitalize = function( lc, all ) {\n        if( all ) {\n            return this.split( \" \" ).map( function( currentValue, index, array ) {\n                return currentValue.capitalize( lc );\n            }, this ).join( \" \" ).split( \"-\" ).map( function( currentValue, index, array ) {\n                return currentValue.capitalize( false );\n            }, this ).join( \"-\" );\n        }\n        else {\n            return lc ? this.charAt( 0 ).toUpperCase() + this.slice( 1 ).toLowerCase() : this.charAt( 0 ).toUpperCase() + this.slice( 1 );\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Or you could use <a href=\"http://sugarjs.com/\" rel=\"nofollow\">Sugar.js</a> <a href=\"http://sugarjs.com/api/String/capitalize\" rel=\"nofollow\">capitalize()</a></p>\n\n<p>Example:</p>\n\n<pre><code>'hello'.capitalize()           -&gt; 'Hello'\n'hello kitty'.capitalize()     -&gt; 'Hello kitty'\n'hello kitty'.capitalize(true) -&gt; 'Hello Kitty'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var str = \"test string\";\nstr = str.substring(0,1).toUpperCase() + str.substring(1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>If you use <a href=\"http://underscorejs.org/\">underscore.js</a> or <a href=\"http://lodash.com/\">Lo-Dash</a>, the <a href=\"https://github.com/epeli/underscore.string\">underscore.string</a> library provides string extensions, including capitalize:</p>\n\n<blockquote>\n  <p>_.capitalize(string) Converts first letter of the string to\n  uppercase.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code>_.capitalize(\"foo Bar\") == \"Foo Bar\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's my version, I think it's easy to understand and elegant too.</p>\n\n<pre><code>var str = \"foo bar baz\";\n\n//capitalize\nstr.split(\" \").map(function(i){return i[0].toUpperCase() + i.substring(1)}).join(\" \");\n//return \"Foo Bar Baz\"\n\n//capitalize first letter\nstr.charAt(0).toUpperCase() + str.slice(1)\n//return \"Foo bar baz\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is what I use religiously: </p>\n\n<pre><code>function capitalizeMe(str,force){\n    str=force ? str.toLowerCase() : str;  \n    return str.replace(/(\\b)([a-zA-Z])/g,\n    function(firstLetter){\n        return firstLetter.toUpperCase();\n    });\n}\n\nvar firstName = capitalizeMe($firstName.val());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var str = \"ruby java\";\n\nalert(str.charAt(0).toUpperCase() + str.substring(1));\n</code></pre>\n\n<p>it will return <code>\"Ruby java\"</code></p>\n\n<p><a href=\"http://jsfiddle.net/amitpandya/908c8e2v/\">http://jsfiddle.net/amitpandya/908c8e2v/</a></p>\n\n<p><a href=\"http://jsfiddle.net/amitpandya/908c8e2v/embedded/result/\">result link in jsfiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Use this module of NodeJS <a href=\"http://stringjs.com/\" rel=\"nofollow\">http://stringjs.com/</a> package to capitalize your String </p>\n\n<pre><code>var S = require('string');\nS('jon').capitalize().s; //'Jon'\nS('JP').capitalize().s; //'Jp'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var capitalizeMe = \"string not starting with capital\"\n</code></pre>\n\n<p>Capitalize with substr</p>\n\n<pre><code>var capitalized = capitalizeMe.substr(0, 1).toUpperCase() + capitalizeMe.substr(1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I use something along these lines in my dev environment esp when working with APIs like HTTP:</p>\n\n<p>Suppose you have an HTTP header that you'd like to capitalize every initial letter in its name and add the hyphen between its constituent words, you may achieve something like that using this basic &amp; simple routine:</p>\n\n<pre><code>'access control allow origin'\n    .replace(/\\b\\w/g, function (match) {\n        return match.toUpperCase();\n    })\n    .split(' ')\n    .join('-');\n\n// Output: 'Access-Control-Allow-Origin'\n</code></pre>\n\n<p>It is not maybe the most elegant and attractive function definition out there but it certainly gets the job done.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function capitalize(string) {\n    return string.replace(/^./, capitalize.call.bind(\"\".toUpperCase));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I capitalize the first character of a string, but not change the case of any of the other letters?</p>\n\n<p>For example:</p>\n\n<ul>\n<li>this is a test -> This is a test</li>\n<li>the Eiffel Tower -> The Eiffel Tower</li>\n<li>/index.html -> /index.html</li>\n</ul>\n",
            "last_activity_date": 1425928107,
            "question_id": 1026069,
            "score": 1125,
            "tags": [
                "javascript",
                "string",
                "capitalize"
            ],
            "title": "Capitalize the first letter of string in JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>function include(arr,obj) {\n    return (arr.indexOf(obj) != -1);\n}\n</code></pre>\n\n<p>EDIT: \nThis will not work on IE6, 7 or 8 though. The best workaround is to define it yourself if it's not present:</p>\n\n<ol>\n<li><p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\">Mozilla's</a> (ECMA-262) version:</p>\n\n<pre><code>  if (!Array.prototype.indexOf)\n  {\n\n       Array.prototype.indexOf = function(searchElement /*, fromIndex */)\n\n    {\n\n\n    \"use strict\";\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (len === 0)\n      return -1;\n\n    var n = 0;\n    if (arguments.length &gt; 0)\n    {\n      n = Number(arguments[1]);\n      if (n !== n)\n        n = 0;\n      else if (n !== 0 &amp;&amp; n !== (1 / 0) &amp;&amp; n !== -(1 / 0))\n        n = (n &gt; 0 || -1) * Math.floor(Math.abs(n));\n    }\n\n    if (n &gt;= len)\n      return -1;\n\n    var k = n &gt;= 0\n          ? n\n          : Math.max(len - Math.abs(n), 0);\n\n    for (; k &lt; len; k++)\n    {\n      if (k in t &amp;&amp; t[k] === searchElement)\n        return k;\n    }\n    return -1;\n  };\n\n}\n</code></pre></li>\n<li><p><a href=\"http://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array#144172\">Daniel James</a>'s version:</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function (obj, fromIndex) {\n    if (fromIndex == null) {\n        fromIndex = 0;\n    } else if (fromIndex &lt; 0) {\n        fromIndex = Math.max(0, this.length + fromIndex);\n    }\n    for (var i = fromIndex, j = this.length; i &lt; j; i++) {\n        if (this[i] === obj)\n            return i;\n    }\n    return -1;\n  };\n}\n</code></pre></li>\n<li><p><a href=\"http://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array#144664\">roosteronacid</a>'s version:</p>\n\n<pre><code>Array.prototype.hasObject = (\n  !Array.indexOf ? function (o)\n  {\n    var l = this.length + 1;\n    while (l -= 1)\n    {\n        if (this[l - 1] === o)\n        {\n            return true;\n        }\n    }\n    return false;\n  } : function (o)\n  {\n    return (this.indexOf(o) !== -1);\n  }\n);\n</code></pre></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 436
                },
                {
                    "body": "<p>If the array is unsorted, there isn't really a better way (aside from using the above-mentioned indexOf, which I think amounts to the same thing).  If the array is sorted, you can do a binary search, which works like this:</p>\n\n<ol>\n<li>Pick the middle element of the array.</li>\n<li>Is the element you're looking for bigger than the element you picked?  If so, you've eliminated the bottom half of the array.  If it isn't, you've eliminated the top half.</li>\n<li>Pick the middle element of the remaining half of the array, and continue as in step 2, eliminating halves of the remaining array.  Eventually you'll either find your element or have no array left to look through.</li>\n</ol>\n\n<p>Binary search runs in time proportional to the logarithm of the length of the array, so it can be much faster than looking at each individual element.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here's some meta-knowledge for you - if you want to know what you can do with an Array, check the documentation - here's the Array page for Mozilla</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array</a></p>\n\n<p>There you'll see reference to indexOf, added in Javascript 1.6</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It depends on your purpose. If you program for the Web, avoid <code>indexOf</code>, it isn't supported by Internet&nbsp;Explorer&nbsp;6 (lot of them still used!), or do conditional use:</p>\n\n<pre><code>if (yourArray.indexOf !== undefined) result = yourArray.indexOf(target);\nelse result = customSlowerSearch(yourArray, target);\n</code></pre>\n\n<p><code>indexOf</code> is probably coded in native code, so it is faster than anything you can do in JavaScript (except binary search/dichotomy if the array is appropriate).\nNote: it is a question of taste, but I would do a <code>return false;</code> at the end of your routine, to return a true Boolean...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>First, implement <code>indexOf</code> in JavaScript for browsers that don't already have it. For example, see <a href=\"http://erik.eae.net/playground/arrayextras/arrayextras.js\">Erik Arvidsson's array extras</a> (also, the <a href=\"http://erik.eae.net/archives/2005/06/05/17.53.19/\">associated blog post</a>). And then you can use <code>indexOf</code> without worrying about browser support. Here's a slightly optimised version of his <code>indexOf</code> implementation:</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (obj, fromIndex) {\n        if (fromIndex == null) {\n            fromIndex = 0;\n        } else if (fromIndex &lt; 0) {\n            fromIndex = Math.max(0, this.length + fromIndex);\n        }\n        for (var i = fromIndex, j = this.length; i &lt; j; i++) {\n            if (this[i] === obj)\n                return i;\n        }\n        return -1;\n    };\n}\n</code></pre>\n\n<p>It's changed to store the length so that it doesn't need to look it up every iteration. But the difference isn't huge. A less general purpose function might be faster:</p>\n\n<pre><code>var include = Array.prototype.indexOf ?\n    function(arr, obj) { return arr.indexOf(obj) !== -1; } :\n    function(arr, obj) {\n        for(var i = -1, j = arr.length; ++i &lt; j;)\n            if(arr[i] === obj) return true;\n        return false;\n    };\n</code></pre>\n\n<p>I prefer using the standard function and leaving this sort of micro-optimization for when it's really needed. But if you're keen on micro-optimization I adapted the <a href=\"https://blogs.oracle.com/greimer/resource/loop-test.html\">benchmarks</a> that roosterononacid linked to in the comments, to <a href=\"http://obscurity.nfshost.com/x/bench.html\">benchmark searching in arrays</a>. They're pretty crude though, a full investigation would test arrays with different types, different lengths and finding objects that occur in different places.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>If you are using jQuery: </p>\n\n<p><a href=\"http://api.jquery.com/jQuery.inArray/\">http://api.jquery.com/jQuery.inArray/</a></p>\n",
                    "is_accepted": false,
                    "score": 150
                },
                {
                    "body": "<p>A robust way to check if an object is an array in javascript is detailed here:</p>\n\n<p>Here are two functions from the <a href=\"http://xajs.chalmershouse.com\" rel=\"nofollow\">xa.js</a> framework which I attach to a <code>utils = {}</code> \u2018container\u2019. These should help you properly detect arrays.</p>\n\n<pre><code>var utils = {};\n\n/**\n * utils.isArray\n *\n * Best guess if object is an array.\n */\nutils.isArray = function(obj) {\n     // do an instanceof check first\n     if (obj instanceof Array) {\n         return true;\n     }\n     // then check for obvious falses\n     if (typeof obj !== 'object') {\n         return false;\n     }\n     if (utils.type(obj) === 'array') {\n         return true;\n     }\n     return false;\n };\n\n/**\n * utils.type\n *\n * Attempt to ascertain actual object type.\n */\nutils.type = function(obj) {\n    if (obj === null || typeof obj === 'undefined') {\n        return String (obj);\n    }\n    return Object.prototype.toString.call(obj)\n        .replace(/\\[object ([a-zA-Z]+)\\]/, '$1').toLowerCase();\n};\n</code></pre>\n\n<p>If you then want to check if an object is in an array, I would also include this code:</p>\n\n<pre><code>/**\n * Adding hasOwnProperty method if needed.\n */\nif (typeof Object.prototype.hasOwnProperty !== 'function') {\n    Object.prototype.hasOwnProperty = function (prop) {\n        var type = utils.type(this);\n        type = type.charAt(0).toUpperCase() + type.substr(1);\n        return this[prop] !== undefined\n            &amp;&amp; this[prop] !== window[type].prototype[prop];\n    };\n}\n</code></pre>\n\n<p>And finally this in_array function:</p>\n\n<pre><code>function in_array (needle, haystack, strict) {\n    var key;\n\n    if (strict) {\n        for (key in haystack) {\n            if (!haystack.hasOwnProperty[key]) continue;\n\n            if (haystack[key] === needle) {\n                return true;\n            }\n        }\n    } else {\n        for (key in haystack) {\n            if (!haystack.hasOwnProperty[key]) continue;\n\n            if (haystack[key] == needle) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>assuming .indexOf() is implemented can implement something similar to obj.hasOwnProperty(prop) </p>\n\n<pre><code>Object.defineProperty( Array.prototype,'has',\n         {\n            value:function(o){return this.indexOf(o)!=-1},\n            // writable:false,\n            // enumerable:false\n         }\n   )\n</code></pre>\n\n<p>now the new method can be used like</p>\n\n<pre><code>[22 ,'a', {prop:'x'}].has(12) \n</code></pre>\n\n<p>returning  false </p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/237104/array-containsobj-in-javascript\">array.contains(obj) in JavaScript</a>  </p>\n</blockquote>\n\n\n\n<p>What is the best way to find if an object is in an array?</p>\n\n<p>This is the best way I know:</p>\n\n<pre><code>function include(arr, obj) {\n    for(var i=0; i&lt;arr.length; i++) {\n        if (arr[i] == obj) return true;\n    }\n}\n\ninclude([1,2,3,4], 3); // true\ninclude([1,2,3,4], 6); // undefined\n</code></pre>\n",
            "last_activity_date": 1392376424,
            "question_id": 143847,
            "score": 412,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Best way to find an item in a JavaScript array?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>if you're interested in an eval-based solution</p>\n\n<pre><code>function createSomething() {\n\tvar q = [];\n\tfor(var i = 0; i &lt; arguments.length; i++)\n\t\tq.push(\"arguments[\" + i + \"]\");\n\treturn eval(\"new Something(\" + q.join(\",\") + \")\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You could move the init stuff out into a separate method of <code>Something</code>'s prototype:</p>\n\n<pre><code>function Something() {\n    // Do nothing\n}\n\nSomething.prototype.init = function() {\n    // Do init stuff\n};\n\nfunction createSomething() {\n    var s = new Something();\n    s.init.apply(s, arguments);\n    return s;\n}\n\nvar s = createSomething(a,b,c); // 's' is an instance of Something\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's a generalized solution that can call any constructor (except native constructors that behave differently when called as functions, like <code>String</code>, <code>Number</code>, <code>Date</code>, etc.) with an array of arguments:</p>\n\n<pre><code>function construct(constructor, args) {\n    function F() {\n        return constructor.apply(this, args);\n    }\n    F.prototype = constructor.prototype;\n    return new F();\n}\n</code></pre>\n\n<p>An object created by calling <code>construct(Class, [1, 2, 3])</code> would be identical to an object created with <code>new Class(1, 2, 3)</code>.</p>\n\n<p>You could also make a more specific version so you don't have to pass the constructor every time. This is also slightly more efficient, since it doesn't need to create a new instance of the inner function every time you call it.</p>\n\n<pre><code>var createSomething = (function() {\n    function F(args) {\n        return Something.apply(this, args);\n    }\n    F.prototype = Something.prototype;\n\n    return function(args) {\n        return new F(args);\n    }\n})();\n</code></pre>\n\n<p>The reason for creating and calling the outer anonymous function like that is to keep function <code>F</code> from polluting the global namespace. It's sometimes called the module pattern.</p>\n\n<p><strong>[UPDATE]</strong></p>\n\n<p>For those who want to use this in TypeScript, since TS gives an error if <code>F</code> returns anything:</p>\n\n<pre><code>function construct(constructor, args) {\n    function F() : void {\n        constructor.apply(this, args);\n    }\n    F.prototype = constructor.prototype;\n    return new F();\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 182
                },
                {
                    "body": "<p>You can't call a constructor with a variable number of arguments like you want with the <code>new</code> operator.</p>\n\n<p>What you can do is change the constructor slightly. Instead of:</p>\n\n<pre><code>function Something() {\n    // deal with the \"arguments\" array\n}\nvar obj = new Something.apply(null, [0, 0]);  // doesn't work!\n</code></pre>\n\n<p>Do this instead:</p>\n\n<pre><code>function Something(args) {\n    // shorter, but will substitute a default if args.x is 0, false, \"\" etc.\n    this.x = args.x || SOME_DEFAULT_VALUE;\n\n    // longer, but will only put in a default if args.x is not supplied\n    this.x = (args.x !== undefined) ? args.x : SOME_DEFAULT_VALUE;\n}\nvar obj = new Something({x: 0, y: 0});\n</code></pre>\n\n<p>Or if you must use an array:</p>\n\n<pre><code>function Something(args) {\n    var x = args[0];\n    var y = args[1];\n}\nvar obj = new Something([0, 0]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An improved version of the accepted answer. This form has the slight performance benefits obtained by storing the temp class in a closure, as well as the flexibility of having one function able to be used to create any class</p>\n\n<pre><code>var applyCtor = function(){\n    var tempCtor = function() {};\n    return function(ctor, args){\n        tempCtor.prototype = ctor.prototype;\n        var instance = new tempCtor();\n        ctor.prototype.constructor.apply(instance,args);\n        return instance;\n    }\n}();\n</code></pre>\n\n<p>This would be used by calling <code>applyCtor(class, [arg1, arg2, argn]);</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Suppose you've got an Items constructor which slurps up all the arguments you throw at it:</p>\n\n<pre><code>function Items () {\n    this.elems = [].slice.call(arguments);\n}\n\nItems.prototype.sum = function () {\n    return this.elems.reduce(function (sum, x) { return sum + x }, 0);\n};\n</code></pre>\n\n<p>You can create an instance with Object.create() and then .apply() with that instance:</p>\n\n<pre><code>var items = Object.create(Items.prototype);\nItems.apply(items, [ 1, 2, 3, 4 ]);\n\nconsole.log(items.sum());\n</code></pre>\n\n<p>Which when run prints 10 since 1 + 2 + 3 + 4 == 10:</p>\n\n<pre><code>$ node t.js\n10\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>See also how CoffeeScript does it.</p>\n\n<p><code>s = new Something([a,b,c]...)</code></p>\n\n<p>becomes:</p>\n\n<pre><code>var s;\ns = (function(func, args, ctor) {\n  ctor.prototype = func.prototype;\n  var child = new ctor, result = func.apply(child, args);\n  return typeof result === \"object\" ? result : child;\n})(Something, [a, b, c], function() {});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It's also intresting to see how the issue of reusing the temporary <code>F()</code> constructor, was addressed by using <code>arguments.callee</code>, aka the creator/factory function itself:\n<a href=\"http://www.dhtmlkitchen.com/?category=/JavaScript/&amp;date=2008/05/11/&amp;entry=Decorator-Factory-Aspect\" rel=\"nofollow\">http://www.dhtmlkitchen.com/?category=/JavaScript/&amp;date=2008/05/11/&amp;entry=Decorator-Factory-Aspect</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Shouldn't this work?  Half-awake, didn't read closely.</p>\n\n<pre><code>var Storage = undefined;\n\nreturn ((Storage = (new Something(...))) == undefined? (undefined) : (Storage.apply(...)));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Thanks to posts here I've used it this way:</p>\n\n<pre><code>SomeClass = function(arg1, arg2) {\n    // ...\n}\n\nReflectUtil.newInstance('SomeClass', 5, 7);\n</code></pre>\n\n<p>and implementation:</p>\n\n<pre><code>/**\n * @param strClass:\n *          class name\n * @param optionals:\n *          constructor arguments\n */\nReflectUtil.newInstance = function(strClass) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    var clsClass = eval(strClass);\n    function F() {\n        return clsClass.apply(this, args);\n    }\n    F.prototype = clsClass.prototype;\n    return new F();\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I prefer this approach as it's cleaner and more straightforward:</p>\n\n<pre><code>var MyClass = function(arg1, arg2){\n};\n\n//define a class-level create method \nMyClass.create = function(arg1, arg2){\n   return new MyClass(arg1, arg2);\n};\n\n//from with some other method call\nvar instance = MyClass.create.apply(this, arguments); //'this' is irrelevant\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible/#1608546\">Matthew Crumley's solutions</a> in CoffeeScript:</p>\n\n<pre><code>construct = (constructor, args) -&gt;\n    F = -&gt; constructor.apply this, args\n    F.prototype = constructor.prototype\n    new F\n</code></pre>\n\n<p>or</p>\n\n<pre><code>createSomething = (-&gt;\n    F = (args) -&gt; Something.apply this, args\n    F.prototype = Something.prototype\n    return -&gt; new Something arguments\n)()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This answer is a little late, but figured anyone who sees this might be able to use it. There is a way to return a new object using apply. Though it requires one little change to your object declaration.</p>\n\n<pre><code>function testNew() {\n    if (!( this instanceof arguments.callee ))\n        return arguments.callee.apply( new arguments.callee(), arguments );\n    this.arg = Array.prototype.slice.call( arguments );\n    return this;\n}\n\ntestNew.prototype.addThem = function() {\n    var newVal = 0,\n        i = 0;\n    for ( ; i &lt; this.arg.length; i++ ) {\n        newVal += this.arg[i];\n    }\n    return newVal;\n}\n\ntestNew( 4, 8 ) === { arg : [ 4, 8 ] };\ntestNew( 1, 2, 3, 4, 5 ).addThem() === 15;\n</code></pre>\n\n<p>For the first <code>if</code> statement to work in <code>testNew</code> you have to <code>return this;</code> at the bottom of the function. So as an example with your code:</p>\n\n<pre><code>function Something() {\n    // init stuff\n    return this;\n}\nfunction createSomething() {\n    return Something.apply( new Something(), arguments );\n}\nvar s = createSomething( a, b, c );\n</code></pre>\n\n<p><strong>Update:</strong> I've changed my first example to sum any number of arguments, instead of just two.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>With ECMAScipt5's <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind</code></a> things get pretty clean:</p>\n\n<pre><code>function newCall(Cls) {\n    return new (Function.prototype.bind.apply(Cls, arguments));\n    // or even\n    // return new (Cls.bind.apply(Cls, arguments));\n    // if you know that Cls.bind has not been overwritten\n}\n</code></pre>\n\n<p>It can be used as follows:</p>\n\n<pre><code>var s = newCall(Something, a, b, c);\n</code></pre>\n\n<p>or even directly:</p>\n\n<pre><code>var s = new (Function.prototype.bind.call(Something, null, a, b, c));\n\nvar s = new (Function.prototype.bind.apply(Something, [null, a, b, c]));\n</code></pre>\n\n<p>This and the <a href=\"http://stackoverflow.com/a/1607170/27862\">eval-based solution</a> are the only ones that always work, even with special constructors like <code>Date</code>:</p>\n\n<pre><code>var date = newCall(Date, 2012, 1);\nconsole.log(date instanceof Date); // true\n</code></pre>\n\n<hr>\n\n<p><strong>edit</strong></p>\n\n<p>A bit of explanation: \nWe need to run <code>new</code> on a function that takes a limited number of arguments. The <code>bind</code> method allows us to do it like so:</p>\n\n<pre><code>var f = Cls.bind(anything, arg1, arg2, ...);\nresult = new f();\n</code></pre>\n\n<p>The <code>anything</code> parameter doesn't matter much, since the <code>new</code> keyword resets <code>f</code>'s context. However, it is required for syntactical reasons. Now, for the <code>bind</code> call: We need to pass a variable number of arguments, so this does the trick:</p>\n\n<pre><code>var f = Cls.bind.apply(Cls, [anything, arg1, arg2, ...]);\nresult = new f();\n</code></pre>\n\n<p>Let's wrap that in a function. <code>Cls</code> is passed as arugment 0, so it's gonna be our <code>anything</code>.</p>\n\n<pre><code>function newCall(Cls /*, arg1, arg2, ... */) {\n    var f = Cls.bind.apply(Cls, arguments);\n    return new f();\n}\n</code></pre>\n\n<p>Actually, the temporary <code>f</code> variable is not needed at all:</p>\n\n<pre><code>function newCall(Cls /*, arg1, arg2, ... */) {\n    return new (Cls.bind.apply(Cls, arguments))();\n}\n</code></pre>\n\n<p>Finally, we should make sure that <code>bind</code> is really what we need. (<code>Cls.bind</code> may have been overwritten). So replace it by <code>Function.prototype.bind</code>, and we get the final result as above.</p>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>Any function (even a constructor) can take a variable number of arguments. Each function has an \"arguments\" variable which can be cast to an array with <code>[].slice.call(arguments)</code>.</p>\n\n<pre><code>function Something(){\n  this.options  = [].slice.call(arguments);\n\n  this.toString = function (){\n    return this.options.toString();\n  };\n}\n\nvar s = new Something(1, 2, 3, 4);\nconsole.log( 's.options === \"1,2,3,4\":', (s.options == '1,2,3,4') );\n\nvar z = new Something(9, 10, 11);\nconsole.log( 'z.options === \"9,10,11\":', (z.options == '9,10,11') );\n</code></pre>\n\n<p>The above tests produce the following output:</p>\n\n<pre><code>s.options === \"1,2,3,4\": true\nz.options === \"9,10,11\": true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@Matthew\nI think it's better to fix the constructor property also.</p>\n\n<pre><code>// Invoke new operator with arbitrary arguments\n// Holy Grail pattern\nfunction invoke(constructor, args) {\n    var f;\n    function F() {\n        // constructor returns **this**\n        return constructor.apply(this, args);\n    }\n    F.prototype = constructor.prototype;\n    f = new F();\n    f.constructor = constructor;\n    return f;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>function createSomething() {\n    var args = Array.prototype.concat.apply([null], arguments);\n    return new (Function.prototype.bind.apply(Something, args));\n}\n</code></pre>\n\n<p>If your target browser doesn't support ECMAScript 5 <code>Function.prototype.bind</code>, the code won't work. It is not very likely though, see <a href=\"http://kangax.github.io/es5-compat-table/#Function.prototype.bind\" rel=\"nofollow\">compatibilty table</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function FooFactory() {\n    var prototype, F = function(){};\n\n    function Foo() {\n        var args = Array.prototype.slice.call(arguments),\n            i;     \n        for (i = 0, this.args = {}; i &lt; args.length; i +=1) {\n            this.args[i] = args[i];\n        }\n        this.bar = 'baz';\n        this.print();\n\n        return this;\n    }\n\n    prototype = Foo.prototype;\n    prototype.print = function () {\n        console.log(this.bar);\n    };\n\n    F.prototype = prototype;\n\n    return Foo.apply(new F(), Array.prototype.slice.call(arguments));\n}\n\nvar foo = FooFactory('a', 'b', 'c', 'd', {}, function (){});\nconsole.log('foo:',foo);\nfoo.print();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is my version of <code>createSomething</code>:</p>\n\n<pre><code>function createSomething() {\n    var obj = {};\n    obj = Something.apply(obj, arguments) || obj;\n    obj.__proto__ = Something.prototype; //Object.setPrototypeOf(obj, Something.prototype); \n    return o;\n}\n</code></pre>\n\n<p>Based on that, I tried to simulate the <code>new</code> keyword of JavaScript: </p>\n\n<pre><code>//JavaScript 'new' keyword simulation\nfunction new2() {\n    var obj = {}, args = Array.prototype.slice.call(arguments), fn = args.shift();\n    obj = fn.apply(obj, args) || obj;\n    Object.setPrototypeOf(obj, fn.prototype); //or: obj.__proto__ = fn.prototype;\n    return obj;\n}\n</code></pre>\n\n<p>I tested it and it seems that it works perfectly fine for all scenarios. It also works on native constructors like <code>Date</code>. Here are some tests:</p>\n\n<pre><code>//test\nnew2(Something);\nnew2(Something, 1, 2);\n\nnew2(Date);         //\"Tue May 13 2014 01:01:09 GMT-0700\" == new Date()\nnew2(Array);        //[]                                  == new Array()\nnew2(Array, 3);     //[undefined \u00d7 3]                     == new Array(3)\nnew2(Object);       //Object {}                           == new Object()\nnew2(Object, 2);    //Number {}                           == new Object(2)\nnew2(Object, \"s\");  //String {0: \"s\", length: 1}          == new Object(\"s\")\nnew2(Object, true); //Boolean {}                          == new Object(true)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As a late answer I though I would just drop this here as a more complete solution using many of the principals already outlined here. </p>\n\n<p><a href=\"https://github.com/iamlothian/Implement.js\" rel=\"nofollow\">Implements.js</a></p>\n\n<p>To get you started, here is a basic usage:</p>\n\n<pre><code>var a = function(){\n    this.propa = 'a';\n}\nvar b = function(){\n    this.propb = 'b'\n}\nvar c = Function.Implement(a, b); // -&gt; { propa: 'a', propb: 'b' }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just came across this problem, and I solved it like this: </p>\n\n<pre><code>function instantiate(ctor) {\n    switch (arguments.length) {\n        case 1: return new ctor();\n        case 2: return new ctor(arguments[1]);\n        case 3: return new ctor(arguments[1], arguments[2]);\n        case 4: return new ctor(arguments[1], arguments[2], arguments[3]);\n        //...\n        default: throw new Error('instantiate: too many parameters');\n    }\n}\n\nfunction Thing(a, b, c) {\n    console.log(a);\n    console.log(b);\n    console.log(c);\n}\n\nvar thing = instantiate(Thing, 'abc', 123, {x:5});\n</code></pre>\n\n<p>Yeah, it's a bit ugly, but it solves the problem, and it's dead simple.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://programmers.stackexchange.com/a/141220\">This</a> might be an inefficient way to approach this question, but I think it is straightforward enough for me to understand.</p>\n\n<pre><code>function createSomething(){\n    // use 'new' operator to instantiate a 'Something' object\n    var tmp = new Something(); \n\n    // If the interpreter supports [JavaScript 1.8.5][2], use 'Object.create'\n    // var tmp = Object.create(Something.prototype); \n\n    // calling the constructor again to initialize the object\n    Something.apply(tmp, arguments); \n    return tmp;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>In JavaScript, I want to create an object instance (via the <code>new</code> operator), but pass an arbitrary number of arguments to the constructor. Is this possible?</p>\n\n<p>What I want to do is something like this (but the code below does not work):</p>\n\n<pre><code>function Something(){\n    // init stuff\n}\nfunction createSomething(){\n    return new Something.apply(null, arguments);\n}\nvar s = createSomething(a,b,c); // 's' is an instance of Something\n</code></pre>\n\n<hr>\n\n<p><strong>The Answer</strong></p>\n\n<p>From the responses here, it became clear that there's no in-built way to call <code>.apply()</code> with the <code>new</code> operator. However, people suggested a number of really interesting solutions to the problem.</p>\n\n<p>My preferred solution was <a href=\"http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible/#1608546\">this one from Matthew Crumley</a> (I've modified it to pass the <code>arguments</code> property):</p>\n\n<pre><code>var createSomething = (function() {\n    function F(args) {\n        return Something.apply(this, args);\n    }\n    F.prototype = Something.prototype;\n\n    return function() {\n        return new F(arguments);\n    }\n})();\n</code></pre>\n",
            "last_activity_date": 1422715760,
            "question_id": 1606797,
            "score": 206,
            "tags": [
                "javascript",
                "oop",
                "class",
                "inheritance",
                "constructor"
            ],
            "title": "Use of .apply() with &#39;new&#39; operator. Is this possible?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I think IE has always supported this (at least starting from IE4) and you can access them from JS. They were called 'expando properties'. See <a href=\"http://msdn.microsoft.com/en-us/library/bb263996%28VS.85%29.aspx\" rel=\"nofollow\">old MSDN article</a></p>\n\n<p>This behaviour can be disabled by setting the expando <em>property</em> to false on a DOM element (it's true by default, so the expando <em>properties</em> work by default).</p>\n\n<p>Edit: fixed the URL</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can retrieve values of custom (or your own) attributes using <code>getAttribute</code>. Following your example with</p>\n\n<pre><code>&lt;div id=\"geoff\" data-geoff=\"geoff de geoff\"&gt;\n</code></pre>\n\n<p>I can get the value of <code>data-geoff</code> using</p>\n\n<pre><code>var geoff = document.getElementById(\"geoff\");\nalert(geoff.getAttribute(\"data-geoff\"));\n</code></pre>\n\n<p>See <a href=\"http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\">MSDN</a>. And although it is mentioned there that you need IE7 to get this to work, I tested this a while ago with IE6 and it functioned correctly (even in quirks mode).</p>\n\n<p>But this has nothing to do with HTML5-specific attributes, of course.</p>\n",
                    "is_accepted": true,
                    "score": 129
                },
                {
                    "body": "<p><strong>Yes, they work.</strong></p>\n\n<p>IE has supported <code>getAttribute()</code> from IE4 which is what jQuery uses internally for <code>data()</code>.</p>\n\n<pre><code>data = elem.getAttribute( \"data-\" + key ); // Line 1606, jQuery.1.5.2.js\n</code></pre>\n\n<p>So you can either use jQuery's <code>.data()</code> method or plain vanilla JavaScript:</p>\n\n<p><strong>Sample HTML</strong></p>\n\n<pre><code>&lt;div id=\"some-data\" data-name=\"Tom\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p><strong>Javascript</strong></p>\n\n<pre><code>var el = document.getElementById(\"some-data\");\nvar name = el.getAttribute(\"data-name\");\nalert(name);\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>var name = $(\"#some-data\").data(\"name\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 127
                },
                {
                    "body": "<p>Not only does IE6 not support the HTML5 Data Attribute feature, in fact virtually <em>no</em> current browser supports them! The only exception at the moment is Chrome.</p>\n\n<p>You are perfectly at liberty to use <code>data-geoff=\"geoff de geoff\"</code> as an attribute, but only Chrome of the current browser versions will give you the <code>.dataGeoff</code> property.</p>\n\n<p>Fortunately, <em>all</em> current browsers - including IE6 - can reference unknown attributes using the standard DOM <code>.getAttribute()</code> method, so <code>.getAttribute(\"data-geoff\")</code> will work everywhere.</p>\n\n<p>In the very near future, new versions of Firefox and Safari will start to support the data attributes, but given that there's a perfectly good way of accessessing it that works in all browsers, then there's really no reason to be using the HTML5 method that will only work for some of your visitors.</p>\n\n<p>You can see more about the current state of support for this feature at <a href=\"http://caniuse.com/#search=dataset\">CanIUse.com</a>.</p>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you wanted to retrieve all of the custom data attributes at once like the dataset property in newer browsers, you could do the following. This is what I did and works great for me in ie7+.</p>\n\n<pre><code>function getDataSet(node) {\n    var dataset = {};\n    var attrs = node.attributes;\n    for (var i = 0; i &lt; attrs.length; i++) {\n        var attr = attrs.item(i);\n        // make sure it is a data attribute\n        if(attr.nodeName.match(new RegExp(/^data-/))) {\n            // remove the 'data-' from the string \n            dataset[attr.nodeName.replace(new RegExp('^data-'), '')] = attr.nodeValue;\n        }\n    }\n    return dataset;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In <strong>IE6</strong>, it may not work. For reference: <a href=\"https://msdn.microsoft.com/en-us/library/ie/ms536437%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396\" rel=\"nofollow\">MSDN</a>, <a href=\"http://note.taable.com\" rel=\"nofollow\">news reader</a></p>\n\n<p>I suggest using jQuery to handle most of the cases:</p>\n\n<pre><code>var geoff = $(\"#geoff\").data(\"data-geoff\");\nalert(geoff);\n</code></pre>\n\n<p>Try this in your coding.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Custom data attributes: <a href=\"http://dev.w3.org/html5/spec/Overview.html#embedding-custom-non-visible-data\">http://dev.w3.org/html5/spec/Overview.html#embedding-custom-non-visible-data</a></p>\n\n<p>When I say \u201cwork\u201d, I mean, if I\u2019ve got HTML like this:</p>\n\n<pre><code>&lt;div id=\"geoff\" data-geoff=\"geoff de geoff\"&gt;\n</code></pre>\n\n<p>will the following JavaScript:</p>\n\n<pre><code>var geoff = document.getElementById('geoff');\nalert(geoff.dataGeoff);\n</code></pre>\n\n<p>produce, in IE 6, an alert with \u201cgeoff de geoff\u201d in it?</p>\n",
            "last_activity_date": 1426067388,
            "question_id": 2412947,
            "score": 138,
            "tags": [
                "javascript",
                "internet-explorer",
                "html5",
                "internet-explorer-6",
                "custom-data-attribute"
            ],
            "title": "Do HTML5 custom data attributes \u201cwork\u201d in IE 6?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Check the <code>complete</code> and <code>naturalWidth</code> properties, in that order.</p>\n\n<p><a href=\"https://stereochro.me/ideas/detecting-broken-images-js\" rel=\"nofollow\">https://stereochro.me/ideas/detecting-broken-images-js</a></p>\n\n<pre><code>function IsImageOk(img) {\n    // During the onload event, IE correctly identifies any images that\n    // weren\u2019t downloaded as not complete. Others should too. Gecko-based\n    // browsers act like NS4 in that they report this incorrectly.\n    if (!img.complete) {\n        return false;\n    }\n\n    // However, they do have two very useful properties: naturalWidth and\n    // naturalHeight. These give the true size of the image. If it failed\n    // to load, either of these should be zero.\n\n    if (typeof img.naturalWidth !== \"undefined\" &amp;&amp; img.naturalWidth === 0) {\n        return false;\n    }\n\n    // No other way of checking: assume it\u2019s ok.\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>Another option is to trigger the <code>onload</code> and/or <code>onerror</code> events by creating an in memory image element and setting its <code>src</code> attribute to the original <code>src</code> attribute of the original image.  Here's an example of what I mean:</p>\n\n<pre><code>$(\"&lt;img/&gt;\")\n    .load(function() { console.log(\"image loaded correctly\"); })\n    .error(function() { console.log(\"error loading image\"); })\n    .attr(\"src\", $(originalImage).attr(\"src\"))\n;\n</code></pre>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": true,
                    "score": 128
                },
                {
                    "body": "<p>As I understand the .complete property is non-standard.  It may not be universal... I notice it seem to work differently in Firefox verses IE.  I am loading a number of images in javascript then checking if complete.  In Firefox, this seems to work great.  In IE, it doesn't because the images appear to be loading on another thread.  It works only if I put a delay between my assignment to image.src and when I check the image.complete property.  </p>\n\n<p>Using image.onload and image.onerror isn't working for me, either, because I need to pass a parameter to know which image I am talking about when the function is called.  Any way of doing that seems to fail because it actually seems to pass the same function, not different instances of the same function.  So the value I pass into it to identify the image always ends up being the last value in the loop.  I cannot think of any way around this problem.</p>\n\n<p>On Safari and Chrome, I am seeing the image.complete true and the naturalWidth set even when the error console shows a 404 for that image... and I intentionally removed that image to test this.  But the above works well for Firefox and IE.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is how I got it to work cross browser using a combination of the methods above (I also needed to insert images dynamically into the dom):</p>\n\n<pre><code>$('#domTarget').html('&lt;img src=\"\" /&gt;');\n\nvar url = '/some/image/path.png';\n\n$('#domTarget img').load(function(){}).attr('src', url).error(function() {\n    if ( isIE ) {\n       var thisImg = this;\n       setTimeout(function() {\n          if ( ! thisImg.complete ) {\n             $(thisImg).attr('src', '/web/css/img/picture-broken-url.png');\n          }\n       },250);\n    } else {\n       $(this).attr('src', '/web/css/img/picture-broken-url.png');\n    }\n});\n</code></pre>\n\n<p>Note: You will need to supply a valid boolean state for the isIE variable.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I tried many different ways and this way is the only one worked for me</p>\n\n<pre><code>//check all images on the page\n$('img').each(function(){\n    var img = new Image();\n    img.onload = function() {\n        console.log($(this).attr('src') + ' - done!');\n    }\n    img.src = $(this).attr('src');\n});\n</code></pre>\n\n<p>You could also add a callback function triggered once all images are loaded in the DOM and ready. This applies for dynamically added images too. <a href=\"http://jsfiddle.net/khaled450/nrAPk/\" rel=\"nofollow\">http://jsfiddle.net/khaled450/nrAPk/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>Realtime network detector - check network status without refreshing the page:</strong>\n(it's  not jquery, but tested, and 100% works:(tested on Firefox v25.0))</p>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>&lt;script&gt;\n function ImgLoad(myobj){\n   var randomNum = Math.round(Math.random() * 10000);\n   var oImg=new Image;\n   oImg.src=\"YOUR_IMAGELINK\"+\"?rand=\"+randomNum;\n   oImg.onload=function(){alert('Image succesfully loaded!')}\n   oImg.onerror=function(){alert('No network connection or image is not available.')}\n}\nwindow.onload=ImgLoad();\n&lt;/script&gt;\n\n&lt;button id=\"reloadbtn\" onclick=\"ImgLoad();\"&gt;Again!&lt;/button&gt;\n</code></pre>\n\n<p>if connection lost just press the Again button.</p>\n\n<p><strong>Update 1:</strong>\nAuto detect without refreshing the page:</p>\n\n<pre><code>&lt;script&gt;\n     function ImgLoad(myobj){\n       var randomNum = Math.round(Math.random() * 10000);\n       var oImg=new Image;\n       oImg.src=\"YOUR_IMAGELINK\"+\"?rand=\"+randomNum;\n       oImg.onload=function(){networkstatus_div.innerHTML=\"\";}\n       oImg.onerror=function(){networkstatus_div.innerHTML=\"Service is not available. Please check your Internet connection!\";}\n}\n\nnetworkchecker = window.setInterval(function(){window.onload=ImgLoad()},1000);\n&lt;/script&gt;\n\n&lt;div id=\"networkstatus_div\"&gt;&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use <a href=\"http://desandro.github.io/imagesloaded/\" rel=\"nofollow\"><code>imagesLoaded</code> javascript library</a>.</p>\n\n<p>Usable with plain Javascript and as a jQuery plugin.</p>\n\n<h3>Features:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/26732085/imagesloaded-javascript-library-what-is-the-browser-device-support\">officially supported by IE8+</a></li>\n<li>license: MIT</li>\n<li>dependencies: none</li>\n<li>weight (minified &amp; gzipped) : 7kb minified (light!)</li>\n</ul>\n\n<h3>Resources</h3>\n\n<ul>\n<li>Project on github: <a href=\"https://github.com/desandro/imagesloaded\" rel=\"nofollow\">https://github.com/desandro/imagesloaded</a></li>\n<li>Official website: <a href=\"http://imagesloaded.desandro.com/\" rel=\"nofollow\">http://imagesloaded.desandro.com/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/26927575/why-use-imagesloaded-javascript-library-versus-jquerys-window-load\">Why use imagesloaded javascript library versus jQuery&#39;s $(window).load()?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/26732085/imagesloaded-javascript-library-what-is-the-browser-device-support\">imagesloaded javascript library: what is the browser &amp; device support?</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I'm using JavaScript with the jQuery library to manipulate image thumbnails contained in a unordered list. When the image is loaded it does one thing, when an error occurs it does something else. I'm using jQuery load() and error() methods as events. <strong>After these events I check the image DOM element for the .complete to make sure the image wasn't already loaded before jQuery could register the events.</strong></p>\n\n<p><strong>It works correctly except when an error occurs before jQuery can register the events.</strong> The only solution I can think of is to use the img onerror attribute to store a \"flag\" somewhere globally (or on the node it's self) that says it failed so jQuery can check that \"store/node\" when checking .complete.</p>\n\n<p>Anyone have a better solution?</p>\n\n<p><strong>Edit: Bolded main points and added extra detail below:</strong>\nI'm checking if an image is complete (aka loaded) AFTER I add a load and error event on the image. That way, <strong>if the image was loaded before the events were registered, I will still know.</strong> If the image isn't loaded after the events then the events will take care of it when it does. The problem with this is, I can easily check if an image is loaded already, but <em>I can't tell if an error occurred instead.</em></p>\n",
            "last_activity_date": 1423658591,
            "question_id": 1977871,
            "score": 88,
            "tags": [
                "javascript",
                "jquery",
                "image",
                "dom",
                "javascript-events"
            ],
            "title": "Check if an image is loaded (no errors) in JavaScript"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>You cannot accomplish what you're asking without using Javascript. Any other technology you may choose to use can only help to compose the web page on the server side to be sent to the browser.</p>\n\n<p>There simply is no good solution, and there is no solution period without Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can do so with Javascript and/or an HTML attribute (which is really a Javascript event handler anyway) as <a href=\"http://www.codeproject.com/KB/aspnet/Disabling_the_right_click.aspx\">described here</a>:</p>\n\n<blockquote>\n<pre><code>&lt;script language=\"javascript\"&gt;\ndocument.onmousedown=disableclick;\nstatus=\"Right Click Disabled\";\nFunction disableclick(event)\n{\n  if(event.button==2)\n   {\n     alert(status);\n     return false;    \n   }\n}\n&lt;/script&gt;\n</code></pre>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n<pre><code>&lt;body oncontextmenu=\"return false\"&gt;\n...\n&lt;/body&gt;\n</code></pre>\n</blockquote>\n\n<p>That being said: <strong>DON'T DO IT.</strong></p>\n\n<p>Why? Because it achieves nothing other than annoying users. Also many browsers have a security option to disallow disabling of the right click (context) menu anyway.</p>\n\n<p>Not sure why you'd want to. If it's out of some misplaced belief that you can protect your source code or images that way, think again: you can't.</p>\n",
                    "is_accepted": true,
                    "score": 151
                },
                {
                    "body": "<p>First, you cannot achieve this without using a client side capability. This is where the javascript runs. </p>\n\n<p>Secondly, if you are trying to control what an end user can consume from your site, then you need to rethink how you display that information. An image has a public url that can be fetched via HTTP without the need for a browser.</p>\n\n<p>Authentication can control who has access to what resources. </p>\n\n<p>Embedded watermarking in images can prove that the image was from a specific person/company.</p>\n\n<p>At the end of the day, resource management is really user/guest managment.</p>\n\n<p>The first rule of the Internet, if you dont want it taken, dont make it public! </p>\n\n<p>The second rule of the Internet, if you dont want it taken, dont put it on the Internet!</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><strong>DON'T</strong></p>\n\n<p>Just, don't.</p>\n\n<p>No matter what you do, you can't prevent users from having full access to every bit of data on your website. Any Javascript you code can be rendered moot by simply turning off Javascript on the browser (or using a plugin like NoScript). Additionally, there's no way to disable the ability of any user to simply \"view source\" or \"view page info\" (or use wget) for your site.</p>\n\n<p>It's not worth the effort. It won't actually work. It will make your site actively hostile to users. They will notice this and stop visiting. There is no benefit to doing this, only wasted effort and lost traffic.</p>\n\n<p>Don't.</p>\n\n<p><strong>Update:</strong> It seems this little topic has proven quite controversial over time. Even so, I stand by this answer to this question. Sometimes the correct answer is advice instead of a literal response.</p>\n\n<p>People who stumble on this question in hopes of finding out how to create <em>custom</em> context menus should look elsewhere, such as these questions:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4495626/making-custom-right-click-context-menus-for-my-web-app\">Making custom right-click context menus for my web-app</a>, which relies on jQuery</li>\n<li><a href=\"http://stackoverflow.com/questions/4909167/how-to-add-a-custom-right-click-menu-to-a-webpage\">How to add a custom right-click menu to a webpage</a>, which uses pure javascript/html</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 104
                },
                {
                    "body": "<p>If your aim is to prevent people being able to download your images, as most people have said, disabling right click is pretty much ineffective.</p>\n\n<p>Assuming you are trying to protect images the alternative methods are -</p>\n\n<p>Using a flash player, users can't download them as such, but they could easily do a screen capture.</p>\n\n<p>If you want to be more akward, make the image the background of a div, containing a transparent image, \u00e0 la -</p>\n\n<pre><code>&lt;div style=\"background-image: url(YourImage.jpg);\"&gt;\n   &lt;img src=\"transparent.gif\"/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>will be enough to deter the casual theft of your images (see below for a sample), but as with all these techniques, is trivial to defeat with a basic understanding of html.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Of course, as per all other comments here, this simply doesn't work.</p>\n\n<p>I did once construct a simple java applet for a client which forced any capture of of an image to be done via screen capture and you might like to consider a similar technique.  It worked, within the limitations, but I still think it was a waste of time.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The original question was about how to stop right-click <em>given that the user can disable JavaScript</em>: which sound nefarious and evil (hence the negative responses) - but all duplicates redirect here, even though many of the duplicates are asking for less evil purposes.</p>\n\n<p>Like using the right-click button in HTML5 games, for example. This can be done with the inline code above, or a bit nicer is something like this:</p>\n\n<pre><code>document.addEventListener(\"contextmenu\", function(e){\n    e.preventDefault();\n}, false);\n</code></pre>\n\n<p>But if you are making a game, then remember that the right-click button fires the <em>contextmenu</em> event - but it also fires the regular <em>mousedown</em> and <em>mouseup</em> events too. So you need to check the event's <strong>which</strong> property to see if it was the left (which === 1), middle (which === 2), or right (which === 3) mouse button that is firing the event.</p>\n\n<p>Here's an example in jQuery - note that the pressing the right mouse button will fire three events: the mousedown event, the contextmenu event, and the mouseup event.</p>\n\n<pre><code>// With jQuery\n$(document).on({\n    \"contextmenu\": function(e) {\n        console.log(\"ctx menu button:\", e.which); \n\n        // Stop the context menu\n        e.preventDefault();\n    },\n    \"mousedown\": function(e) { \n        console.log(\"normal mouse down:\", e.which); \n    },\n    \"mouseup\": function(e) { \n        console.log(\"normal mouse up:\", e.which); \n    }\n});\n</code></pre>\n\n<p>So if you're using the left and right mouse buttons in a game, you'll have to do some conditional logic in the mouse handlers.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type='text/javascript' src='http://code.jquery.com/jquery-1.4.4.min.js'&gt;&lt;/script&gt;\n&lt;script type='text/javascript'&gt;//&lt;![CDATA[ \n$(function(){\n$('img').bind('contextmenu', function(e){\nreturn false;\n}); \n});//]]&gt;  \n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"http://www.winergyinc.com/wp-content/uploads/2010/12/ajax.jpg\"/&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Put this code into your <code>&lt;head&gt;</code> tag of your page.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt; \nfunction disableselect(e){  \nreturn false  \n}  \n\nfunction reEnable(){  \nreturn true  \n}  \n\n//if IE4+  \ndocument.onselectstart=new Function (\"return false\")  \ndocument.oncontextmenu=new Function (\"return false\")  \n//if NS6  \nif (window.sidebar){  \ndocument.onmousedown=disableselect  \ndocument.onclick=reEnable  \n}\n&lt;/script&gt;\n</code></pre>\n\n<p>This will disable right click on your whole web page, but only when JavaScript is enabled.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you don't care about alerting the user with a message every time they try to right click, try adding this to your body tag</p>\n\n<pre><code>&lt;body oncontextmenu=\"return false;\"&gt;\n</code></pre>\n\n<p>This will block all access to the context menu (not just from the right mouse button but from the keyboard as well). </p>\n\n<p>However, as mentioned in the other answers, there really is no point adding a right click disabler. Anyone with basic browser knowledge can view the source and extract the information they need.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Also inside google chrome once the alert pops up more than once it asks if you would like to prevent the page from using additional dialogues which then renders your javsscript useless. There is a case for using it but don't think its the answer to all your problems.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know I am late, but I want to create some assumptions and explainations for the answer I am going to provide.</p>\n\n<h3>Can I disable right-click</h3>\n\n<blockquote>\n  <p>Can I disable right click on my web page without using Javascript?</p>\n</blockquote>\n\n<p>Yes, by using JavaScript you can disable any event that happens and you can do that mostly only by javaScript. How, all you need is:</p>\n\n<ol>\n<li><p>A working hardware</p></li>\n<li><p>A website or somewhere from which you can learn about the keycodes. Because you're gonna need them.</p></li>\n</ol>\n\n<p>Now lets say you wanna block the enter key press here is the code: </p>\n\n<pre><code>function prevententer () {\n if(event.keyCode == 13) {\n  return false;\n }\n}\n</code></pre>\n\n<p>For the right click use this: </p>\n\n<pre><code>event.button == 2\n</code></pre>\n\n<p>in the place of <code>event.keyCode</code>. And you'll block it. </p>\n\n<blockquote>\n  <p>I want to ask this because most browsers allow users to disable it by Javascript.</p>\n</blockquote>\n\n<p>You're right, browsers allow you to use <code>JavaScript</code> and javascript does the whole job for you. You donot need to setup anything, just need the script attribute in the head. </p>\n\n<h3>Why you should not disable it?</h3>\n\n<p>The main and the fast answer to that would be, <strong>users won't like it</strong>. Everyone needs freedom, no-one I mean no-one wants to be blocked or disabled, a few minutes ago I was at a site, which had blocked me from right clicking and I felt why? Do you need to secure your source code? Then here <code>ctrl+shift+J</code> I have opened the <code>Console</code> and now I can go to <code>HTML-code</code> tab. Go ahead and stop me. This won't add any of the security layer to your app.</p>\n\n<p>There are alot of userful menus in the Right Click, like Copy, Paste, Search Google for 'text' (In Chrome) and many more. So user would like to get ease of access instead of remembering alot of keyboard shortcuts. Anyone can still copy the context, save the image or do whatever he wants. </p>\n\n<p><strong>Browsers use Mouse Navigation:</strong> Some browsers such as <em>Opera</em> uses mouse navigation, so if you disable it, user would definitely hate your User Interface and the scripts.</p>\n\n<p>So that was the basic, I was going to write some more about saving the source code hehehe but, let it be the answer to your question.</p>\n\n<h3>Reference to the keycodes:</h3>\n\n<p><strong>Key and mouse button code:</strong></p>\n\n<p><a href=\"http://www.w3schools.com/jsref/event_button.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/event_button.asp</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/event.button\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/event.button</a> (would be appreciated by the users too).</p>\n\n<p><strong>Why not to disable right click:</strong></p>\n\n<p><a href=\"http://www.sitepoint.com/dont-disable-right-click/\" rel=\"nofollow\">http://www.sitepoint.com/dont-disable-right-click/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code> $(document).ready(function () {\n            document.oncontextmenu = document.body.oncontextmenu = function () { return false; }\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are a jquery fan,use this</p>\n\n<pre><code>    $(function() {\n        $(this).bind(\"contextmenu\", function(e) {\n            e.preventDefault();\n        });\n    }); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If your goal is to disallow users to simply save your images, you can also check if the clicked target is an image, only disable right click in that case. So right click can be used for other purposes. Taken from the code above:</p>\n\n<pre><code>document.addEventListener(\"contextmenu\", function(e){\n    if (e.target.nodeName === \"IMG\") {\n        e.preventDefault();\n    }\n}, false);\n</code></pre>\n\n<p>This is just to take away the easiest way of saving your images, but it can still be done.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Can I disable right click on my web page without using Javascript? I ask this because most browsers allow user to disable Javascript.</p>\n\n<p>If not, how do I use JavaScript to disable right click?</p>\n",
            "last_activity_date": 1426078776,
            "question_id": 737022,
            "score": 78,
            "tags": [
                "javascript"
            ],
            "title": "How do I disable right click on my web page?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Some browsers have a security feature that prevents javascript from knowing your file's local full path. It makes sense - as a client, you don't want the server to know your local machine's filesystem. It would be nice if all browsers did this.</p>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<p>If you really need to send the full path of the uploded file, then you'd probably have to use something like a signed java applet as there isn't any way to get this information if the browser doesn't send it.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I came accross the same problem. In IE8 it could be worked-around by creating a hidden input after the file input control. The fill this with the value of it's previous sibling. In IE9 this has been fixed aswell.</p>\n\n<p>My reason in wanting to get to know the full path was to create an javascript image preview before uploading. Now I have to upload the file to create a preview of the selected image.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you go to Internet Explorer, Tools, Internet Option, Security, Custom, find the \"Include local directory path When uploading files to a server\" (it is quite a ways down) and click on \"Enable\" . This will work</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>I am happy that browsers care to save us from intrusive scripts and the like. I am not happy with IE putting something into the browser that makes a simple style-fix look like a hack-attack!</p>\n\n<p>I've used a &lt; span > to represent the file-input so that I could apply appropriate styling to the &lt; div > instead of the &lt; input > (once again, because of IE). Now due to this IE want's to show the User a path with a value that's just guaranteed to put them on guard and in the very least apprehensive (if not totally scare them off?!)... MORE IE-CRAP!</p>\n\n<p>Anyhow, thanks to to those who posted the explanation here: <a href=\"http://www.telerik.com/community/forums/aspnet-ajax/upload/ie8-upload-control-shows-quot-c-fakepath-quot.aspx\">IE Browser Security: Appending \"fakepath\" to file path in input[type=\"file\"]</a>, I've put together a minor fixer-upper...</p>\n\n<p>The code below does two things - it fixes a lte IE8 bug where the onChange event doesn't fire until the upload field's onBlur and it updates an element with a cleaned filepath that won't scare the User.</p>\n\n<pre><code>// self-calling lambda to for jQuery shorthand \"$\" namespace\n(function($){\n    // document onReady wrapper\n    $().ready(function(){\n        // check for the nefarious IE\n        if($.browser.msie) {\n            // capture the file input fields\n            var fileInput = $('input[type=\"file\"]');\n            // add presentational &lt;span&gt; tags \"underneath\" all file input fields for styling\n            fileInput.after(\n                $(document.createElement('span')).addClass('file-underlay')\n            );\n            // bind onClick to get the file-path and update the style &lt;div&gt;\n            fileInput.click(function(){\n                // need to capture $(this) because setTimeout() is on the\n                // Window keyword 'this' changes context in it\n                var fileContext = $(this);\n                // capture the timer as well as set setTimeout()\n                // we use setTimeout() because IE pauses timers when a file dialog opens\n                // in this manner we give ourselves a \"pseudo-onChange\" handler\n                var ieBugTimeout = setTimeout(function(){\n                    // set vars\n                    var filePath     = fileContext.val(),\n                        fileUnderlay = fileContext.siblings('.file-underlay');\n                    // check for IE's lovely security speil\n                    if(filePath.match(/fakepath/)) {\n                        // update the file-path text using case-insensitive regex\n                        filePath = filePath.replace(/C:\\\\fakepath\\\\/i, '');\n                    }\n                    // update the text in the file-underlay &lt;span&gt;\n                    fileUnderlay.text(filePath);\n                    // clear the timer var\n                    clearTimeout(ieBugTimeout);\n                }, 10);\n            });\n        }\n    });\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><strong>A quick workaround (if it's not your pc):</strong> Just create C:\\fakepath folder and move the source file here.</p>\n",
                    "is_accepted": false,
                    "score": -22
                },
                {
                    "body": "<p>I use the object FileReader on the input <code>onchange</code> event for your input file type!</p>\n\n<p>Example:</p>\n\n<pre><code>var input = document.getElementById(\"inputFile\");\nvar fReader = new FileReader();\nfReader.readAsDataURL(input.files[0]);\nfReader.onloadend = function(event){\nvar img = document.getElementById(\"yourImgTag\");\n\nimg.src = event.target.result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>seems you can't find the full path in you localhost by js, but you can hide the fakepath to just show the file name. <a href=\"http://stackoverflow.com/questions/6365858/use-jquery-to-get-the-file-inputs-selected-filename-without-the-path/6365883#6365883\">Use jQuery to get the file input&#39;s selected filename without the path</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>&lt;input type=\"file\" id=\"file-id\" name=\"file_name\" onchange=\"theimage();\"&gt;\n</code></pre>\n\n<p>This is my upload button.</p>\n\n<pre><code>&lt;input type=\"text\" name=\"file_path\" id=\"file-path\"&gt;\n</code></pre>\n\n<p>This is the text field where I have to show the full path of the file.</p>\n\n<pre><code>function theimage(){\n var filename = document.getElementById('file-id').value;\n document.getElementById('file-path').value = filename;\n alert(filename);\n}\n</code></pre>\n\n<p>This is the javascript which solve my problem. But in the alert value gives me </p>\n\n<pre><code>C:\\fakepath\\test.csv \n</code></pre>\n\n<p>and Mozilla gives me:</p>\n\n<pre><code>test.csv\n</code></pre>\n\n<p>But I want <code>full url</code>. How to resolve this issue?</p>\n\n<p><strong>EDIT</strong>:\nIf This is due to browser security issue then what should be the alternate way to do this?</p>\n",
            "last_activity_date": 1406052222,
            "question_id": 4851595,
            "score": 86,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "file-upload"
            ],
            "title": "how to resolve the C:\\fakepath?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You will need to dynamically insert a script tag into the page that references the data. Using JSONP, you can execute some callback function when the script has loaded.</p>\n\n<p>The wikipedia page on <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> has a concise example; the script tag:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://domain1.com/getjson?jsonp=parseResponse\"&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>would return the JSON data wrapped in a call to <code>parseResponse</code>:</p>\n\n<pre><code>parseResponse({\"Name\": \"Cheeso\", \"Rank\": 7})\n</code></pre>\n\n<p>(depending on the configuration of the <code>getjson</code> script on domain1.com)</p>\n\n<p>The code to insert the tag dynamically would be something like:</p>\n\n<pre><code>var s = document.createElement(\"script\");\ns.src = \"http://domain1.com/getjson?jsonp=parseResponse\";\ns.type = \"text/javascript\";\ndocument.appendChild(s);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>JSONP is the best option, in my opinion. Try to figure out why you get the syntax error - are you sure the received data is not JSON? Then maybe you're using the API wrong somehow.</p>\n\n<p>Another way you could use, but I don't think that it applies in your case, is have an iFrame in the page which src is in the domain you want to call. Have it do the calls for you, and then use JS to communicate between the iFrame and the page. This will bypass the cross domain, but only if you can have the iFrame's src in the domain you want to call.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Unfortunately (or fortunately) not.  The cross-domain policy is there for a reason, if it were easy to get around it then it wouldn't be very effective as a security measure.  Other than JSONP, the only option is to <a href=\"http://developer.yahoo.com/javascript/howto-proxy.html\">proxy the pages using your own server</a>.</p>\n\n<p>With an iframe, they are subject to the same policy.  Of course you can display the data from an external domain, you just can't manipulate it.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The only (easy) way to get cross-domain data using AJAX is to use a server side language as the proxy as <a href=\"http://stackoverflow.com/questions/2558977/ajax-cross-domain-call/2559062#2559012\">Andy E</a> noted. Here's a small sample how to implement that using jQuery:</p>\n\n<p>The jQuery part:</p>\n\n<pre><code>$.ajax({\n    url: 'proxy.php',\n    type: 'POST',\n    data: {\n        address: 'http://www.google.com'\n    },\n    success: function(response) {\n        // response now contains full HTML of google.com\n    }\n});\n</code></pre>\n\n<p>And the PHP (proxy.php):</p>\n\n<pre><code>echo file_get_contents($_POST['address']);\n</code></pre>\n\n<p>Simple as that. Just be aware of what you can or cannot do with the scraped data.</p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>after doing some research, the only \"solution\" to this problem is to call:</p>\n\n<pre><code>if($.browser.mozilla)\n   netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserRead');\n</code></pre>\n\n<p>this will ask an user if he allows a website to continue. After he confirmed that, all\najax calls regardless of it's datatype will get executed.</p>\n\n<p>This works for mozilla browsers, in IE &lt; 8, an user has to allow a cross domain call\nin a similar way, some version need to get configured within browser options.</p>\n\n<p>chrome/safari: I didn't find a config flag for those browsers so far.</p>\n\n<p>using JSONP as datatype would be nice, but in my case I don't know if a domain I need\nto access supports data in that format.</p>\n\n<p>Another shot is to use HTML5 postMessage which works cross-domain aswell, but I can't\nafford to doom my users to HTML5 browsers.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I faced the same problem during 2 days and I found the solution, and it's elegant after googling a lot.\nI needed xss Ajax for some widget clients which pull datastream from tiers websites to my Rails app.\n<a href=\"http://franckyu.tumblr.com/post/1019911037/widespread-your-app-making-an-application-webservice\" rel=\"nofollow\">here's how I did.</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use this code for cross domain ajax call, I hope it will help more than one here. I'm using Prototype library and you can do the same with JQuery or Dojo or anything else:</p>\n\n<p>Step 1: create a new js file and put this class inside, I called it xss_ajax.js</p>\n\n<pre><code>var WSAjax = Class.create ({\n    initialize: function (_url, _callback){\n        this.url = _url ;\n        this.callback = _callback ;\n        this.connect () ;\n    },\n    connect: function (){\n        var script_id = null;\n        var script = document.createElement('script');\n        script.setAttribute('type', 'text/javascript');\n        script.setAttribute('src', this.url);\n        script.setAttribute('id', 'xss_ajax_script');\n\n        script_id = document.getElementById('xss_ajax_script');\n        if(script_id){\n            document.getElementsByTagName('head')[0].removeChild(script_id);\n        }\n\n        // Insert &lt;script&gt; into DOM\n        document.getElementsByTagName('head')[0].appendChild(script);\n    },\n    process: function (data){\n        this.callback(data) ;\n    }\n\n}) ;\n</code></pre>\n\n<p>This class creates a dynamic script element which src attributes targets your JSON data provider (JSON-P in fact as your distant server must provide the data in this format :: call_back_function(//json_data_here) :: so when the script tag is created your JSON will be directly evaled as a function (we'll talk about passing the callback method name to server on step 2), the main concept behind this is that script like img elements are not concerned by the SOP constraints.</p>\n\n<p>Step2: in any html page where you wanna pull the JSON asynchronously (we call this AJAJ ~ Asynchronous JAvascript + JSON :-) instead of AJAX which use the XHTTPRequest object) do like below</p>\n\n<pre><code>//load Prototype first\n//load the file you've created in step1\n\n\nvar xss_crawler = new WSAjax (\n     \"http://your_json_data_provider_url?callback=xss_crawler.process\"\n ,   function (_data){\n            // your json data is _data and do whatever you like with it \n        }) ;\n</code></pre>\n\n<p>D'you remenber the callback on step 1? so we pass it to the server and it will returns the JSON embeded in that method so in our case the server will return an evalable javascript code xss_crawler.process(//the_json_data), remember that xss_crawler is an instance of WSAjax class. The server code depends on you (if it's yours), but most of Ajax data providers let you specify the callback method in parameters like we did.\nIn Ruby on rails I just did</p>\n\n<pre><code>render :json=&gt;MyModel.all(:limit=&gt;10), :callback =&gt; params[:callback],:content_type =&gt; \"application/json\"\n</code></pre>\n\n<p>and that's all, you can now pull data from another domain from your apps (widgets, maps etc), in JSON format only, don't forget.</p>\n\n<p>I hope it was helpfull, thanks for your patience :-), peace and sorry for code formatting, it doesn't work well</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use <a href=\"http://developer.yahoo.com/yql/\">YQL</a> to do the request without needing to host your own proxy. I have made a simple function to make it easier to run commands:</p>\n\n<pre><code>function RunYQL(command, callback){\n     callback_name = \"__YQL_callback_\"+(new Date()).getTime();\n     window[callback_name] = callback;\n     a = document.createElement('script');\n     a.src = \"http://query.yahooapis.com/v1/public/yql?q=\"\n             +escape(command)+\"&amp;format=json&amp;callback=\"+callback_name;\n     a.type = \"text/javascript\";\n     document.getElementsByTagName(\"head\")[0].appendChild(a);\n}\n</code></pre>\n\n<p>If you have jQuery, you may use $.getJSON instead.</p>\n\n<p>A sample may be this:</p>\n\n<pre><code>RunYQL('select * from html where url=\"http://www.google.com/\"',\n       function(data){/* actions */}\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Here is an easy way of how you can do it, without having to use anything fancy, or even JSON.</p>\n\n<p>First, create a server side script to handle your requests. Something like <a href=\"http://www.example.com/path/handler.php\" rel=\"nofollow\">http://www.example.com/path/handler.php</a> </p>\n\n<p>You will call it with parameters, like this: .../handler.php?param1=12345&amp;param2=67890</p>\n\n<p>Inside it, after processing the recieved data, <strong>output</strong>:</p>\n\n<pre><code>document.serverResponse('..all the data, in any format that suits you..');\n// Any code could be used instead, because you dont have to encode this data\n// All your output will simply be executed as normal javascript\n</code></pre>\n\n<p>Now, in the client side script, use the following:</p>\n\n<pre><code>document.serverResponse = function(param){ console.log(param) }\n\nvar script = document.createElement('script');\nscript.src='http://www.example.com/path/handler.php?param1=12345&amp;param2=67890';\ndocument.head.appendChild(script);\n</code></pre>\n\n<p>The only limit of this approach, is the max length of parameters that you can send to the server. But, you can always send multiple requests.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I know about AJAX cross-domain policy.\nSo I can't just call \"<a href=\"http://www.google.com\">http://www.google.com</a>\" over a ajax HTTP request and display\nthe results somewhere on my site.</p>\n\n<p>I tried it with dataType \"jsonp\", that actually would work, but I get a syntax error (obviously because the received data is not JSON formated)</p>\n\n<p>Is there any other possiblity to receive/display data from a foreign domain?\niFrames follow the same policy?</p>\n\n<p>Kind Regards</p>\n\n<p>--Andy</p>\n",
            "last_activity_date": 1402203209,
            "question_id": 2558977,
            "score": 29,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "json",
                "jsonp"
            ],
            "title": "AJAX cross domain call"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You do, indeed, need to implement a closure here.  This <em>should</em> work (let me know - I didn't test it)</p>\n\n<pre><code>var blah = xmlres.getElementsByTagName('blah');\nfor(var i = 0; i &lt; blah.length; i++) {\n    var td = document.createElement('td');\n    var select = document.createElement('select');\n    select.setAttribute(\"...\", \"...\");\n    select.onchange = function(s,c,a)\n    {\n        return function()\n        {\n            onStatusChanged(s,c,a);\n        }\n    }(select, callid, anotherid);\n    td.appendChild(select);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 42
                }
            ],
            "body": "<p>I'm working with a bit of html and Javascript code that I've taken over from someone else. The page reloads a table of data (via an asynchronous request) every ten seconds, and then re-builds the table using some DOM code. The code in question looks something like this:</p>\n\n<pre><code>var blah = xmlres.getElementsByTagName('blah');\nfor(var i = 0; i &lt; blah.length; i++) {\n    var td = document.createElement('td');\n    var select = document.createElement('select');\n    select.setAttribute(\"...\", \"...\");\n    select.onchange = function() {\n        onStatusChanged(select, callid, anotherid);\n    };\n    td.appendChild(select);\n}\n</code></pre>\n\n<p>When the <code>onchange</code> event is fired for a <code>&lt;select&gt;</code> element however, it seems like the same values are being passed to the <code>onStatusChanged()</code> method for every <code>&lt;select&gt;</code> in the table (I've verified that in each iteration of the loop, <code>callid</code> and <code>anotherid</code> are being given new, distinct values). </p>\n\n<p>I suspect this is occuring because of the nature of how I am setting the event handler, with the <code>select.onchange = function()</code> syntax. If I understand how this is working correctly, this syntax sets a closure for the onchange event to be a function which refers to these two references, which end up having a final value of whatever they are set to on the last iteration of the loop. When the event fires, the value referenced by <code>callid</code> and <code>anotherid</code> is the value set in the last iteration, not the value set at the individual iteration.</p>\n\n<p>Is there a way that I can copy the value of the parameters I am passing to <code>onStatusChanged()</code>?</p>\n\n<p><em>I've changed the title to better reflect the question and the accepted answer.</em></p>\n",
            "last_activity_date": 1286937855,
            "question_id": 341723,
            "score": 19,
            "tags": [
                "javascript",
                "dom",
                "loops",
                "closures"
            ],
            "title": "Event handlers inside a Javascript loop - need a closure?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Promises are not callbacks. A promise represents the <strong>future result of an asynchronous operation</strong>. Of course, writing them the way you do, you get little benefit. But if you write them the way they are meant to be used, you can write asynchronous code in a way that resembles synchronous code and is much more easy to follow:</p>\n\n<pre><code>api().then(function(result){\n    return api2();\n}).then(function(result2){\n    return api3();\n}).then(function(result3){\n     // do work\n});\n</code></pre>\n\n<p>Certainly, not much less code, but much more readable. </p>\n\n<p>But this is not the end. Let's discover the true benefits: What if you wanted to check for any error in any of the steps? It would be hell to do it with callbacks, but with promises, is a piece of cake:</p>\n\n<pre><code>api().then(function(result){\n    return api2();\n}).then(function(result2){\n    return api3();\n}).then(function(result3){\n     // do work\n}).catch(function(error) {\n     //handle any error that may occur before this point\n});\n</code></pre>\n\n<p>Pretty much the same as a <code>try { ... } catch</code> block. </p>\n\n<p>Even better:</p>\n\n<pre><code>api().then(function(result){\n    return api2();\n}).then(function(result2){\n    return api3();\n}).then(function(result3){\n     // do work\n}).catch(function(error) {\n     //handle any error that may occur before this point\n}).then(function() {\n     //do something whether there was an error or not\n     //like hiding an spinner if you were performing an AJAX request.\n});\n</code></pre>\n\n<p>And even better. What if those 3 calls to <code>api</code>, <code>api2</code>, <code>api3</code> could run simultaneously (it they were AJAX calls) but you needed to wait for the three? Without promises, you should have to create some sort of counter. With promises, using the ES6 notation, is another piece of cake and pretty neat:</p>\n\n<pre><code>Promise.all([api(), api2(), api3()]).then(function(result) {\n    //do work. result is an array contains the values of the three fulfilled promises.\n}).catch(function(error) {\n    //handle the error. At least one of the promises rejected.\n});\n</code></pre>\n\n<p>Hope you see Promises in a new light now.</p>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<p>Yes, Promises are asynchronous callbacks. They can't do anything that callbacks can't do, and you face the same problems with asynchrony as with plain callbacks.</p>\n\n<p>However, Promises are <em>more</em> than just callbacks. They are a very mighty abstraction, allow cleaner and better, functional code with less error-prone boilerplate.</p>\n\n<blockquote>\n  <p>So what's the main idea?</p>\n</blockquote>\n\n<p>Promises are objects representing the result of a single (asynchronous) computation. They <em>resolve</em> to that result only once. There's a few things what this means:</p>\n\n<p>Promises implement an observer pattern:</p>\n\n<ul>\n<li>You don't need to know the callbacks that will use the value before the task completes. </li>\n<li>Instead of expecting callbacks as arguments to your functions, you can easily <code>return</code> a Promise object</li>\n<li>The promise will store the value, and you can <em>transparently</em> add a callback whenever you want. It will be called when the result is available. \"Transparency\" implies that when you have a promise and add a callback to it, it doesn't make a difference to your code whether the result has arrived yet - the API and contracts are the same, simplifying caching/memoisation a lot.</li>\n<li>You can add multiple callbacks easily</li>\n</ul>\n\n<p><a href=\"http://domenic.me/2012/10/14/youre-missing-the-point-of-promises/\">Promises are chainable</a> (<em>monadic</em>, if you want):</p>\n\n<ul>\n<li>If you need to transform the value that a promise represents, you <em>map</em> a transform function over the promise and get back a new promise that represents the transformed result. You cannot synchronously get the value to use it somehow, but you can easily <em>lift</em> the transformation in the promise context. No boilerplate callbacks.</li>\n<li>If you want to chain two asynchronous tasks, you can use the <code>.then()</code> method. It will take a callback to be called with the first result, and returns a promise for the result of the promise that the callback returns.</li>\n</ul>\n\n<p>Sounds complicated? Time for a code example.</p>\n\n<pre><code>var p1 = api1(); // returning a promise\nvar p3 = p1.then(function(api1Result) {\n    var p2 = api2(); // returning a promise\n    return p2; // The result of p2 \u2026\n}); // \u2026 becomes the result of p3\n\n// So it does not make a difference whether you write\napi1().then(function(api1Result) {\n    return api2().then(console.log)\n})\n// or the flattened version\napi1().then(function(api1Result) {\n    return api2();\n}).then(console.log)\n</code></pre>\n\n<p>Flattening does not come magically, but you can easily do it. For your heavily nested example, the (near) equivalent would be</p>\n\n<pre><code>api1().then(api2).then(api3).then(/* do-work-callback */);\n</code></pre>\n\n<p>If seeing the code of these methods helps understanding, <a href=\"http://stackoverflow.com/a/15668353/1048572\">here's a most basic promise lib in a few lines</a>.</p>\n\n<blockquote>\n  <p>What's the big fuss about promises?</p>\n</blockquote>\n\n<p>The Promise abstraction allows much better composability of functions. For example, next to <code>then</code> for chaining, the <code>all</code> function creates a promise for the combined result of multiple parallel-waiting promises.</p>\n\n<p>Last but not least Promises come with integrated error handling. The result of the computation might be that either the promise is <em>fulfilled</em> with a value, or it is <em>rejected</em> with a reason. All the composition functions handle this automatically and propagate errors in promise chains, so that you don't need to care about it explicitly everywhere - in contrast to a plain-callback implementation. In the end, you can add a dedicated error callback for all occurred exceptions.</p>\n\n<blockquote>\n  <p>Not to mention having to convert things to promises.</p>\n</blockquote>\n\n<p>That's quite trivial actually with good promise libraries, see <a href=\"http://stackoverflow.com/q/22519784/1048572\">How do I convert an existing callback API to promises?</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Promises are not callbacks, both are programming idioms that facilitate async programming. Using an async/await-style of programming using coroutines or generators that return promises could be considered a 3rd such idiom. A comparison of these idioms across different programming languages (including Javascript) is here: <a href=\"https://github.com/KjellSchubert/promise-future-task\" rel=\"nofollow\">https://github.com/KjellSchubert/promise-future-task</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've been developing JavaScript for a few years and I don't understand the fuss about promises at all.</p>\n\n<p>It seems like all I do is change:</p>\n\n<pre><code>api(function(result){\n    api2(function(result2){\n        api3(function(result3){\n             // do work\n        });\n    });\n});\n</code></pre>\n\n<p>Which I could use a library like <a href=\"https://github.com/caolan/async\">async</a> for anyway, with something like:</p>\n\n<pre><code>api().then(function(result){\n     api2().then(function(result2){\n          api3().then(function(result3){\n               // do work\n          });\n     });\n});\n</code></pre>\n\n<p>Which is more code and less readable. I didn't gain anything here, it's not suddenly magically 'flat' either. Not to mention having to convert things to promises.</p>\n\n<p>So, what's the big fuss about promises here?</p>\n",
            "last_activity_date": 1425749216,
            "question_id": 22539815,
            "score": 25,
            "tags": [
                "javascript",
                "callback",
                "promise",
                "q",
                "bluebird"
            ],
            "title": "Aren&#39;t promises just callbacks?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>This is useful to setting <em>default</em> values to function arguments, e.g.:</p>\n\n<pre><code>function test (options) {\n  options = options || {};\n}\n</code></pre>\n\n<p>If you call <code>test</code> without arguments, <code>options</code> will be initialized with an empty object.</p>\n\n<p>The  Logical OR <code>||</code> operator will return its second operand if the first one is <em>falsy</em>.</p>\n\n<p><em>Falsy</em> values are: <code>0</code>, <code>null</code>, <code>undefined</code>, the empty string (<code>\"\"</code>), <code>NaN</code>, and of course <code>false</code>.</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Yes, that's exactly what it does.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Yes.  The sample is equivalent to this:</p>\n\n<pre><code>if (options) {\n    options = options;\n} else {\n    options = {};\n}\n</code></pre>\n\n<p>The OR operator (<code>||</code>) will short-circuit and return the first truthy value.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<h3>It's the <em>default-pattern</em>..</h3>\n\n<p>What you have in your snippet is the most common way to implement the <em>default-pattern</em>, it will return the value of the first operand that yields a <em>true</em> value when converted to boolean.</p>\n\n<pre><code>var some_data   = undefined;\nvar some_obj_1  = undefined;\nvar some_obj_2  = {foo: 123};\n\nvar str = some_data || \"default\";\nvar obj = some_obj1 || some_obj2  || {};\n\n/* str == \"default\", obj == {foo: 123} */\n</code></pre>\n\n<p><sup>the above is basically equivalent to doing the following more verbose alternative</sup></p>\n\n<pre><code>var str = undefined;\nvar obj = undefined;\n\nif (some_data) str = some_data;\nelse           str = \"default\";\n\nif      (some_obj1) obj = some_obj1;\nelse if (some_obj2) obj = some_obj2;\nelse                obj = {};\n</code></pre>\n\n<p><sup>examples of values yield by the logical OR operator:</sup></p>\n\n<pre><code>1         || 3         -&gt; 1\n0         || 3         -&gt; 3\nundefined || 3         -&gt; 3\nNaN       || 3         -&gt; 3\n\"\"        || \"default\" -&gt; \"default\"\nundefined || undefined -&gt; undefined\nfalse     || true      -&gt; true\ntrue      || false     -&gt; true\nnull      || \"test\"    -&gt; \"test\"\nundefined || {}        -&gt; {}\n{}        || true      -&gt; {}\n</code></pre>\n\n<p><sup></sup></p>\n\n<pre><code>null || false     || {} -&gt; {}\n0    || \"!!\"      || 9  -&gt; \"!!\"\n</code></pre>\n\n<p>As you can see, if no match is found the value of the last operand is yield.</p>\n\n<hr>\n\n<h3>When is this useful?</h3>\n\n<p>There are several cases, though the most popular one is to set the default value of function arguments, as in the below:</p>\n\n<pre><code>function do_something (some_value) {\n  some_value = some_value || \"hello world\";\n\n  console.log (\"saying: \" + some_value);\n}\n\n...\n\ndo_something (\"how ya doin'?\");\ndo_something ();\n</code></pre>\n\n<p><sup></sup></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>saying: how ya doin'?\nsaying: hello world\n</code></pre>\n\n<hr>\n\n<h3>Notes</h3>\n\n<p>This is notably one of the differences that javascript have compared to many other popular programming languages.</p>\n\n<p>The operator <code>||</code> doesn't implicitly yield a <em>boolean value</em> but it keeps the operand types and yield the first one that will evaluate to true in a boolean expression.</p>\n\n<p>Many programmers coming from languages where this isn't the case (C, C++, PHP, Python, etc, etc) find this rather confusing at first, and of course there is always the opposite; people coming from <em>javascript</em> (<em>perl</em>, etc) wonders why this feature isn't implemented elsewhere.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Found another variation of this:</p>\n\n<pre><code>options || (options = {});\n</code></pre>\n\n<p>Seems to do the same trick.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I came over a snippet of code the other day that I got curious about, but I'm not really sure what it actually does;</p>\n\n<pre><code>options = options || {};\n</code></pre>\n\n<p>My thought so far; sets variable <code>options</code> to value <code>options</code> if exists, if not, set to empty object.</p>\n\n<p>Yes/no?</p>\n",
            "last_activity_date": 1391800033,
            "question_id": 2851404,
            "score": 22,
            "tags": [
                "javascript",
                "syntax",
                "notation"
            ],
            "title": "What does &quot;options = options || {}&quot; mean in Javascript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Swaff's answer was correct as of that date but that doesn't work anymore; now you use:</p>\n\n<p><strong>UPDATE 3</strong>: as Matsemann pointed out, for Angular 1.3, use <code>ng-bind-html</code> in the HTML:</p>\n\n<pre><code>&lt;div ng-bind-html=\"thisCanBeusedInsideNgBindHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and use <code>$sce.trustAsHtml()</code> in the controller to convert the html string.</p>\n\n<pre><code> $scope.thisCanBeusedInsideNgBindHtml = $sce.trustAsHtml(someHtmlVar);\n</code></pre>\n\n<p>UPDATE 2: as Sasha points out, for Angular 1.2, use:</p>\n\n<pre><code>&lt;div ng-bind-html=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>UPDATE: as Damax pointed out, now use:</p>\n\n<pre><code>&lt;div ng-bind-html-unsafe=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>OLD WAY:</p>\n\n<pre><code>&lt;div ng-bind-html=\"expression\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>&lt;div&gt;{{expression}}&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md\">https://github.com/angular/angular.js/blob/master/CHANGELOG.md</a> (scroll down / search for \"ng-bind-html\" in this page to see details of the change)</p>\n\n<p>ALSO, this now requires the \"ngSanitize\" module (I got hung up on this for awhile and couldn't figure out why it wasn't working - and the documentation doesn't seem clear on how to include this module). There's 2 steps:</p>\n\n<ol>\n<li><p>include the angular-sanitize.min.js resource, i.e.:<br>\n<code>&lt;script src=\"lib/angular/angular-sanitize.min.js\"&gt;&lt;/script&gt;</code></p></li>\n<li><p>In a js file (controller or usually app.js), include ngSanitize, i.e.:<br>\n<code>angular.module('myApp', ['myApp.filters', 'myApp.services', 'myApp.directives', 'ngSanitize'])</code></p></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 412
                },
                {
                    "body": "<p>I have tried today, the only way I found was this</p>\n\n<p><code>&lt;div ng-bind-html-unsafe=\"expression\"&gt;&lt;/div&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>on html</p>\n\n<pre><code>&lt;div ng-controller=\"myAppController as myCtrl\"&gt;\n\n&lt;div ng-bind-html-unsafe=\"myCtrl.comment.msg\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>&lt;div ng-bind-html=\"myCtrl.comment.msg\"&gt;&lt;/div\n</code></pre>\n\n<p>on controller</p>\n\n<pre><code>mySceApp.controller(\"myAppController\", function myAppController( $sce) {\n\nthis.myCtrl.comment.msg = $sce.trustAsHtml(html);\n</code></pre>\n\n<p>works also with <code>$scope.comment.msg = $sce.trustAsHtml(html);</code></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>See the answers I posted for you in these two locations:</p>\n\n<p><a href=\"http://forum.ionicframework.com/t/eval-json-data-as-html/1455/6\" rel=\"nofollow\">http://forum.ionicframework.com/t/eval-json-data-as-html/1455/6</a></p>\n\n<p><a href=\"http://codepen.io/calendee/pen/DKhbc\" rel=\"nofollow\">http://codepen.io/calendee/pen/DKhbc</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/21829275/angular-js-shows-html-within-the-tag\">Angular JS shows HTML within the tag</a> </p>\n\n<p>The solution provided in the above link worked for me, none of the options on this thread did. For anyone looking for the same thing with AngularJS version 1.2.9</p>\n\n<p>Here's a copy: </p>\n\n<blockquote>\n<pre><code>Ok I found solution for this:\n\nJS:\n\n$scope.renderHtml = function(html_code)\n{\n    return $sce.trustAsHtml(html_code);\n};\nHTML:\n\n&lt;p ng-bind-html=\"renderHtml(value.button)\"&gt;&lt;/p&gt;\n</code></pre>\n</blockquote>\n\n<p>EDIT:</p>\n\n<p>Here's the set up:</p>\n\n<p>JS file:</p>\n\n<pre><code>angular.module('MyModule').controller('MyController', ['$scope', '$http', '$sce',\n    function ($scope, $http, $sce) {\n        $scope.renderHtml = function (htmlCode) {\n            return $sce.trustAsHtml(htmlCode);\n        };\n\n        $scope.body = '&lt;div style=\"width:200px; height:200px; border:1px solid blue;\"&gt;&lt;/div&gt;'; \n\n    }\n</code></pre>\n\n<p>HTML file:</p>\n\n<pre><code>&lt;div ng-controller=\"MyController\"&gt;\n    &lt;div  ng-bind-html=\"renderHtml(body)\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>You can also create a filter like so:</p>\n\n<pre><code>var app = angular.module(\"demoApp\", ['ngResource']);\n\napp.filter(\"sanitize\", ['$sce', function($sce) {\n  return function(htmlCode){\n    return $sce.trustAsHtml(htmlCode);\n  }\n}]);\n</code></pre>\n\n<p>Then in the view</p>\n\n<pre><code>&lt;div ng-bind-html=\"whatever_needs_to_be_sanitized | sanitize\"&gt;&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>I found that using ng-sanitize did not allow me to add ng-click in the html.</p>\n\n<p>To solve this I added a directive. Like this:</p>\n\n<pre><code>app.directive('htmldiv', function($compile, $parse) {\nreturn {\n  restrict: 'E',\n  link: function(scope, element, attr) {\n    scope.$watch(attr.content, function() {\n      element.html($parse(attr.content)(scope));\n      $compile(element.contents())(scope);\n    }, true);\n  }\n}\n});\n</code></pre>\n\n<p>And this is the HTML:</p>\n\n<pre><code>&lt;htmldiv content=\"theContent\"&gt;&lt;/htmldiv&gt;\n</code></pre>\n\n<p>Good luck.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another solution, very similar to blrbr's except using a scoped attribute is:</p>\n\n<pre><code>angular.module('app')\n.directive('renderHtml', ['$compile', function ($compile) {\n    return {\n      restrict: 'E',\n      scope: {\n        html: '='\n      },\n      link: function postLink(scope, element, attrs) {\n\n          function appendHtml() {\n              if(scope.html) {\n                  var newElement = angular.element(scope.html);\n                  $compile(newElement)(scope);\n                  element.append(newElement);\n              }\n          }\n\n          scope.$watch(function() { return scope.html }, appendHtml);\n      }\n    };\n  }]);\n</code></pre>\n\n<p>And then </p>\n\n<pre><code>&lt;render-html html=\"htmlAsString\"&gt;&lt;/render-html&gt;\n</code></pre>\n\n<p>Note you may replace <code>element.append()</code> with <code>element.replaceWith()</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Fortunately, you don't need any fancy filters or unsafe methods to avoid that error message. This is the complete implementation to properly output HTML markup in a view in the intended and safe way.</p>\n\n<p>The sanitize module must be included after Angular:</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.2.26/angular-sanitize.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Then, the module must be loaded:</p>\n\n<pre><code>angular.module('app', [\n  'ngSanitize'\n]);\n</code></pre>\n\n<p>This will allow you to include markup in a string from a controller, directive, etc:</p>\n\n<pre><code>scope.message = \"&lt;strong&gt;42&lt;/strong&gt; is the &lt;em&gt;answer&lt;/em&gt;.\";\n</code></pre>\n\n<p>Finally, in a template, it must be output like so:</p>\n\n<pre><code>&lt;p ng-bind-html=\"message\"&gt;&lt;/p&gt;\n</code></pre>\n\n<p>Which will produce the expected output: <strong>42</strong> is the <em>answer</em>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>you can also use <strong><em>ng-include</em></strong>. </p>\n\n<pre><code>    &lt;div class=\"col-sm-9 TabContent_container\" ng-include=\"template/custom.html\"&gt;\n</code></pre>\n\n<p></p>\n\n<p>you can use <strong><em>\"ng-show\"</em></strong> to show hide this template data.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>there is one more solution for this problem using creating new <strong>attribute or directives</strong> in angular.</p>\n\n<p><strong><em>product-specs.html</em></strong> </p>\n\n<pre><code> &lt;h4&gt;Specs&lt;/h4&gt;\n        &lt;ul class=\"list-unstyled\"&gt;\n          &lt;li&gt;\n            &lt;strong&gt;Shine&lt;/strong&gt;\n            : {{product.shine}}&lt;/li&gt;\n          &lt;li&gt;\n            &lt;strong&gt;Faces&lt;/strong&gt;\n            : {{product.faces}}&lt;/li&gt;\n          &lt;li&gt;\n            &lt;strong&gt;Rarity&lt;/strong&gt;\n            : {{product.rarity}}&lt;/li&gt;\n          &lt;li&gt;\n            &lt;strong&gt;Color&lt;/strong&gt;\n            : {{product.color}}&lt;/li&gt;\n        &lt;/ul&gt;\n</code></pre>\n\n<p><strong><em>app.js</em></strong></p>\n\n<pre><code> (function() {\nvar app = angular.module('gemStore', []);    \napp.directive(\"     &lt;div ng-show=\"tab.isSet(2)\" product-specs&gt;\", function() {\nreturn {\n  restrict: 'E',\n  templateUrl: \"product-specs.html\"\n};\n});\n</code></pre>\n\n<p><strong><em>index.html</em></strong></p>\n\n<pre><code> &lt;div&gt;\n &lt;product-specs&gt;  &lt;/product-specs&gt;//it will load product-specs.html file here.\n &lt;/div&gt;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>&lt;div  product-specs&gt;//it will add product-specs.html file \n</code></pre>\n\n<p>or </p>\n\n<pre><code>&lt;div ng-include=\"product-description.html\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://docs.angularjs.org/guide/directive\" rel=\"nofollow\">https://docs.angularjs.org/guide/directive</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to create an HTML fragment in an Angular controller and have this HTML shown in the view?</p>\n\n<p>This comes from a requirement to turn an inconsistent JSON blob into a nested list of <code>id : value</code> pairs. Therefore the HTML is created in the controller and I am now looking to display it.</p>\n\n<p>I have created a model property, but cannot render this in the view without it just printing the HTML.</p>\n\n<hr>\n\n<p>Update</p>\n\n<p>It appears that the problem arises from angular rendering the created HTML as a string within quotes. Will attempt to find a way around this.</p>\n\n<p>Example controller :</p>\n\n<pre><code>var SomeController = function () {\n\n    this.customHtml = '&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;';\n}\n</code></pre>\n\n<p>Example view :</p>\n\n<pre><code>&lt;div ng:bind=\"customHtml\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Gives :</p>\n\n<pre><code>&lt;div&gt;\n    \"&lt;ul&gt;&lt;li&gt;render me please&lt;/li&gt;&lt;/ul&gt;\"\n&lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1418777469,
            "question_id": 9381926,
            "score": 224,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "Insert HTML into view using AngularJS"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>If you don't mean programmatically, this question should probably belong to superuser.com.</p>\n\n<p>Either way, the <a href=\"http://xmlgraphics.apache.org/batik/\" rel=\"nofollow\">Batik SVG Toolkit</a> may be of help, especially the <a href=\"http://xmlgraphics.apache.org/batik/tools/rasterizer.html\" rel=\"nofollow\">SVG Rasterizer</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is how you can do it through JavaScript:</p>\n\n<ol>\n<li>Use the canvg JavaScript library to render the SVG image using Canvas: <a href=\"https://github.com/gabelerner/canvg\">https://github.com/gabelerner/canvg</a></li>\n<li>Capture a data URI encoded as a JPG (or PNG) from the Canvas, according to these instructions: <a href=\"http://stackoverflow.com/questions/923885/capture-html-canvas-as-gif-jpg-png-pdf/3514404#3514404\">Capture HTML Canvas as gif/jpg/png/pdf?</a></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 127
                },
                {
                    "body": "<p>jbeard4 solution worked beautifully.</p>\n\n<p>I'm using <a href=\"http://ianli.com/sketchpad/\">Raphael SketchPad</a> to create an SVG.  Link to the files in step 1.</p>\n\n<p>For a Save button (id of svg is \"editor\", id of canvas is \"canvas\"):</p>\n\n<pre><code>$(\"#editor_save\").click(function() {\n\n// the canvg call that takes the svg xml and converts it to a canvas\ncanvg('canvas', $(\"#editor\").html());\n\n// the canvas calls to output a png\nvar canvas = document.getElementById(\"canvas\");\nvar img = canvas.toDataURL(\"image/png\");\n// do what you want with the base64, write to screen, post to server, etc...\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Here's a server side solution based on PhantomJS. You can use JSONP to make a cross domain call to image.vida.io.</p>\n\n<p><a href=\"http://image.vida.io/\" rel=\"nofollow\">http://image.vida.io/</a></p>\n\n<p>Your chart/visualization need to be accessible from outside. You can pass credential to the URL.</p>\n\n<p><a href=\"http://image.vida.io/api/https%3A%2F%2Fvida.io%2Fdocuments%2FWgBMc4zDWF7YpqXGR/viewport_width=980&amp;viewport_height=900&amp;delay=5000&amp;selector=%23canvas\" rel=\"nofollow\">http://image.vida.io/api/https%3A%2F%2Fvida.io%2Fdocuments%2FWgBMc4zDWF7YpqXGR/viewport_width=980&amp;viewport_height=900&amp;delay=5000&amp;selector=%23canvas</a></p>\n\n<p>Then you can display image with img tag:</p>\n\n<pre><code>&lt;img src=\"data:image/png;base64, [base64 data]\"/&gt;\n</code></pre>\n\n<p>It works across browser.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to convert SVG into bitmap images (like JPEG, PNG, etc.) through JavaScript.</p>\n",
            "last_activity_date": 1419850672,
            "question_id": 3975499,
            "score": 120,
            "tags": [
                "javascript",
                "svg"
            ],
            "title": "Convert SVG to image (JPEG, PNG, etc.) in the browser"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Just a few thoughts, an avenue or two to explore.</p>\n\n<p>Is it possible to have a function run every 10 seconds, and have that check a \"counter\" variable?  If that's possible, you can have an on mouseover for the page, can you not?  If so, use the mouseover event to reset the \"counter\" variable.  If your function is called, and the counter is above the range that you pre-determine, then do your action.</p>\n\n<p>Again, just some thoughts...\nHope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could probably hack something together by detecting mouse movement on the body of the form and updating a global variable with the last movement time.  You'd then need to have an interval timer running that periodically checks the last movement time and does something if it has been sufficiently long since the last mouse movement was detected.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Well you could attach a click or mousemove event to the document body that resets a timer. Have a function that you call at timed intervals that checks if the timer is over a specified time (like 1000 millis) and start your preloading.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a rough jQuery implementation of tvanfosson's idea:</p>\n\n<pre><code>$(document).ready(function(){\n\n   idleTime = 0;\n\n   //Increment the idle time counter every second.\n   var idleInterval = setInterval(timerIncrement, 1000);\n\n   function timerIncrement()\n   {\n     idleTime++;\n     if (idleTime &gt; 2)\n     {\n       doPreload();\n     }\n   }\n\n   //Zero the idle timer on mouse movement.\n   $(this).mousemove(function(e){\n      idleTime = 0;\n   });\n\n   function doPreload()\n   {\n     //Preload images, etc.\n   }\n\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>You could probably detect inactivity on your web page using the mousemove tricks listed, but that won't tell you that the user isn't on another page in another window or tab, or that the user is in Word or Photoshop, or WOW and just isn't looking at your page at this time. Generally I'd just do the prefetch and rely on the client's multi-tasking. If you <em>really</em> need this functionality you do something with an activex control in windows, but it's ugly at best.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Javascript has no way of telling the CPU usage.  This would break the sandbox javascript runs inside.</p>\n\n<p>Other than that, hooking the page's onmouseover and onkeydown events would probably work.</p>\n\n<p>You could also set use setTimeout in the onload event to schedule a function to be called after a delay.</p>\n\n<pre><code>// Call aFunction after 1 second\nwindow.setTimeout(aFunction, 1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Similar to Iconic's solution above (with jQuery)...</p>\n\n<pre><code>//when the document is loaded\n$(function(){\n\n  //create an event handler for the mousemove\n  var preLoadTimer;\n  $(this).mousemove(function(e){\n    //clear prior timeout, if any\n    window.clearTimeout(preLoadTimer);\n\n    //create new timeout.\n    preLoadTimer = window.setTimeout(doPreLoad, 2000);\n  });\n\n});</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Here is a simple script using JQuery that handles mousemove and keypress events.\nIf the time expires, the page reload.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar idleTime = 0;\n$(document).ready(function () {\n    //Increment the idle time counter every minute.\n    var idleInterval = setInterval(timerIncrement, 60000); // 1 minute\n\n    //Zero the idle timer on mouse movement.\n    $(this).mousemove(function (e) {\n        idleTime = 0;\n    });\n    $(this).keypress(function (e) {\n        idleTime = 0;\n    });\n});\n\nfunction timerIncrement() {\n    idleTime = idleTime + 1;\n    if (idleTime &gt; 19) { // 20 minutes\n        window.location.reload();\n    }\n}\n&lt;/script&gt;   \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 174
                },
                {
                    "body": "<p>Without using jQuery, only JavaScript:</p>\n\n<pre><code>var inactivityTime = function () {\n    var t;\n    window.onload = resetTimer;\n    document.onmousemove = resetTimer;\n    document.onkeypress = resetTimer;\n\n    function logout() {\n        alert(\"You are now logged out.\")\n        //location.href = 'logout.php'\n    }\n\n    function resetTimer() {\n        clearTimeout(t);\n        t = setTimeout(logout, 3000)\n        // 1000 milisec = 1 sec\n    }\n};\n</code></pre>\n\n<p>Credits: <a href=\"http://forums.devshed.com/showpost.php?p=1965136&amp;postcount=10\">http://forums.devshed.com/showpost.php?p=1965136&amp;postcount=10</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I have created a small lib that does this a year ago:</p>\n\n<p><a href=\"https://github.com/shawnmclean/Idle.js\">https://github.com/shawnmclean/Idle.js</a></p>\n\n<p>Description:</p>\n\n<blockquote>\n  <p>Tiny javascript library to report activity of user in the browser\n  (away, idle, not looking at webpage, in a different tab, etc). that is independent of any\n  other javascript libraries such as jquery.</p>\n</blockquote>\n\n<p>Visual Studio users can get it from NuGet by: <code>PM&gt; Install-Package Idle.js</code></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>For other users with the same problem. Here is a function i just made up.</p>\n\n<p>It does NOT run on every mouse movement the user makes, or clears a timer every time the mouse moves.</p>\n\n<pre><code>&lt;script&gt;\n// Timeout in seconds\nvar timeout = 10; // 10 seconds\n\n// You don't have to change anything below this line, except maybe\n// the alert('Welcome back!') :-)\n// ----------------------------------------------------------------\nvar pos = '', prevpos = '', timer = 0, interval = timeout / 5 * 1000;\ntimeout = timeout * 1000 - interval;\nfunction mouseHasMoved(e){\n    document.onmousemove = null;\n    prevpos = pos;\n    pos = e.pageX + '+' + e.pageY;\n    if(timer &gt; timeout){\n        timer = 0;\n        alert('Welcome back!');\n    }\n}\nsetInterval(function(){\n    if(pos == prevpos){\n        timer += interval;\n    }else{\n        timer = 0;\n        prevpos = pos;\n    }\n    document.onmousemove = function(e){\n        mouseHasMoved(e);\n    }\n}, interval);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have tested this code working file:        </p>\n\n<pre><code>var timeout = null;\n    var timee = '4000'; // default time for session time out.\n    $(document).bind('click keyup mousemove', function(event) {\n\n    if (timeout !== null) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(function() {\n              timeout = null;\n            console.log('Document Idle since '+timee+' ms');\n            alert(\"idle window\");\n        }, timee);\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can do it more elegantly with <a href=\"http://underscorejs.org/#debounce\" rel=\"nofollow\">underscore</a> and <a href=\"http://api.jquery.com/on/\" rel=\"nofollow\">jquery</a>-</p>\n\n<pre><code>$('body').on(\"click mousemove keyup\", _.debounce(function(){\n    // do preload here\n}, 1200000)) // 20 minutes debounce\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Tried @freddoo solution but it didn't work for 1 minute timeouts so I've changed it slightly to record the date+time when the user last clicked on the page and in my <code>timerIncrement</code> function I calculate the difference between the current time and the last clicked time and if the value happens to be bigger or equal to the timeout value then I redirect:</p>\n\n<pre><code>var clickedDate = new Date();\nvar idleTime = 1;//\n\nfunction timerIncrement() {\n\n    var nowDate = new Date();\n    var diffMs = (nowDate - clickedDate); //Milliseconds between now &amp; the last time a user clicked somewhere on the page\n    var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); //Convert ms to minutes\n\n    if (diffMins &gt;= idleTime) {\n        //Redirect user to home page etc...\n    }\n}\n\n$(document).ready(function () {\n\n    var idleInterval = setInterval(timerIncrement, 60000); // 1 minute\n\n    $(this).click(function (e) {\n        clickedDate = new Date();\n    });\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Improving on equiman's answer: </p>\n\n<pre><code>function idleLogout() {\n    var t;\n    window.onload = resetTimer;\n    window.onmousemove = resetTimer;\n    window.onmousedown = resetTimer; // catches touchscreen presses\n    window.onclick = resetTimer;     // catches touchpad clicks\n    window.onscroll = resetTimer;    // catches scrolling with arrow keys\n    window.onkeypress = resetTimer;\n\n    function logout() {\n        window.location.href = 'logout.php';\n    }\n\n    function resetTimer() {\n        clearTimeout(t);\n        t = setTimeout(logout, 10000);  // time is in milliseconds\n    }\n}\nidleLogout();\n</code></pre>\n\n<p>.<br>\nApart from the improvements regarding activity detection, and the change from <code>document</code> to <code>window</code>, this script is actually called, rather than sitting idle by. </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The problem with all these solutions, although correct, they are impractical, when taking into account the session timeout valuable set, using PHP, .NET or in the Application.cfc file for Coldfusion developers. The time set by the above solution needs to sync with the server side session timeout. If the two do not sync, you can run into problems that will just frustrate and confuse your users. For example, the server side session timeout might be set to 60 minutes, but the user may believe that he/she is safe, because the JavaScript idle time capture has increased the total amount of time a user can spend on a single page. The user may have spent time filling in a long form, and then goes to submit it. The session timeout might kick in before the form submission is processed. I tend to just give my users 180 minutes, and then use JavaScript to automatically log the user out. Essentially, using some of the code above, to create a simple timer, but without the capturing mouse event part. In this way my client side &amp; server side time syncs perfectly. There is no confusion, if you show the time to the user in your UI, as it reduces. Each time a new page is accessed in the CMS, the server side session &amp; JavaScript timer are reset. Simple &amp; elegant. If a user stays on a single page for more than 180 minutes, I figure there is something wrong with the page, in the first place.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is the best solution I have found: \n<a href=\"http://css-tricks.com/snippets/jquery/fire-event-when-user-is-idle/\" rel=\"nofollow\">http://css-tricks.com/snippets/jquery/fire-event-when-user-is-idle/</a></p>\n\n<p>Here is the JS:</p>\n\n<pre><code>idleTimer = null;\nidleState = false;\nidleWait = 2000;\n\n(function ($) {\n\n    $(document).ready(function () {\n\n        $('*').bind('mousemove keydown scroll', function () {\n\n            clearTimeout(idleTimer);\n\n            if (idleState == true) { \n\n                // Reactivated event\n                $(\"body\").append(\"&lt;p&gt;Welcome Back.&lt;/p&gt;\");            \n            }\n\n            idleState = false;\n\n            idleTimer = setTimeout(function () { \n\n                // Idle Event\n                $(\"body\").append(\"&lt;p&gt;You've been idle for \" + idleWait/1000 + \" seconds.&lt;/p&gt;\");\n\n                idleState = true; }, idleWait);\n        });\n\n        $(\"body\").trigger(\"mousemove\");\n\n    });\n}) (jQuery)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to detect \"<strong><em>idle</em></strong>\" time in JavaScript?<br />\nMy primary use case probably would be to pre-fetch or preload content.</p>\n\n<p>Idle time: <em>Period of user inactivity or without any CPU usage</em></p>\n",
            "last_activity_date": 1424123663,
            "question_id": 667555,
            "score": 140,
            "tags": [
                "javascript"
            ],
            "title": "Detecting idle time in JavaScript elegantly"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>There is a difference, but there is no difference in that example.</p>\n\n<p>Using the more verbose method: <code>new Array()</code> does have one extra option in the parameters: if you pass a number to the constructor, you will get an array of that length:</p>\n\n<pre><code>x = new Array(5);\nalert(x.length); // 5\n</code></pre>\n\n<p>To illustrate the different ways to create an array:</p>\n\n<pre><code>var a = [],            // these are the same\n    b = new Array(),   // a and b are arrays with length 0\n\n    c = ['foo', 'bar'],           // these are the same\n    d = new Array('foo', 'bar'),  // c and d are arrays with 2 strings\n\n    // these are different:\n    e = new Array(3),   // e.length == 3, e[0] == undefined\n    f = [3]             // f.length == 1, f[0] == 3\n;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 233
                },
                {
                    "body": "<p>Here is a piece of JavaScript code that will verify that both declarations lead to the same type:</p>\n\n<pre><code>var test1 = [];\ntest1.push(\"value\");\n\nvar test2 = new Array();\ntest2.push(\"value\");\n\nalert(typeof(test1) == typeof(test2));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The first one is the default object constructor call. You can use it's parameters if you want.</p>\n\n<pre><code>var array = new Array(5); //initialize with default length 5\n</code></pre>\n\n<p>The second one gives you the ability to create not empty array:</p>\n\n<pre><code>var array = [1, 2, 3]; // this array will contain numbers 1, 2, 3.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For more information, the following page describes why you never need to use new Array():</p>\n\n<p><a href=\"http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/\">http://yuiblog.com/blog/2006/11/13/javascript-we-hardly-new-ya/</a></p>\n\n<blockquote>\n  <p>You never need to use new Object() in\n  JavaScript. Use the object literal {}\n  instead. Similarly, don\u2019t use new\n  Array(), use the array literal []\n  instead. Arrays in JavaScript work\n  nothing like the arrays in Java, and\n  use of the Java-like syntax will\n  confuse you.</p>\n  \n  <p>Do not use new Number, new String, or\n  new Boolean. These forms produce\n  unnecessary object wrappers. Just use\n  simple literals instead.</p>\n</blockquote>\n\n<p>Also check out the comments - the new Array(length) form does not serve any useful purpose (at least in today's implementations of JavaScript).</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>The difference between creating an array with the implicit array and the array constructor is subtle but important.</p>\n\n<p>When you create an array using</p>\n\n<pre><code>var a = [];\n</code></pre>\n\n<p>You're telling the interpreter to create a new runtime array. No extra processing necessary at all. Done.</p>\n\n<p>If you use:</p>\n\n<pre><code>var a = new Array();\n</code></pre>\n\n<p>You're telling the interpreter, I want to call the constructor \"Array\" and generate an object. It then looks up through your execution context to find the constructor to call, and calls it, creating your array.</p>\n\n<p>You may think \"Well, this doesn't matter at all. They're the same!\". Unfortunately you can't guarantee that.</p>\n\n<p>Take the following example:</p>\n\n<pre><code>function Array() {\n    this.is = 'SPARTA';\n}\n\nvar a = new Array();\nvar b = [];\n\nalert(a.is);  // =&gt; 'SPARTA'\nalert(b.is);  // =&gt; undefined\na.push('Woa'); // =&gt; TypeError: a.push is not a function\nb.push('Woa'); // =&gt; 1 (OK)\n</code></pre>\n\n<p>In the above example, the first call will alert 'SPARTA' as you'd expect. The second will not. You will end up seeing undefined. You'll also note that b contains all of the native Array object functions such as 'push', where the other does not.</p>\n\n<p>While you may expect this to happen, it just illustrates the fact that '[]' is not the same as 'new Array()'.</p>\n\n<p>It's probably best to just use [] if you know you just want an array. I also do not suggest going around and redefining Array...</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 280
                },
                {
                    "body": "<p>Oddly enough, <code>new Array(size)</code> is almost 2x faster than <code>[]</code> in Chrome, and about the same in FF and IE (measured by creating and filling an array). It only matters if you know the approximate size of the array. If you add more items than the length you've given, the performance boost is lost.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>In order to better understand <code>[]</code> and <code>new Array()</code>:</p>\n\n<pre><code>&gt; []\n  []\n&gt; new Array()\n  []\n&gt; [] == []\n  false\n&gt; [] === []\n  false\n&gt; new Array() == new Array()\n  false\n&gt; new Array() === new Array()\n  false\n&gt; typeof ([])\n  \"object\"\n&gt; typeof (new Array())\n  \"object\"\n&gt; [] === new Array()\n  false\n&gt; [] == new Array()\n  false\n</code></pre>\n\n<p>The above result is from Google Chrome console on Windows 7.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I can explain in a more specific way starting with this example that's based on Fredrik's good one.</p>\n\n<pre><code>var test1 = [];\ntest1.push(\"value\");\ntest1.push(\"value2\");\n\nvar test2 = new Array();\ntest2.push(\"value\");\ntest2.push(\"value2\");\n\nalert(test1);\nalert(test2);\nalert(test1 == test2);\nalert(test1.value == test2.value);\n</code></pre>\n\n<p>I just added another value to the arrays, and made four alerts:\nThe first and second are to give us the value stored in each array, to be sure about the values. They will return the same!\nNow try the third one, it returns false, that's because </p>\n\n<blockquote>\n  <p>JS treats <strong>test1</strong> as a <strong>VARIABLE with a data type of array</strong>, and it treats <strong>test2</strong> as an <strong>OBJECT with the functionality of an array</strong>, and\n  there are few slight differences here.</p>\n</blockquote>\n\n<p>The first difference is when we call test1 it calls a variable without thinking, it just returns the values that are stored in this variable disregarding its data type!\nBut, when we call test2 it calls the <em>Array()</em> function and then it stores our <em>\"Pushed\"</em> values in its <em>\"Value\"</em> property, and the same happens when we alert test2, it returns the <em>\"Value\"</em> property of the array object.</p>\n\n<p>So when we check if test1 equals test2 of course they will never return true, one is a function and the other is a variable (with a type of array), even if they have the same value!</p>\n\n<p>To be sure about that, try the 4th alert, with the .value added to it; it will return true. In this case we tell JS \"Disregarding the type of the container, whether was it function or variable, please compare the values that are stored in each container and tell us what you've seen!\" that's exactly what happens.</p>\n\n<p>I hope I said the idea behind that clearly, and sorry for my bad English.</p>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>Whats the real difference between declaring an array like this:</p>\n\n<pre><code>var myArray = new Array();\n</code></pre>\n\n<p>and</p>\n\n<pre><code>var myArray = [];\n</code></pre>\n",
            "last_activity_date": 1419335262,
            "question_id": 931872,
            "score": 205,
            "tags": [
                "javascript",
                "arrays",
                "declaration"
            ],
            "title": "What\u2019s the difference between &quot;Array()&quot; and &quot;[]&quot; while declaring a JavaScript array?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>From <a href=\"http://www.crockford.com/javascript/private.html\">Crockford</a></p>\n\n<blockquote>\n  <p>By convention, we make a private <strong>that</strong>\n  variable. This is used to make the\n  object available to the private\n  methods. This is a workaround for an\n  error in the ECMAScript Language\n  Specification which causes <strong>this</strong> to be\n  set incorrectly for inner functions.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>I'm going to begin this answer with an illustration:</p>\n\n<pre><code>var colours = ['red', 'green', 'blue'];\ndocument.getElementById('element').addEventListener('click', function() {\n    // this is a reference to the element clicked on\n\n    var that = this;\n\n    colours.forEach(function() {\n        // this is undefined\n        // that is a reference to the element clicked on\n    });\n});\n</code></pre>\n\n<p>My answer originally demonstrated this with jQuery, which is only very slightly different:</p>\n\n<pre><code>$('#element').click(function(){\n    // this is a reference to the element clicked on\n\n    var that = this;\n\n    $('.elements').each(function(){\n        // this is a reference to the current element in the loop\n        // that is still a reference to the element clicked on\n    });\n});\n</code></pre>\n\n<p>Because <code>this</code> frequently changes when you change the scope by calling a new function, you can't access the original value by using it.  Aliasing it to <code>that</code> allows you still to access the original value of <code>this</code>.</p>\n\n<p>Personally, I dislike the use of <code>that</code> as the alias.  It is rarely obvious what it is referring to, especially if the functions are longer than a couple of lines. I <em>always</em> use a more descriptive alias.  In my examples above, I'd probably use <code>clickedEl</code>.</p>\n",
                    "is_accepted": true,
                    "score": 262
                },
                {
                    "body": "<p>This is a hack to make inner functions (functions defined inside other functions) work more like they should. In javascript when you define one function inside another <code>this</code> automatically gets set to the global scope. This can be confusing because you expect <code>this</code> to have the same value as in the outer function.</p>\n\n<pre><code>var car = {};\ncar.starter = {};\n\ncar.start = function(){\n    var that = this;\n\n    // you can access car.starter inside this method with 'this'\n    this.starter.active = false;\n\n    var activateStarter = function(){\n        // 'this' now points to the global scope\n        // 'this.starter' is undefined, so we use 'that' instead.\n        that.starter.active = true;\n\n        // you could also use car.starter, but using 'that' gives\n        // us more consistency and flexibility\n    };\n\n    activateStarter();\n\n};\n</code></pre>\n\n<p>This is specifically a problem when you create a function as a method of an object (like <code>car.start</code> in the example) then create a function inside that method (like <code>activateStarter</code>). In the top level method <code>this</code> points to the object it is a method of (in this case, <code>car</code>) but in the inner function <code>this</code> now points to the global scope. This is a pain.</p>\n\n<p>Creating a variable to use by convention in both scopes is a solution for this very general problem with javascript (though it's useful in jquery functions, too). This is why the very general sounding name <code>that</code> is used. It's an easily recognizable convention for overcoming a shortcoming in the language.</p>\n\n<p>Like El Ronnoco hints at <a href=\"http://www.crockford.com/javascript/\">Douglas Crockford</a> thinks this is a good idea.</p>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>Sometimes <code>this</code> can refer to another scope and refer to something else, for example suppose you want to call a constructor method inside a DOM event, in this case <code>this</code> will refer to the DOM element not the created object.</p>\n\n<p>HTML</p>\n\n<pre><code>&lt;button id=\"button\"&gt;Alert Name&lt;/button&gt;\n</code></pre>\n\n<p>JS</p>\n\n<pre><code>var Person = function(name) {\n  this.name = name;\n  var that = this;\n  this.sayHi = function() {\n    alert(that.name);\n  };\n};\n\nvar ahmad = new Person('Ahmad');\nvar element = document.getElementById('button');\nelement.addEventListener('click', ahmad.sayHi); // =&gt; Ahmad\n</code></pre>\n\n<p><a href=\"http://jsbin.com/degaja/1/\" rel=\"nofollow\">Demo</a></p>\n\n<p>The solution above will assing <code>this</code> to <code>that</code> then we can and access the name property inside the <code>sayHi</code> method from <code>that</code>, so this can be called without issues inside the DOM call.</p>\n\n<p>Another solution is to assign an empty <code>that</code> object and add properties and methods to it and then return it. But with this solution you lost the <code>prototype</code> of the constructor.</p>\n\n<pre><code>var Person = function(name) {\n  var that = {};\n  that.name = name;\n  that.sayHi = function() {\n    alert(that.name);\n  };\n  return that;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In a javascript file I saw: </p>\n\n<pre><code>function Somfunction(){\n   var that = this; \n   ... \n}\n</code></pre>\n\n<p>What does this do precisely?  </p>\n",
            "last_activity_date": 1414842697,
            "question_id": 4886632,
            "score": 154,
            "tags": [
                "javascript",
                "this"
            ],
            "title": "What does var that = this; mean in javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Versions of IE before IE9 don't have an <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>.indexOf()</code></a> function for Array, to define <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_15.4.4.14\">the exact spec version</a>, run this before trying to use it:</p>\n\n<pre><code>if (!Array.prototype.indexOf)\n{\n  Array.prototype.indexOf = function(elt /*, from*/)\n  {\n    var len = this.length &gt;&gt;&gt; 0;\n\n    var from = Number(arguments[1]) || 0;\n    from = (from &lt; 0)\n         ? Math.ceil(from)\n         : Math.floor(from);\n    if (from &lt; 0)\n      from += len;\n\n    for (; from &lt; len; from++)\n    {\n      if (from in this &amp;&amp;\n          this[from] === elt)\n        return from;\n    }\n    return -1;\n  };\n}\n</code></pre>\n\n<p>This is the version <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility\">from MDC</a>, used in Firefox/SpiderMonkey.  In other cases such as IE, it'll add <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>.indexOf()</code></a> in the case it's missing...basically IE8 or below at this point.</p>\n",
                    "is_accepted": true,
                    "score": 370
                },
                {
                    "body": "<p>For a really thorough explanation and workaround, not only for indexOf but other array functions missing in IE check out the StackOverflow question <a href=\"http://stackoverflow.com/questions/2790001/fixing-javascript-array-functions-in-internet-explorer-indexof-foreach-etc\">Fixing javascript Array functions in Internet Explorer (indexOf, forEach, etc)</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If you're using jQuery, you can use <a href=\"http://api.jquery.com/jQuery.inArray/\">$.inArray()</a> instead.</p>\n",
                    "is_accepted": false,
                    "score": 126
                },
                {
                    "body": "<p>Please careful with $.inArray if you want to use it.\nI just found out that the $.inArray is only works with \"Array\", not with String.\nThat's why this function will not working in IE8!</p>\n\n<p>The jQuery API make confusion</p>\n\n<blockquote>\n  <p>The $.inArray() method is similar to JavaScript's native .indexOf()\n  method in that it returns -1 when it doesn't find a match. If the\n  first element within the array matches value, $.inArray() returns 0</p>\n</blockquote>\n\n<p>--> They shouldn't say it \"Similar\". Since indexOf support \"String\" also!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're using jQuery and want to keep using indexOf without worrying about compatibility issues, you can do this :</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(val) {\n        return jQuery.inArray(val, this);\n    };\n}\n</code></pre>\n\n<p>This is helpful when you want to keep using <code>indexOf</code> but provide a fallback when it's not available.  </p>\n\n<p>Put this at the top of your first loaded javascript file, after <code>$(document).ready(function() {</code></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I put this in the header of my index page for my AngularJS app and it works great with IE8 (I would reply to Nick Carver but I lack the reputation)</p>\n\n<pre><code>&lt;script&gt;\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(elt /*, from*/) {\n        var len = this.length &gt;&gt;&gt; 0;\n\n        var from = Number(arguments[1]) || 0;\n        from = (from &lt; 0) ? Math.ceil(from) : Math.floor(from);\n        if (from &lt; 0)\n            from += len;\n\n        for (; from &lt; len; from++) {\n            if (from in this &amp;&amp; this[from] === elt)\n                return from;\n        }\n        return -1;\n    };\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The below function works fine on opera, firefox and chrome. However in IE8 it fails on <code>if ( allowed.indexOf(ext[1]) == -1)</code> part.</p>\n\n<p>Does anyone know why? Is there any obvious mistake?</p>\n\n<pre><code>function CheckMe() {\n    var allowed = new Array('docx','xls','xlsx', 'mp3', 'mp4', '3gp', 'sis', 'sisx', 'mp3', 'wav', 'mid', 'amr', 'jpg', 'gif', 'png', 'jpeg', 'txt', 'pdf', 'doc', 'rtf', 'thm', 'rar', 'zip', 'htm', 'html', 'css', 'swf', 'jar', 'nth', 'aac', 'cab', 'wgz');\n    var fileinput=document.getElementById('f');\n    var ext = fileinput.value.toLowerCase().split('.');\n    if ( allowed.indexOf(ext[1]) == -1) \n    {\n        document.getElementById('uploadsec').innerHTML = document.getElementById('uploadsec').innerHTML;\n        alert('This file type is not allowed!');\n    }\n}\n</code></pre>\n",
            "last_activity_date": 1424712138,
            "question_id": 3629183,
            "score": 215,
            "tags": [
                "javascript",
                "internet-explorer",
                "internet-explorer-8"
            ],
            "title": "Why doesn&#39;t indexOf work on an array IE8?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>document.querySelectorAll(\".class\");\n</code></pre>\n\n<p>That will work in \"modern\" browsers that implement that method.</p>\n\n<pre><code>function ReplaceContentInContainer(selector, content) {\n  var nodeList = document.querySelectorAll(selector);\n  for (var i = 0, length = nodeList.length; i &lt; length; i++) {\n     nodeList[i].innerHTML = content;\n  }\n}\n\nReplaceContentInContainer(\".theclass\", \"HELLO WORLD\");\n</code></pre>\n\n<p>If you want to provide support for older browsers, you could load a stand-alone selector engine like <a href=\"http://sizzlejs.com/\">Sizzle</a> (4KB mini+gzip) or <a href=\"http://jamesdonaghue.com/static/peppy/\">Peppy</a> (10K mini) and fall back to it if the native querySelector method is not found. </p>\n\n<p>Is it overkill to load a selector engine just so you can get elements with a certain class? Probably. However, the scripts aren't all that big and you will may find the selector engine useful in many other places in your script.</p>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>I think something like:</p>\n\n<pre><code>function ReplaceContentInContainer(class,content) {\nvar elems = document.getElementsByTagName('*');\nfor (i in elems){\n    if(elems[i].getAttribute('class') == class || elems[i].getAttribute('className') == class){\n        elems[i].innerHTML = content;\n    }\n}\n}\n</code></pre>\n\n<p>would work </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This should work in pretty much any browser...</p>\n\n<pre><code>function getByClass (className, parent) {\n  parent || (parent=document);\n  var descendants=parent.getElementsByTagName('*'), i=-1, e, result=[];\n  while (e=descendants[++i]) {\n    ((' '+(e['class']||e.className)+' ').indexOf(' '+className+' ') &gt; -1) &amp;&amp; result.push(e);\n  }\n  return result;\n}\n</code></pre>\n\n<p>You should be able to use it like this:</p>\n\n<pre><code>function replaceInClass (className, content) {\n  var nodes = getByClass(className), i=-1, node;\n  while (node=nodes[++i]) node.innerHTML = content;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This code should work in all browsers.</p>\n\n<pre><code>function replaceContentInContainer(matchClass, content) {\n    var elems = document.getElementsByTagName('*'), i;\n    for (i in elems) {\n        if((' ' + elems[i].className + ' ').indexOf(' ' + matchClass + ' ')\n                &gt; -1) {\n            elems[i].innerHTML = content;\n        }\n    }\n}\n</code></pre>\n\n<p>The way it works is by looping through all of the elements in the document, and searching their class list for <code>matchClass</code>. If a match is found, the contents is replaced.</p>\n\n<p><a href=\"http://jsfiddle.net/AXdtH/2/\">jsFiddle Example, using Vanilla JS (i.e. no framework)</a></p>\n",
                    "is_accepted": true,
                    "score": 140
                },
                {
                    "body": "<p>Of course, all current browsers now support:</p>\n\n<pre><code>var elements = document.getElementsByClassName('someClass');\n</code></pre>\n\n<p>but be warned it doesn't work with IE8 or before. See <a href=\"http://caniuse.com/getelementsbyclassname\">http://caniuse.com/getelementsbyclassname</a></p>\n\n<p>Also, not all browsers will return a pure <code>NodeList</code> like they're supposed to.</p>\n\n<p>You're probably still better off using your favorite cross-browser library.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>A Simple and an easy way      </p>\n\n<pre><code>var cusid_ele = document.getElementsByClassName('custid');\nfor (var i = 0; i &lt; cusid_ele.length; ++i) {\n    var item = cusid_ele[i];  \n    item.innerHTML = 'this is value';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>When some elements lack ID, I use jQuery like this:</p>\n\n<pre><code>$(document).ready(function()\n{\n    $('.myclass').attr('id', 'myid');\n});\n</code></pre>\n\n<p>This might be a strange solution, but maybe someone find it useful.</p>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p>I'm surprised there are no answers using Regular Expressions. This is pretty much <a href=\"http://stackoverflow.com/a/3808886/2088822\">Andrew's answer</a>, using <code>RegExp.test</code> instead of <code>String.indexOf</code>, since it seems to perform better for multiple operations, according to <a href=\"http://jsperf.com/regexp-test-search-vs-indexof/27\" rel=\"nofollow\">jsPerf tests</a>.<br>\nIt also <a href=\"http://msdn.microsoft.com/en-us/library/ie/a55e5s6b%28v=vs.94%29.aspx\" rel=\"nofollow\">seems to be supported on IE6</a>.</p>\n\n<pre><code>function replaceContentInContainer(matchClass, content) {\n    var re = new RegExp(\"(?:^|\\\\s)\" + matchClass + \"(?!\\\\S)\"),\n        elems = document.getElementsByTagName('*'), i;\n    for (i in elems) {\n        if (re.test(elems[i].className)) {\n            elems[i].innerHTML = content;\n        }\n    }\n}\n\nreplaceContentInContainer(\"box\", \"This is the replacement text.\");\n</code></pre>\n\n<p>If you look for the same class(es) frequently, you can further improve it by storing the (precompiled) regular expressions elsewhere, and passing them directly to the function, instead of a string.</p>\n\n<pre><code>function replaceContentInContainer(reClass, content) {\n    var elems = document.getElementsByTagName('*'), i;\n    for (i in elems) {\n        if (reClass.test(elems[i].className)) {\n            elems[i].innerHTML = content;\n        }\n    }\n}\n\nvar reBox = /(?:^|\\s)box(?!\\S)/;\nreplaceContentInContainer(reBox, \"This is the replacement text.\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to replace the contents within a html element so I'm using the following function for that:</p>\n\n<pre><code>function ReplaceContentInContainer(id,content) {\n   var container = document.getElementById(id);\n   container.innerHTML = content;\n}\n\nReplaceContentInContainer('box','This is the replacement text');\n\n&lt;div id='box'&gt;&lt;/div&gt;\n</code></pre>\n\n<p>The above works great but the problem is I have more than one html element on a page that I want to replace the contents of. So I can't use ids but classes instead. I have been told that javascript does not support any type of inbuilt get element by class function. So how can the above code be revised to make it work with classes instead of ids? </p>\n\n<p>P.S. I don't want to use jQuery for this.</p>\n",
            "last_activity_date": 1411860278,
            "question_id": 3808808,
            "score": 128,
            "tags": [
                "javascript"
            ],
            "title": "How to Get Element By Class in JavaScript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Yes, client side validation can be totally bypassed, always. You need to do both, client side to provide a better user experience, and server side to be sure that the input you get is actually validated and not just supposedly validated by the client.</p>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>If you are doing light validation, it is best to do it on the client.  It will save the network traffic which will help your server perform better.  If if it complicated validation that involves pulling data from a database or something, like passwords, then it best to do it on the server where the data can be securely checked.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The benefit of doing server side validation over client side validation is that client side validation can be bypassed/manipulated:</p>\n\n<ul>\n<li>The end user could have javascript switched off</li>\n<li>The data could be sent directly to your server by someone who's not even using your site, with a custom app designed to do so</li>\n<li>A Javascript error on your page (caused by any number of things) could result in some, but not all, of your validation running</li>\n</ul>\n\n<p>In short - always, always validate server-side and then consider client-side validation as an added \"extra\" to enhance the end user experience.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p><strong>You <em>must always</em> validate on the server.</strong></p>\n\n<p>Also having validation on the client is nice for users, but is utterly insecure.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I am just going to repeat it, because it is quite important:</p>\n\n<blockquote>\n  <p><strong>Always validate on the server</strong></p>\n</blockquote>\n\n<p>and add JavaScript for user-responsiveness.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>As others have said, you should do both. Here's why:</p>\n\n<h2>Client Side</h2>\n\n<p>You want to validate input on the client side first because you can give <strong>better feedback to the average user</strong>. For example, if they enter an invalid email address and move to the next field, you can show an error message immediately. That way the user can correct every field <strong>before</strong> they submit the form.</p>\n\n<p>If you only validate on the server, they have to submit the form, get an error message, and try to hunt down the problem. </p>\n\n<p>(This pain can be eased by making \"sticky\" forms where the server remembers what was entered in each field and fills it back in, but client-side validation is still faster.)</p>\n\n<h2>Server Side</h2>\n\n<p>You want to validate on the server side because you can <strong>protect against the malicious user</strong>, who can easily bypass your JavaScript and submit dangerous input to the server. </p>\n\n<p>It is very dangerous to trust your UI. <strong>Not only can they abuse your UI, but they may not be using your UI at all, or even a browser</strong>. What if the user manually edits the URL, or runs their own Javascript, or tweaks their HTTP requests with another tool? What if they send custom HTTP requests from curl, for example?</p>\n\n<p>Not allowing for that is not only naive from a security standpoint, but also non-standard: a client should be allowed to send HTTP by whatever means they wish, and you should respond correctly. That includes validation.</p>\n\n<p>Server side validation is also important for <strong>compatibility</strong> - not all users will have JavaScript enabled.</p>\n",
                    "is_accepted": false,
                    "score": 131
                },
                {
                    "body": "<p>Well, I still find some room to answer.</p>\n\n<p>In addition to answers from Rob and Nathan, I would add that having client-side validations matters. When you are applying validations on your webforms you must follow these guidelines:</p>\n\n<h3>Client-Side</h3>\n\n<ol>\n<li>Must use client-side validations in order to filter genuine requests coming from genuine users at your website.</li>\n<li>The client-side validation should be used to reduce the errors that might occure during server side processing.</li>\n<li>Client-side validation should be used to minimize the server-side round-trips so that you save bandwidth and the requests per user. </li>\n</ol>\n\n<h3>Server-Side</h3>\n\n<ol>\n<li>You SHOULD NOT assume the validation successfully done at client side is 100% perfect. No matter even if it serves less than 50 users. You never know which of your user/emplyee turn into an \"evil\" and do some harmful  activity knowing you dont have proper validations in place.</li>\n<li>Even if its perfect in terms of validating email address, phone numbers or checking some valid inputs it might contain very harmful data. Which needs to be filtered at server-side no matter if its correct or incorrect.</li>\n<li>If client-side validation is bypassed, your server-side validations comes to rescue you from any potential damage to your server-side processing. In recent times, we have already heard lot of stories of SQL Injections and other sort of techniques that might be applied in order to gain some evil benefits.</li>\n</ol>\n\n<p>Both types of validations play important roles in their respective scope but the most strongest is the server-side. If you receive 10k users at a single point of time then you would definitely end up filtering the number of requests coming to your webserver. If you find there was a single mistake like invalid email address then they post back the form again and ask your user to correct it which will definitely eat your server resources and bandwidth. So better you apply javascript validation. If javascript is disabled then your server side validation will come to rescue and i bet only a few users might have accidentlly disable it since 99.99% of websites use javascript and its already enabled by default in all modern browsers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can do Server side validation and send back a JSON object with the validation results for each field, keeping client Javascript to a minimum (just displaying results) and still having a user friendly experience without having to repeat yourself on both client and server.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Client side should use a basic validation via <a href=\"http://www.w3schools.com/html/html5_form_input_types.asp\" rel=\"nofollow\">HTML5 input types</a> and <a href=\"http://www.w3schools.com/tags/att_input_pattern.asp\" rel=\"nofollow\">pattern attributes</a> and as these are only used for progressive enhancements for better user experience (Even if they are not supported on &lt; IE9 and safari, but we don't rely on them). But the main validation should happen on the server side..</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>JavaScript can be modified at runtime.</p>\n\n<p>I suggest a pattern of creating a validation structure on the server, and sharing this with the client. </p>\n\n<p>You'll need separate validation logic on both ends, ex:</p>\n\n<p><code>\"required\"</code> attributes on <code>inputs</code> client-side</p>\n\n<p><code>field.length &gt; 0</code> server-side.</p>\n\n<p>But using the same validation specification will eliminate some redundancy (and mistakes) of mirroring validation on both ends.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I will suggest to implement both client and server validation it keeps project more secure......if i have  to choose one i will go with server side validation.</p>\n\n<p>You can find some relevant information here \n<a href=\"http://www.webexpertlabs.com/server-side-form-validation-using-regular-expression/\" rel=\"nofollow\">http://www.webexpertlabs.com/server-side-form-validation-using-regular-expression/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Which is better to do client side or server side validation?</p>\n\n<p>In our situation we are using </p>\n\n<ul>\n<li>jQuery and MVC.  </li>\n<li>JSON data to pass between our View and Controller.  </li>\n</ul>\n\n<p>A lot of the validation I do is validating data as users enter it.\nFor example I use the the <code>keypress</code> event to prevent letters in a text box, set a max number of characters and that a number is with in a range. </p>\n\n<p>I guess the better question would be, Are there any benefits to doing server side validation over client side?</p>\n\n<hr>\n\n<p>Awesome answers everyone. The website that we have is password protected and for a small user base(&lt;50). If they are not running JavaScript we will send ninjas. But if we were designing a site for everyone one I'd agree to do validation on both sides.</p>\n",
            "last_activity_date": 1384286691,
            "question_id": 162159,
            "score": 83,
            "tags": [
                "javascript",
                "security",
                "validation"
            ],
            "title": "JavaScript: client-side vs. server-side validation"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Taken from <a href=\"http://www.webdevelopersnotes.com/tips/html/javascript_date_and_time.php3\">http://www.webdevelopersnotes.com/tips/html/javascript_date_and_time.php3</a>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n&lt;!--\n\nvar m_names = new Array(\"January\", \"February\", \"March\", \n\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n\"October\", \"November\", \"December\");\n\nvar d = new Date();\nvar curr_date = d.getDate();\nvar curr_month = d.getMonth();\nvar curr_year = d.getFullYear();\ndocument.write(curr_date + \"-\" + m_names[curr_month] \n+ \"-\" + curr_year);\n\n//--&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>You can edit the array to use Jan, Feb, Mar, etc..</strong></p>\n",
                    "is_accepted": true,
                    "score": 106
                },
                {
                    "body": "<p><a href=\"http://jsfiddle.net/phZr7/1/\">http://jsfiddle.net/phZr7/1/</a></p>\n\n<p>Use the format prototype below.</p>\n\n<pre><code>today = new Date();\nvar dateString = today.format(\"dd-m-yy\");\nalert(dateString);\n</code></pre>\n\n<hr>\n\n<p>The Prototype Library</p>\n\n<pre><code>/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan &lt;stevenlevithan.com&gt;\n * MIT license\n *\n * Includes enhancements by Scott Trenda &lt;scott.trenda.net&gt;\n * and Kris Kowal &lt;cixar.com/~kris.kowal/&gt;\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\nvar dateFormat = function () {\n    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n        timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n        timezoneClip = /[^-+\\dA-Z]/g,\n        pad = function (val, len) {\n            val = String(val);\n            len = len || 2;\n            while (val.length &lt; len) val = \"0\" + val;\n            return val;\n        };\n\n    // Regexes and supporting functions are cached through closure\n    return function (date, mask, utc) {\n        var dF = dateFormat;\n\n        // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n        if (arguments.length == 1 &amp;&amp; Object.prototype.toString.call(date) == \"[object String]\" &amp;&amp; !/\\d/.test(date)) {\n            mask = date;\n            date = undefined;\n        }\n\n        // Passing date through Date applies Date.parse, if necessary\n        date = date ? new Date(date) : new Date;\n        if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n        mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n        // Allow setting the utc argument via the mask\n        if (mask.slice(0, 4) == \"UTC:\") {\n            mask = mask.slice(4);\n            utc = true;\n        }\n\n        var _ = utc ? \"getUTC\" : \"get\",\n            d = date[_ + \"Date\"](),\n            D = date[_ + \"Day\"](),\n            m = date[_ + \"Month\"](),\n            y = date[_ + \"FullYear\"](),\n            H = date[_ + \"Hours\"](),\n            M = date[_ + \"Minutes\"](),\n            s = date[_ + \"Seconds\"](),\n            L = date[_ + \"Milliseconds\"](),\n            o = utc ? 0 : date.getTimezoneOffset(),\n            flags = {\n                d:    d,\n                dd:   pad(d),\n                ddd:  dF.i18n.dayNames[D],\n                dddd: dF.i18n.dayNames[D + 7],\n                m:    m + 1,\n                mm:   pad(m + 1),\n                mmm:  dF.i18n.monthNames[m],\n                mmmm: dF.i18n.monthNames[m + 12],\n                yy:   String(y).slice(2),\n                yyyy: y,\n                h:    H % 12 || 12,\n                hh:   pad(H % 12 || 12),\n                H:    H,\n                HH:   pad(H),\n                M:    M,\n                MM:   pad(M),\n                s:    s,\n                ss:   pad(s),\n                l:    pad(L, 3),\n                L:    pad(L &gt; 99 ? Math.round(L / 10) : L),\n                t:    H &lt; 12 ? \"a\"  : \"p\",\n                tt:   H &lt; 12 ? \"am\" : \"pm\",\n                T:    H &lt; 12 ? \"A\"  : \"P\",\n                TT:   H &lt; 12 ? \"AM\" : \"PM\",\n                Z:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                o:    (o &gt; 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                S:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 &gt; 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n            };\n\n        return mask.replace(token, function ($0) {\n            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n        });\n    };\n}();\n\n// Some common format strings\ndateFormat.masks = {\n    \"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n    shortDate:      \"m/d/yy\",\n    mediumDate:     \"mmm d, yyyy\",\n    longDate:       \"mmmm d, yyyy\",\n    fullDate:       \"dddd, mmmm d, yyyy\",\n    shortTime:      \"h:MM TT\",\n    mediumTime:     \"h:MM:ss TT\",\n    longTime:       \"h:MM:ss TT Z\",\n    isoDate:        \"yyyy-mm-dd\",\n    isoTime:        \"HH:MM:ss\",\n    isoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n    isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n};\n\n// Internationalization strings\ndateFormat.i18n = {\n    dayNames: [\n        \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n    ],\n    monthNames: [\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ]\n};\n\n// For convenience...\nDate.prototype.format = function (mask, utc) {\n    return dateFormat(this, mask, utc);\n};\n</code></pre>\n\n<p>SOURCE: <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\">http://blog.stevenlevithan.com/archives/date-time-format</a></p>\n",
                    "is_accepted": false,
                    "score": 130
                },
                {
                    "body": "<p>I think you can just use the Date method <code>toLocaleFormat(formatString)</code></p>\n\n<p><strong>formatString:</strong> A format string in the same format expected by the strftime() function in C.</p>\n\n<pre><code>var today = new Date();\ntoday.toLocaleFormat('%d-%b-%Y'); // 30-Dec-2011\n</code></pre>\n\n<p><strong>References:</strong></p>\n\n<ul>\n<li><a href=\"http://www.tutorialspoint.com/javascript/date_tolocaleformat.htm\">tolocaleformat</a></li>\n<li><a href=\"http://www.cplusplus.com/reference/clibrary/ctime/strftime/\">strftime</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>You should give a look at <a href=\"http://www.datejs.com/\">date.js</a>, it adds many convenient helpers for working with dates, eg. in your case:</p>\n\n<pre><code>var date = Date.parse('2010-08-10');\nconsole.log(date.toString('dd-MMM-yyyy'));\n</code></pre>\n\n<p>Getting started: <a href=\"http://www.datejs.com/2007/11/27/getting-started-with-datejs/\">http://www.datejs.com/2007/11/27/getting-started-with-datejs/</a></p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>This library can format the date object and parse the formatted string back to Date object.\nIt uses Java format (SimpleDateFormat class). The name of months and days can be localized.</p>\n\n<p><a href=\"http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip\" rel=\"nofollow\">http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip</a></p>\n\n<p>Example:</p>\n\n<pre><code>var sdf = new JsSimpleDateFormat(\"dd-MMM-yyyy\");\nvar formattedString = sdf.format(new Date());\nvar dateObject = sdf.parse(\"10-Aug-2010\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Well what I wanted was to convert today date to mysql friendly date string like: 2012-06-23, and to use that string as a parameter in one of my queries. The simple solution I've found is this:</p>\n\n<pre><code>var today = new Date().toISOString().slice(0, 10);\n</code></pre>\n\n<h1>Update</h1>\n\n<p>Keep in mind that the above solution does <strong>not</strong> take into account your timezone offset.</p>\n\n<p>You might consider using this function instead:</p>\n\n<pre><code>function toJSONLocal (date) {\n    var local = new Date(date);\n    local.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}\n</code></pre>\n\n<p>This will give you the correct date in case you are executing this code around the start/end of the day.</p>\n\n<ul>\n<li><strong>updated example:</strong> <a href=\"http://jsfiddle.net/simo/sapuhzmm/\">http://jsfiddle.net/simo/sapuhzmm/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\">Date.toISOString</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\">Date.toJSON</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\">String.slice</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p><strong>add jquery ui plugin in your page.</strong></p>\n\n<pre><code>function DateFormate(dateFormate, datetime) {\n    return $.datepicker.formatDate(dateFormate, datetime);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>    function DateAdd(x) {\n\n        var myDate = new Date(x);\n        myDate.setDate(myDate.getDate() + 9);\n        //var sDate = new Date(Date.parse(myDate, \"MM/dd/yyyy\"));\n\n        today = new Date(myDate);\n        var dateString = today.format(\"MM/dd/yyyy\");\n        alert(dateString);\n       // alert(sDate.toString('dddd, MMMM ,yyyy'));\n\n\n       // var confirmed = window.confirm(\"change a record, would you like to continue ?\");\n        return false;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Sugar.js has excellent extensions to the Date object, including a Date.format method:</p>\n\n<p><a href=\"http://sugarjs.com/api/Date/format\">http://sugarjs.com/api/Date/format</a></p>\n\n<p>Examples from the doc:</p>\n\n<pre><code>Date.create().format('{Weekday} {Month} {dd}, {yyyy}');\n\nDate.create().format('{12hr}:{mm}{tt}')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here's is some code I just wrote to handle the date formatting for a project I'm working on. It mimics the PHP date formatting functionality to suit my needs. Feel free to use it, it's just extending the already existing Date() object. This may not be the most elegant solution but it's working for my needs.</p>\n\n<pre><code>var d = new Date(); \nd_string = d.format(\"m/d/Y h:i:s\");\n\n/**************************************\n * Date class extension\n * \n */\n    // Provide month names\n    Date.prototype.getMonthName = function(){\n        var month_names = [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December'\n                        ];\n\n        return month_names[this.getMonth()];\n    }\n\n    // Provide month abbreviation\n    Date.prototype.getMonthAbbr = function(){\n        var month_abbrs = [\n                            'Jan',\n                            'Feb',\n                            'Mar',\n                            'Apr',\n                            'May',\n                            'Jun',\n                            'Jul',\n                            'Aug',\n                            'Sep',\n                            'Oct',\n                            'Nov',\n                            'Dec'\n                        ];\n\n        return month_abbrs[this.getMonth()];\n    }\n\n    // Provide full day of week name\n    Date.prototype.getDayFull = function(){\n        var days_full = [\n                            'Sunday',\n                            'Monday',\n                            'Tuesday',\n                            'Wednesday',\n                            'Thursday',\n                            'Friday',\n                            'Saturday'\n                        ];\n        return days_full[this.getDay()];\n    };\n\n    // Provide full day of week name\n    Date.prototype.getDayAbbr = function(){\n        var days_abbr = [\n                            'Sun',\n                            'Mon',\n                            'Tue',\n                            'Wed',\n                            'Thur',\n                            'Fri',\n                            'Sat'\n                        ];\n        return days_abbr[this.getDay()];\n    };\n\n    // Provide the day of year 1-365\n    Date.prototype.getDayOfYear = function() {\n        var onejan = new Date(this.getFullYear(),0,1);\n        return Math.ceil((this - onejan) / 86400000);\n    };\n\n    // Provide the day suffix (st,nd,rd,th)\n    Date.prototype.getDaySuffix = function() {\n        var d = this.getDate();\n        var sfx = [\"th\",\"st\",\"nd\",\"rd\"];\n        var val = d%100;\n\n        return (sfx[(val-20)%10] || sfx[val] || sfx[0]);\n    };\n\n    // Provide Week of Year\n    Date.prototype.getWeekOfYear = function() {\n        var onejan = new Date(this.getFullYear(),0,1);\n        return Math.ceil((((this - onejan) / 86400000) + onejan.getDay()+1)/7);\n    } \n\n    // Provide if it is a leap year or not\n    Date.prototype.isLeapYear = function(){\n        var yr = this.getFullYear();\n\n        if ((parseInt(yr)%4) == 0){\n            if (parseInt(yr)%100 == 0){\n                if (parseInt(yr)%400 != 0){\n                    return false;\n                }\n                if (parseInt(yr)%400 == 0){\n                    return true;\n                }\n            }\n            if (parseInt(yr)%100 != 0){\n                return true;\n            }\n        }\n        if ((parseInt(yr)%4) != 0){\n            return false;\n        } \n    };\n\n    // Provide Number of Days in a given month\n    Date.prototype.getMonthDayCount = function() {\n        var month_day_counts = [\n                                    31,\n                                    this.isLeapYear() ? 29 : 28,\n                                    31,\n                                    30,\n                                    31,\n                                    30,\n                                    31,\n                                    31,\n                                    30,\n                                    31,\n                                    30,\n                                    31\n                                ];\n\n        return month_day_counts[this.getMonth()];\n    } \n\n    // format provided date into this.format format\n    Date.prototype.format = function(dateFormat){\n        // break apart format string into array of characters\n        dateFormat = dateFormat.split(\"\");\n\n        var date = this.getDate(),\n            month = this.getMonth(),\n            hours = this.getHours(),\n            minutes = this.getMinutes(),\n            seconds = this.getSeconds();\n        // get all date properties ( based on PHP date object functionality )\n        var date_props = {\n            d: date &lt; 10 ? '0'+date : date,\n            D: this.getDayAbbr(),\n            j: this.getDate(),\n            l: this.getDayFull(),\n            S: this.getDaySuffix(),\n            w: this.getDay(),\n            z: this.getDayOfYear(),\n            W: this.getWeekOfYear(),\n            F: this.getMonthName(),\n            m: month &lt; 10 ? '0'+(month+1) : month+1,\n            M: this.getMonthAbbr(),\n            n: month+1,\n            t: this.getMonthDayCount(),\n            L: this.isLeapYear() ? '1' : '0',\n            Y: this.getFullYear(),\n            y: this.getFullYear()+''.substring(2,4),\n            a: hours &gt; 12 ? 'pm' : 'am',\n            A: hours &gt; 12 ? 'PM' : 'AM',\n            g: hours % 12 &gt; 0 ? hours % 12 : 12,\n            G: hours &gt; 0 ? hours : \"12\",\n            h: hours % 12 &gt; 0 ? hours % 12 : 12,\n            H: hours,\n            i: minutes &lt; 10 ? '0' + minutes : minutes,\n            s: seconds &lt; 10 ? '0' + seconds : seconds           \n        };\n\n        // loop through format array of characters and add matching data else add the format character (:,/, etc.)\n        var date_string = \"\";\n        for(var i=0;i&lt;dateFormat.length;i++){\n            var f = dateFormat[i];\n            if(f.match(/[a-zA-Z]/g)){\n                date_string += date_props[f] ? date_props[f] : '';\n            } else {\n                date_string += f;\n            }\n        }\n\n        return date_string;\n    };\n/*\n *\n * END - Date class extension\n * \n ************************************/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you are <strong>already using jQuery UI</strong> in your project you could do it this way: </p>\n\n<pre><code>var formatted = $.datepicker.formatDate(\"M d, yy\", new Date(\"2014-07-08T09:02:21.377\"));\n\n// formatted will be 'Jul 8, 2014'\n</code></pre>\n\n<p>Some datepicker date format options to play with are available <a href=\"https://jqueryui.com/resources/demos/datepicker/date-formats.html\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Here is a script that does exactly what you want</p>\n\n<p><a href=\"https://github.com/UziTech/js-date-format\" rel=\"nofollow\">https://github.com/UziTech/js-date-format</a></p>\n\n<pre><code>var d = new Date(\"2010-8-10\");\ndocument.write(d.format(\"DD-MMM-YYYY\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>javascript solution without using any external libraries:</p>\n\n<pre><code>var now = new Date()\nmonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nvar formattedDAte = now.getDate()+\"-\"+months[now.getMonth()]+\"-\"+now.getFullYear()\nalert(formattedDAte)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@S\u00e9bastien  -- alternative all browser support</p>\n\n<pre><code>new Date(parseInt(496407600)*1000).toLocaleDateString('de-DE', {\nyear: 'numeric',\nmonth: '2-digit',\nday: '2-digit'\n}).replace(/\\./g, '/');\n</code></pre>\n\n<p>Documentation:\n <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>if you are using jquery in your coding there is an inbuilt function called formatDate.</p>\n\n<p>I am using it this way to format todays date.</p>\n\n<pre><code>             var testdate = Date();           \n             testdate = $.datepicker.formatDate( \"d-M-yy\",new Date(testdate));\n             alert(testdate);\n</code></pre>\n\n<p>You can get many other ways of formatting date from jquery website\n<a href=\"http://api.jqueryui.com/datepicker/#option-dateFormat\" rel=\"nofollow\">http://api.jqueryui.com/datepicker/#option-dateFormat</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Plain JavaScript is best pick for small onetimers.\nOn the other case if you need more date stuff <a href=\"http://momentjs.com/\" rel=\"nofollow\">http://momentjs.com/</a> is a great solution.</p>\n\n<p>Ex: </p>\n\n<pre><code>moment(\"20111031\", \"YYYYMMDD\").fromNow(); // 3 years ago\nmoment(\"20120620\", \"YYYYMMDD\").fromNow(); // 3 years ago\nmoment().startOf('day').fromNow();        // 11 hours ago\nmoment().endOf('day').fromNow();          // in 13 hours\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The below converts the JsonDate string to the date </p>\n\n<pre><code> function dateParser(jsonDate) {\n    if (jsonDate != null) {\n        var date = new Date(parseInt(jsonDate.substr(6)));\n        var datestring = date.toLocaleFormat('%d-%b-%Y');\n        return datestring.replace(/-/g, \" \");\n    }\n    else { return ''; }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>how can i format a javascript date object to print as \"10-Aug-2010\"</p>\n",
            "last_activity_date": 1421266485,
            "question_id": 3552461,
            "score": 116,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "how to format javascript date"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Let's pretend you have HTML like this</p>\n\n<pre><code>&lt;input type=\"radio\" name=\"gender\" id=\"gender_Male\" value=\"Male\" /&gt;\n&lt;input type=\"radio\" name=\"gender\" id=\"gender_Female\" value=\"Female\" /&gt;\n</code></pre>\n\n<p>For client-side validation, here's some Javascript to check which one is selected:</p>\n\n<pre><code>if(document.getElementById('gender_Male').checked) {\n  //Male radio button is checked\n}else if(document.getElementById('gender_Female').checked) {\n  //Female radio button is checked\n}\n</code></pre>\n\n<p>The above could be made more efficient depending on the exact nature of your markup but that should be enough to get you started.</p>\n\n<hr>\n\n<p>If you're just looking to see if <strong>any</strong> radio button is selected <strong>anywhere</strong> on the page, <a href=\"http://www.prototypejs.org/\">PrototypeJS</a> makes it very easy.</p>\n\n<p>Here's a function that will return true if at least one radio button is selected somewhere on the page.  Again, this might need to be tweaked depending on your specific HTML.</p>\n\n<pre><code>function atLeastOneRadio() {\n    return ($('input[type=radio]:checked').size() &gt; 0);\n}\n</code></pre>\n\n<hr>\n\n<p>For server-side validation <em>(remember, you can't depend entirely on Javascript for validation!)</em>, it would depend on your language of choice, but you'd but checking the <code>gender</code> value of the request string.</p>\n",
                    "is_accepted": false,
                    "score": 166
                },
                {
                    "body": "<p>With <a href=\"http://jquery.com/\">jQuery</a>, it'd be something like</p>\n\n<pre><code>if ($('input[name=gender]:checked').length &gt; 0) {\n    // do something here\n}\n</code></pre>\n\n<p>Let me break that down into pieces to cover it more clearly.\njQuery processes things from left to right.</p>\n\n<pre><code>input[name=gender]:checked\n</code></pre>\n\n<ol>\n<li><a href=\"http://docs.jquery.com/Selectors/element#element\"><code>input</code></a> limits it to input tags.</li>\n<li><a href=\"http://docs.jquery.com/Selectors/attributeEquals#attributevalue\"><code>[name=gender]</code></a> limits it to tags with the name gender within the previous group.</li>\n<li><a href=\"http://docs.jquery.com/Selectors/checked\"><code>:checked</code></a> limits it to checkboxes/radio buttons that are selected within the previous group.</li>\n</ol>\n\n<p>If you want to avoid this altogether, mark one of the radio buttons as checked (<code>checked=\"checked\"</code>) in the HTML code, which would guarantee that one radio button is always selected.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>A vanilla JavaScript way</p>\n\n<pre><code>var radios = document.getElementsByTagName('input');\nvar value;\nfor (var i = 0; i &lt; radios.length; i++) {\n    if (radios[i].type === 'radio' &amp;&amp; radios[i].checked) {\n        // get value, set checked flag or do whatever you need to\n        value = radios[i].value;       \n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>just a lil bit modification to Mark Biek ;</p>\n\n<p>HTML CODE <br/></p>\n\n<pre><code>&lt;form name=\"frm1\" action=\"\" method=\"post\"&gt;\n&lt;input type=\"radio\" name=\"gender\" id=\"gender_Male\" value=\"Male\" /&gt;\n&lt;input type=\"radio\" name=\"gender\" id=\"gender_Female\" value=\"Female\" / &gt;\n&lt;input type=\"button\" value=\"test\"  onclick=\"check1();\"/&gt;\n\n&lt;/form&gt;\n</code></pre>\n\n<p>and Javascript code to check if radio button is selected</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n    function check1() {\n\n        var radio_check_val = \"\";\n        for (i = 0; i &lt; document.getElementsByName('gender').length; i++) {\n            if (document.getElementsByName('gender')[i].checked) {\n                alert(\"this radio button was clicked: \" + document.getElementsByName('gender')[i].value);\n                radio_check_val = document.getElementsByName('gender')[i].value;\n\n            }\n\n        }\n        if (radio_check_val === \"\")\n        {\n            alert(\"please select radio button\");\n        }\n\n\n\n\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>HTML Code</p>\n\n<pre><code>&lt;input type=\"radio\" name=\"offline_payment_method\" value=\"Cheque\" &gt;\n&lt;input type=\"radio\" name=\"offline_payment_method\" value=\"Wire Transfer\" &gt;\n</code></pre>\n\n<p>Javascript Code:<br />\n</p>\n\n<pre><code>var off_payment_method = document.getElementsByName('offline_payment_method');\nvar ischecked_method = false;\nfor ( var i = 0; i &lt; off_payment_method.length; i++) {\n    if(off_payment_method[i].checked) {\n        ischecked_method = true;\n        break;\n    }\n}\nif(!ischecked_method)   { //payment method button is not checked\n    alert(\"Please choose Offline Payment Method\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><a href=\"http://www.somacon.com/p143.php/\" rel=\"nofollow\">http://www.somacon.com/p143.php/</a></p>\n\n<pre><code>function getCheckedValue(radioObj) {\n    if(!radioObj)\n        return \"\";\n    var radioLength = radioObj.length;\n    if(radioLength == undefined)\n        if(radioObj.checked)\n            return radioObj.value;\n        else\n            return \"\";\n    for(var i = 0; i &lt; radioLength; i++) {\n        if(radioObj[i].checked) {\n            return radioObj[i].value;\n        }\n    }\n    return \"\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>this is a utility function I've created to solve this problem</p>\n\n<pre><code>    //define radio buttons, each with a common 'name' and distinct 'id'. \n    //       eg- &lt;input type=\"radio\" name=\"storageGroup\" id=\"localStorage\"&gt;\n    //           &lt;input type=\"radio\" name=\"storageGroup\" id=\"sessionStorage\"&gt;\n    //param-sGroupName: 'name' of the group. eg- \"storageGroup\"\n    //return: 'id' of the checked radioButton. eg- \"localStorage\"\n    //return: can be 'undefined'- be sure to check for that\n    function checkedRadioBtn(sGroupName)\n    {   \n        var group = document.getElementsByName(sGroupName);\n\n        for ( var i = 0; i &lt; group.length; i++) {\n            if (group.item(i).checked) {\n                return group.item(i).id;\n            } else if (group[0].type !== 'radio') {\n                //if you find any in the group not a radio button return null\n                return null;\n            }\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The scripts in this page helped me come up with the script below, which I think is more complete and universal. Basically it will validate any number of radio buttons in a form, meaning that it will make sure that a radio option has been selected for each one of the different radio groups within the form. e.g in the test form below: </p>\n\n<pre><code>   &lt;form id=\"FormID\"&gt;\n\n    Yes &lt;input type=\"radio\" name=\"test1\" value=\"Yes\"&gt;\n    No &lt;input type=\"radio\" name=\"test1\" value=\"No\"&gt;\n\n    &lt;br&gt;&lt;br&gt;\n\n    Yes &lt;input type=\"radio\" name=\"test2\" value=\"Yes\"&gt;\n    No &lt;input type=\"radio\" name=\"test2\" value=\"No\"&gt;\n\n   &lt;input type=\"submit\" onclick=\"return RadioValidator();\"&gt;\n</code></pre>\n\n<p>The RadioValidator script will make sure that an answer has been given for both 'test1' and 'test2' before it submits. You can have as many radio groups in the form, and it will ignore any other form elements. All missing radio answers will show inside a single alert popup. Here it goes, I hope it helps people. Any bug fixings or helpful modifications welcome :)</p>\n\n<pre><code>&lt;SCRIPT LANGUAGE=\"JAVASCRIPT\"&gt;\nfunction RadioValidator()\n{\n    var ShowAlert = '';\n    var AllFormElements = window.document.getElementById(\"FormID\").elements;\n    for (i = 0; i &lt; AllFormElements.length; i++) \n    {\n        if (AllFormElements[i].type == 'radio') \n        {\n            var ThisRadio = AllFormElements[i].name;\n            var ThisChecked = 'No';\n            var AllRadioOptions = document.getElementsByName(ThisRadio);\n            for (x = 0; x &lt; AllRadioOptions.length; x++)\n            {\n                 if (AllRadioOptions[x].checked &amp;&amp; ThisChecked == 'No')\n                 {\n                     ThisChecked = 'Yes';\n                     break;\n                 } \n            }   \n            var AlreadySearched = ShowAlert.indexOf(ThisRadio);\n            if (ThisChecked == 'No' &amp;&amp; AlreadySearched == -1)\n            {\n            ShowAlert = ShowAlert + ThisRadio + ' radio button must be answered\\n';\n            }     \n        }\n    }\n    if (ShowAlert != '')\n    {\n    alert(ShowAlert);\n    return false;\n    }\n    else\n    {\n    return true;\n    }\n}\n&lt;/SCRIPT&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>With JQuery, another way to check the current status of the radio buttons is to get the attribute 'checked'.</p>\n\n<p>For Example:</p>\n\n<pre><code>&lt;input type=\"radio\" name=\"gender_male\" value=\"Male\" /&gt;\n&lt;input type=\"radio\" name=\"gender_female\" value=\"Female\" /&gt;\n</code></pre>\n\n<p>In this case you can check the buttons using:</p>\n\n<pre><code>if ($(\"#gender_male\").attr(\"checked\") == true) {\n...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is the solution which is expanded upon to not go ahead with submission and send an alert if the radio buttons are not checked. Of course this would mean you have to have them unchecked to begin with!</p>\n\n<pre><code>if(document.getElementById('radio1').checked) {\n} else if(document.getElementById('radio2').checked) {\n} else {\n  alert (\"You must select a button\");\n  return false;\n}\n</code></pre>\n\n<p>Just remember to set the id ('radio1','radio2' or whatever you called it) in the form for each of the radio buttons or the script will not work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>An example:</p>\n\n<pre><code>if (!checkRadioArray(document.ExamEntry.level)) { \n    msg+=\"What is your level of entry? \\n\"; \n    document.getElementById('entry').style.color=\"red\"; \n    result = false; \n} \n\nif(msg==\"\"){ \n    return result;  \n} \nelse{ \n    alert(msg) \n    return result;\n} \n\nfunction Radio() { \n    var level = radio.value; \n    alert(\"Your level is: \" + level + \" \\nIf this is not the level your taking then please choose another.\") \n} \n\nfunction checkRadioArray(radioButtons) { \n    for(var r=0;r &lt; radioButtons.length; r++) { \n        if (radioButtons[r].checked) { \n            return true; \n        } \n    } \n    return false; \n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The form</p>\n\n<pre><code>&lt;form name=\"teenageMutant\"&gt;\n  &lt;input type=\"radio\" name=\"ninjaTurtles\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>The script</p>\n\n<pre><code>if(!document.teenageMutant.ninjaTurtles.checked){\n  alert('get down');\n}\n</code></pre>\n\n<p>The fiddle: <a href=\"http://jsfiddle.net/PNpUS/\" rel=\"nofollow\">http://jsfiddle.net/PNpUS/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Give radio buttons, same name but different IDs.</p>\n\n<pre><code>var verified1 = $('#SOME_ELEMENT1').val();\nvar verified2 = $('#SOME_ELEMENT2').val();\n\n\nvar final_answer = null;\n\n\n\n   if( $('#SOME_ELEMENT1').attr('checked') == 'checked' ){\n\n        //condition\n       final_answer = verified1;\n\n   }else if($('#SOME_ELEMENT2').attr('checked') == 'checked'){\n\n       //condition\n       final_answer = verified2;\n\n   }else{\n\n      return false;\n\n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just want to ensure <em>something</em> gets selected (using jQuery):</p>\n\n<pre><code>// html\n&lt;input name=\"gender\" type=\"radio\" value=\"M\" /&gt; Male &lt;input name=\"gender\" type=\"radio\" value=\"F\" /&gt; Female\n\n// gender (required)\nvar gender_check = $('input:radio[name=gender]:checked').val();\nif ( !gender_check ) {\n    alert(\"Please select your gender.\");\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want vanilla JavaScript, don't want to clutter your markup by adding IDs on each radio button, and <strong>only care about modern browsers</strong>, the following functional approach is a little more tasteful to me than a for loop:</p>\n\n<pre><code>&lt;form id=\"myForm\"&gt;\n&lt;label&gt;Who will be left?\n  &lt;label&gt;&lt;input type=\"radio\" name=\"output\" value=\"knight\" /&gt;Kurgan&lt;/label&gt;\n  &lt;label&gt;&lt;input type=\"radio\" name=\"output\" value=\"highlander\" checked /&gt;Connor&lt;/label&gt;\n&lt;/label&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\nfunction getSelectedRadioValue (formElement, radioName) {\n    return ([].slice.call(formElement[radioName]).filter(function (radio) {\n        return radio.checked;\n    }).pop() || {}).value;\n}\n\nvar formEl = document.getElementById('myForm');\nalert(\n   getSelectedRadioValue(formEl, 'output') // 'highlander'\n)\n&lt;/script&gt;\n</code></pre>\n\n<p>If neither is checked, it will return <code>undefined</code> (though you could change the line above to return something else, e.g., to get <code>false</code> returned, you could change the relevant line above to: <code>}).pop() || {value:false}).value;</code>).</p>\n\n<p>There is also the forward-looking polyfill approach since the <a href=\"http://www.w3.org/TR/2012/WD-html5-20121025/common-dom-interfaces.html#radionodelist\" rel=\"nofollow\">RadioNodeList</a> interface should make it easy to just use a <code>value</code> property on the list of form child radio elements (found in the above code as <code>formElement[radioName]</code>), but that has its own problems: <a href=\"http://stackoverflow.com/questions/8941984/how-to-polyfill-radionodelist\">How to polyfill RadioNodeList?</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Note this behavior wit jQuery when getting radio input values:</strong></p>\n\n<pre><code>$('input[name=\"myRadio\"]').change(function(e) { // Select the radio input group\n\n    // This returns the value of the checked radio button\n    // which triggered the event.\n    console.log( $(this).val() ); \n\n    // but this will return the first radio button's value,\n    // regardless of checked state of the radio group.\n    console.log( $('input[name=\"myRadio\"]').val() ); \n\n});\n</code></pre>\n\n<p>So <code>$('input[name=\"myRadio\"]').val()</code> does not return the checked value of the radio input, as you might expect -- it returns the first radio button's value.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This would be valid for radio buttons sharing the same name, no JQuery needed.     </p>\n\n<pre><code>var x = Array.prototype.filter.call(document.getElementsByName('checkThing'), function(x) { return x.checked })[0];\n</code></pre>\n\n<p>If we are talking about checkboxes and we want a list with the checkboxes checked sharing a name:</p>\n\n<pre><code>var x = Array.prototype.filter.call(document.getElementsByName('checkThing'), function(x) { return x.checked });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With mootools (<a href=\"http://mootools.net/docs/core/Element/Element\" rel=\"nofollow\">http://mootools.net/docs/core/Element/Element</a>)</p>\n\n<p>html:</p>\n\n<pre><code>&lt;input type=\"radio\" name=\"radiosname\" value=\"1\" /&gt;\n&lt;input type=\"radio\" name=\"radiosname\" value=\"2\" id=\"radiowithval2\"/&gt;\n&lt;input type=\"radio\" name=\"radiosname\" value=\"3\" /&gt;\n</code></pre>\n\n<p>js:</p>\n\n<pre><code>// Check if second radio is selected (by id)\nif ($('radiowithval2').get(\"checked\"))\n\n// Check if third radio is selected (by name and value)\nif ($$('input[name=radiosname][value=3]:checked').length == 1)\n\n\n// Check if something in radio group is choosen\nif ($$('input[name=radiosname]:checked').length &gt; 0)\n\n\n// Set second button selected (by id)\n$(\"radiowithval2\").set(\"checked\", true)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have two radio buttons within an HTML form. A dialog box appears when one of the fields is null.  How can I check whether a radio button is selected?</p>\n",
            "last_activity_date": 1412339221,
            "question_id": 1423777,
            "score": 118,
            "tags": [
                "javascript",
                "radio"
            ],
            "title": "JavaScript, How can I check whether a radio button is selected?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can use JavaScript, no jQuery required:</p>\n\n<pre><code>var someDate = new Date();\nvar numberOfDaysToAdd = 6;\nsomeDate.setDate(someDate.getDate() + numberOfDaysToAdd); \n</code></pre>\n\n<p>Formatting to <code>dd/mm/yyyy</code> :</p>\n\n<pre><code>var dd = someDate.getDate();\nvar mm = someDate.getMonth() + 1;\nvar y = someDate.getFullYear();\n\nvar someFormattedDate = dd + '/'+ mm + '/'+ y;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 167
                },
                {
                    "body": "<p>You could extend the javascript Date object like this</p>\n\n<pre><code>Date.prototype.addDays = function(days) {\n    this.setDate(this.getDate() + days);\n    return this;\n};\n</code></pre>\n\n<p>and in your javascript code you could call</p>\n\n<pre><code>var currentDate = new Date();\n// to add 4 days to current date\ncurrentDate.addDays(4);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>You can use this library \"<a href=\"http://www.datejs.com/\" rel=\"nofollow\">Datejs</a>  open-source JavaScript Date Library\".</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I've found this to be a pain in javascript.  Check out this link that helped me.  Have you ever thought of extending the date object.  </p>\n\n<p><a href=\"http://www.stevenleath.com/blogengine.web/post/2011/03/09/How-do-I-add-subtract-days-in-javascript.aspx\" rel=\"nofollow\">http://pristinecoder.com/Blog/post/javascript-formatting-date-in-javascript</a></p>\n\n<pre><code>/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan &lt;stevenlevithan.com&gt;\n * MIT license\n *\n * Includes enhancements by Scott Trenda &lt;scott.trenda.net&gt;\n * and Kris Kowal &lt;cixar.com/~kris.kowal/&gt;\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\nvar dateFormat = function () {\n    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/g,\n        timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g,\n        timezoneClip = /[^-+\\dA-Z]/g,\n        pad = function (val, len) {\n            val = String(val);\n            len = len || 2;\n            while (val.length &lt; len) val = \"0\" + val;\n            return val;\n        };\n\n    // Regexes and supporting functions are cached through closure\n    return function (date, mask, utc) {\n        var dF = dateFormat;\n\n        // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n        if (arguments.length == 1 &amp;&amp; Object.prototype.toString.call(date) == \"[object String]\" &amp;&amp; !/\\d/.test(date)) {\n            mask = date;\n            date = undefined;\n        }\n\n        // Passing date through Date applies Date.parse, if necessary\n        date = date ? new Date(date) : new Date;\n        if (isNaN(date)) throw SyntaxError(\"invalid date\");\n\n        mask = String(dF.masks[mask] || mask || dF.masks[\"default\"]);\n\n        // Allow setting the utc argument via the mask\n        if (mask.slice(0, 4) == \"UTC:\") {\n            mask = mask.slice(4);\n            utc = true;\n        }\n\n        var _ = utc ? \"getUTC\" : \"get\",\n            d = date[_ + \"Date\"](),\n            D = date[_ + \"Day\"](),\n            m = date[_ + \"Month\"](),\n            y = date[_ + \"FullYear\"](),\n            H = date[_ + \"Hours\"](),\n            M = date[_ + \"Minutes\"](),\n            s = date[_ + \"Seconds\"](),\n            L = date[_ + \"Milliseconds\"](),\n            o = utc ? 0 : date.getTimezoneOffset(),\n            flags = {\n                d:    d,\n                dd:   pad(d),\n                ddd:  dF.i18n.dayNames[D],\n                dddd: dF.i18n.dayNames[D + 7],\n                m:    m + 1,\n                mm:   pad(m + 1),\n                mmm:  dF.i18n.monthNames[m],\n                mmmm: dF.i18n.monthNames[m + 12],\n                yy:   String(y).slice(2),\n                yyyy: y,\n                h:    H % 12 || 12,\n                hh:   pad(H % 12 || 12),\n                H:    H,\n                HH:   pad(H),\n                M:    M,\n                MM:   pad(M),\n                s:    s,\n                ss:   pad(s),\n                l:    pad(L, 3),\n                L:    pad(L &gt; 99 ? Math.round(L / 10) : L),\n                t:    H &lt; 12 ? \"a\"  : \"p\",\n                tt:   H &lt; 12 ? \"am\" : \"pm\",\n                T:    H &lt; 12 ? \"A\"  : \"P\",\n                TT:   H &lt; 12 ? \"AM\" : \"PM\",\n                Z:    utc ? \"UTC\" : (String(date).match(timezone) || [\"\"]).pop().replace(timezoneClip, \"\"),\n                o:    (o &gt; 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                S:    [\"th\", \"st\", \"nd\", \"rd\"][d % 10 &gt; 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]\n            };\n\n        return mask.replace(token, function ($0) {\n            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n        });\n    };\n}();\n\n// Some common format strings\ndateFormat.masks = {\n    \"default\":      \"ddd mmm dd yyyy HH:MM:ss\",\n    shortDate:      \"m/d/yy\",\n    mediumDate:     \"mmm d, yyyy\",\n    longDate:       \"mmmm d, yyyy\",\n    fullDate:       \"dddd, mmmm d, yyyy\",\n    shortTime:      \"h:MM TT\",\n    mediumTime:     \"h:MM:ss TT\",\n    longTime:       \"h:MM:ss TT Z\",\n    isoDate:        \"yyyy-mm-dd\",\n    isoTime:        \"HH:MM:ss\",\n    isoDateTime:    \"yyyy-mm-dd'T'HH:MM:ss\",\n    isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\"\n};\n\n// Internationalization strings\ndateFormat.i18n = {\n    dayNames: [\n        \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\",\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n    ],\n    monthNames: [\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ]\n};\n\n// For convenience...\nDate.prototype.format = function (mask, utc) {\n    return dateFormat(this, mask, utc);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The accepted answer here gave me unpredictable results, sometimes weirdly adding months and years.</p>\n\n<p>The most reliable way I could find was found here\n<a href=\"http://stackoverflow.com/questions/8081500/add-days-to-javascript-date-object-and-also-increment-month\">Add days to Javascript Date object, and also increment month</a></p>\n\n<pre><code>var dayOffset = 20;\nvar millisecondOffset = dayOffset * 24 * 60 * 60 * 1000;\ndecember.setTime(december.getTime() + millisecondOffset); \n</code></pre>\n\n<p><em>EDIT: Even though it has worked for some people, I don't think it is entirely correct. I would recommend going with a more popular answer or using something like <a href=\"http://momentjs.com/\">http://momentjs.com/</a></em></p>\n\n<hr>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I found that JavaScript can return a correct date when you use <code>new Date(nYear, nMonth, nDate);</code> with the over days of that month.\nTry to see the result of a <code>dDate</code> variable when you use this:</p>\n\n<p><code>var dDate = new Date(2012, 0, 34);   // the result is 3 Feb 2012</code></p>\n\n<hr>\n\n<p>I have a SkipDate function to share:</p>\n\n<pre><code>    function DaysOfMonth(nYear, nMonth) {\n        switch (nMonth) {\n            case 0:     // January\n                return 31; break;\n            case 1:     // February\n                if ((nYear % 4) == 0) {\n                    return 29;\n                }\n                else {\n                    return 28;\n                };\n                break;\n            case 2:     // March\n                return 31; break;\n            case 3:     // April\n                return 30; break;\n            case 4:     // May\n                return 31; break;\n            case 5:     // June\n                return 30; break;\n            case 6:     // July\n                return 31; break;\n            case 7:     // August\n                return 31; break;\n            case 8:     // September\n                return 30; break;\n            case 9:     // October\n                return 31; break;\n            case 10:     // November\n                return 30; break;\n            case 11:     // December\n                return 31; break;\n        }\n    };\n\n    function SkipDate(dDate, skipDays) {\n        var nYear = dDate.getFullYear();\n        var nMonth = dDate.getMonth();\n        var nDate = dDate.getDate();\n        var remainDays = skipDays;\n        var dRunDate = dDate;\n\n        while (remainDays &gt; 0) {\n            remainDays_month = DaysOfMonth(nYear, nMonth) - nDate;\n            if (remainDays &gt; remainDays_month) {\n                remainDays = remainDays - remainDays_month - 1;\n                nDate = 1;\n                if (nMonth &lt; 11) { nMonth = nMonth + 1; }\n                else {\n                    nMonth = 0;\n                    nYear = nYear + 1;\n                };\n            }\n            else {\n                nDate = nDate + remainDays;\n                remainDays = 0;\n            };\n            dRunDate = Date(nYear, nMonth, nDate);\n        }\n        return new Date(nYear, nMonth, nDate);\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The prototype-solution from Krishna Chytanya is very nice, but needs a minor but important improvement.\nThe days param must be parsed as Integer to avoid weird calculations when days is a String like \"1\". (I needed several hours to find out, what went wrong in my application.)</p>\n\n<pre><code>Date.prototype.addDays = function(days) {\n    this.setDate(this.getDate() + parseInt(days));\n    return this;\n};\n</code></pre>\n\n<p>Even if you do not use this prototype function:\n<strong>Always be sure to have an Integer when using setDate().</strong></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Why not simply use</p>\n\n<pre><code>function addDays(theDate, days) {\n    return new Date(theDate.getTime() + days*24*60*60*1000);\n}\n\nvar newDate = addDays(new Date(), 5);\n</code></pre>\n\n<p>or -5 to remove 5 days</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This is for 5 days:</p>\n\n<pre><code>    var myDate = new Date(new Date().getTime()+(5*24*60*60*1000));\n</code></pre>\n\n<p>You not need JQuery, you can do it in Javascript, Hope you get it.</p>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>I need to be able to add 1, 2 , 5 or 10 days to today's date using jQuery.</p>\n",
            "last_activity_date": 1420796101,
            "question_id": 3818193,
            "score": 85,
            "tags": [
                "javascript",
                "jquery",
                "date"
            ],
            "title": "How to add number of days to today&#39;s date?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>First, running the <code>Animal</code> constructor may have undesired side effects. Consider this:</p>\n\n<pre><code>var Animal = function(name) {\n    this.name = name;\n    Animal.instances.push(this);\n};\nAnimal.instances = [];\n</code></pre>\n\n<p>This version would keep track of all instances that have been created. You don't want your <code>Dog.prototype</code> to be recorded there.</p>\n\n<p>Second, <code>Dog.prototype = Animal.prototype</code> is a bad idea, since that would mean that <code>bark</code> would become a method of <code>Animal</code>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In the following I assume you are only interested in why <code>Object.create</code> is preferable for setting up inheritance.</p>\n\n<p>To understand the benefits, lets first clarify what a \"class\" is made of in JavaScript. You have two parts:</p>\n\n<ol>\n<li><p>The <strong>constructor</strong> function. This function contains all the logic to create an instance of the \"class\", i.e. instance specific code.</p></li>\n<li><p>The <strong>prototype</strong> object. This is the object the instance inherits from. It contains all methods (and other properties) that should be shared among all instances.</p></li>\n</ol>\n\n<p><strong>Inheritance</strong> establishes an <em>is-a</em> relation, for example, a <code>Dog</code> <em>is</em> an <code>Animal</code>. How is this expressed in terms of constructor function and prototype object?  </p>\n\n<p>Obviously a dog must have the same methods as an animal, that is the <code>Dog</code> <em>prototype</em> object must somehow incorporate the methods from the <code>Animal</code> <em>prototype</em> object. There are multiple ways to do this. You will often see this:</p>\n\n<pre><code>Dog.prototype = new Animal();\n</code></pre>\n\n<p>This works because an <code>Animal</code> <em>instance</em> inherits from the <code>Animal</code> <em>prototype</em> object. <strong>But</strong> it also implies that every dog inherits from <em>one</em> specific <code>Animal</code> <em>instance</em>. That seems to be a bit strange. Shouldn't instance specific code only be run in the <em>constructor</em> function? Suddenly <em>instance</em> specific code and <em>prototype</em> methods seem to be mixed.</p>\n\n<p>We don't actually want to run <code>Animal</code> <em>instance</em> specific code at that moment, we only want all the methods from the <code>Animal</code> <em>prototype</em> object. That is what <code>Object.create</code> lets us  do:</p>\n\n<pre><code>Dog.prototype = Object.create(Animal.prototype);\n</code></pre>\n\n<p>Here we are <em>not</em> creating a new <code>Animal</code> instance, we only get the prototype methods. The <em>instance</em> specific code is executed exactly where it should be, inside the constructor:</p>\n\n<pre><code>function Dog() { \n   Animal.call(this, 'Dog'); \n}\n</code></pre>\n\n<p>The biggest advantage is that <code>Object.create</code> will <em>always</em> work. Using <code>new Animal()</code> only works if the constructor does not expect any arguments. Imagine if the constructor looked like this:</p>\n\n<pre><code>function Animal(name) { \n    this.name = name.toLowerCase();\n}\n</code></pre>\n\n<p>You always have to pass a string to <code>Animal</code>, otherwise you will get an error. What will you pass when you do <code>Dog.prototype = new Animal(??);</code>? It doesn't actually matter which string you pass, as long as pass <em>something</em>, which hopefully shows you that this is bad design.</p>\n\n<hr>\n\n<blockquote>\n  <p>Some say that <code>Dog.prototype = Animal.prototype;</code> can also work. So now I'm totally confused</p>\n</blockquote>\n\n<p>Everything that \"adds\" the properties from <code>Animal.prototype</code> to <code>Dog.prototype</code> will \"work\". But the solutions are of different quality. In this case here you will have the problem that any method you add to <code>Dog.prototype</code> will also be added to <code>Animal.prototype</code>.</p>\n\n<p>Example:</p>\n\n<pre><code>Dog.prototype.bark = function() {\n    alert('bark');\n};\n</code></pre>\n\n<p>Since <code>Dog.prototype === Animal.prototype</code>, all <code>Animal</code> instances have a method <code>bark</code> now, which is certainly not what you want. </p>\n\n<p><code>Object.create</code> (and even <code>new Animal</code>) add one level of indirection to the inheritance by creating a new object which inherits from <code>Animal.prototype</code> and that new object becomes <code>Dog.prototype</code>.</p>\n\n<hr>\n\n<p><strong>Inheritance in ES6</strong></p>\n\n<p>ES6 introduces a new syntax to create constructor functions and prototype methods, which looks like this:</p>\n\n<pre><code>class Dog extends Animal {\n\n  bark() {\n    alert('bark');\n  }\n\n}\n</code></pre>\n\n<p>This is more convenient than what I explained above, but as it turns out, <code>extends</code> also uses an internal equivalent to <code>Object.create</code> to setup inheritance. See steps 2 and 3 in the <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-classdefinitionevaluation\">ES6 draft</a>.<br>\nWhich means that using <code>Object.create(SuperClass.prototype)</code> is the \"more correct\" approach in ES5.</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>I'm trying to illustrate the difference a little bit:</p>\n\n<p>Here is what basically happens when you write <code>new Animal()</code>:</p>\n\n<pre><code>    //creating a new object\n    var res = {};\n\n    //setting the internal [[prototype]] property to the prototype of Animal\n    if (typeof Animal.prototype === \"object\" &amp;&amp; Animal.prototype !== null) {\n        res.__proto__ = Animal.prototype;\n    }\n\n    //calling Animal with the new created object as this\n    var ret = Animal.apply(res, arguments);\n\n    //returning the result of the Animal call if it is an object\n    if (typeof ret === \"object\" &amp;&amp; ret !== null) {\n        return ret;\n    }\n\n    //otherise return the new created object\n    return res;\n</code></pre>\n\n<p>And here is what basically happens with <code>Object.create</code>:</p>\n\n<pre><code>    //creating a new object\n    var res = {};\n\n    //setting the internal [[prototype]] property to the prototype of Animal\n    if (typeof Animal.prototype !== \"object\") {\n        throw \"....\";\n    }\n    res.__proto__ = Animal.prototype;\n\n    //return the new created object\n    return res;\n</code></pre>\n\n<p>So it does the same but it doesn't call the <code>Animal</code> function and it also always returns the new created object.\nIn your case you end up with two different objects. With the first method you get:</p>\n\n<pre><code>Dog.prototype = {\n    name: undefined,\n    __proto__: Animal.prototype\n};\n</code></pre>\n\n<p>and with the second method you get:</p>\n\n<pre><code>Dog.prototype = {\n    __proto__: Animal.prototype\n};\n</code></pre>\n\n<p>You don't really need to have the <code>name</code> property in your prototype, because you already assigning it to your <code>Dog</code> instance with <code>Animal.call(this, 'Dog');</code>.</p>\n\n<p>Your primary goal is to let your <code>Dog</code> instance access all the properties of the <code>Animal</code> prototype, which is achieved by both methods. The first method however does some extra stuff that is not really needed in your case or can even cause unwanted results as Pumbaa80 mentioned.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Let's understand it with code only;</p>\n\n<p><strong>A.prototype = B.prototype;</strong></p>\n\n<pre><code>function B() {console.log(\"I am B\");this.b1= 30;}\n    B.prototype.b2 = 40;\n\n    function A() {console.log(\"I am A\");this.a1= 10;}\n    A.prototype.a2 = 20;\n\n    A.prototype = B.prototype;\n\n    A.prototype.constructor = A; \n\n    var a = new A;\n    var b = new B;\n\n    console.log(a);//A {a1: 10, b2: 40}\n    console.log(b);//B {b1: 30, b2: 40}\n\n    console.log(A.prototype.constructor);//A\n    console.log(B.prototype.constructor);//A\n    console.log(A.prototype);//A {b2: 40}\n    console.log(B.prototype);//A {b2: 40}\n    console.log(a.constructor === A); //true\n    console.log(b.constructor === A); //true\n\nconsole.log(a.a2);//undefined\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/CrjAX.jpg\" alt=\"enter image description here\"></p>\n\n<p><strong>A.prototype = Object.create(B.prototype);</strong></p>\n\n<pre><code>function B() {console.log(\"I am B\");this.b1= 30;}\nB.prototype.b2 = 40;\n\nfunction A() {console.log(\"I am A\");this.a1= 10;}\nA.prototype.a2 = 20;\n\nA.prototype = Object.create(B.prototype);\n\nA.prototype.constructor = A; \n\nvar a = new A;\nvar b = new B;\n\nconsole.log(a);//A\u00a0{a1:\u00a010,\u00a0constructor:\u00a0function,\u00a0b2:\u00a040}\nconsole.log(b);//B {b1: 30, b2: 40} \n\nconsole.log(A.prototype.constructor);//A\nconsole.log(B.prototype.constructor);//B\nconsole.log(A.prototype);//A\u00a0{constructor:\u00a0function,\u00a0b2:\u00a040}\nconsole.log(B.prototype);//B {b2: 40}\nconsole.log(a.constructor === A); //true\nconsole.log(b.constructor === B); //true\nconsole.log(a.a2);//undefined\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/eKqV4.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've been trying to wrap my head around the new <code>Object.create</code> method which was introduced in ECMAScript 5.</p>\n\n<p>Usually when I want to use inheritance I do something like this:</p>\n\n<pre><code>var Animal = function(name) { this.name = name; }\nAnimal.prototype.print = function() { console.log(this.name); }\n\nvar Dog = function() \n{ \n  return Animal.call(this, 'Dog'); \n}\n\nDog.prototype = new Animal();\nDog.prototype.bark = function() { console.log('bark'); }\n</code></pre>\n\n<p>I just assign a newly created Animal object to Dog's prototype and everything works like a charm:</p>\n\n<pre><code>var dog1 = new Dog();\ndog1.print(); // prints 'Dog'\ndog1.bark(); // prints 'bark'\ndog1.name; //prints 'Dog'\n</code></pre>\n\n<p>but people(without explaining) are saying that <code>Dog.prototype = new Animal();</code> is not the way inheritance works and that I should use Object.create approach:</p>\n\n<pre><code>Dog.prototype = Object.create(Animal.prototype);\n</code></pre>\n\n<p>which also works. </p>\n\n<p>What's the benefit of using <code>Object.create</code> or am I missing something?</p>\n\n<p><strong>UPDATE: Some say that <code>Dog.prototype = Animal.prototype;</code> can also work. So now I'm totally confused</strong></p>\n",
            "last_activity_date": 1421888689,
            "question_id": 17392857,
            "score": 22,
            "tags": [
                "javascript"
            ],
            "title": "Benefits of using `Object.create` for inheritance"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>I may be wrong, but I don't believe that is possible with the default select box. You could do something with JS &amp; CSS that achieves the desired result, but not (to my knowledge) the vanilla SELECT.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can't do this with a HTML select tag, but you can do it with JavaScript <em>and</em> HTML. There are variety of existing controls that do this - for instance, the \"suggest\" list attached to the SO \"interesting/ignored tag\" entry, or Gmail's lookup for email adresses.</p>\n\n<p>There are many JavaScript+HTML controls that provide this capability--look for autocomplete controls for ideas.</p>\n\n<p>See this link for the Autocomplete control...<a href=\"http://ajaxcontroltoolkit.codeplex.com/\" rel=\"nofollow\">http://ajaxcontroltoolkit.codeplex.com/</a></p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>This is the closest I could get, change the size of the element onmouseover, and restore the size onmouseout:</p>\n\n<pre><code>   &lt;select onMouseOut=\"this.size=1;\" onMouseOver=\"this.size=5;\"&gt;\n    &lt;option&gt;1&lt;/option&gt;\n    &lt;option&gt;2&lt;/option&gt;\n    &lt;option&gt;3&lt;/option&gt;\n    &lt;option&gt;4&lt;/option&gt;\n    &lt;option&gt;5&lt;/option&gt;\n  &lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Here's the best way I found. NOTE It only works with IE on Windows and your web would probably need to be in a secure zone - because we access the shell. The trick is that ALT-Down Arrow is a shortcut key to open a select drop down.</p>\n\n<pre><code>&lt;button id=\"optionsButton\" style=\"position:absolute;top:10px;left:10px;height:22px;width:100px;z-index:10\" onclick=\"doClick()\"&gt;OPTIONS&lt;/button&gt;\n&lt;select id=\"optionsSelect\" style=\"position:absolute;top:10px;left:10px;height:20px;width:100px;z-index:9\"&gt;\n    &lt;option&gt;ABC&lt;/option&gt;\n    &lt;option&gt;DEF&lt;/option&gt;\n    &lt;option&gt;GHI&lt;/option&gt;\n    &lt;option&gt;JKL&lt;/option&gt;\n&lt;/select&gt;\n&lt;script type=\"text/javascript\"&gt;\n   function doClick() {\n       optionsSelect.focus();\n       var WshShell = new ActiveXObject(\"WScript.Shell\");\n       WshShell.SendKeys(\"%{DOWN}\");\n   }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is not exactly what you asked for, but I like this solution for its simplicity. In most cases where I am wanting to initiate a dropdown, it is because I'm validating that the user has actually made a selection. I change the size of the dropdown and focus it, which nicely highlights what they've skipped:</p>\n\n<pre><code>$('#cboSomething')[0].size = 3;\n$('#cboSomething')[0].focus();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p><em>This is actually possible with HTML+Javascript, despite everywhere else people say it is not.</em></p>\n\n<p><strong>However, this only works on Chrome.  Read more if you're intersted.</strong></p>\n\n<hr>\n\n<p>According to <a href=\"http://www.w3.org/TR/html5/content-models.html#interactive-content\">W3C Working Draft for HTML5, Section 3.2.5.1.7. Interactive Content</a>:</p>\n\n<blockquote>\n  <p>Certain elements in HTML have an activation behavior, which means that the user can activate them. This triggers a sequence of events dependent on the activation mechanism [...] <strong>for instance using keyboard or voice input, or through mouse clicks</strong>.</p>\n  \n  <p>When the user triggers an element with a defined activation behavior in a manner other than clicking it, <strong>the default action of the interaction event must be to run</strong> synthetic click activation steps on the element.</p>\n</blockquote>\n\n<p><code>&lt;select&gt;</code> being an Interactive Content, I believed that it is possible to programatically display its <code>&lt;option&gt;</code>s.  After a few hours of playing around, I discovered that using <code>document.createEvent()</code> and <code>.dispatchEvent()</code> works.</p>\n\n<p>That said, demo time.  <a href=\"http://jsfiddle.net/fz2sY/39/\"><strong>Here is a working Fiddle.</strong></a></p>\n\n<hr>\n\n<p>HTML:</p>\n\n<pre><code>&lt;select id=\"dropdown\"&gt;\n    &lt;option value=\"Red\"&gt;Red&lt;/option&gt;\n    &lt;option value=\"Green\"&gt;Green&lt;/option&gt;\n    &lt;option value=\"Blue\"&gt;Blue&lt;/option&gt;\n&lt;/select&gt;\n&lt;br&gt;\n&lt;button id=\"fire\" type=\"button\" onclick=\"runThis()\"&gt;Show dropdown items&lt;/button&gt;\u200b\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>// &lt;select&gt; element displays its options on mousedown, not click.\nshowDropdown = function (element) {\n    var event;\n    event = document.createEvent('MouseEvents');\n    event.initMouseEvent('mousedown', true, true, window);\n    element.dispatchEvent(event);\n};\n\n// This isn't magic.\nwindow.runThis = function () { \n    var dropdown = document.getElementById('dropdown');\n    showDropdown(dropdown);\n};\n</code></pre>\n\n<p>If anyone finds a way to do the same but not in Chrome, <a href=\"http://jsfiddle.net/fz2sY/39/\">please feel free to modify this fiddle</a>.\n    \u200b</p>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>Stop thinking that one thing is impossible, nothing is impossible to do, when you want to do.</p>\n\n<p>Use this expand JS function created by a guy.</p>\n\n<p><a href=\"http://code.google.com/p/expandselect/\" rel=\"nofollow\">http://code.google.com/p/expandselect/</a></p>\n\n<p>Include this JS and just call that passing the param as your select id, like that:</p>\n\n<pre><code>ExpandSelect(MySelect)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If any one is still looking for this :</p>\n\n<pre><code>&lt;select id=\"dropdown\"&gt;\n    &lt;option value=\"Red\"&gt;Red&lt;/option&gt;\n    &lt;option value=\"Green\"&gt;Green&lt;/option&gt;\n    &lt;option value=\"Blue\"&gt;Blue&lt;/option&gt;\n&lt;/select&gt;\n&lt;br&gt;\n&lt;button id=\"fire\" type=\"button\" &gt;Show dropdown items&lt;/button&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>var is_visible=false; \n\n$(document).ready(function(){\n\n    $('#fire').click(function (e) { \n    var element = document.getElementById('dropdown');\n\n\n    if(is_visible){is_visible=false; return;}\n    is_visible = true;\n\n    var event;\n    event = document.createEvent('MouseEvents');\n    event.initMouseEvent('mousedown', true, true, window);\n    element.dispatchEvent(event);\n\n    /* can be added for i.e. compatiblity.\n      optionsSelect.focus();\n       var WshShell = new ActiveXObject(\"WScript.Shell\");\n       WshShell.SendKeys(\"%{DOWN}\");\n    */\n    e.stopPropagation();\n    return false;\n});\n\n\n$(document).click(function(){is_visible=false; });\n});\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>One till there is no perfect solution to this problem, But you can try to avoid this scenario. Why do you want to do this. i was wondering for a solution few months back to make a select plugin for mobile devices</p>\n\n<p><a href=\"https://github.com/HemantNegi/jquery.sumoselect\" rel=\"nofollow\">https://github.com/HemantNegi/jquery.sumoselect</a></p>\n\n<p>Finally ended up with masking the custom div (or any other element) with a transparent select element, so that it can directly interacts with user.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can you programmatically tell an HTML <code>select</code> to drop down (for example, due to mouseover)?</p>\n",
            "last_activity_date": 1413868074,
            "question_id": 249192,
            "score": 32,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "How can you programmatically tell an HTML SELECT to drop down (for example, due to mouseover)?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You cannot do so - the browser will not allow this because of security concerns.</p>\n\n<blockquote>\n  <p>When a file is selected by using the input type=file object, the value\n  of the value property depends on the value of the \"Include local\n  directory path when uploading files to a server\" security setting for\n  the security zone used to display the Web page containing the input\n  object.</p>\n  \n  <p>The fully qualified filename of the selected file is returned only\n  when this setting is enabled. When the setting is disabled, Internet\n  Explorer 8 replaces the local drive and directory path with the string\n  C:\\fakepath\\ in order to prevent inappropriate information disclosure.</p>\n</blockquote>\n\n<p><strong>And other</strong></p>\n\n<p>You missed <code>);</code> this at the end of the change event function.</p>\n\n<p>Also do not create function for change event instead just use it as below,</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n    $(function()\n    {\n        $('#fileUpload').on('change',function ()\n        {\n            var filePath = $(this).val();\n            console.log(filePath);\n        });\n    });\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>you should never do so....and i think trying it in latest browsers is useless(from what i know) .. all latest browsers on the other hand , will not allow this.... </p>\n\n<p>some other links that you can go through , to find a workaround like getting the value serverside, but not in clientside(javascript)</p>\n\n<p><a href=\"http://stackoverflow.com/questions/3489133/full-path-from-file-input-using-jquery\">Full path from file input using jQuery</a> <br />\n<a href=\"http://stackoverflow.com/questions/81180/how-to-get-the-file-path-from-html-input-form-in-firefox-3\">How to get the file path from HTML input form in Firefox 3</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For security reasons browsers do no allow this, ie JavaScript in browser has no access to the File System, however using HTML5 File API, only Firefox provides a <code>mozFullPath</code> property, but <em>fortunately</em> if you try to get the value it returns an empty string:</p>\n\n<pre><code>$('input[type=file]').change(function () {\n    console.log(this.files[0].mozFullPath);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SCK5A/\">http://jsfiddle.net/SCK5A/</a></p>\n\n<p>So don't waste your time.</p>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>You can't.\nSecurity stops you for knowing anything about the filing system of the client computer - it may not even have one! It could be a MAC, a PC, a Tablet or an internet enabled fridge - you don't know, can't know and won't know. And letting you have the full path could give you some information about the client - particularly if it is a network drive for example.</p>\n\n<p>In fact you can get it under particular conditions, but it requires an ActiveX control, and will not work in 99.99% of circumstances.</p>\n\n<p>You can't use it to restore the file to the original location anyway (as you have absolutely no control over where downloads are stored, or even if they are stored) so in practice it is not a lot of use to you anyway.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try This:</p>\n\n<p>It'll give you a temporary path not the accurate path, you can use this script if you want to show selected images as in this jsfiddle example(Try it by selectng images as well as other files):-</p>\n\n<p><strong><a href=\"http://jsfiddle.net/dwebexperts/4FGg8/1/\">JSFIDDLE</a></strong></p>\n\n<p>Here is the code :-</p>\n\n<p>HTML:-</p>\n\n<pre><code>&lt;input type=\"file\" id=\"i_file\" value=\"\"&gt; \n&lt;input type=\"button\" id=\"i_submit\" value=\"Submit\"&gt;\n    &lt;br&gt;\n&lt;img src=\"\" width=\"200\" style=\"display:none;\" /&gt;\n        &lt;br&gt;\n&lt;div id=\"disp_tmp_path\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>JS:-</p>\n\n<pre><code>$('#i_file').change( function(event) {\nvar tmppath = URL.createObjectURL(event.target.files[0]);\n    $(\"img\").fadeIn(\"fast\").attr('src',URL.createObjectURL(event.target.files[0]));\n\n    $(\"#disp_tmp_path\").html(\"Temporary Path(Copy it and try pasting it in browser address bar) --&gt; &lt;strong&gt;[\"+tmppath+\"]&lt;/strong&gt;\");\n});\n</code></pre>\n\n<p>Its not exactly what you were looking for, but may be it can help you somewhere.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Did you mean this?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('#i_file').change( function(event) {\r\nvar tmppath = URL.createObjectURL(event.target.files[0]);\r\n    $(\"img\").fadeIn(\"fast\").attr('src',tmppath);       \r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How to get full path of file while selecting file using <code>&lt;input type=\u2018file\u2019&gt;</code></p>\n\n<pre><code>&lt;input type=\"file\" id=\"fileUpload\"&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction getFilePath(){\n     $('input[type=file]').change(function () {\n         var filePath=$('#fileUpload').val(); \n     });\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>but the filePath var contains <code>only name</code> of selected file, not the <code>full path</code>. <br/>\nI searched it on net, but it seems that for security reasons browsers (FF,chrome) just give name of file.<br/>\nIs there any other way to get full path of selected file?</p>\n",
            "last_activity_date": 1416772905,
            "question_id": 15201071,
            "score": 36,
            "tags": [
                "javascript",
                "jquery",
                "file-upload",
                "filepath"
            ],
            "title": "How to get full path of selected file on change of &lt;input type=\u2018file\u2019&gt; using javascript, jquery-ajax?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>You need to use <code>typeof</code> .</p>\n\n<pre><code>if (typeof something != \"undefined\") {\n    // ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Yes: you're comparing against a string rather than the <code>undefined</code> property of the global object. Instead, do</p>\n\n<pre><code>if (something !== undefined) {\n   ...\n}\n</code></pre>\n\n<p>... or even better:</p>\n\n<pre><code>if (typeof something != \"undefined\") {\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If it is undefined, it will not be equal to a string that contains the characters \"undefined\", as the string is not undefined.</p>\n\n<p>You can check the type of the variable:</p>\n\n<pre><code>if (typeof(something) != \"undefined\") ...\n</code></pre>\n\n<p>Sometimes you don't even have to check the type. If the value of the variable can't evaluate to false when it's set (for example if it's a function), then you can just evalue the variable. Example:</p>\n\n<pre><code>if (something) {\n  something(param);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>if (typeof foo == 'undefined') {\n // Do something\n};\n</code></pre>\n\n<p>Note that strict comparison (<code>!==</code>) is not necessary in this case, since <code>typeof</code> will always return a string.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If you are interested in finding out whether a variable has been declared regardless of its value, then using the <code>in</code> operator is the safest way to go. Consider this example.</p>\n\n<pre><code>// global scope\nvar theFu; // theFu has been declared, but its value is undefined\ntypeof theFu; // \"undefined\"\n</code></pre>\n\n<p>But this may not be the intended result for some cases, since the variable or property was declared but just not initialized. Use the <code>in</code> operator for a more robust check.</p>\n\n<pre><code>\"theFu\" in window; // true\n\"theFoo\" in window; // false\n</code></pre>\n\n<p>If you are interested in knowing whether the variable hasn't been declared or has the value <code>undefined</code>, then use the <code>typeof</code> operator.</p>\n\n<pre><code>if (typeof myVar != 'undefined')\n</code></pre>\n\n<p>The <code>typeof</code> operator is guaranteed to return a string. Direct comparisons against <code>undefined</code> are troublesome as <code>undefined</code> can be overwritten. </p>\n\n<pre><code>window.undefined = \"omg\";\n\"omg\" == undefined // true\n</code></pre>\n\n<p>As @CMS pointed out, this has been patched in ECMAScript 5th ed., and <code>undefined</code> is non-writable.</p>\n\n<p><code>if (window.myVar)</code> will also include these falsy values, so it's not very robust:</p>\n\n<pre>\nfalse\n0\n\"\"\nNaN\nnull\nundefined\n</pre>\n\n<p>Thanks to @CMS for pointing out that your third case - <code>if (myVariable)</code> can also throw an error in two cases. The first is when the variable hasn't been defined which throws a <code>ReferenceError</code>. </p>\n\n<pre><code>// abc was never declared.\nif (abc) {\n    // ReferenceError: abc is not defined\n} \n</code></pre>\n\n<p>The other case is when the variable has been defined, but has a getter function which throws an error when invoked. For example,</p>\n\n<pre><code>// or it's a property that can throw an error\nObject.defineProperty(window, \"myVariable\", { \n    get: function() { throw new Error(\"W00t?\"); }, \n    set: undefined \n});\nif (myVariable) {\n    // Error: W00t?\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 912
                },
                {
                    "body": "<p>I use it as a function parameter and exclude it on function execution that way I get the \"real\" undefined. Although it does require you to put your code inside a function. I found this while reading the jQuery source.</p>\n\n<pre><code>undefined = 2;\n\n(function (undefined) {\n   console.log(undefined); // prints out undefined\n   // and for comparison:\n   if (undeclaredvar === undefined) console.log(\"it works!\")\n})()\n</code></pre>\n\n<p>Of course you could just use <code>typeof</code> though. But all my code is usually inside a containing function anyways, so using this method probably saves me a few bytes here and there.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using <code>typeof</code> is my preference. It will work when the variable has never been declared, unlike any comparison with the <code>==</code> or <code>===</code> operators or type coercion using <code>if</code>. (<code>undefined</code>, unlike <code>null</code>, may also be redefined in non-ECMAScript 5 or later environments, making it unreliable for comparison).</p>\n\n<pre><code>if (typeof someUndeclaredVariable == \"undefined\") {\n    // Works\n}\n\nif (someUndeclaredVariable === undefined) { \n    // Throws an error\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I personally use </p>\n\n<pre><code>myVar === undefined\n</code></pre>\n\n<p>Warning: Please note that <code>===</code> is used over <code>==</code> and that <code>myVar</code> has been previously <em>declared</em> (not <em>defined</em>).</p>\n\n<hr>\n\n<p>I do not like <code>typeof myVar === \"undefined\"</code>. I think it is long winded and unnecessary. (I can get the same done in less code.)</p>\n\n<p>Now some people will keel over in pain when they read this, screaming: \"Wait! WAAITTT!!! <code>undefined</code> can be redefined!\"</p>\n\n<p>Cool. I know this. Then again, most variables in Javascript can be redefined. Should you never use any built-in identifier that can be redefined?</p>\n\n<p>If you follow this rule, good for you: you aren't a hypocrite.</p>\n\n<p>The thing is, in order to do lots of real work in JS, developers need to rely on redefinable identifiers to be what they are. I don't hear people telling me that I shouldn't use <code>setTimeout</code> because someone can</p>\n\n<pre><code>window.setTimeout = function () {\n    alert(\"Got you now!\");\n};\n</code></pre>\n\n<p>Bottom line, the \"it can be redefined\" argument to not use a raw <code>=== undefined</code> is bogus. </p>\n\n<p>(If you are still scared of <code>undefined</code> being redefined, why are you blindly integrating untested library code into your code base?)</p>\n\n<hr>\n\n<p>Also, like the <code>typeof</code> approach, this technique can \"detect\" undeclared variables: </p>\n\n<pre><code>if (window.someVar === undefined) {\n    doSomething();\n}\n</code></pre>\n\n<p>But both these techniques leak in their abstraction. I urge you not to use this or even </p>\n\n<pre><code>if (typeof myVar !== \"undefined\") {\n    doSomething();\n}\n</code></pre>\n\n<p>Consider:</p>\n\n<pre><code>var iAmUndefined;\n</code></pre>\n\n<p>To catch whether or not that variable is declared or not, you may need to resort to the <code>in</code> operator. (In many cases, you can simply read the code O_o).</p>\n\n<pre><code>if (\"myVar\" in window) {\n    doSomething();\n}\n</code></pre>\n\n<p>But wait! There's more! What if some prototype chain magic is happening\u2026? Now even the superior <code>in</code> operator does not suffice. (Okay, I'm done here about this part except to say that for 99% of the time, <code>=== undefined</code> (and ****cough**** <code>typeof</code>) works just fine. If you really care, you can read about this subject on its own.)</p>\n",
                    "is_accepted": false,
                    "score": 213
                },
                {
                    "body": "<p>Since none of the other answers helped me, I suggest doing this. It worked for me in Internet&nbsp;Explorer&nbsp;8:</p>\n\n<pre><code>if (typeof variable_name.value === 'undefined') {\n    // variable_name is undefined\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Some scenarios illustrating the results of the various answers:\n<a href=\"http://jsfiddle.net/drzaus/UVjM4/\">http://jsfiddle.net/drzaus/UVjM4/</a></p>\n\n<p><em>(Note that the use of <code>var</code> for <code>in</code> tests make a difference when in a scoped wrapper)</em></p>\n\n<p>Code for reference:</p>\n\n<pre><code>(function(undefined) {\n    var definedButNotInitialized;\n    definedAndInitialized = 3;\n    someObject = {\n        firstProp: \"1\"\n        , secondProp: false\n        // , undefinedProp not defined\n    }\n    // var notDefined;\n\n    var tests = [\n        'definedButNotInitialized in window',\n        'definedAndInitialized in window',\n        'someObject.firstProp in window',\n        'someObject.secondProp in window',\n        'someObject.undefinedProp in window',\n        'notDefined in window',\n\n        '\"definedButNotInitialized\" in window',\n        '\"definedAndInitialized\" in window',\n        '\"someObject.firstProp\" in window',\n        '\"someObject.secondProp\" in window',\n        '\"someObject.undefinedProp\" in window',\n        '\"notDefined\" in window',\n\n        'typeof definedButNotInitialized == \"undefined\"',\n        'typeof definedButNotInitialized === typeof undefined',\n        'definedButNotInitialized === undefined',\n        '! definedButNotInitialized',\n        '!! definedButNotInitialized',\n\n        'typeof definedAndInitialized == \"undefined\"',\n        'typeof definedAndInitialized === typeof undefined',\n        'definedAndInitialized === undefined',\n        '! definedAndInitialized',\n        '!! definedAndInitialized',\n\n        'typeof someObject.firstProp == \"undefined\"',\n        'typeof someObject.firstProp === typeof undefined',\n        'someObject.firstProp === undefined',\n        '! someObject.firstProp',\n        '!! someObject.firstProp',\n\n        'typeof someObject.secondProp == \"undefined\"',\n        'typeof someObject.secondProp === typeof undefined',\n        'someObject.secondProp === undefined',\n        '! someObject.secondProp',\n        '!! someObject.secondProp',\n\n        'typeof someObject.undefinedProp == \"undefined\"',\n        'typeof someObject.undefinedProp === typeof undefined',\n        'someObject.undefinedProp === undefined',\n        '! someObject.undefinedProp',\n        '!! someObject.undefinedProp',\n\n        'typeof notDefined == \"undefined\"',\n        'typeof notDefined === typeof undefined',\n        'notDefined === undefined',\n        '! notDefined',\n        '!! notDefined'\n    ];\n\n    var output = document.getElementById('results');\n    var result = '';\n    for(var t in tests) {\n        if( !tests.hasOwnProperty(t) ) continue; // bleh\n\n        try {\n            result = eval(tests[t]);\n        } catch(ex) {\n            result = 'Exception--' + ex;\n        }\n        console.log(tests[t], result);\n        output.innerHTML += \"\\n\" + tests[t] + \": \" + result;\n    }\n})();\n</code></pre>\n\n<p>And results:</p>\n\n<pre><code>definedButNotInitialized in window: true\ndefinedAndInitialized in window: false\nsomeObject.firstProp in window: false\nsomeObject.secondProp in window: false\nsomeObject.undefinedProp in window: true\nnotDefined in window: Exception--ReferenceError: notDefined is not defined\n\"definedButNotInitialized\" in window: false\n\"definedAndInitialized\" in window: true\n\"someObject.firstProp\" in window: false\n\"someObject.secondProp\" in window: false\n\"someObject.undefinedProp\" in window: false\n\"notDefined\" in window: false\ntypeof definedButNotInitialized == \"undefined\": true\ntypeof definedButNotInitialized === typeof undefined: true\ndefinedButNotInitialized === undefined: true\n! definedButNotInitialized: true\n!! definedButNotInitialized: false\ntypeof definedAndInitialized == \"undefined\": false\ntypeof definedAndInitialized === typeof undefined: false\ndefinedAndInitialized === undefined: false\n! definedAndInitialized: false\n!! definedAndInitialized: true\ntypeof someObject.firstProp == \"undefined\": false\ntypeof someObject.firstProp === typeof undefined: false\nsomeObject.firstProp === undefined: false\n! someObject.firstProp: false\n!! someObject.firstProp: true\ntypeof someObject.secondProp == \"undefined\": false\ntypeof someObject.secondProp === typeof undefined: false\nsomeObject.secondProp === undefined: false\n! someObject.secondProp: true\n!! someObject.secondProp: false\ntypeof someObject.undefinedProp == \"undefined\": true\ntypeof someObject.undefinedProp === typeof undefined: true\nsomeObject.undefinedProp === undefined: true\n! someObject.undefinedProp: true\n!! someObject.undefinedProp: false\ntypeof notDefined == \"undefined\": true\ntypeof notDefined === typeof undefined: true\nnotDefined === undefined: Exception--ReferenceError: notDefined is not defined\n! notDefined: Exception--ReferenceError: notDefined is not defined\n!! notDefined: Exception--ReferenceError: notDefined is not defined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>On the contrary of @Thomas Eding answer:</p>\n\n<p>If I forget to declare <code>myVar</code> in my code, then I'll get <code>myVar is not defined</code>.</p>\n\n<p>Let's take a real example:</p>\n\n<p>I've a variable name, but I am not sure if it is declared somewhere or not.</p>\n\n<p>Then @Anurag's answer will help:</p>\n\n<pre><code>var myVariableToCheck = 'myVar';\nif (window[myVariableToCheck] === undefined)\n    console.log(\"Not declared or declared, but undefined.\");\n\n// Or you can check it directly \nif (window['myVar'] === undefined) \n    console.log(\"Not declared or declared, but undefined.\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In Google Chrome, the following was ever so slightly faster than a <code>typeof</code> test:</p>\n\n<pre><code>if (abc === void 0) {\n    // Undefined\n}\n</code></pre>\n\n<p>The difference was negligible.  However, this code is more concise, and clearer at a glance to someone who knows what <code>void 0</code> means.  Note, however, that <code>abc</code> must still be declared.</p>\n\n<p>Both <code>typeof</code> and <code>void</code> were significantly faster than comparing directly against <code>undefined</code>.  I used the following test format in the Chrome developer console:</p>\n\n<pre><code>var abc;\nstart = +new Date();\nfor (var i = 0; i &lt; 10000000; i++) {\n    if (TEST) {\n        void 1;\n    }\n}\nend = +new Date();\nend - start;\n</code></pre>\n\n<p>The results were as follows:</p>\n\n<pre><code>Test: | abc === undefined      abc === void 0      typeof abc == 'undefined'\n------+---------------------------------------------------------------------\nx10M  |     13678 ms               9854 ms                 9888 ms\n  x1  |    1367.8 ns              985.4 ns                988.8 ns\n</code></pre>\n\n<p>Note that the first row is in <em>milli</em>seconds, while the second row is in <em>nano</em>seconds.  A difference of 3.4 nanoseconds is nothing.  The times were pretty consistent in subsequent tests.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In <a href=\"http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\" rel=\"nofollow\">this article</a> I read that frameworks like <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow\">Underscore.js</a> use this function:</p>\n\n<pre><code>function isUndefined(obj){\n    return obj === void 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Personally, I always use the following:</p>\n\n<pre><code>var x;\nif( x === undefined) {\n    //Do something here\n}\nelse {\n   //Do something else here\n}\n</code></pre>\n\n<p>The window.undefined property is non-writable in all modern browsers (JavaScript 1.8.5 or later). From Mozilla's documentation: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined</a>, I see this: One reason to use typeof() is that it does not throw an error if the variable has not been defined.</p>\n\n<p>I prefer to have the approach of using</p>\n\n<pre><code>x === undefined \n</code></pre>\n\n<p>because it fails and blows up in my face rather than silently passing/failing if x has not been declared before. This alerts me that x is not declared. I believe all variables used in JavaScript should be declared.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The most reliable way I know of checking for <code>undefined</code> is to use <code>void 0</code>.</p>\n\n<p>This is compatible with newer and older browsers, alike, and cannot be overwritten like <code>window.undefined</code> can in some cases.</p>\n\n<pre><code>if( myVar === void 0){\n    //yup it's undefined\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>    var x;\n    if (x === undefined) {\n        alert (\"I am declared, but not defined.\")\n    };\n    if (typeof y === \"undefined\") {\n        alert (\"I am not even declared.\")\n    };\n\n    /* One more thing to understand: typeof ==='undefined' also checks \n       for if a variable is declared, but no value is assigned. In other \n       words, the variable is declared, but not defined. */\n\n    // Will repeat above logic of x for typeof === 'undefined'\n    if (x === undefined) {\n        alert (\"I am declared, but not defined.\")\n    };\n    /* So typeof === 'undefined' works for both, but x === undefined \n       only works for a variable which is at least declared. */\n\n    /* Say if I try using typeof === undefined (not in quotes) for \n       a variable which is not even declared, we will get run a \n       time error. */\n\n    if (z === undefined) {\n        alert (\"I am neither declared nor defined.\")\n    };\n    // I got this error for z ReferenceError: z is not defined \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>// x has not been defined before\nif (typeof x === 'undefined') { // Evaluates to true without errors.\n   // These statements execute.\n}\n\nif (x === undefined) { // Throws a ReferenceError\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>What is the most appropriate way to test if a variable is undefined in JavaScript? I've seen several possible ways:</p>\n\n<pre><code>if (window.myVariable)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>if (typeof(myVariable) != \"undefined\")\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>if (myVariable) //This throws an error if undefined. Should this be in Try/Catch?\n</code></pre>\n",
            "last_activity_date": 1425563890,
            "question_id": 3390396,
            "score": 664,
            "tags": [
                "javascript",
                "undefined"
            ],
            "title": "How to check for &quot;undefined&quot; in JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<pre><code>for(var k in validation_messages) {\n    var o = validation_messages[k];\n    do_something_with(o.your_name);\n    do_something_else_with(o.your_msg);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>for (var key in validation_messages) {\n   var obj = validation_messages[key];\n   for (var prop in obj) {\n      // important check that this is objects own property \n      // not from prototype prop inherited\n      if(obj.hasOwnProperty(prop)){\n        alert(prop + \" = \" + obj[prop]);\n      }\n   }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 864
                },
                {
                    "body": "<pre><code>for(var key in validation_messages){\n    for(var subkey in validation_messages[key]){\n        //code here\n        //subkey being value, key being 'yourname' / 'yourmsg'\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you use recursion you can return object properties of any depth-</p>\n\n<pre><code>function lookdeep(object){\n    var collection= [], index= 0, next, item;\n    for(item in object){\n        if(object.hasOwnProperty(item)){\n            next= object[item];\n            if(typeof next== 'object' &amp;&amp; next!= null){\n                collection[index++]= item +\n                ':{ '+ lookdeep(next).join(', ')+'}';\n            }\n            else collection[index++]= [item+':'+String(next)];\n        }\n    }\n    return collection;\n}\n\n//example\n\nvar O={\n    a:1, b:2, c:{\n        c1:3, c2:4, c3:{\n            t:true, f:false\n        }\n    },\n    d:11\n};\nvar lookdeepSample= 'O={'+ lookdeep(O).join(',\\n')+'}';\n\n\n/*  returned value: (String)\nO={\n    a:1, \n    b:2, \n    c:{\n        c1:3, c2:4, c3:{\n            t:true, f:false\n        }\n    },\n    d:11\n}\n\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>The problem with this</p>\n\n<pre><code>for (var key in validation_messages) {\n   var obj = validation_messages[key];\n   for (var prop in obj) {\n      alert(prop + \" = \" + obj[prop]);\n   }\n}\n</code></pre>\n\n<p>is that you\u2019ll also loop through the primitive object's prototype.</p>\n\n<p>With this one you will avoid it:</p>\n\n<pre><code>for (var key in validation_messages) {\n   if (validation_messages.hasOwnProperty(key)) {\n      var obj = validation_messages[key];\n      for (var prop in obj) {\n         if (obj.hasOwnProperty(prop)) {\n            alert(prop + \" = \" + obj[prop]);\n         }\n      }\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 274
                },
                {
                    "body": "<p>Under ECMAScript 5, you can combine Object.keys() and Array.prototype.forEach():</p>\n\n<pre><code>var obj = { first: \"John\", last: \"Doe\" };\n// Visit non-inherited enumerable keys\nObject.keys(obj).forEach(function(key) {\n    console.log(key, obj[key]);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 152
                },
                {
                    "body": "<p>I know it's waaay late, but it did take me 2 minutes to write this optimized and improved version of AgileJon's answer:</p>\n\n<pre><code>var key, obj, prop, owns = Object.prototype.hasOwnProperty;\n\nfor (key in validation_messages ) {\n\n    if (owns.call(validation_messages, key)) {\n\n        obj = validation_messages[key];\n\n        for (prop in obj ) {\n\n            // using obj.hasOwnProperty might cause you headache if there is\n            // obj.hasOwnProperty = function(){return false;}\n            // but owns will always work \n            if (owns.call(obj, prop)) {\n                console.log(prop, \"=\", obj[prop]);\n            }\n\n        }\n\n    }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Using <a href=\"http://documentcloud.github.com/underscore/#each\">Underscore.js\u2019s <code>_.each</code></a>:</p>\n\n<pre><code>_.each(validation_messages, function(value, key){\n    _.each(value, function(value, key){\n        console.log(value);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I couldn't get the above posts to quite do what I was after.</p>\n\n<p>After playing around with the other replies here, I made this. It's hacky, but it works!</p>\n\n<p>For this object:</p>\n\n<pre><code>var myObj = {\n    pageURL    : \"BLAH\",\n    emailBox   : {model:\"emailAddress\", selector:\"#emailAddress\"},\n    passwordBox: {model:\"password\"    , selector:\"#password\"}\n};\n</code></pre>\n\n<p>... this code:</p>\n\n<pre><code>// Get every value in the object into a separate array item ...\nfunction buildArray(p_MainObj, p_Name) {\n    var variableList = [];\n    var thisVar = \"\";\n    var thisYes = false;\n    for (var key in p_MainObj) {\n       thisVar = p_Name + \".\" + key;\n       thisYes = false;\n       if (p_MainObj.hasOwnProperty(key)) {\n          var obj = p_MainObj[key];\n          for (var prop in obj) {\n            var myregex = /^[0-9]*$/;\n            if (myregex.exec(prop) != prop) {\n                thisYes = true;\n                variableList.push({item:thisVar + \".\" + prop,value:obj[prop]});\n            }\n          }\n          if ( ! thisYes )\n            variableList.push({item:thisVar,value:obj});\n       }\n    }\n    return variableList;\n}\n\n// Get the object items into a simple array ...\nvar objectItems = buildArray(myObj, \"myObj\");\n\n// Now use them / test them etc... as you need to!\nfor (var x=0; x &lt; objectItems.length; ++x) {\n    console.log(objectItems[x].item + \" = \" + objectItems[x].value);\n}\n</code></pre>\n\n<p>... produces this in the console:</p>\n\n<pre><code>myObj.pageURL = BLAH\nmyObj.emailBox.model = emailAddress\nmyObj.emailBox.selector = #emailAddress\nmyObj.passwordBox.model = password\nmyObj.passwordBox.selector = #password\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In my case (on the basis of the preceding) is possible any number of levels.</p>\n\n<pre><code>var myObj = {\n    rrr: undefined,\n    pageURL    : \"BLAH\",\n    emailBox   : {model:\"emailAddress\", selector:\"#emailAddress\"},\n    passwordBox: {model:\"password\"    , selector:\"#password\"},\n    proba: {odin:{dva:\"rr\",trr:\"tyuuu\"}, od:{ff:5,ppa:{ooo:{lll:'lll'}},tyt:'12345'}}\n};\n\n\nfunction lookdeep(obj,p_Name,gg){\n    var A=[], tem, wrem=[], dd=gg?wrem:A;\n    for(var p in obj){\n        var y1=gg?'':p_Name, y1=y1 + '.' + p;\n        if(obj.hasOwnProperty(p)){\n           var tem=obj[p];\n           if(tem &amp;&amp; typeof tem=='object'){\n               a1=arguments.callee(tem,p_Name,true);\n               if(a1 &amp;&amp; typeof a1=='object'){for(i in a1){dd.push(y1 + a1[i])};}\n            }\n            else{\n               dd.push(y1 + ':' + String(tem));\n            }\n        }\n    };\n    return dd\n};\n\n\nvar s=lookdeep(myObj,'myObj',false);\nfor (var x=0; x &lt; s.length; ++x) {\nconsole.log(s[x]+'\\n');}\n</code></pre>\n\n<p>result:</p>\n\n<pre><code>[\"myObj.rrr:undefined\",\n\"myObj.pageURL:BLAH\",\n\"myObj.emailBox.model:emailAddress\",\n\"myObj.emailBox.selector:#emailAddress\",\n\"myObj.passwordBox.model:password\",\n\"myObj.passwordBox.selector:#password\",\n\"myObj.proba.odin.dva:rr\",\n\"myObj.proba.odin.trr:tyuuu\",\n\"myObj.proba.od.ff:5\",\n\"myObj.proba.od.ppa.ooo.lll:lll\",\n\"myObj.proba.od.tyt:12345\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                }
            ],
            "body": "<p>How can I loop through all members in a JavaScript object including values that are objects.</p>\n\n<p>For example, how could I loop through this (accessing the \"your_name\" and \"your_message\" for each)?</p>\n\n<pre><code>var validation_messages = {\n    \"key_1\": {\n    \t\"your_name\": \"jimmy\",\n    \t\"your_msg\": \"hello world\"\n    },\n    \"key_2\": {\n    \t\"your_name\": \"billy\",\n    \t\"your_msg\": \"foo equals bar\"\n    }\n}\n</code></pre>\n",
            "last_activity_date": 1384457535,
            "question_id": 921789,
            "score": 498,
            "tags": [
                "javascript",
                "object-literal"
            ],
            "title": "How to Loop through JavaScript object literal with objects as members?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Hendrik's answer in the comments above will work but probably isn't what you are looking for. The format is not very usable. </p>\n\n<p>I have been having the same issue and have come up with this through a lot of searching. </p>\n\n<pre><code>var today = new Date();\nvar dd = today.getDate();\nvar mm = today.getMonth()+1; //January is 0!\nvar yyyy = today.getFullYear();\n\nif(dd&lt;10) {\n    dd='0'+dd\n} \n\nif(mm&lt;10) {\n    mm='0'+mm\n} \n\ntoday = mm+'/'+dd+'/'+yyyy;\ndocument.write(today);\n</code></pre>\n\n<p>It's quite complex but it will give you today's date in the format of mm/dd/yyyy.</p>\n\n<p>Simply change <code>today = mm+'/'+dd+'/'+yyyy;</code> to what ever format you wish.</p>\n",
                    "is_accepted": true,
                    "score": 768
                },
                {
                    "body": "<blockquote>\n  <p><em><strong>UPDATED!</em></strong>, Scroll Down</p>\n</blockquote>\n\n<p>If you want something simple pretty to the end user ...</p>\n\n<pre><code>var objToday = new Date(),\n                weekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),\n                dayOfWeek = weekday[objToday.getDay()],\n                domEnder = new Array( 'th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th' ),\n                dayOfMonth = today + (objToday.getDate() &lt; 10) ? '0' + objToday.getDate() + domEnder[objToday.getDate()] : objToday.getDate() + domEnder[parseFloat((\"\" + objToday.getDate()).substr((\"\" + objToday.getDate()).length - 1))],\n                months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),\n                curMonth = months[objToday.getMonth()],\n                curYear = objToday.getFullYear(),\n                curHour = objToday.getHours() &gt; 12 ? objToday.getHours() - 12 : (objToday.getHours() &lt; 10 ? \"0\" + objToday.getHours() : objToday.getHours()),\n                curMinute = objToday.getMinutes() &lt; 10 ? \"0\" + objToday.getMinutes() : objToday.getMinutes(),\n                curSeconds = objToday.getSeconds() &lt; 10 ? \"0\" + objToday.getSeconds() : objToday.getSeconds(),\n                curMeridiem = objToday.getHours() &gt; 12 ? \"PM\" : \"AM\";\nvar today = curHour + \":\" + curMinute + \".\" + curSeconds + curMeridiem + \" \" + dayOfWeek + \" \" + dayOfMonth + \" of \" + curMonth + \", \" + curYear;\n</code></pre>\n\n<blockquote>\n  <p><strong>UPDATE</strong> This has become popular enough and interest me enough that i made a datetime javascript class</p>\n</blockquote>\n\n<p>You can find the class in full and working with some examples at <a href=\"http://jsfiddle.net/SpYk3/rYzAY/\"><strong>jsFiddle</strong></a>.  Don't forget to open your browsers console and see the datetime object i sent to console so you can see ALL of this class' features.</p>\n\n<p>Or just copy the code below:</p>\n\n<pre><code>function DateTime() {\n    function getDaySuffix(a) {\n        var b = \"\" + a,\n            c = b.length,\n            d = parseInt(b.substring(c-2, c-1)),\n            e = parseInt(b.substring(c-1));\n        if (c == 2 &amp;&amp; d == 1) return \"th\";\n        switch(e) {\n            case 1:\n                return \"st\";\n                break;\n            case 2:\n                return \"nd\";\n                break;\n            case 3:\n                return \"rd\";\n                break;\n            default:\n                return \"th\";\n                break;\n        };\n    };\n\n    this.getDoY = function(a) {\n        var b = new Date(a.getFullYear(),0,1);\n    return Math.ceil((a - b) / 86400000);\n    }\n\n    this.date = arguments.length == 0 ? new Date() : new Date(arguments);\n\n    this.weekdays = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');\n    this.months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');\n    this.daySuf = new Array( \"st\", \"nd\", \"rd\", \"th\" );\n\n    this.day = {\n        index: {\n            week: \"0\" + this.date.getDay(),\n            month: (this.date.getDate() &lt; 10) ? \"0\" + this.date.getDate() : this.date.getDate()\n        },\n        name: this.weekdays[this.date.getDay()],\n        of: {\n            week: ((this.date.getDay() &lt; 10) ? \"0\" + this.date.getDay() : this.date.getDay()) + getDaySuffix(this.date.getDay()),\n            month: ((this.date.getDate() &lt; 10) ? \"0\" + this.date.getDate() : this.date.getDate()) + getDaySuffix(this.date.getDate())\n        }\n    }\n\n    this.month = {\n        index: (this.date.getMonth() + 1) &lt; 10 ? \"0\" + (this.date.getMonth() + 1) : this.date.getMonth() + 1,\n        name: this.months[this.date.getMonth()]\n    };\n\n    this.year = this.date.getFullYear();\n\n    this.time = {\n        hour: {\n            meridiem: (this.date.getHours() &gt; 12) ? (this.date.getHours() - 12) &lt; 10 ? \"0\" + (this.date.getHours() - 12) : this.date.getHours() - 12 : (this.date.getHours() &lt; 10) ? \"0\" + this.date.getHours() : this.date.getHours(),\n            military: (this.date.getHours() &lt; 10) ? \"0\" + this.date.getHours() : this.date.getHours(),\n            noLeadZero: {\n                meridiem: (this.date.getHours() &gt; 12) ? this.date.getHours() - 12 : this.date.getHours(),\n                military: this.date.getHours()\n            }\n        },\n        minute: (this.date.getMinutes() &lt; 10) ? \"0\" + this.date.getMinutes() : this.date.getMinutes(),\n        seconds: (this.date.getSeconds() &lt; 10) ? \"0\" + this.date.getSeconds() : this.date.getSeconds(),\n        milliseconds: (this.date.getMilliseconds() &lt; 100) ? (this.date.getMilliseconds() &lt; 10) ? \"00\" + this.date.getMilliseconds() : \"0\" + this.date.getMilliseconds() : this.date.getMilliseconds(),\n        meridiem: (this.date.getHours() &gt; 12) ? \"PM\" : \"AM\"\n    };\n\n    this.sym = {\n        d: {\n            d: this.date.getDate(),\n            dd: (this.date.getDate() &lt; 10) ? \"0\" + this.date.getDate() : this.date.getDate(),\n            ddd: this.weekdays[this.date.getDay()].substring(0, 3),\n            dddd: this.weekdays[this.date.getDay()],\n            ddddd: ((this.date.getDate() &lt; 10) ? \"0\" + this.date.getDate() : this.date.getDate()) + getDaySuffix(this.date.getDate()),\n            m: this.date.getMonth() + 1,\n            mm: (this.date.getMonth() + 1) &lt; 10 ? \"0\" + (this.date.getMonth() + 1) : this.date.getMonth() + 1,\n            mmm: this.months[this.date.getMonth()].substring(0, 3),\n            mmmm: this.months[this.date.getMonth()],\n            yy: (\"\"+this.date.getFullYear()).substr(2, 2),\n            yyyy: this.date.getFullYear()\n        },\n        t: {\n            h: (this.date.getHours() &gt; 12) ? this.date.getHours() - 12 : this.date.getHours(),\n            hh: (this.date.getHours() &gt; 12) ? (this.date.getHours() - 12) &lt; 10 ? \"0\" + (this.date.getHours() - 12) : this.date.getHours() - 12 : (this.date.getHours() &lt; 10) ? \"0\" + this.date.getHours() : this.date.getHours(),\n            hhh: this.date.getHours(),\n            m: this.date.getMinutes(),\n            mm: (this.date.getMinutes() &lt; 10) ? \"0\" + this.date.getMinutes() : this.date.getMinutes(),\n            s: this.date.getSeconds(),\n            ss: (this.date.getSeconds() &lt; 10) ? \"0\" + this.date.getSeconds() : this.date.getSeconds(),\n            ms: this.date.getMilliseconds(),\n            mss: Math.round(this.date.getMilliseconds()/10) &lt; 10 ? \"0\" + Math.round(this.date.getMilliseconds()/10) : Math.round(this.date.getMilliseconds()/10),\n            msss: (this.date.getMilliseconds() &lt; 100) ? (this.date.getMilliseconds() &lt; 10) ? \"00\" + this.date.getMilliseconds() : \"0\" + this.date.getMilliseconds() : this.date.getMilliseconds()\n        }\n    };\n\n    this.formats = {\n        compound: {\n            commonLogFormat: this.sym.d.dd + \"/\" + this.sym.d.mmm + \"/\" + this.sym.d.yyyy + \":\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            exif: this.sym.d.yyyy + \":\" + this.sym.d.mm + \":\" + this.sym.d.dd + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            /*iso1: \"\",\n            iso2: \"\",*/\n            mySQL: this.sym.d.yyyy + \"-\" + this.sym.d.mm + \"-\" + this.sym.d.dd + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            postgreSQL1: this.sym.d.yyyy + \".\" + this.getDoY(this.date),\n            postgreSQL2: this.sym.d.yyyy + \"\" + this.getDoY(this.date),\n            soap: this.sym.d.yyyy + \"-\" + this.sym.d.mm + \"-\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss + \".\" + this.sym.t.mss,\n            //unix: \"\",\n            xmlrpc: this.sym.d.yyyy + \"\" + this.sym.d.mm + \"\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            xmlrpcCompact: this.sym.d.yyyy + \"\" + this.sym.d.mm + \"\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \"\" + this.sym.t.mm + \"\" + this.sym.t.ss,\n            wddx: this.sym.d.yyyy + \"-\" + this.sym.d.m + \"-\" + this.sym.d.d + \"T\" + this.sym.t.h + \":\" + this.sym.t.m + \":\" + this.sym.t.s\n        },\n        constants: {\n            atom: this.sym.d.yyyy + \"-\" + this.sym.d.mm + \"-\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            cookie: this.sym.d.dddd + \", \" + this.sym.d.dd + \"-\" + this.sym.d.mmm + \"-\" + this.sym.d.yy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            iso8601: this.sym.d.yyyy + \"-\" + this.sym.d.mm + \"-\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rfc822: this.sym.d.ddd + \", \" + this.sym.d.dd + \" \" + this.sym.d.mmm + \" \" + this.sym.d.yy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rfc850: this.sym.d.dddd + \", \" + this.sym.d.dd + \"-\" + this.sym.d.mmm + \"-\" + this.sym.d.yy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rfc1036: this.sym.d.ddd + \", \" + this.sym.d.dd + \" \" + this.sym.d.mmm + \" \" + this.sym.d.yy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rfc1123: this.sym.d.ddd + \", \" + this.sym.d.dd + \" \" + this.sym.d.mmm + \" \" + this.sym.d.yyyy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rfc2822: this.sym.d.ddd + \", \" + this.sym.d.dd + \" \" + this.sym.d.mmm + \" \" + this.sym.d.yyyy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rfc3339: this.sym.d.yyyy + \"-\" + this.sym.d.mm + \"-\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            rss: this.sym.d.ddd + \", \" + this.sym.d.dd + \" \" + this.sym.d.mmm + \" \" + this.sym.d.yy + \" \" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss,\n            w3c: this.sym.d.yyyy + \"-\" + this.sym.d.mm + \"-\" + this.sym.d.dd + \"T\" + this.sym.t.hhh + \":\" + this.sym.t.mm + \":\" + this.sym.t.ss\n        },\n        pretty: {\n            a: this.sym.t.hh + \":\" + this.sym.t.mm + \".\" + this.sym.t.ss + this.time.meridiem + \" \" + this.sym.d.dddd + \" \" + this.sym.d.ddddd + \" of \" + this.sym.d.mmmm + \", \" + this.sym.d.yyyy,\n            b: this.sym.t.hh + \":\" + this.sym.t.mm + \" \" + this.sym.d.dddd + \" \" + this.sym.d.ddddd + \" of \" + this.sym.d.mmmm + \", \" + this.sym.d.yyyy\n        }\n    };\n};\n</code></pre>\n\n<p>Use is as simple as:</p>\n\n<pre><code>var dt = new DateTime();\n$(\"#eleID\").text(dt.formats.pretty.b);\n</code></pre>\n\n<p>There is also quite a many ways to get custom formats if you look in the console, you'll find an object full of all the possible properties.</p>\n\n<p>Also accepts datetime params just like the javascript date function does!</p>\n\n<p>List of common formats for <code>var dt = new DateTime();</code></p>\n\n<ul>\n<li>dt.formats.compound\n<ul>\n<li>dt.formats.compound.commonLogFormat</li>\n<li>dt.formats.compound.exif</li>\n<li>dt.formats.compound.mySQL</li>\n<li>dt.formats.compound.postgreSQL1</li>\n<li>dt.formats.compound.postgreSQL2</li>\n<li>dt.formats.compound.soap</li>\n<li>dt.formats.compound.xmlrpc</li>\n<li>dt.formats.compound.xmlrpcCompact</li>\n<li>dt.formats.compound.wddx</li>\n</ul></li>\n<li>dt.formats.constants\n<ul>\n<li>dt.formats.constants.atom</li>\n<li>dt.formats.constants.cookie</li>\n<li>dt.formats.constants.iso8601</li>\n<li>dt.formats.constants.rfc822</li>\n<li>dt.formats.constants.rfc850</li>\n<li>dt.formats.constants.rfc1036</li>\n<li>dt.formats.constants.rfc1123</li>\n<li>dt.formats.constants.rfc2822</li>\n<li>dt.formats.constants.rfc3339</li>\n<li>dt.formats.constants.rss</li>\n<li>dt.formats.constants.w3c</li>\n</ul></li>\n</ul>\n\n<blockquote>\n  <p>Pro Tip!</p>\n</blockquote>\n\n<p>Add one simple line (after jQuery is loaded and this class is created) to add to jQuery Library for use with jQuery style mark-up! For instance, if this class is in a file of it's own, loaded AFTER jQuery, simply add the following line to the END of the file holding this class.</p>\n\n<pre><code>// make jQuery style call for DateTime traditional JS plugin\nif (!$.jqDateTime) $.extend({ jqDateTime: function() { return new DateTime(arguments); } });\n// use\n$(\"#someElement\").text($.jqDateTime().formats.pretty.a);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var currentDate = new Date()\n    var day = currentDate.getDate()\n    var month = currentDate.getMonth() + 1\n    var year = currentDate.getFullYear()\n    document.write(\"&lt;b&gt;\" + day + \"/\" + month + \"/\" + year + \"&lt;/b&gt;\")\n&lt;/script&gt;\n</code></pre>\n\n<p>The result will be like</p>\n\n<pre><code>15/2/2012\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>You can use <a href=\"http://www.datejs.com/\">Date.js</a> library which extens Date object, thus you can have .today() method.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If you're looking for a lot more granular control over the date formats, I thoroughly recommend  checking out momentjs. Terrific library - and only 5KB.\n<a href=\"http://momentjs.com/\">http://momentjs.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>You can use this</p>\n\n<pre><code>&lt;script&gt;\nfunction my_curr_date() {      \n    var currentDate = new Date()\n    var day = currentDate.getDate();\n    var month = currentDate.getMonth() + 1;\n    var year = currentDate.getFullYear();\n    var my_date = month+\"-\"+day+\"-\"+year;\n    document.getElementById(\"dateField\").value=my_date;    \n}\n&lt;/script&gt;\n</code></pre>\n\n<p>The HTML is</p>\n\n<pre><code>&lt;body onload='return my_curr_date();'&gt;\n    &lt;input type='text' name='dateField' id='dateField' value='' /&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>(new Date()).toString().split(' ').splice(1,3).join(' ')\n</code></pre>\n\n<p>To break it down into steps:</p>\n\n<ol>\n<li><p><code>(new Date()).toString()</code> gives \"Fri Jun 28 2013 15:30:18 GMT-0700 (PDT)\"</p></li>\n<li><p><code>(new Date()).toString().split(' ')</code> divides the above string on each space and returns an array as follows: [\"Fri\", \"Jun\", \"28\", \"2013\", \"15:31:14\", \"GMT-0700\", \"(PDT)\"]</p></li>\n<li><p><code>(new Date()).toString().split(' ').splice(1,3).join(' ')</code> takes the second, third and fourth values from the above array, joins them with spaces, and returns a string \"Jun 28 2013\"</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>How abt this? Seems pretty simple to me...</p>\n\n<pre><code>new Date().toJSON().slice(0,10)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>This works every time:</p>\n\n<pre><code>var now = new Date();\nvar day = (\"0\" + now.getDate()).slice(-2);\nvar month = (\"0\" + (now.getMonth() + 1)).slice(-2);\nvar today = now.getFullYear() + \"-\" + (month) + \"-\" + (day);\nalert(today);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>(function() { var d = new Date(); return new Date(d - d % 86400000); })()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var date = new Date().toLocaleDateString(\"en-US\");\n</code></pre>\n\n<p>Also, you can call method <code>toLocaleDateString</code> with two parameters:</p>\n\n<pre><code>var date = new Date().toLocaleDateString(\"en-US\", {\n        \"year\": \"numeric\",\n        \"month\": \"numeric\"\n    });\n</code></pre>\n\n<p>Article on <a href=\"http://msdn.microsoft.com/en-US/library/kecw102f\" rel=\"nofollow\">MSDN</a>. More about this method on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"nofollow\">MDN</a>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can use moment.js: <a href=\"http://momentjs.com/\" rel=\"nofollow\">http://momentjs.com/</a></p>\n\n<pre><code>moment().format(\"DD/MM/YYYY\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you just want a date without time info, use:</p>\n\n<pre><code>var today = new Date();\ntoday.setHours(0, 0, 0, 0);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think this is an old question but the easiest way would be the following:</p>\n\n<pre><code>var date = new Date();\nvar TimeStamp = date.toLocaleString();\n\nfunction CurrentTime(){\n  alert(TimeStamp);\n}\n</code></pre>\n\n<p>This will grab the current time, pass it to a string based on location and then you can call the function CurrentTime to display the time.  This would be, to me, the most effective way to get a time stamp for something.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is my current favorite, because it's both flexible and modular. It's a collection of (at least) three simple functions:</p>\n\n<pre><code>/**\n * Returns an array with date / time information\n * Starts with year at index 0 up to index 6 for milliseconds\n * \n * @param {Date} date   date object. If falsy, will take current time.\n * @returns {[]}\n */\ngetDateArray = function(date) {\n    date = date || new Date();\n    return [\n        date.getFullYear(),\n        exports.pad(date.getMonth()+1, 2),\n        exports.pad(date.getDate(), 2),\n        exports.pad(date.getHours(), 2),\n        exports.pad(date.getMinutes(), 2),\n        exports.pad(date.getSeconds(), 2),\n        exports.pad(date.getMilliseconds(), 2)\n    ];\n};\n</code></pre>\n\n<p>Here's the pad function:</p>\n\n<pre><code> /**\n * Pad a number with n digits\n *\n * @param {number} number   number to pad\n * @param {number} digits   number of total digits\n * @returns {string}\n */\nexports.pad = function pad(number, digits) {\n    return new Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;\n};\n</code></pre>\n\n<p>Finally I can either build my date string by hand, or use a simple functions to do it for me:</p>\n\n<pre><code>/**\n * Returns nicely formatted date-time\n * @example 2015-02-10 16:01:12\n *\n * @param {object} date\n * @returns {string}\n */\nexports.niceDate = function(date) {\n    var d = exports.getDateArray(date);\n    return d[0] + '-' + d[1] + '-' + d[2] + ' ' + d[3] + ':' + d[4] + ':' + d[5];\n};\n\n/**\n * Returns a formatted date-time, optimized for machines\n * @example 2015-02-10_16-00-08\n *\n * @param {object} date\n * @returns {string}\n */\nexports.roboDate = function(date) {\n    var d = exports.getDateArray(date);\n    return d[0] + '-' + d[1] + '-' + d[2] + '_' + d[3] + '-' + d[4] + '-' + d[5];\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I get current date in JavaScript?</p>\n",
            "last_activity_date": 1423580603,
            "question_id": 1531093,
            "score": 546,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "How to get current date in JavaScript?"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>This Article shows how to detect mobile webbrowsers like iphone, ipad, android, symbian, ...</p>\n\n<p><a href=\"http://www.hand-interactive.com/resources/detect-mobile-javascript.htm\" rel=\"nofollow\">http://www.hand-interactive.com/resources/detect-mobile-javascript.htm</a></p>\n\n<p>you could make your conditional statement depending on the mobile plattform. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have you tried using this function? (This is the same as Modernizr use)</p>\n\n<pre><code>function is_touch_device() {  \n  try {  \n    document.createEvent(\"TouchEvent\");  \n    return true;  \n  } catch (e) {  \n    return false;  \n  }  \n}\n</code></pre>\n\n<p><strong>UPDATE:</strong></p>\n\n<p><code>document.createEvent(\"TouchEvent\")</code> have started to return <code>true</code> in the latest chrome (v. 17). Modernizr updated this a while ago. <a href=\"http://modernizr.github.com/Modernizr/touch.html\">Check Modernizr test out here</a>.</p>\n\n<p>Update your function like this to make it work:</p>\n\n<pre><code>function is_touch_device() {\n  return !!('ontouchstart' in window);\n}\n</code></pre>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>I found that the above wasn't working on IE10 (returning false on MS Surface). Here is the fix:</p>\n\n<pre><code>function is_touch_device() {\n  return 'ontouchstart' in window // works on most browsers \n      || 'onmsgesturechange' in window; // works on ie10\n};\n</code></pre>\n\n<p><strong>UPDATE</strong>:</p>\n\n<p><code>'onmsgesturechange' in window</code> will return true in some IE desktop versions so thats not reliable. <a href=\"https://github.com/Modernizr/Modernizr/blob/master/feature-detects/touchevents.js\">Modernizr have updated their tests</a>. I think this article <a href=\"http://www.stucox.com/blog/you-cant-detect-a-touchscreen/\">explains a couple of problems</a>.</p>\n",
                    "is_accepted": false,
                    "score": 302
                },
                {
                    "body": "<p>Although it's only in alpha, the <a href=\"http://jquerymobile.com\" rel=\"nofollow\">jquery mobile framework</a> is worth checking out. It will normalize these types of events across mobile browsers. Perhaps see what they're doing. I'm assuming jquery-mobile.js is something different than this framework.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><strong>Update: Please read <a href=\"http://stackoverflow.com/a/4819886/359287\">blmstr's answer</a> below before pulling a whole feature detection library into your project. Detecting actual touch support is more complex, and Modernizr only covers a basic use case.</strong></p>\n\n<p><a href=\"http://www.modernizr.com/\">Modernizr</a> is a great, lightweight way to do all kinds of feature detection on any site.</p>\n\n<p>It simply adds classes to the html element for each feature.</p>\n\n<p>You can then target those features easily in CSS and JS. For example:</p>\n\n<pre><code>html.touch div {\n    width: 480px;\n}\n\nhtml.no-touch div {\n    width: auto;\n}\n</code></pre>\n\n<p>And Javascript (jQuery example):</p>\n\n<pre><code>$('html.touch #popup').hide();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 93
                },
                {
                    "body": "<pre><code>var isTouchScreen = 'createTouch' in document;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>var isTouchScreen = 'createTouch' in document || screen.width &lt;= 699 || \n    ua.match(/(iPhone|iPod|iPad)/) || ua.match(/BlackBerry/) || \n    ua.match(/Android/);\n</code></pre>\n\n<p>would be a more thorough check I suppose.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check out this <a href=\"http://www.sitepoint.com/adapting-an-interface-for-touch-devices/\" rel=\"nofollow\">post</a>, it gives a really nice code snippet for what to do when touch devices are detected or what to do if touchstart event is called:</p>\n\n<pre><code>$(function(){\n  if(window.Touch) {\n    touch_detect.auto_detected();\n  } else {\n    document.ontouchstart = touch_detect.surface;\n  }\n}); // End loaded jQuery\nvar touch_detect = {\n  auto_detected: function(event){\n    /* add everything you want to do onLoad here (eg. activating hover controls) */\n    alert('this was auto detected');\n    activateTouchArea();\n  },\n  surface: function(event){\n    /* add everything you want to do ontouchstart here (eg. drag &amp; drop) - you can fire this in both places */\n    alert('this was detected by touching');\n    activateTouchArea();\n  }\n}; // touch_detect\nfunction activateTouchArea(){\n  /* make sure our screen doesn't scroll when we move the \"touchable area\" */\n  var element = document.getElementById('element_id');\n  element.addEventListener(\"touchstart\", touchStart, false);\n}\nfunction touchStart(event) {\n  /* modularize preventing the default behavior so we can use it again */\n  event.preventDefault();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I used pieces of the code above to detect whether touch, so my fancybox iframes would show up on desktop computers and not on touch. I noticed that Opera Mini for Android 4.0 was still registering as a non-touch device when using blmstr's code alone. (Does anyone know why?) </p>\n\n<p>I ended up using:</p>\n\n<pre><code>&lt;script&gt;\n$(document).ready(function() {\n    var ua = navigator.userAgent;\n    function is_touch_device() { \n        try {  \n            document.createEvent(\"TouchEvent\");  \n            return true;  \n        } catch (e) {  \n            return false;  \n        }  \n    }\n\n    if ((is_touch_device()) || ua.match(/(iPhone|iPod|iPad)/) \n    || ua.match(/BlackBerry/) || ua.match(/Android/)) {\n        // Touch browser\n    } else {\n        // Lightbox code\n    }\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I use:</p>\n\n<pre><code>if(jQuery.support.touch){\n    alert('Touch enabled');\n}\n</code></pre>\n\n<p>in jQuery mobile 1.0.1</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>I like this one:</strong></p>\n\n<pre><code>function isTouchDevice(){\n    return typeof window.ontouchstart !== 'undefined';\n}\n\nalert(isTouchDevice());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>As Modernizr doesn't detect IE10 on Windows Phone 8/WinRT, a simple, cross-browser solution is:</p>\n\n<pre><code>var supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints;\n</code></pre>\n\n<p>You only ever need to check once as the device won't suddenly support or not support touch, so just store it in a variable so you can use it multiple times more efficiently.</p>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>I would avoid using screen width to determine if a device is a touch device. There are touch screens much larger than 699px, think of Windows 8. Navigatior.userAgent may be nice to override false postives. </p>\n\n<p>I would recommend checking out <a href=\"https://github.com/Modernizr/Modernizr/issues/84\" rel=\"nofollow\">this issue</a> on Modernizr.</p>\n\n<p>Are you wanting to test if the device supports touch events or is a touch device. Unfortunately, that's not the same thing.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It looks like Chrome 24 now support touch events, probably for Windows 8. So the code posted here no longer works. Instead of trying to detect if touch is supported by the browser, I'm now binding both touch and click events and making sure only one is called: </p>\n\n<pre><code>myCustomBind = function(controlName, callback) {\n\n  $(controlName).bind('touchend click', function(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    callback.call();\n  });\n};\n</code></pre>\n\n<p>And then calling it: </p>\n\n<pre><code>myCustomBind('#mnuRealtime', function () { ... });\n</code></pre>\n\n<p>Hope this helps !</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Using all the comments above I've assembled the following code that is working for my needs:</p>\n\n<pre><code>var isTouch = (('ontouchstart' in window) || (navigator.msMaxTouchPoints &gt; 0));\n</code></pre>\n\n<p>I have tested this on iPad, Android (Browser and Chrome), Blackberry Playbook, iPhone 4s, Windows Phone 8, IE 10, IE 8, IE 10 (Windows 8 with Touchscreen), Opera, Chrome and Firefox.</p>\n\n<p>It currently fails on Windows Phone 7 and I haven't been able to find a solution for that browser yet.</p>\n\n<p>Hope someone finds this useful.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>If you use <a href=\"http://modernizr.com/\">Modernizr</a>, it is very easy to use <code>Modernizr.touch</code> as mentioned earlier.</p>\n\n<p>However, I prefer using a combination of <code>Modernizr.touch</code> and user agent testing, just to be safe.</p>\n\n<pre><code>var deviceAgent = navigator.userAgent.toLowerCase();\n\nvar isTouchDevice = Modernizr.touch || \n(deviceAgent.match(/(iphone|ipod|ipad)/) ||\ndeviceAgent.match(/(android)/)  || \ndeviceAgent.match(/(iemobile)/) || \ndeviceAgent.match(/iphone/i) || \ndeviceAgent.match(/ipad/i) || \ndeviceAgent.match(/ipod/i) || \ndeviceAgent.match(/blackberry/i) || \ndeviceAgent.match(/bada/i));\n\nif (isTouchDevice) {\n        //Do something touchy\n    } else {\n        //Can't touch this\n    }\n</code></pre>\n\n<p>If you don't use Modernizr, you can simply replace the <code>Modernizr.touch</code> function above with <code>('ontouchstart' in document.documentElement)</code></p>\n\n<p>Also note that testing the user agent <code>iemobile</code> will give you broader range of detected Microsoft mobile devices than <code>Windows Phone</code>.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/6262584/how-to-determine-if-the-client-is-a-touch-device\">Also see this SO question</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>this ways works for me, it wait for first user interaction to make sure they're on touch devices</p>\n\n<pre><code>var touchEnabled = false;\n$(document.body).one('touchstart',\n    function(e){\n        touchEnabled=true;\n        $(document.documentElement).addClass(\"touch\");\n        // other touch related init \n        //\n    }\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>This one works well even in Windows Surface tablets !!!  </p>\n\n<pre><code>function detectTouchSupport {\nmsGesture = window.navigator &amp;&amp; window.navigator.msPointerEnabled &amp;&amp; window.MSGesture,\ntouchSupport = (( \"ontouchstart\" in window ) || msGesture || window.DocumentTouch &amp;&amp;     document instanceof DocumentTouch);\nif(touchSupport) {\n    $(\"html\").addClass(\"ci_touch\");\n}\nelse {\n    $(\"html\").addClass(\"ci_no_touch\");\n}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Extent jQuery <code>support</code> object:</p>\n\n<pre><code>jQuery.support.touch = 'ontouchend' in document;\n</code></pre>\n\n<p>And now you can check it anywhere, like this:</p>\n\n<pre><code>if( jQuery.support.touch )\n   // do touch stuff\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>All browser supported except Firefox for desktop always <strong>TRUE</strong> because of Firefox for desktop support responsive design for developer even you click Touch-Button or not!</p>\n\n<p>I hope Mozilla will fix this in next version.</p>\n\n<p>I'm using Firefox 28 desktop.</p>\n\n<pre><code>function isTouch()\n{\n    return !!(\"ontouchstart\" in window) || !!(navigator.msMaxTouchPoints);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I also struggled a lot with different options on how to detect in Javascript whether the page is displayed on a touch screen device or not.\nIMO, as of now, no real option exists to detect the option properly.\nBrowsers either report touch events on desktop machines (because the OS maybe touch-ready), or some solutions don't work on all mobile devices.</p>\n\n<p>In the end, I realized that I was following the wrong approach from the start:\nIf my page was to look similar on touch and non-touch devices, I maybe shouldn't have to worry about detecting the property at all:\nMy scenario was to deactivate tooltips over buttons on touch devices as they lead to double-taps where I wanted a single tap to activate the button.</p>\n\n<p>My solution was to <strong>refactor</strong> the view so that no tooltip was needed over a button, and in the end I didn't need to detect the touch device from Javascript with methods that <strong>all have their drawbacks</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function isTouchDevice(){\n    if(Modernizr.hasEvent('touchstart') || navigator.userAgent.search(/Touch/i) != -1){\n        return true;\n    }else{\n        return false;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>We tried the modernizr implementation, but detecting the touch events is not consistent anymore (IE 10 has touch events on windows desktop, IE 11 works, because the've dropped touch events and added pointer api). </p>\n\n<p>So we decided to optimize the website as a touch site as long as we don't know what input type the user has. This is more reliable than any other solution.</p>\n\n<p>Our researches say, that most desktop users move with their mouse over the screen before they click, so we can detect them and change the behaviour before they are able to click or hover anything.</p>\n\n<p>This is a simplified version of our code:</p>\n\n<pre><code>var isTouch = true;\nwindow.addEventListener('mousemove', function mouseMoveDetector() {\n    isTouch = false;\n    window.removeEventListener('mousemove', mouseMoveDetector);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong><a href=\"http://jsfiddle.net/aash1010/s0xzpLdg/\" rel=\"nofollow\">Working Fiddle</a></strong></p>\n\n<p>I have achieved it like this;</p>\n\n<pre><code>function isTouchDevice(){\n    return true == (\"ontouchstart\" in window || window.DocumentTouch &amp;&amp; document instanceof DocumentTouch);\n}\n\nif(isTouchDevice()===true) {\n    alert('Touch Device'); //your logic for touch device\n}\nelse {\n    alert('Not a Touch Device'); //your logic for non touch device\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Many of these work but either require jQuery, or javascript linters complain about the syntax. Considering your initial question asks for a \"JavaScript\" (not jQuery, not Modernizr) way of solving this, here's a simple function that works every time. It's also about as minimal as you can get.</p>\n\n<pre><code>function isTouchDevice() {\n    return window.ontouchstart !== undefined;\n}\n\nconsole.log(isTouchDevice());\n</code></pre>\n\n<p>One last benefit I'll mention is that this code is framework and device agnostic. Enjoy!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>No, it's not possible. The excellent answers given are only ever partial, because any given method will produce false positives and false negatives. Even the browser doesn't always know if a touchscreen is present, due to OS APIs, and the fact can change during a browser session, particularly with KVM-type arrangements.</p>\n\n<p>See further details in this excellent article:</p>\n\n<p><a href=\"http://www.stucox.com/blog/you-cant-detect-a-touchscreen/\" rel=\"nofollow\">http://www.stucox.com/blog/you-cant-detect-a-touchscreen/</a></p>\n\n<p>The article suggests you reconsider the assumptions that make you want to detect touchscreens, they're probably wrong. (I checked my own for my app, and they were wrong!)</p>\n\n<p>The article concludes:</p>\n\n<blockquote>\n  <p>For layouts, assume everyone has a touchscreen. Mouse users can use\n  large UI controls much more easily than touch users can use small\n  ones. The same goes for hover states.</p>\n  \n  <p>For events and interactions, assume anyone may have a touchscreen.\n  Implement keyboard, mouse and touch interactions alongside each other,\n  ensuring none block each other.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've written a jQuery plug-in that's for use on both desktop and mobile devices. I wondered if there is a way with JavaScript to detect if the device has touch screen capability. I'm using jquery-mobile.js to detect the touch screen events and it works on iOS, Android etc., but I'd also like to write conditional statements based on whether the user's device has a touch screen.</p>\n\n<p>Is that possible?</p>\n",
            "last_activity_date": 1421870447,
            "question_id": 4817029,
            "score": 184,
            "tags": [
                "javascript",
                "jquery",
                "touch"
            ],
            "title": "What&#39;s the best way to detect a &#39;touch screen&#39; device using JavaScript?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>You can use <code>(this)</code> to reference the object that fired the function.</p>\n\n<p><code>'this'</code> is a <strong>DOM</strong> element when you are inside of a callback function (in the context of jQuery), for example, being called by the click, each, bind, etc. methods.</p>\n\n<p>Here is where you can learn more: <a href=\"http://remysharp.com/2007/04/12/jquerys-this-demystified/\">http://remysharp.com/2007/04/12/jquerys-this-demystified/</a></p>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>In jQuery <code>event.target</code> always refers to the element that triggered the event, where <code>'event'</code> is the parameter passed to the function. <a href=\"http://api.jquery.com/category/events/event-object/\">http://api.jquery.com/category/events/event-object/</a></p>\n\n<pre><code>$(document).ready(function() {\n    $(\"a\").click(function(event) {\n        alert(event.target.id);\n    });\n});\n</code></pre>\n\n<p>Note also that <code>'this'</code> will also work, but that it is not a jQuery object, so if you wish to use a jQuery function on it then you must refer to it as <code>'$(this)'</code>, e.g.:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"a\").click(function(event) {\n        // this.append wouldn't work\n        $(this).append(\" Clicked\");\n    });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 607
                },
                {
                    "body": "<p>For reference, try this! It works!</p>\n\n<pre><code>jQuery(\"classNameofDiv\").click(function() {\n    var contentPanelId = jQuery(this).attr(\"id\");\n    alert(contentPanelId);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>I generate a table dynamically out a database, receive the data in JSON and put it into a table. Every table row got a unique ID, which is needed for further actions, so, if the DOM is altered you need a different approach:</p>\n\n<pre><code>$(\"table\").delegate(\"tr\", \"click\", function() {\n   var id=$(this).attr('id');\n   alert(\"ID:\"+id);  \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The source element as a jQuery object should be obtained via</p>\n\n<pre><code>var $el = $(event.target);\n</code></pre>\n\n<p>This gets you the source of the click, rather than the element that the click function was assigned too. Can be useful when the click event is on a parent object\nEG.a click event on a table row, and you need the cell that was clicked</p>\n\n<pre><code>$(\"tr\").click(function(event){\n    var $td = $(event.target);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For all events, not limited to just jQuery you can use</p>\n\n<pre><code>var target = event.target || event.srcElement;\nvar id = target.id\n</code></pre>\n\n<p>Where event.target fails it falls back on event.srcElement for ie.\nTo clarify the above code does not require jQuery but also works with jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>You can try to use:</p>\n\n<pre><code>$('*').live('click', function() {\n console.log(this.id);\n return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Though it is mentioned in other posts, I wanted to spell this out:</p>\n\n<p><code>$(event.target).id</code> is undefined</p>\n\n<p><code>$(event.target)[0].id</code> gives the id attribute.</p>\n\n<p><code>event.target.id</code> also gives the id attribute.</p>\n\n<p><code>this.id</code> gives the id attribute.</p>\n\n<p>and</p>\n\n<p><code>$(this).id</code> is undefined.</p>\n\n<p>The differences, of course, is between jQuery objects and DOM objects. \"id\" is a DOM function so you have to be on the DOM element object to use it.</p>\n\n<p>(It tripped me up, so it probably tripped up someone else)</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>this.element.attr(\"id\") will works in IE8.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This works on a higher z-index than the event parameter mentioned in above answers:</p>\n\n<pre><code>$(\"#mydiv li\").click(function(){\n\n    ClickedElement = this.id;\n    alert(ClickedElement);\n});\n</code></pre>\n\n<p>This way you will always get the id of the (in this example li) element. Also when clicked on a child element of the parent..</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Both of these work,</p>\n\n<pre><code>jQuery(this).attr(\"id\");\n</code></pre>\n\n<p>and </p>\n\n<pre><code>alert(this.id);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>        var buttons = document.getElementsByTagName('button');\n        var buttonsLength = buttons.length;\n        for (var i = 0; i &lt; buttonsLength; i++){\n            buttons[i].addEventListener('click', clickResponse, false);\n        };\n\n        function clickResponse(){\n        //  do something based on button selection here...\n            alert(this.id);\n        }\n</code></pre>\n\n<p>Working JSFiddle here: <a href=\"http://jsfiddle.net/npvrx6sg/\" rel=\"nofollow\">http://jsfiddle.net/npvrx6sg/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any way to get the ID of the element that fires an event?</p>\n\n<p>I'm thinking something like:</p>\n\n<pre><code>&lt;html&gt;\n\n  &lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"starterkit/jquery.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      $(document).ready(function () {\n        $(\"a\").click(\n\n        function () {\n          var test = caller.id;\n          alert(test.val());\n        });\n      });\n    &lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;form class=\"item\" id=\"aaa\"&gt;\n      &lt;input class=\"title\"&gt;&lt;/input&gt;\n    &lt;/form&gt;\n    &lt;form class=\"item\" id=\"bbb\"&gt;\n      &lt;input class=\"title\"&gt;&lt;/input&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p>Except of course that the var <code>test</code> should contain the id <code>\"aaa\"</code>, if the event is fired from the first form, and <code>\"bbb\"</code>, if the event is fired from the second form.</p>\n",
            "last_activity_date": 1422656516,
            "question_id": 48239,
            "score": 399,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Getting the ID of the element that fired an event"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>I'm not sure about other ways to do it but here's how you do it in <a href=\"http://www.prototypejs.org/learn/json\">Prototype (JSON tutorial)</a>.</p>\n\n<pre><code>new Ajax.Request('/some_url', {\n  method:'get',\n  requestHeaders: {Accept: 'application/json'},\n  onSuccess: function(transport){\n    var json = transport.responseText.evalJSON(true);\n  }\n});\n</code></pre>\n\n<p>Calling <strong>evalJSON()</strong> with true as the argument sanitizes the incoming string.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><a href=\"http://json.org/\">JSON.org</a> has JSON parsers for many languages including 4 different ones for Javascript.  I believe most people would consider <a href=\"http://www.json.org/js.html\">json2.js</a> their goto implementation.</p>\n",
                    "is_accepted": false,
                    "score": 88
                },
                {
                    "body": "<p>JS Guru Douglas Crockford has written a parseJSON function which you <a href=\"http://socket7.net/article/how-to-safely-parse-json\" rel=\"nofollow\">download here</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're using jQuery, you can also just do <code>$.getJSON(url, function(data) { });</code></p>\n\n<p>Then you can do things like <code>data.key1.something</code>, <code>data.key1.something_else</code>, etc.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><code>$.ajax({\n  url: url,\n  dataType: 'json',\n  data: data,\n  success: callback\n});</code></p>\n\n<hr>\n\n<p>The callback is passed the returned data, which will be a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're using jQuery just use:</p>\n\n<p><code>jQuery.parseJSON( jsonString );</code></p>\n\n<p>It's exactly what you're looking for</p>\n\n<p><a href=\"http://api.jquery.com/jQuery.parseJSON/\">http://api.jquery.com/jQuery.parseJSON/</a></p>\n",
                    "is_accepted": false,
                    "score": 725
                },
                {
                    "body": "<p>I have successfully been using <a href=\"http://code.google.com/p/json-sans-eval/\" rel=\"nofollow\">json_sans_eval</a> for a while now. According to its author, it is more secure than json2.js.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>JSON.parse(jsonString);\n</code></pre>\n\n<p>Is a pure JavaScript approach so long as you can require a reasonably modern browser.</p>\n\n<p>See also <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse</a></p>\n",
                    "is_accepted": true,
                    "score": 396
                },
                {
                    "body": "<p>This seems to be the issue:</p>\n\n<p>An input is received, via ajax websocket etc, and it is always gonna be in String format - but you need to know if it is JSON.parsable. Touble is, that if you always run it through a JSON.parse, the program MAY continue 'successfully' but you'll still see an error thrown in the console with the dreaded \"Error: unexpected token 'x'\".</p>\n\n<p>Here's what I tend to do (but its very kludgy):</p>\n\n<pre><code>var data = (data[0] === '{' || data[0] === '[') ? JSON.parse(data) : data;\n</code></pre>\n\n<p>Any insight on a sure catch-all way without errors?</p>\n\n<p>ps. this is kludgy, don't up-vote.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>After months of dealing with this issue here and there, it seems the best approach is to use <code>try</code>/<code>catch()</code> and use your own error handling (even if initially its just a console log et cetera):</p>\n\n<pre><code>try {\n    JSON.parse(\"a\"); // Produces a SyntaxError\n} catch (error) {\n    // Handle the error\n    console.log(error.message);\n}\n</code></pre>\n\n<p>Unfortunately, there's not really elegant degradation for this that I'm aware of.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use simple code represented in the following <a href=\"http://msdn.microsoft.com/en-us/library/ie/cc836466%28v=vs.94%29.aspx\">link on MSDN</a>.</p>\n\n<pre><code>var jsontext = '{\"firstname\":\"Jesper\",\"surname\":\"Aaberg\",\"phone\":[\"555-0100\",\"555-0120\"]}';\nvar contact = JSON.parse(jsontext);\n</code></pre>\n\n<p>and reverse</p>\n\n<pre><code>var str = JSON.stringify(arr);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>If you want this method can be used on this way.Here Data object which you want ex:Data='{result:true,count:1}'</p>\n\n<pre><code>    try{\n\n        eval('var obj='+Data);\n        console.log(obj.count);\n\n    }catch(e){\n\n       console.log(e.message);\n    }\n</code></pre>\n\n<p>This method really helps in Nodejs If you are working with serial port programing </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The alternative solution is: jQuery.parseJSON( jsonString );</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The way using JavaScript Function Object:       </p>\n\n<pre><code> jsonObject = (new Function('return ' + jsonFormatData))()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found a \"better\" way:</p>\n\n<p>In CoffeeScript:</p>\n\n<pre><code>try data = JSON.parse(jqxhr.responseText)\ndata ||= { message: 'Server error, please retry' }\n</code></pre>\n\n<p>In Javascript:</p>\n\n<pre><code>var data;\n\ntry {\n  data = JSON.parse(jqxhr.responseText);\n} catch (_error) {}\n\ndata || (data = {\n  message: 'Server error, please retry'\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Given a string of JSON data, how can you safely turn that string into a JavaScript object?</p>\n\n<p>Obviously you can do this unsafely with something like...</p>\n\n<pre><code>var obj = eval(\"(\" + json + ')');\n</code></pre>\n\n<p>...but that leaves us vulnerable to the json string containing other code, which it seems very dangerous to simply eval.</p>\n",
            "last_activity_date": 1424266687,
            "question_id": 45015,
            "score": 356,
            "tags": [
                "javascript",
                "ajax",
                "json"
            ],
            "title": "Safely turning a JSON string into an object"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>There is the <code>beforeShowDay</code> option, which takes a function to be called for each date, returning true if the date is allowed or false if it is not.  From the docs:</p>\n\n<hr>\n\n<p><strong>beforeShowDay</strong> </p>\n\n<p>The function takes a date as a parameter and must return an array with [0] equal to true/false indicating whether or not this date is selectable and <a href=\"http://jqueryui.com/demos/datepicker/#event-beforeShowDay\">1</a> equal to a CSS class name(s) or '' for the default presentation. It is called for each day in the datepicker before is it displayed.</p>\n\n<p>Display some national holidays in the datepicker.</p>\n\n<pre><code>$(\".selector\").datepicker({ beforeShowDay: nationalDays})   \n\nnatDays = [\n  [1, 26, 'au'], [2, 6, 'nz'], [3, 17, 'ie'],\n  [4, 27, 'za'], [5, 25, 'ar'], [6, 6, 'se'],\n  [7, 4, 'us'], [8, 17, 'id'], [9, 7, 'br'],\n  [10, 1, 'cn'], [11, 22, 'lb'], [12, 12, 'ke']\n];\n\nfunction nationalDays(date) {\n    for (i = 0; i &lt; natDays.length; i++) {\n      if (date.getMonth() == natDays[i][0] - 1\n          &amp;&amp; date.getDate() == natDays[i][1]) {\n        return [false, natDays[i][2] + '_day'];\n      }\n    }\n  return [true, ''];\n}\n</code></pre>\n\n<p>One built in function exists, called noWeekends, that prevents the selection of weekend days.</p>\n\n<pre><code>$(\".selector\").datepicker({ beforeShowDay: $.datepicker.noWeekends })\n</code></pre>\n\n<hr>\n\n<p>To combine the two, you could do something like (assuming the <code>nationalDays</code> function from above):</p>\n\n<pre><code>$(\".selector\").datepicker({ beforeShowDay: noWeekendsOrHolidays})   \n\nfunction noWeekendsOrHolidays(date) {\n    var noWeekend = $.datepicker.noWeekends(date);\n    if (noWeekend[0]) {\n        return nationalDays(date);\n    } else {\n        return noWeekend;\n    }\n}\n</code></pre>\n\n<p><strong>Update</strong>: Note that as of jQuery UI 1.8.19, the <a href=\"http://jqueryui.com/demos/datepicker/#event-beforeShowDay\">beforeShowDay option</a> also accepts an optional third paremeter, a popup tooltip </p>\n",
                    "is_accepted": true,
                    "score": 191
                },
                {
                    "body": "<p>If you don't want the weekends to appear at all, simply:</p>\n\n<p>CSS</p>\n\n<pre><code>th.ui-datepicker-week-end,\ntd.ui-datepicker-week-end {\n    display: none;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>In this version, month, day, <em>and</em> year determines which days to block on the calendar.</p>\n\n<pre><code>$(document).ready(function (){\n  var d         = new Date();\n  var natDays   = [[1,1,2009],[1,1,2010],[12,31,2010],[1,19,2009]];\n\n  function nationalDays(date) {\n    var m = date.getMonth();\n    var d = date.getDate();\n    var y = date.getFullYear();\n\n    for (i = 0; i &lt; natDays.length; i++) {\n      if ((m == natDays[i][0] - 1) &amp;&amp; (d == natDays[i][1]) &amp;&amp; (y == natDays[i][2]))\n      {\n        return [false];\n      }\n    }\n    return [true];\n  }\n  function noWeekendsOrHolidays(date) {\n    var noWeekend = $.datepicker.noWeekends(date);\n      if (noWeekend[0]) {\n        return nationalDays(date);\n      } else {\n        return noWeekend;\n    }\n  }\n  $(function() { \n    $(\".datepicker\").datepicker({\n\n      minDate: new Date(d.getFullYear(), 1 - 1, 1),\n      maxDate: new Date(d.getFullYear()+1, 11, 31),\n\n      hideIfNoPrevNext: true,\n      beforeShowDay: noWeekendsOrHolidays,\n     });\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This version of code will make u to get the holiday dates from the sql database and disable the specified date in the UI Datepicker </p>\n\n<pre><code>\n$(document).ready(function (){\n  var holiDays = (function () {\n    var val = null;\n    $.ajax({\n        'async': false,\n        'global': false,\n        'url': 'getdate.php',\n        'success': function (data) {\n            val = data;\n        }\n    });\n    return val;\n    })();\n  var natDays = holiDays.split('');\n\n  function nationalDays(date) {\n    var m = date.getMonth();\n    var d = date.getDate();\n    var y = date.getFullYear();\n\n    for (var i = 0; i &lsquo; natDays.length-1; i++) {\n    var myDate = new Date(natDays[i]);\n      if ((m == (myDate.getMonth())) && (d == (myDate.getDate())) && (y == (myDate.getFullYear())))\n      {\n        return [false];\n      }\n    }\n    return [true];\n  }\n\n  function noWeekendsOrHolidays(date) {\n    var noWeekend = $.datepicker.noWeekends(date);\n      if (noWeekend[0]) {\n        return nationalDays(date);\n      } else {\n        return noWeekend;\n    }\n  }\n  $(function() { \n    $(\"#shipdate\").datepicker({\n      minDate: 0,\n      dateFormat: 'DD, d MM, yy',\n      beforeShowDay: noWeekendsOrHolidays,\n      showOn: 'button',\n      buttonImage: 'images/calendar.gif', \n      buttonImageOnly: true\n     });\n  });\n});\n</code></pre>\n\n<p>Create a Database in sql and put you holiday dates in MM/DD/YYYY format as Varchar\nPut the below contents in a file getdate.php </p>\n\n<pre><code>\n[php]\n$sql=\"SELECT dates FROM holidaydates\";\n$result = mysql_query($sql);\n$chkdate = $_POST['chkdate'];\n$str='';\nwhile($row = mysql_fetch_array($result))\n{\n$str .=$row[0].'';\n}\necho $str;\n[/php]\n</code></pre>\n\n<p>Happy Coding !!!! :-)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>These answers were very helpful. Thank you.</p>\n\n<p>My contribution below adds an array where multiple days can return false (we're closed every Tuesday, Wednesday and Thursday). And I bundled the specific dates plus years and the no-weekends functions.</p>\n\n<p>If you want weekends off, add [Saturday], [Sunday] to the closedDays array.</p>\n\n<pre><code>$(document).ready(function(){\n\n    $(\"#datepicker\").datepicker({\n        beforeShowDay: nonWorkingDates,\n        numberOfMonths: 1,\n        minDate: '05/01/09',\n        maxDate: '+2M',\n        firstDay: 1\n    });\n\n    function nonWorkingDates(date){\n        var day = date.getDay(), Sunday = 0, Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5, Saturday = 6;\n        var closedDates = [[7, 29, 2009], [8, 25, 2010]];\n        var closedDays = [[Monday], [Tuesday]];\n        for (var i = 0; i &lt; closedDays.length; i++) {\n            if (day == closedDays[i][0]) {\n                return [false];\n            }\n\n        }\n\n        for (i = 0; i &lt; closedDates.length; i++) {\n            if (date.getMonth() == closedDates[i][0] - 1 &amp;&amp;\n            date.getDate() == closedDates[i][1] &amp;&amp;\n            date.getFullYear() == closedDates[i][2]) {\n                return [false];\n            }\n        }\n\n        return [true];\n    }\n\n\n\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<pre><code>$(\"#selector\").datepicker({ beforeShowDay: highlightDays });\n\n...\n\nvar dates = [new Date(\"1/1/2011\"), new Date(\"1/2/2011\")];\n\nfunction highlightDays(date) {\n\n    for (var i = 0; i &lt; dates.length; i++) {\n        if (date - dates[i] == 0) {\n            return [true,'', 'TOOLTIP'];\n        }\n    }\n    return [false];\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The solution here that everyone likes seems to very intense... personally I think it's much easier to do something like this:</p>\n\n<pre><code>       var holidays = [\"12/24/2012\", \"12/25/2012\", \"1/1/2013\", \n            \"5/27/2013\", \"7/4/2013\", \"9/2/2013\", \"11/28/2013\", \n            \"11/29/2013\", \"12/24/2013\", \"12/25/2013\"];\n\n       $( \"#requestShipDate\" ).datepicker({\n            beforeShowDay: function(date){\n                show = true;\n                if(date.getDay() == 0 || date.getDay() == 6){show = false;}//No Weekends\n                for (var i = 0; i &lt; holidays.length; i++) {\n                    if (new Date(holidays[i]).toString() == date.toString()) {show = false;}//No Holidays\n                }\n                var display = [show,'',(show)?'':'No Weekends or Holidays'];//With Fancy hover tooltip!\n                return display;\n            }\n        });\n</code></pre>\n\n<p>This way your dates are human readable.  It's not really that different it just makes more sense to me this way.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The datepicker has this functionality built in!</p>\n\n<pre><code>$( \"#datepicker\" ).datepicker({\n  beforeShowDay: $.datepicker.noWeekends\n});\n</code></pre>\n\n<p><a href=\"http://api.jqueryui.com/datepicker/#utility-noWeekends\">http://api.jqueryui.com/datepicker/#utility-noWeekends</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I use a datepicker for choosing an appointment day.  I already set the date range to be only for the next month.  That works fine.  I want to exclude Saturdays and Sundays from the available choices.  Can this be done?  If so, how?</p>\n",
            "last_activity_date": 1392011851,
            "question_id": 501943,
            "score": 138,
            "tags": [
                "javascript",
                "jquery",
                "jquery-ui",
                "jquery-ui-datepicker"
            ],
            "title": "Can the jQuery UI Datepicker be made to disable Saturdays and Sundays (and holidays)?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>how about</p>\n\n<pre><code>try {\n   alert(test.level1.level2.level3)\n} catch(e) {\n ...whatever\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You have to do it step by step if you don't want a <code>TypeError</code>, because if one of the members is <code>null</code> or <code>undefined</code>, and you try to access a member an exception will be thrown.</p>\n\n<p>You can either simply <code>catch</code> the exception, or make a function to test the existence of multiple levels, something like this:</p>\n\n<pre><code>function checkNested(obj /*, level1, level2, ... levelN*/) {\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  for (var i = 0; i &lt; args.length; i++) {\n    if (!obj || !obj.hasOwnProperty(args[i])) {\n      return false;\n    }\n    obj = obj[args[i]];\n  }\n  return true;\n}\n\nvar test = {level1:{level2:{level3:'level3'}} };\n\ncheckNested(test, 'level1', 'level2', 'level3'); // true\ncheckNested(test, 'level1', 'level2', 'foo'); // false\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 71
                },
                {
                    "body": "<p>You can read an object property at any depth, if you handle the name like a string: <code>'t.level1.level2.level3'</code>.</p>\n\n<pre><code>window.t={level1:{level2:{level3: 'level3'}}};\n\nfunction deeptest(s){\n    s= s.split('.')\n    var obj= window[s.shift()];\n    while(obj &amp;&amp; s.length) obj= obj[s.shift()];\n    return obj;\n}\n\nalert(deeptest('t.level1.level2.level3') || 'Undefined');\n</code></pre>\n\n<p>It returns <code>undefined</code> if any of the segments is <code>undefined</code>.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I automated the process</p>\n\n<pre><code>if(isset(object,[\"prop1\",\"prop2\"])){\n// YES!\n\n}\n\nfunction isset(object, props){\n    var dump;\n    try {\n        for(var x in props){\n            if(x == 0) {\n                dump = object[props[x]];\n                return;\n            }\n            dump = dump[props[x]];\n        }\n    } catch(e) {\n        return false;\n    }\n\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a pattern I <a href=\"http://blog.osteele.com/posts/2007/12/cheap-monads/\">picked up from Oliver Steele</a>:</p>\n\n<pre><code>var level3 = (((test || {}).level1 || {}).level2 || {}).level3;\nalert( level3 );\n</code></pre>\n\n<p>In fact that whole article is a discussion of how you can do this in javascript. He settles on using the above syntax (which isn't that hard to read once you get used to it) as an idiom.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>One simple way is this:</p>\n\n<pre><code>try {\n    alert(test.level1.level2.level3);\n} catch(e) {\n    alert(\"undefined\");    // this is optional to put any output here\n}\n</code></pre>\n\n<p>The <code>try/catch</code> catches the cases for when any of the higher level objects such as test, test.level1, test.level1.level2 are not defined.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>A shorter, ES5 version of @CMS's excellent answer:</p>\n\n<pre><code>// Check the obj has the keys in the order mentioned. Used for checking JSON results.  \nvar checkObjHasKeys = function(obj, keys) {\n  var success = true;\n  keys.forEach( function(key) {\n    if ( ! obj.hasOwnProperty(key)) {\n      success = false;\n    }\n    obj = obj[key];\n  })\n  return success;\n}\n</code></pre>\n\n<p>With a similar test:</p>\n\n<pre><code>var test = { level1:{level2:{level3:'result'}}};\nutils.checkObjHasKeys(test, ['level1', 'level2', 'level3']); // true\nutils.checkObjHasKeys(test, ['level1', 'level2', 'foo']); // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another ES5 solution:</p>\n\n<pre><code>function hasProperties(object, properties) {\n    return !properties.some(function(property){\n        if (!object.hasOwnProperty(property)) {\n            return true;\n        }\n        object = object[property];\n        return false;\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just wrote this function today which does a deep search for a property in a nested object and returns the value at the property if found.</p>\n\n<pre><code>/**\n * Performs a deep search looking for the existence of a property in a \n * nested object. Supports namespaced search: Passing a string with\n * a parent sub-object where the property key may exist speeds up\n * search, for instance: Say you have a nested object and you know for \n * certain the property/literal you're looking for is within a certain\n * sub-object, you can speed the search up by passing \"level2Obj.targetProp\"\n * @param {object} obj Object to search\n * @param {object} key Key to search for\n * @return {*} Returns the value (if any) located at the key\n */\nvar getPropByKey = function( obj, key ) {\n    var ret = false, ns = key.split(\".\"),\n        args = arguments,\n        alen = args.length;\n\n    // Search starting with provided namespace\n    if ( ns.length &gt; 1 ) {\n        obj = (libName).getPropByKey( obj, ns[0] );\n        key = ns[1];\n    }\n\n    // Look for a property in the object\n    if ( key in obj ) {\n        return obj[key];\n    } else {\n        for ( var o in obj ) {\n            if ( (libName).isPlainObject( obj[o] ) ) {\n                ret = (libName).getPropByKey( obj[o], key );\n                if ( ret === 0 || ret === undefined || ret ) {\n                    return ret;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My solution that I use since long time (using string unfortunaly, couldn't find better)</p>\n\n<pre><code>function get_if_exist(str){\n    try{return eval(str)}\n    catch(e){return undefined}\n}\n\n// way to use\nif(get_if_exist('test.level1.level2.level3')) {\n    alert(test.level1.level2.level3);\n}\n\n// or simply \nalert(get_if_exist('test.level1.level2.level3'));\n</code></pre>\n\n<p>edit: this work only if object \"test\" have global scope/range.\nelse you have to do something like : </p>\n\n<pre><code>// i think it's the most beautiful code I have ever write :p\nfunction get_if_exist(obj){\n    return arguments.length==1 || (obj[arguments[1]] &amp;&amp; get_if_exist.apply(this,[obj[arguments[1]]].concat([].slice.call(arguments,2))));\n}\n\nalert(get_if_exist(test,'level1','level2','level3'));\n</code></pre>\n\n<p>edit final version to allow 2 method of call :</p>\n\n<pre><code>function get_if_exist(obj){\n    var a=arguments, b=a.callee; // replace a.callee by the function name you choose because callee is depreceate, in this case : get_if_exist\n    // version 1 calling the version 2\n    if(a[1] &amp;&amp; ~a[1].indexOf('.')) \n        return b.apply(this,[obj].concat(a[1].split('.')));\n    // version 2\n    return a.length==1 ? a[0] : (obj[a[1]] &amp;&amp; b.apply(this,[obj[a[1]]].concat([].slice.call(a,2))));\n}\n\n// method 1\nget_if_exist(test,'level1.level2.level3');\n\n\n// method 2\nget_if_exist(test,'level1','level2','level3');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>theres a function <a href=\"http://thecodeabode.blogspot.com.au/2013/04/javascript-safely-reading-nested.html\" rel=\"nofollow\">here on thecodeabode (safeRead)</a> which will do this in a safe manner... i.e.</p>\n\n<pre><code>safeRead(test, 'level1', 'level2', 'level3');\n</code></pre>\n\n<p>if any property is null or undefined, an empty string is returned</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The answer given by CMS works fine with the following modification for null checks as well</p>\n\n<pre><code>function checkNested(obj /*, level1, level2, ... levelN*/) \n      {\n             var args = Array.prototype.slice.call(arguments),\n             obj = args.shift();\n\n            for (var i = 0; i &lt; args.length; i++) \n            {\n                if (obj == null || !obj.hasOwnProperty(args[i]) ) \n                {\n                    return false;\n                }\n                obj = obj[args[i]];\n            }\n            return true;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on <a href=\"http://stackoverflow.com/questions/2631001/javascript-test-for-existence-of-nested-object-key#answer-2631198\">a previous comment</a>, here is another version where the main object could not be defined either:</p>\n\n<pre><code>// Supposing that our property is at first.second.third.property:\nvar property = (((typeof first !== 'undefined' ? first : {}).second || {}).third || {}).property;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another option (close to <a href=\"http://stackoverflow.com/a/15344767/1636522\">this answer</a>) :</p>\n\n<pre><code>function resolve(root, path){\n    try {\n        return (new Function(\n            'root', 'return root.' + path + ';'\n        ))(root);\n    } catch (e) {}\n}\n\nvar tree = { level1: [{ key: 'value' }] };\nresolve(tree, 'level1[0].key'); // \"value\"\nresolve(tree, 'level1[1].key'); // undefined\n</code></pre>\n\n<p>More on this : <a href=\"http://stackoverflow.com/a/18381564/1636522\">http://stackoverflow.com/a/18381564/1636522</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Following options were elaborated starting from <a href=\"http://stackoverflow.com/a/4034468/1636522\">this answer</a>. Same tree for both : </p>\n\n<pre><code>var o = { a: { b: { c: 1 } } };\n</code></pre>\n\n<hr>\n\n<h2>Stop searching when undefined</h2>\n\n<pre><code>var u = undefined;\no.a ? o.a.b ? o.a.b.c : u : u // 1\no.x ? o.x.y ? o.x.y.z : u : u // undefined\n(o = o.a) ? (o = o.b) ? o.c : u : u // 1\n</code></pre>\n\n<hr>\n\n<h2>Ensure each level one by one</h2>\n\n<pre><code>var $ = function (empty) {\n    return function (node) {\n        return node || empty;\n    };\n}({});\n\n$($(o.a).b).c // 1\n$($(o.x).y).z // undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I tried a recursive approach:</p>\n\n<pre><code>function objHasKeys(obj, keys) {\n  var next = keys.shift();\n  return obj[next] &amp;&amp; (! keys.length || objHasKeys(obj[next], keys));\n}\n</code></pre>\n\n<p>The <code>! keys.length ||</code> kicks out of the recursion so it doesn't run the function with no keys left to test.  Tests:</p>\n\n<pre><code>obj = {\n  path: {\n    to: {\n      the: {\n        goodKey: \"hello\"\n      }\n    }\n  }\n}\n\nconsole.log(objHasKeys(obj, ['path', 'to', 'the', 'goodKey'])); // true\nconsole.log(objHasKeys(obj, ['path', 'to', 'the', 'badKey']));  // undefined\n</code></pre>\n\n<p>I am using it to print a friendly html view of a bunch of objects with unknown key/values, e.g.:</p>\n\n<pre><code>var biosName = objHasKeys(myObj, 'MachineInfo:BiosInfo:Name'.split(':'))\n             ? myObj.MachineInfo.BiosInfo.Name\n             : 'unknown';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"http://lodash.com/\">lodash</a> users may enjoy <a href=\"https://github.com/Empeeric/lodash-contrib\">lodash.contrib</a> which has a <a href=\"https://github.com/Empeeric/lodash-contrib/blob/master/docs/_.object.selectors.js.md#getpath\">couple methods that mitigate this problem</a>.</p>\n\n<h1>getPath</h1>\n\n<p><strong>Signature:</strong> <code>_.getPath(obj:Object, ks:String|Array)</code></p>\n\n<p>Gets the value at any depth in a nested object based on the path described by\nthe keys given. Keys may be given as an array or as a dot-separated string.\nReturns <code>undefined</code> if the path cannot be reached.</p>\n\n<pre><code>var countries = {\n        greece: {\n            athens: {\n                playwright:  \"Sophocles\"\n            }\n        }\n    }\n};\n\n_.getPath(countries, \"greece.athens.playwright\");\n// =&gt; \"Sophocles\"\n\n_.getPath(countries, \"greece.sparta.playwright\");\n// =&gt; undefined\n\n_.getPath(countries, [\"greece\", \"athens\", \"playwright\"]);\n// =&gt; \"Sophocles\"\n\n_.getPath(countries, [\"greece\", \"sparta\", \"playwright\"]);\n// =&gt; undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Yet another version:</p>\n\n<pre><code>function nestedPropertyExists(obj, props) {\n    var prop = props.shift();\n    return prop === undefined\n        ? true\n        : obj.hasOwnProperty(prop) ? nestedPropertyExists(obj[prop], props) : false;\n}\n\nnestedPropertyExists({a:{b:{c:1}}}, ['a','b','c']); // returns true\nnestedPropertyExists({a:{b:{c:1}}}, ['a','b','c','d']); // returns false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var a;\n\na = {\n    b: {\n        c: 'd'\n    }\n};\n\nfunction isset (fn) {\n    var value;\n    try {\n        value = fn();\n    } catch (e) {\n        value = undefined;\n    } finally {\n        return value !== undefined;\n    }\n};\n\n// ES5\nconsole.log(\n    isset(function () { return a.b.c; }),\n    isset(function () { return a.b.c.d.e.f; })\n);\n</code></pre>\n\n<p>If you are coding in ES6 environment (or using <a href=\"https://github.com/6to5/6to5\" rel=\"nofollow\">6to5</a>) then you can take advantage of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"nofollow\">arrow function</a> syntax:</p>\n\n<pre><code>// ES6 using the arrow function\nconsole.log(\n    isset(() =&gt; a.b.c),\n    isset(() =&gt; a.b.c.d.e.f)\n);\n</code></pre>\n\n<p>Regarding the performance, there is no performance penalty for using try..catch block if the property is set. There is a performance impact if the property is unset.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wrote a <a href=\"https://github.com/nicholascloud/l33teral\" rel=\"nofollow\">library called l33teral to help test for nested properties</a>. You can use it like this:</p>\n\n<pre><code>var myObj = {/*...*/};\nvar hasNestedProperties = leet(myObj).probe('prop1.prop2.prop3');\n</code></pre>\n\n<p>I do like the ES5/6 solutions here, too.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is my solution. It will work for the most of the cases because it check if the property has nested properties in it.</p>\n\n<pre><code>var arr = [\"prop1\", \"prop2\", \"prop3\", \"prop3.prop4\", \"prop5\"];\n\n  function checkIfObjectHasGivenProperies(obj, arr) {\n                var i = 0, length = arr.length, arrElem = null;\n                for (; i &lt; length; i++) {\n                    arrElem = arr[i].split(\".\");\n                    if (Array.isArray(arrElem) &amp;&amp; arrElem.length &gt; 1) {\n                        if (!checkIfObjectHasGivenProperies(obj[arrElem[0]], [arrElem.slice(1, arrElem.length).join(\".\")])) {\n                            return false;\n                        }\n                    } else {\n                        if (!obj || !obj.hasOwnProperty(arrElem[0])) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function isIn(string, object){\n    var arr = string.split(\".\");\n    var notFound = true;\n    var length = arr.length;\n    for (var i = 0; i &lt; length; i++){\n        var key = arr[i];\n        if (!object.hasOwnProperty(key)){\n            notFound = false;\n            break;\n        }\n        if ((i + length) &lt;= length){\n            object = object[key];\n        }\n    }\n    return notFound;\n}\nvar musicCollection = {\n    hasslehoff: {\n        greatestHits : true\n    }\n};\nconsole.log(isIn(\"hasslehoff.greatestHits\", musicCollection));\nconsole.log(isIn(\"hasslehoff.worseHits\", musicCollection));\n</code></pre>\n\n<p>here my String based delimiter version.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If I have a reference to an object - </p>\n\n<pre><code>var test = {};\n</code></pre>\n\n<p>that will potentially (but not immediately) have nested objects, something like - </p>\n\n<pre><code>{ level1:{level2:{level3:'level3'}} };\n</code></pre>\n\n<p>what is the best way to test for the existence of keys in the most deeply nested objects?</p>\n\n<p>This - </p>\n\n<pre><code>alert(test.level1);\n</code></pre>\n\n<p>returns 'undefined', but this - </p>\n\n<pre><code>alert(test.level1.level2.level3);\n</code></pre>\n\n<p>fails.</p>\n\n<p>I'm currently doing something like this - </p>\n\n<pre><code>if(test.level1 &amp;&amp; test.level1.level2 &amp;&amp; test.level1.level2.level3) {\n    alert(test.level1.level2.level3);\n}\n</code></pre>\n\n<p>but I was wondering if there's a better way.</p>\n",
            "last_activity_date": 1424365157,
            "question_id": 2631001,
            "score": 91,
            "tags": [
                "javascript",
                "object",
                "nested",
                "testing"
            ],
            "title": "javascript test for existence of nested object key"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Set the type on your buttons:</p>\n\n<pre><code>&lt;button type=\"button\" onclick=\"addItem(); return false;\"&gt;Add Item&lt;/button&gt;\n&lt;button type=\"button\" onclick=\"removeItem(); return false;\"&gt;Remove Last Item&lt;/button&gt;\n</code></pre>\n\n<p>...that'll keep them from triggering a submit action when an exception occurs in the event handler. Then, fix your <code>removeItem()</code> function so that it doesn't trigger an exception:</p>\n\n<pre><code>function removeItem() {\n  var rows = $('form tr');\n  if ( rows.length &gt; 2 ) {\n    // change: work on filtered jQuery object\n    rows.filter(\":last\").html('');\n    $('form :hidden:last').val('');\n  } else {\n    alert('Cannot remove any more rows');\n  }\n}\n</code></pre>\n\n<p>Note the change: your original code extracted a HTML element from the jQuery set, and then tried to call a jQuery method on it - this threw an exception, resulting in the default behavior for the button.</p>\n\n<p>FWIW, there's another way you could go with this... Wire up your event handlers using jQuery, and use the <a href=\"http://docs.jquery.com/Events/jQuery.Event#event.preventDefault.28.29\">preventDefault()</a> method on jQuery's <a href=\"http://docs.jquery.com/Events/jQuery.Event\">event</a> object to cancel the default behavior up-front:</p>\n\n<pre><code>$(function() // execute once the DOM has loaded\n{\n\n  // wire up Add Item button click event\n  $(\"#AddItem\").click(function(event)\n  {\n    event.preventDefault(); // cancel default behavior\n\n    //... rest of add logic\n  });\n\n  // wire up Remove Last Item button click event\n  $(\"RemoveLastItem\").click(function(event)\n  {\n    event.preventDefault(); // cancel default behavior\n\n    //... rest of remove last logic\n  });\n\n});\n\n...\n\n&lt;button type=\"button\" id=\"AddItem\" name=\"AddItem\"&gt;Add Item&lt;/button&gt;\n&lt;button type=\"button\" id=\"RemoveLastItem\" name=\"RemoveLastItem\"&gt;Remove Last Item&lt;/button&gt;\n</code></pre>\n\n<p>This technique keeps all of your logic in one place, making it easier to debug... it also allows you to implement a fall-back by changing the <code>type</code> on the buttons back to <code>submit</code> and handling the event server-side - this is known as <a href=\"http://en.wikipedia.org/wiki/Unobtrusive%5FJavaScript\">unobtrusive JavaScript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 345
                },
                {
                    "body": "<p>I am sure that on FF the </p>\n\n<pre><code>removeItem\n</code></pre>\n\n<p>function encounter a JavaScript error, this not happend on IE</p>\n\n<p>When javascript error appear the \"return false\" code won't run, making the page to postback</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I agree with Shog9, though I might instead use:</p>\n\n<pre><code>&lt;input type = \"button\" onClick=\"addItem(); return false;\" value=\"Add Item\" /&gt;\n</code></pre>\n\n<p><a href=\"http://www.w3schools.com/TAGS/tag%5Fbutton.asp\">According to w3schools</a>, the <code>&lt;button&gt;</code> tag has different behavior on different browsers.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>The function removeItem actually contains an error, which makes the form button do it's default behaviour (submitting the form). The javascript error console will usually give a pointer in this case.</p>\n\n<p>Check out the function removeItem in the javascript part:</p>\n\n<p>The line:</p>\n\n<pre><code>rows[rows.length-1].html('');\n</code></pre>\n\n<p>doesn't work. Try this instead:</p>\n\n<pre><code>rows.eq(rows.length-1).html('');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm not able to test this right now, but I would think you could use jQuery's <a href=\"http://docs.jquery.com/Events/jQuery.Event#event.preventDefault.28.29\" rel=\"nofollow\">preventDefault</a> method.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Sometime ago I needed something very similar... and I got it.</p>\n\n<p>So what I put here is how I do the tricks to have a form able to be submitted by JavaScript without any validating and execute validation only when the user presses a button (typically a send button).</p>\n\n<p>For the example I will use a minimal form, only with two fields and a submit button.</p>\n\n<p>Remember what is wanted:\nFrom JavaScript it must be able to be submitted without any checking. However, if the user presses such a button, the validation must be done and form sent only if pass the validation.</p>\n\n<p>Normally all would start from something near this (I removed all extra stuff not important):</p>\n\n<pre><code>&lt;form method=\"post\" id=\"theFormID\" name=\"theFormID\" action=\"\"&gt;\n   &lt;input type=\"text\" id=\"Field1\" name=\"Field1\" /&gt;\n   &lt;input type=\"text\" id=\"Field2\" name=\"Field2\" /&gt;\n   &lt;input type=\"submit\" value=\"Send\" onclick=\"JavaScript:return Validator();\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>See how form tag has no <code>onsubmit=\"...\"</code> (remember it was a condition not to have it).</p>\n\n<p>The problem is that the form is always submitted, no matter if <code>onclick</code> returns <code>true</code> or <code>false</code>.</p>\n\n<p>If I change <code>type=\"submit\"</code> for <code>type=\"button\"</code>, it seems to work but does not. It never sends the form, but that can be done easily.</p>\n\n<p>So finally I used this:</p>\n\n<pre><code>&lt;form method=\"post\" id=\"theFormID\" name=\"theFormID\" action=\"\"&gt;\n   &lt;input type=\"text\" id=\"Field1\" name=\"Field1\" /&gt;\n   &lt;input type=\"text\" id=\"Field2\" name=\"Field2\" /&gt;\n   &lt;input type=\"button\" value=\"Send\" onclick=\"JavaScript:return Validator();\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>And on <code>function Validator</code>, where <code>return True;</code> is, I also add a JavaScript submit sentence, something similar to this:</p>\n\n<pre><code>function Validator(){\n   //  ...bla bla bla... the checks\n   if(                              ){\n      document.getElementById('theFormID').submit();\n      return(true);\n   }else{\n      return(false);\n   }\n}\n</code></pre>\n\n<p>The <code>id=\"\"</code> is just for JavaScript <code>getElementById</code>, the <code>name=\"\"</code> is just for it to appear on POST data.</p>\n\n<p>On such way it works as I need.</p>\n\n<p>I put this just for people that need no <code>onsubmit</code> function on the form, but make some validation when a button is press by user.</p>\n\n<p>Why I need no onsubmit on form tag? Easy, on other JavaScript parts I need to perform a submit but I do not want there to be any validation.</p>\n\n<p>The reason: If user is the one that performs the submit I want and need the validation to be done, but if it is JavaScript sometimes I need to perform the submit while such validations would avoid it.</p>\n\n<p>It may sounds strange, but not when thinking for example: on a Login ... with some restrictions... like not allow to be used PHP sessions and neither cookies are allowed!</p>\n\n<p>So any link must be converted to such form submit, so the login data is not lost.\nWhen no login is yet done, it must also work. So no validation must be performed on links.\nBut I want to present a message to the user if the user has not entered both fields, user and pass. So if one is missing, the form must not be sent! there is the problem.</p>\n\n<p>See the problem: the form must not be sent when one field is empty only if the user has pressed a button, if it is a JavaScript code it must be able to be sent.</p>\n\n<p>If I do the work on <code>onsubmit</code> on the form tag, I would need to know if it is the user or other JavaScript. Since no parameters can be passed, it is not possible directly, so some people add a variable to tell if validation must be done or not. First thing on validation function is to check that variable value, etc... Too complicated and code does not say what is really wanted.</p>\n\n<p>So the solution is not to have onsubmit on the form tag. Insead put it where it really is needed, on the button.</p>\n\n<p>For the other side, why put onsubmit code since conceptually I do not want onsubmit validation. I really want button validation.</p>\n\n<p>Not only the code is more clear, it is where it must be. Just remember this:\n- I do not want JavaScript to validate the form (that must be always done by PHP on the server side)\n- I want to show to the user a message telling all fields must not be empty, that needs JavaScript (client side)</p>\n\n<p>So why some people (think or tell me) it must be done on an onsumbit validation? No, conceptually I am not doing a onsumbit validating at client side. I am just doing something on a button get pressed, so why not just let that to be implemented?</p>\n\n<p>Well that code and style does the trick perfectly.  On any JavaScript that I need to send the form I just put:</p>\n\n<pre><code>document.getElementById('theFormID').action='./GoToThisPage.php'; // Where to go\ndocument.getElementById('theFormID').submit(); // Send POST data and go there\n</code></pre>\n\n<p>And that skips validation when I do not need it. It just sends the form and loads a different page, etc.</p>\n\n<p>But if the user clicks the submit button (aka <code>type=\"button\"</code> not <code>type=\"submit\"</code>) the validation is done before letting the form be submitted and if not valid not sent.</p>\n\n<p>Well hope this helps others not to try long and complicated code. Just not use <code>onsubmit</code> if not needed, and use <code>onclick</code>. But just remember to change <code>type=\"submit\"</code> to <code>type=\"button\"</code> and please do not forget to do the <code>submit()</code> by JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>You're using an HTML5 button element. Remember the reason it's this button has as default behavior a submit type, as stated in the W3 Specification as seen here:\n<a href=\"http://dev.w3.org/html5/markup/button.html\">W3C HTML5 Button</a></p>\n\n<p>So you need to specify it's type explicitly:</p>\n\n<pre><code>&lt;button type=\"button\"&gt;Button&lt;/button&gt;\n</code></pre>\n\n<p>in order to override the default submit type. I just want to point out the reason why this happens =)</p>\n\n<p>=)</p>\n",
                    "is_accepted": false,
                    "score": 266
                },
                {
                    "body": "<p><code>$(\"form\").submit(function () { return false; });</code> \nthat will prevent the button from submitting or you can just change the button type to \"button\" <code>&lt;input type=\"button\"/&gt;</code> instead of <code>&lt;input type=\"submit\"/&gt;</code>\nWhich will only work if this button isn't the only button in this form.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Set the type of button on your buttons:</p>\n\n<p><code>&lt;button type=\"button\" onclick=\"addItem(); return false;\"&gt;Add Item&lt;/button&gt;</code></p>\n\n<p><code>&lt;button type=\"button\" onclick=\"removeItem(); return false;\"&gt;Remove Last Item&lt;/button&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a simple approach:</p>\n\n<pre><code>$('.mybutton').click(function(){\n\n    /* Perform some button action ... */\n    alert(\"I don't like it when you press my button!\");\n\n    /* Then, the most important part ... */\n    return false;\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is an html5 error like has been said, you can still have the button as a submit (if you want to cover both javascript and non javascript users) using it like:</p>\n\n<pre><code>     &lt;button type=\"submit\" onclick=\"return false\"&gt; Register &lt;/button&gt;\n</code></pre>\n\n<p>This way you will cancel the submit but still do whatever you are doing in jquery or javascript function`s and do the submit for users who dont have javascript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>return false;\n</code></pre>\n\n<p>You can return false at the end of the function or after the function call. </p>\n\n<p>Just as long as it's the last thing that happens, the form will not submit.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In the following page, with Firefox the remove button submits the form, but the add button doesn't.  How do I prevent the remove button from submitting the form?</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\" src=\"jquery-1.3.2.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction addItem() {\n  var v = $('form :hidden:last').attr('name');\n  var n = /(.*)input/.exec(v);\n  var newPrefix;\n  if ( n[1].length == 0 ) {\n    newPrefix = '1';\n  } else {\n    newPrefix = parseInt(n[1])+1;\n  }\n  var oldElem = $('form tr:last');\n  var newElem = oldElem.clone(true);\n  var lastHidden = $('form :hidden:last');\n  lastHidden.val(newPrefix);\n  var pat = '=\\\"'+n[1]+'input';\n  newElem.html(newElem.html().replace(new RegExp(pat, 'g'), '=\\\"'+newPrefix+'input'));\n  newElem.appendTo('table');\n  $('form :hidden:last').val('');\n}\nfunction removeItem() {\n  var rows = $('form tr');\n  if ( rows.length &gt; 2 ) {\n    rows[rows.length-1].html('');\n    $('form :hidden:last').val('');\n  } else {\n    alert('Cannot remove any more rows');\n  }\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form autocomplete=\"off\" method=\"post\" action=\"\"&gt;\n&lt;p&gt;Title:&lt;input type=\"text\" /&gt;&lt;/p&gt;\n&lt;button onclick=\"addItem(); return false;\"&gt;Add Item&lt;/button&gt;\n&lt;button onclick=\"removeItem(); return false;\"&gt;Remove Last Item&lt;/button&gt;\n&lt;table&gt;\n&lt;th&gt;Name&lt;/th&gt;\n\n&lt;tr&gt;\n  &lt;td&gt;&lt;input type=\"text\" id=\"input1\" name=\"input1\" /&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;input type=\"hidden\" id=\"input2\" name=\"input2\" /&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;input id=\"submit\" type=\"submit\" name=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1406078624,
            "question_id": 932653,
            "score": 225,
            "tags": [
                "javascript",
                "html",
                "forms",
                "button",
                "submit"
            ],
            "title": "How to prevent buttons from submitting forms"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>There's already an Actionscript 3.0 open source library that can generate PDF's 100% client side. </p>\n\n<p><a href=\"http://alivepdf.bytearray.org/\" rel=\"nofollow\">http://alivepdf.bytearray.org/</a></p>\n\n<p>In theory, it should be possible to do it in Javascript too, I think, but it seems rather complex.</p>\n\n<p>If requiring flash is acceptable, you could probably write some glue AS code to take data from JS (sending it as JSON, for instance), and use the library to generate the PDF. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Even if you could generate the PDF in-memory in JavaScript, you would still have the issue of how to transfer that data to the user. It's hard for JavaScript to just push a file at the user.</p>\n\n<p>To get the file to the user, you would want to do a server submit in order to get the browser to bring up the save dialog.</p>\n\n<p>With that said, it really isn't too hard to generate PDFs. Just read the spec.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I've just written a library called <a href=\"https://github.com/MrRio/jsPDF\">jsPDF</a> which generates PDFs using Javascript alone. It's still very young, and I'll be adding features and bug fixes soon. Also got a few ideas for workarounds in browsers that do not support Data URIs. It's licensed under a liberal MIT license. </p>\n\n<p>I came across this question before I started writing it and thought I'd come back and let you know :)</p>\n\n<p><a href=\"https://github.com/MrRio/jsPDF\">Generate PDFs in Javascript</a></p>\n",
                    "is_accepted": true,
                    "score": 156
                },
                {
                    "body": "<p>Another javascript library worth mentioning is <strong>pdfmake</strong>.</p>\n\n<ul>\n<li><a href=\"http://pdfmake.org/playground.html\">pdfmake playground</a></li>\n<li><a href=\"https://github.com/bpampuch/pdfmake\">pdfmake on github</a></li>\n</ul>\n\n<p>The browser support does not appear to be as strong as jsPDF, nor does there seem to be an option for shapes, but the options for formatting text are more advanced then the options currently available in jsPDF.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I maintain <a href=\"http://github.com/devongovett/pdfkit\" rel=\"nofollow\">PDFKit</a>, which also powers pdfmake (already mentioned here). It works in both Node and the browser, and supports a bunch of stuff that other libraries do not:</p>\n\n<ul>\n<li>Embedding subsetted fonts, with support for unicode.</li>\n<li>Lots of advanced text layout stuff (columns, page breaking, full unicode line breaking, basic rich text, etc.).</li>\n<li>Working on even more font stuff for advanced typography (OpenType/AAT ligatures, contextual substitution, etc.). Coming soon: see the fontkit branch if you're interested.</li>\n<li>More graphics stuff: gradients, etc.</li>\n<li>Built with modern tools like browserify and streams. Usable both in the browser and node.</li>\n</ul>\n\n<p>Check out <a href=\"http://pdfkit.org/\" rel=\"nofollow\">http://pdfkit.org/</a> for a full tutorial to see for yourself what PDFKit can do. And for an example of what kinds of documents can be produced, check out the docs as a PDF <a href=\"https://github.com/devongovett/pdfkit/blob/master/docs/generate.coffee\" rel=\"nofollow\">generated</a> from some Markdown files using PDFKit itself: <a href=\"http://pdfkit.org/docs/guide.pdf\" rel=\"nofollow\">http://pdfkit.org/docs/guide.pdf</a>.</p>\n\n<p>You can also try it out interactively in the browser here: <a href=\"http://pdfkit.org/demo/browser.html\" rel=\"nofollow\">http://pdfkit.org/demo/browser.html</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to convert XML data into PDF files from a web page and I was hoping I could do this entirely within Javascript. I need to be able to draw text, images and simple shapes. I would love to be able to do this entirely in the browser.</p>\n",
            "last_activity_date": 1423107312,
            "question_id": 742271,
            "score": 68,
            "tags": [
                "javascript",
                "pdf",
                "pdf-generation"
            ],
            "title": "Generating PDF files with Javascript"
        },
        {
            "answer_count": 30,
            "answers": [
                {
                    "body": "<p>You could use a <a href=\"http://jsclass.jcoglan.com/set.html\">Set</a> in this case. It is optimized for this kind of operation (union, intersection, difference).</p>\n\n<p>Make sure it applies to your case, once it allows no duplicates.</p>\n\n<pre><code>var a = new JS.Set([1,2,3,4,5,6,7,8,9]);\nvar b = new JS.Set([2,4,6,8]);\n\na.difference(b)\n// -&gt; Set{1,3,5,7,9}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Just thinking... for the sake of a challenge ;-) would this work... (for basic arrays of strings, numbers, etc.) no nested arrays</p>\n\n<pre><code>function diffArrays(arr1, arr2, returnUnion){\n  var ret = [];\n  var test = {};\n  var bigArray, smallArray, key;\n  if(arr1.length &gt;= arr2.length){\n    bigArray = arr1;\n    smallArray = arr2;\n  } else {\n    bigArray = arr2;\n    smallArray = arr1;\n  }\n  for(var i=0;i&lt;bigArray.length;i++){\n    key = bigArray[i];\n    test[key] = true;\n  }\n  if(!returnUnion){\n    //diffing\n    for(var i=0;i&lt;smallArray.length;i++){\n      key = smallArray[i];\n      if(!test[key]){\n        test[key] = null;\n      }\n    }\n  } else {\n    //union\n    for(var i=0;i&lt;smallArray.length;i++){\n      key = smallArray[i];\n      if(!test[key]){\n        test[key] = true;\n      }\n    }\n  }\n  for(var i in test){\n    ret.push(i);\n  }\n  return ret;\n}\n\narray1 = \"test1\", \"test2\",\"test3\", \"test4\", \"test7\"\narray2 = \"test1\", \"test2\",\"test3\",\"test4\", \"test5\", \"test6\"\ndiffArray = diffArrays(array1, array2);\n//returns [\"test5\",\"test6\",\"test7\"]\n\ndiffArray = diffArrays(array1, array2, true);\n//returns [\"test1\", \"test2\",\"test3\",\"test4\", \"test5\", \"test6\",\"test7\"]\n</code></pre>\n\n<p>Note the sorting will likely not be as noted above... but if desired, call .sort() on the array to sort it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I assume you are comparing normal array. If no, you need to change <i>for</i> loop to <i>for .. in</i> loop.</p>\n\n<pre>\nfunction arr_diff(a1, a2)\n{\n  var a=[], diff=[];\n  for(var i=0;i&lt;a1.length;i++)\n    a[a1[i]]=true;\n  for(var i=0;i&lt;a2.length;i++)\n    if(a[a2[i]]) delete a[a2[i]];\n    else a[a2[i]]=true;\n  for(var k in a)\n    diff.push(k);\n  return diff;\n}\n</pre>\n\n<p>Better solution, if you don't care about backward compatibility is using filter. But still, this solution works, so voting it down is unfair.</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>How about this:</p>\n\n<pre><code>Array.prototype.contains = function(needle){\n  for (var i=0; i&lt;this.length; i++)\n    if (this[i] == needle) return true;\n\n  return false;\n} \n\nArray.prototype.diff = function(compare) {\n    return this.filter(function(elem) {return !compare.contains(elem);})\n}\n\nvar a = new Array(1,4,7, 9);\nvar b = new Array(4, 8, 7);\nalert(a.diff(b));\n</code></pre>\n\n<p>So this way you can do <code>array1.diff(array2)</code> to get their difference (Horrible time complexity for the algorithm though - O(array1.length x array2.length) I believe)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I wanted a similar function which took in an old array and a new array and gave me an array of added items and an array of removed items, and I wanted it to be efficient (so no .contains!).</p>\n\n<p>You can play with my proposed solution here: <a href=\"http://jsbin.com/osewu3/12\" rel=\"nofollow\">http://jsbin.com/osewu3/12</a>.</p>\n\n<p>Can anyone see any problems/improvements to that algorithm? Thanks!</p>\n\n<p>Code listing:</p>\n\n<pre><code>function diff(o, n) {\n  // deal with empty lists\n  if (o == undefined) o = [];\n  if (n == undefined) n = [];\n\n  // sort both arrays (or this won't work)\n  o.sort(); n.sort();\n\n  // don't compare if either list is empty\n  if (o.length == 0 || n.length == 0) return {added: n, removed: o};\n\n  // declare temporary variables\n  var op = 0; var np = 0;\n  var a = []; var r = [];\n\n  // compare arrays and add to add or remove lists\n  while (op &lt; o.length &amp;&amp; np &lt; n.length) {\n      if (o[op] &lt; n[np]) {\n          // push to diff?\n          r.push(o[op]);\n          op++;\n      }\n      else if (o[op] &gt; n[np]) {\n          // push to diff?\n          a.push(n[np]);\n          np++;\n      }\n      else {\n          op++;np++;\n      }\n  }\n\n  // add remaining items\n  if( np &lt; n.length )\n    a = a.concat(n.slice(np, n.length));\n  if( op &lt; o.length )\n    r = r.concat(o.slice(op, o.length));\n\n  return {added: a, removed: r}; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>Array.prototype.diff = function(a) {\n    return this.filter(function(i) {return a.indexOf(i) &lt; 0;});\n};\n\n////////////////////  \n// Examples  \n////////////////////\n\n[1,2,3,4,5,6].diff( [3,4,5] );  \n// =&gt; [1, 2, 6]\n\n[\"test1\", \"test2\",\"test3\",\"test4\",\"test5\",\"test6\"].diff([\"test1\",\"test2\",\"test3\",\"test4\"]);  \n// =&gt; [\"test5\", \"test6\"]\n</code></pre>\n\n<p><strong>Note</strong> indexOf and filter are not available in ie before ie9.</p>\n",
                    "is_accepted": false,
                    "score": 277
                },
                {
                    "body": "<p>Using <a href=\"http://phrogz.net/JS/ArraySetMath.js\" rel=\"nofollow\">http://phrogz.net/JS/ArraySetMath.js</a> you can:</p>\n\n<pre><code>var array1 = [\"test1\", \"test2\",\"test3\", \"test4\"];\nvar array2 = [\"test1\", \"test2\",\"test3\",\"test4\", \"test5\", \"test6\"];\n\nvar array3 = array2.subtract( array1 );\n// [\"test5\", \"test6\"]\n\nvar array4 = array1.exclusion( array2 );\n// [\"test5\", \"test6\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I was looking for a simple answer that didn't involve using different libraries, and I came up with my own that I don't think has been mentioned here.\nI don't know how efficient it is or anything but it works;</p>\n\n<pre><code>    function find_diff(arr1, arr2) {\n      diff = [];\n      joined = arr1.concat(arr2);\n      for( i = 0; i &lt;= joined.length; i++ ) {\n        current = joined[i];\n        if( joined.indexOf(current) == joined.lastIndexOf(current) ) {\n          diff.push(current);\n        }\n      }\n      return diff;\n    }\n</code></pre>\n\n<p>For my code I need duplicates taken out as well, but I guess that isn't always preferred.</p>\n\n<p>I guess the main downside is it's potentially comparing many options that have already been rejected.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In response to the person who wanted to subtract one array from another...</p>\n\n<p>If no more than say 1000 elements try this...</p>\n\n<p>Setup a new variable to duplicate Array01 and call it Array03.</p>\n\n<p>Now, use the bubble sort algorithm to compare the elements of Array01 with Array02 and whenever you find a match\ndo the following to Array03...</p>\n\n<pre><code> if (Array01[x]==Array02[y]) {Array03.splice(x,1);}\n</code></pre>\n\n<p>NB: We are modifying Array03 instead of Array01 so as not to screw up the nested loops of the bubble sort!</p>\n\n<p>Finally, copy the contents of Array03 to Array01 with a simple assignment, and you're done.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Samuel: \"For my code I need duplicates taken out as well, but I guess that isn't always preferred.\nI guess the main downside is it's potentially comparing many options that have already been rejected.\"</p>\n\n<p>When comparing TWO lists, Arrays, etc, and the elements are less than 1000, the industry standard in the\n3GL world is to use the bubble sort which avoids dupes. </p>\n\n<p>The code would look something like this... (untested but it should work)</p>\n\n<pre><code>var Array01=new Array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P');\nvar Array02=new Array('X','B','F','W','Z','X','J','P','P','O','E','N','Q');\nvar Array03=Array01;\n\nfor(x=1; x&lt;Array02.length; x++) {\n for(y=0; y&lt;Array01.length-1; y++) {\n  if (Array01[y]==Array02[x]) {Array03.splice(y,1);}}}\n\nArray01=Array03;\n</code></pre>\n\n<p>To test the output...</p>\n\n<pre><code>for(y=0; y&lt;Array01.length; y++) {document.write(Array01[y])}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>to subtract one array from another, simply use the snippet below:</p>\n\n<pre><code>var a1 = ['1','2','3','4','6'];\nvar a2 = ['3','4','5'];\n\nvar items = new Array();\n\nitems = jQuery.grep(a1,function (item) {\n    return jQuery.inArray(item, a2) &lt; 0;\n});\n</code></pre>\n\n<p>It will returns ['1,'2','6'] that are items of first array which don't exist in the second.</p>\n\n<p>Therefore, according to your problem sample, following code is the exact solution:</p>\n\n<pre><code>var array1 = [\"test1\", \"test2\",\"test3\", \"test4\"];\nvar array2 = [\"test1\", \"test2\",\"test3\",\"test4\", \"test5\", \"test6\"];\n\nvar _array = new Array();\n\n_array = jQuery.grep(array2, function (item) {\n     return jQuery.inArray(item, array1) &lt; 0;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>littlebit fix for the best answer</p>\n\n<pre><code>function arr_diff(a1, a2)\n{\n  var a=[], diff=[];\n  for(var i=0;i&lt;a1.length;i++)\n    a[a1[i]]=a1[i];\n  for(var i=0;i&lt;a2.length;i++)\n    if(a[a2[i]]) delete a[a2[i]];\n    else a[a2[i]]=a2[i];\n  for(var k in a)\n   diff.push(a[k]);\n  return diff;\n}\n</code></pre>\n\n<p>this will take current type of element in consideration. b/c when we make a[a1[i]] it converts a value to string from its oroginal value, so we lost actual value.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's a lot of problems with the answers I'm reading here that make them of limited value in practical programming applications.</p>\n\n<p>First and foremost, you're going to want to have a way to control what it means for two items in the array to be \"equal\". The === comparison is not going to cut it if you're trying to figure out whether to update an array of objects based on an ID or something like that, which frankly is probably one of the most likely scenarios in which you will want a diff function. It also limits you to arrays of things that can be compared with the === operator, i.e. strings, ints, etc, and that's pretty much unacceptable for grown-ups.</p>\n\n<p>Secondly, there are three state outcomes of a diff operation:</p>\n\n<ol>\n<li>elements that are in the first array but not in the second</li>\n<li>elements that are common to both arrays</li>\n<li>elements that are in the second array but not in the first</li>\n</ol>\n\n<p>I think this means you need no less than 2 loops, but am open to dirty tricks if anybody knows a way to reduce it to one.</p>\n\n<p>Here's something I cobbled together, and I want to stress that I ABSOLUTELY DO NOT CARE that it doesn't work in old versions of Microshaft browsers. If you work in an inferior coding environment like IE, it's up to you to modify it to work within the unsatisfactory limitations you're stuck with.</p>\n\n<pre><code>Array.defaultValueComparison = function(a, b) {\n    return (a === b);\n};\n\nArray.prototype.diff = function(arr, fnCompare) {\n\n    // validate params\n\n    if (!(arr instanceof Array))\n        arr = [arr];\n\n    fnCompare = fnCompare || Array.defaultValueComparison;\n\n    var original = this, exists, storage, \n        result = { common: [], removed: [], inserted: [] };\n\n    original.forEach(function(existingItem) {\n\n        // Finds common elements and elements that \n        // do not exist in the original array\n\n        exists = arr.some(function(newItem) {\n            return fnCompare(existingItem, newItem);\n        });\n\n        storage = (exists) ? result.common : result.removed;\n        storage.push(existingItem);\n\n    });\n\n    arr.forEach(function(newItem) {\n\n        exists = original.some(function(existingItem) {\n            return fnCompare(existingItem, newItem);\n        });\n\n        if (!exists)\n            result.inserted.push(newItem);\n\n    });\n\n    return result;\n\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A solution using <code>indexOf()</code> will be ok for small arrays but as they grow in length the performance of the algorithm approaches <code>O(n^2)</code>.  Here's a solution that will perform better for very large arrays by using objects as associative arrays to store the array entries as keys; it also eliminates duplicate entries automatically but only works with string values (or values which can be safely stored as strings):</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function arrayDiff(a1, a2) {\n  var o1={}, o2={}, diff=[], i, len, k;\n  for (i=0, len=a1.length; i&lt;len; i++) { o1[a1[i]] = true; }\n  for (i=0, len=a2.length; i&lt;len; i++) { o2[a2[i]] = true; }\n  for (k in o1) { if (!(k in o2)) { diff.push(k); } }\n  for (k in o2) { if (!(k in o1)) { diff.push(k); } }\n  return diff;\n}\n\nvar a1 = ['a', 'b'];\nvar a2 = ['a', 'b', 'c', 'd'];\narrayDiff(a1, a2); // =&gt; ['c', 'd']\narrayDiff(a2, a1); // =&gt; ['c', 'd']\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><a href=\"http://underscorejs.org/#difference\">The difference method in Underscore</a> (or its drop-in replacement, <a href=\"https://github.com/lodash/lodash/\">Lo-Dash</a>) can do this too:</p>\n\n<pre><code>(R)eturns the values from array that are not present in the other arrays\n\n_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n=&gt; [1, 3, 4]\n</code></pre>\n\n<p>As with any Underscore function, you could also use it in a more object-oriented style:</p>\n\n<pre><code>_([1, 2, 3, 4, 5]).difference([5, 2, 10]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 83
                },
                {
                    "body": "<p>The above answer by Joshaven Potter is great. But it returns elements in array B that are not in array C, but not the other way around. For example, if <code>var a=[1,2,3,4,5,6].diff( [3,4,5,7]);</code> then it will output: ==> <code>[1,2,6]</code>, but <strong>not</strong> <code>[1,2,6,7]</code>, which is the actual difference between the two. You can still use Potter's code above but simply redo the comparison once backwards too:</p>\n\n<pre><code>Array.prototype.diff = function(a) {\n    return this.filter(function(i) {return !(a.indexOf(i) &gt; -1);});\n};\n\n////////////////////  \n// Examples  \n////////////////////\n\nvar a=[1,2,3,4,5,6].diff( [3,4,5,7]);\nvar b=[3,4,5,7].diff([1,2,3,4,5,6]);\nvar c=a.concat(b);\nconsole.log(c);\n</code></pre>\n\n<p>This should output: <code>[ 1, 2, 6, 7 ]</code></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can use underscore.js : <a href=\"http://underscorejs.org/#intersection\" rel=\"nofollow\">http://underscorejs.org/#intersection</a></p>\n\n<p>You have needed methods for array : </p>\n\n<pre><code>_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n=&gt; [1, 3, 4]\n\n_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n=&gt; [1, 2]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is by far the easiest way to get exactly the result you are looking for, using jQuery:</p>\n\n<pre><code>var diff = $(old_array).not(new_array).get();\n</code></pre>\n\n<p><code>diff</code> now contains what was in <code>old_array</code> that is not in <code>new_array</code></p>\n",
                    "is_accepted": false,
                    "score": 116
                },
                {
                    "body": "<p>If not use hasOwnProperty then we have incorrect elements. For example: </p>\n\n<pre><code>[1,2,3].diff([1,2]); //Return [\"3\", \"remove\", \"diff\"] This is the wrong version\n</code></pre>\n\n<p>My version:</p>\n\n<pre><code>Array.prototype.diff = function(array2)\n  {\n    var a = [],\n        diff = [],\n        array1 = this || [];\n\n    for (var i = 0; i &lt; array1.length; i++) {\n      a[array1[i]] = true;\n    }\n    for (var i = 0; i &lt; array2.length; i++) {\n      if (a[array2[i]]) {\n        delete a[array2[i]];\n      } else {\n        a[array2[i]] = true;\n      }\n    }\n\n    for (var k in a) {\n      if (!a.hasOwnProperty(k)){\n        continue;\n      }\n      diff.push(k);\n    }\n\n    return diff;\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I fall into this question, which was to get the difference of two simple arrays</p>\n\n<pre><code>var a1 = ['a', 'b'];\nvar a2 = ['a', 'b', 'c', 'd'];\n\n// need [\"c\", \"d\"]\n</code></pre>\n\n<p>and I don't see why not go with the basic for loops :</p>\n\n<pre><code>for(var i=0; i &lt; a1.length; i++) {\n  for(var j=0; j &lt; a2.length; j++) {\n    if(a1[i] == a2[j]) {\n      a2.splice(j, 1);\n    }\n  }\n}\n</code></pre>\n\n<p>which would return the needed <code>[\"c\", \"d\"]</code></p>\n\n<p>[edit] proposed right above, seen to late.</p>\n\n<p>Anyway, any good reason to avoid this simple solution ? </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Contributing with a jQuery solution that I'm currently using:</p>\n\n<pre><code>if (!Array.prototype.diff) {\n    Array.prototype.diff = function (a) {\n        return $.grep(this, function (i) { return $.inArray(i, a) === -1; });\n    }; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var result = [];\nvar arr1 = [1,2,3,4];\nvar arr2 = [2,3];\narr1.forEach(function(el, idx) {\n    function unEqual(element, index, array) {\n        var a = el;\n        return (element!=a);\n    }\n    if (arr2.every(unEqual)) {\n        result.push(el);\n    };\n});\nalert(result);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This question is old but is still the top hit for <strong>javascript array subtraction</strong> so I wanted to add the solution I am using. This fits for the following case:</p>\n\n<pre><code>var a1 = [1,2,2,3]\nvar a2 = [1,2]\n//result = [2,3]\n</code></pre>\n\n<p>The following method will produced the desired result:</p>\n\n<pre><code>function arrayDifference(minuend, subtrahend) {\n  for (var i = 0; i &lt; minuend.length; i++) {\n    var j = subtrahend.indexOf(minuend[i])\n    if (j != -1) {\n      minuend.splice(i, 1);\n      subtrahend.splice(j, 1);\n    }\n  }\n  return minuend;\n}\n</code></pre>\n\n<p>It should be noted that the function does not include values from the subtrahend that are not present in the minuend:</p>\n\n<pre><code>var a1 = [1,2,3]\nvar a2 = [2,3,4]\n//result = [1]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This was inspired by the accepted answer by Thinker, but Thinker's answer seems to assume the arrays are sets.  It falls apart if the arrays are <code>[ \"1\", \"2\" ]</code> and <code>[ \"1\", \"1\", \"2\", \"2\" ]</code></p>\n\n<p>The difference between those arrays is <code>[ \"1\", \"2\" ]</code>.  The following solution is O(n*n), so not ideal, but if you have big arrays, it has memory advantages over Thinker's solution as well. </p>\n\n<p>If you're dealing with sets in the first place, Thinker's solution is definitely better.  If you have a newer version of Javascript with access to filters, you should use those as well.  This is only for those who aren't dealing with sets and are using an older version of JavaScript (for whatever reason)...</p>\n\n<pre><code>if (!Array.prototype.diff) { \n    Array.prototype.diff = function (array) {\n        // if the other array is a falsy value, return a copy of this array\n        if ((!array) || (!Array.prototype.isPrototypeOf(array))) { \n            return this.slice(0);\n        }\n\n        var diff = [];\n        var original = this.slice(0);\n\n        for(var i=0; i &lt; array.length; ++i) {\n            var index = original.indexOf(array[i]);\n            if (index &gt; -1) { \n                original.splice(index, 1);\n            } else { \n                diff.push(array[i]);\n            }\n        }\n\n        for (var i=0; i &lt; original.length; ++i) {\n            diff.push(original[i]);\n        }\n        return diff;\n    }\n}   \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>just trimming the string to ensure.... spaces wont affect the diff</p>\n\n<pre><code>function arr_diff(a1, a2) {\n    var a=[], diff=[];\n    for(var i=0;i&lt;a1.length;i++)\n        a[a1[i]]=true;\n    for(var i=0;i&lt;a2.length;i++)\n        if(a[a2[i].trim()]) delete a[a2[i].trim()];\n    else a[a2[i].trim()]=true;\n    for(var k in a)\n        diff.push(k);\n    return diff;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Quick solution. Although it seems that others have already posted different variations of the same method. I am not sure this is the best for huge arrays, but it works for my arrays which won't be larger than 10 or 15.</p>\n\n<p><strong>Difference</strong> <code>b</code> - <code>a</code></p>\n\n<pre><code>for(var i = 0; i &lt; b.length; i++){\n  for(var j = 0; j &lt; a.length; j ++){\n    var loc = b.indexOf(a[j]);\n    if(loc &gt; -1){\n      b.splice(loc, 1);\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<ul>\n<li>Pure JavaScript solution (no libraries)</li>\n<li>Compatible with older browsers (doesn't use <code>filter</code>)</li>\n<li>O(n^2)</li>\n<li>Optional <code>fn</code> callback parameter that lets you specify how to compare array items</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function diff(a, b, fn){\r\n    var max = Math.max(a.length, b.length);\r\n        d = [];\r\n    fn = typeof fn === 'function' ? fn : false\r\n    for(var i=0; i &lt; max; i++){\r\n        var ac = i &lt; a.length ? a[i] : undefined\r\n            bc = i &lt; b.length ? b[i] : undefined;\r\n        for(var k=0; k &lt; max; k++){\r\n            ac = ac === undefined || (k &lt; b.length && (fn ? fn(ac, b[k]) : ac == b[k])) ? undefined : ac;\r\n            bc = bc === undefined || (k &lt; a.length && (fn ? fn(bc, a[k]) : bc == a[k])) ? undefined : bc;\r\n            if(ac == undefined && bc == undefined) break;\r\n        }\r\n        ac !== undefined && d.push(ac);\r\n        bc !== undefined && d.push(bc);\r\n    }\r\n    return d;\r\n}\r\n\r\nalert(\r\n    \"Test 1: \" + \r\n    diff(\r\n        [1, 2, 3, 4],\r\n        [1, 4, 5, 6, 7]\r\n      ).join(', ') +\r\n    \"\\nTest 2: \" +\r\n    diff(\r\n        [{id:'a',toString:function(){return this.id}},{id:'b',toString:function(){return this.id}},{id:'c',toString:function(){return this.id}},{id:'d',toString:function(){return this.id}}],\r\n        [{id:'a',toString:function(){return this.id}},{id:'e',toString:function(){return this.id}},{id:'f',toString:function(){return this.id}},{id:'d',toString:function(){return this.id}}],\r\n        function(a, b){ return a.id == b.id; }\r\n    ).join(', ')\r\n);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've tried all of these above but none worked when you needed to match without accepting duplicates.</p>\n\n<p>For example:</p>\n\n<pre><code>var a1 = [1, 2, 1, 4], a2 = [1, 2, 4];\n</code></pre>\n\n<p>Would return an empty diff array because <code>2</code> would be found once in the second array, even though we need it to match twice.</p>\n\n<p>So I've managed to fix something up:</p>\n\n<pre><code>Array.prototype.diff = function(a) {\n    return this.filter(function(item) {\n        match = a.indexOf(item);\n        if (match)\n            a.splice(match, 1);\n        return match &lt; 0;\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>here's the function I use to get the difference between 2 arrays - It's good for numerical, string, mixed num/string arrays. not object literal within arrays / multidimentional arrays</p>\n\n<pre><code>function diff(arr1, arr2) {\n\n    var x, \n        t;\n\n    function uniq(a, b) {\n        t = b;\n\n        if( (b === 0 &amp;&amp; x[b+1]!==a) || \n           (t &gt; 0 &amp;&amp; a !== x[b+1] &amp;&amp; a !== x[b-1]) ) {\n            return  a;\n        }\n    }\n\n\n    x = arr1.concat(arr2).sort();\n\n    return x.filter(uniq);\n}\n\nvar a1 = ['a', 'b', 'e', 'c'],\n    a2 = ['b', 'a', 'c', 'f' ];\n\ndiff(a1, a2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With the arrival of ES6 with sets and splat operator (at the time of being works only in Firefox, check <a href=\"http://kangax.github.io/es5-compat-table/es6/\" rel=\"nofollow\">compatibility table</a>), you can write the following one liner:</p>\n\n<pre><code>var a = ['a', 'b', 'c', 'd'];\nvar b = ['a', 'b'];\nvar b1 = new Set(b);\nvar difference = [...new Set([...a].filter(x =&gt; !b1.has(x)))];\n</code></pre>\n\n<p>which will result in <code>[ \"c\", \"d\" ]</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a way to return the difference between two arrays in JavaScript?</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var a1 = ['a', 'b'];\nvar a2 = ['a', 'b', 'c', 'd'];\n\n// need [\"c\", \"d\"]\n</code></pre>\n\n<p>Any advice greatly appreciated.</p>\n",
            "last_activity_date": 1421478909,
            "question_id": 1187518,
            "score": 117,
            "tags": [
                "javascript",
                "arrays",
                "array-difference"
            ],
            "title": "JavaScript array difference"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>There's no way to actively detect if there's a zoom. I found a good entry here on how you can attempt to implement it.</p>\n\n<blockquote>\n  <p>I\u2019ve found two ways of detecting the\n  zoom level. One way to detect zoom\n  level changes relies on the fact that\n  percentage values are not zoomed. A\n  percentage value is relative to the\n  viewport width, and thus unaffected by\n  page zoom. If you insert two elements,\n  one with a position in percentages,\n  and one with the same position in\n  pixels, they\u2019ll move apart when the\n  page is zoomed. Find the ratio between\n  the positions of both elements and\n  you\u2019ve got the zoom level. See test\n  case.\n  <a href=\"http://web.archive.org/web/20080723161031/http://novemberborn.net/javascript/page-zoom-ff3\">http://web.archive.org/web/20080723161031/http://novemberborn.net/javascript/page-zoom-ff3</a></p>\n</blockquote>\n\n<p>You could also do it using the tools of the above post. The problem is you're more or less making educated guesses on whether or not the page has zoomed. This will work better in some browsers than other. </p>\n\n<p>There's no way to tell if the page is zoomed if they load your page while zoomed. </p>\n",
                    "is_accepted": true,
                    "score": 55
                },
                {
                    "body": "<p>I'm using this piece of JavaScript to react to Zoom \"events\".<br>\nIt polls the window width.\n(As somewhat suggested on this page (which Ian Elliott linked to): <a href=\"http://novemberborn.net/javascript/page-zoom-ff3\" rel=\"nofollow\">http://novemberborn.net/javascript/page-zoom-ff3</a> <a href=\"http://web.archive.org/web/20090708080013/http://novemberborn.net/javascript/page-zoom-ff3\" rel=\"nofollow\">[archive]</a>)</p>\n\n<p>Tested with Chrome, Firefox 3.6 and Opera, not IE.</p>\n\n<p>Regards, Magnus</p>\n\n<pre><code>var zoomListeners = [];\n\n(function(){\n  // Poll the pixel width of the window; invoke zoom listeners\n  // if the width has been changed.\n  var lastWidth = 0;\n  function pollZoomFireEvent() {\n    var widthNow = jQuery(window).width();\n    if (lastWidth == widthNow) return;\n    lastWidth = widthNow;\n    // Length changed, user must have zoomed, invoke listeners.\n    for (i = zoomListeners.length - 1; i &gt;= 0; --i) {\n      zoomListeners[i]();\n    }\n  }\n  setInterval(pollZoomFireEvent, 100);\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I'd like to suggest an improvement to previous solution with tracking changes to window width. Instead of keeping your own array of event listeners you can use existing javascript event system and trigger your own event upon width change, and bind event handlers to it.</p>\n\n<pre><code>$(window).bind('myZoomEvent', function() { ... });\n\nfunction pollZoomFireEvent() \n{ \n\n    if ( ... width changed ... ) {\n        $(window).trigger('myZoomEvent');\n    }\n}\n</code></pre>\n\n<p><a href=\"http://benalman.com/projects/jquery-throttle-debounce-plugin/\" rel=\"nofollow\">Throttle/debounce</a> can help with reducing the rate of calls of your handler.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can also get the text resize events, and the zoom factor by injecting a div containing at least a non-breakable space (possibly, hidden), and regularly checking its height. If the height changes, the text size has changed, (and you know how much - this also fires, incidentally, if the window gets zoomed in full-page mode, and you still will get the correct zoom factor, with the same height / height ratio).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This works for me:</p>\n\n<pre><code>        var deviceXDPI = screen.deviceXDPI;\n        setInterval(function(){\n            if(screen.deviceXDPI != deviceXDPI){\n                deviceXDPI = screen.deviceXDPI;\n                ... there was a resize ...\n            }\n        }, 500);\n</code></pre>\n\n<p>It's only needed on IE8.   All the other browsers naturally generate a resize event.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There is a nifty plugin built from <code>yonran</code> that can do the detection. Here is his previously <a href=\"http://stackoverflow.com/a/5078596/295264\">answered</a> question on StackOverflow. It works for most of the browsers. Application is as simple as this:</p>\n\n<pre><code>window.onresize = function onresize() {\n  var r = DetectZoom.ratios();\n  zoomLevel.innerHTML =\n    \"Zoom level: \" + r.zoom +\n    (r.zoom !== r.devicePxPerCssPx\n        ? \"; device to CSS pixel ratio: \" + r.devicePxPerCssPx\n        : \"\");\n}\n</code></pre>\n\n<p><a href=\"http://yonran.github.com/detect-zoom/test-page.html\" rel=\"nofollow\">Demo</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I'am replying to a 3 year old link but I guess here's a more acceptable answer,</p>\n\n<p>Create .css file as,</p>\n\n<pre><code>@media screen and (max-width: 1000px) \n{\n       // things you want to trigger when the screen is zoomed\n}\n</code></pre>\n\n<p>EG:-</p>\n\n<pre><code>@media screen and (max-width: 1000px) \n{\n    .classname\n    {\n          font-size:10px;\n    }\n}\n</code></pre>\n\n<p>The above code makes the size of the font '10px' when the screen is zoomed to approximately 125%. You can check for different zoom level by changing the value of '1000px'.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is it possible to detect, using JavaScript, when the user changes the zoom in a page?\nI simply want to catch a \"zoom\" event and respond to it (similar to window.onresize event).</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1405739740,
            "question_id": 995914,
            "score": 90,
            "tags": [
                "javascript",
                "events",
                "zoom"
            ],
            "title": "Catch browser&#39;s &quot;zoom&quot; event in JavaScript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You need to get the content of the p tag and replace all the dolors in it with the highlighted version.</p>\n\n<p>You don't even need to have jQuery for this. :-)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try <a href=\"http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\">highlight: JavaScript text higlighting jQuery plugin</a>.</p>\n\n<pre><code>/*\n\nhighlight v4\n\nHighlights arbitrary terms.\n\n&lt;http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html&gt;\n\nMIT license.\n\nJohann Burkard\n&lt;http://johannburkard.de&gt;\n&lt;mailto:jb@eaio.com&gt;\n\n*/\n\njQuery.fn.highlight = function(pat) {\n function innerHighlight(node, pat) {\n  var skip = 0;\n  if (node.nodeType == 3) {\n   var pos = node.data.toUpperCase().indexOf(pat);\n   if (pos &gt;= 0) {\n    var spannode = document.createElement('span');\n    spannode.className = 'highlight';\n    var middlebit = node.splitText(pos);\n    var endbit = middlebit.splitText(pat.length);\n    var middleclone = middlebit.cloneNode(true);\n    spannode.appendChild(middleclone);\n    middlebit.parentNode.replaceChild(spannode, middlebit);\n    skip = 1;\n   }\n  }\n  else if (node.nodeType == 1 &amp;&amp; node.childNodes &amp;&amp; !/(script|style)/i.test(node.tagName)) {\n   for (var i = 0; i &lt; node.childNodes.length; ++i) {\n    i += innerHighlight(node.childNodes[i], pat);\n   }\n  }\n  return skip;\n }\n return this.length &amp;&amp; pat &amp;&amp; pat.length ? this.each(function() {\n  innerHighlight(this, pat.toUpperCase());\n }) : this;\n};\n\njQuery.fn.removeHighlight = function() {\n return this.find(\"span.highlight\").each(function() {\n  this.parentNode.firstChild.nodeName;\n  with (this.parentNode) {\n   replaceChild(this.firstChild, this);\n   normalize();\n  }\n }).end();\n};\n</code></pre>\n\n<p>Also try the <a href=\"http://bartaz.github.com/sandbox.js/jquery.highlight.html\">\"updated\" version of the original script</a>.</p>\n\n<pre><code>/*\n * jQuery Highlight plugin\n *\n * Based on highlight v3 by Johann Burkard\n * http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\n *\n * Code a little bit refactored and cleaned (in my humble opinion).\n * Most important changes:\n *  - has an option to highlight only entire words (wordsOnly - false by default),\n *  - has an option to be case sensitive (caseSensitive - false by default)\n *  - highlight element tag and class names can be specified in options\n *\n * Usage:\n *   // wrap every occurrance of text 'lorem' in content\n *   // with &lt;span class='highlight'&gt; (default options)\n *   $('#content').highlight('lorem');\n *\n *   // search for and highlight more terms at once\n *   // so you can save some time on traversing DOM\n *   $('#content').highlight(['lorem', 'ipsum']);\n *   $('#content').highlight('lorem ipsum');\n *\n *   // search only for entire word 'lorem'\n *   $('#content').highlight('lorem', { wordsOnly: true });\n *\n *   // don't ignore case during search of term 'lorem'\n *   $('#content').highlight('lorem', { caseSensitive: true });\n *\n *   // wrap every occurrance of term 'ipsum' in content\n *   // with &lt;em class='important'&gt;\n *   $('#content').highlight('ipsum', { element: 'em', className: 'important' });\n *\n *   // remove default highlight\n *   $('#content').unhighlight();\n *\n *   // remove custom highlight\n *   $('#content').unhighlight({ element: 'em', className: 'important' });\n *\n *\n * Copyright (c) 2009 Bartek Szopka\n *\n * Licensed under MIT license.\n *\n */\n\njQuery.extend({\n    highlight: function (node, re, nodeName, className) {\n        if (node.nodeType === 3) {\n            var match = node.data.match(re);\n            if (match) {\n                var highlight = document.createElement(nodeName || 'span');\n                highlight.className = className || 'highlight';\n                var wordNode = node.splitText(match.index);\n                wordNode.splitText(match[0].length);\n                var wordClone = wordNode.cloneNode(true);\n                highlight.appendChild(wordClone);\n                wordNode.parentNode.replaceChild(highlight, wordNode);\n                return 1; //skip added node in parent\n            }\n        } else if ((node.nodeType === 1 &amp;&amp; node.childNodes) &amp;&amp; // only element nodes that have children\n                !/(script|style)/i.test(node.tagName) &amp;&amp; // ignore script and style nodes\n                !(node.tagName === nodeName.toUpperCase() &amp;&amp; node.className === className)) { // skip if already highlighted\n            for (var i = 0; i &lt; node.childNodes.length; i++) {\n                i += jQuery.highlight(node.childNodes[i], re, nodeName, className);\n            }\n        }\n        return 0;\n    }\n});\n\njQuery.fn.unhighlight = function (options) {\n    var settings = { className: 'highlight', element: 'span' };\n    jQuery.extend(settings, options);\n\n    return this.find(settings.element + \".\" + settings.className).each(function () {\n        var parent = this.parentNode;\n        parent.replaceChild(this.firstChild, this);\n        parent.normalize();\n    }).end();\n};\n\njQuery.fn.highlight = function (words, options) {\n    var settings = { className: 'highlight', element: 'span', caseSensitive: false, wordsOnly: false };\n    jQuery.extend(settings, options);\n\n    if (words.constructor === String) {\n        words = [words];\n    }\n    words = jQuery.grep(words, function(word, i){\n      return word != '';\n    });\n    words = jQuery.map(words, function(word, i) {\n      return word.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&amp;\");\n    });\n    if (words.length == 0) { return this; };\n\n    var flag = settings.caseSensitive ? \"\" : \"i\";\n    var pattern = \"(\" + words.join(\"|\") + \")\";\n    if (settings.wordsOnly) {\n        pattern = \"\\\\b\" + pattern + \"\\\\b\";\n    }\n    var re = new RegExp(pattern, flag);\n\n    return this.each(function () {\n        jQuery.highlight(this, re, settings.element, settings.className);\n    });\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 61
                },
                {
                    "body": "<p>If you're really game you could look through the source of StackOverflow for how it does syntax highlighting on the code blocks ;)</p>\n\n<p>Essentially you'll have to just dynamically insert HTML (spans would be best) where you need them.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function hiliter(word, element) {\n    var rgxp = new RegExp(word, 'g');\n    var repl = '&lt;span class=\"myClass\"&gt;' + word + '&lt;/span&gt;';\n    element.innerHTML = element.innerHTML.replace(rgxp, repl);\n}\nhiliter('dolor');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Is it possible to get this above example:</p>\n\n<pre><code>jQuery.fn.highlight = function (str, className)\n{\n    var regex = new RegExp(str, \"g\");\n\n    return this.each(function ()\n    {\n        this.innerHTML = this.innerHTML.replace(\n            regex,\n            \"&lt;span class=\\\"\" + className + \"\\\"&gt;\" + str + \"&lt;/span&gt;\"\n        );\n    });\n};\n</code></pre>\n\n<p>not to replace text inside html-tags like , this otherwise breakes the page.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's a variation that ignores and preserves case:</p>\n\n<pre><code>jQuery.fn.highlight = function (str, className) {\n    var regex = new RegExp(\"\\\\b\"+str+\"\\\\b\", \"gi\");\n\n    return this.each(function () {\n        this.innerHTML = this.innerHTML.replace(regex, function(matched) {return \"&lt;span class=\\\"\" + className + \"\\\"&gt;\" + matched + \"&lt;/span&gt;\";});\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I wrote a very simple function that uses jQuery to iterate the elements wrapping each keyword with a .highlight class.</p>\n\n<pre><code>function highlight_words(word, element) {\n    if(word) {\n        var textNodes;\n        word = word.replace(/\\W/g, '');\n        var str = word.split(\" \");\n        $(str).each(function() {\n            var term = this;\n            var textNodes = $(element).contents().filter(function() { return this.nodeType === 3 });\n            textNodes.each(function() {\n              var content = $(this).text();\n              var regex = new RegExp(term, \"gi\");\n              content = content.replace(regex, '&lt;span class=\"highlight\"&gt;' + term + '&lt;/span&gt;');\n              $(this).replaceWith(content);\n            });\n        });\n    }\n}\n</code></pre>\n\n<p>More info:</p>\n\n<p><a href=\"http://www.hawkee.com/snippet/9854/\" rel=\"nofollow\">http://www.hawkee.com/snippet/9854/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I basically need to highlight a particular word in a block of text. For example, pretend I wanted to highlight the word \"dolor\" in this text:</p>\n\n<pre><code>&lt;p&gt;\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n&lt;/p&gt;\n&lt;p&gt;\n    Quisque bibendum sem ut lacus. Integer dolor ullamcorper libero.\n    Aliquam rhoncus eros at augue. Suspendisse vitae mauris.\n&lt;/p&gt;\n</code></pre>\n\n<p>How do I convert the above to something like this:</p>\n\n<pre><code>&lt;p&gt;\n    Lorem ipsum &lt;span class=\"myClass\"&gt;dolor&lt;/span&gt; sit amet, consectetuer adipiscing elit.\n&lt;/p&gt;\n&lt;p&gt;\n    Quisque bibendum sem ut lacus. Integer &lt;span class=\"myClass\"&gt;dolor&lt;/span&gt; ullamcorper\n    libero. Aliquam rhoncus eros at augue. Suspendisse vitae mauris.\n&lt;/p&gt;\n</code></pre>\n\n<p>Is this possible with jQuery?</p>\n\n<p><strong>Edit</strong>: As <a href=\"http://stackoverflow.com/users/9535/sebastian-hoitz\">Sebastian</a> <a href=\"http://stackoverflow.com/questions/119441/highlight-a-word-with-jquery#119450\">pointed out</a>, this is quite possible without jQuery - but I was hoping there might be a special method of jQuery which would let you do selectors on the text itself. I'm already using jQuery heavily on this site, so keeping everything wrapped up in jQuery would make things perhaps a bit more tidy.</p>\n",
            "last_activity_date": 1400053776,
            "question_id": 119441,
            "score": 57,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Highlight a word with jQuery"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Member_Operators#Bracket_notation\" rel=\"nofollow\"><strong>bracket notation</strong></a>:</p>\n\n<pre><code>virDom['creditId']\nvirDom['pwdId..']\n</code></pre>\n\n<p>This applies to any object, and it is particularly useful for non-identifier-safe characters and also for accessing keys that you may not know ahead of time.</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I have a <code>form</code> DOM element:</p>\n\n<pre><code>var virDom = document.getElementsByTagName(\"form\")[0];\n</code></pre>\n\n<p><code>virDom</code> has two fields with IDs <code>creditId</code> and <code>pwdId..</code>. I can access <code>virDom.creditId</code>  without any issue but, <code>virDom.pwdId..</code> is failing with a syntax error, because of the periods contained in the name.</p>\n\n<p>How can I access such properties?</p>\n",
            "last_activity_date": 1399857828,
            "question_id": 12953704,
            "score": 2,
            "tags": [
                "javascript"
            ],
            "title": "How to access object properties containing special characters?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>On almost all current browsers you can use <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\"><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=\"http://kangax.github.io/compat-table/es5/#Date.now\">compatibility table</a>).</p>\n\n<p>You can easily make a shim for this, though:</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n</code></pre>\n\n<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>\n\n<pre><code>Math.floor(Date.now() / 1000)\n</code></pre>\n\n<p>Or alternatively you could use:</p>\n\n<pre><code>Date.now() / 1000 | 0\n</code></pre>\n\n<p>Which should be slightly faster, but also less readable (also <a href=\"http://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">see this answer</a>).</p>\n\n<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It's slightly better because it's shorter &amp; doesn't create a new <code>Date</code> object. However, if you don't want a shim &amp; maximum compatibility, you could use the \"old\" method to get the timestamp in <strong>miliseconds</strong>:</p>\n\n<pre><code>new Date().getTime()\n</code></pre>\n\n<p>Which you can then convert to seconds using the same method as above.</p>\n",
                    "is_accepted": true,
                    "score": 2153
                },
                {
                    "body": "<pre><code>var time = Date.now || function() {\n  return +new Date;\n};\n\ntime();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<pre><code>var timestamp = Number(new Date()); // current time as number\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<pre><code>new Date().valueOf()// returns the number of milliseconds since the epoch\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>time = Math.round(((new Date()).getTime()-Date.UTC(1970,0,1))/1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -20
                },
                {
                    "body": "<pre><code>+new Date;\n</code></pre>\n\n<p>I like it, because it is small.</p>\n",
                    "is_accepted": false,
                    "score": 210
                },
                {
                    "body": "<p>JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.</p>\n\n<p>This will give you a Unix timestamp (in seconds):</p>\n\n<pre><code>var unix = Math.round(+new Date()/1000);\n</code></pre>\n\n<p>This will give you the milliseconds since the epoch (not Unix timestamp):</p>\n\n<pre><code>var milliseconds = new Date().getTime();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 125
                },
                {
                    "body": "<p>The <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/getTime\"><code>Date.getTime()</code></a> can be very used with a little tweak:</p>\n\n<blockquote>\n  <p>The value returned by the getTime method is the number of milliseconds\n  since 1 January 1970 00:00:00 UTC.</p>\n</blockquote>\n\n<p>To get the Unix timestamp such as the one returned by PHP <a href=\"http://php.net/manual/en/function.time.php\"><code>time()</code></a> function, divide this number by 1000, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round\"><code>round</code></a> or <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/floor\"><code>floor</code></a> if necessary:</p>\n\n<pre><code>(new Date()).getTime() / 1000\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>this is how i do it all the time:</p>\n\n<pre><code>Date.now() /1000 |0\n</code></pre>\n\n<p>to get it working in IE you could do this (Polyfill from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" rel=\"nofollow\">MDN</a>):</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function now() {\n        return new Date().getTime();\n    };\n}\n</code></pre>\n\n<p>in case you are using jQuery you could use <code>$.now()</code> as described in <a href=\"http://api.jquery.com/jquery.now/\" rel=\"nofollow\">jQuery's Docs</a> wich makes the Polyfill obsolete since they are doing the same: <code>(new Date).getTime()</code></p>\n\n<p>if you are just happy about jQuery's version consider upvoting <a href=\"//stackoverflow.com/a/15434736/1519836\" rel=\"nofollow\">this</a> solution since i did not find it myself.</p>\n\n<p>edit:</p>\n\n<p>some nerdy alternative by <a href=\"//stackoverflow.com/users/283863\" rel=\"nofollow\">Derek \u6715\u6703\u529f\u592b</a>:</p>\n\n<pre><code>new Date/1e3|0`\n</code></pre>\n\n<p>now a tiny explaination of what <code>|0</code> does:</p>\n\n<p>by providing <code>|</code> you tell the interpreter to do a binary OR operation. bit operations require absolute numbers wich turns the decimal result from <code>Date.now() / 1000</code> into an absolut number. during that convertion, decimals are just removed, resulting in the same result as using <code>Math.floor()</code> but using less code.</p>\n\n<p>for further information about Date.now follow this Link: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" rel=\"nofollow\">Date.now() @ MDN</a></p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Just to add up, here's a function to return a timestamp string in Javascript. \nExample: 15:06:38 PM</p>\n\n<pre><code>function displayTime() {\n    var str = \"\";\n\n    var currentTime = new Date()\n    var hours = currentTime.getHours()\n    var minutes = currentTime.getMinutes()\n    var seconds = currentTime.getSeconds()\n\n    if (minutes &lt; 10) {\n        minutes = \"0\" + minutes\n    }\n    if (seconds &lt; 10) {\n        seconds = \"0\" + seconds\n    }\n    str += hours + \":\" + minutes + \":\" + seconds + \" \";\n    if(hours &gt; 11){\n        str += \"PM\"\n    } else {\n        str += \"AM\"\n    }\n    return str;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><em>jQuery</em> provides <a href=\"http://api.jquery.com/jQuery.now/\">its own method</a> to get the timestamp:</p>\n\n<pre><code>var timestamp = $.now();\n</code></pre>\n\n<p><sup>(besides it just implements <code>(new Date).getTime()</code> expression)</sup></p>\n\n<p><strong>REF:</strong> <a href=\"http://api.jquery.com/jQuery.now/\">http://api.jquery.com/jQuery.now/</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Any browsers not supported Date.now, you can use this for get current date time:</p>\n\n<pre><code>currentTime = Date.now() || +new Date()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss </p>\n\n<pre><code>function getTimeStamp() {\n    var now = new Date();\n    return ((now.getMonth() + 1) + '/' +\n            (now.getDate()) + '/' +\n             now.getFullYear() + \" \" +\n             now.getHours() + ':' +\n             ((now.getMinutes() &lt; 10)\n                 ? (\"0\" + now.getMinutes())\n                 : (now.getMinutes())) + ':' +\n             ((now.getSeconds() &lt; 10)\n                 ? (\"0\" + now.getSeconds())\n                 : (now.getSeconds())));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This one has a solution : which converts unixtime stamp to tim in js try this</p>\n\n<pre><code>var a = new Date(UNIX_timestamp*1000);\nvar hour = a.getUTCHours();\nvar min = a.getUTCMinutes();\nvar sec = a.getUTCSeconds();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>more simpler way:</p>\n\n<pre><code>var timeStamp=event.timestamp || new Date().getTime();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>one i haven't seen yet </p>\n\n<pre><code>Math.floor(Date.now() / 1000) // current time in seconds\n</code></pre>\n\n<p>another one i haven't seen yet is</p>\n\n<pre><code>var _ = require('underscore');\n_.now(); //Returns an integer timestamp for the current time, using the fastest method available in the runtime. Useful for implementing timing/animation functions.\n</code></pre>\n\n<p>from here <a href=\"http://underscorejs.org/#now\" rel=\"nofollow\">http://underscorejs.org/#now</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>sometime I need it in objects for xmlhttp calls, so I do like this.</p>\n\n<pre><code>timestamp : parseInt(new Date().getTime()/1000, 10)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is another solution to generate a timestamp in JavaScript - including a padding method for single numbers - using day, month, year, hour, minute and seconds in its result (working example at <a href=\"http://jsfiddle.net/AcLzd/9/\" rel=\"nofollow\">jsfiddle</a>):</p>\n\n<pre><code>var pad = function(int) { return int &lt; 10 ? 0 + int : int; };\nvar timestamp = new Date();\n\n    timestamp.day = [\n        pad(timestamp.getDate()),\n        pad(timestamp.getMonth() + 1), // getMonth() returns 0 to 11.\n        timestamp.getFullYear()\n    ];\n\n    timestamp.time = [\n        pad(timestamp.getHours()),\n        pad(timestamp.getMinutes()),\n        pad(timestamp.getSeconds())\n    ];\n\ntimestamp.now = parseInt(timestamp.day.join(\"\") + timestamp.time.join(\"\"));\nalert(timestamp.now);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><a href=\"http://momentjs.com\" rel=\"nofollow\">Moment.js</a> can abstract away a lot of the pain in dealing with Javascript Dates. </p>\n\n<p>See: <a href=\"http://momentjs.com/docs/#/displaying/unix-timestamp/\" rel=\"nofollow\">http://momentjs.com/docs/#/displaying/unix-timestamp/</a></p>\n\n<pre><code>moment().unix();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I learned a really cool way of converting a given Date object to a Unix timestamp from the source code of <a href=\"https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js\" rel=\"nofollow\">JQuery Cookie</a> the other day.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>var date = new Date();\nvar timestamp = +date;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I get a timestamp in JavaScript?</p>\n\n<p>Something similar to Unix's timestamp, that is, a single number that represents the current time and date. Either as a number or a string.</p>\n",
            "last_activity_date": 1426067568,
            "question_id": 221294,
            "score": 1607,
            "tags": [
                "javascript",
                "datetime",
                "timestamp"
            ],
            "title": "How do you get a timestamp in JavaScript?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>There's a nice bookmarklet called <a href=\"http://www.sprymedia.co.uk/article/Visual+Event+2\">Visual Event</a> that can show you all the events attached to an element. It has color-coded highlights for different types of events (mouse, keyboard, etc.). When you hover over them, it shows the body of the event handler, how it was attached, and the file/line number (on WebKit and Opera). You can also trigger the event manually.</p>\n\n<p>It can't find every event because there's no standard way to look up what event handlers are attached to an element, but it works with popular libraries like jQuery, Prototype, MooTools, YUI, etc.</p>\n",
                    "is_accepted": false,
                    "score": 149
                },
                {
                    "body": "<p>According to <a href=\"http://groups.google.com/group/firebug/browse_thread/thread/607400c545ce6048?pli=1\" rel=\"nofollow\" title=\"this thread\">this thread</a>, there is no way in Firebug to view what events are attached to listeners on a DOM element.</p>\n\n<p>It looks like the best you can do is either what tj111 suggests, or you could right-click the element in the HTML viewer, and click \"Log Events\" so you can see which events are firing for a particular DOM element.  I suppose one could do that to see what events <em>could</em> be firing off particular functions.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>jQuery stores events in the following:</p>\n\n<pre><code>$(\"a#somefoo\").data(\"events\")\n</code></pre>\n\n<p>Doing a <code>console.log($(\"a#somefoo\").data(\"events\"))</code> should list the events attached to that element.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>See <a href=\"http://stackoverflow.com/questions/446892/how-to-find-event-listeners-on-a-dom-node/447106#447106\">How to find event listeners on a DOM node</a>.</p>\n\n<p>In a nutshell, assuming at some point an event handler is attached to your element (eg): <code>$('#foo').click(function() { console.log('clicked!') });</code></p>\n\n<p>You inspect it like so:</p>\n\n<ul>\n<li><p>jQuery 1.3.x</p>\n\n<pre><code>var clickEvents = $('#foo').data(\"events\").click;\njQuery.each(clickEvents, function(key, value) {\n  console.log(value) // prints \"function() { console.log('clicked!') }\"\n})\n</code></pre></li>\n<li><p>jQuery 1.4.x</p>\n\n<pre><code>var clickEvents = $('#foo').data(\"events\").click;\njQuery.each(clickEvents, function(key, handlerObj) {\n  console.log(handlerObj.handler) // prints \"function() { console.log('clicked!') }\"\n})\n</code></pre></li>\n</ul>\n\n<p>See <a href=\"http://docs.jquery.com/Core/data#name\"><code>jQuery.fn.data</code></a> (where jQuery stores your handler internally).</p>\n\n<ul>\n<li><p>jQuery 1.8.x</p>\n\n<pre><code>var clickEvents = $._data($('#foo')[0], \"events\").click;\njQuery.each(clickEvents, function(key, handlerObj) {\n  console.log(handlerObj.handler) // prints \"function() { console.log('clicked!') }\"\n})\n</code></pre></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 301
                },
                {
                    "body": "<p>Here's a plugin which can list all event handlers for any given element/event:</p>\n\n<pre><code>$.fn.listHandlers = function(events, outputFunction) {\n    return this.each(function(i){\n        var elem = this,\n            dEvents = $(this).data('events');\n        if (!dEvents) {return;}\n        $.each(dEvents, function(name, handler){\n            if((new RegExp('^(' + (events === '*' ? '.+' : events.replace(',','|').replace(/^on/i,'')) + ')$' ,'i')).test(name)) {\n               $.each(handler, function(i,handler){\n                   outputFunction(elem, '\\n' + i + ': [' + name + '] : ' + handler );\n               });\n           }\n        });\n    });\n};\n</code></pre>\n\n<p>Use it like this:</p>\n\n<pre><code>// List all onclick handlers of all anchor elements:\n$('a').listHandlers('onclick', console.info);\n\n// List all handlers for all events of all elements:\n$('*').listHandlers('*', console.info);\n\n// Write a custom output function:\n$('#whatever').listHandlers('click',function(element,data){\n    $('body').prepend('&lt;br /&gt;' + element.nodeName + ': &lt;br /&gt;&lt;pre&gt;' + data + '&lt;\\/pre&gt;');\n});\n</code></pre>\n\n<p>Src: (my blog) -> <a href=\"http://james.padolsey.com/javascript/debug-jquery-events-with-listhandlers/\">http://james.padolsey.com/javascript/debug-jquery-events-with-listhandlers/</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>You could use <a href=\"http://firequery.binaryage.com/#features\">FireQuery</a>. It shows any events attached to DOM elements in the Firebug's HTML tab. It also shows any data attached to the elements through <code>$.data</code>.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Looks like FireBug crew is working on an EventBug extension. It will add another panel to FireBug - Events. </p>\n\n<p>\"The events panel will list all of the event handlers on the page grouped by event type. For each event type you can open up to see the elements the listeners are bound to and summary of the function source.\" <a href=\"http://blog.getfirebug.com/2009/09/18/eventbug-rising/\" rel=\"nofollow\" title=\"Entry on Getfirebug Blog\">EventBug Rising</a></p>\n\n<p>Although they cannot say right now when it will be released.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The Eventbug extension has been released yesterday, see:\n<a href=\"http://www.softwareishard.com/blog/firebug/eventbug-alpha-released/\">http://www.softwareishard.com/blog/firebug/eventbug-alpha-released/</a></p>\n\n<p>Honza</p>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>As a colleague suggested, console.log > alert:</p>\n\n<pre><code>var clickEvents = $('#foo').data(\"events\").click;\njQuery.each(clickEvents, function(key, value) {\n    console.log(value);\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The WebKit Developer Console (found in Chrome, Safari, etc.) lets you view attached events for elements.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/10213703/how-do-i-view-events-fired-on-an-element-in-chrome-web-developer\">More detail in this Stack Overflow question</a></p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>There are a few very good tools for debugging jquery running as Firefox plugins.  I wrote an article about this on my blog at <a href=\"http://johnayling.com/programming-tips/debugging-jquery-code\" rel=\"nofollow\">http://johnayling.com/programming-tips/debugging-jquery-code</a>.</p>\n\n<p>If you look halfway down the article I show you how to use firefinder to debug jquery events.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I also found <a href=\"https://chrome.google.com/webstore/detail/dbhhnnnpaeobfddmlalhnehgclcmjimi\" rel=\"nofollow\">jQuery Debugger</a> in the chrome store. You can click on a dom item and it will show all events bound to it along with the callback function. I was debugging an application where events weren't being removed properly and this helped me track it down in minutes. Obviously this is for chrome though, not firefox.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The bookmarklet on this page:</p>\n\n<p><a href=\"http://www.kupio.com/github.com/izb/jQuery-event-tracer/bookmarklet.html\" rel=\"nofollow\">jQuery event tracer</a></p>\n\n<p>will log jQuery events for the page you are viewing to the console.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use <code>$._data(htmlElement, \"events\")</code> in jquery 1.7+;</p>\n\n<p>ex:</p>\n\n<p><code>$._data(document, \"events\")</code> or <code>$._data($('.class_name').get(0), \"events\")</code></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Hope this will help somebody. <a href=\"http://Www.javascript-debugger.com\">Splinetech javascript debugger</a> is what I've been using for years to debug jquery.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Using DevTools in the latest Chrome (v29) I find these two tips very helpful for debugging events:</p>\n\n<ol>\n<li><p>Listing jQuery events of the <a href=\"https://developers.google.com/chrome-developer-tools/docs/console#accessing_recently_selected_elements_and_objects\" rel=\"nofollow\">last selected DOM element</a>\n<ul>\n<li>Inspect an element on the page</li>\n<li>type the following in the console: </p>\n\n<blockquote>\n  <p>$._data(<a href=\"https://developers.google.com/chrome-developer-tools/docs/console#accessing_recently_selected_elements_and_objects\" rel=\"nofollow\">$0</a>, \"events\") //assuming jQuery 1.7+</li>\n  <li>It will list all jQuery event objects associated with it, expand the interested event, right-click on the function of the \"handler\" property and choose \"Show function definition\". It will open the file containing the specified function.</li>\n  </ul></p>\n</blockquote></li>\n<li><p>Utilizing the <a href=\"https://developers.google.com/chrome-developer-tools/docs/commandline-api#monitoreventsobject_events\" rel=\"nofollow\">monitorEvents</a>() command</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://blog.getfirebug.com/2014/06/10/firebug-2-0/#dom-events-inspector\" rel=\"nofollow\">Firebug 2</a> does now incorporate DOM events debugging / inspection.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With version 2.0 Firebug introduced an <a href=\"https://getfirebug.com/wiki/index.php/Events_Side_Panel\" rel=\"nofollow\"><em>Events</em> panel</a>, which lists all events for the element currently selected within the <a href=\"https://getfirebug.com/wiki/index.php/HTML_Panel\" rel=\"nofollow\"><em>HTML</em> panel</a>. It can also display event listeners wrapped into jQuery event bindings in case the option <em>Show Wrapped Listeners</em> is checked, which you can reach via the <a href=\"https://getfirebug.com/wiki/index.php/Events_Side_Panel#Options_Menu\" rel=\"nofollow\"><em>Events</em> panel's options menu</a>.</p>\n\n<p>With that panel the workflow to debug an event handler is as follows:</p>\n\n<ol>\n<li>Select the element with the event listener you want to debug</li>\n<li>Inside the <em>Events</em> side panel right-click the function under the related event and choose <em>Set Breakpoint</em></li>\n<li>Trigger the event</li>\n</ol>\n\n<p>=> The script execution will stop at the first line of the event handler function and you can step debug it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to debug a web application that uses jQuery to do some fairly complex and messy <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a> manipulation. At one point, some of the events that were bound to particular elements, are not fired and simply stop working.</p>\n\n<p>If I had a capability to edit the application source, I would drill down and add a bunch of <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\">Firebug</a> <code>console.log()</code> statements and comment/uncomment pieces of code to try to pinpoint the problem. But let's assume I cannot edit the application code and need to work entirely in Firefox using Firebug or similar tools.</p>\n\n<p>Firebug is very good at letting me navigate and manipulate the DOM. So far, though, I have not been able to figure out how to do event debugging with Firebug. Specifically, I just want to see a list of event handlers bound to a particular element at a given time (using Firebug JavaScript breakpoints to trace the changes). But either Firebug does not have the capability to see bound events, or I'm too dumb to find it. :-)</p>\n\n<p>Any recommendations or ideas? Ideally, I would just like to see and edit events bound to elements, similarly to how I can edit DOM today.</p>\n",
            "last_activity_date": 1421612049,
            "question_id": 570960,
            "score": 468,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events",
                "event-handling",
                "firebug"
            ],
            "title": "How to debug JavaScript/jQuery event bindings with Firebug (or similar tool)"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>If you're simply trying to resize an image, I'd recommend setting <code>width</code> and <code>height</code> of the image with CSS.  Here's a quick example:</p>\n\n<pre><code>.small-image {\n    width: 100px;\n    height: 100px;\n}\n</code></pre>\n\n<p>Note that the <code>height</code> and <code>width</code> can also be set using JavaScript.  Here's quick code sample:</p>\n\n<pre><code>var img = document.getElement(\"my-image\");\nimg.style.width = 100 + \"px\";  // Make sure you add the \"px\" to the end,\nimg.style.height = 100 + \"px\"; // otherwise you'll confuse IE\n</code></pre>\n\n<p>Also, to ensure that the resized image looks good, add the following css rules to image selector:</p>\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ms530822%28VS.85%29.aspx\"><code>-ms-interpolation-mode: bicubic</code></a>: introduce in IE7</li>\n<li><a href=\"https://developer.mozilla.org/En/CSS/Image-rendering\"><code>image-rendering: optimizeQuality</code></a>: introduced in FireFox 3.6</li>\n</ul>\n\n<p>As far as I can tell, all browsers except IE using an bicubic algorithm to resize images by default, so your resized images should look good in Firefox and Chrome.</p>\n\n<p>If setting the css <code>width</code> and <code>height</code> doesn't work, you may want to play with a css <code>transform</code>:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/CSS/-moz-transform#scale\"><code>-moz-transform: scale(sx[, sy])</code></a></li>\n<li><a href=\"http://developer.apple.com/safari/library/documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/Transforms/Transforms.html\"><code>-webkit-transform:scale(sx[, sy])</code></a></li>\n</ul>\n\n<p>If for whatever reason you <em>need</em> to use a canvas, please note that there are two ways an image can be resize: by resizing the canvas with css or by drawing the image at a smaller size.</p>\n\n<p>See <a href=\"http://stackoverflow.com/questions/1977741/resizable-canvas-jquery-ui/\">this question</a> for more details.</p>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>i got this image by right clicking the canvas element in firefox and saving as.</p>\n\n<p><img src=\"http://i.stack.imgur.com/E5GfF.png\" alt=\"alt text\"></p>\n\n<pre><code>var img = new Image();\nimg.onload = function () {\n    console.debug(this.width,this.height);\n    var canvas = document.createElement('canvas'), ctx;\n    canvas.width = 188;\n    canvas.height = 150;\n    document.body.appendChild(canvas);\n    ctx = canvas.getContext('2d');\n    ctx.drawImage(img,0,0,188,150);\n};\nimg.src = 'original.jpg';\n</code></pre>\n\n<p>so anyway, here is a 'fixed' version of your example:</p>\n\n<pre><code>var img = new Image();\n// added cause it wasnt defined\nvar canvas = document.createElement(\"canvas\");\ndocument.body.appendChild(canvas);\n\nvar ctx = canvas.getContext(\"2d\");\nvar canvasCopy = document.createElement(\"canvas\");\n// adding it to the body\n\ndocument.body.appendChild(canvasCopy);\n\nvar copyContext = canvasCopy.getContext(\"2d\");\n\nimg.onload = function()\n{\n        var ratio = 1;\n\n        // defining cause it wasnt\n        var maxWidth = 188,\n            maxHeight = 150;\n\n        if(img.width &gt; maxWidth)\n                ratio = maxWidth / img.width;\n        else if(img.height &gt; maxHeight)\n                ratio = maxHeight / img.height;\n\n        canvasCopy.width = img.width;\n        canvasCopy.height = img.height;\n        copyContext.drawImage(img, 0, 0);\n\n        canvas.width = img.width * ratio;\n        canvas.height = img.height * ratio;\n        // the line to change\n        // ctx.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvas.width, canvas.height);\n        // the method signature you are using is for slicing\n        ctx.drawImage(canvasCopy, 0, 0, canvas.width, canvas.height);\n};\n\n// changed for example\nimg.src = 'original.jpg';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>So something interesting that I found a while ago while working with canvas that might be helpful:</p>\n\n<p>To resize the canvas control on its own, you need to use the <code>height=\"\"</code> and <code>width=\"\"</code> attributes (or <code>canvas.width</code>/<code>canvas.height</code> elements). If you use CSS to resize the canvas, it will actually stretch (i.e.: resize) the content of the canvas to fit the full canvas (rather than simply increasing or decreasing the area of the canvas.</p>\n\n<p>It'd be worth a shot to try drawing the image into a canvas control with the height and width attributes set to the size of the image and then using CSS to resize the canvas to the size you're looking for. Perhaps this would use a different resizing algorithm.</p>\n\n<p>It should also be noted that canvas has different effects in different browsers (and even different versions of different browsers). The algorithms and techniques used in the browsers is likely to change over time (especially with Firefox 4 and Chrome 6 coming out so soon, which will place heavy emphasis on canvas rendering performance).</p>\n\n<p>In addition, you may want to give SVG a shot, too, as it likely uses a different algorithm as well.</p>\n\n<p>Best of luck!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>So what do you do if all the browsers (actually, Chrome 5 gave me quite good one) won't give you good enough resampling quality? You implement them yourself then! Oh come on, we're entering the new age of Web 3.0, HTML5 compliant browsers, super optimized JIT javascript compilers, multi-core(\u2020) machines, with tons of memory, what are you afraid of? Hey, there's the word java in javascript, so that should guarantee the performance, right? Behold, the thumbnail generating code:</p>\n\n<pre><code>//returns a function that calculates lanczos weight\nfunction lanczosCreate(lobes){\n  return function(x){\n    if (x &gt; lobes) \n      return 0;\n    x *= Math.PI;\n    if (Math.abs(x) &lt; 1e-16) \n      return 1\n    var xx = x / lobes;\n    return Math.sin(x) * Math.sin(xx) / x / xx;\n  }\n}\n\n//elem: canvas element, img: image element, sx: scaled width, lobes: kernel radius\nfunction thumbnailer(elem, img, sx, lobes){ \n    this.canvas = elem;\n    elem.width = img.width;\n    elem.height = img.height;\n    elem.style.display = \"none\";\n    this.ctx = elem.getContext(\"2d\");\n    this.ctx.drawImage(img, 0, 0);\n    this.img = img;\n    this.src = this.ctx.getImageData(0, 0, img.width, img.height);\n    this.dest = {\n        width: sx,\n        height: Math.round(img.height * sx / img.width),\n    };\n    this.dest.data = new Array(this.dest.width * this.dest.height * 3);\n    this.lanczos = lanczosCreate(lobes);\n    this.ratio = img.width / sx;\n    this.rcp_ratio = 2 / this.ratio;\n    this.range2 = Math.ceil(this.ratio * lobes / 2);\n    this.cacheLanc = {};\n    this.center = {};\n    this.icenter = {};\n    setTimeout(this.process1, 0, this, 0);\n}\n\nthumbnailer.prototype.process1 = function(self, u){\n    self.center.x = (u + 0.5) * self.ratio;\n    self.icenter.x = Math.floor(self.center.x);\n    for (var v = 0; v &lt; self.dest.height; v++) {\n        self.center.y = (v + 0.5) * self.ratio;\n        self.icenter.y = Math.floor(self.center.y);\n        var a, r, g, b;\n        a = r = g = b = 0;\n        for (var i = self.icenter.x - self.range2; i &lt;= self.icenter.x + self.range2; i++) {\n            if (i &lt; 0 || i &gt;= self.src.width) \n                continue;\n            var f_x = Math.floor(1000 * Math.abs(i - self.center.x));\n            if (!self.cacheLanc[f_x]) \n                self.cacheLanc[f_x] = {};\n            for (var j = self.icenter.y - self.range2; j &lt;= self.icenter.y + self.range2; j++) {\n                if (j &lt; 0 || j &gt;= self.src.height) \n                    continue;\n                var f_y = Math.floor(1000 * Math.abs(j - self.center.y));\n                if (self.cacheLanc[f_x][f_y] == undefined) \n                    self.cacheLanc[f_x][f_y] = self.lanczos(Math.sqrt(Math.pow(f_x * self.rcp_ratio, 2) + Math.pow(f_y * self.rcp_ratio, 2)) / 1000);\n                weight = self.cacheLanc[f_x][f_y];\n                if (weight &gt; 0) {\n                    var idx = (j * self.src.width + i) * 4;\n                    a += weight;\n                    r += weight * self.src.data[idx];\n                    g += weight * self.src.data[idx + 1];\n                    b += weight * self.src.data[idx + 2];\n                }\n            }\n        }\n        var idx = (v * self.dest.width + u) * 3;\n        self.dest.data[idx] = r / a;\n        self.dest.data[idx + 1] = g / a;\n        self.dest.data[idx + 2] = b / a;\n    }\n\n    if (++u &lt; self.dest.width) \n        setTimeout(self.process1, 0, self, u);\n    else \n        setTimeout(self.process2, 0, self);\n};\nthumbnailer.prototype.process2 = function(self){\n    self.canvas.width = self.dest.width;\n    self.canvas.height = self.dest.height;\n    self.ctx.drawImage(self.img, 0, 0, self.dest.width, self.dest.height);\n    self.src = self.ctx.getImageData(0, 0, self.dest.width, self.dest.height);\n    var idx, idx2;\n    for (var i = 0; i &lt; self.dest.width; i++) {\n        for (var j = 0; j &lt; self.dest.height; j++) {\n            idx = (j * self.dest.width + i) * 3;\n            idx2 = (j * self.dest.width + i) * 4;\n            self.src.data[idx2] = self.dest.data[idx];\n            self.src.data[idx2 + 1] = self.dest.data[idx + 1];\n            self.src.data[idx2 + 2] = self.dest.data[idx + 2];\n        }\n    }\n    self.ctx.putImageData(self.src, 0, 0);\n    self.canvas.style.display = \"block\";\n}\n</code></pre>\n\n<p>...with which you can produce results like these!</p>\n\n<p><img src=\"http://i.stack.imgur.com/dpATi.png\" alt=\"img717.imageshack.us/img717/8910/lanczos358.png\"></p>\n\n<p>so anyway, here is a 'fixed' version of your example:</p>\n\n<pre><code>img.onload = function() {\n  var canvas = document.createElement(\"canvas\");\n  new thumbnailer(canvas, img, 188, 3); //this produces lanczos3\n  //but feel free to raise it up to 8. Your client will appreciate\n  //that the program makes full use of his machine.\n  document.body.appendChild(canvas);\n}\n</code></pre>\n\n<p>Now it's time to pit your best browsers out there and see which one will least likely increase your client's blood pressure!</p>\n\n<p>Umm, where's my sarcasm tag?</p>\n\n<p><em>(since many parts of the code is based on <a href=\"http://aggen.sourceforge.net/\" rel=\"nofollow\">Anrieff Gallery Generator</a> is it also covered under GPL2? I dunno)</em></p>\n\n<p>\u2020 <em>actually due to limitation of javascript, multi-core is not supported.</em></p>\n",
                    "is_accepted": true,
                    "score": 271
                },
                {
                    "body": "<p>I'd highly suggest you check out <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Using_images#Controlling_image_scaling_behavior\">this link</a> and make sure it is set to true.</p>\n\n<blockquote>\n  <p>Controlling image scaling behavior</p>\n  \n  <p>Introduced in Gecko 1.9.2 (Firefox 3.6\n  / Thunderbird 3.1 / Fennec 1.0)</p>\n  \n  <p>Gecko 1.9.2 introduced the\n  mozImageSmoothingEnabled property to\n  the canvas element; if this Boolean\n  value is false, images won't be\n  smoothed when scaled. This property is\n  true by default. view plainprint?</p>\n  \n  <ol>\n  <li>cx.mozImageSmoothingEnabled = false;</li>\n  </ol>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I know this is an old thread but it might be useful for some people such as myself that months after are hitting this issue for the first time.</p>\n\n<p>Here is some code that resizes the image every time you reload the image. I am aware this is not optimal at all, but I provide it as a proof of concept. </p>\n\n<p>Also, sorry for using jQuery for simple selectors but I just feel too comfortable with the syntax.</p>\n\n<pre><code>$(document).on('ready', createImage);\n$(window).on('resize', createImage);\n\nvar createImage = function(){\n    var canvas = document.getElementById('myCanvas');\n    canvas.width = window.innerWidth || $(window).width();\n    canvas.height = window.innerHeight || $(window).height();\n    var ctx = canvas.getContext('2d');\n    img = new Image();\n    img.addEventListener('load', function () {\n        ctx.drawImage(this, 0, 0, w, h);\n    });\n    img.src = 'http://www.ruinvalor.com/Telanor/images/original.jpg';\n};\n</code></pre>\n\n<p>My createImage function is called once when the document is loaded and after that it is called every time the window receives a resize event.</p>\n\n<p>Here is the CSS, BTW:</p>\n\n<pre><code>            html, body{\n            height: 100%;\n            width: 100%;\n            margin: 0;\n            padding: 0;\n            background: #000;\n        }\n        canvas{\n            position: absolute;\n            left: 0;\n            top: 0;\n            z-index: 0;\n        }\n</code></pre>\n\n<p>And here is the HTML:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;title&gt;Canvas Resize&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;canvas id=\"myCanvas\"&gt;&lt;/canvas&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I tested it in Chrome 6 and Firefox 3.6, both on the Mac. This \"technique\" eats processor as it if was ice cream in the summer, but it does the trick.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>For resizing to image with width less that original, i use:</p>\n\n<pre><code>    function resize2(i) {\n      var cc = document.createElement(\"canvas\");\n      cc.width = i.width / 2;\n      cc.height = i.height / 2;\n      var ctx = cc.getContext(\"2d\");\n      ctx.drawImage(i, 0, 0, cc.width, cc.height);\n      return cc;\n    }\n    var cc = img;\n    while (cc.width &gt; 64 * 2) {\n      cc = resize2(cc);\n    }\n    // .. than drawImage(cc, .... )\n</code></pre>\n\n<p>and it works =).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I just ran a page of side by sides comparisons and unless something has changed recently, I could see no better downsizing (scaling) using canvas vs. simple css. I tested in FF6 Mac OSX 10.7. Still slightly soft vs. the original.</p>\n\n<p>I did however stumble upon something that did make a huge difference and that was using image filters in browsers that support canvas. You can actually manipulate images much like you can in Photoshop with blur, sharpen, saturation, ripple, grayscale, etc.</p>\n\n<p>I then found an awesome jQuery plug-in which makes application of these filters a snap:\n<a href=\"http://codecanyon.net/item/jsmanipulate-jquery-image-manipulation-plugin/428234\" rel=\"nofollow\">http://codecanyon.net/item/jsmanipulate-jquery-image-manipulation-plugin/428234</a></p>\n\n<p>I simply apply the sharpen filter right after resizing the image which should give you the desired effect. I didn't even have to use a canvas element.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've put up some algorithms to do image interpolation on html canvas pixel arrays that might be useful here:</p>\n\n<p><a href=\"http://jsperf.com/pixel-interpolation/2\">http://jsperf.com/pixel-interpolation/2</a></p>\n\n<p>These can be copy/pasted and can be used inside of web workers to resize images (or any other operation that requires interpolation - I'm using them to defish images at the moment).</p>\n\n<p>I haven't added the lanczos stuff above, so feel free to add that as a comparison if you'd like.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This is a javascript function adapted from @Telanor's code. When passing a image base64 as first argument to the function, it returns the base64 of the resized image. maxWidth and maxHeight are optional.</p>\n\n<pre><code>function thumbnail(base64, maxWidth, maxHeight) {\n\n  // Max size for thumbnail\n  if(typeof(maxWidth) === 'undefined') var maxWidth = 500;\n  if(typeof(maxHeight) === 'undefined') var maxHeight = 500;\n\n  // Create and initialize two canvas\n  var canvas = document.createElement(\"canvas\");\n  var ctx = canvas.getContext(\"2d\");\n  var canvasCopy = document.createElement(\"canvas\");\n  var copyContext = canvasCopy.getContext(\"2d\");\n\n  // Create original image\n  var img = new Image();\n  img.src = base64;\n\n  // Determine new ratio based on max size\n  var ratio = 1;\n  if(img.width &gt; maxWidth)\n    ratio = maxWidth / img.width;\n  else if(img.height &gt; maxHeight)\n    ratio = maxHeight / img.height;\n\n  // Draw original image in second canvas\n  canvasCopy.width = img.width;\n  canvasCopy.height = img.height;\n  copyContext.drawImage(img, 0, 0);\n\n  // Copy and resize second canvas to first canvas\n  canvas.width = img.width * ratio;\n  canvas.height = img.height * ratio;\n  ctx.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvas.width, canvas.height);\n\n  return canvas.toDataURL();\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Opacity fixed, unrolled all for performance. <a href=\"http://goo.gl/J7lJU\" rel=\"nofollow\">JsFiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Thanks @syockit for an awesome answer. however, I had to reformat a little as follows to make it work. Perhaps due to DOM scanning issues:</p>\n\n<pre><code>$(document).ready(function () {\n\n$('img').on(\"load\", clickA);\nfunction clickA() {\n    var img = this;\n    var canvas = document.createElement(\"canvas\");\n    new thumbnailer(canvas, img, 50, 3);\n    document.body.appendChild(canvas);\n}\n\nfunction thumbnailer(elem, img, sx, lobes) {\n    this.canvas = elem;\n    elem.width = img.width;\n    elem.height = img.height;\n    elem.style.display = \"none\";\n    this.ctx = elem.getContext(\"2d\");\n    this.ctx.drawImage(img, 0, 0);\n    this.img = img;\n    this.src = this.ctx.getImageData(0, 0, img.width, img.height);\n    this.dest = {\n        width: sx,\n        height: Math.round(img.height * sx / img.width),\n    };\n    this.dest.data = new Array(this.dest.width * this.dest.height * 3);\n    this.lanczos = lanczosCreate(lobes);\n    this.ratio = img.width / sx;\n    this.rcp_ratio = 2 / this.ratio;\n    this.range2 = Math.ceil(this.ratio * lobes / 2);\n    this.cacheLanc = {};\n    this.center = {};\n    this.icenter = {};\n    setTimeout(process1, 0, this, 0);\n}\n\n//returns a function that calculates lanczos weight\nfunction lanczosCreate(lobes) {\n    return function (x) {\n        if (x &gt; lobes)\n            return 0;\n        x *= Math.PI;\n        if (Math.abs(x) &lt; 1e-16)\n            return 1\n        var xx = x / lobes;\n        return Math.sin(x) * Math.sin(xx) / x / xx;\n    }\n}\n\nprocess1 = function (self, u) {\n    self.center.x = (u + 0.5) * self.ratio;\n    self.icenter.x = Math.floor(self.center.x);\n    for (var v = 0; v &lt; self.dest.height; v++) {\n        self.center.y = (v + 0.5) * self.ratio;\n        self.icenter.y = Math.floor(self.center.y);\n        var a, r, g, b;\n        a = r = g = b = 0;\n        for (var i = self.icenter.x - self.range2; i &lt;= self.icenter.x + self.range2; i++) {\n            if (i &lt; 0 || i &gt;= self.src.width)\n                continue;\n            var f_x = Math.floor(1000 * Math.abs(i - self.center.x));\n            if (!self.cacheLanc[f_x])\n                self.cacheLanc[f_x] = {};\n            for (var j = self.icenter.y - self.range2; j &lt;= self.icenter.y + self.range2; j++) {\n                if (j &lt; 0 || j &gt;= self.src.height)\n                    continue;\n                var f_y = Math.floor(1000 * Math.abs(j - self.center.y));\n                if (self.cacheLanc[f_x][f_y] == undefined)\n                    self.cacheLanc[f_x][f_y] = self.lanczos(Math.sqrt(Math.pow(f_x * self.rcp_ratio, 2) + Math.pow(f_y * self.rcp_ratio, 2)) / 1000);\n                weight = self.cacheLanc[f_x][f_y];\n                if (weight &gt; 0) {\n                    var idx = (j * self.src.width + i) * 4;\n                    a += weight;\n                    r += weight * self.src.data[idx];\n                    g += weight * self.src.data[idx + 1];\n                    b += weight * self.src.data[idx + 2];\n                }\n            }\n        }\n        var idx = (v * self.dest.width + u) * 3;\n        self.dest.data[idx] = r / a;\n        self.dest.data[idx + 1] = g / a;\n        self.dest.data[idx + 2] = b / a;\n    }\n\n    if (++u &lt; self.dest.width)\n        setTimeout(process1, 0, self, u);\n    else\n        setTimeout(process2, 0, self);\n};\n\nprocess2 = function (self) {\n    self.canvas.width = self.dest.width;\n    self.canvas.height = self.dest.height;\n    self.ctx.drawImage(self.img, 0, 0);\n    self.src = self.ctx.getImageData(0, 0, self.dest.width, self.dest.height);\n    var idx, idx2;\n    for (var i = 0; i &lt; self.dest.width; i++) {\n        for (var j = 0; j &lt; self.dest.height; j++) {\n            idx = (j * self.dest.width + i) * 3;\n            idx2 = (j * self.dest.width + i) * 4;\n            self.src.data[idx2] = self.dest.data[idx];\n            self.src.data[idx2 + 1] = self.dest.data[idx + 1];\n            self.src.data[idx2 + 2] = self.dest.data[idx + 2];\n        }\n    }\n    self.ctx.putImageData(self.src, 0, 0);\n    self.canvas.style.display = \"block\";\n}\n</code></pre>\n\n<p>});</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Fast image resize/resample algorithm using <strong>Hermite</strong> filter with JavaScript. Support transparency, gives good quality. Preview: (done in 0.051s). \n<br /><br /><img src=\"http://i.stack.imgur.com/oek4l.png\" alt=\"enter image description here\"><br /></p>\n\n<p>Web workers version with multi-threading included in link below, but for now they (or code) are slower. </p>\n\n<p><strong>Edit</strong>: i tried to optimize  web workers with multi-threading, results: about 30% smaller time when using PC with 4  CPU cores, 0% gain using 2 cores, and almost 100% loss using 1 core. Result: i stoped working on that, unless problems below will be fixed.</p>\n\n<p>There are 2 main problems with multi-threading:<br />\n1. shared memory (aka transferable objects - <code>worker.postMessage(var, [var])</code> do not work with images and return nice response: <code>Error: DataCloneError: The object could not be cloned.</code>\n2. There are no stable ways find count of CPU cores with JS.</p>\n\n<p>Git: <a href=\"https://github.com/viliusle/Hermite-resize\">https://github.com/viliusle/Hermite-resize</a><br />\nDemo: <a href=\"http://viliusle.github.io/miniPaint/\">http://viliusle.github.io/miniPaint/</a></p>\n\n<pre><code>function resample_hermite(canvas, W, H, W2, H2){\n    var time1 = Date.now();\n    W2 = Math.round(W2);\n    H2 = Math.round(H2);\n    var img = canvas.getContext(\"2d\").getImageData(0, 0, W, H);\n    var img2 = canvas.getContext(\"2d\").getImageData(0, 0, W2, H2);\n    var data = img.data;\n    var data2 = img2.data;\n    var ratio_w = W / W2;\n    var ratio_h = H / H2;\n    var ratio_w_half = Math.ceil(ratio_w/2);\n    var ratio_h_half = Math.ceil(ratio_h/2);\n\n    for(var j = 0; j &lt; H2; j++){\n        for(var i = 0; i &lt; W2; i++){\n            var x2 = (i + j*W2) * 4;\n            var weight = 0;\n            var weights = 0;\n            var weights_alpha = 0;\n            var gx_r = gx_g = gx_b = gx_a = 0;\n            var center_y = (j + 0.5) * ratio_h;\n            for(var yy = Math.floor(j * ratio_h); yy &lt; (j + 1) * ratio_h; yy++){\n                var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;\n                var center_x = (i + 0.5) * ratio_w;\n                var w0 = dy*dy //pre-calc part of w\n                for(var xx = Math.floor(i * ratio_w); xx &lt; (i + 1) * ratio_w; xx++){\n                    var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;\n                    var w = Math.sqrt(w0 + dx*dx);\n                    if(w &gt;= -1 &amp;&amp; w &lt;= 1){\n                        //hermite filter\n                        weight = 2 * w*w*w - 3*w*w + 1;\n                        if(weight &gt; 0){\n                            dx = 4*(xx + yy*W);\n                            //alpha\n                            gx_a += weight * data[dx + 3];\n                            weights_alpha += weight;\n                            //colors\n                            if(data[dx + 3] &lt; 255)\n                                weight = weight * data[dx + 3] / 250;\n                            gx_r += weight * data[dx];\n                            gx_g += weight * data[dx + 1];\n                            gx_b += weight * data[dx + 2];\n                            weights += weight;\n                            }\n                        }\n                    }       \n                }\n            data2[x2]     = gx_r / weights;\n            data2[x2 + 1] = gx_g / weights;\n            data2[x2 + 2] = gx_b / weights;\n            data2[x2 + 3] = gx_a / weights_alpha;\n            }\n        }\n    console.log(\"hermite = \"+(Math.round(Date.now() - time1)/1000)+\" s\");\n    canvas.getContext(\"2d\").clearRect(0, 0, Math.max(W, W2), Math.max(H, H2));\n    canvas.getContext(\"2d\").putImageData(img2, 0, 0);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Here is also a great solution which does not loose quality.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/18922880/html5-canvas-resize-downscale-image-high-quality\">HTML5 Canvas Resize (Downscale) Image High Quality?</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have a feeling the module I wrote will produce similar results to photoshop, as it preserves color data by averaging them, not applying an algorithm.  It's kind of slow, but to me it is the best, because it preserves all the color data.</p>\n\n<p><a href=\"https://github.com/danschumann/limby-resize/blob/master/lib/canvas_resize.js\" rel=\"nofollow\">https://github.com/danschumann/limby-resize/blob/master/lib/canvas_resize.js</a></p>\n\n<p>It doesn't take the nearest neighbor and drop other pixels, or sample a group and take a random average.  It takes the exact proportion each source pixel should output into the destination pixel.  The average pixel color in the source will be the average pixel color in the destination, which these other formulas, I think they will not be.</p>\n\n<p>an example of how to use is at the bottom of \n<a href=\"https://github.com/danschumann/limby-resize\" rel=\"nofollow\">https://github.com/danschumann/limby-resize</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Looking for another great simple solution?</p>\n\n<pre><code>var img=document.createElement('img');\nimg.src=canvas.toDataURL();\n$(img).css(\"background\", backgroundColor);\n$(img).width(settings.width);\n$(img).height(settings.height);\n</code></pre>\n\n<p>This solution will use the resize algorith of browser! :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The problem with some of this solutions is that they access directly the pixel data and loop through it to perform the downsampling. Depending on the size of the image this can be very resource intensive, and it would be better to use the browser's internal algorithms.</p>\n\n<p>The <strong>drawImage()</strong> function is using a linear-interpolation, nearest-neighbor resampling method. That <strong>works well when you are not resizing down more than half the original size</strong>.</p>\n\n<p>If you loop to only resize max one half at a time, the results would be quite good, and much faster than accessing pixel data.</p>\n\n<p>This function downsample to half at a time until reaching the desired size:</p>\n\n<pre><code>  function resize_image( src, dst, type, quality ) {\n     var tmp = new Image(),\n         canvas, context, cW, cH;\n\n     type = type || 'image/jpeg';\n     quality = quality || 0.92;\n\n     cW = src.naturalWidth;\n     cH = src.naturalHeight;\n\n     tmp.src = src.src;\n     tmp.onload = function() {\n\n        canvas = document.createElement( 'canvas' );\n\n        cW /= 2;\n        cH /= 2;\n\n        if ( cW &lt; src.width ) cW = src.width;\n        if ( cH &lt; src.height ) cH = src.height;\n\n        canvas.width = cW;\n        canvas.height = cH;\n        context = canvas.getContext( '2d' );\n        context.drawImage( tmp, 0, 0, cW, cH );\n\n        dst.src = canvas.toDataURL( type, quality );\n\n        if ( cW &lt;= src.width || cH &lt;= src.height )\n           return;\n\n        tmp.src = dst.src;\n     }\n\n  }\n  // The images sent as parameters can be in the DOM or be image objects\n  resize_image( $( '#original' )[0], $( '#smaller' )[0] );\n</code></pre>\n\n<p>Credits to <a href=\"http://www.benknowscode.com/2014/01/resizing-images-in-browser-using-canvas.html\" rel=\"nofollow\">this post</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I converted @syockit's answer as well as the step-down approach into a reusable Angular service for anyone who's interested:  <a href=\"https://gist.github.com/fisch0920/37bac5e741eaec60e983\" rel=\"nofollow\">https://gist.github.com/fisch0920/37bac5e741eaec60e983</a></p>\n\n<p>I included both solutions because they both have their own pros / cons.  The lanczos convolution approach is higher quality at the cost of being slower, whereas the step-wise downscaling approach produces reasonably antialiased results and is significantly faster.</p>\n\n<p>Example usage:</p>\n\n<pre><code>angular.module('demo').controller('ExampleCtrl', function (imageService) {\n  // EXAMPLE USAGE\n  // NOTE: it's bad practice to access the DOM inside a controller, \n  // but this is just to show the example usage.\n\n  // resize by lanczos-sinc filter\n  imageService.resize($('#myimg')[0], 256, 256)\n    .then(function (resizedImage) {\n      // do something with resized image\n    })\n\n  // resize by stepping down image size in increments of 2x\n  imageService.resizeStep($('#myimg')[0], 256, 256)\n    .then(function (resizedImage) {\n      // do something with resized image\n    })\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try <a href=\"https://github.com/nodeca/pica\" rel=\"nofollow\">pica</a> - that's a highly optimized resizer with selectable algorythms. See <a href=\"http://nodeca.github.io/pica/demo/\" rel=\"nofollow\">demo</a>. </p>\n\n<p>For example, original image from first post is resized in 120ms with Lanczos filter and 3px window or 60ms with Box filter and 0.5px window. For huge 17mb image 5000x3000px resize takes ~1s on desktop and 3s on mobile.</p>\n\n<p>All resize principles were described very well in this thread, and pica does not add rocket science. But it's optimized very well for modern JIT-s, and is ready to use out of box (via npm or bower). Also, it use webworkers when available to avoid interface freezes.</p>\n\n<p>I also plan to add unsharp mask support soon, because it's very useful after downscale.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm trying to create a thumbnail image on the client side using javascript and a canvas element, but when I shrink the image down, it looks terrible.  It looks as if it was downsized in photoshop with the resampling set to 'Nearest Neighbor' instead of Bicubic.  I know its possible to get this to look right, because <a href=\"http://editor.pixastic.com/\">this site</a> can do it just fine using a canvas as well.  I've tried using the same code they do as shown in the \"[Source]\" link, but it still looks terrible.  Is there something I'm missing, some setting that needs to be set or something?</p>\n\n<p>EDIT:</p>\n\n<p>I'm trying to resize a jpg.  I have tried resizing the same jpg on the linked site and in photoshop, and it looks fine when downsized.</p>\n\n<p>Here is the relevant code:</p>\n\n<pre><code>reader.onloadend = function(e)\n{\n    var img = new Image();\n    var ctx = canvas.getContext(\"2d\");\n    var canvasCopy = document.createElement(\"canvas\");\n    var copyContext = canvasCopy.getContext(\"2d\");\n\n    img.onload = function()\n    {\n        var ratio = 1;\n\n        if(img.width &gt; maxWidth)\n            ratio = maxWidth / img.width;\n        else if(img.height &gt; maxHeight)\n            ratio = maxHeight / img.height;\n\n        canvasCopy.width = img.width;\n        canvasCopy.height = img.height;\n        copyContext.drawImage(img, 0, 0);\n\n        canvas.width = img.width * ratio;\n        canvas.height = img.height * ratio;\n        ctx.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvas.width, canvas.height);\n    };\n\n    img.src = reader.result;\n}\n</code></pre>\n\n<p>EDIT2:</p>\n\n<p>Seems I was mistaken, the linked website wasn't doing any better of a job of downsizing the image.  I tried the other methods suggested and none of them look any better.  This is what the different methods resulted in:</p>\n\n<p>Photoshop:</p>\n\n<p><img src=\"http://i.stack.imgur.com/K6ztq.png\" alt=\"alt text\"></p>\n\n<p>Canvas:</p>\n\n<p><img src=\"http://i.stack.imgur.com/nD3FJ.png\" alt=\"alt text\"></p>\n\n<p>Image with image-rendering: optimizeQuality set and scaled with width/height:</p>\n\n<p><img src=\"http://i.stack.imgur.com/I6RkV.png\" alt=\"alt text\"></p>\n\n<p>Image with image-rendering: optimizeQuality set and scaled with -moz-transform:</p>\n\n<p><img src=\"http://i.stack.imgur.com/ZWiVC.png\" alt=\"alt text\"></p>\n\n<p>Canvas resize on pixastic:</p>\n\n<p><img src=\"http://i.stack.imgur.com/PEsYM.png\" alt=\"alt text\"></p>\n\n<p>I guess this means firefox isn't using bicubic sampling like its supposed to.  I'll just have to wait until they actually add it.</p>\n\n<p>EDIT3:</p>\n\n<p><a href=\"http://i.stack.imgur.com/5x1UP.jpg\">Original Image</a></p>\n",
            "last_activity_date": 1422612270,
            "question_id": 2303690,
            "score": 193,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "image-resizing"
            ],
            "title": "Resizing an image in an HTML5 canvas"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I don't think there's a native <code>trim()</code> method in the JavaScript standard. Maybe Mozilla supplies one, but if you want one in IE, you'll need to write it yourself. There are a few versions on <a href=\"http://blog.stevenlevithan.com/archives/faster-trim-javascript\" rel=\"nofollow\">this page</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/String/Trim\">https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/String/Trim</a></p>\n\n<p>This is a pretty recent addition to javascript, and its not supported by IE.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>It looks like that function isn't implemented in IE. If you're using jQuery, you could use <code>$.trim()</code> instead (<a href=\"http://api.jquery.com/jQuery.trim/\">http://api.jquery.com/jQuery.trim/</a>).</p>\n",
                    "is_accepted": false,
                    "score": 177
                },
                {
                    "body": "<p>Add the following code to add trim functionality to the string.</p>\n\n<pre><code>if(typeof String.prototype.trim !== 'function') {\n  String.prototype.trim = function() {\n    return this.replace(/^\\s+|\\s+$/g, ''); \n  }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 628
                },
                {
                    "body": "<p>Unfortunately there is not cross browser JavaScript support for trim().</p>\n\n<p>If you aren't using jQuery (which has a .trim() method) you can use the following methods to add trim support to strings:</p>\n\n<pre><code>String.prototype.trim = function() {\n    return this.replace(/^\\s+|\\s+$/g,\"\");\n}\nString.prototype.ltrim = function() {\n    return this.replace(/^\\s+/,\"\");\n}\nString.prototype.rtrim = function() {\n    return this.replace(/\\s+$/,\"\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<pre><code>var res = function(str){\n    var ob; var oe;\n    for(var i = 0; i &lt; str.length; i++){\n        if(str.charAt(i) != \" \" &amp;&amp; ob == undefined){ob = i;}\n        if(str.charAt(i) != \" \"){oe = i;}\n    }\n    return str.substring(ob,oe+1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had a similar issue when trying to trim a value from an input and then ask if it was equal to nothing:</p>\n\n<pre><code>if ($(this).val().trim() == \"\")\n</code></pre>\n\n<p>However this threw a spanner in the works for IE6 - 8. Annoyingly enough I'd tried to var it up like so: </p>\n\n<pre><code>   var originalValue = $(this).val();\n</code></pre>\n\n<p><strong>So I used jQuery's trim method, which works perfectly for me in all browsers...</strong> </p>\n\n<pre><code>var originalValueTrimmed = $.trim($(this).val());              \n            if (originalValueTrimmed  == \"\") { ... }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Just found out that IE stops supporting <code>trim()</code>, probably after a recent windows update. If you use dojo, you can use <code>dojo.string.trim()</code>, it works cross platform.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>jQuery:</p>\n\n<pre><code>$.trim( $(\"#mycomment\").val() );\n</code></pre>\n\n<p>Someone uses <code>$(\"#mycomment\").val().trim();</code> but this will not work on IE.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>I have written some code to implement the trim functionality.</p>\n\n<p><strong>LTRIM</strong> (trim left):</p>\n\n<pre><code>function ltrim(s)\n{\n    var l=0;\n    while(l &lt; s.length &amp;&amp; s[l] == ' ')\n    {   l++; }\n    return s.substring(l, s.length);\n} \n</code></pre>\n\n<p><strong>RTRIM</strong> (trim right):</p>\n\n<pre><code>function rtrim(s)\n{\n    var r=s.length -1;\n    while(r &gt; 0 &amp;&amp; s[r] == ' ')\n    {   r-=1;   }\n    return s.substring(0, r+1);\n }\n</code></pre>\n\n<p><strong>TRIM</strong> (trim both sides):</p>\n\n<pre><code>function trim(s)\n{\n    return rtrim(ltrim(s));\n}\n</code></pre>\n\n<p><strong>OR</strong> </p>\n\n<p>Regular expression is also available which we can use.</p>\n\n<pre><code>function trimStr(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/a/3387111/168175\">Useful Explanation</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I had the same problem in IE9\nHowever when I declared the supported html version with the following tag  on the first line before the </p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;HTML&gt;\n&lt;HEAD&gt;...\n.\n.\n</code></pre>\n\n<p>The problem was resolved.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>We can get official code From the internet!\nRefer this:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim</a></p>\n\n<blockquote>\n  <p>Running the following code before any other code will create trim() if it's not natively available.</p>\n\n<pre><code>if (!String.prototype.trim) {\n  (function() {\n    // Make sure we trim BOM and NBSP\n    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    String.prototype.trim = function() {\n      return this.replace(rtrim, '');\n    };\n  })();\n}\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I tried to apply <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/trim\"><code>.trim()</code></a> to a string in one of my JavaScript programs. It's working fine under Mozilla, but an error displays when I try it in IE8.  Does anyone know what is going on here? Is there anyway I can make it work in IE?</p>\n\n<h3>code:</h3>\n\n<pre><code>var ID = document.getElementByID('rep_id').value.trim();\n</code></pre>\n\n<h3>error display:</h3>\n\n<pre>Message: Object doesn't support this property or method\nLine: 604\nChar: 2\nCode: 0\nURI: http://test.localhost/test.js</pre>\n",
            "last_activity_date": 1426131931,
            "question_id": 2308134,
            "score": 374,
            "tags": [
                "javascript",
                "internet-explorer",
                "trim"
            ],
            "title": ".trim() in JavaScript not working in IE"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Use <code>document.activeElement</code>, it is supported in all major browsers.</p>\n\n<p>Previously, if you were trying to find out what form field has focus, you could not. To emulate detection within older browsers, add a \"focus\" event handler to all fields and record the last-focused field in a variable. Add a \"blur\" handler to clear the variable upon a blur event for the last-focused field.</p>\n\n<p>Related links:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/DOM/document.activeElement#Browser_compatibility\">activeElement Browser Compatibility</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3328320/jquery-alternative-for-document-activeelement\">jQuery alternative for document.activeElement</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 496
                },
                {
                    "body": "<p>As said by JW, you can't find the current focused element, at least in a browser-independent way. But if your app is IE only (some are...), you can find it the following way :</p>\n\n<pre><code>document.activeElement\n</code></pre>\n\n<p>EDIT: It looks like IE did not have everything wrong after all, this is part of HTML5 draft and seems to be supported by the latest version of Chrome, Safari and Firefox at least.</p>\n",
                    "is_accepted": false,
                    "score": 83
                },
                {
                    "body": "<p>Just putting this here to give the solution I eventually came up with.</p>\n\n<p>I created a property called document.activeInputArea, and used jQuery's HotKeys addon to trap keyboard events for arrow keys, tab and enter, and I created an event handler for clicking into input elements.</p>\n\n<p>Then I adjusted the activeInputArea every time focus changed, so I could use that property to find out where I was.</p>\n\n<p>It's easy to screw this up though, because if you have a bug in the system and focus isn't where you think it is, then its very hard to restore the correct focus.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A little helper that I've used for these purposes in Mootools:</p>\n\n<pre><code>FocusTracker = {\n    startFocusTracking: function() {\n       this.store('hasFocus', false);\n       this.addEvent('focus', function() { this.store('hasFocus', true); });\n       this.addEvent('blur', function() { this.store('hasFocus', false); });\n    },\n\n    hasFocus: function() {\n       return this.retrieve('hasFocus');\n    }\n}\n\nElement.implement(FocusTracker);\n</code></pre>\n\n<p>This way you can check if element has focus with <code>el.hasFocus()</code> provided that <code>startFocusTracking()</code> has been called on the given element. </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I liked the approach used by Joel S, but I also love the simplicity of <code>document.activeElement</code>. I used jQuery and combined the two. Older browsers that don't support <code>document.activeElement</code> will use <code>jQuery.data()</code> to store the value of 'hasFocus'. Newer browsers will use <code>document.activeElement</code>. I assume that <code>document.activeElement</code> will have better performance.</p>\n\n<pre><code>(function($) {\nvar settings;\n$.fn.focusTracker = function(options) {\n    settings = $.extend({}, $.focusTracker.defaults, options);\n\n    if (!document.activeElement) {\n        this.each(function() {\n            var $this = $(this).data('hasFocus', false);\n\n            $this.focus(function(event) {\n                $this.data('hasFocus', true);\n            });\n            $this.blur(function(event) {\n                $this.data('hasFocus', false);\n            });\n        });\n    }\n    return this;\n};\n\n$.fn.hasFocus = function() {\n    if (this.length === 0) { return false; }\n    if (document.activeElement) {\n        return this.get(0) === document.activeElement;\n    }\n    return this.data('hasFocus');\n};\n\n$.focusTracker = {\n    defaults: {\n        context: 'body'\n    },\n    focusedElement: function(context) {\n        var focused;\n        if (!context) { context = settings.context; }\n        if (document.activeElement) {\n            if ($(document.activeElement).closest(context).length &gt; 0) {\n                focused = document.activeElement;\n            }\n        } else {\n            $(':visible:enabled', context).each(function() {\n                if ($(this).data('hasFocus')) {\n                    focused = this;\n                    return false;\n                }\n            });\n        }\n        return $(focused);\n    }\n};\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>JQuery does support the <code>:focus</code> pseudo-class as of current.  If you are looking for it in the JQuery documentation, check under \"Selectors\" where it points you to the <a href=\"http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\" rel=\"nofollow\">W3C CSS docs</a>.  I've tested with Chrome, FF, and IE 7+.  Note that for it to work in IE, <code>&lt;!DOCTYPE...</code> must exist on the html page.  Here is an example assuming you've assigned an id to the element that has focus:</p>\n\n<pre><code>$(\":focus\").each(function() {\n  alert($(this).attr(\"id\") + \" has focus!\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Reading other answers, and trying myself, it seems <code>document.activeElement</code> will give you the element you need in most browsers.</p>\n\n<p>If you have a browser that doesn't support document.activeElement if you have jQuery around, you should be able populate it on all focus events with something very simple like this (untested as I don't have a browser meeting those criteria to hand):</p>\n\n<pre><code>if (typeof document.activeElement === 'undefined') { // Check browser doesn't do it anyway\n  $('*').live('focus', function () { // Attach to all focus events using .live()\n    document.activeElement = this; // Set activeElement to the element that has been focussed\n  });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you can use jQuery, it now supports :focus, just make sure you are using version 1.6+.</p>\n\n<p>This statement will get you the currently focused element.</p>\n\n<pre><code>$(\"*:focus\")\n</code></pre>\n\n<p>From: <a href=\"http://stackoverflow.com/questions/516152/how-to-select-an-element-that-has-focus-on-it-with-jquery/2061798#2061798\">How to select an element that has focus on it with jQuery</a></p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p><code>document.activeElement</code> is now <a href=\"http://www.w3.org/TR/html5/editing.html#dom-document-activeelement\">part of the HTML5 working draft</a> specification, but it might not yet be supported in some non-major/mobile/older browsers.  You can fall back to <code>querySelector</code> (if that is supported).  It's also worth mentioning that <code>document.activeElement</code> will return <code>document.body</code> if no element is focused &mdash; even if the browser window doesn't have focus.</p>\n\n<p>The following code will work around this issue and fall back to <code>querySelector</code> giving a little better support.</p>\n\n<pre><code>var focused = document.activeElement;\nif (!focused || focused == document.body)\n    focused = null;\nelse if (document.querySelector)\n    focused = document.querySelector(\":focus\");\n</code></pre>\n\n<p>An addition thing to note is the performance difference between these two methods.  Querying the document with selectors will always be much slower than accessing the <code>activeElement</code> property.  See this <a href=\"http://jsperf.com/focus-pseudo-class-vs-activeelement\">jsperf.com test</a>.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>With dojo, you can use dijit.getFocus()</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're using jQuery, you can use this to find out if an element is active:</p>\n\n<pre><code>$(\"input#id\").is(\":active\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Google Chrome(at least up to 33) has an annoying bug with <code>document.activeElement</code>: in XHTML documents, <code>document.activeElement</code> is <code>undefined</code>. I have not tested other webkit based browsers, they may be also affected.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>document.activeElement</code> may default to the <code>&lt;body&gt;</code> element if no focusable elements are in focus. Additionally, if an element is focused and the browser window is blurred, <code>activeElement</code> will continue to hold the focused element.</p>\n\n<p>If either of these two behaviors are not desirable, consider a CSS-based approach: <code>document.querySelector( ':focus' )</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are potential problems with using document.activeElement. Consider:</p>\n\n<pre><code>&lt;div contentEditable=\"true\"&gt;\n  &lt;div&gt;Some text&lt;/div&gt;\n  &lt;div&gt;Some text&lt;/div&gt;\n  &lt;div&gt;Some text&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>If the user focuses on an inner-div, then document.activeElement still references the outer div. You cannot use document.activeElement to determine which of the inner div's has focus.</p>\n\n<p>The following function gets around this, and returns the focused node:</p>\n\n<pre><code>function active_node(){\n  return window.getSelection().anchorNode;\n}\n</code></pre>\n\n<p>If you would rather get the focused element, use:</p>\n\n<pre><code>function active_element(){\n  var anchor = window.getSelection().anchorNode;\n  if(anchor.nodeType == 3){\n        return anchor.parentNode;\n  }else if(anchor.nodeType == 1){\n        return anchor;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to find out, in Javascript, which element currently has focus. I've been looking through the DOM and haven't found what I need, yet. Is there a way to do this, and how?</p>\n\n<p>The reason I was looking for this:</p>\n\n<p>What I'm trying to do is make keys like the arrows and enter navigate through a table of input elements. Tab works now, but enter and arrows do not by default it seems. I've got the key handling part set up but now I need to figure out how to move the focus over in the event handling functions.</p>\n",
            "last_activity_date": 1425195418,
            "question_id": 497094,
            "score": 454,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "How do I find out which DOM element has the focus?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p><a href=\"https://blogs.msdn.com/b/ie/archive/2011/07/06/html5-parsing-in-ie10.aspx\" rel=\"nofollow\">Internet Explorer 10 does not attempt to read conditional comments anymore.</a> This means it will treat conditional comments just like any other browser would: as regular HTML comments, meant to be ignored entirely. Looking at the markup given in the question as an example, all browsers including IE10 will ignore the comment portions, highlighted gray, entirely. The HTML5 standard makes no mention of conditional comment syntax, and this is exactly why they have chosen to stop supporting it in IE10.</p>\n\n<p>Note, however, that <a href=\"http://msdn.microsoft.com/en-us/library/121hztk3.aspx\" rel=\"nofollow\">conditional compilation</a> in JScript is still supported, as shown in the comments as well as the more recent answers. It's not going away in the final release either, <a href=\"http://jquery.com/upgrade-guide/1.9/#jquery-browser-removed\" rel=\"nofollow\">unlike <code>jQuery.browser</code></a>. And of course, it goes without saying that user-agent sniffing remains as fragile as ever and should never be used under any circumstances.</p>\n\n<p>If you really must target IE10, either use conditional compilation which may still see support in the near future, or \u2014 <a href=\"http://www.modern.ie/en-us/cross-browser-best-practices\" rel=\"nofollow\">better yet</a> \u2014 use a feature detection library such as <a href=\"http://modernizr.com\" rel=\"nofollow\">Modernizr</a> instead of browser detection. Sounds pretty cumbersome, but remember that as a modern browser that's highly conformant to today's Web standards<sup>1</sup>, assuming you've written interoperable code that is highly standards-compliant, you <em>shouldn't</em> have to set aside special code for IE10 unless absolutely necessary, i.e. it's supposed to resemble other browsers in terms of behavior and rendering.<sup>2</sup> And it sounds far-fetched, given IE's history, but how many times have you expected Firefox or Chrome to behave the same way only to be met with dismay?</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/5828926/firefox-4-ignoring-box-sizing\">Firefox did not support <code>box-sizing</code> unprefixed for years</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10662902/css-outline-different-behavior-behavior-on-webkit-gecko\">Firefox has historically had weird outline behavior</a>, and this was also the case for years</li>\n<li><a href=\"http://stackoverflow.com/questions/5148041/does-firefox-support-position-relative-on-table-elements\">Firefox still doesn't know what to do with positioned table-cells</a>, since the behavior is largely undefined, even though other browsers appear to cope just fine</li>\n<li>Safari and Chrome have <a href=\"http://stackoverflow.com/questions/5061509/why-doesnt-this-css-selector-work-ahover-span\">lots</a> <a href=\"http://stackoverflow.com/questions/5317658/last-childafter-not-rendering-in-chrome-pseudo-element-use-issue\">of</a> <a href=\"http://stackoverflow.com/questions/6655364/css-attribute-selector-descendant-gives-a-bug-in-webkit\">trouble</a> <a href=\"http://stackoverflow.com/questions/8320530/webkit-bug-with-hover-and-multiple-adjacent-sibling-selectors\">with</a> <a href=\"http://stackoverflow.com/questions/8951822/combine-css-attribute-and-pseudo-element-selectors\">certain</a> <a href=\"http://stackoverflow.com/questions/17219286/why-does-the-general-sibling-combinator-allow-toggling-pseudo-elements-content\">CSS</a> <a href=\"http://stackoverflow.com/questions/20335187/complex-selector-dont-work-in-last-blink-version-nth-child2nth-last-child2\">selectors</a>, sometimes with fixes that <a href=\"http://www.positioniseverything.net/explorer.html\" rel=\"nofollow\">really take you back to the good ol' days of IE5, IE6 and IE7</a></li>\n<li>Chrome seems to have lots of trouble in the repainting department in general, for example not reflowing layouts correctly when media styles are updated; it seems that half of Chrome's bugs can be worked around simply and only by forcing a repaint, again IE5/6/7-level stuff</li>\n<li>A few strains of WebKit have been known to outright <em>lie</em> about support for certain features, meaning they actually <em>defeat feature detection mechanisms</em>, of all things</li>\n</ul>\n\n<p>If you <em>do</em> have a legitimate reason to be targeting certain browsers, by all means use the alternatives that exist. I'm just saying that you're going to be much more hard-pressed to find such a reason today than what it used to be, and it's really just not something you can rely on.</p>\n\n<hr>\n\n<p><sup>1</sup> <sub>Not only IE10, but IE9, and even IE8 which handles most of the mature CSS2.1 standard far better than Chrome, simply because IE8 was so focused on standards compliance (at which time CSS2.1 was already pretty stable with only minor differences from today's recommendation) while Chrome seems to be little more than a half-polished tech demo of cutting-edge pseudo-standards.</sub></p>\n\n<p><sup>2</sup> <sub>And I may be biased when I say this, but it sure as hell does. If your code works in other browsers but not IE, the odds that <a href=\"http://www.codinghorror.com/blog/2008/03/the-first-rule-of-programming-its-always-your-fault.html\" rel=\"nofollow\">it's an issue with your own code</a> rather than IE10 are far better compared to, say, 3 years ago, with previous versions of IE. Again, I may be biased, but let's be honest: <a href=\"http://www.browseryoulovedtohate.com\" rel=\"nofollow\">aren't you too?</a> Just look at your comments.</sub></p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>Perhaps you can try some jQuery like this:</p>\n\n<pre><code>if ($.browser.msie &amp;&amp; $.browser.version == 10) {\n  $(\"html\").addClass(\"ie10\");\n}\n</code></pre>\n\n<p>To use this method you must include the jQuery Migrate library because this function was removed from the main jQuery library.</p>\n\n<p>Worked out quite fine for me. But surely no replacement for conditional comments!</p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p>I found a solution on <a href=\"http://www.impressivewebs.com/ie10-css-hacks\">this</a> site where someone had a valuable <a href=\"http://www.impressivewebs.com/ie10-css-hacks/#comment-27811\">comment</a>:</p>\n\n<p>The solution is:</p>\n\n<pre><code>if (Function('/*@cc_on return document.documentMode===10@*/')()){\n    document.documentElement.className+=' ie10';\n}\n</code></pre>\n\n<p>It</p>\n\n<ul>\n<li>doesn\u2019t need conditional comments;</li>\n<li>works even if comment stripping compression/processing;</li>\n<li>no ie10 class added in Internet&nbsp;Explorer&nbsp;11;</li>\n<li>more likely to work as intended with Internet&nbsp;Explorer&nbsp;11 running in Internet&nbsp;Explorer&nbsp;10 compatibility mode;</li>\n<li>doesn\u2019t need standalone script tag (can just be added to other JavaScript code in the head).</li>\n<li>doesn't need jQuery to test</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 81
                },
                {
                    "body": "<p>Both solutions posted here (with slight modifications) work:</p>\n\n<pre><code>&lt;!--[if !IE]&gt;&lt;!--&gt;&lt;script&gt;if(/*@cc_on!@*/false){document.documentElement.className='ie10';}&lt;/script&gt;&lt;!--&lt;![endif]--&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;script&gt;if(Function('/*@cc_on return 10===document.documentMode@*/')()){document.documentElement.className='ie10';}&lt;/script&gt;\n</code></pre>\n\n<p>You include either of the above lines inside of head tag of your html page before your css link. And then in css file you specify your styles having \"ie10\" class as a parent:</p>\n\n<pre><code>.ie10 .myclass1 { }\n</code></pre>\n\n<p>And voil\u00e0! - other browsers stay intact. And you don't need jQuery. You can see the example how I implemented it here: <a href=\"http://kardash.net\">http://kardash.net</a>.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If you must do this, you can check the user agent string in JavaScript:</p>\n\n<pre><code>var isIE10 = !!navigator.userAgent.match(/MSIE 10/);\n</code></pre>\n\n<p>As other people have mentioned, I'd always recommend feature detection instead.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I use this script - it's antiquated, but effective in targeting a <strong>separate</strong> Internet&nbsp;Explorer&nbsp;10 style sheet or JavaScript file that is included <strong>only if</strong> the browser is Internet&nbsp;Explorer&nbsp;10, the same way you would with conditional comments. No jQuery or other plugin is required.</p>\n\n<pre><code>&lt;script&gt;\n    /*@cc_on\n      @if (@_jscript_version == 10)\n          document.write(' &lt;link type= \"text/css\" rel=\"stylesheet\" href=\"your-ie10-styles.css\" /&gt;');\n      @end\n    @*/\n&lt;/script &gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I've written a small, vanilla JavaScript plugin called <strong>Layout Engine</strong>, which allows you to feature detect IE 10 (and every other browser), in a simple way that cannot be faked, unlike user agent sniffing.</p>\n\n<p>It adds the rendering engine name as a class on the html tag and returns a JavaScript object containing the vendor and version (where appropriate)</p>\n\n<p>Check out my blog post: <a href=\"http://mattstow.com/layout-engine.html\">http://mattstow.com/layout-engine.html</a> and get the code on GitHub: <a href=\"https://github.com/stowball/Layout-Engine\">https://github.com/stowball/Layout-Engine</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I wouldn't use JavaScript <code>navigator.userAgent</code> or <a href=\"http://api.jquery.com/jquery.browser/#jQuery-browser1\" rel=\"nofollow\">$.browser</a> (which uses <code>navigator.userAgent</code>) since it can be spoofed.</p>\n\n<p>To target Internet Explorer 9, 10 and 11 (Note: also the latest Chrome):</p>\n\n<pre><code>@media screen and (min-width:0\\0) { \n    /* Enter CSS here */\n}\n</code></pre>\n\n<p>To target Internet Explorer 10 and above:</p>\n\n<pre><code>@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    /* IE10+ CSS here */\n}\n</code></pre>\n\n<p>Sources:</p>\n\n<ul>\n<li><a href=\"http://blog.keithclark.co.uk/moving-ie-specific-css-into-media-blocks/\" rel=\"nofollow\">Moving Internet Explorer specific CSS into @media blocks</a></li>\n<li><a href=\"https://philipnewcomer.net/2014/04/target-internet-explorer-10-11-css/\" rel=\"nofollow\">How to Target Internet Explorer 10 and 11 in CSS</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>If you want to target IE 10 with Vanilla JavaScript, you might want to try CSS property detection: </p>\n\n<pre><code>if (document.body.style.msTouchAction != undefined) {\n  document.body.className = 'ie10';\n}\n</code></pre>\n\n<h2>CSS properties</h2>\n\n<p>Instead of <code>msTouchAction</code> you can also use one of these CSS properties, because they are currently only available in IE 10. But this might change in the future.</p>\n\n<ul>\n<li>msTouchAction</li>\n<li>msWrapFlow</li>\n<li>msWrapMargin</li>\n<li>msWrapThrough</li>\n<li>msScrollLimit</li>\n<li>msScrollLimitXMin</li>\n<li>msScrollLimitYMin</li>\n<li>msScrollLimitXMax</li>\n<li>msScrollLimitYMax</li>\n<li>msFlexbox</li>\n<li>msFlex</li>\n<li>msFlexOrder</li>\n</ul>\n\n<h2>Test page</h2>\n\n<p>I've put together a <a href=\"http://codepen.io/TimPietrusky/pen/sFICm\" rel=\"nofollow\">test page</a> with all properties on CodePen. </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use PHP to add a stylesheet for IE 10</p>\n\n<p>Like:</p>\n\n<pre><code>if (stripos($_SERVER['HTTP_USER_AGENT'], 'MSIE 10')) {\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"../ie10.css\" /&gt;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You could use feature detection to see if browser is IE10 or greater like so:</p>\n\n<pre><code>var isIE = false;\nif (window.navigator.msPointerEnabled) {\n    isIE = true;\n}\n</code></pre>\n\n<p>Only true if > IE9</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A good place to start is the <a href=\"http://msdn.microsoft.com/en-us/library/ff405926\">IE Standards Support Documentation</a>. </p>\n\n<p>Here is how to target IE10 in JavaScript:</p>\n\n<pre><code>if (\"onpropertychange\" in document &amp;&amp; !!window.matchMedia) {\n...\n}\n</code></pre>\n\n<p>Here is how to target IE10 in CSS:</p>\n\n<pre><code>@media all and (-ms-high-contrast: none) {\n...\n}\n</code></pre>\n\n<p>In case IE11 needs to be filtered via CSS, see another \nquestion:\n<a href=\"http://stackoverflow.com/questions/20541306/how-to-write-a-css-hack-for-ie-11/22085269#22085269\">How to write a CSS hack for IE 11?</a></p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>clipBoardData is a function that is only available in IE, so if you are seeking to target all IE versions you can use</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nif (window.clipboardData)\n            alert(\"You are using IE!\");\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Conditionizr <a href=\"http://conditionizr.com/docs.html\" rel=\"nofollow\">(see docs)</a> will add browser CSS classes to your html element, including ie10. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This answer got me 90% of the way there. I found the rest of my answer on the <a href=\"http://msdn.microsoft.com/en-us/library/ms537509%28v=vs.85%29.aspx\" rel=\"nofollow\" title=\"Detecting Windows Internet Explorer More Effectively\">Microsoft site here</a>.</p>\n\n<p>The code below is what I'm using to target all ie by adding a .ie class to <code>&lt;html&gt;</code></p>\n\n<p>Use jQuery (which deprecated .browser in favor of user agents in 1.9+, see <a href=\"http://api.jquery.com/jQuery.browser/\" rel=\"nofollow\" title=\"jQuery.browser\">http://api.jquery.com/jQuery.browser/</a>) to add an .ie class:</p>\n\n<pre><code>// ie identifier\n$(document).ready(function () {\n  if (navigator.appName == 'Microsoft Internet Explorer') {\n    $(\"html\").addClass(\"ie\");\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Check out <a href=\"http://suhasrathod.wordpress.com/2013/04/29/ie10-css-hacks/\" rel=\"nofollow\">http://suhasrathod.wordpress.com/2013/04/29/ie10-css-hacks/</a></p>\n\n<pre><code>@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n       /* IE10-specific styles go here */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With JavaScript:</p>\n\n<pre><code>if (/Trident/g.test(navigator.userAgent)) { // detect trident engine so IE\n        document.getElementsByTagName('html')[0].className= 'no-js ie'; }\n</code></pre>\n\n<p>Work for all IE.</p>\n\n<pre><code>IE08 =&gt; 'Trident/4.0'\n\nIE09 =&gt; 'Trident/5.0'\n\nIE10 =&gt; 'Trident/6.0'\n\nIE11 =&gt; 'Trident/7.0'\n</code></pre>\n\n<p>So change <code>/Trident/g</code> by <code>/Trident/x.0/g</code> where <code>x = 4, 5, 6</code> or <code>7</code> (or maybe <code>8</code> for the future).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For me the following code works fine, all conditional comments are working in all IE versions:</p>\n\n<pre><code>&lt;!--[if lt IE 7 ]&gt; &lt;html class=\"ie6\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 7 ]&gt;    &lt;html class=\"ie7\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 8 ]&gt;    &lt;html class=\"ie8\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 9 ]&gt;    &lt;html class=\"ie9\"&gt; &lt;![endif]--&gt;\n&lt;!--[if (gt IE 11)|!(IE)]&gt;&lt;!--&gt; &lt;html&gt; &lt;!--&lt;![endif]--&gt;\n\n&lt;script&gt;\n    if (document.documentMode===10){\n        document.documentElement.className+=' ie10';\n    }\n    else if (document.documentMode===11){\n        document.documentElement.className+=' ie11';\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>I'm on windows 8.1, not sure if it's related to ie11 update...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is how I do custom CSS for Internet Explorer:</p>\n\n<p>In my JavaScript file:</p>\n\n<pre><code>function isIE () {\n      var myNav = navigator.userAgent.toLowerCase();\n      return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;\n}\n\njQuery(document).ready(function(){\n    if(var_isIE){\n            if(var_isIE == 10){\n                jQuery(\"html\").addClass(\"ie10\");\n            }\n            if(var_isIE == 8){\n                jQuery(\"html\").addClass(\"ie8\");\n                // you can also call here some function to disable things that \n                //are not supported in IE, or override browser default styles.\n            }\n        }\n    });\n</code></pre>\n\n<p>And then in my CSS file, y define each different style:</p>\n\n<pre><code>.ie10 .some-class span{\n    .......\n}\n.ie8 .some-class span{\n    .......\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>modern solution for css</p>\n\n<pre><code>html[data-useragent*='MSIE 10.0'] .any {\n  your-style: here;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I just wanted to add my version of IE detection. It's based on a snippet found at <a href=\"http://james.padolsey.com/javascript/detect-ie-in-js-using-conditional-comments/\" rel=\"nofollow\">http://james.padolsey.com/javascript/detect-ie-in-js-using-conditional-comments/</a> and exteded to also support ie10 and ie11. It detects IE 5 to 11.</p>\n\n<p>All you need to do is add it somewhere and then you can always check with a simple condition. The global var <code>isIE</code> will be undefined if it's not an IE, or otherwise it will be the version number. So you can easily add things like <code>if (isIE &amp;&amp; isIE &lt; 10)</code> or alike.</p>\n\n<pre><code>var isIe = (function(){\n    if (!(window.ActiveXObject) &amp;&amp; \"ActiveXObject\" in window) { return 11; /* IE11 */ }\n    if (Function('/*@cc_on return /^10/.test(@_jscript_version) @*/')()) { return 10; /* IE10  */ }\n    var undef,\n        v = 3, div = document.createElement('div'), all = div.getElementsByTagName('i');\n    while (\n        div.innerHTML = '&lt;!--[if gt IE ' + (++v) + ']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;',\n            all[0]\n        );\n    return v &gt; 4 ? v : undef;\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you don't mind targeting of IE10 and above and non IE browsers, you can use this conditional comment:</p>\n\n<pre><code>&lt;!--[if gt IE 9]&gt;&lt;!--&gt; Your code here. &lt;!--&lt;![endif]--&gt;\n</code></pre>\n\n<p>Derived from <a href=\"http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither\" rel=\"nofollow\">http://www.paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither</a></p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>If you really have to, you can make conditional comments work by adding the following line to <code>&lt;head&gt;</code>:</p>\n\n<pre><code>&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE9\"&gt;\n</code></pre>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ie/hh801214%28v=vs.85%29.aspx\" rel=\"nofollow\">Source</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I target only Internet Explorer 10 for certain situations like Internet Explorer-specific CSS or Internet Explorer-specific JavaScript code?</p>\n\n<p>I tried this, but it doesn't work:</p>\n\n<pre><code>&lt;!--[if IE 10]&gt;    &lt;html class=\"no-js ie10\" lang=\"en\"&gt; &lt;![endif]--&gt;\n&lt;!--[if !IE]&gt;&lt;!--&gt; &lt;html lang=\"en\" class=\"no-js\"&gt; &lt;!--&lt;![endif]--&gt;\n</code></pre>\n\n<p>Internet&nbsp;Explorer 10 ignores the conditional comments and uses the <code>&lt;html lang=\"en\" class=\"no-js\"&gt;</code> instead of <code>&lt;html class=\"no-js ie10\" lang=\"en\"&gt;</code>.</p>\n",
            "last_activity_date": 1423652220,
            "question_id": 9900311,
            "score": 109,
            "tags": [
                "javascript",
                "html",
                "css",
                "internet-explorer-10",
                "conditional-comments"
            ],
            "title": "How do I target only Internet Explorer 10 for certain situations like Internet Explorer-specific CSS or Internet Explorer-specific JavaScript code?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>You can do it Asynchronously using .NET Ajax PageMethods.</p>\r\n\r\n<p>See <a href=\"http://www.singingeels.com/Articles/Using_Page_Methods_in_ASPNET_AJAX.aspx\">here</a> or <a href=\"http://weblogs.asp.net/sohailsayed/archive/2008/02/23/calling-methods-in-a-codebehind-function-pagemethods-from-client-side-using-ajax-net.aspx\">here</a>. </p>",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The <a href=\"http://www.asp.net/ajax/\" rel=\"nofollow\">Microsoft AJAX library</a> will accomplish this. You could also create your own solution that involves using AJAX to call your own aspx (as basically) script files to run .NET functions.</p>\n\n<p>I suggest the Microsoft AJAX library. Once installed and referenced, you just add a line in your page load or init:</p>\n\n<pre><code>Ajax.Utility.RegisterTypeForAjax(GetType(YOURPAGECLASSNAME))\n</code></pre>\n\n<p>Then you can do things like:</p>\n\n<pre><code>&lt;Ajax.AjaxMethod()&gt; _\nPublic Function Get5() AS Integer\n    Return 5\nEnd Function\n</code></pre>\n\n<p>Then, you can call it on your page as:</p>\n\n<pre><code>PageClassName.Get5(javascriptCallbackFunction);\n</code></pre>\n\n<p>The last parameter of your function call must be the javascript callback function that will be executed when the AJAX request is returned.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Well, if you don't want to do it using AJAX or any other way and just want a normal ASP.NET postback to happen, here is how you do it (without using any other libraries):</p>\n\n<p><em>It is a little tricky though... :)</em></p>\n\n<p>i. In your code file (assuming you are using C# and .NET 2.0 or later) add the following Interface to your Page Class to make it look like</p>\n\n<pre><code>public partial class Default : System.Web.UI.Page, IPostBackEventHandler{}\n</code></pre>\n\n<p>ii. This should add (using Tab-Tab) this function to your code file:</p>\n\n<pre><code>public void RaisePostBackEvent(string eventArgument) { }\n</code></pre>\n\n<p>iii. In your onclick event in Javascript write the following code:</p>\n\n<pre><code>var pageId = '&lt;%=  Page.ClientID %&gt;';\n__doPostBack(pageId, argumentString);\n</code></pre>\n\n<p>This will call the 'RaisePostBackEvent' method in your code file with the 'eventArgument' as the 'argumentString' you passed from the Javascript. Now, you can call any other event you like.</p>\n\n<p>P.S: That is 'underscore-underscore-doPostBack' ... And, there should be no space in that sequence... Somehow the WMD does not allow me to write to underscores followed by a character!</p>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<p>You might want to create a web service for your common methods.<br />\nJust add a WebMethodAttribute over the functions you want to call, and that's about it.<br />\nHaving a web service with all your common stuff also makes the system easier to maintain.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <code>__doPostBack()</code> method works well.</p>\n\n<p>Another solution (very hackish) is to simply add an invisible ASP button in your markup and click it with a javascript method.</p>\n\n<pre><code>&lt;div style=\"display: none;\"&gt;\n   &lt;asp:Button runat=\"server\" ... OnClick=\"ButtonClickHandlerMethod\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>From your javascript, retrieve the reference to the button using its <em>ClientID</em> and then call the <em>.click()</em> method on it.</p>\n\n<pre><code>var button = document.getElementById(/* button client id */);\n\nbutton.click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<blockquote>\n  <p>The Microsoft AJAX library will accomplish this. You could also create your own solution that involves using AJAX to call your own aspx (as basically) script files to run .NET functions.</p>\n</blockquote>\n\n<p>This is the library called AjaxPro which was written a MVP named <a href=\"http://weblogs.asp.net/mschwarz/about.aspx\" rel=\"nofollow\">Michael Schwarz</a>.  This was library was not written by Microsoft.</p>\n\n<p>I have used AjaxPro extensively and it is a very nice library, that I would recommend for simple callbacks to the server.  It does function will with MS version of Ajax with no issues.  However I would note with how easy MS has made Ajax I would only use it if really necessary.  It takes allot of JavaScript to do some really complicated functionality that you get from MS by just dropping it into an update panel.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>this reply works like a breeze for me thanks cross browser</p>\n\n<blockquote>\n  <p>The __doPostBack() method works well.</p>\n</blockquote>\n\n<p>Another solution (very hackish) is to simply add an invisible ASP button in your markup and click it with a javascript method.</p>\n\n \n    \n \n\n<p>From your javascript, retrieve the reference to the button using its ClientID and then call the .Click() method on it.</p>\n\n<pre><code>var button = document.getElementByID(/* button client id */); \n\nbutton.Click(); \n</code></pre>\n\n<blockquote>\n  <p>Blockquote</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the __doPostBack function is not generated on the page you need to insert a control to force it like this:</p>\n\n<pre><code>&lt;asp:Button ID=\"btnJavascript\" runat=\"server\" UseSubmitBehavior=\"false\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Add this line to page load if you are getting object expected error.</p>\n\n<pre><code>ClientScript.GetPostBackEventReference(this, \"\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <code>PageMethods.Your C# method Name</code> in order to access c# methods or Vb.net methods into javascript</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It is So easy for boath senarios (ie:synchrone/Asynchrone) if you want to trigger a server side event handler. for example Button's Click Event.\nfor triggering an event handler of a control : \nif you added a ScriptManage on your page already then skip the step 1 </p>\n\n<p>1-Add the following in your page client script section</p>\n\n<pre><code>//&lt;![CDATA[\nvar theForm = document.forms['form1'];\nif (!theForm) {\n    theForm = document.form1;\n}\nfunction __doPostBack(eventTarget, eventArgument) {\n    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {\n        theForm.__EVENTTARGET.value = eventTarget;\n        theForm.__EVENTARGUMENT.value = eventArgument;\n        theForm.submit();\n    }\n}\n//]]&gt;\n</code></pre>\n\n<p>2-write you server side event handler for your control</p>\n\n<pre><code>protected void btnSayHello_Click(object sender, EventArgs e)\n    {\n         Label1.Text = \"Hello World...\";\n    }\n</code></pre>\n\n<p>3-add a client function to call the server side event handler</p>\n\n<pre><code>   function SayHello() {\n            __doPostBack(\"btnSayHello\", \"\");\n        }\n</code></pre>\n\n<p>replace the \"btnSayHello\" in code above with your control's client id .</p>\n\n<p>by doing so if your control is inside an update panel the page will not refresh.\n  that is so easy.\n  one other thing to say is that be careful with client id because it depends on you ID generation policy defined with ClientIDMode Property.\n  Enjoy!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Static, strongly-typed programming has always felt very natural to me, so at first I resisted learning Javascript (not to mention HTML/CSS) when I had to build web-based front-ends for my applications. I would do anything to work around this like redirecting to a page just to perform and action on the OnLoad event, as long as I could code pure C#.</p>\n\n<p>You will find however that if are going to be working with websites, you must have an open mind and start thinking more web-oriented (ie. don't try to do client-side things on the server and vice-versa). I love ASP.NET webforms and still use it (as well as MVC), but I will say that by trying to make things simpler and hiding the separation of client and server it can confuse newcomers and actually end up making things more difficult at times.</p>\n\n<p>My advice is to learn some basic Javascript (how to register events, retreive DOM objects, manipulate CSS, etc) and you will find web programming much more enjoyable (not to mention easier). A lot of people mentioned different AJAX libraries, but I didn't see any actual AJAX examples, so here it goes. (If you are not familiar with AJAX, all it is, is making an asynchronous HTTP request to refresh content (or perhaps perform a server-side action in your scenario) without reloading the entire page or doing a full postback.</p>\n\n<p><strong>Client-Side:</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar xmlhttp = new XMLHttpRequest(); // create object that will make the request\nxmlhttp.open(\"GET\", \"http://site.com/api/service\", \"true\"); // configure object (method, url, async)\nxmlhttp.send(); // send request\n\nxmlhttp.onstatereadychange = function() { // register a function to run when the state changes, if the request has finished and the stats code is 200 (OK). write result to &lt;p&gt;\n    if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.statsCode == 200) {\n          document.getElementById(\"resultText\").innerHTML = xmlhttp.responseText;\n     }\n };\n &lt;/script&gt;\n</code></pre>\n\n<p>That's it. Although the name can be misleading the result can be in plain text or JSON as well, you are not limited to XML. JQuery provides an even simplier interface for making AJAX calls (among simplifying other Javascript tasks).</p>\n\n<p>The request can be an HTTP-POST or HTTP-GET and does not have to be to a webpage, but you can post to any service that listens for HTTP requests such as a RESTFUL API. MVC4 Web API makes setting up the server side web service to handle the request a breeze as well. But many people do not know that you can also add Api Controllers to web forms project and use them to handle AJAX calls like this.</p>\n\n<p><strong>Server-Side:</strong></p>\n\n<pre><code>public class DataController : ApiController\n{\n    public HttpResponseMessage&lt;string[]&gt; Get()\n    {\n        HttpResponseMessage&lt;string[]&gt; response = new HttpResponseMessage&lt;string[]&gt;(\n            Repository.Get(true),\n            new MediaTypeHeaderValue(\"application/json\")\n        );\n\n        return response;\n    }\n}\n</code></pre>\n\n<p><strong>Global.asax</strong></p>\n\n<p>Then just register the HTTP route in your Global.asax file so ASP.NET will know how to direct the request.</p>\n\n<pre><code>void Application_Start(object sender, EventArgs e)\n{\n    RouteTable.Routes.MapHttpRoute(\"Service\", \"api/{controller}/{id}\");\n}\n</code></pre>\n\n<p>With AJAX and Controllers, you can post back to the server at any time asynchronously to perform any server side operation. This one-two punch provides both the flexibility of JavaScript and the power the C# / ASP.NET, giving the people visiting your site a better overall experience. Without sacrificing anything, you get the best of both worlds.</p>\n\n<p><strong>References</strong></p>\n\n<p><a href=\"http://www.w3schools.com/ajax/default.asp\" rel=\"nofollow\">AJAX:</a>, \n<a href=\"http://www.w3schools.com/jquery/jquery_ajax.asp\" rel=\"nofollow\">JQuery AJAX:</a>, \n<a href=\"http://www.asp.net/web-api/overview/hosting-aspnet-web-api/using-web-api-with-aspnet-web-forms\" rel=\"nofollow\">Controller in Webforms:</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>try this</p>\n\n<p><code>if(!ClientScript.IsStartupScriptRegistered(\"window\"))</code></p>\n\n<p><code>{</code></p>\n\n<p><code>Page.ClientScript.RegisterStartupScript(this.GetType(), \"window\", \"pop();\", true);</code></p>\n\n<p><code>}</code></p>\n\n<p>Or this</p>\n\n<p><code>Response.Write(\"&lt;script&gt;alert('Hello World');&lt;/script&gt;\");</code></p>\n\n<p>use  OnClientClick  property of the button to call javascript functions...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can also get it by just adding this line in your javascript code</p>\n\n<pre><code>document.getElementById('&lt;%=btnName.ClientID%&gt;').click()\n</code></pre>\n\n<p>I think, this one is very much easy!!!.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>I'm trying to implement this but it's not working right. The page is\n  posting back, but my code isn't getting executed. When i debug the\n  page, the RaisePostBackEvent never gets fired. One thing i did\n  differently is I'm doing this in a user control instead of an aspx\n  page.</p>\n</blockquote>\n\n<p>If anyone else is like Merk, and having trouble over coming this, I have a solution:</p>\n\n<p>When you have a user control, it seems you must also create the PostBackEventHandler in the parent page. And then you can invoke the user control's PostBackEventHandler by calling it directly. See below:</p>\n\n<pre><code>public void RaisePostBackEvent(string _arg)\n{\n      UserControlID.RaisePostBackEvent(_arg);\n}\n</code></pre>\n\n<p>Where UserControlID is the ID you gave the user control on the parent page when you nested it in the mark up.</p>\n\n<p>Note: You can also simply just call methods belonging to that user control directly (in which case, you would only need the RaisePostBackEvent handler in the parent page):</p>\n\n<pre><code>public void RaisePostBackEvent(string _arg)\n{\n    UserControlID.method1();\n    UserControlID.method2();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think this will help you</p>\n\n<p><a href=\"http://dotnetawesome.blogspot.in/2013/12/how-to-fetch-show-sql-server-database-data-using-ajax-jquey.html\" rel=\"nofollow\">http://dotnetawesome.blogspot.in/2013/12/how-to-fetch-show-sql-server-database-data-using-ajax-jquey.html</a></p>\n\n<p><strong>Javascript Code</strong></p>\n\n<pre><code>&lt;script src=\"http://code.jquery.com/jquery-1.9.1.js\"&gt;&lt;/script&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n    function GetCompanies() {\n        $(\"#UpdatePanel\").html(\"&lt;div style='text-align:center; background-color:yellow; border:1px solid red; padding:3px; width:200px'&gt;Please Wait...&lt;/div&gt;\");\n        $.ajax({\n            type: \"POST\",\n            url: \"Default.aspx/GetCompanies\",\n            data: \"{}\",\n            dataType: \"json\",\n            contentType: \"application/json; charset=utf-8\",\n            success: OnSuccess,\n            error: OnError\n        });\n    }\n    function OnSuccess(data) {\n        var TableContent = \"&lt;table border='0'&gt;\" +\n                                \"&lt;tr&gt;\" +\n                                    \"&lt;td&gt;Rank&lt;/td&gt;\" +\n                                    \"&lt;td&gt;Company Name&lt;/td&gt;\" +\n                                    \"&lt;td&gt;Revenue&lt;/td&gt;\" +\n                                    \"&lt;td&gt;Industry&lt;/td&gt;\" +\n                                \"&lt;/tr&gt;\";\n        for (var i = 0; i &lt; data.d.length; i++) {\n            TableContent += \"&lt;tr&gt;\" +\n                                    \"&lt;td&gt;\"+ data.d[i].Rank +\"&lt;/td&gt;\" +\n                                    \"&lt;td&gt;\"+data.d[i].CompanyName+\"&lt;/td&gt;\" +\n                                    \"&lt;td&gt;\"+data.d[i].Revenue+\"&lt;/td&gt;\" +\n                                    \"&lt;td&gt;\"+data.d[i].Industry+\"&lt;/td&gt;\" +\n                                \"&lt;/tr&gt;\";\n        }\n        TableContent += \"&lt;/table&gt;\";\n\n        $(\"#UpdatePanel\").html(TableContent);\n    }\n    function OnError(data) {\n\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>ASP.NET Server Side Function</strong></p>\n\n<pre><code>[WebMethod]\n[ScriptMethod(ResponseFormat= ResponseFormat.Json)]\npublic static List&lt;TopCompany&gt; GetCompanies()\n{\n    System.Threading.Thread.Sleep(5000);\n    List&lt;TopCompany&gt; allCompany = new List&lt;TopCompany&gt;();\n    using (MyDatabaseEntities dc = new MyDatabaseEntities())\n    {\n        allCompany = dc.TopCompanies.ToList();\n    }\n    return allCompany;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var button = document.getElementById(/* button client id */);\n\nbutton.click();\n</code></pre>\n\n<p>It should be like:</p>\n\n<pre><code>var button = document.getElementById('&lt;%=formID.ClientID%&gt;');\n</code></pre>\n\n<p>Where formID = asp.net control ID in aspx file</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm writing a web page in ASP.NET. I have some Javascript, and I have a submit button with an onClick event. </p>\n\n<p>Is it possible to call a method I created in ASP with Javascript's onClick event?</p>\n",
            "last_activity_date": 1417071159,
            "question_id": 3713,
            "score": 84,
            "tags": [
                "c#",
                "asp.net",
                "javascript"
            ],
            "title": "Call ASP.NET Function From Javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>There is no <em>Class</em> in ECMAscript, there is only <em>Object</em>.</p>\n\n<p>When <code>new</code> is used to invoke a function, we call it a <em>constructor function</em>. This function somewhat auto returns a new object once it finished. Any data that is stored within that object using <code>this</code> (which references that newly created object) is returned as property of that object. Beside that, <code>new</code> sets a property called <em>constructor</em> to exactly this function.</p>\n\n<p>In your case, you don't even really require the usage of <code>new</code>, you could easily re-write your   code as follows:</p>\n\n<pre><code>var gameData = (function () {\n    var public = { },\n        private = { }; // any private data can get stored here\n\n    //May need this later \n    public.init = function () { \n    };\n\n    public.storageAvailable = function () {\n        if (typeof (Storage) !== \"undefined\") {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n\n    return public;\n}());\n</code></pre>\n\n<p>This is called the <em>factory pattern</em>, <em>singleton pattern</em>, <em>module pattern</em>, and there might be some other names. </p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I think what you are looking for is just a simple JavaScript object:</p>\n\n<pre><code>var gameData = {\n    //May need this later \n    init : function () { \n    },\n\n    storageAvailable : function () {\n        if (typeof (Storage) !== \"undefined\") {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\n</code></pre>\n\n<p>If you want to use private variables create a revealing module pattern style wrapper. This is basically what jAndy suggested:</p>\n\n<pre><code>var gameData = (function() {\n    var private = 'private variable';\n\n    return {\n        //May need this later \n        init : function () { \n        },\n\n        storageAvailable : function () {\n            if (typeof (Storage) !== \"undefined\") {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>No, it is not static because it still has a <code>constructor</code> property pointing to your \"anonymous\" function. In your example, you could use</p>\n\n<pre><code>var gameData2 = new (gameData.constructor)();\n</code></pre>\n\n<p>to reinstantiate a second object, so the \"class\" (instance actually) is not really \"static\". You are basically <em>leaking</em> the constructor, and possibly the data that is bound to it. Also, a <em>useless</em> prototype object (<code>gameData.constructor.prototype</code>) does get created and is inserted in the prototype chain of <code>gameData</code>, which is not what you want.</p>\n\n<p>Instead, you might use</p>\n\n<ul>\n<li>a single, simple object literal (as in <a href=\"http://stackoverflow.com/a/10406569/1048572\">Daff's answer</a>). That means you don't have a constructor, no closure-scoped private variables (you have used none anyway) and no (custom) prototype.</li>\n<li>the (revealing) module pattern (as in <a href=\"http://stackoverflow.com/a/10406568/1048572\">jAndy's answer</a>). There you'd have an <a href=\"http://stackoverflow.com/q/8228281/1048572\">IIFE</a> to create closure-scoped variables, and can return any kind of object.</li>\n<li>an actual constructor (\"class\") that can be instantiated later (when needed), and yields the same singleton object always.</li>\n</ul>\n\n<p>This is what the singleton pattern would look like:</p>\n\n<pre><code>function GameData() {\n    if (this.constructor.singleton)\n        return this.constructor.singleton;\n    else\n        this.constructor.singleton = this;\n\n    // init:\n    // * private vars\n    // * public properties\n    // ...\n}\nGameData.prototype.storageAvailable = function () {\n    if (typeof (Storage) !== \"undefined\") {\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nvar gameData = new GameData();\nvar gameData2 = new GameData();\ngameData === gameData2 === GameData.singleton; // true\n</code></pre>\n\n<p>Yet, the prototype is quite useless because you have only one instance of <code>GameData</code>. It would only get interesting with inheritance.</p>\n",
                    "is_accepted": true,
                    "score": 7
                }
            ],
            "body": "<p>I'm just trying to understand Javascript a little deeper.  </p>\n\n<p>I created a 'class' <code>gameData</code> that I only want ONE of, doesn't need a constructor, or instantiated.</p>\n\n<p>So I created it like so...</p>\n\n<pre><code>var gameData = new function () {\n\n    //May need this later \n    this.init = function () { \n    };\n\n    this.storageAvailable = function () {\n        if (typeof (Storage) !== \"undefined\") {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n}\n</code></pre>\n\n<p>Realizing that the 'new' keyword doesn't allow it to be instantiated and makes it available LIKE a static class would be in C#.  </p>\n\n<p>Am I thinking of this correctly?  As static?</p>\n",
            "last_activity_date": 1408043262,
            "question_id": 10406552,
            "score": 9,
            "tags": [
                "javascript"
            ],
            "title": "Is it right to think of a Javascript Function Expression that uses the &#39;new&#39; keyword as &#39;static&#39;"
        },
        {
            "answer_count": 25,
            "answers": [
                {
                    "body": "<p>I just had this issue as well in a <a href=\"http://en.wikipedia.org/wiki/PhoneGap\">PhoneGap</a> application. I solved it by using the JavaScript function <code>getTime()</code> in the following manner:</p>\n\n<pre><code>var currentTime = new Date();\nvar n = currentTime.getTime();\npostUrl = \"http://www.example.com/test.php?nocache=\"+n;\n$.post(postUrl, callbackFunction);\n</code></pre>\n\n<p>I wasted a few hours figuring this out. It would have been nice of Apple to notify developers of this caching issue.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>After a bit of investigation, turns out that Safari on iOS6 will cache POSTs that have either no Cache-Control headers or even \"Cache-Control: max-age=0\".</p>\n\n<p>The only way I've found of preventing this caching from happening at a global level rather than having to hack random querystrings onto the end of service calls is to set \"Cache-Control: no-cache\".</p>\n\n<p>So:</p>\n\n<ul>\n<li>No Cache-Control or Expires headers = iOS6 Safari will cache</li>\n<li>Cache-Control max-age=0 and an immediate Expires = iOS6 Safari will cache</li>\n<li>Cache-Control: no-cache = iOS6 Safari will NOT cache</li>\n</ul>\n\n<p>I suspect that Apple is taking advantage of this from the HTTP spec in section 9.5 about POST:</p>\n\n<blockquote>\n  <p>Responses to this method are not cacheable, unless the response\n     includes appropriate Cache-Control or Expires header fields. However,\n     the 303 (See Other) response can be used to direct the user agent to\n     retrieve a cacheable resource.</p>\n</blockquote>\n\n<p>So in theory you can cache POST responses...who knew. But no other browser maker has ever thought it would be a good idea until now. But that does NOT account for the caching when no Cache-Control or Expires headers are set, only when there are some set. So it must be a bug.</p>\n\n<p>Below is what I use in the right bit of my Apache config to target the whole of my API because as it happens I don't actually want to cache anything, even gets. What I don't know is how to set this just for POSTs.</p>\n\n<pre><code>Header set Cache-Control \"no-cache\"\n</code></pre>\n\n<p>Update: Just noticed that I didn't point out that it is only when the POST is the same, so change any of the POST data or URL and you're fine. So you can as mentioned elsewhere just add some random data to the URL or a bit of POST data.</p>\n\n<p>Update: You can limit the \"no-cache\" just to POSTs if you wish like this in Apache:</p>\n\n<pre><code>SetEnvIf Request_Method \"POST\" IS_POST\nHeader set Cache-Control \"no-cache\" env=IS_POST\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 391
                },
                {
                    "body": "<p>I had the same problem with a webapp getting data from ASP.NET webservice</p>\n\n<p>This worked for me:</p>\n\n<pre><code>public WebService()\n{\n    HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>Simple solution for all your web service requests, assuming you're using jQuery:</p>\n\n<pre><code>$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    // you can use originalOptions.type || options.type to restrict specific type of requests\n    options.data = jQuery.param($.extend(originalOptions.data||{}, { \n      timeStamp: new Date().getTime()\n    }));\n});\n</code></pre>\n\n<p>Read more about the jQuery prefilter call <a href=\"http://api.jquery.com/jQuery.ajaxPrefilter/\">here</a>.</p>\n\n<p>If you aren't using jQuery, check the docs for your library of choice.  They may have similar functionality.</p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>Depending on the app you can trouble shoot the issue now in iOS 6 using Safari>Advanced>Web Inspector so that is helpful with this situation. </p>\n\n<p>Connect the phone to Safari on a Mac an then use the developer menu to trouble shoot the web app. </p>\n\n<p>Clear the website data on the iPhone after update to iOS6, including specific to the app using a Web View. Only one app had an issue and this solved it during IOS6 Beta testing way back, since then no real problems. </p>\n\n<p>You may need to look at your app as well, check out NSURLCache if in a WebView in a custom app.</p>\n\n<p><a href=\"https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSURLCache_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40003754\" rel=\"nofollow\">https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSURLCache_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40003754</a></p>\n\n<p>I guess depending on the true nature of your problem, implementation, etc. ..  </p>\n\n<p>Ref:  $.ajax calls </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Finally, I've a solution to my uploading problem.</p>\n\n<p>In JavaScript:</p>\n\n<pre><code>var xhr = new XMLHttpRequest();\nxhr.open(\"post\", 'uploader.php', true);\nxhr.setRequestHeader(\"pragma\", \"no-cache\");\n</code></pre>\n\n<p>In <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"nofollow\">PHP</a>:</p>\n\n<pre><code>header('cache-control: no-cache');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>While adding cache-buster parameters to make the request look different seems like a solid solution, I would advise against it, as it would hurt any application that relies on actual caching taking place. Making the APIs output the correct headers is the best possible solution, even if that's slightly more difficult than adding cache busters to the callers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My workaround in <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"nofollow\">ASP.NET</a> (pagemethods, webservice, etc.)</p>\n\n<pre><code>protected void Application_BeginRequest(object sender, EventArgs e)\n{\n    Response.Cache.SetCacheability(HttpCacheability.NoCache);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It worked with <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"nofollow\">ASP.NET</a> only after adding the <code>pragma:no-cache</code> header in <a href=\"http://en.wikipedia.org/wiki/Internet_Information_Services\" rel=\"nofollow\">IIS</a>. <code>Cache-Control: no-cache</code> was not enough.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can also fix this issue by modifying the <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a> <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow\">Ajax</a> function by doing the following (as of 1.7.1) to the top of the Ajax function (function starts at line 7212). This change will activate the built-in anti-cache feature of jQuery for all POST requests.</p>\n\n<p>(The full script is available at <code>http://dl.dropbox.com/u/58016866/jquery-1.7.1.js</code>.)</p>\n\n<p>Insert below line 7221:</p>\n\n<pre><code>if (options.type === \"POST\") {\n    options.cache = false;\n}\n</code></pre>\n\n<p>Then modify the following (starting at line ~7497).</p>\n\n<pre><code>if (!s.hasContent) {\n    // If data is available, append data to URL\n    if (s.data) {\n        s.url += (rquery.test(s.url) ? \"&amp;\" : \"?\") + s.data;\n        // #9682: remove data so that it's not used in an eventual retry\n        delete s.data;\n    }\n\n    // Get ifModifiedKey before adding the anti-cache parameter\n    ifModifiedKey = s.url;\n\n    // Add anti-cache in URL if needed\n    if (s.cache === false) {\n        var ts = jQuery.now(),\n        // Try replacing _= if it is there\n        ret = s.url.replace(rts, \"$1_=\" + ts);\n\n        // If nothing was replaced, add timestamp to the end.\n        s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? \"&amp;\" : \"?\") + \"_=\" + ts : \"\");\n    }\n}\n</code></pre>\n\n<p>To:</p>\n\n<pre><code>// More options handling for requests with no content\nif (!s.hasContent) {\n    // If data is available, append data to URL\n    if (s.data) {\n        s.url += (rquery.test(s.url) ? \"&amp;\" : \"?\") + s.data;\n        // #9682: remove data so that it's not used in an eventual retry\n        delete s.data;\n    }\n\n    // Get ifModifiedKey before adding the anti-cache parameter\n    ifModifiedKey = s.url;\n}\n\n// Add anti-cache in URL if needed\nif (s.cache === false) {\n    var ts = jQuery.now(),\n    // Try replacing _= if it is there\n    ret = s.url.replace(rts, \"$1_=\" + ts);\n\n    // If nothing was replaced, add timestamp to the end.\n    s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? \"&amp;\" : \"?\") + \"_=\" + ts : \"\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In order to resolve this issue for WebApps added to the home screen, both of the top voted workarounds need to be followed. Caching needs to be turned off on the webserver to prevent new requests from being cached going forward and some random input needs to be added to every post request in order for requests that have already been cached to go through. Please refer to my post:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/12642726/ios6-is-there-a-way-to-clear-cached-ajax-post-requests-for-webapp-added-to-hom\">iOS6 - Is there a way to clear cached ajax POST requests for webapp added to home screen?</a></p>\n\n<p>WARNING: to anyone who implemented a workaround by adding a timestamp to their requests without turning off caching on the server. If your app is added to the home screen, EVERY post response will now be cached, clearing safari cache doesn't clear it and it doesn't seem to expire. Unless someone has a way to clear it, this looks like a potential memory leak!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Additionally change POST requests to GET.  The additional advantage is that POST uses 2 trips to the server and GET uses 1 so there is a performance gain to this solution.</p>\n",
                    "is_accepted": false,
                    "score": -10
                },
                {
                    "body": "<p>I found one workaround that makes me curious as to why it works.  Before reading Tadej's answer concerning ASP.NET web service, I was trying to come up with something that would work.  </p>\n\n<p>And I'm not saying that it's a good solution, but I just wanted to document it here.</p>\n\n<p>main page:  includes a JavaScript function, checkStatus().  The method calls another method which uses a jQuery AJAX call to update the html content.  I used setInterval to call checkStatus().  Of course, I ran into the caching problem.</p>\n\n<p>Solution:  use another page to call the update.</p>\n\n<p>On the main page, I set a boolean variable, runUpdate, and added the following to the body tag:</p>\n\n<pre><code>&lt;iframe src=\"helper.html\" style=\"display: none; visibility: hidden;\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>In the  of helper.html:</p>\n\n<pre><code>&lt;meta http-equiv=\"refresh\" content=\"5\"&gt;\n&lt;script type=\"text/javascript\"&gt;\n    if (parent.runUpdate) { parent.checkStatus(); }\n&lt;/script&gt;\n</code></pre>\n\n<p>So, if checkStatus() is called from the main page, I get the cached content.  If I call checkStatus from the child page, I get updated content.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>That's the work around for GWT-RPC</p>\n\n<pre><code>class AuthenticatingRequestBuilder extends RpcRequestBuilder \n{\n       @Override\n       protected RequestBuilder doCreate(String serviceEntryPoint) \n       {\n               RequestBuilder requestBuilder = super.doCreate(serviceEntryPoint);           \n               requestBuilder.setHeader(\"Cache-Control\", \"no-cache\");\n\n               return requestBuilder;\n       }\n}\n\nAuthenticatingRequestBuilder builder = new AuthenticatingRequestBuilder();\n((ServiceDefTarget)myService).setRpcRequestBuilder(builder);    \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I hope this can be of use to other developers banging their head against the wall on this one.  I found that any of the following prevents Safari on iOS 6 from caching the POST response:</p>\n\n<ul>\n<li>adding [cache-control: no-cache] in the request headers</li>\n<li>adding a variable URL parameter such as the current time</li>\n<li>adding [pragma: no-cache] in the response headers</li>\n<li>adding [cache-control: no-cache] in the response headers</li>\n</ul>\n\n<p>My solution was the following in my Javascript (all my AJAX requests are POST).</p>\n\n<pre><code>$.ajaxSetup({\n    type: 'POST',\n    headers: { \"cache-control\": \"no-cache\" }\n});\n</code></pre>\n\n<p>I also add the [pragma: no-cache] header to many of my server responses.</p>\n\n<p>If you use the above solution be aware that any $.ajax() calls you make that are set to global: false will NOT use the settings specified in $.ajaxSetup(), so you will need to add the headers in again.</p>\n",
                    "is_accepted": false,
                    "score": 120
                },
                {
                    "body": "<p>A quick work-around for GWT-RPC services is to add this to all the remote methods:</p>\n\n<pre><code>getThreadLocalResponse().setHeader(\"Cache-Control\", \"no-cache\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is an update of Baz1nga's answer. Since <code>options.data</code> is not an object but a string I just resorted to concatenating the timestamp:</p>\n\n<pre><code>$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n  if (originalOptions.type == \"post\" || options.type == \"post\") {\n\n    if (options.data &amp;&amp; options.data.length)\n      options.data += \"&amp;\";\n    else\n      options.data = \"\";\n\n    options.data += \"timeStamp=\" + new Date().getTime();\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>From my own blog post <em><a href=\"http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests\" rel=\"nofollow\">iOS 6.0 caching Ajax POST requests</a></em>:</p>\n\n<p>How to fix it: There are various methods to prevent caching of requests. The recommended method is adding a no-cache header. This is how it is done.</p>\n\n<h3>jQuery:</h3>\n\n<p>Check for iOS 6.0 and set Ajax header like this:</p>\n\n<pre><code>$.ajaxSetup({ cache: false });\n</code></pre>\n\n<h3>ZeptoJS:</h3>\n\n<p>Check for iOS 6.0 and set the Ajax header like this:</p>\n\n<pre><code>$.ajax({\n    type: 'POST',\n    headers : { \"cache-control\": \"no-cache\" },\n    url : ,\n    data:,\n    dataType : 'json',\n    success : function(responseText) {\u2026}\n</code></pre>\n\n<h2>Server side</h2>\n\n<h3>Java:</h3>\n\n<pre><code>httpResponse.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n</code></pre>\n\n<p>Make sure to add this at the top the page before any data is sent to the client.</p>\n\n<h3>.NET</h3>\n\n<pre><code>Response.Cache.SetNoStore();\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);\n</code></pre>\n\n<h3>PHP</h3>\n\n<pre><code>header('Cache-Control: no-cache, no-store, must-revalidate'); // HTTP 1.1.\nheader('Pragma: no-cache'); // HTTP 1.0.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>For those that use <code>Struts 1</code>, here is how I fixed the issue.</p>\n\n<p><strong>web.xml</strong></p>\n\n<pre><code>&lt;filter&gt;\n    &lt;filter-name&gt;SetCacheControl&lt;/filter-name&gt;\n    &lt;filter-class&gt;com.example.struts.filters.CacheControlFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;SetCacheControl&lt;/filter-name&gt;\n    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;\n    &lt;http-method&gt;POST&lt;/http-method&gt;\n&lt;/filter-mapping&gt;\n</code></pre>\n\n<p><strong>com.example.struts.filters.CacheControlFilter.js</strong></p>\n\n<pre><code>package com.example.struts.filters;\n\nimport java.io.IOException;\nimport java.util.Date;\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class CacheControlFilter implements Filter {\n\n        public void doFilter(ServletRequest request, ServletResponse response,\n                     FilterChain chain) throws IOException, ServletException {\n\n        HttpServletResponse resp = (HttpServletResponse) response;\n        resp.setHeader(\"Expires\", \"Mon, 18 Jun 1973 18:00:00 GMT\");\n        resp.setHeader(\"Last-Modified\", new Date().toString());\n        resp.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0\");\n        resp.setHeader(\"Pragma\", \"no-cache\");\n\n        chain.doFilter(request, response);\n    }\n\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n\n    public void destroy() {\n    }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I was able to fix my problem by using a combination of $.ajaxSetup and appending a timestamp to the url of my post (not to the post parameters/body). This based on the recommendations of previous answers</p>\n\n<pre><code>$(document).ready(function(){\n    $.ajaxSetup({ type:'POST', headers: {\"cache-control\",\"no-cache\"}});\n\n    $('#myForm').submit(function() {\n        var data = $('#myForm').serialize();\n        var now = new Date();\n        var n = now.getTime();\n        $.ajax({\n            type: 'POST',\n            url: 'myendpoint.cfc?method=login&amp;time='+n,\n            data: data,\n            success: function(results){\n                if(results.success) {\n                    window.location = 'app.cfm';\n                } else {\n                    console.log(results);\n                    alert('login failed');\n                }\n            }\n        });\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This JavaScript snippet works great with jQuery and jQuery Mobile:</p>\n\n<pre><code>$.ajaxSetup({\n    cache: false,\n    headers: {\n        'Cache-Control': 'no-cache'\n    }\n});\n</code></pre>\n\n<p>Just place it somewhere in your JavaScript code (after jQuery is loaded, and best before you do AJAX requests) and it should help.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Things that <strong>DID NOT WORK</strong> for me with an iPad 4/iOS 6:</p>\n\n<p>My request containing: Cache-Control:no-cache</p>\n\n<pre><code>//asp.net's:\nHttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache)\n</code></pre>\n\n<p>Adding cache: false to my jQuery ajax call</p>\n\n<pre><code> $.ajax(\n        {\n            url: postUrl,\n            type: \"POST\",\n            cache: false,\n            ...\n</code></pre>\n\n<p>Only this did the trick:</p>\n\n<pre><code>var currentTime = new Date();\nvar n = currentTime.getTime();\npostUrl = \"http://www.example.com/test.php?nocache=\"+n;\n$.post(postUrl, callbackFunction);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>i think you have already resolved your issue, but let me give a think about web caching...</p>\n\n<p>is true you can add many headers in each language you use, server side, client side, and you can use many other tricks to avoid web caching, but always think that you can never know from where the client are connecting to your server, you never know if he are using a Hotel \"Hot-Spot\" connection that use squid or other caching products, if the user are using proxy to hide his real position, etc etc... the <strong>real</strong> only way to avoid caching is the timestamp in the request also if is unused</p>\n\n<p>es:\n/ajax_helper.php?ts=3211321456</p>\n\n<p>then every cache manager you have to pass didnt find the same url in the cache repository and go re-download the page content.</p>\n\n<p>hope it will help ;)</p>\n\n<p>sorry for my non perfect english </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>While my login and signup pages works like a charm in Firefox, IE and Chrome... I've been struggling with this issue in Safari for IOS and OSX, few months ago I found a workaround on the SO.</p>\n\n<pre><code>&lt;body onunload=\"\"&gt;\n</code></pre>\n\n<p>OR via javascript</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nwindow.onunload = function(e){\n    e.preventDefault();\n    return;\n};\n&lt;/script&gt;   \n</code></pre>\n\n<p>This is kinda ugly thing but works for a while.</p>\n\n<p>I don't know why, but returning null to the <code>onunload</code> event the page do not get cached in Safari.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In Ruby's Sinatra</p>\n\n<pre><code>before '*' do\n  if env['REQUEST_METHOD'] == 'POST'\n    headers 'Cache-Control' =&gt; 'no-cache, no-store, must-revalidate'\n  end\nend\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Since the upgrade to iOS 6, we are seeing Safari's web view take the liberty of caching <code>$.ajax</code> calls. This is in the context of a PhoneGap application so it is using the Safari WebView. Our <code>$.ajax</code> calls are <code>POST</code> methods and we have cache set to false <code>{cache:false}</code>, but still this is happening. We tried manually adding a timestamp to the headers but it did not help.</p>\n\n<p>We did more research and found that Safari is only returning cached results for web services that have a function signature that is static and does not change from call to call.  For instance, imagine a function called something like:</p>\n\n<pre><code>getNewRecordID(intRecordType)\n</code></pre>\n\n<p>This function receives the same input parameters over and over again, but the data it returns should be different every time.</p>\n\n<p>Must be in Apple's haste to make iOS 6 zip along impressively they got too happy with the cache settings.  Has anyone else seen this behavior on iOS 6? If so, what exactly is causing it?</p>\n\n<hr>\n\n<p>The workaround that we found was to modify the function signature to be something like this:</p>\n\n<pre><code>getNewRecordID(intRecordType, strTimestamp)\n</code></pre>\n\n<p>and then always pass in a timestamp parameter as well, and just discard that value on the server side.  This works around the issue.  I hope this helps some other poor soul who spends 15 hours on this issue like I did!</p>\n",
            "last_activity_date": 1425273176,
            "question_id": 12506897,
            "score": 817,
            "tags": [
                "javascript",
                "ajax",
                "caching",
                "ios6",
                "mobile-safari"
            ],
            "title": "Is Safari on iOS 6 caching $.ajax results?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p><code>console.log</code> has nothing to do with jQuery.</p>\n\n<p>It logs a message to a debugging console, such as Firebug.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><code>console.log</code> has nothing to do with jQuery. It is a common object/method provided by debuggers (including the Chrome debugger and Firebug) that allows a script to log data (or objects in most cases) to the JavaScript console.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>It's not a jQuery feature but a feature of <a href=\"http://getfirebug.com/\">Firebug</a> (or some other tool). It's used for debugging. You can for instance log something to the console when something happens. For instance:</p>\n\n<pre><code>$( '#someButton' ).click ( function () {\n  console.log ( '#someButton was clicked' );\n  // do something\n} );\n</code></pre>\n\n<p>You'd then see <code>#someButton was clicked</code> in Firebug\u2019s \u201cConsole\u201d tab (or another tool\u2019s console \u2014 e.g. Chrome\u2019s Web Inspector) when you would click the button.</p>\n\n<p>edit: as <a href=\"http://stackoverflow.com/users/541796/baptiste-pernet\">Baptiste Pernet</a> showed in his answer you could first check if <code>console</code> is even avaliable. This is usefull as you don't have to remove your debugging code when you deploy to production:</p>\n\n<pre><code>if ( window.console &amp;&amp; window.console.log ) {\n  // console is available\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 211
                },
                {
                    "body": "<p>It is used to log (anything you pass it) to the <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a> console. The main usage would be to debug your JavaScript code.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Use <code>console.log</code> to add debugging information to your page. </p>\n\n<p>Many people use <code>alert(hasNinjas)</code> for this purpose but <code>console.log(hasNinjas)</code> is easier to work with. Using an alert pop-ups up a modal dialog box that blocks the user interface.</p>\n\n<p>Edit: I agree with <a href=\"http://stackoverflow.com/users/541796/baptiste-pernet\">Baptiste Pernet</a> and <a href=\"http://stackoverflow.com/users/185527/jan-hancic\">Jan Han\u010di\u010d</a> that it is a very good idea to check if <code>window.console</code> is defined first so that your code doesn't break if there is no console available.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>There is nothing to do with jQuery and if you want to use it I advice you to do</p>\n\n<pre><code>if (window.console) {\n    console.log(\"your message\")\n}\n</code></pre>\n\n<p>So you don't break your code when it is not avalaible.</p>\n\n<p>As suggested in the comment, you can also do</p>\n\n<pre><code>if(!window.console){ window.console = function(){}; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p><code>console.log</code> logs debug information to the console on some browsers (Firefox with Firebug installed, Chrome, IE8, anything with Firebug Lite installed). On Firefox it is a very powerful tool, allowing you to inspect objects or examine the layout or other properties of HTML elements. It isn't related to jQuery, but there are two things that are commonly done when using it with jQuery:</p>\n\n<ul>\n<li><p>install the <a href=\"http://firequery.binaryage.com/\">FireQuery</a> extension for Firebug. This, amongst other advantages, makes the logging of jQuery objects look nicer.</p></li>\n<li><p>create a wrapper that is more in line with jQuery's chaining code conventions.</p></li>\n</ul>\n\n<p>This means usually something like this:</p>\n\n<pre><code>$.fn.log = function() {\n    if (window.console &amp;&amp; console.log) {\n        console.log(this);\n    }\n    return this;\n}\n</code></pre>\n\n<p>which you can then invoke like</p>\n\n<pre><code>$('foo.bar').find(':baz').log().hide();\n</code></pre>\n\n<p>to easily check inside jQuery chains.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>You use it to debug JavaScript code with either <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a> for Firefox, or JavaScript console in <a href=\"http://en.wikipedia.org/wiki/WebKit\" rel=\"nofollow\">WebKit</a> browsers.</p>\n\n<pre><code>var variable;\n\nconsole.log(variable);\n</code></pre>\n\n<p>It will display the contents of the variable, even if it is a array or object.</p>\n\n<p>It is similar to <code>print_r($var);</code> for <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"nofollow\">PHP</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can view any messages logged to the console if you use a tool such as Firebug to inspect your code. Let's say you do this:</p>\n\n<pre><code>console.log('Testing console');\n</code></pre>\n\n<p>When you access the console in Firebug (or whichever tool you decide to use to inspect your code), you will see whatever message you told the function to log. This is particularly useful when you want to see if a function is executing, or if a variable is being passed/assigned properly. It's actually rather valuable for figuring out just what went wrong with your code.</p>\n",
                    "is_accepted": false,
                    "score": 92
                },
                {
                    "body": "<p>It will post a log message to the browser's javascript console, e.g. Firebug or Developer Tools (Chrome / Safari) and will show the line and file where it was executed from.</p>\n\n<p>Moreover, when you output a jQuery Object it will include a reference to that element in the DOM, and clicking it will go to that in the Elements/HTML tab.</p>\n\n<p>You can use various methods, but beware that for it to work in Firefox, you must have Firebug open, otherwise the whole page will crash. Whether what you're logging is a variable, array, object or DOM element, it will give you a full breakdown including the prototype for the object as well (always interesting to have a poke around). You can also include <em>as many</em> arguments as you want, and they will be replaced by spaces.</p>\n\n<pre><code>console.log(  myvar, \"Logged!\");\nconsole.info( myvar, \"Logged!\");\nconsole.warn( myvar, \"Logged!\");\nconsole.debug(myvar, \"Logged!\");\nconsole.error(myvar, \"Logged!\");\n</code></pre>\n\n<p>These show up with different logos for each command.</p>\n\n<p>You can also use <code>console.profile(profileName);</code> to start profiling a function, script etc. And then end it with <code>console.profileEnd(profileName);</code> and it will show up in you Profiles tab in Chrome (don't know with FF).</p>\n\n<p>For a complete reference go to <a href=\"http://getfirebug.com/logging\">http://getfirebug.com/logging</a> <strong>and I suggest you read it.</strong> (Traces, groups, profiling, object inspection).</p>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p><code>console.log</code> specifically is a method for developers to write code to inconspicuously inform the developers what the code is doing. It can be used to alert you that there's an issue, but shouldn't take the place of an interactive debugger when it comes time to debug the code. Its asynchronous nature means that the <a href=\"http://stackoverflow.com/questions/8395718\">logged values</a> don't necessarily represent the value when the method was called.</p>\n\n<p>In short: log errors with <code>console.log</code> (if available), then fix the errors using your debugger of choice: <a href=\"http://getfirebug.com/wiki/index.php/FAQ\" rel=\"nofollow\">Firebug</a>, WebKit Developer Tools (built-in to <a href=\"http://developer.apple.com/library/safari/documentation/appleapplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html#//apple_ref/doc/uid/TP40007874-CH8-SW1\" rel=\"nofollow\">Safari</a> and <a href=\"http://code.google.com/chrome/devtools/\" rel=\"nofollow\">Chrome</a>), IE Developer Tools or Visual Studio.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Beware: leaving calls to console in your production code will cause your site to break in Internet Explorer.  Never keep it unwrapped.  See: <a href=\"http://blog.patspam.com/2009/the-curse-of-consolelog\" rel=\"nofollow\">http://blog.patspam.com/2009/the-curse-of-consolelog</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I really feel web programming easy when i start <code>console.log</code> for debugging.</p>\n\n<pre><code>var i;\n</code></pre>\n\n<p>If i want to check value of <code>i</code> runtime..</p>\n\n<pre><code>console.log(i);\n</code></pre>\n\n<p>you can check current value of <code>i</code> in firebug's console tab. It is specially used for debugging.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>An example - suppose you want to know which line of code you were able to run your program (before it broke!), simply type in</p>\n\n<pre><code>console.log(\"You made it to line 26. But then something went very, very wrong.\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Places you can view the console! Just to have them all in one answer.</p>\n\n<p><strong>Firefox</strong></p>\n\n<p><a href=\"http://getfirebug.com/\">http://getfirebug.com/</a></p>\n\n<p>(you can also now use Firefox's built in developer tools Ctrl+Shift+J (Tools > Web Developer > Error Console), but Firebug is much better; use Firebug)</p>\n\n<p><strong>Safari and Chrome</strong></p>\n\n<p>Basically the same.</p>\n\n<p><a href=\"https://developer.chrome.com/devtools/index\">https://developer.chrome.com/devtools/index</a></p>\n\n<p><a href=\"https://developer.apple.com/technologies/safari/developer-tools.html\">https://developer.apple.com/technologies/safari/developer-tools.html</a> </p>\n\n<p><strong>Internet Explorer</strong></p>\n\n<p>Don't forget you can use compatibility modes to debug IE7 and IE8 in IE9 or IE10</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ie/gg589507%28v=vs.85%29.aspx\">http://msdn.microsoft.com/en-us/library/ie/gg589507(v=vs.85).aspx</a></p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/dd565628%28v=vs.85%29.aspx\">http://msdn.microsoft.com/en-us/library/dd565628(v=vs.85).aspx</a></p>\n\n<p>If you must access the console in IE6 for IE7 use the Firebug Lite bookmarklet</p>\n\n<p><a href=\"http://getfirebug.com/firebuglite/\">http://getfirebug.com/firebuglite/</a> look for stable bookmarklet </p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">http://en.wikipedia.org/wiki/Bookmarklet</a></p>\n\n<p><strong>Opera</strong></p>\n\n<p><a href=\"http://www.opera.com/dragonfly/\">http://www.opera.com/dragonfly/</a></p>\n\n<p><strong>iOS</strong></p>\n\n<p>Works for all iPhones, iPod touch and iPads.</p>\n\n<p><a href=\"http://developer.apple.com/library/ios/ipad/#DOCUMENTATION/AppleApplications/Reference/SafariWebContent/DebuggingSafarioniPhoneContent/DebuggingSafarioniPhoneContent.html\">http://developer.apple.com/library/ios/ipad/#DOCUMENTATION/AppleApplications/Reference/SafariWebContent/DebuggingSafarioniPhoneContent/DebuggingSafarioniPhoneContent.html</a></p>\n\n<p>Now with iOS 6 you can view the console through Safari in OS X if you plug in your device. Or you can do so with the emulator, simply open a Safari browser window and go to the \"Develop\" tab. There you will find options to get the Safari inspector to communicate with your device.</p>\n\n<p><strong>Windows Phone, Android</strong></p>\n\n<p>Both of these have no console built in and no bookmarklet ability. So we use \n<a href=\"http://jsconsole.com/\">http://jsconsole.com/</a> type :listen and it will give you a script tag to place in your HTML. From then on you can view your console inside the jsconsole website.</p>\n\n<p><strong>iOS and Android</strong></p>\n\n<p>You can also use <a href=\"http://html.adobe.com/edge/inspect/\">http://html.adobe.com/edge/inspect/</a> to access web inspector tools and the console on any device using their convenient browser plugin. </p>\n\n<hr>\n\n<p><strong>Older browser problems</strong></p>\n\n<p>Lastly older browsers (thanks again Microsoft) will crash if you use console.log in your code and not have the developer tools open at the same time. Luckily its an easy fix. Simple use the below code snippet at the top of your code and good old IE should leave you alone:</p>\n\n<pre><code> if(!window.console){ window.console = {log: function(){} }; } \n</code></pre>\n\n<p>This checks to see if the console is present, and if not it sets it to an object with a blank function called <code>log</code>. This way window.console and window.console.log is never truly <code>undefined.</code></p>\n",
                    "is_accepted": false,
                    "score": 179
                },
                {
                    "body": "<p>A point of confusion sometimes is that to log a text message along with the contents of one of your objects using console.log, you have to pass each one of the two as a different argument. This means that you have to separate them by commas because if you were to use the + operator to concatenate the outputs, this would implicitly call the <code>.toString()</code> method of your object. This in most cases is not explicitly overriden and the default implementation inherited by <code>Object</code> doesn't provide any useful information.</p>\n\n<p>Example to try in console:</p>\n\n<pre><code>&gt;&gt;&gt; var myObj = {foo: 'bar'}\nundefined\n&gt;&gt;&gt; console.log('myObj is: ', myObj);\nmyObj is: Object { foo= \"bar\"}\n</code></pre>\n\n<p>whereas if you tried to concatenate the informative text message along with the object's contents you'd get:</p>\n\n<pre><code>&gt;&gt;&gt; console.log('myObj is: ' + myObj);\nmyObj is: [object Object]\n</code></pre>\n\n<p>So keep in mind that console.log in fact takes as many arguments as you like.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>In early days JS debugging was performed through <strong>alert()</strong> function - now it is an obsolete practice.  </p>\n\n<p>The <strong>console.log();</strong> is a function that writes a message to log on the debugging console, such as  <a href=\"http://en.wikipedia.org/wiki/WebKit\" rel=\"nofollow\">Webkit</a> or Firebug. In a browser you will not see anything on the screen. It logs a message to a debugging console. It is only available in Firefox with  Firebug and in Webkit based browsers (Chrome and Safari). <a href=\"http://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function\">It does not work well in all IE releases</a>.</p>\n\n<p>The console object is an extension to the DOM. </p>\n\n<p>The <strong>console.log()</strong> should be used in code only during development and debugging.</p>\n\n<p>It\u2019s considered bad practice that someone leaves <strong>console.log()</strong> in the javascript file on the production server.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Apart from the usages mentioned above, <code>console.log</code> can also print to the terminal in <code>node.js</code>. A server created with express (for eg.) can use <code>console.log</code> to write to the output logger file.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If your browser supports debugging, you can use the console.log() method to display JavaScript values.</p>\n\n<p>Activate debugging in your browser with F12, and select \"Console\" in the debugger menu.</p>\n\n<p>Console in JavaScript. Try to fix, or \"debug,\" a non-functioning JavaScript program, and practice using the console.log() command. There are shortcuts that is going to help you to access to the JavaScript console, based on the browser that you are using:</p>\n\n<p>Chrome Console Keyboard Shortcuts</p>\n\n<pre><code>Windows: Ctrl + Shift + J\nMac: Cmd + Option + J\n</code></pre>\n\n<p>Firefox Console Keyboard Shortcuts</p>\n\n<pre><code>Windows: Ctrl + Shift + K\nMac: Cmd + Option + K\n</code></pre>\n\n<p>Internet Explorer Console Keyboard Shortcuts</p>\n\n<pre><code>F12 key\n</code></pre>\n\n<p>Safari Console Keyboard Shortcuts</p>\n\n<pre><code>Cmd + Option + C\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Android\nBoth of these have no console built in and no bookmarklet ability.</p>\n\n<p>I'm afraid that's not so, consoles can be enabled through dev settings and activated with proprietary commands in the url bar.</p>\n\n<p>:)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In java scripts there is no input and output functions. So to debug the code console.log() method is used.It is a method for logging. It will be printed under console log (development tools).</p>\n\n<p>Its is not present in IE8 and under until you open IE development tool.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What is the use of <code>console.log</code>? </p>\n\n<p>Please explain how to use it in JavaScript, with a code example.</p>\n",
            "last_activity_date": 1424655445,
            "question_id": 4539253,
            "score": 185,
            "tags": [
                "javascript",
                "firebug",
                "console.log"
            ],
            "title": "What is console.log?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>There is a <a href=\"http://wellcaffeinated.net/articles/2012/12/10/very-simple-css-only-proportional-resizing-of-elements/\" rel=\"nofollow\">clever hack for this here</a>, using an <code>&lt;img&gt;</code> element (because browsers preserve its aspect ratio).  But if you don't want to use a hack like this, your other option is to use Javascript and hook onto window.onresize and set the correct height value to match width as appropriate.</p>\n\n<p><strong>Update:</strong> I was wrong about there being no other pure-CSS way -- check <a href=\"http://stackoverflow.com/a/6615994/69697\">Nathan's answer</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Using jQuery you can achieve this by doing</p>\n\n<pre><code>var cw = $('.child').width();\n$('.child').css({'height':cw+'px'});\n</code></pre>\n\n<h2>Check working example at <a href=\"http://jsfiddle.net/n6DAu/1/\" rel=\"nofollow\">http://jsfiddle.net/n6DAu/1/</a></h2>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>[Update: Although I discovered this trick independently, I\u2019ve since learned that <a href=\"http://stackoverflow.com/users/350504/thierry-koblentz\">Thierry Koblentz</a> beat me to it. You can find his <a href=\"http://alistapart.com/article/creating-intrinsic-ratios-for-video\">2009 article</a> on A List Apart. Credit where credit is due.]</p>\n\n<p>I know this is an old question, but I encountered a similar problem that I <em>did</em> solve only with CSS. Here is my <a href=\"http://ansciath.tumblr.com/post/7347495869/css-aspect-ratio\">blog post</a> that discusses the solution. Included in the post is a <a href=\"http://jsfiddle.net/ansciath/B8FU8/\">live example</a>. Code is reposted below.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div id=\"container\"&gt;\n    &lt;div id=\"dummy\"&gt;&lt;/div&gt;\n    &lt;div id=\"element\"&gt;\n        some text\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>#container {\n    display: inline-block;\n    position: relative;\n    width: 50%;\n}\n#dummy {\n    margin-top: 75%; /* 4:3 aspect ratio */\n}\n#element {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: silver /* show me! */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 395
                },
                {
                    "body": "<p>There is a way using CSS! </p>\n\n<p>If you set your width depending on the parent container you can set the height to 0 and set padding-bottom to the percentage which will be calculated depending on the current width:</p>\n\n<pre><code>.some_element {\n    position: relative;\n    width: 20%;\n    height: 0;\n    padding-bottom: 20%;\n}\n</code></pre>\n\n<p>This works well in all major browsers.</p>\n",
                    "is_accepted": false,
                    "score": 193
                },
                {
                    "body": "<p>really this belongs as a comment to Nathan's answer, but I'm not allowed to do that yet...<br>\nI wanted to maintain the aspect ratio, even if there is too much stuff to fit in the box. His example expands the height, changing the aspect ratio. I found adding</p>\n\n<pre><code>overflow: hidden;\noverflow-x: auto;\noverflow-y: auto;\n</code></pre>\n\n<p>to the .element helped. See <a href=\"http://jsfiddle.net/B8FU8/3111/\" rel=\"nofollow\">http://jsfiddle.net/B8FU8/3111/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It is possible without any Javascript :)</p>\n\n<p>This article describes it perfectly - <a href=\"http://www.mademyday.de/css-height-equals-width-with-pure-css.html\">http://www.mademyday.de/css-height-equals-width-with-pure-css.html</a></p>\n\n<p>The HTML:</p>\n\n<pre><code>&lt;div class='box'&gt;\n    &lt;div class='content'&gt;Aspect ratio of 1:1&lt;/div&gt;\n&lt;/div&gt; \n</code></pre>\n\n<p>The CSS:</p>\n\n<pre><code>.box {\n    position: relative;\n    width:    50%; /* desired width */\n}\n\n.box:before {\n    content:     \"\";\n    display:     block;\n    padding-top: 100%; /* initial ratio of 1:1*/\n}\n\n.content {\n    position: absolute;\n    top:      0;\n    left:     0;\n    bottom:   0;\n    right:    0;\n}\n\n/* Other ratios - just apply the desired class to the \"box\" element */\n.ratio2_1:before{\n    padding-top: 50%;\n}\n.ratio1_2:before{\n    padding-top: 200%;\n}\n.ratio4_3:before{\n    padding-top: 75%;\n}\n.ratio16_9:before{\n    padding-top: 56.25%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p><strong>Simple and neet :</strong> use <code>vw</code> units for a responsive height/width according to the viewport width.</p>\n\n<blockquote>\n  <p><strong>vw :</strong> 1/100th of the width of the viewport.  (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length#Viewport-percentage_lengths\">Source MDN</a>)</p>\n</blockquote>\n\n<p><strong><a href=\"http://jsfiddle.net/webtiki/63aKp/5/\">DEMO</a></strong></p>\n\n<p><em>HTML:</em></p>\n\n<pre><code>&lt;div&gt;&lt;/div&gt;\n</code></pre>\n\n<p><em>CSS</em> for a 1:1 aspect ratio:</p>\n\n<pre><code>div{\n    width:80vw;\n    height:80vw; /* same as width */\n}\n</code></pre>\n\n<hr>\n\n<p>Table to calculate height according to the desired aspect ratio and width of element.</p>\n\n<pre><code>   aspect ratio  |  multiply width by\n    -----------------------------------\n         1:1      |         1\n         1:3      |         3\n         4:3      |        0.75\n        16:9      |       0.5625\n</code></pre>\n\n<hr>\n\n<p>This technique allows you to :</p>\n\n<ul>\n<li>insert any content inside the element without using <code>position:absolute;</code></li>\n<li>no unecessary HTML markup (only one element)</li>\n<li>adapt the elements aspect ratio according to the height of the viewport using vh units</li>\n<li>you can make a responsive square or other aspect ratio that alway fits in viewport according to the height and width of the viewport (see this answer : <a href=\"http://stackoverflow.com/a/23631436/1811992\">Responsive square according to width and height of viewport</a> or this <a href=\"http://jsfiddle.net/webtiki/63aKp/\">demo</a>)</li>\n</ul>\n\n<p>These units are supported by IE9+ see <a href=\"http://caniuse.com/viewport-units\">canIuse for more info</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>width: 80vmin;\nheight: 80vmin;</p>\n\n<p>CSS\ndoes 80% of the smallest view, height or width</p>\n\n<p><a href=\"http://caniuse.com/#feat=viewport-units\" rel=\"nofollow\">http://caniuse.com/#feat=viewport-units</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Expanding upon the padding top/bottom technique, it is possible to use a pseudo element to set the height of the element. Use overflow, float and negative margins to remove the pseudo element from the view and flow.</p>\n\n<p>This allows you to place content inside the box without using an extra div and/or CSS positioning.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.fixed-ar {\r\n  overflow: hidden;\r\n}\r\n.fixed-ar:before {\r\n  content: \"\";\r\n  float: left;\r\n  margin-left: -10px;\r\n  width: 10px;\r\n  padding-top: 100%;\r\n}\r\n.fixed-ar-4-3:before {\r\n  /* 100 * 3 / 4 = 75 */\r\n  padding-top: 75%;\r\n}\r\n.fixed-ar-16-9:before {\r\n  /* 100 * 9 / 16 = 56.25 */\r\n  padding-top: 56.25%;\r\n}\r\n/* examples */\r\n.fixed-ar {\r\n  margin: 1em 0;\r\n  max-width: 400px;\r\n  color: #999;\r\n  background: #EEE url(http://lorempixel.com/640/480/food/5/) center no-repeat;\r\n  background-size: contain;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"fixed-ar fixed-ar-4-3\"&gt;4:3 Aspect Ratio&lt;/div&gt;\r\n&lt;div class=\"fixed-ar fixed-ar-16-9\"&gt;16:9 Aspect Ratio&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>Extremely simple method <a href=\"https://jsfiddle.net/Ninjakannon/qkp4oxv0/\" rel=\"nofollow\">jsfiddle</a></h1>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div id=\"container\"&gt;\n    &lt;div id=\"element\"&gt;\n        some text\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>#container {\n    width: 50%;\n}\n\n#element {\n    height: 0;\n    padding-bottom: 100%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is it possible to set same height as width (ratio 1:1)?</p>\n\n<p><strong>Example</strong></p>\n\n<pre><code>+----------+\n| body     |\n| 1:3      |\n|          |\n| +------+ |\n| | div  | |\n| | 1:1  | |\n| +------+ |\n|          |\n|          |\n|          |\n|          |\n|          |\n+----------+\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>div {\n  width: 80%;\n  height: same-as-width\n}\n</code></pre>\n",
            "last_activity_date": 1425045871,
            "question_id": 5445491,
            "score": 165,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "css",
                "height"
            ],
            "title": "Height equal to dynamic width (CSS fluid layout)"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Look at hooking <code>document.onload</code> or in jQuery <code>$(document).load(...)</code>.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Just define &lt;body onload=\"aFunction()\"&gt; that will be called after the page has been loaded. Your code in the script is than enclosed by aFunction() { }</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>These solutions will work:</p>\n\n<pre><code>&lt;body onload=\"script();\"&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>document.onload = function ...\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>window.onload = function ...\n</code></pre>\n\n<p>Note that <strong>the last option is a better way to go</strong> since it is <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobstrusive</a> and is <a href=\"http://stackoverflow.com/questions/807878/javascript-that-executes-after-page-load#comment617710_807891\">considered more standard</a>.</p>\n",
                    "is_accepted": true,
                    "score": 197
                },
                {
                    "body": "<p>jQuery wrappers that for you.  You'll probably find it to be the easiest solution.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can put a \"onload\" attribute inside the body</p>\n\n<pre><code>...&lt;body onload=\"myFunction()\"&gt;...\n</code></pre>\n\n<p>Or if you are using jQuery, you can do </p>\n\n<pre><code>$(document).ready(function(){ /*code here*/ }) \n\nor \n\n$(window).load(function(){ /*code here*/ })\n</code></pre>\n\n<p>I hope it answer your question.</p>\n\n<p>Note that the $(window).load will execute after the document is rendered on your page.</p>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>As Daniel says, you could use document.onload.</p>\n\n<p>The various javascript frameworks hwoever (jQuery, Mootools, etc.) use a custom event 'domready', which I guess must be more effective.  If you're developing with javascript, I'd highly recommend exploiting a framework, they massively increase your productivity.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Reasonably portable, non-framework way of having your script set a function to run at load time:</p>\n\n<pre><code>if(window.attachEvent) {\n    window.attachEvent('onload', yourFunctionName);\n} else {\n    if(window.onload) {\n        var curronload = window.onload;\n        var newonload = function() {\n            curronload();\n            yourFunctionName();\n        };\n        window.onload = newonload;\n    } else {\n        window.onload = yourFunctionName;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>Using the <a href=\"http://developer.yahoo.com/yui\" rel=\"nofollow\">YUI library</a> (I love it):</p>\n\n<pre><code>YAHOO.util.Event.onDOMReady(function(){\n    //your code\n});\n</code></pre>\n\n<p>Portable and beautiful! However, if you don't use YUI for other stuff (see its doc) I would say that it's not worth to use it.</p>\n\n<p>N.B. : to use this code you need to import 2 scripts</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://yui.yahooapis.com/2.7.0/build/yahoo/yahoo-min.js\" &gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"http://yui.yahooapis.com/2.7.0/build/event/event-min.js\" &gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>//It's tested and working :)</p>\n\n<p>$(document).ready(function() {\n  functon1(); \n  function2()\n});</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n   function downloadJSAtOnload() {\n   var element = document.createElement(\"script\");\n   element.src = \"deferredfunctions.js\";\n   document.body.appendChild(element);\n }\n  if (window.addEventListener)\n      window.addEventListener(\"load\", downloadJSAtOnload, false);\n  else if (window.attachEvent)\n      window.attachEvent(\"onload\", downloadJSAtOnload);\n  else window.onload = downloadJSAtOnload;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you are using jQuery, </p>\n\n<p><code>$(function() {...});</code> </p>\n\n<p>is equivalent to </p>\n\n<p><code>$(document).ready(function () { })</code></p>\n\n<p>See <a href=\"http://stackoverflow.com/questions/3908724/what-event-does-jquery-function-fire-on\">What event does JQuery $function() fire on?</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong><a href=\"http://jsfiddle.net/aash1010/w9s0pe96/\" rel=\"nofollow\">Working Fiddle</a></strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction myFunction()\n{\n   alert(\"Page is loaded\");\n}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body onload=\"myFunction()\"&gt;\n&lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;/body&gt;    \n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>&lt;body onload=\"myFunction()\"&gt;\n</code></pre>\n\n<p>This code works well.</p>\n\n<p>But <code>window.onload</code> method has various dependencies. So it may not work all the time.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I find sometimes on more complex pages that not all the elements have loaded by the time window.onload is fired. If that's the case, add setTimeout before your function to delay is a moment. It's not elegant but it's a simple hack that renders well.</p>\n\n<p>window.onload = function(){ doSomethingCool(); };</p>\n\n<p>becomes...</p>\n\n<p>window.onload = function(){ setTimeout( function(){ doSomethingCool(); }, 1000); };</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the scripts are within the  tags, you can add 'defer' to the end of the first script tag like so: </p>\n\n\n\n<p>Quote from w3schools:</p>\n\n<blockquote>\n  <p>Definition and Usage The defer attribute is a boolean attribute.</p>\n  \n  <p>When present, it specifies that the script is executed when the page\n  has finished parsing.</p>\n  \n  <p>Note: The defer attribute is only for external scripts (should only be\n  used if the src attribute is present).</p>\n  \n  <p>Note: There are several ways an external script can be executed:</p>\n  \n  <p>If async is present: The script is executed asynchronously with the\n  rest of the page (the script will be executed while the page continues\n  the parsing) If async is not present and defer is present: The script\n  is executed when the page has finished parsing If neither async or\n  defer is present: The script is fetched and executed immediately,\n  before the browser continues parsing the page</p>\n</blockquote>\n\n<p><a href=\"http://www.w3schools.com/tags/att_script_defer.asp\" rel=\"nofollow\">http://www.w3schools.com/tags/att_script_defer.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>document.onreadystatechange = function(){\n     if(document.readyState === 'complete'){\n         /*code here*/\n     }\n}\n</code></pre>\n\n<p>look here: <a href=\"http://msdn.microsoft.com/en-us/library/ie/ms536957(v=vs.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ie/ms536957(v=vs.85).aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Best method, recommended by Google also. :)</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  function downloadJSAtOnload() {\n   var element = document.createElement(\"script\");\n   element.src = \"defer.js\";\n   document.body.appendChild(element);\n  }\n  if (window.addEventListener)\n   window.addEventListener(\"load\", downloadJSAtOnload, false);\n  else if (window.attachEvent)\n   window.attachEvent(\"onload\", downloadJSAtOnload);\n  else window.onload = downloadJSAtOnload;\n&lt;/script&gt;\n</code></pre>\n\n<p><a href=\"http://www.feedthebot.com/pagespeed/defer-loading-javascript.html\" rel=\"nofollow\">http://www.feedthebot.com/pagespeed/defer-loading-javascript.html</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm executing an external script, using a <code>&lt;script&gt;</code> inside <code>&lt;head&gt;</code>.</p>\n\n<p>Now since the script executes <strong>before</strong> the page has loaded, I can't access the <code>&lt;body&gt;</code>, among other things. I'd like to execute some JavaScript after the document has been \"loaded\" (HTML fully downloaded and in-RAM). Are there any events that I can hook onto when my script executes, that will get triggered on page load?</p>\n",
            "last_activity_date": 1420723436,
            "question_id": 807878,
            "score": 174,
            "tags": [
                "javascript",
                "html",
                "javascript-events",
                "pageload"
            ],
            "title": "Javascript that executes after page load"
        },
        {
            "answer_count": 25,
            "answers": [
                {
                    "body": "<p>It's very likely this action is prevented as part of the browser's security model.</p>\n\n<p>Edit: indeed, testing right now in Safari, I get the error <code>type property cannot be changed</code>.</p>\n\n<p>Edit 2: that seems to be an error straight out of jQuery. Using the following straight DOM code works just fine:</p>\n\n<pre><code>var pass = document.createElement('input');\npass.type = 'password';\ndocument.body.appendChild(pass);\npass.type = 'text';\npass.value = 'Password';\n</code></pre>\n\n<p>Edit 3: Straight from the jQuery source, this seems to be related to IE (and could either be a bug or part of their security model, but jQuery isn't specific):</p>\n\n<pre><code>// We can't allow the type property to be changed (since it causes problems in IE)\nif ( name == \"type\" &amp;&amp; jQuery.nodeName( elem, \"input\" ) &amp;&amp; elem.parentNode )\n    throw \"type property can't be changed\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 210
                },
                {
                    "body": "<p>Just create a new field to bypass this security thing:</p>\n\n<pre><code>var $oldPassword = $(\"#password\");\nvar $newPassword = $(\"&lt;input type='text' /&gt;\")\n                          .val($oldPassword.val())\n                          .appendTo($oldPassword.parent());\n$oldPassword.remove();\n$newPassword.attr('id','password');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Type properties can't be changed you need to replace or overlay the input with a text input and send the value to the password input on submit.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>An ultimate way to use jQuery:</p>\n\n<hr>\n\n<p>Leave the original input field hidden from the screen.</p>\n\n<pre><code>$(\"#Password\").hide(); //Hide it first\nvar old_id = $(\"#Password\").attr(\"id\"); //Store ID of hidden input for later use\n$(\"#Password\").attr(\"id\",\"Password_hidden\"); //Change ID for hidden input\n</code></pre>\n\n<p>Create new input field on the fly by JavaScript.</p>\n\n<pre><code>var new_input = document.createElement(\"input\");\n</code></pre>\n\n<p>Migrate the ID and value from hidden input field to the new input field.</p>\n\n<pre><code>new_input.setAttribute(\"id\", old_id); //Assign old hidden input ID to new input\nnew_input.setAttribute(\"type\",\"text\"); //Set proper type\nnew_input.value = $(\"#Password_hidden\").val(); //Transfer the value to new input\n$(\"#Password_hidden\").after(new_input); //Add new input right behind the hidden input\n</code></pre>\n\n<p>To get around the error on IE like <code>type property cannot be changed</code>, you may find this useful as belows:</p>\n\n<p>Attach click/focus/change event to new input element, in order to trigger the same event on hidden input.</p>\n\n<pre><code>$(new_input).click(function(){$(\"#Password_hidden\").click();});\n//Replicate above line for all other events like focus, change and so on...\n</code></pre>\n\n<p>Old hidden input element is still inside the DOM so will react with the event triggered by new input element. As ID is swapped, new input element will act like the old one and respond to any function call to old hidden input's ID, but looks different.</p>\n\n<blockquote>\n  <p>A little bit tricky but WORKS!!! ;-)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Even easier... there's no need for all the dynamic element creation. Just create two separate fields, making one the 'real' password field (type=\"password\") and one a 'fake' password field (type=\"text\"), setting the text in the fake field to a light gray color and setting the initial value to 'Password'. Then add a few lines of Javascript with jQuery as below:</p>\n\n<pre><code>    &lt;script type=\"text/javascript\"&gt;\n\n        function pwdFocus() {\n            $('#fakepassword').hide();\n            $('#password').show();\n            $('#password').focus();\n        }\n\n        function pwdBlur() {\n            if ($('#password').attr('value') == '') {\n                $('#password').hide();\n                $('#fakepassword').show();\n            }\n        }\n    &lt;/script&gt;\n\n    &lt;input style=\"color: #ccc\" type=\"text\" name=\"fakepassword\" id=\"fakepassword\" value=\"Password\" onfocus=\"pwdFocus()\" /&gt;\n    &lt;input style=\"display: none\" type=\"password\" name=\"password\" id=\"password\" value=\"\" onblur=\"pwdBlur()\" /&gt;\n</code></pre>\n\n<p>So when the user enters the 'fake' password field it will be hidden, the real field will be shown, and the focus will move to the real field. They will never be able to enter text in the fake field.</p>\n\n<p>When the user leaves the real password field the script will see if it's empty, and if so will hide the real field and show the fake one.</p>\n\n<p>Be careful not to leave a space between the two input elements because IE will position one a little bit after the other (rendering the space) and the field will appear to move when the user enters/exits it.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>I haven't tested in IE (since I needed this for an iPad site) - a form I couldn't change the HTML but I could add JS:</p>\n\n<pre><code>document.getElementById('phonenumber').type = 'tel';\n</code></pre>\n\n<p>(Old school JS is ugly next to all the jQuery!)</p>\n\n<p>But, <a href=\"http://bugs.jquery.com/ticket/1957\" rel=\"nofollow\">http://bugs.jquery.com/ticket/1957</a> links to MSDN: \"As of Microsoft Internet Explorer 5, the type property is read/write-once, but only when an input element is created with the createElement method and before it is added to the document.\" so maybe you could duplicate the element, change the type, add to DOM and remove the old one?</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>use this one it is very easy</p>\n\n<pre><code>&lt;input id=\"pw\" onclick=\"document.getElementById('pw').type='password';\n  document.getElementById('pw').value='';\"\n  name=\"password\" type=\"text\" value=\"Password\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I received the same error message while attempting to do this in Firefox 5.</p>\n\n<p>I solved it using the code below:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"JavaScript\"&gt;\n\n$(document).ready(function()\n{\n    var passfield = document.getElementById('password_field_id');\n    passfield.type = 'text';\n});\n\nfunction focusCheckDefaultValue(field, type, defaultValue)\n{\n    if (field.value == defaultValue)\n    {\n        field.value = '';\n    }\n    if (type == 'pass')\n    {\n        field.type = 'password';\n    }\n}\nfunction blurCheckDefaultValue(field, type, defaultValue)\n{\n    if (field.value == '')\n    {\n        field.value = defaultValue;\n    }\n    if (type == 'pass' &amp;&amp; field.value == defaultValue)\n    {\n        field.type = 'text';\n    }\n    else if (type == 'pass' &amp;&amp; field.value != defaultValue)\n    {\n        field.type = 'password';\n    }\n}\n\n&lt;/script&gt;\n</code></pre>\n\n<p>And to use it, just set the onFocus and onBlur attributes of your fields to something like the following:</p>\n\n<pre><code>&lt;input type=\"text\" value=\"Username\" name=\"username\" id=\"username\" \n    onFocus=\"javascript:focusCheckDefaultValue(this, '', 'Username -OR- Email Address');\"\n    onBlur=\"javascript:blurCheckDefaultValue(this, '', 'Username -OR- Email Address');\"&gt;\n\n&lt;input type=\"password\" value=\"Password\" name=\"pass\" id=\"pass\"\n    onFocus=\"javascript:focusCheckDefaultValue(this, 'pass', 'Password');\"\n    onBlur=\"javascript:blurCheckDefaultValue(this, 'pass', 'Password');\"&gt;\n</code></pre>\n\n<p>I use this for a username field as well, so it toggles a default value. Just set the second parameter of the function to '' when you call it.</p>\n\n<p>Also it might be worth noting that the default type of my password field is actually password, just in case a user doesn't have javascript enabled or if something goes wrong, that way their password is still protected. </p>\n\n<p>The $(document).ready function is jQuery, and loads when the document has finished loading. This then changes the password field to a text field. Obviously you'll have to change 'password_field_id' to your password field's id.</p>\n\n<p>Feel free to use and modify the code!</p>\n\n<p>Hope this helps everyone who had the same problem I did :)</p>\n\n<p>-- CJ Kent</p>\n\n<p>EDIT:\nGood solution but not absolute. Works on on FF8 and IE8 BUT not fully on Chrome(16.0.912.75 ver). Chrome does not display the <em>Password</em> text when the page loads.\nAlso - FF will display your password when autofill is switched on.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I like this way, to change the type of an input element: old_input.clone()....\nHere is an example. There is an check box \"id_select_multiple\". If this is is changed to \"selected\", input elements with name \"foo\" should be changed to check boxes. If it gets unchecked, they should be become radio buttons again.</p>\n\n<pre><code>  $(function() {\n    $(\"#id_select_multiple\").change(function() {\n     var new_type='';\n     if ($(this).is(\":checked\")){ // .val() is always \"on\"\n          new_type='checkbox';\n     } else {\n         new_type=\"radio\";\n     }\n     $('input[name=\"foo\"]').each(function(index){\n         var new_input = $(this).clone();\n         new_input.attr(\"type\", new_type);\n         new_input.insertBefore($(this));\n         $(this).remove();\n     });\n    }\n  )});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>$('#pass').focus(function() { \n$('#pass').replaceWith(\"&lt;input id='password' size='70' type='password' value='' name='password'&gt;\");\n$('#password').focus();\n});\n\n&lt;input id='pass' size='70' type='text' value='password' name='password'&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a little snippet that allows you to change the <code>type</code> of elements in documents.</p>\n\n<p><code>jquery.type.js</code> (<a href=\"https://gist.github.com/1192149\" rel=\"nofollow\">GitHub Gist</a>):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var rtype = /^(?:button|input)$/i;\n\njQuery.attrHooks.type.set = function(elem, value) {\n    // We can't allow the type property to be changed (since it causes problems in IE)\n    if (rtype.test(elem.nodeName) &amp;&amp; elem.parentNode) {\n        // jQuery.error( \"type property can't be changed\" );\n\n        // JB: Or ... can it!?\n        var $el = $(elem);\n        var insertionFn = 'after';\n        var $insertionPoint = $el.prev();\n        if (!$insertionPoint.length) {\n            insertionFn = 'prepend';\n            $insertionPoint = $el.parent();\n        }\n\n        $el.detach().attr('type', value);\n        $insertionPoint[insertionFn]($el);\n        return value;\n\n    } else if (!jQuery.support.radioValue &amp;&amp; value === \"radio\" &amp;&amp; jQuery.nodeName(elem, \"input\")) {\n        // Setting the type on a radio button after the value resets the value in IE6-9\n        // Reset value to it's default in case type is set after value\n        // This is for element creation\n        var val = elem.value;\n        elem.setAttribute(\"type\", value);\n        if (val) {\n            elem.value = val;\n        }\n        return value;\n    }\n}\n</code></pre>\n\n<p>It gets around the issue by removing the <code>input</code> from the document, changing the <code>type</code> and then putting it back where it was originally.</p>\n\n<p>Note that this snippet was only tested for WebKit browsers \u2013 no guarantees on anything else!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>One step solution</p>\n\n<pre><code>$('#password').get(0).type = 'text';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>A more cross-browser solution\u2026 I hope the gist of this helps someone out there.</p>\n\n<p>This solution tries to set the <code>type</code> attribute, and if it fails, it simply creates a new <code>&lt;input&gt;</code> element, preserving element attributes and event handlers.</p>\n\n<p><code>changeTypeAttr.js</code> (<a href=\"https://gist.github.com/3559343\" rel=\"nofollow\">GitHub Gist</a>):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>/* x is the &lt;input/&gt; element\n   type is the type you want to change it to.\n   jQuery is required and assumed to be the \"$\" variable */\nfunction changeType(x, type) {\n    x = $(x);\n    if(x.prop('type') == type)\n        return x; //That was easy.\n    try {\n        return x.prop('type', type); //Stupid IE security will not allow this\n    } catch(e) {\n        //Try re-creating the element (yep... this sucks)\n        //jQuery has no html() method for the element, so we have to put into a div first\n        var html = $(\"&lt;div&gt;\").append(x.clone()).html();\n        var regex = /type=(\\\")?([^\\\"\\s]+)(\\\")?/; //matches type=text or type=\"text\"\n        //If no match, we add the type attribute to the end; otherwise, we replace\n        var tmp = $(html.match(regex) == null ?\n            html.replace(\"&gt;\", ' type=\"' + type + '\"&gt;') :\n            html.replace(regex, 'type=\"' + type + '\"') );\n        //Copy data from old element\n        tmp.data('type', x.data('type') );\n        var events = x.data('events');\n        var cb = function(events) {\n            return function() {\n                //Bind all prior events\n                for(i in events)\n                {\n                    var y = events[i];\n                    for(j in y)\n                        tmp.bind(i, y[j].handler);\n                }\n            }\n        }(events);\n        x.replaceWith(tmp);\n        setTimeout(cb, 10); //Wait a bit to call function\n        return tmp;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>jQuery.fn.outerHTML = function() {\n    return $(this).clone().wrap('&lt;div&gt;').parent().html();\n};\n$('input#password').replaceWith($('input.password').outerHTML().replace(/text/g,'password'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This will do the trick. Although it could be improved to ignore attributes that are now irrelevant.</p>\n\n<p><b>Plugin:</b></p>\n\n<pre><code>(function($){\n  $.fn.changeType = function(type) {  \n    return this.each(function(i, elm) {\n        var newElm = $(\"&lt;input type=\\\"\"+type+\"\\\" /&gt;\");\n        for(var iAttr = 0; iAttr &lt; elm.attributes.length; iAttr++) {\n            var attribute = elm.attributes[iAttr].name;\n            if(attribute === \"type\") {\n                continue;\n            }\n            newElm.attr(attribute, elm.attributes[iAttr].value);\n        }\n        $(elm).replaceWith(newElm);\n    });\n  };\n})(jQuery);\n</code></pre>\n\n<p><b>Usage:</b></p>\n\n<pre><code>$(\":submit\").changeType(\"checkbox\");\n</code></pre>\n\n<p><b>Fiddle:</b></p>\n\n<p><a href=\"http://jsfiddle.net/joshcomley/yX23U/\" rel=\"nofollow\">http://jsfiddle.net/joshcomley/yX23U/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I guess you could use a background-image that contains the word \"password\" and change it back to an empty background-image on <code>.focus()</code>.</p>\n\n<p><code>.blur()</code>  ----> image with \"password\"</p>\n\n<p><code>.focus()</code> -----> image with no \"password\"</p>\n\n<p>You could also do it with some CSS and jQuery. Have a text field show up exactly on top of the password field, hide() is on focus() and focus on the password field... </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Simply this:</p>\n\n<pre><code>this.type = 'password';\n</code></pre>\n\n<p>such as</p>\n\n<pre><code>$(\"#password\").click(function(){\n    this.type = 'password';\n});\n</code></pre>\n\n<p>This is assuming that your input field was set to \"text\" before hand. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Simple solution for all those who want the functionality in all browsers:</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;input type=\"password\" id=\"password\"&gt;\n&lt;input type=\"text\" id=\"passwordHide\" style=\"display:none;\"&gt;\n&lt;input type=\"checkbox\" id=\"passwordSwitch\" checked=\"checked\"&gt;Hide password\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>$(\"#passwordSwitch\").change(function(){\n    var p = $('#password');\n    var h = $('#passwordHide');\n    h.val(p.val());\n    if($(this).attr('checked')=='checked'){\n        h.hide();\n        p.show();\n    }else{\n        p.hide();\n        h.show();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This works for me.</p>\n\n<pre><code>$('#password').replaceWith($('#password').clone().attr('type', 'text'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Nowadays, you can just use</p>\n\n<pre><code>$(\"#password\").prop(\"type\", \"text\");\n</code></pre>\n\n<p>But of course, you should really just do this</p>\n\n<pre><code>&lt;input type=\"password\" placeholder=\"Password\" /&gt;\n</code></pre>\n\n<p>in all but IE. There are placeholder shims out there to mimic that functionality in IE as well.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>heres a DOM solution</p>\n\n<pre><code>myInput=document.getElementById(\"myinput\");\noldHtml=myInput.outerHTML;\ntext=myInput.value;\nnewHtml=oldHtml.replace(\"password\",\"text\");\nmyInput.outerHTML=newHtml;\nmyInput=document.getElementById(\"myinput\");\nmyInput.value=text;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have you tried using .prop()?</p>\n\n<pre><code>$(\"#password\").prop('type','text');\n</code></pre>\n\n<p><a href=\"http://api.jquery.com/prop/\" rel=\"nofollow\">http://api.jquery.com/prop/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've created a jQuery extension to toggle between text and password.  Works in IE8 (probably 6&amp;7 as well, but not tested) and won't lose your value or attributes:</p>\n\n<pre><code>$.fn.togglePassword = function (showPass) {\n    return this.each(function () {\n        var $this = $(this);\n        if ($this.attr('type') == 'text' || $this.attr('type') == 'password') {\n            var clone = null;\n            if((showPass == null &amp;&amp; ($this.attr('type') == 'text')) || (showPass != null &amp;&amp; !showPass)) {\n                clone = $('&lt;input type=\"password\" /&gt;');\n            }else if((showPass == null &amp;&amp; ($this.attr('type') == 'password')) || (showPass != null &amp;&amp; showPass)){\n                clone = $('&lt;input type=\"text\" /&gt;');\n            }\n            $.each($this.prop(\"attributes\"), function() {\n                if(this.name != 'type') {\n                    clone.attr(this.name, this.value);\n                }\n            });\n            clone.val($this.val());\n            $this.replaceWith(clone);\n        }\n    });\n};\n</code></pre>\n\n<p>Works like a charm.  You can simply call <code>$('#element').togglePassword();</code> to switch between the two or give an option to 'force' the action based on something else (like a checkbox): <code>$('#element').togglePassword($checkbox.prop('checked'));</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this <br/>\n<strong><a href=\"http://jsfiddle.net/sureshpattu/5WMZH/62/\" rel=\"nofollow\">Demo is here</a></strong></p>\n\n<pre><code>$(document).delegate('input[type=\"text\"]','click', function() {\n    $(this).replaceWith('&lt;input type=\"password\" value=\"'+this.value+'\" id=\"'+this.id+'\"&gt;');\n}); \n$(document).delegate('input[type=\"password\"]','click', function() {\n    $(this).replaceWith('&lt;input type=\"text\" value=\"'+this.value+'\" id=\"'+this.id+'\"&gt;');\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It works much easier with that:</p>\n\n<pre><code>document.querySelector('input[type=password]').setAttribute('type', 'text');\n</code></pre>\n\n<p>and in order to turn it back to password field again,(<em>assuming the password field is the 2nd input tag with text type</em>):</p>\n\n<pre><code>document.querySelectorAll('input[type=text]')[1].setAttribute('type', 'password')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre class=\"lang-js prettyprint-override\"><code>$(document).ready(function() {\n    // #login-box password field\n    $('#password').attr('type', 'text');\n    $('#password').val('Password');\n});\n</code></pre>\n\n<p>This is supposed to change the <code>#password</code> input field (with <code>id=\"password\"</code>) that is of <code>type</code> <code>password</code> to a normal text field, and then fill in the text \u201cPassword\u201d.</p>\n\n<p>It doesn\u2019t work, though. Why?</p>\n\n<p>Here is the form:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form enctype=\"application/x-www-form-urlencoded\" method=\"post\" action=\"/auth/sign-in\"&gt;\n  &lt;ol&gt;\n    &lt;li&gt;\n      &lt;div class=\"element\"&gt;\n        &lt;input type=\"text\" name=\"username\" id=\"username\" value=\"Prihlasovacie meno\" class=\"input-text\" /&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;div class=\"element\"&gt;\n        &lt;input type=\"password\" name=\"password\" id=\"password\" value=\"\" class=\"input-text\" /&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n    &lt;li class=\"button\"&gt;\n      &lt;div class=\"button\"&gt;\n        &lt;input type=\"submit\" name=\"sign_in\" id=\"sign_in\" value=\"Prihl\u00e1si\u0165\" class=\"input-submit\" /&gt;\n      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/form&gt;\n</code></pre>\n",
            "last_activity_date": 1413893843,
            "question_id": 1544317,
            "score": 131,
            "tags": [
                "javascript",
                "jquery",
                "html-input"
            ],
            "title": "change type of input field with jQuery"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>No there is no cross-browser way for that. The DOM Level-2 has <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mutationevents\">Mutation event types</a>, but you can't use it in production because of the lack of support in IE. Note that the mutation events are <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents\">deprecated in the DOM3 Events spec</a> pending a new, better-performing replacement.</p>\n\n<p>Someone else is changing the document? Because if you have full control over the changes you just need to create a <code>domChanged</code> simple callback and call it everywhere you modify things. </p>\n\n<p>For a <em>full</em> domChange an interval would be an over-kill. Imagine that you need to store the current state of the whole document, and examine every element's every property to be the same.</p>\n\n<p>Maybe if you're only interested in elements and their order (as you mentioned in your question), a <code>getElementsByTagName(\"*\")</code> can work. This will fire automatically if you add an element, remove an element, replace elements or change the structure of the document. </p>\n\n<h2>Update</h2>\n\n<p>You can try to emulate mutation event with <code>onpropertychange</code> in IE (and fall back to the brute-force approach if non of them is available).</p>\n\n<p>I wrote a proof of concept:</p>\n\n<pre><code>(function (window) {\n    var last = +new Date();\n    var delay = 100; // default delay\n\n    // Manage event queue\n    var stack = [];\n\n    function callback() {\n        var now = +new Date();\n        if (now - last &gt; delay) {\n            for (var i = 0; i &lt; stack.length; i++) {\n                stack[i]();\n            }\n            last = now;\n        }\n    }\n\n    // Public interface\n    var onDomChange = function (fn, newdelay) {\n        if (newdelay) delay = newdelay;\n        stack.push(fn);\n    };\n\n    // Naive approach for compatibility\n    function naive() {\n\n        var last = document.getElementsByTagName('*');\n        var lastlen = last.length;\n        var timer = setTimeout(function check() {\n\n            // get current state of the document\n            var current = document.getElementsByTagName('*');\n            var len = current.length;\n\n            // if the length is different\n            // it's fairly obvious\n            if (len != lastlen) {\n                // just make sure the loop finishes early\n                last = [];\n            }\n\n            // go check every element in order\n            for (var i = 0; i &lt; len; i++) {\n                if (current[i] !== last[i]) {\n                    callback();\n                    last = current;\n                    lastlen = len;\n                    break;\n                }\n            }\n\n            // over, and over, and over again\n            setTimeout(check, delay);\n\n        }, delay);\n    }\n\n    //\n    //  Check for mutation events support\n    //\n\n    var support = {};\n\n    var el = document.documentElement;\n    var remain = 3;\n\n    // callback for the tests\n    function decide() {\n        if (support.DOMNodeInserted) {\n            window.addEventListener(\"DOMContentLoaded\", function () {\n                if (support.DOMSubtreeModified) { // for FF 3+, Chrome\n                    el.addEventListener('DOMSubtreeModified', callback, false);\n                } else { // for FF 2, Safari, Opera 9.6+\n                    el.addEventListener('DOMNodeInserted', callback, false);\n                    el.addEventListener('DOMNodeRemoved', callback, false);\n                }\n            }, false);\n        } else if (document.onpropertychange) { // for IE 5.5+\n            document.onpropertychange = callback;\n        } else { // fallback\n            naive();\n        }\n    }\n\n    // checks a particular event\n    function test(event) {\n        el.addEventListener(event, function fn() {\n            support[event] = true;\n            el.removeEventListener(event, fn, false);\n            if (--remain === 0) decide();\n        }, false);\n    }\n\n    // attach test events\n    if (window.addEventListener) {\n        test('DOMSubtreeModified');\n        test('DOMNodeInserted');\n        test('DOMNodeRemoved');\n    } else {\n        decide();\n    }\n\n    // do the dummy test\n    var dummy = document.createElement(\"div\");\n    el.appendChild(dummy);\n    el.removeChild(dummy);\n\n    // expose\n    window.onDomChange = onDomChange;\n})(window);\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>onDomChange(function(){ \n    alert(\"The Times They Are a-Changin'\");\n});\n</code></pre>\n\n<p>This works on IE 5.5+, FF 2+, Chrome, Safari 3+ and Opera 9.6+</p>\n",
                    "is_accepted": true,
                    "score": 50
                },
                {
                    "body": "<p>I wasn't aware that the Mutation event types were deprecated.  That's not good.  What we're seeing nowadays are more and more web <em>applications</em>.  Especially ones where the document is loaded only ONCE, and all new additions to the DOM come from AJAX responses.  Without knowing if a node was inserted, certain things become difficult.  Take the example where I want to set specific attributes on all form elements.  On DOM ready, I can easy loop through all forms and do whatever I need to do, no problem.  However, if a new form element is inserted via AJAX, I would be forced to manually perform the operation for each new form that's loaded, resulting in code duplication.  This causes maintenance headaches and is error-prone.  FWIW, jQuery's bubbling event delegation (a-la live() and on()) isn't sufficient in for this example, since we're not responding to an event; rather, we're modifying a node's attributes.</p>\n\n<p>In summary, for web applications which load only once, it makes sense to have the browser automatically call a callback each time the DOM is manipulated (e.g.: On 'DOMNodeInserted', call function foo()).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>This is the ultimate approach so far, with smallest code:</h1>\n\n<p><strong>IE9+, FF, Webkit:</strong> </p>\n\n<p>Using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/MutationObserver\">MutationObserver</a> and falling back to the deprecated <a href=\"https://developer.mozilla.org/en-US/docs/DOM/Mutation_events\">Mutation events</a> if needed:<br>\n<em>(only for DOM changes concerning nodes appended or removed)</em>\n<br><br></p>\n\n<pre><code>var observeDOM = (function(){\n    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver,\n        eventListenerSupported = window.addEventListener;\n\n    return function(obj, callback){\n        if( MutationObserver ){\n            // define a new observer\n            var obs = new MutationObserver(function(mutations, observer){\n                if( mutations[0].addedNodes.length || mutations[0].removedNodes.length )\n                    callback();\n            });\n            // have the observer observe foo for changes in children\n            obs.observe( obj, { childList:true, subtree:true });\n        }\n        else if( eventListenerSupported ){\n            obj.addEventListener('DOMNodeInserted', callback, false);\n            obj.addEventListener('DOMNodeRemoved', callback, false);\n        }\n    }\n})();\n\n// Observe a specific DOM element:\nobserveDOM( document.getElementById('dom_element') ,function(){ \n    console.log('dom changed');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>or you can simply <strong>Create your own event</strong>, that run everywhere</p>\n\n<pre><code> $(\"body\").on(\"domChanged\", function () {\n                //dom is changed \n            });\n\n\n $(\".button\").click(function () {\n\n          //do some change\n          $(\"button\").append(\"&lt;span&gt;i am the new change&lt;/span&gt;\");\n\n          //fire event\n          $(\"body\").trigger(\"domChanged\");\n\n        });\n</code></pre>\n\n<p>Full example \n<a href=\"http://jsfiddle.net/hbmaam/Mq7NX/\" rel=\"nofollow\">http://jsfiddle.net/hbmaam/Mq7NX/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I have recently written a plugin that does exactly that - <a href=\"https://github.com/AdamPietrasiak/jquery.initialize\" rel=\"nofollow\">jquery.initialize</a></p>\n\n<p>You use it the same way as <code>.each</code> function</p>\n\n<pre><code>$(\".some-element\").initialize( function(){\n    $(this).css(\"color\", \"blue\"); \n});\n</code></pre>\n\n<p>The difference from <code>.each</code> is - it takes your selector, in this case <code>.some-element</code> and wait for new elements with this selector in the future, if such element will be added, it will be initialized too.</p>\n\n<p>In our case initialize function just change element color to blue. So if we'll add new element (no matter if with ajax or even F12 inspector or anything) like:</p>\n\n<pre><code>$(\"&lt;div/&gt;\").addClass('some-element').appendTo(\"body\"); //new element will have blue color!\n</code></pre>\n\n<p>Plugin will init it instantly. Also plugin makes sure one element is initialized only once. So if you add element, then <code>.deatch()</code> it from body and then add it again, it will not be initialized again.</p>\n\n<pre><code>$(\"&lt;div/&gt;\").addClass('some-element').appendTo(\"body\").detach()\n    .appendTo(\".some-container\");\n//initialized only once\n</code></pre>\n\n<p>Plugin is based on <code>MutationObserver</code> - it will work on IE9 and 10 with dependencies as detailed on the <a href=\"https://github.com/AdamPietrasiak/jquery.initialize\" rel=\"nofollow\">readme page</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I want to execute a function when some div or input are added to the html.\nIs this possible?</p>\n\n<p>For example, a text input is added, then the function should be called.</p>\n",
            "last_activity_date": 1423241792,
            "question_id": 3219758,
            "score": 52,
            "tags": [
                "javascript",
                "dom",
                "mutation-events",
                "mutation-observers"
            ],
            "title": "Detect changes in the DOM"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><a href=\"http://blog.josh420.com/archives/2007/10/setting-cursor-position-in-a-textbox-or-textarea-with-javascript.aspx\">Setting Cursor Position in a Textbox or TextArea with Javascript</a> by Josh Stodola</p>\n\n<p><strong>EDIT</strong>: <em>Because this has been downvoted so many times, I went and found a copy on the wayback machine:</em></p>\n\n<p>Sometimes it is nice to be able to insert the cursor at a specific location within a textbox. The most common purpose for this, in my opinion, is with textareas. For a theoretical example, I will explain a scenario I have run into a few times. I have already typed a paragraph into a textarea for comments, a message, whatever. For whatever reason, I go back up on the form and change a different field, and then tab back down to the text area. By default, it highlights the whole body of text within the textarea. But, I wanted to append some text what was there! Now I either have to grab my mouse and click at the end of the box or use a series of keystrokes to get the caret back to where I need it.</p>\n\n<p>Ok fine, so maybe I am getting way too particular here.  But it really is a minor annoyance to me.  Granted, I could easily live with it, but I have come up with a solution instead. It would be best (again, this is my opinion) to programmatically force the cursor to jump to the end of the text area when it receives focus. I would not disagree that in some cases it can be rather convienent to have it it highlight the value on focus. But, for textareas, I just can not agree with it.</p>\n\n<p>Anyways, that is how I got around to creating this generic function that will allow you to insert the caret at any position of a textbox or textarea that you wish...</p>\n\n<pre><code>function setCaretPosition(elemId, caretPos) {\n    var elem = document.getElementById(elemId);\n\n    if(elem != null) {\n        if(elem.createTextRange) {\n            var range = elem.createTextRange();\n            range.move('character', caretPos);\n            range.select();\n        }\n        else {\n            if(elem.selectionStart) {\n                elem.focus();\n                elem.setSelectionRange(caretPos, caretPos);\n            }\n            else\n                elem.focus();\n        }\n    }\n}\n</code></pre>\n\n<p>The first expected parameter is the ID of the element you wish to insert the cursor on. If the element is unable to be found, nothing will happen (obviously). The second parameter is the caret positon index. Zero will put the cursor at the beginning. If you pass a number larger than the number of characters in the elements value, it will put the cursor at the end.</p>\n\n<p>I have tested it on several browsers; it works beautifully on IE6 and up, Firefox 2, Opera 8, Netscape 9, SeaMonkey, and Safari. Unfortunately on Safari it does not work in combination with the onfocus event (sigh).  If anybody out there has quick access to some older browsers (or any browser not mentioned above) and a few moments to test it, I'd really appreciate it if you let me know if it works or not.</p>\n\n<p>Keep in mind that the above function could potentially be used for several different purposes. Even though my original purpose was somewhat impractical, there is definite potential for this function! Here is the unobtrusive example of using it to apply my original purpose: force the cursor to jump to the end of all textareas on the page when they receive focus...</p>\n\n<pre><code>function addLoadEvent(func) {\n    if(typeof window.onload != 'function') {\n        window.onload = func;\n    }\n    else {\n        if(func) {\n            var oldLoad = window.onload;\n\n            window.onload = function() {\n                if(oldLoad)\n                        oldLoad();\n\n                func();\n            }\n        }\n    }\n}\n\n// The setCaretPosition function belongs right here!\n\nfunction setTextAreasOnFocus() {\n/***\n * This function will force the cursor to be positioned\n * at the end of all textareas when they receive focus.\n */\n    var textAreas = document.getElementsByTagName('textarea');\n\n    for(var i = 0; i &lt; textAreas.length; i++) {\n        textAreas[i].onfocus = function() {\n            setCaretPosition(this.id, this.value.length);\n        }\n    }\n\n    textAreas = null;\n}\n\naddLoadEvent(setTextAreasOnFocus);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>The link in the answer is broken, this one should work (all credits go to blog.vishalon.net):</p>\n\n<p><a href=\"http://snipplr.com/view/5144/getset-cursor-in-html-textarea/\">http://snipplr.com/view/5144/getset-cursor-in-html-textarea/</a></p>\n\n<p>In case the code gets lost again, here are the two main functions:</p>\n\n<pre><code>function doGetCaretPosition (ctrl) {\n\n    var CaretPos = 0;\n    // IE Support\n    if (document.selection) {\n\n        ctrl.focus ();\n        var Sel = document.selection.createRange ();\n\n        Sel.moveStart ('character', -ctrl.value.length);\n\n        CaretPos = Sel.text.length;\n    }\n    // Firefox support\n    else if (ctrl.selectionStart || ctrl.selectionStart == '0')\n        CaretPos = ctrl.selectionStart;\n\n    return (CaretPos);\n\n}\n\n\nfunction setCaretPosition(ctrl, pos)\n{\n\n    if(ctrl.setSelectionRange)\n    {\n        ctrl.focus();\n        ctrl.setSelectionRange(pos,pos);\n    }\n    else if (ctrl.createTextRange) {\n        var range = ctrl.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pos);\n        range.moveStart('character', pos);\n        range.select();\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<pre><code>function SetCursorEnd(tID) {\n    tID += \"\";\n    if (!tID.startsWith(\"#\")) { tID = \"#\" + tID; }\n    $(tID).focus();\n    var t = $(tID).val();\n    if (t.length == 0) { return; }\n    $(tID).val(\"\");\n    $(tID).val(t);\n    $(tID).scrollTop($(tID)[0].scrollHeight); }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;set cursor position&lt;/title&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\"&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nwindow.onload = function () {\n    setCursor(document.getElementById('input1'), 13, 13)\n}\n\nfunction setCursor(el, st, end) {\n    if (el.setSelectionRange) {\n        el.focus();\n        el.setSelectionRange(st, end);\n    } else {\n        if (el.createTextRange) {\n            range = el.createTextRange();\n            range.collapse(true);\n            range.moveEnd('character', end);\n            range.moveStart('character', st);\n            range.select();\n        }\n    }\n}\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div&gt;\n&lt;textarea id=\"input1\" name=\"input1\" rows=\"10\" cols=\"30\"&gt;Happy kittens dancing&lt;/textarea&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n  &lt;p align=\"center\"&gt;&amp;nbsp;&lt;/p&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've adjusted the answer of kd7 a little bit because elem.selectionStart will evaluate to false when the selectionStart is incidentally 0.</p>\n\n<pre><code>function setCaretPosition(elem, caretPos) {\n    var range;\n\n    if (elem.createTextRange) {\n        range = elem.createTextRange();\n        range.move('character', caretPos);\n        range.select();\n    } else {\n        elem.focus();\n        if (elem.selectionStart !== undefined) {\n            elem.setSelectionRange(caretPos, caretPos);\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Since I actually really needed this solution, and the typical baseline solution (<em>focus the input - then set the value equal to itself</em>) <strong>doesn't work cross-browser</strong>, I spent some time tweaking and editing everything to get it working. Building upon @<strong>kd7</strong>'s code here's what I've come up with.</p>\n\n<p><strong>Enjoy! Works in IE6+, Firefox, Chrome, Safari, Opera</strong></p>\n\n<p><a href=\"http://jsfiddle.net/VP9zT/1/\"><strong>Cross-browser caret positioning technique (example: moving the cursor to the END)</strong></a></p>\n\n<pre><code>// ** USEAGE ** (returns a boolean true/false if it worked or not)\n// Parameters ( Id_of_element, caretPosition_you_want)\n\nsetCaretPosition('IDHERE', 10); // example\n</code></pre>\n\n<p>The meat and potatoes is basically @<strong>kd7</strong>'s setCaretPosition, with the biggest tweak being <code>if (el.selectionStart || el.selectionStart === 0)</code>, in firefox the selectionStart is starting at <strong>0</strong>, which in boolean of course is turning to False, so it was breaking there.</p>\n\n<p>In chrome the biggest issue was that just giving it <code>.focus()</code> wasn't enough (it kept selecting ALL of the text!) Hence, we set the value of itself, to itself <code>el.value = el.value;</code> before calling our function, and now it has a grasp &amp; position with the input to use <strong>selectionStart</strong>.</p>\n\n<pre><code>function setCaretPosition(elemId, caretPos) {\n    var el = document.getElementById(elemId);\n\n    el.value = el.value;\n    // ^ this is used to not only get \"focus\", but\n    // to make sure we don't have it everything -selected-\n    // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n\n    if (el !== null) {\n\n        if (el.createTextRange) {\n            var range = el.createTextRange();\n            range.move('character', caretPos);\n            range.select();\n            return true;\n        }\n\n        else {\n            // (el.selectionStart === 0 added for Firefox bug)\n            if (el.selectionStart || el.selectionStart === 0) {\n                el.focus();\n                el.setSelectionRange(caretPos, caretPos);\n                return true;\n            }\n\n            else  { // fail city, fortunately this never happens (as far as I've tested) :)\n                el.focus();\n                return false;\n            }\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If you need to focus some textbox and your only problem is that the entire text gets highlighted whereas you want the cursor to be at the end, then in that specific case, you can use this trick of setting the textbox value to itself after focus:</p>\n\n<pre><code>$(\"#myinputfield\").focus().val($(\"#myinputfield\").val());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Does anybody know how to move the cursor in a textbox to a particular position?</p>\n\n<p>For example, if a text-box (e.g. input element, not text-area) has 50 characters in it and I want to position the cursor before character 20, how would I go about it?</p>\n\n<p>Jon</p>\n",
            "last_activity_date": 1389689229,
            "question_id": 512528,
            "score": 70,
            "tags": [
                "javascript",
                "textbox",
                "input"
            ],
            "title": "Set cursor position in html textbox"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/DOM/event.stopPropagation\">event.stopPropagation()</a></p>\n\n<p><strong>EDIT:</strong>\nFor IE: <code>window.event.cancelBubble = true</code></p>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>According to <a href=\"http://www.quirksmode.org/js/events_order.html\" rel=\"nofollow\">this page</a>, in IE you need:</p>\n\n<p>event.cancelBubble = true</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Keep in mind that window.event is not supported in FireFox, and therefore it must be something along the lines of:</p>\n\n<pre><code>e.cancelBubble = true\n</code></pre>\n\n<p>Or, you can use the W3C standard for FireFox:</p>\n\n<pre><code>e.stopPropagation();\n</code></pre>\n\n<p>If you want to get fancy, you can do this:</p>\n\n<pre><code>function myEventHandler(e)\n{\n    if (!e)\n      e = window.event;\n\n    //IE9 &amp; Other Browsers\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n    //IE8 and Lower\n    else {\n      e.cancelBubble = true;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>There are two ways to get the event object from inside a function:</p>\n\n<ol>\n<li>The first argument, in a W3C-compliant browser (Chrome, Firefox, Safari, IE9+)</li>\n<li>The window.event object in Internet Explorer (&lt;=8)</li>\n</ol>\n\n<p>If you need to support legacy browsers that don't follow the W3C recommendations, generally inside a function you would use something like the following:</p>\n\n<pre><code>function(e) {\n  var event = e || window.event;\n  [...];\n}\n</code></pre>\n\n<p>which would check first one, and then the other and store whichever was found inside the event variable. However in an inline event handler there isn't an <code>e</code> object to use. In that case you have to take advantage of the <code>arguments</code> collection which is always available and refers to the complete set of arguments passed to a function:</p>\n\n<pre><code>onclick=\"var event = arguments[0] || window.event; [...]\"\n</code></pre>\n\n<p>However, generally speaking you should be avoiding inline event handlers if you need to to anything complicated like stopping propagation. Writing your event handlers separately and the attaching them to elements is a much better idea in the medium and long term, both for readability and maintainability.</p>\n",
                    "is_accepted": false,
                    "score": 119
                },
                {
                    "body": "<p>Use this function, it will test for the existence of the correct method.</p>\n\n<pre><code>function disabledEventPropagation(event)\n{\n   if (event.stopPropagation){\n       event.stopPropagation();\n   }\n   else if(window.event){\n      window.event.cancelBubble=true;\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I had the same issue - js error box in IE - this works fine in all browsers as far as I can see (event.cancelBubble=true does the job in IE)</p>\n\n<pre><code>onClick=\"if(event.stopPropagation){event.stopPropagation();}event.cancelBubble=true;\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This also works - In the link HTML use onclick with return like this :</p>\n\n<pre><code>&lt;a href=\"mypage.html\" onclick=\"return confirmClick();\"&gt;Delete&lt;/a&gt;\n</code></pre>\n\n<p>And then the comfirmClick() function should be like:</p>\n\n<pre><code>function confirmClick() {\n    if(confirm(\"Do you really want to delete this task?\")) {\n        return true;\n    } else {\n        return false;\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For ASP.NET web pages (not MVC), you can use <code>Sys.UI.DomEvent</code> object as wrapper of native event. </p>\n\n<pre><code>&lt;div onclick=\"event.stopPropagation();\" ...\n</code></pre>\n\n<p>or, pass event as a parameter to inner function:</p>\n\n<pre><code>&lt;div onclick=\"someFunction(event);\" ...\n</code></pre>\n\n<p>and in someFunction:</p>\n\n<pre><code>function someFunction(event){\n    event.stopPropagation(); // here Sys.UI.DomEvent.stopPropagation() method is used\n    // other onclick logic\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This worked for me</p>\n\n<pre><code>&lt;script&gt;\nfunction cancelBubble(e) {\n var evt = e ? e:window.event;\n if (evt.stopPropagation)    evt.stopPropagation();\n if (evt.cancelBubble!=null) evt.cancelBubble = true;\n}\n&lt;/script&gt;\n\n&lt;div onclick=\"alert(\"Click!\")\"&gt;\n  &lt;div onclick=\"cancelBubble(event)\"&gt;Something inside the other div&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Consider the following:</p>\n\n<pre><code>&lt;div onclick=\"alert('you clicked the header')\" class=\"header\"&gt;\n  &lt;span onclick=\"alert('you clicked inside the header');\"&gt;something inside the header&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>How can I make it so that when the user clicks the span, it does not fire the div's onclick event?</p>\n",
            "last_activity_date": 1422808986,
            "question_id": 387736,
            "score": 122,
            "tags": [
                "javascript",
                "html",
                "events",
                "dom"
            ],
            "title": "How to stop event propagation with inline onclick attribute?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Use <code>new Date(<i>dateString</i>)</code> if your string is compatible with <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date/parse\"><code>Date.parse()</code></a>. If your format is incompatible (I think it is), you have to parse the string yourself (should be easy with regular expressions) and create a <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date\">new Date object</a> with explicit values for year, month, date, hour, minute and second.</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>I think this can help you: <a href=\"http://www.mattkruse.com/javascript/date/\">http://www.mattkruse.com/javascript/date/</a></p>\n\n<p>There's a <code>getDateFromFormat()</code> function that you can tweak a little to solve your problem.</p>\n\n<p>Update: there's an updated version of the samples available at <a href=\"http://www.javascripttoolbox.com/lib/date/index.php\">javascripttoolbox.com</a></p>\n",
                    "is_accepted": true,
                    "score": 73
                },
                {
                    "body": "<p><code>Date.parse()</code> is fairly intelligent but I can't guarantee that format will parse correctly.</p>\n\n<p>If it doesn't, you'd have to find something to bridge the two. Your example is pretty simple (being purely numbers) so a touch of REGEX (or even <code>string.split()</code> -- might be faster) paired with some <code>parseInt()</code> will allow you to quickly make a date.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>No sophisticated date/time formatting routines exist in JavaScript.</p>\n\n<p>You will have to use an external library for formatted date output, <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\">\"JavaScript Date Format\"</a> from Flagrant Badassery looks very promising.</p>\n\n<p>For the input conversion, several suggestions have been made already. :) </p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>var temp1=\"\";\nvar temp2=\"\";\n        var str1 = fd; \n        var str2 = td; \n        var dt1  = str1.substring(0,2); \n        var mon1 = str1.substring(3,5); \n        var yr1  = str1.substring(6,10);  \n        var dt2  = str2.substring(0,2); \n        var mon2 = str2.substring(3,5); \n        var yr2  = str2.substring(6,10); \n        temp1 = mon1 +\"/\"+ dt1 +\"/\"+ yr1;\n        temp2 = mon2 +\"/\"+ dt2 +\"/\"+ yr2;\n\n\n        var cfd = Date.parse(temp1);\n        var ctd = Date.parse(temp2);\n\n\n        var date1 = new Date(cfd); \n        var date2 = new Date(ctd);\n\n\n\n\n       if(date1 &gt; date2) \n                { \n                alert(\"FROM DATE SHOULD BE MORE THAN TO DATE\");\n                } \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Just for an updated answer here, there's a good js lib at <a href=\"http://www.datejs.com/\" rel=\"nofollow\">http://www.datejs.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>@Christoph Mentions using a regex to tackle the problem. Here's what I'm using:</p>\n\n<pre><code>var dateString = \"2010-08-09 01:02:03\";\nvar reggie = /(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/;\nvar dateArray = reggie.exec(dateString); \nvar dateObject = new Date(\n    (+dateArray[1]),\n    (+dateArray[2])-1, // Careful, month starts at 0!\n    (+dateArray[3]),\n    (+dateArray[4]),\n    (+dateArray[5]),\n    (+dateArray[6])\n);\n</code></pre>\n\n<p>It's by no means intelligent, just configure the regex and <code>new Date(blah)</code> to suit your needs</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>To fully satisfy the <strong>Date.parse</strong> convert string to format dd-mm-YYYY as specified in RFC822,\nif you use yyyy-mm-dd parse may do a mistakes.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Just to give my 5 cents.</p>\n\n<p>My date format is dd.mm.yy and none of the above examples were working for me. All the parsers  were considering mm as day and dd as month.</p>\n\n<p>I've found this library: <a href=\"http://joey.mazzarelli.com/2008/11/25/easy-date-parsing-with-javascript/\" rel=\"nofollow\">http://joey.mazzarelli.com/2008/11/25/easy-date-parsing-with-javascript/</a>\nand it worked, because you can say the order of the fields like this:</p>\n\n<pre><code>&gt;&gt;console.log(new Date(Date.fromString('09.05.2012', {order: 'DMY'})));\nWed May 09 2012 00:00:00 GMT+0300 (EEST)\n</code></pre>\n\n<p>I hope that helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check out <a href=\"http://momentjs.com/\" rel=\"nofollow\">Moment.js</a>. It is a modern and powerful library that makes up for JavaScript's woeful Date functions (or lack thereof).</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can I convert a string to a date time object in javascript by specifying a format string?</p>\n\n<p>I am looking for something like:</p>\n\n<pre><code>var dateTime = convertToDateTime(\"23.11.2009 12:34:56\", \"dd.MM.yyyy HH:mm:ss\");\n</code></pre>\n",
            "last_activity_date": 1403221024,
            "question_id": 476105,
            "score": 119,
            "tags": [
                "javascript",
                "datetime",
                "type-conversion"
            ],
            "title": "How can I convert string to datetime with format specification in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Quoting <a href=\"http://www.oreillynet.com/pub/au/156\">David Flanagan</a><sup>1</sup>:</p>\n\n<blockquote>\n  <p>As a special case, for the <code>new</code> operator only, JavaScript simplifies the grammar by allowing the parenthesis to be omitted if there are no arguments in the function call. Here are some examples using the <code>new</code> operator:</p>\n\n<pre><code>o = new Object;  // Optional parenthesis omitted here\nd = new Date();  \n\n...\n</code></pre>\n</blockquote>\n\n<p>Personally, I always use the parenthesis, even when the constructor takes no arguments. </p>\n\n<p>In addition, <a href=\"http://www.jslint.com/\">JSLint</a> may hurt your feelings if you omit the parenthesis. It reports <code>Missing '()' invoking a constructor</code>, and there doesn't seem to be an option for the tool to tolerate parenthesis omission.</p>\n\n<hr>\n\n<p><sup>1</sup> David Flanagan: <a href=\"http://oreilly.com/catalog/9780596000486\">JavaScript the Definitive Guide: 4th Edition</a> (page 75)</p>\n",
                    "is_accepted": true,
                    "score": 113
                },
                {
                    "body": "<p>If you do not have arguments to pass, the parentheses are optional. Omitting them is just syntactic sugar.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>There's no difference between the two.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I don't think there is any difference when you are using the \"new\" operator. Be careful about getting into this habit, as these two lines of code are NOT the same:</p>\n\n<pre><code>var someVar = myFunc; // this assigns the function myFunc to someVar\nvar someOtherVar = myFunc(); // this executes myFunc and assigns the returned value to someOtherVar\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>One cognitive issue I envisage with omitting parenthesis is in the circumstance where a constructor allows you to create a new object with or without the 'new' operator. Most should be able to understand that this would just pass the constructor to the variable, say, but it's messy when looked at logically. I think this is why JSLint is correct in flagging an issue in this particular circumstance.</p>\n\n<p>I actually do use the shorthand syntax though when I can as it looks tidy... so I guess it's really just what suits you.</p>\n\n<p>Edit:\nAs I was downvoted for this, I thought I'd elaborate on that point.</p>\n\n<p>This creates a new Number object:</p>\n\n<pre><code>var num = new Number(2);\n</code></pre>\n\n<p>And so does this:</p>\n\n<pre><code>var num = Number(2);\n</code></pre>\n\n<p>That is a lot like doing this:</p>\n\n<pre><code>function Number (val) {\n    if (!(this instanceof Number)) {\n        return new Number(val);\n    }\n    this.val = val || 0;\n}\n</code></pre>\n\n<p>So if I were to give that <code>Number</code> function another name like <code>SausageMaker</code>, replacing <code>Number</code> with <code>SausageMaker</code> and initialising as follows:</p>\n\n<pre><code>function SausageMaker (val) {\n    if (!(this instanceof SausageMaker)) {\n        return new SausageMaker(val);\n    }\n    this.val = val || 0;\n}\n\nvar s = SausageMaker(4);\n</code></pre>\n\n<p>I wouldn't know if s is a sausage making object or that <code>SausageMaker(4)</code> just ran as a function, thus <code>s</code> containing some other value such as an array of sausages. It's only down to the knowledge of JavaScript recommended code style that we camelCase instances and variables containing scalar values that we know that <code>SausageMaker</code> is an object, so we should probably stick to just these 2 variations at most:</p>\n\n<pre><code>var sTwo = new SausageMaker(1);\nvar sThr = SausageMaker(1);\n</code></pre>\n\n<p>And not this:</p>\n\n<pre><code>var sOne = new SausageMaker;\n</code></pre>\n\n<p>To save confusion.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-new-operator-runtime-semantics-evaluation\" rel=\"nofollow\">https://people.mozilla.org/~jorendorff/es6-draft.html#sec-new-operator-runtime-semantics-evaluation</a></p>\n\n<p>Here's the part of the ES6 spec that defines how the two variants operate. The no-parentheses variant passes an empty argument list.</p>\n\n<p>Interestingly, the two forms have different grammatical meanings. This comes up when you try to access a member of the result.</p>\n\n<pre><code>new Array.length // fails because Array.length is the number 1, not a constructor\nnew Array().length // 0\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In some JavaScript code snippets (e.g. <a href=\"http://mckoss.com/jscript/object.htm\">http://mckoss.com/jscript/object.htm</a>) I have seen objects being created in this way:</p>\n\n<pre><code>var obj = new Foo;\n</code></pre>\n\n<p>However, at least at <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/new_Operator\">MDC</a>, it seems that the parentheses are not optional when creating an object:</p>\n\n<pre><code>var obj = new Foo();\n</code></pre>\n\n<p>Is the former way of creating objects valid and defined in the ECMA standard? Are there any differences between the former way of creating objects and the later? Is one preferred over the other?</p>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1401322477,
            "question_id": 3034941,
            "score": 97,
            "tags": [
                "javascript"
            ],
            "title": "new MyObject(); vs new MyObject;"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>use </p>\n\n<p><a href=\"http://docs.jquery.com/Events/jQuery.Event#event.stopPropagation.28.29\">event.stopPropagation()</a> </p>\n\n<blockquote>\n  <p>Stops the bubbling of an event to\n  parent elements, preventing any parent\n  handlers from being notified of the\n  event.</p>\n</blockquote>\n\n<p>when click on b and c</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>prevent event from propagating up.</p>\n\n<pre><code>function handler(event) {\n    event.stopPropagation();\n    // now do your stuff        \n}\n$('#a').add('#b').click(handler);\n</code></pre>\n\n<p>This way clicks to <code>'#b'</code> will not propagate to <code>'#a'</code>. Neither will clicks to <code>'#c'</code> go to <code>'#b'</code>, and hence not to <code>'#a'</code>.</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": true,
                    "score": 33
                }
            ],
            "body": "<p>I have a tree of divs:</p>\n\n<pre><code>&lt;div id=\"a\" onclick=\"func\"&gt;\n    &lt;div id=\"b\" onclick=\"func\"&gt;\n         &lt;div id=\"c\" onclick=\"func\"&gt;\n         &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>When a click is made on a div it makes it's children invisible - ie click on \"a\" will turn \"b\" and \"c\" invisible.</p>\n\n<pre><code>function func{\n   if ($(childId).hasClass(\"visible\")){\n\t$(childId).removeClass(\"visible\");\n\t$(childId).addClass(\"invisible\");\n}\n</code></pre>\n\n<p>The problem is: a click on \"b\" will call \"a\"'s click and make \"b\" and \"c\" invisible. How do I disable the click on \"a\" using jQuery?</p>\n\n<p>thanks</p>\n",
            "last_activity_date": 1343231966,
            "question_id": 1398582,
            "score": 17,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Prevent execution of parent event handler"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><a href=\"http://nodejs.org/api/modules.html#modules_module_exports\"><code>module.exports</code></a> is the object that's actually returned as the result of a <code>require</code> call.</p>\n\n<p>The <code>exports</code> variable is initially set to that same object (i.e. it's a shorthand \"alias\"), so in the module code you would usually write something like this:</p>\n\n<pre><code>var myFunc1 = function() { ... };\nvar myFunc2 = function() { ... };\nexports.myFunc1 = myFunc1;\nexports.myFunc2 = myFunc2;\n</code></pre>\n\n<p>to export (or \"expose\") the internally scoped functions <code>myFunc1</code> and <code>myFunc2</code>.</p>\n\n<p>And in the calling code you would use:</p>\n\n<pre><code>var m = require('mymodule');\nm.myFunc1();\n</code></pre>\n\n<p>where the last line shows how the result of <code>require</code> is (usually) just a plain object whose properties may be accessed.</p>\n\n<p>NB: if you overwrite <code>exports</code> then it will no longer refer to <code>module.exports</code>.  So if you wish to assign a new object (or a function reference) to <code>exports</code> then you should also assign that new object to <code>module.exports</code></p>\n\n<hr>\n\n<p>It's worth noting that the name added to the <code>exports</code> object does not have to be the same as the module's internally scoped name for the value that you're adding, so you could have:</p>\n\n<pre><code>var myVeryLongInternalName = function() { ... };\nexports.shortName = myVeryLongInternalName;\n// add other objects, functions, as required\n</code></pre>\n\n<p>followed by:</p>\n\n<pre><code>var m = require('mymodule');\nm.shortName(); // invokes module.myVeryLongInternalName\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 752
                },
                {
                    "body": "<p>This has already been answered but I wanted to add some clarification...</p>\n\n<p>You can use both <code>exports</code> and <code>module.exports</code> to import code into your application like this:</p>\n\n<p><code>var mycode = require('./path/to/mycode');</code></p>\n\n<p>The basic use case you'll see (e.g. in ExpressJS example code) is that you set properties on the <code>exports</code> object in a .js file that you then import using <code>require()</code></p>\n\n<p>So in a simple counting example, you could have:</p>\n\n<p>(counter.js):</p>\n\n<pre><code>var count = 1;\nexports.increment = function() { count++; };\nexports.getCount = function() { return count; };\n</code></pre>\n\n<p>... then in your application (web.js, or really any other .js file):</p>\n\n<pre><code>var counting = require('./counter.js');\nconsole.log(counting.getCount()); // 1\ncounting.increment();\nconsole.log(counting.getCount()); // 2\n</code></pre>\n\n<p>In simple terms, you can think of required files as functions that return a single object, and you can add properties (strings, numbers, arrays, functions, anything) to the object that's returned by setting them on <code>exports</code>.</p>\n\n<p>Sometimes you'll want the object returned from a <code>require()</code> call to be a function you can call, rather than just an object with properties. In that case you need to also set <code>module.exports</code>, like this:</p>\n\n<p>(sayhello.js):</p>\n\n<pre><code>module.exports = exports = function() { console.log(\"Hello World!\"); }\n</code></pre>\n\n<p>(app.js):</p>\n\n<pre><code>var sayHello = require('./sayhello.js');\nsayHello(); // \"Hello World!\"\n</code></pre>\n\n<p>The difference between exports and module.exports is explained better in <a href=\"http://stackoverflow.com/questions/7137397/module-exports-vs-exports-in-nodejs\">this answer here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 81
                },
                {
                    "body": "<p>Note that NodeJS module mechanism is based on <a href=\"http://en.wikipedia.org/wiki/CommonJS\"><strong>CommonJS</strong></a> modules which are supported in many other implementations like <strong>RequireJS</strong>, but also <strong>SproutCore</strong>, <strong>CouchDB</strong>, <strong>Wakanda</strong>, <strong>OrientDB</strong>, <strong>ArangoDB</strong>, <strong>RingoJS</strong>, <strong>TeaJS</strong>, <strong>SilkJS</strong>, <strong>curl.js</strong>, or even <strong>Adobe Photoshop</strong> (via <a href=\"https://github.com/theiviaxx/PSLib\">PSLib</a>).\nThe full list of known implementations is there: <a href=\"http://www.commonjs.org/impl/\">http://www.commonjs.org/impl/</a></p>\n\n<p>Unless your module use node specific features or module, I highly encourage you then using <code>exports</code> instead of <code>module.exports</code> <strong>which is not part of the CommonJS standard</strong>, and then mostly not supported by other implementations.</p>\n\n<p>Another NodeJS specific feature is when you assign a reference to a new object to <code>exports</code> instead of just adding properties and methods to it like in the last example provided by Jed Watson in this thread. I would personally discourage this practice as this <strong>breaks the circular reference support</strong> of the CommonJS modules mechanism. It is then not supported by all implementations and Jed example should then be written this way (or a similar one) to provide a more universal module:</p>\n\n<p>(sayhello.js):</p>\n\n<pre><code>exports.run = function() { console.log(\"Hello World!\"); }\n</code></pre>\n\n<p>(app.js):</p>\n\n<pre><code>var sayHello = require('./sayhello');\nsayHello.run(); // \"Hello World!\"\n</code></pre>\n\n<p>PS: It looks like Appcelerator also implements CommonJS modules, but without the circular reference support (see: <a href=\"http://stackoverflow.com/questions/10859630/appcelerator-and-commonjs-modules-caching-and-circular-references\">Appcelerator and CommonJS modules (caching and circular references)</a>)</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Some few things you must take care if you assign a reference to a new object to <code>exports</code> and /or <code>modules.exports</code>:</p>\n\n<h3>1. All properties/methods previously attached to the original <code>exports</code> or <code>module.exports</code> are of course lost because the exported object will now reference another new one</h3>\n\n<p>This one is obvious, but <strong>if you add an exported method at the beginning of an existing module, be sure the native exported object is not referencing another object at the end</strong></p>\n\n<pre><code>exports.method1 = function () {}; // exposed to the original exported object\nexports.method2 = function () {}; // exposed to the original exported object\n\nmodule.exports.method3 = function () {}; // exposed with method1 &amp; method2\n\nvar otherAPI = {\n    // some properties and/or methods\n}\n\nexports = otherAPI; // replace the original API (works also with module.exports)\n</code></pre>\n\n<h3>2. In case one of <code>exports</code> or <code>module.exports</code> reference a new value, they don't reference to the same object any more</h3>\n\n<pre><code>exports = function AConstructor() {}; // override the original exported object\nexports.method2 = function () {}; // exposed to the new exported object\n\n// method added to the original exports object which not exposed any more\nmodule.exports.method3 = function () {}; \n</code></pre>\n\n<h3>3. Tricky consequence. If you change the reference to either <code>exports</code> and <code>module.exports</code>, hard to say which API is exposed (it looks like <code>module.exports</code> wins)</h3>\n\n<pre><code>// override the original exported object\nmodule.exports = function AConstructor() {};\n\n// try to override the original exported object\n// but module.exports will be exposed instead\nexports = function AnotherConstructor() {}; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>the module.exports property or the exports object allows a module to select what should be shared with the application</p>\n\n<p><img src=\"http://i.stack.imgur.com/vI2Hm.jpg\" alt=\"enter image description here\"></p>\n\n<p>A nice video on module_export is available <a href=\"https://www.youtube.com/watch?v=qLc29euevzc&amp;index=14&amp;list=PLrUFyg1unBb88J0r7gvJ1T01WN_pp83Lz\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>What is the purpose of Node.js module.exports and how do you use it?</p>\n\n<p>I can't seem to find any information on this, but it appears to be a rather important part of Node.js as I often see it in source code.  </p>\n\n<p>According to the <a href=\"http://nodejs.org/docs/v0.4.2/api/globals.html#module\">Node.js documentation</a>:</p>\n\n<blockquote>\n  <p><strong>module</strong> </p>\n  \n  <p>A reference to the current\n  <code>module</code>. In particular <code>module.exports</code>\n  is the same as the exports object. See\n  <code>src/node.js</code> for more information.</p>\n</blockquote>\n\n<p>But this doesn't really help.</p>\n\n<p>What exactly does <code>module.exports</code> do, and what would a simple example be?</p>\n",
            "last_activity_date": 1421556164,
            "question_id": 5311334,
            "score": 552,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "What is the purpose of Node.js module.exports and how do you use it?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>You'll want to use JavaScript's built-in <a href=\"http://www.devguru.com/Technologies/ecmascript/quickref/location.html\"><code>window.location</code></a> object.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>To get the path, you can use:</p>\n\n<pre><code>var pathname = window.location.pathname; // Returns path only\nvar url      = window.location.href;     // Returns full URL\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1082
                },
                {
                    "body": "<p>If you need the hash parameters present in the URL, <code>window.location.href</code> may be a better choice.</p>\n\n<pre><code>window.location.pathname\n=&gt; /search\n\nwindow.location.href \n =&gt; www.website.com/search#race_type=1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>Just add this function in JavaScript, and it will return the absolute path of the current path.</p>\n\n<pre><code>function getAbsolutePath() {\n    var loc = window.location;\n    var pathName = loc.pathname.substring(0, loc.pathname.lastIndexOf('/') + 1);\n    return loc.href.substring(0, loc.href.length - ((loc.pathname + loc.search + loc.hash).length - pathName.length));\n}\n</code></pre>\n\n<p>I hope it works for you.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>In pure jQuery style:</p>\n\n<pre><code>$(location).attr('href');\n</code></pre>\n\n<p>The location object also has other properties, like host, hash, protocol, and pathname.</p>\n",
                    "is_accepted": false,
                    "score": 654
                },
                {
                    "body": "<p>For the host name only, use:</p>\n\n<pre><code>window.location.hostname\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This is a more complicated issue than many may think.  Several browsers support built-in JavaScript location objects and associated parameters/methods accessible through <code>window.location</code> or <code>document.location</code>. However, different flavors of Internet Explorer (6,7) don't support these methods in the same way, (<code>window.location.href</code>?  <code>window.location.replace()</code> not supported) so you have to access them differently by writing conditional code all the time to hand-hold Internet Explorer.</p>\n\n<p>So, if you have jQuery available and loaded, you might as well use jQuery (location), as the others mentioned because it resolves these issues. If however, you are doing-for an example-some client-side geolocation redirection via JavaScript (that is, using Google Maps API and location object methods), then you may not want to load the entire jQuery library and write your conditional code that checks every version of Internet Explorer/Firefox/etc.</p>\n\n<p>Internet Explorer makes the front-end coding cat unhappy, but jQuery is a plate of milk.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p><strong><em>window.location</em></strong> will give you the current <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a>, and you can extract whatever you want from it...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you want to get the path of the root site, use this:</p>\n\n<pre><code>$(location).attr('href').replace($(location).attr('pathname'),'');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This will also work:</p>\n\n<pre><code>var currentURL = window.location.href;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I have this to strip out the GET variables.</p>\n\n<pre><code>var loc = window.location;\nvar currentURL = loc.protocol + '//' + loc.host + loc.pathname;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><code>var path = location.pathname</code> returns the path of the current URL in jQuery. There is no need to use <code>window</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code> var currenturl = jQuery(location).attr('href');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can log window.location and see all the options, for just the URL use:</p>\n\n<pre><code>window.location.origin\n</code></pre>\n\n<p>for the whole path use:</p>\n\n<pre><code>window.location.href\n</code></pre>\n\n<p>there's also location.<em>_</em>_</p>\n\n<pre><code>.host\n.hostname\n.protocol\n.pathname\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>http://www.refulz.com:8082/index.php#tab2?foo=789\n\nProperty    Result\n------------------------------------------\nhost        www.refulz.com:8082\nhostname    www.refulz.com\nport        8082\nprotocol    http\npathname    index.php\nhref        http://www.refulz.com:8082/index.php#tab2\nhash        #tab2\nsearch      ?foo=789\n\nvar x = $(location).attr('&lt;property&gt;');\n</code></pre>\n\n<p><strong>Or if you have jQuery you can do it like this:</strong></p>\n\n<pre><code>&lt;html&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js\"&gt;\n&lt;/script&gt;\n  $(location).attr('href');      // http://www.refulz.com:8082/index.php#tab2\n  $(location).attr('pathname');  // index.php\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 219
                },
                {
                    "body": "<p>The following are examples of useful code snippets that can be used \u2013 some of the examples use standard JavaScript functions and are not specific to jQuery:</p>\n\n<p>See <em><a href=\"http://www.designchemical.com/blog/index.php/jquery/8-useful-jquery-snippets-for-urls-querystrings/\" rel=\"nofollow\">8 Useful jQuery Snippets For URL\u2019s &amp; Querystrings</a></em>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This will return the absolute <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a> of the current page using JavaScript/<a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a>. </p>\n\n<ul>\n<li><p><code>document.URL</code></p></li>\n<li><p><code>$(\"*\").context.baseURI</code></p></li>\n<li><p><code>location.href</code></p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If there is someone who wants to concatenate the <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a> and hash tag, combine two functions:</p>\n\n<pre><code>var pathname = window.location.pathname + document.location.hash;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To get the URL of the parent window from within an iframe:</p>\n\n<pre><code>$(window.parent.location).attr('href');\n</code></pre>\n\n<p>NB: only works on same domain</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here is an example to get the current URL using jQuery and JavaScript:</p>\n\n<pre><code>$(document).ready(function() {\n\n    //jQuery\n    $(location).attr('href');\n\n    //Pure JavaScript\n    var pathname = window.location.pathname;\n\n    // To show it in an alert window\n    alert(window.location);\n});\n\n\n$.getJSON(\"idcheck.php?callback=?\", { url:$(location).attr('href')}, function(json){\n    //alert(json.message);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Use <strong>window.location.href</strong>. This will give you the complete <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://github.com/allmarkedup/purl/\" rel=\"nofollow\">purl.js</a></p>\n\n<p>this will do much help, and can also use depending on jQuery.\nuse like this:</p>\n\n<pre><code>$.url().param(\"yourparam\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using jQuery. How do I get the path of the current URL and assign it to a variable?</p>\n\n<p>Example URL:</p>\n\n<pre><code>http://localhost/menuname.de?foo=bar&amp;amp;number=0\n</code></pre>\n",
            "last_activity_date": 1422950563,
            "question_id": 406192,
            "score": 771,
            "tags": [
                "javascript",
                "jquery",
                "url",
                "path"
            ],
            "title": "Get current URL in JavaScript?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>The closest thing in JavaScript to a static variable is a global variable - this is simply a variable declared outside the scope of a function or object literal:</p>\n\n<pre><code>var thisIsGlobal = 1;\n\nfunction foo() {\n    var thisIsNot = 2;\n}\n</code></pre>\n\n<p>The other thing you could do would be to store global variables inside an object literal like this:</p>\n\n<pre><code>var foo = { bar : 1 }\n</code></pre>\n\n<p>And then access the variabels like this: <code>foo.bar</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Window level vars are sorta like statics in the sense that you can use direct reference and these are available to all parts of your app</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You might take advantage of the fact that JS functions are also objects -- which means they can have properties.</p>\n\n<p>For instance, quoting the example given on the (now vanished) article <a href=\"http://web.archive.org/web/20120502014437/http://www.tipstrs.com/tip/1084/Static-variables-in-Javascript\">Static variables in Javascript</a>:</p>\n\n<pre><code>function countMyself() {\n    // Check to see if the counter has been initialized\n    if ( typeof countMyself.counter == 'undefined' ) {\n        // It has not... perform the initialization\n        countMyself.counter = 0;\n    }\n\n    // Do something stupid to indicate the value\n    alert(++countMyself.counter);\n}\n</code></pre>\n\n<p>If you call that function several time, you'll see the counter is being incremented.</p>\n\n<p>And this is probably a much better solution than poluting the global namespace with a global variable.</p>\n\n<p><br>\nAnd here is another possible solution, based on a closure : <a href=\"http://chamnapchhorn.blogspot.com/2008/07/trick-to-use-static-variables-in.html\">Trick to use static variables in javascript</a> : </p>\n\n<pre><code>var uniqueID = (function() {\n   var id = 0; // This is the private persistent value\n   // The outer function returns a nested function that has access\n   // to the persistent value.  It is this nested function we're storing\n   // in the variable uniqueID above.\n   return function() { return id++; };  // Return and increment\n})(); // Invoke the outer function after defining it.\n</code></pre>\n\n<p>Which gets you the same kind of result -- except, this time, the incremented value is returned, instead of displayed.</p>\n",
                    "is_accepted": false,
                    "score": 330
                },
                {
                    "body": "<p>There is no such thing as an static variable in Javascript. This language is prototype-based object orientated, so there are no classes, but prototypes from where objects \"copy\" themselves.</p>\n\n<p>You may simulate them with global variables or with prototyping (adding a property to the prototype):</p>\n\n<pre><code>function circle(){\n}\ncircle.prototype.pi=3.14159\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you come from a class-based, strongly typed object-oriented language <em>(like Java, C++ or C#)</em> I assume that you are trying to create a variable or method associated to a \"type\" but not to an instance.</p>\n\n<p>An example using a \"classical\" approach, with constructor functions maybe could help you to catch the concepts of basic OO JavaScript:</p>\n\n<pre><code>function MyClass () { // constructor function\n  var privateVariable = \"foo\";  // Private variable \n\n  this.publicVariable = \"bar\";  // Public variable \n\n  this.privilegedMethod = function () {  // Public Method\n    alert(privateVariable);\n  };\n}\n\n// Instance method will be available to all instance but only load once in memory \nMyClass.prototype.publicMethod = function () {    \n  alert(this.publicVariable);\n};\n\n// Static variable shared by all instance \nMyClass.staticProperty = \"baz\";\n\n//...\nvar myInstance = new MyClass();\n</code></pre>\n\n<p><code>staticProperty</code> is defined in the MyClass object (which is a function) and has nothing to do with its created instances, JavaScript treats functions as <a href=\"http://en.wikipedia.org/wiki/First-class_function\">first-class objects</a>, so being an object, you can assign properties to a function.</p>\n",
                    "is_accepted": true,
                    "score": 406
                },
                {
                    "body": "<p>you can use arguments.callee to store \"static\" variables (this is useful in anonymous function too):</p>\n\n<pre><code>function () {\n  arguments.callee.myStaticVar = arguments.callee.myStaticVar || 1;\n  arguments.callee.myStaticVar++;\n  alert(arguments.callee.myStaticVar);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>The following example and explanation are from the book Professional JavaScript for Web Developers 2nd Edition by Nicholas Zakas. This is the answer I was looking for so I thought it would be helpful to add it here.</p>\n\n<pre><code>(function () {\n    var name = '';\n    Person = function (value) {\n        name = value;\n    };\n    Person.prototype.getName = function () {\n        return name;\n    };\n    Person.prototype.setName = function (value) {\n        name = value;\n    };\n}());\nvar person1 = new Person('Nate');\nconsole.log(person1.getName()); // Nate\nperson1.setName('James');\nconsole.log(person1.getName()); // James\nperson1.name = 'Mark';\nconsole.log(person1.name); // Mark\nconsole.log(person1.getName()); // James\nvar person2 = new Person('Danielle');\nconsole.log(person1.getName()); // Danielle\nconsole.log(person2.getName()); // Danielle\n</code></pre>\n\n<p>The <code>Person</code> constructor in this example has access to the private variable name, as do the <code>getName()</code> and <code>setName()</code> methods. Using this pattern, the name variable becomes static and will be used among all instances. This means calling <code>setName()</code> on one instance affects all other instances. Calling <code>setName()</code> or creating a new <code>Person</code> instance sets the name variable to a new value. This causes all instances to return the same value.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>function Person(){\n  if(Person.count == undefined){\n    Person.count = 1;\n  }\n  else{\n    Person.count ++;\n  }\n  console.log(Person.count);\n}\n\nvar p1 = new Person();\nvar p2 = new Person();\nvar p3 = new Person();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>If you wanted to make a global static variable:</p>\n\n<pre><code>var my_id = 123;\n</code></pre>\n\n<p>Replace the variable with the below:</p>\n\n<pre><code>Object.defineProperty(window, 'my_id', {\n    get: function() {\n            return 123;\n        },\n    configurable : false,\n    enumerable : false\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>{\n   var statvar = 0;\n   function f_counter()\n   {\n      var nonstatvar = 0;\n      nonstatvar ++;\n      statvar ++;\n      return statvar + \" , \" + nonstatvar;\n   }\n}\nalert(f_counter());\nalert(f_counter());\nalert(f_counter());\nalert(f_counter());\n</code></pre>\n\n<p>This is just another way of having a static variable that I learned somewhere.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>You do it through an IIFE (immediately invoked function expression):</p>\n\n<pre><code>var incr = (function () {\n    var i = 1;\n\n    return function () {\n        return i++;\n    }\n})();\n\nincr(); // returns 1\nincr(); // returns 2\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If you want to declare static variables for creating constants in your application then I found following as most simplistic approach</p>\n\n<pre><code>ColorConstants = (function()\n{\n    var obj = {};\n    obj.RED = 'red';\n    obj.GREEN = 'green';\n    obj.BLUE = 'blue';\n    obj.ALL = [obj.RED, obj.GREEN, obj.BLUE];\n    return obj;\n})();\n\n//Example usage.\nvar redColor = ColorConstants.RED;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There's another approach, which solved my requirements after browsing this thread. It depends on exactly what you want to achieve with a \"static variable\".</p>\n\n<p>The global property sessionStorage or localStorage allows data to be stored for the life of the session, or for an indefinite longer period until explicitly cleared, respectively. This allows data to be shared among all windows, frames, tab panels, popups etc of your page/app and is much more powerful than a simple \"static/global variable\" in one code segment.</p>\n\n<p>It avoids all hassle with the scope, lifetime, semantics, dynamics etc of top-level global variables, ie Window.myglobal. Don't know how efficient it is, but that's not important for modest amounts of data, accessed at modest rates.</p>\n\n<p>Easily accessed as \"sessionStorage.mydata = anything\" and retrieved similarly. See \n\"JavaScript: The Definitive Guide, Sixth Edition\", David Flanagan, ISBN: 978-0-596-80552-4, Chapter 20, section 20.1. This is easily downloadable as a PDF by simple search, or in your O'Reilly Safaribooks subscription (worth its weight in gold).</p>\n\n<p>Cheers, Greg E</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've seen a couple of similar answers, but I'd like to mention that <a href=\"http://elegantcode.com/2011/01/19/basic-javascript-part-7-static-properties-and-methods/\" rel=\"nofollow\">this post</a> describes it best, so I'd like to share it with you.</p>\n\n<p>Here's some code taken from it, which I have modified to get a complete example which hopefully gives benefit to the community because it can be used as a design template for classes. </p>\n\n<p>It also <strong>answers your question:</strong></p>\n\n<pre><code>function Podcast() {\n\n    // private variables\n    var _somePrivateVariable = 123;\n\n    // object properties\n    this.title = 'Astronomy Cast';\n    this.description = 'A fact-based journey through the galaxy.';\n    this.link = 'http://www.astronomycast.com';\n\n    this.immutableProp = function() {\n        return _somePrivateVariable;\n    }\n\n    // object function\n    this.toString = function() {\n       return 'Title: ' + this.title;\n    }\n};\n\n// static property\nPodcast.FILE_EXTENSION = 'mp3';\n// static function\nPodcast.download = function(podcast) {\n    console.log('Downloading ' + podcast + ' ...');\n};\n</code></pre>\n\n<p>Given that example, you can access the <strong>static properties/function</strong> as follows:</p>\n\n<pre><code>// access static properties/functions\nPodcast.FILE_EXTENSION;                // 'mp3'\nPodcast.download('Astronomy cast');    // 'Downloading Astronomy cast ...'\n</code></pre>\n\n<p>And the <strong>object properties/functions</strong> simply as:</p>\n\n<pre><code>// access object properties/functions\nvar podcast = new Podcast();\npodcast.title = 'The Simpsons';\npodcast.toString();\nconsole.log(podcast.immutableProp());\n</code></pre>\n\n<p>You can even define <strong>getters and setters</strong>. Take a look at this code snippet (where <code>d</code> is the object's prototype for which you want to declare a property, <code>y</code> is a private variable not visible outside of the constructor):</p>\n\n<pre><code>var d = Date.prototype;\nObject.defineProperty(d, \"year\", {\n    get: function() {return this.getFullYear() },\n    set: function(y) { this.setFullYear(y) }\n});\n</code></pre>\n\n<p>It defines the property <code>d.year</code> via <code>get</code> and <code>set</code> functions - if you don't specify <code>set</code>, then the property is read-only and cannot be modified (be aware you will not get an error if you try to set it, but it has no effect). Each property has the attributes <code>writable</code>, <code>configurable</code> (allow to change after declaration) and <code>enumerable</code> (allow to use it as enumerator), which are per default <code>false</code>. You can set them via <code>defineProperty</code> in the 3rd parameter, e.g. <code>enumerable: true</code>.</p>\n\n<p>What is also valid is this syntax:</p>\n\n<pre><code>var obj = { a: 7, \n            get b() {return this.a + 1;}, \n            set c(x) {this.a = x / 2}\n        };\n</code></pre>\n\n<p>which defines a readable/writable property <code>a</code>, a readonly property <code>b</code> and a write-only property <code>c</code>, through which property <code>a</code> can be accessed. </p>\n\n<p><strong>Notes:</strong> </p>\n\n<p>To avoid unexpected behaviour in case you've forgotten the <code>new</code> keyword, I suggest that you add the following to the function <code>Podcast</code>:</p>\n\n<pre><code>function Podcast() {\n    if(false === (this instanceof Podcast)) {\n        return new Podcast();\n    }\n// [... same as above ...]\n};\n</code></pre>\n\n<p>Now both of the following instantiations will work as expected:</p>\n\n<pre><code>var podcast = new Podcast();\nvar podcast = Podcast();\n</code></pre>\n\n<p><strong>Note also,</strong> that in some situations it can be useful to use the <code>return</code> statement in the constructor function <code>Podcast</code> to return a custom object protecting functions the class internally relies on but which need to be exposed. This is explained further in chapter 2 (Objects) of the article series.</p>\n\n<hr>\n\n<p>The <a href=\"http://elegantcode.com/2011/01/19/basic-javascript-part-7-static-properties-and-methods/\" rel=\"nofollow\">article series</a> I've mentioned above are <strong>highly recommended</strong> to read, they include also the following topics:</p>\n\n<ol>\n<li>Functions</li>\n<li>Objects</li>\n<li>Prototypes</li>\n<li>Enforcing New on Constructor Functions</li>\n<li>Hoisting</li>\n<li>Automatic Semicolon Insertion</li>\n<li>Static Properties and Methods</li>\n</ol>\n\n<p><strong>Note</strong> that the <em><a href=\"http://elegantcode.com/2011/01/12/basic-javascript-part-6-automatic-semicolon-insertion/\" rel=\"nofollow\">automatic semicolon insertion</a></em> \"feature\" of JavaScript (as mentioned in 6.) is very often responsible for causing strange issues in your code. Hence, I would rather regard it as a bug than as a feature.</p>\n\n<p>If you want to read more, <a href=\"http://msdn.microsoft.com/en-us/magazine/cc163419.aspx\" rel=\"nofollow\">here</a> is a quite interesting <strong>MSDN article</strong> about these topics, some of them described there provide even more details.</p>\n\n<p>What is <strong>interesting to read</strong> as well (also covering the topics mentioned above) are those articles from the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\" rel=\"nofollow\">MDN JavaScript Guide</a>:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" rel=\"nofollow\">A re-introduction to JavaScript</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\" rel=\"nofollow\">Working with Objects</a></li>\n</ul>\n\n<hr>\n\n<p>Those of you who are <strong>working with IE</strong> (which has no console for JavaScript) might find the following snippet useful. It allows you to use <code>console.log(msg);</code> as used in the examples above. Just insert it before the <code>Podcast</code> function:</p>\n\n<pre><code>var console = {\n    log:function(msg) {\n        alert(msg);\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>To condense all class concepts here, test this:</p>\n\n<pre><code>var Test = function() {\n  // \"super private\" variable, accessible only here in constructor. There are no real private variables\n  //if as 'private' we intend variables accessible only by the class that defines the member and NOT by child classes\n  var test_var = \"super private\";\n\n  //the only way to access the \"super private\" test_var is from here\n  this.privileged = function(){\n    console.log(test_var);\n  }();\n\n  Test.test_var = 'protected';//protected variable: accessible only form inherited methods (prototype) AND child/inherited classes\n\n  this.init();\n};//end constructor\n\nTest.test_var = \"static\";//static variable: accessible everywhere (I mean, even out of prototype, see domready below)\n\nTest.prototype = {\n\n init:function(){\n   console.log('in',Test.test_var);\n }\n\n};//end prototype/class\n\n\n//for example:\n$(document).ready(function() {\n\n console.log('out',Test.test_var);\n\n var Jake = function(){}\n\n Jake.prototype = new Test();\n\n Jake.prototype.test = function(){\n   console.log('jake', Test.test_var);\n }\n\n var jake = new Jake();\n\n jake.test();//output: \"protected\"\n\n});//end domready\n</code></pre>\n\n<p>Well, another way to take a look to best practices in these things, is to just see how coffeescript translates these concepts.</p>\n\n<pre><code>#this is coffeescript\nclass Test\n #static\n @prop = \"static\"\n\n #instance\n constructor:(prop) -&gt;\n   @prop = prop\n   console.log(@prop)\n\n t = new Test('inst_prop');\n\n console.log(Test.prop);\n\n\n//this is how the above is translated in plain js by the CS compiler\n  Test = (function() {\n    Test.prop = \"static\";\n\n    function Test(prop) {\n     this.prop = prop;\n     console.log(this.prop);\n    }\n\n    return Test;\n\n  })();\n\n  t = new Test('inst_prop');\n\n  console.log(Test.prop);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Working with MVC websites that use jQuery, I like to make sure AJAX actions within certain event handlers can only be executed once the previous request has completed. I use a \"static\" jqXHR object variable to achieve this.</p>\n\n<p>Given the following button:</p>\n\n<pre><code>&lt;button type=\"button\" onclick=\"ajaxAction(this, { url: '/SomeController/SomeAction' })\"&gt;Action!&lt;/button&gt;\n</code></pre>\n\n<p>I generally use an IIFE like this for my click handler:</p>\n\n<pre><code>var ajaxAction = (function (jqXHR) {\n    return function (sender, args) {\n        if (!jqXHR || jqXHR.readyState == 0 || jqXHR.readyState == 4) {\n            jqXHR = $.ajax({\n                url: args.url,\n                type: 'POST',\n                contentType: 'application/json',\n                data: JSON.stringify($(sender).closest('form').serialize()),\n                success: function (data) {\n                    // Do something here with the data.\n                }\n            });\n        }\n    };\n})(null);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>'Class' System</h2>\n\n<pre><code>var Rect = (function(){\n    'use strict';\n     return {\n        instance: function(spec){\n            'use strict';\n            spec = spec || {};\n\n            /* Private attributes and methods */\n            var x = (spec.x === undefined) ? 0 : spec.x,\n            y = (spec.x === undefined) ? 0 : spec.x,\n            width = (spec.width === undefined) ? 1 : spec.width,\n            height = (spec.height === undefined) ? 1 : spec.height;\n\n            /* Public attributes and methods */\n            var that = { isSolid: (spec.solid === undefined) ? false : spec.solid };\n\n            that.getX = function(){ return x; };\n            that.setX = function(value) { x = value; };\n\n            that.getY = function(){ return y; };\n            that.setY = function(value) { y = value; };\n\n            that.getWidth = function(){ return width; };\n            that.setWidth = function(value) { width = value; };\n\n            that.getHeight = function(){ return height; };\n            that.setHeight = function(value) { height = value; };\n\n            return that;\n        },\n\n        copy: function(obj){\n            return Rect.instance({ x: obj.getX(), y: obj.getY(), width: obj.getWidth, height: obj.getHeight(), solid: obj.isSolid });\n        }\n    }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to use prototype then there is a way</p>\n\n<pre><code>var p = function Person() {\n    this.x = 10;\n    this.y = 20;\n}\np.prototype.counter = 0;\nvar person1 = new p();\nperson1.prototype = p.prototype;\nconsole.log(person1.counter);\nperson1.prototype.counter++;\nvar person2 = new p();\nperson2.prototype = p.prototype;\nconsole.log(person2.counter);\nconsole.log(person1.counter);\n</code></pre>\n\n<p>Doing this you will be able to access the counter variable from any instance and any change in the property will be immediately reflected!!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I remember JavaScript Closures when I See this.. Here is how i do it..</p>\n\n<pre><code>        function Increment() {\n            var num = 0; // Here num is a private static variable\n            return function () {\n                return ++num;\n            }\n        }\n\n        var inc = new Increment();\n        console.log(inc());//Prints 1\n        console.log(inc());//Prints 2\n        console.log(inc());//Prints 3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>There are other similar answers, but none of them quite appealed to me. Here's what I ended up with:</p>\n\n<pre><code>var nextCounter = (function () {\n  var counter = 0;\n  return function() {\n    var temp = counter;\n    counter += 1;\n    return temp;\n  };\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I create static variables in Javascript?</p>\n",
            "last_activity_date": 1423366467,
            "question_id": 1535631,
            "score": 295,
            "tags": [
                "javascript",
                "variables",
                "static"
            ],
            "title": "Static variables in JavaScript"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Yes it is :)  I think you can also do <code>Object.prototype.hasOwnProperty.call(x, 'key')</code> which should also work if <code>x</code> has a property called <code>hasOwnProperty</code> :)</p>\n\n<p>But that tests for own properties.  If you want to check if it has an property that may also be inhered you can use <code>typeof x.foo != 'undefined'</code>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>if (x.key !== undefined)\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/users/19990/armin-ronacher\">Armin Ronacher</a> seems to have already <a href=\"http://stackoverflow.com/questions/135448/how-do-i-check-to-see-if-an-object-has-an-attribute-in-javascript#135466\">beat me to it</a>, but:</p>\n\n<pre><code>Object.prototype.hasOwnProperty = function(property) {\n    return this[property] !== undefined;\n};\n\nx = {'key': 1};\n\nif (x.hasOwnProperty('key')) {\n    alert('have key!');\n}\n\nif (!x.hasOwnProperty('bar')) {\n    alert('no bar!');\n}\n</code></pre>\n\n<p>A safer, but slower solution, <a href=\"http://stackoverflow.com/questions/135448/how-do-i-check-to-see-if-an-object-has-an-attribute-in-javascript#135568\">as pointed out</a> by <a href=\"http://stackoverflow.com/users/1968/konrad-rudolph\">Konrad Rudolph</a> and <a href=\"http://stackoverflow.com/users/19990/armin-ronacher\">Armin Ronacher</a> would be:</p>\n\n<pre><code>Object.prototype.hasOwnProperty = function(property) {\n    return typeof this[property] !== 'undefined';\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>OK, it looks like I had the right answer unless if you don't want inherited properties:</p>\n\n<pre><code>if (x.hasOwnProperty('key'))\n</code></pre>\n\n<p>Here are some other options to include inherited properties:</p>\n\n<pre><code>if (x.key) // Quick and dirty, but it does the same thing as below.\n\nif (x.key !== undefined)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>if (typeof x.key != \"undefined\") {\n\n}\n</code></pre>\n\n<p>Because</p>\n\n<pre><code>if (x.key)\n</code></pre>\n\n<p>fails if <code>x.key</code> resolves to <code>false</code> (for example, <code>x.key = \"\"</code>).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Bear in mind that <code>undefined</code> is (unfortunately) <em>not</em> a reserved word in JavaScript. Therefore, someone (someone else, obviously) could have the grand idea of redefining it, breaking your code.</p>\n\n<p>A more robust method is therefore the following:</p>\n\n<pre><code>if (typeof(x.attribute) !== 'undefined')\n</code></pre>\n\n<p>On the flip side, this method is much more verbose and also slower. :-/</p>\n\n<p>A common alternative is to ensure that <code>undefined</code> is <em>actually</em> undefined, e.g. by putting the code into a function which accepts an additional parameter, called <code>undefined</code>, that isn\u2019t passed a value. To ensure that it\u2019s not passed a value, you could just call it yourself immediately, e.g.:</p>\n\n<pre><code>(function (undefined) {\n    \u2026 your code \u2026\n    if (x.attribute !== undefined)\n        \u2026 mode code \u2026\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>I'm really confused by the answers that have been given - most of them are just outright incorrect. Of course you can have object properties that have undefined, null, or false values. So simply reducing the property check to <code>typeof this[property]</code> or, even worse, <code>x.key</code> will give you completely misleading results.</p>\n\n<p>It depends on what you're looking for. If you want to know if an object physically contains a property (and it is not coming from somewhere up on the prototype chain) then <code>object.hasOwnProperty</code> is the way to go. All modern browsers support it. (It was missing in older versions of Safari - 2.0.1 and older - but those versions of the browser are rarely used any more.)</p>\n\n<p>If what you're looking for is if an object has a property on it that is iterable (when you iterate over the properties of the object, it will appear) then doing: <code>prop in object</code> will give you your desired effect.</p>\n\n<p>Since using <code>hasOwnProperty</code> is probably what you want, and considering that you may want a fallback method, I present to you the following solution:</p>\n\n<pre><code>var obj = {\n    a: undefined,\n    b: null,\n    c: false\n};\n\n// a, b, c all found\nfor ( var prop in obj ) {\n    document.writeln( \"Object1: \" + prop );\n}\n\nfunction Class(){\n    this.a = undefined;\n    this.b = null;\n    this.c = false;\n}\n\nClass.prototype = {\n    a: undefined,\n    b: true,\n    c: true,\n    d: true,\n    e: true\n};\n\nvar obj2 = new Class();\n\n// a, b, c, d, e found\nfor ( var prop in obj2 ) {\n    document.writeln( \"Object2: \" + prop );\n}\n\nfunction hasOwnProperty(obj, prop) {\n    var proto = obj.__proto__ || obj.constructor.prototype;\n    return (prop in obj) &amp;&amp;\n        (!(prop in proto) || proto[prop] !== obj[prop]);\n}\n\nif ( Object.prototype.hasOwnProperty ) {\n    var hasOwnProperty = function(obj, prop) {\n        return obj.hasOwnProperty(prop);\n    }\n}\n\n// a, b, c found in modern browsers\n// b, c found in Safari 2.0.1 and older\nfor ( var prop in obj2 ) {\n    if ( hasOwnProperty(obj2, prop) ) {\n        document.writeln( \"Object2 w/ hasOwn: \" + prop );\n    }\n}\n</code></pre>\n\n<p>The above is a working, cross-browser, solution to <code>hasOwnProperty</code>, with one caveat: It is unable to distinguish between cases where an identical property is on the prototype and on the instance - it just assumes that it's coming from the prototype. You could shift it to be more lenient or strict, based upon your situation, but at the very least this should be more helpful.</p>\n",
                    "is_accepted": true,
                    "score": 668
                },
                {
                    "body": "<p>Let's cut through some confusion here. First, let's simplify by assuming hasOwnProperty already exists; this is true of the vast majority of current browsers in use.</p>\n\n<p>hasOwnProperty returns true if the attribute name that is passed to it has been added to the object. It is entirely independent of the actual value assigned to it which may be exactly  <code>undefined</code>.</p>\n\n<p>Hence:</p>\n\n<pre><code>var o = {}\no.x = undefined\n\nvar a = o.hasOwnProperty('x')  // a is true\nvar b = o.x === undefined // b is also true\n</code></pre>\n\n<p>However:</p>\n\n<pre><code>var o = {}\n\nvar a = o.hasOwnProperty('x')  // a is now false\nvar b = o.x === undefined // b is still true\n</code></pre>\n\n<p>The problem is what happens when an object in the prototype chain has an attribute with the value of undefined? <code>hasOwnProperty</code> will be false for it, and so will <code>!== undefined</code>. Yet, <code>for..in</code> will still list it in the enumeration.</p>\n\n<p>The bottom line is there is no cross-browser way (since Internet&nbsp;Explorer doesn't expose __prototype__) to determine that a specific identifier has not been attached to an object or anything in its prototype chain.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>With <a href=\"http://underscorejs.org/\"><code>Underscore.js</code></a> or (<a href=\"http://stackoverflow.com/q/13789618/19212\">even better</a>) <a href=\"http://lodash.com/\"><code>lodash</code></a>:</p>\n\n<pre><code>_.has(x, 'key');\n</code></pre>\n\n<p>Which calls <code>Object.prototype.hasOwnProperty</code>, but (a) is shorter to type, and (b) uses \"a safe reference to <code>hasOwnProperty</code>\" (i.e. it works even if <code>hasOwnProperty</code> is overwritten).</p>\n\n<p>In particular, lodash defines <code>_.has</code> as:</p>\n\n<pre><code>   function has(object, key) {\n      return object ? hasOwnProperty.call(object, key) : false;\n   }\n   // hasOwnProperty = Object.prototype.hasOwnProperty\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>What's about ?</p>\n\n<pre><code>var x = {'key': 1};\n\nif('key' in x){\n    console.log('has');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>If you are searching for a property, then \"NO\".  You want:</p>\n\n<pre><code>if ('prop' in obj) { }\n</code></pre>\n\n<p>In general you should not care whether or not the property comes from the prototype or the object.</p>\n\n<p>However, because you used 'key' in your sample code, it looks like you are treating the object as a hash, in which case your answer would make sense.  All of the hashes keys would be properties in the object, and you avoid the extra properties contributed by the prototype.</p>\n\n<p>John Resig's answer was very comprehensive, but I thought it wasn't clear.  Especially with when to use \"'prop' in obj\".</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You can use the <code>in</code> operator to check if the property exists on an object:</p>\n\n<pre><code>x = {'key': 1};\nalert(\"key\" in x);\n</code></pre>\n\n<p>You can also loop through all the properties of the object using a <code>for - in</code> loop, and then check for the specific property:</p>\n\n<pre><code>for (prop in x) {\n    if (prop == \"key\") {\n        //Do something\n    }\n}\n</code></pre>\n\n<p>You must consider if this object property is enumerable or not, because non-enumerable properties will not show up in a <code>for-in</code> loop. Also, if the enumerable property is shadowing a non-enumerable property of the prototype, it will not show up in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"nofollow\">Internet&nbsp;Explorer&nbsp;8</a> and earlier.</p>\n\n<p>If you\u2019d like a list of all instance properties, whether enumerable or not, you can use</p>\n\n<pre><code>Object.getOwnPropertyNames(x);\n</code></pre>\n\n<p>This will return an array of names of all properties that exist on an object.</p>\n\n<p>Finally, you can use the typeof operator to directly check the data type of the object property:</p>\n\n<pre><code>if (typeof x.key == \"undefined\") {\n    alert(\"undefined\");\n}\n</code></pre>\n\n<p>If the property does not exist on the object, it will return the string undefined. Else it will return the appropriate property type.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If the key you are checking is stored in a <em>variable</em>, you can check it like this:</p>\n\n<pre><code>x = {'key': 1};\ny = 'key';\nx[y];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do I check if an object has a property in JavaScript?</p>\n\n<p>Consider:</p>\n\n<pre><code>x = {'key': 1};\nif ( x.hasOwnProperty('key') ) {\n    //Do this\n}\n</code></pre>\n\n<p>Is that the best way to do that?</p>\n",
            "last_activity_date": 1419346766,
            "question_id": 135448,
            "score": 501,
            "tags": [
                "javascript"
            ],
            "title": "How do I check if an object has a property in JavaScript?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>The method given in the ECMAScript standard to find the class of Object is to use the <code>toString</code> method from <code>Object.prototype</code>.</p>\n\n<pre><code>if( Object.prototype.toString.call( someVar ) === '[object Array]' ) {\n    alert( 'Array!' );\n}\n</code></pre>\n\n<p>Or you could use <code>typeof</code> to test if it is a String:</p>\n\n<pre><code>if( typeof someVar === 'string' ) {\n    someVar = [ someVar ];\n}\n</code></pre>\n\n<p>Or if you're not concerned about performance, you could just do a <code>concat</code> to a new empty Array.</p>\n\n<pre><code>someVar = [].concat( someVar );\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong> Check out a <a href=\"http://blog.niftysnippets.org/2010/09/say-what.html\">thorough treatment</a> from <a href=\"http://stackoverflow.com/users/157247/t-j-crowder\">@T.J. Crowder's</a> blog, as posted in his comment below.</p>\n",
                    "is_accepted": true,
                    "score": 839
                },
                {
                    "body": "<p>I would first check if your implementation supports <code>isArray</code>:</p>\n\n<pre><code>if (Array.isArray)\n    return Array.isArray(v);\n</code></pre>\n\n<p>You could also try using the <code>instanceof</code> operator</p>\n\n<pre><code>v instanceof Array\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 342
                },
                {
                    "body": "<p>You can try this approach: <a href=\"http://web.archive.org/web/20100424091244/http://www.ajaxdr.com/code/javascript-version-of-phps-is_array-function/\">http://web.archive.org/web/20100424091244/http://www.ajaxdr.com/code/javascript-version-of-phps-is_array-function/</a></p>\n\n<p><strong>EDIT</strong>: also, if you are already using JQuery in your project, you can use its function <a href=\"http://api.jquery.com/jQuery.isArray/\">$.isArray()</a>.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If the only two kinds of values that could be passed to this function are a string or an array of strings, keep it simple and use a <code>typeof</code> check for the string possibility:</p>\n\n<pre><code>function someFunc(arg) {\n    var arr = (typeof arg == \"string\") ? [arg] : arg;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The best solution I've seen is a cross-browser replacement for typeof. Check Angus Croll's solution <a href=\"https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\" rel=\"nofollow\">here</a>.</p>\n\n<p>The TL;DR version is below, but the article is a great discussion of the issue so you should read it if you have time.</p>\n\n<pre><code>Object.toType = function(obj) {\n    return ({}).toString.call(obj).match(/\\s([a-z|A-Z]+)/)[1].toLowerCase();\n}\n// ... and usage:\nObject.toType([1,2,3]); //\"array\" (all browsers)\n\n// or to test...\nvar shouldBeAnArray = [1,2,3];\nif(Object.toType(shouldBeAnArray) === 'array'){/* do stuff */};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>jQuery also offers an isArray method:</p>\n\n<pre><code>var a = [\"A\", \"AA\", \"AAA\"];\n\nif($.isArray(a)) {\n    alert(\"a is an array!\");\n} else {\n    alert(\"a is not an array!\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 141
                },
                {
                    "body": "<p>I know, that people are looking for some kind of raw javascript approach.\nBut if you want think less about, take a look here: <a href=\"http://documentcloud.github.com/underscore/#isArray\" rel=\"nofollow\">http://documentcloud.github.com/underscore/#isArray</a></p>\n\n<pre><code>isArray_.isArray(object) \n</code></pre>\n\n<p>Returns true if object is an Array.</p>\n\n<pre><code>(function(){ return _.isArray(arguments); })();\n=&gt; false\n_.isArray([1,2,3]);\n=&gt; true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would make a function to test the type of object you are dealing with...</p>\n\n<pre><code>function whatAmI(me){ return Object.prototype.toString.call(me).split(/\\W/)[2]; }\n\n// tests\nconsole.log(\n    whatAmI([\"aiming\",\"@\"]),\n    whatAmI({living:4,breathing:4}),\n    whatAmI(function(ing){ return ing+\" to the global window\" }),\n    whatAmI(\"going to do with you?\")\n);\n\n// output: Array Object Function String\n</code></pre>\n\n<p>then you can write a simple if statement...</p>\n\n<pre><code>if(whatAmI(myVar) === \"Array\"){\n    // do array stuff\n} else { // could also check `if(whatAmI(myVar) === \"String\")` here to be sure\n    // do string stuff\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Simple function to check this:</p>\n\n<pre><code>function isArray(object)\n{\n    if (object.constructor === Array) return true;\n    else return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>As MDN says <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof#Normal_cases\">in here</a>:</p>\n\n<blockquote>\n  <p>use <strong>Array.isArray</strong> or <strong>Object.prototype.toString.call</strong> to differentiate\n  regular objects from arrays</p>\n</blockquote>\n\n<p>Like this:</p>\n\n<ul>\n<li><p><code>Object.prototype.toString.call(arr) === '[object Array]'</code>, or</p></li>\n<li><p><code>Array.isArray(arr)</code></p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://dojotoolkit.org/\">Dojo Toolkit</a> has deprecated its isArray() function and now recommends using simply:</p>\n\n<pre><code>val instanceof Array\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Array.isArray works fast, but it isn't supported by all versions of browsers.\nSo you could make an exception for others and use universal method:</p>\n\n<pre><code>    Utils = {};    \n    Utils.isArray = ('isArray' in Array) ? \n        Array.isArray : \n        function (value) {\n            return Object.prototype.toString.call(value) === '[object Array]';\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Here's my lazy approach:</p>\n\n<pre><code>if (Array.prototype.array_ === undefined) {\n  Array.prototype.array_ = true;\n}\n\n// ...\n\nvar test = [],\n    wat = {};\n\nconsole.log(test.array_ === true); // true\nconsole.log(wat.array_ === true);  // false\n</code></pre>\n\n<p>I know it's sacrilege to \"mess with\" the prototype, but <a href=\"http://jsperf.com/isarray-approaches\" rel=\"nofollow\">it appears to perform significantly better than the recommended <code>toString</code> method</a>.</p>\n\n<p><strong>Note:</strong> A pitfall of this approach is that it <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\" rel=\"nofollow\">wont work across <code>iframe</code> boundaries</a>, but for my use case this is not an issue.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can check the type of your variable whether it is an array with;</p>\n\n<pre><code>var myArray=[];\n\nif(myArray instanceof Array)\n{\n....\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Since I don't like any Object.prototype-calls, I searched for another solution. Especially because the solutions of ChaosPandion won't always work, and the solution of MidnightTortoise with <code>isArray()</code> doesn't work with arrays coming from the DOM (like <em>getElementsByTagName</em>). And finally I found an easy and cross-browser solution, which probably also would have worked with Netscape 4. ;)</p>\n\n<p>It's just these 4 lines (checking any object <code>h</code>):</p>\n\n<pre><code>function isArray(h){\n    if((h.length!=undefined&amp;&amp;h[0]!=undefined)||(h.length===0&amp;&amp;h[0]===undefined)){\n        return true;\n    }\n    else{ return false; }\n}\n</code></pre>\n\n<p>I already tested these arrays (all return true):</p>\n\n<pre><code>1) array=d.getElementsByName('some_element'); //'some_element' can be a real or unreal element\n2) array=[];\n3) array=[10];\n4) array=new Array();\n5) array=new Array();\n   array.push(\"whatever\");\n</code></pre>\n\n<p>Can anybody confirm that this works for all cases? Or does anybody find a case where my solution don't work?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray</a></p>\n\n<pre><code>Array.isArray = Array.isArray || function (vArg) {\n    return Object.prototype.toString.call(vArg) === \"[object Array]\";\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>A = [1,2,3]\nconsole.log(A.map==[].map)\n</code></pre>\n\n<p>In search for shortest version here is what I got so far.</p>\n\n<p>Note, there is no perfect function that will always detect all possible combinations. <strong>It is better to know all abilities and limitations of your tools than expect a magic tool.</strong></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>you can use jquery to check</p>\n\n<p><code>jQuery.isArray( obj );</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>function isArray(value) {\n    if (value) {\n        if (typeof value === 'object') {\n            return (Object.prototype.toString.call(value) == '[object Array]')\n        }\n    }\n    return false;\n}\n\nvar ar = [\"ff\",\"tt\"]\nalert(isArray(ar))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is a nice example in Stoyan Stefanov's book <a href=\"http://rads.stackoverflow.com/amzn/click/0596806752\" rel=\"nofollow\">JavaScript Patterns</a> which suppose to handle all possible problems as well as utilize ECMAScript 5 method <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" rel=\"nofollow\">Array.isArray()</a>.</p>\n\n<p>So here it is:</p>\n\n<pre><code>if (typeof Array.isArray === \"undefined\") {\n    Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === \"[object Array]\";\n    };\n}\n</code></pre>\n\n<p>By the way, if you are using jQuery, you can use it's method <a href=\"http://api.jquery.com/jQuery.isArray/\" rel=\"nofollow\">$.isArray()</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In modern browsers you can do</p>\n\n<pre><code>Array.isArray(obj)\n</code></pre>\n\n<p>(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">Supported by</a> Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5)</p>\n\n<p>For backward compatibility you can add the following</p>\n\n<pre><code># only implement if no native implementation is available\nif (typeof Array.isArray === 'undefined') {\n  Array.isArray = function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n};\n</code></pre>\n\n<p>If you use jQuery you can use <code>jQuery.isArray(obj)</code> or <code>$.isArray(obj)</code>. If you use underscore you can use <code>_.isArray(obj)</code></p>\n\n<p>If you don't need to detect arrays created in different frames you can also just use <code>instanceof</code></p>\n\n<pre><code>obj instanceof Array\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>A simple function for testing if an input value is an array is the following:</p>\n\n<pre><code>function isArray(value)\n{\n  return Object.prototype.toString.call(value) === '[object Array]';\n}\n</code></pre>\n\n<p>This works cross browser, and with older browsers. This is <a href=\"http://blog.niftysnippets.org/2010/09/say-what.html\" rel=\"nofollow\">pulled from T.J. Crowders' blog post</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm trying to write a function that either accepts a list of strings, or a single string. If it's a string, then I want to convert it to an array with just the one item. Then I can loop over it without fear of an error. </p>\n\n<p>So how do I check if the variable is an array?</p>\n",
            "last_activity_date": 1416518160,
            "question_id": 4775722,
            "score": 640,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Check if object is array?"
        },
        {
            "answer_count": 31,
            "answers": [
                {
                    "body": "<p>Try these functions to test whether a value is a number primitive value that has no fractional part and is within the size limits of what can be represented as an exact integer.</p>\n\n<pre><code>function isFloat(n) {\n    return n === +n &amp;&amp; n !== (n|0);\n}\n\nfunction isInteger(n) {\n    return n === +n &amp;&amp; n === (n|0);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 90
                },
                {
                    "body": "<p>As others mentioned, you only have doubles in JS. So how do you define a number being an integer? Just check if the rounded number is equal to itself:</p>\n\n<pre><code>function isInteger(f) {\n    return typeof(f)===\"number\" &amp;&amp; Math.round(f) == f;\n}\nfunction isFloat(f) { return typeof(f)===\"number\" &amp;&amp; !isInteger(f); }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It really depends on what you want to achieve. If you want to \"emulate\" strongly typed languages then I suggest you not trying. As others mentioned all numbers have the same representation (the same type).</p>\n\n<p>Using something like <em>Claudiu</em> provided:</p>\n\n<p><code>isInteger( 1.0 )</code> -> true</p>\n\n<p>which looks fine for common sense, but in something like C you would get <code>false</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>check for a remainder when dividing by 1:</p>\n\n<pre><code>function isInt(n) {\n   return n % 1 === 0;\n}\n</code></pre>\n\n<p>If you don't know that the argument is a number-</p>\n\n<pre><code>function isInt(n){\n        return Number(n)===n &amp;&amp; n%1===0;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 524
                },
                {
                    "body": "<p>Here are efficient functions that check if the value is a number or can be <em>safely converted to</em> a number:</p>\n\n<pre><code>function isNumber(value) {\n    if ((undefined === value) || (null === value)) {\n        return false;\n    }\n    if (typeof value == 'number') {\n        return true;\n    }\n    return !isNaN(value - 0);\n}\n</code></pre>\n\n<p>And for integers (would return false if the value is a float):</p>\n\n<pre><code>function isInteger(value) {\n    if ((undefined === value) || (null === value)) {\n        return false;\n    }\n    return value % 1 == 0;\n}\n</code></pre>\n\n<p>The efficiency here is that parseInt (or parseNumber) are avoided when the value already is a number. Both parsing functions <em>always</em> convert to string first and then attempt to parse that string, which would be a waste if the value already is a number.</p>\n\n<p>Thank you to the other posts here for providing further ideas for optimization!</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>THIS IS FINAL CODE FOR CHECK BOTH INT AND FLOAT</p>\n\n<pre><code>function isInt(n) { \n   if(typeof n == 'number' &amp;&amp; Math.Round(n) % 1 == 0) {\n       return true;\n   } else {\n       return false;\n   }\n} \n</code></pre>\n\n<p>OR </p>\n\n<pre><code>function isInt(n) {   \n   return typeof n == 'number' &amp;&amp; Math.Round(n) % 1 == 0;   \n}   \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For integers I use this</p>\n\n<pre><code>function integer_or_null(value) {\n    if ((undefined === value) || (null === value)) {\n        return null;\n    }\n    if(value % 1 != 0) {\n        return null;\n    }\n    return value;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function isInteger(n) {\n   return ((typeof n==='number')&amp;&amp;(n%1===0));\n}\n\nfunction isFloat(n) {\n   return ((typeof n==='number')&amp;&amp;(n%1!==0));\n}\n\nfunction isNumber(n) {\n   return (typeof n==='number');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Why not something like this:</p>\n\n<pre><code>var isInt = function(n) { return parseInt(n) === n };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<pre><code>parseInt(yourNumber)=== parseFloat(yourNumber)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Another method is:</p>\n\n<pre><code>    function isFloat(float) {\n        return /\\./.test(float.toString());\n    }\n</code></pre>\n\n<p>Might not be as efficient as the others but another method all the same.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use a simple regular expression:</p>\n\n<pre><code>function isInt(value) {\n\n    var er = /^-?[0-9]+$/;\n\n    return er.test(value);\n}\n</code></pre>\n\n<p>Or you can use the below functions too, according your needs. They are developed by the <a href=\"http://www.phpjs.org\" rel=\"nofollow\">PHPJS Project</a>.</p>\n\n<p><a href=\"http://phpjs.org/functions/is_int:444\" rel=\"nofollow\"><code>is_int()</code></a> => Check if the variable type is Integer and if its content is Integer</p>\n\n<p><a href=\"http://phpjs.org/functions/is_float:442\" rel=\"nofollow\"><code>is_float()</code></a> => Check if the variable type is Float and if its content is Float</p>\n\n<p><a href=\"http://phpjs.org/functions/is_float:442\" rel=\"nofollow\"><code>ctype_digit()</code></a> => Check if the variable type is String and if its content has only decimal digits</p>\n\n<p><strong>Update 1</strong></p>\n\n<p>Now it checks negative numbers too, thanks for <a href=\"http://stackoverflow.com/questions/3885817/how-to-check-if-a-number-is-float-or-integer/10303985?noredirect=1#comment35614627_10303985\">@ChrisBartley comment</a>!</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>It really doesn't have to be so complicated. The numeric value of an integer's parseFloat() and parseInt() equivalents will be the same. Thus you can do like so:</p>\n\n<pre><code>function isInt(value){ \n    return (parseFloat(value) == parseInt(value)) &amp;&amp; !isNaN(value);\n}\n</code></pre>\n\n<p>Then</p>\n\n<pre><code>if (isInt(x)) // do work\n</code></pre>\n\n<p>This will also allow for string checks and thus is not strict. If want a strong type solution (aka, wont work with strings):</p>\n\n<pre><code>function is_int(value){ return !isNaN(parseInt(value * 1) }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function isInt(n) \n{\n    return n != \"\" &amp;&amp; !isNaN(n) &amp;&amp; Math.round(n) == n;\n}\nfunction isFloat(n){\n    return n != \"\" &amp;&amp; !isNaN(n) &amp;&amp; Math.round(n) != n;\n}\n</code></pre>\n\n<p>works for all cases.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>In java script all the numbers are <code>internally 64 bit floating point</code>, same as double in java.\nThere are no diffrent types in javascript, all are represented by type <code>number</code>. Hence you wil l not be able make a <code>instanceof</code> check. However u can use the above solutions given to find out if it is a fractional number. designers of java script felt with a single type they can avoid numerous type cast errors.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Any Float number with a zero decimal part (e.g. 1.0, 12.00, 0.0) are implicitly cast to Integer, so it is not possible to check if they are Float or not.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's what I use for integers:</p>\n\n<pre><code>Math.ceil(parseFloat(val)) === val\n</code></pre>\n\n<p>Short, nice :) Works all the time. This is what David Flanagan suggests if I'm not mistaken.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>!!(24%1) // false\n!!(24.2%1) // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var isInt = function (n) { return n === (n | 0); };\n</code></pre>\n\n<p>Haven't had a case where this didn't do the job.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is a method called Number.isInteger() which is currently implemented only in latest Firefox and is still a part of EcmaScript 6 proposal. However <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Polyfill\">MDN</a> provides a polyfill for the other browsers, which matches the one specified in ECMA harmony:</p>\n\n<pre><code>if (!Number.isInteger) {\n  Number.isInteger = function isInteger (nVal) {\n    return typeof nVal === \"number\" &amp;&amp; isFinite(nVal) &amp;&amp; nVal &gt; -9007199254740992 &amp;&amp; nVal &lt; 9007199254740992 &amp;&amp; Math.floor(nVal) === nVal;\n  };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>It's simple as:</p>\n\n<pre><code>if( n === parseInt(n) ) ...\n</code></pre>\n\n<p>Try this in console:</p>\n\n<pre><code>x=1;\nx===parseInt(x); // true\nx=\"1\";\nx===parseInt(x); // false\nx=1.1;\nx===parseInt(x); // false, obviously\n\n// BUT!\n\nx=1.0;\nx===parseInt(x); // true, because 1.0 is NOT a float!\n</code></pre>\n\n<p>This confuses a lot of people.  Whenever something is .0, it's not a float anymore.  It's an integer.  Or you can just call it \"a numeric thing\" for there is no strict distinction like back then in C.  Good old times.</p>\n\n<p>So basically, all you can do is check for integer accepting the fact that 1.000 is an integer.</p>\n\n<p><strong>Interesting side note</strong></p>\n\n<p>There was a comment about huge numbers.  Huge numbers mean NO problem for this approach; whenever parseInt is unable to handle the number (for it's too big) it will return something else than the actual value so the test will return FALSE.  This is a good thing because if you consider something a \"number\" you normally expect JS to be able to calculate with it - so yes, numbers are limited and parseInt will <em>take this into consideration</em>, to put it this way.</p>\n\n<p>Try this:</p>\n\n<pre><code>&lt;script&gt;\n\nvar a = 99999999999999999999;\nvar b = 999999999999999999999; // just one more 9 will kill the show!\nvar aIsInteger = (a===parseInt(a))?\"a is ok\":\"a fails\";\nvar bIsInteger = (b===parseInt(b))?\"b is ok\":\"b fails\";\nalert(aIsInteger+\"; \"+bIsInteger);\n\n&lt;/script&gt;\n</code></pre>\n\n<p>In my browser (IE8) this returns \"a is ok; b fails\" which is exactly because of the huge number in b.  The limit may vary but I guess 20 digits \"ought to be enough for anybody\", to quote a classical :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function isInteger(x) { return Math.floor(x) === x; }\nfunction isFloat(x) { return !!(x % 1); }\n\n// give it a spin\n\nisFloat(1.2);          // true\nisInteger(1.2);        // false\nisFloat(1);            // false\nisInteger(1);          // true    \nisFloat(2e+2);         // false\nisInteger(2e+2);       // true\nisFloat('1');          // false\nisInteger('1');        // false\nisFloat(NaN);          // false\nisInteger(NaN);        // false\nisFloat(null);         // false\nisInteger(null);       // false\nisFloat(undefined);    // false\nisInteger(undefined);  // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Based on all that I have seen here, I've created my own set of functions to test for what I need:</p>\n\n<pre><code>function NumberValidator() {\nthis.isFloat = function (n) {\n    return typeof(n)===\"number\" &amp;&amp; n === +n &amp;&amp; Math.round(n) !== n;\n};\n\nthis.isInteger = function (n) {\n    return typeof(n)===\"number\" &amp;&amp; n === +n &amp;&amp; Math.round(n) === n;\n};\n\nthis.isFloatOrInteger = function (n) {\n    return this.isFloat(n) || this.isInteger(n);\n};\n\nthis.isNonZeroFloatOrInteger = function (n) {\n    return this.isFloatOrInteger(n) &amp;&amp; n &gt; 0;\n};\n\nthis.isNonZeroInteger = function (n) {\n    return this.isInteger(n) &amp;&amp; n &gt; 0;\n};\n}\n</code></pre>\n\n<p>However, <a href=\"http://stackoverflow.com/users/726020/shime\">shime</a>'s solution is shorter and with less checks, so it might be a better one.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This maybe isn't as performant as the % answer, which prevents you from having to convert to a string first, but I haven't seen anyone post it yet, so here's another option that should work fine:</p>\n\n<pre><code>function isInteger(num) {\n    return num.toString().indexOf('.') === -1;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For those curious, using Benchmark.js I tested the most up-voted answers (and the one posted today) on this post, here are my results:</p>\n\n<pre><code>var n = -10.4375892034758293405790;\nvar suite = new Benchmark.Suite;\nsuite\n    // kennebec\n    .add('0', function() {\n        return n % 1 == 0;\n    })\n    // kennebec\n    .add('1', function() {\n        return typeof n === 'number' &amp;&amp; n % 1 == 0;\n    })\n    // kennebec\n    .add('2', function() {\n        return typeof n === 'number' &amp;&amp; parseFloat(n) == parseInt(n, 10) &amp;&amp; !isNaN(n);\n    })\n\n    // Axle\n    .add('3', function() {\n        return n.toString().indexOf('.') === -1;\n    })\n\n    // Dagg Nabbit\n    .add('4', function() {\n        return n === +n &amp;&amp; n === (n|0);\n    })\n\n    // warfares\n    .add('5', function() {\n        return parseInt(n) === n;\n    })\n\n    // Marcio Simao\n    .add('6', function() {\n        return /^-?[0-9]+$/.test(n.toString());\n    })\n\n    // Tal Liron\n    .add('7', function() {\n        if ((undefined === n) || (null === n)) {\n            return false;\n        }\n        if (typeof n == 'number') {\n            return true;\n        }\n        return !isNaN(n - 0);\n    });\n\n// Define logs and Run\nsuite.on('cycle', function(event) {\n    console.log(String(event.target));\n}).on('complete', function() {\n    console.log('Fastest is ' + this.filter('fastest').pluck('name'));\n}).run({ 'async': true });\n</code></pre>\n\n<hr>\n\n<pre class=\"lang-none prettyprint-override\"><code>0 x 12,832,357 ops/sec \u00b10.65% (90 runs sampled)\n1 x 12,916,439 ops/sec \u00b10.62% (95 runs sampled)\n2 x 2,776,583 ops/sec \u00b10.93% (92 runs sampled)\n3 x 10,345,379 ops/sec \u00b10.49% (97 runs sampled)\n4 x 53,766,106 ops/sec \u00b10.66% (93 runs sampled)\n5 x 26,514,109 ops/sec \u00b12.72% (93 runs sampled)\n6 x 10,146,270 ops/sec \u00b12.54% (90 runs sampled)\n7 x 60,353,419 ops/sec \u00b10.35% (97 runs sampled)\n\nFastest is 7 Tal Liron\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is mine:</p>\n\n<pre><code>function isInt(quale) {\n    var valore = $('#'+quale).val().toLowerCase();\n    if (isNaN(Number(String(valore))) || (valore.indexOf(\"e\") &gt; 0)) {\n        // Not int\n    } else {\n        // Is Int!\n    }\n}\n</code></pre>\n\n<p>And this:</p>\n\n<pre><code>function isFloat(quale) {\n   var valore = $('#'+quale).val();\n   valore = valore.replace(\",\", \"\");\n   if (isNaN(String(valore)) || (valore.indexOf(\"e\") &gt; 0)) {\n    // Not Float\n   } else {\n    // Float\n   }\n}\n</code></pre>\n\n<p>Ad majora!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's my code.  It checks to make sure it's not an empty string (which will otherwise pass) and then converts it to numeric format.  Now, depending on whether you want '1.1' to be equal to 1.1, this may or may not be what you're looking for.  </p>\n\n<pre><code>var isFloat = function(n) {\n    n = n.length &gt; 0 ? Number(n) : false;\n    return (n === parseFloat(n));\n};\nvar isInteger = function(n) {\n    n = n.length &gt; 0 ? Number(n) : false;\n    return (n === parseInt(n));\n};\n\nvar isNumeric = function(n){\n\n   if(isInteger(n) || isFloat(n)){\n        return true;\n   }\n   return false;\n\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I like this little function, which will return true for both positive and negative integers:</p>\n\n<pre><code>function isInt(val) {\n    return [\"string\",\"number\"].indexOf(typeof(val)) &gt; -1 &amp;&amp; val !== '' &amp;&amp; !isNaN(val+\".0\");\n}\n</code></pre>\n\n<p>This works because 1 or \"1\" becomes \"1.0\", which isNaN() returns false on (which we then negate and return), but 1.0 or \"1.0\" becomes \"1.0.0\", while \"string\" becomes \"string.0\", neither of which are numbers, so isNaN() returns false (and, again, gets negated).</p>\n\n<p>If you only want positive integers, there's this variant:</p>\n\n<pre><code>function isPositiveInt(val) {\n    return [\"string\",\"number\"].indexOf(typeof(val)) &gt; -1 &amp;&amp; val !== '' &amp;&amp; !isNaN(\"0\"+val);\n}\n</code></pre>\n\n<p>or, for negative integers:</p>\n\n<pre><code>function isNegativeInt(val) {\n    return `[\"string\",\"number\"].indexOf(typeof(val)) &gt; -1` &amp;&amp; val !== '' &amp;&amp; isNaN(\"0\"+val);\n}\n</code></pre>\n\n<p>isPositiveInt() works by moving the concatenated numeric string ahead of the value to be tested. For example, isPositiveInt(1) results in isNaN() evaluating \"01\", which evaluates false. Meanwhile, isPositiveInt(-1) results in isNaN() evaluating \"0-1\", which evaluates true. We negate the return value and that gives us what we want. isNegativeInt() works similarly, but without negating the return value of isNaN().</p>\n\n<p>Edit:</p>\n\n<p>My original implementation would also return true on arrays and empty strings. This implementation doe not have that defect. It also has the benefit of returning early if val is not a string or number, or if it's an empty string, making it faster in these cases. You can further modify it by replacing the first two clauses with</p>\n\n<pre><code>typeof(val) != \"number\"\n</code></pre>\n\n<p>if you only want to match literal numbers (and not strings)</p>\n\n<p>Edit:</p>\n\n<p>I can't post comments yet, so I'm adding this to my answer. The benchmark posted by @Asok is very informative; however, the fastest function does not fit the requirements, as it also returns TRUE for floats, arrays, booleans, and empty strings.</p>\n\n<p>I created the following test suite to test each of the functions, adding my answer to the list, as well (function 8, which parses strings, and function 9, which does not):</p>\n\n<pre><code>funcs = [\n    function(n) {\n        return n % 1 == 0;\n    },\n    function(n) {\n        return typeof n === 'number' &amp;&amp; n % 1 == 0;\n    },\n    function(n) {\n        return typeof n === 'number' &amp;&amp; parseFloat(n) == parseInt(n, 10) &amp;&amp; !isNaN(n);\n    },\n    function(n) {\n        return n.toString().indexOf('.') === -1;\n    },\n    function(n) {\n        return n === +n &amp;&amp; n === (n|0);\n    },\n    function(n) {\n        return parseInt(n) === n;\n    },\n    function(n) {\n        return /^-?[0-9]+$/.test(n.toString());\n    },\n    function(n) {\n        if ((undefined === n) || (null === n)) {\n            return false;\n        }\n        if (typeof n == 'number') {\n            return true;\n        }\n        return !isNaN(n - 0);\n    },\n    function(n) {\n        return [\"string\",\"number\"].indexOf(typeof(n)) &gt; -1 &amp;&amp; n !== '' &amp;&amp; !isNaN(n+\".0\");\n    }\n];\nvals = [\n    [1,true],\n    [-1,true],\n    [1.1,false],\n    [-1.1,false],\n    [[],false],\n    [{},false],\n    [true,false],\n    [false,false],\n    [null,false],\n    [\"\",false],\n    [\"a\",false],\n    [\"1\",null],\n    [\"-1\",null],\n    [\"1.1\",null],\n    [\"-1.1\",null]\n];\n\nfor (var i in funcs) {\n    var pass = true;\n    console.log(\"Testing function \"+i);\n    for (var ii in vals) {\n        var n = vals[ii][0];\n        var ns;\n        if (n === null) {\n            ns = n+\"\";\n        } else {\n            switch (typeof(n)) {\n                case \"string\":\n                    ns = \"'\" + n + \"'\";\n                    break;\n                case \"object\":\n                    ns = Object.prototype.toString.call(n);\n                    break;\n                default:\n                    ns = n;\n            }\n            ns = \"(\"+typeof(n)+\") \"+ns;\n        }\n\n        var x = vals[ii][1];\n        var xs;\n        if (x === null) {\n            xs = \"(ANY)\";\n        } else {\n            switch (typeof(x)) {\n                case \"string\":\n                    xs = \"'\" + n + \"'\";\n                    break;\n                case \"object\":\n                    xs = Object.prototype.toString.call(x);\n                    break;\n                default:\n                    xs = x;\n            }\n            xs = \"(\"+typeof(x)+\") \"+xs;\n        }\n\n        var rms;\n        try {\n            var r = funcs[i](n);\n            var rs;\n            if (r === null) {\n                rs = r+\"\";\n            } else {\n                switch (typeof(r)) {\n                    case \"string\":\n                        rs = \"'\" + r + \"'\";\n                        break;\n                    case \"object\":\n                        rs = Object.prototype.toString.call(r);\n                        break;\n                    default:\n                        rs = r;\n                }\n                rs = \"(\"+typeof(r)+\") \"+rs;\n            }\n\n            var m;\n            var ms;\n            if (x === null) {\n                m = true;\n                ms = \"N/A\";\n            } else if (typeof(x) == 'object') {\n                m = (xs === rs);\n                ms = m;\n            } else {\n                m = (x === r);\n                ms = m;\n            }\n            if (!m) {\n                pass = false;\n            }\n            rms = \"Result: \"+rs+\", Match: \"+ms;\n        } catch (e) {\n            rms = \"Test skipped; function threw exception!\"\n        }\n\n        console.log(\"    Value: \"+ns+\", Expect: \"+xs+\", \"+rms);\n    }\n    console.log(pass ? \"PASS!\" : \"FAIL!\");\n}\n</code></pre>\n\n<p>I also reran the benchmark with function #8 added to the list. I won't post the result, as they're a bit embarrassing (e.g. that function is NOT fast)...</p>\n\n<p>The (abridged -- I removed successful tests, since the output is quite long) results are as follows:</p>\n\n<pre><code>Testing function 0\nValue: (object) [object Array], Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (boolean) true, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (boolean) false, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: null, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (string) '', Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (string) '1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nFAIL!\n\nTesting function 1\nValue: (string) '1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n\nTesting function 2\nValue: (string) '1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n\nTesting function 3\nValue: (object) true, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (object) false, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (boolean) [object Array], Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (boolean) [object Object], Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: null, Expect: (boolean) false, Test skipped; function threw exception!\nValue: (string) '', Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (string) 'a', Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (string) '1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nFAIL!\n\nTesting function 4\nValue: (string) '1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n\nTesting function 5\nValue: (string) '1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n\nTesting function 6\nValue: null, Expect: (boolean) false, Test skipped; function threw exception!\nValue: (string) '1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n\nTesting function 7\nValue: (number) 1.1, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (number) -1.1, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (object) true, Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (boolean) [object Array], Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (boolean) [object Object], Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (string) '', Expect: (boolean) false, Result: (boolean) true, Match: false\nValue: (string) '1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) true, Match: N/A\nFAIL!\n\nTesting function 8\nValue: (string) '1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) true, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n\nTesting function 9\nValue: (string) '1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nValue: (string) '-1.1', Expect: (ANY), Result: (boolean) false, Match: N/A\nPASS!\n</code></pre>\n\n<p>I've left in failures so you can see where each function is failing, and the (string) '#' tests so you can see how each function handles integer and float values in strings, as some may want these parsed as numbers and some may not.</p>\n\n<p>Out of the 10 functions tested, the ones that actually fit OP's requirements are [1,3,5,6,8,9]</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Condtion for floating validation :</strong></p>\n\n<pre><code>if (lnk.value == +lnk.value &amp;&amp; lnk.value != (lnk.value | 0)) \n</code></pre>\n\n<p><strong>Condtion for Integer validation :</strong></p>\n\n<pre><code>if (lnk.value == +lnk.value &amp;&amp; lnk.value == (lnk.value | 0)) \n</code></pre>\n\n<p>Hope this might be helpful.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The functions below guard against empty strings,undefines,nulls, and max/min value ranges. The Javascript engine should have built in these functions from day one. :)</p>\n\n<p>Enjoy!</p>\n\n<pre><code>function IsInteger(iVal) {\n    var iParsedVal; //our internal converted int value\n\n\n    iParsedVal = parseInt(iVal,10);\n\n    if (isNaN(iParsedVal) || Infinity == iParsedVal || -Infinity == iParsedVal) //sanity check - guard against empty strings and max/min values\n        return false;\n    else\n        return Number(iVal) === (iParsedVal | 0); //the 2nd operand group (intValue | 0), evaluates to true only if the intValue is an integer; so an int type will only return true\n}\n\nfunction IsFloat(fVal) {\n    var fParsedVal; //our internal converted float value\n\n\n    fParsedVal = parseFloat(fVal);\n\n    if (isNaN(fParsedVal) || Infinity == fParsedVal || -Infinity == fParsedVal) //sanity check - guard against empty strings and max/min values\n        return false;\n    else\n        return !!(fVal % 1); //true only if there is a fractional value after the mod op; the !! returns the opposite value of the op which reflects the function's return value\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function int(a) {\n  return a - a === 0 &amp;&amp; a.toString(32).indexOf('.') === -1\n}\n\nfunction float(a) {\n  return a - a === 0 &amp;&amp; a.toString(32).indexOf('.') !== -1\n}\n</code></pre>\n\n<p>You can add <code>typeof a === 'number'</code> if you want to exclude strings.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>how to find if a number is float or integer?  </p>\n\n<pre><code>1.25 --&gt; float  \n1 --&gt; integer  \n0 --&gt; integer  \n0.25 --&gt; float\n</code></pre>\n",
            "last_activity_date": 1424739726,
            "question_id": 3885817,
            "score": 287,
            "tags": [
                "javascript",
                "types"
            ],
            "title": "How to check if a number is float or integer?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Simple:</p>\n\n<pre><code>if(window.location.hash) {\n  // Fragment exists\n} else {\n  // Fragment doesn't exist\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 666
                },
                {
                    "body": "<p>Have you tried this?</p>\n\n<pre><code>if (url.indexOf(\"#\") != -1)\n{\n}\n</code></pre>\n\n<p>(Where <code>url</code> is the URL you want to check, obviously.)</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Put the following:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    if (location.href.indexOf(\"#\") != -1) {\n        // Your code in here accessing the string like this\n        // location.href.substr(location.href.indexOf(\"#\"))\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Here's what you can do to periodically check for a change of hash, and then call a function to process the hash value.</p>\n\n<pre><code>var hash = false; \ncheckHash();\n\nfunction checkHash(){ \n    if(window.location.hash != hash) { \n        hash = window.location.hash; \n        processHash(hash); \n    } t=setTimeout(\"checkHash()\",400); \n}\n\nfunction processHash(hash){\n    alert(hash);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n  if(window.location.hash) {\n      var hash = window.location.hash.substring(1); //Puts hash in variable, and removes the # character\n      alert (hash);\n      // hash found\n  } else {\n      // No hash found\n  }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 122
                },
                {
                    "body": "<pre><code>$('#myanchor').click(function(){\n    window.location.hash = \"myanchor\"; //set hash\n    return false; //disables browser anchor jump behavior\n});\n$(window).bind('hashchange', function () { //detect hash change\n    var hash = window.location.hash.slice(1); //hash to string (= \"myanchor\")\n    //do sth here, hell yeah!\n});\n</code></pre>\n\n<p>This will solve the problem ;)</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Partridge and Gareths comments above are great. They deserve a separate answer. \nApparently, hash and search properties are available on any html Link object:</p>\n\n<pre><code>&lt;a id=\"test\" href=\"foo.html?bar#quz\"&gt;test&lt;/a&gt;\n&lt;script type=\"text/javascript\"&gt;\n   alert(document.getElementById('test').search); //bar\n   alert(document.getElementById('test').hash); //quz\n&lt;/script&gt;\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>&lt;a href=\"bar.html?foo\" onclick=\"alert(this.search)\"&gt;SAY FOO&lt;/a&gt;\n</code></pre>\n\n<p>Should you need this on a regular string variable and happen to have jQuery around,\nthis should work:</p>\n\n<pre><code>var mylink = \"foo.html?bar#quz\";\n\nif ($('&lt;a href=\"'+mylink+'\"&gt;').get(0).search=='bar')) {\n    // do stuff\n}\n</code></pre>\n\n<p>(but its maybe a bit overdone .. )</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If the URI is not the document's location this snippet will do what you want.</p>\n\n<pre><code>var url = 'example.com/page.html#anchor',\n    hash = url.split('#')[1];\n\nif (hash) {\n    alert(hash)\n} else {\n    // do something else\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>...or there's a jquery selector:</p>\n\n<pre><code>$('a[href^=\"#\"]')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Usually clicks go first than location changes,\nso after a click is a good idea to setTimeOut\nto get updated window.location.hash</p>\n\n<pre><code>$(\".nav\").click(function(){\n    setTimeout(function(){\n        updatedHash = location.hash\n    },100);\n});\n</code></pre>\n\n<p>or you can listen location with:</p>\n\n<pre><code>window.onhashchange = function(evt){\n   updatedHash = \"#\" + evt.newURL.split(\"#\")[1]\n};\n</code></pre>\n\n<p>I wrote a <a href=\"https://github.com/rgarro/Route32\" rel=\"nofollow\">jQuery plugin</a> that does something like\nwhat you want to do.</p>\n\n<p>It's a simple anchor router.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>window.location.hash \n</code></pre>\n\n<p>will return the hash identifier</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>function getHash() {\n  if (window.location.hash) {\n    var hash = window.location.hash.substring(1);\n\n    if (hash.length === 0) { \n      return false;\n    } else { \n      return hash; \n    }\n  } else { \n    return false; \n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var requestedHash = ((window.location.hash.substring(1).split(\"#\",1))+\"?\").split(\"?\",1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Most people are aware of the URL properties in document.location. That's great if you're only interested in the current page. But the question was about being able to parse anchors on a page not the page itself.</p>\n\n<p>What most people seem to miss is that those same URL properties are also available to anchor elements:</p>\n\n<pre><code>// To process anchors on click    \njQuery('a').click(function () {\n   if (this.hash) {\n      // Clicked anchor has a hash\n   } else {\n      // Clicked anchor does not have a hash\n   }\n});\n\n// To process anchors without waiting for an event\njQuery('a').each(function () {\n   if (this.hash) {\n      // Current anchor has a hash\n   } else {\n      // Current anchor does not have a hash\n   }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Throwing this in here as a method for abstracting location properties from arbitrary URI-like strings. Although <code>window.location instanceof Location</code> is true, any attempt to invoke <code>Location</code> will tell you that it's an illegal constructor. You can still get to things like <code>hash</code>, <code>query</code>, <code>protocol</code> etc by setting your string as the <code>href</code> property of a DOM anchor element, which will then share all the address properties with <code>window.location</code>.</p>\n\n<p>Simplest way of doing this is:</p>\n\n<pre><code>var a = document.createElement('a');\na.href = string;\n\nstring.hash;\n</code></pre>\n\n<p>For convenience, I wrote a little library that utilises this to replace the native <code>Location</code> constructor with one that will take strings and produce <code>window.location</code>-like objects: <a href=\"https://gist.github.com/barneycarroll/5310151\" rel=\"nofollow\">Location.js</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>sometimes you get the full query string such as \"#anchorlink?firstname=mark\"</p>\n\n<p>this is my script to get the hash value:</p>\n\n<pre><code>var hashId = window.location.hash;\nhashId = hashId.match(/#[^?&\\/]*/g);\n\nreturns -> #anchorlink\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have some jQuery JavaScript code that I want to run only when there is a hash (#) anchor link in a URL. How can you check for this character using JavaScript? I need a simple catch-all test that would detect URLs like these:</p>\n\n<ul>\n<li>example.com/page.html#anchor</li>\n<li>example.com/page.html#anotheranchor</li>\n</ul>\n\n<p>Basically something along the lines of:</p>\n\n<pre><code>if (thereIsAHashInTheUrl) {        \n    do this;\n} else {\n    do this;\n}\n</code></pre>\n\n<p>If anyone could point me in the right direction, that would be much appreciated.</p>\n",
            "last_activity_date": 1414399524,
            "question_id": 298503,
            "score": 362,
            "tags": [
                "javascript",
                "jquery",
                "anchor",
                "fragment-identifier"
            ],
            "title": "How can you check for a #hash in a URL using JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>In global scope there is no semantic difference.</p>\n\n<p>But you really should avoid <code>a=0</code> since your setting a value to an undeclared variable.</p>\n\n<p>Also use closures to avoid editing global scope at all</p>\n\n<pre><code>(function() {\n   // do stuff locally\n\n   // Hoist something to global scope\n   window.someGlobal = someLocal\n}());\n</code></pre>\n\n<p>Always use closures and always hoist to global scope when its absolutely neccesary. You should be using asynchronous event handling for most of your communication anyway.</p>\n\n<p>As @AvianMoncellor mentioned there is an IE bug with <code>var a = foo</code> only declaring a global for file scope. This is an issue with IE's notorious broken interpreter. This bug does sound familiar so it's probably true.</p>\n\n<p>So stick to <code>window.globalName = someLocalpointer</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Yes, there are two differences, though in practical terms they're not usually big ones.</p>\n\n<h3>Your three statements explained</h3>\n\n<pre><code>var a=0;\n</code></pre>\n\n<p>...creates a variable on the <em>variable object</em> for the global execution context, which is the global object, which on browsers is aliased as <code>window</code> (and is a DOM window object rather than just a generic object as it would be on non-browser implementations). The symbol <code>window</code> is, itself, actually a property of the global (window) object that it uses to point to itself.</p>\n\n<p>The upshot of all that is: It creates a property on <code>window</code> that you cannot delete. It's also defined before the first line of code runs (see \"When <code>var</code> happens\" below).</p>\n\n<p>Note that on IE8 and earlier, the property created on <code>window</code> is not <em>enumerable</em> (doesn't show up in <code>for..in</code> statements). In IE9, Chrome, Firefox, and Opera, it's enumerable.</p>\n\n<hr>\n\n<pre><code>a=0;\n</code></pre>\n\n<p>...creates a property on the <code>window</code> object <em>implicitly</em>. As it's a normal property, you can delete it. I'd recommend <em>not</em> doing this, it can be unclear to anyone reading your code later.</p>\n\n<p>And interestingly, again on IE8 and earlier, the property created not <em>enumerable</em> (doesn't show up in <code>for..in</code> statements). That's odd, particularly given the below.</p>\n\n<hr>\n\n<pre><code>window.a=0;\n</code></pre>\n\n<p>...creates a property on the <code>window</code> object explicitly. As it's a normal property, you can delete it.</p>\n\n<p>This property <strong>is</strong> enumerable, on IE8 and earlier, and on every other browser I've tried.</p>\n\n<h3>A fourth way</h3>\n\n<p>There's yet another way to do this, btw:</p>\n\n<pre><code>this.a=0;\n</code></pre>\n\n<p>...because in the global execution context, <code>this</code> references the global object. So <code>this.a=0;</code> is identical to <code>window.a=0;</code> (except it may be a teensy, teensy bit faster because <code>this</code> doesn't have to be looked up; probably impossible to measure in any real world scenario).</p>\n\n<p>Since this is the same as <code>window.a=0;</code>, it's no surprise that this creates an enumerable property (even on IE8 and below).</p>\n\n<hr>\n\n<h3>Deleting properties</h3>\n\n<p>What do I mean by \"deleting\" it? Exactly that: Removing the property (entirely) via the <code>delete</code> keyword:</p>\n\n<pre><code>window.a = 0;\ndisplay(\"'a' in window? \" + ('a' in window)); // displays \"true\"\ndelete window.a;\ndisplay(\"'a' in window? \" + ('a' in window)); // displays \"false\"\n</code></pre>\n\n<p><code>delete</code> completely removes a property from an object. You can't do that with properties added to <code>window</code> indirectly via <code>var</code>, the <code>delete</code> is either silently ignored or throws an exception (depending on the JavaScript implementation and whether you're in strict mode).</p>\n\n<p><strong>Warning</strong>: Internet Explorer won't let you delete properties of the <code>window</code> object, even when you should be allowed to. Worse, it throws an <em>exception</em> when you try (<a href=\"http://jsbin.com/enayud\">try this experiment</a> in IE and in other browsers). So when deleting from the <code>window</code> object, you have to be defensive:</p>\n\n<pre><code>try {\n    delete window.prop;\n}\ncatch (e) {\n    window.prop = undefined;\n}\n</code></pre>\n\n<p>That tries to delete the property, and if an exception is thrown it does the next best thing and sets the property to <code>undefined</code>.</p>\n\n<p>This <strong>only</strong> applies to the <code>window</code> object, and only (as far as I know) to IE. Other browsers are fine with deleting <code>window</code> properties, subject to the rules above.</p>\n\n<hr>\n\n<h3>When <code>var</code> happens</h3>\n\n<p>There's another difference between the <code>var</code> version and the others. It relates to when the symbol is created. The symbols defined via the <code>var</code> statement are created before <em>any</em> step-by-step code in the execution context is run, and so the property exists well <em>before</em> the <code>var</code> statement.</p>\n\n<p>This can be confusing, so let's take a look:</p>\n\n<pre><code>display(\"foo in window? \" + ('foo' in window)); // displays \"true\"\ndisplay(\"window.foo = \" + window.foo);          // displays \"undefined\"\ndisplay(\"bar in window? \" + ('bar' in window)); // displays \"false\"\ndisplay(\"window.bar = \" + window.bar);          // displays \"undefined\"\nvar foo = \"f\";\nbar = \"b\";\ndisplay(\"foo in window? \" + ('foo' in window)); // displays \"true\"\ndisplay(\"window.foo = \" + window.foo);          // displays \"f\"\ndisplay(\"bar in window? \" + ('bar' in window)); // displays \"true\"\ndisplay(\"window.bar = \" + window.bar);          // displays \"b\"\n</code></pre>\n\n<p><a href=\"http://jsbin.com/awuqa4\">Live example</a></p>\n\n<p>As you can see, the symbol <code>foo</code> is defined before the first line, but the symbol <code>bar</code> isn't. Where the <code>var foo = \"f\";</code> statement is, there are really two things: defining the symbol, which happens before the first line of code is run; and doing an assignment to that symbol, which happens where the line is in the step-by-step flow. (See <a href=\"http://blog.niftysnippets.org/2008/03/poor-misunderstood-var.html\"><em>Poor misunderstood <code>var</code></em></a>)</p>\n\n<hr>\n\n<h3>Off-topic: Avoid cluttering <code>window</code></h3>\n\n<p>The <code>window</code> object gets very, very cluttered with properties. Whenever possible, strongly recommend not adding to the mess. Instead, wrap up your symbols in a little package and export at <em>most</em> one symbol to the <code>window</code> object. (I frequently don't export <em>any</em> symbols to the <code>window</code> object.) You can use a function to contain all of your code in order to contain your symbols, and that function can be anonymous if you like:</p>\n\n<pre><code>(function() {\n    var a = 0; // `a` is NOT a property of `window` now\n\n    function foo() {\n        alert(a);   // Alerts \"0\", because `foo` can access `a`\n    }\n})();\n</code></pre>\n\n<p>In that example, we define a function and have it executed right away (the <code>()</code> at the end).</p>\n\n<p>A function used in this way is frequently called a <em>scoping function</em>. Functions defined within the scoping function can access variables defined in the scoping function because they're <em>closures</em> over that data (see: <a href=\"http://blog.niftysnippets.org/2008/02/closures-are-not-complicated.html\"><em>Closures are not complicated</em></a>).</p>\n",
                    "is_accepted": true,
                    "score": 258
                },
                {
                    "body": "<p>Keeping it simple :</p>\n\n<pre><code>a = 0\n</code></pre>\n\n<p>The code above gives a global scope variable</p>\n\n<pre><code>var a = 0;\n</code></pre>\n\n<p>This code will give a variable to be used in the current scope, and under it</p>\n\n<pre><code>window.a = 0;\n</code></pre>\n\n<p>This generally is same as the global variable.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>&lt;title&gt;Index.html&lt;/title&gt;\n&lt;script&gt;\n    var varDeclaration = true;\n    noVarDeclaration = true;\n    window.hungOnWindow = true;\n    document.hungOnDocument = true;\n&lt;/script&gt;\n&lt;script src=\"external.js\"&gt;&lt;/script&gt;\n\n\n\n/*\n**\n***\n****\n*****\n******\n*******\n********\n    external.js\n********\n*******\n******\n*****\n****\n***\n**\n*/\n\nconsole.info(varDeclaration == true); // could be .log, alert etc\n// returns false in IE8\n\nconsole.info(noVarDeclaration == true); // could be .log, alert etc\n// returns false in IE8\n\nconsole.info(window.hungOnWindow == true); // could be .log, alert etc\n// returns true in IE8\n\nconsole.info(document.hungOnDocument == true); // could be .log, alert etc\n// returns ??? in IE8 (untested!)  *I personally find this more clugy than hanging off window obj\n</code></pre>\n\n<p>Is there a global object that all vars are hung off of by default? eg: 'globals.noVar declaration'</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>is there any difference between declaring a variable</p>\n\n<pre><code>var a=0;//1\n</code></pre>\n\n<p>and this way</p>\n\n<pre><code>a=0;//2\n</code></pre>\n\n<p>or</p>\n\n<pre><code>window.a=0;//3\n</code></pre>\n\n<p>in global scope?</p>\n",
            "last_activity_date": 1391081421,
            "question_id": 4862193,
            "score": 109,
            "tags": [
                "javascript"
            ],
            "title": "Javascript global variables"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Look at <code>navigator.userAgent</code> - <code>Firefox/xxx.xxx.xxx</code> is specified right at the end.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>jQuery can handle this quite nice (<a href=\"http://api.jquery.com/jQuery.browser\" rel=\"nofollow\">jQuery.browser</a>)</p>\n\n<pre><code>var ua = $.browser;\nif ( ua.mozilla &amp;&amp; ua.version.slice(0,3) == \"1.9\" ) {\n    alert( \"Do stuff for firefox 3\" );\n}\n</code></pre>\n\n<p>EDIT: As Joshua wrote in his comment below, <a href=\"http://api.jquery.com/jQuery.browser\" rel=\"nofollow\">jQuery.browser</a> property is no longer supported in jQuery since version 1.9 (read <a href=\"http://blog.jquery.com/2013/01/15/jquery-1-9-final-jquery-2-0-beta-migrate-final-released/\" rel=\"nofollow\">jQuery 1.9 release notes</a> for more details).\njQuery development team <a href=\"http://jquery.com/upgrade-guide/1.9/#jquery-browser-removed\" rel=\"nofollow\">recommends</a> using more complete approach like adapting UI with <a href=\"http://modernizr.com/\" rel=\"nofollow\">Modernizr</a> library.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar version = navigator.appVersion;\nalert(version);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In pure Javascript you can do a RegExp match on the <code>navigator.userAgent</code> to find the Firefox version:</p>\n\n<pre><code>var uMatch = navigator.userAgent.match(/Firefox\\/(.*)$/),\n    ffVersion;\nif (uMatch &amp;&amp; uMatch.length &gt; 1) {\n    ffVersion = uMatch[1];\n}\n</code></pre>\n\n<p><code>ffVersion</code> will be <code>undefined</code> if not a Firefox browser.</p>\n\n<p><a href=\"http://jsfiddle.net/EbXMa/\" rel=\"nofollow\"><strong>See working example &#x2192;</strong></a> </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Use this: <a href=\"http://www.quirksmode.org/js/detect.html\">http://www.quirksmode.org/js/detect.html</a></p>\n\n<pre><code>alert(BrowserDetect.browser); // will say \"Firefox\"\nalert(BrowserDetect.version); // will say \"3\" or \"4\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>var ua = navigator.userAgent;\n\nif (/Firefox\\//.test(ua))\n   var Firefox = /Firefox\\/([0-9\\.A-z]+)/.exec(ua)[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can see what the browser <strong>says</strong>, and use that information for logging or testing multiple browsers.</p>\n\n<pre><code>navigator.sayswho= (function(){\n    var ua= navigator.userAgent, tem, \n    M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    if(/trident/i.test(M[1])){\n        tem=  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n        return 'IE '+(tem[1] || '');\n    }\n    if(M[1]=== 'Chrome'){\n        tem= ua.match(/\\bOPR\\/(\\d+)/)\n        if(tem!= null) return 'Opera '+tem[1];\n    }\n    M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n    if((tem= ua.match(/version\\/(\\d+)/i))!= null) M.splice(1, 1, tem[1]);\n    return M.join(' ');\n})();\n</code></pre>\n\n<p><code>navigator.sayswho</code> is an enumerable property (eg, 'Firefox 31').</p>\n",
                    "is_accepted": true,
                    "score": 213
                },
                {
                    "body": "<p>I have made a script in ASP code to detect browser, browser version, OS and OS version.\nThe reason for me to do this in ASP was because i want to store the data in a log-database.\nSo I had to detect the browser serverside.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>on error resume next\nua = lcase(Request.ServerVariables(\"HTTP_USER_AGENT\"))\nmoz = instr(ua,\"mozilla\")  \nffx = instr(ua,\"firefox\")  \nsaf = instr(ua,\"safari\")\ncrm = instr(ua,\"chrome\") \nmax = instr(ua,\"maxthon\") \nopr = instr(ua,\"opera\")\nie4 = instr(ua,\"msie 4\") \nie5 = instr(ua,\"msie 5\") \nie6 = instr(ua,\"msie 6\") \nie7 = instr(ua,\"msie 7\") \nie8 = instr(ua,\"trident/4.0\")\nie9 = instr(ua,\"trident/5.0\")\n\nif moz&gt;0 then \n    BrowserType = \"Mozilla\"\n    BrVer = mid(ua,moz+8,(instr(moz,ua,\" \")-(moz+8)))\nend if\nif ffx&gt;0 then \n    BrowserType = \"FireFox\"\n    BrVer = mid(ua,ffx+8)\nend if\nif saf&gt;0 then \n    BrowserType = \"Safari\"\n    BrVerPlass = instr(ua,\"version\")\n    BrVer = mid(ua,BrVerPlass+8,(instr(BrVerPlass,ua,\" \")-(BrVerPlass+8)))\nend if\nif crm&gt;0 then \n    BrowserType = \"Chrome\"\n    BrVer = mid(ua,crm+7,(instr(crm,ua,\" \")-(crm+7)))\nend if\nif max&gt;0 then \n    BrowserType = \"Maxthon\"\n    BrVer = mid(ua,max+8,(instr(max,ua,\" \")-(max+8)))\nend if\nif opr&gt;0 then \n    BrowserType = \"Opera\"\n    BrVerPlass = instr(ua,\"presto\")\n    BrVer = mid(ua,BrVerPlass+7,(instr(BrVerPlass,ua,\" \")-(BrVerPlass+7)))\nend if\nif ie4&gt;0 then \n    BrowserType = \"Internet Explorer\"\n    BrVer = \"4\"\nend if\nif ie5&gt;0 then \n    BrowserType = \"Internet Explorer\"\n    BrVer = \"5\"\nend if\nif ie6&gt;0 then \n    BrowserType = \"Internet Explorer\"\n    BrVer = \"6\"\nend if\nif ie7&gt;0 then \n    BrowserType = \"Internet Explorer\"\n    BrVer = \"7\"\nend if\nif ie8&gt;0 then \n    BrowserType = \"Internet Explorer\"\n    BrVer = \"8\"\n    if ie7&gt;0 then BrVer = BrVer &amp; \" (in IE7 compability mode)\"\nend if\nif ie9&gt;0 then \n    BrowserType = \"Internet Explorer\"\n    BrVer = \"9\"\n    if ie7&gt;0 then BrVer = BrVer &amp; \" (in IE7 compability mode)\"\n    if ie8&gt;0 then BrVer = BrVer &amp; \" (in IE8 compability mode)\"\nend if\n\nOSSel = mid(ua,instr(ua,\"(\")+1,(instr(ua,\";\")-instr(ua,\"(\"))-1)\nOSver = mid(ua,instr(ua,\";\")+1,(instr(ua,\")\")-instr(ua,\";\"))-1)\n\nif BrowserType = \"Internet Explorer\" then\n    OSStart = instr(ua,\";\")\n    OSStart = instr(OSStart+1,ua,\";\")        \n    OSStopp = instr(OSStart+1,ua,\";\")\n    OSsel = mid(ua,OSStart+2,(OSStopp-OSStart)-2)\nend if\n\n    Select case OSsel\n        case \"windows nt 6.1\"\n            OS = \"Windows\"\n            OSver = \"7\"\n        case \"windows nt 6.0\"\n            OS = \"Windows\"\n            OSver = \"Vista\"\n        case \"windows nt 5.2\"\n            OS = \"Windows\"\n            OSver = \"Srv 2003 / XP x64\"\n        case \"windows nt 5.1\"\n            OS = \"Windows\"\n            OSver = \"XP\"\n        case else\n            OS = OSSel\n    End select\n\nResponse.write \"&lt;br&gt;\" &amp; ua &amp; \"&lt;br&gt;\" &amp; BrowserType &amp; \"&lt;br&gt;\" &amp; BrVer &amp; \"&lt;br&gt;\" &amp; OS &amp; \"&lt;br&gt;\" &amp; OSver &amp; \"&lt;br&gt;\"\n\n'Use the variables here for whatever you need........\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I was looking for a solution for myself, since <em>jQuery 1.9.1</em> and above have removed the <code>$.browser</code> functionality. I came up with this little function that works for me.\nIt does need a global variable (I've called mine _browser) in order to check which browser it is. I've written a <em>jsfiddle</em> to illustrate how it can be used, of course it can be expanded for other browsers by just adding a test for _browser.foo, where foo is the name of the browser. I did just the popular ones.</p>\n\n<p><a href=\"http://jsfiddle.net/VhaqM/112/\" rel=\"nofollow\">detectBrowser()</a></p>\n\n<pre><code>_browser = {};\n\nfunction detectBrowser() {\n  var uagent = navigator.userAgent.toLowerCase(),\n      match = '';\n\n  _browser.chrome  = /webkit/.test(uagent)  &amp;&amp; /chrome/.test(uagent);\n  _browser.firefox = /mozilla/.test(uagent) &amp;&amp; /firefox/.test(uagent);\n  _browser.msie    = /msie/.test(uagent)    || /trident/.test(uagent);\n  _browser.safari  = /safari/.test(uagent)  &amp;&amp; /applewebkit/.test(uagent) &amp;&amp; !/chrome/.test(uagent);\n  _browser.opr     = /mozilla/.test(uagent) &amp;&amp; /applewebkit/.test(uagent) &amp;&amp;  /chrome/.test(uagent) &amp;&amp; /safari/.test(uagent) &amp;&amp; /opr/.test(uagent);\n  _browser.version = '';\n\n  for (x in _browser) {\n    if (_browser[x]) {\n      match = uagent.match(new RegExp(\"(\" + x + \")( |/)([0-9]+)\"));\n      if (match) {\n        _browser.version = match[3];\n      } else {\n        match = uagent.match(new RegExp(\"rv:([0-9]+)\"));\n        if (match) {\n          _browser.version = match[1];\n        }\n      }\n      break;\n    }\n  }\n  _browser.opera = _browser.opr;\n  delete _browser.opr;\n}\n</code></pre>\n\n<p>To check if the current browser is Opera you would do</p>\n\n<pre><code>if (_browser.opera) { // Opera specific code }\n</code></pre>\n\n<p><strong>Edit</strong>: Fixed the formatting, fixed the detection for IE11 and Opera/Chrome, changed to browserResult from result. Now the order of the <code>_browser</code> keys doesn't matter. Updated <em>jsFiddle</em> link.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This is an improvement on Kennebec's answer.</p>\n\n<pre><code>function get_browser_info(){\n    var ua=navigator.userAgent,tem,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || []; \n    if(/trident/i.test(M[1])){\n        tem=/\\brv[ :]+(\\d+)/g.exec(ua) || []; \n        return {name:'IE ',version:(tem[1]||'')};\n        }   \n    if(M[1]==='Chrome'){\n        tem=ua.match(/\\bOPR\\/(\\d+)/)\n        if(tem!=null)   {return {name:'Opera', version:tem[1]};}\n        }   \n    M=M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n    if((tem=ua.match(/version\\/(\\d+)/i))!=null) {M.splice(1,1,tem[1]);}\n    return {\n      name: M[0],\n      version: M[1]\n    };\n }\n</code></pre>\n\n<p>And then you just run:</p>\n\n<pre><code>var browser=get_browser_info();\n// browser.name = 'Chrome'\n// browser.version = '40'\n</code></pre>\n\n<p>This way you shield yourself from the obscurity of the code.</p>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>Here is the java version for somemone who whould like to do it on server side using the String returned by <code>HttpServletRequest.getHeader(\"User-Agent\");</code></p>\n\n<p>It is working on the 70 different browser configuration I used for testing.</p>\n\n<pre><code>public static String decodeBrowser(String userAgent) {\n    userAgent= userAgent.toLowerCase();\n    String name = \"unknown\";\n    String version = \"0.0\";\n    Matcher userAgentMatcher = USER_AGENT_MATCHING_PATTERN.matcher(userAgent);\n    if (userAgentMatcher.find()) {\n      name = userAgentMatcher.group(1);\n      version = userAgentMatcher.group(2);\n      if (\"trident\".equals(name)) {\n        name = \"msie\";\n        Matcher tridentVersionMatcher = TRIDENT_MATCHING_PATTERN.matcher(userAgent);\n        if (tridentVersionMatcher.find()) {\n          version = tridentVersionMatcher.group(1);\n        }\n      }\n    }\n    return name + \" \" + version;\n  }\n\n  private static final Pattern USER_AGENT_MATCHING_PATTERN=Pattern.compile(\"(opera|chrome|safari|firefox|msie|trident(?=\\\\/))\\\\/?\\\\s*([\\\\d\\\\.]+)\");\n  private static final Pattern TRIDENT_MATCHING_PATTERN=Pattern.compile(\"\\\\brv[ :]+(\\\\d+(\\\\.\\\\d+)?)\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var nVer = navigator.appVersion;\nvar nAgt = navigator.userAgent;\nvar browserName  = navigator.appName;\nvar fullVersion  = ''+parseFloat(navigator.appVersion);\nvar majorVersion = parseInt(navigator.appVersion,10);\nvar nameOffset,verOffset,ix;\n\n// In Opera, the true version is after \"Opera\" or after \"Version\"\n\nif ((verOffset=nAgt.indexOf(\"Opera\"))!=-1) {\n browserName = \"Opera\";\n fullVersion = nAgt.substring(verOffset+6);\n if ((verOffset=nAgt.indexOf(\"Version\"))!=-1)\n   fullVersion = nAgt.substring(verOffset+8);\n}\n// In MSIE, the true version is after \"MSIE\" in userAgent\n\nelse if ((verOffset=nAgt.indexOf(\"MSIE\"))!=-1) {\n browserName = \"Microsoft Internet Explorer\";\n fullVersion = nAgt.substring(verOffset+5);\n}\n// In Chrome, the true version is after \"Chrome\"\n\nelse if ((verOffset=nAgt.indexOf(\"Chrome\"))!=-1) {\n browserName = \"Chrome\";\n fullVersion = nAgt.substring(verOffset+7);\n}\n// In Safari, the true version is after \"Safari\" or after \"Version\"\n\nelse if ((verOffset=nAgt.indexOf(\"Safari\"))!=-1) {\n browserName = \"Safari\";\n fullVersion = nAgt.substring(verOffset+7);\n if ((verOffset=nAgt.indexOf(\"Version\"))!=-1)\n   fullVersion = nAgt.substring(verOffset+8);\n}\n// In Firefox, the true version is after \"Firefox\"\n\nelse if ((verOffset=nAgt.indexOf(\"Firefox\"))!=-1) {\n browserName = \"Firefox\";\n fullVersion = nAgt.substring(verOffset+8);\n}\n// In most other browsers, \"name/version\" is at the end of userAgent\n\nelse if ( (nameOffset=nAgt.lastIndexOf(' ')+1) &lt;\n          (verOffset=nAgt.lastIndexOf('/')) )\n{\n browserName = nAgt.substring(nameOffset,verOffset);\n fullVersion = nAgt.substring(verOffset+1);\n if (browserName.toLowerCase()==browserName.toUpperCase()) {\n  browserName = navigator.appName;\n }\n}\n\n// trim the fullVersion string at semicolon/space if present\n\nif ((ix=fullVersion.indexOf(\";\"))!=-1)\n   fullVersion=fullVersion.substring(0,ix);\nif ((ix=fullVersion.indexOf(\" \"))!=-1)\n   fullVersion=fullVersion.substring(0,ix);\n\nmajorVersion = parseInt(''+fullVersion,10);\nif (isNaN(majorVersion)) {\n fullVersion  = ''+parseFloat(navigator.appVersion);\n majorVersion = parseInt(navigator.appVersion,10);\n}\n\ndocument.write(''\n +'Browser name  = '+browserName+'&lt;br&gt;'\n +'Full version  = '+fullVersion+'&lt;br&gt;'\n +'Major version = '+majorVersion+'&lt;br&gt;'\n +'navigator.appName = '+navigator.appName+'&lt;br&gt;'\n +'navigator.userAgent = '+navigator.userAgent+'&lt;br&gt;'\n)\n</code></pre>\n\n<p>See the demo here..<a href=\"http://jsfiddle.net/hw4jM/3/\" rel=\"nofollow\">http://jsfiddle.net/hw4jM/3/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function BrowserCheck()\n{\n    var N= navigator.appName, ua= navigator.userAgent, tem;\n    var M= ua.match(/(opera|chrome|safari|firefox|msie|trident)\\/?\\s*(\\.?\\d+(\\.\\d+)*)/i);\n    if(M &amp;&amp; (tem= ua.match(/version\\/([\\.\\d]+)/i))!= null) {M[2]=tem[1];}\n    M= M? [M[1], M[2]]: [N, navigator.appVersion,'-?'];\n    return M;\n}\n</code></pre>\n\n<p>This will return an array, first element is the browser name, second element is the complete version number in string format.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I wrote a version detector based on Hermann Ingjaldsson's answer, but more robust and which returns an object with name/version data in it.  It covers the major browsers but I don't bother with the plethora of mobile ones and minor ones:</p>\n\n<pre><code>function getBrowserData(nav) {\n    var data = {};\n\n    var ua = data.uaString = nav.userAgent;\n    var browserMatch = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*([\\d\\.]+)/i) || [];\n    if (browserMatch[1]) { browserMatch[1] = browserMatch[1].toLowerCase(); }\n    var operaMatch = browserMatch[1] === 'chrome';\n    if (operaMatch) { operaMatch = ua.match(/\\bOPR\\/([\\d\\.]+)/); }\n\n    if (/trident/i.test(browserMatch[1])) {\n        var msieMatch = /\\brv[ :]+([\\d\\.]+)/g.exec(ua) || [];\n        data.name = 'msie';\n        data.version = msieMatch[1];\n    }\n    else if (operaMatch) {\n        data.name = 'opera';\n        data.version = operaMatch[1];\n    }\n    else if (browserMatch[1] === 'safari') {\n        var safariVersionMatch = ua.match(/version\\/([\\d\\.]+)/i);\n        data.name = 'safari';\n        data.version = safariVersionMatch[1];\n    }\n    else {\n        data.name = browserMatch[1];\n        data.version = browserMatch[2];\n    }\n\n    var versionParts = [];\n    if (data.version) {\n        var versionPartsMatch = data.version.match(/(\\d+)/g) || [];\n        for (var i=0; i &lt; versionPartsMatch.length; i++) {\n            versionParts.push(versionPartsMatch[i]);\n        }\n        if (versionParts.length &gt; 0) { data.majorVersion = versionParts[0]; }\n    }\n    data.name = data.name || '(unknown browser name)';\n    data.version = {\n        full: data.version || '(unknown full browser version)',\n        parts: versionParts,\n        major: versionParts.length &gt; 0 ? versionParts[0] : '(unknown major browser version)'\n    };\n\n    return data;\n};\n</code></pre>\n\n<p>It can then be used like this:</p>\n\n<pre><code>var brData = getBrowserData(window.navigator || navigator);\nconsole.log('name: ' + brData.name);\nconsole.log('major version: ' + brData.version.major);\n// etc.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I wrote this for my needs.</p>\n\n<p>It get info like if is a mobile device or if has a retina display</p>\n\n<p><a href=\"http://jsfiddle.net/7rkpLa72/2/\" rel=\"nofollow\">try it</a></p>\n\n<pre><code>var nav = {\n        isMobile:function(){\n            return (navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i) != null);\n        },\n        isDesktop:function(){\n            return (navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i) == null);\n        },\n        isAndroid: function() {\n            return navigator.userAgent.match(/Android/i);\n        },\n        isBlackBerry: function() {\n            return navigator.userAgent.match(/BlackBerry/i);\n        },\n        isIOS: function() {\n            return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n        },\n        isOpera: function() {\n            return navigator.userAgent.match(/Opera Mini/i);\n        },\n        isWindows: function() {\n            return navigator.userAgent.match(/IEMobile/i);\n        },\n        isRetina:function(){\n            return window.devicePixelRatio &amp;&amp; window.devicePixelRatio &gt; 1;\n        },\n        isIPad:function(){\n            isIPad = (/ipad/gi).test(navigator.platform);\n            return isIPad;\n        },\n        isLandscape:function(){\n            if(window.innerHeight &lt; window.innerWidth){\n                return true;\n            }\n            return false;\n        },\n        getIOSVersion:function(){\n            if(this.isIOS()){\n                var OSVersion = navigator.appVersion.match(/OS (\\d+_\\d+)/i);\n                OSVersion = OSVersion[1] ? +OSVersion[1].replace('_', '.') : 0;\n                return OSVersion;\n            }\n            else\n                return false;\n        },\n        isStandAlone:function(){\n            if(_.is(navigator.standalone))\n                return navigator.standalone;\n            return false;\n        },\n        isChrome:function(){\n            var isChrome = (/Chrome/gi).test(navigator.appVersion);\n            var isSafari = (/Safari/gi).test(navigator.appVersion)\n            return isChrome &amp;&amp; isSafari;\n        },\n        isSafari:function(){\n            var isSafari = (/Safari/gi).test(navigator.appVersion)\n            var isChrome = (/Chrome/gi).test(navigator.appVersion)\n            return !isChrome &amp;&amp; isSafari;\n        }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've been searching around for code that would let me detect if the user visiting the website has Firefox 3 or 4. All I have found is code to detect the type of browser but not the version.</p>\n\n<p>How can I detect the version of a browser like this?</p>\n",
            "last_activity_date": 1425486811,
            "question_id": 5916900,
            "score": 105,
            "tags": [
                "javascript",
                "browser",
                "version",
                "browser-detection"
            ],
            "title": "How can you detect the version of a browser?"
        }
    ]
}
