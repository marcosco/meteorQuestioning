{
    "items": [
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>there isn't a way to do this in css2. you could add the class to the li and reference the a</p>\n\n<pre><code>li.active &gt; a {\n    property: value;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Josh",
                        "user_id": 123234
                    },
                    "score": 9
                },
                {
                    "body": "<p>I've certainly come across instances when it would be handy, but unfortunately parent selectors do not exist in CSS.</p>\n\n<p>Can you explain more about what you're trying to achieve?  There might be another way in to a solution, e.g. move the style to the <code>li</code>, then disable it in <code>a.active</code> or via a child selector.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nicole",
                        "user_id": 121563
                    },
                    "score": 7
                },
                {
                    "body": "<p>I don\u00b4t think you can select the parent in css only.</p>\n\n<p>But as you already seem to have an <code>.active</code> class, wouldn\u00b4t it be easier to move that class to the <code>li</code> (instead of the <code>a</code>)? That way you can access both the <code>li</code> and the <code>a</code> via css only.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jeroen",
                        "user_id": 42139
                    },
                    "score": 55
                },
                {
                    "body": "<p>Not in CSS 2 as far as I'm aware.  CSS 3 has more robust selectors but is not consistently implemented across all browsers.  Even with the improved selectors, I don't believe it will accomplish exactly what you've specified in your example.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mark Hurd",
                        "user_id": 65714
                    },
                    "score": 6
                },
                {
                    "body": "<p>There is currently no way to select the parent of an element in CSS.</p>\n\n<p>If there was a way to do it, it would be in either of the current CSS selectors specs:</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/css3-selectors/#selectors\">Selectors Level 3 Spec</a></li>\n<li><a href=\"http://www.w3.org/TR/CSS2/selector.html#pattern-matching\">CSS 2 Selectors Spec</a></li>\n</ul>\n\n<p>In the meantime you'll have to resort to JavaScript if you need to select a parent element.</p>\n\n<hr>\n\n<p>The <a href=\"http://dev.w3.org/csswg/selectors4/#relational\">Selectors Level 4 Working Draft</a> includes a <code>:has()</code> pseudo-class that works the same as the <a href=\"http://api.jquery.com/has-selector/\">jQuery implementation</a>. As of 2015, <strong>this is not available in any browser</strong>. </p>\n\n<p>Using <code>:has()</code> the original question could be solved with this:</p>\n\n<pre><code>li:has(&gt; a.active) { /* styles to apply to the li tag */ }\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Dan Herbert",
                        "user_id": 392
                    },
                    "score": 780
                },
                {
                    "body": "<p>As mentioned by a couple of others, there isn't a way to style an element's parent/s using just CSS but the following works with <a href=\"http://jquery.com/\">jQuery</a>:</p>\n\n<pre><code>$(\"a.active\").parents('li').css(\"property\", \"value\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "zcrar70",
                        "user_id": 59384
                    },
                    "score": 20
                },
                {
                    "body": "<p>The css3 selector \"General sibling combinator\" could maybe used for what you want:</p>\n\n<pre><code>E ~ F {\n    property: value;\n}\n</code></pre>\n\n<p>This matches any F element that is preceded by an E element.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cobaasta",
                        "user_id": 823180
                    },
                    "score": 11
                },
                {
                    "body": "<p>You can use this <a href=\"https://github.com/Idered/cssParentSelector\">script</a>. </p>\n\n<pre class=\"lang-css prettyprint-override\"><code>*! &gt; input[type=text] { background: #000; }\n</code></pre>\n\n<p>This will select any parent of a text input. But wait, there's still much more. If you want, you can select a specified parent:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.input-wrap! &gt; input[type=text] { background: #000; }\n</code></pre>\n\n<p>or select it when it's active:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.input-wrap! &gt; input[type=text]:focus { background: #000; }\n</code></pre>\n\n<p>Check out this HTML:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"input-wrap\"&gt;\n    &lt;input type=\"text\" class=\"Name\"/&gt;\n    &lt;span class=\"help hide\"&gt;Your name sir&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>you can select that <code>span.help</code> when the <code>input</code> is active and show it:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.input-wrap! .help &gt; input[type=text]:focus { display: block; }\n</code></pre>\n\n<p>There are many more capabilities; just check out the documentation of the plugin.</p>\n\n<p>BTW, it works in IE.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Idered",
                        "user_id": 450726
                    },
                    "score": 32
                },
                {
                    "body": "<p>The W3C excluded such a selector because of the huge performance impact it would have on a browser.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "rgb",
                        "user_id": 738957
                    },
                    "score": 3
                },
                {
                    "body": "<p>Try to switch \"a\" to block display, and then use any style You want. \"a\" element will fill \"li\" element and You will be able to modify it's look as You want. Dont forget to set \"li\" padding to 0.</p>\n\n<pre><code>li {padding: 0; overflow: hidden;}\na {display: block; width: 100%; color:..., background:..., border-radius:..., etc...}\na.active {color:..., background:...}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Raseko",
                        "user_id": 1061497
                    },
                    "score": 8
                },
                {
                    "body": "<p>If you want to display a child element based on a parent pseudo class, you can define the default state of the child element, then redefine it for each state change of the parent:</p>\n\n<pre><code>li:hover &gt; a * { display: none; }\n\nli:hover &gt; a:hover * { display: block; }\n</code></pre>\n\n<p><strong>References</strong></p>\n\n<ul>\n<li><p><a href=\"http://css-tricks.com/snippets/css/clear-fix/\" rel=\"nofollow\">Force Element to Self-Clear its Children</a></p></li>\n<li><p><a href=\"http://fairwaytech.com/2012/02/the-ie8-hover-bug-the-most-awesome-ie-bug-ever/\" rel=\"nofollow\">The IE8 \u201chover\u201d Bug: The Most Awesome IE Bug Ever?</a></p></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paul Sweatte",
                        "user_id": 1113772
                    },
                    "score": -5
                },
                {
                    "body": "<p>You might try to use hyperlink as the parent, and then change the inner elements on hover. Like this:</p>\n\n<pre><code>a.active h1 {color:red;}\n\na.active:hover h1 {color:green;}\n\na.active h2 {color:blue;}\n\na.active:hover h1 {color:yellow;}\n</code></pre>\n\n<p>This way you can change the style in multiple inner tags, based on the rollover of the parent element.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "riverstorm",
                        "user_id": 1089708
                    },
                    "score": 6
                },
                {
                    "body": "<p>I know the OP was looking for a CSS solution but it is simple to achieve using jQuery. In my case I needed to find the <code>&lt;ul&gt;</code> parent tag for a <code>&lt;span&gt;</code> tag contained in the child <code>&lt;li&gt;</code>. jQuery has the <code>:has</code> selector so it's possible to identify a parent by the children it contains:</p>\n\n<pre><code>$(\"ul:has(#someId)\")\n</code></pre>\n\n<p>will select the <code>ul</code> element that has a child element with id <em>someId</em>. Or to answer the original question, something like the following should do the trick (untested):</p>\n\n<pre><code>$(\"li:has(.active)\")\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "David Clarke",
                        "user_id": 132599
                    },
                    "score": 4
                },
                {
                    "body": "<p>In CSS3 (works on firefox 21 in linux):</p>\n\n<pre><code>:not(:empty)\n</code></pre>\n\n<p>Selects elements with children/text nodes.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Menachem Almog",
                        "user_id": 270573
                    },
                    "score": -2
                },
                {
                    "body": "<p>There is no parent selector; just the way there is no previous sibling selector. One good reason for not having these selectors is because the browser has to traverse through all children of an element to determine whether or not a class should be applied. For example if you wrote:</p>\n\n<pre><code>body:contains-selector(a.active) { background: red; }\n</code></pre>\n\n<p>Then the browser will have to wait until it has loaded and parsed everything until the <code>&lt;/body&gt;</code> to determine if the page should be red or not.</p>\n\n<p>This article <a href=\"http://snook.ca/archives/html_and_css/css-parent-selectors\" rel=\"nofollow\">WHY WE DON'T HAVE A PARENT SELECTOR</a> explains it in detail.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Salman A",
                        "user_id": 87015
                    },
                    "score": 4
                },
                {
                    "body": "<p>Currently there is no parent selector &amp; it is not even being discussed in any of the talks of W3C. You need to understand how CSS is evaluated by the browser to actually understand if we need it or not.</p>\n\n<p>There is a lot of technical explanation here.</p>\n\n<p>Jonathan Snook explains how css is evaluated\n<a href=\"http://snook.ca/archives/html_and_css/css-parent-selectors\" rel=\"nofollow\">http://snook.ca/archives/html_and_css/css-parent-selectors</a></p>\n\n<p>Chris Coyier on the talks of Parent selector\n<a href=\"http://css-tricks.com/parent-selectors-in-css/\" rel=\"nofollow\">http://css-tricks.com/parent-selectors-in-css/</a></p>\n\n<p>Harry Roberts again on writing efficient css selector\n<a href=\"http://csswizardry.com/2011/09/writing-efficient-css-selectors/\" rel=\"nofollow\">http://csswizardry.com/2011/09/writing-efficient-css-selectors/</a></p>\n\n<p>but this lady has some interesting facts\n<a href=\"http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/\" rel=\"nofollow\">http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/</a></p>\n\n<p>These people are all top class in the field of front end development.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Suraj Naik",
                        "user_id": 2731897
                    },
                    "score": 2
                }
            ],
            "body": "<p>I would like to select the <code>&lt;li&gt;</code> element that is a parent (which immediately precedes the anchor tag, if that helps...) according to some attribute of the anchor tag.</p>\n\n<p>i.e. my CSS would be something like this:</p>\n\n<pre><code>li &lt; a.active {\n    property: value;\n}\n</code></pre>\n\n<p>Obviously there are ways of doing this with JavaScript but I'm hoping that there is some sort of workaround that exists native to CSS 2</p>\n\n<p>Any ideas?</p>\n\n<p>[Edit:]\nThe menu that I am trying to style is being spewed out by a cms so I can't move the active tag to the li element... (unless I theme the menu creation module which I'd rather not do)</p>\n",
            "last_activity_date": 1423066854,
            "owner": {
                "display_name": "jcuenod",
                "user_id": 123415
            },
            "question_id": 1014861,
            "score": 948,
            "tags": [
                "css",
                "css-selectors"
            ],
            "title": "Is there a CSS parent selector?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Try adding <code>float:left;</code> <a href=\"http://jsfiddle.net/dGHFV/3/\" rel=\"nofollow\">http://jsfiddle.net/dGHFV/3/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alex Thomas",
                        "user_id": 1702789
                    },
                    "score": 0
                },
                {
                    "body": "<p>Since this answer has become rather popular, I'm rewriting it significantly.</p>\n\n<p>Let's not forget the actual question that was asked:</p>\n\n<blockquote>\n  <p>How to remove the space between inline-block elements? I was hoping\n  for a CSS solution that doesn't require the HTML source code to be\n  tampered with. <strong>Can this issue be solved with CSS alone?</strong></p>\n</blockquote>\n\n<p>It <em>is</em> possible to solve this problem with CSS alone, but there are no <em>completely</em> robust CSS fixes.</p>\n\n<p>The solution I had in my initial answer was to add <code>font-size: 0</code> to the parent element, and then declare a sensible <code>font-size</code> on the children.</p>\n\n<p><a href=\"http://jsfiddle.net/thirtydot/dGHFV/1361/\">http://jsfiddle.net/thirtydot/dGHFV/1361/</a></p>\n\n<p>This works in recent versions of all modern browsers. It works in IE8. It does not work in Safari 5, but it <em>does</em> work in Safari 6. Safari 5 is nearly a dead browser (<a href=\"http://gs.statcounter.com/#browser_version_partially_combined-ww-monthly-201207-201307\">1.49%, July 2013</a>).</p>\n\n<p>Most of the possible issues with relative font sizes are not complicated to fix.</p>\n\n<p>However, while this is a reasonable solution if you <em>specifically need</em> a CSS only fix, it's not what I recommend if you're free to change your HTML (as most of us are).</p>\n\n<hr>\n\n<p>This is what I, as a reasonably experienced web developer, actually do to solve this problem:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;span&gt;Foo&lt;/span&gt;&lt;span&gt;Bar&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>Yes, that's right. I remove the whitespace in the HTML between the inline-block elements.</p>\n\n<p>It's easy. It's simple. It works everywhere. It's the pragmatic solution.</p>\n\n<p>You do sometimes have to carefully consider where whitespace will come from. <em>Will appending another element with jQuery add whitespace?</em> No, not if you do it properly.</p>\n\n<p>Let's go on a magical journey of different ways to remove the whitespace, with some new HTML:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<ul>\n<li><p>You can do this, as I usually do:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/thirtydot/dGHFV/1362/\">http://jsfiddle.net/thirtydot/dGHFV/1362/</a></p></li>\n<li><p>Or, this:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li\n    &gt;&lt;li&gt;Item 2&lt;/li\n    &gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></li>\n<li><p>Or, use comments:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;&lt;!--\n    --&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;!--\n    --&gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre></li>\n<li><p>Or, <a href=\"http://validator.w3.org/check?uri=http%3A%2F%2Fjsbin.com%2FOMoXUHO%2F1%2F&amp;charset=%28detect+automatically%29&amp;doctype=Inline&amp;group=0\">you can</a> even skip <a href=\"http://developers.whatwg.org/syntax.html#optional-tags\">certain</a> closing tags entirely (all browsers are fine with this):</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;Item 1\n    &lt;li&gt;Item 2\n    &lt;li&gt;Item 3\n&lt;/ul&gt;\n</code></pre></li>\n</ul>\n\n<p>Now that I've gone and bored you to death with \"one thousand different ways to remove whitespace, by thirtydot\", hopefully you've forgotten all about <code>font-size: 0</code>.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "thirtydot",
                        "user_id": 405015
                    },
                    "score": 301
                },
                {
                    "body": "<p>For CSS3 conforming browsers there is <code>white-space-collapsing:discard</code> </p>\n\n<p>see: <a href=\"http://www.w3.org/TR/2010/WD-css3-text-20101005/#white-space-collapsing\">http://www.w3.org/TR/2010/WD-css3-text-20101005/#white-space-collapsing</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "HBP",
                        "user_id": 125685
                    },
                    "score": 47
                },
                {
                    "body": "<p>I had this problem right now and from <code>font-size:0;</code> i've found that in IE7 the problem remains because IE thinks \"Font Size 0?!?! WTF are you crazy man?\" - So, in my case i've Eric Meyer's CSS reset and with <code>font-size:0.01em;</code> I have a difference of 1px from IE7 to FF9, so, I think this can be a solution.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nelson Concei&#231;&#227;o",
                        "user_id": 1155186
                    },
                    "score": 1
                },
                {
                    "body": "<p>Ok, although I've upvoted both the <code>font-size: 0;</code> and the <code>not implemented CSS3 feature</code> answers, \nafter trying I found out that <strong>none of them is a real solution</strong>.</p>\n\n<p>Actually, there is not even one workaround without strong side effects.</p>\n\n<p>Then <strong>I decided to remove the spaces</strong> (this answers is about this argument) between the <code>inline-block</code> divs from my <code>HTML</code> source (<code>JSP</code>),\nturning this:</p>\n\n<pre><code>&lt;div class=\"inlineBlock\"&gt;\n    I'm an inline-block div\n&lt;/div&gt;\n&lt;div class=\"inlineBlock\"&gt;\n    I'm an inline-block div\n&lt;/div&gt;\n</code></pre>\n\n<p>to this</p>\n\n<pre><code>&lt;div class=\"inlineBlock\"&gt;\n    I'm an inline-block div\n&lt;/div&gt;&lt;div class=\"inlineBlock\"&gt;\n    I'm an inline-block div\n&lt;/div&gt;\n</code></pre>\n\n<p>that is ugly, but working.</p>\n\n<p>But, wait a minute... what if I'm generating my divs inside <code>Taglibs loops</code> (<code>Struts2</code>, <code>JSTL</code>, etc...) ? </p>\n\n<p>For example:</p>\n\n<pre><code>&lt;s:iterator begin=\"0\" end=\"6\" status=\"ctrDay\"&gt;\n    &lt;br/&gt;\n    &lt;s:iterator begin=\"0\" end=\"23\" status=\"ctrHour\"&gt;\n        &lt;s:push value=\"%{days[#ctrDay.index].hours[#ctrHour.index]}\"&gt;\n            &lt;div class=\"inlineBlock&gt;\n                I'm an inline-block div in a matrix \n                (Do something here with the pushed object...)\n           &lt;/div&gt;\n       &lt;/s:push&gt;\n    &lt;/s:iterator&gt;\n&lt;/s:iterator&gt;\n</code></pre>\n\n<p>It is absolutely not thinkable to inline all that stuff, it would mean</p>\n\n<pre><code>&lt;s:iterator begin=\"0\" end=\"6\" status=\"ctrDay\"&gt;\n    &lt;br/&gt;\n    &lt;s:iterator begin=\"0\" end=\"23\" status=\"ctrHour\"&gt;&lt;s:push value=\"%{days[#ctrDay.index].hours[#ctrHour.index]}\"&gt;&lt;div class=\"inlineBlock&gt;\n                I'm an inline-block div in a matrix             \n                (Do something here with the pushed object...)\n           &lt;/div&gt;&lt;/s:push&gt;&lt;/s:iterator&gt;\n&lt;/s:iterator&gt;\n</code></pre>\n\n<p>that is not readable, hard to mantain and understand, etc...</p>\n\n<p>The solution i found: </p>\n\n<blockquote>\n  <p><strong>use HTML comments to connect the end of one div to the begin of the next one!</strong></p>\n</blockquote>\n\n<pre><code>&lt;s:iterator begin=\"0\" end=\"6\" status=\"ctrDay\"&gt;\n   &lt;br/&gt;\n   &lt;s:iterator begin=\"0\" end=\"23\" status=\"ctrHour\"&gt;&lt;!--\n    --&gt;&lt;s:push value=\"%{days[#ctrDay.index].hours[#ctrHour.index]}\"&gt;&lt;!--\n        --&gt;&lt;div class=\"inlineBlock&gt;\n                I'm an inline-block div in a matrix             \n                (Do something here with the pushed object...)\n           &lt;/div&gt;&lt;!--\n    --&gt;&lt;/s:push&gt;&lt;!--\n--&gt;&lt;/s:iterator&gt;\n&lt;/s:iterator&gt;\n</code></pre>\n\n<p>This way you will have a readable and correctly indented code.</p>\n\n<p>And, as a positive side effect, the <code>HTML source</code>, although infested by empty comments, \nwill result correctly indented; </p>\n\n<p>let's take the first example, imho this:</p>\n\n<pre><code>    &lt;div class=\"inlineBlock\"&gt;\n        I'm an inline-block div\n    &lt;/div&gt;&lt;!--\n --&gt;&lt;div class=\"inlineBlock\"&gt;\n        I'm an inline-block div\n    &lt;/div&gt;\n</code></pre>\n\n<p>is better than this</p>\n\n<pre><code>    &lt;div class=\"inlineBlock\"&gt;\n         I'm an inline-block div\n    &lt;/div&gt;&lt;div class=\"inlineBlock\"&gt;\n         I'm an inline-block div\n    &lt;/div&gt;\n</code></pre>\n\n<p>Hope that helps...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andrea Ligios",
                        "user_id": 1654265
                    },
                    "score": 30
                },
                {
                    "body": "<p>Add <strong>comments</strong> between elements to NOT have a white space. For me it is easier than resetting font size to zero and then setting it back.</p>\n\n<pre><code>&lt;div&gt;\n    Element 1\n&lt;/div&gt;&lt;!--\n--&gt;&lt;div&gt;\n    Element 2\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Radek",
                        "user_id": 105707
                    },
                    "score": 8
                },
                {
                    "body": "<p>Two more options based on <a href=\"http://www.w3.org/TR/css3-text/#word-spacing0\" rel=\"nofollow\">CSS Text Module Level 3</a> (instead of <a href=\"http://stackoverflow.com/a/5078350/2533215\"><code>white-space-collapsing:discard</code></a> which had been dropped from the spec draft):</p>\n\n<ul>\n<li><code>word-spacing: -100%;</code></li>\n</ul>\n\n<p>In theory, should do exactly what is needed \u2014 shorten whitespaces\n    between 'words' by the 100% of the space character width, i.e. to\n    zero. But seems not to work anywhere, unfortunately, and this\n    feature is marked 'at risk' (it can be dropped from the spec, too).</p>\n\n<ul>\n<li><code>word-spacing: -1ch;</code></li>\n</ul>\n\n<p>Shortens the inter-word spaces by the width of the digit '0'. In monospace font it should be exactly equal to the width of the space character (and any other character as well). This works in Firefox 10+, Chrome 27+, and almost works in IE9+</p>\n\n<p><a href=\"http://jsfiddle.net/CNsPg/3/\" rel=\"nofollow\">Fiddle</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ilya Streltsyn",
                        "user_id": 2533215
                    },
                    "score": 3
                },
                {
                    "body": "<p>I\u2019ve been tackling this recently and instead of setting the parent <code>font-size:0</code> then setting the child back to a reasonable value, I\u2019ve been getting consistent results by setting the parent container <code>letter-spacing:-.25em</code> then the child back to <code>letter-spacing:normal</code>.</p>\n\n<p>In an alternate thread I saw a commenter mention that <code>font-size:0</code> isn\u2019t always ideal because people can control minimum font sizes in their browsers, completely negating the possibility of setting the font-size to zero.</p>\n\n<p>Using ems appears to work regardless of whether the font-size specified is 100%, 15pt or 36px.</p>\n\n<p><a href=\"http://cdpn.io/dKIjo\" rel=\"nofollow\">http://cdpn.io/dKIjo</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "StephenESC",
                        "user_id": 1906283
                    },
                    "score": 1
                },
                {
                    "body": "<p>Why not use flexbox and do a fallback (from suggestions above) for older browsers. </p>\n\n<pre><code>ul {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Plippie",
                        "user_id": 344117
                    },
                    "score": 4
                },
                {
                    "body": "<p>This is the same answer I gave over on the related: <a href=\"http://stackoverflow.com/questions/16678929/display-inline-block-what-is-that-space\">Display: Inline block - What is that space?</a></p>\n\n<p>There\u2019s actually a really simple way to remove whitespace from inline-block that\u2019s both easy and semantic. It\u2019s called a custom font with zero-width spaces, which allows you to collapse the whitespace (added by the browser for inline elements when they're on separate lines) at the font level using a very tiny font. Once you declare the font, you just change the font-family on the container and back again on the children, and voila. Like this:</p>\n\n<pre><code>@font-face{ \n    font-family: 'NoSpace';\n    src: url('../Fonts/zerowidthspaces.eot');\n    src: url('../Fonts/zerowidthspaces.eot?#iefix') format('embedded-opentype'),\n         url('../Fonts/zerowidthspaces.woff') format('woff'),\n         url('../Fonts/zerowidthspaces.ttf') format('truetype'),\n         url('../Fonts/zerowidthspaces.svg#NoSpace') format('svg');\n}\n\nbody {\n    font-face: 'OpenSans', sans-serif;\n}\n\n.inline-container {\n    font-face: 'NoSpace';\n}\n\n.inline-container &gt; * {\n    display: inline-block;\n    font-face: 'OpenSans', sans-serif;\n}\n</code></pre>\n\n<p>Suit to taste. Here\u2019s a download to the font I just cooked up in font-forge and converted with FontSquirrel webfont generator. Took me all of 5 minutes. The css @font-face declaration is included: <a href=\"https://drive.google.com/file/d/0B8W6UmdG-DTVbThfWkI5M1NYRVE/edit?usp=sharing\">zipped zero-width space font</a>. It's in Google Drive so you'll need to click File > Download to save it to your computer. You'll probably need to change the font paths as well if you copy the declaration to your main css file.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Aldfrith",
                        "user_id": 3083215
                    },
                    "score": 6
                },
                {
                    "body": "<p>font-size:0; can be a bit trickier to manage...</p>\n\n<p>I think the following couple lines is a lot better and more re-usable, and time saver than any other methods. I personally use this:</p>\n\n<pre><code>.inline-block-wrapper&gt;.inline-block-wrapper,\n.inline-block-wrapper{letter-spacing: -4px;}\n.inline-block-wrapper&gt;*{letter-spacing: 0;display: inline-block;}\n\n/* OR better shorter name...*/\n.items&gt;.items,\n.items{letter-spacing: -4px;}\n.items&gt;*{letter-spacing: 0;display: inline-block;}\n</code></pre>\n\n<p>Then you can use it as following...</p>\n\n<pre><code>&lt;ul class=\"items\"&gt;\n   &lt;li&gt;Item 1&lt;/li&gt;\n   &lt;li&gt;Item 2&lt;/li&gt;\n   &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>As far I as I know (I may be wrong) but all browsers support this method.</p>\n\n<p><strong>EXPLANATION</strong>:</p>\n\n<p>This works (maybe -3px may be better) exactly as you would anticipate it to work.</p>\n\n<ul>\n<li>you copy and paste the code (once)</li>\n<li>then on your html just use <code>class=\"items\"</code> on the parent of each inline-block.</li>\n</ul>\n\n<p>You will NOT have the need to go back to the css, and add another css rule, for your new inline blocks.</p>\n\n<p>Solving two issues at once.</p>\n\n<p>Also note the <code>&gt;</code> (greater than sign) this means that */all children should be inline-block.</p>\n\n<p><a href=\"http://jsfiddle.net/fD5u3/\" rel=\"nofollow\">http://jsfiddle.net/fD5u3/</a></p>\n\n<p>NOTE: I have modified to accommodate to inherit letter-spacing when a wrapper has a child wrapper.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Val",
                        "user_id": 240215
                    },
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;ul class=\"items\"&gt;\n   &lt;li&gt;Item 1&lt;/li&gt;&lt;?php\n ?&gt;&lt;li&gt;Item 2&lt;/li&gt;&lt;?php\n ?&gt;&lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Thats all. \nIn other lang by analogy</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alexufo",
                        "user_id": 2497351
                    },
                    "score": 0
                },
                {
                    "body": "<p>All the space elimination techniques for <code>display:inline-block</code> are nasty hacks...  </p>\n\n<p><strong>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\" rel=\"nofollow\">Flexbox</a></strong> </p>\n\n<p>It's awesome, solves all this inline-block layout bs, and as of 2015 has <a href=\"http://caniuse.com/#feat=flexbox\" rel=\"nofollow\">90% browser support</a> (96% if you don't care about old IEs). </p>\n\n<ul>\n<li><a href=\"http://www.sitepoint.com/are-we-ready-to-use-flexbox/\" rel=\"nofollow\">Are We Ready to Use Flexbox?</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\" rel=\"nofollow\">Using CSS flexible boxes - Web developer guide | MDN</a></li>\n<li><a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\" rel=\"nofollow\">A Complete Guide to Flexbox | CSS-Tricks</a></li>\n<li><a href=\"http://the-echoplex.net/flexyboxes/\" rel=\"nofollow\">Flexy Boxes \u2014 CSS flexbox playground and code generation tool</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Yarin",
                        "user_id": 165673
                    },
                    "score": 2
                }
            ],
            "body": "<p>Given this HTML: </p>\n\n<pre><code>&lt;p&gt;\n    &lt;span&gt; Foo &lt;/span&gt;\n    &lt;span&gt; Bar &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>and this CSS:</p>\n\n<pre><code>span { \n    display:inline-block;\n    width:100px;\n}\n</code></pre>\n\n<p>as a result, there will be a 4px wide space between the SPAN elements.<br>\n<strong>Demo:</strong> <a href=\"http://jsfiddle.net/dGHFV/\">http://jsfiddle.net/dGHFV/</a>  </p>\n\n<p>I understand why this happens, and I also know that I could get rid of that space by removing the white-space between the SPAN elements in the HTML source code, like so: </p>\n\n<pre><code>&lt;p&gt;\n    &lt;span&gt; Foo &lt;/span&gt;&lt;span&gt; Bar &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>However, I was hoping for a CSS solution that doesn't require the HTML source code to be tampered with.</p>\n\n<p>I know how to solve this with JavaScript - by removing the Text nodes from the container element (the paragraph), like so: </p>\n\n<pre><code>// jQuery\n$('p').contents().filter(function() { return this.nodeType === 3; }).remove();\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/dGHFV/1/\">http://jsfiddle.net/dGHFV/1/</a> </p>\n\n<p>But can this issue be solved with CSS alone?</p>\n",
            "last_activity_date": 1426201553,
            "owner": {
                "display_name": "\u0160ime Vidas",
                "user_id": 425275
            },
            "question_id": 5078239,
            "score": 286,
            "tags": [
                "html",
                "css"
            ],
            "title": "How to remove the space between inline-block elements?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Here are some example images for common use, mostly from existing answers on SO.  </p>\n\n<h2>Icons</h2>\n\n<p><strong>Simple Geometric shapes</strong> generated using Java as originally seen in <a href=\"http://stackoverflow.com/a/16052085/418556\">this answer</a>.  It includes a Java based interface that defines the URLs and makes them easy to access.</p>\n\n<p><strong>Details:</strong> 32x32 pixel PNG (4 colors x 5 shapes) with partial transparency (along the edges).</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/png\" class=\"post-tag\" title=\"show questions tagged &#39;png&#39;\" rel=\"tag\">png</a> <a href=\"/questions/tagged/icons\" class=\"post-tag\" title=\"show questions tagged &#39;icons&#39;\" rel=\"tag\">icons</a></p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/gJmeJ.png\" >\n  <img src=\"http://i.stack.imgur.com/L5DGx.png\" >\n  <img src=\"http://i.stack.imgur.com/in9g1.png\" >\n  <img src=\"http://i.stack.imgur.com/IucNt.png\" >\n  <img src=\"http://i.stack.imgur.com/yoKxT.png\" >&nbsp;&nbsp;\n  <img src=\"http://i.stack.imgur.com/T5uTa.png\" >\n  <img src=\"http://i.stack.imgur.com/gYxHm.png\" >\n  <img src=\"http://i.stack.imgur.com/1lgtq.png\" >\n  <img src=\"http://i.stack.imgur.com/yBOv3.png\" >\n  <img src=\"http://i.stack.imgur.com/zJ8am.png\" ><br>\n  <img src=\"http://i.stack.imgur.com/IHARa.png\" >\n  <img src=\"http://i.stack.imgur.com/8BGfi.png\" >\n  <img src=\"http://i.stack.imgur.com/6ZXhi.png\" >\n  <img src=\"http://i.stack.imgur.com/Lqkl0.png\" >\n  <img src=\"http://i.stack.imgur.com/c67nr.png\" >&nbsp;&nbsp;\n  <img src=\"http://i.stack.imgur.com/wCF8S.png\" >\n  <img src=\"http://i.stack.imgur.com/5v2TX.png\" >\n  <img src=\"http://i.stack.imgur.com/F0JHK.png\" >\n  <img src=\"http://i.stack.imgur.com/4EVv1.png\" >\n  <img src=\"http://i.stack.imgur.com/xj49g.png\" ><br></p>\n</blockquote>\n\n<h2>Sprite Sheets</h2>\n\n<p><strong>Chess Pieces</strong> as originally seen on <a href=\"http://stackoverflow.com/a/18686753/418556\">this answer</a> that includes 2 other sprite sets (same image in different colors).</p>\n\n<p><strong>Details:</strong> 384x128 px (each sprite 64x64 px) PNG with partial transparency.</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/png\" class=\"post-tag\" title=\"show questions tagged &#39;png&#39;\" rel=\"tag\">png</a> <a href=\"/questions/tagged/sprite-sheet\" class=\"post-tag\" title=\"show questions tagged &#39;sprite-sheet&#39;\" rel=\"tag\">sprite-sheet</a> <a href=\"/questions/tagged/icons\" class=\"post-tag\" title=\"show questions tagged &#39;icons&#39;\" rel=\"tag\">icons</a></p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/memI0.png\" ></p>\n</blockquote>\n\n<h2>Animated</h2>\n\n<p>GIF is the only image format that supports animation.  Here are a few examples.</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/gif\" class=\"post-tag\" title=\"show questions tagged &#39;gif&#39;\" rel=\"tag\">gif</a> <a href=\"/questions/tagged/animated-gif\" class=\"post-tag\" title=\"show questions tagged &#39;animated-gif&#39;\" rel=\"tag\">animated-gif</a> </p>\n\n<h3>Solid BG</h3>\n\n<p><strong>Animated dashed border</strong> as seen in <a href=\"http://stackoverflow.com/a/9772978/418556\">this answer</a>.</p>\n\n<p><strong>Details:</strong> 100x30 px with filled BG (no transparency)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/DnzXV.gif\" ></p>\n</blockquote>\n\n<p><strong>Zooming stars</strong> as seen in <a href=\"http://stackoverflow.com/a/10836833/418556\">this answer</a>, originally developed as a 'screen-shot' of a screensaver.</p>\n\n<p><strong>Details:</strong> 160x120 px with filled BG (no transparency)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/iQFxo.gif\" ></p>\n</blockquote>\n\n<p><strong>Animated Water</strong> as seen in <a href=\"http://stackoverflow.com/a/17894012/418556\">this answer</a> to <a href=\"http://stackoverflow.com/q/17893429/418556\">Animating Tiles In My Game</a>.</p>\n\n<p><strong>Details:</strong> 60x60 px with filled BG (no transparency)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/HXCUV.gif\"></p>\n</blockquote>\n\n<h3>Transparent BG</h3>\n\n<p><strong>Orbital animation,</strong> originally developed for <a href=\"http://1point1c.org/\">1.1C</a>.  The orbits of the 'inner' planets (from Mercury to Jupiter, with an extra orbit shown in the thick of the asteroid belt).  Better on a dark BG.</p>\n\n<p><strong>Details:</strong> 450x450 &amp; 150x150 px animated GIFs with transparency.  </p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/OtTIY.gif\" ><img src=\"http://i.stack.imgur.com/z9rv7.gif\" ></p>\n</blockquote>\n\n<h2>Pictures</h2>\n\n<p><strong>Sunrise &amp; moonset</strong> over the CBD of Sydney, Australia<br><strong>Sunset &amp; Venus over a telescope</strong> on Mt Stromlo, near Canberra, Australia.</p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/jpeg\" class=\"post-tag\" title=\"show questions tagged &#39;jpeg&#39;\" rel=\"tag\">jpeg</a> <a href=\"/questions/tagged/slideshow\" class=\"post-tag\" title=\"show questions tagged &#39;slideshow&#39;\" rel=\"tag\">slideshow</a> + Image Transitions</p>\n\n<p><strong>Details:</strong> 480x320 px JPEGs x 4.  (Displayed here at 1/2 size.) </p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/XZ4V5.jpg\" width=\"240\" height=\"160\" ><img src=\"http://i.stack.imgur.com/7bI1Y.jpg\" width=\"240\" height=\"160\" ><br>\n  <img src=\"http://i.stack.imgur.com/OVOg3.jpg\" width=\"240\" height=\"160\" ><img src=\"http://i.stack.imgur.com/lxthA.jpg\" width=\"240\" height=\"160\" ></p>\n</blockquote>\n\n<h2>Tiles</h2>\n\n<p>This <strong>Mercator map of Earth</strong> can be tiled left/right.  Originally seen on <a href=\"http://stackoverflow.com/a/18825844/418556\">this answer</a>.  The answer also includes a second version of the image that shows a semi-transparent line for the equator (which is not in the center, but significantly below it).</p>\n\n<p><strong>Details:</strong> 640x316 px (add 44 px at bottom to center equator) PNG with transparent BG.  </p>\n\n<p><strong>Categories:</strong> <a href=\"/questions/tagged/png\" class=\"post-tag\" title=\"show questions tagged &#39;png&#39;\" rel=\"tag\">png</a> <a href=\"/questions/tagged/tile\" class=\"post-tag\" title=\"show questions tagged &#39;tile&#39;\" rel=\"tag\">tile</a> <a href=\"/questions/tagged/animation\" class=\"post-tag\" title=\"show questions tagged &#39;animation&#39;\" rel=\"tag\">animation</a> (scrolling)</p>\n\n<blockquote>\n  <p><img src=\"http://i.stack.imgur.com/P59NF.png\"></p>\n</blockquote>\n\n<h2>Tip</h2>\n\n<p>For getting the URLs of the images, you might 'context click' on the image as seen in the browser and either: </p>\n\n<ul>\n<li>Show the properties.  The URL can be copied from the dialog that appears.  </li>\n<li>View image.  Copy the URL from the browser address bar.</li>\n</ul>\n\n<p>Alternately:</p>\n\n<ul>\n<li>Use the browser 'show source' and copy it from the HTML.</li>\n<li>For those with enough rep. (100+, to edit a community Wiki answer), go to <a href=\"http://stackoverflow.com/posts/19209651/edit\">edit the answer</a> and pull the URL from the text.</li>\n</ul>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Andrew Thompson",
                        "user_id": 418556
                    },
                    "score": 20
                }
            ],
            "body": "<p>When preparing an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>/<a href=\"http://sscce.org/\">SSCCE</a> that involves images, it is useful to have direct access to images.  </p>\n\n<p>The types of images that would cover most questions are - small images in multiple colors or shapes, animated GIFs with/without transparency, JPEGs that are 'pairs' of pictures &amp; can be used in image transitions, tile sets, sprite sheets..</p>\n\n<p>Are there any small (under 30KB), on-site, license &amp; royalty free images we can hot-link to for these types of examples?</p>\n",
            "last_activity_date": 1410665631,
            "owner": {
                "display_name": "Andrew Thompson",
                "user_id": 418556
            },
            "question_id": 19209650,
            "score": 20,
            "tags": [
                "java",
                "javascript",
                "css",
                "image"
            ],
            "title": "Example images for code and mark-up Q&amp;As"
        },
        {
            "answer_count": 41,
            "answers": [
                {
                    "body": "<p>You can apply this CSS to the inner div:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#inner {\n    width: 50%;\n    margin: 0 auto;\n}\n</code></pre>\n\n<p>Of course, you don't have to set the width to 50%. Any width less than the containing div will work. The <code>margin: 0 auto</code> is what does the actual centering.</p>\n\n<p>If you are targeting IE8+, it might be better to have this instead:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#inner {\n    display: table;\n    margin: 0 auto;\n}\n</code></pre>\n\n<p>It will make the inner element center horizontally and it works without setting a specific width.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Justin Poliey",
                        "user_id": 6967
                    },
                    "score": 1748
                },
                {
                    "body": "<p>It cannot be centered if you don't give it a width, otherwise it will take, by default the whole horizontal space.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "gizmo",
                        "user_id": 9396
                    },
                    "score": 22
                },
                {
                    "body": "<p>Set the width and set margin-left and margin-right to auto. That's for horizontal only, though. If you want both ways, you'd just do it both ways. Don't be afraid to experiment, it's not like you'll break anything</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sneakyness",
                        "user_id": 142632
                    },
                    "score": 16
                },
                {
                    "body": "<p>If you don't want to set a fixed width on the inner <code>div</code> you could do something like this:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#outer {\n  width: 100%;\n  text-align: center;\n}\n\n#inner {\n  display: inline-block;\n}\n</code></pre>\n\n<p>That makes the inner <code>div</code> into an inline element that can be centered with <code>text-align</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alfred",
                        "user_id": 291727
                    },
                    "score": 512
                },
                {
                    "body": "<p>I recently had to center a \"hidden\" div (ie, display:none;) that had a tabled form within it that needed to be centered on the page.  I wrote the following jQuery to display the hidden div &amp; then update the CSS to the automatic generated width of the table and change the margin to center it.  (The display toggle is triggered by clicking on a link, but this code wasn't neccessary to display.)</p>\n\n<p>NOTE:  I'm sharing this code because Google brought me to this Stack Overflow solution &amp; everything would have worked except that hidden elements don't have any width &amp; can't be resized/centered until after they are displayed.</p>\n\n<pre><code>&lt;div id=\"inner\" style=\"display:none;\"&gt;\n    &lt;form action=\"\"&gt;\n    &lt;table id=\"innerTable\"&gt;\n        &lt;tr&gt;&lt;td&gt;Name:&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\"&gt;&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Email:&lt;/td&gt;&lt;td&gt;&lt;input type=\"text\"&gt;&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;Email:&lt;/td&gt;&lt;td&gt;&lt;input type=\"submit\"&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\n&lt;script language=\"JavaScript\" type=\"text/javascript\"&gt;\n$(function(){\n    $('#inner').show().width($('#innerTable').width()).css('margin','0 auto');\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "James Moberg",
                        "user_id": 693068
                    },
                    "score": 12
                },
                {
                    "body": "<p>Suppose that your div is 200px wide:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.centered {\n  position: absolute;\n  left: 50%;\n  margin-left: -100px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "nuno_cruz",
                        "user_id": 501066
                    },
                    "score": 85
                },
                {
                    "body": "<p>... it's possible at all ...</p>\n\n<p><a href=\"http://stackoverflow.com/questions/3363562/center-div-vertically-in-a-height-div/9544084\">center div vertically in a % height div?</a></p>\n\n<p>HTML</p>\n\n<pre><code>&lt;div class=\"holder\"&gt;\n   &lt;div class=\"wrapper\"&gt;\n      &lt;div class=\"content\"&gt;\n         ... div 200px*100px on center ...\n      &lt;/div&gt;\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre><code>.holder {\n    position: relative;\n    width: 500px;\n    height: 400px;\n    background: #ff00ff;\n}\n\n.wrapper {\n    position: absolute;\n    width: 200px;\n/* this is size range */\n    height: 100px;\n    left: 50%;\n    top: 50%;\n    visibility: hidden;\n}\n\n.content {\n    position: absolute;\n/*relative absolute */\n    width: 100%;\n    height: 100%;\n    left: -50%;\n    top: -50%;\n    visibility: visible;\n    border: 1px solid;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/sanecin/78wvJ/\">http://jsfiddle.net/sanecin/78wvJ/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sanecin",
                        "user_id": 1246483
                    },
                    "score": 11
                },
                {
                    "body": "<p><a href=\"http://www.w3schools.com/cssref/css3_pr_box-align.asp\">CSS3's box-align property</a></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#outer {\n    width:100%;\n    height:100%;\n    display:box;\n    box-orient:horizontal;\n    box-pack:center;\n    box-align:center;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "neoneye",
                        "user_id": 78336
                    },
                    "score": 27
                },
                {
                    "body": "<p>If you don't want to set a fixed width and don't want the extra margin, add <code>display: inline-block</code> to your element.</p>\n\n<p>You can use:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#element {\n    display: table;\n    margin: 0 auto;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SalmanPK",
                        "user_id": 362006
                    },
                    "score": 41
                },
                {
                    "body": "<p>For Firefox &amp; Chrome:</p>\n\n<pre><code>&lt;div style=\"width:100%;\"&gt;\n    &lt;div style=\"width: 50%; margin: 0px auto;\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>For IE, Firefox &amp; Chrome:</p>\n\n<pre><code>&lt;div style=\"width:100%; text-align:center;\"&gt;\n    &lt;div style=\"width: 50%; margin: 0px auto; text-align:left;\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The <code>text-align:</code> property is optional.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ch2o",
                        "user_id": 982488
                    },
                    "score": 5
                },
                {
                    "body": "<p>Best approaches with <a href=\"http://en.wikipedia.org/wiki/Cascading_Style_Sheets\">CSS</a> 3  </p>\n\n<p><strong>box model</strong>:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#outer{\n    width:100%;\n\n    /* Firefox */\n    display:-moz-box;\n    -moz-box-pack:center;\n    -moz-box-align:center;\n\n    /* Safari and Chrome */\n    display:-webkit-box;\n    -webkit-box-pack:center;\n    -webkit-box-align:center;\n\n    /* W3C */\n    display:box;\n    box-pack:center;\n    box-align:center;\n}\n#inner{\n    width:50%;\n}\n</code></pre>\n\n<p>According to your usability you may also use the <code>box-orient, box-flex, box-direction</code> properties.</p>\n\n<p><strong>flex</strong> :</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#outer {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n}\n</code></pre>\n\n<p><strong>Here is a playground for centering elements with box model.</strong></p>\n\n<ul>\n<li><a href=\"http://flexiejs.com/playground/\">Link 1</a></li>\n</ul>\n\n<p><strong>Read more about centering the child elements</strong></p>\n\n<ul>\n<li><p><a href=\"http://www.w3.org/TR/css3-box/\">Link 2</a></p></li>\n<li><p><a href=\"http://www.w3.org/TR/CSS2/box.html\">Link 3</a></p></li>\n<li><p><a href=\"http://www.w3schools.com/cssref/css3_pr_box-align.asp\">Link 4</a></p></li>\n</ul>\n\n<p>And <strong>this explains why box model is best approach</strong>.</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2429819/why-is-the-w3c-box-model-considered-better\">Why is the W3C box model considered better?</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Konga Raju",
                        "user_id": 1307915
                    },
                    "score": 81
                },
                {
                    "body": "<p>Centering: Auto-width Margins</p>\n\n<p>This box is horizontally centered by setting its right and left margin widths to \"auto\". This is the preferred way to accomplish horizontal centering with CSS, and works very well in most browsers with CSS2 support. Unfortunately, IE5/Win does not respond to this method - a shortcoming of that browser, not the technique.</p>\n\n<p>There is a simple workaround. (A pause while you fight back the nausea induced by that word.) Ready? IE5/Win incorrectly applies the CSS \"text-align\" attribute to block-level elements. Declaring \"text-align:center\" for the containing block-level element (often the BODY element) horizontally centers the box in IE5/Win. There is a side effect of this workaround: the CSS \"text-align\" attribute is inherited, centering inline content. It is often necessary to explicitly set the \"text-align\" attribute for the centered box, counteracting the effects of the IE5/Win workaround. The relevant CSS follows.</p>\n\n<pre><code>body {\n    margin:50px 0px; padding:0px;\n    text-align:center;\n    }\n\n#Content {\n    width:500px;\n    margin:0px auto;\n    text-align:left;\n    padding:15px;\n    border:1px dashed #333;\n    background-color:#eee;\n    }\n</code></pre>\n\n<p><a href=\"http://bluerobot.com/web/css/center1.html\" rel=\"nofollow\">http://bluerobot.com/web/css/center1.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ray",
                        "user_id": 1372225
                    },
                    "score": -5
                },
                {
                    "body": "<p>The way I usually do it is with absolute positioning:</p>\n\n<pre><code>#inner{\n    left: 0;\n    right: 0;\n    margin-left: auto;\n    margin-right: auto;\n    position: absolute;\n}\n</code></pre>\n\n<p>The outer div doesn't need any extra propertites for this to work.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "william44isme",
                        "user_id": 2075466
                    },
                    "score": 8
                },
                {
                    "body": "<p>Some posters have mentioned the css3 way to center using <code>display:box</code></p>\n\n<p>This syntax is outdated and shouldn't be used anymore.[See also <a href=\"http://css-tricks.com/old-flexbox-and-new-flexbox/\">this post] \n</a>\nSo just for completeness here is the latest way to center in css3 using the <strong><a href=\"http://www.w3.org/TR/css3-flexbox/\">Flexible Box Layout Module</a></strong></p>\n\n<p>So if you have simple markup like:</p>\n\n<pre><code>&lt;div class=\"box\"&gt;\n  &lt;div class=\"item1\"&gt;A&lt;/div&gt;\n  &lt;div class=\"item2\"&gt;B&lt;/div&gt;\n  &lt;div class=\"item3\"&gt;C&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>...and you want to center your items within the box, here's what you need on the parent element (.box):</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.box {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n}\n</code></pre>\n\n<p>Here's a <a href=\"http://jsfiddle.net/danield770/La8h5/4/\">LIVE DEMO</a> to play with - [which also takes into consideration browser specific properties.] </p>\n\n<p><strong>NB:</strong> This now works in Firefox 22, but for earlier version of FF - you need to enable the flexbox runtime flag like <strong><a href=\"http://stackoverflow.com/a/16850368/703717\">this</a></strong></p>\n\n<p><a href=\"http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/\">This post</a> shows how to get maximum browser support for flexbox and explains some of the peculiar browser-specific properties needed in ie10)</p>\n\n<p>A good place to start when trying to get the syntax right for all browsers is <a href=\"http://the-echoplex.net/flexyboxes/\">here</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Danield",
                        "user_id": 703717
                    },
                    "score": 32
                },
                {
                    "body": "<p>I realize I'm pretty late to the game, but this is a very popular question, and I recently found an approach I haven't seen mentioned anywhere here, so I figured I'd document it.</p>\n\n<pre><code>#outer {\n    position: absolute;\n    left: 50%;\n}\n\n#inner {\n    position: relative;\n    left: -50%;\n}\n</code></pre>\n\n<p>EDIT: both elements must be the same width to function correctly.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BenjaminRH",
                        "user_id": 941158
                    },
                    "score": 6
                },
                {
                    "body": "<p>I have applied inline style to inner div. Use this one. </p>\n\n<pre><code>&lt;div id=\"outer\" style=\"width:100%\"&gt;  \n    &lt;div id=\"inner\" style=\"display:table;margin:0 auto;\"&gt;Foo foo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "aamirha",
                        "user_id": 949033
                    },
                    "score": 0
                },
                {
                    "body": "<p>HTML</p>\n\n<pre><code>&lt;div id=\"outerDiv\"&gt;\n    &lt;div id=\"innerDiv\"&gt;Inner Content&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre><code>#outerDiv\n{\n    width:500px;\n}\n\n#innerDiv\n{\n    width:200px;\n    margin:0 auto;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ankit Jain",
                        "user_id": 2594679
                    },
                    "score": 6
                },
                {
                    "body": "<p>I've created this <a href=\"http://codepen.io/tom-maton/pen/oqsEJ\">example</a> to show how to <strong>vertically</strong> and <strong>horizontally</strong> <code>align</code>.</p>\n\n<p>Code is basically this:</p>\n\n<pre><code>#outer {\n  position: relative;\n}\n</code></pre>\n\n<p>and...</p>\n\n<pre><code>#inner {\n  margin: auto;  \n  position: absolute;\n  left:0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n} \n</code></pre>\n\n<p>and it will stay in the <code>center</code> even when you <strong>re-size</strong> your screen</p>\n\n<p>Hope this helps</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tom Maton",
                        "user_id": 911553
                    },
                    "score": 58
                },
                {
                    "body": "<p>How about the below CSS for <code>#inner</code> div:</p>\n\n<pre><code>#inner {\n  width: 50%;\n  margin-left: 25%;\n}\n</code></pre>\n\n<p>I mostly use this CSS to center divs.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rajesh",
                        "user_id": 1114506
                    },
                    "score": 0
                },
                {
                    "body": "<p>You can do something like this</p>\n\n<pre><code>#container {\n   display: table;\n   width: &lt;width of your container&gt;;\n   height: &lt;height of your container&gt;;\n}\n\n#inner {\n   width: &lt;width of your center div&gt;;\n   display: table-cell;\n   margin: 0 auto;\n   text-align: center;\n   vertical-align: middle;\n}\n</code></pre>\n\n<p>This will also align the <code>#inner</code> vertically. If you don't want to, remove the <code>display</code> and <code>vertical-align</code> properties;</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kenneth Palaganas",
                        "user_id": 1460756
                    },
                    "score": 5
                },
                {
                    "body": "<p>Chris Coyier who wrote an <a href=\"http://css-tricks.com/centering-in-the-unknown/\">excellent post</a> on 'Centering in the Unknow' on his blog. It's a roundup of multiple solutions. I posted one that isn't posted in this question. It has more browser support then the flexbox-solution, and you're not using <code>display: table;</code> which could break other things. </p>\n\n<pre><code>/* This parent can be any width and height */\n.outer {\n  text-align: center;\n}\n\n/* The ghost, nudged to maintain perfect centering */\n.outer:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  margin-right: -0.25em; /* Adjusts for spacing */\n}\n\n/* The element to be centered, can\n   also be of any width and height */ \n.inner {\n  display: inline-block;\n  vertical-align: middle;\n  width: 300px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Willem de Wit",
                        "user_id": 1474739
                    },
                    "score": 6
                },
                {
                    "body": "<p>Nice thing I recently found, mixing the use of <code>line-height</code>+<code>vertical-align</code> and the <code>50%</code> left trick, you can <code>center</code> a dynamically sized box inside another dynamically sized box, on both the horizontal and vertical using pure CSS. </p>\n\n<p>Note you must use spans (and <code>inline-block</code>), tested in modern browsers + IE8.\n<strong>HTML:</strong></p>\n\n<pre><code>  &lt;h1&gt;Center dynamic box using only css test&lt;/h1&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"center\"&gt;\n            &lt;div class=\"center-container\"&gt;\n                &lt;span class=\"dyn-box\"&gt;\n                    &lt;div class=\"dyn-head\"&gt;This is a head&lt;/div&gt;\n                    &lt;div class=\"dyn-body\"&gt;\n                        This is a body&lt;br /&gt;\n                        Content&lt;br /&gt;\n                        Content&lt;br /&gt;\n                        Content&lt;br /&gt;\n                        Content&lt;br /&gt;\n                    &lt;/div&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS:</strong></p>\n\n<pre><code>        .container\n        {\n            position:absolute;\n            left:0;right:0;top:0;bottom:0;\n            overflow:hidden;\n        }\n        .center\n        {\n            position:absolute;\n            left:50%; top:50%;\n        }\n        .center-container\n        {\n            position:absolute;\n            left:-2500px;top:-2500px;\n            width:5000px;height:5000px;\n            line-height:5000px;\n            text-align:center;\n            overflow: hidden;\n        }\n        .dyn-box\n        {\n            display: inline-block;\n            vertical-align: middle;\n            line-height: 100%;\n\n            /* Purely asthetic below this point */\n            background: #808080;\n            padding: 13px;\n            border-radius: 11px;\n            font-family: arial;\n        }\n        .dyn-head\n        {\n            background:red;\n            color:white;\n            min-width: 300px;\n            padding: 20px;\n            font-size: 23px;\n        }\n        .dyn-body\n        {\n            padding: 10px;\n            background:white;\n            color:red;\n        }\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7mQS5/\" rel=\"nofollow\">See example here</a>. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Josh Mc",
                        "user_id": 685404
                    },
                    "score": 1
                },
                {
                    "body": "<p>Try playing around with </p>\n\n<pre><code>margin: 0 auto;\n</code></pre>\n\n<p>If you want to center your text too, try using:</p>\n\n<pre><code>text-align: center;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dennis van der Vlag",
                        "user_id": 1817972
                    },
                    "score": 3
                },
                {
                    "body": "<p>You're having two <code>div</code>s here, </p>\n\n<pre><code>&lt;div id=\"outer\" style=\"width:100%\"&gt;  \n   &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<h3>Using margins</h3>\n\n<p>You can center the child <code>div</code> relative to the parent <code>div</code> by using this basic <strong>CSS</strong> code</p>\n\n<pre><code>div#inner {\n  width: 50px;\n  margin: 0 auto;\n}\n</code></pre>\n\n<p>What this code will do is simple, it will set the <code>width</code> of the <strong>child</strong> <code>div</code> to <code>50px</code> and then set its vertical <code>margin</code> to <code>0</code> and horizontal <code>margin</code> to <code>auto</code>; browser will set this automatically. </p>\n\n<p>This way, no matter what the <strong>screen size</strong> is, the element will be at the <code>center</code> of the parent. </p>\n\n<h3>Using text-align</h3>\n\n<p>There is another way of playing with it too.</p>\n\n<p>That is the use of <code>text-align: center;</code> </p>\n\n<p>If you use </p>\n\n<pre><code>div#outer {\n   text-align: center;\n}\n</code></pre>\n\n<p>Then the child of this would be aligned at the <code>center</code> of itself. Which will always be done by browser itself; rendering it in <code>center</code>.</p>\n\n<h3>Fiddles to test this</h3>\n\n<p>Here is a <a href=\"http://jsfiddle.net/afzaal_ahmad_zeeshan/JPcE8/\" rel=\"nofollow\">fiddle</a> to test this code. </p>\n\n<p>&amp; <code>text-align</code> <a href=\"http://jsfiddle.net/afzaal_ahmad_zeeshan/JPcE8/1/\" rel=\"nofollow\">fiddle</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Afzaal Ahmad Zeeshan",
                        "user_id": 1762944
                    },
                    "score": -2
                },
                {
                    "body": "<p>one option is existed that i found\nevery body say use </p>\n\n<pre><code>margin: auto 0;\n</code></pre>\n\n<p>but there is another option\nset this property for parent div , it is anytime work perfect</p>\n\n<pre><code>text-align:center;\n</code></pre>\n\n<p>and see , child go center </p>\n\n<p>and finally css for you</p>\n\n<pre><code>#outer{\n     text-align:center;\n     display:block;/* or inline-block - base on your need*/\n}\n\n#inner\n{\n     position:relative;\n     margin:0 auto; /* it is good to be */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pnsadeghy",
                        "user_id": 2148893
                    },
                    "score": 3
                },
                {
                    "body": "<pre><code>&lt;center&gt;\n</code></pre>\n\n<p>I am spoiled with the most simple center known?</p>\n\n<pre><code>&lt;/center&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user2952495",
                        "user_id": 2952495
                    },
                    "score": 0
                },
                {
                    "body": "<p>For example see <a href=\"http://jsfiddle.net/uCdPK/\" rel=\"nofollow\">this link</a>.</p>\n\n<pre><code>&lt;div id=\"outer\" style=\"width:100%;\"&gt;  \n    &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And your css looks like this</p>\n\n<pre><code>div#outer {\n    height: 120px;\n    background-color: red;\n}\n\ndiv#inner {\n    width: 50%;\n    height: 100%;\n    background-color: green;\n    margin: 0 auto;\n    text-align:center; /* For Text alignment to center horizentaly. */\n    line-height: 120px; /* For Text alignment to center verticaly. */\n}\n</code></pre>\n\n<p>If you have a lot of children under a parent, so your css must be like this <a href=\"http://jsfiddle.net/uCdPK/2/\" rel=\"nofollow\">example on fiddle</a>. </p>\n\n<p>Html look likes this </p>\n\n<pre><code>&lt;div id=\"outer\" style=\"width:100%;\"&gt;  \n    &lt;div class=\"inner\"&gt; Foo Text &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; Foo Text &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; Foo Text &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; &lt;/div&gt;\n    &lt;div class=\"inner\"&gt; Foo Text &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then see this <a href=\"http://jsfiddle.net/uCdPK/2/\" rel=\"nofollow\">example on fiddle</a>. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lalit",
                        "user_id": 1637683
                    },
                    "score": 4
                },
                {
                    "body": "<p>If width of the content is unknown, you can use the following method that requires one extra element. Suppose we have these two elements:</p>\n\n<ul>\n<li>outer (100% wide, suppose it is 1000px wide)</li>\n<li>inner (no width defined, suppose it is 300px wide)</li>\n</ul>\n\n<p>Proceed as follows:</p>\n\n<ol>\n<li>Wrap <strong>inner</strong> inside <strong>center-helper</strong></li>\n<li>Float <strong>center-helper</strong>; it becomes same size as <strong>inner</strong> (this makes it 300px wide)</li>\n<li>Push <strong>center-helper</strong> 50% right relative to its parent (this places its left at 500px wrt. outer)</li>\n<li>Pull <strong>inner</strong> 50% left relative to its parent (this places its left at -150px wrt. center-helper which means its left is at 500 - 150 = 350px wrt. outer)</li>\n<li>Set overflow on outer to hidden</li>\n</ol>\n\n<p>Here is the CSS:</p>\n\n<pre><code>.outer {\n    overflow: hidden;\n}\n.center-helper {\n    float: left;\n    position: relative;\n    left: 50%;\n}\n.inner {\n    float: left;\n    position: relative;\n    left: -50%;\n}\n</code></pre>\n\n<p>And <a href=\"http://jsfiddle.net/salman/c7fqj/\" rel=\"nofollow\">here is the demo</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Salman A",
                        "user_id": 87015
                    },
                    "score": 1
                },
                {
                    "body": "<p>Here is what you want in the shortest way. </p>\n\n<p><a href=\"http://jsfiddle.net/8qYcn/\" rel=\"nofollow\">http://jsfiddle.net/8qYcn/</a></p>\n\n<pre><code>#outer{\nmargin-top:100px;\nheight:500px; /* you can set whatever you want */\nborder:1px solid #ccc;\n}\n\n#inner{\nborder:1px solid #f00;\nposition:relative;\ntop: 50%; \ntransform: translateY(-50%); \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "caniz",
                        "user_id": 3178923
                    },
                    "score": 4
                },
                {
                    "body": "<p>Well, I managed to find a solution that maybe will fit all situations, but uses javascript:</p>\n\n<p>Here's the structure:</p>\n\n<pre><code>&lt;div class=\"container\"&gt;\n  &lt;div class=\"content\"&gt;Your content goes here!&lt;/div&gt;\n  &lt;div class=\"content\"&gt;Your content goes here!&lt;/div&gt;\n  &lt;div class=\"content\"&gt;Your content goes here!&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And here's the javascript snippet:</p>\n\n<pre><code>$(document).ready(function() {\n  $('.container .content').each( function() {\n    container = $(this).closest('.container');\n    content = $(this);\n\n    containerHeight = container.height();\n    contentHeight = content.height();\n\n    margin = (containerHeight - contentHeight) / 2;\n    content.css('margin-top', margin);\n  })\n});\n</code></pre>\n\n<p>If you want to use it in a responsive approach, you can add the following:</p>\n\n<pre><code>$(window).resize(function() {\n  $('.container .content').each( function() {\n    container = $(this).closest('.container');\n    content = $(this);\n\n    containerHeight = container.height();\n    contentHeight = content.height();\n\n    margin = (containerHeight - contentHeight) / 2;\n    content.css('margin-top', margin);\n  })\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Miguel Leite",
                        "user_id": 1732465
                    },
                    "score": 5
                },
                {
                    "body": "<p>I know I'm a bit late to answering this question, and I haven't bothered to read every single answer so this <em>may</em> be a duplicate. <a href=\"http://jsfiddle.net/spikey/FLL5Z/\" rel=\"nofollow\">Here's my take</a>:</p>\n\n<pre><code>inner { width: 50%; background-color: Khaki; margin: 0 auto; }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "delete this account",
                        "user_id": 2645707
                    },
                    "score": 0
                },
                {
                    "body": "<h2>Centering a div of unknown height and width</h2>\n\n<p>Horizontally and vertically. Works with reasonably modern browsers (FF, Safari/Webkit, Chrome, IE10, Opera, etc.)</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"content\"&gt;This works with any content&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>.content {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n}\n</code></pre>\n\n<p>Tinker with it further on <a href=\"http://codepen.io/storypixel/pen/Dbdiq\" rel=\"nofollow\">Codepen</a> or on <a href=\"http://jsbin.com/zureq/1\" rel=\"nofollow\">JSBin</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "iamnotsam",
                        "user_id": 362477
                    },
                    "score": 3
                },
                {
                    "body": "<p>Set <strong>margin: 0 auto;</strong>  will position your Div at the center of outer div element.</p>\n\n<pre><code>.outer\n{\n    width:100%;\n}\n\n.inner\n{\n    width:80%;\n    margin: 0 auto;\n\n}\n</code></pre>\n\n<p><strong>margin: 0 auto;</strong></p>\n\n<p>is same as</p>\n\n<pre><code>margin-top:0;\nmargin-right:auto;\nmargin-bottom:0;\nmargin-left:auto;\n</code></pre>\n\n<p>Or</p>\n\n<p>you can set align=\"center\" will center your inner div at he center of outer div</p>\n\n<pre><code>&lt;div id=\"outer\" style=\"width:100%\" align=\"center\"&gt;  \n    &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>If you want your div position horizondally and vertically at the center of the screen, use the following code</p>\n\n<pre><code>.exactCenter {\n    width:200px;\n    height:200px;\n    position: fixed;\n    background-color: #00FF00;\n    top: 50%;\n    left: 50%;\n    margin-top: -100px;\n    margin-left: -100px;\n}\n</code></pre>\n\n<p>More about Div positioning....<a href=\"http://www.corelangs.com/css/box/center-div.html\" rel=\"nofollow\">Div on center</a></p>\n\n<p>George</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mc George",
                        "user_id": 3651783
                    },
                    "score": 2
                },
                {
                    "body": "<p>try this:</p>\n\n<pre><code>&lt;div id=\"a\"&gt;\n    &lt;div id=\"b\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>css:</p>\n\n<pre><code>#a{\n   border:1px solid red;\n   height:120px;\n   width: 400px\n}\n\n#b{\n   border:1px solid blue;\n   height:90px;\n   width: 300px;\n   position:relative;\n   margin-left:auto;  \n   margin-right:auto;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "hossein",
                        "user_id": 2757573
                    },
                    "score": 0
                },
                {
                    "body": "<p>The easiest way:</p>\n\n<pre><code>&lt;div id=\"outer\"&gt;\n    &lt;div id=\"inner\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n    #outer {\n        width:100%;\n        text-align:center;\n    }\n    #inner {\n        margin:auto;\n        width:200px;\n    }\n&lt;/style&gt;\n</code></pre>\n\n<p>Fiddle:\n<a href=\"http://jsfiddle.net/joan16v/fnaqakdn/\" rel=\"nofollow\">http://jsfiddle.net/joan16v/fnaqakdn/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "joan16v",
                        "user_id": 1398876
                    },
                    "score": 3
                },
                {
                    "body": "<p>try this...</p>\n\n<pre><code>&lt;div id=outer&gt;\n    &lt;div id=inner&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n\n#outer{\n    position:fixed;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n#inner{\n    width: 50%;\n    height: 50%;\n    top: 25%;\n    margin: 0 auto;\n    position: relative;\n    background:orange;\n}\n</code></pre>\n\n<p>Full Source....<a href=\"http://www.corelangs.com/css/box/divindiv.html\" rel=\"nofollow\">center a div in a div</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mc George",
                        "user_id": 3651783
                    },
                    "score": 0
                },
                {
                    "body": "<p>i just use the simplest solution but it works in all browsers.</p>\n\n<pre><code>  &lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\"&gt;\n&lt;title&gt;center a div within a div?&lt;/title&gt;\n&lt;style type=\"text/css\"&gt;\n*{\n    margin: 0;\n    padding: 0;\n}\n\n#outer{\n    width: 80%;\n    height: 500px;\n    background-color: #003;\n    margin: 0 auto;\n}\n\n#outer p{\n    color: #FFF;\n    text-align: center;\n}\n\n#inner{\n    background-color: #901;\n    width: 50%;\n    height: 100px;\n    margin: 0 auto;\n\n    }\n\n    #inner p{\n        color: #fff;\n        text-align: center;\n    }\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div id=\"outer\"&gt;&lt;p&gt;this is the outer div&lt;/p&gt;\n    &lt;div id=\"inner\"&gt;\n        &lt;p&gt;this is the inner div&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>i hope this helps!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gerald Goshorn",
                        "user_id": 4056805
                    },
                    "score": 0
                },
                {
                    "body": "<p>If Anyone would like a Jquery for center align these divs</p>\n\n<pre><code>$(window).bind(\"load\", function() {\n        var wwidth = $(\"#outer\").width();\n        var width = $('#inner').width();\n        $('#inner').attr(\"style\",\"padding-left: \"+wwidth/2+\"px; margin-left: -\"+width/2+\"px;\");\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sarath Mohan",
                        "user_id": 2614847
                    },
                    "score": 0
                },
                {
                    "body": "<p>First of all: You need to give a width to the second div:\nFor example:\nHTML</p>\n\n<pre><code>&lt;div id=\"outter\"&gt;\n &lt;div id=\"inner\"Centered content\"&gt;\n&lt;/div\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code> #inner{\n  width:50%;\n  margin:auto;\n}\n</code></pre>\n\n<p>Note that if you don't give it a width it will take the whole width of the line</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user3968801"
                    },
                    "score": 0
                },
                {
                    "body": "<p>Instead of multiple wrappers and/or auto margins, this simple solution works for me:</p>\n\n<pre><code>&lt;div style=\"top:50%; left:50%;\n    height:100px; width:100px;\n    margin-top:-50px; margin-left:-50px;\n    background:url('lib/loading.gif') no-repeat center #fff;\n    text-align:center;\n    position:fixed; z-index:9002;\"&gt;Loading...&lt;/div&gt;\n</code></pre>\n\n<p>Puts the div at the center of the view (vertical and horizontal), sizes and adjusts for size, centers background image (vertical and horizontal), centers text (horizontal), and keeps div in the view and on top of the content. Simply place in html body and enjoy.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Cees Timmerman",
                        "user_id": 819417
                    },
                    "score": 0
                },
                {
                    "body": "<p>Another solution for this without having to set a width for one of the elements is using the CSS3 <code>transform</code> attribute. </p>\n\n<pre><code>#outer {\n  position: relative;\n}\n\n#inner {\n  position: absolute;\n  left: 50%;\n\n  transform: translateX(-50%);\n}\n</code></pre>\n\n<p>The trick ist, that <code>translateX(-50%)</code> sets the <code>#inner</code> element 50 percent to the left of its own width. You can use the same trick for vertical alignment.</p>\n\n<p>Here's a <a href=\"http://jsfiddle.net/bfedqjz4/\" rel=\"nofollow\" title=\"Fiddle\"><strong>Fiddle</strong></a> showing horizontal and vertical alignment.</p>\n\n<p>More information on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform\" rel=\"nofollow\" title=\"MDN\">Mozilla Developer Network</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kilian Stinson",
                        "user_id": 2345972
                    },
                    "score": 0
                }
            ],
            "body": "<p>How can I horizontally center a <code>div</code> within a <code>div</code> using CSS (if it's even possible)? </p>\n\n<p>The outer <code>div</code> has 100% width:</p>\n\n<pre><code>&lt;div id=\"outer\" style=\"width:100%\"&gt;  \n    &lt;div id=\"inner\"&gt;Foo foo&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1426888697,
            "owner": {
                "display_name": "Lukas",
                "user_id": 20403
            },
            "question_id": 114543,
            "score": 1521,
            "tags": [
                "html",
                "css",
                "alignment"
            ],
            "title": "Horizontally center a div in a div"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Although they are rendered by browsers through CSS as if they were like other real DOM elements, pseudo-elements themselves are not part of the DOM, and thus you can't select and manipulate them directly with jQuery (or <em>any</em> JavaScript APIs for that matter, not even the <a href=\"http://www.w3.org/TR/selectors-api\">Selectors API</a>).</p>\n\n<p>You can always find other ways around it, though, for example:</p>\n\n<ul>\n<li>Manipulating the styles being applied to said pseudo-elements, by altering the document stylesheet</li>\n<li>Applying the styles to the pseudo-elements of one or more arbitrary classes, then toggling between classes using jQuery (see <a href=\"http://stackoverflow.com/questions/5041494/manipulating-css-pseudo-elements-using-jquery-e-g-before-and-after/5335771#5335771\">seucolega's answer</a> for a quick example)</li>\n</ul>\n\n<p>But you still can't access them directly as ultimately they're only visible to the rendering engine, and not available through any scripting APIs (except possibly the CSSOM, which is not exposed by jQuery beyond <code>.css()</code> which only works for actual elements and not pseudo-elements either).</p>\n\n<p>This applies to any pseudo-elements whose styles you're trying to modify with jQuery, and not just <code>:before</code> and <code>:after</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BoltClock",
                        "user_id": 106224
                    },
                    "score": 98
                },
                {
                    "body": "<p>You can't select pseudo elements in jQuery because they are not part of DOM.\nBut you can add an specific class to the father element and control its pseudo elements in CSS.</p>\n\n<p><a href=\"http://jsfiddle.net/1dw7h4s3/\" rel=\"nofollow\">EXAMPLE</a></p>\n\n<p>In jQuery:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $('span').addClass('change');\n&lt;/script&gt;\n</code></pre>\n\n<p>In CSS:</p>\n\n<pre><code>span.change:after { content: 'bar' }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "seucolega",
                        "user_id": 569172
                    },
                    "score": 50
                },
                {
                    "body": "<p>You could also pass the content to the pseudo element with a data attribute and then use jQuery to manipulate that:</p>\n\n<p>In HTML:</p>\n\n<pre><code>&lt;span&gt;foo&lt;/span&gt;\n</code></pre>\n\n<p>In jQuery:</p>\n\n<pre><code>&lt;script&gt;\n$('span').hover(function(){\n    $(this).attr('data-content','bar');\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>In CSS: </p>\n\n<pre><code>span:after {\ncontent: attr(data-content) ' any other text you may want';\n}\n</code></pre>\n\n<p>If you want to prevent the 'other text' from showing up, you could combine this with seucolega's solution like this:</p>\n\n<p>In HTML:</p>\n\n<pre><code>&lt;span&gt;foo&lt;/span&gt;\n</code></pre>\n\n<p>In jQuery:</p>\n\n<pre><code>&lt;script&gt;\n$('span').hover(function(){\n    $(this).addClass('change').attr('data-content','bar');\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>In CSS: </p>\n\n<pre class=\"lang-css prettyprint-override\"><code>span.change:after {\n    content: attr(data-content) ' any other text you may want';\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Nick Kline",
                        "user_id": 2108250
                    },
                    "score": 261
                },
                {
                    "body": "<p>one working but not very efficient way is to add a rule to the document with the new content and reference it with a class. depending on what is needed the class might need an unique id for each value in content.</p>\n\n<pre><code>$(\"&lt;style type='text/css'&gt;span.id-after:after{content:bar;}&lt;/style&gt;\").appendTo($(\"head\"));\n$('span').addClass('id-after');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Christian",
                        "user_id": 178597
                    },
                    "score": 0
                },
                {
                    "body": "<p>In the line of what Christian suggests, you could also do:</p>\n\n<pre><code>$('head').append(\"&lt;style&gt;.span::after{ content:'bar' }&lt;/style&gt;\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ivan Chaer",
                        "user_id": 1204332
                    },
                    "score": 15
                },
                {
                    "body": "<p>I've answered this question <a href=\"http://stackoverflow.com/a/16507264/1250044\">here</a> already, but to be super-cool I'll repeat myself for you.</p>\n\n<p>The answer should be <em>Yes &amp; No</em>. You can not select an element via pseudo-selector, but you can add a new rule to your stylesheet with javascript.</p>\n\n<p>I made something that should work for you:</p>\n\n<pre><code>var addRule = function(sheet, selector, styles) {\n    if (sheet.insertRule) return sheet.insertRule(selector + \" {\" + styles + \"}\", sheet.cssRules.length);\n    if (sheet.addRule) return sheet.addRule(selector, styles);\n};\n\naddRule(document.styleSheets[0], \"body:after\", \"content: 'foo'\");\n</code></pre>\n\n<p><a href=\"http://fiddle.jshell.net/MDyxg/1/\" rel=\"nofollow\">http://fiddle.jshell.net/MDyxg/1/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "yckart",
                        "user_id": 1250044
                    },
                    "score": 1
                },
                {
                    "body": "<p>You'd think this would be a simple question to answer, with everything else that jQuery can do. Unfortunately, the problem comes down to a technical issue: <strong><em>css :after and :before rules aren't part of the DOM,</em></strong> and therefore can't be altered using jQuery's DOM methods.</p>\n\n<p>There <em>are</em> ways to manipulate these elements using JavaScript and/or CSS workarounds; which one you use depends on your exact requirements.</p>\n\n<hr>\n\n<p>I'm going to start with what's widely considered the \"best\" approach:</p>\n\n<h2>1) Add/remove a predetermined class</h2>\n\n<p>In this approach, you've already created a class in your CSS with a different <code>:after</code> or <code>:before</code> style. Place this \"new\" class later in your stylesheet to make sure it overrides:</p>\n\n<pre><code>p:before {\n    content: \"foo\";\n}\np.special:before {\n    content: \"bar\";\n}\n</code></pre>\n\n<p>Then you can easily add or remove this class using jQuery (or vanilla JavaScript):</p>\n\n<pre><code>$('p').on('click', function() {\n    $(this).toggleClass('special');\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/fa5Wn/\">http://jsfiddle.net/mblase75/fa5Wn/</a></p>\n\n<ul>\n<li><strong>Pros:</strong> Easy to implement with jQuery; quickly alters multiple styles at once; enforces separation of concerns (isolating your CSS and JS from your HTML)</li>\n<li><strong>Cons:</strong> CSS must be pre-written, so the content of <code>:before</code> or <code>:after</code> isn't completely dynamic</li>\n</ul>\n\n<hr>\n\n<h2>2) Add new styles directly to the document's stylesheet</h2>\n\n<p>It's possible to use JavaScript to add styles directly to the document stylesheet, including <code>:after</code> and <code>:before</code> styles. jQuery doesn't provide a convenient shortcut, but fortunately the JS isn't that complicated:</p>\n\n<pre><code>var str = \"bar\";\ndocument.styleSheets[0].addRule('p.special:before','content: \"'+str+'\";');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/n8tVX/\">http://jsfiddle.net/mblase75/n8tVX/</a></p>\n\n<p><a href=\"http://davidwalsh.name/add-rules-stylesheets\"><code>.addRule()</code> and the related <code>.insertRule()</code> methods</a> are fairly well-supported today. </p>\n\n<p>As a variation, you can also use jQuery to add an entirely new stylesheet to the document, but the necessary code isn't any cleaner:</p>\n\n<pre><code>var str = \"bar\";\n$('&lt;style&gt;p.special:before{content:\"'+str+'\"}&lt;/style&gt;').appendTo('head');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/3qc4k/\">http://jsfiddle.net/mblase75/3qc4k/</a></p>\n\n<p>If we're talking about \"manipulating\" the values, not just adding to them, we can also <a href=\"http://davidwalsh.name/pseudo-element\"><em>read</em> the existing <code>:after</code> or <code>:before</code> styles</a> using a different approach:</p>\n\n<pre><code>var str = window.getComputedStyle(document.querySelector('p'), ':before') \n           .getPropertyValue('content');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/nHCM6/\">http://jsfiddle.net/mblase75/nHCM6/</a></p>\n\n<p>We can replace <code>document.querySelector('p')</code> with <a href=\"http://api.jquery.com/get/\"><code>$('p')[0]</code></a> when using jQuery, for slightly shorter code.</p>\n\n<ul>\n<li><strong>Pros:</strong> any string can be dynamically inserted into the style</li>\n<li><strong>Cons:</strong> original styles aren't altered, just overridden; repeated (ab)use can make the DOM grow arbitrarily large</li>\n</ul>\n\n<hr>\n\n<h2>3) Alter a different DOM attribute</h2>\n\n<p>Most browsers allow you to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/attr\">use <code>attr()</code> in your CSS</a> to read a particular DOM attribute. By combining this with <code>content:</code> in some carefully-prepared CSS, we can change the content (but <strong><em>not other properties,</em></strong> like margin or color) of <code>:before</code> and <code>:after</code> dynamically:</p>\n\n<pre><code>p:before {\n    content: attr(data-before);\n    color: red;\n    cursor: pointer;\n}\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$('p').on('click', function () {\n    $(this).attr('data-before','bar');\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/Tfc9j/\">http://jsfiddle.net/mblase75/Tfc9j/</a></p>\n\n<p>This can be combined with the second technique if the CSS can't be prepared ahead of time:</p>\n\n<pre><code>var str = \"bar\";\n\ndocument.styleSheets[0].addRule('p:before', 'content: attr(data-before);');\n\n$('p').on('click', function () {\n    $(this).attr('data-before', str);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/Lfba2/\">http://jsfiddle.net/mblase75/Lfba2/</a></p>\n\n<ul>\n<li><strong>Pros:</strong> Doesn't create endless extra styles</li>\n<li><strong>Cons:</strong> <code>attr</code> in CSS can only apply to content strings, not URLs or RGB colors</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Blazemonger",
                        "user_id": 901048
                    },
                    "score": 73
                },
                {
                    "body": "<p>Here is the HTML:</p>\n\n<pre><code>&lt;div class=\"icon\"&gt;\n  &lt;span class=\"play\"&gt;\n    ::before\n  &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Computed style on 'before' was <code>content: \"VERIFY TO WATCH\";</code></p>\n\n<p>Here is my two lines of jQuery, which use the idea of adding an extra class to specifically reference this element and then appending a style tag (with an !important tag) to changes the CSS of the sudo-element's content value:</p>\n\n<p><code>$(\"span.play:eq(0)\").addClass('G');</code></p>\n\n<p><code>$('body').append(\"&lt;style&gt;.G:before{content:'NewText' !important}&lt;/style&gt;\");</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Coyote",
                        "user_id": 3435409
                    },
                    "score": 1
                },
                {
                    "body": "<p>IF you want to to manipulate the ::before or ::after sudo elements entirely through CSS, you could do it JS. See below;</p>\n\n<pre><code>jQuery('head').append('&lt;style id=\"mystyle\" type=\"text/css\"&gt; /* your styles here */ &lt;/style&gt;');\n</code></pre>\n\n<p>Notice how the <code>&lt;style&gt;</code> element has an ID, which you can use to remove it and append to it again if your style changes dynamically.</p>\n\n<p>This way, your element is style exactly how you want it through CSS, with the help of JS.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user595349"
                    },
                    "score": 2
                },
                {
                    "body": "<p>Thank you all!\ni managed to do what i wanted :D\n<a href=\"http://jsfiddle.net/Tfc9j/42/\" rel=\"nofollow\">http://jsfiddle.net/Tfc9j/42/</a>\nhere take a look</p>\n\n<p>i wanted to have the opacity of an outer div to be different from the opacity of the internal div and that change with a click somwewhere ;)\nThanks!</p>\n\n<pre><code>   $('#ena').on('click', function () {\n        $('head').append(\"&lt;style&gt;#ena:before { opacity:0.3; }&lt;/style&gt;\");\n    });\n\n$('#duop').on('click', function (e) {\n\n        $('head').append(\"&lt;style&gt;#ena:before { opacity:0.8; }&lt;/style&gt;\");\n\n     e.stopPropagation(); \n    });\n\n#ena{\n    width:300px;\n    height:300px;\n    border:1px black solid;\n    position:relative;\n}\n#duo{\n    opacity:1;\n    position:absolute;\n    top:50px;\n  width:300px;\n    height:100px;\n      background-color:white;\n}\n#ena:before {\n    content: attr(data-before);\n    color: white;\n    cursor: pointer;\n    position: absolute;\n    background-color:red;\n    opacity:0.9;\n    width:100%;\n    height:100%;\n}\n\n\n&lt;div id=\"ena\"&gt;\n    &lt;div id=\"duo\"&gt;\n        &lt;p&gt;ena p&lt;/p&gt;\n        &lt;p id=\"duop\"&gt;duoyyyyyyyyyyyyyy p&lt;/p&gt;\n\n    &lt;/div&gt;   \n\n\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "aimiliano",
                        "user_id": 2761599
                    },
                    "score": 1
                },
                {
                    "body": "<p>Here is the way to access :after and :before style properties, defined in css:</p>\n\n<pre><code>// Get the color value of .element:before\nvar color = window.getComputedStyle(\n    document.querySelector('.element'), ':before'\n).getPropertyValue('color');\n\n// Get the content value of .element:before\nvar content = window.getComputedStyle(\n    document.querySelector('.element'), ':before'\n).getPropertyValue('content');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nedudi",
                        "user_id": 890850
                    },
                    "score": 2
                },
                {
                    "body": "<p>You may create a fake property or use an existing one and <strong>inherit</strong> it in the pseudo-element's stylesheet.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var switched = false;\r\n\r\n// Enable color switching\r\nsetInterval(function () {\r\n    var color = switched ? 'red' : 'darkred';\r\n    var element = document.getElementById('arrow');\r\n    element.style.backgroundColor = color;\r\n    \r\n    // Managing pseudo-element's css\r\n    // using inheritance.\r\n    element.style.borderLeftColor = color;\r\n    \r\n    switched = !switched;\r\n}, 1000);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.arrow {\r\n    /* SET FICTIONAL PROPERTY */\r\n    border-left-color:red;\r\n    \r\n    background-color:red;\r\n    width:1em;\r\n    height:1em;\r\n    display:inline-block;\r\n    position:relative;\r\n}\r\n.arrow:after {\r\n    border-top:1em solid transparent;\r\n    border-right:1em solid transparent;\r\n    border-bottom:1em solid transparent;\r\n    border-left:1em solid transparent;\r\n    \r\n    /* INHERIT PROPERTY */\r\n    border-left-color:inherit;\r\n    \r\n    content:\"\";\r\n    width:0;\r\n    height:0;\r\n    position:absolute;\r\n    left:100%;\r\n    top:-50%;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;span id=\"arrow\" class=\"arrow\"&gt;&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It seems it doesn't work for \"content\" property :(</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alexander Shutov",
                        "user_id": 4137472
                    },
                    "score": 0
                }
            ],
            "body": "<p>Is there any way to select/manipulate CSS pseudo-elements such as <code>:before</code> and <code>:after</code> using jQuery?</p>\n\n<p>For example, my stylesheet has a rule stating...</p>\n\n<pre><code>.span:after{ content:'foo' }\n</code></pre>\n\n<p>How can I change 'foo' to 'bar' using jQuery?</p>\n",
            "last_activity_date": 1417604833,
            "owner": {
                "display_name": "JBradwell",
                "user_id": 580527
            },
            "question_id": 5041494,
            "score": 260,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "css",
                "pseudo-element"
            ],
            "title": "Manipulating CSS pseudo-elements such as :before and :after using jQuery"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>Until CSS 3's <a href=\"http://www.w3.org/TR/1999/WD-css3-userint-19990916#user-select\">user-select</a> property becomes available only <a href=\"http://en.wikipedia.org/wiki/Gecko_%28layout_engine%29\">Gecko</a> based browsers will support the <code>-moz-user-select</code> property you already found.</p>\n\n<p>This of course is not supported in browsers that do not use the Gecko rendering engine.</p>\n\n<p>There is no \"standards\" compliant quick and easy way to do it; using JavaScript is an option.</p>\n\n<p>The real question is, why do you want users to not be able to highlight and presumably copy and paste certain elements? I have not come across a single time that I wanted to not let users highlight a certain portion of my website. Several of my friends, after spending many hours reading and writing code will use the highlight feature as a way to remember where on the page they were, or providing a marker so that their eyes know where to look next.</p>\n\n<p>The only place I could see this being useful is if you have buttons for forms that should not be copy and pasted if a user copy and pasted the website.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "X-Istence",
                        "user_id": 13986
                    },
                    "score": 43
                },
                {
                    "body": "<p>Aside from the Mozilla-only property, no, there is no way to disable text selection with just standard CSS (as of now).</p>\n\n<p>If you notice, Stack Overflow doesn't disable text selection for their navigation buttons, and I would recommend against doing so in most cases, since it modifies normal selection behavior and makes it conflict with a user's expectations.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "htw",
                        "user_id": 90155
                    },
                    "score": 14
                },
                {
                    "body": "<p>You can do so in Firefox and Safari (Chrome also?)</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>::selection { background: transparent; }\n::-moz-selection { background: transparent; }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "seanmonstar",
                        "user_id": 101059
                    },
                    "score": 46
                },
                {
                    "body": "<p>A JavaScript solution for IE is</p>\n\n<pre><code>onselectstart=\"return false;\"\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Pekka \uc6c3",
                        "user_id": 187606
                    },
                    "score": 70
                },
                {
                    "body": "<p>In most browsers, this can be achieved using proprietary variations on the <a href=\"http://www.w3.org/TR/2000/WD-css3-userint-20000216#user-select\">proposed-but-now-defunct CSS3 <code>user-select</code> property</a>:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>*.unselectable {\n   -moz-user-select: none;\n   -khtml-user-select: none;\n   -webkit-user-select: none;\n\n   /*\n     Introduced in IE 10.\n     See http://ie.microsoft.com/testdrive/HTML5/msUserSelect/\n   */\n   -ms-user-select: none;\n   user-select: none;\n}\n</code></pre>\n\n<p>For IE &lt; 10 and Opera, you will need to use the <code>unselectable</code> attribute of the element you wish to be unselectable. You can set this using an attribute in HTML:</p>\n\n<pre><code>&lt;div id=\"foo\" unselectable=\"on\" class=\"unselectable\"&gt;...&lt;/div&gt;\n</code></pre>\n\n<p>Sadly this property isn't inherited, meaning you have to put an attribute in the start tag of every element inside the <code>&lt;div&gt;</code>. If this is a problem, you could instead use JavaScript to do this recursively for an element's descendants:</p>\n\n<pre><code>function makeUnselectable(node) {\n    if (node.nodeType == 1) {\n        node.setAttribute(\"unselectable\", \"on\");\n    }\n    var child = node.firstChild;\n    while (child) {\n        makeUnselectable(child);\n        child = child.nextSibling;\n    }\n}\n\nmakeUnselectable(document.getElementById(\"foo\"));\n</code></pre>\n\n<hr>\n\n<p><strong>Update 30 April 2014</strong>: This tree traversal needs to be re-run whenever a new element is added to the tree, but it seems from a comment by @Han that it is possible to avoid this by\nadding a <code>mousedown</code> event handler that sets <code>unselectable</code> on the target of the event. See <a href=\"http://jsbin.com/yagekiji/1\">http://jsbin.com/yagekiji/1</a> for details.</p>\n\n<hr>\n\n<p>This still doesn't cover all possibilities. While it is impossible to initiate selections in unselectable elements, in some browsers (IE and Firefox, for example) it's still impossible to prevent selections that start before and end after the unselectable element without making the whole document unselectable.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tim Down",
                        "user_id": 96100
                    },
                    "score": 401
                },
                {
                    "body": "<p>All of the correct CSS variations are:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.noselect {\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;\r\n  Selectable text.\r\n&lt;/p&gt;\r\n&lt;p class=\"noselect\"&gt;\r\n  Unselectable text.\r\n&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>More information can be found <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/user-select?redirectlocale=en-US&amp;redirectslug=CSS/user-select\">here</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Blowsie",
                        "user_id": 370286
                    },
                    "score": 3420
                },
                {
                    "body": "<p>If you want to disable text selection on everything except on <code>&lt;p&gt;</code> elements, you can do this in CSS (watch out for the <code>-moz-none</code> which allows override in sub-elements, which is allowed in other browsers with <code>none</code>):</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>* {\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: -moz-none;\n    -o-user-select: none;\n    user-select: none;\n}\n\np {\n    -webkit-user-select: text;\n    -khtml-user-select: text;\n    -moz-user-select: text;\n    -o-user-select: text;\n    user-select: text;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pinouchon",
                        "user_id": 311744
                    },
                    "score": 54
                },
                {
                    "body": "<p>Workaround for <a href=\"http://en.wikipedia.org/wiki/WebKit\">WebKit</a>:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>/* Disable tap highlighting */\n-webkit-tap-highlight-color: rgba(0,0,0,0);\n</code></pre>\n\n<p>I found it in a CardFlip example.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alex",
                        "user_id": 885686
                    },
                    "score": 31
                },
                {
                    "body": "<p>I like the hybrid CSS + jQuery solution.</p>\n\n<p>To make all elements inside <code>&lt;div class=\"draggable\"&gt;&lt;/div&gt;</code> unselectable, use this CSS:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.draggable {\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -o-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.draggable input { \n    -webkit-user-select: text; \n    -khtml-user-select: text; \n    -moz-user-select: text; \n    -o-user-select: text; \n    user-select: text; \n }\n</code></pre>\n\n<p>And then, if you're using jQuery, add this inside a <code>$(document).ready()</code> block:</p>\n\n<pre><code>if (($.browser.msie &amp;&amp; $.browser.version &lt; 10) || $.browser.opera) $('.draggable').find(':not(input)').attr('unselectable', 'on');\n</code></pre>\n\n<p>I figure you still want any input elements to be interactable, hence the <code>:not()</code> pseudo-selector. You could use <code>'*'</code> instead if you don't care.</p>\n\n<p>Caveat: IE9 may not need this extra jQuery piece, so you may want to add a version check in there.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tom Auger",
                        "user_id": 467386
                    },
                    "score": 27
                },
                {
                    "body": "<p>If you are using LESS and bootstrap you could write</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.user-select(none);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Codler",
                        "user_id": 304894
                    },
                    "score": 15
                },
                {
                    "body": "<pre class=\"lang-css prettyprint-override\"><code>-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-o-user-select: none;\nuser-select: none;\n\n*.unselectable {\n   -moz-user-select: -moz-none;\n   -khtml-user-select: none;\n   -webkit-user-select: none;\n   user-select: none;\n}\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div id=\"foo\" unselectable=\"on\" class=\"unselectable\"&gt;...&lt;/div&gt;\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>function makeUnselectable(node) {\n    if (node.nodeType == 1) {\n        node.unselectable = true;\n    }\n    var child = node.firstChild;\n    while (child) {\n        makeUnselectable(child);\n        child = child.nextSibling;\n    }\n}\n\nmakeUnselectable(document.getElementById(\"foo\"));\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>-webkit-user-select:none;\n-moz-user-select:none;\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>onselectstart=\"return false;\"\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>::selection { background: transparent; }\n::-moz-selection { background: transparent; }\n\n* {\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: -moz-none;\n-o-user-select: none;\nuser-select: none;\n}\n\np {\n-webkit-user-select: text;\n-khtml-user-select: text;\n-moz-user-select: text;\n-o-user-select: text;\nuser-select: text;\n}\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"draggable\"&gt;&lt;/div&gt;\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>.draggable {\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n}\n\n.draggable input { \n    -webkit-user-select: text; \n    -khtml-user-select: text; \n    -moz-user-select: text; \n    -o-user-select: text; \n    user-select: text; \n }\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>if ($.browser.msie) $('.draggable').find(':not(input)').attr('unselectable', 'on');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gaurang",
                        "user_id": 1453858
                    },
                    "score": 21
                },
                {
                    "body": "<p>Add this to the first div in which you want to disable the selection for text:</p>\n\n<pre><code>onmousedown='return false;' \nonselectstart='return false;'\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chase1986",
                        "user_id": 1716164
                    },
                    "score": 11
                },
                {
                    "body": "<p>This will be useful if color selection is also not needed.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>::-moz-selection { background:none; color:none; }\n::selection { background:none; color:none; }\n</code></pre>\n\n<p>..all other browser fixes. will work in ie9 +</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "karthipan raj",
                        "user_id": 2027885
                    },
                    "score": 6
                },
                {
                    "body": "<p>This is not CSS, but it is worth a mention:</p>\n\n<p><a href=\"http://api.jqueryui.com/disableSelection/\">jQuery UI Disable Selection</a>:</p>\n\n<pre><code>$(\"your.selector\").disableSelection();\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Cort3z",
                        "user_id": 741850
                    },
                    "score": 9
                },
                {
                    "body": "<pre class=\"lang-css prettyprint-override\"><code>.hidden:after {\n    content: attr(data-txt);\n}\n</code></pre>\n\n<p>And in HTML:</p>\n\n<pre><code>&lt;p class=\"hidden\" data-txt=\"Some text you don't want to be selected\"&gt;&lt;/p&gt;\n</code></pre>\n\n<p>It's not the best way, though. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ale",
                        "user_id": 1593459
                    },
                    "score": 15
                },
                {
                    "body": "<p>For Internet Explorer in addition, you need to add <strong>pseudo class focus</strong> (.ClassName:focus) and <strong>outline-style:none</strong>.</p>\n\n<pre><code>.ClassName,\n.ClassName:focus {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    outline-style:none;/*IE*/\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Elad Shechter",
                        "user_id": 2413332
                    },
                    "score": 23
                },
                {
                    "body": "<p>Check my solution w/o javascript:</p>\n\n<p><a href=\"http://jsfiddle.net/y4Lac/\" rel=\"nofollow\">jsfiddle</a></p>\n\n<p>html:</p>\n\n<pre><code>&lt;ul&gt;\n\n    &lt;li&gt;&lt;a id=\"id1\" href=\"www.w1.com\"&gt;&lt;/a&gt;\n    &lt;li&gt;&lt;a id=\"id2\" href=\"www.w2.com\"&gt;&lt;/a&gt;\n    &lt;li&gt;&lt;a id=\"id3\" href=\"www.w3.com\"&gt;&lt;/a&gt;\n\n\n&lt;/ul&gt;\n</code></pre>\n\n<p>css:</p>\n\n<pre><code>li:hover\n{\n    background-color:silver;\n}\n\n#id1:before\n{content:\"File\";} \n#id2:before\n{content:\"Edit\";} \n#id3:before\n{content:\"View\";} \n</code></pre>\n\n<p>popup menu with my technique applied: <a href=\"http://jsfiddle.net/y4Lac/2/\" rel=\"nofollow\">http://jsfiddle.net/y4Lac/2/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "zgnilec",
                        "user_id": 1109215
                    },
                    "score": -13
                },
                {
                    "body": "<p><strong>Working</strong> </p>\n\n<p>css</p>\n\n<pre><code> -khtml-user-select: none;\n -moz-user-select: none;\n -ms-user-select: none;\n  user-select: none;\n -webkit-touch-callout: none;\n -webkit-user-select: none;\n</code></pre>\n\n<p>This should be working but won't work for the old browsers , there is a browser compatibility issue </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "suraj rawat",
                        "user_id": 3011961
                    },
                    "score": 23
                },
                {
                    "body": "<p>Though this pseudo-element was in drafts of CSS Selectors Level 3, it was removed during the Candidate Recommendation phase,  as it appeared that its behavior was under-specified, especially with nested elements, and interoperability wasn't achieved.</p>\n\n<p>its being discussed here\n<a href=\"http://lists.w3.org/Archives/Public/www-style/2008Oct/0268.html\" rel=\"nofollow\">http://lists.w3.org/Archives/Public/www-style/2008Oct/0268.html</a></p>\n\n<p>Despite it is being implemented in browser. You can make an illusion of text not being selected is to use the same color &amp; background color on selection as of the tab design (in you case).</p>\n\n<p>/* Normal CSS Design */</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>p { color: white;  background: black; }\n</code></pre>\n\n<p>/* on selection */</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>p::-moz-selection { color: white;  background: black; }\np::selection      { color: white;  background: black; }\n</code></pre>\n\n<p>Disallowing users to select the text will raise usability issues.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Suraj Naik",
                        "user_id": 2731897
                    },
                    "score": 5
                },
                {
                    "body": "<p>this works in <em>some</em> browsers.</p>\n\n<pre><code>::selection{ background-color: transparent;}\n::moz-selection{ background-color: transparent;}\n::webkit-selection{ background-color: transparent;}\n</code></pre>\n\n<p>simply add your desired elements/ids in front of the selectors separated by commas without spaces, like so:</p>\n\n<pre><code>h1::selection,h2::selection,h3::selection,p::selection{ background-color: transparent;}\nh1::moz-selection,h2::moz-selection,h3::moz-selection,p::moz-selection{ background-color: transparent;}\nh1::webkit-selection,h2::webkit-selection,h3::webkit-selection,p::webkit-selection{ background-color: transparent;}\n</code></pre>\n\n<p>The other answers are better, this should probably be seen as a last resort/catchall</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "r3wt",
                        "user_id": 2401804
                    },
                    "score": 4
                },
                {
                    "body": "<p>For those who have trouble achieving the same in android browser with the touch event,</p>\n\n<pre><code>html,body{\n-webkit-touch-callout: none;\n-webkit-user-select: none;\n-webkit-tap-highlight-color: rgba(0,0,0,0);\n-webkit-tap-highlight-color: transparent;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Beep.exe",
                        "user_id": 2756352
                    },
                    "score": 16
                },
                {
                    "body": "<p><strong>NOTE</strong></p>\n\n<p>The correct answer is correct in that it prevents you from being able to select the text, however, it does not prevent you from being able to copy the text, as I'll show with the next couple of screenshots. (As of 7th Nov 2014)</p>\n\n<p><img src=\"http://i.stack.imgur.com/gcKTY.png\" alt=\"Before we have selected anything\"></p>\n\n<p><img src=\"http://i.stack.imgur.com/xwPld.png\" alt=\"After we have selected\"></p>\n\n<p><img src=\"http://i.stack.imgur.com/Ex6UH.png\" alt=\"The numbers have been copied\"></p>\n\n<p>As you can see, we were unable to select the numbers, but we were able to copy them</p>\n\n<p>Ubuntu Chrome 38.0.2125.111</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Luke Madhanga",
                        "user_id": 1925574
                    },
                    "score": 5
                },
                {
                    "body": "<p>Add this class into your css file.</p>\n\n<pre><code>.stopselect{\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n</code></pre>\n\n<p>then add .stopselect class wherever want in the HTML document. for example</p>\n\n<p>===Use This==</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n        &lt;style&gt;\n         .stopselect{\n            -webkit-touch-callout: none;\n            -webkit-user-select: none;\n            -khtml-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n             user-select: none;\n            }\n\n       &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;p class=\"stopselect\"&gt;\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n            quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n            cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        &lt;/p&gt;\n\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n            quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n            consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n            cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>in the above example you can able to select only the second paragraph. Thank you...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arunraj S",
                        "user_id": 2085831
                    },
                    "score": 3
                }
            ],
            "body": "<p>For anchors that act like buttons (for example, <em>Questions</em>, <em>Tags</em>, <em>Users</em>, etc. at the top of the Stack&nbsp;Overflow page) or tabs, is there a CSS standard way to disable the highlighting effect if the user accidentally selects the text?</p>\n\n<p>I realize this could be done with JavaScript, and a little googling yielded the Mozilla-only <code>-moz-user-select</code> option.</p>\n\n<p>Is there a standard-compliant way to accomplish this with CSS, and if not, what is the \"best practice\" approach?</p>\n",
            "last_activity_date": 1425635941,
            "owner": {
                "display_name": "anon"
            },
            "question_id": 826782,
            "score": 2034,
            "tags": [
                "css",
                "cross-browser",
                "highlighting",
                "textselection"
            ],
            "title": "CSS rule to disable text selection highlighting"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>This is easiest with a library like jQuery:</p>\n\n<pre><code>&lt;input type=\"button\" onClick=\"javascript:test_byid();\" value=\"id='second'\" /&gt;\n\n&lt;script&gt;\nfunction test_byid()\n{\n    $(\"#second\").toggleClass(\"highlight\");\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jon Galloway",
                        "user_id": 5
                    },
                    "score": -14
                },
                {
                    "body": "<p>No offense, but it's unclever to change class on-the-fly as it forces the CSS interpreter to recalculate the visual presentation of the entire web page.</p>\n\n<p>The reason is that it is nearly impossible for the CSS interpreter to know if any inheritance or cascading could be changed, so the short answer is:</p>\n\n<p>Never ever change className on-the-fly !-)</p>\n\n<p>But usually you'll only need to change a property or two, and that is easily implemented:</p>\n\n<pre><code>function highlight(elm){\n    elm.style.backgroundColor =\"#345\";\n    elm.style.color = \"#fff\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "roenving",
                        "user_id": 23142
                    },
                    "score": -41
                },
                {
                    "body": "<p>You can use <code>node.className</code> like so:</p>\n\n<pre><code>document.getElementById('foo').className = 'bar';\n</code></pre>\n\n<p>This should work in IE5.5 and up according to <a href=\"http://quirksmode.org/dom/w3c_html.html\">PPK</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eric Wendelin",
                        "user_id": 25066
                    },
                    "score": 45
                },
                {
                    "body": "<h2>Adding and Removing Classes, with simple cross-browser JavaScript</h2>\n\n<p>The standard JavaScript way to select an element is using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.getElementById\"><code>document.getElementById(\"Id\")</code></a>, which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use <code>this</code> instead - however, going into detail on this is beyond the scope of the answer.</p>\n\n<h3>To change all classes for an element:</h3>\n\n<p>To replace all existing classes with one or more new classes, set the className attribute:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = \"MyClass\";\n</code></pre>\n\n<p>(You can use a space-delimited list to apply multiple classes.)</p>\n\n<h3>To add an additional class to an element:</h3>\n\n<p>To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className += \" MyClass\";\n</code></pre>\n\n<h3>To remove a class from an element:</h3>\n\n<p>To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className =\n   document.getElementById(\"MyElement\").className.replace\n      ( /(?:^|\\s)MyClass(?!\\S)/g , '' )\n/* code wrapped for readability - above is all one statement */\n</code></pre>\n\n<p>An explanation of this regex is as follows:</p>\n\n<pre><code>(?:^|\\s) # match the start of the string, or any single whitespace character\n\nMyClass  # the literal text for the classname to remove\n\n(?!\\S)   # negative lookahead to verify the above is the whole classname\n         # ensures there is no non-space character following\n         # (i.e. must be end of string or a space)\n</code></pre>\n\n<p>The <code>g</code> flag tells the replace to repeat as required, in case the class name has been added multiple times.</p>\n\n<h3>To check if a class is already applied to an element:</h3>\n\n<p>The same regex used above for removing a class can also be used as a check as to whether a particular class exists:</p>\n\n<pre><code>if ( document.getElementById(\"MyElement\").className.match(/(?:^|\\s)MyClass(?!\\S)/) )\n</code></pre>\n\n<p><br/></p>\n\n<h3>Assigning these actions to onclick events:</h3>\n\n<p>Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as <code>onclick=\"this.className+=' MyClass'\"</code>) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JS interaction logic.</p>\n\n<p>The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass()\n    {\n        // code examples from above\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass()\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p><sub><em>(It is not required to have this code in script tags, this is simply for brevity of example, and including the JS in a distinct file may be more appropriate.)</em></sub></p>\n\n<p>The second step is to move the onclick event out of the HTML and into JavaScript, for example using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\">addEventListener</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass()\n    {\n        // code examples from above\n    }\n\n    window.onload = function()\n    {\n        document.getElementById(\"MyElement\").addEventListener( 'click' , changeClass );\n    }\n&lt;/script&gt;\n...\n&lt;button id=\"MyElement\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>(Note that the window.onload part is required so that the contents of that function are executed <em>after</em> the HTML has finished loading - without this, the MyElement might not exist when the JS is called, so that line would fail.)</p>\n\n<p><br/></p>\n\n<h2>JavaScript Frameworks and Libraries</h2>\n\n<p>The above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.</p>\n\n<p>Whilst some people consider it overkill to add a ~50KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.</p>\n\n<p><em>(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)</em></p>\n\n<p>The examples above have been reproduced below using <a href=\"http://jquery.com\">jQuery</a>, probably the most commonly used JavaScript library (though there are others worth investigating too).</p>\n\n<p>(Note that <code>$</code> here is the jQuery object.)</p>\n\n<h3>Changing Classes with jQuery:</h3>\n\n<pre><code>$('#MyElement').addClass('MyClass');\n\n$('#MyElement').removeClass('MyClass');\n\nif ( $('#MyElement').hasClass('MyClass') )\n</code></pre>\n\n<p>In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does:</p>\n\n<pre><code>$('#MyElement').toggleClass('MyClass');\n</code></pre>\n\n<p><br/></p>\n\n<h3>Assigning a function to a click event with jQuery:</h3>\n\n<pre><code>$('#MyElement').click(changeClass);\n</code></pre>\n\n<p>or, without needing an id:</p>\n\n<pre><code>$(':button:contains(My Button)').click(changeClass);\n</code></pre>\n\n<p><br/></p>\n\n<h2>HTML5 Techniques for changing classes</h2>\n\n<p>Modern browsers have added <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\"><strong>classList</strong></a> which provides methods to make it easier to manipulate classes without needing a library:</p>\n\n<pre><code>document.getElementById(\"MyElement\").classList.add('class');\n\ndocument.getElementById(\"MyElement\").classList.remove('class');\n\nif ( document.getElementById(\"MyElement\").classList.contains('class') )\n\ndocument.getElementById(\"MyElement\").classList.toggle('class');\n</code></pre>\n\n<p>Unfortunately, these do not work in Internet Explorer prior to v10, though there is a <a href=\"http://en.wikipedia.org/wiki/Shim_%28computing%29\">shim</a> to add support for it to IE8 and IE9, available from <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\">this page</a>.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Peter Boughton",
                        "user_id": 9360
                    },
                    "score": 1631
                },
                {
                    "body": "<p>The line</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = document.getElementById(\"MyElement\").className.replace(/\\bMyClass\\b/','')\n</code></pre>\n\n<p>should be:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = document.getElementById(\"MyElement\").className.replace('/\\bMyClass\\b/','');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eric Bailey",
                        "user_id": 227530
                    },
                    "score": 2
                },
                {
                    "body": "<p>Change an element's CSS class with JavaScript in <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"nofollow\">ASP.NET</a>:</p>\n\n<pre><code>Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n    If Not Page.IsPostBack Then\n        lbSave.Attributes.Add(\"onmouseover\", \"this.className = 'LinkButtonStyle1'\")\n        lbSave.Attributes.Add(\"onmouseout\", \"this.className = 'LinkButtonStyle'\")\n        lbCancel.Attributes.Add(\"onmouseover\", \"this.className = 'LinkButtonStyle1'\")\n        lbCancel.Attributes.Add(\"onmouseout\", \"this.className = 'LinkButtonStyle'\")\n    End If\nEnd Sub\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Hiren Kansara",
                        "user_id": 774111
                    },
                    "score": 5
                },
                {
                    "body": "<p>In one of my old projects that did not use jQuery, I built the following functions for adding, removing, and checking if element has class:</p>\n\n<pre><code>function hasClass(ele, cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\nfunction addClass(ele, cls) {\n    if (!hasClass(ele, cls)) ele.className += \" \" + cls;\n}\nfunction removeClass(ele, cls) {\n    if (hasClass(ele, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        ele.className = ele.className.replace(reg, ' ');\n    }\n}\n</code></pre>\n\n<p>So, for example, if I want onclick to add some class the the button I can use this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass(btn, cls) {\n        if(!hasClass(btn, cls)) {\n            addClass(btn, cls);\n        }\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass(this, \"someClass\")\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>By now for sure it would just better to use jQuery.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andrew Orsich",
                        "user_id": 508601
                    },
                    "score": 51
                },
                {
                    "body": "<p>You could also just do:</p>\n\n<pre>\ndocument.getElementById('id').classList.add('class');\ndocument.getElementById('id').classList.remove('class');\n</pre>\n\n<p>And to toggle a class (remove if exists else add it):</p>\n\n<pre>\ndocument.getElementById('id').classList.toggle('class');\n</pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tyilo",
                        "user_id": 640584
                    },
                    "score": 232
                },
                {
                    "body": "<p>Using pure JavaScript code:</p>\n\n<pre><code>function hasClass(ele, cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\nfunction addClass(ele, cls) {\n    if (!this.hasClass(ele, cls)) ele.className += \" \" + cls;\n}\n\nfunction removeClass(ele, cls) {\n    if (hasClass(ele, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        ele.className = ele.className.replace(reg, ' ');\n    }\n}\n\nfunction replaceClass(ele, oldClass, newClass){\n    if(hasClass(ele, oldClass)){\n        removeClass(ele, oldClass);\n        addClass(ele, newClass);\n    }\n    return;\n}\n\nfunction toggleClass(ele, cls1, cls2){\n    if(hasClass(ele, cls1)){\n        replaceClass(ele, cls1, cls2);\n    }else if(hasClass(ele, cls2)){\n        replaceClass(ele, cls2, cls1);\n    }else{\n        addClass(ele, cls1);\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PseudoNinja",
                        "user_id": 588005
                    },
                    "score": 24
                },
                {
                    "body": "<p>Just to add on information from another popular framework, Google Closures, see their <a href=\"http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html\">dom/classes</a> class:</p>\n\n<pre><code>goog.dom.classes.add(element, var_args)\n\ngoog.dom.classes.addRemove(element, classesToRemove, classesToAdd)\n\ngoog.dom.classes.remove(element, var_args)\n</code></pre>\n\n<p>One option for selecting the element is using <a href=\"http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html\">goog.dom.query</a> with a CSS3 selector:</p>\n\n<pre><code>var myElement = goog.dom.query(\"#MyElement\")[0];\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ben Flynn",
                        "user_id": 449161
                    },
                    "score": 6
                },
                {
                    "body": "<p>This is working for me:</p>\n\n<pre><code>function setCSS(eleID) {\n    var currTabElem = document.getElementById(eleID);\n\n    currTabElem.setAttribute(\"class\", \"some_class_name\");\n    currTabElem.setAttribute(\"className\", \"some_class_name\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gopal Krishna Ranjan",
                        "user_id": 1070666
                    },
                    "score": 16
                },
                {
                    "body": "<p>Wow, surprised there are so many overkill answers here...</p>\n\n<pre><code>&lt;div class=\"firstClass\" onclick=\"this.className='secondClass'\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Travis J",
                        "user_id": 1026459
                    },
                    "score": 25
                },
                {
                    "body": "<p>Couple of minor notes and tweaks on the regex from above:</p>\n\n<p>You'll want to do it globally in case the class list has the class name more than once. And, you'll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.</p>\n\n<p>This regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn't care about case in class names.</p>\n\n<pre><code>var s = \"testing   one   four  one  two\";\nvar cls = \"one\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"test\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"testing\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"tWo\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alex Robinson",
                        "user_id": 972805
                    },
                    "score": 7
                },
                {
                    "body": "<p>I would use jQuery and write something like this:</p>\n\n<pre><code>jQuery(function($) {\n    $(\"#some-element\").click(function() {\n        $(this).toggleClass(\"clicked\");\n    });\n});\n</code></pre>\n\n<p>This code adds a function to be called when an element of the id <strong>some-element</strong> is clicked. The function appends <strong>clicked</strong> to the element's class attribute if it's not already part of it, and removes it if it's there.</p>\n\n<p>Yes you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.</p>\n\n<p>Thanks</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "shingokko",
                        "user_id": 557761
                    },
                    "score": 3
                },
                {
                    "body": "<p>Here's my version, fully working:</p>\n\n<pre><code>function addHTMLClass(item, classname) {\n    var obj = item\n    if (typeof item==\"string\") {\n        obj = document.getElementById(item)\n    }\n    obj.className += \" \" + classname\n}\n\nfunction removeHTMLClass(item, classname) {\n    var obj = item\n    if (typeof item==\"string\") {\n        obj = document.getElementById(item)\n    }\n    var classes = \"\"+obj.className\n    while (classes.indexOf(classname)&gt;-1) {\n        classes = classes.replace (classname, \"\")\n    }\n    obj.className = classes\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;tr onmouseover='addHTMLClass(this,\"clsSelected\")'\nonmouseout='removeHTMLClass(this,\"clsSelected\")' &gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "alfred",
                        "user_id": 345517
                    },
                    "score": 1
                },
                {
                    "body": "<p>As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes (<a href=\"https://gist.github.com/Maksims/5356227\">gist</a>):</p>\n\n<pre><code>HTMLElement = typeof(HTMLElement) != 'undefiend' ? HTMLElement : Element;\n\nHTMLElement.prototype.addClass = function(string) {\n  if (!(string instanceof Array)) {\n    string = string.split(' ');\n  }\n  for(var i = 0, len = string.length; i &lt; len; ++i) {\n    if (string[i] &amp;&amp; !new RegExp('(\\\\s+|^)' + string[i] + '(\\\\s+|$)').test(this.className)) {\n      this.className = this.className.trim() + ' ' + string[i];\n    }\n  }\n}\n\nHTMLElement.prototype.removeClass = function(string) {\n  if (!(string instanceof Array)) {\n    string = string.split(' ');\n  }\n  for(var i = 0, len = string.length; i &lt; len; ++i) {\n    this.className = this.className.replace(new RegExp('(\\\\s+|^)' + string[i] + '(\\\\s+|$)'), ' ').trim();\n  }\n}\n\nHTMLElement.prototype.toggleClass = function(string) {\n  if (string) {\n    if (new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)').test(this.className)) {\n      this.className = this.className.replace(new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)'), ' ').trim();\n    } else {\n      this.className = this.className.trim() + ' ' + string;\n    }\n  }\n}\n\nHTMLElement.prototype.hasClass = function(string) {\n  return string &amp;&amp; new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)').test(this.className);\n}\n</code></pre>\n\n<p>And then just use like this (on click will add or remove class):</p>\n\n<pre><code>document.getElementById('yourElementId').onclick = function() {\n  this.toggleClass('active');\n}\n</code></pre>\n\n<p>Here is <a href=\"http://jsfiddle.net/5QMgR/\">demo</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "moka",
                        "user_id": 1312722
                    },
                    "score": 6
                },
                {
                    "body": "<p>I use the following vanilla JavaScript functions in my code. They use regular expressions and <code>indexOf</code> but do not require quoting special characters in regular expressions.</p>\n\n<pre><code>function addClass(el, cn) {\n    var c0 = (\" \" + el.className + \" \").replace(/\\s+/g, \" \"),\n        c1 = (\" \" + cn + \" \").replace(/\\s+/g, \" \");\n    if (c0.indexOf(c1) &lt; 0) {\n        el.className = (c0 + c1).replace(/\\s+/g, \" \").replace(/^ | $/g, \"\");\n    }\n}\n\nfunction delClass(el, cn) {\n    var c0 = (\" \" + el.className + \" \").replace(/\\s+/g, \" \"),\n        c1 = (\" \" + cn + \" \").replace(/\\s+/g, \" \");\n    if (c0.indexOf(c1) &gt;= 0) {\n        el.className = c0.replace(c1, \" \").replace(/\\s+/g, \" \").replace(/^ | $/g, \"\");\n    }\n}\n</code></pre>\n\n<p>You can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.classList\" rel=\"nofollow\">element.classList</a> in modern browsers.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Salman A",
                        "user_id": 87015
                    },
                    "score": 0
                },
                {
                    "body": "<p>Here is simple jQuery code to do that.</p>\n\n<pre><code>$(\".class1\").click(function(argument) {\n    $(\".parentclass\").removeClass(\"classtoremove\");\n    setTimeout(function (argument) {\n        $(\".parentclass\").addClass(\"classtoadd\");\n    }, 100);\n});\n</code></pre>\n\n<p>Here,</p>\n\n<ul>\n<li>Class1 is a listener for an event.</li>\n<li>The parent class is the class which hosts the class you want to change</li>\n<li>Classtoremove is the old class you have.</li>\n<li>Class to add is the new class that you want to add.</li>\n<li>100 is the timeout delay during which the class is changed.</li>\n</ul>\n\n<p>Good Luck.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "uttamcafedeweb",
                        "user_id": 3108620
                    },
                    "score": -1
                },
                {
                    "body": "<p>Just thought I'd throw this in:</p>\n\n<pre><code>function inArray(val, ary){\n  for(var i=0,l=ary.length; i&lt;l; i++){\n    if(ary[i] === val){\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeClassName(classNameS, fromElement){\n  var x = classNameS.split(/\\s/), s = fromElement.className.split(/\\s/), r = [];\n  for(var i=0,l=s.length; i&lt;l; i++){\n    if(!iA(s[i], x))r.push(s[i]);\n  }\n  fromElement.className = r.join(' ');\n}\nfunction addClassName(classNameS, toElement){\n  var s = toElement.className.split(/\\s/);\n  s.push(c); toElement.className = s.join(' ');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PHPglue",
                        "user_id": 2438423
                    },
                    "score": -1
                }
            ],
            "body": "<p>How can I change a CSS class of an HTML element in response to an <code>onClick</code> event using JavaScript?</p>\n",
            "last_activity_date": 1426818901,
            "owner": {
                "display_name": "Nathan Smith",
                "user_id": 4998
            },
            "question_id": 195951,
            "score": 1018,
            "tags": [
                "javascript",
                "css",
                "dom"
            ],
            "title": "Change an element&#39;s CSS class with JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You can check directly at the <a href=\"http://www.w3.org/TR/CSS21/grammar.html#scanner\">CSS grammar</a>.</p>\n\n<p><em>Basically</em><sup>1</sup>, a name must begin with an underscore (<code>_</code>), a hyphen (<code>-</code>), or a letter(<code>a</code>\u2013<code>z</code>), followed by any number of hyphens, underscores, letters, or numbers. There is a catch: if the first character is a hyphen, the second character must<sup>2</sup> be a  letter or underscore, and the name must be at least 2 characters long.</p>\n\n<pre><code>-?[_a-zA-Z]+[_a-zA-Z0-9-]*\n</code></pre>\n\n<p>Identifiers beginning with a hyphen or underscore are typically reserved for browser-specific extensions, as in <code>-moz-opacity</code>.</p>\n\n<p><sup>1</sup> It's all made a bit more complicated by the inclusion of escaped unicode characters (that no one really uses).</p>\n\n<p><sup>2</sup> Note that, according to the grammar I linked, a rule starting with TWO hyphens, e.g. <code>--indent1</code>, is invalid.  However, I'm pretty sure I've seen this in practice.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Triptych",
                        "user_id": 43089
                    },
                    "score": 528
                },
                {
                    "body": "<p>Read the <a href=\"http://www.w3.org/TR/CSS21/syndata.html#characters\">W3C spec</a>. (this is CSS 2.1, find the appropriate version for your assumption of browsers)</p>\n\n<p>edit: relevant paragraph follows:</p>\n\n<blockquote>\n  <p>In CSS, identifiers  (including\n  element names, classes, and IDs in\n  selectors) can contain only the\n  characters [a-z0-9] and ISO 10646\n  characters U+00A1 and higher, plus the\n  hyphen (-) and the underscore (_);\n  they cannot start with a digit, or a\n  hyphen followed by a digit.\n  Identifiers can also contain escaped\n  characters and any ISO 10646 character\n  as a numeric code (see next item). For\n  instance, the identifier \"B&amp;W?\" may be\n  written as \"B\\&amp;W\\?\" or \"B\\26 W\\3F\".</p>\n</blockquote>\n\n<p>edit 2: as @mipadi points out in Triptych's answer, there's this <a href=\"http://www.w3.org/TR/CSS21/syndata.html#vendor-keywords\">caveat</a>, also in the same webpage:</p>\n\n<blockquote>\n  <p>In CSS, identifiers may begin with '-'\n  (dash) or '_' (underscore). Keywords\n  and property names beginning with '-'\n  or '_' are reserved for\n  vendor-specific extensions. Such\n  vendor-specific extensions should have\n  one of the following formats:</p>\n\n<pre><code>'-' + vendor identifier + '-' + meaningful name \n'_' + vendor identifier + '-' + meaningful name\n</code></pre>\n  \n  <p>Example(s):</p>\n  \n  <p>For example, if XYZ organization added\n  a property to describe the color of\n  the border on the East side of the\n  display, they might call it\n  -xyz-border-east-color.</p>\n  \n  <p>Other known examples:</p>\n\n<pre><code> -moz-box-sizing\n -moz-border-radius\n -wap-accesskey\n</code></pre>\n  \n  <p>An initial dash or underscore is\n  guaranteed never to be used in a\n  property or keyword by any current or\n  future level of CSS. Thus typical CSS\n  implementations may not recognize such\n  properties and may ignore them\n  according to the rules for handling\n  parsing errors. However, because the\n  initial dash or underscore is part of\n  the grammar, CSS 2.1 implementers\n  should always be able to use a\n  CSS-conforming parser, whether or not\n  they support any vendor-specific\n  extensions.</p>\n  \n  <p>Authors should avoid vendor-specific\n  extensions</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jason S",
                        "user_id": 44330
                    },
                    "score": 46
                },
                {
                    "body": "<p>The complete regular expression is:</p>\n\n<pre><code>-?(?:[_a-z]|[\\200-\\377]|\\\\[0-9a-f]{1,6}(\\r\\n|[ \\t\\r\\n\\f])?|\\\\[^\\r\\n\\f0-9a-f])(?:[_a-z0-9-]|[\\200-\\377]|\\\\[0-9a-f]{1,6}(\\r\\n|[ \\t\\r\\n\\f])?|\\\\[^\\r\\n\\f0-9a-f])*\n</code></pre>\n\n<p>So all of your listed character except \u201c<code>-</code>\u201d and \u201c<code>_</code>\u201d are not allowed if used directly. But you can encode them using a backslash <code>foo\\~bar</code> or using the unicode notation <code>foo\\7E bar</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gumbo",
                        "user_id": 53114
                    },
                    "score": 13
                },
                {
                    "body": "<p>For HTML5/CSS3 classes and IDs can start with numbers.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Marius",
                        "user_id": 1585
                    },
                    "score": 6
                },
                {
                    "body": "<p>My understanding is that the underscore is technically valid. Check out:</p>\n\n<p><a href=\"https://developer.mozilla.org/en/underscores_in_class_and_id_names\" rel=\"nofollow\">https://developer.mozilla.org/en/underscores_in_class_and_id_names</a></p>\n\n<p>\"...errata to the specification published in early 2001 made underscores legal for the first time.\"</p>\n\n<p>The article linked above says never use them, then gives a list of browsers that don't support them, all of which are, in terms of numbers of users at least, long-redundant.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mofaha",
                        "user_id": 407305
                    },
                    "score": 3
                },
                {
                    "body": "<p>I\u2019ve answered your question in-depth here: <a href=\"http://mathiasbynens.be/notes/css-escapes\">http://mathiasbynens.be/notes/css-escapes</a></p>\n\n<p>The article also explains how to escape any character in CSS (and JavaScript), and I made <a href=\"http://mothereff.in/css-escapes#0~!%40%24%25%5E%26%2a%28%29%5f%2B-%3D%2C.%2F%27%3B%3A%22%3F%3E%3C%5B%5D%5C%7B%7D%7C%60%23\">a handy tool</a> for this as well. From that page:</p>\n\n<blockquote>\n  <p>If you were to give an element an ID value of <code>~!@$%^&amp;*()_+-=,./';:\"?>&lt;[]{}|`#</code>, the selector would look like this:</p>\n  \n  <p><strong>CSS:</strong></p>\n\n<pre><code>&lt;style&gt;\n  #\\~\\!\\@\\$\\%\\^\\&amp;\\*\\(\\)\\_\\+-\\=\\,\\.\\/\\'\\;\\:\\\"\\?\\&gt;\\&lt;\\[\\]\\\\\\{\\}\\|\\`\\#\n</code></pre>\n  \n  <p>{\n          background: hotpink;\n        }\n      </p>\n  \n  <p><strong>JavaScript:</strong></p>\n\n<pre><code>&lt;script&gt;\n  // document.getElementById or similar\n  document.getElementById('~!@$%^&amp;*()_+-=,./\\';:\"?&gt;&lt;[]\\\\{}|`#');\n  // document.querySelector or similar\n  $('#\\\\~\\\\!\\\\@\\\\$\\\\%\\\\^\\\\&amp;\\\\*\\\\(\\\\)\\\\_\\\\+-\\\\=\\\\,\\\\.\\\\/\\\\\\'\\\\;\\\\:\\\\\"\\\\?\\\\&gt;\\\\&lt;\\\\[\\\\]\\\\\\\\\\\\{\\\\}\\\\|\\\\`\\\\#');\n&lt;/script&gt;\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mathias Bynens",
                        "user_id": 96656
                    },
                    "score": 24
                },
                {
                    "body": "<p>To my surprise most answers here are wrong. It turns out that:</p>\n\n<p><strong>Any character except NUL is allowed as CSS class name in CSS.</strong> (If CSS contains NUL (escaped or not), the result is undefined. [<a href=\"http://www.w3.org/TR/CSS21/syndata.html#characters\">CSS-characters</a>])</p>\n\n<p>Mathias Bynens\u2019 answer links to <a href=\"http://mathiasbynens.be/notes/css-escapes\">explanation</a> and <a href=\"http://mathiasbynens.be/demo/crazy-class\">demos</a> showing how to use these names. <em>Written down</em> in CSS code, a class name <em>may need escaping</em>, but that doesn\u2019t change the class name. E.g. an unnecessarily over-escaped representation will look different from other representations of that name, but it still refers to the same class name.</p>\n\n<p>Most other (programming) languages don\u2019t have that concept of escaping variable names, so all representations of a variable have to look the same. This is not the case in CSS.</p>\n\n<p>Note that in HTML there is no way to include <a href=\"http://dev.w3.org/html5/spec/common-microsyntaxes.html#space-character\">space characters (space, tab, line feed, form feed and carriage return)</a> in a <a href=\"http://dev.w3.org/html5/spec/elements.html#classes\">class name attribute</a>, because they already separate classes from each other.</p>\n\n<p>So, if you need to turn a random string into a CSS class name: take care of NUL and space, and escape (accordingly for CSS or HTML). Done.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Robert Siemer",
                        "user_id": 825924
                    },
                    "score": 46
                },
                {
                    "body": "<pre><code>-?[_a-zA-Z]+[_a-zA-Z0-9-]*\n</code></pre>\n\n<p>Use these character with the browser property. </p>\n\n<p>Like,</p>\n\n<pre><code>-moz-property_name \" For Mozila\"\n-op-property name \"For Opera\"\n</code></pre>\n\n<p>Try this</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Satish Jangid",
                        "user_id": 1596189
                    },
                    "score": -2
                }
            ],
            "body": "<p>What characters/symbols are allowed within CSS class selectors? I know that the following characters are <em>invalid</em>, but what characters are <em>valid</em>?</p>\n\n<pre><code>~ ! @ $ % ^ &amp; * ( ) + = , . / ' ; : \" ? &gt; &lt; [ ] \\ { } | ` #\n</code></pre>\n",
            "last_activity_date": 1426256985,
            "owner": {
                "display_name": "Darryl Hein",
                "user_id": 5441
            },
            "question_id": 448981,
            "score": 545,
            "tags": [
                "css",
                "css-selectors"
            ],
            "title": "What characters are valid in CSS class names/selectors?"
        },
        {
            "answer_count": 34,
            "answers": [
                {
                    "body": "<p>Fine rendering doesn't mean anything. Does it validate? </p>\n\n<p>All browsers do the most they can to just show something on the screen, no matter how bad the input. And of course they do not do the same thing. If you want the same rendering as FireFox, you could use its rendering engine. There are pdf generators for it. It is an awful lot of work, though.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Stephan Eggermont",
                        "user_id": 35306
                    },
                    "score": 3
                },
                {
                    "body": "<p>Perhaps you might try and use Tidy before handing the file to the converter. If one of the renderer chokes on some HTML problem (like unclosed tag), it might help it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PhiLho",
                        "user_id": 15459
                    },
                    "score": 4
                },
                {
                    "body": "<p>There's a tutorial on Zend's devzone on generating pdf from php (<a href=\"http://devzone.zend.com/article/1254-PDF-Generation-Using-Only-PHP---Part-1\">part 1</a>, <a href=\"http://devzone.zend.com/article/1255-PDF-Generation-Using-Only-PHP---Part-2\">part 2</a>) without any external libraries. I never implemented this sort of solution, but since it's all php, you might find it more flexible to implement and debug.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "yoavf",
                        "user_id": 1011
                    },
                    "score": 8
                },
                {
                    "body": "<p>Well if you want to find a perfect XHTML+CSS to PDF converter library, forget it. It's far from possible. Because it's just like finding a perfect browser (XHTML+CSS rendering engine). Do we have one? IE or FF?</p>\n\n<p>I have had some success with DOMPDF. The thing is that you have to modify your HTML+CSS code to go with the way the library is meant to work. Other than that, I have pretty good results.</p>\n\n<p>See below:</p>\n\n<p><a href=\"http://www.nutquote.com/quote/William_Shakespeare/1/simple\" rel=\"nofollow\">Original HTML</a></p>\n\n<p><a href=\"http://www.converthub.com/htmltopdf.php?html=http://www.nutquote.com/quote/William_Shakespeare/1/simple\" rel=\"nofollow\">Converting HTML to PDF</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "kavoir.com",
                        "user_id": 49318
                    },
                    "score": 8
                },
                {
                    "body": "<p>After some investigation and general hair-pulling the solution seems to be <a href=\"http://www.tufat.com/s_html2ps_html2pdf.htm\">HTML2PDF</a>.  <a href=\"https://github.com/dompdf/dompdf\">DOMPDF</a> did a terrible job with tables, borders and even moderately complex layout and <a href=\"http://www.easysw.com/htmldoc/\">htmldoc</a> seems reasonably robust but is almost completely CSS-ignorant and I don't want to go back to doing HTML layout without CSS just for that program.</p>\n\n<p>HTML2PDF looked the most promising but I kept having this weird error about null reference arguments to node_type.  I finally found the solution to this.  Basically, PHP 5.1.x worked fine with regex replaces (preg_replace_*) on strings of any size.  PHP 5.2.1 introduced a php.ini config directive called <strong>pcre.backtrack_limit</strong>.  What this config parameter does is limits the string length for which matching is done.  Why this was introduced I don't know.  The default value was chosen as 100,000.  Why such a low value?  Again, no idea.</p>\n\n<p>A <a href=\"http://bugs.php.net/bug.php?id=40846\">bug was raised against PHP 5.2.1 for this</a>, which is still open <em>almost two years later</em>.</p>\n\n<p>What's horrifying about this is that when the limit is exceeded, the replace just <strong>silently fails</strong>.  At least if an error had been raised and logged you'd have some indication of what happened, why and what to change to fix it.  But no.</p>\n\n<p>So I have a 70k HTML file to turn into PDF.  It requires the following php.ini settings:</p>\n\n<ul>\n<li>pcre.backtrack_limit = 2000000; # probably more than I need but that's OK</li>\n<li>memory_limit = 1024M; # yes, <strong>one gigabyte</strong>; and</li>\n<li>max_execution_time = 600; # yes, <strong>10 minutes</strong>.</li>\n</ul>\n\n<p>Now the astute reader may have noticed that my HTML file is smaller than 100k.  The only reason I can guess as to why I hit this problem is that html2pdf does a conversion into xhtml as part of the process.  Perhaps that took me over (although nearly 50% bloat seems odd).  Whatever the case, the above worked.</p>\n\n<p>Now, html2pdf is a resource hog. My 70k file takes approximately 5 minutes and at least 500-600M of RAM to create a 35 page PDF file.  Not quick enough (by far) for a real-time download unfortunately and the memory usage puts the memory usage ratio in the order of 1000-to-1 (600M of RAM for a 70k file), which is utterly ridiculous.</p>\n\n<p>Unfortunately, that's the best I've come up with.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cletus",
                        "user_id": 18393
                    },
                    "score": 78
                },
                {
                    "body": "<p>Have a look at <a href=\"http://princexml.com\" rel=\"nofollow\">PrinceXML</a>.</p>\n\n<p>It's definitely the best HTML/CSS to PDF converter out there, although it's not free (But hey, your programming is not free either, so if it saves you 10 hours of work, you're home free (since you also need to take into account that the alternative solutions will require you to setup a dedicated server with the right software)</p>\n\n<p>Oh yeah, did I mention that this is the first (and probably only) HTML2PDF solution that does full <a href=\"http://princexml.com/samples/acid2/acid2.pdf\" rel=\"nofollow\">ACID2</a>!?</p>\n\n<p><a href=\"http://princexml.com/samples/\" rel=\"nofollow\">PrinceXML Samples</a></p>\n\n<p>*** Footnote: Please note that this answer was written in 2009 and it might not be the most cost-effective solution today in 2015. Browsers and other open source renderers have become <em>a lot</em> better at this than they were back then. </p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "SchizoDuckie",
                        "user_id": 18077
                    },
                    "score": 162
                },
                {
                    "body": "<p>Just to bump the thread, I've tried DOMPDF and it worked perfectly. I've used <code>DIV</code> and other block level elements to position everything, kept it strictly CSS 2.1 and it played veru nicely.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Filip Dupanovi\u0107",
                        "user_id": 44041
                    },
                    "score": 11
                },
                {
                    "body": "<p>I am using fpdf to produce pdf files using php. It's working well for me so far to produce simple outputs.</p>\n",
                    "is_accepted": false,
                    "owner": {},
                    "score": 7
                },
                {
                    "body": "<p>Checkout <a href=\"http://tcpdf.sourceforge.net\">TCPDF</a>. It has some HTML to PDF functionality that might be enough for what you need. It's also free!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Darryl Hein",
                        "user_id": 5441
                    },
                    "score": 20
                },
                {
                    "body": "<p>I dont think a php class will be the best for render an xHtml page with css.</p>\n\n<p>What happen when a new css rule come out? (soon css 3.0...)</p>\n\n<p>The best way to render an html page is, obvisiuly, a browser.\nFirefox 3.0 can natively 'print' in pdf format, torisugary developed an extension (command line print) to use it. <a href=\"http://torisugari.googlepages.com/commandlineprint2\" rel=\"nofollow\">Here you'll find it.</a></p>\n\n<p>Anyway, there are still many problmes runninr firefox <em>just</em> as a pdf converter...</p>\n\n<p>At the moment, i think that wkhtmltopdf is the best (that is the one used by the safari browser), fast, quick, awesome.\nYes, opensource as well... \n<a href=\"http://code.google.com/p/wkhtmltopdf/\" rel=\"nofollow\">Give it a look</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Strae",
                        "user_id": 80363
                    },
                    "score": 4
                },
                {
                    "body": "<p>Have a look at <a href=\"http://wkhtmltopdf.org/\">WKHTMLTOPDF</a> . It is open source, based on webkit and free.</p>\n\n<p>We wrote a small tutorial <a href=\"http://beebole.com/blog/general/convert-html-to-pdf-with-full-css-support-an-opensource-alternative-based-on-webkit/\">here.</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mic",
                        "user_id": 166491
                    },
                    "score": 324
                },
                {
                    "body": "<p>Why don\u2019t you try <a href=\"http://www.mpdf1.com/\" rel=\"nofollow\">mPDF version 2.0</a>? I used it for creating PDF a document. It works fine.</p>\n\n<p>Meanwhile mPDF is at version 5.7 and it is actively maintained, in contrast to HTML2PS/HTML2PDF</p>\n\n<p>But keep in mind, that the documentation can really be hard to handle. For example, take a look at this page: <a href=\"http://mpdf1.com/manual/index.php?tid=151\" rel=\"nofollow\">http://mpdf1.com/manual/index.php?tid=151</a>. </p>\n\n<p>Very basic tasks around html to pdf, can be done with this library, but more complex tasks will take some time reading and \"understanding\" the documentation. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Karthick ",
                        "user_id": 302456
                    },
                    "score": 57
                },
                {
                    "body": "<p>Darryl Hein's mention above of TCPDF (<a href=\"http://www.tecnick.com/public/code/cp_dpage.php?aiocp_dp=tcpdf\" rel=\"nofollow\">http://www.tecnick.com/public/code/cp_dpage.php?aiocp_dp=tcpdf</a>) is likely a great idea.  Nicola Asuni's code is pretty handy and powerful.  The only killer is if you ever plan on merging PDF files with your generated PDF it doesn't have those features.  You would have to create the PDF and then merge it using something like PDFTK by Sid Steward (www.pdflabs.com/tools/pdftk-the-pdf-toolkit/).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arachnid",
                        "user_id": 429695
                    },
                    "score": 2
                },
                {
                    "body": "<p>I suggest <strong><a href=\"http://docraptor.com\" rel=\"nofollow\">DocRaptor</a></strong> (which uses <code>PrinceXML</code> as the \"engine\")</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Oren",
                        "user_id": 506404
                    },
                    "score": 16
                },
                {
                    "body": "<p>Try grabbing the latest nightly <strong>dompdf</strong> build - I was using an older version that was a terrible resource hog and took forever to render my pdf. After grabbing a nightly from <a href=\"http://eclecticgeek.com/dompdf/\" rel=\"nofollow\">here</a>.</p>\n\n<p>It only took a few seconds to generate the PDF - AND it was just as nicely rendered as with <strong>PrinceXML</strong> / <strong>Docraptor</strong>. Seems like they've seriously optimized the <strong>dompdf</strong> code since I last used it!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arni J",
                        "user_id": 840877
                    },
                    "score": 4
                },
                {
                    "body": "<p><strong>Good news! <a href=\"https://github.com/knplabs/snappy\">Snappy</a>!!</strong></p>\n\n<p>Snappy is a <strong>very easy</strong> open source PHP5 library, allowing thumbnail, snapshot or PDF generation from a url or a html page. And... it uses the <strong>excellent</strong> webkit-based <strong><a href=\"http://code.google.com/p/wkhtmltopdf/\">wkhtmltopdf</a></strong></p>\n\n<p>Enjoy! ^_^</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paulocoghi",
                        "user_id": 279712
                    },
                    "score": 11
                },
                {
                    "body": "<p>This question is pretty old already, but haven't seen anyone mentioning <a href=\"http://cutycapt.sourceforge.net/\">CutyCapt</a> so I will :)</p>\n\n<p><strong>CutyCapt</strong></p>\n\n<blockquote>\n  <p><a href=\"http://cutycapt.sourceforge.net/\">CutyCapt</a> is a small cross-platform command-line utility to\n  capture WebKit's rendering of a web page into a variety of vector and\n  bitmap formats, including SVG, PDF, PS, PNG, JPEG, TIFF, GIF, and BMP</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Koen.",
                        "user_id": 189431
                    },
                    "score": 5
                },
                {
                    "body": "<p>If your intention is to create a PDF from PHP, pdflib will help you.</p>\n\n<p>Otherwise, if you want to <em>convert</em> an HTML page in PDF via PHP, you'll find a little trouble outta here.</p>\n\n<p>So, the options I know are:</p>\n\n<p><a href=\"https://github.com/dompdf/dompdf\">DOMPDF</a>: PHP class that wrap the HTML and build the PDF. Works good, customizable (if you know PHP), based on pdflib, if I remember correctly it even accepts some CSS. Bad news: slow when the HTML is big or very complex.</p>\n\n<p><a href=\"http://www.tufat.com/s_html2ps_html2pdf.htm\">HTML2PS</a>: same as DOMPDF, but this one convert first in .ps (ghostscript), then, in whatever format you need (pdf, jpg, png). For me this is little better then dompdf, but have the same <em>speed problem</em>. It has better support for CSS.</p>\n\n<p>Those two are PHP classes, but if you can install some software on the server, and access it through <code>passthru()</code> or <code>system()</code>, look at these too:</p>\n\n<p><a href=\"http://code.google.com/p/wkhtmltopdf/\">wkhtmltopdf</a>: based on webkit (safari's wrapper), is really fast and powerfull.. seem like is the best one (atm) for convert on the fly html pages to pdf, taking only 2 seconds for a 3 pages xHTML document with CSS2. Is a recent project, anyway, the google.code page is often updated.</p>\n\n<p><a href=\"http://www.htmldoc.org/\">htmldoc</a>: this one is a tank, it often crashes. The project seems to have died in 2007, but anyway if you don't need CSS compatibility this might work for you.</p>\n\n<p><a href=\"http://sourceforge.net/projects/tcpdf/files/\">tcpdf</a> - this is an enhanced and maintained version of fpdf. <a href=\"http://www.tcpdf.org/\">Main Features of tpdf</a> and it is also has a better execution time with great output. For detailed tutorial on using the two most popular PDF generation classes: TCPDF and FPDF, please follow <a href=\"http://blog.chapagain.com.np/php-easily-create-pdf-on-the-fly/\">this link</a></p>\n\n<p>See these posts also.</p>\n\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/7108882/converting-html-in-php-file-to-pdf-file\">Converting HTML in PHP File to PDF File</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1648715/best-pdf-generator-in-php-mpdf-or-fpdf\">Best pdf generator in PHP , mpdf or fpdf?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/9851278/export-a-html-into-pdf-in-php\">Export a html into PDF in PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4868362/writing-html-with-php-variables-to-pdf-file\">Writing HTML with PHP variables to PDF file?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5190635/how-to-convert-html-into-pdf-with-php\">How to convert html into pdf with php?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/7107776/tool-for-exporting-html-as-pdf\">Tool for exporting html as pdf</a></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Somnath Muluk",
                        "user_id": 1045444
                    },
                    "score": 29
                },
                {
                    "body": "<p>not <strong>PHP</strong>, but a <a href=\"http://code.google.com/p/flying-saucer/\" rel=\"nofollow\"><strong>Java</strong> library</a>, which does the thing:</p>\n\n<blockquote>\n  <p>Flying Saucer takes XML or XHTML and applies CSS 2.1-compliant\n  stylesheets to it, in order to render to PDF</p>\n</blockquote>\n\n<p>It is usable from <strong>PHP</strong> via <code>system()</code> or a similar call. Although it requires <strong>XML</strong> well-formedness of the <code>input</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ivan Kurmanov",
                        "user_id": 284595
                    },
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://pdfcrowd.com\" rel=\"nofollow\">pdfcrowd</a> does the job with a simple API. Free for personal use and not that expensive for professional use.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "A21z",
                        "user_id": 681986
                    },
                    "score": 2
                },
                {
                    "body": "<p>if you are looking to convert less than 100 html pages into pdf within a month, than <a href=\"https://pdfcrowd.com\" rel=\"nofollow\">pdfcrowd</a> can do the job for you. Really simple and easy to integrate.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mrid",
                        "user_id": 1930554
                    },
                    "score": 1
                },
                {
                    "body": "<p>It's already been mentioned, but I'd just like to confirm that mpdf is the easiest, most powerful and most free html to pdf converter out there. The sky's really the limit. You can even generate pdfs of dynamic, user generated data. </p>\n\n<p>For instance, a client wanted a CMS system so he could update the track list of the music he played at his club. That was no problem, but he also wanted users to be able download a .pdf of the playlist, and so this downloadable pdf had to be updated by the cms too. Thanks to mpdf, with some simple loops and interspersed variables I could do just that. Something that I thought would take me weeks literally took me minutes. </p>\n\n<p><a href=\"http://www.mpdf1.com/mpdf/index.php\" rel=\"nofollow\">Download page</a>. </p>\n\n<p>Great <a href=\"http://www.smaizys.com/php/mpdf-html-to-pdf-introduction/\" rel=\"nofollow\">article</a> that helped me get started.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Starkers",
                        "user_id": 2069715
                    },
                    "score": 6
                },
                {
                    "body": "<p>Use <strong>DOMPDF</strong> for best result. Here are <a href=\"http://pxd.me/dompdf/www/examples.php\" rel=\"nofollow\">Examples Link</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rajnikant",
                        "user_id": 926594
                    },
                    "score": 3
                },
                {
                    "body": "<p>I recommend TCPDF or DOMPDF, is that order</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "criss_ae",
                        "user_id": 990138
                    },
                    "score": 1
                },
                {
                    "body": "<p>I've tried a lot of different libraries for PHP. All the listed I've tried. \nIn my opinion <a href=\"http://www.tcpdf.org/\" rel=\"nofollow\">TCPDF</a> library is the best compromise performance/usability.\nIt's very simply to install and use, also good performance in small medium application.\nIf you need high performance and very big PDF document, use <a href=\"http://framework.zend.com/manual/1.12/en/zend.pdf.html\" rel=\"nofollow\">Zend_PDF</a> module, but get ready to coding hard!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mikecurl91",
                        "user_id": 1432059
                    },
                    "score": 1
                },
                {
                    "body": "<p>Does the HTML to PDF conversion really <em>need</em> to occur server-side using PHP?</p>\n\n<p>I just came across <a href=\"http://parall.ax/products/jspdf\" rel=\"nofollow\">jsPDF</a>, a client-side solution using HTML5/JavaScript. The MIT-licensed <a href=\"https://github.com/MrRio/jsPDF\" rel=\"nofollow\">code is on GitHub</a>, too.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Oliver Schafeld \u03a8",
                        "user_id": 2072786
                    },
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://github.com/Simanas/ReportMesh\" rel=\"nofollow\">Here</a> is my approach by using <strong>phantomjs</strong>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Simanas",
                        "user_id": 1774237
                    },
                    "score": 2
                },
                {
                    "body": "<h1>1) use <a href=\"http://www.mpdf1.com/mpdf/index.php?page=Download\">MPDF</a> !</h1>\n\n<p>a) extract in <code>yourfolder</code></p>\n\n<p>b) create <strong>file.php</strong> in <code>yourfolder</code> and insert such code:</p>\n\n<pre><code>&lt;?php\ninclude('./mpdf.php');\n$mpdf=new mPDF();\n$mpdf-&gt;WriteHTML('&lt;p style=\"color:red;\"&gt;Hallo World&lt;br/&gt;Fisrt sentencee&lt;/p&gt;');\n$mpdf-&gt;Output();   exit;\n ?&gt;\n</code></pre>\n\n<p>c) open <strong>file.php</strong> from your browser</p>\n\n<p><br/><br/><br/></p>\n\n<h1>2) Use <a href=\"http://sourceforge.net/projects/pdftohtml/\">pdfToHtml</a> !</h1>\n\n<p>1) extract <strong>pdftohtml.exe</strong> to your root folder: </p>\n\n<p>2) inside that folder, in <strong>anyfile.php</strong> file, put this code (assuming, there is a source example.pdf too):</p>\n\n<pre><code>&lt;?php\n$source=\"example.pdf\";\n$output_fold=\"FinalFolder\";\n\n    if (!file_exists($output_fold)) { mkdir($output_fold, 0777, true);}\n$result= passthru(\"pdftohtml $source $output_fold/new_filename\",$log);\n//var_dump($result); var_dump($log);\n?&gt;\n</code></pre>\n\n<p>3) enter <strong>FinalFolder</strong>, and there will be the converted files (as many pages, as the source PDF had..)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "snm-yah",
                        "user_id": 2377343
                    },
                    "score": 6
                },
                {
                    "body": "<p>TCPDF works fine, no dependencies, is free and constantly bugfixed. It has reasonable speed if supplied HTML/CSS contents is well formated. I normally generate from 50 - 300 kB of HTML input (including CSS) and get PDF output within 1-3 secs with 10 - 15 PDF pages. </p>\n\n<p>I strongly recommend using <strong>tidy</strong> library as HTML pretty formatter before sending anything to TCPDF.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "lubosdz",
                        "user_id": 1485984
                    },
                    "score": 1
                },
                {
                    "body": "<h1>Web API</h1>\n\n<p>If there is people who always search for this kind of stuff, there is a <strong>free</strong> website which allow you to convert html code &amp; pages to pdf. There is also a (very small) api which allow you to get pdf file from url.</p>\n\n<p><a href=\"http://simplehtmltopdf.com\" rel=\"nofollow\"><strong>Check it here</strong></a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Superdrac",
                        "user_id": 3563606
                    },
                    "score": 1
                },
                {
                    "body": "<p>Although there are many solutions offered already, I recommend the following two:</p>\n\n<ol>\n<li><a href=\"http://www.htm2pdf.co.uk\" rel=\"nofollow\">HTM2PDF</a> - offers an API to convert HTML to PDF and also has a PHP SDK, which makes it very easy to implement in PHP; It offers a choice of server locations in Europe, Asia and the USA</li>\n<li><a href=\"http://pdfmyurl.com\" rel=\"nofollow\">PDFmyURL</a> - offers an API that does URL and HTML to PDF as well, with roughly the same functionality as HTM2PDF, but works on a load balanced landscape and has been around a little longer</li>\n</ol>\n\n<p>The thing that's different about these two APIs from all the previously mentioned solutions, is that - besides converting HTML to PDF with CSS and JavaScript - it also offers PDF rights management, watermarking and encryption. Therefore it's an all-in-one solution for those who want to hit the ground running.</p>\n\n<p>Disclaimer: I work for Kaiomi, a company that operates both of these websites.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user1914292",
                        "user_id": 1914292
                    },
                    "score": 0
                },
                {
                    "body": "<p>If you have access to the command line it's possible to use <strong>PhantomJS</strong> to create the <code>PDF</code> from an <code>URL</code> (remote or local).</p>\n\n<p>It works really well, and is a free solution.</p>\n\n<p>Take a look at this <a href=\"https://github.com/ariya/phantomjs/blob/master/examples/rasterize.js\" rel=\"nofollow\">example</a> script made for this exact problem.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Hjortlund",
                        "user_id": 209532
                    },
                    "score": 2
                },
                {
                    "body": "<p>Just call <strong>Blockspring's HTML to PDF</strong> <code>API</code>, give it the <code>HTML</code>, and it returns a <code>PDF</code> file.</p>\n\n<p><a href=\"https://api.blockspring.com/pkpp1233/761172049d80626f51e221bb40e9b4b6\" rel=\"nofollow\"><strong>Reference</strong></a>.</p>\n\n<p>It even has the code for calling it from PHP right on the site</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Donny P",
                        "user_id": 1001938
                    },
                    "score": 0
                },
                {
                    "body": "<p>The very best Library and very for converting html to PDF is html2pdf library. Below is the basic example. The link explains everything in details.</p>\n\n<p><a href=\"http://www.macronimous.com/resources/Converting_HTML2PDF_using_PHP.asp\" rel=\"nofollow\">http://www.macronimous.com/resources/Converting_HTML2PDF_using_PHP.asp</a></p>\n\n<p>Also here is the working copy for that.Click <a href=\"http://www.macronimous.com/resources/html2pdf_sample.zip\" rel=\"nofollow\">Here</a> to download. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ashish",
                        "user_id": 3889413
                    },
                    "score": 0
                }
            ],
            "body": "<p>Ok, I'm now banging my head against a brick wall with this one.</p>\n\n<p>I have an HTML (not XHTML) document that renders fine in Firefox 3 and IE 7.  It uses fairly basic CSS to style it and renders fine in HTML.</p>\n\n<p>I'm now after a way of converting it to PDF.  I have tried:</p>\n\n<ul>\n<li><a href=\"https://github.com/dompdf/dompdf\">DOMPDF</a>: it had huge problems with tables.  I factored out my large nested tables and it helped (before it was just consuming up to 128M of memory then dying--thats my limit on memory in php.ini) but it makes a complete mess of tables and doesn't seem to get images.  The tables were just basic stuff with some border styles to add some lines at various points;</li>\n<li><a href=\"http://www.tufat.com/s_html2ps_html2pdf.htm\">HTML2PDF and HTML2PS</a>: I actually had better luck with this.  It rendered some of the images (all the images are Google Chart URLs) and the table formatting was much better but it seemed to have some complexity problem I haven't figured out yet and kept dying with unknown node_type() errors.  Not sure where to go from here; and</li>\n<li><a href=\"http://www.msweet.org/projects.php?Z1\">Htmldoc</a>: this seems to work fine on basic HTML but has almost no support for CSS whatsoever so you have to do everything in HTML (I didn't realize it was still 2001 in Htmldoc-land...) so it's useless to me.</li>\n</ul>\n\n<p>I tried a Windows app called Html2Pdf Pilot that actually did a pretty decent job but I need something that at a minimum runs on Linux and ideally runs on-demand via PHP on the Webserver.</p>\n\n<p>I really can't believe I'm this stuck.  Am I missing something?</p>\n",
            "last_activity_date": 1426244368,
            "owner": {
                "display_name": "cletus",
                "user_id": 18393
            },
            "question_id": 391005,
            "score": 598,
            "tags": [
                "php",
                "html",
                "css",
                "pdf"
            ],
            "title": "Convert HTML + CSS to PDF with PHP?"
        },
        {
            "answer_count": 25,
            "answers": [
                {
                    "body": "<p>Have you tried this:</p>\n\n<pre><code>&lt;div style=\"clear:both;\"/&gt;\n</code></pre>\n\n<p>I haven't had any problems with this method.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Torkel",
                        "user_id": 24425
                    },
                    "score": 0
                },
                {
                    "body": "<p>I've found a bug in the official CLEARFIX-Method:\nThe DOT doesn't have a font-size.\nAnd if you set the height = 0 and the first Element in your DOM-Tree has the class \"clearfix\" you'll allways have a margin at the bottom of the page of 12px :)</p>\n\n<p>You have to fix it like this:</p>\n\n<pre><code>/* float clearing for everyone else */\n.clearfix:after{\n  clear: both;\n  content: \".\";\n  display: block;\n  height: 0;\n  visibility: hidden;\n  font-size: 0;\n}\n</code></pre>\n\n<p>It's now part of the YAML-Layout ... Just take a look at it - it's very interesting!\n<a href=\"http://www.yaml.de/en/home.html\">http://www.yaml.de/en/home.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SimonSimCity"
                    },
                    "score": 12
                },
                {
                    "body": "<p>The overflow property can be used to clear floats with no additional mark-up:</p>\n\n<pre><code>.container { overflow: hidden; }\n</code></pre>\n\n<p>This works for all browsers except IE6, where all you need to do is enable hasLayout (zoom being my preferred method):</p>\n\n<pre><code>.container { zoom: 1; }\n</code></pre>\n\n<p><a href=\"http://www.quirksmode.org/css/clearing.html\">http://www.quirksmode.org/css/clearing.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jack Sleight",
                        "user_id": 39428
                    },
                    "score": 15
                },
                {
                    "body": "<p>Using overflow:hidden/auto and height for ie6 will suffice if the floating container has a parent element. </p>\n\n<p>Either one of the #test could work, for the HTML stated below to clear floats.</p>\n\n<pre><code>#test {\n  overflow:hidden; // or auto;\n  _height:1%; forces hasLayout in IE6\n}\n\n&lt;div id=\"test\"&gt;\n  &lt;div style=\"floatLeft\"&gt;&lt;/div&gt;\n  &lt;div style=\"random\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In cases when this refuses to work with ie6, just float the parent to clear float. </p>\n\n<pre><code>#test {\n  float: left; // using float to clear float\n  width: 99%;\n}\n</code></pre>\n\n<p>Never really needed any other kind of clearing yet. Maybe it's the way I write my HTML.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "draco",
                        "user_id": 92776
                    },
                    "score": 1
                },
                {
                    "body": "<p>Depending upon the design being produced, each of the below clearfix css solutions has its own benefits.</p>\n\n<hr>\n\n<h2>\"Beat That ClearFix\", a clearfix for modern browsers</h2>\n\n<p>Thierry Koblentz\u2019 of <a href=\"http://www.cssmojo.com/latest_new_clearfix_so_far/\">CSS Mojo</a> has pointed out that when targeting modern browsers, we can now drop the <code>zoom</code> and <code>::before</code> property/values and simply use:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container:after {\n  content:\"\";\n  display:table;\n  clear:both;\n}\n</code></pre>\n\n<p><em>This solution does not support for IE 6/7 \u2026on purpose!</em></p>\n\n<p>Thierry also offers: \"<a href=\"http://www.cssmojo.com/latest_new_clearfix_so_far/#why-is-that\">A word of caution</a>: if you start a new project from scratch, go for it, but don\u2019t swap this technique with the one you have now, because even though you do not support oldIE, your existing rules prevent collapsing margins.\"</p>\n\n<hr>\n\n<h2>Micro Clearfix</h2>\n\n<p>The most recent and globally adopted clearfix solution, the <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">Micro Clearfix by Nicolas Gallagher</a>.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container:before,\n.container:after {\n  content:\"\";\n  display:table;\n}\n.container:after {\n  clear:both;\n}\n.container {\n  zoom:1; /* For IE 6/7 (trigger hasLayout) */\n}\n</code></pre>\n\n<hr>\n\n<h2>Overflow Property</h2>\n\n<p>This basic method is preferred for the usual case, when positioned content will not show outside the bounds of the container.</p>\n\n<p><a href=\"http://www.quirksmode.org/css/clearing.html\">http://www.quirksmode.org/css/clearing.html</a>\n- <em>explains how to resolve common issues related to this technique, namely, setting <code>width: 100%</code> on the container.</em></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container {\n    overflow: hidden;\n    display: inline-block; /* Necessary to trigger \"hasLayout\" in IE */\n    display: block; /* Sets element back to block */\n}\n</code></pre>\n\n<p>Rather than using the <code>display</code> property to set \"hasLayout\" for IE, other properties can be used for <a href=\"http://www.satzansatz.de/cssd/onhavinglayout.html\">trigering \"hasLayout\" for an element</a>.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container {\n    overflow: hidden; /* Clearfix! */\n    zoom: 1;  /* Triggering \"hasLayout\" in IE */\n    display: block; /* Element must be a block to wrap around contents. Unnecessary if only using block-level elements. */\n}\n</code></pre>\n\n<p>Another way to clear floats using the <code>overflow</code> property is to use the <a href=\"http://wellstyled.com/css-underscore-hack.html\">underscore hack</a>. IE will apply the values prefixed with the underscore, other browsers will not. The <code>zoom</code> property triggers <a href=\"http://www.satzansatz.de/cssd/onhavinglayout.html\">hasLayout</a> in IE:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container {\n    overflow: hidden;\n    _overflow: visible; /* for IE */\n    _zoom: 1; /* for IE */\n}\n</code></pre>\n\n<p>While this works\u2026 it is ideal not to use hacks.</p>\n\n<hr>\n\n<h2>\":after\" Pseudo-element</h2>\n\n<p>This older \"Easy Clearing\" method has the advantage of allowing positioned elements to hang outside the bounds of the container, at the expense of more tricky CSS.</p>\n\n<p><a href=\"http://www.positioniseverything.net/easyclearing.html\">http://www.positioniseverything.net/easyclearing.html</a></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container {\n    display: inline-block;\n}\n.container:after {\n    content: \" \";\n    display: block;\n    height: 0;\n    clear: both;\n    overflow: hidden;\n    visibility: hidden;\n}\n.container {\n    display: block;\n}\n</code></pre>\n\n<hr>\n\n<h2>Element using \"clear\" property</h2>\n\n<p>The quick and dirty solution:</p>\n\n<pre><code>&lt;br style=\"clear:both\" /&gt; &lt;!-- So dirty! --&gt;\n</code></pre>\n\n<p>Using the clearing element solution is not ideal for many reasons:</p>\n\n<ul>\n<li>the main reason: you're putting presentation in your markup. This makes reusing the markup more difficult if you don't want the <code>&lt;br&gt;</code> style in another context where the same markup is used. CSS should be used to style the same markup differently in different contexts.</li>\n<li>doesn't add any semantic value to your markup,</li>\n<li>makes your code look un-professional, and</li>\n<li>in the future when other clearfix solutions are available you won't have to go back and remove all the <code>&lt;br&gt;</code> tags which are littered around in your markup.</li>\n</ul>\n\n<hr>\n\n<h2>Choose wisely. =)</h2>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Beau Smith",
                        "user_id": 101290
                    },
                    "score": 645
                },
                {
                    "body": "<p>I'd float <code>#content</code> too, that way both columns contain floats. Also because it will allow you to clear elements inside <code>#content</code> without clearing the side bar.</p>\n\n<p>Same thing with the wrapper, you'd need to make it a block formatting context to wrap the two columns.</p>\n\n<p>This article mentions a few triggers you can use:\n<a href=\"http://www.tjkdesign.com/articles/block-formatting-contexts_and_hasLayout.asp\" rel=\"nofollow\">block formatting contexts</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Thierry Koblentz",
                        "user_id": 350504
                    },
                    "score": 1
                },
                {
                    "body": "<p>honestly; all solutions seem to be a hack to fix a rendering bug ... am i wrong?</p>\n\n<p>i've found <code>&lt;br clear=\"all\" /&gt;</code> to be the easiest, simplest. seeing <code>class=\"clearfix\"</code> everywhere can't stroke the sensibilities of someone who objects to extraneous markeup elements, can it? you're just painting the problem on a different canvas.</p>\n\n<p>i also use the <code>display: hidden</code> solution, which is great and requires no extra class declarations or html markup ... but sometimes you need the elements to overflow the container, for eg. pretty ribbons and sashes</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "duggi",
                        "user_id": 262942
                    },
                    "score": 2
                },
                {
                    "body": "<p>I recommend using the following, which is taken from <a href=\"http://html5boilerplate.com/\" rel=\"nofollow\">http://html5boilerplate.com/</a></p>\n\n<pre><code>/* &gt;&gt; The Magnificent CLEARFIX &lt;&lt; */\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>.clearfix:after { \n  content: \".\"; \n  display: block; \n  height: 0; \n  clear: both; \n  visibility: hidden; \n}\n.clearfix { \n  display: inline-block;  \n}\n* html .clearfix {  \n  height: 1%;  \n} /* Hides from IE-mac \\*/\n.clearfix {  \n  display: block;  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eric the Red",
                        "user_id": 86537
                    },
                    "score": 22
                },
                {
                    "body": "<p>I just use :-</p>\n\n<pre><code>.clear:after{\n  clear: both;\n  content: \"\";\n  display: block;\n}\n</code></pre>\n\n<p>Works best and compatible with IE8+ :)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SalmanPK",
                        "user_id": 362006
                    },
                    "score": 4
                },
                {
                    "body": "<p>You could also put this in your CSS:</p>\n\n<pre><code>.cb:after{\n  visibility: hidden;\n  display: block;\n  content: \".\";\n  clear: both;\n  height: 0;\n}\n\n*:first-child+html .cb{zoom: 1} /* for IE7 */\n</code></pre>\n\n<p>And add class \"cb\" to your parent div:</p>\n\n<pre><code>&lt;div id=\"container\" class=\"cb\"&gt;\n</code></pre>\n\n<p>You will not need to add anything else to your original code...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Hakan",
                        "user_id": 673108
                    },
                    "score": 0
                },
                {
                    "body": "<p>This is quite a tidy solution: </p>\n\n<pre><code>/* For modern browsers */\n.cf:before,\n.cf:after {\n    content:\"\";\n    display:table;\n}\n\n.cf:after {\n    clear:both;\n}\n\n/* For IE 6/7 (trigger hasLayout) */\n.cf {\n    zoom:1;\n}\n</code></pre>\n\n<blockquote>\n  <p>It's known to work in Firefox 3.5+, Safari 4+, Chrome, Opera 9+, IE 6+</p>\n  \n  <p>Including the :before selector is not necessary to clear the floats,\n  but it prevents top-margins from collapsing in modern browsers. This\n  ensures that there is visual consistency with IE 6/7 when zoom:1 is\n  applied.</p>\n</blockquote>\n\n<p>From <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">http://nicolasgallagher.com/micro-clearfix-hack/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "paulslater19",
                        "user_id": 705752
                    },
                    "score": 9
                },
                {
                    "body": "<p>Why just trying to use css hack to do what 1 line of HTML do the job. And why not to use semantic html tu put break to return to the line?</p>\n\n<p>Fo me is realy better to use : </p>\n\n<pre><code>&lt;br style=\"clear:both\" /&gt;\n</code></pre>\n\n<p>And if you don't want any style in your html you just have to use class for your break\n\nand put <code>.clear { clear:both; }</code> in your CSS.</p>\n\n<p>Advantage of this:</p>\n\n<ul>\n<li>Semantic use of html for return to the line</li>\n<li>If no CSS load it will be working</li>\n<li>No need extra CSS code and Hack</li>\n<li>no need to simulate the br with CSS, it's already exist in HTML</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Phpascal",
                        "user_id": 762759
                    },
                    "score": 0
                },
                {
                    "body": "<p>Assuming you're using this HTML structure:</p>\n\n<pre><code>&lt;div id=\"container\"&gt;\n  &lt;div id=\"content\"&gt;\n  &lt;/div&gt;\n  &lt;div id=\"sidebar\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Here's the CSS that I would use:</p>\n\n<pre><code>div#container {\n    overflow: hidden;    /* makes element contain floated child elements */\n}\n\ndiv#content, div#sidebar {\n    float: left;\n    display: inline;    /* preemptively fixes IE6 dobule-margin bug */\n}\n</code></pre>\n\n<p>I use this set all the time and it works fine for me, even in IE6.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tim Huynh",
                        "user_id": 576066
                    },
                    "score": 0
                },
                {
                    "body": "<p>I always float the main sections of my grid and apply <code>clear: both;</code> to the footer. That doesn't require an extra div or class.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Neil G",
                        "user_id": 899758
                    },
                    "score": 3
                },
                {
                    "body": "<h2>What problems are we trying to solve?</h2>\n\n<p>There are two important considerations when floating stuff:</p>\n\n<ol>\n<li><p><strong>Containing descendant floats.</strong> This means that the element in question makes itself tall enough to wrap all floating descendants. (They don't hang outside.)</p>\n\n<p><img src=\"http://i.stack.imgur.com/3AUJp.png\" alt=\"Floating content hanging outside its container\"></p></li>\n<li><p><strong>Insulating descendants from outside floats.</strong> This means that descendants inside of an element should be able to use <code>clear: both</code> and have it not interact with floats outside the element.</p>\n\n<p><img src=\"http://i.stack.imgur.com/XIMXt.png\" alt=\"&lt;code&gt;clear: both&lt;/code&gt; interacting with a float elsewhere in the DOM\"></p></li>\n</ol>\n\n<h2>Block formatting contexts</h2>\n\n<p>There's only one way to do both of these. And that is to establish a new <a href=\"https://developer.mozilla.org/en/CSS/block_formatting_context\">block formatting context</a>. Elements that establish a block formatting context are an insulated rectangle in which floats interact with each other. A block formatting context will always be tall enough to visually wrap its floating descendants, and no floats outside of a block formatting context may interact with elements inside. This two-way insulation is exactly what you want. In IE, this same concept is called <a href=\"http://www.satzansatz.de/cssd/onhavinglayout.html\">hasLayout</a>, which can be set via <code>zoom: 1</code>.</p>\n\n<p>There are several ways to establish a block formatting context, but the solution I recommend is <code>display: inline-block</code> with <code>width: 100%</code>. (Of course, there are the <a href=\"http://stackoverflow.com/questions/5219175/width-100-padding\">usual caveats</a> with using <code>width: 100%</code>, so use <code>box-sizing: border-box</code> or put <code>padding</code>, <code>margin</code>, and <code>border</code> on a different element.)</p>\n\n<h2>The most robust solution</h2>\n\n<p>Probably the most common application of floats is the two-column layout. (Can be extended to three columns.) First the markup structure.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"container\"&gt;\n  &lt;div class=\"sidebar\"&gt;\n    sidebar&lt;br/&gt;sidebar&lt;br/&gt;sidebar\n  &lt;/div&gt;\n  &lt;div class=\"main\"&gt;\n    &lt;div class=\"main-content\"&gt;\n      main content\n      &lt;span style=\"clear: both\"&gt;\n        main content that uses &lt;code&gt;clear: both&lt;/code&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And now the CSS.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>/* Should contain all floated and non-floated content, so it needs to\n * establish a new block formatting context without using overflow: hidden. */\n.container {\n  display: inline-block;\n  width: 100%;\n  zoom: 1; /* new block formatting context via hasLayout for IE 6/7 */\n}\n\n/* Fixed-width floated sidebar. */\n.sidebar {\n  float: left;\n  width: 160px;\n}\n\n/* Needs to make space for the sidebar. */\n.main {\n  margin-left: 160px;\n}\n\n/* Establishes a new block formatting context to insulate descendants from\n * the floating sidebar. */\n.main-content {\n  display: inline-block;\n  width: 100%;\n  zoom: 1; /* new block formatting context via hasLayout for IE 6/7 */\n}\n</code></pre>\n\n<h2>Try it yourself</h2>\n\n<p>Go to <a href=\"http://jsbin.com/eciwev/1/edit\">JS Bin</a> to play around with the code and see how this solution is built from the ground up.</p>\n\n<h2>Traditional clearfix methods considered harmful</h2>\n\n<p>The problem with the traditional <a href=\"http://www.positioniseverything.net/easyclearing.html\">clearfix</a> <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">solutions</a> is that they use two different rendering concepts to achieve the same goal for IE and everyone else. In IE they use hasLayout to establish a new block formatting context, but for everyone else they use generated boxes (<code>:after</code>) with <code>clear: both</code>, which does not establish a new block formatting context. This means things won't behave the same in all situations. For an explanation of why this is bad, see <a href=\"http://www.tjkdesign.com/articles/clearfix_block-formatting-context_and_hasLayout.asp\">Everything you Know about Clearfix is Wrong</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Christopher James Calo",
                        "user_id": 101869
                    },
                    "score": 45
                },
                {
                    "body": "<p>I have tried all these solutions, a big margin will be added to <code>&lt;html&gt;</code> element automatically when I use the code below:</p>\n\n<pre><code>.clearfix:after {   \n    visibility: hidden;   \n    display: block;   \n    content: \".\";   \n    clear: both;   \n    height: 0;\n}\n</code></pre>\n\n<p>Finally, I solved the margin problem by adding <code>font-size: 0;</code> to the above CSS.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jfxiao",
                        "user_id": 1252528
                    },
                    "score": 2
                },
                {
                    "body": "<p>A clearfix is a way for an element to automatically clear after itself, \nso that you don't need to add additional markup.</p>\n\n<pre><code>.clearfix:after {\n   content: \" \"; /* Older browser do not support empty content */\n   visibility: hidden;\n   display: block;\n   height: 0;\n   clear: both;\n}\n.cleaner {\n  clear: both;\n}\n</code></pre>\n\n<p>Normally you would need to do something as follows:</p>\n\n<pre><code>&lt;div style=\"float: left;\"&gt;Sidebar&lt;/div&gt;\n&lt;div class=\"cleaner\"&gt;&lt;/div&gt; &lt;!-- Clear the float --&gt;\n</code></pre>\n\n<p>With clearfix, you only need to</p>\n\n<pre><code>&lt;div style=\"float: left;\" class=\"clearfix\"&gt;Sidebar&lt;/div&gt;\n&lt;!-- No Clearing div! --&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gaurang",
                        "user_id": 1453858
                    },
                    "score": 1
                },
                {
                    "body": "<p>Clearfix from bootstrap:</p>\n\n<pre><code>.clearfix {\n  *zoom: 1;\n}\n\n.clearfix:before,\n.clearfix:after {\n  display: table;\n  line-height: 0;\n  content: \"\";\n}\n\n.clearfix:after {\n  clear: both;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user1870829"
                    },
                    "score": 6
                },
                {
                    "body": "<pre><code>&lt;style type=\"text/css\"&gt;\n   #content{float:left;}\n   #sidebar{float:left;}\n   .clear{clear:both; display:block; height:0px; width:0px; overflow:hidden;}\n&lt;/style&gt;\n\n\n&lt;div id=\"container\"&gt;\n  &lt;div id=\"content\"&gt;text 1 &lt;/div&gt;\n  &lt;div id=\"sidebar\"&gt;text 2&lt;/div&gt;\n  &lt;div class=\"clear\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vipul",
                        "user_id": 937911
                    },
                    "score": 0
                },
                {
                    "body": "<pre><code>.clearFix:after { \n    content: \"\";\n    display: table;  \n    clear: both;  \n}\n</code></pre>\n\n<p>There are other different Concept of developers about clearfix\n<a href=\"http://www.wpreads.com/2013/03/floating-elements-css-clearfix.html\" rel=\"nofollow\">http://www.wpreads.com/2013/03/floating-elements-css-clearfix.html</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Musa Butt",
                        "user_id": 2174728
                    },
                    "score": 0
                },
                {
                    "body": "<p>With LESS (<a href=\"http://lesscss.org/\" rel=\"nofollow\">http://lesscss.org/</a>), one can create a handy clearfix helper:</p>\n\n<pre><code>.clearfix() {\n  zoom: 1;\n  &amp;:before { \n    content: ''; \n    display: block; \n  }\n  &amp;:after { \n    content: ''; \n    display: table; \n    clear: both; \n  }\n}\n</code></pre>\n\n<p>And then use it with problematic containers, for example:</p>\n\n<pre><code># HTML\n&lt;div id=\"container\"&gt;\n  &lt;div id=\"content\"&gt;&lt;/div&gt;\n  &lt;div id=\"sidebar\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n# LESS\ndiv#container {\n  .clearfix();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jmu",
                        "user_id": 454985
                    },
                    "score": 0
                },
                {
                    "body": "<p>The new standard, as used by <a href=\"http://inuitcss.com/\">Inuit.css</a> and <a href=\"http://bourbon.io\">Bourbon</a> - two very widely used and well-maintained CSS/Sass frameworks:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.btcf:after {\n    content:\"\";\n    display:table;\n    clear:both;\n}\n</code></pre>\n\n<hr>\n\n<h3>Notes</h3>\n\n<p>This doesn't support IE7. You <strong>shouldn't</strong> be supporting IE7. Doing so continues to expose users to unfixed exploits and makes life harder for all other web developers, as it reduces the pressure on users and organisations to switch to modern browsers.</p>\n\n<p>It was <a href=\"http://www.css-101.org/articles/clearfix/latest-new-clearfix-so-far.php\">announced and explained by Thierry Koblentz</a> in July 2012. It sheds unnecessary weight from <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">Nicolas Gallagher's 2011 micro-clearfix</a>. In the process, it frees a pseudo-element for your own use.</p>\n\n<p><em>It's now at least a year since this method was devised, and the original unwieldy top answer should be updated - this is a very popular question.</em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "iono",
                        "user_id": 1129420
                    },
                    "score": 34
                },
                {
                    "body": "<p>I always use the micro-clearfix (mentioned by others). In fact, in <a href=\"http://www.cascade-framework.com/\" rel=\"nofollow\"><strong>Cascade Framework</strong></a> I apply it by default on block level elements.</p>\n\n<p>IMO, applying it by default on block level elements gives block level elements more intuitive behavior than their traditonal behavior. It also made it a lot easier for me to add support for older browsers to Cascade Framework (which supports IE6-8 as well as modern browsers).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Slegers",
                        "user_id": 1946501
                    },
                    "score": 0
                },
                {
                    "body": "<p>With SASS, the clearfix is:</p>\n\n<pre><code>@mixin clearfix {\n    &amp;:before, &amp;:after {\n        content: '';\n        display: table;\n    }\n    &amp;:after {\n        clear: both;\n    }\n    *zoom: 1;\n}\n</code></pre>\n\n<p>and it's used like:</p>\n\n<pre><code>.container\u00a0{\n    @include clearfix;\n}\n</code></pre>\n\n<p>if you want the new clearfix:</p>\n\n<pre><code>@mixin newclearfix {\n    &amp;:after {\n        content:\"\";\n        display:table;\n        clear:both;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "fernandopasik",
                        "user_id": 1877754
                    },
                    "score": 1
                },
                {
                    "body": "<p>Given the huge amount of replies I was not gonna post. However, this method may help someone, as it did help me.</p>\n\n<h2>Stay way from floats whenever possible</h2>\n\n<p>It's worth to mention, I avoid floats like Ebola. There's many reasons and I am not alone; Read Rikudo answer about <a href=\"http://stackoverflow.com/questions/8554043/what-is-clearfix\">what is a clearfix</a> and you'll see what I mean. In his own words: <code>...the use of floated elements for layout is getting more and more discouraged with the use of better alternatives...</code> </p>\n\n<p>There are other good (and sometimes better) options out there other than floats. As technology advances and improves, <a href=\"https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_flexible_boxes\" rel=\"nofollow\">flexbox</a> (and other methods) are going to be widely adopted and floats will become just a bad memory. Maybe a CSS4?</p>\n\n<hr>\n\n<h2>Float misbehavior and failed clears</h2>\n\n<p>First off, sometimes, you may think that you are safe from floats until your lifesaver is punctured and your html flow starts to sink:</p>\n\n<p>In the codepen <a href=\"http://codepen.io/omarjuvera/pen/jEXBya\" rel=\"nofollow\">http://codepen.io/omarjuvera/pen/jEXBya</a> below, the practice of clearing a float with <code>&lt;div classs=\"clear\"&gt;&lt;/div&gt;</code> (or other element) is common but frown upon and anti-semantic.</p>\n\n<pre><code>&lt;div class=\"floated\"&gt;1st&lt;/div&gt;\n&lt;div class=\"floated\"&gt;2nd&lt;/div&gt;\n&lt;div class=\"floated\"&gt;3nd&lt;/div&gt;\n&lt;div classs=\"clear\"&gt;&lt;/div&gt; &lt;!-- Acts as a wall --&gt;\n&lt;section&gt;Below&lt;/section&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>div {\n    border: 1px solid #f00;\n    width: 200px;\n    height: 100px;\n}\n\ndiv.floated {\n    float: left;\n}\n\n.clear {\n    clear: both;\n}\nsection {\n    border: 1px solid #f0f;\n}\n</code></pre>\n\n<p><strong>However</strong>, just when you thought your float is sail worthy...boom! As the screen size becomes smaller and smaller you see weird behaviors in like the graphic below (Same <a href=\"http://codepen.io/omarjuvera/pen/jEXBya\" rel=\"nofollow\">http://codepen.io/omarjuvera/pen/jEXBya</a>):</p>\n\n<p><img src=\"http://i.stack.imgur.com/BHCiv.png\" alt=\"float bug sample 1\"></p>\n\n<p><strong>Why should you care?</strong>\nI am not sure of the exact figure but about 80% (or more) of the devices used are mobile devices with small screens. Desktop computers/laptops are no longer king.</p>\n\n<hr>\n\n<h2>It does not end there</h2>\n\n<p>This is not the only problem with floats. There are many, but in this example, some may say <code>all you have to do is to place your floats in a container</code>. But as you can see in the <a href=\"http://codepen.io/omarjuvera/pen/XJoMYG\" rel=\"nofollow\">codepen</a> and graphic, that is not the case. It apparently made things worst:</p>\n\n<p>HTML</p>\n\n<pre><code>&lt;div id=\"container\" class=\"\"&gt;\n  &lt;div class=\"floated\"&gt;1st&lt;/div&gt;\n  &lt;div class=\"floated\"&gt;2nd&lt;/div&gt;\n  &lt;div class=\"floated\"&gt;3nd&lt;/div&gt;\n&lt;/div&gt; &lt;!-- /#conteiner --&gt;\n&lt;div classs=\"clear\"&gt;&lt;/div&gt; &lt;!-- Acts as a wall --&gt;\n&lt;section&gt;Below&lt;/section&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre><code>#container {\n  min-height: 100px; /* To prevent it from collapsing */\n  border: 1px solid #0f0;\n}\n.floated {\n    float: left;\n    border: 1px solid #f00;\n    width: 200px;\n    height: 100px;\n}\n\n.clear {\n    clear: both;\n}\nsection {\n    border: 1px solid #f0f;\n}\n</code></pre>\n\n<p>As for the result?</p>\n\n<p>It's the *** same!\n<img src=\"http://i.stack.imgur.com/SDY1J.png\" alt=\"float bug sample 2\"></p>\n\n<p>Least you know, you'll start a CSS party, inviting all kinds of selectors and properties to the party; making a bigger mess of your CSS than what you started with. Just to fix your float.</p>\n\n<hr>\n\n<h2>CSS Clearfix to the rescue</h2>\n\n<p>This simple and very adaptable piece of CSS is a beauty and a \"savior\":</p>\n\n<pre><code>.clearfix:before, .clearfix:after { \n    content: \"\";\n    display: table;\n    clear: both;\n    zoom: 1; /* ie 6/7 */\n}\n</code></pre>\n\n<p>That's it! It really works without breaking semantics and did I mention <a href=\"http://codepen.io/omarjuvera/pen/wBRJaz\" rel=\"nofollow\">it works?</a>:</p>\n\n<p>From the same sample...<strong>HTML</strong></p>\n\n<pre><code>&lt;div class=\"clearfix\"&gt;\n    &lt;div class=\"floated\"&gt;1st&lt;/div&gt;\n    &lt;div class=\"floated\"&gt;2nd&lt;/div&gt;\n    &lt;div class=\"floated\"&gt;3nd&lt;/div&gt;\n&lt;/div&gt;\n&lt;section&gt;Below&lt;/section&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>div.floated {\n    float: left;\n    border: 1px solid #f00;\n    width: 200px;\n    height: 100px;\n}\nsection {\n        border: 4px solid #00f;\n}\n\n\n.clearfix:before, .clearfix:after { \n    content: \"\";\n    display: table;\n    clear: both;\n    zoom: 1; /* ie 6/7 */\n}\n</code></pre>\n\n<hr>\n\n<p>Now we no longer need <code>&lt;div classs=\"clear\"&gt;&lt;/div&gt; &lt;!-- Acts as a wall --&gt;</code> and keep the semantic police happy. This is not the only benefit. This clearfix is responsive to any screen size without the use of <code>@media</code> in it's simplest form. In other words, it will keep your float container in check and preventing floodings. Lastly, it provides support for old browsers all in one small karate chop =) </p>\n\n<h1>Here's the clearfix again</h1>\n\n<pre><code>.clearfix:before, .clearfix:after { \n    content: \"\";\n    display: table;\n    clear: both;\n    zoom: 1; /* ie 6/7 */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Omar",
                        "user_id": 931377
                    },
                    "score": 1
                }
            ],
            "body": "<p>I have the age-old problem of a <code>div</code> wrapping a two-column layout. My sidebar is floated, so my container <code>div</code> fails to wrap the content and sidebar.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div id=\"container\"&gt;\n  &lt;div id=\"content\"&gt;&lt;/div&gt;\n  &lt;div id=\"sidebar\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>There seem to be numerous methods of fixing the clear bug in FF:</p>\n\n<ul>\n<li><code>&lt;br clear=\"all\"/&gt;</code></li>\n<li><code>overflow:auto</code></li>\n<li><code>overflow:hidden</code></li>\n<li>etc.</li>\n</ul>\n\n<p>But in my situation, the only one that seems to work correctly is the <code>&lt;br clear=\"all\"/&gt;</code> solution, which is a little bit scruffy. <code>overflow:auto</code> gives me nasty scrollbars, and <code>overflow:hidden</code> must surely have side effects.\nAlso, IE7 is apparently supposed to not suffer from this problem due to its incorrect behaviour, but in my situation it\u2019s suffering the same as FF.</p>\n\n<p>What\u2019s the most reliable and best-practice method currently available to us?</p>\n",
            "last_activity_date": 1426808603,
            "owner": {
                "display_name": "Chris J Allen",
                "user_id": 26107
            },
            "question_id": 211383,
            "score": 491,
            "tags": [
                "css",
                "clearfix"
            ],
            "title": "Which method of \u2018clearfix\u2019 is best?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>No, there is no \"previous sibling\" selector.</p>\n\n<p>On a related note, <code>~</code> is for general successor sibling (meaning the element comes after this one, but not necessarily immediately after) and is a CSS3 selector. <code>+</code> is for next sibling and is CSS2.1.</p>\n\n<p>See <a href=\"http://www.w3.org/TR/css3-selectors/#adjacent-sibling-combinators\">Adjacent sibling combinator</a> from <a href=\"http://www.w3.org/TR/css3-selectors/\">Selectors Level 3</a> and <a href=\"http://www.w3.org/TR/CSS21/selector.html#adjacent-selectors\">5.7 Adjacent sibling selectors</a> from <a href=\"http://www.w3.org/TR/CSS21/cover.html#minitoc\">Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification</a>.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "cletus",
                        "user_id": 18393
                    },
                    "score": 249
                },
                {
                    "body": "<p>I had the same question, but then I had a \"duh\" moment.   Instead of writing</p>\n\n<pre><code>x ~ y\n</code></pre>\n\n<p>write </p>\n\n<pre><code>y ~ x\n</code></pre>\n\n<p>Obviously this matches \"x\" instead of \"y\", but it answers the \"is there a match?\" question, and simple DOM traversal may get you to the right element more efficiently than looping in javascript.</p>\n\n<p>I realize that the original question was a CSS question so this answer is probably completely irrelevant, but other Javascript users may stumble on the question via search like I did.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bryan Larsen",
                        "user_id": 91365
                    },
                    "score": 48
                },
                {
                    "body": "<p><a href=\"http://dev.w3.org/csswg/selectors4/#subject\">Selectors level 4 introduces <code>!</code></a> which (if I'm interpreting the draft correctly) will allow you to select the desired subject of the selector (in this case <code>previous</code>) with:</p>\n\n<pre><code>!previous + next {}\n</code></pre>\n\n<p>\u2026 but at the time of writing, it is some distance beyond the bleeding edge for browser support.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Quentin",
                        "user_id": 19068
                    },
                    "score": 44
                },
                {
                    "body": "<p>Depending on your exact objective, there is a way to achieve the usefulness of a parent selector without using one (even if one were to exist)...</p>\n\n<p>Say we have:</p>\n\n<pre><code>&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a&gt;Pants&lt;/a&gt;        \n    &lt;li&gt;&lt;a&gt;Socks&lt;/a&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a&gt;White socks&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a&gt;Blue socks&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>What can we do to make the Socks block (including sock colours) stand out visually using spacing?</p>\n\n<p>What would be nice but doesn't exist:</p>\n\n<pre><code>ul li ul:parent {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n</code></pre>\n\n<p>What does exist:</p>\n\n<pre><code>li &gt; a {\n  margin-top: 15px;\n  display: block;\n}\nli &gt; a:only-child {\n  margin-top: 0px;\n}\n</code></pre>\n\n<p>This sets all anchor links to have 15px margin on the top and resets it back to 0 for those with no UL elements (or other tags) inside LIs.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "DynamicDan",
                        "user_id": 916632
                    },
                    "score": 0
                },
                {
                    "body": "<p>There is no \"previous\" sibling selector unfortunately, but you can <em>possibly</em> still get the same effect by using positioning (e.g. float right). It depends on what you are trying to do.</p>\n\n<p>In my case, I wanted a primarily CSS 5-star rating system. I would need to color (or swap the icon of) the previous stars. By floating each element right, I am essentially getting the same effect (the html for the stars thus must be written 'backwards').</p>\n\n<p>I'm using FontAwesome in this example and swapping between the unicodes of fa-star-o and fa-star\n<a href=\"http://fortawesome.github.io/Font-Awesome/\" rel=\"nofollow\">http://fortawesome.github.io/Font-Awesome/</a></p>\n\n<p>CSS:</p>\n\n<pre><code>.fa {\n    display: inline-block;\n    font-family: FontAwesome;\n    font-style: normal;\n    font-weight: normal;\n    line-height: 1;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\n/* set all stars to 'empty star' */\n.stars-container {\n    display: inline-block;      \n}   \n\n/* set all stars to 'empty star' */\n.stars-container .star {\n    float: right;\n    display: inline-block;\n    padding: 2px;\n    color: orange;\n    cursor: pointer;\n\n}\n\n.stars-container .star:before {\n    content: \"\\f006\"; /* fontAwesome empty star code */\n}\n\n/* set hovered star to 'filled star' */\n.star:hover:before{\n    content: \"\\f005\"; /* fontAwesome filled star code */\n}\n\n/* set all stars after hovered to'filled star' \n** it will appear that it selects all after due to positioning */\n.star:hover ~ .star:before {\n    content: \"\\f005\"; /* fontAwesome filled star code */\n}\n</code></pre>\n\n<p>HTML:\n    \n        \n             \n             \n             \n             \n             \n        \n        (40)\n    </p>\n\n<p>JSFiddle: <a href=\"http://jsfiddle.net/andrewleyva/88j0105g/\" rel=\"nofollow\">http://jsfiddle.net/andrewleyva/88j0105g/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andrew Leyva",
                        "user_id": 1636286
                    },
                    "score": 1
                },
                {
                    "body": "<p>If you know the exact position an <code>:nth-child()</code>-based exclusion of all following siblings would work.</p>\n\n<pre><code>ul li:not(:nth-child(n+3))\n</code></pre>\n\n<p>Which would select all <code>li</code>s before the 3rd (e.g. 1st and 2nd). But, in my opinion this looks ugly and has a very tight usecase.</p>\n\n<p>You also could select the nth-child right-to-left:</p>\n\n<pre><code>ul li:nth-child(-n+2)\n</code></pre>\n\n<p>Which does the same.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "kernel",
                        "user_id": 622041
                    },
                    "score": 0
                },
                {
                    "body": "<p>There is no official way to do that at the moment but you can use a little trick to achieve this ! Remember that it is experimental and it has some limitation ...\n(check <a href=\"http://fmbip.com/litmus/\" rel=\"nofollow\">this link</a> if you worries about navigator compatibility )</p>\n\n<p>What you can do is use  a CSS3 selector or more likely a pseudo classe called <code>nth-child()</code></p>\n\n<h2>Source code</h2>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;1&lt;/li&gt; &lt;!-- this will be selected --&gt;\n    &lt;li&gt;2&lt;/li&gt; &lt;!-- this will be selected --&gt;\n    &lt;li&gt;3&lt;/li&gt; &lt;!-- this will be selected --&gt;\n    &lt;li&gt;4&lt;/li&gt; &lt;!-- this will be selected --&gt;\n    &lt;li&gt;5&lt;/li&gt;\n    &lt;li&gt;6&lt;/li&gt;\n    &lt;li&gt;7&lt;/li&gt;\n    &lt;li&gt;8&lt;/li&gt;\n    &lt;li&gt;9&lt;/li&gt;\n&lt;/ul&gt;\n\nli {\n    display: inline-block;\n    padding: 20px 28px;\n    margin-right: 5px;\n    border: 1px solid #bbb;\n    background: #ddd;\n    color: #444;\n    margin: 0.4em 0;\n}\n\nli:nth-child(-n+4) {\n    color: #600b90;\n    border: 1px dashed red;\n    background: orange;\n}\n</code></pre>\n\n<h2>Working exemple</h2>\n\n<p><a href=\"http://jsfiddle.net/aLhv9r1w/\" rel=\"nofollow\">http://jsfiddle.net/aLhv9r1w/</a></p>\n\n<h2>Limitations</h2>\n\n<ul>\n<li>All emlement have to be the same type of node (div, p, h1 or whatever, but all the same)</li>\n<li>You can't select previous elements based on the classes of the next elements</li>\n<li>This is the same for pseudo classes</li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "0x1gene",
                        "user_id": 2071284
                    },
                    "score": 3
                },
                {
                    "body": "<p>There is <strong>no way</strong> in CSS to directly select previous siblings. But there is a little trick that will help to achieve this. </p>\n\n<p>You can use unicode-bidi and direction properties to reverse the rendering order of element, and then you use adjacent or general sibling selector will select those elements which is before the current eleemnt.</p>\n\n<p>Here is the fiddle: <a href=\"http://jsfiddle.net/jerryliu1/0hvbs0x5/\" rel=\"nofollow\">Star-Rating with CSS</a>, hope this will help!</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div class=\"rating\"&gt;\n    &lt;span&gt;&amp;#9734;&lt;/span&gt;\n    &lt;span&gt;&amp;#9734;&lt;/span&gt;\n    &lt;span&gt;&amp;#9734;&lt;/span&gt;\n    &lt;span&gt;&amp;#9734;&lt;/span&gt;\n    &lt;span&gt;&amp;#9734;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>.rating{\n    unicode-bidi: bidi-override;\n    direction: rtl;\n    text-align: center;\n}\n.rating &gt; span {\n    display: inline-block;\n    position: relative;\n    width: 1.1em;\n}\n.rating &gt; span:hover{\n    cursor:pointer;\n}\n.rating &gt; span:hover:before,\n.rating &gt; span:hover ~ span:before{\n    content: \"\\2605\";\n    position: absolute;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jerry Liu",
                        "user_id": 4072873
                    },
                    "score": 1
                },
                {
                    "body": "<p>I found a way to style all previous siblings (opposite of <code>~</code>) that may work depending on what you need.</p>\n\n<p>Let's say you have a list of links and when hovering on one, all the previous ones should turn red. You can do it like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/* default link color is blue */\r\n.parent a {\r\n  color: blue;\r\n}\r\n\r\n/* prev siblings should be red */\r\n.parent:hover a {\r\n  color: red;\r\n}\r\n.parent a:hover,\r\n.parent a:hover ~ a {\r\n  color: blue;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"parent\"&gt;\r\n  &lt;a href=\"#\"&gt;link&lt;/a&gt;\r\n  &lt;a href=\"#\"&gt;link&lt;/a&gt;\r\n  &lt;a href=\"#\"&gt;link&lt;/a&gt;\r\n  &lt;a href=\"#\"&gt;link&lt;/a&gt;\r\n  &lt;a href=\"#\"&gt;link&lt;/a&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "mantish",
                        "user_id": 1031587
                    },
                    "score": 10
                }
            ],
            "body": "<p><code>+</code> is for the next sibling. Is there an equivalent for the previous sibling?</p>\n",
            "last_activity_date": 1421766737,
            "owner": {
                "display_name": "Jourkey",
                "user_id": 118547
            },
            "question_id": 1817792,
            "score": 340,
            "tags": [
                "css",
                "css-selectors"
            ],
            "title": "Is there a previous sibling selector?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>Actually you need two div's for vertical centering. The div containing the content must have a width and height.</p>\n\n<pre><code>&lt;body&gt;\n&lt;div id=\"container\"&gt;\n  &lt;div id=\"content\"&gt;\n    &lt;h1&gt;Centered div&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n\n#container{\n   position: absolute;\n   top: 50%;\n   margin-top: -200px;/* half of #content height*/\n   left: 0;\n   width: 100%;\n}\n#content {\n   width: 624px;\n   margin-left: auto;\n   margin-right: auto;\n   height: 395px;\n}\n</code></pre>\n\n<p>Here is the <a href=\"http://jsfiddle.net/ssPDD/\">result</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sticks464"
                    },
                    "score": 90
                },
                {
                    "body": "<p>Unfortunately \u2014 but not surprisingly \u2014 the solution is more complicated than one would wish it to be. Also unfortunately, you'll need to use additional divs around the div you want vertically centered.</p>\n\n<p>For standards-compliant browsers like Mozilla, Opera, Safari, etc. you need to set the outer div to be displayed as a <em>table</em> and the inner div to be displayed as a <em>table-cell</em> \u2014 which can then be vertically centered. For Internet Explorer, you need to <em>position</em> the inner div <em>absolutely</em> within the outer div and then specify the <em>top</em> as <em>50%</em>. The following pages explain this technique well and provide some code samples too:</p>\n\n<ul>\n<li><a href=\"http://www.jakpsatweb.cz/css/css-vertical-center-solution.html\">Vertical Centering in CSS</a></li>\n<li><strike><a href=\"http://www.laboratoriocaffeina.it/design/2007/05/11/vertical-centering-in-css-with-unknown-height-ie7-compatible.html\">Vertical Centering in CSS with Unknown Height (ie7 compatible)</a></strike> (no longer live)</li>\n<li><a href=\"http://web.archive.org/web/20101107022613/http://www.laboratoriocaffeina.it/design/2007/05/11/vertical-centering-in-css-with-unknown-height-ie7-compatible.html\">Vertical Centering in CSS with Unknown Height (ie7 compatible)</a> (Archived article courtesy of the Wayback Machine)</li>\n</ul>\n\n<p>There is also a technique to do the vertical centering using Javascript. <a href=\"http://www.alistapart.com/d/footers/footer_variation1.html\">Vertical alignment of content with JavaScript &amp; CSS</a> demonstrates it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sids"
                    },
                    "score": 14
                },
                {
                    "body": "<p>Below is the best all-around solution I could build to vertically &amp; horizontally center a fixed-width, <strong>flexible height</strong> content box. Tested and working for recent versions of FF, Opera, Chrome, &amp; Safari, and MSIE 6+.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div class=\"outer\"&gt;\n&lt;div class=\"middle\"&gt;\n&lt;div class=\"inner\"&gt;\n\n&lt;h1&gt;The Content&lt;/h1&gt;\n\n&lt;p&gt;Once upon a midnight dreary...&lt;/p&gt;\n\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>.outer {\n    display: table;\n    position: absolute;\n    height: 100%;\n    width: 100%;\n}\n\n.middle {\n    display: table-cell;\n    vertical-align: middle;\n}\n\n.inner {\n    margin-left: auto;\n    margin-right: auto; \n    width: /*whatever width you want*/;\n}\n</code></pre>\n\n<p>To accommodate for IE 7 &amp; older, use a separate style sheet with these changes:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!--[if lte IE 7]&gt;&lt;link rel=\"stylesheet... /&gt;&lt;![endif]--&gt;;\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>.outer {\n    display: inline;\n    top: 0;\n}\n\n.middle {\n    display: inline;\n    top: 50%;\n    position: relative;\n}\n\n.inner {\n    display: inline;\n    top: -50%;\n    position: relative;\n}\n</code></pre>\n\n<p>Test page: <a href=\"http://emergentweb.com/test/valign.html\">http://emergentweb.com/test/valign.html</a></p>\n\n<p>I built in some dynamic content to test the flexibility. Would love to know if anyone sees any problems with it. Should work well for centered overlays also -- lightbox, pop-up, etc.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Billbad",
                        "user_id": 222277
                    },
                    "score": 351
                },
                {
                    "body": "<p>This is always where I go when I have to come back to <a href=\"http://phrogz.net/css/vertical-align/index.html\">this</a> issue</p>\n\n<p>For those who don't want to make the jump:</p>\n\n<ol>\n<li>Specify the parent container as position:relative or position:absolute.</li>\n<li>Specify a fixed height on the child container.</li>\n<li>Set position:absolute and top:50% on the child container to move the top down to the middle of the parent.</li>\n<li>Set margin-top:-yy where yy is half the height of the child container to offset the item up. </li>\n</ol>\n\n<p>An example of this in code:</p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n    #myoutercontainer { position:relative }\n    #myinnercontainer { position:absolute; top:50%; height:10em; margin-top:-5em }\n&lt;/style&gt;\n...\n&lt;div id=\"myoutercontainer\"&gt;\n    &lt;div id=\"myinnercontainer\"&gt;\n        &lt;p&gt;Hey look! I'm vertically centered!&lt;/p&gt;\n        &lt;p&gt;How sweet is this?!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ninx",
                        "user_id": 852874
                    },
                    "score": 10
                },
                {
                    "body": "<p>There's an even simpler trick that I use -- set the left and right margins for the div to \"auto\", and it will center it vertically.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mister R2",
                        "user_id": 1163842
                    },
                    "score": -22
                },
                {
                    "body": "<p>I did it with this (change width, height, margin-top and margin-left accordingly):</p>\n\n<pre><code>.wrapper {\n    width:960px;\n    height:590px;\n    position:absolute;\n    top:50%;\n    left:50%;\n    margin-top:-295px;\n    margin-left:-480px;\n}\n\n&lt;div class=\"wrapper\"&gt; -- Content -- &lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Netuddki",
                        "user_id": 2014088
                    },
                    "score": 1
                },
                {
                    "body": "<p>I find this one most useful.. it gives the most accurate 'H' layout and is very simple to understand.</p>\n\n<p>The benefit in this markup is that you define your content size in a single place -> \"PageContent\". <br/>\nThe Colors of the page background and its horizontal margins are defined in their corresponding divs.</p>\n\n<pre><code>&lt;div id=\"PageLayoutConfiguration\" \n     style=\"display: table;\n     position:absolute; top: 0px; right: 0px; bottom: 0px; left: 0px;\n     width: 100%; height: 100%;\"&gt;\n\n        &lt;div id=\"PageBackground\" \n             style=\"display: table-cell; vertical-align: middle;\n             background-color: purple;\"&gt;\n\n            &lt;div id=\"PageHorizontalMargins\"\n                 style=\"width: 100%;\n                 background-color: seashell;\"&gt;\n\n                &lt;div id=\"PageContent\" \n                     style=\"width: 1200px; height: 620px; margin: 0 auto;\n                     background-color: grey;\"&gt;\n\n                     my content goes here...\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>And here with CSS separated:</p>\n\n<pre><code>&lt;div id=\"PageLayoutConfiguration\"&gt;\n     &lt;div id=\"PageBackground\"&gt;\n          &lt;div id=\"PageHorizontalMargins\"&gt;\n               &lt;div id=\"PageContent\"&gt;\n                     my content goes here...\n               &lt;/div&gt;\n          &lt;/div&gt;\n     &lt;/div&gt;\n&lt;/div&gt;\n\n#PageLayoutConfiguration{\n   display: table; width: 100%; height: 100%;\n   position:absolute; top: 0px; right: 0px; bottom: 0px; left: 0px;\n}\n\n#PageBackground{\n   display: table-cell; vertical-align: middle;\n   background-color: purple;\n}\n\n#PageHorizontalMargins{\n   style=\"width: 100%;\n   background-color: seashell;\n}\n#PageContent{\n   width: 1200px; height: 620px; margin: 0 auto;\n   background-color: grey;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "G.Y",
                        "user_id": 1310846
                    },
                    "score": 0
                },
                {
                    "body": "<p>One more I can't see in the list:</p>\n\n<pre><code>.Absolute-Center {\n  margin: auto;\n  position: absolute;\n  top: 0; left: 0; bottom: 0; right: 0;\n}\n</code></pre>\n\n<ul>\n<li>Cross-browser (including IE8-10 without hacks!) </li>\n<li>Responsive with percentages and min-/max- </li>\n<li>Centered regardless of padding (without box-sizing!) </li>\n<li><code>Height</code> must be declared (see Variable Height) </li>\n<li>Recommended setting overflow: <code>auto</code> to prevent content spillover (see Overflow)</li>\n</ul>\n\n<p><sub>Source: <a href=\"http://coding.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/\">Absolute Horizontal And Vertical Centering In CSS</a></sub></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Yisela",
                        "user_id": 911854
                    },
                    "score": 62
                },
                {
                    "body": "<p>to center the Div in a page <kbd><a href=\"http://jsfiddle.net/xKH7w/\" rel=\"nofollow\">check the fiddle link</a></kbd></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#vh {\r\n    border-radius: 15px;\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.4);\r\n    padding: 25px;\r\n    width: 200px;\r\n    height: 200px;\r\n    background: white;\r\n    text-align: center;\r\n    margin: auto;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"vh\"&gt;Div to be aligned vertically&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Moes",
                        "user_id": 1592884
                    },
                    "score": 13
                },
                {
                    "body": "<p>This is the simplest method I found and I use it all the time\n(<a href=\"http://jsfiddle.net/Nhs6j/\">jsFiddle demo here</a>)</p>\n\n<p>Thank Chris Coyier from CSS Tricks for <a href=\"http://css-tricks.com/centering-in-the-unknown/\">this article</a>.</p>\n\n<p>HTML</p>\n\n<pre><code>&lt;div class=\"v-wrap\"&gt;\n    &lt;article class=\"v-box\"&gt;\n        &lt;p&gt;This is how I've been doing it for some time&lt;/p&gt;\n    &lt;/article&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre><code>.v-wrap{\n    height: 100%;\n    white-space: nowrap;\n    text-align: center;\n}\n.v-wrap:before{\n    content: \"\";\n    display: inline-block;\n    vertical-align: middle;\n    width: 0;\n    /* adjust for white space between pseudo element and next sibling */\n    margin-right: -.25em;\n    /* stretch line height */\n    height: 100%; \n}\n.v-box{\n    display: inline-block;\n    vertical-align: middle;\n    white-space: normal;\n}\n</code></pre>\n\n<p>Support starts with IE8.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Armel Larcier",
                        "user_id": 1491212
                    },
                    "score": 23
                },
                {
                    "body": "<p>This question is old enough, so if someone cares IE9+ only, can use <code>flexbox</code>:</p>\n\n<p><a href=\"http://jsfiddle.net/fTH6G/\">http://jsfiddle.net/fTH6G/</a></p>\n\n<p>flexbox support: <a href=\"http://caniuse.com/flexbox\">http://caniuse.com/flexbox</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "bravedick",
                        "user_id": 643514
                    },
                    "score": 5
                },
                {
                    "body": "<p>Best answer from Billbad only works with fixed width of the .inner div.\nMy solution for dynamical width adds the attribute text-align: center; to the .outer div. </p>\n\n<pre><code>    &lt;style&gt;\n        .outer {\n            position: absolute;\n            display: table;\n            width: 100%;\n            height: 100%;\n            text-align: center;\n        }\n\n        .middle {\n            display: table-cell;\n            vertical-align: middle;\n        }\n\n        .inner {\n            text-align: center;\n            display: inline-block;\n            width: auto;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"outer\"&gt;\n        &lt;div class=\"middle\"&gt;\n            &lt;div class=\"inner\"&gt;\n                Content\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Ruwen</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ruwen",
                        "user_id": 3603493
                    },
                    "score": 0
                },
                {
                    "body": "<p>I use this. Works in IE8+</p>\n\n<p>height:268px; - for display:table acts like min-height</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style&gt;\n        * {\n            padding:0;\n            margin:0;\n        }\n        body {\n            background:#cc9999;\n        }\n        p {\n            background:#f0ad4e;\n        }\n        #all {\n            margin:200px auto;\n        }\n        .ff-valign-wrap {\n            display:table;\n            width:100%;\n            height:268px;\n            background:#ff00ff;\n        }\n        .ff-valign {\n            display:table-cell;\n            height:100%;\n            vertical-align:middle;\n            text-align: center;\n            background:#ffff00;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;div id=\"all\"&gt;\n        &lt;div class=\"ff-valign-wrap\"&gt;\n            &lt;div class=\"ff-valign\"&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n                &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet, animi autem doloribus earum expedita, ipsum laboriosam nostrum nulla officiis optio quam quis quod sunt tempora tenetur veritatis vero voluptatem voluptates?&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rantiev",
                        "user_id": 1581949
                    },
                    "score": 0
                },
                {
                    "body": "<p>A modern way to center an element vertically would be to use <a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\" rel=\"nofollow\"><code>flexbox</code></a>. </p>\n\n<p>What you need is a parent to decide the height and a child to center. </p>\n\n<p>The example below will center a div to the center within your browser. What's important (in my example) is to set <code>height:100%</code> to <code>body</code> and <code>html</code> and then <code>min-height:100%</code> to your container.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body, html {\r\n  background:#f5f5f5;\r\n  box-sizing:border-box;\r\n  height:100%;\r\n  margin:0;\r\n}\r\n\r\n#center_container {\r\n  align-items:center;\r\n  display:flex;\r\n  min-height:100%;\r\n}\r\n\r\n#center {\r\n  background:white;\r\n  margin:0 auto;\r\n  padding:10px;\r\n  text-align:center;\r\n  width:200px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id='center_container'&gt;\r\n  &lt;div id='center'&gt;I am center.&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Marwelln",
                        "user_id": 397195
                    },
                    "score": 4
                },
                {
                    "body": "<p>Especially for parent divs with relative (unknown) height, the <a href=\"http://css-tricks.com/centering-in-the-unknown/\" rel=\"nofollow\">Centering in the unknown</a> solution works great for me. There are some really nice code examples in the article.</p>\n\n<p>Tested in Chrome, FF, Opera, IE.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div style=\"width: 400px; height: 200px;\"&gt;\n   &lt;div class=\"block\" style=\"height: 90%; width: 100%\"&gt;\n      &lt;div class=\"centered\"&gt;\n         &lt;h1&gt;Some text&lt;/h1&gt;\n         &lt;p&gt;Any other text...\"&lt;/p&gt;\n      &lt;/div&gt; \n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>/* This parent can be any width and height */\n.block {\n  text-align: center;\n}\n\n/* The ghost, nudged to maintain perfect centering */\n.block:before {\n  content: '';\n  display: inline-block;\n  height: 100%;\n  vertical-align: middle;\n  margin-right: -0.25em; /* Adjusts for spacing */\n}\n\n/* The element to be centered, can\n   also be of any width and height */ \n.centered {\n  display: inline-block;\n  vertical-align: middle;\n  width: 300px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ruwen",
                        "user_id": 3603493
                    },
                    "score": 1
                },
                {
                    "body": "<p>There are so many answers, but I just found another way which worked for me.</p>\n\n<pre><code>&lt;div class=\"container\"&gt;\n  &lt;div class=\"vertical\"&gt;\n     &lt;h1&gt;Welcome&lt;/h1&gt;\n     &lt;h2&gt;Aligned Vertically&lt;/h2&gt;\n     &lt;a href=\"#\"&gt;Click ME&lt;/a&gt;\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>css</strong></p>\n\n<pre><code>.vertical{\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n  -ms-transform: translateY(-50%);\n  transform: translateY(-50%);\n}\n</code></pre>\n\n<p>More info: <a href=\"http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/\" rel=\"nofollow\">http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rushabh RajeshKumar Padalia",
                        "user_id": 2032189
                    },
                    "score": 0
                },
                {
                    "body": "<p>The simplest way would be the following <strong>3 lines</strong> of CSS:</p>\n\n<ol>\n<li><strong>position: relative;</strong> </li>\n<li><strong>top: 50%;</strong> </li>\n<li><strong>transform: translateY(-50%);</strong></li>\n</ol>\n\n<p>Following is an example:\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div.outer-div {\r\n  height: 170px;\r\n  width: 300px;\r\n  background-color: lightgray;\r\n}\r\n\r\ndiv.middle-div {\r\n  position: relative;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class='outer-div'&gt;\r\n  &lt;div class='middle-div'&gt;\r\n    Test text\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "DrupalFever",
                        "user_id": 1411635
                    },
                    "score": 9
                },
                {
                    "body": "<p>Here is the child div at the center on vertically and horizondally....</p>\n\n<pre><code>#outer{\n    position:fixed;\n    top:0;\n    left:0;\n    width:100%;\n    height:100%;\n}\n#inner{\n    width: 50%;\n    height: 50%;\n    top: 25%;\n    margin: 0 auto;\n    position: relative;\n    background:orange;\n}\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;div id=outer&gt;\n    &lt;div id=inner&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>More about...<a href=\"http://www.corelangs.com/css/box/divindiv.html\" rel=\"nofollow\">Div Alignment</a></p>\n\n<p>George</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mc George",
                        "user_id": 3651783
                    },
                    "score": 0
                },
                {
                    "body": "<p>Vertical &amp; Horizontal <strong>CENTER</strong></p>\n\n<p>HTML</p>\n\n<pre><code>&lt;div id=\"dialog\"&gt;Centered Dialog&lt;/div&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre><code>#dialog {\n    position:fixed; top:50%; left:50%; z-index:99991;\n    width:300px; height:60px;\n    margin-top:-150px;  /* half of the width */\n    margin-left:-30px; /* half of the height */}\n</code></pre>\n\n<p>Enjoy!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Armand",
                        "user_id": 1703671
                    },
                    "score": 0
                },
                {
                    "body": "<p>By using Transform property we can do vertically center div easily.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.main-div {\r\n    background: none repeat scroll 0 0 #999;\r\n    font-size: 18px;\r\n    height: 450px;\r\n    max-width: 850px;\r\n    padding: 15px;\r\n}\r\n\r\n.vertical-center {\r\n    background: none repeat scroll 0 0 #1fa67a;\r\n    color: #ffffff;\r\n    padding: 15px;\r\n    position: relative;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    -moz-transform: translateY(-50%);\r\n    -webkit-transform: translateY(-50%);\r\n    -ms-transform: translateY(-50%);\r\n    -o-transform: translateY(-50%);\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"main-div\"&gt;\r\n    &lt;div class=\"vertical-center\"&gt;\r\n        &lt;span&gt;\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"&lt;/span&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>see here for full article : <a href=\"http://code.ciphertrick.com/2015/02/10/vertically-center-div-using-css3/\" rel=\"nofollow\">http://code.ciphertrick.com/2015/02/10/vertically-center-div-using-css3/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "inaam husain",
                        "user_id": 4066093
                    },
                    "score": 1
                },
                {
                    "body": "<p>to vertical-align a box in web page, including IE6 you may use </p>\n\n<ol>\n<li>conditionnal comments</li>\n<li>haslayout propertie</li>\n<li>display:table-value for others</li>\n</ol>\n\n<p><a href=\"https://jsfiddle.net/h8z24s5v/embedded/result/\" rel=\"nofollow\">https://jsfiddle.net/h8z24s5v/embedded/result/</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/* IE8 and others*/\r\n.main {\r\n  width:500px;\r\n  margin:auto;\r\n  border:solid;\r\n  }\r\nhtml {\r\n  height:100%;\r\n  width:100%;\r\n  display:table;\r\n  }\r\nbody {\r\n  display:table-cell;\r\n  vertical-align:middle;\r\n  }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!-- [if lte IE 7]&gt;\r\n&lt;style&gt;/* should be in the &lt;head&gt; */\r\nhtml, body , .ie {\r\nheight:100%;\r\ntext-align:center;\r\nwhite-space:nowrap;\r\n}\r\n.ie , .main{\r\ndisplay:inline;/* used with zoom in case you take a block elemnt instead an inline element*/\r\nzoom:1;\r\nvertical-align:middle;\r\ntext-align:left;\r\nwhite-space:normal;\r\n}\r\n&lt;/style&gt;\r\n&lt;b class=\"ie\"&gt;&lt;/b&gt;\r\n&lt;!--[endif]--&gt;\r\n&lt;div class=\"main\"&gt;\r\n  &lt;p&gt;Fill it up with your content &lt;/p&gt;\r\n  &lt;p&gt;&lt;a href=\"https://jsfiddle.net/h8z24s5v/embedded/result/\"&gt;JsFiddle versie&lt;/a&gt;&lt;/p&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Actually, Ie7 would bring some trouble here being the only wich will apply strictly apply height:100% on html/body elements.</p>\n\n<hr>\n\n<p><strong>But</strong>, <em>this is past and today and who still minds old IEs, <code>table/table-cell</code> is just fine, <code>display:flex</code> is promising and display:grid will show up some day.</em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "GCyrillus",
                        "user_id": 2442099
                    },
                    "score": 0
                },
                {
                    "body": "<p>Just do it : add the class @ your <code>div</code> :</p>\n\n<pre><code>  .modal {\n       margin: auto;\n       position: absolute;\n       top: 0;\n       right: 0;\n       left: 0;\n       bottom: 0;\n       height: 240px;\n\n  }\n</code></pre>\n\n<p>and read this <a href=\"http://www.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/\" rel=\"nofollow\">article</a> for explanation.\nNote : <code>Height</code> is necessary.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Anshul Shukla",
                        "user_id": 1768910
                    },
                    "score": 0
                },
                {
                    "body": "<p>Here is a simple way, with almost no code:</p>\n\n<p>CSS code:</p>\n\n<pre><code>.main{\n    height:100%;\n}\n\n.center{\n    top:50%;\n    margin-top:50%;\n}\n</code></pre>\n\n<p>Html code:</p>\n\n<pre><code>&lt;div class=\"main\"&gt;\n    &lt;div class=\"center\"&gt;\n        Hi, I am centered!\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Your text will be in the middle of the page!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JLavoie",
                        "user_id": 2414919
                    },
                    "score": 0
                }
            ],
            "body": "<p>I want to center a div vertically with CSS. I don't want tables or Javascript, but only pure CSS. I found some solutions, but all of them are missing Internet Explorer 6 support.</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div&gt;Div to be aligned vertically&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>How can I center a div vertically in all major browsers, including Internet Explorer 6?</p>\n",
            "last_activity_date": 1427333159,
            "owner": {
                "display_name": "Burak Erdem",
                "user_id": 49380
            },
            "question_id": 396145,
            "score": 356,
            "tags": [
                "css",
                "vertical-alignment"
            ],
            "title": "How to vertically center a div for all browsers?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>The borders use an angled edge where they intersect (45\u00b0 angle with equal width borders, but changing the border widths can skew the angle).</p>\n\n<p><img src=\"http://i.stack.imgur.com/nqXnr.png\" alt=\"Border example\"></p>\n\n<p><a href=\"http://jsfiddle.net/alexdickson/mA4Cu/\">jsFiddle</a>.</p>\n\n<p>By hiding certain borders, you can get the triangle effect (as you can see above by making the different portions different colours). <code>transparent</code> is often used as an edge colour to achieve the triangle shape.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "alex",
                        "user_id": 31671
                    },
                    "score": 335
                },
                {
                    "body": "<h1>CSS Triangles: A Tragedy in Five Acts</h1>\n\n<p>As <a href=\"http://stackoverflow.com/questions/7073484/how-does-this-css-triangle-shape-work/7073503#7073503\">alex said</a>, borders of equal width butt up against each other at 45 degree angles:</p>\n\n<p><img src=\"http://i.stack.imgur.com/hZefy.png\" alt=\"borders meet at 45 degree angles, content in middle\"></p>\n\n<p>When you have no top border, it looks like this:</p>\n\n<p><img src=\"http://i.stack.imgur.com/uV9Q5.png\" alt=\"no top border\"></p>\n\n<p>Then you give it a width of 0...</p>\n\n<p><img src=\"http://i.stack.imgur.com/K1A7G.png\" alt=\"no width\"></p>\n\n<p>...and a height of 0...</p>\n\n<p><img src=\"http://i.stack.imgur.com/NsmsW.png\" alt=\"no height either\"></p>\n\n<p>...and finally, you make the two side borders transparent:</p>\n\n<p><img src=\"http://i.stack.imgur.com/B42zY.png\" alt=\"transparent side borders\"></p>\n\n<p>That results in a triangle.</p>\n\n<p><strong>The End</strong></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "sdleihssirhc",
                        "user_id": 317849
                    },
                    "score": 1307
                },
                {
                    "body": "<p>Start with a basic square and borders. Each border will be given a different color so we can tell them apart:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.triangle {\n    border-color: yellow blue red green;\n    border-style: solid;\n    border-width: 200px 200px 200px 200px;\n    height: 0px;\n    width: 0px;\n}\n</code></pre>\n\n<p>which gives you <a href=\"http://jsbin.com/axoyub/5/edit\">this</a>:</p>\n\n<p><a href=\"http://jsbin.com/axoyub/5/edit\"><img src=\"http://i.stack.imgur.com/QH01k.png\" alt=\"square with four borders\"></a></p>\n\n<p>But there's no need for the top border, so set its width to <code>0px</code>. Now our border-bottom of <code>200px</code> will make our triangle 200px tall.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.triangle {\n    border-color: yellow blue red green;\n    border-style: solid;\n    border-width: 0px 200px 200px 200px;\n    height: 0px;\n    width: 0px;\n}\n</code></pre>\n\n<p>and we will get <a href=\"http://jsbin.com/efihoq/2/edit\">this</a>:</p>\n\n<p><a href=\"http://jsbin.com/efihoq/2/edit\"><img src=\"http://i.stack.imgur.com/3gohz.png\" alt=\"bottom half of square with four borders\"></a></p>\n\n<p>Then to hide the two side triangles, set the border-color to transparent. Since the top-border has been effectively deleted, we can set the border-top-color to transparent as well.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.triangle {\n    border-color: transparent transparent red transparent;\n    border-style: solid;\n    border-width: 0px 200px 200px 200px;\n    height: 0px;\n    width: 0px;\n}\n</code></pre>\n\n<p>finally we get <a href=\"http://jsbin.com/aluhik/2/edit\">this</a>:</p>\n\n<p><a href=\"http://jsbin.com/aluhik/2/edit\"><img src=\"http://i.stack.imgur.com/k9EQ8.png\" alt=\"triangular bottom border\"></a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mouna Cheikhna",
                        "user_id": 271999
                    },
                    "score": 245
                },
                {
                    "body": "<p>Here is an <a href=\"http://jsfiddle.net/HerrSerker/NUAXk/\" rel=\"nofollow\">animation in JSFiddle</a> I created for demonstration.</p>\n\n<p>Also see snippet below.  </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('#a').click(function() {$('.border').trigger(\"click\");});\r\n(function($) {\r\n    var duration = 1000\r\n    $('.border').click(function() {\r\n        $(this)\r\n            .animate({\r\n                'border-top-width': 0\r\n            }, duration)\r\n            .animate({\r\n                'border-left-width': 30\r\n            }, duration)\r\n            .animate({\r\n                'border-right-width': 30\r\n            }, duration)\r\n            .animate({\r\n                'border-bottom-width': 80\r\n            }, duration)\r\n            .animate({\r\n                'width': 0\r\n            }, duration)\r\n            .animate({\r\n                'height': 0\r\n            }, duration)\r\n            .animate({\r\n                'borderRightColor': 'transparent'\r\n            }, duration)\r\n            .animate({\r\n                'borderLeftColor': 'transparent'\r\n            }, duration)\r\n    }).end()\r\n}(jQuery))</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.border {\r\n    margin: 50px;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-width: 50px;\r\n    border-style: solid;\r\n    border-top-color: green;\r\n    border-right-color: yellow;\r\n    border-bottom-color: red;\r\n    border-left-color: blue;\r\n    cursor: pointer\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"&gt;&lt;/script&gt;\r\nClick it!&lt;br&gt;\r\n&lt;div class=\"border\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "HerrSerker",
                        "user_id": 476951
                    },
                    "score": 76
                },
                {
                    "body": "<p>Taking it one step further, using css based on this I added arrows to my back and next buttons (yes I know its not 100% cross-browser, but slick none the less).</p>\n\n<p>Here's the HTML:</p>\n\n<pre><code>&lt;div class=\"triangle\"&gt;&lt;/div&gt;\n&lt;div class=\"triangle triangle-down\"&gt;&lt;/div&gt;\n&lt;div class=\"triangle triangle-left\"&gt;&lt;/div&gt;\n&lt;div class=\"triangle triangle-right\"&gt;&lt;/div&gt;\n\n&lt;a class=\"triangle-before triangle-before-left\" href=\"#\"&gt;Back&lt;/a&gt;\n&lt;a class=\"triangle-after triangle-after-right\" href=\"#\"&gt;Next&lt;/a&gt;\n</code></pre>\n\n<p>And here's the CSS:</p>\n\n<pre><code>.triangle {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n    margin:20px auto;\n}\n\n.triangle-down {\n    border-bottom:none;\n    border-top: 100px solid red;\n}\n\n.triangle-left {\n    border-left:none;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n    border-top: 50px solid transparent;\n}\n\n.triangle-right {\n    border-right:none;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n    border-top: 50px solid transparent;\n}\n\n.triangle-after:after {\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-bottom: 5px solid red;\n    margin:0 5px;\n    content:\"\";\n    display:inline-block;\n}\n\n.triangle-after-right:after {\n    border-right:none;\n    border-left: 5px solid blue;\n    border-bottom: 5px solid transparent;\n    border-top: 5px solid transparent;\n\n}\n\n.triangle-before:before {\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-bottom: 5px solid blue;\n    margin:0 5px;\n    content:\"\";\n    display:inline-block;\n}\n\n.triangle-before-left:before {\n    border-left:none;\n    border-right: 5px solid blue;\n    border-bottom: 5px solid transparent;\n    border-top: 5px solid transparent;\n\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/KrkuD/\" rel=\"nofollow\">Here is the jsFiddle.</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PseudoNinja",
                        "user_id": 588005
                    },
                    "score": 14
                },
                {
                    "body": "<p>Consider the below triangle</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.triangle {\n    border-bottom:15px solid #000;\n    border-left:10px solid transparent;\n    border-right:10px solid transparent;\n    width:0;\n    height:0;\n}\n</code></pre>\n\n<p>This is what we are given:</p>\n\n<p><img src=\"http://i.stack.imgur.com/i3pJR.png\" alt=\"Small triangle output\"></p>\n\n<p>Why it came out in this shape? The below diagram explains the dimensions, note that 15px was used for the bottom border and 10px was used for left and right.</p>\n\n<p><img src=\"http://i.stack.imgur.com/NVLeK.png\" alt=\"Large triangle\"></p>\n\n<p>It's pretty easy to make a right-angle triangle also by removing the right border.</p>\n\n<p><img src=\"http://i.stack.imgur.com/0Wbmg.png\" alt=\"Right angle triangle\"></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Daniel Imms",
                        "user_id": 1156119
                    },
                    "score": 13
                },
                {
                    "body": "<p>Different approach. With linear gradient (for IE, only IE 10+).\nYou can use any angle:</p>\n\n<pre><code>.triangle {\n    margin: 50px auto;\n    width: 100px;\n    height: 100px;\n/* linear gradient */\n    background: -moz-linear-gradient(-45deg,  rgba(255,0,0,0) 0%, rgba(255,0,0,0) 50%, rgba(255,0,0,1) 50%, rgba(255,0,0,1) 100%);\n /* FF3.6+ */\n    background: -webkit-gradient(linear, left top, right bottom, color-stop(0%,rgba(255,0,0,0)), color-stop(50%,rgba(255,0,0,0)), color-stop(50%,rgba(255,0,0,1)), color-stop(100%,rgba(255,0,0,1)));\n /* Chrome,Safari4+ */\n    background: -webkit-linear-gradient(-45deg,  rgba(255,0,0,0) 0%,rgba(255,0,0,0) 50%,rgba(255,0,0,1) 50%,rgba(255,0,0,1) 100%);\n /* Chrome10+,Safari5.1+ */\n    background: -o-linear-gradient(-45deg,  rgba(255,0,0,0) 0%,rgba(255,0,0,0) 50%,rgba(255,0,0,1) 50%,rgba(255,0,0,1) 100%);\n /* Opera 11.10+ */\n    background: -ms-linear-gradient(-45deg,  rgba(255,0,0,0) 0%,rgba(255,0,0,0) 50%,rgba(255,0,0,1) 50%,rgba(255,0,0,1) 100%);\n /* IE10+ */\n    background: linear-gradient(135deg,  rgba(255,0,0,0) 0%,rgba(255,0,0,0) 50%,rgba(255,0,0,1) 50%,rgba(255,0,0,1) 100%);\n /* W3C */;\n}\n</code></pre>\n\n<p>Here is <a href=\"http://jsfiddle.net/lima_fil/yvQnG/1/\" rel=\"nofollow\">jsfiddle</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "lima_fil",
                        "user_id": 2278346
                    },
                    "score": 4
                },
                {
                    "body": "<p>I made a sample in enjoycss</p>\n\n<p><a href=\"http://enjoycss.com/5p#border\" rel=\"nofollow\">http://enjoycss.com/5p#border</a></p>\n\n<p>you can play with it and see how the thing changes ;)</p>\n\n<p><img src=\"http://i.stack.imgur.com/9zRGv.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nedudi",
                        "user_id": 890850
                    },
                    "score": 0
                },
                {
                    "body": "<p>Lets say we have the following div:</p>\n\n<pre><code>&lt;div id=\"triangle\" /&gt;\n</code></pre>\n\n<p>Now Edit the CSS step-by-step, so you will get clear idea what is happening around</p>\n\n<p><strong>STEP 1:</strong> \n<a href=\"http://jsfiddle.net/wbZet/1182/\">JSfiddle Link:</a></p>\n\n<pre><code> #triangle {\n        background: purple;\n        width :150px;\n        height:150PX;\n        border-left: 50px solid black ;\n        border-right: 50px solid black;\n        border-bottom: 50px solid black;\n        border-top: 50px solid black;\n    }\n</code></pre>\n\n<p>This is a simple div. With a very simple CSS. So a layman can understand. Div has dimensions 150 x 150 pixels with the border 50 pixels. The image is attached:</p>\n\n<p><img src=\"http://i.stack.imgur.com/KdFPy.png\" alt=\"enter image description here\"></p>\n\n<p><strong>STEP 2:</strong> <a href=\"http://jsfiddle.net/wbZet/1185/\">JSfiddle Link:</a></p>\n\n<pre><code>#triangle {\n    background: purple;\n    width :150px;\n    height:150PX;\n    border-left: 50px solid yellow ;\n    border-right: 50px solid green;\n    border-bottom: 50px solid red;\n    border-top: 50px solid blue;\n}\n</code></pre>\n\n<p>Now I just changed the border-color of all 4 sides. The image is attached.</p>\n\n<p><img src=\"http://i.stack.imgur.com/fTFDv.png\" alt=\"enter image description here\"></p>\n\n<p><strong>STEP:3</strong> <a href=\"http://jsfiddle.net/wbZet/1186/\">JSfiddle Link:</a></p>\n\n<pre><code>#triangle {\n    background: purple;\n    width :0;\n    height:0;\n    border-left: 50px solid yellow ;\n    border-right: 50px solid green;\n    border-bottom: 50px solid red;\n    border-top: 50px solid blue;\n}\n</code></pre>\n\n<p>Now I just changed the height &amp; width of div from 150 pixels to zero. The image is attached </p>\n\n<p><img src=\"http://i.stack.imgur.com/9nByu.png\" alt=\"enter image description here\"></p>\n\n<p><strong>STEP 4:</strong> <a href=\"http://jsfiddle.net/wbZet/1195/\">JSfiddle:</a></p>\n\n<pre><code>#triangle {\n    background: purple;\n    width :0px;\n    height:0px;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 50px solid red;\n    border-top: 50px solid transparent;\n}\n</code></pre>\n\n<p>Now I have made all the borders transparent apart from the bottom border. The image is attached below.</p>\n\n<p><img src=\"http://i.stack.imgur.com/05KJk.png\" alt=\"enter image description here\"></p>\n\n<p><strong>STEP 5:</strong> <a href=\"http://jsfiddle.net/wbZet/1196/\">JSfiddle Link:</a></p>\n\n<pre><code>#triangle {\n    background: white;\n    width :0px;\n    height:0px;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 50px solid red;\n    border-top: 50px solid transparent;\n}\n</code></pre>\n\n<p>Now I just changed the background color to white. The image is attached.</p>\n\n<p><img src=\"http://i.stack.imgur.com/8dXFH.png\" alt=\"enter image description here\"></p>\n\n<p>Hence we got the triangle we needed. Thank you !!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rai Ammad Khan",
                        "user_id": 2878358
                    },
                    "score": 5
                },
                {
                    "body": "<p>Different approach :</p>\n\n<h2><strong>CSS3 triangles</strong> with transform rotate</h2>\n\n<p>Triangular shape is pretty easy to make using this technique. For people who prefer to see an animation explaining how this technique works here it is :</p>\n\n<p><img src=\"http://i.stack.imgur.com/63AGJ.gif\" alt=\"gif animation : how to make a triangle with transform rotate\"></p>\n\n<ul>\n<li>Link to the <strong>ANIMATION : <a href=\"http://codepen.io/web-tiki/full/buiJc\">How to make a <em>CSS3</em> triangle</a></strong>.</li>\n<li>And <strong>DEMO : <a href=\"http://codepen.io/web-tiki/full/IjKvp\"><em>CSS3</em> triangles</a></strong> made with transform rotate.</li>\n</ul>\n\n<p>Otherwise, here is detailed explanation in 4 acts (this is not a tragedy) of how to make an isosceles right-angled triangle with one element.</p>\n\n<ul>\n<li><em>Note 1 : for non isosceles triangles and fancy stuff, you can see step 4</em>.</li>\n<li><em>Note 2 : in the following snippets, the vendor prefixes aren't included. they are included in the <a href=\"http://codepen.io/web-tiki/pen/IjKvp\">codepen demos</a></em>.</li>\n<li><em>Note 3 : the HTML for the following explanation is always :</em> <code>&lt;div class=\"tr\"&gt;&lt;/div&gt;</code></li>\n</ul>\n\n<hr>\n\n<h2><strong>STEP 1 :</strong> Make a div</h2>\n\n<p>Easy, just make sure that <code>width = 1.41 x height</code>. You may use any techinque (<a href=\"http://stackoverflow.com/questions/5445491/height-equal-to-dynamic-width-css-fluid-layout\">see here</a>) including the use of percentages and padding-bottom to maintain the aspect ratio and make a <strong>responsive triangle</strong>. In the following image, the div has a golden yellow border.</p>\n\n<p>In that div, insert a <strong>pseudo element</strong> and give it 100% width and height of parent. The pseudo element has a blue background in the following image.</p>\n\n<p><img src=\"http://i.stack.imgur.com/UdgtP.jpg\" alt=\"Making a CSS triangle with transform roate step 1\"></p>\n\n<p>At this point, we have this <em>CSS</em> :</p>\n\n<pre><code>.tr{\n    width:30%;\n    padding-bottom:21.27%; /* = width / 1.41 */\n    position:relative;\n}\n\n.tr:before{\n    content:'';\n    position:absolute;\n    top:0; left:0;\n    width:100%; height:100%;\n    background : #0079C6;\n}\n</code></pre>\n\n<h2><strong>STEP 2 :</strong> Let's rotate</h2>\n\n<p>First, most important : <strong>define a transform origin</strong>. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin\">default origin</a> is in the center of the pseudo element and we need it at the bottom left. By adding this <em>CSS</em> to the pseudo element : </p>\n\n<p><code>transform-origin:0 100%;</code> or <code>transform-origin: left bottom;</code></p>\n\n<p>Now we can rotate the pseudo element 45 degrees clockwise with <code>transform : rotate(45deg);</code></p>\n\n<p><img src=\"http://i.stack.imgur.com/mEaS1.jpg\" alt=\"Creating a triangle with CSS3 step 2\"></p>\n\n<p>At this point, we have this <em>CSS</em> :</p>\n\n<pre><code>.tr{\n    width:30%;\n    padding-bottom:21.27%; /* = width / 1.41 */\n    position:relative;\n}\n.tr:before{\n    content:'';\n    position:absolute;\n    top:0; left:0;\n    width:100%; height:100%;\n    background : #0079C6;\n    transform-origin:0 100%;        \n    transform: rotate(45deg);\n}\n</code></pre>\n\n<h2>STEP 3 : hide it</h2>\n\n<p>To hide the unwanted parts of the pseudo element (everything that overflows the div with the yellow border) you just need to set <code>overflow:hidden;</code> on the container. after removing the yellow border, you get... a <strong>TRIANGLE</strong>! :</p>\n\n<p><strong><a href=\"http://codepen.io/web-tiki/pen/gyode\">DEMO</a></strong></p>\n\n<p><img src=\"http://i.stack.imgur.com/M2csZ.jpg\" alt=\"CSS triangle\"></p>\n\n<p><em>CSS :</em></p>\n\n<pre><code>.tr{\n    width:30%;\n    padding-bottom:21.27%; /* = width / 1.41 */\n    position:relative;\n    overflow:hidden;\n}\n.tr:before{\n    content:'';\n    position:absolute;\n    top:0; left:0;\n    width:100%; height:100%;\n    background-color : #0079C6;\n    transform-origin:0 100%;\n    transform: rotate(45deg);\n}\n</code></pre>\n\n<h2>STEP 4 : go further...</h2>\n\n<p>As shown in the <a href=\"http://codepen.io/web-tiki/pen/IjKvp\">demo</a>, you can customize the triangles :</p>\n\n<ol>\n<li>Make them thinner or flatter by playing with <code>skewX()</code>. </li>\n<li>Make them point left, right or any other direction by playing with the transform orign and rotation direction. </li>\n<li>Make <a href=\"http://codepen.io/web-tiki/pen/tDLxk\">some reflexion</a> with 3D transform property.</li>\n<li>Give the <a href=\"http://codepen.io/web-tiki/pen/JnLGb\">triangle borders</a></li>\n<li>Put an image <a href=\"http://codepen.io/web-tiki/pen/ntmDK\">inside the triangle</a></li>\n<li>Much more... Unleash the powers of <em>CSS3</em>!</li>\n</ol>\n\n<hr>\n\n<h2>Why use this technique?</h2>\n\n<ol>\n<li>Triangle can easily be responsive.</li>\n<li>You can make a <a href=\"http://codepen.io/web-tiki/pen/JnLGb\">triangle with border</a>.</li>\n<li>You can maintain the boundaries of the triangle. This means that you can trigger the hover state or click event only when the cursor is <strong><a href=\"http://codepen.io/web-tiki/pen/icClo\">inside the triangle</a></strong>. This can become very handy in some situations like <a href=\"http://codepen.io/web-tiki/pen/meskA\">this one</a> where each triangle can't overlay it's neighbours so each triangle has it's own hover state.</li>\n<li>You can make some <a href=\"http://codepen.io/web-tiki/full/tDLxk\">fancy effects like reflections</a>.</li>\n<li>It will help you understand 2d and 3d transform properties.</li>\n</ol>\n\n<h2>Why not use this technique?</h2>\n\n<ol>\n<li>The main drawback is the <strong>browser compatibility</strong>, the 2d transform properties are supported by IE9+ and therefore you can't use this technique if you plan on supporting IE8. See <a href=\"http://caniuse.com/transforms2d\">CanIuse</a> for more info. For some fancy effects using 3d transforms like <a href=\"http://codepen.io/web-tiki/pen/tDLxk\">the reflection</a> browser support is IE10+ (see <a href=\"http://caniuse.com/transforms3d\">canIuse</a> for more info).</li>\n<li>You don't need anything responsive and a plain triangle is fine for you then you should go for the border technique explained here : better browser compatibility and easier to understand thanks to the amaizing posts here.</li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "web-tiki",
                        "user_id": 1811992
                    },
                    "score": 29
                },
                {
                    "body": "<p>And now something completely different...</p>\n\n<p>Instead of using css tricks don't forget about solutions as simple as html entities:</p>\n\n<pre><code>&amp;#9650;\n</code></pre>\n\n<p>Result:</p>\n\n<p>&#9650;</p>\n\n<p>See: <a href=\"http://stackoverflow.com/questions/2293081/what-are-the-html-entities-for-up-and-down-triangles\">What are the HTML entities for up and down triangles?</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PeterM",
                        "user_id": 133408
                    },
                    "score": 2
                },
                {
                    "body": "<p>here is another fiddle: </p>\n\n<pre><code>.container:after {\n    position: absolute;\n    right: 0;\n    content: \"\";\n    margin-right:-50px;\n    margin-bottom: -8px;\n    border-width: 25px;\n    border-style: solid;\n    border-color: transparent transparent transparent #000;\n    width: 0;\n    height: 0;\n    z-index: 10;\n    -webkit-transition: visibility 50ms ease-in-out,opacity 50ms ease-in-out;\n    transition: visibility 50ms ease-in-out,opacity 50ms ease-in-out;\n    bottom: 21px;\n}\n.container {\n    float: left;\n    margin-top: 100px;\n    position: relative;\n    width: 150px;\n    height: 80px;\n    background-color: #000;\n}\n\n.containerRed {\n    float: left;\n    margin-top: 100px;\n    position: relative;\n    width: 100px;\n    height: 80px;\n    background-color: red;\n}\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/qdhvdb17/\" rel=\"nofollow\">https://jsfiddle.net/qdhvdb17/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Doml The-Bread",
                        "user_id": 4641605
                    },
                    "score": 0
                }
            ],
            "body": "<p>There're plenty of different CSS shapes over at <a href=\"http://css-tricks.com/examples/ShapesOfCSS/\">http://css-tricks.com/examples/ShapesOfCSS/</a>\nand I'm particularly puzzled with a triangle:</p>\n\n<p><img src=\"http://i.stack.imgur.com/Zcyzo.png\" alt=\"Triangle\"></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n</code></pre>\n\n<p>So, how and why does it work?</p>\n",
            "last_activity_date": 1425660843,
            "owner": {
                "display_name": "Stanislav Shabalin",
                "user_id": 417810
            },
            "question_id": 7073484,
            "score": 925,
            "tags": [
                "css",
                "geometry",
                "polygon",
                "css-shapes"
            ],
            "title": "How does this CSS triangle shape work?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>The easiest method would be to use a semi-transparent background <strong>PNG image</strong>. </p>\n\n<p>You can use JavaScript to make it work in <code>Internet Explorer 6</code> if you need to.</p>\n\n<p>I use the method outlined in <em><a href=\"http://24ways.org/2007/supersleight-transparent-png-in-ie6\" rel=\"nofollow\">Transparent PNGs in Internet Explorer 6</a></em>.</p>\n\n<p>Other than that, </p>\n\n<p>you could fake it using <code>two side-by-side sibling elements</code> - make <strong>one semi-transparent</strong>, then <code>absolutely position the other over the top</code>?</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chris",
                        "user_id": 58244
                    },
                    "score": 12
                },
                {
                    "body": "<p><em><a href=\"http://stackoverflow.com/questions/637921/opacity-of-background-not-text\">Opacity of background, but not the text</a></em> has some ideas. Either use a semi-transparent image, or overlay an additional element.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "fearoffours",
                        "user_id": 93702
                    },
                    "score": 2
                },
                {
                    "body": "<p>The problem is, that the text actually HAS full opacity in your example. It has full opacity inside the <code>p</code> tag, but the <code>p</code> tag is just semi-transparent.</p>\n\n<p>You could add an semi-transparent PNG background image instead of realizing it in CSS, or separate text and div into 2 elements and move the text over the box (for example, negative margin).</p>\n\n<p>Otherwise it won't be possible.</p>\n\n<p>EDIT:</p>\n\n<p>Just like Chris mentioned: if you use a PNG file with transparency, you have to use a JavaScript workaround to make it work in the pesky Internet Explorer...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gushiken",
                        "user_id": 88446
                    },
                    "score": 5
                },
                {
                    "body": "<p>A while back, I wrote about this in <a href=\"http://www.unintentionallyblank.co.uk/2007/05/07/cross-browser-background-transparency-with-css/\" rel=\"nofollow\">Cross Browser Background Transparency With CSS</a>. </p>\n\n<p>Bizarrely Internet Explorer 6 will allow you to make the background transparent and keep the text on top fully opaque. For the other browsers I then suggest using a transparent PNG file.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "philnash",
                        "user_id": 28376
                    },
                    "score": 3
                },
                {
                    "body": "<p>Either use a semi-transparent <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics\">PNG</a> image or use CSS3:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>background-color:rgba(255,0,0,0.5);\n</code></pre>\n\n<p>Here's an article from css3.info, <em><a href=\"http://www.css3.info/opacity_rgba_and_compromise/\">Opacity, RGBA and compromise</a></em> (2007-06-03).</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Georg Sch&#246;lly",
                        "user_id": 24587
                    },
                    "score": 1445
                },
                {
                    "body": "<p><strong>It's better to use a semi-transparent <code>.png</code></strong>.</p>\n\n<p>Just open Photoshop, create a <code>2x2</code> pixel image (<a href=\"http://stackoverflow.com/questions/7764751/ie8-shows-gradient-instead-of-background-image/7765128#7765128\">picking <code>1x1</code> can cause an IE bug!</a>), fill it with a green color and set the opacity in \"Layers tab\" to 60%. Then save it and make it a background image,</p>\n\n<pre><code>&lt;p style=\"background: url(green.png);\"&gt;any text&lt;/p&gt;\n</code></pre>\n\n<p>It works cool, of course, except in lovely IE6. There are better fixes available, but here's a quick hack:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>p {\n    _filter: expression((runtimeStyle.backgroundImage != 'none') ? runtimeStyle.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src='+currentStyle.backgroundImage.split('\\\"')[1]+', sizingMethod=scale)' : runtimeStyle.filter,runtimeStyle.backgroundImage = 'none');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gelens"
                    },
                    "score": 30
                },
                {
                    "body": "<p>In Firefox 3 and Safari 3, you can use RGBA like <a href=\"http://stackoverflow.com/questions/806000/css-semi-transparent-background-but-not-text/806189#806189\">Georg Sch\u00f6lly mentioned</a>.</p>\n\n<p>A little known trick is that you can use it in Internet&nbsp;Explorer as well using the gradient filter.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>background-color: rgba(0, 255, 0, 0.5);\nfilter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr='#7F00FF00', EndColorStr='#7F00FF00');\n</code></pre>\n\n<p>The first hex number defines the alpha value of the color.</p>\n\n<p>Full solution all browsers:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.alpha60 {\n    /* Fallback for web browsers that doesn't support RGBa */\n    background: rgb(0, 0, 0) transparent;\n    /* RGBa with 0.6 opacity */\n    background: rgba(0, 0, 0, 0.6);\n    /* For IE 5.5 - 7*/\n    filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);\n    /* For IE 8*/\n    -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)\";\n}\n</code></pre>\n\n<p>This is from <em><a href=\"http://robertnyman.com/2010/01/11/css-background-transparency-without-affecting-child-elements-through-rgba-and-filters/\">CSS background transparency without affecting child elements, through RGBa and filters</a></em>.</p>\n\n<h2>Screenshots proof of results:</h2>\n\n<p>This is when using the following code:\n     \n     </p>\n\n<pre><code> &lt;head&gt;\n     &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" &gt;\n    &lt;title&gt;An XHTML 1.0 Strict standard template&lt;/title&gt;\n     &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" /&gt;\n    &lt;style type=\"text/css\" media=\"all\"&gt;\n         .transparent-background-with-text-and-images-on-top {\n             background: rgb(0, 0, 0) transparent;   /* Fallback for web browsers that doesn't support RGBa */\n            background: rgba(0, 0, 0, 0.6);   /* RGBa with 0.6 opacity */\n             filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);  /* For IE 5.5 - 7*/\n            -ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)\";  /* For IE 8*/\n         }\n     &lt;/style&gt;\n &lt;/head&gt;\n\n &lt;body&gt;\n     &lt;div class=\"transparent-background-with-text-and-images-on-top\"&gt;\n         &lt;p&gt;Here some content (text AND images) \"on top of the transparent background\"&lt;/p&gt;\n        &lt;img src=\"http://i.imgur.com/LnnghmF.gif\"&gt;\n     &lt;/div&gt;\n &lt;/body&gt;\n &lt;/html&gt;\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/BgkgK.png\" alt=\"Chrome-33\">\n<img src=\"http://i.stack.imgur.com/KsGgH.png\" alt=\"IE11\">\n<img src=\"http://i.stack.imgur.com/6Zscy.png\" alt=\"IE9\">\n<img src=\"http://i.imgur.com/EyiPD0M.png\" alt=\"IE8\"></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sebastian Markb&#229;ge",
                        "user_id": 76987
                    },
                    "score": 334
                },
                {
                    "body": "<p>Here's how I do this (it might not be optimal, but it works):</p>\n\n<p>Create the <code>div</code> that you want to be semi-transparent. Give it a class/id. Leave it EMPTY, and close it. Give it a set height and width (say, 300 pixels by 300 pixels). Give it an opacity of 0.5 or whatever you like, and a background color.</p>\n\n<p>Then, DIRECTLY BELOW that div, create another div with a different class/id. Create a paragraph inside it, where you'll place your text. Give the <code>div</code> position: relative, and top: <code>-295px</code> (that's NEGATIVE 295 pixels). Give it a z-index of 2 for good measure, and make sure its opacity is 1. Style your paragraph as you like, but make sure the dimensions are less than that of the first <code>div</code> so it doesn't overflow.</p>\n\n<p>That's it. Here's the code:</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;body&gt;\n    &lt;div class=\"trans\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"trans2\"&gt;\n        &lt;p&gt;\n            text text text\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.trans{\n    opacity: 0.5;\n    height: 300px;\n    width: 300px;\n    background-color: orange;\n}\n\n.trans2{\n    opacity: 1;\n    position: relative;\n    top: -295px;\n}\n\n.trans2 p{\n    width: 295px;\n    color: black;\n    font-weight: bold;\n}\n</code></pre>\n\n<p>This works in Safari 2.x, I don't know about Internet&nbsp;Explorer.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "paris ionescu"
                    },
                    "score": 4
                },
                {
                    "body": "<p>For a simple semi-transparent background color, the above solutions (CSS3 or bg images) are the best options. However, if you don't want to rely on CSS3 or want to do something fancier (e.g. animation, multiple backgrounds, etc.), you can try the \u201cpane technique\u201d:</p>\n\n<pre><code>&lt;style type=\"text/css\" media=\"all\"&gt;\n    .pane, .pane &gt; .back, .pane &gt; .cont { display: block; }\n\n    .pane {\n        position: relative;\n    }\n\n    .pane &gt; .back {\n        position: absolute;\n        width: 100%; height: 100%;\n        top: auto; bottom: auto; left: auto; right: auto;\n    }\n\n    .pane &gt; .cont {\n        position: relative;\n        z-index: 10;\n    }\n&lt;/style&gt;\n\n&lt;p class=\"pane\"&gt;\n    &lt;span class=\"back\" style=\"background: #0f0; opacity: 0.6;\"&gt;&lt;/span&gt;\n    &lt;span class=\"cont\"&gt;Pane lives here...&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p>The technique works by using two \u201clayers\u201d inside of the outer pane element:</p>\n\n<ul>\n<li>one (the \u201cback\u201d) that fits the size of the pane element without affecting the flow of content,</li>\n<li>and one (the \u201ccont\u201d) that contains the content and helps determine the size of the pane.</li>\n</ul>\n\n<p>The <code>position: relative</code> on pane is important; it tells back layer to fit to the pane's size. (If you need the <code>&lt;p&gt;</code> tag to be absolute, change the pane from a <code>&lt;p&gt;</code> to a <code>&lt;span&gt;</code> and wrap all that in a absolutely-position <code>&lt;p&gt;</code> tag.)</p>\n\n<p>The main advantage this technique has over similar ones listed above is that the pane doesn't have to be a specified size; as coded above, it will fit full-width (normal block-element layout) and only as high as the content. The outer pane element can be sized any way you please, as long as it's rectangular (i.e. inline-block will work; plain-old inline will not).</p>\n\n<p>Also, it gives you a lot of freedom for the background; you're free to put really anything in the back element and have it not affect the flow of content (if you want multiple full-size sub-layers, just make sure they also have position: absolute, width/height: 100%, and top/bottom/left/right: auto).</p>\n\n<p>One variation to allow background inset adjustment (via top/bottom/left/right) and/or background pinning (via removing one of the left/right or top/bottom pairs) is to use the following CSS instead:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>    .pane &gt; .back {\n        position: absolute;\n        width: auto; height: auto;\n        top: 0px; bottom: 0px; left: 0px; right: 0px;\n    }\n</code></pre>\n\n<p>As written, this works in Firefox, Safari, Chrome, IE8+, and Opera, although IE7 and IE6 require extra CSS and expressions, IIRC, and last time I checked, the second CSS variation does not work in Opera.</p>\n\n<p>Things to watch out for:</p>\n\n<ul>\n<li>Floating elements inside of the cont layer will not be contained. You'll need to make sure they are cleared or otherwise contained, or they'll slip out of the bottom.</li>\n<li>Margins go on the pane element and padding goes on the cont element. Don't do use the opposite (margins on the cont or padding on the pane) or you'll discover oddities such as the page always being slightly wider than the browser window.</li>\n<li>As mentioned, the whole thing needs to be block or inline-block. Feel free to use <code>&lt;div&gt;</code>s instead of <code>&lt;span&gt;</code>s to simplify your CSS.</li>\n</ul>\n\n<p>A live demo of the technique being used extensively can be found at:</p>\n\n<ul>\n<li><a href=\"http://christmas-card-2009.slippyd.com/?f=s&amp;n=RXhhbXBsZSBmb3IgdGhlIFN0YWNrIE92ZXJmbG93IENvbW11bml0eQ%3D%3D%0A&amp;sn=T3ZlcmZsb3dpYW5z%0A\" rel=\"nofollow\">http://christmas-card-2009.slippyd.com/?f=s&amp;n=RXhhbXBsZSBmb3IgdGhlIFN0YWNrIE92ZXJmbG93IENvbW11bml0eQ%3D%3D%0A&amp;sn=T3ZlcmZsb3dpYW5z%0A</a></li>\n</ul>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Slipp D. Thompson",
                        "user_id": 177525
                    },
                    "score": 14
                },
                {
                    "body": "<p>This is the best solution I could come up with, NOT using CSS 3. And it works great on Firefox, Chrome and Internet Explorer as far as I can see.</p>\n\n<p>Put a container DIV and two child DIVs in the same level, one for content, one for background:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"container\"&gt;\n   &lt;div class=\"content\"&gt;\n       Here is the content. &lt;br /&gt;\n       Background should grow to fit.\n   &lt;/div&gt;\n   &lt;div class=\"background\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And using CSS, auto-size the background to fit the content and put the background actually in the back using z-index.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>   .container {\n       position:relative;\n   }\n\n   .content {\n       position:relative;\n       color:White;\n       z-index:5;\n   }\n\n   .background {\n       position:absolute;\n       top:0px;\n       left:0px;\n       width:100%;\n       height:100%;\n       background-color:Black;\n       z-index:1;\n       /* These three lines are for transparency in all browsers. */\n       -ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)\";\n       filter: alpha(opacity=50);\n       opacity:.5;\n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Gorkem Pacaci",
                        "user_id": 51749
                    },
                    "score": 60
                },
                {
                    "body": "<p>Here is a jQuery plugin that will handle everything for you, Transify (<em><a href=\"http://jorenrapini.com/blog/css/transify-a-jquery-plugin-to-easily-apply-transparency-opacity-to-an-elements-background\">Transify - a jQuery plugin to easily apply transparency / opacity to an element\u2019s background</a></em>).</p>\n\n<p>I was running into this problem every now and then, so I decided to write something that would make life a lot easier. The script is less than 2&nbsp;KB and it only requires 1 line of code to get it to work, and it will also handle animating the opacity of the background if you like.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "joren",
                        "user_id": 344164
                    },
                    "score": 5
                },
                {
                    "body": "<p>Almost all these answers assume the designer wants a solid color background. If the designer actually wants a photo as the background the only real solution at the moment is JavaScript like the jQuery Transify plugin <a href=\"http://stackoverflow.com/questions/806000/css-semi-transparent-background-but-not-text/4015240#4015240\">mentioned elsewhere</a>.</p>\n\n<p>What we need to do is join the CSS working group discussion and make them give us a background-opacity attribute! It should work hand in hand with the multiple-backgrounds feature.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "thinsoldier",
                        "user_id": 282241
                    },
                    "score": 6
                },
                {
                    "body": "<p>This method allows you to have an image in the background and not only a solid color, and can be used to have transparency on other attributes such as borders. No transparent PNG images are required.</p>\n\n<p>Use <code>:before</code> (or <code>:after</code>) in CSS and give them the opacity value to leave the element at its original opacity. Thus you can use :before to make a faux element and give it the transparent background (or borders) you want and move it behind the content you want to keep opaque with <code>z-index</code>. </p>\n\n<p>An example (<a href=\"http://jsfiddle.net/frozenkoi/6bTEX/\" rel=\"nofollow\">fiddle</a>) (note that the <code>DIV</code> with class <code>dad</code> is just to provide some context and contrast to the colors, this extra element is actually not needed, and the red rectangle is moved a bit down and to the right to leave visible the background behind the <code>fancyBg</code> element):</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"dad\"&gt;\n    &lt;div class=\"fancyBg\"&gt;\n        Test text that should have solid text color lets see if we can manage it without extra elements\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>with this CSS:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.dad {\n    background: lime; border: 1px double black; margin: 1ex 2ex;\n    padding: 0.5ex; position: relative; -k-z-index: 5;\n}\n.fancyBg {\n    border: 1px dashed black; position: relative; color: white; font-weight: bold;\n    z-index: 0; /*background: black;*/\n}\n.fancyBg:before {content:'-'; display: block;\n    position: absolute; background: red; opacity: .5;\n    top: 2ex; right: -2ex; bottom: -2ex; left: 2ex;\n    /*top: 0; right: 0; bottom: 0; left: 0;*/\n    z-index: -1;\n}\n</code></pre>\n\n<p>In this case <code>.fancyBg:before</code> has the CSS properties you want to have with transparency (red background in this example, but can be an image or borders). It's positioned as absolute to move it behind <code>.fancyBg</code> (use values of zero or whatever is more appropriate for your needs).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "frozenkoi",
                        "user_id": 599926
                    },
                    "score": 9
                },
                {
                    "body": "<p><strong>background-color:rgba(255,0,0,0.5);</strong> as mentioned above is the best answer simply put. To say use CSS3, even in 2013, is not simple because the level of support from various browsers changes with every iteration. </p>\n\n<p>While <code>background-color</code> is supported by all major browsers (not new to CSS3) [1] the alpha transparence can be tricky, especially with Internet Explorer prior to version 9 and with border color on Safari prior to version 5.1. [2]</p>\n\n<p>Using something like <a href=\"http://compass-style.org\" rel=\"nofollow\">Compass</a> or <a href=\"http://sass-lang.com\" rel=\"nofollow\">SASS</a> can really help production and cross platform compatibility.</p>\n\n<hr>\n\n<p>[1] <a href=\"http://www.w3schools.com/cssref/pr_background-color.asp\" rel=\"nofollow\">W3Schools: CSS background-color Property</a></p>\n\n<p>[2] <a href=\"http://www.normansblog.de/demos/browser-support-checklist-css3/\" rel=\"nofollow\">Norman's Blog: Browser Support Checklist CSS3 (October 2012)</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "W Nielsen",
                        "user_id": 1951273
                    },
                    "score": 2
                },
                {
                    "body": "<p>CSS3 has an easy solution of your problem. Use:</p>\n\n<pre><code>background-color:rgba(0,255,0,0.5);\n</code></pre>\n\n<p>Here, rgba stands for red, green, blue and alpha value. Green value is obtained because of 255 and half transparency is obtained by 0.5 alpha value.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Touhid Rahman",
                        "user_id": 2397907
                    },
                    "score": 1
                },
                {
                    "body": "<p>You can solve this for IE8 by (ab)using the gradient syntax. The color format is ARGB. If you are using the SASS preprocessor you can convert colors using the built-in function \"ie-hex-str()\".</p>\n\n<pre><code>background: rgba(0,0,0, 0.5);\n-ms-filter: \"progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#80000000')\";\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Henrik Helmers",
                        "user_id": 924021
                    },
                    "score": 1
                },
                {
                    "body": "<p>You can also use</p>\n\n<pre><code> #some-element {\n  background-color: hsla(170, 50%, 45%, 0.9); //**0.9 is the opacity range from 0 - 1** \n }\n</code></pre>\n\n<p>if you are a photoshop guy </p>\n\n<p><strong><em>or</em></strong> </p>\n\n<pre><code>#some-element {\n  background-color: rgba(170, 190, 45, 0.9); //**0.9 is the opacity range from 0 - 1** \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "suraj rawat",
                        "user_id": 3011961
                    },
                    "score": 0
                },
                {
                    "body": "<p>Of course.You can use only pure CSS3(rgba).No need for Javascript or Jquery.Here is my example.</p>\n\n<pre><code>#item-you-want-to-style{\n\nbackground:rgba(192.233,33,0.5)\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user3968801"
                    },
                    "score": 0
                },
                {
                    "body": "<p>There is a trick to minimize the markup : use a <strong>pseudo element</strong> as background and you can set the opacity to it without afecting the main element and it's children :</p>\n\n<p><strong><a href=\"http://jsfiddle.net/webtiki/7uw3sa7s/\">DEMO</a></strong></p>\n\n<p>output :</p>\n\n<p><img src=\"http://i.stack.imgur.com/8lK67.jpg\" alt=\"background opacity with a pseudo element\"></p>\n\n<p>Relevant code :</p>\n\n<p><em>HTML :</em></p>\n\n<pre><code>&lt;p&gt;Hello world ...\n    &lt;img src=\"yourImage\" /&gt;\n&lt;/p&gt;\n</code></pre>\n\n<p><em>CSS :</em></p>\n\n<pre><code>p {\n    position:relative;\n}\np:after {\n    content:'';\n    position:absolute;\n    top:0;left:0;\n    width:100%; height:100%;\n    background:#000;\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)\";\n    opacity:.6;\n    z-index:-1;\n}\n</code></pre>\n\n<p>Browser support is IE8+</p>\n\n<ul>\n<li><a href=\"http://caniuse.com/#feat=css-gencontent\">pseudo elements</a></li>\n<li><a href=\"http://caniuse.com/#feat=css-opacity\">opacity</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "web-tiki",
                        "user_id": 1811992
                    },
                    "score": 6
                },
                {
                    "body": "<pre><code>&lt;div align=\"center\" style=\"width:100%;height:100%;background:white;opacity:0.5;position:absolute;z-index:1001\"&gt;\n    &lt;img id=\"search_img\" style=\"margin-top:20%;\" src=\"../resources/images/loading_small.gif\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/x2ukko7u/\" rel=\"nofollow\">http://jsfiddle.net/x2ukko7u/</a>?</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "premgowda",
                        "user_id": 1980128
                    },
                    "score": 0
                },
                {
                    "body": "<p>You can achieve this with CSS. First make the background transparent.</p>\n\n<p>background: rgba(255,255,255,.5);</p>\n\n<p>then you can add the text and image above that background. Check the following code.</p>\n\n<p>CSS Code:</p>\n\n<pre><code>&lt;style&gt;\n.duck\n{\n    width:190px;\n    height:190px;\n    background: url(img/duck.png) no-repeat;\n    border:5px solid #000000;\n    font-size: 30px;\n    font-weight: 900;\n    color:blue;\n}\n.trBorder {\n    height: 150px;\n    width: 150px;\n    margin: 20px;\n    background: rgba(255,255,255,.5);\n}\n&lt;/style&gt;\n</code></pre>\n\n<p>HTML Code:</p>\n\n<pre><code>&lt;div class=\"duck\"&gt;\n    &lt;div class=\"trBorder\" align=center&gt;\n    Write your text here\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Full Source: <a href=\"http://www.corelangs.com/css/box/transparent.html\" rel=\"nofollow\">Transparent Background</a></p>\n\n<p>George</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mc George",
                        "user_id": 3651783
                    },
                    "score": 0
                },
                {
                    "body": "<p>There's an easier solution to put an overlay over an image on the same div. It's not the right use of this tool. But works like a charm to make that overlay using css.</p>\n\n<p>Use an inset shadow like this: </p>\n\n<pre><code>  box-shadow: inset 0 0 0 1000px rgba(255,255,255,0.9);\n</code></pre>\n\n<p>That's all :) </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "edd2110",
                        "user_id": 3674510
                    },
                    "score": 0
                }
            ],
            "body": "<p>Is it possible, using CSS only, to make the <code>background</code> of an element <code>semi-transparent</code> but have the content (text &amp; images) of the element opaque? </p>\n\n<p>I'd like to accomplish this without having the text and the background as two separate elements.</p>\n\n<p>When trying:</p>\n\n<pre><code>&lt;p&gt;\n  &lt;span&gt;\n    Hello world\n  &lt;/span&gt;\n  &lt;img src=\"myImage.jpg\"&gt;\n&lt;/p&gt;\n\n\np{\n    background-color:green;\n    filter:alpha(opacity=60);\n    opacity:.6;\n}\nspan, img{\n    color:white;\n    filter:alpha(opacity=100);\n    opacity:1;\n}\n</code></pre>\n\n<p>it looks like child elements are subjected to the opacity of their parents, so <code>opacity:1</code> is relative to the <code>opacity:.6</code> of the parent.</p>\n",
            "last_activity_date": 1426891008,
            "owner": {
                "display_name": "Stijn Sanders",
                "user_id": 87971
            },
            "question_id": 806000,
            "score": 1142,
            "tags": [
                "html",
                "css",
                "opacity"
            ],
            "title": "How to give text or an image a transparent background using CSS?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>An iframe is universally handled like a different HTML page by most browsers. If you want to apply the same stylesheet to the content of the iframe, just reference it from the pages used in there.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "hangy",
                        "user_id": 11963
                    },
                    "score": 21
                },
                {
                    "body": "<p>If you control the page in the iframe, as hangy said, the easiest approach is to create a shared CSS file with common styles, then just link to it from your html pages.</p>\n\n<p>Otherwise it is unlikely you will be able to dynamically change the style of a page from an external page in your iframe.  This is because browsers have tightened the security on cross frame dom scripting due to possible misuse for spoofing and other hacks.</p>\n\n<p><a href=\"http://www.dyn-web.com/tutorials/iframes/\">This tutorial</a> may provide you with more information on scripting iframes in general.  <a href=\"http://msdn.microsoft.com/en-us/library/ms533028(VS.85).aspx\">About cross frame scripting</a> explains the security restrictions from the IE perspective.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ash",
                        "user_id": 5023
                    },
                    "score": 18
                },
                {
                    "body": "<p>If the content of the iframe is not completely under your control or you want to access the content from different pages with different styles you could try manipulating it using JavaScript.</p>\n\n<pre><code>var frm = frames['frame'].document;\nvar otherhead = frm.getElementsByTagName(\"head\")[0];\nvar link = frm.createElement(\"link\");\nlink.setAttribute(\"rel\", \"stylesheet\");\nlink.setAttribute(\"type\", \"text/css\");\nlink.setAttribute(\"href\", \"style.css\");\notherhead.appendChild(link);\n</code></pre>\n\n<p>Note that depending on what browser you use this might only work on pages served from the same domain.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Horst Gutmann",
                        "user_id": 22312
                    },
                    "score": 45
                },
                {
                    "body": "<p><strong>Edit:</strong> This does not work cross domain.</p>\n\n<p>There are two different things here: the style of the iframe block and the style of the page embedded in the iframe. You can set the style of the iframe block the usual way:</p>\n\n<pre><code>&lt;iframe name='iframe1' id=\"iframe1\" src=\"empty.htm\" frameborder=\"0\" border=\"0\" cellspacing=\"0\" style=\"border-style: none;width: 100%; height: 120px;\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>The style of the page embedded in the iframe must be either set by including it in the child page:</p>\n\n<pre><code>&lt;link type=\"text/css\" rel=\"Stylesheet\" href=\"Style/simple.css\" /&gt;\n</code></pre>\n\n<p>Or it can be loaded from the parent page with Javascript:</p>\n\n<pre><code>var cssLink = document.createElement(\"link\") \ncssLink.href = \"style.css\"; \ncssLink .rel = \"stylesheet\"; \ncssLink .type = \"text/css\"; \nframes['frame1'].document.body.appendChild(cssLink);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tamas Czinege",
                        "user_id": 8954
                    },
                    "score": 216
                },
                {
                    "body": "<p>You will not be able to style the contents of the iframe this way. My suggestion would be to use serverside scripting (PHP, ASP, or a Perl script) or find an online service that will convert a feed to JavaScript code. The only other way to do it would be if you can do a serverside include.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "PageCandy"
                    },
                    "score": 5
                },
                {
                    "body": "<p>The above with a little change works:</p>\n\n<pre><code>var cssLink = document.createElement(\"link\") \n            cssLink.href = \"pFstylesEditor.css\"; \n            cssLink .rel = \"stylesheet\"; \n            cssLink .type = \"text/css\"; \n\n            //Instead of this\n            //frames['frame1'].document.body.appendChild(cssLink);\n//Do this\n\n            var doc=document.getElementById(\"edit\").contentWindow.document \n\n            ///If you are doing any dynamic writing do that first\n            doc.open();\n            doc.write(myData);\n            doc.close();\n\n            //Then append child\ndoc.body.appendChild(cssLink);\n</code></pre>\n\n<p>Works fine with ff3 and ie8 at least</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tom Merchant"
                    },
                    "score": 16
                },
                {
                    "body": "<p>If you want to reuse CSS and JavaScript from the main page maybe you should consider replacing <code>&lt;IFRAME&gt;</code> with a Ajax loaded content. This is more SEO friendly now when search bots are able to execute JavaScript.</p>\n\n<p>This is <a href=\"http://jquery.com\">jQuery</a> example that includes another html page into your document. This is much more SEO friendly than <code>iframe</code>. In order to be sure that the bots are not indexing the included page just add it to disallow in <code>robots.txt</code></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;\n  &lt;header&gt;\n    &lt;script src=\"/js/jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n  &lt;/header&gt;\n  &lt;body&gt;\n    &lt;div id='include-from-outside'&gt;&lt;/div&gt;\n    &lt;script type='text/javascript'&gt;\n      $('#include-from-outside').load('http://example.com/included.html');\n    &lt;/script&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You could also include jQuery directly from Google: <a href=\"http://code.google.com/apis/ajaxlibs/documentation/\">http://code.google.com/apis/ajaxlibs/documentation/</a> - this means optional auto-inclusion of newer versions and some significant speed increase. Also, means that you have to trust them for delivering you just the jQuery ;)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sorin",
                        "user_id": 99834
                    },
                    "score": 7
                },
                {
                    "body": "<p>When you say \"doc.open()\" it means you can write whatever HTML tag inside the iframe, so you should write all the basic tags for the HTML page and if you want to have a CSS link in your iframe head just write an iframe with CSS link in it. I give you an example:</p>\n\n<pre><code>doc.open();\n\ndoc.write('&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"/&gt;&lt;meta http-quiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;&lt;title&gt;Print Frame&lt;/title&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css/print.css\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;table id=\"' + gridId + 'Printable' + '\" class=\"print\" &gt;' + out + '&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;');\n\ndoc.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "parham fazel",
                        "user_id": 500381
                    },
                    "score": 4
                },
                {
                    "body": "<p>Well, I have followed these steps:</p>\n\n<ol>\n<li>Div with a class to hold iframe</li>\n<li>Add iframe to the div.</li>\n<li><p>In CSS file, </p>\n\n<p><strong>divClass</strong> { width: 500px; height: 500px; }\n<strong>divClass iframe</strong> { width: 100%; height: 100%; }</p></li>\n</ol>\n\n<p>This works in IE 6. Should work in other browsers, do check!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JannuD",
                        "user_id": 534801
                    },
                    "score": -10
                },
                {
                    "body": "<p>The following worked for me.</p>\n\n<pre><code>var iframe = top.frames[name].document;\nvar css = '' +\n          '&lt;style type=\"text/css\"&gt;' +\n          'body{margin:0;padding:0;background:transparent}' +\n          '&lt;/style&gt;';\niframe.open();\niframe.write(css);\niframe.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "peter",
                        "user_id": 766356
                    },
                    "score": 9
                },
                {
                    "body": "<p>I met this issue with <strong>Google Calendar</strong>. I wanted to style it on a darker background and change font.</p>\n\n<p>Luckily, the URL from the embed code had no restriction on direct access.\nSo by using PHP function \"<strong>file_get_contents</strong>\", it is possible to get the \nentire content from the page. So instead of calling the google url, it is possible to call a php file located on your server, ex. google.php,\nwhich will contains the original content with modifications:</p>\n\n<pre><code>$content = file_get_contents('https://www.google.com/calendar/embed?src=%23contacts%40group.v.calendar.google.com&amp;ctz=America/Montreal');\n</code></pre>\n\n<p>Adding the path to your stylesheet :</p>\n\n<pre><code>$content = str_replace('&lt;/head&gt;','&lt;link rel=\"stylesheet\" href=\"http://www.yourwebsiteurl.com/google.css\" /&gt;&lt;/head&gt;', $content);\n</code></pre>\n\n<p>(This will place your stylesheet last just before the head endtag.)</p>\n\n<p>Specify the base url form the original url in case css and js are called relatively:</p>\n\n<pre><code>$content = str_replace('&lt;/title&gt;','&lt;/title&gt;&lt;base href=\"https://www.google.com/calendar/\" /&gt;', $content);\n</code></pre>\n\n<p>The final google.php file should look like this:</p>\n\n<pre><code>&lt;?php\n$content = file_get_contents('https://www.google.com/calendar/embed?src=%23contacts%40group.v.calendar.google.com&amp;ctz=America/Montreal');\n$content = str_replace('&lt;/title&gt;','&lt;/title&gt;&lt;base href=\"https://www.google.com/calendar/\" /&gt;', $content);\n$content = str_replace('&lt;/head&gt;','&lt;link rel=\"stylesheet\" href=\"http://www.yourwebsiteurl.com/google.css\" /&gt;&lt;/head&gt;', $content);\necho $content;\n</code></pre>\n\n<p>Then you change the iframe embed code to:</p>\n\n<pre><code>&lt;iframe src=\"http://www.yourwebsiteurl.com/google.php\" style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Good luck!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SequenceDigitale.com",
                        "user_id": 489281
                    },
                    "score": 87
                },
                {
                    "body": "<pre><code>  var $head = $(\"#eFormIFrame\").contents().find(\"head\");\n\n  $head.append($(\"&lt;link/&gt;\",\n                { rel: \"stylesheet\", href: url, type: \"text/css\" }\n              ));\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Rami Sarieddine",
                        "user_id": 694697
                    },
                    "score": 31
                },
                {
                    "body": "<p>My <strong>compact version</strong>:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(window).load(function () {\n    var frame = $('iframe').get(0);\n    if (frame != null) {\n        var frmHead = $(frame).contents().find('head');\n        if (frmHead != null) {\n            frmHead.append($('style, link[rel=stylesheet]').clone()); // clone existing css link\n            //frmHead.append($(\"&lt;link/&gt;\", { rel: \"stylesheet\", href: \"/styles/style.css\", type: \"text/css\" })); // or create css link yourself\n        }\n    }   \n});\n&lt;/script&gt;\n</code></pre>\n\n<p>However, sometimes the IFrame is not ready on window loaded, so there is a need of using a <strong>timer</strong>.</p>\n\n<p><strong>Ready-to-use code</strong> (with timer):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar frameListener;\n$(window).load(function () {\n    frameListener = setInterval(\"frameLoaded()\", 50);\n});\nfunction frameLoaded() {\n    var frame = $('iframe').get(0);\n    if (frame != null) {\n        var frmHead = $(frame).contents().find('head');\n        if (frmHead != null) {\n            clearInterval(frameListener); // stop the listener\n            frmHead.append($('style, link[rel=stylesheet]').clone()); // clone existing css link\n            //frmHead.append($(\"&lt;link/&gt;\", { rel: \"stylesheet\", href: \"/styles/style.css\", type: \"text/css\" })); // or create css link yourself\n        }\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>...and jQuery link:</p>\n\n<pre><code>    &lt;script src=\"https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.9.1.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Zbigniew Wiadro",
                        "user_id": 890258
                    },
                    "score": 5
                },
                {
                    "body": "<p>Expanding on the above jQuery solution to cope with any delays in loading the frame contents.</p>\n\n<pre><code>$('iframe').each(function(){\n        function injectCSS(){\n            $iframe.contents().find('head').append(\n                $('&lt;link/&gt;', { rel: 'stylesheet', href: 'iframe.css', type: 'text/css' })\n            );\n        }\n\n        var $iframe = $(this);\n        $iframe.on('load',function(){\n            injectCSS();\n        });\n        injectCSS();\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "David Bradshaw",
                        "user_id": 2087070
                    },
                    "score": 2
                },
                {
                    "body": "<p>Here is how to apply CSS code directly without using <code>&lt;link&gt;</code> to load an extra stylesheet. </p>\n\n<pre><code>var head = jQuery(\"#iframe\").contents().find(\"head\");\nvar css = '&lt;style type=\"text/css\"&gt;' +\n          '#banner{display:none}; ' +\n          '&lt;/style&gt;';\njQuery(head).append(css);\n</code></pre>\n\n<p>This hides the banner in the iframe page. Thank you for your suggestions!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "domih",
                        "user_id": 1037303
                    },
                    "score": 10
                },
                {
                    "body": "<p>I think the easiest way is to add another div, in the same place as the iframe, then </p>\n\n<p>make its <code>z-index</code> bigger than the iframe container, so you can easly just style your own div. If you need to click on it, just use <code>pointer-events:none</code> on your own div, so the iframe would be working in case you need to click on it ;)</p>\n\n<p>I hope It will help someone ;)  </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mateusz Winnicki",
                        "user_id": 2665870
                    },
                    "score": 0
                },
                {
                    "body": "<p>We can insert style tag into iframe. <a href=\"http://stackoverflow.com/questions/624979/append-a-stylesheet-to-an-iframe-with-jquery/25626811#25626811\">Posted also here...</a></p>\n\n<pre><code>&lt;style type=\"text/css\" id=\"cssID\"&gt;\n.className\n{\n    background-color: red;\n}\n&lt;/style&gt;\n\n&lt;iframe id=\"iFrameID\"&gt;&lt;/iframe&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    $(function () {\n        $(\"#iFrameID\").contents().find(\"head\")[0].appendChild(cssID);\n        //Or $(\"#iFrameID\").contents().find(\"head\")[0].appendChild($('#cssID')[0]);\n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Palani Kumar",
                        "user_id": 1019435
                    },
                    "score": 1
                },
                {
                    "body": "<p>I found another solution to put the style in the main html like this</p>\n\n<pre><code>&lt;style id=\"iframestyle\"&gt;\n    html {\n        color: white;\n        background: black;\n    }\n&lt;/style&gt;\n&lt;style&gt;\n    html {\n        color: initial;\n        background: initial;\n    }\n    iframe {\n        border: none;\n    }\n&lt;/style&gt;\n</code></pre>\n\n<p>and then in iframe do this (see the js onload)</p>\n\n<pre><code>&lt;iframe  onload=\"iframe.document.head.appendChild(ifstyle)\" name=\"log\" src=\"/upgrading.log\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>and in js</p>\n\n<pre><code>&lt;script&gt;\n    ifstyle = document.getElementById('iframestyle')\n    iframe = top.frames[\"log\"];\n&lt;/script&gt;\n</code></pre>\n\n<p>It may not be the best solution, and it certainly can be improved, but it is another option if you want to keep a \"style\" tag in parent window</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jperelli",
                        "user_id": 912450
                    },
                    "score": 0
                }
            ],
            "body": "<p>I have a simple page that has some iframe sections (to display RSS links). How can I apply the same CSS format from the main page to the page displayed in the iframe?</p>\n",
            "last_activity_date": 1426690260,
            "owner": {
                "display_name": "John"
            },
            "question_id": 217776,
            "score": 468,
            "tags": [
                "html",
                "css",
                "iframe"
            ],
            "title": "How to apply CSS to iframe?"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>Yes.  You may style any HTML element by its tag name, like this:</p>\n\n<pre><code>select {\n  font-weight: bold;\n}\n</code></pre>\n\n<p>Of course, you can also use a CSS class to style it, like any other element:</p>\n\n<pre><code>&lt;select class=\"important\"&gt;\n  &lt;option&gt;Important Option&lt;/option&gt;\n  &lt;option&gt;Another Important Option&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;style type=\"text/css\"&gt;\n  .important {\n    font-weight: bold;\n  }\n&lt;/style&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dave Ward",
                        "user_id": 60
                    },
                    "score": 4
                },
                {
                    "body": "<p>The select element and its dropdown feature <em>are</em> difficult to style.</p>\n\n<p><em><a href=\"http://archivist.incutio.com/viewlist/css-discuss/39858\" rel=\"nofollow\">style attributes for select element</a></em> confirms what Ryan Dohery said in a comment to the first answer:</p>\n\n<blockquote>\n  <p>\"The select element is part of the \n  operating system, not the browser Chrome. Therefore, it is very \n  unreliable to style, and it does not necessarily make sense to try \n  anyway.\"</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pavium",
                        "user_id": 153545
                    },
                    "score": 25
                },
                {
                    "body": "<p><code>&lt;select&gt;</code> tags can be styled through CSS just like any other HTML element on an HTML page rendered in a browser. Below is an (overly simple) example that will position a select element on the page and render the text of the options in blue.</p>\n\n<p>Example HTML file (selectExample.html):</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Select Styling&lt;/title&gt;\n  &lt;link href=\"selectExample.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;select id=\"styledSelect\" class=\"blueText\"&gt;\n  &lt;option value=\"yourMom\"&gt;Your Mom&lt;/option&gt;\n  &lt;option value=\"myMom\"&gt;My Mom&lt;/option&gt;\n&lt;/select&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Example CSS file (selectExample.css):</p>\n\n<pre><code>/* All select elements on page */\nselect {\n  position: relative;\n}\n\n/* Style by class. Effects the text of the contained options. */\n.blueText {\n  color: #0000FF;\n}\n\n/* Style by id. Effects position of the select drop down. */\n#styledSelect {\n  left: 100px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jeremyosborne",
                        "user_id": 193558
                    },
                    "score": 28
                },
                {
                    "body": "<pre><code>select  {\n    outline: 0;\n    overflow: hidden;\n    height: 30px;\n    background: #2c343c;\n    color: #747a80;\n    border: #2c343c;\n    padding: 5px 3px 5px 10px;\n    -moz-border-radius: 6px;\n    -webkit-border-radius: 6px;\n    border-radius: 10px;\n}\n\nselect option {border: 1px solid #000; background: #010;}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "gecko",
                        "user_id": 437084
                    },
                    "score": 4
                },
                {
                    "body": "<p>The blog post <em><a href=\"http://www.danielneumann.com/blog/how-to-style-dropdown-with-css-only/\" rel=\"nofollow\">How to CSS form drop down style no JavaScript</a></em> works for me, but it fails in <a href=\"http://en.wikipedia.org/wiki/Opera_%28web_browser%29\" rel=\"nofollow\">Opera</a> though:</p>\n\n<pre><code>select {\n    border: 0 none;\n    color: #FFFFFF;\n    background: transparent;\n    font-size: 20px;\n    font-weight: bold;\n    padding: 2px 10px;\n    width: 378px;\n    *width: 350px;\n    *background: #58B14C;\n}\n\n#mainselection {\n    overflow: hidden;\n    width: 350px;\n    -moz-border-radius: 9px 9px 9px 9px;\n    -webkit-border-radius: 9px 9px 9px 9px;\n    border-radius: 9px 9px 9px 9px;\n    box-shadow: 1px 1px 11px #330033;\n    background: url(\"arrow.gif\") no-repeat scroll 319px 5px #58B14C;\n}\n\n&lt;div id=\"mainselection\"&gt;\n    &lt;select&gt;\n    &lt;option&gt;Select an Option&lt;/option&gt;\n    &lt;option&gt;Option 1&lt;/option&gt;\n    &lt;option&gt;Option 2&lt;/option&gt;\n    &lt;/select&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Daniel",
                        "user_id": 563580
                    },
                    "score": 10
                },
                {
                    "body": "<p>If style is an important issue using a completely custom widget might help, like the one described in blog post <em><a href=\"http://www.jankoatwarpspeed.com/post/2009/07/28/reinventing-drop-down-with-css-jquery.aspx\" rel=\"nofollow\">Reinventing a Drop Down with CSS and jQuery</a></em>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jayesh",
                        "user_id": 174527
                    },
                    "score": 4
                },
                {
                    "body": "<p>The largest inconsistency I've noticed when styling select dropdowns is <strong><a href=\"http://en.wikipedia.org/wiki/Safari_%28web_browser%29\">Safari</a></strong> and <strong>Google Chrome</strong> rendering (Firefox is fully customizable through CSS). After some searching through obscure depths of the Internet I came across the following, which nearly completely resolves my qualms with WebKit:</p>\n\n<p><strong>Safari and Google Chrome fix</strong>:</p>\n\n<pre><code>select\n  -webkit-appearance: none;\n</code></pre>\n\n<p>This does, however, remove the dropdown arrow. You can add a dropdown arrow using a nearby div with a background, negative margin or absolutely positioned over the select dropdown.</p>\n\n<p>*More information and other variables are available in <em><a href=\"http://css-infos.net/property/-webkit-appearance\">CSS property: -webkit-appearance</a></em>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ioTus",
                        "user_id": 432448
                    },
                    "score": 26
                },
                {
                    "body": "<p>It is possible, but unfortunately mostly in Webkit-based browsers to the extent we, as developers, require. Here is the example of CSS styling gathered from Chrome options panel via built-in developer tools inspector, improved to match currently supported CSS properties in most modern browsers:</p>\n\n<pre><code>select {\n    -webkit-appearance: button;\n    -moz-appearance: button;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -webkit-padding-end: 20px;\n    -moz-padding-end: 20px;\n    -webkit-padding-start: 2px;\n    -moz-padding-start: 2px;\n    background-color: #F07575; /* fallback color if gradients are not supported */\n    background-image: url(../images/select-arrow.png), -webkit-linear-gradient(top, #E5E5E5, #F4F4F4); /* For Chrome and Safari */\n    background-image: url(../images/select-arrow.png), -moz-linear-gradient(top, #E5E5E5, #F4F4F4); /* For old Fx (3.6 to 15) */\n    background-image: url(../images/select-arrow.png), -ms-linear-gradient(top, #E5E5E5, #F4F4F4); /* For pre-releases of IE 10*/\n    background-image: url(../images/select-arrow.png), -o-linear-gradient(top, #E5E5E5, #F4F4F4); /* For old Opera (11.1 to 12.0) */ \n    background-image: url(../images/select-arrow.png), linear-gradient(to bottom, #E5E5E5, #F4F4F4); /* Standard syntax; must be last */\n    background-position: center right;\n    background-repeat: no-repeat;\n    border: 1px solid #AAA;\n    border-radius: 2px;\n    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);\n    color: #555;\n    font-size: inherit;\n    margin: 0;\n    overflow: hidden;\n    padding-top: 2px;\n    padding-bottom: 2px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n</code></pre>\n\n<p>When you run this code on any page within a Webkit-based browser it should change the appearance of the select box, remove standard OS-arrow and add a PNG-arrow, put some spacing before and after the label, almost anything you want.</p>\n\n<p>The most important part is <code>appearance</code> property, which changes how the element behaves.</p>\n\n<p>It works perfectly in almost all Webkit-based browser, including mobile ones, though Gecko doesn't support <code>appearance</code> as well as Webkit, it seems.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matthew Morek",
                        "user_id": 221228
                    },
                    "score": 172
                },
                {
                    "body": "<p>Use the <code>clip</code> property to crop the borders and the arrow of the <code>select</code> element, then add your own replacement styles to the wrapper:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      select { position: absolute; clip:rect(2px 49px 19px 2px); z-index:2; }\n      body &gt; span { display:block; position: relative; width: 64px; height: 21px; border: 2px solid green;  background: url(http://www.stackoverflow.com/favicon.ico) right 1px no-repeat; }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;span&gt;\n    &lt;select&gt;\n      &lt;option value=\"\"&gt;Alpha&lt;/option&gt;\n      &lt;option value=\"\"&gt;Beta&lt;/option&gt;\n      &lt;option value=\"\"&gt;Charlie&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/span&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Use a second select with zero opacity to make the button clickable:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      #real { position: absolute; clip:rect(2px 51px 19px 2px); z-index:2; }\n      #fake { position: absolute; opacity: 0; }\n\n      body &gt; span { display:block; position: relative; width: 64px; height: 21px; background: url(http://www.stackoverflow.com/favicon.ico) right 1px no-repeat; }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;span&gt;\n    &lt;select id=\"real\"&gt;\n      &lt;option value=\"\"&gt;Alpha&lt;/option&gt;\n      &lt;option value=\"\"&gt;Beta&lt;/option&gt;\n      &lt;option value=\"\"&gt;Charlie&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;select id=\"fake\"&gt;\n      &lt;option value=\"\"&gt;Alpha&lt;/option&gt;\n      &lt;option value=\"\"&gt;Beta&lt;/option&gt;\n      &lt;option value=\"\"&gt;Charlie&lt;/option&gt;\n    &lt;/select&gt;\n  &lt;/span&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Coordinates differ between Webkit and other browsers, but a <a href=\"http://stackoverflow.com/questions/504261/acceptable-css-hacks-fixes/8794265#8794265\">@media query</a> can cover that.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paul Sweatte",
                        "user_id": 1113772
                    },
                    "score": 4
                },
                {
                    "body": "<p>You definitely should do it like in <em><a href=\"http://www.electrictoolbox.com/style-select-optgroup-options-css/\" rel=\"nofollow\">Styling select, optgroup and options with CSS</a></em>. In many ways, background-color and color are just what you would typically need to style options, not the entire select.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "MrEvgenyShcherbina",
                        "user_id": 1412389
                    },
                    "score": 2
                },
                {
                    "body": "<p>Edit this element is not recommended, but if you want to try it's like any other HTML element.</p>\n\n<p>Edit example:</p>\n\n<pre><code>/*Edit select*/\nselect {\n    /*css style here*/\n}\n\n/*Edit option*/\noption {\n    /*css style here*/\n}\n\n/*Edit selected option*/\n/*element  attr    attr value*/\noption[selected=\"selected\"] {\n    /*css style here*/\n}\n\n&lt;select&gt;\n    &lt;option &gt;Something #1&lt;/option&gt;\n    &lt;option selected=\"selected\"&gt;Something #2&lt;/option&gt;\n    &lt;option &gt;Something #3&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Homar",
                        "user_id": 1687325
                    },
                    "score": 2
                },
                {
                    "body": "<h2>Important Update!</h2>\n\n<p>In addition to webkit, as of <a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/35\"><strong>Firefox V35</strong></a> we'll be able to use the <code>appearance</code> property.</p>\n\n<p>(From the above link:)</p>\n\n<blockquote>\n  <p>Using <code>-moz-appearance</code> with the <code>none</code> value on a combobox now remove the\n  dropdown button</p>\n</blockquote>\n\n<p>So now in order to hide the default styling - it's as easy as adding the following rules on our select element:</p>\n\n<pre><code>select {\n   -webkit-appearance: none;\n   -moz-appearance: none;\n   appearance: none;\n}\n</code></pre>\n\n<h2>Step #1 - <strong><a href=\"http://jsfiddle.net/danield770/YvCHW/4231/\">FIDDLE</a></strong></h2>\n\n<p>Next, to add our own custom arrow we just add a background image.</p>\n\n<h2>Step #2 - <strong><a href=\"http://jsfiddle.net/danield770/YvCHW/4229/\">FIDDLE</a></strong></h2>\n\n<p>The problem now is that no version of IE currently supports the appearance property. </p>\n\n<p>So we have to remove the background image on IE...</p>\n\n<h2>Step #3 (FINAL) - <strong><a href=\"http://jsfiddle.net/danield770/YvCHW/4232/\">FIDDLE</a></strong></h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>select {\r\n  margin: 50px;\r\n  border: 1px solid #111;\r\n  background: transparent;\r\n  width: 150px;\r\n  padding: 5px 35px 5px 5px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  height: 34px;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n  background: url(http://www.stackoverflow.com/favicon.ico) 96% / 15% no-repeat #eee;\r\n}\r\n/*target Internet Explorer 9 and Internet Explorer 10:*/\r\n\r\n@media screen and (min-width: 0\\0) {\r\n  select {\r\n    background: none;\r\n    padding: 5px;\r\n  }\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;select&gt;\r\n  &lt;option&gt;Apples&lt;/option&gt;\r\n  &lt;option selected&gt;Pineapples&lt;/option&gt;\r\n  &lt;option&gt;Chocklate&lt;/option&gt;\r\n  &lt;option&gt;Pancakes&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><hr>\nIf the custom arrow is necessary on IE or on Firefox - prior to V35 - then keep reading...</p>\n\n<p>Here are two additional solutions to achieve a custom arrow on a select element: </p>\n\n<h2> #1 - Hide the default arrow - <a href=\"http://bavotasan.com/2011/style-select-box-using-only-css/\">(Source)</a></h2>\n\n<h2><strong><a href=\"http://jsfiddle.net/danield770/YvCHW/4246/\">FIDDLE</a></strong></h2>\n\n<p>Wrap the <code>select</code> element in a div with a <em>fixed width</em> and <code>overflow:hidden</code>.</p>\n\n<p>Then give the <code>select</code> element a width of about <em>20 pixels greater than the div</em>.</p>\n\n<p>The result is that the default drop-down arrow of the <code>select</code> element will be hidden (due to the <code>overflow:hidden</code> on the container), and you can place any background image you want on the right-hand-side of the div.</p>\n\n<p>The <strong>advantage</strong> of this approach is that it is cross-browser (Internet&nbsp;Explorer&nbsp;8 and later, <a href=\"http://en.wikipedia.org/wiki/WebKit\">WebKit</a>, and <a href=\"http://en.wikipedia.org/wiki/Gecko_%28layout_engine%29\">Gecko</a>). However, the <strong>disadvantage</strong> of this approach is that the options drop-down juts out on the right-hand-side (by the 20 pixels which we hid... because the option elements take the width of the select element).</p>\n\n<p><img src=\"http://i.stack.imgur.com/Wyf6w.png\" alt=\"enter image description here\"></p>\n\n<p>[It should be noted, however, that if the custom select element is necessary for <strong>MOBILE</strong> this above problem doesn't apply - because of the way each phone natively opens the select element. So for mobile, this is probably the best solution.]</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.styled select {\r\n  background: transparent;\r\n  width: 150px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  height: 34px;\r\n}\r\n.styled {\r\n  margin: 50px;\r\n  width: 120px;\r\n  height: 34px;\r\n  border: 1px solid #111;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  background: url(http://www.stackoverflow.com/favicon.ico) 96% / 20% no-repeat #eee;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"styled\"&gt;\r\n  &lt;select&gt;\r\n    &lt;option&gt;Pineapples&lt;/option&gt;\r\n    &lt;option selected&gt;Apples&lt;/option&gt;\r\n    &lt;option&gt;Chocklate&lt;/option&gt;\r\n    &lt;option&gt;Pancakes&lt;/option&gt;\r\n  &lt;/select&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2> #2 - Use the <code>pointer-events</code> property <a href=\"http://lea.verou.me/2011/03/custom-select-drop-downs-with-css3/\">(Source)</a></h2>\n\n<h2><strong><a href=\"http://jsfiddle.net/danield770/sNwrs/2101/\">FIDDLE</a></strong></h2>\n\n<p>The idea here is to overlay an element over the native drop down arrow (to create our custom one) and then disallow pointer events on it.</p>\n\n<p><strong>Advantage:</strong> Works well in WebKit and Gecko. It looks good too (no jutting out <code>option</code> elements)</p>\n\n<p><strong>Disadvantage:</strong> Internet&nbsp;Explorer (IE10 and down) doesn't support <code>pointer-events</code>, which means you can't click the custom arrow. Also, another (obvious) disadvantage with this method is that you can't target your new arrow image with a hover effect or hand cursor, because we have just disabled pointer events on them!</p>\n\n<p>However, with this method you can use Modernizer or conditional comments to make Internet&nbsp;Explorer revert to the standard built in arrow.</p>\n\n<p><strong>NB:</strong> Being that Internet&nbsp;Explorer 10 doesn't support <code>conditional comments</code> anymore: If you want to use approach #2, you should probably use <strong>Modernizr</strong>. However, it is still possible to exclude the pointer-events CSS from Internet&nbsp;Explorer 10 with a CSS hack described <a href=\"http://stackoverflow.com/a/14916454/703717\">here</a>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.notIE {\r\n  position: relative;\r\n  display: inline-block;\r\n}\r\nselect {\r\n  display: inline-block;\r\n  height: 30px;\r\n  width: 150px;\r\n  outline: none;\r\n  color: #74646e;\r\n  border: 1px solid #C8BFC4;\r\n  border-radius: 4px;\r\n  box-shadow: inset 1px 1px 2px #ddd8dc;\r\n  background: #fff;\r\n}\r\n/* Select arrow styling */\r\n\r\n.notIE .fancyArrow {\r\n  width: 23px;\r\n  height: 28px;\r\n  position: absolute;\r\n  display: inline-block;\r\n  top: 1px;\r\n  right: 3px;\r\n  background: url(http://www.stackoverflow.com/favicon.ico) right / 90% no-repeat #fff;\r\n  pointer-events: none;\r\n}\r\n/*target Internet Explorer 9 and Internet Explorer 10:*/\r\n\r\n@media screen and (min-width: 0\\0) {\r\n  .notIE .fancyArrow {\r\n    display: none;\r\n  }\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!--[if !IE]&gt; --&gt;\r\n&lt;div class=\"notIE\"&gt;\r\n  &lt;!-- &lt;![endif]--&gt;\r\n  &lt;span class=\"fancyArrow\"&gt;&lt;/span&gt;\r\n  &lt;select&gt;\r\n    &lt;option&gt;Apples&lt;/option&gt;\r\n    &lt;option selected&gt;Pineapples&lt;/option&gt;\r\n    &lt;option&gt;Chocklate&lt;/option&gt;\r\n    &lt;option&gt;Pancakes&lt;/option&gt;\r\n  &lt;/select&gt;\r\n  &lt;!--[if !IE]&gt; --&gt;\r\n&lt;/div&gt;\r\n&lt;!-- &lt;![endif]--&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Danield",
                        "user_id": 703717
                    },
                    "score": 272
                },
                {
                    "body": "<pre><code>label {\n    position: relative;\n    display: inline-block;\n}\nselect {\n    display: inline-block;\n    padding: 4px 3px 5px 5px;\n    width: 150px;\n    outline: none;\n    color: black;\n    border: 1px solid #C8BFC4;\n    border-radius: 4px;\n    box-shadow: inset 1px 1px 2px #ddd8dc;\n    background-color: lightblue;\n}\n</code></pre>\n\n<p>This uses a background color for select elements and I removed the image..</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lucky",
                        "user_id": 1793718
                    },
                    "score": 1
                },
                {
                    "body": "<p>A very nice example that uses <code>:after</code> and <code>:before</code> to do the trick is in <em><a href=\"http://cssdeck.com/labs/styling-select-box-with-css3\" rel=\"nofollow\">Styling Select Box with CSS3 | CSSDeck</a></em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ahmad Ajmi",
                        "user_id": 558777
                    },
                    "score": 2
                },
                {
                    "body": "<p>A very good alternative (pure CSS) is this:</p>\n\n<p>I found it on the MDN website. It uses Fieldset, radio-buttons and editable input fields and labels to create an awesome editable pseudo-select box. Check this out:</p>\n\n<p><a href=\"https://mdn.mozillademos.org/files/4563/editable_select.html\" rel=\"nofollow\">https://mdn.mozillademos.org/files/4563/editable_select.html</a></p>\n\n<p>I know it is not directly answering your question, but it is still worth the look, as you can style \"other\" elements and simulate a select control without writing any JS code.</p>\n\n<p>Have fun! :)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "kumar_harsh",
                        "user_id": 630170
                    },
                    "score": 1
                },
                {
                    "body": "<p>As of Internet Explorer 10, you can use the <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh465742.aspx\" rel=\"nofollow\"><code>::-ms-expand</code></a> pseudo element selector to style, and hide, the drop down arrow element. </p>\n\n<pre><code>select::-ms-expand {\n    display:none;\n    /* or visibility: hidden; to keep it's space/hitbox */\n}\n</code></pre>\n\n<p>The remaining styling should be similar to other browsers.</p>\n\n<p><a href=\"http://jsfiddle.net/2cBvu/\" rel=\"nofollow\">Here is a basic fork of Danield's jsfiddle that applies support for IE10</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Richard Szalay",
                        "user_id": 3603
                    },
                    "score": 0
                },
                {
                    "body": "<p><strong>A CSS &amp; HTML only solution</strong></p>\n\n<p>I seems compatible with Chrome, Firefox &amp; IE11. But please leave your feedback regarding other web browsers.</p>\n\n<p>As suggested by @Danield answer, I wrap my select in a div (even two divs for x-browser compatibility) to get the expected behavior.</p>\n\n<p><a href=\"http://jsfiddle.net/bjap2/\" rel=\"nofollow\">See http://jsfiddle.net/bjap2/</a></p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"sort-options-wrapper\"&gt;\n    &lt;div class=\"sort-options-wrapper-2\"&gt;\n        &lt;select class=\"sort-options\"&gt;\n                &lt;option value=\"choiceOne\"&gt;choiceOne&lt;/option&gt;\n                &lt;option value=\"choiceOne\"&gt;choiceThree&lt;/option&gt;\n                &lt;option value=\"choiceOne\"&gt;choiceFour&lt;/option&gt;\n                &lt;option value=\"choiceFiveLongTestPurpose\"&gt;choiceFiveLongTestPurpose&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;\n    &lt;div class=\"search-select-arrow-down\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Notice the 2 div wrappers.\nAlso notice the extra div added to place the arrow-down button wherever you like (positioned absolutely), here we put it on the left.</p>\n\n<p>CSS</p>\n\n<pre><code>.sort-options-wrapper {\n    display: inline-block;\n    position: relative;\n    border: 1px solid #83837f;\n}\n/* this second wrapper is needed for x-browser compatibility */\n.sort-options-wrapper-2 {\n    overflow: hidden;\n}\nselect {\n    margin-right: -19px; /* that's what hidding the default-provided browser arrow */\n    padding-left: 13px;\n    margin-left: 0;\n    border: none;\n    background: none;\n    /* margin-top &amp; margin-bottom must be set since some browser have default values for select elements */\n    margin-bottom: 1px;\n    margin-top: 1px;\n}\nselect:focus {\n    outline: none; /* removing default browsers outline on focus */\n}\n.search-select-arrow-down {\n    position: absolute;\n    height:10px;\n    width: 12px;\n    background: url(http://i.imgur.com/pHIYN06.png) scroll no-repeat 2px 0px;\n    left: 1px;\n    top: 5px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adrien Be",
                        "user_id": 759452
                    },
                    "score": 0
                },
                {
                    "body": "<p>I had this exact problem, except I couldn't use images and was not limited by browser support. This should be \u00abon spec\u00bb and with luck start working everywhere <em>eventually</em>.</p>\n\n<p>It uses layered rotated background layers to \u00abcut out\u00bb a dropdown arrow, as pseudo-elements wouldn't work for the select element. Replace \u00abhotpink\u00bb with your favorite color\u2014I use a variable.</p>\n\n<p><a href=\"http://jsfiddle.net/helmers/eCAaC/\" rel=\"nofollow\">JSFiddle</a></p>\n\n<pre><code>select {\n  font: 400 12px/1.3 \"Helvetica Neue\", sans-serif;\n  -webkit-appearance: none;\n  appearance: none;\n  border: 1px solid hotpink;\n  line-height: 1;\n  outline: 0;\n  color: hotpink;\n  border-color: hotpink;\n  padding: 0.65em 2.5em 0.55em 0.75em;\n  border-radius: 3px;\n  background: linear-gradient(hotpink, hotpink) no-repeat,\n              linear-gradient(rgba(255, 105, 180, 0.1), rgba(255, 105, 180, 0.1)) no-repeat,\n              linear-gradient(-135deg, transparent 50%, white 50%) no-repeat,\n              linear-gradient(-225deg, transparent 50%, white 50%) no-repeat,\n              linear-gradient(hotpink, hotpink) no-repeat;\n  background-size: 1px 100%, 21px 100%, 22px 20px, 22px 20px, 20px 60%;\n  background-position: right 21px center, right center, right bottom, right bottom, right bottom;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Henrik Helmers",
                        "user_id": 924021
                    },
                    "score": 1
                },
                {
                    "body": "<p>The second method in Danield's answer (<a href=\"http://stackoverflow.com/a/13968900/280972\">http://stackoverflow.com/a/13968900/280972</a>) can be improved to work with hover-effects and other mouse events. Just make sure that the \"button\"-element comes right after the select element in the markup. Then target it using the + css-selector:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;select class=\"select-input\"&gt;...&lt;/select&gt;\n&lt;div class=\"select-button\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>.select-input:hover+.select-button {\n    [hover styles here]\n}\n</code></pre>\n\n<p>This will, however, show the hover effect when hovering anywhere over the select-element, not just over the \"button\".</p>\n\n<p>I'm using this method in combination with Angular (since my project happens to be an Angular-app anyway), to cover the whole select-element, and let Angular display the text of the selected option in the \"button\"-element. In this case it makes perfect sense that the hover-effect applies when hovering anywhere over the select. It doesn't work without javascript though, so if you want to do this, and your site has to work without javascript, you should make sure that your script adds the elements and classes necessary for the enhancement. That way, a browser without javascript will simply get a normal, unstyled, select, instead of a styled badge that doesn't update correctly.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adrian Schmidt",
                        "user_id": 280972
                    },
                    "score": 0
                }
            ],
            "body": "<p>Is there a CSS-only way to style a <code>&lt;select&gt;</code> dropdown?</p>\n\n<p>I need to style a <code>&lt;select&gt;</code> form as much as humanly possible, without any JavaScript. What are the properties I can use to do so in CSS?</p>\n\n<p>This code needs to be compatible with all major browsers:</p>\n\n<ul>\n<li>Internet&nbsp;Explorer 6,7 and 8</li>\n<li>Firefox</li>\n<li>Safari</li>\n</ul>\n\n<p>I know I can make it with JavaScript: <a href=\"http://www.queness.com/post/204/25-jQuery-plugins-that-enhance-and-beautify-html-form-elements\">Example</a>.</p>\n\n<p>And I'm not talking about simple styling. I want to know, what the best we can do with CSS only.</p>\n\n<p>I found <a href=\"http://stackoverflow.com/questions/1072239/is-it-possible-to-style-a-select-box\">similar questions</a> on Stack&nbsp;Overflow.</p>\n\n<p>And <a href=\"http://doctype.com/style-select\">this one</a> on Doctype.com.</p>\n",
            "last_activity_date": 1422865111,
            "owner": {
                "display_name": "Jitendra Vyas",
                "user_id": 84201
            },
            "question_id": 1895476,
            "score": 481,
            "tags": [
                "html",
                "css",
                "combobox",
                "cross-browser",
                "skinning"
            ],
            "title": "How to style a &lt;select&gt; dropdown with CSS only without JavaScript?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<h2>Implementation</h2>\n\n<p>There are three different implementations: pseudo-elements, pseudo-classes, and nothing.</p>\n\n<ul>\n<li>WebKit and Blink (Safari, Google Chrome, Opera 15+) are using a pseudo-element: <a href=\"https://bugs.webkit.org/show_bug.cgi?id=21227\"><code>::-webkit-input-placeholder</code></a>.</li>\n<li>Mozilla Firefox 4 to 18 is using a pseudo-class: <a href=\"https://developer.mozilla.org/en/CSS/:-moz-placeholder\"><code>:-moz-placeholder</code></a> (<em>one</em> colon).</li>\n<li>Mozilla Firefox 19+ is using a pseudo-element: <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=737786\"><code>::-moz-placeholder</code></a>, but the old selector will still work for a while.</li>\n<li>Internet Explorer 10 is using a pseudo-class: <a href=\"http://msdn.microsoft.com/en-us/library/ie/hh772745(v=vs.85).aspx\"><code>:-ms-input-placeholder</code></a>.</li>\n</ul>\n\n<p>IE up to version 9 and <a href=\"http://web.archive.org/web/20131206060908/http://my.opera.com/community/forums/topic.dml?id=841252&amp;t=1296553904&amp;page=1#comment8072202\">Opera</a> up to version 12 do not support any CSS selector for placeholders.</p>\n\n<p>The discussion about the best implementation is still going on. Note the pseudo-elements act like real elements in the <a href=\"http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/\">Shadow DOM</a>. A <code>padding</code> on an <code>input</code> will not get the same background color as the pseudo-element.</p>\n\n<h2>CSS selectors</h2>\n\n<p>User agents are required to ignore a rule with an unknown selector. See <a href=\"http://www.w3.org/TR/selectors/#Conformance\">Selectors Level 3</a>:</p>\n\n<blockquote>\n  <p>a <a href=\"http://www.w3.org/TR/selectors/#grouping\">group</a> of selectors containing an invalid selector is invalid.</p>\n</blockquote>\n\n<p>So we need separate rules for each browser. Otherwise the whole group would be ignored by all browsers.\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>::-webkit-input-placeholder { /* WebKit browsers */\r\n    color:    #909;\r\n}\r\n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n:-ms-input-placeholder { /* Internet Explorer 10+ */\r\n   color:    #909;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input placeholder=\"Stack Snippets are awesome!\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Usage notes</h2>\n\n<ul>\n<li>Be careful to avoid bad contrasts. Firefox's placeholder appears to be defaulting with a reduced opacity, so needs to use <code>opacity: 1</code> here.</li>\n<li>Note that placeholder text is just cut off if it doesn\u2019t fit \u2013 size your input elements in <code>em</code> and test them with big minimum font size settings. Don\u2019t forget translations: some languages <a href=\"http://www.w3.org/International/articles/article-text-size.en\">need more room</a> for the same word. </li>\n<li>Browsers with HTML support for <code>placeholder</code> but without CSS support for that (like Opera) should be tested too.</li>\n<li>Some browsers use additional default CSS for some <code>input</code> types (<code>email</code>, <code>search</code>). These might affect the rendering in unexpected ways. Use the <a href=\"https://developer.mozilla.org/en-US/docs/CSS/-moz-appearance\">properties</a> <code>-webkit-appearance</code> and <code>-moz-appearance</code> to change that. Example:</li>\n</ul>\n\n<pre class=\"lang-css prettyprint-override\"><code>    [type=\"search\"] {\n        -moz-appearance:    textfield;\n        -webkit-appearance: textfield;\n        appearance: textfield;\n    }\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "toscho",
                        "user_id": 299509
                    },
                    "score": 2546
                },
                {
                    "body": "<p>In addition to toscho's answer I've noticed some webkit inconsistencies between Chrome 9-10 and Safari 5 with the CSS properties supported that are worth noting.</p>\n\n<p>Specifically Chrome 9 and 10 do not support <code>background-color</code>, <code>border</code>, <code>text-decoration</code> and <code>text-transform</code> when styling the placeholder.</p>\n\n<p>The full cross-browser comparison is <a href=\"http://blog.ajcw.com/2013/09/css-placeholder-cross-browser-support/\">here</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ajcw",
                        "user_id": 310174
                    },
                    "score": 43
                },
                {
                    "body": "<p>You may also want to style textareas:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {\n  color: #636363;\n}\ninput:-moz-placeholder, textarea:-moz-placeholder {\n  color: #636363;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matt",
                        "user_id": 365068
                    },
                    "score": 134
                },
                {
                    "body": "<pre class=\"lang-css prettyprint-override\"><code>*::-webkit-input-placeholder {\n    color: red;\n}\n*:-moz-placeholder {\n    /* FF 4-18 */\n    color: red;\n}\n*::-moz-placeholder {\n    /* FF 19+ */\n    color: red;\n}\n*:-ms-input-placeholder {\n    /* IE 10+ */\n    color: red;\n}\n</code></pre>\n\n<p>This will style all <code>input</code> and <code>textarea</code> placeholders.</p>\n\n<p><a href=\"http://jsfiddle.net/oz3L1L6w/\">JSFiddle Demo</a></p>\n\n<p><strong>Do not group these rules. Instead, make a separate rule for every selector (one invalid selector in a group makes the whole group invalid)</strong></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "brillout.com",
                        "user_id": 270274
                    },
                    "score": 254
                },
                {
                    "body": "<p>How about this</p>\n\n<pre><code>&lt;input type=\"text\" value=\"placeholder text\" onfocus=\"this.style.color='#000'; \nthis.value='';\" style=\"color: #f00;\"/&gt;\n</code></pre>\n\n<p>No CSS or placeholder, but you get the same functionality.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user1729061",
                        "user_id": 1729061
                    },
                    "score": 1
                },
                {
                    "body": "<p>In FF and IE, the normal input text color overrides the color property of placeholders. So, we need to </p>\n\n<pre class=\"lang-css prettyprint-override\"><code>::-webkit-input-placeholder { \n    color: red; text-overflow: ellipsis; \n}\n:-moz-placeholder { \n    color: #acacac !important; text-overflow: ellipsis; \n}\n::-moz-placeholder { \n    color: #acacac !important; text-overflow: ellipsis; \n} /* for the future */\n:-ms-input-placeholder { \n    color: #acacac !important; text-overflow: ellipsis; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dionysios Arvanitis",
                        "user_id": 1173284
                    },
                    "score": 13
                },
                {
                    "body": "<p>I don't remember where I've found this code snippet on the internet (it wasn't written by me, don't remember where I've found it, nor who wrote it).</p>\n\n<pre><code>$('[placeholder]').focus(function() {\n        var input = $(this);\n        if (input.val() == input.attr('placeholder')) {\n            input.val('');\n            input.removeClass('placeholder');\n        }\n    }).blur(function() {\n        var input = $(this);\n        if (input.val() == '' || input.val() == input.attr('placeholder')) {\n            input.addClass('placeholder');\n            input.val(input.attr('placeholder'));\n        }\n    }).blur();\n    $('[placeholder]').parents('form').submit(function() {\n        $(this).find('[placeholder]').each(function() {\n            var input = $(this);\n            if (input.val() == input.attr('placeholder')) {\n                input.val('');\n            }\n        })\n    });\n</code></pre>\n\n<p>Just load this javascript and then edit your placeholder with CSS by calling this rule:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>form .placeholder {\n   color: #222;\n   font-size: 25px;\n   /* etc */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dragos Rizescu",
                        "user_id": 1769519
                    },
                    "score": 6
                },
                {
                    "body": "<p>For bootstrap LESS users, there is a mixin .placeholder:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>// Placeholder text\n// -------------------------\n.placeholder(@color: @placeholderText) {\n  &amp;:-moz-placeholder {\n    color: @color;\n  }\n  &amp;:-ms-input-placeholder {\n    color: @color;\n  }\n  &amp;::-webkit-input-placeholder {\n    color: @color;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paweld2",
                        "user_id": 1883786
                    },
                    "score": 28
                },
                {
                    "body": "<p>this will work fine. <strong><a href=\"http://jsfiddle.net/hbirjand/7x61fmgt/\" rel=\"nofollow\">DEMO HERE</a></strong></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>input::-webkit-input-placeholder, textarea::-webkit-input-placeholder { \n    color:    #666;\n}\ninput:-moz-placeholder, textarea:-moz-placeholder { \n    color:    #666;\n}\ninput::-moz-placeholder, textarea::-moz-placeholder { \n    color:    #666;\n}\ninput:-ms-input-placeholder, textarea:-ms-input-placeholder { \n    color:    #666;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Love Trivedi",
                        "user_id": 2702447
                    },
                    "score": 11
                },
                {
                    "body": "<p>Cross-browser solution:</p>\n\n<pre><code>/* all elements */\n::-webkit-input-placeholder { color:#f00; }\n::-moz-placeholder { color:#f00; } /* firefox 19+ */\n:-ms-input-placeholder { color:#f00; } /* ie */\ninput:-moz-placeholder { color:#f00; }\n\n/* individual elements: webkit */\n#field2::-webkit-input-placeholder { color:#00f; }\n#field3::-webkit-input-placeholder { color:#090; background:lightgreen; text-transform:uppercase; }\n#field4::-webkit-input-placeholder { font-style:italic; text-decoration:overline; letter-spacing:3px; color:#999; }\n\n/* individual elements: mozilla */\n#field2::-moz-placeholder { color:#00f; }\n#field3::-moz-placeholder { color:#090; background:lightgreen; text-transform:uppercase; }\n#field4::-moz-placeholder { font-style:italic; text-decoration:overline; letter-spacing:3px; color:#999; }\n</code></pre>\n\n<p>Credit: <a href=\"http://davidwalsh.name/html5-placeholder-css\">David Walsh</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kristian",
                        "user_id": 680578
                    },
                    "score": 10
                },
                {
                    "body": "<p>For bootstrap users, if you are using <code>class=\"form-control\"</code>, there may be a CSS specificity issue. You should get a higher priority:</p>\n\n<pre><code>.form-control::-webkit-input-placeholder {\n    color: red;\n}\n//.. and other browsers\n</code></pre>\n\n<p>or if you are using LESS:</p>\n\n<pre><code>.form-control{\n    .placeholder(red);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "gfaceless",
                        "user_id": 1150091
                    },
                    "score": 0
                },
                {
                    "body": "<p>For SASS users:</p>\n\n<pre><code>// create placeholder mixin\n@mixin placeholder($color, $size:\"\") {\n  &amp;::-webkit-input-placeholder {\n    color: $color;\n    @if $size != \"\" {\n      font-size: $size;\n    }\n  }\n  &amp;:-moz-placeholder {\n    color: $color;\n    @if $size != \"\" {\n      font-size: $size;\n    }\n  }\n  &amp;::-moz-placeholder {\n    color: $color;\n    @if $size != \"\" {\n      font-size: $size;\n    }\n  }\n  &amp;:-ms-input-placeholder {\n    color: $color;\n    @if $size != \"\" {\n      font-size: $size;\n    }\n  }\n}\n\n// use placeholder mixin (size param is optional)\n[placeholder] {\n  @include c-placeholder(red, 10px);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Konst_",
                        "user_id": 2203159
                    },
                    "score": 1
                },
                {
                    "body": "<p>Now we have a standard way to apply CSS to an input's placeholder : <code>::placeholder</code> pseudo-element from <a href=\"http://www.w3.org/TR/css-pseudo-4/#selectordef-placeholder\" rel=\"nofollow\">this</a> CSS4 Draft.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user3790069",
                        "user_id": 3790069
                    },
                    "score": 1
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>::-webkit-input-placeholder { /* WebKit browsers */\r\n    color:    #909;\r\n}\r\n:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n::-moz-placeholder { /* Mozilla Firefox 19+ */\r\n   color:    #909;\r\n   opacity:  1;\r\n}\r\n:-ms-input-placeholder { /* Internet Explorer 10+ */\r\n   color:    #909;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input placeholder=\"Stack Snippets are awesome!\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "RAJ",
                        "user_id": 4596065
                    },
                    "score": 0
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>    input[placeholder],\r\n    [placeholder],\r\n    *[placeholder] {\r\n      color: red !important;\r\n    }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"text\" placeholder=\"Value\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Snow",
                        "user_id": 2132557
                    },
                    "score": 0
                }
            ],
            "body": "<p>Chrome supports the <a href=\"http://www.w3.org/html/wg/drafts/html/master/single-page.html#the-placeholder-attribute\">placeholder attribute</a> on <code>input[type=text]</code> elements (others probably do too).</p>\n\n<p>But the following CSS doesn't do diddly squat to the placeholder's value:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>    input[placeholder],\r\n    [placeholder],\r\n    *[placeholder] {\r\n      color: red !important;\r\n    }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"text\" placeholder=\"Value\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>Value</code> will still remain grey instead of red.</p>\n\n<p><strong>Is there a way to change the color of the placeholder text?</strong></p>\n\n<p>I'm already using the jQuery placeholder plugin for the browsers that don't support the placeholder attribute natively.</p>\n",
            "last_activity_date": 1425473419,
            "owner": {
                "display_name": "David Murdoch",
                "user_id": 160173
            },
            "question_id": 2610497,
            "score": 1674,
            "tags": [
                "html",
                "css",
                "html5",
                "html-input"
            ],
            "title": "Change an input&#39;s HTML5 placeholder color with CSS"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<h2>If you don't need to support IE9 or lower, you can use flexbox freely, and don't need to use floated layouts.</h2>\n\n<p>It's worth noting that today, the use of floated elements for layout is getting more and more discouraged with the use of better alternatives.</p>\n\n<ul>\n<li><code>display: inline-block</code> - Better</li>\n<li><strong><a href=\"https://developer.mozilla.org/en-US/docs/CSS/Using_CSS_flexible_boxes\">Flexbox</a></strong> - Best (but limited browser support)</li>\n</ul>\n\n<p>Flexbox is supported from Firefox 18, Chrome 21, Opera 12.10, and Internet Explorer 10, Safari 6.1 (including Mobile Safari) and Android's default browser 4.4.</p>\n\n<p>For a detailed browser list see: <a href=\"http://caniuse.com/flexbox\">http://caniuse.com/flexbox</a>.</p>\n\n<p>(Perhaps once it's position is established completely, it may be the absolutely recommended way of laying out elements.)</p>\n\n<hr>\n\n<p>A clearfix is a way for an element to <strong>automatically clear its child elements</strong>, so that you don't need to add additional markup. It's generally used in <em>float layouts</em> where elements are floated to be stacked horizontally.</p>\n\n<p>The clearfix is a way to combat the <strong><a href=\"http://complexspiral.com/publications/containing-floats/\">zero-height container problem</a></strong> for floated elements</p>\n\n<p>A clearfix is performed as follows:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.clearfix:after {\n   content: \" \"; /* Older browser do not support empty content */\n   visibility: hidden;\n   display: block;\n   height: 0;\n   clear: both;\n}\n</code></pre>\n\n<p>Or, if you don't require IE&lt;8 support, the following is fine too:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.clearfix:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n</code></pre>\n\n<p>Normally you would need to do something as follows:</p>\n\n\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div&gt;\n    &lt;div style=\"float: left;\"&gt;Sidebar&lt;/div&gt;\n    &lt;div style=\"clear: both;\"&gt;&lt;/div&gt; &lt;!-- Clear the float --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>With clearfix, you only need to</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"clearfix\"&gt;\n    &lt;div style=\"float: left;\" class=\"clearfix\"&gt;Sidebar&lt;/div&gt;\n    &lt;!-- No Clearing div! --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Read about it in <strong><a href=\"http://css-tricks.com/all-about-floats/\">this article - by Chris Coyer @ CSS-Tricks</a></strong></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Second Rikudo",
                        "user_id": 871050
                    },
                    "score": 388
                },
                {
                    "body": "<p>The other answers are correct. But I want to add that it is a relic of the time when people were first learning CSS, and abused <code>float</code> to do all their layout. <code>float</code> is meant to do stuff like float images next to long runs of text, but lots of people used it as their primary layout mechanism. Since it wasn't really meant for that, you need hacks like \"clearfix\" to make it work.</p>\n\n<p>These days <code>display: inline-block</code> is a solid alternative (<a href=\"http://www.quirksmode.org/css/display.html\">except for IE6 and IE7</a>), although more modern browsers are coming with even more useful layout mechanisms under names like flexbox, grid layout, etc.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Domenic",
                        "user_id": 3191
                    },
                    "score": 21
                },
                {
                    "body": "<p>A technique commonly used in CSS float-based layouts is assigning a handful of CSS properties to an element which you know will contain floating elements. The technique, which is commonly implemented using a class definition called <code>clearfix</code>, (usually) implements the following CSS behaviors:</p>\n\n<pre><code>.clearfix:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n    zoom: 1\n}\n</code></pre>\n\n<p>The purpose of these combined behaviors is to create a container <code>:after</code> the active element containing a single '.' marked as hidden which will clear all preexisting floats and effectively reset the the page for the next piece of content.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nathan Taylor",
                        "user_id": 143327
                    },
                    "score": 1
                },
                {
                    "body": "<p>Here is a different method same thing but a little different</p>\n\n<p>the difference is the content dot which is replaced with a <code>\\00A0</code> == <code>whitespace</code> </p>\n\n<p>More on this <a href=\"http://www.jqui.net/tips-tricks/css-clearfix/\" rel=\"nofollow\">http://www.jqui.net/tips-tricks/css-clearfix/</a></p>\n\n<pre><code>.clearfix:after { content: \"\\00A0\"; display: block; clear: both; visibility: hidden; line-height: 0; height: 0;}\n.clearfix{ display: inline-block;}\nhtml[xmlns] .clearfix { display: block;}\n* html .clearfix{ height: 1%;}\n.clearfix {display: block}\n</code></pre>\n\n<p>Here is a compact version of it... </p>\n\n<pre><code>.clearfix:after { content: \"\\00A0\"; display: block; clear: both; visibility: hidden; line-height: 0; height: 0;width:0;font-size: 0px}.clearfix{ display: inline-block;}html[xmlns] .clearfix { display: block;}* html .clearfix{ height: 1%;}.clearfix {display: block}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Val",
                        "user_id": 240215
                    },
                    "score": 0
                },
                {
                    "body": "<p>The <code>clearfix</code> allows a container to wrap it's floated children. Without a <code>clearfix</code> or equivalent styling, a container does not wrap around its floated children and collapses, just as if its floated chldren were positioned absolutely.</p>\n\n<p>There are several versions of the clearfix, with <strong><a href=\"https://github.com/necolas\" rel=\"nofollow\">Nicolas Gallagher</a></strong> and <strong><a href=\"https://twitter.com/thierrykoblentz\" rel=\"nofollow\">Thierry Koblentz</a></strong> as key authors.</p>\n\n<p>If you want support for older browsers, it's best to use this clearfix :</p>\n\n<pre><code>.clearfix:before, .clearfix:after {\n    content: \"\";\n    display: table;\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n.clearfix {\n    *zoom: 1;\n}\n</code></pre>\n\n<p>In SCSS, you should use the following technique :</p>\n\n<pre><code>%clearfix {\n  &amp;:before, &amp;:after {\n    content:\" \";\n    display:table;\n  }\n\n  &amp;:after {\n    clear:both;\n  }\n\n  &amp; {\n    *zoom:1;\n  }\n}\n\n#clearfixedelement {\n    @extend %clearfix;\n}\n</code></pre>\n\n<p>If you don't care about supporting older browsers, there's a shorter version :</p>\n\n<pre><code>.clearfix:after {\n    content:\"\";\n    display:table;\n    clear:both;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Slegers",
                        "user_id": 1946501
                    },
                    "score": 6
                },
                {
                    "body": "<p>Simply put, <strong>clearfix is a hack</strong>. </p>\n\n<p>It is one of those ugly things that we all just have to live with as it is really the only reasonable way of ensuring floated child elements don't overflow their parents. There are other layout schemes out there but floating is too commonplace in web design/development today to ignore the value of the clearfix hack.</p>\n\n<p>I personally lean towards the Micro Clearfix solution (Nicolas Gallagher)</p>\n\n<pre><code>.container:before,\n.container:after {\n  content:\"\";\n  display:table;\n}\n.container:after {\n  clear:both;\n}\n.container {\n  zoom:1; /* For IE 6/7 (trigger hasLayout) */\n}\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/a/1633170/643482\"><em>reference</em></a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "JRulle",
                        "user_id": 643482
                    },
                    "score": 0
                }
            ],
            "body": "<p>Recently I was looking through some website's code, and saw that every <code>&lt;div&gt;</code>  had a class <code>clearfix</code>.</p>\n\n<p>After a quick Google, I learnt that is for IE6 sometimes, but what <strong>actually</strong> is the clearfix? Could you provide some examples of a layout with clearfix, comparing to a layout without clearfix?</p>\n",
            "last_activity_date": 1426808805,
            "owner": {
                "display_name": "H Bellamy",
                "user_id": 1020773
            },
            "question_id": 8554043,
            "score": 350,
            "tags": [
                "html",
                "css",
                "layout",
                "cross-browser",
                "clearfix"
            ],
            "title": "What is clearfix?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Why not use <a href=\"http://www.w3schools.com/jsref/dom_obj_style.asp\"><code>.style</code> of the DOM element</a>?  It's an object which contains members such as <code>width</code> and <code>backgroundColor</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "strager",
                        "user_id": 39992
                    },
                    "score": 17
                },
                {
                    "body": "<p>A couple years late, but here is a solution that retrieves both inline styling and external styling:</p>\n\n<pre><code>function css(a) {\n    var sheets = document.styleSheets, o = {};\n    for (var i in sheets) {\n        var rules = sheets[i].rules || sheets[i].cssRules;\n        for (var r in rules) {\n            if (a.is(rules[r].selectorText)) {\n                o = $.extend(o, css2json(rules[r].style), css2json(a.attr('style')));\n            }\n        }\n    }\n    return o;\n}\n\nfunction css2json(css) {\n    var s = {};\n    if (!css) return s;\n    if (css instanceof CSSStyleDeclaration) {\n        for (var i in css) {\n            if ((css[i]).toLowerCase) {\n                s[(css[i]).toLowerCase()] = (css[css[i]]);\n            }\n        }\n    } else if (typeof css == \"string\") {\n        css = css.split(\"; \");\n        for (var i in css) {\n            var l = css[i].split(\": \");\n            s[l[0].toLowerCase()] = (l[1]);\n        }\n    }\n    return s;\n}\n</code></pre>\n\n<p>Pass a jQuery object into <code>css()</code> and it will return an object, which you can then plug back into jQuery's <code>$().css()</code>, ex:</p>\n\n<pre><code>var style = css($(\"#elementToGetAllCSS\"));\n$(\"#elementToPutStyleInto\").css(style);\n</code></pre>\n\n<p>:)</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "marknadal",
                        "user_id": 342275
                    },
                    "score": 227
                },
                {
                    "body": "<p>Two years late, but I have the solution you're looking for. Not intending to take credit form the <a href=\"http://upshots.org/?p=192\">original author</a>, here's a plugin which I found works exceptionally well for what you need, but gets <strong>all</strong> possible styles in all browsers, even IE.</p>\n\n<p><strong>Warning:</strong> This code generates a lot of output, and should be used sparingly. It not only copies all standard CSS properties, but also all vendor CSS properties for that browser.</p>\n\n<p><code>jquery.getStyleObject.js:</code></p>\n\n<pre><code>/*\n * getStyleObject Plugin for jQuery JavaScript Library\n * From: http://upshots.org/?p=112\n */\n\n(function($){\n    $.fn.getStyleObject = function(){\n        var dom = this.get(0);\n        var style;\n        var returns = {};\n        if(window.getComputedStyle){\n            var camelize = function(a,b){\n                return b.toUpperCase();\n            };\n            style = window.getComputedStyle(dom, null);\n            for(var i = 0, l = style.length; i &lt; l; i++){\n                var prop = style[i];\n                var camel = prop.replace(/\\-([a-z])/g, camelize);\n                var val = style.getPropertyValue(prop);\n                returns[camel] = val;\n            };\n            return returns;\n        };\n        if(style = dom.currentStyle){\n            for(var prop in style){\n                returns[prop] = style[prop];\n            };\n            return returns;\n        };\n        return this.css();\n    }\n})(jQuery);\n</code></pre>\n\n<p>Basic usage is pretty simple, but he's written a function for that as well:</p>\n\n<pre><code>$.fn.copyCSS = function(source){\n\u00a0\u00a0var styles = $(source).getStyleObject();\n\u00a0\u00a0this.css(styles);\n}\n</code></pre>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dakota",
                        "user_id": 362042
                    },
                    "score": 66
                },
                {
                    "body": "<p>@marknadal's solution wasn't grabbing hyphenated properties for me (e.g. <code>max-width</code>), but changing the first <code>for</code> loop in <code>css2json()</code> made it work, and I suspect performs fewer iterations:</p>\n\n<pre><code>for (var i = 0; i &lt; css.length; i += 1) {\n    s[css[i]] = css.getPropertyValue(css[i]);\n}\n</code></pre>\n\n<p>Loops via <code>length</code> rather than <code>in,</code> retrieves via <code>getPropertyValue()</code> rather than <code>toLowerCase().</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "brandonhill",
                        "user_id": 815411
                    },
                    "score": 2
                },
                {
                    "body": "<p>I had tried many different solutions. This was the only one that worked for me in that it was able to pick up on styles applied at class level and at style as directly attributed on the element. So a font set at css file level and one as a style attribute; it returned the correct font.</p>\n\n<p>It is simple! (Sorry, can't find where I originally found it)</p>\n\n<pre><code>//-- html object\nvar element = htmlObject; //e.g document.getElementById\n//-- or jquery object\nvar element = htmlObject[0]; //e.g $(selector)\n\nvar stylearray = document.defaultView.getComputedStyle(element, null);\nvar font = stylearray[\"font-family\"]\n</code></pre>\n\n<p>Alternatively you can list all the style by cycling through the array</p>\n\n<pre><code>for (var key in styles) {\nconsole.log(key + ': ' + styles[key];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Valamas - AUS",
                        "user_id": 511438
                    },
                    "score": 1
                }
            ],
            "body": "<p>Is there a way in jQuery to get all CSS from an existing element and apply it to another without listing them all?</p>\n\n<p>I know it would work if they were a style attribute with <code>attr()</code>, but all of my styles are in an external style sheet.</p>\n",
            "last_activity_date": 1415170922,
            "owner": {
                "display_name": "alex",
                "user_id": 31671
            },
            "question_id": 754607,
            "score": 184,
            "tags": [
                "javascript",
                "jquery",
                "css"
            ],
            "title": "Can jQuery get all CSS styles associated with an element?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>If the only issue is height, just using divs seems to work:</p>\n\n<pre><code>&lt;div id=\"header\"&gt;header content&lt;/div&gt;\n&lt;div id=\"content\" style=\"height:100%\"&gt;content content&lt;/div&gt;\n</code></pre>\n\n<p>In a simple test, the width of header/content is different in your example and mine, but I'm not sure from your post if you're concerned about the width?</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Bruce",
                        "user_id": 6310
                    },
                    "score": -1
                },
                {
                    "body": "<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;title&gt;Test&lt;/title&gt;\n&lt;style type=\"text/css\"&gt;\nbody\n,html\n{\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    color: #FFF;\n}\n\n#header\n{\n    float: left;\n    width: 100%;\n    background: red;\n}\n\n#content\n{\n    height: 100%;\n    overflow: auto;\n    background: blue;\n}\n\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;div id=\"content\"&gt;\n\t    &lt;div id=\"header\"&gt;\n\t\t\t    Header\n    \t\t\t&lt;p&gt;Header stuff&lt;/p&gt;\n\t    &lt;/div&gt;\n\t\t    Content\n    \t\t&lt;p&gt;Content stuff&lt;/p&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>In all sane browsers, you can put the \"header\" div before the content, as a sibling, and the same CSS will work.  However, IE7- does not interpret the height correctly if the float is 100% in that case, so the header needs to be IN the content, as above.  The overflow: auto will cause double scroll bars on IE (which always has the viewport scrollbar visible, but disabled), but without it, the content will clip if it overflows.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jerph",
                        "user_id": 1701
                    },
                    "score": 6
                },
                {
                    "body": "<p>There really isn't a sound, cross-browser way to do this in CSS.  Assuming your layout has complexities, you need to use JavaScript to set the element's height.  The essence of what you need to do is:</p>\n\n<pre><code>Element Height = Viewport height - element.offset.top - desired bottom margin\n</code></pre>\n\n<p>Once you can get this value and set the element's height, you need to attach event handlers to both the window onload and onresize so that you can fire your resize function.</p>\n\n<p>Also, assuming your content could be larger than the viewport, you will need to set overflow-y to scroll.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "NICCAI",
                        "user_id": 1629400
                    },
                    "score": 134
                },
                {
                    "body": "<p>Try this, it should work in all browsers:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n    &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /&gt;\n    &lt;style type=\"text/css\" media=\"screen\"&gt;\n    * { \n        margin: 0; \n    }\n\n    html, \n    body { \n        height: 100%; \n    }\n\n    #wrapper {\n        min-height: 100%;\n        height:     auto !important;\n        height:     100%;\n        margin:     0 auto -44px; /* -44px being the size of the footer */\n    }\n\n    #header { \n        height: 86px; \n    }\n\n    #footer, \n    #push {\n        height: 44px;   \n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"wrapper\"&gt;\n        &lt;div id=\"header\"&gt;header&lt;/div&gt;\n        &lt;div id=\"content\"&gt;content&lt;/div&gt;\n        &lt;div id=\"push\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"footer\"&gt;footer&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/QFt93/\" rel=\"nofollow\">http://jsfiddle.net/QFt93/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "daniels",
                        "user_id": 9789
                    },
                    "score": 30
                },
                {
                    "body": "<p>Vincent, I'll answer again using your new requirements.  Since you don't care about the content being hidden if it's too long,  you don't need to float the header.  Just put overflow hidden on the html and body tags, and set <code>#content</code> height to 100%. The content will always be longer than the viewport by the height of the header, but it'll be hidden and won't cause scrollbars.</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n    &lt;style type=\"text/css\"&gt;\n    body, html {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n      overflow: hidden;\n      color: #FFF;\n    }\n    p {\n      margin: 0;\n    }\n\n    #header {\n      background: red;\n    }\n\n    #content {\n      position: relative;\n      height: 100%;\n      background: blue;\n    }\n\n    #content #positioned {\n      position: absolute;\n      top: 0;\n      right: 0;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=\"header\"&gt;\n    Header\n    &lt;p&gt;Header stuff&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div id=\"content\"&gt;\n    Content\n    &lt;p&gt;Content stuff&lt;/p&gt;\n    &lt;div id=\"positioned\"&gt;Positioned Content&lt;/div&gt;\n  &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jerph",
                        "user_id": 1701
                    },
                    "score": 1
                },
                {
                    "body": "<p>I came up with an idea for this. For approximately 92% of the people viewing my website (<a href=\"http://www.lakipolitis.com\" rel=\"nofollow\">lakipolitis.com</a>), their browser is 1680x1050 or smaller. I've set my height for <code>#main</code> to a minimum height, then defined the height of the footer.</p>\n\n<pre><code>body {\n    height: 100%;\n}\n\n#main {\n    min-height: 89%;\n}\n\n#footer {\n    height: 63px;\n    overflow: hidden;\n}\n</code></pre>\n\n<p>So effectively, <code>#main</code> will always take up as much as 89% (never less than my content, and usually never less than ~940px) of the viewable space, which will ALWAYS be smaller than my content.</p>\n\n<p>It may not work for you, but it worked for me.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Laki Politis",
                        "user_id": 622825
                    },
                    "score": 0
                },
                {
                    "body": "<p>I've been searching for an answer for this as well. If you are fortunate enough to be able to target IE8 and up, you can use display:table and related values to get the rendering rules of tables with block-level elements including div.</p>\n\n<p>If you are even luckier and your users are using top-tier browsers (for example, if this is an intranet app on computers you control, like my latest project is), you can use the new <a href=\"http://www.w3.org/TR/css3-flexbox/\">Flexible Box Layout</a> in CSS3!</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chris",
                        "user_id": 13700
                    },
                    "score": 10
                },
                {
                    "body": "<p>I wresteled with this for a while and ended up with the following:</p>\n\n<p>Since it is easy to make the content DIV the same height as the parent but apparently difficult to make it the parent height minus the header height I decided to make content div full height but position it absolutely in the top left corner and then define a padding for the top which has the height of the header. This way the content displays neatly under the header and fills the whole remaining space:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    overflow: hidden;\n}\n\n#header {\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 50px;\n}\n\n#content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    padding-top: 50px;\n    height: 100%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "B_G",
                        "user_id": 806386
                    },
                    "score": 5
                },
                {
                    "body": "<p>it <strong>never worked for me in other way then with use of the JavaScript</strong> as NICCAI suggested in the very first answer. I am using that approach to rescale the <code>&lt;div&gt;</code> with the Google Maps. </p>\n\n<p>Here is the full example how to do that (works in Safari/FireFox/IE/iPhone/Andorid (works with rotation)):</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;style type=\"text/css\"&gt;\n\n        body\n        {\n            height: 100%;\n            margin: 0;\n            padding: 0;\n        }\n\n        .header\n        {\n            height: 100px;\n            background-color: red;\n        }\n\n        .content\n        {\n            height: 100%;\n            background-color: green;\n        }\n    &lt;/style&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\n    function resize()\n    {\n        // Get elements and necessary element heights\n        var contentDiv = document.getElementById(\"contentId\");\n        var headerDiv = document.getElementById(\"headerId\");\n        var headerHeight = headerDiv.offsetHeight;\n\n        // Get view height\n        var viewportHeight = document.getElementsByTagName('body')[0].clientHeight;\n\n        // Compute the content height - we want to fill the whole remaining area\n        // in browser window\n        contentDiv.style.height = viewportHeight - headerHeight;\n    }\n\n   window.onload = resize;\n   window.onresize = resize;\n&lt;/script&gt;\n\n&lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"header\" id=\"headerId\"&gt;Hello&lt;/div&gt;\n        &lt;div class=\"content\" id=\"contentId\"&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "STeN",
                        "user_id": 384115
                    },
                    "score": 0
                },
                {
                    "body": "<p>What worked for me (with a div within another div and I assume in all other circumstances) is to set the bottom padding to 100%. That is, add this to your css / stylesheet:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>padding-bottom: 100%;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tonye - True Vine Productions",
                        "user_id": 999297
                    },
                    "score": 8
                },
                {
                    "body": "<p>The original post is more than 3 years ago. And I guess many people who come to this post like me  are looking for an app-like layout solution, say a somehow fixed header, footer, and full height content taking up the rest screen. If so, this post may help, it works on IE7+, etc.</p>\n\n<p><a href=\"http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/\">http://blog.stevensanderson.com/2011/10/05/full-height-app-layouts-a-css-trick-to-make-it-easier/</a></p>\n\n<p>And here are some snippets from that post,</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n    &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" /&gt;\n    &lt;style type=\"text/css\" media=\"screen\"&gt;\n    /* Generic pane rules */\n    body { margin: 0 }\n    .row, .col { overflow: hidden; position: absolute; }\n    .row { left: 0; right: 0; }\n    .col { top: 0; bottom: 0; }\n    .scroll-x { overflow-x: auto; }\n    .scroll-y { overflow-y: auto; }\n\n    .header.row { height: 75px; top: 0; }\n    .body.row { top: 75px; bottom: 50px; }\n    .footer.row { height: 50px; bottom: 0; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"header row\"&gt;\n        &lt;h2&gt;My header&lt;/h2&gt;\n    &lt;/div&gt; \n    &lt;div class=\"body row scroll-y\"&gt;\n        &lt;p&gt;The body&lt;/p&gt;\n    &lt;/div&gt; \n    &lt;div class=\"footer row\"&gt;\n        My footer\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "h--n",
                        "user_id": 375230
                    },
                    "score": 97
                },
                {
                    "body": "<p>Why not just like this?</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>html, body {\n    height: 100%;\n}\n\n#containerInput {\n    background-image: url('../img/edit_bg.jpg');\n    height: 40%;\n}\n\n#containerControl {\n    background-image: url('../img/control_bg.jpg');\n    height: 60%;\n}\n</code></pre>\n\n<p>Giving you html and body (in that order) a height and then just give your elements a height?</p>\n\n<p>Works for me</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "herrtoto",
                        "user_id": 1220637
                    },
                    "score": 5
                },
                {
                    "body": "<p>I found a quite simple solution, because for me it was just a design issue.\nI wanted the rest of the Page not to be white below the red footer.\nSo i set the pages background color to red. And the contents backgroundcolor to white.\nWith the contents height set to eg. 20em or 50% an almost empty page won't leave the whole page red. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "htho",
                        "user_id": 1635906
                    },
                    "score": 1
                },
                {
                    "body": "<p>Try this</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var sizeFooter = function(){\n    $(\".webfooter\")\n        .css(\"padding-bottom\", \"0px\")\n        .css(\"padding-bottom\", $(window).height() - $(\"body\").height())\n}\n$(window).resize(sizeFooter);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Arun",
                        "user_id": 161633
                    },
                    "score": 1
                },
                {
                    "body": "<p>If you can deal with not supporting old browsers (that is, MSIE 9 or older), you can do this with <a href=\"http://caniuse.com/#feat=flexbox\" rel=\"nofollow\">Flexible Box Layout Module</a> which is already W3C CR. That module allows other nice tricks, too, such as re-ordering content.</p>\n\n<p>Unfortunately, MSIE 9 or lesser do not support this and you have to use vendor prefix for the CSS property for every browser other than Firefox. Hopefully other vendors drop the prefix soon, too.</p>\n\n<p>An another choice would be <a href=\"http://caniuse.com/#search=grid\" rel=\"nofollow\">CSS Grid Layout</a> but that has even less support from stable versions of browsers. In practice, only MSIE 10 supports this.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mikko Rantalainen",
                        "user_id": 334451
                    },
                    "score": 4
                },
                {
                    "body": "<p>Instead of using tables in the markup, you could use <code>css tables</code>.</p>\n\n<h2>Markup</h2>\n\n<pre><code>&lt;body&gt;    \n    &lt;div&gt;hello &lt;/div&gt;\n    &lt;div&gt;there&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<h2>(Relevant) CSS</h2>\n\n<pre><code>body\n{\n    display:table;\n    width:100%;\n}\ndiv\n{\n    display:table-row;\n}\ndiv+ div\n{\n    height:100%;  \n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/danield770/FC7eY/\"><strong>FIDDLE1</strong></a> and <strong><a href=\"http://jsfiddle.net/danield770/FC7eY/1/\">FIDDLE2</a></strong></p>\n\n<p><strong>Some advantages of this method are:</strong></p>\n\n<p>1) Less markup</p>\n\n<p>2) Markup is more semantic than tables, because this is not tabular data.</p>\n\n<p>3) Browser support is <strong>very good</strong>: IE8+, All modern browsers and mobile devices (<a href=\"http://caniuse.com/css-table\">caniuse</a>)  </p>\n\n<p><hr>\nJust for completeness, here are the equivalent Html elements to css properties for the <a href=\"http://www.w3.org/TR/CSS2/tables.html#table-display\">The CSS table model</a></p>\n\n<pre><code>table    { display: table }\ntr       { display: table-row }\nthead    { display: table-header-group }\ntbody    { display: table-row-group }\ntfoot    { display: table-footer-group }\ncol      { display: table-column }\ncolgroup { display: table-column-group }\ntd, th   { display: table-cell }\ncaption  { display: table-caption } \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Danield",
                        "user_id": 703717
                    },
                    "score": 70
                },
                {
                    "body": "<p>You can actually use <code>display: table</code> to split the area into two elements (header and content), where the header can vary in height and the content fills the remaining space. This works with the whole page, as well as when the area is simply the content of another element positioned with <code>position</code> set to <code>relative</code>, <code>absolute</code> or <code>fixed</code>. It will work as long as the parent element has a non-zero height.</p>\n\n<p><a href=\"http://jsfiddle.net/amiramix/aD6gE/\" rel=\"nofollow\">See this fiddle</a> and also the code below:</p>\n\n<p>CSS:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body, html {\n    height: 100%;\n    margin: 0;\n    padding: 0;\n}\n\np {\n    margin: 0;\n    padding: 0;\n}\n\n.additional-padding {\n    height: 50px;\n    background-color: #DE9;\n}\n\n.as-table {\n    display: table;\n    height: 100%;\n    width: 100%;\n}\n\n.as-table-row {\n    display: table-row;\n    height: 100%;\n}\n\n#content {\n    width: 100%;\n    height: 100%;\n    background-color: #33DD44;\n}\n</code></pre>\n\n<p>HTML:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"as-table\"&gt;\n    &lt;div id=\"header\"&gt;\n        &lt;p&gt;This header can vary in height, it also doesn't have to be displayed as table-row. It will simply take the necessary space and the rest below will be taken by the second div which is displayed as table-row. Now adding some copy to artificially expand the header.&lt;/p&gt;\n        &lt;div class=\"additional-padding\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"as-table-row\"&gt;\n        &lt;div id=\"content\"&gt;\n            &lt;p&gt;This is the actual content that takes the rest of the available space.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Amiramix",
                        "user_id": 745250
                    },
                    "score": 1
                },
                {
                    "body": "<p>It can be done via Jquery very easliy: </p>\n\n<pre><code>function footerbottom() {\n    var footer = $('#footer');\n    var getfootheight = footer.height();\n    var getbodyheight = $('body').height();\n    var decutthetwo = getbodyheight - getfootheight;\n    footer.css({\n        position: 'absolute',\n        top: decutthetwo\n    });\n}\n\nfooterbottom();\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/vimes1984/8w7tU/1/\" rel=\"nofollow\">Fiddle</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "vimes1984",
                        "user_id": 1754467
                    },
                    "score": -1
                },
                {
                    "body": "<h2>CSS only Approach</h2>\n\n<p>When you want the middle element to span across entire page vertically, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/calc\" rel=\"nofollow\"><code>calc()</code></a> which is introduced in CSS3.</p>\n\n<p>Assuming we have a <em>fixed height</em> <code>header</code> and <code>footer</code> elements and we want the <code>section</code> tag to take entire available vertical height...</p>\n\n<p><a href=\"http://jsfiddle.net/WdrDH/\" rel=\"nofollow\"><strong>Demo</strong></a></p>\n\n<p><strong>Assumed markup</strong></p>\n\n<pre><code>&lt;header&gt;100px&lt;/header&gt;\n&lt;section&gt;Expand me for remaining space&lt;/section&gt;\n&lt;footer&gt;150px&lt;/footer&gt;\n</code></pre>\n\n<p>So your CSS should be</p>\n\n<pre><code>html, body {\n    height: 100%;\n}\n\nheader {\n    height: 100px;\n    background: grey;\n}\n\nsection {\n    height: calc(100% - (100px + 150px)); \n    /* Adding `100px of header and 150px of footer */\n\n    background: tomato;\n}\n\nfooter {\n    height: 150px;\n    background-color: blue;\n}\n</code></pre>\n\n<p>So here, what am doing is, adding up the height of elements and than deducting from <code>100%</code> using <code>calc()</code> function.</p>\n\n<p>Just make sure that you use <code>height: 100%;</code> for the parent elements.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mr. Alien",
                        "user_id": 1542290
                    },
                    "score": 16
                },
                {
                    "body": "<h3>2015 update: the flexbox approach</h3>\n\n<p>There are two other answers briefly mentioning <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">flexbox</a>; however, that was more than two years ago, and they don't provide any examples. The specification for flexbox has definitely settled now.</p>\n\n<blockquote>\n  <p>Note: Though CSS Flexible Boxes Layout specification is at the Candidate Recommendation stage, not all browsers have implemented it. WebKit implementation must be prefixed with -webkit-; Internet Explorer implements an old version of the spec, prefixed with -ms-; Opera 12.10 implements the latest version of the spec, unprefixed. See the compatibility table on each property for an up-to-date compatibility status.</p>\n  \n  <p>(taken from <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes</a>)</p>\n</blockquote>\n\n<p>All major browsers and IE11+ support Flexbox. For IE 10 or older, you can use the <a href=\"http://flexiejs.com/\">FlexieJS</a> shim.</p>\n\n<h3>Working example</h3>\n\n<p>With flexbox you can easily switch between any of your rows or columns either having fixed dimensions, content-sized dimensions or remaining-space dimensions. In my example I have set the header to snap to its content (as per the OPs question), I've added a footer to show how to add a fixed-height region and then set the content area to fill up the remaining space.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>html,\r\nbody {\r\n  height: 100%;\r\n  margin: 0\r\n}\r\n\r\n.box {\r\n  display: flex;\r\n  flex-flow: column;\r\n  height: 100%;\r\n}\r\n\r\n.box .row {\r\n  border: 1px dotted grey;\r\n  flex: 0 1 30px;\r\n}\r\n\r\n.box .row.header {\r\n  flex: 0 1 auto;\r\n}\r\n\r\n.box .row.content {\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.box .row.footer {\r\n  flex: 0 1 40px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!-- Obviously, you could use HTML5 tags like `header`, `footer` and `section` --&gt;\r\n\r\n&lt;div class=\"box\"&gt;\r\n  &lt;div class=\"row header\"&gt;\r\n    &lt;p&gt;&lt;b&gt;header&lt;/b&gt;\r\n      &lt;br /&gt;\r\n      &lt;br /&gt;(sized to content)&lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"row content\"&gt;\r\n    &lt;p&gt;\r\n      &lt;b&gt;content&lt;/b&gt;\r\n      (fills remaining space)\r\n    &lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class=\"row footer\"&gt;\r\n    &lt;p&gt;&lt;b&gt;footer&lt;/b&gt; (fixed height)&lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In the CSS above, the <a href=\"https://developer.mozilla.org/en/CSS/flex\">flex</a> property shorthands the <a href=\"https://developer.mozilla.org/en/CSS/flex-grow\">flex-grow</a>, <a href=\"https://developer.mozilla.org/en/CSS/flex-shrink\">flex-shrink</a>, and <a href=\"https://developer.mozilla.org/en/CSS/flex-basis\">flex-basis</a> properties to establish the flexibility of the flex items. Mozilla has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">good introduction to the flexible boxes model</a>.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Pebbl",
                        "user_id": 1490904
                    },
                    "score": 24
                },
                {
                    "body": "<p>It could easily be done purely by <code>CSS</code> using <code>vh</code>:</p>\n\n<pre><code>#page \n{\n  display:block; width:100%; height:95vh !important; overflow:hidden;\n}\n#tdcontent \n{\n  float:left; width:100%; display:block;\n}\n#content \n{      \nfloat:left; width:100%; height:100%; display:block; overflow:scroll;\n}\n</code></pre>\n\n<p>and the <code>HTML</code></p>\n\n<pre><code>&lt;div id=\"page\"&gt;\n   &lt;div id=\"tdcontent\"&gt;\n   &lt;/div&gt;\n   &lt;div id=\"content\"&gt;\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>I checked it, It works in major browsers: <code>Chrome</code>, <code>IE</code>, and <code>FireFox</code></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ormoz",
                        "user_id": 1600305
                    },
                    "score": 1
                },
                {
                    "body": "<p>None of the solutions posted work when you need the bottom div to scroll when the content is too tall.  Here's a solution that works in that case:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"table container\"&gt;\n    &lt;div class=\"table-row header\"&gt;\n        &lt;div&gt;This is the header whose height is unknown&lt;/div&gt;\n        &lt;div&gt;This is the header whose height is unknown&lt;/div&gt;\n        &lt;div&gt;This is the header whose height is unknown&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"table-row body\"&gt;\n        &lt;div class=\"table-cell body-content-outer-wrapper\"&gt;\n            &lt;div class=\"body-content-inner-wrapper\"&gt;\n                &lt;div class=\"body-content\"&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                    &lt;div&gt;This is the scrollable content whose height is unknown&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>.table {\n    display: table;\n}\n\n.table-row {\n    display: table-row;\n}\n\n.table-cell {\n    display: table-cell;\n}\n\n.container {\n    width: 400px;\n    height: 300px;\n}\n\n.header {\n    background: cyan;\n}\n\n.body {\n    background: yellow;\n    height: 100%;\n}\n\n.body-content-outer-wrapper {\n    height: 100%;\n}\n\n.body-content-inner-wrapper {\n    height: 100%;\n    position: relative;\n    overflow: auto;\n}\n\n.body-content {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n}\n</code></pre>\n\n<p>From: <a href=\"http://blogs.msdn.com/b/kurlak/archive/2015/02/20/filling-the-remaining-height-of-a-container-while-handling-overflow-in-css.aspx\" rel=\"nofollow\">http://blogs.msdn.com/b/kurlak/archive/2015/02/20/filling-the-remaining-height-of-a-container-while-handling-overflow-in-css.aspx</a></p>\n\n<p>JSFiddle: <a href=\"http://jsfiddle.net/352ntoz2/\" rel=\"nofollow\">http://jsfiddle.net/352ntoz2/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Kurlak",
                        "user_id": 55732
                    },
                    "score": 0
                },
                {
                    "body": "<p>A simple solution, using flexbox:</p>\n\n<pre><code>&lt;div&gt;header&lt;/div&gt;\n&lt;div class=\"content\"&gt;&lt;/div&gt;\n</code></pre>\n\n<hr>\n\n<pre><code>html, body {\n  height: 100%;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n}\n\n.content {\n  flex-grow: 1;\n}\n</code></pre>\n\n<p><a href=\"http://codepen.io/isaacalves/pen/myKpVK\" rel=\"nofollow\">Codepen sample</a></p>\n\n<p><a href=\"http://codepen.io/isaacalves/pen/MYXENq\" rel=\"nofollow\">An alternate solution, with a div centered within the content div</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "zok",
                        "user_id": 795398
                    },
                    "score": 0
                }
            ],
            "body": "<p>I am currently working on a web application, where I want the content to fill the height of the entire screen.</p>\n\n<p>The page has a header, which contains a logo, and account information. This could be an arbitrary height. I want the content div to fill the rest of the page to the bottom.</p>\n\n<p>I have a header <code>div</code> and a content <code>div</code>. At the moment I am using a table for the layout like so:</p>\n\n<p>CSS:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#page {\n  height: 100%; width: 100%\n}\n#tdcontent {\n  height: 100%;\n}\n#content {\n  overflow: auto; /* or overflow: hidden; */\n}\n</code></pre>\n\n<p>HTML:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;table id=\"page\"&gt;\n  &lt;tr&gt;&lt;td id=\"tdheader\"&gt;\n    &lt;div id=\"header\"&gt;...&lt;/div&gt;\n  &lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td id=\"tdcontent\"&gt;\n    &lt;div id=\"content\"&gt;...&lt;/div&gt;\n  &lt;/td&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>The entire height of the page is filled, and no scrolling is required.</p>\n\n<p>For anything inside the content div, setting <code>top: 0;</code> will put it right underneath the header. Sometimes the content will be a real table, with it's height set to 100%. Putting <code>header</code> inside <code>content</code> will not allow this to work.</p>\n\n<p>Is there a way to achieve the same effect without using the <code>table</code>?</p>\n\n<p><strong>Update:</strong></p>\n\n<p>Elements inside the content <code>div</code> will have heights set to percentages as well. So something at 100% inside the <code>div</code> will fill it to the bottom. As will two elements at 50%.</p>\n\n<p><strong>Update 2:</strong></p>\n\n<p>For instance, if the header takes up 20% of the screen's height, a table specified at 50% inside <code>#content</code> would take up 40% of the screen space. So far, wrapping the entire thing in a table is the only thing that works.</p>\n",
            "last_activity_date": 1425061566,
            "owner": {
                "display_name": "Vincent McNabb",
                "user_id": 16299
            },
            "question_id": 90178,
            "score": 473,
            "tags": [
                "css",
                "html",
                "html-table"
            ],
            "title": "Make a div fill the height of the remaining screen space"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The <code>:first-child</code> selector is intended, like the name says, to select the first child of a parent tag. The children have to be embedded in the same parent tag. Your exact example will work (Just tried it <a href=\"http://www.w3schools.com/css/tryit.asp?filename=trycss_first-child1\">here</a>):</p>\n\n\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;body&gt;\n    &lt;p class=\"red\"&gt;first&lt;/p&gt;\n    &lt;div class=\"red\"&gt;second&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Maybe you have nested your tags in different parent tags? Are your tags of class <code>red</code> really the first tags under the parent?</p>\n\n<p>Notice also that this doesnt only apply to the first such tag in the whole document, but everytime a new parent is wrapped around it, like:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div&gt;\n    &lt;p class=\"red\"&gt;first&lt;/p&gt;\n    &lt;div class=\"red\"&gt;second&lt;/div&gt;\n&lt;/div&gt;\n&lt;div&gt;\n    &lt;p class=\"red\"&gt;third&lt;/p&gt;\n    &lt;div class=\"red\"&gt;fourth&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><code>first</code> and <code>third</code> will be red then.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>I dont know why martyn deleted his answer, but he had the solution, the <code>:nth-of-type</code> selector:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;\n&lt;head&gt;\n&lt;style type=\"text/css\"&gt;\n.red:nth-of-type(1)\n{\n    border:5px solid red;\n} \n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"home\"&gt;\n        &lt;span&gt;blah&lt;/span&gt;\n        &lt;p class=\"red\"&gt;first&lt;/p&gt;\n        &lt;p class=\"red\"&gt;second&lt;/p&gt;\n        &lt;p class=\"red\"&gt;third&lt;/p&gt;\n        &lt;p class=\"red\"&gt;fourth&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Credits to <a href=\"http://stackoverflow.com/users/264276/martyn\">Martyn</a>. More infos for example <a href=\"http://www.quirksmode.org/css/nthchild.html\">here</a>. Be aware that this is a CSS 3 selector, therefore not all browsers will recognize it (e.g. IE8 or older).</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Philip Daubmeier",
                        "user_id": 210114
                    },
                    "score": 166
                },
                {
                    "body": "<p>To match your selector, the element must have a class name of <code>red</code> and must be the first child of its parent.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div&gt;\n    &lt;span class=\"red\"&gt; &lt;!-- MATCH --&gt;\n&lt;/div&gt;\n\n&lt;div&gt;\n    &lt;span&gt;Blah&lt;/span&gt;\n    &lt;p class=\"red\"&gt; &lt;!-- NO MATCH --&gt;\n&lt;/div&gt;\n\n&lt;div&gt;\n    &lt;span&gt;Blah&lt;/span&gt;\n    &lt;div&gt;&lt;p class=\"red\"&gt;&lt;/div&gt; &lt;!-- MATCH --&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Chetan Sastry",
                        "user_id": 31284
                    },
                    "score": 7
                },
                {
                    "body": "<p>Since the other answers cover what's <em>wrong</em> with it, I'll try the other half, how to fix it.  Unfortunately, I don't know that you have a <strong>CSS only</strong> solution here, at least <em>not that I can think of</em>.  There are some other options though....</p>\n\n<ol>\n<li><p>Assign a <code>first</code> class to the element when you generate it, like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p class=\"red first\"&gt;&lt;/p&gt;\n&lt;div class=\"red\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.first.red {\n  border:5px solid red;\n}\n</code></pre>\n\n<p>This CSS only matches elements with <strong>both</strong> <code>first</code> and <code>red</code> classes.  </p></li>\n<li><p>Alternatively, do the same in JavaScript, for example here's what jQuery you would use to do this, using the same CSS as above:</p>\n\n<pre><code>$(\".red:first\").addClass(\"first\");\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nick Craver",
                        "user_id": 13249
                    },
                    "score": 4
                },
                {
                    "body": "<p>I felt this was a good place for a canonical answer as the question is general and quite clear, but the original accepted answer isn't quite right. I explain why the accepted answer is flawed in a later section, but first I'll cover how to do it the right way.</p>\n\n<p><a href=\"http://www.w3.org/TR/CSS21/selector.html#first-child\">The <code>:first-child</code> pseudo-class</a>, introduced in CSS2, represents <strong>the very first child of its parent</strong>. That's it. There's a very common misconception among web developers that it picks up whichever child element is the first to match the conditions specified by the rest of the compound selector. Due to the way selectors work (see <a href=\"http://stackoverflow.com/questions/5545649/css3-nth-childodd-with-a-selector/5546296#5546296\">here</a> for an explanation), that is simply not true.</p>\n\n<p><a href=\"http://www.w3.org/TR/css3-selectors/#first-of-type-pseudo\">Selectors level 3 introduces a <code>:first-of-type</code> pseudo-class</a>, which represents the first element among siblings of its element type. However, as with <code>:first-child</code>, it does not look at any other conditions or attributes. In HTML, the element type is represented by the tag name. In the question, that type is <code>p</code>.</p>\n\n<p>Unfortunately, there is no similar <code>:first-of-class</code> pseudo-class for matching the first child element of a given class. One workaround that <a href=\"http://stackoverflow.com/questions/5287272/css-select-first-element-with-a-certain-class/5293095#5293095\">Lea Verou</a> and I came up with for this (albeit totally independently) is to apply styles to <em>all</em> your elements with that class:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>/* \n * Select all .red children of .home, including the first one,\n * and give them a border.\n */\n.home &gt; .red {\n    border: 1px solid red;\n}\n</code></pre>\n\n<p>Then \"undo\" the styles for elements with the class that <em>come after the first one</em>, using <a href=\"http://www.w3.org/TR/selectors/#general-sibling-combinators\">the general sibling combinator <code>~</code></a> in an overriding rule:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>/* \n * Select all but the first .red child of .home,\n * and remove the border from the previous rule.\n */\n.home &gt; .red ~ .red {\n    border: none;\n}\n</code></pre>\n\n<p>Now only the first element with <code>class=\"red\"</code> will have a border.</p>\n\n<p>Here's an illustration of how the rules are applied:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"home\"&gt;\n  &lt;span&gt;blah&lt;/span&gt;         &lt;!-- [1] --&gt;\n  &lt;p class=\"red\"&gt;first&lt;/p&gt;  &lt;!-- [2] --&gt;\n  &lt;p class=\"red\"&gt;second&lt;/p&gt; &lt;!-- [3] --&gt;\n  &lt;p class=\"red\"&gt;third&lt;/p&gt;  &lt;!-- [3] --&gt;\n  &lt;p class=\"red\"&gt;fourth&lt;/p&gt; &lt;!-- [3] --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<ol>\n<li><p><strong>No rules are applied; no border is rendered.</strong><br>\nThis element does not have the class <code>red</code>, so it's skipped.</p></li>\n<li><p><strong>Only the first rule is applied; a red border is rendered.</strong><br>\nThis element has the class <code>red</code>, but it's not preceded by any elements with the class <code>red</code> in its parent. Thus the second rule is not applied, only the first, and the element keeps its border.</p></li>\n<li><p><strong>Both rules are applied; no border is rendered.</strong><br>\nThis element has the class <code>red</code>. It is also preceded by at least one other element with the class <code>red</code>. Thus both rules are applied, and the second <code>border</code> declaration overrides the first, thereby \"undoing\" it, so to speak.</p></li>\n</ol>\n\n<p>As a bonus, although it was introduced in Selectors 3, the general sibling combinator is actually pretty well-supported by IE7 and newer, unlike <code>:first-of-type</code> and <code>:nth-of-type()</code> which are only supported by IE9 onward. If you need good browser support, you're in luck.</p>\n\n<p>In fact, the fact that the sibling combinator is the only important component in this technique, <em>and</em> it has such amazing browser support, makes this technique very versatile \u2014 you can adapt it for filtering elements by other things, besides class selectors:</p>\n\n<ul>\n<li><p>You can use this to work around <code>:first-of-type</code> in IE7 and IE8, by simply supplying a type selector instead of a class selector (again, more on its incorrect usage here in a later section):</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>article &gt; p {\n    /* Apply styles to article &gt; p:first-of-type, which may or may not be :first-child */\n}\n\narticle &gt; p ~ p {\n    /* Undo the above styles for every subsequent article &gt; p */\n}\n</code></pre></li>\n<li><p>You can filter by <a href=\"http://stackoverflow.com/questions/7128406/css-select-the-first-child-from-elements-with-particular-attribute/7128429#7128429\">attribute selectors</a> or any other simple selectors instead of classes.</p></li>\n<li><p>You can also combine this overriding technique with <a href=\"http://stackoverflow.com/questions/8535686/first-child-not-working/8535800#8535800\">pseudo-elements</a> even though pseudo-elements technically aren't simple selectors.</p></li>\n</ul>\n\n<p>Note that in order for this to work, you will need to know in advance what the default styles will be for your other sibling elements so you can override the first rule. Additionally, since this involves overriding rules in CSS, you can't achieve the same thing with a single selector for use with the <a href=\"http://www.w3.org/TR/selectors-api\">Selectors API</a>, or <a href=\"http://seleniumhq.org\">Selenium</a>'s CSS locators.</p>\n\n<p>It's worth mentioning that Selectors 4 introduces <a href=\"http://dev.w3.org/csswg/selectors-4/#the-nth-child-pseudo\">an extension to the <code>:nth-child()</code> notation</a> (originally an entirely new pseudo-class called <code>:nth-match()</code>), which will allow you to use something like <code>:nth-child(1 of .red)</code> in lieu of a hypothetical <code>.red:first-of-class</code>. Being a relatively recent proposal, it hasn't been implemented yet. Hopefully this will change soon. In the meantime, the workaround I've suggested should work for most cases.</p>\n\n<p>Keep in mind that this answer assumes that the question is looking for every first child element that has a given class. There is neither a pseudo-class nor even a generic CSS solution for the nth match of a complex selector <em>across the entire document</em> \u2014 whether a solution exists depends heavily on the document structure. jQuery provides <code>:eq()</code>, <code>:first</code>, <code>:last</code> and more for this purpose, but note again that <a href=\"http://stackoverflow.com/questions/9983297/difference-between-css-selector-and-jquery-filter/10835694#10835694\">they function very differently from <code>:nth-child()</code> et al</a>. Using the Selectors API, you can either use <code>document.querySelector()</code> to obtain the very first match:</p>\n\n<pre><code>var first = document.querySelector('.home &gt; .red');\n</code></pre>\n\n<p>Or use <code>document.querySelectorAll()</code> with an indexer to pick any specific match:</p>\n\n<pre><code>var redElements = document.querySelectorAll('.home &gt; .red');\nvar first = redElements[0];\nvar second = redeElements[1];\n// etc\n</code></pre>\n\n<hr>\n\n<p>Although the <code>.red:nth-of-type(1)</code> solution in the original accepted answer by <a href=\"http://stackoverflow.com/questions/2717480/css-selector-for-first-element-with-class/2717515#2717515\">Philip Daubmeier</a> works (which was originally written by <a href=\"http://stackoverflow.com/users/264276/martyn\">Martyn</a> but deleted since), it does not behave the way you'd expect it to.</p>\n\n<p>For example, if you only wanted to select the <code>p</code> in your original markup:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p class=\"red\"&gt;&lt;/p&gt;\n&lt;div class=\"red\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Then you can't use <code>.red:first-of-type</code> (equivalent to <code>.red:nth-of-type(1)</code>), because each element is the first (and only) one of its type (<code>p</code> and <code>div</code> respectively), so <em>both</em> will be matched by the selector.</p>\n\n<p>When the first element of a certain class <em>is also the first of its type</em>, the pseudo-class will work, but <strong>this happens only by coincidence</strong>. This behavior is demonstrated in Philip's answer. The moment you stick in an element of the same type before this element, the selector will fail. Taking the updated markup:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"home\"&gt;\n  &lt;span&gt;blah&lt;/span&gt;\n  &lt;p class=\"red\"&gt;first&lt;/p&gt;\n  &lt;p class=\"red\"&gt;second&lt;/p&gt;\n  &lt;p class=\"red\"&gt;third&lt;/p&gt;\n  &lt;p class=\"red\"&gt;fourth&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Applying a rule with <code>.red:first-of-type</code> will work, but once you add another <code>p</code> without the class:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"home\"&gt;\n  &lt;span&gt;blah&lt;/span&gt;\n  &lt;p&gt;dummy&lt;/p&gt;\n  &lt;p class=\"red\"&gt;first&lt;/p&gt;\n  &lt;p class=\"red\"&gt;second&lt;/p&gt;\n  &lt;p class=\"red\"&gt;third&lt;/p&gt;\n  &lt;p class=\"red\"&gt;fourth&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The selector will immediately fail, because the first <code>.red</code> element is now the <em>second</em> <code>p</code> element.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "BoltClock",
                        "user_id": 106224
                    },
                    "score": 423
                },
                {
                    "body": "<p>The correct answer is:</p>\n\n<pre><code>.red:first-child, :not(.red) + .red { border:5px solid red }\n</code></pre>\n\n<p>Part I: If element is first to it's parent and has class \"red\", it shall get border.<br>\nPart II: If \".red\" element is not first to its parent, but is immediately following an element without class \".red\", it shall also deserve the honor of said border.</p>\n\n<p><a href=\"http://jsfiddle.net/Vq8PB/7/\">Fiddle or it didn't happen.</a></p>\n\n<p>Philip Daubmeier's answer, while accepted, is not correct - see attached fiddle.<br>\nBoltClock's answer would work, but unnecessarily defines and overwrites styles<br>\n(particularly an issue where it otherwise would inherit a different border - you don't want to declare other to border:none)</p>\n\n<p>EDIT:\nIn the event that you have \"red\" following non-red several times, each \"first\" red will get the border. To prevent that, one would need to use BoltClock's answer. See <a href=\"http://jsfiddle.net/Vq8PB/8/\">fiddle</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SamGoody",
                        "user_id": 87520
                    },
                    "score": 17
                },
                {
                    "body": "<p>You could use nth-of-type(1) but be sure that site doesn't need to support IE7 etc, if this is the case use jQuery to add body class then find element via IE7 body class then the element name, then add in the nth-child styling to it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jamie Paterson",
                        "user_id": 1688688
                    },
                    "score": 0
                },
                {
                    "body": "<p>According to your updated problem</p>\n\n<pre><code>&lt;div class=\"home\"&gt;\n  &lt;span&gt;blah&lt;/span&gt;\n  &lt;p class=\"red\"&gt;first&lt;/p&gt;\n  &lt;p class=\"red\"&gt;second&lt;/p&gt;\n  &lt;p class=\"red\"&gt;third&lt;/p&gt;\n  &lt;p class=\"red\"&gt;fourth&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>how about  </p>\n\n<pre><code>.home span + .red{\n      border:1px solid red;\n    }\n</code></pre>\n\n<p>This will select <strong>class home</strong>, then the element <strong>span</strong> and finally all <strong>.red elements</strong> that are placed immediately after span elements.  </p>\n\n<p>Reference: <a href=\"http://www.w3schools.com/cssref/css_selectors.asp\" rel=\"nofollow\">http://www.w3schools.com/cssref/css_selectors.asp</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "StinkyCat",
                        "user_id": 782874
                    },
                    "score": 1
                }
            ],
            "body": "<p>I have a bunch of elements with a class name <code>red</code>:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;p class=\"red\"&gt;&lt;/p&gt;\n&lt;div class=\"red\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>I can't seem to select the first element with the <code>class=\"red\"</code> using the following CSS rule:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.red:first-child{\n  border:5px solid red;\n}\n</code></pre>\n\n<p>What is wrong in this selector and how do I correct it?</p>\n\n<p><strong>UPDATE</strong>:</p>\n\n<p>Thanks to the comments, I figured out that the element has to be the first child of its parent to get selected which is not the case that I have. I have the following structure:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"home\"&gt;\n  &lt;span&gt;blah&lt;/span&gt;\n  &lt;p class=\"red\"&gt;first&lt;/p&gt;\n  &lt;p class=\"red\"&gt;second&lt;/p&gt;\n  &lt;p class=\"red\"&gt;third&lt;/p&gt;\n  &lt;p class=\"red\"&gt;fourth&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>and this rule fails as mentioned in the comments:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.home .red:first-child{\n  border:1px solid red;\n}\n</code></pre>\n\n<p>How can I target the first child with class <code>red</code>?</p>\n",
            "last_activity_date": 1407065632,
            "owner": {
                "display_name": "Rajat",
                "user_id": 111683
            },
            "question_id": 2717480,
            "score": 222,
            "tags": [
                "css",
                "css-selectors"
            ],
            "title": "CSS selector for first element with class"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>All p tags with class 'some_class' which are children of a div tag.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "tschaible",
                        "user_id": 119123
                    },
                    "score": 3
                },
                {
                    "body": "<p>It matches <code>p</code> elements with class <code>some_class</code> that are <em>directly</em> under a <code>div</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "dan04",
                        "user_id": 287586
                    },
                    "score": 6
                },
                {
                    "body": "<p><code>&gt;</code> is the <a href=\"http://www.w3.org/TR/selectors/#child-combinators\">child combinator</a>, also known as the direct descendant combinator.<sup>1</sup></p>\n\n<p>That means the selector <code>div &gt; p.some_class</code> only selects paragraphs of <code>.some_class</code> that sit <strong>directly inside</strong> a <code>div</code>, not paragraphs that are nested further within.</p>\n\n<p>An illustration:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div&gt;\n    &lt;p class=\"some_class\"&gt;Some text here&lt;/p&gt;     &lt;!-- Selected [1] --&gt;\n    &lt;blockquote&gt;\n        &lt;p class=\"some_class\"&gt;More text here&lt;/p&gt; &lt;!-- Not selected [2] --&gt;\n    &lt;/blockquote&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>What's selected and what's not:</p>\n\n<ol>\n<li><p><strong>Selected</strong><br>\nThis <code>p.some_class</code> is located directly inside the <code>div</code>, hence a parent-child relationship is established between both elements.</p></li>\n<li><p><strong>Not selected</strong><br>\nThis <code>p.some_class</code> is contained by a <code>blockquote</code> within the <code>div</code>, rather than the <code>div</code> itself. Although this <code>p.some_class</code> is a descendant of the <code>div</code>, it's not a child; it's a grandchild.</p>\n\n<p>Consequently, while <code>div &gt; p.some_class</code> won't match this element, <code>div p.some_class</code> will, using the <a href=\"http://www.w3.org/TR/selectors/#descendant-combinators\">descendant combinator</a> instead.</p></li>\n</ol>\n\n<hr>\n\n<p><sup>1</sup> <sub>Many people go further to call it \"direct child\" or \"immediate child\", but that's completely unnecessary (and incredibly annoying to me), because a child element <strong>is direct/immediate <em>by definition</em></strong> anyway, so they mean the exact same thing. There's no such thing as an \"indirect child\".</sub></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "BoltClock",
                        "user_id": 106224
                    },
                    "score": 269
                },
                {
                    "body": "<p>As others mention, it's a child selector. Here's the appropriate link.</p>\n\n<p><a href=\"http://www.w3.org/TR/CSS2/selector.html#child-selectors\">http://www.w3.org/TR/CSS2/selector.html#child-selectors</a> </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dagg Nabbit",
                        "user_id": 886931
                    },
                    "score": 8
                },
                {
                    "body": "<pre><code>&lt;div&gt;\n    &lt;p class=\"some_class\"&gt;lohrem text (it will be of red color )&lt;/p&gt;    \n    &lt;div&gt;\n        &lt;p class=\"some_class\"&gt;lohrem text (it will  NOT be of red color)&lt;/p&gt; \n    &lt;/div&gt;\n    &lt;p class=\"some_class\"&gt;lohrem text (it will be  of red color )&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>css: </p>\n\n<pre><code>div &gt; p.some_class{\ncolor:red;\n}\n</code></pre>\n\n<p>All the direct children that are <code>&lt;p&gt;</code> with <code>.someclass</code> would get the style applied to them.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "suraj rawat",
                        "user_id": 3011961
                    },
                    "score": 4
                }
            ],
            "body": "<p>For example:</p>\n\n<pre><code>div &gt; p.some_class {\n  /* Some declarations */\n}\n</code></pre>\n\n<p>What exactly does the <code>&gt;</code> sign mean?</p>\n",
            "last_activity_date": 1424946768,
            "owner": {
                "display_name": "Misha Moroshko",
                "user_id": 247243
            },
            "question_id": 3225891,
            "score": 161,
            "tags": [
                "css",
                "css-selectors"
            ],
            "title": "What does the &quot;&gt;&quot; (greater-than sign) CSS selector mean?"
        },
        {
            "answer_count": 32,
            "answers": [
                {
                    "body": "<p><strong>Update:</strong>  Rewritten to incorporate suggestions from <strong>John Millikin</strong> and <strong>da5id</strong>.  This solution is written in PHP, but should be easily adapted to other languages.</p>\n\n<p><strong>Update 2:</strong> Incorporating comments from <strong>Nick Johnson</strong> that the original <code>.htaccess</code> regex can cause problems with files like <code>json-1.3.js</code>. Solution is to only rewrite if there are exactly 10 digits at the end. (Because 10 digits covers all timestamps from 9/9/2001 to 11/20/2286.)</p>\n\n<p>First, we use the following rewrite rule in .htaccess:</p>\n\n<pre><code>RewriteEngine on\nRewriteRule ^(.*)\\.[\\d]{10}\\.(css|js)$ $1.$2 [L]\n</code></pre>\n\n<p>Now, we write the following PHP function:</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>/**\n *  Given a file, i.e. /css/base.css, replaces it with a string containing the\n *  file's mtime, i.e. /css/base.1221534296.css.\n *  \n *  @param $file  The file to be loaded.  Must be an absolute path (i.e.\n *                starting with slash).\n */\nfunction auto_version($file)\n{\n  if(strpos($file, '/') !== 0 || !file_exists($_SERVER['DOCUMENT_ROOT'] . $file))\n    return $file;\n\n  $mtime = filemtime($_SERVER['DOCUMENT_ROOT'] . $file);\n  return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $file);\n}\n</code></pre>\n\n<p>Now, wherever you include your CSS, change it from this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;link rel=\"stylesheet\" href=\"/css/base.css\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>To this:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"&lt;?php echo auto_version('/css/base.css'); ?&gt;\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>This way, you never have to modify the link tag again, and the user will always see the latest CSS.  The browser will be able to cache the CSS file, but when you make any changes to your CSS the browser will see this as a new URL, so it won't use the cached copy.</p>\n\n<p>This can also work with images, favicons, and JavaScript. Basically anything that is not dynamically generated.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kip",
                        "user_id": 18511
                    },
                    "score": 264
                },
                {
                    "body": "<p>You can just put <code>?foo=1234</code> at the end of your css / js import, changing 1234 to be whatever you like. Have a look at the SO html source for an example.</p>\n\n<p>The idea there being that the ? parameters are discarded / ignored on the request anyway and you can change that number when you roll out a new version.</p>\n\n<p><hr /></p>\n\n<p><strong>Note:</strong> There is some argument with regard to exactly how this affects caching. I believe the general gist of it is that GET requests, with or without parameters <em>should</em> be cachable, so the above solution should work.</p>\n\n<p>However, it is down to both the web server to decide if it wants to adhere to that part of the spec and the browser the user uses, as it can just go right ahead and ask for a fresh version anyway.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "SCdF",
                        "user_id": 1666
                    },
                    "score": 38
                },
                {
                    "body": "<p>I've heard this called \"auto versioning\". The most common method is to include the static file's mtime somewhere in the URL, and strip it out using rewrite handlers or URL confs:</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"http://muffinresearch.co.uk/archives/2008/04/08/automatic-asset-versioning-in-django/\">Automatic asset versioning in Django</a></li>\n<li><a href=\"http://particletree.com/notebook/automatically-version-your-css-and-javascript-files/\">Automatically Version Your CSS and JavaScript Files</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Millikin",
                        "user_id": 3560
                    },
                    "score": 31
                },
                {
                    "body": "<p>You can force a \"session-wide caching\" if you add the session-id as a spureous parameter of the js/css file:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" src=\"myStyles.css?ABCDEF12345sessionID\" /&gt;\n&lt;script language=\"javascript\" src=\"myCode.js?ABCDEF12345sessionID\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>If you want a version-wide caching you could add some code to print the file date or similar. If you're using Java you can use a custom-tag to generate the link in an elegant way.</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" src=\"myStyles.css?20080922_1020\" /&gt;\n&lt;script language=\"javascript\" src=\"myCode.js?20080922_1120\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "helios",
                        "user_id": 9686
                    },
                    "score": 2
                },
                {
                    "body": "<p><strong>Simple Client-side Technique</strong></p>\n\n<p>In general, caching is good.. So there are a couple of techniques, depending on whether you're fixing the problem for yourself as you develop a website, or whether you're trying to control cache in a production environment.</p>\n\n<p>General visitors to your website won't have the same experience that you're having when you're developing the site.  Since the average visitor comes to the site less frequently (maybe only a few times each month, unless you're a Google or hi5 Networks), then they are less likely to have your files in cache, and that may be enough.  If you want to force a new version into the browser, you can always add a query string to the request, and bump up the version number when you make major changes: </p>\n\n<pre><code>&lt;script src=\"/myJavascript.js?version=4\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This will ensure that everyone gets the new file.  It works because the browser looks at the URL of the file to determine whether it has a copy in cache.  If your server isn't set up to do anything with the query string, it will be ignored, but the name will look like a new file to the browser.</p>\n\n<p>On the other hand, if you're developing a website, you don't want to change the version number every time you save a change to your development version.  That would be tedious.</p>\n\n<p>So while you're developing your site, a good trick would be to automatically generate a query string parameter:</p>\n\n<pre><code>&lt;!-- Development version: --&gt;\n&lt;script&gt;document.write('&lt;script src=\"/myJavascript.js?dev=' + Math.floor(Math.random() * 100) + '\"\\&gt;&lt;\\/script&gt;');&lt;/script&gt;\n</code></pre>\n\n<p>Adding a query string to the request is a good way to version a resource, but for a simple website this may be unnecessary.  And remember, caching is a good thing.</p>\n\n<p>It's also worth noting that the browser isn't necessarily stingy about keeping files in cache.  Browsers have policies for this sort of thing, and they are usually playing by the rules laid down in the HTTP specification.  When a browser makes a request to a server, part of the response is an EXPIRES header.. a date which tells the browser how long it should be kept in cache.  The next time the browser comes across a request for the same file, it sees that it has a copy in cache and looks to the EXPIRES date to decide whether it should be used.  </p>\n\n<p>So believe it or not, it's actually your server that is making that browser cache so persistent.  You could adjust your server settings and change the EXPIRES headers, but the little technique I've written above is probably a much simpler way for you to go about it. Since caching is good, you usually want to set that date far into the future (a \"Far-future Expires Header\"), and use the technique described above to force a change.</p>\n\n<p>If you're interested in more info on HTTP or how these requests are made, a good book is \"High Performance Web Sites\" by Steve Souders.  It's a very good introduction to the subject.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "keparo",
                        "user_id": 19468
                    },
                    "score": 67
                },
                {
                    "body": "<p>Changing the filename will work.  But that's not usually the simplest solution.</p>\n\n<p>An HTTP cache-control header of 'no-cache' doesn't always work, as you've noticed.  The HTTP 1.1 spec allows wiggle-room for user-agents to decide whether or not to request a new copy.  (It's non-intuitive if you just look at the names of the directives.  Go read the actual <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\" rel=\"nofollow\">HTTP 1.1 spec for cache</a>... it makes a little more sense in context.)</p>\n\n<p>In a nutshell, if you want iron-tight cache-control use</p>\n\n<pre><code>Cache-Control: no-cache, no-store, must-revalidate\n</code></pre>\n\n<p>in your response headers.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pcorcoran",
                        "user_id": 15992
                    },
                    "score": -3
                },
                {
                    "body": "<p>Dont use foo.css?version=1! Browsers aren't supposed to cache URLs with GET variables. According to <a href=\"http://www.thinkvitamin.com/features/webapps/serving-javascript-fast\">http://www.thinkvitamin.com/features/webapps/serving-javascript-fast</a>, though IE and Firefox ignore this, Opera and Safari don't! Instead, use foo.v1234.css, and use rewrite rules to strip out the version number.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "airrob",
                        "user_id": 1513
                    },
                    "score": 10
                },
                {
                    "body": "<p>Instead of changing the version manually, I would recommend you use an MD5 hash of the actual CSS file.</p>\n\n<p>So your URL would be something like</p>\n\n<pre><code>http://mysite.com/css/[md5_hash_here]/style.css\n</code></pre>\n\n<p>You could still use the rewrite rule to strip out the hash, but the advantage is that now you can set your cache policy to \"cache forever\", since if the URL is the same, that means that the file is unchanged.</p>\n\n<p>You can then write a simple shell script that would compute the hash of the file and update your  tag (you'd probably want to move it to a separate file for inclusion).</p>\n\n<p>Simply run that script every time CSS changes and you're good. The browser will ONLY reload your files when they are altered. If you make an edit and then undo it, there's no pain in figuring out which version you need to return to in order for your visitors not to re-download.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "levik",
                        "user_id": 4465
                    },
                    "score": 66
                },
                {
                    "body": "<p>I recently solved this using Python. Here the code (should be easy to adopt to other languages):</p>\n\n<pre><code>def import_tag(pattern, name, **kw):\n    if name[0] == \"/\":\n        name = name[1:]\n    # Additional HTML attributes\n    attrs = ' '.join(['%s=\"%s\"' % item for item in kw.items()])\n    try:\n        # Get the files modification time\n        mtime = os.stat(os.path.join('/documentroot', name)).st_mtime\n        include = \"%s?%d\" % (name, mtime)\n        # this is the same as sprintf(pattern, attrs, include) in other\n        # languages\n        return pattern % (attrs, include)\n    except:\n        # In case of error return the include without the added query\n        # parameter.\n        return pattern % (attrs, name)\n\ndef script(name, **kw):\n    return import_tag(\"\"\"&lt;script type=\"text/javascript\" \"\"\" +\\\n        \"\"\" %s src=\"/%s\"&gt;&lt;/script&gt;\"\"\", name, **kw)\n\ndef stylesheet(name, **kw):\n    return import_tag('&lt;link rel=\"stylesheet\" type=\"text/css\" ' +\\\n        \"\"\"%s href=\"/%s\"&gt;', name, **kw)\n</code></pre>\n\n<p>This code basically appends the files time-stamp as a query parameter to the URL. The call of the following function</p>\n\n<pre><code>script(\"/main.css\")\n</code></pre>\n\n<p>will result in</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\"  href=\"/main.css?1221842734\"&gt;\n</code></pre>\n\n<p>The advantage of course is that you do never have to change your html again, touching the CSS file will automatically trigger a cache invalidation. Works very good and the overhead is not noticeable.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "pi.",
                        "user_id": 15274
                    },
                    "score": 2
                },
                {
                    "body": "<p>Say you have a file available at:</p>\n\n<pre><code>/styles/screen.css\n</code></pre>\n\n<p>your can either append a query parameter with version information onto the URI, e.g.:</p>\n\n<pre><code>/styles/screen.css?v=1234\n</code></pre>\n\n<p>or you can prepend version information, e.g.:</p>\n\n<pre><code>/v/1234/styles/screen.css\n</code></pre>\n\n<p>IMHO the second method is better for CSS files because they can refer to images using relative URLs which means that if you specify a <code>background-image</code> like so:</p>\n\n<pre><code>body {\n    background-image: url('images/happy.gif');\n}\n</code></pre>\n\n<p>its URL will effectively be:</p>\n\n<pre><code>/v/1234/styles/images/happy.gif\n</code></pre>\n\n<p>This means that if you update the version number used the server will treat this as a new resource and not use a cached version. If you base your version number on the Subversion/CVS/etc. revision this means that changes to images referenced in CSS files will be noticed. That isn't guaranteed with the first scheme, i.e. the URL <code>images/happy.gif</code> relative to <code>/styles/screen.css?v=1235</code> is <code>/styles/images/happy.gif</code> which doesn't contain any version information.</p>\n\n<p>I have implemented a caching solution using this technique with Java servlets and simply handle requests to <code>/v/*</code> with a servlet that delegates to the underlying resource (i.e. <code>/styles/screen.css</code>). In development mode I set caching headers that tell the client to always check the freshness of the resource with the server (this typically results in a 304 if you delegate to Tomcat's <code>DefaultServlet</code> and the <code>.css</code>, <code>.js</code>, etc. file hasn't changed) while in deployment mode I set headers that say \"cache forever\".</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Walter Rumsby",
                        "user_id": 1654
                    },
                    "score": 3
                },
                {
                    "body": "<p>I suggest implementing the following process:</p>\n\n<ul>\n<li><p>version your css/js files whenever you deploy, something like: screen.1233.css    (the number can be your SVN revision if you use a versioning system)</p></li>\n<li><p>minify them to optimize loading times</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dan",
                        "user_id": 21613
                    },
                    "score": 2
                },
                {
                    "body": "<p>if you are using jquery, there is an option called cache that will append a random number \nthis is not a complete answer i know but it might save you some time</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "roundcrisis",
                        "user_id": 162325
                    },
                    "score": -1
                },
                {
                    "body": "<p>My method to do this is simply to have the link element into a server-side include:</p>\n\n<pre><code>&lt;!--#include virtual=\"/includes/css-element.txt\"--&gt;\n</code></pre>\n\n<p>where the contents of css-element.txt is</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"mycss.css\"/&gt;\n</code></pre>\n\n<p>so the day you want to link to my-new-css.css or whatever, you just change the include.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "AmbroseChapel",
                        "user_id": 242241
                    },
                    "score": 0
                },
                {
                    "body": "<p>Interesting post. Having read all the answers here combined with the fact that I have never had any problems with \"bogus\" query strings (which I am unsure why everyone is so reluctant to use this) I guess the solution (which removes the need for apache rewrite rules as in the accepted answer) is to compute a short HASH of the CSS file contents (instead of the file datetime) as a bogus querystring.</p>\n\n<p>This would result in the following:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"/css/base.css?[hash-here]\" type=\"text/css\" /&gt;\n</code></pre>\n\n<p>Of course the datetime solutions also get the job done in the case of editing a CSS file but I think it is about the css file content and not about the file datetime, so why get these mixed up?</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Michiel",
                        "user_id": 125699
                    },
                    "score": 5
                },
                {
                    "body": "<p>The RewriteRule needs a small update for js or css files that contain a dot notation versioning at the end. E.g. json-1.3.js.</p>\n\n<p>I added a dot negation class [^.] to the regex so .number. is ignored.</p>\n\n<pre><code>RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Nick Johnson",
                        "user_id": 227569
                    },
                    "score": 8
                },
                {
                    "body": "<p>Thanks at Kip for his perfect solution!</p>\n\n<p>I extended it to use it as an Zend_view_Helper. Because my client run his page on a virtual host I also extended it for that.</p>\n\n<p>Hope it helps someone else too.</p>\n\n<pre><code>/**\n * Extend filepath with timestamp to force browser to\n * automatically refresh them if they are updated\n *\n * This is based on Kip's version, but now\n * also works on virtual hosts\n * @link http://stackoverflow.com/questions/118884/what-is-an-elegant-way-to-force-browsers-to-reload-cached-css-js-files\n *\n * Usage:\n * - extend your .htaccess file with\n * # Route for My_View_Helper_AutoRefreshRewriter\n * # which extends files with there timestamp so if these\n * # are updated a automatic refresh should occur\n * # RewriteRule ^(.*)\\.[^.][\\d]+\\.(css|js)$ $1.$2 [L]\n * - then use it in your view script like\n * $this-&gt;headLink()-&gt;appendStylesheet( $this-&gt;autoRefreshRewriter($this-&gt;cssPath . 'default.css'));\n *\n */\nclass My_View_Helper_AutoRefreshRewriter extends Zend_View_Helper_Abstract {\n\n    public function autoRefreshRewriter($filePath) {\n\n        if (strpos($filePath, '/') !== 0) {\n\n            // path has no leading '/'\n            return $filePath;\n        } elseif (file_exists($_SERVER['DOCUMENT_ROOT'] . $filePath)) {\n\n            // file exists under normal path\n            // so build path based on this\n            $mtime = filemtime($_SERVER['DOCUMENT_ROOT'] . $filePath);\n            return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $filePath);\n        } else {\n\n            // fetch directory of index.php file (file from all others are included)\n            // and get only the directory\n            $indexFilePath = dirname(current(get_included_files()));\n\n            // check if file exist relativ to index file\n            if (file_exists($indexFilePath . $filePath)) {\n\n                // get timestamp based on this relativ path\n                $mtime = filemtime($indexFilePath . $filePath);\n\n                // write generated timestamp to path\n                // but use old path not the relativ one\n                return preg_replace('{\\\\.([^./]+)$}', \".$mtime.\\$1\", $filePath);\n            } else {\n\n                return $filePath;\n            }\n        }\n    }\n\n}\n</code></pre>\n\n<p>Cheers and thanks.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "lony",
                        "user_id": 227821
                    },
                    "score": 3
                },
                {
                    "body": "<p>Google's <a href=\"http://code.google.com/p/modpagespeed/\">mod_pagespeed</a> plugin for apache will do auto-versioning for you.  It's really slick.</p>\n\n<p>It parses HTML on its way out of the webserver (works with PHP, rails, python, static HTML -- anything) and rewrites links to CSS, JS, image files so they include an id code.  It serves up the files at the modified URLs with a very long cache control on them.  When the files change, it automatically changes the URLs so the browser has to re-fetch them.  It basically just works, without any changes to your code.  It'll even minify your code on the way out too.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Leopd",
                        "user_id": 303056
                    },
                    "score": 92
                },
                {
                    "body": "<p>I put an MD5 hash of the file's contents in its URL.  That way I can set a very long expiration date, and don't have to worry about users having old JS or CSS.</p>\n\n<p>I also calculate this once per file at runtime (or on file system changes) so there's nothing funny to do at design time or during the build process.</p>\n\n<p>If you're using ASP.NET MVC then you can check out the code <a href=\"http://stackoverflow.com/questions/936626/how-can-i-force-a-hard-refresh-ctrlf5/6439351#6439351\">in my other answer here</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Drew Noakes",
                        "user_id": 24874
                    },
                    "score": 1
                },
                {
                    "body": "<p>The simplest method is to take advantage of the PHP file read functionality. Just have the PHP echo the contents of the file into  tags.</p>\n\n<pre><code>&lt;?php\n//Replace the 'style.css' with the link to the stylesheet.\necho \"&lt;style type='text/css'&gt;\".file_get_contents('style.css').\"&lt;/style&gt;\";\n?&gt;\n</code></pre>\n\n<p>If you're using something besides PHP, there are some variations depending on the language, but almost all languages have a way to print the contents of a file. Put it in the right location (in the  section), and that way, you don't have to rely on the browser.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "A Programmer",
                        "user_id": 1028240
                    },
                    "score": -3
                },
                {
                    "body": "<p>Sorry for bringing back a dead thread. </p>\n\n<p>@<a href=\"http://stackoverflow.com/users/35440/toma\">TomA</a> is right. </p>\n\n<p>Using \"querystring\" method will not be cached as quoted by <a href=\"http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/\" rel=\"nofollow\">Steve Souders</a> below:</p>\n\n<blockquote>\n  <p>...that Squid, a popular proxy, doesn\u2019t cache resources with a\n  querystring.</p>\n</blockquote>\n\n<p>@<a href=\"http://stackoverflow.com/users/35440/toma\">TomA</a> suggestion of using style.TIMESTAMP.css is good, but MD5 would be much better as only when the contents were genuinely changed, the MD5 changes as well.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tai Li",
                        "user_id": 774863
                    },
                    "score": 0
                },
                {
                    "body": "<p>I see a problem with the approach of using a timestamp- or hash-based differentiator in the resource URL which gets stripped out on request at the server. The page that contains the link to e.g. the style sheet <em>might get cached as well</em>. So the cached page might request an older version of the style sheet but will be served the latest version, which might or might not work with the requesting page.</p>\n\n<p>To fix this, you either have to guard the requesting page with a <code>no-cache</code> header or meta, to make sure it gets refreshed on every load. Or you have to maintain <em>all versions</em> of the style file that you ever deployed on the server, each as an individual file and with their differentiator intact, so that the requesting page can get at the version of the style file it was designed for. In the latter case you basically tie the versions of the HTML page and the style sheet together, which can be done statically and doesn't require any server logic.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ThomasH",
                        "user_id": 127465
                    },
                    "score": 0
                },
                {
                    "body": "<p>Not sure why you guys are taking so much pain to implement this solution.</p>\n\n<p>All you need to do if get the file's modified timestamp and append it as a querystring to the file</p>\n\n<p>In PHP i would do it as:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"mycss.css?v=&lt;?php echo filemtime('mycss.css') ?&gt;\"/&gt;\n</code></pre>\n\n<p>filemtime is a PHP function that returns the file modified timestamp.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Shouvik",
                        "user_id": 468975
                    },
                    "score": 13
                },
                {
                    "body": "<p>\"Another idea which was suggested by SCdF would be to append a bogus query string to the file. (Some Python code to automatically use the timestamp as a bogus query string was submitted by pi.) However, there is some discussion as to whether or not the browser would cache a file with a query string. (Remember, we want the browser to cache the file and use it on future visits. We only want it to fetch the file again when it has changed.) Since it is not clear what happens with a bogus query string, I am not accepting that answer.\"</p>\n\n<p>&lt;link rel=\"stylesheet\" href=\"file.css?&lt;?=hash_hmac('sha1', session_id(), md5_file(\"file.css\")); ?>\" /></p>\n\n<p>Hashing the file means when it has changed, the query string will have changed. If it hasn't, it will remain the same. Each session forces a reload too.</p>\n\n<p>Optionally, you can also use rewrites to cause the browser to think it's a new URI</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Scott",
                        "user_id": 2224584
                    },
                    "score": 0
                },
                {
                    "body": "<p>For a Java Servlet environment, you can look at the <a href=\"https://jawr.java.net/\" rel=\"nofollow\">Jawr library</a>. The features page explains how it handles caching:</p>\n\n<blockquote>\n  <p>Jawr will try its best to force your clients to cache the resources. If a browser asks if a file changed, a 304 (not modified) header is sent back with no content. On the other hand, with Jawr you will be 100% sure that new versions of your bundles are downloaded by all clients. Every URL to your resources will include an automatically generated, content-based prefix that changes automatically whenever a resurce is updated. Once you deploy a new version, the URL to the bundle will change as well so it will be impossible that a client uses an older, cached version.</p>\n</blockquote>\n\n<p>The library also does js/css minification, but you can turn that off if you don't want it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "holmis83",
                        "user_id": 1463522
                    },
                    "score": 0
                },
                {
                    "body": "<p>You could simply add some random number with the CSS/JS url like</p>\n\n<pre><code>example.css?randomNo=Math.random()\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "VNP",
                        "user_id": 2186642
                    },
                    "score": 3
                },
                {
                    "body": "<p>For ASP.NET I suppose next solution with advanced options (debug/release mode, versions):</p>\n\n<p>Js or Css files included by such way:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"Scripts/exampleScript&lt;%=Global.JsPostfix%&gt;\" /&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"Css/exampleCss&lt;%=Global.CssPostfix%&gt;\" /&gt;\n</code></pre>\n\n<p>Global.JsPostfix and Global.CssPostfix is calculated by the following way in Global.asax:</p>\n\n<pre><code>protected void Application_Start(object sender, EventArgs e)\n{\n    ...\n    string jsVersion = ConfigurationManager.AppSettings[\"JsVersion\"];\n    bool updateEveryAppStart = Convert.ToBoolean(ConfigurationManager.AppSettings[\"UpdateJsEveryAppStart\"]);\n    int buildNumber = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.Revision;\n    JsPostfix = \"\";\n#if !DEBUG\n    JsPostfix += \".min\";\n#endif      \n    JsPostfix += \".js?\" + jsVersion + \"_\" + buildNumber;\n    if (updateEveryAppStart)\n    {\n        Random rand = new Random();\n        JsPosfix += \"_\" + rand.Next();\n    }\n    ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "KvanTTT",
                        "user_id": 1046374
                    },
                    "score": 3
                },
                {
                    "body": "<p>Another way I have not seen mentioned for js files would be to use the jQuery <code>$.getScript</code> in conjunction with <code>$.ajaxSetup</code> option <code>cache: false</code>.</p>\n\n<p>Instead of:</p>\n\n<pre><code>&lt;script src=\"scripts/app.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You can use:</p>\n\n<pre><code>$.ajaxSetup({\n  cache: false\n});\n\n$.getScript('scripts/app.js'); // GET scripts/app.js?_1391722802668\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alex White",
                        "user_id": 1721440
                    },
                    "score": -1
                },
                {
                    "body": "<p>Another suggestion for ASP.Net websites,</p>\n\n<ol>\n<li>Set different cache-control:max-age values, for different static files. </li>\n<li>For css/js files, the chances of modifying these files on server is high, so set a minimal cache-control:max-age value of  1 or 2 mins or something that meets your need. </li>\n<li>For images, set a far date as cache-control:max-age value, say 360 days. </li>\n<li>By doing so, when we make the first request, all static contents are downloaded to client machine with a 200-OK response.</li>\n<li>On subsequent requests and after two minutes, we see 304-Not Modified requests on css and js files which avoids us from css/js versioning.</li>\n<li>Image files will not be requested as they will be used from cached memory til the cache expires.</li>\n<li>By using below web.config configurations, we can achieve the above described behavior,\n\n    \n    \n      \n    \n    \n      \n        \n      \n    \n  \n  \n    \n      \n        \n      \n    \n  </li>\n</ol>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Amarnath Bakthavathsalam",
                        "user_id": 2008645
                    },
                    "score": 0
                },
                {
                    "body": "<p>If you are using a modern browser, you could use a manifest file to inform the browsers which files need to be updated. This requires no headers, no versions in urls etc...</p>\n\n<p>For more details, see:\nSee: <a href=\"https://developer.mozilla.org/nl/docs/Web/HTML/Applicatie_cache_gebruiken#Introduction\" rel=\"nofollow\">https://developer.mozilla.org/nl/docs/Web/HTML/Applicatie_cache_gebruiken#Introduction</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jos",
                        "user_id": 1138266
                    },
                    "score": 0
                },
                {
                    "body": "<p>For ASP.NET 4.5 and greater you can use <a href=\"http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification\" rel=\"nofollow\">script bundling</a>.</p>\n\n<blockquote>\n  <p>The request <code>http://localhost/MvcBM_time/bundles/AllMyScripts?v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81</code> is for the bundle AllMyScripts and contains a query string pair v=r0sLDicvP58AIXN_mc3QdyVvVj5euZNzdsa2N1PKvb81. The query string v has a value token that is a unique identifier used for caching. As long as the bundle doesn't change, the ASP.NET application will request the AllMyScripts  bundle using this token. If any file in the bundle changes, the ASP.NET optimization framework will generate a new token, guaranteeing that browser requests for the bundle will get the latest bundle.</p>\n</blockquote>\n\n<p>There are other benefits to bundling including increased performance on first time page loads with minification.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "user3738893",
                        "user_id": 3738893
                    },
                    "score": 3
                },
                {
                    "body": "<p>Many answers here advocate adding a timestamp to the url.  Unless you are modifying your production files directly, the file's timestamp is not likely to reflect the time when a file was changed.  In most cases this will cause the url to change more frequently than the file itself.  This is why you should use a fast hash of the file's contents such has MD5 as levik and others have suggested.</p>\n\n<p>Keep in mind that the value should be calculated once at build or run, rather than each time the file is requested.</p>\n\n<p>As an example, here's a simple bash script that reads a list of filenames from stdin and writes a json file containing hashes to stdout:</p>\n\n<pre><code>#!/bin/bash\n# create a json map from filenames to md5s\n# run as hashes.sh &lt; inputfile.list &gt; outputfile.json\n\necho \"{\"\ndelim=\"\"\nwhile read l; do\n    echo \"$delim\\\"$l\\\": \\\"`md5 -q $l`\\\"\"\n    delim=\",\"\ndone\necho \"}\"\n</code></pre>\n\n<p>This file could then be loaded at server startup and referenced instead of reading the file system.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "undefined",
                        "user_id": 610585
                    },
                    "score": 0
                },
                {
                    "body": "<p>Here is a pure JavaScript solution</p>\n\n<pre><code>(function(){\n\n    // Match this timestamp with the release of your code\n    var lastVersioning = Date.UTC(2014, 11, 20, 2, 15, 10);\n\n    var lastCacheDateTime = localStorage.getItem('lastCacheDatetime');\n\n    if(lastCacheDateTime){\n        if(lastVersioning &gt; lastCacheDateTime){\n            var reload = true;\n        }\n    }\n\n    localStorage.setItem('lastCacheDatetime', Date.now());\n\n    if(reload){\n        location.reload(true);\n    }\n\n})();\n</code></pre>\n\n<p>The above will look for the last time the user visited your site.  If the last visit was before you released new code, it uses <code>location.reload(true)</code> to force page refresh from server.  </p>\n\n<p>I usually have this as the very first script within the <code>&lt;head&gt;</code> so it's evaluated before any other content loads.  If a reload needs to occurs, it's hardly noticeable to the user.</p>\n\n<p>I am using local storage to store the last visit timestamp on the browser, but you can add cookies to the mix if you're looking to support older versions of IE.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Lloyd Banks",
                        "user_id": 1423787
                    },
                    "score": 0
                }
            ],
            "body": "<p>I have noticed that some browsers (in particular, Firefox and Opera) are very zealous in using cached copies of .css and .js files, even between browser sessions.  This leads to a problem when you update one of these files but the user's browser keeps on using the cached copy.</p>\n\n<p>The question is: what is the most elegant way of forcing the user's browser to reload the file when it has changed?</p>\n\n<p>Ideally the solution would not force the browser to reload the file on every visit to the page.  I will post my own solution as an answer, but I am curious if anyone has a better solution and I'll let your votes decide.</p>\n\n<p><strong>Update:</strong>  After allowing discussion here for a while, I have found <strong>John Millikin</strong> and <strong>da5id</strong>'s suggestion to be useful.  It turns out there is a term for this: auto-versioning.  I have posted a new answer below which is a combination of my original solution and John's suggestion.</p>\n\n<p>Another idea which was suggested by <strong>SCdF</strong> would be to append a bogus query string to the file.  (Some Python code to automatically use the timestamp as a bogus query string was submitted by <strong>pi</strong>.)  However, there is some discussion as to whether or not the browser would cache a file with a query string.  (Remember, we want the browser to cache the file and use it on future visits.  We only want it to fetch the file again when it has changed.)  Since it is not clear what happens with a bogus query string, I am not accepting that answer.</p>\n",
            "last_activity_date": 1421160372,
            "owner": {
                "display_name": "Kip",
                "user_id": 18511
            },
            "question_id": 118884,
            "score": 498,
            "tags": [
                "javascript",
                "css",
                "caching",
                "auto-versioning"
            ],
            "title": "What is an elegant way to force browsers to reload cached CSS/JS files?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Sticky footer on <a href=\"http://ryanfait.com/sticky-footer/\">Google</a>:</p>\n\n<ol>\n<li><p>Have a <code>&lt;div&gt;</code> with <code>class=\"wrapper\"</code> for your content.</p></li>\n<li><p>Right <strong>before</strong> the closing <code>&lt;/div&gt;</code> of the <code>wrapper</code> place the\n<code>&lt;div class=\"push\"&gt;&lt;/div&gt;</code>.</p></li>\n<li><p>Right <strong>after</strong> the closing <code>&lt;/div&gt;</code> of the <code>wrapper</code> place the \n<code>&lt;div class=\"footer\"&gt;&lt;/div&gt;</code>.</p></li>\n</ol>\n\n<pre class=\"lang-css prettyprint-override\"><code>* {\n    margin: 0;\n}\nhtml, body {\n    height: 100%;\n}\n.wrapper {\n    min-height: 100%;\n    height: auto !important;\n    height: 100%;\n    margin: 0 auto -142px; /* the bottom margin is the negative value of the footer's height */\n}\n.footer, .push {\n    height: 142px; /* .push must be the same height as .footer */\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Staale",
                        "user_id": 3355
                    },
                    "score": 97
                },
                {
                    "body": "<p>Try putting a container div (with overflow:auto) around the content and sidebar.</p>\n\n<p>If that doesn't work, do you have any screenshots or example links where the footer isn't displayed properly?</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Runscope API Tools",
                        "user_id": 1786
                    },
                    "score": 1
                },
                {
                    "body": "<p>One solution would be to set the min-height for the boxes. Unfortunately it seems that <a href=\"http://www.wellstyled.com/css-minheight-hack.html\" rel=\"nofollow\">it's not well supported by IE</a> (surprise).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Cd-MaN",
                        "user_id": 1265
                    },
                    "score": 1
                },
                {
                    "body": "<p>Set the CSS for the <code>#footer</code> to:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>position: absolute;\nbottom: 0;\n</code></pre>\n\n<p>You will then need to add a <code>padding</code> or <code>margin</code> to the bottom of your <code>#sidebar</code> and <code>#content</code> to match the height of <code>#footer</code> or when they overlap, the <code>#footer</code> will cover them.</p>\n\n<p>Also, if I remember correctly, IE6 has a problem with the <code>bottom: 0</code> CSS. You might have to use a JS solution for IE6 (if you care about IE6 that is).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "81bronco",
                        "user_id": 1153
                    },
                    "score": 7
                },
                {
                    "body": "<p>You could use <code>position: absolute</code> following to put the footer at the bottom of the page, but then make sure your 2 columns have the appropriate <code>bottom-margin</code> so that they never get occluded by the footer.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#footer {\n    position: absolute;\n    bottom: 0px;\n    width: 100%;\n}\n#content, #sidebar { \n    margin-bottom: 5em; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jimmy",
                        "user_id": 4435
                    },
                    "score": 22
                },
                {
                    "body": "<p>I'll add to @Jimmy: You also need to have to declare absolute (or relative) positioning to the element that contains the footer.\nIn your case, it's the body element.  </p>\n\n<p>Edit: I tested it on your page with firebug and it seemed to work very well...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "yoavf",
                        "user_id": 1011
                    },
                    "score": 1
                },
                {
                    "body": "<p>Here is a site with a floating sticky footer that is technically impressive (whether you like the EXACT aesthetics or not):</p>\n\n<p><a href=\"http://alltop.com/\" rel=\"nofollow\">http://alltop.com/</a></p>\n\n<p>(click through to a category like Science to see the floating footer in IE)</p>\n\n<p>You may look into their CSS and see if you can track all their tricks. I find I have my best CSS luck by starting with something that works and trimming away the parts I don't need.</p>\n\n<blockquote>\n  <p><I>Lesser artists borrow, great artists steal.</I><br />\n  &mdash; Steve jobs<br />\n  (quoting Pablo Picasso)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jared Updike",
                        "user_id": 2543
                    },
                    "score": 1
                },
                {
                    "body": "<p>None of these pure css solutions work properly with dynamically resizing content (at least on firefox and Safari) e.g., if you have a background set on the container div, the page and then resize (adding a few rows) table inside the div, the table can stick out of the bottom of the styled area, i.e., you can have half the table in white on black theme and half the table complete white because both the font-color and background color is white. It's basically unfixable with themeroller pages.</p>\n\n<p>Nested div multi-column layout is an ugly hack and the 100% min-height body/container div for sticking footer is an uglier hack.</p>\n\n<p>The only none-script solution that works on all the browsers I've tried: a much simpler/shorter table with thead (for header)/tfoot (for footer)/tbody (td's for any number of columns) and 100% height. But this have perceived semantic and SEO disadvantages (tfoot must appear before tbody. ARIA roles may help decent search engines though).</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "obecalp",
                        "user_id": 47303
                    },
                    "score": 1
                },
                {
                    "body": "<p>Here is a solution with jQuery that works like a charm. It checks if the height of the window is greater than the height of the body. If it is, then it changes the margin-top of the footer to compensate. Tested it in Firefox, Chrome, Safari and Opera.</p>\n\n<pre><code>$( function () {\n\n    var height_diff = $( window ).height() - $( 'body' ).height();\n    if ( height_diff &gt; 0 ) {\n        $( '#footer' ).css( 'margin-top', height_diff );\n    }\n\n});\n</code></pre>\n\n<p>If your footer already has a margin-top (of 50 pixels, for example) you will need to change the last part for:</p>\n\n<pre><code>css( 'margin-top', height_diff + 50 )\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Felipe Schenone",
                        "user_id": 809356
                    },
                    "score": 7
                },
                {
                    "body": "<p>Use absolute positioning and z-index to create a sticky footer div at any resolution using the following steps: </p>\n\n<ul>\n<li>Create a footer div with <code>position: absolute; bottom: 0;</code> and the desired height</li>\n<li>Set the padding of the footer to add whitespace between the content bottom and the window bottom</li>\n<li>Create a container <code>div</code> that wraps the body content with <code>position: relative; min-height: 100%;</code> </li>\n<li>Set the <code>html</code>, <code>body</code>, and container <code>div</code> to <code>height: 100%</code> for IE6</li>\n<li>Add bottom padding to the main content <code>div</code> that is equal to the height plus padding of the footer</li>\n<li>Set the <code>z-index</code> of the footer greater than the container <code>div</code> if the footer is clipped</li>\n</ul>\n\n<p>Here is an example:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Sticky Footer&lt;/title&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;style&gt;\n  .wrapper { position: relative; min-height: 100%; }\n  .footer { position: absolute; bottom:0; width: 100%; height: 200px; padding-top: 100px; background-color: gray; }\n  .column { height: 2000px; padding-bottom: 300px; background-color: green; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"wrapper\"&gt;\n    &lt;div class=\"column\"&gt;\n      &lt;span&gt;hello&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div class=\"footer\"&gt;\n      &lt;p&gt;This is a test. This is only a test...&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Paul Sweatte",
                        "user_id": 1113772
                    },
                    "score": 1
                },
                {
                    "body": "<h2>Use CSS vh units!</h2>\n\n<p>Probably the most obvious and non-hacky way to go about a sticky footer would be to make use of the new <a href=\"http://www.w3.org/TR/css3-values/#viewport-relative-lengths\" rel=\"nofollow\">css viewport units</a>.</p>\n\n<p>Take for example the following simple markup:</p>\n\n<pre><code>&lt;header&gt;header goes here&lt;/header&gt;\n&lt;div class=\"content\"&gt;This page has little content&lt;/div&gt;\n&lt;footer&gt;This is my footer&lt;/footer&gt;\n</code></pre>\n\n<p>If the header is say 80px high and the footer is 40px high, then we can make our sticky footer <em>with one single rule</em> on the content div:</p>\n\n<pre><code>.content {\n    min-height: calc(100vh - 120px);\n    /* 80px header + 40px footer = 120px  */\n}\n</code></pre>\n\n<p>Which means: let the height of the content div be <strong>at least</strong> 100% of the viewport height minus the combined heights of the header and footer.</p>\n\n<p>That's it.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nheader {\r\n    background: yellow;\r\n    height: 80px;\r\n}\r\n.content {\r\n    min-height: calc(100vh - 120px);\r\n    /* 80px header + 40px footer = 120px  */\r\n    background: pink;\r\n}\r\nfooter {\r\n    height: 40px;\r\n    background: aqua;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;header&gt;header goes here&lt;/header&gt;\r\n&lt;div class=\"content\"&gt;This page has little content&lt;/div&gt;\r\n&lt;footer&gt;This is my footer&lt;/footer&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>... and here's how the same code works with lots of content in the content div:<div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>* {\r\n    margin:0;\r\n    padding:0;\r\n}\r\nheader {\r\n    background: yellow;\r\n    height: 80px;\r\n}\r\n.content {\r\n    min-height: calc(100vh - 120px);\r\n    /* 80px header + 40px footer = 120px  */\r\n    background: pink;\r\n}\r\nfooter {\r\n    height: 40px;\r\n    background: aqua;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;header&gt;header goes here&lt;/header&gt;\r\n&lt;div class=\"content\"&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Typi non habent claritatem insitam; est usus legentis in iis qui facit eorum claritatem. Investigationes demonstraverunt lectores legere me lius quod ii legunt saepius. Claritas est etiam processus dynamicus, qui sequitur mutationem consuetudium lectorum. Mirum est notare quam littera gothica, quam nunc putamus parum claram, anteposuerit litterarum formas humanitatis per seacula quarta decima et quinta decima. Eodem modo typi, qui nunc nobis videntur parum clari, fiant sollemnes in futurum.\r\n&lt;/div&gt;\r\n&lt;footer&gt;\r\n    This is my footer\r\n&lt;/footer&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>NB:</strong></p>\n\n<p>1) The height of the header and footer must be known</p>\n\n<p>2) Old versions of IE (IE8-) and Android (4.4-) don't support viewport units. (<a href=\"http://caniuse.com/viewport-units/embed/\" rel=\"nofollow\">caniuse</a>)</p>\n\n<p>3) Once upon a time webkit had a problem with viewport units within a calc rule. This has indeed been fixed (<a href=\"http://blogs.adobe.com/webplatform/2014/06/12/improving-viewport-unit-support-in-webkit/\" rel=\"nofollow\">see here</a>) so there's no problem there. However if you're looking to avoid using calc for some reason you can get around that using negative margins and padding with box-sizing -</p>\n\n<p>Like so:<div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>* {\r\n    margin:0;padding:0;\r\n}\r\nheader {\r\n    background: yellow;\r\n    height: 80px;\r\n    position:relative;\r\n}\r\n.content {\r\n    min-height: 100vh;\r\n    background: pink;\r\n    margin: -80px 0 -40px;\r\n    padding: 80px 0 40px;\r\n    box-sizing:border-box;\r\n}\r\nfooter {\r\n    height: 40px;\r\n    background: aqua;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;header&gt;header goes here&lt;/header&gt;\r\n&lt;div class=\"content\"&gt;Lorem ipsum \r\n&lt;/div&gt;\r\n&lt;footer&gt;\r\n    This is my footer\r\n&lt;/footer&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Danield",
                        "user_id": 703717
                    },
                    "score": 4
                },
                {
                    "body": "<p>CSS :</p>\n\n<pre><code>  #container{\n            width: 100%;\n            height: 100vh;\n            }\n #container.footer{\n            float:left;\n            width:100%;\n            height:20vh;\n            margin-top:80vh;\n            background-color:red;\n            }\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>           &lt;div id=\"container\"&gt;\n               &lt;div class=\"footer\"&gt;\n               &lt;/div&gt;\n           &lt;/div&gt;\n</code></pre>\n\n<p>This should do the trick if you are looking for a responsive footer aligned at the bottom of the page,which always keeps a top-margin of 80% of the viewport height.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ajith",
                        "user_id": 4357818
                    },
                    "score": 0
                }
            ],
            "body": "<p>I have a simple 2-column layout with a footer that clears both the right and left div in my markup.  My problem is that I can't get the footer to stay at the bottom of the page in all browsers.  It works if the content pushes the footer down, but that's not always the case. </p>\n\n<h3>Update:</h3>\n\n<p>It's not working properly in Firefox. I'm seeing a strip of background color below the footer when there's not enough content on the page to push the footer all the way down to the bottom of the browser window. Unfortunately, this is the default state of the page. </p>\n",
            "last_activity_date": 1426347609,
            "owner": {
                "display_name": "Bill the Lizard",
                "user_id": 1288
            },
            "question_id": 42294,
            "score": 112,
            "tags": [
                "css",
                "html",
                "footer",
                "sticky-footer"
            ],
            "title": "How do you get the footer to stay at the bottom of a Web page?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>it doesn't work that way. the work around is to manually check the coordinates of the mouse click against the area occupied by each element.</p>\n\n<p>area occupied by an element can found found by 1. getting the location of the element with respect to the top left of the page, and 2. the width and the height. a library like jQuery makes this pretty simple, although it can be done in plain js. adding an event handler for <code>mousemove</code> on the <code>document</code> object will provide continuous updates of the mouse position  from the top and left of the page. deciding if the mouse is over any given object consists of checking if the mouse position is between the left, right, top and bottom edges of an element.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "lincolnk",
                        "user_id": 144542
                    },
                    "score": 3
                },
                {
                    "body": "<p>Nope, you can't click \u2018through\u2019 an element. You can get the co-ordinates of the click and try to work out what element was underneath the clicked element, but this is really tedious for browsers that don't have <code>document.elementFromPoint</code>. Then you still have to emulate the default action of clicking, which isn't necessarily trivial depending on what elements you have under there.</p>\n\n<p>Since you've got a fully-transparent window area, you'll probably be better off implementing it as separate border elements around the outside, leaving the centre area free of obstruction so you can really just click straight through.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "bobince",
                        "user_id": 18936
                    },
                    "score": 2
                },
                {
                    "body": "<p>Yes you CAN DO THIS. </p>\n\n<p>Using <code>pointer-events: none</code> along with CSS conditional statements for IE, you can get a cross browser compatible solution for this problem.</p>\n\n<p>Using <code>AlphaImageLoader</code> you can even put transparent <code>.PNG/.GIF</code>s in the overlay <code>div</code> and have clicks flow through to elements underneath.</p>\n\n<p>CSS</p>\n\n<pre><code>pointer-events: none;\nbackground: url('your_transparent.png');\n</code></pre>\n\n<p>IE conditional</p>\n\n<pre><code>filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='your_transparent.png', sizingMethod='scale');\nbackground: none !important;\n</code></pre>\n\n<p>Here is a <a href=\"http://www.searchlawrence.com/click-through-a-div-to-underlying-elements.html\">basic example page</a> with all the code.</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "LawrenceKSRealEstate",
                        "user_id": 595319
                    },
                    "score": 1028
                },
                {
                    "body": "<p>I think that you can consider changing your markup. If I am not wrong, you'd like to put an invisible layer above the document and your invisible markup may be preceding your document image (is this correct?).</p>\n\n<p>Instead, I propose that you put the invisible  right after the document image but changing the position to absolute. </p>\n\n<p>Notice that you need a parent element to have position: relative and then you will be able to use this idea. Otherwise your absolute layer will be placed just in the top left corner.</p>\n\n<blockquote>\n  <p>An absolute position element is positioned relative to the first parent\n  element that has a position other than static.\n  If no such element is found, the containing block is html</p>\n</blockquote>\n\n<p>Hope this helps. See <a href=\"http://www.w3schools.com/css/css_positioning.asp\" rel=\"nofollow\">here</a> for more information about CSS positioning.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "julianm",
                        "user_id": 537135
                    },
                    "score": 0
                },
                {
                    "body": "<p>I currently work with canvas speech balloons. But because the balloon with the pointer is wrapped in a div, some links under it aren't click able anymore. I cant use extjs in this case. \n<a href=\"http://www.meindesign.net/tools/querstion3.php\" rel=\"nofollow\">See basic example for my speech balloon tutorial</a> <strong>requires HTML5</strong> </p>\n\n<p>So I decided to collect all link coordinates from inside the balloons in an array.</p>\n\n<pre><code>var clickarray=[];\nfunction getcoo(thatdiv){\n         thatdiv.find(\".link\").each(function(){\n                 var offset=$(this).offset();           \n                 clickarray.unshift([(offset.left),\n                                     (offset.top),\n                                     (offset.left+$(this).width()),\n                                     (offset.top+$(this).height()),\n                                     ($(this).attr('name')),\n                                     1]);\n                                     });\n         }\n</code></pre>\n\n<p>I call this function on each (new) balloon. It grabs the coordinates of the left/top and right/down corners of a link.class - additionally the name attribute for what to do if someone clicks in that coordinates and I loved to set a 1 which means that it wasn't clicked jet. And unshift this array to the clickarray. You could use push too.</p>\n\n<p>To work with that array:</p>\n\n<pre><code>$(\"body\").click(function(event){\n          event.preventDefault();//if it is a a-tag\n          var x=event.pageX;\n          var y=event.pageY;\n          var job=\"\";\n          for(var i in clickarray){\n              if(x&gt;=clickarray[i][0] &amp;&amp; x&lt;=clickarray[i][2] &amp;&amp; y&gt;=clickarray[i][1] &amp;&amp; y&lt;=clickarray[i][3] &amp;&amp; clickarray[i][5]==1){\n                 job=clickarray[i][4];\n                 clickarray[i][5]=0;//set to allready clicked\n                 break;\n                }\n             }\n          if(job.length&gt;0){   \n             // --do some thing with the job --\n            }\n          });\n</code></pre>\n\n<p>This function proofs the coordinates of a body click event or whether it was already clicked and returns the name attribute. I think it is not necessary to go deeper, but you see it is not that complicate.\nHope in was enlish...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "B.F.",
                        "user_id": 817152
                    },
                    "score": 4
                },
                {
                    "body": "<p>I'm adding this answer because I didnt see it here in full. I was able to do this using elementFromPoint. So basically:</p>\n\n<p>-attach a click to the div you want to be clicked through\n-hide it\n-determine what element the pointer is on\n-fire the click on the element there.</p>\n\n<pre><code>var range-selector= $(\"&lt;div&gt;&lt;/div&gt;\")\n        .css(\"position\", \"absolute\").addClass(\"range-selector\")\n        .appendTo(\"&lt;element to be on top of&gt;\")\n        .click(function(e) {\n            _range-selector.hide();\n            $(document.elementFromPoint(e.clientX,e.clientY)).trigger(\"click\");\n        });;\n</code></pre>\n\n<p>In my case the overlaying div is absolutely positioned if this makes a difference i am not sure. This works on IE8/9, Safari Chrome and Firefox at least.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tim",
                        "user_id": 852398
                    },
                    "score": 8
                },
                {
                    "body": "<p>I know this is an old question but what the hell.</p>\n\n<p>I needed to do this and decided to take this route:</p>\n\n<pre><code>$('.overlay').click(function(e){\n    var left = $(window).scrollLeft();\n    var top = $(window).scrollTop();\n\n    //hide the overlay for now so the document can find the underlying elements\n    $(this).css('display','none');\n    //use the current scroll position to deduct from the click position\n    $(document.elementFromPoint(e.pageX-left, e.pageY-top)).click();\n    //show the overlay again\n    $(this).css('display','block');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matthew Grima",
                        "user_id": 151625
                    },
                    "score": 1
                },
                {
                    "body": "<p>Click through a DIV to underlying element works different in browsers. Opera needs manual event forwarding, Firefox and Chrome understand CSS <code>pointer-events:none;</code> and IE doesn't need anything with transparent background; with e.g. <code>background:white; opacity:0; filter:Alpha(opacity=0);</code> IE needs forwarding like Opera. </p>\n\n<p>See forwarding test at <a href=\"http://jsfiddle.net/vovcat/wf25Q/1/\">http://jsfiddle.net/vovcat/wf25Q/1/</a> and <a href=\"http://caniuse.com/pointer-events\">http://caniuse.com/pointer-events</a>. Pointer-events CSS property has been moved from CSS3-UI to CSS4-UI.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Vladimir Prodan",
                        "user_id": 1750784
                    },
                    "score": 27
                },
                {
                    "body": "<p>You can place an AP overlay like...</p>\n\n<pre><code>#overlay {\nposition:absolute;\ntop:-79px;\nleft:-60px;\nheight:80px;\nwidth:380px;\nz-index:2;\nbackground:url(fake.gif);\n}\n\n&lt;div id=\"overlay\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>just put it over where you dont want ie cliked. Works in all.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "eric",
                        "user_id": 1783586
                    },
                    "score": 0
                },
                {
                    "body": "<ol>\n<li>Hide overlaying the element </li>\n<li>Determine cursor coordinates </li>\n<li>Get element on those coordinates </li>\n<li>Trigger click on element </li>\n<li>Show overlaying element again</li>\n</ol>\n\n<pre>\n\n    $('#elementontop).click(function (e) {\n        $('#elementontop).hide();\n        $(document.elementFromPoint(e.clientX, e.clientY)).trigger(\"click\");\n        $('#elementontop').show();\n    });\n\n</pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "wcloister",
                        "user_id": 2092861
                    },
                    "score": 3
                },
                {
                    "body": "<p>Another idea to try (situationally) would be to:</p>\n\n<ol>\n<li>Put the content you want in a div;</li>\n<li>Put the non-clicking overlay over the entire page with a z-index higher, </li>\n<li>make another cropped copy of the original div </li>\n<li>overlay and abs position the copy div in the same place as the original content you want to be clickable with an even higher z-index?</li>\n</ol>\n\n<p>Any thoughts?</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Adam",
                        "user_id": 2113189
                    },
                    "score": 1
                },
                {
                    "body": "<p>just wrap your a tag around all the html extract, for example</p>\n\n<pre><code>&lt;a href=\"/categories/1\"&gt;\n    &lt;img alt=\"test1\" class=\"img-responsive\" src=\"/assets/photo.jpg\" /&gt;\n        &lt;div class=\"caption bg-orange\"&gt;\n            &lt;h2&gt;\n                test1\n            &lt;/h2&gt;\n        &lt;/div&gt;\n&lt;/a&gt;\n</code></pre>\n\n<p>in my example my caption class has hover effects, that with <strong>pointer-events:none;</strong> you just will lose </p>\n\n<p>wrapping the content will keep your hover effects and you can click in all the picture, div included, <em>regards!</em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alexis",
                        "user_id": 1802527
                    },
                    "score": 0
                },
                {
                    "body": "<p>Here is the polyfill to make pointer-events: none; works on IE prior to 11.\n<a href=\"https://github.com/kmewhort/pointer_events_polyfill\" rel=\"nofollow\">https://github.com/kmewhort/pointer_events_polyfill</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "sveilleux2",
                        "user_id": 2565094
                    },
                    "score": 2
                },
                {
                    "body": "<p>Also nice to know...<br>\nYou can disable pointer-events in a parent element (probably transparent div) but have it still enabled for its child elements.<br>\nThis is helpful if you work with multiple overlapping div layers, where you want to be able to click child elements, while having the parent layers not react on any mouse events at all. For this all parenting divs get <code>pointer-events: none</code> and its clickable children get pointer-events reenabled by <code>pointer-events: all</code> </p>\n\n<pre><code>.parent {\n    pointer-events:none;        \n}\n.child {\n    pointer-events:all;\n}\n\n&lt;div class=\"some-container\"&gt;\n   &lt;ul class=\"layer-0 parent\"&gt;\n     &lt;li class=\"click-me child\"&gt;&lt;/li&gt;\n     &lt;li class=\"click-me child\"&gt;&lt;/li&gt;\n   &lt;/ul&gt;\n\n   &lt;ul class=\"layer-1 parent\"&gt;\n     &lt;li class=\"click-me-also child\"&gt;&lt;/li&gt;\n     &lt;li class=\"click-me-also child\"&gt;&lt;/li&gt;\n   &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Allisone",
                        "user_id": 317083
                    },
                    "score": 5
                }
            ],
            "body": "<p>I have a <code>div</code> that has <code>background:transparent</code>, along with <code>border</code>. Underneath this <code>div</code>, I have more elements.</p>\n\n<p>Currently,  I'm able to click the underlying elements when I click outside of the overlay <code>div</code>. However, I'm unable to click the underlying elements when clicking directly on the overlay <code>div</code>. </p>\n\n<p>I want to be able to click through this <code>div</code> so that I can click on the underlying elements.</p>\n\n<p><img src=\"http://i.stack.imgur.com/VDlDa.png\" alt=\"My Problem\"></p>\n",
            "last_activity_date": 1417952159,
            "owner": {
                "display_name": "Ryan",
                "user_id": 398434
            },
            "question_id": 3680429,
            "score": 538,
            "tags": [
                "css",
                "positioning"
            ],
            "title": "Click through a DIV to underlying elements"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>When you want 1 element palce in bottom other element you use this code in css\nit is used for floats.</p>\n\n<p>if you float content you can float left or right... so in a common layout you might have a left nav, a content div and a footer.</p>\n\n<p>to ensure the footer stays below both of these floats (if you have floated left and right) then you put the footer as clear: both.</p>\n\n<p>This way it will stay below both floats.</p>\n\n<p>(if you are only clearing left then you only really need to clear: left; )</p>\n\n<p>go through this tutorial:</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Saeed Py",
                        "user_id": 1726377
                    },
                    "score": 0
                },
                {
                    "body": "<p>I won't be explaining how the floats work here (in detail), as this question generally focuses on <em>Why use <code>clear: both;</code> OR what does <code>clear: both;</code> exactly do...</em></p>\n\n<p>I'll keep this answer simple, and to the point, and will explain to you graphically why <code>clear: both;</code> is required or what it does...</p>\n\n<p>Generally designers float the elements, left or to the right, which creates an empty space on the other side which allows other elements to take up the remaining space.</p>\n\n<h1>Why do they float elements?</h1>\n\n<p>Elements are floated when the designer needs 2 block level elements side by side. For example say we want to design a basic website which has a layout like below...</p>\n\n<p><img src=\"http://i.stack.imgur.com/a3mXz.jpg\" alt=\"enter image description here\"></p>\n\n<p><a href=\"http://jsfiddle.net/ps5vx/\" rel=\"nofollow\"><strong>Live Example</strong></a> of the demo image.</p>\n\n<p>Code For Demo</p>\n\n<h2>HTML:</h2>\n\n<pre><code>&lt;header&gt;\n    Header\n&lt;/header&gt;\n&lt;aside&gt;\n    Aside (Floated Left)\n&lt;/aside&gt;\n&lt;section&gt;\n    Content (Floated Left, Can Be Floated To Right As Well)\n&lt;/section&gt;\n&lt;!-- Clearing Floating Elements--&gt;\n&lt;div class=\"clear\"&gt;&lt;/div&gt;\n&lt;footer&gt;\n    Footer\n&lt;/footer&gt;\n</code></pre>\n\n<h2>CSS:</h2>\n\n<pre><code>* { /* Not related to floats / clear both, used it for demo purpose only */\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n}\n\nheader, footer {\n    border: 5px solid #000;\n    height: 100px;\n}\n\naside {\n    float: left;\n    width: 30%;\n    border: 5px solid #000;\n    height: 300px;\n}\n\nsection {\n    float: left;\n    width: 70%;\n    border: 5px solid #000;\n    height: 300px;\n}\n\n.clear {\n    clear: both;\n}\n</code></pre>\n\n<p><strong>Note:</strong> <em>You might have to add <code>header</code>, <code>footer</code>, <code>aside</code>, <code>section</code> (and other HTML5 elements) as <code>display: block;</code> in your stylesheet for explicitly mentioning that the elements are block level elements.</em></p>\n\n<h2>Explanation:</h2>\n\n<p>I have a basic layout, 1 header, 1 side bar, 1 content area and 1 footer.</p>\n\n<p>No floats for <code>header</code>, next comes the <code>aside</code> tag which I'll be using for my website sidebar, so I'll be floating the element to left.</p>\n\n<blockquote>\n  <p>Note: By default, block level element takes up document 100% width,\n  but when floated left or right, it will resize according to the\n  content it holds.</p>\n</blockquote>\n\n<ol>\n<li><a href=\"http://jsfiddle.net/cpEYu/\" rel=\"nofollow\">Normal Behavior Of Block Level Element</a></li>\n<li><a href=\"http://jsfiddle.net/cpEYu/1/\" rel=\"nofollow\">Floated Behavior Of Block Level Element</a></li>\n</ol>\n\n<p>So as you note, the left floated <code>div</code> leaves the space to its right unused, which will allow the <code>div</code> after it to shift in the remaining space.</p>\n\n<ol>\n<li><a href=\"http://jsfiddle.net/tUGV7/\" rel=\"nofollow\"><code>div</code>'s will render one after the other if they are NOT floated</a></li>\n<li><a href=\"http://jsfiddle.net/tUGV7/1/\" rel=\"nofollow\"><code>div</code> will shift beside each other if floated left or right</a></li>\n</ol>\n\n<p>Ok, so this is how block level elements behave when floated left or right, so now why is <code>clear: both;</code> required and why?</p>\n\n<p>So if you note in the layout demo - in case you forgot, <a href=\"http://jsfiddle.net/ps5vx/\" rel=\"nofollow\"><strong>here</strong></a> it is..</p>\n\n<p>I am using a class called <code>.clear</code> and it holds a property called <code>clear</code> with a value of <code>both</code>. So lets see why it needs <code>both</code>.</p>\n\n<p>I've floated <code>aside</code> and <code>section</code> elements to the left, so assume a scenario, where we have a pool, where <code>header</code> is solid land, <code>aside</code> and <code>section</code> are floating in the pool and footer is solid land again, something like this..</p>\n\n<p><img src=\"http://i.stack.imgur.com/UwFxL.jpg\" alt=\"Floated View\"></p>\n\n<p>So the blue water has no idea what the area of the floated elements are, they can be bigger than the pool or smaller, so here comes a common issue which troubles 90% of CSS beginners: why the background of a container element is not stretched when it holds floated elements.  It's because the container element is a <strong>POOL</strong> here and the <strong>POOL</strong> has no idea how many objects are floating, or what the length or breadth of the floated elements are, so it simply won't stretch.</p>\n\n<ol>\n<li><a href=\"http://jsfiddle.net/wcafZ/\" rel=\"nofollow\">Normal Flow Of The Document</a></li>\n<li><a href=\"http://jsfiddle.net/wcafZ/4/\" rel=\"nofollow\">Sections Floated To Left</a></li>\n<li><a href=\"http://jsfiddle.net/wcafZ/3/\" rel=\"nofollow\">Cleared Floated Elements To Stretch Background Color Of The Container</a></li>\n</ol>\n\n<p>I've provided 3 examples above, 1st is the normal document flow where <code>red</code> background will just render as expected since the container doesn't hold any floated objects.</p>\n\n<p>In the second example, when the object is floated to left, the container element (POOL) won't know the dimensions of the floated elements and hence it won't stretch to the floated elements height.</p>\n\n<p><img src=\"http://i.stack.imgur.com/vmmUS.jpg\" alt=\"enter image description here\"></p>\n\n<p>After using <code>clear: both;</code>, the container element will be stretched to its floated element dimensions.</p>\n\n<p><img src=\"http://i.stack.imgur.com/MjP6D.jpg\" alt=\"enter image description here\"></p>\n\n<p>Another reason the <code>clear: both;</code> is used is to prevent the element to shift up in the remaining space.</p>\n\n<p>Say you want 2 elements side by side and another element below them... So you will float 2 elements to left and you want the other below them.</p>\n\n<ol>\n<li><a href=\"http://jsfiddle.net/N82UD/\" rel=\"nofollow\"><code>div</code> Floated left resulting in <code>section</code> moving into remaining space</a></li>\n<li><a href=\"http://jsfiddle.net/N82UD/1/\" rel=\"nofollow\">Floated <code>div</code> cleared so that the <code>section</code> tag will render below the floated <code>div</code>s</a></li>\n</ol>\n\n<hr>\n\n<h2>1st Example</h2>\n\n<p><img src=\"http://i.stack.imgur.com/urCUS.jpg\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<h2>2nd Example</h2>\n\n<p><img src=\"http://i.stack.imgur.com/HNB63.jpg\" alt=\"enter image description here\"></p>\n\n<p>Last but not the least, the <code>footer</code> tag will be rendered after floated elements as I've used the <code>clear</code> class before declaring my <code>footer</code> tags, which ensures that all the floated elements (left/right) are cleared up to that point.</p>\n\n<hr>\n\n<h1>Original Answer:</h1>\n\n<p>Most of the developers float their content left or right on their pages, probably divs holding logo, sidebar, content etc., these divs are floated left or right, leaving the rest of the space unused and hence if you place other containers, it will float too in the remaining space, so in order to prevent that <code>clear: both;</code> is used, it clears all the elements floated left or right.</p>\n\n<h2>Demonstration:</h2>\n\n<pre><code>------------------ ----------------------------------\ndiv1(Floated Left) Other div takes up the space here\n------------------ ----------------------------------\n</code></pre>\n\n<p>Now what if you want to make the other div render below <code>div1</code>, so you'll use <code>clear: both;</code> so it will ensure you clear all floats, left or right</p>\n\n<pre><code>------------------\ndiv1(Floated Left)\n------------------\n&lt;div style=\"clear: both;\"&gt;&lt;!--This &lt;div&gt; acts as a separator--&gt;&lt;/div&gt;\n----------------------------------\nOther div renders here now\n----------------------------------\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Mr. Alien",
                        "user_id": 1542290
                    },
                    "score": 391
                },
                {
                    "body": "<p><strong><a href=\"http://css-tricks.com/all-about-floats/\">CSS float and clear</a></strong></p>\n\n<p><strong><a href=\"http://jsfiddle.net/YKDBv/\">Sample Fiddle</a></strong></p>\n\n<p>Just try to remove <code>clear:both</code> property from the <code>div</code> with <code>class</code> <code>sample</code> and see how it follows floating <code>divs</code>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "freebird",
                        "user_id": 1097285
                    },
                    "score": 16
                },
                {
                    "body": "<p>Mr. Alien's answer is perfect, but anyway I don't recommend to use <code>&lt;div class=\"clear\"&gt;&lt;/div&gt;</code> because it just a hack which makes your markup dirty. This is useless empty <code>div</code> in terms of bad structure and semantic, this also makes your code not flexible. In some browsers this div causes additional height and you have to add <code>height: 0;</code> which even worse. But real troubles begin when you want to add background or border around your floated elements - it just will collapse because <a href=\"http://css-tricks.com/all-about-floats/\" rel=\"nofollow\">web was designed badly</a>. I do recommend to wrap floated elements into container which has <a href=\"http://stackoverflow.com/questions/8554043/what-is-clearfix\">clearfix</a> CSS rule. This is hack as well, but beautiful, more flexible to use and readable for human and SEO robots.  </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "elky",
                        "user_id": 690532
                    },
                    "score": 3
                },
                {
                    "body": "<p>The <a href=\"http://www.w3.org/TR/CSS2/visuren.html#flow-control\" rel=\"nofollow\"><strong><code>clear</code></strong></a> property indicates that the left, right or both sides of an element can not be adjacent to earlier floated elements within the same block formatting context. Cleared elements are pushed below the corresponding floated elements. Examples:</p>\n\n<h3><code>clear: none;</code> Element remains adjacent to floated elements</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  font-family: monospace;\r\n  background: #EEE;\r\n}\r\n.float-left {\r\n  float: left;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #CEF;\r\n}\r\n.float-right {\r\n  float: right;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #CEF;\r\n}\r\n.clear-none {\r\n  clear: none;\r\n  background: #FFF;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"float-left\"&gt;float: left;&lt;/div&gt;\r\n&lt;div class=\"float-right\"&gt;float: right;&lt;/div&gt;\r\n&lt;div class=\"clear-none\"&gt;clear: none;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3><code>clear: left;</code> Element pushed below left floated elements</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  font-family: monospace;\r\n  background: #EEE;\r\n}\r\n.float-left {\r\n  float: left;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #CEF;\r\n}\r\n.float-right {\r\n  float: right;\r\n  width: 60px;\r\n  height: 120px;\r\n  background: #CEF;\r\n}\r\n.clear-left {\r\n  clear: left;\r\n  background: #FFF;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"float-left\"&gt;float: left;&lt;/div&gt;\r\n&lt;div class=\"float-right\"&gt;float: right;&lt;/div&gt;\r\n&lt;div class=\"clear-left\"&gt;clear: left;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3><code>clear: right;</code> Element pushed below right floated elements</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  font-family: monospace;\r\n  background: #EEE;\r\n}\r\n.float-left {\r\n  float: left;\r\n  width: 60px;\r\n  height: 120px;\r\n  background: #CEF;\r\n}\r\n.float-right {\r\n  float: right;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #CEF;\r\n}\r\n.clear-right {\r\n  clear: right;\r\n  background: #FFF;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"float-left\"&gt;float: left;&lt;/div&gt;\r\n&lt;div class=\"float-right\"&gt;float: right;&lt;/div&gt;\r\n&lt;div class=\"clear-right\"&gt;clear: right;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3><code>clear: both;</code> Element pushed below all floated elements</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  font-family: monospace;\r\n  background: #EEE;\r\n}\r\n.float-left {\r\n  float: left;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #CEF;\r\n}\r\n.float-right {\r\n  float: right;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: #CEF;\r\n}\r\n.clear-both {\r\n  clear: both;\r\n  background: #FFF;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"float-left\"&gt;float: left;&lt;/div&gt;\r\n&lt;div class=\"float-right\"&gt;float: right;&lt;/div&gt;\r\n&lt;div class=\"clear-both\"&gt;clear: both;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3><code>clear</code> does not affect floats outside the current block formatting context</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  font-family: monospace;\r\n  background: #EEE;\r\n}\r\n.float-left {\r\n  float: left;\r\n  width: 60px;\r\n  height: 120px;\r\n  background: #CEF;\r\n}\r\n.inline-block {\r\n  display: inline-block;\r\n  background: #BDF;\r\n}\r\n.inline-block .float-left {\r\n  height: 60px;\r\n}\r\n.clear-both {\r\n  clear: both;\r\n  background: #FFF;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"float-left\"&gt;float: left;&lt;/div&gt;\r\n&lt;div class=\"inline-block\"&gt;\r\n  &lt;div&gt;display: inline-block;&lt;/div&gt;\r\n  &lt;div class=\"float-left\"&gt;float: left;&lt;/div&gt;\r\n  &lt;div class=\"clear-both\"&gt;clear: both;&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Salman A",
                        "user_id": 87015
                    },
                    "score": 1
                }
            ],
            "body": "<p>What does the following CSS rule do:</p>\n\n<pre><code>.clear { clear: both; }\n</code></pre>\n\n<p>And why do we need to use it?</p>\n",
            "last_activity_date": 1426822324,
            "owner": {
                "display_name": "user1708560"
            },
            "question_id": 12871710,
            "score": 127,
            "tags": [
                "css",
                "css-float"
            ],
            "title": "What does the CSS rule clear: both do?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>I like adding functions to jQuery so this function would help:</p>\n\n<pre><code>jQuery.fn.center = function () {\n    this.css(\"position\",\"absolute\");\n    this.css(\"top\", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) + \n                                                $(window).scrollTop()) + \"px\");\n    this.css(\"left\", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) + \n                                                $(window).scrollLeft()) + \"px\");\n    return this;\n}\n</code></pre>\n\n<p>Now we can just write:</p>\n\n<pre><code>$(element).center();\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/DerekL/GbDw9/\">Fiddle</a> (with added parameter)</p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Tony L.",
                        "user_id": 21905
                    },
                    "score": 829
                },
                {
                    "body": "<p>This is untested, but something like this should work.</p>\n\n<pre><code>var myElement = $('#myElement');\nmyElement.css({\n    position: 'absolute',\n    left: '50%',\n    'margin-left': 0 - (myElement.width() / 2)\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andrew Hedges",
                        "user_id": 11577
                    },
                    "score": 1
                },
                {
                    "body": "<p>I put a jquery plugin here\n<a href=\"http://plugins.jquery.com/project/autocenter\">http://plugins.jquery.com/project/autocenter</a></p>\n\n<p>VERY SHORT VERSION</p>\n\n<pre><code>$('#myDiv').css({top:'50%',left:'50%',margin:'-'+($('#myDiv').height() / 2)+'px 0 0 -'+($('#myDiv').width() / 2)+'px'});\n</code></pre>\n\n<p>SHORT VERSION</p>\n\n<pre><code>(function($){\n    $.fn.extend({\n        center: function () {\n            return this.each(function() {\n                var top = ($(window).height() - $(this).outerHeight()) / 2;\n                var left = ($(window).width() - $(this).outerWidth()) / 2;\n                $(this).css({position:'absolute', margin:0, top: (top &gt; 0 ? top : 0)+'px', left: (left &gt; 0 ? left : 0)+'px'});\n            });\n        }\n    }); \n})(jQuery);\n</code></pre>\n\n<p>Activated by this code :</p>\n\n<pre><code>$('#mainDiv').center();\n</code></pre>\n\n<p>PLUGIN VERSION</p>\n\n<pre><code>(function($){\n     $.fn.extend({\n          center: function (options) {\n               var options =  $.extend({ // Default values\n                    inside:window, // element, center into window\n                    transition: 0, // millisecond, transition time\n                    minX:0, // pixel, minimum left element value\n                    minY:0, // pixel, minimum top element value\n                    withScrolling:true, // booleen, take care of the scrollbar (scrollTop)\n                    vertical:true, // booleen, center vertical\n                    horizontal:true // booleen, center horizontal\n               }, options);\n               return this.each(function() {\n                    var props = {position:'absolute'};\n                    if (options.vertical) {\n                         var top = ($(options.inside).height() - $(this).outerHeight()) / 2;\n                         if (options.withScrolling) top += $(options.inside).scrollTop() || 0;\n                         top = (top &gt; options.minY ? top : options.minY);\n                         $.extend(props, {top: top+'px'});\n                    }\n                    if (options.horizontal) {\n                          var left = ($(options.inside).width() - $(this).outerWidth()) / 2;\n                          if (options.withScrolling) left += $(options.inside).scrollLeft() || 0;\n                          left = (left &gt; options.minX ? left : options.minX);\n                          $.extend(props, {left: left+'px'});\n                    }\n                    if (options.transition &gt; 0) $(this).animate(props, options.transition);\n                    else $(this).css(props);\n                    return $(this);\n               });\n          }\n     });\n})(jQuery);\n</code></pre>\n\n<p>Activated by this code :</p>\n\n<pre><code>$(document).ready(function(){\n    $('#mainDiv').center();\n    $(window).bind('resize', function() {\n        $('#mainDiv').center({transition:300});\n    });\n);\n</code></pre>\n\n<p>is that right ?</p>\n\n<h1>UPDATE :</h1>\n\n<p>From <a href=\"http://css-tricks.com/centering-percentage-widthheight-elements/\">http://css-tricks.com/centering-percentage-widthheight-elements/</a></p>\n\n<pre><code>.center {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%); /* Yep! */\n  width: 48%;\n  height: 59%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "molokoloco",
                        "user_id": 174449
                    },
                    "score": 89
                },
                {
                    "body": "<p>The transition component of this function worked really poorly for me in Chrome (didn't test elsewhere). I would resize the window a bunch and my element would sort of scoot around slowly, trying to catch up. </p>\n\n<p>So the following function comments that part out. In addition, I added parameters for passing in optional x &amp; y booleans, if you want to center vertically but not horizontally, for example:</p>\n\n<pre><code>// Center an element on the screen\n(function($){\n  $.fn.extend({\n    center: function (x,y) {\n      // var options =  $.extend({transition:300, minX:0, minY:0}, options);\n      return this.each(function() {\n                if (x == undefined) {\n                    x = true;\n                }\n                if (y == undefined) {\n                    y = true;\n                }\n                var $this = $(this);\n                var $window = $(window);\n                $this.css({\n                    position: \"absolute\",\n                });\n                if (x) {\n                    var left = ($window.width() - $this.outerWidth())/2+$window.scrollLeft();\n                    $this.css('left',left)\n                }\n                if (!y == false) {\n            var top = ($window.height() - $this.outerHeight())/2+$window.scrollTop();   \n                    $this.css('top',top);\n                }\n        // $(this).animate({\n        //   top: (top &gt; options.minY ? top : options.minY)+'px',\n        //   left: (left &gt; options.minX ? left : options.minX)+'px'\n        // }, options.transition);\n        return $(this);\n      });\n    }\n  });\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Eric D. Fields",
                        "user_id": 306003
                    },
                    "score": 2
                },
                {
                    "body": "<p>I dont think having an absolute position would be best if you want an element always centered in the middle of the page. You probably want a fixed element. I found another jquery centering plugin that used fixed positioning. It is called <a href=\"http://david-tang.net/2010/06/fixed-center-plugin/\" rel=\"nofollow\">fixed center</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Fred",
                        "user_id": 382617
                    },
                    "score": 4
                },
                {
                    "body": "<p>you're getting that poor transition because you're adjusting the position of the element every time the document is scrolled. What you want is to use fixed positioning. I tried that fixed center plugin listed above and that seems to do solve the problem nicely. Fixed positioning allows you to center an element once, and the CSS property will take care of maintaining that position for you every time you scroll.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "skaterdav85",
                        "user_id": 385834
                    },
                    "score": 0
                },
                {
                    "body": "<p>I would recommend <a href=\"http://jqueryui.com/demos/position/\">jQueryUI Position utility</a></p>\n\n<pre><code>$('your-selector').position({\n    of: $(window)\n});\n</code></pre>\n\n<p>which gives you much more possibilities than only centering ...</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cetnar",
                        "user_id": 104796
                    },
                    "score": 42
                },
                {
                    "body": "<p>I would like to correct one issue.</p>\n\n<pre><code>this.css(\"top\", ( $(window).height() - this.height() ) / 2+$(window).scrollTop() + \"px\");\n</code></pre>\n\n<p>Above code won't work in cases when <code>this.height</code> (lets assume that user resizes the screen and content is dynamic) and <code>scrollTop() = 0</code>, example: </p>\n\n<p><code>window.height</code> is <code>600</code><br>\n<code>this.height</code> is <code>650</code></p>\n\n<pre><code>600 - 650 = -50  \n\n-50 / 2 = -25\n</code></pre>\n\n<p>Now the box is centered <code>-25</code> offscreen.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Butcher",
                        "user_id": 650320
                    },
                    "score": 5
                },
                {
                    "body": "<p>This is great.  I added a callback function</p>\n\n<pre>\n...\ncenter: function (options, callback) {\n...\n</pre>\n\n<pre>\n...\nif (options.transition > 0) {\n   $(this).animate(props, options.transition, callback);\n} else { \n    $(this).css(props);\n   if (typeof callback == 'function') { // make sure the callback is a function\n       callback.call(this); // brings the scope to the callback\n   }\n}\n...\n</pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Keith",
                        "user_id": 717676
                    },
                    "score": 2
                },
                {
                    "body": "<p>Why you don't use CSS for centering a div?</p>\n\n<pre><code>#timer_wrap{  \n  position: fixed;\n  left: 50%;\n  top: 50%;\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ahmad balavipour",
                        "user_id": 774934
                    },
                    "score": -4
                },
                {
                    "body": "<p>Here's my go at it. I ended up using it for my Lightbox clone. The main advantage of this solution is that the element will stay centered automatically even if the window is resized making it ideal for this sort of usage.</p>\n\n<pre><code>$.fn.center = function() {\n    this.css({\n        'position': 'fixed',\n        'left': '50%',\n        'top': '50%'\n    });\n    this.css({\n        'margin-left': -this.outerWidth() / 2 + 'px',\n        'margin-top': -this.outerHeight() / 2 + 'px'\n    });\n\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "bebraw",
                        "user_id": 228885
                    },
                    "score": 26
                },
                {
                    "body": "<h2>Edit:</h2>\n\n<p>If the question taught me anything, it's this: don't change something that already works :)</p>\n\n<p>I'm providing an (almost) verbatim copy of how this was handled on <a href=\"http://www.jakpsatweb.cz/css/css-vertical-center-solution.html\" rel=\"nofollow\">http://www.jakpsatweb.cz/css/css-vertical-center-solution.html</a> - it's heavily hacked for IE but provides a pure CSS way of answering the question:</p>\n\n<pre><code>.container {display:table; height:100%; position:absolute; overflow:hidden; width:100%;}\n.helper    {#position:absolute; #top:50%;\n            display:table-cell; vertical-align:middle;}\n.content   {#position:relative; #top:-50%;\n            margin:0 auto; width:200px; border:1px solid orange;}\n</code></pre>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/S9upd/4/\" rel=\"nofollow\">http://jsfiddle.net/S9upd/4/</a></p>\n\n<p>I've run this through browsershots and it seems fine; if for nothing else, I'll keep the original below so that margin percentage handling as dictated by CSS spec sees the light of day.</p>\n\n<h2>Original:</h2>\n\n<p>Looks like I'm late to the party!</p>\n\n<p>There are some comments above that suggest this is a CSS question - separation of concerns and all. Let me preface this by saying that CSS <em>really</em> shot itself in the foot on this one. I mean, how easy would it be to do this:</p>\n\n<pre><code>.container {\n    position:absolute;\n    left: 50%;\n    top: 50%;\n    overflow:visible;\n}\n.content {\n    position:relative;\n    margin:-50% 50% 50% -50%;\n}\n</code></pre>\n\n<p>Right? Container's top left corner would be in the center of the screen, and with negative margins the content will magically reappear in the absolute center of the page! <a href=\"http://jsfiddle.net/rJPPc/\" rel=\"nofollow\">http://jsfiddle.net/rJPPc/</a></p>\n\n<p><em><strong>Wrong!</em></strong> Horizontal positioning is OK, but vertically... Oh, I see. Apparently in css, when setting top margins in %, the value is calculated as <a href=\"https://developer.mozilla.org/en/CSS/margin-top\" rel=\"nofollow\">a percentage always relative to the <strong>width</strong> of the containing block</a>. Like apples and oranges! If you don't trust me or Mozilla doco, have a play with the fiddle above by adjusting content width and be amazed.</p>\n\n<p>...</p>\n\n<p>Now, with CSS being my bread and butter, I was not about to give up. At the same time, I prefer things easy, so I've borrowed the findings of a <a href=\"http://www.jakpsatweb.cz/css/css-vertical-center-solution.html\" rel=\"nofollow\">Czech CSS guru</a> and made it into a working fiddle. Long story short, we create a table in which vertical-align is set to middle:</p>\n\n<pre><code>&lt;table class=\"super-centered\"&gt;&lt;tr&gt;&lt;td&gt;\n    &lt;div class=\"content\"&gt;\n        &lt;p&gt;I am centered like a boss!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n</code></pre>\n\n<p>And than the content's position is fine-tuned with good old <strong>margin:0 auto;</strong>:</p>\n\n<pre><code>.super-centered {position:absolute; width:100%;height:100%;vertical-align:middle;}\n.content {margin:0 auto;width:200px;}\u200b\n</code></pre>\n\n<p>Working fiddle as promised: <a href=\"http://jsfiddle.net/teDQ2/\" rel=\"nofollow\">http://jsfiddle.net/teDQ2/</a></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "o.v.",
                        "user_id": 1081234
                    },
                    "score": 2
                },
                {
                    "body": "<p>I'm expanding upon the great answer given by @TonyL. I'm adding Math.abs() to wrap the values, and also I take into account that jQuery might be in \"no conflict\" mode, like for instance in WordPress.</p>\n\n<p>I recommend that you wrap the top and left values with Math.abs() as I have done below. If the window is too small, and your modal dialog has a close box at the top, this will prevent the problem of not seeing the close box. Tony's function would have had potentially negative values. A good example on how you end up with negative values is if you have a large centered dialog but the end user has installed several toolbars and/or increased his default font -- in such a case, the close box on a modal dialog (if at the top) might not be visible and clickable.</p>\n\n<p>The other thing I do is speed this up a bit by caching the $(window) object so that I reduce extra DOM traversals, and I use a cluster CSS.</p>\n\n<pre><code>jQuery.fn.center = function ($) {\n  var w = $(window);\n  this.css({\n    'position':'absolute',\n    'top':Math.abs(((w.height() - this.outerHeight()) / 2) + w.scrollTop()),\n    'left':Math.abs(((w.width() - this.outerWidth()) / 2) + w.scrollLeft())\n  });\n  return this;\n}\n</code></pre>\n\n<p>To use, you would do something like:</p>\n\n<pre><code>jQuery(document).ready(function($){\n  $('#myelem').center();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Volomike",
                        "user_id": 105539
                    },
                    "score": 7
                },
                {
                    "body": "<p>Here is my version. I may change it after I look at these examples.</p>\n\n<pre><code>$.fn.pixels = function(property){\n    return parseInt(this.css(property));\n};\n\n$.fn.center = function(){\n    var w = $($w);\n    return this.each(function(){\n        $(this).css(\"position\",\"absolute\");\n        $(this).css(\"top\",((w.height() - $(this).height()) / 2) - (($(this).pixels('padding-top') + $(this).pixels('padding-bottom')) / 2) + w.scrollTop() + \"px\");\n        $(this).css(\"left\",((w.width() - $(this).width()) / 2) - (($(this).pixels('padding-left') + $(this).pixels('padding-right')) / 2) + w.scrollLeft() + \"px\");\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Andrew Anthony Gerst",
                        "user_id": 882371
                    },
                    "score": 0
                },
                {
                    "body": "<p>To center the element relative to the browser viewport (window), don't use <code>position: absolute</code>, the correct position value should be <code>fixed</code> (absolute means: \"The element is positioned relative to its first positioned (not static) ancestor element\"). </p>\n\n<p>This alternative version of the proposed center plugin uses \"%\" instead of \"px\" so when you resize the window the content is keep centered:</p>\n\n<pre><code>$.fn.center = function () {\n    var heightRatio = ($(window).height() != 0) \n            ? this.outerHeight() / $(window).height() : 1;\n    var widthRatio = ($(window).width() != 0) \n            ? this.outerWidth() / $(window).width() : 1;\n\n    this.css({\n        position: 'fixed',\n        margin: 0,\n        top: (50*(1-heightRatio)) + \"%\",\n        left: (50*(1-widthRatio))  + \"%\"\n    });\n\n    return this;\n}\n</code></pre>\n\n<p>You need to put <code>margin: 0</code> to exclude the content margins from the width/height (since we are using position fixed, having margins makes no sense). \nAccording to the jQuery doc using <code>.outerWidth(true)</code> should include margins, but it didn't work as expected when I tried in Chrome.</p>\n\n<p>The <code>50*(1-ratio)</code> comes from:</p>\n\n<p>Window Width: <code>W = 100%</code></p>\n\n<p>Element Width (in %): <code>w = 100 * elementWidthInPixels/windowWidthInPixels</code></p>\n\n<p>Them to calcule the centered left: </p>\n\n<pre><code> left = W/2 - w/2 = 50 - 50 * elementWidthInPixels/windowWidthInPixels =\n = 50 * (1-elementWidthInPixels/windowWidthInPixels)\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Diego",
                        "user_id": 346169
                    },
                    "score": 2
                },
                {
                    "body": "<p>You can use CSS alone to center like so:</p>\n\n<p><strong><a href=\"http://jsfiddle.net/apaul34208/e4y6F/\" rel=\"nofollow\">Working Example</a></strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.center{\r\n    position: absolute;\r\n    height: 50px;\r\n    width: 50px;\r\n    background:red;\r\n    top:calc(50% - 50px/2); /* height divided by 2*/\r\n    left:calc(50% - 50px/2); /* width divided by 2*/\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"center\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>calc()</code> allows you to do basic calculations in css.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/calc\" rel=\"nofollow\">MDN Documentation for <code>calc()</code></a><br>\n<a href=\"http://caniuse.com/#feat=calc\" rel=\"nofollow\">Browser support table</a> </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "apaul34208",
                        "user_id": 1947286
                    },
                    "score": 9
                },
                {
                    "body": "<p>What I have here is a \"center\" method that ensures the element you are attempting to center is not only of \"fixed\" or \"absolute\" positioning, but it also ensures that the element you are centering is smaller than its parent, this centers and element relative to is parent, if the elements parent is smaller than the element itself, it will pillage up the DOM to the next parent, and center it relative to that.   </p>\n\n<pre><code>$.fn.center = function () {\n        /// &lt;summary&gt;Centers a Fixed or Absolute positioned element relative to its parent&lt;/summary&gt;\n\n        var element = $(this),\n            elementPos = element.css('position'),\n            elementParent = $(element.parent()),\n            elementWidth = element.outerWidth(),\n            parentWidth = elementParent.width();\n\n        if (parentWidth &lt;= elementWidth) {\n            elementParent = $(elementParent.parent());\n            parentWidth = elementParent.width();\n        }\n\n        if (elementPos === \"absolute\" || elementPos === \"fixed\") {\n            element.css('right', (parentWidth / 2) - elementWidth / 2 + 'px');\n        }\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ryan",
                        "user_id": 2246362
                    },
                    "score": 1
                },
                {
                    "body": "<p>No need jquery for this</p>\n\n<p>I used this to center  Div element.\nCss Style,</p>\n\n<pre><code>.black_overlay{\n    display: none;\n    position: absolute;\n    top: 0%;\n    left: 0%;\n    width: 100%;\n    height: 100%;\n    background-color: black;\n    z-index:1001;\n    -moz-opacity: 0.8;\n    opacity:.80;\n    filter: alpha(opacity=80);\n}\n\n.white_content {\n    display: none;\n    position: absolute;\n    top: 25%;\n    left: 25%;\n    width: 50%;\n    height: 50%;\n    padding: 16px;\n    border: 16px solid orange;\n    background-color: white;\n    z-index:1002;\n    overflow: auto;\n}\n</code></pre>\n\n<p>Open element</p>\n\n<pre><code>$(document).ready(function(){\n    $(\".open\").click(function(e){\n      $(\".black_overlay\").fadeIn(200);\n    });\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sajitha Rathnayake",
                        "user_id": 2345900
                    },
                    "score": 0
                },
                {
                    "body": "<p>You could use the CSS <code>translate</code> property:</p>\n\n<pre><code>position: absolute;\ntransform: translate(-50%, -50%);\n</code></pre>\n\n<p>Read <a href=\"http://coderpills.wordpress.com/2014/07/30/centering-a-div-with-css-without-negative-margin-or-jquery/\" rel=\"nofollow\">this post</a> for more details.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Fred K",
                        "user_id": 1252920
                    },
                    "score": -1
                },
                {
                    "body": "<p>I would use the <strong><a href=\"http://api.jqueryui.com/position/\" rel=\"nofollow\">jQuery UI</a></strong> <code>position</code> function.</p>\n\n<p><strong><a href=\"http://jsfiddle.net/ADm97/1/\" rel=\"nofollow\">See working demo</a></strong>.</p>\n\n<pre><code>&lt;div id=\"test\" style=\"position:absolute;background-color:blue;color:white\"&gt;\n    test div to center in window\n&lt;/div&gt;\n</code></pre>\n\n<p>If i have a div with id \"test\" to center then the following script would center the div in the window on document ready. (the default values for \"my\" and \"at\" in the position options are \"center\")</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(function(){\n  $(\"#test\").position({\n     of: $(window)\n  });\n};\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "andy_edward",
                        "user_id": 2765240
                    },
                    "score": 4
                }
            ],
            "body": "<p>How do I go about setting a <code>&lt;div&gt;</code> in the center of the screen using jQuery?</p>\n",
            "last_activity_date": 1422967394,
            "owner": {
                "display_name": "Craig",
                "user_id": 27294
            },
            "question_id": 210717,
            "score": 501,
            "tags": [
                "jquery",
                "html",
                "css"
            ],
            "title": "Using jQuery to center a DIV on the screen"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>If you\u2019re able to absolutely position your elements,</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>position: absolute;\ntop: 0;\nbottom: 0;\n</code></pre>\n\n<p>would do it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tinister",
                        "user_id": 34715
                    },
                    "score": 105
                },
                {
                    "body": "<p>You don't mention a few important details like:</p>\n\n<ul>\n<li>Is the layout fixed width?</li>\n<li>Are either or both of the columns fixed width?</li>\n</ul>\n\n<p>Here's one possibility:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n  &lt;style type=\"text/css\"&gt;\n    html, body, div { margin: 0; border: 0 none; padding: 0; }\n    html, body, #wrapper, #left, #right { height: 100%; min-height: 100%; }\n    #wrapper { margin: 0 auto; overflow: hidden; width: 960px; // width optional }\n    #left { background: yellow; float: left; width: 360px; // width optional but recommended }\n    #right { background: grey; margin-left: 360px; // must agree with previous width }\n  &lt;/style&gt;\n\n  &lt;title&gt;Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"wrapper\"&gt;\n    &lt;div id=\"left\"&gt;\n      Left\n    &lt;/div&gt;\n\n    &lt;div id=\"right\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>There are many variations on this depending on which columns need to be fixed and which are liquid. You can do this with absolute positioning too but I've generally found better results (particularly in terms of cross-browser) using floats instead.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "cletus",
                        "user_id": 18393
                    },
                    "score": 18
                },
                {
                    "body": "<p>Add <code>min-height: 100%</code> and don't specify a height (or put it on auto). It totally did the job for me:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.container{     \n    margin: auto;\n    background-color: #909090;\n    width: 60%;\n    padding: none;\n    min-height: 100%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Remus Simion",
                        "user_id": 1091682
                    },
                    "score": 8
                },
                {
                    "body": "<p>If you want to set the height of a <code>&lt;div&gt;</code> or any element, you should set the height of <code>&lt;body&gt;</code> and <code>&lt;html&gt;</code> to 100% too. Then you can set the height of element with 100% :)</p>\n\n<p>Here is an example:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body, html {\n  height: 100%;\n}\n\n#right {\n  height: 100%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Ariona Rian",
                        "user_id": 612564
                    },
                    "score": 351
                },
                {
                    "body": "<p>Try this - tested:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body {\n    min-height: 100%;\n}\n\n#right, #left {\n    height: 100%;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "ofcapl",
                        "user_id": 1004946
                    },
                    "score": 0
                },
                {
                    "body": "<p>Even though this solution is done with jQuery I though it may be useful for anyone doing columns to fit the screen size.</p>\n\n<p>For columns starting at the top of the page, this solution is the simplest.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body,html{\n  height:100%;\n}\n\ndiv#right{\n  height:100%\n}\n</code></pre>\n\n<p>For columns that are <strong>not</strong> starting at the top of the page (for example: if they are starting below the header).</p>\n\n<pre><code>&lt;script&gt;\n     $(document).ready(function () {\n        var column_height = $(\"body\").height();\n        column_height = column_height - 100; // 100 is the header height\n        column_height = column_height + \"px\";\n        $(\"#column\").css(\"height\",column_height);\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>First method applies the body height to it and the columns as well, which means that is starting_pixels + <code>height100%</code>.</p>\n\n<p>The second method gets the height of page shown to the user by getting the height of the body and then subtracts the header size to know how much height is left to display the column. </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jerry",
                        "user_id": 2034015
                    },
                    "score": -1
                },
                {
                    "body": "<p>There are a couple of relatively new CSS3 measurement units called:</p>\n\n<h1><a href=\"http://www.w3.org/TR/css3-values/#viewport-relative-lengths\">Viewport-Percentage <em>(or Viewport-Relative)</em> Lengths</a></h1>\n\n<h2>What are Viewport-Percentage Lengths?</h2>\n\n<p>From the linked W3 Candidate Recommendation above:</p>\n\n<blockquote>\n  <p><em>The viewport-percentage lengths are relative to the size of the initial containing block. When the height or width of the initial containing block is changed, they are scaled accordingly.</em></p>\n</blockquote>\n\n<p>These units are <code>vh</code> (viewport height), <code>vw</code> (viewport width), <code>vmin</code> (viewport minimum length) and <code>vmax</code> (viewport maximum length).</p>\n\n<h2>How can this be used to make a divider fill the height of the browser?</h2>\n\n<p>For this question, we can make use of <code>vh</code>: <code>1vh</code> is equal to 1% of the viewport's height. That is to say, <code>100vh</code> is equal to the height of the browser window, regardless of where the element is situated in the DOM tree:</p>\n\n<h3>HTML</h3>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div&gt;&lt;/div&gt;\n</code></pre>\n\n<h3>CSS</h3>\n\n<pre class=\"lang-css prettyprint-override\"><code>div {\n    height:100vh;\n}\n</code></pre>\n\n<p>This is literally all that's needed. Here is a <a href=\"http://jsfiddle.net/JamesD/hr8sL/\"><strong>JSFiddle example</strong></a> of this in use.</p>\n\n<h2>What browsers support these new units?</h2>\n\n<p>This is currently supported on all up-to-date major browsers apart from Opera Mini and Android Browser. Check out <a href=\"http://caniuse.com/#feat=viewport-units\">Can I use...</a> for further support.</p>\n\n<h2>How can this be used with multiple columns?</h2>\n\n<p>In the case of the question at hand, featuring a left and a right divider, here is a <a href=\"http://jsfiddle.net/JamesD/hr8sL/1/\">JSFiddle example</a> showing a two-column layout involving both <code>vh</code> and <code>vw</code>.</p>\n\n<h2>How is <code>100vh</code> different to <code>100%</code>?</h2>\n\n<p>Take this layout for example:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;body style=\"height:100%\"&gt;\n    &lt;div style=\"height:200px\"&gt;\n        &lt;p style=\"height:100%; display:block;\"&gt;Hello, world!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>The <code>p</code> tag here is set to 100% height, but because its containing <code>div</code> has 200px height, 100% of 200px becomes 200px, <em>not</em> 100% of the <code>body</code> height. Using <code>100vh</code> instead means that the <code>p</code> tag will be 100% height of the <code>body</code> regardless of the <code>div</code> height. Take a look at this <a href=\"http://jsfiddle.net/JamesD/hr8sL/2/\">accompanying Fiddle</a> to easily see the difference!</p>\n\n<h2>What exactly is <code>vmin</code> and <code>vmax</code>?</h2>\n\n<p><code>1vmin</code> assumes a value of the smallest between <code>1vh</code> and <code>1vw</code>.<br>\n<code>1vmax</code> assumes a value of the largest between <code>1vh</code> and <code>1vw</code>.</p>\n\n<p>Especially usable for <code>font-size</code>.</p>\n\n<p>*Note that these CSS3 units work dynamically in Firefox, but other browsers require refreshing the page.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "James Donnelly",
                        "user_id": 1317805
                    },
                    "score": 689
                },
                {
                    "body": "<p>This worked for me:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>html, body {\n    height: 100%; /* IMPORTANT!!! stretches viewport to 100% */\n}\n\n#wrapper {\n    min-height: 100%; /* min. height for modern browser */\n    height:auto !important; /* important rule for modern Browser */\n    height:100%; /* min. height for IE */\n    overflow: hidden !important; /* FF scroll-bar */\n}\n</code></pre>\n\n<p>Taken from <a href=\"http://www.gn-webdesign.de/css-tutorials/css-div-height-100.html\" rel=\"nofollow\">this page</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "testing",
                        "user_id": 426227
                    },
                    "score": 2
                },
                {
                    "body": "<p>All the other solutions, including the top-voted one with <code>vh</code> are sub-optimal when compared to the <a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flex model</a> solution.</p>\n\n<p>With the advent of the <a href=\"http://philipwalton.github.io/solved-by-flexbox/\">CSS flex model</a>, solving the 100% height problem becomes very, very easy: use <code>height: 100%; display: flex</code> on the parent, and <code>flex: 1</code> on the child elements. They'll automatically take up all the available space in their container.</p>\n\n<p>Note how simple the markup and the CSS are. No table hacks or anything.</p>\n\n<p>The flex model is <a href=\"http://caniuse.com/#search=flex\">supported by all major browsers</a> as well as IE11+.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>html, body {\r\n  height: 100%;\r\n}\r\nbody {\r\n  display: flex;\r\n}\r\n\r\n.left, .right {\r\n  flex: 1;\r\n}\r\n\r\n.left {\r\n  background: orange;\r\n}\r\n\r\n.right {\r\n  background: cyan;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"left\"&gt;left&lt;/div&gt;\r\n&lt;div class=\"right\"&gt;right&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Learn more about the <a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\">flex model</a> here.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Airen",
                        "user_id": 1621875
                    },
                    "score": 17
                },
                {
                    "body": "<p>This is what worked for me:</p>\n\n<pre><code>&lt;div style=\"position:fixed; top:0px; left:0px; bottom:0px; right:0px;\"&gt; &lt;/div&gt;\n</code></pre>\n\n<p>Use <code>position:fixed</code> instead of <code>position:absolute</code>, that way even if you scroll down the division will expand to the end of the screen.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Majda",
                        "user_id": 2341391
                    },
                    "score": 5
                },
                {
                    "body": "<p>Here's a fix for the height.</p>\n\n<p>In your CSS use:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>#your-object: height: 100vh;\n</code></pre>\n\n<p>For browser that don't support <code>vh-units</code>, use modernizr.</p>\n\n<p>Add this script (to add detection for <code>vh-units</code>)</p>\n\n<pre><code>// https://github.com/Modernizr/Modernizr/issues/572\n// Similar to http://jsfiddle.net/FWeinb/etnYC/\nModernizr.addTest('cssvhunit', function() {\n    var bool;\n    Modernizr.testStyles(\"#modernizr { height: 50vh; }\", function(elem, rule) {   \n        var height = parseInt(window.innerHeight/2,10),\n            compStyle = parseInt((window.getComputedStyle ?\n                      getComputedStyle(elem, null) :\n                      elem.currentStyle)[\"height\"],10);\n\n        bool= !!(compStyle == height);\n    });\n    return bool;\n});\n</code></pre>\n\n<p>Finally use this function to add the height of the viewport to <code>#your-object</code> if the browser doesn't support <code>vh-units</code>:</p>\n\n<pre><code>$(function() {\n    if (!Modernizr.cssvhunit) {\n        var windowH = $(window).height();\n        $('#your-object').css({'height':($(window).height())+'px'});\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jonas Sandstedt",
                        "user_id": 2703852
                    },
                    "score": 14
                },
                {
                    "body": "<p>If you use <code>position: absolute;</code> and jQuery, you could use</p>\n\n<pre><code>$(\"#mydiv\").css(\"height\", $(document).height() + \"px\");\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "John Smith Optional",
                        "user_id": 1785393
                    },
                    "score": -1
                },
                {
                    "body": "<p>What you need to do first is have the HTML and Body at 100% height (PARENT) then if you are using absolute positioning you can set the parent div for you columns to 100% and each column to 100%; This worked for me</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Carlos_1162",
                        "user_id": 2845101
                    },
                    "score": -1
                },
                {
                    "body": "<p>Try </p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body&gt;div.right-side {\n  margin-bottom: -9999px;\n  padding-bottom: 9999px;\n}\n</code></pre>\n\n<p>update: wont work need .js or some other frameworks that uses .js.\ne.g. Foundation.equalizer ??? </p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jie Cai",
                        "user_id": 2899823
                    },
                    "score": -23
                },
                {
                    "body": "<p>Easiest:</p>\n\n<pre><code>html, body {\nheight: 100%;\nmin-height: 100%;\n}\n\nbody {\nposition: relative;\nbackground: purple;\nmargin: 0;\npadding: 0;\n}\n\n.fullheight {\ndisplay: block;\nposition: relative;\nbackground: red;\nheight: 100%;\nwidth: 300px;\n}\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;html class=\"\"&gt;\n&lt;body&gt;\n &lt;div class=\"fullheight\"&gt;\n  This is full height.\n &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Tony Smith",
                        "user_id": 292110
                    },
                    "score": -1
                },
                {
                    "body": "<pre><code>.yourClass{height:100vh;} \n</code></pre>\n\n<p>that's it really.do some other css according to your design it won't harm any other thing.</p>\n\n<p>This <a href=\"http://codepen.io/Shaz3e/full/KEzvo\" rel=\"nofollow\">Pen</a> is exactly you are looking for, this will solve your problem.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "shaz3e",
                        "user_id": 1516290
                    },
                    "score": -2
                },
                {
                    "body": "<p>This is not possible by CSS alone. Need to write some JS.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kannu",
                        "user_id": 562417
                    },
                    "score": -8
                }
            ],
            "body": "<p>I have a layout with two columns - a left <code>div</code> and a right <code>div</code>.</p>\n\n<p>The right <code>div</code> has a grey <code>background-color</code>, and I need it to expand vertically depending on the height of the user's browser window.  Right now the <code>background-color</code> ends at the last piece of content in that <code>div</code>. I've tried <code>height:100%</code>, <code>min-height:100%;</code> etc. None of which seem to work.</p>\n",
            "last_activity_date": 1417770595,
            "owner": {
                "display_name": "mike",
                "user_id": 190874
            },
            "question_id": 1575141,
            "score": 468,
            "tags": [
                "css",
                "html",
                "height"
            ],
            "title": "Make div 100% height of browser window"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Unfortunately, there's no way to do that with CSS.</p>\n\n<p>It's not very difficult with JavaScript though:</p>\n\n<pre><code>// JavaScript code:\ndocument.getElementsByClassName(\"active\")[0].parentNode;\n\n// jQuery code:\n$('.active').parent().get(0); // This would be the &lt;a&gt;'s parent &lt;li&gt;.\n</code></pre>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Dave Ward",
                        "user_id": 60
                    },
                    "score": 81
                },
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Cascading_Style_Sheets#Limitations\">According to Wikipedia</a>:</p>\n\n<blockquote>\n  <p><strong>Selectors are unable to ascend</strong> </p>\n  \n  <blockquote>\n    <p>CSS offers no way to select a parent or ancestor of element that satisfies certain criteria. A more advanced selector scheme (such as XPath) would enable more sophisticated stylesheets. However, the major reasons for the CSS Working Group rejecting proposals for parent selectors are related to browser performance and incremental rendering issues.</p>\n  </blockquote>\n</blockquote>\n\n<p>And for anyone searching SO in future, this might also be referred to as an ancestor selector.</p>\n\n<p><strong>Update:</strong> </p>\n\n<p>The <a href=\"http://www.w3.org/TR/2011/WD-selectors4-20110929/#subject\">Selectors Level 4 Spec</a> allows you to select which part of the select is the subject:</p>\n\n<blockquote>\n  <p>The subject of the selector can be explicitly identified by prepending\n  a dollar sign ($) to one of the compound selectors in a selector.\n  Although the element structure that the selector represents is the\n  same with or without the dollar sign, indicating the subject in this\n  way can change which compound selector represents the subject in that\n  structure.</p>\n  \n  <p><strong>Example 1:</strong></p>\n  \n  <p>For example, the following selector represents a list item LI unique child of\n  an ordered list OL:</p>\n\n<pre><code>OL &gt; LI:only-child\n</code></pre>\n  \n  <p>However the following one represents an ordered list OL having a unique child,\n  that child being a LI:</p>\n\n<pre><code>$OL &gt; LI:only-child\n</code></pre>\n  \n  <p>The structures represented by these two selectors are the same,\n  but the subjects of the selectors are not.</p>\n</blockquote>\n\n<p>Although this isn't available (currently, November 2011) in any browser or as a selector in jQuery.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Sam Hasler",
                        "user_id": 2541
                    },
                    "score": 176
                },
                {
                    "body": "<p>I had the same problem with Drupal. Given the limitations of CSS, the way to get this working is to add the \"active\" class to the parent elements when the menu HTML is generated. There's a good discussion of this at <a href=\"http://drupal.org/node/219804\" rel=\"nofollow\">http://drupal.org/node/219804</a>, the upshot of which is that this functionality has been rolled in to version 6.x-2.x of the nicemenus module. As this is still in development, I've backported the patch to 6.x-1.3 at <a href=\"http://drupal.org/node/465738\" rel=\"nofollow\">http://drupal.org/node/465738</a> so that I can continue to use the production-ready version of the module.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Mark B",
                        "user_id": 108756
                    },
                    "score": 1
                },
                {
                    "body": "<p>Late to the party again but for what it's worth it is possible using jQuery to be a little more succinct. In my case I needed to find the <code>&lt;ul&gt;</code> parent tag for a <code>&lt;span&gt;</code> tag contained in the child <code>&lt;li&gt;</code>. jQuery has the <code>:has</code> selector so it's possible to identify a parent by the children it contains:</p>\n\n<pre><code>$(\"ul:has(#someId)\")\n</code></pre>\n\n<p>will select the <code>ul</code> element that has a child element with id <em>someId</em>. Or to answer the original question, something like the following should do the trick (untested):</p>\n\n<pre><code>$(\"li:has(.active)\")\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "David Clarke",
                        "user_id": 132599
                    },
                    "score": 30
                },
                {
                    "body": "<p>The first draft of <a href=\"http://www.w3.org/TR/2011/WD-selectors4-20110929\">Selectors Level 4</a> outlines a way to explicitly set the <em>subject</em> of a selector. This would allow the OP to style the list element with the selector <code>$li &gt; a.active</code></p>\n\n<p>From <a href=\"http://www.w3.org/TR/2011/WD-selectors4-20110929/#subject\">Determining the Subject of a Selector</a>:</p>\n\n<blockquote>\n  <p>For example, the following selector represents a list item LI unique child of an ordered list OL: </p>\n  \n  <p><code>OL &gt; LI:only-child</code></p>\n  \n  <p>However the following one represents an ordered list OL having a unique child, that child being a LI:</p>\n  \n  <p><code>$OL &gt; LI:only-child</code></p>\n  \n  <p>The structures represented by these two selectors are the same, but the subjects of the selectors are not.</p>\n</blockquote>\n\n<p><em>Edit: Given how \"drafty\" a draft spec can be, it's best to keep tabs on this by checking the <a href=\"http://wiki.csswg.org/spec/selectors4\">CSSWG's page on selectors level 4</a>.</em></p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "btlachance",
                        "user_id": 168645
                    },
                    "score": 12
                },
                {
                    "body": "<p>I actually ran into the same issue as the original poster.  There is a simple solution of just using .parent() jQuery selector.  My problem was, I was using .parent instead of .parent(). Stupid mistake I know.</p>\n\n<p>Bind the events (in this case since my tabs are in Modal I needed to bind them with .live instead of a basic .click.</p>\n\n<pre><code>$('#testTab1 .tabLink').live('click', function() {\n    $('#modal ul.tabs li').removeClass(\"current\"); //Remove any \"current\" class\n    $(this).parent().addClass(\"current\"); //Add \"current\" class to selected tab\n    $('#modal div#testTab1 .tabContent').hide();\n    $(this).next('.tabContent').fadeIn();   \n    return false;\n})\n$('#testTab2 .tabLink').live('click', function() {\n    $('#modal ul.tabs li').removeClass(\"current\"); //Remove any \"current\" class\n    $(this).parent().addClass(\"current\"); //Add \"current\" class to selected tab\n    $('#modal div#testTab2 .tabContent').hide();\n    $(this).next('.tabContent').fadeIn();   \n    return false;\n})\n</code></pre>\n\n<p>Here is the HTML..</p>\n\n<pre><code>          &lt;div id=\"tabView1\" style=\"display:none;\"&gt;    \n          &lt;!-- start: the code for tabView 1 --&gt;\n            &lt;div id=\"testTab1\" style=\"width:1080px; height:640px; position:relative;\"&gt;\n              &lt;h1 class=\"Bold_Gray_45px\"&gt;Modal Header&lt;/h1&gt;\n              &lt;div class=\"tabBleed\"&gt;&lt;/div&gt;\n              &lt;ul class=\"tabs\"&gt;\n                &lt;li class=\"current\"&gt; &lt;a href=\"#\" class=\"tabLink\" id=\"link1\"&gt;Tab Title Link&lt;/a&gt;\n                  &lt;div class=\"tabContent\" id=\"tabContent1-1\"&gt;\n                    &lt;div class=\"modalCol\"&gt;\n                      &lt;p&gt;Your Tab Content&lt;/p&gt;\n                      &lt;p&gt;&lt;a href=\"#\" class=\"tabShopLink\"&gt;tabBased Anchor Link&lt;/a&gt; &lt;/p&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"tabsImg\"&gt; &lt;/div&gt;\n                  &lt;/div&gt;\n                &lt;/li&gt;\n                &lt;li&gt; &lt;a href=\"#\" class=\"tabLink\" id=\"link2\"&gt;Tab Title Link&lt;/a&gt;\n                  &lt;div class=\"tabContent\" id=\"tabContent1-2\"&gt;       \n                    &lt;div class=\"modalCol\"&gt;\n                      &lt;p&gt;Your Tab Content&lt;/p&gt;\n                      &lt;p&gt;&lt;a href=\"#\" class=\"tabShopLink\"&gt;tabBased Anchor Link&lt;/a&gt; &lt;/p&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"tabsImg\"&gt; &lt;/div&gt;\n                  &lt;/div&gt;\n                &lt;/li&gt;\n              &lt;/ul&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n</code></pre>\n\n<p>Of course you can repeat that pattern..with more LI's</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "jdrefahl",
                        "user_id": 624790
                    },
                    "score": 1
                },
                {
                    "body": "<p>Another thought occurred to me just now that could be a pure CSS solution. Display your active class as an absolutely positioned block and set its style to cover up the parent li.</p>\n\n<pre><code>a.active {\n   position:absolute;\n   display:block;\n   width:100%;\n   height:100%;\n   top:0em;\n   left:0em;\n   background-color: whatever;\n   border: whatever;\n}\n/* will also need to make sure the parent li is a positioned element so... */\nul.menu li {\n    position:relative;\n}    \n</code></pre>\n\n<p>For those of you who want to use javascript without jquery...</p>\n\n<p>Selecting the parent is trivial. You need a <code>getElementsByClass</code> function of some sort, unless you can get your drupal plugin to assign the active item an ID instead of Class. The function I provided I grabbed from some other genius on SO. It works well, just keep in mind when you're debugging that the function will always return an array of nodes, not just a single node.</p>\n\n<pre><code>active_li = getElementsByClass(\"active\",\"a\");\nactive_li[0].parentNode.style.whatever=\"whatever\";\n\nfunction getElementsByClass(node,searchClass,tag) {\n    var classElements = new Array();\n    var els = node.getElementsByTagName(tag); // use \"*\" for all elements\n    var elsLen = els.length;\n    var pattern = new RegExp(\"\\\\b\"+searchClass+\"\\\\b\");\n    for (i = 0, j = 0; i &lt; elsLen; i++) {\n       if ( pattern.test(els[i].className) ) {\n       classElements[j] = els[i];\n       j++;\n   }\n}\nreturn classElements;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Jared",
                        "user_id": 1184883
                    },
                    "score": 1
                },
                {
                    "body": "<p>While it is true that CSS cannot ASCEND, it is incorrect that you cannot grab the parent element of another element. Let me reiterate:</p>\n\n<p>Using your HTML example code, you are able to grab the li without specifying li</p>\n\n<pre><code>ul * a {\n    property:value;\n}\n</code></pre>\n\n<p>In this example, the ul is the parent of some element and that element is the parent of anchor. The downside of using this method is that if there is a ul with any child element that contains an anchor, it inherits the styles specified.</p>\n\n<p>You may also use the child selector as well since you'll have to specify the parent element anyway.</p>\n\n<pre><code>ul&gt;li a {\n    property:value;\n}\n</code></pre>\n\n<p>In this example, the anchor must be a descendant of an li that MUST be a child of ul, meaning it must be within the tree following the ul declaration. This is going to be a bit more specific and will only grab a list item that contains an anchor AND is a child of ul.</p>\n\n<p>SO, to answer your question by code.</p>\n\n<pre><code>ul.menu &gt; li a.active {\n    property:value;\n}\n</code></pre>\n\n<p>This should grab the ul with the class of menu, and the child list item that contains only an anchor with the class of active.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Matt Wagner",
                        "user_id": 1445647
                    },
                    "score": -1
                },
                {
                    "body": "<h3>THE \u201cPARENT\u201d SELECTOR</h3>\n\n<p>Right now, there is no option to select the parent of an element in CSS (not even CSS3). But with <strong>CSS4</strong>, the most important news in the current W3C draft is the support for the parent selector.</p>\n\n<pre><code>$ul li:hover{\n    background: #fff;\n}\n</code></pre>\n\n<p>Using the above, when hovering an list element, the whole unordered list will be highlighted by adding a white background to it.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Praveen Kumar",
                        "user_id": 462627
                    },
                    "score": 6
                },
                {
                    "body": "<p>Many people answered with <code>jQuery</code> parent, but just to add on to that I wanted to share a quick snippet of code that I use for adding classes to my navs so I can add styling to <code>li</code>'s that only have sub-menus and not <code>li</code>'s that don't.</p>\n\n<pre><code>$(\"li ul\").parent().addClass('has-sub');\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Minty Stark",
                        "user_id": 2017192
                    },
                    "score": 1
                }
            ],
            "body": "<p>Is there a way to select a parent element based on the class of a child element in the class?  The example that is relevant to me relating to HTML output by a nice menu plugin for <a href=\"http://drupal.org\">http://drupal.org</a>.  The output renders like this:  </p>\n\n<pre><code>&lt;ul class=\"menu\"&gt;  \n    &lt;li&gt;  \n        &lt;a class=\"active\"&gt;Active Page&lt;/a&gt;  \n    &lt;/li&gt;  \n    &lt;li&gt;    \n        &lt;a&gt;Some Other Page&lt;/a&gt;  \n    &lt;/li&gt;  \n&lt;/ul&gt;\n</code></pre>\n\n<p>My question is whether or not it is possible to apply a style to the list item that contains the anchor with the active class on it.  Obviously, I'd prefer that the list item be marked as active, but I don't have control of the code that gets produced.  I could perform this sort of thing using javascript (JQuery springs to mind), but I was wondering if there is a way to do this using CSS selectors.</p>\n\n<p>Just to be clear, I want to apply a style to the list item, not the anchor.</p>\n",
            "last_activity_date": 1359356992,
            "owner": {
                "display_name": "Deeksy",
                "user_id": 4640
            },
            "question_id": 45004,
            "score": 171,
            "tags": [
                "css",
                "css-selectors"
            ],
            "title": "Complex CSS selector for parent of active child"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>A bit late, but this could also be useful. There is an IE filter, for IE 5.5+, which you can apply:</p>\n\n<pre><code>filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(\nsrc='images/logo.gif',\nsizingMethod='scale');\n\n-ms-filter: \"progid:DXImageTransform.Microsoft.AlphaImageLoader(\nsrc='images/logo.gif',\nsizingMethod='scale')\";\n</code></pre>\n\n<p>However, this scales the entire image to fit in the allocated area, so if you're using a sprite, this may cause issues.</p>\n\n<p>Specification: <a href=\"http://msdn.microsoft.com/en-us/library/ms532969%28v=vs.85%29.aspx\">AlphaImageLoader Filter @microsoft</a></p>\n",
                    "is_accepted": true,
                    "owner": {
                        "display_name": "Dan",
                        "user_id": 605812
                    },
                    "score": 282
                },
                {
                    "body": "<p>Even later, but this could be usefull too. There is the jQuery-backstretch-plugin you can use as a polyfill for background-size: cover. I guess it must be possible (and fairly simple) to grab the css-background-url property with jQuery and feed it to the jQuery-backstretch plugin. Good practice would be to test for background-size-support with modernizr and use this plugin as a fallback.</p>\n\n<p>The backstretch-plugin was mentioned on SO <a href=\"http://stackoverflow.com/questions/7572432/css-background-sizing-polyfill\">here</a>.The jQuery-backstretch-plugin-site is <a href=\"http://srobbin.com/jquery-plugins/jquery-backstretch/\">here</a>.</p>\n\n<p>In similar fashion you could make a jQuery-plugin or script that makes background-size work in your situation (background-size: 100%) and in IE8-. So to answer your question: Yes there is a way but atm there is no plug-and-play solution (ie you have to do some coding yourself).</p>\n\n<p>(disclaimer: I didn't examine the backstretch-plugin thoroughly but it seems to do the same as background-size: cover)</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "metatron",
                        "user_id": 314565
                    },
                    "score": 5
                },
                {
                    "body": "<p>I created <a href=\"https://github.com/louisremi/jquery.backgroundSize.js\">jquery.backgroundSize.js</a>: a 1.5K jquery plugin that can be used as a IE8 fallback for \"cover\" and \"contain\" values. Have a look at the <a href=\"http://louisremi.github.com/jquery.backgroundSize.js/demo/\">demo</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Louis-R&#233;mi",
                        "user_id": 867402
                    },
                    "score": 43
                },
                {
                    "body": "<p>Thanks to this post, my full css for cross browser happiness is:</p>\n\n<pre><code>&lt;style&gt;\n    .backgroundpic {\n        background-image: url('img/home.jpg');\n        background-size: cover;\n        filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(\n        src='img/home.jpg',\n        sizingMethod='scale');\n    }\n&lt;/style&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Scott Dallas",
                        "user_id": 1997664
                    },
                    "score": 14
                },
                {
                    "body": "<p>There is a good polyfill for that: <a href=\"https://github.com/louisremi/background-size-polyfill\" rel=\"nofollow\">louisremi/background-size-polyfill</a></p>\n\n<p>To quote the documentation:</p>\n\n<blockquote>\n  <p>Upload backgroundsize.min.htc to your website, along with the\n  .htaccess that will send the mime-type required by IE (Apache only \u2014\n  it's built in nginx, node and IIS).</p>\n  \n  <p>Everywhere you use background-size in your CSS, add a reference to\n  this file.</p>\n\n<pre><code>.selector { \n    background-size: cover;\n    /* The url is relative to the document, not to the css file! */\n    /* Prefer absolute urls to avoid confusion. */\n    -ms-behavior: url(/backgroundsize.min.htc);\n}\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Dorian",
                        "user_id": 407213
                    },
                    "score": 3
                },
                {
                    "body": "<p>This is double-standards test \u21162 (since Andrew Barber didn't bothered to explain the difference).\nI trying to understand what links can be left and what no, based on Louis-R\u00e9mi answer.\n<img src=\"http://i.stack.imgur.com/wZCgQ.png\" alt=\"Louis-R\u00e9mi answer\"></p>\n\n<p>I created <a href=\"https://github.com/Metafalica/background-size-emu\" rel=\"nofollow\">background-size-emu</a>: a <strong>15K pure JS library</strong> that can be used as a <strong>IE6 - IE8 fallback for background-size</strong> values. Have a look at the <a href=\"https://github.com/Metafalica/background-size-emu/blob/master/test.html\" rel=\"nofollow\">demo</a>.</p>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Kosmos",
                        "user_id": 1154283
                    },
                    "score": -1
                },
                {
                    "body": "<p>I think the best way is adding following line in top of your HTML file. \nit works fine for me!</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "owner": {
                        "display_name": "Alireza815",
                        "user_id": 2035732
                    },
                    "score": -2
                }
            ],
            "body": "<p>Is there any known way to make the CSS style <code>background-size</code> work in IE?</p>\n",
            "last_activity_date": 1420753423,
            "owner": {
                "display_name": "JD Isaacks",
                "user_id": 46011
            },
            "question_id": 2991623,
            "score": 158,
            "tags": [
                "css",
                "internet-explorer"
            ],
            "title": "How do I make background-size work in IE?"
        }
    ]
}
