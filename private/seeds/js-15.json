{
    "items": [
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Unfortunately, there is no cross-browser support for opening a confirmation dialog that is not the default OK/Cancel pair.  The solution you provided uses VBScript, which is only available in IE.</p>\n\n<p>I would suggest using a Javascript library that can build a DOM-based dialog instead.  Try Jquery UI: <a href=\"http://jqueryui.com/\">http://jqueryui.com/</a></p>\n",
                    "is_accepted": true,
                    "score": 68
                },
                {
                    "body": "<p>The only way you can accomplish this in a cross-browser way is to use a framework like jQuery UI and create a custom Dialog:</p>\n\n<p><strong><a href=\"http://jqueryui.com/demos/dialog/\" rel=\"nofollow\">jquery Dialog</a></strong></p>\n\n<p>It doesn't work in exactly the same way as the built-in confirm popup but you should be able to make it do what you want.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You can't do this cross-browser with the confirm() function or similar. I highly suggest you use something like the <a href=\"http://docs.jquery.com/UI/Dialog\" rel=\"nofollow\">jQuery UI dialog</a> feature to create an HTML dialog box instead.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can also use <a href=\"http://projectshadowlight.org/jquery-easy-confirm-dialog/\">http://projectshadowlight.org/jquery-easy-confirm-dialog/</a> . It's very simple and easy to use. Just include jquery common library and one more file only:</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/jquery-ui.min.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.1/themes/blitzer/jquery-ui.css\" type=\"text/css\" /&gt;\n&lt;script src=\"jquery.easy-confirm-dialog.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>the very specific answer to the point is confirm dialogue\nJs Function:</p>\n\n<pre><code>confirm('Do you really want to do so');\n</code></pre>\n\n<p>It show dialogue box with ok cancel buttons,to replace these button with yes no is not so simple task,for that you need to write jQuery function.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have a look at <a href=\"http://bootboxjs.com/\" rel=\"nofollow\">http://bootboxjs.com/</a> </p>\n\n<p>Very easy to use:</p>\n\n<pre><code> bootbox.confirm(\"Are you sure?\", function(result) {\n  Example.show(\"Confirm result: \"+result);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Javascript Confirm popup, I want to show Yes, No button instead of OK and Cancel.</p>\n\n<p>I have used this vbscript code:</p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\n    function window.confirm(str) {\n        execScript('n = msgbox(\"' + str + '\",\"4132\")', \"vbscript\");\n        return (n == 6);\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>this only works in IE, In FF and Chrome, it doesn't work.</p>\n\n<p>Is there any workround to achieve this in Javascript?</p>\n\n<p>I also want to change the title of popup like in IE 'Windows Internet Explorer' is shown, I want to show here my own application name.</p>\n",
            "last_activity_date": 1416559220,
            "question_id": 823790,
            "score": 66,
            "tags": [
                "javascript",
                "html",
                "button",
                "popup",
                "confirm"
            ],
            "title": "Javascript Confirm popup Yes, No button instead of OK and Cancel"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>I have just solved the problem. There was something causing problems with a standard Request call, so this is the code I used instead:</p>\n\n<pre><code>vote.each(function(element){                \n  element.addEvent('submit', function(e){\n    e.stop();\n    new Request.JSON({\n      url : e.target.action, \n      onRequest : function(){\n        spinner.show();\n      },\n      onComplete : function(){\n        spinner.hide();\n      },\n      onSuccess : function(resp){\n        var j = resp;\n        if (!j) return false;\n        var restaurant = element.getParent('.restaurant');\n        restaurant.getElements('.votes')[0].set('html', j.votes + \" vote(s)\");\n        $$('#restaurants .restaurant').pop().set('html', \"Total Votes: \" + j.totalvotes);\n        buildRestaurantGraphs();\n      }\n    }).send(this);\n  });\n});\n</code></pre>\n\n<p>If anyone knows why the standard Request object was giving me problems I would love to know.</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>Just an FYI for people who might have the same problem -- I just had to make my server send back the JSON as application/json and the default jQuery handler worked fine.</p>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>This has just happened to me, and the reason was none of the reasons above. I was using the jQuery command getJSON and adding <code>callback=?</code> to use JSONP (as I needed to go cross-domain), and returning the JSON code <code>{\"foo\":\"bar\"}</code> and getting the error.</p>\n\n<p>This is because I should have included the callback data, something like <code>jQuery17209314005577471107_1335958194322({\"foo\":\"bar\"})</code></p>\n\n<p>Here is the PHP code I used to achieve this, which degrades if JSON (without a callback) is used:</p>\n\n<pre><code>$ret['foo'] = \"bar\";\nfinish();\n\nfunction finish() {\n    header(\"content-type:application/json\");\n    if ($_GET['callback']) {\n        print $_GET['callback'].\"(\";\n    }\n    print json_encode($GLOBALS['ret']);\n    if ($_GET['callback']) {\n        print \")\";\n    }\n    exit; \n}\n</code></pre>\n\n<p>Hopefully that will help someone in the future.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I got a  \"<code>SyntaxError: Unexpected token I</code>\" when I used <code>jQuery.getJSON()</code> to try to de-serialize a floating point value of <code>Infinity</code>, encoded as <code>INF</code>, which is illegal in JSON.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Uncaught SyntaxError: Unexpected token }</strong> </p>\n\n<p>Chrome gaved me the error for this sample code:</p>\n\n<pre><code>&lt;div class=\"file-square\" onclick=\"window.location = \" ?dir=zzz\"&gt;\n    &lt;div class=\"square-icon\"&gt;&lt;/div&gt;\n    &lt;div class=\"square-text\"&gt;zzz&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>and solved it fixing the onclick to be like</p>\n\n<pre><code>... onclick=\"window.location = '?dir=zzz'\" ...\n</code></pre>\n\n<p>But the error has nothing to do with the problem..</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the same problem and it turned out that the Json returned from the server\nwasn't valid Json-P. If you don't use the call as a crossdomain call use regular Json.</p>\n\n<p><a href=\"http://json-p.org/validator.html\" rel=\"nofollow\">http://json-p.org/validator.html</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I thought I'd add my issue and resolution to the list.</p>\n\n<p>I was getting: <code>Uncaught SyntaxError: Unexpected token &lt;</code> and the error was pointing to this line in my ajax success statement:</p>\n\n<pre><code>var total = $.parseJSON(response);\n</code></pre>\n\n<p>I later found that in addition to the json results, there was HTML being sent with the response because I had an error in my PHP.  When you get an error in PHP you can set it to warn you with huge orange tables and those tables were what was throwing off the JSON.</p>\n\n<p>I found that out by just doing a <code>console.log(response)</code> in order to see what was actually being sent.  If it's an issue with the JSON data, just try to see if you can do a console.log or some other statement that will allow you to see what is sent and what is received.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Seeing red errors </p>\n\n<blockquote>\n  <p>Uncaught SyntaxError: Unexpected token &lt;</p>\n</blockquote>\n\n<p>in your Chrome developer's console tab is often an indication of <strong>301 Redirects</strong> that could be caused by having a strange rule in your .htaccess file. </p>\n\n<p>What you're actually seeing is your browser's reaction to the unexpected top line <code>&lt;!DOCTYPE html&gt;</code> from the server.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I am running an AJAX call in my MooTools script, this works fine in Firefox but in Chrome I am getting a <code>Uncaught SyntaxError: Unexpected token :</code> error, I cannot determine why. Commenting out code to determine where the bad code is yields nothing, I am thinking it may be a problem with the JSON being returned. Checking in the console I see the JSON returned is this:</p>\n\n<pre><code>{\"votes\":47,\"totalvotes\":90}\n</code></pre>\n\n<p>I don't see any problems with it, why would this error occur?</p>\n\n<pre><code>vote.each(function(e){\n  e.set('send', {\n    onRequest : function(){\n      spinner.show();\n    },\n    onComplete : function(){\n      spinner.hide();\n    },\n    onSuccess : function(resp){\n      var j = JSON.decode(resp);\n      if (!j) return false;\n      var restaurant = e.getParent('.restaurant');\n      restaurant.getElements('.votes')[0].set('html', j.votes + \" vote(s)\");\n      $$('#restaurants .restaurant').pop().set('html', \"Total Votes: \" + j.totalvotes);\n      buildRestaurantGraphs();\n    }\n  });\n\n  e.addEvent('submit', function(e){\n    e.stop();\n    this.send();\n  });\n});\n</code></pre>\n",
            "last_activity_date": 1414519018,
            "question_id": 3143698,
            "score": 65,
            "tags": [
                "javascript",
                "mootools",
                "google-chrome"
            ],
            "title": "Uncaught SyntaxError: Unexpected token :"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Short of using the libraries that you described in your question, I don't think you can do curved corners in IE8.</p>\n\n<p>If you really wanted them, you could probably use an image to give the curved corner effect, at the cost of increased bandwidth and messy code.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I have used the <a href=\"http://code.google.com/p/curved-corner/downloads/detail?name=border-radius.htc\" rel=\"nofollow\">border-radius.htc</a> in the past.  </p>\n\n<p>The only pain is that the CSS Urls are relative to the CSS file.  HTC are relative to the page.</p>\n\n<p><a href=\"http://code.google.com/p/curved-corner/downloads/detail?name=border-radius-demo.zip\" rel=\"nofollow\">you can download the demo here.</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>According to <a href=\"http://msdn.microsoft.com/en-us/library/bb250413%28v=vs.85%29.aspx\">Microsoft</a>: </p>\n\n<p><strong>Other Rounded Corners Solutions</strong></p>\n\n<p>We would like to point out the abundance of alternate solutions available on the Web. In addition to individual rounded corners solutions, there are also sites with frequently updated lists of rounded corners solutions that are compatible with multiple versions of Internet Explorer and other browsers.</p>\n\n<p>Listed here are a few of our favorite sites for aggregated rounded corners solutions. They are presented in no particular order, and the inclusion of any link does not imply endorsement by Microsoft of the site.</p>\n\n<ul>\n<li><p>CSS-Discuss Wiki, RoundedCorners:\n<a href=\"http://css-discuss.incutio.com/?page=RoundedCorners\">http://css-discuss.incutio.com/?page=RoundedCorners</a></p></li>\n<li><p>SmileyCat, CSS Rounded Corners \"Roundup\":\n<a href=\"http://www.smileycat.com/miaow/archives/000044.php\">http://www.smileycat.com/miaow/archives/000044.php</a></p></li>\n<li><p>CSS Juice, 25 Rounded Corners Techniques with CSS:\n<a href=\"http://www.cssjuice.com/25-rounded-corners-\">http://www.cssjuice.com/25-rounded-corners-</a> techniques-with-css/</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Why don't you use css' :before and :after pseudo classes to add curved corners.</p>\n\n<p>Your comment on Tom Will's answer suggested that you have a lot of form inputs right?</p>\n\n<p>Well I assume that they will be mostly uniform in width.</p>\n\n<p>Just create some classes like <code>curved-std-width</code>, <code>curved-lge-width</code>, <code>curved-sml-width</code> and then you can do this in your CSS:</p>\n\n<pre><code>.curved-std-width:before {\n  height: 5px;\n  background: url('curved-top-5px.png');\n}\n\n.curved-std-width:after {\n  height: 5px;\n  background: url('curved-bottom-5px.png');\n}\n</code></pre>\n\n<p>Something like that should work pretty well without you having to go and add endless html before and after form inputs.</p>\n\n<p>Otherwise you can probably do it using jQuery as well:</p>\n\n<pre><code>$(':input').before('&lt;div class=\"left-top-corner\"&gt;&lt;/div&gt;&lt;div class=\"right-top-corner\"&gt;&lt;/div&gt;').after('&lt;div class=\"left-bottom-corner\"&gt;&lt;/div&gt;&lt;div class=\"right-bottom-corner\"&gt;&lt;/div&gt;');\n</code></pre>\n\n<p>And then style appropriately.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Why don't you use jQuery's <a href=\"http://jquery.malsup.com/corner/\" rel=\"nofollow\">corner plugin</a>?</p>\n\n<p>You can easily apply corners to any element with a specific classname or ID; for example:</p>\n\n<pre><code>$(\"#box1\").corner();\n</code></pre>\n\n<p>It also allows you to decorate or modify the type of corner effect you want adorning your elements.  </p>\n\n<p>You can also use other JavaScript solutions like <a href=\"http://www.curvycorners.net/\" rel=\"nofollow\">CurvyCorners</a> or even some <a href=\"http://www.cssjuice.com/25-rounded-corners-\" rel=\"nofollow\">CSS solutions</a>.  Another option is to use JavaScript to wrap <code>&lt;div&gt;</code>  elements your form inputs and use CSS's background-image to emulate the look of rounded corners.  For instructions on this last solution, see <a href=\"http://www.sitepoint.com/rounded-corners-css-javascript/\" rel=\"nofollow\">this tutorial</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I would recommend giving <a href=\"http://www.modernizr.com/\" rel=\"nofollow\">Modernizr</a> a go, the great thing about it is you can use it to substitute most (if not all) unsupported CSS3 in older browsers. I have used it on a number of large web apps without any dramas. </p>\n\n<p>You can also look at the <a href=\"http://www.jqueryui.com\" rel=\"nofollow\">jQuery UI library</a> that I believe has some rounded corners scripts. </p>\n\n<p>I hope this helps... good luck! </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is ugly but might work if you know beforehand the background color of the input fields (which can be a problem with submit buttons): <a href=\"http://jsfiddle.net/563c5/1/\" rel=\"nofollow\">http://jsfiddle.net/563c5/1/</a></p>\n\n<p>I have no idea how it will behave when rendering lots of input fields in an average computer. </p>\n\n<p>IE8 supports inline CSS images, and you need only 1 small image for all four rounded corners. Any solution relying on corner images may actually require just a few extra bytes of bandwidth.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>you should use the alternate pie.htc, its similar thing but less buggy, and either way i don't recommend it. </p>\n\n<p>Heavy use of css3 elements on these non css3 comply browsers, don't perform good, chances is that their system are not up to date too causing them extremely laggy. So it is good for them to degradation to a normal corner. </p>\n\n<p>If you really want it to look good on ie, you best of using image sprite backgrounds, or you going to change to drive away a number of your visitors for lagging issues.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Not sure if it was covered by previous contributors, but I used mainly dd_roundies library, and for rounded corners alone it worked ok. Mixing corners with IE filters usually was too much to ask though.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Have you tried this: <a href=\"http://jquery.malsup.com/corner/\" rel=\"nofollow\">http://jquery.malsup.com/corner/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this:</p>\n\n<p>requires:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"http://malsup.github.com/jquery.corner.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>$('.box').corner();\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"box\"&gt;Hello&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>box{\n  width:150px;\n  height:28px;\n  padding:10px;\n}\n</code></pre>\n\n<p>more examples:\n<a href=\"http://jquery.malsup.com/corner/\">http://jquery.malsup.com/corner/</a></p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p><strong>Use this :</strong> <a href=\"http://css3pie.com/\" rel=\"nofollow\">http://css3pie.com/</a></p>\n\n<p>PIE makes Internet Explorer 6-9 capable of rendering several of the most useful CSS3 decoration features.</p>\n\n<p><strong>Supported CSS3 Features</strong></p>\n\n<pre><code>border-radius\nbox-shadow\nborder-image\nmultiple background images\nlinear-gradient as background image\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use image with round corner to border a div. Example: </p>\n\n<p><a href=\"http://www.webcredible.co.uk/user-friendly-resources/css/css-round-corners-borders.shtml\" rel=\"nofollow\">http://www.webcredible.co.uk/user-friendly-resources/css/css-round-corners-borders.shtml</a></p>\n\n<p>Or you make some magic like:</p>\n\n<p><a href=\"http://www.gmarwaha.com/blog/2007/08/23/lavalamp-for-jquery-lovers/\" rel=\"nofollow\">http://www.gmarwaha.com/blog/2007/08/23/lavalamp-for-jquery-lovers/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Check out this post: <a href=\"http://www.smashingmagazine.com/2010/04/28/css3-solutions-for-internet-explorer/\">http://www.smashingmagazine.com/2010/04/28/css3-solutions-for-internet-explorer/</a></p>\n\n<p>It covers specifically rounded corners and box shadow in IE7/8.</p>\n\n<p>and also below with so many examples</p>\n\n<p><a href=\"http://blue-anvil.com/jquerycurvycorners/test.html\">http://blue-anvil.com/jquerycurvycorners/test.html</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just another JavaScript-based solution: <a href=\"http://www.html.it/articoli/esempi/articoli_pro/niftycube/index.html\" rel=\"nofollow\">Nifty Corners Cube</a>. It is released as GNU GPL and doesn't need jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use this code to get rounded corner in IE 6+</p>\n\n<pre><code>&lt;script type=\"text/JavaScript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/JavaScript\" src=\"http://malsup.github.com/jquery.corner.js&lt;/script&gt;\n&lt;script&gt;\n    $('#logo-navsection').corner( function() {\n        $(\"this\").css(\"border-top\", \"0px 0px opx 10px\")                \n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a problem with border radius on IE8, till now I used pie.js but I don't recommend this js library because is buggy. If you have a small site with not many html pages, it is more than ok to use that library, but if you have a heavy application in which many different frameworks are used, then is impossible to use that. Same behavior for CurvyCorners or other mega libraries. </p>\n\n<p>So if anyone can help me with a small jQuery or javascript plugin to do just border-radius on IE 8 I'll be grateful for life.</p>\n",
            "last_activity_date": 1393443965,
            "question_id": 9426979,
            "score": 33,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "internet-explorer-8",
                "css3"
            ],
            "title": "Border Radius for IE8"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "\n\n<pre><code>//global savedrange variable to store text range in\nvar savedrange = null;\n\nfunction getSelection()\n{\n    var savedRange;\n    if(window.getSelection &amp;&amp; window.getSelection().rangeCount &gt; 0) //FF,Chrome,Opera,Safari,IE9+\n    {\n        savedRange = window.getSelection().getRangeAt(0).cloneRange();\n    }\n    else if(document.selection)//IE 8 and lower\n    { \n        savedRange = document.selection.createRange();\n    }\n    return savedRange;\n}\n\n$('#contentbox').keyup(function() { \n    var currentRange = getSelection();\n    if(window.getSelection)\n    {\n        //do stuff with standards based object\n    }\n    else if(document.selection)\n    { \n        //do stuff with microsoft object (ie8 and lower)\n    }\n});\n</code></pre>\n\n<p>Note: the range object its self can be stored in a variable, and can be re-selected at any time unless the contents of the contenteditable div change.</p>\n\n<p>Reference for IE 8 and lower:\n<a href=\"http://msdn.microsoft.com/en-us/library/ms535872(VS.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ms535872(VS.85).aspx</a></p>\n\n<p>Reference for standards (all other) browsers:\n<a href=\"https://developer.mozilla.org/en/DOM/range\" rel=\"nofollow\">https://developer.mozilla.org/en/DOM/range</a> (its the mozilla docs, but code works in chrome, safari, opera and ie9 too)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The following code assumes:</p>\n\n<ul>\n<li>There is always a single text node within the editable <code>&lt;div&gt;</code> and no other nodes</li>\n<li>The editable div does not have the CSS <code>white-space</code> property set to <code>pre</code></li>\n</ul>\n\n<p>Code:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function getCaretPosition(editableDiv) {\r\n  var caretPos = 0,\r\n    sel, range;\r\n  if (window.getSelection) {\r\n    sel = window.getSelection();\r\n    if (sel.rangeCount) {\r\n      range = sel.getRangeAt(0);\r\n      if (range.commonAncestorContainer.parentNode == editableDiv) {\r\n        caretPos = range.endOffset;\r\n      }\r\n    }\r\n  } else if (document.selection &amp;&amp; document.selection.createRange) {\r\n    range = document.selection.createRange();\r\n    if (range.parentElement() == editableDiv) {\r\n      var tempEl = document.createElement(\"span\");\r\n      editableDiv.insertBefore(tempEl, editableDiv.firstChild);\r\n      var tempRange = range.duplicate();\r\n      tempRange.moveToElementText(tempEl);\r\n      tempRange.setEndPoint(\"EndToEnd\", range);\r\n      caretPos = tempRange.text.length;\r\n    }\r\n  }\r\n  return caretPos;\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#caretposition {\r\n  font-weight: bold;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"contentbox\" contenteditable=\"true\"&gt;Click me and move cursor with keys or mouse&lt;/div&gt;\r\n&lt;div id=\"caretposition\"&gt;0&lt;/div&gt;\r\n&lt;script&gt;\r\n  var update = function() {\r\n    $('#caretposition').html(getCaretPosition(this));\r\n  };\r\n  $('#contentbox').on(\"mousedown mouseup keydown keyup\", update);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>Try this:</p>\n\n<p>Caret.js\nGet caret postion and offset from text field</p>\n\n<p><a href=\"https://github.com/ichord/Caret.js\" rel=\"nofollow\">https://github.com/ichord/Caret.js</a></p>\n\n<p>demo:\n<a href=\"http://ichord.github.com/Caret.js\" rel=\"nofollow\">http://ichord.github.com/Caret.js</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm finding tons of good, crossbrowser anwers on how to SET the cursor or caret position in a contentEditable DIV, but none on how to GET or find its position...</p>\n\n<p>What I want to do is know the position of the caret within this div, on keyup. </p>\n\n<p>So, when the user is typing text, I can at any point know its cursor's position within the div.</p>\n\n<p>EDIT: I'm looking for the INDEX within the div contents (text), not the cursor coordinates.</p>\n\n<pre><code>&lt;div id=\"contentBox\" contentEditable=\"true\"&gt;&lt;/div&gt;\n\n$('#contentbox').keyup(function() { \n    // ... ? \n});\n</code></pre>\n",
            "last_activity_date": 1417691601,
            "question_id": 3972014,
            "score": 28,
            "tags": [
                "javascript",
                "contenteditable",
                "caret",
                "cursor-position"
            ],
            "title": "Get caret position in contentEditable div"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>That is the <a href=\"http://www.c-point.com/javascript%5Ftutorial/jsoprurshift.htm\">unsigned right bit shift</a> operator. The difference between this and the <a href=\"http://www.c-point.com/javascript%5Ftutorial/jsoprrshift.htm\">signed right bit shift operator</a>, is that the <strong>unsigned</strong> right bit shift operator (<strong>>>></strong>) fills with zeroes from the left, and the <strong>signed</strong> right bit shift operator (<strong>>></strong>) fills with the sign bit, thus preserving the sign of the numerical value when shifted.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/1822350/what-is-the-javascript-operator-and-how-do-you-use-it/1822369#1822369\">Driis</a> has sufficiently explained what the operator is and what it does.  Here's the meaning behind it/why it was used:</p>\n\n<p>Shifting any direction by <code>0</code> does returns the original number and will cast <code>null</code> to <code>0</code>.  It seems that the example code that you are looking at is using <code>this.length &gt;&gt;&gt; 0</code> to ensure that <code>len</code> is numeric even if <code>this.length</code> is not defined.  </p>\n\n<p>For many people, bitwise operations are unclear (and Douglas Crockford/jslint suggests against using such things).  It doesn't mean that its wrong to do, but more favorable and familiar methods exist to make code more readable. A more clear way to ensure that <code>len</code> is <code>0</code> is either of the following two methods.</p>\n\n<pre><code>// Cast this.length to a number\nvar len = +this.length;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>// Cast this.length to a number, or use 0 if this.length is\n// NaN/undefined (evaluates to false)\nvar len = +this.length || 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>It doesn't just convert non-Numbers to Number, it converts them to Numbers that can be expressed as 32-bit unsigned ints.</p>\n\n<p>Although JavaScript's Numbers are double-precision floats(*), the bitwise operators (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>|</code> and <code>~</code>) are defined in terms of operations on 32-bit integers. Doing a bitwise operation converts the number to a 32-bit signed int, losing any fractions and higher-place bits than 32, before doing the calculation and then converting back to Number.</p>\n\n<p>So doing a bitwise operation with no actual effect, like a rightward-shift of 0 bits <code>&gt;&gt;0</code>, is a quick way to round a number and ensure it is in the 32-bit int range. Additionally, the triple <code>&gt;&gt;&gt;</code> operator, after doing its unsigned operation, converts the results of its calculation to Number as an unsigned integer rather than the signed integer the others do, so it can be used to convert negatives to the 32-bit-two's-complement version as a large Number. Using <code>&gt;&gt;&gt;0</code> ensures you've got an integer between 0 and 0xFFFFFFFF.</p>\n\n<p>In this case this is useful because ECMAScript defines Array indexes in terms of 32 bit unsigned ints. So if you're trying to implement <code>array.filter</code> in a way that exactly duplicates what the ECMAScript Fifth Edition standard says, you would cast the number to 32-bit unsigned int like this.</p>\n\n<p>(In reality there's little practical need for this as hopefully people aren't going to be setting <code>array.length</code> to <code>0.5</code>, <code>-1</code>, <code>1e21</code> or <code>'LEMONS'</code>. But this is JavaScript authors we're talking about, so you never know...)</p>\n\n<p>Summary:</p>\n\n<pre><code>1&gt;&gt;&gt;0            === 1\n-1&gt;&gt;&gt;0           === 0xFFFFFFFF          -1&gt;&gt;0    === -1\n1.7&gt;&gt;&gt;0          === 1\n0x100000002&gt;&gt;&gt;0  === 2\n1e21&gt;&gt;&gt;0         === 0xDEA00000          1e21&gt;&gt;0  === -0x21600000\nInfinity&gt;&gt;&gt;0     === 0\nNaN&gt;&gt;&gt;0          === 0\nnull&gt;&gt;&gt;0         === 0\n'1'&gt;&gt;&gt;0          === 1\n'x'&gt;&gt;&gt;0          === 0\nObject&gt;&gt;&gt;0       === 0\n</code></pre>\n\n<p>(*: well, they're defined as behaving like floats. It wouldn't surprise me if some JavaScript engine actually used ints when it could, for performance reasons. But that would be an implementation detail you wouldn't get to take any advantage of.)</p>\n",
                    "is_accepted": true,
                    "score": 59
                }
            ],
            "body": "<p>I was looking at code from Mozilla that add a filter method to Array and it had a line of code that confused me.</p>\n\n<pre><code>var len = this.length &gt;&gt;&gt; 0;\n</code></pre>\n\n<p>I have never seen >>> used in JavaScript before. <br>What is it and what does it do?</p>\n",
            "last_activity_date": 1271357145,
            "question_id": 1822350,
            "score": 33,
            "tags": [
                "javascript",
                "operators",
                "bit-shift"
            ],
            "title": "What is the JavaScript &gt;&gt;&gt; operator and how do you use it?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Because, at least in HTML 4.01 and XHTML 1(.1), the <code>type</code> attribute for <code>&lt;script&gt;</code> elements is <a href=\"http://www.w3.org/TR/html401/interact/scripts.html#adef-type-SCRIPT\">required</a>.</p>\n\n<p>In <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#script\">HTML 5</a>, <code>type</code> is no longer required.</p>\n\n<p>In fact, while you should use <code>text/javascript</code> in your HTML source, many servers will send the file with <code>Content-type: application/javascript</code>. Read more about these MIME types in <a href=\"http://www.ietf.org/rfc/rfc4329.txt\">RFC 4329</a>.</p>\n\n<p>Notice the difference between RFC 4329, that marked <code>text/javascript</code> as obsolete and recommending the use of <code>application/javascript</code>, and the reality in which some browsers freak out on <code>&lt;script&gt;</code> elements containing <code>type=\"application/javascript\"</code> (in HTML source, not the HTTP Content-type header of the file that gets send). Recently, there was a discussion on the WHATWG mailing list about this discrepancy (HTML 5's <code>type</code> defaults to <code>text/javascript</code>), read these messages with subject <a href=\"http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2010-April/thread.html#25810\">Will you consider about RFC 4329?</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p><a href=\"http://javascript.crockford.com/script.html\">Douglas Crockford says</a>:</p>\n\n<blockquote>\n  <p><code>type=\"text/javascript\"</code></p>\n  \n  <p>This attribute is optional. Since\n  Netscape 2, the default programming\n  language in all browsers has been\n  JavaScript. In XHTML, this attribute\n  is required and unnecessary. In HTML,\n  it is better to leave it out. The\n  browser knows what to do.</p>\n</blockquote>\n\n<p><a href=\"http://javascript.crockford.com/style1.html\">He also says:</a></p>\n\n<blockquote>\n  <p>W3C did not adopt the <code>language</code>\n  attribute, favoring instead a <code>type</code>\n  attribute which takes a MIME type.\n  Unfortunately, the MIME type was not\n  standardized, so it is sometimes\n  <code>\"text/javascript\"</code> or\n  <code>\"application/ecmascript\"</code> or something\n  else. Fortunately, all browsers will\n  always choose JavaScript as the\n  default programming language, so it is\n  always best to simply write <code>&lt;script&gt;</code>.\n  It is smallest, and it works on the\n  most browsers.</p>\n</blockquote>\n\n<p>For entertainment purposes only, I tried out the following five scripts</p>\n\n<pre><code>  &lt;script type=\"application/ecmascript\"&gt;alert(\"1\");&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;alert(\"2\");&lt;/script&gt;\n  &lt;script type=\"baloney\"&gt;alert(\"3\");&lt;/script&gt;\n  &lt;script type=\"\"&gt;alert(\"4\");&lt;/script&gt;\n  &lt;script &gt;alert(\"5\");&lt;/script&gt;\n</code></pre>\n\n<p>On Chrome, all but script 3 (<code>type=\"baloney\"</code>) worked.  IE8 did not run script 1 (<code>type=\"application/ecmascript\"</code>) or script 3.  Based on my non-extensive sample of two browsers, it looks like you can safely ignore the <code>type</code> attribute, but that it you use it you better use a legal (browser dependent) value.</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>It allows browsers to determine if they can handle the scripting/style language before making a request for the script or stylesheet (or, in the case of embedded script/style, identify which language is being used).</p>\n\n<p>This would be much more important if there had been more competition among languages in browser space, but VBScript never made it beyond IE and PerlScript never made it beyond an IE specific plugin while JSSS was pretty rubbish to begin with.</p>\n\n<p>The draft of HTML5 makes the attribute optional.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Boris Zbarsky (Mozilla), who probably knows more about the innards of Gecko than anyone else, provided at <a href=\"http://lists.w3.org/Archives/Public/public-html/2009Apr/0195.html\">http://lists.w3.org/Archives/Public/public-html/2009Apr/0195.html</a> the pseudocode repeated below to describe what Gecko based browsers do:</p>\n\n<pre><code>if (@type not set or empty) {\n   if (@language not set or empty) {\n     // Treat as default script language; what this is depends on the\n     // content-script-type HTTP header or equivalent META tag\n   } else {\n     if (@language is one of \"javascript\", \"livescript\", \"mocha\",\n                             \"javascript1.0\", \"javascript1.1\",\n                             \"javascript1.2\", \"javascript1.3\",\n                             \"javascript1.4\", \"javascript1.5\",\n                             \"javascript1.6\", \"javascript1.7\",\n                             \"javascript1.8\") {\n       // Treat as javascript\n     } else {\n       // Treat as unknown script language; do not execute\n     }\n   }\n} else {\n   if (@type is one of \"text/javascript\", \"text/ecmascript\",\n                       \"application/javascript\",\n                       \"application/ecmascript\",\n                       \"application/x-javascript\") {\n     // Treat as javascript\n   } else {\n     // Treat as specified (e.g. if pyxpcom is installed and\n     // python script is allowed in this context and the type\n     // is one that the python runtime claims to handle, use that).\n     // If we don't have a runtime for this type, do not execute.\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>My understanding is that mime types are set by the web server. Why do we add the <code>type=\"text/javascript</code> or <code>type=\"text/css\"</code> attribute? Isn't this a useless and ignored attribute?</p>\n",
            "last_activity_date": 1422808080,
            "question_id": 2706290,
            "score": 31,
            "tags": [
                "javascript",
                "html",
                "css",
                "mime-types"
            ],
            "title": "Why write &lt;script type=&quot;text/javascript&quot;&gt; when the mime type is set by the server?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Basically the first function call <code>$('myDiv')</code> returns a jQuery object, then each subsequent call returns the same one.</p>\n\n<p>Loosely,</p>\n\n<pre><code>var $ = function(selector) {\n   return new jQuery(selector);\n};\n\njQuery.prototype.removeClass = function(className) {\n   // magic\n   return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>All that it is doing is returning a reference to <code>this</code> when the method finishes. Take this simple object for example:</p>\n\n<pre><code> var sampleObj = function()\n {\n };\n\n sampleObj.prototype.Foo = function()\n {\n     return this;\n };\n</code></pre>\n\n<p>You could chain these calls all day because you return a reference to <code>this</code>:</p>\n\n<pre><code>var obj = new sampleObj();\nobj.Foo().Foo().Foo().Foo() // and so on\n</code></pre>\n\n<p>jQuery simply performs an operation, then returns <code>this</code>. </p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>If you have an object with certain methods, if each method returns an object with methods, you can simply call a method from the object returned.</p>\n\n<pre><code>var obj = {   // every method returns obj---------v\n    first: function() { alert('first');   return obj; },\n    second: function() { alert('second'); return obj; },\n    third: function() { alert('third');   return obj; }\n}\n\nobj.first().second().third();\n</code></pre>\n\n<p><strong>DEMO:</strong> <a href=\"http://jsfiddle.net/5kkCh/\">http://jsfiddle.net/5kkCh/</a></p>\n",
                    "is_accepted": true,
                    "score": 20
                },
                {
                    "body": "<pre><code>return $this;\n</code></pre>\n\n<p>each jQuery function returns an instance of the jQuery class, which can then have methods called on it. you could break it down, and this code would have the same effect.</p>\n\n<pre><code>jQuery_obj = $('myDiv');\njQuery_obj = jQuery_obj.removeClass('off');\njQuery_obj = jQuery_obj.addClass('on');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The point is that a function must evaluate to the \"parent\" function. So e.g.</p>\n\n<pre><code>foo().bar().test();\n</code></pre>\n\n<p>has to evaluate to:</p>\n\n<pre><code>foo().test();\n</code></pre>\n\n<p>so that you can call another function on <code>foo()</code>. To do this, you can <code>return this</code>:</p>\n\n<pre><code>function foo() {\n    // empty, nothing interesting here\n}\n\nfoo.prototype.bar = function() {\n    return this;\n}\n\nfoo.prototype.test = function() {\n    return this;\n}\n</code></pre>\n\n<p>Then,</p>\n\n<pre><code>var something = new foo();\nsomething.bar() === something; // true\n</code></pre>\n\n<p>And because of this:</p>\n\n<pre><code>something.bar().test() === something.test(); // true\n</code></pre>\n\n<p>So because <code>something.bar()</code> evaluates to <code>something</code>, you can immediately call the second function in one go.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In chaining parent function/method returns an object which is then used by the child function/method, and things go on such a way. In short the <code>jQuery</code> or <code>$</code> returns itself (an object) which allows the chaining. </p>\n\n<p>It is the same mechanism below</p>\n\n<pre><code>var obj=$('input');    //returns jQuery object\nvar obj1=obj.val('a'); //returns jQuery object\nvar obj2=obj1.fadeOut();//returns jQuery object\n</code></pre>\n\n<p>It looks like this if it is done with chaining </p>\n\n<pre><code>$('input').val('a').fadeOut();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here is an example of conditional callback chaining, like is used on the <code>$.ajax</code> jQuery function. </p>\n\n<pre><code>// conditional callback function example\nmyFunction = function () {\n\n    // define event callback prototypes without function parameter\n    var callback_f = new Object;\n    callback_f.callback1 = function () { return callback_f; };\n    callback_f.callback2 = function () { return callback_f; };\n\n    if ([condition]){\n        // redefine the callback with function parameter \n        // so it will run the user code passed in\n        callback_f.ReturnPlayer = function (f) { f(); return callback_f; };\n    }else{ \n        callback_f.NewPlayer = function (f) { f(); return callback_f; };\n    }\n\n    return callback_f;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am not asking what is the appropriate syntax for chaining, I know it could be something like:</p>\n\n<pre><code>$('myDiv').removeClass('off').addClass('on');\n</code></pre>\n\n<p>However I'm really curious to understand the inner working of it, as far as I know chaining is one of the advantages against other famous frameworks but this us to much abstraction for a novice programer like me, I'm sure there is someone out there that can provide me with a explanation that allows me to understand how chaining works.</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1385366586,
            "question_id": 7475336,
            "score": 18,
            "tags": [
                "javascript",
                "jquery",
                "frameworks"
            ],
            "title": "how does jquery chaining work?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>JSLint is only a guide, you don't always have to adhere to the rules. The thing is, you're not creating functions in a loop in the sense that it's referring to. You only create your classes once in your application, not over and over again.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Just move your (function (name, func) {...})() block out of the loop and assign it to a variable, like:</p>\n\n<p>var makeFn = function(name, func){...}; </p>\n\n<p>Then in the loop  have:</p>\n\n<p>prototype[prop] = makeFn(...)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Douglas Crockford has a new idiomatic way of achieving the above - his old technique was to use an inner function to bind the variables, but the new technique uses a function maker. See <a href=\"http://www.slideshare.net/douglascrockford/3-7687071/74\">slide 74 in the slides to his \"Function the Ultimate\" talk</a>.</p>\n\n<p>For the lazy, here is the code:</p>\n\n<pre><code>function make_handler(div_id) {\n    return function () {\n        alert(div_id);\n    };\n}\nfor (i ...) {\n    div_id = divs[i].id;\n    divs[i].onclick = make_handler(div_id);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>(I just stumbled on this questions many months after it was posted...)</p>\n\n<p>If you make a function in a loop, an instance of a function is created for each iteration of the loop. Unless the function that is being made is in fact different for each iteration, then use the method of putting the function generator outside the loop -- doing so isn't just Crockery, it lets others who read your code know that this was your intent.</p>\n\n<p>If the function is actually the same function being assigned to different values in an iteration (or objects produced in an iteration), then instead you need to assign the function to a named variable, and use that singular instance of the function in assignment within the loop:</p>\n\n<pre><code>handler = function (div_id) {\n    return function() { alert(div_id); }\n}\n\nfor (i ...) {\n    div_id = divs[i].id;\n    divs[i].onclick = handler(div_id);\n}\n</code></pre>\n\n<p>Greater commentary/discussion about this was made by others smarter than me when I posed a similar question here on Stack Overflow:\n<a href=\"http://stackoverflow.com/questions/3927054/jslint-error-dont-make-functions-within-a-loop-leads-to-question-about-javasc\">JSlint error &#39;Don&#39;t make functions within a loop.&#39; leads to question about Javascript itself</a></p>\n\n<p>As for JSLint:\nYes, it is dogmatic and idiomatic. That said, it is usually \"right\" -- I discover that many many people who vocalize negatively about JSLint actually don't understand (the subtleties of) Javascript, which are many and obtuse.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you are using JQuery, you might want to do something like this in a loop:</p>\n\n<pre><code>for (var i = 0; i &lt; 100; i++) {\n  $(\"#button\").click(function() {\n    alert(i);\n  });\n}\n</code></pre>\n\n<p>To satisfy JSLint, one way to work around this is (in JQuery 1.4.3+) to use the additional handler data argument to <code>.click()</code>:</p>\n\n<pre><code>function new_function(e) {\n  var data = e.data; // from handler\n  alert(data); // do whatever\n}\n\nfor (var i = 0; i &lt; 100; i++) {\n  $(\"#button\").click(i, new_function);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am working on making all of our JS code pass through jslint, sometimes with a lot of tweaking with the options to get legacy code pass for now on with the intention to fix it properly later.</p>\n\n<p>There is one thing that jslint complains about that I do not have a workround for. That is when using constructs like this, we get the error 'Don't make functions within a loop.'</p>\n\n<pre><code>        for (prop in newObject) {\n        // Check if we're overwriting an existing function\n        if (typeof newObject[prop] === \"function\" &amp;&amp; typeof _super[prop] === \"function\" &amp;&amp;\n        fnTest.test(newObject[prop])) {\n            prototype[prop] = (function (name, func) {\n                return function () {\n                    var result, old_super;\n\n                    old_super = this._super;\n                    this._super = _super[name];\n                    result = func.apply(this, arguments);\n                    this._super = old_super;\n\n                    return result;\n                };\n            })(prop, newObject[prop]);\n        }\n</code></pre>\n\n<p>This loop is part of a JS implementation of classical inheritance where classes that extend existing classes retain the super property of the extended class when invoking a member of the extended class.\nJust to clarify, the implementation above is inspired by this <a href=\"http://ejohn.org/blog/simple-javascript-inheritance/\">blog post</a> by John Resig.</p>\n\n<p>But we also have other instances of functions created within a loop.</p>\n\n<p>The only workaround so far is to exclude these JS files from jslint, but we would like to use jslint for code validation and syntax checking as part of our continuous integration and build workflow.</p>\n\n<p>Is there a better way to implement functionality like this or is there a way to tweak code like this through jslint?</p>\n",
            "last_activity_date": 1346267540,
            "question_id": 3037598,
            "score": 37,
            "tags": [
                "javascript",
                "jslint"
            ],
            "title": "How to get around the jslint error &#39;Don&#39;t make functions within a loop.&#39;"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You could try this SendKeys jQuery plugin:</p>\n\n<p><a href=\"http://bililite.com/blog/2011/01/23/improved-sendkeys/\" rel=\"nofollow\">http://bililite.com/blog/2011/01/23/improved-sendkeys/</a></p>\n\n<blockquote>\n  <p><code>$(element).sendkeys(string)</code> inserts string at the insertion point in\n  an input, textarea or other element with contenteditable=true. If the\n  insertion point is not currently in the element, it remembers where\n  the insertion point was when sendkeys was last called (if the\n  insertion point was never in the element, it appends to the end).</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The keypress event from jQuery is meant to do this sort of work. You can trigger the event by passing a string \"keypress\" to .trigger(). However to be more specific you can actually pass a jQuery.Event object (specify the type as \"keypress\") as well and provide any properties you want such as the keycode being the spacebar.</p>\n\n<p><a href=\"http://docs.jquery.com/Events/trigger#eventdata\">http://docs.jquery.com/Events/trigger#eventdata</a></p>\n\n<p>Read the above documentation for more details.</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>I believe this is what you're looking for:</p>\n\n<pre><code>var press = jQuery.Event(\"keypress\");\npress.ctrlKey = false;\npress.which = 40;\n$(\"whatever\").trigger(press);\n</code></pre>\n\n<p>From <a href=\"http://forum.jquery.com/topic/simulating-keypress-events\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>This works:</p>\n\n<pre><code>var event = jQuery.Event('keypress');\nevent.which = 13; \nevent.keyCode = 13; //keycode to trigger this for simulating enter\njQuery(this).trigger(event); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another option:</p>\n\n<pre><code>$(el).trigger({type: 'keypress', which: 13, keyCode: 13});\n</code></pre>\n\n<p><a href=\"http://api.jquery.com/trigger/\" rel=\"nofollow\">http://api.jquery.com/trigger/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>Using jQuery, how can I simulate (trigger?) a KeyPress when a link is clicked?  For example, when a user clicks the following link:</p>\n\n<pre><code>&lt;a id=\"clickforspace\" href=\"#\"&gt;Click Here&lt;/a&gt;\n</code></pre>\n\n<p>Then, by clicking the link, it would be as if they pressed the \"spacebar\" on their keyboard.</p>\n\n<p>Something like this, I'm assuming:</p>\n\n<pre><code>$(\"#clickforspace\").click(function(e) { \n    e.preventDefault(); \n    //... Some type of code here to initiate \"spacebar\" //\n                                      });\n</code></pre>\n\n<p>Any ideas on how to achieve this?</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1417569966,
            "question_id": 1468384,
            "score": 31,
            "tags": [
                "javascript",
                "jquery",
                "keyboard"
            ],
            "title": "Simulate Keypress With jQuery"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>When you write <code>cl();</code>, you're calling <code>log</code> in the global context.</p>\n\n<p>Chrome's <code>console.log</code> doesn't want to be called on the <code>window</code> object.</p>\n\n<p>Instead, you can write </p>\n\n<pre><code>cl = function() { return console.log.apply(console, arguments); };\n</code></pre>\n\n<p>This will call <code>log</code> in the context of <code>console</code>.</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p><a href=\"https://groups.google.com/a/chromium.org/d/msg/chromium-bugs/gGVPJ1T-qA0/F8uSupbO2R8J\">https://groups.google.com/a/chromium.org/d/msg/chromium-bugs/gGVPJ1T-qA0/F8uSupbO2R8J</a></p>\n\n<p>Apparently you can also defined log:</p>\n\n<pre><code> log = console.log.bind(console);\n</code></pre>\n\n<p>and then the line numbers also work</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Unfortunately @SLaks answer isnt applied to IE because it uses window-object as context in console.log-method.</p>\n\n<p>I would be suggest another way that doesnt depend on browser:</p>\n\n<pre><code>!window.console &amp;&amp; (console = {});\n\nconsole.debug = console.debug || $.noop;\nconsole.info = console.info || $.noop;\nconsole.warn = console.warn || $.noop;\nconsole.log = console.log || $.noop;\n\nvar src = console, desc = {};\ndesc.prototype = src;\nconsole = desc;\n\ndesc.log = function(message, exception) {\n    var msg = message + (exception ? ' (exception: ' + exception + ')' : ''), callstack = exception &amp;&amp; exception.stack;\n    src.log(msg);\n    callstack &amp;&amp; (src.log(callstack));\n    //logErrorUrl &amp;&amp; $.post(logErrorUrl, { message: msg + (callstack || '') }); // Send clientside error message to serverside.\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I would like to know why the follow code doesn't work in the Google Chrome:</p>\n\n<pre><code>// creates a xss console log\n\nvar cl = ( typeof( console ) != 'undefined' ) ? console.log : alert;\ncl('teste');\n</code></pre>\n\n<p>output: Uncaught TypeError: Illegal invocation</p>\n\n<p>thanks.</p>\n",
            "last_activity_date": 1371158657,
            "question_id": 5133649,
            "score": 16,
            "tags": [
                "javascript",
                "exception",
                "google-chrome"
            ],
            "title": "alias to chrome console.log"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It really depends what you would like to clone. Is this a truly JSON object or just any object in JavaScript? If you would like to do any clone, it might get you into some trouble. Which trouble? I will explain it below, but first, a code example which clones object literals, any primitives, arrays and nodes.</p>\n\n<pre><code>function clone(item) {\n    if (!item) { return item; } // null, undefined values check\n\n    var types = [ Number, String, Boolean ], \n        result;\n\n    // normalizing primitives if someone did new String('aaa'), or new Number('444');\n    types.forEach(function(type) {\n        if (item instanceof type) {\n            result = type( item );\n        }\n    });\n\n    if (typeof result == \"undefined\") {\n        if (Object.prototype.toString.call( item ) === \"[object Array]\") {\n            result = [];\n            item.forEach(function(child, index, array) { \n                result[index] = clone( child );\n            });\n        } else if (typeof item == \"object\") {\n            // testing that this is DOM\n            if (item.nodeType &amp;&amp; typeof item.cloneNode == \"function\") {\n                var result = item.cloneNode( true );    \n            } else if (!item.prototype) { // check that this is a literal\n                if (item instanceof Date) {\n                    result = new Date(item);\n                } else {\n                    // it is an object literal\n                    result = {};\n                    for (var i in item) {\n                        result[i] = clone( item[i] );\n                    }\n                }\n            } else {\n                // depending what you would like here,\n                // just keep the reference, or create new object\n                if (false &amp;&amp; item.constructor) {\n                    // would not advice to do that, reason? Read below\n                    result = new item.constructor();\n                } else {\n                    result = item;\n                }\n            }\n        } else {\n            result = item;\n        }\n    }\n\n    return result;\n}\n\nvar copy = clone({\n    one : {\n        'one-one' : new String(\"hello\"),\n        'one-two' : [\n            \"one\", \"two\", true, \"four\"\n        ]\n    },\n    two : document.createElement(\"div\"),\n    three : [\n        {\n            name : \"three-one\",\n            number : new Number(\"100\"),\n            obj : new function() {\n                this.name = \"Object test\";\n            }   \n        }\n    ]\n})\n</code></pre>\n\n<p>And now, let's talk about problems you might get when start cloning REAL objects. I'm talking now, about objects which you create by doing something like </p>\n\n<pre><code>var User = function(){}\nvar newuser = new User();\n</code></pre>\n\n<p>Of course you can clone them, it's not a problem, every object expose constructor property, and you can use it to clone objects, but it will not always work. You also can do simple <code>for in</code> on this objects, but it goes to the same direction - trouble. I have also included clone functionality  inside the code, but it's excluded by <code>if( false )</code> statement.</p>\n\n<p>So, why cloning can be a pain? Well, first of all, every object/instance might have some state. You never can be sure that your objects doesn't have for example an private variables, and if this is the case, by cloning object, you just break the state. </p>\n\n<p>Imagine there is no state, that's fine. Then we still have another problem. Cloning via \"constructor\" method will give us another obstacle. It's an arguments dependency. You never can be sure, that someone who created this object, did not did, some kind of </p>\n\n<pre><code>new User({\n   bike : someBikeInstance\n});\n</code></pre>\n\n<p>If this is the case, you are out of luck, someBikeInstance was probably created in some context and that context is unkown for clone method.</p>\n\n<p>So what to do? You still can do <code>for in</code> solution, and treat such objects like normal object literals, but maybe it's an idea not to clone such objects at all, and just pass the reference of this object? </p>\n\n<p>Another solution is - you could set a convention that all objects which must be cloned should implement this part by themselves and provide appropriate API method ( like cloneObject ). Something what <code>cloneNode</code> is doing for DOM.</p>\n\n<p>You decide.</p>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>As others have noted on this and similar questions, cloning an \"object\", in the general sense, is dubious in JavaScript.</p>\n\n<p>However, there is a class of objects, which I will cal \"data\" objects, that is those constructed simply from <code>{ ... }</code> literals and/or simple property assignments or deserialized from JSON for which it is reasonable to want to clone. Just today I wanted to artificially inflate data received from a server by 5 x to test what happens for a large data set, but the object (an array) and its children had to be distinct objects for things to function correctly. Cloning allowed me to do this to multiply my data set:</p>\n\n<pre><code>return dta.concat(clone(dta),clone(dta),clone(dta),clone(dta));\n</code></pre>\n\n<p>The other place I often end up cloning data objects is for submitting data back to the host where I want to strip state fields from the object in the data model before sending it. For example, I might want to strip all fields starting with \"_\" from the object as it is cloned.</p>\n\n<p>This is the code I ended up writing to do this generically, including supporting arrays and a selector to choose which members to clone (which uses a \"path\" string to determine context):</p>\n\n<pre><code>function clone(obj,sel) {\n    return (obj ? _clone(\"\",obj,sel) : obj);\n    }\n\nfunction _clone(pth,src,sel) {\n    var ret=(src instanceof Array ? [] : {});\n\n    for(var key in src) {\n        if(!src.hasOwnProperty(key)) { continue; }\n\n        var val=src[key], sub;\n\n        if(sel) {\n            sub+=pth+\"/\"+key;\n            if(!sel(sub,key,val)) { continue; }\n            }\n\n        if(val &amp;&amp; typeof(val)=='object') {\n            if     (val instanceof Boolean) { val=Boolean(val);        }\n            else if(val instanceof Number ) { val=Number (val);        }\n            else if(val instanceof String ) { val=String (val);        }\n            else                            { val=_clone(sub,val,sel); }\n            }\n        ret[key]=val;\n        }\n    return ret;\n    }\n</code></pre>\n\n<p>The simplest reasonable deep-clone solution, assuming a non-null root object and with no member selection is:</p>\n\n<pre><code>function clone(src) {\n    var ret=(src instanceof Array ? [] : {});\n    for(var key in src) {\n        if(!src.hasOwnProperty(key)) { continue; }\n        var val=src[key];\n        if(val &amp;&amp; typeof(val)=='object') { val=_clone(val);  }\n        ret[key]=val;\n        }\n    return ret;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Very simple way, maybe too simple:</p>\n\n<pre><code>var cloned = JSON.parse(JSON.stringify(objectToClone));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do you deep clone a Javascript object?</p>\n\n<p>I know there are various functions based on frameworks like <code>JSON.parse(JSON.stringify(o))</code> and <code>$.extend(true, {}, o)</code> but I don't want to use a framework like that.</p>\n\n<p>What is the most elegant or efficient way to create a deep clone. </p>\n\n<p>We do care about edge cases like cloning array's. Not breaking prototype chains, dealing with self reference.</p>\n\n<p>We don't care about supporting copying of DOM objects and like because <code>.cloneNode</code> exists for that reason.</p>\n\n<p>As I mainly want to use deep clones in <code>node.js</code> using ES5 features of the V8 engine is acceptable. </p>\n\n<p>[Edit]</p>\n\n<p>Before anyone suggests let me mention there is a distinct difference between creating a copy by prototypically inheriting from the object and <em>cloning</em> it. The former makes a mess of the prototype chain.</p>\n\n<p>[Further Edit]</p>\n\n<p>After reading your answer I came to the annoying discovery that cloning entire objects is a very dangerous and difficult game. Take for example the following closure based object</p>\n\n<pre><code>var o = (function() {\n     var magic = 42;\n\n     var magicContainer = function() {\n          this.get = function() { return magic; };\n          this.set = function(i) { magic = i; };\n     }\n\n      return new magicContainer;\n}());\n\nvar n = clone(o); // how to implement clone to support closures\n</code></pre>\n\n<p>Is there any way to write a clone function that clones the object, has the same state at time of cloning but cannot alter the state of <code>o</code> without writing a JS parser in JS.</p>\n\n<p>There should be no real world need for such a function anymore. This is mere academic interest.</p>\n",
            "last_activity_date": 1422557522,
            "question_id": 4459928,
            "score": 21,
            "tags": [
                "javascript"
            ],
            "title": "How to Deep clone in javascript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>It's a <a href=\"http://www.crockford.com\">Crockford</a> recommendation. I know I've seen it echoed elsewhere (ppk maybe?).  The HTML5 spec does not require it.</p>\n\n<p>Oddly, it's become somewhat <em>au courant</em> to use the \"type\" attribute to mark <code>&lt;script&gt;</code> blocks that you <strong>don't</strong> want to be evaluated:</p>\n\n<pre><code>&lt;script type='text/html-template'&gt;\n  &lt;div&gt; this is a template &lt;/div&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>By giving a weird non-JavaScript type, you get a way to stuff raw text into the page for use by other JavaScript code (which is presumably in script block that <strong>can</strong> be evaluated).</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>you may be thinking of <a href=\"http://www.html5laboratory.com/writing-a-valid-html5-document.php\" rel=\"nofollow\">this article here</a> with the dependency being that scripts default to text/javascript in HTML5 automatically, while non-HTML5 browsers still expect that you define the type specifically spec-wise even though they will almost always guess text/javascript anyways.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Well i keep seeing more examples without the text/javascript but for some reason my scripts wont work in FF when i do so. I would recommend keeping the text/javascript declaration. The CDATA tag prevents javascript from being shown as plain text in your website if your browser has javascript turned off. Personally i don't use those tags anymore don't think there's allot of users out there without and if they are out there they might wanna grow some brains :P</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>HTML5 doesn't need the <code>type=\"text/javascript\"</code> (it's the default).</p>\n\n<p><code>CDATA</code> is only neeed for XHTML pages, if the script has any HTML characters (like '&lt;' and '>') in it.</p>\n\n<p><code>&lt;!--</code> should only be needed for OLD browsers.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>it's up to the browser to interpret the <code>script</code> block correctly based on the headers, i believe, and not the <code>type</code> attribute.  So to answer your question, no it is not required for modern browsers (i'm talking IE7+, FF, Webkit).  If you are supporting older browsers than that...I feel sorry for you =)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>See <a href=\"http://javascript.crockford.com/script.html\">Crockford's write-up on the <code>&lt;script&gt;</code> tag</a>, most notably:</p>\n\n<blockquote>\n  <p>Do not use the <code>&lt;!-- //--&gt;</code> hack with scripts. It was intended to prevent scripts from showing up as text on the first generation browsers Netscape 1 and Mosaic. It has not been necessary for many years. <code>&lt;!-- //--&gt;</code> is supposed to signal an HTML comment. Comments should be ignored, not compiled and executed. Also, HTML comments are not to include <code>--</code>, so a script that decrements has an HTML error. </p>\n</blockquote>\n\n<p>...</p>\n\n<blockquote>\n  <h3><code>type=\"text/javascript\"</code></h3>\n  \n  <p>This attribute is optional. Since Netscape 2, the default programming language in all browsers has been JavaScript. In XHTML, this attribute is required and unnecessary. In HTML, it is better to leave it out. The browser knows what to do.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 64
                },
                {
                    "body": "<p>Well, I am tempted to say that nobody is using <code>text/javascript</code> any more, and that even minification tools would probably remove it...\nIndeed, <a href=\"https://developers.facebook.com/docs/javascript/quickstart\" rel=\"nofollow\">Facebook SDK documentation</a> specifies just <code>&lt;script&gt;</code>. </p>\n\n<p>However,\n<a href=\"https://developers.google.com/+/web/signin/add-button-javascript\" rel=\"nofollow\">Google SDK documentation</a> still has <code>text/javascript</code>.</p>\n\n<p><a href=\"http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/browser-examples.html\" rel=\"nofollow\">Amazon SDK documentation</a> still has <code>text/javascript</code>. </p>\n\n<p><a href=\"https://developer.linkedin.com/documents/javascript-api-tutorial\" rel=\"nofollow\">Linkedin API documentation</a> still has <code>text/javascript</code>. </p>\n\n<p><a href=\"http://instafeedjs.com/\" rel=\"nofollow\">Instagram</a> is still using <code>text/javascript</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <strong><a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/script\" rel=\"nofollow\">type</a></strong> attribute identifies the scripting language of code embedded within a script element or referenced via the element\u2019s src attribute. This is specified as a MIME type; examples of supported MIME types include text/javascript, text/ecmascript, application/javascript, and application/ecmascript.</p>\n\n<p>According to <a href=\"http://www.w3.org/TR/html401/interact/scripts.html#h-18.2.1\" rel=\"nofollow\">HTML 4.01 Specification</a></p>\n\n<blockquote>\n  <p>The <strong>type</strong> attribute specifies the scripting language of the element's\n  contents and overrides the default scripting language. The scripting\n  language is specified as a content type (e.g., \"text/javascript\").\n  Authors must supply a value for this attribute. There is no default\n  value for this attribute.</p>\n</blockquote>\n\n<p>But in <a href=\"http://www.w3.org/TR/html5/scripting-1.html#attr-script-type\" rel=\"nofollow\">HTML5</a> <code>text/javascript</code> is the default type, so you can omit</p>\n\n<blockquote>\n  <p>The <strong>type</strong> attribute gives the language of the script or format of the\n  data. If the attribute is present, its value must be a valid MIME\n  type. The charset parameter must not be specified. The default, which\n  is used if the attribute is absent, is \"text/javascript\".</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>type=\"text/javascript\"</code> : Required in HTML 4 and XHTML, but optional in HTML5.</p>\n\n<p><code>CDATA</code> : Required in XHTML.</p>\n\n<p><code>&lt;!--</code> : Used to hide the JavaScript from very old browsers. Eg: Netscape 1 and Internet Explorer 2, neither of which anyone uses any more.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I read somewhere that you no longer need things like <code>type=\"text/javascript\"</code> and the weird <code>CDATA</code> and <code>&lt;!--</code> things in your script tags. So, instead of:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\n&lt;!--\n\n    //your script here\n\n--&gt;\n//]]&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>You would just do:</p>\n\n<pre><code>&lt;script&gt;\n    //your script here\n&lt;/script&gt;\n</code></pre>\n\n<p>I can't remember where I read this though. It was from a Google or Yahoo engineer I think, and they specifically mentioned which browsers required these archaic constructs and why. Anyone know what blog post/article this was talked about, or have a good resource talking about this?</p>\n",
            "last_activity_date": 1422728699,
            "question_id": 5265202,
            "score": 60,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Do you need text/javascript specified in your &lt;script&gt; tags?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Don't you know <a href=\"http://www.datejs.com/\">datejs</a>? it is a must know.</p>\n\n<p>Using datejs, just write something like:</p>\n\n<pre><code>(new Date).clearTime()\n          .addSeconds(15457)\n          .toString('H:mm:ss');\n</code></pre>\n\n<p>--update</p>\n\n<p>Nowadays date.js is outdated and not maintained, so use \"<a href=\"http://momentjs.com\">Moment.js</a>\", which is much better as pointed out by T.J. Crowder.</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>I don't think any built-in feature of the standard Date object will do this for you in a way that's more convenient than just doing the math yourself.</p>\n\n<pre><code>hours = Math.floor(totalSeconds / 3600);\ntotalSeconds %= 3600;\nminutes = Math.floor(totalSeconds / 60);\nseconds = totalSeconds % 60;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>I've used this code before to create a simple timespan object:</p>\n\n<pre><code>function TimeSpan(time) {\nthis.hours = 0;\nthis.minutes = 0;\nthis.seconds = 0;\n\nwhile(time &gt;= 3600)\n{\n\tthis.hours++;\n\ttime -= 3600;\n}\n\nwhile(time &gt;= 60)\n{\n\tthis.minutes++;\n\ttime -= 60;\n}\n\nthis.seconds = time;\n}\n\nvar timespan = new Timespan(3662);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>This does the trick:</p>\n\n<pre><code>function secondstotime(secs)\n{\n    var t = new Date(1970,0,1);\n    t.setSeconds(secs);\n    var s = t.toTimeString().substr(0,8);\n    if(secs &gt; 86399)\n    \ts = Math.floor((t - Date.parse(\"1/1/70\")) / 3600000) + s.substr(2);\n    return s;\n}\n</code></pre>\n\n<p>(Sourced from <a href=\"http://www.codingforums.com/showthread.php?t=46860\">here</a>)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>var totalSec = new Date().getTime() / 1000;\nvar hours = parseInt( totalSec / 3600 ) % 24;\nvar minutes = parseInt( totalSec / 60 ) % 60;\nvar seconds = totalSec % 60;\n\nvar result = (hours &lt; 10 ? \"0\" + hours : hours) + \"-\" + (minutes &lt; 10 ? \"0\" + minutes : minutes) + \"-\" + (seconds  &lt; 10 ? \"0\" + seconds : seconds);\n</code></pre>\n\n<p>Please consider that this code assumes that all days since 1970 had 24 hours with 3600 seconds each. (Which is not quite the case with leap seconds, etc.) Use a library instead. This code represents midnight as 00-00-00, if you prefer 24-00-00, add a condition like</p>\n\n<pre><code>if (hours === 0 &amp;&amp; minutes === 0 &amp;&amp; seconds === 0) hours = 24;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 145
                },
                {
                    "body": "<pre><code>var time1 = date1.getTime();\nvar time2 = date2.getTime();\nvar totalMilisec = time2 - time1;\n\nalert(DateFormat('hh:mm:ss',new Date(totalMilisec)))\n\n /* ----------------------------------------------------------\n *  Field        | Full Form          | Short Form\n *  -------------|--------------------|-----------------------\n *  Year         | yyyy (4 digits)    | yy (2 digits)\n *  Month        | MMM (abbr.)        | MM (2 digits)\n                 | NNN (name)         |\n *  Day of Month | dd (2 digits)      | \n *  Day of Week  | EE (name)          | E (abbr)\n *  Hour (1-12)  | hh (2 digits)      | \n *  Minute       | mm (2 digits)      | \n *  Second       | ss (2 digits)      | \n *  ----------------------------------------------------------\n */\nfunction DateFormat(formatString,date){\n    if (typeof date=='undefined'){\n    var DateToFormat=new Date();\n    }\n    else{\n        var DateToFormat=date;\n    }\n    var DAY         = DateToFormat.getDate();\n    var DAYidx      = DateToFormat.getDay();\n    var MONTH       = DateToFormat.getMonth()+1;\n    var MONTHidx    = DateToFormat.getMonth();\n    var YEAR        = DateToFormat.getYear();\n    var FULL_YEAR   = DateToFormat.getFullYear();\n    var HOUR        = DateToFormat.getHours();\n    var MINUTES     = DateToFormat.getMinutes();\n    var SECONDS     = DateToFormat.getSeconds();\n\n    var arrMonths = new Array(\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\");\n    var arrDay=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday');\n    var strMONTH;\n    var strDAY;\n    var strHOUR;\n    var strMINUTES;\n    var strSECONDS;\n    var Separator;\n\n    if(parseInt(MONTH)&lt; 10 &amp;&amp; MONTH.toString().length &lt; 2)\n        strMONTH = \"0\" + MONTH;\n    else\n        strMONTH=MONTH;\n    if(parseInt(DAY)&lt; 10 &amp;&amp; DAY.toString().length &lt; 2)\n        strDAY = \"0\" + DAY;\n    else\n        strDAY=DAY;\n    if(parseInt(HOUR)&lt; 10 &amp;&amp; HOUR.toString().length &lt; 2)\n        strHOUR = \"0\" + HOUR;\n    else\n        strHOUR=HOUR;\n    if(parseInt(MINUTES)&lt; 10 &amp;&amp; MINUTES.toString().length &lt; 2)\n        strMINUTES = \"0\" + MINUTES;\n    else\n        strMINUTES=MINUTES;\n    if(parseInt(SECONDS)&lt; 10 &amp;&amp; SECONDS.toString().length &lt; 2)\n        strSECONDS = \"0\" + SECONDS;\n    else\n        strSECONDS=SECONDS;\n\n    switch (formatString){\n        case \"hh:mm:ss\":\n            return strHOUR + ':' + strMINUTES + ':' + strSECONDS;\n        break;\n        //More cases to meet your requirements.\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can also use <a href=\"http://sugarjs.com\" rel=\"nofollow\">Sugar</a>.</p>\n\n<pre><code>Date.create().reset().set({seconds: 180}).format('{mm}:{ss}');\n</code></pre>\n\n<p>This example returns '03:00'.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>And here is a version for <a href=\"http://arshaw.com/xdate/\" rel=\"nofollow\">XDate.js</a></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>(new XDate())\n    .clearTime()\n    .addSeconds(15457)\n    .toString('HH:mm:ss')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can also use below code:</p>\n\n<pre><code>int ss = nDur%60;\nnDur   = nDur/60;\nint mm = nDur%60;\nint hh = nDur/60;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function formatSeconds(seconds)\n{\n    var date = new Date(1970,0,1);\n    date.setSeconds(seconds);\n    return date.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, \"$1\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><code>new Date().toString().split(\" \")[4];</code></p>\n\n<p>result <code>15:08:03</code></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>As Cleiton pointed out in <a href=\"http://stackoverflow.com/a/1322771/259953\">his answer</a>, <a href=\"http://momentjs.com/\">moment.js</a> can be used for this:</p>\n\n<pre><code>moment().startOf('day')\n        .seconds(15457)\n        .format('H:mm:ss');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>.imgBox{\n    height:200px;\n    width:200px;\n}\n\n&lt;div class=\"imgBox FB\" style=\"background:orange;\"&gt;\n                &lt;span&gt;\n                    &lt;label style=\"font-size: 14px; color:black\"&gt;time\n                        &lt;h3 id=\"mmss\"&gt;&lt;/h3&gt;\n                        &lt;h3 id=\"ek\"&gt;&lt;/h3&gt;\n                    &lt;/label&gt;\n                &lt;/span&gt;\n            &lt;/div&gt;\n\nvar t = \"660\";\nvar  timeinsec = t;\nString.prototype.toHHMMSS = function () {\n    var sec_num = parseInt(this, 10); // don't forget the second param\n    var hours   = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (hours   &lt; 10) {hours   = \"0\"+hours;}\n    if (minutes &lt; 10) {minutes = \"0\"+minutes;}\n    if (seconds &lt; 10) {seconds = \"0\"+seconds;}\n    var time    = hours+':'+minutes+':'+seconds;\n    return time;\n}\ndocument.getElementById(\"mmss\").innerHTML = timeinsec.toHHMMSS();\nvar r = timeinsec.toHHMMSS();\ndocument.getElementById(\"ek\").innerHTML =  r;\nalert(\"5678\".toHHMMSS());\n</code></pre>\n\n<p>or you ca see this working here: <a href=\"http://fiddle.jshell.net/sahilosheal/N2B5J/\" rel=\"nofollow\">http://fiddle.jshell.net/sahilosheal/N2B5J/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Have you tried adding seconds to a Date object?</p>\n\n<pre><code>var dt = new Date();\ndt.addSeconds(1234);\n</code></pre>\n\n<p>A sample:\n<a href=\"http://fiddle.jshell.net/YvE7x/2/\" rel=\"nofollow\">http://fiddle.jshell.net/YvE7x/2/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can manage to do this without any external JS library with the help of JS Date method like following:</p>\n\n<pre><code>        var date = new Date(null);\n        date.setSeconds(SECONDS); // specify value for SECONDS here\n        date.toISOString().substr(11, 8);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For anyone using AngularJS, a simple solution is to filter the value with the <a href=\"https://docs.angularjs.org/api/ng/filter/date\" rel=\"nofollow\" title=\"date API\">date API</a>, which converts milliseconds to a string based on the requested format. Example:</p>\n\n<pre><code>&lt;div&gt;Offer ends in {{ timeRemaining | date: 'HH:mm:ss' }}&lt;/div&gt;\n</code></pre>\n\n<p>Note that this expects milliseconds, so you may want to multiply timeRemaining by 1000 if you are converting from seconds (as the original question was formulated).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a function to convert seconds to hh-mm-ss format based on powtac's answer <a href=\"http://stackoverflow.com/questions/6312993/javascript-seconds-to-time-string-with-format-hhmmss/6313008#6313008\">here</a></p>\n\n<p><a href=\"http://jsfiddle.net/StevenIseki/apg8yx1s/\" rel=\"nofollow\">jsfiddle</a></p>\n\n<pre><code>/** \n * Convert seconds to hh-mm-ss format.\n * @param {number} totalSeconds - the total seconds to convert to hh- mm-ss\n**/\nvar SecondsTohhmmss = function(totalSeconds) {\n  var hours   = Math.floor(totalSeconds / 3600);\n  var minutes = Math.floor((totalSeconds - (hours * 3600)) / 60);\n  var seconds = totalSeconds - (hours * 3600) - (minutes * 60);\n\n  // round seconds\n  seconds = Math.round(seconds * 100) / 100\n\n  var result = (hours &lt; 10 ? \"0\" + hours : hours);\n      result += \"-\" + (minutes &lt; 10 ? \"0\" + minutes : minutes);\n      result += \"-\" + (seconds  &lt; 10 ? \"0\" + seconds : seconds);\n  return result;\n}\n</code></pre>\n\n<p>Example use</p>\n\n<pre><code>var seconds = SecondsTohhmmss(70);\nconsole.log(seconds);\n// logs 00-01-10\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Easy to follow version for noobies:</p>\n\n<pre><code> var totalNumberOfSeconds = YOURNUMBEROFSECONDS;\n var hours = parseInt( totalNumberOfSeconds / 3600 );\n var minutes = parseInt( (totalNumberOfSeconds - (hours * 3600)) / 60 );\n var seconds = Math.floor((totalNumberOfSeconds - ((hours * 3600) + (minutes * 60))));\n var result = (hours &lt; 10 ? \"0\" + hours : hours) + \":\" + (minutes &lt; 10 ? \"0\" + minutes : minutes) + \":\" + (seconds  &lt; 10 ? \"0\" + seconds : seconds);\n console.log(result);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I convert seconds to an <code>HH-MM-SS</code> string using JavaScript?</p>\n",
            "last_activity_date": 1424761697,
            "question_id": 1322732,
            "score": 56,
            "tags": [
                "javascript"
            ],
            "title": "Convert seconds to HH-MM-SS with JavaScript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I don't know of any built in jQuery of javascript function to do this. You could, however, do it yourself, but it would be potentially slow if you have a lot of text. </p>\n\n<p>In theory, you could make sure the height is set to auto, remove the text, and then word by word reinsert it. On a change in the height, you remove the last word, and insert your dom element. Again, this will be slow if there is a lot of text, and the better way to do this would be to not change the original element, but do it in another element which could be hidden, and then replace the original element on completion. That way, your user wouldn't see the content disappear and then come back word by word.</p>\n\n<p>Another way would be to use a similar principle, and start with an empty element of the same size with height auto, and insert a new character and a space until you get a new line. From there, you can use this as an approximation with the above techinique, or you can blindly add up the length of each string until you find a new line, taking into account the width of your dom element. This technique works better with monospaced fonts though, which is where using it only as an approximation comes in.</p>\n\n<p>That said, there is a way to measure text using canvas, but that may be extreme. In theory it would be, create a canvas element, get the context, set all the font properties, and then use the <code>context.measureText()</code> method. An example of it use can be found <a href=\"http://uupaa-js-spinoff.googlecode.com/svn/trunk/uupaa-excanvas.js/demo/8_2_canvas_measureText.html\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is one approach. Note: I do not see a ideal solution without using monospace fonts. The equal with characters make this task much easier.</p>\n\n<ol>\n<li>Equal width characters</li>\n<li>Calculate the size of one character</li>\n<li>Calculate the size of the container</li>\n<li>Find characters per row</li>\n<li>Find where the row will break (ie whitespace, dashes, etc)</li>\n<li>Get all breaking indexes.</li>\n</ol>\n\n<p>Have a look at the jsfiddle for associated html. I have not completed this function. More checks need to be put in when calculating the breaking index. Right now it is using lastIndexOf(' '), but this ignores that the next index could be a space, or the current. Also I am not accounting for other line-breaking characters. However this should be a great starting point.</p>\n\n<pre><code>var text = $('#text').text(),                   // \"lorem ipsum ... \"\n    len = text.length,                          // total chars\n    width = $('#text').width(),                 // container width\n    span = $('&lt;span /&gt;').append('a').appendTo('#sandbox'),\n    charWidth = span.width(),                  // add single character to span and test width\n    charsPerRow = Math.floor(width/charWidth); // total characters that can fit in one row\n\nvar breakingIndexes = [], // will contain indexes of all soft-breaks\n    gRowStart = 0,        // global row start index\n    gRowEnd = charsPerRow;// global row end index\n\nwhile(gRowEnd &lt; len){\n    var rowEnd = text.substring(gRowStart, gRowEnd).lastIndexOf(' '); // add more checks for break conditions here\n    breakingIndexes.push(gRowStart + rowEnd); // add breaking index to array\n    gRowStart = gRowStart + rowEnd + 1; // next start is the next char\n    gRowEnd = gRowStart + charsPerRow;  // global end inxex is start + charsperrow\n}\n\nvar text2 = $('#text2').text();           // \"lorem ipsum ... \" now not width bound\nvar start = 0, newText = '';\nfor(var i=0; i &lt; breakingIndexes.length; i++){\n    newText += text2.substring(start, breakingIndexes[i]) + '&lt;br /&gt;'; // add hard breaks\n    start = breakingIndexes[i]; // update start\n}\n\n$('#text2').html(newText); // output with breaks\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Y5Ftn/1/\">http://jsfiddle.net/Y5Ftn/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Not sure what exactly your use case is but <a href=\"http://code.google.com/p/hyphenator/\" rel=\"nofollow\">http://code.google.com/p/hyphenator/</a> may be a solution to your problem or if you dig into the hyphenator.js source code, you may be able to find the code you are looking for. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I came up with an approach, but it might be overkill for your purposes, so take this into account.</p>\n\n<p>You need to create a clone of the element, empty the original, then move each word back into the original element. If the height changes at any point, there's a line-break before that word. This would be fairly simple to do using <code>$(el).text()</code>, but it gets more complicated if there can be other tags inside, not just text. I tried explaining how to break it down by node in this answer box, but found it easier just to create a jQuery plugin in a jsFiddle. Link here: <a href=\"http://jsfiddle.net/nathan/qkmse/\">http://jsfiddle.net/nathan/qkmse/</a> (<a href=\"https://raw.github.com/gist/3877862/00913317869b1a9c1717567dfb549a87a1dffe4b/breaklines.js\">Gist</a>).</p>\n\n<p>It won't handle floated elements all that well, and there are a few other situations where it'll fall over. Let me know if you'd like more options, or if it doesn't quite work for your purposes, or if you're not sure how to apply it and I'll try to help.</p>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<p>I think it would be easier to detect using a regex -- much less code while retaining efficiency.</p>\n\n<p>Here's something that worked for me:</p>\n\n<pre><code>if ((/(\\r\\n|\\n|\\r)/.test($(this).val()))) {\n    alert('there are line breaks here')\n}\n</code></pre>\n\n<p>I'm not sure if this will work with your broken strings, but it works for detecting line-breks with jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>this is my script, that takes text, and then makes each line a span</p>\n\n<p>CSS:</p>\n\n<pre><code>    margin: 0;\n        padding: 0;\n    }\n\n    .title{\n        width: 300px;\n        background-color: rgba(233,233,233,0.5);\n        line-height: 20px;\n    }\n\n    span{\n        color: white;\n        background-color: red;\n        display: inline-block;\n        font-size: 30px;\n    }\n\n    a{\n        text-decoration: none;\n        color: black;\n    }\n</code></pre>\n\n<p>html</p>\n\n<pre><code>&lt;div class=\"title\"&gt;\n        &lt;a href=\"\"&gt;SOME TEXT LONG TEXT ANDTHISISLONG AND THIS OTHER TEXT&lt;/a&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>JS</p>\n\n<pre><code>$(function(){\n\n        $(\".title\").find(\"a\").each(function(){\n\n            var $this = $(this);\n            var originalText = $this.text();\n            $this.empty();\n\n            var sections = [];\n\n            $.each( originalText.split(\" \"), function(){\n                var $span = $(\"&lt;span&gt;\" + this + \"&lt;/span&gt;\");\n                $this.append($span);\n\n                var index = $span.position().top;\n\n                if( sections[index] === undefined ){\n                    sections[index] = \"\";\n                }\n\n                sections[index] += $span.text() + \" \";\n            });\n\n            $this.empty();\n\n            for(var i = 0; i&lt; sections.length; i++){\n                if( sections[i] !== undefined ){\n                    var spanText = $.trim(sections[i]);                     \n                    $this.append(\"&lt;span&gt;\" + spanText + \"&lt;/span&gt;\");\n                }\n            }\n\n        });\n\n    });\n</code></pre>\n\n<p>You have to got jQuery included. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Alternatively you could compare width of the text block with its parent's width. If the block is at least 98% of the width of its parent, pretty sure it breaks</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>is it possible to have jQuery/javascript detect where a string is broken (in order to fit into CSS width constraints) so as to insert DOM elements before the beginning of a new line?</p>\n",
            "last_activity_date": 1369303551,
            "question_id": 4671713,
            "score": 22,
            "tags": [
                "javascript",
                "jquery",
                "line-breaks"
            ],
            "title": "detecting line-breaks with jQuery?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>If you're looking for something like PHP's <a href=\"http://us3.php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members\" rel=\"nofollow\"><code>__get()</code></a> function, I don't think Javascript provides any such construct.</p>\n\n<p>The best I can think of doing is looping through the object's non-function members and then creating a corresponding \"getXYZ()\" function for each.</p>\n\n<p>In dodgy pseudo-ish code:</p>\n\n<pre><code>for (o in this) {\n    if (this.hasOwnProperty(o)) {\n        this['get_' + o] = function() {\n            // return this.o -- but you'll need to create a closure to\n            // keep the correct reference to \"o\"\n        };\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference\">Javascript 1.5</a> does have <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Operators/Special%5FOperators/get%5FOperator\">getter/setter</a> <a href=\"http://en.wikipedia.org/wiki/Syntactic%5Fsugar\">syntactic sugar</a>.  It's explained very well by John Resig <a href=\"http://ejohn.org/blog/javascript-getters-and-setters/\">here</a></p>\n\n<p>It's not generic enough for web use, but certainly Firefox has them (also Rhino, if you ever want to use it on the server side).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The closest you can find is <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Object/noSuchMethod\">__noSuchMethod__</a>, which is JavaScript's equivalent of PHP's __call().</p>\n\n<p>Unfortunately, there's no equivalent of __get/__set, which is a shame, because with them we could have implemented __noSuchMethod__, but I don't yet see a way to implement properties (as in C#) using __noSuchMethod__.</p>\n\n<pre><code>var foo = {\n    __noSuchMethod__ : function(id, args) {\n        alert(id);\n        alert(args);\n    }\n};\n\nfoo.bar(1, 2);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>If you really need an implementation that works, you could \"cheat\" your way arround by testing the second parameter against <code>undefined</code>, this also means you could use get to actually set parameter.</p>\n\n<pre><code>var foo = {\n    args: {},\n\n    __noSuchMethod__ : function(id, args) {\n        if(args === undefined) {\n            return this.args[id] === undefined ? this[id] : this.args[id]\n        }\n\n        if(this[id] === undefined) {\n            this.args[id] = args;\n        } else {\n            this[id] = args;\n        }\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I ended up using a nickfs' answer to construct my own solution. My solution will automatically create get_{propname} and set_{propname} functions for all properties. It does check if the function already exists before adding them. This allows you to override the default get or set method with our own implementation without the risk of it getting overwritten. </p>\n\n<pre><code>for (o in this) {\n        if (this.hasOwnProperty(o)) {\n            var creategetter = (typeof this['get_' + o] !== 'function');\n            var createsetter = (typeof this['set_' + o] !== 'function');\n            (function () {\n                var propname = o;\n                if (creategetter) {\n                    self['get_' + propname] = function () {\n                        return self[propname];\n                    };\n                }\n                if (createsetter) {\n                    self['set_' + propname] = function (val) {\n                        self[propname] = val;\n                    };\n                }\n            })();\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Long story short: I'm in a situation where I'd like a PHP-style getter, but in JavaScript.</p>\n\n<p>My JavaScript is running in Firefox only, so Mozilla specific JS is OK by me.</p>\n\n<p>The only way I can find to make a JS getter requires specifying its name, but I'd like to define a getter for <em>all</em> possible names.  I'm not sure if this is possible, but I'd very much like to know.</p>\n",
            "last_activity_date": 1415828629,
            "question_id": 994143,
            "score": 21,
            "tags": [
                "javascript",
                "firefox",
                "getter"
            ],
            "title": "JavaScript getter for all properties"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Consider using <a href=\"http://api.jquery.com/jQuery.parseXML/\" rel=\"nofollow\">jQuery.parseXML</a> .</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The following will work in all major browsers, including IE 6:</p>\n\n<pre><code>var parseXml;\n\nif (typeof window.DOMParser != \"undefined\") {\n    parseXml = function(xmlStr) {\n        return ( new window.DOMParser() ).parseFromString(xmlStr, \"text/xml\");\n    };\n} else if (typeof window.ActiveXObject != \"undefined\" &amp;&amp;\n       new window.ActiveXObject(\"Microsoft.XMLDOM\")) {\n    parseXml = function(xmlStr) {\n        var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n        xmlDoc.async = \"false\";\n        xmlDoc.loadXML(xmlStr);\n        return xmlDoc;\n    };\n} else {\n    throw new Error(\"No XML parser found\");\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>var xml = parseXml(\"&lt;foo&gt;Stuff&lt;/foo&gt;\");\nalert(xml.documentElement.nodeName);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>If you need to parse large XML documents that you may not be able to completely hold in memory, consider using a SAX style parser like this one: <a href=\"https://github.com/isaacs/sax-js/\" rel=\"nofollow\">https://github.com/isaacs/sax-js/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Whats the easiest cross-browser/cross-platform way to parse XML files in Javascript?</p>\n",
            "last_activity_date": 1420730632,
            "question_id": 7949752,
            "score": 17,
            "tags": [
                "javascript",
                "xml",
                "cross-platform"
            ],
            "title": "Cross-Browser Javascript XML Parsing"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>What do you want to do with the attribute? Is it an html attribute or something of your own?</p>\n\n<p>Most of the time you can simply address it as a property: want to set a title on an element? <code>element.title = \"foo\"</code> will do it.</p>\n\n<p>For your own custom JS attributes the DOM is naturally extensible (aka expando=true), the simple upshot of which is that you can do <code>element.myCustomFlag = foo</code> and subsequently read it without issue.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Obligatory <a href=\"http://docs.jquery.com/Attributes\">jQuery solution</a>.  Finds and sets the <code>title</code> attribute to <code>foo</code>.  Note this selects a single element since I'm doing it by id, but you could easily set the same attribute on a collection by changing the selector.</p>\n\n<pre><code>$('#element').attr( 'title', 'foo' );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>You can read <a href=\"http://www.quirksmode.org/dom/w3c%5Fcore.html#attributes\">here</a> about the behaviour of attributes in many different browsers, including IE.</p>\n\n<p><code>element.setAttribute()</code> should do the trick, even in IE. Did you try it? If it doesn't work, than maybe\n<code>element.attributeName = 'value'</code> might work.</p>\n",
                    "is_accepted": true,
                    "score": 95
                },
                {
                    "body": "<p>What seems easy is actually tricky if you want to be completely compatible.</p>\n\n<p><pre><code>var e = document.createElement('div');</pre></code></p>\n\n<p>Let's say you have an id of 'div1' to add.\n<pre><code>e['id'] = 'div1';\ne.id = 'div1';\ne.attributes['id'] = 'div1';\ne.createAttribute('id','div1')</pre></code>\nThese will all work except the last in IE 5.5 (which is ancient history at this point but still is XP's default with no updates).</p>\n\n<p>But there are contingencies, of course.\nWill not work in IE prior to 8:<code>e.attributes['style']</code>\nWill not error but won't actually set the class, it must be className:<code>e['class']</code> .<br>\nHowever, if you're using attributes then this WILL work:<code>e.attributes['class']</code></p>\n\n<p>In summary, think of attributes as literal and object-oriented.  </p>\n\n<p>In literal, you just want it to spit out x='y' and not think about it.  This is what attributes, setAttribute, createAttribute is for (except for IE's style exception).  But because these are really objects things can get confused.</p>\n\n<p>Since you are going to the trouble of properly creating a DOM element instead of jQuery innerHTML slop, I would treat it like one and stick with the e.className = 'fooClass' and e.id = 'fooID'.  This is a design preference, but in this instance trying to treat is as anything other than an object works against you.</p>\n\n<p>It will never backfire on you like the other methods might, just be aware of class being className and style being an object so it's style.width not style=\"width:50px\".  Also remember tagName but this is already set by createElement so you shouldn't need to worry about it.</p>\n\n<p>This was longer than I wanted, but CSS manipulation in JS is tricky business.</p>\n",
                    "is_accepted": false,
                    "score": 25
                }
            ],
            "body": "<p>I'm trying to find a way that will add / update attribute using JavaScript.  I know I can do it with <code>setAttribute()</code> function but that doesn't work in IE.</p>\n",
            "last_activity_date": 1422809010,
            "question_id": 710275,
            "score": 61,
            "tags": [
                "javascript",
                "html",
                "cross-browser"
            ],
            "title": "How to add/update an attribute to an HTML element using JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The short answer is that you can't do it using JavaScript alone. You'd need a server-side handler to connect with the SMTP server to actually send the mail. There are many simple mail scripts online, such as this one for PHP:</p>\n\n<p><a href=\"http://www.buildwebsite4u.com/advanced/php.shtml\">Simple PHP mail script</a></p>\n\n<p>Using a script like that, you'd POST the contents of your web form to the script, using a function like this:</p>\n\n<p><a href=\"http://docs.jquery.com/Ajax/jQuery.post\">jQuery.post</a></p>\n\n<p>And then the script would take those values, plus a username and password for the mail server, and connect to the server to send the mail.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>This simple step-by-step JQuery + PHp is very comprehensive:\n<a href=\"http://trevordavis.net/blog/ajax-forms-with-jquery/\" rel=\"nofollow\">http://trevordavis.net/blog/ajax-forms-with-jquery/</a></p>\n\n<p>If you should wish the simplest solution of all, I'd recomend Enkoder:\n<a href=\"http://hivelogic.com/enkoder/form\" rel=\"nofollow\">http://hivelogic.com/enkoder/form</a></p>\n\n<p>I have used both in different situations.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is php I used to do emails  </p>\n\n<pre><code>&lt;?php\n    $first = $_POST['first'];\n    $last = $_POST['last'];\n    $email = $_POST['email'];\n    $extention = $_POST['extention'];\n    $hardware = $_POST['hardware'];\n    $software = $_POST['software'];\n    $description = $_POST['description'];\n    $Sendto = \"test@test.com\";\n    $Bcc = \"test2@test.com\";\n    mail($Sendto,$description,\n    \"Name:$first $last\n    Extention: $extention\n    Hardware: $hardware\n    Software: $software\n    Description: $description\",\"From: $email\");\n    mail($email,$description,\n    \"We have received your email and we will contact you shortly\",\"From: $Sendto\" ); ?&gt;\n    &lt;html&gt;\n    &lt;body&gt;\n    &lt;center&gt;&lt;h3&gt;Thank you \n    &lt;?php $first = $_POST['first'];print $first ;?&gt;\n    &lt;?php $last = $_POST['last'];print  $last; ?&gt; We will contact you shortly&lt;/h3&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Concern the Security of the client -server communication, at least have a token.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I developed a web-form for a blog, and I need to send its values to an email. How can I send an email by using jQuery or JavaScript alone?</p>\n",
            "last_activity_date": 1421622935,
            "question_id": 1415205,
            "score": 18,
            "tags": [
                "javascript"
            ],
            "title": "how to send email by using javascript or jquery"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>When you declare:</p>\n\n<pre><code>var s = '0123456789';\n</code></pre>\n\n<p>you create a string primitive.  That string primitive has methods that let you call methods on it without converting the primitive to a first class object.  So your supposition that this would be slower because the string has to be converted to an object is not correct.  It does not have to be converted to an object.  The primitive itself can invoke the methods.</p>\n\n<p>Converting it to an full-blown object (which allows you to add new properties to it) is an extra step and does not make the string oeprations faster (in fact your test shows that it makes them slower).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you use <code>new</code>, you're explicitly stating that you want to create an instance of an <em>Object</em>. Therefore, <code>new String</code> is producing an <em>Object</em> wrapping the <em>String</em> primitive, which means any action on it involves an extra layer of work.</p>\n\n<pre><code>typeof new String(); // \"object\"\ntypeof '';           // \"string\"\n</code></pre>\n\n<p>As they are of different types, your <em>JavaScript</em> interpreter may also optimise them differently, <a href=\"http://stackoverflow.com/questions/17256182/#comment25010010_17256182\">as mentioned in comments</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The existence of an object has little to do with the actual behaviour of a String in ECMAScript/JavaScript engines as the root scope will simply contain function objects for this. So the charAt(int) function in case of a string literal will be searched and executed.</p>\n\n<p>With a real object you add one more layer where the charAt(int) method also are searched on the object itself before the standard behaviour kicks in (same as above). Apparently there is a surprisingly large amount of work done in this case.</p>\n\n<p>BTW I don't think that primitives are actually converted into Objects but the script engine will simply mark this variable as string type and therefore it can find all provided functions for it so it looks like you invoke an object. Don't forget this is a script runtime which works on different principles than an OO runtime.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>JavaScript has two main type categories, primivites and objects.</p>\n\n<pre><code>var s = 'test';\nvar ss = new String('test');\n</code></pre>\n\n<p>The single quote/double quote patterns are identical in terms of functionality. That aside, the behaviour you are trying to name is called auto-boxing. So what actually happens is that a primitive is converted to its wrapper type when a method of the wrapper type is invoked. Put simple:</p>\n\n<pre><code>var s = 'test';\n</code></pre>\n\n<p>Is a primitive data type. It has no methods, it is nothing more than a pointer to a raw data memory reference, which explains the much faster random access speed.</p>\n\n<p>So what happens when you do <code>s.charAt(i)</code> for instance?</p>\n\n<p>Since <code>s</code> is not an instance of <code>String</code>, JavaScript will auto-box <code>s</code>, which has <code>typeof string</code> to its wrapper type, <code>String</code>, with <code>typeof object</code> or more precisely <code>s.valueOf(s).prototype.toString.call = [object String]</code>. </p>\n\n<p>The auto-boxing behaviour casts <code>s</code> back and forth to its wrapper type as needed, but the standard operations are incredibly fast since you are dealing with a simpler data type. However auto-boxing and <code>Object.prototype.valueOf</code> have different effects.</p>\n\n<p>If you want to force the auto-boxing or to cast a primitive to its wrapper type, you can use <code>Object.prototype.valueOf</code>, but the behaviour is different. Based on a wide variety of test scenarios auto-boxing only applies the 'required' methods, without altering the primitive nature of the variable. Which is why you get better speed.</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>This is rather implementation-dependent, but I'll take a shot. I'll exemplify with V8 but I assume other interpreters use similar approaches.</p>\n\n<p>A string primitive is parsed to a <a href=\"http://bespin.cz/~ondras/html/classv8_1_1String.html\" rel=\"nofollow\"><code>v8::String</code></a> object. Hence, methods can be invoked directly on it as mentioned by <strong>@jfriend00</strong>.</p>\n\n<p>A String object, in the other hand, is parsed to a <a href=\"http://bespin.cz/~ondras/html/classv8_1_1StringObject.html\" rel=\"nofollow\"><code>v8::StringObject</code></a> which extends <code>Object</code> and, apart from being a full fledged object, serve as a wrapper for <code>v8::String</code>.</p>\n\n<p>Now it is only logical, a call to <code>new String('').method()</code> has to unbox this <code>v8::StringObject</code>'s <code>v8::String</code> before executing the method, hence it is slower.</p>\n\n<hr>\n\n<p>In most other languages, primitive values do not have methods.</p>\n\n<p>The way MDN puts it seems to be the simplest way to explain how primitives' auto-boxing works (as also mentioned in <strong>@flav</strong>'s answer), that is, how JavaScript's <em>primitive-y</em> values can invoke methods.</p>\n\n<p>However, a smart interpreter will not convert a string <em>primitive-y</em> to String object every time you need to call a method, obviously.</p>\n\n<p>At very low level, Strings are most often implemented as immutable scalar values. Example wrapper structure:</p>\n\n<pre><code>StringObject &gt; String (&gt; ...) &gt; char[]\n</code></pre>\n\n<p>The more far you're from the primitive, the longer it will take to get to it. In practice, <code>String</code> primitives are much more frequent than <code>StringObject</code>s, hence it is not a surprise for interpreters to add methods to the String primitives' corresponding (interpreted) objects' Class instead of converting back and forth between <code>String</code> and <code>StringObject</code> as MDN's explanation suggests.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>String Literal vs String Object</p>\n\n<p>String Literal: String literals are immutable which means once they are created their state can't be change , which also makes them thread safe.</p>\n\n<p>var a = 's';\nvar b = 's';</p>\n\n<p>a==b result will be 'true' both string refer's same object</p>\n\n<p>String Object:</p>\n\n<p>Here two different objects are created and they have different references:</p>\n\n<p>var a= new String(\"s\");\nvar b= new String(\"s\");</p>\n\n<p>a==b result will be false , because they have different references. </p>\n\n<p>Cheerios !!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Taken from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String?redirectlocale=en-US&amp;redirectslug=JavaScript/Reference/Global_Objects/String#Description\">MDN</a></p>\n\n<blockquote>\n  <p>String literals (denoted by double or single quotes) and strings\n  returned from String calls in a non-constructor context (i.e., without\n  using the new keyword) are primitive strings. JavaScript automatically\n  converts primitives to String objects, so that it's possible to use\n  String object methods for primitive strings. In contexts where a\n  method is to be invoked on a primitive string or a property lookup\n  occurs, JavaScript will automatically wrap the string primitive and\n  call the method or perform the property lookup.</p>\n</blockquote>\n\n<p>So, I thought (logically) operations (method calls) on string literals should be slower than operations on string Objects because any string literal is converted to string Object (extra work) before the <code>method</code> being applied on the string.</p>\n\n<p>But in this <a href=\"http://jsperf.com/heera-string-literal-vs-object\">test case</a>, the result is opposite. The <strong>code block-1</strong> runs faster than the <strong>code block-2</strong>, both code blocks are given below:</p>\n\n<p><strong>code block-1 :</strong></p>\n\n<pre><code>var s = '0123456789';\nfor (var i = 0; i &lt; s.length; i++) {\n  s.charAt(i);\n}\n</code></pre>\n\n<p><strong>code block-2 :</strong></p>\n\n<pre><code>var s = new String('0123456789');\nfor (var i = 0; i &lt; s.length; i++) {\n    s.charAt(i);\n}\n</code></pre>\n\n<p>The results varies in browsers but the <strong>code block-1</strong> is always faster. Can anyone please explain this, why the <strong>code block-1</strong> is faster than <strong>code block-2</strong>.</p>\n",
            "last_activity_date": 1414239897,
            "question_id": 17256182,
            "score": 23,
            "tags": [
                "javascript",
                "string",
                "object"
            ],
            "title": "What is the difference between string literals and String objects in JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>On your form element, add an <code>onSubmit</code> attribute and put some javascript in it - return <code>false</code> to stop the submit.</p>\n\n<pre><code>&lt;form method=\"POST\" action=\"somepage\" onSubmit=\"if(!Valid()){return false;};\"&gt;\n</code></pre>\n\n<p>Where <code>Valid</code> is a javascript validation function.</p>\n\n<p>If <code>Valid</code> returns true for valid or false for invalid, this can be shortened to:</p>\n\n<pre><code>onSubmit=\"return Valid();\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>you can use <code>onSubmit</code> like this</p>\n\n<pre><code>&lt;form onsubmit=\"alert('stop submit'); return false;\" &gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;javascript&gt;\n   function toSubmit(){\n      alert('I will not submit');\n      return false;\n   }\n&lt;/javascript&gt;\n\n&lt;form onsubmit=\"return toSubmit();\" &gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/BJEmR/5/\">demo</a></p>\n",
                    "is_accepted": true,
                    "score": 50
                },
                {
                    "body": "<pre><code>var form = document.getElementById(\"idOfForm\");\nform.onsubmit = function() {\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Unlike the other answers, return <code>false</code> is only <em>part</em> of the answer. Consider the scenario in which a JS error occurs prior to the return statement...</p>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;form onsubmit=\"return mySubmitFunction()\"&gt;\n  ...\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>script</strong></p>\n\n<pre><code>function mySubmitFunction()\n{\n  someBug()\n  return false;\n}\n</code></pre>\n\n<p>returning <code>false</code> here won't be executed and the form will be submitted either way. You should also call <code>preventDefault</code> to prevent the default form action for Ajax form submissions.</p>\n\n<pre><code>function mySubmitFunction(evt) {\n  evt.preventDefault();\n  someBug();\n  return false;\n}\n</code></pre>\n\n<p>In this case, even with the bug the form won't submit!</p>\n\n<p>Alternatively, a <code>try...catch</code> block could be used.</p>\n\n<pre><code>function mySubmit(evt) { \n  evt.preventDefault(); \n  try {\n   someBug();\n  } catch (e) {\n   throw new Error(e.message);\n  }\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Try this one...</p>\n\n<p>HTML Code</p>\n\n<pre><code>&lt;form class=\"submit\"&gt;\n    &lt;input type=\"text\" name=\"text1\"/&gt;\n    &lt;input type=\"text\" name=\"text2\"/&gt;\n    &lt;input type=\"submit\" name=\"Submit\" value=\"submit\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>jQuery Code</p>\n\n<pre><code>$(function(){\n    $('.submit').on('submit',function(event){\n        event.preventDefault() ;\n        alert(\"Form Submission stoped.\");\n    });\n});\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(function(){\n    $('.submit').on('submit',function(event){\n       event.preventDefault() ;\n       event.stopPropagation();\n       alert(\"Form Submission prevented / stoped.\");\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following works as of now (tested in chrome and firefox):</p>\n\n<pre><code>&lt;form onsubmit=\"event.preventDefault(); return validateMyForm();\"&gt;\n</code></pre>\n\n<p>where validateMyForm() is a function that returns <code>false</code> if validation fails. The key point is to use the name <code>event</code>. We cannot use for e.g. <code>e.preventDefault()</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To follow unobtrusive javascript programming conventions, and depending on how quickly the DOM will load, it may be a good idea to use the following:</p>\n\n<pre><code>&lt;form onsubmit=\"return false;\"&gt;&lt;/form&gt;\n</code></pre>\n\n<p>Then wire up events using the onload or DOM ready if you're using a library.</p>\n\n<p>example: <a href=\"http://jsfiddle.net/aghost7/FudJz/8/\" rel=\"nofollow\">http://jsfiddle.net/aghost7/FudJz/8/</a></p>\n\n<p>Also, I would always use the <code>action</code> attribute as some people may have some plugin like noscript running which would then break the validation. If you're using the action attribute, at the very least your user will get redirected by the server based on the backend validation. If you're using something like <code>window.location</code>, on the other hand, things will be bad.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;form action=\".....\" method=\"post\" name=\"form1\" onsubmit=\"return onSubmitCheck();\" &gt;\n  &lt;input type=\"text\" name=\"title\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>and now in javascript</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n       function onSubmitCheck(){\n\n            if (document.forms[\"form1\"][\"title\"].value.length == 0 || document.forms[\"new_job_form\"][\"title\"].value.length &lt; 15) \n            {\n                alert('Tiltle must have minimum of 15 characters. Your title is too short');\n                return false;\n            }\n            else\n            {   \n                return true;\n            }\n       }\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found the following works fine for me (with a little help of jquery):</p>\n\n<pre><code>&lt;form id=\"myForm\" onkeydown=\"return myFunction(param1, param2, ..., paramN)\"&gt;...\n</code></pre>\n\n<p>and there goes the myFunction definition:</p>\n\n<pre><code>function myFunction(param1, param2, ..., paramN) {\n    $('#myForm').submit(\n        function(event) {\n            event.preventDefault();\n            //your logic goes here;\n            return false;\n         }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a form that has a submit button in it somewhere.</p>\n\n<p>However, I would like to somehow 'catch' the submit event and prevent it from occurring.</p>\n\n<p>Is there some way I can do this?</p>\n\n<p>I can't modify the submit button, because it's part of a custom control.</p>\n",
            "last_activity_date": 1420580407,
            "question_id": 3350247,
            "score": 23,
            "tags": [
                "javascript",
                "html",
                "forms"
            ],
            "title": "How to prevent form from being submitted?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>From a user experience stand-point, you don't want a major action to be done passively. </p>\n\n<p>Something major like a window close should be the result of an action by the user.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For security reasons, your script cannot close a window/tab that it did not open.</p>\n\n<p>The solution is to present the age prompt at an earlier point in the navigation history.  Then, you can choose to allow them to enter your site or not based on their input.</p>\n\n<p>Instead of closing the page that presents the prompt, you can simply say, \"Sorry\", or perhaps redirect the user to their homepage.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>function closeWindow() {\n    netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserWrite\");\n    alert(\"This will close the window\");\n    window.open('','_self');\n    window.close();\n}\n\ncloseWindow();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 11
                },
                {
                    "body": "<p>This code works for both IE 7 and the latest version of Mozilla although the default setting in mozilla doesnt allow to close a window through javascript.</p>\n\n<p>Here is the code:</p>\n\n<p>function F11() \n   {\n     window.open('','_parent','');\n     window.open(\"login.aspx\", \"\", \"channelmode\");\n     window.close();\n   }</p>\n\n<p>To change the default setting :</p>\n\n<p>1.type\"about:config \" in your firefox address bar and enter;</p>\n\n<p>2.make sure your \"dom.allow_scripts_to_close_windows\" is true</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>\"about:config\" suggestions do not fix applications you distribute over the web. How about preventing a user from spoofing a url designed for a pop-up?  There may not be an answer for this one, but if you don't have anything constructive to add, why comment at all.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>self.close() does not work, are you sure you closing a window and not a script generated popup ?</p>\n\n<p>you guys might want to look at this : <a href=\"https://bugzilla.mozilla.org/show%5Fbug.cgi?id=183697\" rel=\"nofollow\">https://bugzilla.mozilla.org/show%5Fbug.cgi?id=183697</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If the browser people see this as a security and/or usability problem, then the answer to your question is to simply not close the window, since by definition they will come up with solutions for your workaround anyway. There is a nice summation about the reasoning why the choice have been in the firefox bug database <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=190515#c70\" rel=\"nofollow\">https://bugzilla.mozilla.org/show_bug.cgi?id=190515#c70</a></p>\n\n<p>So what can you do?</p>\n\n<p>Change the specification of your website, so that you have a solution for these people. You could for instance take it as an opportunity to direct them to a partner.</p>\n\n<p>That is, see it as a handoff to someone else that (potentially) needs it. As an example, Hanselman had a recent article about what to do in the other similar situation, namely 404 errors: <a href=\"http://www.hanselman.com/blog/PutMissingKidsOnYour404PageEntirelyClientSideSolutionWithYQLJQueryAndMSAjax.aspx\" rel=\"nofollow\">http://www.hanselman.com/blog/PutMissingKidsOnYour404PageEntirelyClientSideSolutionWithYQLJQueryAndMSAjax.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This code will work it out definitely </p>\n\n<pre><code>function closing() {\nvar answer = confirm(\"Do you wnat to close this window ?\");\n    if (answer){\n        netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserWrite');\n        window.close();\n    }\n    else{\n        stop;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I need to close the tab which displays my webpage, by the click of a button. But firefox does not allow to close the window by javascript as long as it is not opened by javascript.\nIf I set the value of <code>dom.allow_scripts_to_close_windows</code> to be \"true\", then even normal <code>window.close()</code> works too. But that is not a good solution. :(</p>\n\n<p>I tried the following workaround suggested in one of the forums:</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\nfunction closeWindow() {\n   window.open('','_parent','');\n   window.close();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>It is supposed to fool the browser into thinking that it was actually opened by javascript, but this does not work in Firefox 3.</p>\n\n<p>Can anyone please suggest a workaround? </p>\n",
            "last_activity_date": 1315555469,
            "question_id": 760422,
            "score": 22,
            "tags": [
                "javascript",
                "firefox"
            ],
            "title": "How can I close a window with Javascript on Mozilla Firefox 3?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>This is not <a href=\"http://www.json.org/\" rel=\"nofollow\">JSON</a>. JSON was designed to be simple; allowing arbitrary expressions is not simple.</p>\n\n<p>In full JavaScript, I don't think you can do this directly. You cannot refer to <code>this</code> until the object called <code>obj</code> is fully constructed. So you need a workaround, that someone with more JavaScript-fu than I will provide.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can't refer to a property of an object before you have initialized that object; use an external variable.</p>\n\n<pre><code>var key1 = \"it\";\nvar obj = {\n  key1 : key1,\n  key2 : key1 + \" works!\"\n};\n</code></pre>\n\n<p>Also, this is not a \"JSON object\"; it is a Javascript object. JSON is a method of representing an object with a string (which happens to be valid Javascript code).</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>That's not a <a href=\"http://json.org\">JSON</a> object, that's a Javascript object created via object literal notation. (JSON is a subset of object literal notation.)</p>\n\n<p>As far as I'm aware, there's no way within the object literal to refer to another key of that same literal, because there's no reference to the object being created yet.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Maybe you can think about removing the attribute to a function. I mean something like this:</p>\n\n<pre><code>var obj = {\n key1 : \"it \",\n key2 : function() {return this.key1 + \" works!\";}\n};\n\nalert(obj.key2());\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Because the statement defining <code>obj</code> hasn't finished, <code>key1</code> doesn't exist yet. Consider this solution:</p>\n\n<pre><code>var obj = { key1: \"it\" };\nobj.key2 = obj.key1 + ' ' + 'works!';\n// obj.key2 is now 'it works!'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This can be achieved by using constructor function instead of literal</p>\n\n<pre><code>var o = new function() {\n  this.foo = \"it\";\n  this.bar = this.foo + \" works\"\n}\n\nalert(o.bar)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>You can also reference the <code>obj</code> once you are inside the function instead of <code>this</code>.</p>\n\n<pre><code>var obj = {\n    key1: \"it\",\n    key2: function(){return obj.key1 + \" works!\"}\n};\nalert(obj.key2());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One alternative would be to use a getter/setter methods.</p>\n\n<p>For instance, if you only care about reading the calculated value:</p>\n\n<pre><code>var book  = {}\n\nObject.defineProperties(book,{\n    key1: { value: \"it\", enumerable: true },\n    key2: {\n        enumerable: true,\n        get: function(){\n            return this.key1 + \" works!\";\n        }\n    }\n});\n\nconsole.log(book.key2); //prints \"it works!\"\n</code></pre>\n\n<p>The above code, though, won't let you define another value for key2. </p>\n\n<p>So, the things become a bit more complicated if you would like to also redefine the value of key2. It will always be a calculated value. Most likely that's what you want.</p>\n\n<p>However, if you would like to be able to redefine the value of key2, then you will need a place to cache its value independently of the calculation.</p>\n\n<p>Somewhat like this:</p>\n\n<pre><code>var book  = { _key2: \" works!\" }\n\nObject.defineProperties(book,{\n    key1: { value: \"it\", enumerable: true},\n    _key2: { enumerable: false},\n    key2: {\n        enumerable: true,\n        get: function(){\n            return this.key1 + this._key2;\n        },\n        set: function(newValue){\n            this._key2 = newValue;\n        }\n    }\n});\n\nconsole.log(book.key2); //it works!\n\nbook.key2 = \" doesn't work!\";\nconsole.log(book.key2); //it doesn't work!\n\nfor(var key in book){\n    //prints both key1 and key2, but not _key2\n    console.log(key + \":\" + book[key]); \n}\n</code></pre>\n\n<p>Another interesting alternative is to use a self-initializing object:</p>\n\n<pre><code>var obj = ({\n  x: \"it\",\n  init: function(){\n    this.y = this.x + \" works!\";\n    return this;\n  }\n}).init();\n\nconsole.log(obj.y); //it works!\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Lets say I have the following javascript:</p>\n\n<pre><code>var obj = {\n key1 : \"it \",\n key2 : key1 + \" works!\"\n};\nalert(obj.key2);\n</code></pre>\n\n<p>This errors with \"key1 is not defined\". I have tried </p>\n\n<pre><code>this.key1\nthis[key1]\nobj.key1\nobj[key1]\nthis[\"key1\"]\nobj[\"key1\"]\n</code></pre>\n\n<p>and they never seem to be defined.</p>\n\n<p>How can I get key2 to refer to key1's value?</p>\n",
            "last_activity_date": 1392614103,
            "question_id": 2787245,
            "score": 33,
            "tags": [
                "javascript",
                "json",
                "object"
            ],
            "title": "How can a Javascript object refer to values in itself?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In Firefox, you can use the <code>::-moz-selection</code> psuedo-class.<br>\nIn Webkit, you can use the <code>::selection</code> pseudo-class.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>To make the highlight stick permanently, I believe you are going to have to wrap the selection in a new DOM element (<code>span</code> should do), to which you can then attach style properties.  I don't know if jQuery can do that for you.  Keep in mind that selections can span element boundaries, so in the general case you're going to have to inject a whole bunch of new elements</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a crude example of how it could work.  As Zack points out you'll need to be aware of cases where the selection spans multiple elements.  This isn't intended to be used as-is, just something to help get ideas flowing.  Tested in Chrome.</p>\n\n<pre><code>var selection = window.getSelection();\nvar text = selection.toString();\nvar parent = $(selection.focusNode.parentElement);\nvar oldHtml = parent.html();\nvar newHtml = oldHtml.replace(text, \"&lt;span class='highlight'&gt;\"+text+\"&lt;/span&gt;\");\nparent.html( newHtml );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Have a look at a little example i made at <a href=\"http://www.jsfiddle.net/hbwEE/3/\" rel=\"nofollow\">http://www.jsfiddle.net/hbwEE/3/</a></p>\n\n<p>It does not take into account selections that span multiple elements.. \n(<em>IE will do but will mess the html a bit ..</em>)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The easiest way to do this is to use <code>execCommand()</code>, which has a command to change the background colour in all modern browsers.</p>\n\n<p>The following should do what you want on any selection, including ones spanning multiple elements. In non-IE browsers it turns on <code>designMode</code>, applies a background colour and then switches <code>designMode</code> off again.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Fixed in IE 9.</p>\n\n<pre><code>function makeEditableAndHighlight(colour) {\n    var range, sel = window.getSelection();\n    if (sel.rangeCount &amp;&amp; sel.getRangeAt) {\n        range = sel.getRangeAt(0);\n    }\n    document.designMode = \"on\";\n    if (range) {\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n    // Use HiliteColor since some browsers apply BackColor to the whole block\n    if (!document.execCommand(\"HiliteColor\", false, colour)) {\n        document.execCommand(\"BackColor\", false, colour);\n    }\n    document.designMode = \"off\";\n}\n\nfunction highlight(colour) {\n    var range, sel;\n    if (window.getSelection) {\n        // IE9 and non-IE\n        try {\n            if (!document.execCommand(\"BackColor\", false, colour)) {\n                makeEditableAndHighlight(colour);\n            }\n        } catch (ex) {\n            makeEditableAndHighlight(colour)\n        }\n    } else if (document.selection &amp;&amp; document.selection.createRange) {\n        // IE &lt;= 8 case\n        range = document.selection.createRange();\n        range.execCommand(\"BackColor\", false, colour);\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 14
                }
            ],
            "body": "<p>I'm trying to make a javascript bookmarklet that will act as a highlighter, changing the background of selected text on a webpage to yellow when the bookmarklet is pressed.</p>\n\n<p>I'm using the following code to get the selected text, and it works fine, returning the correct string</p>\n\n<pre><code>function getSelText() {\nvar SelText = '';\nif (window.getSelection) {\n    SelText = window.getSelection();\n} else if (document.getSelection) {\n    SelText = document.getSelection();\n} else if (document.selection) {\n    SelText = document.selection.createRange().text;\n}\nreturn SelText;\n</code></pre>\n\n<p>}</p>\n\n<p>However, when I created a similar function to change the CSS of the selected text using jQuery, it isn't working:</p>\n\n<pre><code>function highlightSelText() {\nvar SelText;\nif (window.getSelection) {\n    SelText = window.getSelection();\n} else if (document.getSelection) {\n    SelText = document.getSelection();\n} else if (document.selection) {\n    SelText = document.selection.createRange().text;\n}\n$(SelText).css({'background-color' : 'yellow', 'font-weight' : 'bolder'});\n</code></pre>\n\n<p>}</p>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1325884534,
            "question_id": 3223682,
            "score": 10,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "bookmarklet",
                "highlighting"
            ],
            "title": "Change CSS of selected text using Javascript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild\"><code>removeChild</code></a> should be invoked on the parent, i.e.:</p>\n\n<pre><code>parent.removeChild(child);\n</code></pre>\n\n<p>In your example, you should be doing something like:</p>\n\n<pre><code>if (frameid) {\n    frameid.parentNode.removeChild(frameid);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 111
                },
                {
                    "body": "<p>Seems I don't have enough rep to post a comment, so another answer will have to do.</p>\n\n<p>When you unlink a node using removeChild() or by setting the innerHTML property on the parent, you also need to make sure that there is nothing else referencing it otherwise it won't actually be destroyed and will lead to a memory leak. There are lots of ways in which you could have taken a reference to the node before calling removeChild() and you have to make sure those references that have not gone out of scope are explicitly removed.</p>\n\n<p>Doug Crockford writes <a href=\"http://javascript.crockford.com/memory/leak.html\">here</a> that event handlers are known a cause of circular references in IE and suggests removing them explicitly as follows before calling removeChild()</p>\n\n<pre><code>function purge(d) {\n    var a = d.attributes, i, l, n;\n    if (a) {\n        for (i = a.length - 1; i &gt;= 0; i -= 1) {\n            n = a[i].name;\n            if (typeof d[n] === 'function') {\n                d[n] = null;\n            }\n        }\n    }\n    a = d.childNodes;\n    if (a) {\n        l = a.length;\n        for (i = 0; i &lt; l; i += 1) {\n            purge(d.childNodes[i]);\n        }\n    }\n}\n</code></pre>\n\n<p>And even if you take a lot of precautions you can still get memory leaks in IE as described by Jens-Ingo Farley <a href=\"http://com.hemiola.com/2009/11/23/memory-leaks-in-ie8/\">here</a>.</p>\n\n<p>And finally, don't fall into the trap of thinking that Javascript <strong>delete</strong> is the answer. It seems to be suggested by many, but won't do the job. <a href=\"http://perfectionkills.com/understanding-delete/\">Here</a> is a great reference on understanding <strong>delete</strong> by Kangax.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>In most browsers, there's a slightly more succinct way of removing an element from the DOM than calling <code>.removeChild(element)</code> on its parent, which is to just call <code>element.remove()</code>. In due course, this will probably become the standard and idiomatic way of removing an element from the DOM.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode.remove\" rel=\"nofollow\"><code>.remove()</code></a> method was added to the DOM Living Standard in 2011 (<a href=\"https://github.com/whatwg/dom/commit/85ff0b82bc58d01ce8e0c2f90dab04a725e31c2f\" rel=\"nofollow\">commit</a>), and has since been implemented by Chrome, Firefox, Safari and Opera. However, as of today it's still not supported in Internet Explorer.</p>\n\n<p>If we want to use it today, then, we'll need to shim it for non-supporting browsers. This turns out to be a little irritating, both because nobody seems to have made a all-purpose DOM shim that contains these methods, and because we're not just adding the method to a single prototype; it's a method of <code>ChildNode</code>, which is just an interface defined by the spec and isn't accessible to JavaScript, so we can't add anything to its prototype. So we need to find all the prototypes that inherit from <code>ChildNode</code> and are actually defined in the browser, and add <code>.remove</code> to them.</p>\n\n<p>Here's the shim I came up with, which I've confirmed works in IE 8.</p>\n\n<pre><code>(function () {\n    var typesToPatch = ['DocumentType', 'Element', 'CharacterData'],\n        remove = function () {\n            // The check here seems pointless, since we're not adding this\n            // method to the prototypes of any any elements that CAN be the\n            // root of the DOM. However, it's required by spec (see point 1 of\n            // https://dom.spec.whatwg.org/#dom-childnode-remove) and would\n            // theoretically make a difference if somebody .apply()ed this\n            // method to the DOM's root node, so let's roll with it.\n            if (this.parentNode != null) {\n                this.parentNode.removeChild(this);\n            }\n        };\n\n    for (var i=0; i&lt;typesToPatch.length; i++) {\n        var type = typesToPatch[i];\n        if (window[type] &amp;&amp; !window[type].prototype.remove) {\n            window[type].prototype.remove = remove;\n        }\n    }\n})();\n</code></pre>\n\n<p>This won't work in IE 7 or lower, since <a href=\"http://stackoverflow.com/q/597268/1709587\">extending DOM prototypes isn't possible before IE 8</a>. I figure, though, that on the verge of 2015 most people needn't care about such things.</p>\n\n<p>Once you've included them shim, you'll be able to remove a DOM element <code>element</code> from the DOM by simply calling</p>\n\n<pre><code>element.remove();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I'm trying to test if a DOM element exists, and if it does exist delete it, and if it doesn't exist create it.</p>\n\n<pre><code>var duskdawnkey = localStorage[\"duskdawnkey\"];\nvar iframe = document.createElement(\"iframe\");\nvar whereto = document.getElementById(\"debug\");\nvar frameid = document.getElementById(\"injected_frame\");\niframe.setAttribute(\"id\", \"injected_frame\");\niframe.setAttribute(\"src\", 'http://google.com');\niframe.setAttribute(\"width\", \"100%\");\niframe.setAttribute(\"height\", \"400\");\n\nif (frameid) // check and see if iframe is already on page\n{ //yes? Remove iframe\n    iframe.removeChild(frameid.childNodes[0]);\n} else // no? Inject iframe\n{\n    whereto.appendChild(iframe);\n    // add the newly created element and it's content into the DOM\n    my_div = document.getElementById(\"debug\");\n    document.body.insertBefore(iframe, my_div);\n}\n</code></pre>\n\n<p>Checking if it exists works, creating the element works, but deleting the element doesn't. Basically all this code does is inject an iframe into a webpage by clicking a button. What I would like to happen is if the iframe is already there to delete it. But for some reason I am failing.</p>\n",
            "last_activity_date": 1423413066,
            "question_id": 8830839,
            "score": 51,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "JavaScript DOM remove element"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>hey try this please\": <a href=\"http://jsfiddle.net/MtVxx/2/\">http://jsfiddle.net/MtVxx/2/</a></p>\n\n<p>Good link for your specific case in here: <a href=\"http://viralpatel.net/blogs/jquery-get-text-element-without-child-element/\">http://viralpatel.net/blogs/jquery-get-text-element-without-child-element/</a> (This will only get the text of the element)</p>\n\n<p>Hope this helps, <code>:)</code></p>\n\n<p><strong>code</strong></p>\n\n<pre><code>jQuery.fn.justtext = function() {\n\n    return $(this).clone()\n            .children()\n            .remove()\n            .end()\n            .text();\n\n};\n\nalert($('#mydiv').justtext());\u200b\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<p>The currently <a href=\"http://stackoverflow.com/a/11362182/1338292\">accepted answer</a> is pretty horrible in terms of performance, so I felt obligated to write a more lightweight one:</p>\n\n<pre><code>$.fn.mytext = function() {\n    var str = '';\n\n    this.contents().each(function() {\n        if (this.nodeType == 3) {\n            str += this.textContent || this.innerText || '';\n        }\n    });\n\n    return str;\n};\n\nconsole.log($('#mydiv').mytext());\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p>for example we have this file</p>\n\n<pre><code>&lt;div id=\"mydiv\"&gt;\n    some text here \n    &lt;div id=\"inner div\"&gt;\n         text for inner div\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>i need to get <code>#mydiv</code> text only with some code like this :</p>\n\n<pre><code>alert($('#mydiv').text());  // will alert \"some text here\"\n</code></pre>\n",
            "last_activity_date": 1388463983,
            "question_id": 11362085,
            "score": 18,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jquery - get text for element without children text"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>No, there isn't. The nearest is the <code>propertychange</code> event, which fires in response to a change in an attribute or CSS property of an element. It fires in response to changing the <code>innerHTML</code> property of an element directly but not when the contents of the elements are altered by some other means (e.g. by using DOM methods such as <code>appendChild()</code> or by altering the <code>innerHTML</code> of a child element).</p>\n\n<h3>UPDATE 6 February 2014</h3>\n\n<p>As pointed out in the comments, there is a workaround. It's based on an elaborate hack and I'd recommend using mutation observers instead wherever possible. See @naugtur's answer for details.</p>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>You can over-ride all the DOM-manipulation methods - appendChild, insertBefore, replaceChild, insertAdjacentHTML, etc - and monitor innerHTML with onpropertychange. </p>\n\n<p>You might be able to come up with a solution that satisfies your requirements. </p>\n\n<p>BTW, it seems that DOMNodeInserted, etc will be deprecated by browsers in the future.\nSee <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents\">http://www.w3.org/TR/DOM-Level-3-Events/#events-mutationevents</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Seems, DHTML Behaviors can be used in IE to emulative <code>DOMNodeInserted</code>.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>onreadystatechange will work in IE. A DHTML behavior must be attached to the element via htc, but the htc file does not have to exist:</p>\n\n<pre><code>if (!!document.addEventListener)\n  {\n  $(domnode).get(0).addEventListener(\"DOMNodeInserted\", fixtext, false);\n  }\nelse\n  {\n  $(domnode).get(0).addBehavior(\"foo.htc\");\n  $(domnode).get(0).attachEvent(\"onreadystatechange\", fixtext);\n  }\n</code></pre>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms536957%28v=VS.85%29.aspx\" rel=\"nofollow\">onreadystatechange event reference</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Using onreadystatechange as suggested by Paul Sweatte does not really work. The readystatechange event is only triggered while loading foo.htc. It has nothing to do with changing the DOM node.</p>\n\n<p>I've set up a little fiddle to demonstrate it. Have a look at <a href=\"http://jsfiddle.net/Kermit_the_frog/FGTDv/\" rel=\"nofollow\">http://jsfiddle.net/Kermit_the_frog/FGTDv/</a> or <a href=\"http://jsfiddle.net/Kermit_the_frog/FGTDv/embedded/result/\" rel=\"nofollow\">http://jsfiddle.net/Kermit_the_frog/FGTDv/embedded/result/</a>.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input type=\"button\" id=\"fooBtn\" value=\"add\" /&gt;\n&lt;div id=\"fooDiv\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>JS/Jquery:</p>\n\n<pre><code>function bar(e) {\n    var state = $('#fooDiv').get(0).readyState;\n    alert (state);\n}\n\n$(\"#fooBtn\").on(\"click\", function(){\n    $('#fooDiv').get(0).addBehavior(\"foo.htc\");\n    $('#fooDiv').get(0).attachEvent(\"onreadystatechange\", bar);\n});\n</code></pre>\n\n<p>As you can see: even though there is no DOM manipulation going on there is a readystatechange event.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A dirty workaround is to intercept the prototype methods of type Element as follows:</p>\n\n<pre><code>window.attachEvent('onload', function() {\n    invokeNodeInserted(document);\n    (function(replace) {\n        Element.prototype.appendChild = function(newElement, element) {\n            invokeNodeInserted(newElement);\n            return replace.apply(this, [newElement, element]);\n        };\n    })(Element.prototype.appendChild);\n    (function(replace) {\n        Element.prototype.insertBefore = function(newElement, element) {\n            invokeNodeInserted(newElement);\n            return replace.apply(this, [newElement, element]);\n        };\n    })(Element.prototype.insertBefore);\n    (function(replace) {\n        Element.prototype.replaceChild = function(newElement, element) {\n            invokeNodeInserted(newElement);\n            return replace.apply(this, [newElement, element]);\n        };\n    })(Element.prototype.replaceChild);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Other than using a timer to count the number of elements over time and looking for changes, I can't think of a better way to simulate this event. </p>\n\n<p>Is there some sort of proprietary IE version of DOMNodeInserted? Thanks.</p>\n",
            "last_activity_date": 1400758440,
            "question_id": 2143929,
            "score": 18,
            "tags": [
                "javascript",
                "internet-explorer",
                "dom",
                "mutation-events"
            ],
            "title": "DOMNodeInserted equivalent in IE?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Tested in a fiddle with Chrome and Firefox: <a href=\"http://jsfiddle.net/imsky/XBKYZ/\" rel=\"nofollow\">http://jsfiddle.net/imsky/XBKYZ/</a></p>\n\n<pre><code>var s = new Session;\ns.addWidget({\"name\":\"test\"});\ns.getWidget()\n</code></pre>\n\n<p>Console output:</p>\n\n<pre><code>Object\nwidgets: Array[1]\n__proto__: Object\n\n[\nObject\nname: \"test\"\n__proto__: Object\n] \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Remember that <code>[]</code> in JS is just an alias to <code>new Array()</code>, and since objects are passed by reference, every instance of your Session model will share the same array object.  This leads to all kinds of problems, including arrays appearing to be empty.</p>\n\n<p>To make this work the way you want, you need to initialize your widgets array in the constructor. This will create a unique widget array for each Session object, and should alleviate your problem:</p>\n\n<pre><code>var Session = Backbone.Model.extend({\n    defaults: {\n        // ...\n        widgets: false\n    },\n    initialize: function(){\n        this.set('widgets',[]);\n    },\n    addWidget: function (widget) {\n        var widgets = this.get(\"widgets\");\n\n        widgets.push(widget);\n        this.trigger(\"change:widgets\", this, widgets);\n    },\n    // ...\n    // I have a method on the model to grabbing a member of the array\n    getWidget: function (id) { \n        console.log(this.attributes);\n        console.log(this.attributes.widgets);\n    // ...\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Be careful about trusting the console, there is often asynchronous behavior that can trip you up.</p>\n\n<p>You're expecting <code>console.log(x)</code> to behave like this:</p>\n\n<ol>\n<li>You call <code>console.log(x)</code>.</li>\n<li><code>x</code> is dumped to the console.</li>\n<li>Execution continues on with the statement immediately following your <code>console.log(x)</code> call.</li>\n</ol>\n\n<p>But that's not what happens, the reality is more like this:</p>\n\n<ol>\n<li>You call <code>console.log(x)</code>.</li>\n<li>The browser grabs a reference to <code>x</code>, and queues up the \"real\" <code>console.log</code> call for later.</li>\n<li>Various other bits of JavaScript run (or not).</li>\n<li>Later, the <code>console.log</code> call from <strong>(2)</strong> gets around to dumping the current state of <code>x</code> into the console but this <code>x</code> won't necessarily match the <code>x</code> as it was in <strong>(2)</strong>.</li>\n</ol>\n\n<p>In your case, you're doing this:</p>\n\n<pre><code>console.log(this.attributes);\nconsole.log(this.attributes.widgets);\n</code></pre>\n\n<p>So you have something like this at <strong>(2)</strong>:</p>\n\n<pre><code>         attributes.widgets\n             ^         ^\n             |         |\nconsole.log -+         |\nconsole.log -----------+\n</code></pre>\n\n<p>and then something is happening in <strong>(3)</strong> which effectively does <code>this.attributes.widgets = [...]</code> (i.e. changes the <code>attributes.widget</code> reference) and so, when <strong>(4)</strong> comes around, you have this:</p>\n\n<pre><code>         attributes.widgets // the new one from (3)\n             ^\n             |\nconsole.log -+\nconsole.log -----------&gt; widgets // the original from (1)\n</code></pre>\n\n<p>This leaves you seeing two different versions of <code>widgets</code>: the new one which received something in <strong>(3)</strong> and the original which is empty.</p>\n\n<p>When you do this:</p>\n\n<pre><code>console.log(_(this.attributes).clone());\nconsole.log(_(this.attributes.widgets).clone());\n</code></pre>\n\n<p>you're grabbing copies of <code>this.attributes</code> and <code>this.attributes.widgets</code> that are attached to the <code>console.log</code> calls so <strong>(3)</strong> won't interfere with your references and you see sensible results in the console.</p>\n\n<p>That's the answer to this:</p>\n\n<blockquote>\n  <p>It's showing that widgets is not empty when logging <code>this.attributes</code> but it's shown as empty when logging <code>this.attributes.widgets</code>. Does anyone know what would cause this?</p>\n</blockquote>\n\n<p>As far as the underlying problem goes, you probably have a <code>fetch</code> call somewhere and you're not taking its asynchronous behavior into account. The solution is probably to bind to an <code>\"add\"</code> or <code>\"reset\"</code> event.</p>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>I'm running into an odd issue with a Backbone.js Model where an array member is being shown as blank. It looks something like this:</p>\n\n<pre><code>var Session = Backbone.Model.extend({\n    defaults: {\n        // ...\n        widgets: []\n    },\n    addWidget: function (widget) {\n        var widgets = this.get(\"widgets\");\n\n        widgets.push(widget);\n        this.trigger(\"change:widgets\", this, widgets);\n    },\n    // ...\n    // I have a method on the model to grabbing a member of the array\n    getWidget: function (id) {\n        console.log(this.attributes);\n        console.log(this.attributes.widgets);\n\n        // ...\n    }\n});\n</code></pre>\n\n<p>I then add a widget via <code>addWidget</code>. When trying <code>getWidget</code> the result I get (in Chrome) is this:</p>\n\n<pre><code>Object\n    widgets: Array[1]\n        0: child\n        length: 1\n        __proto__: Array[0]\n    __proto__: Object\n[]\n</code></pre>\n\n<p>It's showing that widgets is not empty when logging <code>this.attributes</code> but it's shown as empty when logging <code>this.attributes.widgets</code>. Does anyone know what would cause this?</p>\n\n<p><strong>EDIT</strong>\nI've changed the model to instantiate the widgets array in the initialization method to avoid references across multiple instances, and I started using <a href=\"http://afeld.github.com/backbone-nested/\">backbone-nested</a> with no luck.</p>\n",
            "last_activity_date": 1415312741,
            "question_id": 11459244,
            "score": 10,
            "tags": [
                "javascript",
                "arrays",
                "backbone.js"
            ],
            "title": "Backbone.js Empty Array Attribute"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The problem may be related to the recent discovery of a SSLv3 vulnerability (POODLE). Website owners were forced to remove SSLv3 support from their websites. Since PhantomJS &lt; v1.9.8 uses SSLv3 by <a href=\"http://phantomjs.org/api/command-line.html\">default</a>, you should use TLSv1:</p>\n\n<pre><code>casperjs --ssl-protocol=tlsv1 yourScript.js\n</code></pre>\n\n<p>The catchall solution would be to use <code>any</code> for when newer PhantomJS versions come along with other SSL protocols. But this would make the POODLE vulnerability exploitable on sites which haven't yet disabled SSLv3.</p>\n\n<pre><code>casperjs --ssl-protocol=any yourScript.js\n</code></pre>\n\n<p>Alternative method: Update to PhantomJS 1.9.8 or higher. Note that updating to PhantomJS 1.9.8 leads to a <a href=\"https://github.com/ariya/phantomjs/issues/12697\">new bug</a>, which is especially annoying for CasperJS.</p>\n\n<p><strong>How to verify:</strong> Add a <a href=\"http://docs.casperjs.org/en/latest/events-filters.html#resource-error\"><code>resource.error</code></a> event handler like this at the beginning of your script:</p>\n\n<pre><code>casper.on(\"resource.error\", function(resourceError){\n    console.log('Unable to load resource (#' + resourceError.id + 'URL:' + resourceError.url + ')');\n    console.log('Error code: ' + resourceError.errorCode + '. Description: ' + resourceError.errorString);\n});\n</code></pre>\n\n<p>If it is indeed a problem with SSLv3 the error will be something like:</p>\n\n<blockquote>\n  <p>Error code: 6. Description: SSL handshake failed</p>\n</blockquote>\n\n<hr>\n\n<p>As an aside, you also might want to run with the <code>--ignore-ssl-errors=true</code> commandline option, when there is something wrong with the certificate.</p>\n",
                    "is_accepted": true,
                    "score": 22
                }
            ],
            "body": "<p>I know there are certain web pages PhantomJS/CasperJS can't open, and I was wondering if this one was one of them: <a href=\"https://maizepages.umich.edu\">https://maizepages.umich.edu</a>. CasperJS gives an error: PhantomJS failed to open page status=fail.</p>\n\n<p>I tried ignoring-ssl-errors and changing my user agent but I'm not sure how to determine which ones to use.</p>\n\n<p>All I'm doing right now is the basic casper setup with <code>casper.start(url, function () { ... })</code> where <code>url=https://maizepages.umich.edu</code>;</p>\n",
            "last_activity_date": 1419758523,
            "question_id": 26415188,
            "score": 10,
            "tags": [
                "javascript",
                "ssl",
                "web-scraping",
                "phantomjs",
                "casperjs"
            ],
            "title": "CasperJS/PhantomJS doesn&#39;t load https page"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Because it can't be done. The new location is private/sensitive information.\nNobody wants you to know which sites they visit when they leave your site.</p>\n\n<p>Regards,</p>\n\n<p>M.</p>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>Kaze's answer is an interesting approach, but looking at the element focus when the page is navigated away from isn't really reliable. Partly because there is a delay between the link click and the navigation away from the page (during which time the user may move focus to some other element, but also because a link may be focused (eg. by keyboard control, or mousedown-without-click) without actually being used to navigate away from the page. So if you focused a link then closed the window, it'd think you were following the link.</p>\n\n<p>Trapping <code>onclick</code> for every link on the page (plus <code>onsubmit</code> on every form) is slightly more reliable, but can still be fooled due to the delay. For example you click a link, but then before the new page starts loading hit the back button (or press Escape). Again, if you close the window it thinks you're following the link.</p>\n\n<blockquote>\n  <p>I want to catch the address, what the user types into the url box of the browser.</p>\n</blockquote>\n\n<p>There is no way that will ever happen. It is an obvious privacy no-no.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I work on data processing sites and before a user leaves the page I make sure all the data meets requirements. The onbeforeunload event is useful, but cumbersome because of the way browsers handle it. I can't stop the user from leaving the page, but it would be nice to know where they are going. As it happens, in my case, I do know because it is a site generated redirect, so I can set a session variable.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you just want to see what link destination, you can use :</p>\n\n<p>document.activeElement.href </p>\n\n<p>But getting the address line destination is not possible. </p>\n\n<p>I've heard of solutions where they fire off an event if the mouse moves up to the address line (to warn the user that there are unfinished processes that have not been dealt with), but this sort of hack I would never do.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>document.activeElement.document.referrer get the next detination</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've searched for hours, but I couldn't find a solution for this.</p>\n\n<pre><code>window.onbeforeunload = warn;\n</code></pre>\n\n<p>This doesn't work:</p>\n\n<pre><code>function warn (e) \n{ \n   var destination = e.href;\n   alert(destination );\n}\n</code></pre>\n\n<p>Okay, so to clear the things. If the user clicks on a link on the page itself, it is easy, because you can add an eventhandler to all of the links onclick event, but. I want to catch the address, what the user types into the url box of the browser.</p>\n",
            "last_activity_date": 1407388165,
            "question_id": 1686687,
            "score": 17,
            "tags": [
                "javascript",
                "url",
                "javascript-events",
                "onunload"
            ],
            "title": "How can i get the destination url in javascript onbeforeunload event?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You can always use global variables by accessing them as properties of the window object, like <code>window.globalVar</code> (though using globals is indeed not a good practice), so no, I don't think there is ever a good reason to use the deprecated syntax.</p>\n\n<p>It is probably allowed for historical reasons: as Felix Kling mentioned, the original syntax did only allow to pass a string of code:</p>\n\n<blockquote>\n  <p>Introduced with JavaScript 1.0, Netscape 2.0. <strong>Passing a Function object reference was introduced with JavaScript 1.2, Netscape 4.0</strong>; supported by the MSHTML DOM since version 5.0. [<a href=\"https://developer.mozilla.org/en/DOM/window.setTimeout\">source</a>, my emphasis]</p>\n</blockquote>\n\n<p>If browsers don't support the use of a string as first argument to <code>setTimeout</code> and <code>setInterval</code> anymore, there will be lots of code on the internet that doesn't function anymore.</p>\n",
                    "is_accepted": true,
                    "score": 8
                },
                {
                    "body": "<p>For those who are redirected here by the question of <em>why is passing a function better than passing a string</em>.</p>\n\n<p><strong>1: Passing a string fires up a compiler</strong></p>\n\n<p>Every time you have to evaluate a string, you fire up a full compiler.  For each and every invocation where it is needed.</p>\n\n<p>Not only is this slow, it destroys all of the JIT and browser speedups that are done.</p>\n\n<p><strong>2:  Passing a string is MUCH more limited.</strong></p>\n\n<p>Because a string is run through a compiler, it isn't as cleanly bound to the local scope and variables.</p>\n\n<p>While it isn't noticeable in situation like:</p>\n\n<pre><code>window.setInterval(\"doThing()\");\n</code></pre>\n\n<p>In a more complex situation, the code is just cleaner:</p>\n\n<pre><code>window.setInterval(\"doThing(\" + val1 + \",\" + val2 + \")\");\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>window.setInterval(function() {\n  // You can put a debugging point here\n  dothing(val1, val2);\n});\n</code></pre>\n\n<p><strong>3:  DOM objects can't be passed via string</strong></p>\n\n<p>As \u00c1lvaro mentioned, DOM objects can not be passed via a string method.</p>\n\n<pre><code>// There is no way to do this via a string.\nvar el = document.getElementById(\"my-element\");\nwindow.setInterval(function() {\n  dothing(el);\n});\n</code></pre>\n\n<p>(Other objects may or may not be passable -- depending on if they can be serialized, but but in general it would be quite difficult.)</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>We all know that passing a string to <code>setTimeout</code> (or <code>setInterval</code>) is evil, because it is run in the global scope, has performance issues, is potentially insecure if you're injecting any parameters, etc.  So doing this is definitely deprecated:</p>\n\n<pre><code>setTimeout('doSomething(someVar)', 10000);\n</code></pre>\n\n<p>in favour of this:</p>\n\n<pre><code>setTimeout(function() {\n    doSomething(someVar);\n}, 10000);\n</code></pre>\n\n<p>My question is: can there ever be a reason to do the former? Is it <em>ever</em> preferable? If it isn't, why is it even allowed?</p>\n\n<p>The only scenario I've thought of is of wanting to use a function or variable that exists in the global scope but has been  overridden in the local scope.  That sounds to me like poor code design, however...</p>\n",
            "last_activity_date": 1407831109,
            "question_id": 6081560,
            "score": 12,
            "tags": [
                "javascript",
                "settimeout"
            ],
            "title": "Is there ever a good reason to pass a string to setTimeout?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>$(document).bind('keydown', function(event) {\n    if (event.keyCode == 27) {        \n       alert(\"I just clicked the back-button!\");\n    } else {\n       alert(\"I just hit the button with code \" + event.keyCode);\n    }\n});\n</code></pre>\n\n<p>I'm not really sure if I understand your question, but for me it seems as if you are looking for a way to detect if a certain button has been pressed. I'd suggest you take the code sample above and try it out.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You need to listen to <code>navigation</code> event and <code>state.direction</code>.</p>\n\n<blockquote>\n  <p><strong><a href=\"http://fiddle.jshell.net/Palestinian/UKJRM/\">Demo</a></strong></p>\n</blockquote>\n\n<pre><code>$(window).on(\"navigate\", function (event, data) {\n  var direction = data.state.direction;\n  if (direction == 'back') {\n    // do something\n  }\n  if (direction == 'forward') {\n    // do something else\n  }\n});\n</code></pre>\n\n<p><strong>jQM API:</strong> <a href=\"http://api.jquerymobile.com/navigate/\">Navigation event</a></p>\n",
                    "is_accepted": true,
                    "score": 27
                }
            ],
            "body": "<p>I tried to control back button but i cant.In here;</p>\n\n<p><a href=\"http://stackoverflow.com/questions/12859759/take-control-of-hardware-back-button-jquery-mobile\">Take control of hardware back button jquery mobile</a></p>\n\n<pre><code>  event.keyCode == 27 //thats for escape \n  event.keyCode == 8 //thats for backspace..its also working on browser but it doesnt work on my tablet.\n</code></pre>\n\n<p>Any suggestions??</p>\n",
            "last_activity_date": 1380637577,
            "question_id": 18211984,
            "score": 11,
            "tags": [
                "javascript",
                "jquery-mobile",
                "jquery",
                "keycode"
            ],
            "title": "how to control back button event in Jquery mobile?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Somebody has to parse that string.  If it's not the interpreter (via <code>eval</code>) then it'll need to be you, writing a parsing routine to extract numbers, operators, and anything else you want to support in a mathematical expression.</p>\n\n<p>So, no, there isn't any (simple) way without <code>eval</code>.  If you're concerned about security (because the input you're parsing isn't from a source you control), maybe you can check the input's format (via a whitelist regex filter) before passing it to <code>eval</code>?</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>// You can do + or - easily:</p>\n\n<pre><code>function addbits(s){\n    var total= 0, s= s.match(/[+\\-]*(\\.\\d+|\\d+(\\.\\d+)?)/g) || [];\n    while(s.length){\n        total+= parseFloat(s.shift());\n    }\n    return total;\n}\n\nvar string='1+23+4+5-30';\naddbits(string)\n</code></pre>\n\n<p>More complicated math makes eval more attractive- and certainly simpler to write.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I've eventually gone for this solution, which works for summing positive and negative integers (and with a little modification to the regex will work for decimals too):</p>\n\n<pre><code>function sum(string) {\n  return (string.match(/^(-?\\d+)(\\+-?\\d+)*$/)) ? string.split('+').stringSum() : NaN;\n}   \n\nArray.prototype.stringSum = function() {\n    var sum = 0;\n    for(var k=0, kl=this.length;k&lt;kl;k++)\n    {\n        sum += +this[k];\n    }\n    return sum;\n}\n</code></pre>\n\n<p>I'm not sure if it's faster than eval(), but as I have to carry out the operation lots of times I'm far more comfortable runing this script than creating loads of instances of the javascript compiler</p>\n",
                    "is_accepted": true,
                    "score": 2
                },
                {
                    "body": "<p>I've recently done this in C# (no Eval() for us...) by evaluating the expression in Reverse Polish Notation (that's the easy bit). The hard part is actually parsing ths string and turning it into Reverse Polish Notation. I used the Shunting Yard algorithm as there's a great example on Wikipedia and pseudocode. I found it really simple to implement both and I'd recommend that if you've not already found a solution or are looking at alternatives.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can use the <a href=\"http://silentmatt.com/javascript-expression-evaluator/\">JavaScript Expression Evaluator library</a>, which allows you to do stuff like: </p>\n\n<pre><code>Parser.evaluate(\"2 ^ x\", { x: 3 });\n</code></pre>\n\n<p>Or <a href=\"http://mathjs.org/\">mathjs</a>, which allows stuff like:</p>\n\n<pre><code>math.eval('sin(45 deg) ^ 2');\n</code></pre>\n\n<p>I ended up choosing mathjs for one of my projects.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This is a little function I threw together just now to solve this issue - it builds the expression by analyzing the string one character at a time (it's actually pretty quick though). This will take any mathematical expression (limited to +,-,*,/ operators only) and return the result. It can handle negative values and unlimited number operations as well.</p>\n\n<p>The only \"to do\" left is to make sure it calculates * &amp; / before + &amp; -. Will add that functionality later, but for now this does what I need...</p>\n\n<pre><code>/**\n* Evaluate a mathematical expression (as a string) and return the result\n* @param {String} expr A mathematical expression\n* @returns {Decimal} Result of the mathematical expression\n* @example\n*    // Returns -81.4600\n*    expr(\"10.04+9.5-1+-100\");\n*/ \nfunction expr (expr) {\n\n    var chars = expr.split(\"\");\n    var n = [], op = [], index = 0, oplast = true;\n\n    n[index] = \"\";\n\n    // Parse the expression\n    for (var c = 0; c &lt; chars.length; c++) {\n\n        if (isNaN(parseInt(chars[c])) &amp;&amp; chars[c] !== \".\" &amp;&amp; !oplast) {\n            op[index] = chars[c];\n            index++;\n            n[index] = \"\";\n            oplast = true;\n        } else {\n            n[index] += chars[c];\n            oplast = false;\n        }\n    }\n\n    // Calculate the expression\n    expr = parseFloat(n[0]);\n    for (var o = 0; o &lt; op.length; o++) {\n        var num = parseFloat(n[o + 1]);\n        switch (op[o]) {\n            case \"+\":\n                expr = expr + num;\n                break;\n            case \"-\":\n                expr = expr - num;\n                break;\n            case \"*\":\n                expr = expr * num;\n                break;\n            case \"/\":\n                expr = expr / num;\n                break;\n        }\n    }\n\n    return expr;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I went looking for JavaScript libraries for evaluating mathematical expressions, and found these two promising candidates:</p>\n\n<ul>\n<li><p><a href=\"http://silentmatt.com/javascript-expression-evaluator/\" rel=\"nofollow\">JavaScript Expression Evaluator</a>: Smaller and hopefully more\nlight-weight. Allows algebraic expressions, substitutions and a\nnumber of functions.</p></li>\n<li><p><a href=\"http://mathjs.org/\" rel=\"nofollow\">mathjs</a>: Allows complex numbers, matrices and units as well.\nBuilt to be used by both in-browser JavaScript and Node.js.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I parse and evaluate a mathematical expression in a string (e.g. <code>'1+1'</code>) without invoking <code>eval(string)</code> to yield its numerical value?</p>\n\n<p>With that example, I want the function to accept <code>'1+1'</code> and return <code>2</code>.</p>\n",
            "last_activity_date": 1392128192,
            "question_id": 2276021,
            "score": 5,
            "tags": [
                "javascript",
                "string",
                "math",
                "numbers"
            ],
            "title": "Evaluating a string as a mathematical expression in JavaScript"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>No, there isn't.</p>\n\n<p>Different modes of escaping are for different purposes.  You cannot universally escape something.</p>\n\n<p><strong>For Databases:</strong>  Use <a href=\"http://www.phpro.org/tutorials/Introduction-to-PHP-PDO.html#10\">PDO with prepared queries</a></p>\n\n<p><strong>For HTML:</strong>  Use <a href=\"http://php.net/manual/en/function.htmlspecialchars.php\"><code>htmlspecialchars()</code></a></p>\n\n<p><strong>For JSON:</strong>  <a href=\"http://php.net/manual/en/function.json-encode.php\"><code>json_encode()</code></a> handles this for you</p>\n\n<p><strong>For character sets:</strong>  You should be using UTF-8 on your page.  Do this, and set your databases accordingly, and watch those issues disappear.</p>\n",
                    "is_accepted": true,
                    "score": 14
                }
            ],
            "body": "<p>I've been running and developed a classified site now for the last 8 months and all the bugs were due to only one reason: how the users input their text... </p>\n\n<p><strong>My question is</strong>: Is there a php class, a plugin, something that I can do</p>\n\n<p><code>$str = UltimateClean($str)</code> before sending $str to my sql??</p>\n\n<p>PS. I also noticed the problems doubled when i started using JSON, because I also have to be careful outputting the result in JSON..</p>\n\n<p>Some issues I faced: multi-language strings (different charsets), copy-paste from Excel sheets. \n<br>Note: I am not worried for SQL Injections.</p>\n",
            "last_activity_date": 1417543250,
            "question_id": 7810869,
            "score": 3,
            "tags": [
                "php",
                "javascript",
                "mysql",
                "json"
            ],
            "title": "The holy grail of cleaning input and output in php?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>var scripts = document.getElementsByTagName('script');\nvar lastScript = scripts[scripts.length-1];\nvar scriptName = lastScript.src;\nalert(\"loading: \" + scriptName);\n</code></pre>\n\n<p>Tested in: FF 3.0.8, Chrome 1.0.154.53, IE6</p>\n\n<p><hr /></p>\n\n<h3>See also: <a href=\"http://stackoverflow.com/questions/403967/how-may-i-reference-the-script-tag-that-loaded-the-currently-executing-script\">How may I reference the script tag that loaded the currently-executing script?</a></h3>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>You can return a list of script elements in the page:</p>\n\n<pre><code>var scripts = document.getElementsByTagName(\"script\");\n</code></pre>\n\n<p>And then evaluate each one and retrieve its location:</p>\n\n<pre><code>var location;\n\nfor(var i=0; i&lt;scripts.length;++i) {\n   location = scripts[i].src;\n\n   //Do stuff with the script location here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>What will happen if the jQuery script isn't there? Are you just going to output a message? I guess it is slightly better for debugging if something goes wrong, but it's not very helpful for users.</p>\n\n<p>I'd say just design your pages such that this occurrence will not happen, and in the rare event it does, just let the script fail.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use...</p>\n\n<pre><code>var scripts = document.getElementsByTagName(\"script\"),\n  currentScriptUrl = (document.currentScript || scripts[scripts.length - 1]).src;\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/document.currentScript\" rel=\"nofollow\"><code>currentScript()</code></a> is Firefox/Chrome only at the moment.</p>\n\n<p>Make sure it's ran as the file is parsed and executed, not on DOM ready or <code>window</code> load.</p>\n\n<p>If it's an empty string, your <code>script</code> block has no or an empty <code>src</code> attribute.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Shog9's suggestion more shorter:</p>\n\n<pre><code>alert(\"loading: \" + document.scripts[document.scripts.length-1].src);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm aware this is old but I have developed a better solution because all of the above didn't work for Async scripts. With some tweaking the following script can cover almost all use cases. Heres what worked for me:</p>\n\n<pre><code>function getScriptName() {\n    var error = new Error()\n      , source\n      , lastStackFrameRegex = new RegExp(/.+\\/(.*?):\\d+(:\\d+)*$/)\n      , currentStackFrameRegex = new RegExp(/getScriptName \\(.+\\/(.*):\\d+:\\d+\\)/);\n\n    if((source = lastStackFrameRegex.exec(error.stack.trim())) &amp;&amp; source[1] != \"\")\n        return source[1];\n    else if((source = currentStackFrameRegex.exec(error.stack.trim())))\n        return source[1];\n    else if(error.fileName != undefined)\n        return error.fileName;\n}\n</code></pre>\n\n<p>Not sure about support on Internet Explorer, but works fine in every other browser I tested on.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm pretty sure the answer is no, but thought I'd ask anyway.</p>\n\n<p>If my site references a scripted named \"whatever.js\", is it possible to get \"whatever.js\" from within that script? Like:</p>\n\n<pre><code>var scriptName = ???\n\nif (typeof jQuery !== \"function\") {\n    throw new Error(\n    \t\"jQuery's script needs to be loaded before \" + \n    \tscriptName + \". Check the &lt;script&gt; tag order.\");\n}\n</code></pre>\n\n<p>Probably more trouble than it's worth for dependency checking, but what the hell.</p>\n",
            "last_activity_date": 1404906005,
            "question_id": 710957,
            "score": 8,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "How might I get the script filename from within that script?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>IE8 and earlier don't have <code>addEventListener</code>, but they do have its non-standard predecessor, <code>attachEvent</code>. They're not <em>quite</em> the same.</p>\n\n<p>Here's a \"hook this event\" function that uses what's available:</p>\n\n<pre><code>var hookEvent = (function() {\n    var div;\n\n    // The function we use on standard-compliant browsers\n    function standardHookEvent(element, eventName, handler) {\n        element.addEventListener(eventName, handler, false);\n        return element;\n    }\n\n    // The function we use on browsers with the previous Microsoft-specific mechanism\n    function oldIEHookEvent(element, eventName, handler) {\n        element.attachEvent(\"on\" + eventName, function(e) {\n            e = e || window.event;\n            e.preventDefault = oldIEPreventDefault;\n            e.stopPropagation = oldIEStopPropagation;\n            handler.call(element, e);\n        });\n        return element;\n    }\n\n    // Polyfill for preventDefault on old IE\n    function oldIEPreventDefault() {\n        this.returnValue = false;\n    }\n\n    // Polyfill for stopPropagation on old IE\n    function oldIEStopPropagation() {\n        this.cancelBubble = true;\n    }\n\n    // Return the appropriate function; we don't rely on document.body\n    // here just in case someone wants to use this within the head\n    div = document.createElement('div');\n    if (div.addEventListener) {\n        div = undefined;\n        return standardHookEvent;\n    }\n    if (div.attachEvent) {\n        div = undefined;\n        return oldIEHookEvent;\n    }\n    throw \"Neither modern event mechanism (addEventListener nor attachEvent) is supported by this browser.\";\n})();\n</code></pre>\n\n<p>Then you'd use it like this in your example:</p>\n\n<pre><code>hookEvent(document.getElementById(\"hd_vertical\"), \"click\", function(e) {\n    // ...\n});\n</code></pre>\n\n<p>Note how it provides the missing <code>preventDefault</code> and <code>stopPropagation</code> functions on the event object on browsers using <code>attachEvent</code> and ensures that <code>this</code> within the handler call is what it would be if you were using <code>addEventListener</code>.</p>\n\n<p>It does <em>not</em> go further with event normalization, like handling issues around <code>e.which</code> vs. <code>e.keyCode</code> and such. For things like that, look at using a library like <a href=\"http://jquery.com\" rel=\"nofollow\">jQuery</a>, <a href=\"http://developer.yahoo.com/yui/\" rel=\"nofollow\">YUI</a>, <a href=\"http://code.google.com/closure/library\" rel=\"nofollow\">Closure</a>, or <a href=\"http://en.wikipedia.org/wiki/List_of_JavaScript_libraries\" rel=\"nofollow\">any of several others</a>.</p>\n\n<hr>\n\n<p>Side note: As <a href=\"http://stackoverflow.com/users/965051/adeneo\">adeneo</a> pointed out in a comment on the question, IE8 also doesn't support <code>getElementsByClassName</code>. But it <em>does</em> support <code>querySelectorAll</code> and <code>querySelector</code>, so change:</p>\n\n<pre><code>var _url = document.getElementsByClassName(id)[1].getAttribute('href');\n</code></pre>\n\n<p>to</p>\n\n<pre><code>var _url = document.querySelectorAll(\".\" + id)[1].getAttribute('href');\n</code></pre>\n\n<p>Note that that will try to get the <em>second</em> element matching the selector. <code>[1]</code> is the second entry in the list, not the first, which would be <code>[0]</code>. If you meant the first, you can use <code>querySelector</code>, which returns just the first match:</p>\n\n<pre><code>var _url = document.querySelector(\".\" + id).getAttribute('href');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1
                },
                {
                    "body": "<p>As per T.J suggestion updated my code, Now working fine in all the browser. </p>\n\n<p>Added if condition to check ie8 : if(window.attachEvent){}</p>\n\n<p>and updated my code <strong>to</strong> IE8: </p>\n\n<p>1) document.getElementsByClassName <strong>to</strong> document.querySelectorAll</p>\n\n<p>2) e.target.nodeName <strong>to</strong> e.srcElement.nodeName</p>\n\n<p>3) addEventListener <strong>to</strong> attachEvent</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Am using Below JS,but li onclick is not working on IE8 browser.</p>\n\n<p>jsfiddle link :</p>\n\n<p><a href=\"http://jsfiddle.net/sudheera/DUZ3B/14/\" rel=\"nofollow\">http://jsfiddle.net/sudheera/DUZ3B/14/</a></p>\n\n<p>HTML</p>\n\n<pre><code>&lt;div class=\"primaryNav fl\"&gt;\n&lt;ul id=\"hd_vertical\" class=\"productNav\"&gt;\n\n&lt;li id=\"hd_test\" class=\"flight\"&gt;\n&lt;span class=\"navIcon flightIcon hd_test\"&gt;Test&lt;/span&gt;\n&lt;a class=\"hd_test\" href=\"http://validator.w3.org/\"&gt;Flights&lt;/a&gt;\n&lt;/li&gt;\n\n&lt;li id=\"hd_test1\" class=\"bus\"&gt;\n&lt;span class=\"navIcon busIcon hd_test1\"&gt;Test&lt;/span&gt;\n&lt;a class=\"hd_test1\" href=\"http://www.w3schools.com/\"&gt;Buses&lt;/a&gt;\n&lt;/li&gt;\n\n&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>JS</p>\n\n<pre><code>var changeLocation = function(id) {\n  var _url = document.getElementsByClassName(id)[1].getAttribute('href');\n  location.href = _url;   \n}\n\ndocument.getElementById(\"hd_vertical\").addEventListener(\"click\",function(e) {\n        if(e.target.nodeName == \"LI\") { \n            var _anchor = e.target.id;\n            changeLocation(_anchor);\n        } else if(e.target.nodeName == \"SPAN\") {\n            var span = e.target;\n            var li = span.parentNode;\n            var _anchor = li.id;   \n            changeLocation(_anchor);\n    }\n});\n</code></pre>\n\n<p>please suggest</p>\n",
            "last_activity_date": 1401195762,
            "question_id": 23799296,
            "score": 0,
            "tags": [
                "javascript",
                "internet-explorer-8",
                "cross-browser",
                "addeventlistener"
            ],
            "title": "JS li tag onclick not working on IE8"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Yes, but it relies on newer features of JavaScript. This means it will not work in IE8 or older.</p>\n\n<pre><code>var result = objArray.map(function(a) {return a.foo;});\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Documentation</a></p>\n",
                    "is_accepted": true,
                    "score": 8
                },
                {
                    "body": "<p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow\"><code>Array.prototype.map</code></a>:</p>\n\n<pre><code>function getFields(input, field) {\n    return input.map(function(o) {\n        return o[field];\n    });\n}\n</code></pre>\n\n<p>See the above link for a shim for pre-ES5 browsers.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It depends of your definition of \"better\".</p>\n\n<p>The other answers point out the use of map, which is natural (especially for guys used to functional style) and concise. I strongly recommend using it (if you don't bother with the few IE8- IT guys). So if \"better\" means \"more concise\", \"maintainable\", \"understandable\" then yes, it's way better.</p>\n\n<p>In the other hand, this beauty don't come without additional costs. I'm not a big fan of microbench, but I've put up a small <a href=\"http://jsperf.com/pluck-map-vs-loop\" rel=\"nofollow\">test here</a>. The result are predictable, the old ugly way seems to be faster than the map function. So if \"better\" means \"faster\", then no, stay with the old school fashion.</p>\n\n<p>Again this is just a microbench and in no way advocating against the use of <code>map</code>, it's just my two cents :).</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have javascript object array:</p>\n\n<pre><code>objArray = [ { foo: 1, bar: 2}, { foo: 3, bar: 4}, { foo: 5, bar: 6} ];\n</code></pre>\n\n<p>I want to get all values of key <code>foo</code> as array <code>[ 1, 3, 5 ]</code>.</p>\n\n<p>There's the obvious manual way:</p>\n\n<pre><code>function getFields(input, field) {\n    var output = [];\n    for (var i=0; i &lt; input.length ; ++i)\n        output.push(input[i][field]);\n    return output;\n}\n\nvar result = getFields(objArray, \"foo\"); // returns [ 1, 3, 5 ]\n</code></pre>\n\n<p>Is there a better way? (With a reference link, if possible.)</p>\n",
            "last_activity_date": 1382709243,
            "question_id": 19590865,
            "score": 5,
            "tags": [
                "javascript"
            ],
            "title": "javascript array of objects, extract value of a property as array"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Yes, the first function has no relationship with an object instance of that <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FGuide/Creating%5FNew%5FObjects/Using%5Fa%5FConstructor%5FFunction\">constructor function</a>, you can consider it like a <em>'static method'</em>.</p>\n\n<p>In JavaScript functions are <a href=\"http://en.wikipedia.org/wiki/First-class%5Ffunction\"><em>first-class</em></a> objects, that means you can treat them just like any object, in this case, you are only adding a property to the <em>function object</em>.</p>\n\n<p>The second function, as you are extending the constructor function prototype, it will be available to all the object instances created with the <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Operators/Special%5FOperators/new%5FOperator\"><code>new</code></a> keyword, and the context within that function (the <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Operators/Special%5FOperators/this%5FOperator\"><code>this</code></a> keyword) will refer to the actual object instance where you call it.</p>\n\n<p>Consider this example:</p>\n\n<pre><code>// constructor function\nfunction MyClass () {\n  var privateVariable; // private member only available within the constructor fn\n\n  this.privilegedMethod = function () { // it can access private members\n    //..\n  };\n}\n\n// A 'static method', it's just like a normal function \n// it has no relation with any 'MyClass' object instance\nMyClass.staticMethod = function () {};\n\nMyClass.prototype.publicMethod = function () {\n  // the 'this' keyword refers to the object instance\n  // you can access only 'privileged' and 'public' members\n};\n\nvar myObj = new MyClass(); // new object instance\n\nmyObj.publicMethod();\nMyClass.staticMethod();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 416
                },
                {
                    "body": "<p>When you create more than one instance of MyClass , you will still only have only one instance of publicMethod in memory but in case of privilegedMethod you will end up creating lots of instances and staticMethod has no relationship with an object instance.</p>\n\n<p>That's why prototypes save memory.</p>\n\n<p>Also, if you change the parent object's properties, is the child's corresponding property hasn't been changed, it'll be updated.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>What is the difference between the following two declarations?</p>\n\n<pre><code>Class.method = function () { /* code */ }\nClass.prototype.method = function () { /* code using this.values */ }\n</code></pre>\n\n<p>Is it okay to think of the first statement as a declaration of a static method, and the second statement as a declaration of an instance method?</p>\n",
            "last_activity_date": 1378116516,
            "question_id": 1635116,
            "score": 248,
            "tags": [
                "javascript",
                "oop",
                "prototype-programming"
            ],
            "title": "JavaScript: Class.method vs. Class.prototype.method"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>For the widest compatibility I would really recommend using small FLASH object that can interact with Javascript. That's much easier method than trying <code>audio</code> element in HTML5 due to the current (and not-to-be-soon) support.</p>\n\n<p>check this project as an example: <a href=\"http://www.schillmania.com/projects/soundmanager/\" rel=\"nofollow\">http://www.schillmania.com/projects/soundmanager/</a>\ncurrent and advanced version: <a href=\"http://www.schillmania.com/projects/soundmanager2/\" rel=\"nofollow\">http://www.schillmania.com/projects/soundmanager2/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To play the same sample multiple times, wouldn't it be possible to do something like this:</p>\n\n<pre><code>e.pause(); // Perhaps optional\ne.currentTime = 0;\ne.play();\n</code></pre>\n\n<p>(<code>e</code> is the audio element)</p>\n\n<p>Perhaps I completely misunderstood your problem, do you want the sound effect to play multiple times at the same time? Then this is completely wrong.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Have a look at the <a href=\"http://hyper-metrix.com/misc/jai/\" rel=\"nofollow\">jai</a> (-> <a href=\"http://dl.dropbox.com/u/2400/mirror/jai/jai-x.htm\" rel=\"nofollow\">mirror</a>) (javascript audio interface) site. From looking at their source, they appear to be calling <code>play()</code> repeatedly, and they mention that their library might be appropriate for use in HTML5-based games.</p>\n\n<blockquote>\n  <p>You can fire multiple audio events\n  simultaneously, which could be used\n  for creating Javascript games, or\n  having a voice speaking over some\n  background music</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Sounds like what you want is multi-channel sounds.  Let's suppose you have 4 channels (like on really old 16-bit games), I haven't got round to playing with the HTML5 audio feature yet, but don't you just need 4 &lt;audio&gt; elements, and cycle which is used to play the next sound effect?  Have you tried that?  What happens?  If it works:  To play more sounds simultaneously, just add more &lt;audio&gt; elements.</p>\n\n<p>I have done this before without the HTML5 &lt;audio&gt; element, using a little Flash object from <a href=\"http://flash-mp3-player.net/\" rel=\"nofollow\">http://flash-mp3-player.net/</a> - I wrote a music quiz (<a href=\"http://webdeavour.appspot.com/\" rel=\"nofollow\">http://webdeavour.appspot.com/</a>) and used it to play clips of music when the user clicked the button for the question.  Initially I had one player per question, and it was possible to play them over the top of each other, so I changed it so there was only one player, which I pointed at different music clips.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You don't need to bother with <code>&lt;audio&gt;</code> elements. HTML 5 lets you access <a href=\"http://dev.w3.org/html5/spec/video.html#htmlmediaelement\">audio API</a> directly:</p>\n\n<pre><code>var snd = new Audio(\"file.wav\"); // buffers automatically when created\nsnd.play();\n</code></pre>\n\n<p>There's no support for mixing in current version of the spec. </p>\n\n<p>To play same sound multiple times, create multiple instances of the <code>Audio</code> object. You could also set <code>snd.currentTime=0</code> on the object after it finishes playing.</p>\n\n<hr>\n\n<p>Since the JS constructor doesn't support fallback <code>&lt;source&gt;</code> elements, you should use </p>\n\n<pre><code>(new Audio()).canPlayType(\"audio/ogg; codecs=vorbis\")\n</code></pre>\n\n<p>to test whether the browser supports Ogg Vorbis.</p>\n\n<p>Currently all good browsers support Wave files (IE &lt; 11 doesn't).</p>\n\n<hr>\n\n<p><a href=\"http://caniuse.com/audio-api\">Soon</a> you'll be able to use <a href=\"http://webaudio.github.io/web-audio-api/\">more advanced Web Audio API</a>.</p>\n",
                    "is_accepted": true,
                    "score": 322
                },
                {
                    "body": "<p>It's not possible to do multi-shot playing with a single <code>&lt;audio&gt;</code> element. You need to use multiple elements for this.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You may also want to use this to detect HTML 5 audio in some cases:</p>\n\n<p><a href=\"http://diveintohtml5.ep.io/everything.html\">http://diveintohtml5.ep.io/everything.html</a></p>\n\n<p>HTML 5 JS Detect function</p>\n\n<pre><code>function supportsAudio()\n{\n    var a = document.createElement('audio'); \n    return !!(a.canPlayType &amp;&amp; a.canPlayType('audio/mpeg;').replace(/no/, ''));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here's an idea. Load all of your audio for a certain class of sounds into a single individual audio element where the src data is all of your samples in a contiguous audio file (probably want some silence between so you can catch and cut the samples with a timeout with less risk of bleeding to the next sample). Then, seek to the sample and play it when needed. </p>\n\n<p>If you need more than one of these to play you can create an additional audio element with the same src so that it is cached. Now, you effectively have multiple \"tracks\". You can utilize groups of tracks with your favorite resource allocation scheme like Round Robin etc. </p>\n\n<p>You could also specify other options like queuing sounds into a track to play when that resource becomes available or cutting a currently playing sample.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://robert.ocallahan.org/2011/11/latency-of-html5-sounds.html\" rel=\"nofollow\">http://robert.ocallahan.org/2011/11/latency-of-html5-sounds.html</a></p>\n\n<p><a href=\"http://people.mozilla.org/~roc/audio-latency-repeating.html\" rel=\"nofollow\">http://people.mozilla.org/~roc/audio-latency-repeating.html</a></p>\n\n<p>Works OK in Firefox and Chrome for me.</p>\n\n<p>To stop a sound that you started, do\n    var sound = document.getElementById(\"shot\").cloneNode(true);\n    sound.play();\nand later\n    sound.pause();</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As of July 2012, the <a href=\"https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html\">WebAudio API</a> is now supported in Chrome, and at least partly supported in Firefox, and is slated to be added to IOS as of version 6.</p>\n\n<p>Although it is robust enough to be used programatically for basic tasks, the Audio element was never meant to provide full audio support for games, etc.  It was designed to allow a single piece of media to be embedded in a page, similar to an img tag.  There are a lot of issues with trying to use the Audio tag for games:</p>\n\n<ul>\n<li>Timing slips are common with Audio elements</li>\n<li>You need an Audio element for each instance of a sound</li>\n<li>Load events aren't totally reliable, yet</li>\n<li>No common volume controls, no fading, no filters/effects</li>\n</ul>\n\n<p>I used this <a href=\"http://www.html5rocks.com/en/tutorials/webaudio/intro/\">Getting Started With WebAudio</a> article to get started with the WebAudio API.  The <a href=\"http://www.html5rocks.com/en/tutorials/webaudio/fieldrunners/\">FieldRunners WebAudio Case Study</a> is also a good read.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Here's one method for making it possible to play even same sound simultaneously. Combine with preloader, and you're all set. This works with Firefox 17.0.1 at least, haven't tested it with anything else yet.</p>\n\n<pre><code>// collection of sounds that are playing\nvar playing={};\n// collection of sounds\nvar sounds={step:\"knock.ogg\",throw:\"swing.ogg\"};\n\n// function that is used to play sounds\nfunction player(x)\n{\n    var a,b;\n    b=new Date();\n    a=x+b.getTime();\n    playing[a]=new Audio(sounds[x]);\n    // with this we prevent playing-object from becoming a memory-monster:\n    playing[a].onended=function(){delete playing[a]};\n    playing[a].play();\n}\n</code></pre>\n\n<p>Bind this to a keyboard key, and enjoy:</p>\n\n<pre><code>player(\"step\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know this is a total hack but thought I should add this sample open source audio library I put on github awhile ago...</p>\n\n<p><a href=\"https://github.com/run-time/jThump\" rel=\"nofollow\">https://github.com/run-time/jThump</a></p>\n\n<p>After clicking the link below, type on the home row keys to play a blues riff (also type multiple keys at the same time etc.)</p>\n\n<p>Sample using jThump library  >>  <a href=\"http://davealger.com/apps/jthump/\" rel=\"nofollow\">http://davealger.com/apps/jthump/</a></p>\n\n<p>It basically works by making invisible <code>&lt;iframe&gt;</code> elements that load a page that plays a sound onReady().</p>\n\n<p><strong>This is certainly not ideal</strong> but you could +1 this solution based on creativity alone (and the fact that it is open source and works in any browser that I've tried it on)  I hope this gives someone else searching some ideas at least.</p>\n\n<p>:)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would recommend using <a href=\"http://www.createjs.com/#!/SoundJS\" rel=\"nofollow\">SoundJS</a>, a library I've help develop.  It allows you to write a single code base that works everywhere, with SoundJS picking web audio, html audio, or flash audio as appropriate.</p>\n\n<p>It will allow you to do all of the thing you want:</p>\n\n<ul>\n<li>Play and mix multiple sounds,</li>\n<li>Play the same sample multiple times, possibly overlapping playbacks</li>\n<li>Interrupt playback of a sample at any point</li>\n<li>play WAV files containing (depending on browser support)</li>\n</ul>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The best current solution is to use the Holwer.js library:</p>\n\n<p><a href=\"http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library\" rel=\"nofollow\">http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library</a></p>\n\n<p>It abstracts the great but low-level WebAudio API into an easy framework for games.</p>\n\n<p>For something more feature-rich, try Wad.js:</p>\n\n<p><a href=\"https://github.com/rserota/wad\" rel=\"nofollow\">https://github.com/rserota/wad</a></p>\n\n<p>If you want an easy way to produce sound effects from scratch using pure code, try \"Sound for Games\":</p>\n\n<p><a href=\"https://github.com/kittykatattack/soundForGames\" rel=\"nofollow\">https://github.com/kittykatattack/soundForGames</a></p>\n\n<p>Like Howler, Sound For Games also has lets you load and play sound files.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I ran into this while programming a musicbox card generator. Started with different libraries but everytime there was a glitch somehow. The lag on normal audio implementation was bad, no  multiple plays... eventually ended up using lowlag library + soundmanager:</p>\n\n<p><a href=\"http://lowlag.alienbill.com/\" rel=\"nofollow\">http://lowlag.alienbill.com/</a>\nand \n<a href=\"http://www.schillmania.com/projects/soundmanager2/\" rel=\"nofollow\">http://www.schillmania.com/projects/soundmanager2/</a></p>\n\n<p>You can check out the implementation here:\n<a href=\"http://musicbox.grit.it/\" rel=\"nofollow\">http://musicbox.grit.it/</a></p>\n\n<p>I generated wav + ogg files for multi browser plays. This musicbox player works responsive on ipad, iphone, Nexus, mac, pc,... works for me.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The selected answer will work in everything except IE. I wrote a tutorial on how to make it work cross browser = <a href=\"http://www.andy-howard.com/how-to-play-sounds-cross-browser-including-ie/index.html\" rel=\"nofollow\">http://www.andy-howard.com/how-to-play-sounds-cross-browser-including-ie/index.html</a></p>\n\n<p>Here is the function I wrote;</p>\n\n<pre><code>function playSomeSounds(soundPath)\n {\n\n var trident = !!navigator.userAgent.match(/Trident\\/7.0/);\n var net = !!navigator.userAgent.match(/.NET4.0E/);\n var IE11 = trident &amp;&amp; net\n var IEold = ( navigator.userAgent.match(/MSIE/i) ? true : false );\n if(IE11 || IEold){\n document.all.sound.src = soundPath;\n }\n else\n {\n var snd = new Audio(soundPath); // buffers automatically when created\n snd.play();\n }\n };\n</code></pre>\n\n<p>You also need to add the following tag to the html page:</p>\n\n<pre><code>&lt;bgsound id=\"sound\"&gt;\n</code></pre>\n\n<p>Finally you can call the function and simply pass through the path here:</p>\n\n<pre><code>playSomeSounds(\"sounds/welcome.wav\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm using HTML5 for its most noblest purpose: games, of course! The obstacle I've run into now is how to play sound effects.</p>\n\n<p>The game is a port of an old Macintosh game, and because of its age, the requirements are few in number:</p>\n\n<ul>\n<li>Play and mix multiple sounds,</li>\n<li>Play the same sample multiple times, possibly overlapping playbacks</li>\n<li>Interrupt playback of a sample at any point</li>\n<li>Preferably play WAV files containing (low quality) raw PCM, but I can convert these, of course</li>\n</ul>\n\n<p>My first approach was to use the HTML5 &lt;audio&gt; element and define all sound effects in my page. Firefox plays the WAV files just peachy, but calling #play multiple times doesn't really play the sample multiple times. From my understanding of the HTML5 spec, the &lt;audio&gt; element also tracks playback state, so that explains why.</p>\n\n<p>My immediate thought was to clone the audio elements, so I created the following tiny javascript library to do that for me (depends on jquery):</p>\n\n<pre><code>var Snd = {\n  init: function() {\n    $(\"audio\").each(function() {\n      var src = this.getAttribute('src');\n      if (src.substring(0, 4) !== \"snd/\") { return; }\n      // Cut out the basename (strip directory and extension)\n      var name = src.substring(4, src.length - 4);\n      // Create the helper function, which clones the audio object and plays it\n      var Constructor = function() {};\n      Constructor.prototype = this;\n      Snd[name] = function() {\n        var clone = new Constructor();\n        clone.play();\n        // Return the cloned element, so the caller can interrupt the sound effect\n        return clone;\n      };\n    });\n  }\n};\n</code></pre>\n\n<p>So now I can do <em>Snd.boom();</em> from the Firebug console and play 'snd/boom.wav'. Neat. But I still can't play the same sample multiple times. It seems that the &lt;audio&gt; element is really more of a streaming feature rather than something to play sound effects with.</p>\n\n<p>Is there a clever way to make this happen that I'm missing? Preferebly something within HTML5 and Javascript, because this experiment is focused on these two technologies. (And I lack any experience in Flash or Silverlight.)</p>\n\n<p>I should also mention that, my test environment is Firefox 3.5 on Ubuntu 9.10. The other browsers I've tried -- Opera, Midori, Chromium, Epiphany -- produced varying results. Some don't play anything, and some throw exceptions.</p>\n",
            "last_activity_date": 1421947631,
            "question_id": 1933969,
            "score": 218,
            "tags": [
                "javascript",
                "html5"
            ],
            "title": "Sound effects in JavaScript / HTML5"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Like this:</p>\n\n<pre><code>if (str.indexOf(\"Yes\") &gt;= 0)\n</code></pre>\n\n<p>Note that this is case-sensitive.<br>\nIf you want a case-insensitive search, you can write </p>\n\n<pre><code>if (str.toLowerCase().indexOf(\"yes\") &gt;= 0)\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>if (/yes/i.test(str))\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 844
                },
                {
                    "body": "<p>You could use <a href=\"http://www.w3schools.com/jsref/jsref_search.asp\">search</a> or <a href=\"http://www.w3schools.com/jsref/jsref_match.asp\">match</a> for this.</p>\n\n<p><code>str.search( 'Yes' )</code></p>\n\n<p>will return the position of the match, or -1 if it isn't found.</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Another way:</p>\n\n<pre><code>var testStr = \"This is a test\";\n\nif(testStr.contains(\"test\")){\n    alert(\"String Found\");\n}\n</code></pre>\n\n<p>** Tested on Firefox, Safari 6 and Chrome 36 **</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>You can use this Polyfill in ie and chrome</p>\n\n<pre><code>if (!('contains' in String.prototype)) {\n    String.prototype.contains = function (str, startIndex) {\n        \"use strict\";\n        return -1 !== String.prototype.indexOf.call(this, str, startIndex);\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Returns number of times the keyword is included in the string.</p>\n\n<pre><code>str.match(/yes/g).length;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can define an extension method and use it later.</p>\n\n<pre><code>String.prototype.contains = function(it) \n{ \n   return this.indexOf(it) != -1; \n};\n</code></pre>\n\n<p>so that you can use in your page anywhere like:</p>\n\n<pre><code>var str=\"hello how are you\";\nstr.contains(\"are\");\n</code></pre>\n\n<p>which returns <strong>true</strong>.</p>\n\n<p>Refer below post for more extension helper methods.\n<a href=\"http://spshell.blogspot.in/2015/03/jqery-helper-methods.html\" rel=\"nofollow\">Javascript helper methods</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a shoppingcart that displays product options in a dropdown menu, and I want to make some other fields on the page only visible if they select \"Yes\" in the previous option.  The problem is that the shopping cart also includes the price modifier in the text, and that can be different for each product.  So if I do this it works:</p>\n\n<pre><code> $(document).ready(function() {\n  $('select[id=\"Engraving\"]').change(function() {\n   var str = $('select[id=\"Engraving\"] option:selected').text(); \n   if (str == \"Yes (+ $6.95)\") {\n    $('.engraving').show();\n   } else {\n    $('.engraving').hide();\n   }\n  });\n });\n</code></pre>\n\n<p>However I would rather use something like this:</p>\n\n<pre><code> $(document).ready(function() {\n  $('select[id=\"Engraving\"]').change(function() {\n   var str = $('select[id=\"Engraving\"] option:selected').text(); \n   if (str *= \"Yes\") {\n    $('.engraving').show();\n   } else {\n    $('.engraving').hide();\n   }\n  });\n });\n</code></pre>\n\n<p>Which doesn't work.  </p>\n\n<p>I only want to perform the action if the selected option contains the word \"Yes\", and would ignore the price modifier.</p>\n\n<p>I appreciate any help.</p>\n",
            "last_activity_date": 1425388107,
            "question_id": 3480771,
            "score": 311,
            "tags": [
                "javascript",
                "jquery",
                "string",
                "contains"
            ],
            "title": "How to see if string contains substring"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>There's a whole API for managing portfolios. *Link removed. Google no longer provides an developer API for this.</p>\n\n<p>Getting stock quotes is a little harder.  I found one article where someone got stock quotes using Google Spreadsheets.  Here is <a href=\"http://yken.org/2009/01/05/how-to-get-a-real-time-stock-quote-using-google-api/\" rel=\"nofollow\">another example of that</a>.</p>\n\n<p>You can also use the <a href=\"http://googlefinanceblog.blogspot.com/2007/10/api-gadgets-and-tabs-oh-my.html\" rel=\"nofollow\">gadgets</a> but I guess that's not what you're after.</p>\n\n<p>The API you mention is interesting but doesn't seem to be documented (as far as I've been able to find anyway).</p>\n\n<p>Here is some information on <a href=\"http://computerprogramming.suite101.com/article.cfm/an_introduction_to_google_finance\" rel=\"nofollow\">historical prices</a>, just for reference sake.</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Perhaps of interest, the Google Finance API documentaton includes <a href=\"http://code.google.com/apis/finance/docs/finance-gadgets.html#Raw_Data\" rel=\"nofollow\">a section detailing how to access different parameters via JavaScript</a>.</p>\n\n<p>I suppose the JavaScript API might be a wrapper to the JSON request you mention above... perhaps you could check which HTTP requests are being sent.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found this site helpful.</p>\n\n<p><a href=\"http://benjisimon.blogspot.com/2009/01/truly-simple-stock-api.html\">http://benjisimon.blogspot.com/2009/01/truly-simple-stock-api.html</a></p>\n\n<p>It links to an API yahoo seems to offer that is very simple and useful.</p>\n\n<p>For instance:</p>\n\n<p><a href=\"http://finance.yahoo.com/d/quotes.csv?s=GOOG+AAPL&amp;f=snl1\">http://finance.yahoo.com/d/quotes.csv?s=GOOG+AAPL&amp;f=snl1</a></p>\n\n<p>Full details here:</p>\n\n<p><a href=\"http://www.gummy-stuff.org/Yahoo-data.htm\">http://www.gummy-stuff.org/Yahoo-data.htm</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Here is an example that you can use. Havent got Google Finance yet, but Here is the Yahoo Example. You will need the <a href=\"http://htmlagilitypack.codeplex.com/\" rel=\"nofollow\">HTMLAgilityPack</a> , Which is awesome. Happy Symbol Hunting.</p>\n\n<p>Call the procedure by using <code>YahooStockRequest(string Symbols);</code></p>\n\n<p>Where Symbols = a comma-delimited string of symbols, or just one symbol</p>\n\n<pre><code>public string YahooStockRequest(string Symbols,bool UseYahoo=true)\n        {\n            {\n                string StockQuoteUrl = string.Empty;\n\n                try\n                {\n                    // Use Yahoo finance service to download stock data from Yahoo\n                    if (UseYahoo)\n                    {\n                        string YahooSymbolString = Symbols.Replace(\",\",\"+\");\n                        StockQuoteUrl = @\"http://finance.yahoo.com/q?s=\" + YahooSymbolString + \"&amp;ql=1\";\n                    }\n                    else\n                    {\n                        //Going to Put Google Finance here when I Figure it out.\n                    }\n\n                    // Initialize a new WebRequest.\n                    HttpWebRequest webreq = (HttpWebRequest)WebRequest.Create(StockQuoteUrl);\n                    // Get the response from the Internet resource.\n                    HttpWebResponse webresp = (HttpWebResponse)webreq.GetResponse();\n                    // Read the body of the response from the server.\n\n                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();\n                    string pageSource;\n                    using (StreamReader sr = new StreamReader(webresp.GetResponseStream()))\n                    {\n                        pageSource = sr.ReadToEnd();\n                    }\n                    doc.LoadHtml(pageSource.ToString());\n                    if (UseYahoo)\n                    {\n                        string Results=string.Empty;\n                        //loop through each Symbol that you provided with a \",\" delimiter\n                        foreach (string SplitSymbol in Symbols.Split(new char[] { ',' }))\n                        {\n                            Results+=SplitSymbol + \" : \" + doc.GetElementbyId(\"yfs_l10_\" + SplitSymbol).InnerText + Environment.NewLine;\n                        }\n                        return (Results);\n                    }\n                    else\n                    {\n                        return (doc.GetElementbyId(\"ref_14135_l\").InnerText);\n                    }\n\n                }\n                catch (WebException Webex)\n                {\n                    return(\"SYSTEM ERROR DOWNLOADING SYMBOL: \" + Webex.ToString());\n\n                }\n\n            }\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The <a href=\"https://web.archive.org/web/20111209142224/http://code.google.com/apis/finance/docs/finance-gadgets.html\">Google Finance Gadget API</a> has been officially <a href=\"http://googlecode.blogspot.com/2011/05/spring-cleaning-for-some-of-our-apis.html\">deprecated since October 2012</a>, but as of April 2014, it's still active:</p>\n\n<p><a href=\"http://www.google.com/finance/info?q=NASDAQ%3aGOOG\">http://www.google.com/finance/info?q=NASDAQ:GOOG</a><br>\n<a href=\"http://www.google.com/finance/info?q=CURRENCY%3aGBPUSD\">http://www.google.com/finance/info?q=CURRENCY:GBPUSD</a><br>\n<a href=\"http://finance.google.com/finance/info?client=ig&amp;q=AAPL,YHOO\">http://finance.google.com/finance/info?client=ig&amp;q=AAPL,YHOO</a></p>\n\n<p>You can also get charts: <a href=\"https://www.google.com/finance/getchart?q=YELP\">https://www.google.com/finance/getchart?q=YELP</a></p>\n\n<p><strong>Note that if your application is for <a href=\"https://groups.google.com/d/msg/google-finance-apis/O8fjsgnamHE/-ZKSjif4yDIJ\">public consumption, using the Google Finance API is against Google's terms of service</a>.</strong></p>\n\n<p>Check <a href=\"http://digitalpbk.com/stock/google-finance-get-stock-quote-realtime\">google-finance-get-stock-quote-realtime</a> for the complete code in python </p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Building upon the shoulders of giants...here's a one-liner I wrote to zap all of Google's current stock data into local Bash shell variables:</p>\n\n<pre><code>stock=$1 \n\n# Fetch from Google Finance API, put into local variables\neval $(curl -s \"http://www.google.com/ig/api?stock=$stock\"|sed 's/&lt;/\\n&lt;/g' |sed '/data=/!d; s/ data=/=/g; s/\\/&gt;/; /g; s/&lt;/GF_/g' |tee /tmp/stockprice.tmp.log)\n\necho \"$stock,$(date +%Y-%m-%d),$GF_open,$GF_high,$GF_low,$GF_last,$GF_volume\"\n</code></pre>\n\n<p>Then you will have variables like $GF_last $GF_open $GF_volume etc. readily available. Run env or see inside /tmp/stockprice.tmp.log</p>\n\n<pre><code>http://www.google.com/ig/api?stock=TVIX&amp;output=csv by itself returns:\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;xml_api_reply version=\"1\"&gt;\n&lt;finance module_id=\"0\" tab_id=\"0\" mobile_row=\"0\" mobile_zipped=\"1\" row=\"0\" section=\"0\" &gt;\n&lt;symbol data=\"TVIX\"/&gt;\n&lt;pretty_symbol data=\"TVIX\"/&gt;\n&lt;symbol_lookup_url data=\"/finance?client=ig&amp;amp;q=TVIX\"/&gt;\n&lt;company data=\"VelocityShares Daily 2x VIX Short Term ETN\"/&gt;\n&lt;exchange data=\"AMEX\"/&gt;\n&lt;exchange_timezone data=\"ET\"/&gt;\n&lt;exchange_utc_offset data=\"+05:00\"/&gt;\n&lt;exchange_closing data=\"960\"/&gt;\n&lt;divisor data=\"2\"/&gt;\n&lt;currency data=\"USD\"/&gt;\n&lt;last data=\"57.45\"/&gt;\n&lt;high data=\"59.70\"/&gt;\n&lt;low data=\"56.85\"/&gt;\n\netc.\n</code></pre>\n\n<p>So for <code>stock=\"FBM\"</code> <strong>/tmp/stockprice.tmp.log</strong>  (and your environment) will contain:</p>\n\n<pre><code>GF_symbol=\"FBM\"; \nGF_pretty_symbol=\"FBM\"; \nGF_symbol_lookup_url=\"/finance?client=ig&amp;amp;q=FBM\"; \nGF_company=\"Focus Morningstar Basic Materials Index ETF\"; \nGF_exchange=\"NYSEARCA\"; \nGF_exchange_timezone=\"\"; \nGF_exchange_utc_offset=\"\"; \nGF_exchange_closing=\"\"; \nGF_divisor=\"2\"; \nGF_currency=\"USD\"; \nGF_last=\"22.82\"; \nGF_high=\"22.82\"; \nGF_low=\"22.82\"; \nGF_volume=\"100\"; \nGF_avg_volume=\"\"; \nGF_market_cap=\"4.56\"; \nGF_open=\"22.82\"; \nGF_y_close=\"22.80\"; \nGF_change=\"+0.02\"; \nGF_perc_change=\"0.09\"; \nGF_delay=\"0\"; \nGF_trade_timestamp=\"8 hours ago\"; \nGF_trade_date_utc=\"20120228\"; \nGF_trade_time_utc=\"184541\"; \nGF_current_date_utc=\"20120229\"; \nGF_current_time_utc=\"033534\"; \nGF_symbol_url=\"/finance?client=ig&amp;amp;q=FBM\"; \nGF_chart_url=\"/finance/chart?q=NYSEARCA:FBM&amp;amp;tlf=12\"; \nGF_disclaimer_url=\"/help/stock_disclaimer.html\"; \nGF_ecn_url=\"\"; \nGF_isld_last=\"\"; \nGF_isld_trade_date_utc=\"\"; \nGF_isld_trade_time_utc=\"\"; \nGF_brut_last=\"\"; \nGF_brut_trade_date_utc=\"\"; \nGF_brut_trade_time_utc=\"\"; \nGF_daylight_savings=\"false\"; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The problem with Yahoo and Google data is that it violates terms of service if you're using it for commercial use. When your site/app is still small it's not biggie, but as soon as you grow a little you start getting cease and desists from the exchanges.\nA licensed solution example is FinancialContent: <a href=\"http://www.financialcontent.com/json.php\" rel=\"nofollow\">http://www.financialcontent.com/json.php</a>\nor <a href=\"http://www.xignite.com\" rel=\"nofollow\">Xignite</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is no longer an active API for google, you can try Xignite, although they charge: <a href=\"http://www.xignite.com\" rel=\"nofollow\">http://www.xignite.com</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The simplest way as you have explained is this <a href=\"https://www.google.com/finance?q=INDEXDJX%3a.DJI\" rel=\"nofollow\">link</a> this is for \n'Dow Jones Industrial Average'</p>\n\n<p><a href=\"https://www.google.com/finance?q=INDEXNASDAQ%3aNDX\" rel=\"nofollow\">Link 2</a> is for 'NASDAQ-100'</p>\n\n<p>and for all related to NASDAQ <a href=\"https://www.google.com/finance?q=NASDAQ\" rel=\"nofollow\">link 3</a> </p>\n\n<p>I think this should be it, else you want same in JSON notations the same as Microsoft</p>\n\n<p>Please refer this <a href=\"http://stackoverflow.com/questions/6335121/google-finance-how-to-get-the-json-data-streamed\">old post</a> I think this will help,</p>\n\n<p>Update:</p>\n\n<p>To know the details of volume and other details,\nI have created a vbscript that is using IE object to fetch details from the link, and alerts the content in the particular id(Create a .vbs file and run it..</p>\n\n<pre><code>Set IE = CreateObject(\"InternetExplorer.Application\")\nwhile IE.readyState = 4: WScript.Sleep 10: wend\nIE.Navigate \"https://www.google.com/finance?q=INDEXNASDAQ%3ANDX&amp;sq=NASDAQ&amp;sp=2&amp;ei=B3UoUsiIH5DIlgPEsQE\"\nIE.visible = true\nwhile IE.readyState = 4: WScript.Sleep 10: wend\ndim ht\nht= IE.document.getElementById(\"market-data-div\").innerText\nmsgBox ht\nIE.quit\n</code></pre>\n\n<p>this will alert the values from page\nlike this</p>\n\n<pre><code>3,124.54 0.00 (0.00%)\nSep 4 - Close\nINDEXNASDAQ real-time data - Disclaimer\nRange       -\n52 week 2,494.38 - 3,149.24\nOpen        -\nVol.    0.00\n</code></pre>\n\n<p>I am sure this will help..</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try with this:\n<a href=\"http://finance.google.com/finance/info?client=ig&amp;q=NASDAQ:GOOGL\" rel=\"nofollow\">http://finance.google.com/finance/info?client=ig&amp;q=NASDAQ:GOOGL</a></p>\n\n<p>It will return you all available details about the mentioned stock.</p>\n\n<p>e.g. out put would look like below:</p>\n\n<p>// [ {\n\"id\": \"694653\"\n,\"t\" : \"GOOGL\"\n,\"e\" : \"NASDAQ\"\n,\"l\" : \"528.08\"\n,\"l_fix\" : \"528.08\"\n,\"l_cur\" : \"528.08\"\n,\"s\": \"0\"\n,\"ltt\":\"4:00PM EST\"\n,\"lt\" : \"Dec 5, 4:00PM EST\"\n,\"lt_dts\" : \"2014-12-05T16:00:14Z\"\n,\"c\" : \"-14.50\"\n,\"c_fix\" : \"-14.50\"\n,\"cp\" : \"-2.67\"\n,\"cp_fix\" : \"-2.67\"\n,\"ccol\" : \"chr\"\n,\"pcls_fix\" : \"542.58\"\n}\n]</p>\n\n<p>You can have your company stock symbol at the end of this URL to get its details:</p>\n\n<pre><code>http://finance.google.com/finance/info?client=ig&amp;q=&lt;YOUR COMPANY STOCK SYMBOL&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Agree with Pareshkumar's answer. Now there is a python wrapper <a href=\"https://pypi.python.org/pypi/googlefinance/0.4\" rel=\"nofollow\" title=\"googlefinance\">googlefinance</a> for the url call. </p>\n\n<p>Install googlefinance</p>\n\n<pre><code>$pip install googlefinance\n</code></pre>\n\n<p>It is easy to get current stock price:</p>\n\n<pre><code>&gt;&gt;&gt; from googlefinance import getQuotes\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; print json.dumps(getQuotes('AAPL'), indent=2)\n[\n  {\n    \"Index\": \"NASDAQ\", \n    \"LastTradeWithCurrency\": \"129.09\", \n    \"LastTradeDateTime\": \"2015-03-02T16:04:29Z\", \n    \"LastTradePrice\": \"129.09\", \n    \"Yield\": \"1.46\", \n    \"LastTradeTime\": \"4:04PM EST\", \n    \"LastTradeDateTimeLong\": \"Mar 2, 4:04PM EST\", \n    \"Dividend\": \"0.47\", \n    \"StockSymbol\": \"AAPL\", \n    \"ID\": \"22144\"\n  }\n]\n</code></pre>\n\n<p>Google finance is a source that provides real-time stock data. There are also other APIs from yahoo, such as <a href=\"https://github.com/lukaszbanasiak/yahoo-finance\" rel=\"nofollow\">yahoo-finance</a>, but they are delayed by 15min for NYSE and NASDAQ stocks.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm looking for access to financial data from Google services. </p>\n\n<p>I found <a href=\"http://finance.google.com/finance/info?client=ig&amp;q=NASDAQ%3aMSFT\">this URL</a> that gets the stock data for Microsoft.</p>\n\n<p>What are all the possible parameters that Google allows for this kind of HTTP request? I'd like to see all the different information that I could get.</p>\n",
            "last_activity_date": 1425393463,
            "question_id": 527703,
            "score": 80,
            "tags": [
                "java",
                "php",
                "javascript",
                "google-api",
                "google-finance"
            ],
            "title": "How can I get stock quotes using Google Finance API?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p><strong>Disclaimer</strong>: This is a very formal description of the above code - this is how <em>I</em> know how to explain it. For a simpler answer - check Zirak's great answer above. This is a more in depth specification in your face and less \"aha\".</p>\n\n<hr>\n\n<p>Several things are happening here. Let's break it up a bit.</p>\n\n<pre><code>var arr = Array.apply(null, { length: 5 }); // Create an array of 5 `undefined` values\n\narr.map(Number.call, Number); // Calculate and return a number based on the index passed\n</code></pre>\n\n<p>In the first line, <a href=\"http://es5.github.io/#x15.4.1\" rel=\"nofollow\">the array constructor is called as a function</a> with <a href=\"http://es5.github.io/#x15.3.4.3\" rel=\"nofollow\"><code>Function.prototype.apply</code></a>.  </p>\n\n<ul>\n<li>The <code>this</code> value is <code>null</code> which does not matter for the Array constructor (<code>this</code> is the same <code>this</code> as in the context according to 15.3.4.3.2.a. </li>\n<li>Then <code>new Array</code> is called being passed an object with a <code>length</code> property - that causes that object to be an array like for all it matters to <code>.apply</code> because of the following clause in <code>.apply</code>:\n<ul>\n<li>Let len be the result of calling the [[Get]] internal method of argArray with argument \"length\".</li>\n</ul></li>\n<li>As such, <code>.apply</code> is passing arguments from 0 to <code>.length</code> , since calling <code>[[Get]]</code> on <code>{ length: 5 }</code> with the values 0 to 4 yields <code>undefined</code> the array constructor is called with five arguments whose value is <code>undefined</code> (getting an undeclared property of an object).</li>\n<li>The array constructor <a href=\"http://es5.github.io/#x15.4.2.1\" rel=\"nofollow\">is called with 0, 2 or more arguments</a>.\nThe length property of the newly constructed array is set to the number of arguments according to the specification and the values to the same values.</li>\n<li>Thus <code>var arr = Array.apply(null, { length: 5 });</code> creates a list of five undefined values.</li>\n</ul>\n\n<p><strong>Note</strong>: Notice the difference here between <code>Array.apply(0,{length: 5})</code> and <code>Array(5)</code>, the first creating five times the primitive value type <code>undefined</code> and the latter creating an empty array of length 5. Specifically, <a href=\"http://es5.github.io/#x15.4.4.19\" rel=\"nofollow\">because of <code>.map</code>'s behavior (8.b)</a> and specifically <code>[[HasProperty]</code> .</p>\n\n<p>So the code above in a compliant specification is the same as:</p>\n\n<pre><code>var arr = [undefined, undefined, undefined, undefined, undefined];\narr.map(Number.call, Number); // Calculate and return a number based on the index passed\n</code></pre>\n\n<p>Now off to the second part.</p>\n\n<ul>\n<li><a href=\"http://es5.github.io/#x15.4.4.19\" rel=\"nofollow\"><code>Array.prototype.map</code></a> calls the callback function (in this case <code>Number.call</code>) on each element of the array and uses the specified <code>this</code> value (in this case setting the <code>this</code> value to `Number).</li>\n<li>The second parameter of the callback in map (in this case <code>Number.call</code>) is the index, and the first is the this value.</li>\n<li>This means that <code>Number</code> is called with <code>this</code> as <code>undefined</code> (the array value) and the index as the parameter. So it's basically the same as mapping each <code>undefined</code> to its array index (since calling <a href=\"http://es5.github.io/#x15.7.1\" rel=\"nofollow\"><code>Number</code></a> performs type conversion, in this case from number to number not changing the index).</li>\n</ul>\n\n<p>Thus, the code above takes the five undefined values and maps each to its index in the array.</p>\n\n<p>Which is why we get the result to our code.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>As you said, the first part:</p>\n\n<pre><code>var arr = Array.apply(null, { length: 5 }); \n</code></pre>\n\n<p>creates an array of 5 <code>undefined</code> values.</p>\n\n<p>The second part is calling the <code>map</code> function of the array which takes 2 arguments and returns a new array of the same size.</p>\n\n<p>The first argument which <code>map</code> takes is actually a function to apply on each element in the array, it is expected to be a function which takes 3 arguments and returns a value.\nFor example:</p>\n\n<pre><code>function foo(a,b,c){\n    ...\n    return ...\n}\n</code></pre>\n\n<p>if we pass the function foo as the first argument it will be called for each element with</p>\n\n<ul>\n<li>a as the value of the current iterated element</li>\n<li>b as the index of the current iterated element</li>\n<li>c as the whole original array</li>\n</ul>\n\n<p>The second argument which <code>map</code> takes is being passed to the function which you pass as the first argument. But it would not be a, b, nor c in case of <code>foo</code>, it would be <code>this</code>.</p>\n\n<p>Two examples:</p>\n\n<pre><code>function bar(a,b,c){\n    return this\n}\nvar arr2 = [3,4,5]\nvar newArr2 = arr2.map(bar, 9);\n//newArr2 is equal to [9,9,9]\n\nfunction baz(a,b,c){\n    return b\n}\nvar newArr3 = arr2.map(baz,9);\n//newArr3 is equal to [0,1,2]\n</code></pre>\n\n<p>and another one just to make it clearer:</p>\n\n<pre><code>function qux(a,b,c){\n    return a\n}\nvar newArr4 = arr2.map(qux,9);\n//newArr4 is equal to [3,4,5]\n</code></pre>\n\n<p>So what about Number.call ?</p>\n\n<p><code>Number.call</code> is a function that takes 2 arguments, and tries to parse the second argument to a number (I'm not sure what it does with the first argument).</p>\n\n<p>Since the second argument that <code>map</code> is passing is the index, the value that will be placed in the new array at that index is equal to the index. Just like the function <code>baz</code> in the example above. <code>Number.call</code> will try to parse the index - it will naturally return the same value.</p>\n\n<p>The second argument you passed to the <code>map</code> function in your code doesn't actually have an effect on the result. Correct me if I'm wrong, please.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>An array is simply an object comprising the 'length' field and some methods (e.g. push). So arr in <code>var arr = { length: 5}</code> is basically the same as an array where the fields 0..4 have the default value which is undefined (i.e. <code>arr[0] === undefined</code> yields true).<br>\nAs for the second part, map, as the name implies, maps from one array to a new one. It does so by traversing through the original array and invoking the mapping-function on each item.</p>\n\n<p>All that's left is to convince you that the result of mapping-function is the index. The trick is to use the method named 'call'(*) which invokes a function with the small exception that the first param is set to be the 'this' context, and the second becomes the first param (and so on). Coincidentally, when the mapping-function is invoked, the second param is the index.</p>\n\n<p>Last but not least, the method which is invoked is the Number \"Class\", and as we know in JS, a \"Class\" is simply a function, and this one (Number) expects the first param to be the value.</p>\n\n<p>(*) found in Function's prototype (and Number is a function).</p>\n\n<p>MASHAL</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Understanding this \"hack\" requires understanding several things:</p>\n\n<ol>\n<li>Why we don't just do <code>Array(5).map(...)</code></li>\n<li>How <code>Function.prototype.apply</code> handles arguments</li>\n<li>How <code>Array</code> handles multiple arguments</li>\n<li>How the <code>Number</code> function handles arguments</li>\n<li>What <code>Function.prototype.call</code> does</li>\n</ol>\n\n<p>They're rather advanced topics in javascript, so this will be more-than-rather long. We'll start from the top. Buckle up!</p>\n\n<h2>1. Why not just <code>Array(5).map</code>?</h2>\n\n<p>What's an array, really? A regular object, containing integer keys, which map to values. It has other special features, for instance the magical <code>length</code> variable, but at it's core, it's a regular <code>key =&gt; value</code> map, just like any other object. Let's play with arrays a little, shall we?</p>\n\n<pre><code>var arr = ['a', 'b', 'c'];\narr.hasOwnProperty(0); //true\narr[0]; //'a'\nObject.keys(arr); //['0', '1', '2']\narr.length; //3, implies arr[3] === undefined\n\n//we expand the array by 1 item\narr.length = 4;\narr[3]; //undefined\narr.hasOwnProperty(3); //false\nObject.keys(arr); //['0', '1', '2']\n</code></pre>\n\n<p>We get to the inherent difference between the number of items in the array, <code>arr.length</code>, and the number of <code>key=&gt;value</code> mappings the array has, which can be different than <code>arr.length</code>.</p>\n\n<p>Expanding the array via <code>arr.length</code> <em>does not</em> create any new <code>key=&gt;value</code> mappings, so it's not that the array has undefined values, it <em>does not have these keys</em>. And what happens when you try to access a non-existent property? You get <code>undefined</code>.</p>\n\n<p>Now we can lift our heads a little, and see why functions like <code>arr.map</code> don't walk over these properties. If <code>arr[3]</code> was merely undefined, and the key existed, all these array functions would just go over it like any other value:</p>\n\n<pre><code>//just to remind you\narr; //['a', 'b', 'c', undefined];\narr.length; //4\narr[4] = 'e';\n\narr; //['a', 'b', 'c', undefined, 'e'];\narr.length; //5\nObject.keys(arr); //['0', '1', '2', '4']\n\narr.map(function (item) { return item.toUpperCase() });\n//[\"A\", \"B\", \"C\", undefined, \"E\"]\n</code></pre>\n\n<p>I intentionally used a method call to further prove the point that the key itself was never there: Calling <code>undefined.toUpperCase</code> would have raised an error, but it didn't. To prove <em>that</em>:</p>\n\n<pre><code>arr[5] = undefined;\narr; //[\"a\", \"b\", \"c\", undefined, \"e\", undefined]\narr.hasOwnProperty(5); //true\narr.map(function (item) { return item.toUpperCase() });\n//TypeError: Cannot call method 'toUpperCase' of undefined\n</code></pre>\n\n<p>And now we get to my point: How <code>Array(N)</code> does things. <a href=\"http://es5.github.io/#x15.4.2.2\" rel=\"nofollow\">Section 15.4.2.2</a> describes the process. There's a bunch of mumbo jumbo we don't care about, but if you manage to read between the lines (or you can just trust me on this one, but don't), it basically boils down to this:</p>\n\n<pre><code>function Array(len) {\n    var ret = [];\n    ret.length = len;\n    return ret;\n}\n</code></pre>\n\n<p>(operates under the assumption (which is checked in the actual spec) that <code>len</code> is a valid uint32, and not just any number of value)</p>\n\n<p>So now you can see why doing <code>Array(5).map(...)</code> wouldn't work - we don't define <code>len</code> items on the array, we don't create the <code>key =&gt; value</code> mappings, we simply alter the <code>length</code> property.</p>\n\n<p>Now that we have that out of the way, let's look at the second magical thing:</p>\n\n<h2>2. How <code>Function.prototype.apply</code> works</h2>\n\n<p>What <code>apply</code> does is basically take an array, and unroll it as a function call's arguments. That means that the following are pretty much the same:</p>\n\n<pre><code>function foo (a, b, c) {\n    return a + b + c;\n}\nfoo(0, 1, 2); //3\nfoo.apply(null, [0, 1, 2]); //3\n</code></pre>\n\n<p>Now, we can ease the process of seeing how <code>apply</code> works by simply logging the <code>arguments</code> special variable:</p>\n\n<pre><code>function log () {\n    console.log(arguments);\n}\n\nlog.apply(null, ['mary', 'had', 'a', 'little', 'lamb']);\n //[\"mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\n//arguments is a pseudo-array itself, so we can use it as well\n(function () {\n    log.apply(null, arguments);\n})('mary', 'had', 'a', 'little', 'lamb');\n //[\"mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\n//a NodeList, like the one returned from DOM methods, is also a pseudo-array\nlog.apply(null, document.getElementsByTagName('script'));\n //[script, script, script, script, script, script, script, script, script, script, script, script, script, script, script, script, script, script, script, script]\n\n//carefully look at the following two\nlog.apply(null, Array(5));\n//[undefined, undefined, undefined, undefined, undefined]\n//note that the above are not undefined keys - but the value undefined itself!\n\nlog.apply(null, {length : 5});\n//[undefined, undefined, undefined, undefined, undefined]\n</code></pre>\n\n<p>It's easy to prove my claim in the second-to-last example:</p>\n\n<pre><code>function ahaExclamationMark () {\n    console.log(arguments.length);\n    console.log(arguments.hasOwnProperty(0));\n}\n\nahaExclamationMark.apply(null, Array(2)); //2, true\n</code></pre>\n\n<p>(yes, pun intended). The <code>key =&gt; value</code> mapping may not have existed in the array we passed over to <code>apply</code>, but it certainly exists in the <code>arguments</code> variable. It's the same reason the last example works: The keys do not exist on the object we pass, but they do exist in <code>arguments</code>.</p>\n\n<p>Why is that? Let's look at <a href=\"http://es5.github.io/#x15.3.4.3\" rel=\"nofollow\">Section 15.3.4.3</a>, where <code>Function.prototype.apply</code> is defined. Mostly things we don't care about, but here's the interesting portion:</p>\n\n<blockquote>\n  <ol start=\"4\">\n  <li>Let len be the result of calling the [[Get]] internal method of argArray with argument \"length\".</li>\n  </ol>\n</blockquote>\n\n<p>Which basically means: <code>argArray.length</code>. The spec then proceeds to do a simple <code>for</code> loop over <code>length</code> items, making a <code>list</code> of corresponding values (<code>list</code> is some internal voodoo, but it's basically an array). In terms of very, very loose code:</p>\n\n<pre><code>Function.prototype.apply = function (thisArg, argArray) {\n    var len = argArray.length,\n        argList = [];\n\n    for (var i = 0; i &lt; len; i += 1) {\n        argList[i] = argArray[i];\n    }\n\n    //yeah...\n    superMagicalFunctionInvocation(this, thisArg, argList);\n};\n</code></pre>\n\n<p>So all we need to mimic an <code>argArray</code> in this case is an object with a <code>length</code> property. And now we can see why the values are undefined, but the keys aren't, on <code>arguments</code>: We create the <code>key=&gt;value</code> mappings.</p>\n\n<p>Phew, so this might not have been shorter than the previous part. But there'll be cake when we finish, so be patient! However, after the following section (which'll be short, I promise) we can begin dissecting the expression. In case you forgot, the question was how does the following work:</p>\n\n<pre><code>Array.apply(null, { length: 5 }).map(Number.call, Number);\n</code></pre>\n\n<h2>3. How <code>Array</code> handles multiple arguments</h2>\n\n<p>So! We saw what happens when you pass a <code>length</code> argument to <code>Array</code>, but in the expression, we pass several things as arguments (an array of 5 <code>undefined</code>, to be exact). <a href=\"http://es5.github.io/#x15.4.2.1\" rel=\"nofollow\">Section 15.4.2.1</a> tells us what to do. The last paragraph is all that matters to us, and it's worded <em>really</em> oddly, but it kind of boils down to:</p>\n\n<pre><code>function Array () {\n    var ret = [];\n    ret.length = arguments.length;\n\n    for (var i = 0; i &lt; arguments.length; i += 1) {\n        ret[i] = arguments[i];\n    }\n\n    return ret;\n}\n\nArray(0, 1, 2); //[0, 1, 2]\nArray.apply(null, [0, 1, 2]); //[0, 1, 2]\nArray.apply(null, Array(2)); //[undefined, undefined]\nArray.apply(null, {length:2}); //[undefined, undefined]\n</code></pre>\n\n<p>Tada! We get an array of several undefined values, and we return an array of these undefined values.</p>\n\n<h2>The first part of the expression</h2>\n\n<p>Finally, we can decipher the following:</p>\n\n<pre><code>Array.apply(null, { length: 5 })\n</code></pre>\n\n<p>We saw that it returns an array containing 5 undefined values, with keys all in existence.</p>\n\n<p>Now, to the second part of the expression:</p>\n\n<pre><code>[undefined, undefined, undefined, undefined, undefined].map(Number.call, Number)\n</code></pre>\n\n<p>This will be the easier, non-convoluted part, as it doesn't so much rely on obscure hacks.</p>\n\n<h2>4. How <code>Number</code> treats input</h2>\n\n<p>Doing <code>Number(something)</code> (<a href=\"http://es5.github.io/#x15.7.1.1\" rel=\"nofollow\">section 15.7.1</a>) converts <code>something</code> to a number, and that is all. How it does that is a bit convoluted, especially in the cases of strings, but the operation is defined in <a href=\"http://es5.github.io/#x9.3\" rel=\"nofollow\">section 9.3</a> in case you're interested.</p>\n\n<h2>5. Games of <code>Function.prototype.call</code></h2>\n\n<p><code>call</code> is <code>apply</code>'s brother, defined in <a href=\"http://es5.github.io/#x15.3.4.4\" rel=\"nofollow\">section 15.3.4.4</a>. Instead of taking an array of arguments, it just takes the arguments it received, and passes them forward.</p>\n\n<p>Things get interesting when you chain more than one <code>call</code> together, crank the weird up to 11:</p>\n\n<pre><code>function log () {\n    console.log(this, arguments);\n}\nlog.call.call(log, {a:4}, {a:5});\n//{a:4}, [{a:5}]\n//^---^  ^-----^\n// this   arguments\n</code></pre>\n\n<p>This is quite wtf worthy until you grasp what's going on. <code>log.call</code> is just a function, equivalent to any other function's <code>call</code> method, and as such, has a <code>call</code> method on itself as well:</p>\n\n<pre><code>log.call === log.call.call; //true\nlog.call === Function.call; //true\n</code></pre>\n\n<p>And what does <code>call</code> do? It accepts a <code>thisArg</code> and a bunch of arguments, and calls its parent function. We can define it via <code>apply</code>  (again, very loose code, won't work):</p>\n\n<pre><code>Function.prototype.call = function (thisArg) {\n    var args = arguments.slice(1); //I wish that'd work\n    return this.apply(thisArg, args);\n};\n</code></pre>\n\n<p>Let's track how this goes down:</p>\n\n<pre><code>log.call.call(log, {a:4}, {a:5});\n  this = log.call\n  thisArg = log\n  args = [{a:4}, {a:5}]\n\n  log.call.apply(log, [{a:4}, {a:5}])\n\n    log.call({a:4}, {a:5})\n      this = log\n      thisArg = {a:4}\n      args = [{a:5}]\n\n      log.apply({a:4}, [{a:5}])\n</code></pre>\n\n<h2>The later part, or the <code>.map</code> of it all</h2>\n\n<p>It's not over yet. Let's see what happens when you supply a function to most array methods:</p>\n\n<pre><code>function log () {\n    console.log(this, arguments);\n}\n\nvar arr = ['a', 'b', 'c'];\narr.forEach(log);\n//window, ['a', 0, ['a', 'b', 'c']]\n//window, ['b', 1, ['a', 'b', 'c']]\n//window, ['c', 2, ['a', 'b', 'c']]\n//^----^  ^-----------------------^\n// this         arguments\n</code></pre>\n\n<p>If we don't provide a <code>this</code> argument ourselves, it defaults to <code>window</code>. Take note of the order in which the arguments are provided to our callback, and let's weird it up all the way to 11 again:</p>\n\n<pre><code>arr.forEach(log.call, log);\n//'a', [0, ['a', 'b', 'c']]\n//'b', [1, ['a', 'b', 'c']]\n//'b', [2, ['a', 'b', 'c']]\n// ^    ^\n</code></pre>\n\n<p>Whoa whoa whoa...let's back up a bit. What's going on here? We can see in <a href=\"http://es5.github.io/#x15.4.4.18\" rel=\"nofollow\">section 15.4.4.18</a>, where <code>forEach</code> is defined, the following pretty much happens:</p>\n\n<pre><code>var callback = log.call,\n    thisArg = log;\n\nfor (var i = 0; i &lt; arr.length; i += 1) {\n    callback.call(thisArg, arr[i], i, arr);\n}\n</code></pre>\n\n<p>So, we get this:</p>\n\n<pre><code>log.call.call(log, arr[i], i, arr);\n//After one `.call`, it cascades to:\nlog.call(arr[i], i, arr);\n//Further cascading to:\nlog(i, arr);\n</code></pre>\n\n<p>Now we can see how <code>.map(Number.call, Number)</code> works:</p>\n\n<pre><code>Number.call.call(Number, arr[i], i, arr);\nNumber.call(arr[i], i, arr);\nNumber(i, arr);\n</code></pre>\n\n<p>Which returns the transformation of <code>i</code>, the current index, to a number.</p>\n\n<h2>In conclusion,</h2>\n\n<p>The expression</p>\n\n<pre><code>Array.apply(null, { length: 5 }).map(Number.call, Number);\n</code></pre>\n\n<p>Works in two parts:</p>\n\n<pre><code>var arr = Array.apply(null, { length: 5 }); //1\narr.map(Number.call, Number); //2\n</code></pre>\n\n<p>The first part creates an array of 5 undefined items. The second goes over that array and takes its indices, resulting in an array of element indices:</p>\n\n<pre><code>[0, 1, 2, 3, 4]\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 183
                }
            ],
            "body": "<p>I've run into the following code in the es-discuss mailing list:</p>\n\n<pre><code>Array.apply(null, { length: 5 }).map(Number.call, Number);\n</code></pre>\n\n<p>This produces</p>\n\n<pre><code>[0, 1, 2, 3, 4]\n</code></pre>\n\n<p>Why is this the result of the code? What's happening here?</p>\n",
            "last_activity_date": 1420633675,
            "question_id": 18947892,
            "score": 92,
            "tags": [
                "javascript",
                "ecmascript-5"
            ],
            "title": "Creating range in JavaScript - strange syntax"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Why not just have five separate images of a star (empty, quarter-full, half-full, three-quarter-full and full) then just inject the images into your DOM depending on the truncated or rouded value of rating multiplied by 4 (to get a whole numner for the quarters)?</p>\n\n<p>For example, 4.8618164 multiplied by 4 and rounded is 19 which would be four and three quarter stars.</p>\n\n<p>Alternatively (if you're lazy like me), just have one image selected from 21 (0 stars through 5 stars in one-quarter increments) and select the single image based on the aforementioned value. Then it's just one calculation followed by an image change in the DOM (rather than trying to change five different images).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here's a solution for you, using only one very tiny and simple image and one automatically generated span element:</p>\n\n<h3>CSS</h3>\n\n<pre><code>span.stars, span.stars span {\n    display: block;\n    background: url(stars.png) 0 -16px repeat-x;\n    width: 80px;\n    height: 16px;\n}\n\nspan.stars span {\n    background-position: 0 0;\n}\n</code></pre>\n\n<h3>Image</h3>\n\n<blockquote>\n  <p><img src=\"http://www.ulmanen.fi/stuff/stars.png\" alt=\"alt text\"></p>\n</blockquote>\n\n<p><strong>Note:</strong> do <em>NOT</em> hotlink to the above image! Copy the file to your own server and use it from there.</p>\n\n<h3>jQuery</h3>\n\n<pre><code>$.fn.stars = function() {\n    return $(this).each(function() {\n        // Get the value\n        var val = parseFloat($(this).html());\n        // Make sure that the value is in 0 - 5 range, multiply to get width\n        var size = Math.max(0, (Math.min(5, val))) * 16;\n        // Create stars holder\n        var $span = $('&lt;span /&gt;').width(size);\n        // Replace the numerical value with stars\n        $(this).html($span);\n    });\n}\n</code></pre>\n\n<p>If you want to restrict the stars to only half or quarter star sizes, add one of these rows before the <code>var size</code> row:</p>\n\n<pre><code>val = Math.round(val * 4) / 4; /* To round to nearest quarter */\nval = Math.round(val * 2) / 2; /* To round to nearest half */\n</code></pre>\n\n<h3>HTML</h3>\n\n<pre><code>&lt;span class=\"stars\"&gt;4.8618164&lt;/span&gt;\n&lt;span class=\"stars\"&gt;2.6545344&lt;/span&gt;\n&lt;span class=\"stars\"&gt;0.5355&lt;/span&gt;\n&lt;span class=\"stars\"&gt;8&lt;/span&gt;\n</code></pre>\n\n<h3>Usage</h3>\n\n<pre><code>$(function() {\n    $('span.stars').stars();\n});\n</code></pre>\n\n<h3>Output</h3>\n\n<blockquote>\n  <p><img src=\"http://www.ulmanen.fi/stuff/stars_output.png\" alt=\"Image from fugue icon set (www.pinvoke.com)\"></p>\n</blockquote>\n\n<h3>Demo</h3>\n\n<blockquote>\n  <p><a href=\"http://www.ulmanen.fi/stuff/stars.php\">http://www.ulmanen.fi/stuff/stars.php</a></p>\n</blockquote>\n\n<p>This will probably suit your needs. With this method you don't have to calculate any three quarter or whatnot star widths, just give it a float and it'll give you your stars.</p>\n\n<hr>\n\n<p>A small explanation on how the stars are presented might be in order.</p>\n\n<p>The script creates two block level span elements. Both of the spans initally get a size of 80px * 16px and a background image stars.png. The spans are nested, so that the structure of the spans looks like this:</p>\n\n<pre><code>&lt;span class=\"stars\"&gt;\n    &lt;span&gt;&lt;/span&gt;\n&lt;/span&gt;\n</code></pre>\n\n<p>The outer span gets a <code>background-position</code> of <code>0 -16px</code>. That makes the gray stars in the outer span visible. As the outer span has height of 16px and <code>repeat-x</code>, it will only show 5 gray stars.</p>\n\n<p>The inner span on the other hand has a <code>background-position</code> of <code>0 0</code> which makes only the yellow stars visible.</p>\n\n<p>This would of course work with two separate imagefiles, star_yellow.png and star_gray.png. But as the stars have a fixed height, we can easily combine them into one image. This utilizes the <a href=\"http://css-tricks.com/css-sprites/\">CSS sprite technique</a>.</p>\n\n<p>Now, as the spans are nested, they are automatically overlayed over each other. In the default case, when the width of both spans is 80px, the yellow stars completely obscure the grey stars.</p>\n\n<p>But when we adjust the width of the inner span, the width of the yellow stars decreases, revealing the gray stars.</p>\n\n<p>Accessibility-wise, it would have been wiser to leave the float number inside the inner span and hide it with <code>text-indent: -9999px</code>, so that people with CSS turned off would at least see the floating point number instead of the stars.</p>\n\n<p>Hopefully that made some sense.</p>\n\n<hr>\n\n<h3>Updated 2010/10/22</h3>\n\n<p>Now even more compact and harder to understand! Can also be squeezed down to a one liner:</p>\n\n<pre><code>$.fn.stars = function() {\n    return $(this).each(function() {\n        $(this).html($('&lt;span /&gt;').width(Math.max(0, (Math.min(5, parseFloat($(this).html())))) * 16));\n    });\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 157
                }
            ],
            "body": "<p>I have been looking at jquery plugin and was wondering how to adapt that plugin to turn a number (like 4.8618164) into a 4.8618164 stars filled out of 5. Basically interpreting a number &lt;5 into stars filled in a 5-star rating system using jQuery/JS/CSS. </p>\n\n<p>Note that this would only display/show the stars rating from an already available number and not accept new ratings submissions. </p>\n",
            "last_activity_date": 1401999669,
            "question_id": 1987524,
            "score": 57,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "rating"
            ],
            "title": "Turn a number into star rating display using jQuery and CSS"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>MobileSafari supports the <a href=\"http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW16\" rel=\"nofollow\"><code>orientationchange</code></a> event on the <code>window</code> object. Unfortunately there doesn't seem to be a way to directly control the zoom via JavaScript. Perhaps you could dynamically write/change the <code>meta</code> tag which controls the viewport \u2014 but I doubt that would work, it only affects the initial state of the page. Perhaps you could use this event to actually resize your content using CSS. Good luck!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same problem, and setting the maximum-scale=1.0 worked for me.</p>\n\n<p>Edit:\nAs mentioned in the comments this does disable user zoom except when the content exceeds the width-resolution. As mentioned, this might not be wise. It might also be desired in some cases.</p>\n\n<p>The viewport code:</p>\n\n<pre><code>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0;\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>If you have the width set in the viewport :</p>\n\n<pre><code>&lt;meta name = \"viewport\" content = \"width=device-width; initial-scale=1.0;\n maximum-scale=1.0;\" /&gt;\n</code></pre>\n\n<p>And then change the orientation it will randomly zoom in sometimes (especially if you are dragging on the screen) to fix this don't set a width here I used :</p>\n\n<pre><code>&lt;meta id=\"viewport\" name=\"viewport\" content=\"initial-scale=1.0; user-scalable=0;\nminimum-scale=1.0; maximum-scale=1.0\" /&gt;\n</code></pre>\n\n<p>This fixes the zoom whatever happens then you can use either window.onorientationchange event or if you want it to be platform independant (handy for testing) the <a href=\"http://ajaxian.com/archives/iphone-web-development-tips-and-official-documentation-released\" rel=\"nofollow\">window.innerWidth</a> method.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Elisabeth you can change viewport content dynamically by adding the \"id\" property to the metatag:</p>\n\n<pre><code>&lt;meta name=\"viewport\" id=\"view\" content=\"user-scalable=yes, width=device-width minimum-scale=1, maximum-scale=1\" /&gt;\n</code></pre>\n\n<p>Then you just can call by javascript: </p>\n\n<pre><code>document.getElementById(\"view\").setAttribute('content','user-scalable=yes, width=device-width, minimum-scale=1, maximum-scale=10');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Jeremy Keith (<a href=\"http://twitter.com/adactio\" rel=\"nofollow\">@adactio</a>) has a good solution for this on  his blog <a href=\"http://adactio.com/journal/4470/\" rel=\"nofollow\">Orientation and scale</a></p>\n\n<p>Keep the Markup scalable by not setting a maximum-scale in markup.</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n</code></pre>\n\n<p>Then disable scalability with javascript on load until <em>gesturestart</em> when you allow scalability again with this script:</p>\n\n<pre><code>if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {\n    var viewportmeta = document.querySelector('meta[name=\"viewport\"]');\n    if (viewportmeta) {\n        viewportmeta.content = 'width=device-width, minimum-scale=1.0, maximum-scale=1.0, initial-scale=1.0';\n        document.body.addEventListener('gesturestart', function () {\n            viewportmeta.content = 'width=device-width, minimum-scale=0.25, maximum-scale=1.6';\n        }, false);\n    }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Update 22-12-2014:</strong><br>\nOn an iPad 1 this doesnt work, it fails on the eventlistener. I've found that removing <code>.body</code> fixes that:</p>\n\n<pre><code>document.addEventListener('gesturestart', function() { /* */ });\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 75
                },
                {
                    "body": "<p>I created a working demo of a landscape/portrait layout but the zoom must be disabled for it to work without JavaScript:</p>\n\n<p><a href=\"http://matthewjamestaylor.com/blog/ipad-layout-with-landscape-portrait-modes\" rel=\"nofollow\">http://matthewjamestaylor.com/blog/ipad-layout-with-landscape-portrait-modes</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://scottjehl.com/\">Scott Jehl</a> came up with a fantastic solution that uses the accelerometer to anticipate orientation changes.  This solution is very responsive and does not interfere with zoom gestures.</p>\n\n<p><a href=\"https://github.com/scottjehl/iOS-Orientationchange-Fix\">https://github.com/scottjehl/iOS-Orientationchange-Fix</a></p>\n\n<blockquote>\n  <p>How it works: This fix works by listening to the device's\n  accelerometer to predict when an orientation change is about to occur.\n  When it deems an orientation change imminent, the script disables user\n  zooming, allowing the orientation change to occur properly, with\n  zooming disabled. The script restores zoom again once the device is\n  either oriented close to upright, or after its orientation has\n  changed. This way, user zooming is never disabled while the page is in\n  use.</p>\n</blockquote>\n\n<p>Minified source:</p>\n\n<pre><code>/*! A fix for the iOS orientationchange zoom bug. Script by @scottjehl, rebound by @wilto.MIT License.*/(function(m){if(!(/iPhone|iPad|iPod/.test(navigator.platform)&amp;&amp;navigator.userAgent.indexOf(\"AppleWebKit\")&gt;-1)){return}var l=m.document;if(!l.querySelector){return}var n=l.querySelector(\"meta[name=viewport]\"),a=n&amp;&amp;n.getAttribute(\"content\"),k=a+\",maximum-scale=1\",d=a+\",maximum-scale=10\",g=true,j,i,h,c;if(!n){return}function f(){n.setAttribute(\"content\",d);g=true}function b(){n.setAttribute(\"content\",k);g=false}function e(o){c=o.accelerationIncludingGravity;j=Math.abs(c.x);i=Math.abs(c.y);h=Math.abs(c.z);if(!m.orientation&amp;&amp;(j&gt;7||((h&gt;6&amp;&amp;i&lt;8||h&lt;8&amp;&amp;i&gt;6)&amp;&amp;j&gt;5))){if(g){b()}}else{if(!g){f()}}}m.addEventListener(\"orientationchange\",f,false);m.addEventListener(\"devicemotion\",e,false)})(this);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I have found a new workaround, different from any other that I have seen, by disabling the native iOS zoom, and instead implementing zoom functionality in JavaScript.</p>\n\n<p>An excellent background on the various other solutions to the zoom/orientation problem is by S\u00e9rgio Lopes: <a href=\"https://github.com/sergiolopes/ios-zoom-bug-fix/#other-solutions\" rel=\"nofollow\">A fix to the famous iOS zoom bug on orientation change to portrait</a>.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n    &lt;meta name=\"viewport\" id=\"viewport\" content=\"user-scalable=no,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\" /&gt;\n    &lt;title&gt;Robocat mobile Safari zoom fix&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            padding: 0;\n            margin: 0;\n        }\n        #container {\n            -webkit-transform-origin: 0px 0px;\n            -webkit-transform: scale3d(1,1,1);\n            /* shrink-to-fit needed so can measure width of container http://stackoverflow.com/questions/450903/make-css-div-width-equal-to-contents */\n            display: inline-block;\n            *display: inline;\n            *zoom: 1;\n        }\n        #zoomfix {\n            opacity: 0;\n            position: absolute;\n            z-index: -1;\n            top: 0;\n            left: 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;input id=\"zoomfix\" disabled=\"1\" tabIndex=\"-1\"&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;style&gt;\n            table {\n                counter-reset: row cell;\n                background-image: url(http://upload.wikimedia.org/wikipedia/commons/3/38/JPEG_example_JPG_RIP_010.jpg);\n            }\n            tr {\n                counter-increment: row;\n            }\n            td:before {\n                counter-increment: cell;\n                color: white;\n                font-weight: bold;\n                content: \"row\" counter(row) \".cell\" counter(cell);\n            }\n        &lt;/style&gt;\n        &lt;table cellspacing=\"10\"&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n            &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n    (function() {\n        var viewportScale = 1;\n        var container = document.getElementById('container');\n        var scale, originX, originY, relativeOriginX, relativeOriginY, windowW, windowH, containerW, containerH, resizeTimer, activeElement;\n        document.addEventListener('gesturestart', function(event) {\n            scale = null;\n            originX = event.pageX;\n            originY = event.pageY;\n            relativeOriginX = (originX - window.pageXOffset) / window.innerWidth;\n            relativeOriginY = (originY - window.pageYOffset) / window.innerHeight;\n            windowW = window.innerWidth;\n            windowH = window.innerHeight;\n            containerW = container.offsetWidth;\n            containerH = container.offsetHeight;\n        });\n        document.addEventListener('gesturechange', function(event) {\n            event.preventDefault();\n            if (originX &amp;&amp; originY &amp;&amp; event.scale &amp;&amp; event.pageX &amp;&amp; event.pageY) {\n                scale = event.scale;\n                var newWindowW = windowW / scale;\n                if (newWindowW &gt; containerW) {\n                    scale = windowW / containerW;\n                }\n                var newWindowH = windowH / scale;\n                if (newWindowH &gt; containerH) {\n                    scale = windowH / containerH;\n                }\n                if (viewportScale * scale &lt; 0.1) {\n                    scale = 0.1/viewportScale;\n                }\n                if (viewportScale * scale &gt; 10) {\n                    scale = 10/viewportScale;\n                }\n                container.style.WebkitTransformOrigin = originX + 'px ' + originY + 'px';\n                container.style.WebkitTransform = 'scale3d(' + scale + ',' + scale + ',1)';\n            }\n        });\n        document.addEventListener('gestureend', function() {\n            if (scale &amp;&amp; (scale &lt; 0.95 || scale &gt; 1.05)) {\n                viewportScale *= scale;\n                scale = null;\n                container.style.WebkitTransform = '';\n                container.style.WebkitTransformOrigin = '';\n                document.getElementById('viewport').setAttribute('content', 'user-scalable=no,initial-scale=' + viewportScale + ',minimum-scale=' + viewportScale + ',maximum-scale=' + viewportScale);\n                document.body.style.WebkitTransform = 'scale3d(1,1,1)';\n                // Without zoomfix focus, after changing orientation and zoom a few times, the iOS viewport scale functionality sometimes locks up (and completely stops working).\n                // The reason I thought this hack would work is because showing the keyboard is the only way to affect the viewport sizing, which forces the viewport to resize (even though the keyboard doesn't actually get time to open!).\n                // Also discovered another amazing side effect: if you have no meta viewport element, and focus()/blur() in gestureend, zoom is disabled!! Wow!\n                var zoomfix = document.getElementById('zoomfix');\n                zoomfix.disabled = false;\n                zoomfix.focus();\n                zoomfix.blur();\n                setTimeout(function() {\n                    zoomfix.disabled = true;\n                    window.scrollTo(originX - relativeOriginX * window.innerWidth, originY - relativeOriginY * window.innerHeight);\n                    // This forces a repaint. repaint *intermittently* fails to redraw correctly, and this fixes the problem.\n                    document.body.style.WebkitTransform = '';\n                }, 0);\n            }\n        });\n    })();\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>It could be improved, but for my needs it avoids the major drawbacks that occur with all the other solutions I have seen. So far I have only tested it using mobile Safari on an iPad 2 with iOS4.</p>\n\n<p>The focus()/blur() is a workaround to prevent the occasional lockup of the zoom functionality which can occur after changing orientation and zooming a few times.</p>\n\n<p>Setting the document.body.style forces a full screen repaint, which avoids an occasional intermittent problems where the repaint badly fails after zoom.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've been using this function in my project.</p>\n\n<pre><code>function changeViewPort(key, val) {\n    var reg = new RegExp(key, \"i\"), oldval = document.querySelector('meta[name=\"viewport\"]').content;\n    var newval = reg.test(oldval) ? oldval.split(/,\\s*/).map(function(v){ return reg.test(v) ? key+\"=\"+val : v; }).join(\", \") : oldval+= \", \"+key+\"=\"+val ;\n    document.querySelector('meta[name=\"viewport\"]').content = newval;\n}\n</code></pre>\n\n<p>so just addEventListener:</p>\n\n<pre><code>if( /iPad|iPhone|iPod|Android/i.test(navigator.userAgent) ){\n    window.addEventListener(\"orientationchange\", function() { \n        changeViewPort(\"maximum-scale\", 1);\n        changeViewPort(\"maximum-scale\", 10);\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm having the same problem that a couple of others have had with getting the correct behavior in a web app on an orientation change, and there doesn't seem to be an obvious solution - I've seen this question asked a couple of times on Stack Overflow and no one's yet been able to answer it.</p>\n\n<p>When I start the app in portrait mode, it works fine. Then I rotate into landscape and it's scaled up.  To get it to scale correctly for the landscape mode I have to double tap on something twice, first to zoom all the way in (the normal double tap behavior) and again to zoom all the way out (again, the normal double tap behavior).  When it zooms out, it zooms out to the correct NEW scale for landscape mode.</p>\n\n<p>Switching back to portrait seems to work more consistently; that is, it handles the zoom so that the scale is correct when the orientation changes back to portrait.</p>\n\n<p>I am trying to figure out if this is a bug? or if this is  something that can be fixed with Javascript?</p>\n\n<p>With the viewport meta content, I am setting the initial-scale to 1.0 and I am NOT setting minimum or maximum scale (nor do I want to).  I am setting the width to device-width.</p>\n\n<p>Any ideas? I know a lot of people would be grateful to have a solution as it seems to be a persistent problem.</p>\n\n<p>Thank you!</p>\n",
            "last_activity_date": 1425004294,
            "question_id": 2557801,
            "score": 72,
            "tags": [
                "javascript",
                "iphone",
                "ipad",
                "orientation"
            ],
            "title": "How do I reset the scale/zoom of a web app on an orientation change on the iPhone?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The iPhoneOS does capture <code>onscroll</code> events, except not the way you may expect.</p>\n\n<blockquote>\n  <p>One-finger panning doesn\u2019t generate any events until the user stops panning\u2014an <code>onscroll</code> event is generated when the page stops moving and redraws\u2014as shown in Figure 6-1.</p>\n  \n  <p><img src=\"http://developer.apple.com/library/safari/documentation/appleapplications/reference/SafariWebContent/Art/events_panning.jpg\" alt=\"\"></p>\n</blockquote>\n\n<p>Similarly, scroll with 2 fingers fires <code>onscroll</code> only after you've stopped scrolling.</p>\n\n<blockquote>\n  <p><img src=\"http://developer.apple.com/library/safari/documentation/appleapplications/reference/SafariWebContent/Art/events_2_finger_scroll.jpg\" alt=\"\"></p>\n</blockquote>\n\n<p>The usual way of installing the handler works e.g.</p>\n\n<pre><code>window.addEventListener('scroll', function() { alert(\"Scrolled\"); });\n// or\n$(window).scroll(function() { alert(\"Scrolled\"); });\n// or\nwindow.onscroll = function() { alert(\"Scrolled\"); };\n// etc \n</code></pre>\n\n<p>(See also <a href=\"http://developer.apple.com/safari/library/documentation/appleapplications/reference/SafariWebContent/HandlingEvents/HandlingEvents.html\">http://developer.apple.com/safari/library/documentation/appleapplications/reference/SafariWebContent/HandlingEvents/HandlingEvents.html</a>)</p>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>For iOS you need to use the <strong>touchmove</strong> event as well as the <strong>scroll</strong> event like this:</p>\n\n<pre><code>document.addEventListener(\"touchmove\", ScrollStart, false);\ndocument.addEventListener(\"scroll\", Scroll, false);\n\nfunction ScrollStart() {\n    //start of scroll event for iOS\n}\n\nfunction Scroll() {\n    //end of scroll event for iOS\n    //and\n    //start/end of scroll event for other browsers\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>Sorry for adding another answer to an old post but I usually get a scroll event very well by using this code (it works at least on 6.1)</p>\n\n<pre><code>element.addEventListener('scroll', function() {\n    console.log(this.scrollTop);\n});\n\n// This is the magic, this gives me \"live\" scroll events\nelement.addEventListener('gesturechange', function() {});\n</code></pre>\n\n<p>And that works for me. Only thing it doesn't do is give a scroll event for the deceleration of the scroll (Once the deceleration is complete you get a final scroll event, do as you will with it.) but if you disable inertia with css by doing this</p>\n\n<pre><code>-webkit-overflow-scrolling: none;\n</code></pre>\n\n<p>You don't get inertia on your elements, for the body though you might have to do the classic </p>\n\n<pre><code>document.addEventListener('touchmove', function(e) {e.preventDefault();}, true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I was able to get a great solution to this problem with iScroll, with the feel of momentum scrolling and everything <a href=\"https://github.com/cubiq/iscroll\" rel=\"nofollow\">https://github.com/cubiq/iscroll</a> The github doc is great, and I mostly followed it. Here's the details of my implementation.</p>\n\n<p><strong>HTML:</strong>\nI wrapped the scrollable area of my content in some divs that iScroll can use:</p>\n\n<pre><code>&lt;div id=\"wrapper\"&gt;\n  &lt;div id=\"scroller\"&gt;\n    ... my scrollable content\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS:</strong>\nI used the Modernizr class for \"touch\" to target my style changes only to touch devices (because I only instantiated iScroll on touch).</p>\n\n<pre><code>.touch #wrapper {\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  overflow: hidden;\n}\n.touch #scroller {\n  position: absolute;\n  z-index: 1;\n  width: 100%;\n}\n</code></pre>\n\n<p><strong>JS:</strong>\nI included iscroll-probe.js from the iScroll download, and then initialized the scroller as below, where updatePosition is my function that reacts to the new scroll position. </p>\n\n<pre><code># coffeescript\nif Modernizr.touch\n  myScroller = new IScroll('#wrapper', probeType: 3)\n  myScroller.on 'scroll', updatePosition\n  myScroller.on 'scrollEnd', updatePosition\n</code></pre>\n\n<p>You have to use myScroller to get the current position now, instead of looking at the scroll offset. Here is a function taken from <a href=\"http://markdalgleish.com/presentations/embracingtouch/\" rel=\"nofollow\">http://markdalgleish.com/presentations/embracingtouch/</a> (a super helpful article, but a little out of date now)</p>\n\n<pre><code>function getScroll(elem, iscroll) {   \n  var x, y;\n\n  if (Modernizr.touch &amp;&amp; iscroll) {\n    x = iscroll.x * -1;\n    y = iscroll.y * -1;   \n  } else {\n    x = elem.scrollTop;\n    y = elem.scrollLeft;   \n  }\n\n  return {x: x, y: y}; \n}\n</code></pre>\n\n<p>The only other gotcha was occasionally I would lose part of my page that I was trying to scroll to, and it would refuse to scroll. I had to add in some calls to myScroller.refresh() whenever I changed the contents of the #wrapper, and that solved the problem.</p>\n\n<p>EDIT: Another gotcha was that iScroll eats all the \"click\" events. I turned on the option to have iScroll emit a \"tap\" event and handled those instead of \"click\" events. Thankfully I didn't need much clicking in the scroll area, so this wasn't a big deal.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I can't seem to capture the scroll event on an iPad.\nNone of these work, what I am doing wrong?</p>\n\n<pre><code>window.onscroll=myFunction;\n\ndocument.onscroll=myFunction;\n\nwindow.attachEvent(\"scroll\",myFunction,false);\n\ndocument.attachEvent(\"scroll\",myFunction,false);\n</code></pre>\n\n<p>They all work even on Safari 3 on Windows.\nIronically, EVERY browser on the PC supports <code>window.onload=</code> if you don't mind clobbering existing events. But no go on iPad.</p>\n",
            "last_activity_date": 1413327982,
            "question_id": 2863547,
            "score": 55,
            "tags": [
                "javascript",
                "iphone",
                "ipad",
                "scroll",
                "onscroll"
            ],
            "title": "javascript scroll event for iPhone/iPad?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Erm... have you tried it?  If you use the exact code that you have there, to my understanding of how <code>animate()</code> works, they should run simultaneously.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>If you run the above as they are, they will appear to run simultaenously.</p>\n\n<p>Here's some test code:</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$(function () {\n    $('#first').animate({ width: 200 }, 200);\n    $('#second').animate({ width: 600 }, 200);\n});\n&lt;/script&gt;\n&lt;div id=\"first\" style=\"border:1px solid black; height:50px; width:50px\"&gt;&lt;/div&gt;\n&lt;div id=\"second\" style=\"border:1px solid black; height:50px; width:50px\"&gt;&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>That would run simultaneously yes.\nwhat if you wanted to run two animations on the same element simultaneously ?</p>\n\n<pre><code>$(function () {\n    $('#first').animate({ width: '200px' }, 200);\n    $('#first').animate({ marginTop: '50px' }, 200);\n});\n</code></pre>\n\n<p>This ends up queuing the animations.\nto get to run them simultaneously you would use only one line.</p>\n\n<pre><code>$(function () {\n    $('#first').animate({ width: '200px', marginTop:'50px' }, 200);\n});\n</code></pre>\n\n<p>Is there any other way to run two different animation on the same element simultaneously  ?</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>yes there is! </p>\n\n<pre><code>$(function () {\n    $(\"#first\").animate({\n       width: '200px'\n    }, { duration: 200, queue: false });\n    $(\"#second\").animate({\n       width: '600px'\n    }, { duration: 200, queue: false });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 273
                },
                {
                    "body": "<p>I believe I found the solution in the jQuery documentation:</p>\n\n<blockquote>\n  <p>Animates all paragraph to a left style\n  of 50 and opacity of 1 (opaque,\n  visible), completing the animation\n  within 500 milliseconds. <strong>It also will\n  do it outside the queue, meaning it\n  will automatically start without\n  waiting for its turn</strong>.</p>\n\n<pre><code>$( \"p\" ).animate({\n  left: \"50px\", opacity: 1\n}, { duration: 500, queue: false }); \n</code></pre>\n</blockquote>\n\n<p>simply add: <code>queue: false</code>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>See this brilliant blog post about animating values in objects.. you can then use the values to animate whatever you like, 100% simultaneously!</p>\n\n<p><a href=\"http://www.josscrowcroft.com/2011/code/jquery-animate-increment-decrement-numeric-text-elements-value/\" rel=\"nofollow\">http://www.josscrowcroft.com/2011/code/jquery-animate-increment-decrement-numeric-text-elements-value/</a></p>\n\n<p>I've used it like this to slide in/out:</p>\n\n<pre><code>        slide : function(id, prop, from, to) {\n            if (from &lt; to) {\n                // Sliding out\n                var fromvals = { add: from, subtract: 0 };\n                var tovals = { add: to, subtract: 0 };\n            } else {\n                // Sliding back in\n                var fromvals = { add: from, subtract: to };\n                var tovals = { add: from, subtract: from };\n            }\n\n            $(fromvals).animate(tovals, {\n                duration: 200,\n                easing: 'swing', // can be anything\n                step: function () { // called on every step\n                    // Slide using the entire -ms-grid-columns setting\n                    $(id).css(prop, (this.add - this.subtract) + 'px 1.5fr 0.3fr 8fr 3fr 5fr 0.5fr');\n                }\n            });\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is it possible to run two animations on two different elements simultaneously? I need the opposite of this question <a href=\"http://stackoverflow.com/questions/668104/jquery-queueing-animations\">Jquery queueing animations</a>.</p>\n\n<p>I need to do something like this...</p>\n\n<pre><code>$('#first').animate({ width: 200 }, 200);\n$('#second').animate({ width: 600 }, 200);\n</code></pre>\n\n<p>but to run those two at the same time. The only thing I could think of would be using <code>setTimeout</code> once for each animation, but I don't think it is the best solution.</p>\n",
            "last_activity_date": 1364176268,
            "question_id": 1251300,
            "score": 137,
            "tags": [
                "javascript",
                "jquery",
                "animation"
            ],
            "title": "How to run two jQuery animations simultaneously?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>One approach would be to create a new array with the pieces in the order you want, using the slice method.</p>\n\n<p>Example</p>\n\n<pre><code>var arr = [ 'a', 'b', 'c', 'd', 'e'];\nvar arr2 = arr.slice(0,1).concat( ['d'] ).concat( arr.slice(2,4) ).concat( arr.slice(4) );\n</code></pre>\n\n<ul>\n<li>arr.slice(0,1) gives you ['a']</li>\n<li>arr.slice(2,4) gives you ['b', 'c']</li>\n<li>arr.slice(4) gives you ['e']</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <code>splice</code> method of <code>Array</code> might help: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"nofollow\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice</a></p>\n\n<p>Just keep in mind it might be relatively expensive since it has to actively re-index the array.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I had fairly good success with this function:</p>\n\n<pre><code>Array.prototype.move = function (old_index, new_index) {\n    if (new_index &gt;= this.length) {\n        var k = new_index - this.length;\n        while ((k--) + 1) {\n            this.push(undefined);\n        }\n    }\n    this.splice(new_index, 0, this.splice(old_index, 1)[0]);\n    return this; // for testing purposes\n};\n</code></pre>\n\n<p>Example code: <code>[1, 2, 3].move(0, 1)</code> gives <code>[2, 1, 3]</code>.</p>\n\n<p>Note that the last <code>return</code> is simply for testing purposes: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a> performs operations on the array in-place, so a return is not necessary. By extension, this <code>move</code> is an in-place operation. If you want to avoid that and return a copy, use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice\"><code>slice</code></a>.</p>\n\n<p>Stepping through the code:</p>\n\n<ol>\n<li>If <code>new_index</code> is greater than the length of the array, we want (I presume) to pad the array properly with new <code>undefined</code>s. This little snippet handles this by pushing <code>undefined</code> on the array until we have the proper length.</li>\n<li>Then, in <code>this.splice(old_index, 1)[0]</code>, we splice out the old element. <code>splice</code> returns the element that was spliced out, but it's in an array. In our above example, this was <code>[1]</code>. So we take the first index of that array to get the raw <code>1</code> there.</li>\n<li>Then we use <code>splice</code> to insert this element in the new_index's place. Since we padded the array above if <code>new_index &gt; this.length</code>, it will probably appear in the right place, unless they've done something strange like pass in a negative number. </li>\n</ol>\n\n<p>A fancier version to account for negative indices: </p>\n\n<pre><code>Array.prototype.move = function (old_index, new_index) {\n    while (old_index &lt; 0) {\n        old_index += this.length;\n    }\n    while (new_index &lt; 0) {\n        new_index += this.length;\n    }\n    if (new_index &gt;= this.length) {\n        var k = new_index - this.length;\n        while ((k--) + 1) {\n            this.push(undefined);\n        }\n    }\n    this.splice(new_index, 0, this.splice(old_index, 1)[0]);\n    return this; // for testing purposes\n};\n</code></pre>\n\n<p>Which should account for things like <code>[1, 2, 3, 4, 5].move(-1, -2)</code> properly (move the last element to the second to last place). Result for that should be <code>[1, 2, 3, 5, 4]</code>. </p>\n\n<p>Either way, in your original question, you would do <code>arr.move(0, 2)</code> for <code>a</code> after <code>c</code>. For <code>d</code> before <code>b</code>, you would do <code>arr.move(3, 1)</code>.</p>\n",
                    "is_accepted": true,
                    "score": 155
                },
                {
                    "body": "<p>Got this idea from @Reid of pushing something in the place of the item that is supposed to be moved to keep the array size constant. That does simplify calculations. Also, pushing an empty object has the added benefits of being able to search for it uniquely later on. This works because two objects are not equal until they are referring to the same object.</p>\n\n<pre><code>({}) == ({}); // false\n</code></pre>\n\n<p>So here's the function which takes in the source array, and the source, destination indexes. You could add it to the Array.prototype if needed.</p>\n\n<pre><code>function moveObjectAtIndex(array, sourceIndex, destIndex) {\n    var placeholder = {};\n    // remove the object from its initial position and\n    // plant the placeholder object in its place to\n    // keep the array length constant\n    var objectToMove = array.splice(sourceIndex, 1, placeholder)[0];\n    // place the object in the desired position\n    array.splice(destIndex, 0, objectToMove);\n    // take out the temporary object\n    array.splice(array.indexOf(placeholder), 1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I like this. It's quick and elegant.</p>\n\n\n\n<pre><code>function arraymove(arr, fromIndex, toIndex) {\n    var element = arr[fromIndex];\n    arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, element);\n}\n</code></pre>\n\n<p>Note: this does not control if you run out of the array, so be careful.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Here's a one liner I found on JSPerf....</p>\n\n<pre><code>Array.prototype.move = function(from, to) {\n    this.splice(to, 0, this.splice(from, 1)[0]);\n};\n</code></pre>\n\n<p>which is awesome to read, but if you want performance (in small data sets) try...</p>\n\n<pre><code> Array.prototype.move2 = function(pos1, pos2) {\n    // local variables\n    var i, tmp;\n    // cast input parameters to integers\n    pos1 = parseInt(pos1, 10);\n    pos2 = parseInt(pos2, 10);\n    // if positions are different and inside array\n    if (pos1 !== pos2 &amp;&amp; 0 &lt;= pos1 &amp;&amp; pos1 &lt;= this.length &amp;&amp; 0 &lt;= pos2 &amp;&amp; pos2 &lt;= this.length) {\n      // save element from position 1\n      tmp = this[pos1];\n      // move element down and shift other elements up\n      if (pos1 &lt; pos2) {\n        for (i = pos1; i &lt; pos2; i++) {\n          this[i] = this[i + 1];\n        }\n      }\n      // move element up and shift other elements down\n      else {\n        for (i = pos1; i &gt; pos2; i--) {\n          this[i] = this[i - 1];\n        }\n      }\n      // put element from position 1 to destination\n      this[pos2] = tmp;\n    }\n  }\n</code></pre>\n\n<p>I can't take any credit, it should all go to <a href=\"http://www.redips.net/javascript/array-move/\">Richard Scarrott</a>. It beats the splice based method for smaller data sets in this <a href=\"http://jsperf.com/array-prototype-move\">performance test</a>. It is however significantly slower on larger data sets <a href=\"http://jsperf.com/array-prototype-move/8\">as Darwayne points out</a>.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>You can implement some basic Calculus and create a universal function for moving array element from one position to the other.</p>\n\n<p>For JavaScript it looks like this:</p>\n\n<pre><code>function magicFunction (targetArray, indexFrom, indexTo) { \n\n    targetElement = targetArray[indexFrom]; \n    magicIncrement = (indexTo - indexFrom) / Math.abs (indexTo - indexFrom); \n\n    for (Element = indexFrom; Element != indexTo; Element += magicIncrement){ \n        targetArray[Element] = targetArray[Element + magicIncrement]; \n    } \n\n    targetArray[indexTo] = targetElement; \n\n}\n</code></pre>\n\n<p>Check out \"moving array elements\" at \"gloommatter\" for detailed explanation.</p>\n\n<p><a href=\"http://www.gloommatter.com/DDesign/programming/moving-any-array-elements-universal-function.html\" rel=\"nofollow\">http://www.gloommatter.com/DDesign/programming/moving-any-array-elements-universal-function.html</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>Array.move.js</h1>\n\n<h2>Summary</h2>\n\n<p>Moves elements within an array, returning an array containing the moved elements.</p>\n\n<h2>Syntax</h2>\n\n<pre><code>array.move(index, howMany, toIndex);\n</code></pre>\n\n<h2>Parameters</h2>\n\n<p><strong>index</strong>: Index at which to move elements. If negative, <strong>index</strong> will start from the end.</p>\n\n<p><strong>howMany</strong>: Number of elements to move from <strong>index</strong>.</p>\n\n<p><strong>toIndex</strong>: Index of the array at which to place the moved elements. If negative, <strong>toIndex</strong> will start from the end.</p>\n\n<h2>Usage</h2>\n\n<pre><code>array = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n\narray.move(3, 2, 1); // returns [\"d\",\"e\"]\n\narray; // returns [\"a\", \"d\", \"e\", \"b\", \"c\", \"f\", \"g\"]\n</code></pre>\n\n<h2>Polyfill</h2>\n\n<pre><code>Array.prototype.move || Object.defineProperty(Array.prototype, \"move\", {\n    value: function (index, howMany, toIndex) {\n        var\n        array = this,\n        index = parseInt(index) || 0,\n        index = index &lt; 0 ? array.length + index : index,\n        toIndex = parseInt(toIndex) || 0,\n        toIndex = toIndex &lt; 0 ? array.length + toIndex : toIndex,\n        toIndex = toIndex &lt;= index ? toIndex : toIndex &lt;= index + howMany ? index : toIndex - howMany,\n        moved;\n\n        array.splice.apply(array, [toIndex, 0].concat(moved = array.splice(index, howMany)));\n\n        return moved;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I ended up combining two of these to work a little better when moving both small and large distances. I get fairly consistent results, but this could probably be tweaked a little bit by someone smarter than me to work differently for different sizes, etc. </p>\n\n<p>Using some of the other methods when moving objects small distances was significantly faster (x10) than using splice.  This might change depending on the array lengths though, but it is true for large arrays.</p>\n\n<pre><code>function ArrayMove(array, from, to) {\n    if ( Math.abs(from - to) &gt; 60) {\n        array.splice(to, 0, array.splice(from, 1)[0]);\n    } else {\n        // works better when we are not moving things very far\n        var target = array[from];\n        var inc = (to - from) / Math.abs(to - from);\n        var current = from;\n        for (; current != to; current += inc) {\n            array[current] = array[current + inc];\n        }\n        array[to] = target;    \n    }\n}\n</code></pre>\n\n<p><a href=\"http://jsperf.com/arraymove-many-sizes\" rel=\"nofollow\">http://jsperf.com/arraymove-many-sizes</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>The splice() method adds/removes items to/from an array, and returns the <strong>removed</strong> item(s). </p>\n  \n  <p>Note: This method changes the original array. /w3schools/</p>\n</blockquote>\n\n<pre><code>Array.prototype.move = function(from,to){\n  this.splice(to,0,this.splice(from,1)[0]);\n  return this;\n};\n\nvar arr = [ 'a', 'b', 'c', 'd', 'e'];\narr.move(3,1);//[\"a\", \"d\", \"b\", \"c\", \"e\"]\n\n\nvar arr = [ 'a', 'b', 'c', 'd', 'e'];\narr.move(0,2);//[\"b\", \"c\", \"a\", \"d\", \"e\"]\n</code></pre>\n\n<p>as the function is <a href=\"http://en.wikipedia.org/wiki/Method_chaining\">chainable</a> this works too:</p>\n\n<pre><code>alert(arr.move(0,2).join(','));\n</code></pre>\n\n<p><a href=\"http://jsbin.com/ohibob/1/edit\">demo here</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>My 2c. Easy to read, it works, it's fast, it doesn't create new arrays.</p>\n\n<pre><code>function move(array, from, to) {\n  if( to === from ) return;\n\n  var target = array[from];                         \n  var increment = to &lt; from ? -1 : 1;\n\n  for(var k = from; k != to; k += increment){\n    array[k] = array[k + increment];\n  }\n  array[to] = target;\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>    Array.prototype.moveUp = function (value, by) {\n        var index = this.indexOf(value),\n            newPos = index - (by || 1);\n\n        if (index === -1)\n            throw new Error(\"Element not found in array\");\n\n        if (newPos &lt; 0)\n            newPos = 0;\n\n        this.splice(index, 1);\n        this.splice(newPos, 0, value);\n    };\n\n    Array.prototype.moveDown = function (value, by) {\n        var index = this.indexOf(value),\n            newPos = index + (by || 1);\n\n        if (index === -1)\n            throw new Error(\"Element not found in array\");\n\n        if (newPos &gt;= this.length)\n            newPos = this.length;\n\n        this.splice(index, 1);\n        this.splice(newPos, 0, value);\n    };\n\n\n\n    var arr = ['banana', 'curyWurst', 'pc', 'remembaHaruMembaru'];\n\n    alert('withiout changes= '+arr[0]+' ||| '+arr[1]+' ||| '+arr[2]+' ||| '+arr[3]);\n    arr.moveDown(arr[2]);\n\n\n    alert('third word moved down= '+arr[0] + ' ||| ' + arr[1] + ' ||| ' + arr[2] + ' ||| ' + arr[3]);\n    arr.moveUp(arr[2]);\n    alert('third word moved up= '+arr[0] + ' ||| ' + arr[1] + ' ||| ' + arr[2] + ' ||| ' + arr[3]);\n</code></pre>\n\n<p>i found it here: <a href=\"http://jeffijoe.com/2013/08/moving-elements-up-and-down-in-a-javascript-array/\" rel=\"nofollow\">http://jeffijoe.com/2013/08/moving-elements-up-and-down-in-a-javascript-array/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I used the nice <a href=\"http://stackoverflow.com/a/5306832/2508405\">answer of @Reid</a>, but struggled with moving an element from the end of an array one step further - to the beginning (like in a <strong>loop</strong>).\nE.g. ['a', 'b', 'c'] should become ['c', 'a', 'b'] by calling .move(2,3)</p>\n\n<p>I achieved this by changing the case for new_index >= this.length.</p>\n\n<pre><code>Array.prototype.move = function (old_index, new_index) {\n        console.log(old_index + \" \" + new_index);\n        while (old_index &lt; 0) {\n            old_index += this.length;\n        }\n        while (new_index &lt; 0) {\n            new_index += this.length;\n        }\n        if (new_index &gt;= this.length) {\n            new_index = new_index % this.length;\n        }\n        this.splice(new_index, 0, this.splice(old_index, 1)[0]);\n        return this; // for testing purposes\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm having a hard time figuring out how to move an array element. For example, given the following:</p>\n\n<pre><code>var arr = [ 'a', 'b', 'c', 'd', 'e'];\n</code></pre>\n\n<p>How can I write a function to move <code>'d'</code> before <code>'b'</code>?</p>\n\n<p>Or <code>'a'</code> after <code>'c'</code>?</p>\n\n<p>After the move, the indices of the rest of the elements should be updated. This means in the first example after the move arr[0] would = 'a', arr[1] = 'd' arr[2] = 'b', arr[3] = 'c', arr[4] = 'e'</p>\n\n<p>This seems like it should be pretty simple, but I can't wrap my head around it.</p>\n",
            "last_activity_date": 1425075278,
            "question_id": 5306680,
            "score": 95,
            "tags": [
                "javascript"
            ],
            "title": "Move an array element from one array position to another"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Could you provide info on which pages it is happening? Probably could have something to do with Facebook being included in 1/4 of the pages or some JS that is commonly used but not always. Without knowing what JS is prompting the error it's difficult to know.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I've done a bit of searching and it appears that a \"Script Error\" means it had trouble loading a file that it was asked to look for.  This could be a caching problem on the client side, or it could be a server problem due to overloading.</p>\n\n<p>It's most likely caused by something like this where the script itself is the file it can't load, hence the error occurring on line 0.</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"somescript.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Grepping Firefox's source code reveals that there's no <code>\"Script Error.\"</code>. Thus, it's very likely that some script on your site is throwing an uncaught error like this:</p>\n\n<pre><code>throw new Error('Script Error.');\n</code></pre>\n\n<p>Probably this statement is only reached in Firefox and Chrome.</p>\n\n<p>Not sure why there's no line number though. Maybe some <code>eval()</code> issue?</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>Due to the low %, you can assume they're not normal users. Probably users with userscripts, bookmarklets or even maybe just messing with the console on you website.\nHaving the whole HTML of a page where it happens could help testing this theory. As well as the complete error. It should give you a url, is it always the same? Is the line really 0 or just undefined?</p>\n\n<p>I don't think setting default values in you onerror is a good idea and the 0 probably comes from <code>parseInt(ln || 0)</code> when the error isn't really on the page (see examples above).</p>\n\n<p>Adding a if to see if the line is known either in the JavaScript to ignore those errors (because they probably don't come from your own code) or in the server-side code to take care of them separately would, imo, be better.</p>\n\n<p>=== EDIT ===\nGot to:\n<a href=\"http://www.xavierm02.net/AZE/\">http://www.xavierm02.net/AZE/</a>\nInstall the user.js file (I did it on Chrome but it should work on Firefox too).\nThen open the html page on the same browser. It'll show you the error (I only changed that insteal of reporting to the server, it writes it on the page). With 0 as line number.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This one took quite a bit to figure out.</p>\n\n<p>We did a bunch of stuff to try and solve it, including doing things like dumping the WHOLE document body back to our servers via ajax to try and figure it out.</p>\n\n<p>I am still unsure what causes \"Script Error.\" (with the period btw, thats how it shows up in our ajax logger) in firefox, but in chrome we were able to to narrow it down to...</p>\n\n<p>Drum roll...</p>\n\n<p>The auto translate feature of google chrome.</p>\n\n<p>Many english speaking people probably do not even know about this feature, but to test it I guess visit a non english site using chrome. Or better yet, if you dig thru the chrome options theres a spot to change the browser language. Change it to something non english, restart the browser, and visit an english site.</p>\n\n<p>You should get the bar up to asking if you would like chrome to transalte the page for you.</p>\n\n<p>In our case anyways, the translator was causing the issue since it injects a script tag into your document body and (guessing here) uses some sort of js based system to send the content to googles servers and get them to translate it.</p>\n\n<p>Even tho the error in the console was Unrefreneced somthing, the message that was being sent to window.onerror was \"Script Error.\".</p>\n\n<p>Anyways, there is a cure.</p>\n\n<p><a href=\"http://googlewebmastercentral.blogspot.com/2007/12/answering-more-popular-picks-meta-tags.html\">http://googlewebmastercentral.blogspot.com/2007/12/answering-more-popular-picks-meta-tags.html</a></p>\n\n<pre><code>&lt;meta name=\"google\" content=\"notranslate\"/&gt;\n</code></pre>\n\n<p>This will do 2 things (as far as we know, maybe more?):</p>\n\n<p>a) Disable the translate bar from poping up in chrome.</p>\n\n<p>b) Disable translating of the the page via transalte.google.com.</p>\n\n<p>In our situation anyways, this solved A TON of these \"Script Error.\" issues we were experiencing.</p>\n\n<p>Excuse the spelling mistakes in this post, I am still on a non-english mode in chrome writing this and the spell checker is not set to English ;) Time to switch back.</p>\n\n<p>Enjoy!</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The \"Script error.\" happens in Firefox, Safari, and Chrome when an exception violates the browser's <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same-origin policy</a> - i.e. when the error occurs in a script that's hosted on a domain other than the domain of the current page.</p>\n\n<p>This behavior is intentional, to prevent scripts from leaking information to external domains.  For an example of why this is necessary, imagine accidentally visiting <code>evilsite.com</code>, that serves up a page with <code>&lt;script src=\"yourbank.com/index.html\"&gt;</code>.  (yes, we're pointing that script tag at html, not JS).  This will result in a script error, but the error is interesting because it can tell us if you're logged in or not.  If you're logged in, the error might be <code>'Welcome Fred...' is undefined</code>, whereas if you're not it might be <code>'Please Login ...' is undefined</code>.  Something along those lines.</p>\n\n<p>If evilsite.com does this for the top 20 or so bank institutions, they'd have a pretty good idea of which banking sites you visit, and could provide a much more targeted phishing page. (This is just one example, of course.  But it illustrates why browsers shouldn't allow <em>any</em> data to cross domain boundaries.)</p>\n\n<p>I've tested this in the latest versions of Safari, Chrome, and Firefox - they all do this.  IE9 does not - it treats x-origin exceptions the same as same-origin ones.  (And Opera doesn't support onerror.)</p>\n\n<p>From the horses mouth: <a href=\"http://trac.webkit.org/browser/branches/chromium/648/Source/WebCore/dom/ScriptExecutionContext.cpp?rev=77122#L301\">WebKit source that checks origin</a> when passing exceptions to onerror().  And the <a href=\"http://mxr.mozilla.org/mozilla-beta/source/dom/base/nsJSEnvironment.cpp#316\">Firefox source that checks</a>.</p>\n\n<p><strong>UPDATE (10/21/11)</strong>: The <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=363897\">Firefox bug that tracks this issue</a> includes a link to the blog post that inspired this behavior. </p>\n\n<p><strong>UPDATE (12/2/14)</strong>: You can now enable full cross-domain error reporting on some browsers by specifying a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-crossorigin\"><code>crossorigin</code> attribute</a> on script tags and having the server send the appropriate <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\">CORS</a> HTTP response headers.</p>\n",
                    "is_accepted": true,
                    "score": 131
                },
                {
                    "body": "<p>I'll tell you what fixed it for me on Safari (WebKit):\nIf I put the JS callback routine actually <em>on the page</em>, then I get full info. If I include it in a .js file via a  tag, I just get the \"Script error\" error (with no linenumber, etc.).</p>\n\n<p>Maybe this is related to what Broofa said.</p>\n\n<p>Anwyay, so now I have a small callback in the page, and then the rest of the file outside of the page.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I made a fix to solve this issue.</p>\n\n<p>I created <a href=\"https://github.com/tcorral/Hermes.js\" rel=\"nofollow\">Hermes.js</a> that is a log error system that had the same issue.</p>\n\n<p>After investigating some time I made a fix that can help you with the 'Script Error' cross-domain policy about scripts in different domains.</p>\n\n<p>I called CORSET and you can see it <a href=\"https://github.com/tcorral/CORSET\" rel=\"nofollow\">here</a> how it works.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An update for those that will stumble into this question in the future : \nbroofa  is right with the answer and there's no workaround for this. </p>\n\n<p>Obviously other stumbled into this limitation and some bugs requesting for an fix were filed for Firefox : <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=696301\">Bug 69301</a> and for WebKit : <a href=\"https://bugs.webkit.org/show_bug.cgi?id=70574\">Bug 70574</a> </p>\n\n<p>The good news is that the bug has been resolved for Firefox with the release of Firefox 13.\nThis is how you use it : </p>\n\n<pre><code>&lt;script src=\"http://somremotesite.example/script.js\" crossorigin&gt;\n</code></pre>\n\n<p><code>crossorigin</code> is equivalent to <code>crossorigin=anonymous</code> and tells the browser to <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/fetching-resources.html#cors-enabled-fetch\">do a CORS fetch of the script</a> without sending credentials.</p>\n\n<p>You must ensure that the script is sent with an <code>Access-Control-Allow-Origin</code> HTTP header value that matches the requesting domain, e.g.,</p>\n\n<pre><code>Access-Control-Allow-Origin: http://myhomesite.example\nAccess-Control-Allow-Origin: *\n</code></pre>\n\n<p><strong>otherwise the browser will cancel loading the script</strong>.</p>\n\n<p>For Apache:</p>\n\n<pre><code>Header set Access-Control-Allow-Origin \"*\"\n</code></pre>\n\n<p>(And see CORS examples for <a href=\"https://github.com/h5bp/server-configs\">other web servers</a>.)</p>\n\n<p>If you're sending scripts in PHP: </p>\n\n<pre><code>header('Access-Control-Allow-Origin', 'http://myhomesite.example');\n</code></pre>\n\n<p>I've tested this and it works as expected. all errors from the script.js will be caught by the <code>window.onerror</code> handler with message, file and line details. </p>\n\n<p>The WebKit bug hasn't been fixed yet, but a patch has been proposed (and uses the same solution). Hopefully the fix will be released soon. </p>\n\n<p>More info about CORS here : <a href=\"http://enable-cors.org/\">http://enable-cors.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>I had a similar problem: my scripts are served by a subdomain and fall under the same origin restriction. However, I solved this by:</p>\n\n<p>1) adding every script tag like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://subdomain.mydomain.tld\" crossorigin=\"*.mydomain.tld\" /&gt;\n</code></pre>\n\n<p>2) modifying the apache httpd.conf by adding the following inside every vhost (you must enbable mod_headers):</p>\n\n<pre><code>&lt;IfModule mod_headers.c&gt;\nHeader add Access-Control-Allow-Origin \"*.mydomain.tld\"\n&lt;/IfModule&gt;\n</code></pre>\n\n<p>Hope this helps ...</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>On one of my server I was not able to make this functional except by replacing</p>\n\n<pre><code>*.mydomain.tld\n</code></pre>\n\n<p>by</p>\n\n<pre><code>*\n</code></pre>\n\n<p>Be aware of the flaws with potentially allowing * to phish extended information. Documentation on CORS, same-origin, img &amp; fonts, cdn is available but very fewer about script tag crossorigin details is available.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've experienced</p>\n\n<p><em>Script Error. line 0</em></p>\n\n<p>errors for some time being reported back to our server when the error occurred in customer browsers.  Yesterday for the first time (after introducing <code>\"use strict\";</code> in our javascript) I was able to replicate this issue in Safari and Chrome on Windows 7. After littering our code with alert() statements I traced this error down to the use of an undefined variable!  e.g. <code>xx = 123;</code> where <em>xx</em> is not defined with a <code>var</code> statement.</p>\n\n<p>Safari reported this as</p>\n\n<p><em>ReferenceError: Strict mode forbids implicit creation of global property 'xx'</em></p>\n\n<p>within Web Inspector, but window.onerror function was detecting</p>\n\n<p><em>Script Error. line 0</em></p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>In Chrome, I also get \"Script error\" (on line 0) when loading both the HTML and Javascript from <code>file://</code> . This doesn't happen in Firefox. Probably overzealous same-origin protection of Chrome. </p>\n\n<p>All is good when loading the same HTML and Javascript over HTTP.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a script that detects Javascript errors on my website and sends them to my backend for reporting. It reports the first error encountered, the supposed line number, and the time.</p>\n\n<p><strong>EDIT to include doctype:</strong></p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" xmlns:fb=\"http://www.facebook.com/2008/fbml\"&gt;\n</code></pre>\n\n<p><strong>...</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\n// for debugging javascript!\n(function(window){\n    window.onerror = function(msg, url, ln) {\n        //transform errors\n        if (typeof(msg) === 'object' &amp;&amp; msg.srcElement &amp;&amp; msg.target) {\n            if(msg.srcElement == '[object HTMLScriptElement]' &amp;&amp; msg.target == '[object HTMLScriptElement]'){\n                msg = 'Error loading script';\n            }else{\n                msg = 'Event Error - target:' + msg.target + ' srcElement:' + msg.srcElement;\n            }\n        }\n\n        msg = msg.toString();\n\n        //ignore errors\n        if(msg.indexOf(\"Location.toString\") &gt; -1){\n            return;\n        }\n        if(msg.indexOf(\"Error loading script\") &gt; -1){\n            return;\n        }\n\n        //report errors\n        window.onerror = function(){};\n        (new Image()).src = \"/jserror.php?msg=\" + encodeURIComponent(msg) + \"&amp;url=\" + encodeURIComponent(url || document.location.toString().replace(/#.*$/, \"\")) + \"&amp;ln=\" + parseInt(ln || 0) + \"&amp;r=\" + (+new Date());\n    };\n})(window);\n//]]&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>Because of this script, I'm acutely aware of any javascript errors that are happening on my site. <strong>One of by biggest offenders is \"Script Error.\" on line 0.</strong> in Chrome 10+, and Firefox 3+. This error doesn't exist (or may be called something else?) in Internet Explorer.</p>\n\n<p><strong>Correction (5/23/2013):</strong> This \"Script Error, Line 0\" error is now showing up in IE7 and possibly other versions of IE. Possibly a result of a recent IE security patch as this behavior previously did not exist.</p>\n\n<p>Does anyone have any idea what this error means or what causes it? It happens on about 0.25% of my overall pageloads, and represents half the reported errors.</p>\n",
            "last_activity_date": 1417538127,
            "question_id": 5913978,
            "score": 93,
            "tags": [
                "javascript",
                "firefox",
                "google-chrome",
                "error-handling"
            ],
            "title": "Cryptic &quot;Script Error.&quot; reported in Javascript in Chrome and Firefox"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I'll have to disappoint you - this is currently not possible with just JavaScript. Websockets (and Socket.IO) allow a socket-like connection between the client and the server, but not between clients. Your option is a plugin - be it Flash, Silverlight, Java or custom-made.</p>\n\n<p>What you can do is use socket.io and emulate that by writing a simple proxy server.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I would like to turn your attention to the fact, that most users nowadays are behind NAT or firewalls, and this means that you can't easily establish incoming connection to user's computer. So your idea would (if ever possible) work only in some cases and will bring extra complexity to your solution. So client-server system with possibly persistent connection (using websockets or socket.io) is a better option. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here on Stackoverflow are several topics about P2P connections in browsers:</p>\n\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/1032006/will-html5-allow-web-apps-to-make-peer-to-peer-http-connections\">Will HTML5 allow web apps to make peer-to-peer HTTP connections?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4807685/what-techniques-are-available-to-do-p2p-in-the-browser\">What techniques are available to do P2P in the browser?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4181645/does-html5-support-peer-to-peer-and-not-just-websockets\">Does HTML5 Support Peer-to-Peer (and not just WebSockets)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4277351/can-html5-websockets-connect-2-clients-browsers-directly-without-using-a-serve\">Can HTML5 Websockets connect 2 clients (browsers) directly without using a server (P2P)</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4628125/is-it-possible-to-create-peer-to-peer-connections-in-a-web-browser\">Is it possible to create peer-to-peer connections in a web browser?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4118272/do-websockets-allow-for-p2p-browser-to-browser-communication\">Do websockets allow for p2p (browser to browser) communication?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2845174/html-5-peer-to-peer-video-possibilities\">HTML 5 Peer to Peer Video Possibilities?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/6993042/is-webrtc-implemented-in-any-browsers-yet\">Is WebRTC implemented in any browsers yet?</a></li>\n</ol>\n\n<p>As mentioned in most of the topicts, both 2008 HTML5 working drafts were having a section \"Peer-to-peer connections\":</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/2008/WD-html5-20080122/#peer-to-peer\">http://www.w3.org/TR/2008/WD-html5-20080122/#peer-to-peer</a></li>\n<li><a href=\"http://www.w3.org/TR/2008/WD-html5-20080610/comms.html#peer-to-peer\">http://www.w3.org/TR/2008/WD-html5-20080610/comms.html#peer-to-peer</a> </li>\n</ul>\n\n<p>Since the <a href=\"http://www.w3.org/TR/2009/WD-html5-20090212/\">W3C Working Draft 12 February 2009</a> the section \"Peer-to-peer connections\" disappeared. But this P2P connection is not gone. It's back under the name PeerConnection within the WebRTC (Real-Time Communications) specifications:</p>\n\n<ul>\n<li><a href=\"http://dev.w3.org/2011/webrtc/editor/webrtc.html#peerconnection\">http://dev.w3.org/2011/webrtc/editor/webrtc.html#peerconnection</a> (W3C Editor's Draft)</li>\n<li><a href=\"http://www.whatwg.org/specs/web-apps/current-work/webrtc.html#peerconnection\">http://www.whatwg.org/specs/web-apps/current-work/webrtc.html#peerconnection</a> (<a href=\"http://blog.whatwg.org/weekly-encoding-woes\">Since 5th December 2011 forwarded to W3C Editor's Draft</a>)</li>\n</ul>\n\n<p>Since 31 October 2011, the W3C Editor's Draft is an official Working draft:</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/2011/WD-webrtc-20111027/#peerconnection\">http://www.w3.org/TR/2011/WD-webrtc-20111027/#peerconnection</a></li>\n</ul>\n\n<p>The only implementation of the PeerConnection (UDP based) exists in the modified WebKit by the Ericsson labs (May 2011), which is working quite well. Some patches are in WebKit now (Oct. 2011 -- see updates below!):</p>\n\n<ul>\n<li><a href=\"https://labs.ericsson.com/apis/web-real-time-communication/\">https://labs.ericsson.com/apis/web-real-time-communication/</a></li>\n<li><a href=\"https://labs.ericsson.com/developer-community/blog/update-webkit-contributions\">https://labs.ericsson.com/developer-community/blog/update-webkit-contributions</a></li>\n</ul>\n\n<p>Additionally, the WebRTC initiative is a project by Google, Mozilla and Opera. Thus, they are continuing the specification on PeerConnection:</p>\n\n<ul>\n<li><a href=\"http://www.webrtc.org/\">http://www.webrtc.org/</a></li>\n</ul>\n\n<p>Probably Chrome (uses WebKit) will be the first major browser supporting WebRTC with PeerConnection:</p>\n\n<ul>\n<li><a href=\"http://www.webrtc.org/blog/firststeptowardchromeintegration\">http://www.webrtc.org/blog/firststeptowardchromeintegration</a></li>\n<li><a href=\"http://groups.google.com/a/chromium.org/group/chromium-dev/browse_thread/thread/95bf1e2e1de852fc\">http://groups.google.com/a/chromium.org/group/chromium-dev/browse_thread/thread/95bf1e2e1de852fc</a></li>\n<li><a href=\"https://lists.webkit.org/pipermail/webkit-dev/2011-November/018445.html\">https://lists.webkit.org/pipermail/webkit-dev/2011-November/018445.html</a></li>\n</ul>\n\n<p>Since 18th January 2012, <a href=\"http://www.webrtc.org/blog/webrtcnowavailableinthechromedevchannel\">Chrome is supporting WebRTC  as well</a>. It can be uses in the <a href=\"http://www.chromium.org/getting-involved/dev-channel\">Dev channel (Windows, OSX, Linux) and the Canary build (Windows and OSX)</a> by <a href=\"http://www.webrtc.org/blog/webrtccannowbeenabledinchromeflags\">enabling it under <code>chrome://flags</code></a>. It only only supports <code>MediaStream</code> like Video and audio and can be tested with several <a href=\"http://www.webrtc.org/running-the-demos#TOC-Demos\">Demos</a>. Transferring application data like <code>String</code>/<code>ArrayBuffer</code>/... is not supported until now.</p>\n\n<p>Since <a href=\"http://dev.w3.org/2011/webrtc/editor/webrtc-20120316.html\">16th March 2012, the WebRTC Editor's Draft</a> separates a <a href=\"http://dev.w3.org/2011/webrtc/editor/webrtc-20120316.html#peer-to-peer-data-api\">\"Peer-to-peer Data API\"</a> to send and receive generic application data (<code>String</code>, <code>ArrayBuffer</code> and <code>Blob</code>). <a href=\"http://blog.chromium.org/2012/04/chromes-webrtc-roadmap.html\">Chromium wants to implement the Data API soon</a> (10th April 2012).</p>\n\n<p>On April, 3rd, Mozilla published a first working example on <a href=\"https://hacks.mozilla.org/2012/04/webrtc-efforts-underway-at-mozilla/\">WebRTC for Firefox</a> as well.</p>\n\n<p>DataChannel is planned for version 25 of Chrome, behind a flag, meanwhile it can be tested in Firefox Nightly/Aurora (12th December 2012):</p>\n\n<ul>\n<li><a href=\"http://updates.html5rocks.com/2012/12/WebRTC-hits-Firefox-Android-and-iOS\">http://updates.html5rocks.com/2012/12/WebRTC-hits-Firefox-Android-and-iOS</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 71
                }
            ],
            "body": "<p>How can I write a website using <em>HTML5</em>, <em>CSS</em> and <em>JavaScript</em> on client side that will allow <strong>direct tcp/ip connection between the client browsers once the page is loaded</strong>.</p>\n\n<p>I need to do this to to reduce latency since the site will require that the input from one of the users to be transmitted to the other user as soon as possible so sending data from client A to Server and then to client B is not a good option.</p>\n\n<p>I read previous posts on this subject but there were no working solution/examples available that I could find. From what i read the direct connection between clients can be made using plugins like Silverlight, Java or Flash.</p>\n\n<p>Is there any solution that would not require plugins? I would like to use only JavaScript.</p>\n\n<p>Thanks for replies!</p>\n",
            "last_activity_date": 1406576373,
            "question_id": 7022383,
            "score": 41,
            "tags": [
                "javascript",
                "html5",
                "tcp",
                "p2p",
                "tcp-ip"
            ],
            "title": "How can I make a browser to browser (peer to peer) connection?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>For some number <code>y</code> and some divisor <code>x</code> compute the division (<code>div</code>) and remainder (<code>rem</code>) as:</p>\n\n<pre><code>var div = Math.floor(y/x);\nvar rem = y % x;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 386
                },
                {
                    "body": "<p>I'm no expert in bitwise operators, but here's another way to get the whole number:</p>\n\n<pre><code>var num = ~~(a / b);\n</code></pre>\n\n<p>This will work properly for negative numbers as well, while <code>Math.floor()</code> will round in the wrong direction.</p>\n\n<p>This seems correct as well:</p>\n\n<pre><code>var num = (a / b) &gt;&gt; 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 161
                },
                {
                    "body": "<pre><code>var remainder = x % y;\nreturn (x - remainder) / y;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I did some speed tests on Firefox.</p>\n\n<pre><code>-100/3             // -33.33..., 0.3663 millisec\nMath.floor(-100/3) // -34,       0.5016 millisec\n~~(-100/3)         // -33,       0.3619 millisec\n(-100/3&gt;&gt;0)        // -33,       0.3632 millisec\n(-100/3|0)         // -33,       0.3856 millisec\n(-100-(-100%3))/3  // -33,       0.3591 millisec\n\n/* a=-100, b=3 */\na/b                // -33.33..., 0.4863 millisec\nMath.floor(a/b)    // -34,       0.6019 millisec\n~~(a/b)            // -33,       0.5148 millisec\n(a/b&gt;&gt;0)           // -33,       0.5048 millisec\n(a/b|0)            // -33,       0.5078 millisec\n(a-(a%b))/b        // -33,       0.6649 millisec\n</code></pre>\n\n<p>The above is based on 10 million trials for each.</p>\n\n<p><strong>Conclusion:</strong> Use <code>(a/b&gt;&gt;0)</code> (or <code>(~~(a/b))</code> or <code>(a/b|0)</code>) to achieve about 20% gain in efficiency. Also keep in mind that they are all inconsistent with <code>Math.floor</code>, when <code>a/b&lt;0 &amp;&amp; a%b!=0</code>.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>JavaScript calculates right the floor of negative numbers and the remainder of non-integer numbers, following the mathematical definitions for them.</p>\n\n<p>FLOOR is defined as \"the largest integer number smaller than the parameter\", thus:</p>\n\n<ul>\n<li>positive numbers: FLOOR(X)=integer part of X;</li>\n<li>negative numbers: FLOOR(X)=integer part of X minus 1 (because it must be SMALLER than the parameter, i.e., more negative!)</li>\n</ul>\n\n<p>REMAINDER is defined as the \"left over\" of a division (Euclidean arithmetic). When the dividend is not an integer, the quotient is usually also not an integer, i.e., there is no remainder, but if the quotient is forced to be an integer (and that's what happens when someone tries to get the remainder or modulus of a floating-point number), there will be a non-integer \"left over\", obviously.</p>\n\n<p>JavaScript does calculate everything as expected, so the programmer must be careful to ask the proper questions (and people should be careful to answer what is asked!) Yarin's first question was NOT \"what is the integer division of X by Y\", but, instead, \"the WHOLE number of times a given integer GOES INTO another\". For positive numbers, the answer is the same for both, but not for negative numbers, because the integer division (dividend by divisor) will be -1 smaller than the times a number (divisor) \"goes into\" another (dividend). In other words, FLOOR will return the correct answer for an integer division of a negative number, but Yarin didn't ask that!</p>\n\n<p>gammax answered correctly, that code works as asked by Yarin. On the other hand, Samuel is wrong, he didn't do the maths, I guess, or he would have seen that it does work (also, he didn't say what was the divisor of his example, but I hope it was 3):</p>\n\n<p>Remainder = X % Y = -100 % 3 = -1</p>\n\n<p>GoesInto = (X - Remainder) / Y = (-100 - -1) / 3 = -99 / 3 = -33</p>\n\n<p>By the way, I tested the code on Firefox 27.0.1, it worked as expected, with positive and negative numbers and also with non-integer values, both for dividend and divisor. Example:</p>\n\n<p>-100.34 / 3.57: GoesInto = -28, Remainder = -0.3800000000000079</p>\n\n<p>Yes, I noticed, there is a precision problem there, but I didn't had time to check it (I don't know if it's a problem with Firefox, Windows 7 or with my CPU's FPU). For Yarin's question, though, which only involves integers, the gammax's code works perfectly.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>ES6 introduces the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\"><code>Math.trunc</code></a> method. This allows to fix <a href=\"http://stackoverflow.com/a/4228376/1529630\">@MarkElliot's answer</a> to make it work for negative numbers too:</p>\n\n<pre><code>var div = Math.trunc(y/x);\nvar rem = y % x;\n</code></pre>\n\n<p>Note that <code>Math</code> methods have the advantage over bitwise operators that they work with numbers over 2<sup>31</sup>.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Math.floor(operation) returns the rounded value of the operation.</p>\n\n<p>EXAMPLE OF 1ST QUESTION:</p>\n\n<pre><code>var x = 5;\nvar y = 10.4;\nvar z = Math.floor(x + y);\n\nconsole.log(z);\n</code></pre>\n\n<p>CONSOLE:</p>\n\n<blockquote>\n  <p>15</p>\n</blockquote>\n\n<p>EXAMPLE OF 2ND QUESTION</p>\n\n<pre><code>var x = 14;\nvar y = 5;\nvar z = Math.floor(x%y);\n\nconsole.log(x);\n</code></pre>\n\n<p>CONSOLE:</p>\n\n<blockquote>\n  <p>4</p>\n</blockquote>\n\n<p>I hope this helped!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In JavaScript, how do I get:</p>\n\n<ol>\n<li>the whole number of times a given integer\ngoes into another?</li>\n<li>the remainder?</li>\n</ol>\n",
            "last_activity_date": 1414801332,
            "question_id": 4228356,
            "score": 288,
            "tags": [
                "javascript",
                "math",
                "integer-division"
            ],
            "title": "Integer division in JavaScript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Use <code>setImmediate</code> if you want to queue the function behind whatever I/O event callbacks that are already in the event queue.  Use <code>process.nextTick</code> to effectively queue the function at the head of the event queue so that it executes immediately after the current function completes.</p>\n\n<p>So in a case where you're trying to break up a long running, CPU-bound job using recursion, you would now want to use <code>setImmediate</code> rather than <code>process.nextTick</code> to queue the next iteration as otherwise any I/O event callbacks wouldn't get the chance to run between iterations.</p>\n",
                    "is_accepted": true,
                    "score": 219
                },
                {
                    "body": "<p>In the comments in the answer, it does not explicitly state that nextTick shifted from Macrosemantics to Microsemantics. </p>\n\n<p>before node 0.9 (when setImmediate was introduced), nextTick operated at the start of the next callstack.</p>\n\n<p>since node 0.9, nextTick operates at the end of the existing callstack, whereas setImmediate is at the start of the next callstack</p>\n\n<p>check out <a href=\"https://github.com/YuzuJS/setImmediate\" rel=\"nofollow\">https://github.com/YuzuJS/setImmediate</a> for tools and details</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Node.js version 0.10 was released today and introduced  <code>setImmediate</code>. The <a href=\"https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10\">Api changes</a> documentation suggests using it when doing recursive <code>nextTick</code> calls.</p>\n\n<p>From what <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.setImmediate\">mdn says</a> it seems very similar to <code>process.nextTick</code></p>\n\n<p>When should I use <code>nextTick</code> and when should I use <code>setImmediate</code>?</p>\n",
            "last_activity_date": 1422323050,
            "question_id": 15349733,
            "score": 112,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "setImmediate vs. nextTick"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<pre><code>var o = {\n    r: 'some value',\n    t: 'some other value'\n};\n</code></pre>\n\n<p>is functionally equivalent to</p>\n\n<pre><code>var o = new Object();\no.r = 'some value';\no.t = 'some other value';\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 124
                },
                {
                    "body": "<p>That's JSON, or JavaScript Object Notation. It's a quick way of describing an object, or a hash map. The thing before the colon is the property name, and the thing after the colon is its value. So in this example, there's a property \"r\", whose value is whatever's in the variable r. Same for t.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It is part of the object literal syntax. The basic format is:</p>\n\n<pre><code>var obj = { field_name: \"field value\", other_field: 42 };\n</code></pre>\n\n<p>Then you can access these values with:</p>\n\n<pre><code>obj.field_name; // -&gt; \"field value\"\nobj[\"field_name\"]; // -&gt; \"field value\"\n</code></pre>\n\n<p>You can even have functions as values, basically giving you the methods of the object:</p>\n\n<pre><code>obj['func'] = function(a) { return 5 + a;};\nobj.func(4);  // -&gt; 9\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The ':' is a delimiter for key value pairs basically. In your example it is a Javascript Object Literal notation.</p>\n\n<p>In javascript, Objects are defined with the colon delimiting the identifier for the property, and its value so you can have the following:</p>\n\n<pre><code>return { \n    Property1 : 125,\n    Property2 : \"something\",\n    Method1 : function() { /* do nothing */ },\n    array: [5, 3, 6, 7]\n};\n</code></pre>\n\n<p>and then use it like:</p>\n\n<pre><code>var o =  { \n    property1 : 125,\n    property2 : \"something\",\n    method1 : function() { /* do nothing */ },\n    array: [5, 3, 6, 7]\n};\n\nalert(o.property1); // Will display \"125\"\n</code></pre>\n\n<p>A subset of this is also known as JSON (Javascript Object Notation) which is useful in AJAX calls because it is compact and quick to parse in server-side languages and Javascript can easily de-serialize a JSON string into an object. </p>\n\n<pre><code>// The parenthesis '(' &amp; ')' around the object are important here\nvar o = eval('(' + \"{key: \\\"value\\\"}\" + ')');\n</code></pre>\n\n<p>You can also put the key inside quotes if it contains some sort of special character or spaces, but I wouldn't recommend that because it just makes things harder to work with.</p>\n\n<p>Keep in mind that <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Object_Literals\">JavaScript Object <em>Literal</em> Notation</a> in the JavaScript language is different from the JSON standard for message passing. The main difference between the 2 is that functions and constructors are not part of the <a href=\"http://json.org/\">JSON standard</a>, but are allowed in JS object literals.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>You guys are forgetting that the colon is also used in the ternary operator (though I don't know if jquery uses it for this purpose).</p>\n\n<p>the ternary operator is an expression form (expressions return a value) of an if/then statement. it's used like this:</p>\n\n<pre><code>var result = (condition) ? (value1) : (value2) ;\n</code></pre>\n\n<p>A ternary operator could also be used to produce side effects just like if/then, but this is profoundly bad practice.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>And also, a colon can be used to label a statement. for example</p>\n\n<pre><code>var i = 100, j = 100;\nouterloop:\nwhile(i&gt;0) {\n  while(j&gt;0) {\n   j++\n\n   if(j&gt;50) {\n     break outerloop;\n   }\n  }\ni++\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>Just thought I'd mention that another use of the colon is to assign data types to variables -</p>\n\n<pre><code>var s : String;\n</code></pre>\n\n<p>means that the variable <strong><em>s</em></strong> is of type <strong><em>String</em></strong></p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Let's not forget the switch statement, where colon is used after each \"case\".</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It can be used to list objects in a variable. Also, it is used a little bit in the shorthand of an if sentence:</p>\n\n<pre><code>var something = {face: 'hello',man: 'hey',go: 'sup'};\n</code></pre>\n\n<p>And calling it like this</p>\n\n<pre><code>alert(something.man);\n</code></pre>\n\n<p>Also the if sentence:</p>\n\n<pre><code>function something() {  \n  (some) ? doathing() : dostuff(); // if some = true doathing();, else dostuff();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I'm learning JavaScript and while browsing through the jQuery library I see <code>:</code> (colon) being used a lot. What is this used for in JavaScript? </p>\n\n<pre><code>// Return an array of filtered elements (r)\n// and the modified expression string (t)\n   return { r: r, t: t };\n</code></pre>\n",
            "last_activity_date": 1374766491,
            "question_id": 418799,
            "score": 89,
            "tags": [
                "javascript"
            ],
            "title": "What does &#39;:&#39; (colon) do in JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Instead of intelligent guesses, here is an informed answer:</p>\n\n<p>HTML 5 plans to allow peer to peer connections from javascript, but these connections WILL NOT BE RAW TCP.</p>\n\n<p>The complete spec can be found at <a href=\"http://dev.w3.org/html5/websockets/\">http://dev.w3.org/html5/websockets/</a></p>\n\n<p>jrh</p>\n\n<p>EDIT: with specific reference to peer to peer connections, check out these links:</p>\n\n<ul>\n<li>Regarding peer to peer connections: <a href=\"http://www.w3.org/TR/2008/WD-html5-20080122/#peer-to-peer\">http://www.w3.org/TR/2008/WD-html5-20080122/#peer-to-peer</a></li>\n<li>Regarding broadcast connections to the local network: <a href=\"http://www.w3.org/TR/2008/WD-html5-20080122/#broadcast\">http://www.w3.org/TR/2008/WD-html5-20080122/#broadcast</a></li>\n<li>Regarding TCP connections (in the encoded protocol): <a href=\"http://www.w3.org/TR/2008/WD-html5-20080122/#tcp-connections\">http://www.w3.org/TR/2008/WD-html5-20080122/#tcp-connections</a></li>\n<li>Complete proposed spec: <a href=\"http://www.w3.org/TR/2008/WD-html5-20080122/#network\">http://www.w3.org/TR/2008/WD-html5-20080122/#network</a></li>\n</ul>\n\n<p>Its important to note that the capabilities are still being negotiated. It will be nice to be able to create \"local chat\" web apps :)</p>\n\n<p>jrh</p>\n",
                    "is_accepted": true,
                    "score": 91
                },
                {
                    "body": "<p>There are a number of reasons why this would be tricky:</p>\n\n<ol>\n<li>Firewalls (even just plain NATs) would make this kind of connection difficult at a much lower protocal layer than even HTTP. With my IT security hat on, this seems like a wonderful way to open arbitrary ports on a machine, just by visiting a website - and so it would be aggressively blocked my virtually all corporate IT systems.</li>\n<li>HTTP is inherently a client-server protocol. While it is reasonably easy to simulate duplex communications using long polling (as well as a couple of other techniques), it is not particularly efficient.</li>\n<li>This would open a large hole for XSS attacks.</li>\n</ol>\n\n<p>WebSockets is designed to solve the second of these issues, but (deliberately, I expect) not the other two. When they talk about peer-to-peer in the HTML5 spec, they are talking about full duplex communications between the server and the client, not between one client and another.</p>\n\n<p>However, it would be simple to implement a proper network stack on top of websockets - with the proviso that all communication would still have to be done through the server. I have seen this done using long polling (a friend of mine at Uni wrote a full TCP/IP stack using long polling).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I second harshath.jr: you could very well have a server acting as a directory (exposing \"origins\" of each connected agent; origin being scheme+host+port as in <a href=\"http://tools.ietf.org/html/draft-abarth-origin\" rel=\"nofollow\">draft-abarth-origin</a>, with the scheme being either \"ws\" or \"wss\"). You could then initiate peer-to-peer WebSocket connections; the <a href=\"http://en.wikipedia.org/wiki/Same%5Forigin%5Fpolicy\" rel=\"nofollow\">SOP</a> being worked through thanks to <a href=\"http://www.w3.org/TR/cors/\" rel=\"nofollow\">CORS</a>. Of course, this means that each agent (i.e. browser) would have to embed its own WebSocket server (\u00e0 la Opera Unite).</p>\n\n<p>In the mean time, do it the XMPP/IRC/etc.-way: no peer-to-peer connection but WebSocket connections to a central server (or network!) to pass messages to the connected agents (eventually using some specific WebSocket \"subprotocol\")</p>\n\n<p>EDIT: note that all of this is actually outside the scope of HTML5 (all of those things were once part of HTML5 but have been split away into their own specs)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The Whole idea of Web Sockets was to solve the problems with Firewalls and proxies <a href=\"http://www.kaazing.org/confluence/display/KAAZING/What+is+an+HTML+5+WebSocket\" rel=\"nofollow\">http://www.kaazing.org/confluence/display/KAAZING/What+is+an+HTML+5+WebSocket</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>UPDATE 10/17/2012:</strong> This functionality now exists in Chrome Stable v22. In order to use this functionality in Chrome, one must enable two flags in chrome://flags:</p>\n\n<ul>\n<li>Enable MediaStream</li>\n<li>Enable PeerConnection</li>\n</ul>\n\n<p>Then you can visit the <a href=\"http://apprtc.appspot.com\">AppRTC Demo Page</a> to try out the demo. See the <a href=\"http://www.webrtc.org/running-the-demos\">WebRTC - Running the Demos</a> page for more detailed instructions on setting up Chrome to use the peer to peer functionality and enabling device capture.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong> The engineers at Ericcson Labs have a proof of concept in a WebKit build that does <a href=\"https://labs.ericsson.com/developer-community/blog/beyond-html5-peer-peer-conversational-video\">HTML5 Peer to Peer Conversational Video</a>.  </p>\n\n<p>They have demonstrations in their blog of the technology in action, as well as diagrams and explanations on how the technology will work.</p>\n\n<p>They are working on getting this stabilized and committed to the WebKit repository.</p>\n",
                    "is_accepted": false,
                    "score": 26
                }
            ],
            "body": "<p>Is it possible to create a web app that, with the help of a central server, could create direct connections with other users of the same web app? I'm imagining a process similar to UDP hole punching.</p>\n\n<p>I've read about the new WebSockets API in HTML5, but it appears you must initiate the connection with a WS-compatible server before the fully-duplexed connection can begin. I'm thinking moreso about a process to make direct connections between clients, with a server getting involved <em>only</em> in the initial handshake.</p>\n\n<p>NOTE: Java applets don't count. I'm interested only in standard browser technologies.</p>\n",
            "last_activity_date": 1355709041,
            "question_id": 1032006,
            "score": 80,
            "tags": [
                "javascript",
                "ajax",
                "html5"
            ],
            "title": "Will HTML5 allow web apps to make peer-to-peer HTTP connections?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You could use frameset as the previous answer states but if you are insistent on using iFrames, the 2 following examples should work:</p>\n\n<pre><code>&lt;body style=\"margin:0px;padding:0px;overflow:hidden\"&gt;\n    &lt;iframe src=\"http://www.youraddress.com\" frameborder=\"0\" style=\"overflow:hidden;height:100%;width:100%\" height=\"100%\" width=\"100%\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>An alternative:</p>\n\n<pre><code>&lt;body style=\"margin:0px;padding:0px;overflow:hidden\"&gt;\n    &lt;iframe src=\"http://www.youraddress.com\" frameborder=\"0\" style=\"overflow:hidden;overflow-x:hidden;overflow-y:hidden;height:100%;width:100%;position:absolute;top:0px;left:0px;right:0px;bottom:0px\" height=\"100%\" width=\"100%\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>To hide scrolling with 2 alternatives as shown above:</p>\n\n<pre><code>&lt;body style=\"margin:0px;padding:0px;overflow:hidden\"&gt;\n    &lt;iframe src=\"http://www.youraddress.com\" frameborder=\"0\" style=\"overflow:hidden;height:150%;width:150%\" height=\"150%\" width=\"150%\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Hack with the second example:</p>\n\n<pre><code>&lt;body style=\"margin:0px;padding:0px;overflow:hidden\"&gt;\n    &lt;iframe src=\"http://www.youraddress.com\" frameborder=\"0\" style=\"overflow:hidden;overflow-x:hidden;overflow-y:hidden;height:150%;width:150%;position:absolute;top:0px;left:0px;right:0px;bottom:0px\" height=\"150%\" width=\"150%\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>To hide the scroll-bars of the iFrame, the parent is made <code>overflow: hidden</code> to hide scrollbars and the iFrame is made to go upto 150% width and height which forces the scroll-bars outside the page and since the body doesn't have scroll-bars one may not expect the iframe to be exceeding the bounds of the page. This hides the scrollbars of the iFrame with full width!</p>\n",
                    "is_accepted": true,
                    "score": 108
                },
                {
                    "body": "<p>1. Change your DOCTYPE to something less strict. Don't use XHTML; it's silly. Just use the HTML 5 doctype and you're good:</p>\n\n<pre><code>&lt;!doctype html&gt;\n</code></pre>\n\n<p>2. You might need to make sure (depends on the browser) that the iframe's parent has a height. And its parent. And its parent. Etc:</p>\n\n<pre><code>html, body { height: 100%; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>This worked very nicely for me:</p>\n\n<pre><code>     &lt;script type=\"text/javascript\"&gt;\n         function calcHeight()\n         {\n         //find the height of the internal page\n         var the_height=\n         document.getElementById('the_iframe').contentWindow.\n         document.body.scrollHeight;\n\n         //change the height of the iframe\n         document.getElementById('the_iframe').height=\n         the_height;\n         }\n&lt;/script&gt;\n        ....\n\n    &lt;iframe width=\"100%\" src=\"./1BA3A.mht\" \n    scrolling=\"no\" id=\"the_iframe\" onLoad=\"calcHeight();\" height=\"1px\" frameborder=\"0\" &gt;&lt;/iframe&gt;\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Additional to the answer of Akshit Soota:\nit is importand to explicitly set the height of each parent element, also of the table and <strong>column</strong> if any:</p>\n\n<pre><code>&lt;body style=\"margin: 0px; padding:0px; height: 100%; overflow:hidden; \"&gt;\n&lt;form id=\"form1\" runat=\"server\" style=\" height: 100%\"&gt;\n&lt;div style=\" height: 100%\"&gt;\n\n\n    &lt;table style=\"width: 100%; height: 100%\" cellspacing=\"0\"  cellpadding=\"0\"&gt;\n        &lt;tr&gt;\n            &lt;td valign=\"top\" align=\"left\" height=\"100%\"&gt;\n                &lt;iframe style=\"overflow:hidden;height:100%;width:100%;margin: 0px; padding:0px;\" \n                        width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\"\n                        src=\"http://www.youraddress.com\" &gt;&lt;/iframe&gt; \n            &lt;/td&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a concise code.  It does relies on a jquery method to find the current window height. On load of iFrame it sets the height of the iframe be the same as the current window. Then to handle resizing of the page, the body tag has an onresize event handler which sets the iframe's height whenever the document is resized.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;my I frame is as tall as your page&lt;/title&gt;\n     &lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-2.1.1.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onresize=\"$('#iframe1').attr('height', $(window).height());\" style=\"margin:0;\" &gt;\n    &lt;iframe id=\"iframe1\" src=\"yourpage.html\" style=\"width:100%;\"  onload=\"this.height=$(window).height();\"&gt;&lt;/iframe&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>here's a working sample: <a href=\"http://jsbin.com/soqeq/1/\" rel=\"nofollow\">http://jsbin.com/soqeq/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>3 approaches for creating a fullscreen <code>iframe</code>:</h2>\n\n<hr>\n\n<ul>\n<li><h3>Approach 1 - <a href=\"http://www.w3.org/TR/css3-values/#viewport-relative-lengths\" rel=\"nofollow\">Viewport-percentage lengths</a></h3>\n\n<p>In <a href=\"http://caniuse.com/#feat=viewport-units\" rel=\"nofollow\">supported browsers</a>, you can use <a href=\"http://www.w3.org/TR/css3-values/#viewport-relative-lengths\" rel=\"nofollow\">viewport-percentage lengths</a> such as <code>height: 100vh</code>. </p>\n\n<p>Where <code>100vh</code> represents the height of the viewport, and likewise <code>100vw</code> represents the width.</p>\n\n<p><a href=\"http://jsfiddle.net/qegaezk6/\" rel=\"nofollow\"><strong>Example Here</strong></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n    margin: 0;            /* Reset default margin */\r\n}\r\niframe {\r\n    display: block;       /* iframes are inline by default */\r\n    background: #000;\r\n    border: none;         /* Reset default border */\r\n    height: 100vh;        /* Viewport-relative units */\r\n    width: 100vw;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;iframe&gt;&lt;/iframe&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p></li>\n</ul>\n\n<hr>\n\n<ul>\n<li><h3>Approach 2 - Fixed positioning</h3>\n\n<p>This approach is fairly straight-forward. Just set the positioning of the <code>fixed</code> element and add a <code>height</code>/<code>width</code> of <code>100%</code>.</p>\n\n<p><a href=\"http://jsfiddle.net/p7xspqw0/\" rel=\"nofollow\"><strong>Example Here</strong></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>iframe {\r\n    position: fixed;\r\n    background: #000;\r\n    border: none;\r\n    top: 0; right: 0;\r\n    bottom: 0; left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;iframe&gt;&lt;/iframe&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p></li>\n</ul>\n\n<hr>\n\n<ul>\n<li><h3>Approach 3</h3>\n\n<p>For this last method, just set the <code>height</code> of the <code>body</code>/<code>html</code>/<code>iframe</code> elements to <code>100%</code>.</p>\n\n<p><a href=\"http://jsfiddle.net/txacs8to/\" rel=\"nofollow\"><strong>Example Here</strong></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>html, body {\r\n    height: 100%;\r\n    margin: 0;         /* Reset default margin on the body element */\r\n}\r\niframe {\r\n    display: block;       /* iframes are inline by default */\r\n    background: #000;\r\n    border: none;         /* Reset default border */\r\n    width: 100%;\r\n    height: 100%;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;iframe&gt;&lt;/iframe&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Is iframe height=100% supported in all browsers;</p>\n\n<p>I am using doctype as;</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n</code></pre>\n\n<p>In my iframe code, if I say</p>\n\n<pre><code>&lt;iframe src=\"xyz.pdf\" width=\"100%\" height=\"100%\" /&gt;\n</code></pre>\n\n<p>I mean will it actually take the height of the remaining page (as there is another frame on top with fixed height of 50px)\nIs this supported in all major browsers (IE/Firefox/Safari) ?</p>\n\n<p>Also regarding scrollbars, even though I say scrolling=\"no\", I can see disabled scrollbars in Firefox...How do I completely hide scrollbars and set the iframe height automatically?</p>\n",
            "last_activity_date": 1421783562,
            "question_id": 5867985,
            "score": 73,
            "tags": [
                "javascript",
                "html",
                "css",
                "iframe",
                "html-frames"
            ],
            "title": "iframe auto 100% height"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<pre><code>$(document).ready(function() {\n    $(\"input:text\").focus(function() { $(this).select(); } );\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 184
                },
                {
                    "body": "<pre><code>&lt;input type=\"text\" onfocus=\"this.select();\" onmouseup=\"return false;\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 79
                },
                {
                    "body": "<pre><code>$(document).ready(function() {\n  $(\"input[type=text]\").focus().select();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<pre><code>$(document).ready(function() {\n    $(\"input:text\")\n        .focus(function () { $(this).select(); } )\n        .mouseup(function (e) {e.preventDefault(); });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>The answers here helped me up to a point, but I had a problem on HTML5 Number input fields when clicking the up/down buttons in Chrome.</p>\n\n<p>If you click one of the buttons, and left the mouse over the button the number would keep changing as if you were holding the mouse button because the mouseup was being thrown away.</p>\n\n<p>I solved this by removing the mouseup handler as soon as it had been triggered as below:</p>\n\n<pre><code>    $(\"input:number\").focus(function () {\n        var $elem = $(this);\n        $elem.select().mouseup(function (e) {\n            e.preventDefault();\n            $elem.unbind(e.type);\n        });\n    });\n</code></pre>\n\n<p>Hope this helps people in the future...</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>my solution is to use a timeout. Seems to work ok</p>\n\n<pre><code>$('input[type=text]').focus(function() {\n    var _this = this;\n    setTimeout(function() {\n        _this.select();\n    }, 10);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This will work, Try this - </p>\n\n<pre><code>&lt;input id=\"textField1\" onfocus=\"this.select()\" onmouseup=\"return false\" /&gt; \n</code></pre>\n\n<p>Works in Safari/IE 9 and Chrome, I did not get a chance to test in Firefox though.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is not just a Chrome/Safari issue, I experienced a quite similar behavior with Firefox 18.0.1. The funny part is that this does not happen on MSIE! The problem here is the first <strong>mouseup</strong> event that forces to unselect the input content, so just ignore the first occurence.</p>\n\n<pre><code>$(':text').focus(function(){\n    $(this).one('mouseup', function(event){\n        event.preventDefault();\n    }).select();\n});\n</code></pre>\n\n<p>The timeOut approach causes a strange behavior, and blocking every mouseup event you can not remove the selection clicking again on the input element.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>U mad guys... Jquery is not JavaScript whitch is more easy to use in some cases.</p>\n\n<p>Look at this example:</p>\n\n<pre><code>&lt;textarea rows=\"10\" cols=\"50\" onclick=\"this.focus();this.select()\"&gt;Text is here&lt;/textarea&gt;\n</code></pre>\n\n<p>from <a href=\"http://css-tricks.com/snippets/javascript/auto-select-textarea-text/\">Css trics</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I was able to slightly improve Zach's answer by incorporating a few function calls. The problem with that answer is that it disables onMouseUp completely, thereby preventing you from clicking around in the textbox once it has focus.</p>\n\n<p>Here is my code:</p>\n\n<pre><code>&lt;input type=\"text\" onfocus=\"this.select()\" onMouseUp=\"javascript:TextBoxMouseUp();\" onMouseDown=\"javascript:TextBoxMouseDown();\" /&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    var doMouseUp = true;\n    function TextBoxMouseDown() {\n        doMouseUp = this == document.activeElement;\n        return doMouseUp;\n    }\n    function TextBoxMouseUp() {\n        if (doMouseUp)\n        { return true; }\n        else {\n            doMouseUp = true;\n            return false;\n        }\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>This is a slight improvement over Zach's answer. It works perfectly in IE, doesn't work at all in Chrome, and works with alternating success in FireFox (literally every other time). If someone has an idea of how to make it work reliably in FF or Chrome, please share. </p>\n\n<p>Anyway, I figured I'd share what I could to make this a little nicer.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>onclick=\"this.focus();this.select()\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know inline code is bad style, but I didn't want to put this into a .js file.\nWorks without jQuery!</p>\n\n<pre><code>&lt;input type=\"text\" value=\"blah blah\" onfocus=\"this.select(); this.selAll=1;\" onmouseup=\"if(this.selAll==0) return true; this.selAll=0; return false;\"&gt;&lt;/input&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>$('input').focus(function () {\n    var self = $(this);\n    setTimeout(function () {\n        self.select();\n    }, 1);        \n});\n</code></pre>\n\n<p>Edit: Per @DavidG's request, I can't provide details because I'm not sure why this works, but I believe it has something to do with the focus event propagating up or down or whatever it does and the input element getting the notification it's received focus. Setting the timeout gives the element a moment to realize it's done so.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you chain the events together I believe it eliminates the need to use <code>.one</code> as suggested elsewhere in this thread.</p>\n\n<p>Example:</p>\n\n<pre><code>$('input.your_element').focus( function () {\n    $(this).select().mouseup( function (e) {\n        e.preventDefault();\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is a JavaScript or jQuery solution that will select all of the contents of a textbox when the textbox receives focus?</p>\n",
            "last_activity_date": 1426138550,
            "question_id": 480735,
            "score": 133,
            "tags": [
                "javascript",
                "jquery",
                "user-interface"
            ],
            "title": "Select all contents of textbox when it receives focus (JavaScript or jQuery)"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>If it's not set or want to update with a new value you can use:</p>\n\n<pre><code>window.location.search = 'param=value'; // or param=new_value\n</code></pre>\n\n<p>This is in simple Javascript, by the way.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>You may want to try using this <a href=\"http://plugins.jquery.com/project/query-object\" rel=\"nofollow\">plugin</a></p>\n\n<blockquote>\n  <p>window.location.search =\n  jQuery.query.set(\"param\", 5);</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here you go.</p>\n\n<p><a href=\"http://plugins.jquery.com/project/query-object\" rel=\"nofollow\">http://plugins.jquery.com/project/query-object</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>window.location.search is read/write.</p>\n\n<p>However - modifying the query string will redirect the page you're on and cause a refresh from the server.</p>\n\n<p>If what you're attempting to do is maintain client side state (and potentially make it bookmark-able), you'll want to modify the URL hash instead of the query string, which keeps you on the same page (window.location.hash is read/write). This is how web sites like twitter.com do this.</p>\n\n<p>You'll also want the back button to work, you'll have to bind javascript events to the hash change event, a good plugin for that is <a href=\"http://benalman.com/projects/jquery-hashchange-plugin/\">http://benalman.com/projects/jquery-hashchange-plugin/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I wrote the following function which accomplishes what I want to achieve:</p>\n\n<pre><code>function updateQueryStringParameter(uri, key, value) {\n  var re = new RegExp(\"([?&amp;])\" + key + \"=.*?(&amp;|$)\", \"i\");\n  var separator = uri.indexOf('?') !== -1 ? \"&amp;\" : \"?\";\n  if (uri.match(re)) {\n    return uri.replace(re, '$1' + key + \"=\" + value + '$2');\n  }\n  else {\n    return uri + separator + key + \"=\" + value;\n  }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 172
                },
                {
                    "body": "<p>I have expanded the solution and combined it with another that I found to replace/update/remove the querystring parameters based on the users input and taking the urls anchor into consideration.</p>\n\n<p>Not supplying a value will remove the parameter, supplying one will add/update the parameter. If no URL is supplied, it will be grabbed from window.location</p>\n\n<pre><code>function UpdateQueryString(key, value, url) {\n    if (!url) url = window.location.href;\n    var re = new RegExp(\"([?&amp;])\" + key + \"=.*?(&amp;|#|$)(.*)\", \"gi\"),\n        hash;\n\n    if (re.test(url)) {\n        if (typeof value !== 'undefined' &amp;&amp; value !== null)\n            return url.replace(re, '$1' + key + \"=\" + value + '$2$3');\n        else {\n            hash = url.split('#');\n            url = hash[0].replace(re, '$1$3').replace(/(&amp;|\\?)$/, '');\n            if (typeof hash[1] !== 'undefined' &amp;&amp; hash[1] !== null) \n                url += '#' + hash[1];\n            return url;\n        }\n    }\n    else {\n        if (typeof value !== 'undefined' &amp;&amp; value !== null) {\n            var separator = url.indexOf('?') !== -1 ? '&amp;' : '?';\n            hash = url.split('#');\n            url = hash[0] + separator + key + '=' + value;\n            if (typeof hash[1] !== 'undefined' &amp;&amp; hash[1] !== null) \n                url += '#' + hash[1];\n            return url;\n        }\n        else\n            return url;\n    }\n}\n</code></pre>\n\n<p><strong>UPDATE</strong></p>\n\n<p>There was a bug when removing the first parameter in the querystring, I have reworked the regex and test to include a fix.</p>\n\n<p><strong>Second Update</strong></p>\n\n<p>As suggested by @Jar\u00f3nBarends - Tweak value check to check against undefined and null to allow setting 0 values</p>\n\n<p><strong>Third Update</strong></p>\n\n<p>There was a bug where removing a querystring variable directly before a hashtag would lose the hashtag symbol which has been fixed</p>\n\n<p><strong>Fourth Update</strong></p>\n\n<p>Thanks @rooby for pointing out a regex optimization in the first RegExp object.\nSet initial regex to ([?&amp;]) due to issue with using (\\?|&amp;) found by @YonatanKarni</p>\n\n<p><strong>Fifth Update</strong></p>\n\n<p>Removing declaring hash var in if/else statement</p>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>My take <a href=\"https://snipt.net/andreyvit/parsing-encoding-and-updating-url-params-in-javascript/\" rel=\"nofollow\">from here</a> (compatible with \"use strict\"; does not really use jQuery):</p>\n\n<pre><code>function decodeURIParams(query) {\n  if (query == null)\n    query = window.location.search;\n  if (query[0] == '?')\n    query = query.substring(1);\n\n  var params = query.split('&amp;');\n  var result = {};\n  for (var i = 0; i &lt; params.length; i++) {\n    var param = params[i];\n    var pos = param.indexOf('=');\n    if (pos &gt;= 0) {\n        var key = decodeURIComponent(param.substring(0, pos));\n        var val = decodeURIComponent(param.substring(pos + 1));\n        result[key] = val;\n    } else {\n        var key = decodeURIComponent(param);\n        result[key] = true;\n    }\n  }\n  return result;\n}\n\nfunction encodeURIParams(params, addQuestionMark) {\n  var pairs = [];\n  for (var key in params) if (params.hasOwnProperty(key)) {\n    var value = params[key];\n    if (value != null) /* matches null and undefined */ {\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\n    }\n  }\n  if (pairs.length == 0)\n    return '';\n  return (addQuestionMark ? '?' : '') + pairs.join('&amp;');\n}\n\n//// alternative to $.extend if not using jQuery:\n// function mergeObjects(destination, source) {\n//   for (var key in source) if (source.hasOwnProperty(key)) {\n//     destination[key] = source[key];\n//   }\n//   return destination;\n// }\n\nfunction navigateWithURIParams(newParams) {\n  window.location.search = encodeURIParams($.extend(decodeURIParams(), newParams), true);\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>// add/update parameters\nnavigateWithURIParams({ foo: 'bar', boz: 42 });\n\n// remove parameter\nnavigateWithURIParams({ foo: null });\n\n// submit the given form by adding/replacing URI parameters (with jQuery)\n$('.filter-form').submit(function(e) {\n  e.preventDefault();\n  navigateWithURIParams(decodeURIParams($(this).serialize()));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on @amateur's answer, but taking into account the comment about hash tags in the url I use the following:</p>\n\n<pre><code>function updateQueryStringParameter(uri, key, value) {\n  var re = new RegExp(\"([?|&amp;])\" + key + \"=.*?(&amp;|#|$)\", \"i\");\n  if (uri.match(re)) {\n    return uri.replace(re, '$1' + key + \"=\" + value + '$2');\n  } else {\n    var hash =  '';\n    var separator = uri.indexOf('?') !== -1 ? \"&amp;\" : \"?\";    \n    if( uri.indexOf('#') !== -1 ){\n        hash = uri.replace(/.*#/, '#');\n        uri = uri.replace(/#.*/, '');\n    }\n    return uri + separator + key + \"=\" + value + hash;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is my library to do that: <a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">https://github.com/Mikhus/jsurl</a></p>\n\n<pre><code>var u = new Url;\nu.query.param='value'; // adds or replaces the param\nalert(u)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To give an code example for modifying <code>window.location.search</code> as suggested by Gal and tradyblix:</p>\n\n<pre><code>var qs = window.location.search || \"?\";\nvar param = key + \"=\" + value; // remember to URI encode your parameters\nif (qs.length &gt; 1) {\n    // more than just the question mark, so append with ampersand\n    qs = qs + \"&amp;\";\n}\nqs = qs + param;\nwindow.location.search = qs;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Java script code to find a specific query string and replace its value *</p>\n\n<pre><code>('input.letter').click(function () {\n                //0- prepare values\n                var qsTargeted = 'letter=' + this.value; //\"letter=A\";\n                var windowUrl = '';\n                var qskey = qsTargeted.split('=')[0];\n                var qsvalue = qsTargeted.split('=')[1];\n                //1- get row url\n                var originalURL = window.location.href;\n                //2- get query string part, and url\n                if (originalURL.split('?').length &gt; 1) //qs is exists\n                {\n                    windowUrl = originalURL.split('?')[0];\n                    var qs = originalURL.split('?')[1];\n                    //3- get list of query strings\n                    var qsArray = qs.split('&amp;');\n                    var flag = false;\n                    //4- try to find query string key\n                    for (var i = 0; i &lt; qsArray.length; i++) {\n                        if (qsArray[i].split('=').length &gt; 0) {\n                            if (qskey == qsArray[i].split('=')[0]) {\n                                //exists key\n                                qsArray[i] = qskey + '=' + qsvalue;\n                                flag = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (!flag)//   //5- if exists modify,else add\n                    {\n                        qsArray.push(qsTargeted);\n                    }\n                    var finalQs = qsArray.join('&amp;');\n                    //6- prepare final url\n                    window.location = windowUrl + '?' + finalQs;\n                }\n                else {\n                    //6- prepare final url\n                    //add query string\n                    window.location = originalURL + '?' + qsTargeted;\n                }\n            })\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yeah I had an issue where my querystring would overflow and duplicate, but this was due to my own sluggishness. so I played a bit and worked up some js jquery(actualy sizzle) and C# magick.</p>\n\n<p>So i just realized that after the server has done with the passed values, the values doesn't matter anymore, there is no reuse, if the client wanted to do the same thing evidently it will always be a new request, even if its the same parameters being passed. And thats all clientside, so some caching/cookies etc could be cool in that regards.</p>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function () {\n            $('#ser').click(function () {\n                SerializeIT();\n            });\n            function SerializeIT() {\n                var baseUrl = \"\";\n                baseUrl = getBaseUrlFromBrowserUrl(window.location.toString());\n                var myQueryString = \"\";\n                funkyMethodChangingStuff(); //whatever else before serializing and creating the querystring\n                myQueryString = $('#fr2').serialize();\n                window.location.replace(baseUrl + \"?\" + myQueryString);\n            }\n            function getBaseUrlFromBrowserUrl(szurl) {\n                return szurl.split(\"?\")[0];\n            } \n            function funkyMethodChangingStuff(){\n               //do stuff to whatever is in fr2\n            }\n        });\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div id=\"fr2\"&gt;\n   &lt;input type=\"text\" name=\"qURL\" value=\"http://somewhere.com\" /&gt;\n   &lt;input type=\"text\" name=\"qSPart\" value=\"someSearchPattern\" /&gt;\n&lt;/div&gt;\n&lt;button id=\"ser\"&gt;Serialize! and go play with the server.&lt;/button&gt;\n</code></pre>\n\n<p>C#:</p>\n\n<pre><code>    using System.Web;\n    using System.Text;\n    using System.Collections.Specialized;\n\n    public partial class SomeCoolWebApp : System.Web.UI.Page\n    {\n        string weburl = string.Empty;\n        string partName = string.Empty;\n\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            string loadurl = HttpContext.Current.Request.RawUrl;\n            string querySZ = null;\n            int isQuery = loadurl.IndexOf('?');\n            if (isQuery == -1) { \n                //If There Was no Query\n            }\n            else if (isQuery &gt;= 1) {\n                querySZ = (isQuery &lt; loadurl.Length - 1) ? loadurl.Substring(isQuery + 1) : string.Empty;\n                string[] getSingleQuery = querySZ.Split('?');\n                querySZ = getSingleQuery[0];\n\n                NameValueCollection qs = null;\n                qs = HttpUtility.ParseQueryString(querySZ);\n\n                weburl = qs[\"qURL\"];\n                partName = qs[\"qSPart\"];\n                //call some great method thisPageRocks(weburl,partName); or whatever.\n          }\n      }\n  }\n</code></pre>\n\n<blockquote>\n  <p><em><strong>Okay criticism is welcome (this was a nightly concoction so feel free to note adjustments). If this helped at all, thumb it up, Happy Coding.</em></strong></p>\n</blockquote>\n\n<p>No duplicates, each request as unique as you modified it, and due to how this is structured,easy to add more queries dynamicaly from wthin the dom.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I realize this question is old and has been answered to death, but here's my stab at it. I'm trying to reinvent the wheel here because I was using the currently accepted answer and the mishandling of URL fragments recently bit me in a project.</p>\n\n<p>The function is below. It's quite long, but it was made to be as resilient as possible. I would love suggestions for shortening/improving it. I put together a small <a href=\"http://jsfiddle.net/dominic_p/2ncMs/\" rel=\"nofollow\">jsFiddle test suite</a> for it (or other similar functions). If a function can pass every one of the tests there, I say it's probably good to go.</p>\n\n<p><strong>Update:</strong> I came across a cool function for <a href=\"http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\" rel=\"nofollow\">using the DOM to parse URLs</a>, so I incorporated that technique here. It makes the function shorter and more reliable. Props to the author of that function.</p>\n\n<pre><code>/**\n * Add or update a query string parameter. If no URI is given, we use the current\n * window.location.href value for the URI.\n * \n * Based on the DOM URL parser described here:\n * http://james.padolsey.com/javascript/parsing-urls-with-the-dom/\n *\n * @param   (string)    uri     Optional: The URI to add or update a parameter in\n * @param   (string)    key     The key to add or update\n * @param   (string)    value   The new value to set for key\n *\n * Tested on Chrome 34, Firefox 29, IE 7 and 11\n */\nfunction update_query_string( uri, key, value ) {\n\n    // Use window URL if no query string is provided\n    if ( ! uri ) { uri = window.location.href; }\n\n    // Create a dummy element to parse the URI with\n    var a = document.createElement( 'a' ), \n\n        // match the key, optional square bracktes, an equals sign or end of string, the optional value\n        reg_ex = new RegExp( key + '((?:\\\\[[^\\\\]]*\\\\])?)(=|$)(.*)' ),\n\n        // Setup some additional variables\n        qs,\n        qs_len,\n        key_found = false;\n\n    // Use the JS API to parse the URI \n    a.href = uri;\n\n    // If the URI doesn't have a query string, add it and return\n    if ( ! a.search ) {\n\n        a.search = '?' + key + '=' + value;\n\n        return a.href;\n    }\n\n    // Split the query string by ampersands\n    qs = a.search.replace( /^\\?/, '' ).split( /&amp;(?:amp;)?/ );\n    qs_len = qs.length; \n\n    // Loop through each query string part\n    while ( qs_len &gt; 0 ) {\n\n        qs_len--;\n\n        // Check if the current part matches our key\n        if ( reg_ex.test( qs[qs_len] ) ) {\n\n            // Replace the current value\n            qs[qs_len] = qs[qs_len].replace( reg_ex, key + '$1' ) + '=' + value;\n\n            key_found = true;\n        }\n    }   \n\n    // If we haven't replaced any occurences above, add the new parameter and value\n    if ( ! key_found ) { qs.push( key + '=' + value ); }\n\n    // Set the new query string\n    a.search = '?' + qs.join( '&amp;' );\n\n    return a.href;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's my approach: The <code>location.params()</code> function (shown below) can be used as a getter or setter.  Examples:</p>\n\n<p>Given the URL is <code>http://example.com/?foo=bar&amp;baz#some-hash</code>,</p>\n\n<ol>\n<li><code>location.params()</code> will return an object with all the query parameters: <code>{foo: 'bar', baz: true}</code>.</li>\n<li><code>location.params('foo')</code> will return <code>'bar'</code>.</li>\n<li><code>location.params({foo: undefined, hello: 'world', test: true})</code> will change the URL to <code>http://example.com/?baz&amp;hello=world&amp;test#some-hash</code>.</li>\n</ol>\n\n<p>Here is the <code>params()</code> function, which can optionally be assigned to the <code>window.location</code> object.</p>\n\n<pre><code>location.params = function(params) {\n  var obj = {}, i, parts, len, key, value;\n\n  if (typeof params === 'string') {\n    value = location.search.match(new RegExp('[?&amp;]' + params + '=?([^&amp;]*)[&amp;#$]?'));\n    return value ? value[1] : undefined;\n  }\n\n  var _params = location.search.substr(1).split('&amp;');\n\n  for (i = 0, len = _params.length; i &lt; len; i++) {\n    parts = _params[i].split('=');\n    if (! parts[0]) {continue;}\n    obj[parts[0]] = parts[1] || true;\n  }\n\n  if (typeof params !== 'object') {return obj;}\n\n  for (key in params) {\n    value = params[key];\n    if (typeof value === 'undefined') {\n      delete obj[key];\n    } else {\n      obj[key] = value;\n    }\n  }\n\n  parts = [];\n  for (key in obj) {\n    parts.push(key + (obj[key] === true ? '' : '=' + obj[key]));\n  }\n\n  location.search = parts.join('&amp;');\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>With javascript how can I add a query string parameter to the url if not present or if it present, update the current value? I am using jquery for my client side development.</p>\n",
            "last_activity_date": 1422155139,
            "question_id": 5999118,
            "score": 101,
            "tags": [
                "javascript",
                "jquery",
                "query-string"
            ],
            "title": "add or update query string parameter"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>You use Global variables :-D.</p>\n\n<p>Like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n   var obj1 = \"somevalue\";\n   var obj2 = \"someothervalue\";\n&lt;/script>\n&lt;script type=\"text/javascript\" src=\"file.js\"&gt;&lt;/script\"&gt;</code></pre>\n\n<p>The JavaScript code in 'file.js' can access to <code>obj1</code> and <code>obj2</code> without problem.</p>\n\n<p><b>EDIT</b> Just want to add that if 'file.js' wants to check if <code>obj1</code> and <code>obj2</code> have even been declared you can use the following function.</p>\n\n<pre><code>function IsDefined($Name) {\n    return (window[$Name] != undefined);\n}</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This can be easily done if you are using some Javascript framework like jQuery. \nLike so,</p>\n\n<pre><code>var x = $('script:first').attr('src'); //Fetch the source in the first script tag\nvar params = x.split('?')[1]; //Get the params\n</code></pre>\n\n<p>Now you can use these params by splitting as your variable parameters.</p>\n\n<p>The same process can be done without any framework but will take some more lines of code.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Well, you could have the javascript file being built by any of the scripting languages, injecting your variables into the file on every request. You would have to tell your webserver to not dish out js-files statically (using mod_rewrite would suffice).</p>\n\n<p>Be aware though that you lose any caching of these js-files as they are altered constantly.</p>\n\n<p>Bye.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>No, you cant really do this by adding variables to the querystring portion of the JS file URL. If its writing the portion of code to parse the string that bothers you, perhaps another way would be to json encode your variables and put them in something like the rel attribute of the  tag? I don't know how valid this is in terms of HTML validation, if thats something you're very worried about. Then you just need to find the rel attribute of the script and then json_decode that. </p>\n\n<p>eg</p>\n\n<pre><code>&lt;script type='text/javascript' src='file.js' rel='{\"myvar\":\"somevalue\",\"anothervar\":\"anothervalue\"}'&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'd recommend not using global variables if possible. Use a namespace and OOP to pass your arguments through to an object.</p>\n\n<p>This code belongs in file.js:</p>\n\n<pre><code>var MYLIBRARY = MYLIBRARY || (function(){\n    var _args = {}; // private\n\n    return {\n        init : function(Args) {\n            _args = Args;\n            // some other initialising\n        },\n        helloWorld : function() {\n            alert('Hello World! -' + _args[0]);\n        }\n    };\n}());\n</code></pre>\n\n<p>And in your html file:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"file.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n   MYLIBRARY.init([\"somevalue\", 1, \"controlId\"]);\n   MYLIBRARY.helloWorld();\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 81
                },
                {
                    "body": "<p>I don't know whether you can access your script's location from an imported script, but you can generate the variables on the server and insert them into the script.</p>\n\n<p>generate_js.php:</p>\n\n<pre><code>header('Content-type: text/javascript');\n\n$filename = $_GET['file'];\nunset($_GET['file']);\n\nforeach ($_GET as $key =&gt; $val) {\n  echo \"var $key = '$val';\\n\";\n}\n\nreadfile($filename);\n</code></pre>\n\n<p>script.js:</p>\n\n<pre><code>alert(obj1);\n</code></pre>\n\n<p>page.htm:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"generate_js.php?file=script.js&amp;obj1=somevalue&amp;obj2=someothervalue\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This will dynamically insert your query string parameters into the script, so the output should be an alert with \"somevalue\".</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here is a very rushed proof of concept.</p>\n\n<p>I'm sure there are at least 2 places where there can be improvements, and I'm also sure that this would not survive long in the wild. Any feedback to make it more presentable or usable is welcome.</p>\n\n<p>The key is setting an id for your script element. The only catch is that this means you can only call the script once since it looks for that ID to pull the query string. This could be fixed if, instead, the script loops through all query elements to see if any of them point to it, and if so, uses the last instance of such an script element. Anyway, on with the code:</p>\n\n<h3>Script being called:</h3>\n\n<pre><code>window.onload = function() {\n//Notice that both possible parameters are pre-defined.\n//Which is probably not required if using proper object notation\n//in query string, or if variable-variables are possible in js.\nvar header;\nvar text;\n\n//script gets the src attribute based on ID of page's script element:\nvar requestURL = document.getElementById(\"myScript\").getAttribute(\"src\");\n\n//next use substring() to get querystring part of src\nvar queryString = requestURL.substring(requestURL.indexOf(\"?\") + 1, requestURL.length);\n\n//Next split the querystring into array\nvar params = queryString.split(\"&amp;\");\n\n//Next loop through params\nfor(var i = 0; i &lt; params.length; i++){\n var name  = params[i].substring(0,params[i].indexOf(\"=\"));\n var value = params[i].substring(params[i].indexOf(\"=\") + 1, params[i].length);\n\n    //Test if value is a number. If not, wrap value with quotes:\n    if(isNaN(parseInt(value))) {\n  params[i] = params[i].replace(value, \"'\" + value + \"'\");\n }\n\n    // Finally, use eval to set values of pre-defined variables:\n eval(params[i]);\n}\n\n//Output to test that it worked:\ndocument.getElementById(\"docTitle\").innerHTML = header;\ndocument.getElementById(\"docText\").innerHTML = text;\n};\n</code></pre>\n\n<h3>Script called via following page:</h3>\n\n<pre><code>&lt;script id=\"myScript\" type=\"text/javascript\" \n        src=\"test.js?header=Test Page&amp;text=This Works\"&gt;&lt;/script&gt;\n\n&lt;h1 id=\"docTitle\"&gt;&lt;/h1&gt;\n&lt;p id=\"docText\"&gt;&lt;/p&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Check out this URL.  It is working perfectly for the requirement.</p>\n\n<p><a href=\"http://feather.elektrum.org/book/src.html\">http://feather.elektrum.org/book/src.html</a></p>\n\n<p>Thanks a lot to the author. For quick reference I pasted the main logic below:</p>\n\n<pre><code>var scripts = document.getElementsByTagName('script');\nvar myScript = scripts[ scripts.length - 1 ];\n\nvar queryString = myScript.src.replace(/^[^\\?]+\\??/,'');\n\nvar params = parseQuery( queryString );\n\nfunction parseQuery ( query ) {\n  var Params = new Object ();\n  if ( ! query ) return Params; // return empty object\n  var Pairs = query.split(/[;&amp;]/);\n  for ( var i = 0; i &lt; Pairs.length; i++ ) {\n    var KeyVal = Pairs[i].split('=');\n    if ( ! KeyVal || KeyVal.length != 2 ) continue;\n    var key = unescape( KeyVal[0] );\n    var val = unescape( KeyVal[1] );\n    val = val.replace(/\\+/g, ' ');\n    Params[key] = val;\n  }\n  return Params;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Nice question and creative answers but my suggetion is to make your methods paramterized and that should solve all your problems without any tricks.</p>\n\n<p>if you have function:</p>\n\n<pre><code>function A()\n{\n    var val = external_value_from_query_string_or_global_param;\n}\n</code></pre>\n\n<p>you can change this to:</p>\n\n<pre><code>function B(function_param)\n{\n    var val = function_param;\n}\n</code></pre>\n\n<p>I think this is most natural approach, you don't need to crate extra documentation about 'file parameters' and you receive the same. This specially useful if you allow other developers to use your js file.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can pass parameters with arbitrary attributes. This works in all recent browsers.</p>\n\n<pre><code>&lt;script type=\"text/javascript\" data-my_var_1=\"some_val_1\" data-my_var_2=\"some_val_2\" src=\"/js/somefile.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Inside somefile.js you can get passed variables values this way:</p>\n\n<p>........</p>\n\n<pre><code>var this_js_script = $('script[src*=somefile]'); // or better regexp to get the file name..\n\nvar my_var_1 = this_js_script.attr('data-my_var_1');   \nif (typeof my_var_1 === \"undefined\" ) {\n   var my_var_1 = 'some_default_value';\n}\nalert(my_var_1); // to view the variable value\n\nvar my_var_2 = this_js_script.attr('data-my_var_2');   \nif (typeof my_var_2 === \"undefined\" ) {\n   var my_var_2 = 'some_default_value';\n}\nalert(my_var_2); // to view the variable value\n</code></pre>\n\n<p>...etc...</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>It's not valid html (I don't think) but it seems <i>to work if you create a custom attribute for the script tag in your webpage</i>:</p>\n\n<p><code>&lt;script id=\"myScript\" myCustomAttribute=\"some value\" ....&gt;</code></p>\n\n<p>Then access the custom attribute in the javascript:</p>\n\n<p><code>var myVar = document.getElementById( \"myScript\" ).getAttribute( \"myCustomAttribute\" );</code></p>\n\n<p>Not sure if this is better or worse than parsing the script source string.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another idea I came across was assigning an \u201cid\u201d to the  element and passing the arguments as data-* attributes.  The resulting  tag would look something like this:</p>\n\n<pre><code>&lt;script id=\"helper\" data-name=\"helper\" src=\"helper.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The script could then use the id to programmatically locate itself and parse the arguments.  Given the previous  tag, the name could be retrieved like this:</p>\n\n<pre><code>var name = document.getElementById(\"helper\").getAttribute(\"data-name\");\n</code></pre>\n\n<p>we get name = helper</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Often I will have a JavaScript file that I want to use which requires certain variables be defined in my web page.</p>\n\n<p>So the code is something like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"file.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n   var obj1 = \"somevalue\";\n&lt;/script&gt;\n</code></pre>\n\n<p>But what I want to do is:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" \n     src=\"file.js?obj1=somevalue&amp;obj2=someothervalue\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>I tried different methods and the best one yet is to parse the query string like this:</p>\n\n<pre><code>var scriptSrc = document.getElementById(\"myscript\").src.toLowerCase();\n</code></pre>\n\n<p>And then search for my values.</p>\n\n<p>I wonder if there is another way to do this without building a function to parse my string.</p>\n\n<p>Do you all know other methods?</p>\n",
            "last_activity_date": 1421056201,
            "question_id": 2190801,
            "score": 59,
            "tags": [
                "javascript",
                "parameters"
            ],
            "title": "Passing parameters to JavaScript files"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>If you want the textbox to grow when the string within it extends past its width, maybe something like this would work for you... It detects the size attribute of the textbox. If the length of the string goes over that attribute, it extends the textbox to the length of the string on keyup.</p>\n\n<p>In the below script, \"#test\" is a textbox ID.</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n$(document).ready(function(){\n\t$(\"#test\").keyup(function(){\n\t\tif($(\"#test\").attr(\"size\") &lt; $(\"#test\").val().length){\n\t\t\tsize = $(\"#test\").val().length;\n\t\t\t$(\"#test\").attr(\"size\",size);\n\t\t}\n\t})\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a plugin that'll do what you're after:</p>\n\n<p><strong>EDIT</strong>: I've fixed the plugin as per Mathias' comment. :)</p>\n\n<p>See a demo here: <strong><a href=\"http://jsfiddle.net/rRHzY\" rel=\"nofollow\">http://jsfiddle.net/rRHzY</a></strong></p>\n\n<p>The plugin:</p>\n\n<pre><code>(function($){\n\n    $.fn.autoGrowInput = function(o) {\n\n        o = $.extend({\n            maxWidth: 1000,\n            minWidth: 0,\n            comfortZone: 70\n        }, o);\n\n        this.filter('input:text').each(function(){\n\n            var minWidth = o.minWidth || $(this).width(),\n                val = '',\n                input = $(this),\n                testSubject = $('&lt;tester/&gt;').css({\n                    position: 'absolute',\n                    top: -9999,\n                    left: -9999,\n                    width: 'auto',\n                    fontSize: input.css('fontSize'),\n                    fontFamily: input.css('fontFamily'),\n                    fontWeight: input.css('fontWeight'),\n                    letterSpacing: input.css('letterSpacing'),\n                    whiteSpace: 'nowrap'\n                }),\n                check = function() {\n\n                    if (val === (val = input.val())) {return;}\n\n                    // Enter new content into testSubject\n                    var escaped = val.replace(/&amp;/g, '&amp;amp;').replace(/\\s/g,'&amp;nbsp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\n                    testSubject.html(escaped);\n\n                    // Calculate new width + whether to change\n                    var testerWidth = testSubject.width(),\n                        newWidth = (testerWidth + o.comfortZone) &gt;= minWidth ? testerWidth + o.comfortZone : minWidth,\n                        currentWidth = input.width(),\n                        isValidWidthChange = (newWidth &lt; currentWidth &amp;&amp; newWidth &gt;= minWidth)\n                                             || (newWidth &gt; minWidth &amp;&amp; newWidth &lt; o.maxWidth);\n\n                    // Animate width\n                    if (isValidWidthChange) {\n                        input.width(newWidth);\n                    }\n\n                };\n\n            testSubject.insertAfter(input);\n\n            $(this).bind('keyup keydown blur update', check);\n\n        });\n\n        return this;\n\n    };\n\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 125
                },
                {
                    "body": "<p>Good plugin, thank you! I changed two things that seemed to work better in my project though.</p>\n\n<ol>\n<li>I changed the TESTER tag to a DIV, to avoid getting 'Unexpected call to method or property access.' in IE8 (even though your demo does work in IE8. Was there a particular reason for for using a custom HTML tag?</li>\n<li>After the bind statement near the end of the code, I added a call to check(), in order to resize the textbox immediately after loading the page, in case the textbox already has content in it on startup.</li>\n</ol>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>just wanted to share a small improvement to James's great plugin. Add this code to the CSS declaration for the tester element to account for text-indent:</p>\n\n<pre><code>textIndent: 0\n</code></pre>\n\n<p>Without it, in some situations the tester element may inadvertently inherit the text-indent from elsewhere, thus throwing off the size of the input.</p>\n\n<p>Like JP, I also wanted to resize the input to the correct size from the beginning, which I did just slightly differently, by chaining \"trigger('keyup')\" to the autoGrowInput method call, e.g.:</p>\n\n<pre><code>$('#contact_form').autoGrowInput({comfortZone: 7, minWidth: 10, maxWidth: 200}).trigger('keyup');\n</code></pre>\n\n<p>As a side note, I signed up to this site purely to comment on James's solution and I'm a bit annoyed to find that I can't because I don't have enough reputation points to start with. Sorry if I've missed something, but that seems to mean that I have to post this is a comment on the main question rather than more appropriately on James's solution.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I'd also replaced</p>\n\n<pre><code>$(this).bind('keyup keydown blur update', check)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>$(this).bind('keyup blur update', check).bind('keydown', function() {\n    setTimeout(check);\n});\n</code></pre>\n\n<p>in order to get the field resized right after it was re-rendered by browser. It would rid the field from some chattering.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Funny enough in IE overflow: visible is taken very seriously.  You can achieve this effect by applying overflow: visible on your input elements.  Not sure if any similar CSS tricks exist for modern browsers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have a jQuery plugin on GitHub: <a href=\"https://github.com/MartinF/jQuery.Autosize.Input\">https://github.com/MartinF/jQuery.Autosize.Input</a></p>\n\n<p>It uses the same approach as James answer but have some of the changes mentioned in the comments.</p>\n\n<p>You can see an live example here: <a href=\"http://jsfiddle.net/mJMpw/6/\">http://jsfiddle.net/mJMpw/6/</a></p>\n\n<p>Example:</p>\n\n<pre><code>&lt;input type=\"text\" value=\"\" placeholder=\"Autosize\" data-autosize-input='{ \"space\": 40 }' /&gt;\n\ninput[type=\"data-autosize-input\"] {\n  width: 90px;\n  min-width: 90px;\n  max-width: 300px;\n  transition: width 0.25s;    \n}\n</code></pre>\n\n<p>You just use css to set min/max-width and use a transition on the width if you want a nice effect.</p>\n\n<p>You can specify the space / distance to the end as the value in json notation for the data-autosize-input attribute on the input element.</p>\n\n<p>Of course you can also just initialize it using jQuery</p>\n\n<pre><code>$(\"selector\").autosizeInput();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Awsome plugin James ! Thanks. I did add the check suggestion in the end by JP though very effective . </p>\n\n<p>Also I added a some changes on my part.\nI wanted to set the size for the input to the maximum size if the changed width exceeded the maxWidth so I added :</p>\n\n<pre><code>else if (widthexceeds){\n    input.width(o.maxWidth);\n}\n</code></pre>\n\n<p>below the if check for isValidWidthChange where <code>widthexceeds = newWidth &gt; o.maxWidth</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have create a plugin for the input of type text, that recreates this behaviour. It has some other unique features. You can see an <a href=\"http://static.jortech.com.ve/easyText/jQuery/demo/\" rel=\"nofollow\">example</a> and view the <a href=\"http://ajorquera.github.io/jQuery-EasyText/\" rel=\"nofollow\">documentation</a> of the plugin. @james answer has some problems with pasting large text into the input. To fix it, I have made some modifications to his code. Here is a <a href=\"http://jsfiddle.net/ajorquera/p3YU6/embedded/result/\" rel=\"nofollow\">demo</a>, for this example.</p>\n\n<pre><code>(function($){        \n    $.fn.autoGrowInput = function(o) {\n\n        o = $.extend({\n            maxWidth: 200,\n            minWidth: 1,\n            comfortZone: 1,\n          width: 1\n        }, o);\n\n        this.filter('input:text').each(function(){\n\n            var minWidth = o.minWidth || $(this).width(),\n                maxWidth = o.maxWidth,\n                val = '',\n                input = $(this),\n                testSubject = $('&lt;tester/&gt;').css({\n                    position: 'absolute',\n                    top: -9999,\n                    left: -9999,\n                    width: 'auto',\n                    fontSize: input.css('fontSize'),\n                    fontFamily: input.css('fontFamily'),\n                    fontWeight: input.css('fontWeight'),\n                    letterSpacing: input.css('letterSpacing'),\n                    whiteSpace: 'nowrap'\n                }),\n                check = function() {\n\n                    if (val === (val = input.val())) {return;}\n\n                    // Enter new content into testSubject\n                    var escaped = val.replace(/&amp;/g, '&amp;amp;').replace(/\\s/g,'&amp;nbsp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\n                    testSubject.html(escaped);\n\n                    // Calculate new width + whether to change\n                    var testerWidth = testSubject.width(),\n                    newWidth = testerWidth + o.comfortZone,\n                    currentWidth = input.width();\n\n                   if (testerWidth &lt; minWidth) {\n                       newWidth = minWidth;\n                   } else if (testerWidth &gt; maxWidth) {\n                       newWidth = maxWidth;\n                   } \n\n                   input.width(newWidth + o.comfortZone);  \n            };\n\n            testSubject.insertAfter(input);\n\n            $(this).bind('input', check);\n\n        });\n\n        return this;\n\n    };\n\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a found various plugins for autogrowing a <em>textarea</em>, but not input text fields. Does anybody know if any exist?</p>\n",
            "last_activity_date": 1423228234,
            "question_id": 931207,
            "score": 55,
            "tags": [
                "javascript",
                "jquery",
                "scripting"
            ],
            "title": "Is there a jQuery autogrow plugin for text fields?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p><code>test = $.extend([], [['a', ['c']], 'b'])</code></p>\n\n<p>That should do it for you.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Copying a native JS Array is easy. Use the <a href=\"http://www.devguru.com/Technologies/Ecmascript/Quickref/Slice.html\">Array.slice()</a> method which creates a copy of part/all of the array.</p>\n\n<pre><code>var foo = ['a','b','c','d','e'];\nvar bar = foo.slice();\n</code></pre>\n\n<p>now foo and bar are 5 member arrays of 'a','b','c','d','e'</p>\n\n<p>of course bar is a copy, not a reference... so if you did this next...</p>\n\n<pre><code>bar.push('f');\nalert('foo:' + foo.join(', '));\nalert('bar:' + bar.join(', '));\n</code></pre>\n\n<p>you would now get:</p>\n\n<pre><code>foo:a, b, c, d, e\nbar:a, b, c, d, e, f\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I've come across this \"deep object copy\" function that I've found handy for duplicating objects by value. It doesn't use jQuery, but it certainly is deep.</p>\n\n<p><a href=\"http://www.overset.com/2007/07/11/javascript-recursive-object-copy-deep-object-copy-pass-by-value/\" rel=\"nofollow\">http://www.overset.com/2007/07/11/javascript-recursive-object-copy-deep-object-copy-pass-by-value/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Everything in JavaScript is pass by reference, so if you want a true deep copy of the objects in the array, the best method I can think of is to serialize the entire array to JSON and then de-serialize it back.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Since Array.slice() does not do deep copying, it is not suitable for multidimensional arrays:</p>\n\n<pre><code>var a =[[1], [2], [3]];\nvar b = a.slice();\n\nb.shift().shift();\n// a is now [[], [2], [3]]\n</code></pre>\n\n<p>Note that although I've used <code>shift().shift()</code> above, the point is just that <em><code>b[0][0]</code> contains a pointer to <code>a[0][0]</code></em> rather than a value.  </p>\n\n<p>Likewise <code>delete(b[0][0])</code> also causes  <code>a[0][0]</code> to be deleted and <code>b[0][0]=99</code> also changes the value of <code>a[0][0]</code> to 99.</p>\n\n<p>jQuery's <code>extend</code> method <em>does</em> perform a deep copy when a true value is passed as the initial argument:</p>\n\n<pre><code>var a =[[1], [2], [3]];\nvar b = $.extend(true, [], a);\n\nb.shift().shift();\n// a is still [[1], [2], [3]]\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 189
                },
                {
                    "body": "<p>I plan on releasing this code in the next version of <a href=\"http://jpaq.org/\" rel=\"nofollow\">jPaq</a>, but until then, you can use this if your goal is to do a deep copy of arrays:</p>\n\n<pre><code>Array.prototype.clone = function(doDeepCopy) {\n    if(doDeepCopy) {\n        var encountered = [{\n            a : this,\n            b : []\n        }];\n\n        var item,\n            levels = [{a:this, b:encountered[0].b, i:0}],\n            level = 0,\n            i = 0,\n            len = this.length;\n\n        while(i &lt; len) {\n            item = levels[level].a[i];\n            if(Object.prototype.toString.call(item) === \"[object Array]\") {\n                for(var j = encountered.length - 1; j &gt;= 0; j--) {\n                    if(encountered[j].a === item) {\n                        levels[level].b.push(encountered[j].b);\n                        break;\n                    }\n                }\n                if(j &lt; 0) {\n                    encountered.push(j = {\n                        a : item,\n                        b : []\n                    });\n                    levels[level].b.push(j.b);\n                    levels[level].i = i + 1;\n                    levels[++level] = {a:item, b:j.b, i:0};\n                    i = -1;\n                    len = item.length;\n                }\n            }\n            else {\n                levels[level].b.push(item);\n            }\n\n            if(++i == len &amp;&amp; level &gt; 0) {\n                levels.pop();\n                i = levels[--level].i;\n                len = levels[level].a.length;\n            }\n        }\n\n        return encountered[0].b;\n    }\n    else {\n        return this.slice(0);\n    }\n};\n</code></pre>\n\n<p>The following is an example of how to call this function to do a deep copy of a recursive array:</p>\n\n<pre><code>// Create a recursive array to prove that the cloning function can handle it.\nvar arrOriginal = [1,2,3];\narrOriginal.push(arrOriginal);\n\n// Make a shallow copy of the recursive array.\nvar arrShallowCopy = arrOriginal.clone();\n\n// Prove that the shallow copy isn't the same as a deep copy by showing that\n// arrShallowCopy contains arrOriginal.\nalert(\"It is \" + (arrShallowCopy[3] === arrOriginal)\n    + \" that arrShallowCopy contains arrOriginal.\");\n\n// Make a deep copy of the recursive array.\nvar arrDeepCopy = arrOriginal.clone(true);\n\n// Prove that the deep copy really works by showing that the original array is\n// not the fourth item in arrDeepCopy but that this new array is.\nalert(\"It is \"\n    + (arrDeepCopy[3] !== arrOriginal &amp;&amp; arrDeepCopy === arrDeepCopy[3])\n    + \" that arrDeepCopy contains itself and not arrOriginal.\");\n</code></pre>\n\n<p>You can play around with this code <a href=\"http://jsbin.com/jPaq-Array.clone/2\" rel=\"nofollow\">here at JS Bin</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you want to use pure JavaScript then try this:</p>\n\n<pre><code> var arr=[\"apple\",\"ball\",\"cat\",\"dog\"];\n var narr=[];\n\n for(var i=0;i&lt;arr.length;i++){\n     narr.push(arr[i]);\n }\n alert(narr); //output: apple,ball,vat,dog\n narr.push(\"elephant\");\n alert(arr); // output: apple,ball,vat,dog\n alert(narr); // apple,ball,vat,dog,elephant\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>how about complex types?\nwhen array contains objects... or any else</p>\n\n<p>My variant:</p>\n\n<pre><code>Object.prototype.copy = function(){\n    var v_newObj = {};\n    for(v_i in this)\n        v_newObj[v_i] = (typeof this[v_i]).contains(/^(array|object)$/) ? this[v_i].copy() : this[v_i];\n    return v_newObj;\n}\n\nArray.prototype.copy = function(){\n    var v_newArr = [];\n    this.each(function(v_i){\n        v_newArr.push((typeof v_i).contains(/^(array|object)$/) ? v_i.copy() : v_i);\n    });\n    return v_newArr;\n}\n</code></pre>\n\n<p>It's not final version, just an idea.</p>\n\n<p>PS: method each and contains are prototypes also.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-a-javascript-object\">What is the most efficient way to clone a JavaScript object?</a>  </p>\n</blockquote>\n\n\n\n<p>I need to copy an (ordered, not associative) array of objects. I'm using jQuery. I initially tried </p>\n\n<pre><code>jquery.extend({}, myArray)\n</code></pre>\n\n<p>but, naturally, this gives me back an object, where I need an array (really love jquery.extend, by the way).</p>\n\n<p>So, what's the best way to copy an array? </p>\n",
            "last_activity_date": 1345561843,
            "question_id": 565430,
            "score": 111,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "(Deep) copying an array using jQuery"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>There was a loosely related problem here <a href=\"http://stackoverflow.com/questions/33933/textarea-with-100-width-ignores-parent-elements-width-in-ie7\">http://stackoverflow.com/questions/33933/textarea-with-100-width-ignores-parent-elements-width-in-ie7</a>  </p>\n\n<p>Don't know if any conclusive solution was ever found, but it seems like the closest was <strong>word-break:break-all</strong> , which might do the job in Internet Exploder. </p>\n\n<p>I also found this <a href=\"http://petesbloggerama.blogspot.com/2007/02/firefox-ie-word-wrap-word-break-tables.html\" rel=\"nofollow\">http://petesbloggerama.blogspot.com/2007/02/firefox-ie-word-wrap-word-break-tables.html</a> buried in my bookmarks, which indicates a work around for most other browsers, which might help.</p>\n\n<p>CSS3 will be great if it ever gets here... </p>\n\n<p>Hope that helps, will be interested to see what you come up with. Sorry I can't offer anything tested or more specific.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>i've typically handled this using a combination of <code>word-wrap</code> and the <code>&lt;wbr&gt;</code> idea. note there are a few <a href=\"http://www.quirksmode.org/oddsandends/wbr.html\">variants</a>. as you can see, <code>&amp;#8203;</code> is probably your best bet for compatibility.</p>\n\n<p><code>word-wrap</code> browser support isn't <em>terrible</em>, all things considered, Safari, Internet Explorer, and Firefox 3.1 (Alpha Build) all support it (<a href=\"http://www.css3.info/preview/word-wrap/\">src</a>), so we may not be all that far off.</p>\n\n<p>in regards to the server side breakage, i've used this method pretty succesfully (php):</p>\n\n<pre><code>function _wordwrap($text)   {\n    $split = explode(\" \", $text);\n    foreach($split as $key=&gt;$value)   {\n        if (strlen($value) &gt; 10)    {\n            $split[$key] = chunk_split($value, 5, \"&amp;#8203;\");\n        }\n    }\n    return implode(\" \", $split);\n}\n</code></pre>\n\n<p>basically, for words over 10 characters, i split them at 5 characters each. this seems to work for all use cases i've been handed.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Using a regular expression in PHP should be faster to breakup long words.  I have created a function that handles htmlspecialchars and breaks up words with &amp;shy;  Here is the function for anyone who is interested.  Just pass the string, and the max word length (leave as 0 if you dont want to break up words with &amp;shy;) and it will return a string with html special chars converted and the words broken up with &amp;shy;</p>\n\n<pre><code>function htmlspecialchars2($string = \"\", $maxWordLength = 0)\n{\n\tif($maxWordLength &gt; 0)\n\t{\n\t\t$pattern = '/(\\S{'.$maxWordLength.',}?)/';\n\t\t$replacement = '$1&amp;shy;';\n\t\t$string = preg_replace($pattern, $replacement, $string);\n\t}\n\n\t//now encode special chars but dont encode &amp;shy;\n\t$string = preg_replace(array('/\\&amp;(?!shy\\;)/','/\\\"/',\"/\\'/\",'/\\&lt;/','/\\&gt;/'), array('&amp;amp;','&amp;quot;','&amp;#039;','&amp;lt;','&amp;gt;'), $string);\n\n\treturn $string;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use table layout +word-wrap CSS attribute which now works in IE7-8 and FF3.5. It will not solve the issue but at least your design will not be broken.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Css yo!</p>\n\n<pre><code>.wordwrap {\n    white-space: pre-wrap; /* css-3 */\n    white-space: -moz-pre-wrap; /* Mozilla, since 1999 */\n    white-space: -pre-wrap; /* Opera 4-6 */\n    white-space: -o-pre-wrap; /* Opera 7 */\n    word-wrap: break-word; /* Internet Explorer 5.5+ */ \n}\n</code></pre>\n\n<p>Also I just found this article\n<a href=\"http://www.impressivewebs.com/word-wrap-css3/\">http://www.impressivewebs.com/word-wrap-css3/</a></p>\n\n<p>So you should use</p>\n\n<pre><code>.wordwrap {  \n    word-wrap: break-word;\n}  \n\n.no_wordwrap {  \n    word-wrap: normal;\n}  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>use  <strong>white-space:normal</strong>   in css if need to wrap text automatically according to height and width of the component to display hope this may be help full to u .</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Very similar to Owen's answer, this achieves the same thing server-side in one line:  </p>\n\n<pre><code>return preg_replace_callback( '/\\w{10,}/', create_function( '$matches', 'return chunk_split( $matches[0], 5, \"&amp;#8203;\" );' ), $value );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm looking for a cross-browser way of wrapping long portions of text that have no breaking spaces (e.g. long URLs) inside of divs with pre-determined widths.</p>\n\n<p>Here are some solutions I've found around the web and why they <strong>don't</strong> work for me:</p>\n\n<ul>\n<li><strong>overflow : hidden / auto / scroll</strong> - I need the entire text to be visible without scrolling. The div can grow vertically, but not horizontally.</li>\n<li><strong>Injecting &amp;shy; into the string</strong> via js / server-side - &amp;shy; is supported by FF3 now, but copying and pasting a URL with a &amp;shy; in the middle will not work in Safari. Also, to my knowledge, there isn't a clean method of measuring text width to find out the best string offsets to add these characters to (there's one hacky way, see next item). Another problem is that zooming in Firefox and Opera can easily break this.</li>\n<li><strong>dumping text into a hidden element and measuring offsetWidth</strong> - related to the item above, it requires adding extra characters into the string. Also, measuring the amount of breaks required in a long body of text could easily require thousands of expensive DOM insertions (one for every substring length), which could effectively freeze the site.</li>\n<li><strong>using a monospace font</strong> - again, zooming can mess up width calculations, and the text can't be styled freely.</li>\n</ul>\n\n<p>Things that look promising but are not quite there:</p>\n\n<ul>\n<li><strong>word-wrap : break-word</strong> - it's now <a href=\"http://www.w3.org/TR/css3-text/#word-wrap\">part of CSS3 working draft</a>, but it's not supported by either Firefox, Opera or Safari yet. This would be the ideal solution if it worked across all browsers today :(</li>\n<li><strong>injecting &lt;wbr&gt; tags into the string</strong> via js/ server-side - copying and pasting URLs works in all browsers, but I still don't have a good way of measuring where to put the breaks. Also, this tag invalidates HTML.</li>\n<li><strong>adding breaks after every character</strong> - it's better than thousands of DOM insertions, but still not ideal (adding DOM elements to a document eats memory and slows downs selector queries, among other things).</li>\n</ul>\n\n<p>Does anyone have more ideas on how to tackle this problem?</p>\n",
            "last_activity_date": 1368310676,
            "question_id": 322929,
            "score": 38,
            "tags": [
                "javascript",
                "css"
            ],
            "title": "word wrap in css / js"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>See this:</p>\n\n<p><a href=\"http://www.mattfarina.com/2007/02/01/preloading_images_with_jquery\" rel=\"nofollow\">http://www.mattfarina.com/2007/02/01/preloading_images_with_jquery</a></p>\n\n<p>Related question on SO:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/775008/jquery-hidden-preload/775084#775084\">http://stackoverflow.com/questions/775008/jquery-hidden-preload/775084#775084</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Unfortunately, that depends on your purpose.\nIf you plan to use the images for purposes of style, your best bet is to use sprites.\n<a href=\"http://www.alistapart.com/articles/sprites2\">http://www.alistapart.com/articles/sprites2</a></p>\n\n<p>However, if you plan to use the images in &lt;img&gt; tags, then you'll want to pre-load them with </p>\n\n<pre><code>function preload(sources)\n{\n  var images = [];\n  for (i = 0, length = sources.length; i &lt; length; ++i) {\n    images[i] = new Image();\n    images[i].src = sources[i];\n  }\n}\n</code></pre>\n\n<p>(modified source taken from <a href=\"http://stackoverflow.com/questions/761263/what-is-the-best-way-to-preload-multiple-images-in-javascript/761332\">What is the best way to preload multiple images in JavaScript?</a>)</p>\n\n<p>using <code>new Image()</code> does not involve the expense of using DOM methods but a new request for the image specified will be added to the queue. As the image is, at this point, not actually added to the page, there is no re-rendering involved. I would recommend, however, adding this to the end of your page (as all of your scripts should be, when possible) to prevent it from holding up more critical elements. </p>\n\n<p>Edit: Edited to reflect comment quite correctly pointing out that separate <code>Image</code> objects are required to work properly. Thanks, and my bad for not checking it more closely.</p>\n\n<p>Edit2: edited to make the reusability more obvious</p>\n\n<p><strong>Edit 3 (3 years later):</strong></p>\n\n<p>Due to changes in how browsers handle non-visible images (display:none or, as in this answer, never appended to the document) a new approach to pre-loading is preferred. </p>\n\n<p>You can use an Ajax request to force early retrieval of images. Using jQuery, for example:</p>\n\n<pre><code>jQuery.get(source);\n</code></pre>\n\n<p>Or in the context of our previous example, you could do:</p>\n\n<pre><code>function preload(sources)\n{\n  jQuery.each(sources, function(i,source) { jQuery.get(source); });\n}\n</code></pre>\n\n<p>Note that this doesn't apply to the case of sprites which are fine as-is. This is just for things like photo galleries or sliders/carousels with images where the images aren't loading because they are not visible initially. </p>\n\n<p>Also note that this method does not work for IE (ajax is normally not used to retrieve image data).</p>\n",
                    "is_accepted": true,
                    "score": 53
                },
                {
                    "body": "<p><strong>Spriting</strong></p>\n\n<p>As others have mentioned, spriting works quite well for a variety of reasons, however, it's not as good as its made out to be.</p>\n\n<ul>\n<li>On the upside, you end up making only one HTTP request for your images. YMMV though.</li>\n<li>On the down side you are loading everything in one HTTP request. Since most current browsers are limited to 2 concurrent connections the image request can block other requests. Hence YMMV and something like your menu background might not render for a bit.</li>\n<li>Multiple images share the same color palette so there is some saving but this is not always the case and even so it's negligible.</li>\n<li>Compression is improved because there is more shared data between images.</li>\n</ul>\n\n<p>Dealing with irregular shapes is tricky though. Combining all new images into the new one is another annoyance.</p>\n\n<p><strong>Low jack approach using &lt;img&gt; tags</strong></p>\n\n<p>If you are looking for the <strong>most definitive</strong> solution then you should go with the low-jack approach which I still prefer. Create &lt;img&gt; links to the images at the end of your document and set the <code>width</code> and <code>height</code> to 1x1 pixel and additionally put them in a hidden div. If they are at the end of the page, they will be loaded after other content.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>In my opinion, using Multipart XMLHttpRequest introduced by some libraries will be a preferred solution in the following years. However IE &lt; v8, still don't support data:uri (even IE8 has limited support, allowing up to 32kb). Here is an implementation of parallel image preloading - <a href=\"http://code.google.com/p/core-framework/wiki/ImagePreloading\" rel=\"nofollow\">http://code.google.com/p/core-framework/wiki/ImagePreloading</a> , it's bundled in framework but still worth taking a look. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As of January 2013 none of the methods described here worked for me, so here's what did instead, tested and working with Chrome 25 and Firefox 18. Uses jQuery and <a href=\"https://github.com/desandro/imagesloaded\">this plugin</a> to work around the load event quirks:</p>\n\n<pre><code>function preload(sources, callback) {\n    if(sources.length) {\n        var preloaderDiv = $('&lt;div style=\"display: none;\"&gt;&lt;/div&gt;').prependTo(document.body);\n\n        $.each(sources, function(i,source) {\n            $(\"&lt;img/&gt;\").attr(\"src\", source).appendTo(preloaderDiv);\n\n            if(i == (sources.length-1)) {\n                $(preloaderDiv).imagesLoaded(function() {\n                    $(this).remove();\n                    if(callback) callback();\n                });\n            }\n        });\n    } else {\n        if(callback) callback();\n    }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>preload(['/img/a.png', '/img/b.png', '/img/c.png'], function() { \n    console.log(\"done\"); \n});\n</code></pre>\n\n<p>Note that you'll get mixed results if the cache is disabled, which it is by default on Chrome when the developer tools are open, so keep that in mind.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here goes my simple solution with a fade in on the image after it is loaded.</p>\n\n<pre><code>    function preloadImage(_imgUrl, _container){\n        var image = new Image();\n            image.src = _imgUrl;\n            image.onload = function(){\n                $(_container).fadeTo(500, 1);\n            };\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For my use case I had a carousel with full screen images that I wanted to preload. However since the images display in order, and could take a few seconds each to load, it's important that I load them in order, sequentially.</p>\n\n<p>For this I used the async library's <code>waterfall()</code> method (<a href=\"https://github.com/caolan/async#waterfall\" rel=\"nofollow\">https://github.com/caolan/async#waterfall</a>)</p>\n\n<pre><code>        // Preload all images in the carousel in order.\n        image_preload_array = [];\n        $('div.carousel-image').each(function(){\n            var url = $(this).data('image-url');\n            image_preload_array.push(function(callback) {\n                var $img = $('&lt;img/&gt;')\n                $img.load(function() {\n                    callback(null);\n                })[0].src = url;\n            });\n        });\n        async.waterfall(image_preload_array);\n</code></pre>\n\n<p>This works by creating an array of functions, each function is passed the parameter <code>callback()</code> which it needs to execute in order to call the next function in the array. The first parameter of <code>callback()</code> is an error message, which will exit the sequence if a non-null value is provided, so we pass null each time.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm fully aware that this question has been asked and answered everywhere, both on SO and off. However, every time there seems to be a different answer, e.g. <a href=\"http://stackoverflow.com/questions/761263/what-is-the-best-way-to-preload-multiple-images-in-javascript/761332#761332\">this</a>, <a href=\"http://stackoverflow.com/questions/257550/php-ajax-best-practice-for-pre-loading-images/257594#257594\">this</a> and <a href=\"http://stackoverflow.com/questions/476679/preloading-images-with-jquery/476681#476681\">that</a>.</p>\n\n<p>I don't care whether it's using jQuery or not - what's important is that it works, and is cross-browser.]</p>\n\n<p>So, what is the best way to preload images?</p>\n",
            "last_activity_date": 1411441989,
            "question_id": 901677,
            "score": 34,
            "tags": [
                "javascript",
                "jquery",
                "image-preloader"
            ],
            "title": "The definitive best way to preload images using JavaScript/jQuery?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>That's desired behavior, you should define the model in the controller, not in the view.</p>\n\n<pre><code>&lt;div ng-controller=\"Main\"&gt;\n  &lt;input type=\"text\" ng-model=\"rootFolders\"&gt;\n&lt;/div&gt;\n\n\nfunction Main($scope) {\n  $scope.rootFolders = 'bob';\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 85
                },
                {
                    "body": "<p>Vojta described the \"Angular way\", but if you really need to make this work, @urbanek recently posted a workaround using ng-init:</p>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"rootFolders\" ng-init=\"rootFolders='Bob'\" value=\"Bob\"&gt;\n</code></pre>\n\n<p><a href=\"https://groups.google.com/d/msg/angular/Hn3eztNHFXw/wk3HyOl9fhcJ\">https://groups.google.com/d/msg/angular/Hn3eztNHFXw/wk3HyOl9fhcJ</a></p>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p><strong>Update:</strong> My original answer involved having the controller contain DOM-aware code, which breaks Angular conventions in favor of HTML.  @dmackerman mentioned directives in a comment on my answer, and I completely missed that until just now.  With that input, here's the <em>right</em> way to do this without breaking Angular <strong>or</strong> HTML conventions:</p>\n\n<hr>\n\n<p>There's also a way to get both - grab the value of the element and use that to update the model in a directive:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-controller=\"Main\"&gt;\n    &lt;input type=\"text\" id=\"rootFolder\" ng-model=\"rootFolders\" disabled=\"disabled\" value=\"Bob\" size=\"40\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>and then:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.directive('input', ['$parse', function ($parse) {\n    return {\n        restrict: 'E',\n        require: '?ngModel',\n        link: function (scope, element, attrs) {\n            if(attrs.value) {\n                $parse(attrs.ngModel).assign(scope, attrs.value);\n            }\n        }\n    };\n}]);\n</code></pre>\n\n<p>You can of course modify the above directive to do more with the <code>value</code> attribute before setting the model to its value, including using <code>$parse(attrs.value, scope)</code> to treat the <code>value</code> attribute as an Angular expression (though I'd probably use a different [custom] attribute for that, personally, so the standard HTML attributes are consistently treated as constants).</p>\n\n<p>Also, there is a similar question over at <a href=\"http://stackoverflow.com/questions/14489547\">Making data templated in available to ng-model</a> which may also be of interest.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Overriding the input directive does seem to do the job. I made some minor alterations to <a href=\"http://stackoverflow.com/users/1973492/dan-hunsaker\">Dan Hunsaker</a>'s code:</p>\n\n<ul>\n<li>Added a check for ngModel before trying to use $parse().assign() on fields without a ngModel attributes.</li>\n<li>Corrected the assign() function param order.</li>\n</ul>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.directive('input', function ($parse) {\n  return {\n    restrict: 'E',\n    require: '?ngModel',\n    link: function (scope, element, attrs) {\n      if (attrs.ngModel &amp;&amp; attrs.value) {\n        $parse(attrs.ngModel).assign(scope, attrs.value);\n      }\n    }\n  };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<h2>The Angular way</h2>\n\n<p>The correct Angular way to do this is to write a single page app, AJAX in the form template, then populate it dynamically from the model. The model is not populated from the form by default because the model is the single source of truth. Instead Angular will go the other way and try to populate the form from the model.</p>\n\n<h2>If however, you don't have time to start over from scratch</h2>\n\n<p>If you have an app written, this might involve some fairly hefty architectural changes. If you're trying to use Angular to enhance an existing form, rather than constructing an entire single page app from scratch, you can pull the value from the form and store it in the scope at link time using a directive. Angular will then bind the value in the scope back to the form and keep it in sync.</p>\n\n<h2>Using a directive</h2>\n\n<p>You can use a relatively simple directive to pull the value from the form and load it in to the current scope. Here I've defined an initFromForm directive.</p>\n\n<pre><code>var myApp = angular.module(\"myApp\", ['initFromForm']);\n\nangular.module('initFromForm', [])\n  .directive(\"initFromForm\", function ($parse) {\n    return {\n      link: function (scope, element, attrs) {\n        var attr = attrs.initFromForm || attrs.ngModel || element.attrs('name'),\n        val = attrs.value;\n        $parse(attr).assign(scope, val)\n      }\n    };\n  });\n</code></pre>\n\n<p>You can see I've defined a couple of fallbacks to get a model name. You can use this directive in conjunction with the ngModel directive, or bind to something other than $scope if you prefer.</p>\n\n<p>Use it like this:</p>\n\n<pre><code>&lt;input name=\"test\" ng-model=\"toaster.test\" value=\"hello\" init-from-form /&gt;\n{{toaster.test}}\n</code></pre>\n\n<p>Note this will also work with textareas, and select dropdowns.</p>\n\n<pre><code>&lt;textarea name=\"test\" ng-model=\"toaster.test\" init-from-form&gt;hello&lt;/textarea&gt;\n{{toaster.test}}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This is a slight modification to the earlier answers...</p>\n\n<p>There is no need for $parse</p>\n\n<pre><code>angular.directive('input', [function () {\n  'use strict';\n\n  var directiveDefinitionObject = {\n    restrict: 'E',\n    require: '?ngModel',\n    link: function postLink(scope, iElement, iAttrs, ngModelController) {\n      if (iAttrs.value &amp;&amp; ngModelController) {\n        ngModelController.$setViewValue(iAttrs.value);\n      }\n    }\n  };\n\n  return directiveDefinitionObject;\n}]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Using AngularJS if I set a simple input text box value to something like \"bob\" below.  The value does not display if the <code>ng-model</code> attribute is added.</p>\n\n<pre><code>    &lt;input type=\"text\"\n           id=\"rootFolder\"\n           ng-model=\"rootFolders\"\n           disabled=\"disabled\"\n           value=\"Bob\"\n           size=\"40\"/&gt;\n</code></pre>\n\n<p>Anyone know of a simple work around to default this input to something and keep the <code>ng-model</code>? I tried to use a <code>ng-bind</code> with the default value but that seems not to work either.</p>\n",
            "last_activity_date": 1414470360,
            "question_id": 10610282,
            "score": 74,
            "tags": [
                "javascript",
                "html",
                "html5",
                "angularjs"
            ],
            "title": "AngularJS - Value attribute on an input text box is ignored when there is a ng-model used?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p><a href=\"http://www.techrepublic.com/article/detect-foreign-language-support-using-javascript/\" rel=\"nofollow\">This article</a> suggests the following properties of the browser's <strong>navigator</strong> object:</p>\n\n<ul>\n<li>navigator.language (Netscape - Browser Localization)</li>\n<li>navigator.browserLanguage (IE-Specific - Browser Localized Language)</li>\n<li>navigator.systemLanguage (IE-Specific - Windows OS - Localized Language)</li>\n<li>navigator.userLanguage</li>\n</ul>\n\n<p>Roll these into a javascript function and you should be able to guess the right language, in most circumstances. Be sure to degrade gracefully, so have a div containing your language choice links, so that if there is no javascript or the method doesn't work, the user can still decide. If it does work, just hide the div.</p>\n\n<p>The only problem with doing this on the client side is that either you serve up <em>all</em> the languages to the client, or you have to wait until the script has run and detected the language before requesting the right version. Perhaps serving up the most popular language version as a default would irritate the fewest people.</p>\n\n<p>Edit: I'd second Ivan's cookie suggestion, but make sure the user can always change the language later; not everyone prefers the language their browser defaults to.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The proper way is to look at the HTTP <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">Accept-Language</a> header sent to the server. This contains the ordered, weighted list of languages the user has configured their browser to prefer.</p>\n\n<p>Unfortunately this header is not available for reading inside JavaScript; all you get is <code>navigator.language</code>, which tells you what localised version of the web browser was installed. This is not necessarily the same thing as the user's preferred language(s). On IE you instead get <code>systemLanguage</code> (OS installed language), <code>browserLanguage</code> (same as <code>language</code>) and <code>userLanguage</code> (user configured OS region), which are all similarly unhelpful.</p>\n\n<p>If I had to choose between those properties, I'd sniff for <code>userLanguage</code> first, falling back to <code>language</code> and only after that (if those didn't match any available language) looking at <code>browserLanguage</code> and finally <code>systemLanguage</code>.</p>\n\n<p>If you can put a server-side script somewhere else on the net that simply reads the Accept-Language header and spits it back out as a JavaScript file with the header value in the string, eg.:</p>\n\n<pre><code>var acceptLanguage= 'en-gb,en;q=0.7,de;q=0.3';\n</code></pre>\n\n<p>then you could include a &lt;script src> pointing at that external service in the HTML, and use JavaScript to parse the language header. I don't know of any existing library code to do this, though, since Accept-Language parsing is almost always done on the server side.</p>\n\n<p>Whatever you end up doing, you certainly need a user override because it will always guess wrong for some people. Often it's easiest to put the language setting in the URL (eg. http\u200b://www.example.com/en/site vs http\u200b://www.example.com/de/site), and let the user click links between the two. Sometimes you do want a single URL for both language versions, in which case you have to store the setting in cookies, but this may confuse user agents with no support for cookies and search engines.</p>\n",
                    "is_accepted": true,
                    "score": 50
                }
            ],
            "body": "<p>I have a website (Flash) localized into a dozen of languages and I want to auto-define a default value depending on the user's browser settings in order to minimize the steps to access the content.</p>\n\n<p>FYI, I cannot use server-scripts due to proxy restrictions, so I guess JavaScript or ActionScript would be appropriate to solve the problem.</p>\n\n<p><strong>Questions:</strong></p>\n\n<ol>\n<li><p>What would be the best method to 'guess' the user's locale ? </p></li>\n<li><p>Are there any existing simple classes/functions that could help me out (no complex localization bundles) ? Specially to break down all the possible languages into a smaller number (the translations I have) on a smart way .</p></li>\n<li><p>To which point can I trust such a solution ?</p></li>\n<li><p>Any other workarounds or suggestions ?</p></li>\n</ol>\n\n<p>Thanks in advance!</p>\n",
            "last_activity_date": 1408922676,
            "question_id": 673905,
            "score": 40,
            "tags": [
                "javascript",
                "flash",
                "browser",
                "localization"
            ],
            "title": "Best way to determine user&#39;s locale within browser"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Your selectors don't seem to match. Does your element have an ID of 'first', or is it the first element in every div?</p>\n\n<p>A safer solution would be to use 'this':</p>\n\n<pre><code>// assuming the div you want to animate has an ID of first\n$('#first').click(function() {\n  $(this).animate({ height : 'auto' }, 1000);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<ol>\n<li><p>Save the current height:</p>\n\n<pre><code>var curHeight = $('#first').height();\n</code></pre></li>\n<li><p>Temporarily switch the height to auto:</p>\n\n<pre><code>$('#first').css('height', 'auto');\n</code></pre></li>\n<li><p>Get the auto height:</p>\n\n<pre><code>var autoHeight = $('#first').height();\n</code></pre></li>\n<li><p>Switch back to <code>curHeight</code> and animate to <code>autoHeight</code>:</p>\n\n<pre><code>$('#first').height(curHeight).animate({height: autoHeight}, 1000);\n</code></pre></li>\n</ol>\n\n<p>And together:</p>\n\n<pre><code>var el = $('#first'),\n    curHeight = el.height(),\n    autoHeight = el.css('height', 'auto').height();\nel.height(curHeight).animate({height: autoHeight}, 1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 156
                },
                {
                    "body": "<p>Try this one ,</p>\n\n<pre><code>var height;\n$(document).ready(function(){\n    $('#first').css('height','auto');\n    height = $('#first').height();\n    $('#first').css('height','200px');\n})\n\n $(\"div:first\").click(function(){\n  $(\"#first\").animate({\n    height: height\n  }, 1000 );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I managed to fix it :D heres the code.</p>\n\n<pre><code>var divh = document.getElementById('first').offsetHeight;\n$(\"#first\").css('height', '100px');\n$(\"div:first\").click(function() {\n  $(\"#first\").animate({\n    height: divh\n  }, 1000);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>A better solution would not rely on JS to set the height of your element. The following is a solution that animates a fixed height element to full (\"auto\") height:</p>\n\n<pre><code>var $selector = $('div');\n    $selector\n        .data('oHeight',$selector.height())\n        .css('height','auto')\n        .data('nHeight',$selector.height())\n        .height($selector.data('oHeight'))\n        .animate({height: $selector.data('nHeight')},400);\n</code></pre>\n\n<p><a href=\"https://gist.github.com/2023150\" rel=\"nofollow\">https://gist.github.com/2023150</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<pre><code>var h = document.getElementById('First').scrollHeight;\n$('#First').animate({ height : h+'px' },300);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Use <a href=\"http://api.jquery.com/slideDown/\">slideDown</a> and <a href=\"http://api.jquery.com/slideUp/\">slideUp</a></p>\n\n<pre><code>$(\"div:first\").click(function(){ $(\"#first\").slideDown(1000); });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>this is working and it is simplier then solutions before:</p>\n\n<p>CSS:</p>\n\n<pre><code>#container{\n  height:143px;  \n}\n\n.max{\n  height: auto;\n  min-height: 143px;\n}\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"#container\").click(function() {      \n        if($(this).hasClass(\"max\")) {\n            $(this).removeClass(\"max\",250);\n        } else {\n            $(this).addClass(\"max\",250);\n        }\n\n    })\n});\n</code></pre>\n\n<p>Note: This solution requires jQuery UI </p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can always wrap the child elements of #first and save height height of the wrapper as a variable. This might not be the prettiest or most efficient answer, but it does the trick.</p>\n\n<p>Here's a <a href=\"http://jsfiddle.net/fPTPj/2/\">fiddle</a> where I included a reset.</p>\n\n<p>but for your purposes, here's the meat &amp; potatoes:</p>\n\n<pre><code>$(function(){\n//wrap everything inside #first\n$('#first').children().wrapAll('&lt;div class=\"wrapper\"&gt;&lt;/div&gt;');\n//get the height of the wrapper \nvar expandedHeight = $('.wrapper').height();\n//get the height of first (set to 200px however you choose)\nvar collapsedHeight = $('#first').height();\n//when you click the element of your choice (a button in my case) #first will animate to height auto\n$('button').click(function(){\n    $(\"#first\").animate({\n        height: expandedHeight            \n    })\n});\n});\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is basically the same approach as the answer by Box9 but I wrapped it in a nice <strong>jquery plugin</strong> that <strong>takes the same arguments as a regular animate</strong>, for when you need to have more animated parameters and get tired of repeating the same code over and over:</p>\n\n<pre><code>;(function($)\n{\n  $.fn.animateToAutoHeight = function(){\n  var curHeight = this.css('height'),\n      height = this.css('height','auto').height(),\n      duration = 200,\n      easing = 'swing',\n      callback = $.noop,\n      parameters = { height: height };\n  this.css('height', curHeight);\n  for (var i in arguments) {\n    switch (typeof arguments[i]) {\n      case 'object':\n        parameters = arguments[i];\n        parameters.height = height;\n        break;\n      case 'string':\n        if (arguments[i] == 'slow' || arguments[i] == 'fast') duration = arguments[i];\n        else easing = arguments[i];\n        break;\n      case 'number': duration = arguments[i]; break;\n      case 'function': callback = arguments[i]; break;\n    }\n  }\n  this.animate(parameters, duration, easing, function() {\n    $(this).css('height', 'auto');\n    callback.call(this, arguments);\n  });\n  return this;\n  }\n})(jQuery);\n</code></pre>\n\n<p><strong>edit:</strong> chainable and cleaner now</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>I am posting this answer even though this thread is old. I couldn't get the accepted answer to work for me. This one works well and is pretty simple.</p>\n\n<p>I load the height of each div I want into the data</p>\n\n<pre><code>$('div').each(function(){\n    $(this).data('height',$(this).css('height'));\n    $(this).css('height','20px');\n});\n</code></pre>\n\n<p>Then I just use that when animating on click.</p>\n\n<pre><code>$('div').click(function(){\n    $(this).css('height',$(this).data('height'));\n});\n</code></pre>\n\n<p>I am using CSS transition, so I don't use the jQuery animate, but you could do animate just the same.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You might be able to solve it with pure css and toggling some classes, please refer to: <a href=\"http://stackoverflow.com/questions/3508605/css-transition-height-0-to-height-auto\">CSS transition height: 0; to height: auto;</a></p>\n\n<p>I believe the max-height hack is brilliant</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can always do this: </p>\n\n<pre><code>jQuery.fn.animateAuto = function(prop, speed, callback){\nvar elem, height, width;\nreturn this.each(function(i, el){\n    el = jQuery(el), elem = el.clone().css({\"height\":\"auto\",\"width\":\"auto\"}).appendTo(\"body\");\n    height = elem.css(\"height\"),\n    width = elem.css(\"width\"),\n    elem.remove();\n\n    if(prop === \"height\")\n        el.animate({\"height\":height}, speed, callback);\n    else if(prop === \"width\")\n        el.animate({\"width\":width}, speed, callback);  \n    else if(prop === \"both\")\n        el.animate({\"width\":width,\"height\":height}, speed, callback);\n});  \n}\n</code></pre>\n\n<p>here is a fiddle:\n<a href=\"http://jsfiddle.net/Zuriel/faE9w/2/\" rel=\"nofollow\">http://jsfiddle.net/Zuriel/faE9w/2/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>here's the answer in case you're wondering:</p>\n\n<p><a href=\"http://glvconsulting.com/sandbox/codesamples/collapsiblecontent.html\" rel=\"nofollow\">http://glvconsulting.com/sandbox/codesamples/collapsiblecontent.html</a></p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>IMO this is the cleanest and easiest solution:</p>\n\n<pre><code>$(\"#first\").animate({height: $(\"#first\").get(0).scrollHeight}, 1000 );\n</code></pre>\n\n<p>Explanation: The DOM already knows from its initial rendering what size the expanded div will have when set to auto height. This property is stored in the DOM node as <code>scrollHeight</code>. We just have to fetch the DOM Element from the jQuery Element by calling <code>get(0)</code> and then we can access the property.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You can use <a href=\"https://gist.github.com/timhettler/2023150\" rel=\"nofollow\">reveal.js</a></p>\n\n<pre><code>var $selector = $('div');\n$selector.data('oHeight',$selector.height()).css('height','auto').data('nHeight',$selector.height()).height($selector.data('oHeight')).animate({height: $selector.data('nHeight')},1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can store it in a data attribute.</p>\n\n<pre><code>$('.colapsable').each(function(){\n    $(this).attr('data-oheight',$(this).height());\n    $(this).height(100);\n});\n\n$('.colapsable h2:first-child').click(function(){\n    $(this).parent('.colapsable').animate({\n            height: $(this).parent('.colapsible').data('oheight')\n        },500);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h1>Here's one that works with BORDER-BOX ...</h1>\n\n<p>Hi guys. Here is a jQuery plugin I wrote to do the same, but also account for the height differences that will occur when you have <code>box-sizing</code> set to <code>border-box</code>. </p>\n\n<p>I also included a \"yShrinkOut\" plugin that hides the element by shrinking it along the y-axis.</p>\n\n<hr>\n\n<pre><code>// -------------------------------------------------------------------\n// Function to show an object by allowing it to grow to the given height value.\n// -------------------------------------------------------------------\n$.fn.yGrowIn = function (growTo, duration, whenComplete) {\n\n    var f = whenComplete || function () { }, // default function is empty\n        obj = this,\n        h = growTo || 'calc', // default is to calculate height\n        bbox = (obj.css('box-sizing') == 'border-box'), // check box-sizing\n        d = duration || 200; // default duration is 200 ms\n\n    obj.css('height', '0px').removeClass('hidden invisible');\n    var padTop = 0 + parseInt(getComputedStyle(obj[0], null).paddingTop), // get the starting padding-top\n        padBottom = 0 + parseInt(getComputedStyle(obj[0], null).paddingBottom), // get the starting padding-bottom\n        padLeft = 0 + parseInt(getComputedStyle(obj[0], null).paddingLeft), // get the starting padding-left\n        padRight = 0 + parseInt(getComputedStyle(obj[0], null).paddingRight); // get the starting padding-right\n    obj.css('padding-top', '0px').css('padding-bottom', '0px'); // Set the padding to 0;\n\n    // If no height was given, then calculate what the height should be.\n    if(h=='calc'){ \n        var p = obj.css('position'); // get the starting object \"position\" style. \n        obj.css('opacity', '0'); // Set the opacity to 0 so the next actions aren't seen.\n        var cssW = obj.css('width') || 'auto'; // get the CSS width if it exists.\n        var w = parseInt(getComputedStyle(obj[0], null).width || 0) // calculate the computed inner-width with regard to box-sizing.\n            + (!bbox ? parseInt((getComputedStyle(obj[0], null).borderRightWidth || 0)) : 0) // remove these values if using border-box.\n            + (!bbox ? parseInt((getComputedStyle(obj[0], null).borderLeftWidth || 0)) : 0) // remove these values if using border-box.\n            + (!bbox ? (padLeft + padRight) : 0); // remove these values if using border-box.\n        obj.css('position', 'fixed'); // remove the object from the flow of the document.\n        obj.css('width', w); // make sure the width remains the same. This prevents content from throwing off the height.\n        obj.css('height', 'auto'); // set the height to auto for calculation.\n        h = parseInt(0); // calculate the auto-height\n        h += obj[0].clientHeight // calculate the computed height with regard to box-sizing.\n            + (bbox ? parseInt((getComputedStyle(obj[0], null).borderTopWidth || 0)) : 0) // add these values if using border-box.\n            + (bbox ? parseInt((getComputedStyle(obj[0], null).borderBottomWidth || 0)) : 0) // add these values if using border-box.\n            + (bbox ? (padTop + padBottom) : 0); // add these values if using border-box.\n        obj.css('height', '0px').css('position', p).css('opacity','1'); // reset the height, position, and opacity.\n    };\n\n    // animate the box. \n    //  Note: the actual duration of the animation will change depending on the box-sizing.\n    //      e.g., the duration will be shorter when using padding and borders in box-sizing because\n    //      the animation thread is growing (or shrinking) all three components simultaneously.\n    //      This can be avoided by retrieving the calculated \"duration per pixel\" based on the box-sizing type,\n    //      but it really isn't worth the effort.\n    obj.animate({ 'height': h, 'padding-top': padTop, 'padding-bottom': padBottom }, d, 'linear', (f)());\n};\n\n// -------------------------------------------------------------------\n// Function to hide an object by shrinking its height to zero.\n// -------------------------------------------------------------------\n$.fn.yShrinkOut = function (d,whenComplete) {\n    var f = whenComplete || function () { },\n        obj = this,\n        padTop = 0 + parseInt(getComputedStyle(obj[0], null).paddingTop),\n        padBottom = 0 + parseInt(getComputedStyle(obj[0], null).paddingBottom),\n        begHeight = 0 + parseInt(obj.css('height'));\n\n    obj.animate({ 'height': '0px', 'padding-top': 0, 'padding-bottom': 0 }, d, 'linear', function () {\n            obj.addClass('hidden')\n                .css('height', 0)\n                .css('padding-top', padTop)\n                .css('padding-bottom', padBottom);\n            (f)();\n        });\n};\n</code></pre>\n\n<p>Any of the parameters I used can be omitted or set to null in order to accept default values. The parameters I used:</p>\n\n<ul>\n<li><strong>growTo:</strong> If you want to override all the calculations and set the CSS height to which the object will grow, use this parameter.</li>\n<li><strong>duration:</strong> The duration of the animation (<em>obviously</em>).</li>\n<li><strong>whenComplete:</strong> A function to run when the animation is complete.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Hi I want to animate a div from 200px to Auto height. I cant seem to make it work though - anyone know how?</p>\n\n<p><em>Here's the code:</em></p>\n\n<pre><code>$(\"div:first\").click(function(){\n  $(\"#first\").animate({\n    height: \"auto\"\n  }, 1000 );\n});\n</code></pre>\n",
            "last_activity_date": 1424067764,
            "question_id": 5003220,
            "score": 90,
            "tags": [
                "javascript",
                "jquery",
                "jquery-animate"
            ],
            "title": "JavaScript jQuery Animate to Auto Height"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can use jQuerys <a href=\"http://api.jquery.com/animate/\">.animate()</a>, <a href=\"http://api.jquery.com/offset/\">.offset()</a> and <code>scrollTop</code>. Like</p>\n\n<pre><code>$(document.body).animate({\n    'scrollTop':   $('#anchorName2').offset().top\n}, 2000);\n</code></pre>\n\n<p>example link: <a href=\"http://jsbin.com/unasi3/edit\">http://jsbin.com/unasi3/edit</a></p>\n\n<p>If you don't want to animate use <a href=\"http://api.jquery.com/scrollTop/\">.scrollTop()</a> like</p>\n\n<pre><code>$(document.body).scrollTop($('#anchorName2').offset().top);\n</code></pre>\n\n<p>or javascripts native <code>location.hash</code> like</p>\n\n<pre><code>location.hash = '#' + anchorid;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<pre><code>function scrollTo(hash) {\n    location.hash = \"#\" + hash;\n}\n</code></pre>\n\n<p>No jQuery required at all!</p>\n",
                    "is_accepted": true,
                    "score": 125
                },
                {
                    "body": "<p>Way simpler:</p>\n\n<pre><code>element_to_scroll_to = document.getElementById('anchorName2');\nelement_to_scroll_to.scrollIntoView();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<pre><code>$(document).ready -&gt;\n  $(\"a[href^='#']\").click -&gt;\n    $(document.body).animate\n      scrollTop: $($(this).attr(\"href\")).offset().top, 1000\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Great solution by jAndy, but the smooth scroll seems to be having issues working in firefox.</p>\n\n<p>Writing it this way works in Firefox as well.</p>\n\n<pre><code>(function($) {\n    $(document).ready(function() {\n         $('html, body').animate({\n           'scrollTop':   $('#anchorName2').offset().top\n         }, 2000);\n    });\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I know this is question is really old, but I found an easy and simple jQuery solution in <a href=\"http://css-tricks.com/snippets/jquery/smooth-scrolling/\" rel=\"nofollow\">css-tricks</a>. That's the one I'm using now.</p>\n\n<pre><code>$(function() {\n  $('a[href*=#]:not([href=#])').click(function() {\n    if (location.pathname.replace(/^\\//,'') == this.pathname.replace(/^\\//,'') &amp;&amp; location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');\n      if (target.length) {\n        $('html,body').animate({\n          scrollTop: target.offset().top\n        }, 1000);\n        return false;\n      }\n    }\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Most answers are unnecessarily complicated.</p>\n\n<p>If you just want to <strong>jump</strong> to the target anchor, you don't need javascript at all:</p>\n\n<pre><code># target element:\n&lt;a name=\"target\"&gt;&lt;/a&gt;\n\n# the link\n&lt;a href=\"#target\"&gt;Target&lt;/a&gt;\n</code></pre>\n\n<p>If you want to <strong>scroll to the target animatedly</strong>, please refer to @Shahil's answer.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Id like to make browser to scroll page to given anchor, just by using javascript.</p>\n\n<p>I have specified name or id attribute in my html code:</p>\n\n<pre><code> &lt;a name=\"anchorName\"&gt;..&lt;/a&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code> &lt;h1 id=\"anchorName2\"&gt;..&lt;/h1&gt;\n</code></pre>\n\n<p>I'd like get same effect as you get by navigating to <a href=\"http://server.com/path#anchorName\">http://server.com/path#anchorName</a>. The page should be scrolled so that the anchor is near top of visible part of page.</p>\n",
            "last_activity_date": 1424313651,
            "question_id": 3163615,
            "score": 72,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "scroll",
                "anchor"
            ],
            "title": "How to scroll HTML page to given anchor using jQuery or Javascript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>In raw Javascript, the best that you can do is using the few asynchronous calls (xmlhttprequest), but that's not really threading and very limited.  <a href=\"http://gears.google.com/\" rel=\"nofollow\">Google Gears</a> adds a number of APIs to the browser, some of which can be used for threading support.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's no true threading in JavaScript. JavaScript being the malleable language that it is, does allow you to emulate some of it. Here is an <a href=\"http://www.neilmix.com/2007/02/07/threading-in-javascript-17/\" rel=\"nofollow\">example</a> I came across the other day.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>See <a href=\"http://caniuse.com/#search=worker\">http://caniuse.com/#search=worker</a> for the most up-to-date support info.</p>\n\n<p>The following was the state of support circa 2009.</p>\n\n<hr>\n\n<p>The words you want to google for are <a href=\"http://www.google.com/search?q=JavaScript+worker+threads\">JavaScript Worker Threads</a></p>\n\n<p>Apart from from <a href=\"http://gears.google.com/\">Gears</a> there's nothing available right now, but there's plenty of talk about how to implement this so I guess watch this question as the answer will no doubt change in future.</p>\n\n<p>Here's the relevant documentation for Gears: <a href=\"http://code.google.com/apis/gears/api_workerpool.html\">WorkerPool API</a></p>\n\n<p>WHATWG has a Draft Recommendation for worker threads: <a href=\"http://www.whatwg.org/specs/web-workers/current-work/\">Web Workers</a></p>\n\n<p>And there's also Mozilla\u2019s <a href=\"https://wiki.mozilla.org/DOMWorkerThreads\">DOM Worker Threads</a></p>\n\n<hr>\n\n<p><strong>Update:</strong> June 2009, current state of browser support for JavaScript threads</p>\n\n<p><strong>Firefox 3.5</strong> has web workers. Some demos of web workers, if you want to see them in action: </p>\n\n<ul>\n<li><a href=\"http://blog.mozbox.org/post/2009/04/10/Web-Workers-in-action\">Simulated Annealing</a> (\"Try it\" link)</li>\n<li><a href=\"https://developer.mozilla.org/web-tech/2008/12/04/web-workers-part-2/\">Space Invaders</a> (link at end of post)</li>\n<li><a href=\"http://www.yafla.com/dforbes/Web_Workers_and_You__A_Faster_More_Powerful_JavaScript_World\">MoonBat JavaScript Benchmark</a> (first link)</li>\n</ul>\n\n<p>The Gears plugin can also be installed in Firefox.</p>\n\n<p><strong>Safari 4</strong>, and the <strong>WebKit nightlies</strong> have worker threads: </p>\n\n<ul>\n<li><a href=\"http://blog.owensperformance.com/2009/02/safari-4-worker-threads-javascript-domination/\">JavaScript Ray Tracer</a> </li>\n</ul>\n\n<p><strong>Chrome</strong> has Gears baked in, so it can do threads, although it requires a confirmation prompt from the user (and it uses a different API to web workers, although it will work in any browser with the Gears plugin installed): </p>\n\n<ul>\n<li><a href=\"http://code.google.com/apis/gears/samples/hello_world_workerpool/hello_world_workerpool.html\">Google Gears WorkerPool Demo</a> (not a good example as it runs too fast to test in Chrome and Firefox, although IE runs it slow enough to see it blocking interaction)</li>\n</ul>\n\n<p><strong>IE8</strong> and <strong>IE9</strong> can only do threads with the Gears plugin installed </p>\n",
                    "is_accepted": true,
                    "score": 70
                },
                {
                    "body": "<p>There is no true multi-threading in Javascript, but you can get asynchronous behavior using <code>setTimeout()</code> and asynchronous AJAX requests.</p>\n\n<p>What exactly are you trying to accomplish?</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You could use <a href=\"http://www.neilmix.com/narrativejs/doc/\" rel=\"nofollow\">Narrative JavaScript</a>, a compiler that will transforms your code into a state machine, effectively allowing you to emulate threading. It does so by adding a \"yielding\" operator (notated as '->') to the language that allows you to write asynchronous code in a single, linear code block.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The new v8 engine which <a href=\"http://googleblog.blogspot.com/2008/09/fresh-take-on-browser.html\" rel=\"nofollow\">should come out</a> today supports it (i think)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Refer to this <a href=\"http://xebee.xebia.in/2010/11/02/multithreading-in-javascript-with-web-workers/\" rel=\"nofollow\">blog</a> for multi-threading in javascript </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>With the HTML5 \"side-specs\" no need to hack javascript anymore with  setTimeout(), setInterval(), etc.\nHTML5 &amp; Friends introduces the javascript Web Workers specification. It is an API for running scripts asynchronously and independently.</p>\n\n<p>Links to the <a href=\"http://dev.w3.org/html5/workers/#introduction\" rel=\"nofollow\">specification</a> and a <a href=\"http://www.html5rocks.com/en/tutorials/workers/basics/\" rel=\"nofollow\">tutorial</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you can't or don't want to use any AJAX stuff, use an iframe or ten! ;) You can have processes running in iframes in parallel with the master page without worrying about cross browser comparable issues or syntax issues with dot net AJAX etc, and you can call the master page's JavaScript (including the JavaScript that it has imported) from an iframe. </p>\n\n<p>E.g, in a parent iframe, to call <code>egFunction()</code> in the parent document once the iframe content has loaded (that's the asynchronous part)</p>\n\n<pre><code>parent.egFunction();\n</code></pre>\n\n<p>Dynamically generate the iframes too so the main html code is free from them if you want.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is just a way to <strong>simulate</strong> multi-threading in Javascript</p>\n\n<p>Now I am going to create 3 threads which will calculate numbers addition, numbers can be divided with 13 and numbers can be divided with 3 till 10000000000. And these 3 functions are not able to run in same time as what Concurrency means. But I will show you a trick that will make these functions run recursively in the same time : <a href=\"http://jsfiddle.net/F6Rg8/10/\" rel=\"nofollow\">jsFiddle</a></p>\n\n<p>This code belongs to me.</p>\n\n<p>Body Part</p>\n\n<pre><code>    &lt;div class=\"div1\"&gt;\n    &lt;input type=\"button\" value=\"start/stop\" onclick=\"_thread1.control ? _thread1.stop() : _thread1.start();\" /&gt;&lt;span&gt;Counting summation of numbers till 10000000000&lt;/span&gt; = &lt;span id=\"1\"&gt;0&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class=\"div2\"&gt;\n    &lt;input type=\"button\" value=\"start/stop\" onclick=\"_thread2.control ? _thread2.stop() : _thread2.start();\" /&gt;&lt;span&gt;Counting numbers can be divided with 13 till 10000000000&lt;/span&gt; = &lt;span id=\"2\"&gt;0&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class=\"div3\"&gt;\n    &lt;input type=\"button\" value=\"start/stop\" onclick=\"_thread3.control ? _thread3.stop() : _thread3.start();\" /&gt;&lt;span&gt;Counting numbers can be divided with 3 till 10000000000&lt;/span&gt; = &lt;span id=\"3\"&gt;0&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Javascript Part</p>\n\n<pre><code>var _thread1 = {//This is my thread as object\n    control: false,//this is my control that will be used for start stop\n    value: 0, //stores my result\n    current: 0, //stores current number\n    func: function () {   //this is my func that will run\n        if (this.control) {      // checking for control to run\n            if (this.current &lt; 10000000000) {\n                this.value += this.current;   \n                document.getElementById(\"1\").innerHTML = this.value;\n                this.current++;\n            }\n        }\n        setTimeout(function () {  // And here is the trick! setTimeout is a king that will help us simulate threading in javascript\n            _thread1.func();    //You cannot use this.func() just try to call with your object name\n        }, 0);\n    },\n    start: function () {\n        this.control = true;   //start function\n    },\n    stop: function () {\n        this.control = false;    //stop function\n    },\n    init: function () {\n        setTimeout(function () {\n            _thread1.func();    // the first call of our thread\n        }, 0)\n    }\n};\nvar _thread2 = {\n    control: false,\n    value: 0,\n    current: 0,\n    func: function () {\n        if (this.control) {\n            if (this.current % 13 == 0) {\n                this.value++;\n            }\n            this.current++;\n            document.getElementById(\"2\").innerHTML = this.value;\n        }\n        setTimeout(function () {\n            _thread2.func();\n        }, 0);\n    },\n    start: function () {\n        this.control = true;\n    },\n    stop: function () {\n        this.control = false;\n    },\n    init: function () {\n        setTimeout(function () {\n            _thread2.func();\n        }, 0)\n    }\n};\nvar _thread3 = {\n    control: false,\n    value: 0,\n    current: 0,\n    func: function () {\n        if (this.control) {\n            if (this.current % 3 == 0) {\n                this.value++;\n            }\n            this.current++;\n            document.getElementById(\"3\").innerHTML = this.value;\n        }\n        setTimeout(function () {\n            _thread3.func();\n        }, 0);\n    },\n    start: function () {\n        this.control = true;\n    },\n    stop: function () {\n        this.control = false;\n    },\n    init: function () {\n        setTimeout(function () {\n            _thread3.func();\n        }, 0)\n    }\n};\n\n_thread1.init();\n_thread2.init();\n_thread3.init();\n</code></pre>\n\n<p>I hope this way will be helpful.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another possible method is using an javascript interpreter in the javascript environment. </p>\n\n<p>By creating multiple interpreters and controlling their execution from the main thread, you can simulate multi-threading with each thread running in its own environment.</p>\n\n<p>The approach is somewhat similar to web workers, but you give the interpreter access to the browser global environment.</p>\n\n<p>I made a small project to <a href=\"http://www.doboism.com/projects/JS-Interpreter/asyncDemo/asyncDemo.html\" rel=\"nofollow\">demonstrate this</a>.</p>\n\n<p>A more detailed explanation in <a href=\"http://www.doboism.com/blog/2015/01/13/multi-threaded-javascript-using-an-interpreter/\" rel=\"nofollow\">this blog post</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there some way to do multi-threading in JavaScript?</p>\n",
            "last_activity_date": 1421166626,
            "question_id": 30036,
            "score": 66,
            "tags": [
                "javascript",
                "multithreading"
            ],
            "title": "JavaScript and Threads"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Use <code>JSON.stringify</code> with a custom replacer. For example:</p>\n\n<pre><code>// Demo: Circular reference\nvar o = {};\no.o = o;\n\nvar cache = [];\nJSON.stringify(o, function(key, value) {\n    if (typeof value === 'object' &amp;&amp; value !== null) {\n        if (cache.indexOf(value) !== -1) {\n            // Circular reference found, discard key\n            return;\n        }\n        // Store value in our collection\n        cache.push(value);\n    }\n    return value;\n});\ncache = null; // Enable garbage collection\n</code></pre>\n\n<p>The replacer in this example is not 100% correct (depending on your definition of \"duplicate\"). In the following case, a value is discarded:</p>\n\n<pre><code>var a = {b:1}\nvar o = {};\no.one = a;\no.two = a;\n// one and two point to the same object, but two is discarded:\nJSON.stringify(o, ...);\n</code></pre>\n\n<p>But the concept stands: Use a custom replacer, and keep track of the parsed object values.</p>\n",
                    "is_accepted": true,
                    "score": 90
                },
                {
                    "body": "<p>Use the JSON.stringify method with a replacer. Read this documentation for more information. <a href=\"http://msdn.microsoft.com/en-us/library/cc836459%28v=vs.94%29.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/cc836459%28v=vs.94%29.aspx</a></p>\n\n<pre><code>var obj = {\n  a: \"foo\",\n  b: obj\n}\n\nvar replacement = {\"b\":undefined};\n\nalert(JSON.stringify(obj,replacement));\n</code></pre>\n\n<p>Figure out a way to populate the replacement array with cyclic references. You can use the typeof method to find if an the property is of type 'object' ( reference ) and an exact equality check ( === ) to verify circular reference.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>For future googlers searching for a solution to this problem when you <em>don't</em> now the keys of all circular references, you could use a wrapper around the JSON.stringify function to rule out circular references. See an example script at <a href=\"https://gist.github.com/4653128\" rel=\"nofollow\">https://gist.github.com/4653128</a>.</p>\n\n<p>The solution essentially boils down to keeping a reference to previously printed objects in an array, and checking that in a replacer function before returning a value. It's more constrictive than only ruling out circular references, because it also rules out ever printing an object twice, one of the side affects of which is to avoid circular references.</p>\n\n<p>Example wrapper:</p>\n\n<pre><code>function stringifyOnce(obj, replacer, indent){\n    var printedObjects = [];\n    var printedObjectKeys = [];\n\n    function printOnceReplacer(key, value){\n        var printedObjIndex = false;\n        printedObjects.forEach(function(obj, index){\n            if(obj===value){\n                printedObjIndex = index;\n            }\n        });\n\n        if(printedObjIndex &amp;&amp; typeof(value)==\"object\"){\n            return \"(see \" + value.constructor.name.toLowerCase() + \" with key \" + printedObjectKeys[printedObjIndex] + \")\";\n        }else{\n            var qualifiedKey = key || \"(empty key)\";\n            printedObjects.push(value);\n            printedObjectKeys.push(qualifiedKey);\n            if(replacer){\n                return replacer(key, value);\n            }else{\n                return value;\n            }\n        }\n    }\n    return JSON.stringify(obj, printOnceReplacer, indent);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I really liked Trindaz's solution - more verbose, however it had some bugs. I fixed them for whoever likes it too.</p>\n\n<p>Plus, I added a length limit on my cache objects. </p>\n\n<p>If the object I am printing is really big - I mean infinitely big - I want to limit my algorithm.  </p>\n\n<pre><code>JSON.stringifyOnce = function(obj, replacer, indent){\n    var printedObjects = [];\n    var printedObjectKeys = [];\n\n    function printOnceReplacer(key, value){\n        if ( printedObjects.length &gt; 2000){ // browsers will not print more than 20K, I don't see the point to allow 2K.. algorithm will not be fast anyway if we have too many objects\n        return 'object too long';\n        }\n        var printedObjIndex = false;\n        printedObjects.forEach(function(obj, index){\n            if(obj===value){\n                printedObjIndex = index;\n            }\n        });\n\n        if ( key == ''){ //root element\n             printedObjects.push(obj);\n            printedObjectKeys.push(\"root\");\n             return value;\n        }\n\n        else if(printedObjIndex+\"\" != \"false\" &amp;&amp; typeof(value)==\"object\"){\n            if ( printedObjectKeys[printedObjIndex] == \"root\"){\n                return \"(pointer to root)\";\n            }else{\n                return \"(see \" + ((!!value &amp;&amp; !!value.constructor) ? value.constructor.name.toLowerCase()  : typeof(value)) + \" with key \" + printedObjectKeys[printedObjIndex] + \")\";\n            }\n        }else{\n\n            var qualifiedKey = key || \"(empty key)\";\n            printedObjects.push(value);\n            printedObjectKeys.push(qualifiedKey);\n            if(replacer){\n                return replacer(key, value);\n            }else{\n                return value;\n            }\n        }\n    }\n    return JSON.stringify(obj, printOnceReplacer, indent);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>In Node.js, you can use <a href=\"http://nodejs.org/api/util.html#util_util_inspect_object_options\">util.inspect(object)</a>. It automatically replaces circular links with \"[Circular]\".</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>If </p>\n\n<pre><code>console.log(JSON.stringify(object));\n</code></pre>\n\n<p>results in a </p>\n\n<blockquote>\n  <p>TypeError: cyclic object value</p>\n</blockquote>\n\n<p>Then you may want to print like this:</p>\n\n<pre><code>var output = '';\nfor (property in object) {\n  output += property + ': ' + object[property]+'; ';\n}\nconsole.log(output);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Note that there is also a <code>JSON.decycle</code> method implemented by Douglas Crockford. See his\n<a href=\"https://github.com/douglascrockford/JSON-js/blob/master/cycle.js\" rel=\"nofollow\">cycle.js</a>. This allows you to stringify almost any standard structure:</p>\n\n<pre><code>var a = [];\na[0] = a;\na[1] = 123;\nconsole.log(JSON.stringify(JSON.decycle(a)));\n// result: '[{\"$ref\":\"$\"},123]'.\n</code></pre>\n\n<p>You can also recreate original object with <code>retrocycle</code> method. So you don't have to remove cycles from objects to stringify them.</p>\n\n<p>However this will <strong>not</strong> work for DOM Nodes (which are typical cause of cycles in real life use-cases). For example this will throw:</p>\n\n<pre><code>var a = [document.body];\nconsole.log(JSON.stringify(JSON.decycle(a)));\n</code></pre>\n\n<p>I've made a fork to solve that problem (see my <a href=\"https://github.com/Eccenux/JSON-js/blob/master/cycle.js\" rel=\"nofollow\">cycle.js fork</a>). This should work fine:</p>\n\n<pre><code>var a = [document.body];\nconsole.log(JSON.stringify(JSON.decycle(a, true)));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I have a big object I want to convert to JSON and send. However it has circular structure. I want to toss whatever circular references exist and send whatever can be stringified. How do I do that?</p>\n\n<p>Thanks.</p>\n\n<pre><code>var obj = {\n  a: \"foo\",\n  b: obj\n}\n</code></pre>\n\n<p>I want to stringify obj into:</p>\n\n<pre><code>{\"a\":\"foo\"}\n</code></pre>\n",
            "last_activity_date": 1401741060,
            "question_id": 11616630,
            "score": 63,
            "tags": [
                "javascript",
                "json",
                "node.js"
            ],
            "title": "JSON.stringify, avoid TypeError: Converting circular structure to JSON"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The code given by <a href=\"http://javascript.about.com/library/bldst.htm\">this article</a> will tell you whether Daylight Savings Time is in effect. It uses the fact that getTimezoneOffset returns a different value during DST and standard time, and compares the difference between the two. (for example New York returns -5 normally and -4 during DST)</p>\n\n<p>Note that I have no idea as to the intricacies of international time zones, and have only tested that it returns correct results for my time zone.. but the code seems solid.</p>\n\n<pre><code>var today = new Date();\nif (today.dst()) { alert (\"Daylight savings time!\"); }\n\nDate.prototype.stdTimezoneOffset = function() {\n    var jan = new Date(this.getFullYear(), 0, 1);\n    var jul = new Date(this.getFullYear(), 6, 1);\n    return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n}\n\nDate.prototype.dst = function() {\n    return this.getTimezoneOffset() &lt; this.stdTimezoneOffset();\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 102
                },
                {
                    "body": "<p>Create two dates: one in June, one in January. Compare their getTimezoneOffset() values.</p>\n\n<ul>\n<li>if January offset > June offset, client is in northern hemisphere</li>\n<li>if January offset &lt; June offset, client is in southern hemisphere</li>\n<li>if no difference, client timezone does not observe DST</li>\n</ul>\n\n<p>Now check getTimezoneOffset() of the current date. </p>\n\n<ul>\n<li>if equal to June, northern hemisphere, then current timezone is DST (+1 hour)</li>\n<li>if equal to January, southern hemisphere, then current timezone is DST (+1 hour)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I was faced with this same problem today but since our daylight saving starts and stops at differing times from the USA (at least from my understanding), I used a slightly different route..</p>\n\n<pre><code>var arr = [];\nfor (var i = 0; i &lt; 365; i++) {\n var d = new Date();\n d.setDate(i);\n newoffset = d.getTimezoneOffset();\n arr.push(newoffset);\n}\nDST = Math.min.apply(null, arr);\nnonDST = Math.max.apply(null, arr);\n</code></pre>\n\n<p>Then you simply compare the current timezone offset with DST and nonDST to see which one matches.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Based on Matt Johanson's comment on the solution provided by Sheldon Griffin I created the following code:</p>\n\n<pre><code>    Date.prototype.stdTimezoneOffset = function() {\n        var fy=this.getFullYear();\n        if (!Date.prototype.stdTimezoneOffset.cache.hasOwnProperty(fy)) {\n\n            var maxOffset = new Date(fy, 0, 1).getTimezoneOffset();\n            var monthsTestOrder=[6,7,5,8,4,9,3,10,2,11,1];\n\n            for(var mi=0;mi&lt;12;mi++) {\n                var offset=new Date(fy, monthsTestOrder[mi], 1).getTimezoneOffset();\n                if (offset!=maxOffset) { \n                    maxOffset=Math.max(maxOffset,offset);\n                    break;\n                }\n            }\n            Date.prototype.stdTimezoneOffset.cache[fy]=maxOffset;\n        }\n        return Date.prototype.stdTimezoneOffset.cache[fy];\n    };\n\n    Date.prototype.stdTimezoneOffset.cache={};\n\n    Date.prototype.isDST = function() {\n        return this.getTimezoneOffset() &lt; this.stdTimezoneOffset(); \n    };\n</code></pre>\n\n<p>It tries to get the best of all worlds taking into account all the comments and previously suggested answers and specifically it:</p>\n\n<p>1) Caches the result for per year stdTimezoneOffset so that you don't need to recalculate it when testing multiple dates in the same year.</p>\n\n<p>2) It does not assume that DST (if it exists at all) is necessarily in July,\n   and will work even if it will at some point and some place be any month.\n   However Performance-wise it will work faster if indeed July (or near by months) are indeed DST.</p>\n\n<p>3) Worse case it will compare the getTimezoneOffset of the first of each month. [and do that Once per tested year].</p>\n\n<p>The assumption it does still makes is that the if there is DST period is larger then a single month.  </p>\n\n<p>If someone wants to remove that assumption he can change loop into something more like whats in the solutin provided by Aaron Cole - but I would still jump half a year ahead and break out of the loop when two different offsets are found]</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Using JavaScript, how can I check if Daylight Saving Time (DST) is in use at the moment, and if it is for how many hours?</p>\n\n<p>This is a bit of my js code for which this is needed:</p>\n\n<pre><code>var secDiff=Math.abs(Math.round((utc_date-this.premiere_date)/1000));\nthis.years=this.calculateUnit(secDiff,(86400*365));\nthis.days=this.calculateUnit(secDiff-(this.years*(86400*365)),86400);\nthis.hours=this.calculateUnit((secDiff-(this.years*(86400*365))-(this.days*86400)),3600);\nthis.minutes=this.calculateUnit((secDiff-(this.years*(86400*365))-(this.days*86400)-(this.hours*3600)),60);\nthis.seconds=this.calculateUnit((secDiff-(this.years*(86400*365))-(this.days*86400)-(this.hours*3600)-(this.minutes*60)),1);\n</code></pre>\n\n<p>I want to get the datetime in ago, but if the DST is in use then the dates are wrong for 1 hour, and that's my problem. I don't know how to check if the DST is in use or not.</p>\n\n<p>How to get when daylight saving starts and ends? &lt;--- I think that this could help me. Just can't find it.</p>\n",
            "last_activity_date": 1415273428,
            "question_id": 11887934,
            "score": 43,
            "tags": [
                "javascript",
                "dst"
            ],
            "title": "Check if Daylight Saving Time is in effect, and if it is for how many hours"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>If you say <code>window.location.reload(true)</code> the browser will skip the cache and reload the page from the server. <code>window.location.reload(false)</code> will do the opposite.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>If I remember correctly, <code>window.location.reload()</code> reloads the current page with POST data, while <code>window.location.href=window.location.href</code> does not include the POST data.</p>\n\n<p>As noted by @W3Max in the comments below, <code>window.location.href=window.location.href</code> will not reload the page if there's an anchor (#) in the URL - You must use <code>window.location.reload()</code> in this case.</p>\n\n<p>Also, as noted by @Mic below, <code>window.location.reload()</code> takes an additional argument <code>skipCache</code> so that with using <code>window.location.reload(true)</code> the browser will skip the cache and reload the page from the server. <code>window.location.reload(false)</code> will do the opposite, and load the page from cache if possible.</p>\n",
                    "is_accepted": true,
                    "score": 106
                },
                {
                    "body": "<p>No, there shouldn't be. However, it's possible there is differences in some browsers, so either (or neither) may not work in some case. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you add the boolean true to the reload\n<code>window.location.reload(true)</code> it will load from server.</p>\n\n<p>It is not clear how supported this boolean is, <a href=\"http://www.w3.org/TR/Window/#location-methods\" rel=\"nofollow\">W3Org</a> mentions that NS <em>used to support</em> it</p>\n\n<p>There MIGHT be a difference between the content of window.location.href and <a href=\"https://developer.mozilla.org/en/DOM/document.URL\" rel=\"nofollow\">document.URL</a> - there at least used to be a difference between location.href and the non-standard and deprecated <a href=\"https://developer.mozilla.org/en/DOM/document.location\" rel=\"nofollow\">document.location</a> that had to do with redirection, but that is really last millennium.</p>\n\n<p>For documentation purposes I would use <a href=\"https://developer.mozilla.org/en/DOM/window.location#reload\" rel=\"nofollow\">window.location.reload()</a> because that is what you want to do.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>from my experience of about 3 years, i could not find any difference...</p>\n\n<p>edit : yes, as one of them here has said, only passing a boolean parameter to window.location.reload() is the difference.\nif you pass <em>true</em>, then the browser loads a fresh page,\nbut if <em>false</em>, then the cache version is loaded...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The difference is that </p>\n\n<pre><code>window.location = document.URL;\n</code></pre>\n\n<p>will not reload the page if there is a hash (#) in the URL (with or without something after it), whereas </p>\n\n<pre><code>window.location.reload();\n</code></pre>\n\n<p>will reload the page.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Came across this question researching some aberrant behavior in IE, specifically IE9, didn't check older versions. It seems</p>\n\n<pre><code>window.location.reload();\n</code></pre>\n\n<p>results in a refresh that blanks out the entire screen for a second, where as</p>\n\n<pre><code> window.location = document.URL;\n</code></pre>\n\n<p>refreshes the page much more quickly, almost imperceptibly.</p>\n\n<p>Doing a bit more research, and some experimentation with fiddler, it seems that <code>window.location.reload()</code> will bypass the cache and reload from the server regardless if you pass the boolean with it or not, this includes getting all of your assets (images, scripts, style sheets, etc) again. So if you just want the page to refresh the HTML, the <code>window.location = document.URL</code> will return much quicker and with less traffic. </p>\n\n<p>A difference in behavior between browsers is that when IE9 uses the reload method it clears the visible page and seemingly rebuilds it from scratch, where FF and chrome wait till they get the new assets and rebuild them if they are different.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>A difference in Firefox (12.0) is that on a page rendered from a POST, reload() will pop up a warning and do a re-post, while a URL assignment will do a GET.</p>\n\n<p>Google Chrome does a GET for both.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Using JSF, I'm now having the issue with refresh after session is expired: <a href=\"http://stackoverflow.com/questions/15252234/primefaces-viewexpiredexception-after-page-reload\">PrimeFaces ViewExpiredException after page reload</a> and with some investigation I have found one difference in FireFox:</p>\n\n<p>Calling <code>window.location.reload()</code> works like clicking refresh icon on FF, it adds the line </p>\n\n<p><code>Cache-Control  max-age=0</code></p>\n\n<p>while setting <code>window.location.href</code> works like pressing ENTER in URL line, it does not send that line. </p>\n\n<p>Though both are sent as GET, the first (reload) is restoring the previous data and the application is in inconsistent state. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As said, modifying the href when there is a hash (#) in the url would not reload the page. Thus, I use this to reload it instead of regular expressions:</p>\n\n<pre><code>if (!window.location.hash) {\n    window.location.href = window.location.href;\n} else {\n    window.location.reload();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>What is the difference between JavaScript's</p>\n\n<pre><code>window.location.href = window.location.href\n</code></pre>\n\n<p>and </p>\n\n<pre><code>window.location.reload()\n</code></pre>\n\n<p>functions?</p>\n",
            "last_activity_date": 1424252624,
            "question_id": 2405117,
            "score": 93,
            "tags": [
                "javascript"
            ],
            "title": "Difference between window.location.href=window.location.href and window.location.reload()"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In IE browsers, it's:</p>\n\n<pre><code>document.selection.createRange().htmlText\n</code></pre>\n\n<p>In non-IE browsers, I just tried playing with this... this seems to work, WILL have side effects from breaking nodes in half and creating an extra span, but it's a starting point: </p>\n\n<pre><code>var range = window.getSelection().getRangeAt(0),\n  content = range.extractContents(),\n     span = document.createElement('SPAN');\n\nspan.appendChild(content);\nvar htmlContent = span.innerHTML;\n\nrange.insertNode(span);\n\nalert(htmlContent);\n</code></pre>\n\n<p>Unfortunately, I can't seem to put the node back as it was (since you can be pulling half the text from a span, for instance).</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>Here's a function that will get you HTML corresponding to the current selection in all major browsers. It also handles multiple ranges within a selection (currently only implemented in Firefox):</p>\n\n<pre><code>function getSelectionHtml() {\n    var html = \"\";\n    if (typeof window.getSelection != \"undefined\") {\n        var sel = window.getSelection();\n        if (sel.rangeCount) {\n            var container = document.createElement(\"div\");\n            for (var i = 0, len = sel.rangeCount; i &lt; len; ++i) {\n                container.appendChild(sel.getRangeAt(i).cloneContents());\n            }\n            html = container.innerHTML;\n        }\n    } else if (typeof document.selection != \"undefined\") {\n        if (document.selection.type == \"Text\") {\n            html = document.selection.createRange().htmlText;\n        }\n    }\n    return html;\n}\n\nalert(getSelectionHtml());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Here's what I came up with.  Tested with IE, Chrome, Firefox, Safari, Opera.  Doesn't return empty string.</p>\n\n<pre><code>function getSelected() {\n    var text = \"\";\n    if (window.getSelection\n    &amp;&amp; window.getSelection().toString()\n    &amp;&amp; $(window.getSelection()).attr('type') != \"Caret\") {\n        text = window.getSelection();\n        return text;\n    }\n    else if (document.getSelection\n    &amp;&amp; document.getSelection().toString()\n    &amp;&amp; $(document.getSelection()).attr('type') != \"Caret\") {\n        text = document.getSelection();\n        return text;\n    }\n    else {\n        var selection = document.selection &amp;&amp; document.selection.createRange();\n\n        if (!(typeof selection === \"undefined\")\n        &amp;&amp; selection.text\n        &amp;&amp; selection.text.toString()) {\n            text = selection.text;\n            return text;\n        }\n    }\n\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>@zyklus:</p>\n\n<p>I modified your function to work (I'm using jQuery but those pieces can be easily rewritten in Javascript):</p>\n\n<pre><code>function getSelectionHtml() {\n    var htmlContent = ''\n\n    // IE\n    if ($.browser.msie) {\n        htmlContent = document.selection.createRange().htmlText;\n    } else {\n        var range = window.getSelection().getRangeAt(0);\n        var content = range.cloneContents();\n\n        $('body').append('&lt;span id=\"selection_html_placeholder\"&gt;&lt;/span&gt;');\n        var placeholder = document.getElementById('selection_html_placeholder');\n\n        placeholder.appendChild(content);\n\n        htmlContent = placeholder.innerHTML;\n        $('#selection_html_placeholder').remove();\n\n    }\n\n\n    return htmlContent;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found <a href=\"http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\" rel=\"nofollow\">highlight</a> plugin to be the best match, it is very light and with it you can highlight <strong>part of the content</strong>:</p>\n\n<blockquote>\n  <p>$('li').highlight('bla');</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I can use the following code to get selected text:</p>\n\n<p><code>text=window.getSelection(); /// for Firefox\ntext=document.selection.createRange().text; /// for IE</code></p>\n\n<p>But how can I get the selected Html, which includes the text and html tags? </p>\n",
            "last_activity_date": 1393280546,
            "question_id": 5643635,
            "score": 28,
            "tags": [
                "javascript",
                "getselection"
            ],
            "title": "How to get selected html text with javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Just use:</p>\n\n<pre><code>function getData() {\n    $.ajax({\n        url : 'example.com',\n        type: 'GET',\n        success : handleData\n    })\n}\n</code></pre>\n\n<p>The <code>success</code> property requires only a reference to a function, and passes the data as parameter to this function. </p>\n\n<p>You can access your <code>handleData</code> function like this because of the way <code>handleData</code> is declared. JavaScript will parse your code for function declarations before running it, so you'll be able to use the function in code that's before the actual declaration.  This is known as <a href=\"http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html\">hoisting</a>.</p>\n\n<p>This doesn't count for functions declared like this, though:</p>\n\n<pre><code>var myfunction = function(){}\n</code></pre>\n\n<p>Those are only available when the interpreter passed them.</p>\n\n<p><strong><a href=\"http://stackoverflow.com/questions/336859/javascript-var-functionname-function-vs-function-functionname\">See this question for more information about the 2 ways of declaring functions</a></strong></p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Try rewriting your success handler to:</p>\n\n<pre><code>success : handleData\n</code></pre>\n\n<p>The success property of the ajax method only requires a reference to a function.</p>\n\n<p>In your handleData function you can take up to 3 parameters:</p>\n\n<pre><code>object data\nstring textStatus\njqXHR jqXHR\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would write :</p>\n\n<pre><code>var dataFromServer;  //declare the variable first\n\nvar handleData = function (data) {\n    alert(data);\n    //do some stuff\n}\n\n\nfunction getData() {\n    $.ajax({\n        url : 'example.com',\n        type: 'GET',\n        success : handleData\n    })\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You don't need to declare the variable. Ajax success function automatically takes up to 3 parameters: <code>Function( Object data, String textStatus, jqXHR jqXHR )</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The \"new\" way of doing this since jQuery 1.5 (Jan 2011) is to use deferred objects instead of passing a <code>success</code> callback.  You should <em>return</em> the result of <code>$.ajax</code> and then use the <code>.done</code>, <code>.fail</code> etc methods to add the callbacks <em>outside of the <code>$.ajax</code> call</em>.</p>\n\n<pre><code>function getData() {\n    return $.ajax({\n        url : 'example.com',\n        type: 'GET'\n    });\n}\n\nfunction handleData(data /* , textStatus, jqXHR */ ) {\n    alert(data);\n    //do some stuff\n}\n\ngetData().done(handleData);\n</code></pre>\n\n<p>This <em>decouples</em> the callback handling from the AJAX handling, allows you to add multiple callbacks, failure callbacks, etc, all without ever needing to modify the original <code>getData()</code> function.  Separating the AJAX functionality from the set of actions to be completed afterwards is <em>a good thing!</em>.</p>\n\n<p>Deferreds also allow for much easier synchronisation of multiple asynchronous events, which you can't easily do just with <code>success:</code></p>\n\n<p>For example, I could add multiple callbacks, an error handler, and wait for a timer to elapse before continuing:</p>\n\n<pre><code>// a trivial timer, just for demo purposes -\n// it resolves itself after 5 seconds\nvar timer = $.Deferred();\nsetTimeout(timer.resolve, 5000);\n\n// add a done handler _and_ an `error:` handler, even though `getData`\n// didn't directly expose that functionality\nvar ajax = getData().done(handleData).fail(error);\n\n$.when(timer, ajax).done(function() {\n    // this won't be called until *both* the AJAX and the 5s timer have finished\n});\n\najax.done(function(data) {\n    // you can add additional callbacks too, even if the AJAX call\n    // already finished\n});\n</code></pre>\n\n<p>Other parts of jQuery use deferred objects too - you can synchronise jQuery animations with other async operations very easily with them.</p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>I do not know why you are defining the parameter outside the script. That is unnecessary. Your callback function will be called with the return data as a parameter automatically. It is very possible to define your callback outside the <code>sucess:</code> i.e.</p>\n\n<pre><code>function getData() {\n    $.ajax({\n        url : 'example.com',\n        type: 'GET',\n        success : handleData\n    })\n}\n\nfunction handleData(data) {\n    alert(data);\n    //do some stuff\n}\n</code></pre>\n\n<p>the handleData function will be called and the parameter passed to it by the ajax function.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I want to use jQuery ajax to retrieve data from a server.</p>\n\n<p>I want to put the success callback function definition outside the <code>.ajax()</code> block like the following. So do I need to declare the variable <code>dataFromServer</code> like the following so that I will be able to use the returned data from the success callback?</p>\n\n<p>I've seen most people define the success callback inside the <code>.ajax()</code> block. So is the following code correct if I want to define the success callback outside?</p>\n\n<pre><code>var dataFromServer;  //declare the variable first\n\nfunction getData() {\n    $.ajax({\n        url : 'example.com',\n        type: 'GET',\n        success : handleData(dataFromServer)\n    })\n}\n\nfunction handleData(data) {\n    alert(data);\n    //do some stuff\n}\n</code></pre>\n",
            "last_activity_date": 1395390386,
            "question_id": 14754619,
            "score": 20,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "jQuery ajax success callback function definition"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>$(function() {\n    var elements = document.getElementsByName(\"topicName\");\n    for (var i = 0; i &lt; elements.length; i++) {\n        elements[i].oninvalid = function(e) {\n            e.target.setCustomValidity(\"Please enter Room Topic Title\");\n        };\n    }\n})\n</code></pre>\n\n<p>I tested this in Chrome and FF and it worked in both browsers.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<h2>Code snippet</h2>\n\n<p>Since this answer got very much attention, here is a nice configurable snippet I came up with:</p>\n\n<pre><code>/**\n  * @author ComFreek\n  * @license MIT (c) 2013-2015 ComFreek &lt;http://stackoverflow.com/users/603003/comfreek&gt;\n  * Please retain this author and license notice!\n  */\n(function (exports) {\n    function valOrFunction(val, ctx, args) {\n        if (typeof val == \"function\") {\n            return val.apply(ctx, args);\n        } else {\n            return val;\n        }\n    }\n\n    function InvalidInputHelper(input, options) {\n        input.setCustomValidity(valOrFunction(options.defaultText, window, [input]));\n\n        function changeOrInput() {\n            if (input.value == \"\") {\n                input.setCustomValidity(valOrFunction(options.emptyText, window, [input]));\n            } else {\n                input.setCustomValidity(\"\");\n            }\n        }\n\n        function invalid() {\n            if (input.value == \"\") {\n                input.setCustomValidity(valOrFunction(options.emptyText, window, [input]));\n            } else {\n               console.log(\"INVALID!\"); input.setCustomValidity(valOrFunction(options.invalidText, window, [input]));\n            }\n        }\n\n        input.addEventListener(\"change\", changeOrInput);\n        input.addEventListener(\"input\", changeOrInput);\n        input.addEventListener(\"invalid\", invalid);\n    }\n    exports.InvalidInputHelper = InvalidInputHelper;\n})(window);\n</code></pre>\n\n<h2>Usage</h2>\n\n<p>&rarr; <a href=\"http://jsfiddle.net/B4hYG/437/\" rel=\"nofollow\">jsFiddle</a></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input id=\"email\" type=\"email\" required=\"required\" /&gt;\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>InvalidInputHelper(document.getElementById(\"email\"), {\n  defaultText: \"Please enter an email address!\",\n\n  emptyText: \"Please enter an email address!\",\n\n  invalidText: function (input) {\n    return 'The email address \"' + input.value + '\" is invalid!';\n  }\n});\n</code></pre>\n\n<h2>More details</h2>\n\n<ul>\n<li><code>defaultText</code> is displayed initially</li>\n<li><code>emptyText</code> is displayed when the input is empty (was cleared)</li>\n<li><code>invalidText</code> is displayed when the input is marked as invalid by the browser (for example when it's not a valid email address)</li>\n</ul>\n\n<p>You can either assign a string or a function to each of the three properties. <br />\nIf you assign a function, it can accept a reference to the input element (DOM node) and it <em>must</em> return a string which is then displayed as the error message.</p>\n\n<h2>Compatibility</h2>\n\n<p>Tested in:</p>\n\n<ul>\n<li>Chrome 30</li>\n<li>IE 11</li>\n<li>Firefox 24</li>\n</ul>\n\n<hr />\n\n<h2>Old answer</h2>\n\n<p>You can see the old revision here: <a href=\"http://stackoverflow.com/revisions/16069817/6\">http://stackoverflow.com/revisions/16069817/6</a></p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>Man, I never have done that in HTML 5 but I'll try. Take a look on <a href=\"http://jsfiddle.net/AZZA3/\" rel=\"nofollow\">this fiddle.</a></p>\n\n<p>I have used some jQuery, HTML5 native events and properties and a custom attribute on input tag(this may cause problem if you try to validade your code). I didn't tested in all browsers but I think it may work.</p>\n\n<p>This is the field validation JavaScript code with jQuery:</p>\n\n<pre><code>$(document).ready(function()\n{\n    $('input[required], input[required=\"required\"]').each(function(i, e)\n    {\n        e.oninput = function(el)\n        {\n            el.target.setCustomValidity(\"\");\n\n            if (el.target.type == \"email\")\n            {\n                if (el.target.validity.patternMismatch)\n                {\n                    el.target.setCustomValidity(\"E-mail format invalid.\");\n\n                    if (el.target.validity.typeMismatch)\n                    {\n                         el.target.setCustomValidity(\"An e-mail address must be given.\");\n                    }\n                }\n            }\n        };\n\n        e.oninvalid = function(el)\n        {\n            el.target.setCustomValidity(!el.target.validity.valid ? e.attributes.requiredmessage.value : \"\");\n        };\n    });\n});\n</code></pre>\n\n<p>Nice. Here is the simple form html:</p>\n\n<pre><code>&lt;form method=\"post\" action=\"\" id=\"validation\"&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\" required=\"required\" requiredmessage=\"Name is required.\" /&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required=\"required\" requiredmessage=\"A valid E-mail address is required.\" pattern=\"^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9]+$\" /&gt;\n\n    &lt;input type=\"submit\" value=\"Send it!\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>The attribute <code>requiredmessage</code> is the custom attribute I talked about. You can set your message for each required field there cause jQuery will get from it when it will display the error message. You don't have to set each field right on JavaScript, jQuery does it for you. That regex seems to be fine(at least it block your <code>testing@.com</code>! haha)</p>\n\n<p>As you can see on fiddle, I make an extra validation of submit form event(<em>this goes on document.ready too</em>):</p>\n\n<pre><code>$(\"#validation\").on(\"submit\", function(e)\n{\n    for (var i = 0; i &lt; e.target.length; i++)\n    {\n        if (!e.target[i].validity.valid)\n        {\n            window.alert(e.target.attributes.requiredmessage.value);\n            e.target.focus();\n            return false;\n        }\n    }\n});\n</code></pre>\n\n<p>I hope this works or helps you in anyway.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can do this setting up an event listener for the 'invalid' across all the inputs of the same type, or just one, depending on what you need, and then setting up the proper message.</p>\n\n<pre><code>[].forEach.call( document.querySelectorAll('[type=\"email\"]'), function(emailElement) {\n    emailElement.addEventListener('invalid', function() {\n        var message = this.value + 'is not a valid email address';\n        emailElement.setCustomValidity(message)\n    }, false);\n\n    emailElement.addEventListener('input', function() {\n        try{emailElement.setCustomValidity('')}catch(e){}\n    }, false);\n    });\n</code></pre>\n\n<p>The second piece of the script, the validity message will be reset, since otherwise won't be possible to submit the form: for example this prevent the message to be triggered even when the email address has been corrected.</p>\n\n<p>Also you don't have to set up the input field as required, since the 'invalid' will be triggered once you start typing in the input.</p>\n\n<p>Here is a fiddle for that: <a href=\"http://jsfiddle.net/napy84/U4pB7/2/\" rel=\"nofollow\">http://jsfiddle.net/napy84/U4pB7/2/</a>\nHope that helps!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;form id=\"myform\"&gt;\n    &lt;input id=\"email\" oninvalid=\"InvalidMsg(this);\" name=\"email\" oninput=\"InvalidMsg(this);\"  type=\"email\" required=\"required\" /&gt;\n    &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>JAVASCRIPT :</strong></p>\n\n<pre><code>function InvalidMsg(textbox) {\n    if (textbox.value == '') {\n        textbox.setCustomValidity('Required email address');\n    }\n    else if (textbox.validity.typeMismatch){{\n        textbox.setCustomValidity('please enter a valid email address');\n    }\n    else {\n       textbox.setCustomValidity('');\n    }\n    return true;\n}\n</code></pre>\n\n<p><strong>Demo :</strong></p>\n\n<p><a href=\"http://jsfiddle.net/patelriki13/Sqq8e/\">http://jsfiddle.net/patelriki13/Sqq8e/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><strong>Just need to get the element and use the method setCustomValidity.</strong></p>\n\n<p>Example</p>\n\n<pre><code>var foo = document.getElementById('foo');\nfoo.setCustomValidity(' An error occurred');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use the attribute \"title\" in every input tag and write a message on it</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This works well for me:</p>\n\n<pre><code>jQuery(document).ready(function($) {\n    var intputElements = document.getElementsByTagName(\"INPUT\");\n    for (var i = 0; i &lt; intputElements.length; i++) {\n        intputElements[i].oninvalid = function (e) {\n            e.target.setCustomValidity(\"\");\n            if (!e.target.validity.valid) {\n                if (e.target.name == \"email\") {\n                    e.target.setCustomValidity(\"Please enter a valid email address.\");\n                } else {\n                    e.target.setCustomValidity(\"Please enter a password.\");\n                }\n            }\n        }\n    }\n});\n</code></pre>\n\n<p>and the form I'm using it with (truncated):</p>\n\n<pre><code>&lt;form id=\"welcome-popup-form\" action=\"authentication\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"signup\" value=\"1\"&gt;\n    &lt;input type=\"email\" name=\"email\" id=\"welcome-email\" placeholder=\"Email\" required&gt;&lt;/div&gt;\n    &lt;input type=\"password\" name=\"passwd\" id=\"welcome-passwd\" placeholder=\"Password\" required&gt;\n    &lt;input type=\"submit\" id=\"submitSignup\" name=\"signup\" value=\"SUBMIT\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/LuZNf.jpg\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<h1>Required field custom validation</h1>\n\n<p>I have one form with many input fields. I have put html5 validations</p>\n\n<pre><code>&lt;input type=\"text\" name=\"topicName\" id=\"topicName\" required /&gt;\n</code></pre>\n\n<p>when I submit the form without filling this textbox it shows default message like</p>\n\n<p><code>\"Please fill out this field\"</code></p>\n\n<p>can anyone please help me to edit this message?</p>\n\n<p>I have a javascript code to edit it but its not working</p>\n\n<pre><code>$(document).ready(function() {\n    var elements = document.getElementsByName(\"topicName\");\n    for (var i = 0; i &lt; elements.length; i++) {\n        elements[i].oninvalid = function(e) {\n            e.target.setCustomValidity(\"\");\n            if (!e.target.validity.valid) {\n                e.target.setCustomValidity(\"Please enter Room Topic Title\");\n            }\n        };\n        elements[i].oninput = function(e) {\n            e.target.setCustomValidity(\"\");\n        };\n    }\n})\n</code></pre>\n\n<p><br></p>\n\n<h1>Email custom validations</h1>\n\n<p>I have following HTML form</p>\n\n<pre><code>&lt;form id=\"myform\"&gt;\n    &lt;input id=\"email\" name=\"email\" type=\"email\" /&gt;\n    &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><br>Validation messages I want like..</p>\n\n<p><strong>Required field :</strong> Please Enter Email Address<br>\n<strong>Wrong Email :</strong> 'testing@.com' is not a Valid Email Address. (<em>here, entered email address displayed in textbox</em>)</p>\n\n<p>I have tried this..</p>\n\n<pre><code>function check(input) {  \n    if(input.validity.typeMismatch){  \n        input.setCustomValidity(\"'\" + input.value + \"' is not a Valid Email Address.\");  \n    }  \n    else {  \n        input.setCustomValidity(\"\");  \n    }                 \n}  \n</code></pre>\n\n<p>This function not working properly, Do you have any other way to do this? it would be appreciable.</p>\n",
            "last_activity_date": 1419976160,
            "question_id": 13798313,
            "score": 51,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "html5"
            ],
            "title": "Set custom HTML5 required field validation message"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>There is a recursive loop somewhere in your code (i.e. a function that eventually calls itself again and again until the stack is full).</p>\n\n<p>Other browsers either have bigger stacks (so you get a timeout instead) or they swallow the error for some reason (maybe a badly placed try-catch).</p>\n\n<p>Use the debugger to check the call stack when the error happens.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>It means that somewhere in your code, you are calling a function which in turn calls another function and so forth, until you hit the call stack limit.</p>\n\n<p>This is almost always because of a recursive function with a base case that isn't being met.</p>\n\n<h3>Viewing the stack</h3>\n\n<p>Consider this code...</p>\n\n<pre><code>(function a() {\n    a();\n})();\n</code></pre>\n\n<p>Here is the stack after a handful of calls...</p>\n\n<p><img src=\"http://i.stack.imgur.com/aSwnu.png\" alt=\"Web Inspector\"></p>\n\n<p>As you can see, the call stack grows until it hits a limit: the browser hardcoded stack size or memory exhaustion.</p>\n\n<p>In order to fix it, ensure that your recursive function has a base case which is able to be met...</p>\n\n<pre><code>(function a(x) {\n    // The following condition \n    // is the base case.\n    if ( ! x) {\n        return;\n    }\n    a(--x);\n})(10);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 129
                },
                {
                    "body": "<p>You can sometimes get this if you accidentally import/embed the same JS file twice, worth checking in your resources tab of the inspector :)</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Check the error details in the Chrome dev toolbar console, this will give you the functions in the call stack, and guide you towards the recursion that's causing the error.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you need a infinite process/recursion running for some reason, you can use a webworker in a seperate thread.\n<a href=\"http://www.html5rocks.com/en/tutorials/workers/basics/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/workers/basics/</a></p>\n\n<p>if you want to manipulate dom elements and redraw, use animation\n<a href=\"http://creativejs.com/resources/requestanimationframe/\" rel=\"nofollow\">http://creativejs.com/resources/requestanimationframe/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Both invocations of the identical code below if decreased by 1 work in Chrome 32 on my computer e.g. 17905 vs 17904. If run as is they will produce the error \"RangeError: Maximum call stack size exceeded\". It appears to be this limit is not hardcoded but dependant on the hardware of your machine. It does appear that if invoked as a function this self-imposed limit is higher than if invoked as a method i.e. this particular code uses less memory when invoked as a function.</p>\n\n<p>Invoked as a method:</p>\n\n<pre><code>var ninja = {\n    chirp: function(n) {\n        return n &gt; 1 ? ninja.chirp(n-1) + \"-chirp\" : \"chirp\";\n    }\n};\n\nninja.chirp(17905);\n</code></pre>\n\n<p>Invoked as a function:</p>\n\n<pre><code>function chirp(n) {\n    return n &gt; 1 ? chirp( n - 1 ) + \"-chirp\" : \"chirp\";\n}\n\nchirp(20889);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can find your recursive function in crome browser,press ctrl+shift+j and then source tab, which gives you code compilation flow and you can find using break point in code.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using a Direct Web Remoting (DWR) JavaScript library file and am getting an error only in Safari (desktop and iPad)</p>\n\n<p>It says \"Maximum call stack size exceeded.\"</p>\n\n<p>What exactly does this error mean and does it stop processing completely?</p>\n\n<p>Also any fix for Safari browser (Actually on the iPad Safari, it says JS:execution exceeded timeout, which I am assuming is the same call stack issue)</p>\n",
            "last_activity_date": 1411688320,
            "question_id": 6095530,
            "score": 87,
            "tags": [
                "javascript",
                "html",
                "webkit",
                "callstack",
                "dwr"
            ],
            "title": "Maximum call stack size exceeded error"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>you want to use the <strong>onbeforeunload</strong> event.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Try using <code>e.preventDefault()</code> instead of returning false. 'e' would be the first argument to your <em>unload</em> callback.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p><code>onbeforeunload</code> is the one you want; your function <em>\"should assign a string value to the returnValue property of the Event object and return the same string\"</em>. Check the docs from <a href=\"http://msdn.microsoft.com/en-us/library/ms536907%28VS.85%29.aspx\">Microsoft</a> and <a href=\"https://developer.mozilla.org/en/DOM/window.onbeforeunload\">Mozilla</a> for details.</p>\n\n<p>The string you return will be used by the browser to present the user with a custom confirm box, allowing them to refuse to stay there if they so choose. It has to be done that way to prevent malicious scripts causing a Denial-of-Browser attack.</p>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<pre><code>window.onbeforeunload = function() { \n  if (warning) {\n    return 'You have made changes on this page that you have not yet confirmed. \n    If you navigate away from this page you will loose your unsaved changes';\n  }\n}\n</code></pre>\n\n<p>isnt supported in chrome, safari and opera</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This code warns as per Natalie's suggestion, but disables the warning if a form on the page was submitted. Uses JQuery.</p>\n\n<pre><code>var warning = true;\nwindow.onbeforeunload = function() { \n  if (warning) {\n    return \"You have made changes on this page that you have not yet confirmed. If you navigate away from this page you will lose your unsaved changes\";\n  }\n}\n\n$('form').submit(function() {\n   window.onbeforeunload = null;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<pre><code>window.onbeforeunload = confirmExit;\nfunction confirmExit()\n{\n    return \"You have attempted to leave this page.  If you have made any changes to the fields without clicking the Save button, your changes will be lost.  Are you sure you want to exit this page?\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Does anyone know how to stop a page from reloading or navigating away?</p>\n\n<pre><code>\njQuery(function($) {\n\n    /* global on unload notification */\n    warning = true;\n\n    if(warning) {\n    \t$(window).bind(\"unload\", function() { \n    \t\tif (confirm(\"Do you want to leave this page\") == true) {\n    \t\t\t//they pressed OK\n    \t\t\talert('ok');\n    \t\t} else {\n    \t\t\t// they pressed Cancel\n    \t\t\talert('cancel');\n    \t\t\treturn false;\n    \t\t}\n    \t});\n    }\n});</code></pre>\n\n<p>I am working on an e-commerce site at the moment, the page that displays your future orders has the ability to alter the quantities of items ordered using +/- buttons. Changing the quantities this way this doesn't actually change the order itself, they have to press confirm and therefore committing a positive action to change the order.</p>\n\n<p>However if they have changed the quantities and navigate away from the page I would like to warn them they are doing so in case this is an accident, as the changed quantities will be lost if they navigate away or refresh the page.</p>\n\n<p>In the code above I am using a global variable which will be false by default (its only true for testing), when a quantity is changed I will update this variable to be true, and when they confirm the changes I will set it to false.  </p>\n\n<p>If warning is true and the page is unloaded, I offer them a confirmation box, if they say no they would like to stay on this page I need to stop it from unloading. return false isn't working, it still lets the user navigate away (the alerts are there for debugging only)</p>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1412664590,
            "question_id": 1299452,
            "score": 48,
            "tags": [
                "javascript",
                "jquery",
                "events"
            ],
            "title": "How do I stop a page from unloading (navigating away) in JS?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Just give an <code>id</code> to the element and process it normally eg:</p>\n\n<pre><code>&lt;div id=\"dv\"&gt;\n&lt;a href=\"#\"&gt;&lt;/a&gt;\n&lt;span&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Now you can do like:</p>\n\n<pre><code>var div = document.getElementById('dv');\ndiv.appendChild(......);\n</code></pre>\n\n<p>Or with jQuery:</p>\n\n<pre><code>$('#dv').get(0).appendChild(........);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check out John Resig's <a href=\"http://ejohn.org/blog/pure-javascript-html-parser/\">pure JavaScript HTML parser</a>.</p>\n\n<p>EDIT: if you want the browser to parse the HTML for you, <code>innerHTML</code> is exactly what you want. From <a href=\"http://stackoverflow.com/questions/888875/how-to-parse-html-from-javascript-in-firefox\">this SO question</a>:</p>\n\n<pre><code>var tempDiv = document.createElement('div');\ntempDiv.innerHTML = htmlString;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use a <code>DOMParser</code>, like so:</p>\n\n<pre><code>var xmlString = \"&lt;div id='foo'&gt;&lt;a href='#'&gt;Link&lt;/a&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;\"\n  , parser = new DOMParser()\n  , doc = parser.parseFromString(xmlString, \"text/xml\");\ndoc.firstChild // =&gt; &lt;div id=\"foo\"&gt;...\ndoc.firstChild.firstChild // =&gt; &lt;a href=\"#\"&gt;...\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 68
                },
                {
                    "body": "<p>You typically create a temporary parent element to which you can write the <code>innerHTML</code>, then extract the contents:</p>\n\n<pre><code>var wrapper= document.createElement('div');\nwrapper.innerHTML= '&lt;div&gt;&lt;a href=\"#\"&gt;&lt;/a&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;';\nvar div= wrapper.firstChild;\n</code></pre>\n\n<p>If the element whose outer-HTML you've got is a simple <code>&lt;div&gt;</code> as here, this is easy. If it might be something else that can't go just anywhere, you might have more problems. For example if it were a <code>&lt;li&gt;</code>, you'd have to have the parent wrapper be a <code>&lt;ul&gt;</code>.</p>\n\n<p>But IE can't write <code>innerHTML</code> on elements like <code>&lt;tr&gt;</code> so if you had a <code>&lt;td&gt;</code> you'd have to wrap the whole HTML string in <code>&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;</code>...<code>&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code>, write <em>that</em> to <code>innerHTML</code> and extricate the actual <code>&lt;td&gt;</code> you wanted from a couple of levels down.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>Okay, I realized the answer myself, after I had to think about other people's answers. :P</p>\n\n<pre><code>var htmlContent = ... // a response via AJAX containing HTML\nvar e = document.createElement('div');\ne.setAttribute('style', 'display: none;');\ne.innerHTML = htmlContent;\ndocument.body.appendChild(e);\nvar htmlConvertedIntoDom = e.lastChild.childNodes; // the HTML converted into a DOM element :), now let's remove the\ndocument.body.removeChild(e);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>While surfing I found some great online tools to convert HTML to DOM in pure javascript.</p>\n\n<p>I prefer <a href=\"http://www.html2dom.com/\" rel=\"nofollow\">this</a>. Just change some variable names and function name to your preference and your DOM is ready. Have fun....</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can do it like this:</p>\n\n<pre><code>String.prototype.toDOM=function(){\n  var d=document\n     ,i\n     ,a=d.createElement(\"div\")\n     ,b=d.createDocumentFragment();\n  a.innerHTML=this;\n  while(i=a.firstChild)b.appendChild(i);\n  return b;\n};\n\nvar foo=\"&lt;img src='//placekitten.com/100/100'&gt;foo&lt;i&gt;bar&lt;/i&gt;\".toDOM();\ndocument.body.appendChild(foo);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Why not use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.insertAdjacentHTML\" rel=\"nofollow\">insertAdjacentHTML</a></p>\n\n<p>for example:</p>\n\n<pre><code>// &lt;div id=\"one\"&gt;one&lt;/div&gt; \nvar d1 = document.getElementById('one'); \nd1.insertAdjacentHTML('afterend', '&lt;div id=\"two\"&gt;two&lt;/div&gt;');\n\n// At this point, the new structure is:\n// &lt;div id=\"one\"&gt;one&lt;/div&gt;&lt;div id=\"two\"&gt;two&lt;/div&gt;here\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is a little code that is useful.</p>\n\n<pre><code>var uiHelper = function () {\n\nvar htmls = {};\n\nvar getHTML = function (url) {\n                /// &lt;summary&gt;Returns HTML in a string format&lt;/summary&gt;\n                /// &lt;param name=\"url\" type=\"string\"&gt;The url to the file with the HTML&lt;/param&gt;\n\n    if (!htmls[url])\n    {\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.open(\"GET\", url, false);\n    xmlhttp.send();\n    htmls[url] = xmlhttp.responseText;\n     };\n     return htmls[url];\n    };\n\n        return {\n            getHTML: getHTML\n        };\n}();\n</code></pre>\n\n<p><strong>--Convert the HTML string into a DOM Element</strong></p>\n\n<pre><code>String.prototype.toDomElement = function () {\n\n        var wrapper = document.createElement('div');\n        wrapper.innerHTML = this;\n        var df= document.createDocumentFragment();\n        return df.addChilds(wrapper.children);\n};\n</code></pre>\n\n<p><strong>--prototype helper</strong></p>\n\n<pre><code>HTMLElement.prototype.addChilds = function (newChilds) {\n        /// &lt;summary&gt;Add an array of child elements&lt;/summary&gt;\n        /// &lt;param name=\"newChilds\" type=\"Array\"&gt;Array of HTMLElements to add to this HTMLElement&lt;/param&gt;\n        /// &lt;returns type=\"this\" /&gt;\n        for (var i = 0; i &lt; newChilds.length; i += 1) { this.appendChild(newChilds[i]); };\n        return this;\n};\n</code></pre>\n\n<p><strong>--Usage</strong></p>\n\n<pre><code> thatHTML = uiHelper.getHTML('/Scripts/elevation/ui/add/html/add.txt').toDomElement();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a way to convert HTML like:</p>\n\n<pre><code>&lt;div&gt;\n&lt;a href=\"#\"&gt;&lt;/a&gt;\n&lt;span&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>or any other HTML string into DOM element? (So that I could use appendChild()). I know that I can do .innerHTML and .innerText, but that is not what I want -- I literally want to be capable of converting a dynamic HTML string into a DOM element so that I could pass it in a .appendChild().</p>\n\n<p>Update: There seems to be confusion. I have the HTML contents in a string, as a value of a variable in JavaScript. There is no HTML content in the document.</p>\n",
            "last_activity_date": 1422808104,
            "question_id": 3103962,
            "score": 40,
            "tags": [
                "javascript",
                "html",
                "dom"
            ],
            "title": "Converting HTML string into DOM elements?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>It's not a JavaScript parser itself, but there's a project called <a href=\"http://zaach.github.com/jison/\">Jison</a> (like Bison) for generating parsers that's written in JS.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The only <a href=\"http://en.wikipedia.org/wiki/Metacircular_interpreter\">metacircular interpreter</a> that I have seen implemented in JavaScript is the <a href=\"http://mxr.mozilla.org/mozilla/source/js/narcissus/\">Narcissus</a> Engine.</p>\n\n<p>It was developed also by Brendan Eich, they used a lot of non-standard extensions that are specific to <em>SpiderMonkey</em>, I think it will not work on V8.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Crescent Fresh answered this question in the comments:</p>\n\n<blockquote>\n  <p>JSLint contains a JavaScript parser written in JavaScript. See <a href=\"https://github.com/douglascrockford/JSLint/blob/master/jslint.js\">JSlint by Douglas Crockford</a> Around line 2712 begins the parser. JSLint is written to also handle html so you'd have to gloss over those parts</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p><a href=\"https://github.com/mishoo/UglifyJS\">UglifyJS</a> (JS compressor/beautifier in JavaScript) contains a complete JavaScript parser that exposes a simple API.  It's heavily tested and used in some big projects (WebKit).</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>JS/CC - The LALR(1) parser and lexical analyzer generator for JavaScript, written in JavaScript - <a href=\"http://jscc.jmksf.com/\" rel=\"nofollow\">http://jscc.jmksf.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <a href=\"http://esprima.org/test/compare.html\">fastest</a> Javascript parser in Javascript is <a href=\"http://esprima.org/\">esprima</a>.</p>\n\n<p>It also gives you </p>\n\n<blockquote>\n  <p>Sensible format for the abstract syntax tree (AST), compatible with Mozilla Parser API</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API</a>:</p>\n\n<blockquote>\n  <p>Recent builds of the standalone SpiderMonkey shell include a\n  reflection of the SpiderMonkey parser, made available as a JavaScript\n  API.</p>\n</blockquote>\n\n<p>Note that this is only an API in JavaScript, the parser is C++.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Microsoft has developed the TypeScript compiler in TypeScript. Since TypeScript is a strict superset of JavaScript, and TypeScript compiles to JavaScript, the resulting compiler is technically a JavaScript compiler written in JavaScript.</p>\n\n<p>That of course depends upon your definition of \"compiler\". But if a compiler accepting a superset of language A is not a language A compiler, that excludes GCC, Clang and pretty much every other compiler.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"http://marijnhaverbeke.nl/acorn/\">acorn</a> is a really fast JavaScript parser written in JavaScript. It's even faster than <a href=\"http://esprima.org/\">esprima</a> now. The results I got in Chrome form <a href=\"http://esprima.org/test/compare.html\">esprima's speed comparison page</a>:</p>\n\n<pre><code>Source            Esprima    UglifyJS2    Traceur    Acorn\nUnderscore 1.4.1  15.1       23.8         14.2       7.6\nBackbone 1.0.0    17.1       30.2         16.7       7.9\njQuery 1.9.1      241.1      247.2        125.4      81.4\nTotal             273.3 ms   301.2 ms     156.3 ms   96.9 ms\n</code></pre>\n\n<p>It's compatible with Mozilla's Parser API, so you can use <a href=\"https://github.com/Constellation/escodegen\">escodegen</a> to generate JavaScript from the parse trees.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>U can try this one, although U have to write javascript grammar from the scratch:</p>\n\n<p><a href=\"http://parser.moonyweb.com\" rel=\"nofollow\">Moony Parser</a></p>\n\n<p>i think not that fast as Esprima or Acorn, but it features easily extensible grammar syntax.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to add some lightweight syntactic sugar to JavaScript source code, and process it using a JavaScript-based build system. Are there any open source JavaScript parsers written in JavaScript? And are they reasonably fast when run on top of V8 or a similar high-performance JavaScript implementation?</p>\n\n<p>Thank you for any pointers you can provide!</p>\n",
            "last_activity_date": 1399199948,
            "question_id": 2554519,
            "score": 54,
            "tags": [
                "javascript",
                "parsing"
            ],
            "title": "JavaScript parser in JavaScript"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Unfortunately, time zones are not regular enough for some simple function. See the map in <a href=\"http://en.wikipedia.org/wiki/Time_zone\" rel=\"nofollow\">Wikipedia - Time Zone</a></p>\n\n<p>However, some very rough approximation can be calculated:  1 hour difference corresponds to 15 degrees longitude (360 / 24).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You should be able to, if you know the polygon of the timezone to see if a given lat/lon is inside it.</p>\n\n<p><a href=\"http://www.worldtimeserver.com/time_zone_guide/\" rel=\"nofollow\">World Time Zone Database</a>\n<img src=\"http://i.stack.imgur.com/JbIsN.gif\" alt=\"enter image description here\"></p>\n\n<p><a href=\"http://www.worldtimeserver.com/time_zone_guide/withpolygons/myworld.htm\" rel=\"nofollow\">Latitude/Longitude Polygon Data</a>\n<img src=\"http://i.stack.imgur.com/RsoWG.gif\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I had this problem a while back and did exactly what adam suggested:</p>\n\n<ul>\n<li>Download the <a href=\"http://download.geonames.org/export/dump/cities15000.zip\">database of cities</a> from geonames.org</li>\n<li>convert it to a compact lat/lon -> timezone list</li>\n<li>use an <a href=\"http://en.wikipedia.org/wiki/R-tree\">R-Tree</a> implementation to efficiently lookup the nearest city (or rather, its timezone) to a given coordinate</li>\n</ul>\n\n<p>IIRC it took less than 1 second to populate the R-Tree, and it could then perform thousands of lookups per second (both on a 5 year old PC).</p>\n",
                    "is_accepted": true,
                    "score": 47
                },
                {
                    "body": "<p>For areas on land, there are some <a href=\"http://efele.net/maps/tz/\">shapefile maps</a> that have been made for the timezones of the tz (Olson) database.  They're not updated quite as regularly as the tz database itself, but it's a great starting point and seems to be very accurate for most purposes.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I ran into this problem while working on another project and looked into it very deeply.  I found all of the existing solutions to be lacking in major ways.  </p>\n\n<p>Downloading the GeoNames data and using some spatial index to look up the nearest point is definitely an option, and it will yield the correct result a lot of the time, but it can easily fail if a query point is on the wrong side of a time zone border from the nearest point in the database.</p>\n\n<p>A more accurate method is to use a digital map of the time zones and to write code to find the polygon in that map that contains a given query point.  Thankfully, there is an excellent map of the time zones of the world available at <a href=\"http://efele.net/maps/tz/world/\">http://efele.net/maps/tz/world/</a>.  To write an efficient query engine, you need to:</p>\n\n<ul>\n<li>Parse the ESRI shapefile format into a useful internal representation.</li>\n<li>Write point-in-polygon code to test whether a given query point is in a given polygon.</li>\n<li>Write an efficient spatial index on top of the polygon data so that you don't need to check every polygon to find the containing one.</li>\n<li>Handle queries that are not contained by any polygon (e.g., in the ocean).  In such cases, you should \"snap to\" the nearest polygon up to a certain distance, and revert to the \"natural\" time zone (the one determined by longitude alone) in the open ocean.  To do this, you will need code to compute the distance between a query point and a line segment of a polygon (this is non-trivial since latitude and longitude are a non-Euclidean coordinate system), and your spatial index will need to be able to return nearby polygons, not just potentially containing polygons.</li>\n</ul>\n\n<p>Each of those are worthy of their own Stack Overflow question/answer page.</p>\n\n<p>After concluding that none of the existing solutions out there met my needs, I wrote my own solution and made it available here:</p>\n\n<p><a href=\"http://askgeo.com\">http://askgeo.com</a></p>\n\n<p>AskGeo uses a digital map and has a highly optimized spatial index that allows for running more than 10,000 queries per second on my computer in a single thread.  And it is thread safe, so even higher throughput is certainly possible.  This is a serious piece of code, and it took us a long time to develop, so we are offering it under a commercial license.  </p>\n\n<p>It is written in Java, so using it in PHP would involve using:</p>\n\n<p><a href=\"http://php-java-bridge.sourceforge.net/doc/how_it_works.php\">http://php-java-bridge.sourceforge.net/doc/how_it_works.php</a></p>\n\n<p>We are also open to porting it for a bounty. For details on the pricing, and for detailed documentation, see <a href=\"http://askgeo.com\">http://askgeo.com</a>.</p>\n\n<p>I hope this is useful. It certainly was useful for the project I was working on.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Another solution is to import a table of cities with timezones and then to use the Haversine formula to find the nearest city in that table, relevant to your coordinates.\nI have posted a full description here: <a href=\"http://sylnsr.blogspot.com/2012/12/find-nearest-location-by-latitude-and.html\" rel=\"nofollow\">http://sylnsr.blogspot.com/2012/12/find-nearest-location-by-latitude-and.html</a></p>\n\n<p>For an example of loading the data in MySQL, I have posted an example here (with sources for downloading a small data dump): <a href=\"http://sylnsr.blogspot.com/2012/12/load-timezone-data-by-city-and-country.html\" rel=\"nofollow\">http://sylnsr.blogspot.com/2012/12/load-timezone-data-by-city-and-country.html</a></p>\n\n<p>Note that the accuracy of the look-up will be based on how comprehensive your look-up data is.</p>\n\n<p>Credits and References:\n<a href=\"http://stackoverflow.com/questions/574691/mysql-great-circle-distance-haversine-formula\">MySQL Great Circle Distance (Haversine formula)</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is old, but I spent some time looking for this answer.  Found something very useful.  Google does time zone lookups by long/lat.  2,500 per day limit (or 100,000 for business users).</p>\n\n<p><a href=\"https://developers.google.com/maps/documentation/timezone/\">https://developers.google.com/maps/documentation/timezone/</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can use time zone boundaries, provided here:</p>\n\n<p><a href=\"http://www.opensource.apple.com/source/TimeZoneData/\" rel=\"nofollow\">http://www.opensource.apple.com/source/TimeZoneData/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How about this ?</p>\n\n<pre><code>// ben@jp\n\nfunction get_nearest_timezone($cur_lat, $cur_long, $country_code = '') {\n    $timezone_ids = ($country_code) ? DateTimeZone::listIdentifiers(DateTimeZone::PER_COUNTRY, $country_code)\n                                    : DateTimeZone::listIdentifiers();\n\n    if($timezone_ids &amp;&amp; is_array($timezone_ids) &amp;&amp; isset($timezone_ids[0])) {\n\n        $time_zone = '';\n        $tz_distance = 0;\n\n        //only one identifier?\n        if (count($timezone_ids) == 1) {\n            $time_zone = $timezone_ids[0];\n        } else {\n\n            foreach($timezone_ids as $timezone_id) {\n                $timezone = new DateTimeZone($timezone_id);\n                $location = $timezone-&gt;getLocation();\n                $tz_lat   = $location['latitude'];\n                $tz_long  = $location['longitude'];\n\n                $theta    = $cur_long - $tz_long;\n                $distance = (sin(deg2rad($cur_lat)) * sin(deg2rad($tz_lat))) \n                + (cos(deg2rad($cur_lat)) * cos(deg2rad($tz_lat)) * cos(deg2rad($theta)));\n                $distance = acos($distance);\n                $distance = abs(rad2deg($distance));\n                // echo '&lt;br /&gt;'.$timezone_id.' '.$distance; \n\n                if (!$time_zone || $tz_distance &gt; $distance) {\n                    $time_zone   = $timezone_id;\n                    $tz_distance = $distance;\n                } \n\n            }\n        }\n        return  $time_zone;\n    }\n    return 'none?';\n}\n//timezone for one NY co-ordinate\necho get_nearest_timezone(40.772222,-74.164581) ;\n// more faster and accurate if you can pass the country code \necho get_nearest_timezone(40.772222, -74.164581, 'US') ;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've written a small Java class to do this. It could be easily translated to PHP. The database is embedded in the code itself.  It's accurate to 22km.</p>\n\n<p><a href=\"https://sites.google.com/a/edval.biz/www/mapping-lat-lng-s-to-timezones\" rel=\"nofollow\">https://sites.google.com/a/edval.biz/www/mapping-lat-lng-s-to-timezones</a></p>\n\n<p>The whole code is basically stuff like this:</p>\n\n<pre><code>         if (lng &lt; -139.5) {\n          if (lat &lt; 68.5) {\n           if (lng &lt; -140.5) {\n            return 371;\n           } else {\n            return 325;\n           }\n</code></pre>\n\n<p>...so I presume a translation to PHP would be easy.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>How exact do your results have to be? If a rough estimate is enough, calculate the offset yourself:</p>\n\n<pre><code>offset = direction * longitude * 24 / 360\n</code></pre>\n\n<p>where direction is 1 for east, -1 for west, and longitude is in (-180,180)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Not sure if this is useful or not, but I built a database of timezone shapes (for North America only), which is painstakingly accurate and current not just for borders, but also for daylight saving time observance.  Also shapes for unofficial exceptions.  So you could query the set of shapes for a given location could return multiple shapes that apply to that location, and choose the correct one for the time of year.</p>\n\n<p>You can see an image of the shapes at <a href=\"http://OnTimeZone.com/OnTimeZone_shapes.gif\" rel=\"nofollow\">http://OnTimeZone.com/OnTimeZone_shapes.gif</a>.  Blue shapes are around areas that do not observe daylight saving time, magenta shapes those that do observe daylight saving time, and neon green shapes (small and tough to see at that zoom level) are for areas with unofficial deviation from the official time zone.  Lots more detail on that available at the OnTimeZone.com site.</p>\n\n<p>The data available for download at OnTimeZone.com is free for non-commercial use.  The shape data, which is not available for download, is available for commercial license.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>is there any possibility to determine the timezone of point (lat/lon) without using webservices? Geonames.org is not stable enough for me to use :( I need this to work in PHP.</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1404148046,
            "question_id": 5584602,
            "score": 33,
            "tags": [
                "javascript",
                "php",
                "geolocation",
                "timezone",
                "gis"
            ],
            "title": "Determine timezone from latitude/longitude without using web services like Geonames.org"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>No standard method available. You need to iterate and you can create a simple helper:</p>\n\n<pre><code>Object.prototype.getKeyByValue = function( value ) {\n    for( var prop in this ) {\n        if( this.hasOwnProperty( prop ) ) {\n             if( this[ prop ] === value )\n                 return prop;\n        }\n    }\n}\n\nvar test = {\n   key1: 42,\n   key2: 'foo'\n};\n\ntest.getKeyByValue( 42 );  // returns 'key1'\n</code></pre>\n\n<p><strong>One word of caution</strong>: Even if the above works, its generally a bad idea to extend any host or native object's <code>.prototype</code>. I did it here because it fits the issue very well. Anyway, you should probably use this function outside the <code>.prototype</code> and pass the object into it instead.</p>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<p>As said, iteration is needed. For instance, in modern browser you could have:</p>\n\n<pre><code>var key = Object.keys(obj).filter(function(key) {return obj[key] === value})[0];\n</code></pre>\n\n<p>Where <code>value</code> contains the value you're looking for.\nSaid that, I would probably use a loop.</p>\n\n<p>Otherwise you could use a proper \"hashmap\" object - there are several implementation in JS around - or implement by your own.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><strong>I use this function:</strong></p>\n\n<pre><code>Object.prototype.getKey = function(value){\n  for(var key in this){\n    if(this[key] == value){\n      return key;\n    }\n  }\n  return null;\n};\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>// ISO 639: 2-letter codes\nvar languageCodes = {\n  DA: 'Danish',\n  DE: 'German',\n  DZ: 'Bhutani',\n  EL: 'Greek',\n  EN: 'English',\n  EO: 'Esperanto',\n  ES: 'Spanish'\n};\n\nvar key = languageCodes.getKey('Greek');\nconsole.log(key); // EL\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><a href=\"http://jsfiddle.net/rTazZ/2/\" rel=\"nofollow\">http://jsfiddle.net/rTazZ/2/</a>  </p>\n\n<pre><code>var a = new Array(); \n    a.push({\"1\": \"apple\", \"2\": \"banana\"}); \n    a.push({\"3\": \"coconut\", \"4\": \"mango\"});\n\n    GetIndexByValue(a, \"coconut\");\n\n    function GetIndexByValue(arrayName, value) {  \n    var keyName = \"\";\n    var index = -1;\n    for (var i = 0; i &lt; arrayName.length; i++) { \n       var obj = arrayName[i]; \n            for (var key in obj) {          \n                if (obj[key] == value) { \n                    keyName = key; \n                    index = i;\n                } \n            } \n        }\n        //console.log(index); \n        return index;\n    } \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Or, easier yet - create a new object with the keys and values in the order you want then do look up against that object. We have had conflicts using the prototype codes above. You don't have to use the String function around the key, that is optional.</p>\n\n<pre><code> newLookUpObj = {};\n $.each(oldLookUpObj,function(key,value){\n        newLookUpObj[value] = String(key);\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Since the values are unique, it should be possible to add the values as an additional set of keys. This could be done with the following shortcut.</p>\n\n<pre><code>var foo = {};\nfoo[foo.apple = \"an apple\"] = \"apple\";\nfoo[foo.pear = \"a pear\"] = \"pear\";\n</code></pre>\n\n<p>This would permit retrieval either via the key or the value:</p>\n\n<pre><code>var key = \"apple\";\nvar value = \"an apple\";\n\nconsole.log(foo[value]); // \"apple\"\nconsole.log(foo[key]); // \"an apple\"\n</code></pre>\n\n<p>This does assume that there are no common elements between the keys and values.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>with Underscore.js</p>\n\n<pre><code>var hash = {\n foo: 1,\n bar: 2\n};\n\n(_.invert(hash))[1]; // =&gt; 'foo'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>This is a small extension to the Underscorejs method, and uses <strong>Lodash</strong> instead:</p>\n\n<pre><code>var getKeyByValue = function(searchValue) {\n  return _.findKey(hash, function(hashValue) {\n    return searchValue === hashValue;\n  });\n}\n</code></pre>\n\n<p><a href=\"http://lodash.com/docs#findKey\" rel=\"nofollow\"><strong>FindKey</strong></a> will <a href=\"https://github.com/lodash/lodash/blob/2.4.1/dist/lodash.compat.js#L2275\" rel=\"nofollow\">search and return the first key</a> which matches the value.<br>\nIf you want the last match instead, use <a href=\"http://lodash.com/docs#findLastKey\" rel=\"nofollow\">FindLastKey</a> instead.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I created the <em>bimap</em> library (<a href=\"https://github.com/alethes/bimap\" rel=\"nofollow\">https://github.com/alethes/bimap</a>) which implements a powerful, flexible and efficient JavaScript bidirectional map interface. It has no dependencies and is usable both on the server-side (in Node.js, you can install it with <code>npm install bimap</code>) and in the browser (by linking to <em>lib/bimap.js</em>).</p>\n\n<p>Basic operations are really simple:</p>\n\n<pre><code>var bimap = new BiMap;\nbimap.push(\"k\", \"v\");\nbimap.key(\"k\") // =&gt; \"v\"\nbimap.val(\"v\") // =&gt; \"k\"\n\nbimap.push(\"UK\", [\"London\", \"Manchester\"]);\nbimap.key(\"UK\"); // =&gt; [\"London\", \"Manchester\"]\nbimap.val(\"London\"); // =&gt; \"UK\"\nbimap.val(\"Manchester\"); // =&gt; \"UK\"\n</code></pre>\n\n<p>Retrieval of the key-value mapping is equally fast in both directions. There are no costly object/array traversals under the hood so the average access time remains constant regardless of the size of the data. </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>function getKeyByValue(object, value) {\n  return Object.keys(object).find(key =&gt; object[key] === value);\n}\n</code></pre>\n\n<p>ES6, no prototype mutations or external libraries.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a quite simple JavaScript object, which I use as an associative array. Is there a simple function allowing me to get the key for a value, or do I have to iterate the object and find it out manually?</p>\n",
            "last_activity_date": 1422447106,
            "question_id": 9907419,
            "score": 48,
            "tags": [
                "javascript",
                "object",
                "associative"
            ],
            "title": "JavaScript object get key by value"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>For security reasons, you can't move the mouse pointer with javascript, nor simulate a click with it. </p>\n\n<p>What is it that you are trying to accomplish?</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As <a href=\"http://stackoverflow.com/questions/3277369/simulate-a-click-by-using-x-y-coordinates-javascript/3277397#3277397\">Aircule answered</a>, you can't simulate a \"real\" mouse click via JavaScript.  However, you can fire an element's click event, and you can get an element using x/y co-ordinates - so you could fire a click event on the element at x/y.  Since you tagged jQuery:</p>\n\n<pre><code>$(document.elementFromPoint(x, y)).click();  \n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/En/DOM:document.elementFromPoint\">https://developer.mozilla.org/En/DOM:document.elementFromPoint</a></p>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>Umm, yes of course you can simulate a mouseclick, by creating an event and dispatching it:</p>\n\n<pre><code>function click(x,y){\n    var ev = document.createEvent(\"MouseEvent\");\n    var el = document.elementFromPoint(x,y);\n    ev.initMouseEvent(\n        \"click\",\n        true /* bubble */, true /* cancelable */,\n        window, null,\n        x, y, 0, 0, /* coordinates */\n        false, false, false, false, /* modifier keys */\n        0 /*left*/, null\n    );\n    el.dispatchEvent(ev);\n}\n</code></pre>\n\n<p>Beware of using the <code>click</code> method on an element; it is widely implemented but not standard but will fail in eg PhantomJS. I assume jQuery's implemention of <code>.click()</code> does the right thing but have not confirmed.</p>\n",
                    "is_accepted": false,
                    "score": 18
                }
            ],
            "body": "<p>Is it possible to use given coordinates in order to simulate a click in JavaScript within a webpage?</p>\n",
            "last_activity_date": 1382360447,
            "question_id": 3277369,
            "score": 27,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "mouseevent",
                "mouseclick-event"
            ],
            "title": "How to simulate a click by using x,y coordinates in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<ol>\n<li>You can duplicate IDs which need to be unique.</li>\n<li>jQuery's <a href=\"http://api.jquery.com/clone/\" rel=\"nofollow\"><strong>clone method</strong></a> call like, <code>$(element).clone(true);</code> will clone data and event listeners, but ID's will still also be cloned. So to avoid duplicate IDs, don't use IDs for items that need to be cloned.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<ol>\n<li><p>It should be avoided because then you <strong>lose</strong> any handlers that may have been on that \nDOM element.</p></li>\n<li><p>You can try to get around that by appending clones of the DOM elements instead of completely overwriting them.</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Well it really depends. There is a possibility of creating duplicate elements with the same ID, which is never a good thing.</p>\n\n<p>jQuery also has methods that can do this for you.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I wouldn't do it simply because you're asking the browser to re-parse HTML markup that has already been parsed.</p>\n\n<p>I'd be more inclined to use the native <code>cloneNode(true)</code> to duplicate the existing DOM elements.</p>\n\n<pre><code>var node, i=0;\n\nwhile( node = x.childNodes[ i++ ] ) {\n    y.appendChild( node.cloneNode( true ) );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This method of \"copying\" HTML elements from one place to another is the result of a misapprehension of what a browser does.  Browsers don't keep an HTML document in memory somewhere and repeatedly modify the HTML based on commands from JavaScript.</p>\n\n<p>When a browser first loads a page, it <em>parses</em> the HTML document and turns it into a DOM structure.  This is a relationship of objects following a W3C standard (well, mostly...).  The original HTML is from then on completely redundant.  The browser doesn't care what the original HTML structure was; its understanding of the web page is the DOM structure that was created from it.  If your HTML markup was incorrect/invalid, it will be corrected in some way by the web browser; the DOM structure will not contain the invalid code in any way.</p>\n\n<p>Basically, HTML should be treated as a way of serialising a DOM structure to be passed over the internet or stored in a file locally.</p>\n\n<p>It should not, therefore, be used for modifying an existing web page. The DOM (Document Object Model) has a system for changing the content of a page.  This is based on the relationship of nodes, not on the HTML serialisation.  So when you add an <code>li</code> to a <code>ul</code>, you have these two options (assuming <code>ul</code> is the list element):</p>\n\n<pre><code>// option 1: innerHTML\nul.innerHTML += '&lt;li&gt;foobar&lt;/li&gt;';\n\n// option 2: DOM manipulation\nvar li = document.createElement('li');\nli.appendChild(document.createTextNode('foobar'));\nul.appendChild(li);\n</code></pre>\n\n<p>Now, the first option looks a lot simpler, but this is only because the browser has abstracted a lot away for you: internally, the browser has to convert the element's children to a string, then append some content, then convert the string back to a DOM structure.  The second option corresponds to the browser's native understanding of what's going on.</p>\n\n<p>The second major consideration is to think about the limitations of HTML.  When you think about a webpage, not everything relevant to the element can be serialised to HTML.  For instance, event handlers bound with <code>x.onclick = function();</code> or <code>x.addEventListener(...)</code> won't be replicated in <code>innerHTML</code>, so they won't be copied across.  So the new elements in <code>y</code> won't have the event listeners.  This probably isn't what you want.</p>\n\n<p>So the way around this is to work with the native DOM methods:</p>\n\n<pre><code>for (var i = 0; i &lt; x.childNodes.length; i++) {\n    y.appendChild(x.childNodes[i].cloneNode(true));\n}\n</code></pre>\n\n<p>Reading the MDN documentation will probably help to understand this way of doing things:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/DOM/Node.appendChild\"><code>appendChild</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/Node.cloneNode\"><code>cloneNode</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en/DOM/Node.childNodes\"><code>childNodes</code></a></li>\n</ul>\n\n<p>Now the problem with this (as with option 2 in the code example above) is that it is <em>very</em> verbose, far longer than the <code>innerHTML</code> option would be.  This is when you appreciate having a JavaScript library that does this kind of thing for you.  For example, in jQuery:</p>\n\n<pre><code>$('#y').html($('#x').clone(true, true).contents());\n</code></pre>\n\n<p>This is a lot more explicit about what you want to happen.  As well as having various performance benefits and preserving event handlers, for example, it also helps you to understand what your code is doing. This is good for your soul as a JavaScript programmer and makes bizarre errors significantly less likely!</p>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<p>First, let's define the task that has to be accomplished here:</p>\n\n<p>All child nodes of DIV <code>x</code> have to be \"copied\" (together with all its descendants = deep copy) and \"pasted\" into the DIV <code>y</code>. If any of the descendants of <code>x</code> has one or more event handlers bound to it, we would presumably want those handlers to continue working on the copies (once they have been placed inside <code>y</code>).</p>\n\n<p>Now, this is not a trivial task. Luckily, the jQuery library (and all the other popular libraries as well I assume) offers a convenient method to accomplish this task: <code>.clone()</code>. Using this method, the solution could be written like so:</p>\n\n<pre><code>$( x ).contents().clone( true ).appendTo( y );\n</code></pre>\n\n<p>The above solution is the answer to question (2). Now, let's tackle question (1):</p>\n\n<p>This</p>\n\n<pre><code>y.innerHTML = x.innerHTML;\n</code></pre>\n\n<p>is not just a bad idea - it's an awful one. Let me explain...</p>\n\n<p>The above statement can be broken down into two steps.</p>\n\n<ol>\n<li><p>The expression <code>x.innerHTML</code> is evaluated,</p></li>\n<li><p>That return value of that expression (which is a string) is assigned to <code>y.innerHTML</code>.</p></li>\n</ol>\n\n<p>The nodes that we want to copy (the child nodes of <code>x</code>) are DOM nodes. They are objects that exist in the browser's memory. When evaluating <code>x.innerHTML</code>, the browser <strong>serializes</strong> (stringifies) those DOM nodes into a string (HTML source code string). </p>\n\n<p>Now, if we needed such a string (to store it in a database, for instance), then this serialization would be understandable. However, we do not need such a string (at least not as an end-product).</p>\n\n<p>In step 2, we are assigning this string to <code>y.innerHTML</code>. The browser evaluates this by <strong>parsing</strong> the string which results in a set of DOM nodes which are then inserted into DIV <code>y</code> (as child nodes).</p>\n\n<p>So, to sum up:</p>\n\n<p>Child nodes of <code>x</code> --> <strong>stringifying</strong> --> HTML source code string --> <strong>parsing</strong> --> Nodes (copies)</p>\n\n<p>So, what's the problem with this approach? Well, DOM nodes may contain properties and functionality which <strong>cannot and therefore won't be serialized</strong>. The most important such functionality are event handlers that are bound to descendants of <code>x</code> - the copies of those elements won't have any event handlers bound to them. The handlers got lost in the process. </p>\n\n<p>An interesting analogy can be made here:</p>\n\n<p>Digital signal --> D/A conversion --> Analog signal --> A/D conversion --> Digital signal</p>\n\n<p>As you probably know, the resulting digital signal is not an exact copy of the original digital signal - some information got lost in the process. </p>\n\n<p>I hope you understand now why <code>y.innerHTML = x.innerHTML</code> should be avoided.</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>Let's say that we have a DIV <code>x</code> on the page and we want to duplicate (\"copy-paste\") the contents of that DIV into another DIV <code>y</code>. We could do this like so:</p>\n\n<pre><code>y.innerHTML = x.innerHTML;\n</code></pre>\n\n<p>or with jQuery:</p>\n\n<pre><code>$(y).html( $(x).html() );\n</code></pre>\n\n<p>However, it appears that this method is not a good idea, and that it should be avoided. </p>\n\n<p>(1) Why should this method be avoided?</p>\n\n<p>(2) How should this be done instead?</p>\n\n<hr>\n\n<p><strong>Update:</strong><br>\nFor the sake of this question let's assume that there are no elements with ID's inside the DIV <code>x</code>.<br>\n(Sorry I forgot to cover this case in my original question.)</p>\n\n<p><strong>Conclusion:</strong><br>\nI have posted my own answer to this question below (as I originally intended). Now, I also planed to accept my own answer <code>:P</code>, but lonesomeday's answer is so amazing that I have to accept it instead. </p>\n",
            "last_activity_date": 1336748362,
            "question_id": 7392930,
            "score": 38,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "browser"
            ],
            "title": "Why should y.innerHTML = x.innerHTML; be avoided?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Well - you won't be able to do it server-side on post-back as the file will get submitted (uploaded) during the post-back.</p>\n\n<p>I think you may be able to do it on the client using JavaScript.  Personally, I use a third party component called <a href=\"http://www.telerik.com/products/aspnet-ajax/controls/upload/overview.aspx\" rel=\"nofollow\">radUpload by Telerik</a>.  It has a good client-side and server-side API, and it provides a progress bar for big file uploads.</p>\n\n<p>I'm sure there are open source solutions available, too.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your only option seems to be client-side validation, because server side means the file was already uploaded.  Also the MIME type is usually dictated by the file extension.  </p>\n\n<p>use a JavaScript Framework like jQuery to overload the onsubmit event of the form.  Then check the extension.  This will limit most attempts.  However if a person changes an image to extension XLS then you will have a problem.</p>\n\n<p>I don't know if this is an option for you, but you have more client side control when using something like Silverlight or Flash to upload.  You may consider using one of these technologies for your upload process.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From  javascript, you should be able to get the filename in the onsubmit handler. So in your case, you should do something like:</p>\n\n<pre><code>&lt;form onsubmit=\"if (document.getElementById('fileUpload').value.match(/xls$/) || document.getElementById('fileUpload').value.match(/xlsx$/)) { alert ('Bad file type') ; return false; } else { return true; }\"&gt;...&lt;/form&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You could use a regular expression validator on the upload control:</p>\n\n<pre><code>  &lt;asp:RegularExpressionValidator id=\"FileUpLoadValidator\" runat=\"server\" ErrorMessage=\"Upload Excel files only.\" ValidationExpression=\"^(([a-zA-Z]:)|(\\\\{2}\\w+)\\$?)(\\\\(\\w[\\w].*))(.xls|.XLS|.xlsx|.XLSX)$\" ControlToValidate=\"fileUpload\"&gt; &lt;/asp:RegularExpressionValidator&gt;\n</code></pre>\n\n<p>There is also the accept attribute of the input tag:</p>\n\n<pre><code>&lt;input type=\"file\" accept=\"application/msexcel\" id=\"fileUpload\" runat=\"server\"&gt;\n</code></pre>\n\n<p>but I did not have much success when I tried this (with FF3 and IE7)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think there are different ways to do this. Since im not familiar with asp i can only give you some hints to check for a specific filetype:</p>\n\n<p>1) the safe way: get more informations about the header of the filetype you wish to pass. parse the uploaded file and compare the headers </p>\n\n<p>2) the quick way: split the name of the file into two pieces -> name of the file and the ending of the file. check out the ending of the file and compare it to the filetype you want to allow to be uploaded</p>\n\n<p>hope it helps :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Seems like you are going to have limited options since you want the check to occur before the upload.  I think the best you are going to get is to use javascript to validate the extension of the file.  You could build a hash of valid extensions and then look to see if the extension of the file being uploaded existed in the hash.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input type=\"file\" name=\"FILENAME\"  size=\"20\" onchange=\"check_extension(this.value,\"upload\");\"/&gt;\n&lt;input type=\"submit\" id=\"upload\" name=\"upload\" value=\"Attach\" disabled=\"disabled\" /&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>var hash = {\n  'xls'  : 1,\n  'xlsx' : 1,\n};\n\nfunction check_extension(filename,submitId) {\n      var re = /\\..+$/;\n      var ext = filename.match(re);\n      var submitEl = document.getElementById(submitId);\n      if (hash[ext]) {\n        submitEl.disabled = false;\n        return true;\n      } else {\n        alert(\"Invalid filename, please select another file\");\n        submitEl.disabled = true;\n\n        return false;\n      }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Avoid the standard Asp.Net control and use the NeadUpload component from Brettle Development: <a href=\"http://www.brettle.com/neatupload\" rel=\"nofollow\">http://www.brettle.com/neatupload</a><br/>\n<br/>\nFaster, easier to use, no worrying about the maxRequestLength parameter in config files and very easy to integrate.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As some people have mentioned, Javascript is the way to go.  Bear in mind that the \"validation\" here is only by file extension, it won't validate that the file is a real excel spreadsheet!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I agree with Chris, checking the extension is not validation of the type of file any way you look at it. <a href=\"http://www.telerik.com/products/aspnet-ajax/controls/upload/overview.aspx\">Telerik's radUpload</a> is probably your best option, it provides a ContentType property of the file being uploaded, which you can compare to known mime types. You should check for:</p>\n\n<p>application/vnd.ms-excel, </p>\n\n<p>application/excel, </p>\n\n<p>application/x-msexcel </p>\n\n<p>and for the new 2k7 format:</p>\n\n<p>application/vnd.openxmlformatsofficedocument.spreadsheetml.sheet</p>\n\n<p>Telerik used to sell radUpload as an individual component, but now its wrapped into the controls suite, which makes it a little more expensive, but by far its the easiest way to check for the true type</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Ensure that you always check for the file extension in server-side to ensure that no one can upload a <strong>malicious file</strong> such as .aspx, .asp etc.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As an alternative option, could you use the \"accept\" attribute of HTML File Input which defines which MIME types are acceptable.</p>\n\n<p>Definition <a href=\"http://www.w3schools.com/jsref/dom_obj_fileupload.asp\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It's pretty simple using regulare expression validator.  </p>\n\n<pre><code>&lt;asp:RegularExpressionValidator\nid=\u201dRegularExpressionValidator1\u2033\nrunat=\u201dserver\u201d\nErrorMessage=\u201dOnly zip file is allowed!\u201d\nValidationExpression =\u201d^.+(.zip|.ZIP)$\u201d\nControlToValidate=\u201dFileUpload1\u2033\n&gt; &lt;/asp:RegularExpressionValidator&gt;\n</code></pre>\n\n<p><a href=\"http://patelshailesh.com/index.php/client-side-validation-of-file-types-permissible-to-upload\">Client-Side Validation of File Types Permissible to Upload</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Based on kd7's reply suggesting you check for the files content type, here's a wrapper method:</p>\n\n<pre><code>private bool FileIsValid(FileUpload fileUpload)\n{\n    if (!fileUpload.HasFile)\n    {\n        return false;\n    }\n    if (fileUpload.PostedFile.ContentType == \"application/vnd.ms-excel\" ||\n        fileUpload.PostedFile.ContentType == \"application/excel\" ||\n        fileUpload.PostedFile.ContentType == \"application/x-msexcel\" ||\n        fileUpload.PostedFile.ContentType == \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" //this is xlsx format\n        )\n        return true;\n\n    return false;\n}\n</code></pre>\n\n<p>returning true if the file to upload is .xls or .xlsx</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As another respondent notes, the file type can be spoofed (e.g., .exe renamed .pdf), which checking for the MIME type will not prevent (i.e., the .exe will show a MIME of \"application/pdf\" if renamed as .pdf). I believe a check of the true file type can only be done server side; an easy way to check it using System.IO.BinaryReader is described here:</p>\n\n<p><a href=\"http://forums.asp.net/post/2680667.aspx\" rel=\"nofollow\">http://forums.asp.net/post/2680667.aspx</a></p>\n\n<p>and VB version here: </p>\n\n<p><a href=\"http://forums.asp.net/post/2681036.aspx\" rel=\"nofollow\">http://forums.asp.net/post/2681036.aspx</a></p>\n\n<p>Note that you'll need to know the binary 'codes' for the file type(s) you're checking for, but you can get them by implementing this solution and debugging the code.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using <code>&lt;input type=\"file\" id=\"fileUpload\" runat=\"server\"&gt;</code> to upload a file in an ASP.NET application. I would like to limit the file type of the upload (example: limit to .xls or .xlsx file extensions). </p>\n\n<p>Both JavaScript or server-side validation are OK (as long as the server side validation would take place before the files are being uploaded - there could be some very large files uploaded, so any validation needs to take place before the actual files are uploaded).</p>\n",
            "last_activity_date": 1382558730,
            "question_id": 71944,
            "score": 25,
            "tags": [
                "asp.net",
                "javascript",
                "validation",
                "file",
                "upload"
            ],
            "title": "How do I Validate the File Type of a File Upload?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You need to send the ID as the function parameters. Do it like this:</p>\n\n<pre><code>&lt;button id=\"1\" onClick=\"reply_click(this.id)\"&gt;B1&lt;/button&gt;\n&lt;button id=\"2\" onClick=\"reply_click(this.id)\"&gt;B2&lt;/button&gt;\n&lt;button id=\"3\" onClick=\"reply_click(this.id)\"&gt;B3&lt;/button&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nfunction reply_click(clicked_id)\n{\n    alert(clicked_id);\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>This will send the ID <code>this.id</code> as <code>clicked_id</code> which you can use in your function. <a href=\"http://jsfiddle.net/R77EB/\"><strong>See it in action here.</strong></a></p>\n",
                    "is_accepted": true,
                    "score": 158
                },
                {
                    "body": "<p>(I think the <code>id</code> attribute needs to start with a letter. Could be wrong.)</p>\n\n<p>You could go for event delegation...</p>\n\n<pre><code>&lt;div onClick=\"reply_click()\"&gt;\n    &lt;button id=\"1\"&gt;&lt;/button&gt;\n    &lt;button id=\"2\"&gt;&lt;/button&gt;\n    &lt;button id=\"3\"&gt;&lt;/button&gt;\n&lt;/div&gt;\n\nfunction reply_click(e) {\n    e = e || window.event;\n    e = e.target || e.srcElement;\n    if (e.nodeName === 'BUTTON') {\n        alert(e.id);\n    }\n}\n</code></pre>\n\n<p>...but that requires you to be relatively comfortable with the wacky event model.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>In general, things are easier to keep organized if you separate your code and your markup. Define all of your elements, and then in your JavaScript section, define the various actions that should be performed on those elements.</p>\n\n<p>When an event handler is called, it's called within the context of the element that was clicked on. So, the identifier <strong>this</strong> will refer to the DOM element that you clicked on. You can then access attributes of the element through that identifier.</p>\n\n<p>For example:\n<code></p>\n\n<pre><code>&lt;button id=\"1\"&gt;Button 1&lt;/button&gt;\n&lt;button id=\"2\"&gt;Button 2&lt;/button&gt;\n&lt;button id=\"3\"&gt;Button 3&lt;/button&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nvar reply_click = function()\n{\n    alert(\"Button clicked, id \"+this.id+\", text\"+this.innerHTML);\n}\ndocument.getElementById('1').onclick = reply_click;\ndocument.getElementById('2').onclick = reply_click;\ndocument.getElementById('3').onclick = reply_click;\n&lt;/script&gt;\n</code></pre>\n\n<p></code></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Button 1 Button 2 Button 3</p>\n\n<pre><code>var reply_click = function() { \n     alert(\"Button clicked, id \"+this.id+\", text\"+this.innerHTML); \n} \ndocument.getElementById('1').onclick = reply_click; \ndocument.getElementById('2').onclick = reply_click; \ndocument.getElementById('3').onclick = reply_click;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;button id=\"1\" onClick=\"reply_click(this)\"&gt;&lt;/button&gt;\n&lt;button id=\"2\" onClick=\"reply_click(this)\"&gt;&lt;/button&gt;\n&lt;button id=\"3\" onClick=\"reply_click(this)\"&gt;&lt;/button&gt;\n\nfunction reply_click(obj)\n{\nvar id = obj.id;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code> &lt;button id=\"1\"class=\"clickMe\"&gt;&lt;/button&gt;\n\n&lt;button id=\"2\" class=\"clickMe\"&gt;&lt;/button&gt;\n\n&lt;button id=\"3\" class=\"clickMe\"&gt;&lt;/button&gt;\n\n\n\n$('.clickMe').live('click',function(){\n\nvar clickedID = this.id;\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>With pure javascript:</p>\n\n<pre><code> var buttons = document.getElementsByTagName(\"button\");\n var buttonsCount = buttons.length;\nfor (var i = 0; i &lt;= buttonsCount; i += 1) {\n    buttons[i].onclick = function(e) {\n        alert(this.id);\n    };\n}\u200b\n</code></pre>\n\n<p>check it On <a href=\"http://jsfiddle.net/TKKBV/2/\" rel=\"nofollow\">JsFiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;button id=\"1\"class=\"clickMe\"&gt;&lt;/button&gt;\n&lt;button id=\"2\" class=\"clickMe\"&gt;&lt;/button&gt;\n&lt;button id=\"3\" class=\"clickMe\"&gt;&lt;/button&gt;\n\n$('.clickMe').click(function(){\n    var clickedID = this.id;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<h1>How to do it without inline JavaScript</h1>\n\n<p>it is generally recommended to avoid inline JavaScript, but rarely is there an example of how to do it.<br>\nHere is my way of attaching events to buttons.<br>\nI'm not entirely happy with how much longer the recommended method is compared to a simple <code>onClick</code> attribute.  </p>\n\n<h2>Modern browsers only</h2>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n(function(doc){\n    var hasClass = function(el,className) {\n        return (' ' + el.className + ' ').indexOf(' ' + className + ' ') &gt; -1;\n    }\n    doc.addEventListener('click', function(e){\n      if(hasClass(e.target, 'click-me')){\n          e.preventDefault();\n          doSomething.call(e.target, e);\n      }\n    });\n})(document);\n\nfunction insertHTML(str){\n  var s = document.getElementsByTagName('script'), lastScript = s[s.length-1];\n  lastScript.insertAdjacentHTML(\"beforebegin\", str);\n}\n\nfunction doSomething(event){\n  console.log(this.id); // this will be the clicked element\n}\n&lt;/script&gt;\n&lt;!--... other head stuff ...--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!--Best if you inject the button element with javascript if you plan to support users with javascript disabled--&gt;\n&lt;script&gt;\ninsertHTML('&lt;button class=\"click-me\" id=\"btn1\"&gt;Button 1&lt;/button&gt;');\n&lt;/script&gt;\n\n&lt;!--Use this when you don't care about broken buttons when javascript is disabled.--&gt;\n&lt;!--buttons can be used outside of forms http://stackoverflow.com/a/14461672/175071 --&gt;\n&lt;button class=\"click-me\" id=\"btn2\"&gt;Button 2&lt;/button&gt;\n&lt;input class=\"click-me\" type=\"button\" value=\"Button 3\" id=\"btn3\"&gt;\n\n&lt;!--Use this when you want to lead the user somewhere when javascript is disabled--&gt;\n&lt;a class=\"click-me\" href=\"/path/to/non-js/action\" id=\"btn4\"&gt;Button 4&lt;/a&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2>Cross-browser</h2>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\n(function(doc){\n    var cb_addEventListener = function(obj, evt, fnc) {\n        // W3C model\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fnc, false);\n            return true;\n        } \n        // Microsoft model\n        else if (obj.attachEvent) {\n            return obj.attachEvent('on' + evt, fnc);\n        }\n        // Browser don't support W3C or MSFT model, go on with traditional\n        else {\n            evt = 'on'+evt;\n            if(typeof obj[evt] === 'function'){\n                // Object already has a function on traditional\n                // Let's wrap it with our own function inside another function\n                fnc = (function(f1,f2){\n                    return function(){\n                        f1.apply(this,arguments);\n                        f2.apply(this,arguments);\n                    }\n                })(obj[evt], fnc);\n            }\n            obj[evt] = fnc;\n            return true;\n        }\n        return false;\n    };\n    var hasClass = function(el,className) {\n        return (' ' + el.className + ' ').indexOf(' ' + className + ' ') &gt; -1;\n    }\n\n    cb_addEventListener(doc, 'click', function(e){\n      if(hasClass(e.target, 'click-me')){\n          e.preventDefault ? e.preventDefault() : e.returnValue = false;\n          doSomething.call(e.target, e);\n      }\n    });\n})(document);\n\nfunction insertHTML(str){\n  var s = document.getElementsByTagName('script'), lastScript = s[s.length-1];\n  lastScript.insertAdjacentHTML(\"beforebegin\", str);\n}\n\nfunction doSomething(event){\n  console.log(this.id); // this will be the clicked element\n}\n&lt;/script&gt;\n&lt;!--... other head stuff ...--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!--Best if you inject the button element with javascript if you plan to support users with javascript disabled--&gt;\n&lt;script type=\"text/javascript\"&gt;\ninsertHTML('&lt;button class=\"click-me\" id=\"btn1\"&gt;Button 1&lt;/button&gt;');\n&lt;/script&gt;\n\n&lt;!--Use this when you don't care about broken buttons when javascript is disabled.--&gt;\n&lt;!--buttons can be used outside of forms http://stackoverflow.com/a/14461672/175071 --&gt;\n&lt;button class=\"click-me\" id=\"btn2\"&gt;Button 2&lt;/button&gt;\n&lt;input class=\"click-me\" type=\"button\" value=\"Button 3\" id=\"btn3\"&gt;\n\n&lt;!--Use this when you want to lead the user somewhere when javascript is disabled--&gt;\n&lt;a class=\"click-me\" href=\"/path/to/non-js/action\" id=\"btn4\"&gt;Button 4&lt;/a&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2>Cross-browser with jQuery</h2>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\n(function($){\n    $(document).on('click', '.click-me', function(e){\n      doSomething.call(this, e);\n    });\n})(jQuery);\n\nfunction insertHTML(str){\n  var s = document.getElementsByTagName('script'), lastScript = s[s.length-1];\n  lastScript.insertAdjacentHTML(\"beforebegin\", str);\n}\n\nfunction doSomething(event){\n  console.log(this.id); // this will be the clicked element\n}\n&lt;/script&gt;\n&lt;!--... other head stuff ...--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!--Best if you inject the button element with javascript if you plan to support users with javascript disabled--&gt;\n&lt;script type=\"text/javascript\"&gt;\ninsertHTML('&lt;button class=\"click-me\" id=\"btn1\"&gt;Button 1&lt;/button&gt;');\n&lt;/script&gt;\n\n&lt;!--Use this when you don't care about broken buttons when javascript is disabled.--&gt;\n&lt;!--buttons can be used outside of forms http://stackoverflow.com/a/14461672/175071 --&gt;\n&lt;button class=\"click-me\" id=\"btn2\"&gt;Button 2&lt;/button&gt;\n&lt;input class=\"click-me\" type=\"button\" value=\"Button 3\" id=\"btn3\"&gt;\n\n&lt;!--Use this when you want to lead the user somewhere when javascript is disabled--&gt;\n&lt;a class=\"click-me\" href=\"/path/to/non-js/action\" id=\"btn4\"&gt;Button 4&lt;/a&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You can run this before the document is ready, clicking the buttons will work because we attach the event to the document.</p>\n\n<p>Here is a <a href=\"http://jsfiddle.net/QjX4K/\" rel=\"nofollow\">jsfiddle</a><br>\nFor some strange reason the <code>insertHTML</code> function does not work in it even though it works in all my browsers.</p>\n\n<p>You can always replace <code>insertHTML</code> with <code>document.write</code> if you don't mind it's <a href=\"http://stackoverflow.com/questions/802854/why-is-document-write-considered-a-bad-practice\">drawbacks</a></p>\n\n<pre><code>&lt;script&gt;\ndocument.write('&lt;button class=\"click-me\" id=\"btn1\"&gt;Button 1&lt;/button&gt;');\n&lt;/script&gt;\n</code></pre>\n\n<p>Sources:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4537963/what-are-alternatives-to-document-write\">What are alternatives to document.write?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5898656/test-if-an-element-contains-a-class\">Test if an element contains a class?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1000597/event-preventdefault-function-not-working-in-ie\">event.preventDefault() function not working in IE.</a></li>\n<li><a href=\"https://gist.github.com/eduardocereto/955642\" rel=\"nofollow\">https://gist.github.com/eduardocereto/955642</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can simply do it this way:  </p>\n\n<pre><code>&lt;input type=\"button\" id=\"1234\" onclick=\"showId(this.id\") value=\"click me to show my id\"/&gt;\n&lt;script type=\"text/javascript\"&gt;\n   function showId(obj) {\n        var id=obj;\n        alert(id);\n   }\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do find the id of the button which is being clicked?</p>\n\n<pre><code>&lt;button id=\"1\" onClick=\"reply_click()\"&gt;&lt;/button&gt;\n&lt;button id=\"2\" onClick=\"reply_click()\"&gt;&lt;/button&gt;\n&lt;button id=\"3\" onClick=\"reply_click()\"&gt;&lt;/button&gt;\n\nfunction reply_click()\n{\n}\n</code></pre>\n",
            "last_activity_date": 1414718419,
            "question_id": 4825295,
            "score": 60,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "JavaScript - onClick to get the ID of the clicked button"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') &gt; -1;\n</code></pre>\n\n<p>However, as mentioned User Agents can be spoofed so it is always best to use feature-detection (<em>such as <a href=\"http://modernizr.com/\">Modernizer</a></em>) when handling these issues, as other answers mention.</p>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<pre><code>var is_chrome = /chrome/.test( navigator.userAgent.toLowerCase() );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>even shorter: <code>var is_chrome = /chrome/i.test( navigator.userAgent );</code></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>You may also want the specific version of Chrome:</p>\n\n<pre><code>var ua = navigator.userAgent;\nif(/chrome/i.test(ua)) {\n    var uaArray = ua.split(' ')\n    ,   version = uaArray[uaArray.length - 2].substr(7);\n}\n</code></pre>\n\n<p>Apologies to The Big Lebowski for using his answer within mine.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>User agents can be spoofed! </p>\n\n<p>To check if browser is <strong>Google Chrome</strong>, try this:</p>\n\n<pre><code>// please note, that IE11 now returns undefined again for window.chrome\nvar isChromium = window.chrome,\n    vendorName = window.navigator.vendor;\nif(isChromium !== null &amp;&amp; isChromium !== undefined &amp;&amp; vendorName === \"Google Inc.\") {\n   // is Google chrome \n} else { \n   // not Google chrome \n}\n</code></pre>\n\n<p>Best to use feature / object property detection! The reason this works is because if you use the Google Chrome inspector and go to the console tab. Type 'window' and press enter. Then you be able to view the DOM properties for the 'window object'. When you collapse the object you can view all the properties, including the 'chrome' property. </p>\n\n<p>You can't use strictly equals true anymore to check in IE for <code>window.chrome</code>. IE used to return <code>undefined</code>, now it returns <code>true</code>. <strong>But guess what, IE11 now returns undefined again.</strong> IE11 also returns a empty string <code>\"\"</code> for <code>window.navigator.vendor</code>. </p>\n\n<p>I hope this helps!</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>Thank you to <a href=\"http://stackoverflow.com/users/2180105/halcyon991\">Halcyon991</a> for pointing out below, that the new Opera 18+ also outputs to true for <code>window.chrome</code>. Looks like <strong>Opera 18</strong> is based on <strong>Chromium 31</strong>. So I added a check to make sure the <code>window.navigator.vendor</code> is: <code>\"Google Inc\"</code> and not is <code>\"Opera Software ASA\"</code>. Also thanks to <a href=\"http://stackoverflow.com/users/219843/ring\">Ring</a> and <a href=\"http://stackoverflow.com/users/759452/adrien-be\">Adrien Be</a> for the heads up about Chrome 33 not returning true anymore... <code>window.chrome</code> now checks if not null. But play close attention to IE11, I added the check back for <code>undefined</code> since IE11 now outputs <code>undefined</code>, like it did when first released.. then after some update builds it outputted to <code>true</code> .. now recent update build is outputting <code>undefined</code> again. Microsoft can't make up it's mind!</p>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>A much simpler solution is just to use:</p>\n\n<pre><code>var isChrome = !!window.chrome;\n</code></pre>\n\n<p>The <code>!!</code> just converts the object to a boolean value. In non-Chrome browsers, this property will be <code>undefined</code>, which is not truthy.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I need some function returning a boolean value to check if the browser is <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Chrome</a>.</p>\n\n<p>How do I create such functionality?</p>\n",
            "last_activity_date": 1408104767,
            "question_id": 4565112,
            "score": 56,
            "tags": [
                "javascript",
                "html",
                "google-chrome",
                "browser-detection"
            ],
            "title": "JavaScript: How to find out if the user browser is Chrome?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Okay this is what I have come up with so far:</p>\n\n<pre><code>&lt;script type='text/javascript'&gt;\nvar s_ajaxListener = new Object();\ns_ajaxListener.tempOpen = XMLHttpRequest.prototype.open;\ns_ajaxListener.tempSend = XMLHttpRequest.prototype.send;\ns_ajaxListener.callback = function () {\n  // this.method :the ajax method used\n  // this.url    :the url of the requested script (including query string, if any) (urlencoded) \n  // this.data   :the data sent, if any ex: foo=bar&amp;a=b (urlencoded)\n}\n\nXMLHttpRequest.prototype.open = function(a,b) {\n  if (!a) var a='';\n  if (!b) var b='';\n  s_ajaxListener.tempOpen.apply(this, arguments);\n  s_ajaxListener.method = a;  \n  s_ajaxListener.url = b;\n  if (a.toLowerCase() == 'get') {\n    s_ajaxListener.data = b.split('?');\n    s_ajaxListener.data = s_ajaxListener.data[1];\n  }\n}\n\nXMLHttpRequest.prototype.send = function(a,b) {\n  if (!a) var a='';\n  if (!b) var b='';\n  s_ajaxListener.tempSend.apply(this, arguments);\n  if(s_ajaxListener.method.toLowerCase() == 'post')s_ajaxListener.data = a;\n  s_ajaxListener.callback();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>DIRECTIONS:</strong> </p>\n\n<p>Just c/p this onto your page or include it in a .js file or whatever. This will create an object called s_ajaxListener. Whenever an AJAX GET or POST request is made, s_ajaxListener.callback() is called, and the following properties are available:</p>\n\n<p><strong>s_ajaxListener.method</strong> : The ajax method used. This should be either GET or POST. NOTE: the value may not always be uppercase, it depends on how the specific request was coded. I'm debating the wisdom of automatically upper-casing it or leaving it to something else to toLowerCase() for a case-insensitive comparison.</p>\n\n<p><strong>s_ajaxListener.url</strong> : The url of the requested script (including query string, if any) (urlencoded). I have noticed, depending on how the data is sent and from which browser/framework, for example this value could end up being as \" \" or \"+\" or \"%20\".  I am debating the wisdom of decoding it here or leave it to something else. </p>\n\n<p><strong>s_ajaxListener.data</strong> : the data sent, if any ex: foo=bar&amp;a=b (same 'issue' as .url with it being url-encoded)</p>\n\n<p><strong>NOTES:</strong></p>\n\n<p>As it stands, <strong>this is not IE6 compatible</strong>. this solution is not quite good enough for me, as I want it to be IE6 compatible. But since a lot of other people don't care about IE6, I decided to post my solution in its current state, as it should work for you if you don't care about IE6. </p>\n\n<p><strong>I have tested this in</strong> (as of this posted date): Current Safari, Current Chrome, Current FireFox, IE8, IE8 (IE7 Compatible). It doesn't currently work with IE6 because IE6 uses an ActiveX object, while virtually everything else uses XMLHttpRequest.  </p>\n\n<p>Right now I don't have any clue how to, well basically prototype/extend/overload (?) ActiveXObject(\"Microsoft.XMLHTTP\"). This is what I am currently researching...does anybody know offhand?</p>\n\n<p>Under each of the browsers I tested above, this works with AJAX requests from a generic object, and also from the jquery and prototype frameworks. I know there are other frameworks out there, but IMO these 2 are the major ones.  I might possibly QA MooTools, but other than that, I'm fine with only testing those. </p>\n\n<p>If Anybody wants to contribute by testing and posting results about other browsers and/or frameworks, it would be appreciated :)</p>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<p>For IE 6 compatibility, how about :</p>\n\n<pre><code>&lt;script type='text/javascript'&gt;\n  var s_ajaxListener = new Object();\n\n  // Added for IE support\n  if (typeof XMLHttpRequest === \"undefined\") {\n    XMLHttpRequest = function () {\n      try { return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\"); }\n      catch (e) {}\n      try { return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\"); }\n      catch (e) {}\n      try { return new ActiveXObject(\"Microsoft.XMLHTTP\"); }\n      catch (e) {}\n      throw new Error(\"This browser does not support XMLHttpRequest.\");\n    };\n  }\n\n  s_ajaxListener.tempOpen = XMLHttpRequest.prototype.open;\n  s_ajaxListener.tempSend = XMLHttpRequest.prototype.send;\n  s_ajaxListener.callback = function () {\n    // this.method :the ajax method used\n    // this.url    :the url of the requested script (including query string, if any) (urlencoded) \n    // this.data   :the data sent, if any ex: foo=bar&amp;a=b (urlencoded)\n  }\n\n  XMLHttpRequest.prototype.open = function(a,b) {\n    if (!a) var a='';\n    if (!b) var b='';\n    s_ajaxListener.tempOpen.apply(this, arguments);\n    s_ajaxListener.method = a;  \n    s_ajaxListener.url = b;\n    if (a.toLowerCase() == 'get') {\n      s_ajaxListener.data = b.split('?');\n      s_ajaxListener.data = s_ajaxListener.data[1];\n    }\n  }\n\n  XMLHttpRequest.prototype.send = function(a,b) {\n    if (!a) var a='';\n    if (!b) var b='';\n    s_ajaxListener.tempSend.apply(this, arguments);\n    if(s_ajaxListener.method.toLowerCase() == 'post')s_ajaxListener.data = a;\n    s_ajaxListener.callback();\n  }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Okay so basically I want to have a bit of javascript on a page that somehow attaches some kind of global event listener that can detect and do something if an ajax request is made (without directly calling it from the call), regardless of how the ajax call is made. </p>\n\n<p>I figured out how to do this with jquery - if the ajax request is being done <em>by</em> jquery. Here is an example code for this:</p>\n\n<pre><code>$.post(\n  // requested script\n  'someScript.php', \n  // data to send\n  {\n    'foo' : 'bar',\n    'a' : 'b'\n  },\n  // receive response\n  function(response){\n    // do something\n  }\n); // .post\n\n// global event listener    \n$(document).ajaxSend(\n  function(event,request,settings){\n    alert(settings.url); // output: \"someScript.php\"\n    alert(settings.data); // output: \"foo=bar&amp;a=b\"\n  }\n);\n</code></pre>\n\n<p>With this code, regardless of where/how I call $.post(..), the global event listener will trigger. It also works if I use $.get or $.ajax (any jquery ajax methods), regardless of how/when I call it (attached as an onclick, on page load, whatever).  </p>\n\n<p>However, I want to be able to extend this listener to trigger regardless of what js framework is used, or even if no framework is used.  So for instance if I were to <strong><em>also</em></strong> have on a page the following code (generic ajax code from w3schools):</p>\n\n<pre><code>function loadXMLDoc()\n{\nif (window.XMLHttpRequest)\n  {// code for IE7+, Firefox, Chrome, Opera, Safari\n  xmlhttp=new XMLHttpRequest();\n  }\nelse\n  {// code for IE6, IE5\n  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\nxmlhttp.onreadystatechange=function()\n  {\n  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)\n    {\n    document.getElementById(\"myDiv\").innerHTML=xmlhttp.responseText;\n    }\n  }\nxmlhttp.open(\"GET\",\"test.txt\",true);\nxmlhttp.send();\n}\n</code></pre>\n\n<p>And then I have on some random link an onclick call to that function, my global ajax event listener should be able to <strong><em>also</em></strong> detect this request.  Well I added that code to my page and attached it to a random link's onclick (yes, the code itself works), but the jquery \"global event listener\" code above failed to detect that call. </p>\n\n<p>I did some more digging and I know I can basically save the object to a temp object and overwrite the current object with a \"wrapper\" object that will call a specified function and then call the temp function, but this requires me to know ahead of time the original object being created/used. But I won't always know that ahead of time...</p>\n\n<p>So...is this possible? Is there some way to detect an ajax get/post request was made, regardless of whether it was done with a generic object or from xyz framework?  Or am I just going to have to make duplicate code to handle each framework and also know ahead of time the ajax object(s) being created/used?</p>\n\n<p>edit:</p>\n\n<p>I forgot to mention that it is not enough to detect that a request occurred. I also need to capture the data being sent in the request.  The link provided in the comments below will help figure out if \"a\" request was made, but not get the data sent.  p.s. - the answer provided in the link below is not very clear, at least to me anyways.  </p>\n",
            "last_activity_date": 1408114937,
            "question_id": 3596583,
            "score": 42,
            "tags": [
                "javascript",
                "ajax"
            ],
            "title": "JavaScript detect an AJAX event"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The latter (<code>appendChild</code>) does <em>not</em> cause a complete rebuild of the DOM or even all of the elements/nodes within the target.</p>\n\n<p>The former (setting <code>innerHTML</code>) does cause a complete rebuild of the content of the target element, which if you're appending is unnecessary.</p>\n\n<p>Appending via <code>innerHTML += content</code> makes the browser run through all of the nodes in the element building an HTML string to give to the JavaScript layer. Your code then appends text to it and sets <code>innerHTML</code>, causing the browser to drop all of the old nodes in the target, re-parse all of that HTML, and build new nodes. So in that sense, it may not be efficient. (However, parsing HTML is <em>what browsers do</em> and they're really, really fast at it.)</p>\n\n<p>Setting <code>innerHTML</code> does indeed invalidate any references to elements within the target element you may be holding -- because those elements don't exist anymore, you removed them and then put in new ones (that look very similar) when you set <code>innerHTML</code>.</p>\n\n<p>In short, if you're <em>appending</em>, I'd use <code>appendChild</code> (or <code>insertAdjacentHTML</code>, see below). If you're replacing, there are very valid situations where using <code>innerHTML</code> is a better option than creating the tree yourself via the DOM API (speed being chief amongst them).</p>\n\n<p>Finally, it's worth mentioning <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.insertAdjacentHTML\" rel=\"nofollow\"><code>insertAdjacentHTML</code></a>, which is a function that you can use to insert nodes and elements into or next to an element using an HTML string. You can append to an element with it: <code>theElement.insertAdjacentHTML(\"beforeend\", \"the HTML goes here\");</code> The first argument is where to put the HTML; your choices are <code>\"beforebegin\"</code> (outside the element, just in front of it), <code>\"afterbegin\"</code> (inside the element, at the beginning), <code>\"beforeend\"</code> (inside the element, at the end), and <code>\"afterend\"</code> (outside the element, just in after it). Note that <code>\"afterbegin\"</code> and <code>\"beforeend\"</code> insert into the element itself, whereas <code>\"beforebegin\"</code> and <code>\"afterend\"</code> insert into the element's <em>parent</em>. Supported by all major desktop browsers, I have no idea how good mobile support is (although I'm sure iOS Safari and Android 2.x and up have it, at least), but <a href=\"https://gist.github.com/eligrey/1276030\" rel=\"nofollow\">the shim</a> is tiny.</p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>I've created a small gist with a performance comparison between innerHTML and appendChild.</p>\n\n<p>The last one wins by a wide margin</p>\n\n<p><a href=\"https://gist.github.com/oliverfernandez/5619180\" rel=\"nofollow\">https://gist.github.com/oliverfernandez/5619180</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>The question is, comparing concatination using innerHTML and appending a text node to an existing node. What is happening behind the scene?</p>\n\n<p>My thoughs around this so far:</p>\n\n<ul>\n<li>I'm guessing both are causing a\n'ReFlow'.</li>\n<li>The later, from what I know, also causes a complete rebuild of the DOM (correct? Are they both doing this?).</li>\n<li>The former seems to have some other nasty side effects, like causing previously saved references to child nodes to the node I'm modifying innerHTML, to no longer point to 'the current DOM'/'correct version of the child node'. In contrast, when appending children, references seem to stay intact. Why is this?</li>\n</ul>\n\n<p>I'm hoping you people can clear this up for me, thanks!</p>\n",
            "last_activity_date": 1412071713,
            "question_id": 2305654,
            "score": 22,
            "tags": [
                "javascript",
                "dom"
            ],
            "title": "&quot;innerHTML += ...&quot; vs &quot;appendChild(txtNode)&quot;"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><strong>Edited to add information about the File API</strong></p>\n\n<p>Since I originally wrote this answer, the <a href=\"http://dev.w3.org/2006/webapi/FileAPI/\">File API</a> has been proposed as a standard and implemented in Firefox, Google Chrome, Opera 11, and nightly builds of Safari 6 (Safari 6 has not been released yet, but once it is, it should support this API). IE does not yet support it, so you'll have to use your existing implementation for IE. The API is a bit more complicated than the older Mozilla API, as it is designed to support asynchronous reading of files, better support for binary files and decoding of different text encodings. There is <a href=\"https://developer.mozilla.org/en/using_files_from_web_applications\">some documentation available on the Mozilla Developer Network</a> as well as <a href=\"http://www.thebuzzmedia.com/html5-drag-and-drop-and-file-api-tutorial/\">various examples online</a>. You would use it as follows:</p>\n\n<pre><code>var file = document.getElementById(\"fileForUpload\").files[0];\nif (file) {\n    var reader = new FileReader();\n    reader.readAsText(file, \"UTF-8\");\n    reader.onload = function (evt) {\n        document.getElementById(\"fileContents\").innerHTML = evt.target.result;\n    }\n    reader.onerror = function (evt) {\n        document.getElementById(\"fileContents\").innerHTML = \"error reading file\";\n    }\n}\n</code></pre>\n\n<p><strong>Original answer</strong></p>\n\n<p>There does not appear to be a way to do this in WebKit (thus, Safari and Chrome). The only keys that a <a href=\"http://trac.webkit.org/export/42566/trunk/WebCore/html/File.idl\">File</a> object has are <code>fileName</code> and <code>fileSize</code>. According to the <a href=\"http://trac.webkit.org/changeset/34702\">commit message</a> for the File and FileList support, these are inspired by <a href=\"https://developer.mozilla.org/en/nsIDOMFile\">Mozilla's File object</a>, but they appear to support only a subset of the features.</p>\n\n<p>If you would like to change this, you could always <a href=\"http://webkit.org/coding/contributing.html\">send a patch</a> to the WebKit project. Another possibility would be to propose the Mozilla API for inclusion in <a href=\"http://www.whatwg.org/specs/web-apps/current-work/\">HTML 5</a>; the <a href=\"http://lists.whatwg.org/listinfo.cgi/whatwg-whatwg.org\">WHATWG</a> mailing list is probably the best place to do that. If you do that, then it is much more likely that there will be a cross-browser way to do this, at least in a couple years time. Of course, submitting either a patch or a proposal for inclusion to HTML 5 does mean some work defending the idea, but the fact that Firefox already implements it gives you something to start with.</p>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>Happy coding!<br>\nIf you get an error on Internet Explorer, Change the security settings to allow ActiveX</p>\n\n<pre><code>var CallBackFunction = function(content)\n{\n    alert(content);\n}\nReadFileAllBrowsers(document.getElementById(\"file_upload\"), CallBackFunction); \n\n//Tested in Mozilla Firefox browser, Chrome\nfunction ReadFileAllBrowsers(FileElement, CallBackFunction)\n{\ntry\n{\n    var file = FileElement.files[0];\n    var contents_ = \"\";\n\n     if (file) {\n        var reader = new FileReader();\n        reader.readAsText(file, \"UTF-8\");\n        reader.onload = function(evt)\n        {\n            CallBackFunction(evt.target.result);\n        }\n        reader.onerror = function (evt) {\n            alert(\"Error reading file\");\n        }\n    }\n}\ncatch (Exception)\n {\n    var fall_back =  ieReadFile(FileElement.value);\n    if(fall_back != false)\n    {\n        CallBackFunction(fall_back);\n    }\n }\n}\n\n///Reading files with Internet Explorer\nfunction ieReadFile(filename)\n{\n try\n {\n    var fso  = new ActiveXObject(\"Scripting.FileSystemObject\");\n    var fh = fso.OpenTextFile(filename, 1);\n    var contents = fh.ReadAll();\n    fh.Close();\n    return contents;\n }\n catch (Exception)\n  {\n    alert(Exception);\n    return false;\n  }\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function getFileContents() {\nvar file = document.getElementById(\"fileForUpload\").files[0];\nif (file) {\n    var reader = new FileReader();\n    reader.readAsText(file, \"UTF-8\");\n    reader.onload = function (evt) {\n        document.getElementById(\"fileContents\").innerHTML = evt.target.result;\n    };\n    reader.onerror = function (evt) {\n        document.getElementById(\"fileContents\").innerHTML = \"error reading file\";\n    };\n}else {\n    // try the IE method\n    var fileContents = ieReadFile(file);\n    try{\n    document.forms[0].fileContents.innerHTML = fileContents;\n    }catch(Exception){\n        document.getElementById(\"fileContents\").innerHTML = \"error reading file\";\n    }\n}\n</code></pre>\n\n<p>}  </p>\n\n<pre><code>function ieReadFile(filename) \n{\n    try\n    {\n        var fso  = new ActiveXObject(\"Scripting.FileSystemObject\"); \n        var fh = fso.OpenTextFile(filename, 1); \n        var contents = fh.ReadAll(); \n        fh.Close();\n        return contents;\n    }\n    catch (Exception)\n    {\n        return \"Cannot open file :(\";\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm attempting to provide a script-only solution for reading the contents of a file on a client machine through a browser.</p>\n\n<p>I have a solution that works with Firefox and Internet Explorer.  It's not pretty, but I'm only trying things at the moment:</p>\n\n<pre><code>function getFileContents() {\n    var fileForUpload = document.forms[0].fileForUpload;\n    var fileName = fileForUpload.value;\n\n    if (fileForUpload.files) {\n        var fileContents = fileForUpload.files.item(0).getAsBinary();\n        document.forms[0].fileContents.innerHTML = fileContents;\n    } else {\n        // try the IE method\n        var fileContents = ieReadFile(fileName);\n        document.forms[0].fileContents.innerHTML = fileContents;\n    }\n}   \t\n\nfunction ieReadFile(filename) \n{\n    try\n    {\n        var fso  = new ActiveXObject(\"Scripting.FileSystemObject\"); \n        var fh = fso.OpenTextFile(filename, 1); \n        var contents = fh.ReadAll(); \n        fh.Close();\n        return contents;\n    }\n    catch (Exception)\n    {\n        return \"Cannot open file :(\";\n    }\n}\n</code></pre>\n\n<p>I can call <code>getFileContents()</code> and it will write the contents into the <code>fileContents</code> text area.</p>\n\n<p><strong>Is there a way to do this in other browsers?</strong></p>\n\n<p>I'm most concerned with Safari and Chrome at the moment, but I'm open to suggestions for any other browser.</p>\n\n<p><strong>Edit:</strong> In response to the question, \"Why do you want to do this?\":</p>\n\n<p>Basically, I want to hash the file contents together with a one-time-password on the client side so I can send this information back as a verification.</p>\n",
            "last_activity_date": 1378386987,
            "question_id": 750032,
            "score": 22,
            "tags": [
                "javascript",
                "html",
                "file-io",
                "sandbox"
            ],
            "title": "Reading file contents on the client-side in javascript in various browsers"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>This is a good question, and I actually don't think it can be done easily. (<a href=\"http://old.nabble.com/click---dblclick-Problem-td8389800s27240.html\">Some discussion on this</a>)</p>\n\n<p>If it is super duper important for you to have this functionality, you could hack it like so:</p>\n\n<pre><code>function singleClick(e) {\n    // do something, \"this\" will be the DOM element\n}\n\nfunction doubleClick(e) {\n    // do something, \"this\" will be the DOM element\n}\n\n$(selector).click(function(e) {\n    var that = this;\n    setTimeout(function() {\n        var dblclick = parseInt($(that).data('double'), 10);\n        if (dblclick &gt; 0) {\n            $(that).data('double', dblclick-1);\n        } else {\n            singleClick.call(that, e);\n        }\n    }, 300);\n}).dblclick(function(e) {\n    $(this).data('double', 2);\n    doubleClick.call(this, e);\n});\n</code></pre>\n\n<p>And here is an <a href=\"http://jsbin.com/ahezu\">example of it at work</a>.</p>\n\n<p>As pointed out in the comments, there is a plugin for this that does what I did above pretty much, but packages it up for you so you don't have to see the ugly: <a href=\"http://plugins.jquery.com/project/FixClick\">FixClick</a>.</p>\n",
                    "is_accepted": true,
                    "score": 60
                },
                {
                    "body": "<p>The technique outlined in the other answers is known as <a href=\"http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/\">debouncing</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Raymond Chen has discussed some of the <a href=\"http://blogs.msdn.com/oldnewthing/archive/2004/10/15/242761.aspx\">implications of single-versus-double clicking</a> - although he's talking in the context of Windows, what he says is relevant to browser-based UI design.</p>\n\n<p>Basically, the action taken on a double click should be a logical thing to do after a single click. So for example, in a desktop UI, single click selects an item, and double click opens it (e.g. opens the file, or launches the application). The user would have to select the file to open it anyway, so it doesn't matter that the single click action is taken before the double click action.</p>\n\n<p>If you have a UI component whose double click action is completely unrelated to the single click action, such that it becomes necessary to prevent the single click action from occurring once the system realises it was actually a double click, then you really ought to rethink your design. Users will find it awkward and counter-intuitive, in that it will not act in the way they are used to things acting.</p>\n\n<p>If you still want to go that way, then you will either have to use the debouncing technique (in which case all single click actions will be delayed) or else implement some mechanism whereby the double click handler undoes the work done by the single click handler.</p>\n\n<p>You should also be aware that some users set a very long double click time. Somebody with, for example, arthritic hands might have a double click time of more than a second set in their system preferences, so the debouncing technique based on some arbitrary time period of your choosing is going to make your UI component inaccessible to those people if taking the single click action precludes taking the double click action. The \"undo what just happened on single click\" technique is the only viable workaround for this, as far as I know.</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>jQuery Sparkle provides a clean elegant solution for this, by implementing a singleclick custom event. By doing this, you can use it just like any other event, so:</p>\n\n<pre><code>$('#el').singleclick(function(){});\n// or event\n$('#el').bind('singleclick', function(){});\n</code></pre>\n\n<p>It also provides custom events for the last and first clicks of a series of clicks. And the lastclick custom event actually passes the amount of clicks back! So you could do this!</p>\n\n<pre><code>$('#el').lastclick(function(event,clicks){\n    if ( clicks === 3 ) alert('Tripple Click!');\n});\n</code></pre>\n\n<p>You can find the source code for defining the custom event <a href=\"http://github.com/balupton/jquery-sparkle/blob/9921fcbf1cbeab7a4f2f875a91cb8548f3f65721/scripts/resources/jquery.events.js#L256\" rel=\"nofollow\">here</a>.</p>\n\n<p>It's open source under the AGPL licence, so you can feel free to grab what you need out of it worry free! :-) It's also actively developed on a day to day basis so you will never be short on support.</p>\n\n<p>But most importantly it is a DRY Plugin/Effect Framework to allow you to develop plugins and extensions much more easily. So hope this helps to achieve that goal!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If this is for a button submitting a form (which is not necessarily the case for the original poster, but may be the case for other people getting here via Google), an easier option would be to disable the element that is being clicked on in your click event handler:</p>\n\n<pre><code>$(selector).click(function(e) {\n    $(this).prop('disable', true);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How is this done?</p>\n",
            "last_activity_date": 1366103482,
            "question_id": 1067464,
            "score": 30,
            "tags": [
                "javascript",
                "jquery",
                "event-handling",
                "click",
                "double-click"
            ],
            "title": "Need to cancel click/mouseup events when double-click event detected"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Nope. <code>keypress</code> will fire for every individual key that is pressed - except for modifier keys such as CTRL, ALT and SHIFT, you <em>can</em> combine them with other keys, so long as it is only one other key.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It depends. For \"normal\" keys, that means Non- <strong>Shift</strong>, <strong>Ctrl</strong>, <strong>ALT</strong>, (<strong>CMD</strong>), the answer is no, the event handler will catch/fire in a queue, one after another.</p>\n\n<p>For the modifier keys I mentioned above, there is a property on the event object.</p>\n\n<p>Example:</p>\n\n<pre><code>$(document).bind('keypress', function(event) {\n    if( event.which === 65 &amp;&amp; event.shiftKey ) {\n        alert('you pressed SHIFT+A');\n    }\n});\n</code></pre>\n\n<p><strong>Demo</strong>: <a href=\"http://www.jsfiddle.net/bM6uY/4/\">http://www.jsfiddle.net/bM6uY/4/</a></p>\n\n<p>Other propertys are:</p>\n\n<ul>\n<li><code>event.ctrlKey</code></li>\n<li><code>event.altKey</code></li>\n<li><code>event.metaKey</code></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>In order to detect multiple keys being held down, use the <code>keydown</code> and <code>keyup</code> events.</p>\n\n<pre><code>var keys = {};\n\n$(document).keydown(function (e) {\n    keys[e.which] = true;\n});\n\n$(document).keyup(function (e) {\n    delete keys[e.which];\n});\n</code></pre>\n\n<p>I've put together a demo here: <a href=\"http://jsfiddle.net/gFcuU/\">http://jsfiddle.net/gFcuU/</a>. It's kind of fun, though I noticed my keyboard is only able to detect at most 6 keys.</p>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>You can use my plugin for jquery to detect shortcuts. </p>\n\n<p>It basically cache's events and get what keys are pressed at the moment. If all the keys are pressed it fires function. </p>\n\n<p><a href=\"https://github.com/maciekpaprocki/bindShortcut\" rel=\"nofollow\">https://github.com/maciekpaprocki/bindShortcut</a></p>\n\n<p>You have small explanation how to use it in readme file. Hope this helps. Feedback more than appreciated.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you just want to fire a handler when several keys are pressed in series, try something like:</p>\n\n<pre><code>jQuery.multipress = function (keys, handler) {\n    'use strict';\n\n    if (keys.length === 0) {\n        return;\n    }\n\n    var down = {};\n    jQuery(document).keydown(function (event) {\n        down[event.keyCode] = true;\n    }).keyup(function (event) {\n        // Copy keys array, build array of pressed keys\n        var remaining = keys.slice(0),\n            pressed = Object.keys(down).map(function (num) { return parseInt(num, 10); }),\n            indexOfKey;\n        // Remove pressedKeys from remainingKeys\n        jQuery.each(pressed, function (i, key) {\n            if (down[key] === true) {\n                down[key] = false;\n                indexOfKey = remaining.indexOf(key);\n                if (indexOfKey &gt; -1) {\n                    remaining.splice(indexOfKey, 1);\n                }\n            }\n        });\n        // If we hit all the keys, fire off handler\n        if (remaining.length === 0) {\n            handler(event);\n        }\n    });\n};\n</code></pre>\n\n<p>For instance, to fire on s-t, </p>\n\n<pre><code>jQuery.multipress([83, 84], function () { alert('You pressed s-t'); })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a way for jQuery to detect that more than one key was pressed at the same time?</p>\n\n<p>Is there any alternative that allows for pressing two keys at the same time to be detected?</p>\n",
            "last_activity_date": 1424218408,
            "question_id": 4954403,
            "score": 26,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Can jQuery .keypress() detect more than one key at the same time?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>JSON is just a subset of JavaScript. But <code>eval</code> evaluates the full JavaScript language and not just the subset that\u2019s JSON.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you parse the JSON with <code>eval</code>, you're allowing the string being parsed to contain absolutely anything, so instead of just being a set of data, you could find yourself executing function calls, or whatever. </p>\n\n<p>Also, JSON's <code>parse</code> accepts an aditional parameter, reviver, that lets you specify how to deal with certain values, such as datetimes (more info and example in the inline documentation <a href=\"https://github.com/douglascrockford/JSON-js\">here</a>)</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><strong>You are more vulnerable to attacks</strong> if using <code>eval</code>:  JSON is a subset of Javascript and json.parse just parses JSON whereas <code>eval</code> would leave the door open to all JS expressions.</p>\n",
                    "is_accepted": true,
                    "score": 64
                },
                {
                    "body": "<p>Not all browsers have native JSON support so there will be times where you need to use <code>eval()</code>  to the JSON string. Use JSON parser from <a href=\"http://json.org\">http://json.org</a> as that handles everything a lot easier for you.</p>\n\n<p><code>Eval()</code> is an evil but against some browsers its a necessary evil but where you can avoid it, do so!!!!!</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>All <code>JSON.parse</code> implementations most likely use <code>eval()</code></p>\n\n<p><code>JSON.parse</code> is based on <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" rel=\"nofollow\">Douglas Crockford's solution</a>, which uses <code>eval()</code> right there on <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js#L469\" rel=\"nofollow\">line 469</a>.</p>\n\n<pre><code>// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\nj = eval('(' + text + ')');\n</code></pre>\n\n<p>The advantage of <code>JSON.parse</code> is that it verifies the argument is correct JSON syntax.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>There is a difference between what JSON.parse() and eval() will accept. Try eval on this:</p>\n\n<p>var x = \"{\\\"shoppingCartName\\\":\\\"shopping_cart:2000\\\"}\"</p>\n\n<pre><code>eval(x)         //won't work\nJSON.parse(x)   //does work\n</code></pre>\n\n<p>See this <a href=\"http://jsfiddle.net/jlowery2663/gSAS3/\" rel=\"nofollow\">example</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>My Spider Sense warns me that using <code>eval()</code> to parse incoming JSON is a bad idea.  I'm just wondering if <code>JSON.parse()</code> - which I assume is a part of JavaScript and not a browser-specific function - is more secure.</p>\n",
            "last_activity_date": 1405536050,
            "question_id": 1843343,
            "score": 53,
            "tags": [
                "javascript",
                "json"
            ],
            "title": "JSON.parse vs. eval()"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If your string is called <code>s</code> then</p>\n\n<pre><code>var id = s.match(/img_id=([^&amp;]+)/)[1]\n</code></pre>\n\n<p>will give it to you.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>    var url = window.location;\n    var urlAux = url.split('=');\n    var img_id = urlAux[1]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>got it from google, try to use this method</p>\n\n<pre><code>function getQuerystring2(key, default_) \n{ \n    if (default_==null) \n    { \n        default_=\"\"; \n    } \n    var search = unescape(location.search); \n    if (search == \"\") \n    { \n        return default_; \n    } \n    search = search.substr(1); \n    var params = search.split(\"&amp;\"); \n    for (var i = 0; i &lt; params.length; i++) \n    { \n        var pairs = params[i].split(\"=\"); \n        if(pairs[0] == key) \n        { \n            return pairs[1]; \n        } \n    } \n\n\nreturn default_; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use a trick of creating an <code>a</code>-element, add the url to it, and then use its <a href=\"https://developer.mozilla.org/en/window.location\">Location object</a>.</p>\n\n<pre><code>function parseUrl( url ) {\n    var a = document.createElement('a');\n    a.href = url;\n    return a;\n}\n\nparseUrl('http://mysite.com/form_image_edit.php?img_id=33').search\n</code></pre>\n\n<p>Which will output: <code>?img_id=33</code></p>\n\n<hr>\n\n<p>You could also use <a href=\"http://phpjs.org\">php.js</a> to get the <a href=\"http://phpjs.org/functions/parse_url:485\">parse_url function in JavaScript</a>.</p>\n\n<hr>\n\n<h3>Update (2012-07-05)</h3>\n\n<p>I would recommend using the excellent <a href=\"http://medialize.github.com/URI.js/\">URI.js</a> library if you need to do anything more than super simple URL handling.</p>\n",
                    "is_accepted": true,
                    "score": 81
                },
                {
                    "body": "<p>Existing good jQuery plugin <a href=\"https://github.com/allmarkedup/jQuery-URL-Parser\" rel=\"nofollow\">Purl (A JavaScript URL parser)</a>.This utility can be used in two ways - with jQuery or without...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I wrote a javascript url parsing library, <a href=\"https://github.com/kevincox/url.js\" rel=\"nofollow\">URL.js</a>, you can use it for this.</p>\n\n<p>Example:</p>\n\n<pre><code>url.parse(\"http://mysite.com/form_image_edit.php?img_id=33\").get.img_id === \"33\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use the jquery plugin <a href=\"http://plugins.jquery.com/url\" rel=\"nofollow\">http://plugins.jquery.com/url</a>. <code>$.url(\"?img_id\")</code> will return <code>33</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Something like this should work for you. Even if there are multiple query string values then this function should return the value of your desired key. </p>\n\n<pre><code>function getQSValue(url) \n{\n    key = 'img_id';\n    query_string = url.split('?');\n    string_values = query_string[1].split('&amp;');\n    for(i=0;  i &lt; string_values.length; i++)\n    {\n        if( string_values[i].match(key))\n            req_value = string_values[i].split('=');    \n    }\n    return req_value[1];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do I parse an url with jquery/ javascript?</p>\n\n<p>For instance I have this in my string,</p>\n\n<pre><code>http://mysite.com/form_image_edit.php?img_id=33\n</code></pre>\n\n<p>I want to get the value of <code>img_id</code></p>\n\n<p>I know I can do this easily with php with <code>parse_url()</code>, but I want to know if it is possible with javascrip.</p>\n",
            "last_activity_date": 1394379409,
            "question_id": 6644654,
            "score": 45,
            "tags": [
                "javascript",
                "jquery",
                "parse-url"
            ],
            "title": "Parse URL with jquery/ javascript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>I suggest to make an invisible iframe on the page and set it's src to url that you've received from the server - download will start without page reloading.</p>\n\n<p>Or you can just set the current document.location.href to received url address. But that's can cause for user to see an error if the requested document actually does not exists.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A agree with the methods mentioned by maxnk, however you may want to reconsider trying to automatically force the browser to download the URL.  It may work fine for binary files but for other types of files (text, PDF, images, video), the browser may want to render it in the window (or IFRAME) rather than saving to disk.</p>\n\n<p>If you really do need to make an Ajax call to get the final download links, what about using DHTML to dynamically write out the download link (from the ajax response) into the page?  That way the user could either click on it to download (if binary) or view in their browser - or select \"Save As\" on the link to save to disk.  It's an extra click, but the user has more control.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I'd suggest <code>window.open()</code> to open a popup window. If it's a download, there will be no window and you will get your file. If there is a 404 or something, the user will see it in a new window (hence, their work will not be bothered, but they will still get an error message).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If this is your own server application then i suggest using the following header</p>\n\n<pre><code>Content-disposition: attachment; filename=fname.ext\n</code></pre>\n\n<p>This will force any browser to download the file and not render it in the browser window.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Just call <code>window.location.href = new_url</code> from your javascript and it will redirect the browser to that URL as it the user had typed that into the address bar</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>We do it that way:\nFirst add this script.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction populateIframe(id,path) \n{\n    var ifrm = document.getElementById(id);\n    ifrm.src = \"download.php?path=\"+path;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Place this where you want the download button(here we use just a link):</p>\n\n<pre><code>&lt;iframe id=\"frame1\" style=\"display:none\"&gt;&lt;/iframe&gt;\n&lt;a href=\"javascript:populateIframe('frame1','&lt;?php echo $path; ?&gt;')\"&gt;download&lt;/a&gt;\n</code></pre>\n\n<p>The file 'download.php' (needs to be put on your server) simply contains:</p>\n\n<pre><code>&lt;?php \n   header(\"Content-Type: application/octet-stream\");\n   header(\"Content-Disposition: attachment; filename=\".$_GET['path']);\n   readfile($_GET['path']);\n?&gt;\n</code></pre>\n\n<p>So when you click the link, the hidden iframe then gets/opens the sourcefile 'download.php'. With the path as get parameter. \nWe think this is the best solution!</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>I have created an open source <a href=\"http://johnculviner.com/post/2012/03/22/Ajax-like-feature-rich-file-downloads-with-jQuery-File-Download.aspx\">jQuery File Download plugin</a> (<a href=\"http://jqueryfiledownload.apphb.com/\">Demo with examples</a>) (<a href=\"https://github.com/johnculviner/jquery.fileDownload\">GitHub</a>) which could also help with your situation. It works pretty similarly with an iframe but has some cool features that I have found quite handy:</p>\n\n<ul>\n<li>User never leaves the same page they initiated a file download from. This feature is becoming crucial for modern web applications</li>\n<li>Tested cross browser support (including mobile!)</li>\n<li>It supports POST and GET requests in a manner similar to jQuery's AJAX API</li>\n<li>successCallback and failCallback functions allow for you to be explicit about what the user sees in either situation</li>\n<li>In conjunction with jQuery UI a developer can easily show a modal telling the user that a file download is occurring, disband the modal after the download starts or even inform the user in a friendly manner that an error has occurred. See the Demo for an example of this.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Reading the answers - including the accepted one I'd like to point out the security implications of passing a path directly to readfile via GET. </p>\n\n<p>It may seem obvious to some but some may simply copy/paste this code:</p>\n\n<pre><code>&lt;?php \n   header(\"Content-Type: application/octet-stream\");\n   header(\"Content-Disposition: attachment; filename=\".$_GET['path']);\n   readfile($_GET['path']);\n?&gt;\n</code></pre>\n\n<p>So what happens if I pass something like '/path/to/fileWithSecrets' to this script?\nThe given script will happily send any file the webserver-user has access to.</p>\n\n<p>Please refer to this discussion for information how to prevent this: <a href=\"http://stackoverflow.com/questions/456546/how-do-i-make-sure-a-file-path-is-within-a-given-subdirectory\">How do I make sure a file path is within a given subdirectory?</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Why are you making server side stuff when all you need is to redirect browser to different window.location.href?</p>\n\n<p>Here is code that parses ?file= QueryString (<a href=\"http://stackoverflow.com/a/2880929\">taken from this question</a>) and redirects user to that address in 1 second (works for me even on Android browsers):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var urlParams;\n    (window.onpopstate = function () {\n        var match,\n        pl = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&amp;=]+)=?([^&amp;]*)/g,\n        decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n        query = window.location.search.substring(1);\n\n        urlParams = {};\n        while (match = search.exec(query))\n            urlParams[decode(match[1])] = decode(match[2]);\n    })();\n\n    (window.onload = function() {\n        var path = urlParams[\"file\"];\n        setTimeout(function() { document.location.href = path; }, 1000);\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>If you have jQuery in your project definitely remove those window.onpopstate &amp; window.onload handlers and do everything in $(document).ready(function () { } );</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this lib <a href=\"https://github.com/PixelsCommander/Download-File-JS\" rel=\"nofollow\">https://github.com/PixelsCommander/Download-File-JS</a> it`s more modern than all solutions described before because uses \"download\" attribute and combination of methods to bring best possible experience.</p>\n\n<p>Explained here - <a href=\"http://pixelscommander.com/en/javascript/javascript-file-downliading-ignore-content-type/\" rel=\"nofollow\">http://pixelscommander.com/en/javascript/javascript-file-downliading-ignore-content-type/</a></p>\n\n<p>Seems to be ideal piece of code for starting downloading in JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>To get around the security flaw in the top-voted answer, you can set the iframe src directly to the file you want (instead of an intermediate php file) and set the header information in an .htaccess file:</p>\n\n<pre><code>&lt;Files *.apk&gt;\n     ForceType application/force-download\n     Header set Content-Disposition attachment\n     Header set Content-Type application/vnd.android.package-archive\n     Header set Content-Transfer-Encoding binary\n&lt;/Files&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Let's say I have download links for files on my site. When clicked these links send an ajax request to the server which returns the URL with the location of the file. What I want to do is direct the browser to download the file when the response gets back. Is there a portable way to do this?</p>\n",
            "last_activity_date": 1394821597,
            "question_id": 365777,
            "score": 35,
            "tags": [
                "javascript"
            ],
            "title": "starting file download with JavaScript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>That return is not returning from <code>codeLatLng</code>; it's returning from the anonymous function being passed to <code>geocoder.geocode</code>.</p>\n\n<p>I think you'll need to pass the data using another mechanism e.g. a global variable</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>pass geocoder as a parameter to the codeLatLng() function.</p>\n\n<pre><code>function codeLatLng(geocoder) {\n</code></pre>\n\n<p>call it like so in your initialize function:</p>\n\n<pre><code>var addr = codeLatLng(geocoder);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You're making an asynchronous request, your <code>codeLatLng()</code> function has finished and returned long before the geocoder is done.</p>\n\n<p>If you need the geocoder data to continue, you'll have to chain your functions together:</p>\n\n<pre><code>function initialize() {\n    geocoder = new google.maps.Geocoder();\n    codeLatLng();\n}\nfunction codeLatLng() {\n    var latlng = new google.maps.LatLng(40.730885,-73.997383);\n    if (geocoder) {\n        geocoder.geocode({'latLng': latlng}, function(results, status) {\n            if (status == google.maps.GeocoderStatus.OK) {\n                    if (results[1]) {\n                        initContinued(results[1].formatted_address);\n                    } else {\n                        alert(\"No results found\");\n                    }\n                } else {\n                    alert(\"Geocoder failed due to: \" + status);\n                }\n        });\n      }\n\n}\nfunction initContinued(addr) {\n    alert(addr);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>You can't return the value from the function, the value doesn't exist yet when the function returns.</p>\n\n<p>The <code>geocode</code> method makes an asynchonous call and uses a callback to handle the result, so you have to do the same in the <code>codeLatLng</code> function:</p>\n\n<pre><code>var geocoder;\nfunction initialize() {\n  geocoder = new google.maps.Geocoder();\n  var latlng = new google.maps.LatLng(40.730885,-73.997383);\n  codeLatLng(function(addr){\n    alert(addr);\n  });\n}\n\nfunction codeLatLng(callback) {\n  var latlng = new google.maps.LatLng(40.730885,-73.997383);\n  if (geocoder) {\n    geocoder.geocode({'latLng': latlng}, function(results, status) {\n      if (status == google.maps.GeocoderStatus.OK) {\n        if (results[1]) {\n          callback(results[1].formatted_address);\n        } else {\n          alert(\"No results found\");\n        }\n      } else {\n        alert(\"Geocoder failed due to: \" + status);\n      }\n    });\n  }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<p>The geocode function uses a callback (function(results, status) { ... }) which is being called when the geocode function finishes its work. So, when you return a value from this callback, it only returns it to geocode function, not out of the codeLatLng.</p>\n\n<p>With this you have several options: define a variable in codeLatLng and set it in the callback function, for example</p>\n\n<pre>function codeLatLng()\n{\n   var returnValue;\n\n   geocoder.geocode({'latLng': latlng}, function(results, status) { returnValue = results[1].formatted_address });\n\n   return returnValue;\n}\n</pre>\n\n<p>Or do the stuff you need with the result directly in the callback function. Or put the result in a global variable. (Also, if the geocode function is asynchronous - if it returns immediately and the callback is called afterwards, you need to do one of the last two, you can't return the value from codeLatLng in that case.)</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am working with the google maps API and whenever I return the variable to the initialize function from the codeLatLng function it claims undefined. If I print the variable from the codeLatLng it shows up fine. </p>\n\n<pre><code>  var geocoder;\n  function initialize() {\n    geocoder = new google.maps.Geocoder();\n    var latlng = new google.maps.LatLng(40.730885,-73.997383);\n    var addr = codeLatLng();\n    document.write(addr);\n\n  }\n\n  function codeLatLng() {\n    var latlng = new google.maps.LatLng(40.730885,-73.997383);\n    if (geocoder) {\n      geocoder.geocode({'latLng': latlng}, function(results, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          if (results[1]) {\n                return results[1].formatted_address;\n          } else {\n            alert(\"No results found\");\n          }\n        } else {\n          alert(\"Geocoder failed due to: \" + status);\n        }\n      });\n    }\n  }\n</code></pre>\n\n<p>prints out undefined</p>\n\n<p>If I do:</p>\n\n<pre><code>  var geocoder;\n  function initialize() {\n    geocoder = new google.maps.Geocoder();\n    var latlng = new google.maps.LatLng(40.730885,-73.997383);\n    codeLatLng();\n\n\n  }\n\n  function codeLatLng() {\n    var latlng = new google.maps.LatLng(40.730885,-73.997383);\n    if (geocoder) {\n      geocoder.geocode({'latLng': latlng}, function(results, status) {\n        if (status == google.maps.GeocoderStatus.OK) {\n          if (results[1]) {\n                document.write(results[1].formatted_address);\n          } else {\n            alert(\"No results found\");\n          }\n        } else {\n          alert(\"Geocoder failed due to: \" + status);\n        }\n      });\n    }\n  }\n</code></pre>\n\n<p>prints out New York, NY 10012, USA</p>\n",
            "last_activity_date": 1317995520,
            "question_id": 2993563,
            "score": 19,
            "tags": [
                "javascript",
                "google-maps",
                "asynchronous"
            ],
            "title": "How do I return a variable from Google Maps JavaScript geocoder callback?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>There is an add in the <a href=\"http://www.datejs.com/\" rel=\"nofollow\">Datejs</a> library.</p>\n\n<p>And here are the <a href=\"http://www.w3schools.com/jsref/jsref%5Fobj%5Fdate.asp\" rel=\"nofollow\">JavaScript date methods</a>. kennebec wisely mentioned getHours() and setHours();</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>JavaScript itself has terrible Date/Time API's. This is the only way to do it in pure JavaScript. I'd recommend using <a href=\"http://www.datejs.com/\">Datejs</a> - as suggested by Nosredna - if you're doing a lot of date manipulation, though.</p>\n\n<pre><code>Date.prototype.addHours = function(h) {    \n   this.setTime(this.getTime() + (h*60*60*1000)); \n   return this;   \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<pre><code>Date.prototype.addHours= function(h){\n    this.setHours(this.getHours()+h);\n    return this;\n}\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>alert(new Date().addHours(4));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 176
                },
                {
                    "body": "<p>It is probably better to make the addHours method immutable by returning a copy of the Date object rather than mutating its parameter.</p>\n\n<pre><code>Date.prototype.addHours= function(h){\n    var copiedDate = new Date(this.getTime());\n    copiedDate.setHours(copiedDate.getHours()+h);\n    return copiedDate;\n}\n</code></pre>\n\n<p>This way you can chain a bunch of method calls without worrying about state.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Another way to handle this is to convert the date to unixtime (epoch), then add the equivalent in (milli)seconds, then convert it back. This way you can handle day and month transitions, like adding 4 hours to 21, which should result in the next day, 01:00. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The version suggested by kennebec will fail when changing to or from DST, since it is the hour number that is set. </p>\n\n<pre><code>this.setUTCHours(this.getUTCHours()+h);\n</code></pre>\n\n<p>will add <code>h</code> hours to <code>this</code> independent of time system peculiarities.\nJason Harwig's method works as well.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use the momentjs <a href=\"http://momentjs.com/\" rel=\"nofollow\">http://momentjs.com/</a> Library.</p>\n\n<pre><code>var moment = require('moment');\nfoo = new moment(something).add(10, 'm').toDate();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I also think the original object should not be modified. So to save future manpower here's a combined solution based on <a href=\"http://stackoverflow.com/a/1050782/556649\">Jason Harwig's</a> and <a href=\"http://stackoverflow.com/a/4016484/556649\">Tahir Hasan</a> answers:</p>\n\n<pre><code>Date.prototype.addHours= function(h){\n    var copiedDate = new Date();\n    copiedDate.setTime(this.getTime() + (h*60*60*1000)); \n    return copiedDate;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>It amazes me that Javascript's Date object does not implement an add function of any kind.</p>\n\n<p>I simply want a function that can do this:</p>\n\n<pre><code>var now = Date.now();\nvar fourHoursLater = now.addHours(4);\n\nfunction Date.prototype.addHours(h) {\n\n   // how do I implement this?  \n\n}\n</code></pre>\n\n<p>I would simply like some pointers in a direction.</p>\n\n<ul>\n<li><p>Do I need to do string parsing?  </p></li>\n<li><p>Can I use setTime?</p></li>\n<li><p>How about milliseconds?</p></li>\n</ul>\n\n<p>Like this:</p>\n\n<pre><code>new Date(milliseconds + 4*3600*1000 /*4 hrs in ms*/)?\n</code></pre>\n\n<p>This seems really hackish though - and does it even work?</p>\n",
            "last_activity_date": 1418332155,
            "question_id": 1050720,
            "score": 94,
            "tags": [
                "javascript",
                "datetime",
                "prototype-programming"
            ],
            "title": "Adding hours to Javascript Date object?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You cannot <code>POST</code> information cross domain, subdomain, or port number. You can however use JSONP if you have access to both the daemon <em>and</em> the requesting site. If data needs to be returned, then the <code>daemon</code> needs to support a <code>callback</code> query parameter and return it properly formatted.</p>\n\n<p>Pass the information to the daemon:</p>\n\n<pre><code>$.getJSON('http://domain.com:8080/url/here?callback=?', {\n  key: 'value',\n  otherKey: 'otherValue'\n}, function(data){\n     // Handles the callback when the data returns\n});\n</code></pre>\n\n<p>Now just make sure your daemon handles the <code>callback</code> parameter. For instance, if <code>callback=mycallback</code> the return from the daemon (the only thing written to the page) should look like this:</p>\n\n<p>For an key/value pairs:</p>\n\n<pre><code>mycallback( {'returnkey':'returnvalue', 'other':'data' });\n</code></pre>\n\n<p>For an array:</p>\n\n<pre><code>mycallback( [1,2,3] );\n</code></pre>\n\n<p>If you do not have a JSONP or similar mechanism in place, you cannot communicate cross domain using jQuery.</p>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>This breaks the <a href=\"https://developer.mozilla.org/en/Same_origin_policy_for_JavaScript\">Same origin policy</a>. You cannot use a different port, even when using the same domain.</p>\n\n<p>You can use JSONP as <a href=\"http://stackoverflow.com/questions/2099728/how-to-send-request-to-non-80-port-on-the-same-site-with-jquery/2099771#2099771\">Doug</a> suggested.</p>\n\n<p>Or else, as another possible workaround, you could set up a very simple <a href=\"http://en.wikipedia.org/wiki/Reverse_proxy\">reverse proxy</a> (using <a href=\"http://httpd.apache.org/docs/2.0/mod/mod_proxy.html\">mod_proxy</a> if you are on Apache). This would allow you to use relative paths in your AJAX request, while the HTTP server would be acting as a proxy to any \"remote\" location. </p>\n\n<p>The fundamental configuration directive to set up a reverse proxy in <a href=\"http://httpd.apache.org/docs/2.0/mod/mod_proxy.html\">mod_proxy</a> is the ProxyPass. You would typically use it as follows:</p>\n\n<pre><code>ProxyPass     /ajax/     http://www.localhost:8080/\n</code></pre>\n\n<p>In this case, you would request <code>/ajax/test.xml</code> with jQuery, but in fact the server would serve this by acting as a proxy to <code>http://www.localhost:8080/test.xml</code> internally. </p>\n\n<p>If you are using IIS, you may want to use the <a href=\"http://www.codeplex.com/Wikipage?ProjectName=urlrewriter\">Managed Fusion URL Rewriter and Reverse Proxy</a> to set up a reverse proxy.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This counts as a different origin, even though you have it on the same box, just different port. </p>\n\n<p>If you are targetting mostly new browsers like FireFox 3.5 and up, you can try to add <code>Access-Control</code> headers to your application in another port and allow to call from your default app pool. Information about access control headers can be found here: <a href=\"https://developer.mozilla.org/en/HTTP_access_control\" rel=\"nofollow\">https://developer.mozilla.org/en/HTTP_access_control</a></p>\n\n<p>IE also implements it (again, in using a different ACTIVEX control, why so?): <a href=\"http://blogs.msdn.com/ie/archive/2009/01/14/completing-access-control-support-for-xdomainrequest.aspx\" rel=\"nofollow\">http://blogs.msdn.com/ie/archive/2009/01/14/completing-access-control-support-for-xdomainrequest.aspx</a> and <a href=\"http://msdn.microsoft.com/en-us/library/cc288060(VS.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/cc288060(VS.85).aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I need to send an AJAX request to, for example, port 8080 where a daemon is running there.</p>\n",
            "last_activity_date": 1356313047,
            "question_id": 2099728,
            "score": 15,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "cross-domain"
            ],
            "title": "How do I send an AJAX request on a different port with jQuery?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>This is supposed to be working in 2.x versions which  you're already using. but the <a href=\"http://developer.android.com/sdk/android-2.0-highlights.html\" rel=\"nofollow\">doc</a> says that  tag will work when browser is fullscreen.</p>\n\n<p>Possibilities are there that your webview will also support it, but it needs to be full screen.\nTry this out.\n(I haven't tried this, though)</p>\n\n<p><strong>EDIT:</strong> To make the view go fullscreen, you may try this:</p>\n\n<pre><code>requestWindowFeature(Window.FEATURE_NO_TITLE);\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>First of all care the encoding. Here it's an <a href=\"http://www.broken-links.com/2010/07/08/making-html5-video-work-on-android-phones/\">article with a working example</a> and some guidelines to encode videos for Android webkit.</p>\n\n<p>And then... when I had to face this issue, I had to research a bit and found some useful answers. Basically you have to open the video the way the native browser does</p>\n\n<pre><code>public class InredisChromeClient extends WebChromeClient implements OnCompletionListener, OnErrorListener {\n    private InterfazWebInredis interfazWeb; // Use Your WebView instance instead\n\n    private VideoView mCustomVideoView;\n\n    private LinearLayout mContentView;\n    private FrameLayout mCustomViewContainer;\n    private WebChromeClient.CustomViewCallback mCustomViewCallback;\n    private LinearLayout mErrorConsoleContainer;\n    static final FrameLayout.LayoutParams COVER_SCREEN_GRAVITY_CENTER = new FrameLayout.LayoutParams(\n            ViewGroup.LayoutParams.FILL_PARENT,\n            ViewGroup.LayoutParams.FILL_PARENT, Gravity.CENTER);\n\n    public InredisChromeClient(InterfazWebInredis iwi) {\n        super();\n        this.interfazWeb = iwi;\n    }\n\n    public void onShowCustomView(View view, CustomViewCallback callback) {\n        // super.onShowCustomView(view, callback);\n        if (view instanceof FrameLayout) {\n            mCustomViewContainer = (FrameLayout) view;\n            mCustomViewCallback = callback;\n            mContentView = (LinearLayout) interfazWeb.findViewById(R.id.mainContainer);\n            if (mCustomViewContainer.getFocusedChild() instanceof VideoView) {\n                mCustomVideoView = (VideoView) mCustomViewContainer.getFocusedChild();\n                // frame.removeView(video);\n                mContentView.setVisibility(View.GONE);\n                mCustomViewContainer.setVisibility(View.VISIBLE);\n                interfazWeb.setContentView(mCustomViewContainer);\n                mCustomVideoView.setOnCompletionListener(this);\n                mCustomVideoView.setOnErrorListener(this);\n                mCustomVideoView.start();\n            }\n        }\n    }\n\n    public void onHideCustomView() {\n        if (mCustomVideoView == null)\n            return;\n        // Hide the custom view.\n        mCustomVideoView.setVisibility(View.GONE);\n        // Remove the custom view from its container.\n        mCustomViewContainer.removeView(mCustomVideoView);\n        mCustomVideoView = null;\n        mCustomViewContainer.setVisibility(View.GONE);\n        mCustomViewCallback.onCustomViewHidden();\n        // Show the content view.\n        mContentView.setVisibility(View.VISIBLE);\n    }\n\n    @Override\n    public void onCompletion(MediaPlayer mp) {\n        mp.stop();\n        mCustomViewContainer.setVisibility(View.GONE);\n        onHideCustomView();\n        interfazWeb.setContentView(mContentView);\n    }\n\n    @Override\n    public boolean onError(MediaPlayer mp, int what, int extra) {\n        interfazWeb.setContentView(R.layout.main);\n        return true;\n    }\n}\n</code></pre>\n\n<p>So, this code is much inspired on the <a href=\"http://android.git.kernel.org/?p=platform/packages/apps/Browser.git;a=blob;f=src/com/android/browser/BrowserActivity.java;h=0a3fec9a4336f1db4e3ae463c1ba061c59edff24;hb=HEAD\">android project source code of the browser</a>.</p>\n\n<p>And well, the behaviour of this is opening the video full-screen. I don't know if it's possible to play the video in its own frame within the webpage. But this solution did the trick for me, I hope for you too.</p>\n\n<p>Regards</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I loaded a local html in sdcard, and in this html I used tag : </p>\n\n<pre><code>&lt;video id=\"myvideo\" controls width=\"120\" height=\"60\" poster=\"img/img01.jpg\" src=\"video/01.mp4\"&gt;&lt;/video&gt;\n</code></pre>\n\n<p>and then I found that I didn't loaded this html, when I disabled the tag:, the html was working fine, and I tested this in my android avd(2.2) ? </p>\n",
            "last_activity_date": 1410797154,
            "question_id": 4989738,
            "score": 3,
            "tags": [
                "javascript",
                "android",
                "html5",
                "android-widget",
                "android-webview"
            ],
            "title": "How to play a video in a webview with android?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I guess this is what you want:</p>\n\n<pre><code>var data = '{\"count\" : 1, \"stack\" : \"sometext\\\\n\\\\n\"}';\n</code></pre>\n\n<p>(You need to escape the \"\\\" in your string (turning it into a double-\"\\\"), otherwise it will become a newline in the JSON source, not the JSON data.)</p>\n",
                    "is_accepted": true,
                    "score": 132
                },
                {
                    "body": "<p>You might want to look into this C# function to escape the string:</p>\n\n<p><a href=\"http://www.aspcode.net/C-encode-a-string-for-JSON-JavaScript.aspx\" rel=\"nofollow\">http://www.aspcode.net/C-encode-a-string-for-JSON-JavaScript.aspx</a></p>\n\n<pre><code>public static string Enquote(string s)  \n{ \n    if (s == null || s.Length == 0)  \n    { \n        return \"\\\"\\\"\"; \n    } \n    char         c; \n    int          i; \n    int          len = s.Length; \n    StringBuilder sb = new StringBuilder(len + 4); \n    string       t; \n\n    sb.Append('\"'); \n    for (i = 0; i &lt; len; i += 1)  \n    { \n        c = s[i]; \n        if ((c == '\\\\') || (c == '\"') || (c == '&gt;')) \n        { \n            sb.Append('\\\\'); \n            sb.Append(c); \n        } \n        else if (c == '\\b') \n            sb.Append(\"\\\\b\"); \n        else if (c == '\\t') \n            sb.Append(\"\\\\t\"); \n        else if (c == '\\n') \n            sb.Append(\"\\\\n\"); \n        else if (c == '\\f') \n            sb.Append(\"\\\\f\"); \n        else if (c == '\\r') \n            sb.Append(\"\\\\r\"); \n        else \n        { \n            if (c &lt; ' ')  \n            { \n                //t = \"000\" + Integer.toHexString(c); \n                string t = new string(c,1); \n                t = \"000\" + int.Parse(tmp,System.Globalization.NumberStyles.HexNumber); \n                sb.Append(\"\\\\u\" + t.Substring(t.Length - 4)); \n            }  \n            else  \n            { \n                sb.Append(c); \n            } \n        } \n    } \n    sb.Append('\"'); \n    return sb.ToString(); \n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You will need to have a function which replaces <code>\\n</code> to <code>\\\\n</code> in case <code>data</code> is not a string literal.</p>\n\n<pre><code>function jsonEscape(str)  {\n    return str.replace(/\\n/g, \"\\\\\\\\n\").replace(/\\r/g, \"\\\\\\\\r\").replace(/\\t/g, \"\\\\\\\\t\");\n}\n\nvar data = '{\"count\" : 1, \"stack\" : \"sometext\\n\\n\"}';\nvar dataObj = eval('('+ jsonEscape(data) +')');\n</code></pre>\n\n<p>Resulting <code>dataObj</code> will be</p>\n\n<pre><code>Object {count: 1, stack: \"sometext\\n\\n\"}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I encountered that problem while making a class in PHP4 to emulate json_encode (available in PHP5). Here's what i came up with :</p>\n\n<pre><code>class jsonResponse {\n    var $response;\n\n    function jsonResponse() {\n        $this-&gt;response = array('isOK'=&gt;'KO','msg'=&gt;'Undefined');\n    }\n\n    function set($isOK, $msg) {\n        $this-&gt;response['isOK'] = ($isOK) ? 'OK' : 'KO';\n        $this-&gt;response['msg'] = htmlentities($msg);\n    }\n\n    function setData($data=null) {\n        if(!is_null($data))\n            $this-&gt;response['data'] = $data;\n        elseif(isset($this-&gt;response['data']))\n            unset($this-&gt;response['data']);\n    }\n\n    function send() {\n        header('Content-type: application/json');\n        echo '{\"isOK\":\"'.$this-&gt;response['isOK'].'\",\"msg\":'.$this-&gt;parseString($this-&gt;response['msg']);\n        if(isset($this-&gt;response['data']))\n            echo ',\"data\":'.$this-&gt;parseData($this-&gt;response['data']);\n        echo '}';\n    }\n\n    function parseData($data) {\n        if(is_array($data)) {\n            $parsed = array();\n            foreach ($data as $key=&gt;$value)\n                array_push($parsed, $this-&gt;parseString($key).':'.$this-&gt;parseData($value));\n            return '{'.implode(',', $parsed).'}';\n        } else\n            return $this-&gt;parseString($data);\n    }\n\n    function parseString($string) {\n            $string = str_replace(\"\\\\\", \"\\\\\\\\\", $string);\n            $string = str_replace('/', \"\\\\/\", $string);\n            $string = str_replace('\"', \"\\\\\".'\"', $string);\n            $string = str_replace(\"\\b\", \"\\\\b\", $string);\n            $string = str_replace(\"\\t\", \"\\\\t\", $string);\n            $string = str_replace(\"\\n\", \"\\\\n\", $string);\n            $string = str_replace(\"\\f\", \"\\\\f\", $string);\n            $string = str_replace(\"\\r\", \"\\\\r\", $string);\n            $string = str_replace(\"\\u\", \"\\\\u\", $string);\n            return '\"'.$string.'\"';\n    }\n}\n</code></pre>\n\n<p>I followed the rules mentionned <a href=\"http://www.json.org/fatfree.html\" rel=\"nofollow\">here</a>.\nI only used what i needed but i figure that you can adapt it to your needs in the language your are using. The problem in my case wasn't about newlines as i originally thought but about the / not being escaped. I hope this prevent someone else from the little headache i had figuring out what i did wrong.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Hi i used this function to strip newline or other chars in data to parse JSON data:</p>\n\n<pre><code>function normalize_str($str) {\n\n    $invalid = array('\u0160'=&gt;'S', '\u0161'=&gt;'s', '\u0110'=&gt;'Dj', '\u0111'=&gt;'dj', '\u017d'=&gt;'Z', '\u017e'=&gt;'z',\n    '\u010c'=&gt;'C', '\u010d'=&gt;'c', '\u0106'=&gt;'C', '\u0107'=&gt;'c', '\u00c0'=&gt;'A', '\u00c1'=&gt;'A', '\u00c2'=&gt;'A', '\u00c3'=&gt;'A',\n    '\u00c4'=&gt;'A', '\u00c5'=&gt;'A', '\u00c6'=&gt;'A', '\u00c7'=&gt;'C', '\u00c8'=&gt;'E', '\u00c9'=&gt;'E', '\u00ca'=&gt;'E', '\u00cb'=&gt;'E',\n    '\u00cc'=&gt;'I', '\u00cd'=&gt;'I', '\u00ce'=&gt;'I', '\u00cf'=&gt;'I', '\u00d1'=&gt;'N', '\u00d2'=&gt;'O', '\u00d3'=&gt;'O', '\u00d4'=&gt;'O',\n    '\u00d5'=&gt;'O', '\u00d6'=&gt;'O', '\u00d8'=&gt;'O', '\u00d9'=&gt;'U', '\u00da'=&gt;'U', '\u00db'=&gt;'U', '\u00dc'=&gt;'U', '\u00dd'=&gt;'Y',\n    '\u00de'=&gt;'B', '\u00df'=&gt;'Ss', '\u00e0'=&gt;'a', '\u00e1'=&gt;'a', '\u00e2'=&gt;'a', '\u00e3'=&gt;'a', '\u00e4'=&gt;'a', '\u00e5'=&gt;'a',\n    '\u00e6'=&gt;'a', '\u00e7'=&gt;'c', '\u00e8'=&gt;'e', '\u00e9'=&gt;'e', '\u00ea'=&gt;'e',  '\u00eb'=&gt;'e', '\u00ec'=&gt;'i', '\u00ed'=&gt;'i',\n    '\u00ee'=&gt;'i', '\u00ef'=&gt;'i', '\u00f0'=&gt;'o', '\u00f1'=&gt;'n', '\u00f2'=&gt;'o', '\u00f3'=&gt;'o', '\u00f4'=&gt;'o', '\u00f5'=&gt;'o',\n    '\u00f6'=&gt;'o', '\u00f8'=&gt;'o', '\u00f9'=&gt;'u', '\u00fa'=&gt;'u', '\u00fb'=&gt;'u', '\u00fd'=&gt;'y',  '\u00fd'=&gt;'y', '\u00fe'=&gt;'b',\n    '\u00ff'=&gt;'y', '\u0154'=&gt;'R', '\u0155'=&gt;'r', \"`\" =&gt; \"'\", \"\u00b4\" =&gt; \"'\", '\"' =&gt; ',', '`' =&gt; \"'\",\n    '\u00b4' =&gt; \"'\", '\"' =&gt; '\\\"', '\"' =&gt; \"\\\"\", '\u00b4' =&gt; \"'\", \"&amp;acirc;\u20ac\u2122\" =&gt; \"'\", \"{\" =&gt; \"\",\n    \"~\" =&gt; \"\", \"\u2013\" =&gt; \"-\", \"'\" =&gt; \"'\",\"     \" =&gt; \" \");\n\n    $str = str_replace(array_keys($invalid), array_values($invalid), $str);\n\n    $remove = array(\"\\n\", \"\\r\\n\", \"\\r\");\n    $str = str_replace($remove, \"\\\\n\", trim($str));\n\n      //$str = htmlentities($str,ENT_QUOTES);\n\n    return htmlspecialchars($str);\n}\n\n\necho normalize_str($lst['address']);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could just escape your string in the server when writing the value of the json field and unescape it when retrieving the value in the client browser, for instance.</p>\n\n<p>The javascript implementation of all major browser have the unescape command.</p>\n\n<p>Example:\nin the server:</p>\n\n<pre><code>response.write \"{\"\"field1\"\":\"\"\" &amp; escape(RS_Temp(\"textField\")) &amp; \"\"\"}\"\n</code></pre>\n\n<p>in the browser: </p>\n\n<pre><code>document.getElementById(\"text1\").value = unescape(jsonObject.field1)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've generated some JSON and I'm trying to pull it into an object in JavaScript. I keep getting errors. Here's what I have:</p>\n\n<pre><code>var data = '{\"count\" : 1, \"stack\" : \"sometext\\n\\n\"}';\nvar dataObj = eval('('+data+')');\n</code></pre>\n\n<p>This gives me an error: </p>\n\n<pre><code>unterminated string literal\n</code></pre>\n\n<p>With <code>JSON.parse(data)</code>, I see similar error messages: \"<code>Unexpected token \u21b5</code>\" in Chrome, and \"<code>unterminated string literal</code>\" in Firefox and IE.</p>\n\n<p>When I take out the <code>\\n</code> after <code>sometext</code> the error goes away in both cases. I can't seem to figure out why the <code>\\n</code> makes <code>eval</code> and <code>JSON.parse</code> fail.  </p>\n",
            "last_activity_date": 1420503080,
            "question_id": 42068,
            "score": 80,
            "tags": [
                "javascript",
                "json",
                "newline"
            ],
            "title": "How do I handle newlines in JSON?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<pre><code>$(\"#wizard li\").click(function () {\n    console.log( $(this).index() );\n});\n</code></pre>\n\n<p>However rather than attaching one click handler for each list item it is better (performance wise) to use <a href=\"http://api.jquery.com/delegate/\"><code>delegate</code></a> which would look like this:</p>\n\n<pre><code>$(\"#wizard\").delegate('li', 'click', function () {\n    console.log( $(this).index() );\n});\n</code></pre>\n\n<p>In jQuery 1.7+, you should use <a href=\"http://api.jquery.com/on/\"><code>on</code></a>. The below example binds the event to the <code>#wizard</code> element, working like a delegate event:</p>\n\n<pre><code>$(\"#wizard\").on(\"click\", \"li\", function() {\n    console.log( $(this).index() );\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 122
                },
                {
                    "body": "<p>Delegate and Live are easy to use but if you won't have any more li:s added dynamically you could use event delagation with normal bind/click as well. There should be some performance gain using this method since the DOM won't have to be monitored for new matching elements. Haven't got any actual numbers but it makes sense :)</p>\n\n<pre><code>$(\"#wizard\").click(function (e) {\n    var source = $(e.target);\n    if(source.is(\"li\")){\n        // alert index of li relative to ul parent\n        alert(source.index());\n    }\n});\n</code></pre>\n\n<p>You could test it at jsFiddle: <a href=\"http://jsfiddle.net/jimmysv/4Sfdh/1/\" rel=\"nofollow\">http://jsfiddle.net/jimmysv/4Sfdh/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>something like: </p>\n\n<pre><code>$(\"ul#wizard li\").click(function () {\n  var index = $(\"ul#wizard li\").index(this);\n  alert(\"index is: \" + index)\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Take a look at this <a href=\"http://jsfiddle.net/KL3Vm/\" rel=\"nofollow\">example</a>. </p>\n\n<pre><code>$(\"#wizard li\").click(function () {\n    alert($(this).index()); // alert index of li relative to ul parent\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Let's say I have this markup:</p>\n\n<pre><code>&lt;ul id=\"wizard\"&gt;\n    &lt;li&gt;Step 1&lt;/li&gt;\n    &lt;li&gt;Step 2&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>And I have this jQuery:</p>\n\n<pre><code>$(\"#wizard li\").click(function () {\n    // alert index of li relative to ul parent\n});\n</code></pre>\n\n<p>How can I get the index of the child <code>li</code> relative to it's parent, when clicking that <code>li</code>?</p>\n\n<p>For example, when you click \"Step 1\", an <code>alert</code> with \"0\" should pop up.</p>\n",
            "last_activity_date": 1376913106,
            "question_id": 4996002,
            "score": 76,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery: Get index of element as child relative to parent"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Arrays should only have entries with numerical keys (arrays are also objects but you really should not mix these). </p>\n\n<p>If you convert an array to JSON, the process will only take numerical properties into account. Other properties are simply ignored and that's why you get an empty array as result.</p>\n\n<p>What is often referred to as \"associative array\" is actually just an object in JS:</p>\n\n<pre><code>var AssocArray = {};  // &lt;- initialize an object, not an array\n\nAssocArray[\"a\"] = \"The letter A\"\n\nconsole.log(\"a = \" + AssocArray[\"a\"]);\n\n// result: \"a = The letter A\"\n\nJSON.stringify(AssocArray);\n\n// result: \"{\"a\":\"The letter A\"}\"\n</code></pre>\n\n<p>Properties of objects can be accessed via array notation or dot notation (if the key is not a reserved keyword). Thus <code>AssocArray.a</code> is the same as <code>AssocArray['a']</code>.</p>\n",
                    "is_accepted": true,
                    "score": 71
                },
                {
                    "body": "<p>There are no associative arrays in JavaScript. However, there are objects with named properties, so just don't initialise your \"array\" with <code>new Array</code>, then it becomes a generic object.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You might want to push the object into the array</p>\n\n<pre><code>enter code here\n\nvar AssocArray = new Array();\n\nAssocArray.push( \"The letter A\");\n\nconsole.log(\"a = \" + AssocArray[0]);\n\n// result: \"a = The letter A\"\n\nconsole.log( AssocArray[0]);\n\nJSON.stringify(AssocArray);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I posted a fix for this <a href=\"http://stackoverflow.com/a/24728537/2016196\">here</a></p>\n\n<p>You can use this function to modify <code>JSON.stringify</code> to encode <code>arrays</code>, just post it near the beginning of your script (check the link above for more detail):</p>\n\n<pre><code>// Upgrade for JSON.stringify, updated to allow arrays\n(function(){\n    // Convert array to object\n    var convArrToObj = function(array){\n        var thisEleObj = new Object();\n        if(typeof array == \"object\"){\n            for(var i in array){\n                var thisEle = convArrToObj(array[i]);\n                thisEleObj[i] = thisEle;\n            }\n        }else {\n            thisEleObj = array;\n        }\n        return thisEleObj;\n    };\n    var oldJSONStringify = JSON.stringify;\n    JSON.stringify = function(input){\n        if(oldJSONStringify(input) == '[]')\n            return oldJSONStringify(convArrToObj(input));\n        else\n            return oldJSONStringify(input);\n    };\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I convert a JavaScript associative array into JSON?</p>\n\n<p>I have tried the following:</p>\n\n<pre><code>var AssocArray = new Array();\n\nAssocArray[\"a\"] = \"The letter A\"\n\nconsole.log(\"a = \" + AssocArray[\"a\"]);\n\n// result: \"a = The letter A\"\n\nJSON.stringify(AssocArray);\n\n// result: \"[]\"\n</code></pre>\n",
            "last_activity_date": 1405304845,
            "question_id": 4425289,
            "score": 43,
            "tags": [
                "javascript",
                "json",
                "associative-array"
            ],
            "title": "JavaScript associative array to JSON"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It's not possible with JavaScript as it goes against cross-domain security. It would be very bad if you knew what pixels made up the image, <code>http://some-other-host/yourPassword.png</code>. You can only tell the color of the pixel under the mouse if either the mouse is over a canvas or an image element of the same domain (or an image element of another domain which is served with an <code>Access-Control-Allow-Origin: *</code> header). In the case of the canvas, you would do <code>canvasElement.getContext('2d').getImageData(x, y, 1, 1).data</code>. In the case of the images, you would have to draw them to a canvas with:</p>\n\n<pre><code>var canvas = document.createElement(\"canvas\");\ncanvas.width = yourImageElement.width;\ncanvas.height = yourImageElement.height;\ncanvas.getContext('2d').drawImage(yourImageElement, 0, 0);\n</code></pre>\n\n<p>And then just use the previous method explained for canvases. If you must be able to convert to various representations of color values, try my <a href=\"http://github.com/eligrey/color.js\">color.js</a> library.</p>\n\n<p>Also, you're never going to be able to support IE &lt;9 (that's assuming that IE9 supports canvas) and using Flash won't help as it can't read the pixel data of the document either.</p>\n",
                    "is_accepted": true,
                    "score": 54
                },
                {
                    "body": "<p>I do agree with the very detailed answer provided by Elijah. In addition, I would say that you don't need the canvas when it comes to images. As you stated yourself, you have those images available from within php and can do the color-query on the server.</p>\n\n<p>I would suggest that you handle this problem with an external tool - this makes it even browser indepedent (but OS dependent): write a small tool (for instance in c#) which does the color query for you, is invoked with a shortcut and submits the color to your server. Make the tool available as download on your CMS.</p>\n\n<p>Another aproach I used for a CMS was to \"steal\" colors by parsing the CSS: the use case was to make the colors of an already existing web site available as color palette to my application:</p>\n\n<ul>\n<li>I asked the user to provide a URL from the target system - mostly the company's home page</li>\n<li>I parsed the page to find all color definitions in all inline styles and linked styles</li>\n<li>(you can easily extend this to all referenced images)</li>\n<li>the result was a nice color palette with all coporate colors to choose from</li>\n</ul>\n\n<p>Maybe that's also a solution for your CMS?</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I don't know if this is feasible, but if your pages are static you could save an image screenshot of each one of them (or maybe one for each browser/screen resolution? ) and then use AJAX to send the cursor coordinates to the server and return the pixel color with PHP's <code>imagecolorat()</code>.</p>\n\n<p>To take the screenshots, you could use <a href=\"http://seleniumhq.org/projects/ide/\" rel=\"nofollow\">Selenium IDE</a> like described <a href=\"http://binil.wordpress.com/2006/12/22/taking-screenshots-with-selenium/\" rel=\"nofollow\">here</a>.</p>\n\n<p>Hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To add to the previous answers --</p>\n\n<p>One way of thinking of this problem is that you want to be able to do a screen-capture of a 1px by 1px region.  A fairly common technique for capturing screen regions (for instance from within Web-based bug-reporting systems) is to use a signed Java applet and java.awt.Robot to capture the picture.  If you sign the applet, your users will get a \"do you trust this app\" dialog (with an \"always trust apps from this publisher\" checkbox) and then will be able to use the tool.</p>\n\n<p>You can then pass the result out to JavaScript using LiveConnect (the docs are old, but Java applets still support this), or you can post it to your server.  Similarly, you can call into the Java applet from JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Merging various references found here in StackOverflow and in other sites, I did so using javascript and JQuery:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;canvas id=\"myCanvas\" width=\"400\" height=\"400\" style=\"border:1px solid #c3c3c3;\"&gt;\nYour browser does not support the canvas element.\n&lt;/canvas&gt;\n&lt;script src=\"jquery.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    window.onload = function(){\n        var canvas = document.getElementById('myCanvas');\n        var context = canvas.getContext('2d');\n        var img = new Image();\n        img.src = 'photo_apple.jpg';\n        context.drawImage(img, 0, 0);\n    };\n\n    function findPos(obj){\n    var current_left = 0, current_top = 0;\n    if (obj.offsetParent){\n        do{\n            current_left += obj.offsetLeft;\n            current_top += obj.offsetTop;\n        }while(obj = obj.offsetParent);\n        return {x: current_left, y: current_top};\n    }\n    return undefined;\n    }\n\n    function rgbToHex(r, g, b){\n    if (r &gt; 255 || g &gt; 255 || b &gt; 255)\n        throw \"Invalid color component\";\n    return ((r &lt;&lt; 16) | (g &lt;&lt; 8) | b).toString(16);\n    }\n\n$('#myCanvas').click(function(e){\n    var position = findPos(this);\n    var x = e.pageX - position.x;\n    var y = e.pageY - position.y;\n    var coordinate = \"x=\" + x + \", y=\" + y;\n    var canvas = this.getContext('2d');\n    var p = canvas.getImageData(x, y, 1, 1).data;\n    var hex = \"#\" + (\"000000\" + rgbToHex(p[0], p[1], p[2])).slice(-6);\n    alert(\"HEX: \" + hex);\n});\n&lt;/script&gt;\n&lt;img src=\"photo_apple.jpg\"/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>This is my complete solution.. Here I only used canvas and one image, but if you need to use <code>&lt;map&gt;</code> over the image, it's possible too. I hope I have helped.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>As a security precaution you can't capture screen pixels with Javascript (so developers can't take snapshots of your personal data), but you CAN do it in Flash -- you can get pixel data within the Flash container using the flash.display.BitmapData class.</p>\n\n<p>Check out <a href=\"http://www.sephiroth.it/tutorials/flashPHP/print_screen/\" rel=\"nofollow\">http://www.sephiroth.it/tutorials/flashPHP/print_screen/</a>  -- I've used it in Flash-based WYSYWIG projects to save images to a LAMP (PHP) server.</p>\n\n<p>The problem with using Flash is that it's not natively supported on iOS devices, which are extremely popular now and worth developing for.  Flash is on its way down the tubes.</p>\n\n<p>The canvas-based method will certainly be a good one provided all of your visitors have up-to-date web browsers that support the canvas tag and JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>See new input[type=color] HTML5 element: <a href=\"http://www.w3.org/TR/html-markup/input.color.html\" rel=\"nofollow\">http://www.w3.org/TR/html-markup/input.color.html</a>, <a href=\"http://demo.hongkiat.com/html5-form-input-type/index2.html\" rel=\"nofollow\">http://demo.hongkiat.com/html5-form-input-type/index2.html</a>. </p>\n\n<p>Now it works at least in Chrome (tested in Ubuntu, should work for Windows too). It launches color-select dialog <strong>provided by operating system</strong>. If there is an eyedropper in this dialog (it is for Gnome), then it's possible to pick a color <strong>from any point on your screen</strong>. Not cross-browser yet, but clean and standards-based.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using a technique called <em>Browser Timing Attack</em>, it is possible to (sort of) determine the color of any pixel, even on iframes. </p>\n\n<p>Basically, this technique measures the time to render an SVG filter on an element, rather than the color itself (<code>requestAnimationFrame()</code> allows to measure time with a much better accuracy than <code>setTimeout()</code>). Depending on the current pixel color, the filter takes more or less time to apply. This makes it possible to determine if a pixel is the same color as a known color - for instance black or white.</p>\n\n<p>More details in this white paper (pdf): <a href=\"http://www.contextis.com/files/Browser_Timing_Attacks.pdf\">http://www.contextis.com/files/Browser_Timing_Attacks.pdf</a></p>\n\n<p>By the way: yes, this is a browser security hole, but I don't see how browser vendors can patch it. </p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I am looking for an \"<strong>Eyedropper</strong>\" tool, that gives me the hex value of the pixel the mouse cursor is under, in Javascript for a CMS.</p>\n\n<p>For Firefox, there is the excellent <a href=\"http://www.colorzilla.com/firefox/screenshots.html\"><strong>ColorZilla</strong></a> extension that does exactly that. However, it's FF only of course, and I would really like to deliver the tool along with the CMS.</p>\n\n<p>A dutch developer has had the <a href=\"http://youngdutchdesign.com/moodrop-mootools-eyedropper-tool\"><strong>very clever idea</strong></a> of using a combination of Ajax and PHP's <code>imagecolorat()</code> to find out the Pixel colour on an image. <strong>But that limits the range to images I can access server side</strong>, and I'm really dreaming of a universal tool. </p>\n\n<p>I will work with one of these approaches, but would much prefer a cross-browser, Javascript or Flash based way that requires no server-side fiddling and no installing of extensions.</p>\n\n<p>I am also interested in any IE specific solutions that do what ColorZilla can do - I could live with supporting IE and FF only, though a cross browser solution would of course be ideal.</p>\n",
            "last_activity_date": 1391087269,
            "question_id": 1936021,
            "score": 41,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "mootools",
                "prototypejs"
            ],
            "title": "JavaScript eyedropper (tell color of Pixel under mouse cursor)"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<h2>Why the error is raised:</h2>\n\n<p>JavaScript code is limited by the <a href=\"http://en.wikipedia.org/wiki/Same-origin_policy\">same-origin policy</a>, meaning, from a page at <code>www.example.com</code>, you can only make (AJAX) requests to services located at <strong>exactly</strong> the same domain, in that case, exactly <code>www.example.com</code> (<strong>not</strong> <code>example.com</code> - without the <code>www</code> - or <code>whatever.example.com</code>).</p>\n\n<p>In your case, your Ajax code is trying to reach a service in <code>http://wordicious.com</code> from a page located at <code>http://www.wordicious.com</code>.</p>\n\n<p>Although very similar, they are <strong>not</strong> the same domain. And when they are not on the same domain, the request will only be successful if the target's respose contains a <code>Access-Control-Allow-Origin</code> header in it.</p>\n\n<p>As your page/service at <code>http://wordicious.com</code> was never configured to present such header, that error message is shown.</p>\n\n<h2>Solution:</h2>\n\n<p>As said, the origin (where the page with JavaScript is at) and the target (where the JavaScript is trying to reach) domains must be the <strong>exact</strong> same.</p>\n\n<p>Your case seems like a typo. Looks like <code>http://wordicious.com</code> and <code>http://www.wordicious.com</code> are actually the same server/domain. So to fix, type the target and the origin equally: <strong>make you Ajax code request pages/services to <code>http://www.wordicious.com</code> not <code>http://wordicious.com</code></strong>. (Maybe place the target URL relatively, like <code>'/login.php'</code>, without the domain).</p>\n\n<p><br><br></p>\n\n<h3>On a more general note:</h3>\n\n<p>If the problem is not a typo like the one of this question seems to be, the solution would be to <strong>add the <code>Access-Control-Allow-Origin</code> to the target domain</strong>. To add it, depends, of course, of the server/language behind that address. Sometimes a configuration variable in the tool will do the trick. Other times you'll have to add the headers through code yourself.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>you have to put the headers keys/values in options method response.\nfor example if you have resource at <a href=\"http://mydomain.com/myresource\">http://mydomain.com/myresource</a>\nthen, in your server code you write</p>\n\n<pre><code>//response handler\nvoid handleRequest(Request request, Response response) {\n    if(request.method == \"OPTIONS\") {\n       response.setHeader(\"Access-Control-Allow-Origin\",\"http://clientDomain.com\")\n       response.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT,DELETE,OPTIONS\");\n       response.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    }\n\n\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The workaround is to use a reverse proxy running on your 'source' host and forwarding to your target server, such as Fiddler:</p>\n\n<pre><code>http://docs.telerik.com/fiddler/configure-fiddler/tasks/usefiddlerasreverseproxy\n</code></pre>\n\n<p>Or an Apache Reverse proxy...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For .NET server can configure this in web.config as below</p>\n\n<pre><code> &lt;system.webServer&gt;\n   &lt;httpProtocol&gt;\n     &lt;customHeaders&gt;\n       &lt;add name=\"Access-Control-Allow-Origin\" value=\"your_clientside_websiteurl\" /&gt;\n     &lt;/customHeaders&gt;\n   &lt;/httpProtocol&gt;\n &lt;system.webServer&gt;\n</code></pre>\n\n<p>For instance lets say, if the server domain is <a href=\"http://live.makemypublication.com\">http://live.makemypublication.com</a> and client is  <a href=\"http://www.makemypublication.com\">http://www.makemypublication.com</a> then configure in server's web.config as below</p>\n\n<pre><code> &lt;system.webServer&gt;\n   &lt;httpProtocol&gt;\n     &lt;customHeaders&gt;\n       &lt;add name=\"Access-Control-Allow-Origin\" value=\"http://www.makemypublication.com\" /&gt;\n     &lt;/customHeaders&gt;\n  &lt;/httpProtocol&gt;\n &lt;system.webServer&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Use <strong><code>addHeader</code></strong> Instead of using <strong><code>setHeader</code></strong> method,</p>\n\n<pre><code>response.addHeader(\"Access-Control-Allow-Origin\", \"*\");\n</code></pre>\n\n<p><strong><code>*</code></strong> in above line will allow <strong><code>access to all domains</code></strong>. </p>\n\n<hr>\n\n<p>For allowing <strong><code>access to specific domain only</code></strong>:</p>\n\n<pre><code>response.addHeader(\"Access-Control-Allow-Origin\", \"http://www.example.com\");\n</code></pre>\n\n<p>Check this <a href=\"http://john.sh/blog/2011/6/30/cross-domain-ajax-expressjs-and-access-control-allow-origin.html\"><strong><code>blog post</code></strong></a>.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>You need to add this at start of your php page \"login.php\"</p>\n\n<pre><code>&lt;?php header('Access-Control-Allow-Origin: *'); ?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm using .htaccess to rewrite urls and I used html base tag in order to make it work.</p>\n\n<p>Now, when I try to make an ajax request I get the following error:</p>\n\n<blockquote>\n  <p>XMLHttpRequest cannot load <a href=\"http://www.wordicious.com/login.php\">http://www.wordicious.com/login.php</a>. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin '<a href=\"http://wordicious.com\">http://wordicious.com</a>' is therefore not allowed access.</p>\n</blockquote>\n",
            "last_activity_date": 1418720745,
            "question_id": 20433655,
            "score": 32,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "xmlhttprequest"
            ],
            "title": "No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;...&#39; is therefore not allowed access"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>I haven't tested this, but my instinct would be to do an OnMouseOut function call on the body tag.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Maybe if you're constantly listening to OnMouseOver in the body tag, then callback when the event is not ocurring, but, as Zack states, this could be very ugly, because not all the browsers handle events the same way, there is even some possibility that you lose the MouseOver even by being over a div in the same page.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I take back what i said. It is possible. I wrote this code, works perfectly.</p>\n\n<pre><code>window.onload = function() {\n\n    $span = document.getElementById('text');\n\n    window.onmouseout = function() {\n    \t$span.innerHTML = \"mouse out\";\t\n    }\n\n    window.onmousemove = function() {\n    \t$span.innerHTML = \"mouse in\";\t\n    }\n\n}\n</code></pre>\n\n<p>works in chrome, firefox, opera. Aint tested in IE but assume it works.</p>\n\n<p>edit. IE as always causes trouble. To make it work in IE, replace the events from window to document:</p>\n\n<pre><code>window.onload = function() {\n\n    $span = document.getElementById('text');\n\n    document.onmousemove = function() {\n    \t$span.innerHTML = \"mouse move\";\n    }\n\n    document.onmouseout = function() {\n    \t$span.innerHTML = \"mouse out\";\n    }\n\n}\n</code></pre>\n\n<p>combine them for crossbrowser kick ass cursor detection o0 :P</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This type of behavior is usually desired while implementing drag-drop behavior on an html page.  The solution below was tested on IE 8.0.6, FireFox 3.6.6, Opera 10.53, and Safari 4 on an MS Windows XP machine.<br>\nFirst a little function from Peter-Paul Koch; cross browser event handler:</p>\n\n<pre><code>function addEvent(obj, evt, fn) {\n    if (obj.addEventListener) {\n        obj.addEventListener(evt, fn, false);\n    }\n    else if (obj.attachEvent) {\n        obj.attachEvent(\"on\" + evt, fn);\n    }\n}\n</code></pre>\n\n<p>And then use this method to attach an event handler to the document objects mouseout event:</p>\n\n<pre><code>addEvent(document, \"mouseout\", function(e) {\n    e = e ? e : window.event;\n    var from = e.relatedTarget || e.toElement;\n    if (!from || from.nodeName == \"HTML\") {\n        // stop your drag event here\n        // for now we can just use an alert\n        alert(\"left window\");\n    }\n});\n</code></pre>\n\n<p>Finally, here is an html page with the script embedded for debugging:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction addEvent(obj, evt, fn) {\n    if (obj.addEventListener) {\n        obj.addEventListener(evt, fn, false);\n    }\n    else if (obj.attachEvent) {\n        obj.attachEvent(\"on\" + evt, fn);\n    }\n}\naddEvent(window,\"load\",function(e) {\n    addEvent(document, \"mouseout\", function(e) {\n        e = e ? e : window.event;\n        var from = e.relatedTarget || e.toElement;\n        if (!from || from.nodeName == \"HTML\") {\n            // stop your drag event here\n            // for now we can just use an alert\n            alert(\"left window\");\n        }\n    });\n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>This works for me:</p>\n\n<pre><code>addEvent(document, 'mouseout', function(evt) {\n  if (evt.toElement == null &amp;&amp; evt.relatedTarget == null) {\n    alert(\"left window\");\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you have an option to use jQuery then how about this short and sweet code -</p>\n\n<pre><code>jQuery(document).mouseleave(function(){console.log('out')})\n</code></pre>\n\n<p>This event will trigger whenever the mouse is not in your page as you want. Just change the function to do what ever you want .</p>\n\n<p>and you may also use :</p>\n\n<pre><code>jQuery(document).mouseenter(function(){console.log('in')});\n</code></pre>\n\n<p>to trigger when the mouse enters back to the page again.</p>\n\n<p>Source: <a href=\"http://stackoverflow.com/a/16029966/895724\">http://stackoverflow.com/a/16029966/895724</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>apply this css:</p>\n\n<pre><code>html\n{\nheight:100%;\n}\n</code></pre>\n\n<p>This ensures that the html element takes up the entire height of the window.</p>\n\n<p>apply this jquery (I don't believe javascript has an equivalent function so this will be best):</p>\n\n<pre><code>$(\"html\").mouseleave(function(){\n alert('mouse out');\n});\n</code></pre>\n\n<p>The problem with mouseover and mouseout is that if you mouse over/out of html to a child element it will set off the event. The function I gave <strong><em>isn't</em></strong> set off when mousing to a child element. It is only set off when you mouse out/in of the window</p>\n\n<p></p>\n\n<p>just for you to know you can do it for when the user mouses in the window:</p>\n\n<pre><code>$(\"html\").mouseenter(function(){\n  alert('mouse enter');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This will work in chrome,</p>\n\n<pre><code>$(document).bind('dragleave', function (e) {\n    if (e.originalEvent.clientX == 0){\n        alert(\"left window\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>None of these answers worked for me. I'm now using:</p>\n\n<pre><code>document.addEventListener('dragleave', function(e){\n\n    var top = e.pageY;\n    var right = document.body.clientWidth - e.pageX;\n    var bottom = document.body.clientHeight - e.pageY;\n    var left = e.pageX;\n\n    if(top &lt; 10 || right &lt; 20 || bottom &lt; 10 || left &lt; 10){\n        console.log('Mouse has moved out of window');\n    }\n\n});\n</code></pre>\n\n<p>I'm using this for a drag and drop file uploading widget. It's not absolutely accurate, being triggered when the mouse gets to a certain distance from the edge of the window.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've tried all the above, but nothing seems to work as I've expected. After a little research I found that <strong>e.relatedTarget</strong> is the <strong>html</strong> just <strong>before the mouse exiting the window</strong>.</p>\n\n<p>So ... I've end up with this:</p>\n\n<pre><code>document.body.addEventListener('mouseout', function(e) {\n    if(e.relatedTarget === document.querySelector('html')) {\n        console.log('We\\'re OUT !');\n    }\n});\n</code></pre>\n\n<p>Please let me know if you find any issues or improvements !</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to be able to detect when the mouse leaves the window so I can stop events from firing while the user's mouse is elsewhere.</p>\n\n<p>Any ideas of how to do this?</p>\n",
            "last_activity_date": 1423494569,
            "question_id": 923299,
            "score": 29,
            "tags": [
                "javascript",
                "browser",
                "mouse"
            ],
            "title": "How can I detect when the mouse leaves the window?"
        }
    ]
}
