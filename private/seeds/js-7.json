{
    "items": [
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Rather than just alter the script from the question, I hope to make a quick outline of how to script these kinds of pages and actions with Greasemonkey/Tampermonkey.</p>\n\n<p>The steps are:</p>\n\n<ol>\n<li><p>Take careful note of what you do manually.  Take special note of elements added/altered by the page's javascript, and the needed sequence of steps, if any.</p></li>\n<li><p>Using <em>Firebug</em>, and/or Firefox's <em>inspector</em>, and/or Chrome's <em>Developer tools</em>, determine CSS/jQuery selector's for all of the elements you will read or manipulate.  This is especially easy to do using Firebug.</p></li>\n<li><p>Use jQuery to manipulate static HTML.  Use <a href=\"https://gist.github.com/2625891\">waitForKeyElements</a> to handle nodes added or changed by javascript (AJAX).  Use <a href=\"http://wiki.greasespot.net/Category%3aAPI_Reference\">the Greasemonkey API</a> -- which is also supported by Tampermonkey and partially supported by Chrome userscripts -- to do any cross-domain page calls, or to store any values between page loads for cross-domain sets of pages.</p></li>\n</ol>\n\n<hr>\n\n<hr>\n\n<h1>Specific example:</h1>\n\n<ol>\n<li><p>For <a href=\"http://store.nike.com/us/en_us/?l=shop,pdp,ctr-inline/cid-1/pid-656545/pgid-656543\">the OP's target pages</a>, the OP wants to: (a) automatically select the shoe size, (b) add the shoes to the shopping cart, and (c) click the checkout button.</p>\n\n<p>This requires waiting for, and/or clicking on, five (5) page elements like so:</p>\n\n<p><a href=\"http://i.stack.imgur.com/mdg9N.gif\"><img src=\"http://i.stack.imgur.com/mdg9N.gif\" alt=\"Set the size\"></a></p>\n\n<p><a href=\"http://i.stack.imgur.com/R4ouh.gif\"><img src=\"http://i.stack.imgur.com/R4ouh.gif\" alt=\"Check out\"></a></p>\n\n<p><br></p></li>\n<li><p>Using Firebug (or similar tool) we obtain the HTML structure for the key nodes.  For example, the <em>SIZE</em> dropdown has HTML like this:</p>\n\n<pre><code>&lt;div class=\"size-quantity\"&gt;\n    &lt;span class=\"sizeDropdown selectBox-open\"&gt;\n        ...\n        &lt;label class=\"dropdown-label selectBox-label-showing\"&gt;SIZE&lt;/label&gt;\n        ...\n        &lt;a class=\"selectBox size-dropdown mediumSelect footwear selectBox-dropdown\" ...&gt;\n            ...\n        &lt;/a&gt;\n    &lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Where the link actually fires off a <code>mousedown</code> event, not a click.</p>\n\n<p>Firebug gives us a CSS path of:</p>\n\n<pre><code>html.js body div#body div#body-wrapper.fullheight div#body-liner.clear div#content div#pdp.footwear div#product-container.clear div.pdp-buying-tools-container div.pdp-box div.buying-tools-container div#PDPBuyingTools.buying-tools-gadget form.add-to-cart-form div.product-selections div.size-quantity span.sizeDropdown a.selectBox\n</code></pre>\n\n<p>Which we can pare down to:</p>\n\n<pre><code>div.footwear form.add-to-cart-form span.sizeDropdown a.size-dropdown\n</code></pre>\n\n<p>for a reasonable selector that's likely to survive trivial page changes and unlikely to trigger on unwanted pages/products.</p>\n\n<p>~~~~~~~~~~~~~<br>\nNote that Firebug also helps us see what events are attached to what, which is crucial when determining what we need to trigger.  For example, for that node, I see:</p>\n\n<p><a href=\"http://i.stack.imgur.com/gJppo.gif\"><img src=\"http://i.stack.imgur.com/gJppo.gif\" alt=\"Events for key first node\" title=\"Click for larger view.\"></a></p>\n\n<p>That link has no <code>href</code>, nor does it listen for <code>click</code> events.  In this case, we must trigger a <code>mousedown</code> (or <code>keydown</code>).</p>\n\n<p>~~~~~~~~~~~~~<br>\nUsing a similar process for the other 4 key nodes, we obtain CSS/jQuery selectors of:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Node 1:     div.footwear form.add-to-cart-form span.sizeDropdown a.size-dropdown\n\nNode 2:     ul.selectBox-dropdown-menu li a:contains('10')\n            (But this will need an additional check)\n\nNode 3:     div.footwear form.add-to-cart-form span.sizeDropdown a.selectBox span.selectBox-label:contains('(10)')\n\nNode 4:     div.footwear form.add-to-cart-form div.product-selections div.add-to-cart\n\nNode 5:     div.mini-cart div.cart-item-data a.checkout-button:visible\n</code></pre>\n\n<p><br></p></li>\n<li><p>Finally, we use <code>waitForKeyElements</code> to send the required events to the key nodes and to sequence through the proper order of operations.</p></li>\n</ol>\n\n<p>The resulting, <strong>complete, working script</strong> is:</p>\n\n<pre><code>// ==UserScript==\n// @name     _Nike auto-buy shoes(!!!) script\n// @include  http://store.nike.com/*\n// @include  https://store.nike.com/*\n// @require  http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\n// @require  https://gist.github.com/raw/2625891/waitForKeyElements.js\n// @grant    GM_addStyle\n// ==/UserScript==\n/*- The @grant directive is needed to work around a design change\n    introduced in GM 1.0.   It restores the sandbox.\n*/\n\nvar targetShoeSize  = \"10\";\n\n//-- STEP 1:    Activate size drop-down.\nwaitForKeyElements (\n    \"div.footwear form.add-to-cart-form span.sizeDropdown a.size-dropdown\",\n    activateSizeDropdown\n);\nfunction activateSizeDropdown (jNode) {\n    triggerMouseEvent (jNode[0], \"mousedown\");\n\n    //-- Setup step 2.\n    waitForKeyElements (\n        \"ul.selectBox-dropdown-menu li a:contains('\" + targetShoeSize + \"'):visible\",\n        selectDesiredShoeSize\n    );\n}\n\n//-- STEP 2:    Select desired shoe size.\nfunction selectDesiredShoeSize (jNode) {\n    /*-- Because the selector for this node is vulnerable to false positives,\n        we need an additional check here.\n    */\n    if ($.trim (jNode.text () ) === targetShoeSize) {\n        //-- This node needs a triplex event\n        triggerMouseEvent (jNode[0], \"mouseover\");\n        triggerMouseEvent (jNode[0], \"mousedown\");\n        triggerMouseEvent (jNode[0], \"mouseup\");\n\n        //-- Setup steps 3 and 4.\n        waitForKeyElements (\n            \"div.footwear form.add-to-cart-form span.sizeDropdown a.selectBox \"\n            + \"span.selectBox-label:contains('(\" + targetShoeSize + \")')\",\n            waitForShoeSizeDisplayAndAddToCart\n        );\n    }\n}\n\n//-- STEPS 3 and 4: Wait for shoe size display and add to cart.\nfunction waitForShoeSizeDisplayAndAddToCart (jNode) {\n    var addToCartButton = $(\n        \"div.footwear form.add-to-cart-form div.product-selections div.add-to-cart\"\n    );\n    triggerMouseEvent (addToCartButton[0], \"click\");\n\n    //-- Setup step 5.\n    waitForKeyElements (\n        \"div.mini-cart div.cart-item-data a.checkout-button:visible\",\n        clickTheCheckoutButton\n    );\n}\n\n//-- STEP 5:    Click the checkout button.\nfunction clickTheCheckoutButton (jNode) {\n    triggerMouseEvent (jNode[0], \"click\");\n\n    //-- All done.  The checkout page should load.\n}\n\nfunction triggerMouseEvent (node, eventType) {\n    var clickEvent = document.createEvent('MouseEvents');\n    clickEvent.initEvent (eventType, true, true);\n    node.dispatchEvent (clickEvent);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 12
                }
            ],
            "body": "<p>So, I am trying to make it where every time I visit any nike.com sneaker page (without the HTML link), it automatically picks my shoe size, adds it to the cart, and checks out for me. </p>\n\n<p>I am currently trying to use this script (below), but every time I go to the sneaker page, it does not properly add the shoe size I want, but just goes straight to checkout with nothing in my cart. </p>\n\n<p>I'm told that I need to match the code to the actual page HTML, but I don't know how to do that.  Please help.</p>\n\n<pre><code>// ==UserScript==\n// @name     _Nike auto-buy(!!!) script\n// @include  http://*/*\n// @require  http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\n// @require  https://gist.github.com/raw/2625891/waitForKeyElements.js\n// @grant    GM_addStyle\n// ==/UserScript==\n/*- The @grant directive is needed to work around a design change\n    introduced in GM 1.0.   It restores the sandbox.\n*/\n\nvar okayToClickAddtoCart = false;\n\n//-- Assumes that size is a standard &lt;option&gt; tag or similar...\nwaitForKeyElements (\".selectBox-label[value='10']\", selectShoeSize);\n\nfunction selectShoeSize (jNode) {\n    jNode.prop ('selected', true);\n\n    okayToClickAddtoCart = true;\n}\n\n\nwaitForKeyElements (\".add-to-cart.nike-button\", clickAddToCart);\n\nfunction clickAddToCart (jNode) {\n    if ( ! okayToClickAddtoCart) {\n        return true;    //-- Don't click yet.\n    }\n\n    var clickEvent  = document.createEvent ('MouseEvents');\n    clickEvent.initEvent ('click', true, true);\n    jNode[0].dispatchEvent (clickEvent);\n}\n\n\nwaitForKeyElements (\".checkout-button\", clickCheckoutButton);\n\nfunction clickCheckoutButton (jNode) {\n    var clickEvent  = document.createEvent ('MouseEvents');\n    clickEvent.initEvent ('click', true, true);\n    jNode[0].dispatchEvent (clickEvent);\n}\n</code></pre>\n\n<p><br>\n<a href=\"http://store.nike.com/us/en_us/?l=shop,pdp,ctr-inline/cid-1/pid-656545/pgid-656543\" rel=\"nofollow\">Link to the \"target page\"</a><br>\n<a href=\"http://pastebin.com/6M7cMw40\" rel=\"nofollow\">Snapshot of the target HTML</a> (in case the target page is removed or changed by Nike)</p>\n",
            "last_activity_date": 1375371978,
            "question_id": 15048223,
            "score": 3,
            "tags": [
                "javascript",
                "jquery",
                "greasemonkey",
                "tampermonkey"
            ],
            "title": "Choosing and activating the right controls on an AJAX-driven site"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Here's the way to do it without using any external libraries:</p>\n\n<pre><code>// Define a class like this\nfunction Person(name, gender){\n\n   // Add object properties like this\n   this.name = name;\n   this.gender = gender;\n}\n\n// Add methods like this.  All Person objects will be able to invoke this\nPerson.prototype.speak = function(){\n    alert(\"Howdy, my name is\" + this.name);\n};\n\n// Instantiate new objects with 'new'\nvar person = new Person(\"Bob\", \"M\");\n\n// Invoke methods like this\nperson.speak(); // alerts \"Howdy, my name is Bob\"\n</code></pre>\n\n<p>Now the real answer is a whole lot more complex than that. For instance, there is no such thing as classes in JavaScript. JavaScript uses a <code>prototype</code>-based inheritance scheme.  </p>\n\n<p>In addition, there are numerous popular JavaScript libraries that have their own style of approximating class-like functionality in JavaScript. You'll want to check out at least <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\">Prototype</a> and <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a>.  </p>\n\n<p>Deciding which of these is the \"best\" is a great way to start a holy war on Stack&nbsp;Overflow. If you're embarking on a larger JavaScript-heavy project, it's definitely worth learning a popular library and doing it their way. I'm a Prototype guy, but Stack&nbsp;Overflow seems to <a href=\"http://stackoverflow.com/questions/176324/why-does-everyone-like-jquery-more-than-prototypescriptaclous-or-mootools-or-wh\">lean towards jQuery</a>.</p>\n\n<p>As far as there being only \"one way to do it\", without any dependencies on external libraries, the way I wrote is pretty much it.   </p>\n",
                    "is_accepted": true,
                    "score": 459
                },
                {
                    "body": "<p>If you're going for simple, you can avoid the \"new\" keyword entirely and just use factory methods.  I prefer this, sometimes, because I like using JSON to create objects.</p>\n\n<pre><code>function getSomeObj(var1, var2){\n  var obj = {\n     instancevar1: var1,\n     instancevar2: var2,\n     someMethod: function(param)\n     {  \n          //stuff; \n     }\n  };\n  return obj;\n}\n\nvar myobj = getSomeObj(\"var1\", \"var2\");\nmyobj.someMethod(\"bla\");\n</code></pre>\n\n<p>I'm not sure what the performance hit is for large objects, though.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If you haven't settled on a JavaScript library yet, and if you are looking for sanity in your life, make sure to check out <a href=\"http://en.wikipedia.org/wiki/Ext_JS\" rel=\"nofollow\">Ext&nbsp;JS</a> in your exploration.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JavaScript is <a href=\"http://en.wikipedia.org/wiki/Object-orientation\" rel=\"nofollow\">object-oriented</a>, but it's radically different than other <a href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"nofollow\">OOP</a> languages like Java, C# or C++. Don't try to understand it like that. Throw that old knowledge out and start anew. JavaScript needs a different thinking.</p>\n\n<p>I'd suggest to get a good manual or something on the subject. <s>I myself found <a href=\"http://extjs.com/learn/Tutorial%3aWhat_is_that_Scope_all_about\" rel=\"nofollow\">ExtJS Tutorials</a> the best for me, although I haven't used the framework before or after reading it. But it does give a good explanation about what is what in JavaScript world.</s> Sorry, it seems that that content has been removed. Here's a link to <a href=\"http://web.archive.org/web/20120213180147/http://www.sencha.com/learn/legacy/Tutorial%3aWhat_is_that_Scope_all_about\" rel=\"nofollow\">archive.org copy</a> instead. Works today. :P</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The simple way is:</p>\n\n<pre><code>function Foo(a) {\n  var that=this;\n\n  function privateMethod() { .. }\n\n  // public methods\n  that.add = function(b) {\n    return a + b;\n  };\n  that.avg = function(b) {\n    return that.add(b) / 2; // calling another public method\n  };\n}\n\nvar x = new Foo(10);\nalert(x.add(2)); // 12\nalert(x.avg(20)); // 15\n</code></pre>\n\n<p>The reason for <code>that</code> is that <code>this</code> can be bound to something else if you give a method as an event handler, so you save the value during instantiation and use it later.</p>\n\n<p>Edit: it's definitely not the best way, just a simple way. I'm waiting for good answers too!</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think you should read Douglas Crockford's <a href=\"http://javascript.crockford.com/prototypal.html\">Prototypal Inheritance in JavaScript</a> and <a href=\"http://javascript.crockford.com/inheritance.html\">Classical Inheritance in JavaScript</a>.</p>\n\n<p>Examples from his page:</p>\n\n<pre><code>Function.prototype.method = function (name, func) {\n    this.prototype[name] = func;\n    return this;\n};\n</code></pre>\n\n<p>Effect? It will allow you to add methods in more elegant way:</p>\n\n<pre><code>function Parenizor(value) {\n    this.setValue(value);\n}\n\nParenizor.method('setValue', function (value) {\n    this.value = value;\n    return this;\n});\n</code></pre>\n\n<p>I also recommend his videos:\n<a href=\"http://yuiblog.com/blog/2006/11/27/video-crockford-advjs/\">Advanced JavaScript</a>.</p>\n\n<p>You can find more videos on his page: <a href=\"http://javascript.crockford.com/\">http://javascript.crockford.com/</a>\nIn John Reisig book you can find many examples from Douglas Crockfor's website.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>The best way to define a class in JavaScript is to not define a class.</p>\n\n<p>Seriously.</p>\n\n<p>There are several different flavors of object-orientation, some of them are: </p>\n\n<ul>\n<li>class-based OO (first introduced by Smalltalk)</li>\n<li>prototype-based OO (first introduced by Self)</li>\n<li>multimethod-based OO (first introduced by CommonLoops, I think)</li>\n<li>predicate-based OO (no idea)</li>\n</ul>\n\n<p>And probably others I don't know about.</p>\n\n<p>JavaScript implements prototype-based OO. In prototype-based OO, new objects are created by copying other objects (instead of being instantiated from a class template) and methods live directly in objects instead of in classes. Inheritance is done via delegation: if an object doesn't have a method or property, it is looked up on its prototype(s) (i.e. the object it was cloned from), then the prototype's prototypes and so on.</p>\n\n<p>In other words: there are no classes.</p>\n\n<p>JavaScript actually has a nice tweak of that model: constructors. Not only can you create objects by copying existing ones, you can also construct them \"out of thin air\", so to speak. If you call a function with the <code>new</code> keyword, that function becomes a constructor and the <code>this</code> keyword will not point to the current object but instead to a newly created \"empty\" one. So, you can configure an object any way you like. In that way, JavaScript constructors can take on one of the roles of classes in traditional class-based OO: serving as a template or blueprint for new objects.</p>\n\n<p>Now, JavaScript is a very powerful language, so it is quite easy to implement a class-based OO system <em>within JavaScript</em> if you want to. However, you should only do this if you really have a need for it and not just because that's the way Java does it.</p>\n",
                    "is_accepted": false,
                    "score": 143
                },
                {
                    "body": "<p>Because I will not admit the YUI/Crockford factory plan and because I like to keep things self contained and extensible this is my variation:</p>\n\n<pre><code>function Person(params)\n{\n  this.name = params.name || defaultnamevalue;\n  this.role = params.role || defaultrolevalue;\n\n  if(typeof(this.speak)=='undefined') //guarantees one time prototyping\n  {\n    Person.prototype.speak = function() {/* do whatever */};\n  }\n}\n\nvar Robert = new Person({name:'Bob'});\n</code></pre>\n\n<p>where ideally the typeof test is on something like the first method prototyped</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><a href=\"http://mootools.net\" rel=\"nofollow\">MooTools</a> (My Object Oriented Tools) is centered on the idea of <a href=\"http://mootools.net/docs/core/Class/Class\" rel=\"nofollow\">classes</a>.  You can even extend and implement with inheritance.  </p>\n\n<p>When mastered, it makes for ridiculously reusable, powerful javascript.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var Animal = function(options) {\n    var name = options.name;\n    var animal = {};\n\n    animal.getName = function() {\n        return name;\n    };\n\n    var somePrivateMethod = function() {\n\n    };\n\n    return animal;\n};\n\n// usage\nvar cat = Animal({name: 'tiger'});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>I prefer to use Daniel X. Moore's <strong><code>{SUPER: SYSTEM}</code></strong>. This is a discipline that provides benefits such as true instance variables, trait based inheritance, class hierarchies and configuration options. The example below illustrates the use of true instance variables, which I believe is the biggest advantage. If you don't need instance variables and are happy with only public or private variables then there are probably simpler systems.</p>\n\n<pre><code>function Person(I) {\n  I = I || {};\n\n  Object.reverseMerge(I, {\n    name: \"McLovin\",\n    age: 25,\n    homeState: \"Hawaii\"\n  });\n\n  return {\n    introduce: function() {\n      return \"Hi I'm \" + I.name + \" and I'm \" + I.age;\n    }\n  };\n}\n\nvar fogel = Person({\n  age: \"old enough\"\n});\nfogel.introduce(); // \"Hi I'm McLovin and I'm old enough\"\n</code></pre>\n\n<p>Wow, that's not really very useful on it's own, but take a look at adding a subclass:</p>\n\n<pre><code>function Ninja(I) {\n  I = I || {};\n\n  Object.reverseMerge(I, {\n    belt: \"black\"\n  });\n\n  // Ninja is a subclass of person\n  return Object.extend(Person(I), {\n    greetChallenger: function() {\n      return \"In all my \" + I.age + \" years as a ninja, I've never met a challenger as worthy as you...\";\n    }\n  });\n}\n\nvar resig = Ninja({name: \"John Resig\"});\n\nresig.introduce(); // \"Hi I'm John Resig and I'm 25\"\n</code></pre>\n\n<p>Another advantage is the ability to have modules and trait based inheritance.</p>\n\n<pre><code>// The Bindable module\nfunction Bindable() {\n\n  var eventCallbacks = {};\n\n  return {\n    bind: function(event, callback) {\n      eventCallbacks[event] = eventCallbacks[event] || [];\n\n      eventCallbacks[event].push(callback);\n    },\n\n    trigger: function(event) {\n      var callbacks = eventCallbacks[event];\n\n      if(callbacks &amp;&amp; callbacks.length) {\n        var self = this;\n        callbacks.forEach(function(callback) {\n          callback(self);\n        });\n      }\n    },\n  };\n}\n</code></pre>\n\n<p>An example of having the person class include the bindable module.</p>\n\n<pre><code>function Person(I) {\n  I = I || {};\n\n  Object.reverseMerge(I, {\n    name: \"McLovin\",\n    age: 25,\n    homeState: \"Hawaii\"\n  });\n\n  var self = {\n    introduce: function() {\n      return \"Hi I'm \" + I.name + \" and I'm \" + I.age;\n    }\n  };\n\n  // Including the Bindable module\n  Object.extend(self, Bindable());\n\n  return self;\n}\n\nvar person = Person();\nperson.bind(\"eat\", function() {\n  alert(person.introduce() + \" and I'm eating!\");\n});\n\nperson.trigger(\"eat\"); // Blasts the alert!\n</code></pre>\n\n<p>Disclosure: I am Daniel X. Moore and this is my <strong><code>{SUPER: SYSTEM}</code></strong>. It is the best way to define a class in JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Following are the ways to create objects in javascript, which I've used so far</p>\n\n<p>Example 1:</p>\n\n<pre><code>obj = new Object();\nObj.name = 'test';\nobj.prototype.sayHello = function() {\n    console.log('Hello '+ this.name);\n}\n</code></pre>\n\n<p>Example 2:</p>\n\n<pre><code>obj = {};\nobj.name = 'test';\nobj.sayHello = function() {\n    console.log('Hello '+ this.name);\n }\nobj.sayHello();\n</code></pre>\n\n<p>Example 3:</p>\n\n<pre><code>var obj = function(nameParam) {\n    this.name = nameParam;\n}\nobj.prototype.sayHello = function() {\n    console.log('Hello '+ this.name);\n}\n</code></pre>\n\n<p>Example 4: <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create\">Actual benefits of Object.create(). please refer [this link]\n</a></p>\n\n<pre><code>var Obj = {\n    init: function(nameParam) {\n        this.name = nameParam;\n    },\n    sayHello: function() {\n        console.log('Hello '+ this.name);\n    }\n};\nvar usrObj = Object.create(Obj);  // &lt;== one level of inheritance\n\nbob.init('Bob');\nbob.sayHello();\n</code></pre>\n\n<p>Example 5 (customised Crockford's Object.create):</p>\n\n<pre><code>Object.build = function(o) {\n   var initArgs = Array.prototype.slice.call(arguments,1)\n   function F() {\n      if((typeof o.init === 'function') &amp;&amp; initArgs.length) {\n         o.init.apply(this,initArgs)\n      }\n   }\n   F.prototype = o\n   return new F()\n}\nMY_GLOBAL = {i: 1, nextId: function(){return this.i++}}  // For example\n\nvar userB = {\n    init: function(nameParam) {\n        this.id = MY_GLOBAL.nextId();\n        this.name = nameParam;\n    },\n    sayHello: function() {\n        console.log('Hello '+ this.name);\n    }\n};\nvar bob = Object.build(userB, 'Bob');  // Different from your code\nbob.sayHello();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You probably want to create a type by using the Folding Pattern:</p>\n\n<pre><code>    // Here is the constructor section.\n    var myType = function () {\n        var N = {}, // Enclosed (private) members are here.\n            X = this; // Exposed (public) members are here.\n\n        (function ENCLOSED_FIELDS() {\n            N.toggle = false;\n            N.text = '';\n        }());\n\n        (function EXPOSED_FIELDS() {\n            X.count = 0;\n            X.numbers = [1, 2, 3];\n        }());\n\n        // The properties below have access to the enclosed fields.\n        // Careful with functions exposed within the closure of the\n        // constructor, each new instance will have it's own copy.\n        (function EXPOSED_PROPERTIES_WITHIN_CONSTRUCTOR() {\n            Object.defineProperty(X, 'toggle', {\n                get: function () {\n                    var before = N.toggle;\n                    N.toggle = !N.toggle;\n                    return before;\n                }\n            });\n\n            Object.defineProperty(X, 'text', {\n                get: function () {\n                    return N.text;\n                },\n                set: function (value) {\n                    N.text = value;\n                }\n            });\n        }());\n    };\n\n    // Here is the prototype section.\n    (function PROTOTYPE() {\n        var P = myType.prototype;\n\n        (function EXPOSED_PROPERTIES_WITHIN_PROTOTYPE() {\n            Object.defineProperty(P, 'numberLength', {\n                get: function () {\n                    return this.numbers.length;\n                }\n            });\n        }());\n\n        (function EXPOSED_METHODS() {\n            P.incrementNumbersByCount = function () {\n                var i;\n                for (i = 0; i &lt; this.numbers.length; i++) {\n                    this.numbers[i] += this.count;\n                }\n            };\n            P.tweak = function () {\n                if (this.toggle) {\n                    this.count++;\n                }\n                this.text = 'tweaked';\n            };\n        }());\n    }());\n</code></pre>\n\n<p>That code will give you a type called <strong>myType</strong>. It will have internal private fields called <strong>toggle</strong> and <strong>text</strong>. It will also have these exposed members: the fields <strong>count</strong> and <strong>numbers</strong>; the properties <strong>toggle</strong>, <strong>text</strong> and <strong>numberLength</strong>; the methods <strong>incrementNumbersByCount</strong> and <strong>tweak</strong>.</p>\n\n<p>The Folding Pattern is fully detailed here:\n<a href=\"http://intrepidis.blogspot.com/2013/04/javascript-folding-pattern.html\" rel=\"nofollow\">Javascript Folding Pattern</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I prefer to use OOP in large scale projects like the one I'm working on right now. I need to create several classes in JavaScript but, if I'm not mistaken, there are at least a couple of ways to go about doing that. What would be the syntax and why would it be done in that way?</p>\n\n<p>Or am I way off base here and there's only one way to define classes?</p>\n\n<p>I would like to avoid using third-party libraries - at least at first.<br>\nLooking for other answers, I found the article <em><a href=\"http://www.webreference.com/js/column79/\">Object-Oriented Programming with JavaScript, Part I: Inheritance - Doc JavaScript</a></em> that discusses object-oriented programming in JavaScript. Is there a better way to do inheritance? </p>\n",
            "last_activity_date": 1413760914,
            "question_id": 387707,
            "score": 419,
            "tags": [
                "javascript",
                "oop",
                "class"
            ],
            "title": "What&#39;s the best way to define a class in JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Use the <code>push()</code> function to append to an array:</p>\n\n<pre><code>// initialize array\nvar arr = [\n    \"Hi\",\n    \"Hello\",\n    \"Bonjour\"\n];\n\n// append new value to the array\narr.push(\"Hola\");\n\n// display all values\nfor (var i = 0; i &lt; arr.length; i++) {\n    console.log(arr[i]);\n}\n</code></pre>\n\n<p>Will print:</p>\n\n<pre><code>Hi\nHello\nBonjour\nHola \n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1290
                },
                {
                    "body": "<p>If you're only appending a single variable, then <code>push()</code> works just fine. If you need to append another array, use <code>concat()</code>:</p>\n\n<pre><code>var ar1 = [1, 2, 3];\nvar ar2 = [4, 5, 6];\n\nvar ar3 = ar1.concat(ar2);\n\nalert(ar3);\n</code></pre>\n\n<p>Will spit out \"1,2,3,4,5,6\"</p>\n\n<p>Lots of great info <a href=\"http://www.javascriptkit.com/jsref/\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 501
                },
                {
                    "body": "<p>Some quick benchmarking (each test = 500k appended elements and the results are averages of multiple runs) showed the following:</p>\n\n<p>Firefox 3.6 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (300ms vs. 800ms)</li>\n<li>Large arrays: <strong><code>arr.push(b)</code> is faster</strong> (500ms vs. 900ms)</li>\n</ul>\n\n<p>Safari 5.0 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (90ms vs. 115ms)</li>\n<li>Large arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (160ms vs. 185ms)</li>\n</ul>\n\n<p>Google Chrome 6.0 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong>No significant difference</strong> (and Chrome is FAST! Only ~38ms !!)</li>\n<li>Large arrays: <strong>No significant difference</strong> (160ms)</li>\n</ul>\n\n<p>I like the <code>arr.push()</code> syntax better, but I think for my use I'd be better off with the <code>arr[arr.length]</code> version, at least in raw speed. I'd love to see the results of an IE run though.</p>\n\n<hr>\n\n<p>My benchmarking loops:</p>\n\n<pre><code>function arrpush_small() {\n    var arr1 = [];\n    for (a=0;a&lt;100;a++)\n    {\n        arr1 = [];\n        for (i=0;i&lt;5000;i++)\n        {\n            arr1.push('elem'+i);\n        }\n    }\n}\n\nfunction arrlen_small() {\n    var arr2 = [];\n    for (b=0;b&lt;100;b++)\n    {\n        arr2 = [];\n        for (j=0;j&lt;5000;j++)\n        {\n            arr2[arr2.length] = 'elem'+j;\n        }\n    }\n}\n\n\nfunction arrpush_large() {\n    var arr1 = [];\n    for (i=0;i&lt;500000;i++)\n    {\n        arr1.push('elem'+i);\n    }\n}\n\nfunction arrlen_large() {\n    var arr2 = [];\n    for (j=0;j&lt;500000;j++)\n    {\n        arr2[arr2.length] = 'elem'+j;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 210
                },
                {
                    "body": "<p>If <code>arr</code> is an array, and <code>val</code> is the value you wish to add use:</p>\n\n<pre><code>arr.push(val);\n</code></pre>\n\n<p>E.g.</p>\n\n<pre><code>arr = ['a', 'b', 'c'];\narr.push('d');\nconsole.log(arr);\n</code></pre>\n\n<p>will log:</p>\n\n<pre><code>['a', 'b', 'c', 'd']\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Use <code>concat</code>:</p>\n\n<pre><code>a = [1, 2, 3];\nb = [3, 4, 5];\na = a.concat(b);\n</code></pre>\n\n<p><code>a</code> now contains all the elements, <code>[1, 2, 3, 3, 4, 5]</code>.</p>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>If you know the highest index (such as stored in a variable \"i\") then you can do</p>\n\n<pre><code>myArray[i + 1] = someValue;\n</code></pre>\n\n<p>However if you don't know then you can either use </p>\n\n<pre><code>myArray.push(someValue);\n</code></pre>\n\n<p>as other answers suggested, or you can use</p>\n\n<pre><code>myArray[myArray.length] = someValue; \n</code></pre>\n\n<p>Note that the array is zero based so .length return the highest index plus one.</p>\n\n<p>Also note that you don't have to add in order and you can actually skip values, as in</p>\n\n<pre><code>myArray[myArray.length + 1000] = someValue;\n</code></pre>\n\n<p>In which case the values in between will have a value of undefined.</p>\n\n<p>It is therefore a good practice when looping through a JavaScript to verify that a value actually exists at that point.</p>\n\n<p>This can be done by something like the following:</p>\n\n<pre><code>if(myArray[i] === \"undefined\"){ continue; }\n</code></pre>\n\n<p>if you are certain that you don't have any zeros in the array then you can just do:</p>\n\n<pre><code>if(!myArray[i]){ continue; }\n</code></pre>\n\n<p>Of course make sure in this case that you don't use as the condition myArray[i] (as some people over the internet suggest based on the end that as soon as i is greater then the highest index it will return undefined which evaluates to false)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think it's worth mentioning that push can be called with multiple arguments, which will be appended to the array in order. For example:</p>\n\n<pre><code>var arr = ['first'];\narr.push('second', 'third');\nconsole.log(arr); // ['first', 'second', 'third']\n</code></pre>\n\n<p>As a result of this you can use push.apply to append an array to another array like so:</p>\n\n<pre><code>arr.push.apply(arr, ['forth', 'fifth']);\nconsole.log(arr); // ['first', 'second', 'third', 'forth', 'fifth']\n</code></pre>\n\n<p><a href=\"http://es5.github.com/\">Annotated ES5</a> has more info on exactly what <a href=\"http://es5.github.com/#x15.4.4.7\">push</a> and <a href=\"http://es5.github.com/#x15.3.4.3\">apply</a> do.</p>\n",
                    "is_accepted": false,
                    "score": 125
                },
                {
                    "body": "<p>You can use <code>push</code> and <code>apply</code> function to append two arrays.</p>\n\n<pre><code>var array1 = [11,32,75];\nvar array2 = [99,67,34];\n\nArray.prototype.push.apply(array1, array2);\n</code></pre>\n\n<p>It will copy <code>array2</code> to <code>array1</code>. Now <code>array1</code> contains <code>[11, 32, 75, 99, 67, 34]</code>.\nThis code is much simpler than writing <code>for</code> loops to copy each and every items in the array.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>if you want to append two array -</p>\n\n<pre><code>var a =['a','b'];\nvar b=['c','d'];\n</code></pre>\n\n<p>then you use-</p>\n\n<pre><code>var c =a.concat('b');\n</code></pre>\n\n<p>and if you want to add record (g) in an array  (var a=[]) then you use</p>\n\n<pre><code>a.push('g');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>Let the array length property do the work:</h1>\n\n<pre><code>myarray[myarray.length] = 'new element value added to the end of the array';\n</code></pre>\n\n<p>myarray.length returns the number of strings in the array.\n<strong>JS is zero based</strong> so the next element key of the array will be the current length of the array.\nEX:</p>\n\n<pre><code>var myarray = [0, 1, 2, 3],\n    myarrayLength = myarray.length; //myarrayLength is set to 4\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do I append to an array in JavaScript?</p>\n",
            "last_activity_date": 1419636875,
            "question_id": 351409,
            "score": 1025,
            "tags": [
                "javascript",
                "arrays",
                "append"
            ],
            "title": "Appending to array"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>You'll need use some form of iteration to accomplish this.  There isn't any built in mechanism in JavaScript to accomplish the task.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You'll have to loop and then <a href=\"http://www.w3schools.com/jsref/jsref_splice.asp\" rel=\"nofollow\">splice()</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Try this.  Pass it your array and it will return with empty elements removed.  *Updated to address the bug pointed out by Jason</p>\n\n<pre><code>function removeEmptyElem(ary) {\n    for (var i=ary.length;i&gt;=0;i--) {\n        if (ary[i] == undefined)  {\n            ary.splice(i, 1);\n        }   \t\n    }\n    return ary;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You may find it easier to loop over your array and build a new array out of the items you want to keep from the array than by trying to loop and splice as has been suggested, since modifying the length of the array while it is being looped over can introduce problems.</p>\n\n<p>You could do something like this:</p>\n\n<pre><code>function removeFalsyElementsFromArray(someArray) {\n    var newArray = [];\n    for(var index = 0; index &lt; someArray.length; index++) {\n        if(someArray[index]) {\n            newArray.push(someArray[index]);\n        }\n    }\n    return newArray;\n}\n</code></pre>\n\n<p>Actually here is a more generic solution:</p>\n\n<pre><code>function removeElementsFromArray(someArray, filter) {\n    var newArray = [];\n    for(var index = 0; index &lt; someArray.length; index++) {\n        if(filter(someArray[index]) == false) {\n            newArray.push(someArray[index]);\n        }\n    }\n    return newArray;\n}\n\n// then provide one or more filter functions that will \n// filter out the elements based on some condition:\nfunction isNullOrUndefined(item) {\n    return (item == null || typeof(item) == \"undefined\");\n}\n\n// then call the function like this:\nvar myArray = [1,2,,3,,3,,,,,,4,,4,,5,,6,,,,];\nvar results = removeElementsFromArray(myArray, isNullOrUndefined);\n\n// results == [1,2,3,3,4,4,5,6]\n</code></pre>\n\n<p>You get the idea - you could then have other types of filter functions. Probably more than you need, but I was feeling generous... ;)</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I use this method, extending the native Array prototype:</p>\n\n<pre><code>Array.prototype.clean = function(deleteValue) {\n  for (var i = 0; i &lt; this.length; i++) {\n    if (this[i] == deleteValue) {         \n      this.splice(i, 1);\n      i--;\n    }\n  }\n  return this;\n};\n\ntest = new Array(\"\",\"One\",\"Two\",\"\", \"Three\",\"\",\"Four\").clean(\"\");\n\ntest2 = [1,2,,3,,3,,,,,,4,,4,,5,,6,,,,];\ntest2.clean(undefined);\n</code></pre>\n\n<p>Or you can simply push the existing elements into other array (the example removes every \"falsy\" value: <code>undefined</code>, <code>null</code>, <code>0</code>, <code>false</code>, <code>NaN</code> and <code>''</code>):</p>\n\n<pre><code>function cleanArray(actual){\n  var newArray = new Array();\n  for(var i = 0; i&lt;actual.length; i++){\n      if (actual[i]){\n        newArray.push(actual[i]);\n    }\n  }\n  return newArray;\n}\n\ncleanArray([1,2,,3,,3,,,,,,4,,4,,5,,6,,,,]);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 208
                },
                {
                    "body": "<p>If you've got Javascript 1.6 or later you can use <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\"><code>Array.filter</code></a> using a trivial <code>return true</code> callback function, e.g.:</p>\n\n<pre><code>arr = arr.filter(function() { return true; });\n</code></pre>\n\n<p>since <code>.filter</code> automatically skips missing elements in the original array.</p>\n\n<p>The MDN page linked above also contains a nice error-checking version of <code>filter</code> that can be used in JavaScript interpreters that don't support the official version.</p>\n\n<p>Note that this will not remove <code>null</code> entries nor entries with an explicit <code>undefined</code> value, but the OP specifically requested \"missing\" entries.</p>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>This works, I tested it in <a href=\"http://appjet.com/\" rel=\"nofollow\">AppJet</a> (you can copy-paste the code on its IDE and press \"reload\" to see it work, don't need to create an account)</p>\n\n<pre><code>/* appjet:version 0.1 */\nfunction Joes_remove(someArray) {\n    var newArray = [];\n    var element;\n    for( element in someArray){\n        if(someArray[element]!=undefined ) {\n            newArray.push(someArray[element]);\n        }\n    }\n    return newArray;\n}\n\nvar myArray2 = [1,2,,3,,3,,,0,,,4,,4,,5,,6,,,,];\n\nprint(\"Original array:\", myArray2);\nprint(\"Clenased array:\", Joes_remove(myArray2) );\n/*\nReturns: [1,2,3,3,0,4,4,5,6]\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@Alnitak</p>\n\n<p>Actually Array.filter works on all browsers if you add some extra code. See below.</p>\n\n<pre><code>var array = [\"\",\"one\",0,\"\",null,0,1,2,4,\"two\"];\n\nfunction isempty(x){\nif(x!==\"\")\n    return true;\n}\nvar res = array.filter(isempty);\ndocument.writeln(res.toJSONString());\n// gives: [\"one\",0,null,0,1,2,4,\"two\"]\n</code></pre>\n\n<p>This is the code you need to add for IE, but filter and Functional programmingis worth is imo.</p>\n\n<pre><code>//This prototype is provided by the Mozilla foundation and\n//is distributed under the MIT license.\n//http://www.ibiblio.org/pub/Linux/LICENSES/mit.license\n\nif (!Array.prototype.filter)\n{\n  Array.prototype.filter = function(fun /*, thisp*/)\n  {\n    var len = this.length;\n    if (typeof fun != \"function\")\n      throw new TypeError();\n\n    var res = new Array();\n    var thisp = arguments[1];\n    for (var i = 0; i &lt; len; i++)\n    {\n      if (i in this)\n      {\n        var val = this[i]; // in case fun mutates this\n        if (fun.call(thisp, val, i, this))\n          res.push(val);\n      }\n    }\n\n    return res;\n  };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Filtering out invalid entries with a regular expression</p>\n\n<pre><code>array = array.filter(/\\w/);\nfilter + regexp\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>Pure javascript:</h2>\n\n<pre><code>var arr = [1,2,,3,,3,null,,0,,undefined,4,,4,,5,,6,,,,];\n\n// (JS 1.6 and above)\narr = arr.filter(function(n){ return n != undefined }); \n\narr // [1, 2, 3, 3, 0, 4, 4, 5, 6]\n</code></pre>\n\n<p><strong>or - (only for arrays items which are numbers is numbers' strings)</strong></p>\n\n<pre><code>arr = arr.filter(Number)\n</code></pre>\n\n<p><strong>or - (only for <em>single</em> array items of type \"text\")</strong></p>\n\n<pre><code>['','1','2',3,,'4',,undefined,,,'5'].join('').split(''); \n// output:  [\"1\",\"2\",\"3\",\"4\",\"5\"]\n</code></pre>\n\n<p><strong>or - Classic way: simple iteration</strong></p>\n\n<pre><code>var arr = [1,2,null, undefined,3,,3,,,0,,,[],,{},,5,,6,,,,],\n    len = arr.length, i;\n\nfor(i = 0; i &lt; len; i++ )\n    arr[i] &amp;&amp; arr.push(arr[i]);  // copy non-empty values to the end of the array\n\narr.splice(0 , len);  // cut the array and leave only the non-empty values\n\narr // [1,2,3,3,[],Object{},5,6]\n</code></pre>\n\n<p><br/></p>\n\n<h2>via jQuery:</h2>\n\n<pre><code>var arr = [1,2,,3,,3,,,0,,,4,,4,,5,,6,,,,];\n\narr = $.grep(arr,function(n){ return(n) });\n\narr // [1, 2, 3, 3, 4, 4, 5, 6]\n</code></pre>\n\n<p><br/></p>\n\n<h2>UPDATE - just another fast, cool way (using ES6):</h2>\n\n<pre><code>var arr = [1,2,null, undefined,3,,3,,,0,,,4,,4,,5,,6,,,,], \n    temp = [];\n\nfor(let i of arr)\n    i &amp;&amp; temp.push(i); // copy each non-empty value to the 'temp' array\n\narr = temp;\ndelete temp; // discard the variable\n\narr // [1, 2, 3, 3, 4, 4, 5, 6]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 389
                },
                {
                    "body": "<p>What about that:</p>\n\n<pre><code>js&gt; [1,2,,3,,3,,,0,,,4,,4,,5,,6,,,,].filter(String).join(',')\n1,2,3,3,0,4,4,5,6\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The clean way to do it.</p>\n\n<pre><code>var arr = [0,1,2,\"Thomas\",\"false\",false,true,null,3,4,undefined,5,\"end\"];\narr = arr.filter(Boolean);\n// [1, 2, \"Thomas\", \"false\", true, 3, 4, 5, \"end\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>If you need to remove ALL empty values (\"\", null, undefined and 0): </p>\n\n<pre><code>arr = arr.filter(function(e){return e}); \n</code></pre>\n\n<p>To remove empty values and Line breaks:</p>\n\n<pre><code>arr = arr.filter(function(e){ return e.replace(/(\\r\\n|\\n|\\r)/gm,\"\")});\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>arr = [\"hello\",0,\"\",null,undefined,1,100,\" \"]  \narr.filter(function(e){return e});\n</code></pre>\n\n<p>Return:</p>\n\n<pre><code>[\"hello\", 1, 100, \" \"]\n</code></pre>\n\n<p><strong>UPDATE (based on Alnitak's comment)</strong></p>\n\n<p>In some situations you may want to keep \"0\" in the array and remove anything else (null, undefined and \"\"), this is one way:</p>\n\n<p><code>arr.filter(function(e){ return e === 0 || e });</code> </p>\n\n<p>Return:</p>\n\n<pre><code>[\"hello\", 0, 1, 100, \" \"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 76
                },
                {
                    "body": "<p>If using a library is an option I know underscore.js has a function called compact() <a href=\"http://documentcloud.github.com/underscore/\">http://documentcloud.github.com/underscore/</a> it also has several other useful functions related to arrays and collections.</p>\n\n<p>Here is an excerpt from their documentation:</p>\n\n<blockquote>\n  <p>_.compact(array)  </p>\n  \n  <p>Returns a copy of the array with all falsy values removed. In JavaScript, false, null, 0, \"\", undefined and NaN are all falsy.</p>\n  \n  <p>_.compact([0, 1, false, 2, '', 3]);</p>\n  \n  <p>=> [1, 2, 3]</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I needed to do this same task and came upon this thread. I ended up using the array \"join\" to create a string using a \"_\" separator, then doing a bit of regex to:-</p>\n\n<pre><code>1. replace \"__\" or more with just one \"_\",\n2. replace preceding \"_\" with nothing \"\" and similarly \n3. replace and ending \"_\" with nothing \"\"\n</code></pre>\n\n<p>...then using array \"split\" to make a cleaned-up array:-</p>\n\n<pre><code>var myArr = new Array(\"\",\"\",\"a\",\"b\",\"\",\"c\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"e\",\"\");\nvar myStr = \"\";\n\nmyStr = myArr.join(\"_\");\n\nmyStr = myStr.replace(new RegExp(/__*/g),\"_\");\nmyStr = myStr.replace(new RegExp(/^_/i),\"\");\nmyStr = myStr.replace(new RegExp(/_$/i),\"\");\nmyArr = myStr.split(\"_\");\n\nalert(\"myArr=\" + myArr.join(\",\"));\n</code></pre>\n\n<p>...or in 1 line of code:-</p>\n\n<pre><code>var myArr = new Array(\"\",\"\",\"a\",\"b\",\"\",\"c\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"e\",\"\");\n\nmyArr = myArr.join(\"_\").replace(new RegExp(/__*/g),\"_\").replace(new RegExp(/^_/i),\"\").replace(new RegExp(/_$/i),\"\").split(\"_\");\n\nalert(\"myArr=\" + myArr.join(\",\"));\n</code></pre>\n\n<p>...or, extending the Array object :-</p>\n\n<pre><code>Array.prototype.clean = function() {\n  return this.join(\"_\").replace(new RegExp(/__*/g),\"_\").replace(new RegExp(/^_/i),\"\").replace(new RegExp(/_$/i),\"\").split(\"_\");\n};\n\nvar myArr = new Array(\"\",\"\",\"a\",\"b\",\"\",\"c\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"e\",\"\");\n\nalert(\"myArr=\" + myArr.clean().join(\",\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I'm simply adding my voice to the above \u201ccall ES5's <code>Array..filter()</code> with a global constructor\u201d golf-hack, but I suggest using <code>Object</code> instead of <code>String</code>, <code>Boolean</code>, or <code>Number</code> as suggested above.</p>\n\n<p>Specifically, ES5's <code>filter()</code> already doesn't trigger for <code>undefined</code> elements within the array; so a function that universally returns <code>true</code>, which returns <em>all</em> elements <code>filter()</code> hits, will necessarily only return non-<code>undefined</code> elements:</p>\n\n<pre><code>&gt; [1,,5,6,772,5,24,5,'abc',function(){},1,5,,3].filter(function(){return true})\n[1, 5, 6, 772, 5, 24, 5, 'abc', function (){}, 1, 5, 3]\n</code></pre>\n\n<p>However, writing out <code>...(function(){return true;})</code> is longer than writing <code>...(Object)</code>; and the return-value of the <code>Object</code> constructor will be, under <em>any circumstances</em>, some sort of object. Unlike the primitive-boxing-constructors suggested above, no possible object-value is falsey, and thus in a boolean setting, <code>Object</code> is a short-hand for <code>function(){return true}</code>.</p>\n\n<pre><code>&gt; [1,,5,6,772,5,24,5,'abc',function(){},1,5,,3].filter(Object)\n[1, 5, 6, 772, 5, 24, 5, 'abc', function (){}, 1, 5, 3]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>With Underscore/Lodash:</strong></p>\n\n<p>General use case:</p>\n\n<pre><code>_.without(array, emptyVal, otherEmptyVal);\n_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n</code></pre>\n\n<p>With empties:</p>\n\n<pre><code>_.without(['foo', 'bar', '', 'baz', '', '', 'foobar'], '');\n--&gt; [\"foo\", \"bar\", \"baz\", \"foobar\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Simply one liner:</p>\n\n<pre><code>[1, false, \"\", undefined, 2].filter(Boolean); // [1, 2]\n</code></pre>\n\n<p>or using <a href=\"http://underscorejs.org/#filter\">underscorejs.org</a>:</p>\n\n<pre><code>_.filter([1, false, \"\", undefined, 2], Boolean); // [1, 2]\n// or even:\n_.compact([1, false, \"\", undefined, 2]); // [1, 2]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>Another way to do it is to take advantage of the length property of the array : pack the non-null items on the 'left' of the array, then reduce the length. \nIt is an in-place algorithm -does not allocates memory, too bad for the garbage collector-, and it has very good best/average/worst case behaviour.</p>\n\n<p>This solution, compared to others here, is between 2 to 50 times faster on Chrome, and 5 to 50 times faster on Firefox, as you might see here : <a href=\"http://jsperf.com/remove-null-items-from-array\" rel=\"nofollow\">http://jsperf.com/remove-null-items-from-array</a></p>\n\n<p>The code below adds the non-enumerable 'removeNull' method to the Array, which returns 'this' for daisy-chaining : </p>\n\n<pre><code>var removeNull = function() {\n    var nullCount = 0           ;\n    var length    = this.length ;\n    for (var i=0, len=this.length; i&lt;len; i++) { if (!this[i]) {nullCount++} }\n    // no item is null\n    if (!nullCount) { return this}\n    // all items are null\n    if (nullCount == length) { this.length = 0; return this }\n    // mix of null // non-null\n    var idest=0, isrc=length-1;\n    length -= nullCount ;                \n    while (true) {\n         // find a non null (source) slot on the right\n         while (!this[isrc])  { isrc--; nullCount--; } \n         if    (!nullCount) { break }       // break if found all null\n         // find one null slot on the left (destination)\n         while ( this[idest]) { idest++  }  \n         // perform copy\n         this[idest]=this[isrc];\n         if (!(--nullCount)) {break}\n         idest++;  isrc --; \n    }\n    this.length=length; \n    return this;\n};  \n\nObject.defineProperty(Array.prototype, 'removeNull', \n                { value : removeNull, writable : true, configurable : true } ) ;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Nice ... very nice \nWe can also replace all array values like this</p>\n\n<pre><code>Array.prototype.ReplaceAllValues = function(OldValue,newValue)\n{\n    for( var i = 0; i &lt; this.length; i++ )  \n    {\n        if( this[i] == OldValue )       \n        {\n            this[i] = newValue;\n        }\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>foo = [0, 1, 2, \"\", , , 3, \"four\", null]\n\nfoo.filter(function(e) {\n    if (e === 0) e = '0'\n    return e\n})\n</code></pre>\n\n<p><strong>returns</strong></p>\n\n<pre><code>[0, 1, 2, 3, \"four\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>When using the highest voted answer above, first example, i was getting individual characters for string lengths greater than 1. Below is my solution for that problem.</p>\n\n<pre><code>var stringObject = [\"\", \"some string yay\", \"\", \"\", \"Other string yay\"];\nstringObject = stringObject.filter(function(n){ return n.length &gt; 0});\n</code></pre>\n\n<p>Instead of not returning if undefined, we return if length is greater than 0. Hope that helps somebody out there.</p>\n\n<p><strong>Returns</strong></p>\n\n<pre><code>[\"some string yay\", \"Other string yay\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is another way to do it:</p>\n\n<pre><code>var arr = [\"a\", \"b\", undefined, undefined, \"e\", undefined, \"g\", undefined, \"i\", \"\", \"k\"]\nvar cleanArr = arr.join('.').split(/\\.+/);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Since nobody else mentioned it and most people have underscore included in their project you can also use <code>_.without(array, *values);</code>. </p>\n\n<pre><code>_.without([\"text\", \"string\", null, null, null, \"text\"], null)\n// =&gt; [\"text\", \"string\", \"text\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>How do I remove empty elements from an array in JavaScript? </p>\n\n<p>Is there a straightforward way, or do I need to loop through it and remove them manually?</p>\n",
            "last_activity_date": 1425659233,
            "question_id": 281264,
            "score": 237,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Remove empty elements from an array in Javascript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You may want to take a look at this jQuery plugin. They have lots of examples on their site. <a href=\"http://www.asual.com/jquery/address/\" rel=\"nofollow\">http://www.asual.com/jquery/address/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>if jQuery is available, you could use <a href=\"http://benalman.com/projects/jquery-bbq-plugin/\" rel=\"nofollow\">jQuery BBQ</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For a great tutorial the Mozilla Developer Network page on this functionality is all you'll need: <a href=\"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\">https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history</a></p>\n\n<p>Unfortunately, the HTML5 History API is implemented differently in all the HTML5 browsers (making it inconsistent and buggy) and has no fallback for HTML4 browsers. Fortunately, <a href=\"https://github.com/browserstate/History.js\">History.js</a> provides cross-compatibility for the HTML5 browsers (ensuring all the HTML5 browsers work as expected) and optionally provides a hash-fallback for HTML4 browsers (including maintained support for data, titles, pushState and replaceState functionality).</p>\n\n<p>You can read more about History.js here:\n<a href=\"https://github.com/browserstate/history.js\">https://github.com/browserstate/history.js</a></p>\n\n<p>For an article about Hashbangs VS Hashes VS HTML5 History API, see here:\n<a href=\"https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling\">https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling</a></p>\n",
                    "is_accepted": true,
                    "score": 157
                },
                {
                    "body": "<p>You could try <a href=\"http://github.com/olivernn/davis.js\" rel=\"nofollow\">Davis.js</a>, it gives you routing in your JavaScript using pushState when available and without JavaScript it allows your server side code to handle the requests.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I benefited a lot from 'Dive into HTML 5'. The explanation and demo are easier and to the point.\nHistory chapter - <a href=\"http://diveintohtml5.info/history.html\">http://diveintohtml5.info/history.html</a>\nand history demo - <a href=\"http://diveintohtml5.info/examples/history/fer.html\">http://diveintohtml5.info/examples/history/fer.html</a></p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Here is a great screen-cast on the topic by Ryan Bates of railscasts. At the end he simply disables the ajax functionality if the history.pushState method is not available:</p>\n\n<p><a href=\"http://railscasts.com/episodes/246-ajax-history-state\" rel=\"nofollow\">http://railscasts.com/episodes/246-ajax-history-state</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Keep in mind while using HTML5 pushstate if a user copies or bookmarks a deep link and visits it again, then that will be a direct server hit which will 404 so you need to be ready for it and even a pushstate js library won't help you. The easiest solution is to add a rewrite rule to your Nginx or Apache server like so:</p>\n\n<p>Apache (in your vhost if you're using one):</p>\n\n<pre><code>&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteBase /\n    RewriteRule ^index\\.html$ - [L]\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule . /index.html [L]\n &lt;/IfModule&gt;\n</code></pre>\n\n<p>Nginx</p>\n\n<blockquote>\n<pre><code>rewrite ^(.+)$ /index.html last;\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I've written a very simple router abstraction on top of History.js, called <a href=\"https://github.com/aknuds1/staterouter.js\" rel=\"nofollow\">StateRouter.js</a>. It's in very early stages of development, but I am using it as the routing solution in a single-page application I'm writing. Like you, I found History.js very hard to grasp, especially as I'm quite new to JavaScript, until I understood that you really need (or should have) a routing abstraction on top of it, as it solves a low-level problem.</p>\n\n<p>This simple example code should demonstrate how it's used:</p>\n\n<pre><code>var router = new staterouter.Router();\n// Configure routes\nrouter\n  .route('/', getHome)\n  .route('/persons', getPersons)\n  .route('/persons/:id', getPerson);\n// Perform routing of the current state\nrouter.perform();\n</code></pre>\n\n<p>Here's a little <a href=\"http://jsfiddle.net/K5vzt/36/\" rel=\"nofollow\">fiddle</a> I've concocted in order to demonstrate its usage.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The <a href=\"http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-history-interface\" rel=\"nofollow\">HTML5 history spec</a> is quirky.</p>\n\n<p><code>history.pushState()</code> doesn't dispatch a <code>popstate</code> event or load a new page by itself. It was only meant to push state into history. This is an \"undo\" feature for single page applications. You have to manually dispatch a <code>popstate</code> event or use <code>history.go()</code> to navigate to the new state. The idea is that a router can listen to <code>popstate</code> events and do the navigation for you.</p>\n\n<p>Some things to note:</p>\n\n<ul>\n<li><code>history.pushState()</code> and <code>history.replaceState()</code> don't dispatch <code>popstate</code> events.</li>\n<li><code>history.back()</code>, <code>history.forward()</code>, and the browser's back and forward buttons do dispatch <code>popstate</code> events.</li>\n<li><code>history.go()</code> and <code>history.go(0)</code> do a full page reload and don't dispatch <code>popstate</code> events.</li>\n<li><code>history.go(-1)</code> (back 1 page) and <code>history.go(1)</code> (forward 1 page) do dispatch <code>popstate</code> events.</li>\n</ul>\n\n<p>You can use the history API like this to push a new state AND dispatch a popstate event.</p>\n\n<p><code>\nhistory.pushState({message:'New State!'}, 'New Title', '/link');\nwindow.dispatchEvent(new PopStateEvent('popstate', {\n  bubbles: false,\n  cancelable: false,\n  state: history.state\n}));\n</code></p>\n\n<p>Then listen for <code>popstate</code> events with a router.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am looking into using the HTML5 History API to resolve deep linking problems with AJAX loaded content, but I am struggling to get off the ground. Does any one know of any good resources?</p>\n\n<p>I want to use this as it seems a great way to allow to the possibility of those being sent the links may not have JS turned on. Many solutions fail when someone with JS sends a link to someone without.</p>\n\n<p>My initial research seems to point to a History API within JS, and the pushState method.</p>\n\n<p><a href=\"http://html5demos.com/history\">http://html5demos.com/history</a></p>\n",
            "last_activity_date": 1409519151,
            "question_id": 4015613,
            "score": 147,
            "tags": [
                "javascript",
                "html5",
                "pushstate",
                "html5-history"
            ],
            "title": "Good tutorial for using HTML5 History API (Pushstate?)"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Basically, you're not allowed to request JSON data from another web service via AJAX due to <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">CORS</a>. AJAX allows you to fetch data after a page has already loaded, and then execute some code/call a function once it returns. We can't use AJAX but we are allowed to inject <code>&lt;script&gt;</code> tags into our own page and those are allowed to reference scripts hosted at other domains. </p>\n\n<p>Usually you would use this to include libraries from  a CDN such as <a href=\"https://developers.google.com/speed/libraries/devguide#jquery\">jQuery</a>. However, we can abuse this and use it to fetch data instead! JSON is already valid JavaScript (for the most part), but we can't just return JS in our script file, because we have no way of knowing when the script/data has finished loading and we have no way of accessing it unless it's assigned to a variable or passed to a function. So what we do instead is tell the web service to call a function on our behalf when it's ready.</p>\n\n<p>For example, we might request some data from a stock exchange API, and along with our usual API parameters, we give it a callback, like <code>callThisWhenReady</code>. The web service then wraps the data with our function and returns it like this: <code>callThisWhenReady({...data...})</code>. Now as soon as the script loads, your browser will try to execute it (as normal), which in turns calls our arbitrary function and feeds us the data we wanted.</p>\n\n<p>It works much like a normal AJAX request except instead of calling an anonymous function, we have to use named functions.</p>\n\n<p>jQuery actually supports this seemlessly for you by creating a uniquely named function for you and passing that off, which will then in turn run the code you wanted.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>JSONP is essentially, JSON with extra code, like a function call wrapped around the data. It allows the data to be acted on during parsing.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> allows you to specify a callback function that is passed your JSON object.  This allows you to bypass the same origin policy and load JSON from an external server into the javascript on your webpage.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>JSONP is JSON with padding, that is, you put a string at the beginning and a pair of parenthesis around it. For example:</p>\n\n<pre><code>//JSON\n{\"name\":\"stackoverflow\",\"id\":5}\n//JSONP\nfunc({\"name\":\"stackoverflow\",\"id\":5});\n</code></pre>\n\n<p>The result is that you can load the JSON as a script file. If you previously set up a function called <code>func</code>, then that function will be called with one argument, which is the JSON data, when the script file is done loading. This is usually used to allow for cross-site AJAX with JSON data. If you know that example.com is serving JSON files that look like the JSONP example given above, then you can use code like this to retrieve it, even if you are not on the example.com domain:</p>\n\n<pre><code>function func(json){\n  alert(json.name);\n}\nvar elm = document.createElement(\"script\");\nelm.setAttribute(\"type\", \"text/javascript\");\nelm.src = \"http://example.com/jsonp\";\ndocument.body.appendChild(elm);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 242
                },
                {
                    "body": "<p>\u201cJSONP is JSON with extra code\u201d would be too easy for the real world. No, you gotta have little discrepancies. What\u2019s the fun in programming if everything <em>just works</em>?</p>\n\n<p>Turns out <a href=\"http://timelessrepo.com/json-isnt-a-javascript-subset\">JSON is not a subset of JavaScript</a>. If all you do is take a JSON object and wrap it in a function call, one day you will be bitten by strange syntax errors, like I was today.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>JSONP stands for \u201cJSON with Padding\u201d and it is a workaround for loading data from different domains. It loads the script into the head of the DOM and thus you can access the information as if it were loaded on your own domain, thus by-passing the cross domain issue.</p>\n\n<pre><code>jsonCallback(\n{\n    \"sites\":\n    [\n        {\n            \"siteName\": \"JQUERY4U\",\n            \"domainName\": \"http://www.jquery4u.com\",\n            \"description\": \"#1 jQuery Blog for your Daily News, Plugins, Tuts/Tips &amp;amp; Code Snippets.\"\n        },\n        {\n            \"siteName\": \"BLOGOOLA\",\n            \"domainName\": \"http://www.blogoola.com\",\n            \"description\": \"Expose your blog to millions and increase your audience.\"\n        },\n        {\n            \"siteName\": \"PHPSCRIPTS4U\",\n            \"domainName\": \"http://www.phpscripts4u.com\",\n            \"description\": \"The Blog of Enthusiastic PHP Scripters\"\n        }\n    ]\n}\n</code></pre>\n\n<p>);</p>\n\n<p>(function($) {\nvar url = '<a href=\"http://www.jquery4u.com/scripts/jquery4u-sites.json?callback=\">http://www.jquery4u.com/scripts/jquery4u-sites.json?callback=</a>?';</p>\n\n<p>$.ajax({\n   type: 'GET',\n    url: url,\n    async: false,\n    jsonpCallback: 'jsonCallback',\n    contentType: \"application/json\",\n    dataType: 'jsonp',\n    success: function(json) {\n       console.dir(json.sites);\n    },\n    error: function(e) {\n       console.log(e.message);\n    }\n});</p>\n\n<p>})(jQuery);</p>\n\n<p>Now we can request the JSON via AJAX using JSONP and the callback function we created around the JSON content.\nThe output should be the JSON as an object which we can then use the data for whatever we want without restrictions.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><strong>JSON</strong></p>\n\n<p><strong>JSON (Javascript Object Notation)</strong> is a convenient way to transport data between applications, especially when the destination is a Javascript application.</p>\n\n<p><strong>Example :</strong></p>\n\n<p>Here is a minimal example that uses JSON as the transport for the server response. The client makes an ajax request with the JQuery shorthand function $.getJSON. The server generates a hash, formats it as JSON and returns this to the client. The client formats this and puts it in a page element.</p>\n\n<p><strong>Link :</strong> <a href=\"http://www.codingslover.com/2014/11/what-are-differences-between-json-and-jsonp.html\" rel=\"nofollow\">Difference between json &amp; jsonp</a></p>\n\n<p><strong>Server:</strong></p>\n\n<pre><code>get '/json' do\n content_type :json\n content = { :response  =&gt; 'Sent via JSON',\n            :timestamp =&gt; Time.now,\n            :random    =&gt; rand(10000) }\n content.to_json\nend\n</code></pre>\n\n<p><strong>Client:</strong></p>\n\n<pre><code>var url = host_prefix + '/json';\n$.getJSON(url, function(json){\n  $(\"#json-response\").html(JSON.stringify(json, null, 2));\n});\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<pre><code>  {\n   \"response\": \"Sent via JSON\",\n   \"timestamp\": \"2014-06-18 09:49:01 +0000\",\n   \"random\": 6074\n  }\n</code></pre>\n\n<p><strong>JSONP (JSON with Padding)</strong></p>\n\n<p><strong>JSONP</strong> is a simple way to overcome browser restrictions when sending JSON responses from different domains from the client.\nThe only change on the Client side with JSONP is to add a callback parameter to the URL</p>\n\n<p><strong>Server:</strong></p>\n\n<pre><code>get '/jsonp' do\n callback = params['callback']\n content_type :js\n content = { :response  =&gt; 'Sent via JSONP',\n            :timestamp =&gt; Time.now,\n            :random    =&gt; rand(10000) }\n \"#{callback}(#{content.to_json})\"\nend\n</code></pre>\n\n<p><strong>Client:</strong></p>\n\n<pre><code>var url = host_prefix + '/jsonp?callback=?';\n$.getJSON(url, function(jsonp){\n  $(\"#jsonp-response\").html(JSON.stringify(jsonp, null, 2));\n});\n</code></pre>\n\n<p><strong>Output:</strong> </p>\n\n<pre><code> {\n  \"response\": \"Sent via JSONP\",\n  \"timestamp\": \"2014-06-18 09:50:15 +0000\",\n  \"random\": 364\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>Format wise, file type wise and practical use wise?</p>\n",
            "last_activity_date": 1420523328,
            "question_id": 2887209,
            "score": 189,
            "tags": [
                "json",
                "jsonp",
                "javascript"
            ],
            "title": "What are the differences between JSON and JSONP?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Use the onchange event in HTML/standard JavaScript.</p>\n\n<p>In jQuery that is the <a href=\"http://docs.jquery.com/Events/change\">change()</a> event. For example:</p>\n\n<p><code>$('element').change(function() { // do something } );</code></p>\n\n<p><B>EDIT</B></p>\n\n<p>After reading some comments, what about:</p>\n\n<pre><code>$(function() {\n    var content = $('#myContent').val();\n\n    $('#myContent').keyup(function() { \n        if ($('#myContent').val() != content) {\n            content = $('#myContent').val();\n            alert('Content has been changed');\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>do you consider using <a href=\"http://docs.jquery.com/Events/change\" rel=\"nofollow\">change event</a> ? </p>\n\n<pre><code>$(\"#myTextBox\").change(function() { alert(\"content changed\"); });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<blockquote>\n  <p>Use closures to remember what was the text in the checkbox before the key stroke and check whether this has changed.</p>\n</blockquote>\n\n<p>Yep. You don't have to use closures necessarily, but you will need to remember the old value and compare it to the new.</p>\n\n<p>However! This still won't catch every change, because there a ways of editing textbox content that do not involve any keypress. For example selecting a range of text then right-click-cut. Or dragging it. Or dropping text from another app into the textbox. Or changing a word via the browser's spell-check. Or...</p>\n\n<p>So if you must detect every change, you have to poll for it. You could <code>window.setInterval</code> to check the field against its previous value every (say) second. You could also wire <code>onkeyup</code> to the same function so that changes that <em>are</em> caused by keypresses are reflected quicker.</p>\n\n<p>Cumbersome? Yes. But it's that or just do it the normal HTML onchange way and don't try to instant-update.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>I'd like to ask why you are trying to detect when the content of the textbox changed <strong>in real time</strong>?</p>\n\n<p>An alternative would be to set a timer (via setIntval?) and compare last saved value to the current one and then reset a timer. This would guarantee catching ANY change, whether caused by keys, mouse, some other input device you didn't consider, or even JavaScript changing the value (another possiblity nobody mentioned) from a different part of the app.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I assume that you are looking to do something interactive when the textbox changes (i.e. retrieve some data via ajax).  I was looking for this same functionality.  I know using a global isn't the most robust or elegant solution, but that is what I went with.  Here is an example:</p>\n\n<pre><code>var searchValue = $('#Search').val();\n$(function () {\n    setTimeout(checkSearchChanged, 0.1);\n});\n\nfunction checkSearchChanged() {\n    var currentValue = $('#Search').val();\n    if ((currentValue) &amp;&amp; currentValue != searchValue &amp;&amp; currentValue != '') {\n        searchValue = $('#Search').val();\n        $('#submit').click();\n    }\n    else {\n        setTimeout(checkSearchChanged, 0.1);\n    }\n}\n</code></pre>\n\n<p>One key thing to note here is that I am using setTimeout and not setInterval since I don't want to send multiple requests at the same time.  This ensures that the timer \"stops\" when the form is submitted and \"starts\" when the request is complete.  I do this by calling checkSearchChanged when my ajax call completes.  Obviously you could expand this to check for minimum length, etc.</p>\n\n<p>In my case, I am using ASP.Net MVC so you can see how to tie this in with MVC Ajax as well in the following post:</p>\n\n<p><a href=\"http://geekswithblogs.net/DougLampe/archive/2010/12/21/simple-interactive-search-with-jquery-and-asp.net-mvc.aspx\">http://geekswithblogs.net/DougLampe/archive/2010/12/21/simple-interactive-search-with-jquery-and-asp.net-mvc.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Start observing 'input' event instead of 'change'.</p>\n\n<pre><code>jQuery('#some_text_box').on('input', function() {\n    // do your stuff\n});\n</code></pre>\n\n<p>...which is nice and clean, but may be extended further to:</p>\n\n<pre><code>jQuery('#some_text_box').on('input propertychange paste', function() {\n    // do your stuff\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 305
                },
                {
                    "body": "<p>I would recommend taking a look at jQuery UI autocomplete widget. They handled most of the cases there since their code base is more mature than most ones out there. </p>\n\n<p>Below is a link to a demo page so you can verify it works. <a href=\"http://jqueryui.com/demos/autocomplete/#default\" rel=\"nofollow\">http://jqueryui.com/demos/autocomplete/#default</a></p>\n\n<p>You will get the most benefit from reading the source and seeing how they solved it. You can find it here: <a href=\"https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js\" rel=\"nofollow\">https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.autocomplete.js</a>.</p>\n\n<p>Basically they do it all, they bind to <code>input, keydown, keyup, keypress, focus and blur</code>. Then they have special handling for all sorts of keys like <code>page up, page down, up arrow key and down arrow key</code>. A timer is used before getting the contents of the textbox. When a user types a key that does not correspond to a command (up key, down key and so on) there is a timer that explorers the content after about 300 milliseconds. It looks like this in the code:</p>\n\n<pre><code>// switch statement in the \nswitch( event.keyCode ) {\n            //...\n            case keyCode.ENTER:\n            case keyCode.NUMPAD_ENTER:\n                // when menu is open and has focus\n                if ( this.menu.active ) {\n                    // #6055 - Opera still allows the keypress to occur\n                    // which causes forms to submit\n                    suppressKeyPress = true;\n                    event.preventDefault();\n                    this.menu.select( event );\n                }\n                break;\n            default:\n                suppressKeyPressRepeat = true;\n                // search timeout should be triggered before the input value is changed\n                this._searchTimeout( event );\n                break;\n            }\n// ...\n// ...\n_searchTimeout: function( event ) {\n    clearTimeout( this.searching );\n    this.searching = this._delay(function() { // * essentially a warpper for a setTimeout call *\n        // only search if the value has changed\n        if ( this.term !== this._value() ) { // * _value is a wrapper to get the value *\n            this.selectedItem = null;\n            this.search( null, event );\n        }\n    }, this.options.delay );\n},\n</code></pre>\n\n<p>The reason to use a timer is so that the UI gets a chance to be updated. When Javascript is  running the UI cannot be updated, therefore the call to the delay function. This works well for other situations such as keeping focus on the textbox (used by that code).</p>\n\n<p>So you can either use the widget or copy the code into your own widget if you are not using jQuery UI (or in my case developing a custom widget).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The 'change' event doesn't work correctly, but the 'input' is perfect.</p>\n\n<pre><code>$('#your_textbox').bind('input', function() {\n    /* This will be fired every time, when textbox's value changes. */\n} );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<pre><code>$(document).on('input','#mytxtBox',function () { \n console.log($('#mytxtBox').val());\n});\n</code></pre>\n\n<p>You can use 'input' event to detect the content change in the textbox. Don't use 'live' to bind the event as it is deprecated in Jquery-1.7, So make use of 'on'.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>How about this:</p>\n\n<p>&lt; jQuery 1.7</p>\n\n<pre><code>$(\"#input\").bind(\"propertychange change keyup paste input\", function(){\n    // do stuff;\n});\n</code></pre>\n\n<p>> jQuery 1.7</p>\n\n<pre><code>$(\"#input\").on(\"propertychange change keyup paste input\", function(){\n    // do stuff;\n});\n</code></pre>\n\n<p>This works in IE8/IE9, FF, Chrome</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>A complete working example is: (<a href=\"http://ideone.com/RD5zzZ\" rel=\"nofollow\">http://ideone.com/RD5zzZ</a>)</p>\n\n<pre><code>&lt;html&gt;\n&lt;title&gt;jQuery Summing&lt;/title&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\"&gt; &lt;/script&gt;\n$(document).ready(function() {\n$('.calc').on('input', function() {\nvar t1 = document.getElementById('txt1');\nvar t2 = document.getElementById('txt2');\nvar tot=0;\nif (parseInt(t1.value))\ntot += parseInt(t1.value);\nif (parseInt(t2.value))\ntot += parseInt(t2.value);\ndocument.getElementById('txt3').value = tot;\n});\n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type='text' class='calc' id='txt1'&gt;\n&lt;input type='text' class='calc' id='txt2'&gt;\n&lt;input type='text' id='txt3' readonly&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to detect whenever a textbox's content has changed. I can use the keyup method, but that will also detect keystrokes which do not generate letters, like the arrow keys. I thought of two methods of doing this using the keyup event:</p>\n\n<ol>\n<li>Check explictly if the ascii code of the pressed key is a letter\\backspace\\delete</li>\n<li>Use closures to remember what was the text in the textbox before the key stroke and check whether this has changed.</li>\n</ol>\n\n<p>Both look kinda cumbersome. </p>\n",
            "last_activity_date": 1417348834,
            "question_id": 1481152,
            "score": 186,
            "tags": [
                "javascript",
                "jquery",
                "textbox",
                "keypress"
            ],
            "title": "How to detect a textbox&#39;s content has changed"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>Facebook does it, when you write on people's walls, but only resizes vertically. </p>\n\n<p>Horizontal resize strikes me as being a mess, due to word-wrap, long lines, and so on, but vertical resize seems to be pretty safe and nice</p>\n\n<p>None of the facebook-using-newbies I know have ever mentioned anything about it or been confused. I'd use this as anecdotal evidence to say 'go ahead, implement it'</p>\n\n<p>Some javascript to do it, using prototype.js (because that's what I'm familiar with)</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n  &lt;script language=\"javascript\"&gt;\n  google.load('prototype', '1.6.0.2');\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;textarea id=\"text-area\" rows=\"1\" cols=\"50\"&gt;&lt;/textarea&gt;\n\n  &lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n  resizeIt = function() {\n    var str = $('text-area').value;\n    var cols = $('text-area').cols;\n\n    var linecount = 0;\n    $A(str.split(\"\\n\")).each( function(l) {\n      linecount += Math.ceil( l.length / cols ); // take into account long lines\n    } )\n    $('text-area').rows = linecount + 1;\n  };\n\n  Event.observe('text-area', 'keydown', resizeIt ); // you could attach to keyUp, etc if keydown doesn't work\n  resizeIt(); //initial on load\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>PS: Obviously this javascript is very naive and not well tested, and you probably don't want to use it on textboxes with novels in them, but you get the general idea</p>\n",
                    "is_accepted": true,
                    "score": 58
                },
                {
                    "body": "<p>Here's another technique for autosizing a textarea.</p>\n\n<ul>\n<li>Uses pixel height instead of line height: more accurate handling of line wrap if a proportional font is used.</li>\n<li>Accepts either ID or element as input</li>\n<li>Accepts an optional max height param - useful if you'd rather not let the text area grow beyond a certain size (keep it all on-screen, avoid breaking layout, etc.)</li>\n<li>Tested on Firefox 3 and IE6</li>\n</ul>\n\n<p><strong>Code:</strong> \n(plain vanilla Javascript)</p>\n\n<pre><code>function FitToContent(id, maxHeight)\n{\n   var text = id &amp;&amp; id.style ? id : document.getElementById(id);\n   if ( !text )\n      return;\n\n   /* Accounts for rows being deleted, pixel value may need adjusting */\n   if (text.clientHeight == text.scrollHeight) {\n      text.style.height = \"30px\";\n   }       \n\n   var adjustedHeight = text.clientHeight;\n   if ( !maxHeight || maxHeight &gt; adjustedHeight )\n   {\n      adjustedHeight = Math.max(text.scrollHeight, adjustedHeight);\n      if ( maxHeight )\n         adjustedHeight = Math.min(maxHeight, adjustedHeight);\n      if ( adjustedHeight &gt; text.clientHeight )\n         text.style.height = adjustedHeight + \"px\";\n   }\n}\n</code></pre>\n\n<p><strong>Demo:</strong>\n(uses jQuery, targets on the textarea i'm typing into right now - if you have Firebug installed, paste both samples into the console and test on this page)</p>\n\n<pre><code>$(\"#post-text\").keyup(function() \n{\n  FitToContent(this, document.documentElement.clientHeight)\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Just revisiting this, I've made it a little bit tidier (Though someone who is full bottle on Prototype/Javascript could suggest improvements?).</p>\n\n<pre><code>var TextAreaResize = Class.create();\nTextAreaResize.prototype = {\n  initialize: function( element, options ) {\n    element = $( element );\n    this.element = element;\n\n    this.options = Object.extend(\n      {},\n      options || {} );\n\n    Event.observe( this.element, 'keyup',\n      this.onKeyUp.bindAsEventListener( this ) );\n    this.onKeyUp();\n  },\n\n  onKeyUp: function() {\n    // We need this variable because \"this\" changes in the scope of the\n    // function below.\n    var cols = this.element.cols;\n\n    var linecount = 0;\n    $A( this.element.value.split( \"\\n\" ) ).each( function( l ) {\n      // We take long lines into account via the cols divide.\n      linecount += 1 + Math.floor( l.length / cols );\n    } )\n\n    this.element.rows = linecount;\n  }\n}\n</code></pre>\n\n<p>Just call with:</p>\n\n<pre><code>new TextAreaResize( 'textarea_id_name_here' );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I needed this function for myself, but none of the ones from here worked as i needed them.<br />\nSo I used Orion's code and changed it.<br />\n<br />\nI added in a min height, so that on the destruct it does not get to small.</p>\n\n<pre><code>function resizeIt( id, maxHeight, minHeight ) {\n\tvar text = id &amp;&amp; id.style ? id : document.getElementById(id);\n\tvar str = text.value;\n\tvar cols = text.cols;\n\tvar linecount = 0;\n\tvar arStr = str.split( \"\\n\" );\n\t$( arStr ).each( function( s ) {\n\t\tlinecount = linecount + 1 + Math.floor( arStr[s].length / cols ); // take into account long lines\n\t} );\n\tlinecount++;\n\tlinecount = Math.max(minHeight, linecount);\n\tlinecount = Math.min(maxHeight, linecount);\n\ttext.rows = linecount;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a <strong>Prototype</strong> version of resizing a text area that is not dependent on the number of columns in the textarea. This is a superior technique because it allows you to control the text area via CSS as well as have variable width textarea. Additionally, this version displays the number of characters remaining. While not requested, it's a pretty useful feature and is easily removed if unwanted.</p>\n\n<pre><code>//inspired by: http://github.com/jaz303/jquery-grab-bag/blob/63d7e445b09698272b2923cb081878fd145b5e3d/javascripts/jquery.autogrow-textarea.js\nif (window.Widget == undefined) window.Widget = {}; \n\nWidget.Textarea = Class.create({\n  initialize: function(textarea, options)\n  {\n    this.textarea = $(textarea);\n    this.options = $H({\n      'min_height' : 30,\n      'max_length' : 400\n    }).update(options);\n\n    this.textarea.observe('keyup', this.refresh.bind(this));\n\n    this._shadow = new Element('div').setStyle({\n      lineHeight : this.textarea.getStyle('lineHeight'),\n      fontSize : this.textarea.getStyle('fontSize'),\n      fontFamily : this.textarea.getStyle('fontFamily'),\n      position : 'absolute',\n      top: '-10000px',\n      left: '-10000px',\n      width: this.textarea.getWidth() + 'px'\n    });\n    this.textarea.insert({ after: this._shadow });\n\n    this._remainingCharacters = new Element('p').addClassName('remainingCharacters');\n    this.textarea.insert({after: this._remainingCharacters});  \n    this.refresh();  \n  },\n\n  refresh: function()\n  { \n    this._shadow.update($F(this.textarea).replace(/\\n/g, '&lt;br/&gt;'));\n    this.textarea.setStyle({\n      height: Math.max(parseInt(this._shadow.getHeight()) + parseInt(this.textarea.getStyle('lineHeight').replace('px', '')), this.options.get('min_height')) + 'px'\n    });\n\n    var remaining = this.options.get('max_length') - $F(this.textarea).length;\n    this._remainingCharacters.update(Math.abs(remaining)  + ' characters ' + (remaining &gt; 0 ? 'remaining' : 'over the limit'));\n  }\n});\n</code></pre>\n\n<p>Create the widget by calling <code>new Widget.Textarea('element_id')</code>. The default options can be overridden by passing them as an object, e.g. <code>new Widget.Textarea('element_id', { max_length: 600, min_height: 50})</code>. If you want to create it for all textareas on the page, do something like:</p>\n\n<pre><code>Event.observe(window, 'load', function() {\n\t$$('textarea').each(function(textarea) {\n\t  new Widget.Textarea(textarea);\n\t});\t\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Here is an extension to the Prototype widget that Jeremy posted on June 4th:</p>\n\n<p>It stops the user from entering more characters if you're using limits in textareas. It checks if there are characters left. If the user copies text into the textarea, the text is cut off at the max. length:</p>\n\n<pre><code>/**\n * Prototype Widget: Textarea\n * Automatically resizes a textarea and displays the number of remaining chars\n * \n * From: http://stackoverflow.com/questions/7477/autosizing-textarea\n * Inspired by: http://github.com/jaz303/jquery-grab-bag/blob/63d7e445b09698272b2923cb081878fd145b5e3d/javascripts/jquery.autogrow-textarea.js\n */\nif (window.Widget == undefined) window.Widget = {}; \n\nWidget.Textarea = Class.create({\n  initialize: function(textarea, options){\n    this.textarea = $(textarea);\n    this.options = $H({\n      'min_height' : 30,\n      'max_length' : 400\n    }).update(options);\n\n    this.textarea.observe('keyup', this.refresh.bind(this));\n\n    this._shadow = new Element('div').setStyle({\n      lineHeight : this.textarea.getStyle('lineHeight'),\n      fontSize : this.textarea.getStyle('fontSize'),\n      fontFamily : this.textarea.getStyle('fontFamily'),\n      position : 'absolute',\n      top: '-10000px',\n      left: '-10000px',\n      width: this.textarea.getWidth() + 'px'\n    });\n    this.textarea.insert({ after: this._shadow });\n\n    this._remainingCharacters = new Element('p').addClassName('remainingCharacters');\n    this.textarea.insert({after: this._remainingCharacters});  \n    this.refresh();  \n  },\n\n  refresh: function(){ \n    this._shadow.update($F(this.textarea).replace(/\\n/g, '&lt;br/&gt;'));\n    this.textarea.setStyle({\n      height: Math.max(parseInt(this._shadow.getHeight()) + parseInt(this.textarea.getStyle('lineHeight').replace('px', '')), this.options.get('min_height')) + 'px'\n    });\n\n    // Keep the text/character count inside the limits:\n    if($F(this.textarea).length &gt; this.options.get('max_length')){\n      text = $F(this.textarea).substring(0, this.options.get('max_length'));\n    \tthis.textarea.value = text;\n    \treturn false;\n    }\n\n    var remaining = this.options.get('max_length') - $F(this.textarea).length;\n    this._remainingCharacters.update(Math.abs(remaining)  + ' characters remaining'));\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One refinement to some of these answers is to let CSS do more of the work.</p>\n\n<p>The basic route seems to be: 1) copy the textarea's contents into a hidden div, 2) let the browser do the work of calculating the height of that div, then 3) set the height of the textarea to that height. Step #3 can be omitted, and the amount of code reduced, by letting CSS handle the sizing of the textarea. Placing both the textarea and the hidden div into the same container, and appropriate use of visibility:hidden, lets the height of the hidden div directly drive the height of the textarea.</p>\n\n<pre><code>&lt;!doctype&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n&lt;title&gt;Auto-size TextArea Demo&lt;/title&gt;\n&lt;script type=\"text/javascript\" src=\"jquery.js\"&gt;&lt;/script&gt;\n&lt;style&gt;\n#container {\n    position: relative;\n}\n\n#textArea {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n font-family: Helvetica, Arial, sans-serif;\n    height: 100%;\n    overflow: hidden;\n    position: absolute;\n    width: 100%;\n}\n\n#textCopy {\n    box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    -ms-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n font-family: Helvetica, Arial, sans-serif;\n    padding: 6px;   /* Same border+padding as text area. */\n padding-bottom: 1.15em; /* A bit more than one additional line of text. */ \n    visibility: hidden;\n    width: 100%;\n}\n&lt;/style&gt;\n&lt;script&gt;\n$(function() {\n    $(this.textBox)\n        .change(autoSize)\n        .keydown(autoSize)\n        .keyup(autoSize);\n autoSize();\n});\n\nfunction autoSize() {\n    // Copy textarea contents; browser will calculate correct height of copy,\n    // which will make overall container taller, which will make textarea taller.\n var text = $(\"#textArea\").val().replace(/\\n/g, '&lt;br/&gt;');\n    $(\"#textCopy\").html(text);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div id=\"container\"&gt;\n &lt;textarea id=\"textArea\"&gt;&lt;/textarea&gt;\n &lt;div id=\"textCopy\"/&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>Internet Explorer, Safari, Chrome and Opera users need to remember to explicidly set the line-height value  in css. I do a stylesheet that sets the initial properites for all text boxes as as follows.</p>\n\n<pre><code>&lt;style&gt;\nTEXTAREA { line-height: 14px; font-size: 12px; font-family: arial }\n&lt;/style&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a function I just wrote in jQuery to do it - you can port it to prototype but they dont support the \"liveness\" of jQuery so elements added by Ajax requests will not respond.</p>\n\n<p>This version not only expands but also contracts when delete or backspace is pressed.</p>\n\n<p>This version relies on jquery 1.4.2</p>\n\n<p>Enjoy ;)</p>\n\n<p><a href=\"http://pastebin.com/SUKeBtnx\" rel=\"nofollow\">http://pastebin.com/SUKeBtnx</a></p>\n\n<p>Usage \n$(\"#sometextarea\").textareacontrol();\nor (any jquery selector for example)\n$(\"textarea\").textareacontrol();</p>\n\n<p>Tested on IE7/8, Firefox 3.5, Chrome all works fine.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check the below link:\n<a href=\"http://james.padolsey.com/javascript/jquery-plugin-autoresize/\" rel=\"nofollow\">http://james.padolsey.com/javascript/jquery-plugin-autoresize/</a></p>\n\n<pre><code>$(document).ready(function () {\n    $('.ExpandableTextCSS').autoResize({\n        // On resize:\n        onResize: function () {\n            $(this).css({ opacity: 0.8 });\n        },\n        // After resize:\n        animateCallback: function () {\n            $(this).css({ opacity: 1 });\n        },\n        // Quite slow animation:\n        animateDuration: 300,\n        // More extra space:\n        extraSpace:20,\n        //Textarea height limit\n        limit:10\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here is my solution using jquery</p>\n\n<pre><code>$(document).ready(function() {\n    var $abc = $(\"#abc\");\n    $abc.css(\"height\", $abc.attr(\"scrollHeight\"));\n})\n</code></pre>\n\n<p>abc is a TextArea</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/7477/autosizing-textarea#3409937\">@memical</a> had an awesome solution for setting the height of the textarea on pageload with jQuery, but for my application I wanted to be able to increase the height of the textarea as the user added more content.  I built off memical's solution with the following:</p>\n\n<pre><code>$(document).ready(function() {\n    var $textarea = $(\"p.body textarea\");\n    $textarea.css(\"height\", ($textarea.attr(\"scrollHeight\") + 20));\n    $textarea.keyup(function(){\n        var current_height = $textarea.css(\"height\").replace(\"px\", \"\")*1;\n        if (current_height + 5 &lt;= $textarea.attr(\"scrollHeight\")) {\n            $textarea.css(\"height\", ($textarea.attr(\"scrollHeight\") + 20));\n        }\n    });\n});\n</code></pre>\n\n<p>It's not very smooth but it's also not a client-facing application, so smoothness doesn't really matter.  (Had this been client-facing, I probably would have just used an auto-resize jQuery plugin.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Like the answer of @memical.</p>\n\n<p>However I found some improvements. You can use jquery height() function. But be aware of padding-top and padding-bottom pixels. Otherwise your textare will grow to fast.</p>\n\n<pre><code>$(document).ready(function() {\n  $textarea = $(\"#my-textarea\");\n  //there is some diff between scrollheight and height:\n  //padding-top and padding-bottom\n  var diff = $textarea.prop(\"scrollHeight\") - $textarea.height();\n  $textarea.live(\"keyup\", function() {\n    var height = $textarea.prop(\"scrollHeight\") - diff;\n    $textarea.height(height);\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've made somthing quite easy.\nFirts I put the TextArea into a DIV\nSecond, Ive called on Ready Function to this script</p>\n\n<pre><code>&lt;div id=\"divTable\"&gt;\n  &lt;textarea ID=\"txt\" Rows=\"1\" TextMode=\"MultiLine\" /&gt;\n&lt;/div&gt;\n\n$(document).ready(function () {\n  var heightTextArea = $('#txt').height();\n  var divTable = document.getElementById('divTable');\n  $('#txt').attr('rows', parseInt(parseInt(divTable .style.height) / parseInt(altoFila)));\n});\n</code></pre>\n\n<p>Simple. Is the Max Height of the div once is render, divided the height of one TextArea of one row.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This works somewhat in chrome (perhaps someone with more brains could modify it for other browsers):</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;textarea class='autosize' placeholder=\"Start Typing\u2026\"&gt;&lt;/textarea&gt;\n</code></pre>\n\n<p><br>\n<strong>CSS:</strong></p>\n\n<pre><code>.autosize {\n    overflow: hidden;\n    resize: none;\n    height: 32px;\n    padding: 8px;\n}\n</code></pre>\n\n<p><br>\n<strong>JS:</strong></p>\n\n<pre><code>autosize(document.querySelector('textarea.autosize'));\n\nfunction autosize(el) {\n    el.oninput = function() {\n        console.log(this.scrollHeight);\n        this.style.height = this.scrollHeight + 'px';\n    };\n}\n</code></pre>\n\n<p><a href=\"http://jsbin.com/opalow/3/edit\" rel=\"nofollow\">Demo</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Using ASP.Net just simply do this:</strong></p>\n\n<pre><code>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;title&gt;Automatic Resize TextBox&lt;/title&gt;\n&lt;script type=\"text/javascript\"&gt;\nfunction setHeight(txtarea) {\n    txtarea.style.height = txtdesc.scrollHeight + \"px\";\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form id=\"form1\" runat=\"server\"&gt;\n&lt;asp:TextBox ID=\"txtarea\" runat= \"server\" TextMode=\"MultiLine\"  onkeyup=\"setHeight(this);\" onkeydown=\"setHeight(this);\" /&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>my solution not using jquery (because sometimes they dont have to be the same thing). tho only tested in IE7, so the community can point out all the reasons this is wrong:</p>\n\n<pre><code>textarea.onkeyup = function () { this.style.height = this.scrollHeight + 'px'; }\n</code></pre>\n\n<p>so far i really like how it's working, and i dont care about other browsers, so i'll probably apply it to all my textareas:</p>\n\n<pre><code>            // make all textareas auto-resize vertically\n            var textareas = document.getElementsByTagName('textarea');\n            for (i = 0; i&lt;textareas.length; i++)\n            {\n                textareas[i].minHeight = textareas[i].offsetHeight; // retain textarea's starting height as its minimum height\n                textareas[i].onkeyup = function () { this.style.height = Math.max(this.scrollHeight, this.minHeight) + 'px'; }\n                textareas[i].onkeyup(); // trigger once to set initial height\n            }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>OK, I know I'm late to the party, but I'll provide probably the shortest solution:</p>\n\n<pre><code>jQuery(document).ready(function(){\n    jQuery(\"#textArea\").on(\"keydown keyup\", function(){\n        this.style.height = \"1px\";\n        this.style.height = (this.scrollHeight) + \"px\"; \n    });\n});\n</code></pre>\n\n<p>This way you don't need any hidden divs or anything like that.</p>\n\n<p>Note: you might have to play with <code>this.style.height = (this.scrollHeight) + \"px\";</code> depending on how you style the textarea (line-height, padding and that kind of stuff).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For those that are coding for IE and encounter this problem. IE has a little trick that makes it 100% CSS.</p>\n\n<pre><code>&lt;TEXTAREA style=\"overflow: visible;\" cols=\"100\" ....&gt;&lt;/TEXTAREA&gt;\n</code></pre>\n\n<p>You can even provide a value for rows=\"n\" which IE will ignore, but other browsers will use. I really hate coding that implements IE hacks, but this one is very helpful. It is possible that it only works in Quirks mode.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm currently working on an internal sales application for the company I work for, and I've got a form that allows the user to change the delivery address.</p>\n\n<p>Now I think it would look much nicer, if the textarea I'm using for the main address details would just take up the area of the text in it, and automatically resize if the text was changed.</p>\n\n<p>Here's a screenshot of it currently.</p>\n\n<p><img src=\"http://i.stack.imgur.com/XK48E.png\" alt=\"ISO Address\"></p>\n\n<p>Any ideas?</p>\n\n<hr>\n\n<p>@Chris</p>\n\n<p>A good point, but there are reasons I want it to resize, I want the area it takes up to be the area of the information contained in it.  As you can see in the screen shot, if I have a fixed textarea, it takes up a fair wack of vertical space.</p>\n\n<p>I can reduce the font, but I need address to be large and readable.  Now I can reduce the size of the text area, but then I have problems with people who have an address line that takes 3 or 4 (one takes 5) lines.  Needing to have the user use a scrollbar is a major no-no.</p>\n\n<p>I guess I should be a bit more specific, I'm after vertical resizing, the width doesn't matter as much.  The only problem that happens with that, is the ISO number (the large \"1\") gets pushed under the address when the window width is too small (as you can see on the screenshot).</p>\n\n<p>It's not about having a gimick, it's about having a text field the user can edit that won't take up unnecessary space, but will show all the text in it.</p>\n\n<p>Though if someone comes up with another way to approach the problem I'm open to that too.</p>\n\n<hr>\n\n<p>@Orion</p>\n\n<p>Thanks!</p>\n\n<p>I've modified the code a little because it was acting a little odd, I changed it to activate on keyup, because it wouldn't take into consideration the character that was just typed.</p>\n\n<pre><code>resizeIt = function( ) {\n  var str = $( 'iso_address' ).value;\n  var cols = $( 'iso_address' ).cols;\n  var linecount = 0;\n  $A( str.split( \"\\n\" ) ).each( function( l ) {\n    linecount += 1 + Math.floor( l.length / cols ); // take into account long lines\n  } )\n  $( 'iso_address' ).rows = linecount;\n};\n</code></pre>\n",
            "last_activity_date": 1409310023,
            "question_id": 7477,
            "score": 92,
            "tags": [
                "javascript",
                "html",
                "css",
                "prototypejs"
            ],
            "title": "Autosizing textarea using prototype"
        },
        {
            "answer_count": 27,
            "answers": [
                {
                    "body": "<p>this can be very easily found on google.</p>\n\n<pre><code>function random_color(format)\n{\n var rint = Math.round(0xffffff * Math.random());\n switch(format)\n {\n  case 'hex':\n   return ('#0' + rint.toString(16)).replace(/^#0([0-9a-f]{6})$/i, '#$1');\n  break;\n\n  case 'rgb':\n   return 'rgb(' + (rint &gt;&gt; 16) + ',' + (rint &gt;&gt; 8 &amp; 255) + ',' + (rint &amp; 255) + ')';\n  break;\n\n  default:\n   return rint;\n  break;\n }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Use <code>getRandomColor()</code> in place of <code>\"#0000FF\"</code>:</p>\n\n<pre><code>function getRandomColor() {\n    var letters = '0123456789ABCDEF'.split('');\n    var color = '#';\n    for (var i = 0; i &lt; 6; i++ ) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 275
                },
                {
                    "body": "<p>Here's a twist on solution provided by @Anatoliy\nI needed to generate only light colours (for backgrounds) so I went with 3 letter (#AAA) format.</p>\n\n<pre><code>function get_random_color() {\n    var letters = 'ABCDE'.split('');\n    var color = '#';\n    for (var i=0; i&lt;3; i++ ) {\n        color += letters[Math.floor(Math.random() * letters.length)];\n    }\n    return color;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>No need for a hash of hexadecimal letters, Javascript can do this by itself:</p>\n\n<pre><code>function get_random_color() {\n  function c() {\n    return Math.floor(Math.random()*256).toString(16)\n  }\n  return \"#\"+c()+c()+c();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>So whilst all the answers here are good I wanted a bit more control over the output. For instance I'd like to prevent any near white shades, whilst ensuring I get bright vibrant colours not washed out shades.</p>\n\n<pre><code>function generateColor(ranges) {\n            if (!ranges) {\n                ranges = [\n                    [150,256],\n                    [0, 190],\n                    [0, 30]\n                ];\n            }\n            var g = function() {\n                //select random range and remove\n                var range = ranges.splice(Math.floor(Math.random()*ranges.length), 1)[0];\n                //pick a random number from within the range\n                return Math.floor(Math.random() * (range[1] - range[0])) + range[0];\n            }\n            return \"rgb(\" + g() + \",\" + g() + \",\" + g() +\")\";\n        };\n</code></pre>\n\n<p>So now I can specify 3 arbitrary ranges to pick rgb values from. You can call it with no arguments and get my default set which will usually generate a quite vibrant colour with once obvious dominant shade, or you can supply your own array of ranges.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here are my two versions for a random hex code generator.</p>\n\n<pre>\n<code>\n/* Slowest but shortest. */\n\"#000000\".replace(/0/g,function(){return (~~(Math.random()*16)).toString(16);});    \n\n/* Good performance with small size. */\n\"#\"+(function(a,b){while(a--){b+=\"\"+(~~(Math.random()*16)).toString(16);} return b;})(6,\"\");\n\n/* Remy Sharp provided one that's the fastest but a little bit too long */\n(function(h){return '#000000'.substr(0,7-h.length)+h})((~~(Math.random()*(1&lt;&lt;24))).toString(16))\n</code>\n</pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I doubt anything will be faster or shorter than this one:</p>\n\n<pre><code>\"#\"+((1&lt;&lt;24)*Math.random()|0).toString(16)\n</code></pre>\n\n<p>Challenge!</p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>Yet another random color generator:</p>\n\n<pre><code>var randomColor;\nrandomColor = Math.random() * 0x1000000; // 0 &lt; randomColor &lt; 0x1000000 (randomColor is a float)\nrandomColor = Math.floor(randomColor); // 0 &lt; randomColor &lt;= 0xFFFFFF (randomColor is an integer)\nrandomColor = randomColor.toString(16); // hex representation randomColor\nrandomColor = (\"000000\" + randomColor).slice(-6); // leading zeros added\nrandomColor = \"#\" + randomColor; // # added\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Random color generation with brightness control :</p>\n\n<pre><code>function getRandColor(brightness){\n    //6 levels of brightness from 0 to 5, 0 being the darkest\n    var rgb = [Math.random() * 256, Math.random() * 256, Math.random() * 256];\n    var mix = [brightness*51, brightness*51, brightness*51]; //51 =&gt; 255/5\n    var mixedrgb = [rgb[0] + mix[0], rgb[1] + mix[1], rgb[2] + mix[2]].map(function(x){ return Math.round(x/2.0)})\n    return \"rgb(\" + mixedrgb.join(\",\") + \")\";\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is another take on this problem.</p>\n\n<p>My goal was to create vibrant and distinct colors. To ensure the colors are distinct I avoid using a random generator and select \"evenly spaced\" colors from the rainbow.</p>\n\n<p>This is perfect for creating pop-out markers in Google Maps that have optimal \"uniqueness\" (that is, no two markers will have similar colors).</p>\n\n<pre><code>function rainbow(numOfSteps, step) {\n    // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n    // Adam Cole, 2011-Sept-14\n    // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    var r, g, b;\n    var h = step / numOfSteps;\n    var i = ~~(h * 6);\n    var f = h * 6 - i;\n    var q = 1 - f;\n    switch(i % 6){\n        case 0: r = 1, g = f, b = 0; break;\n        case 1: r = q, g = 1, b = 0; break;\n        case 2: r = 0, g = 1, b = f; break;\n        case 3: r = 0, g = q, b = 1; break;\n        case 4: r = f, g = 0, b = 1; break;\n        case 5: r = 1, g = 0, b = q; break;\n    }\n    var c = \"#\" + (\"00\" + (~ ~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~ ~(b * 255)).toString(16)).slice(-2);\n    return (c);\n}\n</code></pre>\n\n<p>If you wish to see what this looks like in action see <a href=\"http://blog.adamcole.ca/2011/11/simple-javascript-rainbow-color.html\">http://blog.adamcole.ca/2011/11/simple-javascript-rainbow-color.html</a>.</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Who can beat it? </p>\n\n<pre><code>'#'+Math.random().toString(16).substr(-6);\n</code></pre>\n\n<p>Guaranteed to work all the time: <a href=\"http://jsbin.com/OjELIfo/2/edit\">http://jsbin.com/OjELIfo/2/edit</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Almost all of the above short hand methods are generating invalid hex codes (5 digit). I came across a similar technique only without that issue <a href=\"http://www.develobert.info/2008/06/random-color-generation-with-javascript.html?showComment=1311155933253#c5730577982486962614\" rel=\"nofollow\">here</a></p>\n\n<p><code>\"#\"+(\"000\"+(Math.random()*(1&lt;&lt;24)|0).toString(16)).substr(-6)</code></p>\n\n<p><em><strong>Test:</em></strong> <em>try this in the console</em></p>\n\n<pre><code>for(i = 0; i &lt; 200; i++) {\n    console.log(\"#\"+(\"000\"+(Math.random()*(1&lt;&lt;24)|0).toString(16)).substr(-6));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Short answer with pad to exact size</p>\n\n<p><code>'#'+((1&lt;&lt;24)*(Math.random()+1)|0).toString(16).substr(1)</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I like this one: <code>'#' + Math.random().toString(16).substring(2, 8)</code></p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>And I couldn't resist not to post my own version</p>\n\n<pre><code>function RND() {\n  var hex = ((Math.floor(Math.random()*0xffffff)+1)).toString(16);\n  while (hex.length &lt; 6) hex = \"0\" + hex;\n  return hex;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There are so many ways you can accomplish this. Here's two I did:</p>\n\n<p><strong>Generates six random hex digits (0-F)</strong></p>\n\n<pre><code>function randColor() {\n    for (var i=0, col=''; i&lt;6; i++) {\n        col += (Math.random()*16|0).toString(16);\n    }\n    return '#'+col;\n}\n</code></pre>\n\n<p><strong>Generates individual RGB components (00-FF)</strong></p>\n\n<pre><code>function randColor2() {\n    var r = ('0'+(Math.random()*256|0).toString(16)).slice(-2),\n        g = ('0'+(Math.random()*256|0).toString(16)).slice(-2),\n        b = ('0'+(Math.random()*256|0).toString(16)).slice(-2);\n    return '#' +r+g+b;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var color = \"#\";\nfor (k = 0; k &lt; 3; k++) {\n    color += (\"0\" + (Math.random()*256|0).toString(16)).substr(-2);\n}\n</code></pre>\n\n<p>A breakdown of how this works:</p>\n\n<p><code>Math.random()*256</code> gets a random (floating point) number from 0 to 256 (0 to 255 inclusive)<br />\nExample result: 116.15200161933899</p>\n\n<p>Adding the <code>|0</code> strips off everything after the decimal point.<br />\nEx: 116.15200161933899 -> 116</p>\n\n<p>Using <code>.toString(16)</code> converts this number to hexadecimal (base 16).<br />\nEx: 116 -> 74<br />\nAnother ex: 228 -> e4</p>\n\n<p>Adding <code>\"0\"</code> pads it with a zero. This will be important when we get the substring, since our final result must have two characters for each color.<br />\nEx: 74 -> 074<br />\nAnother ex: 8 -> 08</p>\n\n<p><code>.substr(-2)</code> gets just the last two characters.<br />\nEx: 074 -> 74<br />\nAnother ex: 08 -> 08 (if we hadn't added the <code>\"0\"</code>, this would have produced \"8\" instead of \"08\")</p>\n\n<p>The <code>for</code> loop runs this loop three times, adding each result to the color string, producing something like this:<br />\n<code>#7408e4</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think the first response is the most succinct/useful, but I just wrote one that would probably be easier for a beginner to understand.</p>\n\n<pre><code>function randomHexColor(){\n    var hexColor=[]; //new Array()\n    hexColor[0] = \"#\"; //first value of array needs to be hash tag for hex color val, could also prepend this later\n\n    for (i = 1; i &lt; 7; i++)\n    {\n        var x = Math.floor((Math.random()*16)); //Tricky: Hex has 16 numbers, but 0 is one of them\n\n        if (x &gt;=10 &amp;&amp; x &lt;= 15) //hex:0123456789ABCDEF, this takes care of last 6 \n        {\n            switch(x)\n            {\n                case 10: x=\"a\" \n                break;\n                case 11: x=\"b\" \n                break;\n                case 12: x=\"c\" \n                break;\n                case 13: x=\"d\" \n                break;\n                case 14: x=\"e\" \n                break;\n                case 15: x=\"f\" \n                break;  \n            }\n        }\n        hexColor[i] = x;\n    }\n    var cString = hexColor.join(\"\"); //this argument for join method ensures there will be no separation with a comma\n    return cString;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>Array.prototype.reduce</code> makes it very clean.</p>\n\n<pre><code>[\"r\",\"g\",\"b\"].reduce(function(res) {\n    return res + (\"0\"+~~(Math.random()*256).toString(16)).slice(-2)\n}, \"#\")\n</code></pre>\n\n<hr>\n\n<p>Needs a shim for old browsers.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're a noob like me, clueless about hexadecimals and such, this might be more intuitive.</p>\n\n<pre><code>function r() { return Math.random() * 255; }\n\nvar color = 'rgb(' + r() + \",\" + r() + \",\" + r() + ')';\n</code></pre>\n\n<p>You just need to end up with a string such as <code>'rgb(255, 123, 220)'</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function get_random_color() {\n    return \"#\" + (Math.round(Math.random() * 0XFFFFFF)).toString(16);\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/XmqDz/1/\" rel=\"nofollow\">http://jsfiddle.net/XmqDz/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>\"#\"+Math.random().toString(16).slice(-3) // three-numbers format e.g. #f3c\n\"#\"+Math.random().toString(16).slice(-6) // six-number format aka #abc123\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Just because I can, I created an unreadable snippet that randomizes between min and max hex codes....</p>\n\n<pre><code>function a(f, s){\n    if(!s || !s.length &gt; 1) return \"\";\n    var c = Math.floor(Math.random()*(parseInt(\"0x\" + s.substr(0,2))-parseInt(\"0x\" +     f.substr(0,2))+1)+parseInt(\"0x\" + f.substr(0,2))).toString(16);\n    return  (Array(3 - c.length).join(\"0\")) + c + a(f.substr(2,f.length),s.substr(2,s.length));\n}\n</code></pre>\n\n<p><code>a(\"990099\",\"ff00ff\")</code>  > might randomize > <code>b5009e</code></p>\n\n<p>It does it in pairs, so\n<code>a(\"12\",\"f2\")</code>  > might randomize > <code>8f</code>\nBut it wont go above <code>'f2'</code></p>\n\n<p><code>var color = \"#\" + a(\"11\",\"22\") + a(\"33\",\"44\") + a(\"55\",\"66\");</code></p>\n\n<p>Is the same as</p>\n\n<p><code>var color = \"#\" + a(\"113355\",\"224466\")</code>\nBut slower</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can Try this, its absolutely random and comfortable color generator ))</p>\n\n<pre><code>var Color = '#';\nvar myElement;\nfor (var i = 0; i &lt; 6; i++) {\n    function Random1(from, to) {\n      return Math.floor((Math.random() * (70 - 65 + 1)) + 65);\n}\n    function Random2(from, to) {\n      return Math.floor((Math.random() * (1 - 0 + 1)) + 0);\n}\n    function Random3(from, to) {\n      return Math.floor((Math.random() * (9 - 0 + 1)) + 0);\n}\nif (Random2()) {\n     myElement = Random3();\n} \nelse {\n     myElement = String.fromCharCode(Random1());\n}\nColor += myElement;\n}\n</code></pre>\n\n<p>hope helps ;))</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use <a href=\"https://github.com/alexishacks/colorchain.js\" rel=\"nofollow\">colorchain.js</a> to generate a sequence of colors with varying hues.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is old question but I couldn't resist sharing the article written by <a href=\"http://www.paulirish.com/\" rel=\"nofollow\">Paul Irish</a> on Random Hex Color Code Generator in JavaScript. It is absolutely amazing. Here is the source link : <a href=\"http://www.paulirish.com/2009/random-hex-color-code-snippets/\" rel=\"nofollow\">http://www.paulirish.com/2009/random-hex-color-code-snippets/</a> </p>\n\n<pre><code>'#'+Math.floor(Math.random()*16777215).toString(16);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can aslo use HSL available on every good browser (<a href=\"http://caniuse.com/#feat=css3-colors\" rel=\"nofollow\">http://caniuse.com/#feat=css3-colors</a>)</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function randomHsl() {\n    return 'hsla(' + (Math.random() * 360) + ', 100%, 50%, 1)';\n}\n</code></pre>\n\n<p>This will give you only bright colors, you can also play around with the brightness, saturation and alpha.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am not a Javascript expert and I need a little help.</p>\n\n<p>Given this function, I want to replace the <strong>color</strong> with a Random Color generator.</p>\n\n<pre><code>document.overlay = GPolyline.fromEncoded({color: \"#0000FF\",\n                                          weight: 10,\n                                          points: encoded_points,\n                                          zoomFactor: 32,\n                                          levels: encoded_levels,\n                                          numLevels: 4\n                                         });\n</code></pre>\n\n<p>Can anyone help me ?</p>\n",
            "last_activity_date": 1421618337,
            "question_id": 1484506,
            "score": 94,
            "tags": [
                "javascript",
                "random",
                "colors"
            ],
            "title": "Random Color generator in Javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>As I outline in <a href=\"http://stackoverflow.com/questions/4547166/bandwidth-utility-using-javascript/4547184#4547184\">this other answer here on StackOverflow</a>, you can do this by timing the download of files of various sizes (start small, ramp up if the connection seems to allow it), ensuring through cache headers and such that the file is really being read from the remote server and not being retrieved from cache. This doesn't necessarily require that you have a server of your own (the files could be coming from <a href=\"http://aws.amazon.com/s3/\">S3</a> or similar), but you will need somewhere to get the files from in order to test connection speed.</p>\n\n<p>That said, point-in-time bandwidth tests are notoriously unreliable, being as they are impacted by other items being downloaded in other windows, the speed of your server, links en route, etc., etc. But you can get a rough idea using this sort of technique.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>It's possible to some extent but won't be really accurate, the idea is load image with a known file size then in its <code>onload</code> event measure how much time passed until that event was triggered, and divide this time in the image file size.</p>\n\n<p>Example can be found here: <a href=\"http://stackoverflow.com/questions/4583395/calculate-speed-using-javascript\">Calculate speed using javascript</a></p>\n\n<p>Test case applying the fix suggested there:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//JUST AN EXAMPLE, PLEASE USE YOUR OWN PICTURE!\r\nvar imageAddr = \"http://www.kenrockwell.com/contax/images/g2/examples/31120037-5mb.jpg\"; \r\nvar downloadSize = 4995374; //bytes\r\n\r\nwindow.onload = function() {\r\n    var oProgress = document.getElementById(\"progress\");\r\n    oProgress.innerHTML = \"Loading the image, please wait...\";\r\n    window.setTimeout(MeasureConnectionSpeed, 1);\r\n};\r\n\r\nfunction MeasureConnectionSpeed() {\r\n    var oProgress = document.getElementById(\"progress\");\r\n    var startTime, endTime;\r\n    var download = new Image();\r\n    download.onload = function () {\r\n        endTime = (new Date()).getTime();\r\n        showResults();\r\n    }\r\n    \r\n    download.onerror = function (err, msg) {\r\n        oProgress.innerHTML = \"Invalid image, or error downloading\";\r\n    }\r\n    \r\n    startTime = (new Date()).getTime();\r\n    var cacheBuster = \"?nnn=\" + startTime;\r\n    download.src = imageAddr + cacheBuster;\r\n    \r\n    function showResults() {\r\n        var duration = (endTime - startTime) / 1000;\r\n        var bitsLoaded = downloadSize * 8;\r\n        var speedBps = (bitsLoaded / duration).toFixed(2);\r\n        var speedKbps = (speedBps / 1024).toFixed(2);\r\n        var speedMbps = (speedKbps / 1024).toFixed(2);\r\n        oProgress.innerHTML = \"Your connection speed is: &lt;br /&gt;\" + \r\n           speedBps + \" bps&lt;br /&gt;\"   + \r\n           speedKbps + \" kbps&lt;br /&gt;\" + \r\n           speedMbps + \" Mbps&lt;br /&gt;\";\r\n    }\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;h1 id=\"progress\"&gt;JavaScript is turned off, or your browser is realllllly slow&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Quick comparison with <a href=\"http://www.speedtest.net/\" rel=\"nofollow\">\"real\" speed test service</a> showed small difference of 0.12 Mbps when using big picture.</p>\n\n<p>To ensure the integrity of the test, you can run the code with Chrome dev tool throttling enabled and then see if the result matches the limitation. <em>(credit goes to <a href=\"http://stackoverflow.com/questions/5529718/how-to-detect-internet-speed-in-javascript/5529841?noredirect=1#comment43005081_5529841\">user284130</a> :))</em></p>\n\n<p>Important things to keep in mind:</p>\n\n<ol>\n<li><p>The image being used should be properly optimized and compressed. If it isn't, then default compression on connections by the web server might show speed bigger than it actually is. Another option is using uncompressible file format, e.g. jpg. <em><sub>(thanks Rauli Rajande for <a href=\"http://stackoverflow.com/questions/5529718/how-to-detect-internet-speed-in-javascript/5529841?noredirect=1#comment40782354_5529841\">pointing this out</a> and Fluxine for <a href=\"http://stackoverflow.com/questions/5529718/how-to-detect-internet-speed-in-javascript/5529841?noredirect=1#comment45076565_5529841\">reminding me</a></sub>)</em></p></li>\n<li><p>The cache buster mechanism described above might not work with some CDN servers, which can be configured to ignore query string parameters, hence better setting cache control headers on the image itself. <em><sub>(thanks orcaman for <a href=\"http://stackoverflow.com/questions/5529718/how-to-detect-internet-speed-in-javascript/5529841?noredirect=1#comment45317811_5529841\">pointing this out</a>)</sub>)</em></p></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>you can use boomerang.js by yahoo. here is link to use cases for it</p>\n\n<p><a href=\"http://lognormal.github.io/boomerang/doc/use-cases.html\" rel=\"nofollow\">http://lognormal.github.io/boomerang/doc/use-cases.html</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can determine latency. Try using the following script to measure the time it takes to fully load a page:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\n\nvar start = new Date().getTime();\nfunction onLoad() {\n  var now = new Date().getTime();\n  var latency = now - start;\n  alert(\"page loading time: \" + latency);\n }\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"onLoad()\"&gt;\n&lt;!- Main page body goes from here. --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>See 3WC page on Navigation Timing: <br />\n<a href=\"https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html\" rel=\"nofollow\">https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I needed a quick way to determine if the user connection speed was fast enough to enable/disable some features in a site I\u2019m working on, I made this little script that averages the time it takes to download a single (small) image a number of times, it's working pretty accurately in my tests, being able to clearly distinguish between 3G or Wi-Fi for example, maybe someone can make a more elegant version or even a jQuery plugin.</p>\n\n<pre><code>var arrTimes = [];\nvar i = 0; // start\nvar timesToTest = 5;\nvar tThreshold = 150; //ms\nvar testImage = \"http://www.google.com/images/phd/px.gif\"; // small image in your server\nvar dummyImage = new Image();\nvar isConnectedFast = false;\n\ntestLatency(function(avg){\n    isConnectedFast = (avg &lt;= tThreshold);\n    /** output */\n    document.body.appendChild(\n        document.createTextNode(\"Time: \" + (avg.toFixed(2)) + \"ms - isConnectedFast? \" + isConnectedFast)\n    );\n});\n\n/** test and average time took to download image from server, called recursively timesToTest times */\nfunction testLatency(cb) {\n    var tStart = new Date().getTime();\n    if (i&lt;timesToTest-1) {\n        dummyImage.src = testImage + '?t=' + tStart;\n        dummyImage.onload = function() {\n            var tEnd = new Date().getTime();\n            var tTimeTook = tEnd-tStart;\n            arrTimes[i] = tTimeTook;\n            testLatency(cb);\n            i++;\n        };\n    } else {\n        /** calculate average of array items then callback */\n        var sum = arrTimes.reduce(function(a, b) { return a + b; });\n        var avg = sum / arrTimes.length;\n        cb(avg);\n    }\n}   \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I create a Javascript page that will detect the user's internet speed and show it on the page? Something like your internet speed is ??/?? Kb/s.</p>\n",
            "last_activity_date": 1423832590,
            "question_id": 5529718,
            "score": 53,
            "tags": [
                "javascript"
            ],
            "title": "How to detect internet speed in Javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Code example is given <a href=\"http://www.onicos.com/staff/iz/amuse/javascript/expert/zip.html\" rel=\"nofollow\">on the author site's</a>. You can use <a href=\"http://babelfish.yahoo.com/translate_txt\" rel=\"nofollow\">babelfish</a> to translate the texts (Japanese to English).</p>\n\n<p>As far as I understand Japanese, this zip inflate code is meant to decode ZIP data (streams) not ZIP archive.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I wrote an unzipper in Javascript.  It works.  </p>\n\n<p>It relies on <a href=\"http://nagoon97.com/reading-binary-files-using-ajax/\" rel=\"nofollow\">Andy G.P. Na's binary file reader</a> and <a href=\"http://www.codeproject.com/KB/scripting/Javascript_binaryenc.aspx\" rel=\"nofollow\">some RFC1951 inflate logic from notmasteryet</a>.  I added the ZipFile class.  </p>\n\n<p>working example:<br>\n<a href=\"http://cheeso.members.winisp.net/Unzip-Example.htm\" rel=\"nofollow\">http://cheeso.members.winisp.net/Unzip-Example.htm</a> (dead link)</p>\n\n<p>The source:<br>\n<a href=\"http://cheeso.members.winisp.net/srcview.aspx?dir=js-unzip\" rel=\"nofollow\">http://cheeso.members.winisp.net/srcview.aspx?dir=js-unzip</a> (dead link)</p>\n\n<p><strong>NB</strong>: the links are dead; I'll find a new host soon. </p>\n\n<p>Included in the source is a ZipFile.htm demonstration page, and 3 distinct scripts, one for the zipfile class, one for the inflate class, and one for a binary file reader class. The demo also depends on jQuery and jQuery UI.  If you just download the js-zip.zip file, all of the necessary source is there.  </p>\n\n<hr>\n\n<p>Here's what the application code looks like in Javascript:</p>\n\n<pre><code>// In my demo, this gets attached to a click event.\n// it instantiates a ZipFile, and provides a callback that is\n// invoked when the zip is read.  This can take a few seconds on a\n// large zip file, so it's asynchronous. \nvar readFile = function(){\n    $(\"#status\").html(\"&lt;br/&gt;\");\n    var url= $(\"#urlToLoad\").val();\n    var doneReading = function(zip){\n        extractEntries(zip);\n    };\n\n    var zipFile = new ZipFile(url, doneReading);\n};\n\n\n// this function extracts the entries from an instantiated zip\nfunction extractEntries(zip){\n    $('#report').accordion('destroy');\n\n    // clear\n    $(\"#report\").html('');\n\n    var extractCb = function(id) {\n        // this callback is invoked with the entry name, and entry text\n        // in my demo, the text is just injected into an accordion panel.\n        return (function(entryName, entryText){\n            var content = entryText.replace(new RegExp( \"\\\\n\", \"g\" ), \"&lt;br/&gt;\");\n            $(\"#\"+id).html(content);\n            $(\"#status\").append(\"extract cb, entry(\" + entryName + \")  id(\" + id + \")&lt;br/&gt;\");\n            $('#report').accordion('destroy');\n            $('#report').accordion({collapsible:true, active:false});\n        });\n    }\n\n    // for each entry in the zip, extract it. \n    for (var i=0; i&lt;zip.entries.length;  i++) {\n        var entry = zip.entries[i];\n\n        var entryInfo = \"&lt;h4&gt;&lt;a&gt;\" + entry.name + \"&lt;/a&gt;&lt;/h4&gt;\\n&lt;div&gt;\";\n\n        // contrive an id for the entry, make it unique\n        var randomId = \"id-\"+ Math.floor((Math.random() * 1000000000));\n\n        entryInfo += \"&lt;span class='inputDiv'&gt;&lt;h4&gt;Content:&lt;/h4&gt;&lt;span id='\" + randomId +\n            \"'&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;\\n\";\n\n        // insert the info for one entry as the last child within the report div\n        $(\"#report\").append(entryInfo);\n\n        // extract asynchronously\n        entry.extract(extractCb(randomId));\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>The demo works in a couple of steps:  The <code>readFile</code> fn is triggered by a click, and instantiates a ZipFile object, which reads the zip file. There's an asynchronous callback for when the read completes (usually happens in less than a second for reasonably sized zips) - in this demo the callback is held in the doneReading local variable, which simply calls <code>extractEntries</code>, which \njust blindly unzips all the content of the provided zip file.  In a real app you would probably choose some of the entries to extract (allow the user to select, or choose one or more entries programmatically, etc). </p>\n\n<p>The <code>extractEntries</code> fn iterates over all entries, and calls <code>extract()</code> on each one, passing a callback.  Decompression of an entry takes time, maybe 1s or more for each entry in the zipfile, which means asynchrony is appropriate. The extract callback simply adds the extracted content to an jQuery accordion on the page. If the content is binary, then it gets formatted as such (not shown). </p>\n\n<hr>\n\n<p>It works, but I think that the utility is somewhat limited. </p>\n\n<p><strike>For one thing: It's very slow. Takes ~4 seconds to unzip the 140k AppNote.txt file from PKWare. The same uncompress can be done in less than .5s in a .NET program.</strike> <strong>EDIT</strong>: The Javascript ZipFile unpacks considerably faster than this now, in IE9 and in Chrome. It is still slower than a compiled program, but it is plenty fast for normal browser usage.</p>\n\n<p>For another: it does not do streaming. It basically slurps in the entire contents of the zipfile into memory. In a \"real\" programming environment you could read in only the metadata of a zip file (say, 64 bytes per entry) and then read and decompress the other data as desired.  There's no way to do IO like that in javascript, as far as I know, therefore the only option is to read the entire zip into memory and do random access in it.  This means it will place unreasonable demands on system memory for large zip files. Not so much a problem for a smaller zip file. </p>\n\n<p>Also: It doesn't handle the \"general case\" zip file - there are lots of zip options that I didn't bother to implement in the unzipper - like ZIP encryption, WinZip encryption, zip64, <strike>UTF-8 encoded filenames,</strike> and so on. (<strong>EDIT</strong> - it handles UTF-8 encoded filenames now). The ZipFile class handles the basics, though. Some of these things would not be hard to implement.  I have <a href=\"http://cheeso.members.winisp.net/AES-Encryption.htm\" rel=\"nofollow\">an AES encryption class</a> in Javascript; that could be integrated to support encryption. Supporting Zip64 would probably useless for most users of Javascript, as it is intended to support >4gb zipfiles - don't need to extract those in a browser. </p>\n\n<p><strike>I also did not test the case for unzipping binary content. Right now it unzips text.  If you have a zipped binary file, you'd need to edit the ZipFile class to handle it properly. I didn't figure out how to do that cleanly. </strike>  It does binary files now, too. </p>\n\n<hr>\n\n<p><strong>EDIT</strong> - I updated the JS unzip library and demo.  It now does binary files, in addition to text. I've made it more resilient and more general - you can now specify the encoding to use when reading text files.  Also the demo is expanded - it shows unzipping an XLSX file in the browser, among other things. </p>\n\n<p>So, while I think it is of limited utility and interest, it works. I guess it would work in Node.js.</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>I wrote a class for that too.\n<a href=\"http://blog.another-d-mention.ro/programming/read-load-files-from-zip-in-javascript/\" rel=\"nofollow\">http://blog.another-d-mention.ro/programming/read-load-files-from-zip-in-javascript/</a>\nYou can load basic assets such as javascript/css/images directly from the zip using class methods.\nHope it helps</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm using <a href=\"http://gildas-lormeau.github.com/zip.js/\">zip.js</a> and it seems to be quite useful. It's worth a look! </p>\n\n<p>Check the <a href=\"http://gildas-lormeau.github.com/zip.js/demos/demo2.html\">Unzip demo</a>, for example.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I wrote \"Binary Tools for JavaScript\", an open source project that includes the ability to unzip, unrar and untar: <a href=\"https://code.google.com/p/bitjs/\" rel=\"nofollow\">https://code.google.com/p/bitjs/</a></p>\n\n<p>Used in my comic book reader: <a href=\"https://code.google.com/p/kthoom/\" rel=\"nofollow\">https://code.google.com/p/kthoom/</a> (also open source).</p>\n\n<p>HTH!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found <a href=\"http://stuk.github.io/jszip/\" rel=\"nofollow\">jszip</a> quite useful. I've used so far only for reading, but they have create/edit capabilities as well.</p>\n\n<p>Code wise it looks something like this</p>\n\n<pre><code>var new_zip = new JSZip();\nnew_zip.load(file);\nnew_zip.files[\"doc.xml\"].asText() // this give you the text in the file\n</code></pre>\n\n<p>One thing I noticed is that it seems the file has to be in binary stream format (read using the .readAsArrayBuffer of FileReader(), otherwise I was getting errors saying I might have a corrupt zip file</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to display <a href=\"http://en.wikipedia.org/wiki/OpenOffice.org\">OpenOffice</a> files, .odt and .odp at client side using a web browser. </p>\n\n<p>These files are zipped files. Using Ajax, I can get these files from server but these are zipped files. I have to unzip them using <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>, I have tried using inflate.js, <a href=\"http://www.onicos.com/staff/iz/amuse/javascript/expert/inflate.txt\">http://www.onicos.com/staff/iz/amuse/javascript/expert/inflate.txt</a>, but without success.</p>\n\n<p>How can I do this?</p>\n",
            "last_activity_date": 1418245781,
            "question_id": 2095697,
            "score": 38,
            "tags": [
                "javascript",
                "zip",
                "unzip"
            ],
            "title": "Unzipping files"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<h2>Simplest Answer</h2>\n\n<pre><code>array.sort(function(a,b){\n  // Turn your strings into dates, and then subtract them\n  // to get a value that is either negative, positive, or zero.\n  return new Date(b.date) - new Date(a.date);\n});\n</code></pre>\n\n<h2>More Generic Answer</h2>\n\n<pre><code>array.sort(function(o1,o2){\n  if (sort_o1_before_o2)    return -1;\n  else if(sort_o1_after_o2) return  1;\n  else                      return  0;\n});\n</code></pre>\n\n<p>Or more tersely:</p>\n\n<pre><code>array.sort(function(o1,o2){\n  return sort_o1_before_o2 ? -1 : sort_o1_after_o2 ? 1 : 0;\n});\n</code></pre>\n\n<h2>Generic, Powerful Answer</h2>\n\n<p>Define a custom non-enumerable <code>sortBy</code> function using a <a href=\"http://en.wikipedia.org/wiki/Schwartzian_transform\">Schwartzian transform</a> on all arrays :</p>\n\n<pre><code>(function(){\n  if (typeof Object.defineProperty === 'function'){\n    try{Object.defineProperty(Array.prototype,'sortBy',{value:sb}); }catch(e){}\n  }\n  if (!Array.prototype.sortBy) Array.prototype.sortBy = sb;\n\n  function sb(f){\n    for (var i=this.length;i;){\n      var o = this[--i];\n      this[i] = [].concat(f.call(o,o,i),o);\n    }\n    this.sort(function(a,b){\n      for (var i=0,len=a.length;i&lt;len;++i){\n        if (a[i]!=b[i]) return a[i]&lt;b[i]?-1:1;\n      }\n      return 0;\n    });\n    for (var i=this.length;i;){\n      this[--i]=this[i][this[i].length-1];\n    }\n    return this;\n  }\n})();\n</code></pre>\n\n<p>Use it like so:</p>\n\n<pre><code>array.sortBy(function(o){ return o.date });\n</code></pre>\n\n<p>If your date is not directly comparable, make a comparable date out of it, e.g.</p>\n\n<pre><code>array.sortBy(function(o){ return new Date( o.date ) });\n</code></pre>\n\n<p>You can also use this to sort by multiple criteria if you return an array of values:</p>\n\n<pre><code>// Sort by date, then score (reversed), then name\narray.sortBy(function(o){ return [ o.date, -o.score, o.name ] };\n</code></pre>\n\n<p><em>See <a href=\"http://phrogz.net/JS/Array.prototype.sortBy.js\">http://phrogz.net/JS/Array.prototype.sortBy.js</a> for more details.</em></p>\n",
                    "is_accepted": true,
                    "score": 171
                },
                {
                    "body": "<p>After correcting the JSON this should work.</p>\n\n<pre><code>var array = [{id: 1, date:'Mar 12 2012 10:00:00 AM'},{id: 2, date:'Mar 8 2012 08:00:00 AM'}];\n\n\narray.sort(function(a,b){\nvar c = new Date(a.date);\nvar d = new Date(b.date);\nreturn c-d;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Your data needs some corrections:</p>\n\n<pre><code>var array = [{id: 1, date: \"Mar 12 2012 10:00:00 AM\"},{id: 2, date: \"Mar 28 2012 08:00:00 AM\"}];\n</code></pre>\n\n<p>After correcting the data, you can use this piece of code:</p>\n\n<pre><code>function sortFunction(a,b){  \n    var dateA = new Date(a.date).getTime();\n    var dateB = new Date(b.date).getTime();\n    return dateA &gt; dateB ? 1 : -1;  \n}; \n\nvar array = [{id: 1, date: \"Mar 12 2012 10:00:00 AM\"},{id: 2, date: \"Mar 28 2012 08:00:00 AM\"}];\narray.sort(sortFunction);\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>@Phrogz answers are both great, but here is a great, more concise answer:</p>\n\n<pre><code>array.sort(function(a,b){return a.getTime() - b.getTime()});\n</code></pre>\n\n<p>found here: <a href=\"http://stackoverflow.com/questions/16690035/sort-date-in-javascript\">Sort date in Javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>you can also use this <a href=\"http://onpub.com/how-to-sort-an-array-of-dates-with-javascript-s7-a109\" rel=\"nofollow\">link</a>. it provides callbacks functions that can be passed to generic <code>sort()</code> function </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Maybe <strong><a href=\"http://jsbin.com/pavina/edit?js,output\" rel=\"nofollow\">this approach</a></strong> can be useful:<br>\nWe are going to create a method to sort the array that be able to arrange objects by a property.</p>\n\n<h2>Creating the sorting function</h2>\n\n<pre><code>(function() {\n    var toString = Object.prototype.toString,\n        //default parser\n        parser = function (x) { return x; },\n        //gets the item to be sorted\n        getItem = function (x) {\n            return this.parser((toString.call(x) == \"[object Object]\" &amp;&amp; x[this.prop]) || x);\n        };\n    // Creates a sort method in the Array prototype\n    Object.defineProperty(Array.prototype, \"sortBy\", {\n        configurable: false,\n        enumerable: false,\n        // @o.prop: property name (if it is an Array of objects)\n        // @o.desc: determines descending sort\n        // @o.parser: function to parse the items to expected type\n        value: function (o) {\n            if (toString.call(o) != \"[object Object]\")\n                o = {};\n            if (toString.call(o.parser) != \"[object Function]\")\n                o.parser = parser;\n            o.desc = !!o.desc;\n            //if @o.desc is true: set -1, else 1\n            o.desc = [1, -1][+!!o.desc];\n            return this.sort(function (a, b) {\n                a = getItem.call(o, a);\n                b = getItem.call(o, b);\n                return o.desc * ((a &gt; b) - (b &gt; a));\n              //return o.desc * (a &gt; b ? 1 : (a &lt; b ? -1 : 0));\n            });\n        }\n    });\n})();\n</code></pre>\n\n<h2>Setting unsorted data</h2>\n\n<pre><code>var data = [\n  {date: \"2011-11-14T17:25:45Z\", quantity: 2, total: 200, tip: 0,   type: \"cash\"},\n  {date: \"2011-11-14T16:28:54Z\", quantity: 1, total: 300, tip: 200, type: \"visa\"},\n  {date: \"2011-11-14T16:30:43Z\", quantity: 2, total: 90,  tip: 0,   type: \"tab\"},\n  {date: \"2011-11-14T17:22:59Z\", quantity: 2, total: 90,  tip: 0,   type: \"tab\"},\n  {date: \"2011-11-14T16:53:41Z\", quantity: 2, total: 90,  tip: 0,   type: \"tab\"},\n  {date: \"2011-11-14T16:48:46Z\", quantity: 2, total: 90,  tip: 0,   type: \"tab\"},\n  {date: \"2011-11-31T17:29:52Z\", quantity: 1, total: 200, tip: 100, type: \"visa\"},\n  {date: \"2011-11-01T16:17:54Z\", quantity: 2, total: 190, tip: 100, type: \"tab\"},\n  {date: \"2011-11-14T16:58:03Z\", quantity: 2, total: 90,  tip: 0,   type: \"tab\"},\n  {date: \"2011-11-14T16:20:19Z\", quantity: 2, total: 190, tip: 100, type: \"tab\"},\n  {date: \"2011-11-14T17:07:21Z\", quantity: 2, total: 90,  tip: 0,   type: \"tab\"},\n  {date: \"2011-11-14T16:54:06Z\", quantity: 1, total: 100, tip: 0,   type: \"cash\"}\n];\n</code></pre>\n\n<h2>Using it</h2>\n\n<p>Finally, we arrange the array, by <code>\"date\"</code> property as <code>string</code></p>\n\n<pre><code>//sort the object by a property (ascending)\n//sorting takes into account uppercase and lowercase\ndata.sortBy({ prop: \"date\" });\n</code></pre>\n\n<p>If you want to ignore letter case, set the <code>\"parser\"</code> callback:</p>\n\n<pre><code>//sort the object by a property (descending)\n//sorting ignores uppercase and lowercase\ndata.sortBy({\n    prop: \"date\",\n    desc: true,\n    parser: function (item) {\n        return item.toUpperCase();\n    }\n});\n</code></pre>\n\n<p>If you want to treat the \"date\" field as <code>Date</code> type:</p>\n\n<pre><code>//sort the object by a property (ascending)\n//sorting parses each item to Date type\ndata.sortBy({\n    prop: \"date\",\n    parser: function (item) {\n        return new Date(item);\n    }\n});\n</code></pre>\n\n<p>Here you can play with the above example:<br>\n<strong><a href=\"http://jsbin.com/pavina/edit?js,output\" rel=\"nofollow\">http://jsbin.com/pavina/edit?js,output</a></strong></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For anyone who is wanting to sort by date (UK format), I used the following:</p>\n\n<pre><code>//Sort by day, then month, then year\nfor(i=0;i&lt;=2; i++){\n    dataCourses.sort(function(a, b){\n\n        a = a.lastAccessed.split(\"/\");\n        b = b.lastAccessed.split(\"/\");\n\n        return a[i]&gt;b[i] ? -1 : a[i]&lt;b[i] ? 1 : 0;\n    }); \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Say I have an array of a few objects:</p>\n\n<pre><code>var array = [{id: 1 date: Mar 12 2012 10:00:00 AM}{id: 2 date: Mar 8 2012 08:00:00 AM}];\n</code></pre>\n\n<p>How can I sort this array by the date element in order from the date closest to the current date and time down? Keep in mind that the array may have many objects, but for the sake of simplicity I used 2.</p>\n\n<p>Would I use the sort function and a custom comparator?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>In my specific case, I wanted the dates arranged from the most recent to the oldest. It ended up that I had to reverse the simple function's logic as so:</p>\n\n<pre><code>array.sort(function(a, b) {\n    a = new Date(a.dateModified);\n    b = new Date(b.dateModified);\n    return a&gt;b ? -1 : a&lt;b ? 1 : 0;\n});\n</code></pre>\n\n<p>This sorts the dates from the most recent.</p>\n",
            "last_activity_date": 1420196371,
            "question_id": 10123953,
            "score": 68,
            "tags": [
                "javascript",
                "datetime"
            ],
            "title": "Sort Javascript Object Array By Date"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Add a space plus the name of your new class to the <code>className</code> property of the element. First, put an <code>id</code> on the element so you can easily get a reference.</p>\n\n<pre><code>&lt;div id=\"div1\" class=\"someclass\"&gt;\n    &lt;img ... id=\"image1\" name=\"image1\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then </p>\n\n<pre><code>var d = document.getElementById(\"div1\");\nd.className = d.className + \" otherclass\";\n</code></pre>\n\n<p>See also <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/className\" rel=\"nofollow\">element.className on MDN</a>.</p>\n",
                    "is_accepted": true,
                    "score": 510
                },
                {
                    "body": "<p>Assuming you're doing more than just adding this one class (eg, you've got asynchronous requests and so on going on as well), I'd recommend a library like <a href=\"http://www.prototypejs.org/\">Prototype</a> or <a href=\"http://jquery.com\">jQuery</a>.</p>\n\n<p>This will make just about everything you'll need to do (including this) very simple.</p>\n\n<p>So let's say you've got jQuery on your page now, you could use code like this to add a class name to an element (on load, in this case):</p>\n\n<pre><code>$(document).ready( function() {\n  $('#div1').addClass( 'some_other_class' );\n} );\n</code></pre>\n\n<p>Check out the <a href=\"http://api.jquery.com/\">jQuery API browser</a> for other stuff.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>find your target element \"d\" however you wish and then:</p>\n\n<pre><code>d.className += ' additionalClass'; //note the space\n</code></pre>\n\n<p>you can wrap that in cleverer ways to check pre-existance, and check for space requirements etc..</p>\n",
                    "is_accepted": false,
                    "score": 92
                },
                {
                    "body": "<p>first, give the div an id. Then, call function appendClass:</p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\n  function appendClass(elementId, classToAppend){\n    var oldClass = document.getElementById(elementId).getAttribute(\"class\");\n    if (oldClass.indexOf(classToAdd) == -1)\n    {\n      document.getElementById(elementId).setAttribute(\"class\", classToAppend);\n    }\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In YUI, if you include <a href=\"http://developer.yahoo.com/yui/dom/\" rel=\"nofollow\">yuidom</a>, you can use </p>\n\n<p><code>\nYAHOO.util.Dom.addClass('div1','className');\n</code></p>\n\n<p>HTH</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Just to elaborate on what others have said, multiple CSS classes are combined in a single string, delimited by spaces. Thus, if you wanted to hard-code it, it would simply look like this:</p>\n\n<pre><code>&lt;div class=\"someClass otherClass yetAnotherClass\"&gt;\n      &lt;img ... id=\"image1\" name=\"image1\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>From there you can easily derive the javascript necessary to add a new class... just append a space followed by the new class to the element's className property. Knowing this, you can also write a function to remove a class later should the need arise.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>When the work I'm doing doesn't warrant using a library, I use these two functions:</p>\n\n<pre><code>function addClass( classname, element ) {\n    var cn = element.className;\n    //test for existance\n    if( cn.indexOf( classname ) != -1 ) {\n    \treturn;\n    }\n    //add a space if the element already has class\n    if( cn != '' ) {\n    \tclassname = ' '+classname;\n    }\n    element.className = cn+classname;\n}\n\nfunction removeClass( classname, element ) {\n    var cn = element.className;\n    var rxp = new RegExp( \"\\\\s?\\\\b\"+classname+\"\\\\b\", \"g\" );\n    cn = cn.replace( rxp, '' );\n    element.className = cn;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The easiest way to do this without any framework is to use <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\">element.classList.add</a> method.</p>\n\n<pre><code>var element = document.getElementById(\"div1\");\nelement.classList.add(\"otherclass\");\n</code></pre>\n\n<p>I prefer not having to add any empty space and duplicate entry handling myself (which is required when using the <code>document.className</code> approach). There are some <a href=\"http://caniuse.com/#feat=classlist\">browser limitations</a>, but you can work around them using <a href=\"https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#wiki-classlist\">polyfills</a>.</p>\n",
                    "is_accepted": false,
                    "score": 201
                },
                {
                    "body": "<pre><code>function toggleClass (El) {\n    if (El.className != \"white\") {\n        El.className = \"white\"\n    } \n    else{\n        El.className = \"black\";\n    };\n}\n</code></pre>\n\n<p>this will toggle the class you want to toggle without jQuery</p>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p>You can use the classList.add OR classList.remove method to add/remove a class from a element.</p>\n\n<pre><code>var nameElem = document.getElementById(\"name\")\nnameElem.classList.add(\"anyclss\")\n</code></pre>\n\n<p>The above code will add(and NOT replace) a class \"anyclass\" to nameElem.\nSimilarly you can use classList.remove() method to remove a class.</p>\n\n<pre><code>nameElem.classList.remove(\"anyclss\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>To add, remove or check element classes in a simple way:</p>\n\n<pre><code>var uclass: {\n    exists: function(elem,className){var p = new RegExp('(^| )'+className+'( |$)');return (elem.className &amp;&amp; elem.className.match(p));},\n    add: function(elem,className){if($E.classHas(elem,className)){return true;}elem.className += ' '+className;},\n    remove: function(elem,className){var c = elem.className;var p = new RegExp('(^| )'+className+'( |$)');c = c.replace(p,' ').replace(/  /g,' ');elem.className = c;}\n};\n\nvar elem = document.getElementById('someElem');\n//Add a class, only if not exists yet.\nuclass.add(elem,'someClass');\n//Remove class\nuclass.remove(elem,'someClass');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This js code works for me</p>\n\n<p>provides classname replacement</p>\n\n<pre><code>var DDCdiv = hEle.getElementBy.....\n\nvar cssCNs = DDCdiv.getAttribute('class');\nvar Ta = cssCNs.split(' '); //split into an array\nfor (var i=0; i&lt; Ta.length;i++)\n{\n    if (Ta[i] == 'visible'){\n        Ta[i] = 'hidden';\n        break;// quit for loop\n    }\n    else if (Ta[i] == 'hidden'){\n        Ta[i] = 'visible';\n    break;// quit for loop\n    }\n}\nDDCdiv.setAttribute('class',Ta.join(' ') );  // Join array with space and set class name\n</code></pre>\n\n<p>To add just use</p>\n\n<pre><code>var cssCNs = DDCdiv.getAttribute('class');\nvar Ta = cssCNs.split(' '); //split into an array\nTa.push('New class name');\n// Ta.push('Another class name');//etc...\nDDCdiv.setAttribute('class',Ta.join(' ') );  // Join array with space and set class name\n</code></pre>\n\n<p>To remove use</p>\n\n<pre><code>var cssCNs = DDCdiv.getAttribute('class');\nvar Ta = cssCNs.split(' '); //split into an array\n\nfor (var i=0; i&lt; Ta.length;i++)\n{\n    if (Ta[i] == 'visible'){\n        Ta.splice( i, 1 );\n        break;// quit for loop\n    }\n}\nDDCdiv.setAttribute('class',Ta.join(' ') );  // Join array with space and set class name\n</code></pre>\n\n<p>Hope this is helpful to sombody</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Another approach to add the class to element using pure JavaScript</p>\n\n<p><strong>For adding class:</strong></p>\n\n<pre><code>document.getElementById(\"div1\").classList.add(\"classToBeAdded\");\n</code></pre>\n\n<p><strong>For removing class:</strong></p>\n\n<pre><code>document.getElementById(\"div1\").classList.remove(\"classToBeRemoved\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<h2>Add Class</h2>\n\n<ul>\n<li><p><strong>Cross Compatible</strong></p>\n\n<p>In the following example we add a <code>classname</code> to the <code>&lt;body&gt;</code> element.  This is IE-8 compatible.</p>\n\n<pre><code>var z = document.body;\nz.classList ? z.classList.add('classname') : z.className += ' classname';\n</code></pre>\n\n<p>This is shorthand for the following..</p>\n\n<pre><code>var z = document.body;\nif (z.classList) {\n    z.classList.add('wait');\n} else {\n    z.className += ' wait';\n}\n</code></pre></li>\n</ul>\n\n<hr>\n\n<ul>\n<li><p><strong>Performance</strong></p>\n\n<p>If your more concerned with performance over cross-compatibility you can shorten it to the following which is 4% faster.</p>\n\n<pre><code>var z = document.body;\ndocument.body.classList.add('wait');\n</code></pre></li>\n</ul>\n\n<hr>\n\n<ul>\n<li><p><strong>Convenience</strong></p>\n\n<p>Alternatively you could use jQuery but the resulting performance is significantly slower.  94% slower according to jsPerf</p>\n\n<pre><code>$('body').addClass('wait');\n</code></pre></li>\n</ul>\n\n<hr>\n\n<hr>\n\n<h2>Removing the class</h2>\n\n<ul>\n<li><p><strong>Performance</strong></p>\n\n<p>Using jQuery selectively is the best method for removing a class if your concerned with performance</p>\n\n<pre><code>var z = $(document.body), c = ' classname';\nz.removeClass(c);\n</code></pre></li>\n</ul>\n\n<hr>\n\n<ul>\n<li><p>Without jQuery it's 32% slower</p>\n\n<pre><code>var z = document.body, c = ' classname';\nz.className = z.className.replace( c, '' );\nz.className = z.className + c;\n</code></pre></li>\n</ul>\n\n<hr>\n\n<ul>\n<li><p>and if you used jQuery alone it would be about 63% slower</p>\n\n<pre><code>var z = $('body'), c = ' classname';\nz.removeClass(c);\n</code></pre></li>\n</ul>\n\n<hr>\n\n<hr>\n\n<h2>References</h2>\n\n<ol>\n<li><a href=\"http://jsperf.com/addclass99\">jsPerf Test Case: Adding a Class</a></li>\n<li><a href=\"http://jsperf.com/removeclass99\">jsPerf Test Case: Removing a Class</a></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can use the API querySelector to select your element and then create a function with the element and the new classname as parameters. Using classlist for modern browsers, else for IE8. Then you can call the function after an event. </p>\n\n<pre><code> //select the dom element\n var addClassVar = document.querySelector('.someclass');\n\n //define the addclass function\n var addClass = function(el,className){\n   if (el.classList){\n     el.classList.add(className);\n   }\n   else {\n     el.className += ' ' + className;\n  }\n};\n\n//call the function\naddClass(addClassVar, 'newClass');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a element that already has a class:</p>\n\n<pre><code>&lt;div class=\"someclass\"&gt;\n          &lt;img ... id=\"image1\" name=\"image1\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Now I want to create a javascript function that will add a class to the div (not replace, but add).</p>\n\n<p>How can I do that?</p>\n",
            "last_activity_date": 1425637672,
            "question_id": 507138,
            "score": 235,
            "tags": [
                "javascript",
                "css",
                "classname"
            ],
            "title": "How do I add a class to a given element?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>if you want to manipulate the DOM the definetely use &lt;body onload=\"\"&gt;. this way the event will be triggered when the DOM is loaded. Else there is lag between window.onload event and DOM loading so you could wind up manipulating object that doesnot exists.\n i would suggest using jquery and the <code>$(document).ready(function(){})</code>. This will work for the best</p>\n",
                    "is_accepted": false,
                    "score": -10
                },
                {
                    "body": "<p>There is <strong>no</strong> difference ...</p>\n\n<p>So principially you could use both (one at a time !-)</p>\n\n<p>But for the sake of readability and for the cleanliness of the html-code I always prefer the window.onload !o]</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you're trying to write unobtrusive JS code (and you should be), then you shouldn't use <code>&lt;body onload=\"\"&gt;</code>.</p>\n\n<p>It is my understanding that different browsers handle these two slightly differently but they operate similarly.  In most browsers, if you define both, one will be ignored.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I prefer, generally, to <strong>not</strong> use the <code>&lt;body onload=\"\"</code>> event.  I think it's cleaner to keep behavior separated from content as much as possible.</p>\n\n<p>That said, there are occasions (usually pretty rare for me) where using body onload can give a slight speed boost.</p>\n\n<p>I like to use Prototype so I generally put something like this in the <code>&lt;head</code>> of my page:</p>\n\n<pre><code>document.observe(\"dom:loaded\", function(){\n  alert('The DOM is loaded!');\n});\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Event.observe(window, 'load', function(){\n  alert('Window onload');\n});\n</code></pre>\n\n<p>The above are tricks I learned <a href=\"http://stackoverflow.com/questions/49599/binding-custom-functions-to-dom-events-in-prototype\">here</a>.  I'm very fond of the concept of attach event handlers outside of the HTML.</p>\n\n<p>(Edit to correct spelling mistake in code.)</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>They both work the same. However, note that if both are defined, only one of them will be invoked. I generally avoid using either of them directly. Instead, you can attach an event handler to the load event. This way you can incorporate more easily other JS packages which might also need to attach a callback to the onload event.</p>\n\n<p>Any JS framework will have cross-browser methods for event handlers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>window.onload = myOnloadFunc</code> and <code>&lt;body onload=\"myOnloadFunc();\"&gt;</code> are different ways of using <strong>the same event</strong>. Using <code>window.onload</code> is less obtrusive though - it takes your JavaScript out of the HTML.</p>\n\n<p>All of the common JavaScript libraries, Prototype, ExtJS, Dojo, JQuery, YUI, etc. provide nice wrappers around events that occur as the document is loaded. You can listen for the window onLoad event, and react to that, but onLoad is not fired until all resources have been downloaded, so your event handler won't be executed until that last huge image has been fetched. In some cases that's exactly what you want, in others you might find that listening for when the DOM is ready is more appropriate - this event is similar to onLoad but fires without waiting for images, etc. to download.</p>\n",
                    "is_accepted": true,
                    "score": 137
                },
                {
                    "body": "<p>It is a accepted standard to have content, layout and behavior separate. So window.onload() will be more suitable to use than <code>&lt;body onload=\"\"&gt;</code> though both do the same work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Think of onload like any other attribute.  On an input box, for example, you could put:</p>\n\n<pre><code>&lt;input id=\"test1\" value=\"something\"/&gt;\n</code></pre>\n\n<p>Or you could call:</p>\n\n<pre><code>document.getElementById('test1').value = \"somethingelse\";\n</code></pre>\n\n<p>The onload attribute works the same way, except that it takes a function as its value instead of a string like the value attribute does.  That also explains why you can \"only use one of them\" - calling window.onload reassigns the value of the onload attribute for the body tag.</p>\n\n<p>Also, like others here are saying, usually it is cleaner to keep style and javascript separated from the content of the page, which is why most people advise to use window.onload or like jQuery's ready function.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>&lt;body onload=\"\"&gt; should override window.onload.</p>\n\n<p>With &lt;body onload=\"\"&gt;, document.body.onload might be null, undefined or a function depending on the browser (although getAttribute(\"onload\") should be somewhat consistent for getting the body of the anonymous function as a string). With window.onload, when you assign a function to it, window.onload will be a function consistently across browsers. If that matters to you, use window.onload.</p>\n\n<p>window.onload is better for separating the JS from your content anyway. There's not much reason to use &lt;body onload=\"\"&gt; anyway when you can use window.onload.</p>\n\n<p>In Opera, the event target for window.onload and &lt;body onload=\"\"&gt; (and even window.addEventListener(\"load\", func, false)) will be the window instead of the document like in Safari and Firefox. But, 'this' will be the window across browsers.</p>\n\n<p>What this means is that, when it matters, you should wrap the crud and make things consistent or use a library that does it for you.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is no difference, but you should not use either.</p>\n\n<p>In many browsers, window.onload event is not triggered until all images have loaded, which is not what you want.  Standards based browsers have an event called \"DomContentReady\" which fires earlier, but it is not supported by IE.  I'd recommend using a javascript library which supports a cross browser DomContentReady feature, or finding a well written function you can use.  jQuery's <code>$(document).ready()</code>, is a good example.       </p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>'so many subjective answers to an objective question.  \"Unobtrusive\" JavaScript is superstition like the old rule to never use gotos.  Write code in a way that helps you reliably accomplish your goal, not according to someone's trendy religious beliefs.</p>\n\n<p>Anyone who finds:</p>\n\n<pre><code> &lt;body onload=\"body_onload();\"&gt;\n</code></pre>\n\n<p>to be overly distracting is overly pretentious and doesn't have their priorities straight.</p>\n\n<p>I normally put my JavaScript code in a separate .js file, but I find nothing cumbersome about hooking event handlers in HTML, which is valid HTML by the way.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>window.onload</code> can work without body. Create page with only the script tags and open it in a browser. The page doesn't contain any body, but it still works..</p>\n\n<pre><code>&lt;script&gt;\n  function testSp()\n  {\n    alert(\"hit\");\n  }\n  window.onload=testSp;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><code>window.onload</code> - Called after all DOM, JS files, Images, Iframes, Extensions and others completely loaded. This is equal to $(window).load(function() {});</p>\n\n<p><code>body onload=\"\"</code> - Called once DOM loaded. This is equal to $(document).ready(function() {});</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>What exactly is the difference between the <code>window.onload</code> event and the <code>onload</code> event of the <code>body</code> tag? when do I use which and how should it be done correctly?</p>\n",
            "last_activity_date": 1408313168,
            "question_id": 191157,
            "score": 140,
            "tags": [
                "javascript"
            ],
            "title": "window.onload vs &lt;body onload=&quot;&quot;/&gt;"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<h1>BEWARE:</h1>\n\n<p>You want to be careful about whether or not returning multiple models in your model hook is appropriate.  Ask yourself this simple question:</p>\n\n<ol>\n<li>Does my route load dynamic data based on the url using a slug <code>:id</code>? i.e.\n<code>this.resource('foo', {path: ':id'});</code></li>\n</ol>\n\n<h2>If you answered yes</h2>\n\n<p><strong>Do not attempt to load multiple models from the model hook in that route!!!</strong> The reason lies in the way Ember handles linking to routes.  If you provide a model when linking to that route (<code>{{link-to 'foo' model}}</code>, <code>transitionTo('foo', model)</code>) it will skip the model hook and use the supplied model.  This is probably problematic since you expected multiple models, but only one model would be delivered. Here's an alternative:</p>\n\n<h3>Do it in <code>setupController</code>/<code>afterModel</code></h3>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  model: function(params) {\n    return $.getJSON('/books/' + params.id);\n  },\n  setupController: function(controller, model){\n    this._super(controller,model);\n    controller.set('model2', {bird:'is the word'});\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/cibujahuju/1/edit\">http://emberjs.jsbin.com/cibujahuju/1/edit</a></p>\n\n<p>If you need it to block the transition (like the model hook does) return a promise from the <code>afterModel</code> hook.  You will need to manually keep track of the results from that hook and hook them up to your controller.</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  model: function(params) {\n    return $.getJSON('/books/' + params.id);\n  },\n  afterModel: function(){\n    var self = this;\n    return $.getJSON('/authors').then(function(result){\n      self.set('authors', result);\n    });\n  }, \n  setupController: function(controller, model){\n    this._super(controller,model);\n    controller.set('authors', this.get('authors'));\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/diqotehomu/1/edit\">http://emberjs.jsbin.com/diqotehomu/1/edit</a></p>\n\n<h2>If you answered no</h2>\n\n<p>Go ahead, let's return multiple models from the route's model hook:</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  model: function() {\n    return {\n           model1: ['red', 'yellow', 'blue'],\n           model2: ['green', 'purple', 'white']\n    };\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/tuvozuwa/1/edit\">http://emberjs.jsbin.com/tuvozuwa/1/edit</a></p>\n\n<p>If it's something that needs to be waited on (such as a call to the server, some sort of promise)</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  model: function() {\n    return Ember.RSVP.hash({\n           model1: promise1,\n           model2: promise2\n    });\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/xucepamezu/1/edit\">http://emberjs.jsbin.com/xucepamezu/1/edit</a></p>\n\n<p>In the case of Ember Data</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  var store = this.store;\n  model: function() {\n    return Ember.RSVP.hash({\n           cats: store.find('cat'),\n           dogs: store.find('dog')\n    });\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/pekohijaku/1/edit\">http://emberjs.jsbin.com/pekohijaku/1/edit</a></p>\n\n<p>If one is a promise, and the other isn't, it's all good, RSVP will gladly just use that value</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  var store = this.store;\n  model: function() {\n    return Ember.RSVP.hash({\n           cats: store.find('cat'),\n           dogs: ['pluto', 'mickey']\n    });\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/coxexubuwi/1/edit\">http://emberjs.jsbin.com/coxexubuwi/1/edit</a></p>\n\n<p>Mix and match and have fun!</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  var store = this.store;\n  model: function() {\n    return Ember.RSVP.hash({\n           cats: store.find('cat'),\n           dogs: Ember.RSVP.Promise.cast(['pluto', 'mickey']),\n           weather: $.getJSON('weather')\n    });\n  }, \n  setupController: function(controller, model){\n    this._super(controller, model);\n    controller.set('favoritePuppy', model.dogs[0]);\n  }\n});\n</code></pre>\n\n<p>Example: <a href=\"http://emberjs.jsbin.com/joraruxuca/1/edit\">http://emberjs.jsbin.com/joraruxuca/1/edit</a></p>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<p>You can use the <a href=\"https://github.com/tildeio/rsvp.js#hash-of-promises\">Ember.RSVP.hash</a> to load several models:</p>\n\n<pre><code>App.IndexRoute = Ember.Route.extend({\n  model: function() {\n      return Ember.RSVP.hash({\n          people: this.store.find('person'),\n          companies: this.store.find('company')\n      })\n  }\n});\n</code></pre>\n\n<p>And in your template you can refer to <code>people</code> and <code>companies</code> to get the loaded data:</p>\n\n<pre><code>&lt;script type=\"text/x-handlebars\" data-template-name=\"index\"&gt;\n    &lt;h2&gt;People:&lt;/h2&gt;\n    &lt;ul&gt;\n        {{#each people}}\n        &lt;li&gt;{{name}}&lt;/li&gt;\n        {{/each}}\n    &lt;/ul&gt;\n    &lt;h2&gt;Companies:&lt;/h2&gt;\n      &lt;ul&gt;\n      {{#each companies}}\n          &lt;li&gt;{{name}}&lt;/li&gt;\n      {{/each}}\n    &lt;/ul&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>This is a fiddle with this sample <a href=\"http://jsfiddle.net/marciojunior/J7u5S/\">http://jsfiddle.net/marciojunior/J7u5S/</a></p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p>I use something like the answer that Marcio provided but it looks something like this:</p>\n\n<pre><code>    var products = Ember.$.ajax({\n        url: api + 'companies/' +  id +'/products',\n        dataType: 'jsonp',\n        type: 'POST'\n    }).then(function(data) {\n        return data;\n    });\n\n    var clients = Ember.$.ajax({\n        url: api + 'clients',\n        dataType: 'jsonp',\n        type: 'POST'\n    }).then(function(data) {\n        return data;\n    });\n\n    var updates = Ember.$.ajax({\n        url: api + 'companies/' +  id + '/updates',\n        dataType: 'jsonp',\n        type: 'POST'\n    }).then(function(data) {\n        return data;\n    });\n\n    var promises = {\n        products: products,\n        clients: clients,\n        updates: updates\n    };\n\n    return Ember.RSVP.hash(promises).then(function(data) {\n      return data;\n    });  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>While I am not new to web development, I am quite new to to client-side MVC frameworks. I did some research and decided to give it a go with EmberJS. I went through the TodoMVC guide and it made sense to me...</p>\n\n<p>I have setup a very basic app; index route, two models and one template. I have a server-side php script running that returns some db rows.</p>\n\n<p>One thing that is very confusing me is how to load multiple models on the same route. I have read some information about using a setupController but I am still unclear. In my template I have two tables that I am trying to load with unrelated db rows. In a more traditional web app I would have just issued to sql statements and looped over them to fill the rows. I am having difficulty translating this concept to EmberJS.</p>\n\n<p><strong>How do I load multiple models of unrelated data on the same route?</strong></p>\n\n<p>I am using the latest Ember and Ember Data libs.</p>\n\n<h1>Update</h1>\n\n<p>although the first answer gives a method for handling it, the second answer explains when it's appropriate and the different methods for when it isn't appropriate.</p>\n",
            "last_activity_date": 1417920917,
            "question_id": 20521967,
            "score": 29,
            "tags": [
                "javascript",
                "ember.js",
                "rsvp.js"
            ],
            "title": "EmberJS: How to load multiple models on the same route?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Consider this:</p>\n\n<pre><code>jQuery(function(){\n  var close_link = $('&lt;a class=\"\" href=\"#\"&gt;Click here to see an alert&lt;/a&gt;');\n      $('.add_to_this').append(close_link);\n      $('.add_to_this').children().each(function()\n      {\n    \t$(this).click(function() {\n    \t\talert('hello from binded function call');\n    \t\t//do stuff here...\n    \t});\n      });\n});\n</code></pre>\n\n<p>It will work because you attach it to every specific element. This is why you need - after adding your link to the DOM - to find a way to explicitly select your added element as a JQuery element in the DOM and bind the click event to it. </p>\n\n<p>The best way will probably be - as suggested - to bind it to a specific class via the live method.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I believe the good way it to do:</p>\n\n<pre><code>$('#id').append('&lt;a id=\"#subid\" href=\"#\"&gt;...&lt;/a&gt;');\n$('#subid').click( close_link );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>How about the Live method?</p>\n\n<pre><code>$('.add_to_this a').live('click', function() {\n    alert('hello from binded function call');\n});\n</code></pre>\n\n<p>Still, what you did about looks like it should work. There's <a href=\"http://stackoverflow.com/questions/584605/appending-html-w-click-event-using-jquery\" title=\"another posting\">another post</a> that looks pretty similar.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>The first problem is that when you call append on a jQuery set with more than one element, a clone of the element to append is created for each and thus the attached event observer is lost.</p>\n\n<p>An alternative way to do it would be to create the link for each element:</p>\n\n<pre><code>function handler() { alert('hello'); }\n$('.add_to_this').append(function() {\n  return $('&lt;a&gt;Click here&lt;/a&gt;').click(handler);\n})\n</code></pre>\n\n<p>Another potential problem might be that the event observer is attached before the element has been added to the DOM. I'm not sure if this has anything to say, but I think the behavior might be considered undetermined.\nA more solid approach would probably be:</p>\n\n<pre><code>function handler() { alert('hello'); }\n$('.add_to_this').each(function() {\n  var link = $('&lt;a&gt;Click here&lt;/a&gt;');\n  $(this).append(link);\n  link.click(handler);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>All of these methods are deprecated. You should use the <code>on</code> method to solve your problem.</p>\n\n<p>If you want to target a dynamically added element you'll have to use </p>\n\n<pre><code>$(document).on('click', selector-to-your-element , function() {\n     //code here ....\n});\n</code></pre>\n\n<p>this replace the deprecated <code>.live()</code> method.</p>\n",
                    "is_accepted": false,
                    "score": 147
                },
                {
                    "body": "<p>A little late to the party but I thought I would try to clear up some common misconceptions in jQuery event handlers. As of jQuery 1.7, <code>.on()</code> should be used instead of the deprecated <code>.live()</code>, to delegate event handlers to elements that are dynamically created at any point after the event handler is assigned.</p>\n\n<p>That said, it is not a simple of switching <code>live</code> for <code>on</code> because the syntax is slightly different:</p>\n\n<p>New method (example 1):</p>\n\n<pre><code>$(document).on('click', '#someting', function(){\n\n});\n</code></pre>\n\n<p>Deprecated method (example 2):</p>\n\n<pre><code>$('#something').live(function(){\n\n});\n</code></pre>\n\n<p>As shown above, there is a difference. The twist is <code>.on()</code> can actually be called similar to <code>.live()</code>, by passing the selector to the jQuery function itself:</p>\n\n<p>Example 3:</p>\n\n<pre><code>$('#something').on('click', function(){\n\n});\n</code></pre>\n\n<p>However, without using <code>$(document)</code> as in example 1, example 3 will not work for dynamically created elements. The example 3 is absolutely fine if you don't need the dynamic delegation.</p>\n\n<blockquote>\n  <p>Should $(document).on() be used for everything?</p>\n</blockquote>\n\n<p>It will work but if you don't need the dynamic delegation, it would be more appropriate to use example 3 because example 1 requires slightly more work from the browser. There won't be any real impact on performance but it makes sense to use the most appropriate method for your use.</p>\n\n<blockquote>\n  <p>Should .on() be used instead of .click() if no dynamic delegation is needed?</p>\n</blockquote>\n\n<p>Not necessarily. The following is just a shortcut for example 3:</p>\n\n<pre><code>$('#something').click(function(){\n\n});\n</code></pre>\n\n<p>The above is perfectly valid and so it's really a matter of personal preference as to which method is used when no dynamic delegation is required.</p>\n\n<p>References:</p>\n\n<ul>\n<li><a href=\"http://api.jquery.com/on/\">jQuery docs for <code>.on()</code></a></li>\n<li><a href=\"http://api.jquery.com/click/\">jQuery docs for <code>.click()</code></a></li>\n<li><a href=\"http://api.jquery.com/live/\">jQuery docs for <code>.live()</code></a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>It is possible and sometimes necessary to create the click event along with the element. This is for example when selector based binding is not an option. The key part is to avoid the problem that <a href=\"http://stackoverflow.com/a/1530292/694325\">Tobias</a> was talking about by using <code>.replaceWith()</code> on a single element. Note that this is just a proof of concept.</p>\n\n<pre><code>&lt;script&gt;\n    // This simulates the object to handle\n    var staticObj = [\n        { ID: '1', Name: 'Foo' },\n        { ID: '2', Name: 'Foo' },\n        { ID: '3', Name: 'Foo' }\n    ];\n    staticObj[1].children = [\n        { ID: 'a', Name: 'Bar' },\n        { ID: 'b', Name: 'Bar' },\n        { ID: 'c', Name: 'Bar' }\n    ];\n    staticObj[1].children[1].children = [\n        { ID: 'x', Name: 'Baz' },\n        { ID: 'y', Name: 'Baz' }\n    ];\n\n    // This is the object-to-html-element function handler with recursion\n    var handleItem = function( item ) {\n        var ul, li = $(\"&lt;li&gt;\" + item.ID + \" \" + item.Name + \"&lt;/li&gt;\");\n\n        if(typeof item.children !== 'undefined') {\n            ul = $(\"&lt;ul /&gt;\");\n            for (var i = 0; i &lt; item.children.length; i++) {\n                ul.append(handleItem(item.children[i]));\n            }\n            li.append(ul);\n        }\n\n        // This click handler actually does work\n        li.click(function(e) {\n            alert(item.Name);\n            e.stopPropagation();\n        });\n        return li;\n    };\n\n    // Wait for the dom instead of an ajax call or whatever\n    $(function() {\n        var ul = $(\"&lt;ul /&gt;\");\n\n        for (var i = 0; i &lt; staticObj.length; i++) {\n            ul.append(handleItem(staticObj[i]));\n        }\n\n        // Here; this works.\n        $('#something').replaceWith(ul);\n    });\n&lt;/script&gt;\n&lt;div id=\"something\"&gt;Magical ponies \u2665&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to bind an onclick event to an element I insert dynamically with jQuery</p>\n\n<p>But It never runs the binded function. I'd be happy if you can point out why this example is not working and how I can get it to run properly:</p>\n\n<pre><code>    &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"        \n        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n    &lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"da\" lang=\"da\"&gt;\n    &lt;head&gt;\n      &lt;title&gt;test of click binding&lt;/title&gt;\n\n      &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n      &lt;script type=\"text/javascript\"&gt;\n\n\n    jQuery(function(){\n      close_link = $('&lt;a class=\"\" href=\"#\"&gt;Click here to see an alert&lt;/a&gt;');\n      close_link.bind(\"click\", function(){\n        alert('hello from binded function call');\n        //do stuff here...\n      });\n\n      $('.add_to_this').append(close_link);\n    });\n      &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;h1 &gt;Test of click binding&lt;/h1&gt;\n      &lt;p&gt;problem: to bind a click event to an element I append via JQuery.&lt;/p&gt;\n\n      &lt;div class=\"add_to_this\"&gt;\n        &lt;p&gt;The link is created, then added here below:&lt;/p&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"add_to_this\"&gt;\n        &lt;p&gt;Another is added here below:&lt;/p&gt;\n      &lt;/div&gt;\n\n\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n\n<p><strong>EDIT: I edited the example to contain two elements the method is inserted to.</strong> In that case, the <code>alert()</code> call is never executed. (thanks to @Daff for pointing that out in a comment)</p>\n",
            "last_activity_date": 1381409236,
            "question_id": 1525664,
            "score": 63,
            "tags": [
                "javascript",
                "jquery",
                "bind"
            ],
            "title": "jQuery how to bind onclick event to dynamically added HTML element"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>That's on purpose and by design. It's a security issue.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I managed with a simple $(...).click(); with JQuery 1.6.1</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is due to a security restriction.</p>\n\n<p>I found out that the security restriction is only when the <code>&lt;input type=\"file\"/&gt;</code> is set to <code>display:none;</code> or is <code>visbilty:hidden</code>.</p>\n\n<p>So i tried positioning it outside the viewport by setting <code>position:absolute</code> and <code>top:-100px;</code> and voil\u00e0 it works.</p>\n\n<p>see <a href=\"http://jsfiddle.net/DSARd/1/\">http://jsfiddle.net/DSARd/1/</a></p>\n\n<p>call it a hack.</p>\n\n<p>Hope that works for you.</p>\n",
                    "is_accepted": false,
                    "score": 114
                },
                {
                    "body": "<p>this worked for me:</p>\n\n<p>JS:</p>\n\n<pre><code>$('#fileinput').trigger('click'); \n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"hiddenfile\"&gt;\n  &lt;input name=\"upload\" type=\"file\" id=\"fileinput\"/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>.hiddenfile {\n width: 0px;\n height: 0px;\n overflow: hidden;\n}\n</code></pre>\n\n<hr>\n\n<p><strong>>>>Another one that works Cross-Browser:&lt;&lt;&lt;</strong></p>\n\n<p>The Idea is that you overlay an invisible huge \"Browse\" button over your custom button.\nSo when the user clicks your custom button, he's actually clicking on the \"Browse\" button of the native input field.</p>\n\n<p>JS Fiddle: <a href=\"http://jsfiddle.net/5Rh7b/\">http://jsfiddle.net/5Rh7b/</a></p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;div id=\"mybutton\"&gt;\n  &lt;input type=\"file\" id=\"myfile\" name=\"upload\"/&gt;\n  Click Me!\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS:</strong></p>\n\n<pre><code>div#mybutton {\n\n  /* IMPORTANT STUFF */\n  overflow: hidden;\n  position: relative;   \n\n  /* SOME STYLING */\n  width:  50px;\n  height: 28px;\n  border: 1px solid green;\n  font-weight: bold\n  background: red;\n}\n\ndiv#mybutton:hover {\n  background: green;\n}\n\ninput#myfile {\n  height: 30px;\n  cursor: pointer;\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  font-size: 100px;\n  z-index: 2;\n\n  opacity: 0.0; /* Standard: FF gt 1.5, Opera, Safari */\n  filter: alpha(opacity=0); /* IE lt 8 */\n  -ms-filter: \"alpha(opacity=0)\"; /* IE 8 */\n  -khtml-opacity: 0.0; /* Safari 1.x */\n  -moz-opacity: 0.0; /* FF lt 1.5, Netscape */\n}\n</code></pre>\n\n<p><strong>JavaScript:</strong></p>\n\n<pre><code>$(document).ready(function() {\n    $('#myfile').change(function(evt) {\n        alert($(this).val());\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>Try this, it's a hack. the Position:absolute is for Chrome and trigger('change') is for IE.</p>\n\n<pre><code>var hiddenFile = $(\"&lt;input type=\\\"file\\\" name=\\\"file\\\" id=\\\"file1\\\" style=\\\"position:absolute;left:-9999px\\\" /&gt;\");\n$('body').append(hiddenFile);\n\n$('#aPhotoUpload').click(function () {\n    hiddenFile.trigger('click');\n    if ($.browser.msie)\n        hiddenFile.trigger('change');\n});\n\nhiddenFile.change(function (e) {\n    alert('TODO');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have it working (=tested) in IE8+, recent FF and chrome:</p>\n\n<pre><code>$('#uploadInput').focus().trigger('click');\n</code></pre>\n\n<p>The key is focusing <strong>before</strong> firing the click (otherwise chrome ignores it).</p>\n\n<p>Note: you do NEED to have your input displayed and visible (as in, not <code>display:none</code> and not <code>visibility:hidden</code>).\nI suggest (as many other have before) to absolutely position the input and throw it off screen.</p>\n\n<pre><code>#uploadInput {\n    position: absolute;\n    left: -9999px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><strong>adardesign</strong> nailed it regarding the file input element being ignored when it is hidden.  I also noticed many people shifting element size to 0, or pushing it out of bounds with positioning and overflow adjustments.  These are all great ideas.<br>\nAn alternative way that also seems to work perfectly well is to <strong>just set the opacity to 0</strong>.  Then you can always just <strong>set the position to keep it from offsetting other elements</strong> as hide does.  It just seems a little unnecessary to shift an element nearly 10K pixels in any direction.</p>\n\n<p>Here's a little example for those who want one:</p>\n\n<pre><code>input[type='file']{\n    position:absolute;\n    opacity:0;\n    /* For IE8 \"Keep the IE opacity settings in this order for max compatibility\" */\n    -ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n    /* For IE5 - 7 */\n    filter: alpha(opacity=0);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Based on Guillaume Bodi's answer I did this:</p>\n\n<pre><code>$('.fileinputbar-button').on('click', function() {\n    $('article.project_files &gt; header, article.upload').show();\n    $('article.project_files &gt; header, article.upload header').addClass('active');\n    $('.file_content, article.upload .content').show();\n    $('.fileinput-button input').focus().click();\n    $('.fileinput-button').hide();\n});\n</code></pre>\n\n<p>which means it's hidden to start with and then displayed for the trigger, then hidden again immediately.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Actually, I found out a really easy method for this, which is:</p>\n\n<pre><code>$('#fileinput').show().trigger('click').hide();   \n</code></pre>\n\n<p>This way, your file input field can have the css property <em>display</em> on <em>none</em> and still win the trade :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Correct code:</p>\n\n<pre><code>&lt;style&gt;\n                            .upload input[type='file']\n                            {\n                                position: absolute;\n                                float: left;\n                                opacity: 0; /* For IE8 \"Keep the IE opacity settings in this order for max compatibility\" */\n                                -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\"; /* For IE5 - 7 */\n                                filter: alpha(opacity=0);\n                                width: 100px; height: 30px; z-index: 51\n                            }\n                            .upload input[type='button']\n                            {\n                                width: 100px;\n                                height: 30px;\n                                z-index: 50;\n                            }\n                            .upload input[type='submit']\n                            {\n                                display: none;\n                            }\n                            .upload\n                            {\n                                width: 100px; height: 30px\n                                }\n                        &lt;/style&gt;\n                        &lt;div class=\"upload\"&gt;\n                            &lt;input type='file' ID=\"flArquivo\" onchange=\"inicioUpload();\" /&gt;\n                            &lt;input type=\"button\" value=\"Selecionar\"  /&gt;\n                            &lt;input type='submit' ID=\"btnEnviarImagem\"  /&gt;\n                        &lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\n                    function abrirfoto(){\n                        $('#flArquivo').click();\n                    }       \n\n                    function inicioUpload(){                        \n                        showwait();\n                        $('#btnEnviarImagem').click();                        \n                    }\n\n            &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>or else simply</p>\n\n<pre><code>$(':input[type=\"file\"]').show().click().hide();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Check out my fiddle ... </p>\n\n<p><a href=\"http://jsfiddle.net/mohany2712/vaw8k/\" rel=\"nofollow\">http://jsfiddle.net/mohany2712/vaw8k/</a></p>\n\n<p>HTML :</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div class=\"uploadBox\"&gt;\n        &lt;a href=\"javascript:void(0)\" id=\"uploadIcon\" href=\"\"&gt;\n            &lt;img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Icon_-_upload_photo_2.svg/512px-Icon_-_upload_photo_2.svg.png\"  width=\"20px\" height=\"20px\"/&gt;\n        &lt;/a&gt;\n        &lt;input type=\"file\" value=\"upload\" id=\"uploadFile\" class=\"uploadFile\" /&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Javascript :</p>\n\n<pre><code>$(\"#uploadIcon\").click(function(){\n        $(this).next().trigger('click');\n});\n</code></pre>\n\n<p>CSS :</p>\n\n<pre><code>.uploadFile {\n   visibility : hidden;\n}\n</code></pre>\n\n<p>its really simple .</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It is too late to answer but I think this minimal setup work best. I am also looking for the same.</p>\n\n<pre><code>  &lt;div class=\"btn-file\"&gt;\n     &lt;input type=\"file\" class=\"hidden-input\"&gt;\n     Select your new picture\n  &lt;/div&gt;\n</code></pre>\n\n<p>//css</p>\n\n<pre><code>.btn-file {\n  display: inline-block;\n  padding: 8px 12px;\n  cursor: pointer;\n  background: #89f;\n  color: #345;\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-file input[type=file] {\n  position: absolute;\n  top: 0;\n  right: 0;\n  min-width: 100%;\n  min-height: 100%;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  cursor: inherit;\n  display: block;\n}\n</code></pre>\n\n<p><a href=\"http://jsbin.com/heraz/1/\" rel=\"nofollow\">jsbin</a></p>\n\n<p><a href=\"http://labs.abeautifulsite.net/demos/bootstrap-file-inputs/\" rel=\"nofollow\">bootstrap file input buttons demo</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My problem was a little bit different on iOS 7. Turns out FastClick was causing problems. All I had to do was add <code>class=\"needsclick\"</code> to my button.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Am trying to trigger an upload box (browse button) using jQuery.<br>\nThe method I have tried now is:  </p>\n\n<pre><code>$('#fileinput').trigger('click');   \n</code></pre>\n\n<p>But it doesn't seem to work. \nPlease help. Thank you.</p>\n",
            "last_activity_date": 1421493832,
            "question_id": 793014,
            "score": 76,
            "tags": [
                "javascript",
                "jquery",
                "css"
            ],
            "title": "Jquery trigger file input"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>There's a section about <a href=\"http://dev.w3.org/html5/spec/Overview.html#pixel-manipulation\">pixel manipulation</a> in the W3C documentation.</p>\n\n<p>Here's <a href=\"http://dev.opera.com/articles/view/html-5-canvas-the-basics/#pixelbasedmanipulation\">an example on how to invert an image</a>:</p>\n\n<pre><code>// Get the CanvasPixelArray from the given coordinates and dimensions.\nvar imgd = context.getImageData(x, y, width, height);\nvar pix = imgd.data;\n\n// Loop over each pixel and invert the color.\nfor (var i = 0, n = pix.length; i &lt; n; i += 4) {\n    pix[i  ] = 255 - pix[i  ]; // red\n    pix[i+1] = 255 - pix[i+1]; // green\n    pix[i+2] = 255 - pix[i+2]; // blue\n    // i+3 is alpha (the fourth element)\n}\n\n// Draw the ImageData at the given (x,y) coordinates.\ncontext.putImageData(imgd, x, y);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 96
                },
                {
                    "body": "<p>Yup, check out getImageData(). Here's an example of breaking captcha with JavaScript using canvas:</p>\n\n<p><a href=\"http://ejohn.org/blog/ocr-and-neural-nets-in-javascript/\">http://ejohn.org/blog/ocr-and-neural-nets-in-javascript/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Have you tried the getImageData method ?</p>\n\n<pre><code>data = context.getImageData(x, y, 1, 1).data;\ncolor = new Color([data[0], data[1], data[2]]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Note that getImageData returns a snapshot. Implications are:</p>\n\n<ul>\n<li>Changes will not taking effect until subsequent putImageData</li>\n<li>getImageData and putImageData calls are relatively slow</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Yes sure, provided you have its context. <a href=\"http://stackoverflow.com/a/27705693/985454\">How to get canvas context?</a></p>\n\n<pre><code>var imgData = context.getImageData(0,0,canvas.width,canvas.height);\n// array [r,g,b,a,r,g,b,a,r,g,..]\n\nfunction getPixel(imgData, index) {\n  var i = index*4, d = imgData.data;\n  return [d[i],d[i+1],d[i+2],d[i+3]] // returns array [R,G,B,A]\n}\n\n// AND/OR\n\nfunction getPixelXY(imgData, x, y) {\n  return getPixel(imgData, y*imgData.width+x);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>// Get pixel data \nvar imageData = context.getImageData(x, y, width, height);\n//color at (x,y) position\nvar color = [];\ncolor['red'] = imageData.data[((y*(imageData.width*4)) + (x*4)) + 0];\ncolor['green'] = imageData.data[((y*(imageData.width*4)) + (x*4)) + 1];\ncolor['blue'] = imageData.data[((y*(imageData.width*4)) + (x*4)) + 2];\ncolor['alpha'] = imageData.data[((y*(imageData.width*4)) + (x*4)) + 3];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to query a HTML Canvas object to get the color at a specific location?</p>\n",
            "last_activity_date": 1423220597,
            "question_id": 667045,
            "score": 59,
            "tags": [
                "javascript",
                "html",
                "canvas"
            ],
            "title": "getPixel from HTML Canvas?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can't put spaces in your ID</p>\n\n<p><strong>Update</strong></p>\n\n<p>My guess is that image is on a different server than where you're executing the script. I was able to duplicate your error when running it on my own page, but it worked fine the moment I used an image hosted on the same domain. So it's security related - put the image on your site. Anyone know why this is the case?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html\">specs</a> it says:</p>\n\n<blockquote>\n  <p>Whenever the toDataURL() method of a\n  canvas element whose origin-clean flag\n  is set to false is called, the method\n  must raise a SECURITY_ERR exception.</p>\n</blockquote>\n\n<p>If the image is coming from another server I don't think you can use toDataURL()</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>Seems there is a way to prevent that if image hosting able to provide the following HTTP headers for the image resources and browser supports CORS:</p>\n\n<pre>access-control-allow-origin: *\naccess-control-allow-credentials: true</pre>\n\n<p>It is stated here: <a href=\"http://www.w3.org/TR/cors/#use-cases\">http://www.w3.org/TR/cors/#use-cases</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You <a href=\"http://www.greywyvern.com/code/php/binary2base64\" rel=\"nofollow\">this tool</a> to encode your image as base64 data that you can replace img src value with:</p>\n\n<p><a href=\"http://www.greywyvern.com/code/php/binary2base64\" rel=\"nofollow\">http://www.greywyvern.com/code/php/binary2base64</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>If the image is hosted on a host that sets either of Access-Control-Allow-Origin or Access-Control-Allow-Credentials, you can use Cross Origin Resource Sharing (CORS). <a href=\"https://developer.mozilla.org/En/HTML/Element/Img#Attributes\">See here (the crossorigin attribute) for more details.</a></p>\n\n<p>Your other option is for your server to have an endpoint that fetches and serves an image. (eg. <a href=\"http://your_host/endpoint?url=URL\">http://your_host/endpoint?url=URL</a>)\nThe downside of that approach being latency and theoretically unnecessary fetching.</p>\n\n<p>If there are more alternate solutions, I'd be interested in hearing about them.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Setting cross origin attribute on the image objects worked for me (i was using fabricjs)</p>\n\n<pre><code>    var c = document.createElement(\"img\");\n    c.onload=function(){\n        // add the image to canvas or whatnot\n        c=c.onload=null\n    };\n    c.setAttribute('crossOrigin','anonymous');\n    c.src='http://google.com/cat.png';\n</code></pre>\n\n<p>For those using fabricjs, here's how to patch Image.fromUrl</p>\n\n<pre><code>// patch fabric for cross domain image jazz\nfabric.Image.fromURL=function(d,f,e){\n    var c=fabric.document.createElement(\"img\");\n    c.onload=function(){\n        if(f){f(new fabric.Image(c,e))}\n        c=c.onload=null\n    };\n    c.setAttribute('crossOrigin','anonymous');\n    c.src=d;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I had the same problem and all the images are hosted in the same domain... So, if someone is having the same problem, here is how I solved:</p>\n\n<p>I had two buttons: one to generate the canvas and another one to generate the image from the canvas. It only worked for me, and sorry that I don't know why, when I wrote all the code on the first button. So when I click it generate the canvas and the image at the same time...</p>\n\n<p>I always have this security problem when the codes were on different functions... =/</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are simply drawing some images on a canvas, make sure you are loading the images from the same domain.</p>\n\n<p><em>www.example.com</em> is different to <em>example.com</em> </p>\n\n<p>So make sure your images and the url you have in your address bar are the same, www or not.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was able to make it work using this:</p>\n\n<p>Write this on first line of your <code>.htaccess</code> on your source server</p>\n\n<pre><code>Header add Access-Control-Allow-Origin \"*\"\n</code></pre>\n\n<p>Then when creating an <code>&lt;img&gt;</code> element, do it as follows:</p>\n\n<pre><code>// jQuery\nvar img = $('&lt;img src=\"http://your_server/img.png\" crossOrigin=\"anonymous\"&gt;')[0]\n\n// or pure\nvar img = document.createElement('img');\nimg.src='http://your_server/img.png';\nimg.setAttribute('crossOrigin','anonymous');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Did I not get enough sleep or what? This following code</p>\n\n<pre><code>var frame=document.getElementById(\"viewer\");\nframe.width=100;\nframe.height=100;\n\nvar ctx=frame.getContext(\"2d\");\nvar img=new Image();\nimg.src=\"http://www.ansearch.com/images/interface/item/small/image.png\"\n\nimg.onload=function() {\n    // draw image\n    ctx.drawImage(img, 0, 0)\n\n    // Here's where the error happens:\n    window.open(frame.toDataURL(\"image/png\"));\n}\n</code></pre>\n\n<p>is throwing this error: </p>\n\n<pre><code>SECURITY_ERR: DOM Exception 18\n</code></pre>\n\n<p>There's no way this shouldn't work! Can anyone explain this, please?</p>\n",
            "last_activity_date": 1404040890,
            "question_id": 2390232,
            "score": 61,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "cross-domain",
                "cors"
            ],
            "title": "Why does canvas.toDataURL() throw a security exception?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Since you have asynchronous call the way you are trying to write code is not going to work (because by the moment of <code>return returnValue;</code> in the trackCode return value is not yet defined). Instead you should pass callback into trackPage:</p>\n\n<pre><code>function trackPage(callback) {\n    var elqTracker = new jQuery.elq(459);\n    elqTracker.pageTrack({\n        success: function() {\n            elqTracker.getGUID(function(guid) {\n                alert(guid);\n                // Instead of this: var returnValue = guid;\n                // You should use your callback function\n                callback(guid);\n            });\n        }\n    });\n    return returnValue;\n}\n\ntrackCode(function(guid) {\n    // perform some actions with guid\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>So, this question has been asked a million times over, and I'm sure that everyone (myself included) <a href=\"http://fixingthesejquery.com/#slide42\">tried this once</a>.</p>\n\n<p>It is just the nature of an asynchronous call, you can't use their results as a <code>return</code> value.  Thats why they have you passing in a function that gets the result of the call, they can't <code>return</code> it either!  Also notice that the <code>elqTracker.pageTrack()</code> function call returns IMMEDIATELY, therefore your <code>returnValue</code> is simply <code>undefined</code>.  </p>\n\n<p>Most people (see dfsq's answer) solve this problem by introducing a callback function as a paramater. This method is tried, and true &ndash; however jQuery has <a href=\"http://api.jquery.com/category/deferred-object/\"><code>$.Deferred</code></a>.  This allows you to make your own asynchronous logic return a <code>promise</code> which you can then attach any number of callbacks to:</p>\n\n<pre><code>function trackPage(){\n    var elqTracker = new jQuery.elq( 459 ),\n        dfd = $.Deferred();\n\n    elqTracker.pageTrack({\n        success: function() {\n            elqTracker.getGUID(function( guid ) {\n                dfd.resolve( guid );\n            });\n        }\n    });\n\n    return dfd.promise();\n}\n\n// example use:\ntrackPage().done(function( guid ) {\n    alert( \"Got GUID:\" + guid );\n});\n</code></pre>\n\n<p>Notice now that your <code>trackPage()</code> returns an object that you can attach callbacks to?  You don't have to attach them immediately either.</p>\n\n<pre><code>var pageHit = trackPage().done(function( guid ) {\n    alert( \"Page Hit GUID:\" +guid );\n});\n\n$(\"button\").click(function() {\n    pageHit.done( function( guid ) {\n        alert( \"Clicked on Page GUID:\" + guid );\n    });\n});\n</code></pre>\n\n<p>Also, the jQuery AJAX module always returns promises as well, so the interface for all your AJAX stuff should be very similar if you make your own logic return promises.</p>\n\n<hr>\n\n<p>As a side note: I'd like to point out that your <code>var returnValue</code> was in the wrong \"scope\" anyway.  It needed to be declared in the outer scope of the <code>trackPage</code> function.  Even with this fix, the concept still doesn't work.</p>\n",
                    "is_accepted": true,
                    "score": 30
                }
            ],
            "body": "<p>I have the following jQuery Function.  I'm trying to return the GUID value shown here in the <code>alert();</code> The alert works fine and the value is populated, however I can't seem to assign it to a variable and return its value.</p>\n\n<p>Ultimately I need to access the GUID value in other functions, etc. Everything I've tried only displays as <code>undefined</code>.</p>\n\n<p>I'd like to do something like this:</p>\n\n<pre><code>function trackPage(){\n    var elqTracker = new jQuery.elq(459);\n    elqTracker.pageTrack({\n        success: function() {\n            elqTracker.getGUID(function(guid) {\n                alert(guid);\n                var returnValue = guid;\n            });\n        }\n    });\n    return returnValue;\n}\n\nvar someGuid = trackPage();\n</code></pre>\n",
            "last_activity_date": 1319168419,
            "question_id": 7779697,
            "score": 9,
            "tags": [
                "javascript",
                "jquery",
                "asynchronous"
            ],
            "title": "JavaScript asynchronous return value / assignment with jQuery"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>A closure is a construct in which you reference a variable outside the scope in which it's defined. You usually talk about closures in the context of a function.</p>\n\n<pre><code>var helloFunction;\nvar finished = false;\n\nwhile (!finished) {\n var message = 'Hello, World!';\n helloFunction = function() {\n   alert(message);\n }\n finished = true;\n}\n\nhelloFunction();\n</code></pre>\n\n<p>Here, I define the variable <em>message</em>, and define a function that references <em>message</em>. When I define the function to use <em>message,</em> I am creating a <em>closure.</em> This means <em>helloFunction</em> holds a reference to <em>message</em>, so that I can continue to use <em>message</em>, even outside of the scope (the loop body) where <em>message</em> is defined.</p>\n\n<p><strong>Addendum</strong></p>\n\n<p>The (i) in parenthesis is a function call. What's happening is:</p>\n\n<ol>\n<li>You define some function(num) {}. This is called an <em>anonymous function</em>, because it's defined inline and doesn't have a name.</li>\n<li>function(num) takes an integer argument, and returns a reference to another function, which is defined as alert(num)</li>\n<li>The outer anonymous function is immediately called, with the argument <em>i</em>. So <em>num</em>=*i*. The result of this call is a function which will do alert(i).</li>\n<li>The end result is more or less equivalent to: <code>link.onclick = function() { alert(i); };</code></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've been programming in JavaScript for a long time, and \"closure in a loop\" is a very broad topic.  I assume you are talking about the practice of using <code>(function(param) { return function(){ ... }; })(param);</code> inside of a for loop in order to preserve the \"current value\" of the loop when that inner function later executes...</p>\n\n<h2>The code:</h2>\n\n<pre><code>for(var i=0; i&lt;4; i++) {\n  setTimeout(\n    // argument #1 to setTimeout is a function.\n    // this \"outer function\" is immediately executed, with `i` as its parameter\n    (function(x) {\n      // the \"outer function\" returns an \"inner function\" which now has x=i at the\n      // time the \"outer function\" was called\n      return function() {  \n        console.log(\"i==\"+i+\", x==\"+x);\n      };\n    })(i) // execute the \"closure\" immediately, x=i, returns a \"callback\" function\n  // finishing up arguments to setTimeout\n  , i*100);\n}\n</code></pre>\n\n<h2>Output:</h2>\n\n<pre><code>i==4, x==0\ni==4, x==1\ni==4, x==2\ni==4, x==3\n</code></pre>\n\n<p>As you can see by the output, all of the inner callback functions all point to the same <code>i</code>, however, since each had its own 'closure', the value of <code>x</code> is actually stored as whatever <code>i</code> was at the time of the outer function's execution.  </p>\n\n<p>Commonly when you see this pattern, you would use the same variable name as the parameter and the argument to the outer function: <code>(function(i){ })(i)</code> for instance.  Any code inside that function (even if executed later, like a callback function) is going to refer to <code>i</code> at the time you called the \"outer function\".</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To answer the last part of your questions. The two parenthesis invoke the function as any other functions. Why you do it here is that you want to keep what the variable \"i\" is just at that time. So what it does is, invoke the function, the i is sent as a argument \"num\". Since it's invoke it will remember the value nume in variable links own scoop. </p>\n\n<p>If you did't to this all link click would result in an alert saying \"5\"</p>\n\n<p>John Resig, founder of jQuery, has a really nice online presentation explaining this. <a href=\"http://ejohn.org/apps/learn/\" rel=\"nofollow\">http://ejohn.org/apps/learn/</a></p>\n\n<p>..fredrik</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Well, the \"problem\" with closures in such a case is, that any access to <code>i</code> would reference the same variable. That is because of <code>ECMA-/Javascripts</code> <code>function scope</code> or <code>lexical scope</code>. </p>\n\n<p>So to avoid that every call to <code>alert(i);</code> would display a <code>5</code> (because after the loop finished i === 5), you need to create a new function which invokes itself at runtime. </p>\n\n<p>To achieve this, you need to create a new function, plus you need the extra paranthesis at the end, to <code>invoke the outer function</code> immediately, so <code>link.onclick</code> has now the returned function as reference. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>WARNING: Long(ish) Answer</strong></p>\n\n<p><em>This is copied directly from an article I wrote in an internal company wiki:</em></p>\n\n<p>Question: How to properly use closures in loops?\nQuick answer: Use a function factory.</p>\n\n<pre><code>  for (var i=0;i&lt;10;i++) {\n    document.getElementById(i).onclick = (function(x){\n      return function(){\n        alert(x);\n      }\n    })(i);\n  }\n</code></pre>\n\n<p>or the more easily readable version:</p>\n\n<pre><code>  function generateMyHandler (x) {\n    return function(){\n      alert(x);\n    }\n  }\n\n  for (var i=0;i&lt;10;i++) {\n    document.getElementById(i).onclick = generateMyHandler(i);\n  }\n</code></pre>\n\n<p>This often confuse people who are new to javascript or functional programming. It is a result of misunderstanding what closures are.</p>\n\n<p>A closure does not merely pass the value of a variable or even a reference to the variable. A closure captures the variable itself! The following bit of code illustrates this:</p>\n\n<pre><code>  var message = 'Hello!';\n  document.getElementById('foo').onclick = function(){alert(message)};\n  message = 'Goodbye!';\n</code></pre>\n\n<p>Clicking the element 'foo' will generate an alert box with the message: \"Goodbye!\". Because of this, using a simple closure in a loop will end up with all closures sharing the same variable and that variable will contain the last value assigned to it in the loop. For example:</p>\n\n<pre><code>  for (var i=0;i&lt;10;i++) {\n    document.getElementById('something'+i).onclick = function(){alert(i)};\n  }\n</code></pre>\n\n<p>All elements when clicked will generate an alert box with the number 9. In fact, if we now do <code>i=\"hello\";</code> all elements will now generate a \"hello\" alert! The variable i is shared accross ten functions PLUS the current function/scope/context. Think of it as a sort of private global variable that only the functions involved can see.</p>\n\n<p>What we want is an instance of that variable or at least a simple reference to the variable instead of the variable itself. Fortunately javascript already has a mechanism for passing a reference (for objects) or value (for strings and numbers): function arguments!</p>\n\n<p>When a function is called in javascript the arguments to that function is passed by reference if it is an object or by value if it is a string or number. This is enough to break variable sharing in closures.</p>\n\n<p>So:</p>\n\n<pre><code>  for (var i=0;i&lt;10;i++) {\n    document.getElementById(i).onclick =\n      (function(x){ /* we use this function expression simply as a factory\n                       to return the function we really want to use: */\n\n        /* we want to return a function reference\n           so we write a function expression*/\n        return function(){\n          alert(x); /* x here refers to the argument of the factory function\n                       captured by the 'inner' closure */\n        }\n\n      /* The brace operators (..) evaluates an expression, in this case this\n         function expression which yields a function reference. */\n\n      })(i) /* The function reference generated is then immediately called()\n               where the variable i is passed */\n  }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 38
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example\">Javascript closure inside loops - simple practical example</a>  </p>\n</blockquote>\n\n\n\n<p>I have read a number of explanations about closures and closures inside loops. I have a hard time understanding the concept. I have this code: Is there a way to reduce the code as much as possible so the concept of closure can be made clearer. I am having a hard time understanding the part in which the <code>i</code> is inside two parenthesis. Thanks</p>\n\n<pre><code>function addLinks () {\n    for (var i=0, link; i&lt;5; i++) {\n\n        link = document.createElement(\"a\");\n        link.innerHTML = \"Link \" + i;\n\n\n        link.onclick = function (num) {\n            return function () {\n                alert(num);\n            };\n        }(i);\n        document.body.appendChild(link);\n\n    }\n}\nwindow.onload = addLinks;\n</code></pre>\n",
            "last_activity_date": 1325795610,
            "question_id": 3572480,
            "score": 19,
            "tags": [
                "javascript",
                "loops",
                "scope",
                "closures"
            ],
            "title": "Please explain the use of JavaScript closures in loops"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>All modern browsers support native JSON encoding/decoding (Internet Explorer 8+, Firefox 3.1+, Safari 4+, and Chrome 3+). Basically, <code>JSON.parse(str)</code> will parse the JSON string in <code>str</code> and return an object, and <code>JSON.stringify(obj)</code> will return the JSON representation of the object <code>obj</code>.</p>\n\n<p>More details on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_native_JSON\">MDN article</a>.</p>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>The advantage of using json2.js is that it will only install a parser if the browser does not already have one. You can maintain compatibility with older browsers, but use the native JSON parser (which is more secure and faster) if it is available.</p>\n\n<p>Browsers with Native JSON:</p>\n\n<ul>\n<li>IE8+</li>\n<li>Firefox 3.1+</li>\n<li>Safari 4.0.3+</li>\n<li>Opera 10.5+</li>\n</ul>\n\n<p>G.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>[extending <a href=\"http://stackoverflow.com/users/104184/musicfreak\">musicfreak</a> comment]</p>\n\n<p>If you are using jQuery, use <a href=\"http://api.jquery.com/jQuery.parseJSON/\">parseJSON</a></p>\n\n<pre><code>var obj = jQuery.parseJSON(data)\n</code></pre>\n\n<p>Internally it checks if browser supports .JSON.parse, and (if available) calls native window.JSON.parse.</p>\n\n<p>If not, does parse itself.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>jQuery-1.7.1.js - 555 line...</p>\n\n<pre><code>parseJSON: function( data ) {\n    if ( typeof data !== \"string\" || !data ) {\n        return null;\n    }\n\n    // Make sure leading/trailing whitespace is removed (IE can't handle it)\n    data = jQuery.trim( data );\n\n    // Attempt to parse using the native JSON parser first\n    if ( window.JSON &amp;&amp; window.JSON.parse ) {\n        return window.JSON.parse( data );\n    }\n\n    // Make sure the incoming data is actual JSON\n    // Logic borrowed from http://json.org/json2.js\n    if ( rvalidchars.test( data.replace( rvalidescape, \"@\" )\n        .replace( rvalidtokens, \"]\" )\n        .replace( rvalidbraces, \"\")) ) {\n\n        return ( new Function( \"return \" + data ) )();\n\n    }\n    jQuery.error( \"Invalid JSON: \" + data );\n}\n\n\n\n\n\nrvalidchars = /^[\\],:{}\\s]*$/,\n\nrvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\n\nrvalidtokens = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\n\nrvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>For the benefit of anyone who runs into this thread - for an up-to-date, definitive list of browsers that support the JSON object <a href=\"http://caniuse.com/json\">look here.</a>. A brief generic answer - pretty much all browsers that really matter in the year 2013+.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I have seen references to some browsers natively supporting JSON parsing/serialization of objects safely and efficiently via the <code>window.JSON</code> Object, but details are hard to come by. Can anyone point in the right direction? What are the methods this Object exposes? What browsers is it supported under?</p>\n",
            "last_activity_date": 1401153660,
            "question_id": 891299,
            "score": 67,
            "tags": [
                "javascript",
                "json",
                "browser"
            ],
            "title": "Browser-native JSON support (window.JSON)"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>It allows you to safely concatenate several JS files into one, to serve it quicker as one HTTP request.</p>\n",
                    "is_accepted": true,
                    "score": 56
                },
                {
                    "body": "<p>Its good when you minify js codes. Prevent from unexpected syntax errors.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The best answer was actually given in the question, so I will just write that down here for clarity:</p>\n\n<p>The leading <code>;</code> in front of immediately-invoked function expressions is there to prevent errors when appending the file during concatenation to a file containing an expression not properly terminated with a <code>;</code>.</p>\n\n<p>Best practice is to terminate your expressions with semicolons, but also use the leading semicolon as a safeguard.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<blockquote>\n  <p>In general, if a statement begins with (, [, /, +, or -, there is a chance that it could be\n      interpreted as a continuation of the statement before. Statements beginning with /, +,\n      and - are quite rare in practice, but statements beginning with ( and [ are not uncommon\n      at all, at least in some styles of JavaScript programming. Some programmers like\n      to put a defensive semicolon at the beginning of any such statement so that it will\n      continue to work correctly even if the statement before it is modified and a previously\n      terminating semicolon removed:</p>\n</blockquote>\n\n<pre><code>var x = 0 // Semicolon omitted here\n;[x,x+1,x+2].forEach(console.log) // Defensive ; keeps this statement separate\n</code></pre>\n\n<p>Source:</p>\n\n<p><a href=\"http://rads.stackoverflow.com/amzn/click/0596000480\">Javascript the Definitive Guide 6th edition</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>In several JavaScript libraries I saw this notation at the very beginning:</p>\n\n<pre><code>/**\n * Library XYZ\n */\n;(function () {\n  // ... and so on\n</code></pre>\n\n<p>While I'm perfectly comfortable with the \"immediately executed function\" syntax</p>\n\n<pre><code>(function(){...})()\n</code></pre>\n\n<p>I was wondering what the leading semicolon is for. All I could come up with is, that it is an insurance. That is, if the library is embedded in other, buggy code, it serves as an \"the last statement ends here at the latest\" kind of speed bump.</p>\n\n<p>Has it got any other functionality?</p>\n",
            "last_activity_date": 1405823891,
            "question_id": 1873983,
            "score": 59,
            "tags": [
                "javascript",
                "syntax",
                "semicolon"
            ],
            "title": "What does the leading semicolon in JavaScript libraries do?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>you can use <code>parent</code> to access the parent page.   So to access a function it would be:</p>\n\n<pre><code>var obj = parent.getElementById('foo');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I\u2019m not sure I understand your problem.</p>\n\n<p>You have an original document, let\u2019s call it document 1. We are interested in one of iframe children of his, document 2. This child loaded another page (another iframe?), let\u2019s call it document 3. You run a script in document 3. </p>\n\n<p>You have access to document 2 via parent property of document 3 (and to document 1 via parent.parent, but that is irrelevant). Why cannot you close document 2? </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Try this, in your parent frame set up you IFRAMEs like this:</p>\n\n<pre><code>&lt;iframe id=\"frame1\" src=\"inner.html#frame1\"&gt;&lt;/iframe&gt;\n&lt;iframe id=\"frame2\" src=\"inner.html#frame2\"&gt;&lt;/iframe&gt;\n&lt;iframe id=\"frame3\" src=\"inner.html#frame3\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Note that the id of each frame is passed as an anchor in the src.</p>\n\n<p>then in your inner html you can access the id of the frame it is loaded in via location.hash:</p>\n\n<pre><code>&lt;button onclick=\"alert('I am frame: ' + location.hash.substr(1))\"&gt;Who Am I?&lt;/button&gt;\n</code></pre>\n\n<p>then you can access parent.document.getElementById() to access the iframe tag from inside the iframe</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Also you can set name and ID to equal values</p>\n\n<pre><code>&lt;iframe id=\"frame1\" name=\"frame1\" src=\"any.html\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>so you will be able to use next code inside child page</p>\n\n<pre><code>parent.document.getElementById(window.name);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>Old question, but I just had this same issue and found a way to get the iframe. It's simply a matter of iterating through the parent window's frames[] array and testing each frame's contentWindow against the window in which your code is running. Example:</p>\n\n<pre><code>var arrFrames = parent.document.getElementsByTagName(\"IFRAME\");\nfor (var i = 0; i &lt; arrFrames.length; i++) {\n  if (arrFrames[i].contentWindow === window) alert(\"yay!\");\n}\n</code></pre>\n\n<p>Or, using jQuery:</p>\n\n<pre><code>parent.$(\"iframe\").each(function(iel, el) {\n  if(el.contentWindow === window) alert(\"got it\");\n});\n</code></pre>\n\n<p>This method saves assigning an ID to each iframe, which is good in your case as they are dynamically created. I couldn't find a more direct way, since you can't get the iframe element using window.parent - it goes straight to the parent window element (skipping the iframe). So looping through them seems the only way, unless you want to use IDs.</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Maybe just use </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.parent\n</code></pre>\n\n<p>into your iframe to get the calling frame / windows. If you had multiple calling frame, you can use </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.top\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>// just in case some one is searching for a solution\nfunction get_parent_frame_dom_element(win)\n{\n    win = (win || window);\n    var parentJQuery = window.parent.jQuery;\n    var ifrms = parentJQuery(\"iframe.upload_iframe\");\n    for (var i = 0; i &lt; ifrms.length; i++)\n    {\n        if (ifrms[i].contentDocument === win.document)\n            return ifrms[i];\n    }\n    return null;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Simply call <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.frameElement\"><code>window.frameElement</code></a> from your framed page.\nIf the page is not in a frame then <code>frameElement</code> will be <code>null</code>.</p>\n\n<p>The other way (getting the window element inside a frame is less trivial) but for sake of completeness:</p>\n\n<pre><code>/**\n * @param f, iframe or frame element\n * @return Window object inside the given frame\n * @effect will append f to document.body if f not yet part of the DOM\n * @see Window.frameElement\n * @usage myFrame.document = getFramedWindow(myFrame).document;\n */\nfunction getFramedWindow(f)\n{\n    if(f.parentNode == null)\n        f = document.body.appendChild(f);\n    var w = (f.contentWindow || f.contentDocument);\n    if(w &amp;&amp; w.nodeType &amp;&amp; w.nodeType==9)\n        w = (w.defaultView || w.parentWindow);\n    return w;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>Once id of iframe is set, you can access iframe from inner document as shown below.</p>\n\n<pre><code>var iframe = parent.document.getElementById(frameElement.id);\n</code></pre>\n\n<p>Works well in IE, Chrome and FF.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I would recommend using the <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.postMessage\">postMessage API</a>.</p>\n\n<p>In your iframe, call:</p>\n\n<pre><code>window.parent.postMessage({message: 'Hello world'}, 'http://localhost/');\n</code></pre>\n\n<p>In the page you're including the iframe you can listen for events like this:</p>\n\n<pre><code>window.addEventListener('message', function(event) {\n      if(event.origin === 'http://localhost/')\n      {\n        alert('Received message: ' + event.data.message);\n      }\n      else\n      {\n        alert('Origin not allowed!');\n      }\n\n    }, false);\n</code></pre>\n\n<p>By the way, it is also possible to do calls to other windows, and not only iframes.</p>\n\n<p>Read more about the postMessage API on John Resigs blog <a href=\"http://ejohn.org/blog/postmessage-api-changes/\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                }
            ],
            "body": "<p>Well, I have an IFrame, which calls a same domain page.\nMy problem is that I want to access some information from this parent Iframe from this called page (from javascript). How can I access this Iframe?</p>\n\n<p>Details: There are severals Iframes just like this one, that can have the same page loaded, because I am programming a windows environment. I intend to close this Iframe, that's why I need to know which I should close from inside him. I have an array keeping references to these Iframes</p>\n\n<p>EDIT: There iframes are generated dynamically</p>\n",
            "last_activity_date": 1394823532,
            "question_id": 935127,
            "score": 73,
            "tags": [
                "javascript",
                "iframe"
            ],
            "title": "How to access parent Iframe from javascript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Despite thinking it is \"patently false\", what you say \"seems to be a belief\" is actually correct. The Mozilla documentation for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.close\" rel=\"nofollow\">window.close</a> says</p>\n\n<blockquote>\n  <p>This method is only allowed to be called for windows that were opened by a script using the window.open method. If the window was not opened by a script, the following error appears in the JavaScript Console: Scripts may not close windows that were not opened by script</p>\n</blockquote>\n\n<p>You say that it is \"supposed to still do it\" but I don't think you'll find any reference which supports that, maybe you've misremembered something?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Ordinary javascript cannot close windows willy-nilly.  This is a security feature, introduced a while ago, to stop various malicious exploits and annoyances.</p>\n\n<p>From <a href=\"http://www.w3.org/TR/html51/browsers.html#dom-window-close\">the latest working spec for <code>window.close()</code></a>:</p>\n\n<blockquote>\n  <p>The <code>close()</code> method on Window objects should, if all the following conditions are met, close the browsing context <em>A</em>:</p>\n  \n  <ul>\n  <li>The corresponding browsing context <em>A</em> is <em>script-closable</em>.</li>\n  <li>The browsing context of the incumbent script is familiar with the browsing context <em>A</em>.</li>\n  <li>The browsing context of the incumbent script is allowed to navigate the browsing context <em>A</em>.</li>\n  </ul>\n  \n  <p>A browsing context is <em>script-closable</em> if it is an auxiliary browsing context that <strong>was created by a script</strong> (as opposed to by an action of the user), or if it is a browsing context whose session history contains only one Document.</p>\n</blockquote>\n\n<p>This means, with one small exception, <strong>javascript must not be allowed to close a window that was not opened by that same javascript.</strong></p>\n\n<p>Chrome allows that exception -- which it doesn't apply to userscripts -- however Firefox does not.  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.close#Description\">The Firefox implementation flat out states</a>: </p>\n\n<blockquote>\n  <p><strong>This method is only allowed to be called for windows that were opened by a script using the <code>window.open</code> method.</strong></p>\n</blockquote>\n\n<hr>\n\n<p>If you try to use <code>window.close</code> from a Greasemonkey / Tampermonkey / userscript you will get:<br>\n<strong>Firefox:</strong> The error message, \"<code>Scripts may not close windows that were not opened by script.</code>\"<br>\n<strong>Chrome:</strong> just silently fails.</p>\n\n<p><br></p>\n\n<hr>\n\n<h1>The long-term solution:</h1>\n\n<p>The best way to deal with this is to make a Chrome extension and/or Firefox add-on instead.  These can reliably close the current window.</p>\n\n<p>However, since the security risks, posed by <code>window.close</code>, are much less for a Greasemonkey/Tampermonkey script; Greasemonkey and Tampermonkey could reasonably provide this functionality in their API (essentially packaging the extension work for you).<br>\n<strong>Consider making a feature request.</strong></p>\n\n<p><br></p>\n\n<hr>\n\n<h1>The hacky workarounds:</h1>\n\n<p><strong>Chrome</strong> is currently vulnerable to the \"self redirection\" exploit.  So code like this will <em>currently</em> work in Tampermonkey scripts:</p>\n\n<pre><code>open(location, '_self').close();\n</code></pre>\n\n<p>This is buggy behavior, IMO, and is liable to be blocked by future releases of Chrome, so use this hack with that in mind.</p>\n\n<p><br>\n<strong>Firefox</strong> is secure against that exploit.  So, the only javascript way is to cripple the security settings, one browser at a time.</p>\n\n<p>You can open up <code>about:config</code> and set<br>\n<code>allow_scripts_to_close_windows</code> to <code>true</code>.  </p>\n\n<p>If your script is for personal use, go ahead and do that.  If you ask anyone else to turn that setting on, they would be smart, and justified, to decline with prejudice.  </p>\n\n<p>There currently is no equivalent setting for Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>I am using the method posted by Brock Adams and it even works in Firefox, if it's user initiated.</p>\n\n<pre><code>open(location, '_self').close();\n</code></pre>\n\n<p>I am calling it from a button press so it is <strong>user initiated</strong>, and it is still working fine using Chrome 35-40, Internet Explorer 11, Safari 7-8 and ALSO Firefox 29-35. I tested using version 8.1 of Windows and Mac OS X 10.6, 10.9 &amp; 10.10 if that is different. </p>\n\n<hr>\n\n<p>The complete code:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;input type=\"button\" name=\"Quit\" id=\"Quit\" value=\"Quit\" onclick=\"return quitBox('quit');\" /&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>function quitBox(cmd)\n{   \n    if (cmd=='quit')\n    {\n        open(location, '_self').close();\n    }   \n    return false;   \n}\n</code></pre>\n\n<p>Try this test page: (Now tested in Chrome 40 and Firefox 35) </p>\n\n<p><a href=\"http://browserstrangeness.bitbucket.org/window_close_tester.htm\" rel=\"nofollow\">http://browserstrangeness.bitbucket.org/window_close_tester.htm</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<h3>Chrome Fixed the security issues on version 36.0.1985.125</h3>\n\n<p>Chrome 36.0.1985.125 WEDNESDAY, JULY 16, 2014\n<a href=\"http://googlechromereleases.blogspot.com/2014/07/stable-channel-update.html\">Release note</a></p>\n\n<p>From my observation, this update fixed the issue on using <code>window.close()</code> to close the popup window. You will see this in the console when it fail, \"Scripts may close only the windows that were opened by it.\". That means <strong>The hacky workarounds</strong> (Brock Adams's answer) <strong>may not work</strong> in the latest release.</p>\n\n<p>So, in the previous Chrome released builds, the below code block may worked but not with this update.</p>\n\n<pre><code>window.open('', '_self', '');\nwindow.close();\n</code></pre>\n\n<p>For this update, you have to update your code accordingly to close the popup window. One of the solution is to grab the popup window id and use </p>\n\n<pre><code>chrome.windows.remove(integer windowId, function callback)\n</code></pre>\n\n<p>method to remove it. Chrome extension windows API can be found at <a href=\"https://developer.chrome.com/extensions/windows\">chrome.windows</a>. </p>\n\n<p>Actually my chrome extension <a href=\"https://chrome.google.com/webstore/detail/markview/iaddkimmopgchbbnmfmdcophmlnghkim\">MarkView</a> was facing this issue and I had to update my code to make it work for this Chrome Update. By the way, MarkView is tool to read and write Awesome Markdown Files, it provides features including Content Outline, Sortable Tables and code block syntax highlight with line number.</p>\n\n<p>I also created <a href=\"http://www.shaneweng.com/blog/Close-Popup-Window-in-Chrome/\">this post</a>, any comments are welcome.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Many people are still trying to find a way to close the Chrome browser using javascript. <strong>The following method only works when you use Chrome as APP launcher - kiosk for example!</strong></p>\n\n<p>I have tested the following:</p>\n\n<p>I'm using the following extension: <a href=\"https://chrome.google.com/webstore/detail/close-kiosk/dfbjahmenldfpkokepmfmkjkhdjelmkb\" rel=\"nofollow\">Close Kiosk</a></p>\n\n<p>I'm following the usage instructions and it seems to work just fine (make sure you clear the cache while doing the tests). The javascript I use is (attached to click event):</p>\n\n<pre><code>window.location.href = '/closekiosk';\n</code></pre>\n\n<p>I hope that helps somebody, as it's the only working solution I have found.</p>\n\n<p>Note: It seems the extension runs in background and adds a Chrome tray icon. It has the following option checked: \"Let Chrome run in background\" (or similar text). You may need to play with it, until it work for you. I unchecked it and now it works just fine!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This might be old, but let's answer it. </p>\n\n<p>I use <strong>top.close()</strong> to close a tab. <strong>window.close()</strong> or other open...close didn't work for me.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found a new way that works for me perfetly</p>\n\n<pre><code>var win = window.open(\"about:blank\", \"_self\");\nwin.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The issue is that when I invoke <code>window.close</code> or <code>self.close</code> it doesn't close the window. Now there seems to be a belief that in Chrome you can't close by script any window that is not script created. That is patently false but regardless it is supposed to still do it, even if it requires to pop up an alert to confirm. These are not happening.</p>\n\n<p>So does anyone have real, functional and proven method of closing a window using something like <code>javascript:window.close</code> or <code>javascript:self.close</code> that actually does what is expected and something that happens just fine in every browser that is NOT Chrome based? Any suggestions would be greatly appreciated and I am looking for Javascript specific solution, nothing JQuery or third party implementation. </p>\n",
            "last_activity_date": 1423834588,
            "question_id": 19761241,
            "score": 24,
            "tags": [
                "javascript",
                "google-chrome",
                "greasemonkey",
                "tampermonkey"
            ],
            "title": "window.close and self.close do not close the window in Chrome"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>The comma operator evaluates both of\n  its operands (from left to right) and\n  returns the value of the second\n  operand.</p>\n</blockquote>\n\n<p><em>Source:</em> <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special_Operators/Comma_Operator\">https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special_Operators/Comma_Operator</a></p>\n\n<p>For example, the expression <code>1,2,3,4,5</code> evaluates to <code>5</code>. Obviously the comma operator is useful only for operations with side-effects.</p>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>Have a look <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special_Operators/Comma_Operator\">here</a> - the comma stands for multiple expressions / statements. For example in your code you could use a line like this:</p>\n\n<pre><code>var a=0, b=0, c=0;\n</code></pre>\n\n<p>This would declare all three variables without writing:</p>\n\n<pre><code>var a=0;\nvar b=0;\nvar c=0;\n</code></pre>\n\n<p>Hope that helps.</p>\n\n<p>Regards, Daniel</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Some more alerts to consider:</p>\n\n<pre><code>alert((0, 9));\nalert((9, 0));\nalert((\"foo\", \"bar\"));\n</code></pre>\n\n<p>Also, have a look at the <a href=\"http://getfirebug.com/wiki/index.php/Console_Panel\" rel=\"nofollow\">Firebug console</a> if you want to try this out interactively.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>If I use:</p>\n\n<pre><code>1.09 * 1; // returns \"1.09\"\n</code></pre>\n\n<p>But if I use:</p>\n\n<pre><code>1,09 * 1; // returns \"9\"\n</code></pre>\n\n<p>I know that 1,09 isn't a number.</p>\n\n<p>What does the comma do in the last piece of code?</p>\n\n<h2>More Examples</h2>\n\n<pre><code>if (0,9) alert(\"ok\"); // alert\nif (9,0) alert(\"ok\"); // don't alert\n</code></pre>\n\n<hr>\n\n<pre><code>alert(1); alert(2); alert(3); // 3 alerts\nalert(1), alert(2), alert(3); // 3 alerts too\n</code></pre>\n\n<hr>\n\n<pre><code>alert(\"2\",\n    foo = function (param) {\n        alert(param)\n    },\n    foo('1')\n)\nfoo('3'); // alerts 1, 2 and 3\n</code></pre>\n",
            "last_activity_date": 1396153793,
            "question_id": 3561043,
            "score": 35,
            "tags": [
                "javascript"
            ],
            "title": "What does a comma do?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It's because have to check for <code>hasOwnProperty</code>:</p>\n\n<pre><code>for (var prop in arr) { \n  if (arr.hasOwnProperty(prop)) { \n    console.log(prop) \n  }\n}\n</code></pre>\n\n<p>Now this logs 1, 2, 3.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Depending on your restrictions:</p>\n\n<pre><code>// In EcmaScript 5 specs and browsers that support it you can use the Object.defineProperty\n// to make it not enumerable set the enumerable property to false\nObject.defineProperty(Array.prototype, 'find', {\n    enumerable: false,  // this will make it not iterable\n    get: function(testFun) {\n       // code to find element in array\n    };\n});\n</code></pre>\n\n<p>Read more about <strong>Object.defineProperty</strong> here <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It's quite easy: Don't use <a href=\"http://stackoverflow.com/q/500504/1048572\">for-in loops with Arrays</a>. Blame everybody else who does so - <a href=\"http://stackoverflow.com/q/11507509/1048572\">here is a nice snippet</a> to tell them during development.</p>\n\n<p>Of course, if one does an enumeration in a generic function and doesn't know whether he gets an array, a plain object or an object with a custom prototype, you can use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>hasOwnProperty</code></a> like this:</p>\n\n<pre><code>for (var prop in anyObj )\n    if (Object.prototype.hasOwnProperty.call(anyObj, prop))\n        // do something\n</code></pre>\n\n<p>Notice the explicit use of <code>Object.prototype</code> to get the function - there might be objects that overwrite it (especially in data-maps, the value might not even be a function), objects that <a href=\"http://stackoverflow.com/q/8157700/1048572\">do not support it</a> or objects that do not inherit from Object.prototype at all. See also <a href=\"http://stackoverflow.com/a/13240607/1048572\">here</a>.</p>\n\n<p>Yet, only a script author who is aware of the problem would filter all his for-in-loops - and some only do it because <a href=\"http://stackoverflow.com/q/1107681/1048572\">it gets recommended</a> - and does it mostly wrong, he should have used a for-loop array iteration instead. But our problem are those authors who do not know of it.</p>\n\n<p>An interesting, but Mozilla-only approach would be overwriting the behavior of enumerations on arrays via <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7#Iterators\"><code>__iterate__</code></a>, as <a href=\"http://stackoverflow.com/a/1809873/1048572\">demonstrated here</a>.</p>\n\n<p>Fortunately, EcmaScript 5.1 allows us setting properties to be <em>non-enumerable</em>. Of course, this is not supported in older browsers, but why bother? We'd need to use <a href=\"https://github.com/kriskowal/es5-shim\">es5-shims</a> anyway for all the cool higher-order array stuff :-) Use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>defineProperty</code></a> like this:</p>\n\n<pre><code>Object.defineProperty(Array.prototype, \"find\", {\n    enumerable: false,\n    writable: true,\n    value: function(testFun) {\n        // code to find element in array\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 9
                }
            ],
            "body": "<p>I want to define helper methods on the Array.prototype and Object.prototype. My current plan is to do something like:</p>\n\n<pre><code>Array.prototype.find = function(testFun) {\n   // code to find element in array\n};\n</code></pre>\n\n<p>So that I can do this:</p>\n\n<pre><code>var arr = [1, 2, 3];\nvar found = arr.find(function(el) { return el &gt; 2; });\n</code></pre>\n\n<p>It works find but if I loop over the array in a for in loop the methods appear as values:</p>\n\n<pre><code>for (var prop in arr) { console.log(prop); }\n// prints out:\n// 1\n// 2\n// 3\n// find\n</code></pre>\n\n<p>This will screw up anybody else relying on the for in to just show values (especially on Objects). The later versions of javascript have .map and .filter functions built into arrays but those don't show up on for in loops. How can I create more methods like that which won't show up in a for in loop?</p>\n",
            "last_activity_date": 1353353515,
            "question_id": 13296340,
            "score": 3,
            "tags": [
                "javascript",
                "function"
            ],
            "title": "How to define method in javascript on Array.prototype and Object.prototype so that it doesn&#39;t appear in for in loop"
        },
        {
            "answer_count": 30,
            "answers": [
                {
                    "body": "<p>If you just want to check whether there's any value, you can do </p>\n\n<pre><code>if (strValue) {\n    //do something\n}\n</code></pre>\n\n<p>If you need to check specifically for an empty string over null, I would think checking against <code>\"\"</code> is your best bet, using <a href=\"http://www.webreference.com/js/column26/stricteq.html\">the <code>===</code> operator</a> (so that you know that it is, in fact, a string you're comparing against).</p>\n",
                    "is_accepted": true,
                    "score": 1293
                },
                {
                    "body": "<p>I would not worry too much about the most <strong>efficient</strong> method. Use what is most clear to your intention. For me that's usually <code>strVar == \"\"</code>.</p>\n\n<p>EDIT: per comment from <a href=\"http://stackoverflow.com/users/20310/constantin\">Constantin</a>, if strVar could some how end up containing an integer 0 value, then that would indeed be one of those intention-clarifying situations.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<pre><code>var s; // undefined\nvar s = \"\"; // \"\"\ns.length // 0\n</code></pre>\n\n<p>There's nothing representing an empty string in JavaScript. Do a check against either <code>length</code> (if you know that the var will always be a string) or against <code>\"\"</code></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The closest thing you can get to str.Empty (with the precondition that str is a String) is:</p>\n\n<pre><code>if (!str.length) { ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>If you need to make sure that the string is not just a bunch of empty spaces (I'm assuming this is for form validation) you need to do a replace on the spaces.</p>\n\n<pre><code>if(str.replace(/\\s/g,\"\") == \"\"){\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>I usually use something like:</p>\n\n<pre><code>if (str == \"\") {\n     //Do Something\n}\nelse {\n     //Do Something Else\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>you could also go with regexps:</p>\n\n<pre><code>if((/^\\s*$/).test(str)) { }\n</code></pre>\n\n<p>Checks for strings that are either empty or filled with whitespace.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I use :</p>\n\n<pre><code>function empty(e) {\n                    switch(e) {\n                        case \"\":\n                        case 0:\n                        case \"0\":\n                        case null:\n                        case false:\n                        case typeof this == \"undefined\":\n                            return true;\n                                default : return false;\n                    }\n                }\n\nempty(null) // true\nempty(0) // true\nempty(7) // false\nempty(\"\") // true\nempty((function() { return \"\" }) ) // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>For checking if a string is empty, null or undefined I use:</p>\n\n<pre><code>function isEmpty(str) {\n    return (!str || 0 === str.length);\n}\n</code></pre>\n\n<p>For checking if a string is blank, null or undefined I use:</p>\n\n<pre><code>function isBlank(str) {\n    return (!str || /^\\s*$/.test(str));\n}\n</code></pre>\n\n<p>For checking if a string is blank or contains only white-space:</p>\n\n<pre><code>String.prototype.isEmpty = function() {\n    return (this.length === 0 || !this.trim());\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 369
                },
                {
                    "body": "<p>str.value.length == 0</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>function tell()\n{\nvar pass = document.getElementById('pasword').value;\nvar plen = pass.length;\n\nnow you can check if your string is empty as like \nif(plen==0)\n{\n         alert('empty');\n}\nelse\n{\n   alert('you entered something');\n}\n}\n\n\n&lt;input type='text' id='pasword' /&gt;\n</code></pre>\n\n<p>this is also a generic way to check if field is empty.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>All the above are good but this will be even better. use <code>!!</code>(<em>not not</em>) operator. </p>\n\n<pre><code>if(!!str){\nsome code here;\n}\n</code></pre>\n\n<p>or use type casting:</p>\n\n<pre><code>if(Boolean(str)){\n    codes here;\n}\n</code></pre>\n\n<p>Both do the same function, type cast the variable to boolean, where <code>str</code> is a variable.<br>\nReturns <code>false</code> for <code>null,undefined,0,000,\"\",false</code>.<br>\nReturns <code>true</code> for string \"0\" and whitespace \" \".</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>I use a combination, fastest checks are first.</p>\n\n<pre><code>function isBlank(pString){\n    if (!pString || pString.length == 0) {\n        return true;\n    }\n    // checks for a non-white space character \n    // which I think [citation needed] is faster \n    // than removing all the whitespace and checking \n    // against an empty string\n    return !/[^\\s]+/.test(pString);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Ignoring whitespace strings, you could use this to check for null, empty and undefined :</p>\n\n<pre><code>var obj = {};\n(!!obj.str) //returns false\n\nobj.str = \"\";\n(!!obj.str) //returns false\n\nobj.str = null;\n(!!obj.str) //returns false\n</code></pre>\n\n<p>Concise and it works for undefined properties, although it's not the most readable.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I have not noticed an answer that takes into account the possibility of null characters in a string. For example, if we have a null character string:</p>\n\n<pre><code>var y = \"\\0\"; // an empty string, but has a null character\n(y === \"\") // false, testing against an empty string does not work\n(y.length === 0) // false\n(y) // true, this is also not expected\n(y.match(/^[\\s]*$/)) // false, again not wanted\n</code></pre>\n\n<p>To test its nullness one could do something like this:</p>\n\n<pre><code>String.prototype.isNull = function(){ \n  return Boolean(this.match(/^[\\0]*$/)); \n}\n...\n\"\\0\".isNull() // true\n</code></pre>\n\n<p>It works on a null string, and on an empty string and it is accessible for all strings. In addition, it could be expanded to contain other JavaScript empty or whitespace characters (i.e. nonbreaking space, byte order mark, line/paragraph separator, etc.).</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>It's a good idea too to check that you are not trying to pass an undefined term.</p>\n\n<pre><code>function TestMe() {\n  if((typeof str != 'undefined') &amp;&amp; str) {\n    alert(str);\n  }\n };\n\nTestMe();\n\nvar str = 'hello';\n\nTestMe();\n</code></pre>\n\n<p>I usually run into the case where I want to do something when a string attribute for an object instance is not empty.  Which is fine, except that attribute is not always present.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try:</p>\n\n<pre><code>if (str &amp;&amp; str.trim().length) {  \n    //...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>An alternative way, but I believe bdukes's answer is best.</p>\n\n<pre><code>   var myString = 'hello'; \n    if(myString.charAt(0)){\n    alert('no empty');\n    }\n    alert('empty');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>All these answers are nice.  </p>\n\n<p>But I cannot be sure that variable is a string, doesn't contains only spaces (this is important for me), and can contain '0' (string).   </p>\n\n<p>My version:</p>\n\n<pre><code>function empty(str){\n    return !str || !/[^\\s]+/.test(str);\n}\n\nempty(null); // true\nempty(0); // true\nempty(7); // false\nempty(\"\"); // true\nempty(\"0\"); // false\nempty(\"  \"); // true\n</code></pre>\n\n<p>Sample on <a href=\"http://jsfiddle.net/YZfGs/\">jsfiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I did some research what happens if you pass a non-string and non-empty/null value to a tester function. As many knows, (0 == \"\") is true in javascript, but since 0 is a value and not empty or null, you may want to test for it.</p>\n\n<p>The following two functions return true only for undefined, null, empty/whitespace values and false for everything else, such as numbers, boolean, objects, expressions etc.</p>\n\n<pre><code>function IsNullOrEmpty(value)\n{\n    return (value == null || value === \"\");\n}\nfunction IsNullOrWhiteSpace(value)\n{\n    return (value == null || !/\\S/.test(value));\n}\n</code></pre>\n\n<p>More complicated examples exists, but these are simple and give consistent results. There is no need to test for undefined, since it's included in (value == null) check. You may also mimic C# behaviour by adding them to String like this:</p>\n\n<pre><code>String.IsNullOrEmpty = function (value) { ... }\n</code></pre>\n\n<p>You do not want to put it in Strings prototype, because if the instance of the String-class is null, it will error:</p>\n\n<pre><code>String.prototype.IsNullOrEmpty = function (value) { ... }\nvar myvar = null;\nif (1 == 2) { myvar = \"OK\"; } // could be set\nmyvar.IsNullOrEmpty(); // throws error\n</code></pre>\n\n<p>I tested with the following value array. You can loop it through to test your functions if in doubt.</p>\n\n<pre><code>// Helper items\nvar MyClass = function (b) { this.a = \"Hello World!\"; this.b = b; };\nMyClass.prototype.hello = function () { if (this.b == null) { alert(this.a); } else { alert(this.b); } };\nvar z;\nvar arr = [\n// 0: Explanation for printing, 1: actual value\n    ['undefined', undefined],\n    ['(var) z', z],\n    ['null', null],\n    ['empty', ''],\n    ['space', ' '],\n    ['tab', '\\t'],\n    ['newline', '\\n'],\n    ['carriage return', '\\r'],\n    ['\"\\\\r\\\\n\"', '\\r\\n'],\n    ['\"\\\\n\\\\r\"', '\\n\\r'],\n    ['\" \\\\t \\\\n \"', ' \\t \\n '],\n    ['\" txt \\\\t test \\\\n\"', ' txt \\t test \\n'],\n    ['\"txt\"', \"txt\"],\n    ['\"undefined\"', 'undefined'],\n    ['\"null\"', 'null'],\n    ['\"0\"', '0'],\n    ['\"1\"', '1'],\n    ['\"1.5\"', '1.5'],\n    ['\"1,5\"', '1,5'], // valid number in some locales, not in js\n    ['comma', ','],\n    ['dot', '.'],\n    ['\".5\"', '.5'],\n    ['0', 0],\n    ['0.0', 0.0],\n    ['1', 1],\n    ['1.5', 1.5],\n    ['NaN', NaN],\n    ['/\\S/', /\\S/],\n    ['true', true],\n    ['false', false],\n    ['function, returns true', function () { return true; } ],\n    ['function, returns false', function () { return false; } ],\n    ['function, returns null', function () { return null; } ],\n    ['function, returns string', function () { return \"test\"; } ],\n    ['function, returns undefined', function () { } ],\n    ['MyClass', MyClass],\n    ['new MyClass', new MyClass()],\n    ['empty object', {}],\n    ['non-empty object', { a: \"a\", match: \"bogus\", test: \"bogus\"}],\n    ['object with toString: string', { a: \"a\", match: \"bogus\", test: \"bogus\", toString: function () { return \"test\"; } }],\n    ['object with toString: null', { a: \"a\", match: \"bogus\", test: \"bogus\", toString: function () { return null; } }]\n];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Also, in case you consider a whitespace filled string as \"empty\".\nYou can test it with this Regex:</p>\n\n<pre><code>!/\\S/.test(string); // Returns true if blank.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I prefer to use not blank test instead of blank </p>\n\n<pre><code>function isNotBlank(str) {\n   return (str &amp;&amp; /^\\s*$/.test(str));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Don't assume that the variable you check is a string. Don't assume that if this var has a length, then it's a string.</p>\n\n<p>The thing is: think carefully about what your app must do and can accept. Build something robust.</p>\n\n<p>If your method / function should only process a non empty string then test if the argument is a non empty string and don't do some 'trick'.</p>\n\n<p>As an example of something that will explode if you follow some advices here not carefully.</p>\n\n<pre><code>\nvar getLastChar = function (str) {\n if (str.length > 0)\n   return str.charAt(str.length - 1)\n}\n\ngetLastChar('hello')\n=> \"o\"\n\ngetLastChar([0,1,2,3])\n=> TypeError: Object [object Array] has no method 'charAt'\n</code>\n</pre>\n\n<p>So, I'd stick with</p>\n\n<pre><code>\nif (myVar === '')\n  ...\n</code>\n</pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I usually use some thing like this,</p>\n\n<pre><code>if (!str.length) {\n//do some thing\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here are a few methods:</p>\n\n<pre><code>//when undefined\nif (typeof str == 'undefined')\n\n//when false\nif (str == false) //same as if(!str)\n\n//when defined, but empty\nif (\n    (str.length == 0)\n                ||\n    (str == \"\")\n                ||\n    (str.replace(/\\s/g,\"\") == \"\")\n                ||\n    (!/[^\\s]/.test(str))\n                ||\n    (/^\\s*$/.test(str))\n   )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>var x =\"  \";\nvar patt = /^\\s*$/g;\nisBlank = patt.test(x);\nalert(isBlank);// is it blank or not??\nx=x.replace(/\\s*/g,\"\");// another way of replacing blanks with \"\"\nif (x===\"\"){alert(\"ya it is blank\")}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You should always check for the type too, since JavaScript is a duck typed language, so you may not know when and how the data changed in the middle of the process. So, here's the better solution:</p>\n\n<pre><code>var str = \"\";\nif (str === \"\") {\n    //...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>To check if it is empty:\n\n    var str = \"Hello World!\";\n    var n = str.length;\n    if(n==null){alert(\"THE STRING str is EMPTY\");}\n</code></pre>\n\n<p>To check if it isn't empty</p>\n\n<pre><code>var str = \"Hello World!\";\nvar n = str.length;\nif(n!=null){alert(\"THE STRING str isn'tEMPTY\");}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If one needs to detect not only empty but also blank strings, I'll add to Goral's answer:</p>\n\n<pre><code>function isEmpty(s){\n    return !s.length;    \n}\n\nfunction isBlank(s){\n    return isEmpty(s.trim());    \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<ol>\n<li>check that var a; exist</li>\n<li><p>trim out the false spaces in the value, then test for emptiness</p>\n\n<p>if ((a)&amp;&amp;(a.trim()!='')) {</p>\n\n<p>// if variable a is not empty do this\n}</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I saw this <a href=\"http://stackoverflow.com/questions/10230/checking-for-string-contents-string-length-vs-empty-string\">thread</a>, but I didn't see a JavaScript specific example. Is there a simple <code>string.Empty</code> in JavaScript, or is it just checking for <code>\"\"</code>?</p>\n",
            "last_activity_date": 1424792857,
            "question_id": 154059,
            "score": 930,
            "tags": [
                "javascript",
                "null",
                "is-empty"
            ],
            "title": "How do you check for an empty string in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It forces the parser to treat the part following the <code>+</code> as an expression. This is usually used for functions that are invoked immediately, e.g.:</p>\n\n<pre><code>+function() { console.log(\"Foo!\"); }();\n</code></pre>\n\n<p>Without the <code>+</code> there, if the parser is in a state where it's expecting a statement (which can be an expression or several non-expression statements), the word <code>function</code> looks like the beginning of a function <em>declaration</em> rather than a function <em>expression</em> and so the <code>()</code> following it (the ones at the end of the line above) would be a syntax error (as would the absense of a name, in that example). <em>With</em> the <code>+</code>, it makes it a function expression, which means the name is optional and which results in a reference to the function, which can be invoked, so the parens are valid.</p>\n\n<p><code>+</code> is just one of the options. It can also be <code>-</code>, <code>!</code>, <code>~</code>, or just about any other unary operator. Alternately, you can use parens (this is more common, but neither more nor less correct syntactically):</p>\n\n<pre><code>(function() { console.log(\"Foo!\"); })();\n// or\n(function() { console.log(\"Foo!\"); }());\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 654
                },
                {
                    "body": "<p>Subsidiary to @TJCrowder's answer, <code>+</code> is usually used to force numerical casting of a value <a href=\"http://stackoverflow.com/questions/5450076/whats-the-significant-use-of-unary-plus-and-minus-operators\">as this SO answer explains</a>. In this instance it is called the 'unary plus operator' (for ease of googling).</p>\n\n<pre><code>var num = +variant;\n</code></pre>\n\n<p>So in front of a function it can be a way to force the function's result to be interpreted as a number. I doubt it happens yet, but theoretically the JIT could use that to compile the function as a numerical-only function etc. However, to prevent the unary plus being a concatenation when used in a larger expression, you would need parentheses:</p>\n\n<pre><code>blah + (+(function(){ var scope; return \"4\"; })());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>So the short answer is that it prevents a syntax error, by using the function results in one way or another.</p>\n\n<p>You can also instruct the engine that you're not even interested in the return value by using the <code>void</code> operator:</p>\n\n<pre><code>void function() { console.log(\"Foo!\"); }();\n</code></pre>\n\n<p>Of course, putting braces around the whole thing also serves that purpose.</p>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>I've been looking on info about self-invoking functions, and somewhere I stumbled on this notation:</p>\n\n<pre><code>+function(){}\n</code></pre>\n\n<p>Can someone explain to me what the <code>+</code> sign in front of the function means/does?</p>\n",
            "last_activity_date": 1353084329,
            "question_id": 13341698,
            "score": 427,
            "tags": [
                "javascript"
            ],
            "title": "JavaScript plus sign in front of function name"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>You can use this : <a href=\"http://jsbeautifier.org/\">http://jsbeautifier.org/</a>\nBut it depends on the minify method you are using, this one only formats the code, it doesn't change variable names, nor uncompress base62 encoding.</p>\n\n<p>edit: in fact it can unpack \"packed\" scripts (packed with Dean Edward's packer : <a href=\"http://dean.edwards.name/packer/\">http://dean.edwards.name/packer/</a>)</p>\n",
                    "is_accepted": true,
                    "score": 449
                },
                {
                    "body": "<p>Can't you just use a javascript formatter (<a href=\"http://javascript.about.com/library/blformat.htm\">http://javascript.about.com/library/blformat.htm</a>) ?</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Got it! <a href=\"http://jsbeautifier.org/\">JSBeautifier</a> does exactly this, and you even have options for the auto-formatting.</p>\n",
                    "is_accepted": false,
                    "score": 55
                },
                {
                    "body": "<p>As an alternative (since I didn't know about jsbeautifier.org until now), I have used a bookmarklet that reenabled the decode button in Dean Edward's Packer.</p>\n\n<p>I found the instructions and bookmarklet <a href=\"http://yaisb.blogspot.com/2006/10/defeating-dean-edwards-javascript.html\">here</a>.</p>\n\n<p>here is the bookmarklet (in case the site is down)</p>\n\n<pre><code>javascript:for%20(i=0;i&lt;document.forms.length;++i)%20{for(j=0;j&lt;document.forms[i].elements.length;++j){document.forms[i].elements[j].removeAttribute(%22readonly%22);document.forms[i].elements[j].removeAttribute(%22disabled%22);}}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If one is in JS possibility of using Firefox is more. And if its Firefox add on is for rescue. Following one is particularly useful.</p>\n\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/phoenix/\" rel=\"nofollow\">https://addons.mozilla.org/en-US/firefox/addon/phoenix/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm not sure if you need source code. There is a free online JavaScript formatter at <a href=\"http://www.blackbeltcoder.com/Resources/JSFormatter.aspx\">http://www.blackbeltcoder.com/Resources/JSFormatter.aspx</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Most of the IDEs also offer auto-formatting features. For example <strong>in NetBeans, just press CTRL+K</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Chrome developer tools has this feature built-in. Bring up the developer tools (pressing F12 is one way), in the Sources tab, the bottom left bar has a set of icons. The \"{}\" icon is \"Pretty print\" and does this conversion on demand.</p>\n\n<p>UPDATE: IE9 \"F12 developer tools\" also has a \"Format JavaScript\" feature in the Script tab under the Tools icon there. (<em>see</em> Tip #4 in <a href=\"http://blogs.msdn.com/b/cdndevs/archive/2011/10/18/f12-the-best-kept-web-debugging-secret.aspx\">F12 The best kept web debugging secret</a>)</p>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<p>In Firefox, SpiderMonkey and Rhino you can wrap any code into an anonymous function and call its <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/toSource\"><code>toSource</code></a> method, which will give you a nicely formatted source of the function.</p>\n\n<p><code>toSource</code> also strips comments.</p>\n\n<p><em>E. g.</em>:</p>\n\n<pre><code>(function () { /* Say hello. */ var x = 'Hello!'; print(x); }).toSource()\n</code></pre>\n\n<p>Will be converted to a string:</p>\n\n<pre><code>function () {\n    var x = \"Hello!\";\n    print(x);\n}\n</code></pre>\n\n<p><em>P. S.</em>: It's not an \"online tool\", but all questions about general beautifying techniques are closed as duplicates of this one.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If you have a Mac and TextMate - An easy alternative for formatting Javascript is:</p>\n\n<ol>\n<li>Open the file with Textmate.</li>\n<li>Click on > Bundles > JavaScript > Reformat Document</li>\n<li>Crack open a beer.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Try this one, with code coloration:</p>\n\n<p><a href=\"http://labs.swelen.com/tools/javascript/beauty.html\">http://labs.swelen.com/tools/javascript/beauty.html</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>click on these link for JS deminification. That will install on FF as extension that help you in debugging js at runtime.</p>\n\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/javascript-deminifier/eula/141018?src=dp-btn-primary\" rel=\"nofollow\">https://addons.mozilla.org/en-US/firefox/addon/javascript-deminifier/eula/141018?src=dp-btn-primary</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Similar to <a href=\"http://stackoverflow.com/users/122183/stone\">Stone</a>'s answer, but for Windows/.NET developers:</p>\n\n<p>If you have Visual Studio and ReSharper - An easy alternative for formatting Javascript is:</p>\n\n<ul>\n<li>Open the file with Visual Studio;</li>\n<li>Click on ReSharper > Tools > Cleanup Code (Ctrl+E, C);</li>\n<li>Select \"Default: Reformat code\", and click OK;</li>\n<li>Crack open a beer.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><strong><a href=\"http://prettydiff.com/?m=beautify\" rel=\"nofollow\">Pretty Diff</a></strong> will beautify (pretty print) JavaScript in a way that conforms to <a href=\"http://jslint.com/\" rel=\"nofollow\">JSLint</a> and <a href=\"http://jshint.com/\" rel=\"nofollow\">JSHint</a> white space algorithms.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://unminify.appspot.com/\" rel=\"nofollow\">http://unminify.appspot.com/</a>\nGreat tools for unminify javascript and json </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Despite its miles-away-from-being-pretty interface, <a href=\"http://www.jspretty.com/\" rel=\"nofollow\">JSPretty</a> is a good, free and online tool for making javascript source codes human-readable. You can enforce your preferred type of indentation and it can also detect obfuscation.  </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Wasn't really happy with the output of jsbeautifier.org for what I was putting in, so I did some more searching and found this site: <a href=\"http://www.centralinternet.com.br/javascript-beautifier\" rel=\"nofollow\">http://www.centralinternet.com.br/javascript-beautifier</a></p>\n\n<p>Worked extremely well for me.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Are there any command line scripts and/or online tools that can reverse the effects of minification similar to how Tidy can clean up horrific HTML?</p>\n\n<p>(I'm specifically looking to unminify a minified JavaScript file, so variable renaming might still be an issue.)</p>\n",
            "last_activity_date": 1384806099,
            "question_id": 822119,
            "score": 345,
            "tags": [
                "javascript",
                "code-formatting",
                "minify",
                "decompression",
                "unminify"
            ],
            "title": "Tool to Unminify / Decompress JavaScript"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>It's looking for an element with id <code>list</code> which has a property <code>value</code> equal to 2. What you want is the <code>option</code> child of the <code>list</code>.</p>\n\n<pre><code>$(\"#list option[value='2']\").text()\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 702
                },
                {
                    "body": "<p>Try the following:</p>\n\n<pre><code>$(\"#list option[value=2]\").text();\n</code></pre>\n\n<p>The reason why your original snippet wasn't working is because your <code>OPTION</code> tags are children to your <code>SELECT</code> tag, which has the <code>id</code> <code>list</code>.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>If you'd like to get the option with a value of 2, use</p>\n\n<pre><code>$(\"#list option[value='2']\").text();\n</code></pre>\n\n<hr>\n\n<p>If you'd like to get whichever option is currently selected, use</p>\n\n<pre><code>$(\"#list option:selected\").text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 928
                },
                {
                    "body": "<pre><code>$(\"#list [value='2']\").text();\n</code></pre>\n\n<p>leave a space after the id selector.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>$(\"#list option:selected\").each(function() {\n   alert($(this).text());\n});  \n</code></pre>\n\n<p>for multiple selected value in the <code>#list</code> element.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I wanted to get the selected label. This worked for me in jQuery 1.5.1.</p>\n\n<pre><code>$(\"#list :selected\").text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Based on the original HTML posted by Paolo I came up with the following.</p>\n\n<pre><code>$(\"#list\").change(function() {\n    alert($(this).find(\"option:selected\").text()+' clicked!');\n});\n</code></pre>\n\n<p>It has been tested to work on Internet Explorer and Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>While \"looping\" through dynamically created select elements with a .each(function()...): <code>$(\"option:selected\").text();</code> and <code>$(this + \" option:selected\").text()</code> did not return the selected option text - instead it was null.</p>\n\n<p>But Peter Mortensen's solution worked:</p>\n\n<pre><code>$(this).find(\"option:selected\").text();\n</code></pre>\n\n<p>I do not know why the usual way does not succeed in a <code>.each()</code> (probably my own mistake), but thank you, Peter. I know that wasn't the original question, but am mentioning it \"for newbies coming through Google.\"</p>\n\n<p>I would have started with <code>$('#list option:selected\").each()</code> except I needed to grab stuff from the select element as well.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Use:</p>\n\n<pre><code>function selected_state(){\n    jQuery(\"#list option\").each(function(){\n        if(jQuery(this).val() == \"2\"){\n            jQuery(this).attr(\"selected\",\"selected\");\n            return false;\n        }\n    });\n}\n\njQuery(document).ready(function(){\n    selected_state();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This worked perfectly for me, I was looking for a way to send two different values with options generated by MySQL, and the following is generic and dynamic:</p>\n\n<pre><code>$(this).find(\"option:selected\").text();\n</code></pre>\n\n<p>As mentioned in one of the comments. With this I was able to create a dynamic function that works with all my selection boxes that I want to get both values, the option value and the text.</p>\n\n<p>Few days ago I noticed that when updating the jQuery from 1.6 to 1.9 of the site I used this code, this stop working... probably was a conflict with another piece of code... anyway, the solution was to remove option from the find() call:</p>\n\n<pre><code>$(this).find(\":selected\").text();\n</code></pre>\n\n<p>That was my solution... use it only if you have any problem after updating your jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>I wanted a dynamic version for select multiple that would display what is selected to the right (wish I'd read on and seen <code>$(this).find</code>... earlier):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(document).ready(function(){\n        $(\"select[showChoices]\").each(function(){\n            $(this).after(\"&lt;span id='spn\"+$(this).attr('id')+\"' style='border:1px solid black;width:100px;float:left;white-space:nowrap;'&gt;&amp;nbsp;&lt;/span&gt;\");\n            doShowSelected($(this).attr('id'));//shows initial selections\n        }).change(function(){\n            doShowSelected($(this).attr('id'));//as user makes new selections\n        });\n    });\n    function doShowSelected(inId){\n        var aryVals=$(\"#\"+inId).val();\n        var selText=\"\";\n        for(var i=0; i&lt;aryVals.length; i++){\n            var o=\"#\"+inId+\" option[value='\"+aryVals[i]+\"']\";\n            selText+=$(o).text()+\"&lt;br&gt;\";\n        }\n        $(\"#spn\"+inId).html(selText);\n    }\n&lt;/script&gt;\n&lt;select style=\"float:left;\" multiple=\"true\" id=\"mySelect\" name=\"mySelect\" showChoices=\"true\"&gt;\n    &lt;option selected=\"selected\" value=1&gt;opt 1&lt;/option&gt;\n    &lt;option selected=\"selected\" value=2&gt;opt 2&lt;/option&gt;\n    &lt;option value=3&gt;opt 3&lt;/option&gt;\n    &lt;option value=4&gt;opt 4&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<ol>\n<li><p>If there is only one select tag in form then you can specify select inside of id 'list'</p>\n\n<pre><code>jQuery(\"select option[value=2]\").text();\n</code></pre></li>\n<li><p>To get selected text</p>\n\n<pre><code>jQuery(\"select option:selected\").text();\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>As an alternative solution, you can also use a <a href=\"http://api.jquery.com/jQuery/#jQuery1\" rel=\"nofollow\">context part of jQuery selector</a> to find <code>&lt;option&gt;</code> element(s) with <code>value=\"2\"</code> inside the dropdown list:</p>\n\n<pre><code>$(\"option[value='2']\", \"#list\").text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I needed this answer as I was dealing with a dynamically cast object, and the other methods here did not seem to work:</p>\n\n<pre><code>element.options[element.selectedIndex].text\n</code></pre>\n\n<p>This of course uses the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow\">DOM</a> object instead of parsing its HTML with nodeValue, childNodes, etc.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>$(this).children(\":selected\").text()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I was looking for getting val by internal field name instead of ID and came from google to this post which help but did not find the solution I need, but I got the solution and here it is: </p>\n\n<p>So this might help somebody looking for selected value with field internal name instead of using long id for SharePoint lists: </p>\n\n<pre><code>var e = $('select[title=\"IntenalFieldName\"] option:selected').text(); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is an old Question which has not been updated in some time the correct way to do this now would be to use </p>\n\n<pre><code>                $(\"#action\").on('change',function() {\nalert($(this).find(\"option:selected\").text()+' clicked!');\n</code></pre>\n\n<p>});</p>\n\n<p>I hope this helps :-)</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>A tip: you can use below code if your value is dynamic:</p>\n\n<pre><code>$(\"#list option[value='\"+aDynamicValue+\"']\").text();\n</code></pre>\n\n<p>Or (better style)</p>\n\n<pre><code>$(\"#list option\").filter(function() {\n     return this.value === aDynamicValue;\n}).text();\n</code></pre>\n\n<p>As mentioned in <a href=\"http://stackoverflow.com/questions/12135825/jquery-get-specific-option-tag-text-and-placing-dynamic-variable-to-the-value/12135848\">jQuery get specific option tag text and placing dynamic variable to the value</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>All right, say I have this:</p>\n\n<pre><code>&lt;select id='list'&gt;\n    &lt;option value='1'&gt;Option A&lt;/option&gt;\n    &lt;option value='2'&gt;Option B&lt;/option&gt;\n    &lt;option value='3'&gt;Option C&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>What would the selector look like if I wanted to get \"Option B\" when I have the value '2'?</p>\n\n<p>Please note that this is not asking how to get the <em>selected</em> text value, but just any one of them, whether selected or not, depending on the value attribute. I tried:</p>\n\n<pre><code>$(\"#list[value='2']\").text();\n</code></pre>\n\n<p>But it is not working.</p>\n",
            "last_activity_date": 1425879792,
            "question_id": 196684,
            "score": 693,
            "tags": [
                "javascript",
                "jquery",
                "drop-down-menu",
                "jquery-selectors"
            ],
            "title": "jQuery get specific option tag text"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>For chat applications or any other application that is in constant conversation with the server, <code>WebSockets</code> are the best option. However, you can only use <code>WebSockets</code> with a server that supports them, so that may limit your ability to use them if you cannot install the required libraries. In which case, you would need to use <code>Long Polling</code> to obtain similar functionality.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>WebSockets - is definitely the future.\nLong polling is dirty workaround of preventing creating connections for each request like AJAX does -- but long polling was created when WebSockets didn't exist. Now due to WebSockets, \nLong Polling is going away. And WebRTC allows peer-to-peer communication.</p>\n\n<p>I recommend learning <a href=\"http://caniuse.com/#feat=websockets\">WebSockets</a>.</p>\n\n<h1>Comparison:</h1>\n\n<p><em>of different communication techniques in web</em></p>\n\n<ul>\n<li><p><strong>AJAX</strong> - <code>request</code> &rarr; <code>response</code>. Creates connection to server, sends request headers with optional data, gets response from server, closes connection. <em>Supported in all major browsers.</em></p></li>\n<li><p><strong>Long poll</strong> - <code>request</code> &rarr; <code>wait</code> &rarr; <code>response</code>. Creates connection to server like AJAX does, but keep-alive connection open for some time (not long though), during connection open client can receive data from server. Client have to reconnect periodically after connection is closed due to timeouts or data eof. On server side it is still treated like HTTP request same as AJAX, except the answer on request will happen now or some time in the future defined by application logic. <em>Supported in all major browsers.</em></p></li>\n<li><p><strong>WebSockets</strong> - <code>client</code> &harr; <code>server</code>. Create TCP connection to server, and keep it as long as needed. Server or client can easily close it. Client goes through HTTP compatible handshake process, if it succeeds, then server and client can exchange data both directions at any time. It is very efficient if application requires frequent data exchange in both ways. WebSockets do have data framing that includes masking for each message sent from client to server so data is simply encrypted. <a href=\"http://caniuse.com/#feat=websockets\"><em>support chart</em></a> <em>(very good)</em></p></li>\n<li><p><strong>WebRTC</strong> - <code>peer</code> &harr; <code>peer</code>. Transport to establish communication between clients and is transport-agnostic so uses UDP, TCP or even more abstract layers. By design it allows to transport data in reliable as well as unreliable ways. This is generally used for high volume data transfer such as video/audio streaming where reliability - is secondary and few frames or reduction in quality progression can be sacrificed in favour of response time and at least delivering something. Both sides (peers) can push data to each other independently. While it can be used totally independent from any centralised servers it still require some way of exchanging endPoints data, where in most cases developers still use centralised servers to \"link\" peers. This is required only to exchange essential data for connection establishing - after connection is established server on aside is not required. <a href=\"http://caniuse.com/#feat=webrtc\"><em>support chart</em></a> <em>(medium)</em></p></li>\n<li><p><strong>Server-Sent Events</strong> - <code>client</code> &larr; <code>server</code>. Client establishes persistent and long-term connection to server. Only server can send data to client. If client wants to send data to server it would require to use other technology/protocol to do so. This protocol is HTTP compatible and simple to implement in most server-side platforms. This is preferable protocol to be used instead of Long Polling. <a href=\"http://caniuse.com/#feat=eventsource\"><em>support chart</em></a> <em>(good, except IE)</em></p></li>\n</ul>\n\n<h2>Advantages:</h2>\n\n<p>Main advantage of <strong>WebSockets</strong> for server, is that it is not HTTP request (after handshake), but proper message based communication protocol. That <strong>allows you to achieve huge performance and architecture advantages</strong>. For example in node.js you can share the same memory for different socket connections, so that way they can access shared variables. So you don't need to use database as exchange point in the middle (like with AJAX or Long Polling and for example PHP).\nYou can store data in RAM, or even republish between sockets straight away.</p>\n\n<h2>Security considerations</h2>\n\n<p>People often are concerned regarding security of WebSockets. Reality is that it makes little difference or even puts WebSockets as better option. First of all with AJAX there is a higher chance of <a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">MITM</a> as each request is new TCP connection and traversing through internet infrastructure. With WebSockets, once it's connected it is far more challenging to intercept in between, with additionally enforced frame masking when data is streamed from client to server as well as additional compression, that requires more effort to probe data. <strong>All modern protocols support both: HTTP and HTTPS (encrypted).</strong></p>\n\n<h2>P.S.</h2>\n\n<p><strong>Remember that WebSockets generally have a very different approach of logic for networking</strong>, more like real-time games had all this time, and not like http.</p>\n",
                    "is_accepted": true,
                    "score": 137
                },
                {
                    "body": "<p>One contending technology you've omitted is Server-Sent Events / Event Source.  <a href=\"http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet\">What are Long-Polling, Websockets, Server-Sent Events (SSE) and Comet?</a> has a good discussion of all of these.  Keep in mind that some of these are easier than others to integrate with on the server side.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>So I'm building a small chat application for friends and, as I'm building it, I've been going back and forth about how to get information in a timely manner that is not manual or as rudimentary as forcing a page refresh.</p>\n\n<p>That said, I've put in simple Ajax but alas, it's with constant hits to the server via a short timer. Someone suggested to me (on another thread of mine here on SO) about long/short polling etc, and as I researched, I ran across HTML5 websockets...</p>\n\n<p>It SEEMS easy to implement and although not full spec yet (I think) (plus I think only some browsers support it) I'm wondering, in a HTML5 WebSockets vs AJAX long/short polling, what are the advantages/disadvantages to them?</p>\n\n<p>Since I am learning, I don't want to learn both if one is better...\nThey kind of do the same thing (I'm assuming) but I'm wondering are there certain scenarios where one would use one technique over the other? Or is HTML5 WS supposed to take over in general?</p>\n\n<p>Any tips/relative links etc...I'd appreciate.</p>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1421357436,
            "question_id": 10028770,
            "score": 79,
            "tags": [
                "javascript",
                "ajax",
                "html5",
                "websocket",
                "network-protocols"
            ],
            "title": "HTML5 WebSocket vs Long Polling vs AJAX vs WebRTC vs Server-Sent Events"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>I've found <a href=\"http://www.debugbar.com\">DebugBar</a>.</p>\n\n<p>Not as good as Firebug, but close.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p><a href=\"http://web-development-helper.software.informer.com\">Web Development Helper</a> is very good.</p>\n\n<p>The <a href=\"http://www.microsoft.com/downloads/en/details.aspx?familyid=95E06CBE-4940-4218-B75D-B8856FCED535&amp;displaylang=en\">IE Dev Toolbar</a> is often helpful, but unfortunately doesn't do script debugging</p>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>IE8 has much improved developer tools.  Until then it's best to write javascript for firefox first and then debug IE using alert() statements.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The hard truth is: the only good debugger for IE is Visual Studio.</p>\n\n<p>If you don't have money for the real deal, download free <s>Visual Web Developer 2008 Express Edition</s><a href=\"http://www.microsoft.com/web/gallery/install.aspx?appid=VWD2010SP1AzurePack\">Visual Web Developer 2010 Express Edition</a>. While the former allows you to attach debugger to already running IE, the latter doesn't (at least previous versions I used didn't allow that). If this is still the case, the trick is to create a simple project with one empty web page, \"run\" it (it starts the browser), now navigate to whatever page you want to debug, and start debugging.</p>\n\n<p>Microsoft gives away full Visual Studio on different events, usually with license restrictions, but they allow tinkering at home. Check their schedule and the list of freebies.</p>\n\n<p>Another hint: try to debug your web application with other browsers first. I had a great success with Opera. Somehow Opera's emulation of IE and its bugs was pretty close, but the debugger is much better.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>you might want to try\n<a href=\"http://www.microsoft.com/downloads/details.aspx?familyid=2f465be0-94fd-4569-b3c4-dffdf19ccd99&amp;displaylang=en\">microsoft script debugger</a>\nit's pretty old but it's quite useful in the sense if you stumble on any javascript error, the debugger will popup to show you which line is messing up. it could get irrating sometimes when you do normal surfing, but you can turn if off.</p>\n\n<p>here's a good startup on how to use this tool too.\n<a href=\"http://jonathanboutelle.com/2006/01/16/how-to-debug-javascript-in-internet-explorer/\">HOW-TO: Debug JavaScript in Internet Explorer</a></p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Microsoft Script Editor can be used to debug Javascript in IE. It's less buggy than Microsoft Script Debugger but has the same basic functionality, which unfortunately is pretty much limited to stepping through execution. I can't seem to inspect variables or any handy stuff like that. Also, it only shipped with Office XP/2003 for some bizarre reason. More info <a href=\"http://www.jonathanboutelle.com/mt/archives/2006/01/howto_debug_jav.html\" rel=\"nofollow\">here</a> if you're game.</p>\n\n<p>I downloaded the Visual Web Developer 2008 Express Edition mentioned by Eugene Lazutkin but haven't had a chance to try it yet. I'd recommend trying that before Script Editor/Debugger.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It's not a full debugger, but my DP_DEBUG extensions provides some (I think) usful functionality and they work in IE, Firefox and Opera (9+).</p>\n\n<p>You can \"dump\" visual representations of complex JavaScript objects (even system objects), do simplified logging and timing.  The component provides simple methods to enable or disable it so that you can leave the debugger in place for production work if you like.</p>\n\n<p><a href=\"http://depressedpress.com/javascript-extensions/dp_debug/\" rel=\"nofollow\">DP_Debug</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Microsoft Script Editor is indeed an option, and of the ones I've tried one of the more stable ones -- the debugger in IE8 is great but for some reason whenever I start the Developer Tools it takes IE8 a while, sometimes up to a minute, to inspect my page's DOM tree. And afterwards it seems to want to do it on every page refresh which is a torture.</p>\n\n<p>You <em>can</em> inspect contents of variables in Microsoft Script editor: if you poke around under Debug > Window you can turn on local variable inspection, watching etc.</p>\n\n<p>The other option, Visual Web Dev, while bulky, works reasonably well. To set it up, do this (stolen from <a href=\"http://www.berniecode.com/blog/2007/03/08/how-to-debug-javascript-with-visual-web-developer-express/\">here</a>):</p>\n\n<ol>\n<li>Debugging should be turned on in IE. Go into Tools > Internet Options > Advanced and check that <em>Disable Script Debugging (Internet Explorer)</em> is unchecked and <em>Display a notification about every script error</em> is checked</li>\n<li>Create a new empty web project inside of VWD</li>\n<li>Right-click on the site in the Solutions Explorer on the top right, go to Browse With and make sure your default browser is set to IE (it's reasonable to assume if you're a web developer IE is <em>not</em> your default browser in which case that won't be the default.. by default)</li>\n<li>Hit F5, IE will open up. Browse to the page you want to debug.</li>\n<li>VWD will now open up any time you have a script error or if you set a breakpoint in one of the JS files. Debug away!</li>\n</ol>\n\n<p><strong>UPDATE</strong>: By the way, if you experience the same slowdowns as me with IE8's otherwise decent debugger, there is a workaround -- if you encounter or make IE encounter an error so that it pops up the \"Do you want to debug\" dialogue and hit Yes, the debugger will come up pretty much instantly. It seems like if you go \"straight\" into debugging mode the Dev Tools never inspect the DOM. It's only when you hit F12 that it does.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Use Internet Explorer 8. Then Try the developer tool.. You can debug based on IE 7 also in compatibility mode</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In IE7, you can bring up firebug lite for the current page by pasting the following in the address bar:</p>\n\n<pre><code>javascript:var firebug=document.createElement('script');firebug.setAttribute('src','http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js');document.body.appendChild(firebug);(function(){if(window.firebug.version){firebug.init();}else{setTimeout(arguments.callee);}})();void(firebug);\n</code></pre>\n\n<p>See <a href=\"http://getfirebug.com/lite.html\">http://getfirebug.com/lite.html</a>.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Hey I came across the same problem and found this the application <a href=\"http://www.my-debugbar.com/wiki/IETester/HomePage\" rel=\"nofollow\">IETESTER</a>. It's pretty awesome, it's an app that has IE 5.5,6, and 7 bundled into it. It doesn't matter what IE version you currently have. This allows you to have multiple versions side by side. </p>\n\n<p>If you enable javascript debugging in IE options and have Visual Studio installed you can even debug the javascript in VS with all the debug options available to you(watches, conditional breakpoints ,etc.)</p>\n\n<p>If you want to start debugging before an error occurs you simply have to put the line</p>\n\n<pre><code>debugger;\n</code></pre>\n\n<p>into your JS code and this bring you into VS to begin debugging after this statement. </p>\n\n<p>This is absolutely amazing to me for testing backward compatibility for JS code.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>FireBug Lite: \n<a href=\"http://getfirebug.com/firebuglite\" rel=\"nofollow\">http://getfirebug.com/firebuglite</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The IE9 developer tools worked for me. Just set the \"Browser Mode\" menu item to IE7.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The answer is simple.</p>\n\n<ol>\n<li>Get Internet Explorer 9</li>\n<li>Press F12 to load up Developer Tools</li>\n<li>Switch the browser mode to IE7</li>\n</ol>\n\n<p><img src=\"http://i.stack.imgur.com/C8Dqq.png\" alt=\"switching the browser mode on IE9\"></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Running your code through a Javascript static analysis tool like <a href=\"http://www.jslint.com/\" rel=\"nofollow\">JSLint</a> can catch some common IE7 errors, such as trailing commas in object definitions.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>IE8 Developer Tools are able to switch to IE7 mode<img src=\"http://i.stack.imgur.com/ShQWe.jpg\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you still need to Debug IE 7, the emulation mode of IE 11 is working pretty well.</p>\n\n<p>Go to menu: Dev Tools, then to emulation and set it.\nIt also gives error line information.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to debug JavaScript in Internet Explorer 7.</p>\n\n<p>Unfortunately, its default debugger doesn't provide me with much information. It tells me the page that the error showed up on (not the specific script) and gives me a line number.  I don't know if that is related to my problem.</p>\n\n<p>It'd be nice if it could narrow down the error to a line number on a specific script (like Firebug can).</p>\n\n<p>Is there an addon to debug JavaScript in IE7 like Firebug does in Firefox?</p>\n\n<p>Thank you!</p>\n\n<h3>See also:</h3>\n\n<p><a href=\"http://stackoverflow.com/questions/56615/does-ie7-have-a-developer-mode-or-plugin-like-firefoxchromesafari\">Does IE7 have a \u201cdeveloper mode\u201d or plugin like Firefox/Chrome/Safari?</a></p>\n",
            "last_activity_date": 1413719876,
            "question_id": 361635,
            "score": 153,
            "tags": [
                "javascript",
                "internet-explorer-7"
            ],
            "title": "Debugging JavaScript in IE7"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>By 'not implement key functions' you actually means 'conforms to the ECMA 262 3'rd ed' right? :)</p>\n\n<p>The methods you are referring to are part of the new 5'th edition - for browsers not supporting this you can use the following 'shim' that extends 3'rd into 5'th\n<a href=\"http://github.com/kriskowal/narwhal-lib/blob/narwhal-lib/lib/global-es5.js\" rel=\"nofollow\">http://github.com/kriskowal/narwhal-lib/blob/narwhal-lib/lib/global-es5.js</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Many use the MDC fallback implementations (eg. for <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/IndexOf\">indexOf</a>). They're generally rigorously standards-compliant, even to the extent of explicitly checking the types of all the arguments.</p>\n\n<p>Unfortunately whilst it is clear that the authors regard this code as trivial and freely-usable, there doesn't seem to be an explicit licence-grant to put this in writing. The wiki as a whole is CC Attribution-ShareAlike, if that's an acceptable licence (though CC isn't designed for code as such).</p>\n\n<p>js-methods looks OK in general, but is not as standards-compliant around the edges of how the functions are supposed to be (eg. undefined list items, functions that mutate the list). It's also full of other random non-standard methods, including some questionable ones like the dodgy stripTags and the incomplete UTF-8 codec (which is also a bit unnecessary given the <code>unescape(encodeURIComponent)</code> trick).</p>\n\n<p>For what it's worth, here's what I use (which I hereby release into the public domain, if it can be said to be copyrightable at all). It's a bit shorter than the MDC versions as it doesn't attempt to type-sniff that you haven't done something silly like pass non-function callbacks or non-integer indexes, but apart from that it attempts to be standards-compliant. (Let me know if I've missed anything. ;-))</p>\n\n<pre><code>'use strict';\n\n// Add ECMA262-5 method binding if not supported natively\n//\nif (!('bind' in Function.prototype)) {\n    Function.prototype.bind= function(owner) {\n        var that= this;\n        if (arguments.length&lt;=1) {\n            return function() {\n                return that.apply(owner, arguments);\n            };\n        } else {\n            var args= Array.prototype.slice.call(arguments, 1);\n            return function() {\n                return that.apply(owner, arguments.length===0? args : args.concat(Array.prototype.slice.call(arguments)));\n            };\n        }\n    };\n}\n\n// Add ECMA262-5 string trim if not supported natively\n//\nif (!('trim' in String.prototype)) {\n    String.prototype.trim= function() {\n        return this.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    };\n}\n\n// Add ECMA262-5 Array methods if not supported natively\n//\nif (!('indexOf' in Array.prototype)) {\n    Array.prototype.indexOf= function(find, i /*opt*/) {\n        if (i===undefined) i= 0;\n        if (i&lt;0) i+= this.length;\n        if (i&lt;0) i= 0;\n        for (var n= this.length; i&lt;n; i++)\n            if (i in this &amp;&amp; this[i]===find)\n                return i;\n        return -1;\n    };\n}\nif (!('lastIndexOf' in Array.prototype)) {\n    Array.prototype.lastIndexOf= function(find, i /*opt*/) {\n        if (i===undefined) i= this.length-1;\n        if (i&lt;0) i+= this.length;\n        if (i&gt;this.length-1) i= this.length-1;\n        for (i++; i--&gt;0;) /* i++ because from-argument is sadly inclusive */\n            if (i in this &amp;&amp; this[i]===find)\n                return i;\n        return -1;\n    };\n}\nif (!('forEach' in Array.prototype)) {\n    Array.prototype.forEach= function(action, that /*opt*/) {\n        for (var i= 0, n= this.length; i&lt;n; i++)\n            if (i in this)\n                action.call(that, this[i], i, this);\n    };\n}\nif (!('map' in Array.prototype)) {\n    Array.prototype.map= function(mapper, that /*opt*/) {\n        var other= new Array(this.length);\n        for (var i= 0, n= this.length; i&lt;n; i++)\n            if (i in this)\n                other[i]= mapper.call(that, this[i], i, this);\n        return other;\n    };\n}\nif (!('filter' in Array.prototype)) {\n    Array.prototype.filter= function(filter, that /*opt*/) {\n        var other= [], v;\n        for (var i=0, n= this.length; i&lt;n; i++)\n            if (i in this &amp;&amp; filter.call(that, v= this[i], i, this))\n                other.push(v);\n        return other;\n    };\n}\nif (!('every' in Array.prototype)) {\n    Array.prototype.every= function(tester, that /*opt*/) {\n        for (var i= 0, n= this.length; i&lt;n; i++)\n            if (i in this &amp;&amp; !tester.call(that, this[i], i, this))\n                return false;\n        return true;\n    };\n}\nif (!('some' in Array.prototype)) {\n    Array.prototype.some= function(tester, that /*opt*/) {\n        for (var i= 0, n= this.length; i&lt;n; i++)\n            if (i in this &amp;&amp; tester.call(that, this[i], i, this))\n                return true;\n        return false;\n    };\n}\n</code></pre>\n\n<p>Other ECMA262-5 methods not implemented here include Array <code>reduce</code>/<code>reduceRight</code>, the JSON ones and the few new <code>Object</code> methods that can be reliably implemented as JS functions.</p>\n",
                    "is_accepted": true,
                    "score": 181
                },
                {
                    "body": "<p>Take a look at <a href=\"http://documentcloud.github.com/underscore\">underscore.js</a>.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/users/42586/kris-kowal\">Kris Kowal</a> has compiled a small library that acts as a shim for ECMAScript 5 functions that may be missing from the browser's implementation.  Some of the functions have been revised numerous times by other people to be optimized for speed and to work around browser bugs.  The functions are written to follow the specification as closely as possible.</p>\n\n<p><a href=\"https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\">es5-shim.js</a> was released under the MIT license, the Array.prototype extensions are near the top and you can chop and remove any functions you don't need quite easily.  I also suggest you minify the script as the comments make it much larger than it needs to be.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Those scripts don't work well in my tests. I create a file with the same functions based on <em><a href=\"https://developer.mozilla.org/en-US/\" rel=\"nofollow\">MDN</a></em> documents.</p>\n\n<p>Too many problems areas are solved in Internet&nbsp;Explorer&nbsp;8. See the code in <em><a href=\"https://gist.github.com/egermano/7667171\" rel=\"nofollow\"> egermano / ie-fix.js</a></em>. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is my quick and dirty (quite dirty!) solution for missing Array methods in IE</p>\n\n<pre><code>&lt;body&gt;\n   &lt;!--place your HTML here--&gt;\n&lt;/body&gt;\n\n&lt;script&gt; \nif (![].forEach) {   // patch your browser MS!\n   document.body.innerHTML=\"ERROR: The browser is incompatible with this webpage, please use another web-browser\";\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>With the Underscore.js </p>\n\n<p><code>var arr=['a','a1','b'] \n_.filter(arr, function(a){ return a.indexOf('a') &gt; -1; })</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>As detailed <a href=\"http://stackoverflow.com/questions/1744310\">elsewhere</a>, and otherwise apparently well-known, Internet Explorer (definitely version 7, and in some instances, version 8) do not implement key functions, in particular on <code>Array</code> (such as <code>forEach</code>, <code>indexOf</code>, etc).</p>\n\n<p>There are a number of workarounds here and there, but I'd like to fold a proper, canonical set of implementations into our site rather than copy and paste or hack away at our own implementations. I've found <a href=\"http://code.google.com/p/js-methods/\">js-methods</a>, which looks promising, but thought I'd post here to see whether another library comes more highly-recommended. A couple of miscellaneous criteria:</p>\n\n<ul>\n<li>The library should just be a no-operation for those functions that a browser already has implementations for (<code>js-methods</code> appears to do quite well here).</li>\n<li>Non-<a href=\"http://en.wikipedia.org/wiki/GNU_General_Public_License\">GPL</a>, please, though <a href=\"http://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License\">LGPL</a> is acceptable.</li>\n</ul>\n",
            "last_activity_date": 1418211070,
            "question_id": 2790001,
            "score": 109,
            "tags": [
                "javascript",
                "internet-explorer",
                "cross-browser"
            ],
            "title": "Fixing JavaScript Array functions in Internet Explorer (indexOf, forEach, etc.)"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>The \"pre\" and \"post\" nature of increment and decrement operators can tend to be confusing for those who are not familiar with them; that's one way in which they can be tricky.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I'm frankly confused by that advice. Part of me wonders if it has more to do with a lack of experience (perceived or actual) with javascript coders. I can see how someone just \"hacking\" away at some sample code could make an innocent mistake with ++ and --, but I don't see why an experienced professional would avoid them.</p>\n",
                    "is_accepted": false,
                    "score": 151
                },
                {
                    "body": "<p>Is Fortran a C-like language?  It has neither ++ nor --.  Here is <a href=\"http://www.tat.physik.uni-tuebingen.de/~kley/lehre/ftn77/tutorial/loops.html\" rel=\"nofollow\">how you write a loop</a>:</p>\n\n<pre><code>     integer i, n, sum\n\n      sum = 0\n      do 10 i = 1, n\n         sum = sum + i\n         write(*,*) 'i =', i\n         write(*,*) 'sum =', sum\n  10  continue\n</code></pre>\n\n<p>The index element <em>i</em> is incremented by the language rules each time through the loop.  If you want to increment by something other than 1, count backwards by two for instance, the syntax is ... </p>\n\n<pre><code>      integer i\n\n      do 20 i = 10, 1, -2\n         write(*,*) 'i =', i\n  20  continue\n</code></pre>\n\n<p>Is Python C-like?  It uses <em>range</em> and <em>list comprehensions</em> and other syntaxes to bypass the need for incrementing an index:</p>\n\n<pre><code>print range(10,1,-2) # prints [10,8.6.4.2]\n[x*x for x in range(1,10)] # returns [1,4,9,16 ... ]\n</code></pre>\n\n<p>So based on this rudimentary exploration of exactly two alternatives, language designers may avoid ++ and -- by anticipating use cases and providing an alternate syntax.</p>\n\n<p>Are Fortran and Python notably less of a bug magnet than procedural languages which have ++ and --?  I have no evidence.</p>\n\n<p>I claim that Fortran and Python are C-like because I have never met someone fluent in C who could not with 90% accuracy guess correctly the intent of non-obfuscated Fortran or Python.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is a history in C of doing things like:</p>\n\n<pre><code>while (*a++ = *b++);\n</code></pre>\n\n<p>to copy a string, perhaps this is the source of the excessive trickery he is referring to.  </p>\n\n<p>And there's always the question of what</p>\n\n<pre><code>++i = i++;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>i = i++ + ++i;\n</code></pre>\n\n<p>actually do.  It's defined in some languages, and in other's there's no guarantee what will happen.</p>\n\n<p>Those examples aside, I don't think there's anything more idiomatic than a for loop that uses <code>++</code> to increment.  In some cases you could get away with a foreach loop, or a while loop that checked a different condtion.  But contorting your code to try and avoid using incrementing is ridiculous.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>My view is to always use ++ and -- by themselves on a single line, as in:</p>\n\n<pre><code>i++;\narray[i] = foo;\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>array[++i] = foo;\n</code></pre>\n\n<p>Anything beyond that can be confusing to some programmers and is just not worth it in my view.  For loops are an exception, as the use of the increment operator is idiomatic and thus always clear.</p>\n",
                    "is_accepted": true,
                    "score": 204
                },
                {
                    "body": "<p>Consider the following code</p>\n\n<pre><code>\tint a[10];\n\ta[0] = 0;\n\ta[1] = 0;\n\ta[2] = 0;\n\ta[3] = 0;\n\tint i = 0;\n\ta[i++] = i++;\n\ta[i++] = i++;\n\ta[i++] = i++;\n</code></pre>\n\n<p>since i++ gets evaluated twice the output is\n(from vs2005 debugger)</p>\n\n<pre><code>\t[0]\t0\tint\n\t[1]\t0\tint\n\t[2]\t2\tint\n\t[3]\t0\tint\n\t[4]\t4\tint\n</code></pre>\n\n<p>Now consider the following code :</p>\n\n<pre><code>\tint a[10];\n\ta[0] = 0;\n\ta[1] = 0;\n\ta[2] = 0;\n\ta[3] = 0;\n\tint i = 0;\n\ta[++i] = ++i;\n\ta[++i] = ++i;\n\ta[++i] = ++i;\n</code></pre>\n\n<p>Notice that the output is the same. Now you might think that ++i and i++ are the same. They are not</p>\n\n<pre><code>\t[0]\t0\tint\n\t[1]\t0\tint\n\t[2]\t2\tint\n\t[3]\t0\tint\n\t[4]\t4\tint\n</code></pre>\n\n<p>Finally consider this code</p>\n\n<pre><code>\tint a[10];\n\ta[0] = 0;\n\ta[1] = 0;\n\ta[2] = 0;\n\ta[3] = 0;\n\tint i = 0;\n\ta[++i] = i++;\n\ta[++i] = i++;\n\ta[++i] = i++;\n</code></pre>\n\n<p>The output is now : </p>\n\n<pre><code>\t[0]\t0\tint\n\t[1]\t1\tint\n\t[2]\t0\tint\n\t[3]\t3\tint\n\t[4]\t0\tint\n\t[5]\t5\tint\n</code></pre>\n\n<p>So they are not the same, mixing both result in not so intuitive behavior. I think that for loops are ok with ++, but watch out when you have multiple ++ symbols on the same line or same instruction</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you read JavaScript The Good Parts, you'll see that Crockford's replacement for i++ in a <strong>for</strong> loop is i+=1 (not i=i+1). That's pretty clean and readable, and is less likely to morph into something \"tricky.\"</p>\n\n<p>Crockford made disallowing autoincrement and autodecrement an <em>option</em> in jsLint. You choose whether to follow the advice or not.</p>\n\n<p>My own personal rule is to not do anything combined with autoincrement or autodecrement.</p>\n\n<p>I've learned from years of experience in C that I don't get buffer overruns (or array index out of bounds) if I keep use of it simple. But I've discovered that I do get buffer overruns if I fall into the \"excessively tricky\" practice of doing other things in the same statement.</p>\n\n<p>So, for my own rules, the use of i++ as the increment in a <strong>for</strong> loop is fine.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>I don't know if this was part of his reasoning, but if you use a poorly-written minification program, it could turn <code>x++ + y</code> into <code>x+++y</code>. But then again, a poorly written tool can wreak all kinds of havoc.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've been watching Douglas Crockford's video on this and his explanation for not using increment and decrement is that</p>\n\n<ol>\n<li>It has been used in the past in other languages to break the bounds of arrays and cause all manners of badness and</li>\n<li>That it is more confusing and inexperienced JS developers don't know exactly what it does. </li>\n</ol>\n\n<p>Firstly arrays in JavaScript are dynamically sized and so, forgive me if I'm wrong, it is not possible to break the bounds of an array and access data that shouldn't be accessed using this method in JavaScript. </p>\n\n<p>Secondly, should we avoid things that are complicated, surely the problem is not that we have this facility but the problem is that there are developers out there that claim to do JavaScript but don't know how these operators work?? It is simple enough. value++, give me the current value and after the expression add one to it, ++value, increment the value before giving me it.</p>\n\n<p>Expressions like a ++ + ++ b, are simple to work out if you just remember the above.</p>\n\n<pre><code>var a = 1, b = 1, c;\nc = a ++ + ++ b;\n// c = 1 + 2 = 3; \n// a = 2 (equals two after the expression is finished);\n// b = 2;\n</code></pre>\n\n<p>I suppose you've just got to remember who has to read through the code, if you have a team that knows JS inside out then you don't need to worry. If not then comment it, write it differently, etc. Do what you got to do. I don't think increment and decrement is inherently bad or bug generating, or vulnerability creating, maybe just less readable depending on your audience.</p>\n\n<p>Btw, I think Douglas Crockford is a legend anyway, but I think he's caused a lot of scare over an operator that didn't deserve it.</p>\n\n<p>I live to be proven wrong though...</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I think programmers should be competent in the language they are using; use it clearly; and use it well. I <em>don't</em> think they should artificially cripple the language they are using. I speak from experience. I once worked literally next door to a Cobol shop where they didn't use ELSE 'because it was too complicated'. <em>Reductio ad absurdam.</em></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>As mentioned in some of the existing answers (which annoyingly I'm unable to comment on), the problem is that x++ ++x evaluate to different values (before vs after the increment), which is not obvious and can be very confusing - <strong>if</strong> that value is used. cdmckay suggests quite wisely to allow use of increment operator, but only in a way that the returned value is not used, e.g. on its own line. I would also include the standard use within a for loop (but only in the third statement, whose return value is not used). I can't think of another example. Having been \"burnt\" myself, I would recommend the same guideline for other languages as well.</p>\n\n<p>I disagree with the claim that this over-strictness is due to a lot of JS programmers being inexperienced. This is the exact kind of writing typical of \"overly-clever\" programmers, and I'm sure it's much more common in more traditional languages and with JS developers who have a background in such languages.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In my view, <strong>\"Explicit is always better than implicit.\"</strong> Because at some point, you may got confused with this increments statement <code>y+ = x++ + ++y</code>. A good programmer always makes his or her code more readable.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The most important rationale for avoiding ++ or -- is that the operators return values and cause side effects at the same time, making it harder to reason about the code. </p>\n\n<p>Of course, if you're not using the return value it is perfectly all right as long as you use the pre- and not the post-operator. </p>\n\n<p>Why not use the post-operator standalone? Because the pre-operator can never be slower than the post-operator, while the opposite depends on your programming environment. Don't pessimize prematurely.</p>\n\n<p>I am a fan of Mr. Crockford, but in this case I have to disagree. <code>++i</code> is 25% less text to parse than <code>i+=1</code> <em>and</em> arguably clearer.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In a loop it's harmless, but in an assignment statement it can lead to unexpected results:</p>\n\n<pre><code>var x = 5;\nvar y = x++; // y is now 5 and x is 6\nvar z = ++x; // z is now 7 and x is 7\n</code></pre>\n\n<p><a href=\"http://dailyjs.com/2012/04/19/semicolons/\" rel=\"nofollow\">Whitespace</a> between the variable and the operator can lead to unexpected results as well:</p>\n\n<pre><code>a = b = c = 1; a ++ ; b -- ; c; console.log('a:', a, 'b:', b, 'c:', c)\n</code></pre>\n\n<p>In a closure, unexpected results can be an issue as well:</p>\n\n<pre><code>var foobar = function(i){var count = count || i; return function(){return ++count;}}\n\nbaz = foobar(1);\nbaz(); //2\nbaz(); //3\n</code></pre>\n\n<p>And it triggers automatic semicolon insertion after a newline:</p>\n\n<pre><code>var foo = 1, bar = 2, baz = 3, alpha = 4, beta = 5, delta = alpha\n++beta; //delta is 4, alpha is 4, beta is 6\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Another example, more simple than some others with simple return of incremented value:</p>\n\n<pre><code>function testIncrement1(x) {\n    return x++;\n}\n\nfunction testIncrement2(x) {\n    return ++x;\n}\n\nfunction testIncrement3(x) {\n    return x += 1;\n}\n\nconsole.log(testIncrement1(0)); // 0\nconsole.log(testIncrement2(0)); // 1\nconsole.log(testIncrement3(0)); // 1\n</code></pre>\n\n<p>As you can see, no post-increment/decrement should be used at return statement, if you want to this operator influenced on result. But return doesn't't \"catch\" post-increment/decrement operators:</p>\n\n<pre><code>function closureIncrementTest() {\n    var x = 0;\n\n    function postIncrementX() {\n        return x++;\n    }\n\n    var y = postIncrementX();\n\n    console.log(x); // 1\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I'm a big fan of <a href=\"http://www.crockford.com/\">Douglas Crockford</a>'s <a href=\"http://javascript.crockford.com/\">writing on JavaScript</a>, particularly his book <a href=\"http://oreilly.com/catalog/9780596517748/\">JavaScript: The Good Parts</a>. It's made me a better JavaScript programmer and a better programmer in general. One of his <a href=\"http://www.jslint.com/lint.html\">tips for his jslint tool</a> is this :</p>\n\n<blockquote>\n  <p><strong>++ and --</strong><br>\n  The ++ (increment) and -- (decrement) \n  operators have been known to contribute to bad code by\n  encouraging excessive trickiness. They\n  are second only to faulty architecture\n  in enabling to viruses and other\n  security menaces. There is a plusplus\n  option that prohibits the use of these\n  operators.</p>\n</blockquote>\n\n<p>This has always struck my gut as \"yes, that makes sense,\" but has annoyed me when I've needed a looping condition and can't figure out a better way to control the loop than a <code>while( a &lt; 10 )do { a++ }</code> or <code>for (var i=0;i&lt;10;i++) { }</code> and use jslint. It's challenged me to write it differently. I also know in the distant past using things, in say PHP like <code>$foo[$bar++]</code> has gotten me in trouble with off-by-one errors.</p>\n\n<p>Are there C-like languages or other languages that lack the \"<code>++</code>\" and \"<code>--</code>\" syntax or handle it differently?</p>\n\n<p>Are there other rationales for avoiding \"<code>++</code>\" and \"<code>--</code>\" that I might be missing?</p>\n\n<hr>\n\n<p><strong>UPDATE</strong> -- <em>April 9, 2010</em>:</p>\n\n<p>In the video <a href=\"http://www.yuiblog.com/blog/2010/04/08/video-crockonjs-5/\">Crockford on JavaScript -- Part 5: The End of All Things</a>, Douglas Crockford addresses the ++ issue more directly and with more detail. It appears at 1:09:00 in the timeline. Worth a watch.</p>\n\n<hr>\n\n<p><strong>UPDATE</strong> -- <em>December 5, 2011</em>:</p>\n\n<p>Crockford again, from another excellent YUI Theater: <a href=\"http://www.youtube.com/watch?v=taaEzHI9xyY&amp;t=50m42s\">Crockford on JavaScript - Section 8: Programming Style &amp; Your Brain</a> (50:42)</p>\n\n<hr>\n",
            "last_activity_date": 1423156698,
            "question_id": 971312,
            "score": 177,
            "tags": [
                "javascript",
                "syntax",
                "jslint",
                "postfix-operator",
                "prefix-operator"
            ],
            "title": "Why avoid increment (&quot;++&quot;) and decrement (&quot;--&quot;) operators in JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I figured out what the issue was : missing quotes in the testEcho() parameter.  This is how I got the call to work:</p>\n\n<pre><code>myWebView.loadUrl(\"javascript:testEcho('Hello World!')\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 98
                },
                {
                    "body": "<pre><code>public void run(final String scriptSrc) { \n        webView.post(new Runnable() {\n            @Override\n            public void run() { \n                webView.loadUrl(\"javascript:\" + scriptSrc); \n            }\n        }); \n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>This video (http://youtu.be/uVqp1zcMfbE) gave me the hint to make it work.\nThe key is to save your HTML and JS files in the Android assets folder.\nThen you can easily access them via: </p>\n\n<pre><code>webView.loadUrl(\"file:///android_asset/your_page.html\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>Yes you have the syntax error. If you want to get your <strong>Javascript</strong> errors and printing statements in your <strong>logcat</strong> you must implement the <strong>onConsoleMessage(ConsoleMessage cm</strong>) in your <strong>WebChromeClient</strong>. It gives the complete stack traces like <strong>Web console(Inspect element)</strong>. Here is the method.</p>\n\n<pre><code>public boolean onConsoleMessage(ConsoleMessage cm) \n    {\n        Log.d(\"ShowMote\", cm.message() + \" -- From line \"\n                             + cm.lineNumber() + \" of \"\n                             + cm.sourceId() );\n        return true;\n    }\n</code></pre>\n\n<p>After implementation you will get your <strong>Javascript</strong> errors and print statements*<em>(console.log)</em>* on your <strong>logcat</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I created a nice wrapper to call JavaScript methods, it also show javascript errors in log:</p>\n\n<pre><code>private void callJavaScript(String methodName, Object...params){\n    StringBuilder stringBuilder = new StringBuilder();\n    stringBuilder.append(\"javascript:try{\");\n    stringBuilder.append(methodName);\n    stringBuilder.append(\"(\");\n    for (Object param : params) {\n        if(param instanceof String){\n            stringBuilder.append(\"'\");\n            stringBuilder.append(param);\n            stringBuilder.append(\"'\");\n        }\n        stringBuilder.append(\",\");\n    }\n    stringBuilder.append(\")}catch(error){Android.onError(error.message);}\");\n    webView.loadUrl(stringBuilder.toString());\n}\n</code></pre>\n\n<p>You need to add this too:</p>\n\n<pre><code>private class WebViewInterface{\n\n    @JavascriptInterface\n    public void onError(String error){\n        throw new IllegalArgumentException(error);\n    }\n}\n</code></pre>\n\n<p>And add this interface to your webview</p>\n\n<pre><code>webView.getSettings().setJavaScriptEnabled(true);\nwebView.addJavascriptInterface(new WebViewInterface(), \"AndroidErrorReporter\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am trying to call some javascript functions sitting in an html page running inside an android webview.  Pretty simple what the code tries to do below - from the android app, call a javascript function with a test message, which inturn calls a java function back in the android app that displays test message via toast.</p>\n\n<p>The javascript function looks like:</p>\n\n<pre><code>function testEcho(message){\n     window.JSInterface.doEchoTest(message);\n}\n</code></pre>\n\n<p>From the WebView, I have tried calling the javascript the following ways with no luck:</p>\n\n<pre><code>myWebView.loadUrl(\"javascript:testEcho(Hello World!)\");\nmWebView.loadUrl(\"javascript:(function () { \" + \"testEcho(Hello World!);\" + \"})()\");\n</code></pre>\n\n<p>I did enable javascript on the WebView</p>\n\n<pre><code>myWebView.getSettings().setJavaScriptEnabled(true);\n// register class containing methods to be exposed to JavaScript\nmyWebView.addJavascriptInterface(myJSInterface, \"JSInterface\"); \n</code></pre>\n\n<p>And heres the Java Class</p>\n\n<pre><code>public class JSInterface{\n\nprivate WebView mAppView;\npublic JSInterface  (WebView appView) {\n        this.mAppView = appView;\n    }\n\n    public void doEchoTest(String echo){\n        Toast toast = Toast.makeText(mAppView.getContext(), echo, Toast.LENGTH_SHORT);\n        toast.show();\n    }\n}\n</code></pre>\n\n<p>I've spent a lot of time googling around to see what I may be doing wrong.  All examples I have found use this approach.  Does anyone see something wrong here?</p>\n\n<p>Edit:  There are several other external javascript files being referenced &amp; used in the html, could they be the issue?</p>\n",
            "last_activity_date": 1404929009,
            "question_id": 4325639,
            "score": 83,
            "tags": [
                "javascript",
                "android",
                "webview"
            ],
            "title": "Android Calling JavaScript functions in WebView"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<pre><code>var myDate = new Date(); // Set this to your date in whichever timezone.\nvar utcDate = myDate.toUTCString();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Are you trying to convert the date into a string like that?</p>\n\n<p>I'd make a function to do that, and, though it's slightly controversial, add it to the Date prototype. If you're not comfortable with doing that, then you can put it as a standalone function, passing the date as a parameter.</p>\n\n<pre><code>Date.prototype.getISOString = function() {\n    var zone = '', temp = -this.getTimezoneOffset() / 60 * 100;\n    if (temp &gt;= 0) zone += \"+\";\n    zone += (Math.abs(temp) &lt; 100 ? \"00\" : (Math.abs(temp) &lt; 1000 ? \"0\" : \"\")) + temp;\n\n    // \"2009-6-4T14:7:32+10:00\"\n    return this.getFullYear()   // 2009\n         + \"-\"\n         + (this.getMonth() + 1) // 6\n         + \"-\"\n         + this.getDate()       // 4\n         + \"T\"\n         + this.getHours()      // 14\n         + \":\"\n         + this.getMinutes()    // 7\n         + \":\"\n         + this.getSeconds()    // 32\n         + zone.substr(0, 3)    // +10\n         + \":\"\n         + String(temp).substr(-2) // 00\n    ;\n};\n</code></pre>\n\n<p>If you needed it in UTC time, just replace all the get* functions with getUTC*, eg: getUTCFullYear, getUTCMonth, getUTCHours... and then just add \"+00:00\" at the end instead of the user's timezone offset.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>Date.prototype.toUTCArray= function(){\n    var D= this;\n    return [D.getUTCFullYear(), D.getUTCMonth(), D.getUTCDate(), D.getUTCHours(),\n    D.getUTCMinutes(), D.getUTCSeconds()];\n}\n\nDate.prototype.toISO= function(){\n    var tem, A= this.toUTCArray(), i= 0;\n    A[1]+= 1;\n    while(i++&lt;7){\n        tem= A[i];\n        if(tem&lt;10) A[i]= '0'+tem;\n    }\n    return A.splice(0, 3).join('-')+'T'+A.join(':');    \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I just discovered that the 1.2.3 version of Steven Levithan's <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\" rel=\"nofollow\">date.format.js</a> does just what I want. It allows you to supply a format string for a JavaScript date and will convert from local time to UTC. Here's the code I'm using now:</p>\n\n<pre><code>// JavaScript dates don't like hyphens!    \nvar rectifiedDateText = dateText.replace(/-/g, \"/\");\nvar d = new Date(rectifiedDateText);\n\n// Using a predefined mask from date.format.js.\nvar convertedDate = dateFormat(d, 'isoUtcDateTime');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've found the <a href=\"http://docs.jquery.com/UI/Datepicker/parseDate\" rel=\"nofollow\">jQuery Globalization Plugin</a> date parsing to work best.  Other methods had cross-browser issues and stuff like date.js had not been updated in quite a while. </p>\n\n<p>You also don't need a datePicker on the page.  You can just call something similar to the example given in the docs:</p>\n\n<pre><code>$.parseDate('yy-mm-dd', '2007-01-26');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Simple and stupid </p>\n\n<pre><code>var now = new Date(); \nvar now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),  now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 249
                },
                {
                    "body": "<p>I prefer this approach:</p>\n\n<pre><code>var now = new Date();\n\nvar utc = new Date(Date.UTC(\n    now.getFullYear(),\n    now.getMonth(),\n    now.getDate(),\n    now.getHours(),\n    now.getMinutes()\n));\n\n// now = Thu Mar 01 2012 06:28:00 GMT-0800 (PST)\n// utc = Wed Feb 29 2012 22:28:00 GMT-0800 (PST)\n</code></pre>\n\n<p>Date.UTC() returns the number of milliseconds since the epoch, UTC.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\">Docs here</a></p>\n\n<p>Cheers</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>date = '2012-07-28'; stringdate = new Date(date).toISOString();\n</code></pre>\n\n<p>ought to work in most newer browsers. it returns <code>2012-07-28T00:00:00.000Z</code> on Firefox 6.0</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The format you need is created with the .toISOString() method.  For older browsers (ie8 and under), which don't natively support this method, the shim can be found <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString\" rel=\"nofollow\">here</a>: </p>\n\n<p>This will give you the ability to do what you need:</p>\n\n<pre><code>var isoDate = new Date('yourdatehere').toISOString();\n</code></pre>\n\n<p>For Timezone work, <a href=\"http://momentjs.com/\" rel=\"nofollow\">moment.js and moment.js timezone</a> are really invaluable tools...especially for navigating timezones between client and server javascript.</p>\n",
                    "is_accepted": true,
                    "score": 68
                },
                {
                    "body": "<p>Here's my method:\n</p>\n\n<pre><code>var now = new Date();\nvar utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>Even simpler<br /></p>\n\n<pre><code>myvar.setTime(myvar.getTime() + myvar.getTimezoneOffset() * 60000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Browsers may differ, and you should also remember to not trust any info generated by the client, that said the below statement works for me (Google Chrome v24 on Mac OS X 10.8.2)</p>\n\n<pre><code>var utcDate = new Date(new Date().getTime());\n</code></pre>\n\n<p>Adding the 60000 * Date.getTimezoneOffset() as previous answers have stated is incorrect. First, you must think of all Dates/Times as already being UTC with a timezone modifier for display purposes.</p>\n\n<p>Again, browsers may differ, however, Date.getTime() returns the number of milliseconds since 1970-01-01 UTC/GMT. If you create a new Date using this number as I do above, it will be UTC/GMT.  However, if you display it by calling .toString() it will appear to be in your local timezone because .toString() uses your local timezone, not the timezone of the Date object it is called on.</p>\n\n<p>I have also found that if you call .getTimezoneOffset() on a date, it will return your local timezone, not the timezone of the date object you called it on (I can't verify this to be standard however).</p>\n\n<p>In my browser, adding 60000 * Date.getTimezoneOffset() creates a DateTime that is <strong>not UTC</strong>. However when displayed within my browser (ex: .toString() ), it displays a DateTime in my local timezone that would be correct UTC time if timezone info is ignored.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This function works beautifully for me.</p>\n\n<pre><code>function ParseDateForSave(dateValue) {\n    // create a new date object\n    var newDate = new Date(parseInt(dateValue.substr(6)));\n\n    // return the UTC version of the date\n    return newDate.toISOString();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Convert to ISO without changing date/time</strong></p>\n\n<pre><code>var now = new Date(); // Fri Feb 20 2015 19:29:31 GMT+0530 (India Standard Time) \nvar isoDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString();\n//OUTPUT : 2015-02-20T19:29:31.238Z\n</code></pre>\n\n<p><strong>Convert to ISO with change in date/time(date/time will be changed)</strong></p>\n\n<pre><code>isoDate = new Date(now).toISOString();\n//OUTPUT : 2015-02-20T13:59:31.238Z \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/t7v660ea/2/\" rel=\"nofollow\">Fiddle link</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Suppose a user of your website enters a date range.</p>\n\n<pre><code>2009-1-1 to 2009-1-3\n</code></pre>\n\n<p>You need to send this date to a server for some processing, but the server expects all dates and times to be in UTC. </p>\n\n<p>Now suppose the user is in Alaska or Hawaii or Fiji. Since they are in a timezone quite different from UTC, the date range needs to be converted to something like this:</p>\n\n<pre><code>2009-1-1T8:00:00 to 2009-1-4T7:59:59\n</code></pre>\n\n<p>Using the JavaScript Date object, how would you convert the first \"localized\" date range into something the server will understand?</p>\n",
            "last_activity_date": 1425973761,
            "question_id": 948532,
            "score": 198,
            "tags": [
                "javascript",
                "date",
                "utc"
            ],
            "title": "How do you convert a JavaScript date to UTC?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Not sure about this, but have you tried adding this to your source:</p>\n\n<pre><code>debugger;\n</code></pre>\n\n<p>Works in most, if not all browsers. Just place it somewhere in your code, and it will act like a breakpoint.</p>\n",
                    "is_accepted": false,
                    "score": 268
                },
                {
                    "body": "<p>Windows: <kbd>CTRL</kbd>-<kbd>SHIFT</kbd>-<kbd>J</kbd></p>\n\n<p>Mac: <kbd>\u2325</kbd>-<kbd>\u2318</kbd>-<kbd>J</kbd></p>\n\n<p>Also available through the wrench menu (Tools > JavaScript Console):</p>\n\n<p><img src=\"http://i.stack.imgur.com/Ktv4E.png\" alt=\"JavaScript Console Menu\"></p>\n",
                    "is_accepted": true,
                    "score": 228
                },
                {
                    "body": "<p>Ctrl+Shift+J    Opens Developer Tools.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>In Chrome 8.0.552 on a Mac, you can find this under View/Developer/JavaScript Console ... or you can use <kbd>ALT</kbd>+<kbd>CMD</kbd>+<kbd>J</kbd></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Windows and Linux:</p>\n\n<p><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> keys to open Developer Tools</p>\n\n<p><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd> to open Developer Tools and bring focus to the Console.</p>\n\n<p><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd> to toggle Inspect Element mode.</p>\n\n<p>Mac:</p>\n\n<p><kbd>\u2325</kbd> + <kbd>\u2318</kbd> + <kbd>I</kbd> keys to open Developer Tools</p>\n\n<p><kbd>\u2325</kbd> + <kbd>\u2318</kbd> + <kbd>J</kbd> to open Developer Tools and bring focus to the Console.</p>\n\n<p><kbd>\u2325</kbd> + <kbd>\u2318</kbd> + <kbd>C</kbd> to toggle Inspect Element mode.</p>\n\n<p><a href=\"http://code.google.com/intl/de-DE/chrome/devtools/docs/overview.html\" rel=\"nofollow\">Source</a></p>\n\n<p><a href=\"http://code.google.com/intl/de-DE/chrome/devtools/docs/shortcuts.html\" rel=\"nofollow\">Other shortcuts</a></p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>You can also consider using Eclipse-based debugger for Chrome/V8. It is integrated in Eclipse IDE so you can edit and debug the same files. It also has live editing feature.</p>\n\n<p><a href=\"http://code.google.com/p/chromedevtools/\" rel=\"nofollow\">http://code.google.com/p/chromedevtools/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here you can find the shortcuts to access the developer tools</p>\n\n<p><a href=\"http://code.google.com/intl/de-DE/chrome/devtools/docs/shortcuts.html\" rel=\"nofollow\">http://code.google.com/intl/de-DE/chrome/devtools/docs/shortcuts.html</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Shift+Control+I opens the Developer tool window. From bottom-left second image (that looks like <img src=\"http://i.stack.imgur.com/ZHsLH.png\" alt=\"show Console\"> this) will open/hide the console for you. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Press F12 Function key in chrome browser to launch Javascript debugger and then Click Scripts\"\nChoose Javascript file on top and place the break point to debugger the javascript</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>from the console in chrome,  you can do <code>console.log(data_to_be_displayed)</code></p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>You can find here JavaScript debugger tool's full description for GoogleChrome</p>\n\n<p><a href=\"https://developers.google.com/chrome-developer-tools/docs/javascript-debugging\" rel=\"nofollow\">Debugging JavaScript</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://i.stack.imgur.com/6pidj.png\" rel=\"nofollow\">For mac users go to Google Chrome--> View-->Developer-->JavascriptConsole</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>When using Google Chrome, I want to debug some javascript.  How can I do that?</p>\n",
            "last_activity_date": 1422486085,
            "question_id": 66420,
            "score": 232,
            "tags": [
                "javascript",
                "google-chrome",
                "debugging",
                "google-chrome-devtools"
            ],
            "title": "How do you launch the javascript debugger in Google Chrome?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Check the position of the window relative to the parent.  Chrome makes the window appear <em>almost</em> off-screen.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Jason's answer is the only method I can think of too, but relying on position like that is a little bit dodgy!</p>\n\n<p>These days, you don't really need to ask the question \u201cwas my unsolicited popup blocked?\u201d, because the answer is invariably \u201cyes\u201d\u2009\u2014\u2009all the major browsers have the popup blocker turned on by default. Best approach is only ever to window.open() in response to a direct click, which is almost always allowed.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Well the \"magical time\" you speak of is probably when the popup's DOM has been loaded. Or else it might be when everything (images, outboard CSS, etc.) has been loaded. You could test this easily by adding a very large graphic to the popup (clear your cache first!). If you were using a Javascript Framework like jQuery (or something similar), you could use the ready() event (or something similar) to wait for the DOM to load before checking the window offset. The danger in this is that Safari detection works in a conflicting way: the popup's DOM will never be ready() in Safari because it'll give you a valid handle for the window you're trying to open -- whether it actually opens or not. (in fact, i believe your popup test code above won't work for safari.)</p>\n\n<p>I think the best thing you can do is wrap your test in a setTimeout() and give the popup 3-5 seconds to complete loading before running the test. It's not perfect, but it should work at least 95% of the time.</p>\n\n<p>Here's the code I use for cross-browser detection, without the Chrome part.</p>\n\n<pre><code>function _hasPopupBlocker(poppedWindow) {\n    var result = false;\n\n    try {\n        if (typeof poppedWindow == 'undefined') {\n            // Safari with popup blocker... leaves the popup window handle undefined\n            result = true;\n        }\n        else if (poppedWindow &amp;&amp; poppedWindow.closed) {\n            // This happens if the user opens and closes the client window...\n            // Confusing because the handle is still available, but it's in a \"closed\" state.\n            // We're not saying that the window is not being blocked, we're just saying\n            // that the window has been closed before the test could be run.\n            result = false;\n        }\n        else if (poppedWindow &amp;&amp; poppedWindow.test) {\n            // This is the actual test. The client window should be fine.\n            result = false;\n        }\n        else {\n            // Else we'll assume the window is not OK\n            result = true;\n        }\n\n    } catch (err) {\n        //if (console) {\n        //    console.warn(\"Could not access popup window\", err);\n        //}\n    }\n\n    return result;\n}\n</code></pre>\n\n<p>What I do is run this test from the parent and wrap it in a setTimeout(), giving the child window 3-5 seconds to load. In the child window, you need to add a test function:</p>\n\n<p>function test() {}</p>\n\n<p>The popup blocker detector tests to see whether the \"test\" function exists as a member of the child window.</p>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>HI </p>\n\n<p>I modified the solutions described above slightly and think that it is working for Chrome at least.\nMy solution is made to detect if popup is blocked when the main page is opened, not when popup is opened, but i am sure there are some people that can modify it.:-)\nThe drawback here is that the popup-window is displayed for a couple of seconds (might be possible to shorten a bit) when there is no popup-blocker.</p>\n\n<p>I put this in the  section of my 'main' window</p>\n\n<pre><code>&lt;script type=\"text/JavaScript\" language=\"JavaScript\"&gt;\n\n var mine = window.open('popuptest.htm','popuptest','width=1px,height=1px,left=0,top=0,scrollbars=no');\n if(!mine|| mine.closed || typeof mine.closed=='undefined')\n  {\n    popUpsBlocked = true       \n    alert('Popup blocker detected ');\n    if(mine)\n      mine.close();\n }\n else\n {\n    popUpsBlocked = false    \n    var cookieCheckTimer = null;\n    cookieCheckTimer =  setTimeout('testPopup();', 3500);\n }\n\n\nfunction testPopup()\n{\n  if(mine)\n  {\n    if(mine.test())\n    {\n       popUpsBlocked = false;\n    }\n    else\n    {\n        alert('Popup blocker detected ');\n         popUpsBlocked = true;\n     }\n    mine.close();\n}\n\n} \n&lt;/script&gt;\n</code></pre>\n\n<p>The popuptest looks like this:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n&lt;head&gt;\n    &lt;title&gt;Popup test&lt;/title&gt;\n&lt;script type=\"text/javascript\" language=\"Javascript\"&gt;\n   function test() {if(window.innerHeight!=0){return true;} else return false;}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>As i call the test-function on the popup-page after 3500 ms the innerheight has been set correctly by Chrome.</p>\n\n<p>I use the variable popUpsBlocked to know if the popups are displayed or not in other javascripts.\ni.e </p>\n\n<pre><code>function ShowConfirmationMessage()\n{\nif(popUpsBlocked)\n { \n  alert('Popups are blocked, can not display confirmation popup. A mail will be sent with the confirmation.');\n } \n else\n { \n  displayConfirmationPopup();\n }\n mailConfirmation();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had a similar problem with popups not opening in Chrome. I was frustrated because I wasn't trying to do something sneaky, like an onload popup, just opening a window when the user clicked. I was DOUBLY frustrated because running my function which included the window.open() from the firebug command line worked, while actually clicking on my link didn't! Here was my solution:</p>\n\n<p>Wrong way: running window.open() from an event listener (in my case, dojo.connect to the onclick event method of a DOM node).</p>\n\n<pre><code>dojo.connect(myNode, \"onclick\", function() {\n    window.open();\n}\n</code></pre>\n\n<p>Right way: assigning a function to the onclick property of the node that called window.open().</p>\n\n<pre><code>myNode.onclick = function() {\n    window.open();\n}\n</code></pre>\n\n<p>And, of course, I can still do event listeners for that same onclick event if I need to. With this change, I could open my windows even though Chrome was set to \"Do not allow any site to show pop-ups\". Joy.</p>\n\n<p>If anyone wise in the ways of Chrome can tell the rest of us why it makes a difference, I'd love to hear it, although I suspect it's just an attempt to shut the door on malicious programmatic popups.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As far as I can tell (from what I've tested) Chrome returns a window object with location of 'about:blank'.\nSo, the following should work for all browsers:</p>\n\n<pre><code>var newWin = window.open(url);\nif(!newWin || newWin.closed || typeof newWin.closed=='undefined' || newWin.location=='about:blank')\n{\n    //POPUP BLOCKED\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a version that is currently working in Chrome. Just a small alteration away from Rich's solution, though I added in a wrapper that handles the timing too.</p>\n\n<pre><code>function checkPopupBlocked(poppedWindow) {\n setTimeout(function(){doCheckPopupBlocked(poppedWindow);}, 5000);\n}\n\nfunction doCheckPopupBlocked(poppedWindow) {\n\n    var result = false;\n\n    try {\n        if (typeof poppedWindow == 'undefined') {\n            // Safari with popup blocker... leaves the popup window handle undefined\n            result = true;\n        }\n        else if (poppedWindow &amp;&amp; poppedWindow.closed) {\n            // This happens if the user opens and closes the client window...\n            // Confusing because the handle is still available, but it's in a \"closed\" state.\n            // We're not saying that the window is not being blocked, we're just saying\n            // that the window has been closed before the test could be run.\n            result = false;\n        }\n        else if (poppedWindow &amp;&amp; poppedWindow.outerWidth == 0) {\n            // This is usually Chrome's doing. The outerWidth (and most other size/location info)\n         // will be left at 0, EVEN THOUGH the contents of the popup will exist (including the\n         // test function we check for next). The outerWidth starts as 0, so a sufficient delay\n         // after attempting to pop is needed.\n            result = true;\n        }\n        else if (poppedWindow &amp;&amp; poppedWindow.test) {\n            // This is the actual test. The client window should be fine.\n            result = false;\n        }\n        else {\n            // Else we'll assume the window is not OK\n            result = true;\n        }\n\n    } catch (err) {\n        //if (console) {\n        //    console.warn(\"Could not access popup window\", err);\n        //}\n    }\n\n    if(result)\n     alert(\"The popup was blocked. You must allow popups to use this site.\");\n}\n</code></pre>\n\n<p>To use it just do this:</p>\n\n<pre><code>var popup=window.open('location',etc...);\ncheckPopupBlocked(popup);\n</code></pre>\n\n<p>If the popup get's blocked, the alert message will display after the 5 second grace period (you can adjust that, but 5 seconds should be quite safe).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This fragment incorporates all of the above - For some reason - StackOverflow is excluding the first and last lines of code in the code block below, so I wrote a blog on it. For a full explanation and the rest of the (downloadable) code have a look at\n<a href=\"http://thecodeabode.blogspot.com/2010/11/window-open-popup-blocker-detect-for.html\" rel=\"nofollow\">my blog at thecodeabode.blogspot.com</a></p>\n\n<pre><code>var PopupWarning = {\n\n    init : function()\n    {\n\n        if(this.popups_are_disabled() == true)\n        {\n            this.redirect_to_instruction_page();\n        }\n    },\n\n    redirect_to_instruction_page : function()\n    {\n        document.location.href = \"http://thecodeabode.blogspot.com\";\n    },\n\n    popups_are_disabled : function()\n    {\n        var popup = window.open(\"http://localhost/popup_with_chrome_js.html\", \"popup_tester\", \"width=1,height=1,left=0,top=0\");\n\n        if(!popup || popup.closed || typeof popup == 'undefined' || typeof popup.closed=='undefined')\n        {\n            return true;\n        }\n\n        window.focus();\n        popup.blur();\n\n        //\n        // Chrome popup detection requires that the popup validates itself - so we need to give\n        // the popup time to load, then call js on the popup itself\n        //\n        if(navigator &amp;&amp; (navigator.userAgent.toLowerCase()).indexOf(\"chrome\") &gt; -1)\n        {\n            var on_load_test = function(){PopupWarning.test_chrome_popups(popup);};     \n            var timer = setTimeout(on_load_test, 60);\n            return;\n        }\n\n\n        popup.close();\n        return false;\n    },\n\n    test_chrome_popups : function(popup)\n    {\n        if(popup &amp;&amp; popup.chrome_popups_permitted &amp;&amp; popup.chrome_popups_permitted() == true)\n        {\n            popup.close();\n            return true;\n        }\n\n        //\n        // If the popup js fails - popups are blocked\n        //\n        this.redirect_to_instruction_page();\n    }\n};\n\nPopupWarning.init();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Rich's answer isn't going to work anymore for Chrome. Looks like Chrome actually executes any Javascript in the popup window now. I ended up checking for a screenX value of 0 to check for blocked popups. I also think I found a way to guarantee that this property is final before checking. This only works for popups on your domain, but you can add an onload handler like this:</p>\n\n<pre><code>var myPopup = window.open(\"site-on-my-domain\", \"screenX=100\");\nif (!myPopup)\n    alert(\"failed for most browsers\");\nelse {\n    myPopup.onload = function() {\n        setTimeout(function() {\n            if (myPopup.screenX === 0)\n                alert(\"failed for chrome\");\n        }, 0);\n    };\n}\n</code></pre>\n\n<p>As many have reported, the \"screenX\" property sometimes reports non-zero for failed popups, even after onload. I experienced this behavior as well, but if you add the check after a zero ms timeout, the screenX property always seems to output a consistent value.</p>\n\n<p>Let me know if there are ways to make this script more robust. Seems to work for my purposes though.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just one improvement to InvisibleBacon's snipet (tested in IE9, Safari 5, Chrome 9 and FF 3.6):</p>\n\n<pre><code>var myPopup = window.open(\"popupcheck.htm\", \"\", \"directories=no,height=150,width=150,menubar=no,resizable=no,scrollbars=no,status=no,titlebar=no,top=0,location=no\");\nif (!myPopup)\n    alert(\"failed for most browsers\");\nelse {\n    myPopup.onload = function() {\n        setTimeout(function() {\n            if (myPopup.screenX === 0) {\n                alert(\"failed for chrome\");\n            } else {\n                // close the test window if popups are allowed.\n                myPopup.close();  \n            }\n        }, 0);\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>function openPopUpWindow(format)\n{   \n    var win = window.open('popupShow.html',\n                          'ReportViewer',\n                          'width=920px,height=720px,left=50px,top=20px,location=no,directories=no,status=no,menubar=no,toolbar=no,resizable=1,maximize:yes,scrollbars=0');\n\n    if (win == null || typeof(win) == \"undefined\" || (win == null &amp;&amp; win.outerWidth == 0) || (win != null &amp;&amp; win.outerHeight == 0) || win.test == \"undefined\") \n    {\n        alert(\"The popup was blocked. You must allow popups to use this site.\");  \n    }\n    else if (win)\n    {\n        win.onload = function()\n        {          \n            if (win.screenX === 0) {\n                alert(\"The popup was blocked. You must allow popups to use this site.\");\n                win.close();\n            } \n        };\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This worked for me:</p>\n\n<pre><code>    cope.PopupTest.params = 'height=1,width=1,left=-100,top=-100,location=no,toolbar=no,menubar=no,scrollbars=no,resizable=no,directories=no,status=no';\n    cope.PopupTest.testWindow = window.open(\"popupTest.htm\", \"popupTest\", cope.PopupTest.params);\n\n    if( !cope.PopupTest.testWindow\n        || cope.PopupTest.testWindow.closed\n        || (typeof cope.PopupTest.testWindow.closed=='undefined')\n        || cope.PopupTest.testWindow.outerHeight == 0\n        || cope.PopupTest.testWindow.outerWidth == 0\n        ) {\n        // pop-ups ARE blocked\n        document.location.href = 'popupsBlocked.htm';\n    }\n    else {\n        // pop-ups are NOT blocked\n        cope.PopupTest.testWindow.close();\n    }\n</code></pre>\n\n<p>The outerHeight and outerWidth are for chrome because the 'about:blank' trick from above doesn't work in chrome anymore.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The following is a <strong>jQuery</strong> solution to popup blocker checking. It has been tested in FF (v11), Safari (v6), Chrome (v23.0.127.95) &amp; IE (v7 &amp; v9). Update the _displayError function to handle the error message as you see fit.</p>\n\n<pre><code>var popupBlockerChecker = {\n        check: function(popup_window){\n            var _scope = this;\n            if (popup_window) {\n                if(/chrome/.test(navigator.userAgent.toLowerCase())){\n                    setTimeout(function () {\n                        _scope._is_popup_blocked(_scope, popup_window);\n                     },200);\n                }else{\n                    popup_window.onload = function () {\n                        _scope._is_popup_blocked(_scope, popup_window);\n                    };\n                }\n            }else{\n                _scope._displayError();\n            }\n        },\n        _is_popup_blocked: function(scope, popup_window){\n            if ((popup_window.innerHeight &gt; 0)==false){ scope._displayError(); }\n        },\n        _displayError: function(){\n            alert(\"Popup Blocker is enabled! Please add this site to your exception list.\");\n        }\n    };\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var popup = window.open(\"http://www.google.ca\", '_blank');\npopupBlockerChecker.check(popup);\n</code></pre>\n\n<p>Hope this helps! :)</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Wow there sure are a lot of solutions here. This is mine, it uses solutions taken from the <a href=\"http://stackoverflow.com/a/1089792/141881\">current accepted answer</a> (which doesn't work in latest Chrome and requires wrapping it in a timeout), as well as a related solution on <a href=\"http://stackoverflow.com/a/13652829\">this thread</a> (which is actually vanilla JS, not jQuery).</p>\n\n<p>Mine uses a callback architecture which will be sent <code>true</code> when the popup is blocked and <code>false</code> otherwise.</p>\n\n<pre><code>window.isPopupBlocked = function(popup_window, cb)\n{\n    var CHROME_CHECK_TIME = 2000;       // the only way to detect this in Chrome is to wait a bit and see if the window is present\n\n    function _is_popup_blocked(popup)\n    {\n        return !popup.innerHeight;\n    }\n\n    if (popup_window) {\n        if (popup_window.closed) {\n            // opened OK but was closed before we checked\n            cb(false);\n            return;\n        }\n        if (/chrome/.test(navigator.userAgent.toLowerCase())) {\n            // wait a bit before testing the popup in chrome\n            setTimeout(function() {\n                cb(_is_popup_blocked(popup_window));\n            }, CHROME_CHECK_TIME);\n        } else {\n            // for other browsers, add an onload event and check after that\n            popup_window.onload = function() {\n                cb(_is_popup_blocked(popup_window));\n            };\n        }\n    } else {\n        cb(true);\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm going to just copy/paste the answer provided here: <a href=\"http://stackoverflow.com/a/27725432/892099\">http://stackoverflow.com/a/27725432/892099</a> by DanielB . works on chrome 40 and it's very clean. no dirty hacks or waiting involves.</p>\n\n<pre><code>function popup(urlToOpen) {\n  var popup_window=window.open(urlToOpen,\"myWindow\",\"toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, copyhistory=yes, width=400, height=400\");            \n  try {\n    popup_window.focus();   \n  }\n  catch (e) {\n    alert(\"Pop-up Blocker is enabled! Please add this site to your exception list.\");\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am aware of javascript techniques to detect whether a popup is blocked in other browsers (as described in <a href=\"http://stackoverflow.com/questions/2914/how-can-i-detect-if-a-browser-is-blocking-an-popup\">the answer to this question</a>).  Here's the basic test:</p>\n\n<pre><code>var newWin = window.open(url);\n\nif(!newWin || newWin.closed || typeof newWin.closed=='undefined')\n{\n    //POPUP BLOCKED\n}\n</code></pre>\n\n<p>But this does not work in Chrome.  The \"POPUP BLOCKED\" section is never reached when the popup is blocked.</p>\n\n<p>Of course, the test is working to an extent since Chrome doesn't actually block the popup, but opens it in a tiny minimized window at the lower right corner which lists \"blocked\" popups.</p>\n\n<p>What I would like to do is be able to tell if the popup was blocked by Chrome's popup blocker.  I try to avoid browser sniffing in favor of feature detection. Is there a way to do this without browser sniffing?</p>\n\n<p><strong>Edit</strong>: I have now tried making use of <code>newWin.outerHeight</code>, <code>newWin.left</code>, and other similar properties to accomplish this.  Google Chrome returns all position and height values as 0 when the popup is blocked.</p>\n\n<p>Unfortunately, it also returns the same values even if the popup is actually opened for an unknown amount of time.  After some magical period (a couple of seconds in my testing), the location and size information is returned as the correct values.  In other words, I'm still no closer to figuring this out.  Any help would be appreciated.</p>\n",
            "last_activity_date": 1423286843,
            "question_id": 668286,
            "score": 80,
            "tags": [
                "javascript",
                "google-chrome",
                "popup"
            ],
            "title": "Detect blocked popup in Chrome"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You have to bind that method to the document object. Look:</p>\n\n<pre><code>&gt;&gt;&gt; $ = document.getElementById\ngetElementById()\n&gt;&gt;&gt; $('bn_home')\n[Exception... \"Cannot modify properties of a WrappedNative\" ... anonymous :: line 72 data: no]\n&gt;&gt;&gt; $.call(document, 'bn_home')\n&lt;body id=\"bn_home\" onload=\"init();\"&gt;\n</code></pre>\n\n<p>When you\u2019re doing a simple alias, the function is called on the global object, not on the document object. Use a technique called closures to fix this:</p>\n\n<pre><code>function makeAlias(object, name) {\n    var fn = object ? object[name] : null;\n    if (typeof fn == 'undefined') return function () {}\n    return function () {\n        return fn.apply(object, arguments)\n    }\n}\n$ = makeAlias(document, 'getElementById');\n\n&gt;&gt;&gt; $('bn_home')\n&lt;body id=\"bn_home\" onload=\"init();\"&gt;\n</code></pre>\n\n<p>This way you don\u2019t loose the reference to the original object. </p>\n\n<p>In 2012, there is the new <code>bind</code> method from ES5 that allows us to do this in a fancier way:</p>\n\n<pre><code>&gt;&gt;&gt; $ = document.getElementById.bind(document)\n&gt;&gt;&gt; $('bn_home')\n&lt;body id=\"bn_home\" onload=\"init();\"&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>You actually <em>can't</em> \"pure alias\" a function on a predefined object.  Therefore, the closest to aliasing you can get without wrapping is by staying within the same object:</p>\n\n<pre><code>&gt;&gt;&gt; document.s = document.getElementById;\n&gt;&gt;&gt; document.s('myid');\n&lt;div id=\"myid\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>I dug deep to understand this particular behavior and I think I have found a good explanation.</p>\n\n<p>Before I get in to why you are not able to alias <code>document.getElementById</code>, I will try to explain how JavaScript functions/objects work.</p>\n\n<p>Whenever you invoke a JavaScript function, the JavaScript interpreter determines a scope and passes it to the function.</p>\n\n<p>Consider following function:</p>\n\n<pre><code>function sum(a, b)\n{\n    return a + b;\n}\n\nsum(10, 20); // returns 30;\n</code></pre>\n\n<p>This function is declared in the Window scope and when you invoke it the value of <code>this</code> inside the sum function will be the global <code>Window</code> object.</p>\n\n<p>For the 'sum' function, it doesn't matter what the value of 'this' is as it is not using it.</p>\n\n<hr>\n\n<p>Consider following function: </p>\n\n<pre><code>function Person(birthDate)\n{\n    this.birthDate = birthDate;    \n    this.getAge = function() { return new Date().getFullYear() - this.birthDate.getFullYear(); };\n}\n\nvar dave = new Person(new Date(1909, 1, 1)); \ndave.getAge(); //returns 100.\n</code></pre>\n\n<p>When you call dave.getAge function, the JavaScript interpreter sees that you are calling getAge function on the <code>dave</code> object, so it sets <code>this</code> to <code>dave</code> and calls the <code>getAge</code> function. <code>getAge()</code> will correctly return <code>100</code>.</p>\n\n<hr>\n\n<p>You may know that in JavaScript you can specify the scope using the <code>apply</code> method. Let's try that.</p>\n\n<pre><code>var dave = new Person(new Date(1909, 1, 1)); //Age 100 in 2009\nvar bob = new Person(new Date(1809, 1, 1)); //Age 200 in 2009\n\ndave.getAge.apply(bob); //returns 200.\n</code></pre>\n\n<p>In the above line, instead of letting JavaScript decide the scope, you are passing the scope manually as the <code>bob</code> object. <code>getAge</code> will now return <code>200</code> even though you 'thought' you called <code>getAge</code> on the <code>dave</code> object.</p>\n\n<hr>\n\n<p>What's the point of all of the above? Functions are 'loosely' attached to your JavaScript objects. E.g. you can do</p>\n\n<pre><code>var dave = new Person(new Date(1909, 1, 1));\nvar bob = new Person(new Date(1809, 1, 1));\n\nbob.getAge = function() { return -1; };\n\nbob.getAge(); //returns -1\ndave.getAge(); //returns 100\n</code></pre>\n\n<hr>\n\n<p>Let's take the next step.</p>\n\n<pre><code>var dave = new Person(new Date(1909, 1, 1));\nvar ageMethod = dave.getAge;\n\ndave.getAge(); //returns 100;\nageMethod(); //returns ?????\n</code></pre>\n\n<p><code>ageMethod</code> execution throws an error! What happened?</p>\n\n<p>If you read my above points carefully, you would note that <code>dave.getAge</code> method was called with <code>dave</code> as <code>this</code> object whereas JavaScript could not determine the 'scope' for <code>ageMethod</code> execution. So it passed global 'Window' as 'this'. Now as <code>window</code> doesn't have a <code>birthDate</code> property, <code>ageMethod</code> execution will fail. </p>\n\n<p>How to fix this? Simple,</p>\n\n<pre><code>ageMethod.apply(dave); //returns 100.\n</code></pre>\n\n<hr>\n\n<p>Did all of the above make sense? If it does, then you will be able to explain why you are not able to alias <code>document.getElementById</code>:</p>\n\n<pre><code>var $ = document.getElementById;\n\n$('someElement'); \n</code></pre>\n\n<p><code>$</code> is called with <code>window</code> as <code>this</code> and if <code>getElementById</code> implementation is expecting <code>this</code> to be <code>document</code>, it will fail.</p>\n\n<p>Again to fix this, you can do</p>\n\n<pre><code>$.apply(document, ['someElement']);\n</code></pre>\n\n<p>So why does it work in Internet Explorer? </p>\n\n<p>I don't know the internal implementation of <code>getElementById</code> in IE, but a comment in jQuery source (<code>inArray</code> method implementation) says that in IE, <code>window == document</code>. If that's the case, then aliasing <code>document.getElementById</code> should work in IE.  </p>\n\n<p>To illustrate this further, I have created an elaborate example. Have a look at the <code>Person</code> function below.</p>\n\n<pre><code>function Person(birthDate)\n{\n    var self = this;\n\n    this.birthDate = birthDate;\n\n    this.getAge = function()\n    {\n        //Let's make sure that getAge method was invoked \n        //with an object which was constructed from our Person function.\n        if(this.constructor == Person)\n            return new Date().getFullYear() - this.birthDate.getFullYear();\n        else\n            return -1;\n    };\n\n    //Smarter version of getAge function, it will always refer to the object\n    //it was created with.\n    this.getAgeSmarter = function()\n    {\n        return self.getAge();\n    };\n\n    //Smartest version of getAge function.\n    //It will try to use the most appropriate scope.\n    this.getAgeSmartest = function()\n    {\n        var scope = this.constructor == Person ? this : self;\n        return scope.getAge();\n    };\n\n}\n</code></pre>\n\n<p>For the <code>Person</code> function above, here's how the various <code>getAge</code> methods will behave.</p>\n\n<p>Let's create two objects using <code>Person</code> function.</p>\n\n<pre><code>var yogi = new Person(new Date(1909, 1,1)); //Age is 100\nvar anotherYogi = new Person(new Date(1809, 1, 1)); //Age is 200\n</code></pre>\n\n<hr>\n\n<pre><code>console.log(yogi.getAge()); //Output: 100.\n</code></pre>\n\n<p>Straight forward, getAge method gets <code>yogi</code> object as <code>this</code> and outputs <code>100</code>.</p>\n\n<hr>\n\n<pre><code>var ageAlias = yogi.getAge;\nconsole.log(ageAlias()); //Output: -1\n</code></pre>\n\n<p>JavaScript interepreter sets <code>window</code> object as <code>this</code> and our <code>getAge</code> method will return <code>-1</code>.</p>\n\n<hr>\n\n<pre><code>console.log(ageAlias.apply(yogi)); //Output: 100\n</code></pre>\n\n<p>If we set the correct scope, you can use <code>ageAlias</code> method.</p>\n\n<hr>\n\n<pre><code>console.log(ageAlias.apply(anotherYogi)); //Output: 200\n</code></pre>\n\n<p>If we pass in some other person object, it will still calculate age correctly.</p>\n\n<pre><code>var ageSmarterAlias = yogi.getAgeSmarter;    \nconsole.log(ageSmarterAlias()); //Output: 100\n</code></pre>\n\n<p>The <code>ageSmarter</code> function captured the original <code>this</code> object so now you don't have to worry about supplying correct scope.</p>\n\n<hr>\n\n<pre><code>console.log(ageSmarterAlias.apply(anotherYogi)); //Output: 100 !!!\n</code></pre>\n\n<p>The problem with <code>ageSmarter</code> is that you can never set the scope to some other object. </p>\n\n<hr>\n\n<pre><code>var ageSmartestAlias = yogi.getAgeSmartest;\nconsole.log(ageSmartestAlias()); //Output: 100\nconsole.log(ageSmartestAlias.apply(document)); //Output: 100\n</code></pre>\n\n<p>The <code>ageSmartest</code> function will use the original scope if an invalid scope is supplied.</p>\n\n<hr>\n\n<pre><code>console.log(ageSmartestAlias.apply(anotherYogi)); //Output: 200\n</code></pre>\n\n<p>You will still be able to pass another <code>Person</code> object to <code>getAgeSmartest</code>. :)</p>\n",
                    "is_accepted": false,
                    "score": 166
                },
                {
                    "body": "<p>This is a short answer. </p>\n\n<p>The following makes a copy of (a reference to) the function. The problem is that now the function is on the <code>window</code> object when it was designed to live on the <code>document</code> object.</p>\n\n<pre><code>window.myAlias = document.getElementById\n</code></pre>\n\n<p>The alternatives are</p>\n\n<ul>\n<li>to use a wrapper (already mentioned by Fabien M\u00e9nager)</li>\n<li><p>or you can use two aliases.</p>\n\n<pre><code>window.d = document // A renamed reference to the object\nwindow.d.myAlias = window.d.getElementById\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Another short answer, just for wrapping/aliasing <code>console.log</code> and similar logging methods. They all expect to be in the <code>console</code> context.</p>\n\n<p>This is usable when wrapping <code>console.log</code> with some fallbacks, in case you or your users have run into trouble when <a href=\"http://stackoverflow.com/questions/8095348/website-with-js-doesnt-work-in-ie9-until-the-developer-tools-is-activated\">using a browser that doesn't (always) support it</a>. This is not a full solution to that problem though, as it needs to be expanded checks and a fallback - your mileage may vary.</p>\n\n<p>Example using warnings</p>\n\n<pre><code>var warn = function(){ console.warn.apply(console, arguments); }\n</code></pre>\n\n<p>Then use it as usual</p>\n\n<pre><code>warn(\"I need to debug a number and an object\", 9999, { \"user\" : \"Joel\" });\n</code></pre>\n\n<p>If you prefer to see your logging arguments wrapped in an array (I do, most of the time), substitute <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\"><code>.apply(...)</code></a> with <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\"><code>.call(...)</code></a>.</p>\n\n<p>Should work with <code>console.log()</code>, <code>console.debug()</code>, <code>console.info()</code>, <code>console.warn()</code>, <code>console.error()</code>. See also <a href=\"https://developer.mozilla.org/en/Error_Console\" rel=\"nofollow\"><code>console</code> on MDN</a>.</p>\n\n<p><a href=\"/questions/tagged/console\" class=\"post-tag\" title=\"show questions tagged 'console'\" rel=\"tag\">console</a> <a href=\"/questions/tagged/firebug\" class=\"post-tag\" title=\"show questions tagged 'firebug'\" rel=\"tag\">firebug</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In addition to other great answers, there's simple jQuery method <a href=\"http://api.jquery.com/jQuery.proxy/\" rel=\"nofollow\">$.proxy</a>. </p>\n\n<p>You can alias like this:</p>\n\n<pre><code>myAlias = $.proxy(document, 'getElementById');\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>myAlias = $.proxy(document.getElementById, document);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I was just reading <a href=\"http://stackoverflow.com/questions/954417/make-alias-to-document-getelementbyid-in-javascript\">this question</a> and wanted to try the alias method rather than the function-wrapper method, but I couldn't seem to get it to work in either Firefox 3 or 3.5beta4, or Google Chrome, both in their debug windows and in a test web page.</p>\n\n<p>Firebug:</p>\n\n<pre><code>&gt;&gt;&gt; window.myAlias = document.getElementById\nfunction()\n&gt;&gt;&gt; myAlias('item1')\n&gt;&gt;&gt; window.myAlias('item1')\n&gt;&gt;&gt; document.getElementById('item1')\n&lt;div id=\"item1\"&gt;\n</code></pre>\n\n<p>If I put it in a web page, the call to myAlias gives me this error:</p>\n\n<pre><code>uncaught exception: [Exception... \"Illegal operation on WrappedNative prototype object\" nsresult: \"0x8057000c (NS_ERROR_XPC_BAD_OP_ON_WN_PROTO)\" location: \"JS frame :: file:///[...snip...]/test.html :: &lt;TOP_LEVEL&gt; :: line 7\" data: no]\n</code></pre>\n\n<p>Chrome (with >>>'s inserted for clarity):</p>\n\n<pre><code>&gt;&gt;&gt; window.myAlias = document.getElementById\nfunction getElementById() { [native code] }\n&gt;&gt;&gt; window.myAlias('item1')\nTypeError: Illegal invocation\n&gt;&gt;&gt; document.getElementById('item1')\n&lt;div id=?\"item1\"&gt;?\n</code></pre>\n\n<p>And in the test page, I get the same \"Illegal invocation\".</p>\n\n<p>Am I doing something wrong?  Can anyone else reproduce this?</p>\n\n<p>Also, oddly enough, I just tried and it works in IE8.</p>\n",
            "last_activity_date": 1348824499,
            "question_id": 1007340,
            "score": 62,
            "tags": [
                "javascript",
                "function",
                "closures",
                "alias"
            ],
            "title": "JavaScript function aliasing doesn&#39;t seem to work"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Indeed, you should use directives, and there no event tied to the end of a ng-Repeat loop (as each element is constructed individually, and has it's own event). But a) using directives might be all you need and b) there are a few ng-Repeat specific properties you can use to make your \"on ngRepeat finished\" event.</p>\n\n<p>Specifically, if all you want is to style/add events to the whole of the table, you can do so using in a directive that encompasses all the ngRepeat elements. On the other hand, if you want to address each element specifically, you can use a directive within the ngRepeat, and it will act on each element, after it is created.</p>\n\n<p>Then, there are the $index, $first, $middle and $last properties you can use to trigger events. So for this HTML:</p>\n\n<pre><code>&lt;div ng-controller=\"Ctrl\" my-main-directive&gt;\n  &lt;div ng-repeat=\"thing in things\" my-repeat-directive&gt;\n    thing {{thing}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>You can use directives like so:</p>\n\n<pre><code>angular.module('myApp', [])\n.directive('myRepeatDirective', function() {\n  return function(scope, element, attrs) {\n    angular.element(element).css('color','blue');\n    if (scope.$last){\n      window.alert(\"im the last!\");\n    }\n  };\n})\n.directive('myMainDirective', function() {\n  return function(scope, element, attrs) {\n    angular.element(element).css('border','5px solid red');\n  };\n});\n</code></pre>\n\n<p>See it in action in this <a href=\"http://plnkr.co/edit/or5mys?p=preview\">Plunker</a>. Hope it helps!</p>\n",
                    "is_accepted": true,
                    "score": 112
                },
                {
                    "body": "<p>If you simply want to execute some code at the end of the loop, here's a slightly simpler variation that doesn't require extra event handling:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-controller=\"Ctrl\"&gt;\n  &lt;div class=\"thing\" ng-repeat=\"thing in things\" my-post-repeat-directive&gt;\n    thing {{thing}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>function Ctrl($scope) {\n  $scope.things = [\n    'A', 'B', 'C'  \n  ];\n}\n\nangular.module('myApp', [])\n.directive('myPostRepeatDirective', function() {\n  return function(scope, element, attrs) {\n    if (scope.$last){\n      // iteration is complete, do whatever post-processing\n      // is necessary\n      element.parent().css('border', '1px solid black');\n    }\n  };\n});\n</code></pre>\n\n<hr>\n\n<p><a href=\"http://plnkr.co/edit/icWaAW\"><strong>See a live demo.</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Here is a repeat-done directive that calls a specified function when true.  I have found that the called function must use $timeout with interval=0 before doing DOM manipulation, such as initializing tooltips on the rendered elements.  jsFiddle: <a href=\"http://jsfiddle.net/tQw6w/\">http://jsfiddle.net/tQw6w/</a></p>\n\n<p>In $scope.layoutDone, try commenting out the $timeout line and uncommenting the \"NOT CORRECT!\" line to see the difference in the tooltips.</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"feed in feedList\" repeat-done=\"layoutDone()\" ng-cloak&gt;\n    &lt;a href=\"{{feed}}\" title=\"view at {{feed | hostName}}\" data-toggle=\"tooltip\"&gt;{{feed | strip_http}}&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>angular.module('Repeat_Demo', [])\n\n    .directive('repeatDone', function() {\n        return function(scope, element, attrs) {\n            if (scope.$last) { // all are rendered\n                scope.$eval(attrs.repeatDone);\n            }\n        }\n    })\n\n    .filter('strip_http', function() {\n        return function(str) {\n            var http = \"http://\";\n            return (str.indexOf(http) == 0) ? str.substr(http.length) : str;\n        }\n    })\n\n    .filter('hostName', function() {\n        return function(str) {\n            var urlParser = document.createElement('a');\n            urlParser.href = str;\n            return urlParser.hostname;\n        }\n    })\n\n    .controller('AppCtrl', function($scope, $timeout) {\n\n        $scope.feedList = [\n            'http://feeds.feedburner.com/TEDTalks_video',\n            'http://feeds.nationalgeographic.com/ng/photography/photo-of-the-day/',\n            'http://sfbay.craigslist.org/eng/index.rss',\n            'http://www.slate.com/blogs/trending.fulltext.all.10.rss',\n            'http://feeds.current.com/homepage/en_US.rss',\n            'http://feeds.current.com/items/popular.rss',\n            'http://www.nytimes.com/services/xml/rss/nyt/HomePage.xml'\n        ];\n\n        $scope.layoutDone = function() {\n            //$('a[data-toggle=\"tooltip\"]').tooltip(); // NOT CORRECT!\n            $timeout(function() { $('a[data-toggle=\"tooltip\"]').tooltip(); }, 0); // wait...\n        }\n\n    })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>It may also be necessary when you check the <code>scope.$last</code> variable to wrap your trigger with a <code>setTimeout(someFn, 0)</code>. A <code>setTimeout 0</code> is an accepted technique in javascript and it was imperative for my <code>directive</code> to run correctly.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a simple approach using <code>ng-init</code> that doesn't even require a custom directive. It's worked well for me in certain scenarios e.g. needing to auto-scroll a div of ng-repeated items to a particular item on page load, so the scrolling function needs to wait until the <code>ng-repeat</code> has finished rendering to the DOM before it can fire.</p>\n\n<pre><code>&lt;div ng-controller=\"MyCtrl\"&gt;\n    &lt;div ng-repeat=\"thing in things\"&gt;\n        thing: {{ thing }}\n    &lt;/div&gt;\n    &lt;div ng-init=\"fireEvent()\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<hr>\n\n<pre><code>myModule.controller('MyCtrl', function($scope, $timeout){\n    $scope.things = ['A', 'B', 'C'];\n\n    $scope.fireEvent = function(){\n\n        // This will only run after the ng-repeat has rendered its things to the DOM\n        $timeout(function(){\n            $scope.$broadcast('thingsRendered');\n        }, 0);\n\n    };\n});\n</code></pre>\n\n<p>Note that this is only useful for functions you need to call one time after the ng-repeat renders initially. If you need to call a function whenever the ng-repeat contents are updated then you'll have to use one of the other answers on this thread with a custom directive.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Maybe a bit simpler approach with <code>ngInit</code> and Lodash's <a href=\"https://lodash.com/docs#debounce\" rel=\"nofollow\"><code>debounce</code></a> method without the need of custom directive:</p>\n\n<p>Controller:</p>\n\n<pre><code>$scope.items = [1, 2, 3, 4];\n\n$scope.refresh = _.debounce(function() {\n    // Debounce has timeout and prevents multiple calls, so this will be called \n    // once the iteration finishes\n    console.log('we are done');\n}, 0);\n</code></pre>\n\n<p>Template:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"item in items\" ng-init=\"refresh()\"&gt;{{item}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<hr>\n\n<h3>Update</h3>\n\n<p>There is even simpler pure AngularJS solution using ternary operator:</p>\n\n<p>Template:</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li ng-repeat=\"item in items\" ng-init=\"$last ? doSomething() : null\"&gt;{{item}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Be aware that <em>ngInit</em> uses pre-link compilation phase - i.e. the expression is invoked before child directives are processed. This means that still an asynchronous processing might be required.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is an improvment of the ideas expressed in other answers in order to show how to gain access to the ngRepeat properties ($index, $first, $middle, $last, $even, $odd) when using declarative syntax and isolate scope (Google recommended best practice) with an element-directive.  Note the primary difference: <code>scope.$parent.$last</code>.</p>\n\n<pre><code>angular.module('myApp', [])\n.directive('myRepeatDirective', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      someAttr: '='\n    },\n    link: function(scope, element, attrs) {\n      angular.element(element).css('color','blue');\n      if (scope.$parent.$last){\n        window.alert(\"im the last!\");\n      }\n    }\n  };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to call some jQuery function targeting div with table. That table is populated with <code>ng-repeat</code>.  </p>\n\n<p>When I call it on </p>\n\n<pre><code>$(document).ready()\n</code></pre>\n\n<p>I have no result.  </p>\n\n<p>Also </p>\n\n<pre><code>$scope.$on('$viewContentLoaded', myFunc);\n</code></pre>\n\n<p>doesn't help.</p>\n\n<p>Is there any way to execute function right after ng-repeat population completes? I've read an advice about using custom <code>directive</code>, but I have no clue how to use it with ng-repeat and my div...</p>\n",
            "last_activity_date": 1422970895,
            "question_id": 13471129,
            "score": 77,
            "tags": [
                "javascript",
                "jquery",
                "angularjs"
            ],
            "title": "ng-repeat finish event"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I think it actually depends on what are you going to do inside your <code>doSomething</code> function. If you are going to access <code>MyObject</code> properties using this keyword then you have to use that. But I think that the following code fragment will also work if you are not doing any special things using <code>object(MyObject)</code> properties.</p>\n\n<pre><code>function doSomething(){\n  .........\n}\n\n$(\"#foobar\").ready('click', function(){\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yeah, this appears to be a common standard.  Some coders use self, others use me.  It's used as a reference back to the \"real\" object as opposed to the event.</p>\n\n<p>It's something that took me a little while to really get, it does look odd at first.</p>\n\n<p>I usually do this right at the top of my object (excuse my demo code - it's more conceptual than anything else and isn't a lesson on excellent coding technique):</p>\n\n<pre><code>function MyObject(){\n  var me = this;\n\n  //Events\n  Click = onClick; //Allows user to override onClick event with their own\n\n  //Event Handlers\n  onClick = function(args){\n    me.MyProperty = args; //Reference me, referencing this refers to onClick\n    ...\n    //Do other stuff\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I haven't used jQuery, but in a library like Prototype you can bind functions to a specific scope.  So with that in mind your code would look like this:</p>\n\n<pre><code> $('#foobar').ready('click', this.doSomething.bind(this));\n</code></pre>\n\n<p>The bind method returns a new function that calls the original method with the scope you have specified.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>yep, it's quite a lifesaver (or better, a 'sanitysaver').  of course, i got downvoted for claiming that it's one of the blunders of bad language design in JS</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This question is not specific to jQuery, but specific to JavaScript in general. The core problem is how to \"channel\" a variable in embedded functions. This is the example:</p>\n\n<pre><code>var abc = 1; // we want to use this variable in embedded functions\n\nfunction xyz(){\n  console.log(abc); // it is available here!\n  function qwe(){\n    console.log(abc); // it is available here too!\n  }\n  ...\n};\n</code></pre>\n\n<p>This technique relies on using a closure. But it doesn't work with <code>this</code> because <code>this</code> is a pseudo variable that may change from scope to scope dynamically:</p>\n\n<pre><code>// we want to use \"this\" variable in embedded functions\n\nfunction xyz(){\n  // \"this\" is different here!\n  console.log(this); // not what we wanted!\n  function qwe(){\n    // \"this\" is different here too!\n    console.log(this); // not what we wanted!\n  }\n  ...\n};\n</code></pre>\n\n<p>What can we do? Assign it to some variable and use it through the alias:</p>\n\n<pre><code>var abc = this; // we want to use this variable in embedded functions\n\nfunction xyz(){\n  // \"this\" is different here! --- but we don't care!\n  console.log(abc); // now it is the right object!\n  function qwe(){\n    // \"this\" is different here too! --- but we don't care!\n    console.log(abc); // it is the right object here too!\n  }\n  ...\n};\n</code></pre>\n\n<p><code>this</code> is not unique in this respect: <code>arguments</code> is the other pseudo variable that should be treated the same way &mdash; by aliasing.</p>\n",
                    "is_accepted": true,
                    "score": 114
                },
                {
                    "body": "<p>A good article which explains those little <em>issues</em> in javascript is this one:</p>\n\n<p><a href=\"http://www.alistapart.com/articles/getoutbindingsituations\">http://www.alistapart.com/articles/getoutbindingsituations</a></p>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 30
                }
            ],
            "body": "<p>Using instance methods as callbacks for event handlers changes the scope of <code>this</code> from <em>\"My instance\"</em> to <em>\"Whatever just called the callback\"</em>. So my code looks like this</p>\n\n<pre><code>function MyObject() {\n  this.doSomething = function() {\n    ...\n  }\n\n  var self = this\n  $('#foobar').bind('click', function(){\n    self.doSomethng()\n    // this.doSomething() would not work here\n  })\n}\n</code></pre>\n\n<p>It works, but is that the best way to do it? It looks strange to me.</p>\n",
            "last_activity_date": 1418303906,
            "question_id": 337878,
            "score": 89,
            "tags": [
                "javascript",
                "jquery",
                "scope",
                "closures"
            ],
            "title": "var self = this?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>if you embed the pdf in your webpage and reference the object id, you should be able to do it.</p>\n\n<p>eg. \nin your HTML:</p>\n\n<pre><code>&lt;object ID=\"examplePDF\" type=\"application/pdf\" data=\"example.pdf\" width=\"500\" height=\"500\"&gt;\n</code></pre>\n\n<p>in your javascript:</p>\n\n<pre><code>&lt;script&gt;\n\nvar pdf = document.getElementById(\"examplePDF\");\n\npdf.print();\n\n&lt;/script&gt;\n</code></pre>\n\n<p>I hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Yes you can...</p>\n\n<p>PDFs have Javascript support.  I needed to have auto print capabilities when a PHP-generated PDF was created and I was able to use FPDF to get it to work:</p>\n\n<p><a href=\"http://www.fpdf.org/en/script/script36.php\">http://www.fpdf.org/en/script/script36.php</a></p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Embed code example:</p>\n\n<pre><code>&lt;object type=\"application/pdf\" data=\"example.pdf\" width=\"100%\" height=\"100%\" id=\"examplePDF\" name=\"examplePDF\"&gt;&lt;param name='src' value='example.pdf'/&gt;&lt;/object&gt;\n\n&lt;script&gt;\n   examplePDF.printWithDialog();\n&lt;/script&gt;\n</code></pre>\n\n<p>May have to fool around with the ids/names.\nUsing adobe reader...</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Just figured out how to do this within the PDF itself - if you have acrobat pro, go to your pages tab, right click on the thumbnail for the first page, and click page properties. Click on the actions tab at the top of the window and under select trigger choose page open. Under select action choose \"run a javascript\". Then in the javascript window, type this:</p>\n\n<pre><code>this.print({bUI: false, bSilent: true, bShrinkToFit: true});\n</code></pre>\n\n<p>This will print your document without a dialogue to the default printer on your machine. If you want the print dialog, just change bUI to true, bSilent to false, and optionally, remove the shrink to fit parameter. </p>\n\n<p>Auto-printing PDF! </p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I usually do something similar to the approach given by <a href=\"http://www.ehow.com/how_7352227_use-javascript-print-pdf.html\" rel=\"nofollow\" title=\"How to Use JavaScript to Print a PDF | eHow.com\">How to Use JavaScript to Print a PDF (eHow.com)</a>, using an <code>iframe</code>.</p>\n\n<ol>\n<li><h3>a function to house the print trigger...</h3>\n\n<pre><code>function printTrigger(elementId) {\n    var getMyFrame = document.getElementById(elementId);\n    getMyFrame.focus();\n    getMyFrame.contentWindow.print();\n}\n</code></pre></li>\n<li><h3>an button to give the user access...</h3>\n\n<p>(an <code>onClick</code> on an <code>a</code> or <code>button</code> or <code>input</code> or whatever you wish)</p>\n\n<pre><code>&lt;input type=\"button\" value=\"Print\" onclick=\"printTrigger('iFramePdf');\" /&gt;\n</code></pre></li>\n<li><h3>an iframe pointing to your PDF...</h3>\n\n<pre><code>&lt;iframe id=\"iFramePdf\" src=\"myPdfUrl.pdf\" style=\"display:none;\"&gt;&lt;/iframe&gt;\n</code></pre></li>\n</ol>\n\n<hr>\n\n<p><b>Bonus Idea #1</b> - Create the <code>iframe</code> and add it to your page within the <code>printTrigger();</code>  so that the PDF isn't loaded until the user clicks your \"Print\" button, then the javascript can attack! the iframe and trigger the print dialog.</p>\n\n<hr>\n\n<p><b>Bonus Idea #2</b> - Extra credit if you disable your \"Print\" button and give the user a little loading spinner or something after they click it, so that they know something's in process instead of clicking it repeatedly!\n</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Why not use the Actions menu option to set this? </p>\n\n<p>Do the following: If you have Acrobat Pro, go to your pages tab, right click on the thumbnail for the first page, and click page properties. Click on the actions tab at the top of the window and under select trigger choose page open. Under select action choose <strong>'Execute a menu item'</strong>. Click the Add button then select 'File > Print' then OK.  Click OK again and save the PDF.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you know how PDF files are structured (or are willing to spend a little while reading the spec), you can do it this way.</p>\n\n<p>Use the Named Action \"Print\" in the OpenAction field of the Catalog object; the \"Print\" action is undocumented, but Acrobat Reader and most of the other major readers understand it. A nice benefit of this approach is that you don't get any JavaScript warnings. See here for details: <a href=\"http://www.gnostice.com/nl_article.asp?id=157\" rel=\"nofollow\">http://www.gnostice.com/nl_article.asp?id=157</a></p>\n\n<p>To make it even shinier, I added a second Action, URI, directing the reader to go back to the page that originated the request. Then I attached this Action to the first Named action using its Next field. With content disposition set to \"inline\", this makes it so that when the user clicks on the print link:</p>\n\n<ol>\n<li>It opens up Adobe Reader in the same tab and loads the file</li>\n<li>It immediately shows the print dialog</li>\n<li>As soon as the Print dialog is closed (whether they hit \"OK\" or \"cancel\"), the browser tab goes back to the webpage</li>\n</ol>\n\n<p>I was able to do all these changes in Ruby easily enough using only the File and IO modules; I opened the PDF I had generated with an external tool, followed the xref to the existing Catalog section, then appended a new section onto the PDF with an updated Catalog object containing my special OpenAction line, and also the new Action objects.</p>\n\n<p>Because of PDF's incremental revision features, you don't have to make any changes to the existing data to do this, just append an additional section to the end.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you are using the <a href=\"http://prawn.majesticseacreature.com/docs/\" rel=\"nofollow\">prawn</a> gem for Ruby on Rails to generate your PDF, you can use the following additional gem to active the print dialog:</p>\n\n<p><a href=\"https://github.com/barsoom/prawn-print\" rel=\"nofollow\">prawn-print</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use <code>named action</code> instead of javascript because javascript often is disabled, and if it isn't it gives a warning.</p>\n\n<p>My web application creates a postscript file that then is converted with ghostscript to a pdf. I want it to print automatically because the user has already clicked on print inside my application. With the information about named actions from @DSimon above, I researched how to solve this. It all boils down to insert the string <code>/Type /Action /S /Named /N /Print</code> at the right place in the pdf.</p>\n\n<p>I was thinking of writing a small utility, but it has to parse the pdf to find the root node, insert <code>/OpenAction</code> with a reference an object with the action, and recalculate the byte-offsets in xref.</p>\n\n<p>But then I found out about <a href=\"http://partners.adobe.com/public/developer/en/acrobat/sdk/pdf/pdf_creation_apis_and_specs/pdfmarkReference.pdf\">pdfmark</a> which is an extension to postscript to express, in postscript syntax, idioms that are converted to pdf by Adobes distiller or by ghostscript.</p>\n\n<p>Since I'm already using ghostscript, all I have to do is append the following to the end of my postscript file: </p>\n\n<pre><code>%AUTOPRINT\n[ /_objdef {PrintAction} /type /dict /OBJ pdfmark\n[ {PrintAction} &lt;&lt; /Type /Action /S /Named /N /Print &gt;&gt; /PUT pdfmark\n[ {Catalog} &lt;&lt; /OpenAction {PrintAction} &gt;&gt; /PUT pdfmark\n</code></pre>\n\n<p>and ghostscript will create the action, link it, and calculate the xref offsets. (In postscript <code>%</code> is a comment and <code>PrintAction</code> is my name for the object)</p>\n\n<p>By looking at the PDF I see that it has created this:</p>\n\n<pre><code>1 0 obj\n&lt;&lt;/Type /Catalog /Pages 3 0 R\n/OpenAction  9 0 R\n/Metadata 10 0 R\n&gt;&gt;\nendobj\n\n9 0 obj\n&lt;&lt;/S/Named\n/Type/Action\n/N/Print&gt;&gt;endobj\n</code></pre>\n\n<p><code>1 0</code> is object 1, revision 0, and <code>9 0</code> is object 9, revision 0. In the pdf-trailer is says that it is object 1 that is the root node. As you can see there is a reference from object 1, <code>/OpenAction</code> to run object 9 revision 0.</p>\n\n<p>With ghostscript it's possible to convert a pdf to postscript (pdf2ps), append the text above, and convert it back to pdf with <code>ps2pdf</code>. It should be noted that meta-information about the pdf is lost in this conversion. I haven't searched more into this.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I know how to open a webpage in a new window and add javascript so the print dialog pops up. Is there a way to do a similar thing with a PDF file?</p>\n",
            "last_activity_date": 1401281895,
            "question_id": 687675,
            "score": 32,
            "tags": [
                "javascript",
                "pdf",
                "printing"
            ],
            "title": "Can a PDF file&#39;s print dialog be opened with Javascript?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>As it happens, I answered a very similar question a few days ago: <a href=\"http://stackoverflow.com/questions/4767848/get-caret-cursor-position-in-contenteditable-area-containing-html-content/4770562#4770562\">Get caret (cursor) position in contentEditable area containing HTML content</a></p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>However, I think I over-complicated that answer. Here's a function that will get the character offset of the caret within the specified element; however, this is a naive implementation that will almost certainly have inconsistencies with line breaks, and makes no attempt to deal with text hidden via CSS (I suspect IE will correctly ignore such text while other browsers will not). To handle all this stuff properly would be tricky. I've now <a href=\"https://code.google.com/p/rangy/wiki/TextRangeModule\">attempted it</a> for my <a href=\"https://code.google.com/p/rangy\">Rangy</a> library.</p>\n\n<p>Live example: <a href=\"http://jsfiddle.net/TjXEG/900/\">http://jsfiddle.net/TjXEG/900/</a></p>\n\n<pre><code>function getCaretCharacterOffsetWithin(element) {\n    var caretOffset = 0;\n    var doc = element.ownerDocument || element.document;\n    var win = doc.defaultView || doc.parentWindow;\n    var sel;\n    if (typeof win.getSelection != \"undefined\") {\n        sel = win.getSelection();\n        if (sel.rangeCount &gt; 0) {\n            var range = win.getSelection().getRangeAt(0);\n            var preCaretRange = range.cloneRange();\n            preCaretRange.selectNodeContents(element);\n            preCaretRange.setEnd(range.endContainer, range.endOffset);\n            caretOffset = preCaretRange.toString().length;\n        }\n    } else if ( (sel = doc.selection) &amp;&amp; sel.type != \"Control\") {\n        var textRange = sel.createRange();\n        var preCaretTextRange = doc.body.createTextRange();\n        preCaretTextRange.moveToElementText(element);\n        preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\n        caretOffset = preCaretTextRange.text.length;\n    }\n    return caretOffset;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 55
                },
                {
                    "body": "<p>I know this is a year old, but this post is a top search result for a lot of questions on finding the Caret position and I found this useful.</p>\n\n<p>I was trying to use Tim's excellent script above to find the new cursor position after having drag-dropped an element from one position to another in a content editable div. It worked perfectly in FF and IE, but in Chrome, the dragging action highlighted all content between the beginning and end of the drag, which resulted in the returned <code>caretOffset</code> being too large or small (by the length of the selected area).</p>\n\n<p>I added a few lines to the first if statement to check if text has been selected and adjust the result accordingly. The new statement is below. Forgive me if it's inappropriate to add this here, as it's not what the OP was trying to do, but as I said, several searches on info related to Caret position led me to this post, so it's (hopefully) likely to help someone else.</p>\n\n<p>Tim's first if statement with added lines(*):</p>\n\n<pre><code>if (typeof window.getSelection != \"undefined\") {\n  var range = window.getSelection().getRangeAt(0);\n  var selected = range.toString().length; // *\n  var preCaretRange = range.cloneRange();\n  preCaretRange.selectNodeContents(element);\n  preCaretRange.setEnd(range.endContainer, range.endOffset);\n\n  if(selected){ // *\n    caretOffset = preCaretRange.toString().length - selected; // *\n  } else { // *\n    caretOffset = preCaretRange.toString().length; \n  } // *\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>Suppose I have this HTML element:</p>\n\n<pre><code>&lt;div id=\"parent\"&gt;\n Hello everyone! &lt;a&gt;This is my home page&lt;/a&gt;\n &lt;p&gt;Bye!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And the user selects \"home\" with his mouse.</p>\n\n<p>I want to be able to determine how many characters into <code>#parent</code> his selection starts (and how many characters from the end of <code>#parent</code> his selection ends). This should work even if he selects an HTML tag. (And I need it to work in all browsers)</p>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/range.startOffset\"><code>range.startOffset</code></a> looks promising, but it is an offset relative only to the range's immediate container, and is a character offset only if the container is a text node.</p>\n",
            "last_activity_date": 1415121818,
            "question_id": 4811822,
            "score": 23,
            "tags": [
                "javascript",
                "textrange"
            ],
            "title": "Get a range&#39;s start and end offset&#39;s relative to its parent container"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Primitives are passed by value, Objects are passed by \"copy of a reference\".</p>\n\n<p>Specifically, when you pass an object (or array) you are (invisibly) passing a reference to that object, and it is possible to modify the <em>contents</em> of that object, but if you attempt to overwrite the reference it will not affect the copy of the reference held by the caller - i.e. the reference itself is passed by value:</p>\n\n<pre><code>function replace(ref) {\n    ref = {};           // this code does _not_ affect the object passed\n}\n\nfunction update(ref) {\n    ref.key = 'newvalue';  // this code _does_ affect the _contents_ of the object\n}\n\nvar a = { key: 'value' };\nreplace(a);  // a still has its original value - it's unmodfied\nupdate(a);   // the _contents_ of 'a' are changed\n</code></pre>\n\n<p>Compare with C++ where changing a reference type can entirely replace the object passed by the caller:</p>\n\n<pre><code>void replace(mytype&amp; ref) {\n    ref = *new mytype();  // ignoring the memory leak for the purposes of this example\n}\n\nmytype a;\nreplace(a);   // a is now a _different_ object\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 119
                },
                {
                    "body": "<p>Think of it like this:</p>\n\n<p>Whenever you create an <em>object</em> in ECMAscript, this object is formed in a mystique <em>ECMAscript universal place</em> where no man will ever be able to get. All you get back is a <em>reference</em> to that object in this mystique place.</p>\n\n<pre><code>var obj = { };\n</code></pre>\n\n<p>Even <code>obj</code> is only a reference to the object (which is located in that special wonderful place) and hence, you can only pass this <em>reference</em> around. Effectively, any piece of code which accesses <em>obj</em> will modify the <em>object</em> which is far, far away.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>As with C, ultimately, everything is passed by value.  Unlike C, you can't actually back up and pass the location of a variable, because it doesn't have pointers just references.</p>\n\n<p>And the refernces it has are all to objects, not variables.  There are several ways of achieving the same result, but they have to be done by hand, not just adding a keyword at either the call or declaration site.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>In practical terms, Alnitak is correct and makes it easy to understand, but ultimately in JavaScript, everything is passed by value. </p>\n\n<p>What is the \"value\" of an object? It is the object reference.</p>\n\n<p>When you pass in an object, you get a copy of this value (hence the 'copy of a reference' that Alnitak described). If you change this value, you do not change the original object, you are changing your copy of that reference.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JavaScript is pass by value.\nFor primitives, primitive's value is passed.\nFor Objects, Object's reference \"value\" is passed.</p>\n\n<p>Example with Object:</p>\n\n<pre><code>var f1 = function(inputObject){\n    inputObject.a=2;\n}\nvar f2 = function(){\n    var inputObject={\"a\":1};\n    f1(inputObject); \n    console.log(inputObject.a);\n}\n</code></pre>\n\n<p>calling f2 results in printing out \"a\" value as 2 instead of 1, as the reference is passed and the \"a\" value in reference is updated.</p>\n\n<p>Example with primitive:</p>\n\n<pre><code>var f1 = function(a){\n    a=2;\n}\nvar f2 = function(){\n    var a =1;\n    f1(a); \n    console.log(a);\n}\n</code></pre>\n\n<p>calling f2 results in printing out \"a\" value as 1.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>\"Global\" javascript variables are members of the window object.  You could access the reference as a member of the window object.</p>\n\n<pre><code>var v = \"initialized\";\nfunction byref(ref) {\n window[ref] = \"changed by ref\";\n}\nbyref((function(){for(r in window){if(window[r]===v){return(r);}}})());\n// could also be called like... byref('v');\nconsole.log(v); // outputs changed by ref\n</code></pre>\n\n<p>Note, the above example will not work for variables declared within a function.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My 2 Cents.... It's irrelevant whether Javascript passes parameters by reference or value. What really matters is assignment vs mutation.</p>\n\n<p>I wrote a longer, more detailed explanation here (<a href=\"http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language/25117245#25117245\">Is JavaScript a pass-by-reference or pass-by-value language?</a>)</p>\n\n<p>When you pass anything (Whether that be an object or a primitive), all javascript does is assign a new variable while inside the function... just like using the equal sign (=)</p>\n\n<p>How that parameter behaves inside the function is exactly the same as it would behave if you just assigned a new variable using the equal sign.. Take these simple examples.</p>\n\n<pre><code>var myString = 'Test string 1';\n\n// Assignment - A link to the same place as myString\nvar sameString = myString;\n\n// If I change sameString, it will not modify myString, \n// it just re-assigns it to a whole new string\nsameString = 'New string';\n\nconsole.log(myString); // logs 'Test string 1';\nconsole.log(sameString); // logs 'New string';\n</code></pre>\n\n<p>If I were to pass myString as a parameter to a function, it behaves as if I simply assigned it to a new variable. Now, let's do the same thing, but with a function instead of a simple assignment</p>\n\n<pre><code>function myFunc(sameString) {\n\n    // Re assignment.. again, it will not modify myString\n    sameString = 'New string';\n}\n\nvar myString = 'Test string 1';\n\n// This behaves the same as if we said sameString = myString\nmyFunc(myString);\n\nconsole.log(myString); // Again, logs 'Test string 1';\n</code></pre>\n\n<p>The only reason that you can modify objects when you pass them to a function is because you are not reassigning... Instead, objects can be changed or mutated.... Again, it works the same way.</p>\n\n<pre><code>var myObject = { name: 'Joe'; }\n\n// Assignment - We simply link to the same object\nvar sameObject = myObject;\n\n// This time, we can mutate it. So a change to myObject affects sameObject and visa versa\nmyObject.name = 'Jack';\nconsole.log(sameObject.name); // Logs 'Jack'\n\nsameObject.name = 'Jill';\nconsole.log(myObject.name); // Logs 'Jill'\n\n// If we re-assign it, the link is lost\nsameObject = { name: 'Howard' };\nconsole.log(myObject.name); // Logs 'Jill'\n</code></pre>\n\n<p>If I were to pass myObject as a parameter to a function, it behaves as if I simply assigned it to a new variable. Again, the same thing with the exact same behavior but with a function.</p>\n\n<pre><code>function myFunc(sameObject) {\n\n    // We mutate the object, so the myObject gets the change too... just like before.\n    sameObject.name = 'Jill';\n\n    // But, if we re-assign it, the link is lost\n    sameObject = { name: 'Howard' };\n}\n\nvar myObject = { name: 'Joe'; }\n\n// This behaves the same as if we said sameObject = myObject;\nmyFunc(myObject);\nconsole.log(myObject.name); // Logs 'Jill'\n</code></pre>\n\n<p>Every time you pass a variable to a function, you are \"Assigning\" to whatever the name of the parameter is, just like if you used the equal (=) sign.</p>\n\n<p>Always remember that the equals sign (=) means assignment.\nAnd passing a parameter to a function also means assignment. \nThey are the same and the 2 variables are connected in exactly the same way.</p>\n\n<p>The only time that modifying a variable affects a different variable is when the underlying object is mutated.</p>\n\n<p>There is no point in making a distinction between objects and primitives, because it works the same exact way as if you didn't have a function and just used the equal sign to assign to a new variable.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Does JavaScript pass by references or pass by values? Here is an example from <em>JavaScipt: The Good Parts</em>. I am very confused about <code>my</code> parameter for the rectangle function. It is actually <code>undefined</code>, and redefined inside the function. There are no original reference. If I remove it from the function parameter, the inside area function is not able to access it. </p>\n\n<p>Is it a closure? But no function is returned.</p>\n\n<pre><code>var shape = function (config) {\n    var that = {};\n    that.name = config.name || \"\";\n    that.area = function () {\n        return 0;\n    };\n    return that;\n};\nvar rectangle = function (config, my) {\n    my = my || {};\n    my.l = config.length || 1;\n    my.w = config.width || 1;\n    var that = shape(config);\n    that.area = function () {\n        return my.l * my.w;\n    };\n    return that;\n};\nmyShape = shape({\n    name: \"Unhnown\"\n});\nmyRec = rectangle({\n    name: \"Rectangle\",\n    length: 4,\n    width: 6\n});\nconsole.log(myShape.name + \" area is \" + myShape.area() + \" \" + myRec.name + \" area is \" + myRec.area());\n</code></pre>\n",
            "last_activity_date": 1419546432,
            "question_id": 13104494,
            "score": 66,
            "tags": [
                "javascript",
                "reference",
                "pass-by-reference",
                "pass-by-value"
            ],
            "title": "Does JavaScript pass by reference?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You need to save a reference to the context where the <code>setTimeout</code> function call is made, because <code>setTimeout</code> executes the function with <code>this</code> pointing to the global object:</p>\n\n<pre><code>var that = this;\nif (this.options.destroyOnHide) {\n     setTimeout(function(){that.tip.destroy()}, 1000);\n} \n</code></pre>\n\n<p>You can easily prove that <code>setTimeout</code> set <code>this</code> to the global object by:</p>\n\n<pre><code>(function () {\n  alert(this); // alerts hello\n  setTimeout(function(){\n    alert(this == window); // true\n  }, 1000);\n}).call(\"hello\");\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/DOM/window.setTimeout#The_%27this%27_problem\">setTimeout - The 'this' problem</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 120
                },
                {
                    "body": "<p>There are ready-made shortcuts (syntactic sugar) to the function wrapper @CMS answered with. (Below assuming that the context you want is <code>this.tip</code>.)</p>\n\n<hr>\n\n<h2><a href=\"https://en.wikipedia.org/wiki/ECMAScript_5#ECMAScript.2C_5th_Edition\">ECMAScript 5</a> (<a href=\"https://kangax.github.io/compat-table/es5/#Function.prototype.bind\">current browsers</a>, Node.js) and Prototype.js</h2>\n\n<p>If you target <a href=\"https://kangax.github.io/compat-table/es5/#Function.prototype.bind\">browser compatible with ECMA-262, 5th edition (ECMAScript 5)</a> or <a href=\"http://nodejs.org/\">Node.js</a>, you could use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind</code></a>. You can optionally pass any function arguments to create <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Partial_Functions\">partial functions</a>.</p>\n\n<pre><code>fun.bind(thisArg[, arg1[, arg2[, ...]]])\n</code></pre>\n\n<p>Again, in your case, try this:</p>\n\n<pre><code>if (this.options.destroyOnHide) {\n    setTimeout(this.tip.destroy.bind(this.tip), 1000);\n}\n</code></pre>\n\n<p>The same functionality has also been <a href=\"http://prototypejs.org/doc/latest/language/Function/prototype/bind/\">implemented in Prototype</a> (any other libraries?).</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\"><code>Function.prototype.bind</code> can be implemented like this</a> if you want custom backwards compatibility (but please observe the notes).</p>\n\n<hr>\n\n<h2>jQuery</h2>\n\n<p>If you are already using jQuery 1.4+, there's a ready-made function for explicitly setting the <code>this</code> context of a function.</p>\n\n<blockquote>\n  <p><a href=\"http://api.jquery.com/jQuery.proxy/\">jQuery.proxy()</a>: Takes a function and returns a new one that will always have a particular context.</p>\n</blockquote>\n\n<pre><code>$.proxy(function, context[, additionalArguments])\n</code></pre>\n\n<p>In your case, try this:</p>\n\n<pre><code>if (this.options.destroyOnHide) {\n    setTimeout($.proxy(this.tip.destroy, this.tip), 1000);\n}\n</code></pre>\n\n<hr>\n\n<h2>Underscore.js</h2>\n\n<p>It's available in <a href=\"http://underscorejs.org/\">underscore.js</a> as <a href=\"http://underscorejs.org/#bind\"><code>_.bind(...)</code></a></p>\n\n<blockquote>\n  <p><a href=\"http://underscorejs.org/#bind\"><strong>bind</strong></a> Bind a function to an object, meaning that whenever the function is called, the value of <code>this</code> will be the object. Optionally, bind arguments to the function to pre-fill them, also known as partial application.</p>\n</blockquote>\n\n<pre><code>_.bind(function, object, [*arguments])\n</code></pre>\n\n<p>In your case, try this:</p>\n\n<pre><code>if (this.options.destroyOnHide) {\n    setTimeout(_.bind(this.tip.destroy, this.tip), 1000);\n}\n</code></pre>\n\n<hr>\n\n<p><a href=\"/questions/tagged/bind\" class=\"post-tag\" title=\"show questions tagged &#39;bind&#39;\" rel=\"tag\">bind</a> <a href=\"/questions/tagged/jquery\" class=\"post-tag\" title=\"show questions tagged &#39;jquery&#39;\" rel=\"tag\">jquery</a> <a href=\"/questions/tagged/underscore.js\" class=\"post-tag\" title=\"show questions tagged &#39;underscore.js&#39;\" rel=\"tag\">underscore.js</a> <a href=\"/questions/tagged/ecmascript-5\" class=\"post-tag\" title=\"show questions tagged &#39;ecmascript-5&#39;\" rel=\"tag\">ecmascript-5</a> <a href=\"/questions/tagged/prototypejs\" class=\"post-tag\" title=\"show questions tagged &#39;prototypejs&#39;\" rel=\"tag\">prototypejs</a> <a href=\"/questions/tagged/node.js\" class=\"post-tag\" title=\"show questions tagged &#39;node.js&#39;\" rel=\"tag\">node.js</a></p>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>In browsers other than Internet Explorer, you can pass parameters to the function together after the delay:</p>\n\n<pre><code>var timeoutID = window.setTimeout(func, delay, [param1, param2, ...]);\n</code></pre>\n\n<p>So, you can do this:</p>\n\n<pre><code>var timeoutID = window.setTimeout(function (self) {\n  console.log(self); \n}, 500, this);\n</code></pre>\n\n<p>This is better in terms of performance than a scope lookup (caching <code>this</code> into a variable outside of the timeout / interval expression), and then creating a closure (by using <code>$.proxy</code> or <code>Function.prototype.bind</code>). </p>\n\n<p>The code to make it work in IEs from <a href=\"http://webreflection.blogspot.ru/2007/06/simple-settimeout-setinterval-extra.html\" rel=\"nofollow\">Webreflection</a>:</p>\n\n<pre><code>/*@cc_on\n(function (modifierFn) {\n  // you have to invoke it as `window`'s property so, `window.setTimeout`\n  window.setTimeout = modifierFn(window.setTimeout);\n  window.setInterval = modifierFn(window.setInterval);\n})(function (originalTimerFn) {\n    return function (callback, timeout){\n      var args = [].slice.call(arguments, 2);\n      return originalTimerFn(function () { \n        callback.apply(this, args) \n      }, timeout);\n    }\n});\n@*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If your using <a href=\"http://underscorejs.org/\" rel=\"nofollow\">underscore</a> you can use bind.  </p>\n\n<p>E.g.</p>\n\n<pre><code>if (this.options.destroyOnHide) {\n     setTimeout(_.bind(this.tip.destroy, this), 1000);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>NOTE: This won't work in IE</p>\n\n<pre><code>var ob = {\n    p: \"ob.p\"\n}\n\nvar p = \"window.p\";\n\nsetTimeout(function(){\n    console.log(this.p); // will print \"window.p\"\n},1000); \n\nsetTimeout(function(){\n    console.log(this.p); // will print \"ob.p\"\n}.bind(ob),1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I pass context into setTimeout? I want to call this.tip.destroy() if this.options.destroyOnHide after 1000 ms. How can I do that?</p>\n\n<pre><code>if (this.options.destroyOnHide) {\n     setTimeout(function() { this.tip.destroy() }, 1000);\n} \n</code></pre>\n\n<p>When I try the above, \"this\" refers to the window.</p>\n",
            "last_activity_date": 1425611956,
            "question_id": 2130241,
            "score": 74,
            "tags": [
                "javascript",
                "callback",
                "this",
                "settimeout"
            ],
            "title": "Pass correct &quot;this&quot; context to setTimeout callback?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You can communicate between browser windows (and tabs too) using cookies. </p>\n\n<p>Here is an example of sender and receiver: </p>\n\n<p>sender.html</p>\n\n<pre><code>&lt;h1&gt;Sender&lt;/h1&gt;\n\n&lt;p&gt;Type into the text box below and watch the text \n   appear automatically in the receiver.&lt;/p&gt;\n\n&lt;form name=\"sender\"&gt;\n&lt;input type=\"text\" name=\"message\" size=\"30\" value=\"\"&gt;\n&lt;input type=\"reset\" value=\"Clean\"&gt;\n&lt;/form&gt;\n\n&lt;script type=\"text/javascript\"&gt;&lt;!--\nfunction setCookie(value) {\n    document.cookie = \"cookie-msg-test=\" + value + \"; path=/\";\n    return true;\n}\nfunction updateMessage() {\n    var t = document.forms['sender'].elements['message'];\n    setCookie(t.value);\n    setTimeout(updateMessage, 100);\n}\nupdateMessage();\n//--&gt;&lt;/script&gt;\n</code></pre>\n\n<p>receiver.html: </p>\n\n<pre><code>&lt;h1&gt;Receiver&lt;/h1&gt;\n\n&lt;p&gt;Watch the text appear in the text box below as you type it in the sender.&lt;/p&gt;\n\n&lt;form name=\"receiver\"&gt;\n&lt;input type=\"text\" name=\"message\" size=\"30\" value=\"\" readonly disabled&gt;\n&lt;/form&gt;\n\n&lt;script type=\"text/javascript\"&gt;&lt;!--\nfunction getCookie() {\n    var cname = \"cookie-msg-test=\";\n    var ca = document.cookie.split(';');\n    for (var i=0; i &lt; ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(cname) == 0) {\n            return c.substring(cname.length, c.length);\n        }\n    }\n    return null;\n}\nfunction updateMessage() {\n    var text = getCookie();\n    document.forms['receiver'].elements['message'].value = text;\n    setTimeout(updateMessage, 100);\n}\nupdateMessage();\n//--&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>I don't think you need cookies. Each document's js code can access the other document elements. So you can use them directly to share data.\nYour first window w1 opens w2 and save the reference</p>\n\n<pre><code>var w2 = window.open(...) \n</code></pre>\n\n<p>In w2 you can access w1 using the opener property of window.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>edit:\nWith Flash you can communicate between any window, ANY browser (yes, from FF to IE at runtime ) ..ANY form of instance of flash (ShockWave/activeX) </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Adding to these answers, I found this plugin:</p>\n\n<p><a href=\"http://www.sfpeter.com/2008/03/communication-between-browser-windows-with-jquery-my-new-plugin/\" rel=\"nofollow\">http://www.sfpeter.com/2008/03/communication-between-browser-windows-with-jquery-my-new-plugin/</a></p>\n\n<p>Quick set up, easy to use.  Did the trick.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For a more modern solution check out <a href=\"http://stackoverflow.com/a/12514384/270274\">http://stackoverflow.com/a/12514384/270274</a></p>\n\n<p>Quote:</p>\n\n<blockquote>\n  <p>I'm sticking to the shared local data solution mentioned in the question using <code>localStorage</code>. It seems to be the best solution in terms of reliability, efficiency, and browser compatibility.</p>\n  \n  <p><code>localStorage</code> is implemented in all modern browsers.</p>\n  \n  <p>The <code>storage</code> event fires when <em>other</em> tabs makes changes to <code>localStorage</code>. This is quite handy for communication purposes.</p>\n  \n  <p>Reference:<br>\n  <a href=\"http://dev.w3.org/html5/webstorage/\">http://dev.w3.org/html5/webstorage/</a><br>\n  <a href=\"http://dev.w3.org/html5/webstorage/#the-storage-event\">http://dev.w3.org/html5/webstorage/#the-storage-event</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Communicating between different JavaScript execution context was supported even before HTML5 if the documents was of the same origin. If not or you have no reference to the other <code>Window</code> object, then you could use the new <strong>postMessage API</strong> introduced with HTML5. I elaborated a bit on both approaches in this <a href=\"http://stackoverflow.com/a/18004937/1268003\">stackoverflow answer</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Found different way using HTML5 localstorage, I've create a library with events like API:</p>\n\n<pre><code>sysend.on('foo', function(message) {\n    console.log(message);\n});\nvar input = document.getElementsByTagName('input')[0];\ndocument.getElementsByTagName('button')[0].onclick = function() {\n    sysend.broadcast('foo', {message: input.value});\n};\n</code></pre>\n\n<p>it will send messages to all other pages but not for current one.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can communicate between windows (tabbed or not) if they have a child-parent relationship. </p>\n\n<p>Create and update a child window:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Cross window test script&lt;/title&gt;\n&lt;script&gt;\nvar i = 0;\nfunction open_and_run() {\n\n    //First argument is a URI but it's not needed. \n    //Second argument (window name) isn't really needed either because you can pass by reference\n    //If you don't pass by reference, you need this second argument to access the window by its name\n    var w2 = window.open(\"\", \"winCounter\"); \n\n    //start the counting timer\n    var myVar=setInterval(function(){myTimer(w2)},1000);\n}\n\nfunction myTimer(w2) {\n    i++;\n\n    //write the current count to the new window, which was passed by reference\n    w2.document.body.innerHTML=\"&lt;center&gt;&lt;h1&gt;\" + i + \"&lt;/h1&gt;&lt;p&gt;&lt;/center&gt;\";\n\n    //randomly change parent's background color\n    parent.document.body.style.backgroundColor= Math.floor(Math.random() * 16581375);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\nClick to open a new window \n&lt;button onclick=\"open_and_run();\"&gt;Test This!&lt;/button&gt;    \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Child windows can use the <code>parent</code> object to communicate with the parent that spawned it, so you could control the music player from either window.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What's the most reliable way to have Javascript communicate between tabs/windows of the same browser? For example, when Tab 2 starts audio playback, Tab 1 somehow knows about this and can pause it's player.</p>\n\n<p>I'm building a site with a music player... so at the moment if you open two tabs to the site, you could start music on both.\nThis is obviously bad, so I'm trying to find a solution. </p>\n\n<p>Any ideas?\nThanks </p>\n",
            "last_activity_date": 1425023997,
            "question_id": 4079280,
            "score": 53,
            "tags": [
                "javascript",
                "browser"
            ],
            "title": "Javascript communication between browser tabs/windows"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>a) Is it possible to do it this way, as opposed to using something like Raphael or jQuery SVG.</p>\n\n<p>Definitely.</p>\n\n<p>b) If it is possible, what's the technique?</p>\n\n<p>This annotated code snippet works:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;SVG Illustrator Test&lt;/title&gt; \n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;object data=\"alpha.svg\" type=\"image/svg+xml\" id=\"alphasvg\" width=\"100%\" height=\"100%\"&gt;&lt;/object&gt;\n    &lt;script&gt;\n        var a = document.getElementById(\"alphasvg\");\n\n        //it's important to add an load event listener to the object, as it will load the svg doc asynchronously\n        a.addEventListener(\"load\",function(){\n            var svgDoc = a.contentDocument; //get the inner DOM of alpha.svg\n            var delta = svgDoc.getElementById(\"delta\"); //get the inner element by id\n            delta.addEventListener(\"mousedown\",function(){alert('hello world!')},false);    //add behaviour\n        },false);\n    &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Note that a limitation of this technique is that it is restricted by the same-origin policy, so alpha.svg must be hosted on the same domain as the html file, otherwise the inner DOM of the object will be inaccessible.</p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>In case you use jQuery you need to wait for $(window).load, because the embedded SVG document might not be yet loaded at $(document).ready</p>\n\n<pre><code>    $(window).load(function () {\n        //alert(\"Document loaded, including graphics and embedded documents (like SVG)\");\n        var a = document.getElementById(\"alphasvg\");\n        var svgDoc = a.contentDocument; //get the inner DOM of alpha.svg\n        var delta = svgDoc.getElementById(\"delta\"); //get the inner element by id\n        delta.addEventListener(\"mousedown\",function(){alert('hello world!')},false);\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I'm messing around with SVG and I was hoping I could create SVG files in Illustrator and access elements with Javascript. </p>\n\n<p>Here's the SVG file Illustrator kicks out (It also seems to add a load of junk to the beginning of the file that I've removed)</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;\n&lt;svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     width=\"276.843px\" height=\"233.242px\" viewBox=\"0 0 276.843 233.242\" enable-background=\"new 0 0 276.843 233.242\"\n     xml:space=\"preserve\"&gt;\n&lt;path id=\"delta\" fill=\"#231F20\" d=\"M34.074,86.094L0,185.354l44.444,38.519l80.741-0.74l29.63-25.186l-26.667-37.037\n    c0,0-34.815-5.926-37.778-6.667s-13.333-28.889-13.333-28.889l7.407-18.519l31.111-2.963l5.926-21.481l-12.593-38.519l-43.704-5.185\n    L34.074,86.094z\"/&gt;\n&lt;path id=\"cargo\" fill=\"#DFB800\" d=\"M68.148,32.761l43.704,4.445l14.815,42.963l-7.407,26.667l-33.333,2.963l-4.444,14.074\n    l54.074-1.481l22.222,36.296l25.926-3.704l25.926-54.074c0,0-19.259-47.408-21.481-47.408s-31.852-0.741-31.852-0.741\n    l-19.259-39.259L92.593,8.316L68.148,32.761z\"/&gt;\n&lt;polygon id=\"beta\" fill=\"#35FF1F\" points=\"86.722,128.316 134.593,124.613 158.296,163.872 190.889,155.724 214.593,100.909 \n    194.593,52.02 227.186,49.057 246.444,92.02 238.297,140.909 216.074,172.761 197.556,188.316 179.778,169.798 164.963,174.983 \n    163.481,197.946 156.815,197.946 134.593,159.428 94.593,151.279 \"/&gt;\n&lt;path class=\"monkey\" id=\"alpha\" fill=\"#FD00FF\" d=\"M96.315,4.354l42.963,5.185l18.519,42.222l71.852-8.148l20.74,46.667l-5.926,52.593\n    l-24.444,34.074l-25.185,15.555l-14.074-19.259l-8.889,2.964l-1.481,22.222l-14.074,2.963l-25.186,22.963l-74.074,4.444\n    l101.481,4.444c0,0,96.297-17.777,109.63-71.852S282.24,53.983,250.389,20.65S96.315,4.354,96.315,4.354z\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>As you can probably see, each element has an ID, and I was hoping to be able to access individual elements with Javascript so I could change the Fill attribute and respond to events such as click. </p>\n\n<p>The HTML is bog basic</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;SVG Illustrator Test&lt;/title&gt; \n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;object data=\"alpha.svg\" type=\"image/svg+xml\" id=\"alphasvg\" width=\"100%\" height=\"100%\"&gt;&lt;/object&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I guess this is two questions really. </p>\n\n<p>a) Is it possible to do it this way, as opposed to using something like Raphael or jQuery SVG.</p>\n\n<p>b) If it is possible, what's the technique?</p>\n\n<p>::UPDATE::</p>\n\n<p>At the moment, I've resorted to using Illustrator to create the SVG file, and I'm using <a href=\"http://raphaeljs.com/\">Raphael JS</a> to create paths and simply copying the point data from the SVG file and pasting it into <code>path()</code> function. Creating complex paths such as might be needed for a map, by coding the point data manually is (to my knowledge) prohibitively complex.</p>\n",
            "last_activity_date": 1367517575,
            "question_id": 2753732,
            "score": 33,
            "tags": [
                "javascript",
                "svg"
            ],
            "title": "How to access SVG elements with Javascript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Tiddlywiki has several methods of saving data, depending on which browser is used. <a href=\"https://github.com/TiddlyWiki/tiddlywiki/blob/master/js/FileSystem.js#L21\" rel=\"nofollow\">As you could see in the source</a>.</p>\n\n<ul>\n<li>If ActiveX is enabled, it uses Scripting.FileSystemObject.</li>\n<li>On Gecko-based browsers, it tries to use UniversalXPConnect.</li>\n<li>If Java is enabled, it uses the TiddlySaver Java applet.</li>\n<li>If <a href=\"https://developer.mozilla.org/en/LiveConnect\" rel=\"nofollow\">Java LiveConnect</a> is enabled, it tries to use Java's file classes.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>It uses a java file references like this:</p>\n\n<pre><code>drivers.tiddlySaver = {\n    \tname: \"tiddlySaver\",\n    \tdeferredInit: function() {\n    \t\tif(!document.applets[\"TiddlySaver\"] &amp;&amp; !$.browser.mozilla &amp;&amp; !$.browser.msie &amp;&amp; document.location.toString().substr(0,5) == \"file:\") {\n    \t\t\t$(document.body).append(\"&lt;applet style='position:absolute;left:-1px' name='TiddlySaver' code='TiddlySaver.class' archive='TiddlySaver.jar' width='1'height='1'&gt;&lt;/applet&gt;\");\n    \t\t}\n    \t},\n    \tisAvailable: function() {\n    \t\treturn !!document.applets[\"TiddlySaver\"];\n    \t},\n    \tloadFile: function(filePath) {\n    \t\tvar r;\n    \t\ttry {\n    \t\t\tif(document.applets[\"TiddlySaver\"]) {\n    \t\t\t\tr = document.applets[\"TiddlySaver\"].loadFile(javaUrlToFilename(filePath),\"UTF-8\");\n    \t\t\t\treturn (r === undefined || r === null) ? null : String(r);\n    \t\t\t}\n    \t\t} catch(ex) {\n    \t\t}\n    \t\treturn null;\n    \t},\n    \tsaveFile: function(filePath,content) {\n    \t\ttry {\n    \t\t\tif(document.applets[\"TiddlySaver\"])\n    \t\t\t\treturn document.applets[\"TiddlySaver\"].saveFile(javaUrlToFilename(filePath),\"UTF-8\",content);\n    \t\t} catch(ex) {\n    \t\t}\n    \t\treturn null;\n    \t}\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The answer is indeed NO.  Java applets, and the dreaded ActiveX plugins are usually used if this is required</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Technically you can do </p>\n\n<pre><code>netscape.security.PrivilegeManager.enablePrivilege('UniversalBrowserWrite');\n</code></pre>\n\n<p>in a netscape-compatible browser (Firefox, Mozilla, Netscape), and it will ask the user*  whether or not to allow filesystem access, but this is not portable.</p>\n\n<p>*once per browser process</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>HTML5's File[<a href=\"http://dev.w3.org/2006/webapi/FileAPI/\">1</a>], FileWriter[<a href=\"http://dev.w3.org/2009/dap/file-system/file-dir-sys.html\">2</a>], and FileSystem[<a href=\"http://dev.w3.org/2009/dap/file-system/file-writer.html\">3</a>] APIs are available in the latest Developer channel of Google Chrome. The FileSystem API lets you read/write to a sandbox filesystem within a space the browser knows about. You cannot, for example, open 'My Pictures' folder on the user's local FS and read/write to that. That's something in the works, but it won't be ready for a while. Example of writing a file:</p>\n\n<pre><code>window.requestFileSystem(\n  TEMPORARY,        // persistent vs. temporary storage\n  1024 * 1024,      // 1MB. Size (bytes) of needed space\n  initFs,           // success callback\n  opt_errorHandler  // opt. error callback, denial of access\n);\n\nfunction initFs(fs) {\n  fs.root.getFile('logFile.txt', {create: true}, function(fileEntry) {\n\n    fileEntry.createWriter(function(writer) {  // FileWriter\n\n      writer.onwrite = function(e) {\n        console.log('Write completed.');\n      };\n\n      writer.onerror = function(e) {\n        console.log('Write failed: ' + e.toString());\n      };\n\n      var bb = new BlobBuilder();\n      bb.append('Lorem ipsum');\n      writer.write(bb.getBlob('text/plain'));\n\n    }, errorHandler);\n  }\n}\n</code></pre>\n\n<p>Check out this <a href=\"http://html5-demos.appspot.com/static/html5storage/index.html#slide44\">HTML5 Storage slide deck</a> for more code snippets.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<blockquote>\n  <p>Can javascript access a filesystem?</p>\n</blockquote>\n\n<p>Not outside of the sandbox area mentioned above, to the best of my knowledge. However, it can access a signed java applet that has callable public methods which can  get to all files. I have done it and it works fine and is cross browser.</p>\n\n<p>The signing part is somewhat involved and for professional use you might need to pay for a code signing certificate which authorises your identity. Get it from some place like Verisign. That way users at least know who the applet is written by (if that helps). You can sign it yourself for free but one of those \"possible security risk\" popups will occur at first use for authorisation by the user.</p>\n\n<p>You would think that such signed applets for file writing would exist already for download but I couldn't find any via searching. If they did, you could just plug it in your page, learn the API and off you go.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I was pretty sure the answer was <strong>NO</strong>, and hence google gears, adobe AIR, etc.</p>\n\n<p>If I was right, then how does <a href=\"http://tiddlywiki.com\">http://tiddlywiki.com</a> work?  It is persistent and written in javascript.  It is also just a single HTML file that has no external (serverside) dependencies.  WTF?  Where/how does it store its state?</p>\n",
            "last_activity_date": 1406010473,
            "question_id": 1087246,
            "score": 33,
            "tags": [
                "javascript",
                "persistence",
                "tiddlywiki"
            ],
            "title": "Can javascript access a filesystem?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<pre><code>var x = this.name;\n$(\"input[id=\" + x + \"]\").hide();\n</code></pre>\n\n<p>As you're using an ID, this would perform better</p>\n\n<pre><code>$(\"#\" + x).hide();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<pre><code>var x = $(this).attr(\"name\");\n$(\"#\" + x).hide();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><code>$(\"#\" + $(this).attr(\"name\")).hide();</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>$(\"#\" + this.id).hide();\n</code></pre>\n\n<p>OR you can do something like this.</p>\n\n<pre><code>var id = this.id;\n$('#' + id).hide();\n</code></pre>\n\n<p>OR you can give some effect also.</p>\n\n<pre><code>$(\"#\" + this.id).slideUp();\n</code></pre>\n\n<p>If you want to remove the entire element permanently form the page.</p>\n\n<pre><code>$(\"#\" + this.id).remove();\n</code></pre>\n\n<p>You can also use it in this also.</p>\n\n<pre><code>$(\"#\" + this.id).slideUp('slow', function (){\n    $(\"#\" + this.id).remove();\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<pre><code>$(\"input\").click(function(){\n        var name = $(this).attr(\"name\");\n        $('input[name=\"' + name + '\"]').hide();    \n    });   \n</code></pre>\n\n<p>Also works with ID:</p>\n\n<pre><code>var id = $(this).attr(\"id\");\n$('input[id=\"' + id + '\"]').hide();\n</code></pre>\n\n<p>when, (sometimes) </p>\n\n<pre><code>$('input#' + id).hide();\n</code></pre>\n\n<p>does not work, <a href=\"http://api.jquery.com/id-selector/\" rel=\"nofollow\">as it should</a>.</p>\n\n<p>You can even do both:</p>\n\n<pre><code>$('input[name=\"' + name + '\"][id=\"' + id + '\"]').hide();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>How do I use the javascript variables as a parameter in a jquery selector?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n$(function(){    \n    $(\"input\").click(function(){\n        var x = $(this).attr(\"name\");\n        $(\"input[id=x]\").hide();    \n    });    \n});\n&lt;/script&gt;\n\n&lt;input type=\"text\" id=\"bx\"/&gt;&lt;input type=\"button\" name=\"bx\"/&gt;\n&lt;input type=\"text\" id=\"by\"/&gt;&lt;input type=\"button\" name=\"by\"/&gt;\n</code></pre>\n\n<p>Basically what I want to do is to be able to hide the element which has id that is equal to the name of the element that is being clicked.</p>\n",
            "last_activity_date": 1364563279,
            "question_id": 5891840,
            "score": 38,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How to use javascript variables in jquery selectors"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I used to work with the ex-program manager for JavaScript within Microsoft, on a non-browser EcmaScript (err.. JScr... JavaScript) project.  We had some lengthy discussions about closures.  In the end, the point is that they are harder to GC, not impossible.  I'd have to read DC's discussion of how MS is 'wrong' that closures cause memory leaks -- for in IE's older implementations, closures were certainly problematic, because they were very hard to garbage collect <strong>with the MS implementation</strong>.  I find it strange that a Yahoo guy would try to tell the MS architects that a known issue with their code was somewhere else.  As much as I appreciate his work, I don't see what basis he had there.</p>\n\n<p>Remember, the article you reference above refers to IE6, as IE7 was still under heavy development at the time of its writing.  </p>\n\n<p>As an aside -- thank god, IE6 is dead (don't make my dig up the funeral pictures).  Although, don't forget its legacy... I've yet to see anyone make a credible argument that it wasn't the finest browser in the world on day 1 of its release -- the problem was that they won the browser war.  And so, in what amounts to one of the larger blunders of their history -- they fired the team afterwards and it sat stagnant for nearly 5 years.  The IE team was down to 4 or 5 guys doing bug fixes for years, creating a huge brain drain and falling behind the curve dramatically.  By the time they rehired the team and realized where they were, they were years behind because of the added cruft of dealing with a monolothic codebase that nobody really understood anymore.  That's my perspective as an internal in the company, but not directly tied to that team.  </p>\n\n<p>Remember too, IE never optimized for closures because there was no ProtoypeJS (heck, there was no Rails), and jQuery was barely a glimmer in Resig's head.  </p>\n\n<p>At the time of the writing, they were also still targeting machines with 256 megs of RAM, which also hadn't been end-of-life'd.</p>\n\n<p>I thought it only fair to hand you this history lesson, after making me read your entire book of a question.</p>\n\n<p>In the end, my point is that you're referencing material which is hugely dated.  Yes, avoid closures in IE6, as they cause memory leaks -- but what didn't in IE6?</p>\n\n<p>In the end, it is a problem that MS has addressed and continues to address.  You're going to make some level of closures, that was the case, even back then.</p>\n\n<p>I know that they did heavy work in this area around IE8 (as my unmentionable project used the non-at-the-time standard JavaScript engine), and that work has continued into IE9/10.  StatCounter (http://gs.statcounter.com/) suggests that IE7 is down to a 1.5% market share, down from 6% a year ago, and in developing 'new' sites, IE7 becomes less and less relevant.  You can also develop for NetScape 2.0, which introduced JavaScript support, but that would be only slightly less silly.</p>\n\n<p>Really... Don't try to over-optimize for the sake of an engine which doesn't exist anymore.</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>Right, after spending some time with that <code>IEJSLeaksDetector</code> tool, I've found out that the things I talked about in my original question <strong><em>DO NOT CAUSE MEM LEAKS</em></strong>. However, there was 1 leak that did pop up. Thankfully, I've managed to find a solution:</p>\n\n<p>I have a main script, and at the bottom, there's an old school:</p>\n\n<pre><code>window.onload = function()\n{\n    //do some stuff, get URI, and call:\n    this['_init' + uri[0].ucFirst()](uri);//calls func like _initController\n    //ucFirst is an augmentation of the String.prototype\n}\n</code></pre>\n\n<p>This causes a leak in IE8, That I couldn't fix with a <code>window.onbeforeunload</code> handler. It seems you have to avoid binding the handler to the global object. The solution lies in closures and event listeners, it's a bit of a faff, but here's what I ended up doing:</p>\n\n<pre><code>(function(go)\n{//use closure to avoid leaking issue in IE\n    function loader()\n    {\n        var uri = location.href.split(location.host)[1].split('/');\n        //do stuff\n        if (this['_init' + uri[0].ucFirst()] instanceof Function)\n        {\n            this['_init' + uri[0].ucFirst()](uri);\n        }\n        if (!(this.removeEventListener))\n        {\n            this.detachEvent('onload',loader);//(fix leak?\n            return null;\n        }\n        this.removeEventListener('load',loader,false);\n    }\n    if (!(go.addEventListener))\n    {\n        go.attachEvent('onload',loader);//(IE...\n    }\n    else\n    {\n        go.addEventListener('load',loader,false);\n    }\n})(window);\n</code></pre>\n\n<p>That way, the (on)load event is unbound just before the <code>window.load</code> handler returns, according to the IEJSLeaksDetector tool, there are <em>NO</em> leaks in my application. I'm happy with that. I hope this snippet is of some use to one of you - if someone has suggestions to improve this approach, don't hesitate to do so!</p>\n\n<p>Cheers, and thanks to all of you who went through the trouble of reading and trying my dribble above!</p>\n\n<hr>\n\n<p>PS: in case someone cares, here's the ucFirst String method:</p>\n\n<pre><code>if (!(String.prototype.ucFirst))\n{\n    String.prototype.ucFirst = function()\n    {\n        \"use strict\";\n        return this.charAt(0).toUpperCase() + this.slice(1);\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p><strong><em>Solved</em></strong></p>\n\n<p>There's a lot of contradictory information on the web, regarding this subject. Thanks to @John, I managed to work out that the closures (as used below) aren't the cause of memory leaks, and that -even in IE8- they're not that common as people claim. In fact there was only 1 leak that occurred in my code, which proved not that difficult to fix. </p>\n\n<p>From now on, my answer to this question will be:<br/>\n<em>AFAIK, the only time IE8 leaks, is when events are attached/handlers are set on the global object. (<code>window.onload</code>,<code>window.onbeforeunload</code>,...). To get around this, see my answer below.</em></p>\n\n<hr>\n\n<p><strong><em>HUGE</em> UPDATE:</strong></p>\n\n<p>I'm completly lost now... After some time digging through articles and tuts both old and new, I'm left with at least one humongous contradiction. While one of <em>THE</em> JavaScript Guru's (Douglas Crockford) says:</p>\n\n<blockquote>\n  <p>Since IE is unable to do its job and reclaim the cycles, it falls on us to do it. If we explicitly break the cycles, then IE will be able to reclaim the memory. According to Microsoft, closures are the cause of memory leaks. This is of course deeply wrong, but it leads to Microsoft giving very bad advice to programmers on how to cope with Microsoft's bugs. It turns out that it is easy to break the cycles on the DOM side. It is virtually impossible to break them on the JScript side.</p>\n</blockquote>\n\n<p>And as @freakish pointed out that my snippets below are similar to jQuery's internal workings I felt pretty secure about my solution not causing memory leaks. At the same time I found <a href=\"http://msdn.microsoft.com/en-us/library/bb250448%28v=vs.85%29.aspx\">this MSDN page</a>, where the section <code>Circular References with Closures</code> was of particular interest to me. The figure below is pretty much a schematic representation of how my code works, isn't it:</p>\n\n<p><img src=\"http://i.stack.imgur.com/NIsKQ.gif\" alt=\"Circular References with Closures\"></p>\n\n<p>The only difference being that I have the common sense of not attaching my event listeners to the elements themselves. <br/>All the same <em>Douggie</em> is quite unequivocal: closures are not the source of mem-leaks in IE. This contradiction leaves me clueless as to who's right. </p>\n\n<p>I've also found out that the leak issue isn't completely solved in IE9 either (can't find the link ATM). </p>\n\n<p><em>One last thing</em>: I've also come to learn that IE manages the DOM outside the JScript engine, which puts me in a spot of bother when I change the children of a <code>&lt;select&gt;</code> element, based on an ajax request: </p>\n\n<pre><code>function changeSeason(e)\n{\n    var xhr,sendVal,targetID;\n    e = e || window.event;//(IE...\n    targetID = this.id.replace(/commonSourceFragment/,'commonTargetFragment');//fooHomeSelect -&gt; barHomeSelect\n    sendVal = this.options[this.selectedIndex].innerHTML.trim().substring(0,1);\n    xhr = prepareAjax(false,(function(t)\n    {\n        return function()\n        {\n            reusableCallback.apply(this,[t]);\n        }\n    })(document.getElementById(targetID)),'/index/ajax');\n    xhr({data:{newSelect:sendVal}});\n}\n\nfunction reusableCallback(elem)\n{\n    if (this.readyState === 4 &amp;&amp; this.status === 200)\n    {\n        var data = JSON.parse(this.responseText);\n        elem.innerHTML = '&lt;option&gt;' + data.theArray.join('&lt;/option&gt;&lt;option&gt;') + '&lt;/option&gt;';\n    }\n}\n</code></pre>\n\n<p>If IE really does manage the DOM as though the JScript engine weren't there, what are the odds that the option elements aren't deallocated using this code?<br/> I've deliberately added this snippet as an example, because in this case I'm passing variables that are part of the closure scope as an argument to a global function. I couldn't find any documentation on this practice, but based on the documentation provided by Miscrosoft, it should break any circular references that might occur, doesn't it? </p>\n\n<hr>\n\n<hr>\n\n<p><strong>Warning</strong>: lengthy question... (<em>sorry</em>)</p>\n\n<p>I've written a couple of fairly large JavaScripts to make Ajax calls in my web application. in order to avoid tons of callbacks and events, I'm taking full advantage of event delegation and closures. Now I've written a function that has me wondering as to possible memory leaks. Though I know IE > 8 deals with closures a lot better then its predecessors, it is company policy to support IE 8 all the same. </p>\n\n<p>Below I've provided an example of what I'm on about, <a href=\"http://jsfiddle.net/6xsRv/\">here</a> you can find a similar example, though it doesn't use ajax, but a setTimeout, the result is pretty much the same. (You can, of course skip the code below, to the question itself)</p>\n\n<p>The code I have in mind is this: </p>\n\n<pre><code>function prepareAjax(callback,method,url)\n{\n    method = method || 'POST';\n    callback = callback || success;//a default CB, just logs/alerts the response\n    url = url || getUrl();//makes default url /currentController/ajax\n    var xhr = createXHRObject();//try{}catch etc...\n    xhr.open(method,url,true);\n    xhr.setRequestMethod('X-Requested-with','XMLHttpRequest');\n    xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded');\n    xhr.setRequestHeader('Accept','*/*');\n    xhr.onreadystatechange = function()\n    {\n        callback.apply(xhr);\n    }\n    return function(data)\n    {\n        //do some checks on data before sending: data.hasOwnProperty('user') etc...\n        xhr.send(data);\n    }\n}\n</code></pre>\n\n<p>All pretty straight-forward stuff, except for the <code>onreadystatechange</code> callback. I noticed some issues with IE when binding the handler directly: <code>xhr.onreadystatechange = callback;</code>, hence the anonymous function. Don't know why, but I found this to be the easiest way to make it work. </p>\n\n<p>As I said, I'm using a lot of event delegation, so you can imagine it may prove useful to have access to the actual element/event that fired the ajax call. So I have some event handlers that look like this:</p>\n\n<pre><code>function handleClick(e)\n{\n    var target,parent,data,i;\n    e = e || window.event;\n    target = e.target || e.srcElement;\n    if (target.tagName.toLowerCase() !== 'input' &amp;&amp; target.className !== 'delegateMe')\n    {\n        return true;\n    }\n    parent = target;\n    while(parent.tagName.toLowerCase() !== 'tr')\n    {\n        parent = parent.parentNode;\n    }\n    data = {};\n    for(i=0;i&lt;parent.cells;i++)\n    {\n        data[parent.cells[i].className] = parent.cells[i].innerHTML;\n    }\n    //data looks something like {name:'Bar',firstName:'Foo',title:'Mr.'}\n    i = prepareAjax((function(t)\n    {\n        return function()\n        {\n            if (this.readyState === 4 &amp;&amp; this.status === 200)\n            {\n                //check responseText and, if ok:\n                t.setAttribute('disabled','disabled');\n            }\n        }\n    })(target));\n    i(data);\n}\n</code></pre>\n\n<p>As you can see, the <code>onreadystatechange</code> callback is the return value of a function, that provides the reference to the <code>target</code> element when the callback is called. Thanks to event delegation, I no longer have to worry about events that might be bound to that element, when I decide to remove it from the DOM (which I do sometimes). <br/>\nTo my mind, however, the call object of the callback function might prove too much for IE's JScript engine and its garbage collector:</p>\n\n<blockquote>\n  <p>Event ==> handler ==> prepareAjax is a pretty normal call sequence, but the callback argument:</p>\n  \n  <p>[anon. func (argument t = target) returns anon. F (has access to t which in turn refs back to target)]<br/>&nbsp;&nbsp;&nbsp;===> passed to a anon callback function, called using .apply method to the xhr object, in turn a <em>private</em> variable to the prepareAjax function</p>\n</blockquote>\n\n<p>I've tested this \"construction\" in FF and chrome. It works just fine there, but would this kind of callstack of closure upon closure upon closure, on each occasion passing a reference to a DOM element be an issue in IE (especially versions prior to IE9)?</p>\n\n<hr>\n\n<p>No, I'm not going to use jQuery or other libs. I like pure JS, and want to know as much as I can about this seriously underrated language. The code snippets are not actual copy-paste examples, but provide, IMO, a good representation of how I'm using delegation, closures and callbacks throughout my script. So if some syntax isn't quite right, feel free to correct it, but that's not what this question is about, of course. </p>\n",
            "last_activity_date": 1341311132,
            "question_id": 11186750,
            "score": 18,
            "tags": [
                "javascript",
                "memory-leaks",
                "cross-browser",
                "closures"
            ],
            "title": "Memory leak risk in JavaScript closures"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Does this help? </p>\n\n<p><a href=\"http://www.quirksmode.org/js/iframe.html\" rel=\"nofollow\">http://www.quirksmode.org/js/iframe.html</a></p>\n\n<p>I only tested this in firefox, but if you have something like this:</p>\n\n<pre><code>&lt;iframe name='myframe' id='myframe' src='http://www.google.com'&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>You can get its address by using:</p>\n\n<pre><code>document.getElementById('myframe').src\n</code></pre>\n\n<p>Not sure if I understood your question correctly but anyways :)</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Ok, so in this application, there is an iframe in which the user is supplied with links or some capacity that allows that iframe to browse to some external site.  You are then looking to capture the URL to which the user has browsed.</p>\n\n<p>Something to keep in mind.  Since the URL is to an external source, you will be limited in how much you can interact with this iframe via javascript (or an client side access for that matter), this is known as browser cross-domain security, as apparently you have discovered.  There are clever work arounds, as presented here <a href=\"http://www.hackszine.com/blog/archive/2007/11/crossdomain_crossframe_javascr.html\" rel=\"nofollow\" title=\"Cross-domain, cross-frame Javascript\">Cross-domain, cross-frame Javascript</a>, although I do not think this work around applies in this case. </p>\n\n<p>About all you can access is the location, as you need.</p>\n\n<p>I would suggest making the code presented more resilitant and less error prone.  Try browsing the web sometime with IE or FF configured to show javascript errors.  You will be surprised just how many javascript errors are thrown, largely because there is a lot of error prone javascript out there, which just continues to proliferate.</p>\n\n<p>This solution assumes that the iframe in question is the same \"window\" context where you are running the javascript.  (Meaning, it is not embedded within another frame or iframe, in which case, the javascript code gets more involved, and you likely need to recursively search through the window hierarchy.)</p>\n\n<pre><code>&lt;iframe name='frmExternal' id='frmExternal' src='http://www.stackoverflow.com'&gt;&lt;/frame&gt;\n&lt;input type='text' id='txtUrl' /&gt;\n&lt;input type='button' id='btnGetUrl' value='Get URL' onclick='GetIFrameUrl();' /&gt;\n\n&lt;script language='javascript' type='text/javascript'&gt;\nfunction GetIFrameUrl()\n{\n    if (!document.getElementById)\n    {\n        return;\n    }\n\n    var frm = document.getElementById(\"frmExternal\");\n    var txt = document.getElementById(\"txtUrl\");\n\n    if (frm == null || txt == null)\n    {\n        // not great user feedback but slightly better than obnoxious script errors\n       alert(\"There was a problem with this page, please refresh.\");\n       return;\n    }\n\n    txt.value = frm.src;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can access the src property of the iframe but that will only give you the initially loaded URL.  If the user is navigating around in the iframe via you'll need to use an HTA to solve the security problem.</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms536474\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ms536474</a>(VS.85).aspx</p>\n\n<p>Check out the link, using an HTA and setting the \"application\" property of an iframe will allow you to access the document.href property and parse out all of the information you want, including DOM elements and their values if you so choose.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <a href=\"http://ra-ajax.org\" rel=\"nofollow\">Ra-Ajax</a> and have an iframe wrapped inside e.g. a Window control. Though in general terms I don't encourage people to use iframes (for <em>anything</em>)</p>\n\n<p>Another alternative is to load the HTML on the server and send it directly into the Window as the content of a Label or something. Check out how this <a href=\"http://ra-ajax.org/samples/Viewport-RSS-Starter-Kit.aspx\" rel=\"nofollow\">Ajax RSS parser</a> is loading the RSS items in the source which can be downloaded <a href=\"http://code.google.com/p/ra-ajax/\" rel=\"nofollow\">here</a> (Open Source - LGPL)</p>\n\n<p>(Disclaimer; I work with Ra-Ajax...)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Do not listen do them, men. It's easy, in fact.</p>\n\n<pre><code>document.getElementById('iframeID').contentWindow.location.href\n</code></pre>\n\n<p>By the way you can't access cross-domain iframe location at all.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>HTA works like a normal windows application.<br />\nYou write HTML code, and save it as an .hta file.<br /><br />\nHowever, there are, at least, one drawback: The browser can't open an .hta file; it's handled as a normal .exe program. So, if you place a link to an .hta onto your web page, it will open a download dialog, asking of you want to open or save the HTA file. If its not a problem for you, you can click \"Open\" and it will open a new window (that have no toolbars, so no Back button, neither address bar, neither menubar).<br />\n<br />\nI needed to do something very similar to what you want, but instead of <code>iframes</code>, I used a real <code>frameset</code>.<br />\nThe main page need to be a .hta file; the other should be a normal .htm page (or .php or whatever).<br /><br />\nHere's an example of a HTA page with  2 frames, where the top one have a button and a text field, that contains the second frame URL; the button updates the field:</p>\n\n<h3>frameset.hta</h3>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n    \t&lt;title&gt;HTA Example&lt;/title&gt;\n    \t&lt;HTA:APPLICATION id=\"frames\" border=\"thin\" caption=\"yes\" icon=\"http://www.google.com/favicon.ico\" showintaskbar=\"yes\" singleinstance=\"no\" sysmenu=\"yes\" navigable=\"yes\" contextmenu=\"no\" innerborder=\"no\" scroll=\"auto\" scrollflat=\"yes\" selection=\"yes\" windowstate=\"normal\"&gt;&lt;/HTA:APPLICATION&gt;\n    &lt;/head&gt;\n    &lt;frameset rows=\"60px, *\"&gt;\n    \t&lt;frame src=\"topo.htm\" name=\"topo\" id=\"topo\" application=\"yes\" /&gt;\n    \t&lt;frame src=\"http://www.google.com\" name=\"conteudo\" id=\"conteudo\" application=\"yes\" /&gt;\n    &lt;/frameset&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul>\n<li>There's an <code>HTA:APPLICATION</code> tag that sets some properties to the file; it's good to have, but it isn't a must.</li>\n<li>You <em>NEED</em> to place an <code>application=\"yes\"</code> at the frames' tags. It says they belongs to the program too and should have access to all data (if you don't, the frames will still show the error you had before). </li>\n</ul>\n\n<h3>topo.htm</h3>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n    \t&lt;title&gt;Topo&lt;/title&gt;\n    \t&lt;script type=\"text/javascript\"&gt;\n    \t\tfunction copia_url() {\n    \t\t\tcampo.value = parent.conteudo.location;\n    \t\t}\n    \t&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body style=\"background: lightBlue;\" onload=\"copia_url()\"&gt;\n    \t&lt;input type=\"button\" value=\"Copiar URL\" onclick=\"copia_url()\" /&gt;\n    \t&lt;input type=\"text\" size=\"120\" id=\"campo\" /&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<ul>\n<li>You should notice that I didn't used any getElement function to fetch the field; on HTA file, all elements that have an ID becomes instantly an object</li>\n</ul>\n\n<p>I hope this help you, and others that get to this question. It solved my problem, that looks like to be the same as you have.<br /><br />\nYou can found more information here: <a href=\"http://www.irt.org/articles/js191/index.htm\" rel=\"nofollow\">http://www.irt.org/articles/js191/index.htm</a><br /><br />\nEnjoy =]</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I did some tests in Firefox 3 comparing the value of <code>.src</code> and <code>.documentWindow.location.href</code> in an <code>iframe</code>. (Note: The <code>documentWindow</code> is called <code>contentDocument</code> in Chrome, so instead of <code>.documentWindow.location.href</code> in Chrome it will be <code>.contentDocument.location.href</code>.)</p>\n\n<p><code>src</code> is always the last URL that was loaded in the iframe without user interaction. I.e., it contains the first value for the URL, or the last value you set up with Javascript from the containing window doing:</p>\n\n<pre><code>document.getElementById(\"myiframe\").src = 'http://www.google.com/';\n</code></pre>\n\n<p>If the user navigates inside the iframe, you can't anymore access the value of the URL using src. In the previous example, if the user goes away from www.google.com and you do:</p>\n\n<pre><code>alert(document.getElementById(\"myiframe\").src);\n</code></pre>\n\n<p>You will still get \"http://www.google.com\".</p>\n\n<p><code>documentWindow.location.href</code> is only available if the iframe contains a page in the same domain as the containing window, but if it's available it always contains the right value for the URL, even if the user navigates in the iframe.</p>\n\n<p>If you try to access <code>documentWindow.location.href</code> (or anything under <code>documentWindow</code>) and the iframe is in a page that doesn't belong to the domain of the containing window, it will raise an exception:</p>\n\n<pre><code>document.getElementById(\"myiframe\").src = 'http://www.google.com/';\nalert(document.getElementById(\"myiframe\").documentWindow.location.href);\nError: Permission denied to get property Location.href\n</code></pre>\n\n<p>I have not tested any other browser.</p>\n\n<p>Hope it helps!</p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>I like your server side idea, even if my proposed implementation of it sounds a little bit ghetto.</p>\n\n<p>You could set the .innerHTML of the iframe to the HTML contents you grab server side. Depending on how you grab this, you will have to pay attention to relative versus absolute paths. </p>\n\n<p>Plus, depending on how the page you are grabbing interacts with other pages, this could totally not work (cookies being set for the page you are grabbing won't work across domains, maybe state is being tracked in Javascript... Lots of reasons this might not work.) </p>\n\n<p>I don't believe that tracking the current state of the page you are trying to mirror is theoretically possible, but I'm not sure. The site could track all sorts of things server side, you won't have access to this state. Imagine the case where on a page load a variable is set to a random value server-side, how would you capture this state?</p>\n\n<p>Do these ideas help with anything?</p>\n\n<p>-Brian J. Stinar-</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same problem, what I did was (using jquery) select all elements within the body and set css display to none (so it doesn't show my elements as a background or something) then got the iframe and put it on the absolute position with top 0 and left 0, width to 100% and height to 100%, removed the border (border: \"none\"), padding and margin.</p>\n\n<p>result:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function zoomResults(){\n        $(\"body *\").css(\"display\",\"none\");\n        $(\"#googleFrame\").css({\n            position:\"absolute\",\n            left:\"0\",\n            top:\"0\",\n            width:\"100%\",\n            height:\"100%\",\n            margin:\"0\",\n            padding:\"0\",\n            display:\"table\",\n            border:\"none\"\n        });\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use this.</p>\n\n<pre><code>var iframe = parent.document.getElementById(\"theiframe\");\nvar innerDoc = iframe.contentDocument || iframe.contentWindow.document;\n\nvar currentFrame = innerDoc.location.href;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have built a basic data entry application allowing users to browse external content in iframe and enter data quickly from the same page. One of the data variables is the URL.\nIdeally I would like to be able to load the iframes current url into a textbox with javascript. I realize now that this is not going to happen due to security issues.</p>\n\n<p>Has anyone done anything on the server side? or know of any .Net browser in browser controls. The ultimate goal is to just give the user an easy method of extracting the url of the page they are viewing in the iframe It doesn't necessarily HAVE to be an iframe, a browser in the browser would be ideal.</p>\n\n<p>Thanks,\nAdam</p>\n",
            "last_activity_date": 1380126868,
            "question_id": 44359,
            "score": 38,
            "tags": [
                "asp.net",
                "javascript",
                "dom",
                "iframe"
            ],
            "title": "How do I get the current location of an iframe?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>As a recommended alternative to <code>document.write</code> you could use <a href=\"http://www.howtocreate.co.uk/tutorials/javascript/dombasics\">DOM manipulation</a> to directly query and add node elements to the DOM.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>Try to use getElementById() or getElementsByName() to access a specific element and then to use innerHTML property:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;div id=\"myDiv1\"&gt;&lt;/div&gt;\n        &lt;div id=\"myDiv2\"&gt;&lt;/div&gt;\n    &lt;/body&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        var myDiv1 = document.getElementById(\"myDiv1\");\n        var myDiv2 = document.getElementById(\"myDiv2\");\n\n        myDiv1.innerHTML = \"&lt;b&gt;Content of 1st DIV&lt;/b&gt;\";\n        myDiv2.innerHTML = \"&lt;i&gt;Content of second DIV element&lt;/i&gt;\";\n    &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The question depends on what you are actually trying to do.</p>\n\n<p>Usually, instead of doing <code>document.write</code> you can use <code>someElement.innerHTML</code> or better, <code>document.createElement</code> with an <code>someElement.appendChild</code>.</p>\n\n<p>You can also consider using a library like jQuery and using the modification functions in there: <a href=\"http://api.jquery.com/category/manipulation/\">http://api.jquery.com/category/manipulation/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Just dropping a note here to say that, although using <code>document.write</code> is highly frowned upon due to <a href=\"http://www.stevesouders.com/blog/2012/04/10/dont-docwrite-scripts/\">performance concerns</a> (synchronous DOM injection and evaluation), there is also <strong>no actual 1:1 alternative</strong> if you are using <code>document.write</code> to inject script tags on demand.</p>\n\n<p>There are a lot of great ways to avoid having to do this (e.g. script loaders like <a href=\"http://requirejs.org/\">RequireJS</a> that manage your dependency chains) but they are more invasive and so are best used <em>throughout</em> the site/application.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is probably the most correct, direct replacement: <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.insertAdjacentHTML\" rel=\"nofollow\">insertAdjacentHTML</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is code that should replace document.write in-place:</p>\n\n<pre><code>document.write=function(s){\n    var scripts = document.getElementsByTagName('script');\n    var lastScript = scripts[scripts.length-1];\n    lastScript.insertAdjacentHTML(\"beforebegin\", s);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The reason that your HTML is replaced is because of an evil JavaScript function: <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write()</code></a></strong>.</p>\n\n<p>It is most definitely \"bad form.\" It only works with webpages if you use it on the page load; and if you use it during runtime, it will replace your entire document with the input. And if you're applying it as strict XHTML structure it's not even valid code.</p>\n\n<h1>the problem:</h1>\n\n<blockquote>\n  <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write</code></a> writes to the document stream.  Calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write</code></a> on a closed (or loaded) document automatically calls <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.open\" rel=\"nofollow\"><code>document.open</code></a> which will clear the document.</p>\n</blockquote>\n\n<p>-- <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\">quote from the MDN</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write()</code></a> has two henchmen, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.open\" rel=\"nofollow\"><code>document.open()</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.close\" rel=\"nofollow\"><code>document.close()</code></a>.  When the HTML document is loading, the document is \"open\".  <strong>When the document has finished loading, the document has \"closed\".</strong> Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write()</code></a> at this point will erase your entire (closed) HTML document and replace it with a new (open) document.  This means your webpage has erased itself and started writing a new page, starting from scratch.</p>\n\n<p><em>I believe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write()</code></a> causes the browser to have a performance decrease as well (correct me if I am wrong).</em></p>\n\n<h1>an example:</h1>\n\n<p>This example writes output to the HTML document <strong>after</strong> the page has loaded.  Watch <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.write\" rel=\"nofollow\"><code>document.write()</code></a>'s evil powers clear the entire document when you press the \"exterminate\" button:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>I am an ordinary HTML page.  I am innocent, and purely for informational purposes.  Please do not &lt;input type=\"button\" onclick=\"document.write('This HTML page has been succesfully exterminated.')\" value=\"exterminate\"/&gt; me!</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h1>the alternatives:</h1>\n\n<ul>\n<li><code>.innerHTML</code>  This is a wonderful alternative, but you would need to select WHERE you want to put the <code>.innerHTML</code> text.  </li>\n</ul>\n\n<p>Example: <code>document.getElementById('output1').innerHTML = 'Some text!';</code></p>\n\n<ul>\n<li><code>.createTextNode()</code> is the alternative recommended by the <a href=\"http://www.w3.org\" rel=\"nofollow\">W3C</a>.  </li>\n</ul>\n\n<p>Example: <code>var para = document.createElement('p');\npara.appendChild(document.createTextNode('Hello, '));</code></p>\n\n<p><em>NOTE:  This is known to have some performance decreases (slower than <code>.innerHTML</code>).  I recommend using <code>.innerHTML</code> instead.</em></p>\n\n<h1>the new example (<code>.innerHTML</code>):</h1>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>I am an ordinary HTML page.  I am innocent, and purely for informational purposes.  Please do not &lt;input type=\"button\" onclick=\"document.getElementById('output1').innerHTML = 'There was an error exterminating this page.  Please replace &lt;code&gt;.innerHTML&lt;/code&gt; with &lt;code&gt;document.write()&lt;/code&gt; to complete extermination.';\" value=\"exterminate\"/&gt; me!&lt;p id=\"output1\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>In tutorials I've learnt to use <code>document.write</code>. Now I understand that by many this is frowned upon. I've tried <code>print()</code>, but then it literally sends it to the printer.. ^.^</p>\n\n<p>So what are alternatives I should use, and why shouldn't I use <code>document.write</code>? Both w3schools and MDN use <code>document.write</code>.</p>\n",
            "last_activity_date": 1383510527,
            "question_id": 4537963,
            "score": 22,
            "tags": [
                "javascript",
                "document.write"
            ],
            "title": "What are alternatives to document.write?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You can use <code>setTimeout</code> to achieve a similar effect:</p>\n\n<pre><code>var a = 1 + 3;\nvar b;\nsetTimeout(function() {\n    b = a + 4;\n}, (3 * 1000));\n</code></pre>\n\n<p>This doesn't really 'sleep' JavaScript\u2014it just executes the function passed to <code>setTimeout</code> after a certain duration (specified in milliseconds). Although it is possible to write a sleep function for JavaScript, it's best to use <code>setTimeout</code> if possible as it doesn't freeze everything during the sleep period.</p>\n",
                    "is_accepted": true,
                    "score": 64
                },
                {
                    "body": "<p>In case you really need a sleep() just to test something. But be aware that it'll crash the browser most of the times while debuggin - probably that's why you need it anyway. In production mode I'll comment out this function.</p>\n\n<pre><code>function pauseBrowser(millis) {\n    var date = Date.now();\n    var curDate = null;\n    do {\n        curDate = Date.now();\n    } while (curDate-date &lt; millis);\n}\n</code></pre>\n\n<p>Don't use new Date() in the loop, unless you want to waste memory, processing power, battery and possibly the lifetime of your device.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any way I can do a sleep in JavaScript before it carries out another action?</p>\n\n<p>Example:</p>\n\n<pre><code> var a = 1+3;\n // sleep 3 seconds before the next action here\n var b = a + 4;\n</code></pre>\n",
            "last_activity_date": 1420842050,
            "question_id": 758688,
            "score": 42,
            "tags": [
                "javascript"
            ],
            "title": "Sleep in Javascript"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>There's a BigInteger library for JavaScript available here:</p>\n\n<ul>\n<li><a href=\"http://www-cs-students.stanford.edu/~tjw/jsbn/\" rel=\"nofollow\">jsbn.js</a></li>\n</ul>\n\n<p>(Note that I haven't used this myself. Try it and see what you think.)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It looks like this has been solved before:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/3072307/is-there-a-bignum-library-for-javascript\">Is there a bignum library for JavaScript?</a></p>\n\n<p><a href=\"http://jsfromhell.com/classes/bignumber\" rel=\"nofollow\">http://jsfromhell.com/classes/bignumber</a></p>\n\n<p><a href=\"http://www-cs-students.stanford.edu/~tjw/jsbn/\" rel=\"nofollow\">http://www-cs-students.stanford.edu/~tjw/jsbn/</a></p>\n\n<p>If you only need integers you can use <a href=\"https://github.com/peterolson/BigInteger.js\" rel=\"nofollow\">BigInteger.js</a>.</p>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>There is also Silent Matt's <a href=\"http://silentmatt.com/biginteger/\" rel=\"nofollow\">library</a> for Big Integers. It does not handle decimals.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>While looking for an big integer library for an ElGamal crypto implementation I tested several libraries with the following results:</p>\n\n<p><em>I recommend this one:</em> <strong>Tom Wu's jsbn.js (<a href=\"http://www-cs-students.stanford.edu/~tjw/jsbn/\">http://www-cs-students.stanford.edu/~tjw/jsbn/</a>)</strong></p>\n\n<ul>\n<li>Comprehensive set of functions and fast</li>\n</ul>\n\n<p><strong>Leemon Baird's big integer library (<a href=\"http://www.leemon.com/crypto/BigInt.js\">http://www.leemon.com/crypto/BigInt.js</a>)</strong></p>\n\n<ul>\n<li>Comprehensive set of functions and pretty fast</li>\n<li><strong>BUT:</strong> Negative number representation is buggy!</li>\n</ul>\n\n<p><strong>bignumber.js (<a href=\"https://github.com/MikeMcl/bignumber.js\">https://github.com/MikeMcl/bignumber.js</a>)</strong></p>\n\n<ul>\n<li>Pretty complete set of functions</li>\n<li><strong>BUT:</strong> Converting really big numbers from strings into BigNumber objects result in INFINITY</li>\n</ul>\n\n<p><strong>Scheme arithmetic library for JavaScript (<a href=\"https://github.com/jtobey/javascript-bignum\">https://github.com/jtobey/javascript-bignum</a>)</strong></p>\n\n<ul>\n<li>JS-Implementation of Scheme arithmetic functions</li>\n<li><strong>BUT:</strong> No function for y= x^e mod n</li>\n</ul>\n\n<p><em>I haven't tested this by myself:</em> <strong>BigNumber (<a href=\"http://jsfromhell.com/classes/bignumber\">http://jsfromhell.com/classes/bignumber</a>)</strong> </p>\n\n<ul>\n<li>Functions for high precision claculations</li>\n<li><strong>BUT:</strong> It's said to be slow due to internal representation of numbers as strings</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I'm looking for a Mathematical solution that deals with really (long, big, huge, storms) numbers. I haven't found anything yet, But I don't wanna think that this problem hasn't be solve at this time. I'm looking for an easy Number solution, like Microsoft Excel Precision (30 decimals), or a BigInteger (Java) solution. in Javascript of course.</p>\n",
            "last_activity_date": 1415835496,
            "question_id": 4288821,
            "score": 16,
            "tags": [
                "javascript",
                "floating-point",
                "decimal",
                "biginteger",
                "bignum"
            ],
            "title": "How to deal with big numbers in javascript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p><code>console.log</code> is not standardized, so the behavior is rather undefined, and can be changed easily from release to release of the developer tools. Your book is likely to be outdated, as might my answer soon.</p>\n\n<p>To our code, it does not make any difference whether <code>console.log</code> is async or not, it does not provide any kind of callback or so; and the values you pass are always referenced and computed at the time you call the function.</p>\n\n<p>We don't really know what happens then (OK, we could, since Firebug, Chrome Devtools and Opera Dragonfly are all open source). The console will need to store the logged values somewhere, and it will display them on the screen. The rendering will happen asynchronously for sure (being throttled to rate-limit updates), as will future interactions with the logged objects in the console (like expanding object properties).</p>\n\n<p>So the console might either clone (serialize) the mutable objects that you did log, or it will store references to them. The first one doesn't work well with deep objects. Also, at least the initial rendering in the console will probably show the \"current\" state of the object, i.e. the one when it got logged - in your example you see <code>Object {}</code>.</p>\n\n<p>However, when you expand the object to inspect its properties further, it is likely that the console will have only stored a reference to your object and its properties, and displaying them now will then show their current (already mutated) state. If you click on the <code>+</code>, you should be able to see the <code>bar</code> property in your example.</p>\n\n<p>Here's a screenshot that was posted in the <a href=\"http://code.google.com/p/chromium/issues/detail?id=50316\" rel=\"nofollow\">bug report</a> to explain their \"fix\":</p>\n\n<p><img src=\"http://i.stack.imgur.com/UEMqd.png\" alt=\"\">\n</p>\n\n<p>So, some values might be referenced long after they have been logged, and the evaluation of these is rather <em>lazy</em> (\"when needed\"). The most famous example of this discrepancy is handled in the question <a href=\"http://stackoverflow.com/questions/4057440/is-chromes-javascript-console-lazy-about-evaluating-arrays\">Is Chrome&#39;s JavaScript console lazy about evaluating arrays?</a> A workaround is to make sure to log serialized snapshots of your objects always, e.g. by doing <code>console.log(JSON.stringify(obj))</code>. This will work for non-circular and rather small objects only, though. See also <a href=\"http://stackoverflow.com/q/7389069/1048572\">console.log object at current state</a>.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>When using console.log:</p>\n\n<pre><code>a = {}; a.a=1;console.log(a);a.b=function(){};\n// without b\na = {}; a.a=1;a.a1=1;a.a2=1;a.a3=1;a.a4=1;a.a5=1;a.a6=1;a.a7=1;a.a8=1;console.log(a);a.b=function(){};\n// with b, maybe\na = {}; a.a=function(){};console.log(a);a.b=function(){};\n// with b\n</code></pre>\n\n<p>in the first situation the object is simple enough, so console can 'stringify' it then present to you; but in the other situations, a is too 'complicated' to 'stringify' so console will show you the in memory object instead, and yes, when you look at it b has already be attached to a.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am currently reading <a href=\"http://pragprog.com/book/tbajs/async-javascript\">Async Javascript</a> by Trevor Burnham.  This has been a great book so far.</p>\n\n<p>He talks about this snippet and console.log being 'async' in the Safari and Chrome console. Unfortunately I can't replicate this. Here is the code:</p>\n\n<pre><code>var obj = {}; \nconsole.log(obj); \nobj.foo = 'bar';\n// my outcome: Object{}; 'bar';\n// The book outcome: {foo:bar};\n</code></pre>\n\n<p>If this was async, I would anticipate the outcome to be the books outcome. console.log() is put in the event queue until all code is executed, then it is ran and it would have the bar property.</p>\n\n<p>It appears though it is running synchronously.</p>\n\n<p>Am I running this code wrong? Is console.log actually async?</p>\n",
            "last_activity_date": 1412063148,
            "question_id": 23392111,
            "score": 5,
            "tags": [
                "javascript",
                "asynchronous"
            ],
            "title": "console.log() async or sync?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Change your <code>onclick</code>:</p>\n\n<pre><code>onclick=\"count\"\n</code></pre>\n\n<p><strong>Or</strong> change your count function to something like this:</p>\n\n<pre><code>function count()\n{\n\n    var demo = document.getElementById(\"demo\");\n    return function() {\n        demo.innerHTML = ++a;\n    }\n\n}\n</code></pre>\n\n<hr>\n\n<p>Here is a nice demo I put together:</p>\n\n<p>Code (this assumes that you add <code>id=\"the_button\"</code> to your button):</p>\n\n<pre><code>window.onload = function () {\n    var button = document.getElementById(\"the_button\");\n    button.onclick = count();\n\n    function count() {\n        var a = 0;\n        var demo = document.getElementById(\"demo\");\n        return function () {\n            demo.innerHTML = ++a;\n        }\n    }\n}\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/maniator/ck5Yz/\" rel=\"nofollow\">http://jsfiddle.net/maniator/ck5Yz/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your code is not working because it violates the default <a href=\"https://developer.chrome.com/extensions/contentSecurityPolicy.html\">Content Security Policy</a>. I've created a screencast of one minute to show what's wrong:</p>\n\n<p><a href=\"http://i.stack.imgur.com/s8Wxd.gif\"><img src=\"http://i.stack.imgur.com/s8Wxd.gif\" alt=\"screencast\" title=\"1 minute screencast to show what's wrong\"></a></p>\n\n<p>First, I've shown how to debug the problem. Right-click on your popup button, and click on <a href=\"https://developer.chrome.com/extensions/tut_debugging.html#inspect-popup\">\"Inspect popup\"</a>. After doing that, you will see the following error message:</p>\n\n<blockquote>\n  <p>Refused to execute inline script because it violates the following Content Security Policy directive: \"script-src 'self' chrome-extension-resource:\".</p>\n</blockquote>\n\n<p>This explains that your code is not working, because it violates the default CSP: <a href=\"https://developer.chrome.com/extensions/contentSecurityPolicy.html#JSExecution\">Inline JavaScript will not be executed</a>. To solve the problem, you have to remove all inline JavaScript from your HTML file, and put it in a separate JS file.</p>\n\n<p>The result is shown below:</p>\n\n<h3><code>hello.html</code> (popup page)</h3>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p id=\"demo\"&gt;=a&lt;/p&gt;\n&lt;button type=\"button\" <b>id=\"do-count\"</b>&gt;Count&lt;/button&gt;\n<b>&lt;script src=\"popup.js\"&gt;&lt;/script&gt;</b>\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h3><code>popup.js</code></h3>\n\n<pre class=\"lang-js prettyprint-override\"><code>var a=0;\nfunction <b>count</b>() {\n    a++;\n    document.getElementById('demo').<b>textContent</b> = a;\n}\n<b>document.getElementById('do-count').onclick = count;</b></code></pre>\n\n<p>Note that I've replaced <code>innerHTML</code> with <code>textContent</code>. Learn to use <code>textContent</code> instead of <code>innerHTML</code> when you intend to change the text. In this simple example it does not matter, but in more complex applications, it might become a security issue in the form of XSS.</p>\n",
                    "is_accepted": true,
                    "score": 39
                }
            ],
            "body": "<p>I have created a JavaScript variable and when I click on the button it should increment by 1, but its not happening.</p>\n\n<p>Here's <code>manifest.json</code>.</p>\n\n<pre><code>{\n  \"name\":\"Facebook\",\n  \"version\":\"1.0\",\n  \"description\":\"My Facebook Profile\",\n  \"manifest_version\":2,\n  \"browser_action\":{\n    \"default_icon\":\"google-plus-red-128.png\",\n    \"default_popup\":\"hello.html\"\n  }\n}\n</code></pre>\n\n<p>Here is the code for the html page </p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nvar a=0;\nfunction count()\n{\n  a++;\n  document.getElementById(\"demo\").innerHTML=a;\n  return a;\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p id=\"demo\"&gt;=a&lt;/p&gt;\n&lt;button type=\"button\" onclick=\"count()\"&gt;Count&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I want the extension to show me the value of a and increment it by one each time I click on the extension or the button</p>\n\n<p><img src=\"http://i.stack.imgur.com/G0dMA.png\" alt=\"picture of the extension\"></p>\n",
            "last_activity_date": 1373749994,
            "question_id": 17601615,
            "score": 4,
            "tags": [
                "javascript",
                "google-chrome",
                "button",
                "google-chrome-extension",
                "content-security-policy"
            ],
            "title": "The Chrome extension popup is not working, click events are not handled"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>First of all, parent-child scope relation does matter. You have two possibilities to emit some event:</p>\n\n<ul>\n<li><code>$broadcast</code> -- dispatches the event downwards to all child scopes,</li>\n<li><code>$emit</code> -- dispatches the event upwards through the scope hierarchy.</li>\n</ul>\n\n<p>I don't know anything about your controllers (scopes) relation, but there are several options:</p>\n\n<ol>\n<li><p>If scope of <code>firstCtrl</code> is parent of the <code>secondCtrl</code> scope, your code should\nwork by replacing <code>$emit</code> by <code>$broadcast</code> in <code>firstCtrl</code>:</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$broadcast('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$on('someEvent', function(event, mass) { console.log(mass); });\n}\n</code></pre></li>\n<li><p>In case there is no parent-child relation between your scopes you\ncan inject <code>$rootScope</code> into the controller and broadcast the event\nto all child scopes (i.e. also <code>secondCtrl</code>).</p>\n\n<pre><code>function firstCtrl($rootScope)\n{\n    $rootScope.$broadcast('someEvent', [1,2,3]);\n}\n</code></pre></li>\n<li><p>Finally, when you need to dispatch the event from child controller\nto scopes upwards you can use <code>$scope.$emit</code>. If scope of <code>firstCtrl</code> is parent of the <code>secondCtrl</code> scope:</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$on('someEvent', function(event, data) { console.log(data); });\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$emit('someEvent', [1,2,3]);\n}\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 777
                },
                {
                    "body": "<p>You can call a service from your controller that returns a promise and then use it in your controller. And further use $emit or $broadcast to inform other controllers about it. \nIn my case, I had to make http calls through my service, so I did something like this : </p>\n\n<pre><code>function ParentController($scope, testService) {\ntestService.getList()\n.then(function(data){\n      $scope.list = testService.list;\n      })\n.finally(function(){\n       $scope.$emit('listFetched');\n           })\n\n\n\n function ChildController($scope, testService){\n $scope.$on('listFetched', function(event, data) {\n   // use the data accordingly\n    })\n }\n</code></pre>\n\n<p>and my service looks like this </p>\n\n<pre><code>app.service('testService',['$http', function($http){\n\nthis.list = [];\n\n this.getList = function () {\n    return $http.get(someUrl)\n        .then(function (response) {\n            if (typeof response.data === 'object') {\n                 list = response.data.results;\n\n                return response.data;\n            } else {\n                // invalid response\n                return $q.reject(response.data);\n            }\n\n        }, function (response) {\n            // something went wrong\n            return $q.reject(response.data);\n        });\n\n       }\n\n\n    }])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I would additionally suggest a 4th option as a better alternative to the proposed options by @zbynour. </p>\n\n<p>Use <code>$rootScope.$emit</code> rather than <code>$rootScope.$broadcast</code> regardless of the relationship between trasmitting and receiving controller. That way, the event remains within the set of <code>$rootScope.$$listeners</code> whereas with <code>$rootScope.$broadcast</code> the event propagates to all children scopes, most of which will probably not be listeners of that event anyway. And of course in the receiving controller's end you just use <code>$rootScope.$on</code>.</p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>This is my function:</p>\n\n<pre><code>$rootScope.$emit('setTitle', newVal.full_name);\n\n$rootScope.$on('setTitle', function(event, title) {\n    if (scope.item) \n        scope.item.name = title;\n    else \n        scope.item = {name: title};\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can I send my <code>$scope</code> object from one controller to another using <code>.$emit</code> and <code>.$on</code> methods?</p>\n\n<pre><code>function firstCtrl($scope)\n{\n    $scope.$emit('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope)\n{\n    $scope.$on('someEvent', function(mass) { console.log(mass); });\n}\n</code></pre>\n\n<p>It doesn't work the way I think it should. How do <code>$emit</code> and <code>$on</code> work?</p>\n",
            "last_activity_date": 1418032553,
            "question_id": 14502006,
            "score": 325,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "Working with $scope.$emit and .$on"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Here's a template I sometimes use for OOP-similar behavior in JavaScript. As you can see, you can simulate private (both static and instance) members using closures. What <code>new MyClass()</code> will return is an object with only the properties assigned to the <code>this</code> object and in the <code>prototype</code> object of the \"class.\"</p>\n\n<pre><code>var MyClass = (function () {\n    // private static\n    var nextId = 1;\n\n    // constructor\n    var cls = function () {\n        // private\n        var id = nextId++;\n        var name = 'Unknown';\n\n        // public (this instance only)\n        this.get_id = function () { return id; };\n\n        this.get_name = function () { return name; };\n        this.set_name = function (value) {\n            if (typeof value != 'string')\n                throw 'Name must be a string';\n            if (value.length &lt; 2 || value.length &gt; 20)\n                throw 'Name must be 2-20 characters long.';\n            name = value;\n        };\n    };\n\n    // public static\n    cls.get_nextId = function () {\n        return nextId;\n    };\n\n    // public (shared across instances)\n    cls.prototype = {\n        announce: function () {\n            alert('Hi there! My id is ' + this.get_id() + ' and my name is \"' + this.get_name() + '\"!\\r\\n' +\n                  'The next fellow\\'s id will be ' + MyClass.get_nextId() + '!');\n        }\n    };\n\n    return cls;\n})();\n</code></pre>\n\n<p>I've been asked about inheritance using this pattern, so here goes:</p>\n\n<pre><code>// It's a good idea to have a utility class to wire up inheritance.\nfunction inherit(cls, superCls) {\n    // We use an intermediary empty constructor to create an\n    // inheritance chain, because using the super class' constructor\n    // might have side effects.\n    var construct = function () {};\n    construct.prototype = superCls.prototype;\n    cls.prototype = new construct;\n    cls.prototype.constructor = cls;\n    cls.super = superCls;\n}\n\nvar MyChildClass = (function () {\n    // constructor\n    var cls = function (surName) {\n        // Call super constructor on this instance (any arguments\n        // to the constructor would go after \"this\" in call(\u2026)).\n        this.constructor.super.call(this);\n\n        // Shadowing instance properties is a little bit less\n        // intuitive, but can be done:\n        var getName = this.get_name;\n\n        // public (this instance only)\n        this.get_name = function () {\n            return getName.call(this) + ' ' + surName;\n        };\n    };\n    inherit(cls, MyClass); // &lt;-- important!\n\n    return cls;\n})();\n</code></pre>\n\n<p>And an example to use it all:</p>\n\n<pre><code>var bob = new MyClass();\nbob.set_name('Bob');\nbob.announce(); // id is 1, name shows as \"Bob\"\n\nvar john = new MyChildClass('Doe');\njohn.set_name('John');\njohn.announce(); // id is 2, name shows as \"John Doe\"\n\nalert(john instanceof MyClass); // true\n</code></pre>\n\n<p>As you can see, the classes correctly interact with each other (they share the static id from <code>MyClass</code>, the <code>announce</code> method uses the correct <code>get_name</code> method, etc.)</p>\n\n<p>One thing to note is the need to shadow instance properties. You can actually make the <code>inherit</code> function go through all instance properties (using <code>hasOwnProperty</code>) that are functions, and automagically add a <code>super_&lt;method name&gt;</code> property. This would let you call <code>this.super_get_name()</code> instead of storing it in a temporary value and calling it bound using <code>call</code>.</p>\n\n<p>For methods on the prototype you don't need to worry about the above though, if you want to access the super class' prototype methods, you can just call <code>this.constructor.super.prototype.methodName</code>. If you want to make it less verbose you can of course add convenience properties. :)</p>\n",
                    "is_accepted": false,
                    "score": 204
                },
                {
                    "body": "<p>Using prototypes:</p>\n\n<pre><code>function Box(color) // Constructor\n{\n    this.color = color;\n}\n\nBox.prototype.getColor = function()\n{\n    return this.color;\n}\n</code></pre>\n\n<p>Hiding \"color\" (somewhat resembles a private member variable):</p>\n\n<pre><code>function Box(col)\n{\n   var color = col;\n\n   this.getColor = function()\n   {\n       return color;\n   }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var blueBox = new Box(\"blue\");\nalert(blueBox.getColor()); // will alert blue\n\nvar greenBox = new Box(\"green\");\nalert(greenBox.getColor()); // will alert green\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 287
                },
                {
                    "body": "<blockquote>\n  <p>So what is the point of \"constructor\"\n  property? Cannot figure out where it\n  could be useful, any ideas?</p>\n</blockquote>\n\n<p>The point of the constructor property is to provide some way of pretending JavaScript has classes. One of the things you <strong>cannot</strong> usefully do is change an object's constructor after it's been created. It's complicated.</p>\n\n<p>I wrote a fairly comprehensive piece on it a few years ago: <a href=\"http://joost.zeekat.nl/constructors-considered-mildly-confusing.html\">http://joost.zeekat.nl/constructors-considered-mildly-confusing.html</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Using Nick's sample above, you can create a constructor for objects <strong>without</strong> parameters using a return statement as the last statement in your object definition. Return your constructor function as below and it will run the code in __construct each time you create the object:</p>\n\n<pre><code>function Box()\n{\n   var __construct = function() {\n       alert(\"Object Created.\");\n       this.color = 'green';\n   }\n\n  this.color = '';\n\n   this.getColor = function() {\n       return this.color;\n   }\n\n   __construct();\n}\n\nvar b = new Box();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is a constructor:</p>\n\n<pre><code>function MyClass() {}\n</code></pre>\n\n<p>When you do</p>\n\n<pre><code>var myObj = new MyClass();\n</code></pre>\n\n<p><code>MyClass</code> is executed, and a new object is returned of that class.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I guess I'll post what I do with javascript closure since no one is using closure yet. </p>\n\n<pre><code>var user = function(id) {\n  // private properties &amp; methods goes here.\n  var someValue;\n  function doSomething(data) {\n    someValue = data;\n  };\n\n  // constructor goes here.\n  if (!id) return null;\n\n  // public properties &amp; methods goes here.\n  return {\n    id: id,\n    method: function(params) {\n      doSomething(params);\n    }\n  };\n};\n</code></pre>\n\n<p>Comments and suggestions to this solution are welcome. :)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It seems to me most of you are giving example of getters and setters not a constructor, ie <a href=\"http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)\">http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)</a>.</p>\n\n<p>lunched-dan was closer but the example didn't work in jsFiddle.</p>\n\n<p>This example creates a private constructor function that only runs during the creation of the object.</p>\n\n<pre><code>var color = 'black';\n\nfunction Box()\n{\n   // private property\n   var color = '';\n\n   // private constructor \n   var __construct = function() {\n       alert(\"Object Created.\");\n       color = 'green';\n   }()\n\n   // getter\n   this.getColor = function() {\n       return color;\n   }\n\n   // setter\n   this.setColor = function(data) {\n       color = data;\n   }\n\n}\n\nvar b = new Box();\n\nalert(b.getColor()); // should be green\n\nb.setColor('orange');\n\nalert(b.getColor()); // should be orange\n\nalert(color); // should be black\n</code></pre>\n\n<p>If you wanted to assign public properties then the constructor could be defined as such:</p>\n\n<pre><code>var color = 'black';\n\nfunction Box()\n{\n   // public property\n   this.color = '';\n\n   // private constructor \n   var __construct = function(that) {\n       alert(\"Object Created.\");\n       that.color = 'green';\n   }(this)\n\n   // getter\n   this.getColor = function() {\n       return this.color;\n   }\n\n   // setter\n   this.setColor = function(color) {\n       this.color = color;\n   }\n\n}\n\nvar b = new Box();\n\nalert(b.getColor()); // should be green\n\nb.setColor('orange'); \n\nalert(b.getColor()); // should be orange\n\nalert(color); // should be black\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 119
                },
                {
                    "body": "<p>This pattern has served me well. With this pattern, you create classes in separate files, load them into your overall app \"as needed\".</p>\n\n<pre><code>// Namespace\n// (Creating new if not instantiated yet, otherwise, use existing and just add to it)\nvar myApp = myApp || {};\n\n// \"Package\" \n// Similar to how you would establish a package in other languages\n(function() {\n\n// \"Class\"\nvar MyClass = function(params) {\n    this.initialize(params);\n}\n\n    // \"Global\" vars (all instances);\n    MyClass.counter = 0;\n\n    // \"Private\" vars\nvar p = MyClass.prototype;\n\n    p.id = null;\n    p.firstname = null;\n    p.lastname = null;\n\n    p.initialize = function(params){\n        this.id = MyClass.counter++;\n        this.firstname = params.firstname;\n        this.lastname = params.lastname;\n    }\n\n    p.doAlert = function(theMessage){\n        alert(this.firstname + \" \" + this.lastname + \" said: \" + theMessage + \". My id:\" + this.id);\n    }\n\n\n// Assign class to app\nmyApp.MyClass = MyClass;\n\n// Close the \"Package\"\n}());\n\n// Usage example:\nvar bob = new myApp.MyClass({   firstname   :   \"bob\",\n                                lastname    :   \"er\"\n                            });\n\nbob.doAlert(\"hello there\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found this tutorial very useful. This approach is used by most of jQuery plug-ins. </p>\n\n<p><a href=\"http://www.htmlgoodies.com/html5/tutorials/create-an-object-oriented-javascript-class-constructor.html#fbid=OVYAQL_TDpK\">http://www.htmlgoodies.com/html5/tutorials/create-an-object-oriented-javascript-class-constructor.html#fbid=OVYAQL_TDpK</a></p>\n\n<pre><code>var Class = function(methods) {   \n    var klass = function() {    \n        this.initialize.apply(this, arguments);          \n    };  \n\n    for (var property in methods) { \n       klass.prototype[property] = methods[property];\n    }\n\n    if (!klass.prototype.initialize) klass.prototype.initialize = function(){};      \n\n    return klass;    \n};\n</code></pre>\n\n<p>Now ,</p>\n\n<pre><code>var Person = Class({ \n    initialize: function(name, age) {\n        this.name = name;\n        this.age  = age;\n    },\n    toString: function() {\n        return \"My name is \"+this.name+\" and I am \"+this.age+\" years old.\";\n    }\n}); \n\nvar alice = new Person('Alice', 26);\nalert(alice.name); //displays \"Alice\"\nalert(alice.age); //displays \"26\"\nalert(alice.toString()); //displays \"My name is Alice and I am 26 years old\" in most browsers.\n//IE 8 and below display the Object's toString() instead! \"[Object object]\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Example here: <a href=\"http://jsfiddle.net/FZ5nC/\">http://jsfiddle.net/FZ5nC/</a></p>\n\n<p>Try this template:</p>\n\n<pre><code>&lt;script&gt;\n//============================================================\n// Register Namespace\n//------------------------------------------------------------\nvar Name = Name||{};\nName.Space = Name.Space||{};\n\n//============================================================\n// Constructor - MUST BE AT TOP OF FILE\n//------------------------------------------------------------\nName.Space.ClassName = function Name_Space_ClassName(){}\n\n//============================================================\n// Member Functions &amp; Variables\n//------------------------------------------------------------\nName.Space.ClassName.prototype = {\n  v1: null\n ,v2: null\n ,f1: function Name_Space_ClassName_f1(){}\n}\n\n//============================================================\n// Static Variables\n//------------------------------------------------------------\nName.Space.ClassName.staticVar = 0;\n\n//============================================================\n// Static Functions\n//------------------------------------------------------------\nName.Space.ClassName.staticFunc = function Name_Space_ClassName_staticFunc(){\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>You must adjust your namespace if you are defining a static class:</p>\n\n<pre><code>&lt;script&gt;\n//============================================================\n// Register Namespace\n//------------------------------------------------------------\nvar Shape = Shape||{};\nShape.Rectangle = Shape.Rectangle||{};\n// In previous example, Rectangle was defined in the constructor.\n&lt;/script&gt;\n</code></pre>\n\n<p>Example class:</p>\n\n<pre><code>&lt;script&gt;\n//============================================================\n// Register Namespace\n//------------------------------------------------------------\nvar Shape = Shape||{};\n\n//============================================================\n// Constructor - MUST BE AT TOP OF FILE\n//------------------------------------------------------------\nShape.Rectangle = function Shape_Rectangle(width, height, color){\n    this.Width = width;\n    this.Height = height;\n    this.Color = color;\n}\n\n//============================================================\n// Member Functions &amp; Variables\n//------------------------------------------------------------\nShape.Rectangle.prototype = {\n  Width: null\n ,Height: null\n ,Color: null\n ,Draw: function Shape_Rectangle_Draw(canvasId, x, y){\n    var canvas = document.getElementById(canvasId);\n    var context = canvas.getContext(\"2d\");\n    context.fillStyle = this.Color;\n    context.fillRect(x, y, this.Width, this.Height);\n }\n}\n\n//============================================================\n// Static Variables\n//------------------------------------------------------------\nShape.Rectangle.Sides = 4;\n\n//============================================================\n// Static Functions\n//------------------------------------------------------------\nShape.Rectangle.CreateSmallBlue = function Shape_Rectangle_CreateSmallBlue(){\n    return new Shape.Rectangle(5,8,'#0000ff');\n}\nShape.Rectangle.CreateBigRed = function Shape_Rectangle_CreateBigRed(){\n    return new Shape.Rectangle(50,25,'#ff0000');\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Example instantiation:</p>\n\n<pre><code>&lt;canvas id=\"painting\" width=\"500\" height=\"500\"&gt;&lt;/canvas&gt;\n&lt;script&gt;\nalert(\"A rectangle has \"+Shape.Rectangle.Sides+\" sides.\");\n\nvar r1 = new Shape.Rectangle(16, 12, \"#aa22cc\");\nr1.Draw(\"painting\",0, 20);\n\nvar r2 = Shape.Rectangle.CreateSmallBlue();\nr2.Draw(\"painting\", 0, 0);\n\nShape.Rectangle.CreateBigRed().Draw(\"painting\", 10, 0);\n&lt;/script&gt;\n</code></pre>\n\n<p>Notice functions are defined as A.B = function A_B(). This is to make your script easier to debug. Open Chrome's Inspect Element panel, run this script, and expand the debug backtrace:</p>\n\n<pre><code>&lt;script&gt;\n//============================================================\n// Register Namespace\n//------------------------------------------------------------\nvar Fail = Fail||{};\n\n//============================================================\n// Static Functions\n//------------------------------------------------------------\nFail.Test = function Fail_Test(){\n    A.Func.That.Does.Not.Exist();\n}\n\nFail.Test();\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>While using Blixt's great template from above, I found out that it doesn't work well with multi-level inheritance (MyGrandChildClass extending MyChildClass extending MyClass) \u2013 it cycles on calling first parent's constructor over and over. So here is a simple workaround \u2013 if you need multi-level inheritance, instead of using <code>this.constructor.super.call(this, surName);</code> use <code>chainSuper(this).call(this, surName);</code> with the chain function defined like this:</p>\n\n<pre><code>function chainSuper(cls) {\n  if (cls.__depth == undefined) cls.__depth = 1; else cls.__depth++;\n  var depth = cls.__depth;\n  var sup = cls.constructor.super;\n  while (depth &gt; 1) {\n    if (sup.super != undefined) sup = sup.super;\n    depth--;\n  }\n  return sup;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>They do if you use <a href=\"http://www.typescriptlang.org/\" rel=\"nofollow\">Typescript</a> - open source from MicroSoft :-)</p>\n\n<pre><code>class BankAccount {\n balance: number;\n constructor(initially: number) {\n this.balance = initially;\n }\n deposit(credit: number) {\n this.balance += credit;\n return this.balance;\n }\n}\n</code></pre>\n\n<p>Typescript lets you 'fake' OO constructs that are compiled into javascript constructs. If you're starting a large project it may save you a lot of time and it just reached milestone 1.0 version.</p>\n\n<p><a href=\"http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf\" rel=\"nofollow\">http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf</a></p>\n\n<p>The above code gets 'compiled' to :</p>\n\n<pre><code>var BankAccount = (function () {\n    function BankAccount(initially) {\n        this.balance = initially;\n    }\n    BankAccount.prototype.deposit = function (credit) {\n        this.balance += credit;\n        return this.balance;\n    };\n    return BankAccount;\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://www.jsoops.net/\" rel=\"nofollow\">http://www.jsoops.net/</a> is quite good for oop in Js. If provide private, protected, public variable and function, and also Inheritance feature. Example Code:</p>\n\n<pre><code>var ClassA = JsOops(function (pri, pro, pub)\n{// pri = private, pro = protected, pub = public\n\n    pri.className = \"I am A \";\n\n    this.init = function (var1)// constructor\n    {\n        pri.className += var1;\n    }\n\n    pub.getData = function ()\n    {\n        return \"ClassA(Top=\" + pro.getClassName() + \", This=\" + pri.getClassName()\n        + \", ID=\" + pro.getClassId() + \")\";\n    }\n\n    pri.getClassName = function () { return pri.className; }\n    pro.getClassName = function () { return pri.className; }\n    pro.getClassId = function () { return 1; }\n});\n\nvar newA = new ClassA(\"Class\");\n\n//***Access public function\nconsole.log(typeof (newA.getData));\n// function\nconsole.log(newA.getData());\n// ClassA(Top=I am A Class, This=I am A Class, ID=1)\n\n//***You can not access constructor, private and protected function\nconsole.log(typeof (newA.init));            // undefined\nconsole.log(typeof (newA.className));       // undefined\nconsole.log(typeof (newA.pro));             // undefined\nconsole.log(typeof (newA.getClassName));    // undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>just to offer up some variety. <a href=\"https://github.com/digital-synapse/ds.oop\" rel=\"nofollow\">ds.oop</a> is a nice way to declare classes with constructors in javascript. It supports every possible type of inheritance (Including 1 type that even c# does not support) as well as Interfaces which is nice.</p>\n\n<pre><code>var Color = ds.make.class({\n    type: 'Color',\n    constructor: function (r,g,b) { \n        this.r = r;                     /* now r,g, and b are available to   */\n        this.g = g;                     /* other methods in the Color class  */\n        this.b = b;                     \n    }\n});\nvar red = new Color(255,0,0);   // using the new keyword to instantiate the class\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Can JavaScript classes/objects have constructors? How are they created?</p>\n",
            "last_activity_date": 1408474241,
            "question_id": 1114024,
            "score": 275,
            "tags": [
                "javascript",
                "oop"
            ],
            "title": "Constructors in JavaScript objects"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>(I can't delete this answer, but it's outdated, now. For a more detailed answer, see Dave Dopson's below.)</p>\n\n<p><a href=\"http://nodejs.org/\">Node.js</a> doesn't support multiple CPUs out of the box, yet as per the web page:</p>\n\n<blockquote>\n  <p><em>But what about multiple-processor concurrency? Threads are necessary to scale programs to multi-core computers.</em> Processes are necessary to scale to multi-core computers, not memory-sharing threads. The fundamentals of scalable systems are fast networking and non-blocking design\u2014the rest is message passing. In future versions, Node.js will be able to fork new processes (using the Web Workers API), but this is something that fits well into the current design. </p>\n</blockquote>\n\n<p>But you can still use the other cores; you just have to write more code. It's not something that Node.js will do automatically for you. On the positive side, this gives you more control.</p>\n",
                    "is_accepted": true,
                    "score": 72
                },
                {
                    "body": "<p>One method would be to run multiple instances of node.js on the server and then put a load balancer (preferably a non-blocking one like nginx) in front of them.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Future version of node will allow you to fork a process and pass messages to it and Ryan has stated he wants to find some way to also share file handlers, so it won't be a straight forward Web Worker implementation.</p>\n\n<p>At this time there is not an easy solution for this but it's still very early and node is one of the fastest moving open source projects I've ever seen so expect something awesome in the near future.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's also possible to design the web-service as several stand alone servers that listen to unix sockets, so that you can push functions like data processing into seperate processes.</p>\n\n<p>This is similar to most scrpting/database web server architectures where a cgi process handles business logic and then pushes and pulls the data via a unix socket to a database.</p>\n\n<p>the difference being that the data processing is written as  a node webserver listening on a port.</p>\n\n<p>it's more complex but ultimately its where multi-core development has to go. a multiprocess architecture using multiple components for each web request.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm using <a href=\"http://github.com/cramforce/node-worker\" rel=\"nofollow\">Node worker</a> to run processes in a simple way from my main process. Seems to be working great while we wait for the official way to come around.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Multi-node harnesses all the cores that you may have.<br>\nHave a look at <a href=\"http://github.com/kriszyp/multi-node\" rel=\"nofollow\">http://github.com/kriszyp/multi-node</a>.</p>\n\n<p>For simpler needs, you can start up multiple copies of node on different port numbers and put a load balancer in front of them.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This link could provide valuable insight on node.js with multi-code processor.</p>\n\n<p><a href=\"http://developer.yahoo.net/blog/archives/2010/07/multicore_http_server_with_nodejs.html#1\">http://developer.yahoo.net/blog/archives/2010/07/multicore_http_server_with_nodejs.html#1</a></p>\n\n<p>And here are some threads talking about node.js on multicore processors.</p>\n\n<p><a href=\"http://groups.google.com/group/nodejs/browse_thread/thread/36146559c089dca0\">http://groups.google.com/group/nodejs/browse_thread/thread/36146559c089dca0</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Ryan Dahl answers this question in <a href=\"http://www.youtube.com/watch?v=F6k8lTrAE2g&amp;feature=youtube_gdata\">the tech talk he gave at Google</a> last summer.  To paraphrase, \"just run multiple node processes and use something sensible to allow them to communicate. e.g. sendmsg()-style IPC or traditional RPC\".</p>\n\n<p><s>If you want to get your hands dirty right away, check out the <s><a href=\"https://github.com/davglass/spark2\">spark2</a></s> <a href=\"https://github.com/indexzero/forever\">Forever</a> module.  It makes spawning multiple node processes trivially easy.  It handles setting up port sharing, so they can each accept connections to the same port, and also auto-respawning if you want to make sure a process is restarted if/when it dies.</s></p>\n\n<p><strong>UPDATE - 10/11/11</strong>: Consensus in the node community seems to be that <a href=\"http://learnboost.github.com/cluster/\">Cluster</a> is now the preferred module for managing multiple node instances per machine.  <a href=\"https://github.com/indexzero/forever\">Forever</a> is also worth a look.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Spark2 is based on Spark which is now no longer maintained. <a href=\"http://learnboost.github.com/cluster/\">Cluster</a> is its successor, and it has some cool features, like spawning one worker process per CPU core and respawning dead workers.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's possible to scale NodeJS out to multiple boxes using a pure TCP load balancer (HAProxy) in front of multiple boxes running one NodeJS process each.</p>\n\n<p>If you then have some common knowledge to share between all instances you could use a central Redis store or similar which can then be accessed from all process instances (e.g. from all boxes)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>[<em>This post is up-to-date as of 2012-09-02 (newer than above).</em>]</h2>\n\n<p>Node.js absolutely does scale on multi-core machines.</p>\n\n<p>Yes, Node.js is one-thread-per-process. This is a very deliberate design decision and eliminates the need to deal with locking semantics. If you don't agree with this, you probably don't yet realize just how insanely hard it is to debug multi-threaded code.  For a deeper explanation of the Node.js process model and why it works this way (and why it will NEVER support multiple threads), read <a href=\"http://stackoverflow.com/questions/1884724/what-is-node-js/6782438#6782438\">my other post</a>.</p>\n\n<h2>So how do I take advantage of my 16 core box?</h2>\n\n<p>Two ways:</p>\n\n<ul>\n<li>For big heavy compute tasks like image encoding, Node.js can fire up child processes or send messages to additional worker processes. In this design, you'd have one thread managing the flow of events and N processes doing heavy compute tasks and chewing up the other 15 CPUs.</li>\n<li>For scaling throughput on a webservice, you should run multiple Node.js servers on one box, one per core and split request traffic between them. This provides excellent CPU-affinity and will scale throughput nearly linearly with core count.</li>\n</ul>\n\n<hr>\n\n<h2>Scaling throughput on a webservice</h2>\n\n<p>Since v0.6.X Node.js has included <a href=\"http://nodejs.org/docs/latest/api/cluster.html\">the cluster module</a> straight out of the box, which makes it easy to set up multiple node workers that can listen on a single port. Note that this is NOT the same as the older learnboost \"cluster\" module available through <a href=\"http://en.wikipedia.org/wiki/Npm_%28software%29\">npm</a>.</p>\n\n<pre><code>if (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n} else {\n  http.Server(function(req, res) { ... }).listen(8000);\n}\n</code></pre>\n\n<p>Workers will compete to accept new connections, and the least loaded process is most likely to win. It works pretty well and can scale up throughput quite well on a multi-core box.</p>\n\n<p>If you have enough load to care about multiple cores, then you are going to want to do a few more things too:</p>\n\n<ol>\n<li><p>Run your Node.js service behind a web-proxy like <a href=\"http://en.wikipedia.org/wiki/Nginx\">Nginx</a> or <a href=\"http://en.wikipedia.org/wiki/Apache_HTTP_Server\">Apache</a> - something that can do connection throttling (unless you want overload conditions to bring the box down completely), rewrite URLs, serve static content, and proxy other sub-services.</p></li>\n<li><p>Periodically recycle your worker processes. For a long-running process, even a small memory leak will eventually add up.</p></li>\n<li><p>Setup log collection / monitoring</p></li>\n</ol>\n\n<hr>\n\n<p>PS: There's a discussion between Aaron and Christopher in the comments of another post (as of this writing, its the top post). A few comments on that:</p>\n\n<ul>\n<li>A shared socket model is very convenient for allowing multiple processes to listen on a single port and compete to accept new connections. Conceptually, you could think of preforked Apache doing this with the significant caveat that each process will only accept a single connection and then die. The efficiency loss for Apache is in the overhead of forking new processes and has nothing to do with the socket operations.</li>\n<li>For Node.js, having N workers compete on a single socket is an extremely reasonable solution. The alternative is to set up an on-box front-end like Nginx and have that proxy traffic to the individual workers, alternating between workers for assigning new connections. The two solutions have very similar performance characteristics. And since, as I mentioned above, you will likely want to have Nginx (or an alternative) fronting your node service anyways, the choice here is really between:</li>\n</ul>\n\n<p>Shared Ports: <code>nginx (port 80) --> Node_workers x N (sharing port 3000 w/ Cluster)</code></p>\n\n<p>vs</p>\n\n<p>Individual Ports: <code>nginx (port 80) --> {Node_worker (port 3000), Node_worker (port 3001), Node_worker (port 3002), Node_worker (port 3003) ...}</code></p>\n\n<p>There are arguably some benefits to the individual ports setup (potential to have less coupling between processes, have more sophisticated load-balancing decisions, etc.), but it is definitely more work to set up and the built-in cluster module is a low-complexity alternative that works for most people.</p>\n",
                    "is_accepted": false,
                    "score": 395
                },
                {
                    "body": "<p>The new kid on the block here is LearnBoost's <a href=\"https://github.com/LearnBoost/up\" rel=\"nofollow\">\"Up\"</a>. </p>\n\n<p>It provides \"Zero-downtime reloads\" and additionally creates multiple workers (by default the number of CPUs, but it is configurable) to provide the best of all Worlds. </p>\n\n<p>It is new, but seems to be pretty stable, and I'm using it happily in one of my current projects.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is not a direct answer to the question, but there is a tool similar to node.js, which makes use of multiple processor cores. It's called Vertx and you can find more info here:<br>\n<a href=\"http://vertx.io/\" rel=\"nofollow\">http://vertx.io/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <strong>cluster</strong> module. Check this <a href=\"https://devcenter.heroku.com/articles/node-cluster\" rel=\"nofollow\">https://devcenter.heroku.com/articles/node-cluster</a></p>\n\n<pre><code>var cluster = require('cluster');\nvar http = require('http');\nvar numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\nfor (var i = 0; i &lt; numCPUs; i++) {\ncluster.fork();\n}\n\ncluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n });\n} else { \n// Workers can share any TCP connection\n// In this case its a HTTP server\nhttp.createServer(function(req, res) {\n  res.writeHead(200);\n  res.end(\"hello world\\n\");\n}).listen(8000);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As mentioned above, <a href=\"http://nodejs.org/api/cluster.html\" rel=\"nofollow\">Cluster</a> will scale and load-balance your app across all cores.<br/><br/>\nadding something like</p>\n\n<pre><code>cluster.on('exit', function () {\n  cluster.fork();\n});\n</code></pre>\n\n<p>Will restart any failing workers.</p>\n\n<p>These days, a lot of people also prefer <a href=\"https://github.com/Unitech/pm2\" rel=\"nofollow\">PM2</a>, which handles the clustering for you and also provides <a href=\"https://raw.githubusercontent.com/unitech/pm2/master/pres/pm2-monit.png\" rel=\"nofollow\">some cool monitoring features</a>.</p>\n\n<p>Then, add Nginx or HAProxy in front of several machines running with clustering and you have multiple levels of failover and a much higher load capacity.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p><a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> looks interesting, <strong>BUT</strong> I must miss something - isn't Node.js tuned only to run on a single process and thread?</p>\n\n<p>Then how does it scale for multi-core CPUs and multi-CPU servers? After all, it is all great to make fast as possible single-thread server, but for high loads I would want to use several CPUs. And the same goes for making applications faster - seems today the way is use multiple CPUs and parallelize the tasks.</p>\n\n<p>How does Node.js fit into this picture? Is its idea to somehow distribute multiple instances or what?</p>\n",
            "last_activity_date": 1423151946,
            "question_id": 2387724,
            "score": 270,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "Node.js on multi-core machines"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>I can address you to eGenix Python <a href=\"http://www.egenix.com/products/python/mxBase/mxDateTime/\" rel=\"nofollow\">extension</a>, containing a lot of functions for handling date and time.\nPlus, i've found <a href=\"http://code.activestate.com/recipes/200839/\" rel=\"nofollow\">this</a> article with some code to deal with Python to Javascript marshaling.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you're certain that only Javascript will be consuming the JSON, I prefer to pass Javascript <code>Date</code> objects directly.</p>\n\n<p>The <code>ctime()</code> method on <code>datetime</code> objects will return a string that the Javascript Date object can understand.</p>\n\n<pre><code>import datetime\ndate = datetime.datetime.today()\njson = '{\"mydate\":new Date(\"%s\")}' % date.ctime()\n</code></pre>\n\n<p>Javascript will happily use that as an object literal, and you've got your Date object built right in.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>For cross language projects I found out that strings containing <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RfC 3339</a> dates are the best way to go. A RfC 3339 date looks like this:</p>\n\n<pre><code>  1985-04-12T23:20:50.52Z\n</code></pre>\n\n<p>I think most of the format is obvious. The only somewhat unusual thing may be the \"Z\" at the end. It stands for GMT/UTC. You could also add a timezone offset like +02:00 for CEST (Germany in summer). I personally prefer to keep everything in UTC until it is displayed.</p>\n\n<p>For displaying, comparisons and storage you can leave it in string format across all languages. If you need the date for calculations easy to convert it back to a native date object in most language.</p>\n\n<p>So generate the JSON like this:</p>\n\n<pre><code>  json.dump(datetime.now().strftime('%Y-%m-%dT%H:%M:%S'))\n</code></pre>\n\n<p>Unfortunately Javascripts Date constructor doesn't accept RfC 3339 strings but there are many <a href=\"http://blog.dansnetwork.com/2008/11/01/javascript-iso8601rfc3339-date-parser/\">parsers</a> available on the Internet.</p>\n\n<p><a href=\"https://github.com/hudora/huTools/blob/master/huTools/hujson.py\">huTools.hujson</a> tries to handle the most common encoding issues you might come across in Python code including date/datetime objects while handling timezones correctly.</p>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>You can add the 'default' parameter to json.dumps to handle this:</p>\n\n<pre><code>&gt;&gt;&gt; dthandler = lambda obj: (\n...     obj.isoformat()\n...     if isinstance(obj, datetime.datetime)\n...     or isinstance(obj, datetime.date)\n...     else None)\n&gt;&gt;&gt; json.dumps(datetime.datetime.now(), default=dthandler)\n'\"2010-04-20T20:08:21.634121\"'\n</code></pre>\n\n<p>Which is <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format. </p>\n\n<p>A more comprehensive default handler function:</p>\n\n<pre><code>def handler(obj):\n    if hasattr(obj, 'isoformat'):\n        return obj.isoformat()\n    elif isinstance(obj, ...):\n        return ...\n    else:\n        raise TypeError, 'Object of type %s with value of %s is not JSON serializable' % (type(obj), repr(obj))\n</code></pre>\n\n<p>Update:  Added output of type as well as value.<br>\nUpdate:  Also handle date </p>\n",
                    "is_accepted": false,
                    "score": 305
                },
                {
                    "body": "<p>Using <code>json</code>, you can subclass JSONEncoder and override the default() method to provide your own custom serializers:</p>\n\n<pre><code>import json\nimport datetime\n\nclass DateTimeJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime.datetime):\n            return obj.isoformat()\n        else:\n            return super(DateTimeJSONEncoder, self).default(obj)\n</code></pre>\n\n<p>Then, you can call it like this:</p>\n\n<pre><code>&gt;&gt;&gt; DateTimeJSONEncoder().encode([datetime.datetime.now()])\n'[\"2010-06-15T14:42:28\"]'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Here's a fairly complete solution for recursively encoding and decoding datetime.datetime and datetime.date objects using the standard library <code>json</code> module. This needs Python >= 2.6 since the <code>%f</code> format code in the datetime.datetime.strptime() format string is only supported in since then. For Python 2.5 support, drop the <code>%f</code> and strip the microseconds from the ISO date string before trying to convert it, but you'll loose microseconds precision, of course. For interoperability with ISO date strings from other sources, which may include a time zone name or UTC offset, you may also need to strip some parts of the date string before the conversion. For a complete parser for ISO date strings (and many other date formats) see the third-party <a href=\"http://labix.org/python-dateutil\">dateutil</a> module.</p>\n\n<p>Decoding only works when the ISO date strings are values in a JavaScript\nliteral object notation or in nested structures within an object. ISO date\nstrings, which are items of a top-level array will <em>not</em> be decoded.</p>\n\n<p>I.e. this works:</p>\n\n<pre><code>date = datetime.datetime.now()\n&gt;&gt;&gt; json = dumps(dict(foo='bar', innerdict=dict(date=date)))\n&gt;&gt;&gt; json\n'{\"innerdict\": {\"date\": \"2010-07-15T13:16:38.365579\"}, \"foo\": \"bar\"}'\n&gt;&gt;&gt; loads(json)\n{u'innerdict': {u'date': datetime.datetime(2010, 7, 15, 13, 16, 38, 365579)},\nu'foo': u'bar'}\n</code></pre>\n\n<p>And this too:</p>\n\n<pre><code>&gt;&gt;&gt; json = dumps(['foo', 'bar', dict(date=date)])\n&gt;&gt;&gt; json\n'[\"foo\", \"bar\", {\"date\": \"2010-07-15T13:16:38.365579\"}]'\n&gt;&gt;&gt; loads(json)\n[u'foo', u'bar', {u'date': datetime.datetime(2010, 7, 15, 13, 16, 38, 365579)}]\n</code></pre>\n\n<p>But this doesn't work as expected:</p>\n\n<pre><code>&gt;&gt;&gt; json = dumps(['foo', 'bar', date])\n&gt;&gt;&gt; json\n'[\"foo\", \"bar\", \"2010-07-15T13:16:38.365579\"]'\n&gt;&gt;&gt; loads(json)\n[u'foo', u'bar', u'2010-07-15T13:16:38.365579']\n</code></pre>\n\n<p>Here's the code:</p>\n\n<pre><code>__all__ = ['dumps', 'loads']\n\nimport datetime\n\ntry:\n    import json\nexcept ImportError:\n    import simplejson as json\n\nclass JSONDateTimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, (datetime.date, datetime.datetime)):\n            return obj.isoformat()\n        else:\n            return json.JSONEncoder.default(self, obj)\n\ndef datetime_decoder(d):\n    if isinstance(d, list):\n        pairs = enumerate(d)\n    elif isinstance(d, dict):\n        pairs = d.items()\n    result = []\n    for k,v in pairs:\n        if isinstance(v, basestring):\n            try:\n                # The %f format code is only supported in Python &gt;= 2.6.\n                # For Python &lt;= 2.5 strip off microseconds\n                # v = datetime.datetime.strptime(v.rsplit('.', 1)[0],\n                #     '%Y-%m-%dT%H:%M:%S')\n                v = datetime.datetime.strptime(v, '%Y-%m-%dT%H:%M:%S.%f')\n            except ValueError:\n                try:\n                    v = datetime.datetime.strptime(v, '%Y-%m-%d').date()\n                except ValueError:\n                    pass\n        elif isinstance(v, (dict, list)):\n            v = datetime_decoder(v)\n        result.append((k, v))\n    if isinstance(d, list):\n        return [x[1] for x in result]\n    elif isinstance(d, dict):\n        return dict(result)\n\ndef dumps(obj):\n    return json.dumps(obj, cls=JSONDateTimeEncoder)\n\ndef loads(obj):\n    return json.loads(obj, object_hook=datetime_decoder)\n\nif __name__ == '__main__':\n    mytimestamp = datetime.datetime.utcnow()\n    mydate = datetime.date.today()\n    data = dict(\n        foo = 42,\n        bar = [mytimestamp, mydate],\n        date = mydate,\n        timestamp = mytimestamp,\n        struct = dict(\n            date2 = mydate,\n            timestamp2 = mytimestamp\n        )\n    )\n\n    print repr(data)\n    jsonstring = dumps(data)\n    print jsonstring\n    print repr(loads(jsonstring))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I've worked it out.</p>\n\n<p>Let's say you have a Python datetime object, <em>d</em>, created with datetime.now(). Its value is:</p>\n\n<pre><code>datetime.datetime(2011, 5, 25, 13, 34, 5, 787000)\n</code></pre>\n\n<p>You can serialize it to JSON as an ISO 8601 datetime string:</p>\n\n<pre><code>import json    \njson.dumps(d.isoformat())\n</code></pre>\n\n<p>The example datetime object would be serialized as:</p>\n\n<pre><code>'\"2011-05-25T13:34:05.787000\"'\n</code></pre>\n\n<p>This value, once received in the Javascript layer, can construct a Date object:</p>\n\n<pre><code>var d = new Date(\"2011-05-25T13:34:05.787000\");\n</code></pre>\n\n<p>As of Javascript 1.8.5, Date objects have a toJSON method, which returns a string in a standard format. To serialize the above Javascript object back to JSON, therefore, the command would be:</p>\n\n<pre><code>d.toJSON()\n</code></pre>\n\n<p>Which would give you:</p>\n\n<pre><code>'2011-05-25T20:34:05.787Z'\n</code></pre>\n\n<p>This string, once received in Python, could be deserialized back to a datetime object:</p>\n\n<pre><code>datetime.strptime('2011-05-25T20:34:05.787Z', '%Y-%m-%dT%H:%M:%S.%fZ')\n</code></pre>\n\n<p>This results in the following datetime object, which is the same one you started with and therefore correct:</p>\n\n<pre><code>datetime.datetime(2011, 5, 25, 20, 34, 5, 787000)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>On python side:</p>\n\n<pre><code>import time, json\nfrom datetime import datetime as dt\nyour_date = dt.now()\ndata = json.dumps(time.mktime(your_date.timetuple())*1000)\nreturn data # data send to javascript\n</code></pre>\n\n<p>On javascript side:</p>\n\n<pre><code>var your_date = new Date(data)\n</code></pre>\n\n<p>where data is result from python</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to send a datetime.datetime object in serialized form from Python using <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>\n",
            "last_activity_date": 1393405151,
            "question_id": 455580,
            "score": 270,
            "tags": [
                "javascript",
                "python",
                "json"
            ],
            "title": "JSON datetime between Python and JavaScript"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>You could use either of these (provided key3 is the acutal key you want to use)</p>\n\n<pre><code>arr[ 'key3' ] = value3;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>arr.key3 = value3;\n</code></pre>\n\n<p>If key3 is a variable, then you should do:</p>\n\n<pre><code>var key3 = 'a_key';\nvar value3 = 3;\narr[ key3 ] = value3;\n</code></pre>\n\n<p>After this, requesting <code>arr.a_key</code> would return the value of <code>value3</code>, a literal <code>3</code>.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<pre><code>arr.push({key3: value3});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>There are two ways to add new <strong>properties</strong> to an object:</p>\n\n<pre><code>var obj = {\n    key1: value1,\n    key2: value2\n};\n</code></pre>\n\n<h3>Using dot notation:</h3>\n\n<pre><code>obj.key3 = \"value3\";\n</code></pre>\n\n<h3>Using square bracket notation:</h3>\n\n<pre><code>obj[\"key3\"] = \"value3\";\n</code></pre>\n\n<p>The first form is used when you know the name of the property. The second form is used when the name of the property is dynamically determined. Like in this example:</p>\n\n<pre><code>var getProperty = function (propertyName) {\n    return obj[propertyName];\n};\n\ngetProperty(\"key1\");\ngetProperty(\"key2\");\ngetProperty(\"key3\");\n</code></pre>\n\n<hr>\n\n<p>A <em>real</em> JavaScript array can be constructed using either:</p>\n\n<h3>The Array literal notation:</h3>\n\n<pre><code>var arr = [];\n</code></pre>\n\n<h3>The Array constructor notation:</h3>\n\n<pre><code>var arr = new Array();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 546
                },
                {
                    "body": "<pre><code>arr.key3 = value3;\n</code></pre>\n\n<p>because your arr is not really an array... It's a prototype object. The real array would be:</p>\n\n<pre><code>var arr = [{key1: value1}, {key2: value2}];\n</code></pre>\n\n<p>but it's still not right. It should actually be:</p>\n\n<pre><code>var arr = [{key: key1, value: value1}, {key: key2, value: value2}];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Your example shows an Object, not an Array.  In that case, the preferred way to add a field to an Object is to just assign to it, like so:</p>\n\n<pre><code>arr.key3 = value3;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can either add it this way:</p>\n\n<pre><code>arr['key3'] = value3;\n</code></pre>\n\n<p>or this way:</p>\n\n<pre><code>arr.key3 = value3;\n</code></pre>\n\n<p>The answers suggesting keying into the object with the variable <code>key3</code> would only work if the value of <code>key3</code> was <code>'key3'</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In case you have multiple anonymous Object literals inside an Object and want to add another Object containing key/value pairs, do this:</p>\n\n<p><strong>Firebug' the Object:</strong></p>\n\n<pre><code>console.log(Comicbook);\n</code></pre>\n\n<p>returns:</p>\n\n<blockquote>\n  <p>[Object { name=\"Spiderman\", value=\"11\"}, Object { name=\"Marsipulami\",\n  value=\"18\"}, Object { name=\"Garfield\", value=\"2\"}]</p>\n</blockquote>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>if (typeof Comicbook[3]=='undefined') {\n    private_formArray[3] = new Object();\n    private_formArray[3][\"name\"] = \"Peanuts\";\n    private_formArray[3][\"value\"] = \"12\";\n}\n</code></pre>\n\n<p>will add <code>Object {name=\"Peanuts\", value=\"12\"}</code> to the Comicbook Object</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know there is already an accepted answer for this but I thought I'd document my idea somewhere.  Please [people] feel free to poke holes in this idea, as I'm not sure if it is the best solution... but I just put this together a few minutes ago:</p>\n\n<pre><code>Object.prototype.push = function( key, value ){\n   this[ key ] = value;\n   return this;\n}\n</code></pre>\n\n<p>You would utilize it in this way:</p>\n\n<pre><code>var obj = {key1: value1, key2: value2};\nobj.push( \"key3\", \"value3\" );\n</code></pre>\n\n<p>Since, the prototype function is returning <code>this</code> you can continue to chain <code>.push</code>'s to the end of your <code>obj</code> variable: <code>obj.push(...).push(...).push(...);</code></p>\n\n<p>Another feature is that you can pass an array or another object as the value in the push function arguments.  See my fiddle for a working example: <a href=\"http://jsfiddle.net/7tEme/\" rel=\"nofollow\">http://jsfiddle.net/7tEme/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>According to <em>Property Accessors</em> defined in ECMA-262(<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" rel=\"nofollow\">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</a>, P67), there are two ways you can do to add properties to a exists object. All these two way, the Javascript engine will treat them the same.</p>\n\n<p>The first way is to use dot notation:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>obj.key3 = value3;\n</code></pre>\n\n<p>But this way, you should use a <em>IdentifierName</em> after dot notation.</p>\n\n<p>The second way is to use bracket notation:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>obj[\"key3\"] = value3;\n</code></pre>\n\n<p>and another form:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var key3 = \"key3\";\nobj[key3] = value3;\n</code></pre>\n\n<p>This way, you could use a <em>Expression</em> (include <em>IdentifierName</em>) in the bracket notation.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var employees = []; \nemployees.push({id:100,name:'Yashwant',age:30});\nemployees.push({id:200,name:'Mahesh',age:35});\n</code></pre>\n\n<p>Find Complete Example <a href=\"http://www.technicalkeeda.com/javascript/create-key-value-pair-array-using-javascript\">Add Key Value Pair using javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can create a class with the answer of  <a href=\"http://stackoverflow.com/users/58808/ionu-g-stan\">@Ionu\u021b G. Stan</a></p>\n\n<pre><code>function obj(){\n    obj=new Object();\n    this.add=function(key,value){\n        obj[\"\"+key+\"\"]=value;\n    }\n    this.obj=obj\n}\n</code></pre>\n\n<p>Creating a new object with the last class:</p>\n\n<pre><code>my_obj=new obj();\nmy_obj.add('key1', 'value1');\nmy_obj.add('key2', 'value2');\nmy_obj.add('key3','value3');\n</code></pre>\n\n<p>Printing the object </p>\n\n<pre><code>console.log(my_obj.obj) // Return {key1: \"value1\", key2: \"value2\", key3: \"value3\"} \n</code></pre>\n\n<p>Printing a Key</p>\n\n<pre><code>console.log(my_obj.obj[\"key3\"]) //Return value3\n</code></pre>\n\n<p>I'm newbie in javascript, comments are welcome. Works for me.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have grown fond of the <a href=\"https://lodash.com\" rel=\"nofollow\">LoDash</a> / <a href=\"http://underscorejs.org/\" rel=\"nofollow\">Underscore</a> when writing larger projects. The <code>.push</code> and adding by <code>object['key']</code> or <code>object.key</code> are all solid pure JavaScript answers. However both of LoDash and Underscore libraries do provide many convenient functions when working working Objects and Arrays.</p>\n\n<p>Depending what you are looking for, there are two specific functions that may be nice to utilize. For more info check the docs, they have some great examples there.</p>\n\n<h1><a href=\"https://lodash.com/docs#merge\" rel=\"nofollow\">_.merge</a></h1>\n\n<p>The second object will overwrite or add to the base object.</p>\n\n<pre><code>var obj = {key1: \"value1\", key2: \"value2\"};\nvar obj2 = {key2:\"value4\", key3: \"value3\"};\n _.merge(obj, obj2); \nconsole.log(obj);\n// \u2192 {key1: \"value1\", key2: \"value4\", key3: \"value3\"} \n</code></pre>\n\n<h1><a href=\"https://lodash.com/docs#defaults\" rel=\"nofollow\">_.defaults</a></h1>\n\n<p>The second object contains defaults that will be added to base object if they don't exist.</p>\n\n<pre><code>var obj = {key3: \"value3\", key5: \"value5\"};\nvar obj2 = {key1: \"value1\", key2:\"value2\", key3: \"valueDefault\", key4: \"valueDefault\"};\n _.defaults(obj, obj2);\nconsole.log(obj);\n// \u2192 {key1: \"value1\", key2: \"value2\", key3: \"value3\", key4: \"valueDefault\", key5: \"value5\"}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Here is my object literal:</p>\n\n<pre><code>var obj = {key1: value1, key2: value2};\n</code></pre>\n\n<p>How can I add <code>{key3: value3}</code> to the object?</p>\n",
            "last_activity_date": 1416852682,
            "question_id": 1168807,
            "score": 267,
            "tags": [
                "javascript",
                "object-literal"
            ],
            "title": "How can I add a key/value pair to a JavaScript object literal?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>You could simply use a target from your link, such as #someid, where #someid is the div's id.</p>\n\n<p>Or, you could use any number of scrolling plugins that make this more elegant.</p>\n\n<p><a href=\"http://plugins.jquery.com/project/ScrollTo\" rel=\"nofollow\">http://plugins.jquery.com/project/ScrollTo</a> is an example.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you don't need the change to animate then you don't need to use any special plugins - I'd just use the native JavaScript window.scrollTo method -- passing in 0,0 will scroll the page to the top left instantly.</p>\n\n<pre><code>window.scrollTo(x-coord, y-coord);\n</code></pre>\n\n<p>Parameters    </p>\n\n<ul>\n<li>x-coord is the pixel along the horizontal axis.  </li>\n<li>y-coord is the pixel along the vertical axis. </li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 718
                },
                {
                    "body": "<p>You don't need jQuery to do this. A standard HTML  tag will suffice...</p>\n\n<pre><code>&lt;div id=\"jump_to_me\"&gt;\n    blah blah blah\n&lt;/div&gt;\n\n&lt;a target=\"#jump_to_me\"&gt;Click Here To Destroy The World!&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>If you do want smooth scrolling, try something like this:</p>\n\n<pre><code>$(\"a[href='#top']\").click(function() {\n  $(\"html, body\").animate({ scrollTop: 0 }, \"slow\");\n  return false;\n});\n</code></pre>\n\n<p>That will take any <code>&lt;a&gt;</code> tag whose <code>href=\"#top\"</code> and make it smooth scroll to the top.</p>\n",
                    "is_accepted": false,
                    "score": 644
                },
                {
                    "body": "<p>With <code>window.scrollTo(0, 0);</code> is very fast<br>\nso i tried the Mark Ursino example, but in Chrome nothing happens<br>\nand i found this</p>\n\n<pre><code>$('.showPeriodMsgPopup').click(function(){\n    //window.scrollTo(0, 0);\n    $('html').animate({scrollTop:0}, 'slow');//IE, FF\n    $('body').animate({scrollTop:0}, 'slow');//chrome, don't know if Safari works\n    $('.popupPeriod').fadeIn(1000, function(){\n        setTimeout(function(){$('.popupPeriod').fadeOut(2000);}, 3000);\n    });\n});\n</code></pre>\n\n<p>tested all 3 browsers and it works<br>\ni'm using blueprint css<br>\nthis is when a client clicks \"Book now\" button and doesn't have the rental period selected, slowly moves to the top where the calendars are and opens a dialog div pointing to the 2  fields, after 3sec it fades</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>&lt;script&gt;\n    $(window).scrollTop(100);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>All of these suggestions work great for various situations. For those who find this page through a search, one can also give <a href=\"http://www.abeautifulsite.net/blog/2010/01/smoothly-scroll-to-an-element-without-a-jquery-plugin/\">this</a> a try. JQuery, no plug-in, scroll to element.</p>\n\n<pre><code>$('html, body').animate({\n    scrollTop: $(\"#elementID\").offset().top\n}, 2000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p><strong>Try this to scroll on top</strong></p>\n\n<pre><code>&lt;script&gt;\n    $(window).scrollTop(0);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p><code>$(document).scrollTop(0);</code> also works.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>  $(\"html, body\").animate({ scrollTop: 0 }, \"slow\");\n</code></pre>\n\n<p>is working</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>If you'd like to scroll to any element with an ID, try this:</p>\n\n<pre><code>$('a[href^=\"#\"]').bind('click.smoothscroll',function (e) {\n    e.preventDefault();\n    var target = this.hash;\n    $target = $(target);\n    $('html, body').stop().animate({\n        'scrollTop': $target.offset().top\n    }, 700, 'swing', function () {\n        window.location.hash = target;\n    });\n});``\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Non-jQuery solution / pure JavaScript:</p>\n\n<pre><code>document.body.scrollTop = document.documentElement.scrollTop = 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can try using JS as in this Fiddle <a href=\"http://jsfiddle.net/5bNmH/1/\" rel=\"nofollow\">http://jsfiddle.net/5bNmH/1/</a></p>\n\n<p>Add the \"Go to top\" button in your page footer:</p>\n\n<pre><code>&lt;footer&gt;\n    &lt;hr /&gt;\n    &lt;p&gt;Just some basic footer text.&lt;/p&gt;\n    &lt;!-- Go to top Button --&gt;\n    &lt;a href=\"#\" class=\"go-top\"&gt;Go Top&lt;/a&gt;\n&lt;/footer&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n\n  $(\"a[href='#top']\").click(function() {\n     $(\"html, body\").animate({ scrollTop: 0 }, \"slow\");\n     return false;\n  });\n&lt;/script&gt;\n</code></pre>\n\n<p>in html</p>\n\n<pre><code>&lt;a href=\"#top\"&gt;go top&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you don't want smooth scrolling, you can cheat and stop the smooth scrolling animation pretty much as soon as you start it... like so:</p>\n\n<pre><code>   $(document).ready(function() {\n      $(\"a[href='#top']\").click(function() {\n          $(\"html, body\").animate({ scrollTop: 0 }, \"1\");              \n          $('html, body').stop(true, true);\n\n          //Anything else you want to do in the same action goes here\n\n          return false;                              \n      });\n  });\n</code></pre>\n\n<p>I've no idea whether it's recommended/allowed, but it works :)</p>\n\n<p>When would you use this? I'm not sure, but perhaps when you want to use one click to animate one thing with Jquery, but do another without animation? ie open a slide-in admin login panel at the top of the page, and instantly jump to the top to see it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n$(function(){\n   var scroll_pos=(0);          \n   $('html, body').animate({scrollTop:(scroll_pos)}, '2000');\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Really strange: This question is active for five years now and there is still no vanilla JavaScript answer to animate the scrolling\u2026 So here you go:</p>\n\n<pre><code>var scrollToTop = window.setInterval(function() {\n    var pos = window.pageYOffset;\n    if ( pos &gt; 0 ) {\n        window.scrollTo( 0, pos - 20 ); // how far to scroll on each step\n    } else {\n        window.clearInterval( scrollToTop );\n    }\n}, 16); // how fast to scroll (this equals roughly 60 fps)\n</code></pre>\n\n<p>If you like, you can wrap this in a function and call that via the <code>onclick</code> attribute. Check this <a href=\"http://jsfiddle.net/osoh6o5a/\" rel=\"nofollow\">jsfiddle</a></p>\n\n<p>Note: This is a very basic solution and maybe not the most performant one. A very elaborated example can be found here: <a href=\"https://github.com/cferdinandi/smooth-scroll\" rel=\"nofollow\">https://github.com/cferdinandi/smooth-scroll</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A <a href=\"http://stackoverflow.com/a/1145297/1015595\">lot</a> <a href=\"http://stackoverflow.com/a/14981461/1015595\">of</a> <a href=\"http://stackoverflow.com/a/10278290/1015595\">users</a> recommend selecting both the html and body tags for cross-browser compatibility, like so:</p>\n\n<pre><code>$('html, body').animate({ scrollTop: 0 }, callback);\n</code></pre>\n\n<p>This can trip you up though if you're counting on your callback running only once. It will in fact run twice because you've selected two elements.</p>\n\n<p>If that is a problem for you, you can do something like this:</p>\n\n<pre><code>function scrollToTop(callback) {\n    if ($('html').scrollTop()) {\n        $('html').animate({ scrollTop: 0 }, callback);\n        return;\n    }\n\n    $('body').animate({ scrollTop: 0 }, callback);\n}\n</code></pre>\n\n<p>The reason this works is in Chrome <code>$('html').scrollTop()</code> returns 0, but not in other browsers such as Firefox.</p>\n\n<p>If you don't want to wait for the animation to complete in the case that the scrollbar is already at the top, try this:</p>\n\n<pre><code>function scrollToTop(callback) {\n    if ($('html').scrollTop()) {\n        $('html').animate({ scrollTop: 0 }, callback);\n        return;\n    }\n\n    if ($('body').scrollTop()) {\n        $('body').animate({ scrollTop: 0 }, callback);\n        return;\n    }\n\n    callback();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function scrolltop() {\n\n    var offset = 220;\n    var duration = 500;\n\n    jQuery(window).scroll(function() {\n        if (jQuery(this).scrollTop() &gt; offset) {\n            jQuery('#back-to-top').fadeIn(duration);\n        } else {\n            jQuery('#back-to-top').fadeOut(duration);\n        }\n    });\n\n    jQuery('#back-to-top').click(function(event) {\n        event.preventDefault();\n        jQuery('html, body').animate({scrollTop: 0}, duration);\n        return false;\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The old <code>#top</code> can do the trick </p>\n\n<pre><code>document.location.href = \"#top\";\n</code></pre>\n\n<p>Works fine in FF, IE and Chrome</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have a button a user presses and it shows a hidden div using jQuery.</p>\n\n<p>My question is, how do I scroll to the top of the page using a jQuery command in that function? It is desirable even if the scroll bar instantly jumps to the top.  I'm not looking for a smooth scrolling.</p>\n",
            "last_activity_date": 1417400947,
            "question_id": 1144805,
            "score": 472,
            "tags": [
                "javascript",
                "jquery",
                "scroll"
            ],
            "title": "How do I scroll to the top of the page with jQuery?"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>You can do it, but the downside is that it can't be part of the prototype:</p>\n\n<pre><code>function Restaurant()\n{\n    var myPrivateVar;\n\n    var private_stuff = function()   // Only visible inside Restaurant()\n    {\n        myPrivateVar = \"I can set this here!\";\n    }\n\n    this.use_restroom = function()   // use_restroom is visible to all\n    {\n        private_stuff();\n    }\n\n    this.buy_food = function()    // buy_food is visible to all\n    {\n        private_stuff();\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 201
                },
                {
                    "body": "<p>You can simulate private methods like this:</p>\n\n<pre><code>function Restaurant() {\n}\n\nRestaurant.prototype = (function() {\n    var private_stuff = function() {\n        // Private code here\n    };\n\n    return {\n\n        constructor:Restaurant,\n\n        use_restroom:function() {\n            private_stuff();\n        }\n\n    };\n})();\n\nvar r = new Restaurant();\n\n// This will work:\nr.use_restroom();\n\n// This will cause an error:\nr.private_stuff();\n</code></pre>\n\n<p>More information on this technique here: <a href=\"http://webreflection.blogspot.com/2008/04/natural-javascript-private-methods.html\">http://webreflection.blogspot.com/2008/04/natural-javascript-private-methods.html</a></p>\n",
                    "is_accepted": false,
                    "score": 100
                },
                {
                    "body": "<p>In these situations when you have a public API, and you would like private and public methods/properties, I always use the Module Pattern. This pattern was made popular within the YUI library, and the details can be found here:</p>\n\n<p><a href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\">http://yuiblog.com/blog/2007/06/12/module-pattern/</a></p>\n\n<p>It is really straightforward, and easy for other developers to comprehend. For a simple example:</p>\n\n<pre><code>var MYLIB = function() {  \n    var aPrivateProperty = true;\n    var aPrivateMethod = function() {\n    \t// some code here...\n    };\n    return {\n    \taPublicMethod : function() {\n    \t\taPrivateMethod(); // okay\n    \t\t// some code here...\n    \t},\n    \taPublicProperty : true\n    };  \n}();\n\nMYLIB.aPrivateMethod() // not okay\nMYLIB.aPublicMethod() // okay\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>The apotheosis of the Module Pattern: <a href=\"http://www.wait-till-i.com/2007/08/22/again-with-the-module-pattern-reveal-something-to-the-world/\" rel=\"nofollow\" title=\"from Chris Heilemann, naturally\">The Revealing Module Pattern</a></p>\n\n<p>A neat little extension to a very robust pattern.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>All of this closure will cost you.  Make sure you test the speed implications especially in IE. You will find you are better off with a naming convention. There are still a lot of corporate web users out there that are forced to use IE6...</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you want the full range of public and private functions with the ability for public functions to access private functions, layout code for an object like this:</p>\n\n<pre><code>function MyObject(arg1, arg2, ...) {\n  //constructor code using constructor arguments...\n  //create/access public variables as \n  // this.var1 = foo;\n\n  //private variables\n\n  var v1;\n  var v2;\n\n  //private functions\n  function privateOne() {\n  }\n\n  function privateTwon() {\n  }\n\n  //public functions\n\n  MyObject.prototype.publicOne = function () {\n  };\n\n  MyObject.prototype.publicTwo = function () {\n  };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I conjured up this: EDIT: Actually, someone has linked to a identical solution. Duh!</p>\n\n<pre><code>var Car = function() {\n}\n\nCar.prototype = (function() {\n    var hotWire = function() {\n    \t// Private code *with* access to public properties through 'this'\n    \talert( this.drive() ); // Alerts 'Vroom!'\n    }\n\n    return {\n    \tsteal: function() {\n    \t\thotWire.call( this ); // Call a private method\n    \t},\n    \tdrive: function() {\n    \t\treturn 'Vroom!';\n    \t}\n    };\n})();\n\nvar getAwayVechile = new Car();\n\nhotWire(); // Not allowed\ngetAwayVechile.hotWire(); // Not allowed\ngetAwayVechile.steal(); // Alerts 'Vroom!'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I think the problem with @domgblackwell's and @James's approach is that prototype methods will be defined over and over with every instance created.\nHowever since it's an override it may be a non-issue from memory aspect. It loses points on elegance though, cause it's quite ugly to define those methods every time.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var TestClass = function( ) {\n\n    var privateProperty = 42;\n\n    function privateMethod( ) {\n        alert( \"privateMethod, \" + privateProperty );\n    }\n\n    this.public = {\n        constructor: TestClass,\n\n        publicProperty: 88,\n        publicMethod: function( ) {\n            alert( \"publicMethod\" );\n            privateMethod( );\n        }\n    };\n};\nTestClass.prototype = new TestClass( ).public;\n\n\nvar myTestClass = new TestClass( );\n\nalert( myTestClass.publicProperty );\nmyTestClass.publicMethod( );\n\nalert( myTestClass.privateMethod || \"no privateMethod\" );\n</code></pre>\n\n<p>Similar to georgebrock but a little less verbose (IMHO)\nAny problems with doing it this way? (I haven't seen it anywhere)</p>\n\n<p>edit: I realised this is kinda useless since every independent instantiation has its own copy of the public methods, thus undermining the use of the prototype.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Private functions cannot access the public variables using module pattern</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is the class which I created to understand what Douglas Crockford's has suggested in his site <a href=\"http://javascript.crockford.com/private.html\">Private Members in JavaScript</a></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function Employee(id, name) { //Constructor\n    //Public member variables\n    this.id = id;\n    this.name = name;\n    //Private member variables\n    var fName;\n    var lName;\n    var that = this;\n    //By convention, we create a private variable 'that'. This is used to     \n    //make the object available to the private methods. \n\n    //Private function\n    function setFName(pfname) {\n        fName = pfname;\n        alert('setFName called');\n    }\n    //Privileged function\n    this.setLName = function (plName, pfname) {\n        lName = plName;  //Has access to private variables\n        setFName(pfname); //Has access to private function\n        alert('setLName called ' + this.id); //Has access to member variables\n    }\n    //Another privileged member has access to both member variables and private variables\n    //Note access of this.dataOfBirth created by public member setDateOfBirth\n    this.toString = function () {\n        return 'toString called ' + this.id + ' ' + this.name + ' ' + fName + ' ' + lName + ' ' + this.dataOfBirth; \n    }\n}\n//Public function has access to member variable and can create on too but does not have access to private variable\nEmployee.prototype.setDateOfBirth = function (dob) {\n    alert('setDateOfBirth called ' + this.id);\n    this.dataOfBirth = dob;   //Creates new public member note this is accessed by toString\n    //alert(fName); //Does not have access to private member\n}\n$(document).ready()\n{\n    var employee = new Employee(5, 'Shyam'); //Create a new object and initialize it with constructor\n    employee.setLName('Bhaskar', 'Ram');  //Call privileged function\n    employee.setDateOfBirth('1/1/2000');  //Call public function\n    employee.id = 9;                     //Set up member value\n    //employee.setFName('Ram');  //can not call Private Privileged method\n    alert(employee.toString());  //See the changed object\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Since everybody was posting here his own code, I'm gonna do that too...</p>\n\n<p>I like Crockford because he introduced real object oriented patterns in Javascript. But he also came up with a new misunderstanding, the \"that\" one.</p>\n\n<p>So why is he using \"that = this\"? It has nothing to do with private functions at all. It has to do with inner functions! </p>\n\n<p>Because according to Crockford this is buggy code: </p>\n\n<pre><code>Function Foo( ) {\n    this.bar = 0; \n    var foobar=function( ) {\n        alert(this.bar);\n    }\n} \n</code></pre>\n\n<p>So he suggested doing this:</p>\n\n<pre><code>Function Foo( ) {\n    this.bar = 0;\n    that = this; \n    var foobar=function( ) {\n        alert(that.bar);\n    }\n}\n</code></pre>\n\n<p>So as I said, I'm quite sure that Crockford was wrong his explanation about that and this (but his code is certainly correct). Or was he just fooling the Javascript world, to know who is copying his code? I dunno...I'm no browser geek ;D</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>Ah, that's what is all about: <a href=\"http://stackoverflow.com/questions/4886632/what-does-var-that-this-mean-in-javascript\">What does var that = this; mean in javascript?</a></p>\n\n<p>So Crockie was really wrong with his explanation....but right with his code, so he's still a great guy. :))</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In general I added the private Object _ temporarily to the object.\nYou have to open the privacy exlipcitly in the \"Power-constructor\" for the method.\nIf you call the method from the prototype, you will\nbe able to overwrite the prototype-method</p>\n\n<ul>\n<li><p>Make a public method accessible in the \"Power-constructor\": (ctx is the object context)</p>\n\n<pre><code>ctx.test = GD.Fabric.open('test', GD.Test.prototype, ctx, _); // is a private object\n</code></pre></li>\n<li><p>Now I have this openPrivacy:</p>\n\n<pre><code>GD.Fabric.openPrivacy = function(func, clss, ctx, _) {\n    return function() {\n        ctx._ = _;\n        var res = clss[func].apply(ctx, arguments);\n        ctx._ = null;\n        return res;\n    };\n};\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You have to put a closure around your actual constructor-function, where you can define your private methods.\nTo change data of the instances through these private methods, you have to give them \"this\" with them, either as an function argument or by calling this function with .apply(this) :</p>\n\n<pre><code>var Restaurant = (function(){\n    var private_buy_food = function(that){\n        that.data.soldFood = true;\n    }\n    var private_take_a_shit = function(){\n        this.data.isdirty = true;   \n    }\n    // New Closure\n    function restaurant()\n    {\n        this.data = {\n            isdirty : false,\n            soldFood: false,\n        };\n    }\n\n    restaurant.prototype.buy_food = function()\n    {\n       private_buy_food(this);\n    }\n    restaurant.prototype.use_restroom = function()\n    {\n       private_take_a_shit.call(this);\n    }\n    return restaurant;\n})()\n\n// TEST:\n\nvar McDonalds = new Restaurant();\nMcDonalds.buy_food();\nMcDonalds.use_restroom();\nconsole.log(McDonalds);\nconsole.log(McDonalds.__proto__);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think such questions come up again and again because of the lack of understanding of the  closures. \u0421losures is most important thing in JS. Every JS programmer have to feel the essence of it.</p>\n\n<p><strong>1.</strong> First of all we need to make separate scope (closure).</p>\n\n<pre><code>function () {\n\n}\n</code></pre>\n\n<p><strong>2.</strong> In this area, we can do whatever we want. And no one will know about it.</p>\n\n<pre><code>function () {\n    var name,\n        secretSkills = {\n            pizza: function () { return new Pizza() },\n            sushi: function () { return new Sushi() }\n        }\n\n    function Restaurant(_name) {\n        name = _name\n    }\n    Restaurant.prototype.getFood = function (name) {\n        return name in secretSkills ? secretSkills[name]() : null\n    }\n}\n</code></pre>\n\n<p><strong>3.</strong> For the world to know about our restaurant class, \nwe have to return it from the closure.</p>\n\n<pre><code>var Restaurant = (function () {\n    // Restaurant definition\n    return Restaurant\n})()\n</code></pre>\n\n<p><strong>4.</strong> At the end, we have:</p>\n\n<pre><code>var Restaurant = (function () {\n    var name,\n        secretSkills = {\n            pizza: function () { return new Pizza() },\n            sushi: function () { return new Sushi() }\n        }\n\n    function Restaurant(_name) {\n        name = _name\n    }\n    Restaurant.prototype.getFood = function (name) {\n        return name in secretSkills ? secretSkills[name]() : null\n    }\n    return Restaurant\n})()\n</code></pre>\n\n<p><strong>5.</strong> Also, this approach has potential for inheritance and templating</p>\n\n<pre><code>// Abstract class\nfunction AbstractRestaurant(skills) {\n    var name\n    function Restaurant(_name) {\n        name = _name\n    }\n    Restaurant.prototype.getFood = function (name) {\n        return skills &amp;&amp; name in skills ? skills[name]() : null\n    }\n    return Restaurant\n}\n\n// Concrete classes\nSushiRestaurant = AbstractRestaurant({ \n    sushi: function() { return new Sushi() } \n})\n\nPizzaRestaurant = AbstractRestaurant({ \n    pizza: function() { return new Pizza() } \n})\n\nvar r1 = new SushiRestaurant('Yo! Sushi'),\n    r2 = new PizzaRestaurant('Dominos Pizza')\n\nr1.getFood('sushi')\nr2.getFood('pizza')\n</code></pre>\n\n<p>I hope this helps someone better understand this subject</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This is what I worked out:</p>\n\n<p>Needs one class of sugar code that <a href=\"https://github.com/najamelan/TidBits_Javascript_OoJs\" rel=\"nofollow\">you can find here</a>. Also supports protected, inheritance, virtual, static stuff...</p>\n\n<pre><code>;( function class_Restaurant( namespace )\n{\n    'use strict';\n\n    if( namespace[ \"Restaurant\" ] ) return    // protect against double inclusions\n\n        namespace.Restaurant = Restaurant\n    var Static               = TidBits.OoJs.setupClass( namespace, \"Restaurant\" )\n\n\n    // constructor\n    //\n    function Restaurant()\n    {\n        this.toilets = 3\n\n        this.Private( private_stuff )\n\n        return this.Public( buy_food, use_restroom )\n    }\n\n    function private_stuff(){ console.log( \"There are\", this.toilets, \"toilets available\") }\n\n    function buy_food     (){ return \"food\"        }\n    function use_restroom (){ this.private_stuff() }\n\n})( window )\n\n\nvar chinese = new Restaurant\n\nconsole.log( chinese.buy_food()      );  // output: food\nconsole.log( chinese.use_restroom()  );  // output: There are 3 toilets available\nconsole.log( chinese.toilets         );  // output: undefined\nconsole.log( chinese.private_stuff() );  // output: undefined\n\n// and throws: TypeError: Object #&lt;Restaurant&gt; has no method 'private_stuff'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What about this?</p>\n\n<pre><code>var Restaurant = (function() {\n\n var _id = 0;\n var privateVars = [];\n\n function Restaurant(name) {\n     this.id = ++_id;\n     this.name = name;\n     privateVars[this.id] = {\n         cooked: []\n     };\n }\n\n Restaurant.prototype.cook = function (food) {\n     privateVars[this.id].cooked.push(food);\n }\n\n return Restaurant;\n\n})();\n</code></pre>\n\n<p>Private variable lookup is impossible outside of the scope of the immediate function.\nThere is no duplication of functions, saving memory.</p>\n\n<p>The downside is that the lookup of private variables is clunky <code>privateVars[this.id].cooked</code> is ridiculous to type. There is also an extra \"id\" variable.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>Class({  \n    Namespace:ABC,  \n    Name:\"ClassL2\",  \n    Bases:[ABC.ClassTop],  \n    Private:{  \n        m_var:2  \n    },  \n    Protected:{  \n        proval:2,  \n        fight:Property(function(){  \n            this.m_var--;  \n            console.log(\"ClassL2::fight (m_var)\" +this.m_var);  \n        },[Property.Type.Virtual])  \n    },  \n    Public:{  \n        Fight:function(){  \n            console.log(\"ClassL2::Fight (m_var)\"+this.m_var);  \n            this.fight();  \n        }  \n    }  \n});  \n</code></pre>\n\n<p><a href=\"https://github.com/nooning/JSClass\" rel=\"nofollow\">https://github.com/nooning/JSClass</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have created a new tool to allow you to have true private methods on the prototype\n<a href=\"https://github.com/TremayneChrist/ProtectJS\" rel=\"nofollow\">https://github.com/TremayneChrist/ProtectJS</a></p>\n\n<p>Example:</p>\n\n<pre><code>var MyObject = (function () {\n\n  // Create the object\n  function MyObject() {}\n\n  // Add methods to the prototype\n  MyObject.prototype = {\n\n    // This is our public method\n    public: function () {\n      console.log('PUBLIC method has been called');\n    },\n\n    // This is our private method, using (_)\n    _private: function () {\n      console.log('PRIVATE method has been called');\n    }\n  }\n\n  return protect(MyObject);\n\n})();\n\n// Create an instance of the object\nvar mo = new MyObject();\n\n// Call its methods\nmo.public(); // Pass\nmo._private(); // Fail\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>Using self invoking function and call</h1>\n\n<p>JavaScript uses <a href=\"http://en.wikipedia.org/wiki/Prototype-based_programming\" rel=\"nofollow\">prototypes</a> and don't have classes (and methods) like many object oriented languages. A JavaScript developer need to think in JavaScript.</p>\n\n<p>Wikipedia quote:</p>\n\n<blockquote>\n  <p>Unlike many object-oriented languages, there is no distinction between\n  a function definition and a method definition. Rather, the distinction\n  occurs during function calling; when a function is called as a method\n  of an object, the function's local this keyword is bound to that\n  object for that invocation.</p>\n</blockquote>\n\n<p>Solution using a <a href=\"http://en.wikipedia.org/wiki/Immediately-invoked_function_expression\" rel=\"nofollow\">self invoking function</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\">call function</a> to call the private \"method\" :</p>\n\n<pre><code>var MyObject = (function () {\n\n    // Constructor\n    function MyObject(foo) {\n        this._foo = foo;\n    }\n\n    MyObject.prototype.publicFun = function() {\n        return privateFun.call(this, '&gt;&gt;');\n    }\n\n    function privateFun(prefix) {\n        return prefix + this._foo;\n    }\n\n    return MyObject;\n\n})();\n\n\nvar myObject = new MyObject('bar');\nmyObject.publicFun(); // Returns '&gt;&gt;bar'\nmyObject.privateFun('&gt;&gt;'); // ReferenceError: private is not defined\n</code></pre>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\">call function</a> allow us to call the private function with the appropriate context (this).</p>\n\n<p><br></p>\n\n<h1>Simpler with Node.js</h1>\n\n<p>If you are using <a href=\"http://nodejs.org/\" rel=\"nofollow\">node.js</a>, you don't need the <a href=\"http://en.wikipedia.org/wiki/Immediately-invoked_function_expression\" rel=\"nofollow\">IIFE</a> part because you can take advantage of the <a href=\"http://nodejs.org/api/modules.html\" rel=\"nofollow\">module loading system</a>:</p>\n\n<pre><code>function MyObject(foo) {\n    this._foo = foo;\n}\n\nMyObject.prototype.publicFun = function() {\n    return privateFun.call(this, '&gt;&gt;');\n}\n\nfunction privateFun(prefix) {\n    return prefix + this._foo;\n}\n\nexports.MyObject = MyObject;\n</code></pre>\n\n<p>Load the file:</p>\n\n<pre><code>var MyObject = require('./MyObject.js');\n\nvar myObject = new MyObject('bar');\nmyObject.publicFun(); // Returns '&gt;&gt;bar'\nmyObject.privateFun('&gt;&gt;'); // ReferenceError: private is not defined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Take any of the solutions that follow Crockford's <em>private</em> or <em>priviledged</em> pattern. For example:</p>\n\n<pre><code>function Foo(x) {\n    var y = 5;\n    var bar = function() {\n        return y * x;\n    };\n\n    this.public = function(z) {\n        return bar() + x * z;\n    };\n}\n</code></pre>\n\n<p>In any case where the attacker has no \"execute\" right on the JS context he has no way of accessing any \"public\" or \"private\" fields or methods. In case the attacker does have that access he can execute this one-liner:</p>\n\n<pre><code>eval(\"Foo = \" + Foo.toString().replace(\n    /{/, \"{ this.eval = function(code) { return eval(code); }; \"\n));\n</code></pre>\n\n<p>Note that the above code is generic to all constructor-type-privacy. It will fail with some of the solutions here but it should be clear that pretty much all of the closure based solutions can be broken like this with different <code>replace()</code> parameters. </p>\n\n<p>After this is executed any object created with <code>new Foo()</code> is going to have an <code>eval</code> method which can be called to return or change values or methods defined in the constructor's closure, e.g.:</p>\n\n<pre><code>f = new Foo(99);\nf.eval(\"x\");\nf.eval(\"y\");\nf.eval(\"x = 8\");\n</code></pre>\n\n<p>The only problem I can see with this that it won't work for cases where there is only one instance and it's created on load. But then there is no reason to actually define a prototype and in that case the attacker can simply recreate the object instead of the constructor as long as he has a way of passing the same parameters (e.g. they are constant or calculated from available values).</p>\n\n<p><strong>In my opinion, this pretty much makes Crockford's solution useless.</strong> Since the \"privacy\" is easily broken the downsides of his solution (reduced readability &amp; maintainability, decreased performance, increased memory) makes the \"no privacy\" prototype based method the better choice. </p>\n\n<p>I do usually use leading underscores to mark <code>__private</code> and <code>_protected</code> methods and fields (Perl style), but the idea of having privacy in JavaScript just shows how it's a misunderstood language. </p>\n\n<p><strong>Therefore I disagree with <a href=\"http://javascript.crockford.com/private.html\" rel=\"nofollow\">Crockford</a></strong> except for his first sentence.</p>\n\n<p><strong>So how do you get real privacy in JS?</strong> Put everything that is required to be private on the server side and use JS to do AJAX calls.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's what i enjoyed the most so far regarding private/public methods/members and instantiation in javascript:</p>\n\n<p>here is the article: <a href=\"http://www.sefol.com/?p=1090\" rel=\"nofollow\">http://www.sefol.com/?p=1090</a></p>\n\n<p>and here is the example:</p>\n\n<pre><code>var Person = (function () {\n\n    //Immediately returns an anonymous function which builds our modules \n    return function (name, location) {\n\n        alert(\"createPerson called with \" + name);\n\n        var localPrivateVar = name;\n\n        var localPublicVar = \"A public variable\";\n\n        var localPublicFunction = function () {\n            alert(\"PUBLIC Func called, private var is :\" + localPrivateVar)\n        };\n\n        var localPrivateFunction = function () {\n            alert(\"PRIVATE Func called \")\n        };\n\n        var setName = function (name) {\n\n            localPrivateVar = name;\n\n        }\n\n        return {\n\n            publicVar: localPublicVar,\n\n            location: location,\n\n            publicFunction: localPublicFunction,\n\n            setName: setName\n\n        }\n\n    }\n})();\n\n\n//Request a Person instance - should print \"createPerson called with ben\"\nvar x = Person(\"ben\", \"germany\");\n\n//Request a Person instance - should print \"createPerson called with candide\"\nvar y = Person(\"candide\", \"belgium\");\n\n//Prints \"ben\"\nx.publicFunction();\n\n//Prints \"candide\"\ny.publicFunction();\n\n//Now call a public function which sets the value of a private variable in the x instance\nx.setName(\"Ben 2\");\n\n//Shouldn't have changed this : prints \"candide\"\ny.publicFunction();\n\n//Should have changed this : prints \"Ben 2\"\nx.publicFunction();\n</code></pre>\n\n<p>JSFiddle: <a href=\"http://jsfiddle.net/northkildonan/kopj3dt3/1/\" rel=\"nofollow\">http://jsfiddle.net/northkildonan/kopj3dt3/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know it's a bit too late but how about this?</p>\n\n<pre><code>var obj = function(){\n    var pr = \"private\";\n    var prt = Object.getPrototypeOf(this);\n    if(!prt.hasOwnProperty(\"showPrivate\")){\n        prt.showPrivate = function(){\n            console.log(pr);\n        }\n    }    \n}\n\nvar i = new obj();\ni.showPrivate();\nconsole.log(i.hasOwnProperty(\"pr\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The module pattern is right in most cases. But if you have thousands of instances, classes save memory. If saving memory is a concern and your objects contain a small amount of private data, but have a lot of public functions, then you'll want all public functions to live in the .prototype to save memory.</p>\n\n<p>This is what I came up with:</p>\n\n<pre><code>var MyClass = (function () {\n    var secret = {}; // You can only getPriv() if you know this\n    function MyClass() {\n        var that = this, priv = {\n            foo: 0 // ... and other private values\n        };\n        that.getPriv = function (proof) {\n            return (proof === secret) &amp;&amp; priv;\n        };\n    }\n    MyClass.prototype.inc = function () {\n        var priv = this.getPriv(secret);\n        priv.foo += 1;\n        return priv.foo;\n    };\n    return MyClass;\n}());\nvar x = new MyClass();\nx.inc(); // 1\nx.inc(); // 2\n</code></pre>\n\n<p>The object <code>priv</code> contains private properties. It is accessible through the public function <code>getPriv()</code>, but this function returns <code>false</code> unless you pass it the <code>secret</code>, and this is only known inside the main closure.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>To make a JavaScript class with a public method I'd do something like:</p>\n\n<pre><code>function Restaurant()\n{\n}\n\nRestaurant.prototype.buy_food = function()\n{\n   // something here\n}\n\nRestaurant.prototype.use_restroom = function()\n{\n   // something here\n}\n</code></pre>\n\n<p>That way users of my class can:</p>\n\n<pre><code>var restaurant = new Restaurant();\nrestaurant.buy_food();\nrestaurant.use_restroom();\n</code></pre>\n\n<p>How do I create a private method that my public buy_food and use_restroom methods can call but that users of the class can't call externally.</p>\n\n<p>In other words, I want my method implementation to be able to do:</p>\n\n<pre><code>Restaurant.prototype.use_restroom = function()\n{\n   this.private_stuff();\n}\n</code></pre>\n\n<p>But this shouldn't work:</p>\n\n<pre><code>var r = new Restaurant();\nr.private_stuff();\n</code></pre>\n\n<p>How do I define private_stuff as a private method so both of those hold true?</p>\n\n<p>I've read <a href=\"http://javascript.crockford.com/private.html\">Doug Crockford's writeup</a> a few times but it doesn't seem like \"private\" methods can be called by public methods and \"privileged\" methods can be called externally.</p>\n",
            "last_activity_date": 1424267054,
            "question_id": 55611,
            "score": 217,
            "tags": [
                "javascript",
                "oop"
            ],
            "title": "JavaScript private methods"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In modern versions of jQuery, you would use the <code>$._data</code> method to find any events attached by jQuery to the element in question. <em>Note</em>, this is an internal-use only method:</p>\n\n<pre><code>// Bind up a couple of event handlers\n\u200b$(\"#foo\").on({\n    click: function(){ alert(\"Hello\") },\n    mouseout: function(){ alert(\"World\") }\n});\u200b\u200b\u200b\n\n// Lookup events for this particular Element\n\u200b$._data( $(\"#foo\")[0], \"events\" );\n</code></pre>\n\n<p>The result from <code>$._data</code> will be an object that contains both of the events we set (pictured below with the <code>mouseout</code> property expanded):</p>\n\n<p><img src=\"http://i.stack.imgur.com/3Hsop.png\" alt=\"Console output for $._\"></p>\n\n<p>Then in Chrome, you may right click the handler function and click \"view function definition\" to show you the exact spot where it is defined in your code.</p>\n",
                    "is_accepted": true,
                    "score": 245
                },
                {
                    "body": "<p>When I pass a little complex DOM query to $._data like this: <code>$._data($('#outerWrap .innerWrap ul li:last a'), 'events')</code> it throws undefined in the browser console.</p>\n\n<p>So I had to use $._data on the parent div: <code>$._data($('#outerWrap')[0], 'events')</code> to see the events for the a tags. Here is a JSFiddle for the same: <a href=\"http://jsfiddle.net/giri_jeedigunta/MLcpT/4/\" rel=\"nofollow\">http://jsfiddle.net/giri_jeedigunta/MLcpT/4/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <a href=\"https://github.com/zertosh/jquery-audit\" rel=\"nofollow\">jQuery Audit plugin</a> plugin should let you do this through the normal Chrome Dev Tools. It's not perfect, but it should let you see the actual handler bound to the element/event and not just the generic jQuery handler.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I used something like this if($._data($(\"a.wine-item-link\")[0]).events == null) { ... do something, pretty much bind their event handlers again } to check if my element is bound to any event. It will still say undefined (null) if you have unattached all your event handlers from that element. That is the reason why I am evaluating this in an if expression.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<ul>\n<li>Hit F12 to open Dev Tools</li>\n<li>Click the Sources tab</li>\n<li>On right-hand side, scroll down to \"Event Listener Breakpoints\", and   expand tree</li>\n<li>Click on the events you want to listen for.\n*Interact with the target element, if they fire you will get a break point in the debugger</li>\n</ul>\n\n<p>Similarly, you can right click on the target element -> select \"inspect element\" Scroll down on the right side of the dev frame, at the bottom is 'event listeners'. Expand the tree to see what events are attached to the element. Not sure if this works for events that are handled through bubbling (I'm guessing not)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I bind two event handlers on this link:</p>\n\n<pre><code>&lt;a href='#' id='elm'&gt;Show Alert&lt;/a&gt;\n</code></pre>\n\n<p><strong>JavaScript:</strong></p>\n\n<pre><code>$(function()\n{\n  $('#elm').click(_f);\n  $('#elm').mouseover(_m);\n});\n\nfunction _f(){alert('clicked');}\nfunction _m(){alert('mouse over');}\n</code></pre>\n\n<p>Is there any way to get a list of all events bound on an element, in this case on element with <code>id=\"elm\"</code>?</p>\n",
            "last_activity_date": 1423505473,
            "question_id": 2008592,
            "score": 155,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events"
            ],
            "title": "Can I find events bound on an element with jQuery?"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>I guess I am still unclear about what it is you are trying to do, but JScript.NET might be worth looking into, though <a href=\"http://blogs.msdn.com/jscript/archive/2007/05/07/introducing-managed-jscript.aspx\"><strong>Managed JScript</strong></a> seems like it may be more appropriate for your needs (it is more like JavaScript than JScript.NET).</p>\n\n<p>Personally, I thought it would be cool to integrate V8 somehow, but I didn't get past downloading the source code; wish I had the time to actually do something with it.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><a href=\"http://scriptsharp.com/\" rel=\"nofollow\">Script#</a> compiles C# to js and is the brain child of one of the ASP.Net team.  <a href=\"http://www.west-wind.com/WebLog/posts/10688.aspx\" rel=\"nofollow\">Rick Strahl</a> also has some posts on embedding js as runtime engine for expression evaluation.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>i believe all the major opensource JS engines (JavaScriptCore, SpiderMonkey, V8, and KJS) provide embedding APIs.  The only one I am actually directly familiar with is JavaScriptCore  (which is name of the JS engine the SquirrelFish lives in) which provides a pure C API.  If memory serves (it's been a while since i used .NET) .NET has fairly good support for linking in C API's.</p>\n\n<p>I'm honestly not sure what the API's for the other engines are like, but I do know that they all provide them.</p>\n\n<p>That said, depending on your purposes JScript.NET may be best, as all of these other engines will require you to include them with your app, as JSC is the only one that actually ships with an OS, but that OS is MacOS :D</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the language isn't a problem (any sandboxed scripted one) then there's <a href=\"http://www.codeproject.com/KB/mcpp/luanetwrapper.aspx\">LUA for .NET</a>. The Silverlight version of the .NET framework is also sandboxed afaik.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Use JSCRIPT.NET to get a library(dll) of the js . Then reference this dll in your .NET application and you are just there. DONE!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The open source JavaScript interpreter Jint (<a href=\"http://jint.codeplex.com\">http://jint.codeplex.com</a>) does exactly what you are looking for.</p>\n\n<p><strong>Edit:</strong> <br/>\nThe project has been entirely rewritten and is now hosted on Github at <a href=\"https://github.com/sebastienros/jint\">https://github.com/sebastienros/jint</a></p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>Try Javascript .NET:</p>\n\n<p><a href=\"http://javascriptdotnet.codeplex.com/\">http://javascriptdotnet.codeplex.com/</a></p>\n\n<p>It implements Google V8. You can compile and run Javascript directly from .NET code with it, and supply CLI objects to be used by the Javascript code as well. And V8 is probably the best engine ever created in terms of performance, it generates native code from Javascript. </p>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>Hey take a look for Javascript .NET on codeplex (<a href=\"http://javascriptdotnet.codeplex.com/\" rel=\"nofollow\">http://javascriptdotnet.codeplex.com/</a>) with the version 0.3.1 there is some pretty sweet new features that will probly interest you.</p>\n\n<p>Check out a sample code:</p>\n\n<pre><code>// Initialize the context\nJavascriptContext context = new JavascriptContext();\n\n// Setting the externals parameters of the context\ncontext.SetParameter(\"console\", new SystemConsole());\ncontext.SetParameter(\"message\", \"Hello World !\");\ncontext.SetParameter(\"number\", 1);\n\n// Running the script\ncontext.Run(\"var i; for (i = 0; i &lt; 5; i++) console.Print(message + ' (' + i + ')'); number += i;\");\n\n// Getting a parameter\nConsole.WriteLine(\"number: \" + context.GetParameter(\"number\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can try ironJS, looks promising although it is in heavy development. <a href=\"https://github.com/fholm/IronJS\">https://github.com/fholm/IronJS</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I just tried <strong><a href=\"http://www.remobjects.com/script.aspx\" rel=\"nofollow\">RemObjects Script for .Net</a></strong>.</p>\n\n<p>It works, although I had to use a static factory (<code>var a=A.createA();</code>) from JavaScript instead of the <code>var a=new A()</code> syntax. (ExposeType function only exposes statics!)\nNot much documentation and the source is written with Delphi Prism, which is rather unusual for me and the RedGate Reflector.</p>\n\n<p>So: <strong>Easy to use and setup, but not much help for advanced scenarios.</strong></p>\n\n<p>Also having to install something instead of just dropping the assemblies in a directory is a negative for me...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know I'm opening up an old thread but I've done a lot of work on smnet (spidermonkey-dotnet). In the recent years. It's main development focus has been seamless embedding of .net objects into the spidermonkey engine. It supports a wide variety of conversions from js values to .net objects. Some of those including delegates and events.</p>\n\n<p>Just saying it might be worth checking into now that there's some steady development on it :).\nI do keep the SVN repo up to date with bug fixes and new features. The source and project solution files are configured to successfully build on download. If there are any problems using it, feel free to open a discussion.</p>\n\n<p>I do understand the desire to have a managed javascript solution, but of all the managed javascript's I've used they're all very lacking in some key features that help make them both robust and easy to work with. I myself am waiting on IronJS to mature a little. While I wait, I have fun playing with spidermonkey-dotnet =) </p>\n\n<p><a href=\"http://spidermonkeydotnet.codeplex.com/releases/\" rel=\"nofollow\">spidermonkey-dotnet project and download page</a></p>\n\n<p>Edit: created documentation wiki page this afternoon.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Microsoft's documented way to add script extensibility to anything is IActiveScript.  You can use IActiveScript from within anyt .NET app, to call script logic.  The logic can party on .NET objects that you've placed into the scripting context. </p>\n\n<p>This answer provides an application that does it, with code: </p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/5939002/will-the-ie10-chakra-jscript-engine-available-as-stand-alone-accessible-from-c/7367964#7367964\">Will the IE10 Chakra JScript engine available as stand alone accessible from C#?</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is an implementation of an <a href=\"http://en.wikipedia.org/wiki/Active_Scripting\" rel=\"nofollow\">ActiveX Scripting</a> Engine Host in C# available here: <a href=\"http://stackoverflow.com/questions/4744105/parse-and-execute-js-by-c-sharp\">parse and execute JS by C#</a></p>\n\n<p>It allows to use Javascript (or VBScript) directly from C#, in native 32-bit or 64-bit processes. The full source is ~500 lines of C# code. It only has an implicit dependency on the installed JScript (or VBScript) engine DLL.</p>\n\n<p>For example, the following code:</p>\n\n<pre><code>Console.WriteLine(ScriptEngine.Eval(\"jscript\", \"1+2/3\"));\n</code></pre>\n\n<p>will display 1.66666666666667</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Anybody just tuning in check out Jurassic as well: </p>\n\n<p><a href=\"http://jurassic.codeplex.com/\">http://jurassic.codeplex.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>It's Possible now with <code>ASP.Net MVC4 Razor</code> View engine. the code will be this:</p>\n\n<pre><code>// c# class\npublic class A\n{\n    public string Hello(string msg)\n    {\n        return msg + \" whatewer\";\n    }\n}\n\n// js snippet\n&lt;script type=\"text/javascript\"&gt;\nvar a = new A();\nconsole.log('@a.Hello('Call me')'); // i have a console.log implemented, don't worry, it's not a client-side code :)\n&lt;/script&gt;\n</code></pre>\n\n<p>and <code>Razor</code> isn't just for MVC4 or another web applications and you can use it in offline desktop applications.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Try <a href=\"http://www.unvell.com/ReoScript/\" rel=\"nofollow\">ReoScript</a>, an open-source JavaScript interpreter implemented in C#.</p>\n\n<p>ReoScript makes your application can execute JavaScript. It has a wide variety of extension methons such as SetVariable, Function Extension, using CLR Type, .Net Event Binding and etc. </p>\n\n<p>Hello World:</p>\n\n<pre><code>ScriptRunningMachine srm = new ScriptRunningMachine();\nsrm.Run(\" alert('hello world!'); \");\n</code></pre>\n\n<p>And here is an example of script that creates a winform and show it.</p>\n\n<pre><code>import System.Windows.Forms.*;        // import namespace\n\nvar f = new Form();                   // create form\nf.click = function() { f.close(); };  // close when user clicked on form\n\nf.show();                             // show \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You might also be interested in <a href=\"http://clearscript.codeplex.com/\" rel=\"nofollow\">Microsoft ClearScript</a>\nwhich is hosted on codeplex and published under the Ms-Pl licence.</p>\n\n<p>I am no Microsoft fanboy, but I must admit that the V8 support has about the same functionnalities as Javascript.Net, and more important, the project is still maintained. As far as I am concerned, the support for delegates also functions better than with Spidermonkey-dotnet.</p>\n\n<p>ps: It also support JScript and VBScript but we were not interested by this old stuff.</p>\n\n<p>ps: It is compatible with .NET 4.0 and 4.5+</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>You can use the Chakra engine in C#. Here is an article on msdn showing how:</p>\n\n<p><a href=\"http://code.msdn.microsoft.com/windowsdesktop/JavaScript-Runtime-Hosting-d3a13880\" rel=\"nofollow\">http://code.msdn.microsoft.com/windowsdesktop/JavaScript-Runtime-Hosting-d3a13880</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is also <a href=\"https://github.com/Taritsyn/MsieJavaScriptEngine\" rel=\"nofollow\">MsieJavaScriptEngine</a> which uses Internet Explorers Chakra engine</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>just wondering if anyone has ever tried embedding and actually integrating any js engine into the .net environment. I could find and actually use (after a <strong>LOT</strong> of pain and effort, since it's pretty outdated and not quite finished) spidermonkey-dotnet project. Anyone with experience in this area? Engines like SquirrelFish, V8.. </p>\n\n<p>Not that I'm not satisfied with Mozilla's Spidermonkey (using it for Rails-like miniframework for custom components inside the core ASP.NET application), but I'd still love to explore a bit further with the options. The command-line solutions are not what I'd need, I cannot rely on anything else than CLR, I need to call methods from/to JavaScript/C# objects.</p>\n\n<pre><code>// c# class\npublic class A\n{\n    public string Hello(string msg)\n    {\n        return msg + \" whatewer\";\n    }\n}\n\n// js snippet\nvar a = new A();\nconsole.log(a.Hello('Call me')); // i have a console.log implemented, don't worry, it's not a client-side code :)\n</code></pre>\n\n<p>Just to clarify - I'm not trying to actually program <strong>the application itself</strong> in server-side javascript. It's used solely for writing custom user subapplications (can be seen as some sort of DSL). It's much easier (and safer) to allow normal people programming in js than C#.</p>\n",
            "last_activity_date": 1423474923,
            "question_id": 172753,
            "score": 149,
            "tags": [
                "c#",
                "javascript",
                "spidermonkey"
            ],
            "title": "Embedding JavaScript engine into .NET"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>See this answer: <a href=\"http://stackoverflow.com/questions/667426/javascript-resize-event-firing-multiple-times-while-dragging-the-resize-handle/668185#668185\">http://stackoverflow.com/questions/667426/javascript-resize-event-firing-multiple-times-while-dragging-the-resize-handle/668185#668185</a></p>\n\n<p>It involves the use of timeouts to delay the execution of your function.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I use the following function for delaying repeated actions, it will work for your case:</p>\n\n<pre><code>var delay = (function(){\n  var timer = 0;\n  return function(callback, ms){\n    clearTimeout (timer);\n    timer = setTimeout(callback, ms);\n  };\n})();\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>$(window).resize(function() {\n    delay(function(){\n      alert('Resize...');\n      //...\n    }, 500);\n});\n</code></pre>\n\n<p>The callback function passed to it, will execute only when the last call to delay has been made after the specified amount of time, otherwise a timer will be reset, I find this useful for other purposes like detecting when the user stopped typing, etc...</p>\n",
                    "is_accepted": false,
                    "score": 89
                },
                {
                    "body": "<p>Here's a modification of CMS's solution that can be called in multiple places in your code:</p>\n\n<pre><code>var waitForFinalEvent = (function () {\n  var timers = {};\n  return function (callback, ms, uniqueId) {\n    if (!uniqueId) {\n      uniqueId = \"Don't call this twice without a uniqueId\";\n    }\n    if (timers[uniqueId]) {\n      clearTimeout (timers[uniqueId]);\n    }\n    timers[uniqueId] = setTimeout(callback, ms);\n  };\n})();\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>$(window).resize(function () {\n    waitForFinalEvent(function(){\n      alert('Resize...');\n      //...\n    }, 500, \"some unique string\");\n});\n</code></pre>\n\n<p>CMS's solution is fine if you only call it once, but if you call it multiple times, e.g. if different parts of your code set up separate callbacks to window resizing, then it will fail b/c they share the <code>timer</code> variable.  </p>\n\n<p>With this modification, you supply a unique id for each callback, and those unique IDs are used to keep all the timeout events separate.</p>\n",
                    "is_accepted": false,
                    "score": 177
                },
                {
                    "body": "<p>I prefer to create an event:</p>\n\n<pre><code>$(window).bind('resizeEnd', function() {\n    //do something, window hasn't changed size in 500ms\n});\n</code></pre>\n\n<p>Here is how you create it:</p>\n\n<pre><code> $(window).resize(function() {\n        if(this.resizeTO) clearTimeout(this.resizeTO);\n        this.resizeTO = setTimeout(function() {\n            $(this).trigger('resizeEnd');\n        }, 500);\n    });\n</code></pre>\n\n<p>You could have this in a global javascript file somewhere.</p>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<p>Assuming that the mouse cursor should return to the document after window resize, we can create a callback-like behavior with onmouseover event. Don't forget that this solution may not work for touch-enabled screens as expected.</p>\n\n<pre><code>var resizeTimer;\nvar resized = false;\n$(window).resize(function() {\n   clearTimeout(resizeTimer);\n   resizeTimer = setTimeout(function() {\n       if(!resized) {\n           resized = true;\n           $(document).mouseover(function() {\n               resized = false;\n               // do something here\n               $(this).unbind(\"mouseover\");\n           })\n       }\n    }, 500);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>If</strong> you have Underscore.js installed, you could:</p>\n\n<pre><code>$(window).resize(_.debounce(function(){\n    alert(\"Resized\");\n},500));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Some of the previously mentioned solutions did not work for me, even though they are of more general usage. Alternatively I've <a href=\"http://www.jquery4u.com/events/jquery-capture-window-resize-event/\" rel=\"nofollow\">found this one</a> that did the job on window resize:</p>\n\n<pre><code>$(window).bind('resize', function(e){\n    window.resizeEvt;\n    $(window).resize(function(){\n        clearTimeout(window.resizeEvt);\n        window.resizeEvt = setTimeout(function(){\n        //code to do after window is resized\n        }, 250);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Simple jQuery plugin for delayed window resize event.</p>\n\n<h2>SYNTAX:</h2>\n\n<p><strong>Add new function to resize event</strong></p>\n\n<pre><code>jQuery(window).resizeDelayed( func, delay, id ); // delay and id are optional\n</code></pre>\n\n<p><strong>Remove the function(by declaring its ID) added earlier</strong></p>\n\n<pre><code>jQuery(window).resizeDelayed( false, id );\n</code></pre>\n\n<p><strong>Remove all functions</strong></p>\n\n<pre><code>jQuery(window).resizeDelayed( false );\n</code></pre>\n\n<h2>USAGE:</h2>\n\n<pre><code>// ADD SOME FUNCTIONS TO RESIZE EVENT\njQuery(window).resizeDelayed( function(){ console.log( 'first event - should run after 0.4 seconds'); }, 400,  'id-first-event' );\njQuery(window).resizeDelayed( function(){ console.log('second event - should run after 1.5 seconds'); }, 1500, 'id-second-event' );\njQuery(window).resizeDelayed( function(){ console.log( 'third event - should run after 3.0 seconds'); }, 3000, 'id-third-event' );\n\n// LETS DELETE THE SECOND ONE\njQuery(window).resizeDelayed( false, 'id-second-event' );\n\n// LETS ADD ONE WITH AUTOGENERATED ID(THIS COULDNT BE DELETED LATER) AND DEFAULT TIMEOUT (500ms)\njQuery(window).resizeDelayed( function(){ console.log('newest event - should run after 0.5 second'); } );\n\n// LETS CALL RESIZE EVENT MANUALLY MULTIPLE TIMES (OR YOU CAN RESIZE YOUR BROWSER WINDOW) TO SEE WHAT WILL HAPPEN\njQuery(window).resize().resize().resize().resize().resize().resize().resize();\n</code></pre>\n\n<p><strong>USAGE OUTPUT:</strong></p>\n\n<pre><code>first event - should run after 0.4 seconds\nnewest event - should run after 0.5 second\nthird event - should run after 3.0 seconds\n</code></pre>\n\n<h2>PLUGIN:</h2>\n\n<pre><code>jQuery.fn.resizeDelayed = (function(){\n\n    // &gt;&gt;&gt; THIS PART RUNS ONLY ONCE - RIGHT NOW\n\n    var rd_funcs = [], rd_counter = 1, foreachResizeFunction = function( func ){ for( var index in rd_funcs ) { func(index); } };\n\n    // REGISTER JQUERY RESIZE EVENT HANDLER\n    jQuery(window).resize(function() {\n\n        // SET/RESET TIMEOUT ON EACH REGISTERED FUNCTION\n        foreachResizeFunction(function(index){\n\n            // IF THIS FUNCTION IS MANUALLY DISABLED ( by calling jQuery(window).resizeDelayed(false, 'id') ),\n            // THEN JUST CONTINUE TO NEXT ONE\n            if( rd_funcs[index] === false )\n                return; // CONTINUE;\n\n            // IF setTimeout IS ALREADY SET, THAT MEANS THAT WE SHOULD RESET IT BECAUSE ITS CALLED BEFORE DURATION TIME EXPIRES\n            if( rd_funcs[index].timeout !== false )\n                clearTimeout( rd_funcs[index].timeout );\n\n            // SET NEW TIMEOUT BY RESPECTING DURATION TIME\n            rd_funcs[index].timeout = setTimeout( rd_funcs[index].func, rd_funcs[index].delay );\n\n        });\n\n    });\n\n    // &lt;&lt;&lt; THIS PART RUNS ONLY ONCE - RIGHT NOW\n\n    // RETURN THE FUNCTION WHICH JQUERY SHOULD USE WHEN jQuery(window).resizeDelayed(...) IS CALLED\n    return function( func_or_false, delay_or_id, id ){\n\n        // FIRST PARAM SHOULD BE SET!\n        if( typeof func_or_false == \"undefined\" ){\n\n            console.log( 'jQuery(window).resizeDelayed(...) REQUIRES AT LEAST 1 PARAMETER!' );\n            return this; // RETURN JQUERY OBJECT\n\n        }\n\n        // SHOULD WE DELETE THE EXISTING FUNCTION(S) INSTEAD OF CREATING A NEW ONE?\n        if( func_or_false == false ){\n\n            // DELETE ALL REGISTERED FUNCTIONS?\n            if( typeof delay_or_id == \"undefined\" ){\n\n                // CLEAR ALL setTimeout's FIRST\n                foreachResizeFunction(function(index){\n\n                    if( typeof rd_funcs[index] != \"undefined\" &amp;&amp; rd_funcs[index].timeout !== false )\n                        clearTimeout( rd_funcs[index].timeout );\n\n                });\n\n                rd_funcs = [];\n\n                return this; // RETURN JQUERY OBJECT\n\n            }\n            // DELETE ONLY THE FUNCTION WITH SPECIFIC ID?\n            else if( typeof rd_funcs[delay_or_id] != \"undefined\" ){\n\n                // CLEAR setTimeout FIRST\n                if( rd_funcs[delay_or_id].timeout !== false )\n                    clearTimeout( rd_funcs[delay_or_id].timeout );\n\n                rd_funcs[delay_or_id] = false;\n\n                return this; // RETURN JQUERY OBJECT\n\n            }\n\n        }\n\n        // NOW, FIRST PARAM MUST BE THE FUNCTION\n        if( typeof func_or_false != \"function\" )\n            return this; // RETURN JQUERY OBJECT\n\n        // SET THE DEFAULT DELAY TIME IF ITS NOT ALREADY SET\n        if( typeof delay_or_id == \"undefined\" || isNaN(delay_or_id) )\n            delay_or_id = 500;\n\n        // SET THE DEFAULT ID IF ITS NOT ALREADY SET\n        if( typeof id == \"undefined\" )\n            id = rd_counter;\n\n        // ADD NEW FUNCTION TO RESIZE EVENT\n        rd_funcs[id] = {\n            func : func_or_false,\n            delay: delay_or_id,\n            timeout : false\n        };\n\n        rd_counter++;\n\n        return this; // RETURN JQUERY OBJECT\n\n    }\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Actually, as I know, you can't do some actions exactly when resize is off, simply because you don't know future user's actions. But you can assume the time passed between two resize events, so if you wait a little more than this time and no resize is made, you can call your function.<br />\nIdea is that we use <code>setTimeout</code> and it's id in order to save or delete it. For example we know that time between two resize events is 500ms, therefore we will wait 750ms.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a;\r\n$(window).resize(function(){\r\n  clearTimeout(a);\r\n  a = setTimeout(function(){\r\n    // call your function\r\n  },750);\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm using JQuery as such:</p>\n\n<pre><code>$(window).resize(function() { ... });\n</code></pre>\n\n<p>However, it appears that if the person manually resizes their browser windows by dragging the window edge to make it larger/smaller, the <code>.resize</code> event above fires multiple times.</p>\n\n<p><strong>Question:</strong> How to I call a function AFTER the browser window resize completed (so that the event only fires once)?</p>\n",
            "last_activity_date": 1424696631,
            "question_id": 2854407,
            "score": 114,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "JavaScript/JQuery: $(window).resize how to fire AFTER the resize is completed?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>There are a couple of advantages to using a function to define your view model.</p>\n\n<p>The main advantage is that you have immediate access to a value of <code>this</code> that equals the instance being created.  This means that you can do:</p>\n\n<pre><code>var ViewModel = function(first, last) {\n  this.first = ko.observable(first);\n  this.last = ko.observable(last);\n  this.full = ko.computed(function() {\n     return this.first() + \" \" + this.last();\n  }, this);\n};\n</code></pre>\n\n<p>So, your computed observable can be bound to the appropriate value of <code>this</code>, even if called from a different scope.</p>\n\n<p>With an object literal, you would have to do:</p>\n\n<pre><code>var viewModel = {\n   first: ko.observable(\"Bob\"),\n   last: ko.observable(\"Smith\"),\n};\n\nviewModel.full = ko.computed(function() {\n   return this.first() + \" \" + this.last();\n}, viewModel);\n</code></pre>\n\n<p>In that case, you could use <code>viewModel</code> directly in the computed observable, but it does get evaluated immediate (by default) so you could not define it within the object literal, as <code>viewModel</code> is not defined until after the object literal closed.  Many people don't like that the creation of your view model is not encapsulated into one call.</p>\n\n<p>Another pattern that you can use to ensure that <code>this</code> is always appropriate is to set a variable in the function equal to the appropriate value of <code>this</code> and use it instead.  This would be like:</p>\n\n<pre><code>var ViewModel = function() {\n    var self = this;\n    this.items = ko.observableArray();\n    this.removeItem = function(item) {\n         self.items.remove(item);\n    }\n};\n</code></pre>\n\n<p>Now, if you are in the scope of an individual item and call <code>$root.removeItem</code>, the value of <code>this</code> will actually be the data being bound at that level (which would be the item).  By using self in this case, you can ensure that it is being removed from the overall view model.</p>\n\n<p>Another option is using `bind, which is supported by modern browsers and added by KO, if it is not supported.  In that case, it would look like:</p>\n\n<pre><code>var ViewModel = function() {\n    this.items = ko.observableArray();\n    this.removeItem = function(item) {\n         this.items.remove(item);\n    }.bind(this);\n};\n</code></pre>\n\n<p>There is much more that could be said on this topic and many patterns that you could explore (like module pattern and revealing module pattern), but basically using a function gives you more flexibility and control over how the object gets created and the ability to reference variables that are private to the instance. </p>\n",
                    "is_accepted": true,
                    "score": 172
                },
                {
                    "body": "<p>I use a different method, though similar:</p>\n\n<pre><code>var viewModel = (function () {\n  var obj = {};\n  obj.myVariable = ko.observable();\n  obj.myComputed = ko.computed(function () { return \"hello\" + obj.myVariable() });\n\n  ko.applyBindings(obj);\n  return obj;\n})();\n</code></pre>\n\n<p>Couple of reasons:</p>\n\n<ol>\n<li>Not using <code>this</code>, which can confusion when used within <code>ko.computed</code>s etc</li>\n<li>My viewModel is a singleton, I don't need to create multiple instances (i.e. <code>new viewModel()</code>) </li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>In knockout js I see View Models declared as either:</p>\n\n<pre><code>var viewModel = {\n    firstname: ko.observable(\"Bob\")\n};\n\nko.applyBindings(viewModel );\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>var viewModel = function() {\n    this.firstname= ko.observable(\"Bob\");\n};\n\nko.applyBindings(new viewModel ());\n</code></pre>\n\n<p>What's the difference between the two, if any?</p>\n\n<p>I did find <a href=\"http://groups.google.com/group/knockoutjs/browse_thread/thread/b7204e9dd41f9b18\">this discussion</a> on the knockoutjs google group but it didn't really give me a satisfactory answer.</p>\n\n<p>I can see a reason if I wanted to initialise the model with some data, for example:</p>\n\n<pre><code>var viewModel = function(person) {\n    this.firstname= ko.observable(person.firstname);\n};\n\nvar person = ... ;\nko.applyBindings(new viewModel(person));\n</code></pre>\n\n<p>But if I'm not doing that does it matter which style I choose?</p>\n",
            "last_activity_date": 1419426879,
            "question_id": 9589419,
            "score": 125,
            "tags": [
                "javascript",
                "knockout.js"
            ],
            "title": "Difference between knockout View Models declared as object literals vs functions"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>I haven't tested this, but this might work for you.</p>\n\n<pre><code>$(\"select#my-select option\")\n   .each(function() { this.selected = (this.text == myVal); });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<p>Get the children of the select box; loop through them; when you have found the one you want, set it as the selected option; return false to stop looping.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Given this HTML:</p>\n\n<pre><code>&lt;select&gt;\n    &lt;option value=\"0\"&gt;One&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Two&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p><strong>Select by description for jQuery v1.6+:</strong></p>\n\n<pre><code>var text1 = 'Two';\n$(\"select option\").filter(function() {\n    //may want to use $.trim in here\n    return $(this).text() == text1; \n}).prop('selected', true);\n</code></pre>\n\n<p><strong>Select by description for jQuery versions below 1.6 and greater than or equal to 1.4</strong>:\n<a href=\"http://stackoverflow.com/a/3644500/31532\">http://stackoverflow.com/a/3644500/31532</a></p>\n\n<pre><code>var text1 = 'Two';\n$(\"select option\").filter(function() {\n    //may want to use $.trim in here\n    return $(this).text() == text1; \n}).attr('selected', true);\n</code></pre>\n\n<p>Note that while this approach will work in versions that are above 1.6 but less than 1.9, it has been deprecated since 1.6. It <em><a href=\"http://stackoverflow.com/questions/14366220/optionselected-not-working-jquery-1-9\">will not work</a></em> in jQuery 1.9+.</p>\n\n<p><strong>Select by description for previous versions:</strong></p>\n\n<p><code>val()</code> should handle both cases. Are you not seeing it?</p>\n\n<p>Eg:</p>\n\n<pre><code>$('select').val('1'); // selects \"Two\"\n$('select').val('Two'); // also selects \"Two\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 546
                },
                {
                    "body": "<pre><code>$(\"#myselect option:contains('YourTextHere')\").val();\n</code></pre>\n\n<p>will return the value of the first option containing your text description. Tested this and works.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Try this...to select the option with text myText</p>\n\n<pre><code>$(\"#my-Select option[text=\" + myText +\"]\").attr(\"selected\",\"selected\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>take a look at the <a href=\"http://www.texotela.co.uk/code/jquery/select/\" rel=\"nofollow\">jquery selectedbox plugin</a> </p>\n\n<pre><code>selectOptions(value[, clear]): \n</code></pre>\n\n<p>Select options by value, using a string as the parameter <code>$(\"#myselect2\").selectOptions(\"Value 1\");</code>,  or a regular expression <code>$(\"#myselect2\").selectOptions(/^val/i);</code>. </p>\n\n<p>You can also clear already selected options: <code>$(\"#myselect2\").selectOptions(\"Value 2\", true);</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code> $(\"#Test\").find(\"option:contains('two')\").each(function(){\n     if( $(this).text() == 'two' ) {\n        $(this).attr(\"selected\",\"selected\");\n     }\n });\n</code></pre>\n\n<p>The if statement does a exact match with  \"two\" and \"two three\" will not be matched</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I had a problem with the examples above, and the problem was caused by the fact that my select box values are prefilled with fixed length strings of 6 characters, but the parameter being passed in wasn't fixed length.</p>\n\n<p>I have an rpad function which will right pad a string, to the length specified, and with the specified character.  So, after padding the parameter it works.</p>\n\n<pre><code>$('#wsWorkCenter').val(rpad(wsWorkCenter, 6, ' '));\n\n\nfunction rpad(pStr, pLen, pPadStr) {\nif (pPadStr == '') {pPadStr == ' '};\nwhile (pStr.length &lt; pLen)\n    pStr = pStr + pPadStr;\nreturn pStr; \n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Easiest way with 1.7+ is:</p>\n\n<pre><code>$(\"#myDropDown option:text=\" + myText +\"\").attr(\"selected\", \"selected\"); \n</code></pre>\n\n<p>1.9+</p>\n\n<pre><code>$(\"#myDropDown option:text=\" + myText +\"\").prop(\"selected\", \"selected\"); \n</code></pre>\n\n<p>Tested and works.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To avoid all jQuery version complications, I honestly recommend using one of these really simple javascript functions...</p>\n\n<pre><code>function setSelectByValue(eID,val)\n{ //Loop through sequentially//\n  var ele=document.getElementById(eID);\n  for(var ii=0; ii&lt;ele.length; ii++)\n    if(ele.options[ii].value==val) { //Found!\n      ele.options[ii].selected=true;\n      return true;\n    }\n  return false;\n}\n\nfunction setSelectByText(eID,text)\n{ //Loop through sequentially//\n  var ele=document.getElementById(eID);\n  for(var ii=0; ii&lt;ele.length; ii++)\n    if(ele.options[ii].text==text) { //Found!\n      ele.options[ii].selected=true;\n      return true;\n    }\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just on a side note. My selected value was not being set. And i had search all over the net. Actually i had to select a value after a call back from a web service, because i was getting data from it.</p>\n\n<pre><code>$(\"#SelectMonth option[value=\" + DataFromWebService + \"]\").attr('selected', 'selected'); \n$(\"#SelectMonth\").selectmenu('refresh', true);\n</code></pre>\n\n<p>So the refresh of the selector was was the only thing that i was missing.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found that by using <code>attr</code> you would end up with multiple options selected when you didn't want to - solution is to use <code>prop</code>:</p>\n\n<p><code>$(\"#myDropDown option:text=\" + myText +\"\").prop(\"selected\", \"selected\");</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know this is an old post, but I couldn't get it to select by text using jQuery 1.10.3 and the solutions above.\nI ended up using the following code (variation of spoulson's solution):</p>\n\n<pre><code>      var textToSelect = \"Hello World\";\n\n      $(\"#myDropDown option\").each(function (a, b) {\n            if ($(this).html() == textToSelect ) $(this).attr(\"selected\", \"selected\");\n        });\n</code></pre>\n\n<p>Hope it helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This line worked:</p>\n\n<pre><code>$(\"#myDropDown option:contains(myText)\").attr('selected', true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code> $('#theYear').on('change', function () {\n FY = $(this).find('option:selected').text();\n $('#theFolders').each(function () {\n     $('option:not(:contains(' + FY + '))', this).hide();\n });\n $('#theFolders').val(0);\n});\n\n$('#theYear').on('mousedown', function () {\n $('#theFolders option').show().find('option:contains(\"Select\")', this).attr('selected', 'selected');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Heres an easy option. Just set your list option then set its text as selected value:</p>\n\n<p>$(\"#ddlScheduleFrequency option\").selected(text(\"Select One...\"));</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a select control, and in a javascript variable I have a text string.</p>\n\n<p>Using jQuery I want to set the selected element of the select control to be the item with the text description I have (as opposed to the value, which I don't have).</p>\n\n<p>I know setting it by value is pretty trivial. e.g.</p>\n\n<pre><code>$(\"#my-select\").val(myVal);\n</code></pre>\n\n<p>But I'm a bit stumped on doing it via the text description. I guess there must be a way of getting the value out from the text description, but my brain is too Friday afternoon-ed to be able to work it out.</p>\n",
            "last_activity_date": 1423015740,
            "question_id": 496052,
            "score": 353,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery - setting the selected value of a select control via its text description"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p><code>localStorage</code> only supports strings. Use <code>JSON.stringify()</code> and <code>JSON.parse()</code>.</p>\n\n<pre><code>var names = [];\nnames[0] = prompt(\"New member name?\");\nlocalStorage[\"names\"] = JSON.stringify(names);\n\n//...\nvar storedNames = JSON.parse(localStorage[\"names\"]);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 402
                },
                {
                    "body": "<p>Use <code>JSON.stringify()</code> and <code>JSON.parse()</code> as suggested by no! This prevents the maybe rare but possible problem of a member name which includes the delimiter (e.g. member name <code>three|||bars</code>).</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Another solution would be to write a wrapper that store the array like this:</p>\n\n<pre><code>localStorage.setItem('names_length', names.length);\nlocalStorage.setItem('names_0', names[0]);\nlocalStorage.setItem('names_1', names[1]);\nlocalStorage.setItem('names_' + n, names[n]);\n</code></pre>\n\n<p>Removes the overhead of converting to JSON, but would be annoying if you need to remove elements, as you would have to re-index the array :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The <code>localStorage</code> and <code>sessionStorage</code> can only handle strings. You can extend the default storage-objects to handle arrays and objects. Just include this script and use the new methods:</p>\n\n<pre><code>Storage.prototype.setObj = function(key, obj) {\n    return this.setItem(key, JSON.stringify(obj))\n}\nStorage.prototype.getObj = function(key) {\n    return JSON.parse(this.getItem(key))\n}\n</code></pre>\n\n<p>Use <code>localStorage.setObj(key, value)</code> to save an array or object and <code>localStorage.getObj(key)</code> to retrieve it. The same methods work with the <code>sessionStorage</code> object.</p>\n\n<p>If you just use the new methods to access the storage, every value will be converted to a JSON-string before saving and parsed before it is returned by the getter.</p>\n\n<p><sub>Source: <a href=\"http://www.acetous.de/p/152\">http://www.acetous.de/p/152</a></sub></p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>The JSON approach works, on ie 7 you need json2.js, with it it works perfectly and despite the one comment saying otherwise there is localStorage on it. it really seems like the best solution with the least hassle. Of course one could write scripts to do essentially the same thing as json2 does but there is little point in that.</p>\n\n<p>at least with the following version string there is localStorage, but as said you need to include json2.js because that isn't included by the browser itself:\n4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; BRI/2; NP06; .NET4.0C; .NET4.0E; Zune 4.7)\n(I would have made this a comment on the reply, but can't).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Just created this:</p>\n\n<p><a href=\"https://gist.github.com/3854049\" rel=\"nofollow\">https://gist.github.com/3854049</a></p>\n\n<pre><code>//Setter\nStorage.setObj('users.albums.sexPistols',\"blah\");\nStorage.setObj('users.albums.sexPistols',{ sid : \"My Way\", nancy : \"Bitch\" });\nStorage.setObj('users.albums.sexPistols.sid',\"Other songs\");\n\n//Getters\nStorage.getObj('users');\nStorage.getObj('users.albums');\nStorage.getObj('users.albums.sexPistols');\nStorage.getObj('users.albums.sexPistols.sid');\nStorage.getObj('users.albums.sexPistols.nancy');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>If i didn't need localStorage, my code would look like this:</p>\n\n<pre><code>var names=new Array(); \nnames[0]=prompt(\"New member name?\");\n</code></pre>\n\n<p>This works, however I need to store this variable in localStorage and its proving quite stubborn. I've tried:</p>\n\n<pre><code>var localStorage[names]=new Array();\nlocalStorage.names[0]=prompt(\"New member name?\");\n</code></pre>\n\n<p>Where am I going wrong?</p>\n",
            "last_activity_date": 1405448408,
            "question_id": 3357553,
            "score": 190,
            "tags": [
                "javascript",
                "html",
                "arrays",
                "html5",
                "local-storage"
            ],
            "title": "how to store an Array in localStorage?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Google actually let the cat out of the bag on this one. They were using it for a while to access tracking cookies. It was fixed almost immediately by Apple =\\</p>\n\n<p>original <a href=\"http://online.wsj.com/article/SB10001424052970204880404577225380456599176.html?mod=WSJ_hp_LEFTTopStories\" rel=\"nofollow\">Wall Street Journal post</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I tricked Safari with a .htaccess:</p>\n\n<pre><code>#http://www.w3.org/P3P/validator.html\n&lt;IfModule mod_headers.c&gt;\nHeader set P3P \"policyref=\\\"/w3c/p3p.xml\\\", CP=\\\"NOI DSP COR NID CUR ADM DEV OUR BUS\\\"\"\nHeader set Set-Cookie \"test_cookie=1\"\n&lt;/IfModule&gt;\n</code></pre>\n\n<p>And it stopped working for me too. All my apps are losing the session in Safari and are redirecting out of Facebook. As I'm in a hurry to fix those apps, I'm currently searching for a solution. I'll keep you posted.</p>\n\n<p>Edit (2012-04-06): Apparently Apple \"fixed\" it with 5.1.4. I'm sure this is the reaction to the Google-thing: \"An issue existed in the enforcement of its cookie policy. Third-party websites could set cookies if the \"Block Cookies\" preference in Safari was set to the default setting of \"From third parties and advertisers\". <a href=\"http://support.apple.com/kb/HT5190\">http://support.apple.com/kb/HT5190</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You can resolve this issue by adding header as p3p policy..i had same issue on safari so after adding header on top of the files has resolved my problem.</p>\n\n<pre><code>&lt;?php\nheader('P3P:CP=\"IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT\"');\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -9
                },
                {
                    "body": "<p>You said you were willing to have your users click a button before the content loads. My solution was to have a button open a new browser window. That window sets a cookie for my domain, refreshes the opener and then closes.</p>\n\n<p>So your main script could look like:</p>\n\n<pre><code>&lt;?php if(count($_COOKIE) &gt; 0): ?&gt;\n&lt;!--Main Content Stuff--&gt;\n&lt;?php else: ?&gt;\n&lt;a href=\"/safari_cookie_fix.php\" target=\"_blank\"&gt;Click here to load content&lt;/a&gt;\n&lt;?php endif ?&gt;\n</code></pre>\n\n<p>Then safari_cookie_fix.php looks like:</p>\n\n<pre><code>&lt;?php\nsetcookie(\"safari_test\", \"1\");\n?&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Safari Fix&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"/libraries/prototype.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    document.observe('dom:loaded', function(){\n        window.opener.location.reload();\n        window.close();\n    })\n    &lt;/script&gt;\n    This window should close automatically\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I had the same problem and today I found a fix that works fine for me. If the user agent contains <code>Safari</code> and no cookies are set, I redirect the user to the OAuth Dialog:</p>\n\n<pre><code>&lt;?php if ( ! count($_COOKIE) &gt; 0 &amp;&amp; strpos($_SERVER['HTTP_USER_AGENT'], 'Safari')) { ?&gt;\n&lt;script type=\"text/javascript\"&gt;\n    window.top.location.href = 'https://www.facebook.com/dialog/oauth/?client_id=APP_ID&amp;redirect_uri=MY_TAB_URL&amp;scope=SCOPE';\n&lt;/script&gt;\n&lt;?php } ?&gt;\n</code></pre>\n\n<p>After authentication and asking for permissions the OAuth Dialog will redirect to my URI in the top location. So setting cookies is possible. For all of our canvas and page tab apps I have already included the following script:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    if (top.location.href==location.href) top.location.href = 'MY_TAB_URL';\n&lt;/script&gt;\n</code></pre>\n\n<p>So the user will be redirected again to the Facebook page tab with a <strong>valid cookie already set</strong> and the signed request is posted again.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I finally went for a similar solution to the one that Sascha provided, \nhowever with some little adjusting, since I'm setting the cookies explicitly in PHP:</p>\n\n<pre><code>// excecute this code if user has not authorized the application yet\n// $facebook object must have been created before\n\n$accessToken = $_COOKIE['access_token']\n\nif ( empty($accessToken) &amp;&amp; strpos($_SERVER['HTTP_USER_AGENT'], 'Safari') ) {\n\n    $accessToken = $facebook-&gt;getAccessToken();\n    $redirectUri = 'https://URL_WHERE_APP_IS_LOCATED?access_token=' . $accessToken;\n\n} else {\n\n    $redirectUri = 'https://apps.facebook.com/APP_NAMESPACE/';\n\n}\n\n// generate link to auth dialog\n$linkToOauthDialog = $facebook-&gt;getLoginUrl(\n    array(\n        'scope'         =&gt;  SCOPE_PARAMS,\n        'redirect_uri'  =&gt;  $redirectUri\n    )\n);\n\necho '&lt;script&gt;window.top.location.href=\"' . $linkToOauthDialog . '\";&lt;/script&gt;';\n</code></pre>\n\n<p>What this does is check if the cookie is available when the browser is safari.\nIn the next step, we are on the application domain, namely the URI provided as URL_WHERE_APP_IS_LOCATED above.</p>\n\n<pre><code>if (isset($_GET['accessToken'])) {\n\n    // cookie has a lifetime of only 10 seconds, so that after\n    // authorization it will disappear\n    setcookie(\"access_token\", $_GET['accessToken'], 10); \n\n} else {\n\n  // depending on your application specific requirements\n  // redirect, call or execute authorization code again\n  // with the cookie now set, this should return FB Graph results\n\n}\n</code></pre>\n\n<p>So after being redirecting to the application domain, a cookie is set explicitly, and I redirect the user to the authorization process. </p>\n\n<p>In my case (since I'm using CakePHP but it should work fine with any other MVC framework) I'm calling the login action again where the FB authorization is executed another time, and this time it succeeds due to the existing cookie.</p>\n\n<p>After having authorized the app once, I didn't have any more problems using the app with Safari (5.1.6)</p>\n\n<p>Hope that might help anyone.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Just wanted to leave a simple working solution here that <strong>does not require user interaction</strong>.</p>\n\n<p>As I stated in a <a href=\"http://www.digitalwks.com/blogs/diogo-raminhos/facebook-safari-session-problem-safari-iframe-set-cookie/\" rel=\"nofollow\">post I made</a>:</p>\n\n<p>Basically all you need to do is load your page on top.location, create the session and redirect it back to facebook.</p>\n\n<p>Add this code in the top of your <code>index.php</code> and set <code>$page_url</code> to your application final tab/app URL and you\u2019ll see your application will work without any problem.</p>\n\n<pre><code>&lt;?php\n    // START SAFARI SESSION FIX\n    session_start();\n    $page_url = \"http://www.facebook.com/pages/.../...?sk=app_...\";\n    if (isset($_GET[\"start_session\"]))\n        die(header(\"Location:\" . $page_url));\n\n    if (!isset($_GET[\"sid\"]))\n        die(header(\"Location:?sid=\" . session_id()));\n    $sid = session_id();\n    if (empty($sid) || $_GET[\"sid\"] != $sid):\n?&gt;\n   &lt;script&gt;\n        top.window.location=\"?start_session=true\";\n    &lt;/script&gt;\n&lt;?php\n    endif;\n    // END SAFARI SESSION FIX\n?&gt;\n</code></pre>\n\n<p>Note: This was made for facebook, but it would actually work within any other similar situations.</p>\n\n<hr>\n\n<h2>Edit 20-Dec-2012 - Maintaining Signed Request:</h2>\n\n<p>The above code does not maintain the requests post data, and you would loose the signed_request, if your application relies on signed request feel free to try the following code:</p>\n\n<p><strong>Note: This is still being tested properly and may be less stable than the first version.\nUse at your own risk / Feedback is appreciated.</strong></p>\n\n<p>(Thanks to <a href=\"http://stackoverflow.com/users/1427878/cbroe\">CBroe</a> for pointing me into the right direction here allowing to improve the solution)</p>\n\n<pre><code>// Start Session Fix\nsession_start();\n$page_url = \"http://www.facebook.com/pages/.../...?sk=app_...\";\nif (isset($_GET[\"start_session\"]))\n    die(header(\"Location:\" . $page_url));\n$sid = session_id();\nif (!isset($_GET[\"sid\"]))\n{\n    if(isset($_POST[\"signed_request\"]))\n       $_SESSION[\"signed_request\"] = $_POST[\"signed_request\"];\n    die(header(\"Location:?sid=\" . $sid));\n}\nif (empty($sid) || $_GET[\"sid\"] != $sid)\n    die('&lt;script&gt;top.window.location=\"?start_session=true\";&lt;/script&gt;');\n// End Session Fix\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Here's some code that I use. I found that if I set any cookie from my site, then cookies magically work in the iframe from then on.</p>\n\n<p><a href=\"http://developsocialapps.com/foundations-of-a-facebook-app-framework/\" rel=\"nofollow\">http://developsocialapps.com/foundations-of-a-facebook-app-framework/</a></p>\n\n<pre><code> if (isset($_GET['setdefaultcookie'])) {\n        // top level page, set default cookie then redirect back to canvas page\n        setcookie ('default',\"1\",0,\"/\");\n        $url = substr($_SERVER['REQUEST_URI'],strrpos($_SERVER['REQUEST_URI'],\"/\")+1);\n        $url = str_replace(\"setdefaultcookie\",\"defaultcookieset\",$url);\n        $url = $facebookapp-&gt;getCanvasUrl($url);\n        echo \"&lt;html&gt;\\n&lt;body&gt;\\n&lt;script&gt;\\ntop.location.href='\".$url.\"';\\n&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\";\n        exit();\n    } else if ((!isset($_COOKIE['default'])) &amp;&amp; (!isset($_GET['defaultcookieset']))) {\n        // no default cookie, so we need to redirect to top level and set\n        $url = $_SERVER['REQUEST_URI'];\n        if (strpos($url,\"?\") === false) $url .= \"?\";\n        else $url .= \"&amp;\";\n        $url .= \"setdefaultcookie=1\";\n        echo \"&lt;html&gt;\\n&lt;body&gt;\\n&lt;script&gt;\\ntop.location.href='\".$url.\"';\\n&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\";\n        exit();\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I recently hit the same issue on Safari. The solution I figured out is based on the Local Storage HTML5 API. Using Local Storage you could emulate cookies.</p>\n\n<p>Here's my blog post with details: <a href=\"http://log.scalemotion.com/2012/10/how-to-trick-safari-and-set-3rd-party.html\" rel=\"nofollow\">http://log.scalemotion.com/2012/10/how-to-trick-safari-and-set-3rd-party.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For my specific situation I resolved the problem by using window.postMessage() and eliminating any user interaction. Note that this will only work if you can somehow execute js in the parent window. Either by having it include a js from your domain, or if you have direct access to the source.</p>\n\n<p>In the iframe (domain-b) i check for the presence of a cookie and if it is not set will send a postMessage to the parent (domain-a). Eg;</p>\n\n<pre><code>if (navigator.userAgent.indexOf('Safari') != -1 &amp;&amp; navigator.userAgent.indexOf('Chrome') == -1\n    &amp;&amp; document.cookie.indexOf(\"safari_cookie_fix\") &lt; 0) {\n    window.parent.postMessage(JSON.stringify({ event: \"safariCookieFix\", data: {} }));\n}\n</code></pre>\n\n<p>Then in the parent window (domain-a) listen for the event.</p>\n\n<pre><code>if (typeof window.addEventListener !== \"undefined\") {\n    window.addEventListener(\"message\", messageReceived, false);\n}\n\nfunction messageReceived (e) {\n    var data;\n\n    if (e.origin !== \"http://www.domain-b.com\") {\n        return;\n    }\n\n    try {\n        data = JSON.parse(e.data);\n    }\n    catch (err) {\n        return;\n    }\n\n    if (typeof data !== \"object\" || typeof data.event !== \"string\" || typeof data.data === \"undefined\") {\n        return;\n    }\n\n    if (data.event === \"safariCookieFix\") {\n        window.location.href = e.origin + \"/safari/cookiefix\"; // Or whatever your url is\n        return;\n    }\n}\n</code></pre>\n\n<p>Finally on your server (http://www.domain-b.com/safari/cookiefix) you set the cookie and redirect back to where the user came from. Below example is using ASP.NET MVC</p>\n\n<pre><code>public class SafariController : Controller\n{\n    [HttpGet]\n    public ActionResult CookieFix()\n    {\n        Response.Cookies.Add(new HttpCookie(\"safari_cookie_fix\", \"1\"));\n\n        return Redirect(Request.UrlReferrer != null ? Request.UrlReferrer.OriginalString : \"http://www.domain-a.com/\");\n    }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In your Ruby on Rails controller you can use:</p>\n\n<pre><code>private\n\nbefore_filter :safari_cookie_fix\n\ndef safari_cookie_fix\n  user_agent = UserAgent.parse(request.user_agent) # Uses useragent gem!\n  if user_agent.browser == 'Safari' # we apply the fix..\n    return if session[:safari_cookie_fixed] # it is already fixed.. continue\n    if params[:safari_cookie_fix].present? # we should be top window and able to set cookies.. so fix the issue :)\n      session[:safari_cookie_fixed] = true\n      redirect_to params[:return_to]\n    else\n      # Redirect the top frame to your server..\n      render :text =&gt; \"&lt;script&gt;alert('start redirect');top.window.location='?safari_cookie_fix=true&amp;return_to=#{set_your_return_url}';&lt;/script&gt;\"\n    end\n  end\nend\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I had this problem on devices running iOS. I made a shop that is embeddable in a normal website using an iframe. Somehow, on every pageload the user got a new sessionid, resulting in users getting stuck halfway the process because some values weren't present in the session.</p>\n\n<p>I tried some of the solutions given on this page, but popups don't work very well on an iPad and I needed the most transparent solution.</p>\n\n<p>I resolved it using a redirect. The website that embeds my site must first redirect the user to my site, so the <em>top</em> frame contains the url to my site, where I set a cookie and redirect the user to the proper page on the website that embeds my site, that is passed through in the url.</p>\n\n<p><strong>Example</strong></p>\n\n<p>Remote website redirects user to</p>\n\n<pre><code>http://clientname.example.com/init?redir=http://www.domain.com/shop/frame\n</code></pre>\n\n<p>init.php</p>\n\n<pre><code>// set a cookie for a year\nsetcookie('initialized','1',time() + 3600 * 24 * 365, '/', '.domain.com', false, false);\nheader('location: ' . $_GET['redir']);\ndie;\n</code></pre>\n\n<p>The user ends up on <code>http://www.domain.com/shop/frame</code> where my site is embedded, storing sessions as it should and eating cookies.</p>\n\n<p>Hope this helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I decided to get rid of the <code>$_SESSION</code> variable all together &amp; wrote a wrapper around memcache to mimic the session.</p>\n\n<p>Check <a href=\"https://github.com/manpreetssethi/utils/blob/master/Session_manager.php\" rel=\"nofollow\">https://github.com/manpreetssethi/utils/blob/master/Session_manager.php</a></p>\n\n<p>Use-case: The moment a user lands on the app, store the signed request using the Session_manager and since it's in the cache, you may access it on any page henceforth.</p>\n\n<p>Note: This will not work when browsing privately in Safari since the session_id resets every time the page reloads. (Stupid Safari)</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Let me share my fix in ASP.NET MVC 4. The main idea like in correct answer for PHP.\nThe next code added in main Layout in header near scripts section:</p>\n\n<pre><code>@if (Request.Browser.Browser==\"Safari\")\n{\n    string pageUrl = Request.Url.GetLeftPart(UriPartial.Path);\n    if (Request.Params[\"safarifix\"] != null &amp;&amp; Request.Params[\"safarifix\"] == \"doSafariFix\")\n    {\n        Session[\"IsActiveSession\"] = true;\n        Response.Redirect(pageUrl);\n        Response.End();\n    }\n        else if(Session[\"IsActiveSession\"]==null)\n    {\n        &lt;script&gt;top.window.location = \"?safarifix=doSafariFix\";&lt;/script&gt;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I used modified (added signed_request param to the link) Whiteagle's trick and it worked ok for safari, but IE is constantly refreshing the page in that case. So my solution for safari and internet explorer is:</p>\n\n<pre><code>$fbapplink = 'https://apps.facebook.com/[appnamespace]/';\n$isms = stripos($_SERVER['HTTP_USER_AGENT'], 'msie') !== false;\n\n// safari fix\nif(! $isms  &amp;&amp; !isset($_SESSION['signed_request'])) {\n\n    if (isset($_GET[\"start_session\"])) {\n        $_SESSION['signed_request'] = $_GET['signed_request'];\n        die(header(\"Location:\" . $fbapplink ));\n\n    }\n    if (!isset($_GET[\"sid\"])) {\n        die(header(\"Location:?sid=\" . session_id() . '&amp;signed_request='.$_REQUEST['signed_request']));\n    }\n    $sid = session_id();\n    if (empty($sid) || $_GET[\"sid\"] != $sid) {\n    ?&gt;\n    &lt;script&gt;\n        top.window.location=\"?start_session=true\";\n    &lt;/script&gt;\n    &lt;?php\n    exit;\n    }\n}\n\n// IE fix\nheader('P3P: CP=\"CAO PSA OUR\"');\nheader('P3P: CP=\"HONK\"');\n\n\n.. later in the code\n\n$sr = $_REQUEST['signed_request'];\nif($sr) {\n        $_SESSION['signed_request'] = $sr;\n} else {\n        $sr = $_SESSION['signed_request'];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A slightly simper version in PHP of what others have posted:</p>\n\n<pre><code>if (!isset($_COOKIE, $_COOKIE['PHPSESSID'])) {\n    print '&lt;script&gt;top.window.location=\"https://example.com/?start_session=true\";&lt;/script&gt;';\n    exit();\n}\n\nif (isset($_GET['start_session'])) {\n    header(\"Location: https://apps.facebook.com/YOUR_APP_ID/\");\n    exit();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This solution applies in some cases - if possible:</p>\n\n<p>If the iframe content page uses a subdomain of the page containing the iframe, the cookie is no longer blocked. </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>So this is the umteenth revenge of the \"how do I get 3rd party cookies to work in Safari\" question but I'm asking again because I think the playing field has changed, perhaps after February 2012. One of the standard tricks to get 3rd party cookies in Safari was as follows: use some javascript to POST to a hidden iframe. It (used to) trick Safari into thinking that the user had interacted with the 3rd party content and so then allow cookies to be set.</p>\n\n<p>I <em>think</em> this loophole has been closed in the wake of the mild scandal where it was revealed that Google was using that trick with its ads. At the very least, while using this trick I have been completely unable to set cookies in Safari. I unearthed some random internet postings that claimed that Apple was working on closing the loophole but I haven't found any official word.</p>\n\n<p>As a fallback I even tried redesigning the main third party frame so that you had to click on a button before the content would load but even that level of direct interaction was not enough to melt Safari's cold cold heart.</p>\n\n<p>So does anyone know for certain if Safari has indeed closed this loophole? If so, are there other workarounds (other than manually including a session ID in every request)?</p>\n",
            "last_activity_date": 1425045134,
            "question_id": 9930671,
            "score": 94,
            "tags": [
                "javascript",
                "facebook",
                "iframe",
                "safari"
            ],
            "title": "Safari 3rd party cookie iframe trick no longer working?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>If you want something using jQuery you might want to look into the <em><a href=\"http://malsup.com/jquery/cycle/\" rel=\"nofollow\">jQuery Cycle Plugin, demo scrollRight</a></em> (bottom-right example)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can use jQuery's <a href=\"http://api.jquery.com/attr/\">attr()</a> function.  For example, if you img tag has an id attribute of 'my_image':</p>\n\n<pre><code>&lt;img id=\"my_image\" src=\"first.jpg\"/&gt;\n</code></pre>\n\n<p>Then you can change the src in jQuery by:</p>\n\n<pre><code>$(\"#my_image\").attr(\"src\",\"second.jpg\");\n</code></pre>\n\n<p>To attach this to an onclick event, you could write:</p>\n\n<pre><code>$('#my_image').on({\n    'click': function(){\n        $('#my_image').attr('src','second.jpg');\n    }\n});\n</code></pre>\n\n<p>To rotate the image, you could do this:</p>\n\n<pre><code>$('img').on({\n    'click': function() {\n         var src = ($(this).attr('src') === 'img1_on.jpg')\n            ? 'img2_on.jpg'\n            : 'img1_on.jpg';\n         $(this).attr('src', src);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 714
                },
                {
                    "body": "<p>I'll show you how to change the image <code>src</code>, so that when you click an image it rotates through all the images that are in your HTML (in your <code>d1</code> id and <code>c1</code> class specifically)... whether you have 2 <strong>or more images</strong> in your HTML.</p>\n\n<p>I'll also show you how to clean up the page after the document is ready, so that only one image is displayed initially.</p>\n\n<p><strong>The full code</strong></p>\n\n<pre><code>$(function() {\n\n    var $images = $(\"#d1 &gt; .c1 &gt; a\").clone();  \n\n    var $length = $images.length;\n    var $imgShow = 0;\n\n    $(\"#d1 &gt; .c1\").html( $(\"#d1 &gt; .c1 &gt; a:first\") );  \n\n    $(\"#d1 &gt; .c1 &gt; a\").click(function(event) { \n\n        $(this).children().attr(\"src\", \n                        $(\"img\", $images).eq(++$imgShow % $length).attr(\"src\") );\n        event.preventDefault();\n\n    });\n});\n</code></pre>\n\n<p><strong>The breakdown</strong></p>\n\n<ol>\n<li><p>Create a copy of the links containing the images (note: you could also make use of the href attribute of the links for added functionality... for example <strong><a href=\"http://jsfiddle.net/NHASn/\">display the working link below each image</a></strong>):</p>\n\n<pre><code>    var $images = $(\"#d1 &gt; .c1 &gt; a\").clone();  ;\n</code></pre></li>\n<li><p>Check how many images were in the HTML and create a variable to track which image is being shown:</p>\n\n<pre><code>var $length = $images.length;\nvar $imgShow = 0;\n</code></pre></li>\n<li><p>Modify the document's HTML so that <strong>only</strong> the first image is being shown. Delete all the other images.</p>\n\n<pre><code>$(\"#d1 &gt; .c1\").html( $(\"#d1 &gt; .c1 &gt; a:first\") ); \n</code></pre></li>\n<li><p>Bind a function to handle when the image link is clicked.</p>\n\n<pre><code>    $(\"#d1 &gt; .c1 &gt; a\").click(function(event) { \n        $(this).children().attr(\"src\", $(\"img\", $images).eq(++$imgShow % $length).attr(\"src\") );\n        event.preventDefault();\n    });\n</code></pre>\n\n<p>The heart of the above code is using <code>++$imgShow % $length</code> to cycle through the jQuery object containing the images. <code>++$imgShow % $length</code> first increases our counter by one, then it mods that number with how many images there are. This will keep the resultant index cycling from <code>0</code> to <code>length-1</code>, which are the indices of the <code>$images</code> object. This means this code will work with 2, 3, 5, 10, or 100 images... cycling through each image in order and restarting at the first image when the last image is reached.</p>\n\n<p>Additionally, <strong><a href=\"http://api.jquery.com/attr/\"><code>.attr()</code></a></strong> is used to get and set the \"src\" attribute of the images. To pick elements from among the <code>$images</code> object, I set <code>$images</code> as the <strong><a href=\"http://api.jquery.com/jQuery/\">jQuery context</a></strong> using the form <code>$(selector, context)</code>. Then I use <strong><a href=\"http://api.jquery.com/eq/\"><code>.eq()</code></a></strong> to pick just the element with the specific index I'm interested in.</p></li>\n</ol>\n\n<hr>\n\n<h2><strong><a href=\"http://jsfiddle.net/YXXHy/\">jsFiddle example with 3 images</a></strong></h2>\n\n<p><br/>\nYou can also store the <code>src</code>s in an array.<br>\n<strong><a href=\"http://jsfiddle.net/wjapW/\">jsFiddle example with 3 images</a></strong></p>\n\n<p>And here's how to incorporate the hrefs from the anchor tags around the images:<br>\n<strong><a href=\"http://jsfiddle.net/ZRTDS/\">jsFiddle example</a></strong></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You can also do this with jQuery in this way:</p>\n\n<pre><code>$(\".c1 img\").click(function(){\n     $(this).attr('src','/new/image/src.jpg');   \n});\n</code></pre>\n\n<p>You can have a condition if there are multiple states for the image source.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>IF there is not only jQuery or other resource killing frameworks - many kb to download each time by each user just for a simple trick - but also native JavaScript(!):</p>\n\n<pre><code>&lt;img src=\"img1_on.jpg\" \n    onclick=\"this.src=this.src.match(/_on/)?'img1_off.jpg':'img1_on.jpg';\"&gt;\n&lt;img src=\"img2_on.jpg\" \n    onclick=\"this.src=this.src.match(/_on/)?'img2_off.jpg':'img2_on.jpg';\"&gt;\n</code></pre>\n\n<p>This can be written general and more elegant:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction switchImg(img){\n    img.src = img.src.match(/_on/) ? \n        img.src.replace(/_on/, \"_off\") : \n        img.src.replace(/_off/, \"_on\");\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"img1_on.jpg\" onclick=\"switchImg(this)\"&gt;\n    &lt;img src=\"img2_on.jpg\" onclick=\"switchImg(this)\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>One of the common mistakes people do when change the image source is not waiting for image load to do afterward actions like maturing image size etc.\nYou will need to use jQuery <code>.load()</code> method to do stuff after image load.</p>\n\n<pre><code>$('yourimageselector').attr('src', 'newsrc').load(function(){\n    this.width;   // Note: $(this).width() will not work for in memory images\n\n});\n</code></pre>\n\n<p>Reason for editing: <a href=\"http://stackoverflow.com/a/670433/561545\">http://stackoverflow.com/a/670433/561545</a></p>\n",
                    "is_accepted": false,
                    "score": 26
                }
            ],
            "body": "<p>My DOM looks like this:</p>\n\n<pre><code>&lt;div id=\"d1\"&gt;\n   &lt;div class=\"c1\"&gt;\n            &lt;a href=\"#\"&gt;&lt;img src=\"img1_on.gif\"&gt;&lt;/a&gt;\n            &lt;a href=\"#\"&gt;&lt;img src=\"img2_on.gif\"&gt;&lt;/a&gt;\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>When someone clicks on an image, I want the image src to change to &lt;img src=\"imgx_off.gif\"> where x represents the image number 1 or 2.</p>\n\n<p>Is this possible or do I have to use CSS to change the images?</p>\n",
            "last_activity_date": 1418768978,
            "question_id": 554273,
            "score": 262,
            "tags": [
                "javascript",
                "jquery",
                "image"
            ],
            "title": "Changing the image source using jQuery"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>That will work fine, as long as it's in a CSHTML page and not an external Javascript file.</p>\n\n<p>The Razor template engine doesn't care what it's outputting and does not differentiate between <code>&lt;script&gt;</code> or other tags.</p>\n\n<p>However, you need to encode your strings to prevent XSS attacks.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You're trying to jam a square peg in a round hole.</p>\n\n<p>Razor was intended as an Html-generating template language. You may very well get it to generate Javascript, but it wasn't designed for that.</p>\n\n<p>For instance: what if <code>Model.Title</code> contains an apostrophe? That would break your Javascript code, and Razor won't escape it correctly by default.</p>\n\n<p>It would probably be more appropriate to use a String generator in a helper function. There will likely be fewer unintended consequences of that approach.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Use the <code>&lt;text&gt;</code> pseudo-element, as described <a href=\"http://stackoverflow.com/questions/4045308/razor-syntax-and-javascript/4047382#4047382\">here</a>, to force the razor compiler back into content mode:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n//some javascrpt code here to display map etc\n\n\n//now add markers\n @foreach (var item in Model) {\n    &lt;text&gt;\n      var markerlatLng = new google.maps.LatLng(@(Model.Latitude), @(Model.Longitude));\n      var title = '@(Model.Title)';\n      var description = '@(Model.Description)';\n      var contentString = '&lt;h3&gt;' + title + '&lt;/h3&gt;' + '&lt;p&gt;' + description + '&lt;/p&gt;'\n\n      var infowindow = new google.maps.InfoWindow({\n          content: contentString\n      });\n\n      var marker = new google.maps.Marker({\n          position: latLng,\n          title: title,\n          map: map,\n          draggable: false\n      });\n\n      google.maps.event.addListener(marker, 'click', function () {\n          infowindow.open(map, marker);\n      });\n\n   &lt;/text&gt;\n      }\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p><a href=\"http://weblogs.asp.net/scottgu/archive/2010/12/15/asp-net-mvc-3-razor-s-and-lt-text-gt-syntax.aspx\">Scott Guthrie recently posted</a> about <code>@:</code> syntax in Razor, which is slightly less clunky than the <code>&lt;text&gt;</code> tag if you just have one or two lines of javascript code to add. The following approach would probably be preferable because it reduces the size of the generated HTML. (You could even move the addMarker function to a static, cached javascript file to further reduce the size):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n//some javascript code here to display map etc\n...\n//declare addMarker function\nfunction addMarker(latitude, longitude, title, description, map)\n{\n      var latLng = new google.maps.LatLng(latitude, longitude);\n      var contentString = '&lt;h3&gt;' + title + '&lt;/h3&gt;' + '&lt;p&gt;' + description + '&lt;/p&gt;';\n\n      var infowindow = new google.maps.InfoWindow({\n          content: contentString\n      });\n\n      var marker = new google.maps.Marker({\n          position: latLng,\n          title: title,\n          map: map,\n          draggable: false\n      });\n\n      google.maps.event.addListener(marker, 'click', function () {\n          infowindow.open(map, marker);\n      });\n}\n\n//now add markers\n @foreach (var item in Model) {\n     @:addMarker(@item.Latitude, @item.Longitude, '@item.Title', '@item.Description', map);\n }\n&lt;/script&gt;\n</code></pre>\n\n<p><em>Updated the above code to make the call to <code>addMarker</code> more correct.</em></p>\n\n<p>To clarify, the <code>@:</code> forces Razor back into text mode, even though <code>addMarker</code> call looks a lot like C# code. Razor then picks up the <code>@item.Property</code> syntax to say that it should directly output the contents of those properties.</p>\n",
                    "is_accepted": true,
                    "score": 305
                },
                {
                    "body": "<p>What specific errors are you seeing?</p>\n\n<p>Something like this could work better:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n//now add markers\n @foreach (var item in Model) {\n    &lt;text&gt;\n      var markerlatLng = new google.maps.LatLng(@Model.Latitude, @Model.Longitude);\n      var title = '@(Model.Title)';\n      var description = '@(Model.Description)';\n      var contentString = '&lt;h3&gt;' + title + '&lt;/h3&gt;' + '&lt;p&gt;' + description + '&lt;/p&gt;'\n    &lt;/text&gt;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Note that you need the magical <code>&lt;text&gt;</code> tag after the <code>foreach</code> to indicate that Razor should switch into markup mode.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>One thing to add - I found that Razor syntax hilighter (and probably the compiler) interpret the position of the opening bracket differently:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var somevar = new Array();\n\n    @foreach (var item in items)\n    {  // &lt;----  placed on a separate line, NOT WORKING, HILIGHTS SYNTAX ERRORS\n        &lt;text&gt;\n        &lt;/text&gt;\n    }\n\n    @foreach (var item in items) {  // &lt;----  placed on the same line, WORKING !!!\n        &lt;text&gt;\n        &lt;/text&gt;\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I just wrote this helper function. Put it in <code>App_Code/JS.cshtml</code>:</p>\n\n<pre><code>@using System.Web.Script.Serialization\n@helper Encode(object obj)\n{\n    @(new HtmlString(new JavaScriptSerializer().Serialize(obj)));\n}\n</code></pre>\n\n<p>Then in your example, you can do something like this:</p>\n\n<pre><code>var title = @JS.Encode(Model.Title);\n</code></pre>\n\n<p>Notice how I don't put quotes around it. If the title already contains quotes, it won't explode. Seems to handle dictionaries and anonymous objects nicely too!</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I prefer \"&lt;!--\" \"-->\" like a \"text>\"</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//some javascript here     \n\n@foreach (var item in itens)\n{                 \n&lt;!--  \n   var title = @(item.name)\n    ...\n--&gt;\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>None of the solutions  above work correctly ...... I have tried all the way but it did not give me the expected result ...... At last I found that there are some errors in the code ... And the full code is given bellow</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n            var map = new google.maps.Map(document.getElementById('map'), {\n                zoom: 10,\n                center: new google.maps.LatLng(23.00, 90.00),\n                mapTypeId: google.maps.MapTypeId.ROADMAP\n            });\n\n\n\n            @foreach (var item in Model)\n            {\n                &lt;text&gt;\n      var markerlatLng = new google.maps.LatLng(@(item.LATITUDE), @(item.LONGITUDE));\n      var title = '@(item.EMP_ID)';\n      var description = '@(item.TIME)';\n      var contentString = '&lt;h3&gt;' + \"Employee \" +title+ \" was here at \"+description+ '&lt;/h3&gt;' + '&lt;p&gt;'+\" \"+ '&lt;/p&gt;'\n\n      var infowindow = new google.maps.InfoWindow({\n//          content: contentString\n      });\n\n\n      var marker = new google.maps.Marker({\n          position: markerlatLng,\n          title: title,\n          map: map,\n          draggable: false,\n          content: contentString\n      });\n\n      google.maps.event.addListener(marker, 'click', (function (marker) {\n              return function () {\n                  infowindow.setContent(marker.content);\n                  infowindow.open(map, marker);\n              }\n          })(marker));\n\n      &lt;/text&gt;\n\n            }\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is also one more option than @: and <code>&lt;text&gt;&lt;/text&gt;</code>.</p>\n\n<p>Using <code>&lt;script&gt;</code> block itself.</p>\n\n<p>When you need to do large chunks of javascript depending on razor-code, you can do it like this:</p>\n\n<pre><code>@if(Utils.FeatureEnabled(\"Feature\")) {\n    &lt;script&gt;\n        // if this feature is enabled\n    &lt;/script&gt;\n}\n\n&lt;script&gt;\n    // other javascript\n&lt;/script&gt;\n</code></pre>\n\n<p>Pros of this manner is that it doesn't mix javascript and razor too much, because mixing them a lot will cause readability issues eventually. Also large text blocks are not very readable either.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Hy, i finally found the solution (*.vbhtml):</p>\n\n<pre><code>function razorsyntax() {\n    /* Double */\n    @(MvcHtmlString.Create(\"var szam =\" &amp; mydoublevariable &amp; \";\"))\n    alert(szam);\n\n    /* String */\n    var str = '@stringvariable';\n    alert(str);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm adding the answer I finally got to, because I believe it is simple and a good straight-forward example:</p>\n\n<pre><code>&lt;script&gt;\n// This gets the username from the razor engine and puts it \n// in js to create a variable I can access from client side.\n// It's an odd workaraound, but it works.\n@{\n var outScript = \"var razorUserName = \" + \"\\\"\" + @User.Identity.Name + \"\\\"\";\n }\n@MvcHtmlString.Create(outScript);\n&lt;/script&gt;\n</code></pre>\n\n<p>This creates a script in your page at the location you place the code above which looks like the following:</p>\n\n<pre><code>&lt;script&gt;\n// This gets the username from the razor engine and puts it \n// in js to create a variable I can access from client side.\n// It's an odd workaraound, but it works.\n\nvar razorUserName = \"daylight\";\n&lt;/script&gt;\n</code></pre>\n\n<p>Now you have a global js variable named <code>razorUserName</code> which you can access and use on the client.\nThe razor engine has obviously extracted the value from <code>@User.Identity.Name</code> (server-side var) and put it in the code it writes to your script tag. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>is it possible or is there a workaround to use razor syntax within javacript that is in a view?(chtml).. I am trying to add markers to a google map...e.g I tried this but Im getting a ton of compilation errors:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n//some javascrpt code here to display map etc\n\n\n//now add markers\n @foreach (var item in Model) {\n\n      var markerlatLng = new google.maps.LatLng(@(Model.Latitude), @(Model.Longitude));\n      var title = '@(Model.Title)';\n      var description = '@(Model.Description)';\n      var contentString = '&lt;h3&gt;' + title + '&lt;/h3&gt;' + '&lt;p&gt;' + description + '&lt;/p&gt;'\n\n      var infowindow = new google.maps.InfoWindow({\n          content: contentString\n      });\n\n      var marker = new google.maps.Marker({\n          position: latLng,\n          title: title,\n          map: map,\n          draggable: false\n      });\n\n      google.maps.event.addListener(marker, 'click', function () {\n          infowindow.open(map, marker);\n      });\n\n\n      }\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1421306821,
            "question_id": 4599169,
            "score": 204,
            "tags": [
                "javascript",
                "asp.net-mvc",
                "razor"
            ],
            "title": "using razor within javascript"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>For GET parameters, you can grab them from <code>document.location.search</code>:</p>\n\n<pre><code>var $_GET = {};\n\ndocument.location.search.replace(/\\??(?:([^=]+)=([^&amp;]*)&amp;?)/g, function () {\n    function decode(s) {\n        return decodeURIComponent(s.split(\"+\").join(\" \"));\n    }\n\n    $_GET[decode(arguments[1])] = decode(arguments[2]);\n});\n\ndocument.write($_GET[\"test\"]);\n</code></pre>\n\n<p>For POST parameters, you can serialize the <code>$_POST</code> object in JSON format into a <code>&lt;script&gt;</code> tag:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar $_POST = &lt;?php echo json_encode($_POST); ?&gt;;\n\ndocument.write($_POST[\"test\"]);\n&lt;/script&gt;\n</code></pre>\n\n<p>While you're at it (doing things on server side), you might collect the GET parameters on PHP as well:</p>\n\n<pre><code>var $_GET = &lt;?php echo json_encode($_GET); ?&gt;;\n</code></pre>\n\n<p><strong>Note:</strong> You'll need PHP version 5 or higher to use the built-in <code>json_encode</code> function.</p>\n\n<hr>\n\n<p><strong>Update:</strong> Here's a more generic implementation:</p>\n\n<pre><code>function getQueryParams(qs) {\n    qs = qs.split(\"+\").join(\" \");\n    var params = {},\n        tokens,\n        re = /[?&amp;]?([^=]+)=([^&amp;]*)/g;\n\n    while (tokens = re.exec(qs)) {\n        params[decodeURIComponent(tokens[1])]\n            = decodeURIComponent(tokens[2]);\n    }\n\n    return params;\n}\n\nvar $_GET = getQueryParams(document.location.search);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 130
                },
                {
                    "body": "<p>There's a plugin for jQuery to get GET params called <a href=\"http://www.mathias-bank.de/2007/04/21/jquery-plugin-geturlparam-version-2/\">.getUrlParams</a> </p>\n\n<p>For POST the only solution is echoing the POST into a javascript variable using PHP, like Moran suggested.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>With any server-side language, you will have to emit the POST variables into javascript.</p>\n\n<p><strong>.NET</strong></p>\n\n<pre><code>var my_post_variable = '&lt;%= Request(\"post_variable\") %&gt;';\n</code></pre>\n\n<p>Just be careful of empty values. If the variable you attempt to emit is actually empty, you will get a javascript syntax error. If you know it's a string, you should wrap it in quotes. If it's an integer, you may want to test to see if it actually exists before writing the line to javascript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Thanks for all your replies, how varied! I also found this which did the trick:\n<a href=\"http://scripts.franciscocharrua.com/javascript-get-variables.php\" rel=\"nofollow\">http://scripts.franciscocharrua.com/javascript-get-variables.php</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's something to gather all the <code>GET</code> variables in a global object, a routine optimized over several years. Since the rise of jQuery, it now seems appropriate to store them in jQuery itself, am checking with John on a potential core implementation.</p>\n\n<pre><code>jQuery.extend({\n    'Q' : window.location.search.length &lt;= 1 ? {}\n        : function(a){\n            var i = a.length, \n                r = /%25/g,  // Ensure '%' is properly represented \n                h = {};      // (Safari auto-encodes '%', Firefox 1.5 does not)\n            while(i--) {\n                var p = a[i].split('=');\n                h[ p[0] ] = r.test( p[1] ) ? decodeURIComponent( p[1] ) : p[1];\n            }\n            return h;\n        }(window.location.search.substr(1).split('&amp;'))\n});\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>switch ($.Q.event) {\n    case 'new' :\n        // http://www.site.com/?event=new\n        $('#NewItemButton').trigger('click');\n        break;\n    default :\n}\n</code></pre>\n\n<p>Hope this helps. ;)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can try <a href=\"http://plugins.jquery.com/project/query-object\" rel=\"nofollow\">Query String Object</a> plugin for jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Or you can use this one <a href=\"http://plugins.jquery.com/project/parseQuery\">http://plugins.jquery.com/project/parseQuery</a>, it's smaller than most (minified 449 bytes), returns an object representing name-value pairs.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>jQuery plugins seem nice but what I needed is a quick js function to parse the get params.\nHere is what I have found.</p>\n\n<p><a href=\"http://www.bloggingdeveloper.com/post/JavaScript-QueryString-ParseGet-QueryString-with-Client-Side-JavaScript.aspx\" rel=\"nofollow\">http://www.bloggingdeveloper.com/post/JavaScript-QueryString-ParseGet-QueryString-with-Client-Side-JavaScript.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>why not use good old PHP?  for example, let us say we receive a GET parameter 'target':</p>\n\n<pre><code>function getTarget() {\n    var targetParam = \"&lt;?php  echo $_GET['target'];  ?&gt;\";\n    alert(targetParam);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just for the record, I wanted to know the answer to this question, so I used a PHP method:</p>\n\n<p></p>\n\n<pre><code>&lt;script&gt;\nvar jGets = new Array ();\n&lt;?\nif(isset($_GET)) {\n    foreach($_GET as $key =&gt; $val)\n        echo \"jGets[\\\"$key\\\"]=\\\"$val\\\";\\n\";\n}\n?&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>That way all my javascript/jquery that runs after this can access everything in the jGets.  Its an nice elegant solution I feel.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If your $_GET is multidimensional, this might be what you're wanting:</p>\n\n<pre><code>var $_GET = {};\ndocument.location.search.replace(/\\??(?:([^=]+)=([^&amp;]*)&amp;?)/g, function () {\n    function decode(s) {\n            return decodeURIComponent(s.split(\"+\").join(\" \"));\n    }\n\n    //handling for multidimensional arrays\n    if(decode(arguments[1]).indexOf(\"[]\") &gt; 0){\n        var newName = decode(arguments[1]).substring(0, decode(arguments[1]).length - 2);\n        if(typeof $_GET[newName] == 'undefined'){\n            $_GET[newName] = new Array();\n        }\n        $_GET[newName].push(decode(arguments[2]));\n    }else{\n        $_GET[decode(arguments[1])] = decode(arguments[2]);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My approach:</p>\n\n<pre><code>var urlParams;\n(window.onpopstate = function () {\nvar match,\n      pl     = /\\+/g,  Regex for replacing addition symbol with a space\n       search = /([^&amp;=]+)=?([^&amp;]*)/g,\n      decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n       query  = window.location.search.substring(1);\n   urlParams = {};\n   while (match = search.exec(query))\n    urlParams[decode(match[1])] = decode(match[2]);\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>simple, but yet usefull to get vars/values from URL:</p>\n\n<pre><code>function getUrlVars() {\n    var vars = [], hash, hashes = null;\n    if (window.location.href.indexOf(\"?\") &amp;&amp; window.location.href.indexOf(\"&amp;\")) {\n        hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    } else if (window.location.href.indexOf(\"?\")) {\n        hashes = window.location.href.slice(window.location.href.indexOf('?') + 1);\n    }\n    if (hashes != null) {\n        for (var i = 0; i &lt; hashes.length; i++) {\n            hash = hashes[i].split('=');\n            vars[hash[0]] = hash[1];\n        }\n    }\n    return vars;\n}\n</code></pre>\n\n<p>I found it somewhere on the internet, just fixed few bugs</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use following function:</p>\n\n<pre><code>var splitUrl = function() {\n    var vars = [], hash;\n    var url = document.URL.split('?')[0];\n    var p = document.URL.split('?')[1];\n    if(p != undefined){\n        p = p.split('&amp;');\n        for(var i = 0; i &lt; p.length; i++){\n            hash = p[i].split('=');\n            vars.push(hash[1]);\n            vars[hash[0]] = hash[1];\n        }\n    }\n    vars['url'] = url;\n    return vars;\n};\n</code></pre>\n\n<p>and access variables as <code>vars['index']</code> where <code>'index'</code> is name of the get variable.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I simply get <code>GET</code> and <code>POST</code> values with JQuery?</p>\n\n<p>What I want to do is something like this:</p>\n\n<pre><code>$('#container-1 &gt; ul').tabs().tabs('select', $_GET('selectedTabIndex'));\n</code></pre>\n",
            "last_activity_date": 1421166321,
            "question_id": 439463,
            "score": 76,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "how to get GET and POST variables with JQuery?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<pre><code>var newDateObj = new Date();\nnewDateObj.setTime(oldDateObj.getTime() + (30 * 60 * 1000));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>Maybe something like this?</p>\n\n<pre>\n\nvar d = new Date();\nvar v = new Date();\nv.setMinutes(d.getMinutes()+30);\n\n</pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>var d1 = new Date (),\n    d2 = new Date ( d1 );\nd2.setMinutes ( d1.getMinutes() + 30 );\nalert ( d2 );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 106
                },
                {
                    "body": "<p>This is like <a href=\"http://stackoverflow.com/a/1197939/18511\">chaos's answer</a>, but in one line:</p>\n\n<pre><code>var newDateObj = new Date(oldDateObj.getTime() + diff*60000);\n</code></pre>\n\n<p>Where <code>diff</code> is the difference in minutes you want from <code>oldDateObj</code>'s time. It can even be negative.</p>\n\n<p>Or as a reusable function, if you need to do this in multiple places:</p>\n\n<pre><code>function addMinutes(date, minutes) {\n    return new Date(date.getTime() + minutes*60000);\n}\n</code></pre>\n\n<hr>\n\n<h2>A word of caution</h2>\n\n<p>Do not use the above to try add days. For example:</p>\n\n<pre><code>addMinutes(myDate, 60*24); //DO NOT DO THIS\n</code></pre>\n\n<p>If the user observes daylight saving time, a day is not necessarily 24 hours long--there is one day a year that is only 23 hours long, and one day a year that is 25 hours long. For example, in most of the United States and Canada, 24 hours after midnight, Nov 2, 2014, is still Nov 2:</p>\n\n<pre><code>addMinutes(new Date(2014,10,2), 60*24); //prints 11pm on Nov 2, not 12am Nov 3!\n</code></pre>\n\n<p>Instead, here is a more generic version of this function that I wrote. The syntax is modeled after <a href=\"http://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html#function_date-add\">MySQL DATE_ADD</a> function.</p>\n\n<pre><code>function dateAdd(date, interval, units) {\n  var ret = new Date(date); //don't change original date\n  switch(interval.toLowerCase()) {\n    case 'year'   :  ret.setFullYear(ret.getFullYear() + units);  break;\n    case 'quarter':  ret.setMonth(ret.getMonth() + 3*units);  break;\n    case 'month'  :  ret.setMonth(ret.getMonth() + units);  break;\n    case 'week'   :  ret.setDate(ret.getDate() + 7*units);  break;\n    case 'day'    :  ret.setDate(ret.getDate() + units);  break;\n    case 'hour'   :  ret.setTime(ret.getTime() + units*3600000);  break;\n    case 'minute' :  ret.setTime(ret.getTime() + units*60000);  break;\n    case 'second' :  ret.setTime(ret.getTime() + units*1000);  break;\n    default       :  ret = undefined;  break;\n  }\n  return ret;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/rhq0Lma5/3/\">Working jsFiddle demo</a>.</p>\n\n<p>If you are doing a lot of date work, you may want to look into JavaScript date libraries like <a href=\"http://www.datejs.com/\">Datejs</a> or <a href=\"http://momentjs.com/\">Moment.js</a></p>\n",
                    "is_accepted": false,
                    "score": 363
                },
                {
                    "body": "<p>Just another option, which I wrote:</p>\n\n<p><a href=\"http://depressedpress.com/javascript-extensions/dp_dateextensions/\" rel=\"nofollow\">DP_DateExtensions Library</a></p>\n\n<p>It's overkill if this is all the date processing that you need, but it will do what you want.</p>\n\n<p>Supports date/time formatting, date math (add/subtract date parts), date compare, date parsing, etc. It's liberally open sourced.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var now = new Date();\nnow.setMinutes(now.getMinutes() + 30);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>This is what I do which seems to work quite well:</p>\n\n<pre><code>Date.prototype.addMinutes = function(minutes) {\n    var copiedDate = new Date(this.getTime());\n    return new Date(copiedDate.getTime() + minutes * 60000);\n}\n</code></pre>\n\n<p>Then you can just call this like this:</p>\n\n<pre><code>var now = new Date();\nconsole.log(now.addMinutes(50));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I always create 7 functions, to work with date in JS: addSeconds, addMinutes, addHours, addDays, addWeeks, addMonths, addYears.</p>\n\n<p>You can see an example here: <a href=\"http://jsfiddle.net/tiagoajacobi/YHA8x/\" rel=\"nofollow\">http://jsfiddle.net/tiagoajacobi/YHA8x/</a></p>\n\n<p>How to use:</p>\n\n<pre><code>var now = new Date();\nconsole.log(now.addWeeks(3));\n</code></pre>\n\n<p>This are the functions:</p>\n\n<pre><code>        Date.prototype.addSeconds = function(seconds) {\n            this.setSeconds(this.getSeconds() + seconds);\n            return this;\n        };\n\n        Date.prototype.addMinutes = function(minutes) {\n            this.setMinutes(this.getMinutes() + minutes);\n            return this;\n        };\n\n        Date.prototype.addHours = function(hours) {\n            this.setHours(this.getHours() + hours);\n            return this;\n        };\n\n        Date.prototype.addDays = function(days) {\n            this.setDate(this.getDate() + days);\n            return this;\n        };\n\n        Date.prototype.addWeeks = function(weeks) {\n            this.addDays(weeks*7);\n            return this;\n        };\n\n        Date.prototype.addMonths = function (months) {\n            var dt = this.getDate();\n\n            this.setMonth(this.getMonth() + months);\n            var currDt = this.getDate();\n\n            if (dt !== currDt) {  \n                this.addDays(-currDt);\n            }\n\n            return this;\n        };\n\n        Date.prototype.addYears = function(years) {\n            var dt = this.getDate();\n\n            this.setFullYear(this.getFullYear() + years);\n\n            var currDt = this.getDate();\n\n            if (dt !== currDt) {  \n                this.addDays(-currDt);\n            }\n\n            return this;\n        };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Good answer from Kip but try to use some brackets to indicate operator precedence:</p>\n\n<pre><code>var newDateObj = new Date(oldDateObj.getTime() + (diff*60000));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>For the lazy like myself:</p>\n\n<p>Kip's answer (from above) in coffeescript, using an \"enum\", and operating on the same object:</p>\n\n<pre><code>Date.UNIT =\n  YEAR: 0\n  QUARTER: 1\n  MONTH: 2\n  WEEK: 3\n  DAY: 4\n  HOUR: 5\n  MINUTE: 6\n  SECOND: 7\nDate::add = (unit, quantity) -&gt;\n  switch unit\n    when Date.UNIT.YEAR then @setFullYear(@getFullYear() + quantity)\n    when Date.UNIT.QUARTER then @setMonth(@getMonth() + (3 * quantity))\n    when Date.UNIT.MONTH then @setMonth(@getMonth() + quantity)\n    when Date.UNIT.WEEK then @setDate(@getDate() + (7 * quantity))\n    when Date.UNIT.DAY then @setDate(@getDate() + quantity)\n    when Date.UNIT.HOUR then @setTime(@getTime() + (3600000 * quantity))\n    when Date.UNIT.MINUTE then @setTime(@getTime() + (60000 * quantity))\n    when Date.UNIT.SECOND then @setTime(@getTime() + (1000 * quantity))\n    else throw new Error \"Unrecognized unit provided\"\n  @ # for chaining\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'd like to get a Date object which is 30 minutes later than another Date object.  How do I do it with JavaScript?</p>\n",
            "last_activity_date": 1424364247,
            "question_id": 1197928,
            "score": 241,
            "tags": [
                "javascript",
                "date",
                "date-manipulation"
            ],
            "title": "How to add 30 minutes to a JavaScript Date object?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You would have to post the file back to the server.  For security reasons jQuery (Javascript) doesn't have access to your file system.</p>\n\n<p>If you can use Java or Flash in the browser, you can check that way.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"http://markmail.org/message/oogbuxmqs2jfksc5\" rel=\"nofollow\">No it's possible</a>.</p>\n\n<p>But you can use Flash to upload the file, and <a href=\"http://livedocs.macromedia.com/flash/8/main/00002223.html\" rel=\"nofollow\">Flash <em>does</em> know how large\nthe file is</a>.</p>\n\n<p>But there is <a href=\"http://www.nabble.com/jQUpload---request-for-features-to8854416.html\" rel=\"nofollow\">a feature request</a> at JQUpload that you might want to check out.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It is not possible to upload files with jQuery or check local file size, the only way to know the size of the file (other than using Flash) is to upload it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can do this type of checking with Flash or Silverlight but not Javascript.  The javascript sandbox does not allow access to the file system.  The size check would need to be done server side after it has been uploaded.</p>\n\n<p>If you want to go the Silverlight/Flash route, you could check that if they are not installed to default to a regular file upload handler that uses the normal controls.  This way, if the do have Silverlight/Flash installed their experience will be a bit more rich.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You actually don't have access to filesystem (for example reading and writing local files), however, due to HTML5 File Api specification, there are some file properties that you do have access to, and the file size is one of them.</p>\n\n<p>For the HTML bellow</p>\n\n<pre><code>&lt;input type=\"file\" id=\"myFile\" /&gt;\n</code></pre>\n\n<p>try the following: </p>\n\n<pre><code>//binds to onchange event of your input field\n$('#myFile').bind('change', function() {\n\n  //this.files[0].size gets the size of your file.\n  alert(this.files[0].size);\n\n});\n</code></pre>\n\n<p>As it is a part of the HTML5 specification, it will only work for modern browsers (v10 required for IE) and I added <a href=\"http://felipe.sabino.me/javascript/2012/01/30/javascipt-checking-the-file-size/\">here</a> more details and links about other file information you should know: <a href=\"http://felipe.sabino.me/javascript/2012/01/30/javascipt-checking-the-file-size/\">http://felipe.sabino.me/javascript/2012/01/30/javascipt-checking-the-file-size/</a></p>\n\n<hr>\n\n<p><strong>Old browsers support</strong></p>\n\n<p>Be aware that old browsers will return a <code>null</code> value for the previous <code>this.files</code> call, so accessing <code>this.files[0]</code> will raise an exception and you should <a href=\"http://stackoverflow.com/a/20550591/429521\">check for File API support</a> before using it</p>\n",
                    "is_accepted": true,
                    "score": 123
                },
                {
                    "body": "<p>If you want to use jQuery's <code>validate</code> you can by creating this method:</p>\n\n<pre><code>$.validator.addMethod('filesize', function(value, element, param) {\n    // param = size (en bytes) \n    // element = element to validate (&lt;input&gt;)\n    // value = value of the element (file name)\n    return this.optional(element) || (element.files[0].size &lt;= param) \n});\n</code></pre>\n\n<p>You would use it:</p>\n\n<pre><code>$('#formid').validate({\n    rules: { inputimage: { required: true, accept: \"png|jpe?g|gif\", filesize: 1048576  }},\n    messages: { inputimage: \"File must be JPG, GIF or PNG, less than 1MB\" }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>This code:</p>\n\n<pre><code>$(\"#yourFileInput\")[0].files[0].size;\n</code></pre>\n\n<p>Returns the file size for an form input.</p>\n\n<p>On FF 3.6 and later this code should be:</p>\n\n<pre><code>$(\"#yourFileInput\")[0].files[0].fileSize;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I needed a solution to make it work across browsers. For modern browsers I used the HTML 5 solution suggested above. Fallback on the fact that when the request size is above a certain threshold you start to get 404 Not found on Ajax POST. I used the error callback on Ajax Post to warn the user about file size restrictions. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am posting my solution too, used for an ASP.NET <code>FileUpload</code> control. \nPerhaps someone will find it useful.</p>\n\n<pre><code>    $(function () {        \n    $('&lt;%= fileUploadCV.ClientID %&gt;').change(function () {\n\n        //because this is single file upload I use only first index\n        var f = this.files[0]\n\n        //here I CHECK if the FILE SIZE is bigger than 8 MB (numbers below are in bytes)\n        if (f.size &gt; 8388608 || f.fileSize &gt; 8388608)\n        {\n           //show an alert to the user\n           alert(\"Allowed file size exceeded. (Max. 8 MB)\")\n\n           //reset file upload control\n           this.value = null;\n        }\n    })\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a form with file upload capabilities and I would like to be able to have some nice client side error reporting if the file the user is trying to upload is too big, is there a way to check against file size with jQuery, either purely on the client or somehow posting the file back to the server to check?</p>\n",
            "last_activity_date": 1419413835,
            "question_id": 1601455,
            "score": 48,
            "tags": [
                "javascript",
                "jquery",
                "file-upload"
            ],
            "title": "How to check file input size with jQuery?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>From: <a href=\"http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\">http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html</a></p>\n\n<p>This is what you need :)</p>\n\n<p>The following code will return a JavaScript Object containing the URL parameters:</p>\n\n<pre><code>// Read a page's GET URL variables and return them as an associative array.\nfunction getUrlVars()\n{\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for(var i = 0; i &lt; hashes.length; i++)\n    {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars;\n}\n</code></pre>\n\n<p>For example, if you have the URL:</p>\n\n<pre><code>http://www.example.com/?me=myValue&amp;name2=SomeOtherValue\n</code></pre>\n\n<p>This code will return:</p>\n\n<pre><code>{\n    \"me\"    : \"myValue\",\n    \"name2\" : \"SomeOtherValue\"\n}\n</code></pre>\n\n<p>and you can do:</p>\n\n<pre><code>var me = getUrlVars()[\"me\"];\nvar name2 = getUrlVars()[\"name2\"];\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 154
                },
                {
                    "body": "<p>Have a look at this <a href=\"http://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144\">stackoverflow answer</a>.  You can use the method to  animate:</p>\n\n<p>ie:</p>\n\n<pre><code>var thequerystring = getParameterByName(\"location\");\n$('html,body').animate({scrollTop: $(\"div#\" + thequerystring).offset().top}, 500);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An easy way to do this with some jQuery and straight JS, just view your console in Chrome or Firefox to see the output...</p>\n\n<pre><code>  var queries = {};\n  $.each(document.location.search.substr(1).split('&amp;'),function(c,q){\n    var i = q.split('=');\n    queries[i[0].toString()] = i[1].toString();\n  });\n  console.log(queries);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>We do this way...</p>\n\n<pre><code>String.prototype.getValueByKey = function (k) {\n    var p = new RegExp('\\\\b' + k + '\\\\b', 'gi');\n    return this.search(p) != -1 ? decodeURIComponent(this.substr(this.search(p) + k.length + 1).substr(0, this.substr(this.search(p) + k.length + 1).search(/(&amp;|;|$)/))) : \"\";\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>location.search\n</code></pre>\n\n<p>that is all you need</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.location\">https://developer.mozilla.org/en-US/docs/DOM/window.location</a></p>\n",
                    "is_accepted": false,
                    "score": 55
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values\">How can I get query string values?</a>  </p>\n</blockquote>\n\n\n\n<p>I have the following URL:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>http://www.mysite.co.uk/?location=mylocation1\n</code></pre>\n\n<p>What I need is to get the value of <code>location</code> from the URL into a variable and then use it in a jQuery code:</p>\n\n<pre><code>var thequerystring = \"getthequerystringhere\"\n\n$('html,body').animate({scrollTop: $(\"div#\" + thequerystring).offset().top}, 500);\n</code></pre>\n\n<p>Does anyone know how to grab that value using JavaScript or jQuery?</p>\n",
            "last_activity_date": 1404387652,
            "question_id": 4656843,
            "score": 69,
            "tags": [
                "javascript",
                "jquery",
                "query-string"
            ],
            "title": "jquery get querystring from URL"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>The format for new RegExp is</p>\n\n<pre><code>RegExp(something, 'modifiers');\n</code></pre>\n\n<p>So you would want</p>\n\n<pre><code>accentsTidy = function(s){\n                        var r=s.toLowerCase();\n                        r = r.replace(new RegExp(\"\\\\s\", 'g'),\"\");\n                        r = r.replace(new RegExp(\"[\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5]\", 'g'),\"a\");\n                        r = r.replace(new RegExp(\"\u00e6\", 'g'),\"ae\");\n                        r = r.replace(new RegExp(\"\u00e7\", 'g'),\"c\");\n                        r = r.replace(new RegExp(\"[\u00e8\u00e9\u00ea\u00eb]\", 'g'),\"e\");\n                        r = r.replace(new RegExp(\"[\u00ec\u00ed\u00ee\u00ef]\", 'g'),\"i\");\n                        r = r.replace(new RegExp(\"\u00f1\", 'g'),\"n\");                            \n                        r = r.replace(new RegExp(\"[\u00f2\u00f3\u00f4\u00f5\u00f6]\", 'g'),\"o\");\n                        r = r.replace(new RegExp(\"\u0153\", 'g'),\"oe\");\n                        r = r.replace(new RegExp(\"[\u00f9\u00fa\u00fb\u00fc]\", 'g'),\"u\");\n                        r = r.replace(new RegExp(\"[\u00fd\u00ff]\", 'g'),\"y\");\n                        r = r.replace(new RegExp(\"\\\\W\", 'g'),\"\");\n                        return r;\n                };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>You can create regex's in multiple ways. Using the new <code>RegExp</code>-constructor:</p>\n\n<pre><code>var re = new RegExp(\"[a-z]\", \"ig\") //(string pattern, string modifiers)\n</code></pre>\n\n<p>Or using the regex literal notation:</p>\n\n<pre><code>var re = /[a-z]/ig; // /pattern/modifiers\n</code></pre>\n\n<p>You have mixed the two.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<hr>\n\n<pre><code>function removeAccents(strAccents){\n    strAccents = strAccents.split('');\n    strAccentsOut = new Array();\n    strAccentsLen = strAccents.length;\n    var accents = '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00d2\u00d3\u00d4\u00d5\u00d5\u00d6\u00d8\u00f2\u00f3\u00f4\u00f5\u00f6\u00f8\u00c8\u00c9\u00ca\u00cb\u00e8\u00e9\u00ea\u00eb\u00f0\u00c7\u00e7\u00d0\u00cc\u00cd\u00ce\u00cf\u00ec\u00ed\u00ee\u00ef\u00d9\u00da\u00db\u00dc\u00f9\u00fa\u00fb\u00fc\u00d1\u00f1\u0160\u0161\u0178\u00ff\u00fd\u017d\u017e';\n    var accentsOut = ['A','A','A','A','A','A','a','a','a','a','a','a','O','O','O','O','O','O','O','o','o','o','o','o','o','E','E','E','E','e','e','e','e','e','C','c','D','I','I','I','I','i','i','i','i','U','U','U','U','u','u','u','u','N','n','S','s','Y','y','y','Z','z'];\n    for (var y = 0; y &lt; strAccentsLen; y++) {\n        if (accents.indexOf(strAccents[y]) != -1) {\n            strAccentsOut[y] = accentsOut[accents.indexOf(strAccents[y])];\n        }\n        else\n            strAccentsOut[y] = strAccents[y];\n    }\n    strAccentsOut = strAccentsOut.join('');\n    return strAccentsOut;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Assuming you know what you're doing, I suspect IE6 is not interpreting the file's encoding correctly, and hence not recognising the non-ASCII characters in the file:</p>\n\n<ul>\n<li>Make sure the file is saved as UTF-8 (say)</li>\n<li>Use Fiddler or some other tool to check that the web server is sending the correct Content-Encoding HTTP header.</li>\n</ul>\n\n<p>(It \"smells\" wrong though, I'd look into doing the sorting, say on the server using something that's locale-aware... but anyway...) </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know it is \"cheating\" to do this on the server side, but last week I had a similar task in Javascript and I've introduced a simple java servlet and <a href=\"http://www.drillio.com/en/software-development/java/removing-accents-diacritics-in-any-language/\" rel=\"nofollow\">removed the accents in Java</a>. It was really fast :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found all these a little clumsy and I'm not too expert on regular expressions, so here's a simpler version. It would be quite easy to translate it to your favourite server-side language, assuming that the string already in Unicode:</p>\n\n<pre><code>// String containing replacement characters for stripping accents \nvar stripstring = \n    'AAAAAAACEEEEIIII'+\n    'DNOOOOO.OUUUUY..'+\n    'aaaaaaaceeeeiiii'+\n    'dnooooo.ouuuuy.y'+\n    'AaAaAaCcCcCcCcDd'+\n    'DdEeEeEeEeEeGgGg'+\n    'GgGgHhHhIiIiIiIi'+\n    'IiIiJjKkkLlLlLlL'+\n    'lJlNnNnNnnNnOoOo'+\n    'OoOoRrRrRrSsSsSs'+\n    'SsTtTtTtUuUuUuUu'+\n    'UuUuWwYyYZzZzZz.';\n\nfunction stripaccents(str){\n    var answer='';\n    for(var i=0;i&lt;str.length;i++){\n        var ch=str[i];\n        var chindex=ch.charCodeAt(0)-192;   // Index of character code in the strip string\n        if(chindex&gt;=0 &amp;&amp; chindex&lt;stripstring.length){\n            // Character is within our table, so we can strip the accent...\n            var outch=stripstring.charAt(chindex);\n            // ...unless it was shown as a '.'\n            if(outch!='.')ch=outch;\n        }\n        answer+=ch;\n    }\n    return answer;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A more complete version with case sensitive support, ligatures and whatnot.\nOriginal source at: <a href=\"http://web.archive.org/web/20120918093154/http://lehelk.com/2011/05/06/script-to-remove-diacritics/\">http://lehelk.com/2011/05/06/script-to-remove-diacritics/</a></p>\n\n<pre><code>var defaultDiacriticsRemovalMap = [\n    {'base':'A', 'letters':/[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g},\n    {'base':'AA','letters':/[\\uA732]/g},\n    {'base':'AE','letters':/[\\u00C6\\u01FC\\u01E2]/g},\n    {'base':'AO','letters':/[\\uA734]/g},\n    {'base':'AU','letters':/[\\uA736]/g},\n    {'base':'AV','letters':/[\\uA738\\uA73A]/g},\n    {'base':'AY','letters':/[\\uA73C]/g},\n    {'base':'B', 'letters':/[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g},\n    {'base':'C', 'letters':/[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g},\n    {'base':'D', 'letters':/[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g},\n    {'base':'DZ','letters':/[\\u01F1\\u01C4]/g},\n    {'base':'Dz','letters':/[\\u01F2\\u01C5]/g},\n    {'base':'E', 'letters':/[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g},\n    {'base':'F', 'letters':/[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g},\n    {'base':'G', 'letters':/[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g},\n    {'base':'H', 'letters':/[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g},\n    {'base':'I', 'letters':/[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g},\n    {'base':'J', 'letters':/[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g},\n    {'base':'K', 'letters':/[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g},\n    {'base':'L', 'letters':/[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g},\n    {'base':'LJ','letters':/[\\u01C7]/g},\n    {'base':'Lj','letters':/[\\u01C8]/g},\n    {'base':'M', 'letters':/[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g},\n    {'base':'N', 'letters':/[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g},\n    {'base':'NJ','letters':/[\\u01CA]/g},\n    {'base':'Nj','letters':/[\\u01CB]/g},\n    {'base':'O', 'letters':/[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g},\n    {'base':'OI','letters':/[\\u01A2]/g},\n    {'base':'OO','letters':/[\\uA74E]/g},\n    {'base':'OU','letters':/[\\u0222]/g},\n    {'base':'P', 'letters':/[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g},\n    {'base':'Q', 'letters':/[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g},\n    {'base':'R', 'letters':/[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g},\n    {'base':'S', 'letters':/[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g},\n    {'base':'T', 'letters':/[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g},\n    {'base':'TZ','letters':/[\\uA728]/g},\n    {'base':'U', 'letters':/[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g},\n    {'base':'V', 'letters':/[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g},\n    {'base':'VY','letters':/[\\uA760]/g},\n    {'base':'W', 'letters':/[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g},\n    {'base':'X', 'letters':/[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g},\n    {'base':'Y', 'letters':/[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g},\n    {'base':'Z', 'letters':/[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g},\n    {'base':'a', 'letters':/[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g},\n    {'base':'aa','letters':/[\\uA733]/g},\n    {'base':'ae','letters':/[\\u00E6\\u01FD\\u01E3]/g},\n    {'base':'ao','letters':/[\\uA735]/g},\n    {'base':'au','letters':/[\\uA737]/g},\n    {'base':'av','letters':/[\\uA739\\uA73B]/g},\n    {'base':'ay','letters':/[\\uA73D]/g},\n    {'base':'b', 'letters':/[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g},\n    {'base':'c', 'letters':/[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g},\n    {'base':'d', 'letters':/[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g},\n    {'base':'dz','letters':/[\\u01F3\\u01C6]/g},\n    {'base':'e', 'letters':/[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g},\n    {'base':'f', 'letters':/[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g},\n    {'base':'g', 'letters':/[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g},\n    {'base':'h', 'letters':/[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g},\n    {'base':'hv','letters':/[\\u0195]/g},\n    {'base':'i', 'letters':/[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g},\n    {'base':'j', 'letters':/[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g},\n    {'base':'k', 'letters':/[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g},\n    {'base':'l', 'letters':/[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g},\n    {'base':'lj','letters':/[\\u01C9]/g},\n    {'base':'m', 'letters':/[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g},\n    {'base':'n', 'letters':/[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g},\n    {'base':'nj','letters':/[\\u01CC]/g},\n    {'base':'o', 'letters':/[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g},\n    {'base':'oi','letters':/[\\u01A3]/g},\n    {'base':'ou','letters':/[\\u0223]/g},\n    {'base':'oo','letters':/[\\uA74F]/g},\n    {'base':'p','letters':/[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g},\n    {'base':'q','letters':/[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g},\n    {'base':'r','letters':/[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g},\n    {'base':'s','letters':/[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g},\n    {'base':'t','letters':/[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g},\n    {'base':'tz','letters':/[\\uA729]/g},\n    {'base':'u','letters':/[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g},\n    {'base':'v','letters':/[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g},\n    {'base':'vy','letters':/[\\uA761]/g},\n    {'base':'w','letters':/[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g},\n    {'base':'x','letters':/[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g},\n    {'base':'y','letters':/[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g},\n    {'base':'z','letters':/[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g}\n];\nvar changes;\nfunction removeDiacritics (str) {\n    if(!changes) {\n        changes = defaultDiacriticsRemovalMap;\n    }\n    for(var i=0; i&lt;changes.length; i++) {\n        str = str.replace(changes[i].letters, changes[i].base);\n    }\n    return str;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 80
                },
                {
                    "body": "<p>Here is a very fast script based on the Unicode standard, taken from here:\n<a href=\"http://semplicewebsites.com/removing-accents-javascript\" rel=\"nofollow\">http://semplicewebsites.com/removing-accents-javascript</a></p>\n\n<pre><code>var Latinise={};Latinise.latin_map={\"\u00c1\":\"A\",\"\u0102\":\"A\",\"\u1eae\":\"A\",\"\u1eb6\":\"A\",\"\u1eb0\":\"A\",\"\u1eb2\":\"A\",\"\u1eb4\":\"A\",\"\u01cd\":\"A\",\"\u00c2\":\"A\",\"\u1ea4\":\"A\",\"\u1eac\":\"A\",\"\u1ea6\":\"A\",\"\u1ea8\":\"A\",\"\u1eaa\":\"A\",\"\u00c4\":\"A\",\"\u01de\":\"A\",\"\u0226\":\"A\",\"\u01e0\":\"A\",\"\u1ea0\":\"A\",\"\u0200\":\"A\",\"\u00c0\":\"A\",\"\u1ea2\":\"A\",\"\u0202\":\"A\",\"\u0100\":\"A\",\"\u0104\":\"A\",\"\u00c5\":\"A\",\"\u01fa\":\"A\",\"\u1e00\":\"A\",\"\u023a\":\"A\",\"\u00c3\":\"A\",\"\ua732\":\"AA\",\"\u00c6\":\"AE\",\"\u01fc\":\"AE\",\"\u01e2\":\"AE\",\"\ua734\":\"AO\",\"\ua736\":\"AU\",\"\ua738\":\"AV\",\"\ua73a\":\"AV\",\"\ua73c\":\"AY\",\"\u1e02\":\"B\",\"\u1e04\":\"B\",\"\u0181\":\"B\",\"\u1e06\":\"B\",\"\u0243\":\"B\",\"\u0182\":\"B\",\"\u0106\":\"C\",\"\u010c\":\"C\",\"\u00c7\":\"C\",\"\u1e08\":\"C\",\"\u0108\":\"C\",\"\u010a\":\"C\",\"\u0187\":\"C\",\"\u023b\":\"C\",\"\u010e\":\"D\",\"\u1e10\":\"D\",\"\u1e12\":\"D\",\"\u1e0a\":\"D\",\"\u1e0c\":\"D\",\"\u018a\":\"D\",\"\u1e0e\":\"D\",\"\u01f2\":\"D\",\"\u01c5\":\"D\",\"\u0110\":\"D\",\"\u018b\":\"D\",\"\u01f1\":\"DZ\",\"\u01c4\":\"DZ\",\"\u00c9\":\"E\",\"\u0114\":\"E\",\"\u011a\":\"E\",\"\u0228\":\"E\",\"\u1e1c\":\"E\",\"\u00ca\":\"E\",\"\u1ebe\":\"E\",\"\u1ec6\":\"E\",\"\u1ec0\":\"E\",\"\u1ec2\":\"E\",\"\u1ec4\":\"E\",\"\u1e18\":\"E\",\"\u00cb\":\"E\",\"\u0116\":\"E\",\"\u1eb8\":\"E\",\"\u0204\":\"E\",\"\u00c8\":\"E\",\"\u1eba\":\"E\",\"\u0206\":\"E\",\"\u0112\":\"E\",\"\u1e16\":\"E\",\"\u1e14\":\"E\",\"\u0118\":\"E\",\"\u0246\":\"E\",\"\u1ebc\":\"E\",\"\u1e1a\":\"E\",\"\ua76a\":\"ET\",\"\u1e1e\":\"F\",\"\u0191\":\"F\",\"\u01f4\":\"G\",\"\u011e\":\"G\",\"\u01e6\":\"G\",\"\u0122\":\"G\",\"\u011c\":\"G\",\"\u0120\":\"G\",\"\u0193\":\"G\",\"\u1e20\":\"G\",\"\u01e4\":\"G\",\"\u1e2a\":\"H\",\"\u021e\":\"H\",\"\u1e28\":\"H\",\"\u0124\":\"H\",\"\u2c67\":\"H\",\"\u1e26\":\"H\",\"\u1e22\":\"H\",\"\u1e24\":\"H\",\"\u0126\":\"H\",\"\u00cd\":\"I\",\"\u012c\":\"I\",\"\u01cf\":\"I\",\"\u00ce\":\"I\",\"\u00cf\":\"I\",\"\u1e2e\":\"I\",\"\u0130\":\"I\",\"\u1eca\":\"I\",\"\u0208\":\"I\",\"\u00cc\":\"I\",\"\u1ec8\":\"I\",\"\u020a\":\"I\",\"\u012a\":\"I\",\"\u012e\":\"I\",\"\u0197\":\"I\",\"\u0128\":\"I\",\"\u1e2c\":\"I\",\"\ua779\":\"D\",\"\ua77b\":\"F\",\"\ua77d\":\"G\",\"\ua782\":\"R\",\"\ua784\":\"S\",\"\ua786\":\"T\",\"\ua76c\":\"IS\",\"\u0134\":\"J\",\"\u0248\":\"J\",\"\u1e30\":\"K\",\"\u01e8\":\"K\",\"\u0136\":\"K\",\"\u2c69\":\"K\",\"\ua742\":\"K\",\"\u1e32\":\"K\",\"\u0198\":\"K\",\"\u1e34\":\"K\",\"\ua740\":\"K\",\"\ua744\":\"K\",\"\u0139\":\"L\",\"\u023d\":\"L\",\"\u013d\":\"L\",\"\u013b\":\"L\",\"\u1e3c\":\"L\",\"\u1e36\":\"L\",\"\u1e38\":\"L\",\"\u2c60\":\"L\",\"\ua748\":\"L\",\"\u1e3a\":\"L\",\"\u013f\":\"L\",\"\u2c62\":\"L\",\"\u01c8\":\"L\",\"\u0141\":\"L\",\"\u01c7\":\"LJ\",\"\u1e3e\":\"M\",\"\u1e40\":\"M\",\"\u1e42\":\"M\",\"\u2c6e\":\"M\",\"\u0143\":\"N\",\"\u0147\":\"N\",\"\u0145\":\"N\",\"\u1e4a\":\"N\",\"\u1e44\":\"N\",\"\u1e46\":\"N\",\"\u01f8\":\"N\",\"\u019d\":\"N\",\"\u1e48\":\"N\",\"\u0220\":\"N\",\"\u01cb\":\"N\",\"\u00d1\":\"N\",\"\u01ca\":\"NJ\",\"\u00d3\":\"O\",\"\u014e\":\"O\",\"\u01d1\":\"O\",\"\u00d4\":\"O\",\"\u1ed0\":\"O\",\"\u1ed8\":\"O\",\"\u1ed2\":\"O\",\"\u1ed4\":\"O\",\"\u1ed6\":\"O\",\"\u00d6\":\"O\",\"\u022a\":\"O\",\"\u022e\":\"O\",\"\u0230\":\"O\",\"\u1ecc\":\"O\",\"\u0150\":\"O\",\"\u020c\":\"O\",\"\u00d2\":\"O\",\"\u1ece\":\"O\",\"\u01a0\":\"O\",\"\u1eda\":\"O\",\"\u1ee2\":\"O\",\"\u1edc\":\"O\",\"\u1ede\":\"O\",\"\u1ee0\":\"O\",\"\u020e\":\"O\",\"\ua74a\":\"O\",\"\ua74c\":\"O\",\"\u014c\":\"O\",\"\u1e52\":\"O\",\"\u1e50\":\"O\",\"\u019f\":\"O\",\"\u01ea\":\"O\",\"\u01ec\":\"O\",\"\u00d8\":\"O\",\"\u01fe\":\"O\",\"\u00d5\":\"O\",\"\u1e4c\":\"O\",\"\u1e4e\":\"O\",\"\u022c\":\"O\",\"\u01a2\":\"OI\",\"\ua74e\":\"OO\",\"\u0190\":\"E\",\"\u0186\":\"O\",\"\u0222\":\"OU\",\"\u1e54\":\"P\",\"\u1e56\":\"P\",\"\ua752\":\"P\",\"\u01a4\":\"P\",\"\ua754\":\"P\",\"\u2c63\":\"P\",\"\ua750\":\"P\",\"\ua758\":\"Q\",\"\ua756\":\"Q\",\"\u0154\":\"R\",\"\u0158\":\"R\",\"\u0156\":\"R\",\"\u1e58\":\"R\",\"\u1e5a\":\"R\",\"\u1e5c\":\"R\",\"\u0210\":\"R\",\"\u0212\":\"R\",\"\u1e5e\":\"R\",\"\u024c\":\"R\",\"\u2c64\":\"R\",\"\ua73e\":\"C\",\"\u018e\":\"E\",\"\u015a\":\"S\",\"\u1e64\":\"S\",\"\u0160\":\"S\",\"\u1e66\":\"S\",\"\u015e\":\"S\",\"\u015c\":\"S\",\"\u0218\":\"S\",\"\u1e60\":\"S\",\"\u1e62\":\"S\",\"\u1e68\":\"S\",\"\u0164\":\"T\",\"\u0162\":\"T\",\"\u1e70\":\"T\",\"\u021a\":\"T\",\"\u023e\":\"T\",\"\u1e6a\":\"T\",\"\u1e6c\":\"T\",\"\u01ac\":\"T\",\"\u1e6e\":\"T\",\"\u01ae\":\"T\",\"\u0166\":\"T\",\"\u2c6f\":\"A\",\"\ua780\":\"L\",\"\u019c\":\"M\",\"\u0245\":\"V\",\"\ua728\":\"TZ\",\"\u00da\":\"U\",\"\u016c\":\"U\",\"\u01d3\":\"U\",\"\u00db\":\"U\",\"\u1e76\":\"U\",\"\u00dc\":\"U\",\"\u01d7\":\"U\",\"\u01d9\":\"U\",\"\u01db\":\"U\",\"\u01d5\":\"U\",\"\u1e72\":\"U\",\"\u1ee4\":\"U\",\"\u0170\":\"U\",\"\u0214\":\"U\",\"\u00d9\":\"U\",\"\u1ee6\":\"U\",\"\u01af\":\"U\",\"\u1ee8\":\"U\",\"\u1ef0\":\"U\",\"\u1eea\":\"U\",\"\u1eec\":\"U\",\"\u1eee\":\"U\",\"\u0216\":\"U\",\"\u016a\":\"U\",\"\u1e7a\":\"U\",\"\u0172\":\"U\",\"\u016e\":\"U\",\"\u0168\":\"U\",\"\u1e78\":\"U\",\"\u1e74\":\"U\",\"\ua75e\":\"V\",\"\u1e7e\":\"V\",\"\u01b2\":\"V\",\"\u1e7c\":\"V\",\"\ua760\":\"VY\",\"\u1e82\":\"W\",\"\u0174\":\"W\",\"\u1e84\":\"W\",\"\u1e86\":\"W\",\"\u1e88\":\"W\",\"\u1e80\":\"W\",\"\u2c72\":\"W\",\"\u1e8c\":\"X\",\"\u1e8a\":\"X\",\"\u00dd\":\"Y\",\"\u0176\":\"Y\",\"\u0178\":\"Y\",\"\u1e8e\":\"Y\",\"\u1ef4\":\"Y\",\"\u1ef2\":\"Y\",\"\u01b3\":\"Y\",\"\u1ef6\":\"Y\",\"\u1efe\":\"Y\",\"\u0232\":\"Y\",\"\u024e\":\"Y\",\"\u1ef8\":\"Y\",\"\u0179\":\"Z\",\"\u017d\":\"Z\",\"\u1e90\":\"Z\",\"\u2c6b\":\"Z\",\"\u017b\":\"Z\",\"\u1e92\":\"Z\",\"\u0224\":\"Z\",\"\u1e94\":\"Z\",\"\u01b5\":\"Z\",\"\u0132\":\"IJ\",\"\u0152\":\"OE\",\"\u1d00\":\"A\",\"\u1d01\":\"AE\",\"\u0299\":\"B\",\"\u1d03\":\"B\",\"\u1d04\":\"C\",\"\u1d05\":\"D\",\"\u1d07\":\"E\",\"\ua730\":\"F\",\"\u0262\":\"G\",\"\u029b\":\"G\",\"\u029c\":\"H\",\"\u026a\":\"I\",\"\u0281\":\"R\",\"\u1d0a\":\"J\",\"\u1d0b\":\"K\",\"\u029f\":\"L\",\"\u1d0c\":\"L\",\"\u1d0d\":\"M\",\"\u0274\":\"N\",\"\u1d0f\":\"O\",\"\u0276\":\"OE\",\"\u1d10\":\"O\",\"\u1d15\":\"OU\",\"\u1d18\":\"P\",\"\u0280\":\"R\",\"\u1d0e\":\"N\",\"\u1d19\":\"R\",\"\ua731\":\"S\",\"\u1d1b\":\"T\",\"\u2c7b\":\"E\",\"\u1d1a\":\"R\",\"\u1d1c\":\"U\",\"\u1d20\":\"V\",\"\u1d21\":\"W\",\"\u028f\":\"Y\",\"\u1d22\":\"Z\",\"\u00e1\":\"a\",\"\u0103\":\"a\",\"\u1eaf\":\"a\",\"\u1eb7\":\"a\",\"\u1eb1\":\"a\",\"\u1eb3\":\"a\",\"\u1eb5\":\"a\",\"\u01ce\":\"a\",\"\u00e2\":\"a\",\"\u1ea5\":\"a\",\"\u1ead\":\"a\",\"\u1ea7\":\"a\",\"\u1ea9\":\"a\",\"\u1eab\":\"a\",\"\u00e4\":\"a\",\"\u01df\":\"a\",\"\u0227\":\"a\",\"\u01e1\":\"a\",\"\u1ea1\":\"a\",\"\u0201\":\"a\",\"\u00e0\":\"a\",\"\u1ea3\":\"a\",\"\u0203\":\"a\",\"\u0101\":\"a\",\"\u0105\":\"a\",\"\u1d8f\":\"a\",\"\u1e9a\":\"a\",\"\u00e5\":\"a\",\"\u01fb\":\"a\",\"\u1e01\":\"a\",\"\u2c65\":\"a\",\"\u00e3\":\"a\",\"\ua733\":\"aa\",\"\u00e6\":\"ae\",\"\u01fd\":\"ae\",\"\u01e3\":\"ae\",\"\ua735\":\"ao\",\"\ua737\":\"au\",\"\ua739\":\"av\",\"\ua73b\":\"av\",\"\ua73d\":\"ay\",\"\u1e03\":\"b\",\"\u1e05\":\"b\",\"\u0253\":\"b\",\"\u1e07\":\"b\",\"\u1d6c\":\"b\",\"\u1d80\":\"b\",\"\u0180\":\"b\",\"\u0183\":\"b\",\"\u0275\":\"o\",\"\u0107\":\"c\",\"\u010d\":\"c\",\"\u00e7\":\"c\",\"\u1e09\":\"c\",\"\u0109\":\"c\",\"\u0255\":\"c\",\"\u010b\":\"c\",\"\u0188\":\"c\",\"\u023c\":\"c\",\"\u010f\":\"d\",\"\u1e11\":\"d\",\"\u1e13\":\"d\",\"\u0221\":\"d\",\"\u1e0b\":\"d\",\"\u1e0d\":\"d\",\"\u0257\":\"d\",\"\u1d91\":\"d\",\"\u1e0f\":\"d\",\"\u1d6d\":\"d\",\"\u1d81\":\"d\",\"\u0111\":\"d\",\"\u0256\":\"d\",\"\u018c\":\"d\",\"\u0131\":\"i\",\"\u0237\":\"j\",\"\u025f\":\"j\",\"\u0284\":\"j\",\"\u01f3\":\"dz\",\"\u01c6\":\"dz\",\"\u00e9\":\"e\",\"\u0115\":\"e\",\"\u011b\":\"e\",\"\u0229\":\"e\",\"\u1e1d\":\"e\",\"\u00ea\":\"e\",\"\u1ebf\":\"e\",\"\u1ec7\":\"e\",\"\u1ec1\":\"e\",\"\u1ec3\":\"e\",\"\u1ec5\":\"e\",\"\u1e19\":\"e\",\"\u00eb\":\"e\",\"\u0117\":\"e\",\"\u1eb9\":\"e\",\"\u0205\":\"e\",\"\u00e8\":\"e\",\"\u1ebb\":\"e\",\"\u0207\":\"e\",\"\u0113\":\"e\",\"\u1e17\":\"e\",\"\u1e15\":\"e\",\"\u2c78\":\"e\",\"\u0119\":\"e\",\"\u1d92\":\"e\",\"\u0247\":\"e\",\"\u1ebd\":\"e\",\"\u1e1b\":\"e\",\"\ua76b\":\"et\",\"\u1e1f\":\"f\",\"\u0192\":\"f\",\"\u1d6e\":\"f\",\"\u1d82\":\"f\",\"\u01f5\":\"g\",\"\u011f\":\"g\",\"\u01e7\":\"g\",\"\u0123\":\"g\",\"\u011d\":\"g\",\"\u0121\":\"g\",\"\u0260\":\"g\",\"\u1e21\":\"g\",\"\u1d83\":\"g\",\"\u01e5\":\"g\",\"\u1e2b\":\"h\",\"\u021f\":\"h\",\"\u1e29\":\"h\",\"\u0125\":\"h\",\"\u2c68\":\"h\",\"\u1e27\":\"h\",\"\u1e23\":\"h\",\"\u1e25\":\"h\",\"\u0266\":\"h\",\"\u1e96\":\"h\",\"\u0127\":\"h\",\"\u0195\":\"hv\",\"\u00ed\":\"i\",\"\u012d\":\"i\",\"\u01d0\":\"i\",\"\u00ee\":\"i\",\"\u00ef\":\"i\",\"\u1e2f\":\"i\",\"\u1ecb\":\"i\",\"\u0209\":\"i\",\"\u00ec\":\"i\",\"\u1ec9\":\"i\",\"\u020b\":\"i\",\"\u012b\":\"i\",\"\u012f\":\"i\",\"\u1d96\":\"i\",\"\u0268\":\"i\",\"\u0129\":\"i\",\"\u1e2d\":\"i\",\"\ua77a\":\"d\",\"\ua77c\":\"f\",\"\u1d79\":\"g\",\"\ua783\":\"r\",\"\ua785\":\"s\",\"\ua787\":\"t\",\"\ua76d\":\"is\",\"\u01f0\":\"j\",\"\u0135\":\"j\",\"\u029d\":\"j\",\"\u0249\":\"j\",\"\u1e31\":\"k\",\"\u01e9\":\"k\",\"\u0137\":\"k\",\"\u2c6a\":\"k\",\"\ua743\":\"k\",\"\u1e33\":\"k\",\"\u0199\":\"k\",\"\u1e35\":\"k\",\"\u1d84\":\"k\",\"\ua741\":\"k\",\"\ua745\":\"k\",\"\u013a\":\"l\",\"\u019a\":\"l\",\"\u026c\":\"l\",\"\u013e\":\"l\",\"\u013c\":\"l\",\"\u1e3d\":\"l\",\"\u0234\":\"l\",\"\u1e37\":\"l\",\"\u1e39\":\"l\",\"\u2c61\":\"l\",\"\ua749\":\"l\",\"\u1e3b\":\"l\",\"\u0140\":\"l\",\"\u026b\":\"l\",\"\u1d85\":\"l\",\"\u026d\":\"l\",\"\u0142\":\"l\",\"\u01c9\":\"lj\",\"\u017f\":\"s\",\"\u1e9c\":\"s\",\"\u1e9b\":\"s\",\"\u1e9d\":\"s\",\"\u1e3f\":\"m\",\"\u1e41\":\"m\",\"\u1e43\":\"m\",\"\u0271\":\"m\",\"\u1d6f\":\"m\",\"\u1d86\":\"m\",\"\u0144\":\"n\",\"\u0148\":\"n\",\"\u0146\":\"n\",\"\u1e4b\":\"n\",\"\u0235\":\"n\",\"\u1e45\":\"n\",\"\u1e47\":\"n\",\"\u01f9\":\"n\",\"\u0272\":\"n\",\"\u1e49\":\"n\",\"\u019e\":\"n\",\"\u1d70\":\"n\",\"\u1d87\":\"n\",\"\u0273\":\"n\",\"\u00f1\":\"n\",\"\u01cc\":\"nj\",\"\u00f3\":\"o\",\"\u014f\":\"o\",\"\u01d2\":\"o\",\"\u00f4\":\"o\",\"\u1ed1\":\"o\",\"\u1ed9\":\"o\",\"\u1ed3\":\"o\",\"\u1ed5\":\"o\",\"\u1ed7\":\"o\",\"\u00f6\":\"o\",\"\u022b\":\"o\",\"\u022f\":\"o\",\"\u0231\":\"o\",\"\u1ecd\":\"o\",\"\u0151\":\"o\",\"\u020d\":\"o\",\"\u00f2\":\"o\",\"\u1ecf\":\"o\",\"\u01a1\":\"o\",\"\u1edb\":\"o\",\"\u1ee3\":\"o\",\"\u1edd\":\"o\",\"\u1edf\":\"o\",\"\u1ee1\":\"o\",\"\u020f\":\"o\",\"\ua74b\":\"o\",\"\ua74d\":\"o\",\"\u2c7a\":\"o\",\"\u014d\":\"o\",\"\u1e53\":\"o\",\"\u1e51\":\"o\",\"\u01eb\":\"o\",\"\u01ed\":\"o\",\"\u00f8\":\"o\",\"\u01ff\":\"o\",\"\u00f5\":\"o\",\"\u1e4d\":\"o\",\"\u1e4f\":\"o\",\"\u022d\":\"o\",\"\u01a3\":\"oi\",\"\ua74f\":\"oo\",\"\u025b\":\"e\",\"\u1d93\":\"e\",\"\u0254\":\"o\",\"\u1d97\":\"o\",\"\u0223\":\"ou\",\"\u1e55\":\"p\",\"\u1e57\":\"p\",\"\ua753\":\"p\",\"\u01a5\":\"p\",\"\u1d71\":\"p\",\"\u1d88\":\"p\",\"\ua755\":\"p\",\"\u1d7d\":\"p\",\"\ua751\":\"p\",\"\ua759\":\"q\",\"\u02a0\":\"q\",\"\u024b\":\"q\",\"\ua757\":\"q\",\"\u0155\":\"r\",\"\u0159\":\"r\",\"\u0157\":\"r\",\"\u1e59\":\"r\",\"\u1e5b\":\"r\",\"\u1e5d\":\"r\",\"\u0211\":\"r\",\"\u027e\":\"r\",\"\u1d73\":\"r\",\"\u0213\":\"r\",\"\u1e5f\":\"r\",\"\u027c\":\"r\",\"\u1d72\":\"r\",\"\u1d89\":\"r\",\"\u024d\":\"r\",\"\u027d\":\"r\",\"\u2184\":\"c\",\"\ua73f\":\"c\",\"\u0258\":\"e\",\"\u027f\":\"r\",\"\u015b\":\"s\",\"\u1e65\":\"s\",\"\u0161\":\"s\",\"\u1e67\":\"s\",\"\u015f\":\"s\",\"\u015d\":\"s\",\"\u0219\":\"s\",\"\u1e61\":\"s\",\"\u1e63\":\"s\",\"\u1e69\":\"s\",\"\u0282\":\"s\",\"\u1d74\":\"s\",\"\u1d8a\":\"s\",\"\u023f\":\"s\",\"\u0261\":\"g\",\"\u1d11\":\"o\",\"\u1d13\":\"o\",\"\u1d1d\":\"u\",\"\u0165\":\"t\",\"\u0163\":\"t\",\"\u1e71\":\"t\",\"\u021b\":\"t\",\"\u0236\":\"t\",\"\u1e97\":\"t\",\"\u2c66\":\"t\",\"\u1e6b\":\"t\",\"\u1e6d\":\"t\",\"\u01ad\":\"t\",\"\u1e6f\":\"t\",\"\u1d75\":\"t\",\"\u01ab\":\"t\",\"\u0288\":\"t\",\"\u0167\":\"t\",\"\u1d7a\":\"th\",\"\u0250\":\"a\",\"\u1d02\":\"ae\",\"\u01dd\":\"e\",\"\u1d77\":\"g\",\"\u0265\":\"h\",\"\u02ae\":\"h\",\"\u02af\":\"h\",\"\u1d09\":\"i\",\"\u029e\":\"k\",\"\ua781\":\"l\",\"\u026f\":\"m\",\"\u0270\":\"m\",\"\u1d14\":\"oe\",\"\u0279\":\"r\",\"\u027b\":\"r\",\"\u027a\":\"r\",\"\u2c79\":\"r\",\"\u0287\":\"t\",\"\u028c\":\"v\",\"\u028d\":\"w\",\"\u028e\":\"y\",\"\ua729\":\"tz\",\"\u00fa\":\"u\",\"\u016d\":\"u\",\"\u01d4\":\"u\",\"\u00fb\":\"u\",\"\u1e77\":\"u\",\"\u00fc\":\"u\",\"\u01d8\":\"u\",\"\u01da\":\"u\",\"\u01dc\":\"u\",\"\u01d6\":\"u\",\"\u1e73\":\"u\",\"\u1ee5\":\"u\",\"\u0171\":\"u\",\"\u0215\":\"u\",\"\u00f9\":\"u\",\"\u1ee7\":\"u\",\"\u01b0\":\"u\",\"\u1ee9\":\"u\",\"\u1ef1\":\"u\",\"\u1eeb\":\"u\",\"\u1eed\":\"u\",\"\u1eef\":\"u\",\"\u0217\":\"u\",\"\u016b\":\"u\",\"\u1e7b\":\"u\",\"\u0173\":\"u\",\"\u1d99\":\"u\",\"\u016f\":\"u\",\"\u0169\":\"u\",\"\u1e79\":\"u\",\"\u1e75\":\"u\",\"\u1d6b\":\"ue\",\"\ua778\":\"um\",\"\u2c74\":\"v\",\"\ua75f\":\"v\",\"\u1e7f\":\"v\",\"\u028b\":\"v\",\"\u1d8c\":\"v\",\"\u2c71\":\"v\",\"\u1e7d\":\"v\",\"\ua761\":\"vy\",\"\u1e83\":\"w\",\"\u0175\":\"w\",\"\u1e85\":\"w\",\"\u1e87\":\"w\",\"\u1e89\":\"w\",\"\u1e81\":\"w\",\"\u2c73\":\"w\",\"\u1e98\":\"w\",\"\u1e8d\":\"x\",\"\u1e8b\":\"x\",\"\u1d8d\":\"x\",\"\u00fd\":\"y\",\"\u0177\":\"y\",\"\u00ff\":\"y\",\"\u1e8f\":\"y\",\"\u1ef5\":\"y\",\"\u1ef3\":\"y\",\"\u01b4\":\"y\",\"\u1ef7\":\"y\",\"\u1eff\":\"y\",\"\u0233\":\"y\",\"\u1e99\":\"y\",\"\u024f\":\"y\",\"\u1ef9\":\"y\",\"\u017a\":\"z\",\"\u017e\":\"z\",\"\u1e91\":\"z\",\"\u0291\":\"z\",\"\u2c6c\":\"z\",\"\u017c\":\"z\",\"\u1e93\":\"z\",\"\u0225\":\"z\",\"\u1e95\":\"z\",\"\u1d76\":\"z\",\"\u1d8e\":\"z\",\"\u0290\":\"z\",\"\u01b6\":\"z\",\"\u0240\":\"z\",\"\ufb00\":\"ff\",\"\ufb03\":\"ffi\",\"\ufb04\":\"ffl\",\"\ufb01\":\"fi\",\"\ufb02\":\"fl\",\"\u0133\":\"ij\",\"\u0153\":\"oe\",\"\ufb06\":\"st\",\"\u2090\":\"a\",\"\u2091\":\"e\",\"\u1d62\":\"i\",\"\u2c7c\":\"j\",\"\u2092\":\"o\",\"\u1d63\":\"r\",\"\u1d64\":\"u\",\"\u1d65\":\"v\",\"\u2093\":\"x\"};\nString.prototype.latinise=function(){return this.replace(/[^A-Za-z0-9\\[\\] ]/g,function(a){return Latinise.latin_map[a]||a})};\nString.prototype.latinize=String.prototype.latinise;\nString.prototype.isLatin=function(){return this==this.latinise()}\n</code></pre>\n\n<p>Some examples:</p>\n\n<pre><code>&gt; \"Piqu\u00e9\".latinize();\n\"Pique\"\n&gt; \"Piqu\u00e9\".isLatin();\nfalse\n&gt; \"Pique\".isLatin();\ntrue\n&gt; \"Piqu\u00e9\".latinise().isLatin();\ntrue\n</code></pre>\n\n<p>To ensure the above latin_map doesn't get corrupted by copy/pasting or other transformations, use this base64 encoded string, replacing the first line of the above:</p>\n\n<pre><code>var base64map=\"\";\nvar Latinise={};Latinise.latin_map=JSON.parse(decodeURIComponent(escape(atob(base64map))));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Pass a user defined function to the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"nofollow\"><code>Array.sort()</code></a> method, and in this user defined function use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/localeCompare\" rel=\"nofollow\"><code>String.localeCompare()</code></a></p>\n\n<pre><code>function myCompareFunction(a, b) {\n  return a.localeCompare(b);\n}\n\nvar values = [\"p\u00eaches\", \"\u00e9pinards\", \"tomates\", \"fraises\"];\n\n// WRONG: [\"fraises\", \"p\u00eaches\", \"tomates\", \"\u00e9pinards\"]\nvalues.sort();\n\n // **GOOD**: [\"\u00e9pinards\", \"fraises\", \"p\u00eaches\", \"tomates\"]\nvalues.sort(myCompareFunction);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's my modified version of <a href=\"http://lehelk.com/2011/05/06/script-to-remove-diacritics/\" rel=\"nofollow\">lehelk.com</a>'s version that also removes html entites that are accents : </p>\n\n<p><a href=\"http://jsfiddle.net/billybraga/UHmnf/\" rel=\"nofollow\">http://jsfiddle.net/billybraga/UHmnf/</a></p>\n\n<p>I still don't know about performance, though...</p>\n\n<pre><code>var defaultDiacriticsRemovalMap = [{\n    'base': \"A\",\n    'letters': /(&amp;#65;|&amp;#9398;|&amp;#65313;|&amp;#192;|&amp;#193;|&amp;#194;|&amp;#7846;|&amp;#7844;|&amp;#7850;|&amp;#7848;|&amp;#195;|&amp;#256;|&amp;#258;|&amp;#7856;|&amp;#7854;|&amp;#7860;|&amp;#7858;|&amp;#550;|&amp;#480;|&amp;#196;|&amp;#478;|&amp;#7842;|&amp;#197;|&amp;#506;|&amp;#461;|&amp;#512;|&amp;#514;|&amp;#7840;|&amp;#7852;|&amp;#7862;|&amp;#7680;|&amp;#260;|&amp;#570;|&amp;#11375;|[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F])/g},\n{\n    'base': \"AA\",\n    'letters': /(&amp;#42802;|[\\uA732])/g},\n{\n    'base': \"AE\",\n    'letters': /(&amp;#198;|&amp;#508;|&amp;#482;|[\\u00C6\\u01FC\\u01E2])/g},\n{\n    'base': \"AO\",\n    'letters': /(&amp;#42804;|[\\uA734])/g},\n{\n    'base': \"AU\",\n    'letters': /(&amp;#42806;|[\\uA736])/g},\n{\n    'base': \"AV\",\n    'letters': /(&amp;#42808;|&amp;#42810;|[\\uA738\\uA73A])/g},\n{\n    'base': \"AY\",\n    'letters': /(&amp;#42812;|[\\uA73C])/g},\n{\n    'base': \"B\",\n    'letters': /(&amp;#66;|&amp;#9399;|&amp;#65314;|&amp;#7682;|&amp;#7684;|&amp;#7686;|&amp;#579;|&amp;#386;|&amp;#385;|[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181])/g},\n{\n    'base': \"C\",\n    'letters': /(&amp;#67;|&amp;#9400;|&amp;#65315;|&amp;#262;|&amp;#264;|&amp;#266;|&amp;#268;|&amp;#199;|&amp;#7688;|&amp;#391;|&amp;#571;|&amp;#42814;|[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E])/g},\n{\n    'base': \"D\",\n    'letters': /(&amp;#68;|&amp;#9401;|&amp;#65316;|&amp;#7690;|&amp;#270;|&amp;#7692;|&amp;#7696;|&amp;#7698;|&amp;#7694;|&amp;#272;|&amp;#395;|&amp;#394;|&amp;#393;|&amp;#42873;|[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779])/g},\n{\n    'base': \"DZ\",\n    'letters': /(&amp;#497;|&amp;#452;|[\\u01F1\\u01C4])/g},\n{\n    'base': \"Dz\",\n    'letters': /(&amp;#498;|&amp;#453;|[\\u01F2\\u01C5])/g},\n{\n    'base': \"E\",\n    'letters': /(&amp;#69;|&amp;#9402;|&amp;#65317;|&amp;#200;|&amp;#201;|&amp;#202;|&amp;#7872;|&amp;#7870;|&amp;#7876;|&amp;#7874;|&amp;#7868;|&amp;#274;|&amp;#7700;|&amp;#7702;|&amp;#276;|&amp;#278;|&amp;#203;|&amp;#7866;|&amp;#282;|&amp;#516;|&amp;#518;|&amp;#7864;|&amp;#7878;|&amp;#552;|&amp;#7708;|&amp;#280;|&amp;#7704;|&amp;#7706;|&amp;#400;|&amp;#398;|[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E])/g},\n{\n    'base': \"F\",\n    'letters': /(&amp;#70;|&amp;#9403;|&amp;#65318;|&amp;#7710;|&amp;#401;|&amp;#42875;|[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B])/g},\n{\n    'base': \"G\",\n    'letters': /(&amp;#71;|&amp;#9404;|&amp;#65319;|&amp;#500;|&amp;#284;|&amp;#7712;|&amp;#286;|&amp;#288;|&amp;#486;|&amp;#290;|&amp;#484;|&amp;#403;|&amp;#42912;|&amp;#42877;|&amp;#42878;|[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E])/g},\n{\n    'base': \"H\",\n    'letters': /(&amp;#72;|&amp;#9405;|&amp;#65320;|&amp;#292;|&amp;#7714;|&amp;#7718;|&amp;#542;|&amp;#7716;|&amp;#7720;|&amp;#7722;|&amp;#294;|&amp;#11367;|&amp;#11381;|&amp;#42893;|[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D])/g},\n{\n    'base': \"I\",\n    'letters': /(&amp;#73;|&amp;#9406;|&amp;#65321;|&amp;#204;|&amp;#205;|&amp;#206;|&amp;#296;|&amp;#298;|&amp;#300;|&amp;#304;|&amp;#207;|&amp;#7726;|&amp;#7880;|&amp;#463;|&amp;#520;|&amp;#522;|&amp;#7882;|&amp;#302;|&amp;#7724;|&amp;#407;|[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197])/g},\n{\n    'base': \"J\",\n    'letters': /(&amp;#74;|&amp;#9407;|&amp;#65322;|&amp;#308;|&amp;#584;|[\\u004A\\u24BF\\uFF2A\\u0134\\u0248])/g},\n{\n    'base': \"K\",\n    'letters': /(&amp;#75;|&amp;#9408;|&amp;#65323;|&amp;#7728;|&amp;#488;|&amp;#7730;|&amp;#310;|&amp;#7732;|&amp;#408;|&amp;#11369;|&amp;#42816;|&amp;#42818;|&amp;#42820;|&amp;#42914;|[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2])/g},\n{\n    'base': \"L\",\n    'letters': /(&amp;#76;|&amp;#9409;|&amp;#65324;|&amp;#319;|&amp;#313;|&amp;#317;|&amp;#7734;|&amp;#7736;|&amp;#315;|&amp;#7740;|&amp;#7738;|&amp;#321;|&amp;#573;|&amp;#11362;|&amp;#11360;|&amp;#42824;|&amp;#42822;|&amp;#42880;|[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780])/g},\n{\n    'base': \"LJ\",\n    'letters': /(&amp;#455;|[\\u01C7])/g},\n{\n    'base': \"Lj\",\n    'letters': /(&amp;#456;|[\\u01C8])/g},\n{\n    'base': \"M\",\n    'letters': /(&amp;#77;|&amp;#9410;|&amp;#65325;|&amp;#7742;|&amp;#7744;|&amp;#7746;|&amp;#11374;|&amp;#412;|[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C])/g},\n{\n    'base': \"N\",\n    'letters': /(&amp;#78;|&amp;#9411;|&amp;#65326;|&amp;#504;|&amp;#323;|&amp;#209;|&amp;#7748;|&amp;#327;|&amp;#7750;|&amp;#325;|&amp;#7754;|&amp;#7752;|&amp;#544;|&amp;#413;|&amp;#42896;|&amp;#42916;|[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4])/g},\n{\n    'base': \"NJ\",\n    'letters': /(&amp;#458;|[\\u01CA])/g},\n{\n    'base': \"Nj\",\n    'letters': /(&amp;#459;|[\\u01CB])/g},\n{\n    'base': \"O\",\n    'letters': /(&amp;#79;|&amp;#9412;|&amp;#65327;|&amp;#210;|&amp;#211;|&amp;#212;|&amp;#7890;|&amp;#7888;|&amp;#7894;|&amp;#7892;|&amp;#213;|&amp;#7756;|&amp;#556;|&amp;#7758;|&amp;#332;|&amp;#7760;|&amp;#7762;|&amp;#334;|&amp;#558;|&amp;#560;|&amp;#214;|&amp;#554;|&amp;#7886;|&amp;#336;|&amp;#465;|&amp;#524;|&amp;#526;|&amp;#416;|&amp;#7900;|&amp;#7898;|&amp;#7904;|&amp;#7902;|&amp;#7906;|&amp;#7884;|&amp;#7896;|&amp;#490;|&amp;#492;|&amp;#216;|&amp;#510;|&amp;#390;|&amp;#415;|&amp;#42826;|&amp;#42828;|[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C])/g},\n{\n    'base': \"OI\",\n    'letters': /(&amp;#418;|[\\u01A2])/g},\n{\n    'base': \"OO\",\n    'letters': /(&amp;#42830;|[\\uA74E])/g},\n{\n    'base': \"OU\",\n    'letters': /(&amp;#546;|[\\u0222])/g},\n{\n    'base': \"P\",\n    'letters': /(&amp;#80;|&amp;#9413;|&amp;#65328;|&amp;#7764;|&amp;#7766;|&amp;#420;|&amp;#11363;|&amp;#42832;|&amp;#42834;|&amp;#42836;|[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754])/g},\n{\n    'base': \"Q\",\n    'letters': /(&amp;#81;|&amp;#9414;|&amp;#65329;|&amp;#42838;|&amp;#42840;|&amp;#586;|[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A])/g},\n{\n    'base': \"R\",\n    'letters': /(&amp;#82;|&amp;#9415;|&amp;#65330;|&amp;#340;|&amp;#7768;|&amp;#344;|&amp;#528;|&amp;#530;|&amp;#7770;|&amp;#7772;|&amp;#342;|&amp;#7774;|&amp;#588;|&amp;#11364;|&amp;#42842;|&amp;#42918;|&amp;#42882;|[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782])/g},\n{\n    'base': \"S\",\n    'letters': /(&amp;#83;|&amp;#9416;|&amp;#65331;|&amp;#7838;|&amp;#346;|&amp;#7780;|&amp;#348;|&amp;#7776;|&amp;#352;|&amp;#7782;|&amp;#7778;|&amp;#7784;|&amp;#536;|&amp;#350;|&amp;#11390;|&amp;#42920;|&amp;#42884;|[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784])/g},\n{\n    'base': \"T\",\n    'letters': /(&amp;#84;|&amp;#9417;|&amp;#65332;|&amp;#7786;|&amp;#356;|&amp;#7788;|&amp;#538;|&amp;#354;|&amp;#7792;|&amp;#7790;|&amp;#358;|&amp;#428;|&amp;#430;|&amp;#574;|&amp;#42886;|[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786])/g},\n{\n    'base': \"TZ\",\n    'letters': /(&amp;#42792;|[\\uA728])/g},\n{\n    'base': \"U\",\n    'letters': /(&amp;#85;|&amp;#9418;|&amp;#65333;|&amp;#217;|&amp;#218;|&amp;#219;|&amp;#360;|&amp;#7800;|&amp;#362;|&amp;#7802;|&amp;#364;|&amp;#220;|&amp;#475;|&amp;#471;|&amp;#469;|&amp;#473;|&amp;#7910;|&amp;#366;|&amp;#368;|&amp;#467;|&amp;#532;|&amp;#534;|&amp;#431;|&amp;#7914;|&amp;#7912;|&amp;#7918;|&amp;#7916;|&amp;#7920;|&amp;#7908;|&amp;#7794;|&amp;#370;|&amp;#7798;|&amp;#7796;|&amp;#580;|[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244])/g},\n{\n    'base': \"V\",\n    'letters': /(&amp;#86;|&amp;#9419;|&amp;#65334;|&amp;#7804;|&amp;#7806;|&amp;#434;|&amp;#42846;|&amp;#581;|[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245])/g},\n{\n    'base': \"VY\",\n    'letters': /(&amp;#42848;|[\\uA760])/g},\n{\n    'base': \"W\",\n    'letters': /(&amp;#87;|&amp;#9420;|&amp;#65335;|&amp;#7808;|&amp;#7810;|&amp;#372;|&amp;#7814;|&amp;#7812;|&amp;#7816;|&amp;#11378;|[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72])/g},\n{\n    'base': \"X\",\n    'letters': /(&amp;#88;|&amp;#9421;|&amp;#65336;|&amp;#7818;|&amp;#7820;|[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C])/g},\n{\n    'base': \"Y\",\n    'letters': /(&amp;#89;|&amp;#9422;|&amp;#65337;|&amp;#7922;|&amp;#221;|&amp;#374;|&amp;#7928;|&amp;#562;|&amp;#7822;|&amp;#376;|&amp;#7926;|&amp;#7924;|&amp;#435;|&amp;#590;|&amp;#7934;|[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE])/g},\n{\n    'base': \"Z\",\n    'letters': /(&amp;#90;|&amp;#9423;|&amp;#65338;|&amp;#377;|&amp;#7824;|&amp;#379;|&amp;#381;|&amp;#7826;|&amp;#7828;|&amp;#437;|&amp;#548;|&amp;#11391;|&amp;#11371;|&amp;#42850;|[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762])/g},\n{\n    'base': \"a\",\n    'letters': /(&amp;#97;|&amp;#9424;|&amp;#65345;|&amp;#7834;|&amp;#224;|&amp;#225;|&amp;#226;|&amp;#7847;|&amp;#7845;|&amp;#7851;|&amp;#7849;|&amp;#227;|&amp;#257;|&amp;#259;|&amp;#7857;|&amp;#7855;|&amp;#7861;|&amp;#7859;|&amp;#551;|&amp;#481;|&amp;#228;|&amp;#479;|&amp;#7843;|&amp;#229;|&amp;#507;|&amp;#462;|&amp;#513;|&amp;#515;|&amp;#7841;|&amp;#7853;|&amp;#7863;|&amp;#7681;|&amp;#261;|&amp;#11365;|&amp;#592;|[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250])/g},\n{\n    'base': \"aa\",\n    'letters': /(&amp;#42803;|[\\uA733])/g},\n{\n    'base': \"ae\",\n    'letters': /(&amp;#230;|&amp;#509;|&amp;#483;|[\\u00E6\\u01FD\\u01E3])/g},\n{\n    'base': \"ao\",\n    'letters': /(&amp;#42805;|[\\uA735])/g},\n{\n    'base': \"au\",\n    'letters': /(&amp;#42807;|[\\uA737])/g},\n{\n    'base': \"av\",\n    'letters': /(&amp;#42809;|&amp;#42811;|[\\uA739\\uA73B])/g},\n{\n    'base': \"ay\",\n    'letters': /(&amp;#42813;|[\\uA73D])/g},\n{\n    'base': \"b\",\n    'letters': /(&amp;#98;|&amp;#9425;|&amp;#65346;|&amp;#7683;|&amp;#7685;|&amp;#7687;|&amp;#384;|&amp;#387;|&amp;#595;|[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253])/g},\n{\n    'base': \"c\",\n    'letters': /(&amp;#99;|&amp;#9426;|&amp;#65347;|&amp;#263;|&amp;#265;|&amp;#267;|&amp;#269;|&amp;#231;|&amp;#7689;|&amp;#392;|&amp;#572;|&amp;#42815;|&amp;#8580;|[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184])/g},\n{\n    'base': \"d\",\n    'letters': /(&amp;#100;|&amp;#9427;|&amp;#65348;|&amp;#7691;|&amp;#271;|&amp;#7693;|&amp;#7697;|&amp;#7699;|&amp;#7695;|&amp;#273;|&amp;#396;|&amp;#598;|&amp;#599;|&amp;#42874;|[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A])/g},\n{\n    'base': \"dz\",\n    'letters': /(&amp;#499;|&amp;#454;|[\\u01F3\\u01C6])/g},\n{\n    'base': \"e\",\n    'letters': /(&amp;#101;|&amp;#9428;|&amp;#65349;|&amp;#232;|&amp;#233;|&amp;#234;|&amp;#7873;|&amp;#7871;|&amp;#7877;|&amp;#7875;|&amp;#7869;|&amp;#275;|&amp;#7701;|&amp;#7703;|&amp;#277;|&amp;#279;|&amp;#235;|&amp;#7867;|&amp;#283;|&amp;#517;|&amp;#519;|&amp;#7865;|&amp;#7879;|&amp;#553;|&amp;#7709;|&amp;#281;|&amp;#7705;|&amp;#7707;|&amp;#583;|&amp;#603;|&amp;#477;|[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD])/g},\n{\n    'base': \"f\",\n    'letters': /(&amp;#102;|&amp;#9429;|&amp;#65350;|&amp;#7711;|&amp;#402;|&amp;#42876;|[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C])/g},\n{\n    'base': \"g\",\n    'letters': /(&amp;#103;|&amp;#9430;|&amp;#65351;|&amp;#501;|&amp;#285;|&amp;#7713;|&amp;#287;|&amp;#289;|&amp;#487;|&amp;#291;|&amp;#485;|&amp;#608;|&amp;#42913;|&amp;#7545;|&amp;#42879;|[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F])/g},\n{\n    'base': \"h\",\n    'letters': /(&amp;#104;|&amp;#9431;|&amp;#65352;|&amp;#293;|&amp;#7715;|&amp;#7719;|&amp;#543;|&amp;#7717;|&amp;#7721;|&amp;#7723;|&amp;#7830;|&amp;#295;|&amp;#11368;|&amp;#11382;|&amp;#613;|[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265])/g},\n{\n    'base': \"hv\",\n    'letters': /(&amp;#405;|[\\u0195])/g},\n{\n    'base': \"i\",\n    'letters': /(&amp;#105;|&amp;#9432;|&amp;#65353;|&amp;#236;|&amp;#237;|&amp;#238;|&amp;#297;|&amp;#299;|&amp;#301;|&amp;#239;|&amp;#7727;|&amp;#7881;|&amp;#464;|&amp;#521;|&amp;#523;|&amp;#7883;|&amp;#303;|&amp;#7725;|&amp;#616;|&amp;#305;|[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131])/g},\n{\n    'base': \"j\",\n    'letters': /(&amp;#106;|&amp;#9433;|&amp;#65354;|&amp;#309;|&amp;#496;|&amp;#585;|[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249])/g},\n{\n    'base': \"k\",\n    'letters': /(&amp;#107;|&amp;#9434;|&amp;#65355;|&amp;#7729;|&amp;#489;|&amp;#7731;|&amp;#311;|&amp;#7733;|&amp;#409;|&amp;#11370;|&amp;#42817;|&amp;#42819;|&amp;#42821;|&amp;#42915;|[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3])/g},\n{\n    'base': \"l\",\n    'letters': /(&amp;#108;|&amp;#9435;|&amp;#65356;|&amp;#320;|&amp;#314;|&amp;#318;|&amp;#7735;|&amp;#7737;|&amp;#316;|&amp;#7741;|&amp;#7739;|&amp;#383;|&amp;#322;|&amp;#410;|&amp;#619;|&amp;#11361;|&amp;#42825;|&amp;#42881;|&amp;#42823;|[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747])/g},\n{\n    'base': \"lj\",\n    'letters': /(&amp;#457;|[\\u01C9])/g},\n{\n    'base': \"m\",\n    'letters': /(&amp;#109;|&amp;#9436;|&amp;#65357;|&amp;#7743;|&amp;#7745;|&amp;#7747;|&amp;#625;|&amp;#623;|[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F])/g},\n{\n    'base': \"n\",\n    'letters': /(&amp;#110;|&amp;#9437;|&amp;#65358;|&amp;#505;|&amp;#324;|&amp;#241;|&amp;#7749;|&amp;#328;|&amp;#7751;|&amp;#326;|&amp;#7755;|&amp;#7753;|&amp;#414;|&amp;#626;|&amp;#329;|&amp;#42897;|&amp;#42917;|[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5])/g},\n{\n    'base': \"nj\",\n    'letters': /(&amp;#460;|[\\u01CC])/g},\n{\n    'base': \"o\",\n    'letters': /(&amp;#111;|&amp;#9438;|&amp;#65359;|&amp;#242;|&amp;#243;|&amp;#244;|&amp;#7891;|&amp;#7889;|&amp;#7895;|&amp;#7893;|&amp;#245;|&amp;#7757;|&amp;#557;|&amp;#7759;|&amp;#333;|&amp;#7761;|&amp;#7763;|&amp;#335;|&amp;#559;|&amp;#561;|&amp;#246;|&amp;#555;|&amp;#7887;|&amp;#337;|&amp;#466;|&amp;#525;|&amp;#527;|&amp;#417;|&amp;#7901;|&amp;#7899;|&amp;#7905;|&amp;#7903;|&amp;#7907;|&amp;#7885;|&amp;#7897;|&amp;#491;|&amp;#493;|&amp;#248;|&amp;#511;|&amp;#596;|&amp;#42827;|&amp;#42829;|&amp;#629;|[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275])/g},\n{\n    'base': \"oi\",\n    'letters': /(&amp;#419;|[\\u01A3])/g},\n{\n    'base': \"ou\",\n    'letters': /(&amp;#547;|[\\u0223])/g},\n{\n    'base': \"oo\",\n    'letters': /(&amp;#42831;|[\\uA74F])/g},\n{\n    'base': \"p\",\n    'letters': /(&amp;#112;|&amp;#9439;|&amp;#65360;|&amp;#7765;|&amp;#7767;|&amp;#421;|&amp;#7549;|&amp;#42833;|&amp;#42835;|&amp;#42837;|[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755])/g},\n{\n    'base': \"q\",\n    'letters': /(&amp;#113;|&amp;#9440;|&amp;#65361;|&amp;#587;|&amp;#42839;|&amp;#42841;|[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759])/g},\n{\n    'base': \"r\",\n    'letters': /(&amp;#114;|&amp;#9441;|&amp;#65362;|&amp;#341;|&amp;#7769;|&amp;#345;|&amp;#529;|&amp;#531;|&amp;#7771;|&amp;#7773;|&amp;#343;|&amp;#7775;|&amp;#589;|&amp;#637;|&amp;#42843;|&amp;#42919;|&amp;#42883;|[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783])/g},\n{\n    'base': \"s\",\n    'letters': /(&amp;#115;|&amp;#9442;|&amp;#65363;|&amp;#223;|&amp;#347;|&amp;#7781;|&amp;#349;|&amp;#7777;|&amp;#353;|&amp;#7783;|&amp;#7779;|&amp;#7785;|&amp;#537;|&amp;#351;|&amp;#575;|&amp;#42921;|&amp;#42885;|&amp;#7835;|[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B])/g},\n{\n    'base': \"t\",\n    'letters': /(&amp;#116;|&amp;#9443;|&amp;#65364;|&amp;#7787;|&amp;#7831;|&amp;#357;|&amp;#7789;|&amp;#539;|&amp;#355;|&amp;#7793;|&amp;#7791;|&amp;#359;|&amp;#429;|&amp;#648;|&amp;#11366;|&amp;#42887;|[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787])/g},\n{\n    'base': \"tz\",\n    'letters': /(&amp;#42793;|[\\uA729])/g},\n{\n    'base': \"u\",\n    'letters': /(&amp;#117;|&amp;#9444;|&amp;#65365;|&amp;#249;|&amp;#250;|&amp;#251;|&amp;#361;|&amp;#7801;|&amp;#363;|&amp;#7803;|&amp;#365;|&amp;#252;|&amp;#476;|&amp;#472;|&amp;#470;|&amp;#474;|&amp;#7911;|&amp;#367;|&amp;#369;|&amp;#468;|&amp;#533;|&amp;#535;|&amp;#432;|&amp;#7915;|&amp;#7913;|&amp;#7919;|&amp;#7917;|&amp;#7921;|&amp;#7909;|&amp;#7795;|&amp;#371;|&amp;#7799;|&amp;#7797;|&amp;#649;|[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289])/g},\n{\n    'base': \"v\",\n    'letters': /(&amp;#118;|&amp;#9445;|&amp;#65366;|&amp;#7805;|&amp;#7807;|&amp;#651;|&amp;#42847;|&amp;#652;|[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C])/g},\n{\n    'base': \"vy\",\n    'letters': /(&amp;#42849;|[\\uA761])/g},\n{\n    'base': \"w\",\n    'letters': /(&amp;#119;|&amp;#9446;|&amp;#65367;|&amp;#7809;|&amp;#7811;|&amp;#373;|&amp;#7815;|&amp;#7813;|&amp;#7832;|&amp;#7817;|&amp;#11379;|[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73])/g},\n{\n    'base': \"x\",\n    'letters': /(&amp;#120;|&amp;#9447;|&amp;#65368;|&amp;#7819;|&amp;#7821;|[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D])/g},\n{\n    'base': \"y\",\n    'letters': /(&amp;#121;|&amp;#9448;|&amp;#65369;|&amp;#7923;|&amp;#253;|&amp;#375;|&amp;#7929;|&amp;#563;|&amp;#7823;|&amp;#255;|&amp;#7927;|&amp;#7833;|&amp;#7925;|&amp;#436;|&amp;#591;|&amp;#7935;|[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF])/g},\n{\n    'base': \"z\",\n    'letters': /(&amp;#122;|&amp;#9449;|&amp;#65370;|&amp;#378;|&amp;#7825;|&amp;#380;|&amp;#382;|&amp;#7827;|&amp;#7829;|&amp;#438;|&amp;#549;|&amp;#576;|&amp;#11372;|&amp;#42851;|[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763])/g}];\n\nfunction removeDiacritics(str) {\n    for (var i = 0; i &lt; defaultDiacriticsRemovalMap.length; i++) {\n        str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);\n    }\n    return str;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Shortened code based on the excellent solution by Ian Elliott:</p>\n\n<pre><code>accentsTidy = function(s){\n    var r = s.toLowerCase();\n    non_asciis = {'a': '[\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5]', 'ae': '\u00e6', 'c': '\u00e7', 'e': '[\u00e8\u00e9\u00ea\u00eb]', 'i': '[\u00ec\u00ed\u00ee\u00ef]', 'n': '\u00f1', 'o': '[\u00f2\u00f3\u00f4\u00f5\u00f6]', 'oe': '\u0153', 'u': '[\u00f9\u00fa\u00fb\u0171\u00fc]', 'y': '[\u00fd\u00ff]'};\n    for (i in non_asciis) { r = r.replace(new RegExp(non_asciis[i], 'g'), i); }\n    return r;\n};\n</code></pre>\n\n<p>Edit: Corrected non-working code</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I slightly modified khel version for one reason: Every regexp parse/replace will cost O(n) operations, where n is number of characters in target text. But, regexp is not exactly what we need. So:</p>\n\n<pre><code>var defaultDiacriticsRemovalap = [\n    {'base':'A', 'letters':'\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F'},\n    {'base':'AA','letters':'\\uA732'},\n    {'base':'AE','letters':'\\u00C6\\u01FC\\u01E2'},\n    {'base':'AO','letters':'\\uA734'},\n    {'base':'AU','letters':'\\uA736'},\n    {'base':'AV','letters':'\\uA738\\uA73A'},\n    {'base':'AY','letters':'\\uA73C'},\n    {'base':'B', 'letters':'\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181'},\n    {'base':'C', 'letters':'\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E'},\n    {'base':'D', 'letters':'\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779'},\n    {'base':'DZ','letters':'\\u01F1\\u01C4'},\n    {'base':'Dz','letters':'\\u01F2\\u01C5'},\n    {'base':'E', 'letters':'\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E'},\n    {'base':'F', 'letters':'\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B'},\n    {'base':'G', 'letters':'\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E'},\n    {'base':'H', 'letters':'\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D'},\n    {'base':'I', 'letters':'\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197'},\n    {'base':'J', 'letters':'\\u004A\\u24BF\\uFF2A\\u0134\\u0248'},\n    {'base':'K', 'letters':'\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2'},\n    {'base':'L', 'letters':'\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780'},\n    {'base':'LJ','letters':'\\u01C7'},\n    {'base':'Lj','letters':'\\u01C8'},\n    {'base':'M', 'letters':'\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C'},\n    {'base':'N', 'letters':'\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4'},\n    {'base':'NJ','letters':'\\u01CA'},\n    {'base':'Nj','letters':'\\u01CB'},\n    {'base':'O', 'letters':'\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C'},\n    {'base':'OI','letters':'\\u01A2'},\n    {'base':'OO','letters':'\\uA74E'},\n    {'base':'OU','letters':'\\u0222'},\n    {'base':'OE','letters':'\\u008C\\u0152'},\n    {'base':'oe','letters':'\\u009C\\u0153'},\n    {'base':'P', 'letters':'\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754'},\n    {'base':'Q', 'letters':'\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A'},\n    {'base':'R', 'letters':'\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782'},\n    {'base':'S', 'letters':'\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784'},\n    {'base':'T', 'letters':'\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786'},\n    {'base':'TZ','letters':'\\uA728'},\n    {'base':'U', 'letters':'\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244'},\n    {'base':'V', 'letters':'\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245'},\n    {'base':'VY','letters':'\\uA760'},\n    {'base':'W', 'letters':'\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72'},\n    {'base':'X', 'letters':'\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C'},\n    {'base':'Y', 'letters':'\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE'},\n    {'base':'Z', 'letters':'\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762'},\n    {'base':'a', 'letters':'\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250'},\n    {'base':'aa','letters':'\\uA733'},\n    {'base':'ae','letters':'\\u00E6\\u01FD\\u01E3'},\n    {'base':'ao','letters':'\\uA735'},\n    {'base':'au','letters':'\\uA737'},\n    {'base':'av','letters':'\\uA739\\uA73B'},\n    {'base':'ay','letters':'\\uA73D'},\n    {'base':'b', 'letters':'\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253'},\n    {'base':'c', 'letters':'\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184'},\n    {'base':'d', 'letters':'\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A'},\n    {'base':'dz','letters':'\\u01F3\\u01C6'},\n    {'base':'e', 'letters':'\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD'},\n    {'base':'f', 'letters':'\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C'},\n    {'base':'g', 'letters':'\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F'},\n    {'base':'h', 'letters':'\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265'},\n    {'base':'hv','letters':'\\u0195'},\n    {'base':'i', 'letters':'\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131'},\n    {'base':'j', 'letters':'\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249'},\n    {'base':'k', 'letters':'\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3'},\n    {'base':'l', 'letters':'\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747'},\n    {'base':'lj','letters':'\\u01C9'},\n    {'base':'m', 'letters':'\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F'},\n    {'base':'n', 'letters':'\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5'},\n    {'base':'nj','letters':'\\u01CC'},\n    {'base':'o', 'letters':'\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275'},\n    {'base':'oi','letters':'\\u01A3'},\n    {'base':'ou','letters':'\\u0223'},\n    {'base':'oo','letters':'\\uA74F'},\n    {'base':'p','letters':'\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755'},\n    {'base':'q','letters':'\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759'},\n    {'base':'r','letters':'\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783'},\n    {'base':'s','letters':'\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B'},\n    {'base':'t','letters':'\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787'},\n    {'base':'tz','letters':'\\uA729'},\n    {'base':'u','letters': '\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289'},\n    {'base':'v','letters':'\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C'},\n    {'base':'vy','letters':'\\uA761'},\n    {'base':'w','letters':'\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73'},\n    {'base':'x','letters':'\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D'},\n    {'base':'y','letters':'\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF'},\n    {'base':'z','letters':'\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763'}\n];\n\nvar diacriticsMap = {};\nfor (var i=0; i &lt; defaultDiacriticsRemovalap.length; i++){\n    var letters = defaultDiacriticsRemovalap[i].letters.split(\"\");\n    for (var j=0; j &lt; letters.length ; j++){\n        diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base;\n    }\n}\n\n// \"what?\" version ... http://jsperf.com/diacritics/12\nfunction removeDiacritics (str) {\n    return str.replace(/[^\\u0000-\\u007E]/g, function(a){ \n       return diacriticsMap[a] || a; \n    });\n}\n</code></pre>\n\n<p>To test my theory I wrote a test in <a href=\"http://jsperf.com/diacritics/12\">http://jsperf.com/diacritics/12</a>. Results:</p>\n\n<p>Testing in Chrome 28.0.1500.95 32-bit on Windows 8 64-bit:<br/>\nUsing Regexp<br/>\n4,558 ops/sec \u00b14.16%. 37% slower<br/>\nString Builder style<br/>\n7,308 ops/sec \u00b14.88%. fastest</p>\n\n<h2>Update</h2>\n\n<p>Testing in Chrome 33.0.1750 on Windows 8 64-bit:<br/></p>\n\n<p>Using Regexp<br/>\n5,260 \u00b11.25% ops/sec 76% slower<br/>\nUsing @skerit version<br/>\n22,138 \u00b12.12% ops/sec fastest<br/></p>\n\n<h3>Update - 19/03/2014</h3>\n\n<p>Adding missing \"OE\" diacritics.</p>\n\n<h3>Update - 27/03/2014</h3>\n\n<p>Using a faster way to transverse a string using js - \"What?\" Version</p>\n\n<p><img src=\"http://i.stack.imgur.com/PlU88.png\" alt=\"jsPerf comparision\"></p>\n\n<h3>Update - 14/05/2014</h3>\n\n<p>Community wiki</p>\n",
                    "is_accepted": true,
                    "score": 56
                },
                {
                    "body": "<p>I have forked <a href=\"http://stackoverflow.com/users/384701/billy\">billy</a>'s code \n<a href=\"http://jsfiddle.net/billybraga/UHmnf/\" rel=\"nofollow\">http://jsfiddle.net/billybraga/UHmnf/</a> (from his <a href=\"http://stackoverflow.com/a/13475120/2426309\">post</a>) into this: <a href=\"http://jsfiddle.net/infralabs/dJX58/\" rel=\"nofollow\">http://jsfiddle.net/infralabs/dJX58/</a></p>\n\n<p>I corrected transcription of <em>\u017f</em> and <em>\u00df</em> characters and also added coversion of these ones: <em>\u00de\u00fe</em>, <em>\u00d0\u00f0</em>, <em>\u014a\u014b</em>, <em>\u0132\u0133</em>, <em>\u0152\u0153</em>.</p>\n\n<p>The modified snippet is below:</p>\n\n<pre><code>var defaultDiacriticsRemovalMap = [{\n    'base': \"A\",\n        'letters': /(&amp;#65;|&amp;#9398;|&amp;#65313;|&amp;#192;|&amp;#193;|&amp;#194;|&amp;#7846;|&amp;#7844;|&amp;#7850;|&amp;#7848;|&amp;#195;|&amp;#256;|&amp;#258;|&amp;#7856;|&amp;#7854;|&amp;#7860;|&amp;#7858;|&amp;#550;|&amp;#480;|&amp;#196;|&amp;#478;|&amp;#7842;|&amp;#197;|&amp;#506;|&amp;#461;|&amp;#512;|&amp;#514;|&amp;#7840;|&amp;#7852;|&amp;#7862;|&amp;#7680;|&amp;#260;|&amp;#570;|&amp;#11375;|[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F])/g\n}, {\n    'base': \"AA\",\n        'letters': /(&amp;#42802;|[\\uA732])/g\n}, {\n    'base': \"AE\",\n        'letters': /(&amp;#198;|&amp;#508;|&amp;#482;|[\\u00C6\\u01FC\\u01E2])/g\n}, {\n    'base': \"AO\",\n        'letters': /(&amp;#42804;|[\\uA734])/g\n}, {\n    'base': \"AU\",\n        'letters': /(&amp;#42806;|[\\uA736])/g\n}, {\n    'base': \"AV\",\n        'letters': /(&amp;#42808;|&amp;#42810;|[\\uA738\\uA73A])/g\n}, {\n    'base': \"AY\",\n        'letters': /(&amp;#42812;|[\\uA73C])/g\n}, {\n    'base': \"B\",\n        'letters': /(&amp;#66;|&amp;#9399;|&amp;#65314;|&amp;#7682;|&amp;#7684;|&amp;#7686;|&amp;#579;|&amp;#386;|&amp;#385;|[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181])/g\n}, {\n    'base': \"C\",\n        'letters': /(&amp;#67;|&amp;#9400;|&amp;#65315;|&amp;#262;|&amp;#264;|&amp;#266;|&amp;#268;|&amp;#199;|&amp;#7688;|&amp;#391;|&amp;#571;|&amp;#42814;|[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E])/g\n}, {\n    'base': \"D\",\n        'letters': /(&amp;#68;|&amp;#9401;|&amp;#65316;|&amp;#7690;|&amp;#270;|&amp;#7692;|&amp;#7696;|&amp;#7698;|&amp;#7694;|&amp;#272;|&amp;#395;|&amp;#394;|&amp;#393;|&amp;#42873;|&amp;#208;|[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779\\u00D0])/g\n}, {\n    'base': \"DZ\",\n        'letters': /(&amp;#497;|&amp;#452;|[\\u01F1\\u01C4])/g\n}, {\n    'base': \"Dz\",\n        'letters': /(&amp;#498;|&amp;#453;|[\\u01F2\\u01C5])/g\n}, {\n    'base': \"E\",\n        'letters': /(&amp;#69;|&amp;#9402;|&amp;#65317;|&amp;#200;|&amp;#201;|&amp;#202;|&amp;#7872;|&amp;#7870;|&amp;#7876;|&amp;#7874;|&amp;#7868;|&amp;#274;|&amp;#7700;|&amp;#7702;|&amp;#276;|&amp;#278;|&amp;#203;|&amp;#7866;|&amp;#282;|&amp;#516;|&amp;#518;|&amp;#7864;|&amp;#7878;|&amp;#552;|&amp;#7708;|&amp;#280;|&amp;#7704;|&amp;#7706;|&amp;#400;|&amp;#398;|[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E])/g\n}, {\n    'base': \"F\",\n        'letters': /(&amp;#70;|&amp;#9403;|&amp;#65318;|&amp;#7710;|&amp;#401;|&amp;#42875;|[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B])/g\n}, {\n    'base': \"G\",\n        'letters': /(&amp;#71;|&amp;#9404;|&amp;#65319;|&amp;#500;|&amp;#284;|&amp;#7712;|&amp;#286;|&amp;#288;|&amp;#486;|&amp;#290;|&amp;#484;|&amp;#403;|&amp;#42912;|&amp;#42877;|&amp;#42878;|[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E])/g\n}, {\n    'base': \"H\",\n        'letters': /(&amp;#72;|&amp;#9405;|&amp;#65320;|&amp;#292;|&amp;#7714;|&amp;#7718;|&amp;#542;|&amp;#7716;|&amp;#7720;|&amp;#7722;|&amp;#294;|&amp;#11367;|&amp;#11381;|&amp;#42893;|[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D])/g\n}, {\n    'base': \"I\",\n        'letters': /(&amp;#73;|&amp;#9406;|&amp;#65321;|&amp;#204;|&amp;#205;|&amp;#206;|&amp;#296;|&amp;#298;|&amp;#300;|&amp;#304;|&amp;#207;|&amp;#7726;|&amp;#7880;|&amp;#463;|&amp;#520;|&amp;#522;|&amp;#7882;|&amp;#302;|&amp;#7724;|&amp;#407;|[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197])/g\n}, {\n    'base': \"J\",\n        'letters': /(&amp;#74;|&amp;#9407;|&amp;#65322;|&amp;#308;|&amp;#584;|[\\u004A\\u24BF\\uFF2A\\u0134\\u0248])/g\n}, {\n    'base': \"K\",\n        'letters': /(&amp;#75;|&amp;#9408;|&amp;#65323;|&amp;#7728;|&amp;#488;|&amp;#7730;|&amp;#310;|&amp;#7732;|&amp;#408;|&amp;#11369;|&amp;#42816;|&amp;#42818;|&amp;#42820;|&amp;#42914;|[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2])/g\n}, {\n    'base': \"L\",\n        'letters': /(&amp;#76;|&amp;#9409;|&amp;#65324;|&amp;#319;|&amp;#313;|&amp;#317;|&amp;#7734;|&amp;#7736;|&amp;#315;|&amp;#7740;|&amp;#7738;|&amp;#321;|&amp;#573;|&amp;#11362;|&amp;#11360;|&amp;#42824;|&amp;#42822;|&amp;#42880;|[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780])/g\n}, {\n    'base': \"LJ\",\n        'letters': /(&amp;#455;|[\\u01C7])/g\n}, {\n    'base': \"Lj\",\n        'letters': /(&amp;#456;|[\\u01C8])/g\n}, {\n    'base': \"M\",\n        'letters': /(&amp;#77;|&amp;#9410;|&amp;#65325;|&amp;#7742;|&amp;#7744;|&amp;#7746;|&amp;#11374;|&amp;#412;|[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C])/g\n}, {\n    'base': \"N\",\n        'letters': /(&amp;#78;|&amp;#9411;|&amp;#65326;|&amp;#504;|&amp;#323;|&amp;#209;|&amp;#7748;|&amp;#327;|&amp;#7750;|&amp;#325;|&amp;#7754;|&amp;#7752;|&amp;#544;|&amp;#413;|&amp;#42896;|&amp;#42916;|&amp;#330;|[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4\\u014A])/g\n}, {\n    'base': \"NJ\",\n        'letters': /(&amp;#458;|[\\u01CA])/g\n}, {\n    'base': \"Nj\",\n        'letters': /(&amp;#459;|[\\u01CB])/g\n}, {\n    'base': \"O\",\n        'letters': /(&amp;#79;|&amp;#9412;|&amp;#65327;|&amp;#210;|&amp;#211;|&amp;#212;|&amp;#7890;|&amp;#7888;|&amp;#7894;|&amp;#7892;|&amp;#213;|&amp;#7756;|&amp;#556;|&amp;#7758;|&amp;#332;|&amp;#7760;|&amp;#7762;|&amp;#334;|&amp;#558;|&amp;#560;|&amp;#214;|&amp;#554;|&amp;#7886;|&amp;#336;|&amp;#465;|&amp;#524;|&amp;#526;|&amp;#416;|&amp;#7900;|&amp;#7898;|&amp;#7904;|&amp;#7902;|&amp;#7906;|&amp;#7884;|&amp;#7896;|&amp;#490;|&amp;#492;|&amp;#216;|&amp;#510;|&amp;#390;|&amp;#415;|&amp;#42826;|&amp;#42828;|[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C])/g\n}, {\n    'base': \"OE\",\n        'letters': /(&amp;#338;|[\\u0152])/g\n}, {\n    'base': \"OI\",\n        'letters': /(&amp;#418;|[\\u01A2])/g\n}, {\n    'base': \"OO\",\n        'letters': /(&amp;#42830;|[\\uA74E])/g\n}, {\n    'base': \"OU\",\n        'letters': /(&amp;#546;|[\\u0222])/g\n}, {\n    'base': \"P\",\n        'letters': /(&amp;#80;|&amp;#9413;|&amp;#65328;|&amp;#7764;|&amp;#7766;|&amp;#420;|&amp;#11363;|&amp;#42832;|&amp;#42834;|&amp;#42836;|[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754])/g\n}, {\n    'base': \"Q\",\n        'letters': /(&amp;#81;|&amp;#9414;|&amp;#65329;|&amp;#42838;|&amp;#42840;|&amp;#586;|[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A])/g\n}, {\n    'base': \"R\",\n        'letters': /(&amp;#82;|&amp;#9415;|&amp;#65330;|&amp;#340;|&amp;#7768;|&amp;#344;|&amp;#528;|&amp;#530;|&amp;#7770;|&amp;#7772;|&amp;#342;|&amp;#7774;|&amp;#588;|&amp;#11364;|&amp;#42842;|&amp;#42918;|&amp;#42882;|[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782])/g\n}, {\n    'base': \"S\",\n        'letters': /(&amp;#83;|&amp;#9416;|&amp;#65331;|&amp;#7838;|&amp;#346;|&amp;#7780;|&amp;#348;|&amp;#7776;|&amp;#352;|&amp;#7782;|&amp;#7778;|&amp;#7784;|&amp;#536;|&amp;#350;|&amp;#11390;|&amp;#42920;|&amp;#42884;|[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784])/g\n}, {\n    'base': \"T\",\n        'letters': /(&amp;#84;|&amp;#9417;|&amp;#65332;|&amp;#7786;|&amp;#356;|&amp;#7788;|&amp;#538;|&amp;#354;|&amp;#7792;|&amp;#7790;|&amp;#358;|&amp;#428;|&amp;#430;|&amp;#574;|&amp;#42886;|[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786])/g\n}, {\n    'base': \"TH\",\n        'letters': /(&amp;#222;|[\\u00DE])/g\n}, {\n    'base': \"TZ\",\n        'letters': /(&amp;#42792;|[\\uA728])/g\n}, {\n    'base': \"U\",\n        'letters': /(&amp;#85;|&amp;#9418;|&amp;#65333;|&amp;#217;|&amp;#218;|&amp;#219;|&amp;#360;|&amp;#7800;|&amp;#362;|&amp;#7802;|&amp;#364;|&amp;#220;|&amp;#475;|&amp;#471;|&amp;#469;|&amp;#473;|&amp;#7910;|&amp;#366;|&amp;#368;|&amp;#467;|&amp;#532;|&amp;#534;|&amp;#431;|&amp;#7914;|&amp;#7912;|&amp;#7918;|&amp;#7916;|&amp;#7920;|&amp;#7908;|&amp;#7794;|&amp;#370;|&amp;#7798;|&amp;#7796;|&amp;#580;|[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244])/g\n}, {\n    'base': \"V\",\n        'letters': /(&amp;#86;|&amp;#9419;|&amp;#65334;|&amp;#7804;|&amp;#7806;|&amp;#434;|&amp;#42846;|&amp;#581;|[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245])/g\n}, {\n    'base': \"VY\",\n        'letters': /(&amp;#42848;|[\\uA760])/g\n}, {\n    'base': \"W\",\n        'letters': /(&amp;#87;|&amp;#9420;|&amp;#65335;|&amp;#7808;|&amp;#7810;|&amp;#372;|&amp;#7814;|&amp;#7812;|&amp;#7816;|&amp;#11378;|[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72])/g\n}, {\n    'base': \"X\",\n        'letters': /(&amp;#88;|&amp;#9421;|&amp;#65336;|&amp;#7818;|&amp;#7820;|[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C])/g\n}, {\n    'base': \"Y\",\n        'letters': /(&amp;#89;|&amp;#9422;|&amp;#65337;|&amp;#7922;|&amp;#221;|&amp;#374;|&amp;#7928;|&amp;#562;|&amp;#7822;|&amp;#376;|&amp;#7926;|&amp;#7924;|&amp;#435;|&amp;#590;|&amp;#7934;|[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE])/g\n}, {\n    'base': \"Z\",\n        'letters': /(&amp;#90;|&amp;#9423;|&amp;#65338;|&amp;#377;|&amp;#7824;|&amp;#379;|&amp;#381;|&amp;#7826;|&amp;#7828;|&amp;#437;|&amp;#548;|&amp;#11391;|&amp;#11371;|&amp;#42850;|[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762])/g\n}, {\n    'base': \"a\",\n        'letters': /(&amp;#97;|&amp;#9424;|&amp;#65345;|&amp;#7834;|&amp;#224;|&amp;#225;|&amp;#226;|&amp;#7847;|&amp;#7845;|&amp;#7851;|&amp;#7849;|&amp;#227;|&amp;#257;|&amp;#259;|&amp;#7857;|&amp;#7855;|&amp;#7861;|&amp;#7859;|&amp;#551;|&amp;#481;|&amp;#228;|&amp;#479;|&amp;#7843;|&amp;#229;|&amp;#507;|&amp;#462;|&amp;#513;|&amp;#515;|&amp;#7841;|&amp;#7853;|&amp;#7863;|&amp;#7681;|&amp;#261;|&amp;#11365;|&amp;#592;|[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250])/g\n}, {\n    'base': \"aa\",\n        'letters': /(&amp;#42803;|[\\uA733])/g\n}, {\n    'base': \"ae\",\n        'letters': /(&amp;#230;|&amp;#509;|&amp;#483;|[\\u00E6\\u01FD\\u01E3])/g\n}, {\n    'base': \"ao\",\n        'letters': /(&amp;#42805;|[\\uA735])/g\n}, {\n    'base': \"au\",\n        'letters': /(&amp;#42807;|[\\uA737])/g\n}, {\n    'base': \"av\",\n        'letters': /(&amp;#42809;|&amp;#42811;|[\\uA739\\uA73B])/g\n}, {\n    'base': \"ay\",\n        'letters': /(&amp;#42813;|[\\uA73D])/g\n}, {\n    'base': \"b\",\n        'letters': /(&amp;#98;|&amp;#9425;|&amp;#65346;|&amp;#7683;|&amp;#7685;|&amp;#7687;|&amp;#384;|&amp;#387;|&amp;#595;|[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253])/g\n}, {\n    'base': \"c\",\n        'letters': /(&amp;#99;|&amp;#9426;|&amp;#65347;|&amp;#263;|&amp;#265;|&amp;#267;|&amp;#269;|&amp;#231;|&amp;#7689;|&amp;#392;|&amp;#572;|&amp;#42815;|&amp;#8580;|[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184])/g\n}, {\n    'base': \"d\",\n        'letters': /(&amp;#100;|&amp;#9427;|&amp;#65348;|&amp;#7691;|&amp;#271;|&amp;#7693;|&amp;#7697;|&amp;#7699;|&amp;#7695;|&amp;#273;|&amp;#396;|&amp;#598;|&amp;#599;|&amp;#42874;|&amp;#240;|[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A\\u00F0])/g\n}, {\n    'base': \"dz\",\n        'letters': /(&amp;#499;|&amp;#454;|[\\u01F3\\u01C6])/g\n}, {\n    'base': \"e\",\n        'letters': /(&amp;#101;|&amp;#9428;|&amp;#65349;|&amp;#232;|&amp;#233;|&amp;#234;|&amp;#7873;|&amp;#7871;|&amp;#7877;|&amp;#7875;|&amp;#7869;|&amp;#275;|&amp;#7701;|&amp;#7703;|&amp;#277;|&amp;#279;|&amp;#235;|&amp;#7867;|&amp;#283;|&amp;#517;|&amp;#519;|&amp;#7865;|&amp;#7879;|&amp;#553;|&amp;#7709;|&amp;#281;|&amp;#7705;|&amp;#7707;|&amp;#583;|&amp;#603;|&amp;#477;|[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD])/g\n}, {\n    'base': \"f\",\n        'letters': /(&amp;#102;|&amp;#9429;|&amp;#65350;|&amp;#7711;|&amp;#402;|&amp;#42876;|[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C])/g\n}, {\n    'base': \"g\",\n        'letters': /(&amp;#103;|&amp;#9430;|&amp;#65351;|&amp;#501;|&amp;#285;|&amp;#7713;|&amp;#287;|&amp;#289;|&amp;#487;|&amp;#291;|&amp;#485;|&amp;#608;|&amp;#42913;|&amp;#7545;|&amp;#42879;|[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F])/g\n}, {\n    'base': \"h\",\n        'letters': /(&amp;#104;|&amp;#9431;|&amp;#65352;|&amp;#293;|&amp;#7715;|&amp;#7719;|&amp;#543;|&amp;#7717;|&amp;#7721;|&amp;#7723;|&amp;#7830;|&amp;#295;|&amp;#11368;|&amp;#11382;|&amp;#613;|[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265])/g\n}, {\n    'base': \"hv\",\n        'letters': /(&amp;#405;|[\\u0195])/g\n}, {\n    'base': \"i\",\n        'letters': /(&amp;#105;|&amp;#9432;|&amp;#65353;|&amp;#236;|&amp;#237;|&amp;#238;|&amp;#297;|&amp;#299;|&amp;#301;|&amp;#239;|&amp;#7727;|&amp;#7881;|&amp;#464;|&amp;#521;|&amp;#523;|&amp;#7883;|&amp;#303;|&amp;#7725;|&amp;#616;|&amp;#305;|[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131])/g\n}, {\n    'base': \"ij\",\n        'letters': /(&amp;#307;|[\\u0133])/g\n}, {\n    'base': \"j\",\n        'letters': /(&amp;#106;|&amp;#9433;|&amp;#65354;|&amp;#309;|&amp;#496;|&amp;#585;|[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249])/g\n}, {\n    'base': \"k\",\n        'letters': /(&amp;#107;|&amp;#9434;|&amp;#65355;|&amp;#7729;|&amp;#489;|&amp;#7731;|&amp;#311;|&amp;#7733;|&amp;#409;|&amp;#11370;|&amp;#42817;|&amp;#42819;|&amp;#42821;|&amp;#42915;|[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3])/g\n}, {\n    'base': \"l\",\n        'letters': /(&amp;#108;|&amp;#9435;|&amp;#65356;|&amp;#320;|&amp;#314;|&amp;#318;|&amp;#7735;|&amp;#7737;|&amp;#316;|&amp;#7741;|&amp;#7739;|&amp;#322;|&amp;#410;|&amp;#619;|&amp;#11361;|&amp;#42825;|&amp;#42881;|&amp;#42823;|[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747])/g\n}, {\n    'base': \"lj\",\n        'letters': /(&amp;#457;|[\\u01C9])/g\n}, {\n    'base': \"m\",\n        'letters': /(&amp;#109;|&amp;#9436;|&amp;#65357;|&amp;#7743;|&amp;#7745;|&amp;#7747;|&amp;#625;|&amp;#623;|[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F])/g\n}, {\n    'base': \"n\",\n        'letters': /(&amp;#110;|&amp;#9437;|&amp;#65358;|&amp;#505;|&amp;#324;|&amp;#241;|&amp;#7749;|&amp;#328;|&amp;#7751;|&amp;#326;|&amp;#7755;|&amp;#7753;|&amp;#414;|&amp;#626;|&amp;#329;|&amp;#42897;|&amp;#42917;|&amp;#331;|[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u014B])/g\n}, {\n    'base': \"nj\",\n        'letters': /(&amp;#460;|[\\u01CC])/g\n}, {\n    'base': \"o\",\n        'letters': /(&amp;#111;|&amp;#9438;|&amp;#65359;|&amp;#242;|&amp;#243;|&amp;#244;|&amp;#7891;|&amp;#7889;|&amp;#7895;|&amp;#7893;|&amp;#245;|&amp;#7757;|&amp;#557;|&amp;#7759;|&amp;#333;|&amp;#7761;|&amp;#7763;|&amp;#335;|&amp;#559;|&amp;#561;|&amp;#246;|&amp;#555;|&amp;#7887;|&amp;#337;|&amp;#466;|&amp;#525;|&amp;#527;|&amp;#417;|&amp;#7901;|&amp;#7899;|&amp;#7905;|&amp;#7903;|&amp;#7907;|&amp;#7885;|&amp;#7897;|&amp;#491;|&amp;#493;|&amp;#248;|&amp;#511;|&amp;#596;|&amp;#42827;|&amp;#42829;|&amp;#629;|[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275])/g\n}, {\n    'base': \"oe\",\n        'letters': /(&amp;#339;|[\\u0153])/g\n}, {\n    'base': \"oi\",\n        'letters': /(&amp;#419;|[\\u01A3])/g\n}, {\n    'base': \"ou\",\n        'letters': /(&amp;#547;|[\\u0223])/g\n}, {\n    'base': \"oo\",\n        'letters': /(&amp;#42831;|[\\uA74F])/g\n}, {\n    'base': \"p\",\n        'letters': /(&amp;#112;|&amp;#9439;|&amp;#65360;|&amp;#7765;|&amp;#7767;|&amp;#421;|&amp;#7549;|&amp;#42833;|&amp;#42835;|&amp;#42837;|[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755])/g\n}, {\n    'base': \"q\",\n        'letters': /(&amp;#113;|&amp;#9440;|&amp;#65361;|&amp;#587;|&amp;#42839;|&amp;#42841;|[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759])/g\n}, {\n    'base': \"r\",\n        'letters': /(&amp;#114;|&amp;#9441;|&amp;#65362;|&amp;#341;|&amp;#7769;|&amp;#345;|&amp;#529;|&amp;#531;|&amp;#7771;|&amp;#7773;|&amp;#343;|&amp;#7775;|&amp;#589;|&amp;#637;|&amp;#42843;|&amp;#42919;|&amp;#42883;|[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783])/g\n}, {\n    'base': \"s\",\n        'letters': /(&amp;#115;|&amp;#9442;|&amp;#65363;|&amp;#347;|&amp;#7781;|&amp;#349;|&amp;#7777;|&amp;#353;|&amp;#7783;|&amp;#7779;|&amp;#7785;|&amp;#537;|&amp;#351;|&amp;#575;|&amp;#42921;|&amp;#42885;|&amp;#7835;|&amp;#383;|[\\u0073\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u017F])/g\n}, {\n    'base': \"ss\",\n        'letters': /(&amp;#223;|[\\u00DF])/g\n}, {\n    'base': \"t\",\n        'letters': /(&amp;#116;|&amp;#9443;|&amp;#65364;|&amp;#7787;|&amp;#7831;|&amp;#357;|&amp;#7789;|&amp;#539;|&amp;#355;|&amp;#7793;|&amp;#7791;|&amp;#359;|&amp;#429;|&amp;#648;|&amp;#11366;|&amp;#42887;|[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787])/g\n}, {\n    'base': \"th\",\n        'letters': /(&amp;#254;|[\\u00FE])/g\n}, {\n    'base': \"tz\",\n        'letters': /(&amp;#42793;|[\\uA729])/g\n}, {\n    'base': \"u\",\n        'letters': /(&amp;#117;|&amp;#9444;|&amp;#65365;|&amp;#249;|&amp;#250;|&amp;#251;|&amp;#361;|&amp;#7801;|&amp;#363;|&amp;#7803;|&amp;#365;|&amp;#252;|&amp;#476;|&amp;#472;|&amp;#470;|&amp;#474;|&amp;#7911;|&amp;#367;|&amp;#369;|&amp;#468;|&amp;#533;|&amp;#535;|&amp;#432;|&amp;#7915;|&amp;#7913;|&amp;#7919;|&amp;#7917;|&amp;#7921;|&amp;#7909;|&amp;#7795;|&amp;#371;|&amp;#7799;|&amp;#7797;|&amp;#649;|[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289])/g\n}, {\n    'base': \"v\",\n        'letters': /(&amp;#118;|&amp;#9445;|&amp;#65366;|&amp;#7805;|&amp;#7807;|&amp;#651;|&amp;#42847;|&amp;#652;|[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C])/g\n}, {\n    'base': \"vy\",\n        'letters': /(&amp;#42849;|[\\uA761])/g\n}, {\n    'base': \"w\",\n        'letters': /(&amp;#119;|&amp;#9446;|&amp;#65367;|&amp;#7809;|&amp;#7811;|&amp;#373;|&amp;#7815;|&amp;#7813;|&amp;#7832;|&amp;#7817;|&amp;#11379;|[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73])/g\n}, {\n    'base': \"x\",\n        'letters': /(&amp;#120;|&amp;#9447;|&amp;#65368;|&amp;#7819;|&amp;#7821;|[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D])/g\n}, {\n    'base': \"y\",\n        'letters': /(&amp;#121;|&amp;#9448;|&amp;#65369;|&amp;#7923;|&amp;#253;|&amp;#375;|&amp;#7929;|&amp;#563;|&amp;#7823;|&amp;#255;|&amp;#7927;|&amp;#7833;|&amp;#7925;|&amp;#436;|&amp;#591;|&amp;#7935;|[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF])/g\n}, {\n    'base': \"z\",\n        'letters': /(&amp;#122;|&amp;#9449;|&amp;#65370;|&amp;#378;|&amp;#7825;|&amp;#380;|&amp;#382;|&amp;#7827;|&amp;#7829;|&amp;#438;|&amp;#549;|&amp;#576;|&amp;#11372;|&amp;#42851;|[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763])/g\n}];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>All the above isn't working with decomposed character as used on Mac OS.\nIn order to remove diacritics in that case it is more simple :</p>\n\n<pre><code>r = r.replace(new RegExp(/[\\u0300-\\u036f]/g),\"\")\n</code></pre>\n\n<p>see comment from Olivier Miakinen on :\n<a href=\"https://groups.google.com/d/msg/fr.comp.lang.regexp/6IGJTbedGTM/G0sB2kAsR34J\" rel=\"nofollow\">https://groups.google.com/d/msg/fr.comp.lang.regexp/6IGJTbedGTM/G0sB2kAsR34J</a>\n(posted in french)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>UPDATE April 6 2014 : Removed false information based on broken test. Sorry for that. Use @rdllopez\u2019s unicode range solution.</p>\n\n<p>One solution that seems to be way faster by the given test :</p>\n\n<p>See the jsPerf : <a href=\"http://jsperf.com/diacritics/9\" rel=\"nofollow\">http://jsperf.com/diacritics/9</a></p>\n\n<pre><code>function removeDiacritics(str) {\n   return str.replace(/[^A-Za-z0-9\\s]+/g, function(a){\n      return diacriticsMap[a] || a; \n   });\n}\nremoveDiacritics(teste);\n</code></pre>\n\n<p>Working example: <a href=\"http://jsbin.com/sovorute/1/edit\" rel=\"nofollow\">http://jsbin.com/sovorute/1/edit</a></p>\n\n<p><em>Reasoning</em>: One reason this is much faster is because we only iterate through the special characters, picked by the negated regex pattern. The fastest of the tests (<em>String Iteration without in</em>) iterates 1001 on the given text, which means <em>every character</em>. This one iterates only 35 times and outputs the <em>same result</em>. Keep in mind that this will only replace what is indicated in the map.</p>\n\n<p>Classic article on the subject: <a href=\"http://alistapart.com/article/accent-folding-for-auto-complete\" rel=\"nofollow\">http://alistapart.com/article/accent-folding-for-auto-complete</a></p>\n\n<p><em>Credit</em>: <a href=\"http://semplicewebsites.com/removing-accents-javascript\" rel=\"nofollow\">http://semplicewebsites.com/removing-accents-javascript</a> , also provides a nice character map.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>thanks to all<br>\nI use this version and say why (because I misses those explanations at the begining, so I try to help the next reader if he is as dull as me ...)</p>\n\n<p>Remark : I wanted an efficient solution, so :</p>\n\n<ul>\n<li>only one regexp compilation (if needed)</li>\n<li>only one string scan for each string</li>\n<li>an efficient way to find the translated characters\netc ...</li>\n</ul>\n\n<p>My version is :<br>\n(there is no new technical trick inside it, only some selected ones + explanations why)</p>\n\n<pre><code>makeSortString = (function() {\n    var translate_re = /[\u00b9\u00b2\u00b3\u00e1\u00e0\u00e2\u00e3\u00e4\u00e5aaa\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5AAA\u00c6cc\u00e7\u00a9CC\u00c7\u00d0\u00d0\u00e8\u00e9\u00ea?\u00ebeeeee\u00c8\u00ca\u00cb?EEEEE\u20acgGi\u00ec\u00ed\u00ee\u00ef\u00eciii\u00cc\u00cd\u00ce\u00cf?\u00ccIIIlLnn\u00f1NN\u00d1\u00f2\u00f3\u00f4\u00f5\u00f6ooo\u00f8\u00d2\u00d3\u00d4\u00d5\u00d6OOO\u00d8\u0152r\u00aeR\u0161s?\u00df\u0160S?\u00f9\u00fa\u00fb\u00fcuuuu\u00d9\u00da\u00db\u00dcUUUU\u00fd\u00ff\u00dd\u0178\u017ezz\u017dZZ]/g;\n    var translate = {\n\"\u00b9\":\"1\",\"\u00b2\":\"2\",\"\u00b3\":\"3\",\"\u00e1\":\"a\",\"\u00e0\":\"a\",\"\u00e2\":\"a\",\"\u00e3\":\"a\",\"\u00e4\":\"a\",\"\u00e5\":\"a\",\"a\":\"a\",\"a\":\"a\",\"a\":\"a\",\"\u00c0\":\"a\",\"\u00c1\":\"a\",\"\u00c2\":\"a\",\"\u00c3\":\"a\",\"\u00c4\":\"a\",\"\u00c5\":\"a\",\"A\":\"a\",\"A\":\"a\",\n\"A\":\"a\",\"\u00c6\":\"a\",\"c\":\"c\",\"c\":\"c\",\"\u00e7\":\"c\",\"\u00a9\":\"c\",\"C\":\"c\",\"C\":\"c\",\"\u00c7\":\"c\",\"\u00d0\":\"d\",\"\u00d0\":\"d\",\"\u00e8\":\"e\",\"\u00e9\":\"e\",\"\u00ea\":\"e\",\"?\":\"e\",\"\u00eb\":\"e\",\"e\":\"e\",\"e\":\"e\",\"e\":\"e\",\"e\":\"e\",\n\"e\":\"e\",\"\u00c8\":\"e\",\"\u00ca\":\"e\",\"\u00cb\":\"e\",\"?\":\"e\",\"E\":\"e\",\"E\":\"e\",\"E\":\"e\",\"E\":\"e\",\"E\":\"e\",\"\u20ac\":\"e\",\"g\":\"g\",\"G\":\"g\",\"i\":\"i\",\"\u00ec\":\"i\",\"\u00ed\":\"i\",\"\u00ee\":\"i\",\"\u00ef\":\"i\",\"\u00ec\":\"i\",\"i\":\"i\",\n\"i\":\"i\",\"i\":\"i\",\"\u00cc\":\"i\",\"\u00cd\":\"i\",\"\u00ce\":\"i\",\"\u00cf\":\"i\",\"?\":\"i\",\"\u00cc\":\"i\",\"I\":\"i\",\"I\":\"i\",\"I\":\"i\",\"l\":\"l\",\"L\":\"l\",\"n\":\"n\",\"n\":\"n\",\"\u00f1\":\"n\",\"N\":\"n\",\"N\":\"n\",\"\u00d1\":\"n\",\"\u00f2\":\"o\",\n\"\u00f3\":\"o\",\"\u00f4\":\"o\",\"\u00f5\":\"o\",\"\u00f6\":\"o\",\"o\":\"o\",\"o\":\"o\",\"o\":\"o\",\"\u00f8\":\"o\",\"\u00d2\":\"o\",\"\u00d3\":\"o\",\"\u00d4\":\"o\",\"\u00d5\":\"o\",\"\u00d6\":\"o\",\"O\":\"o\",\"O\":\"o\",\"O\":\"o\",\"\u00d8\":\"o\",\"\u0152\":\"o\",\"r\":\"r\",\"\u00ae\":\"r\",\n\"R\":\"r\",\"\u0161\":\"s\",\"s\":\"s\",\"?\":\"s\",\"\u00df\":\"s\",\"\u0160\":\"s\",\"S\":\"s\",\"?\":\"s\",\"\u00f9\":\"u\",\"\u00fa\":\"u\",\"\u00fb\":\"u\",\"\u00fc\":\"u\",\"u\":\"u\",\"u\":\"u\",\"u\":\"u\",\"u\":\"u\",\"\u00d9\":\"u\",\"\u00da\":\"u\",\"\u00db\":\"u\",\"\u00dc\":\"u\",\n\"U\":\"u\",\"U\":\"u\",\"U\":\"u\",\"U\":\"u\",\"\u00fd\":\"y\",\"\u00ff\":\"y\",\"\u00dd\":\"y\",\"\u0178\":\"y\",\"\u017e\":\"z\",\"z\":\"z\",\"z\":\"z\",\"\u017d\":\"z\",\"Z\":\"z\",\"Z\":\"z\"\n    };\n    return function(s) {\n        return(s.replace(translate_re, function(match){return translate[match];}) );\n    }\n})();\n</code></pre>\n\n<p>and I use it this way :</p>\n\n<pre><code>var without_accents = makeSortString(\"w\u00efth\u00ea\u00fc\u00c4Tr\u00e8sB\u00efg\u00fceAk100t\");\n// I let you guess the result,\n// no I was kidding you : I give you the result : witheuatresbigueak100t\n</code></pre>\n\n<p>Comments :</p>\n\n<ul>\n<li>Tthe instruction inside if is done once (after, makeSortString != undefined)</li>\n<li>function(){...} is stored once in makeSortString, so the \"big\" translate_re and translate objects are stored once</li>\n<li>When you call makeSortString('something') it call directly the inside function which calls only s.replace(...) : it is efficient</li>\n<li>s.replace uses regexp (the special syntax of var translate_re= .... is in fact equivalent to var translate_re = new RegExp(\"[\u00b9....Z]\",\"g\"); but the compilation of the regexp is done once for all, and the scan of the s String is done one for a call of the function (not for every character as it would be in a loop)</li>\n<li>For each character found s.replace calls function(match) where parameter match contains the character found, and it call the corresponding translated character (translate[match])</li>\n<li>Translate[match] is probably efficient too as the javascript translate object is probably implemented by javascript with a hashtab or something equivalent and allow the program to find the translated character almost directly and not for instance through a loop on a array of all characters to find the right one (which would be awfully unefficient).</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I remove accentuated characters from a string ? \nEspecially in IE6, I had something like this :</p>\n\n<pre><code>        accentsTidy = function(s){\n            var r=s.toLowerCase();\n            r = r.replace(new RegExp(/\\s/g),\"\");\n            r = r.replace(new RegExp(/[\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5]/g),\"a\");\n            r = r.replace(new RegExp(/\u00e6/g),\"ae\");\n            r = r.replace(new RegExp(/\u00e7/g),\"c\");\n            r = r.replace(new RegExp(/[\u00e8\u00e9\u00ea\u00eb]/g),\"e\");\n            r = r.replace(new RegExp(/[\u00ec\u00ed\u00ee\u00ef]/g),\"i\");\n            r = r.replace(new RegExp(/\u00f1/g),\"n\");                \n            r = r.replace(new RegExp(/[\u00f2\u00f3\u00f4\u00f5\u00f6]/g),\"o\");\n            r = r.replace(new RegExp(/\u0153/g),\"oe\");\n            r = r.replace(new RegExp(/[\u00f9\u00fa\u00fb\u00fc]/g),\"u\");\n            r = r.replace(new RegExp(/[\u00fd\u00ff]/g),\"y\");\n            r = r.replace(new RegExp(/\\W/g),\"\");\n            return r;\n        };\n</code></pre>\n\n<p>but IE6 bugs me, seems it doesn't like my regular expression.</p>\n",
            "last_activity_date": 1422821928,
            "question_id": 990904,
            "score": 58,
            "tags": [
                "javascript",
                "diacritics",
                "unaccent"
            ],
            "title": "Javascript : remove accents/diacritics in strings"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Use the <a href=\"http://www.w3schools.com/jsref/jsref_replace.asp\" rel=\"nofollow\"><code>replace()</code></a> method of the <code>String</code> object.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var mystring = 'This is a string';\nvar newString = mystring.replace(/i/g, \"a\");\n</code></pre>\n\n<p>newString now is 'Thas as a strang'</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>What's the fastest I don't know, but I know what's the most readable - that what's shortest and simplest. Even if it's a little bit slower than other solution it's worth to use.</p>\n\n<p>So use:</p>\n\n<pre><code> \"string\".replace(\"a\", \"b\");\n \"string\".replace(/abc?/g, \"def\");\n</code></pre>\n\n<p>And enjoy good code instead of faster (well... 1/100000 sec. is not a difference) and ugly one. ;)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The easiest would be to use a regular expression with <em>g</em> flag to replace all instances:</p>\n\n<pre><code>str.replace(/foo/g, \"bar\")\n</code></pre>\n\n<p>This will replace all occurrences. If you just have a string, you can convert it to a RegExp object like this:</p>\n\n<pre><code>var pattern = \"foobar\",\n    re = new RegExp(pattern, \"g\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 306
                },
                {
                    "body": "<p>Try this replaceAll:\n<a href=\"http://dumpsite.com/forum/index.php?topic=4.msg8#msg8\">http://dumpsite.com/forum/index.php?topic=4.msg8#msg8</a></p>\n\n<pre><code>String.prototype.replaceAll = function(str1, str2, ignore) \n{\n    return this.replace(new RegExp(str1.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\&lt;\\&gt;\\-\\&amp;])/g,\"\\\\$&amp;\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(/\\$/g,\"$$$$\"):str2);\n} \n</code></pre>\n\n<p>It is very fast, and it will work for ALL these conditions\nthat many others fail on:</p>\n\n<pre><code>\"x\".replaceAll(\"x\", \"xyz\");\n// xyz\n\n\"x\".replaceAll(\"\", \"xyz\");\n// xyzxxyz\n\n\"aA\".replaceAll(\"a\", \"b\", true);\n// bb\n\n\"Hello???\".replaceAll(\"?\", \"!\");\n// Hello!!!\n</code></pre>\n\n<p>Let me know if you can break it, or you have something better, but make sure it can pass these 4 tests.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>I tried a number of these suggestions after realizing that an implementation I had written of this probably close to 10 years ago actually didn't work completely (nasty production bug in an long-forgotten system, isn't that always the way?!)... what I noticed is that the ones I tried (I didn't try them all) had the same problem as mine, that is, they wouldn't replace EVERY occurrence, only the first, at least for my test case of getting \"test....txt\" down to \"test.txt\" by replacing \"..\" with \".\"... maybe I missed so regex situation?  But I digress...</p>\n\n<p>So, I rewrote my implementation as follows.  It's pretty darned simple, although I suspect not the fastest but I also don't think the difference will matter with modern JS engines, unless you're doing this inside a tight loop of course, but that's always the case for anything...</p>\n\n<pre><code>function replaceSubstring(inSource, inToReplace, inReplaceWith) {\n\n  var outString = inSource;\n  while (true) {\n    var idx = outString.indexOf(inToReplace);\n    if (idx == -1) {\n      break;\n    }\n    outString = outString.substring(0, idx) + inReplaceWith +\n      outString.substring(idx + inToReplace.length);\n  }\n  return outString;\n\n}\n</code></pre>\n\n<p>Hope that helps someone!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use the following:</p>\n\n<pre><code>newStr = str.replace(/[^a-z0-9]/gi, '_');\n</code></pre>\n\n<p>or</p>\n\n<pre><code>newStr = str.replace(/[^a-zA-Z0-9]/g, '_');\n</code></pre>\n\n<p>This is going to replace all the character that are not letter or numbers to ('_'). Simple change the underscore value for whatever you want to replace it.    </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use Regex object like this</p>\n\n<p><code>var regex = new RegExp('\"', 'g');\nstr = str.replace(regex, '\\'');</code></p>\n\n<p>It will replace all occurrence of <code>\"</code> into <code>'</code>. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just thinking about it from a speed issue I believe the case sensitive example provided in the link above would be by far the fastest solution.</p>\n\n<pre><code>var token = \"\\r\\n\";\nvar newToken = \" \";\nvar oldStr = \"This is a test\\r\\nof the emergency broadcasting\\r\\nsystem.\";\nnewStr = oldStr.split(token).join(newToken);\n</code></pre>\n\n<p>newStr would be\n\"This is a test of the emergency broadcast system.\"</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>// Find, Replace, Case\n// i.e \"Test to see if this works? (Yes|No)\".replaceAll('(Yes|No)', 'Yes!');\n// i.e.2 \"Test to see if this works? (Yes|No)\".replaceAll('(yes|no)', 'Yes!', true);\nString.prototype.replaceAll = function(_f, _r, _c){ \n\n  var o = this.toString();\n  var r = '';\n  var s = o;\n  var b = 0;\n  var e = -1;\n  if(_c){ _f = _f.toLowerCase(); s = o.toLowerCase(); }\n\n  while((e=s.indexOf(_f)) &gt; -1)\n  {\n    r += o.substring(b, b+e) + _r;\n    s = s.substring(e+_f.length, s.length);\n    b += e+_f.length;\n  }\n\n  // Add Leftover\n  if(s.length&gt;0){ r+=o.substring(o.length-s.length, o.length); }\n\n  // Return New String\n  return r;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What is the fastest way to replace all instances of a <code>string/character</code> in a string in <code>Javascript</code>? A <code>while</code>, a <code>for-loop</code>, a <code>regular expression</code>?</p>\n",
            "last_activity_date": 1425462950,
            "question_id": 2116558,
            "score": 153,
            "tags": [
                "javascript",
                "string",
                "replace"
            ],
            "title": "Fastest method to replace all instances of a character in a string"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>If order is important you can create your own events and bind callbacks to fire when those events are triggered by other callbacks.</p>\n\n<pre><code>$('#mydiv').click(function(e) {\n    // maniplate #mydiv ...\n    $('#mydiv').trigger('mydiv-manipulated');\n});\n\n$('#mydiv').bind('mydiv-manipulated', function(e) {\n    // do more stuff now that #mydiv has been manipulated\n    return;\n});\n</code></pre>\n\n<p>Something like that at least.</p>\n",
                    "is_accepted": false,
                    "score": 109
                },
                {
                    "body": "<p>The order the bound callbacks are called in is managed by each jQuery object's event data.  There aren't any functions (that I know of) that allow you to view and manipulate that data directly, you can only use bind() and unbind() (or any of the equivalent helper functions).</p>\n\n<p>Dowski's method is best, you should modify the various bound callbacks to bind to an ordered sequence of custom events, with the \"first\" callback bound to the \"real\" event. That way, no matter in what order they are bound, the sequence will execute in the right way.</p>\n\n<p>The only alternative I can see is something you really, really don't want to contemplate: if you know the binding syntax of the functions may have been bound before you, attempt to un-bind all of those functions and then re-bind them in the proper order yourself.  That's just asking for trouble, because now you have duplicated code.</p>\n\n<p>It would be cool if jQuery allowed you to simply change the order of the bound events in an object's event data, but without writing some code to hook into the jQuery core that doesn't seem possible.  And there are probably implications of allowing this that I haven't thought of, so maybe it's an intentional omission.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>You can try something like this:</p>\n\n<pre><code>/**\n  * Guarantee that a event handler allways be the last to execute\n  * @param owner The jquery object with any others events handlers $(selector)\n  * @param event The event descriptor like 'click'\n  * @param handler The event handler to be executed allways at the end.\n**/\nfunction bindAtTheEnd(owner,event,handler){\n    var aux=function(){owner.unbind(event,handler);owner.bind(event,handler);};\n    bindAtTheStart(owner,event,aux,true);\n\n}\n/**\n  * Bind a event handler at the start of all others events handlers.\n  * @param owner Jquery object with any others events handlers $(selector);\n  * @param event The event descriptor for example 'click';\n  * @param handler The event handler to bind at the start.\n  * @param one If the function only be executed once.\n**/\nfunction bindAtTheStart(owner,event,handler,one){\n    var eventos,index;\n    var handlers=new Array();\n    owner.unbind(event,handler);\n    eventos=owner.data(\"events\")[event];\n    for(index=0;index&lt;eventos.length;index+=1){\n        handlers[index]=eventos[index];\n    }\n    owner.unbind(event);\n    if(one){\n        owner.one(event,handler);\n    }\n    else{\n        owner.bind(event,handler);\n    }\n    for(index=0;index&lt;handlers.length;index+=1){\n        owner.bind(event,ownerhandlers[index]);\n    }   \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code> function bindFirst(owner, event, handler)\n {\n  owner.unbind(event, handler);\n  owner.bind(event, handler);\n\n  var events = owner.data('events')[event];\n  events.unshift(events.pop());\n\n  owner.data('events')[event] = events;\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Dowski's method is good if all of your callbacks are always going to be present and you are happy with them being dependant on each other.</p>\n\n<p>If you want the callbacks to be independent of each other, though, you could be to take advantage of bubbling and attach subsequent events as delegates to parent elements.  The handlers on a parent elements will be triggered after the handlers on the element, continuing right up to the document.  This is quite good as you can use <code>event.stopPropagation()</code>, <code>event.preventDefault()</code>, etc to skip handlers and cancel or un-cancel the action.</p>\n\n<pre><code>$( '#mybutton' ).click( function(e) { \n    // Do stuff first\n} );\n\n$( '#mybutton' ).click( function(e) { \n    // Do other stuff first\n} );\n\n$( document ).delegate( '#mybutton', 'click', function(e) {\n    // Do stuff last\n} );\n</code></pre>\n\n<p>Or, if you don't like this, you could use Nick Leaches bindLast plugin to force an event to be bound last: <a href=\"https://github.com/nickyleach/jQuery.bindLast\">https://github.com/nickyleach/jQuery.bindLast</a>.</p>\n\n<p>Or, if you are using jQuery 1.5, you could also potentially do something clever with the new Deferred object.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I had been trying for ages to generify this kind of process, but in my case I was only concerned with the order of first event listener in the chain. </p>\n\n<p>If it's of any use, here is my jQuery plugin that binds an event listener that is always triggered before any others:</p>\n\n<p>** <em>UPDATED inline with jQuery changes (thanks Toskan)</em> **</p>\n\n<pre><code>(function($) {\n    $.fn.bindFirst = function(/*String*/ eventType, /*[Object])*/ eventData, /*Function*/ handler) {\n        var indexOfDot = eventType.indexOf(\".\");\n        var eventNameSpace = indexOfDot &gt; 0 ? eventType.substring(indexOfDot) : \"\";\n\n        eventType = indexOfDot &gt; 0 ? eventType.substring(0, indexOfDot) : eventType;\n        handler = handler == undefined ? eventData : handler;\n        eventData = typeof eventData == \"function\" ? {} : eventData;\n\n        return this.each(function() {\n            var $this = $(this);\n            var currentAttrListener = this[\"on\" + eventType];\n\n            if (currentAttrListener) {\n                $this.bind(eventType, function(e) {\n                    return currentAttrListener(e.originalEvent); \n                });\n\n                this[\"on\" + eventType] = null;\n            }\n\n            $this.bind(eventType + eventNameSpace, eventData, handler);\n\n            var allEvents = $this.data(\"events\") || $._data($this[0], \"events\");\n            var typeEvents = allEvents[eventType];\n            var newEvent = typeEvents.pop();\n            typeEvents.unshift(newEvent);\n        });\n    };\n})(jQuery);\n</code></pre>\n\n<p><strong>Things to note:</strong></p>\n\n<ul>\n<li>This hasn't been fully tested.</li>\n<li>It relies on the internals of the jQuery framework not changing (only tested with 1.5.2).</li>\n<li>It will not necessarily get triggered before event listeners that are bound in any way other than as an attribute of the source element or using jQuery bind() and other associated functions.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>just bind handler normally and then run:</p>\n\n<pre><code>element.data('events').action.reverse();\n</code></pre>\n\n<p>so for example:</p>\n\n<pre><code>$('#mydiv').data('events').click.reverse();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>for ajax calls, there is an ajax built in event that can be used:</p>\n\n<pre><code>var jqxhr = $.post(&lt;post command&gt;, {data}, function(data) {\n  ... your code\n});\njqxhr.complete(function() {\n.. code to run on complete\n});\n</code></pre>\n\n<p>works great for me. Found this solution in: \n<a href=\"http://api.jquery.com/jQuery.post/\" rel=\"nofollow\">http://api.jquery.com/jQuery.post/</a></p>\n",
                    "is_accepted": false,
                    "score": -8
                },
                {
                    "body": "<p>Please note that in the jQuery universe this must be implemented differently as of version 1.8.  The following release note is from <a href=\"http://blog.jquery.com/2011/11/08/building-a-slimmer-jquery/\" rel=\"nofollow\">the jQuery blog:</a></p>\n\n<blockquote>\n  <p>.data(\u201cevents\u201d): jQuery stores its event-related data in a data object\n  named (wait for it) events on each element. This is an internal data\n  structure so in 1.8 this will be removed from the user data name space\n  so it won\u2019t conflict with items of the same name. jQuery\u2019s event data\n  can still be accessed via jQuery._data(element, \"events\")</p>\n</blockquote>\n\n<p>We do have complete control of the order in which the handlers will execute <em>in the jQuery universe</em>.  Ricoo points this out above.  Doesn't look like his answer earned him a lot of love, but this technique is very handy.  Consider, for example, any time you need to execute your own handler prior to some handler in a library widget, or you need to have the power to cancel the call to the widget's handler conditionally:</p>\n\n<pre><code>$(\"button\").click(function(e){\n    if(bSomeConditional)\n       e.stopImmediatePropagation();//Don't execute the widget's handler\n}).each(function () {\n    var aClickListeners = $._data(this, \"events\").click;\n    aClickListeners.reverse();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's my shot at this, covering different versions of jQuery:</p>\n\n<pre><code>// Binds a jQuery event to elements at the start of the event chain for that type.\njQuery.extend({\n    _bindEventHandlerAtStart: function ($elements, eventType, handler) {\n        var _data;\n\n        $elements.bind(eventType, handler);\n        // This bound the event, naturally, at the end of the event chain. We\n        // need it at the start.\n\n        if (typeof jQuery._data === 'function') {\n            // Since jQuery 1.8.1, it seems, that the events object isn't\n            // available through the public API `.data` method.\n            // Using `$._data, where it exists, seems to work.\n            _data = true;\n        }\n\n        $elements.each(function (index, element) {\n            var events;\n\n            if (_data) {\n                events = jQuery._data(element, 'events')[eventType];\n            } else {\n                events = jQuery(element).data('events')[eventType];\n            }\n\n            events.unshift(events.pop());\n\n            if (_data) {\n                jQuery._data(element, 'events')[eventType] = events;\n            } else {\n                jQuery(element).data('events')[eventType] = events;\n            }\n        });\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JQuery 1.5 introduces promises, and here's the simplest implementation I've seen to control order of execution. Full documentation at <a href=\"http://api.jquery.com/jquery.when/\" rel=\"nofollow\">http://api.jquery.com/jquery.when/</a></p>\n\n<pre><code>$.when( $('#myDiv').css('background-color', 'red') )\n .then( alert('hi!') )\n .then( myClickFunction( $('#myID') ) )\n .then( myThingToRunAfterClick() );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Lets say I have a web app which has a page that may contain 4 script blocks - the script I write may be found in one of those blocks, but I do not know which one, that is handled by the controller. </p>\n\n<p>I bind some <code>onclick</code> events to a button, but I find that they sometimes execute in an order I did not expect. </p>\n\n<p>Is there a way to ensure order, or how have you handled this problem in the past?</p>\n",
            "last_activity_date": 1418334850,
            "question_id": 290254,
            "score": 106,
            "tags": [
                "javascript",
                "jquery",
                "events"
            ],
            "title": "How to order events bound with jQuery"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>From <a href=\"http://www.alexandre-gomes.com/?p=115\">Alexandre Gomes Blog</a>  I have not tried it.  Let me know if it works for you.</p>\n\n<pre><code>function getScrollBarWidth () {\n  var inner = document.createElement('p');\n  inner.style.width = \"100%\";\n  inner.style.height = \"200px\";\n\n  var outer = document.createElement('div');\n  outer.style.position = \"absolute\";\n  outer.style.top = \"0px\";\n  outer.style.left = \"0px\";\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"200px\";\n  outer.style.height = \"150px\";\n  outer.style.overflow = \"hidden\";\n  outer.appendChild (inner);\n\n  document.body.appendChild (outer);\n  var w1 = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  var w2 = inner.offsetWidth;\n  if (w1 == w2) w2 = outer.clientWidth;\n\n  document.body.removeChild (outer);\n\n  return (w1 - w2);\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 63
                },
                {
                    "body": "<pre><code>window.scrollBarWidth = function() {\n  document.body.style.overflow = 'hidden'; \n  var width = document.body.clientWidth;\n  document.body.style.overflow = 'scroll'; \n  width -= document.body.clientWidth; \n  if(!width) width = document.body.offsetWidth - document.body.clientWidth;\n  document.body.style.overflow = ''; \n  return width; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>This is only script I've found, which is working in webkit browsers ... :)</p>\n\n<pre><code>$.scrollbarWidth = function() {\n  var parent, child, width;\n\n  if(width===undefined) {\n    parent = $('&lt;div style=\"width:50px;height:50px;overflow:auto\"&gt;&lt;div/&gt;&lt;/div&gt;').appendTo('body');\n    child=parent.children();\n    width=child.innerWidth()-child.height(99).innerWidth();\n    parent.remove();\n  }\n\n return width;\n};\n</code></pre>\n\n<p>Minimized version:</p>\n\n<pre><code>$.scrollbarWidth=function(){var a,b,c;if(c===undefined){a=$('&lt;div style=\"width:50px;height:50px;overflow:auto\"&gt;&lt;div/&gt;&lt;/div&gt;').appendTo('body');b=a.children();c=b.innerWidth()-b.height(99).innerWidth();a.remove()}return c};\n</code></pre>\n\n<p>And you have to call it when document is ready ... so</p>\n\n<pre><code>$(function(){ console.log($.scrollbarWidth()); });\n</code></pre>\n\n<p>Tested 2012-03-28 on Windows 7 in latest FF, Chrome, IE &amp; Safari and 100% working.</p>\n\n<p>source: <a href=\"http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth\">http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Using jQuery, you can shorten Matthew Vines answer to:</p>\n\n<pre><code>function getScrollBarWidth () {\n    var $outer = $('&lt;div&gt;').css({visibility: 'hidden', width: 100, overflow: 'scroll'}).appendTo('body'),\n        widthWithScroll = $('&lt;div&gt;').css({width: '100%'}).appendTo($outer).outerWidth();\n    $outer.remove();\n    return 100 - widthWithScroll;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The way <code>Antiscroll.js</code> does it in it's code is:</p>\n\n<pre><code>function scrollbarSize () {\n  var div = $(\n      '&lt;div class=\"antiscroll-inner\" style=\"width:50px;height:50px;overflow-y:scroll;'\n    + 'position:absolute;top:-200px;left:-200px;\"&gt;&lt;div style=\"height:100px;width:100%\"/&gt;'\n    + '&lt;/div&gt;'\n  );\n\n  $('body').append(div);\n  var w1 = $(div).innerWidth();\n  var w2 = $('div', div).innerWidth();\n  $(div).remove();\n\n  return w1 - w2;\n};\n</code></pre>\n\n<p>The code is from here: <a href=\"https://github.com/LearnBoost/antiscroll/blob/master/antiscroll.js#L447\" rel=\"nofollow\">https://github.com/LearnBoost/antiscroll/blob/master/antiscroll.js#L447</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>if you are looking for a simple operation, just mix plain dom js and jquery,</p>\n\n<pre><code>var swidth=(window.innerWidth-$(window).width());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>detectScrollbarWidthHeight: function() {\n    var div = document.createElement(\"div\");\n    div.style.overflow = \"scroll\";\n    div.style.visibility = \"hidden\";\n    div.style.position = 'absolute';\n    div.style.width = '100px';\n    div.style.height = '100px';\n    document.body.appendChild(div);\n\n    return {\n        width: div.offsetWidth - div.clientWidth,\n        height: div.offsetHeight - div.clientHeight\n    };\n},\n</code></pre>\n\n<p>Tested in Chrome, FF, IE8, IE11.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found a simple solution that works for elements inside of the page, instead of the page itself:\n<code>$('#element')[0].offsetHeight - $('#element')[0].clientHeight</code></p>\n\n<p>This returns the height of the x-axis scrollbar.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>With jquery (only tested in firefox): </p>\n\n<pre><code>function getScrollBarHeight() {\n    var jTest = $('&lt;div style=\"display:none;width:50px;overflow: scroll\"&gt;&lt;div style=\"width:100px;\"&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;');\n    $('body').append(jTest);\n    var h = jTest.innerHeight();\n    jTest.css({\n        overflow: 'auto',\n        width: '200px'\n    });\n    var h2 = jTest.innerHeight();\n    return h - h2;\n}\n\nfunction getScrollBarWidth() {\n    var jTest = $('&lt;div style=\"display:none;height:50px;overflow: scroll\"&gt;&lt;div style=\"height:100px;\"&gt;&lt;/div&gt;&lt;/div&gt;');\n    $('body').append(jTest);\n    var w = jTest.innerWidth();\n    jTest.css({\n        overflow: 'auto',\n        height: '200px'\n    });\n    var w2 = jTest.innerWidth();\n    return w - w2;\n}\n</code></pre>\n\n<p>But I actually like @Steve's answer better.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I determine the height of a horizontal scrollbar, or the width of a vertical one in javascript ?</p>\n",
            "last_activity_date": 1411470854,
            "question_id": 986937,
            "score": 67,
            "tags": [
                "javascript",
                "scrollbar",
                "dimensions"
            ],
            "title": "How can I get the browser&#39;s scrollbar sizes?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Yes, that's a sensible way--that's all an object is (well, for this use-case)--a bunch of keys/values with direct access.</p>\n\n<p>You'd need to check to see if it's already there before adding it, or if you just need to indicate presence, \"adding\" it again doesn't actually change anything, it just sets it on the object again.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Using an Object works very well.  If <code>obj</code> is your object and <code>A</code> is a variable that has the value you want to operate on in the set, then you can do these:</p>\n\n<p>Initialization code:</p>\n\n<pre><code>// create empty object\nvar obj = {};\n\n// or create an object with some items already in it\nvar obj = {\"1\":true, \"2\":true, \"3\":true, \"9\":true};\n</code></pre>\n\n<p><strong>Question 1:</strong> Is <code>A</code> in the list:</p>\n\n<pre><code>if (A in obj) {\n    // put code here\n}\n</code></pre>\n\n<p><strong>Question 2:</strong> Delete 'A' from the list if it's there:</p>\n\n<pre><code>delete obj[A];\n</code></pre>\n\n<p><strong>Question 3:</strong> Add 'A' to the list if it wasn't already there</p>\n\n<pre><code>obj[A] = true;\n</code></pre>\n\n<hr>\n\n<p>For completeness, the test for whether <code>A</code> is in the list is a little safer with this:</p>\n\n<pre><code>if (Object.prototype.hasOwnProperty.call(obj, A))\n    // put code here\n}\n</code></pre>\n\n<p>because of potential conflict between built-in methods and/or properties on the base Object like the <code>constructor</code> property.</p>\n\n<hr>\n\n<p><strong>Sidebar:</strong> The current working version of ECMAScript 6 (not yet finalized) has a built-in Set object.  It is implemented in Firefox now and in Chrome, but requires a special option in Chrome to enable experimental features.  One advantage of the the built-in Set object is that it doesn't coerce all keys to a string like the Object does so you can have both 5 and \"5\" as separate keys.  Here's <a href=\"http://www.nczonline.net/blog/2012/09/25/ecmascript-6-collections-part-1-sets/\">an article</a> that describes some of the capabilities and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">MDN's documentation</a> on the Set object.</p>\n\n<p>I have now written a polyfill for the ES6 set object so you could start using that now and it will automatically defer to the built-in set object if the browser supports it.  This has the advantage that you're writing ES6 compatible code that will work all the way back to IE7.  But, there are some downsides.  The ES6 set interface takes advantage of the ES6 iterators so you can do things like <code>for (item of mySet)</code> and it will automatically iterate through the set for you.  But, this type of language feature cannot be implemented via polyfill.  You can still iterate an ES6 set without using the new ES6 languages features, but frankly without the new language features, it isn't as convenient as the other set interface I include below.</p>\n\n<p>You can decide which one works best for you after looking at both.  The ES6 set polyfill is here: <a href=\"https://github.com/jfriend00/ES6-Set\">https://github.com/jfriend00/ES6-Set</a>.</p>\n\n<p>FYI, in my own testing, I've noticed that the Firefox v29 Set implementation is not fully up-to-date on the current draft of the spec.  For example, you can't chain <code>.add()</code> method calls like the spec describes and my polyfill supports.  This is probably a matter of a specification in motion as it is not yet finalized.</p>\n\n<hr>\n\n<p><strong>Pre-Built Set objects:</strong> If you want an already built object that has methods for operating on a set that you can use in any browser, you can use a series of different pre-built objects that implement different types of sets.  There is a miniSet which is small code that implements the basics of a set object.  It also has a more feature rich set object and several derivations including a Dictionary (let's you store/retrieve a value for each key) and an ObjectSet (let's you keep a set of objects - either JS objects or DOM objects where you either supply the function that generates a unique key for each one or the ObjectSet will generate the key for you).</p>\n\n<p>Here's a copy of the code for the miniSet (most up-to-date code is <a href=\"https://github.com/jfriend00/Javascript-Set\">here on github</a>).</p>\n\n<pre><code>\"use strict\";\n//-------------------------------------------\n// Simple implementation of a Set in javascript\n//\n// Supports any element type that can uniquely be identified\n//    with its string conversion (e.g. toString() operator).\n// This includes strings, numbers, dates, etc...\n// It does not include objects or arrays though\n//    one could implement a toString() operator\n//    on an object that would uniquely identify\n//    the object.\n// \n// Uses a javascript object to hold the Set\n//\n// This is a subset of the Set object designed to be smaller and faster, but\n// not as extensible.  This implementation should not be mixed with the Set object\n// as in don't pass a miniSet to a Set constructor or vice versa.  Both can exist and be\n// used separately in the same project, though if you want the features of the other\n// sets, then you should probably just include them and not include miniSet as it's\n// really designed for someone who just wants the smallest amount of code to get\n// a Set interface.\n//\n// s.add(key)                      // adds a key to the Set (if it doesn't already exist)\n// s.add(key1, key2, key3)         // adds multiple keys\n// s.add([key1, key2, key3])       // adds multiple keys\n// s.add(otherSet)                 // adds another Set to this Set\n// s.add(arrayLikeObject)          // adds anything that a subclass returns true on _isPseudoArray()\n// s.remove(key)                   // removes a key from the Set\n// s.remove([\"a\", \"b\"]);           // removes all keys in the passed in array\n// s.remove(\"a\", \"b\", [\"first\", \"second\"]);   // removes all keys specified\n// s.has(key)                      // returns true/false if key exists in the Set\n// s.isEmpty()                     // returns true/false for whether Set is empty\n// s.keys()                        // returns an array of keys in the Set\n// s.clear()                       // clears all data from the Set\n// s.each(fn)                      // iterate over all items in the Set (return this for method chaining)\n//\n// All methods return the object for use in chaining except when the point\n// of the method is to return a specific value (such as .keys() or .isEmpty())\n//-------------------------------------------\n\n\n// polyfill for Array.isArray\nif(!Array.isArray) {\n    Array.isArray = function (vArg) {\n        return Object.prototype.toString.call(vArg) === \"[object Array]\";\n    };\n}\n\nfunction MiniSet(initialData) {\n    // Usage:\n    // new MiniSet()\n    // new MiniSet(1,2,3,4,5)\n    // new MiniSet([\"1\", \"2\", \"3\", \"4\", \"5\"])\n    // new MiniSet(otherSet)\n    // new MiniSet(otherSet1, otherSet2, ...)\n    this.data = {};\n    this.add.apply(this, arguments);\n}\n\nMiniSet.prototype = {\n    // usage:\n    // add(key)\n    // add([key1, key2, key3])\n    // add(otherSet)\n    // add(key1, [key2, key3, key4], otherSet)\n    // add supports the EXACT same arguments as the constructor\n    add: function() {\n        var key;\n        for (var i = 0; i &lt; arguments.length; i++) {\n            key = arguments[i];\n            if (Array.isArray(key)) {\n                for (var j = 0; j &lt; key.length; j++) {\n                    this.data[key[j]] = key[j];\n                }\n            } else if (key instanceof MiniSet) {\n                var self = this;\n                key.each(function(val, key) {\n                    self.data[key] = val;\n                });\n            } else {\n                // just a key, so add it\n                this.data[key] = key;\n            }\n        }\n        return this;\n    },\n    // private: to remove a single item\n    // does not have all the argument flexibility that remove does\n    _removeItem: function(key) {\n        delete this.data[key];\n    },\n    // usage:\n    // remove(key)\n    // remove(key1, key2, key3)\n    // remove([key1, key2, key3])\n    remove: function(key) {\n        // can be one or more args\n        // each arg can be a string key or an array of string keys\n        var item;\n        for (var j = 0; j &lt; arguments.length; j++) {\n            item = arguments[j];\n            if (Array.isArray(item)) {\n                // must be an array of keys\n                for (var i = 0; i &lt; item.length; i++) {\n                    this._removeItem(item[i]);\n                }\n            } else {\n                this._removeItem(item);\n            }\n        }\n        return this;\n    },\n    // returns true/false on whether the key exists\n    has: function(key) {\n        return Object.prototype.hasOwnProperty.call(this.data, key);\n    },\n    // tells you if the Set is empty or not\n    isEmpty: function() {\n        for (var key in this.data) {\n            if (this.has(key)) {\n                return false;\n            }\n        }\n        return true;\n    },\n    // returns an array of all keys in the Set\n    // returns the original key (not the string converted form)\n    keys: function() {\n        var results = [];\n        this.each(function(data) {\n            results.push(data);\n        });\n        return results;\n    },\n    // clears the Set\n    clear: function() {\n        this.data = {}; \n        return this;\n    },\n    // iterate over all elements in the Set until callback returns false\n    // myCallback(key) is the callback form\n    // If the callback returns false, then the iteration is stopped\n    // returns the Set to allow method chaining\n    each: function(fn) {\n        this.eachReturn(fn);\n        return this;\n    },\n    // iterate all elements until callback returns false\n    // myCallback(key) is the callback form\n    // returns false if iteration was stopped\n    // returns true if iteration completed\n    eachReturn: function(fn) {\n        for (var key in this.data) {\n            if (this.has(key)) {\n                if (fn.call(this, this.data[key], key) === false) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n\nMiniSet.prototype.constructor = MiniSet;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 164
                },
                {
                    "body": "<p>I have started an implementation of Sets that currently works pretty well with numbers and strings. My main focus was the difference operation, so I tried to make it as efficient as I could. Forks and code reviews are welcome!</p>\n\n<p><a href=\"https://github.com/mcrisc/SetJS\" rel=\"nofollow\">https://github.com/mcrisc/SetJS</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>As of ECMAScript 6, the Set data-structure is a built-in <a href=\"http://www.nczonline.net/blog/2012/09/25/ecmascript-6-collections-part-1-sets/\">feature</a>. It has been implemented for <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/ECMAScript_6_support_in_Mozilla\">firefox</a> and also works for Chrome, after <a href=\"http://addyosmani.com/blog/ecmascript-6-resources-for-the-curious-javascripter/\">enabling experimental javascript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>You can create an Object with no properties like</p>\n\n<pre><code>var set = Object.create(null)\n</code></pre>\n\n<p>which can act as a set and eliminates the need to use <code>hasOwnProperty</code>.</p>\n\n<hr>\n\n<pre><code>var set = Object.create(null); // create an object with no properties\n\nif (A in set) { // 1. is A in the list\n  // some code\n}\ndelete set[a]; // 2. delete A from the list if it exists in the list \nset[A] = true; // 3. add A to the list if it is not already present\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>I just noticed that d3.js library has implementation of sets, maps and other data structures.\nI can't argue about their efficiency but judging by the fact that it is a popular library it must be what you need.</p>\n\n<p>The documentation is <a href=\"https://github.com/mbostock/d3/wiki/Arrays#sets\" rel=\"nofollow\">here</a></p>\n\n<p>For convenience I copy from the link (the first 3 functions are those of interest)</p>\n\n<hr>\n\n<ul>\n<li>d3.set([array])</li>\n</ul>\n\n<p>Constructs a new set. If array is specified, adds the given array of string values to the returned set.</p>\n\n<ul>\n<li>set.has(value)</li>\n</ul>\n\n<p>Returns true if and only if this set has an entry for the specified value string.</p>\n\n<ul>\n<li>set.add(value)</li>\n</ul>\n\n<p>Adds the specified value string to this set.</p>\n\n<ul>\n<li>set.remove(value)</li>\n</ul>\n\n<p>If the set contains the specified value string, removes it and returns true. Otherwise, this method does nothing and returns false.</p>\n\n<ul>\n<li>set.values()</li>\n</ul>\n\n<p>Returns an array of the string values in this set. The order of the returned values is arbitrary. Can be used as a convenient way of computing the unique values for a set of strings. For example:</p>\n\n<p>d3.set([\"foo\", \"bar\", \"foo\", \"baz\"]).values(); // \"foo\", \"bar\", \"baz\"</p>\n\n<ul>\n<li>set.forEach(function)</li>\n</ul>\n\n<p>Calls the specified function for each value in this set, passing the value as an argument. The this context of the function is this set. Returns undefined. The iteration order is arbitrary.</p>\n\n<ul>\n<li>set.empty()</li>\n</ul>\n\n<p>Returns true if and only if this set has zero values.</p>\n\n<ul>\n<li>set.size()</li>\n</ul>\n\n<p>Returns the number of values in this set.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In ES6 version of Javascript you have built in type for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow\">set</a> (<a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"nofollow\">check compatibility with your browser</a>).</p>\n\n<pre><code>var numbers = new Set([1, 2, 4]); // Set {1, 2, 4}\n</code></pre>\n\n<p>To <strong>add an element</strong> to the set you simply use <code>.add()</code>, which runs in <code>O(1)</code> and either adds the element to set (if it does not exist) or does nothing if it is already there. You can add element of any type there (arrays, strings, numbers)</p>\n\n<pre><code>numbers.add(4); // Set {1, 2, 4}\nnumbers.add(6); // Set {1, 2, 4, 6}\n</code></pre>\n\n<p>To <strong>check the number of elements</strong> in the set, you can simply use <code>.size</code>. Also runs in <code>O(1)</code></p>\n\n<pre><code>numbers.size; // 4\n</code></pre>\n\n<p>To <strong>remove the element from the set</strong> use <code>.delete()</code>. It returns true if the value was there (and was removed), and false if the value did not exist. Also runs in <code>O(1)</code>.</p>\n\n<pre><code>numbers.delete(2); // true\nnumbers.delete(2); // false\n</code></pre>\n\n<p>To <strong>check whether the element exist</strong> in a set use <code>.has()</code>, which returns true if the element is in the set and false otherwise. Also runs in <code>O(1)</code>.</p>\n\n<pre><code>numbers.has(3); // false\nnumbers.has(1); // true\n</code></pre>\n\n<hr>\n\n<p>In addition to methods you wanted, there are few additional one:</p>\n\n<ul>\n<li><code>numbers.clear();</code> would just remove all elements from the set</li>\n<li><code>numbers.forEach(callback);</code> iterating through the values of the set in insertion order</li>\n<li><code>numbers.entries();</code> create an iterator of all the values</li>\n<li><code>numbers.keys();</code> returns the keys of the set which is the same as <code>numbers.values()</code></li>\n</ul>\n\n<hr>\n\n<p>There is also a Weakset which allows to add only object-type values.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm working in JavaScript. I'd like to store a list of <em>unique</em>, unordered string values, with the following properties:</p>\n\n<ol>\n<li>a fast way to ask 'is A in the list'?</li>\n<li>a fast way to do 'delete A from the list if it exists in the list'</li>\n<li>a fast way to do 'add A to the list if it is not already present'.</li>\n</ol>\n\n<p>What I really want is a set. Any suggestions for the best way to mimic a set in JavaScript?</p>\n\n<p>This <a href=\"http://stackoverflow.com/questions/5657219/set-of-objects-in-javascript\">question recommends using an Object</a>, with the keys storing properties, and the values all set to true: is that a sensible way?</p>\n",
            "last_activity_date": 1423522368,
            "question_id": 7958292,
            "score": 123,
            "tags": [
                "javascript"
            ],
            "title": "Mimicking sets in JavaScript?"
        },
        {
            "answer_count": 25,
            "answers": [
                {
                    "body": "<p>You can use <code>concat</code> to merge arrays:</p>\n\n<pre><code>var arrays = [[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"], [\"$18\"], [\"$22\"], [\"$10\"], [\"$0\"], [\"$15\"],[\"$3\"], [\"$75\"], [\"$5\"], [\"$100\"], [\"$7\"], [\"$3\"], [\"$75\"], [\"$5\"]];\nvar merged = [];\nmerged = merged.concat.apply(merged, arrays);\n</code></pre>\n\n<p>Using the <code>apply</code> method of <code>concat</code> will just take the second parameter as an array, so the last line is identical to this:</p>\n\n<pre><code>merged.concat([\"$6\"], [\"$12\"], \u2026, [\"$75\"], [\"$5\"]);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 193
                },
                {
                    "body": "<p>To solve this problem, you don't need to import a library, a simple loop is both the simplest and <a href=\"http://jsperf.com/flatten-constant-depht-array\" rel=\"nofollow\">most efficient</a> solution :</p>\n\n<pre><code>for (var i = 0; i &lt; a.length; i++) {\n  a[i] = a[i][0];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>That's not hard, just iterate over the arrays and merge them:</p>\n\n<pre><code>var result = [], input = [[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"], [\"$18\"]];\n\nfor (var i = 0; i &lt; input.length; ++i) {\n    result = result.concat(input[i]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can use <a href=\"http://underscorejs.org/\">Underscore</a>:</p>\n\n<pre><code>var x = [[1], [2], [3, 4]];\n\n_.flatten(x); // =&gt; [1, 2, 3, 4]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Say your array of arrays is stored in obj.\nWe will store the final output in obj1.</p>\n\n<p>The trivial approach in javascript is:</p>\n\n<pre><code>for(var i=0;i&lt;obj.length;i++) \n  for(var j =0;j&lt;obj[i].length;j++) \n    obj1.push(obj[i][j]);\n</code></pre>\n\n<p>Here is the code output on the node console.</p>\n\n<pre><code>&gt; var obj=[];\nundefined\n\n&gt; obj=[[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"], [\"$18\"], [\"$22\"], [\"$10\"], [\"$0\"], [\"$15\"],[\"$3\"], [\"$75\"], [\"$5\"], [\"$100\"], [\"$7\"], [\"$3\"], [\"$75\"], [\"$5\"]]\n[ [ '$6' ],\n  [ '$12' ],\n  [ '$25' ],\n  [ '$25' ],\n  [ '$18' ],\n  [ '$22' ],\n  [ '$10' ],\n  [ '$0' ],\n  [ '$15' ],\n  [ '$3' ],\n  [ '$75' ],\n  [ '$5' ],\n  [ '$100' ],\n  [ '$7' ],\n  [ '$3' ],\n  [ '$75' ],\n  [ '$5' ] ]\n\n&gt; var obj1=[];\nundefined\n\n&gt; for(var i=0;i&lt;obj.length;i++) for(var j =0;j&lt;obj[i].length;j++) obj1.push(obj[i][j]);\n17\n\n&gt; obj1\n[ '$6',\n  '$12',\n  '$25',\n  '$25',\n  '$18',\n  '$22',\n  '$10',\n  '$0',\n  '$15',\n  '$3',\n  '$75',\n  '$5',\n  '$100',\n  '$7',\n  '$3',\n  '$75',\n  '$5' ]\n&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you only have arrays with 1 string element:</p>\n\n<pre><code>[[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"]].join(',').split(',');\n</code></pre>\n\n<p>will do the job. Bt that specifically matches your code example.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here's a short function that uses some of the newer JavaScript array methods to flatten an n-dimensional array.</p>\n\n<pre><code>// The previously posted solution actually didn't produce the correct result on nested\n// arrays.  This simpler solution does.\nfunction flatten(arr) {\n  return arr.reduce(function (flat, toFlatten) {\n    return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n  }, []);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>flatten([[1, 2, 3], [4, 5]]); // [1, 2, 3, 4, 5]\nflatten([[[1, [1.1]], 2, 3], [4, 5]]); // [1, 1.1, 2, 3, 4, 5]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Here's a simple and performant functional solution:</p>\n\n<pre><code>&gt; [].concat.apply([], [[1],[2,3],[4]])\n[ 1, 2, 3, 4 ]\n</code></pre>\n\n<p>No imperative mess.</p>\n",
                    "is_accepted": false,
                    "score": 97
                },
                {
                    "body": "<p>What about using <code>reduce(callback[, initialValue])</code> method of <code>JavaScript 1.8</code></p>\n\n<pre><code>list.reduce( function( p,n){\n    return p.concat( n  );\n},[]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>A solution for the more general case, when you may have some non-array elements in your array.</p>\n\n<pre><code>function flattenArrayOfArrays(a, r){\n    if(!r){ r = []}\n    for(var i=0; i&lt;a.length; i++){\n        if(a[i].constructor == Array){\n            flattenArrayOfArrays(a[i], r);\n        }else{\n            r.push(a[i]);\n        }\n    }\n    return r;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>It can be best done by javascript reduce function.</p>\n\n<pre><code>var arrays = [[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"], [\"$18\"], [\"$22\"], [\"$10\"], [\"$0\"], [\"$15\"],[\"$3\"], [\"$75\"], [\"$5\"], [\"$100\"], [\"$7\"], [\"$3\"], [\"$75\"], [\"$5\"]];\n\narrays = arrays.reduce(function(a, b){\n     return a.concat(b);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/zAzaH/\">js-fiddle</a></p>\n\n<p><a href=\"http://tinyurl.com/mrr9qk5\">Mozilla docs</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<pre><code>[1,[2,3],[4,[5,6]]].reduce(function(p, c) {\n    return p.concat(c instanceof Array ? \n                    c.reduce(arguments.callee, []) : \n                    [c]); \n}, []);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's another deep flatten for modern browsers:</p>\n\n<pre><code>function flatten(xs) {\n  xs = Array.prototype.concat.apply([], xs);\n  return xs.some(Array.isArray) ? flatten(xs) : xs;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>if your array only consists out of integers or strings you can use this dirty hack:</p>\n\n<pre><code>var arr = [345,2,[34],2,[524,[5456]],[5456]];\nvar flat = arr.toString().split(',');\n</code></pre>\n\n<p>Works, in FF, IE and Chrome didn't test the other browsers yet.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is my version of it. It allows you to flatten a complicated object which could be used in more scenarios:</p>\n\n<p><strong>Input</strong></p>\n\n<pre><code>var input = {\n   a: 'asdf',\n   b: [1,2,3],\n   c: [[1,2],[3,4]],\n   d: {subA: [1,2]}\n}\n</code></pre>\n\n<p><strong>Code</strong></p>\n\n<p>The function is like this:</p>\n\n<pre><code>function flatten (input, output) {\n\n  if (isArray(input)) {\n    for(var index = 0, length = input.length; index &lt; length; index++){\n      flatten(input[index], output);\n    }\n  }\n  else if (isObject(input)) {\n    for(var item in input){\n      if(input.hasOwnProperty(item)){\n        flatten(input[item], output);\n      }\n    }\n  }\n  else {\n    return output.push(input);\n  }\n};\n\nfunction isArray(obj) {\n  return Array.isArray(obj) || obj.toString() === '[object Array]';\n}\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n</code></pre>\n\n<p><strong>Usage</strong> </p>\n\n<pre><code>var output = []\n\nflatten(input, output);\n</code></pre>\n\n<p><strong>Output</strong></p>\n\n<p>[\"asdf\", 1, 2, 3, 1, 2, 3, 4, 1, 2]</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It looks like this looks like a job for RECURSION!</p>\n\n<ul>\n<li>Handles multiple levels of nesting</li>\n<li>Handles empty arrays and non array parameters</li>\n<li>Has no mutation</li>\n<li>Doesn't rely on modern browser features</li>\n</ul>\n\n<p><strong>Code:</strong></p>\n\n<pre><code>var flatten = function(toFlatten) {\n  var isArray = Object.prototype.toString.call(toFlatten) === '[object Array]';\n\n  if (isArray &amp;&amp; toFlatten.length &gt; 0) {\n    var head = toFlatten[0];\n    var tail = toFlatten.slice(1);\n\n    return flatten(head).concat(flatten(tail));\n  } else {\n    return [].concat(toFlatten);\n  }\n};\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>flatten([1,[2,3],4,[[5,6],7]]);\n// Result: [1, 2, 3, 4, 5, 6, 7] \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>What about deep flatten &amp; Object Oriented ?</h1>\n\n<pre><code>    [23, [34, 454], 12, 34].flatten();\n    // --&gt;   [23,34, 454, 12, 34]\n</code></pre>\n\n<hr>\n\n<pre><code>[23, [34, 454,[66,55]], 12, 34].flatten();\n\n// --&gt;  [23, 34, 454, [66,55], 12, 34]\n</code></pre>\n\n<h3>DEEP Flatten :</h3>\n\n<pre><code>[23, [34, 454,[66,55]], 12, 34].flatten(true);\n\n// --&gt; [23, 34, 454, 66, 55, 12, 34]\n</code></pre>\n\n<h1><a href=\"http://jsfiddle.net/abdennour/X3Xex/\" rel=\"nofollow\"><strong>DEMO</strong></a></h1>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I prefer to do it with recursion, so the nesting can be to any depth. <br/>\nsomething like that:</p>\n\n<pre><code>function flatten(array, i) {\n  i = ~~i;\n\n  if(i &gt;= array.length)\n    return array;\n\n  if(Array.isArray(array[i])) {\n    return flatten(array.slice(0,i)\n      .concat(array[i], array.slice(i+1)), i);\n  }\n\n  return flatten(array, i+1);\n}\n</code></pre>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>var weirdArray = [[],1,2,3,[4,5,6,[7,8,9,[10,11,[12,[[[[[13],[[[[14]]]]]]]]]]]]]\nflatten(weirdArray);\n//returns ==&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To flatten an array of arrays in one line:</p>\n\n<pre><code>var myArray = [[1, 2], [3, 4, 5], [6, 7]]\nmyArray.reduce(Function.prototype.apply.bind(Array.prototype.concat))\n// flattened: [ 1, 2, 3, 4, 5, 6, 7 ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Let's talk about performance. In case you're looking for a performant solution, you'd better do it in some stupid, ad-hoc way.</p>\n\n<p><a href=\"http://jsperf.com/square-brackets-vs-array-prototype\" rel=\"nofollow\">http://jsperf.com/square-brackets-vs-array-prototype</a></p>\n\n<pre><code>var count = arrays.length;\nvar merged = new Array(count);\nvar c = 0;\nfor (var i = 0; i &lt; count; ++i)\n    for (var j = 0, jlen = arrays[i].length; j &lt; jlen; ++j)\n        merged[c++] = arrays[i][j];\n</code></pre>\n\n<p>This code is about six times faster than a solution with <code>concat</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using code from there: <a href=\"http://www.codeproject.com/Tips/805364/LINQ-for-JavaScript\" rel=\"nofollow\">http://www.codeproject.com/Tips/805364/LINQ-for-JavaScript</a></p>\n\n<p>I would write: myArray.enumerable().selectMany(function(x) { return x; }).array()</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There's a much faster way of doing this than using the merge.concat.apply() method listed in the top answer, and by faster I mean more than <strong>several orders of magnitude</strong> faster. This assumes your environment has access to the ES5 Array methods.</p>\n\n<pre><code>var array2d = [\n  [\"foo\", \"bar\"],\n  [\"baz\", \"biz\"]\n];\nmerged = array2d.reduce(function(prev, next) {\n    return prev.concat(next);\n});\n</code></pre>\n\n<p>Here's the jsperf link: <a href=\"http://jsperf.com/2-dimensional-array-merge\" rel=\"nofollow\">http://jsperf.com/2-dimensional-array-merge</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm aware that this is hacky, but the must succinct way I know of to flatten an array(of any depth!) of strings(without commas!) is to turn the array into a string and then split the string on commas:</p>\n\n<pre><code>var myArray =[[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"], [\"$18\"], [\"$22\"], [\"$10\"], [\"$0\"], [\"$15\"],[\"$3\"], [\"$75\"], [\"$5\"], [\"$100\"], [\"$7\"], [\"$3\"], [\"$75\"], [\"$5\"]];\nvar myFlatArray = myArray.toString().split(',');\n\nmyFlatArray;\n// [\"$6\", \"$12\", \"$25\", \"$25\", \"$18\", \"$22\", \"$10\", \"$0\", \"$15\", \"$3\", \"$75\", \"$5\", \"$100\", \"$7\", \"$3\", \"$75\", \"$5\"]\n</code></pre>\n\n<p>This should work on any depth of nested arrays containing only strings and numbers(integers and floating points) with the caveat that numbers will be converted to strings in the process. This can be solved with a little mapping:</p>\n\n<pre><code>var myArray =[[[1,2],[3,4]],[[5,6],[7,8]],[[9,0]]];\nvar myFlatArray = myArray.toString().split(',').map(function(e) { return parseInt(e); });\nmyFlatArray;\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><sub>Since this hasn't been mentioned yet:</sub></p>\n\n<p>If you're using <a href=\"http://underscorejs.org/\" rel=\"nofollow\">underscore.js</a>, the <a href=\"http://underscorejs.org/#flatten\" rel=\"nofollow\"><code>_.flatten()</code> function</a> will recursively flatten all nested levels of the array, <code>_.flatten(arrays)</code>:</p>\n\n<pre><code>var arrays = [[1], [2, [3, 4, 5]]],\n    merged = _.flatten(arrays);\n\nconsole.log(merged); // [1, 2, 3, 4, 5]\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/03h5fp1u/\" rel=\"nofollow\"><strong>Example Here</strong></a></p>\n\n<hr>\n\n<p>If you want a shallow array, specify <code>true</code> for the second argument, <code>_.flatten(arrays, true)</code>:</p>\n\n<pre><code>var arrays = [[1], [2, [3, 4, 5]]],\n    merged = _.flatten(arrays, true);\n\nconsole.log(merged); // [1, 2, [3, 4, 5]]\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/azuj5kkw/\" rel=\"nofollow\"><strong>Example Here</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var arrays = [[\"a\"], [\"b\", \"c\"]];\nArray.prototype.concat.apply([], arrays);\n\n// gives [\"a\", \"b\", \"c\"]\n</code></pre>\n\n<p>(I'm just writing this as a separate answer, based on comment of @danhbear.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a javascript array like</p>\n\n<pre><code>[[\"$6\"], [\"$12\"], [\"$25\"], [\"$25\"], [\"$18\"], [\"$22\"], [\"$10\"], [\"$0\"], [\"$15\"],[\"$3\"], [\"$75\"], [\"$5\"], [\"$100\"], [\"$7\"], [\"$3\"], [\"$75\"], [\"$5\"]]\n</code></pre>\n\n<p>How would I go about making this just</p>\n\n<pre><code>[\"$6\", \"$12\", \"$25\", ...]\n</code></pre>\n",
            "last_activity_date": 1424071973,
            "question_id": 10865025,
            "score": 110,
            "tags": [
                "javascript",
                "arrays",
                "flatten"
            ],
            "title": "Merge/flatten an Array of Arrays in JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>As far as I know there's no way to do a blanket delete of any cookie set on the domain. You can clear a cookie if you know the name and if the script is on the same domain as the cookie. </p>\n\n<p>You can set the value to empty and the expiration date to somewhere in the past:</p>\n\n<pre><code>var mydate = new Date();\nmydate.setTime(mydate.getTime() - 1);\ndocument.cookie = \"username=; expires=\" + mydate.toGMTString();\n</code></pre>\n\n<p>There's an <a href=\"http://www.elated.com/articles/javascript-and-cookies/\">excellent article here</a> on manipulating cookies using javascript.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You can get a list by looking into the document.cookie variable. Clearing them all is just a matter of looping over all of them and clearing them one by one.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function deleteAllCookies() {\n    var cookies = document.cookie.split(\";\");\n\n    for (var i = 0; i &lt; cookies.length; i++) {\n    \tvar cookie = cookies[i];\n    \tvar eqPos = cookie.indexOf(\"=\");\n    \tvar name = eqPos &gt; -1 ? cookie.substr(0, eqPos) : cookie;\n    \tdocument.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 93
                },
                {
                    "body": "<pre><code>document.cookie.match(/\\w+(?==)/g)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>After a bit of frustration with this myself I knocked together this function which will attempt to delete a named cookie from all paths.  Just call this for each of your cookies and you should be closer to deleting every cookie then you were before.</p>\n\n<pre><code>function eraseCookieFromAllPaths(name) {\n    // This function will attempt to remove a cookie from all paths.\n    var pathBits = location.pathname.split('/');\n    var pathCurrent = ' path=';\n\n    // do a simple pathless delete first.\n    document.cookie = name + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT;';\n\n    for (var i = 0; i &lt; pathBits.length; i++) {\n        pathCurrent += ((pathCurrent.substr(-1) != '/') ? '/' : '') + pathBits[i];\n        document.cookie = name + '=; expires=Thu, 01-Jan-1970 00:00:01 GMT;' + pathCurrent + ';';\n    }\n}\n</code></pre>\n\n<p>As always different browsers have different behaviour but this worked for me.\nEnjoy.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I wanted to share this method for clearing cookies. Perhaps it may be helpful for someone else at some point.</p>\n\n<pre><code>var cookie = document.cookie.split(';');\n\nfor (var i = 0; i &lt; cookie.length; i++) {\n\n    var chip = cookie[i],\n        entry = chip.split(\"=\"),\n        name = entry[0];\n\n    document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Simpler. Faster.</p>\n\n<pre><code>function deleteAllCookies() {\n var c = document.cookie.split(\"; \");\n for (i in c) \n  document.cookie =/^[^=]+/.exec(c[i])[0]+\"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";    \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you have access to the <a href=\"http://plugins.jquery.com/cookie/\" rel=\"nofollow\" title=\"jquery.cookie\">jquery.cookie</a> plugin, you can erase all cookies this way:</p>\n\n<pre><code>for (var it in $.cookie()) $.removeCookie(it);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h3>One liner</h3>\n\n<p>In case you want to paste it in quickly...</p>\n\n<pre><code>document.cookie.split(\";\").forEach(function(c) { document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); });\n</code></pre>\n\n<p>And the code for a bookmarklet :</p>\n\n<pre><code>javascript:(function(){document.cookie.split(\";\").forEach(function(c) { document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); }); })();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do you delete all the cookies for the current domain using JavaScript?</p>\n",
            "last_activity_date": 1421902516,
            "question_id": 179355,
            "score": 70,
            "tags": [
                "javascript",
                "cookies"
            ],
            "title": "Clearing all cookies with JavaScript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>That's HTML Encoding. There's no native javascript function to do that, but you can google and get some nicely done up ones.</p>\n\n<p>E.g. <a href=\"http://sanzon.wordpress.com/2008/05/01/neat-little-html-encoding-trick-in-javascript/\">http://sanzon.wordpress.com/2008/05/01/neat-little-html-encoding-trick-in-javascript/</a></p>\n\n<p><strong>EDIT:</strong><br>\nThis is what I've tested:</p>\n\n<pre><code>var div = document.createElement('div');\n  var text = document.createTextNode('&lt;htmltag/&gt;');\n  div.appendChild(text);\n  console.log(div.innerHTML);\n</code></pre>\n\n<p>Output: <code>&amp;lt;htmltag/&amp;gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>With jQuery it can be like this:</p>\n\n<pre><code>var escapedValue = $('&lt;div/&gt;').text(value).html();\n</code></pre>\n\n<p>From related question <a href=\"http://stackoverflow.com/questions/24816/escaping-html-strings-with-jquery\">Escaping HTML strings with jQuery</a></p>\n\n<p>As mentioned in comment double quotes and single quotes are left as-is for this implementation. That means this solution should not be used if you need to make element attribute as a raw html string.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>There is a problem with your solution code--it will only escape the first occurrence of each special character. For example:</p>\n\n<pre><code>escapeHtml('Kip\\'s &lt;b&gt;evil&lt;/b&gt; \"test\" code\\'s here');\nActual:   Kip&amp;#039;s &amp;lt;b&amp;gt;evil&lt;/b&gt; &amp;quot;test\" code's here\nExpected: Kip&amp;#039;s &amp;lt;b&amp;gt;evil&amp;lt;/b&amp;gt; &amp;quot;test&amp;quot; code&amp;#039;s here\n</code></pre>\n\n<p>Here is code that works properly:</p>\n\n<pre><code>function escapeHtml(text) {\n  return text\n      .replace(/&amp;/g, \"&amp;amp;\")\n      .replace(/&lt;/g, \"&amp;lt;\")\n      .replace(/&gt;/g, \"&amp;gt;\")\n      .replace(/\"/g, \"&amp;quot;\")\n      .replace(/'/g, \"&amp;#039;\");\n}\n</code></pre>\n\n<hr>\n\n<h3>Update</h3>\n\n<p>The following code will produce identical results to the above, but it performs better, particularly on large blocks of text (thanks <a href=\"http://stackoverflow.com/users/861178/jbo5112\">jbo5112</a>).</p>\n\n<pre><code>function escapeHtml(text) {\n  var map = {\n    '&amp;': '&amp;amp;',\n    '&lt;': '&amp;lt;',\n    '&gt;': '&amp;gt;',\n    '\"': '&amp;quot;',\n    \"'\": '&amp;#039;'\n  };\n\n  return text.replace(/[&amp;&lt;&gt;\"']/g, function(m) { return map[m]; });\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 114
                },
                {
                    "body": "<p>I do suggest two links</p>\n\n<p>this implements exactly the PHP function</p>\n\n<p><a href=\"http://phpjs.org/functions/htmlspecialchars:426\" rel=\"nofollow\">http://phpjs.org/functions/htmlspecialchars:426</a></p>\n\n<p>and this one implements the reverse also</p>\n\n<p><a href=\"http://www.toao.net/32-my-htmlspecialchars-function-for-javascript\" rel=\"nofollow\">http://www.toao.net/32-my-htmlspecialchars-function-for-javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For Node.JS users (or users utilizing Jade runtime in the browser), you can use Jade's escape function.</p>\n\n<pre><code>require('jade').runtime.escape(...);\n</code></pre>\n\n<p>No sense in writing it yourself if someone else is maintaining it. :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Worth a read:\n<a href=\"http://bigdingus.com/2007/12/29/html-escaping-in-javascript/\">http://bigdingus.com/2007/12/29/html-escaping-in-javascript/</a></p>\n\n<pre><code>escapeHTML: (function() {\n var MAP = {\n   '&amp;': '&amp;amp;',\n   '&lt;': '&amp;lt;',\n   '&gt;': '&amp;gt;',\n   '\"': '&amp;#34;',\n   \"'\": '&amp;#39;'\n };\n  var repl = function(c) { return MAP[c]; };\n  return function(s) {\n    return s.replace(/[&amp;&lt;&gt;'\"]/g, repl);\n  };\n})()\n</code></pre>\n\n<p><strong>Note</strong>: Only run this once. And don't run it on already encoded strings e.g. <code>&amp;amp;</code> becomes <code>&amp;amp;amp;</code></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>function htmlspecialchars(str) {\n if (typeof(str) == \"string\") {\n  str = str.replace(/&amp;/g, \"&amp;amp;\"); /* must do &amp;amp; first */\n  str = str.replace(/\"/g, \"&amp;quot;\");\n  str = str.replace(/'/g, \"&amp;#039;\");\n  str = str.replace(/&lt;/g, \"&amp;lt;\");\n  str = str.replace(/&gt;/g, \"&amp;gt;\");\n  }\n return str;\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Hope this wins the race due to its performance and most important not a chained logic using .replace('&amp;','&amp;').replace('&lt;','&lt;')...</p>\n\n<pre><code>var mapObj = {\n   '&amp;':\"&amp;amp;\",\n   '&lt;':\"&amp;lt;\",\n   '&gt;':\"&amp;gt;\",\n   '\"':\"&amp;quot;\",\n   '\\'':\"&amp;#039;\"\n};\nvar re = new RegExp(Object.keys(mapObj).join(\"|\"),\"gi\");\n\nfunction escapeHtml(str) \n{   \n    return str.replace(re, function(matched)\n    {\n        return mapObj[matched.toLowerCase()];\n    });\n}\n\nconsole.log('&lt;script type=\"text/javascript\"&gt;alert('Hello World');&lt;/script&gt;');\nconsole.log(escapeHtml('&lt;script type=\"text/javascript\"&gt;alert('Hello World');&lt;/script&gt;'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>String.prototype.escapeHTML = function() {\n        return this.replace(/&amp;/g, \"&amp;amp;\")\n                   .replace(/&lt;/g, \"&amp;lt;\")\n                   .replace(/&gt;/g, \"&amp;gt;\")\n                   .replace(/\"/g, \"&amp;quot;\")\n                   .replace(/'/g, \"&amp;#039;\");\n    }\n</code></pre>\n\n<p>sample : </p>\n\n<pre><code>var toto = \"test&lt;br&gt;\";\nalert(toto.escapeHTML());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Underscore.js provides a function for this:</p>\n\n<pre><code>_.escape(string)\n</code></pre>\n\n<blockquote>\n  <blockquote>\n    <p>Escapes a string for insertion into HTML, replacing &amp;, &lt;, >, \", and ' characters.</p>\n  </blockquote>\n</blockquote>\n\n<p><a href=\"http://underscorejs.org/#escape\" rel=\"nofollow\">http://underscorejs.org/#escape</a></p>\n\n<p>It's not a built-in Javascript function, but if you are already using Underscore it is a better alternative than writing your own function if your strings to convert are not too large.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yet another take at this is to forgo all the character mapping altogether and to instead convert all unwanted characters into their respective numeric character references, e.g.:</p>\n\n<pre><code>function escapeHtml(raw) {\n    return raw.replace(/[&amp;&lt;&gt;\"']/g, function onReplace(match) {\n        return '&amp;#' + match.charCodeAt(0) + ';';\n    });\n}\n</code></pre>\n\n<p><strong>Note</strong> that the specified RegEx only handles the specific characters that the OP wanted to escape but, depending on the context that the escaped HTML is going to be used, these characters may not be sufficient. Ryan Grove\u2019s article <a href=\"http://wonko.com/post/html-escaping\" rel=\"nofollow\">There's more to HTML escaping than &amp;, &lt;, >, and \"</a> is a good read on the topic. And depending on your context, the following RegEx may very well be needed in order to avoid XSS injection:</p>\n\n<pre><code>var regex = /[&amp;&lt;&gt;\"'` !@$%()=+{}[\\]]/g\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Apparently, this is harder to find than I thought it would be. And it even is so simple...</p>\n\n<p>Is there a function equivalent to PHP's htmlspecialchars built into Javascript? I know it's fairly easy to implement that yourself, but using a built-in function, if available, is just nicer.</p>\n\n<p>For those unfamiliar with PHP, htmlspecialchars translates stuff like <code>&lt;htmltag/&gt;</code> into <code>&amp;lt;htmltag/&amp;gt;</code></p>\n\n<p>I know that <code>escape()</code> and <code>encodeURI()</code> do not work this way.</p>\n\n<hr>\n\n<p><strong>Update:</strong> Here is my own implementation\n<s><pre>\n    function escapeHtml(unsafe) {\n        return unsafe\n            .replace(\"&amp;\", \"&amp;amp;\")\n            .replace(\"&lt;\", \"&amp;lt;\")\n            .replace(\">\", \"&amp;gt;\")\n            .replace(\"\\\"\", \"&amp;quot;\")\n            .replace(\"'\", \"&amp;#039;\");\n    }\n</pre></s></p>\n",
            "last_activity_date": 1410196314,
            "question_id": 1787322,
            "score": 60,
            "tags": [
                "javascript",
                "html",
                "escaping",
                "html-encode"
            ],
            "title": "HtmlSpecialChars equivalent in Javascript?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Yes, they are the same.  It's one of the many historical quirks in the browser JS API.  Try doing:</p>\n\n<pre><code>window.location === document.location\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><code>document.location==window.location</code> returns <code>true</code></p>\n\n<p>also</p>\n\n<p><code>document.location.constructor==window.location.constructor</code> is <code>true</code></p>\n\n<p>Note: Just tested on , Firefox 3.6, Opera 10 and IE6</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>According to the W3C, they are the same. In reality, for cross browser safety, you should use <code>window.location</code> rather than <code>document.location</code>.</p>\n\n<p>See: <a href=\"http://www.w3.org/TR/Window/#window-location\">http://www.w3.org/TR/Window/#window-location</a></p>\n",
                    "is_accepted": true,
                    "score": 91
                },
                {
                    "body": "<p>window.location is the more reliably consistent of the two, considering older browsers.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The canonical way to get the current location object is <code>window.location</code> (see <a href=\"http://msdn.microsoft.com/en-us/library/ms970657.aspx\">this MSDN page from 1996</a> and <a href=\"http://www.w3.org/TR/Window/#document-location-attributes\">the W3C draft from 2006</a>).</p>\n\n<p>Compare this to <code>document.location</code>, which originally only returned the current URL as a string (see <a href=\"http://msdn.microsoft.com/en-us/library/ms970450.aspx\">this page on MSDN</a>). Probably to avoid confusion, <code>document.location</code> was replaced with <code>document.URL</code> (see <a href=\"http://msdn.microsoft.com/en-us/library/ms534708%28VS.85%29.aspx\">here on MSDN</a>), which is also part of <a href=\"http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-html.html#ID-1006298752\">DOM Level 1</a>.</p>\n\n<p>As far as I know, all modern browsers map <code>document.location</code> to <code>window.location</code>, but I still prefer <code>window.location</code> as that's what I've used since I wrote my first DHTML.</p>\n",
                    "is_accepted": false,
                    "score": 110
                },
                {
                    "body": "<p><code>document.location.constructor === window.location.constructor</code> is <code>true</code>.</p>\n\n<p>It's because it's exactly the same object as you can see from <code>document.location===window.location</code>.</p>\n\n<p>So there's no need to compare the constructor or any other property.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Interestingly, if you have a frame, image, or form named 'location', then 'document.location' provides a reference to the frame window, image, or form, respectively, instead of the Location object. Apparently, this is because the document.forms, document.images, and window.frames collection name lookup gets priority over the mapping to window.location.</p>\n\n<pre><code>&lt;img name='location' src='location.png'&gt;\n\nif (document.location.tagName == 'IMG') alert('wtf?')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>I would say <code>window.location</code> is the more reliable way of getting the current <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a>. \nFollowing is the difference between the <code>window.location</code> and <code>document.url</code> that came in front in one of the scenarios where I was appending hash parameters in the URL and reading it later.</p>\n\n<p>After adding hash parameters in the URL.</p>\n\n<p>In an older browser, I was not able to get the hash parameters from the URL by using <code>document.url</code>, but when I used <code>window.location</code> then I was able to get the hash parameters from the URL.</p>\n\n<p>So it's always better to use <code>window.location</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Should both of them reference to same object?</p>\n",
            "last_activity_date": 1413046922,
            "question_id": 2430936,
            "score": 109,
            "tags": [
                "javascript",
                "window.location"
            ],
            "title": "What&#39;s the difference between window.location and document.location in JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Just parameterize the constructor and set the seed:</p>\n\n<pre><code>function RandomNumberGenerator(Seed){\n  var d = new Date();\n  this.seed = Seed;\n  this.A = 48271;\n  this.M = 2147483647;\n  this.Q = this.M / this.A;\n  this.R = this.M % this.A;\n  this.oneOverM = 1.0 / this.M;\n  this.next = nextRandomNumber;\n  return this;\n}\n</code></pre>\n\n<p>And adjust your function that creates the random number generator like this:</p>\n\n<pre><code>function createRandomNumber(Seed, Min, Max){\n  var rand = new RandomNumberGenerator(Seed);\n  return Math.round((Max-Min) * rand.next() + Min);\n}\n</code></pre>\n\n<p>And call like this:</p>\n\n<pre><code>var letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\nvar numbers = ['1','2','3','4','5','6','7','8','9','10'];\nvar colors = ['red','orange','yellow','green','blue','indigo','violet'];\nvar seed = &lt;generate seed&gt;;\nvar first = createRandomNumber(seed, 0, letters.length);\nvar second = createRandomNumber(seed, 0, numbers.length);\nvar third = createRandomNumber(seed, 0, colors.length);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to be able to specify the seed, you just need to replace the calls to <code>getSeconds()</code> and <code>getMinutes()</code>.  You could pass in an int and use half of it mod 60 for the seconds value and the other half modulo 60 to give you the other part.</p>\n\n<p>That being said, this method looks like garbage.  Doing proper random number generation is very hard.  The obvious problem with this is that the random number seed is based on seconds and minutes.  To guess the seed and recreate your stream of random numbers only requires trying 3600 different second and minute combinations.  It also means that there are only 3600 different possible seeds.  This is correctable, but I'd be suspicious of this RNG from the start.</p>\n\n<p>If you want to use a better RNG, try the <a href=\"http://en.wikipedia.org/wiki/Mersenne_Twister\">Mersenne Twister</a>.  It is a well tested and fairly robust RNG with a huge orbit and excellent performance.</p>\n\n<p>EDIT: I really should be correct and refer to this as a Pseudo Random Number Generator or PRNG.</p>\n\n<blockquote>\n  <p>\"Anyone who uses arithmetic methods to produce random numbers is in a state of sin.\"<br>\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- John von Neumann</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>if you don't need the seeding capability, just use <code>Math.random()</code> and build helper functions around it (eg. <code>randRange(start, end)</code>).</p>\n\n<p>I'm not sure what RNG you're using, but it's best to know and document it so you're aware of it's characteristics and limitations.</p>\n\n<p>Like Starkii said, Mersenne Twister is a good PRNG, but it isn't easy to implement. If you want to do it yourself try implementing a <a href=\"http://en.wikipedia.org/wiki/Linear_congruential_generator\" rel=\"nofollow\">LCG</a> - it's very easy, has decent randomness qualities (not as good as Mersenne Twister), and you can use some of the popular constants.</p>\n\n<pre><code>function RNG(seed) {\n  // LCG using GCC's constants\n  this.m = 0x80000000; // 2**31;\n  this.a = 1103515245;\n  this.c = 12345;\n\n  this.state = seed ? seed : Math.floor(Math.random() * (this.m-1));\n}\nRNG.prototype.nextInt = function() {\n  this.state = (this.a * this.state + this.c) % this.m;\n  return this.state;\n}\nRNG.prototype.nextFloat = function() {\n  // returns in range [0,1]\n  return this.nextInt() / (this.m - 1);\n}\nRNG.prototype.nextRange = function(start, end) {\n  // returns in range [start, end): including start, excluding end\n  // can't modulu nextInt because of weak randomness in lower bits\n  var rangeSize = end - start;\n  var randomUnder1 = this.nextInt() / this.m;\n  return start + Math.floor(randomUnder1 * rangeSize);\n}\nRNG.prototype.choice = function(array) {\n  return array[this.nextRange(0, array.length)];\n}\n\nvar rng = new RNG(20);\nfor (var i = 0; i &lt; 10; i++)\n  console.log(rng.nextRange(10,50));\n\nvar digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\nfor (var i = 0; i &lt; 10; i++)\n  console.log(rng.choice(digits));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The code you listed kind of looks like a <a href=\"http://www.cs.odu.edu/~cmo/classes/old/cs475sp05/leemisText/07_c21.pdf\">Lehmer RNG</a>. If this is the case, then <code>2147483647</code> is the largest 32-bit signed integer, <code>2147483647</code> is the largest 32-bit prime, and <code>48271</code> is a full-period multiplier that is used to generate the numbers.</p>\n\n<p>If this is true, you could modify <code>RandomNumberGenerator</code> to take in an extra parameter <code>seed</code>, and then set <code>this.seed</code> to <code>seed</code>; but you'd have to be careful to make sure the seed would result in a good distribution of random numbers (Lehmer can be weird like that) -- but most seeds will be fine.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>One option is <a href=\"http://davidbau.com/seedrandom\">http://davidbau.com/seedrandom</a> which is a seedable RC4-based Math.random() drop-in replacement with nice properties.</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>OK, here's the solution I settled on.</p>\n\n<p>First you create a seed value using the \"newseed()\" function. Then you pass the seed value to the \"srandom()\" function. Lastly, the \"srandom()\" function returns a pseudo random value between 0 and 1.</p>\n\n<p>The crucial bit is that the seed value is stored inside an array. If it were simply an integer or float, the value would get overwritten each time the function were called, since the values of integers, floats, strings and so forth are stored directly in the stack versus just the pointers as in the case of arrays and other objects. Thus, it's possible for the value of the seed to remain persistent.</p>\n\n<p>Finally, it is possible to define the \"srandom()\" function such that it is a method of the \"Math\" object, but I'll leave that up to you to figure out. ;)</p>\n\n<p>Good luck!</p>\n\n<p>JavaScript:</p>\n\n<pre><code>// Global variables used for the seeded random functions, below.\nvar seedobja = 1103515245\nvar seedobjc = 12345\nvar seedobjm = 4294967295 //0x100000000\n\n// Creates a new seed for seeded functions such as srandom().\nfunction newseed(seednum)\n{\n    return [seednum]\n}\n\n// Works like Math.random(), except you provide your own seed as the first argument.\nfunction srandom(seedobj)\n{\n    seedobj[0] = (seedobj[0] * seedobja + seedobjc) % seedobjm\n    return seedobj[0] / (seedobjm - 1)\n}\n\n// Store some test values in variables.\nvar my_seed_value = newseed(230951)\nvar my_random_value_1 = srandom(my_seed_value)\nvar my_random_value_2 = srandom(my_seed_value)\nvar my_random_value_3 = srandom(my_seed_value)\n\n// Print the values to console. Replace \"WScript.Echo()\" with \"alert()\" if inside a Web browser.\nWScript.Echo(my_random_value_1)\nWScript.Echo(my_random_value_2)\nWScript.Echo(my_random_value_3)\n</code></pre>\n\n<p>Lua 4 (my personal target environment):</p>\n\n<pre><code>-- Global variables used for the seeded random functions, below.\nseedobja = 1103515.245\nseedobjc = 12345\nseedobjm = 4294967.295 --0x100000000\n\n-- Creates a new seed for seeded functions such as srandom().\nfunction newseed(seednum)\n    return {seednum}\nend\n\n-- Works like random(), except you provide your own seed as the first argument.\nfunction srandom(seedobj)\n    seedobj[1] = mod(seedobj[1] * seedobja + seedobjc, seedobjm)\n    return seedobj[1] / (seedobjm - 1)\nend\n\n-- Store some test values in variables.\nmy_seed_value = newseed(230951)\nmy_random_value_1 = srandom(my_seed_value)\nmy_random_value_2 = srandom(my_seed_value)\nmy_random_value_3 = srandom(my_seed_value)\n\n-- Print the values to console.\nprint(my_random_value_1)\nprint(my_random_value_2)\nprint(my_random_value_3)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I use a JavaScript port of the Mersenne Twister: \n<a href=\"https://gist.github.com/300494\">https://gist.github.com/300494</a>\nIt allows you to set the seed manually. Also, as mentioned in other answers, the Mersenne Twister is a really good PRNG.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<blockquote>\n  <p><em><strong>Note:</strong> This code was originally included in the question above.  In the interests of keeping the question short and focused, I've moved it to this Community Wiki answer.</em></p>\n</blockquote>\n\n<p>I found this code kicking around and it appears to work fine for getting a random number and then using the seed afterward but I'm not quite sure how the logic works (e.g. where the 2345678901, 48271 &amp; 2147483647 numbers came from).</p>\n\n<pre><code>function nextRandomNumber(){\n  var hi = this.seed / this.Q;\n  var lo = this.seed % this.Q;\n  var test = this.A * lo - this.R * hi;\n  if(test &gt; 0){\n    this.seed = test;\n  } else {\n    this.seed = test + this.M;\n  }\n  return (this.seed * this.oneOverM);\n}\n\nfunction RandomNumberGenerator(){\n  var d = new Date();\n  this.seed = 2345678901 + (d.getSeconds() * 0xFFFFFF) + (d.getMinutes() * 0xFFFF);\n  this.A = 48271;\n  this.M = 2147483647;\n  this.Q = this.M / this.A;\n  this.R = this.M % this.A;\n  this.oneOverM = 1.0 / this.M;\n  this.next = nextRandomNumber;\n  return this;\n}\n\nfunction createRandomNumber(Min, Max){\n  var rand = new RandomNumberGenerator();\n  return Math.round((Max-Min) * rand.next() + Min);\n}\n\n//Thus I can now do:\nvar letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\nvar numbers = ['1','2','3','4','5','6','7','8','9','10'];\nvar colors = ['red','orange','yellow','green','blue','indigo','violet'];\nvar first = letters[createRandomNumber(0, letters.length)];\nvar second = numbers[createRandomNumber(0, numbers.length)];\nvar third = colors[createRandomNumber(0, colors.length)];\n\nalert(\"Today's show was brought to you by the letter: \" + first + \", the number \" + second + \", and the color \" + third + \"!\");\n\n/*\n  If I could pass my own seed into the createRandomNumber(min, max, seed);\n  function then I could reproduce a random output later if desired.\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following is a PRNG that may be fed a custom seed. Calling <code>SeedRandom</code> will return a random generator function. <code>SeedRandom</code> can be called with no arguments in order to seed the returned random function with the current time, or it can be called with either 1 or 2 non-negative inters as arguments in order to seed it with those integers. Due to float point accuracy seeding with only 1 value will only allow the generator to be initiated to one of 2^53 different states.</p>\n\n<p>The returned random generator function takes 1 integer argument named <code>limit</code>, the limit must be in the range 1 to 4294965886, the function will return a number in the range 0 to limit-1.</p>\n\n<pre><code>function SeedRandom(state1,state2){\n    var mod1=4294967087\n    var mul1=65539\n    var mod2=4294965887\n    var mul2=65537\n    if(typeof state1!=\"number\"){\n        state1=+new Date()\n    }\n    if(typeof state2!=\"number\"){\n        state2=state1\n    }\n    state1=state1%(mod1-1)+1\n    state2=state2%(mod2-1)+1\n    function random(limit){\n        state1=(state1*mul1)%mod1\n        state2=(state2*mul2)%mod2\n        if(state1&lt;limit &amp;&amp; state2&lt;limit &amp;&amp; state1&lt;mod1%limit &amp;&amp; state2&lt;mod2%limit){\n            return random(limit)\n        }\n        return (state1+state2)%limit\n    }\n    return random\n}\n</code></pre>\n\n<p>Example use:</p>\n\n<pre><code>var generator1=SeedRandom() //Seed with current time\nvar randomVariable=generator1(7) //Generate one of the numbers [0,1,2,3,4,5,6]\nvar generator2=SeedRandom(42) //Seed with a specific seed\nvar fixedVariable=generator2(7) //First value of this generator will always be\n                                //1 because of the specific seed.\n</code></pre>\n\n<p>This generator exhibit the following properties:</p>\n\n<ul>\n<li>It has approximately 2^64 different possible inner states.</li>\n<li>It has a period of approximately 2^63, plenty more than anyone will ever realistically need in a JavaScript program.</li>\n<li>Due to the <code>mod</code> values being primes there is no simple pattern in the output, no matter the chosen limit. This is unlike some simpler PRNGs that exhibit some quite systematic patterns.</li>\n<li>It discards some results in order to get a perfect distribution no matter the limit.</li>\n<li>It is relatively slow, runs around 10 000 000 times per second on my machine.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>The JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\"><code>Math.random()</code></a> function returns a random value between 0 and 1, automatically seeded based on the current time (similar to Java I believe).  However, I don't think there's any way to set you own seed for it.</p>\n\n<p>How can I make a random number generator that I can provide my own seed value for, so that I can have it produce a repeatable sequence of (pseudo)random numbers?</p>\n",
            "last_activity_date": 1394494769,
            "question_id": 424292,
            "score": 64,
            "tags": [
                "javascript",
                "random",
                "seed"
            ],
            "title": "Seedable JavaScript random number generator"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Well, perhaps not the most intuitive in my opinion, but I can imagine you being able to make it a decent experience, give this a try. </p>\n\n<pre><code>overflow:hidden;\n</code></pre>\n\n<p>make sure the parent object has a <code>height</code> and <code>width</code>, and displays as <code>block</code></p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Like the previous answers, you would use <code>overflow:hidden</code> to disable the scrollbars on the body/div.</p>\n\n<p>Then you'd bind the <code>mousewheel</code> event to a function that would change the <code>scrollTop</code> of the div to emulate scrolling.</p>\n\n<p>For arrow keys, you would bind the <code>keydown</code> event to recognize an arrow key, and then change <code>scrollTop</code> and <code>scrollLeft</code> of the div as appropriate to emulate scrolling.\n(Note: you use <code>keydown</code> instead of <code>keypress</code> since IE doesn't recognize <code>keypress</code> for arrow keys.)<br>\n<strong>Edit:</strong> I couldn't get FF/Chrome to recognize <code>keydown</code> on a div, but it works in IE8. Depending on what you needed this for, you can set a <code>keydown</code> listener on the <code>document</code> to scroll the div. (Check out the keyCode reference as an example.)</p>\n\n<p>For example, scrolling with the mouse wheel (using jQuery and a mousewheel plugin):</p>\n\n<pre><code>&lt;div id=\"example\" style=\"width:300px;height:200px;overflow:hidden\">\ninsert enough text to overflow div here\n&lt;/div>\n\n&lt;script>\n$(\"#example\").bind(\"mousewheel\",function(ev, delta) {\n    var scrollTop = $(this).scrollTop();\n    $(this).scrollTop(scrollTop-Math.round(delta));\n});\n&lt;/script>\n</code></pre>\n\n<p>(This is a quick mockup, you'd have to adjust the numbers since for me, this scrolls a bit slowly.)</p>\n\n<p><a href=\"http://www.ryancooper.com/resources/keycode.asp\">keyCode reference</a><br>\n<a href=\"http://plugins.jquery.com/project/mousewheel\">mousewheel plugin</a><br>\n<a href=\"http://www.quirksmode.org/dom/events/keys.html\">keydown, keypress @ quirksmode</a></p>\n\n<p><b>Update 12/19/2012:</b></p>\n\n<p>The updated location of the mousewheel plugin is at: <a href=\"https://github.com/brandonaaron/jquery-mousewheel\">https://github.com/brandonaaron/jquery-mousewheel</a></p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>To get this working for me, I used this CSS:</p>\n\n<pre><code>html { overflow-y: hidden; }\n</code></pre>\n\n<p>But I had problems using <code>$(this).scrollTop()</code>, so I bound to my #id, but adjusted the scrollTop of window.  Also, my smooth scrolling mouse would fire lots of 1 or -1 deltas, so I multiplied that by 20.</p>\n\n<pre><code>$(\"#example\").bind(\"mousewheel\", function (ev, delta) {\n    var scrollTop = $(window).scrollTop();\n    $(window).scrollTop(scrollTop - Math.round(delta * 20));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I much prefer SamGoody's answer provided to a duplicate of this question. It leaves native scrolling effects intact, instead of trying to manually re-implement for a few particular input devices:</p>\n\n<blockquote>\n  <p>A better solution is to set the target div to overflow:scroll, and wrap it inside a second element that is 8px narrower, who's overflow:hidden.</p>\n</blockquote>\n\n<p>See the <a href=\"http://stackoverflow.com/a/3253396/179583\">original comment</a> for a fleshed-out example. You may want to use JavaScript to <a href=\"http://stackoverflow.com/questions/986937/javascript-get-the-browsers-scrollbar-sizes\">determine the actual size of scrollbars</a> rather than assuming they are always 8px wide as his example does.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>What about a purely CSS solution? I've tested this and it works fine.</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;style type=\"text/css\"&gt;\n      #div {position: fixed; bottom: 60px; left: 20px; right: -20px; padding-right: 40px; top: 80px; background-color: black; color: white; overflow-y: scroll; overflow-x: hidden;}\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"div\"&gt;\n      Scrolling div with hidden scrollbars!\n      On overflow, this div will scroll with the mousewheel but scrollbars won't be visible.\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I want to hide any scrollbars from my <code>div</code> elements and my whole <code>body</code>, but still let the user scroll with the mouse wheel or arrow keys. How can this be achieved with raw JavaScript or jQuery? Any ideas?</p>\n",
            "last_activity_date": 1410631754,
            "question_id": 1326570,
            "score": 40,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "browser",
                "scrollbar"
            ],
            "title": "How can I disable a browser or element scrollbar, but still allow scrolling with wheel or arrow keys?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You need to actually run a webserver, and make the get request to a URI on that server, rather than making the get request to a file; e.g. change the line:</p>\n\n<pre><code>    $.get(\"C:/xampp/htdocs/webname/resources/templates/signup.php\",\n</code></pre>\n\n<p>to read something like:</p>\n\n<pre><code>    $.get(\"http://localhost/resources/templates/signup.php\",\n</code></pre>\n\n<p>and the initial request page needs to be made over http as well.</p>\n",
                    "is_accepted": true,
                    "score": 42
                },
                {
                    "body": "<p>I've had luck starting chrome with the following switch:</p>\n\n<pre><code>--allow-file-access-from-files\n</code></pre>\n\n<p>On os x try (re-type the dashes if you copy paste):</p>\n\n<pre><code>open -a 'Google Chrome' --args -allow-file-access-from-files\n</code></pre>\n\n<p>On other *nix run (not tested)</p>\n\n<pre><code> google-chrome  --allow-file-access-from-files\n</code></pre>\n\n<p>or on windows edit the properties of the chrome shortcut and add the switch, e.g.</p>\n\n<pre><code> C:\\ ... \\Application\\chrome.exe --allow-file-access-from-files\n</code></pre>\n\n<p>to the end of the \"target\" path</p>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>If you\u2019re working on a little front-end project and want to test it locally, you\u2019d typically open it by pointing your local directory in the web browser, for instance entering file:///home/erick/mysuperproject/index.html in your URL bar. However, if your site is trying to load resources, even if they\u2019re placed in your local directory, you might see warnings like this:</p>\n\n<p>XMLHttpRequest cannot load  file:///home/erick/mysuperproject/mylibrary.js. Cross origin requests are only supported for HTTP. </p>\n\n<p>Chrome and other modern browsers have implemented security restrictions for Cross Origin Requests, which means that you cannot load anything through  file:/// , you need to use http:// protocol at all times, even locally -due Same Origin policies. Simple as that, you\u2019d need to mount a webserver to run your project there.</p>\n\n<p>This is not the end of the world and there are many solutions out there, including the good old Apache (with VirtualHosts if you\u2019re running several other projects), node.js with  express, a Ruby server, etc. or simply modifying your browser settings.</p>\n\n<p>However there\u2019s a simpler and lightweight solution for the lazy ones. You can use Python\u2019s SimpleHTTPServer. It comes already bundled with python so you don\u2019t need to install or configure anything at all!</p>\n\n<p>So cd to your project directory, for instance</p>\n\n<p>1\ncd /home/erick/mysuperproject\nand then simply use</p>\n\n<p>1\npython -m SimpleHTTPServer\nAnd that\u2019s it, you\u2019ll see this message in your terminal</p>\n\n<p>1\nServing HTTP on 0.0.0.0 port 8000 ...\nSo now you can go back to your browser and visit <code>http://0.0.0.0:8000</code> with all your directory files served there. You can configure the port and other things, just see the documentation. But this simply trick works for me when I\u2019m in a rush to test a new library or work out a new idea.</p>\n\n<p>There you go, happy coding!</p>\n\n<p><strong>EDIT:</strong>\nIn Python 3+, SimpleHTTPServer has been replaced with http.server. So In Python 3.3, for example, the following command is equivalent:</p>\n\n<pre><code>python -m http.server 8000\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Works on FireFox, Safari. IE a non-starter.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I was getting the same error while trying to load simply HTML files that used JSON data to populate the page, so I used used node.js and express to solve the problem. If you do not have node installed, you need to <a href=\"http://nodejs.org/\" rel=\"nofollow\">install node</a> first.</p>\n\n<ol>\n<li><p>Install express\n<code>npm install express</code></p></li>\n<li><p>Create a server.js file in the root folder of your project, in my case one folder above the files I wanted to server</p></li>\n<li><p>Put something like the following in the server.js file and read about this on the <a href=\"https://github.com/strongloop/express\" rel=\"nofollow\">express</a> gihub site:</p>\n\n<pre><code>var express = require('express');\nvar app = express();\nvar path = require('path');\n\n// __dirname will use the current path from where you run this file \napp.use(express.static(__dirname));\napp.use(express.static(path.join(__dirname, '/FOLDERTOHTMLFILESTOSERVER')));\n\napp.listen(8000);\nconsole.log('Listening on port 8000');`\n</code></pre></li>\n<li><p>After you've saved server.js, you can run the server using:</p></li>\n</ol>\n\n<p><code>node server.js</code></p>\n\n<ol start=\"5\">\n<li>Go to <code>http://localhost:8000/FILENAME</code> and you should see the HTML file you were trying to load</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm using this code to make an AJAX request:</p>\n\n<pre><code>$(\"#userBarSignup\").click(function(){\n    $.get(\"C:/xampp/htdocs/webname/resources/templates/signup.php\",\n        {/*params*/},\n        function(response){\n            $(\"#signup\").html(\"TEST\");\n            $(\"#signup\").html(response);\n        },\n        \"html\");\n</code></pre>\n\n<p>But from the Google Chrome JavaScript console I keep receiving this error:</p>\n\n<blockquote>\n  <p>XMLHttpRequest cannot load\n  file:///C:/xampp/htdocs/webname/resources/templates/signup.php. Cross\n  origin requests are only supported for HTTP.</p>\n</blockquote>\n\n<p>The problem is that the <em>signup.php</em> file is hosted on my local web server that's where all the website is run from so it's not cross-domain.</p>\n\n<p>How can I solve this problem?</p>\n",
            "last_activity_date": 1415628631,
            "question_id": 8449716,
            "score": 49,
            "tags": [
                "javascript"
            ],
            "title": "Cross origin requests are only supported for HTTP but it&#39;s not cross-domain"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>I don't think this is allowed by most browsers for security reasons, in a pure JavaScript context as the question asks.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If the client has Java installed, you could do something like this:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>ipAddress = java.net.InetAddress.getLocalHost().getHostAddress();\n</code></pre>\n\n<p>Other than that, you will probably have to use a server side script.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's no notion of hosts or ip-addresses in the javascript standard library. So you'll have to access some external service to look up hostnames for you.</p>\n\n<p>I recommend hosting a cgi-bin which looks up the ip-address of a hostname and access that via javascript.</p>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>Doing this would require to break the browser sandbox. Try to let your server do the lookup and request that from the client side via XmlHttp.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Edit</strong>: This question gave me an itch, so I put up a JSONP webservice on Google App Engine that returns the clients ip address. Usage:</p>\n\n<pre><code>&lt;script type=\"application/javascript\"&gt;\nfunction getip(json){\n  alert(json.ip); // alerts the ip address\n}\n&lt;/script&gt;\n\n&lt;script type=\"application/javascript\" src=\"http://jsonip.appspot.com/?callback=getip\"&gt; &lt;/script&gt;\n</code></pre>\n\n<p>Yay, no server proxies needed.</p>\n\n<p><hr /></p>\n\n<p>Pure JS can't. If you have a server script under the same domain that prints it out you could send a XMLHttpRequest to read it.</p>\n",
                    "is_accepted": false,
                    "score": 83
                },
                {
                    "body": "<p>Very old question, but I stumbled across it while searching myself. The hosted JSONP version works like a charm, but it seems it goes over its resources during night time most days (Eastern Time), so I had to create my own version.</p>\n\n<p>This is how I accomplished it with PHP:</p>\n\n<pre><code>&lt;?php\nheader('content-type: application/json; charset=utf-8');\n\n$data = json_encode($_SERVER['REMOTE_ADDR']);\necho $_GET['callback'] . '(' . $data . ');';\n?&gt;\n</code></pre>\n\n<p>Then the Javascript is exactly the same as before, just not an array:</p>\n\n<pre><code>&lt;script type=\"application/javascript\"&gt;\nfunction getip(json){\n    alert(json); // alerts the ip address\n}\n&lt;/script&gt;\n\n&lt;script type=\"application/javascript\" src=\"http://www.anotherdomain.com/file.php?callback=getip\"&gt; &lt;/script&gt;\n</code></pre>\n\n<p>Simple as that!</p>\n\n<p>Side note: Be sure to clean your $_GET if you're using this in any public-facing environment! </p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Many of the answers to this question seem to be recommending doing the resolution server side.  Depending on the use case that may not be sufficient.  For example, if the service you are looking up is using GSLB it might return a different IP based on where the user is located; as a result the response the server side code receives is quite likely to be a different response than what the browser would have received.  </p>\n\n<p>That being said, I do not yet have an alternative solution for those that care about this difference. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Maybe I missed the point but in reply to NAVY guy here is how the browser can tell you the 'requestor's' IP address (albeit maybe only their service provider).</p>\n\n<p>Place a script tag in the page to be rendered by client that calls (has src pointing to) another server that is not load balanced (I realize that this means you need access to a 2nd server but hosting is cheap these days and you can set this up easily and cheaply).</p>\n\n<p>This is the kind of code that needs to be added to client page:</p>\n\n<p></p>\n\n<p>On the other server \"someServerIown\" you need to have the ASP, ASPX or php page that;</p>\n\n<p>----- contains server code like this:</p>\n\n<p>\"&lt;%\n Response.Write(\"var clientipaddress = '\" &amp; Request.ServerVariables(\"REMOTE_ADDR\") &amp; \"';\")\n %>\" \n(without the outside dbl quotes :-))</p>\n\n<p>---- and writes this code back to script tag:</p>\n\n<pre><code>   var clientipaddress = '178.32.21.45';\n</code></pre>\n\n<p>This effectively creates a Javascript variable that you can access with Javascript on the page no less.</p>\n\n<p>Hopefully you access this var and write the value to a form control ready for sending back.</p>\n\n<p>When the user posts or gets on the next request your Javascript and/or form sends the value of the variable that the \"otherServerIown\" has filled in for you, back to the server you would like it on.</p>\n\n<p>This is how I get around the dumb load balancer we have that masks the client IP address and makes it appear as that of the Load balancer .... dumb ... dumb dumb dumb!</p>\n\n<p>I haven't given the exact solution because everyone's situation is a little different. The concept is sound however. Also note if you are doing this on an HTTPS page your \"otherServerIOwn\" must also deliver in that secure form otherwise Client is alerted to mixed content. And if you do have https then make sure ALL your certs are valid otherwise client also gets a warning.</p>\n\n<p>Hope it helps someone! Sorry it took a year to answer/contribute. :-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My version is like this:</p>\n\n<p>php on my server:</p>\n\n<pre><code>&lt;?php\n    header('content-type: application/json; charset=utf-8');\n\n    $data = json_encode($_SERVER['REMOTE_ADDR']);\n    echo $_GET['callback'] . '(' . $data . ');';\n?&gt;\n</code></pre>\n\n<p>jQuery on the page:</p>\n\n<pre><code>var self = this;\n$.ajax({\n    url: this.url + \"getip.php\",\n    data: null,\n    type: 'GET',\n    crossDomain: true,\n    dataType: 'jsonp'\n\n}).done( function( json ) {\n\n    self.ip = json;\n\n});\n</code></pre>\n\n<p>It works cross domain.\nIt could use a status check. Working on that.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Very late, but I guess many people will still land here through \"Google Airlines\". A moderm approach is to use WebRTC that doesn't require server support.</p>\n\n<p><a href=\"https://hacking.ventures/local-ip-discovery-with-html5-webrtc-security-and-privacy-risk/\">https://hacking.ventures/local-ip-discovery-with-html5-webrtc-security-and-privacy-risk/</a></p>\n\n<p>Next code is a copy&amp;paste from <a href=\"http://net.ipcalf.com/\">http://net.ipcalf.com/</a></p>\n\n<pre><code>// NOTE: window.RTCPeerConnection is \"not a constructor\" in FF22/23\nvar RTCPeerConnection = /*window.RTCPeerConnection ||*/ window.webkitRTCPeerConnection || window.mozRTCPeerConnection;\n\nif (RTCPeerConnection) (function () {\n    var rtc = new RTCPeerConnection({iceServers:[]});\n    if (window.mozRTCPeerConnection) {      // FF needs a channel/stream to proceed\n        rtc.createDataChannel('', {reliable:false});\n    };  \n\n    rtc.onicecandidate = function (evt) {\n        if (evt.candidate) grepSDP(evt.candidate.candidate);\n    };  \n    rtc.createOffer(function (offerDesc) {\n        grepSDP(offerDesc.sdp);\n        rtc.setLocalDescription(offerDesc);\n    }, function (e) { console.warn(\"offer failed\", e); }); \n\n\n    var addrs = Object.create(null);\n    addrs[\"0.0.0.0\"] = false;\n    function updateDisplay(newAddr) {\n        if (newAddr in addrs) return;\n        else addrs[newAddr] = true;\n        var displayAddrs = Object.keys(addrs).filter(function (k) { return addrs[k]; }); \n        document.getElementById('list').textContent = displayAddrs.join(\" or perhaps \") || \"n/a\";\n    }   \n\n    function grepSDP(sdp) {\n        var hosts = []; \n        sdp.split('\\r\\n').forEach(function (line) { // c.f. http://tools.ietf.org/html/rfc4566#page-39\n            if (~line.indexOf(\"a=candidate\")) {     // http://tools.ietf.org/html/rfc4566#section-5.13\n                var parts = line.split(' '),        // http://tools.ietf.org/html/rfc5245#section-15.1\n                    addr = parts[4],\n                    type = parts[7];\n                if (type === 'host') updateDisplay(addr);\n            } else if (~line.indexOf(\"c=\")) {       // http://tools.ietf.org/html/rfc4566#section-5.7\n                var parts = line.split(' '), \n                    addr = parts[2];\n                updateDisplay(addr);\n            }   \n        }); \n    }   \n})(); else {\n    document.getElementById('list').innerHTML = \"&lt;code&gt;ifconfig | grep inet | grep -v inet6 | cut -d\\\" \\\" -f2 | tail -n1&lt;/code&gt;\";\n    document.getElementById('list').nextSibling.textContent = \"In Chrome and Firefox your IP should display automatically, by the power of WebRTCskull.\";\n}   \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I would like to use javascript to determine the IP address of a host, as seen from the clients computer. Is it possible?</p>\n",
            "last_activity_date": 1419350692,
            "question_id": 102605,
            "score": 37,
            "tags": [
                "javascript",
                "dns"
            ],
            "title": "Can I lookup the IP address of a hostname from javascript?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Try this: <a href=\"http://snipplr.com/view/5460/outerhtml-in-firefox/\" rel=\"nofollow\">http://snipplr.com/view/5460/outerhtml-in-firefox/</a>:</p>\n\n<pre><code>if (document.body.__defineGetter__) { \n   if (HTMLElement) {\n      var element = HTMLElement.prototype;\n      if (element.__defineGetter__) {\n         element.__defineGetter__(\"outerHTML\",\n           function () {\n              var parent = this.parentNode;\n              var el = document.createElement(parent.tagName);\n              el.appendChild(this);\n              var shtml = el.innerHTML;\n              parent.appendChild(this);\n              return shtml;\n           }\n         );\n      }\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If all you want is the onclick attribute, then try the following: This assumes that you did not set the event using attachEvent or addEventListener.</p>\n\n<pre><code>elm.getAttribute(\"onclick\");\n</code></pre>\n\n<p>If you want to make an outerHTML string (just promise not to take it apart after you make it):</p>\n\n<pre><code>function outerHTML(elm){\n  var ret = \"&lt;\"+elm.tagName;\n  for(var i=0; i&lt;elm.attributes.length; i++){\n    var attr = elm.attributes[i];\n    ret += \" \"+attr.name+\"=\\\"\"+attr.nodeValue.replace(/\"/, \"\\\"\")+\"\\\"\";\n  }\n  ret += \"&gt;\";\n  ret += elm.innerHTML+\"&lt;/\"+elm.tagName+\"&gt;\";\n  return ret;\n}\n</code></pre>\n\n<p>This function should do the trick in most cases, but it does not take namespaces into account.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The proper approach (for non-IE browsers) is:</p>\n\n<pre><code>var sOuterHTML = new XMLSerializer().serializeToString(oElement);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Figured it out!</p>\n\n<pre><code>child.getAttributeNode(\"OnClick\").nodeValue;\n</code></pre>\n\n<p>getAttribute didn't work, but getAttributeNode worked great ;D</p>\n",
                    "is_accepted": true,
                    "score": -1
                },
                {
                    "body": "<p>How about something simple like this (not fully tested):</p>\n\n<pre><code>function outerHTML(node) {\n    var el;\n    if (node.outerHTML) {\n        return node.outerHTML;\n    } else if (node.parentNode &amp;&amp; node.parentNode.nodeType == 1) {\n        var el = document.createElement(node.parentNode.nodeName);\n        el.appendChild( node.cloneNode(true) );\n        return el.innerHTML;\n    }\n    return \"\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For the reason that W3C does not include outerHTML property, you just need add following:  </p>\n\n<pre><code>if (typeof (HTMLElement) != \"undefined\" &amp;&amp; !window.opera)  \n{  \n    HTMLElement.prototype._____defineGetter_____(\"outerHTML\", function()  \n    {  \n        var a = this.attributes, str = \"&lt;\" + this.tagName, i = 0; for (; i &lt; a.length; i++)  \n            if (a[i].specified)  \n            str += \" \" + a[i].name + '=\"' + a[i].value + '\"';  \n        if (!this.canHaveChildren)  \n            return str + \" /&gt;\";  \n        return str + \"&gt;\" + this.innerHTML + \"&lt;/\" + this.tagName + \"&gt;\";  \n    });  \n    HTMLElement.prototype._____defineSetter_____(\"outerHTML\", function(s)  \n    {  \n        var r = this.ownerDocument.createRange();  \n        r.setStartBefore(this);  \n        var df = r.createContextualFragment(s);  \n        this.parentNode.replaceChild(df, this);  \n        return s;  \n    });  \n    HTMLElement.prototype._____defineGetter_____(\"canHaveChildren\", function()  \n    {  \n        return !/^(area|base|basefont|col|frame|hr|img|br|input|isindex|link|meta|param)$/.test(this.tagName.toLowerCase());   \n    });  \n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try:</p>\n\n<pre><code>(function(ele, html)\n{if (typeof(ele.outerHTML)=='undefined')\n    {var r=ele.ownerDocument.createRange();\n     r.setStartBefore(ele);\n     ele.parentNode.replaceChild(r.createContextualFragment(html), ele);\n    }\n else\n     {ele.outerHTML=html;\n     }\n})(aEle, aHtml);\n</code></pre>\n\n<p>for diyism</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are willing to use jQuery then it's relatively simple:</p>\n\n<pre><code>$('&lt;div&gt;').append( $(ElementSelector).clone() ).html();\n</code></pre>\n\n<p>This will get <strong><a href=\"http://jsfiddle.net/c2jYJ/\">the outer HTML of multiple elements</a></strong> if multiple elements are selected.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Here's the function we use in <a href=\"http://beebole.com/pure\">pure.js</a>:</p>\n\n<pre><code>function outerHTML(node){\n    return node.outerHTML || new XMLSerializer().serializeToString(node);\n}\n</code></pre>\n\n<p>To use it the DOM way:</p>\n\n<pre><code>outerHTML(document.getElementById('theNode'));\n</code></pre>\n\n<p>And it works cross browsers</p>\n\n<p>EDIT: <strong>WARNING!</strong>\nThere is a trouble with XMLSerializer, it generates an XML(XHTML) string.<br/>\nWhich means you can end up with a tags like <code>&lt;div class=\"team\" /&gt;</code> instead of<br/><code>&lt;div class=\"team\"&gt;&lt;/div&gt;</code><br/>Some browsers do not like it. I had some pain with Firefox 3.5 recently.</p>\n\n<p>So for our <code>pure.js</code> lib we came back to the old and safe way:</p>\n\n<pre><code>function outerHTML(node){\n    // if IE, Chrome take the internal method otherwise build one\n  return node.outerHTML || (\n      function(n){\n          var div = document.createElement('div'), h;\n          div.appendChild( n.cloneNode(true) );\n          h = div.innerHTML;\n          div = null;\n          return h;\n      })(node);\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/DOM/element.outerHTML\">outerHTML</a> is now supported by Firefox:</p>\n\n<p>From <a href=\"https://developer.mozilla.org/en/Firefox_11_for_developers\">Firefox 11 for developers</a></p>\n\n<blockquote>\n  <p>Firefox 11 shipped on March 13, 2012. This article provides information about the new features and key bugs fixed in this release, as well as links to more detailed documentation for both web developers and add-on developers.</p>\n  \n  <ul>\n  <li>The element.outerHTML property is now supported on HTML elements.</li>\n  </ul>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I know this is an old thread but if anyone finds this with Google (like I did) - I tried all these solutions and none of them worked out-of-the-box, since none handled both the getting and setting properties of outerHTML.  I found this: which worked for me:</p>\n\n<pre><code>// Implement the outerHTML property for browsers that don't support it.\n// Assumes that the browser does support innerHTML, has an extensible \n// Element.prototype, and allows getters and setters to be defined.\n(function() {\n// If we already have outerHTML return without doing anything\nif (document.createElement(\"div\").outerHTML) return;\n\n// Return the outer HTML of the element referred to by this\nfunction outerHTMLGetter() {\n    var container = document.createElement(\"div\"); // Dummy element\n    container.appendChild(this.cloneNode(true));   // Copy this to dummy\n    return container.innerHTML;                    // Return dummy content\n}\n\n// Set the outer HTML of the this element to the specified value\nfunction outerHTMLSetter(value) {\n    // Create a dummy element and set its content to the specified value\n    var container = document.createElement(\"div\");\n    container.innerHTML = value;\n    // Move each of the nodes from the dummy into the document\n    while(container.firstChild)  // Loop until container has no more kids\n        this.parentNode.insertBefore(container.firstChild, this);\n    // And remove the node that has been replaced\n    this.parentNode.removeChild(this);\n}\n\n// Now use these two functions as getters and setters for the \n// outerHTML property of all Element objects. Use ES5 Object.defineProperty\n// if it exists and otherwise fall back on __defineGetter__ and Setter__.\nif (Object.defineProperty) {\n    Object.defineProperty(Element.prototype, \"outerHTML\", {\n                              get: outerHTMLGetter,\n                              set: outerHTMLSetter,\n                              enumerable: false, configurable: true\n                          });\n}\nelse {\n    Element.prototype.__defineGetter__(\"outerHTML\", outerHTMLGetter);\n    Element.prototype.__defineSetter__(\"outerHTML\", outerHTMLSetter);\n}\n}());\n</code></pre>\n\n<p>Kudos: <a href=\"https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-15/implementing-the-outerhtml\" rel=\"nofollow\">https://www.inkling.com/read/javascript-definitive-guide-david-flanagan-6th/chapter-15/implementing-the-outerhtml</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Part of my code I get the OuterHTML propery</p>\n\n<pre><code>\"&lt;LI onclick=\"TabClicked(this, 'SearchName', 'TabGroup1');\"&gt;Name \"\n</code></pre>\n\n<p>so I can do stuff involing parsing it.</p>\n\n<p>There is no OuterHTML property in javascript on firefox though and I can't find an alternative way to get this string. Ideas?</p>\n",
            "last_activity_date": 1367158003,
            "question_id": 1700870,
            "score": 34,
            "tags": [
                "javascript",
                "dom",
                "cross-browser"
            ],
            "title": "How do I do OuterHTML in firefox?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Edit: \nAs said by Chips_100 you should use :</p>\n\n<pre><code>var sizes = document.theForm[field];\n</code></pre>\n\n<p>directly without using the test variable.</p>\n\n<hr>\n\n<p>Old answer:</p>\n\n<p>Shouldn't you <code>eval</code> like this ?</p>\n\n<pre><code>var sizes = eval(test);\n</code></pre>\n\n<p>I don't know how that works, but to me you're only copying a string.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>jQuery: </p>\n\n<pre><code>$('input[name=\"genderS\"]:checked').val();\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Xxxd3/609/\">http://jsfiddle.net/Xxxd3/609/</a></p>\n\n<p>javascript:</p>\n\n<pre><code>var radios = document.getElementsByName('genderS');\n\nfor (var i = 0, length = radios.length; i &lt; length; i++) {\n    if (radios[i].checked) {\n        // do whatever you want with the checked radio\n        alert(radios[i].value);\n\n        // only one radio can be logically checked, don't check the rest\n        break;\n    }\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Xxxd3/610/\">http://jsfiddle.net/Xxxd3/610/</a></p>\n\n<p>Edit: Thanks HATCHA and jpsetung for your edit suggestions.</p>\n",
                    "is_accepted": true,
                    "score": 123
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>function findSelection(field) {\n    var test = document.getElementsByName(field);\n    var sizes = test.length;\n    alert(sizes);\n    for (i=0; i &lt; sizes; i++) {\n            if (test[i].checked==true) {\n            alert(test[i].value + ' you got a value');     \n            return test[i].value;\n        }\n    }\n}\n\n\nfunction submitForm() {\n\n    var genderS =  findSelection(\"genderS\");\n    alert(genderS);\n    return false;\n}\n</code></pre>\n\n<p>A fiddle <a href=\"http://jsfiddle.net/mDFgM/1/\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here is an Example for Radios where no <em>Checked=\"checked\"</em> attribute is used</p>\n\n<pre><code>function test() {\nvar radios = document.getElementsByName(\"radiotest\");\nvar found = 1;\nfor (var i = 0; i &lt; radios.length; i++) {       \n    if (radios[i].checked) {\n        alert(radios[i].value);\n        found = 0;\n        break;\n    }\n}\n   if(found == 1)\n   {\n     alert(\"Please Select Radio\");\n   }    \n}\n</code></pre>\n\n<p><strong>DEMO</strong> : <a href=\"http://jsfiddle.net/ipsjolly/hgdWp/2/\" rel=\"nofollow\">http://jsfiddle.net/ipsjolly/hgdWp/2/</a> [<strong>Click Find without selecting any Radio</strong>]</p>\n\n<p>Source : <a href=\"http://bloggerplugnplay.blogspot.in/2013/01/validateget-checked-radio-value-in.html\" rel=\"nofollow\">http://bloggerplugnplay.blogspot.in/2013/01/validateget-checked-radio-value-in.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>document.forms.your-form-name.elements.radio-button-name.value\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>var value= $(\"input:radio['@name=radiogroupname']:checked\").val()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<pre><code>    var value = $('input:radio[name=\"radiogroupname\"]:checked').val();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Since jQuery 1.8, the correct syntax for the query is </p>\n\n<pre><code>$('input[name=\"genderS\"]:checked').val();\n</code></pre>\n\n<p>Not <code>$('input[@name=\"genderS\"]:checked').val();</code> anymore, which was working in jQuery 1.7 (with the <strong>@</strong>).</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This works with any explorer.. </p>\n\n<pre><code>document.querySelector('input[name=\"genderS\"]:checked').value;\n</code></pre>\n\n<p>It is the purest way to get the value of any input type..\nYou need to include jQuery path as well..</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I'm having some strange problem with my JS program. I had this working properly but for some reason it's no longer working. I just want to find the value of the radio button (which one is selected) and return it to a variable. For some reason it keeps returning undefined. Here is my code:</p>\n\n<pre><code>function findSelection(field) {\n    var test = 'document.theForm.' + field;\n    var sizes = test;\n\n    alert(sizes);\n        for (i=0; i &lt; sizes.length; i++) {\n            if (sizes[i].checked==true) {\n            alert(sizes[i].value + ' you got a value');     \n            return sizes[i].value;\n        }\n    }\n}\n</code></pre>\n\n<p>submitForm:</p>\n\n<pre><code>function submitForm() {\n\n    var genderS =  findSelection(\"genderS\");\n    alert(genderS);\n}\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;form action=\"#n\" name=\"theForm\"&gt;\n\n    &lt;label for=\"gender\"&gt;Gender: &lt;/label&gt;\n    &lt;input type=\"radio\" name=\"genderS\" value=\"1\" checked&gt; Male\n    &lt;input type=\"radio\" name=\"genderS\" value=\"0\" &gt; Female&lt;br&gt;&lt;br&gt;\n    &lt;a href=\"javascript: submitForm()\"&gt;Search&lt;/A&gt;\n&lt;/form&gt;\n</code></pre>\n",
            "last_activity_date": 1419947587,
            "question_id": 9618504,
            "score": 48,
            "tags": [
                "javascript",
                "html",
                "for-loop",
                "radio-button"
            ],
            "title": "Get Radio Button Value with Javascript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The extra set of parentheses makes it clearer that you are constructing a function and then calling it. It's a coding style thing, not a functionality thing.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>function(){}();\n</code></pre>\n\n<p>doesn't work in most of browsers. You should use parenthesis around the function in order to execute it</p>\n\n<pre><code>(function(){})();\n</code></pre>\n\n<p>then browser will know that last parenthesis should be applied to all the expression</p>\n\n<pre><code>function(){}\n</code></pre>\n\n<p><strong>UPD</strong>: If you don't use parenthesis, the brower could misunderstand you. If you just call the function and dismiss the result</p>\n\n<pre><code>function() {\n    alert(1);\n}();\n</code></pre>\n\n<p>then ff and ie will throw error</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Peter Michaux discusses the difference in <a href=\"http://peter.michaux.ca/articles/an-important-pair-of-parens\" rel=\"nofollow\">An Important Pair of Parens</a>.</p>\n\n<p>Basically the parentheses are a convention to denote that an immediately invoked function expression is following, not a plain function. Especially if the function body is lengthy, this reduces surprises,</p>\n",
                    "is_accepted": true,
                    "score": 32
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/5938802/are-function-and-function-functionally-equal-i\">Are &ldquo;(function ( ) { } ) ( )&rdquo; and &ldquo;(function ( ) { } ( ) )&rdquo; functionally equal in JavaScript?</a>  </p>\n</blockquote>\n\n\n\n<p>This is something I haven't quite figured out yet, but I have been using function(){}() just because my VIM syntax highlight screws up if I add the parenthesis, although I've seen (function(){})() around many times, maybe its an IE thing?</p>\n\n<p><strong>edit:</strong></p>\n\n<pre><code>var singleton = function() {\n    // code\n}();\n\nvar singleton = (function() {\n    // code\n})();\n</code></pre>\n",
            "last_activity_date": 1403713802,
            "question_id": 423228,
            "score": 22,
            "tags": [
                "javascript",
                "syntax"
            ],
            "title": "Difference between (function(){})(); and function(){}();"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Different browsers treat this differently. Some run the content only if the <code>src</code> is included without error. Some run it after attempting to include the <code>src</code> script, regardless of success. Since this behaviour is unreliable (and <a href=\"http://dev.w3.org/html5/spec/Overview.html#the-script-element\">prohibited in HTML5</a>), it should be avoided.</p>\n\n<p>Google isn't relying an any specific behaviour. Since the content is just an object literal (a value), executing it would not actually do anything except cause a silent error. Google's code looks at the contents of the <code>script</code> tag itself, and adjust its behaviour based on that.</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>If a <a href=\"http://www.w3.org/TR/1999/REC-html401-19991224/interact/scripts.html#edef-SCRIPT\">script element</a> has a <em>src</em> attribute, the content <strong>must</strong> be ignored, any other behaviour is non-conformant.</p>\n\n<p>It has been suggested in blogs (as a hack) to put content in the element knowing that it won't be evaluated, then use DOM methods to get the content as a string and either <em>eval</em> it or insert it in a new script element. Neither of these are a good idea.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>According to the <a href=\"http://dev.w3.org/html5/spec/Overview.html#inline-documentation-for-external-scripts\">HTML5 draft specification</a>, <code>&lt;script&gt;</code> elements with <code>src</code> attributes should only have commented-out code, which is intended to give documentation for the script.  It doesn't appear as though Google is conforming to this specification though.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>After the script has loaded, it looks inside its own script tag to access its content.</p>\n\n<p>It will use some code similar to this:</p>\n\n<pre><code>var scripts = document.getElementsByTagName(\"script\");\nvar data = eval(scripts[scripts.length - 1].innerHTML);\n</code></pre>\n\n<p>Courtesy of <a href=\"http://ejohn.org/blog/degrading-script-tags/\">John Resig</a>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>Example from Googles +1 button:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"https://apis.google.com/js/plusone.js\"&gt;\n      {\"parsetags\": \"explicit\"}\n&lt;/script&gt;\n</code></pre>\n\n<p>The script Tag has a src-Attribute <strong>and</strong> content. What does this mean and how does it work?</p>\n",
            "last_activity_date": 1325872166,
            "question_id": 6528325,
            "score": 75,
            "tags": [
                "javascript"
            ],
            "title": "What does a script-Tag with src AND content mean?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Maybe you could try using flash if you want to handle client side data : </p>\n\n<p>An example : <a href=\"http://www.adylevy.com/index.php/2009/06/07/client-side-image-resize-flash-cs4-filereferencedata/\" rel=\"nofollow\">http://www.adylevy.com/index.php/2009/06/07/client-side-image-resize-flash-cs4-filereferencedata/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is not possible. Either you use a web server where file can be uploaded and than use its content or write an extension for browser.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can't. New browsers like Firefox, Safari etc. block the 'file' protocol. It will only work on old browsers.</p>\n\n<p>You'll have to upload the files you want.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is no standard way in Javascript to manipulate local files, like you said it's for security reason. You can use ActiveX on IE and XPCOM on Mozilla though.\n<a href=\"http://juixe.com/techknow/index.php/2008/01/14/accessing-local-files-with-mozilla-xpcom/\" rel=\"nofollow\">Here</a> is a link discussing the XPCOM way.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <a href=\"http://dev.w3.org/2006/webapi/FileAPI/\">HTML5 fileReader facility</a> does allow you to process local files, but these MUST be selected by the user, you cannot go rooting about the users disk looking for files.</p>\n\n<p>I currently use this with development versions of Chrome (6.x). I don't know what other browsers support it. </p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Javascript cannot typically access local files in new browsers but the XMLHttpRequest object can be used to read files. So it is actually Ajax (and not Javascript) which is reading the file.</p>\n\n<p>If you want to read the file <code>abc.txt</code>, you can write the code as:</p>\n\n<pre><code>var txt = '';\nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function(){\n  if(xmlhttp.status == 200 &amp;&amp; xmlhttp.readyState == 4){\n    txt = xmlhttp.responseText;\n  }\n};\nxmlhttp.open(\"GET\",\"abc.txt\",true);\nxmlhttp.send();\n</code></pre>\n\n<p>Now <code>txt</code> contains the contents of the file abc.txt.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The xmlhttp request method is not valid for the files on local disk because the browser security does not allow us to do so.But we can override the browser security by creating a shortcut->right click->properties In target \"... browser location path.exe\" append --allow-file-access-from-files.This is tested on chrome,however care should be taken that all browser windows should be closed and the code should be run from the browser opened via this shortcut.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>url = \"pdf/Entry.xlsx\"\n\nstring  myscript = \"window.open('\" &amp; url &amp; \"','_blank','toolbar=no,scrollbars=yes,resizable=yes,height=5,width=5,top=10,left=40,status=yes');\"\n\n\nPage.ClientScript.RegisterClientScriptBlock(Me.GetType(), \"MyScript\", myscript, True)\n</code></pre>\n\n<p>Alter the answer as per your need</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's an example using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader\"><code>FileReader</code></a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function readSingleFile(e) {\r\n  var file = e.target.files[0];\r\n  if (!file) {\r\n    return;\r\n  }\r\n  var reader = new FileReader();\r\n  reader.onload = function(e) {\r\n    var contents = e.target.result;\r\n    displayContents(contents);\r\n  };\r\n  reader.readAsText(file);\r\n}\r\n\r\nfunction displayContents(contents) {\r\n  var element = document.getElementById('file-content');\r\n  element.innerHTML = contents;\r\n}\r\n\r\ndocument.getElementById('file-input')\r\n  .addEventListener('change', readSingleFile, false);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"file\" id=\"file-input\" /&gt;\r\n&lt;h3&gt;Contents of the file:&lt;/h3&gt;\r\n&lt;pre id=\"file-content\"&gt;&lt;/pre&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<h1>Specs</h1>\n\n<p><a href=\"http://dev.w3.org/2006/webapi/FileAPI/\">http://dev.w3.org/2006/webapi/FileAPI/</a></p>\n\n<h1>Browser compatibility</h1>\n\n<ul>\n<li>IE 10+</li>\n<li>Firefox 3.6+</li>\n<li>Chrome 13+</li>\n<li>Safari 6.1+</li>\n</ul>\n\n<p><a href=\"http://caniuse.com/#feat=fileapi\">http://caniuse.com/#feat=fileapi</a></p>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>I tried to open file with</p>\n\n<pre><code>window.open(\"file:///D:/Hello.txt\");\n</code></pre>\n\n<p>The browser does not allow opening a local file this way, probably for security reasons. I want to use the file's data in the client side. How can I read local file in Javascript?</p>\n",
            "last_activity_date": 1412942379,
            "question_id": 3582671,
            "score": 32,
            "tags": [
                "javascript"
            ],
            "title": "How to open a local disk file with Javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>According to your sample,</p>\n\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n  &lt;script src=\"jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n  &lt;script src=\"abc.js\" type=\"text/javascript\"&gt;\n  &lt;/script&gt;\n  &lt;link rel=\"stylesheets\" type=\"text/css\" href=\"abc.css\"&gt;&lt;/link&gt;\n  &lt;style&gt;h2{font-wight:bold;}&lt;/style&gt;\n  &lt;script&gt;\n  $(document).ready(function(){\n     $(\"#img\").attr(\"src\", \"kkk.png\");\n  });\n &lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n    &lt;img id=\"img\" src=\"abc.jpg\" style=\"width:400px;height:300px;\"/&gt;\n    &lt;script src=\"kkk.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>roughly the execution flow is about as follows:</p>\n\n<ol>\n<li>The HTML document gets downloaded</li>\n<li>The parsing of the HTML document starts</li>\n<li>HTML Parsing reaches <code>&lt;script src=\"jquery.js\" ...</code></li>\n<li><code>jquery.js</code> is downloaded and parsed</li>\n<li>HTML parsing reaches <code>&lt;script src=\"abc.js\" ...</code></li>\n<li><code>abc.js</code> is downloaded, parsed and run</li>\n<li>HTML parsing reaches <code>&lt;link href=\"abc.css\" ...</code></li>\n<li><code>abc.css</code> is downloaded and parsed</li>\n<li>HTML parsing reaches <code>&lt;style&gt;...&lt;/style&gt;</code></li>\n<li>Internal CSS rules are parsed and defined</li>\n<li>HTML parsing reaches <code>&lt;script&gt;...&lt;/script&gt;</code></li>\n<li>Internal Javascript is parsed and run</li>\n<li>HTML Parsing reaches <code>&lt;img src=\"abc.jpg\" ...</code></li>\n<li><code>abc.jpg</code> is downloaded and displayed</li>\n<li>HTML Parsing reaches <code>&lt;script src=\"kkk.js\" ...</code></li>\n<li><code>kkk.js</code> is downloaded, parsed and run</li>\n<li>Parsing of HTML document ends</li>\n</ol>\n\n<p>Note that the download may be asynchronous and non-blocking due to behaviours of the browser. For example, in Firefox there is this setting which limits the number of simultaneous requests per domain.</p>\n\n<p>Also depending on whether the component has already been cached or not, the component may not be requested again in a near-future request. If the component has been cached, the component will be loaded from the cache instead of the actual URL.</p>\n\n<p>When the parsing is ended and document is ready and loaded, the events <code>onload</code> is fired. Thus when <code>onload</code> is fired, the <code>$(\"#img\").attr(\"src\",\"kkk.png\");</code> is run. So:</p>\n\n<ol>\n<li>Document is ready, onload is fired.</li>\n<li>Javascript execution hits <code>$(\"#img\").attr(\"src\", \"kkk.png\");</code></li>\n<li><code>kkk.png</code> is downloaded and loads into <code>#img</code></li>\n</ol>\n\n<p>The <code>$(document).ready()</code> event is actually the event fired when all page components are loaded and ready. Read more about it: http://docs.jquery.com/Tutorials:Introducing_$(document).ready()</p>\n\n<h3>Edit - This portion elaborates more on the parallel or not part:</h3>\n\n<p>By default, and from my current understanding, browser usually runs each page on 3 ways: HTML parser, Javascript/DOM, and CSS. </p>\n\n<p>The HTML parser is responsible for parsing and interpreting the markup language and thus must be able to make calls to the other 2 components. </p>\n\n<p>For example when the parser comes across this line:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"alert('test');return false;\" style=\"font-weight:bold\"&gt;a hypertext link&lt;/a&gt;\n</code></pre>\n\n<p>The parser will make 3 calls, two to Javascript and one to CSS. Firstly, the parser will create this element and register it in the DOM namespace, together with all the attributes related to this element. Secondly, the parser will call to bind the onclick event to this particular element. Lastly, it will make another call to the CSS thread to apply the CSS style to this particular element.</p>\n\n<p>The execution is top down and single threaded. Javascript may look multi-threaded, but the fact is that Javascript is single threaded. This is why when loading external javascript file, the parsing of the main HTML page is suspended. </p>\n\n<p>However, the CSS files can be download simultaneously because CSS rules are always being applied - meaning to say elements are always repainted with the freshest CSS rules defined - thus making it unblocking.</p>\n\n<p>An element will only be available in the DOM after it has been parsed. Thus when working with a specific element, the script is always placed after, or within the window onload event.</p>\n\n<p>Script like this will cause error (on jQuery):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;/* &lt;![CDATA[ */\n  alert($(\"#mydiv\").html());\n/* ]]&gt; */&lt;/script&gt;\n&lt;div id=\"mydiv\"&gt;Hello World&lt;/div&gt;\n</code></pre>\n\n<p>Because when the script is parsed, <code>#mydiv</code> element is still not defined. Instead this would work:</p>\n\n<pre><code>&lt;div id=\"mydiv\"&gt;Hello World&lt;/div&gt;\n&lt;script type=\"text/javascript\"&gt;/* &lt;![CDATA[ */\n  alert($(\"#mydiv\").html());\n/* ]]&gt; */&lt;/script&gt;\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;/* &lt;![CDATA[ */\n  $(window).ready(function(){\n                    alert($(\"#mydiv\").html());\n                  });\n/* ]]&gt; */&lt;/script&gt;\n&lt;div id=\"mydiv\"&gt;Hello World&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 147
                },
                {
                    "body": "<p>If you're asking this because you want to speed up your web site, check out Yahoo's page on <a href=\"http://developer.yahoo.com/performance/rules.html\" rel=\"nofollow\">Best Practices for Speeding Up Your Web Site</a>. It has a lot of best practices for speeding up your web site.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>1) HTML is downloaded.</p>\n\n<p>2) HTML is parsed progressively.  When a request for an asset is reached the browser will attempt to download the asset.  A default configuration for most HTTP servers and most browsers is to process only two requests in parallel.  IE can be reconfigured to downloaded an unlimited number of assets in parallel.  Steve Souders has been able to download over 100 requests in parallel on IE.  The exception is that script requests block parallel asset requests in IE.  This is why it is highly suggested to put all JavaScript in external JavaScript files and put the request just prior to the closing body tag in the HTML.</p>\n\n<p>3) Once the HTML is parsed the DOM is rendered.  CSS is rendered in parallel to the rendering of the DOM in nearly all user agents.  As a result it is strongly recommended to put all CSS code into external CSS files that are requested as high as possible in the &lt;head&gt;&lt;/head&gt; section of the document.  Otherwise the page is rendered up to the occurance of the CSS request position in the DOM and then rendering starts over from the top.</p>\n\n<p>4) Only after the DOM is completely rendered and requests for all assets in the page are either resolved or time out does JavaScript execute from the onload event.  IE7, and I am not sure about IE8, does not time out assets quickly if an HTTP response is not received from the asset request.  This means an asset requested by JavaScript inline to the page, that is JavaScript written into HTML  tags that is not contained in a function, can prevent the execution of the onload event for hours.  This problem can be triggered if such inline code exists in the page and fails to execute due to a namespace collision that causes a code crash.</p>\n\n<p>Of the above steps the one that is most CPU intensive is the parsing of the DOM/CSS.  If you want your page to be processed faster then write efficient CSS by eliminating redundent instructions and consolidating CSS instructions into the fewest possible element referrences.  Reducing the number of nodes in your DOM tree will also produce faster rendering.</p>\n\n<p>Keep in mind that each asset you request from your HTML or even from your CSS/JavaScript assets is requested with a separate HTTP header.  This consumes bandwidth and requires processing per request.  If you want to make your page load as fast as possible then reduce the number of HTTP requests and reduce the size of your HTML.  You are not doing your user experience any favors by averaging page weight at 180k from HTML alone.  Many developers subscribe to some fallacy that a user makes up their mind about the quality of content on the page in 6 nanoseconds and then purges the DNS query from his server and burns his computer if displeased, so instead they provide the most beautiful possible page at 250k of HTML.  Keep your HTML short and sweet so that a user can load your pages faster.  Nothing improves the user experience like a fast and responsive web page.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Open your page in Firefox and get the HTTPFox addon. It will tell you all that you need.</p>\n\n<p>Found this on archivist.incuito:</p>\n\n<p><a href=\"http://archivist.incutio.com/viewlist/css-discuss/76444\">http://archivist.incutio.com/viewlist/css-discuss/76444</a></p>\n\n<blockquote>\n  <p>When you first request a page, your\n  browser sends a GET request to the \n  server, which returns the HTML to the\n  browser. The browser then starts \n  parsing the page (possibly before all\n  of it has been returned).</p>\n  \n  <p>When it finds a reference to an\n  external entity such as a CSS file, an\n  image file, a script file, a Flash\n  file, or anything else external to \n  the page (either on the same\n  server/domain or not), it prepares to\n  make  a further GET request for that\n  resource.</p>\n  \n  <p>However the HTTP standard specifies\n  that the browser should not make  more\n  than two concurrent requests to the\n  same domain. So it puts each  request\n  to a particular domain in a queue, and\n  as each entity is  returned it starts\n  the next one in the queue for that\n  domain.</p>\n  \n  <p>The time it takes for an entity to be\n  returned depends on its size, the \n  load the server is currently\n  experiencing, and the activity of\n  every  single machine between the\n  machine running the browser and the\n  server.  The list of these machines\n  can in principle be different for\n  every  request, to the extent that one\n  image might travel from the USA to me\n  in  the UK over the Atlantic, while\n  another from the same server comes out\n  via the Pacific, Asia and Europe,\n  which takes longer. So you might get a\n  sequence like the following, where a\n  page has (in this order) references \n  to three script files, and five image\n  files, all of differing sizes:</p>\n  \n  <ol>\n  <li>GET script1 and script2; queue request for script3 and images1-5.</li>\n  <li>script2 arrives (it's smaller than script1): GET script3, queue \n  images1-5.</li>\n  <li>script1 arrives; GET image1, queue images2-5.</li>\n  <li>image1 arrives, GET image2, queue images3-5.</li>\n  <li>script3 fails to arrive due to a network problem  - GET script3 again \n  (automatic retry).</li>\n  <li>image2 arrives, script3 still not here; GET image3, queue images4-5.</li>\n  <li>image 3 arrives; GET image4, queue image5, script3 still on the way.</li>\n  <li>image4 arrives, GET image5;</li>\n  <li>image5 arrives.</li>\n  <li>script3 arrives.</li>\n  </ol>\n  \n  <p>In short: any old order, depending on\n  what the server is doing, what the \n  rest of the Internet is doing, and\n  whether or not anything has errors \n  and has to be re-fetched. This may\n  seem like a weird way of doing \n  things, but it would quite literally\n  be impossible for the Internet (not \n  just the WWW) to work with any degree\n  of reliability if it wasn't done  this\n  way.</p>\n  \n  <p>Also, the browser's internal queue\n  might not fetch entities in the order \n  they appear in the page - it's not\n  required to by any standard.</p>\n  \n  <p>(Oh, and don't forget caching, both in\n  the browser and in caching  proxies\n  used by ISPs to ease the load on the\n  network.)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://ajax.dynatrace.com/pages\" rel=\"nofollow\">Dynatrace AJAX Edition</a> shows you the exact sequence of page loading, parsing and execution.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>AFAIK, the browser (at least Firefox) requests every resource as soon as it parses it. If it encounters an img tag it will request that image as soon as the img tag has been parsed. And that can be even before it has received the totality of the HTML document... that is it could still be downloading the HTML document when that happens.</p>\n\n<p>For Firefox, there are browser queues that apply, depending on how they are set in about:config. For example it will not attempt to download more then 8 files at once from the same server... the additional requests will be queued. I think there are per-domain limits, per proxy limits, and other stuff, which are documented on the Mozilla website and can be set in about:config. I read somewhere that IE has no such limits.</p>\n\n<p>The jQuery ready event is fired as soon as <strong>the main HTML document</strong> has been downloaded and it's DOM parsed. Then the load event is fired once all linked resources (CSS, images, etc.) have been downloaded and parsed as well. It is made clear in the jQuery documentation.</p>\n\n<p>If you want to control the order in which all that is loaded, I believe the most reliable way to do it is through JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have done some web based projects, but I don't think too much about the load and execution sequence of an ordinary web page. But now I need to know detail. It's hard to find answers from Google or SO, so I created this question.</p>\n\n<p>A sample page is like this:</p>\n\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n  &lt;script src=\"jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n  &lt;script src=\"abc.js\" type=\"text/javascript\"&gt;\n  &lt;/script&gt;\n  &lt;link rel=\"stylesheets\" type=\"text/css\" href=\"abc.css\"&gt;&lt;/link&gt;\n  &lt;style&gt;h2{font-wight:bold;}&lt;/style&gt;\n  &lt;script&gt;\n  $(document).ready(function(){\n     $(\"#img\").attr(\"src\", \"kkk.png\");\n  });\n &lt;/script&gt;\n &lt;/head&gt;\n &lt;body&gt;\n    &lt;img id=\"img\" src=\"abc.jpg\" style=\"width:400px;height:300px;\"/&gt;\n    &lt;script src=\"kkk.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>So here are my questions:</p>\n\n<ol>\n<li>How does this page load?</li>\n<li>What is the sequence of the loading?</li>\n<li>When is the JS code executed? (inline and external)</li>\n<li>When is the CSS executed (applied)?</li>\n<li>When does $(document).ready get executed?</li>\n<li>Will abc.jpg be downloaded? Or does it just download kkk.png?</li>\n</ol>\n\n<p>I have the following understanding:</p>\n\n<ol>\n<li>The browser loads the html (DOM) at first.</li>\n<li>The browser starts to load the external resources from top to bottom, line by line.</li>\n<li>If a <code>&lt;script&gt;</code> is met, the loading will be blocked and wait until the JS file is loaded and executed and then continue.</li>\n<li>Other resources (CSS/images) are loaded in parallel and executed if needed (like CSS).</li>\n</ol>\n\n<p>Or is it like this:</p>\n\n<p>The browser parses the html (DOM) and gets the external resources in an array or stack-like structure. After the html is loaded, the browser starts to load the external resources in the structure in parallel and execute, until all resources are loaded. Then the DOM will be changed corresponding to the user's behaviors depending on the JS.</p>\n\n<p>Can anyone give a detailed explanation about what happens when you've got the response of a html page? Does this vary in different browsers? Any reference about this question?</p>\n\n<p>Thanks.</p>\n\n<p>EDIT:</p>\n\n<p>I did an experiment in Firefox with Firebug. And it shows as the following image:\n<img src=\"http://i48.tinypic.com/21n0hw7.jpg\" alt=\"alt text\"></p>\n",
            "last_activity_date": 1423875519,
            "question_id": 1795438,
            "score": 104,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "Load and execution sequence of a web page?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>Could you use a <a href=\"http://css-discuss.incutio.com/?page=PrintStylesheets\" rel=\"nofollow\">print stylesheet</a>, and use CSS to arrange the content you wanted printed? <a href=\"http://www.alistapart.com/stories/goingtoprint/\" rel=\"nofollow\">Read this article</a> for more pointers.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>hm ... use the type of a stylsheet for printing ... eg:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"print.css\" media=\"print\" /&gt;\n</code></pre>\n\n<p>print.css:</p>\n\n<pre><code>div { display: none; }\n#yourdiv { display: block; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Use a special Stylesheet for printing</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"print.css\" type=\"text/css\" media=\"print\" /&gt;\n</code></pre>\n\n<p>and then add a class i.e. \"noprint\" to every tag which's content you don't want to print.</p>\n\n<p>In the CSS use </p>\n\n<pre><code>.noprint {\n  display: none;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could use a separate CSS style which disables every other content except the one with the id \"printarea\".</p>\n\n<p>See <a href=\"http://alistapart.com/article/goingtoprint/\" rel=\"nofollow\">CSS Design: Going to Print</a> for further explanation and examples.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With CSS 3 you could use the following:</p>\n\n<pre><code>body *:not(#printarea) {\n    display: none;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>All the answers so far are pretty flawed - they either involve adding <code>class=\"noprint\"</code> to everything or will mess up <code>display</code> within <code>#printable</code>.</p>\n\n<p>I think the best solution would be to create a wrapper around the non-printable stuff:</p>\n\n<pre><code>&lt;head&gt;\n    &lt;style type=\"text/css\"&gt;\n\n    #printable { display: none; }\n\n    @media print\n    {\n    \t#non-printable { display: none; }\n    \t#printable { display: block; }\n    }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"non-printable\"&gt;\n    \tYour normal page contents\n    &lt;/div&gt;\n\n    &lt;div id=\"printable\"&gt;\n    \tPrinter version\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Of course this is not perfect as it involves moving things around in your HTML a bit...</p>\n",
                    "is_accepted": true,
                    "score": 91
                },
                {
                    "body": "<p>If you only want to print this div, you must use the instruction:</p>\n\n<pre><code>@media print{\n    *{display:none;}\n    #mydiv{display:block;}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I picked up the content using JavaScript and created a window that I could print in stead...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<ol>\n<li><p>Give whatever element you want to print the id <code>printMe</code>.</p></li>\n<li><p>Include this script in your head tag:</p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\n    var gAutoPrint = true;\n\n    function processPrint(){\n\n    if (document.getElementById != null){\n    var html = '&lt;HTML&gt;\\n&lt;HEAD&gt;\\n';\n    if (document.getElementsByTagName != null){\n    var headTags = document.getElementsByTagName(\"head\");\n    if (headTags.length &gt; 0) html += headTags[0].innerHTML;\n    }\n\n    html += '\\n&lt;/HE' + 'AD&gt;\\n&lt;BODY&gt;\\n';\n    var printReadyElem = document.getElementById(\"printMe\");\n\n    if (printReadyElem != null) html += printReadyElem.innerHTML;\n    else{\n    alert(\"Error, no contents.\");\n    return;\n    }\n\n    html += '\\n&lt;/BO' + 'DY&gt;\\n&lt;/HT' + 'ML&gt;';\n    var printWin = window.open(\"\",\"processPrint\");\n    printWin.document.open();\n    printWin.document.write(html);\n    printWin.document.close();\n\n    if (gAutoPrint) printWin.print();\n    } else alert(\"Browser not supported.\");\n\n    }\n&lt;/script&gt;\n</code></pre></li>\n<li><p>Call the function</p>\n\n<pre><code>&lt;a href=\"javascript:void(processPrint());\"&gt;Print&lt;/a&gt;\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Sandro's method works great.</p>\n\n<p>I tweaked it to allow for allowing multiple printMe links, particularily to be used in tabbed pages and expanding text.</p>\n\n<p><code>function processPrint(printMe){</code>  &lt;-- calling for a variable here</p>\n\n<p><code>var printReadyElem = document.getElementById(printMe);</code>  &lt;-- removed the quotes around printMe to ask for a variable</p>\n\n<p><code>&lt;a href=\"javascript:void(processPrint('divID'));\"&gt;Print&lt;/a&gt;</code> &lt;-- passing the div ID to be printed on to the function to turn the printMe variable into the div ID. single quotes are needed</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>With jQuery it's as simple as this:</p>\n\n<pre><code>w=window.open();\nw.document.write($('.report_left_inner').html());\nw.print();\nw.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>This works well:</p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n@media print\n{\nbody * { visibility: hidden; }\n#printcontent * { visibility: visible; }\n#printcontent { position: absolute; top: 40px; left: 30px; }\n}\n&lt;/style&gt;\n</code></pre>\n\n<p>Note that this only works with \"visibility\". \"display\" won't do it. Tested in FF3.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is a general solution, using <strong>CSS only</strong>, which I have verified to work.</p>\n\n<pre><code>@media print {\n  body * {\n    visibility: hidden;\n  }\n  #section-to-print, #section-to-print * {\n    visibility: visible;\n  }\n  #section-to-print {\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n}\n</code></pre>\n\n<p>Alternative approaches aren't so good. Using <code>display</code> is tricky because if any element has <code>display:none</code> then none of its descendants will display either. To use it, you have to change the structure of your page.</p>\n\n<p>Using <code>visibility</code> works better since you can turn on visibility for descendants. The invisible elements still affect the layout though, so I move <code>section-to-print</code> to the top left so it prints properly.</p>\n",
                    "is_accepted": false,
                    "score": 188
                },
                {
                    "body": "<p>The best way is by using css <code>media=\"print\"</code></p>\n\n<p>The following code is really awesome and working.</p>\n\n<pre><code>&lt;style media=\"print\" type=\"text/css\"&gt;\n@media print\n{\nbody * { visibility: hidden; }\n#PrintDiv * { visibility: visible; }\n#PrintDiv { position: absolute; top: 40px; left: 30px; }\n}\n&lt;/style&gt;\n</code></pre>\n\n<p>This code is working. I've tested this in Firefox 3.5.15</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>printDiv(divId)</strong>:  A generalized solution to print any div on any page.</p>\n\n<p>I had a similar issue but I wanted (a) to be able to print the whole page, or (b) print any one of several specific areas.  My solution, thanks to much of the above, allows you to specify any div object to be printed.  </p>\n\n<p>The key for this solution is to add an appropriate rule to the the print media style sheet so that the requested div (and its contents) will be printed.</p>\n\n<p>First, create the needed print css to suppress everything (but without the specific rule to allow the element you want to print).  </p>\n\n<pre><code>&lt;style type=\"text/css\" media=\"print\"&gt;\n   body {visibility:hidden; }\n   .noprintarea {visibility:hidden; display:none}\n   .noprintcontent { visibility:hidden; }\n   .print { visibility:visible; display:block; }\n&lt;/style&gt;\n</code></pre>\n\n<p>Note that I have added new class rules: </p>\n\n<ul>\n<li><em>noprintarea</em> allows you to suppress the printing of elements within your div- both the content and the block.</li>\n<li><em>noprintcontent</em> allows you to suppress the printing of elements within your div- the content is suppressed but and the allocated area is left empty. </li>\n<li><em>print</em> allows you to have items that show up in the printed version but\nnot on the screen page.  These will normally have \"display:none\" for the screen style.</li>\n</ul>\n\n<p>Then insert three JavaScript functions.  The first merely toggles the print media style sheet on and off. </p>\n\n<pre><code>function disableSheet(thisSheet,setDisabled)\n{ document.styleSheets[thisSheet].disabled=setDisabled; }   \n</code></pre>\n\n<p>The second does the real work and the third cleans up afterward.  The second (printDiv) activates the print media style sheet, then appends a new rule to allow the desired div to print, issues the print, and then adds a delay before the final housekeeping (otherwise the styles can be reset before the print is actually done.)  </p>\n\n<pre><code>function printDiv(divId)\n{\n  //  Enable the print CSS: (this temporarily disables being able to print the whole page)\n  disableSheet(0,false);\n  //  Get the print style sheet and add a new rule for this div\n  var sheetObj=document.styleSheets[0];  \n  var showDivCSS=\"visibility:visible;display:block;position:absolute;top:30px;left:30px;\";\n  if (sheetObj.rules) { sheetObj.addRule(\"#\"+divId,showDivCSS); }\n  else                { sheetObj.insertRule(\"#\"+divId+\"{\"+showDivCSS+\"}\",sheetObj.cssRules.length); }\n  print();\n  //  need a brief delay or the whole page will print\n  setTimeout(\"printDivRestore()\",100);  \n}\n</code></pre>\n\n<p>The final functions deletes the added rule and sets the print style again to disabled so the whole page can be printed. </p>\n\n<pre><code>function printDivRestore()\n{\n  // remove the div-specific rule\n  var sheetObj=document.styleSheets[0];  \n  if (sheetObj.rules) { sheetObj.removeRule(sheetObj.rules.length-1); }\n  else                { sheetObj.deleteRule(sheetObj.cssRules.length-1); }\n  //  and re-enable whole page printing\n  disableSheet(0,true);\n}\n</code></pre>\n\n<p>The only other thing to do is to add one line to your onload processing so that the print style is initially disabled thereby allowing whole page printing. </p>\n\n<pre><code>&lt;body onLoad='disableSheet(0,true)'&gt;\n</code></pre>\n\n<p>Then, from anywhere in your document, you can print a div. Just issue printDiv(\"thedivid\") from a button or whatever. </p>\n\n<p>A big plus for this approach it provides a general solution to printing selected content from within a page.  It also allows use of existing styles for elements that are printed - including the containing div.  </p>\n\n<p>NOTE:  In my implementation, this must be the first style sheet.  Change the sheet references (0) to the appropriate sheet number if you need to make it later in the sheet sequence. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have a better solution with minimal code.</p>\n\n<p>Place your printable part inside a div with an id like this:</p>\n\n<pre><code>&lt;div id=\"printableArea\"&gt;\n      &lt;h1&gt;Print me&lt;/h1&gt;\n&lt;/div&gt;\n\n&lt;input type=\"button\" onclick=\"printDiv('printableArea')\" value=\"print a div!\" /&gt;\n</code></pre>\n\n<p>Then add an event like an onclick (as shown above), and pass the id of the div like I did above.</p>\n\n<p>Now let's create a really simple javascript:</p>\n\n<pre><code>function printDiv(divName) {\n     var printContents = document.getElementById(divName).innerHTML;\n     var originalContents = document.body.innerHTML;\n\n     document.body.innerHTML = printContents;\n\n     window.print();\n\n     document.body.innerHTML = originalContents;\n}\n</code></pre>\n\n<p>Notice how simple this is?  No popups, no new windows, no crazy styling, no JS libraries like jquery.  The problem with really complicated solutions (the answer isn't complicated and not what I'm referring to) is the fact that it will NEVER translate across all browsers, ever!  If you want to make the styles different, do as shown in the checked answer by adding the media attribute to a stylesheet link (media=\"print\").  </p>\n\n<p>No fluff, lightweight, it just works.</p>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<p>You can use this:\n<a href=\"http://vikku.info/codesnippets/javascript/print-div-content-print-only-the-content-of-an-html-element-and-not-the-whole-document/\" rel=\"nofollow\">http://vikku.info/codesnippets/javascript/print-div-content-print-only-the-content-of-an-html-element-and-not-the-whole-document/</a></p>\n\n<p>Or use <code>visibility:visible</code> and <code>visibility:hidden</code> css property together with <code>@media print{}</code></p>\n\n<p>'display:none' will hide all nested 'display:block'. That is not solution.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>Step1. Write the following javascript inside your head tag</p>\n</blockquote>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\nfunction PrintMe(DivID) {\nvar disp_setting=\"toolbar=yes,location=no,\";\ndisp_setting+=\"directories=yes,menubar=yes,\";\ndisp_setting+=\"scrollbars=yes,width=650, height=600, left=100, top=25\";\n   var content_vlue = document.getElementById(DivID).innerHTML;\n   var docprint=window.open(\"\",\"\",disp_setting);\n   docprint.document.open();\n   docprint.document.write('&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"');\n   docprint.document.write('\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;');\n   docprint.document.write('&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\"&gt;');\n   docprint.document.write('&lt;head&gt;&lt;title&gt;My Title&lt;/title&gt;');\n   docprint.document.write('&lt;style type=\"text/css\"&gt;body{ margin:0px;');\n   docprint.document.write('font-family:verdana,Arial;color:#000;');\n   docprint.document.write('font-family:Verdana, Geneva, sans-serif; font-size:12px;}');\n   docprint.document.write('a{color:#000;text-decoration:none;} &lt;/style&gt;');\n   docprint.document.write('&lt;/head&gt;&lt;body onLoad=\"self.print()\"&gt;&lt;center&gt;');\n   docprint.document.write(content_vlue);\n   docprint.document.write('&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;');\n   docprint.document.close();\n   docprint.focus();\n}\n&lt;/script&gt;\n</code></pre>\n\n<blockquote>\n  <p>Step2. Call the PrintMe('DivID') function by an onclick event.</p>\n</blockquote>\n\n<pre><code>&lt;input type=\"button\" name=\"btnprint\" value=\"Print\" onclick=\"PrintMe('divid')\"/&gt;\n&lt;div id=\"divid\"&gt;\nhere is some text to print inside this div with an id 'divid'\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I didn't really like any of these answers as a whole.  If you have a class (say printableArea) and have that as an immediate child of body, then you can do something like this:</p>\n\n<pre><code>body &gt; *:not(.printableArea) {\n    display: none;\n}\n\n//Not needed if already showing\nbody &gt; .printableArea {\n    display: block;\n}\n</code></pre>\n\n<p>Using the visibility can cause a lot of spacing issues and blank pages.  This is because the visibility maintains the elements space, just makes it hidden, where as display removes it and allows other elements to take up its space. </p>\n\n<p>The reason why this solution works is that you are not grabbing all elements, just the immediate children of body and hiding them.  The other solutions below with display css, hide all the elements, which effects everything inside of printableArea content.</p>\n\n<p>I wouldn't suggest javascript as you would need to have a print button that the user clicks and the standard browser print buttons wouldn't have the same effect.  If you really need to do that, what I would do is store the html of body, remove all unwanted elements, print, then add the html back.  As mentioned though, I would avoid this if you can and use a CSS option like above.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n   function printDiv(divId) {\n       var printContents = document.getElementById(divId).innerHTML;\n       var originalContents = document.body.innerHTML;\n       document.body.innerHTML = \"&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\" + printContents + \"&lt;/body&gt;\";\n       window.print();\n       document.body.innerHTML = originalContents;\n   }\n</code></pre>\n\n<p>\nFor more details <a href=\"http://aspdotnet41.blogspot.in/2013/10/print-div-content-or-web-page-using_10.html\" rel=\"nofollow\">click here</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The printDiv() function came out a few times, but in that case, you loose all your binding elements and input values. So, my solution is to create a div for everything called \"body_allin\" and another one outside the first one called \"body_print\".</p>\n\n<p>Then you call this function:</p>\n\n<pre><code>function printDiv(divName){\n\n    var printContents = document.getElementById(divName).innerHTML;\n\n    document.getElementById(\"body_print\").innerHTML = printContents;\n\n    document.getElementById(\"body_allin\").style.display = \"none\";\n    document.getElementById(\"body_print\").style.display = \"\";\n\n    window.print();\n\n    document.getElementById(\"body_print\").innerHTML = \"\";\n    document.getElementById(\"body_allin\").style.display = \"\";\n    document.getElementById(\"body_print\").style.display = \"none\";\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I print the indicated div (without manually disabling all other content on the page)?</p>\n\n<p>I want to avoid a new preview dialog, so crating a new window with this content is not useful...</p>\n\n<p>The page contains a couple of tables, one of them contains the div I want to print - the table is styled with visual styles for the web, that should not be shown in print....</p>\n",
            "last_activity_date": 1411449641,
            "question_id": 468881,
            "score": 131,
            "tags": [
                "javascript",
                "css",
                "printing",
                "dhtml"
            ],
            "title": "Print &lt;div id=printarea&gt;&lt;/div&gt; only?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Interop from outside of angular to angular is same as debugging angular application or integrating with third party library.</p>\n\n<p>For any DOM element you can do this:</p>\n\n<ul>\n<li><code>angular.element(domElement).scope()</code> to get the current scope for the element</li>\n<li><code>angular.element(domElement).injector()</code> to get the current app injector</li>\n<li><code>angular.element(domElement).controller()</code> to get a hold of the <code>ng-controller</code> instance.</li>\n</ul>\n\n<p>From the injector you can get a hold of any service in angular application. Similarly from the scope you can invoke any methods which have been published to it.</p>\n\n<p>Keep in mind that any changes to the angular model or any method invocations on the scope need to be wrapped in <code>$apply()</code> like this:</p>\n\n<pre><code>$scope.$apply(function(){\n  // perform any model changes or method invocations here on angular app.\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 219
                },
                {
                    "body": "<p>Thanks to the previous post, I can update my model with an asynchronous event.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div id=\"control-panel\" ng-controller=\"Filters\"&gt;\n    &lt;ul&gt;\n        &lt;li ng-repeat=\"filter in filters\"&gt;\n        &lt;button type=\"submit\" value=\"\" class=\"filter_btn\"&gt;{{filter.name}}&lt;/button&gt;\n        &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>I declare my model</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function Filters($scope) {\n    $scope.filters = [];\n}\n</code></pre>\n\n<p>And i update my model from outside my scope</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>ws.onmessage = function (evt) {\n    dictt = JSON.parse(evt.data)\n    angular.element(document.getElementById('control-panel')).scope().$apply(function(scope){\n        scope.filters = dictt.filters;\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Greatest explanation of the concept I've found is situated here:\n<a href=\"https://groups.google.com/forum/#!msg/angular/kqFrwiysgpA/eB9mNbQzcHwJ\">https://groups.google.com/forum/#!msg/angular/kqFrwiysgpA/eB9mNbQzcHwJ</a></p>\n\n<p>To save you the clicking:</p>\n\n<pre><code>// get Angular scope from the known DOM element\ne = document.getElementById('myAngularApp');\nscope = angular.element(e).scope();\n// update the model with a wrap in $apply(fn) which will refresh the view for us\nscope.$apply(function() {\n    scope.controllerMethod(val);\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Misko gave the correct answer (obviously), but some of us newbies may need it simplified further. </p>\n\n<p>When if comes to calling AngularJS code from within legacy apps, think of the AngularJS code as a \"micro app\" existing within a protected container in your legacy application. You cannot make calls to it directly (for very good reason), but you can make remote calls by way of the $scope object.</p>\n\n<p>To use the $scope object, you need to get the handle of $scope. Fortunately this is very easy to do. </p>\n\n<p>You can use the id of any HTML element within your AngularJS \"micro-app\" HTML to get the handle of the AngularJS app $scope. </p>\n\n<p>As an example, let's say we want to call a couple of functions within our AngularJS controller such as sayHi() and sayBye(). In the AngularJS HTML (view) we have a div with the id  \"MySuperAwesomeApp\". You can use the following code, combined with jQuery to get the handle of $scope:</p>\n\n<pre><code>var microappscope = angular.element($(\"#MySuperAwesomeApp\")).scope();\n</code></pre>\n\n<p>Now you can call your AngularJS code functions by way of the scope handle:</p>\n\n<pre><code>// we are in legacy code land here...\n\nmicroappscope.sayHi();\n\nmicroappscope.sayBye();\n</code></pre>\n\n<p>To make things more convenient, you can use a function to grab the scope handle anytime you want to access it:</p>\n\n<pre><code>function microappscope(){\n\n    return angular.element($(\"#MySuperAwesomeApp\")).scope();\n\n}\n</code></pre>\n\n<p>Your calls would then look like this: </p>\n\n<pre><code>microappscope().sayHi();\n\nmicroappscope().sayBye();\n</code></pre>\n\n<p>You can see a working example here:</p>\n\n<p><a href=\"http://jsfiddle.net/peterdrinnan/2nPnB/16/\">http://jsfiddle.net/peterdrinnan/2nPnB/16/</a></p>\n\n<p>I also showed this in a slideshow for the Ottawa AngularJS group (just skip to the last 2 slides)</p>\n\n<p><a href=\"http://www.slideshare.net/peterdrinnan/angular-for-legacyapps\">http://www.slideshare.net/peterdrinnan/angular-for-legacyapps</a></p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>Further to the other answers. \nIf you don't want to access a method in a controller but want to access the service directly you can do something like this:</p>\n\n<pre><code>// Angular code* :\nvar myService = function(){\n    this.my_number = 9;\n}\nangular.module('myApp').service('myService', myService);\n\n\n// External Legacy Code:\nvar external_access_to_my_service = angular.element('body').injector().get('myService');\nvar my_number = external_access_to_my_service.my_number \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I'm using angular to build HTML controls that interact with a legacy Flex application. All callbacks from the Flex app must be attached to the DOM window.</p>\n\n<p>For example (in AS3)</p>\n\n<pre><code>ExternalInterface.call(\"save\", data);\n</code></pre>\n\n<p>Will call</p>\n\n<pre><code>window.save = function(data){\n    // want to update a service \n    // or dispatch an event here...\n}\n</code></pre>\n\n<p>From within the JS resize function I'd like to dispatch an event that a controller can hear. It seems that creating a service is the way to go. Can you update a service from outside of Angular? Can a controller listen for events from a service? In one <a href=\"http://jsfiddle.net/6JvRV/\">experiment (click for fiddle)</a> I did it seems like I can access a service but updating the service's data doesn't get reflected in the view (in the example an <code>&lt;option&gt;</code> should be added to the <code>&lt;select&gt;</code>).</p>\n\n<p>thanks!</p>\n",
            "last_activity_date": 1414142963,
            "question_id": 10490570,
            "score": 111,
            "tags": [
                "javascript",
                "actionscript-3",
                "externalinterface",
                "angularjs"
            ],
            "title": "Call Angular JS from legacy code"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Putting the onclick within the href would offend those who believe strongly in separation of content from behavior/action. The argument is that your html content should remain focused solely on content, not on presentation or behavior.</p>\n\n<p>The typical path these days is to use a javascript library (eg. jquery) and create an event handler using that library. It would look something like:</p>\n\n<pre><code>$('a').click( function() { your_code_here; return false; } );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 84
                },
                {
                    "body": "<p>Personally, I find putting javascript calls in the HREF tag annoying. I usually don't really pay attention to whether or not something is a javascript link or not, and often times want to open things in a new window. When I try doing this with one of these types of links, I get a blank page with nothing on it and javascript in my location bar. However, this is sidestepped a bit by using an onlick.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In addition to all here, the href is shown on browser's status bar, and onclick not. I think it's not user friendly to show javascript code there.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Having <code>javascript:</code> in any attribute that isn't specifically for scripting is an outdated method of HTML.  While technically it works, you're still assigning javascript properties to a non-script attribute, which isn't good practice.  It can even fail on old browsers, or even some modern ones (a googled forum post seemd to indicate that Opera does not like 'javascript:' urls).</p>\n\n<p>A better practice would be the second way, to put your javascript into the <code>onclick</code> attribute, which is ignored if no scripting functionality is available.  Place a valid URL in the href field (commonly '#') for fallback for those who do not have javascript.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In terms of <em>javascript</em>, one difference is that the <code>this</code> keyword in the <code>onclick</code> handler will refer to the DOM element whose <code>onclick</code> attribute it is (in this case the <code>&lt;a&gt;</code> element), whereas <code>this</code> in the <code>href</code> attribute will refer to the <code>window</code> object.</p>\n\n<p>In terms of <em>presentation</em>, if an <code>href</code> attribute is absent from a link (i.e. <code>&lt;a onclick=\"[...]\"&gt;</code>) then, by default, browsers will display the <code>text</code> cursor (and not the often-desired <code>pointer</code> cursor) since it is treating the <code>&lt;a&gt;</code> as an anchor, and not a link.</p>\n\n<p>In terms of <em>behavior</em>, when specifying an action by navigation via <code>href</code>, the browser will typically support opening that <code>href</code> in a separate window using either a shortcut or context menu. This is not possible when specifying an action only via <code>onclick</code>.</p>\n\n<hr>\n\n<p>However, if you're asking what is the best way to get dynamic action from the click of a DOM object, then attaching an event using javascript separate from the content of the document is the best way to go. You could do this in a number of ways. A common way is to use a javascript library like jQuery to bind an event:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;a id=\"link\" href=\"http://example.com/action\"&gt;link text&lt;/a&gt;\n&lt;script type=\"text/javascript\"&gt;\n    $('a#link').click(function(){ /* ... action ... */ })\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>the best way to do this is with:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"someFunction(e)\"&gt;&lt;/a&gt;\n</code></pre>\n\n<p>The problem is that this WILL add a hash (#) to the end of the page's URL in the browser, thus requiring the user to click the back button twice to go to the page before yours. Considering this, you need to add some code to stop event propagation. Most javascript toolkits will already have a function for this. For example, the dojo toolkit uses </p>\n\n<pre><code>dojo.stopEvent(event);\n</code></pre>\n\n<p>to do so.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I use</p>\n\n<pre><code>Click &lt;a nohref style=\"cursor:pointer;color:blue;text-decoration:underline\"\nonClick=\"alert('Hello World')\"&gt;HERE&lt;/a&gt;\n</code></pre>\n\n<p>A long way around but it gets the job done. use an A style to simplify\nthen it becomes:</p>\n\n<pre><code>&lt;style&gt; A {cursor:pointer;color:blue;text-decoration:underline; } &lt;/style&gt; \n&lt;a nohref onClick=\"alert('Hello World')\"&gt;HERE&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><strong>bad:</strong> </p>\n\n<pre><code>&lt;a id=\"myLink\" href=\"javascript:MyFunction();\"&gt;link text&lt;/a&gt;\n</code></pre>\n\n<p><strong>good:</strong> </p>\n\n<pre><code>&lt;a id=\"myLink\" href=\"#\" onclick=\"MyFunction();\"&gt;link text&lt;/a&gt;\n</code></pre>\n\n<p><strong>better:</strong> </p>\n\n<pre><code>&lt;a id=\"myLink\" href=\"#\" onclick=\"MyFunction();return false;\"&gt;link text&lt;/a&gt;\n</code></pre>\n\n<p><strong>even better 1:</strong> </p>\n\n<pre><code>&lt;a id=\"myLink\" title=\"Click to do something\"\n href=\"#\" onclick=\"MyFunction();return false;\"&gt;link text&lt;/a&gt;\n</code></pre>\n\n<p><strong>even better 2:</strong> </p>\n\n<pre><code>&lt;a id=\"myLink\" title=\"Click to do something\"\n href=\"PleaseEnableJavascript.html\" onclick=\"MyFunction();return false;\"&gt;link text&lt;/a&gt;\n</code></pre>\n\n<p>Why better? because <code>return false</code> will prevent browser from following the link</p>\n\n<p><strong>best:</strong> </p>\n\n<p>Use jQuery or other similar framework to attach onclick handler by element's ID.</p>\n\n<pre><code>$('#myLink').click(function(){ MyFunction(); return false; });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 408
                },
                {
                    "body": "<p>I think you can use location.href=\"Provide the java class function name\".This will transfer the control from jsp to java function without using the ajax call</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>it worked for me using this line of code: </p>\n\n<pre><code>&lt;a id=\"LinkTest\" title=\"Any Title\"  href=\"#\" onclick=\"Function(); return false; \"&gt;text&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I want to run a simple JavaScript function on a click without any redirection.\nIs there any difference or benefit between putting the JavaScript call in the <code>href</code> attribute  (like this: <code>&lt;a href=\"javascript:my_function();window.print();\"&gt;....&lt;/a&gt;</code>) vs. putting it in the <code>onclick</code> attribute (binding it to the <code>onclick</code> event)?</p>\n",
            "last_activity_date": 1418224460,
            "question_id": 1070760,
            "score": 143,
            "tags": [
                "javascript",
                "href"
            ],
            "title": "JavaScript function in href vs. onclick"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<pre><code>some_var = null;\n\n//or remove it..\ndelete some_var;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>If you are implicitly declaring the variable without <code>var</code>, the proper way would be to use <code>delete foo</code>. </p>\n\n<p>However after you delete it, if you try to use this in an operation such as addition a <code>ReferenceError</code> will be thrown because you can't add a string to an undeclared, undefined identifier. Example:</p>\n\n<pre><code>x = 5;\ndelete x\nalert('foo' + x )\n// ReferenceError: x is not defined\n</code></pre>\n\n<p>It may be safer in some situations to assign it to false, null, or undefined so it's declared and won't throw this type of error.</p>\n\n<pre><code>foo = false\n</code></pre>\n\n<p>Note that in ECMAScript <code>null</code>, <code>false</code>, <code>undefined</code>, <code>0</code>, <code>NaN</code>, or <code>''</code> would all evaluate to <code>false</code>. Just make sure you dont use the <code>!==</code> operator but instead <code>!=</code> when type checking for booleans and you don't want identity checking (so <code>null</code> would <code>== false</code> and <code>false == undefined</code>).</p>\n\n<p>Also note that <code>delete</code> doesn't \"delete\" references but just properties directly on the object, e.g.:</p>\n\n<pre><code>bah = {}, foo = {}; bah.ref = foo;\n\ndelete bah.ref;\nalert( [bah.ref, foo ] )\n// ,[object Object] (it deleted the property but not the reference to the other object)\n</code></pre>\n\n<p>If you have declared a variable with <code>var</code> you can't delete it:</p>\n\n<pre><code>(function() {\n    var x = 5;\n    alert(delete x)\n    // false\n})();\n</code></pre>\n\n<p>In Rhino:</p>\n\n<pre><code>js&gt; var x\njs&gt; delete x\nfalse\n</code></pre>\n\n<p>Nor can you delete some predefined properties like <code>Math.PI</code>:</p>\n\n<pre><code>js&gt; delete Math.PI\nfalse\n</code></pre>\n\n<p>There are some odd exceptions to <code>delete</code> as with any language, if you care enough you should read:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/delete_Operator\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/delete_Operator</a></li>\n<li><a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\">http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>@scunlife's answer will work, but technically it ought to be </p>\n\n<pre><code>delete window.some_var; \n</code></pre>\n\n<p>delete is supposed to be a no-op when the target isn't an object property. e.g.,</p>\n\n<pre><code>(function() {\n   var foo = 123;\n   delete foo; // wont do anything, foo is still 123\n   var bar = { foo: 123 };\n   delete bar.foo; // foo is gone\n}());\n</code></pre>\n\n<p>But since global variables are actually members of the window object, it works. </p>\n\n<p>When prototype chains are involved, using delete gets more complex because it only removes the property from the target object, and not the prototype. e.g.,</p>\n\n<pre><code>function Foo() {}\nFoo.prototype = { bar: 123 };\nvar foo = new Foo();\n// foo.bar is 123\nfoo.bar = 456;\n// foo.bar is now 456\ndelete foo.bar;\n// foo.bar is 123 again.\n</code></pre>\n\n<p>So be careful.</p>\n\n<p>EDIT: My answer is <a href=\"http://perfectionkills.com/understanding-delete/\">somewhat inaccurate</a> (see \"Misconceptions\" at the end). The link explains all the gory details, but the summary is that there can be big differences between browsers and depending on the object you are deleting from. <code>delete object.someProp</code> should generally be safe as long as <code>object !== window</code>. I still wouldn't use it to delete variables declared with <code>var</code> although you can under the right circumstances.</p>\n",
                    "is_accepted": false,
                    "score": 216
                },
                {
                    "body": "<p>I know this is an old thread, but the selected answer isn't clear enough for me.</p>\n\n<p>The point is the delete operator removes a property from an object. It cannot remove a variable. So the answer to the question depends on how the global variable or property is defined.</p>\n\n<p>(1) If it is created with var, it cannot be deleted.</p>\n\n<p>For example:</p>\n\n<pre><code>var g_a = 1; //create with var, g_a is a variable \ndelete g_a; //return false\nconsole.log(g_a); //g_a is still 1\n</code></pre>\n\n<p>(2) If it is created without var, it can be deleted.</p>\n\n<pre><code>g_b = 1; //create without var, g_b is a property \ndelete g_b; //return true\nconsole.log(g_b); //error, g_b is not defined\n</code></pre>\n\n<h2>Technical Explanation</h2>\n\n<h3>1. Using <code>var</code></h3>\n\n<p>In this case the reference <code>g_a</code> is created in what the ECMAScript spec calls \"<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.3\"><em>VariableEnvironment</em></a>\" that is attached to the current scope - this may be the a function execution context in the case of using <code>var</code> inside a function (though it may be get a little more complicated when you consider <code>let</code>) or in the case of \"global\" code the <em>VariableEnvironment</em> is attached to the global object (often <code>window</code>).</p>\n\n<p>References in the <em>VariableEnvironment</em> are not normally deletable - the process detailed in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.5\">ECMAScript 10.5</a> explains this in detail, but suffice it to say that unless your code is executed in an <code>eval</code> context (which most browser-based development consoles use), then variables declared with <code>var</code> cannot be deleted.</p>\n\n<h3>2. Without Using <code>var</code></h3>\n\n<p>When trying to assign a value to a name without using the <code>var</code> keyword, Javascript tries to locate the named reference in what the ECMAScript spec calls \"<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.3\"><em>LexicalEnvironment</em></a>\", and the main difference is that <em>LexicalEvironment</em>s are nested - that is a <em>LexicalEnvironment</em> has a parent (what the ECMAScript spec calls \"outer environment reference\") and when Javscript fails to locate the reference in a <em>LexicalEenvironment</em>, it looks in the parent <em>LexicalEnvironment</em> (as detailed in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.3.1\">10.3.1</a> and <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.2.1\">10.2.2.1</a>). The top level <em>LexicalEnvironment</em> is the \"<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.2.3\"><em>global environment</em></a>\", and that is bound to the global object in that its references are the global object's properties. So if you try to access a name that was not declared using a <code>var</code> keyword in the current scope or any outer scopes, Javascript will eventually fetch a property of the <code>window</code> object to serve as that reference. As we've learned before, properties on objects can be deleted.</p>\n\n<h3>Notes</h3>\n\n<ol>\n<li><p>It is important to remember that <code>var</code> declarations are \"hoisted\" - i.e. the are always considered to have happened in the beginning of the scope that they are in - though not the value initialization that may be done in a <code>var</code> statement - that is left where it is. So in the following code, <code>a</code> is a reference from the <em>VariableEnvironment</em> and not the <code>window</code> property and its value will be <code>10</code> at the end of the code:</p>\n\n<p><code>function test() { a = 5; var a = 10; }</code></p></li>\n<li><p>The above discussion is when \"strict mode\" is not enabled. Lookup rules are a bit different when using \"strict mode\" and lexical references that would have resolved to window properties without \"strict mode\" will raise \"undeclared variable\" errors under \"strict mode\". I didn't really understand where this is specified, but its how browsers behave.</p></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 37
                }
            ],
            "body": "<p>I have a global variable in Javascript (actually a window property, but I don't think it matters) which was already populated by a previous script but I don't want another script that will run later to see its value or that it was even defined.</p>\n\n<p>I've put <code>some_var = undefined</code> and it works for the purpose of testing <code>typeof some_var == \"undefined\"</code> but I really do not think it's the right way to go about it.</p>\n\n<p>What do you think?</p>\n",
            "last_activity_date": 1412342807,
            "question_id": 1596782,
            "score": 241,
            "tags": [
                "javascript",
                "undefined"
            ],
            "title": "How to unset a Javascript variable?"
        }
    ]
}
