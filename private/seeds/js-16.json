{
    "items": [
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>In that example, the results are the same, yes. Both execute the expression you pass. This is what makes them so dangerous. </p>\n\n<p>But they do different things behind the scense. The one involving <code>new Function()</code>, behind-the-scenes, creates an anonymous function from the code you supply, which is executed when the function is invoked. </p>\n\n<p>The JavaScript you pass to it is technically not executed until you invoke the anonymous function. This is in contrast to <code>eval()</code> which executes the code right away, and doesn't generate a function based on it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you mean, will it yield the same results, then yes... but just to eval (aka, \"evaluate this string of JavaScript\") would be much simpler.</p>\n\n<p>EDIT Below:</p>\n\n<p>It's like saying... are these two math problems the same:</p>\n\n<p>1 + 1</p>\n\n<p>1 + 1 + 1 - 1 + 1 - 1 * 1 / 1</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>No.</p>\n\n<p>In your update, the calls to <code>evaluate</code> and <code>func</code> produce the same result.  But, they are most definitely not \"doing the same thing behind the scenes\".  The <code>func</code> function creates a new function, but then immediately executes it, whereas the <code>evaluate</code> function simply executes the code on the spot.</p>\n\n<p>From the original question:</p>\n\n<pre><code>var evaluate = function(string) {\n    return eval(string);\n}\nvar func = function(string) {\n    return (new Function( 'return (' + string + ')' )());\n}\n</code></pre>\n\n<p>These will give you very different results:</p>\n\n<pre><code>evaluate('0) + (4');\nfunc('0) + (4');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><code>new Function</code> creates a function that can be reused. <code>eval</code> just executes the given string and returns the result of the last statement. Your question is misguided as you attempted to create a wrapper function that uses Function to emulate an eval.</p>\n\n<p>Is it true that they share some code behind the curtains? Yes, very likely. Exactly the same code? No, certainly.</p>\n\n<p>For fun, here's my own imperfect implementation using eval to create a function. Hope it sheds some light into the difference!</p>\n\n<pre><code>function makeFunction() {\n  var params = [];\n  for (var i = 0; i &lt; arguments.length -  1; i++) {\n    params.push(arguments[i]);\n  }\n  var code = arguments[arguments.length -  1];\n\n\n // Creates the anonymous function to be returned\n // The following line doesn't work in IE\n // return eval('(function (' + params.join(',')+ '){' + code + '})');\n // This does though\n return eval('[function (' + params.join(',')+ '){' + code + '}][0]');\n}\n</code></pre>\n\n<p>The biggest difference between this and new Function is that Function is not lexically scoped. So it wouldn't have access to closure variables and mine would.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>No, they are <strong>not</strong> the same.</p>\n\n<ul>\n<li><code>eval()</code> evaluates a string as a JavaScript expression within the current execution scope and can access local variables.</li>\n<li><code>new Function()</code> parses the JavaScript code stored in a string into a function object, which can then be called. It cannot access local variables because the code runs in a separate scope.</li>\n</ul>\n\n<p>Consider this code:</p>\n\n<pre><code>function test1() {\n    var a = 11;\n    eval('(a = 22)');\n    alert(a);            // alerts 22\n}\n</code></pre>\n\n<p>If <code>new Function('return (a = 22);')()</code> were used, the local variable <code>a</code> would retain its value. Nevertheless, some JavaScript programmers such as Douglas Crockford believe that <a href=\"http://www.google.com/search?q=eval+is+evil&amp;hl=en\">neither should be used</a> unless <a href=\"http://stackoverflow.com/questions/197769/when-is-javascripts-eval-not-evil\">absolutely necessary</a>, and evaling/using the <code>Function</code> constructor on untrusted data is insecure and unwise.</p>\n",
                    "is_accepted": true,
                    "score": 45
                },
                {
                    "body": "<p>Just want to point out some syntax used in the examples here and what it means:</p>\n\n<pre><code> var func = function(string) {\n     return (new Function( 'return (' + string + ')' )());\n }\n</code></pre>\n\n<p>notice that the Function(...)() has the \"()\" at the end.  This syntax will cause func to execute the new function and return the string not a function that returns string, but if you use the following:</p>\n\n<pre><code> var func = function(string) {\n     return (new Function( 'return (' + string + ')' ));\n }\n</code></pre>\n\n<p>Now func will return a function that returns a string.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Are these two functions doing the same thing behind the scenes? (in single statement functions)</p>\n\n<pre><code>var evaluate = function(string) {\n    return eval('(' + string + ')');\n}\n\nvar func = function(string) {\n    return (new Function( 'return (' + string + ')' )());\n}\n\nconsole.log(evaluate('2 + 1'));\nconsole.log(func('2 + 1'));\n</code></pre>\n",
            "last_activity_date": 1396294238,
            "question_id": 4599857,
            "score": 39,
            "tags": [
                "javascript",
                "function",
                "optimization",
                "eval"
            ],
            "title": "Are eval() and new Function() the same thing?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Did you try:</p>\n\n<pre>\n    execBtn.setAttribute(\"onclick\", function() { runCommand() });\n</pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Write the function inline, and the interpreter is smart enough to know you're writing a function. Do it like this, and it assumes it's just a string (which it technically is).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Not relevant to the onclick issue, but also related:</p>\n\n<p>For html attributes whose name collide with javascript reserved words, an alternate name is chosen, eg. <code>&lt;div class=''&gt;</code>, but <code>div.className</code>, or <code>&lt;label for='...'&gt;</code>, but <code>label.htmlFor</code>.</p>\n\n<p>In reasonable browsers, this doesn't affect <code>setAttribute</code>. So in gecko and webkit you'd call <code>div.setAttribute('class', 'foo')</code>, but in IE you have to use the javascript property name instead, so <code>div.setAttribute('className', 'foo')</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is a <strong>LARGE</strong> collection of attributes you <strong>can't set in IE</strong> using <strong>.setAttribute()</strong> which includes every inline event handler.</p>\n\n<p>See here for details:</p>\n\n<p><a href=\"http://webbugtrack.blogspot.com/2007/08/bug-242-setattribute-doesnt-always-work.html\" rel=\"nofollow\">http://webbugtrack.blogspot.com/2007/08/bug-242-setattribute-doesnt-always-work.html</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>to make this work in both FF and IE you must write both ways:</p>\n\n<pre><code>\n    button_element.setAttribute('onclick','doSomething();'); // for FF\n    button_element.onclick = function() {doSomething();}; // for IE\n</code></pre>\n\n<p>thanks to <a href=\"http://mcarthurgfx.com/blog/article/assigning-onclick-with-new-element-breaks-in-ie\">this post</a>.</p>\n\n<p><strong>UPDATE</strong>: \nThis is to demonstrate that sometimes it <em>is</em> necessary to use setAttribute!  This method works if you need to take the original onclick attribute from the HTML and add it to the onclick event, so that it doesn't get overridden:</p>\n\n<pre><code>// get old onclick attribute\nvar onclick = button_element.getAttribute(\"onclick\");  \n\n// if onclick is not a function, it's not IE7, so use setAttribute\nif(typeof(onclick) != \"function\") { \n    button_element.setAttribute('onclick','doSomething();' + onclick); // for FF,IE8,Chrome\n\n// if onclick is a function, use the IE7 method and call onclick() in the anonymous function\n} else {\n    button_element.onclick = function() { \n        doSomething();\n        onclick();\n    }; // for IE7\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>Have you considered an event listener rather than setting the attribute?  Among other things, it lets you pass parameters, which was a problem I ran into when trying to do this.  You still have to do it twice for IE and Mozilla:</p>\n\n<pre><code>function makeEvent(element, callback, param, event) {\n    function local() {\n    \treturn callback(param);\n    }\n\n    if (element.addEventListener) {\n    \t//Mozilla\n    \telement.addEventListener(event,local,false);\n    } else if (element.attachEvent) {\n    \t//IE\n    \telement.attachEvent(\"on\"+event,local);\n    }\n}\n\nmakeEvent(execBtn, alert, \"hey buddy, what's up?\", \"click\");\n</code></pre>\n\n<p>Just let event be a name like \"click\" or \"mouseover\".</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I did this to get around it and move on, in my case I'm not using an 'input' element, instead I use an image, when I tried setting the \"onclick\" attribute for this image I experienced the same problem, so I tried wrapping the image with an \"a\" element and making the reference point to the function like this.</p>\n\n<pre><code>var rowIndex = 1;\nvar linkDeleter = document.createElement('a');\nlinkDeleter.setAttribute('href', \"javascript:function(\" + rowIndex + \");\");\n\nvar imgDeleter = document.createElement('img');\nimgDeleter.setAttribute('alt', \"Delete\");\nimgDeleter.setAttribute('src', \"Imagenes/DeleteHS.png\");\nimgDeleter.setAttribute('border', \"0\");\n\nlinkDeleter.appendChild(imgDeleter);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Or you could use jQuery and avoid all those issues:</p>\n\n<pre><code>var execBtn = $(\"&lt;input&gt;\", {\n       type: \"button\",\n       id: \"execBtn\",\n       value: \"Execute\"\n    })\n    .click(runCommand);        \n</code></pre>\n\n<p>jQuery will take care of all the cross-browser issues as well.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In some cases the examples listed here didn't work out for me in Internet Explorer.</p>\n\n<p>Since you have to set the property with a method like this (without brackets)</p>\n\n<pre><code>HtmlElement.onclick = myMethod;\n</code></pre>\n\n<p>it won't work if you have to pass an object-name or even parameters. For the Internet Explorer you should create a new object in runtime:</p>\n\n<pre><code>HtmlElement.onclick = new Function('myMethod(' + someParameter + ')');\n</code></pre>\n\n<p>Works also on other browsers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is an amazing function for cross-browser compatible event binding.</p>\n\n<p>Got it from <a href=\"http://js.isite.net.au/snippets/addevent\" rel=\"nofollow\">http://js.isite.net.au/snippets/addevent</a></p>\n\n<p>With it you can just do <code>Events.addEvent(element, event, function);</code> and be worry free!</p>\n\n<p>For example: (<a href=\"http://jsfiddle.net/Zxeka/\" rel=\"nofollow\">http://jsfiddle.net/Zxeka/</a>)</p>\n\n<pre><code>function hello() {\n    alert('Hello');\n}\n\nvar button = document.createElement('input');\nbutton.value = \"Hello\";\nbutton.type = \"button\";\n\nEvents.addEvent(input_0, \"click\", hello);\n\ndocument.body.appendChild(button);\n</code></pre>\n\n<p>Here's the function:</p>\n\n<pre><code>// We create a function which is called immediately,\n// returning the actual function object.  This allows us to\n// work in a separate scope and only return the functions\n// we require.\nvar Events = (function() {\n\n  // For DOM2-compliant browsers.\n  function addEventW3C(el, ev, f) {\n    // Since IE only supports bubbling, for\n    // compatibility we can't use capturing here.\n    return el.addEventListener(ev, f, false);\n  }\n\n  function removeEventW3C(el, ev, f) {\n    el.removeEventListener(ev, f, false);\n  }\n\n  // The function as required by IE.\n  function addEventIE(el, ev, f) {\n    // This is to work around a bug in IE whereby the\n    // current element doesn't get passed as context.\n    // We pass it via closure instead and set it as the\n    // context using call().\n    // This needs to be stored for removeEvent().\n    // We also store the original wrapped function as a\n    // property, _w.\n    ((el._evts = el._evts || [])[el._evts.length]\n        = function(e) { return f.call(el, e); })._w = f;\n\n    // We prepend \"on\" to the event name.\n    return el.attachEvent(\"on\" + ev,\n        el._evts[el._evts.length - 1]);\n  }\n\n  function removeEventIE(el, ev, f) {\n    for (var evts = el._evts || [], i = evts.length; i--; )\n      if (evts[i]._w === f)\n        el.detachEvent(\"on\" + ev, evts.splice(i, 1)[0]);\n  }\n\n  // A handler to call all events we've registered\n  // on an element for legacy browsers.\n  function addEventLegacyHandler(e) {\n    var evts = this._evts[e.type];\n    for (var i = 0; i &lt; evts.length; ++i)\n      if (!evts[i].call(this, e || event))\n        return false;\n  }\n\n  // For older browsers.  We basically reimplement\n  // attachEvent().\n  function addEventLegacy(el, ev, f) {\n    if (!el._evts)\n      el._evts = {};\n\n    if (!el._evts[ev])\n      el._evts[ev] = [];\n\n    el._evts[ev].push(f);\n\n    return true;\n  }\n\n  function removeEventLegacy(el, ev, f) {\n    // Loop through the handlers for this event type\n    // and remove them if they match f.\n    for (var evts = el._evts[ev] || [], i = evts.length; i--; )\n      if (evts[i] === f)\n        evts.splice(i, 1);\n  }\n\n  // Select the appropriate functions based on what's\n  // available on the window object and return them.\n  return window.addEventListener\n      ? {addEvent: addEventW3C, removeEvent: removeEventW3C}\n      : window.attachEvent\n          ? {addEvent: addEventIE, removeEvent: removeEventIE}\n          : {addEvent: addEventLegacy, removeEvent: removeEventLegacy};\n})();\n</code></pre>\n\n<p>If you don't want to use such a big function, this should work for almost all browsers, including IE:</p>\n\n<pre><code>if (el.addEventListener) { \n    el.addEventListener('click', function, false); \n} else if (el.attachEvent) { \n    el.attachEvent('onclick', function); \n} \n</code></pre>\n\n<p>In response to Craig's question. You're going to have to make a new element and copy over the attributes of the old element. This function should do the job: (<a href=\"http://www.universalwebservices.net/web-programming-resources/javascript/change-input-element-type-using-javascript\" rel=\"nofollow\">source</a>)</p>\n\n<pre><code>function changeInputType(oldObject, oType) {\n  var newObject = document.createElement('input');\n  newObject.type = oType;\n  if(oldObject.size) newObject.size = oldObject.size;\n  if(oldObject.value) newObject.value = oldObject.value;\n  if(oldObject.name) newObject.name = oldObject.name;\n  if(oldObject.id) newObject.id = oldObject.id;\n  if(oldObject.className) newObject.className = oldObject.className;\n  oldObject.parentNode.replaceChild(newObject,oldObject);\n  return newObject;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>works great!</p>\n\n<p>using both ways seem to be unnecessary now: </p>\n\n<pre><code>execBtn.onclick = function() { runCommand() };\n</code></pre>\n\n<p>apparently works in every current browser.</p>\n\n<p>tested in current Firefox, IE, Safari, Opera, Chrome on Windows; Firefox\nand Epiphany on Ubuntu; not tested on Mac or mobile systems.</p>\n\n<ul>\n<li>Craig: I'd try \"document.getElementById(ID).type='password';</li>\n<li>Has anyone checked the \"AddEventListener\" approach with different engines?</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>function CheckBrowser(){\n    if(navigator.userAgent.match(/Android/i)!=null||\n        navigator.userAgent.match(/BlackBerry/i)!=null||\n        navigator.userAgent.match(/iPhone|iPad|iPod/i)!=null||\n        navigator.userAgent.match(/Nokia/i)!=null||\n        navigator.userAgent.match(/Opera M/i)!=null||\n        navigator.userAgent.match(/Chrome/i)!=null)\n        {\n            return 'OTHER';\n    }else{\n            return 'IE';\n    }\n}\n\n\nfunction AddButt(i){\n    var new_butt = document.createElement('input');\n    new_butt.setAttribute('type','button');\n    new_butt.setAttribute('value','Delete Item');\n    new_butt.setAttribute('id', 'answer_del_'+i);\n    if(CheckBrowser()=='IE'){\n        new_butt.setAttribute(\"onclick\", function() { DelElemAnswer(i) });\n    }else{\n        new_butt.setAttribute('onclick','javascript:DelElemAnswer('+i+');');\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try this\nexecBtn.onclick =function() { eval('runCommand()') };</p>\n\n<p>For me it works.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Actually, as far as I know, dynamically created inline event-handlers DO work perfectly within Internet Explorer 8 when created with the <code>x.setAttribute()</code> command; you just have to position them properly within your JavaScript code. I stumbled across the solution to your problem (and mine) <a href=\"http://javascriptjedi.com/HTMLElement/setAttributeExperiment.html\" rel=\"nofollow\">here</a>. </p>\n\n<p>When I moved all of my statements containing <code>x.appendChild()</code> to their correct positions (i.e., immediately following the last setAttribute command within their groups), I found that EVERY single setAttribute worked in IE8 as it was supposed to, including all form input attributes (including \"name\" and \"type\" attributes, as well as my \"onclick\" event-handlers). </p>\n\n<p>I found this quite remarkable, since all I got in IE before I did this was garbage rendered across the screen, and one error after another. In addition, I found that every setAttribute still worked within the other browsers as well, so if you just remember this simple coding-practice, you'll be good to go in most cases. </p>\n\n<p>However, this solution won't work if you have to change any attributes on the fly, since they cannot be changed in IE once their HTML element has been appended to the DOM; in this case, I would imagine that one would have to delete the element from the DOM, and then recreate it and its attributes (in the correct order, of course!) for them to work properly, and not throw any errors. </p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Ran into this problem today, posting in case someone else has the same issue.</p>\n\n<pre><code>var execBtn = document.createElement('input');\nexecBtn.setAttribute(\"type\", \"button\");\nexecBtn.setAttribute(\"id\", \"execBtn\");\nexecBtn.setAttribute(\"value\", \"Execute\");\nexecBtn.setAttribute(\"onclick\", \"runCommand();\");\n</code></pre>\n\n<p>Turns out to get IE to run an onclick on a dynamically generated element, we can't use setAttribute. Instead, we need to set the onclick property on the object with an anonymous function wrapping the code we want to run.</p>\n\n<pre><code>execBtn.onclick = function() { runCommand() };\n</code></pre>\n\n<p><strong>BAD IDEAS:</strong></p>\n\n<p>You can do </p>\n\n<pre><code>execBtn.setAttribute(\"onclick\", function() { runCommand() });\n</code></pre>\n\n<p>but it will break in IE in non-standards mode according to @scunliffe.</p>\n\n<p>You can't do this at all </p>\n\n<pre><code>execBtn.setAttribute(\"onclick\", runCommand() );\n</code></pre>\n\n<p>because it executes immediately, and sets the result of runCommand() to be the onClick attribute value, nor can you do</p>\n\n<pre><code>execBtn.setAttribute(\"onclick\", runCommand);\n</code></pre>\n",
            "last_activity_date": 1401548148,
            "question_id": 95731,
            "score": 31,
            "tags": [
                "javascript",
                "internet-explorer"
            ],
            "title": "Why does an onclick property set with setAttribute fail to work in IE?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p><code>window.onload = function(){};</code> works, but as you might have noticed, <strong>it allows you to specify only 1 listener</strong>.</p>\n\n<p>I'd say the better/newer way of doing this would be to use a framework, or to just to use a simple implementation of the native <code>addEventListener</code> and <code>attachEvent</code> (for IE) methods, which allows you to <em>remove</em> the listeners for the events as well.</p>\n\n<p>Here's a cross-browser implementation:</p>\n\n<pre><code>// Cross-browser implementation of element.addEventListener()\nfunction listen(evnt, elem, func) {\n    if (elem.addEventListener)  // W3C DOM\n        elem.addEventListener(evnt,func,false);\n    else if (elem.attachEvent) { // IE DOM\n         var r = elem.attachEvent(\"on\"+evnt, func);\n         return r;\n    }\n    else window.alert('I\\'m sorry Dave, I\\'m afraid I can\\'t do that.');\n}\n\n// Use: listen(\"event name\", elem, func);\n</code></pre>\n\n<p>For the window.onload case use: <code>listen(\"load\", window, function() { });</code></p>\n\n<hr/>\n\n<p><strong>EDIT</strong> I'd like to expand my answer by adding precious information that was pointed by others.</p>\n\n<p>This is about the <strong><code>DOMContentLoaded</code></strong> (Mozilla, Opera and webkit nightlies currently support this) and the <strong><code>onreadystatechange</code></strong> (for IE) <em>events</em> which can be applied to the <strong>document</strong> object to understand when the document is available to be manipulated (without waiting for all the images/stylesheets etc.. to be loaded).</p>\n\n<p>There are a lot of \"hacky\" implementations for cross-browsers support of this, so I strongly suggest to use a framework for this feature.</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>Modern javascript frameworks have introduced the idea of a \"document ready\" event.  This is an event that will fire when the document is ready to have DOM manipulations performed on it. The \"onload\" event fires only after EVERYTHING on the page has loaded.</p>\n\n<p>Along with the \"document ready\" event, the frameworks have provided a way to queue up multiple bits of Javascript code and functions to run when the event fires.  </p>\n\n<p>So, if you're opposed to frameworks, the best way to go about this is to implement your own document.onload queue.</p>\n\n<p>If you're not opposed to frameworks, then you'll want to look into <a href=\"http://www.learningjquery.com/2006/09/introducing-document-ready\" rel=\"nofollow\">jQuery and document.ready</a>, <a href=\"http://www.prototypejs.org/api/document/observe\" rel=\"nofollow\">Prototype and dom:loaded</a>, <a href=\"http://www.oreillynet.com/onlamp/blog/2008/02/dojo_goodness_part_1_1.html\" rel=\"nofollow\">Dojo and addOnLoad</a> or Google for [your framework] and \"document ready\",.</p>\n\n<p>If you haven't picked a framework but are interested, jQuery is a good place to start.  It doesn't change any of Javascript's core functionality, and will generally stay out of your way and let you do things as you like when you want to.  </p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Personally, I prefer <a href=\"http://onwebdevelopment.blogspot.com/2008/07/chaining-functions-in-javascript.html\" rel=\"nofollow\">this method</a>.  Not only does it allow you to have multiple <code>onload</code> functions, but if some script had defined it <strong>before</strong> you got to it, this method is nice enough to handle that...  The only problem left is if a page loads several script which does not use the <code>window.addLoad()</code> function; but that is their problem :).</p>\n\n<p>P.S.  Its also great if you want to \"chain\" more functions later on.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Joomla ships with MooTools, so you'll find it easiest to use the MooTools library for your additional code. MooTools ships with a custom event called domready that fires when the page is loaded and the document tree is parsed.</p>\n\n<pre><code>window.addEvent( domready, function() { code to execute on load here } );\n</code></pre>\n\n<p>More information about MooTools can be found <a href=\"http://mootools.net/docs/core\" rel=\"nofollow\" title=\"MooTools Documentation\">here</a>. Joomla 1.5 currently ships with MT1.1 while the Joomla 1.6 alpha will include MT1.2</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The window.onload events are overridden on multiple creations. To append functions use the \nwindow.addEventListener(W3C standard) or the window.attachEvent(for IE). Use the following code which worked.    </p>\n\n<pre><code>if (window.addEventListener) // W3C standard\n{\n  window.addEventListener('load', myFunction, false); // NB **not** 'onload'\n} \nelse if (window.attachEvent) // Microsoft\n{\n  window.attachEvent('onload', myFunction);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is the dirty but shorter way :P</p>\n\n<pre><code>function load(){\n   *code*\n}\n\nwindow[ addEventListener ? 'addEventListener' : 'attachEvent' ]\n( addEventListener ? 'load' : 'onload', function(){} )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I develop Joomla websites/components/modules and plugins and every so often I require the ability to use JavaScript that triggers an event when the page is loaded.  Most of the time this is done using the <code>window.onload</code> function.</p>\n\n<p><strong>My question is:</strong> </p>\n\n<ol>\n<li>Is this the best way to trigger JavaScript events on the page loading or is there a better/newer way?</li>\n<li>If this is the only way to trigger an event on the page loading, what is the best way to make sure that multiple events can be run by different scripts?</li>\n</ol>\n",
            "last_activity_date": 1398357691,
            "question_id": 559150,
            "score": 27,
            "tags": [
                "javascript",
                "joomla",
                "joomla1.5",
                "onload"
            ],
            "title": "Best practice for using window.onload"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Content scripts do <strong>not</strong> run in the scope of the page (<a href=\"http://stackoverflow.com/a/9916089/938089?chrome-extension-auto-run-a-function\">see also</a>), they run in a context between your extension and the web page.</p>\n\n<p>Since the trackers are of the type \"Injected script\", these fully run in the context of the web page. But the <code>_gaq</code> and <code>Hasync</code> variables don't. As a result, the track scripts cannot read the configuration variables.</p>\n\n<p>There are two (three) ways to fix it.</p>\n\n<ol>\n<li>Inject your code (as posted in the question) using <a href=\"http://stackoverflow.com/a/9517879/938089?building-a-chrome-extension-inject-code-in-a-page-using-a-content-script\">this method</a>. Using this method for your purpose is <strong>discouraged</strong>, because your script overwrites a commonly used global variable. Implementing your script using this method will <strong>break</strong> the tracking on many websites - <strong>do not use it</strong>.</li>\n<li>Fully run the code within the scope of a content script:<br>\nTwo options:\n<ol>\n<li>Include the external files in the extension</li>\n<li>Include the external files in the extension, plus implement an auto-update feature.</li>\n</ol></li>\n</ol>\n\n<h2>Method 1: Fully local copy</h2>\n\n<p><strong><code>manifest.json</code></strong> (only the relevant parts are shown):</p>\n\n<pre><code>{\n  \"name\": \"Website Safety\",\n  \"version\": \"1.0\",\n  \"manifest_version\": 2,\n  \"description\": \"The Website Safety Extension.\",\n  \"permissions\": [\n    \"tabs\", \"http://*/*\", \"https://*/*\"\n  ],\n  \"content_scripts\": [\n    {\n      \"matches\": [\"&lt;all_urls&gt;\"],\n      \"js\": [\"ga-config.js\", \"ga.js\", \"js15_as.js\"]\n    }\n  ]\n}\n</code></pre>\n\n<p>In <strong><code>ga-config.js</code></strong>, define the variables as follows:</p>\n\n<pre><code>var _gaq = _gaq || [];\n_gaq.push(['_setAccount', 'UA-31046309-1']);\n_gaq.push(['_setAllowLinker', true]);\n_gaq.push(['_trackPageview']);\n\nvar _Hasync= _Hasync|| [];\n_Hasync.push(['Histats.start', '1,1342541,4,0,0,0,00000000']);\n_Hasync.push(['Histats.fasi', '1']);\n_Hasync.push(['Histats.track_hits', '']);\n</code></pre>\n\n<p>Download <a href=\"https://ssl.google-analytics.com/ga.js\">https://ssl.google-analytics.com/ga.js</a>, and save it as <strong><code>ga.js</code></strong>.<br>\nDownload <a href=\"http://s10.histats.com/js15_as.js\">http://s10.histats.com/js15_as.js</a>, and save it as <strong><code>js15_as.js</code></strong>.</p>\n\n<h2>Method 2: Injecting a Up-to-date GA</h2>\n\n<p>If you want to have an up-to-date version of GA, a convoluted way of injecting the code has to be used, because Content scripts <strong>cannot be included from an external URL</strong>.</p>\n\n<p>An old version of this answer relied on the background page and <a href=\"https://developer.chrome.com/extensions/tabs.html#method-executeScript\"><code>chrome.tabs.executeScript</code></a> for this purpose, but since Chrome 20, a better method has become available: Use the <a href=\"https://developer.chrome.com/extensions/storage.html\"><code>chrome.storage</code></a> API to cache the JavaScript code.\nTo keep the code updated, I will store a \"last updated\" timestamp in the storage; you can also use the <a href=\"https://developer.chrome.com/extensions/alarms.html\"><code>chrome.alarms</code></a> API instead.</p>\n\n<p><strong>Note: Do not forget to include a local copy of the external file in your extension, in case the user does not have an internet connection, etc.</strong> <sup>Without an internet connection, Google Analytics wouldn't work anyway.</sup></p>\n\n<p>Content script, <strong><code>activate-ga.js</code></strong>.</p>\n\n<pre><code>var UPDATE_INTERVAL = 2 * 60 * 60 * 1000; // Update after 2 hour\n\n// Retrieve GA from storage\nchrome.storage.local.get({\n    lastUpdated: 0,\n    code: ''\n}, function(items) {\n    if (Date.now() - items.lastUpdated &gt; UPDATE_INTERVAL) {\n        // Get updated file, and if found, save it.\n        get('https://ssl.google-analytics.com/ga.js', function(code) {\n            if (!code) return;\n            chrome.storage.local.set({lastUpdated: Date.now(), code: code});\n        });\n    }\n    if (items.code) // Cached GA is available, use it\n        execute(items.code);\n    else // No cached version yet. Load from extension\n        get(chrome.extension.getURL('ga.js'), execute);\n});\n\n// Typically run within a few milliseconds\nfunction execute(code) {\n    try { window.eval(code); } catch (e) { console.error(e); }\n    // Run the rest of your code.\n    // If your extension depends on GA, initialize it from here.\n    // ...\n}\n\nfunction get(url, callback) {\n    var x = new XMLHttpRequest();\n    x.onload = x.onerror = function() { callback(x.responseText); };\n    x.open('GET', url);\n    x.send();\n}\n</code></pre>\n\n<p>Minimum manifest file:</p>\n\n<pre><code>{\n  \"name\": \"Website Safety\",\n  \"version\": \"1.0\",\n  \"manifest_version\": 2,\n  \"permissions\": [\n    \"tabs\", \"http://*/*\", \"https://*/*\"\n  ],\n  \"content_scripts\": [\n    {\n      \"matches\": [\"&lt;all_urls&gt;\"],\n      \"js\": [\"activate-ga.js\"]\n    }\n  ],\n  \"web_accessible_resources\": [\"ga.js\"]\n}\n</code></pre>\n\n<p>The same method can be used for other trackers. The minimum permission requirements:</p>\n\n<ul>\n<li><strong><code>https://ssl.google-analytics.com/ga.js</code></strong>, so that  should be added at the permissions section. <code>https://*/*</code> or <code>&lt;all_urls&gt;</code> is also sufficient.</li>\n<li><em>optional</em>: <strong><code>unlimitedStorage</code></strong> - If you want to store a large piece of data with <code>chrome.storage</code>.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>I read through this thread: <a href=\"https://groups.google.com/a/chromium.org/forum/#!topic/chromium-extensions/yc-ouDqfMw0\" rel=\"nofollow\">https://groups.google.com/a/chromium.org/forum/#!topic/chromium-extensions/yc-ouDqfMw0</a> and found that there's an official chrome method for adding the analytics script to the page, and it's not in the official docs. </p>\n\n<p>you can refer to this extension for reference: <a href=\"https://github.com/GoogleChrome/chrome-app-samples/tree/master/analytics\" rel=\"nofollow\">https://github.com/GoogleChrome/chrome-app-samples/tree/master/analytics</a> and it uses this lib: <a href=\"https://github.com/GoogleChrome/chrome-platform-analytics\" rel=\"nofollow\">https://github.com/GoogleChrome/chrome-platform-analytics</a></p>\n\n<p>basically you manually include the script locally: </p>\n\n<pre><code>  &lt;script src=\"your_path/google-analytics-bundle.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>then you call some library functions:</p>\n\n<pre><code>var service, tracker, out;\n\nfunction initAnalyticsConfig(config) {\n  document.getElementById('settings-loading').hidden = true;\n  document.getElementById('settings-loaded').hidden = false;\n\n  var checkbox = document.getElementById('analytics');\n  checkbox.checked = config.isTrackingPermitted();\n  checkbox.onchange = function() {\n    config.setTrackingPermitted(checkbox.checked);\n  };\n}\n</code></pre>\n\n<p>note: apparently, you <em>have</em> to have an opt out function <a href=\"https://github.com/GoogleChrome/chrome-platform-analytics/wiki#add-privacy-support-aka-opt-out\" rel=\"nofollow\">https://github.com/GoogleChrome/chrome-platform-analytics/wiki#add-privacy-support-aka-opt-out</a></p>\n\n<pre><code>function startApp() {\n  // Initialize the Analytics service object with the name of your app.\n  service = analytics.getService('ice_cream_app');\n  service.getConfig().addCallback(initAnalyticsConfig);\n\n  // Get a Tracker using your Google Analytics app Tracking ID.\n  tracker = service.getTracker('UA-XXXXX-X');\n\n  // Record an \"appView\" each time the user launches your app or goes to a new\n  // screen within the app.\n  tracker.sendAppView('MainView');\n}\n\nwindow.onload = startApp;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am adding some external JavaScript to the end of the page via my chrome extension. The external JavaScript then tries to post some data back to the server, however that is not taking place.</p>\n\n<p>The JavaScript wants to get the url of the current page and the referrer and post it back to the server.</p>\n\n<p>Can anyone please advice me what is wrong here and how can I if not possible this way can I post data from the current page back to the server.</p>\n\n<p>manifest.json</p>\n\n<pre><code>{\n  \"name\": \"Website Safety\",\n  \"version\": \"1.0\",\n  \"manifest_version\": 2,\n  \"description\": \"The Website Safety Extension.\",\n  \"browser_action\": {\n    \"name\": \"View the website information for \",\n    \"default_icon\": \"icon.png\",\n    \"default_popup\": \"popup.html\"\n  },\n  \"permissions\": [\n    \"tabs\", \"http://*/*\", \"https://*/*\"\n  ],\n  \"background\": {\n  //  \"scripts\": [\"refresh.js\"]\n    \"page\": \"background.html\"\n  },\n  \"content_security_policy\": \"script-src 'self' https://ssl.google-analytics.com; object-src 'self'\",\n  //\"background_page\": \"background.html\"\n\n  \"content_scripts\": [\n    {\n      \"matches\": [\"&lt;all_urls&gt;\"],\n      \"js\": [\"contentScript.js\"]\n    }\n  ]\n}\n</code></pre>\n\n<p>for now contentScript.js</p>\n\n<pre><code>var _gaq = _gaq || [];\n_gaq.push(['_setAccount', 'UA-31046309-1']);\n_gaq.push(['_setAllowLinker', true]);\n_gaq.push(['_trackPageview']);\n(function() {\nvar ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\nga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n//ga.src = 'https://ssl.google-analytics.com/ga.js';\nvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n})();\n\nvar _Hasync= _Hasync|| [];\n_Hasync.push(['Histats.start', '1,1342541,4,0,0,0,00000000']);\n_Hasync.push(['Histats.fasi', '1']);\n_Hasync.push(['Histats.track_hits', '']);\n(function() {\nvar hs = document.createElement('script'); hs.type = 'text/javascript'; hs.async = true;\nhs.src = ('http://s10.histats.com/js15_as.js');\n(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(hs);\n})();\n</code></pre>\n",
            "last_activity_date": 1400388393,
            "question_id": 10285886,
            "score": 14,
            "tags": [
                "javascript",
                "dom",
                "google-chrome-extension",
                "google-analytics",
                "content-script"
            ],
            "title": "Chrome extension adding external javascript to current page&#39;s html"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Use <a href=\"http://www.w3schools.com/jsref/jsref%5Fonunload.asp\" rel=\"nofollow\">onunload</a>. </p>\n\n<p>For jQuery, I think this works like so:</p>\n\n<pre><code>$(window).unload(function() { \n  alert(\"Unloading\"); \n  return falseIfYouWantToButBeCareful();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In Ayman's example by returning false you prevent the browser window/tab from closing.</p>\n\n<pre><code>window.onunload = function () {\n  alert('You are trying to leave.');\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Using <code>onunload</code> only allows you to display messages, but it will not interrupt the navigation (because it is too late). However, you can use <code>onbeforeunload</code> and it will interrupt navigation:</p>\n\n<pre><code>window.onbeforeunload = function() {\n  return \"Are you sure you want to navigate away?\";\n}\n</code></pre>\n\n<p><strong>Edit</strong>: Removed <code>confirm()</code> in return statement as this caused a confirm window as expected, but also showed a second confirm with the result of the first confirm.</p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p>That suggested error message may duplicate the error message the browser already displays. In chrome, the 2 similar error messages are displayed one after another in the same window.</p>\n\n<p>In chrome, the text displayed after the custom message is: \"Are you sure you want to leave this page?\". In firefox, it does not display our custom error message at all (but still displays the dialog).</p>\n\n<p>A more appropriate error message might be:</p>\n\n<pre><code>window.onbeforeunload = function() {\n    return \"If you leave this page, you will lose any unsaved changes.\";\n}\n</code></pre>\n\n<p>Or stackoverflow style: \"You have started writing or editing a post.\"</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Unlike other methods presented here, this bit of code will <em>not</em> cause the browser to display a warning asking the user if he wants to leave; instead, it exploits the evented nature of the DOM to redirect back to the current page (and thus cancel navigation) before the browser has a chance to unload it from memory.</p>\n\n<p>Since it works by short-circuiting navigation directly, it cannot be used to prevent the page from being closed; however, it can be used to disable frame-bursting.</p>\n\n<pre><code>(function () {\n    var location = window.document.location;\n\n    var preventNavigation = function () {\n        var originalHashValue = location.hash;\n\n        window.setTimeout(function () {\n            location.hash = 'preventNavigation' + ~~ (9999 * Math.random());\n            location.hash = originalHashValue;\n        }, 0);\n    };\n\n    window.addEventListener('beforeunload', preventNavigation, false);\n    window.addEventListener('unload', preventNavigation, false);\n})();\n</code></pre>\n\n<p><strong>Disclaimer:</strong> You should never do this. If a page has frame-bursting code on it, please respect the wishes of the author.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I ended up with this slightly different version:</p>\n\n<pre><code>var dirty = false;\nwindow.onbeforeunload = function() {\n    return dirty ? \"If you leave this page you will lose your unsaved changes.\" : null;\n}\n</code></pre>\n\n<p>Elsewhere I set the dirty flag to true when the form gets dirtied (or I otherwise want to prevent navigating away).  This allows me to easily control whether or not the user gets the Confirm Navigation prompt.</p>\n\n<p>With the text in the selected answer you see redundant prompts:</p>\n\n<p><img src=\"http://i.stack.imgur.com/vQRUN.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do you prevent javascript page from navigating away?</p>\n",
            "last_activity_date": 1421923225,
            "question_id": 821011,
            "score": 34,
            "tags": [
                "javascript"
            ],
            "title": "How do you prevent javascript page from navigating away?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Wire in an \"onunload\" event that does nothing:</p>\n\n<pre><code>&lt;html&gt;&lt;body&gt;\n&lt;script type=\"text/javascript\"&gt;\n  window.onload = function() { alert('window.onload alert'); };\n  window.onunload = function(){}; \n  alert('inline alert');\n&lt;/script&gt;\n&lt;a href=\"1.html\"&gt;Click Me!&lt;/a&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Set an empty function to be called on window.onunload:</strong></p>\n\n<pre><code>window.onunload = function(){}; \n</code></pre>\n\n<p>e.g.</p>\n\n<pre><code>&lt;html&gt;&lt;body&gt;\n&lt;script type=\"text/javascript\"&gt;\n  window.onload = function() { alert('window.onload alert'); };\n  window.onunload = function(){};\n  alert('inline alert');\n&lt;/script&gt;\n&lt;a href=\"1.html\"&gt;Click Me!&lt;/a&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p><strong>Source:</strong> \n<a href=\"http://www.firefoxanswer.com/firefox/672-firefoxanswer.html\">http://www.firefoxanswer.com/firefox/672-firefoxanswer.html</a> <a href=\"http://web.archive.org/web/20100428053932/http://www.firefoxanswer.com/firefox/672-firefoxanswer.html\">(Archived Version)</a></p>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<p>As far as i know Firefox does not fire <code>onLoad</code> event on back.  </p>\n\n<p>It should trigger onFocus instead based from this link <a href=\"http://www.blogya.in/javascript-onload-executed-when-back-button-is-pressed\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<blockquote>\n  <p>When I use the back button on Firefox to reach a previously visited page, scripts on that page won't run again.</p>\n</blockquote>\n\n<p>That's correct and that's a good thing.</p>\n\n<p>When you hit a link in Firefox (and Safari, and Opera), it does not immediately destroy your page to go onto the next one. It keeps the page intact, merely hiding it from view. Should you hit the back button, it will then bring the old page back into view, without having to load the document again; this is much faster, resulting in smoother back/forward page transitions for the user.</p>\n\n<p>This feature is called the <a href=\"https://developer.mozilla.org/En/Working_with_BFCache\">bfcache</a>.</p>\n\n<p>Any content you added to the page during the user's previous load and use of it will still be there. Any event handlers you attached to page elements will still be attached. Any timeouts/intervals you set will still be active. So there's rarely any reason you need to know that you have been hidden and re-shown. It would be wrong to call <code>onload</code> or inline script code again, because any binding and content generation you did in that function would be executing a second time over the same content, with potentially disastrous results. (eg. <code>document.write</code> in inline script would totally destroy the page.)</p>\n\n<p>The reason writing to <code>window.onunload</code> has an effect is that the browsers that implement bfcache have decided that\u2009\u2014\u2009for compatibility with pages that really do need to know when they're being discarded\u2009\u2014\u2009any page that declares an interest in knowing when <code>onunload</code> occurs will cause the bfcache to be disabled. That page will be loaded fresh when you go back to it, instead of fetched from the bfcache.</p>\n\n<p>So if you set <code>window.onunload= function() {};</code>, what you're actually doing is deliberately breaking the bfcache. This will result in your pages being slow to navigate, and should not be used except as a last resort.</p>\n\n<p>If you do need to know when the user leaves or comes back to your page, without messing up the bfcache, you can trap the <code>onpageshow</code> and <code>onpagehide</code> events instead:</p>\n\n<pre><code>window.onload=window.onpageshow= function() {\n    alert('Hello!');\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>You can check the <code>persisted</code> property of the <code>pageshow</code> event. It is set to false on initial page load. When page is loaded from cache it is set to true.</p>\n\n<pre><code>window.onpageshow = function(event) {\n    if (event.persisted) {\n        alert(\"From bfcache\");\n    }\n};\n</code></pre>\n\n<p>For some reason jQuery does not have this property in the event. You can find it from original event though.</p>\n\n<pre><code>$(window).bind(\"pageshow\", function(event) {\n    if (event.originalEvent.persisted) {\n        alert(\"From bfcache\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>When I use the back button on Firefox to reach a previously visited page, <strong>scripts on that page won't run again</strong>.</p>\n\n<p>Is there <strong>any fix/workaround</strong> to have the scripts execute again when viewing the page the second time?</p>\n\n<p>Please note that I have tested the same pages on Google Chrome and Internet Explorer and they work as intended.</p>\n\n<hr>\n\n<p>Here are the files and the steps I used to test the problem:</p>\n\n<p><em>(navigate to 0.html, click to get to 1.html, back button)</em></p>\n\n<p><strong>0.html</strong></p>\n\n<pre><code>&lt;html&gt;&lt;body&gt;\n&lt;script type=\"text/javascript\"&gt;\n  window.onload = function() { alert('window.onload alert'); };\n  alert('inline alert');\n&lt;/script&gt;\n&lt;a href=\"1.html\"&gt;Click Me!&lt;/a&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p><strong>1.html</strong></p>\n\n<pre><code>&lt;html&gt;&lt;body&gt;\n&lt;p&gt;Go BACK!&lt;/p&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1399302508,
            "question_id": 2638292,
            "score": 29,
            "tags": [
                "javascript",
                "firefox"
            ],
            "title": "After travelling back in Firefox history, javascript won&#39;t run"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>That's not a rounding ploblem, that is a display problem. A number doesn't contain information about significant digits; the value 2 is the same as 2.0000000000000. It's when you turn the rounded value into a string that you have make it display a certain number of digits.</p>\n\n<p>You could just add zeroes after the number, something like:</p>\n\n<pre><code>var s = number.toString();\nif (s.indexOf('.') == -1) s += '.';\nwhile (s.length &lt; s.indexOf('.') + 4) s += '0';\n</code></pre>\n\n<p>(Note that this assumes that the regional settings of the client uses period as decimal separator, the code needs some more work to function for other settings.)</p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>Here's a link to a Javascript sprintf, </p>\n\n<p><a href=\"http://www.webtoolkit.info/javascript-sprintf.html\" rel=\"nofollow\">http://www.webtoolkit.info/javascript-sprintf.html</a></p>\n\n<p>A call to sprintf() is one rounding methodology in perl, but\njavascript doesn't have that function natively. </p>\n\n<p><a href=\"http://perldoc.perl.org/functions/sprintf.html\" rel=\"nofollow\">http://perldoc.perl.org/functions/sprintf.html</a></p>\n\n<p>Does that help?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Hopefully working code (didn't do much testing):</p>\n\n<pre><code>function toFixed(value, precision) {\n    var precision = precision || 0,\n        neg = value &lt; 0,\n        power = Math.pow(10, precision),\n        value = Math.round(value * power),\n        integral = String((neg ? Math.ceil : Math.floor)(value / power)),\n        fraction = String((neg ? -value : value) % power),\n        padding = new Array(Math.max(precision - fraction.length, 0) + 1).join('0');\n\n    return precision ? integral + '.' +  padding + fraction : integral;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found a way. This is Christoph's code with a fix:</p>\n\n<pre><code>function toFixed(value, precision) {\n    var precision = precision || 0,\n        power = Math.pow(10, precision),\n        absValue = Math.abs(Math.round(value * power)),\n        result = (value &lt; 0 ? '-' : '') + String(Math.floor(absValue / power));\n\n    if (precision &gt; 0) {\n        var fraction = String(absValue % power),\n            padding = new Array(Math.max(precision - fraction.length, 0) + 1).join('0');\n        result += '.' + padding + fraction;\n    }\n    return result;\n}\n</code></pre>\n\n<p>Read the details of repeating a character using an array constructor <a href=\"http://stackoverflow.com/questions/1877475/repeat-character-n-times/1877479#1877479\">here</a> if you are curious as to why I added the \"+ 1\".</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>I think that there is a more simple approach to all given here, and is the method <code>Number.toFixed()</code> already implemented in JavaScript.</p>\n\n<p>simply write:</p>\n\n<pre><code>var myNumber = 2;\n\nmyNumber.toFixed(2); //returns 2.00\nmyNumber.toFixed(1); //returns 2.0\n</code></pre>\n\n<p>etc...</p>\n",
                    "is_accepted": false,
                    "score": 93
                },
                {
                    "body": "<p>There's always a better way for doing things.</p>\n\n<pre><code>var number = 51.93999999999761;\n</code></pre>\n\n<p>I would like to get four digits precision: 51.94</p>\n\n<p>just do:</p>\n\n<pre><code>number.toPrecision(4);\n</code></pre>\n\n<p>the result will be: 51.94</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you do not really care about rounding, just added a toFixed(x) and then removing trailing 0es and the dot if necessary. It is not a fast solution.</p>\n\n<pre><code>function format(value, decimals) {\n    if (value) {\n        var decimal = value.toFixed(decimals);\n        // Remove trailing 0es\n        while (decimal.lastIndexOf(\"0\") == decimal.length-1) {\n            decimal = decimal.substring(0, decimal.length-1);\n        }\n        // Remove trailing dot\n        if (decimal.lastIndexOf(\".\") == decimal.length-1) {\n            decimal = decimal.substring(0, decimal.length-1);\n        }\n        return decimal;\n    }\n    return value;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Would the below be a simpler approach?</p>\n\n<pre><code>function toPrecision(number,precision)\n{\n    var str = number.toString();\n    var pos = str.indexOf(\".\");\n    if(pos!=-1)\n    {\n        var tempArr = str.split(\".\");\n        if(tempArr[1].length&lt;precision)\n        {\n            tempArr[1] = parseInt(tempArr[1])*Math.pow(10,precision-parseInt(tempArr[1]))+\"\";\n        }\n        else\n        {\n            tempArr[1] = tempArr[1].slice(0,precision);\n        }\n        str = tempArr.join(\".\");\n\n    }\n    else\n    {\n\n        var tempSuffix = \"\";\n        while(precision)\n        {\n            tempSuffix+=\"0\";\n            precision--;      \n        }\n        str += \".\"+tempSuffix;\n    }       \n    return parseFloat(str);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>in JavaScript, the typical way to round a number to N decimal places is something like:</p>\n\n<pre><code>function round_number(num, dec) {\n    return Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);\n}\n</code></pre>\n\n<p>However this approach will round to a <em>maximum</em> of N decimal places while I want to <em>always</em> round to N decimal places. For example \"2.0\" would be rounded to \"2\". </p>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1413824713,
            "question_id": 2221167,
            "score": 43,
            "tags": [
                "javascript",
                "math",
                "rounding",
                "decimal-point"
            ],
            "title": "Javascript: formatting a rounded number to N decimals"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>use a cookie getting script:</p>\n\n<pre><code>function readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i &lt; ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\n</code></pre>\n\n<p>then call it:</p>\n\n<pre><code>var value = readCookie('obligations');\n</code></pre>\n\n<p>i stole the code above from quirksmode cookies page. <a href=\"http://www.quirksmode.org/js/cookies.html\">you should read it</a>.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Try making it an array </p>\n\n<blockquote>\n  <p><a href=\"http://stackoverflow.com/questions/2980143/i-want-to-store-javascript-array-as-a-cookie\">I want to store Javascript array as a Cookie</a></p>\n  \n  <p><a href=\"http://stackoverflow.com/questions/3408463/how-to-store-an-array-in-a-javascript-cookie\">How to store an array in a javascript cookie?</a></p>\n</blockquote>\n\n<p>Both use Jquery but with some googleing I'm sure you can find a plan old JS version some where</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It seems to me you could split the cookie key-value pairs into an array and base your search on that:</p>\n\n<pre><code>var obligations = getCookieData(\"obligations\");\n</code></pre>\n\n<p>Which runs the following:</p>\n\n<pre><code>function getCookieData( name ) {\n    var pairs = document.cookie.split(\"; \"),\n        count = pairs.length, parts; \n    while ( count-- ) {\n        parts = pairs[count].split(\"=\");\n        if ( parts[0] === name )\n            return parts[1];\n    }\n    return false;\n}\n</code></pre>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/qFmPc/\" rel=\"nofollow\">http://jsfiddle.net/qFmPc/</a></p>\n\n<p>Or possibly even the following:</p>\n\n<pre><code>function getCookieData( name ) {\n    var patrn = new RegExp( \"^\" + name + \"=(.*?);\" ),\n        patr2 = new RegExp( \" \" + name + \"=(.*?);\" );\n    if ( match = (document.cookie.match(patrn) || document.cookie.match(patr2)) )\n        return match[1];\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>One approach, which avoids iterating over an array, would be: </p>\n\n<pre><code>function getCookie(name) {\n  var value = \"; \" + document.cookie;\n  var parts = value.split(\"; \" + name + \"=\");\n  if (parts.length == 2) return parts.pop().split(\";\").shift();\n}\n</code></pre>\n\n<p><strong>Walkthrough</strong></p>\n\n<p>Splitting a string by token will produce either, an array with one string (same value), in case token does not exist in a string, or an array with two strings , in case token is found in a string . </p>\n\n<p>The first (left) element is string of what was before the token, and the second one (right) is what is string of what was after the token.</p>\n\n<p>(NOTE: in case string starts with a token, first element is an empty string)</p>\n\n<p>Considering that cookies are stored as follows:</p>\n\n<pre><code>\"{name}={value}; {name}={value}; ...\"\n</code></pre>\n\n<p>in order to retrieve specific cookie value, we just need to get string that is after \"; {name}=\" and before next \";\". Before we do any processing, we prepend the cookies string with \"; \", so that every cookie name, including the first one, is enclosed with \"; \" and \"=\":</p>\n\n<pre><code>\"; {name}={value}; {name}={value}; ...\"\n</code></pre>\n\n<p>Now, we can first split by \"; {name}=\", and if token is found in a cookie string (i.e. we have two elements), we will end up with second element being a string that begins with our cookie value. Then we pull that out from an array (i.e. pop), and repeat the same process, but now with \";\" as a token, but this time pulling out the left string (i.e. shift) to get the actual token value.</p>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>In my projects I use following function to access cookies by name</p>\n\n<pre><code>function getCookie(cookie) {\n    return document.cookie.split(';').reduce(function(prev, c) {\n        var arr = c.split('=');\n        return (arr[0].trim() === cookie) ? arr[1] : prev;\n    }, undefined);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I would prefer using a single regular expression match on the cookie:</p>\n\n<pre><code>window.getCookie = function(name) {\n  match = document.cookie.match(new RegExp(name + '=([^;]+)'));\n  if (match) return match[1];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I have modified the function that Jonathan provided here, by using regular expression you can get a cookie value by its name like this:</p>\n\n<pre><code>function getCookie(name){\n    var pattern = RegExp(name + \"=.[^;]*\")\n    matched = document.cookie.match(pattern)\n    if(matched){\n        var cookie = matched[0].split('=')\n        return cookie[1]\n    }\n    return false\n}\n</code></pre>\n\n<p>If it returns empty string it means that the cookie exists but has no value, if it returns false then the cookie doesn't exist. I hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you use jQuery I recommend you to use this plugin:</p>\n\n<p><a href=\"https://github.com/carhartl/jquery-cookie\">https://github.com/carhartl/jquery-cookie</a><br>\n<a href=\"https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js\">https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\"\n src=\"//cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.min.js\"&gt;\n</code></pre>\n\n<p>So you can read cookie like this:</p>\n\n<pre><code>var value = $.cookie(\"obligations\");\n</code></pre>\n\n<p>Also you can write cookie:</p>\n\n<pre><code>$.cookie('obligations', 'new_value');\n$.cookie('obligations', 'new_value', { expires: 14, path: '/' });\n</code></pre>\n\n<p>Delete cookie:</p>\n\n<pre><code>$.removeCookie('obligations');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>The methods in some of the other answers that use a regular expression do not cover all cases, particularly:</p>\n\n<ol>\n<li>When the cookie is the last cookie. In this case there will not be a semicolon after the cookie value.</li>\n<li>When another cookie name ends with the name being looked up. For example, you are looking for the cookie named \"one\", and there is a cookie named \"done\".</li>\n<li>When the cookie name includes characters that are not interpreted as themselves when used in a regular expression unless they are preceded by a backslash.</li>\n</ol>\n\n<p>The following method handles these cases:</p>\n\n<pre><code>function getCookie(name) {\n    function escape(s) { return s.replace(/([.*+?\\^${}()|\\[\\]\\/\\\\])/g, '\\\\$1'); };\n    var match = document.cookie.match(RegExp('(?:^|;\\\\s*)' + escape(name) + '=([^;]*)'));\n    return match ? match[1] : null;\n}\n</code></pre>\n\n<p>This will return <code>null</code> if the cookie is not found. It will return an empty string if the value of the cookie is empty.</p>\n\n<p>Notes:</p>\n\n<ol>\n<li>This function assumes <a href=\"http://stackoverflow.com/questions/11311893/is-the-name-of-a-cookie-case-sensitive\">cookie names are case sensitive</a>.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\" rel=\"nofollow\"><code>document.cookie</code></a> - When this appears on the right-hand side of an assignment, it represents a string containing a semicolon-separated list of cookies, which in turn are <code>name=value</code> pairs. There appears to be a single space after each semicolon.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\" rel=\"nofollow\"><code>String.prototype.match()</code></a> - Returns <code>null</code> when no match is found. Returns an array when a match is found, and the element at index <code>[1]</code> is the value of the first matching group.</li>\n</ol>\n\n<p>Regular Expression Notes:</p>\n\n<ol>\n<li><code>(?:xxxx)</code> - forms a non-matching group.</li>\n<li><code>^</code> - matches the start of the string.</li>\n<li><code>|</code> - separates alternative patterns for the group.</li>\n<li><code>;\\\\s*</code> - matches one semi-colon followed by zero or more whitespace characters.</li>\n<li><code>=</code> - matches one equal sign.</li>\n<li><code>(xxxx)</code> - forms a matching group.</li>\n<li><code>[^;]*</code> - matches zero or more characters other than a semi-colon. This means it will match characters up to, but not including, a semi-colon or to the end of the string.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know it is an old question but I came across this problem too. Just for the record, There is a little API in developers <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\" rel=\"nofollow\">mozilla web page</a>.</p>\n\n<p>Yoy can get any cookie by name using only JS. The code is also cleaner IMHO (except for the long line, that I'm sure you can easily fix).</p>\n\n<pre><code>function getCookie(sKey) {\n    if (!sKey) { return null; }\n    return decodeURIComponent(document.cookie.replace(new RegExp(\"(?:(?:^|.*;)\\\\s*\" + encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&amp;\") + \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\"), \"$1\")) || null;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a getter to get the value from a cookie. </p>\n\n<p>Now I have 2 cookies by the name <code>shares=</code> and by the name <code>obligations=</code> . </p>\n\n<p>I want to make this getter only to get the values from the obligations cookie. </p>\n\n<p>How do I do this? So the 'for' splits the data into separate values and puts it in an array.</p>\n\n<pre><code> function getCookie1() {\n// What do I have to add here to look only in the \"obligations=\" cookie? \n// Because now it searches all the cookies.\n\n    var elements = document.cookie.split('=');\n    var obligations= elements[1].split('%');\n    for (var i = 0; i &lt; obligations.length - 1; i++) {\n        var tmp = obligations[i].split('$');\n        addProduct1(tmp[0], tmp[1], tmp[2], tmp[3]);\n    }\n }\n</code></pre>\n",
            "last_activity_date": 1415590981,
            "question_id": 10730362,
            "score": 41,
            "tags": [
                "javascript",
                "cookies"
            ],
            "title": "Get cookie by name"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The smart way to rerun the script's code on AJAX requests, is to focus on the key bits of the page and check for changes.</p>\n\n<p>For example, suppose a page contained HTML like so:</p>\n\n<pre><code>&lt;div id=\"userBlather\"&gt;\n    &lt;div class=\"comment\"&gt; Comment 1... &lt;/div&gt; \n    &lt;div class=\"comment\"&gt; Comment 2... &lt;/div&gt; \n    ... \n&lt;/div&gt;\n</code></pre>\n\n<p>and you wanted the script to do something with each comment as it came in.</p>\n\n<p>Now you <em>could</em> intercept all AJAX calls, <strike>or listen for <code>DOMSubtreeModified</code></strike>(deprecated), or use <code>MutationObserver</code>s, but these methods can get tricky, finicky, and overly complicated. </p>\n\n<p>A simpler, more robust way to get ajax-ified content on a wild page is to poll for it using something like the <code>waitForKeyElements</code> function, below.</p>\n\n<p>For example, this script will highlight comments that contain \"beer\", as they AJAX-in:</p>\n\n<pre><code>// ==UserScript==\n// @name            _Refire on key Ajax changes\n// @include         http://YOUR_SITE.com/YOUR_PATH/*\n// @require         http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\n// ==/UserScript==\n\n\nfunction highlightGoodComments (jNode) {\n\n    //***** YOUR CODE HERE *****\n\n    if (/beer/i.test (jNode.text () ) ) {\n        jNode.css (\"background\", \"yellow\");\n    }\n    //...\n}\n\nwaitForKeyElements (\"#userBlather div.comment\", highlightGoodComments);\n\n/*--- waitForKeyElements():  A handy, utility function that\n    does what it says.\n*/\nfunction waitForKeyElements (\n    selectorTxt,    /* Required: The jQuery selector string that\n                        specifies the desired element(s).\n                    */\n    actionFunction, /* Required: The code to run when elements are\n                        found. It is passed a jNode to the matched\n                        element.\n                    */\n    bWaitOnce,      /* Optional: If false, will continue to scan for\n                        new elements even after the first match is\n                        found.\n                    */\n    iframeSelector  /* Optional: If set, identifies the iframe to\n                        search.\n                    */\n)\n{\n    var targetNodes, btargetsFound;\n\n    if (typeof iframeSelector == \"undefined\")\n        targetNodes     = $(selectorTxt);\n    else\n        targetNodes     = $(iframeSelector).contents ()\n                                           .find (selectorTxt);\n\n    if (targetNodes  &amp;&amp;  targetNodes.length &gt; 0) {\n        /*--- Found target node(s).  Go through each and act if they\n            are new.\n        */\n        targetNodes.each ( function () {\n            var jThis        = $(this);\n            var alreadyFound = jThis.data ('alreadyFound')  ||  false;\n\n            if (!alreadyFound) {\n                //--- Call the payload function.\n                actionFunction (jThis);\n                jThis.data ('alreadyFound', true);\n            }\n        } );\n        btargetsFound   = true;\n    }\n    else {\n        btargetsFound   = false;\n    }\n\n    //--- Get the timer-control variable for this selector.\n    var controlObj      = waitForKeyElements.controlObj  ||  {};\n    var controlKey      = selectorTxt.replace (/[^\\w]/g, \"_\");\n    var timeControl     = controlObj [controlKey];\n\n    //--- Now set or clear the timer as appropriate.\n    if (btargetsFound  &amp;&amp;  bWaitOnce  &amp;&amp;  timeControl) {\n        //--- The only condition where we need to clear the timer.\n        clearInterval (timeControl);\n        delete controlObj [controlKey]\n    }\n    else {\n        //--- Set a timer, if needed.\n        if ( ! timeControl) {\n            timeControl = setInterval ( function () {\n                    waitForKeyElements (    selectorTxt,\n                                            actionFunction,\n                                            bWaitOnce,\n                                            iframeSelector\n                                        );\n                },\n                500\n            );\n            controlObj [controlKey] = timeControl;\n        }\n    }\n    waitForKeyElements.controlObj   = controlObj;\n}\n</code></pre>\n\n<hr>\n\n<h1>Update:</h1>\n\n<p>For convenience, <code>waitForKeyElements()</code> is now <a href=\"https://gist.github.com/2625891\">hosted on GitHub</a>.</p>\n\n<p><a href=\"http://stackoverflow.com/a/11197969/331508\"><strong>This answer</strong> shows an example of how to use the hosted function</a>.</p>\n",
                    "is_accepted": true,
                    "score": 35
                }
            ],
            "body": "<p>I am working on a user script and I've just found that the script is not run when the main page makes AJAX requests.</p>\n\n<p>Is there any way to fire the user script both on main page load and on AJAX requests?</p>\n",
            "last_activity_date": 1414708462,
            "question_id": 8281441,
            "score": 16,
            "tags": [
                "javascript",
                "ajax",
                "firefox",
                "greasemonkey"
            ],
            "title": "Fire Greasemonkey script on AJAX request"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>It's just shorthand for <code>$(document).ready()</code>, as in: <code>$(document).ready(function() {\n  YOUR_CODE_HERE\n});</code>. Sometimes you have to use it because your function is running before the DOM finishes loading.</p>\n\n<p>Everything is explained here: <a href=\"http://docs.jquery.com/Tutorials%3aIntroducing_%24%28document%29.ready%28%29\" rel=\"nofollow\" title=\"jQuery ready&#40;&#41; manual\">http://docs.jquery.com/Tutorials:Introducing_$(document).ready()</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>$(function() { ... });\n</code></pre>\n\n<p>is just jQuery short-hand for </p>\n\n<pre><code>$(document).ready(function() { ... });\n</code></pre>\n\n<p>What it's designed to do (amongst other things) is ensure that your function is called once all the DOM elements of the page are ready to be used.</p>\n\n<p>However, I don't think that's the problem you're having - can you clarify what you mean by 'Somehow, some functions are cannot be called and I have to call those function inside' ?\nMaybe post some code to show what's not working as expected ?</p>\n\n<p>Edit: Re-reading your question, it could be that your function is running before the page has finished loaded, and therefore won't execute properly; putting it in $(function) would indeed fix that!</p>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>This is a shortcut for <code>$(document).ready()</code>, which is executed when the browser has finished loading the page (meaning here, \"when the DOM is available\"). See <a href=\"http://www.learningjquery.com/2006/09/introducing-document-ready\" rel=\"nofollow\">http://www.learningjquery.com/2006/09/introducing-document-ready</a>. If you are trying to call <code>example()</code> before the browser has finished loading the page, it may not work.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following is a jQuery function call:</p>\n\n<pre><code>$(...);\n</code></pre>\n\n<p>Which is the \"jQuery function\". $ is a function, and $(...) is you calling that function.\nThe first parameter you've supplied is the following:</p>\n\n<pre><code>function() {}\n</code></pre>\n\n<p>The parameter is a function that you specific, and the '$' function will call the supplied method when the DOM finishing loading.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think you may be confusing Javascript with jQuery methods.  Vanilla or plain Javascript is something like:</p>\n\n<pre><code>function example() {\n}\n</code></pre>\n\n<p>A function of that nature can be called at any time, anywhere.</p>\n\n<p>jQuery (a library built on Javascript) has built in functions that generally required the DOM to be fully rendered before being called.  The syntax for when this is completed is:</p>\n\n<pre><code>$(document).ready(function() {\n});\n</code></pre>\n\n<p>So a jQuery function, which is prefixed with the <code>$</code> or the word <code>jQuery</code> generally is called from within that method.</p>\n\n<pre><code>$(document).ready(function() {        \n    // Assign all list items on the page to be the  color red.  \n    //      This does not work until AFTER the entire DOM is \"ready\", hence the $(document).ready()\n    $('li').css('color', 'red');   \n});\n</code></pre>\n\n<p>The pseudo-code for that block is:</p>\n\n<p>When the document object model <code>$(document)</code> is ready <code>.ready()</code>, call the following function <code>function() {  }</code>.  In that function, check for all <code>&lt;li&gt;</code>'s on the page <code>$('li')</code> and using the jQuery method .CSS() to set the CSS property \"color\" to the value \"red\" <code>.css('color', 'red');</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Sometimes I make a function and call the function later.</p>\n\n<p>Example:</p>\n\n<pre><code>function example { alert('example'); }\nexample(); // &lt;-- Then call it later\n</code></pre>\n\n<p>Somehow, some functions are cannot be called and I have to call those function inside:</p>\n\n<pre><code>$(function() { });\n</code></pre>\n\n<p>What does <code>$(function() {});</code> and <code>(function() { });</code> mean, and what's the difference/purpose of these?</p>\n",
            "last_activity_date": 1395622582,
            "question_id": 7642442,
            "score": 29,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "What does $(function() {} ); do?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>This looks like a decent overview of dynamic script loading:\n<a href=\"http://unixpapa.com/js/dyna.html\" rel=\"nofollow\">http://unixpapa.com/js/dyna.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can create your <code>&lt;script&gt;</code> element with an \"onload\" handler, and that will be called when the script has been loaded and evaluated by the browser.</p>\n\n<pre><code>var script = document.createElement('script');\nscript.onload = function() {\n  alert(\"Script loaded and ready\");\n};\nscript.src = \"http://whatever.com/the/script.js\";\ndocument.getElementsByTagName('head')[0].appendChild(script);\n</code></pre>\n\n<p>You can't do it synchronously.</p>\n\n<p><em>edit</em> &mdash; it's been pointed out that, true to form, IE doesn't fire a \"load\" event on <code>&lt;script&gt;</code> tags being loaded/evaluated. Thus I suppose the next thing to do would be to fetch the script with an XMLHttpRequest and then <code>eval()</code> it yourself. (Or, I suppose, stuff the text into a <code>&lt;script&gt;</code> tag you add; the execution environment of <code>eval()</code> is affected by the local scope, so it won't necessarily do what you want it to do.)</p>\n\n<p><em>edit</em> &mdash; <strong>As of early 2013</strong>, I'd strongly advise looking into a more robust script loading tool like <a href=\"http://requirejs.org\">Requirejs</a>. There are a lot of special cases to worry about. For really simple situations, there's <a href=\"http://yepnopejs.com/\">yepnope</a>, which is now built into <a href=\"http://modernizr.com/\">Modernizr</a>.</p>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<blockquote>\n  <p><strong>Asynchronous</strong> programming is slightly more <strong>complicated</strong> because the consequence \n  of making a request is encapsulated in a function instead of following the request statement. <strong>But</strong> the realtime behavior that the <strong>user experiences</strong> can be <strong>significantly \n  better</strong> because they will not see a sluggish server or sluggish network cause the \n  browser to act as though it had crashed. <strong>Synchronous</strong> programming is <strong>disrespectful</strong> \n  and <strong>should not be employed</strong> in applications which are used by people.</p>\n</blockquote>\n\n<p><em>Douglas Crockford</em> <strong><em>(<a href=\"http://www.yuiblog.com/blog/2006/04/04/synchronous-v-asynchronous/\">YUI Blog</a>)</em></strong></p>\n\n<p>Alright, buckle your seats, because it's going to be a bumpy ride. More and more people ask about loading scripts dynamically via javascript, it seems to be a hot topic.</p>\n\n<p>The main reasons why this became so popular:</p>\n\n<ul>\n<li>client-side modularity</li>\n<li>easier dependency management</li>\n<li>error handling</li>\n<li>performance advantages</li>\n</ul>\n\n<p>About <strong>modularity</strong>, it is obvious that managing client-side dependencies should be handled right on the client side. If a certain object, module or library is needed we just ask for it and load dynamically.</p>\n\n<p><strong>Error handling</strong>, if a resource fails we still got a chance to block only parts that depend on the affected script, or maybe even give it another try with some delay.</p>\n\n<p><strong>Performance</strong>, has become a competitive edge between websites, it is now a search ranking factor. What dynamic script can do is mimic asynchronous behavior as opposed to the default blocking way of how browsers handle scripts. <strong>Scripts block</strong> other resources, <strong>scripts block</strong> further parsing of the HTML document, <strong>scripts block</strong> the UI. Now with dynamic script tags and its cross-browser alternatives you can do real asynchronous requests, and execute dependent code only when they are available. Your scripts will load in-parallel even with other resources, the rendering will be flawless.</p>\n\n<p>The reason why some people stick to synchronous scripting is because they used to it. They think it is  the default way, it is the easier way, and some may even think it is the only one.</p>\n\n<p>But the only thing we should care when this needs to be decided concerning an applications's design is the <strong>end-user experience</strong>. And in this area asynchronous cannot be beaten. The user gets <strong>immediate responses</strong> (or say promises), and a promise is always better than nothing. A blank screen scares people. Developers shouldn't be lazy to enhance <strong>perceived performance</strong>.</p>\n\n<p>And finally some words about the dirty side. What you should do in order to get it work cross-browser. </p>\n\n<ol>\n<li>learn to think asynchronously</li>\n<li>organize your code to be modular</li>\n<li>organize your code to handle errors, edge cases well</li>\n<li>enhance progressively</li>\n<li>always take care of the right amount of feedback</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This isn't pretty, but it works:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  document.write('&lt;script type=\"text/javascript\" src=\"other.js\"&gt;&lt;/script&gt;');\n&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n  functionFromOther();\n&lt;/script&gt;\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  document.write('&lt;script type=\"text/javascript\" src=\"other.js\"&gt;&lt;/script&gt;');\n  window.onload = function() {\n    functionFromOther();\n  };\n&lt;/script&gt;\n</code></pre>\n\n<p>The script must be included either in a separate <code>&lt;script&gt;</code> tag or before <code>window.onload()</code>.</p>\n\n<p>This will not work:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  document.write('&lt;script type=\"text/javascript\" src=\"other.js\"&gt;&lt;/script&gt;');\n  functionFromOther(); // Error\n&lt;/script&gt;\n</code></pre>\n\n<p>The same can be done with creating a node, as Pointy did, but only in FF. You have no guarantee when the script will be ready in other browsers.</p>\n\n<p>Being an XML Purist I really hate this. But it does work predictably. You could easily wrap those ugly <code>document.write()</code>s so you don't have to look at them. You could even do tests and create a node and append it then fall back on <code>document.write()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Ironically, I have what you want, but want something closer to what you had.</p>\n\n<p>I am loading things in dynamically and asynchronously, but with an <code>load</code> callback like so (using dojo and xmlhtpprequest)</p>\n\n<pre><code>  dojo.xhrGet({\n    url: 'getCode.php',\n    handleAs: \"javascript\",\n    content : {\n    module : 'my.js'\n  },\n  load: function() {\n    myFunc1('blarg');\n  },\n  error: function(errorMessage) {\n    console.error(errorMessage);\n  }\n});\n</code></pre>\n\n<p>For a more detailed explanation, see <a href=\"http://stackoverflow.com/questions/7265371/how-to-properly-generate-exceptions-in-php-dojo-when-returning-javascript-code\">here</a></p>\n\n<p>The problem is that somewhere along the line the code gets evaled, and if there's anything wrong with your code, the <code>console.error(errorMessage);</code> statement will indicate the line where <code>eval()</code> is, not the actual error. This is SUCH a big problem that I am actually trying to convert back to <code>&lt;script&gt;</code> statements (see <a href=\"http://stackoverflow.com/questions/7870723/synchronous-script-statements\">here</a>. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is way late but for future reference to anyone who'd like to do this, you can use the following:</p>\n\n<pre><code>function require(file,callback){\n    var head=document.getElementsByTagName(\"head\")[0];\n    var script=document.createElement('script');\n    script.src=file;\n    script.type='text/javascript';\n    //real browsers\n    script.onload=callback;\n    //Internet explorer\n    script.onreadystatechange = function() {\n        if (this.readyState == 'complete') {\n            callback();\n        }\n    }\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>I did a short blog post on it some time ago <a href=\"http://crlog.info/2011/10/06/dynamically-requireinclude-a-javascript-file-into-a-page-and-be-notified-when-its-loaded/\" rel=\"nofollow\">http://crlog.info/2011/10/06/dynamically-requireinclude-a-javascript-file-into-a-page-and-be-notified-when-its-loaded/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I am used to having multiple .js files on my web site that depend one on another. To load them and ensure that the dependencies are evaluated in the right order, I have written a function that loads  all the files and then, once they are all received, <code>eval()</code> them. The main drawback is that since this does not work with CDN. For such libraries (e.g., jQuery) it is better to include them statically. Note that inserting script nodes in the HTML <strong>dynamically</strong> won't guarantee that scripts are evaluated in the right order, at least not in Chrome (this was the major reason for writing this function). </p>\n\n<pre><code>function xhrs(reqs) {\n  var requests = [] , count = [] , callback ;\n\n  callback = function (r,c,i) {\n    return function () {\n      if  ( this.readyState == 4 ) {\n        if (this.status != 200 ) {\n          r[i]['resp']=\"\" ;\n        } \n        else {\n          r[i]['resp']= this.responseText ;\n        }\n        c[0] = c[0] - 1 ;\n        if ( c[0] == 0 ) {\n          for ( var j = 0 ; j &lt; r.length ; j++ ) {\n            eval(r[j]['resp']) ;\n          }\n        }\n      }\n    }\n  } ;\n  if ( Object.prototype.toString.call( reqs ) === '[object Array]' ) {\n    requests.length = reqs.length ;\n  }\n  else {\n    requests.length = 1 ;\n    reqs = [].concat(reqs);\n  }\n  count[0] = requests.length ;\n  for ( var i = 0 ; i &lt; requests.length ; i++ ) {\n    requests[i] = {} ;\n    requests[i]['xhr'] = new XMLHttpRequest () ;\n    requests[i]['xhr'].open('GET', reqs[i]) ;\n    requests[i]['xhr'].onreadystatechange = callback(requests,count,i) ;\n    requests[i]['xhr'].send(null);\n  }\n}\n</code></pre>\n\n<p>I haven't figured out how to make references to the same value without creating an array (for count). Otherwise I think it is self-explanatory (when everything is loaded, <code>eval()</code> every file in the order given, otherwise just store the response).</p>\n\n<p>Usage example:</p>\n\n<pre><code>xhrs( [\n       root + '/global.js' ,\n       window.location.href + 'config.js' ,\n       root + '/js/lib/details.polyfill.min.js',\n       root + '/js/scripts/address.js' ,\n       root + '/js/scripts/tableofcontents.js' \n]) ;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the following problem(s) with the existing answers to this question (and variations of this question on other stackoverflow threads):</p>\n\n<ul>\n<li><strong>None of the loaded code was debuggable</strong></li>\n<li>Many of the solutions required callbacks to know when loading was finished instead of truly blocking, meaning I would get execution errors from immediately calling loaded (ie loading) code.</li>\n</ul>\n\n<p>Or, slightly more accurately:</p>\n\n<ul>\n<li>None of the loaded code was debuggable <em>(except from the HTML script tag block, if and only if the solution added a script elements to the dom, and never ever as individual viewable scripts.)</em> => Given how many scripts I have to load (and debug), this was unacceptable.</li>\n<li>Solutions using 'onreadystatechange' or 'onload' events failed to block, which was a big problem since the code originally loaded dynamic scripts synchronously using 'require([filename, 'dojo/domReady']);' and I was stripping out dojo.</li>\n</ul>\n\n<p>My final solution, which loads the script before returning, AND has all scripts properly accessible in the debugger (for Chrome at least) is as follows:</p>\n\n<p><strong>WARNING: The following code should PROBABLY be used only in 'development' mode.</strong> <em>(For 'release' mode I recommend prepackaging and minification WITHOUT dynamic script loading, or at least without eval).</em></p>\n\n<pre><code>//Code User TODO: you must create and set your own 'noEval' variable\n\nrequire = function require(inFileName)\n{\n    var aRequest\n        ,aScript\n        ,aScriptSource\n        ;\n\n    //setup the full relative filename\n    inFileName = \n        window.location.protocol + '//'\n        + window.location.host + '/'\n        + inFileName;\n\n    //synchronously get the code\n    aRequest = new XMLHttpRequest();\n    aRequest.open('GET', inFileName, false);\n    aRequest.send();\n\n    //set the returned script text while adding special comment to auto include in debugger source listing:\n    aScriptSource = aRequest.responseText + '\\n////# sourceURL=' + inFileName + '\\n';\n\n    if(noEval)//&lt;== **TODO: Provide + set condition variable yourself!!!!**\n    {\n        //create a dom element to hold the code\n        aScript = document.createElement('script');\n        aScript.type = 'text/javascript';\n\n        //set the script tag text, including the debugger id at the end!!\n        aScript.text = aScriptSource;\n\n        //append the code to the dom\n        document.getElementsByTagName('body')[0].appendChild(aScript);\n    }\n    else\n    {\n        eval(aScriptSource);\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is it possible to call in a <code>.js</code> file synchronously and then use it immediately afterward?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var head = document.getElementsByTagName('head').item(0);\n    var script = document.createElement('script');\n    script.setAttribute('type', 'text/javascript');\n    script.setAttribute('src', 'http://mysite/my.js');\n    head.appendChild(script);\n\n    myFunction(); // Fails because it hasn't loaded from my.js yet.\n\n    window.onload = function() {\n        // Works most of the time but not all of the time.\n        // Especially if my.js injects another script that contains myFunction().\n        myFunction();\n    };\n&lt;/script&gt;\n</code></pre>\n\n<p>This is simplified. In my implementation the createElement stuff is in a function. I thought about adding something to the function that could check to see if a certain variable was instantiated before returning control. But then there is still the problem of what to do when including js from another site that I have no control over.</p>\n\n<p>Thoughts?</p>\n\n<p>Edit:</p>\n\n<p>I've accepted the best answer for now because it gives a good explanation for what's going on. But if anyone has any suggestions for how to improve this I'm open to them. Here's an example of what I'd like to do.</p>\n\n<pre><code>// Include() is a custom function to import js.\nInclude('my1.js');\nInclude('my2.js');\n\nmyFunc1('blarg');\nmyFunc2('bleet');\n</code></pre>\n\n<p>I just want to keep from having to know the internals too much and just be able to say, \"I wish to use this module, and now I will use some code from it.\"</p>\n",
            "last_activity_date": 1418852000,
            "question_id": 3248384,
            "score": 26,
            "tags": [
                "javascript",
                "dom",
                "synchronous"
            ],
            "title": "document.createElement(&quot;script&quot;) synchronously"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Let's see ... a primitive one would be:</p>\n\n<pre><code>var arr = {};\n\nfor ( var i=0; i &lt; things.thing.length; i++ )\n    arr[things.thing[i]['place']] = things.thing[i];\n\nthings.thing = new Array();\nfor ( var key in arr )\n    things.thing.push(arr[key]);\n</code></pre>\n\n<p>Ok, I think that should do the trick. Check it out, Travis.</p>\n\n<p><strong>EDIT</strong><br>\nEdited the code to correctly reference the <code>place</code> (former <code>id</code>) property .</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p><strong>UPDATED</strong></p>\n\n<p>I've now read the question properly. This is a generic way of doing this: you pass in a function that tests whether two elements of an array are considered equal. In this case, it compares the values of the <code>name</code> and <code>place</code> properties of the two objects being compared.</p>\n\n<pre><code>function arrayContains(arr, val, equals) {\n    var i = arr.length;\n    while (i--) {\n        if ( equals(arr[i], val) ) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction removeDuplicates(arr, equals) {\n    var originalArr = arr.slice(0);\n    var i, len, j, val;\n    arr.length = 0;\n\n    for (i = 0, len = originalArr.length; i &lt; len; ++i) {\n        val = originalArr[i];\n        if (!arrayContains(arr, val, equals)) {\n            arr.push(val);\n        }\n    }\n}\n\nfunction thingsEqual(thing1, thing2) {\n    return thing1.place === thing2.place\n        &amp;&amp; thing1.name === thing2.name;\n}\n\nremoveDuplicates(things.thing, thingsEqual);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you can wait to eliminate the duplicates until after all the additions, the typical approach is to first sort the array and then eliminate duplicates. The sorting avoids the N * N approach of scanning the array for each element as you walk through them.</p>\n\n<p>The \"eliminate duplicates\" function is usually called <strong>unique</strong> or <strong>uniq</strong>. Some existing implementations may combine the two steps, e.g., <a href=\"http://prototypejs.org/doc/latest/language/Array/prototype/uniq/\" rel=\"nofollow\">prototype's uniq</a></p>\n\n<p><a href=\"http://www.martienus.com/code/javascript-remove-duplicates-from-array.html\" rel=\"nofollow\">This post</a> has few ideas to try (and some to avoid :-) ) <em>if your library doesn't already have one</em>! Personally I find this one the most straight forward:</p>\n\n<pre><code>    function unique(a){\n        a.sort();\n        for(var i = 1; i &lt; a.length; ){\n            if(a[i-1] == a[i]){\n                a.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        return a;\n    }  \n\n    // Provide your own comparison\n    function unique(a, compareFunc){\n        a.sort( compareFunc );\n        for(var i = 1; i &lt; a.length; ){\n            if( compareFunc(a[i-1], a[i]) === 0){\n                a.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        return a;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If you can use Javascript libraries such as underscore or lodash, I recommend having a look at <code>_.uniq</code> function in their libraries. From <code>lodash</code>:</p>\n\n<pre><code>_.uniq(array, [isSorted=false], [callback=_.identity], [thisArg])\n</code></pre>\n\n<p>Basically, you pass in the array that in here is an object literal and you pass in the attribute that you want to remove duplicates with in the original data array, like this:</p>\n\n<pre><code>var data = [{'name': 'Amir', 'surname': 'Rahnama'}, {'name': 'Amir', 'surname': 'Stevens'}];\nvar non_duplidated_data = _.uniq(data, 'name'); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have an object that contains an array of objects.</p>\n\n<pre><code>things = new Object();\n\nthings.thing = new Array();\n\nthings.thing.push({place:\"here\",name:\"stuff\"});\nthings.thing.push({place:\"there\",name:\"morestuff\"});\nthings.thing.push({place:\"there\",name:\"morestuff\"});\n</code></pre>\n\n<p>I'm wondering what is the best method to remove duplicate objects from an array.  So for example, things.thing would become...</p>\n\n<pre><code>{place:\"here\",name:\"stuff\"},\n{place:\"there\",name:\"morestuff\"}\n</code></pre>\n\n<p>Thanks in advance</p>\n",
            "last_activity_date": 1417016277,
            "question_id": 2218999,
            "score": 22,
            "tags": [
                "javascript",
                "arrays",
                "object",
                "duplicate-data"
            ],
            "title": "Remove duplicates from an array of objects in javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>maybe <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a> can help.</p>\n\n<p>NB youll have to change your messages to use json instead of xml</p>\n\n<p>Edit</p>\n\n<p>Major sites such as flickr and <a href=\"http://apiwiki.twitter.com/Search+API+Documentation\">twitter</a> support jsonp with callbacks etc </p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>The fact that this works in IE is a security issue with IE, not a feature.</p>\n\n<p>Unfortunately cross-site scripting is prohibited, and the accepted work around is to proxy the requests through your own domain: do you really have no ability to add or modify server side code?</p>\n\n<p>Furthermore, the secondary workaround - involving the aquisition of data through script tags - is only going to support GET requests, which you might be able to hack with a SOAP service, but not so much with the POST request to a RESTful service you describe.</p>\n\n<p>I'm really not sure an AJAX solution exists, you might be back to a &lt;form&gt; solution.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The not very clear workaround (but works) is using iframe as container for requests to another sites. The problem is, the parent can not access iframe's content, can only navigate iframe's \"src\" attribut. But the iframe content can access parent's content.</p>\n\n<p>So, if the iframe's content know, they can call some javascript content in parent page or directly access parent's DOM.</p>\n\n<p><strong>EDIT:</strong>\nSample:</p>\n\n<pre><code>function ajaxWorkaroung() {\n    var frm = gewtElementById(\"myIFrame\")\n    frm.src = \"http://some_other_domain\"\n}\nfunction ajaxCallback(parameter){\n    // this function will be called from myIFrame's content\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The post marked as the answer is erroneous: the iframes document is NOT able to access the parent. The same origin policy works both ways.</p>\n\n<p>The fact is that it is not possible in any way to consume a rest based webservice using xmlhttprequest. The only way to load data from a different domain (without any framework) is to use JSONP. Any other solutions demand a serverside proxy located on your own domain, or a client side proxy located on the remote domain and som sort of cross-site communication (like <a href=\"http://easyxdm.net\" rel=\"nofollow\">easyXDM</a>) to communicate between the documents.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just use a server side proxy on your origin domain. Here is an example: <a href=\"http://jquery-howto.blogspot.com/2009/04/cross-domain-ajax-querying-with-jquery.html\" rel=\"nofollow\">http://jquery-howto.blogspot.com/2009/04/cross-domain-ajax-querying-with-jquery.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Make your service domain accept cross origin resource sharing (CORS).</p>\n\n<p>Typical scenario: Most CORS compliant browsers will first send an OPTIONS header, to which, the server should return information about which headers are accepted. If the headers satisfy the service's requirements for the request provided (Allowed Methods being GET and POST, Allowed-Origin *, etc), the browser will then resend the request with the appropriate method (GET, POST, etc.).</p>\n\n<p>Everything this point forward is the same as when you are using IE, or more simply, if you were posting to the same domain.</p>\n\n<p>Caviots: Some service development SDK's (WCF in particular) will attempt to process the request, in which case you need to preprocess the OPTIONS Method to respond to the request and avoid the method being called twice on the server.</p>\n\n<p>In short, the problem lies server-side.</p>\n\n<p><strong>Edit</strong> There is one issue with IE 9 and below with CORS, in that it is not fully implemented. Luckily, you can solve this problem by making your calls from server-side code to the service and have it come back through your server (e.g. mypage.aspx?service=blah&amp;method=blahblah&amp;p0=firstParam=something). From here, your server side code should implement a request/response stream model.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This can also be done using a webserver setup localy that calls curl with the correct arguments and returns the curl output.</p>\n\n<p>app.rb</p>\n\n<pre><code>require 'sinatra'\nrequire 'curb'\n\nset :views,lambda {\"views/\"+self.name.to_s.downcase.sub(\"controller\",\"\")}\nset :haml, :layout =&gt; :'../layout', :format =&gt; :html5, :escape_html=&gt;true\ndisable :raise_errors\n\nget '/data/:brand' do\n  data_link =  \"https://externalsite.com/#{params[:brand]}\"\n  c = Curl::Easy.perform(data_link)\n  c.body_str\nend\n</code></pre>\n\n<p>Sending an ajax request to localhost:4567/data/something will return the result from externalsite.com/something.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another option would be to setup a CNAME record on your own domain to \"Mask\" the remote domain hostname.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to make an AJAX request from a website to a REST web service hosted in another domain.</p>\n\n<p>Although this is works just fine in Internet Explorer, other browsers such as Mozilla and Google Chrome impose far stricter security restrictions, which prohibit cross-site AJAX requests.</p>\n\n<p>The problem is that I have no control over the domain nor the web server where the site is hosted. This means that my REST web service must run somewhere else, and I can't put in place any redirection mechanism.</p>\n\n<p>Here is the JavaScript code that makes the asynchronous call:</p>\n\n<pre><code>var serviceUrl = \"http://myservicedomain\";\nvar payload = \"&lt;myRequest&gt;&lt;content&gt;Some content&lt;/content&gt;&lt;/myRequest&gt;\";\nvar request = new XMLHttpRequest();\nrequest.open(\"POST\", serviceUrl, true); // &lt;-- This fails in Mozilla Firefox amongst other browsers\nrequest.setRequestHeader(\"Content-type\", \"text/xml\");\nrequest.send(payload);\n</code></pre>\n\n<p>How can I have this work in other browsers beside Internet Explorer? </p>\n",
            "last_activity_date": 1386392758,
            "question_id": 333532,
            "score": 22,
            "tags": [
                "javascript",
                "ajax",
                "security",
                "xss"
            ],
            "title": "Cross-site AJAX requests"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Modify the JavaScript property <code>document.body.style.background</code>.</p>\n\n<p>For example:</p>\n\n<pre><code>function changeBackground(color) {\n   document.body.style.background = color;\n}\n\n&lt;BODY onload=\"changeBackground('red');\"&gt;\n</code></pre>\n\n<p>This is pure JavaScript, nothing to do with AJAX :)</p>\n\n<p>Note: this does depend a bit on how your page is put together, for example if you're using a DIV container with a different background colour you will need to modify the background colour of that instead of the document body.</p>\n",
                    "is_accepted": true,
                    "score": 82
                },
                {
                    "body": "<p>I wouldn't really class this as \"AJAX\". Anyway, something like following should do the trick: </p>\n\n<pre><code>document.body.style.backgroundColor = 'pink';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You don't need AJAX for this, just some plain java script setting the background-color property of the body element, like this:</p>\n\n<pre><code>document.body.style.backgroundColor = \"#AA0000\";\n</code></pre>\n\n<p>If you want to do it as if it was initiated by the server, you would have to poll the server and then change the color accordingly.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>AJAX is getting data from the server using Javascript and XML in an asynchronous fashion. Unless you want to download the colour code from the server, that's not what you're really aiming for!</p>\n\n<p>But otherwise you can set the CSS background with Javascript. If you're using a framework like jQuery, it'll be something like this:</p>\n\n<pre><code>$('body').css('background', '#ccc');\n</code></pre>\n\n<p>Otherwise, this should work:</p>\n\n<pre><code>document.body.style.background = \"#ccc\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I would prefer to see the use of a css class here. It avoids having hard to read colors / hex codes in javascript.</p>\n\n<p>document.body.className = className;</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I agree with the previous poster that changing the color by className is a prettier approach. My argument however is that a className can be regarded as a definition of \"why you want the background to be this or that color\". </p>\n\n<p>For instance, making it red is not just because you want it red, but because you'd want to inform users of an error. As such, setting the className \"AnErrorHasOccured\" on the body would be my preferred implementation.</p>\n\n<p>In css</p>\n\n<pre><code>body.AnErrorHasOccured\n{\n  background: #f00;\n}\n</code></pre>\n\n<p>In javascript:</p>\n\n<pre><code>document.body.className = \"AnErrorHasOccured\";\n</code></pre>\n\n<p>This leaves you the options of styling more elements according to this className. And as such, by setting a className you kindof give the page a certain state.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Add this script element to your body element:</p>\n\n<pre><code>&lt;body&gt;\n  &lt;script type=\"text/javascript\"&gt;\n     document.body.style.backgroundColor = \"#AAAAAA\";\n  &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can change background of a page by simply using:</p>\n\n<pre><code>document.body.style.background = #000000; //I used black as color code\n</code></pre>\n\n<p>However the below script will change the background of the page after every 3 seconds using setTimeout() function:</p>\n\n<pre><code>$(function() {\n            var colors = [\"#0099cc\",\"#c0c0c0\",\"#587b2e\",\"#990000\",\"#000000\",\"#1C8200\",\"#987baa\",\"#981890\",\"#AA8971\",\"#1987FC\",\"#99081E\"];\n\n            setInterval(function() { \n                var bodybgarrayno = Math.floor(Math.random() * colors.length);\n                var selectedcolor = colors[bodybgarrayno];\n                $(\"body\").css(\"background\",selectedcolor);\n            }, 3000);\n        })\n</code></pre>\n\n<p><a href=\"http://codeforbrowser.com/blog/changing-background-color-using-javascript-and-jquery/\" rel=\"nofollow\"><strong>READ MORE</strong></a><br /><br /><a href=\"http://jsfiddle.net/refhat/gJWFR/1/\" rel=\"nofollow\"><strong>DEMO</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>But you would want to configure the body color before the <code>&lt;body&gt;</code> element exists. That way it has the right color from the get go.</p>\n\n<pre><code>&lt;script&gt;\n    var myColor = \"#AAAAAA\";\n    document.write('\\\n        &lt;style&gt;\\\n            body{\\\n                background-color: '+myColor+';\\\n            }\\\n        &lt;/style&gt;\\\n    ');\n&lt;/script&gt;\n</code></pre>\n\n<p>This you can put in the <code>&lt;head&gt;</code> of the document or in your js file.</p>\n\n<p>Here is a nice color to play with.</p>\n\n<pre><code>var myColor = '#'+(Math.random()*0xFFFFFF&lt;&lt;0).toString(16);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>i would suggest the following code:</p>\n\n<pre><code>&lt;div id=\"example\" onClick=\"colorize()\"&gt;Click on this text to change the\nbackground color&lt;/div&gt;\n&lt;script type='text/javascript'&gt;\nfunction colorize() {\nvar element = document.getElementById(\"example\");\nelement.style.backgroundColor='#800';\nelement.style.color='white';\nelement.style.textAlign='center';\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can do it in following ways\n<strong>STEP 1</strong> </p>\n\n<pre><code>   var imageUrl= \"URL OF THE IMAGE HERE\";\n   var BackgroundColor=\"RED\"; // what ever color you want\n</code></pre>\n\n<p>For changing background of <strong>BODY</strong></p>\n\n<pre><code>document.body.style.backgroundImage=imageUrl  //changing bg image\ndocument.body.style.backgroundColor=BackgroundColor //changing bg color\n</code></pre>\n\n<p><strong>To change an element with ID</strong></p>\n\n<pre><code>document.getElementById(\"ElementId\").style.backgroundImage=imageUrl\ndocument.getElementById(\"ElementId\").style.backgroundColor=BackgroundColor \n</code></pre>\n\n<p><strong>for elements with same class</strong></p>\n\n<pre><code>   var elements = document.getElementsByClassName(\"ClassName\")\n        for (var i = 0; i &lt; elements.length; i++) {\n            elements[i].style.background=imageUrl;\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Anyone know a simple method to swap the background color of a webpage using JavaScript?</p>\n",
            "last_activity_date": 1424927411,
            "question_id": 197748,
            "score": 48,
            "tags": [
                "javascript",
                "css"
            ],
            "title": "How do I change the background color with JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>If it's possible in your scenario that you could put the entire array variable you're after into a string you could use the <code>eval()</code> function. </p>\n\n<pre><code>var r = { a:1, b: {b1:11, b2: 99}};\nvar s = \"r.b.b2\";\nalert(eval(s)); // 99\n</code></pre>\n\n<p><em>I can feel people reeling in horror</em></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I don't know a supported jQuery API function but I have this function:</p>\n\n<pre><code>    var ret = data; // Your object\n    var childexpr = \"b.b2\"; // Your expression\n\n    if (childexpr != '') {\n        var childs = childexpr.split('.');\n        var i;\n        for (i = 0; i &lt; childs.length &amp;&amp; ret != undefined; i++) {\n            ret = ret[childs[i]];\n        }\n    }\n\n    return ret;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>you could also do</p>\n\n<pre><code>var s = \"['b'].b2\";\nvar num = eval('r'+s);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Short answer: No, there is no native <code>.access</code> function like you want it. As you correctly mentioned, you would have to define your own function which splits the string and loops/checks over its parts.</p>\n\n<p>Of course, what you always can do (even if its considered bad practice) is to use <code>eval()</code>.</p>\n\n<p>Like</p>\n\n<pre><code>var s = 'b.b2';\n\neval('r.' + s); // 99\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a naive function I wrote a while ago, but it works for basic object properties:</p>\n\n<pre><code>function getDescendantProp(obj, desc) {\n    var arr = desc.split(\".\");\n    while(arr.length &amp;&amp; (obj = obj[arr.shift()]));\n    return obj;\n}\n\nconsole.log(getDescendantProp(r, \"b.b2\"));\n//-&gt; 99\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 44
                },
                {
                    "body": "<p>This is the simplest i could do:</p>\n\n<pre><code>var accessProperties = function(object, string){\n   var explodedString = string.split('.');\n   for (i = 0, l = explodedString.length; i&lt;l; i++){\n      object = object[explodedString[i]];\n   }\n   return object;\n}\nvar r = { a:1, b: {b1:11, b2: 99}};\n\nvar s = \"b.b2\";\nvar o = accessProperties(r, s);\nalert(o);//99\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I've extended Andy E's answer, so that it can also handle arrays:</p>\n\n<pre><code>function getDescendantProp(obj, desc) {\n    var arr = desc.split(\".\");\n\n    //while (arr.length &amp;&amp; (obj = obj[arr.shift()]));\n\n    while (arr.length &amp;&amp; obj) {\n        var comp = arr.shift();\n        var match = new RegExp(\"(.+)\\\\[([0-9]*)\\\\]\").exec(comp);\n        if ((match !== null) &amp;&amp; (match.length == 3)) {\n            var arrayData = { arrName: match[1], arrIndex: match[2] };\n            if (obj[arrayData.arrName] != undefined) {\n                obj = obj[arrayData.arrName][arrayData.arrIndex];\n            } else {\n                obj = undefined;\n            }\n        } else {\n            obj = obj[comp]\n        }\n    }\n\n    return obj;\n}\n</code></pre>\n\n<p>There are probably more efficient ways to do the Regex, but it's compact.</p>\n\n<p>You can now do stuff like:</p>\n\n<pre><code>var model = {\n    \"m1\": {\n        \"Id\": \"22345\",\n        \"People\": [\n            { \"Name\": \"John\", \"Numbers\": [\"07263\", \"17236\", \"1223\"] },\n            { \"Name\": \"Jenny\", \"Numbers\": [\"2\", \"3\", \"6\"] },\n            { \"Name\": \"Bob\", \"Numbers\": [\"12\", \"3333\", \"4444\"] }\n         ]\n    }\n}\n\n// Should give you \"6\"\nvar x = getDescendantProp(model, \"m1.People[1].Numbers[2]\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a a little better way then <a href=\"http://stackoverflow.com/a/8052100/56449\">@andy's</a> answer, where the <code>obj</code> (context) is <strong>optional</strong>, it falls back to <code>window</code> if not provided..</p>\n\n<pre><code>function getDescendantProp(desc, obj) {\n    obj = obj || window;\n    var arr = desc.split(\".\");\n    while (arr.length &amp;&amp; (obj = obj[arr.shift()]));\n    return obj;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Extending @JohnB's answer, I added a setter value as well. Check out the plunkr at</p>\n\n<p><a href=\"http://plnkr.co/edit/lo0thC?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/lo0thC?p=preview</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/ErYFs.png\" alt=\"enter image description here\"></p>\n\n<pre><code>function getSetDescendantProp(obj, desc, value) {\n  var arr = desc ? desc.split(\".\") : [];\n\n  while (arr.length &amp;&amp; obj) {\n    var comp = arr.shift();\n    var match = new RegExp(\"(.+)\\\\[([0-9]*)\\\\]\").exec(comp);\n\n    // handle arrays\n    if ((match !== null) &amp;&amp; (match.length == 3)) {\n      var arrayData = {\n        arrName: match[1],\n        arrIndex: match[2]\n      };\n      if (obj[arrayData.arrName] !== undefined) {\n        if (value &amp;&amp; arr.length === 0) {\n          obj[arrayData.arrName][arrayData.arrIndex] = value;\n        }\n        obj = obj[arrayData.arrName][arrayData.arrIndex];\n      } else {\n        obj = undefined;\n      }\n\n      continue;\n    }\n\n    // handle regular things\n    if (value) {\n      if (obj[comp] === undefined) {\n        obj[comp] = {};\n      }\n\n      if (arr.length === 0) {\n        obj[comp] = value;\n      }\n    }\n\n    obj = obj[comp];\n  }\n\n  return obj;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is an extension of Andy E's code, that recurses into arrays and returns all values:</p>\n\n<pre><code>function GetDescendantProps(target, pathString) {\n    var arr = pathString.split(\".\");\n    while(arr.length &amp;&amp; (target = target[arr.shift()])){\n        if (arr.length &amp;&amp; target.length &amp;&amp; target.forEach) { // handle arrays\n            var remainder = arr.join('.');\n            var results = [];\n            for (var i = 0; i &lt; target.length; i++){\n                var x = this.GetDescendantProps(target[i], remainder);\n                if (x) results = results.concat(x);\n            }\n            return results;\n        }\n    }\n    return (target) ? [target] : undefined; //single result, wrap in array for consistency\n}\n</code></pre>\n\n<p>So given this <code>target</code>:</p>\n\n<pre><code>var t = \n{a:\n    {b: [\n            {'c':'x'},\n            {'not me':'y'},\n            {'c':'z'}\n        ]\n    }\n};\n</code></pre>\n\n<p>We get:</p>\n\n<pre><code>GetDescendantProps(t, \"a.b.c\") === [\"x\", \"z\"]; // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm temporarily stuck with what appears to be a very simple JavaScript problem, but maybe I'm just missing the right search keywords!</p>\n\n<p>Say we have an object</p>\n\n<pre><code>var r = { a:1, b: {b1:11, b2: 99}};\n</code></pre>\n\n<p>There are several ways to access the 99:</p>\n\n<pre><code>r.b.b2\nr['b']['b2']\n</code></pre>\n\n<p>What I want is to be able to define a string </p>\n\n<pre><code>var s = \"b.b2\";\n</code></pre>\n\n<p>and then access the 99 using </p>\n\n<pre><code>r.s or r[s] //(which of course won't work)\n</code></pre>\n\n<p>One way is to write a function for it that splits the string on dot and maybe recursively/iteratively gets the property. But is there any simpler/more efficient way? Anything useful in any of the jQuery APIs here?</p>\n",
            "last_activity_date": 1409223702,
            "question_id": 8051975,
            "score": 32,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Access object child properties using a dot notation string"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Format it like this:</p>\n\n<pre><code>$(\"#attach\").change(function() { \n  alert('I Changed');\n});\n</code></pre>\n\n<p><strong>Update:</strong> After answering <a href=\"http://stackoverflow.com/questions/2993946\">another question</a> on this earlier, we realized this was fixed as part of the <a href=\"http://blog.jquery.com/2010/02/19/jquery-142-released/\">jQuery 1.4.2 event re-write</a>, just update to the latest version to resolve the <code>change</code> event issue with <code>&lt;input type=\"file\" /&gt;</code> in IE.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This has always worked for me in IE6 ad IE7.</p>\n\n<pre><code>$('#id-of-input-type-file').change(function(){});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I can confirm, at least that it only works after a blur event takes place, similar to a radio and checkbox in IE. I am probably going to have to add some kind of visual element for the user to click and tell me when they have picked their file. </p>\n\n<p>lame.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is likely a <a href=\"http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/958a24b7-775e-434b-9fd4-58f72ecbb759\" rel=\"nofollow\">problem with a race condition</a> with input fields in IE. By using setTimeout the function that is executed will then register that a change happened. When the UI code is performed in the onChangeEvent, that event hasn't fired yet as it appears to IE.</p>\n\n<p>I solved a similar situation by doing the following inside my change handler:</p>\n\n<pre><code>if (jQuery.browser.msie) { setTimeout(DoSomeUIChange, 0); } else { DoSomeUIChange(); }\n</code></pre>\n\n<p>The DoSomeUIChange is executed after the current code on the event queue and so removes the race condition.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is several months late, but I just ran into the exact same behavior in IE7; in all other browsers, the change event for file inputs happens after file selection. In IE7, it happens only if you trigger the file select again, or on blur.</p>\n\n<p>Here's how I ended up fixing it:</p>\n\n<pre><code>var $input = $('#your-file-input-element');\n\nvar someFunction = function()\n{\n    // what you actually want to do\n};\n\nif ($.browser.msie)\n{\n    // IE suspends timeouts until after the file dialog closes\n    $input.click(function(event)\n    {\n        setTimeout(function()\n        {\n            if($input.val().length &gt; 0) {\n              someFunction();\n            }\n        }, 0);\n    });\n}\nelse\n{\n    // All other browsers behave\n    $input.change(someFunction);\n}\n</code></pre>\n\n<p>Technically you could/should filter the hack condition to just IE7, since IE8 behaves properly on the change event, but it also has the same behavior as IE7 on suspending timeouts while browser-related chrome is visible (I guess it considers it blocking I/O), so it works as-is.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>In IE onchange event works fine when it filled out in html tag directly. Like:</p>\n\n<pre><code>&lt;input type=\"file\" onchange=\"uploader.upload()\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For IE You can use the \"onfocus\" event to catch the change of uploading file. Once the file browsing dialog is closed the onfocus event is triggered. You can check this by adding this line to your page:</p>\n\n<p><code>&lt;input type=\"file\" onfocus=\"javascript:alert('test');\" /&gt;</code></p>\n\n<p>Once the dialog is closed the alert message is shown.</p>\n\n<p>This solution is only for IE, not for FF or Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>$(\"#attach\").attr(\"onChange\", \"alert('I changed')\");\n</code></pre>\n\n<p>It works in IE, but if you want to emulate \"live\" behavior, you should add \"onChange\" attribute to each new element when create its.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My solution:</p>\n\n<pre><code>setInterval(function()\n{\n    if ($.browser.msie) $(\"input[type=file]\").blur();\n},500);\n</code></pre>\n\n<p>Not pretty, but it works. ;D</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I used the following solution. I tried to make it as self-contained as possible.</p>\n\n<pre><code>(function($) {\n    if ($.browser.msie == false)\n        return;\n\n    $('input[type=file]').live('click', function(e) {\n        var self = this;\n        var blur = function() {\n            $(self).blur();\n        }\n        setTimeout(blur, 0);\n    });\n\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I was having the same issue with IE (including IE 9). The UI logic is:</p>\n\n<ol>\n<li>click on a <code>div</code> element triggers the <code>click</code> event on a <code>file-input-element</code> so that user click on a <code>div</code> trigger file open dialog </li>\n<li>bind the <code>change</code> event handler to the <code>file-input-element</code> to ensure the <code>form</code> is submitted when file open dialog closed</li>\n</ol>\n\n<p>The app (running inside an iframe) works like a charm on Chrome and FF. But soon I found it doesn't work on IE as when user selected a file and close the dialog the form didn't submit.</p>\n\n<p>The final solution is to drop the logic #1 \"click on <code>div</code> element trigger <code>click</code> event on file input element\" and let user to click on the <code>file input element</code> directly, and then it works.</p>\n\n<p>BTW, the reason we have a <code>div</code> element is we want to hide the browser rendered controls because we have everything in the background image. However set <code>display</code> to <code>none</code> makes the control not able to respond a user interaction event. So we move the <code>file-input-element</code> to outside of the view port and use a <code>div</code> element to replace it. Since this doesn't work on IE, we end up with move back the <code>file-input-element</code> and set it's <code>opacity</code> to 0. On IE 8 or less which doesn't support <code>opacity</code>, we use filter to make it transparent: </p>\n\n<pre><code>#browse {\n    filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=0);\n    filter: alpha(opacity=0);\n    -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found this solution\nIn HTML hide file element (don't use display: none, won't work in IE), prepare onchange event of IE:</p>\n\n<pre><code>&lt;div style=\"width: 0px; height: 0px; overflow: hidden;\"&gt;\n  &lt;input id=\"ifile_template\" type=\"file\" onchange=\"this.focus(); this.blur();\"/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In javascript for IE bind function to blur, and for FF,CH bind function change():</p>\n\n<pre><code>$(iFile).blur(\n  function () {\n    ...some code...\n  }\n);\n\n// FF, CH\n$(iFile).change(\n  function () {\n  ...some code...\n  }\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>jQuery doesn't seem to recognise the <code>propertychange</code> event.  I added it to the DOM node using IE's <code>attachEvent()</code>.</p>\n\n<pre><code>var userChoseFile = function($input) {\n    // ...\n}\n\nvar $input = $(/* your file input */);\n$input[0].attachEvent('onpropertychange', function() { \n    userChoseFile($input);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is really late, but I was having the same problem, and I solved it by using a styled <code>&lt;label&gt;</code> tag with a slight workaround for Firefox.</p>\n\n<p><a href=\"http://jsfiddle.net/djibouti33/uP7A9/\">http://jsfiddle.net/djibouti33/uP7A9/</a></p>\n\n<p><strong>The Goals:</strong></p>\n\n<ol>\n<li>allow user to upload a file by using standard html file input control</li>\n<li>hide standard html file input control and apply own styling</li>\n<li>after user selects file to upload, automatically submit the form</li>\n</ol>\n\n<p><strong>The Browsers:</strong></p>\n\n<ul>\n<li>Firefox, Chrome, IE8/9, Safari</li>\n<li>IE7 didn't work, but it might if you add that browser to the workaround detailed at the bottom</li>\n</ul>\n\n<p><strong>The Initial Solution:</strong></p>\n\n<ol>\n<li>Hide the file input by positioning it offscreen. Important not to display:none as some browsers won't like this.</li>\n<li>Add another styled element to the page (link, button). </li>\n<li>Listen for a click on that element, then programmatically send a click to the file input to trigger the native 'file explorer'</li>\n<li>Listen for the file input's onchange event (occurs after a user chooses their file) </li>\n<li>Submit the form</li>\n</ol>\n\n<p><strong>The Problem:</strong></p>\n\n<ol>\n<li>IE: if you programmatically send a click to a file input in order to activate it (2), programmatically submitting the form (5) will throw a security error</li>\n</ol>\n\n<p><strong>The Workaround Solution:</strong></p>\n\n<ol>\n<li>Same as above</li>\n<li>Take advantage of the accessibility features built in to the  tag (clicking on a label will activate it's associated control) by styling \na  tag instead of a link/button</li>\n<li>Listen for the file input's onchange event</li>\n<li>Submit the form</li>\n<li>For some reason Mozilla browsers won't activate a file input by clicking on it's .     </li>\n<li>For Mozilla, listen for the click on the label and send a click event to the file input to activate it.</li>\n</ol>\n\n<p>Hope this helps! Check out the jsfiddle for details on the html/js/css used to make it all work.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I already looked all around, and can't find a solution: I have a form to upload files, and it should fire the submit after the file selection.</p>\n\n<p>On FF/Chrome it goes weel, and submit the form after file selection, but I can't do this on ie.</p>\n\n<p>Already tried with click/propertychange but nothing happens. Some code I already tried:</p>\n\n<p><code>$(\"#attach\").attr(\"onChange\", \"alert('I changed')\");</code></p>\n\n<p><code>$(\"#attach\").live($.browser.msie? 'propertychange': 'change', function(e) { ... });</code></p>\n\n<p>Any sugestions to I try?</p>\n\n<p>Edit1: I think there's a important information, this input file, is created on the fly, because of it I use .live() to bind the event</p>\n",
            "last_activity_date": 1356111422,
            "question_id": 2389341,
            "score": 27,
            "tags": [
                "javascript",
                "jquery",
                "internet-explorer",
                "events"
            ],
            "title": "Jquery: change event to input file on IE"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Could you please have a look at: <a href=\"http://jsfiddle.net/4Zw3M/1/\" rel=\"nofollow\">http://jsfiddle.net/4Zw3M/1/</a>.</p>\n\n<p>Basically, the data is stored in an Array and the options are added accordingly. I think the code says more than a thousand words.</p>\n\n<pre><code>var data = [ // The data\n    ['ten', [\n        'eleven','twelve'\n    ]],\n    ['twenty', [\n        'twentyone', 'twentytwo'\n    ]]\n];\n\n$a = $('#a'); // The dropdowns\n$b = $('#b');\n\nfor(var i = 0; i &lt; data.length; i++) {\n    var first = data[i][0];\n    $a.append($(\"&lt;option&gt;\"). // Add options\n       attr(\"value\",first).\n       data(\"sel\", i).\n       text(first));\n}\n\n$a.change(function() {\n    var index = $(this).children('option:selected').data('sel');\n    var second = data[index][1]; // The second-choice data\n\n    $b.html(''); // Clear existing options in second dropdown\n\n    for(var j = 0; j &lt; second.length; j++) {\n        $b.append($(\"&lt;option&gt;\"). // Add options\n           attr(\"value\",second[j]).\n           data(\"sel\", j).\n           text(second[j]));\n    }\n}).change(); // Trigger once to add options at load of first choice\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n     function configureDropDownLists(ddl1,ddl2) {\n    var colours = new Array('Black', 'White', 'Blue');\n    var shapes = new Array('Square', 'Circle', 'Triangle');\n    var names = new Array('John', 'David', 'Sarah');\n\n    switch (ddl1.value) {\n        case 'Colours':\n            ddl2.options.length = 0;\n            for (i = 0; i &lt; colours.length; i++) {\n                createOption(ddl2, colours[i], colours[i]);\n            }\n            break;\n        case 'Shapes':\n            ddl2.options.length = 0; \n        for (i = 0; i &lt; shapes.length; i++) {\n            createOption(ddl2, shapes[i], shapes[i]);\n            }\n            break;\n        case 'Names':\n            ddl2.options.length = 0;\n            for (i = 0; i &lt; names.length; i++) {\n                createOption(ddl2, names[i], names[i]);\n            }\n            break;\n            default:\n                ddl2.options.length = 0;\n            break;\n    }\n\n}\n\n    function createOption(ddl, text, value) {\n        var opt = document.createElement('option');\n        opt.value = value;\n        opt.text = text;\n        ddl.options.add(opt);\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>And then call it like this:</p>\n\n<pre><code>&lt;select id=\"ddl\" onchange=\"configureDropDownLists(this,document.getElementById('ddl2'))\"&gt;\n&lt;option value=\"\"&gt;&lt;/option&gt;\n&lt;option value=\"Colours\"&gt;Colours&lt;/option&gt;\n&lt;option value=\"Shapes\"&gt;Shapes&lt;/option&gt;\n&lt;option value=\"Names\"&gt;Names&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;select id=\"ddl2\"&gt;\n&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>Setup mine within a closure and with straight JavaScript, explanation provided in comments</p>\n\n<pre><code>&lt;select id='A' name='A'&gt;\n    &lt;option value='yes' selected='selected'&gt;yes\n    &lt;option value='no'&gt; no\n&lt;/select&gt;\n&lt;select id='B' name='B'&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>JS: </p>\n\n<pre><code>(function(){\n\n    //setup an object fully of arrays\n    //alternativly it could be something like\n    //{\"yes\":[{value:sweet, text:Sweet}.....]}\n    //so you could set the label of the option tag something different than the name\n    var bOptions = {\"yes\":[\"sweet\",\"wohoo\",\"yay\"], \"no\":[\"you suck!\",\"common son\"]};\n\n    var A = document.getElementById('A');\n    var B = document.getElementById('B');\n\n    //on change is a good event for this because you are guarenteed the value is different\n    A.onchange = function(){\n        //clear out B\n        B.length = 0;\n        //get the selected value from A\n        var _val = this.options[this.selectedIndex].value;\n        //loop through bOption at the selected value\n        for ( var i in bOptions[_val]){\n            //create option tag\n            var op = document.createElement('option');\n            //set its value\n            op.value = bOptions[_val][i];\n            //set the display label\n            op.text = bOptions[_val][i];\n            //append it to B\n            B.appendChild(op);\n        }\n    };\n    //fire this to update B on load\n    A.onchange();\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I need to change the contents of dropdown B based on the selection in dropdown A using javascript.  There are no db queries involved--I know beforehand what the contents of B should be given the choice in A.  I have found some examples using AJAX, but since there is no db query involved that's not necessary.  Can anyone point me to some example code for how to do this?</p>\n",
            "last_activity_date": 1424893090,
            "question_id": 5686735,
            "score": 11,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Populate one dropdown based on selection in another"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Using named function expressions is better, when you want to be able to reference the function in question without having to rely on deprecated features such as <code>arguments.callee</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In the case of the anonymous function expression, the function is <em>anonymous</em>&nbsp;&mdash; literally, it has no name. The variable you're assigning it to has a name, but the function does not.</p>\n\n<p>Names are useful. Names can be seen in stack traces, call stacks, lists of breakpoints, etc. Names are a Good Thing.<sup>(tm)</sup></p>\n\n<p>You do have to beware of named function expressions in older versions of IE (IE8 and below), because IE mistakenly creates two completely separate function objects at two completely different times (more in my blog article <a href=\"http://blog.niftysnippets.org/2010/09/double-take.html\" rel=\"nofollow\"><em>Double take</em></a>).</p>\n\n<p>It's also worth noting that modern JavaScript engines and debuggers are pretty smart about what they show you in call stacks and lists of breakpoints. Chrome's Dev Tools and Firebug, for instance, will both show you <code>boo</code> for your anonymous function expression. And in fact, the upcoming next version of the specification, ES6, will include rules for inferring the name of a function based on the variable or property it's being assigned to. (More below at *.) So in ES6, your \"anonymous\" function expression won't result in an anonymous function anymore.</p>\n\n<p>Because of the IE issue, I tend to avoid NFEs in favor of function <em>declarations</em>. It's clear from the question and your comment on it that <strong>you</strong> know what that is, but just for completeness and for lurkers:</p>\n\n<pre><code> function boo() {\n    alert(1);\n }\n</code></pre>\n\n<p>They look identical out of context, but the difference is that an NFE is used as a right-hand value (so, it follows a <code>=</code> in an assignment, or a <code>:</code> in an object initializer, or it's passed into a function as an argument). A function declaration is written standalone, not as a right-hand value.</p>\n\n<hr>\n\n<p>* About ES6 and inferred names: This is strewn throughout <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\" rel=\"nofollow\">the draft spec</a> rather than being defined in one place with a bunch of rules: Search for occurrences of \"setFunctionName\", currently found in</p>\n\n<ul>\n<li><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" rel=\"nofollow\">\u00a712.2.5.9 (property initializer semantics)</a></li>\n<li><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-assignment-operators-runtime-semantics-evaluation\" rel=\"nofollow\">\u00a712.14.4 (assignment operator semantics)</a></li>\n<li><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-destructuringassignmentevaluation\" rel=\"nofollow\">\u00a712.14.5.2</a> and <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-runtime-semantics-keyeddestructuringassignmentevaluation\" rel=\"nofollow\">\u00a712.14.5.4</a> (destructuring assignment semantics)</li>\n<li><a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations-runtime-semantics-evaluation\" rel=\"nofollow\">\u00a713.2.1.4 (<code>let</code> and <code>const</code> declaration semantics)</a></li>\n<li>...and a <strong>bunch</strong> of other places.</li>\n</ul>\n\n<p>The short version is basically any time an anonymous function expression appears on the right-hand side of something like an assignment or initialization, like:</p>\n\n<pre><code>var foo = function() { /*...*/ };\n</code></pre>\n\n<p><em>(or it could be <code>let</code> or <code>const</code> rather than <code>var</code>)</em>, or</p>\n\n<pre><code>obj.foo = function() { /*...*/ };\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var obj = {\n    foo: function() { /*...*/ }\n};\n</code></pre>\n\n<p>or</p>\n\n<pre><code>doSomething({\n    foo: function() { /*...*/ }\n});\n</code></pre>\n\n<p><em>(those last two are really the same thing)</em>, the resulting function will have a name (<code>foo</code>, in the examples).</p>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>Naming functions is useful if they need to reference themselves (e.g. for recursive calls). Indeed, if you are passing a literal function expression as an argument directly to another function, that function expression <em>cannot</em> directly reference itself in ES5 strict mode unless it is named.</p>\n\n<p>For example, consider this code:</p>\n\n<pre><code>setTimeout(function sayMoo() {\n    alert('MOO');\n    setTimeout(sayMoo, 1000);\n}, 1000);\n</code></pre>\n\n<p>It would be impossible to write this code quite this cleanly if the function expression passed to <code>setTimeout</code> were anonymous; we would need to assign it to a variable instead prior to the <code>setTimeout</code> call. This way, with a named function expression, is slightly shorter and neater.</p>\n\n<p>It was historically possible to write code like this even using an anonymous function expression, by exploiting <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\" rel=\"nofollow\"><code>arguments.callee</code></a>...</p>\n\n<pre><code>setTimeout(function () {\n    alert('MOO');\n    setTimeout(arguments.callee, 1000);\n}, 1000);\n</code></pre>\n\n<p>... but <code>arguments.callee</code> is deprecated, and is outright forbidden in ES5 strict mode. Hence MDN advises:</p>\n\n<blockquote>\n  <p>Avoid using <code>arguments.callee()</code> by either <strong><em>giving function expressions a name</em></strong> or use a function declaration where a function must call itself.</p>\n</blockquote>\n\n<p>(emphasis mine)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>We have two different way for doing function expression in JavaScript:</p>\n\n<p><strong>Named function expression (NFE)</strong>: </p>\n\n<pre><code>var boo = function boo () {\n  alert(1);\n};\n</code></pre>\n\n<p><strong>Anonymous function expression</strong>:</p>\n\n<pre><code>var boo = function () {\n  alert(1);\n};\n</code></pre>\n\n<p>And both of them can be called with <code>boo();</code>. I really can't see why/when I should use anonymous functions and when I should use Named Function Expressions. What difference is there between them?</p>\n",
            "last_activity_date": 1424337937,
            "question_id": 15336347,
            "score": 17,
            "tags": [
                "javascript",
                "function",
                "anonymous-function",
                "function-expression"
            ],
            "title": "Why use named function expressions?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I got what u need! </p>\n\n<p><a href=\"http://www.trash-factor.com/content/html-textarea-syntax-highlighting-brief-overview\" rel=\"nofollow\">http://www.trash-factor.com/content/html-textarea-syntax-highlighting-brief-overview</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this piece of code I wrote this morning, it will highlight a defined set of words:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;!-- Load jQuery --&gt;\n        &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;!-- The javascript xontaining the plugin and the code to init the plugin --&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            $(function() {\n                // let's init the plugin, that we called \"highlight\".\n                // We will highlight the words \"hello\" and \"world\", \n                // and set the input area to a widht and height of 500 and 250 respectively.\n                $(\"#container\").highlight({\n                    words:  [\"hello\",\"world\"],\n                    width:  500,\n                    height: 250\n                });\n            });\n\n            // the plugin that would do the trick\n            (function($){\n                $.fn.extend({\n                    highlight: function() {\n                        // the main class\n                        var pluginClass = function() {};\n                        // init the class\n                        // Bootloader\n                        pluginClass.prototype.__init = function (element) {\n                            try {\n                                this.element = element;\n                            } catch (err) {\n                                this.error(err);\n                            }\n                        };\n                        // centralized error handler\n                        pluginClass.prototype.error = function (e) {\n                            // manage error and exceptions here\n                            //console.info(\"error!\",e);\n                        };\n                        // Centralized routing function\n                        pluginClass.prototype.execute = function (fn, options) {\n                            try {\n                                options = $.extend({},options);\n                                if (typeof(this[fn]) == \"function\") {\n                                    var output = this[fn].apply(this, [options]);\n                                } else {\n                                    this.error(\"undefined_function\");\n                                }\n                            } catch (err) {\n                                this.error(err);\n                            }\n                        };\n                        // **********************\n                        // Plugin Class starts here\n                        // **********************\n                        // init the component\n                        pluginClass.prototype.init = function (options) {\n                            try {\n                                // the element's reference ( $(\"#container\") ) is stored into \"this.element\"\n                                var scope                   = this;\n                                this.options                = options;\n\n                                // just find the different elements we'll need\n                                this.highlighterContainer   = this.element.find('#highlighterContainer');\n                                this.inputContainer         = this.element.find('#inputContainer');\n                                this.textarea               = this.inputContainer.find('textarea');\n                                this.highlighter            = this.highlighterContainer.find('#highlighter');\n\n                                // apply the css\n                                this.element.css('position','relative');\n\n                                // place both the highlight container and the textarea container\n                                // on the same coordonate to superpose them.\n                                this.highlighterContainer.css({\n                                    'position':         'absolute',\n                                    'left':             '0',\n                                    'top':              '0',\n                                    'border':           '1px dashed #ff0000',\n                                    'width':            this.options.width,\n                                    'height':           this.options.height,\n                                    'cursor':           'text'\n                                });\n                                this.inputContainer.css({\n                                    'position':         'absolute',\n                                    'left':             '0',\n                                    'top':              '0',\n                                    'border':           '1px solid #000000'\n                                });\n                                // now let's make sure the highlit div and the textarea will superpose,\n                                // by applying the same font size and stuffs.\n                                // the highlighter must have a white text so it will be invisible\n                                this.highlighter.css({\n\n                                    'padding':          '7px',\n                                    'color':            '#eeeeee',\n                                    'background-color': '#ffffff',\n                                    'margin':           '0px',\n                                    'font-size':        '11px',\n                                    'font-family':      '\"lucida grande\",tahoma,verdana,arial,sans-serif'\n                                });\n                                // the textarea must have a transparent background so we can see the highlight div behind it\n                                this.textarea.css({\n                                    'background-color': 'transparent',\n                                    'padding':          '5px',\n                                    'margin':           '0px',\n                                    'font-size':        '11px',\n                                    'width':            this.options.width,\n                                    'height':           this.options.height,\n                                    'font-family':      '\"lucida grande\",tahoma,verdana,arial,sans-serif'\n                                });\n\n                                // apply the hooks\n                                this.highlighterContainer.bind('click', function() {\n                                    scope.textarea.focus();\n                                });\n                                this.textarea.bind('keyup', function() {\n                                    // when we type in the textarea, \n                                    // we want the text to be processed and re-injected into the div behind it.\n                                    scope.applyText($(this).val());\n                                });\n                            } catch (err) {\n                                this.error(err);\n                            }\n                            return true;\n                        };\n                        pluginClass.prototype.applyText = function (text) {\n                            try {\n                                var scope                   = this;\n\n                                // parse the text:\n                                // replace all the line braks by &lt;br/&gt;, and all the double spaces by the html version &amp;nbsp;\n                                text = this.replaceAll(text,'\\n','&lt;br/&gt;');\n                                text = this.replaceAll(text,'  ','&amp;nbsp;&amp;nbsp;');\n\n                                // replace the words by a highlighted version of the words\n                                for (var i=0;i&lt;this.options.words.length;i++) {\n                                    text = this.replaceAll(text,this.options.words[i],'&lt;span style=\"background-color: #D8DFEA;\"&gt;'+this.options.words[i]+'&lt;/span&gt;');\n                                }\n\n                                // re-inject the processed text into the div\n                                this.highlighter.html(text);\n\n                            } catch (err) {\n                                this.error(err);\n                            }\n                            return true;\n                        };\n                        // \"replace all\" function\n                        pluginClass.prototype.replaceAll = function(txt, replace, with_this) {\n                            return txt.replace(new RegExp(replace, 'g'),with_this);\n                        }\n\n                        // don't worry about this part, it's just the required code for the plugin to hadle the methods and stuffs. Not relevant here.\n                        //**********************\n                        // process\n                        var fn;\n                        var options;\n                        if (arguments.length == 0) {\n                            fn = \"init\";\n                            options = {};\n                        } else if (arguments.length == 1 &amp;&amp; typeof(arguments[0]) == 'object') {\n                            fn = \"init\";\n                            options = $.extend({},arguments[0]);\n                        } else {\n                            fn = arguments[0];\n                            options = $.extend({},arguments[1]);\n                        }\n\n                        $.each(this, function(idx, item) {\n                            // if the component is not yet existing, create it.\n                            if ($(item).data('highlightPlugin') == null) {\n                                $(item).data('highlightPlugin', new pluginClass());\n                                $(item).data('highlightPlugin').__init($(item));\n                            }\n                            $(item).data('highlightPlugin').execute(fn, options);\n                        });\n                        return this;\n                    }\n                });\n\n            })(jQuery);\n\n\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;div id=\"container\"&gt;\n            &lt;div id=\"highlighterContainer\"&gt;\n                &lt;div id=\"highlighter\"&gt;\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div id=\"inputContainer\"&gt;\n                &lt;textarea cols=\"30\" rows=\"10\"&gt;\n\n                &lt;/textarea&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>This was written for another post (http://facebook.stackoverflow.com/questions/7497824/how-to-highlight-friends-name-in-facebook-status-update-box-textarea/7597420#7597420), but it seems to be what you're searching for.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I've wrote a plugin based on Julien L proposal. Less intrusive and more efficient.</p>\n\n<p>Hope I will be usefull : <a href=\"http://www.strangeplanet.fr/work/jquery-highlighttextarea/\">http://www.strangeplanet.fr/work/jquery-highlighttextarea/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Improved version from above, also works with Regex and more TextArea fields:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;&lt;/title&gt;\n    &lt;!-- Load jQuery --&gt;\n    &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- The javascript xontaining the plugin and the code to init the plugin --&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        $(function() {\n            // let's init the plugin, that we called \"highlight\".\n            // We will highlight the words \"hello\" and \"world\", \n            // and set the input area to a widht and height of 500 and 250 respectively.\n            $(\"#container0\").highlight({\n                words:  [[\"hello\",\"hello\"],[\"world\",\"world\"],[\"(\\\\[b])(.+?)(\\\\[/b])\",\"$1$2$3\"]],\n                width:  500,\n                height: 125,\n        count:0\n            });\n            $(\"#container1\").highlight({\n                words:  [[\"hello\",\"hello\"],[\"world\",\"world\"],[\"(\\\\[b])(.+?)(\\\\[/b])\",\"$1$2$3\"]],\n                width:  500,\n                height: 125,\n        count: 1\n            });\n        });\n\n        // the plugin that would do the trick\n        (function($){\n            $.fn.extend({\n                highlight: function() {\n                    // the main class\n                    var pluginClass = function() {};\n                    // init the class\n                    // Bootloader\n                    pluginClass.prototype.__init = function (element) {\n                        try {\n                            this.element = element;\n                        } catch (err) {\n                            this.error(err);\n                        }\n                    };\n                    // centralized error handler\n                    pluginClass.prototype.error = function (e) {\n                        // manage error and exceptions here\n                        //console.info(\"error!\",e);\n                    };\n                    // Centralized routing function\n                    pluginClass.prototype.execute = function (fn, options) {\n                        try {\n                            options = $.extend({},options);\n                            if (typeof(this[fn]) == \"function\") {\n                                var output = this[fn].apply(this, [options]);\n                            } else {\n                                this.error(\"undefined_function\");\n                            }\n                        } catch (err) {\n                            this.error(err);\n                        }\n                    };\n                    // **********************\n                    // Plugin Class starts here\n                    // **********************\n                    // init the component\n                    pluginClass.prototype.init = function (options) {\n                        try {\n                            // the element's reference ( $(\"#container\") ) is stored into \"this.element\"\n                            var scope                   = this;\n                            this.options                = options;\n\n                            // just find the different elements we'll need\n\n                            this.highlighterContainer   = this.element.find('#highlighterContainer'+this.options.count);\n                            this.inputContainer         = this.element.find('#inputContainer'+this.options.count);\n                            this.textarea               = this.inputContainer.find('textarea');\n                            this.highlighter            = this.highlighterContainer.find('#highlighter'+this.options.count);\n\n                            // apply the css\n                            this.element.css({'position':'relative',\n                'overflow':'auto',\n                'background':'none repeat scroll 0 0 #FFFFFF',\n                'height':this.options.height+2,\n                'width':this.options.width+19,\n                'border':'1px solid'\n                });\n\n                            // place both the highlight container and the textarea container\n                            // on the same coordonate to superpose them.\n                            this.highlighterContainer.css({\n                                'position':         'absolute',\n                                'left':             '0',\n                                'top':              '0',\n                                'border':           '1px dashed #ff0000', \n                                'width':            this.options.width,\n                                'height':           this.options.height,\n                                'cursor':           'text',\n                'z-index':      '1'\n                            });\n                            this.inputContainer.css({\n                                'position':         'absolute',\n                                'left':             '0',\n                                'top':              '0',\n                                'border':           '0px solid #000000',\n                'z-index':      '2',\n                'background':   'none repeat scroll 0 0 transparent'\n                            });\n                            // now let's make sure the highlit div and the textarea will superpose,\n                            // by applying the same font size and stuffs.\n                            // the highlighter must have a white text so it will be invisible\n            var isWebKit = navigator.userAgent.indexOf(\"WebKit\") &gt; -1,\n            isOpera = navigator.userAgent.indexOf(\"Opera\") &gt; -1,\nisIE /*@cc_on = true @*/,\nisIE6 = isIE &amp;&amp; !window.XMLHttpRequest; // Despite the variable name, this means if IE lower than v7\n\nif (isIE || isOpera){\nvar padding = '6px 5px';\n}\nelse {\nvar padding = '5px 6px';\n}\n                           this.highlighter.css({\n                                'padding':      padding,\n                                'color':            '#eeeeee',\n                                'background-color': '#ffffff',\n                                'margin':           '0px',\n                                'font-size':        '11px' ,\n                                'line-height':      '12px' ,\n                                'font-family':      '\"lucida grande\",tahoma,verdana,arial,sans-serif'\n                            });\n\n                            // the textarea must have a transparent background so we can see the highlight div behind it\n                            this.textarea.css({\n                                'background-color': 'transparent',\n                                'padding':          '5px',\n                                'margin':           '0px',\n                                'width':            this.options.width,\n                                'height':           this.options.height,\n                                'font-size':        '11px',\n                                'line-height':      '12px' ,\n                                'font-family':      '\"lucida grande\",tahoma,verdana,arial,sans-serif',\n                'overflow':     'hidden',\n                                'border':           '0px solid #000000'\n                            });\n\n                            // apply the hooks\n                            this.highlighterContainer.bind('click', function() {\n                                scope.textarea.focus();\n                            });\n                            this.textarea.bind('keyup', function() {\n                                // when we type in the textarea, \n                                // we want the text to be processed and re-injected into the div behind it.\n                                scope.applyText($(this).val());\n                            });\n\n            scope.applyText(this.textarea.val());\n\n                        } catch (err) {\n            this.error(err)\n                        }\n                        return true;\n                    };\n                    pluginClass.prototype.applyText = function (text) {\n                        try {\n                            var scope                   = this;\n\n                            // parse the text:\n                            // replace all the line braks by &lt;br/&gt;, and all the double spaces by the html version &amp;nbsp;\n                            text = this.replaceAll(text,'\\n','&lt;br/&gt;');\n                            text = this.replaceAll(text,'  ','&amp;nbsp;&amp;nbsp;');\n                            text = this.replaceAll(text,' ','&amp;nbsp;');\n\n                            // replace the words by a highlighted version of the words\n                            for (var i=0;i&lt;this.options.words.length;i++) {\n                                text = this.replaceAll(text,this.options.words[i][0],'&lt;span style=\"background-color: #D8DFEA;\"&gt;'+this.options.words[i][1]+'&lt;/span&gt;');\n                                //text = this.replaceAll(text,'(\\\\[b])(.+?)(\\\\[/b])','&lt;span style=\"font-weight:bold;background-color: #D8DFEA;\"&gt;$1$2$3&lt;/span&gt;');\n                            }\n\n                            // re-inject the processed text into the div\n                            this.highlighter.html(text);\n            if (this.highlighter[0].clientHeight &gt; this.options.height) {\n                // document.getElementById(\"highlighter0\")\n                this.textarea[0].style.height=this.highlighter[0].clientHeight +19+\"px\";\n            }\n            else {\n                this.textarea[0].style.height=this.options.height;\n            }\n\n                        } catch (err) {\n                            this.error(err);\n                        }\n                        return true;\n                    };\n                    // \"replace all\" function\n                    pluginClass.prototype.replaceAll = function(txt, replace, with_this) {\n                        return txt.replace(new RegExp(replace, 'g'),with_this);\n                    }\n\n                    // don't worry about this part, it's just the required code for the plugin to hadle the methods and stuffs. Not relevant here.\n                    //**********************\n                    // process\n                    var fn;\n                    var options;\n                    if (arguments.length == 0) {\n                        fn = \"init\";\n                        options = {};\n                    } else if (arguments.length == 1 &amp;&amp; typeof(arguments[0]) == 'object') {\n                        fn = \"init\";\n                        options = $.extend({},arguments[0]);\n                    } else {\n                        fn = arguments[0];\n                        options = $.extend({},arguments[1]);\n                    }\n\n                    $.each(this, function(idx, item) {\n                        // if the component is not yet existing, create it.\n                        if ($(item).data('highlightPlugin') == null) {\n                            $(item).data('highlightPlugin', new pluginClass());\n                            $(item).data('highlightPlugin').__init($(item));\n                        }\n                        $(item).data('highlightPlugin').execute(fn, options);\n                    });\n                    return this;\n                }\n            });\n\n        })(jQuery);\n\n\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;div id=\"container0\"&gt;\n        &lt;div id=\"highlighterContainer0\"&gt;\n            &lt;div id=\"highlighter0\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"inputContainer0\"&gt;\n            &lt;textarea id=\"text1\" cols=\"30\" rows=\"15\"&gt;hello world&lt;/textarea&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;h1&gt; haus &lt;/h1&gt;\n    &lt;div id=\"container1\"&gt;\n        &lt;div id=\"highlighterContainer1\"&gt;\n            &lt;div id=\"highlighter1\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"inputContainer1\"&gt;\n            &lt;textarea cols=\"30\" rows=\"15\"&gt;hipp hipp\n hurra, \n [b]ich hab es jetzt![/b]&lt;/textarea&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Easy script I wrote for this: <a href=\"http://jsfiddle.net/ZbTkJ/\" rel=\"nofollow\"><strong>Jsfiddle</strong></a></p>\n\n<p><strong>OPTIONS:</strong></p>\n\n<ol>\n<li>Optional char counter.</li>\n<li>Highlight several patterns with different colors.</li>\n<li>Regex.</li>\n<li>Collect matches to other containers.</li>\n<li>Easy styling: fonts color and face, backgrounds, border radius and lineheight.</li>\n<li><p>Ctrl+Shift for direction change.</p>\n\n<pre><code>//include function like in the fiddle!\n\n//CREATE ELEMENT:\n\ncreate_bind_textarea_highlight({ \n     eleId:\"wrap_all_highlighter\",\n     width:400,\n     height:110,\n     padding:5, \n     background:'white',\n     backgroundControls:'#585858',\n     radius:5,\n     fontFamilly:'Arial',\n     fontSize:13,\n     lineHeight:18,\n     counterlettres:true,\n     counterFont:'red',\n     matchpatterns:[[\"(#[0-9A-Za-z]{0,})\",\"$1\"],[\"(@[0-9A-Za-z]{0,})\",\"$1\"]],\n     hightlightsColor:['#00d2ff','#FFBF00'],\n     objectsCopy:[\"copy_hashes\",\"copy_at\"]\n     //PRESS Ctrl + SHIFT for direction swip!\n  });\n\n //HTML EXAMPLE:\n &lt;div id=\"wrap_all_highlighter\" placer='1'&gt;&lt;/div&gt;\n &lt;div id='copy_hashes'&gt;&lt;/div&gt;&lt;!--Optional--&gt;\n &lt;div id='copy_at'&gt;&lt;/div&gt;&lt;!--Optional--&gt;\n</code></pre></li>\n</ol>\n\n<p>Have Fun!</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is it possible to highlight text inside of a textarea using javascript? Either changing the background of just a portion of the text area or making a portion of the text <em>selected</em>?</p>\n",
            "last_activity_date": 1376690862,
            "question_id": 142527,
            "score": 30,
            "tags": [
                "javascript",
                "textarea"
            ],
            "title": "Highlight text inside of a textarea"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>If this is a strictly client solution, yours sounds pretty good.</p>\n\n<p>If you are writing code on the server, you could probably just populate a div/hidden field/(insert your fave HTML element here) with the fully resolved URL to the script, and pick that up with your javascript on the clientside.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You may want to have a look at <a href=\"https://addons.mozilla.org/en-US/firefox/addon/10345\" rel=\"nofollow\">https://addons.mozilla.org/en-US/firefox/addon/10345</a> if you're interested in learning which functions (and thus which file) are executing on a page you don't control.</p>\n\n<p>If you're interested in figuring out which of <em>your</em> scripts is executing, then there are a number of ways. With Firebug you could <code>console.log()</code> the information. Even just putting alert statements in your code (while annoying) can help debug in a low-tech way. You could also raise errors and catch them, then process using properties of the error (see: <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Error\" rel=\"nofollow\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Error</a>)</p>\n\n<p>However, why would this be important? If the script is causing errors already then it's easy enough to determine where the error is occurring. If it's not about errors at all, then what's the advantage in knowing which <em>file</em> it comes from?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Put this in the js file that needs to know it's own url.</p>\n\n<p><strong>Fully Qualified</strong> (eg <code>http://www.example.com/js/main.js</code>):</p>\n\n<pre><code>var scriptSource = (function(scripts) {\n    var scripts = document.getElementsByTagName('script'),\n        script = scripts[scripts.length - 1];\n\n    if (script.getAttribute.length !== undefined) {\n        return script.src\n    }\n\n    return script.getAttribute('src', -1)\n}());\n</code></pre>\n\n<p>Or\n<strong>As it appears in source</strong> (eg <code>/js/main.js</code>):</p>\n\n<pre><code>var scriptSource = (function() {\n    var scripts = document.getElementsByTagName('script'),\n        script = scripts[scripts.length - 1];\n\n    if (script.getAttribute.length !== undefined) {\n        return script.getAttribute('src')\n    }\n\n    return script.getAttribute('src', 2)\n}());\n</code></pre>\n\n<p>See <a href=\"http://www.glennjones.net/Post/809/getAttributehrefbug.htm\">http://www.glennjones.net/Post/809/getAttributehrefbug.htm</a> for explanation of the <code>getAttribute</code> parameter being used (it's an IE bug).</p>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p><strong>As it appears in source</strong> (e.g. <code>/js/main.js</code>), this is <strong>cross-browser</strong>:</p>\n\n<pre><code>var scriptSource = (function() \n{ \n    var scripts = document.getElementsByTagName('script'), \n        script = scripts[scripts.length - 1]; \n\n    //No need to perform the same test we do for the Fully Qualified\n    return script.getAttribute('src', 2); //this works in all browser even in FF/Chrome/Safari\n}()); \n</code></pre>\n\n<hr>\n\n<p><strong>Fully Qualified</strong> (e.g. <code>http://www.example.com/js/main.js</code>):</p>\n\n<p>After some tests it seems hard to get the <strong>fully qualified</strong> one in a cross-browser way. The <a href=\"http://stackoverflow.com/a/984656/260080\">solution suggested by Crescent Fresh</a> <strong>does not work in IE8 to get the fully qualified</strong>, even if it works in IE7</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This method work with defer, async and lazy loading\nSince you know the filename of your script, and if it will be unique</p>\n\n<pre><code>/* see  \n * http://stackoverflow.com/questions/984510/what-is-my-script-src-url/984656#984656\n * http://www.glennjones.net/Post/809/getAttributehrefbug.htm\n * \n * iterate all script to find script with right filename\n * this work with async and defer (but your script MUST have a unique filemane)\n * mozilla support document.currentScript and we use it, if is set\n *\n * this will not work with local script loaded by jQuery.getScript(),\n * since there is no script tag added into the dom. the script is only evaluated in global space.\n * http://api.jquery.com/jQuery.getScript/\n *  \n * to fix this odd, you can add a reference in meta ( meta[name=srcipt][content=url] )\n * when you load the script\n */\nvar scriptFilename = 'jquery.plugins.template.js'; // don't forget to set the filename \nvar scriptUrl = (function() {\n    if (document.currentScript) { // support defer &amp; async (mozilla only)\n        return document.currentScript.src;\n    } else {\n        var ls,s;\n        var getSrc = function (ls, attr) {\n            var i, l = ls.length, nf, s;\n            for (i = 0; i &lt; l; i++) {\n                s = null;\n                if (ls[i].getAttribute.length !== undefined) { \n                    s = ls[i].getAttribute(attr, 2);                    \n                }               \n                if (!s) continue; // tag with no src\n                nf = s;\n                nf = nf.split('?')[0].split('/').pop(); // get script filename\n                if (nf === scriptFilename) {\n                    return s;\n                }\n            }\n        };          \n        ls = document.getElementsByTagName('script');\n        s = getSrc(ls, 'src');\n        if ( !s ) { // search reference of script loaded by jQuery.getScript() in meta[name=srcipt][content=url]\n            ls = document.getElementsByTagName('meta');             \n            s = getSrc(ls, 'content');\n        }           \n        if ( s ) return s;\n    }\n    return '';\n})();\n\nvar scriptPath =  scriptUrl.substring(0, scriptUrl.lastIndexOf('/'))+\"/\";\n</code></pre>\n\n<p>a jquery plugin template with it:\n<a href=\"https://github.com/mkdgs/mkdgs-snippet/blob/master/javascript/jquery.plugins.template.js\" rel=\"nofollow\">https://github.com/mkdgs/mkdgs-snippet/blob/master/javascript/jquery.plugins.template.js</a></p>\n\n<p>note: this will not work with local script loaded by jQuery.getScript(), since there is no script tag added into the dom. the script is only evaluated in global space. \n<a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"nofollow\">http://api.jquery.com/jQuery.getScript/</a></p>\n\n<p>to fix it you can do something like:</p>\n\n<pre><code>function loadScript(url,callback) {     \n\n    if ( $('[src=\"'+url+'\"]').length ) return true; // is already loaded    \n\n    // make a reference of the loaded script\n    if ( $('meta[content=\"'+url+'\"]', $(\"head\")).length ) return true; // is already loaded \n    var meta = document.createElement('meta');\n    meta.content = url;\n    meta.name = 'script';\n    $(\"head\").append(meta);\n\n    return $.ajax({\n          cache: true,\n          url: u,\n          dataType: 'script',\n          async: false,\n          success : function (script) {                     \n                try { \n                    if ( typeof callback == 'function' ) callback();    \n                } catch (error) { \n                    //console.log(error);\n                }\n          }\n     });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For recent browsers, you can use document.currentScript to get this information.</p>\n\n<pre><code>var mySource = document.currentScript.src;\n</code></pre>\n\n<p>The upside is that it's more reliable for scripts that are loaded asynchronously. The downside is that it's not, as best I know, universally supported. It should work on Chrome >= 29, FireFox >= 4, Opera >= 16. Like many useful things, it doesn't seem to work in IE.</p>\n\n<p>When I need to get a script path, I check to see if document.currentScript is defined, and, if not, use the method described in the accepted answer.</p>\n\n<pre><code>if (document.currentScript) {\n    mySource = document.currentScript.src;\n} else {\n    // code omitted for brevity\n}\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript\">https://developer.mozilla.org/en-US/docs/Web/API/document.currentScript</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>Is there a simple and reliable way to determine the URL of the currently-executing JavaScript file (inside a web page)?</p>\n\n<p>My only thought on this is to scan the DOM for all the script <code>src</code> attributes to find how the current file was referenced and then figure out the absolute URL by applying it to <code>document.location</code>.  Anyone have other ideas, is there some super-easy method I completely overlooked?</p>\n\n<p>UPDATE: Script elements accessed via the DOM already have a <code>src</code> property which contains the full URL.  I don't know how ubiquitous/standard that is, but alternatively you can use <code>getAttribute(\"src\")</code> which will return whatever raw attribute value is in the [X]HTML.</p>\n",
            "last_activity_date": 1398712837,
            "question_id": 984510,
            "score": 22,
            "tags": [
                "javascript",
                "dom",
                "absolute-path",
                "src"
            ],
            "title": "What is my script src URL?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>There are 6 language types in JavaScript:</p>\n\n<ul>\n<li>5 primitive types: <em>String</em>, <em>Number</em>, <em>Boolean</em>, <em>Null</em>, <em>Undefined</em></li>\n<li>1 non-primitive type: <em>Object</em></li>\n</ul>\n\n<p>Values of the primitive types are called primitive values and they cannot have properties.<br>\nValues of the <em>Object</em> non-primitive type are called objects an they can have properties. </p>\n\n<p>When you try to assign a property named <code>'bar'</code> to a variable <code>foo</code>, like so:</p>\n\n<pre><code>foo.bar = 'abc';\n</code></pre>\n\n<p>then the result will depend on the type of the value of <code>foo</code>:</p>\n\n<p><strong>(a)</strong> if the value of <code>foo</code> is of the type <em>Undefined</em> or <em>Null</em>, then an error will be thrown,  </p>\n\n<p><strong>(b)</strong> if the value of <code>foo</code> is of the type <em>Object</em>, then a named property <code>'bar'</code> will be defined on the object <code>foo</code> (if necessary), and its value will be set to <code>'abc'</code>,  </p>\n\n<p><strong>(c)</strong> if the value of <code>foo</code> is of the type <em>Number</em>, <em>String</em> or <em>Boolean</em>, then the variable <code>foo</code> will not be changed in any way. In this case, the above assignment operation will be a <a href=\"http://en.wikipedia.org/wiki/NOP\">noop</a>.</p>\n\n<p>So, as you can see, assigning properties to variables only makes sense if those variables are objects. If that is not the case, then the assignment will either do nothing at all, or even throw an error.</p>\n\n<hr>\n\n<p>In your case, the variable <code>test</code> contains a value of the type <em>String</em>, so this: </p>\n\n<pre><code>test.test = \"test inner\";\n</code></pre>\n\n<p>does nothing at all.</p>\n\n<hr>\n\n<p>However, since ES5 introduced accessor properties, there is an exception to what I've said above. Accessor properties allow us to define functions which are invoked whenever the property is either retrieved or set.</p>\n\n<p>For instance:</p>\n\n<pre><code>var str = '';\nstr.prop;\n</code></pre>\n\n<p>Here <code>str</code> is a variable holding a <em>String</em> value. Therefore, accessing a property of that variable should be a no-op (<code>str.prop</code> merely returns <code>undefined</code>). This is true with one exception: if <code>String.prototype</code> contains a accessor property <code>'prop'</code> with a defined getter, then that getter will be invoked.</p>\n\n<p>So, if this is defined:</p>\n\n<pre><code>Object.defineProperty( String.prototype, 'prop', {\n    get: function () {\n        // this function is the getter\n    }\n}); \n</code></pre>\n\n<p>then this</p>\n\n<pre><code>str.prop;\n</code></pre>\n\n<p>will invoke that getter function.</p>\n\n<p><strong>Live demo:</strong> <a href=\"http://jsfiddle.net/fmNgu/\">http://jsfiddle.net/fmNgu/</a></p>\n\n<p>However, I don't think that adding accessor properties to the built-in prototypes would be a good practice.</p>\n",
                    "is_accepted": true,
                    "score": 44
                },
                {
                    "body": "<p>If you use a String object you can add properties:</p>\n\n<pre><code>var test = new String(\"test\");\ntest.test = \"test inner\";\nconsole.log(test.toString()); // prints out \"test\"\nconsole.log(test.test); // prints out \"test inner\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I inherited some javascript code another developer wrote. He didn't like the grid component we used throughout the project, so he decided to write his own. The grid he wrote can't sort dates, because it can only bind to strings / numbers. He converts all dates to strings before using them. I looked at the string formatting of date function he wrote, and figured I could just add a date property to the string with the original value, and then when sorting see if the string has a date property and sort based on that. However, it seems like you can't add properties to strings in javascript. I wasn't aware there were certain types you can't add properties to. For example:</p>\n\n<pre><code>&lt;html&gt;\n&lt;script&gt;\nvar test = \"test\";\ntest.test = \"test inner\";\nconsole.log(test);\nconsole.log(test.test);\n&lt;/script&gt;\n</code></pre>\n\n<p>test.test will be undefined. Weird. My question is why this code doesn't work? And also, if you can think of any workarounds for sorting dates on that grid (besides actually binding to date objects instead of strings, which would be a pain to fix,) that would be really helpful.</p>\n",
            "last_activity_date": 1330368692,
            "question_id": 5201138,
            "score": 21,
            "tags": [
                "javascript"
            ],
            "title": "Why can&#39;t I add properties to a string object in javascript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You could do it with jquery.  Put this code in <code>index.html</code></p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;script src=\"//code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;script&gt; \n$(function(){\n  $(\"#header\").load(\"header.html\"); \n  $(\"#footer\").load(\"footer.html\"); \n});\n&lt;/script&gt; \n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"header\"&gt;&lt;/div&gt;\n&lt;!--Remaining section--&gt;\n&lt;div id=\"footer\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And put this code in <code>header.html</code> and <code>footer.html</code> at the same location as the index.html</p>\n\n<pre><code>&lt;a href=\"http://www.google.com\"&gt;click here for google&lt;/a&gt;\n</code></pre>\n\n<p>Then visit the index.html, you should be able to click the link tags.</p>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<p>Try this,</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;script src=\"//code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"header\"&gt;&lt;/div&gt;&lt;br /&gt;\n&lt;div id=\"content\"&gt;\nMain Content\n&lt;/div&gt;&lt;br /&gt;\n&lt;div id=\"footer\"&gt;&lt;/div&gt;\n&lt;script&gt; \n  $(\"#header\").load(\"header.html\"); \n  $(\"#footer\").load(\"footer.html\"); \n&lt;/script&gt; \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You can find demo <a href=\"http://phpsmashcode.com/tips-and-tricks/include-common-files-in-html\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I tried this:\nCreate a file <strong>header.html</strong> like</p>\n\n<pre><code>&lt;!-- Meta --&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;!-- JS --&gt;\n&lt;script type=\"text/javascript\" src=\"js/lib/jquery-1.11.1.min.js\" &gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"js/lib/angular.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"js/lib/angular-resource.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"js/lib/angular-route.min.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"css/bootstrap.min.css\"&gt;\n\n&lt;title&gt;Your application&lt;/title&gt;\n</code></pre>\n\n<p>Now include <strong>header.html</strong> in your HTML pages like: </p>\n\n<pre><code>&lt;head&gt;\n   &lt;script type=\"text/javascript\" src=\"js/lib/jquery-1.11.1.min.js\" &gt;&lt;/script&gt;\n   &lt;script&gt; \n     $(function(){ $(\"head\").load(\"header.html\") });\n   &lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>Works perfectly fine.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Must you use html file structure?  Have you considered using PHP instead so that you can use simple PHP include object?</p>\n\n<p>If you convert the file names of your .html pages to .php - then at the top of each of your .php pages you can use one line of code to include the content from your header.php </p>\n\n<pre><code>&lt;?php include('header.php'); ?&gt;\n</code></pre>\n\n<p>Do the same in the footer of each page to include the content from your footer.php file</p>\n\n<pre><code>&lt;?php include('footer.php'); ?&gt;\n</code></pre>\n\n<p>No JavaScript / Jquery or additional included files required.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I want to create common header and footer pages that are included on several html pages. </p>\n\n<p>I'd like to use javascript. Is there a way to do this using only html and JavaScript?</p>\n\n<p>I want to load a header and footer page within another html page.</p>\n",
            "last_activity_date": 1419392830,
            "question_id": 18712338,
            "score": 17,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "css"
            ],
            "title": "Make header and footer files to include multiple html pages"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You're calling the function immediately and scheduling it's return value.</p>\n\n<p>Use:</p>\n\n<pre><code>setTimeout(testFunction, 2000);\n                       ^\n</code></pre>\n\n<p>Notice: not parens.</p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p>Remove the parenthesis after the testfunction name:</p>\n\n<pre><code>setTimeout(testfunction, 2000);\n</code></pre>\n\n<p>The reason is that the first argument to setTimeout should be a function <em>reference</em>, not the return value of the function. In your code, <code>testfunction</code> is called immediately and the return value is sent to setTimeout.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Remove the parenthesis</p>\n\n<pre><code>setTimeout(testfunction(), 2000);\n</code></pre>\n\n<p>If you want to send parameters to the function, you will have to call an anonimous function which will then call your desired function.</p>\n\n<pre><code>setTimeout(function() {\n\n    testfunction('hello');\n\n}, 2000);\n</code></pre>\n\n<p><strong>Edit</strong></p>\n\n<p>Someone suggested to sen a string as the first parameter of setTimeout. I would suggest not to follow this and never send a string as a setTimeout first parameter, cause the eval function will be used. This is bad practice and should be avoided if possible.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Well you might have got the answer but I am explaining the cause and solution.  There are two ways in which you can call a function after required amount of time.<br><br>\n1. setTimeout(\"FUNC_NAME ()', TIME_IN_MS);<br>\n   Here FUNC_NAME inside double quotes is the original function you want to call after TIME_IN_MS milliseconds.  This is because if you do not put the quotes then while java script is getting interpreted the function would be immediately executed and your purpose would get defeated.  To let interpreter skip the statement we need to put quotes here.<br>\n2. setTimeout(function () {FUNC_NAME ()}, TIME_IN_MS);<br>\n   Here anonymous function is created that tells interpreter to execute if after certain time instead of evaluating time.</p>\n\n<p>Thanks\nshaILU  </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to write a simple code with a setTimeout and the setTimeout just won't wait the time it's supposes to and the code execute immediately.\nwhat am i doing wrong?</p>\n\n<pre><code> $(\"#btn1\").click(function () {\n    if (\"something\") {\n        $(\"#div1\").slideUp();\n        setTimeout(testfunction(), 2000);\n    }\n }\n</code></pre>\n",
            "last_activity_date": 1364468523,
            "question_id": 7137401,
            "score": 17,
            "tags": [
                "javascript"
            ],
            "title": "Why is the method executed immediately when I use setTimeout?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You can't use <code>document.write</code> once the document has completed loading. If you do, the browser will open a new document that replaces the current.</p>\n\n<p>Use the <code>innerHTML</code> property to put HTML code inside an element:</p>\n\n<pre><code>function gen_output(ad_content){\n  document.getElementById('mb_ad').innerHTML = ad_content;\n}\n</code></pre>\n\n<p>Put the element before the script, so that you are sure that it exists when the callback function is called:</p>\n\n<pre><code>i am text before\n&lt;div id=\"mb_ad\"&gt;&lt;/div&gt;\ni am text after\n&lt;script type=\"text/javascript\" src=\"mb.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>It doesn't matter much where you place the script, as nothing will be written to the document where it is.</p>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<pre><code>var div = document.createElement('div');\ndiv.id = 'mb_ad';\ndiv.innerHTML = ad_content;</code></pre>\n\n<p>Now, you can append this node wherever you want it to be.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>in case you cant control the remote script you might be able to write something like so:</p>\n\n<pre><code>&lt;script&gt;\nvar tmp = document.write;\n\ndocument.write = function () {\n  document.getElementById('someId').innerHTML = [].concat.apply([], arguments).join('');\n};\n&lt;/script&gt;\n&lt;script .....&gt;\ndocument.write = tmp;\n</code></pre>\n\n<p>Well it is a nasty hack but it seems to work...</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>you can use <code>&lt;script&gt;document.body.innerHTML+=\"//Your HTML Code Here\";&lt;/script&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I am creating a simple ajax call that retrieves the content of a specified url and writes it to the page.  The problem I am having is that it replaces the entire body contents with this information</p>\n\n<p>here is the JS:</p>\n\n<pre><code>(function(){\n    var mb = window.mb = {};\n\n    function get_ad(url, parameters){\n        var result = \"\";\n        var http_request = false;\n\n        if (window.XMLHttpRequest) { // Mozilla, Safari,...\n            http_request = new XMLHttpRequest();\n            if (http_request.overrideMimeType) {\n                http_request.overrideMimeType('text/html');\n            }\n        } else if (window.ActiveXObject) { // IE\n            var avers = [\"Microsoft.XmlHttp\", \"MSXML2.XmlHttp\", \"MSXML2.XmlHttp.3.0\", \"MSXML2.XmlHttp.4.0\", \"MSXML2.XmlHttp.5.0\"];\n            for (var i = avers.length -1; i &gt;= 0; i--) {\n                try {\n                    http_request = new ActiveXObject(avers[i]);\n                    if (http_request){\n                        break;  \n                    }\n                } catch(e) {}\n            }\n        }\n        if (!http_request) {\n            alert('Cannot create XMLHTTP instance');\n            return false;\n        }\n\n        http_request.onreadystatechange = function(){\n                                              if (http_request.readyState == 4) {\n                                                 if (http_request.status == 200) {\n                                                    gen_output(http_request.responseText);\n                                                 } else {\n                                                    alert('Error');\n                                                 }\n                                              }\n                                           }\n\n        http_request.open('GET', url + parameters, true);\n        http_request.send(null);\n    }\n\n    function gen_output(ad_content){\n        document.write(\"&lt;div id=\\\"mb_ad\\\"&gt;\");\n        document.write(ad_content);\n        document.write(\"&lt;/div&gt;\");\n    }\n\n    get_ad(\"http://localhost/test/test.html\", \"\");\n})();\n</code></pre>\n\n<p>and here is the html:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n&lt;title&gt;Untitled Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    i am text before &lt;br/&gt;\n    &lt;script type=\"text/javascript\" src=\"mb.js\"&gt;&lt;/script&gt;\n    &lt;br /&gt;\n    i am text after \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>using firebug to inspect, i do not see the text before or the text after, just the <code>&lt;div id=\"mb_ad\"&gt;</code> and the content from the test.html page.  If i remove the ajax call and just do 3 <code>document.writes</code> the text before and the text after will display properly.  jQuery is not an option, I have to do this without the help of a large library as size and speed are of the essence.</p>\n",
            "last_activity_date": 1390938114,
            "question_id": 2360076,
            "score": 17,
            "tags": [
                "javascript",
                "ajax"
            ],
            "title": "JavaScript Document.Write Replaces All Body Content When Using AJAX"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Facelets is a XML based view technology which uses XHTML+XML to generate HTML output. XML has five special characters which has special treatment by the XML parser: </p>\n\n<ul>\n<li><code>&lt;</code> the start of a tag.</li>\n<li><code>&gt;</code> the end of a tag.</li>\n<li><code>\"</code> the start and end of an attribute value.</li>\n<li><code>'</code> the alternative start and end of an attribute value.</li>\n<li><code>&amp;</code> the start of an entity (which ends with <code>;</code>).</li>\n</ul>\n\n<p>In case of <code>&lt;</code>, the XML parser is implicitly looking for the tag name and the end tag <code>&gt;</code>. However, in your particular case, you was using <code>&lt;</code> as a JavaScript operator, not as an XML entity. This totally explains the XML parsing error you got:</p>\n\n<blockquote>\n  <p>The content of elements must consist of well-formed character data or markup.</p>\n</blockquote>\n\n<p>In essence, you're writing JavaScript code in the wrong place, a XML document instead of a JS file, so you should be escaping all XML special characters accordingly. The <code>&lt;</code> must be escaped as <code>&amp;lt;</code>.</p>\n\n<p>So, essentially, the</p>\n\n<pre><code>for (var i = 0; i &lt; length; i++) {\n</code></pre>\n\n<p>must become</p>\n\n<pre><code>for (var i = 0; i &amp;lt; length; i++) {\n</code></pre>\n\n<p>to make it XML-valid.</p>\n\n<p>However, this makes the JavaScript code harder to read and maintain. As stated in Mozilla Developer Network's excellent document <a href=\"https://developer.mozilla.org/en/docs/Writing_JavaScript_for_XHTML\">Writing JavaScript for XHTML</a>, you should be placing the JavaScript code in a character data (CDATA) block. Thus, in JSF terms, that would be:</p>\n\n<pre><code>&lt;h:outputScript&gt;\n    &lt;![CDATA[\n        // ...\n    ]]&gt;\n&lt;/h:outputScript&gt;\n</code></pre>\n\n<p>The XML parser will interpret the block's contents as \"plain vanilla\" character data and not as XML and hence interpret the XML special characters \"as-is\".</p>\n\n<p>But, much better is to just put the JS code in its own JS file which you include by <code>&lt;script src&gt;</code>, or in JSF terms, the <code>&lt;h:outputScript&gt;</code>. </p>\n\n<pre><code>&lt;h:outputScript name=\"functions.js\" target=\"head\" /&gt;\n</code></pre>\n\n<p>This way you don't need to worry about XML-special characters in your JS code.</p>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/16303779/the-entity-name-must-immediately-follow-the-in-the-entity-reference/16328808#16328808\">The entity name must immediately follow the &#39;&amp;&#39; in the entity reference</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2935759/is-it-possible-to-use-jsffacelets-with-html-4-5\">Is it possible to use JSF+Facelets with HTML 4/5?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/8367421/how-to-reference-resource-in-facelets-template\">How to reference resource in Facelets template?</a></li>\n<li><a href=\"https://developer.mozilla.org/en/docs/Writing_JavaScript_for_XHTML\">Writing JavaScript for XHTML</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>I ran across this post today as I was running into the same issue and had the same problem of the javascript not running with the CDATA tags listed above.  I corrected the CDATA tags to look like:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[ \n\nyour javascript code here\n\n//]]&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>Then everything worked perfectly!</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Sometimes you will need this :</p>\n\n<pre><code> /*&lt;![CDATA[*/\n /*]]&gt;*/\n</code></pre>\n\n<p>and not only this :</p>\n\n<pre><code> &lt;![CDATA[\n ]]&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>As an extension of this <a href=\"http://stackoverflow.com/questions/4304132/hcommandbutton-multiple-actions-download-file-and-render-ajax-table\">question</a>, I'm trying to insert Javascript to a <code>&lt;h:commandButton /&gt;</code>'s <code>onclick</code> property as <code>action</code> is already rendering an ajax table.</p>\n\n<p>What I want to do:\nGet the selected items in a list box and turn them into parameters to be used in a JSF <code>FileServlet</code>. i.e. <code>para2=value1&amp;param=value2&amp;param=value3</code></p>\n\n<p>Here's what I have:</p>\n\n<pre><code>&lt;script type =\"text/javascript\"&gt;\nfunction myScript() {\n    var box = document.getElementbyId('myForm:box');\n    var length = box.options.length;\n    var paramstring = \"\";\n    for (var i = 0; i &lt; length; i++) {\n        if (i != (length - 1) {\n            if (box.options[i].selected) {\n                paramstring = paramstring + \"param=\" + box.options[i].value + \"&amp;amp;\";\n            }\n        } else {\n            paramstring = paramstring + \"param=\" + box.options[i].value;\n        }\n    }\n    if (document.getElementById('myForm:checkbox').checked) {\n        window.location='fileServlet? + paramstring;\n    }\n}\n&lt;/script&gt;  \n</code></pre>\n\n<p>What I get when page is loaded:\n<code>javax.servlet.ServletException: Error Parsing /page.xhtml: Error Traced[line:15] The content of elements must consist of well-formed character data or markup.</code></p>\n\n<p>What doesn't trigger exception:</p>\n\n<pre><code>&lt;script type =\"text/javascript\"&gt;\nfunction myScript() {\n    var box = document.getElementbyId('myForm:box');\n    var length = box.options.length;\n    var paramstring = \"\";\n\n    if (document.getElementById('myForm:checkbox').checked) {\n        window.location='fileServlet? + paramstring;\n    }\n}\n&lt;/script&gt; \n</code></pre>\n\n<p>As soon as I add in <code>for (var i = 0; i &lt; length; i++)</code> or even <code>for (var i = 0; i &lt; 10; i++)</code> the page wouldn't load. Why does it not like the for loop?</p>\n",
            "last_activity_date": 1400746022,
            "question_id": 4338538,
            "score": 7,
            "tags": [
                "javascript",
                "jsf",
                "jsf-2",
                "xhtml",
                "facelets"
            ],
            "title": "Error parsing XHTML: The content of elements must consist of well-formed character data or markup"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In this case, it's probably because you are using the wrong brackets here:</p>\n\n<pre><code>document.getElementById['calendar'].src = loc;\n</code></pre>\n\n<p>should be</p>\n\n<pre><code>document.getElementById('calendar').src = loc;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>The <code>onselect</code> must be<code>onclick</code>.  This will work for keyboard users.  </p>\n\n<p>I would also recommend adding <code>&lt;label&gt;</code> tags to the text of \"Day\", \"Month\", and \"Year\" to make them easier to click on.  Example code:\n<code><pre>&lt;input id=\"day\" name=\"calendarSelection\" type=\"radio\" onclick=\"go('http://calendar.zoho.com/embed/9a6054c98fd2ad4047021cff76fee38773c34a35234fa42d426b9510864356a68cabcad57cbbb1a0?title=Kevin_Calendar&amp;type=1&amp;l=en&amp;tz=America/Los_Angeles&amp;sh=[0,0]&amp;v=1')\"/&gt;&lt;label for=\"day\"&gt;Day&lt;/label&gt;</pre></code></p>\n\n<p>I would also recommend removing the spaces between the attribute <code>onclick</code> and the value, although it can be parsed by browsers:\n<code><pre>&lt;input name=\"calendarSelection\" type=\"radio\" onclick = \"go('http://calendar.zoho.com/embed/9a6054c98fd2ad4047021cff76fee38773c34a35234fa42d426b9510864356a68cabcad57cbbb1a0?title=Kevin_Calendar&amp;type=1&amp;l=en&amp;tz=America/Los_Angeles&amp;sh=[0,0]&amp;v=1')\"/&gt;Day</pre></code></p>\n\n<p>Should be:\n<code><pre>&lt;input name=\"calendarSelection\" type=\"radio\" onclick=\"go('http://calendar.zoho.com/embed/9a6054c98fd2ad4047021cff76fee38773c34a35234fa42d426b9510864356a68cabcad57cbbb1a0?title=Kevin_Calendar&amp;type=1&amp;l=en&amp;tz=America/Los_Angeles&amp;sh=[0,0]&amp;v=1')\"/&gt;Day</pre></code></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Maybe this can be helpful... It's plain html - no javascript:</p>\n\n<pre><code>&lt;p&gt;Click on link bellow to change iframe content:&lt;/p&gt;\n&lt;a href=\"http://www.bing.com\" target=\"search_iframe\"&gt;Bing&lt;/a&gt; -\n&lt;a href=\"http://en.wikipedia.net\" target=\"search_iframe\"&gt;Wikipedia&lt;/a&gt; -\n&lt;a href=\"http://google.com\" target=\"search_iframe\"&gt;Google&lt;/a&gt; (not allowed in inframe)\n\n&lt;iframe src=\"http://en.wikipedia.net\" width=\"100%\" height=\"100%\" name=\"search_iframe\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>By the way some sites do not allow you to open them in iframe (security reasons - clickjacking)</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's the jQuery way to do it:</p>\n\n<pre><code>$('#calendar').attr('src', loc);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This should also work, although the 'src' will remain intact:</p>\n\n<pre><code>document.getElementById(\"myIFrame\").contentWindow.document.location.href=\"http://myLink.com\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am trying to change an iframe src when someone clicks a radio button. For some reason my code is not working correctly and I am having trouble figuring out why. Here is what I have:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n\n&lt;head&gt;\n&lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\" /&gt;\n&lt;title&gt;Untitled 1&lt;/title&gt;\n\n&lt;SCRIPT LANGUAGE=\"JavaScript\"&gt;\nfunction go(loc){\n    document.getElementById('calendar').src = loc;\n}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;iframe id=\"calendar\" src=\"about:blank\" width=\"1000\" height=\"450\" frameborder=\"0\" scrolling=\"no\"&gt;&lt;/iframe&gt;\n\n&lt;form method=\"post\"&gt;\n    &lt;input name=\"calendarSelection\" type=\"radio\" onselect = \"go('http://calendar.zoho.com/embed/9a6054c98fd2ad4047021cff76fee38773c34a35234fa42d426b9510864356a68cabcad57cbbb1a0?title=Kevin_Calendar&amp;type=1&amp;l=en&amp;tz=America/Los_Angeles&amp;sh=[0,0]&amp;v=1')\"/&gt;Day\n    &lt;input name=\"calendarSelection\" type=\"radio\" onselect = \"go('http://calendar.zoho.com/embed/9a6054c98fd2ad4047021cff76fee38773c34a35234fa42d426b9510864356a68cabcad57cbbb1a0?title=Kevin_Calendar&amp;type=1&amp;l=en&amp;tz=America/Los_Angeles&amp;sh=[0,0]&amp;v=1')\" /&gt;Week\n    &lt;input name=\"calendarSelection\" type=\"radio\" onselect = \"go('http://calendar.zoho.com/embed/9a6054c98fd2ad4047021cff76fee38773c34a35234fa42d426b9510864356a68cabcad57cbbb1a0?title=Kevin_Calendar&amp;type=1&amp;l=en&amp;tz=America/Los_Angeles&amp;sh=[0,0]&amp;v=1')\"/&gt;Month\n    &lt;/form&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1413245610,
            "question_id": 3730159,
            "score": 24,
            "tags": [
                "javascript",
                "iframe",
                "src"
            ],
            "title": "Changing iframe src with Javascript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You need to escape it, else it will be a part of the HTML.</p>\n\n<pre><code>var test = 'what the hell... \\&lt;\\/script\\&gt; \\&lt;h1\\&gt;why?!?!?!\\&lt;\\/h1\\&gt;';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>What happens?</p>\n\n<p>The browser HTML parser will see the <code>&lt;/script&gt;</code> within the string and it will interpret it as the end of the script element.</p>\n\n<p>Look at the syntax coloring of this example:</p>\n\n<pre><code>&lt;script&gt;\nvar test = 'foo... &lt;/script&gt; bar.....';\n&lt;/script&gt;\n</code></pre>\n\n<p>Note that the word <em>bar</em> is being treated as text content outside of the script element...</p>\n\n<p>A commonly used technique is to use the concatenation operator:</p>\n\n<pre><code>var test = '...... &lt;/scr'+'ipt&gt;......';\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 34
                }
            ],
            "body": "<p>I am encountering an issue where having a ending script tag inside a quoted string in JavaScript, and it is killing the script.  I assume this is not expected behaviour.  An example of this can be seen here: <a href=\"http://jsbin.com/oqepe/edit\">http://jsbin.com/oqepe/edit</a></p>\n\n<p>My test case browser for the interested: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1.4) Gecko/20091028 Ubuntu/9.10 (karmic) Firefox/3.5.4.</p>\n",
            "last_activity_date": 1259667319,
            "question_id": 1659749,
            "score": 19,
            "tags": [
                "javascript"
            ],
            "title": "Script tag in JavaScript string"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>There are a couple of problems:</p>\n\n<ol>\n<li>IE is indeed confusing <code>id=\"\"</code> with <code>name=\"\"</code></li>\n<li><code>name=\"\"</code> isn't allowed on <code>&lt;span&gt;</code></li>\n</ol>\n\n<p>To fix, I suggest:</p>\n\n<ol>\n<li>Change all the <code>name=\"\"</code> to <code>class=\"\"</code></li>\n<li>Change your code like this:  </li>\n</ol>\n\n<p>-</p>\n\n<pre><code>var changes = document.getElementById('text').getElementsByTagName('span');\nfor (var c=0; c&lt;changes.length; c++) {\n var ch = changes[c];\n\n if (ch.className != from)\ncontinue;\n\n var current = new String(ch.innerHTML);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>getElementsByName is supported in IE, but there are bugs. In particular it returns elements whose \u2018id\u2019 match the given value, as well as \u2018name\u2019. Can't tell if that's the problem you're having without a bit more context, code and actual error messages though.</p>\n\n<p>In general, getElementsByName is probably best avoided, because the \u2018name\u2019 attribute in HTML has several overlapping purposes which can confuse. Using getElementById is much more reliable. When specifically working with form fields, you can more reliably use form.elements[name] to retrieve the fields you're looking for.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In case you don't know why this isn't working in IE, here is <a href=\"http://msdn.microsoft.com/en-us/library/ms536438(VS.85).aspx\">the MSDN documentation on that function</a>:</p>\n\n<blockquote>\n  <p>When you use the getElementsByName method, all elements in the document that have the specified NAME attribute or ID attribute value are returned.</p>\n  \n  <p>Elements that support both the NAME attribute and the ID attribute are included in the collection returned by the getElementsByName method, but elements with a NAME expando are not included in the collection; therefore, this method cannot be used to retrieve custom tags by name.</p>\n</blockquote>\n\n<p>Firefox allows <a href=\"http://msdn.microsoft.com/en-us/library/ms536438(VS.85).aspx\"><code>getElementsByName()</code></a> to retrieve elements that use a NAME expando, which is why it works. Whether or not that is a Good Thing\u2122 may be up for debate, but that is the reality of it.</p>\n\n<p>So, one option is to use the <a href=\"http://msdn.microsoft.com/en-us/library/ms536429(VS.85).aspx\"><code>getAttribute()</code></a> DOM method to ask for the NAME attribute and then test the value to see if it is what you want, and if so, add it to an array. This would require, however, that you iterate over all of the nodes in the page or at least within a subsection, which wouldn't be the most efficient. You could constrain that list beforehand by using something like <a href=\"http://msdn.microsoft.com/en-us/library/ms536439(VS.85).aspx\"><code>getElementsByTagName()</code></a> perhaps.</p>\n\n<p>Another way to do this, if you are in control of the HTML of the page, is to give all of the elements of interest an Id that varies only by number, e.g.:</p>\n\n<pre><code>&lt;div id=\"Change0\"&gt;...&lt;/div&gt;\n&lt;div id=\"Change1\"&gt;...&lt;/div&gt;\n&lt;div id=\"Change2\"&gt;...&lt;/div&gt;\n&lt;div id=\"Change3\"&gt;...&lt;/div&gt;\n</code></pre>\n\n<p>And then have JavaScript like this:</p>\n\n<pre><code>// assumes consecutive numbering, starting at 0\nfunction getElementsByModifiedId(baseIdentifier) {\n    var allWantedElements = [];\n    var idMod = 0;\n    while(document.getElementById(baseIdentifier + idMod)) { // will stop when it can't find any more\n        allWantedElements.push(document.getElementById(baseIdentifier + idMod++));\n    }\n    return allWantedElements;\n}\n\n// call it like so:\nvar changes = getElementsByModifiedId(\"Change\");\n</code></pre>\n\n<p>That is a hack, of course, but it would do the job you need and not be too inefficient compare to some other hacks.</p>\n\n<p>If you are using a JavaScript framework/toolkit of some kind, you options are much better, but I don't have time to get into those specifics unless you indicate you are using one. Personally, I don't know how people live without one, they save so much time, effort and frustration that you can't afford <em>not</em> to use one.</p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>It's not very common to find elements using the NAME property. I would recommend switching to the ID property.</p>\n\n<p>You can however find elements with a specific name using jQuery:</p>\n\n<pre><code> $(\"*[name='whatevernameYouWant']\");\n</code></pre>\n\n<p>this will return all elements with the given name.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Just another DOM bug in IE:</p>\n\n<p>Bug 1: <a href=\"http://webbugtrack.blogspot.com/2007/08/bug-411-getelementsbyname-doesnt-work.html\" rel=\"nofollow\">http://webbugtrack.blogspot.com/2007/08/bug-411-getelementsbyname-doesnt-work.html</a></p>\n\n<p>Bug 2: <a href=\"http://webbugtrack.blogspot.com/2008/04/bug-403-another-getelementsbyname-bugs.html\" rel=\"nofollow\">http://webbugtrack.blogspot.com/2008/04/bug-403-another-getelementsbyname-bugs.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've had success using a wrapper to return an array of the elements.  Works in IE 6, and 7 too.  Keep in mind it's not 100% the exact same thing as document.getElementsByName, since it's not a NodeList.  But for what I need it for, which is to just run a for loop on an array of elements to do simple things like setting .disabled = true, it works well enough.</p>\n\n<p>Even though this function still uses getElementsByName, it works if used this way.  See for yourself.</p>\n\n<pre><code>function getElementsByNameWrapper(name) {\n  a = new Array();\n\n  for (var i = 0; i &lt; document.getElementsByName(name).length; ++i) {\n    a.push(document.getElementsByName(name)[i]);\n  }\n\n  return a;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Workaround</p>\n\n<pre><code>                var listOfElements = document.getElementsByName('aName'); // Replace aName with the name you're looking for\n            // IE hack, because it doesn't properly support getElementsByName\n            if (listOfElements.length == 0) { // If IE, which hasn't returned any elements\n                var listOfElements = [];\n                var spanList = document.getElementsByTagName('*'); // If all the elements are the same type of tag, enter it here (e.g.: SPAN)\n                for(var i = 0; i &lt; spanList.length; i++) {\n                    if(spanList[i].getAttribute('name') == 'aName') {\n                        listOfElements.push(spanList[i]);\n                    }\n                }\n            }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have some code doing this :</p>\n\n<pre><code> var changes = document.getElementsByName(from);\n for (var c=0; c&lt;changes.length; c++) {\n   var ch = changes[c];\n   var current = new String(ch.innerHTML);\n   etc.\n }\n</code></pre>\n\n<p>This works fine in FF and Chrome but not in IE7. Presumably because getElementsByName isn't working in IE. What's the best workaround?</p>\n",
            "last_activity_date": 1383763530,
            "question_id": 278719,
            "score": 17,
            "tags": [
                "javascript",
                "dom",
                "internet-explorer-7"
            ],
            "title": "getElementsByName in IE7"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p><strong>Short answer:</strong> You can't.</p>\n\n<p><strong>Long answer:</strong></p>\n\n<p>All you have is the information in the HTTP User-Agent header, which usually contains the OS name and version.</p>\n\n<p>Usually, browsers running on Mac OS and Linux send enough information to identify the exact OS. For example, here's my User-Agent header:</p>\n\n<blockquote>\n  <p>Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.7) Gecko/2009030423 Ubuntu/8.10 (intrepid) Firefox/3.0.7</p>\n</blockquote>\n\n<p>You can see that I'm running Ubuntu 8.10 Intrepid Ibex.</p>\n\n<p>And here's what Firefox and Safari 4 Beta report on my MacBook Pro:</p>\n\n<blockquote>\n  <p>Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.7) Gecko/2009021906 Firefox/3.0.7</p>\n  \n  <p>Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_6; en-us) AppleWebKit/528.16 (KHTML, like Gecko) Version/4.0 Safari/528.16</p>\n</blockquote>\n\n<p>Windows browsers, on the other hand, usually only report the OS version and not the specific package (Pro, Business, etc.):</p>\n\n<blockquote>\n  <p>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:x.x.x) Gecko/20041107 Firefox/x.x  </p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>I don't think you'll be able to differentiate different versions of Vista, but you should be able to get the OS from the <a href=\"http://www.w3schools.com/htmldom/dom%5Fobj%5Fnavigator.asp\" rel=\"nofollow\">navigator</a> object's platform property.  You'll probably have to parse it, though, or differentiate based on it's contents.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n   alert( navigator.platform );\n&lt;/script&gt;\n</code></pre>\n\n<p>See <a href=\"http://www.w3schools.com\" rel=\"nofollow\">www.w3schools.com</a> tutorials for an <a href=\"http://www.w3schools.com/js/tryit.asp?filename=try%5Fdom%5Fnavigator\" rel=\"nofollow\">example</a> showing how to get all the navigator's properties.</p>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>To get the exact version, you may be able to develop an ActiveX control (Windows only) or Java Applet and use the java.lang.System object to view the current system properties.  You may be able to get enough information from the browser for non-Windows systems and use the control only for Windows systems.  I haven't tried this, so you'd need to experiment to see if it would work.  I have to believe that Microsoft's ActiveX control for Microsoft Update is able to detect the exact system version and installed software for it to work.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You should really try to avoid doing something like that unless it's absolutely necessary for the functionality of the web application.</p>\n\n<p>Be aware that:</p>\n\n<p>Not all requests can come from a client running on windows. </p>\n\n<p>Not all requests can come from a client that supports JavaScript.</p>\n\n<p>The user-agent header may not be present in the request.</p>\n\n<p>What is in the user-agent header may be missleading.</p>\n\n<p>A well designed web application should provide complete content and functionality regardless of what's in the user-agent header of the request or if the client supports javascript or any other clientside extension. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As others have already said, no, not reliably.</p>\n\n<p>That is the reason that for example jquery has switched to a browser-capabilities <em>system</em> (for lack of a better word) instead of a browser-sniffing system for it\u00b4s functionalities.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In Classic ASP and ASP.NET use</p>\n\n<pre><code>Request.ServerVariables(\"HTTP_USER_AGENT\")\n</code></pre>\n\n<p>This works best since it's not interpreted code, this is running on the server.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>After some googling I found this code and it seems to be working ok,(doesn't detect Unix though)</p>\n\n<pre><code>&lt;?php \n$OSList = array\n(\n// Match user agent string with operating systems\n'Windows 3.11' =&gt; 'Win16',\n'Windows 95' =&gt; '(Windows 95)|(Win95)|(Windows_95)',\n'Windows 98' =&gt; '(Windows 98)|(Win98)',\n'Windows 2000' =&gt; '(Windows NT 5.0)|(Windows 2000)',\n'Windows XP' =&gt; '(Windows NT 5.1)|(Windows XP)',\n'Windows Server 2003' =&gt; '(Windows NT 5.2)',\n'Windows Vista' =&gt; '(Windows NT 6.0)',\n'Windows 7' =&gt; '(Windows NT 7.0)',\n'Windows NT 4.0' =&gt; '(Windows NT 4.0)|(WinNT4.0)|(WinNT)|(Windows NT)',\n'Windows ME' =&gt; 'Windows ME',\n'Open BSD' =&gt; 'OpenBSD',\n'Sun OS' =&gt; 'SunOS',\n'Linux' =&gt; '(Linux)|(X11)',\n'Mac OS' =&gt; '(Mac_PowerPC)|(Macintosh)',\n'QNX' =&gt; 'QNX',\n'BeOS' =&gt; 'BeOS',\n'OS/2' =&gt; 'OS/2',\n'Search Bot'=&gt;'(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves/Teoma)|(ia_archiver)'\n);\n// Loop through the array of user agents and matching operating systems\nforeach($OSList as $CurrOS=&gt;$Match)\n{\n// Find a match\nif (eregi($Match, $_SERVER['HTTP_USER_AGENT']))\n{\n// We found the correct match\nbreak;\n}\n}\n// You are using ...\necho \"You are using \".$CurrOS;\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>in the PHP code above is a small \"bug\"... Windows 7 are not version 7.0 but version 6.1!</p>\n\n<p>'Windows 7' => '(Windows NT 6.1)'</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>in CodeIgniter you can find library called \"user_agent\". It will give you all you need really. If you're not using CI, you can still \"extract\" the code for your framework. Hope that helps.\n<a href=\"http://codeigniter.com/user_guide/libraries/user_agent.html\" rel=\"nofollow\">http://codeigniter.com/user_guide/libraries/user_agent.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>// this will help you </p>\n\n<pre><code>$uagent = $_SERVER['HTTP_USER_AGENT'] . \"&lt;br/&gt;\";\n\nfunction os_info($uagent)\n{\n    // the order of this array is important\n    global $uagent;\n    $oses   = array(\n        'Win311' =&gt; 'Win16',\n        'Win95' =&gt; '(Windows 95)|(Win95)|(Windows_95)',\n        'WinME' =&gt; '(Windows 98)|(Win 9x 4.90)|(Windows ME)',\n        'Win98' =&gt; '(Windows 98)|(Win98)',\n        'Win2000' =&gt; '(Windows NT 5.0)|(Windows 2000)',\n        'WinXP' =&gt; '(Windows NT 5.1)|(Windows XP)',\n        'WinServer2003' =&gt; '(Windows NT 5.2)',\n        'WinVista' =&gt; '(Windows NT 6.0)',\n        'Windows 7' =&gt; '(Windows NT 6.1)',\n        'Windows 8' =&gt; '(Windows NT 6.2)',\n        'WinNT' =&gt; '(Windows NT 4.0)|(WinNT4.0)|(WinNT)|(Windows NT)',\n        'OpenBSD' =&gt; 'OpenBSD',\n        'SunOS' =&gt; 'SunOS',\n        'Ubuntu' =&gt; 'Ubuntu',\n        'Android' =&gt; 'Android',\n        'Linux' =&gt; '(Linux)|(X11)',\n        'iPhone' =&gt; 'iPhone',\n        'iPad' =&gt; 'iPad',\n        'MacOS' =&gt; '(Mac_PowerPC)|(Macintosh)',\n        'QNX' =&gt; 'QNX',\n        'BeOS' =&gt; 'BeOS',\n        'OS2' =&gt; 'OS/2',\n        'SearchBot' =&gt; '(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves/Teoma)|(ia_archiver)'\n    );\n    $uagent = strtolower($uagent ? $uagent : $_SERVER['HTTP_USER_AGENT']);\n    foreach ($oses as $os =&gt; $pattern)\n        if (preg_match('/' . $pattern . '/i', $uagent))\n            return $os;\n    return 'Unknown';\n}\necho os_info($uagent);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I've created a jquery function which does this. This way we can track all the OS using <a href=\"http://www.w3schools.com/jsref/prop_nav_useragent.asp\" rel=\"nofollow\">navigator</a>.</p>\n\n<p>Hope someone will get help from this:</p>\n\n<pre><code>function find_os_version() {\n  var ua = navigator.userAgent.toLowerCase();\n  if (ua.indexOf(\"windows nt 5.0\") != -1) {\n    return 'win2k';\n  }\n  if (ua.indexOf(\"windows nt 5.1\") != -1) {\n    return 'winXP';\n  }\n  if (ua.indexOf(\"windows nt 6.0\") != -1) {\n    return 'winVista';\n  }\n  if (ua.indexOf(\"windows nt 6.1\") != -1) {\n    return 'win7';\n  }\n  if (ua.indexOf(\"windows nt 6.2\") != -1) {\n    return 'win8';\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This might be the easiest way:</p>\n\n<p>Download library from <a href=\"http://mobiledetect.net\" rel=\"nofollow\">http://mobiledetect.net</a></p>\n\n<p>Put Mobile_Detect.php in to 'libraries' if using CI or just include it.</p>\n\n<p>Use this code in PHP</p>\n\n<pre><code>$detect = new Mobile_Detect();\n// Get the version() of components.\n$detect-&gt;version('iPad'); // 4.3 (float)\n$detect-&gt;version('iPhone') // 3.1 (float)\n$detect-&gt;version('Android'); // 2.1 (float)\n$detect-&gt;version('Opera Mini'); // 5.0 (float)\n</code></pre>\n\n<p>Find documentation on <a href=\"http://dwij.co.in/mobile-os-detection-in-php-codeigniter\" rel=\"nofollow\">http://dwij.co.in/mobile-os-detection-in-php-codeigniter</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Although the question is very old but i am just answering it:</p>\n\n<p>just try: </p>\n\n<p><code>$this-&gt;agent-&gt;platform()</code></p>\n\n<p>this will give you output as: <code>Linux, Windows, OS X, etc.</code></p>\n\n<p>for more info visit: </p>\n\n<p><a href=\"http://ellislab.com/codeigniter/user-guide/libraries/user_agent.html\" rel=\"nofollow\">http://ellislab.com/codeigniter/user-guide/libraries/user_agent.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I was wondering if there is a way I can detect the exact Operating System version from my browser using PHP/JS/ASP?</p>\n\n<p>I know I can detect the type of OS (Windows XP,Windows Vista,OS X,etc) but I need to detect the exact version: Vista Business, Vista Ultimate, Windows XP Home, Windows XP Pro, etc...</p>\n",
            "last_activity_date": 1393927564,
            "question_id": 647969,
            "score": 14,
            "tags": [
                "php",
                "javascript",
                "browser"
            ],
            "title": "Detect exact OS version from browser"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>There is no easy cross-browser way to style the input type of files. Therefore there exist solution that even use javascript.</p>\n\n<p>Here is a jQuery plugin you can use to style file types in the cross-browser fashion:</p>\n\n<ul>\n<li><a href=\"http://www.appelsiini.net/projects/filestyle\">File Style Plugin for jQuery</a> </li>\n</ul>\n\n<blockquote>\n  <p>Browsers do not let you style file\n  inputs. File Style plugin fixes this\n  problem. It enables you to use image\n  as browse button. You can also style\n  filename field as normal textfield\n  using css. It is written using\n  JavaScript and jQuery.</p>\n</blockquote>\n\n<p><a href=\"http://www.appelsiini.net/projects/filestyle/demo.html\">You can check out the demo here</a></p>\n\n<hr>\n\n<p>As also posted on popular ajaxian.com, you can take a look at this too:</p>\n\n<ul>\n<li><a href=\"http://ajaxian.com/archives/a-cheaky-way-to-style-an-input-typefile\">A Cheaky Way to Style an input type=\u201dfile\u201d</a></li>\n</ul>\n\n<blockquote>\n  <p>Shaun Inman has got a lovely little\n  hack that allows you to style file\n  inputs with CSS and the DOM.</p>\n  \n  <p>These elements are notoriously painful\n  to deal with, and now we have select\n  boxed playing nice on IE, we need\n  something else to fix up :)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>some browsers need File input visible and click the browse button manually, or it will submit nothing to server. so i suggest Saefraz's first solution: File Style Plugin for jQuery </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The CSS way (base code found <a href=\"http://www.quirksmode.org/dom/inputfile.html\">here</a>):</p>\n\n<pre><code>&lt;html&gt;\n    &lt;style type=\"text/css\"&gt;\n        div.fileinputs {\n            position: relative;\n        }\n\n        div.fakefile {\n            position: absolute;\n            top: 0px;\n            left: 0px;\n            z-index: 1;\n        }\n\n        div.fakefile input[type=button] {\n            /* enough width to completely overlap the real hidden file control */\n            cursor: pointer;\n            width: 148px;\n        }\n\n        div.fileinputs input.file {\n            position: relative;\n            text-align: right;\n            -moz-opacity:0 ;\n            filter:alpha(opacity: 0);\n            opacity: 0;\n            z-index: 2;\n        }\n    &lt;/style&gt;\n\n    &lt;div class=\"fileinputs\"&gt;\n        &lt;input type=\"file\" class=\"file\" /&gt;\n\n        &lt;div class=\"fakefile\"&gt;\n            &lt;input type=\"button\" value=\"Select file\" /&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>I wrote this jQuery plugin to make it much simpler to style the file input.  Use CSS and \"fake elements\" to get the results you want.</p>\n\n<p><a href=\"http://jstnjns.com/jquery/file\" rel=\"nofollow\">http://jstnjns.com/jquery/file</a></p>\n\n<p>Hope that helps!</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>&lt;label for=\"file\" style=\"/* style this one, as you want */\"&gt;Upload file&lt;/label&gt;\n&lt;input id=\"file\" name=\"file\" type=\"file\" style=\"display:none;\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/572768/styling-an-input-type-file-button\">Styling an input type=\u201cfile\u201d button</a>  </p>\n</blockquote>\n\n\n\n<p>I was trying to style </p>\n\n<pre><code>&lt;input type=\"file\"&gt;\n</code></pre>\n\n<p>but i have not had much luck. I want to make the textbox disappear and only keep the button. How can I do it?</p>\n",
            "last_activity_date": 1329148685,
            "question_id": 4532733,
            "score": 10,
            "tags": [
                "javascript",
                "css",
                "webforms",
                "input"
            ],
            "title": "Styling &lt;input type=&quot;file&quot;&gt;"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>First, a request. Don't do this before writing the data to the database. Instead, do it before displaying the data to the end-user. This will cut down on all confusion, and will allow you more flexibility in the future.</p>\n\n<p>One example <a href=\"http://snipplr.com/view/2371/regex-regular-expression-to-match-a-url/\">found online</a> follows:</p>\n\n<pre><code>$text = preg_replace('@(https?://([-\\w\\.]+)+(:\\d+)?(/([-\\w/_\\.]*(\\?\\S+)?)?)?)@', '&lt;a href=\"$1\"&gt;$1&lt;/a&gt;', $text);\n</code></pre>\n\n<p>And a much more thorough one from <a href=\"http://daringfireball.net/2009/11/liberal_regex_for_matching_urls\">daringfireball.net</a>:</p>\n\n<pre><code>/**\n * Replace links in text with html links\n *\n * @param  string $text\n * @return string\n */\nfunction auto_link_text($text)\n{\n   $pattern  = '#\\b(([\\w-]+://?|www[.])[^\\s()&lt;&gt;]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))#';\n   $callback = create_function('$matches', '\n       $url       = array_shift($matches);\n       $url_parts = parse_url($url);\n\n       $text = parse_url($url, PHP_URL_HOST) . parse_url($url, PHP_URL_PATH);\n       $text = preg_replace(\"/^www./\", \"\", $text);\n\n       $last = -(strlen(strrchr($text, \"/\"))) + 1;\n       if ($last &lt; 0) {\n           $text = substr($text, 0, $last) . \"&amp;hellip;\";\n       }\n\n       return sprintf(\\'&lt;a rel=\"nowfollow\" href=\"%s\"&gt;%s&lt;/a&gt;\\', $url, $text);\n   ');\n\n   return preg_replace_callback($pattern, $callback, $text);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>Personally, I would mark it up with JS right before displaying, seems more professional and sustainable than editing the user's comment yourself.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I would rather do that in the server side. Javascript has a \"lag\"; it runs only when the entire HTML DOM tree is been loaded and displayed in the webbrowser. Thus it may take a (although short) while before the URL's are recognized and parsed. The client may see the links instantly been replaced while he is still facing the content. This might lead to \"wtf?\" experiences at the client side. This is nowadays too quickly related to advertisting/spam/spyware. You should avoid that as much as possible. Don't use JS to change the content onload, rather do it only during user-controlled events (onclick, onchange, onfocus, etc). Use the server side language to change content prior to save or display.</p>\n\n<p>So, just look for a PHP script which parses the text (or uses regex) to construct fullworthy links based on URL's in plain text. You can find a lot <a href=\"http://google.com/search?q=php+replace+url+with+hyperlink\" rel=\"nofollow\">here</a>. Good luck.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I adapted Jonathan Sampson's regex option so that it is more lenient about what is a domain (doesn't need http(s) to qualify).</p>\n\n<pre><code>function hyperlinksAnchored($text) {\n    return preg_replace('@(http)?(s)?(://)?(([-\\w]+\\.)+([^\\s]+)+[^,.\\s])@', '&lt;a href=\"http$2://$4\"&gt;$1$2$3$4&lt;/a&gt;', $text);\n}\n</code></pre>\n\n<p>Works for these URLs (and successfully leaves out trailing period or comma):</p>\n\n<pre><code>http://www.google.com/\nhttps://www.google.com/.\nwww.google.com\nwww.google.com.\nwww.google.com/test\ngoogle.com\ngoogle.com,\ngoogle.com/test\n123.com/test\nwww.123.com.au\nex-ample.com\nhttp://ex-ample.com\nhttp://ex-ample.com/test-url_chars.php?param1=val1.\nhttp://ex-ample.com/test-url_chars?param1=value1&amp;param2=val+with%20spaces\n</code></pre>\n\n<p>Hope that helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Refining Markd's answer to avoid links on decimals, percentages, numerical dates (10.3.2001), ellipsis and IP addresses:</p>\n\n<pre><code>    function addLinks($text) {\n    return preg_replace('@(http)?(s)?(://)?(([a-zA-Z])([-\\w]+\\.)+([^\\s\\.]+[^\\s]*)+[^,.\\s])@', '&lt;a target=\"ref\" href=\"http$2://$4\"&gt;$1$2$3$4&lt;/a&gt;', $text);\n}\n</code></pre>\n\n<p>Works for:</p>\n\n<p>http://<strong>www.google.com</strong>/<br />\nhttps://<strong>www.google.com</strong>/.<br />\n<strong>www.google.com</strong><br />\n<strong>www.google.com</strong>.<br />\n<strong>www.google.com/test</strong><br />\n<strong>google.com</strong><br />\n<strong>google.com</strong>,<br />\n<strong>google.com/test</strong><br />\n<strong>www.123.com.au</strong><br />\n<strong>ex-ample.com</strong><br />\nhttp://<strong>ex-ample.com</strong><br />\nhttp://<strong>ex-ample.com/test-url_chars.php?param1=val1</strong>.<br />\nhttp://<strong>ex-ample.com/test-url_chars?param1=value1&amp;param2=val+with%20spaces</strong><br /><br />Does not work for:<br /><br />\n123.com/test <strong>(numeric domains without 'www')</strong><br />\nKeep it up press of popular opinion........keep the average <strong>(ellipsis)</strong><br />\nRising 3.8% to 3.94 million from 3.79 million <strong>(percentages and decimals) </strong><br />\nEdited by Andrew Brooke - 07.08.2013 19:57 <strong>(dd.mm.yyyy dates)</strong><br />\n10.1.1.1 <strong>(IP Addresses)</strong></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Simply suggest a useful plugin here:  <code>External Links</code> <a href=\"https://wordpress.org/plugins/sem-external-links/\" rel=\"nofollow\">https://wordpress.org/plugins/sem-external-links/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to be able to take user inputted text in a comment field and check for URL type expression, and if it exists, add an anchor tag (to url) when the comment is displayed.</p>\n\n<p>I am using PHP on the server-side, and Javascript (with jQuery) on client, so should I wait to check for URL until right before it is displayed? Or add the anchor tag before inserting it in the database?</p>\n\n<p>so </p>\n\n<pre><code>&lt;textarea id=\"comment\"&gt;check out blahblah.com or www.thisthing.co.uk or http://checkthis.us/&lt;/textarea&gt;\n</code></pre>\n\n<p>becomes  </p>\n\n<pre><code>&lt;div id=\"commentDisplay\"&gt;check out &lt;a href=\"blahblah.com\"&gt;blahblah.com&lt;/a&gt; or &lt;a href=\"www.thisthing.co.uk\"&gt;www.thisthing.co.uk&lt;/a&gt; or &lt;a href=\"http://checkthis.us/\"&gt;http://checkthis.us/&lt;/a&gt;&lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1421308452,
            "question_id": 1959062,
            "score": 9,
            "tags": [
                "php",
                "javascript",
                "jquery",
                "html"
            ],
            "title": "How to add anchor tag to a URL from text input"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Your variable <code>greasy</code> is defined in the scope of the anonymous function. You cannot access <code>greasy</code> even in your userscript, unless it is part of your function. Example:</p>\n\n<pre><code>(function(){\n    var foo = 5;\n    alert(foo);\n}();\nalert(foo); //ERROR, because foo is undefined outside of the function.\n</code></pre>\n\n<p>Do it this way:</p>\n\n<pre><code>var foo = 5;\n(function(){\n     alert(foo);\n}();\nalert(foo);\n</code></pre>\n\n<p>Also, why are you putting all your code in an anonymous function and then executing it? </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<ul>\n<li><p>Greasemonkey scripts operate in a separate scope and may also operate in a sandbox, depending on the <a href=\"http://wiki.greasespot.net/@grant\" rel=\"nofollow\"><code>@grant</code> settings</a>.</p></li>\n<li><p>Additionally, the question code isolates <code>greasy</code> in a function scope (as gladoscc said).</p></li>\n<li><p>Finally, by default, <strong><em>test.js</em></strong> will fire before the Greasemonkey script does, so it won't see any set variables, anyway.  Use <a href=\"http://wiki.greasespot.net/Metadata_Block#.40run-at\" rel=\"nofollow\"><code>@run-at document-start</code></a> to address that.</p></li>\n</ul>\n\n<p><br>\nSo, given this <strong><em>test.js</em></strong>, run right before <code>&lt;/body&gt;</code>:</p>\n\n<pre><code>window.targetPages_GlobalVar = 'stovetop';\n\nconsole.log (\"On target page, local global: \", targetPages_GlobalVar);\nconsole.log (\"On target page, script global: \", gmScripts_GlobalVar);\n</code></pre>\n\n<p>Then the following will work:</p>\n\n<p><strong>No sandbox:</strong></p>\n\n<pre><code>// ==UserScript==\n// @name        _Greasemonkey and target page, variable interaction\n// @include     http://YOUR_SERVER.COM/YOUR_PATH/*\n// @include     http://jsbin.com/esikut/*\n// @run-at      document-start\n// @grant       none\n// ==/UserScript==\n\n//--- For @grant none, could also use window. instead of unsafeWindow.\nunsafeWindow.gmScripts_GlobalVar = 'greasy';\n\nconsole.log (\"In GM script, local global: \", unsafeWindow.targetPages_GlobalVar);\nconsole.log (\"In GM script, script global: \", gmScripts_GlobalVar);\n\nwindow.addEventListener (\"DOMContentLoaded\", function() {\n    console.log (\"In GM script, local global, after ready: \", unsafeWindow.targetPages_GlobalVar);\n}, false);\n</code></pre>\n\n<p><br>\n<strong>With sandbox, no function scope, <code>unsafeWindow</code>:</strong><br>\n==&gt; <strong>Important update:</strong> <a href=\"http://stackoverflow.com/a/24720223/331508\">Greasemonkey changed unsafeWindow handling with version 2.0, the next sample script will not work with GM 2.0 or later</a>.  The other two solutions still work.</p>\n\n<pre><code>// ==UserScript==\n// @name        _Greasemonkey and target page, variable interaction\n// @include     http://YOUR_SERVER.COM/YOUR_PATH/*\n// @include     http://jsbin.com/esikut/*\n// @run-at      document-start\n// @grant    GM_addStyle\n// ==/UserScript==\n/*- The @grant directive is needed to work around a design change\n    introduced in GM 1.0.   It restores the sandbox.\n*/\n\nunsafeWindow.gmScripts_GlobalVar = 'greasy';\n\nconsole.log (\"In GM script, local global: \", unsafeWindow.targetPages_GlobalVar);\nconsole.log (\"In GM script, script global: \", unsafeWindow.gmScripts_GlobalVar);\n\nwindow.addEventListener (\"DOMContentLoaded\", function() {\n    console.log (\"In GM script, local global, after ready: \", unsafeWindow.targetPages_GlobalVar);\n}, false);\n</code></pre>\n\n<p><br>\n<strong>With sandbox, no function scope, <em>Script Injection</em>:</strong></p>\n\n<pre><code>// ==UserScript==\n// @name        _Greasemonkey and target page, variable interaction\n// @include     http://YOUR_SERVER.COM/YOUR_PATH/*\n// @include     http://jsbin.com/esikut/*\n// @run-at      document-start\n// @grant       GM_addStyle\n// ==/UserScript==\n/*- The @grant directive is needed to work around a design change\n    introduced in GM 1.0.   It restores the sandbox.\n*/\n\nfunction GM_main () {\n    window.gmScripts_GlobalVar = 'greasy';\n\n    console.log (\"In GM script, local global: \", window.targetPages_GlobalVar);\n    console.log (\"In GM script, script global: \", window.gmScripts_GlobalVar);\n\n    window.addEventListener (\"DOMContentLoaded\", function() {\n        console.log (\"In GM script, local global, after ready: \", window.targetPages_GlobalVar);\n    }, false);\n}\n\naddJS_Node (null, null, GM_main);\n\nfunction addJS_Node (text, s_URL, funcToRun, runOnLoad) {\n    var D                                   = document;\n    var scriptNode                          = D.createElement ('script');\n    if (runOnLoad) {\n        scriptNode.addEventListener (\"load\", runOnLoad, false);\n    }\n    scriptNode.type                         = \"text/javascript\";\n    if (text)       scriptNode.textContent  = text;\n    if (s_URL)      scriptNode.src          = s_URL;\n    if (funcToRun)  scriptNode.textContent  = '(' + funcToRun.toString() + ')()';\n\n    var targ = D.getElementsByTagName ('head')[0] || D.body || D.documentElement;\n    targ.appendChild (scriptNode);\n}\n</code></pre>\n\n<hr>\n\n<p>Notes:</p>\n\n<ol>\n<li>You can test these script against <a href=\"http://jsbin.com/esikut/1\" rel=\"nofollow\"><strong>this page</strong> (jsbin.com/esikut)</a>.</li>\n<li>With no sandbox, <code>unsafeWindow</code> and <code>window</code> are the same.</li>\n<li><p>All of these scripts produce the same output on the console:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>In GM script, local global: undefined\nIn GM script, script global: greasy\nOn target page, local global: stovetop\nOn target page, script global: greasy\nIn GM script, local global, after ready: stovetop\n</code></pre></li>\n<li><p>The <em>Script Injection</em> code will work in a variety of browsers besides Firefox. <code>unsafeWindow</code> currently only works in Firefox+Greasemonkey(or Scriptish) or Chrome+Tampermonkey.</p></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 12
                }
            ],
            "body": "<p>I have the following code in <em>test.js</em> which is run right before &lt;/body>:</p>\n\n<pre><code>alert('stovetop');\nalert(greasy);\n</code></pre>\n\n<p>I have the following code in <em>test.user.js</em>:</p>\n\n<pre><code>(function () {\n\n    'use strict';\n    var greasy = 'greasy variable';\n    document.title = 'greasy title';\n\n}());\n</code></pre>\n\n<p>'stovetop' gets alerted so I know the page javascript works, and <code>document.title</code> gets changes so I know that the script javascript works. However, on the webpage I get the error:</p>\n\n<blockquote>\n  <p>Error: ReferenceError: greasy is not defined Source File: /test.js</p>\n</blockquote>\n\n<p>How from the webpage do I access the variable set by Greasemonkey and how about vice versa? </p>\n",
            "last_activity_date": 1410412706,
            "question_id": 13485122,
            "score": 4,
            "tags": [
                "javascript",
                "firefox",
                "firefox-addon",
                "greasemonkey"
            ],
            "title": "Accessing Variables from Greasemonkey to Page &amp; vice versa"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>It should as simple as</p>\n\n<pre><code>jQuery(function($) {\n    var locations = {\n        'Germany': ['Duesseldorf', 'Leinfelden-Echterdingen', 'Eschborn'],\n        'Spain': ['Barcelona'],\n        'Hungary': ['Pecs'],\n        'USA': ['Downers Grove'],\n        'Mexico': ['Puebla'],\n        'South Africa': ['Midrand'],\n        'China': ['Beijing'],\n        'Russia': ['St. Petersburg'],\n    }\n\n    var $locations = $('#location');\n    $('#country').change(function () {\n        var country = $(this).val(), lcns = locations[country] || [];\n\n        var html = $.map(lcns, function(lcn){\n            return '&lt;option value=\"' + lcn + '\"&gt;' + lcn + '&lt;/option&gt;'\n        }).join('');\n        $locations.html(html)\n    });\n});\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/arunpjohny/2pza5/\">Fiddle</a></p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>I'm going to provide a second solution, as this post is still up in Google search for 'jquery cascade select'.\nThis is the first select:</p>\n\n<pre><code>&lt;select class=\"select\" id=\"province\" onchange=\"filterCity();\"&gt;\n  &lt;option value=\"1\"&gt;RM&lt;/option&gt;\n  &lt;option value=\"2\"&gt;FI&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>and this is the second, disabled until the first is selected:</p>\n\n<pre><code>&lt;select class=\"select\" id=\"city\" disabled&gt;\n  &lt;option data-province=\"RM\" value=\"1\"&gt;ROMA&lt;/option&gt;\n  &lt;option data-province=\"RM\" value=\"2\"&gt;ANGUILLARA SABAZIA&lt;/option&gt;\n  &lt;option data-province=\"FI\" value=\"3\"&gt;FIRENZE&lt;/option&gt;\n  &lt;option data-province=\"FI\" value=\"4\"&gt;PONTASSIEVE&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>this one is not visible, and acts as a container for all the elements filtered out by the selection:</p>\n\n<pre><code>&lt;span id=\"option-container\" style=\"visibility: hidden; position:absolute;\"&gt;&lt;/span&gt;\n</code></pre>\n\n<p>Finally, the script that filters:</p>\n\n<pre><code>&lt;script&gt;\n\n    function filterCity(){\n      var province = $(\"#province\").find('option:selected').text(); // stores province\n      $(\"#option-container\").children().appendTo(\"#city\"); // moves &lt;option&gt; contained in #option-container back to their &lt;select&gt;\n      var toMove = $(\"#city\").children(\"[data-province!='\"+province+\"']\"); // selects city elements to move out\n      toMove.appendTo(\"#option-container\"); // moves city elements in #option-container\n      $(\"#city\").removeAttr(\"disabled\"); // enables select\n};\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>i have the following problem:</p>\n\n<p>I started to create a form with HTML an JS and there are two Dropdowns (Country and City). now i want to make these two dynamic with JQuery so that only the cities of the selected countries are visible.</p>\n\n<p>I've started with some basic JS which worked fine but makes some trouble in IE. Now i'm trying to convert my JS to JQuery for a better compatibility.</p>\n\n<p>My original JS looks like this:</p>\n\n<pre><code>function populate(s1, s2) {\n    var s1 = document.getElementById(s1);\n    var s2 = document.getElementById(s2);\n    s2.innerHTML = \"\";\n    if (s1.value == \"Germany\") {\n        var optionArray = [\"|\", \"magdeburg|Magdeburg\", \"duesseldorf|Duesseldorf\", \"leinfelden-echterdingen|Leinfelden-Echterdingen\", \"eschborn|Eschborn\"];\n    } else if (s1.value == \"Hungary\") {\n        var optionArray = [\"|\", \"pecs|Pecs\", \"budapest|Budapest\", \"debrecen|Debrecen\"];\n    } else if (s1.value == \"Russia\") {\n        var optionArray = [\"|\", \"st. petersburg|St. Petersburg\"];\n    } else if (s1.value == \"South Africa\") {\n        var optionArray = [\"|\", \"midrand|Midrand\"];\n    } else if (s1.value == \"USA\") {\n        var optionArray = [\"|\", \"downers grove|Downers Grove\"];\n    } else if (s1.value == \"Mexico\") {\n        var optionArray = [\"|\", \"puebla|Puebla\"];\n    } else if (s1.value == \"China\") {\n        var optionArray = [\"|\", \"beijing|Beijing\"];\n    } else if (s1.value == \"Spain\") {\n        var optionArray = [\"|\", \"barcelona|Barcelona\"];\n    }\n\n    for (var option in optionArray) {\n        var pair = optionArray[option].split(\"|\");\n        var newOption = document.createElement(\"option\");\n        newOption.value = pair[0];\n        newOption.innerHTML = pair[1];\n        s2.options.add(newOption);\n    }\n};\n</code></pre>\n\n<p>and here my Jquery:</p>\n\n<p><a href=\"http://jsfiddle.net/HvXSz/\" rel=\"nofollow\">http://jsfiddle.net/HvXSz/</a></p>\n\n<p>i know it is very simple but i can't see the wood for the  trees.</p>\n",
            "last_activity_date": 1425657392,
            "question_id": 18351921,
            "score": 3,
            "tags": [
                "javascript",
                "jquery",
                "html-select",
                "cascadingdropdown"
            ],
            "title": "How to populate a cascading Dropdown with JQuery"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>I understand the problem very good. I agree that both <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3apredefined_formatter#predefined_format_types\" rel=\"nofollow\">predefined formatter</a> which one can use currently ('showlink' and 'link' formatters) are not flexible enough.</p>\n\n<p>I can suggest you another formatter which you could download <a href=\"http://www.ok-soft-gmbh.com/jqGrid/jquery.jqGrid-4.3.1/plugins/jQuery.jqGrid.dynamicLink.js\" rel=\"nofollow\">here</a>. The usage of the formatter is very easy:</p>\n\n<pre><code>{label: \"AddToCart\", name: \"Addtocrt_addtocrt\", formatter: \"dynamicLink\",\n    formatoptions: {\n        url: function (cellValue, rowId, rowData) {\n            return '/Store/AddToCart' + rowId + '?' +\n                $.param({\n                    quantity: rowData.Stocks_valkogus\n                });\n        }\n    }\n}\n</code></pre>\n\n<p>The <code>url</code> defined as function will be used in the <code>&lt;a&gt;</code> as the value of <code>href</code> attribute.</p>\n\n<p>Additionally to the <code>url</code> <code>formatoptions</code> the 'dynamicLink' formatter supports <code>target</code> option (with the same meaning as by 'showlink'), <code>cellValue</code> which can be also function and <code>onClick</code> callback with <code>rowId</code>, <code>iRow</code>, <code>iCol</code>, <code>cellValue</code>, <code>e</code> as parameters. If the <code>onClick</code> callback is defined the value of <code>url</code> will be ignored. So one can skip the definition of the formatter option <code>url</code>.</p>\n\n<p><a href=\"http://www.ok-soft-gmbh.com/jqGrid/DynamicLink.htm\" rel=\"nofollow\">The demo</a> demonstrate the usage of the 'dynamicLink' formatter:</p>\n\n<p><img src=\"http://i.stack.imgur.com/q43Je.png\" alt=\"enter image description here\"></p>\n\n<p>The current code of the formatter 'dynamicLink' you can find below:</p>\n\n<pre><code>/*global jQuery */\n(function ($) {\n    'use strict';\n    /*jslint unparam: true */\n    $.extend($.fn.fmatter, {\n        dynamicLink: function (cellValue, options, rowData) {\n            // href, target, rel, title, onclick\n            // other attributes like media, hreflang, type are not supported currently\n            var op = {url: '#'};\n\n            if (typeof options.colModel.formatoptions !== 'undefined') {\n                op = $.extend({}, op, options.colModel.formatoptions);\n            }\n            if ($.isFunction(op.target)) {\n                op.target = op.target.call(this, cellValue, options.rowId, rowData, options);\n            }\n            if ($.isFunction(op.url)) {\n                op.url = op.url.call(this, cellValue, options.rowId, rowData, options);\n            }\n            if ($.isFunction(op.cellValue)) {\n                cellValue = op.cellValue.call(this, cellValue, options.rowId, rowData, options);\n            }\n            if ($.fmatter.isString(cellValue) || $.fmatter.isNumber(cellValue)) {\n                return '&lt;a' +\n                    (op.target ? ' target=' + op.target : '') +\n                    (op.onClick ? ' onclick=\"return $.fn.fmatter.dynamicLink.onClick.call(this, arguments[0]);\"' : '') +\n                    ' href=\"' + op.url + '\"&gt;' +\n                    (cellValue || '&amp;nbsp;') + '&lt;/a&gt;';\n            } else {\n                return '&amp;nbsp;';\n            }\n        }\n    });\n    $.extend($.fn.fmatter.dynamicLink, {\n        unformat: function (cellValue, options, elem) {\n            var text = $(elem).text();\n            return text === '&amp;nbsp;' ? '' : text;\n        },\n        onClick: function (e) {\n            var $cell = $(this).closest('td'),\n                $row = $cell.closest('tr.jqgrow'),\n                $grid = $row.closest('table.ui-jqgrid-btable'),\n                p,\n                colModel,\n                iCol;\n\n            if ($grid.length === 1) {\n                p = $grid[0].p;\n                if (p) {\n                    iCol = $.jgrid.getCellIndex($cell[0]);\n                    colModel = p.colModel;\n                    colModel[iCol].formatoptions.onClick.call($grid[0],\n                        $row.attr('id'), $row[0].rowIndex, iCol, $cell.text(), e);\n                }\n            }\n            return false;\n        }\n    });\n}(jQuery));\n</code></pre>\n\n<p>I plan to place the code of the formatter and some other plugins to jqGrid on the github.</p>\n",
                    "is_accepted": true,
                    "score": 2
                }
            ],
            "body": "<p>jqGrid contains quantity column and add to cart button using colmodel below. Inline editing \nis used to fill quantity.\nIf quantity is fileld and add to cart link on other column is clicked, entered quanty is not passed to AddToCart controller.  Product id from id field in json data is passed correctly.</p>\n\n<p>How to pass selected quantity to AddToCart controller (using invoked url query string or something other) ?</p>\n\n<p>colmodel is:</p>\n\n<pre><code>{\"label\":\"AddToCart\",\n \"name\":\"Addtocrt_addtocrt\",\n \"formatter\":\"showlink\",\n \"formatoptions\": {\"baseLinkUrl\":\"http://MySite.com/Store/AddToCart\"}\n },\n\n{\"label\":\"Quantity\",\n  \"name\":\"Stocks_valkogus\",\n  \"editoptions\":{\"maxlength\":10 }\n  \"editable\":true\n   }\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>Data from server is in json format and row editing mode is used.\n <code>rowData.Stocks_valkogus</code> returns undefined.</p>\n\n<p>I tried code below. alert box shows that quantityVal is undefined.\nHow to retrieve entered quantity?</p>\n\n<pre><code>{\"name\":\"Addtocrt_addtocrt\",\n \"formatter\":\"dynamicLink\",\n \"formatoptions\":{\"onClick\":addToCartOnClick\n}}\n\nfunction addToCartOnClick(rowId, iRow, iCol, cellValue, e) {\n    var iCol = getColumnIndexByName($grid, 'Stocks_valkogus') ,\n       quantityVal = $('#' + $.jgrid.jqID(rowId) + '&gt;td:nth-child(' + (iCol + 1) + '&gt;input').val();\n    alert(iCol); // returns 3 \n    alert(quantityVal); // returns undefined. \n    window.location = 'Store/Details?' + $.param({\n        id: rowId,\n        quantity: quantityVal\n    });\n}\n</code></pre>\n",
            "last_activity_date": 1327848635,
            "question_id": 9038063,
            "score": 2,
            "tags": [
                "javascript",
                "jqgrid"
            ],
            "title": "How to pass data to url from jqgrid row if hyperlink is clicked"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<h2>No</h2>\n\n<p>But they are recommended. If you ever expand the statement you will need them.</p>\n\n<p>This is perfectly valid</p>\n\n<pre><code>if (cond) \n    alert(\"Condition met!\")\nelse\n    alert(\"Condition not met!\")\n</code></pre>\n\n<p>However it is highly recommended that you always use braces because if you (or someone else) ever expands the statement it will be required.</p>\n\n<p>This same practice follows in all C syntax style languages with bracing. C, C++, Java, even PHP all support one line statement without braces. You have to realize that you are only saving <strong>two characters</strong> and with some people's bracing styles you aren't even saving a line. I prefer a full brace style (like follows) so it tends to be a bit longer. The tradeoff is met very well with the fact you have extremely clear code readability.</p>\n\n<pre><code>if (cond) \n{\n    alert(\"Condition met!\")\n}\nelse\n{\n    alert(\"Condition not met!\")\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 56
                },
                {
                    "body": "<p>There is no programming reason to use the curly braces on one line statements.</p>\n\n<p>This only comes down to coders preferences and readability.</p>\n\n<p>Your code won't break because of it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is why it's recommended </p>\n\n<p>Let's say I write</p>\n\n<pre><code>if(someVal)\n    alert(\"True\");\n</code></pre>\n\n<p>Then the next developer comes and says \"Oh, I need to do something else\", so they write</p>\n\n<pre><code>if(someVal)\n    alert(\"True\");\n    alert(\"AlsoTrue\");\n</code></pre>\n\n<p>Now as you can see \"AlsoTrue\" will always be true, because the first developer didn't use braces.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's a readability aspect - in that when you have compound statements it can get very confusing.  (Indenting helps, but doesn't mean anything to the compiler/interpreter)</p>\n\n<pre><code>var a;\nvar b;\nvar c;\n\n//Indenting is clear\nif (a===true)\n  alert(a); //On on IF\nalert(b); //Always\n\n//Indenting is bad\nif (a===true)\n  alert(a); //On on IF\n  alert(b); //Always but expected?\n\n//Nested indenting is clear\nif (a===true)\n  if (b===true)\n    alert(a); //Only on if-if\nalert (b); //Always\n\n//Nested indenting is misleading\nif (a===true)\n  if (b===true)\n    alert(a); //Only on if-if\n  alert (b); //Always but expected as part of first if?\n\n//Compound line is misleading\n//b will always alert, but suggests it's part of if\nif (a===true) alert(a);alert(b); \nelse alert(c); //Error, else isn't attached\n</code></pre>\n\n<p>And then there's an extensibility aspect:</p>\n\n<pre><code>//Problematic\nif (a===true)\n  alert(a);\n  alert(b); //We're assuming this will happen with the if but it'll happen always\nelse       //This else is not connected to an if anymore - error\n  alert(c);\n\n//Obvious\nif (a===true) {\n  alert(a); //on if\n  alert(b); //on if\n} else {\n  alert(c); //on !if\n} \n</code></pre>\n\n<p>(The thinking goes that if you always have the brackets then you know to insert other statements inside that block).</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>It's a matter of style, but curly braces are good for preventing possible <a href=\"http://en.wikipedia.org/wiki/Dangling_else\" rel=\"nofollow\">dangling else's</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In addition to the reason mentioned by @Josh K (which also applies to Java, C etc.), one special problem in JavaScript is <a href=\"http://en.wikipedia.org/wiki/JavaScript_syntax#Whitespace_and_semicolons\" rel=\"nofollow\">automatic semicolon insertion</a>. From the Wikipedia example:</p>\n\n<pre><code>return\na + b;\n\n// Returns undefined. Treated as:\n//   return;\n//   a + b;\n</code></pre>\n\n<p>So, this may also yield unexpected results, if used like this:</p>\n\n<pre><code>if (x)\n   return\n   a + b;\n</code></pre>\n\n<p>It's not really much better to write</p>\n\n<pre><code>if (x) {\n   return\n   a + b;\n}\n</code></pre>\n\n<p>but maybe here the error is a little bit easier to detect (?)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is no maintainability problem!</p>\n\n<p>The problem with all of you is that you Put semicolons everywhere. You don't need curly braces for multiple statements. If you want to add a statement, just use commas.</p>\n\n<pre><code>if (a &gt; 1)\n alert(\"foo\"),\n alert(\"bar\"),\n alert(\"lorem\"),\n alert(\"ipsum\");\nelse\n alert(\"blah\");\n</code></pre>\n\n<p>This is valid code that will run like you expect!</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The question asks about statements on one line. Yet, the many examples provided show reasons not to leave out braces based on multiple line statements. It is completely safe to not use brackets on one line, if that is the coding style you prefer.</p>\n\n<p>For example, the question asks if this is ok:</p>\n\n<pre><code> if (condition) statement;\n</code></pre>\n\n<p>It does not ask if this is ok:</p>\n\n<pre><code> if (condition)\n   statement;\n</code></pre>\n\n<p>I think leaving brackets out is preferable because it makes the code more readable with less superfluous syntax.</p>\n\n<p>My coding style is to never use brackets unless the code is a block. And to never use multiple statements on a single line (separated by semicolons). I find this easy to read and clear and never have scoping issues on 'if' statements. As a result, using brackets on a single if condition statement would require 3 lines. Like this:</p>\n\n<pre><code> if (condition) {\n   statement;\n }\n</code></pre>\n\n<p>Using a one line if statement is preferable because it uses less vertical space and the code is more compact.</p>\n\n<p>I wouldn\u2019t force others to use this method, but it works for me and I could not disagree more with the examples provided on how leaving out brackets leads to coding/scoping errors.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Sometimes they seem to be needed!  I couldn't believe it myself, but yesterday it occurred to me in a Firebug session (recent Firefox 22.0) that</p>\n\n<pre><code>if (! my.condition.key)\n    do something;\n</code></pre>\n\n<p>executed <em>do something</em> despite <em>my.condition.key</em> was <strong>true</strong>.  Adding braces:</p>\n\n<pre><code>if (! my.condition.var) {\n    do something;\n}\n</code></pre>\n\n<p>fixed that matter.  There are myriards of examples where it apparently works without the braces, but in this case it definitely didn't.</p>\n\n<p>People who tend to put more than one statement on a line should very definitely <em>always</em> use braces, of course, because things like</p>\n\n<pre><code>if (condition)\n    do something; do something else;\n</code></pre>\n\n<p>are difficult to find.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm currently working on a minifier. Even now I check it on two huge scripts. Experimentally I found out:\nYou may remove the curly braces behind for,if,else,while,function* if the curly braces don't include ';','return','for','if','else','while','do','function'. Irrespective line breaks.</p>\n\n<pre><code>function a(b){if(c){d}else{e}} //ok  \nfunction a(b){if(c)d;else e}   //ok\n</code></pre>\n\n<p>Of course you need to replace the closing brace with a semicolon if it's not followed by on other closing brace.</p>\n\n<p>A function must not end in a comma.</p>\n\n<pre><code>var a,b=function()c;  //ok *but not in Chrome\nvar b=function()c,a;  //error  \n</code></pre>\n\n<p>Tested on Chrome and FF. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would just like to note that you can also leave the curly braces off of just the else. As seen in <a href=\"http://ejohn.org/blog/simple-class-instantiation/\" rel=\"nofollow\">this article by John Resig's</a>.</p>\n\n<pre><code>if(2 == 1){\n    if(1 == 2){\n        console.log(\"We will never get here\")\n    }\n} else \n    console.log(\"We will get here\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I once heard that leaving the curly braces in one-line statements could be harmful in JavaScript. I don't remember the reasoning anymore and a Google search did not help much. Is there anything that makes it a good idea to surround all statements within curly braces in JavaScript?</p>\n\n<p>I am asking, because everyone seems to do so.</p>\n",
            "last_activity_date": 1425566871,
            "question_id": 4797286,
            "score": 41,
            "tags": [
                "javascript"
            ],
            "title": "Are curly braces necessary in one-line statements in JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The original source never changes. Only the DOM changes. </p>\n\n<p>You can see an HTML visualization of DOM changes using your browser's developer tools. </p>\n\n<p>You should be aware that when you manipulate the DOM, you're never manipulating HTML. The HTML visualization offered by the developer tools is an <em>interpretation</em> of the current state of the DOM. There's no actual modification of HTML markup.</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>Because View Source only shows the HTML that was sent to the browser originally. There are ways of seeing the changed HTML though - Firebug in Firefox, F12 developer tools in IE or Chrome. Selecting some HTML and right-clicking \"View Selection Source\" in Firefox will also work.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The \"View Source\" only shows the source the server sent at the time the browser requested the particular webpage from the server. Therefore, since these changes were made on the client side, they don't show up on the \"View Source\" because they've been made after the original page has been delivered.</p>\n\n<p>To view the live source of the page, you can use the Web Inspector view in webkit browsers, or Firebug in Firefox. These keep track of any changes to the DOM and update the source which you can see.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There are times when dev tools in IE/Firefox/Chrome don't keep up with your DOM.  That just means you are dealing with some code worthy of a jedi - or that Darth Vader left it there for you to debug.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is a option in web developer tool (Firefox addon) \"<code>View generated source</code>\" which will give you the whole source code which is generated after you made changes.</p>\n\n<pre><code>view source-&gt;View generated source\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have a simple question here. I know with jQuery you can dynamically append HTML elements in the DOM by doing stuff like</p>\n\n<pre><code>$('').append('&lt;p&gt;Test&lt;/p&gt;');\n</code></pre>\n\n<p>But my question is, why don't these elements actually appear visually in the code (when you View Source in your browser for example).</p>\n\n<p>Please experts, let me know why. Thanks</p>\n",
            "last_activity_date": 1359519805,
            "question_id": 8598836,
            "score": 12,
            "tags": [
                "javascript",
                "jquery",
                "dom",
                "jquery-selectors",
                "append"
            ],
            "title": "jQuery DOM changes not appearing in view source"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>EDIT: Use <code>var obj = {}; obj[key] = chunks[i];</code></p>\n\n<p>Because ECMAScript treats the <code>key</code> in this <code>{key:1}</code> as literal.</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>same can be used for lookup: obj[key] . Do remmeber obj.key will look for key in object</p>\n\n<pre><code>var obj = {\n    test:1\n}\n\n\nvar key = 'test'\nobj.test = obj[key] = 1\n</code></pre>\n\n<p>Here obj.key will not work</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using this slice of code (shown below) in an attempt to populate the object literal named  <code>Parameters</code> inside the for loop. I need the <code>key:value</code> pair to be assigned in conjunction with the loops iterating <code>i</code> variable, as such: <code>{key_1:chunks[1],key_2:chunks[2]}</code>. However, my code isn't working. The <code>'key_'+i</code> is not being reflected in the literal.</p>\n\n<p>There's something I am missing here, obviously. Can someone tell me what it is?...Thanks.</p>\n\n<pre><code>var Parameters=[];\nvar len = chunks.length;\nfor (var i = 0; i &lt; len; i++) {\n    var key='key_'+i\n    obj= { key : chunks[i]};\n   Parameters.push(obj)\n}\n</code></pre>\n",
            "last_activity_date": 1362857969,
            "question_id": 4119324,
            "score": 4,
            "tags": [
                "javascript"
            ],
            "title": "Passing in dynamic key:value pairs to an object literal?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You will need to pass it via a form submission, cookie, or through a querystring.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can <code>POST</code> through a form or pass it in the URL if you're doing it on page transition, then just use <code>$_POST</code> or <code>$_GET</code> to receive the variable.</p>\n\n<p>If you need it done seamlessly then you might want to look at using AJAX.\n<a href=\"http://www.tizag.com/ajaxTutorial/ajaxxmlhttprequest.php\" rel=\"nofollow\">TIZAG AJAX Tutorial</a></p>\n",
                    "is_accepted": true,
                    "score": 0
                },
                {
                    "body": "<p>You can use jQuery ajax for this, but you need to create another script that save on your database:</p>\n\n<pre><code>&lt;script&gt;\n$.ajax({\n    url: \"save.in.my.database.php\",\n    type: \"post\",\n    dataType:\"json\",\n    data: {\n        lugar: results[0].geometry.location\n    },\n    success: function(data){\n        alert('saved');\n    },\n    error: function(){\n        alert('error');\n    }\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>\"save.in.my.database.php\" receives a <code>$_POST['lugar']</code> and you can save on your database.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This will convert js variable to php variable</p>\n\n<pre><code>&lt;script&gt;\nfunction sud(){\n\njavavar=document.getElementById(\"text\").value;  \n\ndocument.getElementById(\"rslt\").innerHTML=\"&lt;?php \n$phpvar='\"+javavar+\"'; \necho $phpvar.$phpvar;?&gt;\";\n}\n\nfunction sud2(){\ndocument.getElementById(\"rslt2\").innerHTML=\"&lt;?php \necho $phpvar;?&gt;\";\n}\n\n&lt;/script&gt; \n&lt;body&gt;\n&lt;div id=\"rslt\"&gt;\n&lt;/div&gt;\n\n&lt;div id=\"rslt2\"&gt;\n&lt;/div&gt;\n&lt;input type=\"text\" id=\"text\" /&gt;\n&lt;button onClick=\"sud()\" &gt;Convert&lt;/button&gt;\n&lt;button onClick=\"sud2()\"&gt;Once Again&lt;/button&gt;\n\n&lt;/body&gt;\n</code></pre>\n\n<p>Demo: <a href=\"http://ibence.com/new.php\" rel=\"nofollow\">http://ibence.com/new.php</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a JavaScript value given by Google maps and I need to save it in a MySQL database.</p>\n\n<p>Actually I have the variable </p>\n\n<pre><code>&lt;script&gt;\n...\nvar lugar = results[0].geometry.location;// this gives me a latitud, longitud value, like: -34.397, 150.644\n...\n&lt;/script&gt;\n</code></pre>\n\n<p>And I need to pass that variable to the PHP variable lugar</p>\n\n<pre><code>&lt;?\n$lugar= ?????\n?&gt;\n</code></pre>\n",
            "last_activity_date": 1363372850,
            "question_id": 4716177,
            "score": 2,
            "tags": [
                "php",
                "javascript"
            ],
            "title": "Pass a JS variable to a PHP variable"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>You can try:</p>\n\n<pre><code>img style=\"display: inline\" src=\"img/load.gif?salt=xxxx\"\n</code></pre>\n\n<p><strong>xxx</strong>: means - a random of an integer.</p>\n\n<p>Maybe, the browser cache the image so it will not repaint. Or you must set the GIF image with loop.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have tried with adding function call, now images are loading and dynamic, but it never goes to next page or never clear timeout.</p>\n\n<p>code:</p>\n\n<pre><code>buffer.append(\"setTimeout(function(){'document.getElementById(\\\"\").append(component.getMarkupId()).append(\"\\\").submit()'}, 100);\\n}else{\\n\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var safeForm4d = document.getElementById(\"safeForm4d\");\nif ( safeForm4d.submitted.value == \"false\" ){\n   safeForm4d.submitted.value = \"true\";\n   setTimeout(function(){ safeForm4d.submit(); }, 100);\n}else{\n   document.getElementById(\"toHide\").style.display=\"none\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This:</p>\n\n<pre><code>setTimeout(function(){'document.getElementById(\"safeForm4d\").submit()'}, 100);\n</code></pre>\n\n<p>is incorrect.  The function you pass there to \".setTimeout()\" will do nothing.  Instead of that, try:</p>\n\n<pre><code>setTimeout(function(){ document.getElementById(\"safeForm4d\").submit(); }, 100);\n</code></pre>\n\n<p>The difference is that the actual guts of the function should not have been quoted. In that state, what you've got is a function with a single statement, that statement being a simple string-valued expression.  It would run, but have no effect.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>two things:</p>\n\n<ol>\n<li><p>The correct usage of <code>setTiemout()</code> is:</p>\n\n<pre><code>setTimeout(function(){\n    document.getElementById(\"safeForm4d\").submit();\n}, 100);\n</code></pre></li>\n<li><p>Your using wicket. The <code>wicket:id</code> is nothing the DOM knows. You have to assign an ID and use this one like you did it with the form itself.</p></li>\n</ol>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Because <code>setTimeout()</code> requires your function to be passed as a string or as an anonymous function:</p>\n\n<pre><code>setTimeout(function() { document.getElementById(\"safeFormec\").submit(); }, 100);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>setTimeout(function (){ document.getElementById(\"safeForm\").submit() } , 100);\n</code></pre>\n\n<p>check working example at <a href=\"http://jsfiddle.net/tgjK9/1/\" rel=\"nofollow\"><strong>JSFIDDLE</strong></a>.</p>\n\n<p><strong>CAUTION</strong>:: alert may be irritating.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function setsubmit()\n{\n   document.getElementById(\"safeFormec\").submit();\n}\n\nsetTimeout('setsubmit()',100);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <code>setTimeout</code> function throws invalid arguments because whatever the call</p>\n\n<pre><code>document.getElementById(\"safeFormec\").submit()\n</code></pre>\n\n<p>returns (some error message maybe) is not a valid argument to <code>setTimeout</code> i.e. it can not\nbe resolved to a function or expression. </p>\n\n<p>The call to <code>.submit()</code> fails because there is no action attribute specified for the form (<code>&lt;form action=\"somePage.php\"&gt;</code>).</p>\n\n<p>Your intention was probably not to do a submit in the <code>setTimeout</code> call, but to send the submit function as a value parameter to setTimeout to be executed after a while. Like this:</p>\n\n<pre><code>setTimeout(document.getElementById(\"safeFormec\").submit, 100);\n</code></pre>\n\n<p>Note the missing paranthesises.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Issue was with time 100 ie 1/10 of second. IE will load images with dynamic action only for for 100 millisecond ie1/10 second and stop. increased time to 3000 and now it is working fine. </p>\n\n<blockquote>\n  <p>setTimeout(function(){'document.getElementById(\"safeForm4d\").submit()'},\n  100);</p>\n</blockquote>\n\n<p>No issues with FF or other browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Take away the quotes from around your action:</p>\n\n<pre><code>setTimeout(function() {\n    document.getElementById(\"safeForm4d\").submit();\n}, 3000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>After formatting your initial post I think maybe I found some sources to the problem.</p>\n\n<ul>\n<li>The function in your timeout is a string.</li>\n<li>You should try and submit the form, not the actual button.</li>\n</ul>\n\n<p>Try this:</p>\n\n<pre><code>if (!document.getElementById(\"safeForm4d\").submitted.value) {\n    document.getElementById(\"safeForm4d\").submitted.value = \"true\";\n    setTimeout(function() {\n        document.forms[0].submit(); // Alt: document.forms['MyFormName'].submit()\n    }, 3000);\n} else {\n    document.getElementById(\"toHide\").style.display=\"none\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>change this    </p>\n\n<pre><code> setTimeout(function() {\n        'document.getElementById(\"safeForm4d\").submit()'\n    }, 3000);\n</code></pre>\n\n<p>to...</p>\n\n<pre><code> setTimeout(function() {\n        document.getElementById(\"safeForm4d\").submit()\n    }, 3000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This will never give you the desired effect because your <strong>changing from page to page</strong> -- this will cause the aninmation to disappear once the new page starts to load. This will depend on many factors, such as how long the server takes to response, to how fast the user's computer is to re-render the new page.</p>\n\n<p>If you really want this kind of effect to work you should use ajax to send the form data using <code>.serialize()</code>, overwrite the current page with the response which should hide the animation.</p>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>To create the desired effect you'll have to post the form using ajax, then push the new HTML to the DOM.</p>\n\n<pre><code>var $form = $('#formId');\n\n$.ajax({\n   url: $form.attr('action'),\n   type: $form.attr('method'),\n   data: $form.serialize(),\n   success: function(response) {\n    $('#loading').fadeOut(function() {\n            // Get only text from the body of the result\n        $('body').html($(response).find('body'));\n    });\n  }\n});\n</code></pre>\n\n<p>This is really hacky though and I felt dirty writing that. Seriously. You should really make sure that the response returned isn't go to:</p>\n\n<ul>\n<li>Reload CSS styles, scripts, etc.</li>\n<li>Any specific title, scripts, styles, etc relevant to that page and search will not appear or be changed.</li>\n</ul>\n\n<p>More than likely you just want to return the result to the query i.e. the search results of the form submitted. In which case just wrap the results in a container and <code>.find('#container')</code> instead of <code>.find('body')</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have you tried removing the function call brackets from the end of this line?</p>\n\n<pre><code>document.getElementById(\"safeForm9c\").submit()\n</code></pre>\n\n<p>i.e. do this instead:</p>\n\n<pre><code>setTimeout(document.getElementById(\"safeForm9c\").submit, 100)\n</code></pre>\n\n<p>You\u2019re telling IE to call the results of <code>submit()</code> in 100 milliseconds time, rather than call submit.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Can you try doing something like</p>\n\n<pre><code>setTimeout('document.getElementById(\"safeForm9c\").submit()', 100);\n</code></pre>\n\n<p>Probably setTimeout accepts the things you want to call as a string, so that it can do an eval after the timeout and run the script as it encouters in the string.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try something like this</p>\n\n<pre><code>setTimeout(function(){document.getElementById(\"safeForm9c\").submit();}, 100);\n</code></pre>\n\n<p>In the old days a setTimeout complete function was in a string format, but these days we use it this way. Also this way makes is possible to do more things when the timeout is complete.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try wrapping them inside a function:</p>\n\n<pre><code>setTimeout(function(){ document.getElementById(\"safeForm4d\").submit(); }, 100);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You have quotes in the setTimeout event:</p>\n\n<pre><code>setTimeout('document.getElementById(\"safeForm4d\").submit()', 100);\n</code></pre>\n\n<p>Change your script as follows:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    if (document.getElementById(\"safeForm4d\").submitted.value == \"false\") {\n        document.getElementById(\"safeForm4d\").submitted.value = \"true\";\n         if(Wicket.Browser.isIE()) {\n             setTimeout(document.getElementById(\"safeForm4d\").submit(), 100);\n         } else { \n             setTimeout(document.getElementById(\"safeForm4d\").submit(), 100);\n         }\n    } else {\n        document.getElementById(\"toHide\").style.display=\"none\";\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    if (document.getElementById(\"safeForm4d\").submitted.value == \"false\") {\n        document.getElementById(\"safeForm4d\").submitted.value = \"true\";\n        setTimeout('document.getElementById(\"safeForm4d\").submit()', 100);\n    } else {\n        document.getElementById(\"toHide\").style.display=\"none\";\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Include this in the head</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>and have</p>\n\n<pre><code> static private class SafeSubmitBehaviour extends AbstractBehavior{\n    public void onRendered( Component component ) {\n      super.onRendered( component );      \n      StringBuffer buffer = new StringBuffer(200);\n      buffer.append(\"&lt;script type=\\\"text/javascript\\\" &gt;\\n\");\n      buffer.append(\"var input = $(\\\"input[name='submitted']\\\");\\n\");\n      buffer.append(\"if (input.val() == \\\"false\\\") {\\n\"); \n      buffer.append(\"  input.val(\\\"true\\\");\\n\"); \n      buffer.append(\"  setTimeout(function(){ $(\\\"#\").append(component.getMarkupId()).append(\"\\\").submit()}, 100);\\n\"); \n      buffer.append(\"}\\n\");\n      buffer.append(\"else {\\n $(\\\"#toHide\\\").hide();\\n}\"); \n      component.getResponse().write(buffer);\n    }  \n  } \n</code></pre>\n\n<p>which should render</p>\n\n<pre><code>var input = $(\"input[name='submitted']\");\nif (input.val() == \"false\") { \n  input.val(\"true\"); \n  setTimeout(function(){ $(\"#safeForm1d3\").submit()}, 100); \n}else{ \n  $(\"#toHide\").hide(); \n}\n</code></pre>\n\n<p>Where would you do the <code>$(\"#toHide\").show();</code>  ?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Finally solved my question, may be useful for others:</p>\n\n<blockquote>\n  <p>Answer:</p>\n</blockquote>\n\n<p>HTML source code:</p>\n\n<pre><code>&lt;SCRIPT type=\"text/javascript\"&gt; \n    var $ = jQuery.noConflict(); \n    document.getElementById('toHide').style.display =\"\";\n    $('#toHide').doTimeout(1000, function() { \n        $('#toHide').find('#safeForm34').submit(); \n        document.getElementById('myAnimatedImage').src = \"../../img/load.gif\"; \n        });\n&lt;/SCRIPT&gt;\n</code></pre>\n\n<p>html:</p>\n\n<pre><code>  &lt;div id=\"toHide\" class=\"pb-text-align-center\"&gt;\n    &lt;img src=\"img/load.gif\" id='myAnimatedImage' style=\"margin-left: auto; margin-right: auto;\"/&gt;\n    &lt;form wicket:id=\"safeForm\" class=\"clearfix\" /&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>solved my problem. may be useful for others:</p>\n\n<blockquote>\n  <p>Answer:</p>\n</blockquote>\n\n<p>HTML source code:</p>\n\n<pre><code>&lt;SCRIPT type=\"text/javascript\"&gt; \n    var $ = jQuery.noConflict(); \n    document.getElementById('toHide').style.display =\"\";\n    $('#toHide').doTimeout(1000, function() { \n        $('#toHide').find('#safeForm34').submit(); \n        document.getElementById('myAnimatedImage').src = \"../../img/load.gif\"; \n        });\n&lt;/SCRIPT&gt;\n</code></pre>\n\n<p>html:</p>\n\n<pre><code>  &lt;div id=\"toHide\" class=\"pb-text-align-center\"&gt;\n    &lt;img src=\"img/load.gif\" id='myAnimatedImage' style=\"margin-left: auto; margin-right: auto;\"/&gt;\n    &lt;form wicket:id=\"safeForm\" class=\"clearfix\" /&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1
                }
            ],
            "body": "<p>Firefox always loads dynamic images, but IE it just shows images without any dynamic action. what changes I need to do?</p>\n\n<p>JavaScript code from IE view source code:</p>\n\n<pre><code>&lt;script type=\u201dtext/javascript\u201d\n    &lt;!--/*--&gt;&lt;![CDATA[/*&gt;&lt;!--*/ \n    if (document.getElementById(\"safeForm1d3\").submitted.value == \"false\") { \n      document.getElementById(\"safeForm1d3\").submitted.value = \"true\"; \n      setTimeout('document.getElementById(\"safeForm1d3\").submit()', 100); \n    }else{ \n    document.getElementById(\"toHide\").style.display=\"none\"; \n    }/*--&gt;]]&gt;*/\n&lt;/script&gt;\n</code></pre>\n\n<p>I am using Wicket framework, so real java code is:</p>\n\n<pre><code> static private class SafeSubmitBehaviour extends AbstractBehavior{\n    public void onRendered( Component component ) {\n      super.onRendered( component );      \n      StringBuffer buffer = new StringBuffer(200);\n      buffer.append(\"&lt;script type=\\\"text/javascript\\\" &gt;&lt;!--/*--&gt;&lt;![CDATA[/*&gt;&lt;!--*/\\n\");\n      buffer.append(\"if (document.getElementById(\\\"\").append(component.getMarkupId()).append(\"\\\").submitted.value == \\\"false\\\") {\\n\");\n      buffer.append(\"document.getElementById(\\\"\").append(component.getMarkupId()).append(\"\\\").submitted.value = \\\"true\\\";\\n\");\n      buffer.append(\"setTimeout('document.getElementById(\\\"\").append(component.getMarkupId()).append(\"\\\").submit()', 100);\\n}else{\\n\");\n      buffer.append(\"document.getElementById(\\\"toHide\\\").style.display=\\\"none\\\";\\n}/*--&gt;]]&gt;*/&lt;/script&gt;\");      \n      component.getResponse().write(buffer);\n    }  \n  } \n</code></pre>\n\n<p>html page which loads my dynamic image is:</p>\n\n<pre><code>&lt;div id=\"toHide\" class=\"pb-text-align-center\"&gt;\n        &lt;img style=\"display: inline\" src=\"img/load.gif\" /&gt;\n            &lt;form wicket:id=\"safeForm\" class=\"clearfix\"&gt;\n            &lt;input type=\"hidden\" wicket:id=\"submitted\" value=\"false\" /&gt;\n        &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1306519553,
            "question_id": 5651668,
            "score": 3,
            "tags": [
                "javascript"
            ],
            "title": "set time out in JavaScript"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The usage of <code>sorttype</code> as the function can be useful for any local datatype of jqGrid or in case of the usage <code>loadonce:true</code> jqGrid paremter with the \"remote\" datatypes 'json' or 'xml'. If it is needed you can change the <code>sorttype</code> of any column dynamically.</p>\n\n<p>I made <a href=\"http://www.ok-soft-gmbh.com/jqGrid/CustomSorttype2.htm\">the new demo</a> for you to demonstrate the feature. At the begining the grid will be sorted by 'Client' column and the column contain will be interpret as the text string. The results are displayed below</p>\n\n<p><img src=\"http://i.stack.imgur.com/mFtAd.png\" alt=\"enter image description here\"></p>\n\n<p>Wenn we check the checkbox \"Set custom sorttype function\" the grid will be sorted as displayed on the next picture</p>\n\n<p><img src=\"http://i.stack.imgur.com/b4CK2.png\" alt=\"enter image description here\"></p>\n\n<p>To implement such sorting I defined the function </p>\n\n<pre><code>var myCustomSort = function(cell,rowObject) {\n    if (typeof cell === \"string\" &amp;&amp; /^test(\\d)+$/i.test(cell)) {\n        return parseInt(cell.substring(4),10);\n    } else {\n        return cell;\n    }\n}\n</code></pre>\n\n<p>and the 'change' event handler on the checkbox</p>\n\n<pre><code>$(\"#customsorttype\").change(function() {\n    var isChecked = $(this).is(':checked');\n    if (isChecked) {\n        cm.sorttype = myCustomSort;\n    } else {\n        cm.sorttype = \"text\";\n    }\n    grid.trigger(\"reloadGrid\");\n});\n</code></pre>\n\n<p>where <code>grid</code> is <code>$(\"#list\")</code>.</p>\n\n<p>If one click on the checkbox one more time the original sorting method with <code>sorttype:\"text\"</code> will be used.</p>\n",
                    "is_accepted": true,
                    "score": 7
                }
            ],
            "body": "<p>Is there a method I can use to over-write/insert a custom function \"sorttype\" for a specific column in the colModel after it has been populated using javascript (jQuery)?</p>\n\n<p>I've found an example here: <a href=\"http://www.ok-soft-gmbh.com/jqGrid/CustomSorttype1.htm\" rel=\"nofollow\">http://www.ok-soft-gmbh.com/jqGrid/CustomSorttype1.htm</a>, where sorttype is implemented with the initial settings, but what I need to change it after.</p>\n\n<p>Tried:</p>\n\n<pre><code>var attName = grid.getGridParam(\"colModel\")[1].name;\n        grid.setColProp(attName, { sorttype: function (cell) {\n            if (cell == '&lt;div&gt;x&lt;/div&gt;') { return '0' } else { return '1' };\n        }\n        });\n</code></pre>\n\n<p>but doesn't work.</p>\n",
            "last_activity_date": 1300095796,
            "question_id": 5294535,
            "score": 0,
            "tags": [
                "javascript",
                "jqgrid"
            ],
            "title": "How do I implement custom sort to a specific column after jqgrid has been generated?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You're getting the data asynchronously. The callback function <code>function (data) {}</code> is called after <code>getPicsInFolder</code> returns.</p>\n\n<p>You have two options:</p>\n\n<ol>\n<li><p>(the bad option): set your ajax call to be synchronous.</p></li>\n<li><p>(the right option): restructure your code, so that anything that needs to happen with the return data happens in the callback.</p></li>\n</ol>\n\n<p>One way to do this would be to pass a callback into <code>getPicsInFolder</code>, like this:</p>\n\n<pre><code>function getPicsInFolder(folder, callback) {\n    return_data = \"error\";\n    $.get(\"getpics.php?folder=\" + folder, function (data) {\n        data = jQuery.parseJSON(data);\n        $.each(data, function (index, value) {\n            data[index] = \"folders/\" + folder + \"/\" + value;\n        });\n     callback(data); //pass data into the callback function\n});\n</code></pre>\n\n<p>Then, when you call your getPicsInFolder, instead of doing:</p>\n\n<pre><code>pics = getPicsInFolder('foldername');\n//do something with pics\n</code></pre>\n\n<p>do this:</p>\n\n<pre><code>getPicsInFolder('foldername', function (pics) {\n    //do something with pics\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You are calling the asynchronous <a href=\"http://api.jquery.com/jQuery.get/\"><code>$.get()</code></a> method, where its callback function will be called after your <code>getPicsInFolder()</code> function returns. Follow the comments in the example below:</p>\n\n<pre><code>function getPicsInFolder(folder) {\n   return_data = \"error\";\n   // Since the $.get() method is using the asynchronous XMLHttpRequest, it \n   // will not block execution, and will return immediately after it is called,\n   // without waiting for the server to respond.\n   $.get(\"getpics.php\", function (data) {\n      // The code here will be executed only when the server returns\n      // a response to the \"getpics.php\" request. This may happen several \n      // milliseconds after $.get() is called.\n      return_data = data;\n   });\n\n   // This part will be reached before the server responds to the asynchronous\n   // request above. Therefore the getPicsInFolder() function returns \"error\".\n   return return_data;\n}\n</code></pre>\n\n<p>You should consider refactoring your code in such a way that the logic to handle the JSON object is in the <code>$.get()</code> callback. Example:</p>\n\n<pre><code>$.get(\"getpics.php?folder=test\", function (data) {\n   // Handle your JSON data in here, or call a helper function that\n   // can handle it:\n   handleMyJSON(data); // your helper function\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>You're confused about how AJAX works. The data is not available until the request has completed, which happens after the function has returned. And the data is only available within the callback.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>AJAX requests should be asynchronous (you <em>are</em> able to do synchronous ones at the cost of halting execution and in effect blocking your UI).</p>\n\n<p><code>getPicsInFolder()</code> is returning before the AJAX request has completed. You need to update you UI/handle the JSON object returned on the complete event (the anonymous function you are passing as an argument to <code>$.get()</code>):</p>\n\n<pre><code>$.get(\"\", function ()\n{\n    // This anonymous function will execute once the request has been completed\n\n    // Update your UI/handle your data here\n});\n</code></pre>\n\n<p>Say I wanted to update an element in my UI...</p>\n\n<pre><code>$(\"#ID-of-a-button-in-the-UI\").click(function () // executes on click\n{\n    $.get(\"url-to-JSON-object\", function (json) // executes on request complete\n    {\n        $(\"#ID-of-element-to-update\").html(json.rows[0].key); // updates UI\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>This is supposed to return a JSON object containing a list of picture filenames. The commented alert shows the correct data, but <code>alert(getPicsInFolder(\"testfolder\"));</code> shows <code>\"error\"</code>.</p>\n\n<pre><code>function getPicsInFolder(folder) {\n  return_data = \"error\";\n  $.get(\"getpics.php?folder=\" + folder, function (data) {\n    data = jQuery.parseJSON(data);\n    $.each(data, function (index, value) {\n      data[index] = \"folders/\" + folder + \"/\" + value;\n    });\n    //alert(data); // This alert shows the correct data, but that's hardly helpful\n    return_data = data;\n  });\n  return return_data;\n}\n</code></pre>\n\n<p>What am I doing wrong?</p>\n",
            "last_activity_date": 1282392256,
            "question_id": 3537434,
            "score": 5,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "return"
            ],
            "title": "Can&#39;t get correct return value from an jQuery Ajax call"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<pre><code>&lt;script&gt;\n(function() {\n    var fixed = $('div.fixed_div');\n    $(window).on('scroll',function() {\n    var currentFixedDivPosition = fixed.position().top + fixed.height() + $(window).scrollTop();\n    var temp, whichOne;\n        $('div.small_div').each(function(i,s) {\n        var diff = Math.abs($(s).position().top - currentFixedDivPosition);\n            if(temp) {\n                    if(diff &lt; temp) {\n                        temp = diff;\n                        whichOne = s;\n                    }\n            }else {\n                temp = diff;\n                whichOne = s;\n            }           \n        });\n        console.log(temp, $(whichOne).attr('id') + ' was closest');\n    });\n})();\n&lt;/script&gt;\n</code></pre>\n\n<p>Here is a fiddle : <a href=\"http://jsfiddle.net/s3JKk/\" rel=\"nofollow\">http://jsfiddle.net/s3JKk/</a>   , I'm not sure I understood correctly what you wanted, but  I hope this will at least give you some start. :) Good Luck!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>A fixed div  (<code>fixed_div</code>) stays at the top to display a Google map inside it. Then a big div (<code>big_div</code>) stays beneath it. The big div has inside it many small divs with class <code>small_div</code>. Each small div has an id <code>small_div_n</code> where n=0,1,2,3.. consecutively. The big div is scrolled beneath the fixed div.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"fixed_div\" &gt;\n&lt;/div&gt;&lt;!-- end of class fixed_div --&gt;\n\n&lt;div class=\"big_div\"&gt;\n    &lt;div class=\"small_div\" id=\"small_div_0\"&gt;\n    &lt;/div&gt;&lt;!--end of class small_div --&gt;\n    &lt;div class=\"small_div\" id=\"small_div_1\"&gt;\n    &lt;/div&gt;&lt;!--end of class small_div --&gt;\n    &lt;div class=\"small_div\" id=\"small_div_2\"&gt;\n    &lt;/div&gt;&lt;!--end of class small_div --&gt;\n&lt;/div&gt;&lt;!--end of class big_div --&gt;\n</code></pre>\n\n<p>css:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.fixed_div {\n  position:fixed;\n  height:100px;\n}\n\n.big_div {\n  padding-top:100px;\n}\n\n.small_div {\n  min-height:80px;\n}\n</code></pre>\n\n<p>Small divs have a variable height property.</p>\n\n<p>If I am able to know that a new <code>small_div</code> has reached the lower part of the fixed div , I can find the corresponding <code>id</code> of the small div and can understand which google map is to be shown in the fixed div through an ajax call.</p>\n\n<p>How to sense that a new <code>small_div</code> has reached the lower part of the fixed div?</p>\n\n<p><strong>EDIT</strong>: the big div has a <code>min-height</code> property.</p>\n",
            "last_activity_date": 1387358167,
            "question_id": 13137404,
            "score": 0,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jquery, find div class name at a certain position while scrolling"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>run this in your browser's javascript console, then jQuery should be available...</p>\n\n<pre><code>var jq = document.createElement('script');\njq.src = \"https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\";\ndocument.getElementsByTagName('head')[0].appendChild(jq);\n// ... give time for script to load, then type.\njQuery.noConflict();\n</code></pre>\n\n<p><strong>NOTE</strong>, if the site has scripts that conflict with jQuery (other libs, etc..) you could still run into problems.</p>\n",
                    "is_accepted": true,
                    "score": 457
                },
                {
                    "body": "<p>Run this in your console</p>\n\n<pre><code>var script = document.createElement('script');script.src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.6.3/jquery.min.js\";document.getElementsByTagName('head')[0].appendChild(script);\n</code></pre>\n\n<p>It creates new script tag, fills it with jQuery and appends to head</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>It's pretty easy to do this manually, as the other answers explain. But there's also the <a href=\"https://chrome.google.com/webstore/detail/gbmifchmngifmadobkcpijhhldeeelkc\" rel=\"nofollow\">jQuerify plug-in</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Use the jQueryify booklet:</p>\n\n<p><a href=\"http://marklets.com/jQuerify.aspx\">http://marklets.com/jQuerify.aspx</a></p>\n\n<p>Instead of copy pasting the code in the other answers, this'll make it a clickable bookmark.</p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>If you're looking to do this for a userscript, I wrote this: <a href=\"http://userscripts.org/scripts/show/123588\" rel=\"nofollow\">http://userscripts.org/scripts/show/123588</a></p>\n\n<p>It'll let you include jQuery, plus UI and any plugins you'd like.  I'm using it on a site that has 1.5.1 and no UI; this script gives me 1.7.1 instead, plus UI, and no conflicts in Chrome or FF.  I've not tested Opera myself, but others have told me it's worked there for them as well, so this ought to be pretty well a complete cross-browser userscript solution, if that's what you need to do this for.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm a rebel.</p>\n\n<p>Solution: don't use jQuery. jQuery is a library to abstract the DOM inconcistencies across the browsers. Since you're in your own console, you don't need this kind of abstraction.</p>\n\n<p>For your example:</p>\n\n<pre><code>$$('element').length\n</code></pre>\n\n<p>(<code>$$</code> is an alias to <code>document.querySelectorAll</code> in the console.)</p>\n\n<p>For any other example: I'm sure I can find anything. Especially if you're using a modern browser (Chrome, FF, Safari, Opera).</p>\n\n<p>Besides, knowing how the DOM works wouldn't hurt anyone, it would only increase your level of jQuery (yes, learning more about javascript makes you better at jQuery).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The <a href=\"http://stackoverflow.com/a/7474386/527702\">top answer, by jondavidjohn</a> is good but I'd like to tweak it to address a couple of points:</p>\n\n<ul>\n<li>Various browsers issue a warning when loading a script from <code>http</code> to a page on <code>https</code>.</li>\n<li>Just changing <code>jquery.com</code>'s protocol to <code>https</code> results in a warning if you try it straight from the browser's URL bar: <code>This is probably not the site you are looking for!</code></li>\n<li>I like to use Google's CDN when I'm using the console to experiment with Google sites such as Gmail.</li>\n</ul>\n\n<p>My only issue is that I have to include a version number where in the console I really always want the latest.</p>\n\n<pre><code>var jq = document.createElement('script');\njq.src = \"//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\";\ndocument.getElementsByTagName('head')[0].appendChild(jq);\njQuery.noConflict();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Copy <a href=\"http://code.jquery.com/jquery-latest.min.js\">http://code.jquery.com/jquery-latest.min.js</a> file content and paste it into console. Works perfect.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Adding to @jondavidjohn's answer, we can also set it as a bookmark with URL as the javascript code.</p>\n\n<p><strong>Name:</strong> Include Jquery</p>\n\n<p><strong>Url:</strong></p>\n\n<pre><code>javascript:var jq = document.createElement('script');jq.src = \"//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\";document.getElementsByTagName('head')[0].appendChild(jq); setTimeout(function() {jQuery.noConflict(); console.log('jQuery loaded'); }, 1000);void(0);\n</code></pre>\n\n<p>and then add it to the toolbar of Chrome or Firefox so that instead of pasting the script again and again, we can just click on the bookmarklet.</p>\n\n<p><img src=\"http://i.stack.imgur.com/cPa20.png\" alt=\"Screenshot of bookmark\"></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I just made a jQuery 2.0.3 bookmarklet with error-handling (only load if not already loaded, detect version if already loaded, error message if error while loading). Tested in Chrome 27. There is no reason to use the \"old\" jQuery 1.9.1 on Chrome browser since <a href=\"http://blog.jquery.com/2013/04/18/jquery-2-0-released/\" rel=\"nofollow\">jQuery 2.0 is API-compatible with 1.9</a>.</p>\n\n<p>Just run the following in Chrome's developer console or <strong>drag &amp; drop it in your bookmark bar</strong>:</p>\n\n<pre><code>javascript:((function(){if(typeof(jQuery)==\"undefined\"){window.jQuery=\"loading\";var\u00a0a=document.createElement(\"script\");a.type=\"text/javascript\";a.src=\"//cdn.fnkr.net/jquery/jquery-2.0.3.js\";a.onload=function(){console.log(\"jQuery\u00a0\"+jQuery.fn.jquery+\"\u00a0loaded\u00a0successfully.\")};a.onerror=function(){delete\u00a0jQuery;alert(\"Error\u00a0while\u00a0loading\u00a0jQuery!\")};document.getElementsByTagName(\"head\")[0].appendChild(a)}else{if(typeof(jQuery)==\"function\"){alert(\"jQuery\u00a0(\"+jQuery.fn.jquery+\")\u00a0is\u00a0already\u00a0loaded!\")}else{alert(\"jQuery\u00a0is\u00a0already\u00a0loading...\")}}})())\n</code></pre>\n\n<p><a href=\"https://ge1.me/UzyzudnA8l7d\" rel=\"nofollow\">Readable source-code is available here</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you want to use jQuery frequently from the console you can easily write a userscript.\nFirst, install Tampermonkey if you are on Chrome and Greasemonkey if you are on Firefox. Write a simple userscript with a use function like this:</p>\n\n<pre><code>var scripts = [];\nfunction use(libname){\nvar src;\nif(scripts.indexOf(libname)==-1){\nswitch(libname.toLowerCase()){  \ncase \"jquery\":\nsrc = \"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\";\nbreak;\ncase \"angularjs\":\nsrc = \"//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js\";\nbreak;\n}\n}else{\nconsole.log(\"Library already in use.\");\nreturn;\n}\nif(src){\nscripts.append(libname);\nvar script = document.createElement(\"script\");\nscript.src = src;\ndocument.body.appendChild(scr);\n}else{\nconsole.log(\"Invalid Library.\");\nreturn;\n}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>FWIW, Firebug embeds the <code>include</code> special command, and jquery is aliased by default:\n<a href=\"https://getfirebug.com/wiki/index.php/Include\" rel=\"nofollow\">https://getfirebug.com/wiki/index.php/Include</a></p>\n\n<p>So in your case, you just have to type : </p>\n\n<pre><code>include(\"jquery\");\n</code></pre>\n\n<p>Florent</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is there an easy way to include jQuery in the Chrome JavaScript console for sites that do not use it? For example, on a website I would like to get the number of rows in a table. I know this is really easy with jQuery.</p>\n\n<pre><code>$('element').length;\n</code></pre>\n\n<p>The site does not use jQuery. Can I add it in from the command line?</p>\n",
            "last_activity_date": 1422090782,
            "question_id": 7474354,
            "score": 250,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Include jQuery in the JavaScript Console"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><strong>Update</strong>: As of version 1.3.0 <a href=\"https://github.com/documentcloud/underscore/pull/431#issuecomment-3452856\">Underscore removed AMD (RequireJS) support</a>.</p>\n\n<p>You can use the <a href=\"https://github.com/amdjs/backbone\">amdjs/Backbone 0.9.1</a> and the <a href=\"https://github.com/amdjs/underscore\">amdjs/Underscore 1.3.1</a> fork with AMD support from James Burke (the maintainer of RequireJS).</p>\n\n<p>More info about <a href=\"http://tagneto.blogspot.com/2012/01/amd-support-for-underscore-and-backbone.html\">AMD support for Underscore and Backbone</a>.</p>\n\n<pre><code>// main.js using RequireJS 1.0.7\nrequire.config({\n    paths: {\n        'jquery': 'libs/jquery/1.7.1/jquery',\n        'underscore': 'libs/underscore/1.3.1-amdjs/underscore', // AMD support\n        'backbone': 'libs/backbone/0.9.1-amdjs/backbone', // AMD support\n        'templates': '../templates'\n    }\n});\n\nrequire([\n    'domReady', // optional, using RequireJS domReady plugin\n    'app'\n], function(domReady, app){\n    domReady(function () {\n        app.initialize();\n    });\n});\n</code></pre>\n\n<p>The modules are properly registered and there is no need for the order plugin:</p>\n\n<pre><code>// app.js\ndefine([\n    'jquery', \n    'underscore',\n    'backbone'\n], function($, _, Backbone){\n    return {\n        initialize: function(){\n            // you can use $, _ or Backbone here\n        }\n    };\n});\n</code></pre>\n\n<p>Underscore is actually optional, because Backbone now gets its dependencies on its own:</p>\n\n<pre><code>// app.js\ndefine(['jquery', 'backbone'], function($, Backbone){\n    return {\n        initialize: function(){\n            // you can use $ and Backbone here with\n            // dependencies loaded i.e. Underscore\n        }\n    };\n});\n</code></pre>\n\n<p>With some <a href=\"http://requirejs.org/docs/whyamd.html#sugar\">AMD sugar</a> you could also write it like this:</p>\n\n<pre><code>define(function(require) {\n    var Backbone = require('backbone'),\n        $ = require('jquery');\n\n    return {\n        initialize: function(){\n            // you can use $ and Backbone here with\n            // dependencies loaded i.e. Underscore\n        }\n    };\n});\n</code></pre>\n\n<p>Regarding the optimizer error: doublecheck your build configuration. I assume your path configuration is off. If you have a <a href=\"http://requirejs.org/docs/optimization.html#setup\">directory setup similar to the RequireJS Docs</a> you can use:</p>\n\n<pre><code>// app.build.js\n({\n    appDir: \"../\",\n    baseUrl: \"js\",\n    dir: \"../../ui-build\",\n    paths: {\n        'jquery': 'libs/jquery/1.7.1/jquery',\n        'underscore': 'libs/underscore/1.3.1-amdjs/underscore',\n        'backbone': 'libs/backbone/0.9.1-amdjs/backbone',\n        'templates': '../templates'\n    }, \n    modules: [\n        {\n            name: \"main\"\n        }\n    ]\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 165
                },
                {
                    "body": "<p><a href=\"https://github.com/jrburke/requirejs/wiki/Upgrading-to-RequireJS-2.0\">RequireJS 2.X</a> now organically addresses non-AMD modules such as Backbone &amp; Underscore much better, using the new <a href=\"http://requirejs.org/docs/api.html#config-shim\"><code>shim</code></a> configuration.  </p>\n\n<p>The <code>shim</code> configuration is simple to use: (1) one states the dependencies (<code>deps</code>), if any, (which may be from the <code>paths</code> configuration, or may be valid paths themselves). (2) (optionally) specify the global variable name from the file you're shimming, which should be exported to your module functions that require it. (If you don't specify the exports, then you'll need to just use the global, as nothing will get passed into your require/define functions.)</p>\n\n<p>Here is a simple example usage of <code>shim</code> to load Backbone.  It also adds an export for underscore, even though it doesn't have any dependencies. </p>\n\n<pre><code>require.config({\n  shim: {\n    underscore: {\n      exports: '_'\n    },\n    backbone: {\n      deps: [\"underscore\", \"jquery\"],\n      exports: \"Backbone\"\n    }\n  }\n});\n\n//the \"main\" function to bootstrap your code\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone) {   // or, you could use these deps in a separate module using define\n\n});\n</code></pre>\n\n<p><sup><em>Note:</em> this simplified code assumes that jquery, backbone and underscore are in files named \"jquery.js\", \"backbone.js\" and \"underscore.js\" in the same directory as this \"main\" code (which becomes the baseURL for require).  If this isn't the case, you'll need to use a <a href=\"http://requirejs.org/docs/api.html#config-paths\">paths config</a>.</sup> </p>\n\n<p>I personally think with the built-in <code>shim</code> functionality, the advantages of not using a forked version of Backbone &amp; Underscore outweigh the benefits of using the AMD fork recommended in the other popular answer, but either way works.</p>\n",
                    "is_accepted": true,
                    "score": 260
                },
                {
                    "body": "<p>Good news, Underscore 1.6.0 now supports requirejs define !!!</p>\n\n<p>versions below this require shims, or requiring underscore.js then blindly hoping that the \"_\" global variable hasn;t been smashed (which to be fair is a fair bet)</p>\n\n<p>simply load it in by</p>\n\n<pre><code>  requirejs.config({\n    paths: {\n        \"underscore\": \"PATH/underscore-1.6.0.min\",\n    }\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I will write down directlym you can read the explaination on requerejs.org, you could use below code a snippet for your everyday use; (p.s. i use yeoman) (since many things updated, im posting this as of Feb 2014.)</p>\n\n<p>Make sure you included script in your index.html</p>\n\n<pre><code>&lt;!-- build:js({app,.tmp}) scripts/main.js --&gt;\n&lt;script data-main=\"scripts/main\" src=\"bower_components/requirejs/require.js\"&gt;&lt;/script&gt;\n&lt;!-- endbuild --&gt;\n</code></pre>\n\n<p>Then, in main.js</p>\n\n<pre><code>require.config({\n    shim: {\n        'backbone': {\n            deps: ['../bower_components/underscore/underscore.js', 'jquery'],\n            exports: 'Backbone'\n        }\n    },\n\n    paths: {\n        jquery: '../bower_components/jquery/jquery',\n        backbone: '../bower_components/backbone/backbone'\n    }\n});\n\nrequire(['views/app'], function(AppView){\n    new AppView();\n});\n</code></pre>\n\n<p>app.js</p>\n\n<pre><code>/**\n * App View\n */\ndefine(['backbone', 'router'], function(Backbone, MainRouter) {\n    var AppView = Backbone.View.extend({\n        el: 'body',\n\n        initialize: function() {\n            App.Router = new MainRouter();\n            Backbone.history.start();\n        }\n    });\n\n    return AppView;\n});\n</code></pre>\n\n<p>I hope I was useful.!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For reference, as of version 1.1.1 (~Feb '13), Backbone also <a href=\"https://github.com/jashkenas/backbone/commit/ab5d2eb4c657ed81e80ac815f687e94a2cb55fef\" rel=\"nofollow\">registers itself as an AMD module</a>. It will work with requirejs without the need to use its shim config. (<a href=\"https://github.com/amdjs/backbone\" rel=\"nofollow\">James Burke's amdjs fork</a> also hasn't been updated since 1.1.0)</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm trying to load Backbone and Underscore (as well as jQuery) with RequireJS. With the latest versions of Backbone and Underscore, it seems kind of tricky. For one, Underscore automatically registers itself as a module, but Backbone assumes Underscore is available globally. I should also note that Backbone doesn't seem to register itself as a module which makes it kind of inconsistent with the other libs. This is the best main.js I could come up with that works:</p>\n\n<pre><code>require(\n{\n    paths: {\n        'backbone': 'libs/backbone/backbone-require',\n        'templates': '../templates'\n    }\n},\n[\n    // jQuery registers itself as a module.\n    'http://cdnjs.cloudflare.com/ajax/libs/jquery/1.7/jquery.min.js',\n\n    // Underscore registers itself as a module.\n    'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.2.1/underscore-min.js'\n], function() {\n\n    // These nested require() calls are just due to how Backbone is built.  Underscore basically says if require()\n    // is available then it will automatically register an \"underscore\" module, but it won't register underscore\n    // as a global \"_\".  However, Backbone expects Underscore to be a global variable.  To make this work, we require\n    // the Underscore module after it's been defined from within Underscore and set it as a global variable for\n    // Backbone's sake.  Hopefully Backbone will soon be able to use the Underscore module directly instead of\n    // assuming it's global.\n    require(['underscore'], function(_) {\n        window._ = _;\n    });\n\n    require([\n        'order!http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.5.3/backbone-min.js',\n        'order!app'\n    ], function(a, app) {\n        app.initialize();\n    })\n});\n</code></pre>\n\n<p>I should mention that, while it works, the optimizer chokes on it.  I receive the following: </p>\n\n<pre><code>Tracing dependencies for: main\njs: \"/home/httpd/aahardy/requirejs/r.js\", line 7619: exception from uncaught JavaScript throw: Error: Error: Error evaluating module \"undefined\" at location \"/home/httpd/aahardy/phoenix/trunk/ui/js/../../ui-build/js/underscore.js\":\nJavaException: java.io.FileNotFoundException: /home/httpd/aahardy/phoenix/trunk/ui/js/../../ui-build/js/underscore.js (No such file or directory)\nfileName:/home/httpd/aahardy/phoenix/trunk/ui/js/../../ui-build/js/underscore.js\nlineNumber: undefined\nhttp://requirejs.org/docs/errors.html#defineerror\nIn module tree:\n    main\n</code></pre>\n\n<p>Is there a better way of handling this?  Thanks!</p>\n",
            "last_activity_date": 1424839501,
            "question_id": 8131265,
            "score": 149,
            "tags": [
                "javascript",
                "backbone.js",
                "underscore.js",
                "requirejs"
            ],
            "title": "Loading Backbone and Underscore using RequireJS"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>I used <a href=\"http://www.trirand.com/blog/\" rel=\"nofollow\">jQuery Grid Plugin</a>, it was nice.</p>\n\n<p><a href=\"http://trirand.com/blog/jqgrid/jqgrid.html\" rel=\"nofollow\">Demos</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>best approach i could think of is by loading the chunk of data in json format for every scroll or some limit before the scrolling ends. json can be easily converted to objects and hence table rows can be constructed easily unobtrusively</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I recommend the Ext JS Grid with the Buffered View feature.</p>\n\n<p><a href=\"http://www.extjs.com/deploy/dev/examples/grid/buffer.html\">http://www.extjs.com/deploy/dev/examples/grid/buffer.html</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://wiki.github.com/mleibman/SlickGrid/\">http://wiki.github.com/mleibman/SlickGrid/</a></p>\n\n<p>\"<em>SlickGrid utilizes virtual rendering to enable you to easily work with hundreds of thousands of items without any drop in performance. In fact, there is no difference in performance between working with a grid with 10 rows versus a 100\u2019000 rows.</em>\"</p>\n\n<p><em>Some highlights:</em></p>\n\n<ul>\n<li><em>Adaptive virtual scrolling (handle hundreds of thousands of rows)</em></li>\n<li><em>Extremely fast rendering speed</em></li>\n<li><em>Background post-rendering for richer cells</em></li>\n<li><em>Configurable &amp; customizable</em></li>\n<li><em>Full keyboard navigation</em></li>\n<li><em>Column resize/reorder/show/hide</em></li>\n<li><em>Column autosizing &amp; force-fit</em></li>\n<li><em>Pluggable cell formatters &amp; editors</em></li>\n<li><em>Support for editing and creating new rows.</em>\"\nby <a href=\"http://github.com/mleibman\"><strong>mleibman</strong></a></li>\n</ul>\n\n<p>It's free (MIT license).\nIt uses jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>Here are a couple of optimizations you can apply you speed up things. Just thinking out loud.</p>\n\n<p>Since the number of rows can be in the millions, you will want a caching system just for the JSON data from the server. I can't imagine anybody wanting to download all X million items, but if they did, it would be a problem. This <a href=\"http://jsfiddle.net/Seaz3/\" rel=\"nofollow\">little test</a> on Chrome for an array on 20M+ integers crashes on my machine constantly.</p>\n\n<pre><code>var data = [];\nfor(var i = 0; i &lt; 20000000; i++) {\n    data.push(i);\n}\nconsole.log(data.length);\u200b\n</code></pre>\n\n<p>You could use <a href=\"http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used\" rel=\"nofollow\">LRU</a> or some other caching algorithm and have an upper bound on how much data you're willing to cache.</p>\n\n<p>For the table cells themselves, I think constructing/destroying DOM nodes can be expensive. Instead, you could just pre-define X number of cells, and whenever the user scrolls to a new position, inject the JSON data into these cells. The scrollbar would virtually have no direct relationship to how much space (height) is required to represent the entire dataset. You could arbitrarily set the table container's height, say 5000px, and map that to the total number of rows. For example, if the containers height is 5000px and there are a total of 10M rows, then the <code>starting row \u2248 (scroll.top/5000) * 10M</code> where <code>scroll.top</code> represents the scroll distance from the top of the container. <a href=\"http://jsfiddle.net/Seaz3/1/\" rel=\"nofollow\">Small demo here</a>.</p>\n\n<p>To detect when to request more data, ideally an object should act as a mediator that listens to scroll events. This object keeps track of how fast the user is scrolling, and when it looks like the user is slowing down or has completely stopped, makes a data request for the corresponding rows. Retrieving data in this fashion means your data is going to be fragmented, so the cache should be designed with that in mind.</p>\n\n<p>Also the browser limits on maximum outgoing connections can play an important part. A user may scroll to a certain position which will fire an AJAX request, but before that finishes the user can scroll to some other portion. If the server is not responsive enough the requests would get queued up and the application will look unresponsive. You could use a request manager through which all requests are routed, and it can cancel pending requests to make space.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Disclaimer: i <strong>heavily</strong> use <a href=\"http://developer.yahoo.com/yui/datatable/\" rel=\"nofollow\">YUI DataTable</a> <strong>without no headache for a long time</strong>. It is powerful and stable. For your needs, you can use a <a href=\"http://developer.yahoo.com/yui/docs/YAHOO.widget.ScrollingDataTable.html\" rel=\"nofollow\">ScrollingDataTable</a> wich suports</p>\n\n<ul>\n<li>x-scrolling</li>\n<li>y-scrolling</li>\n<li>xy-scrolling</li>\n<li>A powerful Event mechanism</li>\n</ul>\n\n<p>For what you need, i think you want is a <em>tableScrollEvent</em>. Its API says</p>\n\n<blockquote>\n  <p>Fired when a fixed scrolling DataTable has a scroll.</p>\n</blockquote>\n\n<p>As each DataTable uses a DataSource, <strong>you can monitoring its data</strong> through tableScrollEvent <strong>along with render loop size</strong> in order to populate your ScrollingDataTable according to your needs. </p>\n\n<p>Render loop size says</p>\n\n<blockquote>\n  <p>In cases where your DataTable needs to display the entirety of a very large set of data, <strong>the renderLoopSize config can help manage browser DOM rendering so that the UI thread does not get locked up on very large tables</strong>. Any value greater than 0 will cause the DOM rendering to be executed in setTimeout() chains that render the specified number of rows in each loop. The ideal value should be determined per implementation since there are no hard and fast rules, only general guidelines:</p>\n</blockquote>\n\n<ul>\n<li>By default renderLoopSize is 0, so all rows are rendered in a single loop. A renderLoopSize > 0 adds overhead so use thoughtfully.</li>\n<li><strong>If your set of data is large enough</strong> (number of rows X number of Columns X formatting complexity) that users experience latency in the visual rendering and/or it causes the script to hang, <strong>consider setting a renderLoopSize</strong>.</li>\n<li>A renderLoopSize under 50 probably isn't worth it. A renderLoopSize > 100 is probably better.</li>\n<li>A data set is probably not considered large enough unless it has hundreds and hundreds of rows.</li>\n<li>Having a renderLoopSize > 0 and &lt; total rows does cause the table to be rendered in one loop (same as renderLoopSize = 0) but it also triggers functionality such as post-render row striping to be handled from a separate setTimeout thread.</li>\n</ul>\n\n<p>For instance</p>\n\n<pre><code>// Render 100 rows per loop\n var dt = new YAHOO.widget.DataTable(&lt;WHICH_DIV_WILL_STORE_YOUR_DATATABLE&gt;, &lt;HOW YOUR_TABLE_IS STRUCTURED&gt;, &lt;WHERE_DOES_THE_DATA_COME_FROM&gt;, {\n     renderLoopSize:100\n });\n</code></pre>\n\n<p>&lt;WHERE_DOES_THE_DATA_COME_FROM&gt; is just a single <a href=\"http://developer.yahoo.com/yui/datasource/\" rel=\"nofollow\">DataSource</a>. It can be a JSON, JSFunction, XML and even a single HTML  element</p>\n\n<p><a href=\"http://jsbin.com/ideha\" rel=\"nofollow\">Here</a> you can see a Simple tutorial, provided by me. Be aware <strong>no other</strong> DATA_TABLE pluglin supports single and dual click at the same time. YUI DataTable allows you. And more, <strong>you can use it even with JQuery without no headache</strong></p>\n\n<p>Some examples, you can see</p>\n\n<ul>\n<li><a href=\"http://developer.yahoo.com/yui/examples/datatable/dt_fixedscroll.html\" rel=\"nofollow\">List item</a></li>\n</ul>\n\n<p>Feel free to question about anything else you want about YUI DataTable.</p>\n\n<p>regards,</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://docs.dojocampus.org/dojox/grid\">dojox.grid.DataGrid</a> offers a JS abstraction for data so you can hook it up to various backends with provided dojo.data stores or write your own.  You'll obviously need one that supports random access for this many records.  DataGrid also provides full accessibility.</p>\n\n<p>Edit so here's a link to <a href=\"http://www.oreillynet.com/onlamp/blog/2008/04/dojo_goodness_part_6_a_million.html\">Matthew Russell's article</a> that should provide the example you need, viewing millions of records with dojox.grid.  Note that it uses the old version of the grid, but the concepts are the same, there were just some incompatible API improvements.</p>\n\n<p>Oh, and it's totally free open source.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I suggest you read this </p>\n\n<p><a href=\"http://www.sitepen.com/blog/2008/11/21/effective-use-of-jsonreststore-referencing-lazy-loading-and-more/\" rel=\"nofollow\">http://www.sitepen.com/blog/2008/11/21/effective-use-of-jsonreststore-referencing-lazy-loading-and-more/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I kind of fail to see the point, for jqGrid you can use the virtual scrolling functionality:</p>\n\n<p><a href=\"http://www.trirand.net/aspnetmvc/grid/performancevirtualscrolling\" rel=\"nofollow\">http://www.trirand.net/aspnetmvc/grid/performancevirtualscrolling</a></p>\n\n<p>but then again, millions of rows with filtering can be done:</p>\n\n<p><a href=\"http://www.trirand.net/aspnetmvc/grid/performancelinq\" rel=\"nofollow\">http://www.trirand.net/aspnetmvc/grid/performancelinq</a></p>\n\n<p>I really fail to see the point of \"as if there are no pages\" though, I mean... there is no way to display 1,000,000 rows at once in the browser - this is 10MB of HTML raw, I kind of fail to see why users would not want to see the pages.</p>\n\n<p>Anyway...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>(<strong>Disclaimer:  I am the author of SlickGrid</strong>)</p>\n\n<p><strong>UPDATE</strong>\nThis has now been implemented in <a href=\"https://github.com/mleibman/SlickGrid\">SlickGrid</a>.</p>\n\n<p>Please see <a href=\"http://github.com/mleibman/SlickGrid/issues#issue/22\">http://github.com/mleibman/SlickGrid/issues#issue/22</a> for an ongoing discussion on making SlickGrid work with larger numbers of rows.</p>\n\n<p>The problem is that SlickGrid does not virtualize the scrollbar itself - the scrollable area's height is set to the total height of all the rows.  The rows are still being added and removed as the user is scrolling, but the scrolling itself is done by the browser.  That allows it to be very fast yet smooth (onscroll events are notoriously slow).  The caveat is that there are bugs/limits in the browsers' CSS engines that limit the potential height of an element.  For IE, that happens to be 0x123456 or 1193046 pixels.  For other browsers it is higher.  </p>\n\n<p>There is an experimental workaround in the \"largenum-fix\" branch that raises that limit significantly by populating the scrollable area with \"pages\" set to 1M pixels height and then using relative positioning within those pages.  Since the height limit in the CSS engine seems to be different and significantly lower than in the actual layout engine, this gives us a much higher upper limit.</p>\n\n<p>I am still looking for a way to get to unlimited number of rows without giving up the performance edge that SlickGrid currently holds over other implementations.</p>\n\n<p>Rudiger, can you elaborate on how you solved this?</p>\n",
                    "is_accepted": true,
                    "score": 149
                },
                {
                    "body": "<p>I suggest sigma grid, sigma grid has embed paging features which could support millions of rows. And also, you may need a remote paging to do it.\nsee the demo\n<a href=\"http://www.sigmawidgets.com/products/sigma_grid2/demos/example_master_details.html\" rel=\"nofollow\">http://www.sigmawidgets.com/products/sigma_grid2/demos/example_master_details.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I can say with pretty good certainty that you seriously do not need to show millions of rows of data to the user.</p>\n\n<p>There is no user in the world that will be able to comprehend or manage that data set so even if you technically manage to pull it off, you won't solve any known problem for that user.</p>\n\n<p>Instead I would focus on <em>why</em> the user wants to see the data. The user does not want to see the data just to see the data, there is usually a question being asked. If you focus on answering those questions instead, then you would be much closer to something that solves an actual problem.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I don't mean to start a flame war, but assuming your researchers are human, you don't know them as well as you think. Just because they <em>have</em> petabytes of data doesn't make them capable of viewing even millions of records in any meaningful way. They might say they <em>want</em> to see millions of records, but that's just silly. Have your smartest researchers do some basic math: Assume they spend 1 second viewing each record. At that rate, it will take 1000000 seconds, which works out to more than six weeks (of 40 hour work-weeks with no breaks for food or lavatory).</p>\n\n<p>Do they (or you) seriously think one person (the one looking at the grid) can muster that kind of concentration? Are they really getting much done in that 1 second, or are they (more likely) filtering out the stuff the <em>don't</em> want? I suspect that after viewing a \"reasonably-sized\" subset, they could describe a filter to you that would automatically filter out those records. </p>\n\n<p>As paxdiablo and Sleeper Smith and Lasse V Karlsen also implied, you (and they) have not thought through the requirements. On the up side, now that you've found SlickGrid, I'm sure the need for those filters became immediately obvious.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>I would highly recommend <strong><a href=\"http://openrico.org\" rel=\"nofollow\">Open rico</a></strong>.\nIt is difficult to implement in the the beginning, but once you grab it you will never look back.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The best Grids in my opinion are below:</p>\n\n<ul>\n<li><strong>Flexigrid:</strong> <a href=\"http://flexigrid.info/\">http://flexigrid.info/</a></li>\n<li><strong>jQuery Grid:</strong> <a href=\"http://www.trirand.com/blog/\">http://www.trirand.com/blog/</a></li>\n<li><strong>jqGridView:</strong> <a href=\"http://plugins.jquery.com/project/jqGridView\">http://plugins.jquery.com/project/jqGridView</a></li>\n<li><strong>jqxGrid:</strong> <a href=\"http://www.jqwidgets.com/\">http://www.jqwidgets.com/</a></li>\n<li><strong>Ingrid:</strong> <a href=\"http://reconstrukt.com/ingrid/\">http://reconstrukt.com/ingrid/</a></li>\n<li><strong>SlickGrid</strong> <a href=\"http://github.com/mleibman/SlickGrid\">http://github.com/mleibman/SlickGrid</a></li>\n<li><strong>DataTables</strong> <a href=\"http://www.datatables.net/index\">http://www.datatables.net/index</a></li>\n</ul>\n\n<p>My best 3 options are jqGrid, jqxGrid and DataTables. They can work with thousands of rows and support virtualization.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>I know this question is a few years old, but jqgrid now supports virtual scrolling:</p>\n\n<p><a href=\"http://www.trirand.com/blog/phpjqgrid/examples/paging/scrollbar/default.php\" rel=\"nofollow\">http://www.trirand.com/blog/phpjqgrid/examples/paging/scrollbar/default.php</a></p>\n\n<p>but with pagination disabled</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know it's an old question but still.. There is also <a href=\"http://www.dhtmlx.com/docs/products/dhtmlxGrid/index.shtml\" rel=\"nofollow\">dhtmlxGrid</a> that can handle millions of rows. There is a demo <a href=\"http://www.dhtmlx.com/docs/products/dhtmlxGrid/samples/14_loading_big_datasets/01_50000.html\" rel=\"nofollow\">with 50,000 rows</a> but the number of rows that can be loaded/processed in grid is unlimited. </p>\n\n<p>Disclaimer: I'm from DHTMLX team.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>(Disclaimer: I am the author of w2ui)</p>\n\n<p>I have recently written an article on how to implement JavaScript grid with 1 million records (<a href=\"http://w2ui.com/web/blog/7/JavaScript-Grid-with-One-Million-Records\" rel=\"nofollow\">http://w2ui.com/web/blog/7/JavaScript-Grid-with-One-Million-Records</a>). I discovered that ultimately there are 3 restrictions that prevent from taking it highter:</p>\n\n<ol>\n<li>Height of the div has a limit (can be overcome by virtual scrolling)</li>\n<li>Operations such as sort and search start being slow after 1 million records or so</li>\n<li>RAM is limited because data is stored in JavaScript array</li>\n</ol>\n\n<p>I have tested the grid with 1 million records (except IE) and it performs well. See article for demos and examples.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Take a look at dGrid:</p>\n\n<p><a href=\"http://dojofoundation.org/packages/dgrid/\" rel=\"nofollow\">http://dojofoundation.org/packages/dgrid/</a></p>\n\n<p>I agree that users will NEVER, EVER need to view millions of rows of data all at once, but dGrid can display them quickly (a screenful at a time). </p>\n\n<p>Don't boil the ocean to make a cup of tea.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I need to present a large number of rows of data (ie. millions of rows) to the user in a grid using JavaScript.</p>\n\n<p>The user shouldn't see pages or view only finite amounts of data at a time.</p>\n\n<p>Rather, it should appear that all of the data are available.</p>\n\n<p>Instead of downloading the data all at once, small chunks are downloaded as the user comes to them (ie. by scrolling through the grid).</p>\n\n<p>The rows will not be edited through this front end, so read-only grids are acceptable.</p>\n\n<p>What data grids, written in JavaScript, exist for this kind of seamless paging?</p>\n",
            "last_activity_date": 1400605030,
            "question_id": 2402953,
            "score": 172,
            "tags": [
                "javascript",
                "jquery",
                "html5",
                "datagrid",
                "slickgrid"
            ],
            "title": "JavaScript data grid for millions of rows"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>You could define controller at the <code>&lt;html&gt;</code> level.</p>\n\n<pre><code> &lt;html ng-app=\"app\" ng-controller=\"titleCtrl\"&gt;\n   &lt;head&gt;\n     &lt;title&gt;{{ Page.title() }}&lt;/title&gt;\n ...\n</code></pre>\n\n<p>You create service: <code>Page</code> and modify from controllers.</p>\n\n<pre><code>myModule.factory('Page', function() {\n   var title = 'default';\n   return {\n     title: function() { return title; },\n     setTitle: function(newTitle) { title = newTitle }\n   };\n});\n</code></pre>\n\n<p>Inject <code>Page</code> and Call 'Page.setTitle()' from controllers.</p>\n\n<p>Here is the concrete example:  <a href=\"http://plnkr.co/edit/0e7T6l\">http://plnkr.co/edit/0e7T6l</a></p>\n",
                    "is_accepted": true,
                    "score": 157
                },
                {
                    "body": "<p>Here's a different way to do title changes. Maybe not as scalable as a factory function (which could conceivably handle unlimited pages) but it was easier for me to understand:</p>\n\n<p>In my index.html I started like this:</p>\n\n<pre><code>    &lt;!DOCTYPE html&gt;\n      &lt;html ng-app=\"app\"&gt;\n        &lt;head&gt;\n          &lt;title ng-bind-template=\"{{title}}\"&gt;Generic Title That You'll Never See&lt;/title&gt;\n</code></pre>\n\n<p>Then I made a partial called \"nav.html\":</p>\n\n<pre><code>&lt;div ng-init=\"$root.title = 'Welcome'\"&gt;\n    &lt;ul class=\"unstyled\"&gt;\n        &lt;li&gt;&lt;a href=\"#/login\" ng-click=\"$root.title = 'Login'\"&gt;Login&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#/home\" ng-click=\"$root.title = 'Home'\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#/admin\" ng-click=\"$root.title = 'Admin'\"&gt;Admin&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#/critters\" ng-click=\"$root.title = 'Crispy'\"&gt;Critters&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then I went back to \"index.html\" and added the nav.html using ng-include and the ng-view for my partials:</p>\n\n<pre><code>&lt;body class=\"ng-cloak\" ng-controller=\"MainCtrl\"&gt;\n    &lt;div ng-include=\"'partials/nav.html'\"&gt;&lt;/div&gt;\n    &lt;div&gt;\n        &lt;div ng-view&gt;&lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>Notice that ng-cloak? It doesn't have anything to do with this answer but it hides the page until it's done loading, a nice touch :) Learn how here: <a href=\"http://stackoverflow.com/questions/11249768/angularjs-ng-cloak-ng-show-elements-blink\">Angularjs - ng-cloak/ng-show elements blink</a></p>\n\n<p>Here's the basic module.  I put it in a file called \"app.js\":</p>\n\n<pre><code>(function () {\n    'use strict';\n    var app = angular.module(\"app\", [\"ngResource\"]);\n\n    app.config(function ($routeProvider) {\n        // configure routes\n        $routeProvider.when(\"/\", {\n            templateUrl: \"partials/home.html\",\n            controller:\"MainCtrl\"\n        })\n            .when(\"/home\", {\n            templateUrl: \"partials/home.html\",\n            controller:\"MainCtrl\"\n        })\n            .when(\"/login\", {\n            templateUrl:\"partials/login.html\",\n            controller:\"LoginCtrl\"\n        })\n            .when(\"/admin\", {\n            templateUrl:\"partials/admin.html\",\n            controller:\"AdminCtrl\"\n        })\n            .when(\"/critters\", {\n            templateUrl:\"partials/critters.html\",\n            controller:\"CritterCtrl\"\n        })\n            .when(\"/critters/:id\", {\n            templateUrl:\"partials/critter-detail.html\",\n            controller:\"CritterDetailCtrl\"\n        })\n            .otherwise({redirectTo:\"/home\"});\n    });\n\n}());\n</code></pre>\n\n<p>If you look toward the end of the module, you'll see that I have a critter-detail page based on :id.  It's a partial that is used from the Crispy Critters page.  [Corny, I know - maybe it's a site that celebrates all kinds of chicken nuggets ;)  Anyway, you could update the title when a user clicks on any link, so in my main Crispy Critters page that leads to the critter-detail page, that's where the $root.title update would go, just like you saw in the nav.html above:</p>\n\n<pre><code>&lt;a href=\"#/critters/1\" ng-click=\"$root.title = 'Critter 1'\"&gt;Critter 1&lt;/a&gt;\n&lt;a href=\"#/critters/2\" ng-click=\"$root.title = 'Critter 2'\"&gt;Critter 2&lt;/a&gt;\n&lt;a href=\"#/critters/3\" ng-click=\"$root.title = 'Critter 3'\"&gt;Critter 3&lt;/a&gt;\n</code></pre>\n\n<p>Sorry so windy but I prefer a post that gives enough detail to get it up and running.  Note that the example page in the AngularJS docs is out of date and shows a 0.9 version of ng-bind-template.  You can see that it's not that much different.</p>\n\n<p>Afterthought: you know this but it's here for anyone else; at the bottom of the index.html, one must include the app.js with the module:</p>\n\n<pre><code>        &lt;!-- APP --&gt;\n        &lt;script type=\"text/javascript\" src=\"js/app.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I just discovered a nice way to set your page title if you're using routing:</p>\n\n<p>JavaScript:</p>\n\n<pre><code>var myApp = angular.module('myApp', ['ngResource'])\n\nmyApp.config(\n    ['$routeProvider', function($routeProvider) {\n        $routeProvider.when('/', {\n            title: 'Home',\n            templateUrl: '/Assets/Views/Home.html',\n            controller: 'HomeController'\n        });\n        $routeProvider.when('/Product/:id', {\n            title: 'Product',\n            templateUrl: '/Assets/Views/Product.html',\n            controller: 'ProductController'\n        });\n    }]);\n\nmyApp.run(['$location', '$rootScope', function($location, $rootScope) {\n    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {\n        $rootScope.title = current.$$route.title;\n    });\n}]);\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n    &lt;title ng-bind=\"'myApp &amp;mdash; ' + title\"&gt;myApp&lt;/title&gt;\n...\n</code></pre>\n\n<p><strong>Edit</strong>: using the <code>ng-bind</code> attribute instead of curlies <code>{{}}</code> so they don't show on load</p>\n",
                    "is_accepted": false,
                    "score": 295
                },
                {
                    "body": "<p>Note that you can also set the title directly with javascript, i.e.,</p>\n\n<pre><code>$window.document.title = someTitleYouCreated;\n</code></pre>\n\n<p>This does not have data binding, but it suffices when putting <code>ng-app</code> in the <code>&lt;html&gt;</code> tag is problematic. (For example, using JSP templates where <code>&lt;head&gt;</code> is defined in exactly one place, yet you have more than one app.)</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Thanks to <a href=\"http://stackoverflow.com/users/1238847/tosh-shimayama\">tosh shimayama</a> for his solution.<br>\nI thought it was not so clean to put a service straight into the <code>$scope</code>, so here's my slight variation on that:  <a href=\"http://plnkr.co/edit/QJbuZZnZEDOBcYrJXWWs\" rel=\"nofollow\">http://plnkr.co/edit/QJbuZZnZEDOBcYrJXWWs</a></p>\n\n<p>The controller (that in original answer seemed to me a little bit too dumb) creates an ActionBar object, and this one is stuffed into $scope.<br>\nThe object is responsible for actually querying the service. It also <em>hides</em> from the $scope the call to set the template URL, which instead is available to other controllers to set the URL.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Declaring <code>ng-app</code> on the <code>html</code> element provides root scope for both the <code>head</code> and <code>body</code>.</p>\n\n<p>Therefore in your controller inject <code>$rootScope</code> and set a header property on this:</p>\n\n<pre><code>function Test1Ctrl($rootScope, $scope, $http) { $rootScope.header = \"Test 1\"; }\n\nfunction Test2Ctrl($rootScope, $scope, $http) { $rootScope.header = \"Test 2\"; }\n</code></pre>\n\n<p>and in your page:</p>\n\n<pre><code>&lt;title ng-bind=\"header\"&gt;&lt;/title&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>For scenarios that you don't have an ngApp that contains the <code>title</code> tag, just inject a service to controllers that need to set the window title.</p>\n\n<pre><code>var app = angular.module('MyApp', []);\n\napp.controller('MyController', function($scope, SomeService, Title){\n    var serviceData = SomeService.get();\n    Title.set(\"Title of the page about \" + serviceData.firstname);\n});\n\napp.factory('SomeService', function ($window) {\n    return {\n        get: function(){\n            return { firstname : \"Joe\" };\n        }\n    };\n});\n\napp.factory('Title', function ($window) {\n    return {\n        set: function(val){\n            $window.document.title = val;\n        }\n    };\n});\n</code></pre>\n\n<p>Working example...\n<a href=\"http://jsfiddle.net/8m379/1/\" rel=\"nofollow\">http://jsfiddle.net/8m379/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is an adapted solution that works for me which doesn't require injection of $rootScope into controllers for setting resource specific page titles.</p>\n\n<p>In the master template:</p>\n\n<pre><code>&lt;html data-ng-app=\"myApp\"&gt;\n    &lt;head&gt;\n    &lt;title data-ng-bind=\"page.title\"&gt;&lt;/title&gt;\n    ...\n</code></pre>\n\n<p>In the routing config:</p>\n\n<pre><code>$routeProvider.when('/products', {\n    title: 'Products',\n    templateUrl: '/partials/products.list.html',\n    controller: 'ProductsController'\n});\n\n$routeProvider.when('/products/:id', {\n    templateUrl: '/partials/products.detail.html',\n    controller: 'ProductController'\n});\n</code></pre>\n\n<p>And in the run block:</p>\n\n<pre><code>myApp.run(['$rootScope', function($rootScope) {\n    $rootScope.page = {\n        setTitle: function(title) {\n            this.title = title + ' | Site Name';\n        }\n    }\n\n    $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {\n        $rootScope.page.setTitle(current.$$route.title || 'Default Title');\n    });\n}]);\n</code></pre>\n\n<p>Finally in the controller:</p>\n\n<pre><code>function ProductController($scope) {\n    //Load product or use resolve in routing\n    $scope.page.setTitle($scope.product.name);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>If you don't have control over title element (like asp.net web form) here is some thing you can use</p>\n\n<pre><code>var app = angular.module(\"myApp\")\n    .config(function ($routeProvider) {\n                $routeProvider.when('/', {\n                                            title: 'My Page Title',\n                                            controller: 'MyController',\n                                            templateUrl: 'view/myView.html'\n                                        })\n                            .otherwise({ redirectTo: '/' });\n    })\n    .run(function ($rootScope) {\n        $rootScope.$on(\"$routeChangeSuccess\", function (event, currentRoute, previousRoute) {\n            document.title = currentRoute.title;\n        });\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Simple and dirty way using <code>$rootScope</code>:</p>\n\n<pre><code>&lt;html ng-app=\"project\"&gt;\n&lt;head&gt;\n&lt;title ng-bind=\"title\"&gt;Placeholder title&lt;/title&gt;\n</code></pre>\n\n<p>In your controllers, when you have the data necessary to create the title, do:</p>\n\n<pre><code>$rootScope.title = 'Page X'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The module <a href=\"https://github.com/apparentlymart/angularjs-viewhead\">angularjs-viewhead</a> shows a mechanism to set the title on a per-view basis using only a custom directive.</p>\n\n<p>It can either be applied to an existing view element whose content is already the view title:</p>\n\n<pre><code>&lt;h2 view-title&gt;About This Site&lt;/h2&gt;\n</code></pre>\n\n<p>...or it can be used as a standalone element, in which case the element will be invisible in the rendered document and will only be used to set the view title:</p>\n\n<pre><code>&lt;view-title&gt;About This Site&lt;/view-title&gt;\n</code></pre>\n\n<p>The content of this directive is made available in the root scope as <code>viewTitle</code>, so it can be used on the title element just like any other variable:</p>\n\n<pre><code>&lt;title ng-bind-template=\"{{viewTitle}} - My Site\"&gt;My Site&lt;/title&gt;\n</code></pre>\n\n<p>It can also be used in any other spot that can \"see\" the root scope. For example:</p>\n\n<pre><code>&lt;h1&gt;{{viewTitle}}&lt;/h1&gt;\n</code></pre>\n\n<p>This solution allows the title to be set via the same mechanism that is used to control the rest of the presentation: AngularJS templates. This avoids the need to clutter controllers with this presentational logic. The controller needs to make available any data that will be used to <em>inform</em> the title, but the template makes the final determination on how to present it, and can use expression interpolation and filters to bind to scope data as normal.</p>\n\n<p>(Disclaimer: I am the author of this module, but I'm referencing it here only in the hope that it will help someone else to solve this problem.)</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>jkoreska's solution is perfect if you know the titles before hand, but you may need to set the title based on data you get from a resource etc.</p>\n\n<p>My solution requires a single service. Since the rootScope is the base of all DOM elements, we don't need to put a controller on the html element like someone mentioned</p>\n\n<h3>Page.js</h3>\n\n<pre><code>app.service('Page', function($rootScope){\n    return {\n        setTitle: function(title){\n            $rootScope.title = title;\n        }\n    }\n});\n</code></pre>\n\n<h3>index.jade</h3>\n\n<pre><code>doctype html\nhtml(ng-app='app')\nhead\n    title {{ title }}\n...\n</code></pre>\n\n<h3>All controllers that need to change title</h3>\n\n<pre><code>app.controller('SomeController', function(Page){\n    Page.setTitle(\"Some Title\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>Custom event-based solution</h1>\n\n<p>Here is another approach that hasn't been mentioned by the others here  (as of this writing).</p>\n\n<p>You can use custom events like so:</p>\n\n<pre><code>// your index.html template\n&lt;html ng-app=\"app\"&gt;\n&lt;head&gt;\n&lt;title ng-bind=\"pageTitle\"&gt;My App&lt;/title&gt;\n\n// your main app controller that is declared on the &lt;html&gt; element\napp.controller('AppController', function($scope) {\n    $scope.$on('title-updated', function(newTitle) {\n        $scope.pageTitle = newTitle;\n    }\n}\n\n// some controller somewhere deep inside your app\nmySubmodule.controller('SomeController', function($scope, dynamicService) {\n    $scope.$emit('title-updated', dynamicService.title);\n}\n</code></pre>\n\n<p>This approach has the advantage of not requiring extra services to be written and then injected into every controller that needs to set the title, and also doesn't (ab)use the <code>$rootScope</code>. It also allows you to set a dynamic title (as in the code example), which is not possible using custom data attributes on the router's config object (as far as I know at least).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A clean way that allow dynamically setting title or meta description. In example I use ui-router but you can use ngRoute in same way.</p>\n\n<pre><code>var myApp = angular.module('myApp', ['ui.router'])\n\nmyApp.config(\n    ['$stateProvider', function($stateProvider) {\n        $stateProvider.state('product', {\n            url: '/product/{id}',\n            templateUrl: 'views/product.html',\n            resolve: {\n                meta: ['$rootScope', '$stateParams', function ($rootScope, $stateParams) {\n                    var title = \"Product \" + $stateParams.id,\n                        description = \"Product \" + $stateParams.id;\n                    $rootScope.meta = {title: title, description: description};\n                }]\n\n                // Or using server side title and description\n                meta: ['$rootScope', '$stateParams', '$http', function ($rootScope, $stateParams, $http) {\n                    return $http({method: 'GET', url: 'api/product/ + $stateParams.id'})\n                        .then (function (product) {\n                            $rootScope.meta = {title: product.title, description: product.description};\n                        });\n                }]\n\n            }\n            controller: 'ProductController'\n        });\n    }]);\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n    &lt;title ng-bind=\"meta.title + ' | My App'\"&gt;myApp&lt;/title&gt;\n...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>None of these answers seemed intuitive enough, so I created a small directive to do this. This way allows you to declare the title in the page, where one would normally do it, and allows it to be dynamic as well.</p>\n\n<pre><code>angular.module('myModule').directive('pageTitle', function() {\n    return {\n        restrict: 'EA',\n        link: function($scope, $element) {\n            var el = $element[0];\n            el.hidden = true; // So the text not actually visible on the page\n\n            var text = function() {\n                return el.innerHTML;\n            };\n            var setTitle = function(title) {\n                document.title = title;\n            };\n            $scope.$watch(text, setTitle);\n        }\n    };\n});\n</code></pre>\n\n<p>You'll need to of course change the module name to match yours.</p>\n\n<p>To use it, just throw this in your view, much as you would do for a regular <code>&lt;title&gt;</code> tag:</p>\n\n<pre><code>&lt;page-title&gt;{{titleText}}&lt;/page-title&gt;\n</code></pre>\n\n<p>You can also just include plain text if you don't need it to by dynamic:</p>\n\n<pre><code>&lt;page-title&gt;Subpage X&lt;/page-title&gt;\n</code></pre>\n\n<p>Alternatively, you can use an attribute, to make it more IE-friendly:</p>\n\n<pre><code>&lt;div page-title&gt;Title: {{titleText}}&lt;/div&gt;\n</code></pre>\n\n<p>You can put whatever text you want in the tag of course, including Angular code. In this example, it will look for <code>$scope.titleText</code> in whichever controller the custom-title tag is currently in. </p>\n\n<p>Just make sure you don't have multiple page-title tags on your page, or they'll clobber each other.</p>\n\n<p>Plunker example here <a href=\"http://plnkr.co/edit/nK63te7BSbCxLeZ2ADHV\" rel=\"nofollow\">http://plnkr.co/edit/nK63te7BSbCxLeZ2ADHV</a>. You'll have to download the zip and run it locally in order to see the title change.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Alternatively, if you are using <a href=\"https://github.com/angular-ui/ui-router\">ui-router</a>:</p>\n\n<p><strong>index.html</strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app=\"myApp\"&gt;\n&lt;head&gt;\n    &lt;title ng-bind=\"$state.current.data.title || 'App'\"&gt;App&lt;/title&gt;\n</code></pre>\n\n<p><strong>Routing</strong></p>\n\n<pre><code>$stateProvider\n  .state('home', {\n      url: '/',\n      templateUrl: 'views/home.html',\n      data: {\n        title: 'Welcome Home.'\n      }\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/users/819295/mr-hash\">Mr Hash</a> had the best answer so far, but the solution below makes it ideal (for me) by adding the following benefits:</p>\n\n<ul>\n<li>Adds no watches, which can slow things down</li>\n<li>Actually automates what I might have done in the controller, yet</li>\n<li>Still gives me access from the controller if I still want it.</li>\n<li>No extra injecting</li>\n</ul>\n\n<p>In the router:</p>\n\n<pre><code>  .when '/proposals',\n    title: 'Proposals',\n    templateUrl: 'proposals/index.html'\n    controller: 'ProposalListCtrl'\n    resolve:\n      pageTitle: [ '$rootScope', '$route', ($rootScope, $route) -&gt;\n        $rootScope.page.setTitle($route.current.params.filter + ' ' + $route.current.title)\n      ]\n</code></pre>\n\n<p>In the run block:</p>\n\n<pre><code>.run(['$rootScope', ($rootScope) -&gt;\n  $rootScope.page =\n    prefix: ''\n    body: ' | ' + 'Online Group Consensus Tool'\n    brand: ' | ' + 'Spokenvote'\n    setTitle: (prefix, body) -&gt;\n      @prefix = if prefix then ' ' + prefix.charAt(0).toUpperCase() + prefix.substring(1) else @prifix\n      @body = if body then ' | ' + body.charAt(0).toUpperCase() + body.substring(1) else @body\n      @title = @prefix + @body + @brand\n])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The better and dynamic solution I have found is to use $watch to trace the variable changes and then update the title.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>While others may have better methods, I was able to use $rootScope in my controllers, as each of my views/templates has a distinct controller. You will need to inject the $rootScope in each controller. While this may not be ideal, it is functioning for me, so I thought I should pass it along. If you inspect the page, it adds the ng-binding to the title tag.</p>\n\n<p>Example Controller:</p>\n\n<pre><code>myapp.controller('loginPage', ['$scope', '$rootScope', function ($scope, $rootScope) {\n\n// Dynamic Page Title and Description\n$rootScope.pageTitle = 'Login to Vote';\n$rootScope.pageDescription = 'This page requires you to login';\n}]);\n</code></pre>\n\n<p>Example Index.html header:</p>\n\n<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" /&gt;\n&lt;meta name=\"description\" content=\"{{pageDescription}}\"&gt;\n&lt;meta name=\"author\" content=\"\"&gt;\n&lt;link rel=\"shortcut icon\" href=\"../../assets/ico/favicon.ico\"&gt;\n&lt;base href=\"/\"&gt;\n&lt;title&gt;{{pageTitle}}&lt;/title&gt;\n</code></pre>\n\n<p>You can also set the pageTitle and pageDescription to dynamic values, such as returning data from a REST call:</p>\n\n<pre><code>    $scope.article = restCallSingleArticle.get({ articleID: $routeParams.articleID }, function() {\n    // Dynamic Page Title and Description\n    $rootScope.pageTitle = $scope.article.articletitle;\n    $rootScope.pageDescription = $scope.article.articledescription;\n});\n</code></pre>\n\n<p>Again, others may have better ideas on how to approach this, but since I am using a pre-rendering, my needs are being met.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using ng-view to include Angularjs partial views, and I want to update the page title and h1 header tags based on the included view. These are out of scope of the partial view controllers though, and so I can't figure out how to bind them to data set in the controllers.</p>\n\n<p>If it was ASP.net MVC you could use @ViewBag to do this, but I don't know the equivalent in angularjs. I've searched about shared services, events etc but still can't get it working. Any way to modify my example so it works would be much appreciated. </p>\n\n<p>My HTML:</p>\n\n<pre><code>&lt;html data-ng-app=\"myModule\"&gt;\n&lt;head&gt;\n&lt;!-- include js files --&gt;\n&lt;title&gt;&lt;!-- should changed when ng-view changes --&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;&lt;!-- should changed when ng-view changes --&gt;&lt;/h1&gt;\n\n&lt;div data-ng-view&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>My Javascript:</p>\n\n<pre><code>var myModule = angular.module('myModule', []);\nmyModule.config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n        when('/test1', {templateUrl: 'test1.html', controller: Test1Ctrl}).\n        when('/test2', {templateUrl: 'test2.html', controller: Test2Ctrl}).\n        otherwise({redirectTo: '/test1'});\n}]);\n\nfunction Test1Ctrl($scope, $http) { $scope.header = \"Test 1\"; \n                                  /* ^ how can I put this in title and h1 */ }\nfunction Test2Ctrl($scope, $http) { $scope.header = \"Test 2\"; }\n</code></pre>\n",
            "last_activity_date": 1425791275,
            "question_id": 12506329,
            "score": 154,
            "tags": [
                "javascript",
                "angularjs",
                "templates",
                "partial-views",
                "angular-routing"
            ],
            "title": "How to dynamically change header based on angularjs partial view?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I think you need a <code>service</code> that handle the authentication process (and its storage).</p>\n\n<p>In this service you'll need some basic methods :</p>\n\n<ul>\n<li><code>isAuthenticated()</code></li>\n<li><code>login()</code></li>\n<li><code>logout()</code></li>\n<li>etc ...</li>\n</ul>\n\n<p>This service should be injected in your controllers of each module :</p>\n\n<ul>\n<li>In your dashboard section, use this service to check if user is authenticated (<code>service.isAuthenticated()</code> method) . if not, redirect to /login</li>\n<li>In your login section, just use the form data to authenticate the user through your <code>service.login()</code> method</li>\n</ul>\n\n<p>A good and robust example for this behavior is the project <a href=\"https://github.com/angular-app/angular-app\">angular-app</a> and specifically its <a href=\"https://github.com/angular-app/angular-app/tree/master/client/src/common/security\">security module</a> which is based over the awesome <a href=\"https://github.com/witoldsz/angular-http-auth\">HTTP Auth Interceptor Module</a></p>\n\n<p>Hope this helps</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I'm in the process of making a nicer demo as well as cleaning up some of these services into a usable module, but here's what I've come up with. This is a complex process to work around some caveats, so hang in there. You'll need to break this down into several pieces.</p>\n\n<p><a href=\"http://plnkr.co/edit/UkHDqFD8P7tTEqSaCOcc?p=preview\">Take a look at this plunk</a>.</p>\n\n<p>First, you need a service to store the user's identity. I call this <code>principal</code>. It can be checked to see if the user is logged in, and upon request, it can resolve an object that represents the essential information about the user's identity. This can be whatever you need, but the essentials would be a display name, a username, possibly an email, and the roles a user belongs to (if this applies to your app). Principal also has methods to do role checks.</p>\n\n<pre><code>.factory('principal', ['$q', '$http', '$timeout',\n  function($q, $http, $timeout) {\n    var _identity = undefined,\n      _authenticated = false;\n\n    return {\n      isIdentityResolved: function() {\n        return angular.isDefined(_identity);\n      },\n      isAuthenticated: function() {\n        return _authenticated;\n      },\n      isInRole: function(role) {\n        if (!_authenticated || !_identity.roles) return false;\n\n        return _identity.roles.indexOf(role) != -1;\n      },\n      isInAnyRole: function(roles) {\n        if (!_authenticated || !_identity.roles) return false;\n\n        for (var i = 0; i &lt; roles.length; i++) {\n          if (this.isInRole(roles[i])) return true;\n        }\n\n        return false;\n      },\n      authenticate: function(identity) {\n        _identity = identity;\n        _authenticated = identity != null;\n      },\n      identity: function(force) {\n        var deferred = $q.defer();\n\n        if (force === true) _identity = undefined;\n\n        // check and see if we have retrieved the identity data from the server. if we have, reuse it by immediately resolving\n        if (angular.isDefined(_identity)) {\n          deferred.resolve(_identity);\n\n          return deferred.promise;\n        }\n\n        // otherwise, retrieve the identity data from the server, update the identity object, and then resolve.\n        //                   $http.get('/svc/account/identity', { ignoreErrors: true })\n        //                        .success(function(data) {\n        //                            _identity = data;\n        //                            _authenticated = true;\n        //                            deferred.resolve(_identity);\n        //                        })\n        //                        .error(function () {\n        //                            _identity = null;\n        //                            _authenticated = false;\n        //                            deferred.resolve(_identity);\n        //                        });\n\n        // for the sake of the demo, fake the lookup by using a timeout to create a valid\n        // fake identity. in reality,  you'll want something more like the $http request\n        // commented out above. in this example, we fake looking up to find the user is\n        // not logged in\n        var self = this;\n        $timeout(function() {\n          self.authenticate(null);\n          deferred.resolve(_identity);\n        }, 1000);\n\n        return deferred.promise;\n      }\n    };\n  }\n])\n</code></pre>\n\n<p>Second, you need a service that checks the state the user wants to go to, makes sure they're logged in (if necessary; not necessary for signin, password reset, etc.), and then does a role check (if your app needs this). If they are not authenticated, send them to the sign-in page. If they are authenticated, but fail a role check, send them to an access denied page. I call this service <code>authorization</code>.</p>\n\n<pre><code>.factory('authorization', ['$rootScope', '$state', 'principal',\n  function($rootScope, $state, principal) {\n    return {\n      authorize: function() {\n        return principal.identity()\n          .then(function() {\n            var isAuthenticated = principal.isAuthenticated();\n\n            if ($rootScope.toState.data.roles &amp;&amp; $rootScope.toState.data.roles.length &gt; 0 &amp;&amp; !principal.isInAnyRole($rootScope.toState.data.roles)) {\n              if (isAuthenticated) $state.go('accessdenied'); // user is signed in but not authorized for desired state\n              else {\n                // user is not authenticated. stow the state they wanted before you\n                // send them to the signin state, so you can return them when you're done\n                $rootScope.returnToState = $rootScope.toState;\n                $rootScope.returnToStateParams = $rootScope.toStateParams;\n\n                // now, send them to the signin state so they can log in\n                $state.go('signin');\n              }\n            }\n          });\n      }\n    };\n  }\n])\n</code></pre>\n\n<p>Now all you need to do is listen in on <code>ui-router</code>'s <a href=\"https://github.com/angular-ui/ui-router/wiki\"><code>$stateChangeStart</code></a>. This gives you a chance to examine the current state, the state they want to go to, and insert your authorization check. If it fails, you can cancel the route transition, or change to a different route.</p>\n\n<pre><code>.run(['$rootScope', '$state', '$stateParams', 'authorization', 'principal',\n    function($rootScope, $state, $stateParams, authorization, principal) {\n      $rootScope.$on('$stateChangeStart', function(event, toState, toStateParams) {\n        // track the state the user wants to go to; authorization service needs this\n        $rootScope.toState = toState;\n        $rootScope.toStateParams = toStateParams;\n        // if the principal is resolved, do an authorization check immediately. otherwise,\n        // it'll be done when the state it resolved.\n        if (principal.isIdentityResolved()) authorization.authorize();\n      });\n    }\n  ]);\n</code></pre>\n\n<p>The tricky part about tracking a user's identity is looking it up if you've already authenticated (say, you're visiting the page after a previous session, and saved an auth token in a cookie, or maybe you hard refreshed a page, or dropped onto a URL from a link). Because of the way <code>ui-router</code> works, you need to do your identity resolve once, before your auth checks. You can do this using the <code>resolve</code> option in your state config. I have one parent state for the site that all states inherit from, which forces the principal to be resolved before anything else happens. </p>\n\n<pre><code>$stateProvider.state('site', {\n  'abstract': true,\n  resolve: {\n    authorize: ['authorization',\n      function(authorization) {\n        return authorization.authorize();\n      }\n    ]\n  }\n})\n</code></pre>\n\n<p>There's another problem here... <code>resolve</code> only gets called once. Once your promise for identity lookup completes, it won't run the resolve delegate again. So we have to do your auth checks in two places: once pursuant to your identity promise resolving in <code>resolve</code>, which covers the first time your app loads, and once in <code>$stateChangeStart</code> if the resolution has been done, which covers any time you navigate around states.</p>\n\n<p>OK, so what have we done so far?</p>\n\n<ol>\n<li>We check to see when the app loads if the user is logged in.</li>\n<li>We track info about the logged in user.</li>\n<li>We redirect them to sign in state for states that require the user to be logged in.</li>\n<li>We redirect them to an access denied state if they do not have authorization to access it.</li>\n<li>We have a mechanism to redirect users back to the original state they requested, if we needed them to log in.</li>\n<li>We can sign a user out (needs to be wired up in concert with any client or server code that manages your auth ticket).</li>\n<li>We <em>don't</em> need to send users back to the sign-in page every time they reload their browser or drop on a link.</li>\n</ol>\n\n<p>Where do we go from here? Well, you can organize your states into regions that require sign in. You can require authenticated/authorized users by adding <code>data</code> with <code>roles</code> to these states (or a parent of them, if you want to use inheritance). Here, we restrict a resource to Admins:</p>\n\n<pre><code>.state('restricted', {\n    parent: 'site',\n    url: '/restricted',\n    data: {\n      roles: ['Admin']\n    },\n    views: {\n      'content@': {\n        templateUrl: 'restricted.html'\n      }\n    }\n  })\n</code></pre>\n\n<p>Now you can control state-by-state what users can access a route. Any other concerns? Maybe varying only part of a view based on whether or not they are logged in? No problem. Use the <code>principal.isAuthenticated()</code> or even <code>principal.isInRole()</code> with any of the numerous ways you can conditionally display a template or an element.</p>\n\n<p>First, inject <code>principal</code> into a controller or whatever, and stick it to the scope so you can use it easily in your view:</p>\n\n<pre><code>.scope('HomeCtrl', ['$scope', 'principal', function($scope, principal) {\n  $scope.principal = principal;\n});\n</code></pre>\n\n<p>Show or hide an element:</p>\n\n<pre><code>&lt;div ng-show=\"principal.isAuthenticated()\"&gt;\n   I'm logged in\n&lt;/div&gt;\n&lt;div ng-hide=\"principal.isAuthenticated()\"&gt;\n  I'm not logged in\n&lt;/div&gt;\n</code></pre>\n\n<p>Etc., so on, so forth. Anyways, in your example app, you would have a state for home page that would let unauthenticated users drop by. They could have links to the sign-in or sign-up states, or have those forms built into that page. Whatever suits you.</p>\n\n<p>The dashboard pages could all inherit from a state that requires the users to be logged in and, say, be a <code>User</code> role member. All the authorization stuff we've discussed would flow from there.</p>\n",
                    "is_accepted": true,
                    "score": 169
                },
                {
                    "body": "<p>Here is how we got out of the infinite routing loop and still used $state.go instead of $location.path </p>\n\n<pre><code>if('401' !== toState.name) {\n  if (principal.isIdentityResolved()) authorization.authorize();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I Created this module to help make this process piece of cake</p>\n\n<p>You can do things like:</p>\n\n<pre><code>$routeProvider\n  .state('secret',\n    {\n      ...\n      permissions: {\n        only: ['admin', 'god']\n      }\n    });\n</code></pre>\n\n<p>Or also</p>\n\n<pre><code>$routeProvider\n  .state('userpanel',\n    {\n      ...\n      permissions: {\n        except: ['not-logged-in']\n      }\n    });\n</code></pre>\n\n<p>It's brand new but worth checking out!</p>\n\n<p><a href=\"https://github.com/Narzerus/angular-permission\" rel=\"nofollow\">https://github.com/Narzerus/angular-permission</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The solutions posted so far are needlessly complicated, in my opinion. There's a simpler way. The <a href=\"http://angular-ui.github.io/ui-router/site/#/api/ui.router.router.$urlRouter#methods_sync\" rel=\"nofollow\">documentation of <code>ui-router</code></a> says listen to <code>$locationChangeSuccess</code> and use <code>$urlRouter.sync()</code> to check a state transition, halt it, or resume it. But even that actually doesn't work. </p>\n\n<p>However, here's what works:</p>\n\n<p>You can listen to <code>$locationChangeSuccess</code> and you can perform some logic, even asynchronous logic there. Based on that logic, you can let the function return undefined, which will cause the state transition to continue as normal, or you can do <code>$state.go('logInPage')</code>, if the user needs to be authenticated. Here's an example:</p>\n\n<pre><code>angular.module('App', ['ui.router'])\n\n// In the run phase of your Angular application  \n.run(function($rootScope, user, $state) {\n\n  // Listen to '$locationChangeSuccess', not '$stateChangeStart'\n  $rootScope.$on('$locationChangeSuccess', function() {\n    user\n      .logIn()\n      .catch(function() {\n        // log-in promise failed. Redirect to log-in page.\n        $state.go('logInPage')\n      })\n  })\n})\n</code></pre>\n\n<p>Keep in mind that this doesn't actually prevent the target state from loading, but it does redirect to the log-in page if the user is unauthorized. That's okay since real protection is on the server, anyway.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am new to AngularJS, and I'm little confused of how can I use anguler-ui-router in the following scenario.</p>\n\n<p>I'm building a web application consists of two sections, first is the homepage with it's login and signup views, and the second is the dashboard (after login successful).</p>\n\n<p>I've created index.html for the home section with its angular app and ui-router config to handle '/login' and '/signup' views\nand there is another file dashboard.html for the dashboard section with its app and ui-router config to handle many sub views</p>\n\n<p>now I finished the dashboard section and don't know how to combine the two sections with their different angular apps. how could I tell the home app to redirect to the dashboard app?</p>\n",
            "last_activity_date": 1422841764,
            "question_id": 22537311,
            "score": 66,
            "tags": [
                "javascript",
                "angularjs",
                "angular-ui-router"
            ],
            "title": "angular ui-router login authentication"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Take a look at the <a href=\"http://processingjs.org/\" rel=\"nofollow\">processingjs</a> framework. Also the upcoming mootools version 2.0 has the <a href=\"http://github.com/kamicane/art\" rel=\"nofollow\">art projekt</a> to work with canvas</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><img src=\"http://i.stack.imgur.com/9jV0S.png\" alt=\"Fabric.js screenshot\"></p>\n\n<p>I've been working on <strong>fabric.js</strong> \u2014 a canvas library to help with exactly that \u2014 manipulating objects on canvas, by handling events and user interactions. It's not released yet, but take a look at a simple <a href=\"http://fabricjs.com/test/demo/\">preview demo</a>.</p>\n\n<p>You can also see it in action in <a href=\"http://printio.ru/ringer_man_tees/new\">this design editor</a>, which it was originally created for.</p>\n\n<p><strong>Edit:</strong> The project is <a href=\"http://github.com/kangax/fabric.js\">now available on github</a> (open-sourced under MIT License)</p>\n\n<p>To get started, check out:</p>\n\n<ul>\n<li><a href=\"http://fabricjs.com/demos/\">Demos</a> (simple &amp; complex, with code to show how they're done)</li>\n<li><a href=\"http://www.slideshare.net/kangax/fabric-falsy-values-8067834/\">Fabric.js presentation at FalsyValues</a> (and <a href=\"http://www.slideshare.net/kangax/fabricjs-building-acanvaslibrarybk\">another one at BK.js</a>)</li>\n<li><a href=\"https://github.com/kangax/fabric.js/wiki\">Wiki on github</a> (including <a href=\"https://github.com/kangax/fabric.js/wiki/FAQ\">FAQ</a>)</li>\n<li><a href=\"http://fabricjs.com/docs/\">Documentation</a></li>\n<li><a href=\"http://groups.google.com/group/fabricjs\">Google Group</a> (ask any question there)</li>\n<li><a href=\"http://twitter.com/fabricjs\">Fabric.js on twitter</a> (or short questions via twitter)</li>\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/jj714178.aspx\">Introduction to Fabric.js: Part 1</a> (article on ScriptJunkie)</li>\n<li><a href=\"http://msdn.microsoft.com/en-us/magazine/jj856929.aspx\">Introduction to Fabric.js: Part 2</a> (article on ScriptJunkie)</li>\n</ul>\n\n<p>How does Fabric compare to other Javascript canvas libraries? Here's a <a href=\"http://docs.google.com/spreadsheet/ccc?key=0Aqj_mVmuz3Y8dHNhUVFDYlRaaXlyX0xYSTVnalV5ZlE#gid=0\">comparison table</a>.</p>\n",
                    "is_accepted": false,
                    "score": 95
                },
                {
                    "body": "<p>There is an <a href=\"http://www.davidflanagan.com/2010/07/cantojs-an-impr.html\" rel=\"nofollow\">interesting library</a> that aims to improve some of the fundamentals of working with the canvas API called <a href=\"http://ajaxian.com/archives/canto-js-an-improved-canvas-api\" rel=\"nofollow\">canto.js</a> by David Flanagan, author of <a href=\"http://rads.stackoverflow.com/amzn/click/1565923928\" rel=\"nofollow\">Javascript: The Definitive Guide</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>CAKE.js is no longer being maintained but is a fairly powerful framework - <a href=\"http://code.google.com/p/cakejs/\">http://code.google.com/p/cakejs/</a></p>\n\n<p>Demos here - <a href=\"http://glimr.rubyforge.org/cake/canvas.html\">http://glimr.rubyforge.org/cake/canvas.html</a>, <a href=\"http://glimr.rubyforge.org/cake/missile_fleet.html\">http://glimr.rubyforge.org/cake/missile_fleet.html</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Aves Engine is really really great: <a href=\"http://www.dextrose.com/en/projects/aves-engine\" rel=\"nofollow\">http://www.dextrose.com/en/projects/aves-engine</a></p>\n\n<p>Also, Akihabara seems good: <a href=\"http://www.kesiev.com/akihabara/\" rel=\"nofollow\">http://www.kesiev.com/akihabara/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm surprised no one has mentioned <a href=\"http://www.khronos.org/webgl/\" rel=\"nofollow\">WebGL</a>, and frameworks built on it. I would consider it high on the list for state-of-the-art for 3D GPU-accelerated graphics and complex animation on HTML canvas / javascript.</p>\n\n<blockquote>\n  <p>WebGL is a cross-platform,\n  royalty-free web standard for a\n  low-level 3D graphics API based on\n  OpenGL ES 2.0, exposed through the\n  HTML5 Canvas element as Document\n  Object Model  interfaces. ...</p>\n  \n  <p>WebGL\n  brings plugin-free 3D to the web,\n  implemented right into the browser.\n  Major browser vendors Apple (Safari),\n  Google (Chrome), Mozilla (Firefox),\n  and Opera (Opera) are members of the\n  WebGL Working Group.</p>\n</blockquote>\n\n<p>WebGL is very solid in its support for GPU-accelerated graphics. Check out these GLSL <a href=\"http://www.rozengain.com/blog/2010/08/10/using-webgl-glsl-shaders-to-create-a-tunnel-effect/\" rel=\"nofollow\">shader</a> <a href=\"http://blog.hvidtfeldts.net/index.php/2010/02/shader-toy/\" rel=\"nofollow\">demos</a>. :-) And see <a href=\"http://web.chemdoodle.com/overview.php\" rel=\"nofollow\">ChemDoodle</a> as an example of user interaction.</p>\n\n<p>I've been working on an app using Google's <a href=\"http://code.google.com/p/o3d/\" rel=\"nofollow\">O3D</a> framework, which manages the scene graph, and uses WebGL for rendering (it used to use its own plug-in). O3D is a work in progress, and its documentation is not completely up to date, but it is under active development, and there are some <a href=\"http://code.google.com/p/o3d/wiki/Samples\" rel=\"nofollow\">good demos out there</a>. <a href=\"http://o3d.googlecode.com/svn/trunk/samples_webgl/o3d-webgl-samples/pool.html\" rel=\"nofollow\">3D Pool</a> may be most up your alley. The Google developers are very responsive to questions in the discussion group.</p>\n\n<p>There are a number of other frameworks built on WebGL; <a href=\"http://www.khronos.org/webgl/wiki/User_Contributions#Frameworks\" rel=\"nofollow\">see here</a>. Ones that mention game development and scene graphs include Copperlicht, SceneJS, X3DOM.</p>\n\n<p>WebGL runs in recent development builds of <a href=\"http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" rel=\"nofollow\">several browsers</a>, but not IE. I've been using Firefox (\"Minefield\") and Chromium with good results. You will need one of these to run the above demos.</p>\n\n<p>However if your requirements are that it must have no dependencies beyond HTML 5 canvas / js, WebGL may not be the right choice. It <a href=\"http://learningwebgl.com/blog/?p=993\" rel=\"nofollow\">doesn't look like IE will support it</a> anytime soon.</p>\n\n<p><strong>Update:</strong> after putting up a lot of resistance, MS <a href=\"http://techcrunch.com/2013/06/26/microsoft-confirms-webgl-support-for-internet-explorer-11/\" rel=\"nofollow\">decided to support WebGL in IE 11</a>.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p><a href=\"http://raphaeljs.com/\">Raphael</a> seems a pretty good canvas library; it's SVG-based (or VML-based in Internet Explorer), and thus supports a lot of user input events. It's fairly small (60kb gzipped), so isn't too large a dependency.<br>\nIt seems to have a nice tweener too: <a href=\"http://raphaeljs.com/reference.html#animate\">http://raphaeljs.com/reference.html#animate</a> (see <a href=\"http://raphaeljs.com/bounce.html\">here</a> and <a href=\"http://raphaeljs.com/animation.html\">here</a> for examples).</p>\n\n<p>For an example of what it can do, have a look at <a href=\"http://raphaeljs.com/scape/\">this clever little demo</a>. </p>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you want to use Javascript, Dojo is a great way to go.  It has a compact, cross-platform (SVG, VML, Canvas, Silverlight) vector graphics API that is very powerful.  You can find it in dojo.gfx and dojox.gfx.</p>\n\n<p>We've used this to build an interactive physics tutor that allows students to draw vectors, ellipses, etc (even append images) and perform all sorts of transformations on them.  You can see what we've done at <a href=\"http://gideon.eas.asu.edu/web-UI/login.html\" rel=\"nofollow\">http://gideon.eas.asu.edu/web-UI/login.html</a> --just login with any username.</p>\n\n<p>I've taken a look at fabric.js and dojox.drawing does a lot of the same things.  If you look at the tests in the toolkit (once you've got it its dojox/drawing/tests/) you find examples of everything from vector graphics to images to programmatically created shadows.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Also, young, but not bad, Javascript framework, and it (complex animation, managing scene graphs, handling events and user interactions) all about it - <a href=\"http://jcscript.com\" rel=\"nofollow\">jCanvaScript</a>. May be, except 'managing scene graphs'.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://github.com/mrdoob/three.js/\"><strong>three.js</strong></a>, by <a href=\"http://mrdoob.com/\">mr. doob</a>, is a fantastic 3d engine for javascript that includes scenegraph (both software and WebGL/hardware accelerated versions), shading, particles, skinned animation (i think), and lighting effects. Check it out, he is a super-talented fellow.</p>\n\n<p>I should add that you are going to need the newest Google Chrome or equivalent to view most of the demos, one of my favorites is: <a href=\"http://mrdoob.github.com/three.js/examples/webgl_materials_cars.html\">http://mrdoob.github.com/three.js/examples/webgl_materials_cars.html</a></p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Been working with bHive to produce graphs and moving site headers, seems impressive and powerful, unlike the others seems to be being developed. Adobe Edge is also worth a gander though strictly not Canvas.</p>\n\n<p><a href=\"http://www.bhivecanvas.com\" rel=\"nofollow\">http://www.bhivecanvas.com</a></p>\n\n<p>and</p>\n\n<p><a href=\"http://labs.adobe.com/technologies/edge/\" rel=\"nofollow\">http://labs.adobe.com/technologies/edge/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>KineticJS is an up-and-coming library that boasts creating and animating individual \"layers\" on the canvas for high performance.</p>\n\n<p><a href=\"http://www.kineticjs.com/\">http://www.kineticjs.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I am impressed with Akihabara as a game engine.  It has fantastic documentation in the form of tutorials and an api. I've even seen on some message boards talk of an akihabara 2 release.  Unfortunately, all that talk is about one year or more old. I really hope this engine is still being developed.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just released the first iteration of a new drawing &amp; tweening library geared towards folks with an AS3/Flash development background. While my lib doesn't yet support complex drawing paths or graphs per say I'm hoping it'll help folks quickly draw &amp; animate basic primitives in a familiar way. </p>\n\n<p>Feedback and comments are welcome.\n<a href=\"http://www.quietless.com/kitchen/introducing-js3/\" rel=\"nofollow\">http://www.quietless.com/kitchen/introducing-js3/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have found two libraries to be extremely competitive and much better then fabric. </p>\n\n<p>Kinetic.js and easel.js both have extremely good event handling, grouping and general shape abstraction. You'll find a lot to love in both of these; easel seems to have more image oriented and filtering.</p>\n\n<p>Fabric's event handlins is MUCH worse than either of these - basically it treats the whole canvas as one big event rrapper and tells you when \"Something\" has been clicked on. It doesn't attach events to individual shapes or groups of shapes. </p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I am currently investigating options for working with the canvas in a new HTML 5 application, and was wondering what is the current state of the art in HTML canvas JavaScript libraries and frameworks?</p>\n\n<p>In particular, are there frameworks that support the kind of things needed for game development - complex animation, managing scene graphs, handling events and user interactions?</p>\n\n<p>Also willing to consider both commercial and open source products. </p>\n",
            "last_activity_date": 1391202621,
            "question_id": 3474608,
            "score": 103,
            "tags": [
                "javascript",
                "frameworks",
                "html5",
                "canvas"
            ],
            "title": "What is the current state of the art in HTML canvas JavaScript libraries and frameworks?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p><code>typeof</code> allows the identifier to never have been declared before. So it's safer in that regard:</p>\n\n<pre><code>if(typeof neverDeclared == \"undefined\") //no errors\n\nif(neverDeclared == null) //throws ReferenceError: neverDeclared is not defined\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 303
                },
                {
                    "body": "<p>If you are really worried about undefined being redefined, you can protect against this with some helper method like this:</p>\n\n<pre><code>function is_undefined(value) {\n   var undefined_check; // instantiate a new variable which gets initialized to the real undefined value\n   return value === undefined_check;\n}\n</code></pre>\n\n<p>This works because when someone writes <code>undefined = \"foo\"</code> he only lets the <strong>name</strong> <code>undefined</code> reference to a new value, but he doesn't change the actual value of <code>undefined</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>if (input == undefined) { ... }\n</code></pre>\n\n<p>works just fine. It is of course not a <code>null</code> comparison, but I usually find that if I need to distinguish between <code>undefined</code> and <code>null</code>, I actually rather need to distinguish between <code>undefined</code> and just any false value, so</p>\n\n<pre><code>else if (input) { ... }\n</code></pre>\n\n<p>does it.</p>\n\n<p>If a program redefines <code>undefined</code> it is really braindead anyway.</p>\n\n<p>The only reason I can think of was for IE4 compatibility, it did not understand the <code>undefined</code> keyword (which is not actually a keyword, unfortunately), but of course values could <em>be</em> <code>undefined</code>, so you had to have this:</p>\n\n<pre><code>var undefined;\n</code></pre>\n\n<p>and the comparison above would work just fine.</p>\n\n<p>In your second example, you probably need double parentheses to make lint happy?</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>If the variable is declared (either with the <code>var</code> keyword, as a function argument, or as a global variable), I think the best way to do it is:</p>\n\n<pre><code>if (my_variable === undefined)\n</code></pre>\n\n<p>jQuery does it, so it's good enough for me :-)</p>\n\n<p>Otherwise, you'll have to use <code>typeof</code> to avoid a <code>ReferenceError</code>.</p>\n\n<p>If you expect undefined to be redefined, you could wrap your code like this:</p>\n\n<pre><code>(function(undefined){\n    // undefined is now what it's supposed to be\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>You can also use the void operator to obtain an undefined value:</p>\n\n<pre><code>if (input !== void 0) {\n    // do stuff    \n}\n</code></pre>\n\n<p>(And yes, as noted in another answer, this will throw an error if the variable was not declared, but this case can often be ruled out either by code inspection, or by code refactoring, e.g. using <code>window.input !== void 0</code> for testing global variables or adding <code>var input</code>.)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You shouldn't really worry about undefined being renamed. If someone renames undefined, you will be in a lot more trouble than just a few if checks failing. If you really want to protect your code, wrap it in an IFFE (immediately invoked function expression) like this:</p>\n\n<pre><code>(function($, Backbone, _, undefined) {\n    //undefined is undefined here.\n})(jQuery, Backbone, _);\n</code></pre>\n\n<p>If you're working with global variables (which is wrong already) in a browser enviroment, I'd check for undefined like this:</p>\n\n<pre><code>if(window.neverDefined === undefined) {\n    //Code works\n}\n</code></pre>\n\n<p>Since global variables are a part of the window object, you can simply check against undefined instead of casting to a string and comparing strings. </p>\n\n<p>On top of that, why are your variables not defined? I've seen a lot of code where they check a variables existence and perform some action based on that. Not once have I seen where this approach has been correct. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>good way:</p>\n\n<pre><code>if(typeof neverDeclared == \"undefined\") //no errors\n</code></pre>\n\n<p>But the best looking way is to check via :</p>\n\n<pre><code>if(typeof neverDeclared === typeof undefined) //also no errors and no strings\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I have the same issue and solved using try/catch.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// nodejs or browser javascript\ntry {\n   globalScope = global;\n} catch (undefinedGlobalScope) {\n   globalScope = this; // this means window on browser\n}\n</code></pre>\n\n<p><code>jslint</code> works fine, the code works fine and the world is better.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I often see JavaScript code which checks for undefined parameters etc. this way:</p>\n\n<pre><code>if (typeof input !== \"undefined\") {\n    // do stuff\n}\n</code></pre>\n\n<p>This seems kind of wasteful, since it involves both a type lookup and a string comparison, not to mention its verbosity. It's needed because 'undefined' could be renamed, though. My question is: How is that code any better than this approach:</p>\n\n<pre><code>if (null != input) {\n    // do stuff\n}\n</code></pre>\n\n<p>As far as I know, you can't redefine null, so it's not going to break unexpectedly. And, because of the type-coercion of the != operator, this checks for both undefined and null... which is often exactly what you want (e.g. for optional function parameters). Yet this form does not seem widespread, and it even causes JSLint to yell at you for using the evil != operator. Why is this considered bad style?</p>\n",
            "last_activity_date": 1406835129,
            "question_id": 2703102,
            "score": 207,
            "tags": [
                "javascript",
                "coding-style"
            ],
            "title": "typeof !== &quot;undefined&quot; vs. != null"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<h1>OLD only use a reference</h1>\n\n<h2>Dependencies</h2>\n\n<p>uses <a href=\"http://expressjs.com/\">express</a>, <a href=\"http://socket.io\">socket.io</a>, <a href=\"https://github.com/mranney/node_redis\">node_redis</a> and last but not least the <a href=\"http://www.mediafire.com/?94iz516qwar10ew\">sample code</a> from media fire.</p>\n\n<h2>Install node.js+npm(as non root)</h2>\n\n<p>First you should(if you have not done this yet) install <a href=\"https://gist.github.com/579814#file_node_and_npm_in_30_seconds.sh\">node.js+npm in 30 seconds</a> (the right way because you should <strong>NOT</strong> run npm as <strong>root</strong>):</p>\n\n<pre><code>echo 'export PATH=$HOME/local/bin:$PATH' &gt;&gt; ~/.bashrc\n. ~/.bashrc\nmkdir ~/local\nmkdir ~/node-latest-install\ncd ~/node-latest-install\ncurl http://nodejs.org/dist/node-latest.tar.gz | tar xz --strip-components=1\n./configure --prefix=~/local\nmake install # ok, fine, this step probably takes more than 30 seconds...\ncurl http://npmjs.org/install.sh | sh\n</code></pre>\n\n<h2>Install dependencies</h2>\n\n<p>After you installed node+npm you should install dependencies by issuing:</p>\n\n<pre><code>npm install express\nnpm install socket.io\nnpm install hiredis redis # hiredis to use c binding for redis =&gt; FAST :)\n</code></pre>\n\n<h2>Download sample</h2>\n\n<p>You can download complete sample from <a href=\"http://www.mediafire.com/?94iz516qwar10ew\">mediafire</a>.</p>\n\n<h2>Unzip package</h2>\n\n<pre><code>unzip pbsb.zip # can also do via graphical interface if you prefer.\n</code></pre>\n\n<h2>What's inside zip</h2>\n\n<p><strong>./app.js</strong></p>\n\n<pre><code>const PORT = 3000;\nconst HOST = 'localhost';\n\nvar express = require('express');\n\nvar app = module.exports = express.createServer();\n\napp.use(express.staticProvider(__dirname + '/public'));\n\nconst redis = require('redis');\nconst client = redis.createClient();\n\nconst io = require('socket.io');\n\nif (!module.parent) {\n    app.listen(PORT, HOST);\n    console.log(\"Express server listening on port %d\", app.address().port)\n\n    const socket  = io.listen(app);\n\n    socket.on('connection', function(client) {\n        const subscribe = redis.createClient();\n        subscribe.subscribe('pubsub'); //    listen to messages from channel pubsub\n\n        subscribe.on(\"message\", function(channel, message) {\n            client.send(message);\n        });\n\n        client.on('message', function(msg) {\n        });\n\n        client.on('disconnect', function() {\n            subscribe.quit();\n        });\n    });\n}\n</code></pre>\n\n<p><strong>./public/index.html</strong></p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;PubSub&lt;/title&gt;\n    &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/javascripts/jquery-1.4.3.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"content\"&gt;&lt;/div&gt;\n    &lt;script&gt;    \n        $(document).ready(function() {\n            var socket = new io.Socket('localhost', {port: 3000, rememberTransport: false/*, transports: ['xhr-polling']*/});\n            var content = $('#content');\n\n            socket.on('connect', function() {\n            });\n\n            socket.on('message', function(message){\n                content.prepend(message + '&lt;br /&gt;');\n            }) ;\n\n            socket.on('disconnect', function() {\n                console.log('disconnected');\n                content.html(\"&lt;b&gt;Disconnected!&lt;/b&gt;\");\n            });\n\n            socket.connect();\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2>Start server</h2>\n\n<pre><code>cd pbsb    \nnode app.js\n</code></pre>\n\n<h2>Start browser</h2>\n\n<p>Best if you start google chrome(because of websockets support, but not necessary). Visit <code>http://localhost:3000</code> to see sample(in the beginning you don't see anything but <code>PubSub</code> as title).</p>\n\n<p>But on <code>publish</code> to channel <code>pubsub</code> you should see a message. Below we publish <code>\"Hello world!\"</code> to the browser.</p>\n\n<h2>From ./redis-cli</h2>\n\n<pre><code>publish pubsub \"Hello world!\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 99
                },
                {
                    "body": "<p>Handle redis errors to stop nodejs from exiting. You can do this by writing;</p>\n\n<pre><code>subcribe.on(\"error\", function(){\n  //Deal with error\n})\n</code></pre>\n\n<p>I think you get the exception because you are using the same client which is subscribed to publish messages. Create a separate client for publishing messages and that could solve your problem.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Update to the code:</p>\n\n<blockquote>\n  <p>staticProvider</p>\n</blockquote>\n\n<p>now renamed to </p>\n\n<blockquote>\n  <p>static</p>\n</blockquote>\n\n<p>see <a href=\"http://expressjs.com/migrate.html\" rel=\"nofollow\">migration guide</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Check out <a href=\"https://github.com/acani/acani-node\" rel=\"nofollow\">acani-node on GitHub</a>, especially the file <a href=\"https://github.com/acani/acani-node/blob/master/acani-node-server.js\" rel=\"nofollow\">acani-node-server.js</a>. If these links are broken, look for acani-chat-server among <a href=\"https://github.com/acani\" rel=\"nofollow\">acani's GitHub public repositories</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>according to <a href=\"http://stackoverflow.com/questions/4441798/how-to-use-redis-publish-subscribe-with-nodejs-by-event-driven/4446424#4446424\">@alex</a> solution. if you have an error like this one as per <a href=\"http://stackoverflow.com/questions/4441798/how-to-use-redis-publish-subscribe-with-nodejs-by-event-driven/5628546#5628546\">@tyler</a> mention:</p>\n\n<pre><code>node.js:134\n        throw e; // process.nextTick error, or 'error'\n\nevent on first tick ^ Error: Redis connection to 127.0.0.1:6379 failed - ECONNREFUSED, Connection refused at Socket.\n</code></pre>\n\n<p>then you need to install <a href=\"http://redis.io/download\" rel=\"nofollow\">Redis</a> first. check this out:</p>\n\n<blockquote>\n  <p><a href=\"http://redis.io/download\" rel=\"nofollow\">http://redis.io/download</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to get this working with socket.io 0.7 <em>AND</em> an external webserver you need to change (besides the staticProvider -> static issue):</p>\n\n<p>a) provide the <em>domain name</em> instead of localhost (i.e. var socket = io.connect('http://my.domain.com:3000'); ) in the index.html</p>\n\n<p>b) change HOST in app.js (i.e. const HOST = 'my.domain.com';  )</p>\n\n<p>c) and add <em>sockets</em> in line 37 of app.js (i.e. 'socket.sockets.on('connection', function(client) { \u2026' )</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>here's a simplified example without as many dependencies.\nYou do still need to <code>npm install hiredis redis</code></p>\n\n<p>The node JavaScript:</p>\n\n<pre><code>var redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.subscribe(\"pubsub\");\nclient.on(\"message\", function(channel, message){\n  console.log(channel + \": \" + message);\n});\n</code></pre>\n\n<p>...put that in a pubsub.js file and run <code>node pubsub.js</code></p>\n\n<p>in redis-cli:</p>\n\n<pre><code>redis&gt; publish pubsub \"Hello Wonky!\"\n(integer) 1\n</code></pre>\n\n<p>which should display: <code>pubsub: Hello Wonky!</code> in the terminal running node!\nCongrats!</p>\n\n<p><em>Additional 4/23/2013:</em> I also want to make note that when a client subscribes to a pub/sub channel it goes into subscriber mode and is limited to subscriber commands. You'll just need to create additional instances of redis clients. <code>client1 = redis.createClient(), client2 = redis.createClient()</code> so one can be in subscriber mode and the other can issue regular DB commands.</p>\n",
                    "is_accepted": false,
                    "score": 16
                }
            ],
            "body": "<p>I'm writing an event-driven publish/subscribe application with NodeJS and Redis. I need an example of how to notify web clients when the data values in Redis change. </p>\n",
            "last_activity_date": 1366704404,
            "question_id": 4441798,
            "score": 70,
            "tags": [
                "javascript",
                "node.js",
                "redis"
            ],
            "title": "How to use redis PUBLISH/SUBSCRIBE with nodejs to notify clients when data values change?"
        },
        {
            "answer_count": 30,
            "answers": [
                {
                    "body": "<p>Indeed there is: <a href=\"http://javascriptmvc.com/\">http://www.javascriptmvc.com/</a></p>\n\n<p>I think you will find this sufficient!</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I wouldn't call this a <em>micro</em>-framework, but it sure looks interesting: <a href=\"http://cappuccino.org/\" rel=\"nofollow\">Cappuccino Web Framework</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There was a key-value binding JavaScript framework called \"Coherent\", which was inspired by Apple's Cocoa Bindings. The framework has been bought by Apple, but there is still an old copy at <a href=\"http://github.com/trek/coherentjs/tree/master\" rel=\"nofollow\">http://github.com/trek/coherentjs/tree/master</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Like other responses, it's probably overkill for what you need, but <strong><a href=\"http://www.sproutcore.com/\" rel=\"nofollow\">SproutCore</a></strong> is an MVC framework and it doesn't look any more heavyweight than <strong><a href=\"http://www.javascriptmvc.com/\" rel=\"nofollow\">JavascriptMVC</a></strong> or TrimPath's <strong><a href=\"http://code.google.com/p/trimpath/wiki/TrimJunction\" rel=\"nofollow\">Junction</a></strong>.</p>\n\n<p>Unfortunately, none of these seem to be built on the principle of <a href=\"http://developer.yahoo.com/yui/articles/gbs/#progressive-enhancement\" rel=\"nofollow\">progressive enhancement</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The popular ActionScript MVC framework PureMVC was recently ported to JavaScript. I haven't had a chance to try it out yet but I am confident its good.</p>\n\n<p><a href=\"http://trac.puremvc.org/PureMVC_JS/\" rel=\"nofollow\">http://trac.puremvc.org/PureMVC_JS/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If your requirements are <em>really</em> simple, you could write your own simple MVC like <a href=\"http://www.alexatnet.com/node/8\">Alex Netkachov</a> did.</p>\n\n<p>His examples are built on dojo (Note: they don't work for me on his page because of a missing dojo.js file), but you could follow the pattern in plain Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Jamal is the lightweightest I've seen.  It's also based on jQuery (bonus).  Have not used.</p>\n\n<p><a href=\"http://jamal-mvc.com/\" rel=\"nofollow\">http://jamal-mvc.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://javascriptmvc.com/\">JavaScriptMVC</a> is an excellent solution.  It's everything is a plugin approach enables you to select only the features you need.  As of 2.0, it's based on jQuery.  </p>\n\n<p>On progressively enhancing your website, that's left up to the user as JMVC provides just a middle layer for development - it's up to you to make that design choice yourself.</p>\n\n<p>However, JavaScriptMVC is simply the best general purpose JavaScriptMVC library because of its powerful event delegation based controllers.</p>\n\n<p>Event delegation lets you escape having to attach event handlers, and simply create rules for your page.</p>\n\n<p>Finally, JMVC is much more than a MVC architecture.  It has all parts of the development cycle covered with:</p>\n\n<ul>\n<li>Code Generators</li>\n<li>Selenium and Env.js integrated testing</li>\n<li>Documentation Engine</li>\n<li>Automatic Concat+Compress</li>\n<li>Error detection and reporting</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Please also checkout jquery-claypool.</p>\n\n<p>jquery-claypool is a small, fast, railable mvc framework built on jquery, based on my experience with django, rails, spring etc.  Its very light weight and runs on both on the client and in server environments.</p>\n\n<p>it provides a routing framework for clean mvc, category logging, filters (aop), lazy creation of controllers, inversion of control, convention-over-configuration and not much more by design.</p>\n\n<p>it doesn't do anything jquery already does, feels like jquery, and works like a good framework should: simply.</p>\n\n<p><a href=\"http://www.claypooljs.com\" rel=\"nofollow\" title=\"jquery-claypool\">jquery-claypool</a></p>\n\n<p>Hope you check it out.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you want to keep things under control and quite simple, you may don't need a framework, but just implement your own mvc pattern.\nJust check this article: <a href=\"http://www.alexatnet.com/content/model-view-controller-mvc-javascript\" rel=\"nofollow\">Model-View-Controller (MVC) with JavaScript</a> by Alex Netkachov on 2006. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>CorMVC, easy to understand and to start with, jquery based and does not depend on any server technology</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have developed a very simple Javascript MVC framework called <a href=\"http://projects.andreaferretti.it/mcv\" rel=\"nofollow\">MCV</a>. It does not do exactly what you ask for, but it is easily extensible with helpers. Anyway, it is definitely micro (1,9kb packed).</p>\n\n<p>It works more or less like Jamal, but I decided to roll my own for two reasons:</p>\n\n<ul>\n<li>remove the jQuery dependency (although I use it together with jQuery most of the time)</li>\n<li>making it extensible with helpers. These are analog to CakePHP behaviors, components and helpers.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is the popular http://documentcloud.github.com/backbone/</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I think this one looks like something you should check out: <a href=\"http://knockoutjs.com/\">http://knockoutjs.com/</a> </p>\n\n<p>(As a silverlight / wpf programmer this was the library that made me finally start learning javascript. It is based on the Model-View-View-Model (MVVM) pattern, as for me right now seems like a good choise!)</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Backbone is a great light-weight framework. Give it a try.\n<a href=\"http://documentcloud.github.com/backbone/\">http://documentcloud.github.com/backbone/</a></p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>Maverick is a small JavaScript MVC framework \u2014 <a href=\"http://maverick.round.ee\" rel=\"nofollow\">http://maverick.round.ee</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm going to pipe up here too -  <a href=\"http://www.aframejs.com\" rel=\"nofollow\">AFrameJS</a> works with jQuery, MooTools and Prototype.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this <a href=\"http://code.google.com/p/jquery-neat-mvc/jQuery-neat-mvc\" rel=\"nofollow\">jQuery based javascript MVC framework</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just to make the list a little more complete:\n<a href=\"http://activejs.org/\" rel=\"nofollow\">ActiveJS</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://maccman.github.com/spine\">Spine</a> has an API similar to Backbone but it's a lot smaller. It features prototypal inheritance.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Another one: <a href=\"https://github.com/fate/Mootools-MVC\" rel=\"nofollow\">MooTools-MVC</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>AngularJS works well together with jQuery and will help you a lot with MVC structure and strict separation of concerns.</p>\n\n<p>Full testing environment and Dependency Injection included...</p>\n\n<p>Check it out at <a href=\"http://angularjs.org\">http://angularjs.org</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Try <a href=\"https://github.com/msn0/jsKitty-MVC\" rel=\"nofollow\">kitty</a>. It is only 1.4KB and its only dependency is EJS.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I upvoted the AngularJS (full disclosure, I'm involved in a limited way with the angular dev effort) and am very excited about it. I did a side-by-side comparison taking one feature for an internal project (sorry don't have signoff to share it) and implementing it in both AngularJS and Backbone. It was a great exercise and in the end, I'm very much leaning towards Angular. The core developers are great about answering questions and they've done a really nice job with builtin databinding, unit/e2e testing and documentation. Its still in beta with 1.0 coming out in near future. The beta is very stable. </p>\n\n<p>There is a bit of a paradigm shift, and they use a fairly different approach than most. Integrating your favorite jquery plugins takes a bit of effort but is doable and has been done (angular-contrib on github). </p>\n\n<p>I will say (and this is a problem for most js-centric frameworks), make sure to investigate how to make your content SEO-friendly (if its important to you). Since joining the angular community in June, I've noticed the interest is growing and a number of people are making posts saying that they've looked at Backbone and others but really like what they are seeing in Angular. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a list of all open-source JavaScript Frameworks known to mankind.</p>\n\n<p><a href=\"http://getopensource.info/explore/javascript/framework/\" rel=\"nofollow\">http://getopensource.info/explore/javascript/framework/</a></p>\n\n<p>Or only MVC frameworks</p>\n\n<p><a href=\"http://getopensource.info/explore/javascript/mvc/\" rel=\"nofollow\">http://getopensource.info/explore/javascript/mvc/</a></p>\n\n<p>Disclosure: I'm the developer of this website.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://emberjs.com/\">Ember.js</a></p>\n\n<p>These are the three features that make Ember a joy to use:</p>\n\n<ol>\n<li>Bindings</li>\n<li>Computed properties</li>\n<li>Auto-updating templates</li>\n</ol>\n\n<h3>Bindings</h3>\n\n<p>Use bindings to keep properties between two different objects in sync. You just declare a binding once, and Ember will make sure changes get propagated in either direction.</p>\n\n<p>Here's how you create a binding between two objects:</p>\n\n<pre><code>MyApp.president = Ember.Object.create({\n  name: \"Barack Obama\"\n});\n\nMyApp.country = Ember.Object.create({\n  // Ending a property with 'Binding' tells Ember to\n  // create a binding to the presidentName property.\n  presidentNameBinding: 'MyApp.president.name'\n});\n\nMyApp.country.get('presidentName');\n// \"Barack Obama\"\n</code></pre>\n\n<p>Bindings allow you to architect your application using the MVC (Model-View-Controller) pattern, then rest easy knowing that data will always flow correctly from layer to layer.</p>\n\n<h3>Computed Properties</h3>\n\n<p>Computed properties allow you to treat a function like a property. \nComputed properties are useful because they can work with bindings, just like any other property.</p>\n\n<h3>Auto-updating Templates</h3>\n\n<p>Ember uses Handlebars, a semantic templating library. To take data from your JavaScript application and put it into the DOM, create a  tag and put it into your HTML, wherever you'd like the value to appear:</p>\n\n<pre><code>&lt;script type=\"text/x-handlebars\"&gt;\n  The President of the United States is {{MyApp.president.fullName}}.\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><a href=\"http://hay.github.com/stapes/\">Stapes.js</a></p>\n\n<p>Full disclosure: i'm the author of this library :) </p>\n\n<p>If you're looking for something really tiny (1.5kb minified / gzipped) have a look, and tell me if you like it.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<h2>Have a look at <a href=\"http://sammyjs.org\" rel=\"nofollow\">Sammy.js</a></h2>\n\n<p>Text from the site:</p>\n\n<p><em>A small webframework with class.</em></p>\n\n<ul>\n<li><strong>SMALL</strong> Sammy's core is only 16K compressed and 5.2K compressed and gzipped</li>\n<li><strong>MODULAR</strong> Sammy is built on a system of plugins and adapters . Only include the code you need. It's also easy to extract your own code into reusable plugins.</li>\n<li><strong>CLEAN</strong> The entire API was designed to be easy to understand and read. Sammy tries to encourage good encapsulation and application design.</li>\n<li><strong>FUN</strong> What's the real point of development if its not enjoyable. Sammy tries to follow the MATZ approach. It is optimized for developer happiness.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>One more, lightweight and tiny: <a href=\"http://jqnano.oleksiy.pro/\" rel=\"nofollow\">http://jqnano.oleksiy.pro/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong><a href=\"http://canjs.us/\" rel=\"nofollow\">Can.js</a></strong> has everything you need and weighs in at just 8K. It's taken the best bits from JavascriptMVC and distilled it into one small, yet kickass framework with observers, widgets, binding, the works. It is compatible with major frameworks (jQuery/Dojo/MooTools/etc) Documentation is excellent and authors are responsive. Definitely worth a look.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Are there any client-side Javascript MVC (micro-)frameworks?</p>\n\n<p>I have a rather complicated HTML form and it would benefit from the MVC pattern.</p>\n\n<p>EDIT:</p>\n\n<p>I imagine a good solution would provide the following:</p>\n\n<ul>\n<li>Model and View update the Controller when values change (Observer pattern)</li>\n<li>Populate the model from the form data when the page loads</li>\n<li>Populate the form from the model when the model changes </li>\n</ul>\n\n<p>Ajax, comet, jsonp and all that jazz are serious overkill. I edited this post to say say <strong>micro-</strong>framework.</p>\n",
            "last_activity_date": 1417866120,
            "question_id": 386885,
            "score": 118,
            "tags": [
                "javascript",
                "model-view-controller",
                "forms"
            ],
            "title": "Is there a Javascript MVC (micro-)framework?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Well, strictly speaking no, as the computer cannot guess when the user has finished typing. You could of course fire a timer on key up, and reset it on every subsequent key up. If the timer expires, the user hasn't typed for the timer duration - you could call that \"finished typing\".</p>\n\n<p>If you expect users to make pauses while typing, there's no way to know when they are done.</p>\n\n<p>(Unless of course you can tell from the data when they are done) </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Once you detect focus on the text box, on key up do a timeout check, and reset it each time it's triggered.</p>\n\n<p>When the timeout completes, do your ajax request.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use the onblur event to detect when the textbox loses focus:\n<a href=\"https://developer.mozilla.org/en/DOM/element.onblur\" rel=\"nofollow\">https://developer.mozilla.org/en/DOM/element.onblur</a></p>\n\n<p>That's not the same as \"stops typing\", if you care about the case where the user types a bunch of stuff and then sits there with the textbox still focused.</p>\n\n<p>For that I would suggest tying a setTimeout to the onclick event, and assuming that after x amount of time with no keystrokes, the user has stopped typing.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>So, I'm going to guess finish typing means you just stop for a while, say 5 seconds.  So with that in mind, lets start a timer when the user releases a key and clear it when they press one.  I decided the input in question will be #myInput.</p>\n\n<p>Making a few assumptions...</p>\n\n<pre><code>//setup before functions\nvar typingTimer;                //timer identifier\nvar doneTypingInterval = 5000;  //time in ms, 5 second for example\n\n//on keyup, start the countdown\n$('#myInput').keyup(function(){\n    clearTimeout(typingTimer);\n    typingTimer = setTimeout(doneTyping, doneTypingInterval);\n});\n\n//on keydown, clear the countdown \n$('#myInput').keydown(function(){\n    clearTimeout(typingTimer);\n});\n\n//user is \"finished typing,\" do something\nfunction doneTyping () {\n    //do something\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 175
                },
                {
                    "body": "<p>Yes, you can set a timeout of say 2 seconds on each and every key up event which will fire an ajax request. You can also store the XHR method and abort it on subsequent key press events so that you save bandwith even more. Here's something I've written for an autocomplete script of mine.</p>\n\n<pre><code>var timer;\nvar x;\n\n$(\".some-input\").keyup(function () {\n    if (x) { x.abort() } // If there is an existing XHR, abort it.\n    clearTimeout(timer); // Clear the timer so we don't end up with dupes.\n    timer = setTimeout(function() { // assign timer a new timeout \n        x = $.getJSON(...); // run ajax request and store in x variable (so we can cancel)\n    }, 2000); // 2000ms delay, tweak for faster/slower\n});\n</code></pre>\n\n<p>Hope this helps,</p>\n\n<p>Marko</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>The chosen answer above does not work.</p>\n\n<p>Because typingTimer is occasionaly set multiple times (keyup pressed twice before keydown is triggered for fast typers etc.) then it doesn't clear properly.</p>\n\n<p>The solution below solves this problem and will call X seconds after finished as the OP requested. It also no longer requires the redundant keydown function. I have also added a check so that your function call won't happend if your input is empty.</p>\n\n<pre><code>//setup before functions\nvar typingTimer;                //timer identifier\nvar doneTypingInterval = 5000;  //time in ms, 5 second for example\n\n//on keyup, start the countdown\n$('#myInput').keyup(function(){\n    clearTimeout(typingTimer);\n    if ($('#myInput').val) {\n        typingTimer = setTimeout(doneTyping, doneTypingInterval);\n    }\n});\n\n//user is \"finished typing,\" do something\nfunction doneTyping () {\n    //do something\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 147
                },
                {
                    "body": "<p>I don't think keyDown event is necessary in this case (please tell me why if I'm wrong). In my (non-jquery) script similar solution looks like that:</p>\n\n<pre><code>var _timer, _timeOut = 2000; \n\n\n\nfunction _onKeyUp(e) {\n    clearTimeout(_timer);\n    if (e.keyCode == 13) {      // close on ENTER key\n        _onCloseClick();\n    } else {                    // send xhr requests\n        _timer = window.setTimeout(function() {\n            _onInputChange();\n        }, _timeOut)\n    }\n\n}\n</code></pre>\n\n<p>It's my first reply on Stack Overflow, so I hope this helps someone, someday:)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you are looking for a specific length (such as a zipcode field):</p>\n\n<pre><code>$(\"input\").live(\"keyup\", function( event ){\nif(this.value.length == this.getAttribute('maxlength')) {\n        //make ajax request here after.\n    }\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>var timer;\nvar timeout = 1000;\n\n$('#in').keyup(function(){\n    clearTimeout(timer);\n    if ($('#in').val) {\n        timer = setTimeout(function(){\n            //do stuff here e.g ajax call etc....\n             var v = $(\"#in\").val();\n             $(\"#out\").html(v);\n        }, timeout);\n    }\n});\n</code></pre>\n\n<p>full example here: <a href=\"http://jsfiddle.net/ZYXp4/8/\">http://jsfiddle.net/ZYXp4/8/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Not sure if my needs are just kind of weird, but I needed something similar to this and this is what I ended up using:</p>\n\n<pre><code>$('input.update').bind('sync', function() {\n    clearTimeout($(this).data('timer'));            \n    $.post($(this).attr('data-url'), {value: $(this).val()}, function(x) {\n        if(x.success != true) {\n            triggerError(x.message);    \n        }\n    }, 'json');\n}).keyup(function() {\n    clearTimeout($(this).data('timer'));\n    var val = $.trim($(this).val());\n    if(val) {\n        var $this = $(this);\n        var timer = setTimeout(function() {\n            $this.trigger('sync');\n        }, 2000);\n        $(this).data('timer', timer);\n    }\n}).blur(function() {\n    clearTimeout($(this).data('timer'));     \n    $(this).trigger('sync');\n});\n</code></pre>\n\n<p>Which allows me to have elements like this in my application:</p>\n\n<pre><code>&lt;input type=\"text\" data-url=\"/controller/action/\" class=\"update\"&gt;\n</code></pre>\n\n<p>Which get updated when the user is \"done typing\" (no action for 2 seconds) or goes to another field (blurs out of the element)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It's just <strong>one line</strong> with <strong>underscore.js</strong> debounce function:</p>\n\n<pre><code>$('#my-input-box').keyup(_.debounce(doSomething , 500));\n</code></pre>\n\n<p>This basically says <strong>doSomething</strong> after 500 milliseconds I stopped typing.</p>\n\n<p>For more info: <a href=\"http://underscorejs.org/#debounce\">http://underscorejs.org/#debounce</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>SOLUTION:</p>\n\n<p>I was implementing the search at my listing and need it to be ajax based. That mean that on every key change searched results should be updated and displayed. This working results in so much ajax calls sent to server, which is not a good thing. After some working I made an approach to ping server when client stops typing.</p>\n\n<p>The solution worked for me is:</p>\n\n<pre><code>$(document).ready(function() {\n\n$('#yourtextfield').keyup(function() {\ns = $('#yourtextfield').val();\nsetTimeout(function() { \n        if($('#yourtextfield').val() == s){ // Check the value searched is the latest one or not. This will help in making the ajax call work when client stops writing.\n            $.ajax({\n                type: \"POST\",\n                url: \"yoururl\",\n                data: 'search=' + s,\n                cache: false,\n                beforeSend: function() {\n                   // loading image\n                },\n                success: function(data) {\n                    // Your response will come here\n                }\n            })\n        }\n    }, 1000); // 1 sec delay to check.\n\n    }); // End of  keyup function\n\n    }); // End of document.ready\n</code></pre>\n\n<p>You have noticed that there is no need of using any timer while implementing this.</p>\n\n<p>I am sure, this will help others.</p>\n\n<p>Ata</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I like Surreal Dream's answer but I found that my \"doneTyping\" function would fire for every keypress, i.e. if you type \"Hello\" really quickly; instead of firing just once when you stop typing, the function would fire 5 times.</p>\n\n<p>The problem was that the javascript setTimeout function doesn't appear to overwrite or kill the any old timeouts that have been set, but if you do it yourself it works! So I just added a clearTimeout call just before the setTimeout if the typingTimer is set. See below:</p>\n\n<pre><code>//setup before functions\nvar typingTimer;                //timer identifier\nvar doneTypingInterval = 5000;  //time in ms, 5 second for example\n\n//on keyup, start the countdown\n$('#myInput').on(\"keyup\", function(){\n    if (typingTimer) clearTimeout(typingTimer);                 // Clear if already set     \n    typingTimer = setTimeout(doneTyping, doneTypingInterval);\n});\n\n//on keydown, clear the countdown \n$('#myInput').on(\"keydown\", function(){\n    clearTimeout(typingTimer);\n});\n\n//user is \"finished typing,\" do something\nfunction doneTyping () {\n    //do something\n}\n</code></pre>\n\n<p>N.B. I would have liked to have just added this as a comment to Surreal Dream's answer but I'm a new user and don't have enough reputation. Sorry!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This is the a simple JS code I wrote:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"pt-br\" lang=\"pt-br\"&gt;\n&lt;head&gt;&lt;title&gt;Submit after typing finished&lt;/title&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\nfunction DelayedSubmission() {\n    var date = new Date();\n    initial_time = date.getTime();\n    if (typeof setInverval_Variable == 'undefined') {\n            setInverval_Variable = setInterval(DelayedSubmission_Check, 50);\n    } \n}\nfunction DelayedSubmission_Check() {\n    var date = new Date();\n    check_time = date.getTime();\n    var limit_ms=check_time-initial_time;\n    if (limit_ms &gt; 800) { //Change value in milliseconds\n        alert(\"insert your function\"); //Insert your function\n        clearInterval(setInverval_Variable);\n        delete setInverval_Variable;\n    }\n}\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;input type=\"search\" onkeyup=\"DelayedSubmission()\" id=\"field_id\" style=\"WIDTH: 100px; HEIGHT: 25px;\" /&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to trigger an ajax request when the user has finished typing in a text box. I don't want it to run the function on every time the user types a letter because that would result in A LOT of ajax requests, however I don't want them to have to hit the enter button either.</p>\n\n<p>Is there a way so I can detect when the user has finished typing and then do the ajax request?</p>\n\n<p>Using jQuery here!\nDave</p>\n",
            "last_activity_date": 1424569531,
            "question_id": 4220126,
            "score": 133,
            "tags": [
                "javascript",
                "jquery",
                "keyboard"
            ],
            "title": "Run javascript function when user finishes typing instead of on key up?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I figured it out. Basically it's an async issue. You can't just submit and expect to render the subsequent page immediately. You have to wait until the onLoad event for the next page is triggered. My code is below:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var page = new WebPage(), testindex = 0, loadInProgress = false;\n\npage.onConsoleMessage = function(msg) {\n  console.log(msg);\n};\n\npage.onLoadStarted = function() {\n  loadInProgress = true;\n  console.log(\"load started\");\n};\n\npage.onLoadFinished = function() {\n  loadInProgress = false;\n  console.log(\"load finished\");\n};\n\nvar steps = [\n  function() {\n    //Load Login Page\n    page.open(\"https://website.com/theformpage/\");\n  },\n  function() {\n    //Enter Credentials\n    page.evaluate(function() {\n\n      var arr = document.getElementsByClassName(\"login-form\");\n      var i;\n\n      for (i=0; i &lt; arr.length; i++) { \n        if (arr[i].getAttribute('method') == \"POST\") {\n\n          arr[i].elements[\"email\"].value=\"mylogin\";\n          arr[i].elements[\"password\"].value=\"mypassword\";\n          return;\n        }\n      }\n    });\n  }, \n  function() {\n    //Login\n    page.evaluate(function() {\n      var arr = document.getElementsByClassName(\"login-form\");\n      var i;\n\n      for (i=0; i &lt; arr.length; i++) {\n        if (arr[i].getAttribute('method') == \"POST\") {\n          arr[i].submit();\n          return;\n        }\n      }\n\n    });\n  }, \n  function() {\n    // Output content of page to stdout after form has been submitted\n    page.evaluate(function() {\n      console.log(document.querySelectorAll('html')[0].outerHTML);\n    });\n  }\n];\n\n\ninterval = setInterval(function() {\n  if (!loadInProgress &amp;&amp; typeof steps[testindex] == \"function\") {\n    console.log(\"step \" + (testindex + 1));\n    steps[testindex]();\n    testindex++;\n  }\n  if (typeof steps[testindex] != \"function\") {\n    console.log(\"test complete!\");\n    phantom.exit();\n  }\n}, 50);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 138
                },
                {
                    "body": "<p>Also, CasperJS provides a nice high-level interface for navigation in PhantomJS, including clicking on links and filling out forms.</p>\n\n<p><a href=\"http://casperjs.org/\">CasperJS</a></p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>Sending raw POST requests can be sometimes more convenient. Below you can see <a href=\"https://github.com/ariya/phantomjs/blob/master/examples/post.js\">post.js original example</a> from PhantomJS</p>\n\n<pre><code>// Example using HTTP POST operation\n\nvar page = require('webpage').create(),\n    server = 'http://posttestserver.com/post.php?dump',\n    data = 'universe=expanding&amp;answer=42';\n\npage.open(server, 'post', data, function (status) {\n    if (status !== 'success') {\n        console.log('Unable to post!');\n    } else {\n        console.log(page.content);\n    }\n    phantom.exit();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I'm trying to use phantomJS (what an awesome tool btw!) to submit a form for a page that I have login credentials for, and then output the content of the destination page to stdout. I'm able to access the form and set its values successfully using phantom, but I'm not quite sure what the right syntax is to submit the form and output the content of the subsequent page. What I have so far is:</p>\n\n<pre><code>var page = new WebPage();\nvar url = phantom.args[0];\n\npage.open(url, function (status) {\n\n  if (status !== 'success') {\n      console.log('Unable to access network');\n  } else {\n\n    console.log(page.evaluate(function () {\n\n      var arr = document.getElementsByClassName(\"login-form\");\n      var i;\n\n      for (i=0; i &lt; arr.length; i++) {\n\n        if (arr[i].getAttribute('method') == \"POST\") {\n          arr[i].elements[\"email\"].value=\"mylogin@somedomain.com\";\n          arr[i].elements[\"password\"].value=\"mypassword\";\n\n          // This part doesn't seem to work. It returns the content\n          // of the current page, not the content of the page after \n          // the submit has been executed. Am I correctly instrumenting\n          // the submit in Phantom?\n          arr[i].submit();\n          return document.querySelectorAll('html')[0].outerHTML;\n        }\n\n      }\n\n      return \"failed :-(\";\n\n    }));\n  }\n\n  phantom.exit();\n}\n</code></pre>\n",
            "last_activity_date": 1365142311,
            "question_id": 9246438,
            "score": 85,
            "tags": [
                "javascript",
                "forms",
                "post",
                "phantomjs"
            ],
            "title": "How to submit a form using PhantomJS"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Look at the <a href=\"http://www.w3schools.com/htmldom/prop_select_selectedindex.asp\" rel=\"nofollow\">selectedIndex</a> of the <code>select</code> element. BTW, that's a plain ol' DOM thing, not JQuery-specific.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>No need to use jQuery for this:</p>\n\n<pre><code>var foo = document.getElementById('yourSelect');\nif (foo)\n{\n   if (foo.selectedIndex != null)\n   {\n       foo.selectedIndex = 0;\n   } \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>While I'm not sure about exactly what you want to accomplish, this bit of code worked for me.</p>\n\n<pre><code>&lt;select id=\"mySelect\" multiple=\"multiple\"&gt;\n  &lt;option value=\"1\"&gt;First&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Second&lt;/option&gt;\n  &lt;option value=\"3\"&gt;Third&lt;/option&gt;\n  &lt;option value=\"4\"&gt;Fourth&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;script type=\"text/javascript\"&gt; \n$(document).ready(function() {\n  if (!$(\"#mySelect option:selected\").length) {\n    $(\"#mySelect option[value='3']\").attr('selected', 'selected');\n  }\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 232
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/149573/check-if-option-is-selected-with-jquery-if-not-select-a-default/149820#149820\">lencioni's answer</a> is what I'd recommend.  You can change the selector for the option <code>('#mySelect option:last')</code> to select the option with a specific value using \"<code>#mySelect option[value='yourDefaultValue']</code>\".  <a href=\"http://docs.jquery.com/Selectors\" rel=\"nofollow\" title=\"More selectors\">More on selectors</a>.</p>\n\n<p>If you're working extensively with select lists on the client check out this plugin:\n<a href=\"http://www.texotela.co.uk/code/jquery/select/\" rel=\"nofollow\">http://www.texotela.co.uk/code/jquery/select/</a>.  Take a look the source if you want to see some more examples of working with select lists.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I already came across the <a href=\"http://www.texotela.co.uk/code/jquery/select/\" rel=\"nofollow\">texotela plugin</a> mentioned, which let me solve it like this:</p>\n\n<pre><code>$(document).ready(function(){\n    if ( $(\"#context\").selectedValues() == false) {\n    $(\"#context\").selectOptions(\"71\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is my function changing the selected option. It works for jQuery 1.3.2</p>\n\n<pre><code>function selectOption(select_id, option_val) {\n    $('#'+select_id+' option:selected').removeAttr('selected');\n    $('#'+select_id+' option[value='+option_val+']').attr('selected','selected');\t\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This was a quick script I found that worked...\n.Result is assigned to a label.</p>\n\n<pre><code>$(\".Result\").html($(\"option:selected\").text());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You guys are doing way too much for selecting. Just select by value:</p>\n\n<pre><code>$(\"#mySelect\").val( 3 );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Easy!</strong> The default should be the first option. <strong>Done!</strong> That would lead you to unobtrusive JavaScript, because JavaScript isn't needed :)</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\" rel=\"nofollow\">Unobtrusive JavaScript</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt; \n$(document).ready(function() {\n  if (!$(\"#mySelect option:selected\").length)\n   $(\"#mySelect\").val( 3 );\n\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>$(\"option[value*='2']\").attr('selected', 'selected');\n// 2 for example, add * for every option\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>$(\"#select_box_id\").children()[1].selected\n</code></pre>\n\n<p>This is another way of checking an option is selected or not in jquery. This will return Boolean (True or False).</p>\n\n<p>[1] is index of select box option </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>if (!$(\"#select\").find(\"option:selected\").length){\n  //\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This question is old and has a lot of views, so I'll just throw some stuff out there that will help some people I'm sure.</p>\n\n<p>To check if a select element has any selected items:</p>\n\n<pre><code>if ($('#mySelect option:selected').length &gt; 0) { alert('has a selected item'); }\n</code></pre>\n\n<p>or to check if a select has nothing selected:</p>\n\n<pre><code>if ($('#mySelect option:selected').length == 0) { alert('nothing selected'); }\n</code></pre>\n\n<p>or if you're in a loop of some sort and want to check if the current element is selected:</p>\n\n<pre><code>$('#mySelect option').each(function() {\n    if ($(this).is(':selected')) { .. }\n});\n</code></pre>\n\n<p>to check if an element is not selected while in a loop:</p>\n\n<pre><code>$('#mySelect option').each(function() {\n    if ($(this).not(':selected')) { .. }\n});\n</code></pre>\n\n<p>These are some of the ways to do this. jQuery has many different ways of accomplishing the same thing, so you usually just choose which one appears to be the most efficient.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Change event on the select box to fire and once it does then just pull the id attribute of the selected option :-</p>\n\n<pre><code>$(\"#type\").change(function(){\n  var id = $(this).find(\"option:selected\").attr(\"id\");\n\n  switch (id){\n    case \"trade_buy_max\":\n      // do something here\n      break;\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was just looking for something similar and found this:</p>\n\n<pre><code>$('.mySelect:not(:has(option[selected])) option[value=\"2\"]').attr('selected', true);\n</code></pre>\n\n<p>This finds all select menus in the class that don't already have an option selected, and selects the default option (\"2\" in this case).</p>\n\n<p>I tried using <code>:selected</code> instead of <code>[selected]</code>, but that didn't work because something is always selected, even if nothing has the attribute</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Using jQuery, how do you check if there is an option selected in a select menu, and if not, assign one of the options as selected.</p>\n\n<p>(The select is generated with a maze of PHP functions in an app I just inherited, so this is a quick fix while I get my head around those :)</p>\n",
            "last_activity_date": 1407411650,
            "question_id": 149573,
            "score": 171,
            "tags": [
                "javascript",
                "jquery",
                "forms",
                "dom",
                "html-select"
            ],
            "title": "Check if option is selected with jQuery, if not select a default"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>EDIT: Oh. I didn't read your question careful enough :) sorry.\nThis works: <a href=\"http://jsfiddle.net/L57Vp/1/\" rel=\"nofollow\">http://jsfiddle.net/L57Vp/1/</a></p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>It turns out that there's a very elegant solution to this, but it's not well documented.</p>\n\n<p>Formatting model values for display can be handled by the <code>|</code> operator and an angular <code>formatter</code>. It turns out that the ngModel that has not only a list of formatters but also a list of parsers.</p>\n\n<h2>1. Use <code>ng-model</code> to create the two-way data binding</h2>\n\n<pre><code>&lt;input type=\"text\" ng-model=\"foo.bar\"&gt;&lt;/input&gt;\n</code></pre>\n\n<h2>2. Create a directive in your angular module that will be applied to the same element and that depends on the <code>ngModel</code> controller</h2>\n\n<pre><code>module.directive('lowercase', function() {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attr, ngModel) {\n            ...\n        }\n    };\n});\n</code></pre>\n\n<h2>3. Within the <code>link</code> method, add your custom converters to the <code>ngModel</code> controller</h2>\n\n<pre><code>function fromUser(text) {\n    return (text || '').toUpperCase();\n}\n\nfunction toUser(text) {\n    return (text || '').toLowerCase();\n}\nngModel.$parsers.push(fromUser);\nngModel.$formatters.push(toUser);\n</code></pre>\n\n<h2>4. Add your new directive to the same element that already has the <code>ngModel</code></h2>\n\n<pre><code>&lt;input type=\"text\" lowercase ng-model=\"foo.bar\"&gt;&lt;/input&gt;\n</code></pre>\n\n<p>Here's a <a href=\"http://jsfiddle.net/phaas/8jFpV/\">working example</a> that transforms text to lowercase in the <code>input</code> and back to uppercase in the model</p>\n\n<p>The <a href=\"http://docs.angularjs.org/api/ng.directive%3angModel.NgModelController\">API Documentation for the Model Controller</a> also has a brief explanation and an overview of the other available methods.</p>\n",
                    "is_accepted": true,
                    "score": 139
                }
            ],
            "body": "<p>One of the interesting things Angular.js can do is apply a filter to a particular databinding expression, which is a convenient way to apply, for example, culture-specific currency or date formatting of a model's properties. It is also nice to have computed properties on the scope. The problem is that neither of these features work with two-way databinding scenarios - only one-way databinding from the scope to the view. This seems to be a glaring omission in an otherwise excellent library - or am I missing something?</p>\n\n<p>In <a href=\"http://knockoutjs.com/\">KnockoutJS</a>, I could create a read/write computed property, which allowed me to specify a pair of functions, one which is called to get the value of the property, and one which is called when the property is set. This allowed me to implement, for example, culture-aware input - letting the user type \"$1.24\" and parsing that into a float in the ViewModel, and have changes in the ViewModel reflected in the input. </p>\n\n<p>The closest thing I could find similar to this is the use of $scope.$watch(propertyName, functionOrNGExpression); This allows me to have a function invoked when a property in the $scope changes. But this doesn't solve, for example, the culture-aware input problem. Notice the problems when I try to modify the $watched property within the $watch method itself:</p>\n\n<pre><code>$scope.$watch(\"property\", function (newValue, oldValue) {\n    $scope.outputMessage = \"oldValue: \" + oldValue + \" newValue: \" + newValue;\n    $scope.property = Globalize.parseFloat(newValue);\n});\n</code></pre>\n\n<p>(http://jsfiddle.net/gyZH8/2/)</p>\n\n<p>The input element gets very confused when the user starts typing. I improved it by splitting the property into two properties, one for the unparsed value and one for the parsed value:</p>\n\n<pre><code>$scope.visibleProperty= 0.0;\n$scope.hiddenProperty = 0.0;\n$scope.$watch(\"visibleProperty\", function (newValue, oldValue) {\n    $scope.outputMessage = \"oldValue: \" + oldValue + \" newValue: \" + newValue;\n    $scope.hiddenProperty = Globalize.parseFloat(newValue);\n});\n</code></pre>\n\n<p>(http://jsfiddle.net/XkPNv/1/)</p>\n\n<p>This was an improvement over the first version, but is a bit more verbose, and notice that there is still an issue of the parsedValue property of the scope changes (type something in the second input, which changes the parsedValue directly. notice the top input does not update). This might happen from a controller action or from loading data from a data service.</p>\n\n<p>Is there some easier way to implement this scenario using Angular.js? Am I missing some functionality in the documentation?</p>\n",
            "last_activity_date": 1355947357,
            "question_id": 11616636,
            "score": 71,
            "tags": [
                "javascript",
                "model-view-controller",
                "data-binding",
                "angularjs"
            ],
            "title": "How to do two-way filtering in angular.js?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>I like <a href=\"http://flesler.blogspot.com/2007/10/jqueryscrollto.html\" rel=\"nofollow\">this</a> one.</p>\n\n<p>See the demo <a href=\"http://demos.flesler.com/jquery/scrollTo/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I've always found <a href=\"http://plugins.jquery.com/project/ScrollTo\" rel=\"nofollow\">the jQuery scrollTo plugin</a> to be very useful for this. Play with the demos to see if it's for you.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Dead simple. <strong>No plugins needed</strong>.</p>\n\n<pre><code>var container = $('div'),\n    scrollTo = $('#row_8');\n\ncontainer.scrollTop(\n    scrollTo.offset().top - container.offset().top + container.scrollTop()\n);\n\n// Or you can animate the scrolling:\ncontainer.animate({\n    scrollTop: scrollTo.offset().top - container.offset().top + container.scrollTop()\n});\u200b\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/xY7tx/406/\">working example</a>.</p>\n\n<p><a href=\"http://api.jquery.com/scrollTop/\">Documentation for <code>scrollTop</code></a>.</p>\n",
                    "is_accepted": true,
                    "score": 270
                },
                {
                    "body": "<p>Best plugin I found was <a href=\"https://gist.github.com/JosephSilber/3848811\" rel=\"nofollow\">this gist</a>.</p>\n\n<p>Its not a plugin per say but it does the work of one, and it solved my problems. unfortunately it only works in FireFox. No idea why chrome doesn't like it/doesn't wanna run it.</p>\n\n<p><strong>EDIT:</strong> Meanwhile I managed to do it myself. No need for any plugins. Check out my <a href=\"https://gist.github.com/3857347\" rel=\"nofollow\">gist</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'd say it is even simpler looking than the accepted answer to scroll to something:</p>\n\n<pre><code>$('html,body').animate({scrollTop: some_element.offset().top});\n</code></pre>\n\n<p>We select both html and body because the document scroller could be on either and it is hard to determine which.</p>\n\n<p>Or, to go to the top of the page:</p>\n\n<pre><code>$('html,body').animate({scrollTop: 0});\n</code></pre>\n\n<p>Or without animation:</p>\n\n<pre><code>$(window).scrollTop(some_element.offset().top);\nwindow.scrollTo(0, some_element.offset().top); // native equivalent (x, y)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>Not sure why no one says the obvious, as there's a built in javascript <code>scrollTo</code> function:</p>\n\n<pre><code>scrollTo( $('#element').position().top );\n</code></pre>\n\n<p><a href=\"http://www.w3schools.com/jsref/met_win_scrollto.asp\" rel=\"nofollow\">Reference</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I agree with Kevin and others, using a plugin for this is pointless.</p>\n\n<pre><code>window.scrollTo(0, $(\"#element\").offset().top);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I did a combination of what others have posted. Its simple and smooth</p>\n\n<pre><code> $('#myButton').click(function(){\n        $('html, body').animate({\n            scrollTop: $('#scroll-to-this-element').position().top },\n            1000\n        );\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a big table with vertical scroll bar.\nI would like to scroll to a specific line in this table using jQuery/Javascript.</p>\n\n<p>Are there built-in methods to do this?</p>\n\n<p><a href=\"http://jsfiddle.net/xY7tx/\">Here is a little example to play with.</a><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n    width: 100px;\r\n    height: 70px;\r\n    border: 1px solid blue;\r\n    overflow: auto;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div&gt;\r\n    &lt;table id=\"my_table\"&gt;\r\n        &lt;tr id='row_1'&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_2'&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_3'&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_4'&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_5'&gt;&lt;td&gt;5&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_6'&gt;&lt;td&gt;6&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_7'&gt;&lt;td&gt;7&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_8'&gt;&lt;td&gt;8&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr id='row_9'&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;\r\n    &lt;/table&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
            "last_activity_date": 1424169352,
            "question_id": 2905867,
            "score": 118,
            "tags": [
                "javascript",
                "jquery",
                "scroll"
            ],
            "title": "How to scroll to specific item using jQuery?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You can use <strong><a href=\"http://weblogs.asp.net/scottgu/archive/2010/12/30/asp-net-mvc-3-layouts-and-sections-with-razor.aspx\">Named Sections</a>.</strong></p>\n\n<p><strong>_Layout.cshtml</strong></p>\n\n<pre><code>&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"@Url.Content(\"/Scripts/jquery-1.6.2.min.js)\"&gt;\n    @RenderSection(\"JavaScript\", required: false)\n&lt;/head&gt;\n</code></pre>\n\n<p><strong>_SomeView.cshtml</strong></p>\n\n<pre><code>@section JavaScript\n{\n   &lt;script type=\"text/javascript\" src=\"@Url.Content(\"/Scripts/SomeScript.js\")\"&gt;&lt;/script&gt;\n   &lt;script type=\"text/javascript\" src=\"@Url.Content(\"/Scripts/AnotherScript.js\")\"&gt;&lt;/script&gt;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 303
                }
            ],
            "body": "<p>I'm trying to figure out the proper razor syntax to get a js file for a particular  *.cshtml to be in the head tag along with all the other include files that are defined in _Layout.cshtml</p>\n",
            "last_activity_date": 1374231874,
            "question_id": 4311783,
            "score": 164,
            "tags": [
                "javascript",
                "asp.net-mvc",
                "include",
                "razor",
                "asp.net-mvc-3"
            ],
            "title": "ASP.Net MVC 3 Razor: Include js file in Head tag"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>.push</code></a> method can take multiple arguments, so by using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>.apply</code></a> to pass all the elements of the second array as arguments to <code>.push</code>, you can get the result you want:</p>\n\n<pre><code>&gt;&gt;&gt; a.push.apply(a, b)\n</code></pre>\n\n<p>or perhaps, if you think it's clearer:</p>\n\n<pre><code>&gt;&gt;&gt; Array.prototype.push.apply(a,b)\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 397
                },
                {
                    "body": "<p>It is possible to do it using <code>splice()</code>:</p>\n\n<pre><code>b.unshift(b.length)\nb.unshift(a.length)\nArray.prototype.splice.apply(a,b) \nb.shift() // restore b\nb.shift() //\n</code></pre>\n\n<p>But despite being uglier it is not faster than <code>push.apply</code>, at least not in Firefox 3.0. Posted for completeness sake.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>i like the \"a.push.apply(a, b)\" method described above, and if you want you can always create a library function like this:</p>\n\n<pre><code>Array.prototype.append = function(array)\n{\n    this.push.apply(this, array)\n}\n</code></pre>\n\n<p>and use it like this</p>\n\n<pre><code>a = [1,2]\nb = [3,4]\n\na.append(b)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You should use a loop-based technique.  Other answers on this page that are based on using <code>.apply</code> can  fail for large arrays.   </p>\n\n<p>A fairly terse loop-based implementation is:</p>\n\n<pre><code>Array.prototype.extend = function (other_array) {\n    /* you should include a test to check whether other_array really is an array */\n    other_array.forEach(function(v) {this.push(v)}, this);    \n}\n</code></pre>\n\n<p>You can then do the following:</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [5,4,3];\na.extend(b);\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/a/1374131/1280629\">DzinX's answer</a> (using push.apply) and other <code>.apply</code> based methods fail when the array that we are appending is large (tests show that for me large is > 150000 entries approx in Chrome, and > 500000 entries in Firefox). You can see this error occurring in <a href=\"http://jsperf.com/array-extending-push-vs-concat\">this jsperf</a>.</p>\n\n<p>An error occurs because the call stack size is exceeded when 'Function.prototype.apply' is called with a large array as the second argument. (The MDN has a note on the dangers of exceeding call stack size using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">Function.prototype.apply</a> - see the section titled \"apply and built-in functions\")</p>\n\n<p>For a speed comparison with other answers on this page check out <a href=\"http://jsperf.com/array-extending-push-vs-concat/18\">this jsperf</a> (thanks to EaterOfCode). The loop-based implementation is similar in speed to using Array.push.apply, but tends to be a little slower than Array.slice.apply.</p>\n\n<p>Interestingly, if the array you are appending is sparse, the <code>forEach</code> based method above can take advantage of the sparsity and outperform the <code>.apply</code> based methods, check out <a href=\"http://jsperf.com/array-extending-push-vs-concat/5\">this jsperf</a> if you want to test this for yourself.  </p>\n\n<p>By the way, do not be tempted (as I was!) to further shorten the forEach implementation to:</p>\n\n<pre><code>Array.prototype.extend = function (array) {\n    array.forEach(this.push, this);    \n}\n</code></pre>\n\n<p>because this produces garbage results! Why? Because Array.prototype.forEach provides 3 arguments to the function it calls - these are: (element_value, element_index, source_array).  All of these will be pushed onto your first array for every iteration of forEach if you use \"forEach(this.push, this)\"!</p>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>Combining the answers...</p>\n\n<pre><code>Array.prototype.extend = function(array) {\n    if (array.length &lt; 150000) {\n        this.push.apply(this, array)\n    } else {\n        for (var i = 0, len = array.length; i &lt; len; ++i) {\n            this.push(array[i]);\n        };\n    }  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you want to use jQuery, there is <a href=\"http://api.jquery.com/jQuery.merge/\">$.merge()</a></p>\n\n<p>Example:</p>\n\n<pre><code>a = [1, 2];\nb = [3, 4, 5];\n$.merge(a,b);\n</code></pre>\n\n<p>Result: a = <code>[1, 2, 3, 4, 5]</code></p>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p><em><strong>Note:</strong> This is <strong>not a duplicate of <a href=\"http://stackoverflow.com/questions/351409/appending-to-array\">Appending to array</a></strong> -- the goal here is to add the whole contents of one array to the other, and to do it \"in place\", i.e. without copying all elements of the extended array.</em></p>\n\n<p>There doesn't seem to be a way to extend an existing JavaScript array with another array, i.e. to emulate Python's <code>extend</code> method.</p>\n\n<p>What I want to achieve is the following:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n[1, 2]\n&gt;&gt;&gt; b = [3, 4, 5]\n[3, 4, 5]\n&gt;&gt;&gt; SOMETHING HERE\n&gt;&gt;&gt; a\n[1, 2, 3, 4, 5]\n</code></pre>\n\n<p>I know there's a <code>a.concat(b)</code> method, but it creates a new array instead of simply extending the first one. I'd like an algorithm that works efficiently when <code>a</code> is significantly larger than <code>b</code> (i.e. one that does not copy <code>a</code>).</p>\n",
            "last_activity_date": 1424371834,
            "question_id": 1374126,
            "score": 211,
            "tags": [
                "javascript",
                "arrays",
                "concatenation"
            ],
            "title": "How to extend an existing JavaScript array with another array?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Have you heard about the <a href=\"http://imakewebthings.com/jquery-waypoints/\"><strong>jQuery Waypoint plugin</strong></a>.</p>\n\n<p>Below is the simple way of calling a waypoints plugin and having the page load more Content once you reaches the bottom on scroll :</p>\n\n<pre><code>$(document).ready(function() {\n    var $loading = $(\"&lt;div class='loading'&gt;&lt;p&gt;Loading more items&amp;hellip;&lt;/p&gt;&lt;/div&gt;\"),\n    $footer = $('footer'),\n    opts = {\n        offset: '100%'\n    };\n\n    $footer.waypoint(function(event, direction) {\n        $footer.waypoint('remove');\n        $('body').append($loading);\n        $.get($('.more a').attr('href'), function(data) {\n            var $data = $(data);\n            $('#container').append($data.find('.article'));\n            $loading.detach();\n            $('.more').replaceWith($data.find('.more'));\n            $footer.waypoint(opts);\n        });\n    }, opts);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>Take a look at this: <a href=\"http://www.jquery4u.com/tutorials/jquery-infinite-scrolling-demos/\">http://www.jquery4u.com/tutorials/jquery-infinite-scrolling-demos/</a>\nHopefully it helps you in this question.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>In jQuery, check whether you have hit the bottom of page using scroll  function. Once you hit that, make an ajax call (you can show a loading  image here till ajax response) and get the next set of data, append it  to the div.  This function gets executed as you scroll down the page  again.</p>\n\n<pre><code>$(window).scroll(function() {\n    if($(window).scrollTop() == $(document).height() - $(window).height()) {\n           // ajax call get data from server and append to the div\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 69
                },
                {
                    "body": "<p>Here you can find explanation + demo <a href=\"http://www.technicalkeeda.com/jquery/load-data-on-page-scroll-using-jquery-php-codeigniter-and-mysql\" rel=\"nofollow\">http://www.technicalkeeda.com/jquery/load-data-on-page-scroll-using-jquery-php-codeigniter-and-mysql</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Although there are already great simple answer given but if you want some thing more than that then you can also check <a href=\"http://jscroll.com\" rel=\"nofollow\">jscroll</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>im just wondering how can i implement more data on scroll only if the div.loading is visible.</p>\n\n<p>usually we look for page height and scroll height, to see if we need to load more data. but the following example is little complicated then that.</p>\n\n<p>following image is perfect example. there are two .loading div's on the drop down box. when user scroll the content, whichever is visible it should start loading more data for it.</p>\n\n<p><img src=\"http://i.stack.imgur.com/IKHNl.png\" alt=\"enter image description here\"></p>\n\n<p>so how can i find out if .loading div is visible to user yet or not? so i can start loading data for that div only.</p>\n",
            "last_activity_date": 1420796358,
            "question_id": 14035180,
            "score": 46,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "scroll"
            ],
            "title": "jQuery load more data on scroll"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The form of a ternary in angularjs is:</p>\n\n<p>((condition) &amp;&amp; (answer if true) || (answer if false))</p>\n\n<p>An example would be:</p>\n\n<pre><code>&lt;ul class=\"nav\"&gt;\n    &lt;li&gt;\n        &lt;a   href=\"#/page1\" style=\"{{$location.path()=='/page2' &amp;&amp; 'color:#fff;' || 'color:#000;'}}\"&gt;Goals&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a   href=\"#/page2\" style=\"{{$location.path()=='/page2' &amp;&amp; 'color:#fff;' || 'color:#000;'}}\"&gt;Groups&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>or:</p>\n\n<pre><code> &lt;li  ng-disabled=\"currentPage == 0\" ng-click=\"currentPage=0\"  class=\"{{(currentPage == 0) &amp;&amp; 'disabled' || ''}}\"&gt;&lt;a&gt; &lt;&lt; &lt;/a&gt;&lt;/li&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p><strong>Update</strong>: Angular 1.1.5 added a <a href=\"https://github.com/angular/angular.js/commit/6798fec4390a72b7943a49505f8a245b6016c84b\">ternary operator</a>, so now we can simply write</p>\n\n<pre><code>&lt;li ng-class=\"$first ? 'firstRow' : 'nonFirstRow'\"&gt;\n</code></pre>\n\n<hr>\n\n<p>If you are using an earlier version of Angular, your two choices are:</p>\n\n<ol>\n<li><code>(condition &amp;&amp; result_if_true || !condition &amp;&amp; result_if_false)</code></li>\n<li><code>{true: 'result_if_true', false: 'result_if_false'}[condition]</code></li>\n</ol>\n\n<p>item 2. above creates an object with two properties.  The array syntax is used to select either the property with name true or the property with name false, and return the associated value.</p>\n\n<p>E.g.,</p>\n\n<pre><code>&lt;li class=\"{{{true: 'myClass1 myClass2', false: ''}[$first]}}\"&gt;...&lt;/li&gt;\n or\n&lt;li ng-class=\"{true: 'myClass1 myClass2', false: ''}[$first]\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>$first is set to true inside an ng-repeat for the first element, so the above would apply class 'myClass1' and 'myClass2' only the first time through the loop.</p>\n\n<p>With <strong>ng-class</strong> there is an easier way though:  ng-class takes an expression that must evaluate to one of the following:</p>\n\n<ol>\n<li>a string of space-delimited class names</li>\n<li>an array of class names</li>\n<li>a map/object of class names to boolean values.  </li>\n</ol>\n\n<p>An example of 1) was given above.  Here is an example of 3, which I think reads much better:</p>\n\n<pre><code> &lt;li ng-class=\"{myClass: $first, anotherClass: $index == 2}\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>The first time through an ng-repeat loop, class myClass is added.  The 3rd time through ($index starts at 0), class anotherClass is added.</p>\n\n<p><strong>ng-style</strong> takes an expression that must evaluate to a map/object of CSS style names to CSS values.  E.g.,</p>\n\n<pre><code> &lt;li ng-style=\"{true: {color: 'red'}, false: {}}[$first]\"&gt;...&lt;/li&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 225
                },
                {
                    "body": "<p>By now we all found out version <a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md#115-triangle-squarification-2013-05-22\">1.1.5</a> comes with a proper ternary in the <code>$parse</code> function so just use this answer as an example of filters:</p>\n\n<pre><code>angular.module('myApp.filters', [])\n\n  .filter('conditional', function() {\n    return function(condition, ifTrue, ifFalse) {\n      return condition ? ifTrue : ifFalse;\n    };\n  });\n</code></pre>\n\n<p>And then use it as</p>\n\n<pre><code>&lt;i ng-class=\"checked | conditional:'icon-check':'icon-check-empty'\"&gt;&lt;/i&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>While you can use the <code>condition &amp;&amp; if-true-part || if-false-part</code>-syntax in older versions of angular, the usual ternary operator <code>condition ? true-part : false-part</code> is available in <a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md#115-triangle-squarification-2013-05-22\">Angular 1.1.5 and later</a>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>There it is : ternary operator got added to angular parser in <strong>1.1.5</strong>! <a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md\">see the changelog</a></p>\n\n<p><a href=\"http://jsfiddle.net/lionroots/JRdRp/\">Here is a fiddle</a> showing new ternary operator used in ng-class directive.</p>\n\n<pre><code>ng-class=\"boolForTernary ? 'blue' : 'red'\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>How do you do a ternary with AngularJS (in the templates)?</p>\n\n<p>It would be nice to use some in html attributes (classes and style) instead of creating and calling a function of the controller.</p>\n",
            "last_activity_date": 1410044459,
            "question_id": 12008580,
            "score": 118,
            "tags": [
                "javascript",
                "html",
                "angularjs",
                "ternary-operator"
            ],
            "title": "A ternary in templates"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>There are some properties/methods you can use:</p>\n\n<pre><code>$().scrollTop()//how much has been scrolled\n$().innerHeight()// inner height of the element\nDOMElement.scrollHeight//height of the content of the element\n</code></pre>\n\n<p>So you can take the sum of the first two properties, and when it equals to the last property, you've reached the end:</p>\n\n<pre><code>jQuery(function($) {\n    $('#flux').bind('scroll', function() {\n        if($(this).scrollTop() + $(this).innerHeight() &gt;= this.scrollHeight) {\n            alert('end reached');\n        }\n    })\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/doktormolle/w7X9N/\">http://jsfiddle.net/doktormolle/w7X9N/</a></p>\n",
                    "is_accepted": true,
                    "score": 145
                },
                {
                    "body": "<p>Just an additional note here as I found this when looking for a solution for a fixed div that I want to scroll. For my scenario I found that its preferable to take into account the padding on the div so I can hit the end exactly. So expanding on @Dr.Molle's answer I add the following</p>\n\n<pre><code>$('#flux').bind('scroll', function() {\n    var scrollPosition = $(this).scrollTop() + $(this).outerHeight();\n    var divTotalHeight = $(this)[0].scrollHeight \n                          + parseInt($(this).css('padding-top'), 10) \n                          + parseInt($(this).css('padding-bottom'), 10)\n                          + parseInt($(this).css('border-top-width'), 10)\n                          + parseInt($(this).css('border-bottom-width'), 10);\n\n    if( scrollPosition == divTotalHeight )\n    {\n      alert('end reached');\n    }\n  });\n</code></pre>\n\n<p>That'll give you the precise location, including padding and borders</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>i found a solution that when you scroll your window and end of a div shown from bottom gives you an alert.</p>\n\n<pre><code>$(window).bind('scroll', function() {\n        if($(window).scrollTop() &gt;= $('.posts').offset().top + $('.posts').outerHeight() - window.innerHeight) {\n          alert('end reached');\n        }\n});\n</code></pre>\n\n<p>int his example if you scroll down when div (.posts) finish its give you an alert;\nsorry for bad writing;</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>this worked for me though</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(window).scroll(function() {\n  if ($(window).scrollTop() &gt;= (($(document).height() - $(window).height()) - $('#divID').innerHeight())) {\n    console.log('div reached');\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a div box (called flux) with a variable amount of content inside.\nThis divbox has overflow set to auto.</p>\n\n<p>Now, what I am trying to do, is, when the use scroll to the bottom of this DIV-box, load more content into the page, I know how to do this (load the content) but I don't know how to detect when the user has scrolled to the bottom of the div tag?\nIf I wanted to do it for the entire page, I'd take .scrollTop and subtract that from .height.</p>\n\n<p>But I can't seem to do that here?</p>\n\n<p>I've tried taking .scrollTop from flux, and then wrapping all the content inside a div called inner, but if I take the innerHeight of flux it returns 564px (the div is set to 500 as height) and the height of 'innner' it returns 1064, and the scrolltop, when at the bottom of the div says 564.</p>\n\n<p>What can I do? :S</p>\n\n<p>Thanks! :)</p>\n",
            "last_activity_date": 1425435976,
            "question_id": 6271237,
            "score": 72,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Detecting when user scrolls to bottom of div with jQuery"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>For one thing, jsPerf shows that using <code>!</code> (UnaryExpression's) are usually faster. Sometimes they come out to be equal, but when they aren't, I haven't seen the <em>non-banged</em> one triumph too much over the others yet: <a href=\"http://jsperf.com/bang-function\" rel=\"nofollow\">http://jsperf.com/bang-function</a></p>\n\n<p>This was tested on the latest Ubuntu with the oldest (per say..) Chrome, version 8. So results may differ of course.</p>\n\n<p>Edit: How about something crazy like <code>delete</code>?</p>\n\n<pre><code>delete function() {\n   alert(\"Hi!\"); \n}();\n</code></pre>\n\n<p>or <code>void</code>?</p>\n\n<pre><code>void function() {\n   alert(\"Hi!\"); \n}();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Ideally you should be able to do all this simply as:</p>\n\n<pre><code>function(){\n  // do stuff\n}(); \n</code></pre>\n\n<p>That means declare anonymous function and execute it. But that will not work due to specifics of JS grammar.</p>\n\n<p>So shortest form of achieving this is to use some expression e.g. UnaryExpression (and so CallExpression):</p>\n\n<pre><code>!function(){\n  // do stuff\n}(); \n</code></pre>\n\n<p>Or for the fun: </p>\n\n<pre><code>-function(){\n  // do stuff\n}(); \n</code></pre>\n\n<p>Or: </p>\n\n<pre><code>+function(){\n  // do stuff\n}(); \n</code></pre>\n\n<p>Or even:</p>\n\n<pre><code>~function(){\n  // do stuff\n  return 0;\n}( );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 61
                },
                {
                    "body": "<p>In Javascript, a line beginning with <code>function</code> is expected to be a function <em>statement</em> and is supposed to look like</p>\n\n<pre><code>function doSomething() {\n}\n</code></pre>\n\n<p>A self-invoking function like</p>\n\n<pre><code>function(){\n  // do stuff\n}();\n</code></pre>\n\n<p>doesn't fit that form (and will cause a syntax error at the first opening paren because there is no function name), so the brackets are used to delineate an anonymous function <em>expression</em>.</p>\n\n<pre><code>(function(){\n  // do stuff\n})();\n</code></pre>\n\n<p>But anything that creates an expression (as opposed to a function statement) will do, so hence the <code>!</code>.  It's telling the interpreter that this is not a function statement.  Other than that, operator precedence dictates that the function is invoked before the negation.</p>\n\n<p>I wasn't aware of this convention, but if it becomes common it may contribute to readability.  What I mean is that anybody reading the <code>!function</code> at the top of a large block of code will expect a self-invocation, the way we are conditioned already to expect the same when we see <code>(function</code>.  Except that we will lose those annoying parentheses.  I would expect that's the reason, as opposed to any savings in speed or character count.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>Besides the things that were already said, the syntax with the ! is useful if you write javascript without semicolons:</p>\n\n<pre><code>var i = 1\n!function(){\n  console.log('ham')\n}()\n\ni = 2\n(function(){\n  console.log('cheese')\n})()\n</code></pre>\n\n<p>The first example outputs 'ham' as expected, but the second will throw an error because the i = 2 statement isn't terminated due to the following parenthesis. </p>\n\n<p>Also in concatenated javascript files you don't have to worry if the preceding code has missing semicolons. So no need for the common ;(function(){})(); to make sure your own won't break.</p>\n\n<p>I know my answer is kind of late but i think it haven't been mentioned yet:)</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>So, with negate \"!\" and all other unary operators like +,-,~, delete, void, a lot has been told, just to sum up:</p>\n\n<pre><code>!function(){\n  alert(\"Hi!\");\n}(); \n</code></pre>\n\n<p>Or</p>\n\n<pre><code>void function(){\n  alert(\"Hi!\");\n}();\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>delete function(){\n  alert(\"Hi!\");\n}();\n</code></pre>\n\n<p>And a few more cases with <a href=\"http://stackoverflow.com/questions/12122293/list-of-all-binary-operators-in-javascript\">binary operators</a> for fun :)</p>\n\n<pre><code>1 &gt; function() {\n   alert(\"Hi!\"); \n}();\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>1 * function() {\n   alert(\"Hi!\"); \n}();\n</code></pre>\n\n<p>Or     </p>\n\n<pre><code>1 &gt;&gt;&gt; function() {\n   alert(\"Hi!\"); \n}();\n</code></pre>\n\n<p>Or even   </p>\n\n<pre><code>1 == function() {\n   alert(\"Hi!\"); \n}();\n</code></pre>\n\n<p>Leaving the ternary for someone else guys :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've been seeing this syntax on a few libraries now and I'm wondering what the benefit is.  (note i'm well aware of closures and what the code is doing, I'm only concerned about the syntactical differences)</p>\n\n<pre><code>!function(){\n  // do stuff\n}();\n</code></pre>\n\n<p>As an alternative to the more common</p>\n\n<pre><code>(function(){\n  // do stuff\n})();\n</code></pre>\n\n<p>for self invoking anonymous functions.</p>\n\n<p>I'm wondering a few things.  First off, what is allowing the top example to actually work?  Why is the bang necessary in order to make this statement syntactically correct?  I'm told also that <code>+</code> works, and I'm sure some others, in place of <code>!</code></p>\n\n<p>Second, what is the benefit?  All I can tell is that it saves a single character, but I can't imagine that's such a huge benefit to attract numerous adopters.  Is there some other benefit I\"m missing?  </p>\n\n<p>The only other difference I can see would be the return value of the self invoking function, but in both of these examples, we don't really care about the return value of the function since it's used only to create a closure.  So can someone tell me why one might use the first syntax?</p>\n",
            "last_activity_date": 1409383650,
            "question_id": 5827290,
            "score": 146,
            "tags": [
                "javascript",
                "syntax"
            ],
            "title": "javascript function leading bang ! syntax"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You can do this in native JavaScript. You'll have to parse your data into correct CSV format as so (assuming you are using an array of arrays for your data as you have described in the question):</p>\n\n<pre><code>var data = [[\"name1\", \"city1\", \"some other info\"], [\"name2\", \"city2\", \"more info\"]];\nvar csvContent = \"data:text/csv;charset=utf-8,\";\ndata.forEach(function(infoArray, index){\n\n   dataString = infoArray.join(\",\");\n   csvContent += index &lt; data.length ? dataString+ \"\\n\" : dataString;\n\n}); \n</code></pre>\n\n<p>Then you can use JavaScript's <code>window.open</code> and <code>encodeURI</code> functions to download the CSV file like so:</p>\n\n<pre><code>var encodedUri = encodeURI(csvContent);\nwindow.open(encodedUri);\n</code></pre>\n\n<p><h3>Edit:</h3> If you want to give your file a specific name, you have to do things a little differently since this is not supported accessing a data URI using the <code>window.open</code> method. In order to achieve this, you can create a hidden <code>&lt;a&gt;</code> DOM node and set its <code>download</code> attribute as follows:</p>\n\n<pre><code>var encodedUri = encodeURI(csvContent);\nvar link = document.createElement(\"a\");\nlink.setAttribute(\"href\", encodedUri);\nlink.setAttribute(\"download\", \"my_data.csv\");\n\nlink.click(); // This will download the data file named \"my_data.csv\".\n</code></pre>\n\n<p><strong>Note</strong>: as of this edit, support for the <code>download</code> attribute is limited to Chrome only. I believe FF is in the process of implementing it, and IE always lags behind them both.</p>\n",
                    "is_accepted": true,
                    "score": 133
                },
                {
                    "body": "<p>Solution from @Default work perfect on Chrome (thanks a lot for that!) but I had a problem to reach this on IE.\nBut it's solution (work on IE10):</p>\n\n<pre><code>var csvContent=data; //here we load our csv data \nvar blob = new Blob([csvContent],{\n    type: \"text/csv;charset=utf-8;\"\n});\n\nnavigator.msSaveBlob(blob, \"filename.csv\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I came here looking for a bit more RFC 4180 compliance and I failed to find an implementation, so I made a (possibly inefficient) one for my own needs.  I thought I would share it with everyone.</p>\n\n<pre><code>var content = [['1st title', '2nd title', '3rd title', 'another title'], ['a a a', 'bb\\nb', 'cc,c', 'dd\"d'], ['www', 'xxx', 'yyy', 'zzz']];\n\nvar finalVal = '';\n\nfor (var i = 0; i &lt; content.length; i++) {\n    var value = content[i];\n\n    for (var j = 0; j &lt; value.length; j++) {\n        var innerValue =  value[j]===null?'':value[j].toString();\n        var result = innerValue.replace(/\"/g, '\"\"');\n        if (result.search(/(\"|,|\\n)/g) &gt;= 0)\n            result = '\"' + result + '\"';\n        if (j &gt; 0)\n            finalVal += ',';\n        finalVal += result;\n    }\n\n    finalVal += '\\n';\n}\n\nconsole.log(finalVal);\n\nvar download = document.getElementById('download');\ndownload.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(finalVal));\ndownload.setAttribute('download', 'test.csv');\n</code></pre>\n\n<p>Hopefully this will help someone out in the future.  This combines both the encoding of the CSV along with the ability to download the file.  In my example on <a href=\"http://jsfiddle.net/a5E9m/2/\">jsfiddle</a>. You can download the file (assuming HTML 5 browser) or view the output in the console.</p>\n\n<p><b>UPDATE:</b></p>\n\n<p>Chrome now appears to have lost the ability to name the file.  I'm not sure what's happened or how to fix it, but whenever I use this code (including the jsfiddle), the downloaded file is now named <code>download.csv</code>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>In Chrome 35 update, download attribute behavior was changed.</p>\n\n<p><a href=\"https://code.google.com/p/chromium/issues/detail?id=373182\" rel=\"nofollow\">https://code.google.com/p/chromium/issues/detail?id=373182</a></p>\n\n<p>to work this in chrome, use this </p>\n\n<pre><code>var pom = document.createElement('a');\nvar csvContent=csv; //here we load our csv data \nvar blob = new Blob([csvContent],{type: 'text/csv;charset=utf-8;'});\nvar url = URL.createObjectURL(blob);\npom.href = url;\npom.setAttribute('download', 'foo.csv');\npom.click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>//It work in Chrome and IE ... I reviewed and readed a lot of answer. then i used it and tested in both ... \n\nvar link = document.createElement(\"a\");\n\nif (link.download !== undefined) { // feature detection\n    // Browsers that support HTML5 download attribute\n    var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });\n    var url = URL.createObjectURL(blob);            \n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", fileName);\n    link.style = \"visibility:hidden\";\n}\n\nif (navigator.msSaveBlob) { // IE 10+\n   link.addEventListener(\"click\", function (event) {\n     var blob = new Blob([CSV], {\n       \"type\": \"text/csv;charset=utf-8;\"\n     });\n   navigator.msSaveBlob(blob, fileName);\n  }, false);\n}\n\ndocument.body.appendChild(link);\nlink.click();\ndocument.body.removeChild(link);\n\n//Regards\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Based on the answers above I created this function that I have tested on IE 11, Chrome 36 and Firefox 29 </p>\n\n<pre><code>function exportToCsv(filename, rows) {\n        var processRow = function (row) {\n            var finalVal = '';\n            for (var j = 0; j &lt; row.length; j++) {\n                var innerValue = row[j] === null ? '' : row[j].toString();\n                if (row[j] instanceof Date) {\n                    innerValue = row[j].toLocaleString();\n                };\n                var result = innerValue.replace(/\"/g, '\"\"');\n                if (result.search(/(\"|,|\\n)/g) &gt;= 0)\n                    result = '\"' + result + '\"';\n                if (j &gt; 0)\n                    finalVal += ',';\n                finalVal += result;\n            }\n            return finalVal + '\\n';\n        };\n\n        var csvFile = '';\n        for (var i = 0; i &lt; rows.length; i++) {\n            csvFile += processRow(rows[i]);\n        }\n\n        var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n        if (navigator.msSaveBlob) { // IE 10+\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            var link = document.createElement(\"a\");\n            if (link.download !== undefined) { // feature detection\n                // Browsers that support HTML5 download attribute\n                var url = URL.createObjectURL(blob);\n                link.setAttribute(\"href\", url);\n                link.setAttribute(\"download\", filename);\n                link.style = \"visibility:hidden\";\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            }\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p>I know there are lot of questions of this nature but I need to do this using JavaScript. I am using Dojo 1.8 and have all the attribute info in array, which looks like this:</p>\n\n<pre><code>[[\"name1\", \"city_name1\", ...][\"name2\", \"city_name2\", ...]]\n</code></pre>\n\n<p>Any idea how I can export this to csv on the client side?</p>\n",
            "last_activity_date": 1422876738,
            "question_id": 14964035,
            "score": 62,
            "tags": [
                "javascript",
                "csv",
                "dojo",
                "export",
                "client-side"
            ],
            "title": "How to export JavaScript array info to csv (on client side)?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Don't forget that the string representation of a javascript function represents the source code for that function. You could simply write your functions and constructors in an encapsulated way so they can be toString()'d and sent to the client.</p>\n\n<p>Another way to do it is use a build system, put the common code in separate files, and then include them in both the server and client scripts. I'm using that approach for a simple client/server game via WebSockets where the server and client both run essentially the same game loop and the client syncs up with the server every tic to make sure nobody's cheating.</p>\n\n<p>My build system for the game is a simple bash script that runs the files through the C preprocessor and then through sed to clean up some junk cpp leaves behind, so I can use all the normal preprocessor stuff like #include, #define, #ifdef, etc.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>The server can simply send JavaScript source files to the client (browser) but the trick is that the client will have to provide a mini \"exports\" environment before it can <code>exec</code> the code and store it as a module.</p>\n\n<p>A simple way to make such an environment is to use a closure.  For example, say your server provides source files via HTTP like <code>http://example.com/js/foo.js</code>.  The browser can load the required files via an XMLHttpRequest and load the code like so:</p>\n\n<pre><code>ajaxRequest({\n  method: 'GET',\n  url: 'http://example.com/js/foo.js',\n  onSuccess: function(xhr) {\n    var pre = '(function(){var exports={};'\n      , post = ';return exports;})()';\n    window.fooModule = eval(pre + xhr.responseText + post);\n  }\n});\n</code></pre>\n\n<p>The key is that client can wrap the foreign code into an anonymous function to be run immediately (a closure) which creates the \"exports\" object and returns it so you can assign it where you'd like, rather than polluting the global namespace.  In this example, it is assigned to the window attribute <code>fooModule</code> which will contain the code exported by the file <code>foo.js</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you want to write a module that can be used both client side and server side, I have a short blog post on a quick and easy method: <a href=\"http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/\">http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/</a> essentially the followig (where <code>this</code> is the same as <code>window</code>):</p>\n\n<pre><code>(function(exports){\n\n    // your code goes here\n\n   exports.test = function(){\n        return 'hello world'\n    };\n\n})(typeof exports === 'undefined'? this['mymodule']={}: exports);\n</code></pre>\n\n<p>Alternatively there are some projects aiming to implement the node.js API on the client side, such as <a href=\"https://github.com/marak/gemini.js\">Marak's gemini</a>.</p>\n\n<p>You might also be interested in <a href=\"https://github.com/substack/dnode\">DNode</a>, which lets you expose a JavaScript function so that it can be called from another machine using a simple JSON-based network protocol.</p>\n",
                    "is_accepted": true,
                    "score": 83
                },
                {
                    "body": "<p>Here's a library that streamlines code sharing between Node.js (Expressjs) and the browser:</p>\n\n<p><a href=\"http://epeli.github.com/piler/\" rel=\"nofollow\">http://epeli.github.com/piler/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would recommend looking into the <a href=\"http://requirejs.org/docs/node.html\">RequireJS adapter for Node</a>. The problem is that the CommonJS module pattern Node uses by default isn't asynchronous, which blocks loading in web browser. Require uses the AMD pattern, which is both asynchronous and compatible with both server and client, as long as you use the <code>r.js</code> adapter. </p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Seems like this might be a better solution:</p>\n\n<p><a href=\"https://github.com/substack/node-browserify\">https://github.com/substack/node-browserify</a></p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>now.js is also worth a look, it allows you to call server-side from the client-side, and client-side functions from the server-side</p>\n\n<p><a href=\"http://nowjs.com/\" rel=\"nofollow\">http://nowjs.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Epeli has a nice solution here <a href=\"http://epeli.github.com/piler/\">http://epeli.github.com/piler/</a> that even works without the library, just put this in a file called share.js</p>\n\n<pre><code>(function(exports){\n\n  exports.test = function(){\n       return 'This is a function from shared module';\n  };\n\n}(typeof exports === 'undefined' ? this.share = {} : exports));\n</code></pre>\n\n<p>On the server side just use:</p>\n\n<pre><code>var require('./share.js');\n\nshare.test();\n</code></pre>\n\n<p>And on the client side just load the js file and then use</p>\n\n<pre><code>share.test();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I realize this question is 2 years old, but none of the above solutions bring the CommonJS module system to the browser.</p>\n\n<p>As mentioned in the other answers, there are asset manager/packager solutions like <a href=\"https://github.com/substack/node-browserify\" rel=\"nofollow\">Browserify</a> or <a href=\"http://epeli.github.com/piler/\" rel=\"nofollow\">Piler</a> and there are RPC solutions like <a href=\"https://github.com/substack/dnode\" rel=\"nofollow\">dnode</a> or <a href=\"http://nowjs.com/\" rel=\"nofollow\">nowjs</a>.</p>\n\n<p>But I couldn't find an implementation of CommonJS for the browser (including a <code>require()</code> function and <code>exports</code> / <code>module.exports</code> objects, etc). So I wrote my own, only to discover afterwards that someone else had written it better than I had: <a href=\"https://github.com/weepy/brequire\" rel=\"nofollow\">https://github.com/weepy/brequire</a>. It's called Brequire (short for Browser require).</p>\n\n<p>Judging by popularity, asset managers fit the needs of most devs. However, if you need a browser implementation of CommonJS, <a href=\"https://github.com/weepy/brequire\" rel=\"nofollow\">Brequire</a> will probably fit the bill.</p>\n\n<p><strong>2015 Update:</strong> I no longer use Brequire (it hasn't been updated in a few years). If I'm just writing a small, open-source module and I want anyone to be able to easily use, then I'll follow a pattern similar to Caolan's answer (above) -- I wrote <a href=\"http://csnw.github.io/2013/06/23/this-in-node-modules-and-iifes.html\" rel=\"nofollow\">a blog post</a> about it a couple years ago.</p>\n\n<p>However, if I'm writing modules for private use or for a community that is standardized on CommonJS (like the <a href=\"http://ampersandjs.com/\" rel=\"nofollow\">Ampersand</a> community) then I'll just write them in CommonJS format and use <a href=\"https://github.com/substack/node-browserify\" rel=\"nofollow\">Browserify</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Maybe not entirely in line with the question, but I thought I'd share this.</p>\n\n<p>I wanted to make a couple of simple string utility functions, declared on String.prototype, available to both node and the browser. I simply keep these functions in a file called utilities.js (in a subfolder) and can easily reference it both from a script-tag in my browser code, and by using require (omitting the .js extension) in my node script:</p>\n\n<p><strong>my_node_script.js</strong></p>\n\n<pre><code>var utilities = require('./static/js/utilities')\n</code></pre>\n\n<p><strong>my_browser_code.html</strong></p>\n\n<pre><code>&lt;script src=\"/static/js/utilities.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Hope this is useful information to someone other than me.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If you want to write your browser in node-like style you can try <a href=\"https://github.com/farin/dualifyjs\" rel=\"nofollow\">dualify</a></p>\n\n<p>There is no browser code compilation, so you can write your application without limitations.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Write your code as <a href=\"http://requirejs.org/\" rel=\"nofollow\">RequireJS</a> modules, your tests as <a href=\"http://pivotal.github.io/jasmine/\" rel=\"nofollow\">Jasmine</a> tests.</p>\n\n<p>This way code can be loaded everywhere with RequireJS and the tests be run in the browser with jasmine-html and with <a href=\"https://github.com/mhevery/jasmine-node\" rel=\"nofollow\">jasmine-node</a> in node without the need to modify the code or the tests.</p>\n\n<p>Here is a <a href=\"https://github.com/blacksonic/minesweeper\" rel=\"nofollow\">working example</a> for this.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Checkout the jquery source code that makes this work in Node module pattern, AMD module pattern, and global in browser.:</p>\n\n<pre><code>(function(window){\n\n\nvar jQuery = 'blah';\n\nif ( typeof module === \"object\" &amp;&amp; module &amp;&amp; typeof module.exports === \"object\" ) {\n    // Expose jQuery as module.exports in loaders that implement the Node\n    // module pattern (including browserify). Do not create the global, since\n    // the user will be storing it themselves locally, and globals are frowned\n    // upon in the Node module world.\n    module.exports = jQuery;\n} else {\n    // Otherwise expose jQuery to the global object as usual\n    window.jQuery = window.$ = jQuery;\n\n    // Register as a named AMD module, since jQuery can be concatenated with other\n    // files that may use define, but not via a proper concatenation script that\n    // understands anonymous AMD modules. A named AMD is safest and most robust\n    // way to register. Lowercase jquery is used because AMD module names are\n    // derived from file names, and jQuery is normally delivered in a lowercase\n    // file name. Do this after creating the global so that if an AMD module wants\n    // to call noConflict to hide this version of jQuery, it will work.\n    if ( typeof define === \"function\" &amp;&amp; define.amd ) {\n        define( \"jquery\", [], function () { return jQuery; } );\n    }\n}\n\n})(this)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I am creating a small application with a JavaScript client (run in the browser) and a Node.js server, communicating using WebSocket.</p>\n\n<p>I would like to share code between the client and the server. I have only just started with Node.js and my knowledge of modern JavaScript is a little rusty, to say the least. So I am still getting my head around the CommonJS require() function. If I am creating my packages by using the 'export' object, then I cannot see how I could use the same JS files in the browser.</p>\n\n<p>I want to create a set of methods and classes that are used on both ends to facilitate encoding and decoding messages, and other mirrored tasks. However, the Node.js/CommonJS packaging systems seems to preclude me from creating JS files that can be used on both sides.</p>\n\n<p>I also tried using JS.Class to get a tighter OO model, but I gave up because I couldn't figure out how to get the provided JS files to work with require(). Is there something am I missing here?</p>\n",
            "last_activity_date": 1422292180,
            "question_id": 3225251,
            "score": 124,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "How can I share code between Node.js and the browser?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>For this job you should go with <code>javascriptRoutes</code> as it generates correct JS paths based on your  routes.conf. You'll find usage sample in Zentask <a href=\"https://github.com/playframework/Play20/tree/master/samples/\" rel=\"nofollow\">sample</a></p>\n\n<p>Anyway, for now you can fix your AJAX call by changing the <code>url</code> to</p>\n\n<pre><code>url : '@routes.Application.saveDefaultPhoneForUser()',\n</code></pre>\n\n<p>This way requires it to place the whole JS in template, which is wrong. It can or even should  be moved to separate JS file and to make it possible you need to use javascriptRoutes.</p>\n\n<p><strong><em>More...</em></strong></p>\n\n<p><strong>javascriptRoutes</strong> are not described <strong><em>yet</em></strong> in official documentation, but here's step-by-step introduction to it. Although the description looks sophisticated <em>de facto</em> using this way brings a lot of benefits.</p>\n\n<h2>1. Create the common routes</h2>\n\n<p>First you need to create common routes in <code>conf/routes</code> file:</p>\n\n<pre><code>GET     /item/:id     controllers.Application.getItem(id: Long)\nPOST    /item/new     controllers.Application.newItem\nPUT     /item/:id     controllers.Application.updateItem(id: Long)\n</code></pre>\n\n<p>Of course, you need to create at least these three actions in <code>Application</code> controller:</p>\n\n<ul>\n<li><code>getItem(Long id){ ... }</code></li>\n<li><code>newItem() { ... }</code></li>\n<li><code>updateItem(Long id) { ... }</code></li>\n</ul>\n\n<h2>2. Create an action translating common routes to JS</h2>\n\n<ul>\n<li>place it somewhere, ie. in your <code>Application</code> controller</li>\n<li>Let's call it <code>javascriptRoutes()</code></li>\n</ul>\n\n<p>In that action you'll point the <strong>existing</strong> routes from the <code>conf/routes</code> file</p>\n\n<pre><code>public static Result javascriptRoutes() {\n    response().setContentType(\"text/javascript\");\n    return ok(\n        Routes.javascriptRouter(\"myJsRoutes\",\n            routes.javascript.Application.getItem(),\n            routes.javascript.Application.newItem(),\n            routes.javascript.Application.updateItem(),\n            //inside somepackage\n            controllers.somepackage.routes.javascript.Application.updateItem()\n        )\n    );\n}\n</code></pre>\n\n<p><strong><em>Note:</em></strong> Don't set any params in brackets.</p>\n\n<h2>3. Create a route for <code>javascriptRoutes</code> action and include it in your template</h2>\n\n<p>Route <code>conf/routes</code></p>\n\n<pre><code>GET     /javascriptRoutes     controllers.Application.javascriptRoutes\n</code></pre>\n\n<p>View in <code>&lt;head&gt;</code> part of <code>/views/main.scala.html</code></p>\n\n<pre><code>&lt;script type=\"text/javascript\" src='@routes.Application.javascriptRoutes()'&gt;&lt;/script&gt;\n</code></pre>\n\n<h2>4. Use javascriptRoutes where you want</h2>\n\n<p>Up from now you can use routes in JS to get the correct path without need to specify the <code>url</code> and <code>type</code>. For an example instead of:</p>\n\n<pre><code> $('.getAjaxForThisContainer').click(function(e) {\n    var idToGet = $(\"#someField\").val();\n    $.ajax({\n        type : 'GET',\n        url : '@routes.Application.getItem()',\n        data : {\n            id: idToGet\n        },\n        success : function(data) {\n            // ... some code on success\n        }\n    });\n    return false;\n});\n</code></pre>\n\n<p>you can use simplified version (<code>myJsRoutes</code> from point 2):</p>\n\n<pre><code>myJsRoutes.controllers.Application.getItem(idToGet).ajax({\n    success : function(data) { ... some code ... }\n});\n</code></pre>\n\n<p>or </p>\n\n<pre><code>myJsRoutes.controllers.Application.newItem().ajax({\n    success : function(data) { ... some code ... }\n});\n</code></pre>\n\n<p>etc...</p>\n\n<ul>\n<li>you don't need to specify <code>type: \"POST\"</code> - JS router will use correct method according to <code>conf/routes</code> rule</li>\n<li>you can set <code>id</code> of the record (or other params) to <code>GET</code> or <code>PUT</code> (or other methods) using <code>routes-like</code> syntax in pure JS </li>\n<li>If your route rule contains all required params you can really minimize yours JS:</li>\n</ul>\n\n<p>for route:</p>\n\n<pre><code>GET   /some/:a/:b/:c    controllers.Application.getABC(a: String, b: Integer, c: String)\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>myJsRoutes.controllers.Application.getABC(\"a\", 1, \"b\" ).ajax({});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 90
                },
                {
                    "body": "<p>Marcus' answer is very good, so anyone else having this issue should be able to use this.</p>\n\n<p>I did have one issue though when trying to get this to work which took me a little while to get working. When I was making my ajax request it was routing to the wrong method.</p>\n\n<p>This was because in my routes file I had the following: </p>\n\n<pre><code>POST    /                           controllers.Application.makeCall()\nPOST    /                           controllers.Application.saveDefaultPhoneForUser(handset : String)\n</code></pre>\n\n<p>By having two post methods with the same location /. It seemed to always go to make call. So just a tip for anyone don't do this otherwise it wont work.</p>\n\n<p>I just needed to change it to:</p>\n\n<pre><code>POST    /                           controllers.Application.makeCall()\nPOST    /saveDefaultPhoneForUser    controllers.Application.saveDefaultPhoneForUser(handset : String)\n</code></pre>\n\n<p>Hope this helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Something to watch out for... when calling </p>\n\n<pre><code>Routes.javascriptRouter(\"myJsRoutes\",\n</code></pre>\n\n<p>Routes is imported from play.Routes, not play.api.Routes</p>\n\n<p>Had an error when I implemented this code, because I assumed it would came from api (clearly I was wrong).\nOther than that, everything works great~!!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I like \"old good\" simple way:</p>\n\n<p><strong>1</strong> In the page, with JQuery, </p>\n\n<p>inside some even-handler </p>\n\n<pre><code> $.get('/giveme', {'arg': value}, function(data) {\n\n                                    window.alert(data);\n\n                                  }\n );\n</code></pre>\n\n<p><strong>2</strong> On the server/play side</p>\n\n<p>2.1 Routes: <code>GET        /giveme              controllers.Application.giveme(arg)</code></p>\n\n<p>2.2 scala action:</p>\n\n<pre><code>object Application extends Controller { \n\n      def giveme(arg:String) = Action {\n        Ok(Json.toJson(\"hello,\" + arg ))\n      }\n\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>So I have successfully gotten ajax requests to work before but I have always had to use a form, and then at the end of the submit do return false so that it doesnt refresh the page.</p>\n\n<p>I have also just recently moved my javascript into a seperate file this has caused my @ commands to fail. Because of this I do not no how to set my url to my route?</p>\n\n<p>Html:</p>\n\n<pre><code>&lt;button id=\"saveAsDefaultButton\"&gt;Save as default&lt;/button&gt;\n</code></pre>\n\n<p>Playframework java code:</p>\n\n<pre><code>public static Result saveDefaultPhoneForUser(String handset) {\n    User currentUser = User.findByName(session(\"name\"));\n    currentUser.lastControlledHandset = theHandset;\n    currentUser.save();\n    return ok();\n}\n</code></pre>\n\n<p>routes:</p>\n\n<pre><code>POST    /                           controllers.Application.saveDefaultPhoneForUser(handset : String)\n</code></pre>\n\n<p>javascript:</p>\n\n<pre><code>$('#saveAsDefaultButton').click(function(evt) {\n        $('#errors').hide();\n        $.ajax({\n            type : 'POST',\n            url : \"controllers.Application.saveDefaultPhoneForUser\",\n            data : $('#controlledPhone option:selected').text(),\n            dataType : \"text\",\n            success : function(data) {\n                //setError('Call succedded');\n                //$('#test1').attr(\"src\", data)\n            },\n            error : function(data) {\n                setError('Make call failed');\n            }\n        });\n        return false;\n    });\n</code></pre>\n\n<p>Im sure there is a way to do this I am just having no luck finding anything. Any help greatly appreaciated.</p>\n",
            "last_activity_date": 1421751206,
            "question_id": 11133059,
            "score": 38,
            "tags": [
                "java",
                "javascript",
                "playframework",
                "playframework-2.0",
                "playframework-2.1"
            ],
            "title": "Play 2.x: How to make an AJAX request with a common button"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Why are you representing them as textareas? This is my favorite:</p>\n\n<p><a href=\"http://alexgorbatchev.com/wiki/SyntaxHighlighter\" rel=\"nofollow\">http://alexgorbatchev.com/wiki/SyntaxHighlighter</a></p>\n\n<p>But if you are using a CMS, there's probably a better plugin. For example, wordpress has an evolved version:</p>\n\n<p><a href=\"http://www.viper007bond.com/wordpress-plugins/syntaxhighlighter/\" rel=\"nofollow\">http://www.viper007bond.com/wordpress-plugins/syntaxhighlighter/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It's not possible to achieve the required level of control over presentation in a regular textarea.</p>\n\n<p>If you're OK with that, see <a href=\"http://codemirror.net/\">CodeMirror</a> or maybe even <s><a href=\"http://labs.mozilla.com/skywriter/\">skywriter</a> (formerly <a href=\"http://labs.mozilla.com/bespin/\">bespin</a>)</s> now merged into <a href=\"http://ace.ajax.org/\">Ace</a>.</p>\n\n<p>From the duplicate thread - an obligatory wikipedia link: <a href=\"http://en.wikipedia.org/wiki/Comparison_of_JavaScript-based_source_code_editors\">http://en.wikipedia.org/wiki/Comparison_of_JavaScript-based_source_code_editors</a></p>\n",
                    "is_accepted": true,
                    "score": 121
                },
                {
                    "body": "<p>The only editor I know of that has syntax highlighting and a fallback to a textarea is <a href=\"https://bespin.mozilla.com/\" rel=\"nofollow\">Mozilla Bespin</a>. Google around for embedding Bespin to see how to embed the editor. The only site I know of that uses this right now is the very alpha <a href=\"http://jetpack.stage.mozilla.com/\" rel=\"nofollow\">Mozilla Jetpack Gallery</a> (in the submit a Jetpack page) and you may want to see how they include it.</p>\n\n<p>There's also a <a href=\"http://almaer.com/blog/embedding-and-reusing-the-bespin-editor-component\" rel=\"nofollow\">blog post on embedding and reusing the Bespin editor</a> that may help you.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would recommend <a href=\"http://www.cdolivet.com/index.php?page=editArea\">EditArea</a> for live editing of a syntax hightlighted textarea.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><strong>Update:</strong> Bespin is now ACE, which is mentioned by the highest rated answer here. Use ACE instead.</p>\n\n<p>Gotta go with <a href=\"http://mozillalabs.com/bespin/\" rel=\"nofollow\">Bespin</a> by Mozilla. It's built using HTML5 features (so it's quick and fast, but doesn't support legacy browsers though), but definitely amazing to use and beats everything I've come across - probably beacause it's Mozilla backing it, and they develop Firefox so yeah... There's also a <a href=\"http://www.balupton.com/sandbox/jquery-sparkle/demo/#bespin\" rel=\"nofollow\">jQuery Plugin which contains a extension for it</a> to make it a bit easier to use with jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://sourceforge.net/projects/codepress/\">CodePress</a> does this, as does <a href=\"http://www.cdolivet.com/index.php?page=editArea\">EditArea</a>. Both are open source.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Here is <a href=\"http://programmers.stackexchange.com/a/136741/6798\">the response I've done to a similar question</a> (<a href=\"http://programmers.stackexchange.com/q/136736/6798\">Online Code Editor</a>) on <a href=\"http://programmers.stackexchange.com/\">programmers</a>:</p>\n\n<p>First, you can take a look to this article:<br>\n<a href=\"http://en.wikipedia.org/wiki/Comparison_of_JavaScript-based_source_code_editors\">Wikipedia \u2015 Comparison of JavaScript-based source code editors</a>.</p>\n\n<p>For more, here is some tools that seem to fit with your request:</p>\n\n<ul>\n<li><p><a href=\"http://sourceforge.net/projects/editarea/\">EditArea</a> \u2015 <a href=\"http://fileeditor.binary-technology.ro/index.php?r=site/page&amp;view=test\"><em>Demo as FileEditor</em></a> who is a <a href=\"http://www.yiiframework.com/extension/fileeditor/\">Yii Extension</a> \u2015 (<em>Apache Software License, BSD, LGPL</em>)</p>\n\n<blockquote>\n  <p>Here is EditArea, a free javascript editor for source code. It allow to write well formated source code with line numerotation, tab support, search &amp; replace (with regexp) and live syntax highlighting (customizable).</p>\n</blockquote></li>\n<li><p><a href=\"http://sourceforge.net/projects/codepress/\">CodePress</a> \u2015 <a href=\"http://demo10.joomler.net/content/view/14/2/\"><em>Demo of Joomla! CodePress Plugin</em></a> \u2015 (<em>LGPL</em>) \u2015 It doesn't work in Chrome and it looks like development has ceased.</p>\n\n<blockquote>\n  <p>CodePress is web-based source code editor with syntax highlighting written in JavaScript that colors text in real time while it's being typed in the browser.</p>\n</blockquote></li>\n<li><p><a href=\"http://codemirror.net/\">CodeMirror</a> \u2015 <a href=\"http://codemirror.net/demo/preview.html\"><em>One of the many demo</em></a> \u2015 (<em><a href=\"http://codemirror.net/LICENSE\">MIT-style</a> license + optional <a href=\"http://codemirror.net/#commercial\">commercial support</a></em>)</p>\n\n<blockquote>\n  <p>CodeMirror is a JavaScript library that can be used to create a relatively pleasant editor interface for code-like content \u2015 computer programs, HTML markup, and similar. If a mode has been written for the language you are editing, the code will be coloured, and the editor will optionally help you with indentation</p>\n</blockquote></li>\n<li><p><a href=\"http://ace.ajax.org/\">Ace Ajax.org Cloud9 Editor</a> \u2015 <a href=\"http://ace.ajax.org/build/kitchen-sink.html\"><em>Demo</em></a> \u2015 (<em>Mozilla tri-license (MPL/GPL/LGPL)</em>)</p>\n\n<blockquote>\n  <p>Ace is a standalone code editor written in JavaScript. Our goal is to create a web based code editor that matches and extends the features, usability and performance of existing native editors such as TextMate, Vim or Eclipse. It can be easily embedded in any web page and JavaScript application. Ace is developed as the primary editor for <a href=\"http://www.cloud9ide.com/\">Cloud9 IDE</a> and the successor of the Mozilla Skywriter (Bespin) Project.</p>\n</blockquote></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 14
                }
            ],
            "body": "<p>I am storing a number of HTML blocks inside a CMS for reasons of easier maintenance. They are represented by <code>&lt;textarea&gt;</code>s.</p>\n\n<p>Does anybody know a JavaScript Widget of some sort that can do syntax highlighting for HTML within a <code>textarea</code> or similar, while still staying a plain text editor (no WYSIWYG or advanced functions)?</p>\n",
            "last_activity_date": 1408803618,
            "question_id": 1619167,
            "score": 99,
            "tags": [
                "javascript",
                "html",
                "richtextbox",
                "widget",
                "highlighting"
            ],
            "title": "Textarea that can do syntax highlighting on the fly?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>I think <a href=\"http://backbonetutorials.com/organizing-backbone-using-modules/\">this</a> is what might help you. Everything in the solution revolves around <code>require.js</code> library which is a JavaScript file and module loader.</p>\n\n<p>The tutorial at the link above shows very nicely how a backbone project could be organized. A <a href=\"https://github.com/thomasdavis/backbonetutorials/tree/gh-pages/examples/modular-backbone\">sample implementation</a> is also provided. Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><strong>EDIT: This answer is old and outdated.  I'd delete it, but it is the \"accepted\" answer.  I'll inject my opinion instead.</strong></p>\n\n<p><strong>I wouldn't advocate doing this anymore. Instead, I would separate all templates into individual HTML files.  Some would suggest loading these asynchronously (Require.js or a template cache of sorts).  That works well on small projects but on large projects with lots of templates, you find yourself making a ton of small async requests on page load which I really dislike.  (ugh... ok, you can get around it with Require.js by pre-compiling your initial dependencies with r.js, but for templates, this still feels wrong to me)</strong></p>\n\n<p><strong>I like using a grunt task (grunt-contrib-jst) to compile all of the HTML templates into a single templates.js file and include that.  You get the best of all worlds IMO... templates live in a file, compilation of said templates happen at build time (not runtime), and you don't have one hundred tiny async requests when the page starts up.</strong></p>\n\n<p><strong>Everything below is junk</strong></p>\n\n<p>For me, I prefer the simplicity of including a JS file with my template.  So, I might create a file called view_template.js which includes the template as a variable:</p>\n\n<pre><code>app.templates.view = \" \\\n    &lt;h3&gt;something code&lt;/h3&gt; \\\n\";\n</code></pre>\n\n<p>Then, it is as simple as including the script file like a normal one and then using it in your view:</p>\n\n<pre><code>template: _.template(app.templates.view)\n</code></pre>\n\n<p>Taking it a step further, I <em>actually</em> use coffeescript, so my code actually looks more like this and avoid the end-of-line escape characters:</p>\n\n<pre><code>app.templates.view = '''\n    &lt;h3&gt;something code&lt;/h3&gt;\n'''\n</code></pre>\n\n<p>Using this approach avoids brining in require.js where it really isn't necessary.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>Here is a simple solution:</p>\n\n<pre><code>var rendered_html = render('mytemplate', {});\n\nfunction render(tmpl_name, tmpl_data) {\n    if ( !render.tmpl_cache ) { \n        render.tmpl_cache = {};\n    }\n\n    if ( ! render.tmpl_cache[tmpl_name] ) {\n        var tmpl_dir = '/static/templates';\n        var tmpl_url = tmpl_dir + '/' + tmpl_name + '.html';\n\n        var tmpl_string;\n        $.ajax({\n            url: tmpl_url,\n            method: 'GET',\n            async: false,\n            success: function(data) {\n                tmpl_string = data;\n            }\n        });\n\n        render.tmpl_cache[tmpl_name] = _.template(tmpl_string);\n    }\n\n    return render.tmpl_cache[tmpl_name](tmpl_data);\n}\n</code></pre>\n\n<p>Using \"async: false\" here is not a bad way because in any case you must wait until template  will be loaded. </p>\n\n<p>So, \"render\" function</p>\n\n<ol>\n<li>allows you to store each template in separate html file in static\ndir </li>\n<li>is very lightweight</li>\n<li>compiles and caches templates</li>\n<li>abstracts template loading logic. For example, in future you can use preloaded and precompiled templates.</li>\n<li>is easy to use</li>\n</ol>\n\n<p>[I am editing the answer instead of leaving a comment because I believe this to be important.]</p>\n\n<p>if templates are not showing up in <strong><em>native app</em></strong>, and you see <code>HIERARCHY_REQUEST_ERROR: DOM Exception 3</code>, look at answer by Dave Robinson to <a href=\"http://stackoverflow.com/questions/1256394/what-exactly-can-cause-an-hierarchy-request-err-dom-exception-3-error\">What exactly can cause an &quot;HIERARCHY_REQUEST_ERR: DOM Exception 3&quot;-Error?</a>.  </p>\n\n<p>Basically, you must add</p>\n\n<pre><code>dataType: 'html'\n</code></pre>\n\n<p>to the $.ajax request.</p>\n",
                    "is_accepted": false,
                    "score": 83
                },
                {
                    "body": "<p>I got interested on javascript templating and now I'm taking the first steps with backbone. This is what i came up with and seems to work pretty well. </p>\n\n<pre><code>window.App = {\n\n    get : function(url) {\n        var data = \"&lt;h1&gt; failed to load url : \" + url + \"&lt;/h1&gt;\";\n        $.ajax({\n            async: false,\n            url: url,\n            success: function(response) {\n                data = response;\n            }\n        });\n        return data;\n    }\n}\n\nApp.ChromeView = Backbone.View.extend({\n    template: _.template( App.get(\"tpl/chrome.html\") ),\n    render: function () {\n        $(this.el).html(this.template());\n        return this;\n    },\n});\n\nApp.chromeView = new App.ChromeView({ el : document.body });\nApp.chromeView.render();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I didn't want to use require.js for this simple task, so I used modified koorchik's solution. </p>\n\n<pre><code>function require_template(templateName) {\n    var template = $('#template_' + templateName);\n    if (template.length === 0) {\n        var tmpl_dir = './templates';\n        var tmpl_url = tmpl_dir + '/' + templateName + '.tmpl';\n        var tmpl_string = '';\n\n        $.ajax({\n            url: tmpl_url,\n            method: 'GET',\n            async: false,\n            contentType: 'text',\n            success: function (data) {\n                tmpl_string = data;\n            }\n        });\n\n        $('head').append('&lt;script id=\"template_' + \n        templateName + '\" type=\"text/template\"&gt;' + tmpl_string + '&lt;\\/script&gt;');\n    }\n}\n\nrequire_template('a');\nrequire_template('b');\n</code></pre>\n\n<p>Why to append templates to document, rather than storing them in javascript object? Because in production version I would like to generate html file with all templates already included, so I won't need to make any additional ajax requests. And in the same time I won't need to make any refactoring in my code, as I use </p>\n\n<pre><code>this.template = _.template($('#template_name').html());\n</code></pre>\n\n<p>in my Backbone views.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I had to set the data type to \"text\" to make it work for me:</p>\n\n<pre><code>get : function(url) {\n    var data = \"&lt;h1&gt; failed to load url : \" + url + \"&lt;/h1&gt;\";\n    $.ajax({\n        async: false,\n        dataType: \"text\",\n        url: url,\n        success: function(response) {\n            data = response;\n        }\n    });\n    return data;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This might be slightly off topic, but you could use Grunt (http://gruntjs.com/) - which runs on node.js (http://nodejs.org/, available for all major platforms) to run tasks from the command line. There are a bunch of plugins for this tool, like a template compiler, <a href=\"https://npmjs.org/package/grunt-contrib-jst\">https://npmjs.org/package/grunt-contrib-jst</a>. See documentation on GitHub, <a href=\"https://github.com/gruntjs/grunt-contrib-jst\">https://github.com/gruntjs/grunt-contrib-jst</a>. (You will also need to understand how to run node package manager, <a href=\"https://npmjs.org/\">https://npmjs.org/</a>. Don't worry, it's incredibly easy and versatile. )</p>\n\n<p>You can then keep all your templates in separate html files, run the tool to precompile them all using underscore (which I believe is a dependency for the JST plugin, but don't worry, node package manager will auto install dependencies for you).</p>\n\n<p>This compiles all your templates to one script, say </p>\n\n<pre><code>templates.js\n</code></pre>\n\n<p>Loading the script will set a global - \"JST\" by default -  which is an array of functions, and can be accessed like so:</p>\n\n<p><code>JST['templates/listView.html']()</code> </p>\n\n<p>which would be similar to </p>\n\n<pre><code>_.template( $('#selector-to-your-script-template'))\n</code></pre>\n\n<p>if you put the content of that script tag in (templates/)listView.html</p>\n\n<p>However, the real kicker is this: Grunt comes with this task called 'watch', which will basically monitor changes to files that you have defined in your local grunt.js file (which is basically a config file for your Grunt project, in javascript). If you have grunt start this task for you, by typing: </p>\n\n<pre><code>grunt watch\n</code></pre>\n\n<p>from the command line, Grunt will monitor all changes you make to the files and auto-execute all tasks that you have setup for it in that grunt.js file if it detects changes - like the <em>jst</em> task described above. Edit and then save your files, and all your templates recompile into one js file, even if they are spread out over a number of directories and subdirectories. </p>\n\n<p>Similar tasks can be configured for linting your javascript, running tests, concatenating and minifying / uglifying your script files. And all can be tied to the watch task so changes to your files will automatically trigger a new 'build' of your project. </p>\n\n<p>It takes some time to set things up and understand how to configure the grunt.js file, but it well, well worth the time invested, and I don't think you will ever go back to a pre-grunt way of working</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I know this question is really old but it came up as the first result on a google search for underscore ajax templates.</p>\n\n<p>I was tired of not finding a good solution for this so I created my own:</p>\n\n<p><a href=\"https://github.com/ziad-saab/underscore-async-templates\" rel=\"nofollow\">https://github.com/ziad-saab/underscore-async-templates</a></p>\n\n<p>In addition to loading underscore templates using AJAX, it adds &lt;% include %> functionality. I hope it can be useful to someone.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This mixin allows you to render external template using <strong>Underscore</strong> in very simple way: <code>_.templateFromUrl(url, [data], [settings])</code>. Method API is almost the same as <strong>Underscore's</strong> <a href=\"http://underscorejs.org/#template\">_.template()</a>. Caching included.</p>\n\n<pre><code>_.mixin({templateFromUrl: function (url, data, settings) {\n    var templateHtml = \"\";\n    this.cache = this.cache || {};\n\n    if (this.cache[url]) {\n        templateHtml = this.cache[url];\n    } else {\n        $.ajax({\n            url: url,\n            method: \"GET\",\n            async: false,\n            success: function(data) {\n                templateHtml = data;\n            }\n        });\n\n        this.cache[url] = templateHtml;\n    }\n\n    return _.template(templateHtml, data, settings);\n}});\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var someHtml = _.templateFromUrl(\"http://example.com/template.html\", {\"var\": \"value\"});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I was a bit uneasy forcing jQuery to function synchronously, so I modified the previous synchronous example using promises. It's pretty much the same, but runs asynchronously. I'm using hbs templates in this example:</p>\n\n<pre><code>var asyncRenderHbs= function(template_name, template_data) {\n    if (!asyncRenderHbs.template_cache) { \n        asyncRenderHbs.template_cache= {};\n    }\n\n    var promise= undefined;\n\n    if (!asyncRenderHbs.template_cache[template_name]) {\n        promise= new Promise(function(resolve, reject) {\n            var template_url= '/templates/' + template_name;\n            $.ajax({\n                url: template_url,\n                method: 'GET',\n                success: function(data) {\n                    asyncRenderHbs.template_cache[template_name]= Handlebars.compile(data);\n                    resolve(asyncRenderHbs.template_cache[template_name](template_data));\n                },\n                error: function(err, message) {\n                    reject(err);\n                }           \n            });\n        });\n    } else {\n        promise= Promise.resolve(asyncRenderHbs.template_cache[template_name](template_data));\n    }\n\n    return promise;\n};\n</code></pre>\n\n<p>Then to use the rendered html:</p>\n\n<pre><code>asyncRenderHbs('some_template.hbs', context)\n    .then(function(html) {\n        applicationMain.append(html);\n        // Do other stuff here after html is rendered...\n    })\n    .catch(function(err) {\n        // Handle errors\n    });\n</code></pre>\n\n<p>NOTE: As discussed by others, it would be preferable to compile all templates into a single templates.js file and load that in the beginning rather than have many small synchronous AJAX calls to get templates when the webpage loads.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I use <a href=\"http://documentcloud.github.com/underscore/#template\">Underscore template</a>. It is possible to attach a <strong>external file as template</strong>?</p>\n\n<p>In Backbone View I have:</p>\n\n<pre><code> textTemplate: _.template( $('#practice-text-template').html() ),\n\n initialize: function(){                                            \n  this.words = new WordList;            \n  this.index = 0;\n  this.render();\n },\n</code></pre>\n\n<p>In my html is:</p>\n\n<pre><code>&lt;script id=\"practice-text-template\" type=\"text/template\"&gt;\n   &lt;h3&gt;something code&lt;/h3&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>It works well. But <strong>I need external template</strong>.\nI try:</p>\n\n<pre><code>&lt;script id=\"practice-text-template\" type=\"text/template\" src=\"templates/tmp.js\"&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>textTemplate: _.template( $('#practice-text-template').load('templates/tmp.js') ),\n</code></pre>\n\n<p>or </p>\n\n<pre><code>$('#practice-text-template').load('templates/tmp.js', function(data){ this.textTemplate = _.template( data ) })\n</code></pre>\n\n<p>but it did not work.</p>\n\n<p>Thanks a lot for Your help.\nTom</p>\n",
            "last_activity_date": 1421444705,
            "question_id": 8366733,
            "score": 86,
            "tags": [
                "javascript",
                "backbone.js",
                "underscore.js"
            ],
            "title": "External template in Underscore"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>If you need inheritance there are many, many libraries already offering this. At the very least read them to find out where you code is wrong. But why reinvent? Two awesome javascript inheritance libraries that come to mind are <a href=\"https://github.com/ded/klass\">klass</a> and <a href=\"https://github.com/Gozala/selfish\">selfish.js</a> (I've used both, they're amazing.)</p>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>I think Crockfords solution is too complicated, as is John's. It's much simpler to get javascript inheritance than both of them seem to describe. Consider: </p>\n\n<pre><code>//Classes\nfunction A() {\n    B.call(this);\n}\n\nfunction B() {\n    C.call(this);\n    this.bbb = function() {\n        console.log(\"i was inherited from b!\");\n    }\n}\n\nfunction C() {\n    D.call(this);\n}\n\nfunction D() {\n    E.call(this);\n}\n\nfunction E() {\n    //instance property \n    this.id = Math.random()\n}\n\n//set up the inheritance chain (order matters) \nD.prototype = new E();\nC.prototype = new D();\nB.prototype = new C();\nA.prototype = new B();\n\n//Add custom functions to each\nA.prototype.foo = function() {\n    console.log(\"a\");\n};\nB.prototype.bar = function() {\n    console.log(\"b\");\n};\nC.prototype.baz = function() {\n    console.log(\"c\");\n};\nD.prototype.wee = function() {\n    console.log(\"d\");\n};\nE.prototype.woo = function() {\n    console.log(\"e\");\n};\n\n//Some tests\na = new A();\na.foo();\na.bar();\na.baz();\na.wee();\na.woo();\nconsole.log(a.id);\na.bbb();\nconsole.log(a instanceof A);\nconsole.log(a instanceof B);\nconsole.log(a instanceof C);\nconsole.log(a instanceof D);\nconsole.log(a instanceof E);\u200b\nvar b = new B();\nconsole.log(b.id)\n</code></pre>\n\n<p>I've written a complete description of the above solution on <a href=\"http://marcosc.com/2012/04/nested-inheritance-in-javascript/\">my blog</a>.    </p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>To implement javascript inheritance in <a href=\"http://kangax.github.com/es5-compat-table/\">ECMAScript 5</a> you can define the prototype of an object and use <code>Object.create</code> to inherit. You can also add/override properties as much as you want.</p>\n\n<p>Example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>/**\n * Transform base class\n */\nfunction Transform() {\n    this.type = \"2d\";\n}\n\nTransform.prototype.toString = function() {\n    return \"Transform\";\n}\n\n/**\n * Translation class.\n */\nfunction Translation(x, y) {\n    // Parent constructor\n    Transform.call(this);\n\n    // Public properties\n    this.x = x;\n    this.y = y;\n}\n\n// Inheritance\nTranslation.prototype = Object.create(Transform.prototype);\n\n// Override\nTranslation.prototype.toString = function() {\n    return Transform.prototype.toString() + this.type + \" Translation \" + this.x + \":\" + this.y;\n}\n\n/**\n * Rotation class.\n */\nfunction Rotation(angle) {\n    // Parent constructor\n    Transform.call(this);\n\n    // Public properties\n    this.angle = angle;\n}\n\n// Inheritance\nRotation.prototype = Object.create(Transform.prototype);\n\n// Override\nRotation.prototype.toString = function() {\n    return Transform.prototype.toString() + this.type + \" Rotation \" + this.angle;\n}\n\n// Tests\ntranslation = new Translation(10, 15);\n\nconsole.log(translation instanceof Transform); // true\nconsole.log(translation instanceof Translation); // true\nconsole.log(translation instanceof Rotation); // false\n\nconsole.log(translation.toString()) // Transform2d Translation 10:15\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 95
                },
                {
                    "body": "<p>As I played with JS objects, I found more minimalistic solution :-) Enjoy!</p>\n\n<pre><code>function extend(b,a,t,p) { b.prototype = a; a.apply(t,p); }\n</code></pre>\n\n<p>Example</p>\n\n<pre><code>function A() {\n  this.info1 = function() {\n    alert(\"A\");\n  }\n}\n\nfunction B(p1,p2) { extend(B,A,this);\n  this.info2 = function() {\n    alert(\"B\"+p1+p2);\n  }\n}\n\nfunction C(p) { extend(C,B,this,[\"1\",\"2\"]);\n  this.info3 = function() {\n    alert(\"C\"+p);\n  }\n}\n\n\nvar c = new C(\"c\");\nc.info1(); // A\nc.info2(); // B12\nc.info3(); // Cc\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is the simplest and I hope the easiest way to understand inheritance in JS. Most helpful this example will be for PHP programmers.</p>\n\n<pre><code>function Mother(){\n    this.canSwim = function(){\n        console.log('yes');\n    }\n}\n\nfunction Son(){};\nSon.prototype = new Mother;\nSon.prototype.canRun = function(){\n    console.log('yes');\n}\n</code></pre>\n\n<p>Now the son has one overridden method and one new</p>\n\n<pre><code>function Grandson(){}\nGrandson.prototype = new Son;\nGrandson.prototype.canPlayPiano = function(){\n    console.log('yes');\n};\nGrandson.prototype.canSwim = function(){\n    console.log('no');\n}\n</code></pre>\n\n<p>Now the grandson has two overridden methods and one new</p>\n\n<pre><code>var g = new Grandson;\ng.canRun(); // =&gt; yes\ng.canPlayPiano(); // =&gt; yes\ng.canSwim(); // =&gt; no\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>While I agree with all above answers, I feel that JavaScript need not be Object Oriented, (Avoid inheritance), instead <a href=\"http://davidwalsh.name/javascript-objects\" rel=\"nofollow\">an object-based approach</a> should be sufficient in most cases.</p>\n\n<p>I like the way <a href=\"http://eloquentjavascript.net\" rel=\"nofollow\">Eloquent JavaScript</a> starts its <a href=\"http://eloquentjavascript.net/chapter8.html\" rel=\"nofollow\">Chapter 8</a> on Object Oriented Programming talking about OO. Instead of deciphering best way to implement Inheritance, more energy should be devoted to learn functional aspects of JavaScript, hence, I found <a href=\"http://eloquentjavascript.net/chapter6.html\" rel=\"nofollow\">Chapter 6</a> on Functional Programming, more interesting.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>//This is an example of how to override a method, while preserving access to the original.\n//The pattern used is actually quite simple using JavaScripts ability to define closures:\n\n    this.somefunction = this.someFunction.override(function(args){\n        var result = this.inherited(args);\n        result += this.doSomethingElse();\n        return result;\n    });\n\n//It is accomplished through this piece of code (courtesy of Poul Krogh):\n\n/***************************************************************\n    function.override overrides a defined method with a new one, \n    while preserving the old method.\n    The old method is only accessible from the new one.\n    Use this.inherited() to access the old method.\n***************************************************************/\n\n    Function.prototype.override = function(func)\n    {\n        var remember = this;\n        var f = function() \n        {\n             var save = this.inherited; \n             this.inherited = remember;\n             var result = func.apply(this, Array.prototype.slice.call(arguments));\n             this.inherited = save;\n             return result;\n        };\n        return f;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Why not use objects instead of functions : </p>\n\n<pre><code>var Base = {\n    superalert : function() {\n        alert('tst');\n    }\n};\n\nvar Child = Object.create(Base);\nChild.width = 20;\nChild.height = 15;\nChild.a = ['s',''];\nChild.childAlert = function () {\n        alert(this.a.length);\n        alert(this.height);\n    }\n\nvar Child1 = Object.create(Child);\nChild1.depth = 'depth';\nChild1.height = 'h';\nChild1.alert = function () {\n    alert(this.height);\n    alert(this.a.length);\n    this.childAlert();\n    this.superalert();\n};\n</code></pre>\n\n<p>And call it like this :     </p>\n\n<pre><code>var child1 = Object.create(Child1);\nchild1.alert();\n</code></pre>\n\n<p>This approach is much more cleaner then with functions.\nI found this blog explaining why inheritance with functions isn't a proper way to do it in JS : <a href=\"http://davidwalsh.name/javascript-objects-deconstruction\" rel=\"nofollow\">http://davidwalsh.name/javascript-objects-deconstruction</a></p>\n\n<p>EDIT</p>\n\n<p>var Child can also be written as :</p>\n\n<pre><code>var Child = Object.create(Base, {\n    width : {value : 20},\n    height  : {value : 15, writable: true},\n    a : {value : ['s', ''], writable: true},\n    childAlert : {value : function () {\n        alert(this.a.length);\n        alert(this.height);\n    }}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>//\n//  try this one:\n//  \n//    function ParentConstructor() {}\n//    function ChildConstructor()  {}\n//\n//    var \n//        SubClass = ChildConstructor.xtendz( ParentConstructor );\n//\nFunction.prototype.xtendz = function ( SuperCtorFn ) {\n\n    return ( function( Super, _slice ) {\n\n                // 'freeze' host fn \n                var\n                    baseFn = this, \n                    SubClassCtorFn;\n\n                // define child ctor\n                SubClassCtorFn = function ( /* child_ctor_parameters..., parent_ctor_parameters[] */ ) {\n\n                    // execute parent ctor fn on host object\n                    // pass it last ( array ) argument as parameters\n                    Super.apply( this, _slice.call( arguments, -1 )[0] );\n\n                    // execute child ctor fn on host object\n                    // pass remaining arguments as parameters\n                    baseFn.apply( this, _slice.call( arguments, 0, -1 ) );\n\n                };\n\n                // establish proper prototype inheritance\n                // 'inherit' methods\n                SubClassCtorFn.prototype = new Super;\n\n                // (re)establish child ctor ( instead of Super ctor )\n                SubClassCtorFn.prototype.constructor = SubClassCtorFn;\n\n                // return built ctor\n                return SubClassCtorFn;\n\n    } ).call( this, SuperCtorFn, Array.prototype.slice );\n};\n\n// declare parent ctor\nfunction Sup( x1, x2 ) {\n    this.parent_property_1 = x1;\n    this.parent_property_2 = x2;\n}\n\n// define some methods on parent\nSup.prototype.hello = function(){ \n   alert(' ~  h e l l o   t h e r e  ~ ');\n};\n\n\n// declare child ctor\nfunction Sub( x1, x2 ) {\n    this.child_property_1 = x1;\n    this.child_property_2 = x2;\n}\n\nvar\n    SubClass = Sub.xtendz(Sup), // get 'child class' ctor\n    obj;\n\n// reserve last array argument for parent ctor\nobj = new SubClass( 97, 98, [99, 100] ); \n\nobj.hello();\n\nconsole.log( obj );\nconsole.log('obj instanceof SubClass      -&gt; ', obj instanceof SubClass      );\nconsole.log('obj.constructor === SubClass -&gt; ', obj.constructor === SubClass );\nconsole.log('obj instanceof Sup           -&gt; ', obj instanceof Sup           );\nconsole.log('obj instanceof Object        -&gt; ', obj instanceof Object        );\n\n//\n//  Object {parent_property_1: 99, parent_property_2: 100, child_property_1: 97, child_property_2: 98}\n//  obj instanceof SubClass      -&gt; true\n//  obj.constructor === SubClass -&gt; true\n//  obj instanceof Sup           -&gt; true\n//  obj instanceof Object        -&gt; true\n//\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The easiest way to use <a href=\"http://a-web.me/javascript.html\" rel=\"nofollow\">AWeb library</a>. Official sample:</p>\n\n<pre><code>   /**\n     * A-class\n     */\n   var ClassA = AWeb.class({\n     public : {\n        /**\n          * A-class constructor\n          */\n        constructor : function() {\n           /* Private variable */\n           this.variable1 = \"A\";\n           this.calls = 0;\n        },\n\n        /**\n          * Function returns information about the object\n          */\n        getInfo : function() {\n           this.incCalls();\n\n           return \"name=\" + this.variable1 + \", calls=\" + this.calls;\n        }\n     },\n     private : {\n        /**\n          * Private function\n          */\n        incCalls : function() {\n           this.calls++;\n        }\n     }\n  });\n  /**\n    * B-class\n    */\n  var ClassB = AWeb.class({\n     extends : ClassA,\n     public : {\n        /**\n          * B-class constructor\n          */\n        constructor : function() {\n           this.super();\n\n           /* Private variable */\n           this.variable1 = \"B\";\n        },\n\n        /**\n          * Function returns extended information about the object\n          */\n        getLongInfo : function() {\n           return this.incCalls !== undefined ? \"incCalls exists\" : \"incCalls undefined\";\n        }\n     }\n  });\n  /**\n    * Main project function\n    */\n  function main() {\n     var a = new ClassA(),\n         b = new ClassB();\n\n     alert(\n        \"a.getInfo \" + (a.getInfo ? \"exists\" : \"undefined\") + \"\\n\" +\n        \"a.getLongInfo \" + (a.getLongInfo ? \"exists\" : \"undefined\") + \"\\n\" +\n\n        \"b.getInfo \" + (b.getInfo ? \"exists\" : \"undefined\") + \"\\n\" +\n        \"b.getLongInfo \" + (b.getLongInfo ? \"exists\" : \"undefined\") + \"\\n\" +\n\n        \"b.getInfo()=\" + b.getInfo() + \"\\n\" +\n        \"b.getLongInfo()=\" + b.getLongInfo()\n     );\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found a solution much easier than extend and prototyping things. Actually I don't know how efficient this is though it looks clean and functional. </p>\n\n<pre><code>var A = function (p) {\n    if (p == null) p = this;\n    p.a1 = 0;\n    this.a2 = 0;\n    var a3 = 0;\n};\n\nvar B = function (p) {\n    if (p == null) p = this;\n    p.b1 = new A(this);\n    this.b2 = new A(this);\n    var b3 = new A(this);\n    this b4 = new A();\n};\n\nvar a = new A ();\nvar b = new B ();\n</code></pre>\n\n<p>result:</p>\n\n<pre><code>a\n    a1        0\n    a2        0\nb\n    a1        0\n    b1\n        a2    0\n    b2\n        a2    0\n    b4\n        a1    0\n        a2    0\n</code></pre>\n\n<p>practical example:</p>\n\n<pre><code>var Point = function (p) {\n    if (p == null) p = this;\n    var x = 0;\n    var y = 0;\n    p.getPoint = function () { return [x,y]; };\n    p.setPoint = function (_x,_y) { x = _x; y = _y; };\n};\n\nvar Dimension = function (p) {\n    if (p == null) p = this;\n    var w = 0;\n    var h = 0;\n    p.getDimension = function() { return [w,h] };\n    p.setDimension = function(_w,_h) { w = _w; h = _h };\n};\n\nvar Rect = function (p) {\n    if (p == null) p = this;\n    var dimension = new Dimension(this);\n    var location  = new Point(this);\n};\n\nvar rect = new Rect ();\nrect.setDimension({w:30,h:40});\nrect.setPoint({x:50,y:50});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>How about this simple approach</p>\n\n<pre><code>    function Body(){\n        this.Eyes = 2;\n        this.Arms = 2;\n        this.Legs = 2;\n        this.Heart = 1;\n        this.Walk = function(){alert(this.FirstName + ' Is Walking')};\n    }\n\n    function BasePerson() {\n        var BaseBody = new Body(this);\n        BaseBody.FirstName = '';\n        BaseBody.LastName = '';\n        BaseBody.Email = '';\n        BaseBody.IntroduceSelf = function () { alert('Hello my name is ' + this.FirstName + ' ' + this.LastName); };\n        return BaseBody;\n    }\n\n    function Person(FirstName,LastName)\n    {\n        var PersonBuild = new BasePerson();\n        PersonBuild.FirstName = FirstName;\n        PersonBuild.LastName = LastName;\n        return PersonBuild;\n    }\n\n    var Person1 = new Person('Code', 'Master');\n    Person1.IntroduceSelf();\n    Person1.Walk();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's my solution, which is based on the standard prototypical inheritance method described in <a href=\"http://stackoverflow.com/users/885464/lorenzo-polidori\">Lorenzo Polidori's</a> <a href=\"http://stackoverflow.com/a/12816953/1157054\">answer</a>.</p>\n\n<p>First, I start off by defining these helper methods, which make things easier to understand and more readable later on:</p>\n\n<pre><code>Function.prototype.setSuperclass = function(target) {\n    // Set a custom field for keeping track of the object's 'superclass'.\n    this._superclass = target;\n\n    // Set the internal [[Prototype]] of instances of this object to a new object\n    // which inherits from the superclass's prototype.\n    this.prototype = Object.create(this._superclass.prototype);\n\n    // Correct the constructor attribute of this class's prototype\n    this.prototype.constructor = this;\n};\n\nFunction.prototype.getSuperclass = function(target) {\n    // Easy way of finding out what a class inherits from\n    return this._superclass;\n};\n\nFunction.prototype.callSuper = function(target, methodName, args) {\n    // If methodName is ommitted, call the constructor.\n    if (arguments.length &lt; 3) {\n        return this.callSuperConstructor(arguments[0], arguments[1]);\n    }\n\n    // `args` is an empty array by default.\n    if (args === undefined || args === null) args = [];\n\n    var superclass = this.getSuperclass();\n    if (superclass === undefined) throw new TypeError(\"A superclass for \" + this + \" could not be found.\");\n\n    var method = superclass.prototype[methodName];\n    if (typeof method != \"function\") throw new TypeError(\"TypeError: Object \" + superclass.prototype + \" has no method '\" + methodName + \"'\");\n\n    return method.apply(target, args);\n};\n\nFunction.prototype.callSuperConstructor = function(target, args) {\n    if (args === undefined || args === null) args = [];\n\n    var superclass = this.getSuperclass();\n    if (superclass === undefined) throw new TypeError(\"A superclass for \" + this + \" could not be found.\");\n\n    return superclass.apply(target, args);\n};\n</code></pre>\n\n<p>Now, not only can you set the superclass of a class with <code>SubClass.setSuperclass(ParentClass)</code>, but you can also call overridden methods with <code>SubClass.callSuper(this, 'functionName', [argument1, argument2...])</code>:</p>\n\n<pre><code>/**\n * Transform base class\n */\nfunction Transform() {\n    this.type = \"2d\";\n}\n\nTransform.prototype.toString = function() {\n    return \"Transform\";\n}\n\n/**\n * Translation class.\n */\nfunction Translation(x, y) {\n    // Parent constructor\n    Translation.callSuper(this, arguments);\n\n    // Public properties\n    this.x = x;\n    this.y = y;\n}\n// Inheritance\nTranslation.setSuperclass(Transform);\n\n// Override\nTranslation.prototype.toString = function() {\n    return Translation.callSuper(this, 'toString', arguments) + this.type + \" Translation \" + this.x + \":\" + this.y;\n}\n\n/**\n * Rotation class.\n */\nfunction Rotation(angle) {\n    // Parent constructor\n    Rotation.callSuper(this, arguments);\n\n    // Public properties\n    this.angle = angle;\n}\n// Inheritance\nRotation.setSuperclass(Transform);\n\n// Override\nRotation.prototype.toString = function() {\n    return Rotation.callSuper(this, 'toString', arguments) + this.type + \" Rotation \" + this.angle;\n}\n\n// Tests\ntranslation = new Translation(10, 15);\n\nconsole.log(translation instanceof Transform); // true\nconsole.log(translation instanceof Translation); // true\nconsole.log(translation instanceof Rotation); // false\n\nconsole.log(translation.toString()) // Transform2d Translation 10:15\n</code></pre>\n\n<p>Admittedly, even with the helper functions the syntax here is pretty awkward. Thankfully though, in ECMAScript 6 some syntactic sugar (<a href=\"http://wiki.ecmascript.org/doku.php?id=strawman%3amaximally_minimal_classes\" rel=\"nofollow\">maximally minimal classes</a>) has been added to make things much prettier. E.g.:</p>\n\n<pre><code>/**\n * Transform base class\n */\nclass Transform {\n  constructor() {\n    this.type = \"2d\";\n  }\n\n  toString() {\n    return \"Transform\";\n  } \n}\n\n/**\n * Translation class.\n */\nclass Translation extends Transform {\n  constructor(x, y) {\n    super(); // Parent constructor\n\n    // Public properties\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return super(...arguments) + this.type + \" Translation \" + this.x + \":\" + this.y;\n  }\n}\n\n/**\n * Rotation class.\n */\nclass Rotation extends Transform {\n  constructor(angle) {\n    // Parent constructor\n    super(...arguments);\n\n    // Public properties\n    this.angle = angle;\n  }\n\n  toString() {\n    return super(...arguments) + this.type + \" Rotation \" + this.angle;\n  }\n}\n\n// Tests\ntranslation = new Translation(10, 15);\n\nconsole.log(translation instanceof Transform); // true\nconsole.log(translation instanceof Translation); // true\nconsole.log(translation instanceof Rotation); // false\n\nconsole.log(translation.toString()) // Transform2d Translation 10:15\n</code></pre>\n\n<p>Note that ECMAScript 6 is still in the draft stage at this point, and as far as I know is not implemented in any major web browser. However, if you wish you can use something like <a href=\"https://code.google.com/p/traceur-compiler/\" rel=\"nofollow\">Traceur compiler</a> to compile <code>ECMAScript 6</code> down to the plain old <code>ECMAScript 5</code>-based JavaScript. You can see the above example compiled using Traceur <a href=\"http://traceur-compiler.googlecode.com/git/demo/repl.html#/%2a%2a%0A%20%2a%20Transform%20base%20class%0A%20%2a/%0Aclass%20Transform%20%7B%0A%20%20constructor%28%29%20%7B%0A%20%20%20%20this.type%20=%20%222d%22;%0A%20%20%7D%0A%20%20%0A%20%20toString%28%29%20%7B%0A%20%20%20%20return%20%22Transform%22;%0A%20%20%7D%20%0A%7D%0A%0A/%2a%2a%0A%20%2a%20Translation%20class.%0A%20%2a/%0Aclass%20Translation%20extends%20Transform%20%7B%0A%20%20constructor%28x,%20y%29%20%7B%0A%20%20%20%20super%28%29;%20//%20Parent%20constructor%0A%0A%20%20%20%20//%20Public%20properties%0A%20%20%20%20this.x%20=%20x;%0A%20%20%20%20this.y%20=%20y;%0A%20%20%7D%0A%20%20%0A%20%20toString%28%29%20%7B%0A%20%20%20%20return%20super%28...arguments%29%20+%20this.type%20+%20%22%20Translation%20%22%20+%20this.x%20+%20%22%3a%22%20+%20this.y;%0A%20%20%7D%0A%7D%0A%0A/%2a%2a%0A%20%2a%20Rotation%20class.%0A%20%2a/%0Aclass%20Rotation%20extends%20Transform%20%7B%0A%20%20constructor%28angle%29%20%7B%0A%20%20%20%20//%20Parent%20constructor%0A%20%20%20%20super%28...arguments%29;%0A%0A%20%20%20%20//%20Public%20properties%0A%20%20%20%20this.angle%20=%20angle;%0A%20%20%7D%0A%20%20%0A%20%20toString%28%29%20%7B%0A%20%20%20%20return%20super%28...arguments%29%20+%20this.type%20+%20%22%20Rotation%20%22%20+%20this.angle;%0A%20%20%7D%0A%7D%0A%0A//%20Tests%0Atranslation%20=%20new%20Translation%2810,%2015%29;%0A%0Aconsole.log%28translation%20instanceof%20Transform%29;%20//%20true%0Aconsole.log%28translation%20instanceof%20Translation%29;%20//%20true%0Aconsole.log%28translation%20instanceof%20Rotation%29;%20//%20false%0A%0Aconsole.log%28translation.toString%28%29%29%20//%20Transform2d%20Translation%2010:15\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am trying to implement inheritance in javascript. I came up with following minimal code to support it.</p>\n\n<pre><code>function Base(){\n    this.call = function(handler, args){\n      handler.call(this, args);\n    }\n}\n\nBase.extend = function(child, parent){\n    parent.apply(child);\n    child.base = new parent;\n    child.base.child = child;\n}\n</code></pre>\n\n<p>Experts, please let me know if this will be sufficient or any other important issue I may have missed. Based on similar issues faced please suggest other changes.</p>\n\n<p>Here is complete test script:</p>\n\n<pre><code>function Base(){\n    this.call = function(handler, args){\n      handler.call(this, args);\n    }\n    this.superalert = function(){\n        alert('tst');\n    }\n}\n\nBase.extend = function(child, parent){\n    parent.apply(child);\n    child.base = new parent;\n    child.base.child = child;\n}\n\nfunction Child(){\n    Base.extend(this, Base);\n    this.width = 20;\n    this.height = 15;\n    this.a = ['s',''];\n    this.alert = function(){\n        alert(this.a.length);\n        alert(this.height);\n    }\n}\n\nfunction Child1(){\n    Base.extend(this, Child);\n    this.depth = 'depth';\n    this.height = 'h';\n    this.alert = function(){\n        alert(this.height); // display current object height\n        alert(this.a.length); // display parents array length\n        this.call(this.base.alert); \n          // explicit call to parent alert with current objects value\n        this.call(this.base.superalert); \n          // explicit call to grandparent, parent does not have method \n        this.base.alert(); // call parent without overriding values\n    }\n}\n\nvar v = new Child1();\nv.alert();\nalert(v.height);\nalert(v.depth);\n</code></pre>\n",
            "last_activity_date": 1387232480,
            "question_id": 7486825,
            "score": 53,
            "tags": [
                "javascript"
            ],
            "title": "JavaScript Inheritance"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<pre><code>$(window).keypress(function(event) {\n    if (!(event.which == 115 &amp;&amp; event.ctrlKey) &amp;&amp; !(event.which == 19)) return true;\n    alert(\"Ctrl-S pressed\");\n    event.preventDefault();\n    return false;\n});\n</code></pre>\n\n<p>Key codes can differ between browsers, so you may need to check for more than just 115.</p>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p>You could use a shortcut library to handle the browser specific stuff.</p>\n\n<p><a href=\"http://www.openjs.com/scripts/events/keyboard_shortcuts/#\">http://www.openjs.com/scripts/events/keyboard_shortcuts/#</a></p>\n\n<pre><code>shortcut.add(\"Ctrl+S\",function() {\n    alert(\"Hi there!\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>I would like Web applications to not override my default shortcut keys, honestly.  Ctrl-S already does something in browsers.  Having that change abruptly depending on the site I'm viewing is disruptive and frustrating, not to mention often buggy -- I've had sites hijack Ctrl-Tab because it looked the same as Ctrl-I, both ruining my work on the site and preventing me from switching tabs as usual.</p>\n\n<p>If you want shortcut keys, use the <code>accesskey</code> attribute.  Please don't break existing browser functionality.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>@Eevee: As the browser becomes the home for richer and richer functionality and starts to replace desktop apps, it's just not going to be an option to forgo the use of keyboard shortcuts. Gmail's rich and intuitive set of keyboard commands was instrumental in my willingness to abandon Outlook. The keyboard shortcuts in Todoist, Google Reader, and Google Calendar all make my life much, much easier on a daily basis. </p>\n\n<p>Developers should definitely be careful not to override keystrokes that already have a meaning in the browser. For example, the WMD textbox I'm typing into inexplicably interprets Ctrl-Del as \"Blockquote\" rather than \"delete word forward\". I'm curious if there's a standard list somewhere of \"browser-safe\" shortcuts that site developers can use and that browsers will commit to staying away from in future versions.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Problem with the shortcut method is that it may interfere with the functioning of screen readers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I like this little plugin here .. needs a bit more cross browser friendliness though:</p>\n\n<p><a href=\"http://code.google.com/p/js-hotkeys/\" rel=\"nofollow\">http://code.google.com/p/js-hotkeys/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>example:</p>\n\n<p>shortcut.add(\"Ctrl+c\",function() {\n            alert('Ok...');},{\n            'type':'keydown',\n            'propagate':false,\n            'target':document\n        });</p>\n\n<p>usage </p>\n\n<p>link for download: <a href=\"http://www.openjs.com/scripts/events/keyboard_shortcuts/#\" rel=\"nofollow\">http://www.openjs.com/scripts/events/keyboard_shortcuts/#</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This should work (adapted from <a href=\"http://stackoverflow.com/a/8285722/388902\">http://stackoverflow.com/a/8285722/388902</a>).</p>\n\n<pre><code>var ctrl_down = false;\nvar ctrl_key = 17;\nvar s_key = 83;\n\n$(document).keydown(function(e) {\n    if (e.keyCode == ctrl_key) ctrl_down = true;\n}).keyup(function(e) {\n    if (e.keyCode == ctrl_key) ctrl_down = false;\n});\n\n$(document).keydown(function(e) {\n    if (ctrl_down &amp;&amp; (e.keyCode == s_key)) {\n        alert('Ctrl-s pressed');\n        // Your code\n        return false;\n    }\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This one worked for me on Chrome... \nfor some reason <code>event.which</code> returns a capital S (83) for me, not sure why (regardless of the caps lock state) so I used fromCharCode and toLowerCase just to be on the safe side</p>\n\n<pre><code>$(document).keydown(function(event) {\n\n    //19 for Mac Command+S\n    if (!( String.fromCharCode(event.which).toLowerCase() == 's' &amp;&amp; event.ctrlKey) &amp;&amp; !(event.which == 19)) return true;\n\n    alert(\"Ctrl-s pressed\");\n\n    event.preventDefault();\n    return false;\n});\n</code></pre>\n\n<p>If anyone knows why I get 83 and not 115, I will be happy to hear, also if anyone tests this on other browsers I'll be happy to hear if it works or not</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>This works for me (using jquery) to overload ctrl-s, ctrl-f and ctrl-g:</p>\n\n<pre><code>$(window).bind('keydown', function(event) {\n    if (event.ctrlKey || event.metaKey) {\n        switch (String.fromCharCode(event.which).toLowerCase()) {\n        case 's':\n            event.preventDefault();\n            alert('ctrl-s');\n            break;\n        case 'f':\n            event.preventDefault();\n            alert('ctrl-f');\n            break;\n        case 'g':\n            event.preventDefault();\n            alert('ctrl-g');\n            break;\n        }\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 55
                },
                {
                    "body": "<p>This jQuery solution works for me in Chrome and Firefox, for both ctrl-s and cmd-s.</p>\n\n<pre><code>$(document).keydown(function(e) {\n    if ((e.which == '115' || e.which == '83' ) &amp;&amp; (e.ctrlKey || e.metaKey))\n    {\n        e.preventDefault();\n        alert(\"Ctrl-s pressed\");\n        return false;\n    }\n    return true;\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I combined a few options to support FireFox, IE and Chrome.  I've also updated it to better support mac</p>\n\n<pre><code>// simply disables save event for chrome\n$(window).keypress(function (event) {\n    if (!(event.which == 115 &amp;&amp; (navigator.platform.match(\"Mac\") ? event.metaKey : event.ctrlKey)) &amp;&amp; !(event.which == 19)) return true;\n    event.preventDefault();\n    return false;\n});\n\n// used to process the cmd+s and ctrl+s events\n$(document).keydown(function (event) {\n     if (event.which == 83 &amp;&amp; (navigator.platform.match(\"Mac\") ? event.metaKey : event.ctrlKey)) {\n        event.preventDefault();\n        save(event);\n        return false;\n     }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>My users would like to be able to hit Control+S to save a form.  Is there a good cross-browser way of capturing the Ctrl+S key combination and submit my form?</p>\n\n<p>App is built on Drupal, so jQuery is available.</p>\n",
            "last_activity_date": 1375952709,
            "question_id": 93695,
            "score": 76,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Best cross-browser method to capture CTRL+S with JQuery?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>As @Mauricio commented <code>(![]+[])[+[]]</code> is \"f\" (the first char of \"false\"), <code>(![]+[])[+!+[]])</code> is \"a\", etc...</p>\n\n<p>How does it work?</p>\n\n<p>Let's examine the first character, 'f':</p>\n\n<pre><code>(![]+[])[+[]]; // 'f'\n</code></pre>\n\n<p>The first part of the expression\u2014between parentheses\u2014is composed by <code>![]+[]</code>, the first operand of the Addition operator is <code>![]</code> and it will produce <code>false</code>, because an array object\u2014as any other Object instance\u2014is <em>truthy</em>, and applying the Logical (!) NOT unary operator, it produces the value <code>false</code>, for example.</p>\n\n<pre><code>![]; // false, it was truthy\n!{}; // false, it was truthy\n!0;  // true, it was falsey\n!NaN;  // true, it was falsey\n</code></pre>\n\n<p>After it, we have the second operand of the addition, an empty Array, <code>[]</code>, this is made just to convert the <code>false</code> value to String, because the string representation of an empty array is just an empty string, is equivalent to:</p>\n\n<pre><code>false+[]; // \"false\"\nfalse+''; // \"false\"\n</code></pre>\n\n<p>The last part, the pair of square brackets after the parentheses, they are the property accessor, and they receive an expression, which is formed by the Unary Plus Operator applied to an empty array again.</p>\n\n<p>What the Unary Plus Operator does is type conversion, to <code>Number</code>, for example:</p>\n\n<pre><code>typeof +\"20\"; // \"number\"\n</code></pre>\n\n<p>One more time, this is applied to an empty Array, and as I said before, the String representation of an Array is an empty string, and when you convert an empty string to Number, it is converted to zero:</p>\n\n<pre><code>+[]; // 0, because\n+[].toString(); // 0, because\n+\"\"; // 0\n</code></pre>\n\n<p>Therefore we can \"decode\" the expression to in some steps:</p>\n\n<pre><code>(![]+[])[+[]];\n(false+[])[+[]];\n(false+'')[+[]];\n(false+'')[0];\n('false')[0];  // \"f\"\n</code></pre>\n\n<p>Note that accessing characters by using the bracket notation on String values was not part of the ECMAScript 3rd. Edition Specification, (that's why the <code>charAt</code> method existed).</p>\n\n<p>However this kind of \"index properties\" that represent the characters of a string were standardized on ECMAScript 5, and even before the standardization the feature was available in a good number of browsers (even in IE8 (standards mode)).</p>\n",
                    "is_accepted": true,
                    "score": 98
                }
            ],
            "body": "<pre><code>alert((![]+[])[+[]]+(![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]);\n</code></pre>\n\n<p>The output of this code is: <code>fail</code>. Why?  </p>\n\n<p>By the way, <code>(![]+[])[+!+[]] = 'false'[0]</code>, right?. But why <code>![]+[] == \"false\"</code> and why <code>+!+[] == 1</code> ?</p>\n",
            "last_activity_date": 1408636256,
            "question_id": 4170978,
            "score": 74,
            "tags": [
                "javascript"
            ],
            "title": "(![]+[])[+[]]... Explain why this works"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You can create a namespace inside the jQuery object, like so:</p>\n\n<pre><code>$.mynamespace = { \n    myVar : \"something\", \n    myVar2 : \"somethingElse\" \n}; \n</code></pre>\n\n<p>or:</p>\n\n<pre><code>$.mynamespace = {};\n$.mynamespace.myVar = \"something\";\n$.mynamespace.myVar2 = \"somethingElse\";\n</code></pre>\n\n<p>Bear in mind, any plugin method named 'mynamespace' will be overwritten so be sure to use a sensible name.</p>\n",
                    "is_accepted": true,
                    "score": 94
                },
                {
                    "body": "<p>You can create a hash in the global scope and use it as a namespace:</p>\n\n<pre><code>MyNamepace={}\nMyNamespace.newvar = 'value'\n// MyNamespace.newvar =&gt; 'value'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Just sharing my practice with you, I would make a global object/var in the required JavaScript file with a sensible prefix, as in if I am working on a page where this object will be a text box then I would name it:</p>\n\n<pre><code>g_TxtMyValue = 'value';    // g_ specifies it to be a global variable, it is one\n                           // of the many conventions used\n</code></pre>\n\n<p>If you have more than one global variable, you can also have a namespace such as:</p>\n\n<pre><code>my_txt = {};  // For a real site I would use a prefix relative to the project\n              // name instead of \"my\".\n\nmy_txt.testValueOne = 'Value one';\nmy_txt.testValueOne = 'Value two';\n</code></pre>\n\n<p>These variables will be available to you throughout the website, after they have been initialized.</p>\n\n<p>I hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For me the best way to handle this situation is to define an object in the window object:</p>\n\n<pre><code>window.my_config =\n{\n    my_var1 : 1,\n    my_var1 : 2,\n    my_var1 : 3\n};\n</code></pre>\n\n<p>This would keep your scope neat and clean. And whenever you would access the global using <code>window.my_config</code> anyone looking at the code would know that a global is being accessed.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>Just a short notice:\nIs the fancybox is AJAX (meaning it loads within an iFrame, you should add \"parent\" to the close method, like this:\n<code>js\nparent.$.fancybox.close();\n</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Currently I am working on a legacy web page that uses a ton of JavaScript, jQuery, Microsoft client JavaScript, and other libraries. The bottom line - I cannot rewrite the entire page from scratch as the business cannot justify it.  So... it is what it is. Anyway, I need to pollute (I really tried not too) the global namespace with a variable. There are the three options I was thinking about -</p>\n\n<ol>\n<li><p>Just store/retrieve it using a normal JavaScript declaration - <code>var x = 0;</code></p></li>\n<li><p>Use jQuery to store/retrieve the value in a DOM tag - <code>$(\"body\").data(\"x\", 0);</code></p></li>\n<li><p>Use a hidden form field, and set/retrieve the value with jQuery - <code>$(\"whatever\").data(\"x\", 0);</code></p></li>\n</ol>\n\n<p>Is there a better way? I looked at the existing pile of code, and I do not believe the variable can be scoped in a function.</p>\n",
            "last_activity_date": 1409787318,
            "question_id": 2866866,
            "score": 77,
            "tags": [
                "javascript",
                "jquery",
                "global-variables"
            ],
            "title": "How to store a global value (not necessarily a global variable) in jQuery?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Here is a jQuery UI Autocomplete binding that I wrote.  It is intended to mirror the <code>options</code>, <code>optionsText</code>, <code>optionsValue</code>, <code>value</code> binding paradigm used with select elements with a couple of additions (you can query for options via AJAX and you can differentiate what is displayed in the input box vs. what is displayed in the selection box that pops up.</p>\n\n<p>You do not need to provide all of the options.  It will choose defaults for you.</p>\n\n<p>Here is a sample without the AJAX functionality: <a href=\"http://jsfiddle.net/rniemeyer/YNCTY/\">http://jsfiddle.net/rniemeyer/YNCTY/</a></p>\n\n<p>Here is the same sample with a button that makes it behave more like a combo box: <a href=\"http://jsfiddle.net/rniemeyer/PPsRC/\">http://jsfiddle.net/rniemeyer/PPsRC/</a></p>\n\n<p>Here is a sample with the options retrieved via AJAX: <a href=\"http://jsfiddle.net/rniemeyer/MJQ6g/\">http://jsfiddle.net/rniemeyer/MJQ6g/</a></p>\n\n<pre><code>//jqAuto -- main binding (should contain additional options to pass to autocomplete)\n//jqAutoSource -- the array to populate with choices (needs to be an observableArray)\n//jqAutoQuery -- function to return choices (if you need to return via AJAX)\n//jqAutoValue -- where to write the selected value\n//jqAutoSourceLabel -- the property that should be displayed in the possible choices\n//jqAutoSourceInputValue -- the property that should be displayed in the input box\n//jqAutoSourceValue -- the property to use for the value\nko.bindingHandlers.jqAuto = {\n    init: function(element, valueAccessor, allBindingsAccessor, viewModel) {\n        var options = valueAccessor() || {},\n            allBindings = allBindingsAccessor(),\n            unwrap = ko.utils.unwrapObservable,\n            modelValue = allBindings.jqAutoValue,\n            source = allBindings.jqAutoSource,\n            query = allBindings.jqAutoQuery,\n            valueProp = allBindings.jqAutoSourceValue,\n            inputValueProp = allBindings.jqAutoSourceInputValue || valueProp,\n            labelProp = allBindings.jqAutoSourceLabel || inputValueProp;\n\n        //function that is shared by both select and change event handlers\n        function writeValueToModel(valueToWrite) {\n            if (ko.isWriteableObservable(modelValue)) {\n               modelValue(valueToWrite );  \n            } else {  //write to non-observable\n               if (allBindings['_ko_property_writers'] &amp;&amp; allBindings['_ko_property_writers']['jqAutoValue'])\n                        allBindings['_ko_property_writers']['jqAutoValue'](valueToWrite );    \n            }\n        }\n\n        //on a selection write the proper value to the model\n        options.select = function(event, ui) {\n            writeValueToModel(ui.item ? ui.item.actualValue : null);\n        };\n\n        //on a change, make sure that it is a valid value or clear out the model value\n        options.change = function(event, ui) {\n            var currentValue = $(element).val();\n            var matchingItem =  ko.utils.arrayFirst(unwrap(source), function(item) {\n               return unwrap(item[inputValueProp]) === currentValue;  \n            });\n\n            if (!matchingItem) {\n               writeValueToModel(null);\n            }    \n        }\n\n        //hold the autocomplete current response\n        var currentResponse = null;\n\n        //handle the choices being updated in a DO, to decouple value updates from source (options) updates\n        var mappedSource = ko.dependentObservable({\n            read: function() {\n                    mapped = ko.utils.arrayMap(unwrap(source), function(item) {\n                        var result = {};\n                        result.label = labelProp ? unwrap(item[labelProp]) : unwrap(item).toString();  //show in pop-up choices\n                        result.value = inputValueProp ? unwrap(item[inputValueProp]) : unwrap(item).toString();  //show in input box\n                        result.actualValue = valueProp ? unwrap(item[valueProp]) : item;  //store in model\n                        return result;\n                });\n                return mapped;                \n            },\n            write: function(newValue) {\n                source(newValue);  //update the source observableArray, so our mapped value (above) is correct\n                if (currentResponse) {\n                    currentResponse(mappedSource());\n                }\n            }\n        });\n\n        if (query) {\n            options.source = function(request, response) {  \n                currentResponse = response;\n                query.call(this, request.term, mappedSource);\n            }\n        } else {\n            //whenever the items that make up the source are updated, make sure that autocomplete knows it\n            mappedSource.subscribe(function(newValue) {\n               $(element).autocomplete(\"option\", \"source\", newValue); \n            });\n\n            options.source = mappedSource();\n        }\n\n        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n            $(element).autocomplete(\"destroy\");\n        });\n\n\n        //initialize autocomplete\n        $(element).autocomplete(options);\n    },\n    update: function(element, valueAccessor, allBindingsAccessor, viewModel) {\n       //update value based on a model change\n       var allBindings = allBindingsAccessor(),\n           unwrap = ko.utils.unwrapObservable,\n           modelValue = unwrap(allBindings.jqAutoValue) || '', \n           valueProp = allBindings.jqAutoSourceValue,\n           inputValueProp = allBindings.jqAutoSourceInputValue || valueProp;\n\n       //if we are writing a different property to the input than we are writing to the model, then locate the object\n       if (valueProp &amp;&amp; inputValueProp !== valueProp) {\n           var source = unwrap(allBindings.jqAutoSource) || [];\n           var modelValue = ko.utils.arrayFirst(source, function(item) {\n                 return unwrap(item[valueProp]) === modelValue;\n           }) || {};             \n       } \n\n       //update the element with the value that should be shown in the input\n       $(element).val(modelValue &amp;&amp; inputValueProp !== valueProp ? unwrap(modelValue[inputValueProp]) : modelValue.toString());    \n    }\n};\n</code></pre>\n\n<p>You would use it like:</p>\n\n<pre><code>&lt;input data-bind=\"jqAuto: { autoFocus: true }, jqAutoSource: myPeople, jqAutoValue: mySelectedGuid, jqAutoSourceLabel: 'displayName', jqAutoSourceInputValue: 'name', jqAutoSourceValue: 'guid'\" /&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 101
                },
                {
                    "body": "<p>Here is my solution:  </p>\n\n<pre><code>ko.bindingHandlers.ko_autocomplete = {\n    init: function (element, params) {\n        $(element).autocomplete(params());\n    },\n    update: function (element, params) {\n        $(element).autocomplete(\"option\", \"source\", params().source);\n    }\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"name-search\" data-bind=\"value: langName, \nko_autocomplete: { source: getLangs(), select: addLang }\"/&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7bRVH/214/\">http://jsfiddle.net/7bRVH/214/</a>\nCompared to RP's it is very basic but maybe fills your needs.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>Disposal needed....</p>\n\n<p>Both of those solutions are great (with Niemeyer's being much more fine grained) but they both forget the disposal handling!</p>\n\n<p>They should handle disposals by destroying jquery autocomplete (prevent memory leakages) with this:</p>\n\n<pre><code>init: function (element, valueAccessor, allBindingsAccessor) {  \n....  \n    //handle disposal (if KO removes by the template binding)\n    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n        $(element).autocomplete(\"destroy\");\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Minor improvements,</p>\n\n<p>First of all these are some very useful tips, thank you all for sharing.</p>\n\n<p>I'm using the version posted by <strong>Epstone</strong> with the following improvements:</p>\n\n<ol>\n<li><p>Display the label (instead of the value) when pressing up or down - apparently this can be done by handling the focus event</p></li>\n<li><p>Using an observable array as the data source (instead of an array)</p></li>\n<li>Added the disposable handler as suggested by <strong>George</strong></li>\n</ol>\n\n<p><a href=\"http://jsfiddle.net/PpSfR/\" rel=\"nofollow\">http://jsfiddle.net/PpSfR/</a></p>\n\n<pre><code>...\nconf.focus = function (event, ui) {\n  $(element).val(ui.item.label);\n  return false;\n}\n...\n</code></pre>\n\n<p>Btw, specifying <strong>minLength</strong> as 0 allows displaying the alternatives by just moving the arrow keys without having to enter any text.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Niemeyer's solution is great, however I run into an issue when trying to use autocomplete inside a modal. Autocomplete was destroyed on modal close event (Uncaught Error: cannot call methods on autocomplete prior to initialization; attempted to call method 'option' ) I fixed it by adding two lines to the binding's subscribe method:</p>\n\n<pre><code>mappedSource.subscribe(function (newValue) {\n    if (!$(element).hasClass('ui-autocomplete-input'))\n         $(element).autocomplete(options);\n    $(element).autocomplete(\"option\", \"source\", newValue);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I tried <a href=\"http://stackoverflow.com/a/7538860/3052062\">Niemeyer's solution</a> with JQuery UI 1.10.x, but the autocomplete box simply didn't show up, after some searching i found a simple workaround <a href=\"http://stackoverflow.com/a/17062676\">here</a>. Adding the following rule to the end of your jquery-ui.css file fixes the problem:</p>\n\n<pre><code>ul.ui-autocomplete.ui-menu {\n  z-index: 1000;\n}\n</code></pre>\n\n<p>I also used Knockout-3.1.0, so I had to replace ko.dependentObservable(...) with ko.computed(...) </p>\n\n<p>In addition, if your KO View model contains some numeric value make sure you change the comparison operators: from === to == and !== to != , so that type conversion is performed. </p>\n\n<p>I hope this helps others</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Fixed the clearing of input on load problem for RP's Solution. Even though it's kind of an indirect solution, I changed this at the end of the function:</p>\n\n<pre><code>$(element).val(modelValue &amp;&amp; inputValueProp !== valueProp ?\nunwrap(modelValue[inputValueProp]) : modelValue.toString());\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>var savedValue = $(element).val();\n$(element).val(modelValue &amp;&amp; inputValueProp !== valueProp ?  unwrap(modelValue[inputValueProp]) : modelValue.toString());\nif ($(element).val() == '') {\n   $(element).val(savedValue);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Does any one know the best way to create an autocomplete combobox with Knockout JS templates?</p>\n\n<p>I have the following template:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script type=\"text/html\" id=\"row-template\"&gt;\n&lt;tr&gt;\n...\n    &lt;td&gt;         \n        &lt;select class=\"list\" data-bind=\"options: SomeViewModelArray, \n                                        value: SelectedItem\"&gt;\n        &lt;/select&gt;\n    &lt;/td&gt;\n...        \n&lt;tr&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>Sometimes this list is long and I'd like to have Knockout play nicely with perhaps jQuery autocomplete or some straight JavaScript code, but have had little success.</p>\n\n<p>In addition, jQuery.Autocomplete requires an input field. Any ideas?</p>\n",
            "last_activity_date": 1401745803,
            "question_id": 7537002,
            "score": 44,
            "tags": [
                "javascript",
                "jquery",
                "knockout.js"
            ],
            "title": "How to create an auto-complete combobox?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>I've heard Joseph's Myers implementation is quite fast. Additionally, he has a <a href=\"http://www.webreference.com/programming/javascript/jkm3/\">lengthy article</a> on Javascript optimization describing what he learned while writing his implementation. It's a good read for anyone interested in performant javascript.</p>\n\n<p><a href=\"http://www.webreference.com/programming/javascript/jkm3/\">http://www.webreference.com/programming/javascript/jkm3/</a></p>\n\n<p>His MD5 implementation can be found <a href=\"http://www.myersdaily.org/joseph/javascript/md5-text.html\">here</a></p>\n",
                    "is_accepted": true,
                    "score": 63
                },
                {
                    "body": "<p>If the performance of your application is limited by a Javascript implementation of MD5, then you're really doing something wrong. Consider an architectural change (Hint: use MD5 less often)</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>You could also check my <a href=\"http://github.com/valums/V.Framework/blob/master/V.Security.js\" rel=\"nofollow\">md5 implementation</a>. It should be approx. the same as the other posted above. Unfortunately, the performance is limited by the inner loop which is impossible to optimize more.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found a number of articles on this subject.\nThey all suggested Joseph Meyers implementation.</p>\n\n<p>see: <a href=\"http://jsperf.com/md5-shootout\">http://jsperf.com/md5-shootout</a> on some tests</p>\n\n<p>in My quest for the ultimate speed i looked at this code, an i saw that it could be improved. So i created a new JS script based on the Joseph Meyers code.</p>\n\n<p>see <a href=\"http://2basix.nl/page.php?al=javascript%20fast%20md5\">Improved Jospeh Meyers code</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I would suggest you to use CryptoJS in this case.</p>\n\n<p>Basically CryptoJS is a growing collection of standard and secure cryptographic algorithms implemented in JavaScript using best practices and patterns. They are fast, and they have a consistent and simple interface.</p>\n\n<p>So In case you want calculate hash(MD5) of your password string then do as follows :</p>\n\n<pre><code>&lt;script src=\"http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/md5.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    var passhash = CryptoJS.MD5(password);\n\n    $.post(\n      'includes/login.php', \n      { user: username, pass: passhash },\n      onLogin, \n      'json' );\n&lt;/script&gt;\n</code></pre>\n\n<p>So this script will post hash of your password string to the server.</p>\n\n<p>For further info and support on other hash calculating algorithms you can visit at:</p>\n\n<p><a href=\"http://code.google.com/p/crypto-js/\">http://code.google.com/p/crypto-js/</a> </p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>I only need to support HTML5 browsers that support typed arrays (DataView, ArrayBuffer, etc.)\nI think I took the Joseph Myers code and modified it to support passing in a Uint8Array. I did not catch all the improvements, and there are still probably some char() array artifacts that can be improved on. I needed this for adding to the PouchDB project.</p>\n\n<pre><code>var PouchUtils = {};\nPouchUtils.Crypto = {};\n(function () {\n    PouchUtils.Crypto.MD5 = function (uint8Array) {\n        function md5cycle(x, k) {\n            var a = x[0], b = x[1], c = x[2], d = x[3];\n\n            a = ff(a, b, c, d, k[0], 7, -680876936);\n            d = ff(d, a, b, c, k[1], 12, -389564586);\n            c = ff(c, d, a, b, k[2], 17, 606105819);\n            b = ff(b, c, d, a, k[3], 22, -1044525330);\n            a = ff(a, b, c, d, k[4], 7, -176418897);\n            d = ff(d, a, b, c, k[5], 12, 1200080426);\n            c = ff(c, d, a, b, k[6], 17, -1473231341);\n            b = ff(b, c, d, a, k[7], 22, -45705983);\n            a = ff(a, b, c, d, k[8], 7, 1770035416);\n            d = ff(d, a, b, c, k[9], 12, -1958414417);\n            c = ff(c, d, a, b, k[10], 17, -42063);\n            b = ff(b, c, d, a, k[11], 22, -1990404162);\n            a = ff(a, b, c, d, k[12], 7, 1804603682);\n            d = ff(d, a, b, c, k[13], 12, -40341101);\n            c = ff(c, d, a, b, k[14], 17, -1502002290);\n            b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n            a = gg(a, b, c, d, k[1], 5, -165796510);\n            d = gg(d, a, b, c, k[6], 9, -1069501632);\n            c = gg(c, d, a, b, k[11], 14, 643717713);\n            b = gg(b, c, d, a, k[0], 20, -373897302);\n            a = gg(a, b, c, d, k[5], 5, -701558691);\n            d = gg(d, a, b, c, k[10], 9, 38016083);\n            c = gg(c, d, a, b, k[15], 14, -660478335);\n            b = gg(b, c, d, a, k[4], 20, -405537848);\n            a = gg(a, b, c, d, k[9], 5, 568446438);\n            d = gg(d, a, b, c, k[14], 9, -1019803690);\n            c = gg(c, d, a, b, k[3], 14, -187363961);\n            b = gg(b, c, d, a, k[8], 20, 1163531501);\n            a = gg(a, b, c, d, k[13], 5, -1444681467);\n            d = gg(d, a, b, c, k[2], 9, -51403784);\n            c = gg(c, d, a, b, k[7], 14, 1735328473);\n            b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n            a = hh(a, b, c, d, k[5], 4, -378558);\n            d = hh(d, a, b, c, k[8], 11, -2022574463);\n            c = hh(c, d, a, b, k[11], 16, 1839030562);\n            b = hh(b, c, d, a, k[14], 23, -35309556);\n            a = hh(a, b, c, d, k[1], 4, -1530992060);\n            d = hh(d, a, b, c, k[4], 11, 1272893353);\n            c = hh(c, d, a, b, k[7], 16, -155497632);\n            b = hh(b, c, d, a, k[10], 23, -1094730640);\n            a = hh(a, b, c, d, k[13], 4, 681279174);\n            d = hh(d, a, b, c, k[0], 11, -358537222);\n            c = hh(c, d, a, b, k[3], 16, -722521979);\n            b = hh(b, c, d, a, k[6], 23, 76029189);\n            a = hh(a, b, c, d, k[9], 4, -640364487);\n            d = hh(d, a, b, c, k[12], 11, -421815835);\n            c = hh(c, d, a, b, k[15], 16, 530742520);\n            b = hh(b, c, d, a, k[2], 23, -995338651);\n\n            a = ii(a, b, c, d, k[0], 6, -198630844);\n            d = ii(d, a, b, c, k[7], 10, 1126891415);\n            c = ii(c, d, a, b, k[14], 15, -1416354905);\n            b = ii(b, c, d, a, k[5], 21, -57434055);\n            a = ii(a, b, c, d, k[12], 6, 1700485571);\n            d = ii(d, a, b, c, k[3], 10, -1894986606);\n            c = ii(c, d, a, b, k[10], 15, -1051523);\n            b = ii(b, c, d, a, k[1], 21, -2054922799);\n            a = ii(a, b, c, d, k[8], 6, 1873313359);\n            d = ii(d, a, b, c, k[15], 10, -30611744);\n            c = ii(c, d, a, b, k[6], 15, -1560198380);\n            b = ii(b, c, d, a, k[13], 21, 1309151649);\n            a = ii(a, b, c, d, k[4], 6, -145523070);\n            d = ii(d, a, b, c, k[11], 10, -1120210379);\n            c = ii(c, d, a, b, k[2], 15, 718787259);\n            b = ii(b, c, d, a, k[9], 21, -343485551);\n\n            x[0] = add32(a, x[0]);\n            x[1] = add32(b, x[1]);\n            x[2] = add32(c, x[2]);\n            x[3] = add32(d, x[3]);\n\n        }\n\n        function cmn(q, a, b, x, s, t) {\n            a = add32(add32(a, q), add32(x, t));\n            return add32((a &lt;&lt; s) | (a &gt;&gt;&gt; (32 - s)), b);\n        }\n\n        function ff(a, b, c, d, x, s, t) {\n            return cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);\n        }\n\n        function gg(a, b, c, d, x, s, t) {\n            return cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);\n        }\n\n        function hh(a, b, c, d, x, s, t) {\n            return cmn(b ^ c ^ d, a, b, x, s, t);\n        }\n\n        function ii(a, b, c, d, x, s, t) {\n            return cmn(c ^ (b | (~d)), a, b, x, s, t);\n        }\n\n        function md51(s) {\n            txt = '';\n            var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878], i;\n            for (i = 64; i &lt;= s.length; i += 64) {\n                md5cycle(state, md5blk(s.subarray(i - 64, i)));\n            }\n            s = s.subarray(i - 64);\n            var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n            for (i = 0; i &lt; s.length; i++)\n                tail[i &gt;&gt; 2] |= s[i] &lt;&lt; ((i % 4) &lt;&lt; 3);\n            tail[i &gt;&gt; 2] |= 0x80 &lt;&lt; ((i % 4) &lt;&lt; 3);\n            if (i &gt; 55) {\n                md5cycle(state, tail);\n                for (i = 0; i &lt; 16; i++) tail[i] = 0;\n            }\n            tail[14] = n * 8;\n            md5cycle(state, tail);\n            return state;\n        }\n\n        /* there needs to be support for Unicode here,\n         * unless we pretend that we can redefine the MD-5\n         * algorithm for multi-byte characters (perhaps\n         * by adding every four 16-bit characters and\n         * shortening the sum to 32 bits). Otherwise\n         * I suggest performing MD-5 as if every character\n         * was two bytes--e.g., 0040 0025 = @%--but then\n         * how will an ordinary MD-5 sum be matched?\n         * There is no way to standardize text to something\n         * like UTF-8 before transformation; speed cost is\n         * utterly prohibitive. The JavaScript standard\n         * itself needs to look at this: it should start\n         * providing access to strings as preformed UTF-8\n         * 8-bit unsigned value arrays.\n         */\n        function md5blk(s) { /* I figured global was faster.   */\n            var md5blks = [], i; /* Andy King said do it this way. */\n            for (i = 0; i &lt; 64; i += 4) {\n                md5blks[i &gt;&gt; 2] = s[i]\n                + (s[i + 1] &lt;&lt; 8)\n                + (s[i + 2] &lt;&lt; 16)\n                + (s[i + 3] &lt;&lt; 24);\n            }\n            return md5blks;\n        }\n\n        var hex_chr = '0123456789abcdef'.split('');\n\n        function rhex(n) {\n            var s = '', j = 0;\n            for (; j &lt; 4; j++)\n                s += hex_chr[(n &gt;&gt; (j * 8 + 4)) &amp; 0x0F]\n                + hex_chr[(n &gt;&gt; (j * 8)) &amp; 0x0F];\n            return s;\n        }\n\n        function hex(x) {\n            for (var i = 0; i &lt; x.length; i++)\n                x[i] = rhex(x[i]);\n            return x.join('');\n        }\n\n        function md5(s) {\n            return hex(md51(s));\n        }\n\n        function add32(a, b) {\n            return (a + b) &amp; 0xFFFFFFFF;\n        }\n\n        return md5(uint8Array);\n    };\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>While selecting library it's also important to see if it supports modern frameworks such as Bower, passes jslint, supports plugin model for JQuery or module systems such as AMD/RequireJS in addition to being in active development and have more than 1 contributors. There are couple of options that satisfies some or all of these additional criteria:</p>\n\n<ul>\n<li><a href=\"https://code.google.com/p/crypto-js/\">CryptoJS</a>: This is perhaps the most expansive library where each algorithm can be used separately without adding fat in to your JS code. Plus it as encoder/decoders for UTF8, UTF16 and Base64. I maintain <a href=\"https://github.com/sytelus/CryptoJS\">github repository</a> that is registered as Bower package plus instructions on how to use it with RequireJS. </li>\n<li><a href=\"https://github.com/satazor/SparkMD5\">Spark MD5</a>: This is based on JKM code that other answer mentions which is also the faster implementation. However in addition, Spark implementation adds AMD support, passes jslint plus has incremental mode. It doesn't have Base64 o/p but it does have raw o/p (i.e. array of 32-bit int insead of string).</li>\n<li><a href=\"http://www.jquerysdk.com/api/jQuery.md5\">JQuery MD5 plugin</a>: Very simple down to earth but doesn't seem to have raw mode.</li>\n<li><a href=\"https://github.com/blueimp/JavaScript-MD5\">JavaScript-MD5</a>: Not as fancy or fast as Spark but simpler.</li>\n</ul>\n\n<p>Example from CryptoJS:</p>\n\n<pre><code>//just include md5.js from the CryptoJS rollups folder\nvar hash = CryptoJS.MD5(\"Message\");\nconsole.log(hash.toString()); \n</code></pre>\n\n<p>There is a performance comparison between above libraries at <a href=\"http://jsperf.com/md5-shootout/7\">http://jsperf.com/md5-shootout/7</a>. On my machine current tests (which are admittedly old) shows that if you are looking for speed Spark MD5 is your best bet (and so is plain JKM code). However if you looking for more comprehensive library then CryptoJS is your best bet although it is 79% slower than Spark MD5. However I would imagine CryptoJS would eventually achieve same speed as it is bit more active project.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>It bothered me that I could not find an implementation which is both fast and support Unicode strings.</p>\n\n<p>So I made one which supports Unicode strings and still <a href=\"http://jsperf.com/md5-shootout/44\" rel=\"nofollow\">shows as faster</a> (at time of writing) than the currently fastest ascii-only-strings implementations:</p>\n\n<p><a href=\"https://github.com/gorhill/yamd5.js\" rel=\"nofollow\">https://github.com/gorhill/yamd5.js</a></p>\n\n<p>Based on Joseph Myers' code, but uses TypedArrays, plus other improvements.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Why not try <a href=\"http://phpjs.org/functions/md5/\" rel=\"nofollow\">http://phpjs.org/functions/md5/</a>?</p>\n\n<p>Unfortunately performance is limited with any emulated script, however this can render real md5 hash.  Although I would advice against using md5 for passwords, as it is a fast-rendered hash.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Currently the fastest implementation of md5 (based on Joseph Myers' code):</p>\n\n<p><a href=\"https://github.com/iReal/FastMD5\" rel=\"nofollow\">https://github.com/iReal/FastMD5</a></p>\n\n<p>jsPerf comparaison: <a href=\"http://jsperf.com/md5-shootout/63\" rel=\"nofollow\">http://jsperf.com/md5-shootout/63</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Much faster hashing should be possible by calculating on graphic card (implement hashing algorithm in WebGL), as discussed there about SHA256: <a href=\"https://stackoverflow.com/questions/6395651/is-it-possible-to-calculate-sha256-hashes-in-the-browser-using-the-users-video\">Is it possible to calculate sha256 hashes in the browser using the user&#39;s video card, eg. by using WebGL or Flash?</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>There are many MD5 JavaScript implementations out there. \nDoes anybody know which one is the most advanced, most bugfixed and fastest? </p>\n\n<p>I need it for this tool: <a href=\"http://www.bruechner.de/md5file/js/\">http://www.bruechner.de/md5file/js/</a></p>\n",
            "last_activity_date": 1419019131,
            "question_id": 1655769,
            "score": 81,
            "tags": [
                "javascript",
                "performance",
                "md5"
            ],
            "title": "fastest MD5 Implementation in JavaScript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>From what I see in other SO questions, the only workable cross-browser solution is a timer. Check out <a href=\"http://stackoverflow.com/questions/1369241/jquery-tell-when-the-hash-changes\"><strong>this question</strong></a> for example.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can get more info from this</p>\n\n<p><a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mutationevents\" rel=\"nofollow\">Mutation event types</a></p>\n\n<blockquote>\n  <p>The mutation event module is designed\n  to allow notification of any changes\n  to the structure of a document,\n  including attr and text modifications.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Google Custom Search Engines use a timer to check the hash against a previous value, whilst the child iframe on a seperate domain updates the parent's location hash to contain the size of the iframe document's body.  When the timer catches the change, the parent can resize the iframe to match that of the body so that scrollbars aren't displayed.</p>\n\n<p>Something like the following achieves the same:</p>\n\n<pre><code>var storedHash = window.location.hash;\nwindow.setInterval(function () {\n    if (window.location.hash != storedHash) {\n        storedHash = window.location.hash;\n        hashChanged(storedHash);\n    }\n}, 100); // Google uses 100ms intervals I think, might be lower\n</code></pre>\n\n<p>Google Chrome 5, Safari 5, <a href=\"http://twitter.com/dstorey/status/15102284544\">Opera 10.60</a>, <a href=\"https://developer.mozilla.org/en/DOM/window.onhashchange\">Firefox 3.6</a> and <a href=\"http://msdn.microsoft.com/en-us/library/cc288209%28VS.85%29.aspx\">Internet Explorer 8</a> <strong>all</strong> support the <code>hashchange</code> event:</p>\n\n<pre><code>if (\"onhashchange\" in window) // does the browser support the hashchange event?\n    window.onhashchange = function () {\n        hashChanged(window.location.hash);\n    }\n</code></pre>\n\n<p>and putting it together:</p>\n\n<pre><code>if (\"onhashchange\" in window) { // event supported?\n    window.onhashchange = function () {\n        hashChanged(window.location.hash);\n    }\n}\nelse { // event not supported:\n    var storedHash = window.location.hash;\n    window.setInterval(function () {\n        if (window.location.hash != storedHash) {\n            storedHash = window.location.hash;\n            hashChanged(storedHash);\n        }\n    }, 100);\n}\n</code></pre>\n\n<p>jQuery also has a plugin that will check for the hashchange event and provide its own if necessary - <a href=\"http://benalman.com/projects/jquery-hashchange-plugin/\">http://benalman.com/projects/jquery-hashchange-plugin/</a>.</p>\n\n<p><strong>EDIT</strong>: Updated browser support (again).</p>\n",
                    "is_accepted": true,
                    "score": 95
                },
                {
                    "body": "<p><code>setInterval()</code> is only universal solution for now. But there are some light in the future in form of <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#history-traversal\" rel=\"nofollow\">hashchange event</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>(Just for the record.) The YUI3 \"hashchange\" synthetic event does more or less the same thing as the accepted answer</p>\n\n<pre><code>YUI().use('history-hash', function (Y) {\n  Y.on('hashchange', function (e) {\n    // Handle hashchange events on the current window.\n  }, Y.config.win);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I write the JavaScript callback code that will be executed on any changes in the URL anchor?</p>\n\n<p>For example from <a href=\"http://example.com#a\">http://example.com#a</a> to <a href=\"http://example.com#b\">http://example.com#b</a></p>\n",
            "last_activity_date": 1376898257,
            "question_id": 2161906,
            "score": 61,
            "tags": [
                "javascript",
                "javascript-events",
                "event-handling",
                "fragment-identifier",
                "hashchange"
            ],
            "title": "Handle URL anchor change event in js"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I've never seen any practical use of this, but you should probably consider <a href=\"http://www.howtocreate.co.uk/tutorials/javascript/domstylesheets\" rel=\"nofollow\">DOM stylesheets</a>. However, I honestly think that's overkill.</p>\n\n<p>If you want to simply want to get the width and height of an element, irrespective of where the dimensions are being applied from, just use element.offsetWidth and element.offsetHeight.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Ok, it sounds like you want to change the global CSS so which will effictively change all elements of a peticular style at once.  I've recently learned how to do this myself from a <a href=\"http://www.shawnolson.net/a/503/altering-css-class-attributes-with-javascript.html\">Shawn Olson tutorial</a>.  You can directly reference his code <a href=\"http://www.shawnolson.net/scripts/public_smo_scripts.js\">here</a>.</p>\n\n<p>Here is the summary:</p>\n\n<p>You can retrieve the <a href=\"https://developer.mozilla.org/En/DOM/Stylesheet\">stylesheets</a> via <code>document.styleSheets</code>.  This will actually return an array of all the stylesheets in your page, but you can tell which one you are on via the <code>document.styleSheets[styleIndex].href</code> property.  Once you have found the stylesheet you want to edit, you need to get the array of rules.  This is called \"rules\" in IE and \"cssRules\" in most other browsers.  The way to tell what <a href=\"https://developer.mozilla.org/en/DOM/cssRule#CSSStyleRule\">CSSRule</a> you are on is by the <code>selectorText</code> property.  The working code looks something like this:</p>\n\n<pre><code>var cssRuleCode = document.all ? 'rules' : 'cssRules'; //account for IE and FF\nvar rule = document.styleSheets[styleIndex][cssRuleCode][ruleIndex];\nvar selector = rule.selectorText;  //maybe '#tId'\nvar value = rule.value;            //both selectorText and value are settable.\n</code></pre>\n\n<p>Let me know how this works for ya, and please comment if you see any errors.</p>\n",
                    "is_accepted": true,
                    "score": 47
                },
                {
                    "body": "<p>You can get the \"computed\" styles of any element.</p>\n\n<p>IE uses something called \"currentStyle\", Firefox (and I assume other \"standard compliant\" browsers) uses \"defaultView.getComputedStyle\".</p>\n\n<p>You'll need to write a cross browser function to do this, or use a good Javascript framework like prototype or jQuery (search for \"getStyle\" in the prototype javascript file, and \"curCss\" in the jquery javascript file).</p>\n\n<p>That said if you need the height or width you should probably use element.offsetHeight and  element.offsetWidth.</p>\n\n<blockquote>\n  <p>The value returned is Null, so if I have Javascript that needs to know the width of something to do some logic (I increase the width by 1%, not to a specific value)</p>\n</blockquote>\n\n<p>Mind, if you add an inline style to the element in question, it can act as the \"default\" value and will be readable by Javascript on page load, since it is the element's inline style property:</p>\n\n<pre><code>&lt;div style=\"width:50%\"&gt;....&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I don't have rep enough to comment so I'll format an answer, yet it is only a demonstration of the issue in question.</p>\n\n<p>It seems, when element styles are defined in stylesheets they are not visible to getElementById(\"someElement\").style</p>\n\n<p>This code illustrates the issue... <a href=\"http://jsfiddle.net/BentFX/DhvRJ\" rel=\"nofollow\">Code from below on jsFiddle</a>.</p>\n\n<p>In Test 2, on the first call, the items left value is undefined, and so, what should be a simple toggle gets messed up. For my use I will define my important style values inline, but it does seem to partially defeat the purpose of the stylesheet.</p>\n\n<p>Here's the page code...</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;style type=\"text/css\"&gt;\n      #test2a{\n        position: absolute;\n        left: 0px;\n        width: 50px;\n        height: 50px;\n        background-color: green;\n        border: 4px solid black;\n      }\n      #test2b{\n        position: absolute;\n        left: 55px;\n        width: 50px;\n        height: 50px;\n        background-color: yellow;\n        margin: 4px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n  &lt;!-- test1 --&gt;\n    Swap left positions function with styles defined inline.\n    &lt;a href=\"javascript:test1();\"&gt;Test 1&lt;/a&gt;&lt;br&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;div id=\"test1a\" style=\"position: absolute;left: 0px;width: 50px; height: 50px;background-color: green;border: 4px solid black;\"&gt;&lt;/div&gt;\n      &lt;div id=\"test1b\" style=\"position: absolute;left: 55px;width: 50px; height: 50px;background-color: yellow;margin: 4px;\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n     function test1(){\n       var a = document.getElementById(\"test1a\");\n       var b = document.getElementById(\"test1b\");\n       alert(a.style.left + \" - \" + b.style.left);\n       a.style.left = (a.style.left == \"0px\")? \"55px\" : \"0px\";\n       b.style.left = (b.style.left == \"0px\")? \"55px\" : \"0px\";\n     }\n    &lt;/script&gt;\n  &lt;!-- end test 1 --&gt;\n\n  &lt;!-- test2 --&gt;\n    &lt;div id=\"moveDownThePage\" style=\"position: relative;top: 70px;\"&gt;\n    Identical function with styles defined in stylesheet.\n    &lt;a href=\"javascript:test2();\"&gt;Test 2&lt;/a&gt;&lt;br&gt;\n    &lt;div class=\"container\"&gt;\n      &lt;div id=\"test2a\"&gt;&lt;/div&gt;\n      &lt;div id=\"test2b\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n     function test2(){\n       var a = document.getElementById(\"test2a\");\n       var b = document.getElementById(\"test2b\");\n       alert(a.style.left + \" - \" + b.style.left);\n       a.style.left = (a.style.left == \"0px\")? \"55px\" : \"0px\";\n       b.style.left = (b.style.left == \"0px\")? \"55px\" : \"0px\";\n     }\n    &lt;/script&gt;\n  &lt;!-- end test 2 --&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I hope this helps to illuminate the issue.</p>\n\n<p>Skip</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Please! Just ask w3 (http://www.quirksmode.org/dom/w3c_css.html)!\nOr actually, it took me five hours... but here it is!</p>\n\n<pre><code>function css(selector, property, value) {\n    for (var i=0; i&lt;document.styleSheets.length;i++) {//Loop through all styles\n        //Try add rule\n        try { document.styleSheets[i].insertRule(selector+ ' {'+property+':'+value+'}', document.styleSheets[i].cssRules.length);\n        } catch(err) {try { document.styleSheets[i].addRule(selector, property+':'+value);} catch(err) {}}//IE\n    }\n}\n</code></pre>\n\n<p>The function is really ease to use.. example:</p>\n\nMouseover Me!\n\n<pre><code>&lt;div id=\"box\" class=\"boxes\" onmouseover=\"css('#box', 'color', 'red')\"&gt;Mouseover Me!&lt;/div&gt;\n</code></pre>\n\n<p>Or:</p>\n\nMouseover Me!\n\n<pre><code>&lt;div class=\"boxes\" onmouseover=\"css('.boxes', 'color', 'green')\"&gt;Mouseover Me!&lt;/div&gt;\n</code></pre>\n\n<p>Or:</p>\n\nMouseover Me!\n\n<pre><code>&lt;div class=\"boxes\" onmouseover=\"css('body', 'border', '1px solid #3cc')\"&gt;Mouseover Me!&lt;/div&gt;\n</code></pre>\n\n<p>Oh..</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Gathering the code in the answers, I wrote this function that seems running well on my FF 25.</p>\n\n<pre><code>function CCSStylesheetRuleStyle(stylesheet, selectorText, style, value){\n  /* returns the value of the element style of the rule in the stylesheet\n  *  If no value is given, reads the value\n  *  If value is given, the value is changed and returned\n  *  If '' (empty string) is given, erases the value.\n  *  The browser will apply the default one\n  *\n  * string stylesheet: part of the .css name to be recognized, e.g. 'default'\n  * string selectorText: css selector, e.g. '#myId', '.myClass', 'thead td'\n  * string style: camelCase element style, e.g. 'fontSize'\n  * string value optionnal : the new value\n  */\n  var CCSstyle = undefined, rules;\n  for(var m in document.styleSheets){\n    if(document.styleSheets[m].href.indexOf(stylesheet) != -1){\n     rules = document.styleSheets[m][document.all ? 'rules' : 'cssRules'];\n     for(var n in rules){\n       if(rules[n].selectorText == selectorText){\n         CCSstyle = rules[n].style;\n         break;\n       }\n     }\n     break;\n    }\n  }\n  if(value == undefined)\n    return CCSstyle[style]\n  else\n    return CCSstyle[style] = value\n}\n</code></pre>\n\n<p>This is a way to put values in the css that will be used in JS even if not understood by the browser. e.g. maxHeight for a tbody in a scrolled table.</p>\n\n<p>Call :</p>\n\n<p><code>CCSStylesheetRuleStyle('default', \"#mydiv\", \"height\");</code></p>\n\n<p><code>CCSStylesheetRuleStyle('default', \"#mydiv\", \"color\", \"#EEE\");</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>It's easy to set inline CSS values with javascript. If I want to change the width and I have html like this:</p>\n\n<pre><code>&lt;div style=\"width: 10px\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>All I need to do is:</p>\n\n<pre><code>document.getElementById('id').style.width = value;\n</code></pre>\n\n<p>It will change the inline stylesheet values. Normally this isn't a problem, because the inline style overrides the stylesheet. Example:</p>\n\n<pre><code>&lt;style&gt;\n   #tId {\n      width: 50%;\n   }\n&lt;/style&gt;\n\n&lt;div id=\"tId\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Using this Javascript:</p>\n\n<pre><code>document.getElementById('tId').style.width = \"30%\";\n</code></pre>\n\n<p>I get the following:</p>\n\n<pre><code>&lt;style&gt;\n   #tId {\n      width: 50%;\n   }\n&lt;/style&gt;\n\n&lt;div id=\"tId\" style=\"width: 30%\";&gt;&lt;/div&gt;\n</code></pre>\n\n<p>This is a problem, because not only do I not want to change inline values, If I look for the width before I set it, when I have:</p>\n\n<pre><code>&lt;div id=\"tId\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>The value returned is Null, so if I have Javascript that needs to know the width of something to do some logic (I increase the width by 1%, not to a specific value), getting back Null when I expect the string \"50%\" doesn't really work.</p>\n\n<p>So my question: I have values in a CSS style that are not located inline, how can I get these values? How can I modify the style instead of the inline values, given an id?</p>\n",
            "last_activity_date": 1423234374,
            "question_id": 566203,
            "score": 54,
            "tags": [
                "javascript",
                "html",
                "css",
                "ajax",
                "dom"
            ],
            "title": "Changing CSS Values with Javascript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<pre><code>this.dom.addEventListener(\"click\", function(event) {\n    self.onclick(event)\n}, false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>this is one of the most confusing points of JS: the 'this' variable means to the most local object... but functions are also objects, so 'this' points there.  There are other subtle points, but i don't remember them all.</p>\n\n<p>I usually avoid using 'this', just define a local 'me' variable and use that instead.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p><em>(extracted some explanation that was hidden in comments in other answer)</em></p>\n\n<p>The problem lies in the following line:</p>\n\n<pre><code>this.dom.addEventListener(\"click\", self.onclick, false);\n</code></pre>\n\n<p>Here, you pass a function object to be used as callback. When the event trigger, the function is called but now it has no association with any object (this).</p>\n\n<p>The problem can be solved by wrapping the function (with it's object reference) in a closure as follows:</p>\n\n<pre><code>this.dom.addEventListener(\n  \"click\",\n  function(event) {self.onclick(event)},\n  false);\n</code></pre>\n\n<p>Since the variable self was assigned <em>this</em> when the closure was created, the closure function will remember the value of the self variable when it's called at a later time.</p>\n\n<p>An alternative way to solve this is to make an utility function (and avoid using variables for binding <em>this</em>):</p>\n\n<pre><code>function bind(scope, fn) {\n    return function () {\n        fn.apply(scope, arguments);\n    };\n}\n</code></pre>\n\n<p>The updated code would then look like:</p>\n\n<pre><code>this.dom.addEventListener(\"click\", bind(this, this.onclick), false);\n</code></pre>\n\n<hr>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind</code></a> is part of ECMAScript 5 and provides the same functionality. So you can do:</p>\n\n<pre><code>this.dom.addEventListener(\"click\", this.onclick.bind(this), false);\n</code></pre>\n\n<p>For browsers which do not support ES5 yet, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\">MDN provides the following shim</a>:</p>\n\n<pre><code>if (!Function.prototype.bind) {  \n  Function.prototype.bind = function (oThis) {  \n    if (typeof this !== \"function\") {  \n      // closest thing possible to the ECMAScript 5 internal IsCallable function  \n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");  \n    }  \n\n    var aArgs = Array.prototype.slice.call(arguments, 1),   \n        fToBind = this,   \n        fNOP = function () {},  \n        fBound = function () {  \n          return fToBind.apply(this instanceof fNOP  \n                                 ? this  \n                                 : oThis || window,  \n                               aArgs.concat(Array.prototype.slice.call(arguments)));  \n        };  \n\n    fNOP.prototype = this.prototype;  \n    fBound.prototype = new fNOP();  \n\n    return fBound;  \n  };  \n} \n</code></pre>\n",
                    "is_accepted": true,
                    "score": 74
                },
                {
                    "body": "<p>The explanation is that <code>self.onclick</code> does not mean what you think it means in JavaScript. It actually means the <code>onclick</code> function in the prototype of the object <code>self</code> (without in any way referencing <code>self</code> itself).</p>\n\n<p>JavaScript only has functions and no delegates like C#, so it is not possible to pass a method AND the object it should be applied to as a callback.</p>\n\n<p>The only way to call a method in a callback is to call it yourself inside a callback function. Because JavaScript functions are closures, they are able to access the variables declared in the scope they were created in.</p>\n\n<pre><code>var obj = ...;\nfunction callback(){ return obj.method() };\nsomething.bind(callback);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I wrote this plugin...</p>\n\n<p>i think it will be useful</p>\n\n<p><a href=\"http://code.google.com/p/jquerycallback/\" rel=\"nofollow\">jquery.callback</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A good explanation of the problem (I had problems understanding solutions described so far) is <a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg82906.html\" rel=\"nofollow\">available here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For the <strong>jQuery</strong> users looking for a solution to this problem, you should use <a href=\"http://api.jquery.com/jQuery.proxy/\">jQuery.proxy</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I'm having some trouble with plain old JavaScript (no frameworks) in referencing my object in a callback function.</p>\n\n<pre><code>function foo(id) {\n    this.dom = document.getElementById(id);\n    this.bar = 5;\n    var self = this;\n    this.dom.addEventListener(\"click\", self.onclick, false);\n}\n\nfoo.prototype = {\n    onclick : function() {\n        this.bar = 7;\n    }\n};\n</code></pre>\n\n<p>Now when I create a new object (after the DOM has loaded, with a span#test)</p>\n\n<pre><code>var x = new foo('test');\n</code></pre>\n\n<p>The 'this' inside the onclick function points to the span#test and not the foo object.</p>\n\n<p>How do I get a reference to my foo object inside the onclick function?</p>\n",
            "last_activity_date": 1324593267,
            "question_id": 183214,
            "score": 52,
            "tags": [
                "javascript",
                "events",
                "binding",
                "scope",
                "callback"
            ],
            "title": "JavaScript Callback Scope"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>From the documentation:</p>\n\n<pre><code>o = new ObjectId()\ndate = o.getTimestamp()\n</code></pre>\n\n<p>this way you have date that is a ISODate.</p>\n\n<p>Look at \n<a href=\"http://www.mongodb.org/display/DOCS/Optimizing+Object+IDs#OptimizingObjectIDs-Extractinsertiontimesfromidratherthanhavingaseparatetimestampfield\" rel=\"nofollow\">http://www.mongodb.org/display/DOCS/Optimizing+Object+IDs#OptimizingObjectIDs-Extractinsertiontimesfromidratherthanhavingaseparatetimestampfield</a>.\nfor more information</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Since the first 4 bytes of an ObjectId <a href=\"http://www.mongodb.org/display/DOCS/Object+IDs\">represent a timestamp</a>, to query your collection chronologically, simply order by id:</p>\n\n<pre><code># oldest first; use pymongo.DESCENDING for most recent first\nitems = db.your_collection.find().sort(\"_id\", pymongo.ASCENDING)\n</code></pre>\n\n<p>After you get the documents, you can get the ObjectId's <a href=\"http://api.mongodb.org/python/1.7/api/pymongo/objectid.html\">generation time</a> like so:</p>\n\n<pre><code>id = some_object_id\ngeneration_time = id.generation_time\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><a href=\"http://www.kchodorow.com/blog/2011/12/20/querying-for-timestamps-using-objectids/\" rel=\"nofollow\">Popping Timestamps into ObjectIds</a> covers queries based on dates embedded in the ObjectId in great detail.</p>\n\n<p>Briefly in JavaScript code:</p>\n\n<pre><code>// This function returns an ObjectId embedded with a given datetime\n// Accepts both Date object and string input\n\nfunction objectIdWithTimestamp(timestamp) {\n    // Convert string date to Date object (otherwise assume timestamp is a date)\n    if (typeof(timestamp) == 'string') {\n        timestamp = new Date(timestamp);\n    }\n\n    // Convert date object to hex seconds since Unix epoch\n    var hexSeconds = Math.floor(timestamp/1000).toString(16);\n\n    // Create an ObjectId with that hex timestamp\n    var constructedObjectId = ObjectId(hexSeconds + \"0000000000000000\");\n\n    return constructedObjectId\n}\n\n\n// Find all documents created after midnight on May 25th, 1980\ndb.mycollection.find({ _id: { $gt: objectIdWithTimestamp('1980/05/25') } });\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 77
                },
                {
                    "body": "<p>Using MongoObjectID you should also find results as given below</p>\n\n<pre><code>db.mycollection.find({ _id: { $gt: ObjectId(\"5217a543dd99a6d9e0f74702\").getTimestamp().getTime()}});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Using inbuilt function provided by mongodb drivers in in Node.js lets you query by any timestamp:</p>\n\n<pre><code>var timestamp = Date.now();\nvar objectId = ObjectID.createFromTime(timestamp / 1000);\n</code></pre>\n\n<p>Alternatively, to search for records before the current time, you can simply do:</p>\n\n<pre><code>var objectId = new ObjectID(); // or ObjectId in the mongo shell\n</code></pre>\n\n<p>Source: <a href=\"http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html\" rel=\"nofollow\">http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In <code>pymongo</code>, it can be done this way:</p>\n\n<pre><code>import datetime\nfrom bson.objectid import ObjectId\nmins = 15\ngen_time = datetime.datetime.today() - datetime.timedelta(mins=mins) \ndummy_id = ObjectId.from_datetime(gen_time)\nresult = list(db.coll.find({\"_id\": {\"$gte\": dummy_id}}))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I know that ObjectIds contain the date they were created on. Is there a way to query this aspect of the ObjectId?</p>\n",
            "last_activity_date": 1424109581,
            "question_id": 8749971,
            "score": 46,
            "tags": [
                "javascript",
                "mongodb"
            ],
            "title": "Can I query MongoDB ObjectId by date?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Something like this:</p>\n\n<pre><code>s.replace(/\\s+/g, ' ');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 252
                },
                {
                    "body": "<p>I presume you're looking to strip spaces from the beginning and/or end of the string (rather than removing <em>all</em> spaces?</p>\n\n<p>If that's the case, you'll need a regex like this:</p>\n\n<pre><code>mystring = mystring.replace(/(^\\s+|\\s+$)/g,' ');\n</code></pre>\n\n<p>This will remove all spaces from the beginning or end of the string. If you only want to trim spaces from the end, then the regex would look like this instead:</p>\n\n<pre><code>mystring = mystring.replace(/\\s+$/g,' ');\n</code></pre>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>using a regular expression with the replace function does the trick:</p>\n\n<pre><code>string.replace(/\\s/g, \"\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>You can augment String to implement these behaviors as methods, as in:</p>\n\n<pre><code>String.prototype.killWhiteSpace = function() {\n    return this.replace(/\\s/g, '');\n};\n\nString.prototype.reduceWhiteSpace = function() {\n    return this.replace(/\\s+/g, ' ');\n};\n</code></pre>\n\n<p>This now enables you to use the following elegant forms to produce the strings you want:</p>\n\n<pre><code>\"Get rid of my whitespaces.\".killWhiteSpace();\n\"Get rid of my extra        whitespaces\".reduceWhiteSpace();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>jQuery.trim() works well. </p>\n\n<p><a href=\"http://api.jquery.com/jQuery.trim/\">http://api.jquery.com/jQuery.trim/</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>var x = \" Test   Test Test \".split(\" \").join(\"\");\nalert(x);</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know I should not necromancy on a subject, but given the details of the question, I usually expand it to mean:</p>\n\n<ul>\n<li>I want to replace multiple occurences of whitespace inside the string with a single space</li>\n<li>...and... I do not want whitespaces in the beginnin or end of the string (trim)</li>\n</ul>\n\n<p>For this, I use code like this (the parenthesis on the first regexp are there just in order to make the code a bit more readable ... regexps can be a pain unless you are familiar with them):</p>\n\n<pre><code>s = s.replace(/^(\\s*)|(\\s*)$/g, '').replace(/\\s+/g, ' ');\n</code></pre>\n\n<p>The reason this works is that the methods on String-object return a string object on which you can invoke another method (just like jQuery &amp; some other libraries). Much more compact way to code if you want to execute multiple methods on a single object in succession.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you want to restrict user to give blank space in the name just create a if statement and  give the condition. like I did:</p>\n\n<pre><code>$j('#fragment_key').bind({\n    keypress: function(e){\n        var key = e.keyCode;\n    var character = String.fromCharCode(key); \n    if(character.match( /[' ']/)) {\n        alert(\"Blank space is not allowed in the Name\");\n        return false;\n        }\n    }\n});\n</code></pre>\n\n<ul>\n<li>create a JQuery function .</li>\n<li>this is key press event.</li>\n<li>Initialize a variable.</li>\n<li>Give condition to match the character </li>\n<li>show a alert message for your matched condition.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>here's a non-regex solution (just for fun)</p>\n\n<pre><code>var s = ' a   b   word word. word, wordword word ';\ns = s.split(' ').filter(function(n){ return n != '' }).join(' ');\n\nconsole.log(s); // \"a b word word. word, wordword word\"\n</code></pre>\n\n<p>it splits the string by it's whitespaces, remove them all from the array, and joins all the words again, with a single whitespace in between them.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have strings with extra whitespaces, each time there's more than only one whitespace I'd like it be only one.</p>\n\n<p>Anyone?\nI tried searching google, but nothing worked for me.</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1395701960,
            "question_id": 6163169,
            "score": 144,
            "tags": [
                "javascript",
                "string",
                "trim"
            ],
            "title": "Replace multiple whitespaces with single whitespace in JavaScript string"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<pre><code>var myDate = new Date();\nvar prettyDate =(myDate.getMonth()+1) + '/' + myDate.getDate() + '/' +\n        myDate.getFullYear();\n$(\"#date_pretty\").val(prettyDate);\n</code></pre>\n\n<p>seemed to work, but there might be a better way out there..</p>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<p>The solution is:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"#date_pretty\").datepicker({ \n    });\n    var myDate = new Date();\n    var month = myDate.getMonth() + 1;\n    var prettyDate = month + '/' + myDate.getDate() + '/' + myDate.getFullYear();\n    $(\"#date_pretty\").val(prettyDate);\n});\n</code></pre>\n\n<p>Thanks grayghost!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>$(function()\n{\n$('.date-pick').datePicker().val(new Date().asString()).trigger('change');\n});\n</code></pre>\n\n<p>Source: <a href=\"http://www.kelvinluck.com/assets/jquery/datePicker/v2/demo/datePickerDefaultToday.html\" rel=\"nofollow\">http://www.kelvinluck.com/assets/jquery/datePicker/v2/demo/datePickerDefaultToday.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is concise and does the job:</p>\n\n<pre><code>$(\".date-pick\").datepicker('setDate', new Date());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 432
                },
                {
                    "body": "<p>This code will assure to use your datepicker's format:</p>\n\n<pre><code>$('#date-selector').datepicker('setDate', new Date());\n</code></pre>\n\n<p>No need to re-apply format, it uses the datepicker predefined-one by you on datepicker initialization (if you have assigned it!) ;)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>var prettyDate = $.datepicker.formatDate('dd-M-yy', new Date());\nalert(prettyDate);\n</code></pre>\n\n<p>Assign the prettyDate to the necessary control.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>$('input[name*=\"date\"]').datepicker({\n        dateFormat: 'dd-mm-yy',\n        changeMonth: true,\n        changeYear: true,\n        beforeShow: function(input, instance) { \n            $(input).datepicker('setDate', new Date());\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You must FIRST call datepicker() > <strong>then</strong> use 'setDate' to get the current date.</p>\n\n<pre><code>$(\".date-pick\").datepicker();\n$(\".date-pick\").datepicker(\"setDate\", new Date());\n</code></pre>\n\n<p>OR chain your setDate method call after your datepicker initialization, as noted in a comment on this answer </p>\n\n<pre><code>$('.date-pick').datepicker({ /* optional option parameters... */ })\n               .datepicker(\"setDate\", new Date());\n</code></pre>\n\n<p>It will <strong>NOT</strong> work with just </p>\n\n<pre><code>$(\".date-pick\").datepicker(\"setDate\", new Date());\n</code></pre>\n\n<p><em><strong>NOTE</em></strong> : <em>Acceptable setDate parameters are described <a href=\"http://api.jqueryui.com/datepicker/#method-setDate\">here</a></em></p>\n",
                    "is_accepted": false,
                    "score": 141
                },
                {
                    "body": "<p>PHP solution also works if all that is needed is the filling of the current date:</p>\n\n<pre><code>value = &lt;?php echo date('Y-m-d');?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Set to <strong><em>today</em></strong>:</p>\n\n<pre><code>$('#date_pretty').datepicker('setDate', '+0');\n</code></pre>\n\n<p>Set to <strong><em>yesterday</em></strong>:</p>\n\n<pre><code>$('#date_pretty').datepicker('setDate', '-1');\n</code></pre>\n\n<p>And so on with any number of days <strong><em>before</em></strong> or <strong><em>after</em></strong> <em>today's date</em>.</p>\n\n<p>See <a href=\"http://jqueryui.com/demos/datepicker/#methods\">jQuery UI \u203a Methods \u203a setDate</a>.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>In order to set the datepicker to a certain default time (the current date in my case) on loading, AND then have the option to choose another date the syntax is :</p>\n\n<pre><code>    $(function() { \n        // initialize the datapicker\n        $(\"#date\").datepicker();\n\n        // set the time\n        var currentDate = new Date();\n        $(\"#date\").datepicker(\"setDate\",currentDate);\n\n    //  set the options for the button  \n        $(\"#date\").datepicker(\"option\",{\n            dateFormat: 'dd/mm',\n            showOn: \"button\",\n          // whatever option Or event you want \n        });\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The <a href=\"http://api.jqueryui.com/datepicker/#method-setDate\"><code>setDate()</code></a> method sets the date and updates the associated control. Here is how:</p>\n\n<pre><code>$(\"#datepicker1\").datepicker({\n    dateFormat: \"yy-mm-dd\"\n}).datepicker(\"setDate\", \"0\");\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/salman/ZBFFJ/\"><strong>Demo</strong></a></p>\n\n<p>As mentioned in documentation, <code>setDate()</code> happily accepts the JavaScript Date object, number or a string:</p>\n\n<blockquote>\n  <p>The new date may be a Date object or a string in the current date\n  format (e.g. '01/26/2009'), a number of days from today (e.g. +7) or a\n  string of values and periods ('y' for years, 'm' for months, 'w' for\n  weeks, 'd' for days, e.g. '+1m +7d'), or null to clear the selected\n  date.</p>\n</blockquote>\n\n<p>In case you are wondering, setting <a href=\"http://api.jqueryui.com/datepicker/#option-defaultDate\"><code>defaultDate</code></a> property in the constructor <em>does not</em> update the associated control.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>David K Egghead's code worked perfectly, thank you!</p>\n\n<pre><code>$(\".date-pick\").datepicker(); \n$(\".date-pick\").datepicker(\"setDate\", new Date()); \n</code></pre>\n\n<p>I also managed to trim it a little and it also worked:</p>\n\n<pre><code>$(\".date-pick\").datepicker().datepicker(\"setDate\", new Date()); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This one worked for me.</p>\n\n<pre><code>$('#inputName')\n  .datepicker()\n  .datepicker('setDate', new Date());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Just thought I'd add my two cents. The picker is being used on an add/update form, so it needed to show the date coming from the database if editing an existing record, or show today's date if not. Below is working fine for me:</p>\n\n<pre><code>    $( \"#datepicker\" ).datepicker();\n    &lt;?php if (!empty($oneEVENT['start_ts'])): ?&gt;\n       $( \"#datepicker\" ).datepicker( \"setDate\", \"&lt;?php echo $startDATE; ?&gt;\" );\n    &lt;? else: ?&gt;\n       $(\"#datepicker\").datepicker('setDate', new Date());   \n    &lt;?php endif; ?&gt;\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this </p>\n\n<pre><code>$(this).datepicker(\"destroy\").datepicker({\n            changeMonth: false, changeYear: false,defaultDate:new Date(), dateFormat: \"dd-mm-yy\",  showOn: \"focus\", yearRange: \"-5:+10\"\n        }).focus();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a very simple jQuery Datepicker calendar:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"#date_pretty\").datepicker({ \n    });\n});\n</code></pre>\n\n<p>and of course in the HTML...</p>\n\n<pre><code>&lt;input type=\"text\" size=\"10\" value=\"\" id=\"date_pretty\"/&gt;\n</code></pre>\n\n<p>Today's date is nicely highlighted for the user when they bring up the calendar, but how do I get jQuery to pre-populate the textbox itself with today's date on page load, without the user doing anything?  99% of the time, the today's date default will be what they want.</p>\n",
            "last_activity_date": 1424963324,
            "question_id": 233553,
            "score": 144,
            "tags": [
                "javascript",
                "jquery",
                "jquery-ui",
                "date",
                "jquery-ui-datepicker"
            ],
            "title": "How do I pre-populate a jQuery Datepicker textbox with today&#39;s date?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>firstElementChild might not be available in IE&lt;9 (only firstChild)</p>\n\n<p>on IE&lt;9 firstChild is the firstElementChild because MS DOM (IE&lt;9) is not storing empty text nodes. But if you do so on other browsers they will return empty text nodes...</p>\n\n<p>my solution</p>\n\n<pre><code>child=(elem.firstElementChild||elem.firstChild)\n</code></pre>\n\n<p>this will give the firstchild even on IE&lt;9</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Sounds like you're overthinking it. You've observed the difference between <code>childNodes</code> and <code>children</code>, which is that <code>childNodes</code> contains all nodes, including text nodes consisting entirely of whitespace, while <code>children</code> is a collection of just the child nodes that are elements. That's really all there is to it.</p>\n\n<p>There is nothing unpredictable about either collection, although there are a couple of issues to be aware of:</p>\n\n<ul>\n<li>IE &lt;= 8 do not include white space-only text nodes in <code>childNodes</code> while other browsers do</li>\n<li>IE &lt;= 8 includes comment nodes within <code>children</code> while other browsers only have elements</li>\n</ul>\n\n<p><code>children</code>, <code>firstElementChild</code> and friends are just conveniences, presenting a filtered view of the DOM restricted to just elements.</p>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<p>The cross browser way to do is to use <code>childNodes</code> to get <code>NodeList</code>, then make an array of all nodes with <code>nodeType</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType\" rel=\"nofollow\">ELEMENT_NODE</a>.</p>\n\n<pre><code>/**\n * Return direct children elements.\n *\n * @param {HTMLElement}\n * @return {Array}\n */\nfunction elementChildren (element) {\n    var childNodes = element.childNodes,\n        children = [],\n        i = childNodes.length;\n\n    while (i--) {\n        if (childNodes[i].nodeType == 1) {\n            children.unshift(childNodes[i]);\n        }\n    }\n\n    return children;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/s4kxnahu/\" rel=\"nofollow\">http://jsfiddle.net/s4kxnahu/</a></p>\n\n<p><strong>Future:</strong></p>\n\n<p>You can use <code>querySelectorAll</code> in combination with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:scope#Browser_compatibility\" rel=\"nofollow\"><code>:scope</code></a> pseudo-class (matches the element that is the reference point of the selector):</p>\n\n<pre><code>parentElement.querySelectorAll(':scope &gt; *');\n</code></pre>\n\n<p>At the time of writing this <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:scope#Browser_compatibility\" rel=\"nofollow\"><code>:scope</code> is supported</a> in Chrome, Firefox and Safari.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I was wondering, JavaScript offers a variety of methods to get the first child element from any element... but which is the best? By best, I mean: most cross browser compatible, fastest, most comprehensive and predictable when it comes to behaviour. A list of methods/properties I use as aliases:</p>\n\n<pre><code>var elem = document.getElementById('container');\nvar child = elem.children[0];\nvar child = elem.firstElementChild;//== children[0]\n</code></pre>\n\n<p>This works for both cases:</p>\n\n<pre><code>var child = elem.childNodes[0];//or childNodes[1], see below\n</code></pre>\n\n<p>That's in case of forms, or div iteration. If I might encounter text elements:</p>\n\n<pre><code>var child = elem.childNodes;//treat as Nodelist\nvar child = elem.firstChild;\n</code></pre>\n\n<p>As far as I can work out, <code>firstChild</code> uses the Nodelist from <code>childNodes</code>, and <code>firstElementChild</code> uses <code>children</code>. I'm basing this assumption on the MDN reference:</p>\n\n<blockquote>\n  <p>childNode is a reference to the first child element of the element node, or null if there isn't one.</p>\n</blockquote>\n\n<p>I'm guessing that, in terms of speed the difference, if any, will be next no nothing, since <code>firstElementChild</code> is effectively a reference to <code>children[0]</code>, and the <code>children</code> object is already in memory anyway. </p>\n\n<p>What does throw me is the <code>childNodes</code> object. I've used it to take a look at a form, in a table element. While <code>children</code> lists all form elements, <code>childNodes</code> also seems to include whitespace from the html code:</p>\n\n<pre><code>console.log(elem.childNodes[0]);\nconsole.log(elem.firstChild);\n</code></pre>\n\n<p>both log &lt;TextNode textContent=\"\\n \"&gt;</p>\n\n<pre><code>console.log(elem.childNodes[1]);\nconsole.log(elem.children[0]);\nconsole.log(elem.firstElementChild);\n</code></pre>\n\n<p>All log &lt;input type=\"text\"... How come? I'd understand that one object would allow me to work with the 'raw' HTML code, while the other sticks to the DOM, but the <code>childNodes</code> element seems to work on both levels.</p>\n\n<p>To get back to my initial question: my guess would be: if I want the most comprehensive object, <code>childNodes</code> is the way to go, but because of it's comprehensiveness, it might not be the most predictable in terms of it returning the element I want/expect at any given moment. Cross browser support might also prove to be a challenge in that case, though I could be wrong. </p>\n\n<p>Could anyone clarify the distinction between the objects at hand? If there is a speed difference, however negligible, I'd like to know, too. If I'm seeing this all wrong, feel free to educate me :-).</p>\n\n<p>PS: please, please, I like JavaScript, so yes, I want to deal with this sort of thing. answers like 'jQuery deals with this for you' are not what I'm looking for, hence no jQuery tag.</p>\n",
            "last_activity_date": 1416824334,
            "question_id": 10381296,
            "score": 64,
            "tags": [
                "javascript",
                "dom",
                "elements",
                "children"
            ],
            "title": "best way to get child nodes"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>There is a pretty nice infinite scroll plugin <a href=\"http://www.infinite-scroll.com/infinite-scroll-jquery-plugin/\" rel=\"nofollow\">here</a></p>\n\n<p>I've never programmed one myself, but I would imagine this is how it works.</p>\n\n<ol>\n<li><p>An event is bound to the the window scrolling</p>\n\n<pre><code>$(window).scroll(myInfinteScrollFunction);\n</code></pre></li>\n<li><p>The called function checks if scroll top is greater than the window size</p>\n\n<pre><code>function myInfiniteScrollFunction() {  \n    if($(window).scrollTop() == $(window).height())  \n    makeAjaxRequest();  \n}\n</code></pre></li>\n<li><p>An AJAX request is made, specifying which result # to start at, how many to grab, and any other parameters necessary for the data pull.</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url:  \"myAjaxFile.php\",\n    data: {\"resultNum\": 30, \"numPerPage\": 50, \"query\": \"interesting%20icons\" },\n    success: myInfiniteLoadFunction(msg)\n});\n</code></pre></li>\n<li><p>The ajax returns some (most-likely JSON formatted) content, and passes them into the loadnig function.</p></li>\n</ol>\n\n<p>Hope that makes sense.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Some of the answers here are for infinite page. What Salman is asking is lazy loading of images.</p>\n\n<p><a href=\"http://www.appelsiini.net/projects/lazyload\">Plugin</a></p>\n\n<p><a href=\"http://www.appelsiini.net/projects/lazyload/enabled.html\">Demo</a></p>\n\n<p>EDIT: <strong>How do these plugins work?</strong></p>\n\n<p>This is a simplified explanation:</p>\n\n<ol>\n<li>Find window size and find the position of all images and their sizes</li>\n<li>If the image is not within the window size, replace it with a placeholder of same size</li>\n<li>When user scrolls down, and position of image &lt; scroll + window height, the image is loaded</li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p>Dave Artz of AOL gave a great talk on optimization at jQuery Conference Boston last year. AOL uses a tool called Sonar for on-demand loading based on scroll position. Check the code for the particulars of how it compares scrollTop  (and others) to the element offset to detect if part or all of the element is visible.</p>\n\n<p><a href=\"http://www.artzstudio.com/files/jquery-boston-2010/jquery.sonar/\" rel=\"nofollow\">jQuery Sonar</a></p>\n\n<p>Dave talks about Sonar in <a href=\"http://www.slideshare.net/daveartz/jquery-in-the-aol-enterprise\" rel=\"nofollow\">these slides</a>. Sonar starts on slide 46, while the overall \"load on demand\" discussion starts on slide 33.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>The Swiss Army knife of image lazy loading is YUI's <a href=\"http://yuilibrary.com/yui/docs/imageloader/\" rel=\"nofollow\">ImageLoader</a>.</p>\n\n<p>Because there is more to this problem than simply watching the scroll position.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've noticed this in numerous \"modern\" websites (e.g. facebook and google image search) where the images below the fold load only when user scrolls down the page enough to bring them inside the visible viewport region (<strong>upon view source, the page shows <em>X</em> number of <code>&lt;img&gt;</code> tags but they are not fetched from the server straight away</strong>). What is this technique called, how does it work and in how many browsers does it work. And is there a jQuery plugin that can achieve this behavior with minimum coding.</p>\n\n<h1>Edit</h1>\n\n<p>Bonus: can someone explain if there is a \"onScrolledIntoView\" or similar event for HTML elements. If not, how do these plugins work?</p>\n",
            "last_activity_date": 1418490107,
            "question_id": 5117421,
            "score": 62,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "scroll",
                "lazy-loading"
            ],
            "title": "How to load images dynamically (or lazily) when users scrolls them into view"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I'm not sure if is this that you want but there is <a href=\"http://www.trirand.com/blog/\">jqGrid</a>. It can receive JSON and make a grid.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Using jQuery will make this simpler.</p>\n\n<p>The following will take an array of arrays and store convert them into rows and cells.</p>\n\n<pre><code>$.getJSON(url , function(data) {\n    var tbl_body = \"\";\n    var odd_even = false;\n    $.each(data, function() {\n        var tbl_row = \"\";\n        $.each(this, function(k , v) {\n            tbl_row += \"&lt;td&gt;\"+v+\"&lt;/td&gt;\";\n        })\n        tbl_body += \"&lt;tr class=\\\"\"+( odd_even ? \"odd\" : \"even\")+\"\\\"&gt;\"+tbl_row+\"&lt;/tr&gt;\";\n        odd_even = !odd_even;               \n    })\n    $(\"#target_table_id tbody\").html(tbl_body);\n});\n</code></pre>\n\n<p>You could add a check for the keys you want to exclude by adding something like</p>\n\n<pre><code>var expected_keys = { key_1 : true, key_2 : true, key_3 : false, key_4 : true };\n</code></pre>\n\n<p>at the start of the getJSON cbf and adding</p>\n\n<pre><code>if ( ( k in expected_keys ) &amp;&amp; expected_keys[k] ) {\n...\n}\n</code></pre>\n\n<p>around the tbl_row += line.</p>\n\n<p>Edit: Was assigning a null variable previously</p>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>You could use a jQuery plugin that accepts JSON data to fill a table.\n<a href=\"https://github.com/omkarkhair/jsonTable\" rel=\"nofollow\">jsonTable</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Make a HTML Table from a JSON array of Objects by extending $ as shown below </p>\n\n<pre><code>$.makeTable = function (mydata) {\n    var table = $('&lt;table border=1&gt;');\n    var tblHeader = \"&lt;tr&gt;\";\n    for (var k in mydata[0]) tblHeader += \"&lt;th&gt;\" + k + \"&lt;/th&gt;\";\n    tblHeader += \"&lt;/tr&gt;\";\n    $(tblHeader).appendTo(table);\n    $.each(mydata, function (index, value) {\n        var TableRow = \"&lt;tr&gt;\";\n        $.each(value, function (key, val) {\n            TableRow += \"&lt;td&gt;\" + val + \"&lt;/td&gt;\";\n        });\n        TableRow += \"&lt;/tr&gt;\";\n        $(table).append(TableRow);\n    });\n    return ($(table));\n};\n</code></pre>\n\n<p>and use as follows:</p>\n\n<pre><code>var mydata = eval(jdata);\nvar table = $.makeTable(mydata);\n$(table).appendTo(\"#TableCont\");\n</code></pre>\n\n<p>where TableCont is some div</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>A still shorter way</p>\n\n<pre><code>$.makeTable = function (mydata) {\n            if (mydata.length &lt;= 0) return \"\";\n           return $('&lt;table border=1&gt;').append(\"&lt;tr&gt;\" + $.map(mydata[0], function (val, key) {\n                return \"&lt;th&gt;\" + key + \"&lt;/th&gt;\";\n            }).join(\"\\n\") + \"&lt;/tr&gt;\").append($.map(mydata, function (index, value) {\n                return \"&lt;tr&gt;\" + $.map(index, function (val, key) {\n                    return \"&lt;td&gt;\" + val + \"&lt;/td&gt;\";\n                }).join(\"\\n\") + \"&lt;/tr&gt;\";\n            }).join(\"\\n\"));\n        };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Pure HTML way, not vulnerable like the others AFAIK:</p>\n\n<pre><code>// Function to create a table as a child of el.\n// data must be an array of arrays (outer array is rows).\nfunction tableCreate(el, data)\n{\n    var tbl  = document.createElement(\"table\");\n    tbl.style.width  = \"70%\";\n\n    for (var i = 0; i &lt; data.length; ++i)\n    {\n        var tr = tbl.insertRow();\n        for(var j = 0; j &lt; data[i].length; ++j)\n        {\n            var td = tr.insertCell();\n            td.appendChild(document.createTextNode(data[i][j].toString()));\n        }\n    }\n    el.appendChild(tbl);\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>$.post(\"/whatever\", { somedata: \"test\" }, null, \"json\")\n.done(function(data) {\n    rows = [];\n    for (var i = 0; i &lt; data.Results.length; ++i)\n    {\n        cells = [];\n        cells.push(data.Results[i].A);\n        cells.push(data.Results[i].B);\n        rows.push(cells);\n    }\n    tableCreate($(\"#results\")[0], rows);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a really easy way I can take an array of JSON objects and turn it into an HTML table, excluding a few fields?  Or am I going to have to do this manually?</p>\n",
            "last_activity_date": 1420641598,
            "question_id": 1051061,
            "score": 44,
            "tags": [
                "javascript",
                "jquery",
                "json"
            ],
            "title": "Convert JSON array to an HTML table in jQuery"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You may want to download a set of numbered icons from the sources provided at this site:</p>\n\n<ul>\n<li><a href=\"http://jg.org/mapping/icons.html\" rel=\"nofollow\">Google Marker Icons</a></li>\n</ul>\n\n<p>Then you should be able to do the following:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt; \n&lt;head&gt; \n    &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/&gt; \n    &lt;title&gt;Google Maps Demo&lt;/title&gt; \n    &lt;script type=\"text/javascript\"\n            src=\"http://maps.google.com/maps/api/js?sensor=false\"&gt;&lt;/script&gt; \n\n    &lt;script type=\"text/javascript\"&gt; \n    function initialize() {\n\n      var myOptions = {\n        zoom: 11,\n        center: new google.maps.LatLng(-33.9, 151.2),\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      }\n\n      var map = new google.maps.Map(document.getElementById(\"map\"), myOptions);\n\n      var locations = [\n        ['Bondi Beach', -33.890542, 151.274856, 4],\n        ['Coogee Beach', -33.923036, 151.259052, 5],\n        ['Cronulla Beach', -34.028249, 151.157507, 3],\n        ['Manly Beach', -33.80010128657071, 151.28747820854187, 2],\n        ['Maroubra Beach', -33.950198, 151.259302, 1]\n      ];\n\n      for (var i = 0; i &lt; locations.length; i++) {\n          var image = new google.maps.MarkerImage('marker' + i + '.png',\n                      new google.maps.Size(20, 34),\n                      new google.maps.Point(0, 0),\n                      new google.maps.Point(10, 34));\n\n          var location = locations[i];\n          var myLatLng = new google.maps.LatLng(location[1], location[2]);\n          var marker = new google.maps.Marker({\n              position: myLatLng,\n              map: map,\n              icon: image,\n              title: location[0],\n              zIndex: location[3]\n          });\n      }\n    }\n    &lt;/script&gt; \n&lt;/head&gt; \n&lt;body style=\"margin:0px; padding:0px;\" onload=\"initialize();\"&gt; \n    &lt;div id=\"map\" style=\"width:400px; height:500px;\"&gt;&lt;/div&gt; \n&lt;/body&gt; \n&lt;/html&gt;\n</code></pre>\n\n<p>Screenshot from the above example:</p>\n\n<p><img src=\"http://i.imgur.com/UpsVE54.png\" alt=\"Google Numbered Marker Icons\"></p>\n\n<p>Note that you can easily add a shadow behind the markers. You may want to check the example at the <a href=\"http://code.google.com/apis/maps/documentation/v3/overlays.html#ComplexIcons\" rel=\"nofollow\">Google Maps API Reference: Complex Markers</a> for more info about this.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Unfortunately it's not very easy. You could create your own custom marker based on the OverlayView class (<a href=\"http://gmaps-samples-v3.googlecode.com/svn/trunk/overlayview/custommarker.html\">an example</a>) and put your own HTML in it, including a counter. This will leave you with a very basic marker, that you can't drag around or add shadows easily, but it is very customisable.</p>\n\n<p>Alternatively, you could <a href=\"http://blog.mridey.com/2009/09/label-overlay-example-for-google-maps.html\">add a label to the default marker</a>. This will be less customisable but should work. It also keeps all the useful things the standard marker does.</p>\n\n<p>You can read more about the overlays in Google's article <a href=\"http://code.google.com/apis/maps/articles/mvcfun.html\">Fun with MVC Objects</a>.</p>\n\n<p>Edit: if you don't want to create a JavaScript class, you could use <a href=\"http://groups.google.com/group/google-chart-api/web/chart-types-for-map-pins\">Google's Chart API</a>. For example:</p>\n\n<p>Numbered marker: </p>\n\n<pre><code>http://chart.apis.google.com/chart?chst=d_map_pin_letter&amp;chld=7|FF0000|000000\n</code></pre>\n\n<p>Text marker: </p>\n\n<pre><code>http://chart.apis.google.com/chart?chst=d_map_spin&amp;chld=1|0|FF0000|12|_|foo\n</code></pre>\n\n<p>This is the quick and easy route, but it's less customisable, and requires a new image to be downloaded by the client for each marker.</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>My two cents showing how to use the <a href=\"http://www.pushittolive.com/post/1285227235/google-maps-markers-with-numbers-or-text\" rel=\"nofollow\">Google Charts API</a> to solve this problem.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I don't have enough reputation to comment on answers but wanted to note that the Google Chart API has been deprecated.</p>\n\n<p>From the <a href=\"https://developers.google.com/chart/infographics/\">API homepage</a>:</p>\n\n<blockquote>\n  <p>The Infographics portion of Google Chart Tools has been officially\n  deprecated as of April 20, 2012.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>It's quite feasible to generate labeled icons server-side, if you have some programming skills.  You'll need the GD library at the server, in addition to PHP.  Been working well for me for several years now, but admittedly tricky to get the icon images in synch.</p>\n\n<p>I do that via AJAX by sending the few parameters to define the blank icon and the text and color as well as bgcolor to be applied.  Here's my PHP:</p>\n\n<pre><code>header(\"Content-type: image/png\");\n//$img_url = \"./icons/gen_icon5.php?blank=7&amp;text=BB\";\n\nfunction do_icon ($icon, $text, $color) {\n$im = imagecreatefrompng($icon);\nimageAlphaBlending($im, true);\nimageSaveAlpha($im, true);\n\n$len = strlen($text);\n$p1 = ($len &lt;= 2)? 1:2 ;\n$p2 = ($len &lt;= 2)? 3:2 ;\n$px = (imagesx($im) - 7 * $len) / 2 + $p1;\n$font = 'arial.ttf';\n$contrast = ($color)? imagecolorallocate($im, 255, 255, 255): imagecolorallocate($im, 0, 0, 0); // white on dark?\n\nimagestring($im, $p2, $px, 3, $text, $contrast);    // imagestring  ( $image, $font, $x, $y, $string, $color)\n\nimagepng($im);\nimagedestroy($im);\n}\n$icons =   array(\"black.png\", \"blue.png\", \"green.png\", \"red.png\", \"white.png\", \"yellow.png\", \"gray.png\", \"lt_blue.png\", \"orange.png\");      // 1/9/09\n$light =   array( TRUE,         TRUE,       FALSE,       FALSE,     FALSE,      FALSE,      FALSE,          FALSE,      FALSE);     // white text?\n\n$the_icon = $icons[$_GET['blank']];             // 0 thru 8 (note: total 9)\n$the_text = substr($_GET['text'], 0, 3);        // enforce 2-char limit\ndo_icon ($the_icon, $the_text,$light[$_GET['blank']] ); \n</code></pre>\n\n<p>It's invoked client-side via something like the following:\n    var image_file = \"./our_icons/gen_icon.php?blank=\" + escape(icons[color]) + \"&amp;text=\" + iconStr;</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This how I do it in V3:</p>\n\n<p>I start by loading the google maps api and within the callback method <code>initialize()</code> I load <strong>MarkerWithLabel.js</strong> that I found <a href=\"https://code.google.com/p/google-maps-utility-library-v3/source/browse/trunk/markerwithlabel/src/?r=131\">here</a>:</p>\n\n<pre><code>function initialize() {\n\n            $.getScript(\"/js/site/marker/MarkerWithLabel.js#{applicationBean.version}\", function(){\n\n            var mapOptions = {\n                zoom: 8,\n                center: new google.maps.LatLng(currentLat, currentLng),\n                mapTypeId: google.maps.MapTypeId.ROADMAP,\n                streetViewControl: false,\n                mapTypeControl: false\n            };\n\n            var map = new google.maps.Map(document.getElementById('mapholder'),\n                    mapOptions);\n\n            var bounds = new google.maps.LatLngBounds();\n\n            for (var i = 0; i &amp;lt; mapData.length; i++) {\n                createMarker(i+1, map, mapData[i]); &lt;!-- MARKERS! --&gt;\n                extendBounds(bounds, mapData[i]);\n            }\n            map.fitBounds(bounds);\n            var maximumZoomLevel = 16;\n            var minimumZoomLevel = 11;\n            var ourZoom = defaultZoomLevel; // default zoom level\n\n            var blistener = google.maps.event.addListener((map), 'bounds_changed', function(event) {\n                if (this.getZoom(map.getBounds) &amp;gt; 16) {\n                    this.setZoom(maximumZoomLevel);\n                }\n                google.maps.event.removeListener(blistener);\n            });\n            });\n        }\n\n        function loadScript() {\n            var script = document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = \"https://maps.googleapis.com/maps/api/js?v=3.exp&amp;amp;libraries=places&amp;amp;sensor=false&amp;amp;callback=initialize\";\n            document.body.appendChild(script);\n        }\n\n        window.onload = loadScript;\n\n    &lt;/script&gt; \n</code></pre>\n\n<p>I then create the markers with <code>createMarker()</code>:</p>\n\n<pre><code>function createMarker(number, currentMap, currentMapData) {\n\n   var marker = new MarkerWithLabel({\n       position: new google.maps.LatLng(currentMapData[0], currentMapData[1]),\n                 map: currentMap,\n                 icon: '/img/sticker/empty.png',\n                 shadow: '/img/sticker/bubble_shadow.png',\n                 transparent: '/img/sticker/bubble_transparent.png',\n                 draggable: false,\n                 raiseOnDrag: false,\n                 labelContent: \"\"+number,\n                 labelAnchor: new google.maps.Point(3, 30),\n                 labelClass: \"mapIconLabel\", // the CSS class for the label\n                 labelInBackground: false\n                });\n            }\n</code></pre>\n\n<p>Since I added <strong>mapIconLabel</strong> class to the marker I can add some css rules in my css:</p>\n\n<pre><code>.mapIconLabel {\n    font-size: 15px;\n    font-weight: bold;\n    color: #FFFFFF;\n    font-family: 'DINNextRoundedLTProMediumRegular';\n}\n</code></pre>\n\n<p>And here is the result:</p>\n\n<p><img src=\"http://i.stack.imgur.com/RmvhE.png\" alt=\"MarkerWithIconAndLabel\"></p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>Based on <a href=\"http://stackoverflow.com/a/2788519/662581\">@dave1010</a> answer but with updated <code>https</code> links.</p>\n\n<p>Numbered marker:</p>\n\n<pre><code>https://chart.googleapis.com/chart?chst=d_map_pin_letter&amp;chld=7|FF0000|000000\n</code></pre>\n\n<p>Text marker:</p>\n\n<pre><code>https://chart.googleapis.com/chart?chst=d_map_spin&amp;chld=1|0|FF0000|12|_|Marker\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm working on a map that has multiple markers on it.</p>\n\n<p>These markers use a custom icon, but I'd also like to add numbers on top. I've seen how this has been accomplished using older versions of the API. How can I do this in V3?</p>\n\n<p>*Note -- the \"title\" attribute creates a tooltip when you mouseover the marker, but I want something that will be layered on top of the custom image even when you're not hovering on top of it.</p>\n\n<p>Here's the documentation for the marker class, and none of these attributes seem to help: <a href=\"http://code.google.com/apis/maps/documentation/v3/reference.html#MarkerOptions\">http://code.google.com/apis/maps/documentation/v3/reference.html#MarkerOptions</a></p>\n",
            "last_activity_date": 1424961645,
            "question_id": 2436484,
            "score": 30,
            "tags": [
                "javascript",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "How can I create numbered map markers in Google Maps V3?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Array.slice can be used to copy an array or part of an array..\n<a href=\"http://www.devguru.com/Technologies/Ecmascript/Quickref/Slice.html\" rel=\"nofollow\">http://www.devguru.com/Technologies/Ecmascript/Quickref/Slice.html</a>\nThis would work with strings and numbers .. - changing a string in one array would not affect the other - but objects are still just copied by reference so changes to referenced objects in one array would have an affect on the other array.</p>\n\n<p>Here is an example of a JavaScript undo manager that could be useful for this :<a href=\"http://www.ridgway.co.za/archive/2007/11/07/simple-javascript-undo-manager-for-dtos.aspx\" rel=\"nofollow\">http://www.ridgway.co.za/archive/2007/11/07/simple-javascript-undo-manager-for-dtos.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The issue with your shallow copy is that all the objects aren't cloned.  While the references to each object are unique in each array, once you ultimately grab onto it you're dealing with the same object as before.  There is nothing wrong with the way you cloned it...  the same result would occur using Array.slice().</p>\n\n<p>The reason your deep copy is having problems is because you're ending up with circular object references.  Deep will go as deep as it can go, and if you've got a circle, it'll keep going infinitely until the browser faints.</p>\n\n<p>If the data structure cannot be represented as a directed acyclic graph, then I'm not sure you're going to be able to find an all-purpose method for deep cloning.  Cyclic graphs provide many tricky corner cases, and since it's not a common operation I doubt anyone has written a full solution (if it's even possible - it might not be!  But I have no time to try to write a rigorous proof now.).  I found some good comments on the issue on <a href=\"http://creativekarma.com/ee.php/weblog/comments/deep%5Fcloning%5Fin%5Fjava/\">this page</a>.</p>\n\n<p>If you need a deep copy of an Array of Objects with circular references I believe you're going to have to code your own method to handle your specialized data structure, such that it is a multi-pass clone:</p>\n\n<ol>\n<li>On round one, make a clone of all objects that don't reference other objects in the array.  Keep a track of each object's origins.</li>\n<li>On round two, link the objects together.  </li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>As Daniel Lew mentioned, cyclic graphs have some problems. If I had this problem I'd either add special <code>clone()</code> methods to the problematic objects or remember which objects I've already copied.</p>\n\n<p>I'd do it with a variable <code>copyCount</code> which increases by 1 every time you copy in your code. An object that has a lower <code>copyCount</code> than the current copy-process is copied. If not, the copy, that exists already, should be referenced. This makes it necessary to link from the original to its copy.</p>\n\n<p>There is still one problem: Memory. If you have this reference from one object to the other, it's likely that the browser can't free those objects, as they are always referenced from somewhere. You'd have to make a second pass where you set all copy-references to Null. (If you do this, you'd not have to have a <code>copyCount</code> but a boolean <code>isCopied</code> would be enough, as you can reset the value in the second pass.)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I may have a simple way to do this without having to do painful recursion and not knowing all the finer details of the object in question. Using jQuery, simply convert your object to JSON using the jQuery <code>$.toJSON(myObjectArray)</code>, then take your JSON string and evaluate it back to an object. BAM! Done, and done! Problem solved. :)</p>\n\n<pre><code>var oldObjArray = [{ Something: 'blah', Cool: true }];\nvar newObjArray = eval($.toJSON(oldObjArray));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>$.evalJSON($.toJSON(origArray));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>If all you need is a shallow copy, a really easy way is:</p>\n\n<pre><code>new_array = old_array.slice(0);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 139
                },
                {
                    "body": "<p>forget eval() (is the most misused feature of JS and makes the code slow) and slice(0) (works for simple data types only)</p>\n\n<p>This is the best solution for me:</p>\n\n<pre><code>Object.prototype.clone = function() {\n  var myObj = (this instanceof Array) ? [] : {};\n  for (i in this) {\n    if (i != 'clone') {\n        if (this[i] &amp;&amp; typeof this[i] == \"object\") {\n          myObj[i] = this[i].clone();\n        } else \n            myObj[i] = this[i];\n        } \n    }\n  return myObj;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>with jQuery:</p>\n\n<pre><code>var target= [];\n$.each(source, function() {target.push( $.extend({},this));});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was pretty frustrated by this problem. Apparently the problem arises when you send in a generic Array to the $.extend method. So, to fix it, I added a little check, and it works perfectly with generic arrays, jQuery arrays, and any objects.</p>\n\n<pre><code>jQuery.extend({\n    deepclone: function(objThing) {\n        // return jQuery.extend(true, {}, objThing);\n        /// Fix for arrays, without this, arrays passed in are returned as OBJECTS! WTF?!?!\n        if ( jQuery.isArray(objThing) ) {\n            return jQuery.makeArray( jQuery.deepclone($(objThing)) );\n        }\n        return jQuery.extend(true, {}, objThing);\n    },\n});\n</code></pre>\n\n<p>Invoke using:</p>\n\n<pre><code>var arrNewArrayClone = jQuery.deepclone(arrOriginalArray);\n// Or more simply/commonly\nvar arrNewArrayClone = $.deepclone(arrOriginalArray);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This works for me:</p>\n\n<pre><code>var clonedArray = $.map(originalArray, function (obj) {\n                      return $.extend({}, obj);\n                  });\n</code></pre>\n\n<p>And if you need deep copy of objects in array:</p>\n\n<pre><code>var clonedArray = $.map(originalArray, function (obj) {\n                      return $.extend(true, {}, obj);\n                  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Simply clone any type of array with:</p>\n\n<pre><code>[].concat(data);\n</code></pre>\n\n<p>or, since <em>concat</em> may not work in some IE browsers, you can use this:</p>\n\n<pre><code>data.slice(0);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>My approach: </p>\n\n<pre><code>var temp = { arr : originalArray };\nvar obj = $.extend(true, {}, temp);\nreturn obj.arr;\n</code></pre>\n\n<p>gives me a nice, clean, deep clone of the original array - with none of the objects referenced back to the original :-)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>JQuery extend is working fine, just you need to specify that you are cloning an array rather than an object (<strong>note the [] instead of {} as parameter to the extend method</strong>):</p>\n\n<pre><code>var clonedNodesArray = jQuery.extend([], nodesArray);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The following code will perform recursively a <a href=\"http://james.padolsey.com/javascript/deep-copying-of-objects-and-arrays/\" rel=\"nofollow\">deep copying of objects and array</a>:</p>\n\n<pre><code>function deepCopy(obj) {\nif (Object.prototype.toString.call(obj) === '[object Array]') {\n    var out = [], i = 0, len = obj.length;\n    for ( ; i &lt; len; i++ ) {\n        out[i] = arguments.callee(obj[i]);\n    }\n    return out;\n}\nif (typeof obj === 'object') {\n    var out = {}, i;\n    for ( i in obj ) {\n        out[i] = arguments.callee(obj[i]);\n    }\n    return out;\n}\nreturn obj;\n}\n</code></pre>\n\n<p><a href=\"http://james.padolsey.com/javascript/deep-copying-of-objects-and-arrays/\" rel=\"nofollow\">Source</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm answering this question because there doesn't seem to be a simple and explicit solution to the problem of \"cloning an array of objects in Javascript\":</p>\n\n<pre><code>function deepCopy (arr) {\n    var out = [];\n    for (var i = 0, len = arr.length; i &lt; len; i++) {\n        var item = arr[i];\n        var obj = {};\n        for (var k in item) {\n            obj[k] = item[k];\n        }\n        out.push(obj);\n    }\n    return out;\n}\n\n// test case\n\nvar original = [\n    {'a' : 1},\n    {'b' : 2}\n    ];\n\nvar copy = deepCopy(original);\n\n// change value in copy\ncopy[0]['a'] = 'not 1';\n\n// original[0]['a'] still equals 1\n</code></pre>\n\n<p>This solution iterates the array values, then iterates the object keys, saving the latter to a new object, and then pushing that new object to a new array.</p>\n\n<p>See <a href=\"http://jsfiddle.net/bozdoz/ku43m/\" rel=\"nofollow\">jsfiddle</a>.  Note: a simple <code>.slice()</code> or <code>[].concat()</code> isn't enough for the objects <strong>within</strong> the array.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>C'mon guys, it is 21st century, no need in any loops to clone arrays and objects. Pure vanilla one line solution</p>\n\n<pre><code>var clonedArray = JSON.parse(JSON.stringify(nodesArray))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                }
            ],
            "body": "<p>...where each object also have references to other objects within the same array?\nWhen I first came up with this problem I just though of something like </p>\n\n<pre><code>var clonedNodesArray = nodesArray.clone()\n</code></pre>\n\n<p>would exists and searched for info on how cloning objects in javascript. I did find a <a href=\"http://stackoverflow.com/questions/122102/what-is-the-most-efficent-way-to-clone-a-javascript-object\">question</a> on StackOverflow \n(answered by the very same John Resig) and he pointed out that with jQuery you could do</p>\n\n<pre><code>var clonedNodesArray = jQuery.extend({}, nodesArray);\n</code></pre>\n\n<p>to clone an object. I tried this though, this only copies the references of the objects in the array. So if I </p>\n\n<pre><code>nodesArray[0].value = \"red\"\nclonedNodesArray[0].value = \"green\"\n</code></pre>\n\n<p>the value of both nodesArray[0] and clonedNodesArray[0] will turn out to be \"green\". Then I tried</p>\n\n<pre><code>var clonedNodesArray = jQuery.extend(true, {}, nodesArray);\n</code></pre>\n\n<p>which deep copies an Object, but I got \"<em>too much recursion</em>\" and \"<em>control stack overflow</em>\" messages from both Firebug and Opera Dragonfly respectively.</p>\n\n<p>How would you do it? Is this something that shouldn't even be done? Is there a reusable way of doing this in javascript?</p>\n",
            "last_activity_date": 1399321191,
            "question_id": 597588,
            "score": 107,
            "tags": [
                "javascript"
            ],
            "title": "How do you clone an Array of Objects in Javascript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Take your JSON and <code>.stringify()</code> it. Then use the <code>.replace()</code> method and replace all occurrences of <code>\\n</code> with <code>\\\\n</code>. </p>\n\n<p>EDIT:</p>\n\n<p>As far as I know of, there are no well-known JS libraries for escaping all special characters in a string. But, you could chain the <code>.replace()</code> method and replace all of the special characters like this:</p>\n\n<pre><code>var myJSONString = JSON.stringify(myJSON);\nvar myEscapedJSONString = myJSONString.replace(/\\\\n/g, \"\\\\n\")\n                                      .replace(/\\\\'/g, \"\\\\'\")\n                                      .replace(/\\\\\"/g, '\\\\\"')\n                                      .replace(/\\\\&amp;/g, \"\\\\&amp;\")\n                                      .replace(/\\\\r/g, \"\\\\r\")\n                                      .replace(/\\\\t/g, \"\\\\t\")\n                                      .replace(/\\\\b/g, \"\\\\b\")\n                                      .replace(/\\\\f/g, \"\\\\f\");\n// myEscapedJSONString is now ready to be POST'ed to the server. \n</code></pre>\n\n<p>But that's pretty nasty, isn't it? Enter the beauty of functions, in that they allow you to break code into pieces and keep the main flow of your script clean, and free of 8 chained <code>.replace()</code> calls. So let's put that functionality into a function called, <code>escapeSpecialChars()</code>. Let's go ahead and attach it to the <code>prototype chain</code> of the <code>String</code> object, so we can call <code>escapeSpecialChars()</code> directly on String objects.</p>\n\n<p>Like so:</p>\n\n<pre><code>String.prototype.escapeSpecialChars = function() {\n    return this.replace(/\\\\n/g, \"\\\\n\")\n               .replace(/\\\\'/g, \"\\\\'\")\n               .replace(/\\\\\"/g, '\\\\\"')\n               .replace(/\\\\&amp;/g, \"\\\\&amp;\")\n               .replace(/\\\\r/g, \"\\\\r\")\n               .replace(/\\\\t/g, \"\\\\t\")\n               .replace(/\\\\b/g, \"\\\\b\")\n               .replace(/\\\\f/g, \"\\\\f\");\n};\n</code></pre>\n\n<p>Once we have defined that function, the main body of our code is as simple as this:</p>\n\n<pre><code>var myJSONString = JSON.stringify(myJSON);\nvar myEscapedJSONString = myJSONString.escapeSpecialChars();\n// myEscapedJSONString is now ready to be POST'ed to the server\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>I'm afraid to say that answer given by Alex is rather incorrect, to put it mildly:</p>\n\n<ul>\n<li>Some characters Alex tries to escape are not required to be escaped at all (like &amp; and ');</li>\n<li>\\b is not at all the backspace character but rather a word boundary match</li>\n<li>Characters required to be escaped are not handled.</li>\n</ul>\n\n<p>This function </p>\n\n<pre><code>escape = function (str) {\n    // TODO: escape %x75 4HEXDIG ?? chars\n    return str\n      .replace(/[\\\"]/g, '\\\\\"')\n      .replace(/[\\\\]/g, '\\\\\\\\')\n      .replace(/[\\/]/g, '\\\\/')\n      .replace(/[\\b]/g, '\\\\b')\n      .replace(/[\\f]/g, '\\\\f')\n      .replace(/[\\n]/g, '\\\\n')\n      .replace(/[\\r]/g, '\\\\r')\n      .replace(/[\\t]/g, '\\\\t')\n    ; };\n</code></pre>\n\n<p>appears to be a better approximation.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>As per user667073 suggested, except reordering the backslash replacement first, and fixing the quote replacement</p>\n\n<pre><code>escape = function (str) {\n  return str\n    .replace(/[\\\\]/g, '\\\\\\\\')\n    .replace(/[\\\"]/g, '\\\\\\\"')\n    .replace(/[\\/]/g, '\\\\/')\n    .replace(/[\\b]/g, '\\\\b')\n    .replace(/[\\f]/g, '\\\\f')\n    .replace(/[\\n]/g, '\\\\n')\n    .replace(/[\\r]/g, '\\\\r')\n    .replace(/[\\t]/g, '\\\\t');\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>There is also second parameter on JSON.stringify. So, more elegant solution would be:</p>\n\n<pre><code>function escape (key, val) {\n    if (typeof(val)!=\"string\") return val;\n    return val\n      .replace(/[\\\"]/g, '\\\\\"')\n      .replace(/[\\\\]/g, '\\\\\\\\')\n      .replace(/[\\/]/g, '\\\\/')\n      .replace(/[\\b]/g, '\\\\b')\n      .replace(/[\\f]/g, '\\\\f')\n      .replace(/[\\n]/g, '\\\\n')\n      .replace(/[\\r]/g, '\\\\r')\n      .replace(/[\\t]/g, '\\\\t')\n    ; \n}\n\nvar myJSONString = JSON.stringify(myJSON,escape);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A small update for single quotes</p>\n\n<pre><code>function escape (key, val) {\n    if (typeof(val)!=\"string\") return val;\n    return val      \n        .replace(/[\\\\]/g, '\\\\\\\\')\n        .replace(/[\\/]/g, '\\\\/')\n        .replace(/[\\b]/g, '\\\\b')\n        .replace(/[\\f]/g, '\\\\f')\n        .replace(/[\\n]/g, '\\\\n')\n        .replace(/[\\r]/g, '\\\\r')\n        .replace(/[\\t]/g, '\\\\t')\n        .replace(/[\\\"]/g, '\\\\\"')\n        .replace(/\\\\'/g, \"\\\\'\"); \n}\n\nvar myJSONString = JSON.stringify(myJSON,escape);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I got same situation in one of my Ajax calls, where <code>JSON</code> was throwing an error due to the newline in the Textarea field. The solution given here didn't worked for me.\nSo i used Javascript's <code>.escape</code> function and it worked fine. Then to retrieve the value from <code>JSON</code>, I just unescaped using <code>.unescape</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is an old question but the solution did not work well for me as it did not solve all cases. I finally found an answer that did the job <a href=\"http://stackoverflow.com/questions/5506000/javascript-json-stringify-doesnt-escape\">here</a></p>\n\n<p>I will post my combined solution of both using escape and encode uri component:</p>\n\n<pre><code>// implement JSON stringify serialization\nJSON.stringify = JSON.stringify || function (obj) {\n    var t = typeof (obj);\n    if (t != \"object\" || obj === null) {\n        // simple data type\n        if (t == \"string\") obj = '\"'+obj+'\"';\n        return String(obj);\n    }\n    else {\n        // recurse array or object\n        var n, v, json = [], arr = (obj &amp;&amp; obj.constructor == Array);\n        for (n in obj) {\n            v = obj[n]; t = typeof(v);\n            if (t == \"string\") v = '\"'+v+'\"';\n            else if (t == \"object\" &amp;&amp; v !== null) v = JSON.stringify(v);\n            json.push((arr ? \"\" : '\"' + n + '\":') + String(v));\n        }\n        var rawString = (arr ? \"[\" : \"{\") + String(json) + (arr ? \"]\" : \"}\");\n       return rawString;\n    }\n};\nfunction escape (key, val) {\n    if (typeof(val)!=\"string\") return val;\n\n    var replaced = encodeURIComponent(val);\n    return replaced;\n}\n\nJSON.stringifyEscaped = function(obj){\n    return JSON.stringify(obj,escape);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>When using any form of Ajax, detailed documentation for the format of responses received from the CGI server seems to be lacking on the Web. Some entries here point out that newlines in returned text or json data must be escaped to prevent infinite loops (hangs) in JSON conversion (possibly created by throwing an uncaught exception), whether done automatically by jQuery or manually using Javascript system or library JSON parsing calls.</p>\n\n<p>In each case where programmers post this problem, inadequate solutions are presented (most often replacing \\n by \\\\n on the sending side) and the matter is dropped. Their inadequacy is revealed when passing string values that accidentally embed control escape sequences, such as Windows pathnames. An example is \"C:\\Chris\\Roberts.php\", which contains the control characters ^c and ^r, which can cause JSON conversion of the string {\"file\":\"C:\\Chris\\Roberts.php\"} to loop forever. One way of generating such values is deliberately to attempt to pass PHP warning and error messages from server to client, a reasonable idea.</p>\n\n<p>By definition, Ajax uses HTTP connections behind the scenes. Such connections pass data using GET and POST, both of which require encoding sent data to avoid incorrect syntax, including control characters.</p>\n\n<p>This gives enough of a hint to construct what seems to be a solution (it needs more testing): to use rawurlencode on the PHP (sending) side to encode the data, and unescape on the Javascript (receiving) side to decode the data. In some cases, you will apply these to entire text strings, in other cases you will apply them only to values inside JSON.</p>\n\n<p>If this idea turns out to be correct, simple examples can be constructed to help programmers at all levels solve this problem once and for all.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>use <strong>json_encode()</strong> if your server side scripting lang is php, \njson_encode() escapes the newline &amp; other unexpected tokens for you\n(if not php look for similar function for your scripting lan)</p>\n\n<p>then use $.parseJSON() in your javascript, done!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>this is an old post. but it may still be helpful for those using angular.fromJson, and JSON.stringify.\nescape() is deprecated.\nuse this instead,</p>\n\n<pre><code>var uri_enc = encodeURIComponent(uri); //before you post the contents\nvar uri_dec = decodeURIComponent(uri_enc); //before you display/use the contents.\n</code></pre>\n\n<p>ref <a href=\"http://www.w3schools.com/jsref/jsref_decodeuricomponent.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_decodeuricomponent.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I used the built in <a href=\"http://api.jquery.com/serialize/\" rel=\"nofollow\">jQuery.serialize()</a> to extract the value from a textarea to urlencode the input. The pro part is that you don't have to search replace every special char on your own and i also keep the newlines and escapes html. For serialize to work it seems the input field needs to have a name attribute though and it also adds same attribute to the escaped string which needs to be replaced away. Might not be what you are looking for but it works for me.</p>\n\n<pre><code>var myinputfield = jQuery(\"#myinputfield\"); \nvar text = myinputfield.serialize();\ntext = text.replace(myinputfield.attr('name') + '=','');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have to form a JSON string in which a value is having new line character. This has to be escaped and then posted using ajax call. Can any one suggest a way to escape the string with javascript. I am not using jQuery.</p>\n",
            "last_activity_date": 1417200345,
            "question_id": 4253367,
            "score": 61,
            "tags": [
                "javascript",
                "escaping"
            ],
            "title": "How to escape a JSON string containing newline characters using javascript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>EDIT: this answer is (now) largely irrelevant.  If your image is on the web, just specify the <code>url</code> param as per the <a href=\"http://developers.facebook.com/docs/reference/api/photo/\">API</a> (and see examples in other answers).  If you would like to POST the image content to facebook directly, you may want to read this answer to gain understanding.  Also see HTML5's <code>Canvas.toDataUrl()</code>.</p>\n</blockquote>\n\n<p>The API <a href=\"http://developers.facebook.com/docs/reference/api/photo/\">says</a>: \"To publish a photo, issue a POST request <em>with the photo file attachment as multipart/form-data</em>.\"</p>\n\n<p>FB is expecting that the bytes of the image to be uploaded are in the body of the HTTP request, but they're not there. Or to look at it another way - where in the FB.api() call are you supplying the actual contents of the image itself? </p>\n\n<p>The <a href=\"http://developers.facebook.com/docs/reference/javascript/fb.api/\">FB.api()</a> API is poorly documented, and doesn't supply an example of an HTTP POST which includes a body.  One might infer from the absence of such an example that it doesn't support this.</p>\n\n<p>That's probably OK - FB.api() is using something called <code>XmlHttpRequest</code> under the covers which <em>does</em> support including a body ... look it up in your favourite JavaScript reference.</p>\n\n<p>However, you'll still have 2 sub-problems to solve:</p>\n\n<ol>\n<li>how to prepare the image bytes (and rest of the request) as <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2\">multipart/form-data</a>; and</li>\n<li>getting the bytes of the image itself</li>\n</ol>\n\n<p>(incidentally, the need to encode the message body is probably what the PHP setFileUploadSupport(true) method is for - tell the <code>facebook</code> object to encode the message body as <code>multipart/form-data</code> before sending)</p>\n\n<h2>But it's a bit meessier than that</h2>\n\n<p>Unfortunately, sub-problem '2' may bite you - there is no way (last time I looked) to extract the bytes of an image from the browser-supplied Image object.  </p>\n\n<p>If the image to be uploaded is accessible via a URL, you could fetch the bytes with XmlHttpRequest.  Not too bad.</p>\n\n<p>If the image is coming from the user's desktop, your probable recourse is to offer the user a:</p>\n\n<pre><code> &lt;form enctype=\"multipart/form-data\"&gt;\n     &lt;input type=\"filename\" name=\"myfile.jpg\" /&gt;\n     &lt;input type=\"hidden\" name=\"source\" value=\"@myfile.jpg\"/&gt;\n     &lt;input type=\"hidden\" name=\"message\" value=\"My Message\"/&gt;\n     &lt;input type=\"hidden\" name=\"access_token\" value=\"...\"/&gt; \n &lt;/form&gt; \n</code></pre>\n\n<p>(notice that <code>source</code> references the name given to the file-upload widget)</p>\n\n<p>... and hope that FB anticipated receiving the data in this manner (try it with a static HTML form first, before coding it up dynamically in JS).  One might infer that in fact it would, since they don't offer another means of doing it.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Yes, this is possible, i find 2 solutions how to do that and they are very similar\nto each other, u need just define url parameter to external image url</p>\n\n<p><strong>FIRST one using Javascript SDk:</strong></p>\n\n<pre><code>var imgURL=\"http://farm4.staticflickr.com/3332/3451193407_b7f047f4b4_o.jpg\";//change with your external photo url\nFB.api('/album_id/photos', 'post', {\n    message:'photo description',\n    url:imgURL        \n}, function(response){\n\n    if (!response || response.error) {\n        alert('Error occured');\n    } else {\n        alert('Post ID: ' + response.id);\n    }\n\n});\n</code></pre>\n\n<p>and <strong>SECOND one using jQuery Post request and FormData:</strong></p>\n\n<pre><code> var postMSG=\"Your message\";\n var url='https://graph.facebook.com/albumID/photos?access_token='+accessToken+\"&amp;message=\"+postMSG;\n var imgURL=\"http://farm4.staticflickr.com/3332/3451193407_b7f047f4b4_o.jpg\";//change with your external photo url\n var formData = new FormData();\n formData.append(\"url\",imgURL);\n\n  $.ajax({\n                    url: url,\n                    data: formData,\n                    cache: false,\n                    contentType: false,\n                    processData: false,\n                    type: 'POST',\n\n                    success: function(data){\n                        alert(\"POST SUCCESSFUL\");\n                    }\n                });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>i used @\u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u0414\u0432\u043e\u0440\u043d\u0438\u043a code with some modification, I had the same issue and with this code it worked very well:</p>\n\n<pre><code>        var imgURL = //your external photo url\n        FB.api('/photos', 'post', {\n            message: 'photo description',\n            access_token: your accesstoken \n            url: imgURL\n        }, function (response) {\n\n            if (!response || response.error) {\n                alert('Error occured:' + response);\n            } else {\n                alert('Post ID: ' + response.id);\n            }\n\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><strong>Photos can be uploaded to facebook profile using Ajax as follows.</strong></p>\n\n<pre><code>$.ajax({\n            type: \"POST\",\n            url: \"https://graph.facebook.com/me/photos\",\n            data: {\n                message: \"Your Msg Goes Here\",\n                url: \"http://www.knoje.com/images/photo.jpg[Replace with yours]\",\n                access_token: token,\n                format: \"json\"\n            },\n            success: function(data){\n               alert(\"POST SUCCESSFUL\"); }\n            });\n</code></pre>\n\n<p>So this is the best way to post photo to a facebook profile with GRAPH API and is the simple one.</p>\n\n<p>In many answer i have seen that image url is shwon by the source,picture or image etc but that doesn't works. </p>\n\n<p>The use of of source,picture or image leads to a <strong>(#324) Requires upload file</strong> error .</p>\n\n<p>Best way to avoid the 324 error.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I seem to have a similar problem, but solutions above didn't work.</p>\n\n<p>I was using the solution suggested by Arrabi (just use the url property only) to post images without any problem. My images are around 2-3 MB each.</p>\n\n<p>When I migrated my app to another server (changing the absolute url of my images in the post) the method kept giving me 324 errors for images above around 100k size.</p>\n\n<p>I thought it was due to some Apache setting on my end, but when I changed apache for lighttpd the problem was still there.</p>\n\n<p>The connections from Facebook actually show up in my (apache) log:</p>\n\n<blockquote>\n  <p>69.171.234.7 - - [08/Jun/2012:11:35:54 +0200] \"GET /images/cards/1337701633_518192458.png HTTP/1.1\" 200 2676608 \"-\" \"facebookplatform/1.0 (+http://developers.facebook.com)\"</p>\n  \n  <p>69.171.228.246 - - [08/Jun/2012:11:42:59 +0200] \"GET /images/test5.jpg HTTP/1.1\" 200 457402 \"-\" \"facebookplatform/1.0 (+http://developers.facebook.com)\"</p>\n  \n  <p>69.171.228.246 - - [08/Jun/2012:11:43:17 +0200] \"GET /images/test4.jpg HTTP/1.1\" 200 312069 \"-\" \"facebookplatform/1.0 (+http://developers.facebook.com)\"</p>\n  \n  <p>69.171.228.249 - - [08/Jun/2012:11:43:49 +0200] \"GET /images/test2.png HTTP/1.1\" 200 99538 \"-\" \"facebookplatform/1.0 (+http://developers.facebook.com)\"</p>\n  \n  <p>69.171.228.244 - - [08/Jun/2012:11:42:31 +0200] \"GET /images/test6.png HTTP/1.1\" 200 727722 \"-\" \"facebookplatform/1.0 (+http://developers.facebook.com)\"</p>\n</blockquote>\n\n<p>Only test2.png succeeded.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes, you can do this posting data to an iframe like <a href=\"http://stackoverflow.com/a/5455783/1107651\">here</a>, or you can use <a href=\"http://blueimp.github.com/jQuery-File-Upload/\" rel=\"nofollow\">jQuery File Upload</a> .\nThe problem is you can't get response from iframe, using plugin you can use a page handle.</p>\n\n<p>Example:  upload a video using jQuery File Upload</p>\n\n<pre><code>&lt;form id=\"fileupload\" action=\"https://graph-video.facebook.com/me/photos\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"hidden\" name=\"acess_token\" value=\"user_acess_token\"&gt;\n    &lt;input type=\"text\" name=\"title\"&gt;\n    &lt;input type=\"text\" name=\"description\"&gt;\n    &lt;input type=\"file\" name=\"file\"&gt; &lt;!-- name must be file --&gt;\n&lt;/form&gt;\n\n\n&lt;script type=\"text/javascript\"&gt;\n\n    $('#fileupload').fileupload({\n        dataType: 'json',\n        forceIframeTransport: true, //force use iframe or will no work\n        autoUpload : true,\n        //facebook book response will be send as param\n        //you can use this page to save video (Graph Api) object on database\n        redirect : 'http://pathToYourServer?%s' \n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To upload a file from the local computer with just Javascript try <a href=\"http://adodson.com/hello.js\" rel=\"nofollow\">HelloJS</a></p>\n\n<pre><code>&lt;form onsubmit=\"upload();\"&gt;\n     &lt;input type=\"file\" name=\"file\"/&gt;\n     &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\nfunction upload(){\n   hello.api(\"facebook:/me/photos\", 'post', document.getElementById('form'), function(r){\n      alert(r&amp;&amp;!r.error?'Success':'Failed'); \n   });\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>There's an upload demo at <a href=\"http://adodson.com/hello.js/demos/upload.html\" rel=\"nofollow\">http://adodson.com/hello.js/demos/upload.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/a/16439233/68210\">http://stackoverflow.com/a/16439233/68210</a> contains a solution that works if you need to upload the photo data itself and don't have a url.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This still works. I am using it as below:</p>\n\n<pre><code>var formdata= new FormData();\nif (postAs === 'page'){\n    postTo = pageId; //post to page using pageID\n}\n\nformdata.append(\"access_token\", accessToken); //append page access token if to post as page, uAuth|paAuth\nformdata.append(\"message\", photoDescription);\nformdata.append(\"url\", 'http://images/image.png');\n\ntry {\n    $.ajax({\n        url: 'https://graph.facebook.com/'+ postTo +'/photos',\n        type: \"POST\",\n        data: formdata,\n        processData: false,\n        contentType: false,\n        cache: false,\n        error: function (shr, status, data) {\n            console.log(\"error \" + data + \" Status \" + shr.status);\n        },\n        complete: function () {\n            console.log(\"Successfully uploaded photo to Facebook\");\n        }\n    });\n} catch (e) {\n    console.log(e);\n}\n</code></pre>\n\n<p>I have to ask though if you people have any idea if this is advisable or has a big security risk compared to using PHP api for Facebook.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>This works:</strong></p>\n\n<pre><code>   function x(authToken, filename, mimeType, imageData, message) {\n    // this is the multipart/form-data boundary we'll use\n    var boundary = '----ThisIsTheBoundary1234567890';\n\n    // let's encode our image file, which is contained in the var\n    var formData = '--' + boundary + '\\r\\n';\n    formData += 'Content-Disposition: form-data; name=\"source\"; filename=\"' + filename + '\"\\r\\n';\n    formData += 'Content-Type: ' + mimeType + '\\r\\n\\r\\n';\n    for (var i = 0; i &lt; imageData.length; ++i) {\n        formData += String.fromCharCode(imageData[i] &amp; 0xff);\n    }\n    formData += '\\r\\n';\n    formData += '--' + boundary + '\\r\\n';\n    formData += 'Content-Disposition: form-data; name=\"message\"\\r\\n\\r\\n';\n    formData += message + '\\r\\n';\n    formData += '--' + boundary + '--\\r\\n';\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', 'https://graph.facebook.com/me/photos?access_token=' + authToken, true);\n    xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n\n    // Solving problem with sendAsBinary for chrome\n    try {\n        if (typeof XMLHttpRequest.prototype.sendAsBinary == 'undefined') {\n            XMLHttpRequest.prototype.sendAsBinary = function(text) {\n                var data = new ArrayBuffer(text.length);\n                var ui8a = new Uint8Array(data, 0);\n                for (var i = 0; i &lt; text.length; i++) ui8a[i] = (text.charCodeAt(i) &amp; 0xff);\n                this.send(ui8a);\n            }\n        }\n    } catch (e) {}\n    xhr.sendAsBinary(formData);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>Is it possible to upload a file using the Facebook Graph API using javascript, I feel like I'm close.  I'm using the following JavaScript</p>\n\n<pre><code>var params = {};\nparams['message'] = 'PicRolled';\nparams['source'] = '@'+path;\nparams['access_token'] = access_token;\nparams['upload file'] = true;\n\nfunction saveImage() {\n    FB.api('/me/photos', 'post', params, function(response) {\n        if (!response || response.error) {\n            alert(response);\n        } else {\n            alert('Published to stream - you might want to delete it now!');\n        }\n    }); \n}\n</code></pre>\n\n<p>Upon running this I receive the following error...</p>\n\n<pre><code>\"OAuthException\" - \"(#324) Requires upload file\"\n</code></pre>\n\n<p>When I try and research this method all I can find out about is a php method that apears to solve this</p>\n\n<pre><code>$facebook-&gt;setFileUploadSupport(true);\n</code></pre>\n\n<p>However, I am using JavaScript, it looks like this method might be to do with Facebook Graph permissions, but I already have set the permissions user_photos and publish_stream, which I believed are the only ones I should need to perform this operation.</p>\n\n<p>I have seen a couple of unanswered questions regarding this on stackoverflow, hopefully I can explained myself enough. Thanks guys.</p>\n",
            "last_activity_date": 1413818892,
            "question_id": 4999024,
            "score": 32,
            "tags": [
                "javascript",
                "facebook",
                "facebook-graph-api",
                "file-upload"
            ],
            "title": "Facebook Graph API - upload photo using JavaScript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><strong>EDIT: Handlebars now has a built-in way of accomplishing this; see the <a href=\"http://stackoverflow.com/a/17516837/117331\">selected answer</a> above.\nWhen working with plain Mustache, the below still applies.</strong></p>\n\n<p>Mustache can iterate over items in an array. So I'd suggest creating a separate data object formatted in a way Mustache can work with:</p>\n\n<pre><code>var o = {\n  bob : 'For sure',\n  roger: 'Unknown',\n  donkey: 'What an ass'\n},\nmustacheFormattedData = { 'people' : [] };\n\nfor (var prop in o){\n  if (o.hasOwnProperty(prop)){\n    mustacheFormattedData['people'].push({\n      'key' : prop,\n      'value' : o[prop]\n     });\n  }\n}\n</code></pre>\n\n<p>Now, your Mustache template would be something like:</p>\n\n<pre><code>{{#people}}\n  {{key}} : {{value}}\n{{/people}}\n</code></pre>\n\n<p>Check out the \"Non-Empty Lists\" section here: <a href=\"https://github.com/janl/mustache.js\" rel=\"nofollow\">https://github.com/janl/mustache.js</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>It's actually quite easy to implement as a helper:</p>\n\n<pre><code>Handlebars.registerHelper('eachProperty', function(context, options) {\n    var ret = \"\";\n    for(var prop in context)\n    {\n        ret = ret + options.fn({property:prop,value:context[prop]});\n    }\n    return ret;\n});\n</code></pre>\n\n<p>Then using it like so:</p>\n\n<pre><code>{{#eachProperty object}}\n    {{property}}: {{value}}&lt;br/&gt;\n{{/eachProperty }}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>@Amit's answer is good because it will work in both Mustache and Handlebars.</p>\n\n<p>As far as Handlebars-only solutions, I've seen a few and I like the <code>each_with_key</code> block helper at <a href=\"https://gist.github.com/1371586\" rel=\"nofollow\">https://gist.github.com/1371586</a> the best.</p>\n\n<ul>\n<li>It allows you to iterate over object literals without having to restructure them first, and </li>\n<li>It gives you control over what you call the key variable.  With many other solutions you have to be careful about using object keys named <code>'key'</code>, or <code>'property'</code>, etc.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Thanks for Ben's solution, my use case to display only particular fields in order</p>\n\n<p>with object</p>\n\n<p>Code:</p>\n\n<pre><code>    handlebars.registerHelper('eachToDisplayProperty', function(context, toDisplays, options) {\n    var ret = \"\";\n    var toDisplayKeyList = toDisplays.split(\",\");\n    for(var i = 0; i &lt; toDisplayKeyList.length; i++) {\n        toDisplayKey = toDisplayKeyList[i];\n        if(context[toDisplayKey]) {\n            ret = ret + options.fn({\n                property : toDisplayKey,\n                value : context[toDisplayKey]\n            });\n        }\n\n    }\n    return ret;\n});\n</code></pre>\n\n<p>Source object:</p>\n\n<pre><code>   { locationDesc:\"abc\", name:\"ghi\", description:\"def\", four:\"you wont see this\"}\n</code></pre>\n\n<p>Template:</p>\n\n<pre><code>{{#eachToDisplayProperty this \"locationDesc,description,name\"}}\n    &lt;div&gt;\n        {{property}} --- {{value}}\n    &lt;/div&gt;\n    {{/eachToDisplayProperty}}\n</code></pre>\n\n<hr>\n\n<p>Output:</p>\n\n<pre><code>locationDesc --- abc\ndescription --- def\nname --- ghi\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is @Ben's answer updated for use with Ember...note you have to use <code>Ember.get</code> because context is passed in as a String. </p>\n\n<pre><code>Ember.Handlebars.registerHelper('eachProperty', function(context, options) {\n  var ret = \"\";\n  var newContext = Ember.get(this, context);\n  for(var prop in newContext)\n  {\n    if (newContext.hasOwnProperty(prop)) {\n      ret = ret + options.fn({property:prop,value:newContext[prop]});\n    }\n  }\n  return ret;\n});\n</code></pre>\n\n<p>Template:</p>\n\n<pre><code>{{#eachProperty object}}\n  {{key}}: {{value}}&lt;br/&gt;\n{{/eachProperty }}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h2>Built-in support since Handlebars 1.0rc1</h2>\n\n<p>Support for this functionality <a href=\"https://github.com/wycats/handlebars.js/blob/9589ab89492c23e1d201f61617ae2a3bf54a0afc/lib/handlebars/base.js#L80-L86\">has been added</a> to Handlebars.js, so there is no more need for external helpers.</p>\n\n<h2>How to use it</h2>\n\n<p>For arrays:</p>\n\n<pre><code>{{#each myArray}}\n    Index: {{@index}} Value = {{this}}\n{{/each}}\n</code></pre>\n\n<p>For objects:</p>\n\n<pre><code>{{#each myObject}}\n    Key: {{@key}} Value = {{this}}\n{{/each}}\n</code></pre>\n\n<p>Note that only properties passing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\"><code>hasOwnProperty</code></a> test will be enumerated.</p>\n",
                    "is_accepted": true,
                    "score": 146
                },
                {
                    "body": "<p>This is a helper function for mustacheJS, without pre-formatting the data and instead getting it during render.</p>\n\n<pre><code>var data = {\n    valueFromMap: function() {\n        return function(text, render) {\n            // \"this\" will be an object with map key property\n            // text will be color that we have between the mustache-tags\n            // in the template\n            // render is the function that mustache gives us\n\n            // still need to loop since we have no idea what the key is\n            // but there will only be one\n            for ( var key in this) {\n                if (this.hasOwnProperty(key)) {\n                    return render(this[key][text]);\n                }\n            }\n        };\n    },\n\n    list: {\n        blueHorse: {\n            color: 'blue'\n        },\n\n        redHorse: {\n            color: 'red'\n        }\n    }\n};\n</code></pre>\n\n<p>Template:</p>\n\n<pre><code>{{#list}}\n    {{#.}}&lt;span&gt;color: {{#valueFromMap}}color{{/valueFromMap}}&lt;/span&gt; &lt;br/&gt;{{/.}}\n{{/list}}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>color: blue\ncolor: red\n</code></pre>\n\n<p>(order might be random - it's a map)\nThis might be useful if you know the map element that you want. Just watch out for falsy values.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>As the title of question says, is there a mustache/handlebars way of looping through an <strong>object</strong> properties?</p>\n\n<p>So with </p>\n\n<pre><code>var o = {\n  bob : 'For sure',\n  roger: 'Unknown',\n  donkey: 'What an ass'\n}\n</code></pre>\n\n<p>Can I then do something <em>in the template engine</em> that would be equivalent to</p>\n\n<pre><code>for(var prop in o)\n{\n    // with say, prop a variable in the template and value the property value\n}\n</code></pre>\n\n<p>?</p>\n",
            "last_activity_date": 1404896074,
            "question_id": 9058774,
            "score": 76,
            "tags": [
                "javascript",
                "handlebars.js",
                "mustache"
            ],
            "title": "Handlebars/Mustache - Is there a built in way to loop through the properties of an object?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Great question.</p>\n\n<p>There is some confusion around the whole \"put scripts at the bottom of your page\" advice and what problem(s) it attempts to solve. For this question I am not going to talk about whether putting scripts at the bottom of the page affects performance/loadtimes or not. I am only going to talk about whether you need <code>$(document).ready</code> <em>if you also put scripts at the bottom of the page</em>.</p>\n\n<p>I'm assuming you are referencing the DOM in those functions you are immediately invoking in your scripts (anything as simple as <code>document</code> or <code>document.getElementById</code>). I'm also assuming you are asking only about these [DOM-referencing] files. IOW, library scripts or scripts that your DOM-referencing code requires (like jQuery) need to be placed earlier in the page.</p>\n\n<p><strong>To answer your question</strong>: if you include your DOM-referencing scripts at the bottom of the page, No, you do not need <code>$(document).ready</code>. </p>\n\n<p><strong>Explanation</strong>: <em>without</em> the aid of <code>\"onload\"</code>-related implementations like <code>$(document).ready</code> the rule of thumb is: any code that interacts with DOM elements within the page should to be placed/included further down the page than the elements it references. The easiest thing to do is to place that code before the closing <code>&lt;/body&gt;</code>. See <a href=\"http://javascriptant.com/articles/10/qa-on-javascript-execution-onload-techniques\">here</a> and <a href=\"http://javascript.about.com/od/hintsandtips/a/exeorder.htm\">here</a>. It also works around IE's dreaded <a href=\"http://blogs.msdn.com/ie/archive/2008/04/23/what-happened-to-operation-aborted.aspx\">\"Operation aborted\" error</a>.</p>\n\n<p>Having said that, this by no means invalidates the use of <code>$(document).ready</code>. Referencing an object before it has been loaded is [one of] the most common mistakes made when beginning in DOM JavaScript (witnessed it too many times to count). It is jQuery's solution to the problem, and it doesn't require you to have to think about where this script will be included relative to the DOM elements it references. This is a huge win for developers. It's just one less thing they have to think about. </p>\n\n<p>Also, it's often difficult or impractical to move all DOM-referencing scripts to the bottom of the page (for example any script that issues <code>document.write</code> calls have to stay put). Other times, you are using a framework that renders some template or creates pieces of dynamic javascript, within which references functions that need to be included <em>before</em> the js.</p>\n\n<p>Finally, it used to be \"best practice\" to jam all DOM-referencing code into <code>window.onload</code>, however it has been eclipsed by <code>$(document).ready</code> implementations for <a href=\"http://dean.edwards.name/weblog/2005/09/busted/\">well document reasons</a>.</p>\n\n<p>All this adds up to <code>$(document).ready</code> as a far superior, practical and general solution to the problem of referencing DOM elements too early.</p>\n",
                    "is_accepted": true,
                    "score": 95
                }
            ],
            "body": "<p>I am including all of my JS as external files that are loaded at the very bottom of the page. Within these files, I have several methods defined like so, which I call from the ready event:</p>\n\n<pre><code>var SomeNamepsace = {};\n\nSomeNamepsace.firstMethod = function () {\n    // do something\n};\n\nSomeNamepsace.secondMethod = function () {\n    // do something else\n};\n\n$(document).ready(function () {\n    SomeNamepsace.firstMethod();\n    SomeNamepsace.secondMethod();\n});\n</code></pre>\n\n<p>However, when I remove the ready function and call the methods straight-up, everything works just the same, but executes significantly faster\u2014almost a whole second faster on a pretty basic file! Since the document should be loaded at this point (as all the markup comes before the script tags), is there any good reason to still be using the ready event?</p>\n",
            "last_activity_date": 1258131883,
            "question_id": 1438883,
            "score": 71,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "jQuery: Why use document.ready if external JS at bottom of page?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>var methods = [];\nfor (var m in obj) {\n    if (typeof obj[m] == \"function\") {\n        methods.push(m);\n    }\n}\nalert(methods.join(\",\"));\n</code></pre>\n\n<p>This way, you will get all methods that you can call on <code>obj</code>. This includes the methods that it \"inherits\" from its prototype (like <code>getMethods()</code> in java). If you only want to see those methods defined directly by <code>obj</code> you can check with <code>hasOwnProperty</code>:</p>\n\n<pre><code>var methods = [];\nfor (var m in obj) {        \n    if (typeof obj[m] == \"function\" &amp;&amp; obj.hasOwnProperty(m)) {\n        methods.push(m);\n    }\n}\nalert(methods.join(\",\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>The short answer is you can't because <code>Math</code> and <code>Date</code> (off the top of my head, I'm sure there are others) are't normal objects.  To see this, create a simple test script:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.1/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      $(function() {\n        alert(\"Math: \" + Math);\n        alert(\"Math: \" + Math.sqrt);\n        alert(\"Date: \" + Date);\n        alert(\"Array: \" + Array);\n        alert(\"jQuery: \" + jQuery);\n        alert(\"Document: \" + document);\n        alert(\"Document: \" + document.ready);\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You see it presents as an object the same ways document does overall, but when you actually try and see in that object, you see that it's native code and something not exposed the same way for enumeration.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The properties of built-in objects aren't enumerable.  Objects like <code>window</code> and <code>document</code> aren't built-in, they're defined by the browser and most likely enumerable by design.</p>\n\n<p>From <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\">ECMA-262 Edition 3</a>:</p>\n\n<blockquote>\n  <p><strong>Global Object</strong><br>\n  There is a unique global\n  object (15.1), which is created before\n  control enters any execution context.\n  Initially the global object has the\n  following properties:  </p>\n  \n  <p>\u2022 Built-in\n  objects such as Math, String, Date,\n  parseInt, etc. <strong>These have attributes {\n  DontEnum }</strong>.<br>\n  \u2022 Additional host defined\n  properties. This may include a\n  property whose value is the global\n  object itself; for example, in the\n  HTML document object model the window\n  property of the global object is the\n  global object itself.  </p>\n  \n  <p>As control\n  enters execution contexts, and as\n  ECMAScript code is executed,\n  additional properties may be added to\n  the global object and the initial\n  properties may be changed.</p>\n</blockquote>\n\n<p>I should point out that this means those objects aren't enumerable properties of the Global object.  If you look through the rest of the specification document, you will see most of the built-in properties and methods of these objects have the <code>{ DontEnum }</code> attribute set on them.</p>\n\n<hr/>\n\n<p>Since most browsers have Edition 5 implementations now, it's worth mentioning that those browsers offer a method to get <em>all</em> properties of an object, whether enumerable or not.  That method is <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames()</code></a>.  For an example, see <a href=\"http://stackoverflow.com/questions/2257993/how-to-display-all-methods-in-a-javascript-object/2946616#2946616\">Anurag's answer</a>.</p>\n\n<p><hr />\nUpdate: a fellow SO user, CMS, brought an <a href=\"https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug\">IE bug regarding <code>{ DontEnum }</code></a> to my attention.</p>\n\n<blockquote>\n  <p>Instead of checking the DontEnum attribute, [Microsoft] JScript will skip over any property in any object where there is a same-named property in the object's prototype chain that has the attribute DontEnum.</p>\n</blockquote>\n\n<p>In short, beware when naming your object properties.  If there is a built-in prototype property or method with the same name then IE will skip over it when using a <code>for...in</code> loop.</p>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<p>Most modern browser support <code>console.dir(obj)</code>, which will return all the properties of an object that it inherited through its constructor.  See Mozilla's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console.dir\" rel=\"nofollow\">documentation</a> for more info and current browser support.</p>\n\n<p><code>console.dir(Math)\n=&gt; MathConstructor\nE: 2.718281828459045\nLN2: 0.6931471805599453\n...\ntan: function tan() { [native code] }\n__proto__: Object\n</code></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>It's not possible with ES3 as the properties have an internal <code>DontEnum</code> attribute which prevents us from enumerating these properties. ES5, on the other hand, provides property descriptors for controlling the enumeration capabilities of properties so user-defined and native properties can use the same interface and enjoy the same capabilities, which includes being able to see non-enumerable properties programmatically.</p>\n\n<p>The <code>getOwnPropertyNames</code> function can be used to enumerate over all properties of the passed in object, including those that are non-enumerable. Then a simple <code>typeof</code> check can be employed to filter out non-functions. Unfortunately, Chrome is the only browser that it works on currently.</p>\n\n<pre><code>\u200bfunction getAllMethods(object) {\n    return Object.getOwnPropertyNames(object).filter(function(property) {\n        return typeof object[property] == 'function';\n    });\n}\n\nconsole.log(getAllMethods(Math));\n</code></pre>\n\n<p>logs <code>[\"cos\", \"pow\", \"log\", \"tan\", \"sqrt\", \"ceil\", \"asin\", \"abs\", \"max\", \"exp\", \"atan2\", \"random\", \"round\", \"floor\", \"acos\", \"atan\", \"min\", \"sin\"]</code> in no particular order.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>I believe there's a simple historical reason why you can't enumerate \nover methods of built-in objects like Array for instance. Here's why:</p>\n\n<p>Methods are properties of the prototype-object, say Object.prototype.\nThat means that all Object-instances will inherit those methods. That's\nwhy you can use those methods on any object. Say .toString() for instance.</p>\n\n<p>So IF methods were enumerable, and I would iterate over say {a:123}\nwith:   \"for (key in {a:123}) {...}\"  what would happen? How many times \nwould that loop be executed? </p>\n\n<p>It would be iterated once for the single key 'a' in our example. BUT ALSO\nonce for every <em>enumerable</em> property of Object.prototype. So if\nmethods were enumerable (by default), then any loop over any object would loop \nover all its inherited methods as well.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I wanted a way in which I could get all methods available in a Javascript Object like following</p>\n\n<pre><code> alert( show_all_methods( Math ) );\n</code></pre>\n\n<p>should alert abs, acos, asin, atan, atan2, ceil, cos, exp, floor, log, max, min, pow, random,round, sin, sqrt, tan.</p>\n",
            "last_activity_date": 1404842252,
            "question_id": 2257993,
            "score": 73,
            "tags": [
                "javascript"
            ],
            "title": "How to display all methods in a JavaScript object?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>I don't think there's a good \"jQuery \" way to do this, but if you need efficiency, map one of the arrays by a certain key (one of the unique object fields), and then do comparison by looping through the other array and comparing against the map, or associative array, you just built.</p>\n\n<p>If efficiency is not an issue, just compare every object in A to every object in B. As long as |A| and |B| are small, you should be okay.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Well, if you want to compare only the contents of arrays, there's a useful jQuery function <a href=\"http://docs.jquery.com/Utilities/jQuery.inArray\" rel=\"nofollow\">$.inArray()</a></p>\n\n<pre><code>var arr = [11, \"String #1\", 14, \"String #2\"];\nvar arr_true = [\"String #1\", 14, \"String #2\", 11]; // contents are the same as arr\nvar arr_false = [\"String #1\", 14, \"String #2\", 16]; // contents differ\n\nfunction test(arr_1, arr_2) {\n    var equal = arr_1.length == arr_2.length; // if array sizes mismatches, then we assume, that they are not equal\n    if (equal) {\n        $.each(arr_1, function (foo, val) {\n            if (!equal) return false;\n            if ($.inArray(val, arr_2) == -1) {\n                equal = false;\n            } else {\n                equal = true;\n            }\n        });\n    }\n    return equal;\n}\n\nalert('Array contents are the same? ' + test(arr, arr_true)); //- returns true\nalert('Array contents are the same? ' + test(arr, arr_false)); //- returns false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I was also looking for this today and found:\n<a href=\"http://www.breakingpar.com/bkp/home.nsf/0/87256B280015193F87256BFB0077DFFD\">http://www.breakingpar.com/bkp/home.nsf/0/87256B280015193F87256BFB0077DFFD</a></p>\n\n<p>Don't know if that's a good solution though they do mention some performance considerations taken into account.</p>\n\n<p>I like the idea of a jQuery helper method.\n@David I'd rather see your compare method to work like:</p>\n\n<pre><code>jQuery.compare(a, b)\n</code></pre>\n\n<p>I doesn't make sense to me to be doing:</p>\n\n<pre><code>$(a).compare(b)\n</code></pre>\n\n<p>where a and b are arrays. Normally when you <em>$(something)</em> you'd be passing a selector string to work with DOM elements.</p>\n\n<p>Also regarding sorting and 'caching' the sorted arrays:</p>\n\n<ul>\n<li>I don't think sorting once at the start of the method instead of every time through the loop is 'caching'. The sort will still happen every time you call compare(b). That's just semantics, but...</li>\n<li><em>for (var i = 0; t[i]; i++) {</em> ...this loop finishes early if your <strong>t</strong> array contains a false value in it somewhere, so <em>$([1, 2, 3, 4]).compare([1, false, 2, 3])</em> returns <em>true</em>!</li>\n<li>More importantly the array sort() method sorts the array <em>in place</em>, so doing <strong>var b = t.sort()</strong> ...doesn't create a sorted copy of the original array, it sorts the <em>original</em> array and also assigns a <em>reference</em> to it in <strong>b</strong>. I don't think the compare method should have side-effects.</li>\n</ul>\n\n<p>It seems what we need to do is to copy the arrays before working on them. The best answer I could find for how to do that in a jQuery way was by none other than John Resig here on SO! <a href=\"http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-a-javascript-object/122704#122704\">What is the most efficient way to clone a JavaScript object?</a> <em>(see comments on his answer for the array version of the object cloning recipe)</em></p>\n\n<p>In which case I think the code for it would be:</p>\n\n<pre><code>jQuery.extend({\n    compare: function (arrayA, arrayB) {\n        if (arrayA.length != arrayB.length) { return false; }\n        // sort modifies original array\n        // (which are passed by reference to our method!)\n        // so clone the arrays before sorting\n        var a = jQuery.extend(true, [], arrayA);\n        var b = jQuery.extend(true, [], arrayB);\n        a.sort(); \n        b.sort();\n        for (var i = 0, l = a.length; i &lt; l; i++) {\n            if (a[i] !== b[i]) { \n                return false;\n            }\n        }\n        return true;\n    }\n});\n\nvar a = [1, 2, 3];\nvar b = [2, 3, 4];\nvar c = [3, 4, 2];\n\njQuery.compare(a, b);\n// false\n\njQuery.compare(b, c);\n// true\n\n// c is still unsorted [3, 4, 2]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I found this discussion because I needed a way to deep compare arrays and objects. Using the examples here, I came up with the following (broken up into 3 methods for clarity):</p>\n\n<pre><code>jQuery.extend({\n    compare : function (a,b) {\n        var obj_str = '[object Object]',\n            arr_str = '[object Array]',\n            a_type  = Object.prototype.toString.apply(a),\n            b_type  = Object.prototype.toString.apply(b);\n\n            if ( a_type !== b_type) { return false; }\n            else if (a_type === obj_str) {\n                return $.compareObject(a,b);\n            }\n            else if (a_type === arr_str) {\n                return $.compareArray(a,b);\n            }\n            return (a === b);\n        }\n});\n\njQuery.extend({\n    compareArray: function (arrayA, arrayB) {\n        var a,b,i,a_type,b_type;\n        // References to each other?\n        if (arrayA === arrayB) { return true;}\n\n        if (arrayA.length != arrayB.length) { return false; }\n        // sort modifies original array\n        // (which are passed by reference to our method!)\n        // so clone the arrays before sorting\n        a = jQuery.extend(true, [], arrayA);\n        b = jQuery.extend(true, [], arrayB);\n        a.sort(); \n        b.sort();\n        for (i = 0, l = a.length; i &lt; l; i+=1) {\n            a_type = Object.prototype.toString.apply(a[i]);\n            b_type = Object.prototype.toString.apply(b[i]);\n\n            if (a_type !== b_type) {\n                return false;\n            }\n\n            if ($.compare(a[i],b[i]) === false) {\n                return false;\n            }\n        }\n        return true;\n    }\n});\n\njQuery.extend({\n    compareObject : function(objA,objB) {\n\n        var i,a_type,b_type;\n\n        // Compare if they are references to each other \n        if (objA === objB) { return true;}\n\n        if (Object.keys(objA).length !== Object.keys(objB).length) { return false;}\n        for (i in objA) {\n            if (objA.hasOwnProperty(i)) {\n                if (typeof objB[i] === 'undefined') {\n                    return false;\n                }\n                else {\n                    a_type = Object.prototype.toString.apply(objA[i]);\n                    b_type = Object.prototype.toString.apply(objB[i]);\n\n                    if (a_type !== b_type) {\n                        return false; \n                    }\n                }\n            }\n            if ($.compare(objA[i],objB[i]) === false){\n                return false;\n            }\n        }\n        return true;\n    }\n});\n</code></pre>\n\n<p>Testing</p>\n\n<pre><code>var a={a : {a : 1, b: 2}},\n    b={a : {a : 1, b: 2}},\n    c={a : {a : 1, b: 3}},\n    d=[1,2,3],\n    e=[2,1,3];\n\nconsole.debug('a and b = ' + $.compare(a,b)); // a and b = true\nconsole.debug('b and b = ' + $.compare(b,b)); // b and b = true\nconsole.debug('b and c = ' + $.compare(b,c)); // b and c = false\nconsole.debug('c and d = ' + $.compare(c,d)); // c and d = false\nconsole.debug('d and e = ' + $.compare(d,e)); // d and e = true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is an easy way...</p>\n\n<pre><code>$(arr1).not(arr2).length === 0 &amp;&amp; $(arr2).not(arr1).length === 0\n</code></pre>\n\n<p>If the above returns true, both the arrays are same even if the elements are in different order. </p>\n",
                    "is_accepted": true,
                    "score": 196
                },
                {
                    "body": "<p>Try this  </p>\n\n<pre><code>function check(c,d){\n  var a = c, b = d,flg = 0;\n  if(a.length == b.length) \n  { \n     for(var i=0;i&lt;a.length;i++) \n           a[i] != b[i] ? flg++ : 0; \n  } \n  else  \n  { \n     flg = 1; \n  } \n  return flg = 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>The nice one liner from <a href=\"http://stackoverflow.com/a/7726509/1251219\">Sudhakar R</a> as jQuery global method.</p>\n\n<pre><code>/**\n * Compare two arrays if they are equal even if they have different order.\n *\n * @link http://stackoverflow.com/a/7726509\n */\njQuery.extend({\n  /**\n   * @param {array} a\n   *   First array to compare.\n   * @param {array} b\n   *   Second array to compare.\n   * @return {boolean}\n   *   True if both arrays are equal, otherwise false.\n   */\n  arrayCompare: function (a, b) {\n    return $(a).not(b).get().length === 0 &amp;&amp; $(b).not(a).get().length === 0;\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My approach was quite different - I flattened out both collections using JSON.stringify and used a normal string compare to check for equality.</p>\n\n<p>I.e.</p>\n\n<pre><code>var arr1 = [\n             {Col: 'a', Val: 1}, \n             {Col: 'b', Val: 2}, \n             {Col: 'c', Val: 3}\n           ];\n\nvar arr2 = [\n             {Col: 'x', Val: 24}, \n             {Col: 'y', Val: 25}, \n             {Col: 'z', Val: 26}\n           ];\n\nif(JSON.stringify(arr1) == JSON.stringify(arr2)){\n    alert('Collections are equal');\n}else{\n    alert('Collections are not equal');\n}\n</code></pre>\n\n<p>NB: Please note that his method assumes that both Collections are sorted in a similar fashion, if not, it would give you a false result!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I also found this when looking to do some array comparisons with jQuery. In my case I had strings which I knew to be arrays:</p>\n\n<pre><code>var needle = 'apple orange';\nvar haystack = 'kiwi orange banana apple plum';\n</code></pre>\n\n<p>But I cared if it was a complete match or only a partial match, so I used something like the following, based off of Sudhakar R's answer:</p>\n\n<pre><code>function compareStrings( needle, haystack ){\n  var needleArr = needle.split(\" \"),\n    haystackArr = haystack.split(\" \"),\n    compare = $(haystackArr).not(needleArr).get().length;\n\n  if( compare == 0 ){\n    return 'all';\n  } else if ( compare == haystackArr.length  ) {\n    return 'none';\n  } else {\n    return 'partial';\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In my case compared arrays contain only <em>numbers</em> and <em>strings</em>. This solution worked for me:</p>\n\n<pre><code>function are_arrs_equal(arr1, arr2){\n    return arr1.sort().toString() === arr2.sort().toString()\n}\n</code></pre>\n\n<p>Let's test it!</p>\n\n<pre><code>arr1 = [1, 2, 3, 'nik']\narr2 = ['nik', 3, 1, 2]\narr3 = [1, 2, 5]\n\nconsole.log (are_arrs_equal(arr1, arr2)) //true\nconsole.log (are_arrs_equal(arr1, arr3)) //false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Change array to string and compare</p>\n\n<pre><code>var arr = [1,2,3], \narr2 = [1,2,3]; \nconsole.log(arr.toString() === arr2.toString());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Convert both array to string and compare</p>\n\n<pre><code>if (JSON.stringify(array1) == JSON.stringify(array2))\n{\n    // your code here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The top post is only an hack. Official the .not() method is not intended to be for normal arrays: <a href=\"http://api.jquery.com/not/\" rel=\"nofollow\">http://api.jquery.com/not/</a></p>\n\n<p><a href=\"http://forum.jquery.com/topic/what-is-the-equivalent-method-for-not-for-arrays\" rel=\"nofollow\">http://forum.jquery.com/topic/what-is-the-equivalent-method-for-not-for-arrays</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have two arrays of JavaScript Objects that I'd like to compare to see if they are the same. The objects may not (and most likely will not) be in the same order in each array. Each array shouldn't have any more than 10 objects. I thought jQuery might have an elegant solution to this problem, but I wasn't able to find much online.</p>\n\n<p>I know that a brute nested <code>$.each(array, function(){})</code> solution could work, but is there any built in function that I'm not aware of?</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1423840587,
            "question_id": 1773069,
            "score": 53,
            "tags": [
                "javascript",
                "jquery",
                "arrays",
                "object",
                "compare"
            ],
            "title": "Using jQuery to compare two arrays of Javascript objects"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Normally, it's the value property</p>\n\n<pre><code>testArea.value\n</code></pre>\n\n<p>Or is there something I'm missing in what you need?</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Why would you want to convert key strokes to text? Add a button that sends the text inside the textarea to the server when clicked. You can get the text using the value attribute as the poster before has pointed out, or using jQuery's API:</p>\n\n<pre><code>$('input#mybutton').click(function() {\n    var text = $('textarea#mytextarea').val();\n    //send to server and process response\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 399
                },
                {
                    "body": "<p>I have figured out that I can convert the keyCode of the event to a character by using the following function:</p>\n\n<pre><code>var char = String.fromCharCode(v_code);\n</code></pre>\n\n<p>From there I would then append the character to a string, and when the enter key is pressed send the string to the server. I'm sorry if my question seemed somewhat cryptic, and the title meaning something almost completely off-topic, it's early in the morning and I haven't had breakfast yet ;).</p>\n\n<p>Thanks for all your help guys.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You should have a div that just contains the console messages, that is, previous commands and their output. And underneath put an input or textarea that just holds the command you are typing.</p>\n\n<pre><code>-------------------------------\n| consle output ...           |\n| more output                 |\n| prevous commands and data   |\n-------------------------------\n&gt; This is an input box.\n</code></pre>\n\n<p>That way you just send the value of the input box to the server for processing, and append the result to the console messages div.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Methinks the word \"console\" is causing the confusion.</p>\n\n<p>If you want to emulate an old-style full/half duplex console, you'd use something like this:</p>\n\n<pre><code>$('console').keyup(function(event){\n    $.get(\"url\", { keyCode: event.which }, ... );\n    return true;\n});\n</code></pre>\n\n<p>event.which has the key that was pressed. For backspace handling, event.which === 8.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Where it is often the text function you use (e.g. in divs etc) then for text area it is val</p>\n\n<p>get:</p>\n\n<pre><code>$('#myTextBox').val();\n</code></pre>\n\n<p>set:</p>\n\n<pre><code>$('#myTextBox').val('new value');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Recently I have started playing with jQuery, and have been following a couple of tutorials. Now I feel slightly competent with using it (it's pretty easy), and I thought it would be cool if I were able to make a 'console' on my webpage (as in, you press the ` key like you do in <a href=\"http://en.wiktionary.org/wiki/first-person_shooter\">FPS</a> games, etc.), and then have it Ajax itself back to the server in-order to do stuff.</p>\n\n<p>I originally thought the best way would be to just get the text inside the textarea, and then split it, or should I use the keyup event, convert the keycode returned to an ASCII character, append the character to a string and send the string to the server (then empty the string).</p>\n\n<p>I couldn't find any information on getting text from a textarea, all I got was keyup information. Also, how can I convert the keycode returned to an ASCII character?</p>\n",
            "last_activity_date": 1423751287,
            "question_id": 144810,
            "score": 239,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "jQuery get textarea text"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I've used <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\">decodeURIComponent()</a> too.</p>\n",
                    "is_accepted": true,
                    "score": 162
                },
                {
                    "body": "<p>Here is a complete function (taken from <a href=\"http://phpjs.org/functions/urldecode:572\">PHPJS</a>):</p>\n\n<pre><code>function urldecode(str) {\n   return decodeURIComponent((str+'').replace(/\\+/g, '%20'));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 162
                },
                {
                    "body": "<pre><code>decodeURIComponent(mystring);\n</code></pre>\n\n<p>you can get passed parameters by using this bit of code:</p>\n\n<pre><code>//parse URL to get values: var i = getUrlVars()[\"i\"];\nfunction getUrlVars() {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for (var i = 0; i &lt; hashes.length; i++) {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>//How decodeURIComponent Works\n\nfunction proURIDecoder(val)\n{\n  val=val.replace(/\\+/g, '%20');\n  var str=val.split(\"%\");\n  var cval=str[0];\n  for (var i=1;i&lt;str.length;i++)\n  {\n    cval+=String.fromCharCode(parseInt(str[i].substring(0,2),16))+str[i].substring(2);\n  }\n\n  return cval;\n}\n\ndocument.write(proURIDecoder(window.location.href));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Use this</p>\n\n<pre><code>unescape(str);\n</code></pre>\n\n<p>I'm not a great JS programmer, tried all, and this worked awesome!</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Url Decoder Plugin for jQuery - <a href=\"http://urldecoderonline.com/\" rel=\"nofollow\">http://urldecoderonline.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are responsible for encoding the data in PHP using urlencode, PHP's rawurlencode works with JavaScript's decodeURIComponent without needing to replace the + character.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What's the best JavaScript URL decode utility?  Encoding would be nice too and working well with jQuery is an added bonus.</p>\n",
            "last_activity_date": 1398789559,
            "question_id": 4292914,
            "score": 114,
            "tags": [
                "javascript",
                "jquery",
                "urlencode",
                "urldecode"
            ],
            "title": "JavaScript URL Decode function"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Use <code>setTimeout()</code> instead.  The callback would then be responsible for firing the next timeout, at which point you can increase or otherwise manipulate the timing.</p>\n\n<h2>EDIT</h2>\n\n<p>Here's a generic function you can use to apply a \"decelerating\" timeout for ANY function call.</p>\n\n<pre><code>function setDeceleratingTimeout( callback, factor, times )\n{\n  var internalCallback = function( t, counter )\n  {\n    return function()\n    {\n      if ( --t &gt; 0 )\n      {\n        window.setTimeout( internalCallback, ++counter * factor );\n        callback();\n      }\n    }\n  }( times, 0 );\n\n  window.setTimeout( internalCallback, factor );\n};\n\n// console.log() requires firebug    \nsetDeceleratingTimeout( function(){ console.log( 'hi' );}, 10, 10 );\nsetDeceleratingTimeout( function(){ console.log( 'bye' );}, 100, 10 );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>I like this question - inspired a little timer object in me:</p>\n\n<pre><code>window.setVariableInterval = function(callbackFunc, timing) {\n  var variableInterval = {\n    interval: timing,\n    callback: callbackFunc,\n    stopped: false,\n    runLoop: function() {\n      if (variableInterval.stopped) return;\n      var result = variableInterval.callback.call(variableInterval);\n      if (typeof result == 'number')\n      {\n        if (result === 0) return;\n        variableInterval.interval = result;\n      }\n      variableInterval.loop();\n    },\n    stop: function() {\n      this.stopped = true;\n      window.clearTimeout(this.timeout);\n    },\n    start: function() {\n      this.stopped = false;\n      return this.loop();\n    },\n    loop: function() {\n      this.timeout = window.setTimeout(this.runLoop, this.interval);\n      return this;\n    }\n  };\n\n  return variableInterval.start();\n};\n</code></pre>\n\n<p>Example use</p>\n\n<pre><code>var vi = setVariableInterval(function() {\n  // this is the variableInterval - so we can change/get the interval here:\n  var interval = this.interval;\n\n  // print it for the hell of it\n  console.log(interval);\n\n  // we can stop ourselves.\n  if (interval&gt;4000) this.stop();\n\n  // we could return a new interval after doing something\n  return interval + 100;\n}, 100);  \n\n// we can change the interval down here too\nsetTimeout(function() {\n  vi.interval = 3500;\n}, 1000);\n\n// or tell it to start back up in a minute\nsetTimeout(function() {\n  vi.interval = 100;\n  vi.start();\n}, 60000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>A much simpler way would be to have an <code>if</code> statement in the refreshed function and a control to execute your command at regular time intervals . In the following example, I run an alert every 2 seconds and the interval (<code>intrv</code>) can be changed dynamically...</p>\n\n<pre><code>var i=1;\nvar intrv=2; // &lt;&lt; control this variable\n\nvar refreshId = setInterval(function() {\n  if(!(i%intrv)) {\n    alert('run!');\n  }\n  else {\n   //do nothing\n  }\n  i++;\n}, 1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You could use an anonymous function: </p>\n\n<pre><code>var counter = 10;\nvar myFunction = function(){\n    clearInterval(interval);\n    counter *= 10;\n    interval = setInterval(myFunction, counter);\n}\nvar interval = setInterval(myFunction, counter);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<pre><code>var counter = 15;\nvar interval = setTimeout(function(){\n    // your interval code here\n    window.counter = dynamicValue;\n    interval();\n}, counter);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the same question as the original poster, did this as a solution. Not sure how efficient this is ....</p>\n\n<pre><code>interval = 5000; // initial condition\nvar run = setInterval(request , interval); // start setInterval as \"run\"\n\n    function request() { \n\n        console.log(interval); // firebug or chrome log\n        clearInterval(run); // stop the setInterval()\n\n         // dynamically change the run interval\n        if(interval&gt;200 ){\n          interval = interval*.8;\n        }else{\n          interval = interval*1.2;\n        }\n\n        run = setInterval(request, interval); // start the setInterval()\n\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I couldn't synchronize and change the speed my setIntervals too and I was about to post a question. But I think I've found a way. It should certainly be improved because I'm a beginner. So, I'd gladly read your comments/remarks about this.</p>\n\n<pre><code>&lt;body onload=\"foo()\"&gt;\n&lt;div id=\"count1\"&gt;0&lt;/div&gt;\n&lt;div id=\"count2\"&gt;2nd counter is stopped&lt;/div&gt;\n&lt;button onclick=\"speed0()\"&gt;pause&lt;/button&gt;\n&lt;button onclick=\"speedx(1)\"&gt;normal speed&lt;/button&gt;\n&lt;button onclick=\"speedx(2)\"&gt;speed x2&lt;/button&gt;\n&lt;button onclick=\"speedx(4)\"&gt;speed x4&lt;/button&gt;\n&lt;button onclick=\"startTimer2()\"&gt;Start second timer&lt;/button&gt;\n&lt;/body&gt;\n&lt;script&gt;\nvar count1 = 0,\n    count2 = 0,\n    greenlight = new Boolean(0), //blocks 2nd counter\n    speed = 1000,   //1second\n    countingSpeed;\nfunction foo(){\n    countingSpeed = setInterval(function(){\n        counter1();\n        counter2();\n    },speed);\n}\nfunction counter1(){\n    count1++;\n    document.getElementById(\"count1\").innerHTML=count1;\n}\nfunction counter2(){\n    if (greenlight != false) {\n        count2++;\n        document.getElementById(\"count2\").innerHTML=count2;\n    }\n}\nfunction startTimer2(){\n    //while the button hasn't been clicked, greenlight boolean is false\n    //thus, the 2nd timer is blocked\n    greenlight = true;\n    counter2();\n    //counter2() is greenlighted\n}\n\n//these functions modify the speed of the counters\nfunction speed0(){\n    clearInterval(countingSpeed);\n}\nfunction speedx(a){\n    clearInterval(countingSpeed);\n    speed=1000/a;\n    foo();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>If you want the counters to begin to increase once the page is loaded, put <code>counter1()</code> and <code>counter2()</code> in <code>foo()</code> before <code>countingSpeed</code> is called. Otherwise, it takes <code>speed</code> milliseconds before execution.\nEDIT : Shorter answer.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have written a javascript function that uses setInterval to manipulate a string every tenth of a second for a certain number of iterations.</p>\n\n<pre><code>function timer() {\n    var section = document.getElementById('txt').value;\n    var len = section.length;\n    var rands = new Array();\n\n    for (i=0; i&lt;len; i++) {\n        rands.push(Math.floor(Math.random()*len));\n    };\n\n    var counter = 0\n    var interval = setInterval(function() {\n        var letters = section.split('');\n        for (j=0; j &lt; len; j++) {\n            if (counter &lt; rands[j]) {\n                letters[j] = Math.floor(Math.random()*9);\n            };\n        };\n        document.getElementById('txt').value = letters.join('');\n        counter++\n\n        if (counter &gt; rands.max()) {\n            clearInterval(interval);\n        }\n    }, 100);\n};\n</code></pre>\n\n<p>You can get an idea of what the purpose is here:</p>\n\n<p><a href=\"http://clients.okay-plus.com/datherrien/randomInterval.html\">http://clients.okay-plus.com/datherrien/randomInterval.html</a></p>\n\n<p>Instead of having the interval set at a specific number, I would like to update it every time it runs, based on a counter.  So instead of:</p>\n\n<pre><code>var interval = setInterval(function() { ... }, 100);\n</code></pre>\n\n<p>It would be something like:</p>\n\n<pre><code>var interval = setInterval(function() { ... }, 10*counter);\n</code></pre>\n\n<p>Unfortunately, that did not work.  It seemed like \"10*counter\" equals 0.</p>\n\n<p>So, how can I adjust the interval every time the anonymous function runs?</p>\n",
            "last_activity_date": 1394410296,
            "question_id": 1280263,
            "score": 40,
            "tags": [
                "javascript",
                "timer",
                "setinterval"
            ],
            "title": "Changing the interval of SetInterval while it&#39;s running"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You can get the image data in the form of a data: url, this only works in Firefox and Opera so far though.</p>\n\n<p><a href=\"http://cow.neondragon.net/index.php/681-Canvas-Todataurl\" rel=\"nofollow\">http://cow.neondragon.net/index.php/681-Canvas-Todataurl</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You don't need a file input, just get the data with ctx.getImageData() and post it to the server with Ajax. </p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#getImageData%28%29\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D#getImageData%28%29</a></p>\n\n<p>But I have to tell you that you won't be able to get the image data in IE, even with ExCanvas.</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>FWIW, this is  how I got it working.</p>\n\n<p>My server is in google app engine. I send canvas.toDataURL()'s output as part of post request using jQuery.post. The data URL is base64 encoded image data. So on server I decode it and convert it to image</p>\n\n<pre><code>import re \nimport base64\nclass TnUploadHandler(webapp.RequestHandler):\n    dataUrlPattern = re.compile('data:image/(png|jpeg);base64,(.*)$')\n    def post(self):\n        uid = self.request.get('uid')\n        img = self.request.get('img')\n\n        imgb64 = self.dataUrlPattern.match(img).group(2)\n        if imgb64 is not None and len(imgb64) &gt; 0:\n            thumbnail = Thumbnail(\n                    uid = uid, img = db.Blob(base64.b64decode(imgb64)))\n            thumbnail.put()\n</code></pre>\n\n<p>From client I send the data like this:</p>\n\n<pre><code>$.post('/upload',\n        {\n            uid : uid,\n            img : canvas.toDataURL('image/jpeg')\n        },\n        function(data) {});\n</code></pre>\n\n<p>This may not be the best way to do it, but it works.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Here is a demo of an online signature app that I wrote last year <a href=\"http://www.demoagent.com/canvas_demo/index.html\" rel=\"nofollow\">Canvas Signature Demo</a>. This has the advantage of posting only the vector data to the server. With all of the path info, you could also apply smoothing algorithms or scale it as needed before persisting.</p>\n\n<pre><code>&lt;canvas id=\"signature\" width=\"300\" height=\"100\"&gt;&lt;/canvas&gt;\n&lt;form method=\"post\" id=\"signature_form\" action=\"signing.aspx\"&gt;\n&lt;input type=\"hidden\" name=\"paths\" id=\"paths\"/&gt;\n    &lt;p&gt;&lt;label&gt;Cover #&lt;/label&gt; &lt;input type=\"text\" id=\"covernumber\" name=\"covernumber\"/&gt;\n    &lt;input type=\"submit\" id=\"save\" value=\"Save\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I store the path data into a hidden field and post that to the server. </p>\n\n<p><a href=\"http://www.demoagent.com/canvas_demo/signature.js\" rel=\"nofollow\">signature.js</a> Core logic below:</p>\n\n<pre><code>mouseDown: function(event) {\n    var point = this.getRelativePoint(event);\n    this.paths.push( [ point ] ); \n    this.ctx.fillRect(point.x,point.y,1,1);\n    this.penDown = true;\n    this.updateField();\n},\nmouseUp: function(event) {\n    this.penDown = false;\n    this.ctx.closePath();\n    if ( Prototype.Browser.IE &amp;&amp; event.srcElement.tagName != \"INPUT\" ) {\n        var ver = getInternetExplorerVersion();\n        if ( ver &gt;= 8 &amp;&amp; ver &lt; 9 &amp;&amp; document.selection ) {\n            document.selection.empty();\n        }\n    }\n},\nmouseMove: function(event) {\n    if ( this.penDown ) {\n        var lastPath = this.paths[ this.paths.length - 1 ];\n        var lastPoint = lastPath[ lastPath.length - 1 ];\n        var point = this.getRelativePoint(event);\n        lastPath.push( point );\n        this.ctx.strokeStyle = \"#000000\";\n        this.ctx.beginPath();\n        this.ctx.moveTo(lastPoint.x,lastPoint.y);\n        this.ctx.lineTo(point.x, point.y);\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.updateField();\n    }\n},\nupdateField: function() {\n    if ( this.field ) {\n        this.field.value = this.paths.toJSON();\n    }\n}\n</code></pre>\n\n<p>Here is my relevant server side .Net code (C#).</p>\n\n<pre><code>if ( Request(\"paths\") ) {\n    var objBitmap : Bitmap = new Bitmap(300, 100);\n    var objGraphics : Graphics = Graphics.FromImage(objBitmap);\n    objGraphics.Clear(Color.Transparent);\n    objGraphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;\n\n    var paths:Array = eval(Request(\"paths\")) || [];\n    var p : int;\n    var q : int;\n    var path : Array;\n\n    for ( p = 0; p&lt; paths.length; p++ ) {\n        var path = paths[p];\n        if ( path.length == 1 ) {\n            objGraphics.DrawRectangle(new Pen(Color.Black), path[0].x, path[0].y, 1, 1);\n        } else {\n          for ( q = 1; q&lt;path.length; q++ ) {\n              var prev = path[q-1];\n              var curr = path[q];\n              objGraphics.DrawLine(new Pen(Color.Black), parseInt(prev.x),parseInt(prev.y),parseInt(curr.x),parseInt(curr.y));\n          }\n        }\n    }\n    objBitmap.Save(\"C:\\\\temp\\\\\" + Request(\"covernumber\") + \".png\", ImageFormat.Png);\n    objBitmap.Dispose();\n    objGraphics.Dispose();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is how I solved this. Posting the image as base64 array using JavaScript and then decoding and saving it as a image using PHP.</p>\n\n<p>Client side (JavaScript):</p>\n\n<pre><code>$.post('/ajax/uploadthumbnail',\n    {\n        id : id,\n        img : canvas.toDataURL(\"image/png\")\n    }, function(data) {\n        console.log(data);\n    });\n</code></pre>\n\n<p>Server side (PHP):</p>\n\n<pre><code>$img = $_POST['img'];\n$img = str_replace('data:image/png;base64,', '', $img);\n$img = str_replace(' ', '+', $img);\n$data = base64_decode($img);\n$file = $_SERVER['DOCUMENT_ROOT'] . '/images/some_name.png';\nfile_put_contents($file, $data);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to upload the canvas image data to the server (database) on the fly, i.e., I need to create a form and with an input=file, and post the image data without any user interaction.</p>\n",
            "last_activity_date": 1423058360,
            "question_id": 1590965,
            "score": 29,
            "tags": [
                "javascript",
                "html",
                "canvas"
            ],
            "title": "Uploading &#39;canvas&#39; image data to the server"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Set the <code>g</code> modifier for a global match:</p>\n\n<pre><code>/\u2026/g\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You need to use the 'g' switch for a global search</p>\n\n<pre><code>var result = mystring.match(/(&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/g)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>I would suggest an alternative regex, using sub-groups to capture name and value of the parameters individually:</p>\n\n<pre><code>function getUrlParams(url) {\n  var re = /(?:\\?|&amp;(?:amp;)?)([^=&amp;#]+)(?:=?([^&amp;#]*))/g,\n      match, params = {},\n      decode = function (s) {return decodeURIComponent(s.replace(/\\+/g, \" \"));};\n\n  if (typeof url == \"undefined\") url = document.location.href;\n\n  while (match = re.exec(url)) {\n    params[decode(match[1])] = decode(match[2]);\n  }\n  return params;\n}\n\nvar result = getUrlParams(\"http://maps.google.de/maps?f=q&amp;source=s_q&amp;hl=de&amp;geocode=&amp;q=Frankfurt+am+Main&amp;sll=50.106047,8.679886&amp;sspn=0.370369,0.833588&amp;ie=UTF8&amp;ll=50.116616,8.680573&amp;spn=0.35972,0.833588&amp;z=11&amp;iwloc=addr\");\n</code></pre>\n\n<p><code>result</code> is an object:</p>\n\n<pre>\n{\n  f: \"q\"\n  geocode: \"\"\n  hl: \"de\"\n  ie: \"UTF8\"\n  iwloc: \"addr\"\n  ll: \"50.116616,8.680573\"\n  q: \"Frankfurt am Main\"\n  sll: \"50.106047,8.679886\"\n  source: \"s_q\"\n  spn: \"0.35972,0.833588\"\n  sspn: \"0.370369,0.833588\"\n  z: \"11\"\n}\n</pre>\n\n<p>The regex breaks down as follows:</p>\n\n<pre>\n(?:            # non-capturing group\n  \\?|&         #   \"?\" or \"&\"\n  (?:amp;)?    #   (allow \"&amp;amp;\", for wrongly HTML-encoded URLs)\n)              # end non-capturing group\n(              # group 1\n  [^=&#]+      #   any character except \"=\", \"&\" or \"#\"; at least once\n)              # end group 1 - this will be the parameter's name\n(?:            # non-capturing group\n  =?           #   an \"=\", optional\n  (            #   group 2\n    [^&#]*     #     any character except \"&\" or \"#\"; any number of times\n  )            #   end group 2 - this will be the parameter's value\n)              # end non-capturing group\n</pre>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p>For capturing groups, I'm used to using <code>preg_match_all</code> in PHP and I've tried to replicate it's functionality here:</p>\n\n<pre><code>&lt;script&gt;\n\n// Return all pattern matches with captured groups\nRegExp.prototype.execAll = function(string) {\n    var match = null;\n    var matches = new Array();\n    while (match = this.exec(string)) {\n        var matchArray = [];\n        for (i in match) {\n            if (parseInt(i) == i) {\n                matchArray.push(match[i]);\n            }\n        }\n        matches.push(matchArray);\n    }\n    return matches;\n}\n\n// Example\nvar someTxt = 'abc123 def456 ghi890';\nvar results = /[a-z]+(\\d+)/g.execAll(someTxt);\n\n// Output\n[[\"abc123\", \"123\"],\n [\"def456\", \"456\"],\n [\"ghi890\", \"890\"]]\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Well... I had a similar problem...\nI want an incremental / step search with RegExp \n(eg: start search... do some processing... continue search until last match)</p>\n\n<p>After lots of internet search... like always (this is turning an habit now)\nI end up in StackOverflow and found the answer...</p>\n\n<p>Whats is not referred and matters to mention is \"<code>lastIndex</code>\"\nI now understand why the RegExp object implements the \"<code>lastIndex</code>\" property</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To capture several parameters using the same name, I modified the while loop in Tomalak's method like this:</p>\n\n<pre><code>  while (match = re.exec(url)) {\n    var pName = decode(match[1]);\n    var pValue = decode(match[2]);\n    params[pName] ? params[pName].push(pValue) : params[pName] = [pValue];\n  }\n</code></pre>\n\n<p>input: <code>?firstname=george&amp;lastname=bush&amp;firstname=bill&amp;lastname=clinton</code> </p>\n\n<p>returns: <code>{firstname : [\"george\", \"bill\"], lastname : [\"bush\", \"clinton\"]}</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If someone (like me) needs Tomalak's method with array support (ie. multiple select), here it is:</p>\n\n<pre><code>function getUrlParams(url) {\n  var re = /(?:\\?|&amp;(?:amp;)?)([^=&amp;#]+)(?:=?([^&amp;#]*))/g,\n      match, params = {},\n      decode = function (s) {return decodeURIComponent(s.replace(/\\+/g, \" \"));};\n\n  if (typeof url == \"undefined\") url = document.location.href;\n\n  while (match = re.exec(url)) {\n    if( params[decode(match[1])] ) {\n        if( typeof params[decode(match[1])] != 'object' ) {\n            params[decode(match[1])] = new Array( params[decode(match[1])], decode(match[2]) );\n        } else {\n            params[decode(match[1])].push(decode(match[2]));\n        }\n    }\n    else\n        params[decode(match[1])] = decode(match[2]);\n  }\n  return params;\n}\nvar urlParams = getUrlParams(location.search);\n</code></pre>\n\n<p>input <code>?my=1&amp;my=2&amp;my=things</code></p>\n\n<p>result <code>1,2,things</code> (earlier returned only: things)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For completeness, JavaScript has this built in, except it's called <code>replace</code>.</p>\n\n<pre><code>var data = {};\nvar getKeyValue = function(a,b,c,d) { data[c] = d; };\nmystring.replace(/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/g, getKeyValue);\n</code></pre>\n\n<p>done. <code>a</code> is the full pattern match, <code>b</code> and on are capture groups, with <code>b</code> being group 1, <code>c</code> is group 2, etc.</p>\n\n<p>So rather than writing complicated parsing functions, just remember that \"matchAll\" in JavaScript is \"replace\" with a replacement handler function instead of a replacement string.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I am trying to parse url-encoded strings that are made up of key=value pairs separated by either <code>&amp;</code> or <code>&amp;amp;</code>. </p>\n\n<p>The following will only match the first occurrence, breaking apart the keys and values into separate result elements:</p>\n\n<pre><code>var result = mystring.match(/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/)\n</code></pre>\n\n<p>The results for the string '1111342=Adam%20Franco&amp;348572=Bob%20Jones' would be:</p>\n\n<pre><code>['1111342', 'Adam%20Franco']\n</code></pre>\n\n<p>Using the global flag, 'g', will match all occurrences, but only return the fully matched sub-strings, not the separated keys and values:</p>\n\n<pre><code>var result = mystring.match(/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/g)\n</code></pre>\n\n<p>The results for the string '1111342=Adam%20Franco&amp;348572=Bob%20Jones' would be:</p>\n\n<pre><code>['1111342=Adam%20Franco', '&amp;348572=Bob%20Jones']\n</code></pre>\n\n<p>While I could split the string on <code>&amp;</code> and break apart each key/value pair individually, is there any way using JavaScript's regular expression support to match multiple occurrences of the pattern <code>/(?:&amp;|&amp;amp;)?([^=]+)=([^&amp;]+)/</code> similar to PHP's <code>preg_match_all()</code> function?</p>\n\n<p>I'm aiming for some way to get results with the sub-matches separated like:</p>\n\n<pre><code>[['1111342', '348572'], ['Adam%20Franco', 'Bob%20Jones']]\n</code></pre>\n\n<p>or </p>\n\n<pre><code>[['1111342', 'Adam%20Franco'], ['348572', 'Bob%20Jones']]\n</code></pre>\n",
            "last_activity_date": 1392146615,
            "question_id": 520611,
            "score": 71,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "How can I match multiple occurrences with a regex in JavaScript similar to PHP&#39;s preg_match_all()?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p><strong>EDIT</strong></p>\n\n<pre><code>var utcDate = new Date(incomingUTCepoch);\nvar date = new Date();\ndate.setUTCDate(utcDate.getDate());\ndate.setUTCHours(utcDate.getHours());\ndate.setUTCMonth(utcDate.getMonth());\ndate.setUTCMinutes(utcDate.getMinutes());\ndate.setUTCSeconds(utcDate.getSeconds());\ndate.setUTCMilliseconds(utcDate.getMilliseconds());\n</code></pre>\n\n<p><strong>EDIT</strong> fixed</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Are you just asking to convert a UTC string to a \"local\" string?  You could do:</p>\n\n<pre><code>var utc_string = '2011-09-05 20:05:15';\nvar local_string = (function(dtstr) {\n    var t0 = new Date(dtstr);\n    var t1 = Date.parse(t0.toUTCString().replace('GMT', ''));\n    var t2 = (2 * t0) - t1;\n    return new Date(t2).toString();\n})(utc_string);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@Amjad, good idea, but implemented poorly. Try</p>\n\n<pre><code>Date.prototype.setUTCTime = function(UTCTimestamp) {\n    var UTCDate = new Date(UTCTimestamp);\n    this.setUTCFullYear(UTCDate.getFullYear(), UTCDate.getMonth(), UTCDate.getDate());\n    this.setUTCHours(UTCDate.getHours(), UTCDate.getMinutes(), UTCDate.getSeconds(), UTCDate.getMilliseconds());\n    return this.getTime();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think I have a simpler solution -- set the initial date to the epoch and add UTC units. Say you have a UTC epoch var stored in seconds. How about <code>1234567890</code>. To convert that to a proper date in the local time zone:</p>\n\n<pre><code>var utcSeconds = 1234567890;\nvar d = new Date(0); // The 0 there is the key, which sets the date to the epoch\nd.setUTCSeconds(utcSeconds);\n</code></pre>\n\n<p><code>d</code> is now a date (in my time zone) set to <code>Fri Feb 13 2009 18:31:30 GMT-0500 (EST)</code></p>\n",
                    "is_accepted": true,
                    "score": 119
                },
                {
                    "body": "<pre><code> function ToLocalDate (inDate) {\n    var date = new Date();\n    date.setTime(inDate.valueOf() - 60000 * inDate.getTimezoneOffset());\n    return date;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Epoch time is in <em>seconds</em> from Jan. 1, 1970. <code>date.getTime()</code> returns <em>milliseconds</em> from Jan. 1, 1970, so.. if you have an epoch timestamp, convert it to a javascript timestamp by multiplying by 1000.</p>\n\n<pre><code>   function epochToJsDate(ts){\n        // ts = epoch timestamp\n        // returns date obj\n        return new Date(ts*1000);\n   }\n\n   function jsDateToEpoch(d){\n        // d = javascript date obj\n        // returns epoch timestamp\n        return (d.getTime()-d.getMilliseconds())/1000;\n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>And just for the logs, I did this using <a href=\"http://momentjs.com/docs/#/manipulating/local/\">Moment.js</a> library, which I was using for formatting anyway.</p>\n\n<pre><code>moment.utc(1234567890000).local()\n&gt;Fri Feb 13 2009 19:01:30 GMT-0430 (VET)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>It's easy, <code>new Date()</code> just takes milliseconds, e.g. </p>\n\n<pre><code>new Date(1394104654000)\n&gt; Thu Mar 06 2014 06:17:34 GMT-0500 (EST)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>I have been fighting with this for a bit now. I'm trying to convert epoch to a date object. The epoch is sent to me in UTC. Whenever you pass <code>new Date()</code> an epoch, it assumes it's local epoch. I tried creating a UTC object, then using setTime() to adjust it to the proper epoch, but the only method that seems useful is <code>toUTCString()</code> and strings don't help me. If I pass that string into a new date, it should notice that it's UTC, but it doesn't</p>\n\n<pre><code>new Date( new Date().toUTCString() ).toLocaleString()\n</code></pre>\n\n<p>My next attempt was to try to get the difference between local current epoch and utc current epoch, but I wasn't able to get that either.</p>\n\n<pre><code>new Date( new Date().toUTCString() ).getTime() - new Date().getTime()\n</code></pre>\n\n<p>It's only giving me very small differences, under 1000, which is in milliseconds.</p>\n\n<p>Any suggestions?</p>\n",
            "last_activity_date": 1403631249,
            "question_id": 4631928,
            "score": 61,
            "tags": [
                "javascript",
                "date",
                "utc",
                "epoch"
            ],
            "title": "Convert UTC Epoch to local date with javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>In theory it shouldn't make any difference in JavaScript, since the language does not have block scope, but only function scope.</p>\n\n<p>I'm not sure about the performance argument, but <a href=\"http://en.wikipedia.org/wiki/Douglas_Crockford\">Douglas Crockford</a> still recommends that the <code>var</code> statements should be the first statements in the function body. Quoting from <a href=\"http://javascript.crockford.com/code.html#variable%20declarations\">Code Conventions for the JavaScript Programming Language</a>:</p>\n\n<blockquote>\n  <p>JavaScript does not have block scope, so defining variables in blocks can confuse programmers who are experienced with other C family languages. Define all variables at the top of the function.</p>\n</blockquote>\n\n<p>I think he has a point, as you can see in the following example. Declaring the variables at the top of the function should not confuse readers into thinking that the variable <code>i</code>  is held in the scope of the <code>for</code> loop block:</p>\n\n<pre><code>function myFunction() {\n  var i;    // the scope of the variables is very clear\n\n  for (i = 0; i &lt; 10; i++) {\n    // ...\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Well, that depends on what you're trying to achieve... if <code>value</code> suppose to be only a temporary variable inside loop block then it's much clearer to use second form. It's also more logical and verbose.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Next year, all browsers will have JS engines that precompile the code so the performance difference (which comes from parsing the same block of code again and again plus executing the assignment) should become negligible.</p>\n\n<p>Also, never optimize for performance unless you have to. Keeping variables close to the place where you need them the first time keeps your code clean. On the negative side, people who are used to languages with block scopes might be confused.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The <code>ECMA-/Javascript</code> language <code>hoists</code> any variable which is declared anywhere to the top of a function. That is because this language <strong>does</strong> have <code>function scope</code> and does <strong>not</strong> have <code>block scope</code> like many other C-like languages.<br>\nThat is also known as <code>lexical scope</code>.</p>\n\n<p>If you declare something like</p>\n\n<pre><code>var foo = function(){\n    for(var i = 0; i &lt; 10; i++){\n    }\n};\n</code></pre>\n\n<p>This gets <code>hoisted</code> to:</p>\n\n<pre><code>var foo = function(){\n    var i;\n    for(i = 0; i &lt; 10; i++){\n    }\n}\n</code></pre>\n\n<p>So it does not make any difference in performance (But correct me if I'm totally wrong here).<br>\nA much better argument for <strong>not</strong> declaring a variable somewhere else than at the top of a function is <strong>readability</strong>. Declaring a variable within a <code>for-loop</code> might lead to the wrong assumption that this variable can only be accessed within the loop body, which is <strong>totally wrong</strong>. Infact you can access that variable anywhere within the current scope.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>There is <strong>absolutely no difference</strong> in meaning or performance, in JavaScript or ActionScript.</p>\n\n<p><code>var</code> is a directive for the parser, and <em>not</em> a command executed at run-time. If a particular identifier has been declared <code>var</code> once or more anywhere in a function body(*), then all use of that identifier in the block will be referring to the local variable. It makes no difference whether <code>value</code> is declared to be <code>var</code> inside the loop, outside the loop, or both.</p>\n\n<p>Consequently you should write whichever you find most readable. I disagree with Crockford that putting all the vars at the top of a function is always the best thing. For the case where a variable is used temporarily in a section of code, it's better to declare <code>var</code> in that section, so the section stands alone and can be copy-pasted. Otherwise, copy-paste a few lines of code to a new function during refactoring, without separately picking out and moving the associated <code>var</code>, and you've got yourself an accidental global.</p>\n\n<p>In particular:</p>\n\n<pre><code>for (var i; i&lt;100; i++)\n    do something;\n\nfor (var i; i&lt;100; i++)\n    do something else;\n</code></pre>\n\n<p>Crockford will recommend you remove the second <code>var</code> (or remove both <code>var</code>s and do <code>var i;</code> above), and jslint will whinge at you for this. But IMO it's more maintainable to keep both <code>var</code>s, keeping all the related code together, instead of having an extra, easily-forgotten bit of code at the top of the function.</p>\n\n<p>Personally I tend to declare as <code>var</code> the first assignment of a variable in an independent section of code, whether or not there's another separate usage of the same variable name in some other part of the same function. For me, having to declare <code>var</code> at all is an undesirable JS wart (it would have been better to have variables default to local); I don't see it as my duty to duplicate the limitations of [an old revision of] ANSI C in JavaScript as well.</p>\n\n<p>(*: other than in nested function bodies)</p>\n",
                    "is_accepted": true,
                    "score": 115
                },
                {
                    "body": "<p>I just did a simple test in Chrome</p>\n\n<pre><code>  var count = 100000000;\n    var a = 0;\n    console.log(new Date());\n\n    for (var i=0; i&lt;count; i++) {\n      a = a + 1\n    }\n\n    console.log(new Date());\n\n    var j;\n    for (j=0; j&lt;count; j++) {\n      a = a + 1;\n    }\n\n    console.log(new Date());\n\n    var j;\n    for (j=0; j&lt;count; j++) {\n        var x;\n        x = x + 1;\n    }\n\n    console.log(new Date());\n</code></pre>\n\n<p>Result is that the last test takes ~8 seconds and the previous 2 are only ~2 seconds.  Very repeatably and regardless of order.</p>\n\n<p>So, this proves to me, that one should always declare the vars outside of the loop.  Curious case to me is the first one where I declare <code>i</code> in the for() statement.  This one appears to be just as fast as the 2nd test where I pre-declare the index.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>for (var i : someArray) {\n    var q = i;\n}\n</code></pre>\n\n<p>This is a <code>for each</code> statement, so essentially, it means \"While the variable <code>i</code> is in <code>someArray</code>, this loop will run, and the variable <code>i</code> can be called within the loop.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JavaScript is a language written at the bottom by C or C++, I'm not very sure which one it is. And one of its purpose is saving the lavour of handling internal memory.\nEven in C or C++, you won't have to worry about whether it will consume a lot of resources when variables are declared inside a loop. Why should you worry about it in JavaScript?</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In AS3 I believe you should initialise all variables outside loops for increased performance. Is this the case with JavaScript as well? Which is better / faster / best-practice?</p>\n\n<pre><code>var value = 0;\n\nfor (var i; i &lt; 100; i++)\n{\n    value = somearray[i];\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for (var i; i &lt; 100; i++)\n{\n    var value = somearray[i];\n}\n</code></pre>\n",
            "last_activity_date": 1416145111,
            "question_id": 3684923,
            "score": 83,
            "tags": [
                "javascript",
                "performance"
            ],
            "title": "JavaScript variables declare outside or inside loop?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>According to John Resig, it's not possible to specify expiration. It's completely up to the user.</p>\n\n<p><a href=\"http://ejohn.org/blog/dom-storage/\">http://ejohn.org/blog/dom-storage/</a></p>\n\n<p><em>edit</em> &mdash; obviously, your own application can actively remove stuff if it decides it's too old. That is, you can explicitly include some sort of timestamp in what you've got saved, and then use that later to decide whether or not information should be flushed.</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>The lifecycle is controlled by the application/user.</p>\n\n<p>From the <a href=\"http://dev.w3.org/html5/webstorage/\">standard</a>:</p>\n\n<blockquote>\n  <p>User agents should expire data from the local storage areas only for security reasons or when requested to do so by the user. User agents should always avoid deleting data while a script that could access that data is running.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>From the W3C draft:</p>\n\n<blockquote>\n  <p>User agents should expire data from the local storage areas only for security reasons or when requested to do so by the user. User agents should always avoid deleting data while a script that could access that data is running.</p>\n</blockquote>\n\n<p>You'll want to do your updates on your schedule using setItem(key, value); that will either add or update the given key with the new data.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I would suggest to store timestamp in the <em>object</em> you store in the localStorage </p>\n\n<pre><code>var object = {value: \"value\", timestamp: new Date().getTime()}\nlocalStorage.setItem(\"key\", JSON.stringify(object));\n</code></pre>\n\n<p>You can parse the object, get the timestamp and compare with the current Date, and if necessary, update the value of the object.</p>\n\n<pre><code>var object = JSON.parse(localStorage.getItem(\"key\")),\n    dateString = object.timestamp,\n    now = new Date().getTime().toString();\n\ncompareTime(dateString, now); //to implement\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<p>You can use <a href=\"https://github.com/pamelafox/lscache\">lscache</a>. It handles this for you automatically, including instances where the storage size exceeds the limit. If that happens, it begins pruning items that are the closest to their specified expiration.</p>\n\n<p>From the <code>readme</code>:</p>\n\n<pre><code>lscache.set\n\nStores the value in localStorage. Expires after specified number of minutes.\n\nArguments\nkey (string)\nvalue (Object|string)\ntime (number: optional)\n</code></pre>\n\n<p>This is the only real difference between the regular storage methods. Get, remove, etc work the same. </p>\n\n<p>If you don't need that much functionality, you can simply store a time stamp with the value (via JSON) and check it for expiry.</p>\n\n<p>Noteworthy, there's a good reason why local storage is left up to the user. But, things like lscache do come in handy when you need to store extremely temporary data.  </p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>// Functions\nfunction removeHtmlStorage(name) {\n    localStorage.removeItem(name);\n    localStorage.removeItem(name+'_time');\n}\n\nfunction setHtmlStorage(name, value, expires) {\n\n    if (expires==undefined || expires=='null') { var expires = 3600; } // default: 1h\n\n    var date = new Date();\n    var schedule = Math.round((date.setSeconds(date.getSeconds()+expires))/1000);\n\n    localStorage.setItem(name, value);\n    localStorage.setItem(name+'_time', schedule);\n}\n\nfunction statusHtmlStorage(name) {\n\n    var date = new Date();\n    var current = Math.round(+date/1000);\n\n    // Get Schedule\n    var stored_time = localStorage.getItem(name+'_time');\n    if (stored_time==undefined || stored_time=='null') { var stored_time = 0; }\n\n    // Expired\n    if (stored_time &lt; current) {\n\n        // Remove\n        removeHtmlStorage(name);\n\n        return 0;\n\n    } else {\n\n        return 1;\n    }\n}\n\n// Status\nvar cache_status = statusHtmlStorage('cache_name');\n\n// Has Data\nif (cache_status == 1) {\n\n    // Get Cache\n    var data = localStorage.getItem('cache_name');\n    alert(data);\n\n// Expired or Empty Cache\n} else {\n\n    // Get Data\n    var data = 'Pay in cash :)';\n    alert(data);\n\n    // Set Cache (30 seconds)\n    if (cache) { setHtmlStorage('cache_name', data, 30); }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>While local storage does not supply an expiration mechanism, cookies do. Simply pairing a local storage key with a cookie provides an easy way to ensure that local storage can be updated with the same expiration parameters as a cookie.</p>\n\n<p>Example in jQuery:</p>\n\n<pre><code>if (!$.cookie('your_key') || !localStorage.getItem('your_key')) {\n    //get your_data from server, then...\n    localStorage.setItem('your_key', 'your_data' );\n    $.cookie('your_key', 1);\n} else {\n    var your_data = localStorage.getItem('your_key');\n}\n// do stuff with your_data\n</code></pre>\n\n<p>This example sets a cookie with the default parameter to expire when the browser is closed. Thus, when the browser is closed and re-opened, the local data store for your_data gets refreshed by a server-side call.</p>\n\n<p>Note that this is not exactly the same as <em>removing</em> the local data store, it is instead updating the local data store whenever the cookie expires. However, if your main goal is to be able to store more than 4K client-side (the limitation for cookie size), this pairing of cookie and local storage will help you to accomplish a larger storage size using the same expiration parameters as a cookie.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Workaround using angular and localforage:</p>\n\n<pre><code>angular.module('app').service('cacheService', function() {\n\n  return {\n    set: function(key, value, expireTimeInSeconds) {\n      return localforage.setItem(key, {\n        data: value,\n        timestamp: new Date().getTime(),\n        expireTimeInMilliseconds: expireTimeInSeconds * 1000\n      })\n    },\n    get: function(key) {\n      return localforage.getItem(key).then(function(item) {\n        if(!item || new Date().getTime() &gt; (item.timestamp + item.expireTimeInMilliseconds)) {\n          return null\n        } else {\n          return item.data\n        }\n      })\n    }\n  }\n\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found this plugin on google code, I didnt write it so I'm not taking credit for it :</p>\n\n<p><a href=\"https://code.google.com/p/local-cache/\" rel=\"nofollow\">https://code.google.com/p/local-cache/</a></p>\n\n<p>Works like a charm!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@sebarmeli's approach is the best in my opinion, but if you only want data to persist for the life of a session then <code>sessionStorage</code> is probably a better option:</p>\n\n<blockquote>\n  <p>This is a global object (sessionStorage) that maintains a storage area\n  that's available for the duration of the page session. A page session\n  lasts for as long as the browser is open and survives over page\n  reloads and restores. Opening a page in a new tab or window will cause\n  a new session to be initiated.</p>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage#sessionStorage\" rel=\"nofollow\">MDN: sessionStorage</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How many days data, stored in localStorage (as a part of Dom Storage HTML 5) available? Can i set expires time for data which, i puts to localStorage?</p>\n",
            "last_activity_date": 1425820023,
            "question_id": 2326943,
            "score": 75,
            "tags": [
                "javascript",
                "html5",
                "local-storage"
            ],
            "title": "When do items in HTML5 local storage expire?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Keep in mind that and javascript fanciness is messing with the brower's internal DOM model of the page, and does nothing to the raw HTML.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It would be very difficult to code a solution that would work with any arbitrary site out there.  Each navigation menu implementation can be quite unique.  I've worked a great deal with scrapers, and, provided you know the site you wish to target, here is how I'd approach it.</p>\n\n<p>Usually, if you analyze the particular javascript used in a nav menu, it is fairly easy to use regular expressions to pull out the entire set of variables that are used to build the navmenu.  I have never used Beautiful Soup, but from your description it sounds like it may only work on HTML elements and not be able to work inside the script tags.</p>\n\n<p>If you're still having problems, or need to emulate some form POSTs or ajax, get Firefox and install the <a href=\"http://livehttpheaders.mozdev.org/\" rel=\"nofollow\">LiveHttpHeaders</a> plugin.  This plugin will allow you to manually browse the site and capture the urls being navigated along with any cookies that are being passed during your manual browsing.  That is what you need your scraperbot to send in a request to get a valid response from the target webserver(s).   This will also capture any ajax calls being made, and in many cases the same ajax calls must be implementated in your scraper to get your desired responses.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could use <a href=\"http://selenium.openqa.org/\">Selenium</a> or <a href=\"http://watir.com/\">Watir</a> to drive a real browser.</p>\n\n<p>Ther are also some JavaScript-based headless browsers:</p>\n\n<ul>\n<li><a href=\"http://www.phantomjs.org/\">PhantomJS</a> is a headless Webkit browser.\n<ul>\n<li><a href=\"http://nrabinowitz.github.com/pjscrape/\">pjscrape</a> is a scraping framework based on PhantomJS and jQuery.</li>\n<li><a href=\"http://n1k0.github.com/casperjs/\">CasperJS</a> is a navigation scripting &amp; testing utility bsaed on PhantomJS, if you need to do a little more than point at URLs to be scraped.</li>\n</ul></li>\n<li><a href=\"http://zombie.labnotes.org/\">Zombie</a> for <a href=\"http://nodejs.org\">Node.js</a></li>\n</ul>\n\n<p>Personally, I'm most familiar with Selenium, which has support for writing automation scripts in a good number of languagues and has more mature tooling, such as the excellent <a href=\"http://selenium-ide.openqa.org/\">Selenium IDE</a> extension for Firefox, which can be used to write and run testcases, and can export test scripts to many languages.</p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>I've been using Selenium for this and it find that it works great.\nSelenium runs in Browser and will work with Firefox, Webkit and IE.\n<a href=\"http://selenium.openqa.org/\" rel=\"nofollow\">http://selenium.openqa.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@insin Watir is not IE only.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/81566#83387\">http://stackoverflow.com/questions/81566#83387</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using <a href=\"http://htmlunit.sourceforge.net/\">HtmlUnit</a> is also a possibility.</p>\n\n<blockquote>\n  <p>HtmlUnit is a \"GUI-Less browser for\n  Java programs\". It models HTML\n  documents and provides an API that\n  allows you to invoke pages, fill out\n  forms, click links, etc... just like\n  you do in your \"normal\" browser.</p>\n  \n  <p>It has fairly good JavaScript support\n  (which is constantly improving) and is\n  able to work even with quite complex\n  AJAX libraries, simulating either\n  Firefox or Internet Explorer depending\n  on the configuration you want to use.</p>\n  \n  <p>It is typically used for testing\n  purposes or to retrieve information\n  from web sites.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://www.mozenda.com/\" rel=\"nofollow\">Mozenda</a> is a great tool to use as well.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Selenium now wraps htmlunit so you don\u00b4t need start a browser anymore. The new WebDriver api is very easy to use too. <a href=\"http://code.google.com/p/selenium/wiki/GettingStarted\" rel=\"nofollow\">The first example use htmlunit driver</a> </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can try the open source screen scraper from <a href=\"http://scrape.it\" rel=\"nofollow\">Scrape.it</a></p>\n\n<p>Update: As of April 4th, 2013 Scrape.it Screen Scraper is open source on <a href=\"https://github.com/jjk3/scrape-it-screen-scraper\" rel=\"nofollow\">github</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Is there a good test suite or tool set that can automate website navigation -- with Javascript support -- and collect the HTML from the pages?</p>\n\n<p>Of course I can scrape straight HTML with BeautifulSoup.  But this does me no good for sites that require Javascript. :)</p>\n",
            "last_activity_date": 1365115195,
            "question_id": 125177,
            "score": 25,
            "tags": [
                "javascript",
                "screen-scraping"
            ],
            "title": "What&#39;s a good tool to screen-scrape with Javascript support?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>In IE, use document.selection.createRange().parentElement() and in real browsers use window.getSelection().getRangeAt(0).startContainer.parentNode. Something like this:</p>\n\n<pre><code>function getSelectedNode()\n{\n    if (document.selection)\n    \treturn document.selection.createRange().parentElement();\n    else\n    {\n    \tvar selection = window.getSelection();\n    \tif (selection.rangeCount &gt; 0)\n    \t\treturn selection.getRangeAt(0).startContainer.parentNode;\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>The following will return the container <strong>element</strong> of the start or end boundary of the current selection, using the boolean <code>isStart</code> to specify whether you want the start or end boundary. It will work in most mainstream browsers. Add feature tests for more robustness.</p>\n\n<pre><code>function getSelectionBoundaryElement(isStart) {\n    var range, sel, container;\n    if (document.selection) {\n        range = document.selection.createRange();\n        range.collapse(isStart);\n        return range.parentElement();\n    } else {\n        sel = window.getSelection();\n        if (sel.getRangeAt) {\n            if (sel.rangeCount &gt; 0) {\n                range = sel.getRangeAt(0);\n            }\n        } else {\n            // Old WebKit\n            range = document.createRange();\n            range.setStart(sel.anchorNode, sel.anchorOffset);\n            range.setEnd(sel.focusNode, sel.focusOffset);\n\n            // Handle the case when the selection was selected backwards (from the end to the start in the document)\n            if (range.collapsed !== sel.isCollapsed) {\n                range.setStart(sel.focusNode, sel.focusOffset);\n                range.setEnd(sel.anchorNode, sel.anchorOffset);\n            }\n       }\n\n        if (range) {\n           container = range[isStart ? \"startContainer\" : \"endContainer\"];\n\n           // Check if the container is a text node and return its parent if so\n           return container.nodeType === 3 ? container.parentNode : container;\n        }   \n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 39
                }
            ],
            "body": "<p>You can select a part of a web page with the mouse.</p>\n\n<p>I know that I can get the <a href=\"http://www.webreference.com/js/column12/crossbrowser.html\">currently selected text</a> but how can I get the DOM element which contains the start or end of the current selection?</p>\n",
            "last_activity_date": 1374056227,
            "question_id": 1335252,
            "score": 19,
            "tags": [
                "javascript",
                "html",
                "dom",
                "selection"
            ],
            "title": "How can I get the DOM element which contains the current selection?"
        }
    ]
}
